
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/mv
        UUID: 004FF7F2-46D2-D69C-9D83-09E4E2978D84
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x1aac0[ (109248 bytes)
        ; File offset : [0; 109248[ (109248 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x80 ; '.'
0000000000000019         db  0x34 ; '4'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0xc8 ; '.'
0000000000000029         db  0x6a ; 'j'
000000000000002a         db  0x09 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xc0 ; '.'
00000000000000d1         db  0xaa ; '.'
00000000000000d2         db  0x01 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xc0 ; '.'
00000000000000d9         db  0xaa ; '.'
00000000000000da         db  0x01 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0x90 ; '.'
00000000000000f1         db  0xb7 ; '.'
00000000000000f2         db  0x01 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0x90 ; '.'
00000000000000f9         db  0xb7 ; '.'
00000000000000fa         db  0x21 ; '!'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0x90 ; '.'                                         ; DATA XREF=excise+404, cache_fstatat.constprop.3+35, copy_internal+412, copy_internal+2693, samedir_template+25, strmode+116, quotearg_free+87, renameatu+297, renameatu+376, renameatu+466, same_nameat.part.0+51
0000000000000101         db  0xb7 ; '.'
0000000000000102         db  0x21 ; '!'                                         ; DATA XREF=setup_dir.isra.4, enter_dir.isra.10, leave_dir.isra.12+23, rpl_fts_close+159, rpl_fts_read+688
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x18 ; '.'
0000000000000109         db  0x09 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x68 ; 'h'                                         ; DATA XREF=fdutimens+13, fdutimens+816
0000000000000111         db  0x0f ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'                                         ; DATA XREF=main+15, main+1071
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x38 ; '8'                                         ; DATA XREF=utimecmpat+16, utimecmpat+344
0000000000000129         db  0xba ; '.'
000000000000012a         db  0x01 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x38 ; '8'                                         ; DATA XREF=force_symlinkat+16, force_symlinkat+194
0000000000000131         db  0xba ; '.'
0000000000000132         db  0x21 ; '!'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x38 ; '8'                                         ; DATA XREF=same_nameat.part.0+17, same_nameat.part.0+198
0000000000000139         db  0xba ; '.'
000000000000013a         db  0x21 ; '!'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'                                         ; DATA XREF=renameatu+65
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'                                         ; DATA XREF=gen_tempname_len+43
0000000000000148         db  0xf0 ; '.'                                         ; DATA XREF=force_linkat+24, force_linkat+217, renameatu+28, renameatu+116
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'                                         ; DATA XREF=copy_internal+16504, try_file+2
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xdc ; '.'
0000000000000199         db  0x74 ; 't'
000000000000019a         db  0x01 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xdc ; '.'
00000000000001a1         db  0x74 ; 't'
00000000000001a2         db  0x01 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xdc ; '.'
00000000000001a9         db  0x74 ; 't'
00000000000001aa         db  0x01 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x94 ; '.'
00000000000001b1         db  0x08 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'                                         ; DATA XREF=copy_internal+11791, copy_internal+16240
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x94 ; '.'
00000000000001b9         db  0x08 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'                                         ; DATA XREF=set_owner+295, copy_internal+7345, copy_internal+7350, copy_internal+7367, try_dir
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'                                         ; DATA XREF=main+1717
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'                                         ; DATA XREF=copy_internal+11796, copy_internal+11830
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=prompt+1052, copy_internal+12037, extent_scan_read+69, strmode+304, xfts_open+4, diropen.isra.6+20, fts_build+1173, fts_build+1365
0000000000000201         db  0xe5 ; '.'                                         ; DATA XREF=copy_internal+11874
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'                                         ; DATA XREF=fts_build+1159, rpl_fts_open+30, rpl_fts_open+35, rpl_fts_open+629
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0x90 ; '.'
0000000000000209         db  0xb7 ; '.'
000000000000020a         db  0x01 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0x90 ; '.'
0000000000000211         db  0xb7 ; '.'
0000000000000212         db  0x21 ; '!'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0x90 ; '.'
0000000000000219         db  0xb7 ; '.'
000000000000021a         db  0x21 ; '!'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x70 ; 'p'
0000000000000221         db  0x08 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x70 ; 'p'
0000000000000229         db  0x08 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'                                         ; DATA XREF=rm+72
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'                                         ; DATA XREF=sub_47d0+966
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x00 ; '.'
0000000000000285         db  0x4f ; 'O'
0000000000000286         db  0xf7 ; '.'
0000000000000287         db  0xf2 ; '.'
0000000000000288         db  0x46 ; 'F'
0000000000000289         db  0xd2 ; '.'
000000000000028a         db  0xd6 ; '.'
000000000000028b         db  0x9c ; '.'
000000000000028c         db  0x9d ; '.'
000000000000028d         db  0x83 ; '.'
000000000000028e         db  0x09 ; '.'
000000000000028f         db  0xe4 ; '.'
0000000000000290         db  0xe2 ; '.'
0000000000000291         db  0x97 ; '.'
0000000000000292         db  0x8d ; '.'
0000000000000293         db  0x84 ; '.'
0000000000000294         db  0x6b ; 'k'
0000000000000295         db  0xcf ; '.'
0000000000000296         db  0xb9 ; '.'
0000000000000297         db  0xd2 ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2e0[ (72 bytes)
        ; File offset : [664; 736[ (72 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x78 ; 'x'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x61 ; 'a'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0xa0 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x78 ; 'x'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x79 ; 'y'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x7f ; '.'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x66 ; 'f'
00000000000002c5         db  0x55 ; 'U'
00000000000002c6         db  0x61 ; 'a'
00000000000002c7         db  0x10 ; '.'
00000000000002c8         db  0x96 ; '.'
00000000000002c9         db  0xa0 ; '.'
00000000000002ca         db  0x89 ; '.'
00000000000002cb         db  0x97 ; '.'
00000000000002cc         db  0xce ; '.'
00000000000002cd         db  0x2c ; ','
00000000000002ce         db  0x63 ; 'c'
00000000000002cf         db  0x72 ; 'r'
00000000000002d0         db  0xe4 ; '.'
00000000000002d1         db  0x62 ; 'b'
00000000000002d2         db  0x41 ; 'A'
00000000000002d3         db  0xf5 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x32 ; '2'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0xb3 ; '.'
00000000000002dd         db  0xa2 ; '.'
00000000000002de         db  0xf7 ; '.'
00000000000002df         db  0x12 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xef8[ (3096 bytes)
        ; File offset : [736; 3832[ (3096 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x85 ; '.'
00000000000002f9         db  0x02 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0x3d ; '='
0000000000000311         db  0x04 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0xb5 ; '.'
0000000000000329         db  0x01 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0xf4 ; '.'
0000000000000341         db  0x00 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0xc5 ; '.'
0000000000000359         db  0x01 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0xc4 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x4d ; 'M'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'                                         ; DATA XREF=copy_internal+19
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0xcc ; '.'
00000000000003a1         db  0x04 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x20 ; ' '
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x00 ; '.'
00000000000003b9         db  0x01 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x12 ; '.'
00000000000003d1         db  0x00 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x38 ; '8'
00000000000003e9         db  0x03 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x9f ; '.'                                         ; DATA XREF=write_zeros+142, strmode+235, rpl_fcntl+288
0000000000000401         db  0x00 ; '.'                                         ; DATA XREF=areadlink_with_size+4, areadlink_with_size+46, rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=fts_build+2307, opendir_safer+55, rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0xd4 ; '.'
0000000000000419         db  0x00 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x80 ; '.'
0000000000000431         db  0x00 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x68 ; 'h'
0000000000000449         db  0x03 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x5b ; '['
0000000000000461         db  0x01 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0xec ; '.'
0000000000000479         db  0x03 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0xb2 ; '.'
0000000000000491         db  0x02 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0xa4 ; '.'
00000000000004a9         db  0x03 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x2a ; '*'
00000000000004c1         db  0x03 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0xf3 ; '.'
00000000000004d9         db  0x02 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x06 ; '.'
00000000000004f1         db  0x01 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x9f ; '.'
0000000000000509         db  0x01 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0xcf ; '.'
0000000000000521         db  0x03 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x13 ; '.'
0000000000000539         db  0x02 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x29 ; ')'
0000000000000551         db  0x02 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x54 ; 'T'
0000000000000569         db  0x02 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0xcb ; '.'
0000000000000581         db  0x03 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x15 ; '.'
0000000000000599         db  0x04 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0xbf ; '.'
00000000000005b1         db  0x01 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x76 ; 'v'
00000000000005c9         db  0x00 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x44 ; 'D'
00000000000005e1         db  0x01 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x98 ; '.'
00000000000005f9         db  0x01 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0xbb ; '.'
0000000000000611         db  0x00 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xaa ; '.'
0000000000000629         db  0x03 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0xaa ; '.'
0000000000000641         db  0x00 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0xab ; '.'
0000000000000659         db  0x02 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0xbb ; '.'
0000000000000671         db  0x02 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x3f ; '?'
0000000000000689         db  0x00 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0xda ; '.'
00000000000006a1         db  0x03 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x23 ; '#'
00000000000006b9         db  0x04 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x66 ; 'f'
00000000000006d1         db  0x00 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x55 ; 'U'
00000000000006e9         db  0x00 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x1c ; '.'
0000000000000701         db  0x02 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0xf9 ; '.'
0000000000000719         db  0x02 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x2c ; ','
0000000000000731         db  0x01 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0xae ; '.'
0000000000000749         db  0x01 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x22 ; '"'
0000000000000761         db  0x03 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0xa5 ; '.'
0000000000000779         db  0x02 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x6e ; 'n'
0000000000000791         db  0x03 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x2a ; '*'
00000000000007a9         db  0x02 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0xea ; '.'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x0d ; '.'
00000000000007d9         db  0x01 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x89 ; '.'
00000000000007f1         db  0x00 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'                                         ; DATA XREF=isaac_refill+74, isaac_refill+108, isaac_refill+141, isaac_refill+175, isaac_refill+207, isaac_refill+234, isaac_refill+275, isaac_refill+311, isaac_refill+378, isaac_refill+412, isaac_refill+445
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'                                         ; DATA XREF=randread_new+296, randread_new+495, randread_new+648, randread_new+735, randread_new+786, randread+200, randread+223
0000000000000800         db  0x00 ; '.'                                         ; DATA XREF=strmode+166, randread_new+250, randread_new+260, randread_new+431, randread_new+517, randread+165, randread+245, randread+258, randread+312, randread+323, randread+336
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x69 ; 'i'
0000000000000809         db  0x01 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0xd6 ; '.'
0000000000000821         db  0x01 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0xfd ; '.'
0000000000000839         db  0x03 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0xdb ; '.'
0000000000000851         db  0x01 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x3a ; ':'
0000000000000869         db  0x01 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x2e ; '.'
0000000000000881         db  0x04 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0xe0 ; '.'
0000000000000899         db  0x02 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x7f ; '.'
00000000000008b1         db  0x01 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0xe7 ; '.'
00000000000008c9         db  0x02 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0xf6 ; '.'
00000000000008e1         db  0x03 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x0f ; '.'
00000000000008f9         db  0x04 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x12 ; '.'
0000000000000911         db  0x02 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x6e ; 'n'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x94 ; '.'
0000000000000941         db  0x03 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0xe5 ; '.'
0000000000000959         db  0x03 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0xe8 ; '.'
0000000000000971         db  0x04 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x20 ; ' '
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x4c ; 'L'
0000000000000989         db  0x02 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x22 ; '"'
00000000000009a1         db  0x02 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0xc7 ; '.'
00000000000009b9         db  0x02 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x12 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0xd9 ; '.'
00000000000009d1         db  0x02 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x12 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x64 ; 'd'
00000000000009e9         db  0x02 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x12 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x00 ; '.'
00000000000009f2         db  0x00 ; '.'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x00 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0xbb ; '.'
0000000000000a01         db  0x03 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x12 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x00 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x00 ; '.'
0000000000000a09         db  0x00 ; '.'
0000000000000a0a         db  0x00 ; '.'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x00 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0x2d ; '-'
0000000000000a19         db  0x00 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x12 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x00 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0x00 ; '.'
0000000000000a21         db  0x00 ; '.'
0000000000000a22         db  0x00 ; '.'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x00 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0x45 ; 'E'
0000000000000a31         db  0x02 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x12 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x00 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x00 ; '.'
0000000000000a39         db  0x00 ; '.'
0000000000000a3a         db  0x00 ; '.'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x00 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0x0b ; '.'
0000000000000a49         db  0x00 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x12 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x00 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0x00 ; '.'
0000000000000a51         db  0x00 ; '.'
0000000000000a52         db  0x00 ; '.'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x00 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0x6b ; 'k'
0000000000000a61         db  0x02 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x12 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x00 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0x00 ; '.'
0000000000000a69         db  0x00 ; '.'
0000000000000a6a         db  0x00 ; '.'
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x00 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0xd0 ; '.'
0000000000000a79         db  0x02 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x12 ; '.'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x00 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0x00 ; '.'
0000000000000a81         db  0x00 ; '.'
0000000000000a82         db  0x00 ; '.'
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x00 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0x62 ; 'b'
0000000000000a91         db  0x01 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x12 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x00 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0x00 ; '.'
0000000000000a99         db  0x00 ; '.'
0000000000000a9a         db  0x00 ; '.'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x00 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0x93 ; '.'
0000000000000aa9         db  0x02 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x12 ; '.'
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x00 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0x00 ; '.'
0000000000000ab1         db  0x00 ; '.'
0000000000000ab2         db  0x00 ; '.'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x00 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'
0000000000000ac0         db  0x92 ; '.'
0000000000000ac1         db  0x00 ; '.'
0000000000000ac2         db  0x00 ; '.'
0000000000000ac3         db  0x00 ; '.'
0000000000000ac4         db  0x12 ; '.'
0000000000000ac5         db  0x00 ; '.'
0000000000000ac6         db  0x00 ; '.'
0000000000000ac7         db  0x00 ; '.'
0000000000000ac8         db  0x00 ; '.'
0000000000000ac9         db  0x00 ; '.'
0000000000000aca         db  0x00 ; '.'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x00 ; '.'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x00 ; '.'
0000000000000acf         db  0x00 ; '.'
0000000000000ad0         db  0x00 ; '.'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x00 ; '.'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x00 ; '.'
0000000000000ad5         db  0x00 ; '.'
0000000000000ad6         db  0x00 ; '.'
0000000000000ad7         db  0x00 ; '.'
0000000000000ad8         db  0xda ; '.'
0000000000000ad9         db  0x00 ; '.'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x00 ; '.'
0000000000000adc         db  0x12 ; '.'
0000000000000add         db  0x00 ; '.'
0000000000000ade         db  0x00 ; '.'
0000000000000adf         db  0x00 ; '.'
0000000000000ae0         db  0x00 ; '.'
0000000000000ae1         db  0x00 ; '.'
0000000000000ae2         db  0x00 ; '.'
0000000000000ae3         db  0x00 ; '.'
0000000000000ae4         db  0x00 ; '.'
0000000000000ae5         db  0x00 ; '.'
0000000000000ae6         db  0x00 ; '.'
0000000000000ae7         db  0x00 ; '.'
0000000000000ae8         db  0x00 ; '.'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x00 ; '.'
0000000000000aeb         db  0x00 ; '.'
0000000000000aec         db  0x00 ; '.'
0000000000000aed         db  0x00 ; '.'
0000000000000aee         db  0x00 ; '.'
0000000000000aef         db  0x00 ; '.'
0000000000000af0         db  0x61 ; 'a'
0000000000000af1         db  0x03 ; '.'
0000000000000af2         db  0x00 ; '.'
0000000000000af3         db  0x00 ; '.'
0000000000000af4         db  0x12 ; '.'
0000000000000af5         db  0x00 ; '.'
0000000000000af6         db  0x00 ; '.'
0000000000000af7         db  0x00 ; '.'
0000000000000af8         db  0x00 ; '.'
0000000000000af9         db  0x00 ; '.'
0000000000000afa         db  0x00 ; '.'
0000000000000afb         db  0x00 ; '.'
0000000000000afc         db  0x00 ; '.'
0000000000000afd         db  0x00 ; '.'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x00 ; '.'
0000000000000b00         db  0x00 ; '.'
0000000000000b01         db  0x00 ; '.'
0000000000000b02         db  0x00 ; '.'
0000000000000b03         db  0x00 ; '.'
0000000000000b04         db  0x00 ; '.'
0000000000000b05         db  0x00 ; '.'
0000000000000b06         db  0x00 ; '.'
0000000000000b07         db  0x00 ; '.'
0000000000000b08         db  0x3e ; '>'
0000000000000b09         db  0x02 ; '.'
0000000000000b0a         db  0x00 ; '.'
0000000000000b0b         db  0x00 ; '.'
0000000000000b0c         db  0x12 ; '.'
0000000000000b0d         db  0x00 ; '.'
0000000000000b0e         db  0x00 ; '.'
0000000000000b0f         db  0x00 ; '.'
0000000000000b10         db  0x00 ; '.'
0000000000000b11         db  0x00 ; '.'
0000000000000b12         db  0x00 ; '.'
0000000000000b13         db  0x00 ; '.'
0000000000000b14         db  0x00 ; '.'
0000000000000b15         db  0x00 ; '.'
0000000000000b16         db  0x00 ; '.'
0000000000000b17         db  0x00 ; '.'
0000000000000b18         db  0x00 ; '.'
0000000000000b19         db  0x00 ; '.'
0000000000000b1a         db  0x00 ; '.'
0000000000000b1b         db  0x00 ; '.'
0000000000000b1c         db  0x00 ; '.'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x00 ; '.'
0000000000000b1f         db  0x00 ; '.'
0000000000000b20         db  0x35 ; '5'
0000000000000b21         db  0x00 ; '.'
0000000000000b22         db  0x00 ; '.'
0000000000000b23         db  0x00 ; '.'
0000000000000b24         db  0x12 ; '.'
0000000000000b25         db  0x00 ; '.'
0000000000000b26         db  0x00 ; '.'
0000000000000b27         db  0x00 ; '.'
0000000000000b28         db  0x00 ; '.'
0000000000000b29         db  0x00 ; '.'
0000000000000b2a         db  0x00 ; '.'
0000000000000b2b         db  0x00 ; '.'
0000000000000b2c         db  0x00 ; '.'
0000000000000b2d         db  0x00 ; '.'
0000000000000b2e         db  0x00 ; '.'
0000000000000b2f         db  0x00 ; '.'
0000000000000b30         db  0x00 ; '.'
0000000000000b31         db  0x00 ; '.'
0000000000000b32         db  0x00 ; '.'
0000000000000b33         db  0x00 ; '.'
0000000000000b34         db  0x00 ; '.'
0000000000000b35         db  0x00 ; '.'
0000000000000b36         db  0x00 ; '.'
0000000000000b37         db  0x00 ; '.'
0000000000000b38         db  0x20 ; ' '
0000000000000b39         db  0x00 ; '.'
0000000000000b3a         db  0x00 ; '.'
0000000000000b3b         db  0x00 ; '.'
0000000000000b3c         db  0x12 ; '.'
0000000000000b3d         db  0x00 ; '.'
0000000000000b3e         db  0x00 ; '.'
0000000000000b3f         db  0x00 ; '.'
0000000000000b40         db  0x00 ; '.'
0000000000000b41         db  0x00 ; '.'
0000000000000b42         db  0x00 ; '.'
0000000000000b43         db  0x00 ; '.'
0000000000000b44         db  0x00 ; '.'
0000000000000b45         db  0x00 ; '.'
0000000000000b46         db  0x00 ; '.'
0000000000000b47         db  0x00 ; '.'
0000000000000b48         db  0x00 ; '.'
0000000000000b49         db  0x00 ; '.'
0000000000000b4a         db  0x00 ; '.'
0000000000000b4b         db  0x00 ; '.'
0000000000000b4c         db  0x00 ; '.'
0000000000000b4d         db  0x00 ; '.'
0000000000000b4e         db  0x00 ; '.'
0000000000000b4f         db  0x00 ; '.'
0000000000000b50         db  0x19 ; '.'
0000000000000b51         db  0x00 ; '.'
0000000000000b52         db  0x00 ; '.'
0000000000000b53         db  0x00 ; '.'
0000000000000b54         db  0x12 ; '.'
0000000000000b55         db  0x00 ; '.'
0000000000000b56         db  0x00 ; '.'
0000000000000b57         db  0x00 ; '.'
0000000000000b58         db  0x00 ; '.'
0000000000000b59         db  0x00 ; '.'
0000000000000b5a         db  0x00 ; '.'
0000000000000b5b         db  0x00 ; '.'
0000000000000b5c         db  0x00 ; '.'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x00 ; '.'
0000000000000b5f         db  0x00 ; '.'
0000000000000b60         db  0x00 ; '.'
0000000000000b61         db  0x00 ; '.'
0000000000000b62         db  0x00 ; '.'
0000000000000b63         db  0x00 ; '.'
0000000000000b64         db  0x00 ; '.'
0000000000000b65         db  0x00 ; '.'
0000000000000b66         db  0x00 ; '.'
0000000000000b67         db  0x00 ; '.'
0000000000000b68         db  0x9c ; '.'
0000000000000b69         db  0x03 ; '.'
0000000000000b6a         db  0x00 ; '.'
0000000000000b6b         db  0x00 ; '.'
0000000000000b6c         db  0x12 ; '.'
0000000000000b6d         db  0x00 ; '.'
0000000000000b6e         db  0x00 ; '.'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0x00 ; '.'
0000000000000b71         db  0x00 ; '.'
0000000000000b72         db  0x00 ; '.'
0000000000000b73         db  0x00 ; '.'
0000000000000b74         db  0x00 ; '.'
0000000000000b75         db  0x00 ; '.'
0000000000000b76         db  0x00 ; '.'
0000000000000b77         db  0x00 ; '.'
0000000000000b78         db  0x00 ; '.'
0000000000000b79         db  0x00 ; '.'
0000000000000b7a         db  0x00 ; '.'
0000000000000b7b         db  0x00 ; '.'
0000000000000b7c         db  0x00 ; '.'
0000000000000b7d         db  0x00 ; '.'
0000000000000b7e         db  0x00 ; '.'
0000000000000b7f         db  0x00 ; '.'
0000000000000b80         db  0x1a ; '.'
0000000000000b81         db  0x00 ; '.'
0000000000000b82         db  0x00 ; '.'
0000000000000b83         db  0x00 ; '.'
0000000000000b84         db  0x12 ; '.'
0000000000000b85         db  0x00 ; '.'
0000000000000b86         db  0x00 ; '.'                                         ; DATA XREF=copy+347
0000000000000b87         db  0x00 ; '.'                                         ; DATA XREF=copy+316
0000000000000b88         db  0x00 ; '.'                                         ; DATA XREF=copy+285
0000000000000b89         db  0x00 ; '.'                                         ; DATA XREF=copy+254
0000000000000b8a         db  0x00 ; '.'                                         ; DATA XREF=copy+187
0000000000000b8b         db  0x00 ; '.'
0000000000000b8c         db  0x00 ; '.'
0000000000000b8d         db  0x00 ; '.'                                         ; DATA XREF=copy+218
0000000000000b8e         db  0x00 ; '.'
0000000000000b8f         db  0x00 ; '.'
0000000000000b90         db  0x00 ; '.'
0000000000000b91         db  0x00 ; '.'
0000000000000b92         db  0x00 ; '.'
0000000000000b93         db  0x00 ; '.'
0000000000000b94         db  0x00 ; '.'
0000000000000b95         db  0x00 ; '.'
0000000000000b96         db  0x00 ; '.'
0000000000000b97         db  0x00 ; '.'
0000000000000b98         db  0xee ; '.'
0000000000000b99         db  0x01 ; '.'
0000000000000b9a         db  0x00 ; '.'
0000000000000b9b         db  0x00 ; '.'
0000000000000b9c         db  0x12 ; '.'
0000000000000b9d         db  0x00 ; '.'
0000000000000b9e         db  0x00 ; '.'
0000000000000b9f         db  0x00 ; '.'
0000000000000ba0         db  0x00 ; '.'
0000000000000ba1         db  0x00 ; '.'
0000000000000ba2         db  0x00 ; '.'
0000000000000ba3         db  0x00 ; '.'
0000000000000ba4         db  0x00 ; '.'
0000000000000ba5         db  0x00 ; '.'
0000000000000ba6         db  0x00 ; '.'
0000000000000ba7         db  0x00 ; '.'
0000000000000ba8         db  0x00 ; '.'
0000000000000ba9         db  0x00 ; '.'
0000000000000baa         db  0x00 ; '.'
0000000000000bab         db  0x00 ; '.'
0000000000000bac         db  0x00 ; '.'
0000000000000bad         db  0x00 ; '.'
0000000000000bae         db  0x00 ; '.'
0000000000000baf         db  0x00 ; '.'
0000000000000bb0         db  0xc3 ; '.'
0000000000000bb1         db  0x03 ; '.'
0000000000000bb2         db  0x00 ; '.'
0000000000000bb3         db  0x00 ; '.'
0000000000000bb4         db  0x12 ; '.'
0000000000000bb5         db  0x00 ; '.'
0000000000000bb6         db  0x00 ; '.'
0000000000000bb7         db  0x00 ; '.'
0000000000000bb8         db  0x00 ; '.'
0000000000000bb9         db  0x00 ; '.'
0000000000000bba         db  0x00 ; '.'
0000000000000bbb         db  0x00 ; '.'
0000000000000bbc         db  0x00 ; '.'
0000000000000bbd         db  0x00 ; '.'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x00 ; '.'
0000000000000bc0         db  0x00 ; '.'
0000000000000bc1         db  0x00 ; '.'
0000000000000bc2         db  0x00 ; '.'
0000000000000bc3         db  0x00 ; '.'
0000000000000bc4         db  0x00 ; '.'
0000000000000bc5         db  0x00 ; '.'
0000000000000bc6         db  0x00 ; '.'
0000000000000bc7         db  0x00 ; '.'
0000000000000bc8         db  0x99 ; '.'
0000000000000bc9         db  0x00 ; '.'
0000000000000bca         db  0x00 ; '.'
0000000000000bcb         db  0x00 ; '.'
0000000000000bcc         db  0x12 ; '.'
0000000000000bcd         db  0x00 ; '.'
0000000000000bce         db  0x00 ; '.'
0000000000000bcf         db  0x00 ; '.'
0000000000000bd0         db  0x00 ; '.'
0000000000000bd1         db  0x00 ; '.'
0000000000000bd2         db  0x00 ; '.'
0000000000000bd3         db  0x00 ; '.'
0000000000000bd4         db  0x00 ; '.'
0000000000000bd5         db  0x00 ; '.'
0000000000000bd6         db  0x00 ; '.'
0000000000000bd7         db  0x00 ; '.'
0000000000000bd8         db  0x00 ; '.'
0000000000000bd9         db  0x00 ; '.'
0000000000000bda         db  0x00 ; '.'
0000000000000bdb         db  0x00 ; '.'
0000000000000bdc         db  0x00 ; '.'
0000000000000bdd         db  0x00 ; '.'
0000000000000bde         db  0x00 ; '.'
0000000000000bdf         db  0x00 ; '.'
0000000000000be0         db  0x0d ; '.'
0000000000000be1         db  0x03 ; '.'
0000000000000be2         db  0x00 ; '.'
0000000000000be3         db  0x00 ; '.'
0000000000000be4         db  0x12 ; '.'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x00 ; '.'
0000000000000be7         db  0x00 ; '.'
0000000000000be8         db  0x00 ; '.'
0000000000000be9         db  0x00 ; '.'
0000000000000bea         db  0x00 ; '.'
0000000000000beb         db  0x00 ; '.'
0000000000000bec         db  0x00 ; '.'
0000000000000bed         db  0x00 ; '.'
0000000000000bee         db  0x00 ; '.'
0000000000000bef         db  0x00 ; '.'
0000000000000bf0         db  0x00 ; '.'
0000000000000bf1         db  0x00 ; '.'
0000000000000bf2         db  0x00 ; '.'
0000000000000bf3         db  0x00 ; '.'
0000000000000bf4         db  0x00 ; '.'
0000000000000bf5         db  0x00 ; '.'
0000000000000bf6         db  0x00 ; '.'
0000000000000bf7         db  0x00 ; '.'
0000000000000bf8         db  0x63 ; 'c'
0000000000000bf9         db  0x03 ; '.'
0000000000000bfa         db  0x00 ; '.'
0000000000000bfb         db  0x00 ; '.'
0000000000000bfc         db  0x12 ; '.'
0000000000000bfd         db  0x00 ; '.'
0000000000000bfe         db  0x00 ; '.'
0000000000000bff         db  0x00 ; '.'
0000000000000c00         db  0x00 ; '.'
0000000000000c01         db  0x00 ; '.'
0000000000000c02         db  0x00 ; '.'
0000000000000c03         db  0x00 ; '.'
0000000000000c04         db  0x00 ; '.'
0000000000000c05         db  0x00 ; '.'
0000000000000c06         db  0x00 ; '.'
0000000000000c07         db  0x00 ; '.'
0000000000000c08         db  0x00 ; '.'
0000000000000c09         db  0x00 ; '.'
0000000000000c0a         db  0x00 ; '.'
0000000000000c0b         db  0x00 ; '.'
0000000000000c0c         db  0x00 ; '.'
0000000000000c0d         db  0x00 ; '.'
0000000000000c0e         db  0x00 ; '.'
0000000000000c0f         db  0x00 ; '.'
0000000000000c10         db  0x1c ; '.'
0000000000000c11         db  0x04 ; '.'
0000000000000c12         db  0x00 ; '.'
0000000000000c13         db  0x00 ; '.'
0000000000000c14         db  0x12 ; '.'
0000000000000c15         db  0x00 ; '.'
0000000000000c16         db  0x00 ; '.'
0000000000000c17         db  0x00 ; '.'
0000000000000c18         db  0x00 ; '.'
0000000000000c19         db  0x00 ; '.'
0000000000000c1a         db  0x00 ; '.'
0000000000000c1b         db  0x00 ; '.'
0000000000000c1c         db  0x00 ; '.'
0000000000000c1d         db  0x00 ; '.'
0000000000000c1e         db  0x00 ; '.'
0000000000000c1f         db  0x00 ; '.'
0000000000000c20         db  0x00 ; '.'
0000000000000c21         db  0x00 ; '.'
0000000000000c22         db  0x00 ; '.'
0000000000000c23         db  0x00 ; '.'
0000000000000c24         db  0x00 ; '.'
0000000000000c25         db  0x00 ; '.'
0000000000000c26         db  0x00 ; '.'
0000000000000c27         db  0x00 ; '.'
0000000000000c28         db  0x04 ; '.'
0000000000000c29         db  0x02 ; '.'
0000000000000c2a         db  0x00 ; '.'
0000000000000c2b         db  0x00 ; '.'
0000000000000c2c         db  0x12 ; '.'
0000000000000c2d         db  0x00 ; '.'
0000000000000c2e         db  0x00 ; '.'
0000000000000c2f         db  0x00 ; '.'
0000000000000c30         db  0x00 ; '.'
0000000000000c31         db  0x00 ; '.'
0000000000000c32         db  0x00 ; '.'
0000000000000c33         db  0x00 ; '.'
0000000000000c34         db  0x00 ; '.'
0000000000000c35         db  0x00 ; '.'
0000000000000c36         db  0x00 ; '.'
0000000000000c37         db  0x00 ; '.'
0000000000000c38         db  0x00 ; '.'
0000000000000c39         db  0x00 ; '.'
0000000000000c3a         db  0x00 ; '.'
0000000000000c3b         db  0x00 ; '.'
0000000000000c3c         db  0x00 ; '.'
0000000000000c3d         db  0x00 ; '.'
0000000000000c3e         db  0x00 ; '.'
0000000000000c3f         db  0x00 ; '.'
0000000000000c40         db  0x47 ; 'G'
0000000000000c41         db  0x00 ; '.'
0000000000000c42         db  0x00 ; '.'
0000000000000c43         db  0x00 ; '.'
0000000000000c44         db  0x12 ; '.'
0000000000000c45         db  0x00 ; '.'
0000000000000c46         db  0x00 ; '.'
0000000000000c47         db  0x00 ; '.'
0000000000000c48         db  0x00 ; '.'
0000000000000c49         db  0x00 ; '.'
0000000000000c4a         db  0x00 ; '.'
0000000000000c4b         db  0x00 ; '.'
0000000000000c4c         db  0x00 ; '.'
0000000000000c4d         db  0x00 ; '.'
0000000000000c4e         db  0x00 ; '.'
0000000000000c4f         db  0x00 ; '.'
0000000000000c50         db  0x00 ; '.'
0000000000000c51         db  0x00 ; '.'
0000000000000c52         db  0x00 ; '.'
0000000000000c53         db  0x00 ; '.'
0000000000000c54         db  0x00 ; '.'
0000000000000c55         db  0x00 ; '.'
0000000000000c56         db  0x00 ; '.'
0000000000000c57         db  0x00 ; '.'
0000000000000c58         db  0x06 ; '.'
0000000000000c59         db  0x03 ; '.'
0000000000000c5a         db  0x00 ; '.'
0000000000000c5b         db  0x00 ; '.'
0000000000000c5c         db  0x12 ; '.'
0000000000000c5d         db  0x00 ; '.'
0000000000000c5e         db  0x00 ; '.'
0000000000000c5f         db  0x00 ; '.'
0000000000000c60         db  0x00 ; '.'
0000000000000c61         db  0x00 ; '.'
0000000000000c62         db  0x00 ; '.'
0000000000000c63         db  0x00 ; '.'
0000000000000c64         db  0x00 ; '.'
0000000000000c65         db  0x00 ; '.'
0000000000000c66         db  0x00 ; '.'
0000000000000c67         db  0x00 ; '.'
0000000000000c68         db  0x00 ; '.'
0000000000000c69         db  0x00 ; '.'
0000000000000c6a         db  0x00 ; '.'
0000000000000c6b         db  0x00 ; '.'
0000000000000c6c         db  0x00 ; '.'
0000000000000c6d         db  0x00 ; '.'
0000000000000c6e         db  0x00 ; '.'
0000000000000c6f         db  0x00 ; '.'
0000000000000c70         db  0x52 ; 'R'
0000000000000c71         db  0x02 ; '.'
0000000000000c72         db  0x00 ; '.'
0000000000000c73         db  0x00 ; '.'
0000000000000c74         db  0x12 ; '.'
0000000000000c75         db  0x00 ; '.'
0000000000000c76         db  0x00 ; '.'
0000000000000c77         db  0x00 ; '.'
0000000000000c78         db  0x00 ; '.'
0000000000000c79         db  0x00 ; '.'
0000000000000c7a         db  0x00 ; '.'
0000000000000c7b         db  0x00 ; '.'
0000000000000c7c         db  0x00 ; '.'
0000000000000c7d         db  0x00 ; '.'
0000000000000c7e         db  0x00 ; '.'
0000000000000c7f         db  0x00 ; '.'
0000000000000c80         db  0x00 ; '.'
0000000000000c81         db  0x00 ; '.'
0000000000000c82         db  0x00 ; '.'
0000000000000c83         db  0x00 ; '.'
0000000000000c84         db  0x00 ; '.'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x00 ; '.'
0000000000000c87         db  0x00 ; '.'
0000000000000c88         db  0x8f ; '.'
0000000000000c89         db  0x01 ; '.'
0000000000000c8a         db  0x00 ; '.'
0000000000000c8b         db  0x00 ; '.'
0000000000000c8c         db  0x12 ; '.'
0000000000000c8d         db  0x00 ; '.'
0000000000000c8e         db  0x00 ; '.'
0000000000000c8f         db  0x00 ; '.'
0000000000000c90         db  0x00 ; '.'
0000000000000c91         db  0x00 ; '.'
0000000000000c92         db  0x00 ; '.'
0000000000000c93         db  0x00 ; '.'
0000000000000c94         db  0x00 ; '.'
0000000000000c95         db  0x00 ; '.'
0000000000000c96         db  0x00 ; '.'
0000000000000c97         db  0x00 ; '.'
0000000000000c98         db  0x00 ; '.'
0000000000000c99         db  0x00 ; '.'
0000000000000c9a         db  0x00 ; '.'
0000000000000c9b         db  0x00 ; '.'
0000000000000c9c         db  0x00 ; '.'
0000000000000c9d         db  0x00 ; '.'
0000000000000c9e         db  0x00 ; '.'
0000000000000c9f         db  0x00 ; '.'
0000000000000ca0         db  0x30 ; '0'
0000000000000ca1         db  0x02 ; '.'
0000000000000ca2         db  0x00 ; '.'
0000000000000ca3         db  0x00 ; '.'
0000000000000ca4         db  0x12 ; '.'
0000000000000ca5         db  0x00 ; '.'
0000000000000ca6         db  0x00 ; '.'
0000000000000ca7         db  0x00 ; '.'
0000000000000ca8         db  0x00 ; '.'
0000000000000ca9         db  0x00 ; '.'
0000000000000caa         db  0x00 ; '.'
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x00 ; '.'
0000000000000cad         db  0x00 ; '.'
0000000000000cae         db  0x00 ; '.'
0000000000000caf         db  0x00 ; '.'
0000000000000cb0         db  0x00 ; '.'
0000000000000cb1         db  0x00 ; '.'
0000000000000cb2         db  0x00 ; '.'
0000000000000cb3         db  0x00 ; '.'
0000000000000cb4         db  0x00 ; '.'
0000000000000cb5         db  0x00 ; '.'
0000000000000cb6         db  0x00 ; '.'
0000000000000cb7         db  0x00 ; '.'
0000000000000cb8         db  0xe2 ; '.'
0000000000000cb9         db  0x00 ; '.'
0000000000000cba         db  0x00 ; '.'
0000000000000cbb         db  0x00 ; '.'
0000000000000cbc         db  0x12 ; '.'
0000000000000cbd         db  0x00 ; '.'
0000000000000cbe         db  0x00 ; '.'
0000000000000cbf         db  0x00 ; '.'
0000000000000cc0         db  0x00 ; '.'
0000000000000cc1         db  0x00 ; '.'
0000000000000cc2         db  0x00 ; '.'
0000000000000cc3         db  0x00 ; '.'
0000000000000cc4         db  0x00 ; '.'
0000000000000cc5         db  0x00 ; '.'
0000000000000cc6         db  0x00 ; '.'
0000000000000cc7         db  0x00 ; '.'
0000000000000cc8         db  0x00 ; '.'
0000000000000cc9         db  0x00 ; '.'
0000000000000cca         db  0x00 ; '.'
0000000000000ccb         db  0x00 ; '.'
0000000000000ccc         db  0x00 ; '.'
0000000000000ccd         db  0x00 ; '.'
0000000000000cce         db  0x00 ; '.'
0000000000000ccf         db  0x00 ; '.'
0000000000000cd0         db  0x5d ; ']'
0000000000000cd1         db  0x04 ; '.'
0000000000000cd2         db  0x00 ; '.'
0000000000000cd3         db  0x00 ; '.'
0000000000000cd4         db  0x12 ; '.'
0000000000000cd5         db  0x00 ; '.'
0000000000000cd6         db  0x00 ; '.'
0000000000000cd7         db  0x00 ; '.'
0000000000000cd8         db  0x00 ; '.'
0000000000000cd9         db  0x00 ; '.'
0000000000000cda         db  0x00 ; '.'
0000000000000cdb         db  0x00 ; '.'
0000000000000cdc         db  0x00 ; '.'
0000000000000cdd         db  0x00 ; '.'
0000000000000cde         db  0x00 ; '.'
0000000000000cdf         db  0x00 ; '.'
0000000000000ce0         db  0x00 ; '.'
0000000000000ce1         db  0x00 ; '.'
0000000000000ce2         db  0x00 ; '.'
0000000000000ce3         db  0x00 ; '.'
0000000000000ce4         db  0x00 ; '.'
0000000000000ce5         db  0x00 ; '.'
0000000000000ce6         db  0x00 ; '.'
0000000000000ce7         db  0x00 ; '.'
0000000000000ce8         db  0x86 ; '.'
0000000000000ce9         db  0x01 ; '.'
0000000000000cea         db  0x00 ; '.'
0000000000000ceb         db  0x00 ; '.'
0000000000000cec         db  0x12 ; '.'
0000000000000ced         db  0x00 ; '.'
0000000000000cee         db  0x00 ; '.'
0000000000000cef         db  0x00 ; '.'
0000000000000cf0         db  0x00 ; '.'
0000000000000cf1         db  0x00 ; '.'
0000000000000cf2         db  0x00 ; '.'
0000000000000cf3         db  0x00 ; '.'
0000000000000cf4         db  0x00 ; '.'
0000000000000cf5         db  0x00 ; '.'
0000000000000cf6         db  0x00 ; '.'
0000000000000cf7         db  0x00 ; '.'
0000000000000cf8         db  0x00 ; '.'
0000000000000cf9         db  0x00 ; '.'
0000000000000cfa         db  0x00 ; '.'
0000000000000cfb         db  0x00 ; '.'
0000000000000cfc         db  0x00 ; '.'
0000000000000cfd         db  0x00 ; '.'
0000000000000cfe         db  0x00 ; '.'
0000000000000cff         db  0x00 ; '.'
0000000000000d00         db  0xe2 ; '.'
0000000000000d01         db  0x01 ; '.'
0000000000000d02         db  0x00 ; '.'
0000000000000d03         db  0x00 ; '.'
0000000000000d04         db  0x12 ; '.'
0000000000000d05         db  0x00 ; '.'
0000000000000d06         db  0x00 ; '.'
0000000000000d07         db  0x00 ; '.'
0000000000000d08         db  0x00 ; '.'
0000000000000d09         db  0x00 ; '.'
0000000000000d0a         db  0x00 ; '.'
0000000000000d0b         db  0x00 ; '.'
0000000000000d0c         db  0x00 ; '.'
0000000000000d0d         db  0x00 ; '.'
0000000000000d0e         db  0x00 ; '.'
0000000000000d0f         db  0x00 ; '.'
0000000000000d10         db  0x00 ; '.'
0000000000000d11         db  0x00 ; '.'
0000000000000d12         db  0x00 ; '.'
0000000000000d13         db  0x00 ; '.'
0000000000000d14         db  0x00 ; '.'
0000000000000d15         db  0x00 ; '.'
0000000000000d16         db  0x00 ; '.'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0x77 ; 'w'
0000000000000d19         db  0x01 ; '.'
0000000000000d1a         db  0x00 ; '.'
0000000000000d1b         db  0x00 ; '.'
0000000000000d1c         db  0x12 ; '.'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x00 ; '.'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0x00 ; '.'
0000000000000d21         db  0x00 ; '.'
0000000000000d22         db  0x00 ; '.'
0000000000000d23         db  0x00 ; '.'
0000000000000d24         db  0x00 ; '.'
0000000000000d25         db  0x00 ; '.'
0000000000000d26         db  0x00 ; '.'
0000000000000d27         db  0x00 ; '.'
0000000000000d28         db  0x00 ; '.'
0000000000000d29         db  0x00 ; '.'
0000000000000d2a         db  0x00 ; '.'
0000000000000d2b         db  0x00 ; '.'
0000000000000d2c         db  0x00 ; '.'
0000000000000d2d         db  0x00 ; '.'
0000000000000d2e         db  0x00 ; '.'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0x01 ; '.'
0000000000000d31         db  0x01 ; '.'
0000000000000d32         db  0x00 ; '.'
0000000000000d33         db  0x00 ; '.'
0000000000000d34         db  0x12 ; '.'
0000000000000d35         db  0x00 ; '.'
0000000000000d36         db  0x00 ; '.'
0000000000000d37         db  0x00 ; '.'
0000000000000d38         db  0x00 ; '.'
0000000000000d39         db  0x00 ; '.'
0000000000000d3a         db  0x00 ; '.'
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x00 ; '.'
0000000000000d3d         db  0x00 ; '.'
0000000000000d3e         db  0x00 ; '.'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x00 ; '.'
0000000000000d41         db  0x00 ; '.'
0000000000000d42         db  0x00 ; '.'
0000000000000d43         db  0x00 ; '.'
0000000000000d44         db  0x00 ; '.'
0000000000000d45         db  0x00 ; '.'
0000000000000d46         db  0x00 ; '.'
0000000000000d47         db  0x00 ; '.'
0000000000000d48         db  0xf2 ; '.'
0000000000000d49         db  0x02 ; '.'
0000000000000d4a         db  0x00 ; '.'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x12 ; '.'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x00 ; '.'
0000000000000d4f         db  0x00 ; '.'
0000000000000d50         db  0x00 ; '.'
0000000000000d51         db  0x00 ; '.'
0000000000000d52         db  0x00 ; '.'
0000000000000d53         db  0x00 ; '.'
0000000000000d54         db  0x00 ; '.'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x00 ; '.'
0000000000000d57         db  0x00 ; '.'
0000000000000d58         db  0x00 ; '.'
0000000000000d59         db  0x00 ; '.'
0000000000000d5a         db  0x00 ; '.'
0000000000000d5b         db  0x00 ; '.'
0000000000000d5c         db  0x00 ; '.'
0000000000000d5d         db  0x00 ; '.'
0000000000000d5e         db  0x00 ; '.'
0000000000000d5f         db  0x00 ; '.'
0000000000000d60         db  0xf6 ; '.'
0000000000000d61         db  0x01 ; '.'
0000000000000d62         db  0x00 ; '.'
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x12 ; '.'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x00 ; '.'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0x00 ; '.'
0000000000000d69         db  0x00 ; '.'
0000000000000d6a         db  0x00 ; '.'
0000000000000d6b         db  0x00 ; '.'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x00 ; '.'
0000000000000d6e         db  0x00 ; '.'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x00 ; '.'
0000000000000d71         db  0x00 ; '.'
0000000000000d72         db  0x00 ; '.'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x00 ; '.'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x00 ; '.'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0xf7 ; '.'
0000000000000d79         db  0x04 ; '.'
0000000000000d7a         db  0x00 ; '.'
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x20 ; ' '
0000000000000d7d         db  0x00 ; '.'
0000000000000d7e         db  0x00 ; '.'
0000000000000d7f         db  0x00 ; '.'
0000000000000d80         db  0x00 ; '.'
0000000000000d81         db  0x00 ; '.'
0000000000000d82         db  0x00 ; '.'
0000000000000d83         db  0x00 ; '.'
0000000000000d84         db  0x00 ; '.'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x00 ; '.'
0000000000000d87         db  0x00 ; '.'
0000000000000d88         db  0x00 ; '.'
0000000000000d89         db  0x00 ; '.'
0000000000000d8a         db  0x00 ; '.'
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x00 ; '.'
0000000000000d8d         db  0x00 ; '.'
0000000000000d8e         db  0x00 ; '.'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x5c ; '\'
0000000000000d91         db  0x02 ; '.'
0000000000000d92         db  0x00 ; '.'
0000000000000d93         db  0x00 ; '.'
0000000000000d94         db  0x12 ; '.'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x00 ; '.'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0x00 ; '.'
0000000000000d99         db  0x00 ; '.'
0000000000000d9a         db  0x00 ; '.'
0000000000000d9b         db  0x00 ; '.'
0000000000000d9c         db  0x00 ; '.'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x00 ; '.'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0x00 ; '.'
0000000000000da1         db  0x00 ; '.'
0000000000000da2         db  0x00 ; '.'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x00 ; '.'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x00 ; '.'
0000000000000da7         db  0x00 ; '.'
0000000000000da8         db  0x3b ; ';'
0000000000000da9         db  0x02 ; '.'
0000000000000daa         db  0x00 ; '.'
0000000000000dab         db  0x00 ; '.'
0000000000000dac         db  0x12 ; '.'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x00 ; '.'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0x00 ; '.'
0000000000000db1         db  0x00 ; '.'
0000000000000db2         db  0x00 ; '.'
0000000000000db3         db  0x00 ; '.'
0000000000000db4         db  0x00 ; '.'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x00 ; '.'
0000000000000db7         db  0x00 ; '.'
0000000000000db8         db  0x00 ; '.'
0000000000000db9         db  0x00 ; '.'
0000000000000dba         db  0x00 ; '.'
0000000000000dbb         db  0x00 ; '.'
0000000000000dbc         db  0x00 ; '.'
0000000000000dbd         db  0x00 ; '.'
0000000000000dbe         db  0x00 ; '.'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0xcb ; '.'
0000000000000dc1         db  0x00 ; '.'
0000000000000dc2         db  0x00 ; '.'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x12 ; '.'
0000000000000dc5         db  0x00 ; '.'
0000000000000dc6         db  0x00 ; '.'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0x00 ; '.'
0000000000000dc9         db  0x00 ; '.'
0000000000000dca         db  0x00 ; '.'
0000000000000dcb         db  0x00 ; '.'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x00 ; '.'
0000000000000dce         db  0x00 ; '.'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0x00 ; '.'
0000000000000dd1         db  0x00 ; '.'
0000000000000dd2         db  0x00 ; '.'
0000000000000dd3         db  0x00 ; '.'
0000000000000dd4         db  0x00 ; '.'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x00 ; '.'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x85 ; '.'
0000000000000dd9         db  0x03 ; '.'
0000000000000dda         db  0x00 ; '.'
0000000000000ddb         db  0x00 ; '.'
0000000000000ddc         db  0x22 ; '"'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x00 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0x00 ; '.'
0000000000000de1         db  0x00 ; '.'
0000000000000de2         db  0x00 ; '.'
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x00 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x00 ; '.'
0000000000000de9         db  0x00 ; '.'
0000000000000dea         db  0x00 ; '.'
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x00 ; '.'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x00 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0xb1 ; '.'
0000000000000df1         db  0x03 ; '.'
0000000000000df2         db  0x00 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x12 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x00 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x00 ; '.'
0000000000000df9         db  0x00 ; '.'
0000000000000dfa         db  0x00 ; '.'
0000000000000dfb         db  0x00 ; '.'
0000000000000dfc         db  0x00 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x00 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0x00 ; '.'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x00 ; '.'
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x00 ; '.'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x00 ; '.'
0000000000000e07         db  0x00 ; '.'
0000000000000e08         db  0x77 ; 'w'
0000000000000e09         db  0x02 ; '.'
0000000000000e0a         db  0x00 ; '.'
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x12 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x00 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x00 ; '.'
0000000000000e11         db  0x00 ; '.'
0000000000000e12         db  0x00 ; '.'
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x00 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x00 ; '.'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x00 ; '.'
0000000000000e19         db  0x00 ; '.'
0000000000000e1a         db  0x00 ; '.'
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x00 ; '.'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x00 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0x0b ; '.'
0000000000000e21         db  0x02 ; '.'
0000000000000e22         db  0x00 ; '.'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x11 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x19 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0xc8 ; '.'
0000000000000e29         db  0xc0 ; '.'
0000000000000e2a         db  0x21 ; '!'
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x00 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0x08 ; '.'
0000000000000e31         db  0x00 ; '.'
0000000000000e32         db  0x00 ; '.'
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x00 ; '.'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x00 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x42 ; 'B'
0000000000000e39         db  0x04 ; '.'
0000000000000e3a         db  0x00 ; '.'
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x11 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x19 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0xc0 ; '.'
0000000000000e41         db  0xc0 ; '.'
0000000000000e42         db  0x21 ; '!'
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x00 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x00 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0x08 ; '.'
0000000000000e49         db  0x00 ; '.'
0000000000000e4a         db  0x00 ; '.'
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x00 ; '.'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x00 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0xfa ; '.'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x00 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x11 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x19 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0xd0 ; '.'
0000000000000e59         db  0xc0 ; '.'
0000000000000e5a         db  0x21 ; '!'
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x00 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x00 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x08 ; '.'
0000000000000e61         db  0x00 ; '.'
0000000000000e62         db  0x00 ; '.'
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x00 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x14 ; '.'
0000000000000e69         db  0x01 ; '.'
0000000000000e6a         db  0x00 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x21 ; '!'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x19 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0xe8 ; '.'
0000000000000e71         db  0xc0 ; '.'
0000000000000e72         db  0x21 ; '!'
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x00 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x08 ; '.'
0000000000000e79         db  0x00 ; '.'
0000000000000e7a         db  0x00 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x00 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x4d ; 'M'
0000000000000e81         db  0x04 ; '.'
0000000000000e82         db  0x00 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x11 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x19 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0xe8 ; '.'
0000000000000e89         db  0xc0 ; '.'
0000000000000e8a         db  0x21 ; '!'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0x08 ; '.'
0000000000000e91         db  0x00 ; '.'
0000000000000e92         db  0x00 ; '.'
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x00 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x00 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x43 ; 'C'
0000000000000e99         db  0x03 ; '.'
0000000000000e9a         db  0x00 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x21 ; '!'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x19 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0xc0 ; '.'
0000000000000ea1         db  0xc0 ; '.'
0000000000000ea2         db  0x21 ; '!'
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x00 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x08 ; '.'
0000000000000ea9         db  0x00 ; '.'
0000000000000eaa         db  0x00 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x00 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x9e ; '.'
0000000000000eb1         db  0x02 ; '.'
0000000000000eb2         db  0x00 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x11 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x19 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x00 ; '.'
0000000000000eb9         db  0xc1 ; '.'
0000000000000eba         db  0x21 ; '!'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x00 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x08 ; '.'
0000000000000ec1         db  0x00 ; '.'
0000000000000ec2         db  0x00 ; '.'
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x00 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x5f ; '_'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x00 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x11 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x19 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0xd8 ; '.'
0000000000000ed1         db  0xc0 ; '.'
0000000000000ed2         db  0x21 ; '!'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x00 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x04 ; '.'
0000000000000ed9         db  0x00 ; '.'
0000000000000eda         db  0x00 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x00 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x8c ; '.'
0000000000000ee1         db  0x02 ; '.'
0000000000000ee2         db  0x00 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x11 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x19 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0xe0 ; '.'
0000000000000ee9         db  0xc0 ; '.'
0000000000000eea         db  0x21 ; '!'
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x08 ; '.'
0000000000000ef1         db  0x00 ; '.'
0000000000000ef2         db  0x00 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x00 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xef8; 0x1409[ (1297 bytes)
        ; File offset : [3832; 5129[ (1297 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000ef8         db  0x00 ; '.'
0000000000000ef9         db  0x6c ; 'l'
0000000000000efa         db  0x69 ; 'i'
0000000000000efb         db  0x62 ; 'b'
0000000000000efc         db  0x63 ; 'c'
0000000000000efd         db  0x2e ; '.'
0000000000000efe         db  0x73 ; 's'
0000000000000eff         db  0x6f ; 'o'
0000000000000f00         db  0x2e ; '.'
0000000000000f01         db  0x36 ; '6'
0000000000000f02         db  0x00 ; '.'
0000000000000f03         db  0x66 ; 'f'
0000000000000f04         db  0x66 ; 'f'
0000000000000f05         db  0x6c ; 'l'
0000000000000f06         db  0x75 ; 'u'
0000000000000f07         db  0x73 ; 's'
0000000000000f08         db  0x68 ; 'h'
0000000000000f09         db  0x00 ; '.'
0000000000000f0a         db  0x73 ; 's'
0000000000000f0b         db  0x74 ; 't'
0000000000000f0c         db  0x72 ; 'r'
0000000000000f0d         db  0x63 ; 'c'
0000000000000f0e         db  0x70 ; 'p'
0000000000000f0f         db  0x79 ; 'y'
0000000000000f10         db  0x00 ; '.'
0000000000000f11         db  0x66 ; 'f'
0000000000000f12         db  0x63 ; 'c'
0000000000000f13         db  0x68 ; 'h'
0000000000000f14         db  0x6d ; 'm'
0000000000000f15         db  0x6f ; 'o'
0000000000000f16         db  0x64 ; 'd'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x5f ; '_'
0000000000000f19         db  0x5f ; '_'
0000000000000f1a         db  0x70 ; 'p'
0000000000000f1b         db  0x72 ; 'r'
0000000000000f1c         db  0x69 ; 'i'
0000000000000f1d         db  0x6e ; 'n'
0000000000000f1e         db  0x74 ; 't'
0000000000000f1f         db  0x66 ; 'f'
0000000000000f20         db  0x5f ; '_'
0000000000000f21         db  0x63 ; 'c'
0000000000000f22         db  0x68 ; 'h'
0000000000000f23         db  0x6b ; 'k'
0000000000000f24         db  0x00 ; '.'
0000000000000f25         db  0x72 ; 'r'
0000000000000f26         db  0x65 ; 'e'
0000000000000f27         db  0x61 ; 'a'
0000000000000f28         db  0x64 ; 'd'
0000000000000f29         db  0x64 ; 'd'
0000000000000f2a         db  0x69 ; 'i'
0000000000000f2b         db  0x72 ; 'r'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x73 ; 's'
0000000000000f2e         db  0x65 ; 'e'
0000000000000f2f         db  0x74 ; 't'
0000000000000f30         db  0x6c ; 'l'
0000000000000f31         db  0x6f ; 'o'
0000000000000f32         db  0x63 ; 'c'
0000000000000f33         db  0x61 ; 'a'
0000000000000f34         db  0x6c ; 'l'
0000000000000f35         db  0x65 ; 'e'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x6d ; 'm'
0000000000000f38         db  0x62 ; 'b'
0000000000000f39         db  0x72 ; 'r'
0000000000000f3a         db  0x74 ; 't'
0000000000000f3b         db  0x6f ; 'o'
0000000000000f3c         db  0x77 ; 'w'
0000000000000f3d         db  0x63 ; 'c'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x66 ; 'f'
0000000000000f40         db  0x6f ; 'o'
0000000000000f41         db  0x70 ; 'p'
0000000000000f42         db  0x65 ; 'e'
0000000000000f43         db  0x6e ; 'n'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x73 ; 's'
0000000000000f46         db  0x74 ; 't'
0000000000000f47         db  0x72 ; 'r'
0000000000000f48         db  0x6e ; 'n'
0000000000000f49         db  0x63 ; 'c'
0000000000000f4a         db  0x6d ; 'm'
0000000000000f4b         db  0x70 ; 'p'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x66 ; 'f'
0000000000000f4e         db  0x74 ; 't'
0000000000000f4f         db  0x72 ; 'r'
0000000000000f50         db  0x75 ; 'u'
0000000000000f51         db  0x6e ; 'n'
0000000000000f52         db  0x63 ; 'c'
0000000000000f53         db  0x61 ; 'a'
0000000000000f54         db  0x74 ; 't'
0000000000000f55         db  0x65 ; 'e'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x6f ; 'o'
0000000000000f58         db  0x70 ; 'p'
0000000000000f59         db  0x74 ; 't'
0000000000000f5a         db  0x69 ; 'i'
0000000000000f5b         db  0x6e ; 'n'
0000000000000f5c         db  0x64 ; 'd'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x73 ; 's'
0000000000000f5f         db  0x74 ; 't'
0000000000000f60         db  0x72 ; 'r'
0000000000000f61         db  0x72 ; 'r'
0000000000000f62         db  0x63 ; 'c'
0000000000000f63         db  0x68 ; 'h'
0000000000000f64         db  0x72 ; 'r'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x72 ; 'r'
0000000000000f67         db  0x70 ; 'p'
0000000000000f68         db  0x6d ; 'm'
0000000000000f69         db  0x61 ; 'a'
0000000000000f6a         db  0x74 ; 't'
0000000000000f6b         db  0x63 ; 'c'
0000000000000f6c         db  0x68 ; 'h'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x64 ; 'd'
0000000000000f6f         db  0x63 ; 'c'
0000000000000f70         db  0x67 ; 'g'
0000000000000f71         db  0x65 ; 'e'
0000000000000f72         db  0x74 ; 't'
0000000000000f73         db  0x74 ; 't'
0000000000000f74         db  0x65 ; 'e'
0000000000000f75         db  0x78 ; 'x'
0000000000000f76         db  0x74 ; 't'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x75 ; 'u'
0000000000000f79         db  0x6e ; 'n'
0000000000000f7a         db  0x6c ; 'l'
0000000000000f7b         db  0x69 ; 'i'
0000000000000f7c         db  0x6e ; 'n'
0000000000000f7d         db  0x6b ; 'k'
0000000000000f7e         db  0x61 ; 'a'
0000000000000f7f         db  0x74 ; 't'
0000000000000f80         db  0x00 ; '.'
0000000000000f81         db  0x63 ; 'c'
0000000000000f82         db  0x6c ; 'l'
0000000000000f83         db  0x6f ; 'o'
0000000000000f84         db  0x73 ; 's'
0000000000000f85         db  0x65 ; 'e'
0000000000000f86         db  0x64 ; 'd'
0000000000000f87         db  0x69 ; 'i'
0000000000000f88         db  0x72 ; 'r'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x66 ; 'f'
0000000000000f8b         db  0x63 ; 'c'
0000000000000f8c         db  0x68 ; 'h'
0000000000000f8d         db  0x64 ; 'd'
0000000000000f8e         db  0x69 ; 'i'
0000000000000f8f         db  0x72 ; 'r'
0000000000000f90         db  0x00 ; '.'
0000000000000f91         db  0x65 ; 'e'
0000000000000f92         db  0x72 ; 'r'
0000000000000f93         db  0x72 ; 'r'
0000000000000f94         db  0x6f ; 'o'
0000000000000f95         db  0x72 ; 'r'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x5f ; '_'
0000000000000f98         db  0x5f ; '_'
0000000000000f99         db  0x72 ; 'r'
0000000000000f9a         db  0x65 ; 'e'
0000000000000f9b         db  0x61 ; 'a'
0000000000000f9c         db  0x64 ; 'd'
0000000000000f9d         db  0x5f ; '_'
0000000000000f9e         db  0x63 ; 'c'
0000000000000f9f         db  0x68 ; 'h'
0000000000000fa0         db  0x6b ; 'k'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x5f ; '_'
0000000000000fa3         db  0x5f ; '_'
0000000000000fa4         db  0x73 ; 's'
0000000000000fa5         db  0x74 ; 't'
0000000000000fa6         db  0x61 ; 'a'
0000000000000fa7         db  0x63 ; 'c'
0000000000000fa8         db  0x6b ; 'k'
0000000000000fa9         db  0x5f ; '_'
0000000000000faa         db  0x63 ; 'c'
0000000000000fab         db  0x68 ; 'h'
0000000000000fac         db  0x6b ; 'k'
0000000000000fad         db  0x5f ; '_'
0000000000000fae         db  0x66 ; 'f'
0000000000000faf         db  0x61 ; 'a'
0000000000000fb0         db  0x69 ; 'i'
0000000000000fb1         db  0x6c ; 'l'
0000000000000fb2         db  0x00 ; '.'
0000000000000fb3         db  0x5f ; '_'
0000000000000fb4         db  0x5f ; '_'
0000000000000fb5         db  0x6c ; 'l'
0000000000000fb6         db  0x78 ; 'x'
0000000000000fb7         db  0x73 ; 's'
0000000000000fb8         db  0x74 ; 't'
0000000000000fb9         db  0x61 ; 'a'
0000000000000fba         db  0x74 ; 't'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x75 ; 'u'
0000000000000fbd         db  0x6e ; 'n'
0000000000000fbe         db  0x6c ; 'l'
0000000000000fbf         db  0x69 ; 'i'
0000000000000fc0         db  0x6e ; 'n'
0000000000000fc1         db  0x6b ; 'k'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x69 ; 'i'
0000000000000fc4         db  0x73 ; 's'
0000000000000fc5         db  0x77 ; 'w'
0000000000000fc6         db  0x70 ; 'p'
0000000000000fc7         db  0x72 ; 'r'
0000000000000fc8         db  0x69 ; 'i'
0000000000000fc9         db  0x6e ; 'n'
0000000000000fca         db  0x74 ; 't'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x6d ; 'm'
0000000000000fcd         db  0x6b ; 'k'
0000000000000fce         db  0x64 ; 'd'
0000000000000fcf         db  0x69 ; 'i'
0000000000000fd0         db  0x72 ; 'r'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x72 ; 'r'
0000000000000fd3         db  0x65 ; 'e'
0000000000000fd4         db  0x61 ; 'a'
0000000000000fd5         db  0x6c ; 'l'
0000000000000fd6         db  0x6c ; 'l'
0000000000000fd7         db  0x6f ; 'o'
0000000000000fd8         db  0x63 ; 'c'
0000000000000fd9         db  0x00 ; '.'
0000000000000fda         db  0x66 ; 'f'
0000000000000fdb         db  0x73 ; 's'
0000000000000fdc         db  0x74 ; 't'
0000000000000fdd         db  0x61 ; 'a'
0000000000000fde         db  0x74 ; 't'
0000000000000fdf         db  0x66 ; 'f'
0000000000000fe0         db  0x73 ; 's'
0000000000000fe1         db  0x00 ; '.'
0000000000000fe2         db  0x72 ; 'r'
0000000000000fe3         db  0x65 ; 'e'
0000000000000fe4         db  0x77 ; 'w'
0000000000000fe5         db  0x69 ; 'i'
0000000000000fe6         db  0x6e ; 'n'
0000000000000fe7         db  0x64 ; 'd'
0000000000000fe8         db  0x64 ; 'd'
0000000000000fe9         db  0x69 ; 'i'
0000000000000fea         db  0x72 ; 'r'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x61 ; 'a'
0000000000000fed         db  0x62 ; 'b'
0000000000000fee         db  0x6f ; 'o'
0000000000000fef         db  0x72 ; 'r'
0000000000000ff0         db  0x74 ; 't'
0000000000000ff1         db  0x00 ; '.'
0000000000000ff2         db  0x73 ; 's'
0000000000000ff3         db  0x74 ; 't'
0000000000000ff4         db  0x64 ; 'd'
0000000000000ff5         db  0x69 ; 'i'
0000000000000ff6         db  0x6e ; 'n'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x5f ; '_'
0000000000000ff9         db  0x65 ; 'e'
0000000000000ffa         db  0x78 ; 'x'
0000000000000ffb         db  0x69 ; 'i'
0000000000000ffc         db  0x74 ; 't'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x67 ; 'g'
                     aEtpid:
0000000000000fff         db         "etpid", 0                                  ; DATA XREF=overwrite_ok.isra.12+92, set_owner+68, copy_internal+1207, copy_internal+1224
0000000000001005         db  0x73 ; 's'
0000000000001006         db  0x74 ; 't'
0000000000001007         db  0x72 ; 'r'
0000000000001008         db  0x73 ; 's'
0000000000001009         db  0x70 ; 'p'
000000000000100a         db  0x6e ; 'n'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x70 ; 'p'
000000000000100d         db  0x72 ; 'r'
000000000000100e         db  0x6f ; 'o'
000000000000100f         db  0x67 ; 'g'
0000000000001010         db  0x72 ; 'r'
0000000000001011         db  0x61 ; 'a'
0000000000001012         db  0x6d ; 'm'
0000000000001013         db  0x5f ; '_'
0000000000001014         db  0x69 ; 'i'
0000000000001015         db  0x6e ; 'n'
0000000000001016         db  0x76 ; 'v'
0000000000001017         db  0x6f ; 'o'
                     aCationname:
0000000000001018         db         "cation_name", 0                            ; DATA XREF=extent_scan_read+26, extent_scan_read+375, randread_new+270
0000000000001024         db  0x5f ; '_'
0000000000001025         db  0x5f ; '_'
0000000000001026         db  0x61 ; 'a'
0000000000001027         db  0x73 ; 's'
0000000000001028         db  0x73 ; 's'
0000000000001029         db  0x65 ; 'e'
000000000000102a         db  0x72 ; 'r'
000000000000102b         db  0x74 ; 't'
000000000000102c         db  0x5f ; '_'
000000000000102d         db  0x66 ; 'f'
000000000000102e         db  0x61 ; 'a'
000000000000102f         db  0x69 ; 'i'
0000000000001030         db  0x6c ; 'l'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x66 ; 'f'
0000000000001033         db  0x61 ; 'a'
0000000000001034         db  0x6c ; 'l'
0000000000001035         db  0x6c ; 'l'
0000000000001036         db  0x6f ; 'o'
0000000000001037         db  0x63 ; 'c'
0000000000001038         db  0x61 ; 'a'                                         ; DATA XREF=randread_new+74, randread_new+176, randread_new+328, randread_free+12
0000000000001039         db  0x74 ; 't'
000000000000103a         db  0x65 ; 'e'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x5f ; '_'
000000000000103d         db  0x5f ; '_'
000000000000103e         db  0x63 ; 'c'
000000000000103f         db  0x74 ; 't'
0000000000001040         db  0x79 ; 'y'
0000000000001041         db  0x70 ; 'p'
0000000000001042         db  0x65 ; 'e'
0000000000001043         db  0x5f ; '_'
0000000000001044         db  0x67 ; 'g'
0000000000001045         db  0x65 ; 'e'
0000000000001046         db  0x74 ; 't'
0000000000001047         db  0x5f ; '_'
0000000000001048         db  0x6d ; 'm'
0000000000001049         db  0x62 ; 'b'
000000000000104a         db  0x5f ; '_'
000000000000104b         db  0x63 ; 'c'
000000000000104c         db  0x75 ; 'u'
000000000000104d         db  0x72 ; 'r'
000000000000104e         db  0x5f ; '_'
000000000000104f         db  0x6d ; 'm'
0000000000001050         db  0x61 ; 'a'
0000000000001051         db  0x78 ; 'x'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x69 ; 'i'
0000000000001054         db  0x73 ; 's'
0000000000001055         db  0x61 ; 'a'
0000000000001056         db  0x74 ; 't'
0000000000001057         db  0x74 ; 't'
0000000000001058         db  0x79 ; 'y'
0000000000001059         db  0x00 ; '.'
000000000000105a         db  0x6c ; 'l'
000000000000105b         db  0x63 ; 'c'
000000000000105c         db  0x68 ; 'h'
000000000000105d         db  0x6f ; 'o'
000000000000105e         db  0x77 ; 'w'
000000000000105f         db  0x6e ; 'n'
0000000000001060         db  0x00 ; '.'
0000000000001061         db  0x70 ; 'p'
0000000000001062         db  0x6f ; 'o'
0000000000001063         db  0x73 ; 's'
0000000000001064         db  0x69 ; 'i'
0000000000001065         db  0x78 ; 'x'
0000000000001066         db  0x5f ; '_'
0000000000001067         db  0x66 ; 'f'
0000000000001068         db  0x61 ; 'a'
0000000000001069         db  0x64 ; 'd'
000000000000106a         db  0x76 ; 'v'
000000000000106b         db  0x69 ; 'i'
000000000000106c         db  0x73 ; 's'
000000000000106d         db  0x65 ; 'e'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x67 ; 'g'
0000000000001070         db  0x65 ; 'e'
0000000000001071         db  0x74 ; 't'
0000000000001072         db  0x70 ; 'p'
0000000000001073         db  0x70 ; 'p'
0000000000001074         db  0x69 ; 'i'
0000000000001075         db  0x64 ; 'd'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x63 ; 'c'
0000000000001078         db  0x61 ; 'a'
0000000000001079         db  0x6c ; 'l'
000000000000107a         db  0x6c ; 'l'
000000000000107b         db  0x6f ; 'o'
000000000000107c         db  0x63 ; 'c'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x72 ; 'r'
000000000000107f         db  0x65 ; 'e'
0000000000001080         db  0x6e ; 'n'
0000000000001081         db  0x61 ; 'a'
0000000000001082         db  0x6d ; 'm'
0000000000001083         db  0x65 ; 'e'
0000000000001084         db  0x61 ; 'a'
0000000000001085         db  0x74 ; 't'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x66 ; 'f'
0000000000001088         db  0x75 ; 'u'
0000000000001089         db  0x74 ; 't'
000000000000108a         db  0x69 ; 'i'
000000000000108b         db  0x6d ; 'm'
000000000000108c         db  0x65 ; 'e'
000000000000108d         db  0x6e ; 'n'
000000000000108e         db  0x73 ; 's'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x73 ; 's'
0000000000001091         db  0x74 ; 't'
0000000000001092         db  0x72 ; 'r'
0000000000001093         db  0x6c ; 'l'
0000000000001094         db  0x65 ; 'e'
0000000000001095         db  0x6e ; 'n'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x66 ; 'f'
0000000000001098         db  0x72 ; 'r'
0000000000001099         db  0x65 ; 'e'
000000000000109a         db  0x61 ; 'a'
000000000000109b         db  0x64 ; 'd'
000000000000109c         db  0x5f ; '_'
000000000000109d         db  0x75 ; 'u'
000000000000109e         db  0x6e ; 'n'
000000000000109f         db  0x6c ; 'l'
00000000000010a0         db  0x6f ; 'o'
00000000000010a1         db  0x63 ; 'c'
00000000000010a2         db  0x6b ; 'k'
00000000000010a3         db  0x65 ; 'e'
00000000000010a4         db  0x64 ; 'd'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x6d ; 'm'
00000000000010a7         db  0x65 ; 'e'
00000000000010a8         db  0x6d ; 'm'
00000000000010a9         db  0x73 ; 's'
00000000000010aa         db  0x65 ; 'e'
00000000000010ab         db  0x74 ; 't'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x75 ; 'u'
00000000000010ae         db  0x74 ; 't'
00000000000010af         db  0x69 ; 'i'
00000000000010b0         db  0x6d ; 'm'
00000000000010b1         db  0x65 ; 'e'
00000000000010b2         db  0x6e ; 'n'
00000000000010b3         db  0x73 ; 's'
00000000000010b4         db  0x61 ; 'a'
00000000000010b5         db  0x74 ; 't'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x72 ; 'r'
00000000000010b8         db  0x6d ; 'm'
00000000000010b9         db  0x64 ; 'd'
00000000000010ba         db  0x69 ; 'i'
00000000000010bb         db  0x72 ; 'r'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x5f ; '_'
00000000000010be         db  0x5f ; '_'
00000000000010bf         db  0x65 ; 'e'
00000000000010c0         db  0x72 ; 'r'
00000000000010c1         db  0x72 ; 'r'
00000000000010c2         db  0x6e ; 'n'
00000000000010c3         db  0x6f ; 'o'
00000000000010c4         db  0x5f ; '_'
00000000000010c5         db  0x6c ; 'l'
00000000000010c6         db  0x6f ; 'o'
00000000000010c7         db  0x63 ; 'c'
00000000000010c8         db  0x61 ; 'a'
00000000000010c9         db  0x74 ; 't'
00000000000010ca         db  0x69 ; 'i'
00000000000010cb         db  0x6f ; 'o'
00000000000010cc         db  0x6e ; 'n'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x72 ; 'r'
00000000000010cf         db  0x65 ; 'e'
00000000000010d0         db  0x61 ; 'a'
00000000000010d1         db  0x64 ; 'd'
00000000000010d2         db  0x00 ; '.'
00000000000010d3         db  0x6d ; 'm'
00000000000010d4         db  0x65 ; 'e'
00000000000010d5         db  0x6d ; 'm'
00000000000010d6         db  0x63 ; 'c'
00000000000010d7         db  0x6d ; 'm'
00000000000010d8         db  0x70 ; 'p'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x67 ; 'g'
00000000000010db         db  0x65 ; 'e'
00000000000010dc         db  0x74 ; 't'
00000000000010dd         db  0x70 ; 'p'
00000000000010de         db  0x61 ; 'a'
00000000000010df         db  0x67 ; 'g'
00000000000010e0         db  0x65 ; 'e'
00000000000010e1         db  0x73 ; 's'
00000000000010e2         db  0x69 ; 'i'
00000000000010e3         db  0x7a ; 'z'
00000000000010e4         db  0x65 ; 'e'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x6d ; 'm'
00000000000010e7         db  0x65 ; 'e'
00000000000010e8         db  0x6d ; 'm'
00000000000010e9         db  0x70 ; 'p'
00000000000010ea         db  0x63 ; 'c'
00000000000010eb         db  0x70 ; 'p'
00000000000010ec         db  0x79 ; 'y'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x5f ; '_'
00000000000010ef         db  0x5f ; '_'
00000000000010f0         db  0x66 ; 'f'
00000000000010f1         db  0x70 ; 'p'
00000000000010f2         db  0x72 ; 'r'
00000000000010f3         db  0x69 ; 'i'
00000000000010f4         db  0x6e ; 'n'
00000000000010f5         db  0x74 ; 't'
00000000000010f6         db  0x66 ; 'f'
00000000000010f7         db  0x5f ; '_'
00000000000010f8         db  0x63 ; 'c'
00000000000010f9         db  0x68 ; 'h'
00000000000010fa         db  0x6b ; 'k'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x66 ; 'f'
00000000000010fd         db  0x63 ; 'c'
00000000000010fe         db  0x68 ; 'h'
00000000000010ff         db  0x6f ; 'o'
0000000000001100         db  0x77 ; 'w'
0000000000001101         db  0x6e ; 'n'
0000000000001102         db  0x00 ; '.'
0000000000001103         db  0x73 ; 's'
0000000000001104         db  0x74 ; 't'
0000000000001105         db  0x64 ; 'd'
0000000000001106         db  0x6f ; 'o'
0000000000001107         db  0x75 ; 'u'
0000000000001108         db  0x74 ; 't'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x66 ; 'f'
000000000000110b         db  0x70 ; 'p'
000000000000110c         db  0x61 ; 'a'
000000000000110d         db  0x74 ; 't'
000000000000110e         db  0x68 ; 'h'
000000000000110f         db  0x63 ; 'c'
0000000000001110         db  0x6f ; 'o'
0000000000001111         db  0x6e ; 'n'
0000000000001112         db  0x66 ; 'f'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x6c ; 'l'
0000000000001115         db  0x73 ; 's'
0000000000001116         db  0x65 ; 'e'
0000000000001117         db  0x65 ; 'e'
0000000000001118         db  0x6b ; 'k'
0000000000001119         db  0x00 ; '.'
000000000000111a         db  0x6d ; 'm'
000000000000111b         db  0x65 ; 'e'
000000000000111c         db  0x6d ; 'm'
000000000000111d         db  0x63 ; 'c'
000000000000111e         db  0x70 ; 'p'
000000000000111f         db  0x79 ; 'y'
0000000000001120         db  0x00 ; '.'
0000000000001121         db  0x66 ; 'f'
0000000000001122         db  0x63 ; 'c'
0000000000001123         db  0x6c ; 'l'
0000000000001124         db  0x6f ; 'o'
0000000000001125         db  0x73 ; 's'
0000000000001126         db  0x65 ; 'e'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x65 ; 'e'
0000000000001129         db  0x75 ; 'u'
000000000000112a         db  0x69 ; 'i'
000000000000112b         db  0x64 ; 'd'
000000000000112c         db  0x61 ; 'a'
000000000000112d         db  0x63 ; 'c'
000000000000112e         db  0x63 ; 'c'
000000000000112f         db  0x65 ; 'e'
0000000000001130         db  0x73 ; 's'
0000000000001131         db  0x73 ; 's'
0000000000001132         db  0x00 ; '.'
0000000000001133         db  0x73 ; 's'
0000000000001134         db  0x79 ; 'y'
0000000000001135         db  0x6d ; 'm'
0000000000001136         db  0x6c ; 'l'
0000000000001137         db  0x69 ; 'i'
0000000000001138         db  0x6e ; 'n'
0000000000001139         db  0x6b ; 'k'
000000000000113a         db  0x61 ; 'a'
000000000000113b         db  0x74 ; 't'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x6d ; 'm'
000000000000113e         db  0x61 ; 'a'
000000000000113f         db  0x6c ; 'l'
0000000000001140         db  0x6c ; 'l'
0000000000001141         db  0x6f ; 'o'
0000000000001142         db  0x63 ; 'c'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x75 ; 'u'
0000000000001145         db  0x6d ; 'm'
0000000000001146         db  0x61 ; 'a'
0000000000001147         db  0x73 ; 's'
0000000000001148         db  0x6b ; 'k'
0000000000001149         db  0x00 ; '.'
000000000000114a         db  0x66 ; 'f'
000000000000114b         db  0x64 ; 'd'
000000000000114c         db  0x6f ; 'o'
000000000000114d         db  0x70 ; 'p'
000000000000114e         db  0x65 ; 'e'
000000000000114f         db  0x6e ; 'n'
0000000000001150         db  0x64 ; 'd'
0000000000001151         db  0x69 ; 'i'
0000000000001152         db  0x72 ; 'r'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x6d ; 'm'
0000000000001155         db  0x62 ; 'b'
0000000000001156         db  0x73 ; 's'
0000000000001157         db  0x69 ; 'i'
0000000000001158         db  0x6e ; 'n'
0000000000001159         db  0x69 ; 'i'
000000000000115a         db  0x74 ; 't'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x67 ; 'g'
000000000000115d         db  0x65 ; 'e'
000000000000115e         db  0x74 ; 't'
000000000000115f         db  0x67 ; 'g'
0000000000001160         db  0x69 ; 'i'
0000000000001161         db  0x64 ; 'd'
0000000000001162         db  0x00 ; '.'
0000000000001163         db  0x6e ; 'n'
0000000000001164         db  0x6c ; 'l'
0000000000001165         db  0x5f ; '_'
0000000000001166         db  0x6c ; 'l'
0000000000001167         db  0x61 ; 'a'
0000000000001168         db  0x6e ; 'n'
0000000000001169         db  0x67 ; 'g'
000000000000116a         db  0x69 ; 'i'
000000000000116b         db  0x6e ; 'n'
000000000000116c         db  0x66 ; 'f'
000000000000116d         db  0x6f ; 'o'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x5f ; '_'
0000000000001170         db  0x5f ; '_'
0000000000001171         db  0x63 ; 'c'
0000000000001172         db  0x74 ; 't'
0000000000001173         db  0x79 ; 'y'
0000000000001174         db  0x70 ; 'p'
0000000000001175         db  0x65 ; 'e'
0000000000001176         db  0x5f ; '_'
0000000000001177         db  0x62 ; 'b'
0000000000001178         db  0x5f ; '_'
0000000000001179         db  0x6c ; 'l'
000000000000117a         db  0x6f ; 'o'
000000000000117b         db  0x63 ; 'c'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x67 ; 'g'
000000000000117e         db  0x65 ; 'e'
000000000000117f         db  0x74 ; 't'
0000000000001180         db  0x65 ; 'e'
0000000000001181         db  0x6e ; 'n'
0000000000001182         db  0x76 ; 'v'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x6f ; 'o'
0000000000001185         db  0x70 ; 'p'
0000000000001186         db  0x74 ; 't'
0000000000001187         db  0x61 ; 'a'
0000000000001188         db  0x72 ; 'r'
0000000000001189         db  0x67 ; 'g'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x5f ; '_'
000000000000118c         db  0x5f ; '_'
000000000000118d         db  0x66 ; 'f'
000000000000118e         db  0x72 ; 'r'
000000000000118f         db  0x65 ; 'e'
0000000000001190         db  0x61 ; 'a'
0000000000001191         db  0x64 ; 'd'
0000000000001192         db  0x69 ; 'i'
0000000000001193         db  0x6e ; 'n'
0000000000001194         db  0x67 ; 'g'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x73 ; 's'
0000000000001197         db  0x74 ; 't'
0000000000001198         db  0x64 ; 'd'
0000000000001199         db  0x65 ; 'e'
000000000000119a         db  0x72 ; 'r'
000000000000119b         db  0x72 ; 'r'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x69 ; 'i'
000000000000119e         db  0x6f ; 'o'
000000000000119f         db  0x63 ; 'c'
00000000000011a0         db  0x74 ; 't'
00000000000011a1         db  0x6c ; 'l'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x67 ; 'g'
00000000000011a4         db  0x65 ; 'e'
00000000000011a5         db  0x74 ; 't'
00000000000011a6         db  0x75 ; 'u'
00000000000011a7         db  0x69 ; 'i'
00000000000011a8         db  0x64 ; 'd'
00000000000011a9         db  0x00 ; '.'
00000000000011aa         db  0x72 ; 'r'
00000000000011ab         db  0x65 ; 'e'
00000000000011ac         db  0x61 ; 'a'
00000000000011ad         db  0x64 ; 'd'
00000000000011ae         db  0x6c ; 'l'
00000000000011af         db  0x69 ; 'i'
00000000000011b0         db  0x6e ; 'n'
00000000000011b1         db  0x6b ; 'k'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x67 ; 'g'
00000000000011b4         db  0x65 ; 'e'
00000000000011b5         db  0x74 ; 't'
00000000000011b6         db  0x6f ; 'o'
00000000000011b7         db  0x70 ; 'p'
00000000000011b8         db  0x74 ; 't'
00000000000011b9         db  0x5f ; '_'
00000000000011ba         db  0x6c ; 'l'
00000000000011bb         db  0x6f ; 'o'
00000000000011bc         db  0x6e ; 'n'
00000000000011bd         db  0x67 ; 'g'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x5f ; '_'
00000000000011c0         db  0x5f ; '_'
00000000000011c1         db  0x78 ; 'x'
00000000000011c2         db  0x6d ; 'm'
00000000000011c3         db  0x6b ; 'k'
00000000000011c4         db  0x6e ; 'n'
00000000000011c5         db  0x6f ; 'o'
00000000000011c6         db  0x64 ; 'd'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x5f ; '_'
00000000000011c9         db  0x5f ; '_'
00000000000011ca         db  0x66 ; 'f'
00000000000011cb         db  0x78 ; 'x'
00000000000011cc         db  0x73 ; 's'
00000000000011cd         db  0x74 ; 't'
00000000000011ce         db  0x61 ; 'a'
00000000000011cf         db  0x74 ; 't'
00000000000011d0         db  0x00 ; '.'
00000000000011d1         db  0x66 ; 'f'
00000000000011d2         db  0x69 ; 'i'
00000000000011d3         db  0x6c ; 'l'
00000000000011d4         db  0x65 ; 'e'
00000000000011d5         db  0x6e ; 'n'
00000000000011d6         db  0x6f ; 'o'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x75 ; 'u'
00000000000011d9         db  0x74 ; 't'
00000000000011da         db  0x69 ; 'i'
00000000000011db         db  0x6d ; 'm'
00000000000011dc         db  0x65 ; 'e'
00000000000011dd         db  0x73 ; 's'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x5f ; '_'
00000000000011e0         db  0x5f ; '_'
00000000000011e1         db  0x67 ; 'g'
00000000000011e2         db  0x65 ; 'e'
00000000000011e3         db  0x74 ; 't'
00000000000011e4         db  0x64 ; 'd'
00000000000011e5         db  0x65 ; 'e'
00000000000011e6         db  0x6c ; 'l'
00000000000011e7         db  0x69 ; 'i'
00000000000011e8         db  0x6d ; 'm'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x66 ; 'f'
00000000000011eb         db  0x77 ; 'w'
00000000000011ec         db  0x72 ; 'r'
00000000000011ed         db  0x69 ; 'i'
00000000000011ee         db  0x74 ; 't'
00000000000011ef         db  0x65 ; 'e'
00000000000011f0         db  0x00 ; '.'
00000000000011f1         db  0x67 ; 'g'
00000000000011f2         db  0x65 ; 'e'
00000000000011f3         db  0x74 ; 't'
00000000000011f4         db  0x74 ; 't'
00000000000011f5         db  0x69 ; 'i'
00000000000011f6         db  0x6d ; 'm'
00000000000011f7         db  0x65 ; 'e'
00000000000011f8         db  0x6f ; 'o'
00000000000011f9         db  0x66 ; 'f'
00000000000011fa         db  0x64 ; 'd'
00000000000011fb         db  0x61 ; 'a'
00000000000011fc         db  0x79 ; 'y'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x72 ; 'r'
00000000000011ff         db  0x65 ; 'e'
                     aName:
0000000000001200         db         "name", 0
0000000000001205         db  0x5f ; '_'
0000000000001206         db  0x5f ; '_'
0000000000001207         db  0x65 ; 'e'
0000000000001208         db  0x78 ; 'x'
0000000000001209         db  0x70 ; 'p'
000000000000120a         db  0x6c ; 'l'
000000000000120b         db  0x69 ; 'i'
000000000000120c         db  0x63 ; 'c'
000000000000120d         db  0x69 ; 'i'
000000000000120e         db  0x74 ; 't'
000000000000120f         db  0x5f ; '_'
0000000000001210         db  0x62 ; 'b'
0000000000001211         db  0x7a ; 'z'
0000000000001212         db  0x65 ; 'e'
0000000000001213         db  0x72 ; 'r'
0000000000001214         db  0x6f ; 'o'
0000000000001215         db  0x5f ; '_'
0000000000001216         db  0x63 ; 'c'
0000000000001217         db  0x68 ; 'h'
0000000000001218         db  0x6b ; 'k'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x67 ; 'g'
000000000000121b         db  0x65 ; 'e'
000000000000121c         db  0x74 ; 't'
000000000000121d         db  0x65 ; 'e'
000000000000121e         db  0x75 ; 'u'
000000000000121f         db  0x69 ; 'i'
0000000000001220         db  0x64 ; 'd'
0000000000001221         db  0x00 ; '.'
0000000000001222         db  0x63 ; 'c'
0000000000001223         db  0x6c ; 'l'
0000000000001224         db  0x6f ; 'o'
0000000000001225         db  0x63 ; 'c'
0000000000001226         db  0x6b ; 'k'
0000000000001227         db  0x5f ; '_'
0000000000001228         db  0x67 ; 'g'
0000000000001229         db  0x65 ; 'e'
000000000000122a         db  0x74 ; 't'
000000000000122b         db  0x74 ; 't'
000000000000122c         db  0x69 ; 'i'
000000000000122d         db  0x6d ; 'm'
000000000000122e         db  0x65 ; 'e'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x5f ; '_'
0000000000001231         db  0x5f ; '_'
0000000000001232         db  0x66 ; 'f'
0000000000001233         db  0x70 ; 'p'
0000000000001234         db  0x65 ; 'e'
0000000000001235         db  0x6e ; 'n'
0000000000001236         db  0x64 ; 'd'
0000000000001237         db  0x69 ; 'i'
0000000000001238         db  0x6e ; 'n'
0000000000001239         db  0x67 ; 'g'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x70 ; 'p'
000000000000123c         db  0x72 ; 'r'
000000000000123d         db  0x6f ; 'o'
000000000000123e         db  0x67 ; 'g'
000000000000123f         db  0x72 ; 'r'
0000000000001240         db  0x61 ; 'a'
0000000000001241         db  0x6d ; 'm'
0000000000001242         db  0x5f ; '_'
0000000000001243         db  0x69 ; 'i'
0000000000001244         db  0x6e ; 'n'
0000000000001245         db  0x76 ; 'v'
0000000000001246         db  0x6f ; 'o'
0000000000001247         db  0x63 ; 'c'
0000000000001248         db  0x61 ; 'a'
0000000000001249         db  0x74 ; 't'
000000000000124a         db  0x69 ; 'i'
000000000000124b         db  0x6f ; 'o'
000000000000124c         db  0x6e ; 'n'
000000000000124d         db  0x5f ; '_'
000000000000124e         db  0x73 ; 's'
000000000000124f         db  0x68 ; 'h'
0000000000001250         db  0x6f ; 'o'
0000000000001251         db  0x72 ; 'r'
0000000000001252         db  0x74 ; 't'
0000000000001253         db  0x5f ; '_'
0000000000001254         db  0x6e ; 'n'
0000000000001255         db  0x61 ; 'a'
0000000000001256         db  0x6d ; 'm'
0000000000001257         db  0x65 ; 'e'
0000000000001258         db  0x00 ; '.'
0000000000001259         db  0x66 ; 'f'
000000000000125a         db  0x64 ; 'd'
000000000000125b         db  0x6f ; 'o'
000000000000125c         db  0x70 ; 'p'
000000000000125d         db  0x65 ; 'e'
000000000000125e         db  0x6e ; 'n'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x71 ; 'q'
0000000000001261         db  0x73 ; 's'
0000000000001262         db  0x6f ; 'o'
0000000000001263         db  0x72 ; 'r'
0000000000001264         db  0x74 ; 't'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x63 ; 'c'
0000000000001267         db  0x61 ; 'a'
0000000000001268         db  0x6e ; 'n'
0000000000001269         db  0x6f ; 'o'
000000000000126a         db  0x6e ; 'n'
000000000000126b         db  0x69 ; 'i'
000000000000126c         db  0x63 ; 'c'
000000000000126d         db  0x61 ; 'a'
000000000000126e         db  0x6c ; 'l'
000000000000126f         db  0x69 ; 'i'
0000000000001270         db  0x7a ; 'z'
0000000000001271         db  0x65 ; 'e'
0000000000001272         db  0x5f ; '_'
0000000000001273         db  0x66 ; 'f'
0000000000001274         db  0x69 ; 'i'
0000000000001275         db  0x6c ; 'l'
0000000000001276         db  0x65 ; 'e'
0000000000001277         db  0x5f ; '_'
0000000000001278         db  0x6e ; 'n'
0000000000001279         db  0x61 ; 'a'
000000000000127a         db  0x6d ; 'm'
000000000000127b         db  0x65 ; 'e'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x5f ; '_'
000000000000127e         db  0x5f ; '_'
000000000000127f         db  0x63 ; 'c'
0000000000001280         db  0x78 ; 'x'
0000000000001281         db  0x61 ; 'a'
0000000000001282         db  0x5f ; '_'
0000000000001283         db  0x66 ; 'f'
0000000000001284         db  0x69 ; 'i'
0000000000001285         db  0x6e ; 'n'
0000000000001286         db  0x61 ; 'a'
0000000000001287         db  0x6c ; 'l'
0000000000001288         db  0x69 ; 'i'
0000000000001289         db  0x7a ; 'z'
000000000000128a         db  0x65 ; 'e'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x73 ; 's'
000000000000128d         db  0x79 ; 'y'
000000000000128e         db  0x73 ; 's'
000000000000128f         db  0x63 ; 'c'
0000000000001290         db  0x61 ; 'a'
0000000000001291         db  0x6c ; 'l'
0000000000001292         db  0x6c ; 'l'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x73 ; 's'
0000000000001295         db  0x65 ; 'e'
0000000000001296         db  0x74 ; 't'
0000000000001297         db  0x76 ; 'v'
0000000000001298         db  0x62 ; 'b'
0000000000001299         db  0x75 ; 'u'
000000000000129a         db  0x66 ; 'f'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x66 ; 'f'
000000000000129d         db  0x63 ; 'c'
000000000000129e         db  0x6e ; 'n'
000000000000129f         db  0x74 ; 't'
00000000000012a0         db  0x6c ; 'l'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x6f ; 'o'
00000000000012a3         db  0x70 ; 'p'
00000000000012a4         db  0x65 ; 'e'
00000000000012a5         db  0x6e ; 'n'
00000000000012a6         db  0x61 ; 'a'
00000000000012a7         db  0x74 ; 't'
00000000000012a8         db  0x00 ; '.'
00000000000012a9         db  0x66 ; 'f'
00000000000012aa         db  0x75 ; 'u'
00000000000012ab         db  0x74 ; 't'
00000000000012ac         db  0x69 ; 'i'
00000000000012ad         db  0x6d ; 'm'
00000000000012ae         db  0x65 ; 'e'
00000000000012af         db  0x73 ; 's'
00000000000012b0         db  0x61 ; 'a'
00000000000012b1         db  0x74 ; 't'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x5f ; '_'
00000000000012b4         db  0x5f ; '_'
00000000000012b5         db  0x78 ; 'x'
00000000000012b6         db  0x73 ; 's'
00000000000012b7         db  0x74 ; 't'
00000000000012b8         db  0x61 ; 'a'
00000000000012b9         db  0x74 ; 't'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x6d ; 'm'
00000000000012bc         db  0x65 ; 'e'
00000000000012bd         db  0x6d ; 'm'
00000000000012be         db  0x6d ; 'm'
00000000000012bf         db  0x6f ; 'o'
00000000000012c0         db  0x76 ; 'v'
00000000000012c1         db  0x65 ; 'e'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x62 ; 'b'
00000000000012c4         db  0x69 ; 'i'
00000000000012c5         db  0x6e ; 'n'
00000000000012c6         db  0x64 ; 'd'
00000000000012c7         db  0x74 ; 't'
00000000000012c8         db  0x65 ; 'e'
00000000000012c9         db  0x78 ; 'x'
00000000000012ca         db  0x74 ; 't'
00000000000012cb         db  0x64 ; 'd'
00000000000012cc         db  0x6f ; 'o'
00000000000012cd         db  0x6d ; 'm'
00000000000012ce         db  0x61 ; 'a'
00000000000012cf         db  0x69 ; 'i'
00000000000012d0         db  0x6e ; 'n'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x5f ; '_'
00000000000012d3         db  0x5f ; '_'
00000000000012d4         db  0x66 ; 'f'
00000000000012d5         db  0x78 ; 'x'
00000000000012d6         db  0x73 ; 's'
00000000000012d7         db  0x74 ; 't'
00000000000012d8         db  0x61 ; 'a'
00000000000012d9         db  0x74 ; 't'
00000000000012da         db  0x61 ; 'a'
00000000000012db         db  0x74 ; 't'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x6d ; 'm'
00000000000012de         db  0x6b ; 'k'
00000000000012df         db  0x66 ; 'f'
00000000000012e0         db  0x69 ; 'i'
00000000000012e1         db  0x66 ; 'f'
00000000000012e2         db  0x6f ; 'o'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x66 ; 'f'
00000000000012e5         db  0x61 ; 'a'
00000000000012e6         db  0x63 ; 'c'
00000000000012e7         db  0x63 ; 'c'
00000000000012e8         db  0x65 ; 'e'
00000000000012e9         db  0x73 ; 's'
00000000000012ea         db  0x73 ; 's'
00000000000012eb         db  0x61 ; 'a'
00000000000012ec         db  0x74 ; 't'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x73 ; 's'
00000000000012ef         db  0x74 ; 't'
00000000000012f0         db  0x72 ; 'r'
00000000000012f1         db  0x63 ; 'c'
00000000000012f2         db  0x6d ; 'm'
00000000000012f3         db  0x70 ; 'p'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x5f ; '_'
00000000000012f6         db  0x5f ; '_'
00000000000012f7         db  0x6c ; 'l'
00000000000012f8         db  0x69 ; 'i'
00000000000012f9         db  0x62 ; 'b'
00000000000012fa         db  0x63 ; 'c'
00000000000012fb         db  0x5f ; '_'
00000000000012fc         db  0x73 ; 's'
00000000000012fd         db  0x74 ; 't'
00000000000012fe         db  0x61 ; 'a'
00000000000012ff         db  0x72 ; 'r'
                     aTmain:
0000000000001300         db         "t_main", 0
0000000000001307         db  0x64 ; 'd'
0000000000001308         db  0x69 ; 'i'
0000000000001309         db  0x72 ; 'r'
000000000000130a         db  0x66 ; 'f'
000000000000130b         db  0x64 ; 'd'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x73 ; 's'
000000000000130e         db  0x74 ; 't'
000000000000130f         db  0x70 ; 'p'
0000000000001310         db  0x63 ; 'c'
0000000000001311         db  0x70 ; 'p'
0000000000001312         db  0x79 ; 'y'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x66 ; 'f'
0000000000001315         db  0x73 ; 's'
0000000000001316         db  0x65 ; 'e'
0000000000001317         db  0x65 ; 'e'
0000000000001318         db  0x6b ; 'k'
0000000000001319         db  0x6f ; 'o'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x5f ; '_'
000000000000131c         db  0x5f ; '_'
000000000000131d         db  0x6f ; 'o'
000000000000131e         db  0x76 ; 'v'
000000000000131f         db  0x65 ; 'e'
0000000000001320         db  0x72 ; 'r'
0000000000001321         db  0x66 ; 'f'
0000000000001322         db  0x6c ; 'l'
0000000000001323         db  0x6f ; 'o'
0000000000001324         db  0x77 ; 'w'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x66 ; 'f'
0000000000001327         db  0x70 ; 'p'
0000000000001328         db  0x75 ; 'u'
0000000000001329         db  0x74 ; 't'
000000000000132a         db  0x73 ; 's'
000000000000132b         db  0x5f ; '_'
000000000000132c         db  0x75 ; 'u'
000000000000132d         db  0x6e ; 'n'
000000000000132e         db  0x6c ; 'l'
000000000000132f         db  0x6f ; 'o'
0000000000001330         db  0x63 ; 'c'
0000000000001331         db  0x6b ; 'k'
0000000000001332         db  0x65 ; 'e'
0000000000001333         db  0x64 ; 'd'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x66 ; 'f'
0000000000001336         db  0x72 ; 'r'
0000000000001337         db  0x65 ; 'e'
0000000000001338         db  0x65 ; 'e'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x5f ; '_'
000000000000133b         db  0x5f ; '_'
000000000000133c         db  0x70 ; 'p'
000000000000133d         db  0x72 ; 'r'
000000000000133e         db  0x6f ; 'o'
000000000000133f         db  0x67 ; 'g'
0000000000001340         db  0x6e ; 'n'
0000000000001341         db  0x61 ; 'a'
0000000000001342         db  0x6d ; 'm'
0000000000001343         db  0x65 ; 'e'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x5f ; '_'
0000000000001346         db  0x5f ; '_'
0000000000001347         db  0x70 ; 'p'
0000000000001348         db  0x72 ; 'r'
0000000000001349         db  0x6f ; 'o'
000000000000134a         db  0x67 ; 'g'
000000000000134b         db  0x6e ; 'n'
000000000000134c         db  0x61 ; 'a'
000000000000134d         db  0x6d ; 'm'
000000000000134e         db  0x65 ; 'e'
000000000000134f         db  0x5f ; '_'
0000000000001350         db  0x66 ; 'f'
0000000000001351         db  0x75 ; 'u'
0000000000001352         db  0x6c ; 'l'
0000000000001353         db  0x6c ; 'l'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x5f ; '_'
0000000000001356         db  0x5f ; '_'
0000000000001357         db  0x63 ; 'c'
0000000000001358         db  0x78 ; 'x'
0000000000001359         db  0x61 ; 'a'
000000000000135a         db  0x5f ; '_'
000000000000135b         db  0x61 ; 'a'
000000000000135c         db  0x74 ; 't'
000000000000135d         db  0x65 ; 'e'
000000000000135e         db  0x78 ; 'x'
000000000000135f         db  0x69 ; 'i'
0000000000001360         db  0x74 ; 't'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x47 ; 'G'
0000000000001363         db  0x4c ; 'L'
0000000000001364         db  0x49 ; 'I'
0000000000001365         db  0x42 ; 'B'
0000000000001366         db  0x43 ; 'C'
0000000000001367         db  0x5f ; '_'
0000000000001368         db  0x32 ; '2'
0000000000001369         db  0x2e ; '.'
000000000000136a         db  0x33 ; '3'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x47 ; 'G'
000000000000136d         db  0x4c ; 'L'
000000000000136e         db  0x49 ; 'I'
000000000000136f         db  0x42 ; 'B'
0000000000001370         db  0x43 ; 'C'
0000000000001371         db  0x5f ; '_'
0000000000001372         db  0x32 ; '2'
0000000000001373         db  0x2e ; '.'
0000000000001374         db  0x32 ; '2'
0000000000001375         db  0x35 ; '5'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x47 ; 'G'
0000000000001378         db  0x4c ; 'L'
0000000000001379         db  0x49 ; 'I'
000000000000137a         db  0x42 ; 'B'
000000000000137b         db  0x43 ; 'C'
000000000000137c         db  0x5f ; '_'
000000000000137d         db  0x32 ; '2'
000000000000137e         db  0x2e ; '.'
000000000000137f         db  0x33 ; '3'
0000000000001380         db  0x2e ; '.'
0000000000001381         db  0x34 ; '4'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x47 ; 'G'
0000000000001384         db  0x4c ; 'L'
0000000000001385         db  0x49 ; 'I'
0000000000001386         db  0x42 ; 'B'
0000000000001387         db  0x43 ; 'C'
0000000000001388         db  0x5f ; '_'
0000000000001389         db  0x32 ; '2'
000000000000138a         db  0x2e ; '.'
000000000000138b         db  0x31 ; '1'
000000000000138c         db  0x34 ; '4'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x47 ; 'G'
000000000000138f         db  0x4c ; 'L'
0000000000001390         db  0x49 ; 'I'
0000000000001391         db  0x42 ; 'B'
0000000000001392         db  0x43 ; 'C'
0000000000001393         db  0x5f ; '_'
0000000000001394         db  0x32 ; '2'
0000000000001395         db  0x2e ; '.'
0000000000001396         db  0x31 ; '1'
0000000000001397         db  0x30 ; '0'
0000000000001398         db  0x00 ; '.'
0000000000001399         db  0x47 ; 'G'
000000000000139a         db  0x4c ; 'L'
000000000000139b         db  0x49 ; 'I'
000000000000139c         db  0x42 ; 'B'
000000000000139d         db  0x43 ; 'C'
000000000000139e         db  0x5f ; '_'
000000000000139f         db  0x32 ; '2'
00000000000013a0         db  0x2e ; '.'
00000000000013a1         db  0x31 ; '1'
00000000000013a2         db  0x37 ; '7'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x47 ; 'G'
00000000000013a5         db  0x4c ; 'L'
00000000000013a6         db  0x49 ; 'I'
00000000000013a7         db  0x42 ; 'B'
00000000000013a8         db  0x43 ; 'C'
00000000000013a9         db  0x5f ; '_'
00000000000013aa         db  0x32 ; '2'
00000000000013ab         db  0x2e ; '.'
00000000000013ac         db  0x34 ; '4'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x47 ; 'G'
00000000000013af         db  0x4c ; 'L'
00000000000013b0         db  0x49 ; 'I'
00000000000013b1         db  0x42 ; 'B'
00000000000013b2         db  0x43 ; 'C'
00000000000013b3         db  0x5f ; '_'
00000000000013b4         db  0x32 ; '2'
00000000000013b5         db  0x2e ; '.'
00000000000013b6         db  0x36 ; '6'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x47 ; 'G'
00000000000013b9         db  0x4c ; 'L'
00000000000013ba         db  0x49 ; 'I'
00000000000013bb         db  0x42 ; 'B'
00000000000013bc         db  0x43 ; 'C'
00000000000013bd         db  0x5f ; '_'
00000000000013be         db  0x32 ; '2'
00000000000013bf         db  0x2e ; '.'
00000000000013c0         db  0x32 ; '2'
00000000000013c1         db  0x2e ; '.'
00000000000013c2         db  0x35 ; '5'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x5f ; '_'
00000000000013c5         db  0x49 ; 'I'
00000000000013c6         db  0x54 ; 'T'
00000000000013c7         db  0x4d ; 'M'
00000000000013c8         db  0x5f ; '_'
00000000000013c9         db  0x64 ; 'd'
00000000000013ca         db  0x65 ; 'e'
00000000000013cb         db  0x72 ; 'r'
00000000000013cc         db  0x65 ; 'e'
00000000000013cd         db  0x67 ; 'g'
00000000000013ce         db  0x69 ; 'i'
00000000000013cf         db  0x73 ; 's'
00000000000013d0         db  0x74 ; 't'
00000000000013d1         db  0x65 ; 'e'
00000000000013d2         db  0x72 ; 'r'
00000000000013d3         db  0x54 ; 'T'
00000000000013d4         db  0x4d ; 'M'
00000000000013d5         db  0x43 ; 'C'
00000000000013d6         db  0x6c ; 'l'
00000000000013d7         db  0x6f ; 'o'
00000000000013d8         db  0x6e ; 'n'
00000000000013d9         db  0x65 ; 'e'
00000000000013da         db  0x54 ; 'T'
00000000000013db         db  0x61 ; 'a'
00000000000013dc         db  0x62 ; 'b'
00000000000013dd         db  0x6c ; 'l'
00000000000013de         db  0x65 ; 'e'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x5f ; '_'
00000000000013e1         db  0x5f ; '_'
00000000000013e2         db  0x67 ; 'g'
00000000000013e3         db  0x6d ; 'm'
00000000000013e4         db  0x6f ; 'o'
00000000000013e5         db  0x6e ; 'n'
00000000000013e6         db  0x5f ; '_'
00000000000013e7         db  0x73 ; 's'
00000000000013e8         db  0x74 ; 't'
00000000000013e9         db  0x61 ; 'a'
00000000000013ea         db  0x72 ; 'r'
00000000000013eb         db  0x74 ; 't'
00000000000013ec         db  0x5f ; '_'
00000000000013ed         db  0x5f ; '_'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x5f ; '_'
00000000000013f0         db  0x49 ; 'I'
00000000000013f1         db  0x54 ; 'T'
00000000000013f2         db  0x4d ; 'M'
00000000000013f3         db  0x5f ; '_'
00000000000013f4         db  0x72 ; 'r'
00000000000013f5         db  0x65 ; 'e'
00000000000013f6         db  0x67 ; 'g'
00000000000013f7         db  0x69 ; 'i'
00000000000013f8         db  0x73 ; 's'
00000000000013f9         db  0x74 ; 't'
00000000000013fa         db  0x65 ; 'e'
00000000000013fb         db  0x72 ; 'r'
00000000000013fc         db  0x54 ; 'T'
00000000000013fd         db  0x4d ; 'M'
00000000000013fe         db  0x43 ; 'C'
00000000000013ff         db  0x6c ; 'l'
                     aOnetable:
0000000000001400         db         "oneTable", 0
0000000000001409         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0x140a; 0x150c[ (258 bytes)
        ; File offset : [5130; 5388[ (258 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x02 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x02 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x03 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x02 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x02 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x02 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x02 ; '.'
0000000000001419         db  0x00 ; '.'
000000000000141a         db  0x00 ; '.'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x02 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x02 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x02 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x04 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x02 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x04 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x02 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x02 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x04 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x02 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x02 ; '.'
0000000000001431         db  0x00 ; '.'
0000000000001432         db  0x05 ; '.'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x02 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x02 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x02 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x02 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x02 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x02 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x02 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x02 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x02 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x02 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x02 ; '.'
0000000000001449         db  0x00 ; '.'
000000000000144a         db  0x02 ; '.'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x02 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x02 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x04 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x04 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x02 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x02 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x02 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x04 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x02 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x02 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x02 ; '.'
0000000000001461         db  0x00 ; '.'
0000000000001462         db  0x02 ; '.'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x02 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x02 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x02 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x02 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x02 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x02 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x02 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x02 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x02 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x02 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x02 ; '.'
0000000000001479         db  0x00 ; '.'
000000000000147a         db  0x02 ; '.'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x02 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x02 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x06 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x02 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x02 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x02 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x02 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x02 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x02 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x02 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x02 ; '.'
0000000000001491         db  0x00 ; '.'
0000000000001492         db  0x02 ; '.'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x02 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x02 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x07 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x02 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x02 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x02 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x02 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x02 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x02 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x02 ; '.'
00000000000014a9         db  0x00 ; '.'
00000000000014aa         db  0x02 ; '.'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x02 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x02 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x02 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x02 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x02 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x02 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x04 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x02 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x08 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x02 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x02 ; '.'
00000000000014c1         db  0x00 ; '.'
00000000000014c2         db  0x02 ; '.'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x02 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x02 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x02 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x09 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x02 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x02 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x02 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x02 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x02 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x04 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x03 ; '.'
00000000000014d9         db  0x00 ; '.'
00000000000014da         db  0x02 ; '.'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x02 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x02 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x04 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x02 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x02 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x02 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x02 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x08 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x02 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x04 ; '.'
00000000000014f1         db  0x00 ; '.'
00000000000014f2         db  0x02 ; '.'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x02 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x04 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x0a ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x02 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x02 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x02 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x02 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x02 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x02 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x02 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x02 ; '.'
0000000000001509         db  0x00 ; '.'
000000000000150a         db  0x02 ; '.'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0x1510; 0x15b0[ (160 bytes)
        ; File offset : [5392; 5552[ (160 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000001510         db  0x01 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x09 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x01 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x10 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x13 ; '.'
0000000000001521         db  0x69 ; 'i'
0000000000001522         db  0x69 ; 'i'
0000000000001523         db  0x0d ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x0a ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x6a ; 'j'
0000000000001529         db  0x04 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x10 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x85 ; '.'
0000000000001531         db  0x91 ; '.'
0000000000001532         db  0x96 ; '.'
0000000000001533         db  0x06 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x09 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x74 ; 't'
0000000000001539         db  0x04 ; '.'
000000000000153a         db  0x00 ; '.'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x10 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x74 ; 't'
0000000000001541         db  0x19 ; '.'
0000000000001542         db  0x69 ; 'i'
0000000000001543         db  0x09 ; '.'
0000000000001544         db  0x00 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x08 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x7f ; '.'
0000000000001549         db  0x04 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x10 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x94 ; '.'
0000000000001551         db  0x91 ; '.'
0000000000001552         db  0x96 ; '.'
0000000000001553         db  0x06 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x07 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x8b ; '.'
0000000000001559         db  0x04 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x10 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x90 ; '.'
0000000000001561         db  0x91 ; '.'
0000000000001562         db  0x96 ; '.'
0000000000001563         db  0x06 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x06 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x96 ; '.'
0000000000001569         db  0x04 ; '.'
000000000000156a         db  0x00 ; '.'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x10 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x97 ; '.'
0000000000001571         db  0x91 ; '.'
0000000000001572         db  0x96 ; '.'
0000000000001573         db  0x06 ; '.'
0000000000001574         db  0x00 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x05 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0xa1 ; '.'
0000000000001579         db  0x04 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x10 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x14 ; '.'
0000000000001581         db  0x69 ; 'i'
0000000000001582         db  0x69 ; 'i'
0000000000001583         db  0x0d ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x04 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0xac ; '.'
0000000000001589         db  0x04 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x10 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x16 ; '.'
0000000000001591         db  0x69 ; 'i'
0000000000001592         db  0x69 ; 'i'
0000000000001593         db  0x0d ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x03 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0xb6 ; '.'
0000000000001599         db  0x04 ; '.'
000000000000159a         db  0x00 ; '.'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x10 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x75 ; 'u'
00000000000015a1         db  0x1a ; '.'
00000000000015a2         db  0x69 ; 'i'
00000000000015a3         db  0x09 ; '.'
00000000000015a4         db  0x00 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x02 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0xc0 ; '.'
00000000000015a9         db  0x04 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0x15b0; 0x1aa8[ (1272 bytes)
        ; File offset : [5552; 6824[ (1272 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

00000000000015b0         db  0x90 ; '.'
00000000000015b1         db  0xb7 ; '.'
00000000000015b2         db  0x21 ; '!'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x08 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x00 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x80 ; '.'
00000000000015c1         db  0x35 ; '5'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x98 ; '.'
00000000000015c9         db  0xb7 ; '.'
00000000000015ca         db  0x21 ; '!'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x08 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x00 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x40 ; '@'
00000000000015d9         db  0x35 ; '5'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0xa0 ; '.'
00000000000015e1         db  0xb7 ; '.'
00000000000015e2         db  0x21 ; '!'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x08 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x00 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x99 ; '.'
00000000000015f1         db  0x50 ; 'P'
00000000000015f2         db  0x01 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0xc0 ; '.'
00000000000015f9         db  0xb7 ; '.'
00000000000015fa         db  0x21 ; '!'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x08 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x00 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0xa0 ; '.'
0000000000001609         db  0x50 ; 'P'
000000000000160a         db  0x01 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0xe0 ; '.'
0000000000001611         db  0xb7 ; '.'
0000000000001612         db  0x21 ; '!'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x08 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x00 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0xa8 ; '.'
0000000000001621         db  0x50 ; 'P'
0000000000001622         db  0x01 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x00 ; '.'
0000000000001629         db  0xb8 ; '.'
000000000000162a         db  0x21 ; '!'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x08 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x00 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0xae ; '.'
0000000000001639         db  0x50 ; 'P'
000000000000163a         db  0x01 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x20 ; ' '
0000000000001641         db  0xb8 ; '.'
0000000000001642         db  0x21 ; '!'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x08 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x00 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0xba ; '.'
0000000000001651         db  0x50 ; 'P'
0000000000001652         db  0x01 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x40 ; '@'
0000000000001659         db  0xb8 ; '.'
000000000000165a         db  0x21 ; '!'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x08 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x00 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0xc5 ; '.'
0000000000001669         db  0x50 ; 'P'
000000000000166a         db  0x01 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x60 ; '`'
0000000000001671         db  0xb8 ; '.'
0000000000001672         db  0x21 ; '!'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x08 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x00 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0xd9 ; '.'
0000000000001681         db  0x50 ; 'P'
0000000000001682         db  0x01 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x80 ; '.'
0000000000001689         db  0xb8 ; '.'
000000000000168a         db  0x21 ; '!'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x08 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x00 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0xf0 ; '.'
0000000000001699         db  0x50 ; 'P'
000000000000169a         db  0x01 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0xa0 ; '.'
00000000000016a1         db  0xb8 ; '.'
00000000000016a2         db  0x21 ; '!'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x08 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x00 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0xc8 ; '.'
00000000000016b1         db  0x50 ; 'P'
00000000000016b2         db  0x01 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0xc0 ; '.'
00000000000016b9         db  0xb8 ; '.'
00000000000016ba         db  0x21 ; '!'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x08 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x00 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0xf7 ; '.'
00000000000016c9         db  0x50 ; 'P'
00000000000016ca         db  0x01 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0xe0 ; '.'
00000000000016d1         db  0xb8 ; '.'
00000000000016d2         db  0x21 ; '!'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x08 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x00 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0xfe ; '.'
00000000000016e1         db  0x50 ; 'P'
00000000000016e2         db  0x01 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x00 ; '.'
00000000000016e9         db  0xb9 ; '.'
00000000000016ea         db  0x21 ; '!'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x08 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x00 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x06 ; '.'
00000000000016f9         db  0x51 ; 'Q'
00000000000016fa         db  0x01 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x20 ; ' '
0000000000001701         db  0xb9 ; '.'
0000000000001702         db  0x21 ; '!'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x08 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x00 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x0b ; '.'
0000000000001711         db  0x51 ; 'Q'
0000000000001712         db  0x01 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x60 ; '`'
0000000000001719         db  0xb9 ; '.'
000000000000171a         db  0x21 ; '!'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x08 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x00 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0xae ; '.'
0000000000001729         db  0x68 ; 'h'
000000000000172a         db  0x01 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x68 ; 'h'
0000000000001731         db  0xb9 ; '.'
0000000000001732         db  0x21 ; '!'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x08 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x00 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0xb3 ; '.'
0000000000001741         db  0x68 ; 'h'
0000000000001742         db  0x01 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x70 ; 'p'
0000000000001749         db  0xb9 ; '.'
000000000000174a         db  0x21 ; '!'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x08 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x00 ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0xb7 ; '.'
0000000000001759         db  0x68 ; 'h'
000000000000175a         db  0x01 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x78 ; 'x'
0000000000001761         db  0xb9 ; '.'
0000000000001762         db  0x21 ; '!'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x08 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x00 ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0xbe ; '.'
0000000000001771         db  0x68 ; 'h'
0000000000001772         db  0x01 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x80 ; '.'
0000000000001779         db  0xb9 ; '.'
000000000000177a         db  0x21 ; '!'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x08 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x00 ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0xc4 ; '.'
0000000000001789         db  0x68 ; 'h'
000000000000178a         db  0x01 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x88 ; '.'
0000000000001791         db  0xb9 ; '.'
0000000000001792         db  0x21 ; '!'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x08 ; '.'
0000000000001799         db  0x00 ; '.'
000000000000179a         db  0x00 ; '.'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x00 ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0xcd ; '.'
00000000000017a1         db  0x68 ; 'h'
00000000000017a2         db  0x01 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x00 ; '.'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x90 ; '.'
00000000000017a9         db  0xb9 ; '.'
00000000000017aa         db  0x21 ; '!'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x08 ; '.'
00000000000017b1         db  0x00 ; '.'
00000000000017b2         db  0x00 ; '.'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x00 ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0xd1 ; '.'
00000000000017b9         db  0x68 ; 'h'
00000000000017ba         db  0x01 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x00 ; '.'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x98 ; '.'
00000000000017c1         db  0xb9 ; '.'
00000000000017c2         db  0x21 ; '!'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x08 ; '.'
00000000000017c9         db  0x00 ; '.'
00000000000017ca         db  0x00 ; '.'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x00 ; '.'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x88 ; '.'
00000000000017d1         db  0x69 ; 'i'
00000000000017d2         db  0x01 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x00 ; '.'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0xc0 ; '.'
00000000000017d9         db  0xb9 ; '.'
00000000000017da         db  0x21 ; '!'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x08 ; '.'
00000000000017e1         db  0x00 ; '.'
00000000000017e2         db  0x00 ; '.'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x00 ; '.'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0xa9 ; '.'
00000000000017e9         db  0x6a ; 'j'
00000000000017ea         db  0x01 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x00 ; '.'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0xc8 ; '.'
00000000000017f1         db  0xb9 ; '.'
00000000000017f2         db  0x21 ; '!'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x08 ; '.'
00000000000017f9         db  0x00 ; '.'
00000000000017fa         db  0x00 ; '.'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x00 ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0xb1 ; '.'
0000000000001801         db  0x6a ; 'j'
0000000000001802         db  0x01 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x00 ; '.'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0xd0 ; '.'
0000000000001809         db  0xb9 ; '.'
000000000000180a         db  0x21 ; '!'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x08 ; '.'
0000000000001811         db  0x00 ; '.'
0000000000001812         db  0x00 ; '.'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x00 ; '.'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0xb7 ; '.'
0000000000001819         db  0x6a ; 'j'
000000000000181a         db  0x01 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x00 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0xd8 ; '.'
0000000000001821         db  0xb9 ; '.'
0000000000001822         db  0x21 ; '!'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x08 ; '.'
0000000000001829         db  0x00 ; '.'
000000000000182a         db  0x00 ; '.'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x00 ; '.'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0xc4 ; '.'
0000000000001831         db  0x6a ; 'j'
0000000000001832         db  0x01 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x00 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0xe0 ; '.'
0000000000001839         db  0xb9 ; '.'
000000000000183a         db  0x21 ; '!'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x08 ; '.'
0000000000001841         db  0x00 ; '.'
0000000000001842         db  0x00 ; '.'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x00 ; '.'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0xd1 ; '.'
0000000000001849         db  0x6a ; 'j'
000000000000184a         db  0x01 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x00 ; '.'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0xe8 ; '.'
0000000000001851         db  0xb9 ; '.'
0000000000001852         db  0x21 ; '!'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x08 ; '.'
0000000000001859         db  0x00 ; '.'
000000000000185a         db  0x00 ; '.'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x00 ; '.'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x9b ; '.'
0000000000001861         db  0x73 ; 's'
0000000000001862         db  0x01 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x00 ; '.'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0xf0 ; '.'
0000000000001869         db  0xb9 ; '.'
000000000000186a         db  0x21 ; '!'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x08 ; '.'
0000000000001871         db  0x00 ; '.'
0000000000001872         db  0x00 ; '.'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x00 ; '.'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0xe5 ; '.'
0000000000001879         db  0x6a ; 'j'
000000000000187a         db  0x01 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x00 ; '.'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0xf8 ; '.'
0000000000001881         db  0xb9 ; '.'
0000000000001882         db  0x21 ; '!'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x08 ; '.'
0000000000001889         db  0x00 ; '.'
000000000000188a         db  0x00 ; '.'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x00 ; '.'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0xca ; '.'
0000000000001891         db  0x6a ; 'j'
0000000000001892         db  0x01 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x00 ; '.'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x00 ; '.'
0000000000001899         db  0xba ; '.'
000000000000189a         db  0x21 ; '!'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x08 ; '.'
00000000000018a1         db  0x00 ; '.'
00000000000018a2         db  0x00 ; '.'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x00 ; '.'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0xec ; '.'
00000000000018a9         db  0x4f ; 'O'
00000000000018aa         db  0x01 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x00 ; '.'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x08 ; '.'
00000000000018b1         db  0xba ; '.'
00000000000018b2         db  0x21 ; '!'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x08 ; '.'
00000000000018b9         db  0x00 ; '.'
00000000000018ba         db  0x00 ; '.'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x00 ; '.'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0xed ; '.'
00000000000018c1         db  0x6a ; 'j'
00000000000018c2         db  0x01 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x00 ; '.'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x28 ; '('
00000000000018c9         db  0xba ; '.'
00000000000018ca         db  0x21 ; '!'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x08 ; '.'
00000000000018d1         db  0x00 ; '.'
00000000000018d2         db  0x00 ; '.'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x00 ; '.'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x20 ; ' '
00000000000018d9         db  0xef ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x00 ; '.'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x30 ; '0'
00000000000018e1         db  0xba ; '.'
00000000000018e2         db  0x21 ; '!'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x08 ; '.'
00000000000018e9         db  0x00 ; '.'
00000000000018ea         db  0x00 ; '.'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x00 ; '.'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x00 ; '.'
00000000000018f1         db  0xef ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x00 ; '.'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x08 ; '.'
00000000000018f9         db  0xc0 ; '.'
00000000000018fa         db  0x21 ; '!'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x08 ; '.'
0000000000001901         db  0x00 ; '.'
0000000000001902         db  0x00 ; '.'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x00 ; '.'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x08 ; '.'
0000000000001909         db  0xc0 ; '.'
000000000000190a         db  0x21 ; '!'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x00 ; '.'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0x20 ; ' '
0000000000001911         db  0xc0 ; '.'
0000000000001912         db  0x21 ; '!'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x08 ; '.'
0000000000001919         db  0x00 ; '.'
000000000000191a         db  0x00 ; '.'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x00 ; '.'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x81 ; '.'
0000000000001921         db  0x68 ; 'h'
0000000000001922         db  0x01 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x00 ; '.'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0x80 ; '.'
0000000000001929         db  0xc0 ; '.'
000000000000192a         db  0x21 ; '!'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x08 ; '.'
0000000000001931         db  0x00 ; '.'
0000000000001932         db  0x00 ; '.'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x00 ; '.'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x90 ; '.'
0000000000001939         db  0xc0 ; '.'
000000000000193a         db  0x21 ; '!'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x00 ; '.'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0x98 ; '.'
0000000000001941         db  0xc0 ; '.'
0000000000001942         db  0x21 ; '!'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x08 ; '.'
0000000000001949         db  0x00 ; '.'
000000000000194a         db  0x00 ; '.'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x00 ; '.'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0xa0 ; '.'
0000000000001951         db  0xc5 ; '.'
0000000000001952         db  0x21 ; '!'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x00 ; '.'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0xa0 ; '.'
0000000000001959         db  0xc0 ; '.'
000000000000195a         db  0x21 ; '!'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x08 ; '.'
0000000000001961         db  0x00 ; '.'
0000000000001962         db  0x00 ; '.'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x00 ; '.'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x60 ; '`'
0000000000001969         db  0x36 ; '6'
000000000000196a         db  0x01 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x00 ; '.'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'
0000000000001970         db  0xc8 ; '.'
0000000000001971         db  0xbf ; '.'
0000000000001972         db  0x21 ; '!'
0000000000001973         db  0x00 ; '.'
0000000000001974         db  0x00 ; '.'
0000000000001975         db  0x00 ; '.'
0000000000001976         db  0x00 ; '.'
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x06 ; '.'
0000000000001979         db  0x00 ; '.'
000000000000197a         db  0x00 ; '.'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x02 ; '.'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'
0000000000001980         db  0x00 ; '.'
0000000000001981         db  0x00 ; '.'
0000000000001982         db  0x00 ; '.'
0000000000001983         db  0x00 ; '.'
0000000000001984         db  0x00 ; '.'
0000000000001985         db  0x00 ; '.'
0000000000001986         db  0x00 ; '.'
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0xd0 ; '.'
0000000000001989         db  0xbf ; '.'
000000000000198a         db  0x21 ; '!'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'
0000000000001990         db  0x06 ; '.'
0000000000001991         db  0x00 ; '.'
0000000000001992         db  0x00 ; '.'
0000000000001993         db  0x00 ; '.'
0000000000001994         db  0x08 ; '.'
0000000000001995         db  0x00 ; '.'
0000000000001996         db  0x00 ; '.'
0000000000001997         db  0x00 ; '.'
0000000000001998         db  0x00 ; '.'
0000000000001999         db  0x00 ; '.'
000000000000199a         db  0x00 ; '.'
000000000000199b         db  0x00 ; '.'
000000000000199c         db  0x00 ; '.'
000000000000199d         db  0x00 ; '.'
000000000000199e         db  0x00 ; '.'
000000000000199f         db  0x00 ; '.'
00000000000019a0         db  0xd8 ; '.'
00000000000019a1         db  0xbf ; '.'
00000000000019a2         db  0x21 ; '!'
00000000000019a3         db  0x00 ; '.'
00000000000019a4         db  0x00 ; '.'
00000000000019a5         db  0x00 ; '.'
00000000000019a6         db  0x00 ; '.'
00000000000019a7         db  0x00 ; '.'
00000000000019a8         db  0x06 ; '.'
00000000000019a9         db  0x00 ; '.'
00000000000019aa         db  0x00 ; '.'
00000000000019ab         db  0x00 ; '.'
00000000000019ac         db  0x39 ; '9'
00000000000019ad         db  0x00 ; '.'
00000000000019ae         db  0x00 ; '.'
00000000000019af         db  0x00 ; '.'
00000000000019b0         db  0x00 ; '.'
00000000000019b1         db  0x00 ; '.'
00000000000019b2         db  0x00 ; '.'
00000000000019b3         db  0x00 ; '.'
00000000000019b4         db  0x00 ; '.'
00000000000019b5         db  0x00 ; '.'
00000000000019b6         db  0x00 ; '.'
00000000000019b7         db  0x00 ; '.'
00000000000019b8         db  0xe0 ; '.'
00000000000019b9         db  0xbf ; '.'
00000000000019ba         db  0x21 ; '!'
00000000000019bb         db  0x00 ; '.'
00000000000019bc         db  0x00 ; '.'
00000000000019bd         db  0x00 ; '.'
00000000000019be         db  0x00 ; '.'
00000000000019bf         db  0x00 ; '.'
00000000000019c0         db  0x06 ; '.'
00000000000019c1         db  0x00 ; '.'
00000000000019c2         db  0x00 ; '.'
00000000000019c3         db  0x00 ; '.'
00000000000019c4         db  0x46 ; 'F'
00000000000019c5         db  0x00 ; '.'
00000000000019c6         db  0x00 ; '.'
00000000000019c7         db  0x00 ; '.'
00000000000019c8         db  0x00 ; '.'
00000000000019c9         db  0x00 ; '.'
00000000000019ca         db  0x00 ; '.'
00000000000019cb         db  0x00 ; '.'
00000000000019cc         db  0x00 ; '.'
00000000000019cd         db  0x00 ; '.'
00000000000019ce         db  0x00 ; '.'
00000000000019cf         db  0x00 ; '.'
00000000000019d0         db  0xe8 ; '.'
00000000000019d1         db  0xbf ; '.'
00000000000019d2         db  0x21 ; '!'
00000000000019d3         db  0x00 ; '.'
00000000000019d4         db  0x00 ; '.'
00000000000019d5         db  0x00 ; '.'
00000000000019d6         db  0x00 ; '.'
00000000000019d7         db  0x00 ; '.'
00000000000019d8         db  0x06 ; '.'
00000000000019d9         db  0x00 ; '.'
00000000000019da         db  0x00 ; '.'
00000000000019db         db  0x00 ; '.'
00000000000019dc         db  0x71 ; 'q'
00000000000019dd         db  0x00 ; '.'
00000000000019de         db  0x00 ; '.'
00000000000019df         db  0x00 ; '.'
00000000000019e0         db  0x00 ; '.'
00000000000019e1         db  0x00 ; '.'
00000000000019e2         db  0x00 ; '.'
00000000000019e3         db  0x00 ; '.'
00000000000019e4         db  0x00 ; '.'
00000000000019e5         db  0x00 ; '.'
00000000000019e6         db  0x00 ; '.'
00000000000019e7         db  0x00 ; '.'
00000000000019e8         db  0xf0 ; '.'
00000000000019e9         db  0xbf ; '.'
00000000000019ea         db  0x21 ; '!'
00000000000019eb         db  0x00 ; '.'
00000000000019ec         db  0x00 ; '.'
00000000000019ed         db  0x00 ; '.'
00000000000019ee         db  0x00 ; '.'
00000000000019ef         db  0x00 ; '.'
00000000000019f0         db  0x06 ; '.'
00000000000019f1         db  0x00 ; '.'
00000000000019f2         db  0x00 ; '.'
00000000000019f3         db  0x00 ; '.'
00000000000019f4         db  0x75 ; 'u'
00000000000019f5         db  0x00 ; '.'
00000000000019f6         db  0x00 ; '.'
00000000000019f7         db  0x00 ; '.'
00000000000019f8         db  0x00 ; '.'
00000000000019f9         db  0x00 ; '.'
00000000000019fa         db  0x00 ; '.'
00000000000019fb         db  0x00 ; '.'
00000000000019fc         db  0x00 ; '.'
00000000000019fd         db  0x00 ; '.'
00000000000019fe         db  0x00 ; '.'
00000000000019ff         db  0x00 ; '.'
0000000000001a00         db  0xc0 ; '.'
0000000000001a01         db  0xc0 ; '.'
0000000000001a02         db  0x21 ; '!'
0000000000001a03         db  0x00 ; '.'
0000000000001a04         db  0x00 ; '.'
0000000000001a05         db  0x00 ; '.'
0000000000001a06         db  0x00 ; '.'
0000000000001a07         db  0x00 ; '.'
0000000000001a08         db  0x05 ; '.'
0000000000001a09         db  0x00 ; '.'
0000000000001a0a         db  0x00 ; '.'
0000000000001a0b         db  0x00 ; '.'
0000000000001a0c         db  0x79 ; 'y'
0000000000001a0d         db  0x00 ; '.'
0000000000001a0e         db  0x00 ; '.'
0000000000001a0f         db  0x00 ; '.'
0000000000001a10         db  0x00 ; '.'
0000000000001a11         db  0x00 ; '.'
0000000000001a12         db  0x00 ; '.'
0000000000001a13         db  0x00 ; '.'
0000000000001a14         db  0x00 ; '.'
0000000000001a15         db  0x00 ; '.'
0000000000001a16         db  0x00 ; '.'
0000000000001a17         db  0x00 ; '.'
0000000000001a18         db  0xc8 ; '.'
0000000000001a19         db  0xc0 ; '.'
0000000000001a1a         db  0x21 ; '!'
0000000000001a1b         db  0x00 ; '.'
0000000000001a1c         db  0x00 ; '.'
0000000000001a1d         db  0x00 ; '.'
0000000000001a1e         db  0x00 ; '.'
0000000000001a1f         db  0x00 ; '.'
0000000000001a20         db  0x05 ; '.'
0000000000001a21         db  0x00 ; '.'
0000000000001a22         db  0x00 ; '.'
0000000000001a23         db  0x00 ; '.'
0000000000001a24         db  0x78 ; 'x'
0000000000001a25         db  0x00 ; '.'
0000000000001a26         db  0x00 ; '.'
0000000000001a27         db  0x00 ; '.'
0000000000001a28         db  0x00 ; '.'
0000000000001a29         db  0x00 ; '.'
0000000000001a2a         db  0x00 ; '.'
0000000000001a2b         db  0x00 ; '.'
0000000000001a2c         db  0x00 ; '.'
0000000000001a2d         db  0x00 ; '.'
0000000000001a2e         db  0x00 ; '.'
0000000000001a2f         db  0x00 ; '.'
0000000000001a30         db  0xd0 ; '.'
0000000000001a31         db  0xc0 ; '.'
0000000000001a32         db  0x21 ; '!'
0000000000001a33         db  0x00 ; '.'
0000000000001a34         db  0x00 ; '.'
0000000000001a35         db  0x00 ; '.'
0000000000001a36         db  0x00 ; '.'
0000000000001a37         db  0x00 ; '.'
0000000000001a38         db  0x05 ; '.'
0000000000001a39         db  0x00 ; '.'
0000000000001a3a         db  0x00 ; '.'
0000000000001a3b         db  0x00 ; '.'
0000000000001a3c         db  0x7a ; 'z'
0000000000001a3d         db  0x00 ; '.'
0000000000001a3e         db  0x00 ; '.'
0000000000001a3f         db  0x00 ; '.'
0000000000001a40         db  0x00 ; '.'
0000000000001a41         db  0x00 ; '.'
0000000000001a42         db  0x00 ; '.'
0000000000001a43         db  0x00 ; '.'
0000000000001a44         db  0x00 ; '.'
0000000000001a45         db  0x00 ; '.'
0000000000001a46         db  0x00 ; '.'
0000000000001a47         db  0x00 ; '.'
0000000000001a48         db  0xd8 ; '.'
0000000000001a49         db  0xc0 ; '.'
0000000000001a4a         db  0x21 ; '!'
0000000000001a4b         db  0x00 ; '.'
0000000000001a4c         db  0x00 ; '.'
0000000000001a4d         db  0x00 ; '.'
0000000000001a4e         db  0x00 ; '.'
0000000000001a4f         db  0x00 ; '.'
0000000000001a50         db  0x05 ; '.'
0000000000001a51         db  0x00 ; '.'
0000000000001a52         db  0x00 ; '.'
0000000000001a53         db  0x00 ; '.'
0000000000001a54         db  0x7f ; '.'
0000000000001a55         db  0x00 ; '.'
0000000000001a56         db  0x00 ; '.'
0000000000001a57         db  0x00 ; '.'
0000000000001a58         db  0x00 ; '.'
0000000000001a59         db  0x00 ; '.'
0000000000001a5a         db  0x00 ; '.'
0000000000001a5b         db  0x00 ; '.'
0000000000001a5c         db  0x00 ; '.'
0000000000001a5d         db  0x00 ; '.'
0000000000001a5e         db  0x00 ; '.'
0000000000001a5f         db  0x00 ; '.'
0000000000001a60         db  0xe0 ; '.'
0000000000001a61         db  0xc0 ; '.'
0000000000001a62         db  0x21 ; '!'
0000000000001a63         db  0x00 ; '.'
0000000000001a64         db  0x00 ; '.'
0000000000001a65         db  0x00 ; '.'
0000000000001a66         db  0x00 ; '.'
0000000000001a67         db  0x00 ; '.'
0000000000001a68         db  0x05 ; '.'
0000000000001a69         db  0x00 ; '.'
0000000000001a6a         db  0x00 ; '.'
0000000000001a6b         db  0x00 ; '.'
0000000000001a6c         db  0x80 ; '.'
0000000000001a6d         db  0x00 ; '.'
0000000000001a6e         db  0x00 ; '.'
0000000000001a6f         db  0x00 ; '.'
0000000000001a70         db  0x00 ; '.'
0000000000001a71         db  0x00 ; '.'
0000000000001a72         db  0x00 ; '.'
0000000000001a73         db  0x00 ; '.'
0000000000001a74         db  0x00 ; '.'
0000000000001a75         db  0x00 ; '.'
0000000000001a76         db  0x00 ; '.'
0000000000001a77         db  0x00 ; '.'
0000000000001a78         db  0xe8 ; '.'
0000000000001a79         db  0xc0 ; '.'
0000000000001a7a         db  0x21 ; '!'
0000000000001a7b         db  0x00 ; '.'
0000000000001a7c         db  0x00 ; '.'
0000000000001a7d         db  0x00 ; '.'
0000000000001a7e         db  0x00 ; '.'
0000000000001a7f         db  0x00 ; '.'
0000000000001a80         db  0x05 ; '.'
0000000000001a81         db  0x00 ; '.'
0000000000001a82         db  0x00 ; '.'
0000000000001a83         db  0x00 ; '.'
0000000000001a84         db  0x7c ; '|'
0000000000001a85         db  0x00 ; '.'
0000000000001a86         db  0x00 ; '.'
0000000000001a87         db  0x00 ; '.'
0000000000001a88         db  0x00 ; '.'
0000000000001a89         db  0x00 ; '.'
0000000000001a8a         db  0x00 ; '.'
0000000000001a8b         db  0x00 ; '.'
0000000000001a8c         db  0x00 ; '.'
0000000000001a8d         db  0x00 ; '.'
0000000000001a8e         db  0x00 ; '.'
0000000000001a8f         db  0x00 ; '.'
0000000000001a90         db  0x00 ; '.'
0000000000001a91         db  0xc1 ; '.'
0000000000001a92         db  0x21 ; '!'
0000000000001a93         db  0x00 ; '.'
0000000000001a94         db  0x00 ; '.'
0000000000001a95         db  0x00 ; '.'
0000000000001a96         db  0x00 ; '.'
0000000000001a97         db  0x00 ; '.'
0000000000001a98         db  0x05 ; '.'
0000000000001a99         db  0x00 ; '.'
0000000000001a9a         db  0x00 ; '.'
0000000000001a9b         db  0x00 ; '.'
0000000000001a9c         db  0x7e ; '~'
0000000000001a9d         db  0x00 ; '.'
0000000000001a9e         db  0x00 ; '.'
0000000000001a9f         db  0x00 ; '.'
0000000000001aa0         db  0x00 ; '.'
0000000000001aa1         db  0x00 ; '.'
0000000000001aa2         db  0x00 ; '.'
0000000000001aa3         db  0x00 ; '.'
0000000000001aa4         db  0x00 ; '.'
0000000000001aa5         db  0x00 ; '.'
0000000000001aa6         db  0x00 ; '.'
0000000000001aa7         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1aa8; 0x2540[ (2712 bytes)
        ; File offset : [6824; 9536[ (2712 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001aa8         db  0x40 ; '@'
0000000000001aa9         db  0xbc ; '.'
0000000000001aaa         db  0x21 ; '!'
0000000000001aab         db  0x00 ; '.'
0000000000001aac         db  0x00 ; '.'
0000000000001aad         db  0x00 ; '.'
0000000000001aae         db  0x00 ; '.'
0000000000001aaf         db  0x00 ; '.'
0000000000001ab0         db  0x07 ; '.'
0000000000001ab1         db  0x00 ; '.'
0000000000001ab2         db  0x00 ; '.'
0000000000001ab3         db  0x00 ; '.'
0000000000001ab4         db  0x01 ; '.'
0000000000001ab5         db  0x00 ; '.'
0000000000001ab6         db  0x00 ; '.'
0000000000001ab7         db  0x00 ; '.'
0000000000001ab8         db  0x00 ; '.'
0000000000001ab9         db  0x00 ; '.'
0000000000001aba         db  0x00 ; '.'
0000000000001abb         db  0x00 ; '.'
0000000000001abc         db  0x00 ; '.'
0000000000001abd         db  0x00 ; '.'
0000000000001abe         db  0x00 ; '.'
0000000000001abf         db  0x00 ; '.'
0000000000001ac0         db  0x48 ; 'H'
0000000000001ac1         db  0xbc ; '.'
0000000000001ac2         db  0x21 ; '!'
0000000000001ac3         db  0x00 ; '.'
0000000000001ac4         db  0x00 ; '.'
0000000000001ac5         db  0x00 ; '.'
0000000000001ac6         db  0x00 ; '.'
0000000000001ac7         db  0x00 ; '.'
0000000000001ac8         db  0x07 ; '.'
0000000000001ac9         db  0x00 ; '.'
0000000000001aca         db  0x00 ; '.'
0000000000001acb         db  0x00 ; '.'
0000000000001acc         db  0x03 ; '.'
0000000000001acd         db  0x00 ; '.'
0000000000001ace         db  0x00 ; '.'
0000000000001acf         db  0x00 ; '.'
0000000000001ad0         db  0x00 ; '.'
0000000000001ad1         db  0x00 ; '.'
0000000000001ad2         db  0x00 ; '.'
0000000000001ad3         db  0x00 ; '.'
0000000000001ad4         db  0x00 ; '.'
0000000000001ad5         db  0x00 ; '.'
0000000000001ad6         db  0x00 ; '.'
0000000000001ad7         db  0x00 ; '.'
0000000000001ad8         db  0x50 ; 'P'
0000000000001ad9         db  0xbc ; '.'
0000000000001ada         db  0x21 ; '!'
0000000000001adb         db  0x00 ; '.'
0000000000001adc         db  0x00 ; '.'
0000000000001add         db  0x00 ; '.'
0000000000001ade         db  0x00 ; '.'
0000000000001adf         db  0x00 ; '.'
0000000000001ae0         db  0x07 ; '.'
0000000000001ae1         db  0x00 ; '.'
0000000000001ae2         db  0x00 ; '.'
0000000000001ae3         db  0x00 ; '.'
0000000000001ae4         db  0x04 ; '.'
0000000000001ae5         db  0x00 ; '.'
0000000000001ae6         db  0x00 ; '.'
0000000000001ae7         db  0x00 ; '.'
0000000000001ae8         db  0x00 ; '.'
0000000000001ae9         db  0x00 ; '.'
0000000000001aea         db  0x00 ; '.'
0000000000001aeb         db  0x00 ; '.'
0000000000001aec         db  0x00 ; '.'
0000000000001aed         db  0x00 ; '.'
0000000000001aee         db  0x00 ; '.'
0000000000001aef         db  0x00 ; '.'
0000000000001af0         db  0x58 ; 'X'
0000000000001af1         db  0xbc ; '.'
0000000000001af2         db  0x21 ; '!'
0000000000001af3         db  0x00 ; '.'
0000000000001af4         db  0x00 ; '.'
0000000000001af5         db  0x00 ; '.'
0000000000001af6         db  0x00 ; '.'
0000000000001af7         db  0x00 ; '.'
0000000000001af8         db  0x07 ; '.'
0000000000001af9         db  0x00 ; '.'
0000000000001afa         db  0x00 ; '.'
0000000000001afb         db  0x00 ; '.'
0000000000001afc         db  0x05 ; '.'
0000000000001afd         db  0x00 ; '.'
0000000000001afe         db  0x00 ; '.'
0000000000001aff         db  0x00 ; '.'
0000000000001b00         db  0x00 ; '.'
0000000000001b01         db  0x00 ; '.'
0000000000001b02         db  0x00 ; '.'
0000000000001b03         db  0x00 ; '.'
0000000000001b04         db  0x00 ; '.'
0000000000001b05         db  0x00 ; '.'
0000000000001b06         db  0x00 ; '.'
0000000000001b07         db  0x00 ; '.'
0000000000001b08         db  0x60 ; '`'
0000000000001b09         db  0xbc ; '.'
0000000000001b0a         db  0x21 ; '!'
0000000000001b0b         db  0x00 ; '.'
0000000000001b0c         db  0x00 ; '.'
0000000000001b0d         db  0x00 ; '.'
0000000000001b0e         db  0x00 ; '.'
0000000000001b0f         db  0x00 ; '.'
0000000000001b10         db  0x07 ; '.'
0000000000001b11         db  0x00 ; '.'
0000000000001b12         db  0x00 ; '.'
0000000000001b13         db  0x00 ; '.'
0000000000001b14         db  0x06 ; '.'
0000000000001b15         db  0x00 ; '.'
0000000000001b16         db  0x00 ; '.'
0000000000001b17         db  0x00 ; '.'
0000000000001b18         db  0x00 ; '.'
0000000000001b19         db  0x00 ; '.'
0000000000001b1a         db  0x00 ; '.'
0000000000001b1b         db  0x00 ; '.'
0000000000001b1c         db  0x00 ; '.'
0000000000001b1d         db  0x00 ; '.'
0000000000001b1e         db  0x00 ; '.'
0000000000001b1f         db  0x00 ; '.'
0000000000001b20         db  0x68 ; 'h'
0000000000001b21         db  0xbc ; '.'
0000000000001b22         db  0x21 ; '!'
0000000000001b23         db  0x00 ; '.'
0000000000001b24         db  0x00 ; '.'
0000000000001b25         db  0x00 ; '.'
0000000000001b26         db  0x00 ; '.'
0000000000001b27         db  0x00 ; '.'
0000000000001b28         db  0x07 ; '.'
0000000000001b29         db  0x00 ; '.'
0000000000001b2a         db  0x00 ; '.'
0000000000001b2b         db  0x00 ; '.'
0000000000001b2c         db  0x07 ; '.'
0000000000001b2d         db  0x00 ; '.'
0000000000001b2e         db  0x00 ; '.'
0000000000001b2f         db  0x00 ; '.'
0000000000001b30         db  0x00 ; '.'
0000000000001b31         db  0x00 ; '.'
0000000000001b32         db  0x00 ; '.'
0000000000001b33         db  0x00 ; '.'
0000000000001b34         db  0x00 ; '.'
0000000000001b35         db  0x00 ; '.'
0000000000001b36         db  0x00 ; '.'
0000000000001b37         db  0x00 ; '.'
0000000000001b38         db  0x70 ; 'p'
0000000000001b39         db  0xbc ; '.'
0000000000001b3a         db  0x21 ; '!'
0000000000001b3b         db  0x00 ; '.'
0000000000001b3c         db  0x00 ; '.'
0000000000001b3d         db  0x00 ; '.'
0000000000001b3e         db  0x00 ; '.'
0000000000001b3f         db  0x00 ; '.'
0000000000001b40         db  0x07 ; '.'
0000000000001b41         db  0x00 ; '.'
0000000000001b42         db  0x00 ; '.'
0000000000001b43         db  0x00 ; '.'
0000000000001b44         db  0x09 ; '.'
0000000000001b45         db  0x00 ; '.'
0000000000001b46         db  0x00 ; '.'
0000000000001b47         db  0x00 ; '.'
0000000000001b48         db  0x00 ; '.'
0000000000001b49         db  0x00 ; '.'
0000000000001b4a         db  0x00 ; '.'
0000000000001b4b         db  0x00 ; '.'
0000000000001b4c         db  0x00 ; '.'
0000000000001b4d         db  0x00 ; '.'
0000000000001b4e         db  0x00 ; '.'
0000000000001b4f         db  0x00 ; '.'
0000000000001b50         db  0x78 ; 'x'
0000000000001b51         db  0xbc ; '.'
0000000000001b52         db  0x21 ; '!'
0000000000001b53         db  0x00 ; '.'
0000000000001b54         db  0x00 ; '.'
0000000000001b55         db  0x00 ; '.'
0000000000001b56         db  0x00 ; '.'
0000000000001b57         db  0x00 ; '.'
0000000000001b58         db  0x07 ; '.'
0000000000001b59         db  0x00 ; '.'
0000000000001b5a         db  0x00 ; '.'
0000000000001b5b         db  0x00 ; '.'
0000000000001b5c         db  0x0a ; '.'
0000000000001b5d         db  0x00 ; '.'
0000000000001b5e         db  0x00 ; '.'
0000000000001b5f         db  0x00 ; '.'
0000000000001b60         db  0x00 ; '.'
0000000000001b61         db  0x00 ; '.'
0000000000001b62         db  0x00 ; '.'
0000000000001b63         db  0x00 ; '.'
0000000000001b64         db  0x00 ; '.'
0000000000001b65         db  0x00 ; '.'
0000000000001b66         db  0x00 ; '.'
0000000000001b67         db  0x00 ; '.'
0000000000001b68         db  0x80 ; '.'
0000000000001b69         db  0xbc ; '.'
0000000000001b6a         db  0x21 ; '!'
0000000000001b6b         db  0x00 ; '.'
0000000000001b6c         db  0x00 ; '.'
0000000000001b6d         db  0x00 ; '.'
0000000000001b6e         db  0x00 ; '.'
0000000000001b6f         db  0x00 ; '.'
0000000000001b70         db  0x07 ; '.'
0000000000001b71         db  0x00 ; '.'
0000000000001b72         db  0x00 ; '.'
0000000000001b73         db  0x00 ; '.'
0000000000001b74         db  0x0b ; '.'
0000000000001b75         db  0x00 ; '.'
0000000000001b76         db  0x00 ; '.'
0000000000001b77         db  0x00 ; '.'
0000000000001b78         db  0x00 ; '.'
0000000000001b79         db  0x00 ; '.'
0000000000001b7a         db  0x00 ; '.'
0000000000001b7b         db  0x00 ; '.'
0000000000001b7c         db  0x00 ; '.'
0000000000001b7d         db  0x00 ; '.'
0000000000001b7e         db  0x00 ; '.'
0000000000001b7f         db  0x00 ; '.'
0000000000001b80         db  0x88 ; '.'
0000000000001b81         db  0xbc ; '.'
0000000000001b82         db  0x21 ; '!'
0000000000001b83         db  0x00 ; '.'
0000000000001b84         db  0x00 ; '.'
0000000000001b85         db  0x00 ; '.'
0000000000001b86         db  0x00 ; '.'
0000000000001b87         db  0x00 ; '.'
0000000000001b88         db  0x07 ; '.'
0000000000001b89         db  0x00 ; '.'
0000000000001b8a         db  0x00 ; '.'
0000000000001b8b         db  0x00 ; '.'
0000000000001b8c         db  0x0c ; '.'
0000000000001b8d         db  0x00 ; '.'
0000000000001b8e         db  0x00 ; '.'
0000000000001b8f         db  0x00 ; '.'
0000000000001b90         db  0x00 ; '.'
0000000000001b91         db  0x00 ; '.'
0000000000001b92         db  0x00 ; '.'
0000000000001b93         db  0x00 ; '.'
0000000000001b94         db  0x00 ; '.'
0000000000001b95         db  0x00 ; '.'
0000000000001b96         db  0x00 ; '.'
0000000000001b97         db  0x00 ; '.'
0000000000001b98         db  0x90 ; '.'
0000000000001b99         db  0xbc ; '.'
0000000000001b9a         db  0x21 ; '!'
0000000000001b9b         db  0x00 ; '.'
0000000000001b9c         db  0x00 ; '.'
0000000000001b9d         db  0x00 ; '.'
0000000000001b9e         db  0x00 ; '.'
0000000000001b9f         db  0x00 ; '.'
0000000000001ba0         db  0x07 ; '.'
0000000000001ba1         db  0x00 ; '.'
0000000000001ba2         db  0x00 ; '.'
0000000000001ba3         db  0x00 ; '.'
0000000000001ba4         db  0x0d ; '.'
0000000000001ba5         db  0x00 ; '.'
0000000000001ba6         db  0x00 ; '.'
0000000000001ba7         db  0x00 ; '.'
0000000000001ba8         db  0x00 ; '.'
0000000000001ba9         db  0x00 ; '.'
0000000000001baa         db  0x00 ; '.'
0000000000001bab         db  0x00 ; '.'
0000000000001bac         db  0x00 ; '.'
0000000000001bad         db  0x00 ; '.'
0000000000001bae         db  0x00 ; '.'
0000000000001baf         db  0x00 ; '.'
0000000000001bb0         db  0x98 ; '.'
0000000000001bb1         db  0xbc ; '.'
0000000000001bb2         db  0x21 ; '!'
0000000000001bb3         db  0x00 ; '.'
0000000000001bb4         db  0x00 ; '.'
0000000000001bb5         db  0x00 ; '.'
0000000000001bb6         db  0x00 ; '.'
0000000000001bb7         db  0x00 ; '.'
0000000000001bb8         db  0x07 ; '.'
0000000000001bb9         db  0x00 ; '.'
0000000000001bba         db  0x00 ; '.'
0000000000001bbb         db  0x00 ; '.'
0000000000001bbc         db  0x0e ; '.'
0000000000001bbd         db  0x00 ; '.'
0000000000001bbe         db  0x00 ; '.'
0000000000001bbf         db  0x00 ; '.'
0000000000001bc0         db  0x00 ; '.'
0000000000001bc1         db  0x00 ; '.'
0000000000001bc2         db  0x00 ; '.'
0000000000001bc3         db  0x00 ; '.'
0000000000001bc4         db  0x00 ; '.'
0000000000001bc5         db  0x00 ; '.'
0000000000001bc6         db  0x00 ; '.'
0000000000001bc7         db  0x00 ; '.'
0000000000001bc8         db  0xa0 ; '.'
0000000000001bc9         db  0xbc ; '.'
0000000000001bca         db  0x21 ; '!'
0000000000001bcb         db  0x00 ; '.'
0000000000001bcc         db  0x00 ; '.'
0000000000001bcd         db  0x00 ; '.'
0000000000001bce         db  0x00 ; '.'
0000000000001bcf         db  0x00 ; '.'
0000000000001bd0         db  0x07 ; '.'
0000000000001bd1         db  0x00 ; '.'
0000000000001bd2         db  0x00 ; '.'
0000000000001bd3         db  0x00 ; '.'
0000000000001bd4         db  0x0f ; '.'
0000000000001bd5         db  0x00 ; '.'
0000000000001bd6         db  0x00 ; '.'
0000000000001bd7         db  0x00 ; '.'
0000000000001bd8         db  0x00 ; '.'
0000000000001bd9         db  0x00 ; '.'
0000000000001bda         db  0x00 ; '.'
0000000000001bdb         db  0x00 ; '.'
0000000000001bdc         db  0x00 ; '.'
0000000000001bdd         db  0x00 ; '.'
0000000000001bde         db  0x00 ; '.'
0000000000001bdf         db  0x00 ; '.'
0000000000001be0         db  0xa8 ; '.'
0000000000001be1         db  0xbc ; '.'
0000000000001be2         db  0x21 ; '!'
0000000000001be3         db  0x00 ; '.'
0000000000001be4         db  0x00 ; '.'
0000000000001be5         db  0x00 ; '.'
0000000000001be6         db  0x00 ; '.'
0000000000001be7         db  0x00 ; '.'
0000000000001be8         db  0x07 ; '.'
0000000000001be9         db  0x00 ; '.'
0000000000001bea         db  0x00 ; '.'
0000000000001beb         db  0x00 ; '.'
0000000000001bec         db  0x10 ; '.'
0000000000001bed         db  0x00 ; '.'
0000000000001bee         db  0x00 ; '.'
0000000000001bef         db  0x00 ; '.'
0000000000001bf0         db  0x00 ; '.'
0000000000001bf1         db  0x00 ; '.'
0000000000001bf2         db  0x00 ; '.'
0000000000001bf3         db  0x00 ; '.'
0000000000001bf4         db  0x00 ; '.'
0000000000001bf5         db  0x00 ; '.'
0000000000001bf6         db  0x00 ; '.'
0000000000001bf7         db  0x00 ; '.'
0000000000001bf8         db  0xb0 ; '.'
0000000000001bf9         db  0xbc ; '.'
0000000000001bfa         db  0x21 ; '!'
0000000000001bfb         db  0x00 ; '.'
0000000000001bfc         db  0x00 ; '.'
0000000000001bfd         db  0x00 ; '.'
0000000000001bfe         db  0x00 ; '.'
0000000000001bff         db  0x00 ; '.'
0000000000001c00         db  0x07 ; '.'
0000000000001c01         db  0x00 ; '.'
0000000000001c02         db  0x00 ; '.'
0000000000001c03         db  0x00 ; '.'
0000000000001c04         db  0x11 ; '.'
0000000000001c05         db  0x00 ; '.'
0000000000001c06         db  0x00 ; '.'
0000000000001c07         db  0x00 ; '.'
0000000000001c08         db  0x00 ; '.'
0000000000001c09         db  0x00 ; '.'
0000000000001c0a         db  0x00 ; '.'
0000000000001c0b         db  0x00 ; '.'
0000000000001c0c         db  0x00 ; '.'
0000000000001c0d         db  0x00 ; '.'
0000000000001c0e         db  0x00 ; '.'
0000000000001c0f         db  0x00 ; '.'
0000000000001c10         db  0xb8 ; '.'
0000000000001c11         db  0xbc ; '.'
0000000000001c12         db  0x21 ; '!'
0000000000001c13         db  0x00 ; '.'
0000000000001c14         db  0x00 ; '.'
0000000000001c15         db  0x00 ; '.'
0000000000001c16         db  0x00 ; '.'
0000000000001c17         db  0x00 ; '.'
0000000000001c18         db  0x07 ; '.'
0000000000001c19         db  0x00 ; '.'
0000000000001c1a         db  0x00 ; '.'
0000000000001c1b         db  0x00 ; '.'
0000000000001c1c         db  0x12 ; '.'
0000000000001c1d         db  0x00 ; '.'
0000000000001c1e         db  0x00 ; '.'
0000000000001c1f         db  0x00 ; '.'
0000000000001c20         db  0x00 ; '.'
0000000000001c21         db  0x00 ; '.'
0000000000001c22         db  0x00 ; '.'
0000000000001c23         db  0x00 ; '.'
0000000000001c24         db  0x00 ; '.'
0000000000001c25         db  0x00 ; '.'
0000000000001c26         db  0x00 ; '.'
0000000000001c27         db  0x00 ; '.'
0000000000001c28         db  0xc0 ; '.'
0000000000001c29         db  0xbc ; '.'
0000000000001c2a         db  0x21 ; '!'
0000000000001c2b         db  0x00 ; '.'
0000000000001c2c         db  0x00 ; '.'
0000000000001c2d         db  0x00 ; '.'
0000000000001c2e         db  0x00 ; '.'
0000000000001c2f         db  0x00 ; '.'
0000000000001c30         db  0x07 ; '.'
0000000000001c31         db  0x00 ; '.'
0000000000001c32         db  0x00 ; '.'
0000000000001c33         db  0x00 ; '.'
0000000000001c34         db  0x13 ; '.'
0000000000001c35         db  0x00 ; '.'
0000000000001c36         db  0x00 ; '.'
0000000000001c37         db  0x00 ; '.'
0000000000001c38         db  0x00 ; '.'
0000000000001c39         db  0x00 ; '.'
0000000000001c3a         db  0x00 ; '.'
0000000000001c3b         db  0x00 ; '.'
0000000000001c3c         db  0x00 ; '.'
0000000000001c3d         db  0x00 ; '.'
0000000000001c3e         db  0x00 ; '.'
0000000000001c3f         db  0x00 ; '.'
0000000000001c40         db  0xc8 ; '.'
0000000000001c41         db  0xbc ; '.'
0000000000001c42         db  0x21 ; '!'
0000000000001c43         db  0x00 ; '.'
0000000000001c44         db  0x00 ; '.'
0000000000001c45         db  0x00 ; '.'
0000000000001c46         db  0x00 ; '.'
0000000000001c47         db  0x00 ; '.'
0000000000001c48         db  0x07 ; '.'
0000000000001c49         db  0x00 ; '.'
0000000000001c4a         db  0x00 ; '.'
0000000000001c4b         db  0x00 ; '.'
0000000000001c4c         db  0x14 ; '.'
0000000000001c4d         db  0x00 ; '.'
0000000000001c4e         db  0x00 ; '.'
0000000000001c4f         db  0x00 ; '.'
0000000000001c50         db  0x00 ; '.'
0000000000001c51         db  0x00 ; '.'
0000000000001c52         db  0x00 ; '.'
0000000000001c53         db  0x00 ; '.'
0000000000001c54         db  0x00 ; '.'
0000000000001c55         db  0x00 ; '.'
0000000000001c56         db  0x00 ; '.'
0000000000001c57         db  0x00 ; '.'
0000000000001c58         db  0xd0 ; '.'
0000000000001c59         db  0xbc ; '.'
0000000000001c5a         db  0x21 ; '!'
0000000000001c5b         db  0x00 ; '.'
0000000000001c5c         db  0x00 ; '.'
0000000000001c5d         db  0x00 ; '.'
0000000000001c5e         db  0x00 ; '.'
0000000000001c5f         db  0x00 ; '.'
0000000000001c60         db  0x07 ; '.'
0000000000001c61         db  0x00 ; '.'
0000000000001c62         db  0x00 ; '.'
0000000000001c63         db  0x00 ; '.'
0000000000001c64         db  0x15 ; '.'
0000000000001c65         db  0x00 ; '.'
0000000000001c66         db  0x00 ; '.'
0000000000001c67         db  0x00 ; '.'
0000000000001c68         db  0x00 ; '.'
0000000000001c69         db  0x00 ; '.'
0000000000001c6a         db  0x00 ; '.'
0000000000001c6b         db  0x00 ; '.'
0000000000001c6c         db  0x00 ; '.'
0000000000001c6d         db  0x00 ; '.'
0000000000001c6e         db  0x00 ; '.'
0000000000001c6f         db  0x00 ; '.'
0000000000001c70         db  0xd8 ; '.'
0000000000001c71         db  0xbc ; '.'
0000000000001c72         db  0x21 ; '!'
0000000000001c73         db  0x00 ; '.'
0000000000001c74         db  0x00 ; '.'
0000000000001c75         db  0x00 ; '.'
0000000000001c76         db  0x00 ; '.'
0000000000001c77         db  0x00 ; '.'
0000000000001c78         db  0x07 ; '.'
0000000000001c79         db  0x00 ; '.'
0000000000001c7a         db  0x00 ; '.'
0000000000001c7b         db  0x00 ; '.'
0000000000001c7c         db  0x16 ; '.'
0000000000001c7d         db  0x00 ; '.'
0000000000001c7e         db  0x00 ; '.'
0000000000001c7f         db  0x00 ; '.'
0000000000001c80         db  0x00 ; '.'
0000000000001c81         db  0x00 ; '.'
0000000000001c82         db  0x00 ; '.'
0000000000001c83         db  0x00 ; '.'
0000000000001c84         db  0x00 ; '.'
0000000000001c85         db  0x00 ; '.'
0000000000001c86         db  0x00 ; '.'
0000000000001c87         db  0x00 ; '.'
0000000000001c88         db  0xe0 ; '.'
0000000000001c89         db  0xbc ; '.'
0000000000001c8a         db  0x21 ; '!'
0000000000001c8b         db  0x00 ; '.'
0000000000001c8c         db  0x00 ; '.'
0000000000001c8d         db  0x00 ; '.'
0000000000001c8e         db  0x00 ; '.'
0000000000001c8f         db  0x00 ; '.'
0000000000001c90         db  0x07 ; '.'
0000000000001c91         db  0x00 ; '.'
0000000000001c92         db  0x00 ; '.'
0000000000001c93         db  0x00 ; '.'
0000000000001c94         db  0x17 ; '.'
0000000000001c95         db  0x00 ; '.'
0000000000001c96         db  0x00 ; '.'
0000000000001c97         db  0x00 ; '.'
0000000000001c98         db  0x00 ; '.'
0000000000001c99         db  0x00 ; '.'
0000000000001c9a         db  0x00 ; '.'
0000000000001c9b         db  0x00 ; '.'
0000000000001c9c         db  0x00 ; '.'
0000000000001c9d         db  0x00 ; '.'
0000000000001c9e         db  0x00 ; '.'
0000000000001c9f         db  0x00 ; '.'
0000000000001ca0         db  0xe8 ; '.'
0000000000001ca1         db  0xbc ; '.'
0000000000001ca2         db  0x21 ; '!'
0000000000001ca3         db  0x00 ; '.'
0000000000001ca4         db  0x00 ; '.'
0000000000001ca5         db  0x00 ; '.'
0000000000001ca6         db  0x00 ; '.'
0000000000001ca7         db  0x00 ; '.'
0000000000001ca8         db  0x07 ; '.'
0000000000001ca9         db  0x00 ; '.'
0000000000001caa         db  0x00 ; '.'
0000000000001cab         db  0x00 ; '.'
0000000000001cac         db  0x18 ; '.'
0000000000001cad         db  0x00 ; '.'
0000000000001cae         db  0x00 ; '.'
0000000000001caf         db  0x00 ; '.'
0000000000001cb0         db  0x00 ; '.'
0000000000001cb1         db  0x00 ; '.'
0000000000001cb2         db  0x00 ; '.'
0000000000001cb3         db  0x00 ; '.'
0000000000001cb4         db  0x00 ; '.'
0000000000001cb5         db  0x00 ; '.'
0000000000001cb6         db  0x00 ; '.'
0000000000001cb7         db  0x00 ; '.'
0000000000001cb8         db  0xf0 ; '.'
0000000000001cb9         db  0xbc ; '.'
0000000000001cba         db  0x21 ; '!'
0000000000001cbb         db  0x00 ; '.'
0000000000001cbc         db  0x00 ; '.'
0000000000001cbd         db  0x00 ; '.'
0000000000001cbe         db  0x00 ; '.'
0000000000001cbf         db  0x00 ; '.'
0000000000001cc0         db  0x07 ; '.'
0000000000001cc1         db  0x00 ; '.'
0000000000001cc2         db  0x00 ; '.'
0000000000001cc3         db  0x00 ; '.'
0000000000001cc4         db  0x19 ; '.'
0000000000001cc5         db  0x00 ; '.'
0000000000001cc6         db  0x00 ; '.'
0000000000001cc7         db  0x00 ; '.'
0000000000001cc8         db  0x00 ; '.'
0000000000001cc9         db  0x00 ; '.'
0000000000001cca         db  0x00 ; '.'
0000000000001ccb         db  0x00 ; '.'
0000000000001ccc         db  0x00 ; '.'
0000000000001ccd         db  0x00 ; '.'
0000000000001cce         db  0x00 ; '.'
0000000000001ccf         db  0x00 ; '.'
0000000000001cd0         db  0xf8 ; '.'
0000000000001cd1         db  0xbc ; '.'
0000000000001cd2         db  0x21 ; '!'
0000000000001cd3         db  0x00 ; '.'
0000000000001cd4         db  0x00 ; '.'
0000000000001cd5         db  0x00 ; '.'
0000000000001cd6         db  0x00 ; '.'
0000000000001cd7         db  0x00 ; '.'
0000000000001cd8         db  0x07 ; '.'
0000000000001cd9         db  0x00 ; '.'
0000000000001cda         db  0x00 ; '.'
0000000000001cdb         db  0x00 ; '.'
0000000000001cdc         db  0x1a ; '.'
0000000000001cdd         db  0x00 ; '.'
0000000000001cde         db  0x00 ; '.'
0000000000001cdf         db  0x00 ; '.'
0000000000001ce0         db  0x00 ; '.'
0000000000001ce1         db  0x00 ; '.'
0000000000001ce2         db  0x00 ; '.'
0000000000001ce3         db  0x00 ; '.'
0000000000001ce4         db  0x00 ; '.'
0000000000001ce5         db  0x00 ; '.'
0000000000001ce6         db  0x00 ; '.'
0000000000001ce7         db  0x00 ; '.'
0000000000001ce8         db  0x00 ; '.'
0000000000001ce9         db  0xbd ; '.'
0000000000001cea         db  0x21 ; '!'
0000000000001ceb         db  0x00 ; '.'
0000000000001cec         db  0x00 ; '.'
0000000000001ced         db  0x00 ; '.'
0000000000001cee         db  0x00 ; '.'
0000000000001cef         db  0x00 ; '.'
0000000000001cf0         db  0x07 ; '.'
0000000000001cf1         db  0x00 ; '.'
0000000000001cf2         db  0x00 ; '.'
0000000000001cf3         db  0x00 ; '.'
0000000000001cf4         db  0x1b ; '.'
0000000000001cf5         db  0x00 ; '.'
0000000000001cf6         db  0x00 ; '.'
0000000000001cf7         db  0x00 ; '.'
0000000000001cf8         db  0x00 ; '.'
0000000000001cf9         db  0x00 ; '.'
0000000000001cfa         db  0x00 ; '.'
0000000000001cfb         db  0x00 ; '.'
0000000000001cfc         db  0x00 ; '.'
0000000000001cfd         db  0x00 ; '.'
0000000000001cfe         db  0x00 ; '.'
0000000000001cff         db  0x00 ; '.'
0000000000001d00         db  0x08 ; '.'
0000000000001d01         db  0xbd ; '.'
0000000000001d02         db  0x21 ; '!'
0000000000001d03         db  0x00 ; '.'
0000000000001d04         db  0x00 ; '.'
0000000000001d05         db  0x00 ; '.'
0000000000001d06         db  0x00 ; '.'
0000000000001d07         db  0x00 ; '.'
0000000000001d08         db  0x07 ; '.'
0000000000001d09         db  0x00 ; '.'
0000000000001d0a         db  0x00 ; '.'
0000000000001d0b         db  0x00 ; '.'
0000000000001d0c         db  0x1c ; '.'
0000000000001d0d         db  0x00 ; '.'
0000000000001d0e         db  0x00 ; '.'
0000000000001d0f         db  0x00 ; '.'
0000000000001d10         db  0x00 ; '.'
0000000000001d11         db  0x00 ; '.'
0000000000001d12         db  0x00 ; '.'
0000000000001d13         db  0x00 ; '.'
0000000000001d14         db  0x00 ; '.'
0000000000001d15         db  0x00 ; '.'
0000000000001d16         db  0x00 ; '.'
0000000000001d17         db  0x00 ; '.'
0000000000001d18         db  0x10 ; '.'
0000000000001d19         db  0xbd ; '.'
0000000000001d1a         db  0x21 ; '!'
0000000000001d1b         db  0x00 ; '.'
0000000000001d1c         db  0x00 ; '.'
0000000000001d1d         db  0x00 ; '.'
0000000000001d1e         db  0x00 ; '.'
0000000000001d1f         db  0x00 ; '.'
0000000000001d20         db  0x07 ; '.'
0000000000001d21         db  0x00 ; '.'
0000000000001d22         db  0x00 ; '.'
0000000000001d23         db  0x00 ; '.'
0000000000001d24         db  0x1d ; '.'
0000000000001d25         db  0x00 ; '.'
0000000000001d26         db  0x00 ; '.'
0000000000001d27         db  0x00 ; '.'
0000000000001d28         db  0x00 ; '.'
0000000000001d29         db  0x00 ; '.'
0000000000001d2a         db  0x00 ; '.'
0000000000001d2b         db  0x00 ; '.'
0000000000001d2c         db  0x00 ; '.'
0000000000001d2d         db  0x00 ; '.'
0000000000001d2e         db  0x00 ; '.'
0000000000001d2f         db  0x00 ; '.'
0000000000001d30         db  0x18 ; '.'
0000000000001d31         db  0xbd ; '.'
0000000000001d32         db  0x21 ; '!'
0000000000001d33         db  0x00 ; '.'
0000000000001d34         db  0x00 ; '.'
0000000000001d35         db  0x00 ; '.'
0000000000001d36         db  0x00 ; '.'
0000000000001d37         db  0x00 ; '.'
0000000000001d38         db  0x07 ; '.'
0000000000001d39         db  0x00 ; '.'
0000000000001d3a         db  0x00 ; '.'
0000000000001d3b         db  0x00 ; '.'
0000000000001d3c         db  0x1e ; '.'
0000000000001d3d         db  0x00 ; '.'
0000000000001d3e         db  0x00 ; '.'
0000000000001d3f         db  0x00 ; '.'
0000000000001d40         db  0x00 ; '.'
0000000000001d41         db  0x00 ; '.'
0000000000001d42         db  0x00 ; '.'
0000000000001d43         db  0x00 ; '.'
0000000000001d44         db  0x00 ; '.'
0000000000001d45         db  0x00 ; '.'
0000000000001d46         db  0x00 ; '.'
0000000000001d47         db  0x00 ; '.'
0000000000001d48         db  0x20 ; ' '
0000000000001d49         db  0xbd ; '.'
0000000000001d4a         db  0x21 ; '!'
0000000000001d4b         db  0x00 ; '.'
0000000000001d4c         db  0x00 ; '.'
0000000000001d4d         db  0x00 ; '.'
0000000000001d4e         db  0x00 ; '.'
0000000000001d4f         db  0x00 ; '.'
0000000000001d50         db  0x07 ; '.'
0000000000001d51         db  0x00 ; '.'
0000000000001d52         db  0x00 ; '.'
0000000000001d53         db  0x00 ; '.'
0000000000001d54         db  0x1f ; '.'
0000000000001d55         db  0x00 ; '.'
0000000000001d56         db  0x00 ; '.'
0000000000001d57         db  0x00 ; '.'
0000000000001d58         db  0x00 ; '.'
0000000000001d59         db  0x00 ; '.'
0000000000001d5a         db  0x00 ; '.'
0000000000001d5b         db  0x00 ; '.'
0000000000001d5c         db  0x00 ; '.'
0000000000001d5d         db  0x00 ; '.'
0000000000001d5e         db  0x00 ; '.'
0000000000001d5f         db  0x00 ; '.'
0000000000001d60         db  0x28 ; '('
0000000000001d61         db  0xbd ; '.'
0000000000001d62         db  0x21 ; '!'
0000000000001d63         db  0x00 ; '.'
0000000000001d64         db  0x00 ; '.'
0000000000001d65         db  0x00 ; '.'
0000000000001d66         db  0x00 ; '.'
0000000000001d67         db  0x00 ; '.'
0000000000001d68         db  0x07 ; '.'
0000000000001d69         db  0x00 ; '.'
0000000000001d6a         db  0x00 ; '.'
0000000000001d6b         db  0x00 ; '.'
0000000000001d6c         db  0x20 ; ' '
0000000000001d6d         db  0x00 ; '.'
0000000000001d6e         db  0x00 ; '.'
0000000000001d6f         db  0x00 ; '.'
0000000000001d70         db  0x00 ; '.'
0000000000001d71         db  0x00 ; '.'
0000000000001d72         db  0x00 ; '.'
0000000000001d73         db  0x00 ; '.'
0000000000001d74         db  0x00 ; '.'
0000000000001d75         db  0x00 ; '.'
0000000000001d76         db  0x00 ; '.'
0000000000001d77         db  0x00 ; '.'
0000000000001d78         db  0x30 ; '0'
0000000000001d79         db  0xbd ; '.'
0000000000001d7a         db  0x21 ; '!'
0000000000001d7b         db  0x00 ; '.'
0000000000001d7c         db  0x00 ; '.'
0000000000001d7d         db  0x00 ; '.'
0000000000001d7e         db  0x00 ; '.'
0000000000001d7f         db  0x00 ; '.'
0000000000001d80         db  0x07 ; '.'
0000000000001d81         db  0x00 ; '.'
0000000000001d82         db  0x00 ; '.'
0000000000001d83         db  0x00 ; '.'
0000000000001d84         db  0x21 ; '!'
0000000000001d85         db  0x00 ; '.'
0000000000001d86         db  0x00 ; '.'
0000000000001d87         db  0x00 ; '.'
0000000000001d88         db  0x00 ; '.'
0000000000001d89         db  0x00 ; '.'
0000000000001d8a         db  0x00 ; '.'
0000000000001d8b         db  0x00 ; '.'
0000000000001d8c         db  0x00 ; '.'
0000000000001d8d         db  0x00 ; '.'
0000000000001d8e         db  0x00 ; '.'
0000000000001d8f         db  0x00 ; '.'
0000000000001d90         db  0x38 ; '8'
0000000000001d91         db  0xbd ; '.'
0000000000001d92         db  0x21 ; '!'
0000000000001d93         db  0x00 ; '.'
0000000000001d94         db  0x00 ; '.'
0000000000001d95         db  0x00 ; '.'
0000000000001d96         db  0x00 ; '.'
0000000000001d97         db  0x00 ; '.'
0000000000001d98         db  0x07 ; '.'
0000000000001d99         db  0x00 ; '.'
0000000000001d9a         db  0x00 ; '.'
0000000000001d9b         db  0x00 ; '.'
0000000000001d9c         db  0x22 ; '"'
0000000000001d9d         db  0x00 ; '.'
0000000000001d9e         db  0x00 ; '.'
0000000000001d9f         db  0x00 ; '.'
0000000000001da0         db  0x00 ; '.'
0000000000001da1         db  0x00 ; '.'
0000000000001da2         db  0x00 ; '.'
0000000000001da3         db  0x00 ; '.'
0000000000001da4         db  0x00 ; '.'
0000000000001da5         db  0x00 ; '.'
0000000000001da6         db  0x00 ; '.'
0000000000001da7         db  0x00 ; '.'
0000000000001da8         db  0x40 ; '@'
0000000000001da9         db  0xbd ; '.'
0000000000001daa         db  0x21 ; '!'
0000000000001dab         db  0x00 ; '.'
0000000000001dac         db  0x00 ; '.'
0000000000001dad         db  0x00 ; '.'
0000000000001dae         db  0x00 ; '.'
0000000000001daf         db  0x00 ; '.'
0000000000001db0         db  0x07 ; '.'
0000000000001db1         db  0x00 ; '.'
0000000000001db2         db  0x00 ; '.'
0000000000001db3         db  0x00 ; '.'
0000000000001db4         db  0x23 ; '#'
0000000000001db5         db  0x00 ; '.'
0000000000001db6         db  0x00 ; '.'
0000000000001db7         db  0x00 ; '.'
0000000000001db8         db  0x00 ; '.'
0000000000001db9         db  0x00 ; '.'
0000000000001dba         db  0x00 ; '.'
0000000000001dbb         db  0x00 ; '.'
0000000000001dbc         db  0x00 ; '.'
0000000000001dbd         db  0x00 ; '.'
0000000000001dbe         db  0x00 ; '.'
0000000000001dbf         db  0x00 ; '.'
0000000000001dc0         db  0x48 ; 'H'
0000000000001dc1         db  0xbd ; '.'
0000000000001dc2         db  0x21 ; '!'
0000000000001dc3         db  0x00 ; '.'
0000000000001dc4         db  0x00 ; '.'
0000000000001dc5         db  0x00 ; '.'
0000000000001dc6         db  0x00 ; '.'
0000000000001dc7         db  0x00 ; '.'
0000000000001dc8         db  0x07 ; '.'
0000000000001dc9         db  0x00 ; '.'
0000000000001dca         db  0x00 ; '.'
0000000000001dcb         db  0x00 ; '.'
0000000000001dcc         db  0x24 ; '$'
0000000000001dcd         db  0x00 ; '.'
0000000000001dce         db  0x00 ; '.'
0000000000001dcf         db  0x00 ; '.'
0000000000001dd0         db  0x00 ; '.'
0000000000001dd1         db  0x00 ; '.'
0000000000001dd2         db  0x00 ; '.'
0000000000001dd3         db  0x00 ; '.'
0000000000001dd4         db  0x00 ; '.'
0000000000001dd5         db  0x00 ; '.'
0000000000001dd6         db  0x00 ; '.'
0000000000001dd7         db  0x00 ; '.'
0000000000001dd8         db  0x50 ; 'P'
0000000000001dd9         db  0xbd ; '.'
0000000000001dda         db  0x21 ; '!'
0000000000001ddb         db  0x00 ; '.'
0000000000001ddc         db  0x00 ; '.'
0000000000001ddd         db  0x00 ; '.'
0000000000001dde         db  0x00 ; '.'
0000000000001ddf         db  0x00 ; '.'
0000000000001de0         db  0x07 ; '.'
0000000000001de1         db  0x00 ; '.'
0000000000001de2         db  0x00 ; '.'
0000000000001de3         db  0x00 ; '.'
0000000000001de4         db  0x25 ; '%'
0000000000001de5         db  0x00 ; '.'
0000000000001de6         db  0x00 ; '.'
0000000000001de7         db  0x00 ; '.'
0000000000001de8         db  0x00 ; '.'
0000000000001de9         db  0x00 ; '.'
0000000000001dea         db  0x00 ; '.'
0000000000001deb         db  0x00 ; '.'
0000000000001dec         db  0x00 ; '.'
0000000000001ded         db  0x00 ; '.'
0000000000001dee         db  0x00 ; '.'
0000000000001def         db  0x00 ; '.'
0000000000001df0         db  0x58 ; 'X'
0000000000001df1         db  0xbd ; '.'
0000000000001df2         db  0x21 ; '!'
0000000000001df3         db  0x00 ; '.'
0000000000001df4         db  0x00 ; '.'
0000000000001df5         db  0x00 ; '.'
0000000000001df6         db  0x00 ; '.'
0000000000001df7         db  0x00 ; '.'
0000000000001df8         db  0x07 ; '.'
0000000000001df9         db  0x00 ; '.'
0000000000001dfa         db  0x00 ; '.'
0000000000001dfb         db  0x00 ; '.'
0000000000001dfc         db  0x26 ; '&'
0000000000001dfd         db  0x00 ; '.'
0000000000001dfe         db  0x00 ; '.'
0000000000001dff         db  0x00 ; '.'
0000000000001e00         db  0x00 ; '.'
0000000000001e01         db  0x00 ; '.'
0000000000001e02         db  0x00 ; '.'
0000000000001e03         db  0x00 ; '.'
0000000000001e04         db  0x00 ; '.'
0000000000001e05         db  0x00 ; '.'
0000000000001e06         db  0x00 ; '.'
0000000000001e07         db  0x00 ; '.'
0000000000001e08         db  0x60 ; '`'
0000000000001e09         db  0xbd ; '.'
0000000000001e0a         db  0x21 ; '!'
0000000000001e0b         db  0x00 ; '.'
0000000000001e0c         db  0x00 ; '.'
0000000000001e0d         db  0x00 ; '.'
0000000000001e0e         db  0x00 ; '.'
0000000000001e0f         db  0x00 ; '.'
0000000000001e10         db  0x07 ; '.'
0000000000001e11         db  0x00 ; '.'
0000000000001e12         db  0x00 ; '.'
0000000000001e13         db  0x00 ; '.'
0000000000001e14         db  0x27 ; '''
0000000000001e15         db  0x00 ; '.'
0000000000001e16         db  0x00 ; '.'
0000000000001e17         db  0x00 ; '.'
0000000000001e18         db  0x00 ; '.'
0000000000001e19         db  0x00 ; '.'
0000000000001e1a         db  0x00 ; '.'
0000000000001e1b         db  0x00 ; '.'
0000000000001e1c         db  0x00 ; '.'
0000000000001e1d         db  0x00 ; '.'
0000000000001e1e         db  0x00 ; '.'
0000000000001e1f         db  0x00 ; '.'
0000000000001e20         db  0x68 ; 'h'
0000000000001e21         db  0xbd ; '.'
0000000000001e22         db  0x21 ; '!'
0000000000001e23         db  0x00 ; '.'
0000000000001e24         db  0x00 ; '.'
0000000000001e25         db  0x00 ; '.'
0000000000001e26         db  0x00 ; '.'
0000000000001e27         db  0x00 ; '.'
0000000000001e28         db  0x07 ; '.'
0000000000001e29         db  0x00 ; '.'
0000000000001e2a         db  0x00 ; '.'
0000000000001e2b         db  0x00 ; '.'
0000000000001e2c         db  0x28 ; '('
0000000000001e2d         db  0x00 ; '.'
0000000000001e2e         db  0x00 ; '.'
0000000000001e2f         db  0x00 ; '.'
0000000000001e30         db  0x00 ; '.'
0000000000001e31         db  0x00 ; '.'
0000000000001e32         db  0x00 ; '.'
0000000000001e33         db  0x00 ; '.'
0000000000001e34         db  0x00 ; '.'
0000000000001e35         db  0x00 ; '.'
0000000000001e36         db  0x00 ; '.'
0000000000001e37         db  0x00 ; '.'
0000000000001e38         db  0x70 ; 'p'
0000000000001e39         db  0xbd ; '.'
0000000000001e3a         db  0x21 ; '!'
0000000000001e3b         db  0x00 ; '.'
0000000000001e3c         db  0x00 ; '.'
0000000000001e3d         db  0x00 ; '.'
0000000000001e3e         db  0x00 ; '.'
0000000000001e3f         db  0x00 ; '.'
0000000000001e40         db  0x07 ; '.'
0000000000001e41         db  0x00 ; '.'
0000000000001e42         db  0x00 ; '.'
0000000000001e43         db  0x00 ; '.'
0000000000001e44         db  0x29 ; ')'
0000000000001e45         db  0x00 ; '.'
0000000000001e46         db  0x00 ; '.'
0000000000001e47         db  0x00 ; '.'
0000000000001e48         db  0x00 ; '.'
0000000000001e49         db  0x00 ; '.'
0000000000001e4a         db  0x00 ; '.'
0000000000001e4b         db  0x00 ; '.'
0000000000001e4c         db  0x00 ; '.'
0000000000001e4d         db  0x00 ; '.'
0000000000001e4e         db  0x00 ; '.'
0000000000001e4f         db  0x00 ; '.'
0000000000001e50         db  0x78 ; 'x'
0000000000001e51         db  0xbd ; '.'
0000000000001e52         db  0x21 ; '!'
0000000000001e53         db  0x00 ; '.'
0000000000001e54         db  0x00 ; '.'
0000000000001e55         db  0x00 ; '.'
0000000000001e56         db  0x00 ; '.'
0000000000001e57         db  0x00 ; '.'
0000000000001e58         db  0x07 ; '.'
0000000000001e59         db  0x00 ; '.'
0000000000001e5a         db  0x00 ; '.'
0000000000001e5b         db  0x00 ; '.'
0000000000001e5c         db  0x2a ; '*'
0000000000001e5d         db  0x00 ; '.'
0000000000001e5e         db  0x00 ; '.'
0000000000001e5f         db  0x00 ; '.'
0000000000001e60         db  0x00 ; '.'
0000000000001e61         db  0x00 ; '.'
0000000000001e62         db  0x00 ; '.'
0000000000001e63         db  0x00 ; '.'
0000000000001e64         db  0x00 ; '.'
0000000000001e65         db  0x00 ; '.'
0000000000001e66         db  0x00 ; '.'
0000000000001e67         db  0x00 ; '.'
0000000000001e68         db  0x80 ; '.'
0000000000001e69         db  0xbd ; '.'
0000000000001e6a         db  0x21 ; '!'
0000000000001e6b         db  0x00 ; '.'
0000000000001e6c         db  0x00 ; '.'
0000000000001e6d         db  0x00 ; '.'
0000000000001e6e         db  0x00 ; '.'
0000000000001e6f         db  0x00 ; '.'
0000000000001e70         db  0x07 ; '.'
0000000000001e71         db  0x00 ; '.'
0000000000001e72         db  0x00 ; '.'
0000000000001e73         db  0x00 ; '.'
0000000000001e74         db  0x2b ; '+'
0000000000001e75         db  0x00 ; '.'
0000000000001e76         db  0x00 ; '.'
0000000000001e77         db  0x00 ; '.'
0000000000001e78         db  0x00 ; '.'
0000000000001e79         db  0x00 ; '.'
0000000000001e7a         db  0x00 ; '.'
0000000000001e7b         db  0x00 ; '.'
0000000000001e7c         db  0x00 ; '.'
0000000000001e7d         db  0x00 ; '.'
0000000000001e7e         db  0x00 ; '.'
0000000000001e7f         db  0x00 ; '.'
0000000000001e80         db  0x88 ; '.'
0000000000001e81         db  0xbd ; '.'
0000000000001e82         db  0x21 ; '!'
0000000000001e83         db  0x00 ; '.'
0000000000001e84         db  0x00 ; '.'
0000000000001e85         db  0x00 ; '.'
0000000000001e86         db  0x00 ; '.'
0000000000001e87         db  0x00 ; '.'
0000000000001e88         db  0x07 ; '.'
0000000000001e89         db  0x00 ; '.'
0000000000001e8a         db  0x00 ; '.'
0000000000001e8b         db  0x00 ; '.'
0000000000001e8c         db  0x2c ; ','
0000000000001e8d         db  0x00 ; '.'
0000000000001e8e         db  0x00 ; '.'
0000000000001e8f         db  0x00 ; '.'
0000000000001e90         db  0x00 ; '.'
0000000000001e91         db  0x00 ; '.'
0000000000001e92         db  0x00 ; '.'
0000000000001e93         db  0x00 ; '.'
0000000000001e94         db  0x00 ; '.'
0000000000001e95         db  0x00 ; '.'
0000000000001e96         db  0x00 ; '.'
0000000000001e97         db  0x00 ; '.'
0000000000001e98         db  0x90 ; '.'
0000000000001e99         db  0xbd ; '.'
0000000000001e9a         db  0x21 ; '!'
0000000000001e9b         db  0x00 ; '.'
0000000000001e9c         db  0x00 ; '.'
0000000000001e9d         db  0x00 ; '.'
0000000000001e9e         db  0x00 ; '.'
0000000000001e9f         db  0x00 ; '.'
0000000000001ea0         db  0x07 ; '.'
0000000000001ea1         db  0x00 ; '.'
0000000000001ea2         db  0x00 ; '.'
0000000000001ea3         db  0x00 ; '.'
0000000000001ea4         db  0x2d ; '-'
0000000000001ea5         db  0x00 ; '.'
0000000000001ea6         db  0x00 ; '.'
0000000000001ea7         db  0x00 ; '.'
0000000000001ea8         db  0x00 ; '.'
0000000000001ea9         db  0x00 ; '.'
0000000000001eaa         db  0x00 ; '.'
0000000000001eab         db  0x00 ; '.'
0000000000001eac         db  0x00 ; '.'
0000000000001ead         db  0x00 ; '.'
0000000000001eae         db  0x00 ; '.'
0000000000001eaf         db  0x00 ; '.'
0000000000001eb0         db  0x98 ; '.'
0000000000001eb1         db  0xbd ; '.'
0000000000001eb2         db  0x21 ; '!'
0000000000001eb3         db  0x00 ; '.'
0000000000001eb4         db  0x00 ; '.'
0000000000001eb5         db  0x00 ; '.'
0000000000001eb6         db  0x00 ; '.'
0000000000001eb7         db  0x00 ; '.'
0000000000001eb8         db  0x07 ; '.'
0000000000001eb9         db  0x00 ; '.'
0000000000001eba         db  0x00 ; '.'
0000000000001ebb         db  0x00 ; '.'
0000000000001ebc         db  0x2e ; '.'
0000000000001ebd         db  0x00 ; '.'
0000000000001ebe         db  0x00 ; '.'
0000000000001ebf         db  0x00 ; '.'
0000000000001ec0         db  0x00 ; '.'
0000000000001ec1         db  0x00 ; '.'
0000000000001ec2         db  0x00 ; '.'
0000000000001ec3         db  0x00 ; '.'
0000000000001ec4         db  0x00 ; '.'
0000000000001ec5         db  0x00 ; '.'
0000000000001ec6         db  0x00 ; '.'
0000000000001ec7         db  0x00 ; '.'
0000000000001ec8         db  0xa0 ; '.'
0000000000001ec9         db  0xbd ; '.'
0000000000001eca         db  0x21 ; '!'
0000000000001ecb         db  0x00 ; '.'
0000000000001ecc         db  0x00 ; '.'
0000000000001ecd         db  0x00 ; '.'
0000000000001ece         db  0x00 ; '.'
0000000000001ecf         db  0x00 ; '.'
0000000000001ed0         db  0x07 ; '.'
0000000000001ed1         db  0x00 ; '.'
0000000000001ed2         db  0x00 ; '.'
0000000000001ed3         db  0x00 ; '.'
0000000000001ed4         db  0x2f ; '/'
0000000000001ed5         db  0x00 ; '.'
0000000000001ed6         db  0x00 ; '.'
0000000000001ed7         db  0x00 ; '.'
0000000000001ed8         db  0x00 ; '.'
0000000000001ed9         db  0x00 ; '.'
0000000000001eda         db  0x00 ; '.'
0000000000001edb         db  0x00 ; '.'
0000000000001edc         db  0x00 ; '.'
0000000000001edd         db  0x00 ; '.'
0000000000001ede         db  0x00 ; '.'
0000000000001edf         db  0x00 ; '.'
0000000000001ee0         db  0xa8 ; '.'
0000000000001ee1         db  0xbd ; '.'
0000000000001ee2         db  0x21 ; '!'
0000000000001ee3         db  0x00 ; '.'
0000000000001ee4         db  0x00 ; '.'
0000000000001ee5         db  0x00 ; '.'
0000000000001ee6         db  0x00 ; '.'
0000000000001ee7         db  0x00 ; '.'
0000000000001ee8         db  0x07 ; '.'
0000000000001ee9         db  0x00 ; '.'
0000000000001eea         db  0x00 ; '.'
0000000000001eeb         db  0x00 ; '.'
0000000000001eec         db  0x30 ; '0'
0000000000001eed         db  0x00 ; '.'
0000000000001eee         db  0x00 ; '.'
0000000000001eef         db  0x00 ; '.'
0000000000001ef0         db  0x00 ; '.'
0000000000001ef1         db  0x00 ; '.'
0000000000001ef2         db  0x00 ; '.'
0000000000001ef3         db  0x00 ; '.'
0000000000001ef4         db  0x00 ; '.'
0000000000001ef5         db  0x00 ; '.'
0000000000001ef6         db  0x00 ; '.'
0000000000001ef7         db  0x00 ; '.'
0000000000001ef8         db  0xb0 ; '.'
0000000000001ef9         db  0xbd ; '.'
0000000000001efa         db  0x21 ; '!'
0000000000001efb         db  0x00 ; '.'
0000000000001efc         db  0x00 ; '.'
0000000000001efd         db  0x00 ; '.'
0000000000001efe         db  0x00 ; '.'
0000000000001eff         db  0x00 ; '.'
0000000000001f00         db  0x07 ; '.'
0000000000001f01         db  0x00 ; '.'
0000000000001f02         db  0x00 ; '.'
0000000000001f03         db  0x00 ; '.'
0000000000001f04         db  0x31 ; '1'
0000000000001f05         db  0x00 ; '.'
0000000000001f06         db  0x00 ; '.'
0000000000001f07         db  0x00 ; '.'
0000000000001f08         db  0x00 ; '.'
0000000000001f09         db  0x00 ; '.'
0000000000001f0a         db  0x00 ; '.'
0000000000001f0b         db  0x00 ; '.'
0000000000001f0c         db  0x00 ; '.'
0000000000001f0d         db  0x00 ; '.'
0000000000001f0e         db  0x00 ; '.'
0000000000001f0f         db  0x00 ; '.'
0000000000001f10         db  0xb8 ; '.'
0000000000001f11         db  0xbd ; '.'
0000000000001f12         db  0x21 ; '!'
0000000000001f13         db  0x00 ; '.'
0000000000001f14         db  0x00 ; '.'
0000000000001f15         db  0x00 ; '.'
0000000000001f16         db  0x00 ; '.'
0000000000001f17         db  0x00 ; '.'
0000000000001f18         db  0x07 ; '.'
0000000000001f19         db  0x00 ; '.'
0000000000001f1a         db  0x00 ; '.'
0000000000001f1b         db  0x00 ; '.'
0000000000001f1c         db  0x32 ; '2'
0000000000001f1d         db  0x00 ; '.'
0000000000001f1e         db  0x00 ; '.'
0000000000001f1f         db  0x00 ; '.'
0000000000001f20         db  0x00 ; '.'
0000000000001f21         db  0x00 ; '.'
0000000000001f22         db  0x00 ; '.'
0000000000001f23         db  0x00 ; '.'
0000000000001f24         db  0x00 ; '.'
0000000000001f25         db  0x00 ; '.'
0000000000001f26         db  0x00 ; '.'
0000000000001f27         db  0x00 ; '.'
0000000000001f28         db  0xc0 ; '.'
0000000000001f29         db  0xbd ; '.'
0000000000001f2a         db  0x21 ; '!'
0000000000001f2b         db  0x00 ; '.'
0000000000001f2c         db  0x00 ; '.'
0000000000001f2d         db  0x00 ; '.'
0000000000001f2e         db  0x00 ; '.'
0000000000001f2f         db  0x00 ; '.'
0000000000001f30         db  0x07 ; '.'
0000000000001f31         db  0x00 ; '.'
0000000000001f32         db  0x00 ; '.'
0000000000001f33         db  0x00 ; '.'
0000000000001f34         db  0x33 ; '3'
0000000000001f35         db  0x00 ; '.'
0000000000001f36         db  0x00 ; '.'
0000000000001f37         db  0x00 ; '.'
0000000000001f38         db  0x00 ; '.'
0000000000001f39         db  0x00 ; '.'
0000000000001f3a         db  0x00 ; '.'
0000000000001f3b         db  0x00 ; '.'
0000000000001f3c         db  0x00 ; '.'
0000000000001f3d         db  0x00 ; '.'
0000000000001f3e         db  0x00 ; '.'
0000000000001f3f         db  0x00 ; '.'
0000000000001f40         db  0xc8 ; '.'
0000000000001f41         db  0xbd ; '.'
0000000000001f42         db  0x21 ; '!'
0000000000001f43         db  0x00 ; '.'
0000000000001f44         db  0x00 ; '.'
0000000000001f45         db  0x00 ; '.'
0000000000001f46         db  0x00 ; '.'
0000000000001f47         db  0x00 ; '.'
0000000000001f48         db  0x07 ; '.'
0000000000001f49         db  0x00 ; '.'
0000000000001f4a         db  0x00 ; '.'
0000000000001f4b         db  0x00 ; '.'
0000000000001f4c         db  0x34 ; '4'
0000000000001f4d         db  0x00 ; '.'
0000000000001f4e         db  0x00 ; '.'
0000000000001f4f         db  0x00 ; '.'
0000000000001f50         db  0x00 ; '.'
0000000000001f51         db  0x00 ; '.'
0000000000001f52         db  0x00 ; '.'
0000000000001f53         db  0x00 ; '.'
0000000000001f54         db  0x00 ; '.'
0000000000001f55         db  0x00 ; '.'
0000000000001f56         db  0x00 ; '.'
0000000000001f57         db  0x00 ; '.'
0000000000001f58         db  0xd0 ; '.'
0000000000001f59         db  0xbd ; '.'
0000000000001f5a         db  0x21 ; '!'
0000000000001f5b         db  0x00 ; '.'
0000000000001f5c         db  0x00 ; '.'
0000000000001f5d         db  0x00 ; '.'
0000000000001f5e         db  0x00 ; '.'
0000000000001f5f         db  0x00 ; '.'
0000000000001f60         db  0x07 ; '.'
0000000000001f61         db  0x00 ; '.'
0000000000001f62         db  0x00 ; '.'
0000000000001f63         db  0x00 ; '.'
0000000000001f64         db  0x35 ; '5'
0000000000001f65         db  0x00 ; '.'
0000000000001f66         db  0x00 ; '.'
0000000000001f67         db  0x00 ; '.'
0000000000001f68         db  0x00 ; '.'
0000000000001f69         db  0x00 ; '.'
0000000000001f6a         db  0x00 ; '.'
0000000000001f6b         db  0x00 ; '.'
0000000000001f6c         db  0x00 ; '.'
0000000000001f6d         db  0x00 ; '.'
0000000000001f6e         db  0x00 ; '.'
0000000000001f6f         db  0x00 ; '.'
0000000000001f70         db  0xd8 ; '.'
0000000000001f71         db  0xbd ; '.'
0000000000001f72         db  0x21 ; '!'
0000000000001f73         db  0x00 ; '.'
0000000000001f74         db  0x00 ; '.'
0000000000001f75         db  0x00 ; '.'
0000000000001f76         db  0x00 ; '.'
0000000000001f77         db  0x00 ; '.'
0000000000001f78         db  0x07 ; '.'
0000000000001f79         db  0x00 ; '.'
0000000000001f7a         db  0x00 ; '.'
0000000000001f7b         db  0x00 ; '.'
0000000000001f7c         db  0x36 ; '6'
0000000000001f7d         db  0x00 ; '.'
0000000000001f7e         db  0x00 ; '.'
0000000000001f7f         db  0x00 ; '.'
0000000000001f80         db  0x00 ; '.'
0000000000001f81         db  0x00 ; '.'
0000000000001f82         db  0x00 ; '.'
0000000000001f83         db  0x00 ; '.'
0000000000001f84         db  0x00 ; '.'
0000000000001f85         db  0x00 ; '.'
0000000000001f86         db  0x00 ; '.'
0000000000001f87         db  0x00 ; '.'
0000000000001f88         db  0xe0 ; '.'
0000000000001f89         db  0xbd ; '.'
0000000000001f8a         db  0x21 ; '!'
0000000000001f8b         db  0x00 ; '.'
0000000000001f8c         db  0x00 ; '.'
0000000000001f8d         db  0x00 ; '.'
0000000000001f8e         db  0x00 ; '.'
0000000000001f8f         db  0x00 ; '.'
0000000000001f90         db  0x07 ; '.'
0000000000001f91         db  0x00 ; '.'
0000000000001f92         db  0x00 ; '.'
0000000000001f93         db  0x00 ; '.'
0000000000001f94         db  0x37 ; '7'
0000000000001f95         db  0x00 ; '.'
0000000000001f96         db  0x00 ; '.'
0000000000001f97         db  0x00 ; '.'
0000000000001f98         db  0x00 ; '.'
0000000000001f99         db  0x00 ; '.'
0000000000001f9a         db  0x00 ; '.'
0000000000001f9b         db  0x00 ; '.'
0000000000001f9c         db  0x00 ; '.'
0000000000001f9d         db  0x00 ; '.'
0000000000001f9e         db  0x00 ; '.'
0000000000001f9f         db  0x00 ; '.'
0000000000001fa0         db  0xe8 ; '.'
0000000000001fa1         db  0xbd ; '.'
0000000000001fa2         db  0x21 ; '!'
0000000000001fa3         db  0x00 ; '.'
0000000000001fa4         db  0x00 ; '.'
0000000000001fa5         db  0x00 ; '.'
0000000000001fa6         db  0x00 ; '.'
0000000000001fa7         db  0x00 ; '.'
0000000000001fa8         db  0x07 ; '.'
0000000000001fa9         db  0x00 ; '.'
0000000000001faa         db  0x00 ; '.'
0000000000001fab         db  0x00 ; '.'
0000000000001fac         db  0x38 ; '8'
0000000000001fad         db  0x00 ; '.'
0000000000001fae         db  0x00 ; '.'
0000000000001faf         db  0x00 ; '.'
0000000000001fb0         db  0x00 ; '.'
0000000000001fb1         db  0x00 ; '.'
0000000000001fb2         db  0x00 ; '.'
0000000000001fb3         db  0x00 ; '.'
0000000000001fb4         db  0x00 ; '.'
0000000000001fb5         db  0x00 ; '.'
0000000000001fb6         db  0x00 ; '.'
0000000000001fb7         db  0x00 ; '.'
0000000000001fb8         db  0xf0 ; '.'
0000000000001fb9         db  0xbd ; '.'
0000000000001fba         db  0x21 ; '!'
0000000000001fbb         db  0x00 ; '.'
0000000000001fbc         db  0x00 ; '.'
0000000000001fbd         db  0x00 ; '.'
0000000000001fbe         db  0x00 ; '.'
0000000000001fbf         db  0x00 ; '.'
0000000000001fc0         db  0x07 ; '.'
0000000000001fc1         db  0x00 ; '.'
0000000000001fc2         db  0x00 ; '.'
0000000000001fc3         db  0x00 ; '.'
0000000000001fc4         db  0x3a ; ':'
0000000000001fc5         db  0x00 ; '.'
0000000000001fc6         db  0x00 ; '.'
0000000000001fc7         db  0x00 ; '.'
0000000000001fc8         db  0x00 ; '.'
0000000000001fc9         db  0x00 ; '.'
0000000000001fca         db  0x00 ; '.'
0000000000001fcb         db  0x00 ; '.'
0000000000001fcc         db  0x00 ; '.'
0000000000001fcd         db  0x00 ; '.'
0000000000001fce         db  0x00 ; '.'
0000000000001fcf         db  0x00 ; '.'
0000000000001fd0         db  0xf8 ; '.'
0000000000001fd1         db  0xbd ; '.'
0000000000001fd2         db  0x21 ; '!'
0000000000001fd3         db  0x00 ; '.'
0000000000001fd4         db  0x00 ; '.'
0000000000001fd5         db  0x00 ; '.'
0000000000001fd6         db  0x00 ; '.'
0000000000001fd7         db  0x00 ; '.'
0000000000001fd8         db  0x07 ; '.'
0000000000001fd9         db  0x00 ; '.'
0000000000001fda         db  0x00 ; '.'
0000000000001fdb         db  0x00 ; '.'
0000000000001fdc         db  0x3b ; ';'
0000000000001fdd         db  0x00 ; '.'
0000000000001fde         db  0x00 ; '.'
0000000000001fdf         db  0x00 ; '.'
0000000000001fe0         db  0x00 ; '.'
0000000000001fe1         db  0x00 ; '.'
0000000000001fe2         db  0x00 ; '.'
0000000000001fe3         db  0x00 ; '.'
0000000000001fe4         db  0x00 ; '.'
0000000000001fe5         db  0x00 ; '.'
0000000000001fe6         db  0x00 ; '.'
0000000000001fe7         db  0x00 ; '.'
0000000000001fe8         db  0x00 ; '.'
0000000000001fe9         db  0xbe ; '.'
0000000000001fea         db  0x21 ; '!'
0000000000001feb         db  0x00 ; '.'
0000000000001fec         db  0x00 ; '.'
0000000000001fed         db  0x00 ; '.'
0000000000001fee         db  0x00 ; '.'
0000000000001fef         db  0x00 ; '.'
0000000000001ff0         db  0x07 ; '.'
0000000000001ff1         db  0x00 ; '.'
0000000000001ff2         db  0x00 ; '.'
0000000000001ff3         db  0x00 ; '.'
0000000000001ff4         db  0x3c ; '<'
0000000000001ff5         db  0x00 ; '.'
0000000000001ff6         db  0x00 ; '.'
0000000000001ff7         db  0x00 ; '.'
0000000000001ff8         db  0x00 ; '.'
0000000000001ff9         db  0x00 ; '.'
0000000000001ffa         db  0x00 ; '.'
0000000000001ffb         db  0x00 ; '.'
0000000000001ffc         db  0x00 ; '.'
0000000000001ffd         db  0x00 ; '.'
0000000000001ffe         db  0x00 ; '.'
0000000000001fff         db  0x00 ; '.'
0000000000002000         db  0x08 ; '.'                                         ; DATA XREF=copy_internal+6333, buffer_lcm+11, file_type+49, strmode+47, fts_build+1680, fts_build+2268, fts_build+2460, rpl_fts_read+275, rpl_fts_read+1148, rpl_fts_read+1321, rpl_fts_read+1696
0000000000002001         db  0xbe ; '.'
0000000000002002         db  0x21 ; '!'
0000000000002003         db  0x00 ; '.'
0000000000002004         db  0x00 ; '.'
0000000000002005         db  0x00 ; '.'
0000000000002006         db  0x00 ; '.'
0000000000002007         db  0x00 ; '.'
0000000000002008         db  0x07 ; '.'
0000000000002009         db  0x00 ; '.'
000000000000200a         db  0x00 ; '.'
000000000000200b         db  0x00 ; '.'
000000000000200c         db  0x3d ; '='
000000000000200d         db  0x00 ; '.'
000000000000200e         db  0x00 ; '.'
000000000000200f         db  0x00 ; '.'
0000000000002010         db  0x00 ; '.'
0000000000002011         db  0x00 ; '.'
0000000000002012         db  0x00 ; '.'
0000000000002013         db  0x00 ; '.'
0000000000002014         db  0x00 ; '.'
0000000000002015         db  0x00 ; '.'
0000000000002016         db  0x00 ; '.'
0000000000002017         db  0x00 ; '.'
0000000000002018         db  0x10 ; '.'
0000000000002019         db  0xbe ; '.'
000000000000201a         db  0x21 ; '!'
000000000000201b         db  0x00 ; '.'
000000000000201c         db  0x00 ; '.'
000000000000201d         db  0x00 ; '.'
000000000000201e         db  0x00 ; '.'
000000000000201f         db  0x00 ; '.'
0000000000002020         db  0x07 ; '.'
0000000000002021         db  0x00 ; '.'
0000000000002022         db  0x00 ; '.'
0000000000002023         db  0x00 ; '.'
0000000000002024         db  0x3e ; '>'
0000000000002025         db  0x00 ; '.'
0000000000002026         db  0x00 ; '.'
0000000000002027         db  0x00 ; '.'
0000000000002028         db  0x00 ; '.'
0000000000002029         db  0x00 ; '.'
000000000000202a         db  0x00 ; '.'
000000000000202b         db  0x00 ; '.'
000000000000202c         db  0x00 ; '.'
000000000000202d         db  0x00 ; '.'
000000000000202e         db  0x00 ; '.'
000000000000202f         db  0x00 ; '.'
0000000000002030         db  0x18 ; '.'
0000000000002031         db  0xbe ; '.'
0000000000002032         db  0x21 ; '!'
0000000000002033         db  0x00 ; '.'
0000000000002034         db  0x00 ; '.'
0000000000002035         db  0x00 ; '.'
0000000000002036         db  0x00 ; '.'
0000000000002037         db  0x00 ; '.'
0000000000002038         db  0x07 ; '.'
0000000000002039         db  0x00 ; '.'
000000000000203a         db  0x00 ; '.'
000000000000203b         db  0x00 ; '.'
000000000000203c         db  0x3f ; '?'
000000000000203d         db  0x00 ; '.'
000000000000203e         db  0x00 ; '.'
000000000000203f         db  0x00 ; '.'
0000000000002040         db  0x00 ; '.'
0000000000002041         db  0x00 ; '.'
0000000000002042         db  0x00 ; '.'
0000000000002043         db  0x00 ; '.'
0000000000002044         db  0x00 ; '.'
0000000000002045         db  0x00 ; '.'
0000000000002046         db  0x00 ; '.'
0000000000002047         db  0x00 ; '.'
0000000000002048         db  0x20 ; ' '
0000000000002049         db  0xbe ; '.'
000000000000204a         db  0x21 ; '!'
000000000000204b         db  0x00 ; '.'
000000000000204c         db  0x00 ; '.'
000000000000204d         db  0x00 ; '.'
000000000000204e         db  0x00 ; '.'
000000000000204f         db  0x00 ; '.'
0000000000002050         db  0x07 ; '.'
0000000000002051         db  0x00 ; '.'
0000000000002052         db  0x00 ; '.'
0000000000002053         db  0x00 ; '.'
0000000000002054         db  0x40 ; '@'
0000000000002055         db  0x00 ; '.'
0000000000002056         db  0x00 ; '.'
0000000000002057         db  0x00 ; '.'
0000000000002058         db  0x00 ; '.'
0000000000002059         db  0x00 ; '.'
000000000000205a         db  0x00 ; '.'
000000000000205b         db  0x00 ; '.'
000000000000205c         db  0x00 ; '.'
000000000000205d         db  0x00 ; '.'
000000000000205e         db  0x00 ; '.'
000000000000205f         db  0x00 ; '.'
0000000000002060         db  0x28 ; '('
0000000000002061         db  0xbe ; '.'
0000000000002062         db  0x21 ; '!'
0000000000002063         db  0x00 ; '.'
0000000000002064         db  0x00 ; '.'
0000000000002065         db  0x00 ; '.'
0000000000002066         db  0x00 ; '.'
0000000000002067         db  0x00 ; '.'
0000000000002068         db  0x07 ; '.'
0000000000002069         db  0x00 ; '.'
000000000000206a         db  0x00 ; '.'
000000000000206b         db  0x00 ; '.'
000000000000206c         db  0x41 ; 'A'
000000000000206d         db  0x00 ; '.'
000000000000206e         db  0x00 ; '.'
000000000000206f         db  0x00 ; '.'
0000000000002070         db  0x00 ; '.'
0000000000002071         db  0x00 ; '.'
0000000000002072         db  0x00 ; '.'
0000000000002073         db  0x00 ; '.'
0000000000002074         db  0x00 ; '.'
0000000000002075         db  0x00 ; '.'
0000000000002076         db  0x00 ; '.'
0000000000002077         db  0x00 ; '.'
0000000000002078         db  0x30 ; '0'
0000000000002079         db  0xbe ; '.'
000000000000207a         db  0x21 ; '!'
000000000000207b         db  0x00 ; '.'
000000000000207c         db  0x00 ; '.'
000000000000207d         db  0x00 ; '.'
000000000000207e         db  0x00 ; '.'
000000000000207f         db  0x00 ; '.'
0000000000002080         db  0x07 ; '.'
0000000000002081         db  0x00 ; '.'
0000000000002082         db  0x00 ; '.'
0000000000002083         db  0x00 ; '.'
0000000000002084         db  0x42 ; 'B'
0000000000002085         db  0x00 ; '.'
0000000000002086         db  0x00 ; '.'
0000000000002087         db  0x00 ; '.'
0000000000002088         db  0x00 ; '.'
0000000000002089         db  0x00 ; '.'
000000000000208a         db  0x00 ; '.'
000000000000208b         db  0x00 ; '.'
000000000000208c         db  0x00 ; '.'
000000000000208d         db  0x00 ; '.'
000000000000208e         db  0x00 ; '.'
000000000000208f         db  0x00 ; '.'
0000000000002090         db  0x38 ; '8'
0000000000002091         db  0xbe ; '.'
0000000000002092         db  0x21 ; '!'
0000000000002093         db  0x00 ; '.'
0000000000002094         db  0x00 ; '.'
0000000000002095         db  0x00 ; '.'
0000000000002096         db  0x00 ; '.'
0000000000002097         db  0x00 ; '.'
0000000000002098         db  0x07 ; '.'
0000000000002099         db  0x00 ; '.'
000000000000209a         db  0x00 ; '.'
000000000000209b         db  0x00 ; '.'
000000000000209c         db  0x43 ; 'C'
000000000000209d         db  0x00 ; '.'
000000000000209e         db  0x00 ; '.'
000000000000209f         db  0x00 ; '.'
00000000000020a0         db  0x00 ; '.'
00000000000020a1         db  0x00 ; '.'
00000000000020a2         db  0x00 ; '.'
00000000000020a3         db  0x00 ; '.'
00000000000020a4         db  0x00 ; '.'
00000000000020a5         db  0x00 ; '.'
00000000000020a6         db  0x00 ; '.'
00000000000020a7         db  0x00 ; '.'
00000000000020a8         db  0x40 ; '@'
00000000000020a9         db  0xbe ; '.'
00000000000020aa         db  0x21 ; '!'
00000000000020ab         db  0x00 ; '.'
00000000000020ac         db  0x00 ; '.'
00000000000020ad         db  0x00 ; '.'
00000000000020ae         db  0x00 ; '.'
00000000000020af         db  0x00 ; '.'
00000000000020b0         db  0x07 ; '.'
00000000000020b1         db  0x00 ; '.'
00000000000020b2         db  0x00 ; '.'
00000000000020b3         db  0x00 ; '.'
00000000000020b4         db  0x44 ; 'D'
00000000000020b5         db  0x00 ; '.'
00000000000020b6         db  0x00 ; '.'
00000000000020b7         db  0x00 ; '.'
00000000000020b8         db  0x00 ; '.'
00000000000020b9         db  0x00 ; '.'
00000000000020ba         db  0x00 ; '.'
00000000000020bb         db  0x00 ; '.'
00000000000020bc         db  0x00 ; '.'
00000000000020bd         db  0x00 ; '.'
00000000000020be         db  0x00 ; '.'
00000000000020bf         db  0x00 ; '.'
00000000000020c0         db  0x48 ; 'H'
00000000000020c1         db  0xbe ; '.'
00000000000020c2         db  0x21 ; '!'
00000000000020c3         db  0x00 ; '.'
00000000000020c4         db  0x00 ; '.'
00000000000020c5         db  0x00 ; '.'
00000000000020c6         db  0x00 ; '.'
00000000000020c7         db  0x00 ; '.'
00000000000020c8         db  0x07 ; '.'
00000000000020c9         db  0x00 ; '.'
00000000000020ca         db  0x00 ; '.'
00000000000020cb         db  0x00 ; '.'
00000000000020cc         db  0x45 ; 'E'
00000000000020cd         db  0x00 ; '.'
00000000000020ce         db  0x00 ; '.'
00000000000020cf         db  0x00 ; '.'
00000000000020d0         db  0x00 ; '.'
00000000000020d1         db  0x00 ; '.'
00000000000020d2         db  0x00 ; '.'
00000000000020d3         db  0x00 ; '.'
00000000000020d4         db  0x00 ; '.'
00000000000020d5         db  0x00 ; '.'
00000000000020d6         db  0x00 ; '.'
00000000000020d7         db  0x00 ; '.'
00000000000020d8         db  0x50 ; 'P'
00000000000020d9         db  0xbe ; '.'
00000000000020da         db  0x21 ; '!'
00000000000020db         db  0x00 ; '.'
00000000000020dc         db  0x00 ; '.'
00000000000020dd         db  0x00 ; '.'
00000000000020de         db  0x00 ; '.'
00000000000020df         db  0x00 ; '.'
00000000000020e0         db  0x07 ; '.'
00000000000020e1         db  0x00 ; '.'
00000000000020e2         db  0x00 ; '.'
00000000000020e3         db  0x00 ; '.'
00000000000020e4         db  0x47 ; 'G'
00000000000020e5         db  0x00 ; '.'
00000000000020e6         db  0x00 ; '.'
00000000000020e7         db  0x00 ; '.'
00000000000020e8         db  0x00 ; '.'
00000000000020e9         db  0x00 ; '.'
00000000000020ea         db  0x00 ; '.'
00000000000020eb         db  0x00 ; '.'
00000000000020ec         db  0x00 ; '.'
00000000000020ed         db  0x00 ; '.'
00000000000020ee         db  0x00 ; '.'
00000000000020ef         db  0x00 ; '.'
00000000000020f0         db  0x58 ; 'X'
00000000000020f1         db  0xbe ; '.'
00000000000020f2         db  0x21 ; '!'
00000000000020f3         db  0x00 ; '.'
00000000000020f4         db  0x00 ; '.'
00000000000020f5         db  0x00 ; '.'
00000000000020f6         db  0x00 ; '.'
00000000000020f7         db  0x00 ; '.'
00000000000020f8         db  0x07 ; '.'
00000000000020f9         db  0x00 ; '.'
00000000000020fa         db  0x00 ; '.'
00000000000020fb         db  0x00 ; '.'
00000000000020fc         db  0x48 ; 'H'
00000000000020fd         db  0x00 ; '.'
00000000000020fe         db  0x00 ; '.'
00000000000020ff         db  0x00 ; '.'
0000000000002100         db  0x00 ; '.'
0000000000002101         db  0x00 ; '.'
0000000000002102         db  0x00 ; '.'
0000000000002103         db  0x00 ; '.'
0000000000002104         db  0x00 ; '.'
0000000000002105         db  0x00 ; '.'
0000000000002106         db  0x00 ; '.'
0000000000002107         db  0x00 ; '.'
0000000000002108         db  0x60 ; '`'
0000000000002109         db  0xbe ; '.'
000000000000210a         db  0x21 ; '!'
000000000000210b         db  0x00 ; '.'
000000000000210c         db  0x00 ; '.'
000000000000210d         db  0x00 ; '.'
000000000000210e         db  0x00 ; '.'
000000000000210f         db  0x00 ; '.'
0000000000002110         db  0x07 ; '.'
0000000000002111         db  0x00 ; '.'
0000000000002112         db  0x00 ; '.'
0000000000002113         db  0x00 ; '.'
0000000000002114         db  0x49 ; 'I'
0000000000002115         db  0x00 ; '.'
0000000000002116         db  0x00 ; '.'
0000000000002117         db  0x00 ; '.'
0000000000002118         db  0x00 ; '.'
0000000000002119         db  0x00 ; '.'
000000000000211a         db  0x00 ; '.'
000000000000211b         db  0x00 ; '.'
000000000000211c         db  0x00 ; '.'
000000000000211d         db  0x00 ; '.'
000000000000211e         db  0x00 ; '.'
000000000000211f         db  0x00 ; '.'
0000000000002120         db  0x68 ; 'h'
0000000000002121         db  0xbe ; '.'
0000000000002122         db  0x21 ; '!'
0000000000002123         db  0x00 ; '.'
0000000000002124         db  0x00 ; '.'
0000000000002125         db  0x00 ; '.'
0000000000002126         db  0x00 ; '.'
0000000000002127         db  0x00 ; '.'
0000000000002128         db  0x07 ; '.'
0000000000002129         db  0x00 ; '.'
000000000000212a         db  0x00 ; '.'
000000000000212b         db  0x00 ; '.'
000000000000212c         db  0x4a ; 'J'
000000000000212d         db  0x00 ; '.'
000000000000212e         db  0x00 ; '.'
000000000000212f         db  0x00 ; '.'
0000000000002130         db  0x00 ; '.'
0000000000002131         db  0x00 ; '.'
0000000000002132         db  0x00 ; '.'
0000000000002133         db  0x00 ; '.'
0000000000002134         db  0x00 ; '.'
0000000000002135         db  0x00 ; '.'
0000000000002136         db  0x00 ; '.'
0000000000002137         db  0x00 ; '.'
0000000000002138         db  0x70 ; 'p'
0000000000002139         db  0xbe ; '.'
000000000000213a         db  0x21 ; '!'
000000000000213b         db  0x00 ; '.'
000000000000213c         db  0x00 ; '.'
000000000000213d         db  0x00 ; '.'
000000000000213e         db  0x00 ; '.'
000000000000213f         db  0x00 ; '.'
0000000000002140         db  0x07 ; '.'
0000000000002141         db  0x00 ; '.'
0000000000002142         db  0x00 ; '.'
0000000000002143         db  0x00 ; '.'
0000000000002144         db  0x4b ; 'K'
0000000000002145         db  0x00 ; '.'
0000000000002146         db  0x00 ; '.'
0000000000002147         db  0x00 ; '.'
0000000000002148         db  0x00 ; '.'
0000000000002149         db  0x00 ; '.'
000000000000214a         db  0x00 ; '.'
000000000000214b         db  0x00 ; '.'
000000000000214c         db  0x00 ; '.'
000000000000214d         db  0x00 ; '.'
000000000000214e         db  0x00 ; '.'
000000000000214f         db  0x00 ; '.'
0000000000002150         db  0x78 ; 'x'
0000000000002151         db  0xbe ; '.'
0000000000002152         db  0x21 ; '!'
0000000000002153         db  0x00 ; '.'
0000000000002154         db  0x00 ; '.'
0000000000002155         db  0x00 ; '.'
0000000000002156         db  0x00 ; '.'
0000000000002157         db  0x00 ; '.'
0000000000002158         db  0x07 ; '.'
0000000000002159         db  0x00 ; '.'
000000000000215a         db  0x00 ; '.'
000000000000215b         db  0x00 ; '.'
000000000000215c         db  0x4c ; 'L'
000000000000215d         db  0x00 ; '.'
000000000000215e         db  0x00 ; '.'
000000000000215f         db  0x00 ; '.'
0000000000002160         db  0x00 ; '.'
0000000000002161         db  0x00 ; '.'
0000000000002162         db  0x00 ; '.'
0000000000002163         db  0x00 ; '.'
0000000000002164         db  0x00 ; '.'
0000000000002165         db  0x00 ; '.'
0000000000002166         db  0x00 ; '.'
0000000000002167         db  0x00 ; '.'
0000000000002168         db  0x80 ; '.'
0000000000002169         db  0xbe ; '.'
000000000000216a         db  0x21 ; '!'
000000000000216b         db  0x00 ; '.'
000000000000216c         db  0x00 ; '.'
000000000000216d         db  0x00 ; '.'
000000000000216e         db  0x00 ; '.'
000000000000216f         db  0x00 ; '.'
0000000000002170         db  0x07 ; '.'
0000000000002171         db  0x00 ; '.'
0000000000002172         db  0x00 ; '.'
0000000000002173         db  0x00 ; '.'
0000000000002174         db  0x4d ; 'M'
0000000000002175         db  0x00 ; '.'
0000000000002176         db  0x00 ; '.'
0000000000002177         db  0x00 ; '.'
0000000000002178         db  0x00 ; '.'
0000000000002179         db  0x00 ; '.'
000000000000217a         db  0x00 ; '.'
000000000000217b         db  0x00 ; '.'
000000000000217c         db  0x00 ; '.'
000000000000217d         db  0x00 ; '.'
000000000000217e         db  0x00 ; '.'
000000000000217f         db  0x00 ; '.'
0000000000002180         db  0x88 ; '.'
0000000000002181         db  0xbe ; '.'
0000000000002182         db  0x21 ; '!'
0000000000002183         db  0x00 ; '.'
0000000000002184         db  0x00 ; '.'
0000000000002185         db  0x00 ; '.'
0000000000002186         db  0x00 ; '.'
0000000000002187         db  0x00 ; '.'
0000000000002188         db  0x07 ; '.'
0000000000002189         db  0x00 ; '.'
000000000000218a         db  0x00 ; '.'
000000000000218b         db  0x00 ; '.'
000000000000218c         db  0x4e ; 'N'
000000000000218d         db  0x00 ; '.'
000000000000218e         db  0x00 ; '.'
000000000000218f         db  0x00 ; '.'
0000000000002190         db  0x00 ; '.'
0000000000002191         db  0x00 ; '.'
0000000000002192         db  0x00 ; '.'
0000000000002193         db  0x00 ; '.'
0000000000002194         db  0x00 ; '.'
0000000000002195         db  0x00 ; '.'
0000000000002196         db  0x00 ; '.'
0000000000002197         db  0x00 ; '.'
0000000000002198         db  0x90 ; '.'
0000000000002199         db  0xbe ; '.'
000000000000219a         db  0x21 ; '!'
000000000000219b         db  0x00 ; '.'
000000000000219c         db  0x00 ; '.'
000000000000219d         db  0x00 ; '.'
000000000000219e         db  0x00 ; '.'
000000000000219f         db  0x00 ; '.'
00000000000021a0         db  0x07 ; '.'
00000000000021a1         db  0x00 ; '.'
00000000000021a2         db  0x00 ; '.'
00000000000021a3         db  0x00 ; '.'
00000000000021a4         db  0x4f ; 'O'
00000000000021a5         db  0x00 ; '.'
00000000000021a6         db  0x00 ; '.'
00000000000021a7         db  0x00 ; '.'
00000000000021a8         db  0x00 ; '.'
00000000000021a9         db  0x00 ; '.'
00000000000021aa         db  0x00 ; '.'
00000000000021ab         db  0x00 ; '.'
00000000000021ac         db  0x00 ; '.'
00000000000021ad         db  0x00 ; '.'
00000000000021ae         db  0x00 ; '.'
00000000000021af         db  0x00 ; '.'
00000000000021b0         db  0x98 ; '.'
00000000000021b1         db  0xbe ; '.'
00000000000021b2         db  0x21 ; '!'
00000000000021b3         db  0x00 ; '.'
00000000000021b4         db  0x00 ; '.'
00000000000021b5         db  0x00 ; '.'
00000000000021b6         db  0x00 ; '.'
00000000000021b7         db  0x00 ; '.'
00000000000021b8         db  0x07 ; '.'
00000000000021b9         db  0x00 ; '.'
00000000000021ba         db  0x00 ; '.'
00000000000021bb         db  0x00 ; '.'
00000000000021bc         db  0x50 ; 'P'
00000000000021bd         db  0x00 ; '.'
00000000000021be         db  0x00 ; '.'
00000000000021bf         db  0x00 ; '.'
00000000000021c0         db  0x00 ; '.'
00000000000021c1         db  0x00 ; '.'
00000000000021c2         db  0x00 ; '.'
00000000000021c3         db  0x00 ; '.'
00000000000021c4         db  0x00 ; '.'
00000000000021c5         db  0x00 ; '.'
00000000000021c6         db  0x00 ; '.'
00000000000021c7         db  0x00 ; '.'
00000000000021c8         db  0xa0 ; '.'
00000000000021c9         db  0xbe ; '.'
00000000000021ca         db  0x21 ; '!'
00000000000021cb         db  0x00 ; '.'
00000000000021cc         db  0x00 ; '.'
00000000000021cd         db  0x00 ; '.'
00000000000021ce         db  0x00 ; '.'
00000000000021cf         db  0x00 ; '.'
00000000000021d0         db  0x07 ; '.'
00000000000021d1         db  0x00 ; '.'
00000000000021d2         db  0x00 ; '.'
00000000000021d3         db  0x00 ; '.'
00000000000021d4         db  0x51 ; 'Q'
00000000000021d5         db  0x00 ; '.'
00000000000021d6         db  0x00 ; '.'
00000000000021d7         db  0x00 ; '.'
00000000000021d8         db  0x00 ; '.'
00000000000021d9         db  0x00 ; '.'
00000000000021da         db  0x00 ; '.'
00000000000021db         db  0x00 ; '.'
00000000000021dc         db  0x00 ; '.'
00000000000021dd         db  0x00 ; '.'
00000000000021de         db  0x00 ; '.'
00000000000021df         db  0x00 ; '.'
00000000000021e0         db  0xa8 ; '.'
00000000000021e1         db  0xbe ; '.'
00000000000021e2         db  0x21 ; '!'
00000000000021e3         db  0x00 ; '.'
00000000000021e4         db  0x00 ; '.'
00000000000021e5         db  0x00 ; '.'
00000000000021e6         db  0x00 ; '.'
00000000000021e7         db  0x00 ; '.'
00000000000021e8         db  0x07 ; '.'
00000000000021e9         db  0x00 ; '.'
00000000000021ea         db  0x00 ; '.'
00000000000021eb         db  0x00 ; '.'
00000000000021ec         db  0x52 ; 'R'
00000000000021ed         db  0x00 ; '.'
00000000000021ee         db  0x00 ; '.'
00000000000021ef         db  0x00 ; '.'
00000000000021f0         db  0x00 ; '.'
00000000000021f1         db  0x00 ; '.'
00000000000021f2         db  0x00 ; '.'
00000000000021f3         db  0x00 ; '.'
00000000000021f4         db  0x00 ; '.'
00000000000021f5         db  0x00 ; '.'
00000000000021f6         db  0x00 ; '.'
00000000000021f7         db  0x00 ; '.'
00000000000021f8         db  0xb0 ; '.'
00000000000021f9         db  0xbe ; '.'
00000000000021fa         db  0x21 ; '!'
00000000000021fb         db  0x00 ; '.'
00000000000021fc         db  0x00 ; '.'
00000000000021fd         db  0x00 ; '.'
00000000000021fe         db  0x00 ; '.'
00000000000021ff         db  0x00 ; '.'
0000000000002200         db  0x07 ; '.'
0000000000002201         db  0x00 ; '.'
0000000000002202         db  0x00 ; '.'
0000000000002203         db  0x00 ; '.'
0000000000002204         db  0x53 ; 'S'
0000000000002205         db  0x00 ; '.'
0000000000002206         db  0x00 ; '.'
0000000000002207         db  0x00 ; '.'
0000000000002208         db  0x00 ; '.'
0000000000002209         db  0x00 ; '.'
000000000000220a         db  0x00 ; '.'
000000000000220b         db  0x00 ; '.'
000000000000220c         db  0x00 ; '.'
000000000000220d         db  0x00 ; '.'
000000000000220e         db  0x00 ; '.'
000000000000220f         db  0x00 ; '.'
0000000000002210         db  0xb8 ; '.'
0000000000002211         db  0xbe ; '.'
0000000000002212         db  0x21 ; '!'
0000000000002213         db  0x00 ; '.'
0000000000002214         db  0x00 ; '.'
0000000000002215         db  0x00 ; '.'
0000000000002216         db  0x00 ; '.'
0000000000002217         db  0x00 ; '.'
0000000000002218         db  0x07 ; '.'
0000000000002219         db  0x00 ; '.'
000000000000221a         db  0x00 ; '.'
000000000000221b         db  0x00 ; '.'
000000000000221c         db  0x54 ; 'T'
000000000000221d         db  0x00 ; '.'
000000000000221e         db  0x00 ; '.'
000000000000221f         db  0x00 ; '.'
0000000000002220         db  0x00 ; '.'
0000000000002221         db  0x00 ; '.'
0000000000002222         db  0x00 ; '.'
0000000000002223         db  0x00 ; '.'
0000000000002224         db  0x00 ; '.'
0000000000002225         db  0x00 ; '.'
0000000000002226         db  0x00 ; '.'
0000000000002227         db  0x00 ; '.'
0000000000002228         db  0xc0 ; '.'
0000000000002229         db  0xbe ; '.'
000000000000222a         db  0x21 ; '!'
000000000000222b         db  0x00 ; '.'
000000000000222c         db  0x00 ; '.'
000000000000222d         db  0x00 ; '.'
000000000000222e         db  0x00 ; '.'
000000000000222f         db  0x00 ; '.'
0000000000002230         db  0x07 ; '.'
0000000000002231         db  0x00 ; '.'
0000000000002232         db  0x00 ; '.'
0000000000002233         db  0x00 ; '.'
0000000000002234         db  0x55 ; 'U'
0000000000002235         db  0x00 ; '.'
0000000000002236         db  0x00 ; '.'
0000000000002237         db  0x00 ; '.'
0000000000002238         db  0x00 ; '.'
0000000000002239         db  0x00 ; '.'
000000000000223a         db  0x00 ; '.'
000000000000223b         db  0x00 ; '.'
000000000000223c         db  0x00 ; '.'
000000000000223d         db  0x00 ; '.'
000000000000223e         db  0x00 ; '.'
000000000000223f         db  0x00 ; '.'
0000000000002240         db  0xc8 ; '.'
0000000000002241         db  0xbe ; '.'
0000000000002242         db  0x21 ; '!'
0000000000002243         db  0x00 ; '.'
0000000000002244         db  0x00 ; '.'
0000000000002245         db  0x00 ; '.'
0000000000002246         db  0x00 ; '.'
0000000000002247         db  0x00 ; '.'
0000000000002248         db  0x07 ; '.'
0000000000002249         db  0x00 ; '.'
000000000000224a         db  0x00 ; '.'
000000000000224b         db  0x00 ; '.'
000000000000224c         db  0x56 ; 'V'
000000000000224d         db  0x00 ; '.'
000000000000224e         db  0x00 ; '.'
000000000000224f         db  0x00 ; '.'
0000000000002250         db  0x00 ; '.'
0000000000002251         db  0x00 ; '.'
0000000000002252         db  0x00 ; '.'
0000000000002253         db  0x00 ; '.'
0000000000002254         db  0x00 ; '.'
0000000000002255         db  0x00 ; '.'
0000000000002256         db  0x00 ; '.'
0000000000002257         db  0x00 ; '.'
0000000000002258         db  0xd0 ; '.'
0000000000002259         db  0xbe ; '.'
000000000000225a         db  0x21 ; '!'
000000000000225b         db  0x00 ; '.'
000000000000225c         db  0x00 ; '.'
000000000000225d         db  0x00 ; '.'
000000000000225e         db  0x00 ; '.'
000000000000225f         db  0x00 ; '.'
0000000000002260         db  0x07 ; '.'
0000000000002261         db  0x00 ; '.'
0000000000002262         db  0x00 ; '.'
0000000000002263         db  0x00 ; '.'
0000000000002264         db  0x57 ; 'W'
0000000000002265         db  0x00 ; '.'
0000000000002266         db  0x00 ; '.'
0000000000002267         db  0x00 ; '.'
0000000000002268         db  0x00 ; '.'
0000000000002269         db  0x00 ; '.'
000000000000226a         db  0x00 ; '.'
000000000000226b         db  0x00 ; '.'
000000000000226c         db  0x00 ; '.'
000000000000226d         db  0x00 ; '.'
000000000000226e         db  0x00 ; '.'
000000000000226f         db  0x00 ; '.'
0000000000002270         db  0xd8 ; '.'
0000000000002271         db  0xbe ; '.'
0000000000002272         db  0x21 ; '!'
0000000000002273         db  0x00 ; '.'
0000000000002274         db  0x00 ; '.'
0000000000002275         db  0x00 ; '.'
0000000000002276         db  0x00 ; '.'
0000000000002277         db  0x00 ; '.'
0000000000002278         db  0x07 ; '.'
0000000000002279         db  0x00 ; '.'
000000000000227a         db  0x00 ; '.'
000000000000227b         db  0x00 ; '.'
000000000000227c         db  0x58 ; 'X'
000000000000227d         db  0x00 ; '.'
000000000000227e         db  0x00 ; '.'
000000000000227f         db  0x00 ; '.'
0000000000002280         db  0x00 ; '.'
0000000000002281         db  0x00 ; '.'
0000000000002282         db  0x00 ; '.'
0000000000002283         db  0x00 ; '.'
0000000000002284         db  0x00 ; '.'
0000000000002285         db  0x00 ; '.'
0000000000002286         db  0x00 ; '.'
0000000000002287         db  0x00 ; '.'
0000000000002288         db  0xe0 ; '.'
0000000000002289         db  0xbe ; '.'
000000000000228a         db  0x21 ; '!'
000000000000228b         db  0x00 ; '.'
000000000000228c         db  0x00 ; '.'
000000000000228d         db  0x00 ; '.'
000000000000228e         db  0x00 ; '.'
000000000000228f         db  0x00 ; '.'
0000000000002290         db  0x07 ; '.'
0000000000002291         db  0x00 ; '.'
0000000000002292         db  0x00 ; '.'
0000000000002293         db  0x00 ; '.'
0000000000002294         db  0x59 ; 'Y'
0000000000002295         db  0x00 ; '.'
0000000000002296         db  0x00 ; '.'
0000000000002297         db  0x00 ; '.'
0000000000002298         db  0x00 ; '.'
0000000000002299         db  0x00 ; '.'
000000000000229a         db  0x00 ; '.'
000000000000229b         db  0x00 ; '.'
000000000000229c         db  0x00 ; '.'
000000000000229d         db  0x00 ; '.'
000000000000229e         db  0x00 ; '.'
000000000000229f         db  0x00 ; '.'
00000000000022a0         db  0xe8 ; '.'
00000000000022a1         db  0xbe ; '.'
00000000000022a2         db  0x21 ; '!'
00000000000022a3         db  0x00 ; '.'
00000000000022a4         db  0x00 ; '.'
00000000000022a5         db  0x00 ; '.'
00000000000022a6         db  0x00 ; '.'
00000000000022a7         db  0x00 ; '.'
00000000000022a8         db  0x07 ; '.'
00000000000022a9         db  0x00 ; '.'
00000000000022aa         db  0x00 ; '.'
00000000000022ab         db  0x00 ; '.'
00000000000022ac         db  0x5a ; 'Z'
00000000000022ad         db  0x00 ; '.'
00000000000022ae         db  0x00 ; '.'
00000000000022af         db  0x00 ; '.'
00000000000022b0         db  0x00 ; '.'
00000000000022b1         db  0x00 ; '.'
00000000000022b2         db  0x00 ; '.'
00000000000022b3         db  0x00 ; '.'
00000000000022b4         db  0x00 ; '.'
00000000000022b5         db  0x00 ; '.'
00000000000022b6         db  0x00 ; '.'
00000000000022b7         db  0x00 ; '.'
00000000000022b8         db  0xf0 ; '.'
00000000000022b9         db  0xbe ; '.'
00000000000022ba         db  0x21 ; '!'
00000000000022bb         db  0x00 ; '.'
00000000000022bc         db  0x00 ; '.'
00000000000022bd         db  0x00 ; '.'
00000000000022be         db  0x00 ; '.'
00000000000022bf         db  0x00 ; '.'
00000000000022c0         db  0x07 ; '.'
00000000000022c1         db  0x00 ; '.'
00000000000022c2         db  0x00 ; '.'
00000000000022c3         db  0x00 ; '.'
00000000000022c4         db  0x5b ; '['
00000000000022c5         db  0x00 ; '.'
00000000000022c6         db  0x00 ; '.'
00000000000022c7         db  0x00 ; '.'
00000000000022c8         db  0x00 ; '.'
00000000000022c9         db  0x00 ; '.'
00000000000022ca         db  0x00 ; '.'
00000000000022cb         db  0x00 ; '.'
00000000000022cc         db  0x00 ; '.'
00000000000022cd         db  0x00 ; '.'
00000000000022ce         db  0x00 ; '.'
00000000000022cf         db  0x00 ; '.'
00000000000022d0         db  0xf8 ; '.'
00000000000022d1         db  0xbe ; '.'
00000000000022d2         db  0x21 ; '!'
00000000000022d3         db  0x00 ; '.'
00000000000022d4         db  0x00 ; '.'
00000000000022d5         db  0x00 ; '.'
00000000000022d6         db  0x00 ; '.'
00000000000022d7         db  0x00 ; '.'
00000000000022d8         db  0x07 ; '.'
00000000000022d9         db  0x00 ; '.'
00000000000022da         db  0x00 ; '.'
00000000000022db         db  0x00 ; '.'
00000000000022dc         db  0x5c ; '\'
00000000000022dd         db  0x00 ; '.'
00000000000022de         db  0x00 ; '.'
00000000000022df         db  0x00 ; '.'
00000000000022e0         db  0x00 ; '.'
00000000000022e1         db  0x00 ; '.'
00000000000022e2         db  0x00 ; '.'
00000000000022e3         db  0x00 ; '.'
00000000000022e4         db  0x00 ; '.'
00000000000022e5         db  0x00 ; '.'
00000000000022e6         db  0x00 ; '.'
00000000000022e7         db  0x00 ; '.'
00000000000022e8         db  0x00 ; '.'
00000000000022e9         db  0xbf ; '.'
00000000000022ea         db  0x21 ; '!'
00000000000022eb         db  0x00 ; '.'
00000000000022ec         db  0x00 ; '.'
00000000000022ed         db  0x00 ; '.'
00000000000022ee         db  0x00 ; '.'
00000000000022ef         db  0x00 ; '.'
00000000000022f0         db  0x07 ; '.'
00000000000022f1         db  0x00 ; '.'
00000000000022f2         db  0x00 ; '.'
00000000000022f3         db  0x00 ; '.'
00000000000022f4         db  0x5d ; ']'
00000000000022f5         db  0x00 ; '.'
00000000000022f6         db  0x00 ; '.'
00000000000022f7         db  0x00 ; '.'
00000000000022f8         db  0x00 ; '.'
00000000000022f9         db  0x00 ; '.'
00000000000022fa         db  0x00 ; '.'
00000000000022fb         db  0x00 ; '.'
00000000000022fc         db  0x00 ; '.'
00000000000022fd         db  0x00 ; '.'
00000000000022fe         db  0x00 ; '.'
00000000000022ff         db  0x00 ; '.'
0000000000002300         db  0x08 ; '.'
0000000000002301         db  0xbf ; '.'
0000000000002302         db  0x21 ; '!'
0000000000002303         db  0x00 ; '.'
0000000000002304         db  0x00 ; '.'
0000000000002305         db  0x00 ; '.'
0000000000002306         db  0x00 ; '.'
0000000000002307         db  0x00 ; '.'
0000000000002308         db  0x07 ; '.'
0000000000002309         db  0x00 ; '.'
000000000000230a         db  0x00 ; '.'
000000000000230b         db  0x00 ; '.'
000000000000230c         db  0x5e ; '^'
000000000000230d         db  0x00 ; '.'
000000000000230e         db  0x00 ; '.'
000000000000230f         db  0x00 ; '.'
0000000000002310         db  0x00 ; '.'
0000000000002311         db  0x00 ; '.'
0000000000002312         db  0x00 ; '.'
0000000000002313         db  0x00 ; '.'
0000000000002314         db  0x00 ; '.'
0000000000002315         db  0x00 ; '.'
0000000000002316         db  0x00 ; '.'
0000000000002317         db  0x00 ; '.'
0000000000002318         db  0x10 ; '.'
0000000000002319         db  0xbf ; '.'
000000000000231a         db  0x21 ; '!'
000000000000231b         db  0x00 ; '.'
000000000000231c         db  0x00 ; '.'
000000000000231d         db  0x00 ; '.'
000000000000231e         db  0x00 ; '.'
000000000000231f         db  0x00 ; '.'
0000000000002320         db  0x07 ; '.'
0000000000002321         db  0x00 ; '.'
0000000000002322         db  0x00 ; '.'
0000000000002323         db  0x00 ; '.'
0000000000002324         db  0x5f ; '_'
0000000000002325         db  0x00 ; '.'
0000000000002326         db  0x00 ; '.'
0000000000002327         db  0x00 ; '.'
0000000000002328         db  0x00 ; '.'
0000000000002329         db  0x00 ; '.'
000000000000232a         db  0x00 ; '.'
000000000000232b         db  0x00 ; '.'
000000000000232c         db  0x00 ; '.'
000000000000232d         db  0x00 ; '.'
000000000000232e         db  0x00 ; '.'
000000000000232f         db  0x00 ; '.'
0000000000002330         db  0x18 ; '.'
0000000000002331         db  0xbf ; '.'
0000000000002332         db  0x21 ; '!'
0000000000002333         db  0x00 ; '.'
0000000000002334         db  0x00 ; '.'
0000000000002335         db  0x00 ; '.'
0000000000002336         db  0x00 ; '.'
0000000000002337         db  0x00 ; '.'
0000000000002338         db  0x07 ; '.'
0000000000002339         db  0x00 ; '.'
000000000000233a         db  0x00 ; '.'
000000000000233b         db  0x00 ; '.'
000000000000233c         db  0x60 ; '`'
000000000000233d         db  0x00 ; '.'
000000000000233e         db  0x00 ; '.'
000000000000233f         db  0x00 ; '.'
0000000000002340         db  0x00 ; '.'
0000000000002341         db  0x00 ; '.'
0000000000002342         db  0x00 ; '.'
0000000000002343         db  0x00 ; '.'
0000000000002344         db  0x00 ; '.'
0000000000002345         db  0x00 ; '.'
0000000000002346         db  0x00 ; '.'
0000000000002347         db  0x00 ; '.'
0000000000002348         db  0x20 ; ' '
0000000000002349         db  0xbf ; '.'
000000000000234a         db  0x21 ; '!'
000000000000234b         db  0x00 ; '.'
000000000000234c         db  0x00 ; '.'
000000000000234d         db  0x00 ; '.'
000000000000234e         db  0x00 ; '.'
000000000000234f         db  0x00 ; '.'
0000000000002350         db  0x07 ; '.'
0000000000002351         db  0x00 ; '.'
0000000000002352         db  0x00 ; '.'
0000000000002353         db  0x00 ; '.'
0000000000002354         db  0x61 ; 'a'
0000000000002355         db  0x00 ; '.'
0000000000002356         db  0x00 ; '.'
0000000000002357         db  0x00 ; '.'
0000000000002358         db  0x00 ; '.'
0000000000002359         db  0x00 ; '.'
000000000000235a         db  0x00 ; '.'
000000000000235b         db  0x00 ; '.'
000000000000235c         db  0x00 ; '.'
000000000000235d         db  0x00 ; '.'
000000000000235e         db  0x00 ; '.'
000000000000235f         db  0x00 ; '.'
0000000000002360         db  0x28 ; '('
0000000000002361         db  0xbf ; '.'
0000000000002362         db  0x21 ; '!'
0000000000002363         db  0x00 ; '.'
0000000000002364         db  0x00 ; '.'
0000000000002365         db  0x00 ; '.'
0000000000002366         db  0x00 ; '.'
0000000000002367         db  0x00 ; '.'
0000000000002368         db  0x07 ; '.'
0000000000002369         db  0x00 ; '.'
000000000000236a         db  0x00 ; '.'
000000000000236b         db  0x00 ; '.'
000000000000236c         db  0x62 ; 'b'
000000000000236d         db  0x00 ; '.'
000000000000236e         db  0x00 ; '.'
000000000000236f         db  0x00 ; '.'
0000000000002370         db  0x00 ; '.'
0000000000002371         db  0x00 ; '.'
0000000000002372         db  0x00 ; '.'
0000000000002373         db  0x00 ; '.'
0000000000002374         db  0x00 ; '.'
0000000000002375         db  0x00 ; '.'
0000000000002376         db  0x00 ; '.'
0000000000002377         db  0x00 ; '.'
0000000000002378         db  0x30 ; '0'
0000000000002379         db  0xbf ; '.'
000000000000237a         db  0x21 ; '!'
000000000000237b         db  0x00 ; '.'
000000000000237c         db  0x00 ; '.'
000000000000237d         db  0x00 ; '.'
000000000000237e         db  0x00 ; '.'
000000000000237f         db  0x00 ; '.'
0000000000002380         db  0x07 ; '.'
0000000000002381         db  0x00 ; '.'
0000000000002382         db  0x00 ; '.'
0000000000002383         db  0x00 ; '.'
0000000000002384         db  0x63 ; 'c'
0000000000002385         db  0x00 ; '.'
0000000000002386         db  0x00 ; '.'
0000000000002387         db  0x00 ; '.'
0000000000002388         db  0x00 ; '.'
0000000000002389         db  0x00 ; '.'
000000000000238a         db  0x00 ; '.'
000000000000238b         db  0x00 ; '.'
000000000000238c         db  0x00 ; '.'
000000000000238d         db  0x00 ; '.'
000000000000238e         db  0x00 ; '.'
000000000000238f         db  0x00 ; '.'
0000000000002390         db  0x38 ; '8'
0000000000002391         db  0xbf ; '.'
0000000000002392         db  0x21 ; '!'
0000000000002393         db  0x00 ; '.'
0000000000002394         db  0x00 ; '.'
0000000000002395         db  0x00 ; '.'
0000000000002396         db  0x00 ; '.'
0000000000002397         db  0x00 ; '.'
0000000000002398         db  0x07 ; '.'
0000000000002399         db  0x00 ; '.'
000000000000239a         db  0x00 ; '.'
000000000000239b         db  0x00 ; '.'
000000000000239c         db  0x64 ; 'd'
000000000000239d         db  0x00 ; '.'
000000000000239e         db  0x00 ; '.'
000000000000239f         db  0x00 ; '.'
00000000000023a0         db  0x00 ; '.'
00000000000023a1         db  0x00 ; '.'
00000000000023a2         db  0x00 ; '.'
00000000000023a3         db  0x00 ; '.'
00000000000023a4         db  0x00 ; '.'
00000000000023a5         db  0x00 ; '.'
00000000000023a6         db  0x00 ; '.'
00000000000023a7         db  0x00 ; '.'
00000000000023a8         db  0x40 ; '@'
00000000000023a9         db  0xbf ; '.'
00000000000023aa         db  0x21 ; '!'
00000000000023ab         db  0x00 ; '.'
00000000000023ac         db  0x00 ; '.'
00000000000023ad         db  0x00 ; '.'
00000000000023ae         db  0x00 ; '.'
00000000000023af         db  0x00 ; '.'
00000000000023b0         db  0x07 ; '.'
00000000000023b1         db  0x00 ; '.'
00000000000023b2         db  0x00 ; '.'
00000000000023b3         db  0x00 ; '.'
00000000000023b4         db  0x65 ; 'e'
00000000000023b5         db  0x00 ; '.'
00000000000023b6         db  0x00 ; '.'
00000000000023b7         db  0x00 ; '.'
00000000000023b8         db  0x00 ; '.'
00000000000023b9         db  0x00 ; '.'
00000000000023ba         db  0x00 ; '.'
00000000000023bb         db  0x00 ; '.'
00000000000023bc         db  0x00 ; '.'
00000000000023bd         db  0x00 ; '.'
00000000000023be         db  0x00 ; '.'
00000000000023bf         db  0x00 ; '.'
00000000000023c0         db  0x48 ; 'H'
00000000000023c1         db  0xbf ; '.'
00000000000023c2         db  0x21 ; '!'
00000000000023c3         db  0x00 ; '.'
00000000000023c4         db  0x00 ; '.'
00000000000023c5         db  0x00 ; '.'
00000000000023c6         db  0x00 ; '.'
00000000000023c7         db  0x00 ; '.'
00000000000023c8         db  0x07 ; '.'
00000000000023c9         db  0x00 ; '.'
00000000000023ca         db  0x00 ; '.'
00000000000023cb         db  0x00 ; '.'
00000000000023cc         db  0x66 ; 'f'
00000000000023cd         db  0x00 ; '.'
00000000000023ce         db  0x00 ; '.'
00000000000023cf         db  0x00 ; '.'
00000000000023d0         db  0x00 ; '.'
00000000000023d1         db  0x00 ; '.'
00000000000023d2         db  0x00 ; '.'
00000000000023d3         db  0x00 ; '.'
00000000000023d4         db  0x00 ; '.'
00000000000023d5         db  0x00 ; '.'
00000000000023d6         db  0x00 ; '.'
00000000000023d7         db  0x00 ; '.'
00000000000023d8         db  0x50 ; 'P'
00000000000023d9         db  0xbf ; '.'
00000000000023da         db  0x21 ; '!'
00000000000023db         db  0x00 ; '.'
00000000000023dc         db  0x00 ; '.'
00000000000023dd         db  0x00 ; '.'
00000000000023de         db  0x00 ; '.'
00000000000023df         db  0x00 ; '.'
00000000000023e0         db  0x07 ; '.'
00000000000023e1         db  0x00 ; '.'
00000000000023e2         db  0x00 ; '.'
00000000000023e3         db  0x00 ; '.'
00000000000023e4         db  0x67 ; 'g'
00000000000023e5         db  0x00 ; '.'
00000000000023e6         db  0x00 ; '.'
00000000000023e7         db  0x00 ; '.'
00000000000023e8         db  0x00 ; '.'
00000000000023e9         db  0x00 ; '.'
00000000000023ea         db  0x00 ; '.'
00000000000023eb         db  0x00 ; '.'
00000000000023ec         db  0x00 ; '.'
00000000000023ed         db  0x00 ; '.'
00000000000023ee         db  0x00 ; '.'
00000000000023ef         db  0x00 ; '.'
00000000000023f0         db  0x58 ; 'X'
00000000000023f1         db  0xbf ; '.'
00000000000023f2         db  0x21 ; '!'
00000000000023f3         db  0x00 ; '.'
00000000000023f4         db  0x00 ; '.'
00000000000023f5         db  0x00 ; '.'
00000000000023f6         db  0x00 ; '.'
00000000000023f7         db  0x00 ; '.'
00000000000023f8         db  0x07 ; '.'
00000000000023f9         db  0x00 ; '.'
00000000000023fa         db  0x00 ; '.'
00000000000023fb         db  0x00 ; '.'
00000000000023fc         db  0x68 ; 'h'
00000000000023fd         db  0x00 ; '.'
00000000000023fe         db  0x00 ; '.'
00000000000023ff         db  0x00 ; '.'
0000000000002400         db  0x00 ; '.'
0000000000002401         db  0x00 ; '.'
0000000000002402         db  0x00 ; '.'
0000000000002403         db  0x00 ; '.'
0000000000002404         db  0x00 ; '.'
0000000000002405         db  0x00 ; '.'
0000000000002406         db  0x00 ; '.'
0000000000002407         db  0x00 ; '.'
0000000000002408         db  0x60 ; '`'
0000000000002409         db  0xbf ; '.'
000000000000240a         db  0x21 ; '!'
000000000000240b         db  0x00 ; '.'
000000000000240c         db  0x00 ; '.'
000000000000240d         db  0x00 ; '.'
000000000000240e         db  0x00 ; '.'
000000000000240f         db  0x00 ; '.'
0000000000002410         db  0x07 ; '.'
0000000000002411         db  0x00 ; '.'
0000000000002412         db  0x00 ; '.'
0000000000002413         db  0x00 ; '.'
0000000000002414         db  0x69 ; 'i'
0000000000002415         db  0x00 ; '.'
0000000000002416         db  0x00 ; '.'
0000000000002417         db  0x00 ; '.'
0000000000002418         db  0x00 ; '.'
0000000000002419         db  0x00 ; '.'
000000000000241a         db  0x00 ; '.'
000000000000241b         db  0x00 ; '.'
000000000000241c         db  0x00 ; '.'
000000000000241d         db  0x00 ; '.'
000000000000241e         db  0x00 ; '.'
000000000000241f         db  0x00 ; '.'
0000000000002420         db  0x68 ; 'h'
0000000000002421         db  0xbf ; '.'
0000000000002422         db  0x21 ; '!'
0000000000002423         db  0x00 ; '.'
0000000000002424         db  0x00 ; '.'
0000000000002425         db  0x00 ; '.'
0000000000002426         db  0x00 ; '.'
0000000000002427         db  0x00 ; '.'
0000000000002428         db  0x07 ; '.'
0000000000002429         db  0x00 ; '.'
000000000000242a         db  0x00 ; '.'
000000000000242b         db  0x00 ; '.'
000000000000242c         db  0x6a ; 'j'
000000000000242d         db  0x00 ; '.'
000000000000242e         db  0x00 ; '.'
000000000000242f         db  0x00 ; '.'
0000000000002430         db  0x00 ; '.'
0000000000002431         db  0x00 ; '.'
0000000000002432         db  0x00 ; '.'
0000000000002433         db  0x00 ; '.'
0000000000002434         db  0x00 ; '.'
0000000000002435         db  0x00 ; '.'
0000000000002436         db  0x00 ; '.'
0000000000002437         db  0x00 ; '.'
0000000000002438         db  0x70 ; 'p'
0000000000002439         db  0xbf ; '.'
000000000000243a         db  0x21 ; '!'
000000000000243b         db  0x00 ; '.'
000000000000243c         db  0x00 ; '.'
000000000000243d         db  0x00 ; '.'
000000000000243e         db  0x00 ; '.'
000000000000243f         db  0x00 ; '.'
0000000000002440         db  0x07 ; '.'
0000000000002441         db  0x00 ; '.'
0000000000002442         db  0x00 ; '.'
0000000000002443         db  0x00 ; '.'
0000000000002444         db  0x6b ; 'k'
0000000000002445         db  0x00 ; '.'
0000000000002446         db  0x00 ; '.'
0000000000002447         db  0x00 ; '.'
0000000000002448         db  0x00 ; '.'
0000000000002449         db  0x00 ; '.'
000000000000244a         db  0x00 ; '.'
000000000000244b         db  0x00 ; '.'
000000000000244c         db  0x00 ; '.'
000000000000244d         db  0x00 ; '.'
000000000000244e         db  0x00 ; '.'
000000000000244f         db  0x00 ; '.'
0000000000002450         db  0x78 ; 'x'
0000000000002451         db  0xbf ; '.'
0000000000002452         db  0x21 ; '!'
0000000000002453         db  0x00 ; '.'
0000000000002454         db  0x00 ; '.'
0000000000002455         db  0x00 ; '.'
0000000000002456         db  0x00 ; '.'
0000000000002457         db  0x00 ; '.'
0000000000002458         db  0x07 ; '.'
0000000000002459         db  0x00 ; '.'
000000000000245a         db  0x00 ; '.'
000000000000245b         db  0x00 ; '.'
000000000000245c         db  0x6c ; 'l'
000000000000245d         db  0x00 ; '.'
000000000000245e         db  0x00 ; '.'
000000000000245f         db  0x00 ; '.'
0000000000002460         db  0x00 ; '.'
0000000000002461         db  0x00 ; '.'
0000000000002462         db  0x00 ; '.'
0000000000002463         db  0x00 ; '.'
0000000000002464         db  0x00 ; '.'
0000000000002465         db  0x00 ; '.'
0000000000002466         db  0x00 ; '.'
0000000000002467         db  0x00 ; '.'
0000000000002468         db  0x80 ; '.'
0000000000002469         db  0xbf ; '.'
000000000000246a         db  0x21 ; '!'
000000000000246b         db  0x00 ; '.'
000000000000246c         db  0x00 ; '.'
000000000000246d         db  0x00 ; '.'
000000000000246e         db  0x00 ; '.'
000000000000246f         db  0x00 ; '.'
0000000000002470         db  0x07 ; '.'
0000000000002471         db  0x00 ; '.'
0000000000002472         db  0x00 ; '.'
0000000000002473         db  0x00 ; '.'
0000000000002474         db  0x6d ; 'm'
0000000000002475         db  0x00 ; '.'
0000000000002476         db  0x00 ; '.'
0000000000002477         db  0x00 ; '.'
0000000000002478         db  0x00 ; '.'
0000000000002479         db  0x00 ; '.'
000000000000247a         db  0x00 ; '.'
000000000000247b         db  0x00 ; '.'
000000000000247c         db  0x00 ; '.'
000000000000247d         db  0x00 ; '.'
000000000000247e         db  0x00 ; '.'
000000000000247f         db  0x00 ; '.'
0000000000002480         db  0x88 ; '.'
0000000000002481         db  0xbf ; '.'
0000000000002482         db  0x21 ; '!'
0000000000002483         db  0x00 ; '.'
0000000000002484         db  0x00 ; '.'
0000000000002485         db  0x00 ; '.'
0000000000002486         db  0x00 ; '.'
0000000000002487         db  0x00 ; '.'
0000000000002488         db  0x07 ; '.'
0000000000002489         db  0x00 ; '.'
000000000000248a         db  0x00 ; '.'
000000000000248b         db  0x00 ; '.'
000000000000248c         db  0x6e ; 'n'
000000000000248d         db  0x00 ; '.'
000000000000248e         db  0x00 ; '.'
000000000000248f         db  0x00 ; '.'
0000000000002490         db  0x00 ; '.'
0000000000002491         db  0x00 ; '.'
0000000000002492         db  0x00 ; '.'
0000000000002493         db  0x00 ; '.'
0000000000002494         db  0x00 ; '.'
0000000000002495         db  0x00 ; '.'
0000000000002496         db  0x00 ; '.'
0000000000002497         db  0x00 ; '.'
0000000000002498         db  0x90 ; '.'
0000000000002499         db  0xbf ; '.'
000000000000249a         db  0x21 ; '!'
000000000000249b         db  0x00 ; '.'
000000000000249c         db  0x00 ; '.'
000000000000249d         db  0x00 ; '.'
000000000000249e         db  0x00 ; '.'
000000000000249f         db  0x00 ; '.'
00000000000024a0         db  0x07 ; '.'
00000000000024a1         db  0x00 ; '.'
00000000000024a2         db  0x00 ; '.'
00000000000024a3         db  0x00 ; '.'
00000000000024a4         db  0x6f ; 'o'
00000000000024a5         db  0x00 ; '.'
00000000000024a6         db  0x00 ; '.'
00000000000024a7         db  0x00 ; '.'
00000000000024a8         db  0x00 ; '.'
00000000000024a9         db  0x00 ; '.'
00000000000024aa         db  0x00 ; '.'
00000000000024ab         db  0x00 ; '.'
00000000000024ac         db  0x00 ; '.'
00000000000024ad         db  0x00 ; '.'
00000000000024ae         db  0x00 ; '.'
00000000000024af         db  0x00 ; '.'
00000000000024b0         db  0x98 ; '.'
00000000000024b1         db  0xbf ; '.'
00000000000024b2         db  0x21 ; '!'
00000000000024b3         db  0x00 ; '.'
00000000000024b4         db  0x00 ; '.'
00000000000024b5         db  0x00 ; '.'
00000000000024b6         db  0x00 ; '.'
00000000000024b7         db  0x00 ; '.'
00000000000024b8         db  0x07 ; '.'
00000000000024b9         db  0x00 ; '.'
00000000000024ba         db  0x00 ; '.'
00000000000024bb         db  0x00 ; '.'
00000000000024bc         db  0x70 ; 'p'
00000000000024bd         db  0x00 ; '.'
00000000000024be         db  0x00 ; '.'
00000000000024bf         db  0x00 ; '.'
00000000000024c0         db  0x00 ; '.'
00000000000024c1         db  0x00 ; '.'
00000000000024c2         db  0x00 ; '.'
00000000000024c3         db  0x00 ; '.'
00000000000024c4         db  0x00 ; '.'
00000000000024c5         db  0x00 ; '.'
00000000000024c6         db  0x00 ; '.'
00000000000024c7         db  0x00 ; '.'
00000000000024c8         db  0xa0 ; '.'
00000000000024c9         db  0xbf ; '.'
00000000000024ca         db  0x21 ; '!'
00000000000024cb         db  0x00 ; '.'
00000000000024cc         db  0x00 ; '.'
00000000000024cd         db  0x00 ; '.'
00000000000024ce         db  0x00 ; '.'
00000000000024cf         db  0x00 ; '.'
00000000000024d0         db  0x07 ; '.'
00000000000024d1         db  0x00 ; '.'
00000000000024d2         db  0x00 ; '.'
00000000000024d3         db  0x00 ; '.'
00000000000024d4         db  0x72 ; 'r'
00000000000024d5         db  0x00 ; '.'
00000000000024d6         db  0x00 ; '.'
00000000000024d7         db  0x00 ; '.'
00000000000024d8         db  0x00 ; '.'
00000000000024d9         db  0x00 ; '.'
00000000000024da         db  0x00 ; '.'
00000000000024db         db  0x00 ; '.'
00000000000024dc         db  0x00 ; '.'
00000000000024dd         db  0x00 ; '.'
00000000000024de         db  0x00 ; '.'
00000000000024df         db  0x00 ; '.'
00000000000024e0         db  0xa8 ; '.'
00000000000024e1         db  0xbf ; '.'
00000000000024e2         db  0x21 ; '!'
00000000000024e3         db  0x00 ; '.'
00000000000024e4         db  0x00 ; '.'
00000000000024e5         db  0x00 ; '.'
00000000000024e6         db  0x00 ; '.'
00000000000024e7         db  0x00 ; '.'
00000000000024e8         db  0x07 ; '.'
00000000000024e9         db  0x00 ; '.'
00000000000024ea         db  0x00 ; '.'
00000000000024eb         db  0x00 ; '.'
00000000000024ec         db  0x73 ; 's'
00000000000024ed         db  0x00 ; '.'
00000000000024ee         db  0x00 ; '.'
00000000000024ef         db  0x00 ; '.'
00000000000024f0         db  0x00 ; '.'
00000000000024f1         db  0x00 ; '.'
00000000000024f2         db  0x00 ; '.'
00000000000024f3         db  0x00 ; '.'
00000000000024f4         db  0x00 ; '.'
00000000000024f5         db  0x00 ; '.'
00000000000024f6         db  0x00 ; '.'
00000000000024f7         db  0x00 ; '.'
00000000000024f8         db  0xb0 ; '.'
00000000000024f9         db  0xbf ; '.'
00000000000024fa         db  0x21 ; '!'
00000000000024fb         db  0x00 ; '.'
00000000000024fc         db  0x00 ; '.'
00000000000024fd         db  0x00 ; '.'
00000000000024fe         db  0x00 ; '.'
00000000000024ff         db  0x00 ; '.'
0000000000002500         db  0x07 ; '.'
0000000000002501         db  0x00 ; '.'
0000000000002502         db  0x00 ; '.'
0000000000002503         db  0x00 ; '.'
0000000000002504         db  0x74 ; 't'
0000000000002505         db  0x00 ; '.'
0000000000002506         db  0x00 ; '.'
0000000000002507         db  0x00 ; '.'
0000000000002508         db  0x00 ; '.'
0000000000002509         db  0x00 ; '.'
000000000000250a         db  0x00 ; '.'
000000000000250b         db  0x00 ; '.'
000000000000250c         db  0x00 ; '.'
000000000000250d         db  0x00 ; '.'
000000000000250e         db  0x00 ; '.'
000000000000250f         db  0x00 ; '.'
0000000000002510         db  0xb8 ; '.'
0000000000002511         db  0xbf ; '.'
0000000000002512         db  0x21 ; '!'
0000000000002513         db  0x00 ; '.'
0000000000002514         db  0x00 ; '.'
0000000000002515         db  0x00 ; '.'
0000000000002516         db  0x00 ; '.'
0000000000002517         db  0x00 ; '.'
0000000000002518         db  0x07 ; '.'
0000000000002519         db  0x00 ; '.'
000000000000251a         db  0x00 ; '.'
000000000000251b         db  0x00 ; '.'
000000000000251c         db  0x76 ; 'v'
000000000000251d         db  0x00 ; '.'
000000000000251e         db  0x00 ; '.'
000000000000251f         db  0x00 ; '.'
0000000000002520         db  0x00 ; '.'
0000000000002521         db  0x00 ; '.'
0000000000002522         db  0x00 ; '.'
0000000000002523         db  0x00 ; '.'
0000000000002524         db  0x00 ; '.'
0000000000002525         db  0x00 ; '.'
0000000000002526         db  0x00 ; '.'
0000000000002527         db  0x00 ; '.'
0000000000002528         db  0xc0 ; '.'
0000000000002529         db  0xbf ; '.'
000000000000252a         db  0x21 ; '!'
000000000000252b         db  0x00 ; '.'
000000000000252c         db  0x00 ; '.'
000000000000252d         db  0x00 ; '.'
000000000000252e         db  0x00 ; '.'
000000000000252f         db  0x00 ; '.'
0000000000002530         db  0x07 ; '.'
0000000000002531         db  0x00 ; '.'
0000000000002532         db  0x00 ; '.'
0000000000002533         db  0x00 ; '.'
0000000000002534         db  0x77 ; 'w'
0000000000002535         db  0x00 ; '.'
0000000000002536         db  0x00 ; '.'
0000000000002537         db  0x00 ; '.'
0000000000002538         db  0x00 ; '.'
0000000000002539         db  0x00 ; '.'
000000000000253a         db  0x00 ; '.'
000000000000253b         db  0x00 ; '.'
000000000000253c         db  0x00 ; '.'
000000000000253d         db  0x00 ; '.'
000000000000253e         db  0x00 ; '.'
000000000000253f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x2540; 0x2557[ (23 bytes)
        ; File offset : [9536; 9559[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000002540         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000002544         mov        rax, qword [qword_21bfe0]                   ; qword_21bfe0
000000000000254b         test       rax, rax
000000000000254e         je         loc_2552

0000000000002550         call       rax

                     loc_2552:
0000000000002552         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000002556         ret
                        ; endp
0000000000002557         db  0x00 ; '.'
0000000000002558         db  0x00 ; '.'
0000000000002559         db  0x00 ; '.'
000000000000255a         db  0x00 ; '.'
000000000000255b         db  0x00 ; '.'
000000000000255c         db  0x00 ; '.'
000000000000255d         db  0x00 ; '.'
000000000000255e         db  0x00 ; '.'
000000000000255f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x2560; 0x2c80[ (1824 bytes)
        ; File offset : [9568; 11392[ (1824 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_2560:
0000000000002560         push       qword [qword_21bc30]                        ; Begin of unwind block (FDE at 0x17dbc), qword_21bc30, CODE XREF=sub_2576+5
0000000000002566         jmp        qword [qword_21bc30+8]                      ; 0x21bc38
                        ; endp
000000000000256c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getenv:        // getenv
0000000000002570         jmp        qword [getenv@GOT]                          ; getenv, getenv@GOT, CODE XREF=set_simple_backup_suffix+55, xget_version+21
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2576:
0000000000002576         push       0x0
000000000000257b         jmp        loc_2560


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_utimensat:        // utimensat
0000000000002580         jmp        qword [utimensat@GOT]                       ; utimensat, utimensat@GOT, CODE XREF=utimecmpat+1273, utimecmpat+1871, lutimensat+5, fdutimens+957, lutimens+123
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2586:
0000000000002586         push       0x1
000000000000258b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000002590         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=sub_47d0+940, safe_hasher+29, hash_get_first+60, hash_rehash+569, hash_insert_if_absent+477, set_program_name+154, sub_d560+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2596:
0000000000002596         push       0x2
000000000000259b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000025a0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=restore_default_fscreatecon_or_die+1, main+1355, main+1501, main+1873, do_move+322, excise+128, cache_fstatat.constprop.3+68, cache_fstatat.constprop.3+102, prompt+152, prompt+832, prompt+1078
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25a6:
00000000000025a6         push       0x3
00000000000025ab         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_unlink:        // unlink
00000000000025b0         jmp        qword [unlink@GOT]                          ; unlink, unlink@GOT, CODE XREF=copy_internal+2497, copy_internal+9194, copy_internal+13127
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25b6:
00000000000025b6         push       0x4
00000000000025bb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
00000000000025c0         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+748, usage+941, argmatch+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25c6:
00000000000025c6         push       0x5
00000000000025cb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
00000000000025d0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdin+174, close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25d6:
00000000000025d6         push       0x6
00000000000025db         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcpy:        // strcpy
00000000000025e0         jmp        qword [strcpy@GOT]                          ; strcpy, strcpy@GOT, CODE XREF=copy_internal+10413
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25e6:
00000000000025e6         push       0x7
00000000000025eb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
00000000000025f0         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25f6:
00000000000025f6         push       0x8
00000000000025fb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___read_chk:        // __read_chk
0000000000002600         jmp        qword [__read_chk@GOT]                      ; __read_chk, __read_chk@GOT, CODE XREF=randread_new+280
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2606:
0000000000002606         push       0x9
000000000000260b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mkdir:        // mkdir
0000000000002610         jmp        qword [mkdir@GOT]                           ; mkdir, mkdir@GOT, CODE XREF=copy_internal+5302, try_dir+5
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2616:
0000000000002616         push       0xa
000000000000261b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_unlinkat:        // unlinkat
0000000000002620         jmp        qword [unlinkat@GOT]                        ; unlinkat, unlinkat@GOT, CODE XREF=excise+60, force_linkat+322, force_symlinkat+305
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2626:
0000000000002626         push       0xb
000000000000262b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qsort:        // qsort
0000000000002630         jmp        qword [qsort@GOT]                           ; qsort, qsort@GOT, CODE XREF=streamsavedir+399, fts_sort+124
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2636:
0000000000002636         push       0xc
000000000000263b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_isatty:        // isatty
0000000000002640         jmp        qword [isatty@GOT]                          ; isatty, isatty@GOT, CODE XREF=main+279
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2646:
0000000000002646         push       0xd
000000000000264b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_faccessat:        // faccessat
0000000000002650         jmp        qword [faccessat@GOT]                       ; faccessat, faccessat@GOT, CODE XREF=prompt+1065
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2656:
0000000000002656         push       0xe
000000000000265b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_readlink:        // readlink
0000000000002660         jmp        qword [readlink@GOT]                        ; readlink, readlink@GOT, CODE XREF=areadlink_with_size+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2666:
0000000000002666         push       0xf
000000000000266b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000002670         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2676:
0000000000002676         push       0x10
000000000000267b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_clock_gettime:        // clock_gettime
0000000000002680         jmp        qword [clock_gettime@GOT]                   ; clock_gettime, clock_gettime@GOT, CODE XREF=gettime+5, current_timespec+25
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2686:
0000000000002686         push       0x11
000000000000268b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_write:        // write
0000000000002690         jmp        qword [write@GOT]                           ; write, write@GOT, CODE XREF=safe_write+33
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2696:
0000000000002696         push       0x12
000000000000269b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getpid:        // getpid
00000000000026a0         jmp        qword [getpid@GOT]                          ; getpid, getpid@GOT, CODE XREF=randread_new+407, randread_new+706
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26a6:
00000000000026a6         push       0x13
00000000000026ab         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fread_unlocked:        // fread_unlocked
00000000000026b0         jmp        qword [fread_unlocked@GOT]                  ; fread_unlocked, fread_unlocked@GOT, CODE XREF=randread+97
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26b6:
00000000000026b6         push       0x14
00000000000026bb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
00000000000026c0         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+97
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26c6:
00000000000026c6         push       0x15
00000000000026cb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_pathconf:        // pathconf
00000000000026d0         jmp        qword [pathconf@GOT]                        ; pathconf, pathconf@GOT, CODE XREF=backupfile_internal+1455
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26d6:
00000000000026d6         push       0x16
00000000000026db         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
00000000000026e0         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26e6:
00000000000026e6         push       0x17
00000000000026eb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_opendir:        // opendir
00000000000026f0         jmp        qword [opendir@GOT]                         ; opendir, opendir@GOT, CODE XREF=opendir_safer+8
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_26f6:
00000000000026f6         push       0x18
00000000000026fb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000002700         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2706:
0000000000002706         push       0x19
000000000000270b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_stpcpy:        // stpcpy
0000000000002710         jmp        qword [stpcpy@GOT]                          ; stpcpy, stpcpy@GOT, CODE XREF=streamsavedir+440, DATA XREF=fts_build+430
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2716:
0000000000002716         push       0x1a
000000000000271b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_rmdir:        // rmdir
0000000000002720         jmp        qword [rmdir@GOT]                           ; rmdir, rmdir@GOT, CODE XREF=copy_internal+6688
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2726:
0000000000002726         push       0x1b
000000000000272b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000002730         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=restore_default_fscreatecon_or_die+29, main+723, main+960, main+1560, main+1601, main+1671, main+1741, main+1800, main+1865, main+1912, do_move+314
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2736:
0000000000002736         push       0x1c
000000000000273b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000002740         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2746:
0000000000002746         push       0x1d
000000000000274b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000002750         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=copy_internal+3437, copy_internal+3471, copy_internal+3489, copy_internal+3591, copy_internal+7776, backupfile_internal+67, backupfile_internal+99, backupfile_internal+328, base_len+4, mfile_name_concat+51, quotearg_buffer_restyled+343
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2756:
0000000000002756         push       0x1e
000000000000275b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___lxstat:        // __lxstat
0000000000002760         jmp        qword [__lxstat@GOT]                        ; __lxstat, __lxstat@GOT, CODE XREF=sub_47d0+190, copy_internal+1496, copy_internal+2256, copy_internal+5169, copy_internal+7261, copy_internal+7315, copy_internal+9327, copy_internal+14186, copy_internal+14319, get_root_dev_ino+45, try_nocreate+38
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2766:
0000000000002766         push       0x1f
000000000000276b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_openat:        // openat
0000000000002770         jmp        qword [openat@GOT]                          ; openat, openat@GOT, CODE XREF=prompt+116, sub_4540+92, openat_safer+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2776:
0000000000002776         push       0x20
000000000000277b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000002780         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+1934, do_move+244, excise+584, prompt+1219, sub_47d0+976, overwrite_ok.isra.12+326, copy_internal+13604, copy+228, forget_created+101, src_to_dest_lookup+84, extent_scan_read+776
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2786:
0000000000002786         push       0x21
000000000000278b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getuid:        // getuid
0000000000002790         jmp        qword [getuid@GOT]                          ; getuid, getuid@GOT, CODE XREF=randread_new+452
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2796:
0000000000002796         push       0x22
000000000000279b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
00000000000027a0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+382
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27a6:
00000000000027a6         push       0x23
00000000000027ab         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
00000000000027b0         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27b6:
00000000000027b6         push       0x24
00000000000027bb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstatat:        // __fxstatat
00000000000027c0         jmp        qword [__fxstatat@GOT]                      ; __fxstatat, __fxstatat@GOT, CODE XREF=excise+415, cache_fstatat.constprop.3+51, copy_internal+483, renameatu+316, renameatu+398, renameatu+488, same_nameat.part.0+71, same_nameat.part.0+127, utimecmpat+1347, fts_stat+158
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27c6:
00000000000027c6         push       0x25
00000000000027cb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
00000000000027d0         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=emit_verbose+177, argmatch_valid+283
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27d6:
00000000000027d6         push       0x26
00000000000027db         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
00000000000027e0         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14, rpl_fts_read+758
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27e6:
00000000000027e6         push       0x27
00000000000027eb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ftruncate:        // ftruncate
00000000000027f0         jmp        qword [ftruncate@GOT]                       ; ftruncate, ftruncate@GOT, CODE XREF=copy_internal+15213, copy_internal+15426
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_27f6:
00000000000027f6         push       0x28
00000000000027fb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000002800         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=create_hole+29, copy_internal+12843, j_j_fseeko+49, rpl_fclose+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2806:
0000000000002806         push       0x29
000000000000280b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_gettimeofday:        // gettimeofday
0000000000002810         jmp        qword [gettimeofday@GOT]                    ; gettimeofday, gettimeofday@GOT, CODE XREF=randread_new+392, randread_new+632
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2816:
0000000000002816         push       0x2a
000000000000281b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000002820         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=main+1722, do_move+275, sub_47d0+971, copy+192, copy+223, copy+259, copy+290, copy+321, copy+352, extent_scan_read+516, extent_scan_read+756
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2826:
0000000000002826         push       0x2b
000000000000282b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000002830         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2836:
0000000000002836         push       0x2c
000000000000283b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_geteuid:        // geteuid
0000000000002840         jmp        qword [geteuid@GOT]                         ; geteuid, geteuid@GOT, CODE XREF=cp_options_default+27, copy_internal+16478, can_write_any_file+28
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2846:
0000000000002846         push       0x2d
000000000000284b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ioctl:        // ioctl
0000000000002850         jmp        qword [ioctl@GOT]                           ; ioctl, ioctl@GOT, CODE XREF=copy_internal+15703, extent_scan_read+121
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2856:
0000000000002856         push       0x2e
000000000000285b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_canonicalize_file_name:        // canonicalize_file_name
0000000000002860         jmp        qword [canonicalize_file_name@GOT]          ; canonicalize_file_name, canonicalize_file_name@GOT, CODE XREF=copy_internal+5911
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2866:
0000000000002866         push       0x2f
000000000000286b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000002870         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=prompt+754, sub_47d0+804, copy_internal+8549, copy_internal+12962, opendirat+85, fd_safer+38, fd_ring_clear+50, cwd_advance_fd+63, cwd_advance_fd+82, fts_safe_changedir+226, fts_safe_changedir+437
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2876:
0000000000002876         push       0x30
000000000000287b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_rewinddir:        // rewinddir
0000000000002880         jmp        qword [rewinddir@GOT]                       ; rewinddir, rewinddir@GOT, CODE XREF=backupfile_internal+257
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2886:
0000000000002886         push       0x31
000000000000288b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strspn:        // strspn
0000000000002890         jmp        qword [strspn@GOT]                          ; strspn, strspn@GOT, CODE XREF=try_tempname_len+104
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2896:
0000000000002896         push       0x32
000000000000289b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_closedir:        // closedir
00000000000028a0         jmp        qword [closedir@GOT]                        ; closedir, closedir@GOT, CODE XREF=prompt+224, prompt+790, sub_45b0+76, sub_45b0+116, backupfile_internal+887, backupfile_internal+1498, savedir+35, fts_lfree+29, fts_build+1348, fts_build+1444, fts_build+1647
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28a6:
00000000000028a6         push       0x33
00000000000028ab         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_posix_fadvise:        // posix_fadvise
00000000000028b0         jmp        qword [posix_fadvise@GOT]                   ; posix_fadvise, posix_fadvise@GOT, CODE XREF=fdadvise, fadvise+22
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28b6:
00000000000028b6         push       0x34
00000000000028bb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_read:        // read
00000000000028c0         jmp        qword [read@GOT]                            ; read, read@GOT, CODE XREF=sparse_copy+176
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28c6:
00000000000028c6         push       0x35
00000000000028cb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
00000000000028d0         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=sparse_copy+418, copy_internal+10290, backupfile_internal+355, backupfile_internal+489, quotearg_buffer_restyled+410, same_nameat+105, argmatch+111, argmatch_valid+150, argmatch_to_argument+56
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28d6:
00000000000028d6         push       0x36
00000000000028db         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fallocate:        // fallocate
00000000000028e0         jmp        qword [fallocate@GOT]                       ; fallocate, fallocate@GOT, CODE XREF=punch_hole+12
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28e6:
00000000000028e6         push       0x37
00000000000028eb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
00000000000028f0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+163, usage+200, usage+237, usage+274, usage+311, usage+348, usage+385, usage+422, usage+466, usage+1056, version_etc_arn+135
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_28f6:
00000000000028f6         push       0x38
00000000000028fb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_utimes:        // utimes
0000000000002900         jmp        qword [utimes@GOT]                          ; utimes, utimes@GOT, CODE XREF=fdutimens+848
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2906:
0000000000002906         push       0x39
000000000000290b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000002910         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=write_zeros+116, hash_initialize+177, hash_rehash+198, xcalloc+26, rpl_fts_open+72
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2916:
0000000000002916         push       0x3a
000000000000291b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___getdelim:        // __getdelim
0000000000002920         jmp        qword [__getdelim@GOT]                      ; __getdelim, __getdelim@GOT, CODE XREF=yesno+63
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2926:
0000000000002926         push       0x3b
000000000000292b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000002930         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=copy_internal+10318, copy_internal+14580, triple_compare_ino_str+36, direntry_cmp_name+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2936:
0000000000002936         push       0x3c
000000000000293b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dirfd:        // dirfd
0000000000002940         jmp        qword [dirfd@GOT]                           ; dirfd, dirfd@GOT, CODE XREF=fts_build+61, opendir_safer+24
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2946:
0000000000002946         push       0x3d
000000000000294b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fpathconf:        // fpathconf
0000000000002950         jmp        qword [fpathconf@GOT]                       ; fpathconf, fpathconf@GOT, CODE XREF=backupfile_internal+1123
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2956:
0000000000002956         push       0x3e
000000000000295b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_rpmatch:        // rpmatch
0000000000002960         jmp        qword [rpmatch@GOT]                         ; rpmatch, rpmatch@GOT, CODE XREF=yesno+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2966:
0000000000002966         push       0x3f
000000000000296b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_syscall:        // syscall
0000000000002970         jmp        qword [syscall@GOT]                         ; syscall, syscall@GOT, CODE XREF=renameatu+70
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2976:
0000000000002976         push       0x40
000000000000297b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mkfifo:        // mkfifo
0000000000002980         jmp        qword [mkfifo@GOT]                          ; mkfifo, mkfifo@GOT, CODE XREF=copy_internal+10701
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2986:
0000000000002986         push       0x41
000000000000298b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_umask:        // umask
0000000000002990         jmp        qword [umask@GOT]                           ; umask, umask@GOT, CODE XREF=cached_umask+18, cached_umask+33
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2996:
0000000000002996         push       0x42
000000000000299b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
00000000000029a0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=copy_internal+3629, backupfile_internal+214, backupfile_internal+673, backupfile_internal+981, backupfile_internal+1020, mdir_name+53, streamsavedir+626, xmemdup+35, fts_alloc+56, randread+190, randread+356
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29a6:
00000000000029a6         push       0x43
00000000000029ab         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___xmknod:        // __xmknod
00000000000029b0         jmp        qword [__xmknod@GOT]                        ; __xmknod, __xmknod@GOT, CODE XREF=copy_internal+9695, copy_internal+10664
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29b6:
00000000000029b6         push       0x44
00000000000029bb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
00000000000029c0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=fadvise+8, j_j_fseeko+36, rpl_fclose+7, rpl_fclose+75, fopen_safer+23
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29c6:
00000000000029c6         push       0x45
00000000000029cb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getgid:        // getgid
00000000000029d0         jmp        qword [getgid@GOT]                          ; getgid, getgid@GOT, CODE XREF=randread_new+508
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29d6:
00000000000029d6         push       0x46
00000000000029db         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___xstat:        // __xstat
00000000000029e0         jmp        qword [__xstat@GOT]                         ; __xstat, __xstat@GOT, CODE XREF=main+650, main+1341, copy_internal+215, copy_internal+8679, copy_internal+8707, copy_internal+10433, copy_internal+13642, copy_internal+13709, fdutimens+888, fdutimens+920, fts_stat+40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29e6:
00000000000029e6         push       0x47
00000000000029eb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_readdir:        // readdir
00000000000029f0         jmp        qword [readdir@GOT]                         ; readdir, readdir@GOT, CODE XREF=prompt+179, sub_45b0+35, backupfile_internal+307, backupfile_internal+730, streamsavedir+110, fts_build+498
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_29f6:
00000000000029f6         push       0x48
00000000000029fb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000002a00         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=samedir_template+34, areadlink_with_size+67, areadlink_with_size+126, backupfile_internal+154, mdir_name+31, mfile_name_concat+151, transfer_entries+293, hash_initialize+62, hash_insert_if_absent+517, utimecmpat+409, xmalloc+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a06:
0000000000002a06         push       0x49
0000000000002a0b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000002a10         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a16:
0000000000002a16         push       0x4a
0000000000002a1b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000002a20         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a26:
0000000000002a26         push       0x4b
0000000000002a2b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
0000000000002a30         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=copy_internal+8417, copy_internal+11970, fdutimens+387, fdutimens+570, fdutimens+660, fts_safe_changedir+189
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a36:
0000000000002a36         push       0x4c
0000000000002a3b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lchown:        // lchown
0000000000002a40         jmp        qword [lchown@GOT]                          ; lchown, lchown@GOT, CODE XREF=set_owner+179, set_owner+275, copy_internal+14237
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a46:
0000000000002a46         push       0x4d
0000000000002a4b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000002a50         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fflush+9, rpl_fclose+19
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a56:
0000000000002a56         push       0x4e
0000000000002a5b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fchdir:        // fchdir
0000000000002a60         jmp        qword [fchdir@GOT]                          ; fchdir, fchdir@GOT, CODE XREF=restore_initial_cwd+29, fts_safe_changedir+380, rpl_fts_close+231, rpl_fts_read+1677, rpl_fts_children+236
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a66:
0000000000002a66         push       0x4f
0000000000002a6b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000002a70         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=backupfile_internal+609, xrealloc+17, fts_sort+64, fts_palloc.isra.2+29
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a76:
0000000000002a76         push       0x50
0000000000002a7b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdopen:        // fdopen
0000000000002a80         jmp        qword [fdopen@GOT]                          ; fdopen, fdopen@GOT, CODE XREF=fopen_safer+80
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a86:
0000000000002a86         push       0x51
0000000000002a8b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_linkat:        // linkat
0000000000002a90         jmp        qword [linkat@GOT]                          ; linkat, linkat@GOT, CODE XREF=try_link+19, force_linkat+247
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2a96:
0000000000002a96         push       0x52
0000000000002a9b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000002aa0         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+66, usage+723, usage+916, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2aa6:
0000000000002aa6         push       0x53
0000000000002aab         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000002ab0         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+126, usage+711, usage+804, usage+865, usage+904, usage+1007, excise+370, emit_verbose+66, emit_verbose+124, create_hard_link+144, copy_internal+4139
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2ab6:
0000000000002ab6         push       0x54
0000000000002abb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fchmod:        // fchmod
0000000000002ac0         jmp        qword [fchmod@GOT]                          ; fchmod, fchmod@GOT, CODE XREF=fchmod_or_lchmod+9, chmod_or_fchmod+11
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2ac6:
0000000000002ac6         push       0x55
0000000000002acb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setvbuf:        // setvbuf
0000000000002ad0         jmp        qword [setvbuf@GOT]                         ; setvbuf, setvbuf@GOT, CODE XREF=randread_new+130
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2ad6:
0000000000002ad6         push       0x56
0000000000002adb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_chmod:        // chmod
0000000000002ae0         jmp        qword [chmod@GOT]                           ; chmod, chmod@GOT, CODE XREF=fchmod_or_lchmod+17, copy_internal+1949, copy_internal+7373, j_j_chmod
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2ae6:
0000000000002ae6         push       0x57
0000000000002aeb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mempcpy:        // mempcpy
0000000000002af0         jmp        qword [mempcpy@GOT]                         ; mempcpy, mempcpy@GOT, CODE XREF=copy_internal+10402, samedir_template+58, mfile_name_concat+173, mfile_name_concat+206
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2af6:
0000000000002af6         push       0x58
0000000000002afb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000002b00         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=fts_build+949, rpl_fts_read+745, rpl_fts_read+802, rpl_fts_read+998
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2b06:
0000000000002b06         push       0x59
0000000000002b0b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000002b10         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=restore_default_fscreatecon_or_die+46, main+743, main+1577, main+1615, main+1691, main+1758, main+1826, main+1893, main+1929, do_move+342, excise+252
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2b16:
0000000000002b16         push       0x5a
0000000000002b1b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___explicit_bzero_chk:        // __explicit_bzero_chk
0000000000002b20         jmp        qword [__explicit_bzero_chk@GOT]            ; __explicit_bzero_chk, __explicit_bzero_chk@GOT, CODE XREF=randint_free+16, randint_all_free+50, randread_free+24
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2b26:
0000000000002b26         push       0x5b
0000000000002b2b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
0000000000002b30         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=open_safer+35, try_file+17, randread_new+234
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2b36:
0000000000002b36         push       0x5c
0000000000002b3b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000002b40         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2b46:
0000000000002b46         push       0x5d
0000000000002b4b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fchown:        // fchown
0000000000002b50         jmp        qword [fchown@GOT]                          ; fchown, fchown@GOT, CODE XREF=set_owner+98, set_owner+498
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2b56:
0000000000002b56         push       0x5e
0000000000002b5b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
0000000000002b60         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=fopen_safer+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2b66:
0000000000002b66         push       0x5f
0000000000002b6b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_rename:        // rename
0000000000002b70         jmp        qword [rename@GOT]                          ; rename, rename@GOT, CODE XREF=copy_internal+2413, copy_internal+4034
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2b76:
0000000000002b76         push       0x60
0000000000002b7b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdopendir:        // fdopendir
0000000000002b80         jmp        qword [fdopendir@GOT]                       ; fdopendir, fdopendir@GOT, CODE XREF=prompt+131, sub_4540+107, opendirat+34, opendir_safer+123
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2b86:
0000000000002b86         push       0x61
0000000000002b8b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_futimens:        // futimens
0000000000002b90         jmp        qword [futimens@GOT]                        ; futimens, futimens@GOT, CODE XREF=fdutimens+141
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2b96:
0000000000002b96         push       0x62
0000000000002b9b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_euidaccess:        // euidaccess
0000000000002ba0         jmp        qword [euidaccess@GOT]                      ; euidaccess, euidaccess@GOT, CODE XREF=writable_destination+56
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2ba6:
0000000000002ba6         push       0x63
0000000000002bab         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fstatfs:        // fstatfs
0000000000002bb0         jmp        qword [fstatfs@GOT]                         ; fstatfs, fstatfs@GOT, CODE XREF=filesystem_type+200
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2bb6:
0000000000002bb6         push       0x64
0000000000002bbb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000002bc0         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2bc6:
0000000000002bc6         push       0x65
0000000000002bcb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_renameat:        // renameat
0000000000002bd0         jmp        qword [renameat@GOT]                        ; renameat, renameat@GOT, CODE XREF=force_linkat+290, force_symlinkat+266, renameatu+240
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2bd6:
0000000000002bd6         push       0x66
0000000000002bdb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getpagesize:        // getpagesize
0000000000002be0         jmp        qword [getpagesize@GOT]                     ; getpagesize, getpagesize@GOT, CODE XREF=copy_internal+12012
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2be6:
0000000000002be6         push       0x67
0000000000002beb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getppid:        // getppid
0000000000002bf0         jmp        qword [getppid@GOT]                         ; getppid, getppid@GOT, CODE XREF=randread_new+419, randread_new+759
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2bf6:
0000000000002bf6         push       0x68
0000000000002bfb         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000002c00         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+616, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2c06:
0000000000002c06         push       0x69
0000000000002c0b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000002c10         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2c16:
0000000000002c16         push       0x6a
0000000000002c1b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000002c20         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, prompt+524, prompt+735, overwrite_ok.isra.12+184, overwrite_ok.isra.12+265, hash_print_statistics+118, hash_print_statistics+143, hash_print_statistics+211, hash_print_statistics+246, version_etc_arn+55, version_etc_arn+105
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2c26:
0000000000002c26         push       0x6b
0000000000002c2b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000002c30         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_d560+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2c36:
0000000000002c36         push       0x6c
0000000000002c3b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_symlinkat:        // symlinkat
0000000000002c40         jmp        qword [symlinkat@GOT]                       ; symlinkat, symlinkat@GOT, CODE XREF=try_symlink+12, force_symlinkat+220
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2c46:
0000000000002c46         push       0x6d
0000000000002c4b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000002c50         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_d560+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2c56:
0000000000002c56         push       0x6e
0000000000002c5b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_futimesat:        // futimesat
0000000000002c60         jmp        qword [futimesat@GOT]                       ; futimesat, futimesat@GOT, CODE XREF=fdutimens+313, fdutimens+528, fdutimens+784
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2c66:
0000000000002c66         push       0x6f
0000000000002c6b         jmp        0x2560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000002c70         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=sub_d300+51
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2c76:
0000000000002c76         push       0x70
0000000000002c7b         jmp        0x2560
                        ; endp


        ; Section .plt.got
        ; Range: [0x2c80; 0x2c90[ (16 bytes)
        ; File offset : [11392; 11408[ (16 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2c80:
0000000000002c80         jmp        qword [qword_21bfc8]                        ; qword, End of unwind block (FDE at 0x17dbc), Begin of unwind block (FDE at 0x17de4), qword_21bfc8, CODE XREF=movefile+107, sub_47d0+285, sub_47d0+307, copy_internal+3644, copy_internal+3839, copy_internal+5989, copy_internal+7927, copy_internal+7935, copy_internal+7982, copy_internal+8584, copy_internal+8743
                        ; endp
0000000000002c86         align      8


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_21bff0:        // qword_21bff0
0000000000002c88         jmp        qword [qword_21bff0]                        ; qword, qword_21bff0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000002c8e         align      16


        ; Section .text
        ; Range: [0x2c90; 0x14ede[ (74318 bytes)
        ; File offset : [11408; 85726[ (74318 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fchmod_or_lchmod:
0000000000002c90         test       edi, edi                                    ; End of unwind block (FDE at 0x17de4), Begin of unwind block (FDE at 0x18074), CODE XREF=copy_internal+13994, copy_internal+16509, copy_internal+16549
0000000000002c92         mov        rax, rsi
0000000000002c95         mov        esi, edx
0000000000002c97         js         loc_2c9e

0000000000002c99         jmp        j_fchmod                                    ; fchmod
                        ; endp

                     loc_2c9e:
0000000000002c9e         mov        rdi, rax                                    ; argument "__file" for method j_chmod, CODE XREF=fchmod_or_lchmod+7
0000000000002ca1         jmp        j_chmod                                     ; chmod
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_48: int64_t, -72
        ;    var_C8: int32_t, -200
        ;    var_E0: int8_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int32_t, -248
        ;    var_FC: int32_t, -252
        ;    var_FF: int8_t, -255
        ;    var_100: int8_t, -256
        ;    var_101: int8_t, -257
        ;    var_102: int8_t, -258
        ;    var_103: int8_t, -259
        ;    var_104: int8_t, -260
        ;    var_105: int8_t, -261
        ;    var_106: int8_t, -262
        ;    var_107: int8_t, -263
        ;    var_108: int8_t, -264
        ;    var_109: int8_t, -265
        ;    var_10A: int8_t, -266
        ;    var_10B: int8_t, -267
        ;    var_10C: int8_t, -268
        ;    var_10D: int8_t, -269
        ;    var_10E: int8_t, -270
        ;    var_10F: int8_t, -271
        ;    var_110: int8_t, -272
        ;    var_111: int8_t, -273
        ;    var_112: int8_t, -274
        ;    var_113: int8_t, -275
        ;    var_114: int8_t, -276
        ;    var_117: int8_t, -279
        ;    var_118: int8_t, -280
        ;    var_119: int8_t, -281
        ;    var_11A: int8_t, -282
        ;    var_11B: int8_t, -283
        ;    var_11C: int8_t, -284
        ;    var_120: int32_t, -288
        ;    var_124: int32_t, -292
        ;    var_128: int32_t, -296
        ;    var_12C: int32_t, -300
        ;    var_130: int32_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328


                     restore_default_fscreatecon_or_die:
0000000000002ca6         push       rbx                                         ; End of unwind block (FDE at 0x18074), Begin of unwind block (FDE at 0x18088), CODE XREF=copy_internal+4368
0000000000002ca7         call       j___errno_location                          ; __errno_location
0000000000002cac         lea        rsi, qword [aFailedToRestor]                ; argument "msgid" for method j_dcgettext, "failed to restore the default file creation context"
0000000000002cb3         mov        rbx, rax
0000000000002cb6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002cbb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cbd         mov        dword [rax], 0x5f
0000000000002cc3         call       j_dcgettext                                 ; dcgettext
0000000000002cc8         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000002cca         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002ccd         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002cd2         xor        eax, eax
0000000000002cd4         call       j_error                                     ; error
0000000000002cd9         nop        dword [rax]                                 ; End of unwind block (FDE at 0x18088)
                     main:
0000000000002ce0         push       r15                                         ; Begin of unwind block (FDE at 0x17e98), DATA XREF=_start+29
0000000000002ce2         push       r14
0000000000002ce4         push       r13
0000000000002ce6         push       r12
0000000000002ce8         push       rbp
0000000000002ce9         push       rbx
0000000000002cea         mov        ebp, edi
0000000000002cec         mov        rbx, rsi
0000000000002cef         sub        rsp, 0x118
0000000000002cf6         mov        rdi, qword [rsi]
0000000000002cf9         mov        rax, qword [fs:0x28]
0000000000002d02         mov        qword [rsp+0x150+var_48], rax
0000000000002d0a         xor        eax, eax
0000000000002d0c         lea        r13, qword [rsp+0x150+var_130]
0000000000002d11         call       set_program_name                            ; set_program_name
0000000000002d16         lea        rsi, qword [aSSUnbackupn+20]                ; argument "__locale" for method j_setlocale, 0x1678c
0000000000002d1d         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000002d22         call       j_setlocale                                 ; setlocale
0000000000002d27         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000002d2e         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000002d35         call       j_bindtextdomain                            ; bindtextdomain
0000000000002d3a         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000002d41         call       j_textdomain                                ; textdomain
0000000000002d46         lea        rdi, qword [close_stdin]                    ; argument "__func" for method atexit, close_stdin
0000000000002d4d         call       atexit                                      ; atexit
0000000000002d52         mov        rdi, r13
0000000000002d55         call       cp_options_default                          ; cp_options_default
0000000000002d5a         xor        edi, edi                                    ; argument "__fd" for method j_isatty
0000000000002d5c         mov        byte [rsp+0x150+var_11C], 0x0
0000000000002d61         mov        dword [rsp+0x150+var_F8], 0x1
0000000000002d69         mov        dword [rsp+0x150+var_12C], 0x2
0000000000002d71         mov        byte [rsp+0x150+var_11B], 0x0
0000000000002d76         mov        byte [rsp+0x150+var_11A], 0x0
0000000000002d7b         mov        byte [rsp+0x150+var_119], 0x0
0000000000002d80         mov        dword [rsp+0x150+var_128], 0x4
0000000000002d88         mov        byte [rsp+0x150+var_118], 0x1
0000000000002d8d         mov        byte [rsp+0x150+var_117], 0x0
0000000000002d92         mov        byte [rsp+0x150+var_114], 0x0
0000000000002d97         mov        byte [rsp+0x150+var_113], 0x1
0000000000002d9c         mov        byte [rsp+0x150+var_10E], 0x1
0000000000002da1         mov        byte [rsp+0x150+var_112], 0x1
0000000000002da6         mov        byte [rsp+0x150+var_111], 0x1
0000000000002dab         mov        byte [rsp+0x150+var_110], 0x0
0000000000002db0         mov        byte [rsp+0x150+var_10B], 0x0
0000000000002db5         mov        byte [rsp+0x150+var_10F], 0x0
0000000000002dba         mov        byte [rsp+0x150+var_107], 0x0
0000000000002dbf         mov        byte [rsp+0x150+var_10D], 0x1
0000000000002dc4         mov        byte [rsp+0x150+var_10C], 0x0
0000000000002dc9         mov        byte [rsp+0x150+var_10A], 0x0
0000000000002dce         mov        byte [rsp+0x150+var_109], 0x1
0000000000002dd3         mov        byte [rsp+0x150+var_108], 0x0
0000000000002dd8         mov        byte [rsp+0x150+var_106], 0x1
0000000000002ddd         mov        dword [rsp+0x150+var_124], 0x2
0000000000002de5         mov        byte [rsp+0x150+var_104], 0x0
0000000000002dea         mov        byte [rsp+0x150+var_105], 0x0
0000000000002def         mov        dword [rsp+0x150+var_120], 0x0
0000000000002df7         call       j_isatty                                    ; isatty
0000000000002dfc         test       eax, eax
0000000000002dfe         lea        rax, qword [rsp+0x150+var_E0]
0000000000002e03         mov        byte [rsp+0x150+var_100], 0x0
0000000000002e08         setne      byte [rsp+0x150+var_101]
0000000000002e0d         mov        byte [rsp+0x150+var_103], 0x0
0000000000002e12         xor        r12d, r12d
0000000000002e15         mov        byte [rsp+0x150+var_102], 0x0
0000000000002e1a         mov        qword [rsp+0x150+var_F0], 0x0
0000000000002e23         xor        r15d, r15d
0000000000002e26         mov        qword [rsp+0x150+var_E8], 0x0
0000000000002e2f         mov        byte [rsp+0x150+var_140], 0x0
0000000000002e34         xor        r14d, r14d
0000000000002e37         mov        qword [rsp+0x150+var_148], 0x0
0000000000002e40         mov        qword [rsp+0x150+var_138], rax
0000000000002e45         nop        dword [rax]

                     loc_2e48:
0000000000002e48         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options, CODE XREF=main+445, main+462, main+501, main+534, main+687, main+757, main+773, main+802, main+824, main+852, main+872
0000000000002e4f         lea        rdx, qword [aBfintuvstz]                    ; argument "__shortopts" for method j_getopt_long, "bfint:uvS:TZ"
0000000000002e56         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000002e59         mov        rsi, rbx                                    ; argument "___argv" for method j_getopt_long
0000000000002e5c         mov        edi, ebp                                    ; argument "___argc" for method j_getopt_long
0000000000002e5e         call       j_getopt_long                               ; getopt_long
0000000000002e63         cmp        eax, 0xffffffff
0000000000002e66         je         loc_304d

0000000000002e6c         cmp        eax, 0x66
0000000000002e6f         je         loc_3010

0000000000002e75         jle        loc_2ea0

0000000000002e77         cmp        eax, 0x74
0000000000002e7a         je         loc_2f50

0000000000002e80         jle        loc_2ee0

0000000000002e82         cmp        eax, 0x76
0000000000002e85         je         loc_2fe0

0000000000002e8b         jl         loc_2fd0

0000000000002e91         add        eax, 0xffffff80
0000000000002e94         jne        loc_2ebe

0000000000002e96         mov        byte [remove_trailing_slashes], 0x1         ; remove_trailing_slashes
0000000000002e9d         jmp        loc_2e48
0000000000002e9f         align      32

                     loc_2ea0:
0000000000002ea0         cmp        eax, 0x53                                   ; CODE XREF=main+405
0000000000002ea3         je         loc_2ff0

0000000000002ea9         jle        loc_2f00

0000000000002eab         cmp        eax, 0x5a
0000000000002eae         je         loc_2e48

0000000000002eb0         cmp        eax, 0x62
0000000000002eb3         je         loc_3020

0000000000002eb9         cmp        eax, 0x54
0000000000002ebc         je         loc_2ed0

                     loc_2ebe:
0000000000002ebe         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+436, main+524, main+1488, main+1582, main+1620
0000000000002ec3         call       usage                                       ; usage
0000000000002ec8         nop        dword [rax+rax]

                     loc_2ed0:
0000000000002ed0         mov        byte [rsp+0x150+var_140], 0x1               ; CODE XREF=main+476
0000000000002ed5         jmp        loc_2e48
0000000000002eda         align      32

                     loc_2ee0:
0000000000002ee0         cmp        eax, 0x69                                   ; CODE XREF=main+416
0000000000002ee3         je         loc_3040

0000000000002ee9         cmp        eax, 0x6e
0000000000002eec         jne        loc_2ebe

0000000000002eee         mov        dword [rsp+0x150+var_128], 0x2
0000000000002ef6         jmp        loc_2e48
0000000000002efb         align      256

                     loc_2f00:
0000000000002f00         cmp        eax, 0xffffff7d                             ; CODE XREF=main+457
0000000000002f05         jne        loc_32ab

0000000000002f0b         lea        rax, qword [aJimMeyering]                   ; "Jim Meyering"
0000000000002f12         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002f19         mov        rcx, qword [Version]                        ; Version
0000000000002f20         push       0x0
0000000000002f22         lea        r9, qword [aDavidMackenzie]                 ; "David MacKenzie"
0000000000002f29         lea        r8, qword [aMikeParker]                     ; "Mike Parker"
0000000000002f30         push       rax
0000000000002f31         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x14fae
0000000000002f38         lea        rsi, qword [aValidstatusSta+22]             ; 0x14f35
0000000000002f3f         xor        eax, eax
0000000000002f41         call       version_etc                                 ; version_etc
0000000000002f46         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000002f48         call       j_exit                                      ; exit
                        ; endp
0000000000002f4d         align      16

                     loc_2f50:
0000000000002f50         test       r12, r12                                    ; CODE XREF=main+410
0000000000002f53         jne        loc_339f

0000000000002f59         mov        rdx, qword [rsp+0x150+var_138]              ; argument "__stat_buf" for method j___xstat
0000000000002f5e         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; argument "__filename" for method j___xstat, optarg@@GLIBC_2.2.5
0000000000002f65         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002f6a         call       j___xstat                                   ; __xstat
0000000000002f6f         test       eax, eax
0000000000002f71         jne        loc_3407

0000000000002f77         mov        eax, dword [rsp+0x150+var_C8]
0000000000002f7e         mov        r12, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002f85         and        eax, 0xf000
0000000000002f8a         cmp        eax, 0x4000
0000000000002f8f         je         loc_2e48

0000000000002f95         mov        rsi, r12
0000000000002f98         mov        edi, 0x4
0000000000002f9d         call       quotearg_style                              ; quotearg_style
0000000000002fa2         lea        rsi, qword [aTargetSIsNotAD]                ; argument "msgid" for method j_dcgettext, "target %s is not a directory"
0000000000002fa9         mov        rbx, rax
0000000000002fac         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002fb1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002fb3         call       j_dcgettext                                 ; dcgettext
0000000000002fb8         mov        rcx, rbx
0000000000002fbb         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002fbe         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002fc0         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002fc5         xor        eax, eax
0000000000002fc7         call       j_error                                     ; error
0000000000002fcc         nop        dword [rax]

                     loc_2fd0:
0000000000002fd0         mov        byte [rsp+0x150+var_103], 0x1               ; CODE XREF=main+427
0000000000002fd5         jmp        loc_2e48
0000000000002fda         align      32

                     loc_2fe0:
0000000000002fe0         mov        byte [rsp+0x150+var_102], 0x1               ; CODE XREF=main+421
0000000000002fe5         jmp        loc_2e48
0000000000002fea         align      16

                     loc_2ff0:
0000000000002ff0         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+451
0000000000002ff7         mov        r14d, 0x1
0000000000002ffd         mov        qword [rsp+0x150+var_148], rax
0000000000003002         jmp        loc_2e48
0000000000003007         align      16

                     loc_3010:
0000000000003010         mov        dword [rsp+0x150+var_128], 0x1              ; CODE XREF=main+399
0000000000003018         jmp        loc_2e48
000000000000301d         align      32

                     loc_3020:
0000000000003020         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+467
0000000000003027         mov        r14d, 0x1
000000000000302d         test       rax, rax
0000000000003030         cmovne     r15, rax
0000000000003034         jmp        loc_2e48
0000000000003039         align      64

                     loc_3040:
0000000000003040         mov        dword [rsp+0x150+var_128], 0x3              ; CODE XREF=main+515
0000000000003048         jmp        loc_2e48

                     loc_304d:
000000000000304d         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+390
0000000000003054         sub        ebp, eax
0000000000003056         lea        rbx, qword [rbx+rax*8]
000000000000305a         xor        eax, eax
000000000000305c         test       r12, r12
000000000000305f         sete       al
0000000000003062         cmp        eax, ebp
0000000000003064         jge        loc_32d5

000000000000306a         cmp        byte [rsp+0x150+var_140], 0x0
000000000000306f         jne        loc_3121

0000000000003075         test       r12, r12
0000000000003078         je         loc_31de

                     loc_307e:
000000000000307e         cmp        dword [rsp+0x150+var_128], 0x2              ; CODE XREF=main+1101, main+1397, main+1439
0000000000003083         je         loc_3155

0000000000003089         test       r14b, r14b
000000000000308c         je         loc_3163

0000000000003092         lea        rsi, qword [aBackupType]                    ; argument "msgid" for method j_dcgettext, "backup type"
0000000000003099         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000309b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000030a0         call       j_dcgettext                                 ; dcgettext
00000000000030a5         mov        rsi, r15
00000000000030a8         mov        rdi, rax
00000000000030ab         call       xget_version                                ; xget_version

                     loc_30b0:
00000000000030b0         mov        rdi, qword [rsp+0x150+var_148]              ; CODE XREF=main+1157
00000000000030b5         mov        dword [rsp+0x150+var_130], eax
00000000000030b9         call       set_simple_backup_suffix                    ; set_simple_backup_suffix
00000000000030be         call       hash_init                                   ; hash_init
00000000000030c3         test       r12, r12
00000000000030c6         je         loc_31c0

00000000000030cc         cmp        ebp, 0x1
00000000000030cf         jne        loc_316a

00000000000030d5         mov        rdi, qword [rbx]
00000000000030d8         mov        rcx, r13
00000000000030db         mov        edx, 0x1
00000000000030e0         mov        rsi, r12
00000000000030e3         mov        byte [rsp+0x150+var_FF], 0x1
00000000000030e8         call       movefile                                    ; movefile
00000000000030ed         mov        r14d, eax

                     loc_30f0:
00000000000030f0         xor        r14d, 0x1                                   ; CODE XREF=main+1243, main+1273
00000000000030f4         mov        rcx, qword [rsp+0x150+var_48]
00000000000030fc         xor        rcx, qword [fs:0x28]
0000000000003105         movzx      eax, r14b
0000000000003109         jne        loc_346e

000000000000310f         add        rsp, 0x118
0000000000003116         pop        rbx
0000000000003117         pop        rbp
0000000000003118         pop        r12
000000000000311a         pop        r13
000000000000311c         pop        r14
000000000000311e         pop        r15
0000000000003120         ret
                        ; endp

                     loc_3121:
0000000000003121         test       r12, r12                                    ; CODE XREF=main+911
0000000000003124         jne        loc_344a

000000000000312a         cmp        ebp, 0x2
000000000000312d         jle        loc_307e

0000000000003133         mov        rsi, qword [rbx+0x10]
0000000000003137         mov        edi, 0x4
000000000000313c         call       quotearg_style                              ; quotearg_style
0000000000003141         mov        edx, 0x5
0000000000003146         mov        rbx, rax
0000000000003149         lea        rsi, qword [aExtraOperandS]                 ; "extra operand %s"
0000000000003150         jmp        loc_32f6

                     loc_3155:
0000000000003155         test       r14b, r14b                                  ; CODE XREF=main+931
0000000000003158         mov        byte [rsp+0x150+var_103], 0x0
000000000000315d         jne        loc_3313

                     loc_3163:
0000000000003163         xor        eax, eax                                    ; CODE XREF=main+940
0000000000003165         jmp        loc_30b0

                     loc_316a:
000000000000316a         lea        r15d, dword [rbp-1]                         ; CODE XREF=main+1007
000000000000316e         mov        rdi, r13
0000000000003171         mov        r14d, 0x1
0000000000003177         call       dest_info_init                              ; dest_info_init
000000000000317c         lea        rax, qword [r15+2]
0000000000003180         mov        r15d, 0x1
0000000000003186         mov        qword [rsp+0x150+var_148], rax
000000000000318b         nop        dword [rax+rax]

                     loc_3190:
0000000000003190         mov        rdi, qword [rbx+r15*8-8]                    ; CODE XREF=main+1241
0000000000003195         cmp        ebp, r15d
0000000000003198         mov        rcx, r13
000000000000319b         mov        edx, 0x1
00000000000031a0         mov        rsi, r12
00000000000031a3         sete       byte [rsp+0x150+var_FF]
00000000000031a8         add        r15, 0x1
00000000000031ac         call       movefile                                    ; movefile
00000000000031b1         and        r14d, eax
00000000000031b4         cmp        r15, qword [rsp+0x150+var_148]
00000000000031b9         jne        loc_3190

00000000000031bb         jmp        loc_30f0

                     loc_31c0:
00000000000031c0         mov        rsi, qword [rbx+8]                          ; CODE XREF=main+998
00000000000031c4         mov        rdi, qword [rbx]
00000000000031c7         mov        rcx, r13
00000000000031ca         xor        edx, edx
00000000000031cc         mov        byte [rsp+0x150+var_FF], 0x1
00000000000031d1         call       movefile                                    ; movefile
00000000000031d6         mov        r14d, eax
00000000000031d9         jmp        loc_30f0

                     loc_31de:
00000000000031de         cmp        ebp, 0x1                                    ; CODE XREF=main+920
00000000000031e1         je         loc_3380

00000000000031e7         cmp        ebp, 0x2
00000000000031ea         je         loc_3284

00000000000031f0         cmp        dword [rsp+0x150+var_FC], 0x0
00000000000031f5         movsxd     rcx, ebp
00000000000031f8         je         loc_3347

                     loc_31fe:
00000000000031fe         movsxd     rcx, ebp                                    ; CODE XREF=main+1514
0000000000003201         lea        rdx, qword [rsp+0x150+var_E0]               ; argument "__stat_buf" for method j___xstat
0000000000003206         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
000000000000320b         mov        rax, qword [rbx+rcx*8-8]
0000000000003210         mov        qword [rsp+0x150+var_140], rcx
0000000000003215         mov        rsi, rax                                    ; argument "__filename" for method j___xstat
0000000000003218         mov        qword [rsp+0x150+var_138], rax
000000000000321d         call       j___xstat                                   ; __xstat
0000000000003222         test       eax, eax
0000000000003224         mov        rcx, qword [rsp+0x150+var_140]
0000000000003229         je         loc_325a

000000000000322b         call       j___errno_location                          ; __errno_location
0000000000003230         mov        r8d, dword [rax]
0000000000003233         mov        rcx, qword [rsp+0x150+var_140]
0000000000003238         test       r8d, r8d
000000000000323b         je         loc_325a

000000000000323d         cmp        r8d, 0x2
0000000000003241         jne        loc_33c3

                     loc_3247:
0000000000003247         cmp        ebp, 0x2                                    ; CODE XREF=main+1419
000000000000324a         jne        loc_3347

                     loc_3250:
0000000000003250         mov        ebp, 0x2                                    ; CODE XREF=main+1481, main+1520
0000000000003255         jmp        loc_307e

                     loc_325a:
000000000000325a         mov        eax, dword [rsp+0x150+var_C8]               ; CODE XREF=main+1353, main+1371
0000000000003261         and        eax, 0xf000
0000000000003266         cmp        eax, 0x4000
000000000000326b         jne        loc_3247

000000000000326d         sub        ebp, 0x1
0000000000003270         mov        dword [rsp+0x150+var_FC], 0xffffffff
0000000000003278         movsxd     rax, ebp
000000000000327b         mov        r12, qword [rbx+rax*8]
000000000000327f         jmp        loc_307e

                     loc_3284:
0000000000003284         mov        rcx, qword [rbx+8]                          ; CODE XREF=main+1290
0000000000003288         mov        rsi, qword [rbx]
000000000000328b         mov        edx, 0xffffff9c
0000000000003290         mov        r8d, 0x1
0000000000003296         mov        edi, edx
0000000000003298         call       renameatu                                   ; renameatu
000000000000329d         test       eax, eax
000000000000329f         jne        loc_32bd

00000000000032a1         mov        dword [rsp+0x150+var_FC], 0x0
00000000000032a9         jmp        loc_3250

                     loc_32ab:
00000000000032ab         cmp        eax, 0xffffff7e                             ; CODE XREF=main+549
00000000000032b0         jne        loc_2ebe

00000000000032b6         xor        edi, edi                                    ; argument #1 for method usage
00000000000032b8         call       usage                                       ; usage

                     loc_32bd:
00000000000032bd         call       j___errno_location                          ; __errno_location, CODE XREF=main+1471
00000000000032c2         mov        eax, dword [rax]
00000000000032c4         test       eax, eax
00000000000032c6         mov        dword [rsp+0x150+var_FC], eax
00000000000032ca         jne        loc_31fe

00000000000032d0         jmp        loc_3250

                     loc_32d5:
00000000000032d5         sub        ebp, 0x1                                    ; CODE XREF=main+900
00000000000032d8         jne        loc_3339

00000000000032da         mov        rsi, qword [rbx]
00000000000032dd         mov        edi, 0x4
00000000000032e2         call       quotearg_style                              ; quotearg_style
00000000000032e7         lea        rsi, qword [aMissingDestina]                ; "missing destination file operand after %s"
00000000000032ee         mov        rbx, rax
00000000000032f1         mov        edx, 0x5

                     loc_32f6:
00000000000032f6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+1136
00000000000032f8         call       j_dcgettext                                 ; dcgettext
00000000000032fd         mov        rcx, rbx
0000000000003300         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003303         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003305         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003307         xor        eax, eax
0000000000003309         call       j_error                                     ; error
000000000000330e         jmp        loc_2ebe

                     loc_3313:
0000000000003313         lea        rsi, qword [aOptionsBackupA]                ; "options --backup and --no-clobber are mutually exclusive", CODE XREF=main+1149
000000000000331a         mov        edx, 0x5

                     loc_331f:
000000000000331f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+1637
0000000000003321         call       j_dcgettext                                 ; dcgettext
0000000000003326         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003328         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000332b         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000332d         xor        eax, eax
000000000000332f         call       j_error                                     ; error
0000000000003334         jmp        loc_2ebe

                     loc_3339:
0000000000003339         mov        edx, 0x5                                    ; CODE XREF=main+1528
000000000000333e         lea        rsi, qword [aMissingFileOpe]                ; "missing file operand"
0000000000003345         jmp        loc_331f

                     loc_3347:
0000000000003347         mov        rsi, qword [rbx+rcx*8-8]                    ; CODE XREF=main+1304, main+1386
000000000000334c         mov        edi, 0x4
0000000000003351         call       quotearg_style                              ; quotearg_style
0000000000003356         lea        rsi, qword [aTargetSIsNotAD]                ; argument "msgid" for method j_dcgettext, "target %s is not a directory"
000000000000335d         mov        rbx, rax
0000000000003360         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003365         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003367         call       j_dcgettext                                 ; dcgettext
000000000000336c         mov        rcx, rbx
000000000000336f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003372         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003374         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003379         xor        eax, eax
000000000000337b         call       j_error                                     ; error

                     loc_3380:
0000000000003380         lea        rcx, qword [__PRETTY_FUNCTION__.7244]       ; argument "__function" for method j___assert_fail, __PRETTY_FUNCTION__.7244, CODE XREF=main+1281
0000000000003387         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/mv.c"
000000000000338e         lea        rdi, qword [a2Nfiles]                       ; argument "__assertion" for method j___assert_fail, "2 <= n_files"
0000000000003395         mov        edx, 0x1c9                                  ; argument "__line" for method j___assert_fail
000000000000339a         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_339f:
000000000000339f         lea        rsi, qword [aMultipleTarget]                ; argument "msgid" for method j_dcgettext, "multiple target directories specified", CODE XREF=main+627
00000000000033a6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000033ab         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000033ad         call       j_dcgettext                                 ; dcgettext
00000000000033b2         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000033b4         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000033b7         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000033bc         xor        eax, eax
00000000000033be         call       j_error                                     ; error

                     loc_33c3:
00000000000033c3         mov        rsi, qword [rsp+0x150+var_138]              ; CODE XREF=main+1377
00000000000033c8         mov        edi, 0x4
00000000000033cd         mov        dword [rsp+0x150+var_148], r8d
00000000000033d2         call       quotearg_style                              ; quotearg_style
00000000000033d7         lea        rsi, qword [aFailedToAccess]                ; argument "msgid" for method j_dcgettext, "failed to access %s"
00000000000033de         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000033e3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000033e5         mov        rbx, rax
00000000000033e8         call       j_dcgettext                                 ; dcgettext
00000000000033ed         mov        r8d, dword [rsp+0x150+var_148]
00000000000033f2         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000033f5         mov        rcx, rbx
00000000000033f8         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000033fd         xor        eax, eax
00000000000033ff         mov        esi, r8d                                    ; argument "__errnum" for method j_error
0000000000003402         call       j_error                                     ; error

                     loc_3407:
0000000000003407         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+657
000000000000340e         mov        edi, 0x4
0000000000003413         call       quotearg_style                              ; quotearg_style
0000000000003418         lea        rsi, qword [aFailedToAccess]                ; argument "msgid" for method j_dcgettext, "failed to access %s"
000000000000341f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003424         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003426         mov        rbp, rax
0000000000003429         call       j_dcgettext                                 ; dcgettext
000000000000342e         mov        rbx, rax
0000000000003431         call       j___errno_location                          ; __errno_location
0000000000003436         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003438         mov        rcx, rbp
000000000000343b         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000343e         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003443         xor        eax, eax
0000000000003445         call       j_error                                     ; error

                     loc_344a:
000000000000344a         lea        rsi, qword [aCannotCombineT]                ; argument "msgid" for method j_dcgettext, "cannot combine --target-directory (-t) and --no-target-directory (-T)", CODE XREF=main+1092
0000000000003451         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003456         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003458         call       j_dcgettext                                 ; dcgettext
000000000000345d         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000345f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003462         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003467         xor        eax, eax
0000000000003469         call       j_error                                     ; error

                     loc_346e:
000000000000346e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+1065
                        ; endp
0000000000003473         align      128                                         ; End of unwind block (FDE at 0x17e98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000003480         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x17d8c)
0000000000003482         mov        r9, rdx
0000000000003485         pop        rsi
0000000000003486         mov        rdx, rsp
0000000000003489         and        rsp, 0xfffffffffffffff0
000000000000348d         push       rax
000000000000348e         push       rsp
000000000000348f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000003496         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000349d         lea        rdi, qword [main]                           ; main
00000000000034a4         call       qword [qword_21bfd0+8]                      ; 0x21bfd8
00000000000034aa         hlt
                        ; endp
00000000000034ab         align      16                                          ; End of unwind block (FDE at 0x17d8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
00000000000034b0         lea        rdi, qword [__TMC_END__]                    ; __TMC_END__, CODE XREF=__do_global_dtors_aux+35
00000000000034b7         push       rbp
00000000000034b8         lea        rax, qword [__TMC_END__]                    ; __TMC_END__
00000000000034bf         cmp        rax, rdi
00000000000034c2         mov        rbp, rsp
00000000000034c5         je         loc_34e0

00000000000034c7         mov        rax, qword [qword_21bfd0]                   ; qword_21bfd0
00000000000034ce         test       rax, rax
00000000000034d1         je         loc_34e0

00000000000034d3         pop        rbp
00000000000034d4         jmp        rax
                        ; endp
00000000000034d6         align      32

                     loc_34e0:
00000000000034e0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
00000000000034e1         ret
                        ; endp
00000000000034e2         align      16

                     register_tm_clones:
00000000000034f0         lea        rdi, qword [__TMC_END__]                    ; __TMC_END__, CODE XREF=frame_dummy+5
00000000000034f7         lea        rsi, qword [__TMC_END__]                    ; __TMC_END__
00000000000034fe         push       rbp
00000000000034ff         sub        rsi, rdi
0000000000003502         mov        rbp, rsp
0000000000003505         sar        rsi, 0x3
0000000000003509         mov        rax, rsi
000000000000350c         shr        rax, 0x3f
0000000000003510         add        rsi, rax
0000000000003513         sar        rsi, 0x1
0000000000003516         je         loc_3530

0000000000003518         mov        rax, qword [qword_21bfe8]                   ; qword_21bfe8
000000000000351f         test       rax, rax
0000000000003522         je         loc_3530

0000000000003524         pop        rbp
0000000000003525         jmp        rax
                        ; endp
0000000000003527         align      16

                     loc_3530:
0000000000003530         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000003531         ret
                        ; endp
0000000000003532         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000003540         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000003547         jne        loc_3578

0000000000003549         cmp        qword [qword_21bff0], 0x0                   ; qword_21bff0
0000000000003551         push       rbp
0000000000003552         mov        rbp, rsp
0000000000003555         je         loc_3563

0000000000003557         mov        rdi, qword [__dso_handle]                   ; __dso_handle
000000000000355e         call       j_qword_21bff0                              ; qword_21bff0

                     loc_3563:
0000000000003563         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000003568         mov        byte [completed.7697], 0x1                  ; completed.7697
000000000000356f         pop        rbp
0000000000003570         ret
                        ; endp
0000000000003571         align      8

                     loc_3578:
0000000000003578         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
000000000000357a         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000003580         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000003581         mov        rbp, rsp
0000000000003584         pop        rbp
0000000000003585         jmp        register_tm_clones                          ; register_tm_clones
000000000000358a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_3D: int8_t, -61
        ;    var_3E: int8_t, -62
        ;    var_3F: int8_t, -63
        ;    var_40: int8_t, -64
        ;    var_48: int64_t, -72
        ;    var_4E: int8_t, -78
        ;    var_4F: int8_t, -79
        ;    var_50: int8_t, -80
        ;    var_54: int32_t, -84
        ;    var_58: int8_t, -88
        ;    var_59: int8_t, -89
        ;    var_5A: int8_t, -90


                     do_move:
0000000000003590         push       rbp                                         ; Begin of unwind block (FDE at 0x17dfc), CODE XREF=movefile+47, movefile+97
0000000000003591         push       rbx
0000000000003592         mov        rcx, rdx
0000000000003595         mov        rbp, rdx
0000000000003598         xor        edx, edx
000000000000359a         mov        rbx, rdi
000000000000359d         sub        rsp, 0x58
00000000000035a1         lea        r9, qword [rsp+0x68+var_59]
00000000000035a6         lea        r8, qword [rsp+0x68+var_5A]
00000000000035ab         mov        rax, qword [fs:0x28]
00000000000035b4         mov        qword [rsp+0x68+var_20], rax
00000000000035b9         xor        eax, eax
00000000000035bb         call       copy                                        ; copy
00000000000035c0         test       al, al
00000000000035c2         je         loc_3660

00000000000035c8         cmp        byte [rsp+0x68+var_5A], 0x0
00000000000035cd         jne        loc_3680

00000000000035d3         cmp        byte [rsp+0x68+var_59], 0x1
00000000000035d8         je         loc_3660

00000000000035de         test       rbx, rbx
00000000000035e1         je         loc_3660

00000000000035e3         lea        rdi, qword [dev_ino_buf.7162]               ; dev_ino_buf.7162
00000000000035ea         mov        byte [rsp+0x68+var_58], 0x0
00000000000035ef         mov        byte [rsp+0x68+var_4E], 0x1
00000000000035f4         mov        byte [rsp+0x68+var_4F], 0x1
00000000000035f9         mov        byte [rsp+0x68+var_50], 0x0
00000000000035fe         mov        dword [rsp+0x68+var_54], 0x5
0000000000003606         mov        byte [rsp+0x68+var_3F], 0x0
000000000000360b         mov        byte [rsp+0x68+var_3E], 0x0
0000000000003610         mov        byte [rsp+0x68+var_3D], 0x1
0000000000003615         call       get_root_dev_ino                            ; get_root_dev_ino
000000000000361a         test       rax, rax
000000000000361d         mov        qword [rsp+0x68+var_48], rax
0000000000003622         je         loc_36a8

0000000000003628         movzx      eax, byte [rbp+0x2e]
000000000000362c         lea        rsi, qword [rsp+0x68+var_58]
0000000000003631         lea        rdi, qword [rsp+0x68+var_38]                ; argument "e" for method rm
0000000000003636         mov        byte [rsp+0x68+var_40], 0x0
000000000000363b         mov        qword [rsp+0x68+var_38], rbx
0000000000003640         mov        qword [rsp+0x68+var_30], 0x0
0000000000003649         mov        byte [rsp+0x68+var_3E], al
000000000000364d         call       rm                                          ; rm
0000000000003652         lea        edx, dword [rax-2]
0000000000003655         cmp        edx, 0x2
0000000000003658         ja         loc_3689

000000000000365a         cmp        eax, 0x4
000000000000365d         setne      al

                     loc_3660:
0000000000003660         mov        rcx, qword [rsp+0x68+var_20]                ; CODE XREF=do_move+50, do_move+72, do_move+81, do_move+242
0000000000003665         xor        rcx, qword [fs:0x28]
000000000000366e         jne        loc_3684

0000000000003670         add        rsp, 0x58
0000000000003674         pop        rbx
0000000000003675         pop        rbp
0000000000003676         ret
                        ; endp
0000000000003677         align      128

                     loc_3680:
0000000000003680         xor        eax, eax                                    ; CODE XREF=do_move+61
0000000000003682         jmp        loc_3660

                     loc_3684:
0000000000003684         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=do_move+222
                        ; endp

                     loc_3689:
0000000000003689         lea        rcx, qword [__PRETTY_FUNCTION__.7189]       ; argument "__function" for method j___assert_fail, "do_move", CODE XREF=do_move+200
0000000000003690         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/mv.c"
0000000000003697         lea        rdi, qword [aValidstatusSta]                ; argument "__assertion" for method j___assert_fail, "VALID_STATUS (status)"
000000000000369e         mov        edx, 0xef                                   ; argument "__line" for method j___assert_fail
00000000000036a3         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_36a8:
00000000000036a8         lea        rsi, qword [aLibs+6]                        ; 0x16a8e, CODE XREF=do_move+146
00000000000036af         mov        edi, 0x4
00000000000036b4         call       quotearg_style                              ; quotearg_style
00000000000036b9         lea        rsi, qword [aFailedToGetAtt]                ; argument "msgid" for method j_dcgettext, "failed to get attributes of %s"
00000000000036c0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000036c5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000036c7         mov        rbp, rax
00000000000036ca         call       j_dcgettext                                 ; dcgettext
00000000000036cf         mov        rbx, rax
00000000000036d2         call       j___errno_location                          ; __errno_location
00000000000036d7         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000036d9         mov        rcx, rbp
00000000000036dc         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000036df         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000036e4         xor        eax, eax
00000000000036e6         call       j_error                                     ; error
00000000000036eb         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x17dfc)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_1C: int32_t, -28


                     movefile:
00000000000036f0         push       r12                                         ; Begin of unwind block (FDE at 0x17e28), CODE XREF=main+1032, main+1228, main+1265
00000000000036f2         push       rbp
00000000000036f3         mov        r12, rcx
00000000000036f6         push       rbx
00000000000036f7         mov        rbp, rsi
00000000000036fa         mov        rbx, rdi
00000000000036fd         sub        rsp, 0x10
0000000000003701         cmp        byte [remove_trailing_slashes], 0x0         ; remove_trailing_slashes
0000000000003708         jne        loc_3770

                     loc_370a:
000000000000370a         test       dl, dl                                      ; CODE XREF=movefile+141
000000000000370c         jne        loc_3728

000000000000370e         add        rsp, 0x10
0000000000003712         mov        rdx, r12
0000000000003715         mov        rsi, rbp
0000000000003718         mov        rdi, rbx
000000000000371b         pop        rbx
000000000000371c         pop        rbp
000000000000371d         pop        r12
000000000000371f         jmp        do_move                                     ; do_move
                        ; endp
0000000000003724         align      8

                     loc_3728:
0000000000003728         mov        rdi, rbx                                    ; CODE XREF=movefile+28
000000000000372b         call       last_component                              ; last_component
0000000000003730         xor        edx, edx
0000000000003732         mov        rsi, rax
0000000000003735         mov        rdi, rbp
0000000000003738         call       file_name_concat                            ; file_name_concat
000000000000373d         mov        rbp, rax
0000000000003740         mov        rdi, rax
0000000000003743         call       strip_trailing_slashes                      ; strip_trailing_slashes
0000000000003748         mov        rdx, r12
000000000000374b         mov        rsi, rbp
000000000000374e         mov        rdi, rbx
0000000000003751         call       do_move                                     ; do_move
0000000000003756         mov        rdi, rbp
0000000000003759         mov        ebx, eax
000000000000375b         call       sub_2c80                                    ; sub_2c80
0000000000003760         add        rsp, 0x10
0000000000003764         mov        eax, ebx
0000000000003766         pop        rbx
0000000000003767         pop        rbp
0000000000003768         pop        r12
000000000000376a         ret
                        ; endp
000000000000376b         align      16

                     loc_3770:
0000000000003770         mov        dword [rsp+0x28+var_1C], edx                ; CODE XREF=movefile+24
0000000000003774         call       strip_trailing_slashes                      ; strip_trailing_slashes
0000000000003779         mov        edx, dword [rsp+0x28+var_1C]
000000000000377d         jmp        loc_370a
000000000000377f         align      128                                         ; End of unwind block (FDE at 0x17e28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000003780         push       r13                                         ; Begin of unwind block (FDE at 0x17e6c), CODE XREF=main+483, main+1496, __argmatch_die+5
0000000000003782         push       r12
0000000000003784         mov        edx, 0x5
0000000000003789         push       rbp
000000000000378a         push       rbx
000000000000378b         mov        ebp, edi
000000000000378d         sub        rsp, 0x88
0000000000003794         mov        rbx, qword [program_name]                   ; program_name
000000000000379b         mov        rax, qword [fs:0x28]
00000000000037a4         mov        qword [rsp+0xa8+var_30], rax
00000000000037a9         xor        eax, eax
00000000000037ab         test       edi, edi
00000000000037ad         je         loc_37dd

00000000000037af         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
00000000000037b6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000037b8         call       j_dcgettext                                 ; dcgettext
00000000000037bd         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000037c4         mov        rdx, rax
00000000000037c7         mov        rcx, rbx
00000000000037ca         mov        esi, 0x1
00000000000037cf         xor        eax, eax
00000000000037d1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_37d6:
00000000000037d6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+870
00000000000037d8         call       j_exit                                      ; exit
                        ; endp

                     loc_37dd:
00000000000037dd         lea        rsi, qword [aUsageSOptionTS]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [-T] SOURCE DEST\\n  or:  %s [OPTION]... SOURCE... DIRECTORY\\n  or:  %s [OPTION]... -t DIRECTORY SOURCE...\\n", CODE XREF=usage+45
00000000000037e4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000037e6         call       j_dcgettext                                 ; dcgettext
00000000000037eb         mov        rcx, rbx
00000000000037ee         mov        r8, rbx
00000000000037f1         mov        rdx, rbx
00000000000037f4         mov        rsi, rax
00000000000037f7         mov        edi, 0x1
00000000000037fc         xor        eax, eax
00000000000037fe         call       j___printf_chk                              ; __printf_chk
0000000000003803         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000380a         lea        rsi, qword [aRenameSourceTo]                ; argument "msgid" for method j_dcgettext, "Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.\\n"
0000000000003811         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003816         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003818         call       j_dcgettext                                 ; dcgettext
000000000000381d         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003820         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003823         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003828         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000382f         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
0000000000003836         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000383b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000383d         call       j_dcgettext                                 ; dcgettext
0000000000003842         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003845         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003848         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000384d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003854         lea        rsi, qword [aBackupcontrolM]                ; argument "msgid" for method j_dcgettext, "      --backup[=CONTROL]       make a backup of each existing destination file\\n  -b                           like --backup but does not accept an argument\\n  -f, --force                  do not prompt before overwriting\\n  -i, --interactive            promp…"
000000000000385b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003860         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003862         call       j_dcgettext                                 ; dcgettext
0000000000003867         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000386a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000386d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003872         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003879         lea        rsi, qword [aStriptrailings]                ; argument "msgid" for method j_dcgettext, "      --strip-trailing-slashes  remove any trailing slashes from each SOURCE\\n                                 argument\\n  -S, --suffix=SUFFIX          override the usual backup suffix\\n"
0000000000003880         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003885         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003887         call       j_dcgettext                                 ; dcgettext
000000000000388c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000388f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003892         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003897         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000389e         lea        rsi, qword [aTTargetdirecto]                ; argument "msgid" for method j_dcgettext, "  -t, --target-directory=DIRECTORY  move all SOURCE arguments into DIRECTORY\\n  -T, --no-target-directory    treat DEST as a normal file\\n  -u, --update                 move only when the SOURCE file is newer\\n                                 than the destina…"
00000000000038a5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000038aa         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000038ac         call       j_dcgettext                                 ; dcgettext
00000000000038b1         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000038b4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000038b7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000038bc         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000038c3         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
00000000000038ca         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000038cf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000038d1         call       j_dcgettext                                 ; dcgettext
00000000000038d6         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000038d9         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000038dc         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000038e1         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000038e8         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
00000000000038ef         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000038f4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000038f6         call       j_dcgettext                                 ; dcgettext
00000000000038fb         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000038fe         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003901         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003906         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000390d         lea        rsi, qword [aNtheBackupSuff]                ; argument "msgid" for method j_dcgettext, "\\nThe backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\nThe version control method may be selected via the --backup option or through\\nthe VERSION_CONTROL environment variable.  Here are the values:\\n\\n"
0000000000003914         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003919         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000391b         call       j_dcgettext                                 ; dcgettext
0000000000003920         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003923         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003926         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000392b         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003932         lea        rsi, qword [aNoneOffNeverMa]                ; argument "msgid" for method j_dcgettext, "  none, off       never make backups (even if --backup is given)\\n  numbered, t     make numbered backups\\n  existing, nil   numbered if numbered backups exist, simple otherwise\\n  simple, never   always make simple backups\\n"
0000000000003939         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000393e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003940         call       j_dcgettext                                 ; dcgettext
0000000000003945         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003948         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000394b         lea        rbx, qword [aValidstatusSta+22]             ; 0x14f35
0000000000003952         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003957         lea        rax, qword [aValidstatusSta+25]             ; 0x14f38
000000000000395e         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000003965         mov        qword [rsp+0xa8+var_48], 0x0
000000000000396e         mov        qword [rsp+0xa8+var_40], 0x0
0000000000003977         mov        rdx, rsp
000000000000397a         mov        qword [rsp+0xa8+var_A8], rax
000000000000397e         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000003985         mov        qword [rsp+0xa8+var_78], rcx
000000000000398a         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000003991         mov        qword [rsp+0xa8+var_A0], rax
0000000000003996         lea        rax, qword [aCoreutils]                     ; "coreutils"
000000000000399d         mov        qword [rsp+0xa8+var_68], rcx
00000000000039a2         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
00000000000039a9         mov        qword [rsp+0xa8+var_98], rax
00000000000039ae         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
00000000000039b5         mov        qword [rsp+0xa8+var_58], rcx
00000000000039ba         mov        qword [rsp+0xa8+var_90], rax
00000000000039bf         lea        rax, qword [aSha224sum]                     ; "sha224sum"
00000000000039c6         mov        qword [rsp+0xa8+var_88], rax
00000000000039cb         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
00000000000039d2         mov        qword [rsp+0xa8+var_80], rax
00000000000039d7         mov        qword [rsp+0xa8+var_70], rax
00000000000039dc         mov        qword [rsp+0xa8+var_60], rax
00000000000039e1         mov        qword [rsp+0xa8+var_50], rax
00000000000039e6         nop        word [cs:rax+rax]

                     loc_39f0:
00000000000039f0         add        rdx, 0x10                                   ; CODE XREF=usage+653
00000000000039f4         mov        rdi, qword [rdx]
00000000000039f7         test       rdi, rdi
00000000000039fa         je         loc_3a0f

00000000000039fc         mov        ecx, 0x3
0000000000003a01         mov        rsi, rbx
0000000000003a04         rep  cmpsb byte [rsi], byte [rdi]
0000000000003a06         seta       al
0000000000003a09         sbb        al, 0x0
0000000000003a0b         test       al, al
0000000000003a0d         jne        loc_39f0

                     loc_3a0f:
0000000000003a0f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+634
0000000000003a13         xor        edi, edi
0000000000003a15         mov        edx, 0x5
0000000000003a1a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000003a21         test       r12, r12
0000000000003a24         je         loc_3aeb

0000000000003a2a         call       j_dcgettext                                 ; dcgettext
0000000000003a2f         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003a36         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x14fae
0000000000003a3d         mov        rsi, rax
0000000000003a40         mov        edi, 0x1
0000000000003a45         xor        eax, eax
0000000000003a47         call       j___printf_chk                              ; __printf_chk
0000000000003a4c         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000003a4e         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000003a53         call       j_setlocale                                 ; setlocale
0000000000003a58         test       rax, rax
0000000000003a5b         je         loc_3a79

0000000000003a5d         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x14fbc
0000000000003a64         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000003a69         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000003a6c         call       j_strncmp                                   ; strncmp
0000000000003a71         test       eax, eax
0000000000003a73         jne        loc_3b80

                     loc_3a79:
0000000000003a79         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+731, usage+1061
0000000000003a80         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003a82         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003a87         call       j_dcgettext                                 ; dcgettext
0000000000003a8c         lea        rcx, qword [aValidstatusSta+22]             ; 0x14f35
0000000000003a93         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003a9a         mov        rsi, rax
0000000000003a9d         mov        edi, 0x1
0000000000003aa2         xor        eax, eax
0000000000003aa4         call       j___printf_chk                              ; __printf_chk
0000000000003aa9         cmp        r12, rbx
0000000000003aac         lea        rcx, qword [aMulticallInvoc+10]             ; 0x14f54
0000000000003ab3         lea        rbx, qword [aSSUnbackupn+20]                ; 0x1678c
0000000000003aba         cmove      rbx, rcx

                     loc_3abe:
0000000000003abe         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1012
0000000000003ac5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003ac7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003acc         call       j_dcgettext                                 ; dcgettext
0000000000003ad1         mov        rcx, rbx
0000000000003ad4         mov        rsi, rax
0000000000003ad7         mov        rdx, r12
0000000000003ada         mov        edi, 0x1
0000000000003adf         xor        eax, eax
0000000000003ae1         call       j___printf_chk                              ; __printf_chk
0000000000003ae6         jmp        loc_37d6

                     loc_3aeb:
0000000000003aeb         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+676
0000000000003af0         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003af7         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x14fae
0000000000003afe         mov        rsi, rax
0000000000003b01         mov        edi, 0x1
0000000000003b06         xor        eax, eax
0000000000003b08         call       j___printf_chk                              ; __printf_chk
0000000000003b0d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000003b0f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000003b14         call       j_setlocale                                 ; setlocale
0000000000003b19         test       rax, rax
0000000000003b1c         je         loc_3b36

0000000000003b1e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x14fbc
0000000000003b25         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000003b2a         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000003b2d         call       j_strncmp                                   ; strncmp
0000000000003b32         test       eax, eax
0000000000003b34         jne        loc_3b79

                     loc_3b36:
0000000000003b36         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+924
0000000000003b3d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003b42         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003b44         lea        r12, qword [aValidstatusSta+22]             ; 0x14f35
0000000000003b4b         lea        rbx, qword [aMulticallInvoc+10]             ; 0x14f54
0000000000003b52         call       j_dcgettext                                 ; dcgettext
0000000000003b57         lea        rcx, qword [aValidstatusSta+22]             ; 0x14f35
0000000000003b5e         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003b65         mov        rsi, rax
0000000000003b68         mov        edi, 0x1
0000000000003b6d         xor        eax, eax
0000000000003b6f         call       j___printf_chk                              ; __printf_chk
0000000000003b74         jmp        loc_3abe

                     loc_3b79:
0000000000003b79         lea        r12, qword [aValidstatusSta+22]             ; 0x14f35, CODE XREF=usage+948

                     loc_3b80:
0000000000003b80         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+755
0000000000003b87         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
0000000000003b8e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003b90         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003b95         call       j_dcgettext                                 ; dcgettext
0000000000003b9a         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003b9d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003ba0         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003ba5         jmp        loc_3a79
0000000000003baa         align      16                                          ; End of unwind block (FDE at 0x17e6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     excise:
0000000000003bb0         push       r13                                         ; Begin of unwind block (FDE at 0x17ef4), CODE XREF=sub_45b0+452, sub_4780+25
0000000000003bb2         push       r12
0000000000003bb4         mov        r13, rdx
0000000000003bb7         push       rbp
0000000000003bb8         push       rbx
0000000000003bb9         xor        edx, edx
0000000000003bbb         mov        r12, rdi
0000000000003bbe         mov        rbx, rsi
0000000000003bc1         mov        ebp, ecx
0000000000003bc3         sub        rsp, 0xa8
0000000000003bca         mov        rsi, qword [rsi+0x30]                       ; argument "__name" for method j_unlinkat
0000000000003bce         mov        edi, dword [rdi+0x2c]                       ; argument "__fd" for method j_unlinkat
0000000000003bd1         mov        rax, qword [fs:0x28]
0000000000003bda         mov        qword [rsp+0xc8+var_30], rax
0000000000003be2         xor        eax, eax
0000000000003be4         test       cl, cl
0000000000003be6         setne      dl
0000000000003be9         shl        edx, 0x9                                    ; argument "__flag" for method j_unlinkat
0000000000003bec         call       j_unlinkat                                  ; unlinkat
0000000000003bf1         test       eax, eax
0000000000003bf3         jne        loc_3c30

0000000000003bf5         cmp        byte [r13+0x1a], 0x0
0000000000003bfa         mov        eax, 0x2
0000000000003bff         jne        loc_3ce8

                     loc_3c05:
0000000000003c05         mov        rcx, qword [rsp+0xc8+var_30]                ; CODE XREF=excise+303, excise+380, excise+526, excise+565
0000000000003c0d         xor        rcx, qword [fs:0x28]
0000000000003c16         jne        loc_3df8

0000000000003c1c         add        rsp, 0xa8
0000000000003c23         pop        rbx
0000000000003c24         pop        rbp
0000000000003c25         pop        r12
0000000000003c27         pop        r13
0000000000003c29         ret
                        ; endp
0000000000003c2a         align      16

                     loc_3c30:
0000000000003c30         call       j___errno_location                          ; __errno_location, CODE XREF=excise+67
0000000000003c35         mov        edx, dword [rax]
0000000000003c37         mov        rbp, rax
0000000000003c3a         cmp        edx, 0x1e
0000000000003c3d         je         loc_3d38

0000000000003c43         cmp        byte [r13], 0x0
0000000000003c48         je         loc_3c70

0000000000003c4a         cmp        edx, 0x14
0000000000003c4d         je         loc_3db9

0000000000003c53         jle        loc_3db0

0000000000003c59         cmp        edx, 0x16
0000000000003c5c         je         loc_3db9

0000000000003c62         cmp        edx, 0x54
0000000000003c65         je         loc_3db9

0000000000003c6b         nop        dword [rax+rax]

                     loc_3c70:
0000000000003c70         cmp        word [rbx+0x70], 0x4                        ; CODE XREF=excise+152, excise+515
0000000000003c75         je         loc_3d70

                     loc_3c7b:
0000000000003c7b         mov        rsi, qword [rbx+0x38]                       ; CODE XREF=excise+439, excise+451, excise+471, excise+488, excise+497, excise+576
0000000000003c7f         mov        edi, 0x4
0000000000003c84         call       quotearg_style                              ; quotearg_style
0000000000003c89         lea        rsi, qword [aCannotRemoveS]                 ; argument "msgid" for method j_dcgettext, "cannot remove %s"
0000000000003c90         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003c92         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003c97         mov        r12, rax
0000000000003c9a         call       j_dcgettext                                 ; dcgettext
0000000000003c9f         mov        esi, dword [rbp]                            ; argument "__errnum" for method j_error
0000000000003ca2         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003ca5         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003ca7         xor        eax, eax
0000000000003ca9         mov        rcx, r12
0000000000003cac         call       j_error                                     ; error
0000000000003cb1         mov        rax, qword [rbx+8]
0000000000003cb5         cmp        qword [rax+0x58], 0x0
0000000000003cba         jns        loc_3cd3

0000000000003cbc         jmp        loc_3cda
0000000000003cbe         align      64

                     loc_3cc0:
0000000000003cc0         mov        qword [rax+0x20], 0x1                       ; CODE XREF=excise+296
0000000000003cc8         mov        rax, qword [rax+8]
0000000000003ccc         cmp        qword [rax+0x58], 0x0
0000000000003cd1         js         loc_3cda

                     loc_3cd3:
0000000000003cd3         cmp        qword [rax+0x20], 0x0                       ; CODE XREF=excise+266
0000000000003cd8         je         loc_3cc0

                     loc_3cda:
0000000000003cda         mov        eax, 0x4                                    ; CODE XREF=excise+268, excise+289
0000000000003cdf         jmp        loc_3c05
0000000000003ce4         align      8

                     loc_3ce8:
0000000000003ce8         mov        rsi, qword [rbx+0x38]                       ; CODE XREF=excise+79
0000000000003cec         mov        edi, 0x4
0000000000003cf1         call       quotearg_style                              ; quotearg_style
0000000000003cf6         test       bpl, bpl
0000000000003cf9         mov        rbx, rax
0000000000003cfc         mov        edx, 0x5
0000000000003d01         je         loc_3dc8

0000000000003d07         lea        rsi, qword [aRemovedDirecto]                ; argument "msgid" for method j_dcgettext, "removed directory %s\\n"
0000000000003d0e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003d10         call       j_dcgettext                                 ; dcgettext

                     loc_3d15:
0000000000003d15         mov        rsi, rax                                    ; CODE XREF=excise+550
0000000000003d18         mov        rdx, rbx
0000000000003d1b         mov        edi, 0x1
0000000000003d20         xor        eax, eax
0000000000003d22         call       j___printf_chk                              ; __printf_chk
0000000000003d27         mov        eax, 0x2
0000000000003d2c         jmp        loc_3c05
0000000000003d31         align      8

                     loc_3d38:
0000000000003d38         mov        rdx, qword [rbx+0x30]                       ; argument "__filename" for method j___fxstatat, CODE XREF=excise+141
0000000000003d3c         mov        esi, dword [r12+0x2c]                       ; argument "__fildes" for method j___fxstatat
0000000000003d41         mov        rcx, rsp                                    ; argument "__stat_buf" for method j___fxstatat
0000000000003d44         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
0000000000003d4a         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
0000000000003d4f         call       j___fxstatat                                ; __fxstatat
0000000000003d54         test       eax, eax
0000000000003d56         je         loc_3d60

0000000000003d58         mov        edx, dword [rbp]
0000000000003d5b         cmp        edx, 0x2
0000000000003d5e         je         loc_3ddb

                     loc_3d60:
0000000000003d60         mov        dword [rbp], 0x1e                           ; CODE XREF=excise+422
0000000000003d67         jmp        loc_3c7b
0000000000003d6c         align      16

                     loc_3d70:
0000000000003d70         cmp        edx, 0x27                                   ; CODE XREF=excise+197
0000000000003d73         ja         loc_3c7b

                     loc_3d79:
0000000000003d79         movabs     rax, 0x8000320000                           ; CODE XREF=excise+582
0000000000003d83         bt         rax, rdx
0000000000003d87         jae        loc_3c7b

0000000000003d8d         mov        eax, dword [rbx+0x40]
0000000000003d90         cmp        eax, 0x1
0000000000003d93         je         loc_3d9e

0000000000003d95         cmp        eax, 0xd
0000000000003d98         jne        loc_3c7b

                     loc_3d9e:
0000000000003d9e         mov        dword [rbp], eax                            ; CODE XREF=excise+483
0000000000003da1         jmp        loc_3c7b
0000000000003da6         align      16

                     loc_3db0:
0000000000003db0         cmp        edx, 0x2                                    ; CODE XREF=excise+163
0000000000003db3         jne        loc_3c70

                     loc_3db9:
0000000000003db9         mov        eax, 0x2                                    ; CODE XREF=excise+157, excise+172, excise+181
0000000000003dbe         jmp        loc_3c05
0000000000003dc3         align      8

                     loc_3dc8:
0000000000003dc8         lea        rsi, qword [aRemovedSn]                     ; argument "msgid" for method j_dcgettext, "removed %s\\n", CODE XREF=excise+337
0000000000003dcf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003dd1         call       j_dcgettext                                 ; dcgettext
0000000000003dd6         jmp        loc_3d15

                     loc_3ddb:
0000000000003ddb         cmp        byte [r13], 0x0                             ; CODE XREF=excise+430
0000000000003de0         mov        eax, 0x2
0000000000003de5         jne        loc_3c05

0000000000003deb         cmp        word [rbx+0x70], 0x4
0000000000003df0         jne        loc_3c7b

0000000000003df6         jmp        loc_3d79

                     loc_3df8:
0000000000003df8         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=excise+102
                        ; endp
0000000000003dfd         align      512                                         ; End of unwind block (FDE at 0x17ef4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cache_fstatat.constprop.3:
0000000000003e00         push       rbx                                         ; Begin of unwind block (FDE at 0x17f30), CODE XREF=prompt+367, prompt+439, prompt+1015
0000000000003e01         mov        rax, qword [rdx+0x30]
0000000000003e05         mov        rbx, rdx
0000000000003e08         cmp        rax, 0xffffffffffffffff
0000000000003e0c         je         loc_3e20

                     loc_3e0e:
0000000000003e0e         test       rax, rax                                    ; CODE XREF=cache_fstatat.constprop.3+100
0000000000003e11         js         loc_3e66

0000000000003e13         xor        eax, eax
0000000000003e15         pop        rbx
0000000000003e16         ret
                        ; endp
0000000000003e17         align      32

                     loc_3e20:
0000000000003e20         mov        rcx, rdx                                    ; argument "__stat_buf" for method j___fxstatat, CODE XREF=cache_fstatat.constprop.3+12
0000000000003e23         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
0000000000003e29         mov        rdx, rsi                                    ; argument "__filename" for method j___fxstatat
0000000000003e2c         mov        esi, edi                                    ; argument "__fildes" for method j___fxstatat
0000000000003e2e         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
0000000000003e33         call       j___fxstatat                                ; __fxstatat
0000000000003e38         test       eax, eax
0000000000003e3a         je         loc_3e60

0000000000003e3c         mov        qword [rbx+0x30], 0xfffffffffffffffe
0000000000003e44         call       j___errno_location                          ; __errno_location
0000000000003e49         movsxd     rdx, dword [rax]
0000000000003e4c         mov        qword [rbx+8], rdx

                     loc_3e50:
0000000000003e50         mov        dword [rax], edx                            ; CODE XREF=cache_fstatat.constprop.3+111
0000000000003e52         mov        eax, 0xffffffff
0000000000003e57         pop        rbx
0000000000003e58         ret
                        ; endp
0000000000003e59         align      32

                     loc_3e60:
0000000000003e60         mov        rax, qword [rbx+0x30]                       ; CODE XREF=cache_fstatat.constprop.3+58
0000000000003e64         jmp        loc_3e0e

                     loc_3e66:
0000000000003e66         call       j___errno_location                          ; __errno_location, CODE XREF=cache_fstatat.constprop.3+17
0000000000003e6b         mov        rdx, qword [rbx+8]
0000000000003e6f         jmp        loc_3e50
0000000000003e71         align      128                                         ; End of unwind block (FDE at 0x17f30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_A8: int64_t, -168
        ;    var_C0: int32_t, -192
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E4: int32_t, -228
        ;    var_E8: int32_t, -232
        ;    var_F0: int64_t, -240


                     prompt:
0000000000003e80         push       r15                                         ; Begin of unwind block (FDE at 0x17f54), CODE XREF=sub_44b0+75, sub_45b0+225
0000000000003e82         push       r14
0000000000003e84         push       r13
0000000000003e86         push       r12
0000000000003e88         mov        r13, rcx
0000000000003e8b         push       rbp
0000000000003e8c         push       rbx
0000000000003e8d         mov        rbx, rsi
0000000000003e90         sub        rsp, 0xc8
0000000000003e97         mov        edi, dword [rdi+0x2c]
0000000000003e9a         mov        r15, qword [rsi+0x30]
0000000000003e9e         mov        rax, qword [fs:0x28]
0000000000003ea7         mov        qword [rsp+0xf8+var_40], rax
0000000000003eaf         xor        eax, eax
0000000000003eb1         mov        rax, qword [rsi+0x38]
0000000000003eb5         test       r9, r9
0000000000003eb8         mov        dword [rsp+0xf8+var_E4], r8d
0000000000003ebd         mov        dword [rsp+0xf8+var_E8], edi
0000000000003ec1         mov        qword [rsp+0xf8+var_F0], rax
0000000000003ec6         je         loc_40b0

0000000000003ecc         xor        ebp, ebp
0000000000003ece         test       dl, dl
0000000000003ed0         mov        dword [r9], 0x2
0000000000003ed7         setne      bpl
0000000000003edb         mov        edx, 0x30900                                ; argument "__oflag" for method j_openat
0000000000003ee0         xor        eax, eax
0000000000003ee2         mov        rsi, r15                                    ; argument "__file" for method j_openat
0000000000003ee5         mov        r12, r9
0000000000003ee8         mov        qword [rsp+0xf8+var_A8], 0xffffffffffffffff
0000000000003ef1         shl        ebp, 0x2
0000000000003ef4         call       j_openat                                    ; openat
0000000000003ef9         test       eax, eax
0000000000003efb         js         loc_3f65

0000000000003efd         mov        edi, eax                                    ; argument "__fd" for method j_fdopendir
0000000000003eff         mov        dword [rsp+0xf8+var_E0], eax
0000000000003f03         call       j_fdopendir                                 ; fdopendir
0000000000003f08         test       rax, rax
0000000000003f0b         mov        r14, rax
0000000000003f0e         mov        edx, dword [rsp+0xf8+var_E0]
0000000000003f12         je         loc_4170

0000000000003f18         call       j___errno_location                          ; __errno_location
0000000000003f1d         mov        qword [rsp+0xf8+var_E0], rax
0000000000003f22         mov        dword [rax], 0x0
0000000000003f28         nop        dword [rax+rax]

                     loc_3f30:
0000000000003f30         mov        rdi, r14                                    ; argument "__dirp" for method j_readdir, CODE XREF=prompt+215, prompt+219
0000000000003f33         call       j_readdir                                   ; readdir
0000000000003f38         test       rax, rax
0000000000003f3b         je         loc_4188

0000000000003f41         cmp        byte [rax+0x13], 0x2e
0000000000003f45         jne        loc_3f5d

0000000000003f47         xor        edx, edx
0000000000003f49         cmp        byte [rax+0x14], 0x2e
0000000000003f4d         sete       dl
0000000000003f50         movzx      eax, byte [rax+rdx+0x14]
0000000000003f55         test       al, al
0000000000003f57         je         loc_3f30

0000000000003f59         cmp        al, 0x2f
0000000000003f5b         je         loc_3f30

                     loc_3f5d:
0000000000003f5d         mov        rdi, r14                                    ; argument "__dirp" for method j_closedir, CODE XREF=prompt+197
0000000000003f60         call       j_closedir                                  ; closedir

                     loc_3f65:
0000000000003f65         xor        r14d, r14d                                  ; CODE XREF=prompt+123, prompt+801
0000000000003f68         mov        eax, 0x3

                     loc_3f6d:
0000000000003f6d         mov        dword [r12], eax                            ; CODE XREF=prompt+764, prompt+818

                     loc_3f71:
0000000000003f71         cmp        qword [rbx+0x20], 0x0                       ; CODE XREF=prompt+593
0000000000003f76         jne        loc_40a0

0000000000003f7c         mov        eax, dword [r13+4]
0000000000003f80         cmp        eax, 0x5
0000000000003f83         je         loc_3fb2

0000000000003f85         cmp        byte [r13], 0x0
0000000000003f8a         jne        loc_3fa9

0000000000003f8c         cmp        eax, 0x3
0000000000003f8f         je         loc_3f98

0000000000003f91         cmp        byte [r13+0x19], 0x0
0000000000003f96         je         loc_3fb2

                     loc_3f98:
0000000000003f98         call       can_write_any_file                          ; can_write_any_file, CODE XREF=prompt+271
0000000000003f9d         test       al, al
0000000000003f9f         je         loc_4268

                     loc_3fa5:
0000000000003fa5         mov        eax, dword [r13+4]                          ; CODE XREF=prompt+1042, prompt+1072

                     loc_3fa9:
0000000000003fa9         cmp        eax, 0x3                                    ; CODE XREF=prompt+266
0000000000003fac         je         loc_40e0

                     loc_3fb2:
0000000000003fb2         mov        eax, 0x2                                    ; CODE XREF=prompt+259, prompt+278, prompt+536, prompt+985

                     loc_3fb7:
0000000000003fb7         mov        rcx, qword [rsp+0xf8+var_40]                ; CODE XREF=prompt+549, prompt+898, prompt+1185
0000000000003fbf         xor        rcx, qword [fs:0x28]
0000000000003fc8         jne        loc_4343

0000000000003fce         add        rsp, 0xc8
0000000000003fd5         pop        rbx
0000000000003fd6         pop        rbp
0000000000003fd7         pop        r12
0000000000003fd9         pop        r13
0000000000003fdb         pop        r14
0000000000003fdd         pop        r15
0000000000003fdf         ret
                        ; endp

                     loc_3fe0:
0000000000003fe0         lea        rbx, qword [rsp+0xf8+var_D8]                ; CODE XREF=prompt+613
0000000000003fe5         mov        edi, dword [rsp+0xf8+var_E8]
0000000000003fe9         mov        rsi, r15
0000000000003fec         mov        rdx, rbx
0000000000003fef         call       cache_fstatat.constprop.3                   ; cache_fstatat.constprop.3
0000000000003ff4         test       eax, eax
0000000000003ff6         jne        loc_41c0

0000000000003ffc         mov        eax, dword [rsp+0xf8+var_C0]
0000000000004000         and        eax, 0xf000                                 ; DATA XREF=main+682, main+1414, prompt+400, copy_internal+253, copy_internal+296, copy_internal+422, copy_internal+564, copy_internal+1146, copy_internal+1255, copy_internal+1407, copy_internal+2484
0000000000004005         cmp        eax, 0xa000
000000000000400a         je         loc_4254

0000000000004010         cmp        eax, 0x4000
0000000000004015         je         loc_40f4

                     loc_401b:
000000000000401b         mov        rsi, qword [rsp+0xf8+var_F0]                ; CODE XREF=prompt+991
0000000000004020         mov        edi, 0x4
0000000000004025         call       quotearg_style                              ; quotearg_style
000000000000402a         mov        rbp, rax

                     loc_402d:
000000000000402d         mov        edi, dword [rsp+0xf8+var_E8]                ; CODE XREF=prompt+975
0000000000004031         mov        rdx, rbx
0000000000004034         mov        rsi, r15
0000000000004037         call       cache_fstatat.constprop.3                   ; cache_fstatat.constprop.3
000000000000403c         test       eax, eax
000000000000403e         jne        loc_42f0

0000000000004044         mov        rdi, rbx
0000000000004047         call       file_type                                   ; file_type
000000000000404c         test       r12d, r12d
000000000000404f         mov        r13, rax
0000000000004052         mov        rbx, qword [program_name]                   ; program_name
0000000000004059         mov        edx, 0x5
000000000000405e         je         loc_42d8

0000000000004064         lea        rsi, qword [aSRemoveWritepr]                ; argument "msgid" for method j_dcgettext, "%s: remove write-protected %s %s? "
000000000000406b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000406d         call       j_dcgettext                                 ; dcgettext

                     loc_4072:
0000000000004072         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=prompt+1126
0000000000004079         mov        rdx, rax
000000000000407c         mov        r9, rbp
000000000000407f         mov        r8, r13
0000000000004082         mov        rcx, rbx
0000000000004085         mov        esi, 0x1
000000000000408a         xor        eax, eax
000000000000408c         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_4091:
0000000000004091         call       yesno                                       ; yesno, CODE XREF=prompt+740
0000000000004096         test       al, al
0000000000004098         jne        loc_3fb2

000000000000409e         nop

                     loc_40a0:
00000000000040a0         mov        eax, 0x3                                    ; CODE XREF=prompt+246
00000000000040a5         jmp        loc_3fb7
00000000000040aa         align      16

                     loc_40b0:
00000000000040b0         cmp        dl, 0x1                                     ; CODE XREF=prompt+70
00000000000040b3         mov        r14d, edx
00000000000040b6         mov        eax, 0x0
00000000000040bb         sbb        ebp, ebp
00000000000040bd         mov        qword [rsp+0xf8+var_A8], 0xffffffffffffffff
00000000000040c6         not        ebp
00000000000040c8         and        ebp, 0x4
00000000000040cb         test       dl, dl
00000000000040cd         cmovne     r14d, eax
00000000000040d1         jmp        loc_3f71
00000000000040d6         align      32

                     loc_40e0:
00000000000040e0         xor        r12d, r12d                                  ; CODE XREF=prompt+300

                     loc_40e3:
00000000000040e3         test       ebp, ebp                                    ; CODE XREF=prompt+1094
00000000000040e5         je         loc_3fe0

00000000000040eb         cmp        ebp, 0x4
00000000000040ee         jne        loc_4238

                     loc_40f4:
00000000000040f4         cmp        byte [r13+9], 0x0                           ; CODE XREF=prompt+405
00000000000040f9         je         loc_4210

00000000000040ff         mov        rsi, qword [rsp+0xf8+var_F0]
0000000000004104         mov        edi, 0x4
0000000000004109         call       quotearg_style                              ; quotearg_style
000000000000410e         cmp        dword [rsp+0xf8+var_E4], 0x2
0000000000004113         mov        rbp, rax
0000000000004116         jne        loc_424a

000000000000411c         test       r14b, r14b
000000000000411f         jne        loc_424a

0000000000004125         test       r12d, r12d
0000000000004128         mov        rbx, qword [program_name]                   ; program_name
000000000000412f         mov        edx, 0x5
0000000000004134         je         loc_4330

000000000000413a         lea        rsi, qword [aSDescendIntoWr]                ; argument "msgid" for method j_dcgettext, "%s: descend into write-protected directory %s? "
0000000000004141         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004143         call       j_dcgettext                                 ; dcgettext

                     loc_4148:
0000000000004148         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=prompt+1214
000000000000414f         mov        rdx, rax
0000000000004152         mov        r8, rbp
0000000000004155         mov        rcx, rbx
0000000000004158         mov        esi, 0x1
000000000000415d         xor        eax, eax
000000000000415f         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004164         jmp        loc_4091
0000000000004169         align      16

                     loc_4170:
0000000000004170         mov        edi, edx                                    ; argument "__fd" for method j_close, CODE XREF=prompt+146
0000000000004172         call       j_close                                     ; close
0000000000004177         mov        eax, 0x3
000000000000417c         jmp        loc_3f6d
0000000000004181         align      8

                     loc_4188:
0000000000004188         mov        rax, qword [rsp+0xf8+var_E0]                ; CODE XREF=prompt+187
000000000000418d         mov        rdi, r14                                    ; argument "__dirp" for method j_closedir
0000000000004190         mov        edx, dword [rax]
0000000000004192         mov        dword [rsp+0xf8+var_E0], edx
0000000000004196         call       j_closedir                                  ; closedir
000000000000419b         mov        edx, dword [rsp+0xf8+var_E0]
000000000000419f         test       edx, edx
00000000000041a1         jne        loc_3f65

00000000000041a7         mov        r14d, 0x1
00000000000041ad         mov        eax, 0x4
00000000000041b2         jmp        loc_3f6d
00000000000041b7         align      64

                     loc_41c0:
00000000000041c0         call       j___errno_location                          ; __errno_location, CODE XREF=prompt+374, prompt+1022
00000000000041c5         mov        ebx, dword [rax]

                     loc_41c7:
00000000000041c7         mov        rsi, qword [rsp+0xf8+var_F0]                ; CODE XREF=prompt+1100
00000000000041cc         mov        edi, 0x4
00000000000041d1         call       quotearg_style                              ; quotearg_style
00000000000041d6         mov        rbp, rax

                     loc_41d9:
00000000000041d9         lea        rsi, qword [aCannotRemoveS]                 ; argument "msgid" for method j_dcgettext, "cannot remove %s", CODE XREF=prompt+947
00000000000041e0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000041e5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000041e7         call       j_dcgettext                                 ; dcgettext
00000000000041ec         mov        rcx, rbp
00000000000041ef         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000041f2         mov        esi, ebx                                    ; argument "__errnum" for method j_error
00000000000041f4         xor        eax, eax
00000000000041f6         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000041f8         call       j_error                                     ; error
00000000000041fd         mov        eax, 0x4
0000000000004202         jmp        loc_3fb7
0000000000004207         align      16

                     loc_4210:
0000000000004210         cmp        byte [r13+0xa], 0x0                         ; CODE XREF=prompt+633
0000000000004215         je         loc_421c

0000000000004217         test       r14b, r14b
000000000000421a         jne        loc_4238

                     loc_421c:
000000000000421c         mov        rsi, qword [rsp+0xf8+var_F0]                ; CODE XREF=prompt+917
0000000000004221         mov        edi, 0x4
0000000000004226         mov        ebx, 0x15
000000000000422b         call       quotearg_style                              ; quotearg_style
0000000000004230         mov        rbp, rax
0000000000004233         jmp        loc_41d9
0000000000004235         align      8

                     loc_4238:
0000000000004238         mov        rsi, qword [rsp+0xf8+var_F0]                ; CODE XREF=prompt+622, prompt+922
000000000000423d         mov        edi, 0x4
0000000000004242         call       quotearg_style                              ; quotearg_style
0000000000004247         mov        rbp, rax

                     loc_424a:
000000000000424a         lea        rbx, qword [rsp+0xf8+var_D8]                ; CODE XREF=prompt+662, prompt+671
000000000000424f         jmp        loc_402d

                     loc_4254:
0000000000004254         cmp        dword [r13+4], 0x3                          ; CODE XREF=prompt+394
0000000000004259         jne        loc_3fb2

000000000000425f         jmp        loc_401b
0000000000004264         align      8

                     loc_4268:
0000000000004268         lea        rbx, qword [rsp+0xf8+var_D8]                ; CODE XREF=prompt+287
000000000000426d         mov        edi, dword [rsp+0xf8+var_E8]
0000000000004271         mov        rsi, r15
0000000000004274         mov        rdx, rbx
0000000000004277         call       cache_fstatat.constprop.3                   ; cache_fstatat.constprop.3
000000000000427c         test       eax, eax
000000000000427e         jne        loc_41c0

0000000000004284         mov        eax, dword [rsp+0xf8+var_C0]
0000000000004288         and        eax, 0xf000
000000000000428d         cmp        eax, 0xa000
0000000000004292         je         loc_3fa5

0000000000004298         mov        edi, dword [rsp+0xf8+var_E8]                ; argument "__fd" for method j_faccessat
000000000000429c         mov        ecx, 0x200                                  ; argument "__flag" for method j_faccessat
00000000000042a1         mov        edx, 0x2                                    ; argument "__type" for method j_faccessat
00000000000042a6         mov        rsi, r15                                    ; argument "__file" for method j_faccessat
00000000000042a9         call       j_faccessat                                 ; faccessat
00000000000042ae         test       eax, eax
00000000000042b0         je         loc_3fa5

00000000000042b6         call       j___errno_location                          ; __errno_location
00000000000042bb         mov        ebx, dword [rax]
00000000000042bd         mov        r12d, 0x1
00000000000042c3         cmp        ebx, 0xd
00000000000042c6         je         loc_40e3

00000000000042cc         jmp        loc_41c7
00000000000042d1         align      8

                     loc_42d8:
00000000000042d8         lea        rsi, qword [aSRemoveSS]                     ; argument "msgid" for method j_dcgettext, "%s: remove %s %s? ", CODE XREF=prompt+478
00000000000042df         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000042e1         call       j_dcgettext                                 ; dcgettext
00000000000042e6         jmp        loc_4072
00000000000042eb         align      16

                     loc_42f0:
00000000000042f0         lea        rsi, qword [aCannotRemoveS]                 ; argument "msgid" for method j_dcgettext, "cannot remove %s", CODE XREF=prompt+446
00000000000042f7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000042fc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000042fe         call       j_dcgettext                                 ; dcgettext
0000000000004303         mov        rbx, rax
0000000000004306         call       j___errno_location                          ; __errno_location
000000000000430b         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000430d         mov        rcx, rbp
0000000000004310         xor        eax, eax
0000000000004312         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000004315         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004317         call       j_error                                     ; error
000000000000431c         mov        eax, 0x4
0000000000004321         jmp        loc_3fb7
0000000000004326         align      16

                     loc_4330:
0000000000004330         lea        rsi, qword [aSDescendIntoDi]                ; argument "msgid" for method j_dcgettext, "%s: descend into directory %s? ", CODE XREF=prompt+692
0000000000004337         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004339         call       j_dcgettext                                 ; dcgettext
000000000000433e         jmp        loc_4148

                     loc_4343:
0000000000004343         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=prompt+328
                        ; endp
0000000000004348         align      16                                          ; End of unwind block (FDE at 0x17f54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_D8: int8_t, -216
        ;    var_DC: int8_t, -220
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248


                     rm:
0000000000004350         push       r15                                         ; Begin of unwind block (FDE at 0x17fa4), CODE XREF=do_move+189
0000000000004352         push       r14
0000000000004354         push       r13
0000000000004356         push       r12
0000000000004358         push       rbp
0000000000004359         push       rbx
000000000000435a         sub        rsp, 0xd8
0000000000004361         mov        rax, qword [fs:0x28]
000000000000436a         mov        qword [rsp+0x108+var_40], rax
0000000000004372         xor        eax, eax
0000000000004374         cmp        qword [rdi], 0x0
0000000000004378         je         loc_4ae8

000000000000437e         cmp        byte [rsi+8], 0x1
0000000000004382         mov        r13, rsi
0000000000004385         lea        r12, qword [aAndPreserveroo+40]             ; 0x15e28
000000000000438c         mov        ebp, 0x2
0000000000004391         sbb        esi, esi
0000000000004393         xor        edx, edx
0000000000004395         and        esi, 0xffffffc0
0000000000004398         add        esi, 0x258
000000000000439e         call       xfts_open                                   ; xfts_open
00000000000043a3         mov        rbx, rax
00000000000043a6         lea        rax, qword [rsp+0x108+var_DC]
00000000000043ab         mov        qword [rsp+0x108+var_F8], rax
00000000000043b0         lea        rax, qword [rsp+0x108+var_D8]
00000000000043b5         mov        qword [rsp+0x108+var_F0], rax
00000000000043ba         nop        word [rax+rax]
00000000000043c0         mov        rdi, rbx
00000000000043c3         call       rpl_fts_read                                ; rpl_fts_read
00000000000043c8         test       rax, rax
00000000000043cb         mov        r15, rax
00000000000043ce         je         loc_445a

00000000000043d4         movzx      edx, word [rax+0x70]
00000000000043d8         cmp        dx, 0xd
00000000000043dc         ja         loc_4b37

00000000000043e2         movzx      eax, dx
00000000000043e5         movsxd     rax, dword [r12+rax*4]
00000000000043e9         add        rax, r12
00000000000043ec         jmp        rax
                        ; endp
00000000000043ee         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_43f0:
00000000000043f0         mov        rdx, qword [r15+0x38]
00000000000043f4         mov        esi, 0x3
00000000000043f9         xor        edi, edi
00000000000043fb         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000004400         lea        rsi, qword [aTraversalFaile]                ; argument "msgid" for method j_dcgettext, "traversal failed: %s"
0000000000004407         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000440c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000440e         mov        rbp, rax
0000000000004411         call       j_dcgettext                                 ; dcgettext
0000000000004416         mov        esi, dword [r15+0x40]                       ; argument "__errnum" for method j_error
000000000000441a         mov        rcx, rbp
000000000000441d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004420         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004422         xor        eax, eax
0000000000004424         call       j_error                                     ; error
0000000000004429         mov        rsi, r15
000000000000442c         mov        edx, 0x4
0000000000004431         mov        rdi, rbx
0000000000004434         call       rpl_fts_set                                 ; rpl_fts_set
0000000000004439         mov        rdi, rbx
000000000000443c         mov        ebp, 0x4
0000000000004441         call       rpl_fts_read                                ; rpl_fts_read
0000000000004446         mov        rdi, rbx
0000000000004449         call       rpl_fts_read                                ; rpl_fts_read
000000000000444e         test       rax, rax
0000000000004451         mov        r15, rax
0000000000004454         jne        rm+132
                        ; endp

                     loc_445a:
000000000000445a         call       j___errno_location                          ; __errno_location, CODE XREF=rm+126
000000000000445f         mov        r12, rax
0000000000004462         mov        eax, dword [rax]
0000000000004464         test       eax, eax
0000000000004466         jne        loc_4978

000000000000446c         mov        rdi, rbx
000000000000446f         call       rpl_fts_close                               ; rpl_fts_close
0000000000004474         test       eax, eax
0000000000004476         jne        loc_49b0

                     loc_447c:
000000000000447c         mov        rbx, qword [rsp+0x108+var_40]               ; CODE XREF=sub_47d0+474, sub_47d0+520, sub_47d0+797
0000000000004484         xor        rbx, qword [fs:0x28]
000000000000448d         mov        eax, ebp
000000000000448f         jne        loc_4ba0

0000000000004495         add        rsp, 0xd8
000000000000449c         pop        rbx
000000000000449d         pop        rbp
000000000000449e         pop        r12
00000000000044a0         pop        r13
00000000000044a2         pop        r14
00000000000044a4         pop        r15
00000000000044a6         ret
                        ; endp
00000000000044a7         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_44b0:
00000000000044b0         cmp        dx, 0x6
00000000000044b4         jne        loc_44d8

00000000000044b6         cmp        byte [r13+8], 0x0
00000000000044bb         je         loc_44d8

00000000000044bd         cmp        qword [r15+0x58], 0x0
00000000000044c2         jle        loc_44d8

00000000000044c4         mov        rax, qword [rbx+0x18]
00000000000044c8         cmp        qword [r15+0x78], rax
00000000000044cc         jne        loc_4a78

00000000000044d2         nop        word [rax+rax]

                     loc_44d8:
00000000000044d8         and        edx, 0xfffffffd                             ; CODE XREF=sub_44b0+4, sub_44b0+11, sub_44b0+18
00000000000044db         xor        r14d, r14d
00000000000044de         mov        rcx, r13
00000000000044e1         cmp        dx, 0x4
00000000000044e5         mov        r8d, 0x3
00000000000044eb         mov        rsi, r15
00000000000044ee         sete       r14b
00000000000044f2         mov        rdi, rbx
00000000000044f5         xor        r9d, r9d
00000000000044f8         mov        edx, r14d
00000000000044fb         call       prompt                                      ; prompt
0000000000004500         cmp        eax, 0x2
0000000000004503         mov        ecx, eax
0000000000004505         je         loc_4768

                     loc_450b:
000000000000450b         lea        eax, dword [rcx-2]                          ; CODE XREF=sub_45b0+459
000000000000450e         cmp        eax, 0x2
0000000000004511         ja         loc_4b81

0000000000004517         cmp        ecx, 0x4
000000000000451a         je         loc_4ba5

0000000000004520         cmp        ecx, 0x3
0000000000004523         jne        rm+112

0000000000004529         cmp        ebp, 0x2
000000000000452c         mov        eax, 0x3
0000000000004531         cmove      ebp, eax
0000000000004534         jmp        rm+112
                        ; endp
0000000000004539         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4540:
0000000000004540         mov        rdx, qword [r15+0x38]
0000000000004544         mov        esi, 0x3
0000000000004549         xor        edi, edi
000000000000454b         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000004550         lea        rsi, qword [aWarningCircula]                ; argument "msgid" for method j_dcgettext, "WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n"
0000000000004557         mov        rbp, rax
000000000000455a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000455f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004561         call       j_dcgettext                                 ; dcgettext
0000000000004566         mov        rcx, rbp
0000000000004569         mov        rdx, rax
000000000000456c         xor        esi, esi
000000000000456e         jmp        sub_43f0+48
                        ; endp
0000000000004573         nop        dword [rax+rax]
0000000000004578         cmp        byte [r13+9], 0x0
000000000000457d         jne        sub_45b0+136
0000000000004583         cmp        byte [r13+0xa], 0x0
0000000000004588         je         sub_45b0+320
000000000000458e         mov        rsi, qword [r15+0x30]
0000000000004592         mov        edi, dword [rbx+0x2c]
0000000000004595         xor        eax, eax
0000000000004597         mov        edx, 0x30900
000000000000459c         call       j_openat                                    ; openat
00000000000045a1         test       eax, eax
00000000000045a3         js         sub_45b0+81
00000000000045a5         mov        edi, eax
00000000000045a7         mov        dword [rsp+8], eax
00000000000045ab         call       j_fdopendir                                 ; fdopendir


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_45b0:
00000000000045b0         test       rax, rax
00000000000045b3         mov        r14, rax
00000000000045b6         mov        edx, dword [rsp+8]
00000000000045ba         je         loc_4af2

00000000000045c0         call       j___errno_location                          ; __errno_location
00000000000045c5         mov        qword [rsp+8], rax
00000000000045ca         mov        dword [rax], 0x0

                     loc_45d0:
00000000000045d0         mov        rdi, r14                                    ; argument "__dirp" for method j_readdir, CODE XREF=sub_45b0+67, sub_45b0+71
00000000000045d3         call       j_readdir                                   ; readdir
00000000000045d8         test       rax, rax
00000000000045db         je         loc_4616

00000000000045dd         cmp        byte [rax+0x13], 0x2e
00000000000045e1         jne        loc_45f9

00000000000045e3         xor        edx, edx
00000000000045e5         cmp        byte [rax+0x14], 0x2e
00000000000045e9         sete       dl
00000000000045ec         movzx      eax, byte [rax+rdx+0x14]
00000000000045f1         test       al, al
00000000000045f3         je         loc_45d0

00000000000045f5         cmp        al, 0x2f
00000000000045f7         je         loc_45d0

                     loc_45f9:
00000000000045f9         mov        rdi, r14                                    ; argument "__dirp" for method j_closedir, CODE XREF=sub_45b0+49
00000000000045fc         call       j_closedir                                  ; closedir

                     loc_4601:
0000000000004601         cmp        byte [r13+0xa], 0x0                         ; CODE XREF=sub_4540+99, sub_45b0+127, sub_47d0+809
0000000000004606         je         loc_46f0

000000000000460c         mov        ebp, 0x27
0000000000004611         jmp        loc_46f5

                     loc_4616:
0000000000004616         mov        rax, qword [rsp+8]                          ; CODE XREF=sub_45b0+43
000000000000461b         mov        rdi, r14                                    ; argument "__dirp" for method j_closedir
000000000000461e         mov        edx, dword [rax]
0000000000004620         mov        dword [rsp+8], edx
0000000000004624         call       j_closedir                                  ; closedir
0000000000004629         mov        edx, dword [rsp+8]
000000000000462d         test       edx, edx
000000000000462f         jne        loc_4601

0000000000004631         nop        dword [rax]
0000000000004638         cmp        qword [r15+0x58], 0x0                       ; CODE XREF=sub_4540+61
000000000000463d         jne        sub_45b0+200

000000000000463f         mov        r14, qword [r15+0x30]
0000000000004643         mov        rdi, r14                                    ; argument #1 for method last_component
0000000000004646         call       last_component                              ; last_component
000000000000464b         cmp        byte [rax], 0x2e
000000000000464e         je         sub_47d0                                    ; sub_47d0
                        ; endp

                     loc_4654:
0000000000004654         mov        rax, qword [r13+0x10]                       ; CODE XREF=sub_47d0+20
0000000000004658         test       rax, rax
000000000000465b         je         loc_466d

000000000000465d         mov        rcx, qword [rax]
0000000000004660         cmp        qword [r15+0x80], rcx
0000000000004667         je         loc_49e0

                     loc_466d:
000000000000466d         cmp        byte [r13+0x18], 0x0                        ; CODE XREF=sub_45b0+171, sub_47d0+536
0000000000004672         jne        loc_4868

                     loc_4678:
0000000000004678         mov        r9, qword [rsp+arg_8]                       ; CODE XREF=sub_47d0+321
000000000000467d         mov        rcx, r13
0000000000004680         mov        r8d, 0x2
0000000000004686         mov        edx, 0x1
000000000000468b         mov        rsi, r15
000000000000468e         mov        rdi, rbx
0000000000004691         call       prompt                                      ; prompt
0000000000004696         cmp        eax, 0x2
0000000000004699         mov        ecx, eax
000000000000469b         je         sub_4780                                    ; sub_4780
                        ; endp

                     loc_46a1:
00000000000046a1         mov        rax, qword [r15+8]                          ; CODE XREF=sub_4780+71
00000000000046a5         cmp        qword [rax+0x58], 0x0
00000000000046aa         jns        loc_46c3

00000000000046ac         jmp        loc_46ca
00000000000046ae         align      16

                     loc_46b0:
00000000000046b0         mov        qword [rax+0x20], 0x1                       ; CODE XREF=sub_45b0+280
00000000000046b8         mov        rax, qword [rax+8]
00000000000046bc         cmp        qword [rax+0x58], 0x0
00000000000046c1         js         loc_46ca

                     loc_46c3:
00000000000046c3         cmp        qword [rax+0x20], 0x0                       ; CODE XREF=sub_45b0+250
00000000000046c8         je         loc_46b0

                     loc_46ca:
00000000000046ca         mov        edx, 0x4                                    ; CODE XREF=sub_45b0+252, sub_45b0+273
00000000000046cf         mov        rsi, r15
00000000000046d2         mov        rdi, rbx
00000000000046d5         mov        dword [rsp+arg_0], ecx
00000000000046d9         call       rpl_fts_set                                 ; rpl_fts_set
00000000000046de         mov        rdi, rbx
00000000000046e1         call       rpl_fts_read                                ; rpl_fts_read
00000000000046e6         mov        ecx, dword [rsp+arg_0]
00000000000046ea         jmp        sub_44b0+91
                        ; endp
00000000000046ef         nop

                     loc_46f0:
00000000000046f0         mov        ebp, 0x15                                   ; CODE XREF=sub_4540+72, sub_45b0+86

                     loc_46f5:
00000000000046f5         mov        rsi, qword [r15+0x38]                       ; argument #2 for method quotearg_style, CODE XREF=sub_45b0+97
00000000000046f9         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
00000000000046fe         call       quotearg_style                              ; quotearg_style
0000000000004703         lea        rsi, qword [aCannotRemoveS]                 ; argument "msgid" for method j_dcgettext, "cannot remove %s"
000000000000470a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000470c         mov        r14, rax
000000000000470f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004714         call       j_dcgettext                                 ; dcgettext
0000000000004719         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000471b         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000471e         mov        rcx, r14
0000000000004721         xor        eax, eax
0000000000004723         mov        esi, ebp                                    ; argument "__errnum" for method j_error
0000000000004725         call       j_error                                     ; error
000000000000472a         mov        rax, qword [r15+8]
000000000000472e         cmp        qword [rax+0x58], 0x0
0000000000004733         jns        loc_4757

0000000000004735         jmp        sub_43f0+57
                        ; endp
000000000000473a         nop        word [rax+rax]

                     loc_4740:
0000000000004740         mov        qword [rax+0x20], 0x1                       ; CODE XREF=sub_45b0+428
0000000000004748         mov        rax, qword [rax+8]
000000000000474c         cmp        qword [rax+0x58], 0x0
0000000000004751         js         sub_43f0+57

                     loc_4757:
0000000000004757         cmp        qword [rax+0x20], 0x0                       ; CODE XREF=sub_45b0+387
000000000000475c         je         loc_4740

000000000000475e         jmp        sub_43f0+57
                        ; endp
0000000000004763         nop        dword [rax+rax]

                     loc_4768:
0000000000004768         mov        ecx, r14d                                   ; CODE XREF=sub_44b0+85
000000000000476b         mov        rdx, r13
000000000000476e         mov        rsi, r15
0000000000004771         mov        rdi, rbx
0000000000004774         call       excise                                      ; excise
0000000000004779         mov        ecx, eax
000000000000477b         jmp        loc_450b


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_24: int32_t, 44
        ;    arg_0: int, 8


                     sub_4780:
0000000000004780         cmp        dword [rsp+arg_24], 0x4
0000000000004785         jne        rm+112

000000000000478b         mov        ecx, 0x1
0000000000004790         mov        rdx, r13
0000000000004793         mov        rsi, r15
0000000000004796         mov        rdi, rbx
0000000000004799         call       excise                                      ; excise
000000000000479e         mov        edx, 0x4
00000000000047a3         mov        rsi, r15
00000000000047a6         mov        rdi, rbx
00000000000047a9         mov        dword [rsp+arg_0], eax
00000000000047ad         call       rpl_fts_set                                 ; rpl_fts_set
00000000000047b2         mov        rdi, rbx
00000000000047b5         call       rpl_fts_read                                ; rpl_fts_read
00000000000047ba         mov        ecx, dword [rsp+arg_0]
00000000000047be         cmp        ecx, 0x2
00000000000047c1         je         rm+112

00000000000047c7         jmp        loc_46a1
00000000000047cc         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     sub_47d0:
00000000000047d0         xor        edx, edx
00000000000047d2         cmp        byte [rax+1], 0x2e
00000000000047d6         sete       dl
00000000000047d9         movzx      eax, byte [rax+rdx+1]
00000000000047de         test       al, al
00000000000047e0         je         loc_47ea

00000000000047e2         cmp        al, 0x2f
00000000000047e4         jne        loc_4654

                     loc_47ea:
00000000000047ea         mov        rdx, qword [r15+0x38]                       ; CODE XREF=sub_47d0+16
00000000000047ee         mov        esi, 0x4
00000000000047f3         mov        edi, 0x2
00000000000047f8         call       quotearg_n_style                            ; quotearg_n_style
00000000000047fd         lea        rdx, qword [aFtsreadFailed+16]              ; 0x15aeb
0000000000004804         mov        esi, 0x4
0000000000004809         mov        edi, 0x1
000000000000480e         mov        rbp, rax
0000000000004811         call       quotearg_n_style                            ; quotearg_n_style
0000000000004816         lea        rdx, qword [aFtsreadFailed+17]              ; 0x15aec
000000000000481d         xor        edi, edi
000000000000481f         mov        esi, 0x4
0000000000004824         mov        r14, rax
0000000000004827         call       quotearg_n_style                            ; quotearg_n_style
000000000000482c         lea        rsi, qword [aRefusingToRemo]                ; argument "msgid" for method j_dcgettext, "refusing to remove %s or %s directory: skipping %s"
0000000000004833         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004835         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000483a         mov        qword [rsp+arg_0], rax
000000000000483f         call       j_dcgettext                                 ; dcgettext
0000000000004844         mov        rcx, qword [rsp+arg_0]
0000000000004849         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000484c         mov        r9, rbp
000000000000484f         mov        r8, r14
0000000000004852         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004854         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004856         xor        eax, eax
0000000000004858         call       j_error                                     ; error
000000000000485d         jmp        sub_43f0+57
                        ; endp
0000000000004862         align      8

                     loc_4868:
0000000000004868         lea        rsi, qword [aFtsreadFailed+16]              ; 0x15aeb, CODE XREF=sub_45b0+194
000000000000486f         xor        edx, edx
0000000000004871         mov        rdi, r14
0000000000004874         call       file_name_concat                            ; file_name_concat
0000000000004879         test       rax, rax
000000000000487c         mov        r14, rax
000000000000487f         je         loc_4897

0000000000004881         mov        rdx, qword [rsp+arg_10]                     ; argument "__stat_buf" for method j___lxstat
0000000000004886         mov        rsi, rax                                    ; argument "__filename" for method j___lxstat
0000000000004889         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
000000000000488e         call       j___lxstat                                  ; __lxstat
0000000000004893         test       eax, eax
0000000000004895         je         loc_4900

                     loc_4897:
0000000000004897         mov        rdx, qword [r15+0x30]                       ; CODE XREF=sub_47d0+175
000000000000489b         mov        esi, 0x4
00000000000048a0         mov        edi, 0x1
00000000000048a5         call       quotearg_n_style                            ; quotearg_n_style
00000000000048aa         mov        rdx, r14
00000000000048ad         xor        edi, edi
00000000000048af         mov        esi, 0x4
00000000000048b4         mov        rbp, rax
00000000000048b7         call       quotearg_n_style                            ; quotearg_n_style
00000000000048bc         lea        rsi, qword [aFailedToStatSS]                ; argument "msgid" for method j_dcgettext, "failed to stat %s: skipping %s"
00000000000048c3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000048c5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000048ca         mov        qword [rsp+arg_0], rax
00000000000048cf         call       j_dcgettext                                 ; dcgettext
00000000000048d4         mov        rcx, qword [rsp+arg_0]
00000000000048d9         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000048dc         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000048de         mov        r8, rbp
00000000000048e1         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000048e3         xor        eax, eax
00000000000048e5         call       j_error                                     ; error
00000000000048ea         mov        rdi, r14
00000000000048ed         call       sub_2c80                                    ; sub_2c80
00000000000048f2         jmp        sub_43f0+57
                        ; endp
00000000000048f7         align      256

                     loc_4900:
0000000000004900         mov        rdi, r14                                    ; CODE XREF=sub_47d0+197
0000000000004903         call       sub_2c80                                    ; sub_2c80
0000000000004908         mov        rax, qword [rsp+arg_28]
000000000000490d         cmp        qword [rbx+0x18], rax
0000000000004911         je         loc_4678

0000000000004917         mov        rsi, qword [r15+0x38]
000000000000491b         mov        edi, 0x4
0000000000004920         call       quotearg_style                              ; quotearg_style
0000000000004925         lea        rsi, qword [aSkippingSSince]                ; argument "msgid" for method j_dcgettext, "skipping %s, since it's on a different device"
000000000000492c         mov        rbp, rax
000000000000492f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004934         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004936         call       j_dcgettext                                 ; dcgettext
000000000000493b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000493d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004940         mov        rcx, rbp
0000000000004943         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004945         xor        eax, eax
0000000000004947         call       j_error                                     ; error
000000000000494c         lea        rsi, qword [aAndPreserveroo]                ; "and --preserve-root=all is in effect"
0000000000004953         mov        edx, 0x5

                     loc_4958:
0000000000004958         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=sub_47d0+671
000000000000495a         call       j_dcgettext                                 ; dcgettext
000000000000495f         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004961         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004964         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004966         xor        eax, eax
0000000000004968         call       j_error                                     ; error
000000000000496d         jmp        sub_43f0+57
                        ; endp
0000000000004972         align      8

                     loc_4978:
0000000000004978         lea        rsi, qword [aFtsreadFailed]                 ; argument "msgid" for method j_dcgettext, "fts_read failed", CODE XREF=sub_43f0+118
000000000000497f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004981         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004986         mov        ebp, 0x4
000000000000498b         call       j_dcgettext                                 ; dcgettext
0000000000004990         mov        esi, dword [r12]                            ; argument "__errnum" for method j_error
0000000000004994         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004997         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004999         xor        eax, eax
000000000000499b         call       j_error                                     ; error
00000000000049a0         mov        rdi, rbx
00000000000049a3         call       rpl_fts_close                               ; rpl_fts_close
00000000000049a8         test       eax, eax
00000000000049aa         je         loc_447c

                     loc_49b0:
00000000000049b0         lea        rsi, qword [aFtscloseFailed]                ; argument "msgid" for method j_dcgettext, "fts_close failed", CODE XREF=sub_43f0+134
00000000000049b7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000049bc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000049be         mov        ebp, 0x4
00000000000049c3         call       j_dcgettext                                 ; dcgettext
00000000000049c8         mov        esi, dword [r12]                            ; argument "__errnum" for method j_error
00000000000049cc         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000049cf         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000049d1         xor        eax, eax
00000000000049d3         call       j_error                                     ; error
00000000000049d8         jmp        loc_447c
00000000000049dd         align      32

                     loc_49e0:
00000000000049e0         mov        rax, qword [rax+8]                          ; CODE XREF=sub_45b0+183
00000000000049e4         cmp        qword [r15+0x78], rax
00000000000049e8         jne        loc_466d

00000000000049ee         mov        rdx, qword [r15+0x38]
00000000000049f2         lea        rdi, qword [aLibs+6]                        ; 0x16a8e
00000000000049f9         mov        ecx, 0x2
00000000000049fe         mov        rsi, rdx
0000000000004a01         rep  cmpsb byte [rsi], byte [rdi]
0000000000004a03         seta       al
0000000000004a06         sbb        al, 0x0
0000000000004a08         test       al, al
0000000000004a0a         je         loc_4afe

0000000000004a10         lea        rdx, qword [aLibs+6]                        ; 0x16a8e
0000000000004a17         mov        esi, 0x4
0000000000004a1c         mov        edi, 0x1
0000000000004a21         call       quotearg_n_style                            ; quotearg_n_style
0000000000004a26         mov        rdx, qword [r15+0x38]
0000000000004a2a         mov        esi, 0x4
0000000000004a2f         xor        edi, edi
0000000000004a31         mov        rbp, rax
0000000000004a34         call       quotearg_n_style                            ; quotearg_n_style
0000000000004a39         lea        rsi, qword [aItIsDangerousT]                ; argument "msgid" for method j_dcgettext, "it is dangerous to operate recursively on %s (same as %s)"
0000000000004a40         mov        r14, rax
0000000000004a43         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a48         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a4a         call       j_dcgettext                                 ; dcgettext
0000000000004a4f         mov        r8, rbp
0000000000004a52         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004a55         mov        rcx, r14
0000000000004a58         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004a5a         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004a5c         xor        eax, eax
0000000000004a5e         call       j_error                                     ; error

                     loc_4a63:
0000000000004a63         mov        edx, 0x5                                    ; CODE XREF=sub_47d0+866
0000000000004a68         lea        rsi, qword [aUseNopreserver]                ; "use --no-preserve-root to override this failsafe"
0000000000004a6f         jmp        loc_4958
0000000000004a74         align      8

                     loc_4a78:
0000000000004a78         mov        rax, qword [r15+8]                          ; CODE XREF=sub_44b0+28
0000000000004a7c         cmp        qword [rax+0x58], 0x0
0000000000004a81         jns        loc_4a9b

0000000000004a83         jmp        loc_4aa2
0000000000004a85         align      8

                     loc_4a88:
0000000000004a88         mov        qword [rax+0x20], 0x1                       ; CODE XREF=sub_47d0+720
0000000000004a90         mov        rax, qword [rax+8]
0000000000004a94         cmp        qword [rax+0x58], 0x0
0000000000004a99         js         loc_4aa2

                     loc_4a9b:
0000000000004a9b         cmp        qword [rax+0x20], 0x0                       ; CODE XREF=sub_47d0+689
0000000000004aa0         je         loc_4a88

                     loc_4aa2:
0000000000004aa2         mov        rsi, qword [r15+0x38]                       ; CODE XREF=sub_47d0+691, sub_47d0+713
0000000000004aa6         mov        edi, 0x4
0000000000004aab         call       quotearg_style                              ; quotearg_style
0000000000004ab0         lea        rsi, qword [aSkippingSSince]                ; argument "msgid" for method j_dcgettext, "skipping %s, since it's on a different device"
0000000000004ab7         mov        rbp, rax
0000000000004aba         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004abf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ac1         call       j_dcgettext                                 ; dcgettext
0000000000004ac6         mov        rcx, rbp
0000000000004ac9         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004acc         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004ace         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004ad0         xor        eax, eax
0000000000004ad2         mov        ebp, 0x4
0000000000004ad7         call       j_error                                     ; error
0000000000004adc         jmp        rm+112
                        ; endp
0000000000004ae1         align      8

                     loc_4ae8:
0000000000004ae8         mov        ebp, 0x2                                    ; CODE XREF=rm+40
0000000000004aed         jmp        loc_447c

                     loc_4af2:
0000000000004af2         mov        edi, edx                                    ; argument "__fd" for method j_close, CODE XREF=sub_45b0+10
0000000000004af4         call       j_close                                     ; close
0000000000004af9         jmp        loc_4601

                     loc_4afe:
0000000000004afe         mov        rsi, rdx                                    ; CODE XREF=sub_47d0+570
0000000000004b01         mov        edi, 0x4
0000000000004b06         call       quotearg_style                              ; quotearg_style
0000000000004b0b         lea        rsi, qword [aItIsDangerousT_15bf0]          ; argument "msgid" for method j_dcgettext, "it is dangerous to operate recursively on %s"
0000000000004b12         mov        rbp, rax
0000000000004b15         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004b17         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004b1c         call       j_dcgettext                                 ; dcgettext
0000000000004b21         mov        rcx, rbp
0000000000004b24         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004b27         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004b29         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004b2b         xor        eax, eax
0000000000004b2d         call       j_error                                     ; error
0000000000004b32         jmp        loc_4a63

                     loc_4b37:
0000000000004b37         mov        rdx, qword [r15+0x38]                       ; CODE XREF=rm+140
0000000000004b3b         mov        esi, 0x3
0000000000004b40         xor        edi, edi
0000000000004b42         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000004b47         movzx      ebx, word [r15+0x70]
0000000000004b4c         lea        rsi, qword [aUnexpectedFail]                ; argument "msgid" for method j_dcgettext, "unexpected failure: fts_info=%d: %s\\nplease report to %s"
0000000000004b53         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004b58         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004b5a         mov        rbp, rax
0000000000004b5d         call       j_dcgettext                                 ; dcgettext
0000000000004b62         lea        r9, qword [aBugcoreutilsgn]                 ; "bug-coreutils@gnu.org"
0000000000004b69         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004b6c         mov        r8, rbp
0000000000004b6f         mov        ecx, ebx
0000000000004b71         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004b73         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004b75         xor        eax, eax
0000000000004b77         call       j_error                                     ; error
0000000000004b7c         call       j_abort                                     ; abort
                        ; endp

                     loc_4b81:
0000000000004b81         lea        rcx, qword [__PRETTY_FUNCTION__.7067]       ; argument "__function" for method j___assert_fail, __PRETTY_FUNCTION__.7067, CODE XREF=sub_44b0+97
0000000000004b88         lea        rsi, qword [aCoreutils831sr_15de0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/remove.c"
0000000000004b8f         lea        rdi, qword [aValidstatusS]                  ; argument "__assertion" for method j___assert_fail, "VALID_STATUS (s)"
0000000000004b96         mov        edx, 0x261                                  ; argument "__line" for method j___assert_fail
0000000000004b9b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_4ba0:
0000000000004ba0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_43f0+159
                        ; endp

                     loc_4ba5:
0000000000004ba5         mov        ebp, 0x4                                    ; CODE XREF=sub_44b0+106
0000000000004baa         jmp        rm+112
                        ; endp
0000000000004baf         align      16                                          ; End of unwind block (FDE at 0x17fa4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     writable_destination:
0000000000004bb0         and        esi, 0xf000                                 ; Begin of unwind block (FDE at 0x17ff4), CODE XREF=overwrite_ok.isra.12+42, copy_internal+4667
0000000000004bb6         cmp        esi, 0xa000
0000000000004bbc         je         loc_4bd8

0000000000004bbe         push       rbx
0000000000004bbf         mov        rbx, rdi
0000000000004bc2         call       can_write_any_file                          ; can_write_any_file
0000000000004bc7         test       al, al
0000000000004bc9         je         loc_4be0

0000000000004bcb         mov        eax, 0x1
0000000000004bd0         pop        rbx
0000000000004bd1         ret
                        ; endp
0000000000004bd2         align      8

                     loc_4bd8:
0000000000004bd8         mov        eax, 0x1                                    ; CODE XREF=writable_destination+12
0000000000004bdd         ret
                        ; endp
0000000000004bde         align      32

                     loc_4be0:
0000000000004be0         mov        rdi, rbx                                    ; argument "__name" for method j_euidaccess, CODE XREF=writable_destination+25
0000000000004be3         mov        esi, 0x2                                    ; argument "__type" for method j_euidaccess
0000000000004be8         call       j_euidaccess                                ; euidaccess
0000000000004bed         test       eax, eax
0000000000004bef         sete       al
0000000000004bf2         pop        rbx
0000000000004bf3         ret
                        ; endp
0000000000004bf4         align      1024                                        ; End of unwind block (FDE at 0x17ff4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     write_zeros:
0000000000004c00         cmp        qword [zeros.7570], 0x0                     ; Begin of unwind block (FDE at 0x18018), zeros.7570, CODE XREF=copy_internal+14769, copy_internal+15547
0000000000004c08         push       r12
0000000000004c0a         mov        r12d, edi
0000000000004c0d         push       rbp
0000000000004c0e         push       rbx
0000000000004c0f         mov        rbx, rsi
0000000000004c12         je         loc_4c68

                     loc_4c14:
0000000000004c14         test       rbx, rbx                                    ; CODE XREF=write_zeros+133, write_zeros+160
0000000000004c17         jne        loc_4c25

0000000000004c19         jmp        loc_4c58
0000000000004c1b         align      32

                     loc_4c20:
0000000000004c20         sub        rbx, rax                                    ; CODE XREF=write_zeros+76
0000000000004c23         je         loc_4c58

                     loc_4c25:
0000000000004c25         cmp        qword [mask.7898+8], rbx                    ; 0x21c018, CODE XREF=write_zeros+23
0000000000004c2c         mov        rbp, rbx
0000000000004c2f         mov        rsi, qword [zeros.7570]                     ; zeros.7570
0000000000004c36         cmovbe     rbp, qword [mask.7898+8]                    ; 0x21c018
0000000000004c3e         mov        edi, r12d
0000000000004c41         mov        rdx, rbp
0000000000004c44         call       full_write                                  ; full_write
0000000000004c49         cmp        rax, rbp
0000000000004c4c         je         loc_4c20

0000000000004c4e         pop        rbx
0000000000004c4f         xor        eax, eax
0000000000004c51         pop        rbp
0000000000004c52         pop        r12
0000000000004c54         ret
                        ; endp
0000000000004c55         align      8

                     loc_4c58:
0000000000004c58         pop        rbx                                         ; CODE XREF=write_zeros+25, write_zeros+35
0000000000004c59         mov        eax, 0x1
0000000000004c5e         pop        rbp
0000000000004c5f         pop        r12
0000000000004c61         ret
                        ; endp
0000000000004c62         align      8

                     loc_4c68:
0000000000004c68         mov        rdi, qword [mask.7898+8]                    ; argument "__nmemb" for method j_calloc, 0x21c018, CODE XREF=write_zeros+18
0000000000004c6f         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
0000000000004c74         call       j_calloc                                    ; calloc
0000000000004c79         test       rax, rax
0000000000004c7c         je         loc_4c87

0000000000004c7e         mov        qword [zeros.7570], rax                     ; zeros.7570
0000000000004c85         jmp        loc_4c14

                     loc_4c87:
0000000000004c87         lea        rax, qword [fallback.7572]                  ; fallback.7572, CODE XREF=write_zeros+124
0000000000004c8e         mov        qword [mask.7898+8], 0x400                  ; 0x21c018
0000000000004c99         mov        qword [zeros.7570], rax                     ; zeros.7570
0000000000004ca0         jmp        loc_4c14
0000000000004ca5         align      16                                          ; End of unwind block (FDE at 0x18018)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     punch_hole:
0000000000004cb0         push       rbx                                         ; Begin of unwind block (FDE at 0x18054), CODE XREF=create_hole+75, copy_internal+15484
0000000000004cb1         mov        rcx, rdx
0000000000004cb4         mov        rdx, rsi
0000000000004cb7         mov        esi, 0x3
0000000000004cbc         call       j_fallocate                                 ; fallocate
0000000000004cc1         test       eax, eax
0000000000004cc3         mov        ebx, eax
0000000000004cc5         js         loc_4cd0

                     loc_4cc7:
0000000000004cc7         mov        eax, ebx                                    ; CODE XREF=punch_hole+47
0000000000004cc9         pop        rbx
0000000000004cca         ret
                        ; endp
0000000000004ccb         align      16

                     loc_4cd0:
0000000000004cd0         call       j___errno_location                          ; __errno_location, CODE XREF=punch_hole+21
0000000000004cd5         mov        eax, dword [rax]
0000000000004cd7         cmp        eax, 0x26
0000000000004cda         je         loc_4ce1

0000000000004cdc         cmp        eax, 0x5f
0000000000004cdf         jne        loc_4cc7

                     loc_4ce1:
0000000000004ce1         xor        ebx, ebx                                    ; CODE XREF=punch_hole+42
0000000000004ce3         mov        eax, ebx
0000000000004ce5         pop        rbx
0000000000004ce6         ret
                        ; endp
0000000000004ce7         align      16                                          ; End of unwind block (FDE at 0x18054)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_verbose:
0000000000004cf0         push       r12                                         ; Begin of unwind block (FDE at 0x180a0), CODE XREF=copy_internal+2619, copy_internal+5063, copy_internal+9063, copy_internal+11197
0000000000004cf2         push       rbp
0000000000004cf3         mov        r12, rdi
0000000000004cf6         push       rbx
0000000000004cf7         mov        edi, 0x1
0000000000004cfc         mov        rbx, rdx
0000000000004cff         mov        rdx, rsi
0000000000004d02         mov        esi, 0x4
0000000000004d07         call       quotearg_n_style                            ; quotearg_n_style
0000000000004d0c         xor        edi, edi
0000000000004d0e         mov        rdx, r12
0000000000004d11         mov        esi, 0x4
0000000000004d16         mov        rbp, rax
0000000000004d19         call       quotearg_n_style                            ; quotearg_n_style
0000000000004d1e         lea        rsi, qword [aSS]                            ; "%s -> %s"
0000000000004d25         mov        rdx, rax
0000000000004d28         mov        rcx, rbp
0000000000004d2b         xor        eax, eax
0000000000004d2d         mov        edi, 0x1
0000000000004d32         call       j___printf_chk                              ; __printf_chk
0000000000004d37         test       rbx, rbx
0000000000004d3a         je         loc_4d71

0000000000004d3c         mov        rsi, rbx
0000000000004d3f         mov        edi, 0x4
0000000000004d44         call       quotearg_style                              ; quotearg_style
0000000000004d49         lea        rsi, qword [aBackupS]                       ; argument "msgid" for method j_dcgettext, " (backup: %s)"
0000000000004d50         mov        rbx, rax
0000000000004d53         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004d58         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d5a         call       j_dcgettext                                 ; dcgettext
0000000000004d5f         mov        rdx, rbx
0000000000004d62         mov        rsi, rax
0000000000004d65         mov        edi, 0x1
0000000000004d6a         xor        eax, eax
0000000000004d6c         call       j___printf_chk                              ; __printf_chk

                     loc_4d71:
0000000000004d71         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=emit_verbose+74
0000000000004d78         mov        rax, qword [rdi+0x28]
0000000000004d7c         cmp        rax, qword [rdi+0x30]
0000000000004d80         jae        loc_4d98

0000000000004d82         lea        rdx, qword [rax+1]
0000000000004d86         mov        qword [rdi+0x28], rdx
0000000000004d8a         mov        byte [rax], 0xa
0000000000004d8d         pop        rbx
0000000000004d8e         pop        rbp
0000000000004d8f         pop        r12
0000000000004d91         ret
                        ; endp
0000000000004d92         align      8

                     loc_4d98:
0000000000004d98         pop        rbx                                         ; CODE XREF=emit_verbose+144
0000000000004d99         pop        rbp
0000000000004d9a         pop        r12
0000000000004d9c         mov        esi, 0xa                                    ; argument #2 for method j___overflow
0000000000004da1         jmp        j___overflow                                ; __overflow
                        ; endp
0000000000004da6         align      16                                          ; End of unwind block (FDE at 0x180a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     create_hard_link:
0000000000004db0         push       r13                                         ; Begin of unwind block (FDE at 0x180d8), CODE XREF=copy_internal+756, copy_internal+1391, copy_internal+5479
0000000000004db2         push       r12
0000000000004db4         movzx      r9d, dl
0000000000004db8         push       rbp
0000000000004db9         push       rbx
0000000000004dba         mov        edx, 0xffffff9c
0000000000004dbf         mov        r13, rdi
0000000000004dc2         mov        r12, rsi
0000000000004dc5         mov        ebp, ecx
0000000000004dc7         sub        rsp, 0x10
0000000000004dcb         test       r8b, r8b
0000000000004dce         mov        rcx, rsi
0000000000004dd1         setne      r8b
0000000000004dd5         push       0xffffffffffffffff
0000000000004dd7         mov        rsi, rdi
0000000000004dda         movzx      r8d, r8b
0000000000004dde         mov        edi, edx
0000000000004de0         shl        r8d, 0xa
0000000000004de4         call       force_linkat                                ; force_linkat
0000000000004de9         test       eax, eax
0000000000004deb         mov        ebx, eax
0000000000004ded         pop        rdx
0000000000004dee         pop        rcx
0000000000004def         jg         loc_4e58

0000000000004df1         shr        ebx, 0x1f
0000000000004df4         and        bl, bpl
0000000000004df7         jne        loc_4e10

0000000000004df9         add        rsp, 0x8
0000000000004dfd         mov        ebx, 0x1
0000000000004e02         mov        eax, ebx
0000000000004e04         pop        rbx
0000000000004e05         pop        rbp
0000000000004e06         pop        r12
0000000000004e08         pop        r13
0000000000004e0a         ret
                        ; endp
0000000000004e0b         align      16

                     loc_4e10:
0000000000004e10         mov        rsi, r12                                    ; CODE XREF=create_hard_link+71
0000000000004e13         mov        edi, 0x4
0000000000004e18         call       quotearg_style                              ; quotearg_style
0000000000004e1d         lea        rsi, qword [aRemovedSn]                     ; argument "msgid" for method j_dcgettext, "removed %s\\n"
0000000000004e24         mov        rbp, rax
0000000000004e27         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e2c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e2e         call       j_dcgettext                                 ; dcgettext
0000000000004e33         mov        rdx, rbp
0000000000004e36         mov        rsi, rax
0000000000004e39         mov        edi, 0x1
0000000000004e3e         xor        eax, eax
0000000000004e40         call       j___printf_chk                              ; __printf_chk
0000000000004e45         add        rsp, 0x8
0000000000004e49         mov        eax, ebx
0000000000004e4b         pop        rbx
0000000000004e4c         pop        rbp
0000000000004e4d         pop        r12
0000000000004e4f         pop        r13
0000000000004e51         ret
                        ; endp
0000000000004e52         align      8

                     loc_4e58:
0000000000004e58         mov        rdx, r13                                    ; CODE XREF=create_hard_link+63
0000000000004e5b         mov        esi, 0x4
0000000000004e60         mov        edi, 0x1
0000000000004e65         call       quotearg_n_style                            ; quotearg_n_style
0000000000004e6a         mov        rdx, r12
0000000000004e6d         mov        esi, 0x4
0000000000004e72         xor        edi, edi
0000000000004e74         mov        r13, rax
0000000000004e77         call       quotearg_n_style                            ; quotearg_n_style
0000000000004e7c         lea        rsi, qword [aCannotCreateHa]                ; argument "msgid" for method j_dcgettext, "cannot create hard link %s to %s"
0000000000004e83         mov        rbp, rax
0000000000004e86         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e8b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e8d         call       j_dcgettext                                 ; dcgettext
0000000000004e92         mov        r8, r13
0000000000004e95         mov        rcx, rbp
0000000000004e98         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004e9b         mov        esi, ebx                                    ; argument "__errnum" for method j_error
0000000000004e9d         xor        eax, eax
0000000000004e9f         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004ea1         call       j_error                                     ; error
0000000000004ea6         xor        ebx, ebx
0000000000004ea8         add        rsp, 0x8
0000000000004eac         mov        eax, ebx
0000000000004eae         pop        rbx
0000000000004eaf         pop        rbp
0000000000004eb0         pop        r12
0000000000004eb2         pop        r13
0000000000004eb4         ret
                        ; endp
0000000000004eb5         align      64                                          ; End of unwind block (FDE at 0x180d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_32: int8_t, -50
        ;    var_3C: int8_t, -60


                     overwrite_ok.isra.12:
0000000000004ec0         push       r14                                         ; Begin of unwind block (FDE at 0x18140), CODE XREF=copy_internal+3180, copy_internal+4727
0000000000004ec2         push       r13
0000000000004ec4         mov        r13, rdi
0000000000004ec7         push       r12
0000000000004ec9         push       rbp
0000000000004eca         mov        rbp, rdx
0000000000004ecd         push       rbx
0000000000004ece         mov        rbx, rsi
0000000000004ed1         mov        rdi, rbx
0000000000004ed4         sub        rsp, 0x20
0000000000004ed8         mov        esi, dword [rdx]
0000000000004eda         mov        rax, qword [fs:0x28]
0000000000004ee3         mov        qword [rsp+0x48+var_30], rax
0000000000004ee8         xor        eax, eax
0000000000004eea         call       writable_destination                        ; writable_destination
0000000000004eef         test       al, al
0000000000004ef1         jne        loc_4f88

0000000000004ef7         mov        edi, dword [rbp]                            ; argument "mode" for method strmode
0000000000004efa         lea        r12, qword [rsp+0x48+var_3C]
0000000000004eff         mov        rsi, r12                                    ; argument "str" for method strmode
0000000000004f02         call       strmode                                     ; strmode
0000000000004f07         mov        ebp, dword [rbp]
0000000000004f0a         mov        rsi, rbx
0000000000004f0d         mov        edi, 0x4
0000000000004f12         mov        byte [rsp+0x48+var_32], 0x0
0000000000004f17         call       quotearg_style                              ; quotearg_style
0000000000004f1c         and        ebp, aEtpid                                 ; "etpid"
0000000000004f22         cmp        byte [r13+0x18], 0x0
0000000000004f27         mov        r14, rax
0000000000004f2a         mov        rbx, qword [program_name]                   ; program_name
0000000000004f31         mov        edx, 0x5
0000000000004f36         jne        loc_4f46

0000000000004f38         test       dword [r13+0x14], 0xffff00
0000000000004f40         je         loc_4ff0

                     loc_4f46:
0000000000004f46         lea        rsi, qword [aSReplaceSOverr]                ; argument "msgid" for method j_dcgettext, "%s: replace %s, overriding mode %04lo (%s)? ", CODE XREF=overwrite_ok.isra.12+118
0000000000004f4d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f4f         call       j_dcgettext                                 ; dcgettext
0000000000004f54         mov        rdx, rax

                     loc_4f57:
0000000000004f57         sub        rsp, 0x8                                    ; CODE XREF=overwrite_ok.isra.12+321
0000000000004f5b         add        r12, 0x1
0000000000004f5f         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004f66         push       r12
0000000000004f68         mov        r9, rbp
0000000000004f6b         mov        r8, r14
0000000000004f6e         mov        rcx, rbx
0000000000004f71         mov        esi, 0x1
0000000000004f76         xor        eax, eax
0000000000004f78         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004f7d         pop        rax
0000000000004f7e         pop        rdx
0000000000004f7f         jmp        loc_4fce
0000000000004f81         align      8

                     loc_4f88:
0000000000004f88         mov        rsi, rbx                                    ; CODE XREF=overwrite_ok.isra.12+49
0000000000004f8b         mov        edi, 0x4
0000000000004f90         call       quotearg_style                              ; quotearg_style
0000000000004f95         lea        rsi, qword [aSOverwriteS]                   ; argument "msgid" for method j_dcgettext, "%s: overwrite %s? "
0000000000004f9c         mov        rbx, qword [program_name]                   ; program_name
0000000000004fa3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004fa8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004faa         mov        rbp, rax
0000000000004fad         call       j_dcgettext                                 ; dcgettext
0000000000004fb2         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004fb9         mov        rdx, rax
0000000000004fbc         mov        r8, rbp
0000000000004fbf         mov        rcx, rbx
0000000000004fc2         mov        esi, 0x1
0000000000004fc7         xor        eax, eax
0000000000004fc9         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_4fce:
0000000000004fce         call       yesno                                       ; yesno, CODE XREF=overwrite_ok.isra.12+191
0000000000004fd3         mov        rcx, qword [rsp+0x48+var_30]
0000000000004fd8         xor        rcx, qword [fs:0x28]
0000000000004fe1         jne        loc_5006

0000000000004fe3         add        rsp, 0x20
0000000000004fe7         pop        rbx
0000000000004fe8         pop        rbp
0000000000004fe9         pop        r12
0000000000004feb         pop        r13
0000000000004fed         pop        r14
0000000000004fef         ret
                        ; endp

                     loc_4ff0:
0000000000004ff0         lea        rsi, qword [aSUnwritableSMo]                ; argument "msgid" for method j_dcgettext, "%s: unwritable %s (mode %04lo, %s); try anyway? ", CODE XREF=overwrite_ok.isra.12+128
0000000000004ff7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ff9         call       j_dcgettext                                 ; dcgettext
0000000000004ffe         mov        rdx, rax
0000000000005001         jmp        loc_4f57

                     loc_5006:
0000000000005006         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=overwrite_ok.isra.12+289
                        ; endp
000000000000500b         align      16                                          ; End of unwind block (FDE at 0x18140)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     create_hole:
0000000000005010         push       r13                                         ; Begin of unwind block (FDE at 0x18190), CODE XREF=sparse_copy+631, sparse_copy+696, copy_internal+12901
0000000000005012         push       r12
0000000000005014         mov        r13, rsi
0000000000005017         push       rbp
0000000000005018         push       rbx
0000000000005019         mov        r12d, edx
000000000000501c         mov        rsi, rcx                                    ; argument "__offset" for method j_lseek
000000000000501f         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000005024         mov        ebp, edi
0000000000005026         sub        rsp, 0x8
000000000000502a         mov        rbx, rcx
000000000000502d         call       j_lseek                                     ; lseek
0000000000005032         test       rax, rax
0000000000005035         js         loc_50b0

0000000000005037         test       r12b, r12b
000000000000503a         jne        loc_5050

                     loc_503c:
000000000000503c         add        rsp, 0x8                                    ; CODE XREF=create_hole+82
0000000000005040         mov        eax, 0x1
0000000000005045         pop        rbx
0000000000005046         pop        rbp
0000000000005047         pop        r12
0000000000005049         pop        r13
000000000000504b         ret
                        ; endp
000000000000504c         align      16

                     loc_5050:
0000000000005050         sub        rax, rbx                                    ; CODE XREF=create_hole+42
0000000000005053         mov        rdx, rbx
0000000000005056         mov        edi, ebp
0000000000005058         mov        rsi, rax
000000000000505b         call       punch_hole                                  ; punch_hole
0000000000005060         test       eax, eax
0000000000005062         jns        loc_503c

0000000000005064         mov        rsi, r13
0000000000005067         mov        edi, 0x4
000000000000506c         call       quotearg_style                              ; quotearg_style
0000000000005071         lea        rsi, qword [aErrorDeallocat]                ; "error deallocating %s"
0000000000005078         mov        rbp, rax
000000000000507b         mov        edx, 0x5

                     loc_5080:
0000000000005080         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=create_hole+188
0000000000005082         call       j_dcgettext                                 ; dcgettext
0000000000005087         mov        rbx, rax
000000000000508a         call       j___errno_location                          ; __errno_location
000000000000508f         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000005091         mov        rcx, rbp
0000000000005094         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000005097         xor        eax, eax
0000000000005099         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000509b         call       j_error                                     ; error
00000000000050a0         add        rsp, 0x8
00000000000050a4         xor        eax, eax
00000000000050a6         pop        rbx
00000000000050a7         pop        rbp
00000000000050a8         pop        r12
00000000000050aa         pop        r13
00000000000050ac         ret
                        ; endp
00000000000050ad         align      16

                     loc_50b0:
00000000000050b0         mov        rsi, r13                                    ; CODE XREF=create_hole+37
00000000000050b3         mov        edi, 0x4
00000000000050b8         call       quotearg_style                              ; quotearg_style
00000000000050bd         mov        edx, 0x5
00000000000050c2         mov        rbp, rax
00000000000050c5         lea        rsi, qword [aCannotLseekS]                  ; "cannot lseek %s"
00000000000050cc         jmp        loc_5080
00000000000050ce         align      16                                          ; End of unwind block (FDE at 0x18190)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_89: int8_t, -137
        ;    var_8A: int8_t, -138
        ;    var_8B: int8_t, -139
        ;    var_90: int32_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160


                     sparse_copy:
00000000000050d0         push       r15                                         ; Begin of unwind block (FDE at 0x181e0), CODE XREF=copy_internal+12650, copy_internal+15170
00000000000050d2         push       r14
00000000000050d4         push       r13
00000000000050d6         push       r12
00000000000050d8         push       rbp
00000000000050d9         push       rbx
00000000000050da         sub        rsp, 0x78
00000000000050de         mov        rax, qword [rsp+0xa8+arg_0]
00000000000050e6         mov        rbx, qword [rsp+0xa8+arg_18]
00000000000050ee         mov        r10, qword [rsp+0xa8+arg_20]
00000000000050f6         mov        byte [rsp+0xa8+var_89], r9b
00000000000050fb         mov        qword [rsp+0xa8+var_50], rax
0000000000005100         mov        rax, qword [rsp+0xa8+arg_8]
0000000000005108         mov        byte [r10], 0x0
000000000000510c         mov        qword [rsp+0xa8+var_68], rbx
0000000000005111         mov        qword [rsp+0xa8+var_48], r10
0000000000005116         mov        qword [rbx], 0x0
000000000000511d         mov        qword [rsp+0xa8+var_98], rax
0000000000005122         mov        rax, qword [rsp+0xa8+arg_10]
000000000000512a         test       rax, rax
000000000000512d         mov        qword [rsp+0xa8+var_80], rax
0000000000005132         je         loc_54d3

0000000000005138         test       r8, r8
000000000000513b         mov        qword [rsp+0xa8+var_58], r8
0000000000005140         mov        dword [rsp+0xa8+var_3C], r9d
0000000000005145         cmove      r8, rcx
0000000000005149         mov        qword [rsp+0xa8+var_70], rcx
000000000000514e         mov        qword [rsp+0xa8+var_88], rdx
0000000000005153         mov        dword [rsp+0xa8+var_90], esi
0000000000005157         mov        dword [rsp+0xa8+var_40], edi
000000000000515b         xor        r13d, r13d
000000000000515e         mov        qword [rsp+0xa8+var_60], r8
0000000000005163         xor        r15d, r15d

                     loc_5166:
0000000000005166         mov        rax, qword [rsp+0xa8+var_70]                ; CODE XREF=sparse_copy+199, sparse_copy+585
000000000000516b         mov        rdx, qword [rsp+0xa8+var_80]
0000000000005170         mov        rsi, qword [rsp+0xa8+var_88]                ; argument "__buf" for method j_read
0000000000005175         mov        edi, dword [rsp+0xa8+var_40]                ; argument "__fd" for method j_read
0000000000005179         cmp        rax, rdx
000000000000517c         cmovbe     rdx, rax                                    ; argument "__nbytes" for method j_read
0000000000005180         call       j_read                                      ; read
0000000000005185         test       rax, rax
0000000000005188         mov        qword [rsp+0xa8+var_78], rax
000000000000518d         jns        loc_51f0

000000000000518f         call       j___errno_location                          ; __errno_location
0000000000005194         cmp        dword [rax], 0x4
0000000000005197         je         loc_5166

0000000000005199         mov        rsi, qword [rsp+0xa8+var_50]
000000000000519e         mov        edi, 0x4
00000000000051a3         mov        rbx, rax
00000000000051a6         xor        r15d, r15d
00000000000051a9         call       quotearg_style                              ; quotearg_style
00000000000051ae         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
00000000000051b5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000051ba         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000051bc         mov        rbp, rax
00000000000051bf         call       j_dcgettext                                 ; dcgettext
00000000000051c4         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
00000000000051c6         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000051c9         mov        rcx, rbp
00000000000051cc         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000051ce         xor        eax, eax
00000000000051d0         call       j_error                                     ; error

                     loc_51d5:
00000000000051d5         add        rsp, 0x78                                   ; CODE XREF=sparse_copy+718, sparse_copy+937, sparse_copy+1022, sparse_copy+1033
00000000000051d9         mov        eax, r15d
00000000000051dc         pop        rbx
00000000000051dd         pop        rbp
00000000000051de         pop        r12
00000000000051e0         pop        r13
00000000000051e2         pop        r14
00000000000051e4         pop        r15
00000000000051e6         ret
                        ; endp
00000000000051e7         align      16

                     loc_51f0:
00000000000051f0         je         loc_531f                                    ; CODE XREF=sparse_copy+189

00000000000051f6         mov        rax, qword [rsp+0xa8+var_68]
00000000000051fb         mov        rbp, qword [rsp+0xa8+var_78]
0000000000005200         mov        ecx, r15d
0000000000005203         mov        r14, qword [rsp+0xa8+var_88]
0000000000005208         mov        r10, qword [rsp+0xa8+var_60]
000000000000520d         add        qword [rax], rbp
0000000000005210         cmp        qword [rsp+0xa8+var_58], 0x0
0000000000005216         mov        r11, r14
0000000000005219         mov        r15, r10
000000000000521c         setne      byte [rsp+0xa8+var_8B]
0000000000005221         nop        dword [rax]

                     loc_5228:
0000000000005228         cmp        rbp, r15                                    ; CODE XREF=sparse_copy+774
000000000000522b         mov        rbx, r15
000000000000522e         cmovbe     rbx, rbp
0000000000005232         test       rbx, rbx
0000000000005235         setne      r12b
0000000000005239         and        r12b, byte [rsp+0xa8+var_8B]
000000000000523e         je         loc_5350

0000000000005244         mov        rsi, r14
0000000000005247         mov        rdx, rbx

                     loc_524a:
000000000000524a         cmp        byte [rsi], 0x0                             ; CODE XREF=sparse_copy+404
000000000000524d         jne        loc_5480

0000000000005253         add        rsi, 0x1
0000000000005257         sub        rdx, 0x1
000000000000525b         je         loc_53e8

0000000000005261         test       dl, 0xf
0000000000005264         jne        loc_524a

0000000000005266         mov        rdi, r14                                    ; argument "__s1" for method j_memcmp
0000000000005269         mov        qword [rsp+0xa8+var_A0], r11
000000000000526e         mov        byte [rsp+0xa8+var_8A], cl
0000000000005272         call       j_memcmp                                    ; memcmp
0000000000005277         movzx      ecx, byte [rsp+0xa8+var_8A]
000000000000527c         test       eax, eax
000000000000527e         mov        r11, qword [rsp+0xa8+var_A0]
0000000000005283         sete       r12b
0000000000005287         mov        edx, r12d
000000000000528a         xor        edx, ecx
000000000000528c         test       eax, eax
000000000000528e         setne      al

                     loc_5291:
0000000000005291         test       r13, r13                                    ; CODE XREF=sparse_copy+952
0000000000005294         setne      r9b
0000000000005298         and        r9d, edx
000000000000529b         cmp        rbp, r15
000000000000529e         ja         loc_53f8

00000000000052a4         test       al, al
00000000000052a6         je         loc_53f8

00000000000052ac         test       r9b, r9b
00000000000052af         je         loc_535a

00000000000052b5         mov        r15d, 0x1

                     loc_52bb:
00000000000052bb         test       cl, cl                                      ; CODE XREF=sparse_copy+816
00000000000052bd         mov        byte [rsp+0xa8+var_8A], cl
00000000000052c1         jne        loc_5372

                     loc_52c7:
00000000000052c7         mov        edi, dword [rsp+0xa8+var_90]                ; CODE XREF=sparse_copy+668
00000000000052cb         mov        rdx, r13
00000000000052ce         mov        rsi, r11
00000000000052d1         mov        byte [rsp+0xa8+var_A0], r9b
00000000000052d6         call       full_write                                  ; full_write
00000000000052db         cmp        r13, rax
00000000000052de         movzx      r9d, byte [rsp+0xa8+var_A0]
00000000000052e4         movzx      ecx, byte [rsp+0xa8+var_8A]
00000000000052e9         jne        loc_548d

                     loc_52ef:
00000000000052ef         test       r15d, r15d                                  ; CODE XREF=sparse_copy+709
00000000000052f2         mov        r13, rbx
00000000000052f5         je         loc_5408

00000000000052fb         test       rbx, rbx
00000000000052fe         jne        loc_5420

                     loc_5304:
0000000000005304         mov        rdi, qword [rsp+0xa8+var_78]                ; CODE XREF=sparse_copy+783
0000000000005309         sub        qword [rsp+0xa8+var_80], rdi
000000000000530e         mov        r15d, r12d
0000000000005311         mov        rax, qword [rsp+0xa8+var_48]
0000000000005316         mov        byte [rax], r12b
0000000000005319         jne        loc_5166

                     loc_531f:
000000000000531f         test       r15b, r15b                                  ; CODE XREF=loc_51f0
0000000000005322         je         loc_54d3

0000000000005328         movzx      edx, byte [rsp+0xa8+var_3C]
000000000000532d         mov        rsi, qword [rsp+0xa8+var_98]
0000000000005332         mov        rcx, r13
0000000000005335         mov        edi, dword [rsp+0xa8+var_90]
0000000000005339         add        rsp, 0x78
000000000000533d         pop        rbx
000000000000533e         pop        rbp
000000000000533f         pop        r12
0000000000005341         pop        r13
0000000000005343         pop        r14
0000000000005345         pop        r15
0000000000005347         jmp        create_hole                                 ; create_hole
                        ; endp
000000000000534c         align      16

                     loc_5350:
0000000000005350         cmp        cl, 0x1                                     ; CODE XREF=sparse_copy+366
0000000000005353         je         loc_53a8

0000000000005355         cmp        rbp, r15
0000000000005358         ja         loc_53a8

                     loc_535a:
000000000000535a         add        r13, rbx                                    ; CODE XREF=sparse_copy+479, sparse_copy+736
000000000000535d         xor        r9d, r9d
0000000000005360         test       cl, cl
0000000000005362         mov        r15d, 0x1
0000000000005368         mov        byte [rsp+0xa8+var_8A], cl
000000000000536c         je         loc_52c7

                     loc_5372:
0000000000005372         movzx      edx, byte [rsp+0xa8+var_89]                 ; CODE XREF=sparse_copy+497
0000000000005377         mov        rsi, qword [rsp+0xa8+var_98]
000000000000537c         mov        rcx, r13
000000000000537f         mov        edi, dword [rsp+0xa8+var_90]
0000000000005383         mov        byte [rsp+0xa8+var_8A], r9b
0000000000005388         call       create_hole                                 ; create_hole
000000000000538d         test       al, al
000000000000538f         movzx      r9d, byte [rsp+0xa8+var_8A]
0000000000005395         jne        loc_52ef

000000000000539b         mov        r15d, eax
000000000000539e         jmp        loc_51d5
00000000000053a3         align      8

                     loc_53a8:
00000000000053a8         test       rbx, rbx                                    ; CODE XREF=sparse_copy+643, sparse_copy+648
00000000000053ab         jne        loc_53b8

00000000000053ad         mov        r12d, ecx
00000000000053b0         jmp        loc_535a

                     loc_53b2:
00000000000053b2         mov        ecx, r12d                                   ; CODE XREF=sparse_copy+811
00000000000053b5         nop        dword [rax]

                     loc_53b8:
00000000000053b8         movabs     rax, 0x7fffffffffffffff                     ; CODE XREF=sparse_copy+731
00000000000053c2         sub        rax, rbx
00000000000053c5         cmp        rax, r13
00000000000053c8         jb         loc_5440

00000000000053ca         add        r13, rbx
00000000000053cd         add        r14, rbx
00000000000053d0         mov        r15, rbx

                     loc_53d3:
00000000000053d3         sub        rbp, r15                                    ; CODE XREF=sparse_copy+836, sparse_copy+860, sparse_copy+871
00000000000053d6         jne        loc_5228

00000000000053dc         mov        r12d, ecx
00000000000053df         jmp        loc_5304
00000000000053e4         align      8

                     loc_53e8:
00000000000053e8         mov        r9d, ecx                                    ; CODE XREF=sparse_copy+395
00000000000053eb         xor        r9d, 0x1
00000000000053ef         test       r13, r13
00000000000053f2         setne      al
00000000000053f5         and        r9d, eax

                     loc_53f8:
00000000000053f8         test       r9b, r9b                                    ; CODE XREF=sparse_copy+462, sparse_copy+470
00000000000053fb         je         loc_53b2

00000000000053fd         xor        r15d, r15d
0000000000005400         jmp        loc_52bb
0000000000005405         align      8

                     loc_5408:
0000000000005408         mov        r11, r14                                    ; CODE XREF=sparse_copy+549
000000000000540b         mov        ecx, r12d
000000000000540e         add        r14, rbx
0000000000005411         mov        r15, rbx
0000000000005414         jmp        loc_53d3
0000000000005416         align      32

                     loc_5420:
0000000000005420         xor        r15d, r15d                                  ; CODE XREF=sparse_copy+558
0000000000005423         test       r9b, r9b
0000000000005426         mov        ecx, r12d
0000000000005429         mov        r11, r14
000000000000542c         jne        loc_53d3

000000000000542e         add        r14, rbx
0000000000005431         mov        r15, rbx
0000000000005434         xor        r13d, r13d
0000000000005437         jmp        loc_53d3
0000000000005439         align      64

                     loc_5440:
0000000000005440         mov        rsi, qword [rsp+0xa8+var_50]                ; CODE XREF=sparse_copy+760
0000000000005445         mov        edi, 0x4
000000000000544a         xor        r15d, r15d
000000000000544d         call       quotearg_style                              ; quotearg_style
0000000000005452         lea        rsi, qword [aOverflowReadin]                ; argument "msgid" for method j_dcgettext, "overflow reading %s"
0000000000005459         mov        rbx, rax
000000000000545c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005461         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005463         call       j_dcgettext                                 ; dcgettext
0000000000005468         mov        rcx, rbx
000000000000546b         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000546e         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005470         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005472         xor        eax, eax
0000000000005474         call       j_error                                     ; error
0000000000005479         jmp        loc_51d5
000000000000547e         align      128

                     loc_5480:
0000000000005480         mov        eax, r12d                                   ; CODE XREF=sparse_copy+381
0000000000005483         mov        edx, ecx
0000000000005485         xor        r12d, r12d
0000000000005488         jmp        loc_5291

                     loc_548d:
000000000000548d         mov        rsi, qword [rsp+0xa8+var_98]                ; CODE XREF=sparse_copy+537
0000000000005492         mov        edi, 0x4
0000000000005497         mov        r15d, ecx
000000000000549a         call       quotearg_style                              ; quotearg_style
000000000000549f         lea        rsi, qword [aErrorWritingS]                 ; argument "msgid" for method j_dcgettext, "error writing %s"
00000000000054a6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000054a8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000054ad         mov        rbp, rax
00000000000054b0         call       j_dcgettext                                 ; dcgettext
00000000000054b5         mov        rbx, rax
00000000000054b8         call       j___errno_location                          ; __errno_location
00000000000054bd         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000054bf         mov        rcx, rbp
00000000000054c2         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000054c5         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000054c7         xor        eax, eax
00000000000054c9         call       j_error                                     ; error
00000000000054ce         jmp        loc_51d5

                     loc_54d3:
00000000000054d3         mov        r15d, 0x1                                   ; CODE XREF=sparse_copy+98, sparse_copy+594
00000000000054d9         jmp        loc_51d5
00000000000054de         align      32                                          ; End of unwind block (FDE at 0x181e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_process_security_ctx:
00000000000054e0         push       r13                                         ; Begin of unwind block (FDE at 0x18248), CODE XREF=copy_internal+1297, copy_internal+2837, copy_internal+4941, copy_internal+13253
00000000000054e2         push       r12
00000000000054e4         push       rbp
00000000000054e5         push       rbx
00000000000054e6         mov        rbp, r8
00000000000054e9         sub        rsp, 0x8
00000000000054ed         cmp        byte [r8+0x25], 0x0
00000000000054f2         je         loc_5560

00000000000054f4         mov        r13, rdi
00000000000054f7         call       j___errno_location                          ; __errno_location
00000000000054fc         cmp        byte [rbp+0x23], 0x0
0000000000005500         mov        r12, rax
0000000000005503         jne        loc_5580

                     loc_5505:
0000000000005505         mov        rsi, r13                                    ; CODE XREF=set_process_security_ctx+166
0000000000005508         mov        edi, 0x4
000000000000550d         mov        dword [r12], 0x5f
0000000000005515         call       quotearg_style                              ; quotearg_style
000000000000551a         lea        rsi, qword [aFailedToGetSec]                ; argument "msgid" for method j_dcgettext, "failed to get security context of %s"
0000000000005521         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005526         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005528         mov        rbx, rax
000000000000552b         call       j_dcgettext                                 ; dcgettext
0000000000005530         mov        esi, dword [r12]                            ; argument "__errnum" for method j_error
0000000000005534         mov        rcx, rbx
0000000000005537         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000553a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000553c         xor        eax, eax
000000000000553e         call       j_error                                     ; error
0000000000005543         movzx      ebx, byte [rbp+0x26]

                     loc_5547:
0000000000005547         add        rsp, 0x8                                    ; CODE XREF=set_process_security_ctx+178
000000000000554b         xor        ebx, 0x1
000000000000554e         mov        eax, ebx
0000000000005550         pop        rbx
0000000000005551         pop        rbp
0000000000005552         pop        r12
0000000000005554         pop        r13
0000000000005556         ret
                        ; endp
0000000000005557         align      32

                     loc_5560:
0000000000005560         mov        ebx, ecx                                    ; CODE XREF=set_process_security_ctx+18
0000000000005562         and        bl, byte [r8+0x21]
0000000000005566         jne        loc_5598

0000000000005568         add        rsp, 0x8
000000000000556c         mov        ebx, 0x1
0000000000005571         mov        eax, ebx
0000000000005573         pop        rbx
0000000000005574         pop        rbp
0000000000005575         pop        r12
0000000000005577         pop        r13
0000000000005579         ret
                        ; endp
000000000000557a         align      128

                     loc_5580:
0000000000005580         movzx      ebx, byte [rbp+0x26]                        ; CODE XREF=set_process_security_ctx+35
0000000000005584         test       bl, bl
0000000000005586         jne        loc_5505

000000000000558c         mov        dword [rax], 0x5f
0000000000005592         jmp        loc_5547
0000000000005594         align      8

                     loc_5598:
0000000000005598         call       j___errno_location                          ; __errno_location, CODE XREF=set_process_security_ctx+134
000000000000559d         mov        dword [rax], 0x5f
00000000000055a3         add        rsp, 0x8
00000000000055a7         mov        eax, ebx
00000000000055a9         pop        rbx
00000000000055aa         pop        rbp
00000000000055ab         pop        r12
00000000000055ad         pop        r13
00000000000055af         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_file_security_ctx:
00000000000055b0         push       r12                                         ; End of unwind block (FDE at 0x18248), Begin of unwind block (FDE at 0x182a4), CODE XREF=copy_internal+4993, copy_internal+8958, copy_internal+10960, copy_internal+14718
00000000000055b2         push       rbp
00000000000055b3         mov        rbp, rcx
00000000000055b6         push       rbx
00000000000055b7         mov        r12, rdi
00000000000055ba         call       j___errno_location                          ; __errno_location
00000000000055bf         cmp        byte [rbp+0x23], 0x0
00000000000055c3         mov        rbx, rax
00000000000055c6         je         loc_55ce

00000000000055c8         cmp        byte [rbp+0x26], 0x0
00000000000055cc         je         loc_5618

                     loc_55ce:
00000000000055ce         mov        rdx, r12                                    ; CODE XREF=set_file_security_ctx+22
00000000000055d1         mov        dword [rbx], 0x5f
00000000000055d7         mov        esi, 0x4
00000000000055dc         xor        edi, edi
00000000000055de         call       quotearg_n_style                            ; quotearg_n_style
00000000000055e3         lea        rsi, qword [aFailedToSetThe]                ; argument "msgid" for method j_dcgettext, "failed to set the security context of %s"
00000000000055ea         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000055ef         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000055f1         mov        rbp, rax
00000000000055f4         call       j_dcgettext                                 ; dcgettext
00000000000055f9         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
00000000000055fb         mov        rcx, rbp
00000000000055fe         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005601         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005603         xor        eax, eax
0000000000005605         call       j_error                                     ; error
000000000000560a         pop        rbx
000000000000560b         xor        eax, eax
000000000000560d         pop        rbp
000000000000560e         pop        r12
0000000000005610         ret
                        ; endp
0000000000005611         align      8

                     loc_5618:
0000000000005618         mov        dword [rax], 0x5f                           ; CODE XREF=set_file_security_ctx+28
000000000000561e         xor        eax, eax
0000000000005620         pop        rbx
0000000000005621         pop        rbp
0000000000005622         pop        r12
0000000000005624         ret
                        ; endp
0000000000005625         align      16                                          ; End of unwind block (FDE at 0x182a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dest_info_init:
0000000000005630         lea        r8, qword [triple_free]                     ; Begin of unwind block (FDE at 0x182dc), triple_free, CODE XREF=main+1175
0000000000005637         lea        rcx, qword [triple_compare]                 ; triple_compare
000000000000563e         xor        esi, esi
0000000000005640         lea        rdx, qword [triple_hash]                    ; triple_hash
0000000000005647         push       rbx
0000000000005648         mov        rbx, rdi
000000000000564b         mov        edi, 0x3d
0000000000005650         call       hash_initialize                             ; hash_initialize
0000000000005655         mov        qword [rbx+0x40], rax
0000000000005659         pop        rbx
000000000000565a         ret
                        ; endp
000000000000565b         align      32                                          ; End of unwind block (FDE at 0x182dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     src_info_init:
0000000000005660         lea        r8, qword [triple_free]                     ; Begin of unwind block (FDE at 0x182f8), triple_free
0000000000005667         lea        rcx, qword [triple_compare]                 ; triple_compare
000000000000566e         xor        esi, esi
0000000000005670         lea        rdx, qword [triple_hash_no_name]            ; triple_hash_no_name
0000000000005677         push       rbx
0000000000005678         mov        rbx, rdi
000000000000567b         mov        edi, 0x3d
0000000000005680         call       hash_initialize                             ; hash_initialize
0000000000005685         mov        qword [rbx+0x48], rax
0000000000005689         pop        rbx
000000000000568a         ret
                        ; endp
000000000000568b         align      16                                          ; End of unwind block (FDE at 0x182f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cp_options_default:
0000000000005690         pxor       xmm0, xmm0                                  ; Begin of unwind block (FDE at 0x18314), CODE XREF=main+117
0000000000005694         push       rbx
0000000000005695         mov        rbx, rdi
0000000000005698         movups     xmmword [rdi], xmm0
000000000000569b         movups     xmmword [rdi+0x10], xmm0
000000000000569f         movups     xmmword [rdi+0x20], xmm0
00000000000056a3         movups     xmmword [rdi+0x30], xmm0
00000000000056a7         movups     xmmword [rdi+0x40], xmm0
00000000000056ab         call       j_geteuid                                   ; geteuid
00000000000056b0         test       eax, eax
00000000000056b2         mov        dword [rbx+0x34], 0xffffffff
00000000000056b9         sete       al
00000000000056bc         mov        byte [rbx+0x1b], al
00000000000056bf         mov        byte [rbx+0x1a], al
00000000000056c2         pop        rbx
00000000000056c3         ret
                        ; endp
00000000000056c4         align      16                                          ; End of unwind block (FDE at 0x18314)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     chown_failure_ok:
00000000000056d0         push       rbx                                         ; Begin of unwind block (FDE at 0x18330), CODE XREF=set_owner+141, copy_internal+14261
00000000000056d1         mov        rbx, rdi
00000000000056d4         call       j___errno_location                          ; __errno_location
00000000000056d9         mov        edx, dword [rax]
00000000000056db         cmp        edx, 0x1
00000000000056de         sete       al
00000000000056e1         cmp        edx, 0x16
00000000000056e4         sete       dl
00000000000056e7         or         al, dl
00000000000056e9         je         loc_56f2

00000000000056eb         movzx      eax, byte [rbx+0x1a]
00000000000056ef         xor        eax, 0x1

                     loc_56f2:
00000000000056f2         pop        rbx                                         ; CODE XREF=chown_failure_ok+25
00000000000056f3         ret
                        ; endp
00000000000056f4         align      256                                         ; End of unwind block (FDE at 0x18330)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_owner:
0000000000005700         push       r15                                         ; Begin of unwind block (FDE at 0x1834c), CODE XREF=copy_internal+1827, copy_internal+13832
0000000000005702         push       r14
0000000000005704         push       r13
0000000000005706         push       r12
0000000000005708         mov        r13, rsi
000000000000570b         push       rbp
000000000000570c         push       rbx
000000000000570d         mov        rbp, rdi
0000000000005710         mov        ebx, edx
0000000000005712         sub        rsp, 0x8
0000000000005716         test       r8b, r8b
0000000000005719         mov        r14d, dword [rcx+0x1c]
000000000000571d         mov        r12d, dword [rcx+0x20]
0000000000005721         jne        loc_5755

0000000000005723         movabs     rax, 0xff0000000000ff
000000000000572d         test       qword [rdi+0x18], rax
0000000000005731         je         loc_57d0

0000000000005737         mov        esi, dword [r9+0x18]
000000000000573b         mov        edx, dword [rcx+0x18]

                     loc_573e:
000000000000573e         mov        eax, edx                                    ; CODE XREF=set_owner+225
0000000000005740         mov        ecx, esi
0000000000005742         not        eax
0000000000005744         and        ecx, aEtpid                                 ; "etpid"
000000000000574a         or         ah, 0xe
000000000000574d         test       eax, ecx
000000000000574f         jne        loc_5820

                     loc_5755:
0000000000005755         cmp        ebx, 0xffffffff                             ; CODE XREF=set_owner+33, set_owner+212, set_owner+308
0000000000005758         mov        edx, r12d
000000000000575b         mov        esi, r14d
000000000000575e         je         loc_57b0

0000000000005760         mov        edi, ebx                                    ; argument "__fd" for method j_fchown
0000000000005762         call       j_fchown                                    ; fchown
0000000000005767         test       eax, eax
0000000000005769         je         loc_57bc

000000000000576b         call       j___errno_location                          ; __errno_location
0000000000005770         mov        r14d, dword [rax]
0000000000005773         mov        r15, rax
0000000000005776         cmp        r14d, 0x1
000000000000577a         je         loc_58e8

0000000000005780         cmp        r14d, 0x16
0000000000005784         je         loc_58e8

                     loc_578a:
000000000000578a         mov        rdi, rbp                                    ; CODE XREF=set_owner+258, set_owner+283, set_owner+506
000000000000578d         call       chown_failure_ok                            ; chown_failure_ok
0000000000005792         mov        edx, eax
0000000000005794         xor        eax, eax
0000000000005796         test       dl, dl
0000000000005798         je         loc_5890

000000000000579e         add        rsp, 0x8
00000000000057a2         pop        rbx
00000000000057a3         pop        rbp
00000000000057a4         pop        r12
00000000000057a6         pop        r13
00000000000057a8         pop        r14
00000000000057aa         pop        r15
00000000000057ac         ret
                        ; endp
00000000000057ad         align      16

                     loc_57b0:
00000000000057b0         mov        rdi, r13                                    ; argument "__file" for method j_lchown, CODE XREF=set_owner+94
00000000000057b3         call       j_lchown                                    ; lchown
00000000000057b8         test       eax, eax
00000000000057ba         jne        loc_57f0

                     loc_57bc:
00000000000057bc         add        rsp, 0x8                                    ; CODE XREF=set_owner+105
00000000000057c0         mov        eax, 0x1
00000000000057c5         pop        rbx
00000000000057c6         pop        rbp
00000000000057c7         pop        r12
00000000000057c9         pop        r13
00000000000057cb         pop        r14
00000000000057cd         pop        r15
00000000000057cf         ret
                        ; endp

                     loc_57d0:
00000000000057d0         cmp        byte [rdi+0x2b], 0x0                        ; CODE XREF=set_owner+49
00000000000057d4         je         loc_5755

00000000000057da         mov        esi, dword [r9+0x18]
00000000000057de         mov        edx, dword [rdi+0x10]
00000000000057e1         jmp        loc_573e
00000000000057e6         align      16

                     loc_57f0:
00000000000057f0         call       j___errno_location                          ; __errno_location, CODE XREF=set_owner+186
00000000000057f5         mov        ebx, dword [rax]
00000000000057f7         mov        r14, rax
00000000000057fa         cmp        ebx, 0x1
00000000000057fd         je         loc_5808

00000000000057ff         cmp        ebx, 0x16
0000000000005802         jne        loc_578a

                     loc_5808:
0000000000005808         mov        edx, r12d                                   ; argument "__group" for method j_lchown, CODE XREF=set_owner+253
000000000000580b         mov        esi, 0xffffffff                             ; argument "__owner" for method j_lchown
0000000000005810         mov        rdi, r13                                    ; argument "__file" for method j_lchown
0000000000005813         call       j_lchown                                    ; lchown
0000000000005818         mov        dword [r14], ebx
000000000000581b         jmp        loc_578a

                     loc_5820:
0000000000005820         and        edx, esi                                    ; CODE XREF=set_owner+79
0000000000005822         mov        rdi, r13
0000000000005825         mov        esi, ebx
0000000000005827         and        edx, 0x1c0
000000000000582d         call       qset_acl                                    ; qset_acl
0000000000005832         test       eax, eax
0000000000005834         je         loc_5755

000000000000583a         call       j___errno_location                          ; __errno_location
000000000000583f         mov        rbx, rax
0000000000005842         mov        eax, dword [rax]
0000000000005844         cmp        eax, 0x1
0000000000005847         je         loc_5900

000000000000584d         cmp        eax, 0x16
0000000000005850         je         loc_5900

                     loc_5856:
0000000000005856         mov        rsi, r13                                    ; CODE XREF=set_owner+516
0000000000005859         mov        edi, 0x4
000000000000585e         call       quotearg_style                              ; quotearg_style
0000000000005863         lea        rsi, qword [aClearingPermis]                ; argument "msgid" for method j_dcgettext, "clearing permissions for %s"
000000000000586a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000586c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005871         mov        r12, rax
0000000000005874         call       j_dcgettext                                 ; dcgettext
0000000000005879         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000587b         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000587e         mov        rcx, r12
0000000000005881         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005883         xor        eax, eax
0000000000005885         call       j_error                                     ; error
000000000000588a         jmp        loc_58cc
000000000000588c         align      16

                     loc_5890:
0000000000005890         mov        rsi, r13                                    ; CODE XREF=set_owner+152
0000000000005893         mov        edi, 0x4
0000000000005898         call       quotearg_style                              ; quotearg_style
000000000000589d         lea        rsi, qword [aFailedToPreser]                ; argument "msgid" for method j_dcgettext, "failed to preserve ownership for %s"
00000000000058a4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000058a9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000058ab         mov        r12, rax
00000000000058ae         call       j_dcgettext                                 ; dcgettext
00000000000058b3         mov        rbx, rax
00000000000058b6         call       j___errno_location                          ; __errno_location
00000000000058bb         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000058bd         mov        rcx, r12
00000000000058c0         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000058c3         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000058c5         xor        eax, eax
00000000000058c7         call       j_error                                     ; error

                     loc_58cc:
00000000000058cc         movzx      eax, byte [rbp+0x24]                        ; CODE XREF=set_owner+394, set_owner+522
00000000000058d0         add        rsp, 0x8
00000000000058d4         pop        rbx
00000000000058d5         pop        rbp
00000000000058d6         pop        r12
00000000000058d8         neg        eax
00000000000058da         pop        r13
00000000000058dc         pop        r14
00000000000058de         pop        r15
00000000000058e0         ret
                        ; endp
00000000000058e1         align      8

                     loc_58e8:
00000000000058e8         mov        edx, r12d                                   ; argument "__group" for method j_fchown, CODE XREF=set_owner+122, set_owner+132
00000000000058eb         mov        esi, 0xffffffff                             ; argument "__owner" for method j_fchown
00000000000058f0         mov        edi, ebx                                    ; argument "__fd" for method j_fchown
00000000000058f2         call       j_fchown                                    ; fchown
00000000000058f7         mov        dword [r15], r14d
00000000000058fa         jmp        loc_578a
00000000000058ff         align      256

                     loc_5900:
0000000000005900         cmp        byte [rbp+0x1b], 0x0                        ; CODE XREF=set_owner+327, set_owner+336
0000000000005904         jne        loc_5856

000000000000590a         jmp        loc_58cc
000000000000590c         align      16                                          ; End of unwind block (FDE at 0x1834c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cached_umask:
0000000000005910         push       rbx                                         ; Begin of unwind block (FDE at 0x183cc), CODE XREF=copy_internal+11713, copy_internal+11814, copy_internal+13948, copy_internal+16215
0000000000005911         mov        ebx, dword [mask.7898]                      ; mask.7898
0000000000005917         cmp        ebx, 0xffffffff
000000000000591a         je         loc_5920

000000000000591c         mov        eax, ebx
000000000000591e         pop        rbx
000000000000591f         ret
                        ; endp

                     loc_5920:
0000000000005920         xor        edi, edi                                    ; argument "__mask" for method j_umask, CODE XREF=cached_umask+10
0000000000005922         call       j_umask                                     ; umask
0000000000005927         mov        ebx, eax
0000000000005929         mov        edi, eax                                    ; argument "__mask" for method j_umask
000000000000592b         mov        dword [mask.7898], eax                      ; mask.7898
0000000000005931         call       j_umask                                     ; umask
0000000000005936         mov        eax, ebx
0000000000005938         pop        rbx
0000000000005939         ret
                        ; endp
000000000000593a         align      64                                          ; End of unwind block (FDE at 0x183cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_18: int, 40
        ;    arg_10: int, 32
        ;    arg_8: int, 24
        ;    arg_0: int, 16
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_50: -80
        ;    var_60: -96
        ;    var_70: -112
        ;    var_80: -128
        ;    var_90: -144
        ;    var_98: int64_t, -152
        ;    var_A0: -160
        ;    var_B0: int32_t, -176
        ;    var_B4: int32_t, -180
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_E0: -224
        ;    var_F0: -240
        ;    var_100: -256
        ;    var_110: -272
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304
        ;    var_140: -320
        ;    var_148: int32_t, -328
        ;    var_150: -336
        ;    var_158: int64_t, -344
        ;    var_160: int64_t, -352
        ;    var_1C0: int64_t, -448
        ;    var_1D0: int32_t, -464
        ;    var_1D4: int32_t, -468
        ;    var_1D8: int32_t, -472
        ;    var_1E0: int64_t, -480
        ;    var_1E8: int64_t, -488
        ;    var_1F0: int64_t, -496
        ;    var_220: int64_t, -544
        ;    var_228: int64_t, -552
        ;    var_230: int64_t, -560
        ;    var_238: int64_t, -568
        ;    var_250: int64_t, -592
        ;    var_258: int64_t, -600
        ;    var_260: int32_t, -608
        ;    var_264: int32_t, -612
        ;    var_268: int32_t, -616
        ;    var_270: int64_t, -624
        ;    var_278: int64_t, -632
        ;    var_280: int64_t, -640
        ;    var_288: int64_t, -648
        ;    var_290: int64_t, -656
        ;    var_298: int64_t, -664
        ;    var_2A0: int64_t, -672
        ;    var_2B0: -688
        ;    var_2C0: -704
        ;    var_2C8: int64_t, -712
        ;    var_2CF: int8_t, -719
        ;    var_2D0: int8_t, -720
        ;    var_2D8: int64_t, -728
        ;    var_2E0: -736
        ;    var_2EC: int32_t, -748
        ;    var_2F0: int64_t, -752
        ;    var_2F8: int64_t, -760
        ;    var_2F9: int8_t, -761
        ;    var_308: int64_t, -776
        ;    var_310: int64_t, -784
        ;    var_314: int32_t, -788
        ;    var_315: int8_t, -789
        ;    var_320: int64_t, -800
        ;    var_328: int64_t, -808
        ;    var_330: int64_t, -816
        ;    var_338: int64_t, -824
        ;    var_340: int64_t, -832
        ;    var_348: int64_t, -840
        ;    var_350: int64_t, -848
        ;    var_358: int64_t, -856
        ;    var_35C: int32_t, -860
        ;    var_360: int32_t, -864
        ;    var_368: int64_t, -872
        ;    var_370: int64_t, -880
        ;    var_378: int64_t, -888
        ;    var_380: int64_t, -896
        ;    var_388: int64_t, -904
        ;    var_38C: int32_t, -908
        ;    var_390: int32_t, -912
        ;    var_398: int64_t, -920
        ;    var_3A0: int64_t, -928
        ;    var_3A4: int32_t, -932
        ;    var_3A5: int8_t, -933
        ;    var_3B0: int64_t, -944
        ;    var_3B1: int8_t, -945
        ;    var_3B8: int64_t, -952
        ;    var_3C0: int64_t, -960
        ;    var_3E1: int8_t, -993


                     copy_internal:
0000000000005940         push       rbp                                         ; Begin of unwind block (FDE at 0x183ec), CODE XREF=copy_internal+7901, copy+128
0000000000005941         mov        rbp, rsp
0000000000005944         push       r15
0000000000005946         push       r14
0000000000005948         push       r13
000000000000594a         push       r12
000000000000594c         mov        r14d, edx
000000000000594f         push       rbx
0000000000005950         mov        rbx, r9
0000000000005953         sub        rsp, 0x398
000000000000595a         mov        rax, qword [rbp+arg_8]
000000000000595e         mov        r13d, dword [rbp+arg_0]
0000000000005962         mov        qword [rbp+var_348], rcx
0000000000005969         mov        rcx, qword [rbp+arg_18]
000000000000596d         mov        qword [rbp+var_310], rdi
0000000000005974         mov        qword [rbp+var_308], rsi
000000000000597b         mov        qword [rbp+var_338], rax
0000000000005982         mov        rax, qword [rbp+arg_10]
0000000000005986         mov        qword [rbp+var_320], rcx
000000000000598d         mov        qword [rbp+var_330], r8
0000000000005994         mov        rcx, qword [fs:0x28]
000000000000599d         mov        qword [rbp+var_38], rcx
00000000000059a1         xor        ecx, ecx
00000000000059a3         mov        byte [rax], 0x0
00000000000059a6         movzx      r12d, byte [r9+0x18]
00000000000059ab         mov        qword [rbp+var_340], rax
00000000000059b2         mov        byte [rbp+var_315], r13b
00000000000059b9         mov        r15d, dword [r9+0x34]
00000000000059bd         test       r12b, r12b
00000000000059c0         je         loc_59e1

00000000000059c2         test       r15d, r15d
00000000000059c5         js         loc_5c60

                     loc_59cb:
00000000000059cb         mov        rax, qword [rbp+var_320]                    ; CODE XREF=copy_internal+3768
00000000000059d2         test       r15d, r15d
00000000000059d5         sete       r14b
00000000000059d9         test       rax, rax
00000000000059dc         je         loc_59e1

00000000000059de         mov        byte [rax], r14b

                     loc_59e1:
00000000000059e1         test       r15d, r15d                                  ; CODE XREF=copy_internal+128, copy_internal+156
00000000000059e4         je         loc_5c98

00000000000059ea         cmp        r15d, 0x11
00000000000059ee         mov        r12, qword [rbp+var_310]
00000000000059f5         je         loc_61f8

                     loc_59fb:
00000000000059fb         cmp        dword [rbx+4], 0x2                          ; CODE XREF=copy_internal+872, copy_internal+2242
00000000000059ff         lea        r10, qword [rbp+var_280]
0000000000005a06         mov        rsi, r12
0000000000005a09         mov        edi, 0x1
0000000000005a0e         mov        rdx, r10
0000000000005a11         je         loc_6210

0000000000005a17         call       j___xstat                                   ; __xstat
0000000000005a1c         test       eax, eax
0000000000005a1e         mov        rsi, r12
0000000000005a21         setne      al
0000000000005a24         test       al, al
0000000000005a26         jne        loc_6225

                     loc_5a2c:
0000000000005a2c         mov        eax, dword [rbp+var_268]                    ; CODE XREF=copy_internal+2271
0000000000005a32         mov        dword [rbp+var_314], eax
0000000000005a38         and        eax, 0xf000
0000000000005a3d         cmp        eax, 0x4000
0000000000005a42         je         loc_6508

                     loc_5a48:
0000000000005a48         test       r13b, r13b                                  ; CODE XREF=copy_internal+883, copy_internal+2236, copy_internal+3024
0000000000005a4b         je         loc_5a8a

0000000000005a4d         mov        rdi, qword [rbx+0x48]
0000000000005a51         test       rdi, rdi
0000000000005a54         je         loc_5a8a

0000000000005a56         mov        eax, dword [rbp+var_314]
0000000000005a5c         lea        r10, qword [rbp+var_280]
0000000000005a63         and        eax, 0xf000
0000000000005a68         cmp        eax, 0x4000
0000000000005a6d         je         loc_5a7b

0000000000005a6f         mov        r11d, dword [rbx]
0000000000005a72         test       r11d, r11d
0000000000005a75         je         loc_6388

                     loc_5a7b:
0000000000005a7b         mov        rsi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+301, copy_internal+2676
0000000000005a82         mov        rdx, r10
0000000000005a85         call       record_file                                 ; record_file

                     loc_5a8a:
0000000000005a8a         mov        eax, dword [rbx+4]                          ; CODE XREF=copy_internal+267, copy_internal+276
0000000000005a8d         mov        dword [rbp+var_328], 0x1
0000000000005a97         cmp        eax, 0x4
0000000000005a9a         je         loc_5aae

0000000000005a9c         cmp        eax, 0x3
0000000000005a9f         sete       al
0000000000005aa2         movzx      eax, al
0000000000005aa5         and        eax, r13d
0000000000005aa8         mov        dword [rbp+var_328], eax

                     loc_5aae:
0000000000005aae         test       r14b, r14b                                  ; CODE XREF=copy_internal+346
0000000000005ab1         jne        loc_5cc0

0000000000005ab7         cmp        r15d, 0x11
0000000000005abb         je         loc_6420

                     loc_5ac1:
0000000000005ac1         mov        eax, dword [rbp+var_314]                    ; CODE XREF=copy_internal+2788
0000000000005ac7         and        eax, 0xf000
0000000000005acc         cmp        eax, 0x8000
0000000000005ad1         je         loc_63c0

0000000000005ad7         cmp        eax, 0xa000
0000000000005adc         mov        r8d, 0x100
0000000000005ae2         sete       r9b
0000000000005ae6         cmp        eax, 0x4000
0000000000005aeb         sete       al
0000000000005aee         or         r9d, eax
0000000000005af1         movzx      eax, byte [rbx+0x14]
0000000000005af5         xor        eax, 0x1
0000000000005af8         or         r9b, al
0000000000005afb         je         loc_63c0

                     loc_5b01:
0000000000005b01         lea        r12, qword [rbp+var_1F0]                    ; CODE XREF=copy_internal+2702, copy_internal+2716, copy_internal+2730, copy_internal+2748, copy_internal+2773
0000000000005b08         mov        rdx, qword [rbp+var_308]                    ; argument "__filename" for method j___fxstatat
0000000000005b0f         mov        esi, 0xffffff9c                             ; argument "__fildes" for method j___fxstatat
0000000000005b14         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
0000000000005b19         mov        byte [rbp+var_350], r9b
0000000000005b20         mov        rcx, r12                                    ; argument "__stat_buf" for method j___fxstatat
0000000000005b23         call       j___fxstatat                                ; __fxstatat
0000000000005b28         test       eax, eax
0000000000005b2a         movzx      r9d, byte [rbp+var_350]
0000000000005b32         jne        loc_61b0

0000000000005b38         xor        r8d, r8d

                     loc_5b3b:
0000000000005b3b         cmp        dword [rbx+8], 0x2                          ; CODE XREF=copy_internal+2201
0000000000005b3f         je         loc_5b5f

0000000000005b41         mov        rax, qword [rbp+var_1E8]
0000000000005b48         cmp        qword [rbp+var_278], rax
0000000000005b4f         je         loc_6d18

                     loc_5b55:
0000000000005b55         cmp        dword [rbx+4], 0x2                          ; CODE XREF=copy_internal+5094
0000000000005b59         je         loc_6ed0

                     loc_5b5f:
0000000000005b5f         cmp        byte [rbx+0x2d], 0x0                        ; CODE XREF=copy_internal+511, copy_internal+2800, copy_internal+5201, copy_internal+5759, copy_internal+5805, copy_internal+5818, copy_internal+6027, copy_internal+6871, copy_internal+7167, copy_internal+7187, copy_internal+7222
0000000000005b63         je         loc_6560

0000000000005b69         mov        eax, dword [rbp+var_314]
0000000000005b6f         and        eax, 0xf000
0000000000005b74         cmp        eax, 0x4000
0000000000005b79         je         loc_6fa0

0000000000005b7f         xor        ecx, ecx
0000000000005b81         cmp        byte [rbx+0x1f], 0x0
0000000000005b85         je         loc_5ba5

0000000000005b87         cmp        byte [rbx+0x18], 0x0
0000000000005b8b         mov        ecx, 0x1
0000000000005b90         je         loc_5ba5

0000000000005b92         xor        ecx, ecx
0000000000005b94         mov        rax, qword [rbp+var_280]
0000000000005b9b         cmp        qword [rbp+var_1F0], rax
0000000000005ba2         setne      cl

                     loc_5ba5:
0000000000005ba5         lea        r10, qword [rbp+var_280]                    ; CODE XREF=copy_internal+581, copy_internal+592
0000000000005bac         mov        rdi, qword [rbp+var_308]
0000000000005bb3         lea        rsi, qword [rbp+var_1F0]
0000000000005bba         mov        byte [rbp+var_358], r9b
0000000000005bc1         mov        byte [rbp+var_350], r8b
0000000000005bc8         mov        rdx, r10
0000000000005bcb         call       utimecmp                                    ; utimecmp
0000000000005bd0         test       eax, eax
0000000000005bd2         movzx      r8d, byte [rbp+var_350]
0000000000005bda         movzx      r9d, byte [rbp+var_358]
0000000000005be2         js         loc_6b30

0000000000005be8         mov        rax, qword [rbp+var_320]
0000000000005bef         test       rax, rax
0000000000005bf2         je         loc_5bf7

0000000000005bf4         mov        byte [rax], 0x1

                     loc_5bf7:
0000000000005bf7         mov        rdx, qword [rbp+var_280]                    ; CODE XREF=copy_internal+690
0000000000005bfe         mov        rsi, qword [rbp+var_278]
0000000000005c05         mov        rdi, qword [rbp+var_308]
0000000000005c0c         call       remember_copied                             ; remember_copied
0000000000005c11         test       rax, rax
0000000000005c14         je         loc_6180

0000000000005c1a         movzx      ecx, byte [rbx+0x2e]
0000000000005c1e         mov        r8d, dword [rbp+var_328]
0000000000005c25         mov        edx, 0x1
0000000000005c2a         mov        rsi, qword [rbp+var_308]
0000000000005c31         mov        rdi, rax
0000000000005c34         call       create_hard_link                            ; create_hard_link
0000000000005c39         test       al, al
0000000000005c3b         jne        loc_6180

0000000000005c41         cmp        byte [rbx+0x25], 0x0
0000000000005c45         jne        loc_6a50

0000000000005c4b         nop        dword [rax+rax]

                     loc_5c50:
0000000000005c50         xor        r12d, r12d                                  ; CODE XREF=copy_internal+1314, copy_internal+1742, copy_internal+1835, copy_internal+2030, copy_internal+2844, copy_internal+4018, copy_internal+4051, copy_internal+4144, copy_internal+4562, copy_internal+4948, copy_internal+5718
0000000000005c53         jmp        loc_6186
0000000000005c58         align      32

                     loc_5c60:
0000000000005c60         mov        edx, 0xffffff9c                             ; CODE XREF=copy_internal+133
0000000000005c65         mov        rcx, rsi
0000000000005c68         mov        r8d, 0x1
0000000000005c6e         mov        rsi, rdi
0000000000005c71         mov        edi, edx
0000000000005c73         call       renameatu                                   ; renameatu
0000000000005c78         test       eax, eax
0000000000005c7a         jne        loc_67f0

0000000000005c80         mov        rax, qword [rbp+var_320]
0000000000005c87         mov        r14d, r12d
0000000000005c8a         test       rax, rax
0000000000005c8d         je         loc_5c98

0000000000005c8f         mov        byte [rax], 0x1
0000000000005c92         nop        word [rax+rax]

                     loc_5c98:
0000000000005c98         cmp        byte [rbx+0x31], 0x0                        ; CODE XREF=copy_internal+164, copy_internal+845
0000000000005c9c         jne        loc_5cb0

0000000000005c9e         mov        r12, qword [rbp+var_308]
0000000000005ca5         xor        r15d, r15d
0000000000005ca8         jmp        loc_59fb
0000000000005cad         align      16

                     loc_5cb0:
0000000000005cb0         xor        r15d, r15d                                  ; CODE XREF=copy_internal+860
0000000000005cb3         jmp        loc_5a48
0000000000005cb8         align      64

                     loc_5cc0:
0000000000005cc0         xor        r9d, r9d                                    ; CODE XREF=copy_internal+369
0000000000005cc3         mov        qword [rbp+var_350], 0x0

                     loc_5cce:
0000000000005cce         test       r13b, r13b                                  ; CODE XREF=copy_internal+2221, copy_internal+3657, copy_internal+6203, copy_internal+11176, copy_internal+11685
0000000000005cd1         je         loc_5d90

0000000000005cd7         cmp        qword [rbx+0x40], 0x0
0000000000005cdc         je         loc_5d90

                     loc_5ce2:
0000000000005ce2         movzx      r12d, byte [rbx+0x18]                       ; CODE XREF=copy_internal+11585
0000000000005ce7         test       r12b, r12b
0000000000005cea         jne        loc_5d90

0000000000005cf0         mov        edx, dword [rbx]
0000000000005cf2         test       edx, edx
0000000000005cf4         jne        loc_6978

0000000000005cfa         test       r9b, r9b
0000000000005cfd         lea        rdx, qword [rbp+var_1F0]
0000000000005d04         je         loc_7580

                     loc_5d0a:
0000000000005d0a         mov        eax, dword [rdx+0x18]                       ; CODE XREF=copy_internal+7284
0000000000005d0d         and        eax, 0xf000
0000000000005d12         cmp        eax, 0xa000
0000000000005d17         jne        loc_5d90

0000000000005d19         mov        rdi, qword [rbx+0x40]
0000000000005d1d         mov        rsi, qword [rbp+var_308]
0000000000005d24         call       seen_file                                   ; seen_file
0000000000005d29         test       al, al
0000000000005d2b         je         loc_5d90

0000000000005d2d         mov        rdx, qword [rbp+var_308]
0000000000005d34         mov        esi, 0x4
0000000000005d39         mov        edi, 0x1
0000000000005d3e         call       quotearg_n_style                            ; quotearg_n_style
0000000000005d43         mov        rdx, qword [rbp+var_310]
0000000000005d4a         xor        edi, edi
0000000000005d4c         mov        esi, 0x4
0000000000005d51         mov        r13, rax
0000000000005d54         call       quotearg_n_style                            ; quotearg_n_style
0000000000005d59         lea        rsi, qword [aWillNotCopySTh]                ; argument "msgid" for method j_dcgettext, "will not copy %s through just-created symlink %s"
0000000000005d60         mov        rbx, rax
0000000000005d63         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005d65         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005d6a         call       j_dcgettext                                 ; dcgettext
0000000000005d6f         mov        r8, r13
0000000000005d72         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005d75         mov        rcx, rbx
0000000000005d78         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005d7a         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005d7c         xor        eax, eax
0000000000005d7e         call       j_error                                     ; error
0000000000005d83         jmp        loc_6186
0000000000005d88         align      16

                     loc_5d90:
0000000000005d90         cmp        byte [rbx+0x2e], 0x0                        ; CODE XREF=copy_internal+913, copy_internal+924, copy_internal+938, copy_internal+983, copy_internal+1003, copy_internal+7268
0000000000005d94         je         loc_5da0

0000000000005d96         cmp        byte [rbx+0x18], 0x0
0000000000005d9a         je         loc_6350

                     loc_5da0:
0000000000005da0         test       r15d, r15d                                  ; CODE XREF=copy_internal+1108, copy_internal+2592, copy_internal+2624
0000000000005da3         je         loc_6140

                     loc_5da9:
0000000000005da9         cmp        byte [rbx+0x2a], 0x0                        ; CODE XREF=copy_internal+4171, copy_internal+10145, copy_internal+11591
0000000000005dad         je         loc_5dc5

0000000000005daf         mov        eax, dword [rbp+var_314]
0000000000005db5         and        eax, 0xf000
0000000000005dba         cmp        eax, 0x4000
0000000000005dbf         je         loc_6990

                     loc_5dc5:
0000000000005dc5         movzx      eax, byte [rbx+0x18]                        ; CODE XREF=copy_internal+1133
0000000000005dc9         test       al, al
0000000000005dcb         jne        loc_6270

0000000000005dd1         cmp        byte [rbx+0x22], 0x0
0000000000005dd5         jne        loc_79b0

                     loc_5ddb:
0000000000005ddb         movzx      eax, r14b                                   ; CODE XREF=copy_internal+2052, copy_internal+4165
0000000000005ddf         mov        qword [rbp+var_358], 0x0
0000000000005dea         mov        dword [rbp+var_320], eax

                     loc_5df0:
0000000000005df0         mov        r12d, dword [rbp+var_314]                   ; CODE XREF=copy_internal+2561, copy_internal+4445, copy_internal+9078
0000000000005df7         and        r12d, aEtpid                                ; "etpid"
0000000000005dfe         cmp        byte [rbx+0x2b], 0x0
0000000000005e02         je         loc_5e0f

0000000000005e04         mov        r12d, dword [rbx+0x10]
0000000000005e08         and        r12d, aEtpid                                ; "etpid"

                     loc_5e0f:
0000000000005e0f         cmp        byte [rbx+0x1d], 0x0                        ; CODE XREF=copy_internal+1218
0000000000005e13         jne        loc_6438

0000000000005e19         mov        r15d, dword [rbp+var_314]
0000000000005e20         and        r15d, 0xf000
0000000000005e27         cmp        r15d, 0x4000
0000000000005e2e         je         loc_6c70

0000000000005e34         mov        ecx, dword [rbp+var_320]
0000000000005e3a         mov        edx, dword [rbp+var_314]
0000000000005e40         mov        r8, rbx
0000000000005e43         mov        rsi, qword [rbp+var_308]
0000000000005e4a         mov        rdi, qword [rbp+var_310]
0000000000005e51         call       set_process_security_ctx                    ; set_process_security_ctx
0000000000005e56         test       al, al
0000000000005e58         mov        dword [rbp+var_35C], 0x0
0000000000005e62         je         loc_5c50

                     loc_5e68:
0000000000005e68         movzx      eax, byte [rbx+0x2c]                        ; CODE XREF=copy_internal+2883
0000000000005e6c         test       al, al
0000000000005e6e         mov        byte [rbp+var_320], al
0000000000005e74         jne        loc_6800

0000000000005e7a         cmp        byte [rbx+0x17], 0x0
0000000000005e7e         je         loc_71c8

0000000000005e84         cmp        byte [rbx+0x16], 0x0
0000000000005e88         mov        edx, 0x1
0000000000005e8d         jne        loc_5e98

0000000000005e8f         xor        edx, edx
0000000000005e91         cmp        dword [rbx+8], 0x3
0000000000005e95         sete       dl

                     loc_5e98:
0000000000005e98         mov        r8d, dword [rbp+var_328]                    ; CODE XREF=copy_internal+1357
0000000000005e9f         mov        rsi, qword [rbp+var_308]
0000000000005ea6         xor        ecx, ecx
0000000000005ea8         mov        rdi, qword [rbp+var_310]
0000000000005eaf         call       create_hard_link                            ; create_hard_link
0000000000005eb4         test       al, al
0000000000005eb6         je         loc_68d0

0000000000005ebc         xor        r8d, r8d

                     loc_5ebf:
0000000000005ebf         cmp        r15d, 0x4000                                ; CODE XREF=copy_internal+3886, copy_internal+8607, copy_internal+9717, copy_internal+10679, copy_internal+10716, copy_internal+13599, copy_internal+14252, copy_internal+14288, copy_internal+16386
0000000000005ec6         setne      r15b
0000000000005eca         test       r14b, r14b
0000000000005ecd         jne        loc_5ee2

0000000000005ecf         movzx      eax, byte [rbx+0x14]
0000000000005ed3         xor        eax, 0x1
0000000000005ed6         and        al, r15b
0000000000005ed9         mov        r12d, eax
0000000000005edc         jne        loc_7c10

                     loc_5ee2:
0000000000005ee2         test       r13b, r13b                                  ; CODE XREF=copy_internal+1421, copy_internal+8929, copy_internal+8976, copy_internal+8999
0000000000005ee5         mov        r12d, 0x1
0000000000005eeb         je         loc_5f42

0000000000005eed         mov        byte [rbp+var_330], 0x0

                     loc_5ef4:
0000000000005ef4         cmp        qword [rbx+0x40], 0x0                       ; CODE XREF=copy_internal+9526
0000000000005ef9         je         loc_5f2d

0000000000005efb         lea        r12, qword [rbp+var_D0]
0000000000005f02         mov        rsi, qword [rbp+var_308]                    ; argument "__filename" for method j___lxstat
0000000000005f09         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000005f0e         mov        byte [rbp+var_328], r8b
0000000000005f15         mov        rdx, r12                                    ; argument "__stat_buf" for method j___lxstat
0000000000005f18         call       j___lxstat                                  ; __lxstat
0000000000005f1d         test       eax, eax
0000000000005f1f         movzx      r8d, byte [rbp+var_328]
0000000000005f27         je         loc_7f72

                     loc_5f2d:
0000000000005f2d         movzx      eax, byte [rbp+var_330]                     ; CODE XREF=copy_internal+1465, copy_internal+9805
0000000000005f34         movzx      r12d, byte [rbp+var_315]
0000000000005f3c         mov        byte [rbp+var_315], al

                     loc_5f42:
0000000000005f42         cmp        byte [rbx+0x17], 0x0                        ; CODE XREF=copy_internal+1451
0000000000005f46         je         loc_5f51

0000000000005f48         test       r15b, r15b
0000000000005f4b         jne        loc_6186

                     loc_5f51:
0000000000005f51         test       r8b, r8b                                    ; CODE XREF=copy_internal+1542
0000000000005f54         jne        loc_6186

                     loc_5f5a:
0000000000005f5a         cmp        byte [rbx+0x1f], 0x0                        ; CODE XREF=copy_internal+8032
0000000000005f5e         je         loc_6018

0000000000005f64         mov        rax, qword [rbp+var_238]
0000000000005f6b         cmp        byte [rbp+var_320], 0x0
0000000000005f72         lea        rsi, qword [rbp+var_D0]
0000000000005f79         mov        rdi, qword [rbp+var_308]
0000000000005f80         mov        qword [rbp+var_D0], rax
0000000000005f87         mov        rax, qword [rbp+var_230]
0000000000005f8e         mov        qword [rbp+var_C8], rax
0000000000005f95         mov        rax, qword [rbp+var_228]
0000000000005f9c         mov        qword [rbp+var_C0], rax
0000000000005fa3         mov        rax, qword [rbp+var_220]
0000000000005faa         mov        qword [rbp+var_B8], rax
0000000000005fb1         je         loc_7f60

0000000000005fb7         call       lutimens                                    ; lutimens
0000000000005fbc         test       eax, eax
0000000000005fbe         je         loc_6018

0000000000005fc0         call       j___errno_location                          ; __errno_location
0000000000005fc5         cmp        dword [rax], 0x26
0000000000005fc8         je         loc_6018

                     loc_5fca:
0000000000005fca         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+9773
0000000000005fd1         mov        edi, 0x4
0000000000005fd6         call       quotearg_style                              ; quotearg_style
0000000000005fdb         lea        rsi, qword [aPreservingTime]                ; argument "msgid" for method j_dcgettext, "preserving times for %s"
0000000000005fe2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005fe4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005fe9         mov        r13, rax
0000000000005fec         call       j_dcgettext                                 ; dcgettext
0000000000005ff1         mov        r15, rax
0000000000005ff4         call       j___errno_location                          ; __errno_location
0000000000005ff9         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000005ffb         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005ffd         xor        eax, eax
0000000000005fff         mov        rcx, r13
0000000000006002         mov        rdx, r15                                    ; argument "__format" for method j_error
0000000000006005         call       j_error                                     ; error
000000000000600a         cmp        byte [rbx+0x24], 0x0
000000000000600e         jne        loc_5c50

0000000000006014         nop        dword [rax]

                     loc_6018:
0000000000006018         cmp        byte [rbp+var_320], 0x0                     ; CODE XREF=copy_internal+1566, copy_internal+1662, copy_internal+1672
000000000000601f         jne        loc_6186

                     loc_6025:
0000000000006025         cmp        byte [rbx+0x1d], 0x0                        ; CODE XREF=copy_internal+9767
0000000000006029         je         loc_6087

000000000000602b         test       r14b, r14b
000000000000602e         jne        loc_6042

0000000000006030         mov        eax, dword [rbp+var_1D4]
0000000000006036         cmp        dword [rbp+var_264], eax
000000000000603c         je         loc_86ea

                     loc_6042:
0000000000006042         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+1774, copy_internal+11702
0000000000006049         lea        rcx, qword [rbp+var_280]
0000000000006050         lea        r9, qword [rbp+var_1F0]
0000000000006057         movzx      r8d, r14b
000000000000605b         mov        edx, 0xffffffff
0000000000006060         mov        rdi, rbx
0000000000006063         call       set_owner                                   ; set_owner
0000000000006068         cmp        eax, 0xffffffff
000000000000606b         je         loc_5c50

0000000000006071         mov        ecx, dword [rbp+var_314]
0000000000006077         mov        edx, ecx
0000000000006079         and        dh, 0xf1
000000000000607c         test       eax, eax
000000000000607e         cmovne     edx, ecx
0000000000006081         mov        dword [rbp+var_314], edx

                     loc_6087:
0000000000006087         movabs     rax, 0xff0000000000ff                       ; CODE XREF=copy_internal+1769, copy_internal+11708
0000000000006091         test       qword [rbx+0x18], rax
0000000000006095         jne        loc_8130

000000000000609b         cmp        byte [rbx+0x2b], 0x0
000000000000609f         jne        loc_8495

00000000000060a5         test       byte [rbx+0x20], r14b
00000000000060a9         jne        loc_8749

00000000000060af         mov        eax, dword [rbp+var_35C]
00000000000060b5         test       eax, eax
00000000000060b7         jne        loc_8701

                     loc_60bd:
00000000000060bd         cmp        byte [rbp+var_315], 0x0                     ; CODE XREF=copy_internal+11726
00000000000060c4         je         loc_6186

                     loc_60ca:
00000000000060ca         mov        esi, dword [rbp+var_38C]                    ; CODE XREF=copy_internal+11739, copy_internal+11774
00000000000060d0         or         esi, dword [rbp+var_35C]                    ; argument "__mode" for method j_chmod
00000000000060d6         mov        rdi, qword [rbp+var_308]                    ; argument "__file" for method j_chmod
00000000000060dd         call       j_chmod                                     ; chmod
00000000000060e2         test       eax, eax
00000000000060e4         je         loc_6186

00000000000060ea         mov        rsi, qword [rbp+var_308]
00000000000060f1         mov        edi, 0x4
00000000000060f6         call       quotearg_style                              ; quotearg_style
00000000000060fb         lea        rsi, qword [aPreservingPerm]                ; argument "msgid" for method j_dcgettext, "preserving permissions for %s"
0000000000006102         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006107         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006109         mov        r14, rax
000000000000610c         call       j_dcgettext                                 ; dcgettext
0000000000006111         mov        r13, rax
0000000000006114         call       j___errno_location                          ; __errno_location
0000000000006119         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000611b         mov        rcx, r14
000000000000611e         mov        rdx, r13                                    ; argument "__format" for method j_error
0000000000006121         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006123         xor        eax, eax
0000000000006125         call       j_error                                     ; error

                     loc_612a:
000000000000612a         cmp        byte [rbx+0x24], 0x0                        ; CODE XREF=copy_internal+10259
000000000000612e         jne        loc_5c50

0000000000006134         jmp        loc_6186
0000000000006136         align      64

                     loc_6140:
0000000000006140         cmp        byte [rbx+0x18], 0x0                        ; CODE XREF=copy_internal+1123
0000000000006144         je         loc_5ddb

                     loc_614a:
000000000000614a         cmp        byte [rbx+0x2e], 0x0                        ; CODE XREF=copy_internal+2420, copy_internal+2437
000000000000614e         jne        loc_6cd0

                     loc_6154:
0000000000006154         cmp        byte [rbx+0x21], 0x0                        ; CODE XREF=copy_internal+5068
0000000000006158         jne        loc_6cb0

                     loc_615e:
000000000000615e         mov        rax, qword [rbp+var_320]                    ; CODE XREF=copy_internal+4998
0000000000006165         test       rax, rax
0000000000006168         je         loc_616d

000000000000616a         mov        byte [rax], 0x1

                     loc_616d:
000000000000616d         test       r13b, r13b                                  ; CODE XREF=copy_internal+2088
0000000000006170         je         loc_6180

0000000000006172         cmp        byte [rbx+0x31], 0x0
0000000000006176         je         loc_6be8

000000000000617c         nop        dword [rax]

                     loc_6180:
0000000000006180         mov        r12d, 0x1                                   ; CODE XREF=copy_internal+724, copy_internal+763, copy_internal+2096, copy_internal+3138, copy_internal+3203, copy_internal+3219, copy_internal+4748, copy_internal+4764, copy_internal+5492, copy_internal+9996

                     loc_6186:
0000000000006186         mov        rsi, qword [rbp+var_38]                     ; CODE XREF=copy_internal+787, copy_internal+1091, copy_internal+1547, copy_internal+1556, copy_internal+1759, copy_internal+1924, copy_internal+1956, copy_internal+2036, copy_internal+2337, copy_internal+3096, copy_internal+3748
000000000000618a         xor        rsi, qword [fs:0x28]
0000000000006193         mov        eax, r12d
0000000000006196         jne        loc_8e64

000000000000619c         lea        rsp, qword [rbp+var_28]
00000000000061a0         pop        rbx
00000000000061a1         pop        r12
00000000000061a3         pop        r13
00000000000061a5         pop        r14
00000000000061a7         pop        r15
00000000000061a9         pop        rbp
00000000000061aa         ret
                        ; endp
00000000000061ab         align      16

                     loc_61b0:
00000000000061b0         call       j___errno_location                          ; __errno_location, CODE XREF=copy_internal+498
00000000000061b5         mov        r9, rax
00000000000061b8         mov        eax, dword [rax]
00000000000061ba         cmp        eax, 0x28
00000000000061bd         je         loc_6790

00000000000061c3         cmp        eax, 0x2
00000000000061c6         mov        r8d, 0x1
00000000000061cc         jne        loc_679a

                     loc_61d2:
00000000000061d2         xor        r9d, r9d                                    ; CODE XREF=copy_internal+4579
00000000000061d5         cmp        r15d, 0x11
00000000000061d9         je         loc_5b3b

00000000000061df         mov        r14d, r8d
00000000000061e2         mov        qword [rbp+var_350], 0x0
00000000000061ed         jmp        loc_5cce
00000000000061f2         align      8

                     loc_61f8:
00000000000061f8         cmp        dword [rbx+8], 0x2                          ; CODE XREF=copy_internal+181
00000000000061fc         je         loc_5a48

0000000000006202         jmp        loc_59fb
0000000000006207         align      16

                     loc_6210:
0000000000006210         call       j___lxstat                                  ; __lxstat, CODE XREF=copy_internal+209
0000000000006215         test       eax, eax
0000000000006217         mov        rsi, r12
000000000000621a         setne      al
000000000000621d         test       al, al
000000000000621f         je         loc_5a2c

                     loc_6225:
0000000000006225         mov        edi, 0x4                                    ; CODE XREF=copy_internal+230, copy_internal+14206
000000000000622a         call       quotearg_style                              ; quotearg_style
000000000000622f         lea        rsi, qword [aCannotStatS]                   ; "cannot stat %s"
0000000000006236         mov        r12, rax
0000000000006239         mov        edx, 0x5

                     loc_623e:
000000000000623e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=copy_internal+6272
0000000000006240         call       j_dcgettext                                 ; dcgettext
0000000000006245         mov        rbx, rax
0000000000006248         call       j___errno_location                          ; __errno_location
000000000000624d         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000624f         mov        rcx, r12
0000000000006252         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000006255         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006257         xor        eax, eax
0000000000006259         xor        r12d, r12d
000000000000625c         call       j_error                                     ; error
0000000000006261         jmp        loc_6186
0000000000006266         align      16

                     loc_6270:
0000000000006270         cmp        qword [rbp+var_270], 0x1                    ; CODE XREF=copy_internal+1163
0000000000006278         je         loc_72a8

000000000000627e         cmp        byte [rbx+0x22], 0x0
0000000000006282         mov        qword [rbp+var_358], 0x0
000000000000628d         je         loc_6299

000000000000628f         cmp        byte [rbx+0x17], 0x0
0000000000006293         je         loc_6a58

                     loc_6299:
0000000000006299         cmp        r15d, 0x11                                  ; CODE XREF=copy_internal+2381, copy_internal+4429
000000000000629d         jne        loc_62cb

000000000000629f         mov        rsi, qword [rbp+var_308]                    ; argument "__new" for method j_rename
00000000000062a6         mov        rdi, qword [rbp+var_310]                    ; argument "__old" for method j_rename
00000000000062ad         call       j_rename                                    ; rename
00000000000062b2         test       eax, eax
00000000000062b4         je         loc_614a

00000000000062ba         call       j___errno_location                          ; __errno_location
00000000000062bf         mov        r15d, dword [rax]
00000000000062c2         test       r15d, r15d
00000000000062c5         je         loc_614a

                     loc_62cb:
00000000000062cb         cmp        r15d, 0x16                                  ; CODE XREF=copy_internal+2397
00000000000062cf         je         loc_72f0

00000000000062d5         cmp        r15d, 0x12
00000000000062d9         jne        loc_6aa8

00000000000062df         mov        r12d, dword [rbp+var_314]
00000000000062e6         mov        rdi, qword [rbp+var_308]
00000000000062ed         and        r12d, 0xf000
00000000000062f4         cmp        r12d, 0x4000
00000000000062fb         je         loc_7360

0000000000006301         call       j_unlink                                    ; unlink
0000000000006306         test       eax, eax
0000000000006308         je         loc_631b

000000000000630a         call       j___errno_location                          ; __errno_location
000000000000630f         cmp        dword [rax], 0x2
0000000000006312         mov        r14, rax
0000000000006315         jne        loc_737e

                     loc_631b:
000000000000631b         cmp        r12d, 0x4000                                ; CODE XREF=copy_internal+2504
0000000000006322         setne      dl
0000000000006325         and        dl, byte [rbx+0x2e]
0000000000006328         mov        r14d, edx
000000000000632b         jne        loc_7c70

                     loc_6331:
0000000000006331         mov        dword [rbp+var_320], 0x1                    ; CODE XREF=copy_internal+6695, copy_internal+6712
000000000000633b         mov        r14d, 0x1
0000000000006341         jmp        loc_5df0
0000000000006346         align      16

                     loc_6350:
0000000000006350         mov        eax, dword [rbp+var_314]                    ; CODE XREF=copy_internal+1114, copy_internal+4156
0000000000006356         and        eax, 0xf000
000000000000635b         cmp        eax, 0x4000
0000000000006360         je         loc_5da0

0000000000006366         mov        rdx, qword [rbp+var_350]
000000000000636d         mov        rsi, qword [rbp+var_308]
0000000000006374         mov        rdi, qword [rbp+var_310]
000000000000637b         call       emit_verbose                                ; emit_verbose
0000000000006380         jmp        loc_5da0
0000000000006385         align      8

                     loc_6388:
0000000000006388         mov        rsi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+309
000000000000638f         mov        rdx, r10
0000000000006392         mov        qword [rbp+var_328], r10
0000000000006399         call       seen_file                                   ; seen_file
000000000000639e         test       al, al
00000000000063a0         mov        r12d, eax
00000000000063a3         jne        loc_7268

00000000000063a9         mov        rdi, qword [rbx+0x48]
00000000000063ad         mov        r10, qword [rbp+var_328]
00000000000063b4         jmp        loc_5a7b
00000000000063b9         align      64

                     loc_63c0:
00000000000063c0         movzx      r9d, byte [rbx+0x18]                        ; CODE XREF=copy_internal+401, copy_internal+443
00000000000063c5         mov        r8d, 0x100
00000000000063cb         test       r9b, r9b
00000000000063ce         jne        loc_5b01

00000000000063d4         movzx      r9d, byte [rbx+0x2c]
00000000000063d9         test       r9b, r9b
00000000000063dc         jne        loc_5b01

00000000000063e2         movzx      r9d, byte [rbx+0x17]
00000000000063e7         test       r9b, r9b
00000000000063ea         jne        loc_5b01

00000000000063f0         mov        r10d, dword [rbx]
00000000000063f3         mov        r9d, 0x1
00000000000063f9         test       r10d, r10d
00000000000063fc         jne        loc_5b01

0000000000006402         movzx      r9d, byte [rbx+0x15]
0000000000006407         xor        r8d, r8d
000000000000640a         test       r9b, r9b
000000000000640d         setne      r8b
0000000000006411         shl        r8d, 0x8
0000000000006415         jmp        loc_5b01
000000000000641a         align      32

                     loc_6420:
0000000000006420         cmp        dword [rbx+8], 0x2                          ; CODE XREF=copy_internal+379
0000000000006424         jne        loc_5ac1

000000000000642a         xor        r8d, r8d
000000000000642d         xor        r9d, r9d
0000000000006430         jmp        loc_5b5f
0000000000006435         align      8

                     loc_6438:
0000000000006438         mov        ecx, dword [rbp+var_320]                    ; CODE XREF=copy_internal+1235
000000000000643e         mov        edx, dword [rbp+var_314]
0000000000006444         mov        r8, rbx
0000000000006447         mov        rsi, qword [rbp+var_308]
000000000000644e         mov        rdi, qword [rbp+var_310]
0000000000006455         call       set_process_security_ctx                    ; set_process_security_ctx
000000000000645a         test       al, al
000000000000645c         je         loc_5c50

0000000000006462         mov        r15d, dword [rbp+var_314]
0000000000006469         mov        eax, r12d
000000000000646c         and        eax, 0x3f
000000000000646f         mov        dword [rbp+var_35C], eax
0000000000006475         and        r15d, 0xf000
000000000000647c         cmp        r15d, 0x4000
0000000000006483         jne        loc_5e68

                     loc_6489:
0000000000006489         mov        rax, qword [rbp+var_330]                    ; CODE XREF=copy_internal+4966
0000000000006490         mov        rdx, qword [rbp+var_278]
0000000000006497         mov        rcx, qword [rbp+var_280]
000000000000649e         test       rax, rax
00000000000064a1         jne        loc_64bc

00000000000064a3         jmp        loc_6da0
00000000000064a8         align      16

                     loc_64b0:
00000000000064b0         mov        rax, qword [rax]                            ; CODE XREF=copy_internal+2944, copy_internal+2950
00000000000064b3         test       rax, rax
00000000000064b6         je         loc_6da0

                     loc_64bc:
00000000000064bc         cmp        qword [rax+8], rdx                          ; CODE XREF=copy_internal+2913
00000000000064c0         jne        loc_64b0

00000000000064c2         cmp        qword [rax+0x10], rcx
00000000000064c6         jne        loc_64b0

00000000000064c8         mov        rsi, qword [rbp+var_310]
00000000000064cf         mov        edi, 0x4
00000000000064d4         call       quotearg_style                              ; quotearg_style
00000000000064d9         lea        rsi, qword [aCannotCopyCycl]                ; "cannot copy cyclic symbolic link %s"
00000000000064e0         mov        r12, rax
00000000000064e3         mov        edx, 0x5

                     loc_64e8:
00000000000064e8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=copy_internal+6402, copy_internal+8782
00000000000064ea         call       j_dcgettext                                 ; dcgettext
00000000000064ef         mov        rcx, r12
00000000000064f2         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000064f5         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000064f7         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000064f9         xor        eax, eax
00000000000064fb         call       j_error                                     ; error
0000000000006500         jmp        loc_68d0
0000000000006505         align      8

                     loc_6508:
0000000000006508         movzx      r12d, byte [rbx+0x2a]                       ; CODE XREF=copy_internal+258
000000000000650d         test       r12b, r12b
0000000000006510         jne        loc_5a48

0000000000006516         mov        rsi, qword [rbp+var_310]
000000000000651d         mov        edi, 0x4
0000000000006522         call       quotearg_style                              ; quotearg_style
0000000000006527         cmp        byte [rbx+0x19], 0x0
000000000000652b         mov        r13, rax
000000000000652e         mov        edx, 0x5
0000000000006533         jne        loc_72d0

0000000000006539         lea        rsi, qword [aRNotSpecifiedO]                ; argument "msgid" for method j_dcgettext, "-r not specified; omitting directory %s"
0000000000006540         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006542         call       j_dcgettext                                 ; dcgettext
0000000000006547         mov        rdx, rax

                     loc_654a:
000000000000654a         mov        rcx, r13                                    ; CODE XREF=copy_internal+6561
000000000000654d         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000654f         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006551         xor        eax, eax
0000000000006553         call       j_error                                     ; error
0000000000006558         jmp        loc_6186
000000000000655d         align      32

                     loc_6560:
0000000000006560         cmp        byte [rbx+0x18], 0x0                        ; CODE XREF=copy_internal+547
0000000000006564         jne        loc_6b40

000000000000656a         mov        eax, dword [rbp+var_314]
0000000000006570         and        eax, 0xf000
0000000000006575         cmp        eax, 0x4000
000000000000657a         je         loc_65d0

                     loc_657c:
000000000000657c         mov        eax, dword [rbx+8]                          ; CODE XREF=copy_internal+4596
000000000000657f         cmp        eax, 0x2
0000000000006582         je         loc_6180

0000000000006588         cmp        eax, 0x3
000000000000658b         jne        loc_65d0

000000000000658d         mov        rsi, qword [rbp+var_308]
0000000000006594         lea        rdx, qword [rbp+var_1D8]
000000000000659b         mov        rdi, rbx
000000000000659e         mov        byte [rbp+var_358], r9b
00000000000065a5         mov        byte [rbp+var_350], r8b
00000000000065ac         call       overwrite_ok.isra.12                        ; overwrite_ok.isra.12
00000000000065b1         test       al, al
00000000000065b3         movzx      r8d, byte [rbp+var_350]
00000000000065bb         movzx      r9d, byte [rbp+var_358]
00000000000065c3         je         loc_6180

00000000000065c9         nop        dword [rax]

                     loc_65d0:
00000000000065d0         test       r14b, r14b                                  ; CODE XREF=copy_internal+3130, copy_internal+3147, copy_internal+4624, copy_internal+4634, copy_internal+4690, copy_internal+5732, copy_internal+9888
00000000000065d3         jne        loc_6180

00000000000065d9         mov        eax, dword [rbp+var_1D8]
00000000000065df         mov        r12d, dword [rbp+var_314]
00000000000065e6         mov        edx, eax
00000000000065e8         and        r12d, 0xf000
00000000000065ef         and        edx, 0xf000
00000000000065f5         cmp        edx, 0x4000
00000000000065fb         je         loc_6c10

0000000000006601         cmp        r12d, 0x4000
0000000000006608         je         loc_78a8

000000000000660e         test       r13b, r13b
0000000000006611         mov        r15d, dword [rbx]
0000000000006614         je         loc_7133

                     loc_661a:
000000000000661a         cmp        r15d, 0x3                                   ; CODE XREF=copy_internal+8065
000000000000661e         jne        loc_70d0

0000000000006624         cmp        byte [rbx+0x18], 0x0
0000000000006628         jne        loc_78c7

                     loc_662e:
000000000000662e         mov        rdi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+6146
0000000000006635         mov        byte [rbp+var_358], r9b
000000000000663c         mov        byte [rbp+var_350], r8b
0000000000006643         call       last_component                              ; last_component
0000000000006648         cmp        byte [rax], 0x2e
000000000000664b         mov        r14, rax
000000000000664e         movzx      r8d, byte [rbp+var_350]
0000000000006656         movzx      r9d, byte [rbp+var_358]
000000000000665e         jne        loc_6687

0000000000006660         xor        eax, eax

                     loc_6662:
0000000000006662         xor        edx, edx                                    ; CODE XREF=copy_internal+8154
0000000000006664         cmp        byte [r14+1], 0x2e
0000000000006669         sete       dl
000000000000666c         movzx      edx, byte [r14+rdx+1]
0000000000006672         test       dl, dl
0000000000006674         je         loc_7148

000000000000667a         cmp        dl, 0x2f
000000000000667d         je         loc_7148

0000000000006683         test       al, al
0000000000006685         jne        loc_669d

                     loc_6687:
0000000000006687         mov        eax, dword [rbp+var_1D8]                    ; CODE XREF=copy_internal+3358
000000000000668d         and        eax, 0xf000
0000000000006692         cmp        eax, 0x4000
0000000000006697         je         loc_7167

                     loc_669d:
000000000000669d         cmp        r15d, 0x3                                   ; CODE XREF=copy_internal+3397, copy_internal+8143
00000000000066a1         je         loc_6709

00000000000066a3         mov        rdi, r14                                    ; argument "__s" for method j_strlen
00000000000066a6         mov        byte [rbp+var_35C], r9b
00000000000066ad         call       j_strlen                                    ; strlen
00000000000066b2         mov        rdi, qword [rbp+var_308]
00000000000066b9         mov        qword [rbp+var_350], rax
00000000000066c0         call       last_component                              ; last_component
00000000000066c5         mov        rdi, rax                                    ; argument "__s" for method j_strlen
00000000000066c8         mov        qword [rbp+var_358], rax
00000000000066cf         call       j_strlen                                    ; strlen
00000000000066d4         mov        r15, qword [simple_backup_suffix]           ; simple_backup_suffix
00000000000066db         mov        r12, rax
00000000000066de         mov        rdi, r15                                    ; argument "__s" for method j_strlen
00000000000066e1         call       j_strlen                                    ; strlen
00000000000066e6         mov        r8, rax
00000000000066e9         lea        rax, qword [r12+rax]
00000000000066ed         cmp        qword [rbp+var_350], rax
00000000000066f4         mov        rsi, qword [rbp+var_358]
00000000000066fb         movzx      r9d, byte [rbp+var_35C]
0000000000006703         je         loc_815e

                     loc_6709:
0000000000006709         mov        edx, dword [rbx]                            ; CODE XREF=copy_internal+3425, copy_internal+10305, copy_internal+10340, copy_internal+10460, copy_internal+10480, copy_internal+10500
000000000000670b         mov        rsi, qword [rbp+var_308]
0000000000006712         mov        edi, 0xffffff9c
0000000000006717         mov        byte [rbp+var_350], r9b
000000000000671e         call       backup_file_rename                          ; backup_file_rename
0000000000006723         test       rax, rax
0000000000006726         mov        r12, rax
0000000000006729         movzx      r9d, byte [rbp+var_350]
0000000000006731         je         loc_8051

0000000000006737         mov        rdi, rax                                    ; argument "__s" for method j_strlen
000000000000673a         mov        byte [rbp+var_358], r9b
0000000000006741         mov        r14d, 0x1
0000000000006747         call       j_strlen                                    ; strlen
000000000000674c         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memcpy
0000000000006750         add        rax, 0x1f
0000000000006754         mov        rsi, r12                                    ; argument "__src" for method j_memcpy
0000000000006757         and        rax, 0xfffffffffffffff0
000000000000675b         mov        r15d, 0x11
0000000000006761         sub        rsp, rax
0000000000006764         lea        rdi, qword [rsp+0x3c0+var_3B1]
0000000000006769         and        rdi, 0xfffffffffffffff0                     ; argument "__dest" for method j_memcpy
000000000000676d         call       j_memcpy                                    ; memcpy
0000000000006772         mov        rdi, r12
0000000000006775         mov        qword [rbp+var_350], rax
000000000000677c         call       sub_2c80                                    ; sub_2c80
0000000000006781         movzx      r9d, byte [rbp+var_358]
0000000000006789         jmp        loc_5cce
000000000000678e         align      16

                     loc_6790:
0000000000006790         cmp        byte [rbx+0x16], 0x0                        ; CODE XREF=copy_internal+2173
0000000000006794         jne        loc_6b20

                     loc_679a:
000000000000679a         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+2188
00000000000067a1         mov        edi, 0x4
00000000000067a6         mov        qword [rbp+var_310], r9
00000000000067ad         xor        r12d, r12d
00000000000067b0         call       quotearg_style                              ; quotearg_style
00000000000067b5         lea        rsi, qword [aCannotStatS]                   ; argument "msgid" for method j_dcgettext, "cannot stat %s"
00000000000067bc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000067c1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000067c3         mov        rbx, rax
00000000000067c6         call       j_dcgettext                                 ; dcgettext
00000000000067cb         mov        r9, qword [rbp+var_310]
00000000000067d2         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000067d5         mov        rcx, rbx
00000000000067d8         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000067da         xor        eax, eax
00000000000067dc         mov        esi, dword [r9]                             ; argument "__errnum" for method j_error
00000000000067df         call       j_error                                     ; error
00000000000067e4         jmp        loc_6186
00000000000067e9         align      16

                     loc_67f0:
00000000000067f0         call       j___errno_location                          ; __errno_location, CODE XREF=copy_internal+826
00000000000067f5         mov        r15d, dword [rax]
00000000000067f8         jmp        loc_59cb
00000000000067fd         align      2048

                     loc_6800:
0000000000006800         mov        rax, qword [rbp+var_310]                    ; CODE XREF=copy_internal+1332
0000000000006807         cmp        byte [rax], 0x2f
000000000000680a         je         loc_6844

000000000000680c         mov        rdi, qword [rbp+var_308]
0000000000006813         call       dir_name                                    ; dir_name
0000000000006818         lea        r8, qword [aFtsreadFailed+17]               ; 0x15aec
000000000000681f         mov        rdi, rax
0000000000006822         mov        ecx, 0x2
0000000000006827         mov        r12, rax
000000000000682a         mov        rsi, r8
000000000000682d         rep  cmpsb byte [rsi], byte [rdi]
000000000000682f         seta       al
0000000000006832         sbb        al, 0x0
0000000000006834         test       al, al
0000000000006836         jne        loc_7b18

                     loc_683c:
000000000000683c         mov        rdi, r12                                    ; CODE XREF=copy_internal+8686, copy_internal+8714, copy_internal+13115
000000000000683f         call       sub_2c80                                    ; sub_2c80

                     loc_6844:
0000000000006844         movzx      ecx, byte [rbx+0x16]                        ; CODE XREF=copy_internal+3786
0000000000006848         mov        rdx, qword [rbp+var_308]
000000000000684f         mov        r8d, 0xffffffff
0000000000006855         mov        rdi, qword [rbp+var_310]
000000000000685c         mov        esi, 0xffffff9c
0000000000006861         call       force_symlinkat                             ; force_symlinkat
0000000000006866         xor        r8d, r8d
0000000000006869         test       eax, eax
000000000000686b         mov        r12d, eax
000000000000686e         jle        loc_5ebf

0000000000006874         mov        rdx, qword [rbp+var_310]
000000000000687b         mov        esi, 0x4
0000000000006880         mov        edi, 0x1
0000000000006885         call       quotearg_n_style                            ; quotearg_n_style
000000000000688a         mov        rdx, qword [rbp+var_308]
0000000000006891         mov        esi, 0x4
0000000000006896         xor        edi, edi
0000000000006898         mov        r13, rax
000000000000689b         call       quotearg_n_style                            ; quotearg_n_style
00000000000068a0         lea        rsi, qword [aCannotCreateSy_16298]          ; argument "msgid" for method j_dcgettext, "cannot create symbolic link %s to %s"
00000000000068a7         mov        r14, rax
00000000000068aa         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000068af         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000068b1         call       j_dcgettext                                 ; dcgettext
00000000000068b6         mov        r8, r13
00000000000068b9         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000068bc         mov        rcx, r14
00000000000068bf         mov        esi, r12d                                   ; argument "__errnum" for method j_error
00000000000068c2         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000068c4         xor        eax, eax
00000000000068c6         call       j_error                                     ; error
00000000000068cb         nop        dword [rax+rax]

                     loc_68d0:
00000000000068d0         cmp        byte [rbx+0x25], 0x0                        ; CODE XREF=copy_internal+1398, copy_internal+3008, copy_internal+5375, copy_internal+8613, copy_internal+8990, copy_internal+10977, copy_internal+11283, copy_internal+11518, copy_internal+16380
00000000000068d4         jne        loc_6a50

00000000000068da         cmp        qword [rbp+var_358], 0x0
00000000000068e2         je         loc_7180

                     loc_68e8:
00000000000068e8         mov        rax, qword [rbp+var_350]                    ; CODE XREF=copy_internal+4362, copy_internal+6227
00000000000068ef         test       rax, rax
00000000000068f2         je         loc_5c50

00000000000068f8         mov        rsi, qword [rbp+var_308]                    ; argument "__new" for method j_rename
00000000000068ff         mov        rdi, rax                                    ; argument "__old" for method j_rename
0000000000006902         call       j_rename                                    ; rename
0000000000006907         test       eax, eax
0000000000006909         jne        loc_71a0

000000000000690f         cmp        byte [rbx+0x2e], 0x0
0000000000006913         je         loc_5c50

0000000000006919         mov        rdx, qword [rbp+var_308]
0000000000006920         mov        esi, 0x4
0000000000006925         mov        edi, 0x1
000000000000692a         call       quotearg_n_style                            ; quotearg_n_style
000000000000692f         mov        rdx, qword [rbp+var_350]
0000000000006936         xor        edi, edi
0000000000006938         mov        esi, 0x4
000000000000693d         mov        r12, rax
0000000000006940         call       quotearg_n_style                            ; quotearg_n_style
0000000000006945         lea        rsi, qword [aSSUnbackupn]                   ; argument "msgid" for method j_dcgettext, "%s -> %s (unbackup)\\n"
000000000000694c         mov        rbx, rax
000000000000694f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006951         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006956         call       j_dcgettext                                 ; dcgettext
000000000000695b         mov        rcx, r12
000000000000695e         mov        rsi, rax
0000000000006961         mov        rdx, rbx
0000000000006964         mov        edi, 0x1
0000000000006969         xor        eax, eax                                    ; DATA XREF=leaf_optimization+64, fts_build+739
000000000000696b         call       j___printf_chk                              ; __printf_chk
0000000000006970         jmp        loc_5c50
0000000000006975         align      8

                     loc_6978:
0000000000006978         cmp        byte [rbx+0x2e], 0x0                        ; CODE XREF=copy_internal+948
000000000000697c         jne        loc_6350

0000000000006982         test       r15d, r15d
0000000000006985         je         loc_5ddb

000000000000698b         jmp        loc_5da9

                     loc_6990:
0000000000006990         test       r13b, r13b                                  ; CODE XREF=copy_internal+1151
0000000000006993         mov        rdx, qword [rbp+var_280]
000000000000699a         mov        rdi, qword [rbp+var_278]
00000000000069a1         je         loc_7250

00000000000069a7         mov        rsi, rdi
00000000000069aa         mov        rdi, qword [rbp+var_308]
00000000000069b1         call       remember_copied                             ; remember_copied
00000000000069b6         mov        qword [rbp+var_358], rax

                     loc_69bd:
00000000000069bd         cmp        qword [rbp+var_358], 0x0                    ; CODE XREF=copy_internal+6431
00000000000069c5         je         loc_6ec0

                     loc_69cb:
00000000000069cb         mov        rsi, qword [rbp+var_358]                    ; CODE XREF=copy_internal+5443
00000000000069d2         mov        rdi, qword [rbp+var_310]
00000000000069d9         call       same_name                                   ; same_name
00000000000069de         test       al, al
00000000000069e0         je         loc_7920

00000000000069e6         mov        rdx, qword [top_level_dst_name]             ; top_level_dst_name
00000000000069ed         mov        esi, 0x4
00000000000069f2         mov        edi, 0x1
00000000000069f7         call       quotearg_n_style                            ; quotearg_n_style
00000000000069fc         mov        rdx, qword [top_level_src_name]             ; top_level_src_name
0000000000006a03         mov        esi, 0x4
0000000000006a08         xor        edi, edi
0000000000006a0a         mov        r13, rax
0000000000006a0d         call       quotearg_n_style                            ; quotearg_n_style
0000000000006a12         lea        rsi, qword [aCannotCopyADir]                ; argument "msgid" for method j_dcgettext, "cannot copy a directory, %s, into itself, %s"
0000000000006a19         mov        r12, rax
0000000000006a1c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006a21         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006a23         call       j_dcgettext                                 ; dcgettext
0000000000006a28         mov        r8, r13
0000000000006a2b         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000006a2e         mov        rcx, r12
0000000000006a31         xor        eax, eax
0000000000006a33         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000006a35         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006a37         call       j_error                                     ; error
0000000000006a3c         mov        rax, qword [rbp+var_340]
0000000000006a43         mov        byte [rax], 0x1

                     loc_6a46:
0000000000006a46         cmp        byte [rbx+0x25], 0x0                        ; CODE XREF=copy_internal+5486, copy_internal+8299
0000000000006a4a         je         loc_68e8

                     loc_6a50:
0000000000006a50         call       restore_default_fscreatecon_or_die          ; restore_default_fscreatecon_or_die, CODE XREF=copy_internal+773, copy_internal+3988, copy_internal+13560
0000000000006a55         nop        dword [rax]

                     loc_6a58:
0000000000006a58         cmp        qword [rbp+var_270], 0x1                    ; CODE XREF=copy_internal+2387, copy_internal+8308
0000000000006a60         ja         loc_6e48

0000000000006a66         test       r13b, r13b
0000000000006a69         mov        edx, dword [rbx+4]
0000000000006a6c         je         loc_6a77

0000000000006a6e         cmp        edx, 0x3
0000000000006a71         je         loc_6e48

                     loc_6a77:
0000000000006a77         cmp        edx, 0x4                                    ; CODE XREF=copy_internal+4396
0000000000006a7a         mov        qword [rbp+var_358], 0x0
0000000000006a85         je         loc_6e48

                     loc_6a8b:
0000000000006a8b         test       al, al                                      ; CODE XREF=copy_internal+5508
0000000000006a8d         jne        loc_6299

                     loc_6a93:
0000000000006a93         movzx      eax, r14b                                   ; CODE XREF=copy_internal+8325
0000000000006a97         mov        dword [rbp+var_320], eax
0000000000006a9d         jmp        loc_5df0
0000000000006aa2         align      8

                     loc_6aa8:
0000000000006aa8         mov        rdx, qword [rbp+var_308]                    ; CODE XREF=copy_internal+2457
0000000000006aaf         mov        esi, 0x4
0000000000006ab4         mov        edi, 0x1
0000000000006ab9         call       quotearg_n_style                            ; quotearg_n_style
0000000000006abe         mov        rdx, qword [rbp+var_310]
0000000000006ac5         mov        esi, 0x4
0000000000006aca         xor        edi, edi
0000000000006acc         mov        r12, rax
0000000000006acf         call       quotearg_n_style                            ; quotearg_n_style
0000000000006ad4         lea        rsi, qword [aCannotMoveSToS]                ; argument "msgid" for method j_dcgettext, "cannot move %s to %s"
0000000000006adb         mov        rbx, rax
0000000000006ade         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006ae3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006ae5         call       j_dcgettext                                 ; dcgettext
0000000000006aea         mov        r8, r12
0000000000006aed         mov        rcx, rbx
0000000000006af0         mov        rdx, rax
0000000000006af3         mov        esi, r15d

                     loc_6af6:
0000000000006af6         xor        edi, edi                                    ; argument "__status" for method j_error, CODE XREF=copy_internal+6796
0000000000006af8         xor        eax, eax
0000000000006afa         call       j_error                                     ; error
0000000000006aff         mov        rsi, qword [rbp+var_280]
0000000000006b06         mov        rdi, qword [rbp+var_278]
0000000000006b0d         call       forget_created                              ; forget_created
0000000000006b12         jmp        loc_5c50
0000000000006b17         align      32

                     loc_6b20:
0000000000006b20         xor        r8d, r8d                                    ; CODE XREF=copy_internal+3668
0000000000006b23         jmp        loc_61d2
0000000000006b28         align      16

                     loc_6b30:
0000000000006b30         cmp        byte [rbx+0x18], 0x0                        ; CODE XREF=copy_internal+674
0000000000006b34         je         loc_657c

0000000000006b3a         nop        word [rax+rax]

                     loc_6b40:
0000000000006b40         mov        eax, dword [rbx+8]                          ; CODE XREF=copy_internal+3108, copy_internal+5738
0000000000006b43         cmp        eax, 0x2
0000000000006b46         je         loc_6bc4

0000000000006b48         cmp        eax, 0x3
0000000000006b4b         je         loc_6b98

0000000000006b4d         cmp        eax, 0x4
0000000000006b50         jne        loc_65d0

0000000000006b56         cmp        byte [rbx+0x2f], 0x0
0000000000006b5a         je         loc_65d0

0000000000006b60         mov        esi, dword [rbp+var_1D8]
0000000000006b66         mov        rdi, qword [rbp+var_308]
0000000000006b6d         mov        byte [rbp+var_358], r9b
0000000000006b74         mov        byte [rbp+var_350], r8b
0000000000006b7b         call       writable_destination                        ; writable_destination
0000000000006b80         test       al, al
0000000000006b82         movzx      r8d, byte [rbp+var_350]
0000000000006b8a         movzx      r9d, byte [rbp+var_358]
0000000000006b92         jne        loc_65d0

                     loc_6b98:
0000000000006b98         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+4619
0000000000006b9f         lea        rdx, qword [rbp+var_1D8]
0000000000006ba6         mov        rdi, rbx
0000000000006ba9         mov        byte [rbp+var_358], r9b
0000000000006bb0         mov        byte [rbp+var_350], r8b
0000000000006bb7         call       overwrite_ok.isra.12                        ; overwrite_ok.isra.12
0000000000006bbc         test       al, al
0000000000006bbe         jne        loc_7fd0

                     loc_6bc4:
0000000000006bc4         cmp        qword [rbp+var_320], 0x0                    ; CODE XREF=copy_internal+4614, copy_internal+9990
0000000000006bcc         je         loc_6180

0000000000006bd2         mov        rax, qword [rbp+var_320]
0000000000006bd9         mov        byte [rax], 0x1
0000000000006bdc         jmp        loc_6180
0000000000006be1         align      8

                     loc_6be8:
0000000000006be8         mov        rdi, qword [rbx+0x40]                       ; CODE XREF=copy_internal+2102
0000000000006bec         mov        rsi, qword [rbp+var_308]
0000000000006bf3         lea        rdx, qword [rbp+var_280]
0000000000006bfa         mov        r12d, r13d
0000000000006bfd         call       record_file                                 ; record_file
0000000000006c02         jmp        loc_6186
0000000000006c07         align      16

                     loc_6c10:
0000000000006c10         cmp        r12d, 0x4000                                ; CODE XREF=copy_internal+3259
0000000000006c17         je         loc_7130

                     loc_6c1d:
0000000000006c1d         cmp        byte [rbx+0x18], 0x0                        ; CODE XREF=copy_internal+6122
0000000000006c21         je         loc_6c2f

0000000000006c23         mov        r15d, dword [rbx]
0000000000006c26         test       r15d, r15d
0000000000006c29         jne        loc_78c7

                     loc_6c2f:
0000000000006c2f         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+4833
0000000000006c36         mov        edi, 0x4
0000000000006c3b         xor        r12d, r12d
0000000000006c3e         call       quotearg_style                              ; quotearg_style
0000000000006c43         lea        rsi, qword [aCannotOverwrit]                ; argument "msgid" for method j_dcgettext, "cannot overwrite directory %s with non-directory"
0000000000006c4a         mov        rbx, rax
0000000000006c4d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006c52         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006c54         call       j_dcgettext                                 ; dcgettext
0000000000006c59         mov        rcx, rbx
0000000000006c5c         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000006c5f         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000006c61         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006c63         xor        eax, eax
0000000000006c65         call       j_error                                     ; error
0000000000006c6a         jmp        loc_6186
0000000000006c6f         align      16

                     loc_6c70:
0000000000006c70         mov        ecx, dword [rbp+var_320]                    ; CODE XREF=copy_internal+1262
0000000000006c76         mov        edx, dword [rbp+var_314]
0000000000006c7c         mov        r8, rbx
0000000000006c7f         mov        rsi, qword [rbp+var_308]
0000000000006c86         mov        rdi, qword [rbp+var_310]
0000000000006c8d         call       set_process_security_ctx                    ; set_process_security_ctx
0000000000006c92         test       al, al
0000000000006c94         je         loc_5c50

0000000000006c9a         mov        eax, r12d
0000000000006c9d         and        eax, 0x12
0000000000006ca0         mov        dword [rbp+var_35C], eax
0000000000006ca6         jmp        loc_6489
0000000000006cab         align      16

                     loc_6cb0:
0000000000006cb0         mov        rdi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+2072
0000000000006cb7         mov        rcx, rbx
0000000000006cba         mov        edx, 0x1
0000000000006cbf         xor        esi, esi
0000000000006cc1         call       set_file_security_ctx                       ; set_file_security_ctx
0000000000006cc6         jmp        loc_615e
0000000000006ccb         align      16

                     loc_6cd0:
0000000000006cd0         lea        rsi, qword [aRenamed]                       ; argument "msgid" for method j_dcgettext, "renamed ", CODE XREF=copy_internal+2062
0000000000006cd7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006cdc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006cde         call       j_dcgettext                                 ; dcgettext
0000000000006ce3         mov        edi, 0x1
0000000000006ce8         mov        rsi, rax
0000000000006ceb         xor        eax, eax
0000000000006ced         call       j___printf_chk                              ; __printf_chk
0000000000006cf2         mov        rdx, qword [rbp+var_350]
0000000000006cf9         mov        rsi, qword [rbp+var_308]
0000000000006d00         mov        rdi, qword [rbp+var_310]
0000000000006d07         call       emit_verbose                                ; emit_verbose
0000000000006d0c         jmp        loc_6154
0000000000006d11         align      8

                     loc_6d18:
0000000000006d18         mov        rax, qword [rbp+var_1F0]                    ; CODE XREF=copy_internal+527
0000000000006d1f         cmp        qword [rbp+var_280], rax
0000000000006d26         jne        loc_5b55

0000000000006d2c         movzx      eax, byte [rbx+0x17]
0000000000006d30         test       al, al
0000000000006d32         jne        loc_70c8

0000000000006d38         cmp        dword [rbx+4], 0x2
0000000000006d3c         mov        ecx, 0x1
0000000000006d41         mov        r15d, 0x1
0000000000006d47         je         loc_6ed5

0000000000006d4d         lea        r12, qword [rbp+var_160]
0000000000006d54         mov        rsi, qword [rbp+var_308]                    ; argument "__filename" for method j___lxstat
0000000000006d5b         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000006d60         mov        byte [rbp+var_358], r9b
0000000000006d67         mov        byte [rbp+var_350], r8b
0000000000006d6e         mov        rdx, r12                                    ; argument "__stat_buf" for method j___lxstat
0000000000006d71         call       j___lxstat                                  ; __lxstat
0000000000006d76         test       eax, eax
0000000000006d78         movzx      r8d, byte [rbp+var_350]
0000000000006d80         movzx      r9d, byte [rbp+var_358]
0000000000006d88         je         loc_7d92

                     loc_6d8e:
0000000000006d8e         xor        r14d, r14d                                  ; CODE XREF=copy_internal+5576, copy_internal+5586, copy_internal+5605, copy_internal+5626, copy_internal+8877, copy_internal+8886, copy_internal+9350, copy_internal+9452
0000000000006d91         jmp        loc_5b5f
0000000000006d96         align      32

                     loc_6da0:
0000000000006da0         sub        rsp, 0x30                                   ; CODE XREF=copy_internal+2915, copy_internal+2934
0000000000006da4         mov        rsi, qword [rbp+var_330]
0000000000006dab         lea        rax, qword [rsp+0x3f0+var_3E1]
0000000000006db0         and        rax, 0xfffffffffffffff0
0000000000006db4         test       r14b, r14b
0000000000006db7         mov        qword [rbp+var_328], rax
0000000000006dbe         mov        qword [rax], rsi
0000000000006dc1         mov        qword [rax+8], rdx
0000000000006dc5         mov        qword [rax+0x10], rcx
0000000000006dc9         jne        loc_6de1

0000000000006dcb         mov        eax, dword [rbp+var_1D8]
0000000000006dd1         and        eax, 0xf000
0000000000006dd6         cmp        eax, 0x4000
0000000000006ddb         je         loc_7e38

                     loc_6de1:
0000000000006de1         mov        esi, dword [rbp+var_35C]                    ; CODE XREF=copy_internal+5257
0000000000006de7         mov        r15, qword [rbp+var_308]
0000000000006dee         not        esi
0000000000006df0         mov        rdi, r15                                    ; argument "__path" for method j_mkdir
0000000000006df3         and        esi, r12d                                   ; argument "__mode" for method j_mkdir
0000000000006df6         call       j_mkdir                                     ; mkdir
0000000000006dfb         test       eax, eax
0000000000006dfd         je         loc_75c0

0000000000006e03         mov        rsi, r15
0000000000006e06         mov        edi, 0x4
0000000000006e0b         call       quotearg_style                              ; quotearg_style
0000000000006e10         lea        rsi, qword [aCannotCreateDi]                ; "cannot create directory %s"
0000000000006e17         mov        r13, rax
0000000000006e1a         mov        edx, 0x5

                     loc_6e1f:
0000000000006e1f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=copy_internal+9755, copy_internal+9925, copy_internal+10219, copy_internal+10754, copy_internal+11555, copy_internal+13539
0000000000006e21         call       j_dcgettext                                 ; dcgettext
0000000000006e26         mov        r12, rax
0000000000006e29         call       j___errno_location                          ; __errno_location
0000000000006e2e         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000006e30         mov        rcx, r13
0000000000006e33         mov        rdx, r12                                    ; argument "__format" for method j_error
0000000000006e36         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006e38         xor        eax, eax
0000000000006e3a         call       j_error                                     ; error
0000000000006e3f         jmp        loc_68d0
0000000000006e44         align      8

                     loc_6e48:
0000000000006e48         mov        rdx, qword [rbp+var_280]                    ; CODE XREF=copy_internal+4384, copy_internal+4401, copy_internal+4421
0000000000006e4f         mov        rsi, qword [rbp+var_278]
0000000000006e56         mov        rdi, qword [rbp+var_308]
0000000000006e5d         call       remember_copied                             ; remember_copied
0000000000006e62         mov        qword [rbp+var_358], rax

                     loc_6e69:
0000000000006e69         cmp        qword [rbp+var_358], 0x0                    ; CODE XREF=copy_internal+6530
0000000000006e71         je         loc_6ec0

0000000000006e73         mov        eax, dword [rbp+var_314]
0000000000006e79         and        eax, 0xf000
0000000000006e7e         cmp        eax, 0x4000
0000000000006e83         je         loc_69cb

0000000000006e89         movzx      ecx, byte [rbx+0x2e]
0000000000006e8d         mov        r8d, dword [rbp+var_328]
0000000000006e94         mov        edx, 0x1
0000000000006e99         mov        rsi, qword [rbp+var_308]
0000000000006ea0         mov        rdi, qword [rbp+var_358]
0000000000006ea7         call       create_hard_link                            ; create_hard_link
0000000000006eac         test       al, al
0000000000006eae         je         loc_6a46

0000000000006eb4         jmp        loc_6180
0000000000006eb9         align      64

                     loc_6ec0:
0000000000006ec0         movzx      eax, byte [rbx+0x18]                        ; CODE XREF=copy_internal+4229, copy_internal+5425, copy_internal+8193, copy_internal+8207
0000000000006ec4         jmp        loc_6a8b
0000000000006ec9         align      16

                     loc_6ed0:
0000000000006ed0         xor        ecx, ecx                                    ; CODE XREF=copy_internal+537
0000000000006ed2         xor        r15d, r15d

                     loc_6ed5:
0000000000006ed5         mov        eax, dword [rbp+var_268]                    ; CODE XREF=copy_internal+5127
0000000000006edb         lea        rdx, qword [rbp+var_280]
0000000000006ee2         and        eax, 0xf000
0000000000006ee7         cmp        eax, 0xa000
0000000000006eec         je         loc_7b93

                     loc_6ef2:
0000000000006ef2         mov        esi, dword [rbx]                            ; CODE XREF=copy_internal+8810, copy_internal+9414, copy_internal+9436, copy_internal+9446
0000000000006ef4         test       esi, esi
0000000000006ef6         je         loc_73d8

0000000000006efc         test       cl, cl
0000000000006efe         jne        loc_7f92

0000000000006f04         cmp        byte [rbx+0x18], 0x0
0000000000006f08         jne        loc_6d8e

0000000000006f0e         cmp        dword [rbx+4], 0x2
0000000000006f12         je         loc_6d8e

0000000000006f18         mov        eax, dword [rdx+0x18]
0000000000006f1b         and        eax, 0xf000
0000000000006f20         cmp        eax, 0xa000
0000000000006f25         jne        loc_6d8e

0000000000006f2b         mov        eax, dword [r12+0x18]
0000000000006f30         and        eax, 0xf000
0000000000006f35         cmp        eax, 0xa000
0000000000006f3a         je         loc_6d8e

                     loc_6f40:
0000000000006f40         mov        rdx, qword [rbp+var_308]                    ; CODE XREF=copy_internal+6015, copy_internal+6881, copy_internal+7197, copy_internal+8851
0000000000006f47         mov        esi, 0x4
0000000000006f4c         mov        edi, 0x1
0000000000006f51         call       quotearg_n_style                            ; quotearg_n_style
0000000000006f56         mov        rdx, qword [rbp+var_310]
0000000000006f5d         mov        esi, 0x4
0000000000006f62         xor        edi, edi
0000000000006f64         mov        r12, rax
0000000000006f67         call       quotearg_n_style                            ; quotearg_n_style
0000000000006f6c         lea        rsi, qword [aSAndSAreTheSam]                ; "%s and %s are the same file"
0000000000006f73         mov        rbx, rax
0000000000006f76         mov        edx, 0x5

                     loc_6f7b:
0000000000006f7b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=copy_internal+9142, copy_internal+9639, copy_internal+11088
0000000000006f7d         call       j_dcgettext                                 ; dcgettext
0000000000006f82         mov        r8, r12
0000000000006f85         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000006f88         mov        rcx, rbx
0000000000006f8b         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000006f8d         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000006f8f         xor        eax, eax
0000000000006f91         call       j_error                                     ; error
0000000000006f96         jmp        loc_5c50
0000000000006f9b         align      32

                     loc_6fa0:
0000000000006fa0         cmp        byte [rbx+0x18], 0x0                        ; CODE XREF=copy_internal+569
0000000000006fa4         je         loc_65d0

0000000000006faa         jmp        loc_6b40
0000000000006faf         align      16

                     loc_6fb0:
0000000000006fb0         mov        eax, dword [r12+0x18]                       ; CODE XREF=copy_internal+6815, copy_internal+6825
0000000000006fb5         and        eax, 0xf000
0000000000006fba         cmp        eax, 0xa000
0000000000006fbf         je         loc_5b5f

0000000000006fc5         test       cl, cl
0000000000006fc7         je         loc_6fd5

0000000000006fc9         cmp        qword [r12+0x10], 0x1
0000000000006fcf         ja         loc_838b

                     loc_6fd5:
0000000000006fd5         mov        eax, dword [rdx+0x18]                       ; CODE XREF=copy_internal+5767
0000000000006fd8         and        eax, 0xf000
0000000000006fdd         cmp        eax, 0xa000
0000000000006fe2         je         loc_7010

                     loc_6fe4:
0000000000006fe4         mov        rax, qword [r12+8]                          ; CODE XREF=copy_internal+10938
0000000000006fe9         cmp        qword [rdx+8], rax
0000000000006fed         jne        loc_5b5f

0000000000006ff3         mov        rax, qword [r12]
0000000000006ff7         cmp        qword [rdx], rax
0000000000006ffa         jne        loc_5b5f

                     loc_7000:
0000000000007000         movzx      eax, byte [rbx+0x17]                        ; DATA XREF=copy_internal+11801
0000000000007004         test       al, al
0000000000007006         jne        loc_70c8

                     loc_700c:
000000000000700c         movzx      esi, byte [rbx+0x18]                        ; CODE XREF=copy_internal+10911, copy_internal+10932

                     loc_7010:
0000000000007010         test       sil, sil                                    ; CODE XREF=copy_internal+5794
0000000000007013         je         loc_7402

0000000000007019         mov        eax, dword [rbp+var_268]
000000000000701f         and        eax, 0xf000
0000000000007024         cmp        eax, 0xa000
0000000000007029         jne        loc_7402

000000000000702f         cmp        qword [r12+0x10], 0x1
0000000000007035         jbe        loc_7402

000000000000703b         mov        rdi, qword [rbp+var_310]                    ; argument "__name" for method j_canonicalize_file_name
0000000000007042         mov        byte [rbp+var_35C], r9b
0000000000007049         mov        byte [rbp+var_358], r8b
0000000000007050         mov        qword [rbp+var_350], rdx
0000000000007057         call       j_canonicalize_file_name                    ; canonicalize_file_name
000000000000705c         test       rax, rax
000000000000705f         mov        r15, rax
0000000000007062         mov        rdx, qword [rbp+var_350]
0000000000007069         movzx      r8d, byte [rbp+var_358]
0000000000007071         movzx      r9d, byte [rbp+var_35C]
0000000000007079         je         loc_7402

000000000000707f         mov        rsi, qword [rbp+var_308]
0000000000007086         mov        rdi, rax
0000000000007089         mov        byte [rbp+var_358], r9b
0000000000007090         mov        byte [rbp+var_350], r8b
0000000000007097         call       same_name                                   ; same_name
000000000000709c         mov        rdi, r15
000000000000709f         xor        eax, 0x1
00000000000070a2         mov        r12d, eax
00000000000070a5         call       sub_2c80                                    ; sub_2c80
00000000000070aa         movzx      r8d, byte [rbp+var_350]
00000000000070b2         movzx      r9d, byte [rbp+var_358]
00000000000070ba         xor        eax, eax

                     loc_70bc:
00000000000070bc         test       r12b, r12b                                  ; CODE XREF=copy_internal+8906, copy_internal+9867, copy_internal+13072
00000000000070bf         je         loc_6f40

00000000000070c5         nop        dword [rax]

                     loc_70c8:
00000000000070c8         mov        r14d, eax                                   ; CODE XREF=copy_internal+5106, copy_internal+5830
00000000000070cb         jmp        loc_5b5f

                     loc_70d0:
00000000000070d0         mov        rdi, qword [rbx+0x40]                       ; CODE XREF=copy_internal+3294
00000000000070d4         mov        rsi, qword [rbp+var_308]
00000000000070db         lea        rdx, qword [rbp+var_1F0]
00000000000070e2         mov        byte [rbp+var_358], r9b
00000000000070e9         mov        byte [rbp+var_350], r8b
00000000000070f0         call       seen_file                                   ; seen_file
00000000000070f5         test       al, al
00000000000070f7         movzx      r8d, byte [rbp+var_350]
00000000000070ff         movzx      r9d, byte [rbp+var_358]
0000000000007107         jne        loc_8455

000000000000710d         cmp        r12d, 0x4000
0000000000007114         je         loc_7130

0000000000007116         mov        eax, dword [rbp+var_1D8]
000000000000711c         mov        edx, eax
000000000000711e         and        edx, 0xf000
0000000000007124         cmp        edx, 0x4000
000000000000712a         je         loc_6c1d

                     loc_7130:
0000000000007130         mov        r15d, dword [rbx]                           ; CODE XREF=copy_internal+4823, copy_internal+6100

                     loc_7133:
0000000000007133         movzx      eax, byte [rbx+0x18]                        ; CODE XREF=copy_internal+3284
0000000000007137         test       al, al
0000000000007139         jne        loc_7af0

000000000000713f         test       r15d, r15d
0000000000007142         jne        loc_662e

                     loc_7148:
0000000000007148         mov        edx, dword [rbp+var_1D8]                    ; CODE XREF=copy_internal+3380, copy_internal+3389
000000000000714e         and        edx, 0xf000
0000000000007154         cmp        edx, 0x4000
000000000000715a         sete       r12b
000000000000715e         or         r12b, al
0000000000007161         je         loc_7cfb

                     loc_7167:
0000000000007167         mov        r14d, r8d                                   ; CODE XREF=copy_internal+3415, copy_internal+8649, copy_internal+10154, copy_internal+10182
000000000000716a         mov        r15d, 0x11
0000000000007170         mov        qword [rbp+var_350], 0x0
000000000000717b         jmp        loc_5cce

                     loc_7180:
0000000000007180         mov        rsi, qword [rbp+var_280]                    ; CODE XREF=copy_internal+4002
0000000000007187         mov        rdi, qword [rbp+var_278]
000000000000718e         call       forget_created                              ; forget_created
0000000000007193         jmp        loc_68e8
0000000000007198         align      32

                     loc_71a0:
00000000000071a0         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+4041
00000000000071a7         mov        edi, 0x4
00000000000071ac         call       quotearg_style                              ; quotearg_style
00000000000071b1         mov        edx, 0x5
00000000000071b6         mov        r12, rax
00000000000071b9         lea        rsi, qword [aCannotUnbackup]                ; "cannot un-backup %s"
00000000000071c0         jmp        loc_623e
00000000000071c5         align      8

                     loc_71c8:
00000000000071c8         cmp        r15d, 0x8000                                ; CODE XREF=copy_internal+1342
00000000000071cf         je         loc_79d0

00000000000071d5         cmp        r15d, 0xa000
00000000000071dc         setne      r8b
00000000000071e0         and        r8b, byte [rbx+0x14]
00000000000071e4         jne        loc_79d0

00000000000071ea         cmp        r15d, 0x1000
00000000000071f1         je         loc_82b2

00000000000071f7         mov        eax, r15d
00000000000071fa         and        ah, 0xbf
00000000000071fd         cmp        eax, 0x2000
0000000000007202         je         loc_7eec

0000000000007208         cmp        r15d, 0xc000
000000000000720f         je         loc_7eec

0000000000007215         cmp        r15d, 0xa000
000000000000721c         je         loc_85a0

0000000000007222         mov        rsi, qword [rbp+var_310]
0000000000007229         mov        edi, 0x4
000000000000722e         call       quotearg_style                              ; quotearg_style
0000000000007233         mov        edx, 0x5
0000000000007238         mov        r12, rax
000000000000723b         lea        rsi, qword [aSHasUnknownFil]                ; "%s has unknown file type"
0000000000007242         jmp        loc_64e8
0000000000007247         align      16

                     loc_7250:
0000000000007250         mov        rsi, rdx                                    ; CODE XREF=copy_internal+4193
0000000000007253         call       src_to_dest_lookup                          ; src_to_dest_lookup
0000000000007258         mov        qword [rbp+var_358], rax
000000000000725f         jmp        loc_69bd
0000000000007264         align      8

                     loc_7268:
0000000000007268         mov        rsi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+2659
000000000000726f         mov        edi, 0x4
0000000000007274         call       quotearg_style                              ; quotearg_style
0000000000007279         lea        rsi, qword [aWarningSourceF]                ; argument "msgid" for method j_dcgettext, "warning: source file %s specified more than once"
0000000000007280         mov        rbx, rax
0000000000007283         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007285         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000728a         call       j_dcgettext                                 ; dcgettext
000000000000728f         mov        rcx, rbx
0000000000007292         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000007295         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000007297         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000007299         xor        eax, eax
000000000000729b         call       j_error                                     ; error
00000000000072a0         jmp        loc_6186
00000000000072a5         align      8

                     loc_72a8:
00000000000072a8         mov        rsi, qword [rbp+var_280]                    ; CODE XREF=copy_internal+2360
00000000000072af         mov        rdi, qword [rbp+var_278]
00000000000072b6         call       src_to_dest_lookup                          ; src_to_dest_lookup
00000000000072bb         mov        qword [rbp+var_358], rax
00000000000072c2         jmp        loc_6e69
00000000000072c7         align      16

                     loc_72d0:
00000000000072d0         lea        rsi, qword [aOmittingDirect]                ; argument "msgid" for method j_dcgettext, "omitting directory %s", CODE XREF=copy_internal+3059
00000000000072d7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000072d9         call       j_dcgettext                                 ; dcgettext
00000000000072de         mov        rdx, rax
00000000000072e1         jmp        loc_654a
00000000000072e6         align      16

                     loc_72f0:
00000000000072f0         mov        rdx, qword [top_level_dst_name]             ; top_level_dst_name, CODE XREF=copy_internal+2447
00000000000072f7         mov        esi, 0x4
00000000000072fc         mov        edi, 0x1
0000000000007301         call       quotearg_n_style                            ; quotearg_n_style
0000000000007306         mov        rdx, qword [top_level_src_name]             ; top_level_src_name
000000000000730d         mov        esi, 0x4
0000000000007312         xor        edi, edi
0000000000007314         mov        r12, rax
0000000000007317         call       quotearg_n_style                            ; quotearg_n_style
000000000000731c         lea        rsi, qword [aCannotMoveSToA]                ; argument "msgid" for method j_dcgettext, "cannot move %s to a subdirectory of itself, %s"
0000000000007323         mov        rbx, rax
0000000000007326         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000732b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000732d         call       j_dcgettext                                 ; dcgettext
0000000000007332         mov        r8, r12
0000000000007335         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000007338         mov        rcx, rbx
000000000000733b         xor        eax, eax
000000000000733d         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000733f         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000007341         call       j_error                                     ; error
0000000000007346         mov        rax, qword [rbp+var_340]
000000000000734d         mov        r12d, 0x1
0000000000007353         mov        byte [rax], 0x1
0000000000007356         jmp        loc_6186
000000000000735b         align      32

                     loc_7360:
0000000000007360         call       j_rmdir                                     ; rmdir, CODE XREF=copy_internal+2491
0000000000007365         test       eax, eax
0000000000007367         je         loc_6331

000000000000736d         call       j___errno_location                          ; __errno_location
0000000000007372         cmp        dword [rax], 0x2
0000000000007375         mov        r14, rax
0000000000007378         je         loc_6331

                     loc_737e:
000000000000737e         mov        rdx, qword [rbp+var_308]                    ; CODE XREF=copy_internal+2517
0000000000007385         mov        esi, 0x4
000000000000738a         mov        edi, 0x1
000000000000738f         call       quotearg_n_style                            ; quotearg_n_style
0000000000007394         mov        rdx, qword [rbp+var_310]
000000000000739b         mov        esi, 0x4
00000000000073a0         xor        edi, edi
00000000000073a2         mov        r12, rax
00000000000073a5         call       quotearg_n_style                            ; quotearg_n_style
00000000000073aa         lea        rsi, qword [aInterdeviceMov]                ; argument "msgid" for method j_dcgettext, "inter-device move failed: %s to %s; unable to remove target"
00000000000073b1         mov        rbx, rax
00000000000073b4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000073b9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000073bb         call       j_dcgettext                                 ; dcgettext
00000000000073c0         mov        r8, r12
00000000000073c3         mov        rcx, rbx
00000000000073c6         mov        rdx, rax
00000000000073c9         mov        esi, dword [r14]
00000000000073cc         jmp        loc_6af6
00000000000073d1         align      8

                     loc_73d8:
00000000000073d8         movzx      esi, byte [rbx+0x18]                        ; CODE XREF=copy_internal+5558
00000000000073dc         test       sil, sil
00000000000073df         jne        loc_6fb0

00000000000073e5         cmp        byte [rbx+0x15], 0x0
00000000000073e9         jne        loc_6fb0

00000000000073ef         mov        eax, dword [rdx+0x18]
00000000000073f2         and        eax, 0xf000
00000000000073f7         cmp        eax, 0xa000
00000000000073fc         jne        loc_83e5

                     loc_7402:
0000000000007402         cmp        byte [rbx+0x2c], 0x0                        ; CODE XREF=copy_internal+5843, copy_internal+5865, copy_internal+5877, copy_internal+5945
0000000000007406         je         loc_741d

0000000000007408         mov        eax, dword [r12+0x18]
000000000000740d         and        eax, 0xf000
0000000000007412         cmp        eax, 0xa000
0000000000007417         je         loc_5b5f

                     loc_741d:
000000000000741d         cmp        dword [rbx+4], 0x2                          ; CODE XREF=copy_internal+6854
0000000000007421         jne        loc_6f40

0000000000007427         mov        eax, dword [rdx+0x18]
000000000000742a         and        eax, 0xf000
000000000000742f         cmp        eax, 0xa000
0000000000007434         je         loc_8eac

000000000000743a         movdqa     xmm0, xmmword [rdx]
000000000000743e         movaps     xmmword [rbp+var_D0], xmm0
0000000000007445         movdqa     xmm0, xmmword [rdx+0x10]
000000000000744a         movaps     xmmword [rbp+var_C0], xmm0
0000000000007451         movdqa     xmm0, xmmword [rdx+0x20]
0000000000007456         movaps     xmmword [rbp+var_B0], xmm0
000000000000745d         movdqa     xmm0, xmmword [rdx+0x30]
0000000000007462         movaps     xmmword [rbp+var_A0], xmm0
0000000000007469         movdqa     xmm0, xmmword [rdx+0x40]
000000000000746e         movaps     xmmword [rbp+var_90], xmm0
0000000000007475         movdqa     xmm0, xmmword [rdx+0x50]
000000000000747a         movaps     xmmword [rbp+var_80], xmm0
000000000000747e         movdqa     xmm0, xmmword [rdx+0x60]
0000000000007483         movaps     xmmword [rbp+var_70], xmm0
0000000000007487         movdqa     xmm0, xmmword [rdx+0x70]
000000000000748c         movaps     xmmword [rbp+var_60], xmm0
0000000000007490         movdqa     xmm0, xmmword [rdx+0x80]
0000000000007498         movaps     xmmword [rbp+var_50], xmm0

                     loc_749c:
000000000000749c         mov        eax, dword [r12+0x18]                       ; CODE XREF=copy_internal+13732
00000000000074a1         and        eax, 0xf000
00000000000074a6         cmp        eax, 0xa000
00000000000074ab         je         loc_8e69

00000000000074b1         movdqa     xmm0, xmmword [r12]
00000000000074b7         movaps     xmmword [rbp+var_160], xmm0
00000000000074be         movdqa     xmm0, xmmword [r12+0x10]
00000000000074c5         movaps     xmmword [rbp+var_150], xmm0
00000000000074cc         movdqa     xmm0, xmmword [r12+0x20]
00000000000074d3         movaps     xmmword [rbp+var_140], xmm0
00000000000074da         movdqa     xmm0, xmmword [r12+0x30]
00000000000074e1         movaps     xmmword [rbp+var_130], xmm0
00000000000074e8         movdqa     xmm0, xmmword [r12+0x40]
00000000000074ef         movaps     xmmword [rbp+var_120], xmm0
00000000000074f6         movdqa     xmm0, xmmword [r12+0x50]
00000000000074fd         movaps     xmmword [rbp+var_110], xmm0
0000000000007504         movdqa     xmm0, xmmword [r12+0x60]
000000000000750b         movaps     xmmword [rbp+var_100], xmm0
0000000000007512         movdqa     xmm0, xmmword [r12+0x70]
0000000000007519         movaps     xmmword [rbp+var_F0], xmm0
0000000000007520         movdqa     xmm0, xmmword [r12+0x80]
000000000000752a         movaps     xmmword [rbp+var_E0], xmm0

                     loc_7531:
0000000000007531         mov        rax, qword [rbp+var_158]                    ; CODE XREF=copy_internal+13665
0000000000007538         cmp        qword [rbp+var_C8], rax
000000000000753f         jne        loc_5b5f

0000000000007545         mov        rax, qword [rbp+var_160]
000000000000754c         cmp        qword [rbp+var_D0], rax
0000000000007553         jne        loc_5b5f

0000000000007559         cmp        byte [rbx+0x17], 0x0
000000000000755d         je         loc_6f40

0000000000007563         mov        eax, dword [r12+0x18]
0000000000007568         and        eax, 0xf000
000000000000756d         cmp        eax, 0xa000
0000000000007572         setne      r14b
0000000000007576         jmp        loc_5b5f
000000000000757b         align      128

                     loc_7580:
0000000000007580         lea        rcx, qword [rbp+var_D0]                     ; CODE XREF=copy_internal+964
0000000000007587         mov        rsi, qword [rbp+var_308]                    ; argument "__filename" for method j___lxstat
000000000000758e         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000007593         mov        rdx, rcx                                    ; argument "__stat_buf" for method j___lxstat
0000000000007596         mov        qword [rbp+var_358], rcx
000000000000759d         call       j___lxstat                                  ; __lxstat
00000000000075a2         test       eax, eax
00000000000075a4         jne        loc_5d90

00000000000075aa         mov        rcx, qword [rbp+var_358]
00000000000075b1         mov        rdx, rcx
00000000000075b4         jmp        loc_5d0a
00000000000075b9         align      64

                     loc_75c0:
00000000000075c0         mov        rsi, qword [rbp+var_308]                    ; argument "__filename" for method j___lxstat, CODE XREF=copy_internal+5309
00000000000075c7         lea        rdx, qword [rbp+var_1F0]                    ; argument "__stat_buf" for method j___lxstat
00000000000075ce         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
00000000000075d3         call       j___lxstat                                  ; __lxstat
00000000000075d8         test       eax, eax
00000000000075da         jne        loc_7fe5

00000000000075e0         mov        r12d, dword [rbp+var_1D8]
00000000000075e7         mov        byte [rbp+var_330], 0x0
00000000000075ee         mov        eax, r12d
00000000000075f1         and        eax, 0x1c0
00000000000075f6         cmp        eax, 0x1c0
00000000000075fb         je         loc_7628

00000000000075fd         mov        rdi, qword [rbp+var_308]                    ; argument "__file" for method j_chmod
0000000000007604         mov        esi, r12d
0000000000007607         or         esi, 0x1c0                                  ; argument "__mode" for method j_chmod
000000000000760d         call       j_chmod                                     ; chmod
0000000000007612         test       eax, eax
0000000000007614         mov        dword [rbp+var_38C], r12d
000000000000761b         mov        byte [rbp+var_330], 0x1
0000000000007622         jne        loc_8643

                     loc_7628:
0000000000007628         mov        rax, qword [rbp+var_338]                    ; CODE XREF=copy_internal+7355
000000000000762f         cmp        byte [rax], 0x0
0000000000007632         je         loc_842c

                     loc_7638:
0000000000007638         cmp        byte [rbx+0x2e], 0x0                        ; CODE XREF=copy_internal+11024
000000000000763c         je         loc_7688

000000000000763e         cmp        byte [rbx+0x18], 0x0
0000000000007642         je         loc_84ed

0000000000007648         mov        rsi, qword [rbp+var_308]
000000000000764f         mov        edi, 0x4
0000000000007654         call       quotearg_style                              ; quotearg_style
0000000000007659         lea        rsi, qword [aCreatedDirecto]                ; argument "msgid" for method j_dcgettext, "created directory %s\\n"
0000000000007660         mov        r12, rax
0000000000007663         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007668         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000766a         call       j_dcgettext                                 ; dcgettext
000000000000766f         mov        rdx, r12
0000000000007672         mov        rsi, rax
0000000000007675         mov        edi, 0x1
000000000000767a         xor        eax, eax
000000000000767c         call       j___printf_chk                              ; __printf_chk
0000000000007681         nop        dword [rax]

                     loc_7688:
0000000000007688         mov        rax, qword [rbp+var_348]                    ; CODE XREF=copy_internal+7420, copy_internal+9501, copy_internal+11202
000000000000768f         test       rax, rax
0000000000007692         setne      r12b
0000000000007696         and        r12b, byte [rbx+0x1c]
000000000000769a         jne        loc_7e7b

                     loc_76a0:
00000000000076a0         movdqu     xmm0, xmmword [rbx]                         ; CODE XREF=copy_internal+9547
00000000000076a4         mov        esi, 0x2
00000000000076a9         mov        rdi, qword [rbp+var_310]
00000000000076b0         movaps     xmmword [rbp+var_2F0], xmm0
00000000000076b7         movdqu     xmm0, xmmword [rbx+0x10]
00000000000076bc         movaps     xmmword [rbp+var_2E0], xmm0
00000000000076c3         movdqu     xmm0, xmmword [rbx+0x20]
00000000000076c8         movaps     xmmword [rbp+var_2D0], xmm0
00000000000076cf         movdqu     xmm0, xmmword [rbx+0x30]
00000000000076d4         movaps     xmmword [rbp+var_2C0], xmm0
00000000000076db         movdqu     xmm0, xmmword [rbx+0x40]
00000000000076e0         movaps     xmmword [rbp+var_2B0], xmm0
00000000000076e7         call       savedir                                     ; savedir
00000000000076ec         test       rax, rax
00000000000076ef         mov        qword [rbp+var_368], rax
00000000000076f6         je         loc_8558

00000000000076fc         cmp        dword [rbx+4], 0x3
0000000000007700         jne        loc_770c

0000000000007702         mov        dword [rbp+var_2EC], 0x2

                     loc_770c:
000000000000770c         mov        rax, qword [rbp+var_368]                    ; CODE XREF=copy_internal+7616
0000000000007713         cmp        byte [rax], 0x0
0000000000007716         je         loc_8c55

000000000000771c         lea        rax, qword [rbp+var_2F0]
0000000000007723         lea        r10, qword [rbp+var_280]
000000000000772a         mov        dword [rbp+var_380], r13d
0000000000007731         mov        r15, qword [rbp+var_368]
0000000000007738         mov        r13, qword [rbp+var_340]
000000000000773f         mov        r12d, 0x1
0000000000007745         mov        qword [rbp+var_348], rax
000000000000774c         lea        rax, qword [rbp+var_2F9]
0000000000007753         mov        byte [rbp+var_315], 0x0
000000000000775a         mov        byte [rbp+var_370], r14b
0000000000007761         mov        qword [rbp+var_378], rbx
0000000000007768         mov        qword [rbp+var_350], rax
000000000000776f         lea        rax, qword [rbp+var_2F8]
0000000000007776         mov        qword [rbp+var_340], r10
000000000000777d         mov        qword [rbp+var_358], rax
0000000000007784         jmp        loc_77b4
0000000000007786         align      16

                     loc_7790:
0000000000007790         movzx      eax, byte [rbp+var_2F8]                     ; CODE XREF=copy_internal+7947
0000000000007797         mov        rdi, r15                                    ; argument "__s" for method j_strlen
000000000000779a         or         byte [rbp+var_315], al
00000000000077a0         call       j_strlen                                    ; strlen
00000000000077a5         lea        r15, qword [r15+rax+1]
00000000000077aa         cmp        byte [r15], 0x0
00000000000077ae         je         loc_7851

                     loc_77b4:
00000000000077b4         mov        rdi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+7748
00000000000077bb         xor        edx, edx
00000000000077bd         mov        rsi, r15
00000000000077c0         call       file_name_concat                            ; file_name_concat
00000000000077c5         mov        rdi, qword [rbp+var_308]
00000000000077cc         xor        edx, edx
00000000000077ce         mov        rsi, r15
00000000000077d1         mov        rbx, rax
00000000000077d4         call       file_name_concat                            ; file_name_concat
00000000000077d9         mov        r14, rax
00000000000077dc         mov        rax, qword [rbp+var_338]
00000000000077e3         mov        r9, qword [rbp+var_348]
00000000000077ea         mov        r8, qword [rbp+var_328]
00000000000077f1         mov        rcx, qword [rbp+var_340]
00000000000077f8         mov        rsi, r14
00000000000077fb         mov        edx, dword [rbp+var_320]
0000000000007801         mov        rdi, rbx
0000000000007804         movzx      eax, byte [rax]
0000000000007807         push       0x0
0000000000007809         push       qword [rbp+var_350]
000000000000780f         push       qword [rbp+var_358]
0000000000007815         push       0x0
0000000000007817         mov        byte [rbp+var_2F8], al
000000000000781d         call       copy_internal                               ; copy_internal
0000000000007822         and        r12d, eax
0000000000007825         movzx      eax, byte [rbp+var_2F9]
000000000000782c         add        rsp, 0x20
0000000000007830         or         byte [r13], al
0000000000007834         mov        rdi, r14
0000000000007837         call       sub_2c80                                    ; sub_2c80
000000000000783c         mov        rdi, rbx
000000000000783f         call       sub_2c80                                    ; sub_2c80
0000000000007844         cmp        byte [rbp+var_2F9], 0x0
000000000000784b         je         loc_7790

                     loc_7851:
0000000000007851         movzx      r14d, byte [rbp+var_370]                    ; CODE XREF=copy_internal+7790
0000000000007859         mov        rbx, qword [rbp+var_378]
0000000000007860         mov        r13d, dword [rbp+var_380]

                     loc_7867:
0000000000007867         mov        rdi, qword [rbp+var_368]                    ; CODE XREF=copy_internal+13090
000000000000786e         call       sub_2c80                                    ; sub_2c80
0000000000007873         movzx      ecx, byte [rbp+var_315]
000000000000787a         mov        rax, qword [rbp+var_338]
0000000000007881         mov        byte [rax], cl

                     loc_7883:
0000000000007883         test       r13b, r13b                                  ; CODE XREF=copy_internal+9541, copy_internal+11355
0000000000007886         jne        loc_7e62

000000000000788c         movzx      eax, byte [rbp+var_330]
0000000000007893         mov        byte [rbp+var_320], 0x0
000000000000789a         mov        byte [rbp+var_315], al
00000000000078a0         jmp        loc_5f5a
00000000000078a5         align      8

                     loc_78a8:
00000000000078a8         cmp        byte [rbx+0x18], 0x0                        ; CODE XREF=copy_internal+3272
00000000000078ac         je         loc_7cbb

00000000000078b2         mov        r15d, dword [rbx]
00000000000078b5         test       r15d, r15d
00000000000078b8         je         loc_7cbb

00000000000078be         test       r13b, r13b
00000000000078c1         jne        loc_661a

                     loc_78c7:
00000000000078c7         mov        edx, dword [rbp+var_268]                    ; CODE XREF=copy_internal+3304, copy_internal+4841
00000000000078cd         and        edx, 0xf000
00000000000078d3         cmp        edx, 0x4000
00000000000078d9         je         loc_7e96

                     loc_78df:
00000000000078df         mov        rdi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+8655, copy_internal+9577
00000000000078e6         mov        byte [rbp+var_358], r9b
00000000000078ed         mov        byte [rbp+var_350], r8b
00000000000078f4         call       last_component                              ; last_component
00000000000078f9         cmp        byte [rax], 0x2e
00000000000078fc         mov        r14, rax
00000000000078ff         movzx      r8d, byte [rbp+var_350]
0000000000007907         movzx      r9d, byte [rbp+var_358]
000000000000790f         jne        loc_669d

0000000000007915         mov        eax, 0x1
000000000000791a         jmp        loc_6662
000000000000791f         align      32

                     loc_7920:
0000000000007920         mov        rsi, qword [rbp+var_358]                    ; CODE XREF=copy_internal+4256
0000000000007927         mov        rdi, qword [rbp+var_308]
000000000000792e         call       same_name                                   ; same_name
0000000000007933         test       al, al
0000000000007935         jne        loc_800a

000000000000793b         mov        eax, dword [rbx+4]
000000000000793e         cmp        eax, 0x4
0000000000007941         je         loc_6ec0

0000000000007947         cmp        eax, 0x3
000000000000794a         jne        loc_7955

000000000000794c         test       r13b, r13b
000000000000794f         jne        loc_6ec0

                     loc_7955:
0000000000007955         mov        rdx, qword [rbp+var_358]                    ; CODE XREF=copy_internal+8202
000000000000795c         mov        esi, 0x4
0000000000007961         mov        edi, 0x1
0000000000007966         call       quotearg_n_style                            ; quotearg_n_style
000000000000796b         mov        rdx, qword [rbp+var_308]
0000000000007972         xor        edi, edi
0000000000007974         mov        esi, 0x4
0000000000007979         mov        r13, rax
000000000000797c         call       quotearg_n_style                            ; quotearg_n_style
0000000000007981         lea        rsi, qword [aWillNotCreateH]                ; argument "msgid" for method j_dcgettext, "will not create hard link %s to directory %s"
0000000000007988         mov        r12, rax
000000000000798b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000798d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007992         call       j_dcgettext                                 ; dcgettext
0000000000007997         mov        r8, r13
000000000000799a         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000799d         mov        rcx, r12
00000000000079a0         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000079a2         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000079a4         xor        eax, eax
00000000000079a6         call       j_error                                     ; error
00000000000079ab         jmp        loc_6a46

                     loc_79b0:
00000000000079b0         cmp        byte [rbx+0x17], 0x0                        ; CODE XREF=copy_internal+1173
00000000000079b4         je         loc_6a58

00000000000079ba         mov        qword [rbp+var_358], 0x0
00000000000079c5         jmp        loc_6a93
00000000000079ca         align      16

                     loc_79d0:
00000000000079d0         mov        eax, dword [rbp+var_268]                    ; CODE XREF=copy_internal+6287, copy_internal+6308
00000000000079d6         xor        esi, esi
00000000000079d8         cmp        dword [rbx+4], 0x2
00000000000079dc         mov        rdi, qword [rbp+var_310]
00000000000079e3         mov        dword [rbp+var_340], eax
00000000000079e9         movzx      eax, byte [rbx+0x23]
00000000000079ed         sete       sil
00000000000079f1         shl        esi, 0x11
00000000000079f4         mov        byte [rbp+var_338], al
00000000000079fa         xor        eax, eax
00000000000079fc         call       open_safer                                  ; open_safer
0000000000007a01         test       eax, eax
0000000000007a03         mov        dword [rbp+var_320], eax
0000000000007a09         js         loc_810b

0000000000007a0f         mov        esi, dword [rbp+var_320]                    ; argument "__fildes" for method j___fxstat
0000000000007a15         lea        rdx, qword [rbp+var_160]                    ; argument "__stat_buf" for method j___fxstat
0000000000007a1c         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000007a21         call       j___fxstat                                  ; __fxstat
0000000000007a26         test       eax, eax
0000000000007a28         jne        loc_8347

0000000000007a2e         mov        rax, qword [rbp+var_158]
0000000000007a35         cmp        qword [rbp+var_278], rax
0000000000007a3c         jne        loc_7a52

0000000000007a3e         mov        rax, qword [rbp+var_160]
0000000000007a45         cmp        qword [rbp+var_280], rax
0000000000007a4c         je         loc_8776

                     loc_7a52:
0000000000007a52         mov        rsi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+8444
0000000000007a59         mov        edi, 0x4
0000000000007a5e         call       quotearg_style                              ; quotearg_style
0000000000007a63         lea        rsi, qword [aSkippingFileSA]                ; argument "msgid" for method j_dcgettext, "skipping file %s, as it was replaced while being copied"
0000000000007a6a         mov        r12, rax
0000000000007a6d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007a72         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007a74         call       j_dcgettext                                 ; dcgettext
0000000000007a79         mov        rcx, r12
0000000000007a7c         mov        rdx, rax
0000000000007a7f         xor        esi, esi

                     loc_7a81:
0000000000007a81         xor        edi, edi                                    ; argument "__status" for method j_error, CODE XREF=copy_internal+10822, copy_internal+16319
0000000000007a83         xor        eax, eax
0000000000007a85         call       j_error                                     ; error
0000000000007a8a         xor        r8d, r8d
0000000000007a8d         mov        qword [rbp+var_330], 0x0

                     loc_7a98:
0000000000007a98         mov        edi, dword [rbp+var_320]                    ; argument "__fd" for method j_close, CODE XREF=copy_internal+12977, copy_internal+13058, copy_internal+13274, copy_internal+13502, copy_internal+16473
0000000000007a9e         mov        byte [rbp+var_328], r8b
0000000000007aa5         call       j_close                                     ; close
0000000000007aaa         test       eax, eax
0000000000007aac         movzx      r8d, byte [rbp+var_328]
0000000000007ab4         js         loc_8507

0000000000007aba         mov        rdi, qword [rbp+var_330]
0000000000007ac1         mov        byte [rbp+var_328], r8b
0000000000007ac8         call       sub_2c80                                    ; sub_2c80
0000000000007acd         movzx      r8d, byte [rbp+var_328]
0000000000007ad5         mov        byte [rbp+var_320], 0x0
0000000000007adc         test       r8b, r8b
0000000000007adf         jne        loc_5ebf

0000000000007ae5         jmp        loc_68d0
0000000000007aea         align      16

                     loc_7af0:
0000000000007af0         mov        eax, dword [rbp+var_268]                    ; CODE XREF=copy_internal+6137
0000000000007af6         and        eax, 0xf000
0000000000007afb         cmp        eax, 0x4000
0000000000007b00         je         loc_7e90

                     loc_7b06:
0000000000007b06         test       r15d, r15d                                  ; CODE XREF=copy_internal+9568
0000000000007b09         je         loc_7167

0000000000007b0f         jmp        loc_78df
0000000000007b14         align      8

                     loc_7b18:
0000000000007b18         lea        rdx, qword [rbp+var_160]                    ; argument "__stat_buf" for method j___xstat, CODE XREF=copy_internal+3830
0000000000007b1f         mov        rsi, r8                                     ; argument "__filename" for method j___xstat
0000000000007b22         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000007b27         call       j___xstat                                   ; __xstat
0000000000007b2c         test       eax, eax
0000000000007b2e         jne        loc_683c

0000000000007b34         lea        rdx, qword [rbp+var_D0]                     ; argument "__stat_buf" for method j___xstat
0000000000007b3b         mov        rsi, r12                                    ; argument "__filename" for method j___xstat
0000000000007b3e         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000007b43         call       j___xstat                                   ; __xstat
0000000000007b48         test       eax, eax
0000000000007b4a         jne        loc_683c

0000000000007b50         mov        rax, qword [rbp+var_C8]
0000000000007b57         cmp        qword [rbp+var_158], rax
0000000000007b5e         je         loc_8c67

                     loc_7b64:
0000000000007b64         mov        rdi, r12                                    ; CODE XREF=copy_internal+13109
0000000000007b67         call       sub_2c80                                    ; sub_2c80
0000000000007b6c         mov        rdx, qword [rbp+var_308]
0000000000007b73         mov        esi, 0x3
0000000000007b78         xor        edi, edi
0000000000007b7a         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000007b7f         mov        edx, 0x5
0000000000007b84         mov        r12, rax
0000000000007b87         lea        rsi, qword [aSCanMakeRelati]                ; "%s: can make relative symbolic links only in current directory"
0000000000007b8e         jmp        loc_64e8

                     loc_7b93:
0000000000007b93         mov        eax, dword [rbp+var_1D8]                    ; CODE XREF=copy_internal+5548
0000000000007b99         lea        rdx, qword [rbp+var_280]
0000000000007ba0         and        eax, 0xf000
0000000000007ba5         cmp        eax, 0xa000
0000000000007baa         jne        loc_6ef2

0000000000007bb0         mov        rsi, qword [rbp+var_308]
0000000000007bb7         mov        rdi, qword [rbp+var_310]
0000000000007bbe         mov        byte [rbp+var_358], r9b
0000000000007bc5         mov        byte [rbp+var_350], r8b
0000000000007bcc         call       same_name                                   ; same_name
0000000000007bd1         test       al, al
0000000000007bd3         jne        loc_6f40

0000000000007bd9         mov        edi, dword [rbx]
0000000000007bdb         movzx      r8d, byte [rbp+var_350]
0000000000007be3         movzx      r9d, byte [rbp+var_358]
0000000000007beb         test       edi, edi
0000000000007bed         jne        loc_6d8e

0000000000007bf3         test       r15d, r15d
0000000000007bf6         je         loc_6d8e

0000000000007bfc         movzx      r12d, byte [rbx+0x18]
0000000000007c01         mov        eax, 0x1
0000000000007c06         xor        r12d, 0x1
0000000000007c0a         jmp        loc_70bc
0000000000007c0f         align      16

                     loc_7c10:
0000000000007c10         mov        r15d, eax                                   ; CODE XREF=copy_internal+1436
0000000000007c13         movabs     rax, 0xff000000ff00
0000000000007c1d         test       qword [rbx+0x20], rax
0000000000007c21         je         loc_5ee2

0000000000007c27         movzx      esi, byte [rbx+0x25]
0000000000007c2b         mov        rdi, qword [rbp+var_308]
0000000000007c32         xor        edx, edx
0000000000007c34         mov        rcx, rbx
0000000000007c37         mov        byte [rbp+var_328], r8b
0000000000007c3e         call       set_file_security_ctx                       ; set_file_security_ctx
0000000000007c43         test       al, al
0000000000007c45         mov        r15d, eax
0000000000007c48         movzx      r8d, byte [rbp+var_328]
0000000000007c50         jne        loc_5ee2

0000000000007c56         movzx      r14d, byte [rbx+0x26]
0000000000007c5b         test       r14b, r14b
0000000000007c5e         jne        loc_68d0

0000000000007c64         mov        r15d, r12d
0000000000007c67         jmp        loc_5ee2
0000000000007c6c         align      16

                     loc_7c70:
0000000000007c70         lea        rsi, qword [aCopied]                        ; argument "msgid" for method j_dcgettext, "copied ", CODE XREF=copy_internal+2539
0000000000007c77         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007c7c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007c7e         call       j_dcgettext                                 ; dcgettext
0000000000007c83         mov        edi, 0x1
0000000000007c88         mov        rsi, rax
0000000000007c8b         xor        eax, eax
0000000000007c8d         call       j___printf_chk                              ; __printf_chk
0000000000007c92         mov        rdx, qword [rbp+var_350]
0000000000007c99         mov        rsi, qword [rbp+var_308]
0000000000007ca0         mov        rdi, qword [rbp+var_310]
0000000000007ca7         call       emit_verbose                                ; emit_verbose
0000000000007cac         mov        dword [rbp+var_320], 0x1
0000000000007cb6         jmp        loc_5df0

                     loc_7cbb:
0000000000007cbb         mov        rdx, qword [rbp+var_310]                    ; CODE XREF=copy_internal+8044, copy_internal+8056
0000000000007cc2         mov        esi, 0x4
0000000000007cc7         mov        edi, 0x1
0000000000007ccc         call       quotearg_n_style                            ; quotearg_n_style
0000000000007cd1         mov        rdx, qword [rbp+var_308]
0000000000007cd8         mov        esi, 0x4
0000000000007cdd         xor        edi, edi
0000000000007cdf         mov        r12, rax
0000000000007ce2         call       quotearg_n_style                            ; quotearg_n_style
0000000000007ce7         mov        edx, 0x5
0000000000007cec         mov        rbx, rax
0000000000007cef         lea        rsi, qword [aCannotOverwrit_16010]          ; "cannot overwrite non-directory %s with directory %s"
0000000000007cf6         jmp        loc_6f7b

                     loc_7cfb:
0000000000007cfb         cmp        byte [rbx+0x15], 0x0                        ; CODE XREF=copy_internal+6177
0000000000007cff         jne        loc_7d19

0000000000007d01         cmp        byte [rbx+0x22], 0x0
0000000000007d05         je         loc_80e6

0000000000007d0b         cmp        qword [rbp+var_1E0], 0x1
0000000000007d13         jbe        loc_80e6

                     loc_7d19:
0000000000007d19         mov        r14, qword [rbp+var_308]                    ; CODE XREF=copy_internal+9151, copy_internal+10176
0000000000007d20         mov        byte [rbp+var_350], r9b
0000000000007d27         mov        rdi, r14                                    ; argument "__name" for method j_unlink
0000000000007d2a         call       j_unlink                                    ; unlink
0000000000007d2f         test       eax, eax
0000000000007d31         movzx      r9d, byte [rbp+var_350]
0000000000007d39         je         loc_80b3

0000000000007d3f         call       j___errno_location                          ; __errno_location
0000000000007d44         cmp        dword [rax], 0x2
0000000000007d47         mov        r15, rax
0000000000007d4a         movzx      r9d, byte [rbp+var_350]
0000000000007d52         je         loc_80b3

0000000000007d58         mov        rsi, r14
0000000000007d5b         mov        edi, 0x4
0000000000007d60         call       quotearg_style                              ; quotearg_style
0000000000007d65         lea        rsi, qword [aCannotRemoveS]                 ; argument "msgid" for method j_dcgettext, "cannot remove %s"
0000000000007d6c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007d6e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007d73         mov        rbx, rax
0000000000007d76         call       j_dcgettext                                 ; dcgettext
0000000000007d7b         mov        esi, dword [r15]                            ; argument "__errnum" for method j_error
0000000000007d7e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000007d81         mov        rcx, rbx
0000000000007d84         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000007d86         xor        eax, eax
0000000000007d88         call       j_error                                     ; error
0000000000007d8d         jmp        loc_6186

                     loc_7d92:
0000000000007d92         lea        rax, qword [rbp+var_D0]                     ; CODE XREF=copy_internal+5192
0000000000007d99         mov        rsi, qword [rbp+var_310]                    ; argument "__filename" for method j___lxstat
0000000000007da0         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000007da5         mov        rdx, rax                                    ; argument "__stat_buf" for method j___lxstat
0000000000007da8         mov        qword [rbp+var_368], rax
0000000000007daf         call       j___lxstat                                  ; __lxstat
0000000000007db4         test       eax, eax
0000000000007db6         movzx      r8d, byte [rbp+var_350]
0000000000007dbe         movzx      r9d, byte [rbp+var_358]
0000000000007dc6         jne        loc_6d8e

0000000000007dcc         xor        ecx, ecx
0000000000007dce         mov        rax, qword [rbp+var_158]
0000000000007dd5         cmp        qword [rbp+var_C8], rax
0000000000007ddc         jne        loc_7def

0000000000007dde         mov        rax, qword [rbp+var_160]
0000000000007de5         cmp        qword [rbp+var_D0], rax
0000000000007dec         sete       cl

                     loc_7def:
0000000000007def         mov        eax, dword [rbp+var_B8]                     ; CODE XREF=copy_internal+9372
0000000000007df5         mov        rdx, qword [rbp+var_368]
0000000000007dfc         and        eax, 0xf000
0000000000007e01         cmp        eax, 0xa000
0000000000007e06         jne        loc_6ef2

0000000000007e0c         mov        eax, dword [rbp+var_148]
0000000000007e12         and        eax, 0xf000
0000000000007e17         cmp        eax, 0xa000
0000000000007e1c         jne        loc_6ef2

0000000000007e22         cmp        byte [rbx+0x15], 0x0
0000000000007e26         je         loc_6ef2

0000000000007e2c         jmp        loc_6d8e
0000000000007e31         align      8

                     loc_7e38:
0000000000007e38         movabs     rax, 0xff000000ff00                         ; CODE XREF=copy_internal+5275
0000000000007e42         test       qword [rbx+0x20], rax
0000000000007e46         jne        loc_8400

                     loc_7e4c:
0000000000007e4c         mov        byte [rbp+var_330], 0x0                     ; CODE XREF=copy_internal+10967, copy_internal+10983
0000000000007e53         mov        dword [rbp+var_35C], 0x0
0000000000007e5d         jmp        loc_7688

                     loc_7e62:
0000000000007e62         mov        byte [rbp+var_315], r12b                    ; CODE XREF=copy_internal+8006
0000000000007e69         xor        r15d, r15d
0000000000007e6c         xor        r8d, r8d
0000000000007e6f         mov        byte [rbp+var_320], 0x0
0000000000007e76         jmp        loc_5ef4

                     loc_7e7b:
0000000000007e7b         mov        rcx, qword [rbp+var_280]                    ; CODE XREF=copy_internal+7514
0000000000007e82         cmp        qword [rax], rcx
0000000000007e85         jne        loc_7883

0000000000007e8b         jmp        loc_76a0

                     loc_7e90:
0000000000007e90         mov        eax, dword [rbp+var_1D8]                    ; CODE XREF=copy_internal+8640

                     loc_7e96:
0000000000007e96         and        eax, 0xf000                                 ; CODE XREF=copy_internal+8089
0000000000007e9b         cmp        eax, 0x4000
0000000000007ea0         je         loc_7b06

0000000000007ea6         test       r15d, r15d
0000000000007ea9         jne        loc_78df

0000000000007eaf         mov        rdx, qword [rbp+var_308]
0000000000007eb6         mov        esi, 0x3
0000000000007ebb         xor        edi, edi
0000000000007ebd         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000007ec2         mov        rdx, qword [rbp+var_310]
0000000000007ec9         mov        esi, 0x3
0000000000007ece         xor        edi, edi
0000000000007ed0         mov        r12, rax
0000000000007ed3         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000007ed8         mov        edx, 0x5
0000000000007edd         mov        rbx, rax
0000000000007ee0         lea        rsi, qword [aCannotMoveDire]                ; "cannot move directory onto non-directory: %s -> %s"
0000000000007ee7         jmp        loc_6f7b

                     loc_7eec:
0000000000007eec         mov        edx, dword [rbp+var_35C]                    ; CODE XREF=copy_internal+6338, copy_internal+6351
0000000000007ef2         mov        rax, qword [rbp+var_258]
0000000000007ef9         lea        rcx, qword [rbp+var_2F0]                    ; argument "__dev" for method j___xmknod
0000000000007f00         mov        rsi, qword [rbp+var_308]                    ; argument "__path" for method j___xmknod
0000000000007f07         xor        edi, edi                                    ; argument "__ver" for method j___xmknod
0000000000007f09         mov        byte [rbp+var_328], r8b
0000000000007f10         not        edx
0000000000007f12         and        edx, dword [rbp+var_314]                    ; argument "__mode" for method j___xmknod
0000000000007f18         mov        qword [rbp+var_2F0], rax
0000000000007f1f         call       j___xmknod                                  ; __xmknod
0000000000007f24         test       eax, eax
0000000000007f26         mov        byte [rbp+var_320], 0x0
0000000000007f2d         movzx      r8d, byte [rbp+var_328]
0000000000007f35         je         loc_5ebf

0000000000007f3b         mov        rsi, qword [rbp+var_308]
0000000000007f42         mov        edi, 0x4
0000000000007f47         call       quotearg_style                              ; quotearg_style
0000000000007f4c         mov        edx, 0x5
0000000000007f51         mov        r13, rax
0000000000007f54         lea        rsi, qword [aCannotCreateSp]                ; "cannot create special file %s"
0000000000007f5b         jmp        loc_6e1f

                     loc_7f60:
0000000000007f60         call       utimens                                     ; utimens, CODE XREF=copy_internal+1649
0000000000007f65         test       eax, eax
0000000000007f67         je         loc_6025

0000000000007f6d         jmp        loc_5fca

                     loc_7f72:
0000000000007f72         mov        rdi, qword [rbx+0x40]                       ; CODE XREF=copy_internal+1511
0000000000007f76         mov        rsi, qword [rbp+var_308]
0000000000007f7d         mov        rdx, r12
0000000000007f80         call       record_file                                 ; record_file
0000000000007f85         movzx      r8d, byte [rbp+var_328]
0000000000007f8d         jmp        loc_5f2d

                     loc_7f92:
0000000000007f92         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+5566
0000000000007f99         mov        rdi, qword [rbp+var_310]
0000000000007fa0         mov        byte [rbp+var_358], r9b
0000000000007fa7         mov        byte [rbp+var_350], r8b
0000000000007fae         call       same_name                                   ; same_name
0000000000007fb3         xor        eax, 0x1
0000000000007fb6         movzx      r8d, byte [rbp+var_350]
0000000000007fbe         movzx      r9d, byte [rbp+var_358]
0000000000007fc6         mov        r12d, eax
0000000000007fc9         xor        eax, eax
0000000000007fcb         jmp        loc_70bc

                     loc_7fd0:
0000000000007fd0         movzx      r8d, byte [rbp+var_350]                     ; CODE XREF=copy_internal+4734
0000000000007fd8         movzx      r9d, byte [rbp+var_358]
0000000000007fe0         jmp        loc_65d0

                     loc_7fe5:
0000000000007fe5         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+7322
0000000000007fec         mov        edi, 0x4
0000000000007ff1         call       quotearg_style                              ; quotearg_style
0000000000007ff6         mov        edx, 0x5
0000000000007ffb         mov        r13, rax
0000000000007ffe         lea        rsi, qword [aCannotStatS]                   ; "cannot stat %s"
0000000000008005         jmp        loc_6e1f

                     loc_800a:
000000000000800a         mov        rsi, qword [top_level_src_name]             ; top_level_src_name, CODE XREF=copy_internal+8181
0000000000008011         mov        edi, 0x4
0000000000008016         call       quotearg_style                              ; quotearg_style
000000000000801b         lea        rsi, qword [aWarningSourceD]                ; argument "msgid" for method j_dcgettext, "warning: source directory %s specified more than once"
0000000000008022         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008024         mov        r12, rax
0000000000008027         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000802c         call       j_dcgettext                                 ; dcgettext
0000000000008031         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000008033         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000008036         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000008038         xor        eax, eax
000000000000803a         mov        rcx, r12
000000000000803d         call       j_error                                     ; error
0000000000008042         cmp        byte [rbx+0x18], 0x0
0000000000008046         jne        loc_6bc4

000000000000804c         jmp        loc_6180

                     loc_8051:
0000000000008051         mov        byte [rbp+var_350], r9b                     ; CODE XREF=copy_internal+3569
0000000000008058         call       j___errno_location                          ; __errno_location
000000000000805d         cmp        dword [rax], 0x2
0000000000008060         mov        r12, rax
0000000000008063         movzx      r9d, byte [rbp+var_350]
000000000000806b         je         loc_84d1

0000000000008071         mov        rsi, qword [rbp+var_308]
0000000000008078         mov        edi, 0x4
000000000000807d         call       quotearg_style                              ; quotearg_style
0000000000008082         lea        rsi, qword [aCannotBackupS]                 ; argument "msgid" for method j_dcgettext, "cannot backup %s"
0000000000008089         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000808e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008090         mov        rbx, rax
0000000000008093         call       j_dcgettext                                 ; dcgettext
0000000000008098         mov        esi, dword [r12]                            ; argument "__errnum" for method j_error
000000000000809c         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000809f         mov        rcx, rbx
00000000000080a2         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000080a4         xor        eax, eax
00000000000080a6         xor        r12d, r12d
00000000000080a9         call       j_error                                     ; error
00000000000080ae         jmp        loc_6186

                     loc_80b3:
00000000000080b3         movzx      r14d, byte [rbx+0x2e]                       ; CODE XREF=copy_internal+9209, copy_internal+9234
00000000000080b8         test       r14b, r14b
00000000000080bb         jne        loc_868c

00000000000080c1         test       r13b, r13b
00000000000080c4         jne        loc_8668

00000000000080ca         mov        qword [rbp+var_350], 0x0
00000000000080d5         mov        r14d, 0x1
00000000000080db         mov        r15d, 0x11
00000000000080e1         jmp        loc_5da9

                     loc_80e6:
00000000000080e6         cmp        dword [rbx+4], 0x2                          ; CODE XREF=copy_internal+9157, copy_internal+9171
00000000000080ea         jne        loc_7167

00000000000080f0         mov        eax, dword [rbp+var_268]
00000000000080f6         and        eax, 0xf000
00000000000080fb         cmp        eax, 0x8000
0000000000008100         jne        loc_7d19

0000000000008106         jmp        loc_7167

                     loc_810b:
000000000000810b         mov        rsi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+8393
0000000000008112         mov        edi, 0x4
0000000000008117         call       quotearg_style                              ; quotearg_style
000000000000811c         mov        edx, 0x5
0000000000008121         mov        r13, rax
0000000000008124         lea        rsi, qword [aCannotOpenSFor]                ; "cannot open %s for reading"
000000000000812b         jmp        loc_6e1f

                     loc_8130:
0000000000008130         mov        r8d, dword [rbp+var_314]                    ; CODE XREF=copy_internal+1877
0000000000008137         mov        rdx, qword [rbp+var_308]
000000000000813e         mov        ecx, 0xffffffff
0000000000008143         mov        rdi, qword [rbp+var_310]
000000000000814a         mov        esi, ecx
000000000000814c         call       copy_acl                                    ; copy_acl
0000000000008151         test       eax, eax
0000000000008153         jne        loc_612a

0000000000008159         jmp        loc_6186

                     loc_815e:
000000000000815e         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=copy_internal+3523
0000000000008161         mov        rdi, r14                                    ; argument "__s1" for method j_memcmp
0000000000008164         mov        byte [rbp+var_350], r9b
000000000000816b         mov        qword [rbp+var_358], r8
0000000000008172         call       j_memcmp                                    ; memcmp
0000000000008177         test       eax, eax
0000000000008179         movzx      r9d, byte [rbp+var_350]
0000000000008181         jne        loc_6709

0000000000008187         lea        rdi, qword [r14+r12]                        ; argument "__s1" for method j_strcmp
000000000000818b         mov        rsi, r15                                    ; argument "__s2" for method j_strcmp
000000000000818e         call       j_strcmp                                    ; strcmp
0000000000008193         test       eax, eax
0000000000008195         movzx      r9d, byte [rbp+var_350]
000000000000819d         mov        r8, qword [rbp+var_358]
00000000000081a4         jne        loc_6709

00000000000081aa         mov        rdi, qword [rbp+var_308]
00000000000081b1         or         rcx, 0xffffffffffffffff
00000000000081b5         repne scasb al, byte [rdi]
00000000000081b7         mov        rax, rcx
00000000000081ba         not        rax
00000000000081bd         lea        r14, qword [rax-1]
00000000000081c1         lea        rdi, qword [r14+r8+1]
00000000000081c6         call       xmalloc                                     ; xmalloc
00000000000081cb         mov        r15, qword [simple_backup_suffix]           ; simple_backup_suffix
00000000000081d2         mov        rsi, qword [rbp+var_308]                    ; argument "__src" for method j_mempcpy
00000000000081d9         mov        rdx, r14                                    ; argument "__n" for method j_mempcpy
00000000000081dc         mov        rdi, rax                                    ; argument "__dest" for method j_mempcpy
00000000000081df         mov        r12, rax
00000000000081e2         call       j_mempcpy                                   ; mempcpy
00000000000081e7         mov        rsi, r15                                    ; argument "__src" for method j_strcpy
00000000000081ea         mov        rdi, rax                                    ; argument "__dest" for method j_strcpy
00000000000081ed         call       j_strcpy                                    ; strcpy
00000000000081f2         lea        rdx, qword [rbp+var_D0]                     ; argument "__stat_buf" for method j___xstat
00000000000081f9         mov        rsi, r12                                    ; argument "__filename" for method j___xstat
00000000000081fc         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000008201         call       j___xstat                                   ; __xstat
0000000000008206         mov        rdi, r12
0000000000008209         mov        r15d, eax
000000000000820c         call       sub_2c80                                    ; sub_2c80
0000000000008211         test       r15d, r15d
0000000000008214         movzx      r9d, byte [rbp+var_350]
000000000000821c         jne        loc_6709

0000000000008222         mov        rax, qword [rbp+var_C8]
0000000000008229         cmp        qword [rbp+var_278], rax
0000000000008230         jne        loc_6709

0000000000008236         mov        rax, qword [rbp+var_D0]
000000000000823d         cmp        qword [rbp+var_280], rax
0000000000008244         jne        loc_6709

000000000000824a         cmp        byte [rbx+0x18], 0x0
000000000000824e         je         loc_84b6

0000000000008254         lea        rsi, qword [aBackingUpSMigh]                ; argument "msgid" for method j_dcgettext, "backing up %s might destroy source;  %s not moved"
000000000000825b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008260         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008262         call       j_dcgettext                                 ; dcgettext
0000000000008267         mov        rbx, rax

                     loc_826a:
000000000000826a         mov        rdx, qword [rbp+var_310]                    ; CODE XREF=copy_internal+11148
0000000000008271         mov        esi, 0x4
0000000000008276         mov        edi, 0x1
000000000000827b         call       quotearg_n_style                            ; quotearg_n_style
0000000000008280         mov        rdx, qword [rbp+var_308]
0000000000008287         mov        r12, rax
000000000000828a         mov        esi, 0x4
000000000000828f         xor        edi, edi
0000000000008291         call       quotearg_n_style                            ; quotearg_n_style
0000000000008296         mov        r8, r12
0000000000008299         mov        rcx, rax
000000000000829c         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000829f         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000082a1         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000082a3         xor        eax, eax
00000000000082a5         call       j_error                                     ; error
00000000000082aa         xor        r12d, r12d
00000000000082ad         jmp        loc_6186

                     loc_82b2:
00000000000082b2         mov        r12d, dword [rbp+var_35C]                   ; CODE XREF=copy_internal+6321
00000000000082b9         mov        rsi, qword [rbp+var_308]                    ; argument "__path" for method j___xmknod
00000000000082c0         lea        rcx, qword [rbp+var_2F8]                    ; argument "__dev" for method j___xmknod
00000000000082c7         xor        edi, edi                                    ; argument "__ver" for method j___xmknod
00000000000082c9         mov        byte [rbp+var_320], r8b
00000000000082d0         mov        qword [rbp+var_2F8], 0x0
00000000000082db         not        r12d
00000000000082de         and        r12d, dword [rbp+var_314]
00000000000082e5         mov        edx, r12d                                   ; argument "__mode" for method j___xmknod
00000000000082e8         call       j___xmknod                                  ; __xmknod
00000000000082ed         test       eax, eax
00000000000082ef         movzx      r8d, byte [rbp+var_320]
00000000000082f7         je         loc_5ebf

00000000000082fd         mov        rdi, qword [rbp+var_308]                    ; argument "__path" for method j_mkfifo
0000000000008304         mov        esi, r12d
0000000000008307         and        esi, 0xffffefff                             ; argument "__mode" for method j_mkfifo
000000000000830d         call       j_mkfifo                                    ; mkfifo
0000000000008312         test       eax, eax
0000000000008314         movzx      r8d, byte [rbp+var_320]
000000000000831c         je         loc_5ebf

0000000000008322         mov        rsi, qword [rbp+var_308]
0000000000008329         mov        edi, 0x4
000000000000832e         call       quotearg_style                              ; quotearg_style
0000000000008333         mov        edx, 0x5
0000000000008338         mov        r13, rax
000000000000833b         lea        rsi, qword [aCannotCreateFi]                ; "cannot create fifo %s"
0000000000008342         jmp        loc_6e1f

                     loc_8347:
0000000000008347         mov        rsi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+8424
000000000000834e         mov        edi, 0x4
0000000000008353         call       quotearg_style                              ; quotearg_style
0000000000008358         lea        rsi, qword [aCannotFstatS]                  ; argument "msgid" for method j_dcgettext, "cannot fstat %s"
000000000000835f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008364         mov        r12, rax
0000000000008367         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008369         call       j_dcgettext                                 ; dcgettext
000000000000836e         mov        qword [rbp+var_328], rax
0000000000008375         call       j___errno_location                          ; __errno_location
000000000000837a         mov        rcx, r12
000000000000837d         mov        rdx, qword [rbp+var_328]
0000000000008384         mov        esi, dword [rax]
0000000000008386         jmp        loc_7a81

                     loc_838b:
000000000000838b         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+5775
0000000000008392         mov        rdi, qword [rbp+var_310]
0000000000008399         mov        byte [rbp+var_35C], r9b
00000000000083a0         mov        byte [rbp+var_358], r8b
00000000000083a7         mov        qword [rbp+var_350], rdx
00000000000083ae         call       same_name                                   ; same_name
00000000000083b3         test       al, al
00000000000083b5         mov        rdx, qword [rbp+var_350]
00000000000083bc         movzx      r8d, byte [rbp+var_358]
00000000000083c4         movzx      r9d, byte [rbp+var_35C]
00000000000083cc         je         loc_8c47

00000000000083d2         mov        eax, dword [rdx+0x18]
00000000000083d5         and        eax, 0xf000
00000000000083da         cmp        eax, 0xa000
00000000000083df         je         loc_700c

                     loc_83e5:
00000000000083e5         mov        eax, dword [r12+0x18]                       ; CODE XREF=copy_internal+6844
00000000000083ea         and        eax, 0xf000
00000000000083ef         cmp        eax, 0xa000
00000000000083f4         je         loc_700c

00000000000083fa         jmp        loc_6fe4
00000000000083ff         align      1024

                     loc_8400:
0000000000008400         movzx      esi, byte [rbx+0x25]                        ; CODE XREF=copy_internal+9478
0000000000008404         mov        rdi, qword [rbp+var_308]
000000000000840b         xor        edx, edx
000000000000840d         mov        rcx, rbx
0000000000008410         call       set_file_security_ctx                       ; set_file_security_ctx
0000000000008415         test       al, al
0000000000008417         jne        loc_7e4c

000000000000841d         cmp        byte [rbx+0x26], 0x0
0000000000008421         jne        loc_68d0

0000000000008427         jmp        loc_7e4c

                     loc_842c:
000000000000842c         mov        rdx, qword [rbp+var_1F0]                    ; CODE XREF=copy_internal+7410
0000000000008433         mov        rsi, qword [rbp+var_1E8]
000000000000843a         mov        rdi, qword [rbp+var_308]
0000000000008441         call       remember_copied                             ; remember_copied
0000000000008446         mov        rax, qword [rbp+var_338]
000000000000844d         mov        byte [rax], 0x1
0000000000008450         jmp        loc_7638

                     loc_8455:
0000000000008455         mov        rdx, qword [rbp+var_310]                    ; CODE XREF=copy_internal+6087
000000000000845c         mov        esi, 0x4
0000000000008461         mov        edi, 0x1
0000000000008466         call       quotearg_n_style                            ; quotearg_n_style
000000000000846b         mov        rdx, qword [rbp+var_308]
0000000000008472         mov        esi, 0x4
0000000000008477         xor        edi, edi
0000000000008479         mov        r12, rax
000000000000847c         call       quotearg_n_style                            ; quotearg_n_style
0000000000008481         mov        edx, 0x5
0000000000008486         mov        rbx, rax
0000000000008489         lea        rsi, qword [aWillNotOverwri]                ; "will not overwrite just-created %s with %s"
0000000000008490         jmp        loc_6f7b

                     loc_8495:
0000000000008495         mov        edx, dword [rbx+0x10]                       ; CODE XREF=copy_internal+1887

                     loc_8498:
0000000000008498         mov        rdi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+11825
000000000000849f         mov        esi, 0xffffffff
00000000000084a4         call       set_acl                                     ; set_acl
00000000000084a9         test       eax, eax
00000000000084ab         jne        loc_5c50

00000000000084b1         jmp        loc_6186

                     loc_84b6:
00000000000084b6         lea        rsi, qword [aBackingUpSMigh_16120]          ; argument "msgid" for method j_dcgettext, "backing up %s might destroy source;  %s not copied", CODE XREF=copy_internal+10510
00000000000084bd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000084c2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000084c4         call       j_dcgettext                                 ; dcgettext
00000000000084c9         mov        rbx, rax
00000000000084cc         jmp        loc_826a

                     loc_84d1:
00000000000084d1         mov        qword [rbp+var_350], 0x0                    ; CODE XREF=copy_internal+10027
00000000000084dc         mov        r14d, 0x1
00000000000084e2         mov        r15d, 0x11
00000000000084e8         jmp        loc_5cce

                     loc_84ed:
00000000000084ed         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+7426
00000000000084f4         mov        rdi, qword [rbp+var_310]
00000000000084fb         xor        edx, edx
00000000000084fd         call       emit_verbose                                ; emit_verbose
0000000000008502         jmp        loc_7688

                     loc_8507:
0000000000008507         mov        rsi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+8564
000000000000850e         mov        edi, 0x4
0000000000008513         call       quotearg_style                              ; quotearg_style
0000000000008518         lea        rsi, qword [aFailedToCloseS]                ; argument "msgid" for method j_dcgettext, "failed to close %s"
000000000000851f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008521         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008526         mov        r12, rax
0000000000008529         call       j_dcgettext                                 ; dcgettext
000000000000852e         mov        r13, rax
0000000000008531         call       j___errno_location                          ; __errno_location
0000000000008536         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000008538         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000853a         mov        rcx, r12
000000000000853d         mov        rdx, r13                                    ; argument "__format" for method j_error
0000000000008540         xor        eax, eax
0000000000008542         call       j_error                                     ; error
0000000000008547         mov        rdi, qword [rbp+var_330]
000000000000854e         call       sub_2c80                                    ; sub_2c80
0000000000008553         jmp        loc_68d0

                     loc_8558:
0000000000008558         mov        rsi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+7606
000000000000855f         mov        edi, 0x4
0000000000008564         call       quotearg_style                              ; quotearg_style
0000000000008569         lea        rsi, qword [aCannotAccessS]                 ; argument "msgid" for method j_dcgettext, "cannot access %s"
0000000000008570         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008575         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008577         mov        r12, rax
000000000000857a         call       j_dcgettext                                 ; dcgettext
000000000000857f         mov        r15, rax
0000000000008582         call       j___errno_location                          ; __errno_location
0000000000008587         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000008589         mov        rcx, r12
000000000000858c         mov        rdx, r15                                    ; argument "__format" for method j_error
000000000000858f         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000008591         xor        eax, eax
0000000000008593         xor        r12d, r12d
0000000000008596         call       j_error                                     ; error
000000000000859b         jmp        loc_7883

                     loc_85a0:
00000000000085a0         mov        rsi, qword [rbp+var_250]                    ; CODE XREF=copy_internal+6364
00000000000085a7         mov        rdi, qword [rbp+var_310]
00000000000085ae         call       areadlink_with_size                         ; areadlink_with_size
00000000000085b3         test       rax, rax
00000000000085b6         mov        r12, rax
00000000000085b9         je         loc_8e03

00000000000085bf         movzx      ecx, byte [rbx+0x16]
00000000000085c3         mov        rdx, qword [rbp+var_308]
00000000000085ca         mov        r8d, 0xffffffff
00000000000085d0         mov        esi, 0xffffff9c
00000000000085d5         mov        rdi, rax
00000000000085d8         call       force_symlinkat                             ; force_symlinkat
00000000000085dd         test       eax, eax
00000000000085df         mov        dword [rbp+var_320], eax
00000000000085e5         jle        loc_8e28

00000000000085eb         cmp        byte [rbx+0x2d], 0x1
00000000000085ef         jne        loc_85fa

00000000000085f1         test       r14b, r14b
00000000000085f4         je         loc_91d9

                     loc_85fa:
00000000000085fa         mov        rdi, r12                                    ; CODE XREF=copy_internal+11439, copy_internal+14505, copy_internal+14540, copy_internal+14561, copy_internal+16647
00000000000085fd         call       sub_2c80                                    ; sub_2c80
0000000000008602         mov        rsi, qword [rbp+var_308]
0000000000008609         mov        edi, 0x4
000000000000860e         call       quotearg_style                              ; quotearg_style
0000000000008613         lea        rsi, qword [aCannotCreateSy]                ; argument "msgid" for method j_dcgettext, "cannot create symbolic link %s"
000000000000861a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000861c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008621         mov        r12, rax
0000000000008624         call       j_dcgettext                                 ; dcgettext
0000000000008629         mov        esi, dword [rbp+var_320]                    ; argument "__errnum" for method j_error
000000000000862f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000008632         mov        rcx, r12
0000000000008635         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000008637         xor        eax, eax
0000000000008639         call       j_error                                     ; error
000000000000863e         jmp        loc_68d0

                     loc_8643:
0000000000008643         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+7394
000000000000864a         mov        edi, 0x4
000000000000864f         call       quotearg_style                              ; quotearg_style
0000000000008654         mov        edx, 0x5
0000000000008659         mov        r13, rax
000000000000865c         lea        rsi, qword [aSettingPermiss]                ; "setting permissions for %s"
0000000000008663         jmp        loc_6e1f

                     loc_8668:
0000000000008668         cmp        qword [rbx+0x40], 0x0                       ; CODE XREF=copy_internal+10116
000000000000866d         mov        r14d, r13d
0000000000008670         mov        qword [rbp+var_350], 0x0
000000000000867b         mov        r15d, 0x11
0000000000008681         jne        loc_5ce2

0000000000008687         jmp        loc_5da9

                     loc_868c:
000000000000868c         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+10107
0000000000008693         mov        edi, 0x4
0000000000008698         mov        byte [rbp+var_358], r9b
000000000000869f         mov        r15d, 0x11
00000000000086a5         call       quotearg_style                              ; quotearg_style
00000000000086aa         lea        rsi, qword [aRemovedSn]                     ; argument "msgid" for method j_dcgettext, "removed %s\\n"
00000000000086b1         mov        r12, rax
00000000000086b4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000086b9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000086bb         call       j_dcgettext                                 ; dcgettext
00000000000086c0         mov        rdx, r12
00000000000086c3         mov        rsi, rax
00000000000086c6         mov        edi, 0x1
00000000000086cb         xor        eax, eax
00000000000086cd         call       j___printf_chk                              ; __printf_chk
00000000000086d2         mov        qword [rbp+var_350], 0x0
00000000000086dd         movzx      r9d, byte [rbp+var_358]
00000000000086e5         jmp        loc_5cce

                     loc_86ea:
00000000000086ea         mov        eax, dword [rbp+var_1D0]                    ; CODE XREF=copy_internal+1788
00000000000086f0         cmp        dword [rbp+var_260], eax
00000000000086f6         jne        loc_6042

00000000000086fc         jmp        loc_6087

                     loc_8701:
0000000000008701         call       cached_umask                                ; cached_umask, CODE XREF=copy_internal+1911
0000000000008706         not        eax
0000000000008708         and        dword [rbp+var_35C], eax
000000000000870e         je         loc_60bd

0000000000008714         cmp        byte [rbp+var_315], 0x1
000000000000871b         je         loc_60ca

0000000000008721         test       r14b, r14b
0000000000008724         jne        loc_9097

                     loc_872a:
000000000000872a         mov        eax, dword [rbp+var_1D8]                    ; CODE XREF=copy_internal+14193
0000000000008730         mov        dword [rbp+var_38C], eax
0000000000008736         not        eax
0000000000008738         test       dword [rbp+var_35C], eax
000000000000873e         jne        loc_60ca

0000000000008744         jmp        loc_6186

                     loc_8749:
0000000000008749         mov        eax, dword [rbp+var_314]                    ; CODE XREF=copy_internal+1897
000000000000874f         mov        edx, 0x1b6
0000000000008754         mov        ebx, 0x1ff
0000000000008759         and        eax, 0x7000
000000000000875e         cmp        eax, 0x4000
0000000000008763         cmovne     ebx, edx
0000000000008766         call       cached_umask                                ; cached_umask
000000000000876b         not        eax
000000000000876d         mov        edx, eax
000000000000876f         and        edx, ebx
0000000000008771         jmp        loc_8498

                     loc_8776:
0000000000008776         and        r12d, 0x1ff                                 ; CODE XREF=copy_internal+8460
000000000000877d         test       r14b, r14b
0000000000008780         mov        dword [rbp+var_3A4], r12d
0000000000008787         jne        loc_8d20

000000000000878d         cmp        byte [rbx+0x23], 0x1
0000000000008791         mov        rdi, qword [rbp+var_308]
0000000000008798         sbb        esi, esi
000000000000879a         xor        eax, eax
000000000000879c         and        esi, 0xfffffe00
00000000000087a2         add        esi, 0x201
00000000000087a8         call       open_safer                                  ; open_safer
00000000000087ad         mov        dword [rbp+var_328], eax
00000000000087b3         call       j___errno_location                          ; __errno_location
00000000000087b8         mov        r12, rax
00000000000087bb         movabs     rax, 0xff000000ff00
00000000000087c5         test       qword [rbx+0x20], rax
00000000000087c9         jne        loc_9055

00000000000087cf         cmp        dword [rbp+var_328], 0x0
00000000000087d6         js         loc_9062

                     loc_87dc:
00000000000087dc         mov        dword [rbp+var_378], 0x0                    ; CODE XREF=copy_internal+14728, copy_internal+14755

                     loc_87e6:
00000000000087e6         lea        rax, qword [rbp+var_D0]                     ; CODE XREF=copy_internal+14691
00000000000087ed         mov        esi, dword [rbp+var_328]                    ; argument "__fildes" for method j___fxstat
00000000000087f3         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
00000000000087f8         mov        rdx, rax                                    ; argument "__stat_buf" for method j___fxstat
00000000000087fb         mov        qword [rbp+var_368], rax
0000000000008802         call       j___fxstat                                  ; __fxstat
0000000000008807         test       eax, eax
0000000000008809         mov        dword [rbp+var_348], eax
000000000000880f         jne        loc_93b6

0000000000008815         cmp        byte [rbp+var_338], 0x0
000000000000881c         je         loc_8eef

0000000000008822         cmp        dword [rbx+0x38], 0x0
0000000000008826         jne        loc_9684

                     loc_882c:
000000000000882c         call       j_getpagesize                               ; getpagesize, CODE XREF=copy_internal+15720
0000000000008831         mov        rcx, qword [rbp+var_98]
0000000000008838         movsxd     r12, eax
000000000000883b         movabs     rax, 0x1ffffffffffe0000
0000000000008845         mov        r8d, 0x200
000000000000884b         mov        edi, dword [rbp+var_320]
0000000000008851         mov        qword [rbp+var_330], r8
0000000000008858         lea        rdx, qword [rcx-0x20000]
000000000000885f         cmp        rdx, rax
0000000000008862         mov        eax, 0x20000
0000000000008867         lea        rdx, qword [rcx-1]
000000000000886b         cmovbe     rax, rcx
000000000000886f         mov        qword [rbp+var_370], rax
0000000000008876         movabs     rax, 0x1fffffffffffffff
0000000000008880         cmp        rdx, rax
0000000000008883         cmova      rcx, r8
0000000000008887         xor        edx, edx
0000000000008889         xor        esi, esi
000000000000888b         mov        qword [rbp+var_398], rcx
0000000000008892         mov        ecx, 0x2
0000000000008897         call       fdadvise                                    ; fdadvise
000000000000889c         mov        r9d, dword [rbp+var_148]
00000000000088a3         mov        r8, qword [rbp+var_330]
00000000000088aa         and        r9d, 0xf000
00000000000088b1         cmp        r9d, 0x8000
00000000000088b8         je         loc_979a

                     loc_88be:
00000000000088be         mov        eax, dword [rbp+var_B8]                     ; CODE XREF=copy_internal+15993
00000000000088c4         and        eax, 0xf000
00000000000088c9         cmp        eax, 0x8000
00000000000088ce         je         loc_972f

                     loc_88d4:
00000000000088d4         mov        rdi, qword [rbp+var_128]                    ; CODE XREF=copy_internal+15870, copy_internal+15883
00000000000088db         movabs     rax, 0x7fffffffffffffff
00000000000088e5         mov        rsi, qword [rbp+var_370]
00000000000088ec         sub        rax, r12
00000000000088ef         mov        dword [rbp+var_380], r9d
00000000000088f6         mov        r8, rax
00000000000088f9         movabs     rax, 0x1ffffffffffe0000
0000000000008903         lea        rdx, qword [rdi-0x20000]
000000000000890a         mov        qword [rbp+var_330], r8
0000000000008911         cmp        rdx, rax
0000000000008914         mov        eax, 0x20000
0000000000008919         mov        rdx, r8
000000000000891c         cmova      rdi, rax
0000000000008920         call       buffer_lcm                                  ; buffer_lcm
0000000000008925         mov        r9d, dword [rbp+var_380]
000000000000892c         mov        rcx, rax
000000000000892f         mov        r8, qword [rbp+var_330]
0000000000008936         cmp        r9d, 0x8000
000000000000893d         je         loc_960d

                     loc_8943:
0000000000008943         mov        rax, qword [rbp+var_370]                    ; CODE XREF=copy_internal+15579, copy_internal+15596
000000000000894a         xor        edx, edx
000000000000894c         lea        rsi, qword [rcx+rax-1]
0000000000008951         mov        rax, rsi
0000000000008954         div        rcx
0000000000008957         sub        rsi, rdx
000000000000895a         mov        qword [rbp+var_370], rsi
0000000000008961         je         loc_9411

0000000000008967         cmp        rsi, r8
000000000000896a         ja         loc_9411

                     loc_8970:
0000000000008970         mov        rax, qword [rbp+var_370]                    ; CODE XREF=copy_internal+15064
0000000000008977         lea        rdi, qword [r12+rax]
000000000000897b         call       xmalloc                                     ; xmalloc
0000000000008980         lea        rcx, qword [rax+r12-1]
0000000000008985         xor        edx, edx
0000000000008987         mov        qword [rbp+var_330], rax
000000000000898e         mov        rax, rcx
0000000000008991         div        r12
0000000000008994         sub        rcx, rdx
0000000000008997         cmp        dword [rbp+var_348], 0x0
000000000000899e         mov        qword [rbp+var_3B0], rcx
00000000000089a5         je         loc_941d

00000000000089ab         mov        byte [rbp+var_3A5], 0x0
00000000000089b2         mov        dword [rbp+var_390], 0x1

                     loc_89bc:
00000000000089bc         mov        rax, qword [rbp+var_130]                    ; CODE XREF=copy_internal+15957
00000000000089c3         mov        edi, dword [rbp+var_320]
00000000000089c9         xor        r12d, r12d
00000000000089cc         mov        qword [rbp+var_380], rax
00000000000089d3         lea        rax, qword [rbp+var_2F0]
00000000000089da         mov        rsi, rax
00000000000089dd         mov        qword [rbp+var_348], rax
00000000000089e4         call       extent_scan_init                            ; extent_scan_init
00000000000089e9         lea        rax, qword [rbp+var_2F9]
00000000000089f0         xor        ecx, ecx
00000000000089f2         mov        qword [rbp+var_388], rbx
00000000000089f9         mov        qword [rbp+var_3A0], 0x0
0000000000008a04         mov        rbx, rcx
0000000000008a07         mov        dword [rbp+var_360], r13d
0000000000008a0e         mov        qword [rbp+var_3B8], rax
0000000000008a15         lea        rax, qword [rbp+var_2F8]
0000000000008a1c         mov        qword [rbp+var_3C0], rax

                     loc_8a23:
0000000000008a23         mov        rdi, qword [rbp+var_348]                    ; CODE XREF=copy_internal+15351
0000000000008a2a         call       extent_scan_read                            ; extent_scan_read
0000000000008a2f         test       al, al
0000000000008a31         je         loc_9631

0000000000008a37         cmp        qword [rbp+var_2D8], 0x0
0000000000008a3f         je         loc_950e

0000000000008a45         mov        rdx, rbx
0000000000008a48         mov        rcx, r12
0000000000008a4b         xor        r13d, r13d
0000000000008a4e         xor        eax, eax
0000000000008a50         jmp        loc_8b0d
0000000000008a55         align      8

                     loc_8a58:
0000000000008a58         cmp        dword [rbp+var_390], 0x3                    ; CODE XREF=copy_internal+12819, copy_internal+12914
0000000000008a5f         mov        r8d, 0x0
0000000000008a65         cmove      r8, qword [rbp+var_398]

                     loc_8a6d:
0000000000008a6d         sub        rsp, 0x8                                    ; CODE XREF=copy_internal+14785
0000000000008a71         mov        rcx, qword [rbp+var_370]
0000000000008a78         mov        rdx, qword [rbp+var_3B0]
0000000000008a7f         mov        esi, dword [rbp+var_328]
0000000000008a85         mov        edi, dword [rbp+var_320]
0000000000008a8b         mov        r9d, 0x1
0000000000008a91         push       qword [rbp+var_3B8]
0000000000008a97         push       qword [rbp+var_3C0]
0000000000008a9d         push       rbx
0000000000008a9e         push       qword [rbp+var_308]
0000000000008aa4         push       qword [rbp+var_310]
0000000000008aaa         call       sparse_copy                                 ; sparse_copy
0000000000008aaf         add        rsp, 0x30
0000000000008ab3         test       al, al
0000000000008ab5         je         loc_8bb8

0000000000008abb         mov        rax, qword [rbp+var_2F8]
0000000000008ac2         lea        rcx, qword [r12+rax]
0000000000008ac6         test       rax, rax
0000000000008ac9         mov        qword [rbp+var_3A0], rcx
0000000000008ad0         je         loc_8adf

0000000000008ad2         movzx      eax, byte [rbp+var_2F9]
0000000000008ad9         mov        byte [rbp+var_338], al

                     loc_8adf:
0000000000008adf         mov        rcx, qword [rbp+var_3A0]                    ; CODE XREF=copy_internal+12688
0000000000008ae6         cmp        qword [rbp+var_380], rcx
0000000000008aed         je         loc_9507

0000000000008af3         lea        eax, dword [r13+1]
0000000000008af7         cmp        rax, qword [rbp+var_2D8]
0000000000008afe         mov        rcx, r12
0000000000008b01         mov        rdx, rbx
0000000000008b04         mov        r13, rax
0000000000008b07         jae        loc_950e

                     loc_8b0d:
0000000000008b0d         lea        rsi, qword [rax+rax*2]                      ; CODE XREF=copy_internal+12560
0000000000008b11         mov        rax, qword [rbp+var_2C8]
0000000000008b18         lea        rax, qword [rax+rsi*8]
0000000000008b1c         mov        rsi, qword [rbp+var_380]
0000000000008b23         mov        r12, qword [rax]
0000000000008b26         mov        rbx, qword [rax+8]
0000000000008b2a         lea        rax, qword [r12+rbx]
0000000000008b2e         cmp        rsi, rax
0000000000008b31         jge        loc_8b40

0000000000008b33         cmp        r12, rsi
0000000000008b36         cmovg      r12, rsi
0000000000008b3a         sub        rsi, r12
0000000000008b3d         mov        rbx, rsi

                     loc_8b40:
0000000000008b40         mov        rax, r12                                    ; CODE XREF=copy_internal+12785
0000000000008b43         mov        byte [rbp+var_338], 0x0
0000000000008b4a         sub        rax, rcx
0000000000008b4d         mov        rcx, rax
0000000000008b50         sub        rcx, rdx
0000000000008b53         je         loc_8a58

0000000000008b59         mov        edi, dword [rbp+var_320]                    ; argument "__fd" for method j_lseek
0000000000008b5f         xor        edx, edx                                    ; argument "__whence" for method j_lseek
0000000000008b61         mov        rsi, r12                                    ; argument "__offset" for method j_lseek
0000000000008b64         mov        qword [rbp+var_3A0], rcx
0000000000008b6b         call       j_lseek                                     ; lseek
0000000000008b70         test       rax, rax
0000000000008b73         mov        rcx, qword [rbp+var_3A0]
0000000000008b7a         js         loc_99ef

0000000000008b80         mov        eax, dword [rbp+var_390]
0000000000008b86         cmp        eax, 0x3
0000000000008b89         sete       dl
0000000000008b8c         sub        eax, 0x1
0000000000008b8f         je         loc_92e8

0000000000008b95         mov        rsi, qword [rbp+var_308]
0000000000008b9c         mov        edi, dword [rbp+var_328]
0000000000008ba2         movzx      edx, dl
0000000000008ba5         call       create_hole                                 ; create_hole
0000000000008baa         test       al, al
0000000000008bac         mov        byte [rbp+var_338], al
0000000000008bb2         jne        loc_8a58

                     loc_8bb8:
0000000000008bb8         mov        rbx, qword [rbp+var_388]                    ; CODE XREF=copy_internal+12661
0000000000008bbf         mov        r13d, dword [rbp+var_360]

                     loc_8bc6:
0000000000008bc6         mov        rdi, qword [rbp+var_2C8]                    ; CODE XREF=copy_internal+16171
0000000000008bcd         call       sub_2c80                                    ; sub_2c80

                     loc_8bd2:
0000000000008bd2         xor        r8d, r8d                                    ; CODE XREF=copy_internal+13840, copy_internal+14961, copy_internal+15181, copy_internal+15298

                     loc_8bd5:
0000000000008bd5         mov        edi, dword [rbp+var_328]                    ; argument "__fd" for method j_close, CODE XREF=copy_internal+13935, copy_internal+13969, copy_internal+14009, copy_internal+14096, copy_internal+14667, copy_internal+14749, copy_internal+15052, copy_internal+15850, copy_internal+16257, copy_internal+16637
0000000000008bdb         mov        byte [rbp+var_338], r8b
0000000000008be2         call       j_close                                     ; close
0000000000008be7         test       eax, eax
0000000000008be9         movzx      r8d, byte [rbp+var_338]
0000000000008bf1         jns        loc_7a98

0000000000008bf7         mov        rsi, qword [rbp+var_308]
0000000000008bfe         mov        edi, 0x4
0000000000008c03         call       quotearg_style                              ; quotearg_style
0000000000008c08         lea        rsi, qword [aFailedToCloseS]                ; argument "msgid" for method j_dcgettext, "failed to close %s"
0000000000008c0f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008c14         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008c16         mov        r12, rax
0000000000008c19         call       j_dcgettext                                 ; dcgettext
0000000000008c1e         mov        qword [rbp+var_328], rax
0000000000008c25         call       j___errno_location                          ; __errno_location
0000000000008c2a         mov        rdx, qword [rbp+var_328]                    ; argument "__format" for method j_error
0000000000008c31         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000008c33         mov        rcx, r12
0000000000008c36         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000008c38         xor        eax, eax
0000000000008c3a         call       j_error                                     ; error
0000000000008c3f         xor        r8d, r8d
0000000000008c42         jmp        loc_7a98

                     loc_8c47:
0000000000008c47         movzx      r12d, byte [rbx+0x18]                       ; CODE XREF=copy_internal+10892
0000000000008c4c         xor        r12d, 0x1
0000000000008c50         jmp        loc_70bc

                     loc_8c55:
0000000000008c55         mov        byte [rbp+var_315], 0x0                     ; CODE XREF=copy_internal+7638
0000000000008c5c         mov        r12d, 0x1
0000000000008c62         jmp        loc_7867

                     loc_8c67:
0000000000008c67         mov        rax, qword [rbp+var_D0]                     ; CODE XREF=copy_internal+8734
0000000000008c6e         cmp        qword [rbp+var_160], rax
0000000000008c75         jne        loc_7b64

0000000000008c7b         jmp        loc_683c

                     loc_8c80:
0000000000008c80         mov        rdi, qword [rbp+var_308]                    ; argument "__name" for method j_unlink, CODE XREF=copy_internal+14122
0000000000008c87         call       j_unlink                                    ; unlink
0000000000008c8c         test       eax, eax
0000000000008c8e         jne        loc_98c6

0000000000008c94         cmp        byte [rbx+0x2e], 0x0
0000000000008c98         je         loc_8cd3

0000000000008c9a         mov        rsi, qword [rbp+var_308]
0000000000008ca1         mov        edi, 0x4
0000000000008ca6         call       quotearg_style                              ; quotearg_style
0000000000008cab         lea        rsi, qword [aRemovedSn]                     ; argument "msgid" for method j_dcgettext, "removed %s\\n"
0000000000008cb2         mov        r12, rax
0000000000008cb5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008cba         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008cbc         call       j_dcgettext                                 ; dcgettext
0000000000008cc1         mov        rdx, r12
0000000000008cc4         mov        rsi, rax
0000000000008cc7         mov        edi, 0x1
0000000000008ccc         xor        eax, eax
0000000000008cce         call       j___printf_chk                              ; __printf_chk

                     loc_8cd3:
0000000000008cd3         movzx      r14d, byte [rbx+0x21]                       ; CODE XREF=copy_internal+13144
0000000000008cd8         mov        eax, dword [rbp+var_35C]
0000000000008cde         mov        dword [rbp+var_378], eax
0000000000008ce4         test       r14b, r14b
0000000000008ce7         je         loc_8d2c

0000000000008ce9         mov        edx, dword [rbp+var_3A4]
0000000000008cef         mov        rsi, qword [rbp+var_308]
0000000000008cf6         mov        r8, rbx
0000000000008cf9         mov        rdi, qword [rbp+var_310]
0000000000008d00         mov        ecx, 0x1
0000000000008d05         call       set_process_security_ctx                    ; set_process_security_ctx
0000000000008d0a         test       al, al
0000000000008d0c         mov        r8d, eax
0000000000008d0f         mov        qword [rbp+var_330], 0x0
0000000000008d1a         je         loc_7a98

                     loc_8d20:
0000000000008d20         mov        eax, dword [rbp+var_35C]                    ; CODE XREF=copy_internal+11847
0000000000008d26         mov        dword [rbp+var_378], eax

                     loc_8d2c:
0000000000008d2c         mov        eax, dword [rbp+var_378]                    ; CODE XREF=copy_internal+13223, copy_internal+14162
0000000000008d32         mov        rdi, qword [rbp+var_308]
0000000000008d39         mov        esi, 0xc1
0000000000008d3e         not        eax
0000000000008d40         and        eax, dword [rbp+var_3A4]
0000000000008d46         mov        edx, eax
0000000000008d48         mov        dword [rbp+var_330], eax
0000000000008d4e         xor        eax, eax
0000000000008d50         call       open_safer                                  ; open_safer
0000000000008d55         mov        r14d, eax
0000000000008d58         mov        dword [rbp+var_328], eax
0000000000008d5e         call       j___errno_location                          ; __errno_location
0000000000008d63         mov        r8d, dword [rax]
0000000000008d66         mov        r12, rax
0000000000008d69         mov        eax, r14d
0000000000008d6c         shr        eax, 0x1f
0000000000008d6f         cmp        r8d, 0x11
0000000000008d73         sete       dl
0000000000008d76         and        dl, al
0000000000008d78         mov        r14d, edx
0000000000008d7b         je         loc_9182

0000000000008d81         cmp        byte [rbx+0x18], 0x0
0000000000008d85         mov        r8d, 0x11
0000000000008d8b         je         loc_9115

                     loc_8d91:
0000000000008d91         mov        r9d, 0x1                                    ; CODE XREF=copy_internal+14697

                     loc_8d97:
0000000000008d97         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+14136, copy_internal+14146, copy_internal+14448, copy_internal+14484
0000000000008d9e         mov        edi, 0x4
0000000000008da3         mov        byte [rbp+var_330], r9b
0000000000008daa         mov        dword [rbp+var_328], r8d
0000000000008db1         call       quotearg_style                              ; quotearg_style
0000000000008db6         lea        rsi, qword [aCannotCreateRe]                ; argument "msgid" for method j_dcgettext, "cannot create regular file %s"
0000000000008dbd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008dc2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008dc4         mov        r12, rax
0000000000008dc7         call       j_dcgettext                                 ; dcgettext
0000000000008dcc         mov        r8d, dword [rbp+var_328]
0000000000008dd3         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000008dd6         mov        rcx, r12
0000000000008dd9         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000008ddb         xor        eax, eax
0000000000008ddd         mov        esi, r8d                                    ; argument "__errnum" for method j_error
0000000000008de0         call       j_error                                     ; error
0000000000008de5         movzx      r9d, byte [rbp+var_330]
0000000000008ded         xor        r8d, r8d
0000000000008df0         mov        qword [rbp+var_330], 0x0
0000000000008dfb         mov        r14d, r9d
0000000000008dfe         jmp        loc_7a98

                     loc_8e03:
0000000000008e03         mov        rsi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+11385
0000000000008e0a         mov        edi, 0x4
0000000000008e0f         call       quotearg_style                              ; quotearg_style
0000000000008e14         mov        edx, 0x5
0000000000008e19         mov        r13, rax
0000000000008e1c         lea        rsi, qword [aCannotReadSymb]                ; "cannot read symbolic link %s"
0000000000008e23         jmp        loc_6e1f

                     loc_8e28:
0000000000008e28         mov        rdi, r12                                    ; CODE XREF=copy_internal+11429
0000000000008e2b         call       sub_2c80                                    ; sub_2c80

                     loc_8e30:
0000000000008e30         movzx      r8d, byte [rbx+0x25]                        ; CODE XREF=copy_internal+14616
0000000000008e35         test       r8b, r8b
0000000000008e38         jne        loc_6a50

0000000000008e3e         movzx      eax, byte [rbx+0x1d]
0000000000008e42         test       al, al
0000000000008e44         mov        byte [rbp+var_320], al
0000000000008e4a         jne        loc_90c3

0000000000008e50         movzx      r8d, byte [rbp+var_320]
0000000000008e58         mov        byte [rbp+var_320], 0x1
0000000000008e5f         jmp        loc_5ebf

                     loc_8e64:
0000000000008e64         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=copy_internal+2134
                        ; endp

                     loc_8e69:
0000000000008e69         mov        rsi, qword [rbp+var_308]                    ; argument "__filename" for method j___xstat, CODE XREF=copy_internal+7019
0000000000008e70         lea        rdx, qword [rbp+var_160]                    ; argument "__stat_buf" for method j___xstat
0000000000008e77         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000008e7c         mov        byte [rbp+var_358], r9b
0000000000008e83         mov        byte [rbp+var_350], r8b
0000000000008e8a         call       j___xstat                                   ; __xstat
0000000000008e8f         test       eax, eax
0000000000008e91         movzx      r8d, byte [rbp+var_350]
0000000000008e99         movzx      r9d, byte [rbp+var_358]
0000000000008ea1         je         loc_7531

0000000000008ea7         jmp        loc_5b5f

                     loc_8eac:
0000000000008eac         mov        rsi, qword [rbp+var_310]                    ; argument "__filename" for method j___xstat, CODE XREF=copy_internal+6900
0000000000008eb3         lea        rdx, qword [rbp+var_D0]                     ; argument "__stat_buf" for method j___xstat
0000000000008eba         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000008ebf         mov        byte [rbp+var_358], r9b
0000000000008ec6         mov        byte [rbp+var_350], r8b
0000000000008ecd         call       j___xstat                                   ; __xstat
0000000000008ed2         test       eax, eax
0000000000008ed4         movzx      r8d, byte [rbp+var_350]
0000000000008edc         movzx      r9d, byte [rbp+var_358]
0000000000008ee4         je         loc_749c

0000000000008eea         jmp        loc_5b5f

                     loc_8eef:
0000000000008eef         mov        qword [rbp+var_330], 0x0                    ; CODE XREF=copy_internal+11996, copy_internal+15710

                     loc_8efa:
0000000000008efa         cmp        byte [rbx+0x1f], 0x0                        ; CODE XREF=copy_internal+15194, copy_internal+15220, copy_internal+15398, copy_internal+15446, copy_internal+15455, copy_internal+15491, copy_internal+15554
0000000000008efe         jne        loc_9306

                     loc_8f04:
0000000000008f04         cmp        byte [rbx+0x1d], 0x0                        ; CODE XREF=copy_internal+14873, copy_internal+14955
0000000000008f08         je         loc_8f64

0000000000008f0a         mov        eax, dword [rbp+var_B4]
0000000000008f10         cmp        dword [rbp+var_264], eax
0000000000008f16         jne        loc_8f26

0000000000008f18         mov        eax, dword [rbp+var_B0]
0000000000008f1e         cmp        dword [rbp+var_260], eax
0000000000008f24         je         loc_8f64

                     loc_8f26:
0000000000008f26         mov        r9, qword [rbp+var_368]                     ; CODE XREF=copy_internal+13782
0000000000008f2d         mov        edx, dword [rbp+var_328]
0000000000008f33         lea        rcx, qword [rbp+var_280]
0000000000008f3a         mov        rsi, qword [rbp+var_308]
0000000000008f41         movzx      r8d, r14b
0000000000008f45         mov        rdi, rbx
0000000000008f48         call       set_owner                                   ; set_owner
0000000000008f4d         cmp        eax, 0xffffffff
0000000000008f50         je         loc_8bd2

0000000000008f56         test       eax, eax
0000000000008f58         jne        loc_8f64

0000000000008f5a         and        dword [rbp+var_340], 0xfffff1ff

                     loc_8f64:
0000000000008f64         cmp        byte [rbx+0x27], 0x0                        ; CODE XREF=copy_internal+13768, copy_internal+13796, copy_internal+13848
0000000000008f68         je         loc_8f77

0000000000008f6a         test       byte [rbp+var_B8], 0x80
0000000000008f71         je         loc_999e

                     loc_8f77:
0000000000008f77         movabs     rax, 0xff0000000000ff                       ; CODE XREF=copy_internal+13864, copy_internal+16485, copy_internal+16516, copy_internal+16554
0000000000008f81         test       qword [rbx+0x18], rax
0000000000008f85         jne        loc_925d

0000000000008f8b         cmp        byte [rbx+0x2b], 0x0
0000000000008f8f         jne        loc_9a22

0000000000008f95         mov        r12d, r14d
0000000000008f98         and        r12b, byte [rbx+0x20]
0000000000008f9c         jne        loc_9897

0000000000008fa2         cmp        dword [rbp+var_378], 0x0
0000000000008fa9         mov        r8d, 0x1
0000000000008faf         je         loc_8bd5

0000000000008fb5         mov        byte [rbp+var_338], r8b
0000000000008fbc         call       cached_umask                                ; cached_umask
0000000000008fc1         not        eax
0000000000008fc3         test       dword [rbp+var_378], eax
0000000000008fc9         movzx      r8d, byte [rbp+var_338]
0000000000008fd1         je         loc_8bd5

0000000000008fd7         mov        edx, dword [rbp+var_3A4]
0000000000008fdd         mov        rsi, qword [rbp+var_308]
0000000000008fe4         mov        edi, dword [rbp+var_328]
0000000000008fea         call       fchmod_or_lchmod                            ; fchmod_or_lchmod
0000000000008fef         test       eax, eax
0000000000008ff1         movzx      r8d, byte [rbp+var_338]
0000000000008ff9         je         loc_8bd5

0000000000008fff         mov        rsi, qword [rbp+var_308]
0000000000009006         mov        edi, 0x4
000000000000900b         call       quotearg_style                              ; quotearg_style
0000000000009010         lea        rsi, qword [aPreservingPerm]                ; argument "msgid" for method j_dcgettext, "preserving permissions for %s"
0000000000009017         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000901c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000901e         mov        r12, rax
0000000000009021         call       j_dcgettext                                 ; dcgettext
0000000000009026         mov        qword [rbp+var_338], rax
000000000000902d         call       j___errno_location                          ; __errno_location
0000000000009032         mov        rdx, qword [rbp+var_338]                    ; argument "__format" for method j_error
0000000000009039         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000903b         mov        rcx, r12
000000000000903e         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000009040         xor        eax, eax
0000000000009042         call       j_error                                     ; error

                     loc_9047:
0000000000009047         movzx      r8d, byte [rbx+0x24]                        ; CODE XREF=copy_internal+14673
000000000000904c         xor        r8d, 0x1
0000000000009050         jmp        loc_8bd5

                     loc_9055:
0000000000009055         cmp        dword [rbp+var_328], 0x0                    ; CODE XREF=copy_internal+11913
000000000000905c         jns        loc_92ae

                     loc_9062:
0000000000009062         movzx      r9d, byte [rbx+0x16]                        ; CODE XREF=copy_internal+11926
0000000000009067         test       r9b, r9b
000000000000906a         jne        loc_8c80

0000000000009070         mov        r8d, dword [r12]
0000000000009074         cmp        r8d, 0x2
0000000000009078         jne        loc_8d97

000000000000907e         cmp        byte [rbx+0x18], 0x0
0000000000009082         jne        loc_8d97

0000000000009088         mov        dword [rbp+var_378], 0x0
0000000000009092         jmp        loc_8d2c

                     loc_9097:
0000000000009097         mov        rsi, qword [rbp+var_308]                    ; argument "__filename" for method j___lxstat, CODE XREF=copy_internal+11748
000000000000909e         lea        rdx, qword [rbp+var_1F0]                    ; argument "__stat_buf" for method j___lxstat
00000000000090a5         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
00000000000090aa         call       j___lxstat                                  ; __lxstat
00000000000090af         test       eax, eax
00000000000090b1         je         loc_872a

00000000000090b7         mov        rsi, qword [rbp+var_308]
00000000000090be         jmp        loc_6225

                     loc_90c3:
00000000000090c3         mov        edx, dword [rbp+var_260]                    ; argument "__group" for method j_lchown, CODE XREF=copy_internal+13578
00000000000090c9         mov        esi, dword [rbp+var_264]                    ; argument "__owner" for method j_lchown
00000000000090cf         mov        rdi, qword [rbp+var_308]                    ; argument "__file" for method j_lchown
00000000000090d6         mov        byte [rbp+var_328], r8b
00000000000090dd         call       j_lchown                                    ; lchown
00000000000090e2         test       eax, eax
00000000000090e4         movzx      r8d, byte [rbp+var_328]
00000000000090ec         je         loc_5ebf

00000000000090f2         mov        rdi, rbx
00000000000090f5         call       chown_failure_ok                            ; chown_failure_ok
00000000000090fa         test       al, al
00000000000090fc         movzx      r8d, byte [rbp+var_328]
0000000000009104         je         loc_9904

000000000000910a         mov        byte [rbp+var_320], al
0000000000009110         jmp        loc_5ebf

                     loc_9115:
0000000000009115         mov        rsi, qword [rbp+var_308]                    ; argument "__filename" for method j___lxstat, CODE XREF=copy_internal+13387
000000000000911c         lea        rdx, qword [rbp+var_D0]                     ; argument "__stat_buf" for method j___lxstat
0000000000009123         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000009128         mov        dword [rbp+var_348], r8d
000000000000912f         call       j___lxstat                                  ; __lxstat
0000000000009134         test       eax, eax
0000000000009136         mov        r8d, dword [rbp+var_348]
000000000000913d         jne        loc_9182

000000000000913f         mov        eax, dword [rbp+var_B8]
0000000000009145         and        eax, 0xf000
000000000000914a         cmp        eax, 0xa000
000000000000914f         jne        loc_9182

0000000000009151         movzx      r8d, byte [rbx+0x30]
0000000000009156         test       r8b, r8b
0000000000009159         je         loc_9947

000000000000915f         mov        edx, dword [rbp+var_330]
0000000000009165         mov        rdi, qword [rbp+var_308]
000000000000916c         mov        esi, 0x41
0000000000009171         xor        eax, eax
0000000000009173         call       open_safer                                  ; open_safer
0000000000009178         mov        r8d, dword [r12]
000000000000917c         mov        dword [rbp+var_328], eax

                     loc_9182:
0000000000009182         mov        eax, dword [rbp+var_328]                    ; CODE XREF=copy_internal+13371, copy_internal+14333, copy_internal+14351
0000000000009188         shr        eax, 0x1f
000000000000918b         cmp        r8d, 0x15
000000000000918f         sete       dl
0000000000009192         and        dl, al
0000000000009194         mov        r9d, edx
0000000000009197         je         loc_9296

000000000000919d         mov        rsi, qword [rbp+var_308]
00000000000091a4         mov        r8d, 0x15
00000000000091aa         cmp        byte [rsi], 0x0
00000000000091ad         mov        rdi, rsi
00000000000091b0         je         loc_8d97

00000000000091b6         xor        eax, eax
00000000000091b8         or         rcx, 0xffffffffffffffff
00000000000091bc         xor        r8d, r8d
00000000000091bf         repne scasb al, byte [rdi]
00000000000091c1         mov        rax, rcx
00000000000091c4         not        rax
00000000000091c7         cmp        byte [rsi+rax-2], 0x2f
00000000000091cc         setne      r8b
00000000000091d0         add        r8d, 0x14
00000000000091d4         jmp        loc_8d97

                     loc_91d9:
00000000000091d9         mov        eax, dword [rbp+var_1D8]                    ; CODE XREF=copy_internal+11444
00000000000091df         and        eax, 0xf000
00000000000091e4         cmp        eax, 0xa000
00000000000091e9         jne        loc_85fa

00000000000091ef         or         rcx, 0xffffffffffffffff
00000000000091f3         mov        eax, r14d
00000000000091f6         mov        rdi, r12
00000000000091f9         repne scasb al, byte [rdi]
00000000000091fb         mov        rsi, qword [rbp+var_1C0]
0000000000009202         not        rcx
0000000000009205         lea        rax, qword [rcx-1]
0000000000009209         cmp        rsi, rax
000000000000920c         jne        loc_85fa

0000000000009212         mov        rdi, qword [rbp+var_308]
0000000000009219         call       areadlink_with_size                         ; areadlink_with_size
000000000000921e         test       rax, rax
0000000000009221         je         loc_85fa

0000000000009227         mov        rdi, rax                                    ; argument "__s1" for method j_strcmp
000000000000922a         mov        rsi, r12                                    ; argument "__s2" for method j_strcmp
000000000000922d         mov        qword [rbp+var_328], rax
0000000000009234         call       j_strcmp                                    ; strcmp
0000000000009239         mov        rdx, qword [rbp+var_328]
0000000000009240         test       eax, eax
0000000000009242         mov        rdi, rdx
0000000000009245         jne        loc_9a42

000000000000924b         call       sub_2c80                                    ; sub_2c80
0000000000009250         mov        rdi, r12
0000000000009253         call       sub_2c80                                    ; sub_2c80
0000000000009258         jmp        loc_8e30

                     loc_925d:
000000000000925d         mov        r8d, dword [rbp+var_340]                    ; CODE XREF=copy_internal+13893
0000000000009264         mov        ecx, dword [rbp+var_328]
000000000000926a         mov        rdx, qword [rbp+var_308]
0000000000009271         mov        esi, dword [rbp+var_320]
0000000000009277         mov        rdi, qword [rbp+var_310]
000000000000927e         call       copy_acl                                    ; copy_acl
0000000000009283         test       eax, eax
0000000000009285         mov        r8d, 0x1
000000000000928b         je         loc_8bd5

0000000000009291         jmp        loc_9047

                     loc_9296:
0000000000009296         cmp        dword [rbp+var_328], 0x0                    ; CODE XREF=copy_internal+14423
000000000000929d         mov        r14d, 0x1
00000000000092a3         jns        loc_87e6

00000000000092a9         jmp        loc_8d91

                     loc_92ae:
00000000000092ae         movzx      esi, byte [rbx+0x25]                        ; CODE XREF=copy_internal+14108
00000000000092b2         mov        rdi, qword [rbp+var_308]
00000000000092b9         xor        edx, edx
00000000000092bb         mov        rcx, rbx
00000000000092be         call       set_file_security_ctx                       ; set_file_security_ctx
00000000000092c3         test       al, al
00000000000092c5         mov        r8d, eax
00000000000092c8         jne        loc_87dc

00000000000092ce         cmp        byte [rbx+0x26], 0x0
00000000000092d2         mov        qword [rbp+var_330], 0x0
00000000000092dd         jne        loc_8bd5

00000000000092e3         jmp        loc_87dc

                     loc_92e8:
00000000000092e8         mov        edi, dword [rbp+var_328]                    ; CODE XREF=copy_internal+12879
00000000000092ee         mov        rsi, rcx
00000000000092f1         call       write_zeros                                 ; write_zeros
00000000000092f6         test       al, al
00000000000092f8         je         loc_9813

00000000000092fe         xor        r8d, r8d
0000000000009301         jmp        loc_8a6d

                     loc_9306:
0000000000009306         mov        rax, qword [rbp+var_238]                    ; CODE XREF=copy_internal+13758
000000000000930d         mov        rsi, qword [rbp+var_308]
0000000000009314         lea        rdx, qword [rbp+var_2A0]
000000000000931b         mov        edi, dword [rbp+var_328]
0000000000009321         mov        qword [rbp+var_2A0], rax
0000000000009328         mov        rax, qword [rbp+var_230]
000000000000932f         mov        qword [rbp+var_298], rax
0000000000009336         mov        rax, qword [rbp+var_228]
000000000000933d         mov        qword [rbp+var_290], rax
0000000000009344         mov        rax, qword [rbp+var_220]
000000000000934b         mov        qword [rbp+var_288], rax
0000000000009352         call       fdutimens                                   ; fdutimens
0000000000009357         test       eax, eax
0000000000009359         je         loc_8f04

000000000000935f         mov        rsi, qword [rbp+var_308]
0000000000009366         mov        edi, 0x4
000000000000936b         call       quotearg_style                              ; quotearg_style
0000000000009370         lea        rsi, qword [aPreservingTime]                ; argument "msgid" for method j_dcgettext, "preserving times for %s"
0000000000009377         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009379         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000937e         mov        r12, rax
0000000000009381         call       j_dcgettext                                 ; dcgettext
0000000000009386         mov        qword [rbp+var_338], rax
000000000000938d         call       j___errno_location                          ; __errno_location
0000000000009392         mov        rdx, qword [rbp+var_338]                    ; argument "__format" for method j_error
0000000000009399         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000939b         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000939d         xor        eax, eax
000000000000939f         mov        rcx, r12
00000000000093a2         call       j_error                                     ; error
00000000000093a7         cmp        byte [rbx+0x24], 0x0
00000000000093ab         je         loc_8f04

00000000000093b1         jmp        loc_8bd2

                     loc_93b6:
00000000000093b6         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+11983
00000000000093bd         mov        edi, 0x4
00000000000093c2         call       quotearg_style                              ; quotearg_style
00000000000093c7         lea        rsi, qword [aCannotFstatS]                  ; argument "msgid" for method j_dcgettext, "cannot fstat %s"
00000000000093ce         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000093d3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000093d5         mov        r12, rax
00000000000093d8         call       j_dcgettext                                 ; dcgettext
00000000000093dd         mov        qword [rbp+var_330], rax
00000000000093e4         call       j___errno_location                          ; __errno_location
00000000000093e9         mov        rdx, qword [rbp+var_330]                    ; argument "__format" for method j_error
00000000000093f0         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000093f2         mov        rcx, r12
00000000000093f5         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000093f7         xor        eax, eax
00000000000093f9         call       j_error                                     ; error
00000000000093fe         xor        r8d, r8d
0000000000009401         mov        qword [rbp+var_330], 0x0
000000000000940c         jmp        loc_8bd5

                     loc_9411:
0000000000009411         mov        qword [rbp+var_370], rcx                    ; CODE XREF=copy_internal+12321, copy_internal+12330
0000000000009418         jmp        loc_8970

                     loc_941d:
000000000000941d         xor        r9d, r9d                                    ; CODE XREF=copy_internal+12389
0000000000009420         cmp        dword [rbx+0xc], 0x3
0000000000009424         lea        rax, qword [rbp+var_2F0]
000000000000942b         mov        qword [rbp+var_398], 0x0
0000000000009436         mov        qword [rbp+var_348], rax
000000000000943d         sete       r9b

                     loc_9441:
0000000000009441         lea        rax, qword [rbp+var_2F8]                    ; CODE XREF=copy_internal+15679, copy_internal+16078
0000000000009448         sub        rsp, 0x8
000000000000944c         mov        r8, qword [rbp+var_398]
0000000000009453         mov        rcx, qword [rbp+var_370]
000000000000945a         mov        rdx, qword [rbp+var_3B0]
0000000000009461         mov        esi, dword [rbp+var_328]
0000000000009467         mov        edi, dword [rbp+var_320]
000000000000946d         push       rax
000000000000946e         push       qword [rbp+var_348]
0000000000009474         push       0xffffffffffffffff
0000000000009476         push       qword [rbp+var_308]
000000000000947c         push       qword [rbp+var_310]
0000000000009482         call       sparse_copy                                 ; sparse_copy
0000000000009487         add        rsp, 0x30
000000000000948b         test       al, al
000000000000948d         je         loc_8bd2

0000000000009493         cmp        byte [rbp+var_2F8], 0x0
000000000000949a         je         loc_8efa

00000000000094a0         mov        rsi, qword [rbp+var_2F0]                    ; argument "__length" for method j_ftruncate
00000000000094a7         mov        edi, dword [rbp+var_328]                    ; argument "__fd" for method j_ftruncate
00000000000094ad         call       j_ftruncate                                 ; ftruncate
00000000000094b2         test       eax, eax
00000000000094b4         jns        loc_8efa

                     loc_94ba:
00000000000094ba         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+15433, copy_internal+15560
00000000000094c1         mov        edi, 0x4
00000000000094c6         call       quotearg_style                              ; quotearg_style
00000000000094cb         lea        rsi, qword [aFailedToExtend]                ; "failed to extend %s"
00000000000094d2         mov        r12, rax
00000000000094d5         mov        edx, 0x5

                     loc_94da:
00000000000094da         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=copy_internal+15529, copy_internal+16210
00000000000094dc         call       j_dcgettext                                 ; dcgettext
00000000000094e1         mov        qword [rbp+var_338], rax
00000000000094e8         call       j___errno_location                          ; __errno_location
00000000000094ed         mov        rdx, qword [rbp+var_338]                    ; argument "__format" for method j_error
00000000000094f4         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000094f6         mov        rcx, r12
00000000000094f9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000094fb         xor        eax, eax
00000000000094fd         call       j_error                                     ; error
0000000000009502         jmp        loc_8bd2

                     loc_9507:
0000000000009507         mov        byte [rbp+var_2CF], 0x1                     ; CODE XREF=copy_internal+12717

                     loc_950e:
000000000000950e         mov        rdi, qword [rbp+var_2C8]                    ; CODE XREF=copy_internal+12543, copy_internal+12743
0000000000009515         call       sub_2c80                                    ; sub_2c80
000000000000951a         cmp        byte [rbp+var_2CF], 0x0
0000000000009521         mov        qword [rbp+var_2C8], 0x0
000000000000952c         mov        qword [rbp+var_2D8], 0x0
0000000000009537         je         loc_8a23

000000000000953d         mov        rbx, qword [rbp+var_388]
0000000000009544         mov        r13d, dword [rbp+var_360]

                     loc_954b:
000000000000954b         mov        rcx, qword [rbp+var_3A0]                    ; CODE XREF=copy_internal+15622
0000000000009552         cmp        qword [rbp+var_380], rcx
0000000000009559         setg       r12b
000000000000955d         jg         loc_956c

000000000000955f         cmp        byte [rbp+var_338], 0x0
0000000000009566         je         loc_8efa

                     loc_956c:
000000000000956c         cmp        dword [rbp+var_390], 0x1                    ; CODE XREF=copy_internal+15389
0000000000009573         mov        rsi, qword [rbp+var_380]
000000000000957a         je         loc_95ee

000000000000957c         mov        edi, dword [rbp+var_328]                    ; argument "__fd" for method j_ftruncate
0000000000009582         call       j_ftruncate                                 ; ftruncate
0000000000009587         test       eax, eax
0000000000009589         jne        loc_94ba

000000000000958f         cmp        dword [rbp+var_390], 0x3
0000000000009596         jne        loc_8efa

000000000000959c         test       r12b, r12b
000000000000959f         je         loc_8efa

00000000000095a5         mov        rdx, qword [rbp+var_380]
00000000000095ac         mov        rsi, qword [rbp+var_3A0]
00000000000095b3         mov        edi, dword [rbp+var_328]
00000000000095b9         sub        rdx, rsi
00000000000095bc         call       punch_hole                                  ; punch_hole
00000000000095c1         test       eax, eax
00000000000095c3         jns        loc_8efa

00000000000095c9         mov        rsi, qword [rbp+var_308]
00000000000095d0         mov        edi, 0x4
00000000000095d5         call       quotearg_style                              ; quotearg_style
00000000000095da         mov        edx, 0x5
00000000000095df         mov        r12, rax
00000000000095e2         lea        rsi, qword [aErrorDeallocat]                ; "error deallocating %s"
00000000000095e9         jmp        loc_94da

                     loc_95ee:
00000000000095ee         sub        rsi, qword [rbp+var_3A0]                    ; CODE XREF=copy_internal+15418
00000000000095f5         mov        edi, dword [rbp+var_328]
00000000000095fb         call       write_zeros                                 ; write_zeros
0000000000009600         test       al, al
0000000000009602         jne        loc_8efa

0000000000009608         jmp        loc_94ba

                     loc_960d:
000000000000960d         mov        rax, qword [rbp+var_130]                    ; CODE XREF=copy_internal+12285
0000000000009614         cmp        qword [rbp+var_370], rax
000000000000961b         jbe        loc_8943

0000000000009621         add        rax, 0x1
0000000000009625         mov        qword [rbp+var_370], rax
000000000000962c         jmp        loc_8943

                     loc_9631:
0000000000009631         cmp        byte [rbp+var_2CF], 0x0                     ; CODE XREF=copy_internal+12529
0000000000009638         mov        rbx, qword [rbp+var_388]
000000000000963f         mov        r13d, dword [rbp+var_360]
0000000000009646         jne        loc_954b

000000000000964c         cmp        byte [rbp+var_2D0], 0x0
0000000000009653         je         loc_9870

0000000000009659         xor        r9d, r9d
000000000000965c         cmp        dword [rbx+0xc], 0x3
0000000000009660         mov        eax, 0x0
0000000000009665         sete       r9b
0000000000009669         cmp        byte [rbp+var_3A5], 0x0
0000000000009670         cmovne     rax, qword [rbp+var_398]
0000000000009678         mov        qword [rbp+var_398], rax
000000000000967f         jmp        loc_9441

                     loc_9684:
0000000000009684         mov        edx, dword [rbp+var_320]                    ; CODE XREF=copy_internal+12006
000000000000968a         mov        edi, dword [rbp+var_328]                    ; argument "__fd" for method j_ioctl
0000000000009690         xor        eax, eax
0000000000009692         mov        esi, 0x40049409                             ; argument "__request" for method j_ioctl
0000000000009697         call       j_ioctl                                     ; ioctl
000000000000969c         test       eax, eax
000000000000969e         je         loc_8eef

00000000000096a4         cmp        dword [rbx+0x38], 0x2
00000000000096a8         jne        loc_882c

00000000000096ae         mov        rdx, qword [rbp+var_310]
00000000000096b5         mov        esi, 0x4
00000000000096ba         mov        edi, 0x1
00000000000096bf         call       quotearg_n_style                            ; quotearg_n_style
00000000000096c4         mov        rdx, qword [rbp+var_308]
00000000000096cb         mov        esi, 0x4
00000000000096d0         xor        edi, edi
00000000000096d2         mov        r12, rax
00000000000096d5         call       quotearg_n_style                            ; quotearg_n_style
00000000000096da         lea        rsi, qword [aFailedToCloneS]                ; argument "msgid" for method j_dcgettext, "failed to clone %s from %s"
00000000000096e1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000096e6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000096e8         mov        qword [rbp+var_338], rax
00000000000096ef         call       j_dcgettext                                 ; dcgettext
00000000000096f4         mov        qword [rbp+var_330], rax
00000000000096fb         call       j___errno_location                          ; __errno_location
0000000000009700         mov        rcx, qword [rbp+var_338]
0000000000009707         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000009709         mov        r8, r12
000000000000970c         mov        rdx, qword [rbp+var_330]                    ; argument "__format" for method j_error
0000000000009713         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000009715         xor        eax, eax
0000000000009717         call       j_error                                     ; error
000000000000971c         xor        r8d, r8d
000000000000971f         mov        qword [rbp+var_330], 0x0
000000000000972a         jmp        loc_8bd5

                     loc_972f:
000000000000972f         mov        eax, dword [rbx+0xc]                        ; CODE XREF=copy_internal+12174
0000000000009732         cmp        eax, 0x3
0000000000009735         je         loc_97be

000000000000973b         cmp        eax, 0x2
000000000000973e         jne        loc_88d4

0000000000009744         test       byte [rbp+var_348], 0x1
000000000000974b         je         loc_88d4

0000000000009751         mov        rax, qword [rbp+var_370]
0000000000009758         lea        rdi, qword [r12+rax]
000000000000975c         call       xmalloc                                     ; xmalloc
0000000000009761         lea        rcx, qword [rax+r12-1]
0000000000009766         mov        qword [rbp+var_330], rax
000000000000976d         xor        edx, edx
000000000000976f         mov        rax, rcx
0000000000009772         div        r12
0000000000009775         sub        rcx, rdx
0000000000009778         mov        qword [rbp+var_3B0], rcx

                     loc_977f:
000000000000977f         mov        eax, dword [rbx+0xc]                        ; CODE XREF=copy_internal+16051
0000000000009782         mov        dword [rbp+var_390], eax
0000000000009788         movzx      eax, byte [rbp+var_338]
000000000000978f         mov        byte [rbp+var_3A5], al
0000000000009795         jmp        loc_89bc

                     loc_979a:
000000000000979a         mov        rax, qword [rbp+var_130]                    ; CODE XREF=copy_internal+12152
00000000000097a1         cqo
00000000000097a3         idiv       r8
00000000000097a6         cmp        qword [rbp+var_120], rax
00000000000097ad         setl       al
00000000000097b0         movzx      eax, al
00000000000097b3         mov        dword [rbp+var_348], eax
00000000000097b9         jmp        loc_88be

                     loc_97be:
00000000000097be         mov        rax, qword [rbp+var_370]                    ; CODE XREF=copy_internal+15861
00000000000097c5         lea        rdi, qword [r12+rax]
00000000000097c9         call       xmalloc                                     ; xmalloc
00000000000097ce         lea        rcx, qword [rax+r12-1]
00000000000097d3         xor        edx, edx
00000000000097d5         mov        qword [rbp+var_330], rax
00000000000097dc         mov        rax, rcx
00000000000097df         div        r12
00000000000097e2         sub        rcx, rdx
00000000000097e5         cmp        dword [rbp+var_348], 0x0
00000000000097ec         mov        qword [rbp+var_3B0], rcx
00000000000097f3         jne        loc_977f

00000000000097f5         xor        r9d, r9d
00000000000097f8         cmp        dword [rbx+0xc], 0x3
00000000000097fc         lea        rax, qword [rbp+var_2F0]
0000000000009803         mov        qword [rbp+var_348], rax
000000000000980a         sete       r9b
000000000000980e         jmp        loc_9441

                     loc_9813:
0000000000009813         mov        rdx, qword [rbp+var_308]                    ; CODE XREF=copy_internal+14776
000000000000981a         mov        esi, 0x3
000000000000981f         xor        edi, edi
0000000000009821         mov        rbx, qword [rbp+var_388]
0000000000009828         mov        r13d, dword [rbp+var_360]
000000000000982f         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000009834         lea        rsi, qword [aSWriteFailed]                  ; "%s: write failed"
000000000000983b         mov        r12, rax
000000000000983e         mov        edx, 0x5

                     loc_9843:
0000000000009843         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=copy_internal+16605
0000000000009845         call       j_dcgettext                                 ; dcgettext
000000000000984a         mov        qword [rbp+var_338], rax
0000000000009851         call       j___errno_location                          ; __errno_location
0000000000009856         mov        rdx, qword [rbp+var_338]                    ; argument "__format" for method j_error
000000000000985d         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000985f         mov        rcx, r12
0000000000009862         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000009864         xor        eax, eax
0000000000009866         call       j_error                                     ; error
000000000000986b         jmp        loc_8bc6

                     loc_9870:
0000000000009870         mov        rdx, qword [rbp+var_310]                    ; CODE XREF=copy_internal+15635
0000000000009877         mov        esi, 0x3
000000000000987c         xor        edi, edi
000000000000987e         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000009883         mov        edx, 0x5
0000000000009888         mov        r12, rax
000000000000988b         lea        rsi, qword [aSFailedToGetEx]                ; "%s: failed to get extents info"
0000000000009892         jmp        loc_94da

                     loc_9897:
0000000000009897         call       cached_umask                                ; cached_umask, CODE XREF=copy_internal+13916
000000000000989c         mov        esi, dword [rbp+var_328]
00000000000098a2         not        eax
00000000000098a4         mov        rdi, qword [rbp+var_308]
00000000000098ab         mov        edx, eax
00000000000098ad         mov        r14d, r12d
00000000000098b0         and        edx, 0x1b6
00000000000098b6         call       set_acl                                     ; set_acl
00000000000098bb         test       eax, eax
00000000000098bd         sete       r8b
00000000000098c1         jmp        loc_8bd5

                     loc_98c6:
00000000000098c6         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+13134
00000000000098cd         mov        edi, 0x4
00000000000098d2         call       quotearg_style                              ; quotearg_style
00000000000098d7         lea        rsi, qword [aCannotRemoveS]                 ; argument "msgid" for method j_dcgettext, "cannot remove %s"
00000000000098de         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000098e3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000098e5         mov        qword [rbp+var_328], rax
00000000000098ec         call       j_dcgettext                                 ; dcgettext
00000000000098f1         mov        rcx, qword [rbp+var_328]
00000000000098f8         mov        rdx, rax
00000000000098fb         mov        esi, dword [r12]
00000000000098ff         jmp        loc_7a81

                     loc_9904:
0000000000009904         lea        rsi, qword [aFailedToPreser]                ; argument "msgid" for method j_dcgettext, "failed to preserve ownership for %s", CODE XREF=copy_internal+14276
000000000000990b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000990d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009912         call       j_dcgettext                                 ; dcgettext
0000000000009917         mov        r12, rax
000000000000991a         call       j___errno_location                          ; __errno_location
000000000000991f         mov        rcx, qword [rbp+var_308]
0000000000009926         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000009928         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000992a         xor        eax, eax
000000000000992c         mov        rdx, r12                                    ; argument "__format" for method j_error
000000000000992f         call       j_error                                     ; error
0000000000009934         movzx      r8d, byte [rbx+0x24]
0000000000009939         test       r8b, r8b
000000000000993c         jne        loc_68d0

0000000000009942         jmp        loc_5ebf

                     loc_9947:
0000000000009947         mov        rsi, qword [rbp+var_308]                    ; CODE XREF=copy_internal+14361
000000000000994e         mov        edi, 0x4
0000000000009953         mov        byte [rbp+var_328], r8b
000000000000995a         call       quotearg_style                              ; quotearg_style
000000000000995f         lea        rsi, qword [aNotWritingThro]                ; argument "msgid" for method j_dcgettext, "not writing through dangling symlink %s"
0000000000009966         mov        r12, rax
0000000000009969         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000996e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009970         call       j_dcgettext                                 ; dcgettext
0000000000009975         mov        rcx, r12
0000000000009978         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000997b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000997d         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000997f         xor        eax, eax
0000000000009981         call       j_error                                     ; error
0000000000009986         mov        qword [rbp+var_330], 0x0
0000000000009991         movzx      r8d, byte [rbp+var_328]
0000000000009999         jmp        loc_7a98

                     loc_999e:
000000000000999e         call       j_geteuid                                   ; geteuid, CODE XREF=copy_internal+13873
00000000000099a3         test       eax, eax
00000000000099a5         je         loc_8f77

00000000000099ab         mov        rsi, qword [rbp+var_308]
00000000000099b2         mov        edi, dword [rbp+var_328]
00000000000099b8         mov        edx, 0x180
00000000000099bd         call       fchmod_or_lchmod                            ; fchmod_or_lchmod
00000000000099c2         test       eax, eax
00000000000099c4         jne        loc_8f77

00000000000099ca         mov        edx, dword [rbp+var_378]
00000000000099d0         mov        rsi, qword [rbp+var_308]
00000000000099d7         mov        edi, dword [rbp+var_328]
00000000000099dd         not        edx
00000000000099df         and        edx, dword [rbp+var_3A4]
00000000000099e5         call       fchmod_or_lchmod                            ; fchmod_or_lchmod
00000000000099ea         jmp        loc_8f77

                     loc_99ef:
00000000000099ef         mov        rsi, qword [rbp+var_310]                    ; CODE XREF=copy_internal+12858
00000000000099f6         mov        edi, 0x4
00000000000099fb         mov        rbx, qword [rbp+var_388]
0000000000009a02         mov        r13d, dword [rbp+var_360]
0000000000009a09         call       quotearg_style                              ; quotearg_style
0000000000009a0e         mov        edx, 0x5
0000000000009a13         mov        r12, rax
0000000000009a16         lea        rsi, qword [aCannotLseekS]                  ; "cannot lseek %s"
0000000000009a1d         jmp        loc_9843

                     loc_9a22:
0000000000009a22         mov        edx, dword [rbx+0x10]                       ; CODE XREF=copy_internal+13903
0000000000009a25         mov        esi, dword [rbp+var_328]
0000000000009a2b         mov        rdi, qword [rbp+var_308]
0000000000009a32         call       set_acl                                     ; set_acl
0000000000009a37         test       eax, eax
0000000000009a39         sete       r8b
0000000000009a3d         jmp        loc_8bd5

                     loc_9a42:
0000000000009a42         call       sub_2c80                                    ; sub_2c80, CODE XREF=copy_internal+14597
0000000000009a47         jmp        loc_85fa
0000000000009a4c         align      16                                          ; End of unwind block (FDE at 0x183ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_11: int8_t, -17


                     copy:
0000000000009a50         sub        rsp, 0x18                                   ; Begin of unwind block (FDE at 0x1841c), CODE XREF=do_move+43
0000000000009a54         mov        rax, qword [fs:0x28]
0000000000009a5d         mov        qword [rsp+0x18+var_10], rax
0000000000009a62         xor        eax, eax
0000000000009a64         test       rcx, rcx
0000000000009a67         je         loc_9b96

0000000000009a6d         cmp        dword [rcx], 0x3
0000000000009a70         ja         loc_9b77

0000000000009a76         mov        eax, dword [rcx+0xc]
0000000000009a79         lea        r10d, dword [rax-1]
0000000000009a7d         cmp        r10d, 0x2
0000000000009a81         ja         loc_9b58

0000000000009a87         mov        r10d, dword [rcx+0x38]
0000000000009a8b         cmp        r10d, 0x2
0000000000009a8f         ja         loc_9b39

0000000000009a95         cmp        byte [rcx+0x17], 0x0
0000000000009a99         jne        loc_9af0

                     loc_9a9b:
0000000000009a9b         cmp        eax, 0x2                                    ; CODE XREF=copy+164
0000000000009a9e         je         loc_9aa6

0000000000009aa0         cmp        r10d, 0x2
0000000000009aa4         je         loc_9b15

                     loc_9aa6:
0000000000009aa6         mov        byte [rsp+0x18+var_11], 0x0                 ; CODE XREF=copy+78
0000000000009aab         push       r9
0000000000009aad         movzx      edx, dl
0000000000009ab0         push       r8
0000000000009ab2         mov        r9, rcx
0000000000009ab5         xor        r8d, r8d
0000000000009ab8         xor        ecx, ecx
0000000000009aba         mov        qword [top_level_dst_name], rsi             ; top_level_dst_name
0000000000009ac1         mov        qword [top_level_src_name], rdi             ; top_level_src_name
0000000000009ac8         lea        rax, qword [rsp+0x28+var_11]
0000000000009acd         push       rax
0000000000009ace         push       0x1
0000000000009ad0         call       copy_internal                               ; copy_internal
0000000000009ad5         add        rsp, 0x20
0000000000009ad9         mov        rsi, qword [rsp+0x18+var_10]
0000000000009ade         xor        rsi, qword [fs:0x28]
0000000000009ae7         jne        loc_9b34

0000000000009ae9         add        rsp, 0x18
0000000000009aed         ret
                        ; endp
0000000000009aee         align      16

                     loc_9af0:
0000000000009af0         cmp        byte [rcx+0x2c], 0x0                        ; CODE XREF=copy+73
0000000000009af4         je         loc_9a9b

0000000000009af6         lea        rcx, qword [__PRETTY_FUNCTION__.7875]       ; argument "__function" for method j___assert_fail, "valid_options"
0000000000009afd         lea        rsi, qword [aCoreutils831sr_1678d]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/copy.c"
0000000000009b04         lea        rdi, qword [aCohardlinkCosy]                ; argument "__assertion" for method j___assert_fail, "!(co->hard_link && co->symbolic_link)"
0000000000009b0b         mov        edx, 0xb8a                                  ; argument "__line" for method j___assert_fail
0000000000009b10         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_9b15:
0000000000009b15         lea        rcx, qword [__PRETTY_FUNCTION__.7875]       ; argument "__function" for method j___assert_fail, "valid_options", CODE XREF=copy+84
0000000000009b1c         lea        rsi, qword [aCoreutils831sr_1678d]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/copy.c"
0000000000009b23         lea        rdi, qword [aCoreflinkmodeR]                ; argument "__assertion" for method j___assert_fail, "! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARSE_AUTO)"
0000000000009b2a         mov        edx, 0xb8d                                  ; argument "__line" for method j___assert_fail
0000000000009b2f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_9b34:
0000000000009b34         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=copy+151
                        ; endp

                     loc_9b39:
0000000000009b39         lea        rcx, qword [__PRETTY_FUNCTION__.7875]       ; argument "__function" for method j___assert_fail, "valid_options", CODE XREF=copy+63
0000000000009b40         lea        rsi, qword [aCoreutils831sr_1678d]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/copy.c"
0000000000009b47         lea        rdi, qword [aValidreflinkmo]                ; argument "__assertion" for method j___assert_fail, "VALID_REFLINK_MODE (co->reflink_mode)"
0000000000009b4e         mov        edx, 0xb89                                  ; argument "__line" for method j___assert_fail
0000000000009b53         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_9b58:
0000000000009b58         lea        rcx, qword [__PRETTY_FUNCTION__.7875]       ; argument "__function" for method j___assert_fail, "valid_options", CODE XREF=copy+49
0000000000009b5f         lea        rsi, qword [aCoreutils831sr_1678d]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/copy.c"
0000000000009b66         lea        rdi, qword [aValidsparsemod]                ; argument "__assertion" for method j___assert_fail, "VALID_SPARSE_MODE (co->sparse_mode)"
0000000000009b6d         mov        edx, 0xb88                                  ; argument "__line" for method j___assert_fail
0000000000009b72         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_9b77:
0000000000009b77         lea        rcx, qword [__PRETTY_FUNCTION__.7875]       ; argument "__function" for method j___assert_fail, "valid_options", CODE XREF=copy+32
0000000000009b7e         lea        rsi, qword [aCoreutils831sr_1678d]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/copy.c"
0000000000009b85         lea        rdi, qword [aValidbackuptyp]                ; argument "__assertion" for method j___assert_fail, "VALID_BACKUP_TYPE (co->backup_type)"
0000000000009b8c         mov        edx, 0xb87                                  ; argument "__line" for method j___assert_fail
0000000000009b91         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_9b96:
0000000000009b96         lea        rcx, qword [__PRETTY_FUNCTION__.7875]       ; argument "__function" for method j___assert_fail, "valid_options", CODE XREF=copy+23
0000000000009b9d         lea        rsi, qword [aCoreutils831sr_1678d]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/copy.c"
0000000000009ba4         lea        rdi, qword [aCoNull]                        ; argument "__assertion" for method j___assert_fail, "co != NULL"
0000000000009bab         mov        edx, 0xb86                                  ; argument "__line" for method j___assert_fail
0000000000009bb0         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000009bb5         align      64                                          ; End of unwind block (FDE at 0x1841c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     src_to_dest_hash:
0000000000009bc0         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x1844c), DATA XREF=hash_init+14
0000000000009bc3         xor        edx, edx
0000000000009bc5         div        rsi
0000000000009bc8         mov        rax, rdx
0000000000009bcb         ret
                        ; endp
0000000000009bcc         align      16                                          ; End of unwind block (FDE at 0x1844c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     src_to_dest_compare:
0000000000009bd0         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x18460), DATA XREF=hash_init+7
0000000000009bd2         mov        rdx, qword [rsi]
0000000000009bd5         cmp        qword [rdi], rdx
0000000000009bd8         je         loc_9be0

0000000000009bda         ret
                        ; endp
0000000000009bdc         align      32

                     loc_9be0:
0000000000009be0         mov        rax, qword [rsi+8]                          ; CODE XREF=src_to_dest_compare+8
0000000000009be4         cmp        qword [rdi+8], rax
0000000000009be8         sete       al
0000000000009beb         ret
                        ; endp
0000000000009bec         align      16                                          ; End of unwind block (FDE at 0x18460)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     src_to_dest_free:
0000000000009bf0         push       rbx                                         ; Begin of unwind block (FDE at 0x18474), DATA XREF=hash_init
0000000000009bf1         mov        rbx, rdi
0000000000009bf4         mov        rdi, qword [rdi+0x10]
0000000000009bf8         call       sub_2c80                                    ; sub_2c80
0000000000009bfd         mov        rdi, rbx
0000000000009c00         pop        rbx
0000000000009c01         jmp        sub_2c80                                    ; sub_2c80
                        ; endp
0000000000009c06         align      16                                          ; End of unwind block (FDE at 0x18474)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     forget_created:
0000000000009c10         push       rbx                                         ; Begin of unwind block (FDE at 0x18490), CODE XREF=copy_internal+4557, copy_internal+6222
0000000000009c11         sub        rsp, 0x20
0000000000009c15         mov        qword [rsp+0x28+var_28], rdi
0000000000009c19         mov        rdi, qword [src_to_dest]                    ; src_to_dest
0000000000009c20         mov        qword [rsp+0x28+var_20], rsi
0000000000009c25         mov        rsi, rsp
0000000000009c28         mov        qword [rsp+0x28+var_18], 0x0
0000000000009c31         mov        rax, qword [fs:0x28]
0000000000009c3a         mov        qword [rsp+0x28+var_10], rax
0000000000009c3f         xor        eax, eax
0000000000009c41         call       hash_delete                                 ; hash_delete
0000000000009c46         test       rax, rax
0000000000009c49         je         loc_9c5f

0000000000009c4b         mov        rdi, qword [rax+0x10]
0000000000009c4f         mov        rbx, rax
0000000000009c52         call       sub_2c80                                    ; sub_2c80
0000000000009c57         mov        rdi, rbx
0000000000009c5a         call       sub_2c80                                    ; sub_2c80

                     loc_9c5f:
0000000000009c5f         mov        rax, qword [rsp+0x28+var_10]                ; CODE XREF=forget_created+57
0000000000009c64         xor        rax, qword [fs:0x28]
0000000000009c6d         jne        loc_9c75

0000000000009c6f         add        rsp, 0x20
0000000000009c73         pop        rbx
0000000000009c74         ret
                        ; endp

                     loc_9c75:
0000000000009c75         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=forget_created+93
                        ; endp
0000000000009c7a         align      128                                         ; End of unwind block (FDE at 0x18490)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     src_to_dest_lookup:
0000000000009c80         sub        rsp, 0x28                                   ; Begin of unwind block (FDE at 0x184b4), CODE XREF=copy_internal+6419, copy_internal+6518
0000000000009c84         mov        qword [rsp+0x28+var_28], rdi
0000000000009c88         mov        rdi, qword [src_to_dest]                    ; src_to_dest
0000000000009c8f         mov        qword [rsp+0x28+var_20], rsi
0000000000009c94         mov        rsi, rsp
0000000000009c97         mov        rax, qword [fs:0x28]
0000000000009ca0         mov        qword [rsp+0x28+var_10], rax
0000000000009ca5         xor        eax, eax
0000000000009ca7         call       hash_lookup                                 ; hash_lookup
0000000000009cac         test       rax, rax
0000000000009caf         je         loc_9cd0

0000000000009cb1         mov        rax, qword [rax+0x10]

                     loc_9cb5:
0000000000009cb5         mov        rdx, qword [rsp+0x28+var_10]                ; CODE XREF=src_to_dest_lookup+82
0000000000009cba         xor        rdx, qword [fs:0x28]
0000000000009cc3         jne        loc_9cd4

0000000000009cc5         add        rsp, 0x28
0000000000009cc9         ret
                        ; endp
0000000000009cca         align      16

                     loc_9cd0:
0000000000009cd0         xor        eax, eax                                    ; CODE XREF=src_to_dest_lookup+47
0000000000009cd2         jmp        loc_9cb5

                     loc_9cd4:
0000000000009cd4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=src_to_dest_lookup+67
                        ; endp
0000000000009cd9         align      32                                          ; End of unwind block (FDE at 0x184b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     remember_copied:
0000000000009ce0         push       r13                                         ; Begin of unwind block (FDE at 0x184d0), CODE XREF=copy_internal+716, copy_internal+4209, copy_internal+5405, copy_internal+11009
0000000000009ce2         push       r12
0000000000009ce4         mov        r13, rdi
0000000000009ce7         push       rbp
0000000000009ce8         push       rbx
0000000000009ce9         mov        edi, 0x18                                   ; argument #1 for method xmalloc
0000000000009cee         mov        r12, rsi
0000000000009cf1         mov        rbp, rdx
0000000000009cf4         sub        rsp, 0x8
0000000000009cf8         call       xmalloc                                     ; xmalloc
0000000000009cfd         mov        rdi, r13                                    ; argument #1 for method xstrdup
0000000000009d00         mov        rbx, rax
0000000000009d03         call       xstrdup                                     ; xstrdup
0000000000009d08         mov        rdi, qword [src_to_dest]                    ; argument #1 for method hash_insert, src_to_dest
0000000000009d0f         mov        rsi, rbx                                    ; argument #2 for method hash_insert
0000000000009d12         mov        qword [rbx+0x10], rax
0000000000009d16         mov        qword [rbx], r12
0000000000009d19         mov        qword [rbx+8], rbp
0000000000009d1d         call       hash_insert                                 ; hash_insert
0000000000009d22         test       rax, rax
0000000000009d25         je         loc_9d54

0000000000009d27         cmp        rbx, rax
0000000000009d2a         mov        rbp, rax
0000000000009d2d         je         loc_9d50

0000000000009d2f         mov        rdi, qword [rbx+0x10]
0000000000009d33         call       sub_2c80                                    ; sub_2c80
0000000000009d38         mov        rdi, rbx
0000000000009d3b         call       sub_2c80                                    ; sub_2c80
0000000000009d40         mov        rax, qword [rbp+0x10]

                     loc_9d44:
0000000000009d44         add        rsp, 0x8                                    ; CODE XREF=remember_copied+114
0000000000009d48         pop        rbx
0000000000009d49         pop        rbp
0000000000009d4a         pop        r12
0000000000009d4c         pop        r13
0000000000009d4e         ret
                        ; endp
0000000000009d4f         align      16

                     loc_9d50:
0000000000009d50         xor        eax, eax                                    ; CODE XREF=remember_copied+77
0000000000009d52         jmp        loc_9d44

                     loc_9d54:
0000000000009d54         call       xalloc_die                                  ; xalloc_die, CODE XREF=remember_copied+69
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9d59:
0000000000009d59         nop        dword [rax]                                 ; End of unwind block (FDE at 0x184d0)
                     hash_init:
0000000000009d60         lea        r8, qword [src_to_dest_free]                ; Begin of unwind block (FDE at 0x1850c), argument #5 for method hash_initialize, src_to_dest_free, CODE XREF=main+990
0000000000009d67         lea        rcx, qword [src_to_dest_compare]            ; argument #4 for method hash_initialize, src_to_dest_compare
0000000000009d6e         lea        rdx, qword [src_to_dest_hash]               ; argument #3 for method hash_initialize, src_to_dest_hash
0000000000009d75         sub        rsp, 0x8
0000000000009d79         xor        esi, esi                                    ; argument #2 for method hash_initialize
0000000000009d7b         mov        edi, 0x67                                   ; argument #1 for method hash_initialize
0000000000009d80         call       hash_initialize                             ; hash_initialize
0000000000009d85         test       rax, rax
0000000000009d88         mov        qword [src_to_dest], rax                    ; src_to_dest
0000000000009d8f         je         loc_9d96

0000000000009d91         add        rsp, 0x8
0000000000009d95         ret
                        ; endp

                     loc_9d96:
0000000000009d96         call       xalloc_die                                  ; xalloc_die, CODE XREF=hash_init+47
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9d9b:
0000000000009d9b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x1850c)
                     forget_all:
0000000000009da0         mov        rdi, qword [src_to_dest]                    ; Begin of unwind block (FDE at 0x18528), src_to_dest
0000000000009da7         jmp        hash_free                                   ; hash_free
                        ; endp
0000000000009dac         align      16                                          ; End of unwind block (FDE at 0x18528)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     extent_scan_init:
0000000000009db0         mov        dword [rsi], edi                            ; Begin of unwind block (FDE at 0x1853c), CODE XREF=copy_internal+12452
0000000000009db2         mov        qword [rsi+0x18], 0x0
0000000000009dba         mov        qword [rsi+0x28], 0x0
0000000000009dc2         mov        qword [rsi+8], 0x0
0000000000009dca         mov        byte [rsi+0x20], 0x0
0000000000009dce         mov        byte [rsi+0x21], 0x0
0000000000009dd2         mov        dword [rsi+0x10], 0x1
0000000000009dd9         ret
                        ; endp
0000000000009dda         align      32                                          ; End of unwind block (FDE at 0x1853c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_1018: int64_t, -4120
        ;    var_1028: int64_t, -4136
        ;    var_1030: int32_t, -4144
        ;    var_1034: int32_t, -4148
        ;    var_1038: int32_t, -4152
        ;    var_1040: int64_t, -4160
        ;    var_1048: int64_t, -4168


                     extent_scan_read:
0000000000009de0         push       r15                                         ; Begin of unwind block (FDE at 0x18550), CODE XREF=copy_internal+12522
0000000000009de2         push       r14
0000000000009de4         xor        r15d, r15d
0000000000009de7         push       r13
0000000000009de9         push       r12
0000000000009deb         mov        r14, rdi
0000000000009dee         push       rbp
0000000000009def         push       rbx
0000000000009df0         movabs     r13, 0x7fffffffffffffff
0000000000009dfa         sub        rsp, aCationname                            ; "cation_name"
0000000000009e01         mov        rbx, qword [rdi+0x28]
0000000000009e05         mov        rdx, qword [rdi+8]
0000000000009e09         mov        rbp, rsp
0000000000009e0c         mov        rax, qword [fs:0x28]
0000000000009e15         mov        qword [rsp+0x1048+var_40], rax
0000000000009e1d         xor        eax, eax
0000000000009e1f         lea        r12, qword [rbp+0x20]

                     loc_9e23:
0000000000009e23         xor        eax, eax                                    ; CODE XREF=extent_scan_read+698
0000000000009e25         mov        ecx, 0x200
0000000000009e2a         mov        rdi, rbp
0000000000009e2d         rep stosq  qword [rdi], rax
0000000000009e30         mov        eax, dword [r14+0x10]
0000000000009e34         mov        edi, dword [r14]                            ; argument "__fd" for method j_ioctl
0000000000009e37         mov        esi, 0xc020660b                             ; argument "__request" for method j_ioctl
0000000000009e3c         mov        qword [rsp+0x1048+var_1048], rdx
0000000000009e40         not        rdx
0000000000009e43         mov        dword [rsp+0x1048+var_1030], 0x48
0000000000009e4b         mov        qword [rsp+0x1048+var_1040], rdx
0000000000009e50         mov        rdx, rbp
0000000000009e53         mov        dword [rsp+0x1048+var_1038], eax
0000000000009e57         xor        eax, eax
0000000000009e59         call       j_ioctl                                     ; ioctl
0000000000009e5e         test       eax, eax
0000000000009e60         js         loc_9f30

0000000000009e66         mov        eax, dword [rsp+0x1048+var_1034]
0000000000009e6a         test       eax, eax
0000000000009e6c         je         loc_a0a8

0000000000009e72         mov        rcx, qword [r14+0x18]
0000000000009e76         mov        rdx, rax
0000000000009e79         not        rdx
0000000000009e7c         cmp        rcx, rdx
0000000000009e7f         ja         loc_a0ba

0000000000009e85         mov        rdi, qword [r14+0x28]
0000000000009e89         mov        edx, 0x18
0000000000009e8e         add        rcx, rax
0000000000009e91         mov        rax, rdx
0000000000009e94         xor        esi, esi
0000000000009e96         mov        qword [r14+0x18], rcx
0000000000009e9a         sub        rbx, rdi
0000000000009e9d         mul        rcx
0000000000009ea0         jo         loc_a0d9

                     loc_9ea6:
0000000000009ea6         test       rax, rax                                    ; CODE XREF=extent_scan_read+766
0000000000009ea9         js         loc_a0e3

0000000000009eaf         test       rsi, rsi
0000000000009eb2         jne        loc_a0e3

0000000000009eb8         lea        rsi, qword [rcx+rcx*2]
0000000000009ebc         shl        rsi, 0x3                                    ; argument #2 for method xrealloc
0000000000009ec0         call       xrealloc                                    ; xrealloc
0000000000009ec5         mov        r8d, dword [rsp+0x1048+var_1034]
0000000000009eca         add        rbx, rax
0000000000009ecd         mov        qword [r14+0x28], rax
0000000000009ed1         test       r8d, r8d
0000000000009ed4         je         loc_a010

0000000000009eda         mov        rax, qword [rsp+0x1048+var_1018]
0000000000009edf         mov        rdx, qword [rsp+0x1048+var_1028]
0000000000009ee4         mov        rcx, r13
0000000000009ee7         sub        rcx, rax
0000000000009eea         cmp        rdx, rcx
0000000000009eed         ja         loc_9fca

0000000000009ef3         xor        ecx, ecx
0000000000009ef5         mov        rsi, r12

                     loc_9ef8:
0000000000009ef8         test       r15d, r15d                                  ; CODE XREF=extent_scan_read+484
0000000000009efb         je         loc_9f70

0000000000009efd         mov        r9d, dword [rsi+0x28]
0000000000009f01         mov        r10, qword [rbx+8]
0000000000009f05         mov        rdi, qword [rbx]
0000000000009f08         mov        r11d, r9d
0000000000009f0b         add        rdi, r10
0000000000009f0e         and        r11d, 0xfffffffe
0000000000009f12         cmp        dword [rbx+0x10], r11d
0000000000009f16         je         loc_9ff0

                     loc_9f1c:
0000000000009f1c         cmp        rdi, rdx                                    ; CODE XREF=extent_scan_read+531
0000000000009f1f         jbe        loc_9f7d

                     loc_9f21:
0000000000009f21         mov        r10, rdi                                    ; CODE XREF=extent_scan_read+407
0000000000009f24         sub        r10, rdx
0000000000009f27         cmp        r10, rax
0000000000009f2a         jae        loc_a048

                     loc_9f30:
0000000000009f30         xor        eax, eax                                    ; CODE XREF=extent_scan_read+128
0000000000009f32         cmp        qword [r14+8], 0x0
0000000000009f37         jne        loc_9f40

0000000000009f39         mov        byte [r14+0x20], 0x1
0000000000009f3e         xor        eax, eax

                     loc_9f40:
0000000000009f40         mov        rbx, qword [rsp+0x1048+var_40]              ; CODE XREF=extent_scan_read+343, extent_scan_read+657, extent_scan_read+725
0000000000009f48         xor        rbx, qword [fs:0x28]
0000000000009f51         jne        loc_a0e8

0000000000009f57         add        rsp, aCationname                            ; "cation_name"
0000000000009f5e         pop        rbx
0000000000009f5f         pop        rbp
0000000000009f60         pop        r12
0000000000009f62         pop        r13
0000000000009f64         pop        r14
0000000000009f66         pop        r15
0000000000009f68         ret
                        ; endp
0000000000009f69         align      16

                     loc_9f70:
0000000000009f70         mov        rdi, qword [r14+8]                          ; CODE XREF=extent_scan_read+283
0000000000009f74         cmp        rdi, rdx
0000000000009f77         ja         loc_9f21

0000000000009f79         mov        r9d, dword [rsi+0x28]

                     loc_9f7d:
0000000000009f7d         mov        esi, r15d                                   ; CODE XREF=extent_scan_read+319
0000000000009f80         add        r15d, 0x1
0000000000009f84         lea        rdi, qword [rsi+rsi*2]
0000000000009f88         mov        rsi, qword [r14+0x28]
0000000000009f8c         lea        rbx, qword [rsi+rdi*8]
0000000000009f90         mov        qword [rbx], rdx
0000000000009f93         mov        qword [rbx+8], rax
0000000000009f97         mov        dword [rbx+0x10], r9d

                     loc_9f9b:
0000000000009f9b         add        ecx, 0x1                                    ; CODE XREF=extent_scan_read+629
0000000000009f9e         cmp        ecx, r8d
0000000000009fa1         jae        loc_a010

                     loc_9fa3:
0000000000009fa3         mov        edx, ecx                                    ; CODE XREF=extent_scan_read+554
0000000000009fa5         mov        rdi, r13
0000000000009fa8         lea        rax, qword [rdx*8]
0000000000009fb0         sub        rax, rdx
0000000000009fb3         lea        rsi, qword [r12+rax*8]
0000000000009fb7         mov        rax, qword [rsi+0x10]
0000000000009fbb         mov        rdx, qword [rsi]
0000000000009fbe         sub        rdi, rax
0000000000009fc1         cmp        rdx, rdi
0000000000009fc4         jbe        loc_9ef8

                     loc_9fca:
0000000000009fca         lea        rcx, qword [__PRETTY_FUNCTION__.6956]       ; argument "__function" for method j___assert_fail, "extent_scan_read", CODE XREF=extent_scan_read+269
0000000000009fd1         lea        rsi, qword [aCoreutils831sr_167c8]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/extent-scan.c"
0000000000009fd8         lea        rdi, qword [aFmextentsifelo]                ; argument "__assertion" for method j___assert_fail, "fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length"
0000000000009fdf         mov        edx, 0x8d                                   ; argument "__line" for method j___assert_fail
0000000000009fe4         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000009fe9         align      16

                     loc_9ff0:
0000000000009ff0         cmp        rdi, rdx                                    ; CODE XREF=extent_scan_read+310
0000000000009ff3         jne        loc_9f1c

0000000000009ff9         add        ecx, 0x1
0000000000009ffc         add        rax, r10
0000000000009fff         mov        dword [rbx+0x10], r9d
000000000000a003         cmp        ecx, r8d
000000000000a006         mov        qword [rbx+8], rax
000000000000a00a         jb         loc_9fa3

000000000000a00c         nop        dword [rax]

                     loc_a010:
000000000000a010         test       byte [rbx+0x10], 0x1                        ; CODE XREF=extent_scan_read+244, extent_scan_read+449
000000000000a014         jne        loc_a060

000000000000a016         cmp        r15d, 0x48
000000000000a01a         movzx      eax, byte [r14+0x21]
000000000000a01f         jbe        loc_a080

000000000000a021         test       al, al
000000000000a023         jne        loc_a065

000000000000a025         lea        eax, dword [r15-1]
000000000000a029         mov        rdx, qword [r14+0x28]
000000000000a02d         lea        rcx, qword [rax+rax*2]
000000000000a031         mov        qword [r14+0x18], rax
000000000000a035         mov        rax, qword [rdx+rcx*8-0x18]
000000000000a03a         add        rax, qword [rdx+rcx*8-0x10]
000000000000a03f         mov        qword [r14+8], rax
000000000000a043         jmp        loc_a06c
000000000000a045         align      8

                     loc_a048:
000000000000a048         sub        rax, r10                                    ; CODE XREF=extent_scan_read+330
000000000000a04b         mov        qword [rsi], rdi
000000000000a04e         sub        ecx, 0x1
000000000000a051         mov        qword [rsi+0x10], rax
000000000000a055         jmp        loc_9f9b
000000000000a05a         align      32

                     loc_a060:
000000000000a060         mov        byte [r14+0x21], 0x1                        ; CODE XREF=extent_scan_read+564

                     loc_a065:
000000000000a065         mov        eax, r15d                                   ; CODE XREF=extent_scan_read+579
000000000000a068         mov        qword [r14+0x18], rax

                     loc_a06c:
000000000000a06c         mov        eax, 0x1                                    ; CODE XREF=extent_scan_read+611, extent_scan_read+681, extent_scan_read+704
000000000000a071         jmp        loc_9f40
000000000000a076         align      128

                     loc_a080:
000000000000a080         mov        ecx, r15d                                   ; CODE XREF=extent_scan_read+575
000000000000a083         test       al, al
000000000000a085         mov        qword [r14+0x18], rcx
000000000000a089         jne        loc_a06c

000000000000a08b         mov        rdx, qword [rbx+8]
000000000000a08f         add        rdx, qword [rbx]
000000000000a092         cmp        r15d, 0x47
000000000000a096         mov        qword [r14+8], rdx
000000000000a09a         jbe        loc_9e23

000000000000a0a0         jmp        loc_a06c
000000000000a0a2         align      8

                     loc_a0a8:
000000000000a0a8         cmp        qword [r14+8], 0x0                          ; CODE XREF=extent_scan_read+140
000000000000a0ad         mov        byte [r14+0x21], 0x1
000000000000a0b2         setne      al
000000000000a0b5         jmp        loc_9f40

                     loc_a0ba:
000000000000a0ba         lea        rcx, qword [__PRETTY_FUNCTION__.6956]       ; argument "__function" for method j___assert_fail, "extent_scan_read", CODE XREF=extent_scan_read+159
000000000000a0c1         lea        rsi, qword [aCoreutils831sr_167c8]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/extent-scan.c"
000000000000a0c8         lea        rdi, qword [aScaneicountSiz]                ; argument "__assertion" for method j___assert_fail, "scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents"
000000000000a0cf         mov        edx, 0x7e                                   ; argument "__line" for method j___assert_fail
000000000000a0d4         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_a0d9:
000000000000a0d9         mov        esi, 0x1                                    ; CODE XREF=extent_scan_read+192
000000000000a0de         jmp        loc_9ea6

                     loc_a0e3:
000000000000a0e3         call       xalloc_die                                  ; xalloc_die, CODE XREF=extent_scan_read+201, extent_scan_read+210
                        ; endp

                     loc_a0e8:
000000000000a0e8         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=extent_scan_read+369
                        ; endp
000000000000a0ed         align      16                                          ; End of unwind block (FDE at 0x18550)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     try_link:
000000000000a0f0         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x185a4), DATA XREF=force_linkat+113
000000000000a0f3         mov        rcx, rdi                                    ; argument "__to" for method j_linkat
000000000000a0f6         mov        edx, dword [rsi+0x10]                       ; argument "__tofd" for method j_linkat
000000000000a0f9         mov        r8d, dword [rax+0x14]                       ; argument "__flags" for method j_linkat
000000000000a0fd         mov        rsi, qword [rsi+8]                          ; argument "__from" for method j_linkat
000000000000a101         mov        edi, dword [rax]                            ; argument "__fromfd" for method j_linkat
000000000000a103         jmp        j_linkat                                    ; linkat
                        ; endp
000000000000a108         align      16                                          ; End of unwind block (FDE at 0x185a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     samedir_template:
000000000000a110         push       r12                                         ; Begin of unwind block (FDE at 0x185b8), CODE XREF=force_linkat+91, force_symlinkat+73
000000000000a112         push       rbp
000000000000a113         mov        rbp, rdi
000000000000a116         push       rbx
000000000000a117         mov        r12, rsi
000000000000a11a         call       last_component                              ; last_component
000000000000a11f         sub        rax, rbp
000000000000a122         lea        rdi, qword [rax+9]
000000000000a126         mov        rbx, rax
000000000000a129         cmp        rdi, 0x100
000000000000a130         jbe        loc_a141

000000000000a132         call       j_malloc                                    ; malloc
000000000000a137         mov        r12, rax
000000000000a13a         xor        eax, eax
000000000000a13c         test       r12, r12
000000000000a13f         je         loc_a163

                     loc_a141:
000000000000a141         mov        rdx, rbx                                    ; argument "__n" for method j_mempcpy, CODE XREF=samedir_template+32
000000000000a144         mov        rsi, rbp                                    ; argument "__src" for method j_mempcpy
000000000000a147         mov        rdi, r12                                    ; argument "__dest" for method j_mempcpy
000000000000a14a         call       j_mempcpy                                   ; mempcpy
000000000000a14f         movabs     rcx, 0x5858585858587543
000000000000a159         mov        byte [rax+8], 0x0
000000000000a15d         mov        qword [rax], rcx
000000000000a160         mov        rax, r12

                     loc_a163:
000000000000a163         pop        rbx                                         ; CODE XREF=samedir_template+47
000000000000a164         pop        rbp
000000000000a165         pop        r12
000000000000a167         ret
                        ; endp
000000000000a168         align      16                                          ; End of unwind block (FDE at 0x185b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     try_symlink:
000000000000a170         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x185e4), DATA XREF=force_symlinkat+95
000000000000a173         mov        rdx, rdi                                    ; argument "__to" for method j_symlinkat
000000000000a176         mov        esi, dword [rsi+8]                          ; argument "__tofd" for method j_symlinkat
000000000000a179         mov        rdi, qword [rax]                            ; argument "__from" for method j_symlinkat
000000000000a17c         jmp        j_symlinkat                                 ; symlinkat
                        ; endp
000000000000a181         align      16                                          ; End of unwind block (FDE at 0x185e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_148: int8_t, -328
        ;    var_154: int32_t, -340
        ;    var_158: int32_t, -344
        ;    var_160: int64_t, -352
        ;    var_168: int32_t, -360
        ;    var_16C: int32_t, -364
        ;    var_178: int64_t, -376


                     force_linkat:
000000000000a190         push       r15                                         ; Begin of unwind block (FDE at 0x185f8), CODE XREF=create_hard_link+52
000000000000a192         push       r14
000000000000a194         mov        r14d, edi
000000000000a197         push       r13
000000000000a199         push       r12
000000000000a19b         mov        r13, rsi
000000000000a19e         push       rbp
000000000000a19f         push       rbx
000000000000a1a0         mov        rbx, rcx
000000000000a1a3         mov        ebp, edx
000000000000a1a5         mov        r12d, r8d
000000000000a1a8         sub        rsp, 0x148
000000000000a1af         mov        ecx, dword [rsp+0x178+arg_0]
000000000000a1b6         mov        rax, qword [fs:0x28]
000000000000a1bf         mov        qword [rsp+0x178+var_40], rax
000000000000a1c7         xor        eax, eax
000000000000a1c9         test       ecx, ecx
000000000000a1cb         js         loc_a280

                     loc_a1d1:
000000000000a1d1         cmp        r9b, 0x1                                    ; CODE XREF=force_linkat+269
000000000000a1d5         jne        loc_a250

000000000000a1d7         cmp        ecx, 0x11
000000000000a1da         jne        loc_a250

000000000000a1dc         lea        rax, qword [rsp+0x178+var_148]
000000000000a1e1         mov        rdi, rbx
000000000000a1e4         mov        rsi, rax
000000000000a1e7         mov        qword [rsp+0x178+var_178], rax
000000000000a1eb         call       samedir_template                            ; samedir_template
000000000000a1f0         test       rax, rax
000000000000a1f3         mov        r15, rax
000000000000a1f6         je         loc_a2e0

000000000000a1fc         lea        rdx, qword [rsp+0x178+var_168]
000000000000a201         lea        rcx, qword [try_link]                       ; try_link
000000000000a208         xor        esi, esi
000000000000a20a         mov        r8d, 0x6
000000000000a210         mov        rdi, rax
000000000000a213         mov        dword [rsp+0x178+var_168], r14d
000000000000a218         mov        qword [rsp+0x178+var_160], r13
000000000000a21d         mov        dword [rsp+0x178+var_158], ebp
000000000000a221         mov        dword [rsp+0x178+var_154], r12d
000000000000a226         call       try_tempname_len                            ; try_tempname_len
000000000000a22b         test       eax, eax
000000000000a22d         je         loc_a2a8

000000000000a22f         call       j___errno_location                          ; __errno_location
000000000000a234         mov        ecx, dword [rax]

                     loc_a236:
000000000000a236         cmp        r15, qword [rsp+0x178+var_178]              ; CODE XREF=force_linkat+331
000000000000a23a         je         loc_a250

000000000000a23c         mov        rdi, r15
000000000000a23f         mov        dword [rsp+0x178+var_178], ecx
000000000000a242         call       sub_2c80                                    ; sub_2c80
000000000000a247         mov        ecx, dword [rsp+0x178+var_178]
000000000000a24a         nop        word [rax+rax]

                     loc_a250:
000000000000a250         mov        rbx, qword [rsp+0x178+var_40]               ; CODE XREF=force_linkat+69, force_linkat+74, force_linkat+170, force_linkat+256, force_linkat+343
000000000000a258         xor        rbx, qword [fs:0x28]
000000000000a261         mov        eax, ecx
000000000000a263         jne        loc_a2ec

000000000000a269         add        rsp, 0x148
000000000000a270         pop        rbx
000000000000a271         pop        rbp
000000000000a272         pop        r12
000000000000a274         pop        r13
000000000000a276         pop        r14
000000000000a278         pop        r15
000000000000a27a         ret
                        ; endp
000000000000a27b         align      128

                     loc_a280:
000000000000a280         mov        rcx, rbx                                    ; argument "__to" for method j_linkat, CODE XREF=force_linkat+59
000000000000a283         mov        dword [rsp+0x178+var_178], r9d
000000000000a287         call       j_linkat                                    ; linkat
000000000000a28c         test       eax, eax
000000000000a28e         mov        ecx, eax
000000000000a290         je         loc_a250

000000000000a292         call       j___errno_location                          ; __errno_location
000000000000a297         mov        r9d, dword [rsp+0x178+var_178]
000000000000a29b         mov        ecx, dword [rax]
000000000000a29d         jmp        loc_a1d1
000000000000a2a2         align      8

                     loc_a2a8:
000000000000a2a8         mov        rcx, rbx                                    ; argument "__new" for method j_renameat, CODE XREF=force_linkat+157
000000000000a2ab         mov        edx, ebp                                    ; argument "__newfd" for method j_renameat
000000000000a2ad         mov        rsi, r15                                    ; argument "__old" for method j_renameat
000000000000a2b0         mov        edi, ebp                                    ; argument "__oldfd" for method j_renameat
000000000000a2b2         call       j_renameat                                  ; renameat
000000000000a2b7         test       eax, eax
000000000000a2b9         mov        ecx, 0xffffffff
000000000000a2be         je         loc_a2c7

000000000000a2c0         call       j___errno_location                          ; __errno_location
000000000000a2c5         mov        ecx, dword [rax]

                     loc_a2c7:
000000000000a2c7         xor        edx, edx                                    ; argument "__flag" for method j_unlinkat, CODE XREF=force_linkat+302
000000000000a2c9         mov        rsi, r15                                    ; argument "__name" for method j_unlinkat
000000000000a2cc         mov        edi, ebp                                    ; argument "__fd" for method j_unlinkat
000000000000a2ce         mov        dword [rsp+0x178+var_16C], ecx
000000000000a2d2         call       j_unlinkat                                  ; unlinkat
000000000000a2d7         mov        ecx, dword [rsp+0x178+var_16C]
000000000000a2db         jmp        loc_a236

                     loc_a2e0:
000000000000a2e0         call       j___errno_location                          ; __errno_location, CODE XREF=force_linkat+102
000000000000a2e5         mov        ecx, dword [rax]
000000000000a2e7         jmp        loc_a250

                     loc_a2ec:
000000000000a2ec         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=force_linkat+211
                        ; endp
000000000000a2f1         align      256                                         ; End of unwind block (FDE at 0x185f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_138: int8_t, -312
        ;    var_140: int32_t, -320
        ;    var_148: int64_t, -328
        ;    var_14C: int32_t, -332


                     force_symlinkat:
000000000000a300         push       r14                                         ; Begin of unwind block (FDE at 0x18644), CODE XREF=copy_internal+3873, copy_internal+11416
000000000000a302         push       r13
000000000000a304         push       r12
000000000000a306         push       rbp
000000000000a307         mov        r12, rdi
000000000000a30a         push       rbx
000000000000a30b         mov        ebp, esi
000000000000a30d         mov        rbx, rdx
000000000000a310         sub        rsp, 0x130
000000000000a317         mov        rax, qword [fs:0x28]
000000000000a320         mov        qword [rsp+0x158+var_30], rax
000000000000a328         xor        eax, eax
000000000000a32a         test       r8d, r8d
000000000000a32d         js         loc_a3d8

                     loc_a333:
000000000000a333         cmp        cl, 0x1                                     ; CODE XREF=force_symlinkat+244
000000000000a336         jne        loc_a3a8

000000000000a338         cmp        r8d, 0x11
000000000000a33c         jne        loc_a3a8

000000000000a33e         lea        r14, qword [rsp+0x158+var_138]
000000000000a343         mov        rdi, rbx
000000000000a346         mov        rsi, r14
000000000000a349         call       samedir_template                            ; samedir_template
000000000000a34e         test       rax, rax
000000000000a351         mov        r13, rax
000000000000a354         je         loc_a440

000000000000a35a         lea        rdx, qword [rsp+0x158+var_148]
000000000000a35f         lea        rcx, qword [try_symlink]                    ; try_symlink
000000000000a366         xor        esi, esi
000000000000a368         mov        r8d, 0x6
000000000000a36e         mov        rdi, rax
000000000000a371         mov        qword [rsp+0x158+var_148], r12
000000000000a376         mov        dword [rsp+0x158+var_140], ebp
000000000000a37a         call       try_tempname_len                            ; try_tempname_len
000000000000a37f         test       eax, eax
000000000000a381         je         loc_a400

000000000000a383         call       j___errno_location                          ; __errno_location
000000000000a388         mov        r8d, dword [rax]

                     loc_a38b:
000000000000a38b         cmp        r13, r14                                    ; CODE XREF=force_symlinkat+279, force_symlinkat+315
000000000000a38e         je         loc_a3a8

000000000000a390         mov        rdi, r13
000000000000a393         mov        dword [rsp+0x158+var_14C], r8d
000000000000a398         call       sub_2c80                                    ; sub_2c80
000000000000a39d         mov        r8d, dword [rsp+0x158+var_14C]
000000000000a3a2         nop        word [rax+rax]

                     loc_a3a8:
000000000000a3a8         mov        rbx, qword [rsp+0x158+var_30]               ; CODE XREF=force_symlinkat+54, force_symlinkat+60, force_symlinkat+142, force_symlinkat+230, force_symlinkat+328
000000000000a3b0         xor        rbx, qword [fs:0x28]
000000000000a3b9         mov        eax, r8d
000000000000a3bc         jne        loc_a44d

000000000000a3c2         add        rsp, 0x130
000000000000a3c9         pop        rbx
000000000000a3ca         pop        rbp
000000000000a3cb         pop        r12
000000000000a3cd         pop        r13
000000000000a3cf         pop        r14
000000000000a3d1         ret
                        ; endp
000000000000a3d2         align      8

                     loc_a3d8:
000000000000a3d8         mov        dword [rsp+0x158+var_14C], ecx              ; CODE XREF=force_symlinkat+45
000000000000a3dc         call       j_symlinkat                                 ; symlinkat
000000000000a3e1         test       eax, eax
000000000000a3e3         mov        r8d, eax
000000000000a3e6         je         loc_a3a8

000000000000a3e8         call       j___errno_location                          ; __errno_location
000000000000a3ed         mov        ecx, dword [rsp+0x158+var_14C]
000000000000a3f1         mov        r8d, dword [rax]
000000000000a3f4         jmp        loc_a333
000000000000a3f9         align      1024

                     loc_a400:
000000000000a400         mov        rcx, rbx                                    ; argument "__new" for method j_renameat, CODE XREF=force_symlinkat+129
000000000000a403         mov        edx, ebp                                    ; argument "__newfd" for method j_renameat
000000000000a405         mov        rsi, r13                                    ; argument "__old" for method j_renameat
000000000000a408         mov        edi, ebp                                    ; argument "__oldfd" for method j_renameat
000000000000a40a         call       j_renameat                                  ; renameat
000000000000a40f         test       eax, eax
000000000000a411         mov        r8d, 0xffffffff
000000000000a417         je         loc_a38b

000000000000a41d         call       j___errno_location                          ; __errno_location
000000000000a422         mov        r8d, dword [rax]
000000000000a425         xor        edx, edx                                    ; argument "__flag" for method j_unlinkat
000000000000a427         mov        rsi, r13                                    ; argument "__name" for method j_unlinkat
000000000000a42a         mov        edi, ebp                                    ; argument "__fd" for method j_unlinkat
000000000000a42c         mov        dword [rsp+0x158+var_14C], r8d
000000000000a431         call       j_unlinkat                                  ; unlinkat
000000000000a436         mov        r8d, dword [rsp+0x158+var_14C]
000000000000a43b         jmp        loc_a38b

                     loc_a440:
000000000000a440         call       j___errno_location                          ; __errno_location, CODE XREF=force_symlinkat+84
000000000000a445         mov        r8d, dword [rax]
000000000000a448         jmp        loc_a3a8

                     loc_a44d:
000000000000a44d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=force_symlinkat+188
                        ; endp
000000000000a452         align      32                                          ; End of unwind block (FDE at 0x18644)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     copy_acl:
000000000000a460         push       r12                                         ; Begin of unwind block (FDE at 0x1868c), CODE XREF=copy_internal+10252, copy_internal+14654
000000000000a462         push       rbp
000000000000a463         mov        r12, rdi
000000000000a466         push       rbx
000000000000a467         mov        rbp, rdx
000000000000a46a         call       qcopy_acl                                   ; qcopy_acl
000000000000a46f         cmp        eax, 0xfffffffe
000000000000a472         mov        ebx, eax
000000000000a474         je         loc_a4c0

000000000000a476         cmp        eax, 0xffffffff
000000000000a479         jne        loc_a4b2

000000000000a47b         mov        rdi, rbp
000000000000a47e         call       quote                                       ; quote
000000000000a483         lea        rsi, qword [aPreservingPerm]                ; argument "msgid" for method j_dcgettext, "preserving permissions for %s"
000000000000a48a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a48f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a491         mov        r12, rax
000000000000a494         call       j_dcgettext                                 ; dcgettext
000000000000a499         mov        rbp, rax
000000000000a49c         call       j___errno_location                          ; __errno_location
000000000000a4a1         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000a4a3         mov        rcx, r12
000000000000a4a6         mov        rdx, rbp                                    ; argument "__format" for method j_error
000000000000a4a9         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000a4ab         xor        eax, eax
000000000000a4ad         call       j_error                                     ; error

                     loc_a4b2:
000000000000a4b2         mov        eax, ebx                                    ; CODE XREF=copy_acl+25
000000000000a4b4         pop        rbx
000000000000a4b5         pop        rbp
000000000000a4b6         pop        r12
000000000000a4b8         ret
                        ; endp
000000000000a4b9         align      64

                     loc_a4c0:
000000000000a4c0         mov        rdi, r12                                    ; CODE XREF=copy_acl+20
000000000000a4c3         call       quote                                       ; quote
000000000000a4c8         mov        rbp, rax
000000000000a4cb         call       j___errno_location                          ; __errno_location
000000000000a4d0         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000a4d2         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x17447
000000000000a4d9         mov        rcx, rbp
000000000000a4dc         xor        eax, eax
000000000000a4de         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000a4e0         call       j_error                                     ; error
000000000000a4e5         mov        eax, ebx
000000000000a4e7         pop        rbx
000000000000a4e8         pop        rbp
000000000000a4e9         pop        r12
000000000000a4eb         ret
                        ; endp
000000000000a4ec         align      16                                          ; End of unwind block (FDE at 0x1868c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_acl:
000000000000a4f0         push       r12                                         ; Begin of unwind block (FDE at 0x186c4), CODE XREF=copy_internal+11108, copy_internal+16246, copy_internal+16626
000000000000a4f2         push       rbp
000000000000a4f3         mov        rbp, rdi
000000000000a4f6         push       rbx
000000000000a4f7         call       qset_acl                                    ; qset_acl
000000000000a4fc         test       eax, eax
000000000000a4fe         mov        ebx, eax
000000000000a500         je         loc_a539

000000000000a502         mov        rdi, rbp
000000000000a505         call       quote                                       ; quote
000000000000a50a         lea        rsi, qword [aSettingPermiss]                ; argument "msgid" for method j_dcgettext, "setting permissions for %s"
000000000000a511         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a516         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a518         mov        r12, rax
000000000000a51b         call       j_dcgettext                                 ; dcgettext
000000000000a520         mov        rbp, rax
000000000000a523         call       j___errno_location                          ; __errno_location
000000000000a528         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000a52a         mov        rcx, r12
000000000000a52d         mov        rdx, rbp                                    ; argument "__format" for method j_error
000000000000a530         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000a532         xor        eax, eax
000000000000a534         call       j_error                                     ; error

                     loc_a539:
000000000000a539         mov        eax, ebx                                    ; CODE XREF=set_acl+16
000000000000a53b         pop        rbx
000000000000a53c         pop        rbp
000000000000a53d         pop        r12
000000000000a53f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     areadlink_with_size:
000000000000a540         push       r15                                         ; End of unwind block (FDE at 0x186c4), Begin of unwind block (FDE at 0x186f4), CODE XREF=copy_internal+11374, copy_internal+14553
000000000000a542         push       r14
000000000000a544         mov        eax, 0x401
000000000000a549         push       r13
000000000000a54b         push       r12
000000000000a54d         mov        r13, rdi
000000000000a550         push       rbp
000000000000a551         push       rbx
000000000000a552         lea        rbx, qword [rsi+1]
000000000000a556         movabs     r14, 0x3fffffffffffffff
000000000000a560         movabs     r15, 0x7ffffffffffffffe
000000000000a56a         sub        rsp, 0x8
000000000000a56e         cmp        rsi, 0x401
000000000000a575         cmovae     rbx, rax
000000000000a579         nop        dword [rax]

                     loc_a580:
000000000000a580         mov        rdi, rbx                                    ; argument "__size" for method j_malloc, CODE XREF=areadlink_with_size+175
000000000000a583         call       j_malloc                                    ; malloc
000000000000a588         test       rax, rax
000000000000a58b         mov        rbp, rax
000000000000a58e         je         loc_a5cb

                     loc_a590:
000000000000a590         mov        rdx, rbx                                    ; argument "__len" for method j_readlink, CODE XREF=areadlink_with_size+137
000000000000a593         mov        rsi, rax                                    ; argument "__buf" for method j_readlink
000000000000a596         mov        rdi, r13                                    ; argument "__path" for method j_readlink
000000000000a599         call       j_readlink                                  ; readlink
000000000000a59e         test       rax, rax
000000000000a5a1         mov        r12, rax
000000000000a5a4         js         loc_a5f8

                     loc_a5a6:
000000000000a5a6         cmp        rbx, r12                                    ; CODE XREF=areadlink_with_size+192
000000000000a5a9         ja         loc_a610

000000000000a5ab         mov        rdi, rbp
000000000000a5ae         call       sub_2c80                                    ; sub_2c80
000000000000a5b3         cmp        rbx, r14
000000000000a5b6         ja         loc_a5e0

000000000000a5b8         add        rbx, rbx
000000000000a5bb         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000a5be         call       j_malloc                                    ; malloc
000000000000a5c3         test       rax, rax
000000000000a5c6         mov        rbp, rax
000000000000a5c9         jne        loc_a590

                     loc_a5cb:
000000000000a5cb         add        rsp, 0x8                                    ; CODE XREF=areadlink_with_size+78, areadlink_with_size+204, areadlink_with_size+214, areadlink_with_size+237
000000000000a5cf         mov        rax, rbp
000000000000a5d2         pop        rbx
000000000000a5d3         pop        rbp
000000000000a5d4         pop        r12
000000000000a5d6         pop        r13
000000000000a5d8         pop        r14
000000000000a5da         pop        r15
000000000000a5dc         ret
                        ; endp
000000000000a5dd         align      32

                     loc_a5e0:
000000000000a5e0         cmp        rbx, r15                                    ; CODE XREF=areadlink_with_size+118
000000000000a5e3         ja         loc_a620

000000000000a5e5         movabs     rbx, 0x7fffffffffffffff
000000000000a5ef         jmp        loc_a580
000000000000a5f1         align      8

                     loc_a5f8:
000000000000a5f8         call       j___errno_location                          ; __errno_location, CODE XREF=areadlink_with_size+100
000000000000a5fd         cmp        dword [rax], 0x22
000000000000a600         je         loc_a5a6

000000000000a602         mov        rdi, rbp
000000000000a605         xor        ebp, ebp
000000000000a607         call       sub_2c80                                    ; sub_2c80
000000000000a60c         jmp        loc_a5cb
000000000000a60e         align      16

                     loc_a610:
000000000000a610         mov        byte [rbp+r12], 0x0                         ; CODE XREF=areadlink_with_size+105
000000000000a616         jmp        loc_a5cb
000000000000a618         align      32

                     loc_a620:
000000000000a620         call       j___errno_location                          ; __errno_location, CODE XREF=areadlink_with_size+163
000000000000a625         xor        ebp, ebp
000000000000a627         mov        dword [rax], 0xc
000000000000a62d         jmp        loc_a5cb
000000000000a62f         align      16                                          ; End of unwind block (FDE at 0x186f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_simple_backup_suffix:
000000000000a630         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x18744), CODE XREF=main+985, backupfile_internal+1508
000000000000a633         push       rbx
000000000000a634         mov        rbx, rdi
000000000000a637         je         loc_a660

                     loc_a639:
000000000000a639         cmp        byte [rbx], 0x0                             ; CODE XREF=set_simple_backup_suffix+68
000000000000a63c         jne        loc_a650

                     loc_a63e:
000000000000a63e         lea        rbx, qword [a831+5]                         ; 0x16886, CODE XREF=set_simple_backup_suffix+43, set_simple_backup_suffix+66

                     loc_a645:
000000000000a645         mov        qword [simple_backup_suffix], rbx           ; simple_backup_suffix, CODE XREF=set_simple_backup_suffix+45
000000000000a64c         pop        rbx
000000000000a64d         ret
                        ; endp
000000000000a64e         align      16

                     loc_a650:
000000000000a650         mov        rdi, rbx                                    ; CODE XREF=set_simple_backup_suffix+12
000000000000a653         call       last_component                              ; last_component
000000000000a658         cmp        rax, rbx
000000000000a65b         jne        loc_a63e

000000000000a65d         jmp        loc_a645
000000000000a65f         align      32

                     loc_a660:
000000000000a660         lea        rdi, qword [aSimplebackupsu]                ; argument "__name" for method j_getenv, "SIMPLE_BACKUP_SUFFIX", CODE XREF=set_simple_backup_suffix+7
000000000000a667         call       j_getenv                                    ; getenv
000000000000a66c         test       rax, rax
000000000000a66f         mov        rbx, rax
000000000000a672         je         loc_a63e

000000000000a674         jmp        loc_a639
000000000000a676         align      128                                         ; End of unwind block (FDE at 0x18744)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_44: int32_t, -68
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_55: int8_t, -85
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_98: int32_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176


                     backupfile_internal:
000000000000a680         push       r15                                         ; Begin of unwind block (FDE at 0x18760), CODE XREF=backup_file_rename+5, find_backup_file_name+6
000000000000a682         push       r14
000000000000a684         push       r13
000000000000a686         push       r12
000000000000a688         push       rbp
000000000000a689         push       rbx
000000000000a68a         mov        rbx, rsi
000000000000a68d         sub        rsp, 0x88
000000000000a694         mov        dword [rsp+0xb8+var_54], edi
000000000000a698         mov        rdi, rsi
000000000000a69b         mov        qword [rsp+0xb8+var_A8], rsi
000000000000a6a0         mov        dword [rsp+0xb8+var_98], edx
000000000000a6a4         mov        byte [rsp+0xb8+var_55], cl
000000000000a6a8         mov        rax, qword [fs:0x28]
000000000000a6b1         mov        qword [rsp+0xb8+var_40], rax
000000000000a6b6         xor        eax, eax
000000000000a6b8         call       last_component                              ; last_component
000000000000a6bd         mov        rdi, rax                                    ; argument "__s" for method j_strlen
000000000000a6c0         mov        r14, rax
000000000000a6c3         call       j_strlen                                    ; strlen
000000000000a6c8         mov        rdi, qword [simple_backup_suffix]           ; simple_backup_suffix
000000000000a6cf         sub        r14, rbx
000000000000a6d2         add        rax, r14
000000000000a6d5         mov        qword [rsp+0xb8+var_A0], rax
000000000000a6da         test       rdi, rdi
000000000000a6dd         je         loc_ac64

                     loc_a6e3:
000000000000a6e3         call       j_strlen                                    ; strlen, CODE XREF=backupfile_internal+1520
000000000000a6e8         mov        rsi, qword [rsp+0xb8+var_A0]
000000000000a6ed         add        rax, 0x1
000000000000a6f1         cmp        rax, 0x9
000000000000a6f5         mov        qword [rsp+0xb8+var_68], rax
000000000000a6fa         lea        rdx, qword [rsi+1]
000000000000a6fe         mov        rsi, rax
000000000000a701         mov        eax, 0x9
000000000000a706         cmovae     rax, rsi
000000000000a70a         add        rax, rdx
000000000000a70d         mov        qword [rsp+0xb8+var_80], rdx
000000000000a712         mov        rdi, rax                                    ; argument "__size" for method j_malloc
000000000000a715         mov        qword [rsp+0xb8+var_78], rax
000000000000a71a         call       j_malloc                                    ; malloc
000000000000a71f         test       rax, rax
000000000000a722         mov        r15, rax
000000000000a725         je         loc_aa10

000000000000a72b         lea        rax, qword [rsp+0xb8+var_44]
000000000000a730         mov        dword [rsp+0xb8+var_44], 0xffffffff
000000000000a738         mov        qword [rsp+0xb8+var_70], 0x0
000000000000a741         xor        r13d, r13d
000000000000a744         mov        qword [rsp+0xb8+var_50], rax

                     loc_a749:
000000000000a749         mov        rdx, qword [rsp+0xb8+var_80]                ; argument "__n" for method j_memcpy, CODE XREF=backupfile_internal+870
000000000000a74e         mov        rsi, qword [rsp+0xb8+var_A8]                ; argument "__src" for method j_memcpy
000000000000a753         mov        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000a756         call       j_memcpy                                    ; memcpy
000000000000a75b         cmp        dword [rsp+0xb8+var_98], 0x1
000000000000a760         je         loc_aa40

000000000000a766         lea        rbp, qword [r15+r14]
000000000000a76a         mov        rdi, rbp
000000000000a76d         call       base_len                                    ; base_len
000000000000a772         test       r13, r13
000000000000a775         mov        r12, rax
000000000000a778         je         loc_ab20

000000000000a77e         mov        rdi, r13                                    ; argument "__dirp" for method j_rewinddir
000000000000a781         call       j_rewinddir                                 ; rewinddir

                     loc_a786:
000000000000a786         mov        rax, qword [rsp+0xb8+var_78]                ; CODE XREF=backupfile_internal+1249
000000000000a78b         mov        qword [rsp+0xb8+var_90], 0x1
000000000000a794         mov        dword [rsp+0xb8+var_94], 0x2
000000000000a79c         mov        qword [rsp+0xb8+var_88], rax
000000000000a7a1         lea        rax, qword [r12+4]
000000000000a7a6         mov        qword [rsp+0xb8+var_B0], rax
000000000000a7ab         nop        dword [rax+rax]

                     loc_a7b0:
000000000000a7b0         mov        rdi, r13                                    ; argument "__dirp" for method j_readdir, CODE XREF=backupfile_internal+338, backupfile_internal+362, backupfile_internal+376, backupfile_internal+438, backupfile_internal+449, backupfile_internal+470, backupfile_internal+502
000000000000a7b3         call       j_readdir                                   ; readdir
000000000000a7b8         test       rax, rax
000000000000a7bb         je         loc_a970

                     loc_a7c1:
000000000000a7c1         lea        rbx, qword [rax+0x13]                       ; CODE XREF=backupfile_internal+738
000000000000a7c5         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000a7c8         call       j_strlen                                    ; strlen
000000000000a7cd         cmp        rax, qword [rsp+0xb8+var_B0]
000000000000a7d2         jb         loc_a7b0

000000000000a7d4         lea        rbp, qword [r12+2]
000000000000a7d9         lea        rdi, qword [r15+r14]                        ; argument "__s1" for method j_memcmp
000000000000a7dd         mov        rsi, rbx                                    ; argument "__s2" for method j_memcmp
000000000000a7e0         mov        rdx, rbp                                    ; argument "__n" for method j_memcmp
000000000000a7e3         call       j_memcmp                                    ; memcmp
000000000000a7e8         test       eax, eax
000000000000a7ea         jne        loc_a7b0

000000000000a7ec         add        rbx, rbp
000000000000a7ef         movzx      eax, byte [rbx]
000000000000a7f2         lea        edx, dword [rax-0x31]
000000000000a7f5         cmp        dl, 0x8
000000000000a7f8         ja         loc_a7b0

000000000000a7fa         cmp        al, 0x39
000000000000a7fc         movsx      eax, byte [rbx+1]
000000000000a800         mov        ebp, 0x1
000000000000a805         sete       r8b
000000000000a809         mov        ecx, eax
000000000000a80b         sub        eax, 0x30
000000000000a80e         cmp        eax, 0x9
000000000000a811         ja         loc_a833

000000000000a813         nop        dword [rax+rax]

                     loc_a818:
000000000000a818         cmp        cl, 0x39                                    ; CODE XREF=backupfile_internal+433
000000000000a81b         sete       al
000000000000a81e         add        rbp, 0x1
000000000000a822         and        r8d, eax
000000000000a825         movsx      eax, byte [rbx+rbp]
000000000000a829         mov        ecx, eax
000000000000a82b         sub        eax, 0x30
000000000000a82e         cmp        eax, 0x9
000000000000a831         jbe        loc_a818

                     loc_a833:
000000000000a833         cmp        cl, 0x7e                                    ; CODE XREF=backupfile_internal+401
000000000000a836         jne        loc_a7b0

000000000000a83c         cmp        byte [rbx+rbp+1], 0x0
000000000000a841         jne        loc_a7b0

000000000000a847         mov        rdx, qword [rsp+0xb8+var_90]
000000000000a84c         cmp        rdx, rbp
000000000000a84f         jb         loc_a87c

000000000000a851         mov        byte [rsp+0xb8+var_60], r8b
000000000000a856         jne        loc_a7b0

000000000000a85c         mov        rax, qword [rsp+0xb8+var_A0]
000000000000a861         mov        rsi, rbx                                    ; argument "__s2" for method j_memcmp
000000000000a864         lea        rdi, qword [r15+rax+2]                      ; argument "__s1" for method j_memcmp
000000000000a869         call       j_memcmp                                    ; memcmp
000000000000a86e         test       eax, eax
000000000000a870         movzx      r8d, byte [rsp+0xb8+var_60]
000000000000a876         jg         loc_a7b0

                     loc_a87c:
000000000000a87c         movzx      esi, r8b                                    ; CODE XREF=backupfile_internal+463
000000000000a880         movzx      r9d, r8b
000000000000a884         mov        dword [rsp+0xb8+var_94], esi
000000000000a888         mov        rsi, qword [rsp+0xb8+var_A0]
000000000000a88d         lea        rax, qword [r9+rbp]
000000000000a891         mov        qword [rsp+0xb8+var_90], rax
000000000000a896         lea        rcx, qword [rsi+rax+4]
000000000000a89b         cmp        rcx, qword [rsp+0xb8+var_88]
000000000000a8a0         jbe        loc_abd8

000000000000a8a6         mov        edx, 0x2
000000000000a8ab         xor        esi, esi
000000000000a8ad         mov        rax, rdx
000000000000a8b0         mul        rcx
000000000000a8b3         jo         loc_ac83

                     loc_a8b9:
000000000000a8b9         test       rax, rax                                    ; CODE XREF=backupfile_internal+1544
000000000000a8bc         js         loc_ab70

000000000000a8c2         test       rsi, rsi
000000000000a8c5         jne        loc_ab70

000000000000a8cb         lea        rax, qword [rcx+rcx]
000000000000a8cf         mov        qword [rsp+0xb8+var_88], rax

                     loc_a8d4:
000000000000a8d4         mov        rsi, qword [rsp+0xb8+var_88]                ; argument "__size" for method j_realloc, CODE XREF=backupfile_internal+1269
000000000000a8d9         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000a8dc         mov        qword [rsp+0xb8+var_60], r9
000000000000a8e1         call       j_realloc                                   ; realloc
000000000000a8e6         test       rax, rax
000000000000a8e9         mov        r8, rax
000000000000a8ec         mov        r9, qword [rsp+0xb8+var_60]
000000000000a8f1         je         loc_ab80

                     loc_a8f7:
000000000000a8f7         mov        rax, qword [rsp+0xb8+var_A0]                ; CODE XREF=backupfile_internal+1371
000000000000a8fc         lea        rdx, qword [rbp+2]                          ; argument "__n" for method j_memcpy
000000000000a900         mov        qword [rsp+0xb8+var_60], r8
000000000000a905         mov        rsi, rbx                                    ; argument "__src" for method j_memcpy
000000000000a908         add        rax, r8
000000000000a90b         mov        r8d, 0x7e2e
000000000000a911         lea        rcx, qword [rax+r9+2]
000000000000a916         mov        word [rax], r8w
000000000000a91a         mov        byte [rax+2], 0x30
000000000000a91e         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000a921         call       j_memcpy                                    ; memcpy
000000000000a926         add        rbp, rax
000000000000a929         mov        r8, qword [rsp+0xb8+var_60]
000000000000a92e         movzx      edx, byte [rbp-1]
000000000000a932         lea        rax, qword [rbp-1]
000000000000a936         cmp        dl, 0x39
000000000000a939         jne        loc_a94f

000000000000a93b         nop        dword [rax+rax]

                     loc_a940:
000000000000a940         mov        byte [rax], 0x30                            ; CODE XREF=backupfile_internal+717
000000000000a943         sub        rax, 0x1
000000000000a947         movzx      edx, byte [rax]
000000000000a94a         cmp        dl, 0x39
000000000000a94d         je         loc_a940

                     loc_a94f:
000000000000a94f         add        edx, 0x1                                    ; CODE XREF=backupfile_internal+697
000000000000a952         mov        rdi, r13                                    ; argument "__dirp" for method j_readdir
000000000000a955         mov        r15, r8
000000000000a958         mov        byte [rax], dl
000000000000a95a         call       j_readdir                                   ; readdir
000000000000a95f         test       rax, rax
000000000000a962         jne        loc_a7c1

000000000000a968         nop        dword [rax+rax]

                     loc_a970:
000000000000a970         mov        eax, dword [rsp+0xb8+var_94]                ; CODE XREF=backupfile_internal+315, backupfile_internal+1421
000000000000a974         cmp        eax, 0x2
000000000000a977         je         loc_aa60

000000000000a97d         cmp        eax, 0x3
000000000000a980         je         loc_ab80

000000000000a986         cmp        eax, 0x1
000000000000a989         je         loc_aa90

                     loc_a98f:
000000000000a98f         cmp        byte [rsp+0xb8+var_55], 0x0                 ; CODE XREF=backupfile_internal+986, backupfile_internal+1066, backupfile_internal+1175, backupfile_internal+1317, backupfile_internal+1359
000000000000a994         je         loc_ac4e

000000000000a99a         mov        edx, dword [rsp+0xb8+var_44]
000000000000a99e         lea        rcx, qword [r15+r14]
000000000000a9a2         test       edx, edx
000000000000a9a4         jns        loc_a9b9

000000000000a9a6         mov        dword [rsp+0xb8+var_44], 0xffffff9c
000000000000a9ae         mov        rcx, r15
000000000000a9b1         mov        edx, 0xffffff9c
000000000000a9b6         xor        r14d, r14d

                     loc_a9b9:
000000000000a9b9         xor        r8d, r8d                                    ; CODE XREF=backupfile_internal+804
000000000000a9bc         cmp        dword [rsp+0xb8+var_98], 0x1
000000000000a9c1         mov        rsi, qword [rsp+0xb8+var_A8]
000000000000a9c6         mov        edi, 0xffffff9c
000000000000a9cb         setne      r8b
000000000000a9cf         call       renameatu                                   ; renameatu
000000000000a9d4         test       eax, eax
000000000000a9d6         je         loc_ac4e

000000000000a9dc         call       j___errno_location                          ; __errno_location
000000000000a9e1         mov        ebp, dword [rax]
000000000000a9e3         cmp        ebp, 0x11
000000000000a9e6         je         loc_a749

000000000000a9ec         test       r13, r13
000000000000a9ef         mov        rbx, rax
000000000000a9f2         je         loc_a9fc

000000000000a9f4         mov        rdi, r13                                    ; argument "__dirp" for method j_closedir
000000000000a9f7         call       j_closedir                                  ; closedir

                     loc_a9fc:
000000000000a9fc         mov        rdi, r15                                    ; CODE XREF=backupfile_internal+882
000000000000a9ff         xor        r15d, r15d
000000000000aa02         call       sub_2c80                                    ; sub_2c80
000000000000aa07         mov        dword [rbx], ebp
000000000000aa09         nop        dword [rax]

                     loc_aa10:
000000000000aa10         mov        rsi, qword [rsp+0xb8+var_40]                ; CODE XREF=backupfile_internal+165, backupfile_internal+1302, backupfile_internal+1489, backupfile_internal+1503
000000000000aa15         xor        rsi, qword [fs:0x28]
000000000000aa1e         mov        rax, r15
000000000000aa21         jne        loc_ac8d

000000000000aa27         add        rsp, 0x88
000000000000aa2e         pop        rbx
000000000000aa2f         pop        rbp
000000000000aa30         pop        r12
000000000000aa32         pop        r13
000000000000aa34         pop        r14
000000000000aa36         pop        r15
000000000000aa38         ret
                        ; endp
000000000000aa39         align      64

                     loc_aa40:
000000000000aa40         mov        rax, qword [rsp+0xb8+var_A0]                ; CODE XREF=backupfile_internal+224
000000000000aa45         mov        rdx, qword [rsp+0xb8+var_68]                ; argument "__n" for method j_memcpy
000000000000aa4a         mov        rsi, qword [simple_backup_suffix]           ; argument "__src" for method j_memcpy, simple_backup_suffix
000000000000aa51         lea        rdi, qword [r15+rax]                        ; argument "__dest" for method j_memcpy
000000000000aa55         call       j_memcpy                                    ; memcpy
000000000000aa5a         jmp        loc_a98f
000000000000aa5f         align      32

                     loc_aa60:
000000000000aa60         cmp        dword [rsp+0xb8+var_98], 0x2                ; CODE XREF=backupfile_internal+759
000000000000aa65         jne        loc_aa90

000000000000aa67         mov        rax, qword [rsp+0xb8+var_A0]
000000000000aa6c         mov        rdx, qword [rsp+0xb8+var_68]                ; argument "__n" for method j_memcpy
000000000000aa71         mov        rsi, qword [simple_backup_suffix]           ; argument "__src" for method j_memcpy, simple_backup_suffix
000000000000aa78         lea        rdi, qword [r15+rax]                        ; argument "__dest" for method j_memcpy
000000000000aa7c         call       j_memcpy                                    ; memcpy
000000000000aa81         mov        dword [rsp+0xb8+var_98], 0x1
000000000000aa89         nop        dword [rax]

                     loc_aa90:
000000000000aa90         mov        rdi, r15                                    ; CODE XREF=backupfile_internal+777, backupfile_internal+997
000000000000aa93         call       last_component                              ; last_component
000000000000aa98         mov        rdi, rax
000000000000aa9b         mov        rbx, rax
000000000000aa9e         call       base_len                                    ; base_len
000000000000aaa3         cmp        rax, 0xe
000000000000aaa7         mov        rbp, rax
000000000000aaaa         jbe        loc_a98f

000000000000aab0         cmp        qword [rsp+0xb8+var_70], 0x0
000000000000aab6         jne        loc_aba0

000000000000aabc         mov        edi, dword [rsp+0xb8+var_44]
000000000000aac0         mov        dword [rsp+0xb8+var_B0], edi
000000000000aac4         call       j___errno_location                          ; __errno_location
000000000000aac9         mov        edi, dword [rsp+0xb8+var_B0]
000000000000aacd         mov        r12, rax
000000000000aad0         test       edi, edi
000000000000aad2         js         loc_ac12

000000000000aad8         mov        dword [rax], 0x0
000000000000aade         mov        esi, 0x3                                    ; argument "__name" for method j_fpathconf
000000000000aae3         call       j_fpathconf                                 ; fpathconf
000000000000aae8         mov        ecx, dword [r12]
000000000000aaec         xor        edx, edx
000000000000aaee         test       ecx, ecx
000000000000aaf0         sete       dl
000000000000aaf3         sub        rax, rdx

                     loc_aaf6:
000000000000aaf6         test       rax, rax                                    ; CODE XREF=backupfile_internal+1481
000000000000aaf9         mov        qword [rsp+0xb8+var_70], rax
000000000000aafe         jns        loc_aba0

000000000000ab04         cmp        rax, 0xffffffffffffffff
000000000000ab08         jne        loc_ac75

000000000000ab0e         mov        qword [rsp+0xb8+var_70], 0xffffffffffffffff
000000000000ab17         jmp        loc_a98f
000000000000ab1c         align      32

                     loc_ab20:
000000000000ab20         mov        rcx, qword [rsp+0xb8+var_50]                ; CODE XREF=backupfile_internal+248
000000000000ab25         mov        edi, dword [rsp+0xb8+var_54]
000000000000ab29         mov        r9d, 0x2e
000000000000ab2f         xor        edx, edx
000000000000ab31         movzx      ebx, word [rbp]
000000000000ab35         mov        rsi, r15
000000000000ab38         mov        word [rbp], r9w
000000000000ab3d         call       opendirat                                   ; opendirat
000000000000ab42         test       rax, rax
000000000000ab45         mov        r13, rax
000000000000ab48         lea        rdx, qword [rbp+r12]
000000000000ab4d         je         loc_abe0

000000000000ab53         mov        word [rbp], bx
000000000000ab57         mov        dword [rdx], 0x7e317e2e
000000000000ab5d         mov        byte [rdx+4], 0x0
000000000000ab61         jmp        loc_a786
000000000000ab66         align      16

                     loc_ab70:
000000000000ab70         mov        qword [rsp+0xb8+var_88], rcx                ; CODE XREF=backupfile_internal+572, backupfile_internal+581
000000000000ab75         jmp        loc_a8d4
000000000000ab7a         align      128

                     loc_ab80:
000000000000ab80         mov        rdi, r15                                    ; CODE XREF=backupfile_internal+625, backupfile_internal+768
000000000000ab83         xor        r15d, r15d
000000000000ab86         call       sub_2c80                                    ; sub_2c80
000000000000ab8b         call       j___errno_location                          ; __errno_location
000000000000ab90         mov        dword [rax], 0xc
000000000000ab96         jmp        loc_aa10
000000000000ab9b         align      32

                     loc_aba0:
000000000000aba0         cmp        rbp, qword [rsp+0xb8+var_70]                ; CODE XREF=backupfile_internal+1078, backupfile_internal+1150
000000000000aba5         jbe        loc_a98f

                     loc_abab:
000000000000abab         mov        rax, qword [rsp+0xb8+var_A0]                ; CODE XREF=backupfile_internal+1534
000000000000abb0         mov        rsi, qword [rsp+0xb8+var_70]
000000000000abb5         add        rax, r15
000000000000abb8         lea        rdx, qword [rsi-1]
000000000000abbc         sub        rax, rbx
000000000000abbf         cmp        rax, rsi
000000000000abc2         cmovae     rax, rdx
000000000000abc6         mov        byte [rbx+rax], 0x7e
000000000000abca         mov        byte [rbx+rax+1], 0x0
000000000000abcf         jmp        loc_a98f
000000000000abd4         align      8

                     loc_abd8:
000000000000abd8         mov        r8, r15                                     ; CODE XREF=backupfile_internal+544
000000000000abdb         jmp        loc_a8f7

                     loc_abe0:
000000000000abe0         mov        qword [rsp+0xb8+var_B0], rdx                ; CODE XREF=backupfile_internal+1229
000000000000abe5         call       j___errno_location                          ; __errno_location
000000000000abea         cmp        dword [rax], 0xc
000000000000abed         mov        rdx, qword [rsp+0xb8+var_B0]
000000000000abf2         mov        word [rbp], bx
000000000000abf6         mov        dword [rdx], 0x7e317e2e
000000000000abfc         mov        byte [rdx+4], 0x0
000000000000ac00         sete       al
000000000000ac03         movzx      eax, al
000000000000ac06         add        eax, 0x2
000000000000ac09         mov        dword [rsp+0xb8+var_94], eax
000000000000ac0d         jmp        loc_a970

                     loc_ac12:
000000000000ac12         movzx      edx, word [rbx]                             ; CODE XREF=backupfile_internal+1106
000000000000ac15         mov        esi, 0x2e
000000000000ac1a         mov        rdi, r15                                    ; argument "__path" for method j_pathconf
000000000000ac1d         mov        word [rbx], si
000000000000ac20         mov        dword [rax], 0x0
000000000000ac26         mov        esi, 0x3                                    ; argument "__name" for method j_pathconf
000000000000ac2b         mov        dword [rsp+0xb8+var_B0], edx
000000000000ac2f         call       j_pathconf                                  ; pathconf
000000000000ac34         mov        edi, dword [r12]
000000000000ac38         mov        edx, dword [rsp+0xb8+var_B0]
000000000000ac3c         xor        ecx, ecx
000000000000ac3e         test       edi, edi
000000000000ac40         mov        word [rbx], dx
000000000000ac43         sete       cl
000000000000ac46         sub        rax, rcx
000000000000ac49         jmp        loc_aaf6

                     loc_ac4e:
000000000000ac4e         test       r13, r13                                    ; CODE XREF=backupfile_internal+788, backupfile_internal+854
000000000000ac51         je         loc_aa10

000000000000ac57         mov        rdi, r13                                    ; argument "__dirp" for method j_closedir
000000000000ac5a         call       j_closedir                                  ; closedir
000000000000ac5f         jmp        loc_aa10

                     loc_ac64:
000000000000ac64         call       set_simple_backup_suffix                    ; set_simple_backup_suffix, CODE XREF=backupfile_internal+93
000000000000ac69         mov        rdi, qword [simple_backup_suffix]           ; simple_backup_suffix
000000000000ac70         jmp        loc_a6e3

                     loc_ac75:
000000000000ac75         mov        qword [rsp+0xb8+var_70], 0xe                ; CODE XREF=backupfile_internal+1160
000000000000ac7e         jmp        loc_abab

                     loc_ac83:
000000000000ac83         mov        esi, 0x1                                    ; CODE XREF=backupfile_internal+563
000000000000ac88         jmp        loc_a8b9

                     loc_ac8d:
000000000000ac8d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=backupfile_internal+929
                        ; endp
000000000000ac92         align      32                                          ; End of unwind block (FDE at 0x18760)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     backup_file_rename:
000000000000aca0         mov        ecx, 0x1                                    ; Begin of unwind block (FDE at 0x187b4), CODE XREF=copy_internal+3550
000000000000aca5         jmp        backupfile_internal                         ; backupfile_internal
                        ; endp
000000000000acaa         align      16                                          ; End of unwind block (FDE at 0x187b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_version.part.0:
000000000000acb0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x187cc), CODE XREF=get_version+10, j_get_version.part.0
000000000000acb4         mov        r9, qword [argmatch_die]                    ; argmatch_die
000000000000acbb         lea        rdx, qword [backup_args]                    ; backup_args
000000000000acc2         lea        rcx, qword [backup_types]                   ; backup_types
000000000000acc9         mov        r8d, 0x4
000000000000accf         call       __xargmatch_internal                        ; __xargmatch_internal
000000000000acd4         lea        rdx, qword [backup_types]                   ; backup_types
000000000000acdb         mov        eax, dword [rdx+rax*4]
000000000000acde         add        rsp, 0x8
000000000000ace2         ret
                        ; endp
000000000000ace3         align      16                                          ; End of unwind block (FDE at 0x187cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     find_backup_file_name:
000000000000acf0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x187e4)
000000000000acf4         xor        ecx, ecx                                    ; argument #4 for method backupfile_internal
000000000000acf6         call       backupfile_internal                         ; backupfile_internal
000000000000acfb         test       rax, rax
000000000000acfe         je         loc_ad05

000000000000ad00         add        rsp, 0x8
000000000000ad04         ret
                        ; endp

                     loc_ad05:
000000000000ad05         call       xalloc_die                                  ; xalloc_die, CODE XREF=find_backup_file_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ad0a:
000000000000ad0a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x187e4)
                     get_version:
000000000000ad10         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x18800)
000000000000ad13         je         loc_ad20

000000000000ad15         cmp        byte [rsi], 0x0
000000000000ad18         je         loc_ad20

000000000000ad1a         jmp        get_version.part.0                          ; get_version.part.0
                        ; endp
000000000000ad1c         align      32

                     loc_ad20:
000000000000ad20         mov        eax, 0x2                                    ; CODE XREF=get_version+3, get_version+8
000000000000ad25         ret
                        ; endp
000000000000ad26         align      16                                          ; End of unwind block (FDE at 0x18800)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xget_version:
000000000000ad30         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x18814), CODE XREF=main+971
000000000000ad33         je         loc_ad3a

000000000000ad35         cmp        byte [rsi], 0x0
000000000000ad38         jne        j_get_version.part.0                        ; get_version.part.0

                     loc_ad3a:
000000000000ad3a         lea        rdi, qword [aVersioncontrol]                ; argument "__name" for method j_getenv, "VERSION_CONTROL", CODE XREF=xget_version+3
000000000000ad41         sub        rsp, 0x8
000000000000ad45         call       j_getenv                                    ; getenv
000000000000ad4a         test       rax, rax
000000000000ad4d         je         loc_ad70

000000000000ad4f         cmp        byte [rax], 0x0
000000000000ad52         je         loc_ad70

000000000000ad54         lea        rdi, qword [aSimplebackupsu+21]             ; 0x1689d
000000000000ad5b         mov        rsi, rax
000000000000ad5e         add        rsp, 0x8

                     j_get_version.part.0:        // get_version.part.0
000000000000ad62         jmp        get_version.part.0                          ; get_version.part.0, CODE XREF=xget_version+8
                        ; endp
000000000000ad67         align      16

                     loc_ad70:
000000000000ad70         mov        eax, 0x2                                    ; CODE XREF=xget_version+29, xget_version+34
000000000000ad75         add        rsp, 0x8
000000000000ad79         ret
                        ; endp
000000000000ad7a         align      128                                         ; End of unwind block (FDE at 0x18814)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     buffer_lcm:
000000000000ad80         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x18834), CODE XREF=copy_internal+12256
000000000000ad83         mov        rcx, rdx
000000000000ad86         jne        loc_ada8

000000000000ad88         test       rsi, rsi
000000000000ad8b         mov        edi, 0x2000
000000000000ad90         cmovne     rdi, rsi

                     loc_ad94:
000000000000ad94         cmp        rdi, rcx                                    ; CODE XREF=buffer_lcm+43, buffer_lcm+82, buffer_lcm+95
000000000000ad97         cmovbe     rcx, rdi
000000000000ad9b         mov        r8, rcx

                     loc_ad9e:
000000000000ad9e         mov        rax, r8                                     ; CODE XREF=buffer_lcm+97
000000000000ada1         ret
                        ; endp
000000000000ada2         align      8

                     loc_ada8:
000000000000ada8         test       rsi, rsi                                    ; CODE XREF=buffer_lcm+6
000000000000adab         je         loc_ad94

000000000000adad         mov        r8, rsi
000000000000adb0         mov        rax, rdi

                     loc_adb3:
000000000000adb3         xor        edx, edx                                    ; CODE XREF=buffer_lcm+110
000000000000adb5         div        r8
000000000000adb8         test       rdx, rdx
000000000000adbb         jne        loc_ade8

000000000000adbd         xor        edx, edx
000000000000adbf         mov        rax, rdi
000000000000adc2         div        r8
000000000000adc5         mov        r8, rsi
000000000000adc8         imul       r8, rax
000000000000adcc         mov        r9, rax
000000000000adcf         cmp        r8, rcx
000000000000add2         ja         loc_ad94

000000000000add4         xor        edx, edx
000000000000add6         mov        rax, r8
000000000000add9         div        rsi
000000000000addc         cmp        rax, r9
000000000000addf         jne        loc_ad94

000000000000ade1         jmp        loc_ad9e
000000000000ade3         align      8

                     loc_ade8:
000000000000ade8         mov        rax, r8                                     ; CODE XREF=buffer_lcm+59
000000000000adeb         mov        r8, rdx
000000000000adee         jmp        loc_adb3


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdin_set_file_name:
000000000000adf0         mov        qword [file_name], rdi                      ; End of unwind block (FDE at 0x18834), Begin of unwind block (FDE at 0x1884c), file_name
000000000000adf7         ret
                        ; endp
000000000000adf8         align      512                                         ; End of unwind block (FDE at 0x1884c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdin:
000000000000ae00         push       r12                                         ; Begin of unwind block (FDE at 0x18860), DATA XREF=main+102
000000000000ae02         push       rbp
000000000000ae03         push       rbx
000000000000ae04         mov        rbx, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
000000000000ae0b         mov        rdi, rbx
000000000000ae0e         call       freadahead                                  ; freadahead
000000000000ae13         test       rax, rax
000000000000ae16         jne        loc_aeb8

000000000000ae1c         mov        rdi, rbx
000000000000ae1f         call       close_stream                                ; close_stream
000000000000ae24         test       eax, eax
000000000000ae26         jne        loc_ae58

000000000000ae28         pop        rbx
000000000000ae29         pop        rbp
000000000000ae2a         pop        r12
000000000000ae2c         jmp        close_stdout                                ; close_stdout
                        ; endp
000000000000ae31         align      8

                     loc_ae38:
000000000000ae38         call       rpl_fflush                                  ; rpl_fflush, CODE XREF=close_stdin+208
000000000000ae3d         test       eax, eax
000000000000ae3f         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
000000000000ae46         je         loc_aed6

000000000000ae4c         call       close_stream                                ; close_stream
000000000000ae51         nop        dword [rax]

                     loc_ae58:
000000000000ae58         lea        rsi, qword [aErrorClosingFi]                ; argument "msgid" for method j_dcgettext, "error closing file", CODE XREF=close_stdin+38, close_stdin+221
000000000000ae5f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000ae61         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000ae66         call       j_dcgettext                                 ; dcgettext
000000000000ae6b         mov        rbx, qword [file_name]                      ; file_name
000000000000ae72         mov        r12, rax
000000000000ae75         call       j___errno_location                          ; __errno_location
000000000000ae7a         mov        rbp, rax
000000000000ae7d         test       rbx, rbx
000000000000ae80         je         loc_aef0

000000000000ae82         mov        rdi, rbx
000000000000ae85         call       quotearg_colon                              ; quotearg_colon
000000000000ae8a         mov        esi, dword [rbp]                            ; argument "__errnum" for method j_error
000000000000ae8d         lea        rdx, qword [aSS_16913]                      ; argument "__format" for method j_error, "%s: %s"
000000000000ae94         mov        rcx, rax
000000000000ae97         mov        r8, r12
000000000000ae9a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000ae9c         xor        eax, eax
000000000000ae9e         call       j_error                                     ; error

                     loc_aea3:
000000000000aea3         call       close_stdout                                ; close_stdout, CODE XREF=close_stdin+261
000000000000aea8         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure
000000000000aeae         call       j__exit                                     ; _exit
                        ; endp
000000000000aeb3         align      8

                     loc_aeb8:
000000000000aeb8         xor        esi, esi                                    ; CODE XREF=close_stdin+22
000000000000aeba         mov        rdi, rbx
000000000000aebd         mov        edx, 0x1
000000000000aec2         call       rpl_fseeko                                  ; rpl_fseeko
000000000000aec7         test       eax, eax
000000000000aec9         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
000000000000aed0         je         loc_ae38

                     loc_aed6:
000000000000aed6         call       close_stream                                ; close_stream, CODE XREF=close_stdin+70
000000000000aedb         test       eax, eax
000000000000aedd         jne        loc_ae58

000000000000aee3         pop        rbx
000000000000aee4         pop        rbp
000000000000aee5         pop        r12
000000000000aee7         jmp        close_stdout                                ; close_stdout
                        ; endp
000000000000aeec         align      16

                     loc_aef0:
000000000000aef0         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdin+128
000000000000aef2         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x17447
000000000000aef9         mov        rcx, r12
000000000000aefc         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000aefe         xor        eax, eax
000000000000af00         call       j_error                                     ; error
000000000000af05         jmp        loc_aea3
000000000000af07         align      16                                          ; End of unwind block (FDE at 0x18860)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
000000000000af10         mov        qword [file_name_21c578], rdi               ; Begin of unwind block (FDE at 0x1889c), file_name_21c578
000000000000af17         ret
                        ; endp
000000000000af18         align      32                                          ; End of unwind block (FDE at 0x1889c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
000000000000af20         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x188b0), ignore_EPIPE
000000000000af27         ret
                        ; endp
000000000000af28         align      16                                          ; End of unwind block (FDE at 0x188b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
000000000000af30         push       rbp                                         ; Begin of unwind block (FDE at 0x188c4), CODE XREF=close_stdin+44, close_stdin+163, close_stdin+231
000000000000af31         push       rbx
000000000000af32         sub        rsp, 0x8
000000000000af36         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000af3d         call       close_stream                                ; close_stream
000000000000af42         test       eax, eax
000000000000af44         je         loc_af5c

000000000000af46         call       j___errno_location                          ; __errno_location
000000000000af4b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
000000000000af52         mov        rbx, rax
000000000000af55         je         loc_af73

000000000000af57         cmp        dword [rax], 0x20
000000000000af5a         jne        loc_af73

                     loc_af5c:
000000000000af5c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
000000000000af63         call       close_stream                                ; close_stream
000000000000af68         test       eax, eax
000000000000af6a         jne        loc_afb2

000000000000af6c         add        rsp, 0x8
000000000000af70         pop        rbx
000000000000af71         pop        rbp
000000000000af72         ret
                        ; endp

                     loc_af73:
000000000000af73         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
000000000000af7a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000af7c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000af81         call       j_dcgettext                                 ; dcgettext
000000000000af86         mov        rdi, qword [file_name_21c578]               ; file_name_21c578
000000000000af8d         mov        rbp, rax
000000000000af90         test       rdi, rdi
000000000000af93         je         loc_afbd

000000000000af95         call       quotearg_colon                              ; quotearg_colon
000000000000af9a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000af9c         lea        rdx, qword [aSS_16913]                      ; argument "__format" for method j_error, "%s: %s"
000000000000afa3         mov        rcx, rax
000000000000afa6         mov        r8, rbp
000000000000afa9         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000afab         xor        eax, eax
000000000000afad         call       j_error                                     ; error

                     loc_afb2:
000000000000afb2         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
000000000000afb8         call       j__exit                                     ; _exit
                        ; endp

                     loc_afbd:
000000000000afbd         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
000000000000afbf         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x17447
000000000000afc6         mov        rcx, rax
000000000000afc9         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000afcb         xor        eax, eax
000000000000afcd         call       j_error                                     ; error
000000000000afd2         jmp        loc_afb2
000000000000afd4         align      32                                          ; End of unwind block (FDE at 0x188c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dir_name:
000000000000afe0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x188f4), CODE XREF=copy_internal+3795, same_nameat.part.0+43, same_nameat.part.0+95
000000000000afe4         call       mdir_name                                   ; mdir_name
000000000000afe9         test       rax, rax
000000000000afec         je         loc_aff3

000000000000afee         add        rsp, 0x8
000000000000aff2         ret
                        ; endp

                     loc_aff3:
000000000000aff3         call       xalloc_die                                  ; xalloc_die, CODE XREF=dir_name+12
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_aff8:
000000000000aff8         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x188f4)
                     dir_len:
000000000000b000         push       rbp                                         ; Begin of unwind block (FDE at 0x18914), CODE XREF=mdir_name+9
000000000000b001         push       rbx
000000000000b002         xor        ebp, ebp
000000000000b004         mov        rbx, rdi
000000000000b007         sub        rsp, 0x8
000000000000b00b         cmp        byte [rdi], 0x2f                            ; argument #1 for method last_component
000000000000b00e         sete       bpl
000000000000b012         call       last_component                              ; last_component
000000000000b017         mov        rcx, rax
000000000000b01a         sub        rcx, rbx
000000000000b01d         cmp        rcx, rbp
000000000000b020         jbe        loc_b050

000000000000b022         cmp        byte [rax-1], 0x2f
000000000000b026         lea        rdx, qword [rcx-1]
000000000000b02a         je         loc_b03e

000000000000b02c         jmp        loc_b050
000000000000b02e         align      16

                     loc_b030:
000000000000b030         cmp        byte [rbx+rdx-1], 0x2f                      ; CODE XREF=dir_len+65
000000000000b035         lea        rax, qword [rdx-1]
000000000000b039         jne        loc_b043

000000000000b03b         mov        rdx, rax

                     loc_b03e:
000000000000b03e         cmp        rbp, rdx                                    ; CODE XREF=dir_len+42
000000000000b041         jne        loc_b030

                     loc_b043:
000000000000b043         add        rsp, 0x8                                    ; CODE XREF=dir_len+57
000000000000b047         mov        rax, rdx
000000000000b04a         pop        rbx
000000000000b04b         pop        rbp
000000000000b04c         ret
                        ; endp
000000000000b04d         align      16

                     loc_b050:
000000000000b050         add        rsp, 0x8                                    ; CODE XREF=dir_len+32, dir_len+44
000000000000b054         mov        rdx, rcx
000000000000b057         mov        rax, rdx
000000000000b05a         pop        rbx
000000000000b05b         pop        rbp
000000000000b05c         ret
                        ; endp
000000000000b05d         align      32                                          ; End of unwind block (FDE at 0x18914)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mdir_name:
000000000000b060         push       rbp                                         ; Begin of unwind block (FDE at 0x18948), CODE XREF=dir_name+4
000000000000b061         push       rbx
000000000000b062         mov        rbp, rdi
000000000000b065         sub        rsp, 0x8
000000000000b069         call       dir_len                                     ; dir_len
000000000000b06e         test       rax, rax
000000000000b071         mov        rbx, rax
000000000000b074         sete       al
000000000000b077         movzx      eax, al
000000000000b07a         lea        rdi, qword [rbx+rax+1]                      ; argument "__size" for method j_malloc
000000000000b07f         call       j_malloc                                    ; malloc
000000000000b084         test       rax, rax
000000000000b087         mov        rcx, rax
000000000000b08a         je         loc_b0a6

000000000000b08c         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000b08f         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
000000000000b092         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000b095         call       j_memcpy                                    ; memcpy
000000000000b09a         test       rbx, rbx
000000000000b09d         mov        rcx, rax
000000000000b0a0         je         loc_b0b0

                     loc_b0a2:
000000000000b0a2         mov        byte [rcx+rbx], 0x0                         ; CODE XREF=mdir_name+88

                     loc_b0a6:
000000000000b0a6         add        rsp, 0x8                                    ; CODE XREF=mdir_name+42
000000000000b0aa         mov        rax, rcx
000000000000b0ad         pop        rbx
000000000000b0ae         pop        rbp
000000000000b0af         ret
                        ; endp

                     loc_b0b0:
000000000000b0b0         mov        byte [rax], 0x2e                            ; CODE XREF=mdir_name+64
000000000000b0b3         mov        ebx, 0x1
000000000000b0b8         jmp        loc_b0a2
000000000000b0ba         align      64                                          ; End of unwind block (FDE at 0x18948)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     last_component:
000000000000b0c0         movzx      edx, byte [rdi]                             ; Begin of unwind block (FDE at 0x18974), CODE XREF=movefile+59, sub_45b0+150, copy_internal+3331, copy_internal+3456, copy_internal+8116, samedir_template+10, set_simple_backup_suffix+35, backupfile_internal+56, backupfile_internal+1043, dir_len+18, strip_trailing_slashes+9
000000000000b0c3         mov        rax, rdi
000000000000b0c6         cmp        dl, 0x2f
000000000000b0c9         jne        loc_b0dc

000000000000b0cb         nop        dword [rax+rax]

                     loc_b0d0:
000000000000b0d0         add        rax, 0x1                                    ; CODE XREF=last_component+26
000000000000b0d4         movzx      edx, byte [rax]
000000000000b0d7         cmp        dl, 0x2f
000000000000b0da         je         loc_b0d0

                     loc_b0dc:
000000000000b0dc         test       dl, dl                                      ; CODE XREF=last_component+9
000000000000b0de         je         loc_b11a

000000000000b0e0         mov        rcx, rax
000000000000b0e3         xor        esi, esi
000000000000b0e5         jmp        loc_b105
000000000000b0e7         align      16

                     loc_b0f0:
000000000000b0f0         test       sil, sil                                    ; CODE XREF=last_component+72
000000000000b0f3         je         loc_b0fa

000000000000b0f5         mov        rax, rcx
000000000000b0f8         xor        esi, esi

                     loc_b0fa:
000000000000b0fa         add        rcx, 0x1                                    ; CODE XREF=last_component+51
000000000000b0fe         movzx      edx, byte [rcx]
000000000000b101         test       dl, dl
000000000000b103         je         loc_b11a

                     loc_b105:
000000000000b105         cmp        dl, 0x2f                                    ; CODE XREF=last_component+37, last_component+88
000000000000b108         jne        loc_b0f0

000000000000b10a         add        rcx, 0x1
000000000000b10e         movzx      edx, byte [rcx]
000000000000b111         mov        esi, 0x1
000000000000b116         test       dl, dl
000000000000b118         jne        loc_b105

                     loc_b11a:
000000000000b11a         ret                                                    ; CODE XREF=last_component+30, last_component+67
                        ; endp
000000000000b11c         align      32                                          ; End of unwind block (FDE at 0x18974)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     base_len:
000000000000b120         push       rbx                                         ; Begin of unwind block (FDE at 0x18988), CODE XREF=backupfile_internal+237, backupfile_internal+1054, strip_trailing_slashes+27, mfile_name_concat+34, same_nameat+52, same_nameat+63
000000000000b121         mov        rbx, rdi
000000000000b124         call       j_strlen                                    ; strlen
000000000000b129         cmp        rax, 0x1
000000000000b12d         jbe        loc_b13a

000000000000b12f         cmp        byte [rbx+rax-1], 0x2f
000000000000b134         lea        rdx, qword [rax-1]
000000000000b138         je         loc_b148

                     loc_b13a:
000000000000b13a         pop        rbx                                         ; CODE XREF=base_len+13
000000000000b13b         ret
                        ; endp
000000000000b13c         align      64

                     loc_b140:
000000000000b140         mov        rdx, rax                                    ; CODE XREF=base_len+55
000000000000b143         nop        dword [rax+rax]

                     loc_b148:
000000000000b148         cmp        rdx, 0x1                                    ; CODE XREF=base_len+24
000000000000b14c         je         loc_b160

000000000000b14e         cmp        byte [rbx+rdx-1], 0x2f
000000000000b153         lea        rax, qword [rdx-1]
000000000000b157         je         loc_b140

000000000000b159         mov        rax, rdx
000000000000b15c         pop        rbx
000000000000b15d         ret
                        ; endp
000000000000b15e         align      32

                     loc_b160:
000000000000b160         mov        eax, 0x1                                    ; CODE XREF=base_len+44
000000000000b165         pop        rbx
000000000000b166         ret
                        ; endp
000000000000b167         align      16                                          ; End of unwind block (FDE at 0x18988)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     strip_trailing_slashes:
000000000000b170         push       rbp                                         ; Begin of unwind block (FDE at 0x189b4), CODE XREF=movefile+83, movefile+132
000000000000b171         push       rbx
000000000000b172         mov        rbp, rdi
000000000000b175         sub        rsp, 0x8
000000000000b179         call       last_component                              ; last_component
000000000000b17e         cmp        byte [rax], 0x0
000000000000b181         mov        rbx, rax
000000000000b184         cmove      rbx, rbp
000000000000b188         mov        rdi, rbx
000000000000b18b         call       base_len                                    ; base_len
000000000000b190         add        rbx, rax
000000000000b193         cmp        byte [rbx], 0x0
000000000000b196         mov        byte [rbx], 0x0
000000000000b199         setne      al
000000000000b19c         add        rsp, 0x8
000000000000b1a0         pop        rbx
000000000000b1a1         pop        rbp
000000000000b1a2         ret
                        ; endp
000000000000b1a3         align      16                                          ; End of unwind block (FDE at 0x189b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fdadvise:
000000000000b1b0         jmp        j_posix_fadvise                             ; posix_fadvise, Begin of unwind block (FDE at 0x189dc), CODE XREF=copy_internal+12119
                        ; endp
000000000000b1b5         align      64                                          ; End of unwind block (FDE at 0x189dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fadvise:
000000000000b1c0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x189f0)
000000000000b1c3         je         loc_b1e0

000000000000b1c5         push       rbx
000000000000b1c6         mov        ebx, esi
000000000000b1c8         call       j_fileno                                    ; fileno
000000000000b1cd         mov        ecx, ebx                                    ; argument "__advise" for method j_posix_fadvise
000000000000b1cf         xor        edx, edx                                    ; argument "__len" for method j_posix_fadvise
000000000000b1d1         xor        esi, esi                                    ; argument "__offset" for method j_posix_fadvise
000000000000b1d3         pop        rbx
000000000000b1d4         mov        edi, eax                                    ; argument "__fd" for method j_posix_fadvise
000000000000b1d6         jmp        j_posix_fadvise                             ; posix_fadvise
                        ; endp
000000000000b1db         align      32

                     loc_b1e0:
000000000000b1e0         ret                                                    ; CODE XREF=fadvise+3
                        ; endp
000000000000b1e2         align      16                                          ; End of unwind block (FDE at 0x189f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_28: int64_t, -40
        ;    var_38: int8_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     open_safer:
000000000000b1f0         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0x18a0c), CODE XREF=copy_internal+8380, copy_internal+11880, copy_internal+13328, copy_internal+14387
000000000000b1f4         mov        qword [rsp+0x58+var_28], rdx
000000000000b1f9         xor        edx, edx
000000000000b1fb         mov        rax, qword [fs:0x28]
000000000000b204         mov        qword [rsp+0x58+var_40], rax
000000000000b209         xor        eax, eax
000000000000b20b         test       sil, 0x40
000000000000b20f         jne        loc_b238

                     loc_b211:
000000000000b211         xor        eax, eax                                    ; CODE XREF=open_safer+103
000000000000b213         call       j_open                                      ; open
000000000000b218         mov        edi, eax
000000000000b21a         call       fd_safer                                    ; fd_safer
000000000000b21f         mov        rcx, qword [rsp+0x58+var_40]
000000000000b224         xor        rcx, qword [fs:0x28]
000000000000b22d         jne        loc_b259

000000000000b22f         add        rsp, 0x58
000000000000b233         ret
                        ; endp
000000000000b234         align      8

                     loc_b238:
000000000000b238         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=open_safer+31
000000000000b23d         mov        dword [rsp+0x58+var_58], 0x10
000000000000b244         mov        edx, dword [rsp+0x58+var_28]
000000000000b248         mov        qword [rsp+0x58+var_50], rax
000000000000b24d         lea        rax, qword [rsp+0x58+var_38]
000000000000b252         mov        qword [rsp+0x58+var_48], rax
000000000000b257         jmp        loc_b211

                     loc_b259:
000000000000b259         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=open_safer+61
                        ; endp
000000000000b25e         align      32                                          ; End of unwind block (FDE at 0x18a0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     record_file:
000000000000b260         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x18a2c), CODE XREF=copy_internal+325, copy_internal+4797, copy_internal+9792
000000000000b263         je         loc_b2e0

000000000000b265         push       r13
000000000000b267         push       r12
000000000000b269         mov        r13, rdi
000000000000b26c         push       rbp
000000000000b26d         push       rbx
000000000000b26e         mov        r12, rsi
000000000000b271         mov        edi, 0x18                                   ; argument #1 for method xmalloc
000000000000b276         mov        rbp, rdx
000000000000b279         sub        rsp, 0x8
000000000000b27d         call       xmalloc                                     ; xmalloc
000000000000b282         mov        rdi, r12                                    ; argument #1 for method xstrdup
000000000000b285         mov        rbx, rax
000000000000b288         call       xstrdup                                     ; xstrdup
000000000000b28d         mov        qword [rbx], rax
000000000000b290         mov        rax, qword [rbp+8]
000000000000b294         mov        rsi, rbx                                    ; argument #2 for method hash_insert
000000000000b297         mov        rdi, r13                                    ; argument #1 for method hash_insert
000000000000b29a         mov        qword [rbx+8], rax
000000000000b29e         mov        rax, qword [rbp]
000000000000b2a2         mov        qword [rbx+0x10], rax
000000000000b2a6         call       hash_insert                                 ; hash_insert
000000000000b2ab         test       rax, rax
000000000000b2ae         je         loc_b2e2

000000000000b2b0         cmp        rbx, rax
000000000000b2b3         je         loc_b2d0

000000000000b2b5         add        rsp, 0x8
000000000000b2b9         mov        rdi, rbx
000000000000b2bc         pop        rbx
000000000000b2bd         pop        rbp
000000000000b2be         pop        r12
000000000000b2c0         pop        r13
000000000000b2c2         jmp        triple_free                                 ; triple_free
                        ; endp
000000000000b2c7         align      16

                     loc_b2d0:
000000000000b2d0         add        rsp, 0x8                                    ; CODE XREF=record_file+83
000000000000b2d4         pop        rbx
000000000000b2d5         pop        rbp
000000000000b2d6         pop        r12
000000000000b2d8         pop        r13
000000000000b2da         ret
                        ; endp
000000000000b2db         align      32

                     loc_b2e0:
000000000000b2e0         ret                                                    ; CODE XREF=record_file+3
                        ; endp

                     loc_b2e2:
000000000000b2e2         call       xalloc_die                                  ; xalloc_die, CODE XREF=record_file+78
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     sub_b2e7:
000000000000b2e7         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x18a2c)
                     seen_file:
000000000000b2f0         sub        rsp, 0x28                                   ; Begin of unwind block (FDE at 0x18a8c), CODE XREF=copy_internal+996, copy_internal+2649, copy_internal+6064
000000000000b2f4         mov        rax, qword [fs:0x28]
000000000000b2fd         mov        qword [rsp+0x28+var_10], rax
000000000000b302         xor        eax, eax
000000000000b304         test       rdi, rdi
000000000000b307         je         loc_b32c

000000000000b309         mov        rax, qword [rdx+8]
000000000000b30d         mov        qword [rsp+0x28+var_28], rsi
000000000000b311         mov        rsi, rsp                                    ; argument #2 for method hash_lookup
000000000000b314         mov        qword [rsp+0x28+var_20], rax
000000000000b319         mov        rax, qword [rdx]
000000000000b31c         mov        qword [rsp+0x28+var_18], rax
000000000000b321         call       hash_lookup                                 ; hash_lookup
000000000000b326         test       rax, rax
000000000000b329         setne      al

                     loc_b32c:
000000000000b32c         mov        rcx, qword [rsp+0x28+var_10]                ; CODE XREF=seen_file+23
000000000000b331         xor        rcx, qword [fs:0x28]
000000000000b33a         jne        loc_b341

000000000000b33c         add        rsp, 0x28
000000000000b340         ret
                        ; endp

                     loc_b341:
000000000000b341         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=seen_file+74
                        ; endp
000000000000b346         align      16                                          ; End of unwind block (FDE at 0x18a8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     file_type:
000000000000b350         mov        eax, dword [rdi+0x18]                       ; Begin of unwind block (FDE at 0x18aac), CODE XREF=prompt+455
000000000000b353         mov        edx, 0x5
000000000000b358         and        eax, 0xf000
000000000000b35d         cmp        eax, 0x8000
000000000000b362         je         loc_b3b0

000000000000b364         cmp        eax, 0x4000
000000000000b369         je         loc_b400

000000000000b36f         cmp        eax, 0xa000
000000000000b374         je         loc_b3e0

000000000000b376         cmp        eax, 0x6000
000000000000b37b         je         loc_b410

000000000000b381         cmp        eax, 0x2000
000000000000b386         je         loc_b420

000000000000b38c         cmp        eax, 0x1000
000000000000b391         je         loc_b430

000000000000b397         cmp        eax, 0xc000
000000000000b39c         je         loc_b3f0

000000000000b39e         lea        rsi, qword [aWeirdFile]                     ; argument "msgid" for method j_dcgettext, "weird file"
000000000000b3a5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b3a7         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000b3ac         align      16

                     loc_b3b0:
000000000000b3b0         cmp        qword [rdi+0x30], 0x0                       ; CODE XREF=file_type+18
000000000000b3b5         jne        loc_b3c8

000000000000b3b7         lea        rsi, qword [aRegularEmptyFi]                ; argument "msgid" for method j_dcgettext, "regular empty file"
000000000000b3be         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b3c0         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000b3c5         align      8

                     loc_b3c8:
000000000000b3c8         lea        rsi, qword [aRegularFile]                   ; argument "msgid" for method j_dcgettext, "regular file", CODE XREF=file_type+101
000000000000b3cf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b3d1         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000b3d6         align      32

                     loc_b3e0:
000000000000b3e0         lea        rsi, qword [aSymbolicLink]                  ; argument "msgid" for method j_dcgettext, "symbolic link", CODE XREF=file_type+36
000000000000b3e7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b3e9         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000b3ee         align      16

                     loc_b3f0:
000000000000b3f0         lea        rsi, qword [aSocket]                        ; argument "msgid" for method j_dcgettext, "socket", CODE XREF=file_type+76
000000000000b3f7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b3f9         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000b3fe         align      1024

                     loc_b400:
000000000000b400         lea        rsi, qword [aTargetSIsNotAD+19]             ; argument "msgid" for method j_dcgettext, 0x1501a, CODE XREF=file_type+25
000000000000b407         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b409         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000b40e         align      16

                     loc_b410:
000000000000b410         lea        rsi, qword [aBlockSpecialFi]                ; argument "msgid" for method j_dcgettext, "block special file", CODE XREF=file_type+43
000000000000b417         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b419         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000b41e         align      32

                     loc_b420:
000000000000b420         lea        rsi, qword [aCharacterSpeci]                ; argument "msgid" for method j_dcgettext, "character special file", CODE XREF=file_type+54
000000000000b427         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b429         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000b42e         align      16

                     loc_b430:
000000000000b430         lea        rsi, qword [aCharacterSpeci+23]             ; argument "msgid" for method j_dcgettext, 0x1697e, CODE XREF=file_type+65
000000000000b437         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b439         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000b43e         align      64                                          ; End of unwind block (FDE at 0x18aac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     strmode:
000000000000b440         mov        edx, edi                                    ; Begin of unwind block (FDE at 0x18ac4), CODE XREF=overwrite_ok.isra.12+66, filemodestring+3
000000000000b442         mov        eax, 0x2d
000000000000b447         and        edx, 0xf000
000000000000b44d         cmp        edx, 0x8000
000000000000b453         je         loc_b4b0

000000000000b455         cmp        edx, 0x4000
000000000000b45b         mov        eax, 0x64
000000000000b460         je         loc_b4b0

000000000000b462         cmp        edx, 0x6000
000000000000b468         mov        eax, 0x62
000000000000b46d         je         loc_b4b0

000000000000b46f         cmp        edx, 0x2000
000000000000b475         mov        eax, 0x63
000000000000b47a         je         loc_b4b0

000000000000b47c         cmp        edx, 0xa000
000000000000b482         mov        eax, 0x6c
000000000000b487         je         loc_b4b0

000000000000b489         cmp        edx, 0x1000
000000000000b48f         mov        eax, 0x70
000000000000b494         je         loc_b4b0

000000000000b496         cmp        edx, 0xc000
000000000000b49c         mov        eax, 0x73
000000000000b4a1         mov        edx, 0x3f
000000000000b4a6         cmovne     eax, edx
000000000000b4a9         nop        dword [rax]

                     loc_b4b0:
000000000000b4b0         mov        byte [rsi], al                              ; CODE XREF=strmode+19, strmode+32, strmode+45, strmode+58, strmode+71, strmode+84
000000000000b4b2         mov        eax, edi
000000000000b4b4         and        eax, 0x100
000000000000b4b9         cmp        eax, 0x1
000000000000b4bc         sbb        eax, eax
000000000000b4be         and        eax, 0xffffffbb
000000000000b4c1         add        eax, 0x72
000000000000b4c4         mov        byte [rsi+1], al
000000000000b4c7         mov        eax, edi
000000000000b4c9         and        eax, 0x80
000000000000b4ce         cmp        eax, 0x1
000000000000b4d1         sbb        eax, eax
000000000000b4d3         and        eax, 0xffffffb6
000000000000b4d6         add        eax, 0x77
000000000000b4d9         mov        byte [rsi+2], al
000000000000b4dc         mov        eax, edi
000000000000b4de         and        eax, 0x40
000000000000b4e1         cmp        eax, 0x1
000000000000b4e4         sbb        eax, eax
000000000000b4e6         test       edi, 0x800
000000000000b4ec         je         loc_b590

000000000000b4f2         and        eax, 0xffffffe0
000000000000b4f5         add        eax, 0x73

                     loc_b4f8:
000000000000b4f8         mov        byte [rsi+3], al                            ; CODE XREF=strmode+342
000000000000b4fb         mov        eax, edi
000000000000b4fd         and        eax, 0x20
000000000000b500         cmp        eax, 0x1
000000000000b503         sbb        eax, eax
000000000000b505         and        eax, 0xffffffbb
000000000000b508         add        eax, 0x72
000000000000b50b         mov        byte [rsi+4], al
000000000000b50e         mov        eax, edi
000000000000b510         and        eax, 0x10
000000000000b513         cmp        eax, 0x1
000000000000b516         sbb        eax, eax
000000000000b518         and        eax, 0xffffffb6
000000000000b51b         add        eax, 0x77
000000000000b51e         mov        byte [rsi+5], al
000000000000b521         mov        eax, edi
000000000000b523         and        eax, 0x8
000000000000b526         cmp        eax, 0x1
000000000000b529         sbb        eax, eax
000000000000b52b         test       edi, 0x400
000000000000b531         je         loc_b5b8

000000000000b537         and        eax, 0xffffffe0
000000000000b53a         add        eax, 0x73

                     loc_b53d:
000000000000b53d         mov        byte [rsi+6], al                            ; CODE XREF=strmode+382
000000000000b540         mov        eax, edi
000000000000b542         and        eax, 0x4
000000000000b545         cmp        eax, 0x1
000000000000b548         sbb        eax, eax
000000000000b54a         and        eax, 0xffffffbb
000000000000b54d         add        eax, 0x72
000000000000b550         mov        byte [rsi+7], al
000000000000b553         mov        eax, edi
000000000000b555         and        eax, 0x2
000000000000b558         cmp        eax, 0x1
000000000000b55b         sbb        eax, eax
000000000000b55d         and        eax, 0xffffffb6
000000000000b560         add        eax, 0x77
000000000000b563         mov        byte [rsi+8], al
000000000000b566         mov        eax, edi
000000000000b568         and        eax, 0x1
000000000000b56b         cmp        eax, 0x1
000000000000b56e         sbb        eax, eax
000000000000b570         and        edi, 0x200
000000000000b576         je         loc_b5a0

000000000000b578         and        eax, 0xffffffe0
000000000000b57b         add        eax, 0x74
000000000000b57e         mov        byte [rsi+9], al
000000000000b581         mov        eax, 0x20
000000000000b586         mov        word [rsi+0xa], ax
000000000000b58a         ret
                        ; endp
000000000000b58b         align      16

                     loc_b590:
000000000000b590         and        eax, 0xffffffb5                             ; CODE XREF=strmode+172
000000000000b593         add        eax, 0x78
000000000000b596         jmp        loc_b4f8
000000000000b59b         align      32

                     loc_b5a0:
000000000000b5a0         and        eax, 0xffffffb5                             ; CODE XREF=strmode+310
000000000000b5a3         add        eax, 0x78
000000000000b5a6         mov        byte [rsi+9], al
000000000000b5a9         mov        eax, 0x20
000000000000b5ae         mov        word [rsi+0xa], ax
000000000000b5b2         ret
                        ; endp
000000000000b5b3         align      8

                     loc_b5b8:
000000000000b5b8         and        eax, 0xffffffb5                             ; CODE XREF=strmode+241
000000000000b5bb         add        eax, 0x78
000000000000b5be         jmp        loc_b53d
000000000000b5c3         align      16                                          ; End of unwind block (FDE at 0x18ac4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     filemodestring:
000000000000b5d0         mov        edi, dword [rdi+0x18]                       ; Begin of unwind block (FDE at 0x18ad8), argument "mode" for method strmode
000000000000b5d3         jmp        strmode                                     ; strmode
                        ; endp
000000000000b5d8         align      32                                          ; End of unwind block (FDE at 0x18ad8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80


                     file_name_concat:
000000000000b5e0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x18aec), CODE XREF=movefile+72, sub_47d0+164, copy_internal+7808, copy_internal+7828
000000000000b5e4         call       mfile_name_concat                           ; mfile_name_concat
000000000000b5e9         test       rax, rax
000000000000b5ec         je         loc_b5f3

000000000000b5ee         add        rsp, 0x8
000000000000b5f2         ret
                        ; endp

                     loc_b5f3:
000000000000b5f3         call       xalloc_die                                  ; xalloc_die, CODE XREF=file_name_concat+12
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_39: int8_t, -57
        ;    var_48: int64_t, -72


                     sub_b5f8:
000000000000b5f8         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x18aec)
                     mfile_name_concat:
000000000000b600         push       r15                                         ; Begin of unwind block (FDE at 0x18b0c), CODE XREF=file_name_concat+4
000000000000b602         push       r14
000000000000b604         mov        r15, rdx
000000000000b607         push       r13
000000000000b609         push       r12
000000000000b60b         mov        r12, rdi
000000000000b60e         push       rbp
000000000000b60f         push       rbx
000000000000b610         mov        rbp, rsi
000000000000b613         sub        rsp, 0x18
000000000000b617         call       last_component                              ; last_component
000000000000b61c         mov        rbx, rax
000000000000b61f         mov        rdi, rax                                    ; argument #1 for method base_len
000000000000b622         call       base_len                                    ; base_len
000000000000b627         sub        rbx, r12
000000000000b62a         mov        r13, rax
000000000000b62d         mov        rdi, rbp                                    ; argument "__s" for method j_strlen
000000000000b630         add        rbx, rax
000000000000b633         call       j_strlen                                    ; strlen
000000000000b638         test       r13, r13
000000000000b63b         mov        r14, rax
000000000000b63e         je         loc_b670

000000000000b640         cmp        byte [r12+rbx-1], 0x2f
000000000000b646         je         loc_b6f0

000000000000b64c         xor        eax, eax
000000000000b64e         cmp        byte [rbp], 0x2f
000000000000b652         mov        edx, 0x0
000000000000b657         setne      al
000000000000b65a         mov        qword [rsp+0x48+var_48], rax
000000000000b65e         mov        eax, 0x2f
000000000000b663         cmove      eax, edx
000000000000b666         mov        byte [rsp+0x48+var_39], al
000000000000b66a         jmp        loc_b68e
000000000000b66c         align      16

                     loc_b670:
000000000000b670         xor        eax, eax                                    ; CODE XREF=mfile_name_concat+62
000000000000b672         cmp        byte [rbp], 0x2f
000000000000b676         mov        edx, 0x0
000000000000b67b         sete       al
000000000000b67e         mov        qword [rsp+0x48+var_48], rax
000000000000b682         mov        eax, 0x2e
000000000000b687         cmovne     eax, edx
000000000000b68a         mov        byte [rsp+0x48+var_39], al

                     loc_b68e:
000000000000b68e         lea        rdi, qword [rbx+r14+1]                      ; CODE XREF=mfile_name_concat+106, mfile_name_concat+253
000000000000b693         add        rdi, qword [rsp+0x48+var_48]                ; argument "__size" for method j_malloc
000000000000b697         call       j_malloc                                    ; malloc
000000000000b69c         test       rax, rax
000000000000b69f         mov        r13, rax
000000000000b6a2         je         loc_b6d6

000000000000b6a4         mov        rdi, rax                                    ; argument "__dest" for method j_mempcpy
000000000000b6a7         mov        rdx, rbx                                    ; argument "__n" for method j_mempcpy
000000000000b6aa         mov        rsi, r12                                    ; argument "__src" for method j_mempcpy
000000000000b6ad         call       j_mempcpy                                   ; mempcpy
000000000000b6b2         movzx      ecx, byte [rsp+0x48+var_39]
000000000000b6b7         mov        rdi, qword [rsp+0x48+var_48]
000000000000b6bb         add        rdi, rax
000000000000b6be         test       r15, r15
000000000000b6c1         mov        byte [rax], cl
000000000000b6c3         je         loc_b6c8

000000000000b6c5         mov        qword [r15], rdi

                     loc_b6c8:
000000000000b6c8         mov        rdx, r14                                    ; argument "__n" for method j_mempcpy, CODE XREF=mfile_name_concat+195
000000000000b6cb         mov        rsi, rbp                                    ; argument "__src" for method j_mempcpy
000000000000b6ce         call       j_mempcpy                                   ; mempcpy
000000000000b6d3         mov        byte [rax], 0x0

                     loc_b6d6:
000000000000b6d6         add        rsp, 0x18                                   ; CODE XREF=mfile_name_concat+162
000000000000b6da         mov        rax, r13
000000000000b6dd         pop        rbx
000000000000b6de         pop        rbp
000000000000b6df         pop        r12
000000000000b6e1         pop        r13
000000000000b6e3         pop        r14
000000000000b6e5         pop        r15
000000000000b6e7         ret
                        ; endp
000000000000b6e8         align      16

                     loc_b6f0:
000000000000b6f0         mov        qword [rsp+0x48+var_48], 0x0                ; CODE XREF=mfile_name_concat+70
000000000000b6f8         mov        byte [rsp+0x48+var_39], 0x0
000000000000b6fd         jmp        loc_b68e
000000000000b6ff         align      256                                         ; End of unwind block (FDE at 0x18b0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     full_write:
000000000000b700         push       r13                                         ; Begin of unwind block (FDE at 0x18b5c), CODE XREF=write_zeros+68, sparse_copy+518
000000000000b702         push       r12
000000000000b704         push       rbp
000000000000b705         push       rbx
000000000000b706         sub        rsp, 0x8
000000000000b70a         test       rdx, rdx
000000000000b70d         je         loc_b771

000000000000b70f         mov        r13d, edi
000000000000b712         mov        rbp, rsi
000000000000b715         mov        rbx, rdx
000000000000b718         xor        r12d, r12d
000000000000b71b         jmp        loc_b730
000000000000b71d         align      32

                     loc_b720:
000000000000b720         test       rax, rax                                    ; CODE XREF=full_write+66
000000000000b723         je         loc_b758

000000000000b725         add        r12, rax
000000000000b728         add        rbp, rax
000000000000b72b         sub        rbx, rax
000000000000b72e         je         loc_b744

                     loc_b730:
000000000000b730         mov        rdx, rbx                                    ; CODE XREF=full_write+27
000000000000b733         mov        rsi, rbp
000000000000b736         mov        edi, r13d
000000000000b739         call       safe_write                                  ; safe_write
000000000000b73e         cmp        rax, 0xffffffffffffffff
000000000000b742         jne        loc_b720

                     loc_b744:
000000000000b744         add        rsp, 0x8                                    ; CODE XREF=full_write+46, full_write+116
000000000000b748         mov        rax, r12
000000000000b74b         pop        rbx
000000000000b74c         pop        rbp
000000000000b74d         pop        r12
000000000000b74f         pop        r13
000000000000b751         ret
                        ; endp
000000000000b752         align      8

                     loc_b758:
000000000000b758         call       j___errno_location                          ; __errno_location, CODE XREF=full_write+35
000000000000b75d         mov        dword [rax], 0x1c
000000000000b763         add        rsp, 0x8
000000000000b767         mov        rax, r12
000000000000b76a         pop        rbx
000000000000b76b         pop        rbp
000000000000b76c         pop        r12
000000000000b76e         pop        r13
000000000000b770         ret
                        ; endp

                     loc_b771:
000000000000b771         xor        r12d, r12d                                  ; CODE XREF=full_write+13
000000000000b774         jmp        loc_b744
000000000000b776         align      128                                         ; End of unwind block (FDE at 0x18b5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     next_prime:
000000000000b780         cmp        rdi, 0xa                                    ; Begin of unwind block (FDE at 0x18bac), CODE XREF=hash_initialize+123, hash_rehash+123
000000000000b784         mov        eax, 0xa
000000000000b789         movabs     r9, 0xaaaaaaaaaaaaaaab
000000000000b793         cmovb      rdi, rax
000000000000b797         or         rdi, 0x1
000000000000b79b         cmp        rdi, 0xffffffffffffffff
000000000000b79f         je         loc_b80f

000000000000b7a1         nop        dword [rax]

                     loc_b7a8:
000000000000b7a8         mov        rax, rdi                                    ; CODE XREF=next_prime+141
000000000000b7ab         mov        rcx, rdi
000000000000b7ae         mul        r9
000000000000b7b1         mov        rax, rdx
000000000000b7b4         shr        rax, 0x1
000000000000b7b7         lea        rax, qword [rax+rax*2]
000000000000b7bb         sub        rcx, rax
000000000000b7be         cmp        rdi, 0x9
000000000000b7c2         mov        rax, rcx
000000000000b7c5         jbe        loc_b800

000000000000b7c7         test       rcx, rcx
000000000000b7ca         je         loc_b805

000000000000b7cc         mov        r8d, 0x10
000000000000b7d2         mov        esi, 0x9
000000000000b7d7         mov        ecx, 0x3
000000000000b7dc         jmp        loc_b7e9
000000000000b7de         align      32

                     loc_b7e0:
000000000000b7e0         add        r8, 0x8                                     ; CODE XREF=next_prime+126
000000000000b7e4         test       rdx, rdx
000000000000b7e7         je         loc_b805

                     loc_b7e9:
000000000000b7e9         add        rcx, 0x2                                    ; CODE XREF=next_prime+92
000000000000b7ed         xor        edx, edx
000000000000b7ef         mov        rax, rdi
000000000000b7f2         div        rcx
000000000000b7f5         add        rsi, r8
000000000000b7f8         cmp        rsi, rdi
000000000000b7fb         mov        rax, rdx
000000000000b7fe         jb         loc_b7e0

                     loc_b800:
000000000000b800         test       rax, rax                                    ; CODE XREF=next_prime+69
000000000000b803         jne        loc_b80f

                     loc_b805:
000000000000b805         add        rdi, 0x2                                    ; CODE XREF=next_prime+74, next_prime+103
000000000000b809         cmp        rdi, 0xffffffffffffffff
000000000000b80d         jne        loc_b7a8

                     loc_b80f:
000000000000b80f         mov        rax, rdi                                    ; CODE XREF=next_prime+31, next_prime+131
000000000000b812         ret
                        ; endp
000000000000b813         align      32                                          ; End of unwind block (FDE at 0x18bac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_hasher:
000000000000b820         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x18bc0), DATA XREF=hash_initialize+4
000000000000b823         xor        edx, edx
000000000000b825         ror        rax, 0x3
000000000000b829         div        rsi
000000000000b82c         mov        rax, rdx
000000000000b82f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_comparator:
000000000000b830         cmp        rdi, rsi                                    ; End of unwind block (FDE at 0x18bc0), Begin of unwind block (FDE at 0x18bd4), DATA XREF=hash_initialize+48
000000000000b833         sete       al
000000000000b836         ret
                        ; endp
000000000000b837         align      64                                          ; End of unwind block (FDE at 0x18bd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_hasher:
000000000000b840         push       rbx                                         ; Begin of unwind block (FDE at 0x18be8), CODE XREF=hash_find_entry+20, transfer_entries+101, transfer_entries+175, hash_lookup+10, hash_get_next+12
000000000000b841         mov        rbx, rdi
000000000000b844         mov        rdi, rsi
000000000000b847         mov        rsi, qword [rbx+0x10]
000000000000b84b         call       qword [rbx+0x30]
000000000000b84e         cmp        qword [rbx+0x10], rax
000000000000b852         jbe        loc_b85d

000000000000b854         shl        rax, 0x4
000000000000b858         add        rax, qword [rbx]
000000000000b85b         pop        rbx
000000000000b85c         ret
                        ; endp

                     loc_b85d:
000000000000b85d         call       j_abort                                     ; abort, CODE XREF=safe_hasher+18
                        ; endp
000000000000b862         align      16                                          ; End of unwind block (FDE at 0x18be8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_find_entry:
000000000000b870         push       r14                                         ; Begin of unwind block (FDE at 0x18c04), CODE XREF=hash_insert_if_absent+52, hash_insert_if_absent+463, hash_delete+35
000000000000b872         push       r13
000000000000b874         mov        r14, rdx
000000000000b877         push       r12
000000000000b879         push       rbp
000000000000b87a         mov        r12, rdi
000000000000b87d         push       rbx
000000000000b87e         mov        rbp, rsi
000000000000b881         mov        r13d, ecx
000000000000b884         call       safe_hasher                                 ; safe_hasher
000000000000b889         mov        qword [r14], rax
000000000000b88c         mov        rsi, qword [rax]
000000000000b88f         test       rsi, rsi
000000000000b892         je         loc_b980

000000000000b898         cmp        rsi, rbp
000000000000b89b         mov        rbx, rax
000000000000b89e         je         loc_b933

000000000000b8a4         mov        rdi, rbp
000000000000b8a7         call       qword [r12+0x38]
000000000000b8ac         test       al, al
000000000000b8ae         jne        loc_b930

000000000000b8b4         mov        rax, qword [rbx+8]
000000000000b8b8         test       rax, rax
000000000000b8bb         je         loc_b980

000000000000b8c1         mov        rsi, qword [rax]
000000000000b8c4         cmp        rbp, rsi
000000000000b8c7         jne        loc_b8e9

000000000000b8c9         jmp        loc_b8fc
000000000000b8cb         align      16

                     loc_b8d0:
000000000000b8d0         mov        rbx, qword [rbx+8]                          ; CODE XREF=hash_find_entry+131
000000000000b8d4         mov        rax, qword [rbx+8]
000000000000b8d8         test       rax, rax
000000000000b8db         je         loc_b980

000000000000b8e1         mov        rsi, qword [rax]
000000000000b8e4         cmp        rsi, rbp
000000000000b8e7         je         loc_b8fc

                     loc_b8e9:
000000000000b8e9         mov        rdi, rbp                                    ; CODE XREF=hash_find_entry+87
000000000000b8ec         call       qword [r12+0x38]
000000000000b8f1         test       al, al
000000000000b8f3         je         loc_b8d0

000000000000b8f5         mov        rax, qword [rbx+8]
000000000000b8f9         mov        rsi, qword [rax]

                     loc_b8fc:
000000000000b8fc         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+89, hash_find_entry+119
000000000000b8ff         je         loc_b91e

000000000000b901         mov        rdx, qword [rax+8]
000000000000b905         mov        qword [rbx+8], rdx
000000000000b909         mov        qword [rax], 0x0
000000000000b910         mov        rdx, qword [r12+0x48]
000000000000b915         mov        qword [rax+8], rdx
000000000000b919         mov        qword [r12+0x48], rax

                     loc_b91e:
000000000000b91e         pop        rbx                                         ; CODE XREF=hash_find_entry+143, hash_find_entry+198, hash_find_entry+263
000000000000b91f         mov        rax, rsi
000000000000b922         pop        rbp
000000000000b923         pop        r12
000000000000b925         pop        r13
000000000000b927         pop        r14
000000000000b929         ret
                        ; endp
000000000000b92a         align      16

                     loc_b930:
000000000000b930         mov        rsi, qword [rbx]                            ; CODE XREF=hash_find_entry+62

                     loc_b933:
000000000000b933         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+46
000000000000b936         je         loc_b91e

000000000000b938         mov        rax, qword [rbx+8]
000000000000b93c         test       rax, rax
000000000000b93f         je         loc_b970

000000000000b941         movdqu     xmm0, xmmword [rax]
000000000000b945         movups     xmmword [rbx], xmm0
000000000000b948         mov        qword [rax], 0x0
000000000000b94f         mov        rdx, qword [r12+0x48]
000000000000b954         mov        qword [rax+8], rdx
000000000000b958         mov        qword [r12+0x48], rax
000000000000b95d         mov        rax, rsi
000000000000b960         pop        rbx
000000000000b961         pop        rbp
000000000000b962         pop        r12
000000000000b964         pop        r13
000000000000b966         pop        r14
000000000000b968         ret
                        ; endp
000000000000b969         align      16

                     loc_b970:
000000000000b970         mov        qword [rbx], 0x0                            ; CODE XREF=hash_find_entry+207
000000000000b977         jmp        loc_b91e
000000000000b979         align      128

                     loc_b980:
000000000000b980         xor        esi, esi                                    ; CODE XREF=hash_find_entry+34, hash_find_entry+75, hash_find_entry+107
000000000000b982         pop        rbx
000000000000b983         mov        rax, rsi
000000000000b986         pop        rbp
000000000000b987         pop        r12
000000000000b989         pop        r13
000000000000b98b         pop        r14
000000000000b98d         ret
                        ; endp
000000000000b98e         align      16                                          ; End of unwind block (FDE at 0x18c04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_tuning.isra.0:
000000000000b990         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0x18c64), CODE XREF=hash_initialize+96, hash_initialize+283, hash_insert_if_absent+324, hash_delete+165
000000000000b993         lea        rcx, qword [default_tuning]                 ; default_tuning
000000000000b99a         mov        eax, 0x1
000000000000b99f         cmp        rdx, rcx
000000000000b9a2         je         loc_ba05

000000000000b9a4         movss      xmm0, dword [rdx+8]
000000000000b9a9         ucomiss    xmm0, dword [float_16a24]                   ; float_16a24
000000000000b9b0         jbe        loc_ba00

000000000000b9b2         movss      xmm1, dword [float_16a28]                   ; float_16a28
000000000000b9ba         ucomiss    xmm1, xmm0
000000000000b9bd         jbe        loc_ba00

000000000000b9bf         movss      xmm1, dword [rdx+0xc]
000000000000b9c4         ucomiss    xmm1, dword [float_16a2c]                   ; float_16a2c
000000000000b9cb         jbe        loc_ba00

000000000000b9cd         movss      xmm1, dword [rdx]
000000000000b9d1         ucomiss    xmm1, dword [float_16a30]                   ; float_16a30
000000000000b9d8         jb         loc_ba00

000000000000b9da         addss      xmm1, dword [float_16a24]                   ; float_16a24
000000000000b9e2         movss      xmm2, dword [rdx+4]
000000000000b9e7         ucomiss    xmm2, xmm1
000000000000b9ea         jbe        loc_ba00

000000000000b9ec         movss      xmm3, dword [float_16a34]                   ; float_16a34
000000000000b9f4         ucomiss    xmm3, xmm2
000000000000b9f7         jb         loc_ba00

000000000000b9f9         ucomiss    xmm0, xmm1
000000000000b9fc         ja         loc_ba05

000000000000b9fe         nop

                     loc_ba00:
000000000000ba00         mov        qword [rdi], rcx                            ; CODE XREF=check_tuning.isra.0+32, check_tuning.isra.0+45, check_tuning.isra.0+59, check_tuning.isra.0+72, check_tuning.isra.0+90, check_tuning.isra.0+103
000000000000ba03         xor        eax, eax

                     loc_ba05:
000000000000ba05         ret                                                    ; CODE XREF=check_tuning.isra.0+18, check_tuning.isra.0+108
                        ; endp
000000000000ba07         align      16                                          ; End of unwind block (FDE at 0x18c64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     transfer_entries:
000000000000ba10         push       r15                                         ; Begin of unwind block (FDE at 0x18c78), CODE XREF=hash_rehash+303, hash_rehash+338, hash_rehash+359
000000000000ba12         push       r14
000000000000ba14         push       r13
000000000000ba16         push       r12
000000000000ba18         push       rbp
000000000000ba19         push       rbx
000000000000ba1a         sub        rsp, 0x8
000000000000ba1e         mov        r12, qword [rsi]
000000000000ba21         cmp        r12, qword [rsi+8]
000000000000ba25         jae        loc_bb08

000000000000ba2b         mov        rbp, rdi
000000000000ba2e         mov        r13, rsi
000000000000ba31         mov        r14d, edx
000000000000ba34         nop        dword [rax]

                     loc_ba38:
000000000000ba38         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+242
000000000000ba3c         test       r15, r15
000000000000ba3f         je         loc_bafa

000000000000ba45         mov        rbx, qword [r12+8]
000000000000ba4a         test       rbx, rbx
000000000000ba4d         jne        loc_ba6c

000000000000ba4f         jmp        loc_baab
000000000000ba51         align      8

                     loc_ba58:
000000000000ba58         mov        rcx, qword [rax+8]                          ; CODE XREF=transfer_entries+114
000000000000ba5c         test       rdx, rdx
000000000000ba5f         mov        qword [rbx+8], rcx
000000000000ba63         mov        qword [rax+8], rbx
000000000000ba67         mov        rbx, rdx
000000000000ba6a         je         loc_baa7

                     loc_ba6c:
000000000000ba6c         mov        r15, qword [rbx]                            ; CODE XREF=transfer_entries+61, transfer_entries+149
000000000000ba6f         mov        rdi, rbp
000000000000ba72         mov        rsi, r15
000000000000ba75         call       safe_hasher                                 ; safe_hasher
000000000000ba7a         cmp        qword [rax], 0x0
000000000000ba7e         mov        rdx, qword [rbx+8]
000000000000ba82         jne        loc_ba58

000000000000ba84         mov        qword [rax], r15
000000000000ba87         add        qword [rbp+0x18], 0x1
000000000000ba8c         test       rdx, rdx
000000000000ba8f         mov        qword [rbx], 0x0
000000000000ba96         mov        rax, qword [rbp+0x48]
000000000000ba9a         mov        qword [rbx+8], rax
000000000000ba9e         mov        qword [rbp+0x48], rbx
000000000000baa2         mov        rbx, rdx
000000000000baa5         jne        loc_ba6c

                     loc_baa7:
000000000000baa7         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+90

                     loc_baab:
000000000000baab         test       r14b, r14b                                  ; CODE XREF=transfer_entries+63
000000000000baae         mov        qword [r12+8], 0x0
000000000000bab7         jne        loc_bafa

000000000000bab9         mov        rsi, r15
000000000000babc         mov        rdi, rbp
000000000000babf         call       safe_hasher                                 ; safe_hasher
000000000000bac4         cmp        qword [rax], 0x0
000000000000bac8         mov        rbx, rax
000000000000bacb         je         loc_bb20

000000000000bacd         mov        rax, qword [rbp+0x48]
000000000000bad1         test       rax, rax
000000000000bad4         je         loc_bb30

000000000000bad6         mov        rdx, qword [rax+8]
000000000000bada         mov        qword [rbp+0x48], rdx

                     loc_bade:
000000000000bade         mov        rdx, qword [rbx+8]                          ; CODE XREF=transfer_entries+301
000000000000bae2         mov        qword [rax], r15
000000000000bae5         mov        qword [rax+8], rdx
000000000000bae9         mov        qword [rbx+8], rax

                     loc_baed:
000000000000baed         mov        qword [r12], 0x0                            ; CODE XREF=transfer_entries+280
000000000000baf5         sub        qword [r13+0x18], 0x1

                     loc_bafa:
000000000000bafa         add        r12, 0x10                                   ; CODE XREF=transfer_entries+47, transfer_entries+167
000000000000bafe         cmp        qword [r13+8], r12
000000000000bb02         ja         loc_ba38

                     loc_bb08:
000000000000bb08         add        rsp, 0x8                                    ; CODE XREF=transfer_entries+21
000000000000bb0c         mov        eax, 0x1
000000000000bb11         pop        rbx
000000000000bb12         pop        rbp
000000000000bb13         pop        r12
000000000000bb15         pop        r13
000000000000bb17         pop        r14
000000000000bb19         pop        r15
000000000000bb1b         ret
                        ; endp
000000000000bb1c         align      32

                     loc_bb20:
000000000000bb20         mov        qword [rax], r15                            ; CODE XREF=transfer_entries+187
000000000000bb23         add        qword [rbp+0x18], 0x1
000000000000bb28         jmp        loc_baed
000000000000bb2a         align      16

                     loc_bb30:
000000000000bb30         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=transfer_entries+196
000000000000bb35         call       j_malloc                                    ; malloc
000000000000bb3a         test       rax, rax
000000000000bb3d         jne        loc_bade

000000000000bb3f         add        rsp, 0x8
000000000000bb43         xor        eax, eax
000000000000bb45         pop        rbx
000000000000bb46         pop        rbp
000000000000bb47         pop        r12
000000000000bb49         pop        r13
000000000000bb4b         pop        r14
000000000000bb4d         pop        r15
000000000000bb4f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets:
000000000000bb50         mov        rax, qword [rdi+0x10]                       ; End of unwind block (FDE at 0x18c78), Begin of unwind block (FDE at 0x18cd8)
000000000000bb54         ret
                        ; endp
000000000000bb55         align      32                                          ; End of unwind block (FDE at 0x18cd8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets_used:
000000000000bb60         mov        rax, qword [rdi+0x18]                       ; Begin of unwind block (FDE at 0x18cec)
000000000000bb64         ret
                        ; endp
000000000000bb65         align      16                                          ; End of unwind block (FDE at 0x18cec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_entries:
000000000000bb70         mov        rax, qword [rdi+0x20]                       ; Begin of unwind block (FDE at 0x18d00)
000000000000bb74         ret
                        ; endp
000000000000bb75         align      128                                         ; End of unwind block (FDE at 0x18d00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_max_bucket_length:
000000000000bb80         mov        rsi, qword [rdi]                            ; Begin of unwind block (FDE at 0x18d14)
000000000000bb83         mov        rdi, qword [rdi+8]
000000000000bb87         xor        eax, eax
000000000000bb89         cmp        rsi, rdi
000000000000bb8c         jae        loc_bbc7

000000000000bb8e         nop

                     loc_bb90:
000000000000bb90         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_get_max_bucket_length+67
000000000000bb94         je         loc_bbbc

000000000000bb96         mov        rdx, qword [rsi+8]
000000000000bb9a         mov        ecx, 0x1
000000000000bb9f         test       rdx, rdx
000000000000bba2         je         loc_bbb5

000000000000bba4         nop        dword [rax]

                     loc_bba8:
000000000000bba8         mov        rdx, qword [rdx+8]                          ; CODE XREF=hash_get_max_bucket_length+51
000000000000bbac         add        rcx, 0x1
000000000000bbb0         test       rdx, rdx
000000000000bbb3         jne        loc_bba8

                     loc_bbb5:
000000000000bbb5         cmp        rax, rcx                                    ; CODE XREF=hash_get_max_bucket_length+34
000000000000bbb8         cmovb      rax, rcx

                     loc_bbbc:
000000000000bbbc         add        rsi, 0x10                                   ; CODE XREF=hash_get_max_bucket_length+20
000000000000bbc0         cmp        rsi, rdi
000000000000bbc3         jb         loc_bb90

000000000000bbc5         ret
                        ; endp

                     loc_bbc7:
000000000000bbc7         ret                                                    ; CODE XREF=hash_get_max_bucket_length+12
                        ; endp
000000000000bbc9         align      16                                          ; End of unwind block (FDE at 0x18d14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_table_ok:
000000000000bbd0         mov        rcx, qword [rdi]                            ; Begin of unwind block (FDE at 0x18d28)
000000000000bbd3         mov        r8, qword [rdi+8]
000000000000bbd7         xor        edx, edx
000000000000bbd9         xor        esi, esi
000000000000bbdb         cmp        rcx, r8
000000000000bbde         jae        loc_bc16

                     loc_bbe0:
000000000000bbe0         cmp        qword [rcx], 0x0                            ; CODE XREF=hash_table_ok+68
000000000000bbe4         je         loc_bc0d

000000000000bbe6         mov        rax, qword [rcx+8]
000000000000bbea         add        rsi, 0x1
000000000000bbee         add        rdx, 0x1
000000000000bbf2         test       rax, rax
000000000000bbf5         je         loc_bc0d

000000000000bbf7         nop        word [rax+rax]

                     loc_bc00:
000000000000bc00         mov        rax, qword [rax+8]                          ; CODE XREF=hash_table_ok+59
000000000000bc04         add        rdx, 0x1
000000000000bc08         test       rax, rax
000000000000bc0b         jne        loc_bc00

                     loc_bc0d:
000000000000bc0d         add        rcx, 0x10                                   ; CODE XREF=hash_table_ok+20, hash_table_ok+37
000000000000bc11         cmp        rcx, r8
000000000000bc14         jb         loc_bbe0

                     loc_bc16:
000000000000bc16         xor        eax, eax                                    ; CODE XREF=hash_table_ok+14
000000000000bc18         cmp        qword [rdi+0x18], rsi
000000000000bc1c         je         loc_bc20

000000000000bc1e         ret
                        ; endp

                     loc_bc20:
000000000000bc20         cmp        qword [rdi+0x20], rdx                       ; CODE XREF=hash_table_ok+76
000000000000bc24         sete       al
000000000000bc27         ret
                        ; endp
000000000000bc28         align      16                                          ; End of unwind block (FDE at 0x18d28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_print_statistics:
000000000000bc30         push       r13                                         ; Begin of unwind block (FDE at 0x18d3c)
000000000000bc32         push       r12
000000000000bc34         mov        r12, rsi
000000000000bc37         push       rbp
000000000000bc38         push       rbx
000000000000bc39         xor        ebx, ebx
000000000000bc3b         sub        rsp, 0x8
000000000000bc3f         mov        rsi, qword [rdi]
000000000000bc42         mov        rcx, qword [rdi+0x20]
000000000000bc46         mov        rbp, qword [rdi+0x10]
000000000000bc4a         mov        r13, qword [rdi+0x18]
000000000000bc4e         mov        rdi, qword [rdi+8]
000000000000bc52         cmp        rsi, rdi
000000000000bc55         jae        loc_bc95

000000000000bc57         nop        word [rax+rax]

                     loc_bc60:
000000000000bc60         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_print_statistics+99
000000000000bc64         je         loc_bc8c

000000000000bc66         mov        rax, qword [rsi+8]
000000000000bc6a         mov        edx, 0x1
000000000000bc6f         test       rax, rax
000000000000bc72         je         loc_bc85

000000000000bc74         nop        dword [rax]

                     loc_bc78:
000000000000bc78         mov        rax, qword [rax+8]                          ; CODE XREF=hash_print_statistics+83
000000000000bc7c         add        rdx, 0x1
000000000000bc80         test       rax, rax
000000000000bc83         jne        loc_bc78

                     loc_bc85:
000000000000bc85         cmp        rbx, rdx                                    ; CODE XREF=hash_print_statistics+66
000000000000bc88         cmovb      rbx, rdx

                     loc_bc8c:
000000000000bc8c         add        rsi, 0x10                                   ; CODE XREF=hash_print_statistics+52
000000000000bc90         cmp        rsi, rdi
000000000000bc93         jb         loc_bc60

                     loc_bc95:
000000000000bc95         lea        rdx, qword [aEntriesLun]                    ; "# entries:         %lu\\n", CODE XREF=hash_print_statistics+37
000000000000bc9c         mov        esi, 0x1
000000000000bca1         mov        rdi, r12
000000000000bca4         xor        eax, eax
000000000000bca6         call       j___fprintf_chk                             ; __fprintf_chk
000000000000bcab         lea        rdx, qword [aBucketsLun]                    ; "# buckets:         %lu\\n"
000000000000bcb2         xor        eax, eax
000000000000bcb4         mov        rcx, rbp
000000000000bcb7         mov        esi, 0x1
000000000000bcbc         mov        rdi, r12
000000000000bcbf         call       j___fprintf_chk                             ; __fprintf_chk
000000000000bcc4         test       r13, r13
000000000000bcc7         js         loc_bd30

000000000000bcc9         pxor       xmm0, xmm0
000000000000bccd         test       rbp, rbp
000000000000bcd0         cvtsi2sd   xmm0, r13
000000000000bcd5         mulsd      xmm0, qword [float_16a40+8]                 ; 0x16a48
000000000000bcdd         js         loc_bd59

                     loc_bcdf:
000000000000bcdf         pxor       xmm1, xmm1                                  ; CODE XREF=hash_print_statistics+295
000000000000bce3         cvtsi2sd   xmm1, rbp

                     loc_bce8:
000000000000bce8         divsd      xmm0, xmm1                                  ; CODE XREF=hash_print_statistics+322
000000000000bcec         lea        rdx, qword [aBucketsUsedLu2]                ; "# buckets used:    %lu (%.2f%%)\\n"
000000000000bcf3         mov        rcx, r13
000000000000bcf6         mov        rdi, r12
000000000000bcf9         mov        esi, 0x1
000000000000bcfe         mov        eax, 0x1
000000000000bd03         call       j___fprintf_chk                             ; __fprintf_chk
000000000000bd08         add        rsp, 0x8
000000000000bd0c         mov        rcx, rbx
000000000000bd0f         mov        rdi, r12
000000000000bd12         pop        rbx
000000000000bd13         pop        rbp
000000000000bd14         pop        r12
000000000000bd16         pop        r13
000000000000bd18         lea        rdx, qword [aMaxBucketLengt]                ; "max bucket length: %lu\\n"
000000000000bd1f         mov        esi, 0x1
000000000000bd24         xor        eax, eax
000000000000bd26         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000bd2b         align      16

                     loc_bd30:
000000000000bd30         mov        rax, r13                                    ; CODE XREF=hash_print_statistics+151
000000000000bd33         mov        rdx, r13
000000000000bd36         pxor       xmm0, xmm0
000000000000bd3a         shr        rax, 0x1
000000000000bd3d         and        edx, 0x1
000000000000bd40         or         rax, rdx
000000000000bd43         test       rbp, rbp
000000000000bd46         cvtsi2sd   xmm0, rax
000000000000bd4b         addsd      xmm0, xmm0
000000000000bd4f         mulsd      xmm0, qword [float_16a40+8]                 ; 0x16a48
000000000000bd57         jns        loc_bcdf

                     loc_bd59:
000000000000bd59         mov        rax, rbp                                    ; CODE XREF=hash_print_statistics+173
000000000000bd5c         pxor       xmm1, xmm1
000000000000bd60         shr        rax, 0x1
000000000000bd63         and        ebp, 0x1
000000000000bd66         or         rax, rbp
000000000000bd69         cvtsi2sd   xmm1, rax
000000000000bd6e         addsd      xmm1, xmm1
000000000000bd72         jmp        loc_bce8
000000000000bd77         align      128                                         ; End of unwind block (FDE at 0x18d3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_lookup:
000000000000bd80         push       r12                                         ; Begin of unwind block (FDE at 0x18d78), CODE XREF=src_to_dest_lookup+39, seen_file+49, utimecmpat+528, filesystem_type+71
000000000000bd82         push       rbp
000000000000bd83         mov        r12, rdi
000000000000bd86         push       rbx
000000000000bd87         mov        rbp, rsi
000000000000bd8a         call       safe_hasher                                 ; safe_hasher
000000000000bd8f         mov        rsi, qword [rax]
000000000000bd92         test       rsi, rsi
000000000000bd95         je         loc_bdbd

000000000000bd97         mov        rbx, rax
000000000000bd9a         jmp        loc_bda3
000000000000bd9c         align      32

                     loc_bda0:
000000000000bda0         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+59

                     loc_bda3:
000000000000bda3         cmp        rsi, rbp                                    ; CODE XREF=hash_lookup+26
000000000000bda6         je         loc_bdbf

000000000000bda8         mov        rdi, rbp
000000000000bdab         call       qword [r12+0x38]
000000000000bdb0         test       al, al
000000000000bdb2         jne        loc_bdd0

000000000000bdb4         mov        rbx, qword [rbx+8]
000000000000bdb8         test       rbx, rbx
000000000000bdbb         jne        loc_bda0

                     loc_bdbd:
000000000000bdbd         xor        esi, esi                                    ; CODE XREF=hash_lookup+21

                     loc_bdbf:
000000000000bdbf         pop        rbx                                         ; CODE XREF=hash_lookup+38
000000000000bdc0         mov        rax, rsi
000000000000bdc3         pop        rbp
000000000000bdc4         pop        r12
000000000000bdc6         ret
                        ; endp
000000000000bdc7         align      16

                     loc_bdd0:
000000000000bdd0         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+50
000000000000bdd3         pop        rbx
000000000000bdd4         pop        rbp
000000000000bdd5         mov        rax, rsi
000000000000bdd8         pop        r12
000000000000bdda         ret
                        ; endp
000000000000bddb         align      32                                          ; End of unwind block (FDE at 0x18d78)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_first:
000000000000bde0         cmp        qword [rdi+0x20], 0x0                       ; Begin of unwind block (FDE at 0x18db0)
000000000000bde5         je         loc_be13

000000000000bde7         mov        rdx, qword [rdi]
000000000000bdea         mov        rcx, qword [rdi+8]
000000000000bdee         cmp        rdx, rcx
000000000000bdf1         jae        loc_be18

000000000000bdf3         mov        rax, qword [rdx]
000000000000bdf6         test       rax, rax
000000000000bdf9         jne        loc_be16

000000000000bdfb         nop        dword [rax+rax]

                     loc_be00:
000000000000be00         add        rdx, 0x10                                   ; CODE XREF=hash_get_first+47
000000000000be04         cmp        rdx, rcx
000000000000be07         jae        loc_be18

000000000000be09         mov        rax, qword [rdx]
000000000000be0c         test       rax, rax
000000000000be0f         je         loc_be00

000000000000be11         ret
                        ; endp

                     loc_be13:
000000000000be13         xor        eax, eax                                    ; CODE XREF=hash_get_first+5
000000000000be15         ret
                        ; endp

                     loc_be16:
000000000000be16         ret                                                    ; CODE XREF=hash_get_first+25
                        ; endp

                     loc_be18:
000000000000be18         sub        rsp, 0x8                                    ; CODE XREF=hash_get_first+17, hash_get_first+39
000000000000be1c         call       j_abort                                     ; abort
                        ; endp
000000000000be21         align      16                                          ; End of unwind block (FDE at 0x18db0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_next:
000000000000be30         push       rbp                                         ; Begin of unwind block (FDE at 0x18dc4)
000000000000be31         push       rbx
000000000000be32         mov        rbp, rdi
000000000000be35         mov        rbx, rsi
000000000000be38         sub        rsp, 0x8
000000000000be3c         call       safe_hasher                                 ; safe_hasher
000000000000be41         mov        rdx, rax
000000000000be44         mov        rcx, rax
000000000000be47         mov        rax, qword [rdx]
000000000000be4a         mov        rdx, qword [rdx+8]
000000000000be4e         cmp        rax, rbx
000000000000be51         je         loc_be69

000000000000be53         nop        dword [rax+rax]

                     loc_be58:
000000000000be58         test       rdx, rdx                                    ; CODE XREF=hash_get_next+55
000000000000be5b         je         loc_be6e

000000000000be5d         mov        rax, qword [rdx]
000000000000be60         mov        rdx, qword [rdx+8]
000000000000be64         cmp        rax, rbx
000000000000be67         jne        loc_be58

                     loc_be69:
000000000000be69         test       rdx, rdx                                    ; CODE XREF=hash_get_next+33
000000000000be6c         jne        loc_be98

                     loc_be6e:
000000000000be6e         mov        rdx, qword [rbp+8]                          ; CODE XREF=hash_get_next+43
000000000000be72         jmp        loc_be80
000000000000be74         align      8

                     loc_be78:
000000000000be78         mov        rax, qword [rcx]                            ; CODE XREF=hash_get_next+87
000000000000be7b         test       rax, rax
000000000000be7e         jne        loc_be8b

                     loc_be80:
000000000000be80         add        rcx, 0x10                                   ; CODE XREF=hash_get_next+66
000000000000be84         cmp        rdx, rcx
000000000000be87         ja         loc_be78

000000000000be89         xor        eax, eax

                     loc_be8b:
000000000000be8b         add        rsp, 0x8                                    ; CODE XREF=hash_get_next+78
000000000000be8f         pop        rbx
000000000000be90         pop        rbp
000000000000be91         ret
                        ; endp
000000000000be92         align      8

                     loc_be98:
000000000000be98         mov        rax, qword [rdx]                            ; CODE XREF=hash_get_next+60
000000000000be9b         add        rsp, 0x8
000000000000be9f         pop        rbx
000000000000bea0         pop        rbp
000000000000bea1         ret
                        ; endp
000000000000bea2         align      16                                          ; End of unwind block (FDE at 0x18dc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_entries:
000000000000beb0         mov        r9, qword [rdi]                             ; Begin of unwind block (FDE at 0x18df8)
000000000000beb3         cmp        qword [rdi+8], r9
000000000000beb7         jbe        loc_bf12

000000000000beb9         xor        r8d, r8d

                     loc_bebc:
000000000000bebc         mov        rcx, qword [r9]                             ; CODE XREF=hash_get_entries+85
000000000000bebf         test       rcx, rcx
000000000000bec2         je         loc_befd

000000000000bec4         cmp        rdx, r8
000000000000bec7         jbe        loc_bf07

000000000000bec9         mov        qword [rsi+r8*8], rcx
000000000000becd         mov        rcx, qword [r9+8]
000000000000bed1         lea        rax, qword [r8+1]
000000000000bed5         test       rcx, rcx
000000000000bed8         je         loc_befa

000000000000beda         nop        word [rax+rax]

                     loc_bee0:
000000000000bee0         cmp        rdx, rax                                    ; CODE XREF=hash_get_entries+72
000000000000bee3         je         loc_bf10

000000000000bee5         mov        r8, qword [rcx]
000000000000bee8         add        rax, 0x1
000000000000beec         mov        qword [rsi+rax*8-8], r8
000000000000bef1         mov        rcx, qword [rcx+8]
000000000000bef5         test       rcx, rcx
000000000000bef8         jne        loc_bee0

                     loc_befa:
000000000000befa         mov        r8, rax                                     ; CODE XREF=hash_get_entries+40

                     loc_befd:
000000000000befd         add        r9, 0x10                                    ; CODE XREF=hash_get_entries+18
000000000000bf01         cmp        qword [rdi+8], r9
000000000000bf05         ja         loc_bebc

                     loc_bf07:
000000000000bf07         mov        rax, r8                                     ; CODE XREF=hash_get_entries+23
000000000000bf0a         ret
                        ; endp
000000000000bf0b         align      16

                     loc_bf10:
000000000000bf10         ret                                                    ; CODE XREF=hash_get_entries+51
                        ; endp

                     loc_bf12:
000000000000bf12         xor        eax, eax                                    ; CODE XREF=hash_get_entries+7
000000000000bf14         ret
                        ; endp
000000000000bf15         align      32                                          ; End of unwind block (FDE at 0x18df8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_do_for_each:
000000000000bf20         push       r15                                         ; Begin of unwind block (FDE at 0x18e0c)
000000000000bf22         push       r14
000000000000bf24         push       r13
000000000000bf26         push       r12
000000000000bf28         push       rbp
000000000000bf29         push       rbx
000000000000bf2a         sub        rsp, 0x8
000000000000bf2e         mov        r14, qword [rdi]
000000000000bf31         cmp        qword [rdi+8], r14
000000000000bf35         jbe        loc_bf86

000000000000bf37         mov        r13, rdx
000000000000bf3a         mov        r12, rsi
000000000000bf3d         mov        r15, rdi
000000000000bf40         xor        ebp, ebp

                     loc_bf42:
000000000000bf42         mov        rdi, qword [r14]                            ; CODE XREF=hash_do_for_each+82
000000000000bf45         test       rdi, rdi
000000000000bf48         je         loc_bf6a

000000000000bf4a         mov        rbx, r14
000000000000bf4d         jmp        loc_bf53
000000000000bf4f         align      16

                     loc_bf50:
000000000000bf50         mov        rdi, qword [rbx]                            ; CODE XREF=hash_do_for_each+72

                     loc_bf53:
000000000000bf53         mov        rsi, r13                                    ; CODE XREF=hash_do_for_each+45
000000000000bf56         call       r12
000000000000bf59         test       al, al
000000000000bf5b         je         loc_bf74

000000000000bf5d         mov        rbx, qword [rbx+8]
000000000000bf61         add        rbp, 0x1
000000000000bf65         test       rbx, rbx
000000000000bf68         jne        loc_bf50

                     loc_bf6a:
000000000000bf6a         add        r14, 0x10                                   ; CODE XREF=hash_do_for_each+40
000000000000bf6e         cmp        qword [r15+8], r14
000000000000bf72         ja         loc_bf42

                     loc_bf74:
000000000000bf74         add        rsp, 0x8                                    ; CODE XREF=hash_do_for_each+59, hash_do_for_each+104
000000000000bf78         mov        rax, rbp
000000000000bf7b         pop        rbx
000000000000bf7c         pop        rbp
000000000000bf7d         pop        r12
000000000000bf7f         pop        r13
000000000000bf81         pop        r14
000000000000bf83         pop        r15
000000000000bf85         ret
                        ; endp

                     loc_bf86:
000000000000bf86         xor        ebp, ebp                                    ; CODE XREF=hash_do_for_each+21
000000000000bf88         jmp        loc_bf74
000000000000bf8a         align      16                                          ; End of unwind block (FDE at 0x18e0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_string:
000000000000bf90         movzx      ecx, byte [rdi]                             ; Begin of unwind block (FDE at 0x18e58)
000000000000bf93         xor        edx, edx
000000000000bf95         test       cl, cl
000000000000bf97         je         loc_bfbd

000000000000bf99         nop        dword [rax]

                     loc_bfa0:
000000000000bfa0         mov        rax, rdx                                    ; CODE XREF=hash_string+43
000000000000bfa3         add        rdi, 0x1
000000000000bfa7         shl        rax, 0x5
000000000000bfab         sub        rax, rdx
000000000000bfae         xor        edx, edx
000000000000bfb0         add        rax, rcx
000000000000bfb3         movzx      ecx, byte [rdi]
000000000000bfb6         div        rsi
000000000000bfb9         test       cl, cl
000000000000bfbb         jne        loc_bfa0

                     loc_bfbd:
000000000000bfbd         mov        rax, rdx                                    ; CODE XREF=hash_string+7
000000000000bfc0         ret
                        ; endp
000000000000bfc1         align      16                                          ; End of unwind block (FDE at 0x18e58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_reset_tuning:
000000000000bfd0         movabs     rax, 0x3f80000000000000                     ; Begin of unwind block (FDE at 0x18e6c)
000000000000bfda         mov        byte [rdi+0x10], 0x0
000000000000bfde         mov        qword [rdi], rax
000000000000bfe1         movabs     rax, 0x3fb4fdf43f4ccccd
000000000000bfeb         mov        qword [rdi+8], rax
000000000000bfef         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_initialize:
000000000000bff0         push       r15                                         ; End of unwind block (FDE at 0x18e6c), Begin of unwind block (FDE at 0x18e80), CODE XREF=dest_info_init+32, src_info_init+32, hash_init+32, utimecmpat+1627, filesystem_type+124, setup_dir.isra.4+40
000000000000bff2         push       r14
000000000000bff4         lea        rax, qword [raw_hasher]                     ; raw_hasher
000000000000bffb         push       r13
000000000000bffd         push       r12
000000000000bfff         mov        r12, rdx
000000000000c002         push       rbp
000000000000c003         push       rbx
000000000000c004         mov        r13, rcx
000000000000c007         mov        rbp, rdi
000000000000c00a         mov        edi, 0x50                                   ; argument "__size" for method j_malloc
000000000000c00f         mov        r15, rsi
000000000000c012         sub        rsp, 0x8
000000000000c016         test       rdx, rdx
000000000000c019         mov        r14, r8
000000000000c01c         cmove      r12, rax
000000000000c020         lea        rax, qword [raw_comparator]                 ; raw_comparator
000000000000c027         test       rcx, rcx
000000000000c02a         cmove      r13, rax
000000000000c02e         call       j_malloc                                    ; malloc
000000000000c033         test       rax, rax
000000000000c036         mov        rbx, rax
000000000000c039         je         loc_c0ea

000000000000c03f         test       r15, r15
000000000000c042         lea        rdi, qword [rax+0x28]
000000000000c046         je         loc_c100

000000000000c04c         mov        qword [rax+0x28], r15
000000000000c050         call       check_tuning.isra.0                         ; check_tuning.isra.0
000000000000c055         test       al, al
000000000000c057         je         loc_c0e0

000000000000c05d         cmp        byte [r15+0x10], 0x0
000000000000c062         je         loc_c160

                     loc_c068:
000000000000c068         mov        rdi, rbp                                    ; CODE XREF=hash_initialize+362, hash_initialize+421
000000000000c06b         call       next_prime                                  ; next_prime
000000000000c070         mov        edx, 0x8
000000000000c075         mov        rbp, rax
000000000000c078         xor        ecx, ecx
000000000000c07a         mov        rax, rdx
000000000000c07d         mul        rbp
000000000000c080         jo         loc_c19a

                     loc_c086:
000000000000c086         test       rax, rax                                    ; CODE XREF=hash_initialize+431
000000000000c089         js         loc_c0e0

000000000000c08b         test       rcx, rcx
000000000000c08e         jne        loc_c0e0

000000000000c090         test       rbp, rbp
000000000000c093         mov        qword [rbx+0x10], rbp
000000000000c097         je         loc_c0e0

000000000000c099         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
000000000000c09e         mov        rdi, rbp                                    ; argument "__nmemb" for method j_calloc
000000000000c0a1         call       j_calloc                                    ; calloc
000000000000c0a6         test       rax, rax
000000000000c0a9         mov        qword [rbx], rax
000000000000c0ac         je         loc_c0e0

000000000000c0ae         shl        rbp, 0x4
000000000000c0b2         mov        qword [rbx+0x18], 0x0
000000000000c0ba         mov        qword [rbx+0x20], 0x0
000000000000c0c2         add        rbp, rax
000000000000c0c5         mov        qword [rbx+0x30], r12
000000000000c0c9         mov        qword [rbx+0x38], r13
000000000000c0cd         mov        qword [rbx+8], rbp
000000000000c0d1         mov        qword [rbx+0x40], r14
000000000000c0d5         mov        qword [rbx+0x48], 0x0
000000000000c0dd         jmp        loc_c0ea
000000000000c0df         align      32

                     loc_c0e0:
000000000000c0e0         mov        rdi, rbx                                    ; CODE XREF=hash_initialize+103, hash_initialize+153, hash_initialize+158, hash_initialize+167, hash_initialize+188, hash_initialize+298, hash_initialize+325
000000000000c0e3         xor        ebx, ebx
000000000000c0e5         call       sub_2c80                                    ; sub_2c80

                     loc_c0ea:
000000000000c0ea         add        rsp, 0x8                                    ; CODE XREF=hash_initialize+73, hash_initialize+237
000000000000c0ee         mov        rax, rbx
000000000000c0f1         pop        rbx
000000000000c0f2         pop        rbp
000000000000c0f3         pop        r12
000000000000c0f5         pop        r13
000000000000c0f7         pop        r14
000000000000c0f9         pop        r15
000000000000c0fb         ret
                        ; endp
000000000000c0fc         align      256

                     loc_c100:
000000000000c100         lea        rax, qword [default_tuning]                 ; default_tuning, CODE XREF=hash_initialize+86
000000000000c107         mov        qword [rbx+0x28], rax
000000000000c10b         call       check_tuning.isra.0                         ; check_tuning.isra.0
000000000000c110         test       al, al
000000000000c112         movss      xmm1, dword [float_16a38]                   ; float_16a38
000000000000c11a         je         loc_c0e0

000000000000c11c         test       rbp, rbp
000000000000c11f         js         loc_c16b

                     loc_c121:
000000000000c121         pxor       xmm0, xmm0                                  ; CODE XREF=hash_initialize+377
000000000000c125         cvtsi2ss   xmm0, rbp

                     loc_c12a:
000000000000c12a         divss      xmm0, xmm1                                  ; CODE XREF=hash_initialize+404
000000000000c12e         ucomiss    xmm0, dword [float_16a3c]                   ; float_16a3c
000000000000c135         jae        loc_c0e0

000000000000c137         ucomiss    xmm0, dword [float_16a40]                   ; float_16a40
000000000000c13e         jb         loc_c190

000000000000c140         subss      xmm0, dword [float_16a40]                   ; float_16a40
000000000000c148         movabs     rax, 0x8000000000000000
000000000000c152         cvttss2si  rbp, xmm0
000000000000c157         xor        rbp, rax
000000000000c15a         jmp        loc_c068
000000000000c15f         align      32

                     loc_c160:
000000000000c160         test       rbp, rbp                                    ; CODE XREF=hash_initialize+114
000000000000c163         movss      xmm1, dword [r15+8]
000000000000c169         jns        loc_c121

                     loc_c16b:
000000000000c16b         mov        rax, rbp                                    ; CODE XREF=hash_initialize+303
000000000000c16e         pxor       xmm0, xmm0
000000000000c172         shr        rax, 0x1
000000000000c175         and        ebp, 0x1
000000000000c178         or         rax, rbp
000000000000c17b         cvtsi2ss   xmm0, rax
000000000000c180         addss      xmm0, xmm0
000000000000c184         jmp        loc_c12a
000000000000c186         align      16

                     loc_c190:
000000000000c190         cvttss2si  rbp, xmm0                                   ; CODE XREF=hash_initialize+334
000000000000c195         jmp        loc_c068

                     loc_c19a:
000000000000c19a         mov        ecx, 0x1                                    ; CODE XREF=hash_initialize+144
000000000000c19f         jmp        loc_c086
000000000000c1a4         align      16                                          ; End of unwind block (FDE at 0x18e80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_clear:
000000000000c1b0         push       r12                                         ; Begin of unwind block (FDE at 0x18ecc)
000000000000c1b2         push       rbp
000000000000c1b3         mov        rbp, rdi
000000000000c1b6         push       rbx
000000000000c1b7         mov        r12, qword [rdi]
000000000000c1ba         cmp        r12, qword [rdi+8]
000000000000c1be         jae        loc_c22b

                     loc_c1c0:
000000000000c1c0         cmp        qword [r12], 0x0                            ; CODE XREF=hash_clear+121
000000000000c1c5         je         loc_c221

000000000000c1c7         mov        rbx, qword [r12+8]
000000000000c1cc         mov        rax, qword [rbp+0x40]
000000000000c1d0         test       rbx, rbx
000000000000c1d3         je         loc_c205

000000000000c1d5         nop        dword [rax]

                     loc_c1d8:
000000000000c1d8         test       rax, rax                                    ; CODE XREF=hash_clear+83
000000000000c1db         je         loc_c1e6

000000000000c1dd         mov        rdi, qword [rbx]
000000000000c1e0         call       rax
000000000000c1e2         mov        rax, qword [rbp+0x40]

                     loc_c1e6:
000000000000c1e6         mov        rdx, qword [rbx+8]                          ; CODE XREF=hash_clear+43
000000000000c1ea         mov        rcx, qword [rbp+0x48]
000000000000c1ee         mov        qword [rbx], 0x0
000000000000c1f5         test       rdx, rdx
000000000000c1f8         mov        qword [rbx+8], rcx
000000000000c1fc         mov        qword [rbp+0x48], rbx
000000000000c200         mov        rbx, rdx
000000000000c203         jne        loc_c1d8

                     loc_c205:
000000000000c205         test       rax, rax                                    ; CODE XREF=hash_clear+35
000000000000c208         je         loc_c210

000000000000c20a         mov        rdi, qword [r12]
000000000000c20e         call       rax

                     loc_c210:
000000000000c210         mov        qword [r12], 0x0                            ; CODE XREF=hash_clear+88
000000000000c218         mov        qword [r12+8], 0x0

                     loc_c221:
000000000000c221         add        r12, 0x10                                   ; CODE XREF=hash_clear+21
000000000000c225         cmp        qword [rbp+8], r12
000000000000c229         ja         loc_c1c0

                     loc_c22b:
000000000000c22b         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=hash_clear+14
000000000000c233         mov        qword [rbp+0x20], 0x0
000000000000c23b         pop        rbx
000000000000c23c         pop        rbp
000000000000c23d         pop        r12
000000000000c23f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_free:
000000000000c240         push       r12                                         ; End of unwind block (FDE at 0x18ecc), Begin of unwind block (FDE at 0x18ef8), CODE XREF=forget_all+7, rpl_fts_close+154, rpl_fts_close+177, rpl_fts_read+713
000000000000c242         push       rbp
000000000000c243         mov        r12, rdi
000000000000c246         push       rbx
000000000000c247         cmp        qword [rdi+0x40], 0x0
000000000000c24c         mov        rbp, qword [rdi]
000000000000c24f         mov        rax, qword [rdi+8]
000000000000c253         je         loc_c2a3

000000000000c255         cmp        qword [rdi+0x20], 0x0
000000000000c25a         je         loc_c2a3

000000000000c25c         cmp        rbp, rax
000000000000c25f         jae        loc_c2dc

000000000000c261         nop        dword [rax]

                     loc_c268:
000000000000c268         mov        rdi, qword [rbp]                            ; CODE XREF=hash_free+93
000000000000c26c         test       rdi, rdi
000000000000c26f         je         loc_c296

000000000000c271         mov        rbx, rbp
000000000000c274         jmp        loc_c283
000000000000c276         align      128

                     loc_c280:
000000000000c280         mov        rdi, qword [rbx]                            ; CODE XREF=hash_free+79

                     loc_c283:
000000000000c283         call       qword [r12+0x40]                            ; CODE XREF=hash_free+52
000000000000c288         mov        rbx, qword [rbx+8]
000000000000c28c         test       rbx, rbx
000000000000c28f         jne        loc_c280

000000000000c291         mov        rax, qword [r12+8]

                     loc_c296:
000000000000c296         add        rbp, 0x10                                   ; CODE XREF=hash_free+47
000000000000c29a         cmp        rax, rbp
000000000000c29d         ja         loc_c268

000000000000c29f         mov        rbp, qword [r12]

                     loc_c2a3:
000000000000c2a3         cmp        rbp, rax                                    ; CODE XREF=hash_free+19, hash_free+26
000000000000c2a6         jae        loc_c2dc

000000000000c2a8         nop        dword [rax+rax]

                     loc_c2b0:
000000000000c2b0         mov        rdi, qword [rbp+8]                          ; CODE XREF=hash_free+154
000000000000c2b4         test       rdi, rdi
000000000000c2b7         je         loc_c2d1

000000000000c2b9         nop        dword [rax]

                     loc_c2c0:
000000000000c2c0         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+143
000000000000c2c4         call       sub_2c80                                    ; sub_2c80
000000000000c2c9         test       rbx, rbx
000000000000c2cc         mov        rdi, rbx
000000000000c2cf         jne        loc_c2c0

                     loc_c2d1:
000000000000c2d1         add        rbp, 0x10                                   ; CODE XREF=hash_free+119
000000000000c2d5         cmp        qword [r12+8], rbp
000000000000c2da         ja         loc_c2b0

                     loc_c2dc:
000000000000c2dc         mov        rdi, qword [r12+0x48]                       ; CODE XREF=hash_free+31, hash_free+102
000000000000c2e1         test       rdi, rdi
000000000000c2e4         je         loc_c301

000000000000c2e6         nop        word [cs:rax+rax]

                     loc_c2f0:
000000000000c2f0         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+191
000000000000c2f4         call       sub_2c80                                    ; sub_2c80
000000000000c2f9         test       rbx, rbx
000000000000c2fc         mov        rdi, rbx
000000000000c2ff         jne        loc_c2f0

                     loc_c301:
000000000000c301         mov        rdi, qword [r12]                            ; CODE XREF=hash_free+164
000000000000c305         call       sub_2c80                                    ; sub_2c80
000000000000c30a         pop        rbx
000000000000c30b         mov        rdi, r12
000000000000c30e         pop        rbp
000000000000c30f         pop        r12
000000000000c311         jmp        sub_2c80                                    ; sub_2c80
                        ; endp
000000000000c316         align      32                                          ; End of unwind block (FDE at 0x18ef8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     hash_rehash:
000000000000c320         push       r12                                         ; Begin of unwind block (FDE at 0x18f24), CODE XREF=hash_insert_if_absent+443, hash_delete+271
000000000000c322         push       rbp
000000000000c323         mov        rbp, rdi
000000000000c326         push       rbx
000000000000c327         sub        rsp, 0x60
000000000000c32b         mov        r12, qword [rdi+0x28]
000000000000c32f         mov        rax, qword [fs:0x28]
000000000000c338         mov        qword [rsp+0x78+var_20], rax
000000000000c33d         xor        eax, eax
000000000000c33f         cmp        byte [r12+0x10], 0x0
000000000000c345         jne        loc_c398

000000000000c347         test       rsi, rsi
000000000000c34a         js         loc_c4c8

000000000000c350         pxor       xmm0, xmm0
000000000000c354         cvtsi2ss   xmm0, rsi

                     loc_c359:
000000000000c359         divss      xmm0, dword [r12+8]                         ; CODE XREF=hash_rehash+449
000000000000c360         ucomiss    xmm0, dword [float_16a3c]                   ; float_16a3c
000000000000c367         jae        loc_c4a0

000000000000c36d         ucomiss    xmm0, dword [float_16a40]                   ; float_16a40
000000000000c374         jb         loc_c4f0

000000000000c37a         subss      xmm0, dword [float_16a40]                   ; float_16a40
000000000000c382         movabs     rax, 0x8000000000000000
000000000000c38c         cvttss2si  rsi, xmm0
000000000000c391         xor        rsi, rax
000000000000c394         nop        dword [rax]

                     loc_c398:
000000000000c398         mov        rdi, rsi                                    ; CODE XREF=hash_rehash+37, hash_rehash+469
000000000000c39b         call       next_prime                                  ; next_prime
000000000000c3a0         mov        edx, 0x8
000000000000c3a5         mov        rbx, rax
000000000000c3a8         xor        ecx, ecx
000000000000c3aa         mov        rax, rdx
000000000000c3ad         mul        rbx
000000000000c3b0         jo         loc_c54f

                     loc_c3b6:
000000000000c3b6         test       rax, rax                                    ; CODE XREF=hash_rehash+564
000000000000c3b9         mov        eax, 0x1
000000000000c3be         cmovs      rcx, rax
000000000000c3c2         test       rbx, rbx
000000000000c3c5         je         loc_c4a0

000000000000c3cb         and        ecx, 0x1
000000000000c3ce         jne        loc_c4a0

000000000000c3d4         cmp        qword [rbp+0x10], rbx
000000000000c3d8         je         loc_c500

000000000000c3de         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
000000000000c3e3         mov        rdi, rbx                                    ; argument "__nmemb" for method j_calloc
000000000000c3e6         call       j_calloc                                    ; calloc
000000000000c3eb         test       rax, rax
000000000000c3ee         mov        qword [rsp+0x78+var_78], rax
000000000000c3f2         je         loc_c4a0

000000000000c3f8         mov        qword [rsp+0x78+var_68], rbx
000000000000c3fd         shl        rbx, 0x4
000000000000c401         mov        qword [rsp+0x78+var_50], r12
000000000000c406         add        rbx, rax
000000000000c409         mov        rax, qword [rbp+0x30]
000000000000c40d         mov        r12, rsp
000000000000c410         xor        edx, edx
000000000000c412         mov        rsi, rbp
000000000000c415         mov        rdi, r12
000000000000c418         mov        qword [rsp+0x78+var_70], rbx
000000000000c41d         mov        qword [rsp+0x78+var_60], 0x0
000000000000c426         mov        qword [rsp+0x78+var_48], rax
000000000000c42b         mov        rax, qword [rbp+0x38]
000000000000c42f         mov        qword [rsp+0x78+var_58], 0x0
000000000000c438         mov        qword [rsp+0x78+var_40], rax
000000000000c43d         mov        rax, qword [rbp+0x40]
000000000000c441         mov        qword [rsp+0x78+var_38], rax
000000000000c446         mov        rax, qword [rbp+0x48]
000000000000c44a         mov        qword [rsp+0x78+var_30], rax
000000000000c44f         call       transfer_entries                            ; transfer_entries
000000000000c454         test       al, al
000000000000c456         mov        ebx, eax
000000000000c458         jne        loc_c510

000000000000c45e         mov        rax, qword [rsp+0x78+var_30]
000000000000c463         mov        edx, 0x1
000000000000c468         mov        rsi, r12
000000000000c46b         mov        rdi, rbp
000000000000c46e         mov        qword [rbp+0x48], rax
000000000000c472         call       transfer_entries                            ; transfer_entries
000000000000c477         test       al, al
000000000000c479         je         loc_c559

000000000000c47f         xor        edx, edx
000000000000c481         mov        rsi, r12
000000000000c484         mov        rdi, rbp
000000000000c487         call       transfer_entries                            ; transfer_entries
000000000000c48c         test       al, al
000000000000c48e         je         loc_c559

000000000000c494         mov        rdi, qword [rsp+0x78+var_78]
000000000000c498         call       sub_2c80                                    ; sub_2c80
000000000000c49d         jmp        loc_c4a2
000000000000c49f         align      32

                     loc_c4a0:
000000000000c4a0         xor        ebx, ebx                                    ; CODE XREF=hash_rehash+71, hash_rehash+165, hash_rehash+174, hash_rehash+210

                     loc_c4a2:
000000000000c4a2         mov        rcx, qword [rsp+0x78+var_20]                ; CODE XREF=hash_rehash+381, hash_rehash+485, hash_rehash+549
000000000000c4a7         xor        rcx, qword [fs:0x28]
000000000000c4b0         mov        eax, ebx
000000000000c4b2         jne        loc_c54a

000000000000c4b8         add        rsp, 0x60
000000000000c4bc         pop        rbx
000000000000c4bd         pop        rbp
000000000000c4be         pop        r12
000000000000c4c0         ret
                        ; endp
000000000000c4c1         align      8

                     loc_c4c8:
000000000000c4c8         mov        rax, rsi                                    ; CODE XREF=hash_rehash+42
000000000000c4cb         pxor       xmm0, xmm0
000000000000c4cf         shr        rax, 0x1
000000000000c4d2         and        esi, 0x1
000000000000c4d5         or         rax, rsi
000000000000c4d8         cvtsi2ss   xmm0, rax
000000000000c4dd         addss      xmm0, xmm0
000000000000c4e1         jmp        loc_c359
000000000000c4e6         align      16

                     loc_c4f0:
000000000000c4f0         cvttss2si  rsi, xmm0                                   ; CODE XREF=hash_rehash+84
000000000000c4f5         jmp        loc_c398
000000000000c4fa         align      256

                     loc_c500:
000000000000c500         mov        ebx, 0x1                                    ; CODE XREF=hash_rehash+184
000000000000c505         jmp        loc_c4a2
000000000000c507         align      16

                     loc_c510:
000000000000c510         mov        rdi, qword [rbp]                            ; CODE XREF=hash_rehash+312
000000000000c514         call       sub_2c80                                    ; sub_2c80
000000000000c519         mov        rax, qword [rsp+0x78+var_78]
000000000000c51d         mov        qword [rbp], rax
000000000000c521         mov        rax, qword [rsp+0x78+var_70]
000000000000c526         mov        qword [rbp+8], rax
000000000000c52a         mov        rax, qword [rsp+0x78+var_68]
000000000000c52f         mov        qword [rbp+0x10], rax
000000000000c533         mov        rax, qword [rsp+0x78+var_60]
000000000000c538         mov        qword [rbp+0x18], rax
000000000000c53c         mov        rax, qword [rsp+0x78+var_30]
000000000000c541         mov        qword [rbp+0x48], rax
000000000000c545         jmp        loc_c4a2

                     loc_c54a:
000000000000c54a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_rehash+402
                        ; endp

                     loc_c54f:
000000000000c54f         mov        ecx, 0x1                                    ; CODE XREF=hash_rehash+144
000000000000c554         jmp        loc_c3b6

                     loc_c559:
000000000000c559         call       j_abort                                     ; abort, CODE XREF=hash_rehash+345, hash_rehash+366
                        ; endp
000000000000c55e         align      32                                          ; End of unwind block (FDE at 0x18f24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     hash_insert_if_absent:
000000000000c560         push       r13                                         ; Begin of unwind block (FDE at 0x18f5c), CODE XREF=hash_insert+27
000000000000c562         push       r12
000000000000c564         push       rbp
000000000000c565         push       rbx
000000000000c566         sub        rsp, 0x18
000000000000c56a         mov        rax, qword [fs:0x28]
000000000000c573         mov        qword [rsp+0x38+var_30], rax
000000000000c578         xor        eax, eax
000000000000c57a         test       rsi, rsi
000000000000c57d         je         loc_c73d

000000000000c583         mov        r12, rsp
000000000000c586         xor        ecx, ecx
000000000000c588         mov        r13, rdx
000000000000c58b         mov        rdx, r12
000000000000c58e         mov        rbx, rdi
000000000000c591         mov        rbp, rsi
000000000000c594         call       hash_find_entry                             ; hash_find_entry
000000000000c599         test       rax, rax
000000000000c59c         mov        rdx, rax
000000000000c59f         je         loc_c5d0

000000000000c5a1         xor        eax, eax
000000000000c5a3         test       r13, r13
000000000000c5a6         je         loc_c5ac

000000000000c5a8         mov        qword [r13], rdx

                     loc_c5ac:
000000000000c5ac         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=hash_insert_if_absent+70, hash_insert_if_absent+233, hash_insert_if_absent+507, hash_insert_if_absent+536
000000000000c5b1         xor        rcx, qword [fs:0x28]
000000000000c5ba         jne        loc_c7df

000000000000c5c0         add        rsp, 0x18
000000000000c5c4         pop        rbx
000000000000c5c5         pop        rbp
000000000000c5c6         pop        r12
000000000000c5c8         pop        r13
000000000000c5ca         ret
                        ; endp
000000000000c5cb         align      16

                     loc_c5d0:
000000000000c5d0         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+63
000000000000c5d4         test       rax, rax
000000000000c5d7         js         loc_c650

000000000000c5d9         pxor       xmm1, xmm1
000000000000c5dd         mov        rdx, qword [rbx+0x28]
000000000000c5e1         cvtsi2ss   xmm1, rax
000000000000c5e6         mov        rax, qword [rbx+0x10]
000000000000c5ea         test       rax, rax
000000000000c5ed         js         loc_c67a

                     loc_c5f3:
000000000000c5f3         pxor       xmm0, xmm0                                  ; CODE XREF=hash_insert_if_absent+276
000000000000c5f7         cvtsi2ss   xmm0, rax

                     loc_c5fc:
000000000000c5fc         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_insert_if_absent+307
000000000000c601         ucomiss    xmm1, xmm0
000000000000c604         ja         loc_c6a0

                     loc_c60a:
000000000000c60a         mov        r12, qword [rsp+0x38+var_38]                ; CODE XREF=hash_insert_if_absent+392, hash_insert_if_absent+471
000000000000c60e         cmp        qword [r12], 0x0
000000000000c613         je         loc_c748

000000000000c619         mov        rax, qword [rbx+0x48]
000000000000c61d         test       rax, rax
000000000000c620         je         loc_c760

000000000000c626         mov        rdx, qword [rax+8]
000000000000c62a         mov        qword [rbx+0x48], rdx

                     loc_c62e:
000000000000c62e         mov        rdx, qword [r12+8]                          ; CODE XREF=hash_insert_if_absent+525
000000000000c633         mov        qword [rax], rbp
000000000000c636         mov        qword [rax+8], rdx
000000000000c63a         mov        qword [r12+8], rax
000000000000c63f         mov        eax, 0x1
000000000000c644         add        qword [rbx+0x20], 0x1
000000000000c649         jmp        loc_c5ac
000000000000c64e         align      16

                     loc_c650:
000000000000c650         mov        rdx, rax                                    ; CODE XREF=hash_insert_if_absent+119
000000000000c653         pxor       xmm1, xmm1
000000000000c657         and        eax, 0x1
000000000000c65a         shr        rdx, 0x1
000000000000c65d         or         rdx, rax
000000000000c660         mov        rax, qword [rbx+0x10]
000000000000c664         cvtsi2ss   xmm1, rdx
000000000000c669         mov        rdx, qword [rbx+0x28]
000000000000c66d         test       rax, rax
000000000000c670         addss      xmm1, xmm1
000000000000c674         jns        loc_c5f3

                     loc_c67a:
000000000000c67a         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+141
000000000000c67d         pxor       xmm0, xmm0
000000000000c681         shr        rcx, 0x1
000000000000c684         and        eax, 0x1
000000000000c687         or         rcx, rax
000000000000c68a         cvtsi2ss   xmm0, rcx
000000000000c68f         addss      xmm0, xmm0
000000000000c693         jmp        loc_c5fc
000000000000c698         align      32

                     loc_c6a0:
000000000000c6a0         lea        rdi, qword [rbx+0x28]                       ; CODE XREF=hash_insert_if_absent+164
000000000000c6a4         call       check_tuning.isra.0                         ; check_tuning.isra.0
000000000000c6a9         mov        rax, qword [rbx+0x10]
000000000000c6ad         mov        rdx, qword [rbx+0x28]
000000000000c6b1         test       rax, rax
000000000000c6b4         movss      xmm2, dword [rdx+8]
000000000000c6b9         js         loc_c780

000000000000c6bf         pxor       xmm0, xmm0
000000000000c6c3         cvtsi2ss   xmm0, rax

                     loc_c6c8:
000000000000c6c8         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+569
000000000000c6cc         test       rax, rax
000000000000c6cf         js         loc_c7a0

000000000000c6d5         pxor       xmm1, xmm1
000000000000c6d9         cvtsi2ss   xmm1, rax

                     loc_c6de:
000000000000c6de         movaps     xmm3, xmm2                                  ; CODE XREF=hash_insert_if_absent+601
000000000000c6e1         mulss      xmm3, xmm0
000000000000c6e5         ucomiss    xmm1, xmm3
000000000000c6e8         jbe        loc_c60a

000000000000c6ee         cmp        byte [rdx+0x10], 0x0
000000000000c6f2         mulss      xmm0, dword [rdx+0xc]
000000000000c6f7         jne        loc_c6fd

000000000000c6f9         mulss      xmm0, xmm2

                     loc_c6fd:
000000000000c6fd         ucomiss    xmm0, dword [float_16a3c]                   ; float_16a3c, CODE XREF=hash_insert_if_absent+407
000000000000c704         jae        loc_c773

000000000000c706         ucomiss    xmm0, dword [float_16a40]                   ; float_16a40
000000000000c70d         jae        loc_c7c0

000000000000c713         cvttss2si  rsi, xmm0

                     loc_c718:
000000000000c718         mov        rdi, rbx                                    ; CODE XREF=hash_insert_if_absent+634
000000000000c71b         call       hash_rehash                                 ; hash_rehash
000000000000c720         test       al, al
000000000000c722         je         loc_c773

000000000000c724         xor        ecx, ecx
000000000000c726         mov        rdx, r12
000000000000c729         mov        rsi, rbp
000000000000c72c         mov        rdi, rbx
000000000000c72f         call       hash_find_entry                             ; hash_find_entry
000000000000c734         test       rax, rax
000000000000c737         je         loc_c60a

                     loc_c73d:
000000000000c73d         call       j_abort                                     ; abort, CODE XREF=hash_insert_if_absent+29
                        ; endp
000000000000c742         align      8

                     loc_c748:
000000000000c748         mov        qword [r12], rbp                            ; CODE XREF=hash_insert_if_absent+179
000000000000c74c         mov        eax, 0x1
000000000000c751         add        qword [rbx+0x20], 0x1
000000000000c756         add        qword [rbx+0x18], 0x1
000000000000c75b         jmp        loc_c5ac

                     loc_c760:
000000000000c760         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=hash_insert_if_absent+192
000000000000c765         call       j_malloc                                    ; malloc
000000000000c76a         test       rax, rax
000000000000c76d         jne        loc_c62e

                     loc_c773:
000000000000c773         mov        eax, 0xffffffff                             ; CODE XREF=hash_insert_if_absent+420, hash_insert_if_absent+450
000000000000c778         jmp        loc_c5ac
000000000000c77d         align      128

                     loc_c780:
000000000000c780         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+345
000000000000c783         pxor       xmm0, xmm0
000000000000c787         shr        rcx, 0x1
000000000000c78a         and        eax, 0x1
000000000000c78d         or         rcx, rax
000000000000c790         cvtsi2ss   xmm0, rcx
000000000000c795         addss      xmm0, xmm0
000000000000c799         jmp        loc_c6c8
000000000000c79e         align      32

                     loc_c7a0:
000000000000c7a0         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+367
000000000000c7a3         pxor       xmm1, xmm1
000000000000c7a7         shr        rcx, 0x1
000000000000c7aa         and        eax, 0x1
000000000000c7ad         or         rcx, rax
000000000000c7b0         cvtsi2ss   xmm1, rcx
000000000000c7b5         addss      xmm1, xmm1
000000000000c7b9         jmp        loc_c6de
000000000000c7be         align      64

                     loc_c7c0:
000000000000c7c0         subss      xmm0, dword [float_16a40]                   ; float_16a40, CODE XREF=hash_insert_if_absent+429
000000000000c7c8         movabs     rax, 0x8000000000000000
000000000000c7d2         cvttss2si  rsi, xmm0
000000000000c7d7         xor        rsi, rax
000000000000c7da         jmp        loc_c718

                     loc_c7df:
000000000000c7df         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert_if_absent+90
                        ; endp
000000000000c7e4         align      16                                          ; End of unwind block (FDE at 0x18f5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     hash_insert:
000000000000c7f0         push       rbx                                         ; Begin of unwind block (FDE at 0x18f98), CODE XREF=remember_copied+61, record_file+70, utimecmpat+194, filesystem_type+255, enter_dir.isra.10+70
000000000000c7f1         mov        rbx, rsi
000000000000c7f4         sub        rsp, 0x10
000000000000c7f8         mov        rdx, rsp
000000000000c7fb         mov        rax, qword [fs:0x28]
000000000000c804         mov        qword [rsp+0x18+var_10], rax
000000000000c809         xor        eax, eax
000000000000c80b         call       hash_insert_if_absent                       ; hash_insert_if_absent
000000000000c810         cmp        eax, 0xffffffff
000000000000c813         je         loc_c840

000000000000c815         test       eax, eax
000000000000c817         jne        loc_c81d

000000000000c819         mov        rbx, qword [rsp+0x18+var_18]

                     loc_c81d:
000000000000c81d         mov        rcx, qword [rsp+0x18+var_10]                ; CODE XREF=hash_insert+39, hash_insert+82
000000000000c822         xor        rcx, qword [fs:0x28]
000000000000c82b         mov        rax, rbx
000000000000c82e         jne        loc_c844

000000000000c830         add        rsp, 0x10
000000000000c834         pop        rbx
000000000000c835         ret
                        ; endp
000000000000c836         align      64

                     loc_c840:
000000000000c840         xor        ebx, ebx                                    ; CODE XREF=hash_insert+35
000000000000c842         jmp        loc_c81d

                     loc_c844:
000000000000c844         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert+62
                        ; endp
000000000000c849         align      16                                          ; End of unwind block (FDE at 0x18f98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     hash_delete:
000000000000c850         push       r12                                         ; Begin of unwind block (FDE at 0x18fbc), CODE XREF=forget_created+49, leave_dir.isra.12+122
000000000000c852         push       rbp
000000000000c853         mov        ecx, 0x1
000000000000c858         push       rbx
000000000000c859         mov        rbx, rdi
000000000000c85c         sub        rsp, 0x10
000000000000c860         mov        rdx, rsp
000000000000c863         mov        rax, qword [fs:0x28]
000000000000c86c         mov        qword [rsp+0x28+var_20], rax
000000000000c871         xor        eax, eax
000000000000c873         call       hash_find_entry                             ; hash_find_entry
000000000000c878         test       rax, rax
000000000000c87b         mov        rbp, rax
000000000000c87e         je         loc_c88f

000000000000c880         mov        rax, qword [rsp+0x28+var_28]
000000000000c884         sub        qword [rbx+0x20], 0x1
000000000000c889         cmp        qword [rax], 0x0
000000000000c88d         je         loc_c8b0

                     loc_c88f:
000000000000c88f         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=hash_delete+46, hash_delete+159, hash_delete+229, hash_delete+278, hash_delete+321
000000000000c894         xor        rcx, qword [fs:0x28]
000000000000c89d         mov        rax, rbp
000000000000c8a0         jne        loc_ca4e

000000000000c8a6         add        rsp, 0x10
000000000000c8aa         pop        rbx
000000000000c8ab         pop        rbp
000000000000c8ac         pop        r12
000000000000c8ae         ret
                        ; endp
000000000000c8af         align      16

                     loc_c8b0:
000000000000c8b0         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+61
000000000000c8b4         sub        rax, 0x1
000000000000c8b8         test       rax, rax
000000000000c8bb         mov        qword [rbx+0x18], rax
000000000000c8bf         js         loc_c9c0

000000000000c8c5         pxor       xmm0, xmm0
000000000000c8c9         cvtsi2ss   xmm0, rax

                     loc_c8ce:
000000000000c8ce         mov        rax, qword [rbx+0x10]                       ; CODE XREF=hash_delete+393
000000000000c8d2         mov        rdx, qword [rbx+0x28]
000000000000c8d6         test       rax, rax
000000000000c8d9         js         loc_c9a0

000000000000c8df         pxor       xmm1, xmm1
000000000000c8e3         cvtsi2ss   xmm1, rax

                     loc_c8e8:
000000000000c8e8         mulss      xmm1, dword [rdx]                           ; CODE XREF=hash_delete+361
000000000000c8ec         ucomiss    xmm1, xmm0
000000000000c8ef         jbe        loc_c88f

000000000000c8f1         lea        rdi, qword [rbx+0x28]
000000000000c8f5         call       check_tuning.isra.0                         ; check_tuning.isra.0
000000000000c8fa         mov        rax, qword [rbx+0x10]
000000000000c8fe         mov        rdx, qword [rbx+0x28]
000000000000c902         test       rax, rax
000000000000c905         js         loc_ca30

000000000000c90b         pxor       xmm0, xmm0
000000000000c90f         cvtsi2ss   xmm0, rax

                     loc_c914:
000000000000c914         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+505
000000000000c918         test       rax, rax
000000000000c91b         js         loc_ca10

000000000000c921         pxor       xmm1, xmm1
000000000000c925         cvtsi2ss   xmm1, rax

                     loc_c92a:
000000000000c92a         movss      xmm2, dword [rdx]                           ; CODE XREF=hash_delete+473
000000000000c92e         mulss      xmm2, xmm0
000000000000c932         ucomiss    xmm2, xmm1
000000000000c935         jbe        loc_c88f

000000000000c93b         cmp        byte [rdx+0x10], 0x0
000000000000c93f         mulss      xmm0, dword [rdx+4]
000000000000c944         je         loc_ca00

                     loc_c94a:
000000000000c94a         ucomiss    xmm0, dword [float_16a40]                   ; float_16a40, CODE XREF=hash_delete+437
000000000000c951         jae        loc_c9e0

000000000000c957         cvttss2si  rsi, xmm0

                     loc_c95c:
000000000000c95c         mov        rdi, rbx                                    ; CODE XREF=hash_delete+426
000000000000c95f         call       hash_rehash                                 ; hash_rehash
000000000000c964         test       al, al
000000000000c966         jne        loc_c88f

000000000000c96c         mov        rdi, qword [rbx+0x48]
000000000000c970         test       rdi, rdi
000000000000c973         je         loc_c989

000000000000c975         nop        dword [rax]

                     loc_c978:
000000000000c978         mov        r12, qword [rdi+8]                          ; CODE XREF=hash_delete+311
000000000000c97c         call       sub_2c80                                    ; sub_2c80
000000000000c981         test       r12, r12
000000000000c984         mov        rdi, r12
000000000000c987         jne        loc_c978

                     loc_c989:
000000000000c989         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=hash_delete+291
000000000000c991         jmp        loc_c88f
000000000000c996         align      32

                     loc_c9a0:
000000000000c9a0         mov        rcx, rax                                    ; CODE XREF=hash_delete+137
000000000000c9a3         pxor       xmm1, xmm1
000000000000c9a7         shr        rcx, 0x1
000000000000c9aa         and        eax, 0x1
000000000000c9ad         or         rcx, rax
000000000000c9b0         cvtsi2ss   xmm1, rcx
000000000000c9b5         addss      xmm1, xmm1
000000000000c9b9         jmp        loc_c8e8
000000000000c9be         align      64

                     loc_c9c0:
000000000000c9c0         mov        rdx, rax                                    ; CODE XREF=hash_delete+111
000000000000c9c3         pxor       xmm0, xmm0
000000000000c9c7         shr        rdx, 0x1
000000000000c9ca         and        eax, 0x1
000000000000c9cd         or         rdx, rax
000000000000c9d0         cvtsi2ss   xmm0, rdx
000000000000c9d5         addss      xmm0, xmm0
000000000000c9d9         jmp        loc_c8ce
000000000000c9de         align      32

                     loc_c9e0:
000000000000c9e0         subss      xmm0, dword [float_16a40]                   ; float_16a40, CODE XREF=hash_delete+257
000000000000c9e8         movabs     rax, 0x8000000000000000
000000000000c9f2         cvttss2si  rsi, xmm0
000000000000c9f7         xor        rsi, rax
000000000000c9fa         jmp        loc_c95c
000000000000c9ff         align      512

                     loc_ca00:
000000000000ca00         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_delete+244
000000000000ca05         jmp        loc_c94a
000000000000ca0a         align      16

                     loc_ca10:
000000000000ca10         mov        rcx, rax                                    ; CODE XREF=hash_delete+203
000000000000ca13         pxor       xmm1, xmm1
000000000000ca17         shr        rcx, 0x1
000000000000ca1a         and        eax, 0x1
000000000000ca1d         or         rcx, rax
000000000000ca20         cvtsi2ss   xmm1, rcx
000000000000ca25         addss      xmm1, xmm1
000000000000ca29         jmp        loc_c92a
000000000000ca2e         align      16

                     loc_ca30:
000000000000ca30         mov        rcx, rax                                    ; CODE XREF=hash_delete+181
000000000000ca33         pxor       xmm0, xmm0
000000000000ca37         shr        rcx, 0x1
000000000000ca3a         and        eax, 0x1
000000000000ca3d         or         rcx, rax
000000000000ca40         cvtsi2ss   xmm0, rcx
000000000000ca45         addss      xmm0, xmm0
000000000000ca49         jmp        loc_c914

                     loc_ca4e:
000000000000ca4e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_delete+80
                        ; endp
000000000000ca53         align      32                                          ; End of unwind block (FDE at 0x18fbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     triple_hash:
000000000000ca60         push       rbp                                         ; Begin of unwind block (FDE at 0x18ff4), DATA XREF=dest_info_init+16
000000000000ca61         push       rbx
000000000000ca62         mov        rbp, rdi
000000000000ca65         mov        rbx, rsi
000000000000ca68         sub        rsp, 0x8
000000000000ca6c         mov        rdi, qword [rdi]
000000000000ca6f         call       hash_pjw                                    ; hash_pjw
000000000000ca74         xor        rax, qword [rbp+8]
000000000000ca78         xor        edx, edx
000000000000ca7a         add        rsp, 0x8
000000000000ca7e         div        rbx
000000000000ca81         pop        rbx
000000000000ca82         pop        rbp
000000000000ca83         mov        rax, rdx
000000000000ca86         ret
                        ; endp
000000000000ca87         align      16                                          ; End of unwind block (FDE at 0x18ff4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     triple_hash_no_name:
000000000000ca90         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x1901c), DATA XREF=src_info_init+16
000000000000ca94         xor        edx, edx
000000000000ca96         div        rsi
000000000000ca99         mov        rax, rdx
000000000000ca9c         ret
                        ; endp
000000000000ca9d         align      32                                          ; End of unwind block (FDE at 0x1901c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     triple_compare:
000000000000caa0         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x19030), DATA XREF=dest_info_init+7, src_info_init+7
000000000000caa2         mov        rdx, qword [rsi+8]
000000000000caa6         cmp        qword [rdi+8], rdx
000000000000caaa         je         loc_cab0

                     loc_caac:
000000000000caac         ret                                                    ; CODE XREF=triple_compare+24
                        ; endp
000000000000caae         align      16

                     loc_cab0:
000000000000cab0         mov        rcx, qword [rsi+0x10]                       ; CODE XREF=triple_compare+10
000000000000cab4         cmp        qword [rdi+0x10], rcx
000000000000cab8         jne        loc_caac

000000000000caba         sub        rsp, 0x8
000000000000cabe         mov        rsi, qword [rsi]
000000000000cac1         mov        rdi, qword [rdi]
000000000000cac4         call       same_name                                   ; same_name
000000000000cac9         add        rsp, 0x8
000000000000cacd         ret
                        ; endp
000000000000cace         align      16                                          ; End of unwind block (FDE at 0x19030)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     triple_compare_ino_str:
000000000000cad0         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x19048)
000000000000cad2         mov        rdx, qword [rsi+8]
000000000000cad6         cmp        qword [rdi+8], rdx
000000000000cada         je         loc_cae0

                     loc_cadc:
000000000000cadc         ret                                                    ; CODE XREF=triple_compare_ino_str+24
                        ; endp
000000000000cade         align      32

                     loc_cae0:
000000000000cae0         mov        rcx, qword [rsi+0x10]                       ; CODE XREF=triple_compare_ino_str+10
000000000000cae4         cmp        qword [rdi+0x10], rcx
000000000000cae8         jne        loc_cadc

000000000000caea         sub        rsp, 0x8
000000000000caee         mov        rsi, qword [rsi]                            ; argument "__s2" for method j_strcmp
000000000000caf1         mov        rdi, qword [rdi]                            ; argument "__s1" for method j_strcmp
000000000000caf4         call       j_strcmp                                    ; strcmp
000000000000caf9         test       eax, eax
000000000000cafb         sete       al
000000000000cafe         add        rsp, 0x8
000000000000cb02         ret
                        ; endp
000000000000cb03         align      16                                          ; End of unwind block (FDE at 0x19048)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     triple_free:
000000000000cb10         push       rbx                                         ; Begin of unwind block (FDE at 0x19060), CODE XREF=record_file+98, DATA XREF=dest_info_init, src_info_init
000000000000cb11         mov        rbx, rdi
000000000000cb14         mov        rdi, qword [rdi]
000000000000cb17         call       sub_2c80                                    ; sub_2c80
000000000000cb1c         mov        rdi, rbx
000000000000cb1f         pop        rbx
000000000000cb20         jmp        sub_2c80                                    ; sub_2c80
                        ; endp
000000000000cb25         align      16                                          ; End of unwind block (FDE at 0x19060)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     opendirat:
000000000000cb30         push       r13                                         ; Begin of unwind block (FDE at 0x1907c), CODE XREF=backupfile_internal+1213, fts_build+1189
000000000000cb32         push       r12
000000000000cb34         or         edx, 0x90900
000000000000cb3a         push       rbp
000000000000cb3b         push       rbx
000000000000cb3c         xor        eax, eax
000000000000cb3e         mov        r12, rcx
000000000000cb41         sub        rsp, 0x8
000000000000cb45         call       openat_safer                                ; openat_safer
000000000000cb4a         test       eax, eax
000000000000cb4c         js         loc_cba0

000000000000cb4e         mov        edi, eax                                    ; argument "__fd" for method j_fdopendir
000000000000cb50         mov        ebx, eax
000000000000cb52         call       j_fdopendir                                 ; fdopendir
000000000000cb57         test       rax, rax
000000000000cb5a         mov        rbp, rax
000000000000cb5d         je         loc_cb78

000000000000cb5f         mov        dword [r12], ebx
000000000000cb63         add        rsp, 0x8
000000000000cb67         mov        rax, rbp
000000000000cb6a         pop        rbx
000000000000cb6b         pop        rbp
000000000000cb6c         pop        r12
000000000000cb6e         pop        r13
000000000000cb70         ret
                        ; endp
000000000000cb71         align      8

                     loc_cb78:
000000000000cb78         call       j___errno_location                          ; __errno_location, CODE XREF=opendirat+45
000000000000cb7d         mov        r13d, dword [rax]
000000000000cb80         mov        r12, rax
000000000000cb83         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000cb85         call       j_close                                     ; close
000000000000cb8a         mov        rax, rbp
000000000000cb8d         mov        dword [r12], r13d
000000000000cb91         add        rsp, 0x8
000000000000cb95         pop        rbx
000000000000cb96         pop        rbp
000000000000cb97         pop        r12
000000000000cb99         pop        r13
000000000000cb9b         ret
                        ; endp
000000000000cb9c         align      32

                     loc_cba0:
000000000000cba0         add        rsp, 0x8                                    ; CODE XREF=opendirat+28
000000000000cba4         xor        ebp, ebp
000000000000cba6         pop        rbx
000000000000cba7         mov        rax, rbp
000000000000cbaa         pop        rbp
000000000000cbab         pop        r12
000000000000cbad         pop        r13
000000000000cbaf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
000000000000cbb0         test       rdi, rdi                                    ; End of unwind block (FDE at 0x1907c), Begin of unwind block (FDE at 0x190dc), CODE XREF=main+49
000000000000cbb3         push       rbx
000000000000cbb4         je         loc_cc2d

000000000000cbb6         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000cbbb         mov        rbx, rdi
000000000000cbbe         call       j_strrchr                                   ; strrchr
000000000000cbc3         test       rax, rax
000000000000cbc6         je         loc_cc1d

000000000000cbc8         lea        r8, qword [rax+1]
000000000000cbcc         mov        rdx, r8
000000000000cbcf         sub        rdx, rbx
000000000000cbd2         cmp        rdx, 0x6
000000000000cbd6         jle        loc_cc1d

000000000000cbd8         lea        rsi, qword [rax-6]
000000000000cbdc         lea        rdi, qword [aLibs]                          ; "/.libs/"
000000000000cbe3         mov        ecx, 0x7
000000000000cbe8         rep  cmpsb byte [rsi], byte [rdi]
000000000000cbea         seta       dl
000000000000cbed         sbb        dl, 0x0
000000000000cbf0         test       dl, dl
000000000000cbf2         jne        loc_cc1d

000000000000cbf4         lea        rdi, qword [aLibs+8]                        ; 0x16a90
000000000000cbfb         mov        ecx, 0x3
000000000000cc00         mov        rsi, r8
000000000000cc03         mov        rbx, r8
000000000000cc06         rep  cmpsb byte [rsi], byte [rdi]
000000000000cc08         seta       dl
000000000000cc0b         sbb        dl, 0x0
000000000000cc0e         test       dl, dl
000000000000cc10         jne        loc_cc1d

000000000000cc12         lea        rbx, qword [rax+4]
000000000000cc16         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_cc1d:
000000000000cc1d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
000000000000cc24         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
000000000000cc2b         pop        rbx
000000000000cc2c         ret
                        ; endp

                     loc_cc2d:
000000000000cc2d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
000000000000cc34         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000cc3b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
000000000000cc40         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
000000000000cc45         call       j_fwrite                                    ; fwrite
000000000000cc4a         call       j_abort                                     ; abort
                        ; endp
000000000000cc4f         align      16                                          ; End of unwind block (FDE at 0x190dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_24: int8_t, -36


                     qcopy_acl:
000000000000cc50         push       r12                                         ; Begin of unwind block (FDE at 0x190fc), CODE XREF=copy_acl+10
000000000000cc52         push       rbp
000000000000cc53         mov        r12d, ecx
000000000000cc56         push       rbx
000000000000cc57         mov        rbp, rdx
000000000000cc5a         mov        edx, r8d
000000000000cc5d         sub        rsp, 0x10
000000000000cc61         lea        rbx, qword [rsp+0x28+var_24]
000000000000cc66         mov        rax, qword [fs:0x28]
000000000000cc6f         mov        qword [rsp+0x28+var_20], rax
000000000000cc74         xor        eax, eax
000000000000cc76         mov        rcx, rbx
000000000000cc79         call       get_permissions                             ; get_permissions
000000000000cc7e         test       eax, eax
000000000000cc80         jne        loc_ccb8

000000000000cc82         mov        rsi, rbp
000000000000cc85         mov        rdi, rbx
000000000000cc88         mov        edx, r12d
000000000000cc8b         call       set_permissions                             ; set_permissions
000000000000cc90         mov        rdi, rbx
000000000000cc93         mov        ebp, eax
000000000000cc95         call       free_permission_context                     ; free_permission_context

                     loc_cc9a:
000000000000cc9a         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=qcopy_acl+109
000000000000cc9f         xor        rcx, qword [fs:0x28]
000000000000cca8         mov        eax, ebp
000000000000ccaa         jne        loc_ccbf

000000000000ccac         add        rsp, 0x10
000000000000ccb0         pop        rbx
000000000000ccb1         pop        rbp
000000000000ccb2         pop        r12
000000000000ccb4         ret
                        ; endp
000000000000ccb5         align      8

                     loc_ccb8:
000000000000ccb8         mov        ebp, 0xfffffffe                             ; CODE XREF=qcopy_acl+48
000000000000ccbd         jmp        loc_cc9a

                     loc_ccbf:
000000000000ccbf         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=qcopy_acl+90
                        ; endp
000000000000ccc4         align      16                                          ; End of unwind block (FDE at 0x190fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_24: int32_t, -36


                     qset_acl:
000000000000ccd0         push       rbp                                         ; Begin of unwind block (FDE at 0x19134), CODE XREF=set_owner+301, set_acl+7
000000000000ccd1         push       rbx
000000000000ccd2         sub        rsp, 0x18
000000000000ccd6         lea        rbx, qword [rsp+0x28+var_24]
000000000000ccdb         mov        dword [rsp+0x28+var_24], edx
000000000000ccdf         mov        edx, esi
000000000000cce1         mov        rsi, rdi
000000000000cce4         mov        rdi, rbx
000000000000cce7         mov        rax, qword [fs:0x28]
000000000000ccf0         mov        qword [rsp+0x28+var_20], rax
000000000000ccf5         xor        eax, eax
000000000000ccf7         call       set_permissions                             ; set_permissions
000000000000ccfc         mov        rdi, rbx
000000000000ccff         mov        ebp, eax
000000000000cd01         call       free_permission_context                     ; free_permission_context
000000000000cd06         mov        rcx, qword [rsp+0x28+var_20]
000000000000cd0b         xor        rcx, qword [fs:0x28]
000000000000cd14         jne        loc_cd1f

000000000000cd16         add        rsp, 0x18
000000000000cd1a         mov        eax, ebp
000000000000cd1c         pop        rbx
000000000000cd1d         pop        rbp
000000000000cd1e         ret
                        ; endp

                     loc_cd1f:
000000000000cd1f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=qset_acl+68
                        ; endp
000000000000cd24         align      16                                          ; End of unwind block (FDE at 0x19134)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
000000000000cd30         push       rbp                                         ; Begin of unwind block (FDE at 0x19164), CODE XREF=sub_d560+2597, sub_d560+2619
000000000000cd31         push       rbx
000000000000cd32         mov        rbp, rdi
000000000000cd35         mov        ebx, esi
000000000000cd37         sub        rsp, 0x8
000000000000cd3b         call       locale_charset                              ; locale_charset
000000000000cd40         movzx      edx, byte [rax]
000000000000cd43         and        edx, 0xffffffdf
000000000000cd46         cmp        dl, 0x55
000000000000cd49         je         loc_cdc0

000000000000cd4b         cmp        dl, 0x47
000000000000cd4e         je         loc_cd70

                     loc_cd50:
000000000000cd50         lea        rax, qword [aLibs+27]                       ; 0x16aa3, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
000000000000cd57         lea        rdx, qword [aLibs+29]                       ; 0x16aa5
000000000000cd5e         cmp        ebx, 0x9
000000000000cd61         cmovne     rax, rdx
000000000000cd65         add        rsp, 0x8
000000000000cd69         pop        rbx
000000000000cd6a         pop        rbp
000000000000cd6b         ret
                        ; endp
000000000000cd6c         align      16

                     loc_cd70:
000000000000cd70         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
000000000000cd74         and        edx, 0xffffffdf
000000000000cd77         cmp        dl, 0x42
000000000000cd7a         jne        loc_cd50

000000000000cd7c         cmp        byte [rax+2], 0x31
000000000000cd80         jne        loc_cd50

000000000000cd82         cmp        byte [rax+3], 0x38
000000000000cd86         jne        loc_cd50

000000000000cd88         cmp        byte [rax+4], 0x30
000000000000cd8c         jne        loc_cd50

000000000000cd8e         cmp        byte [rax+5], 0x33
000000000000cd92         jne        loc_cd50

000000000000cd94         cmp        byte [rax+6], 0x30
000000000000cd98         jne        loc_cd50

000000000000cd9a         cmp        byte [rax+7], 0x0
000000000000cd9e         jne        loc_cd50

000000000000cda0         cmp        byte [rbp], 0x60
000000000000cda4         lea        rax, qword [aLibs+20]                       ; 0x16a9c
000000000000cdab         lea        rdx, qword [aLibs+24]                       ; 0x16aa0
000000000000cdb2         cmovne     rax, rdx
000000000000cdb6         add        rsp, 0x8
000000000000cdba         pop        rbx
000000000000cdbb         pop        rbp
000000000000cdbc         ret
                        ; endp
000000000000cdbd         align      64

                     loc_cdc0:
000000000000cdc0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
000000000000cdc4         and        edx, 0xffffffdf
000000000000cdc7         cmp        dl, 0x54
000000000000cdca         jne        loc_cd50

000000000000cdcc         movzx      edx, byte [rax+2]
000000000000cdd0         and        edx, 0xffffffdf
000000000000cdd3         cmp        dl, 0x46
000000000000cdd6         jne        loc_cd50

000000000000cddc         cmp        byte [rax+3], 0x2d
000000000000cde0         jne        loc_cd50

000000000000cde6         cmp        byte [rax+4], 0x38
000000000000cdea         jne        loc_cd50

000000000000cdf0         cmp        byte [rax+5], 0x0
000000000000cdf4         jne        loc_cd50

000000000000cdfa         cmp        byte [rbp], 0x60
000000000000cdfe         lea        rax, qword [aLibs+12]                       ; 0x16a94
000000000000ce05         lea        rdx, qword [aLibs+16]                       ; 0x16a98
000000000000ce0c         cmovne     rax, rdx
000000000000ce10         add        rsp, 0x8
000000000000ce14         pop        rbx
000000000000ce15         pop        rbp
000000000000ce16         ret
                        ; endp
000000000000ce17         align      32                                          ; End of unwind block (FDE at 0x19164)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
000000000000ce20         push       r15                                         ; Begin of unwind block (FDE at 0x191a8), CODE XREF=sub_d560+1165, sub_d560+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
000000000000ce22         push       r14
000000000000ce24         mov        r15d, r8d
000000000000ce27         push       r13
000000000000ce29         push       r12
000000000000ce2b         mov        r14, rdi
000000000000ce2e         push       rbp
000000000000ce2f         push       rbx
000000000000ce30         mov        ebx, r9d
000000000000ce33         mov        r13, rsi
000000000000ce36         mov        rbp, rcx
000000000000ce39         and        ebx, 0x2
000000000000ce3c         sub        rsp, 0xb8
000000000000ce43         mov        rax, qword [rsp+0xe8+arg_0]
000000000000ce4b         mov        qword [rsp+0xe8+var_D8], rdx
000000000000ce50         mov        dword [rsp+0xe8+var_E0], r8d
000000000000ce55         mov        dword [rsp+0xe8+var_70], r9d
000000000000ce5a         mov        qword [rsp+0xe8+var_C8], rax
000000000000ce5f         mov        rax, qword [rsp+0xe8+arg_8]
000000000000ce67         mov        qword [rsp+0xe8+var_80], rax
000000000000ce6c         mov        rax, qword [rsp+0xe8+arg_10]
000000000000ce74         mov        qword [rsp+0xe8+var_88], rax
000000000000ce79         mov        rax, qword [fs:0x28]
000000000000ce82         mov        qword [rsp+0xe8+var_40], rax
000000000000ce8a         xor        eax, eax
000000000000ce8c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
000000000000ce91         cmp        r15d, 0xa
000000000000ce95         mov        qword [rsp+0xe8+var_90], rax
000000000000ce9a         ja         loc_e04f

000000000000cea0         lea        rcx, qword [switch_table_16b00]             ; switch_table_16b00
000000000000cea7         mov        edx, r15d
000000000000ceaa         movsxd     rax, dword [rcx+rdx*4]
000000000000ceae         add        rax, rcx
000000000000ceb1         jmp        rax                                         ; switch statement using table at 0x16b00, with 11 cases, 0xceb3,0xda84,0xdae0,0xdb35,0xdb7a,0xdbb4,0xdc5a,0xdc94,0xde88

                     loc_ceb3:
000000000000ceb3         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_d560+1318
000000000000ceb8         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000cebd         xor        r12d, r12d
000000000000cec0         mov        qword [rsp+0xe8+var_98], 0x0
000000000000cec9         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000cece         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_ced3:
000000000000ced3         lea        rax, qword [aLibs+29]                       ; 0x16aa5, CODE XREF=sub_d560+1876
000000000000ceda         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000cee3         xor        r15d, r15d
000000000000cee6         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000ceee         mov        qword [rsp+0xe8+var_A0], rax

                     loc_cef3:
000000000000cef3         xor        r11d, r11d                                  ; CODE XREF=sub_d560+180, sub_d560+1400, sub_d560+1488, sub_d560+1557, sub_d560+1615, sub_d560+1781, sub_d560+1839, sub_d560+2408, sub_d560+2485
000000000000cef6         mov        rax, rbp
000000000000cef9         mov        r8d, r12d
000000000000cefc         mov        rbp, r11
000000000000ceff         mov        r11, rax
000000000000cf02         nop        word [rax+rax]

                     loc_cf08:
000000000000cf08         cmp        r11, rbp                                    ; CODE XREF=sub_d010+194
000000000000cf0b         setne      r12b
000000000000cf0f         cmp        r11, 0xffffffffffffffff
000000000000cf13         jne        loc_cf22

000000000000cf15         mov        rax, qword [rsp+0xe8+var_D8]
000000000000cf1a         cmp        byte [rax+rbp], 0x0
000000000000cf1e         setne      r12b

                     loc_cf22:
000000000000cf22         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
000000000000cf25         je         loc_d580

000000000000cf2b         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000cf30         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000cf35         lea        r9, qword [rdi+rbp]
000000000000cf39         setne      al
000000000000cf3c         and        al, byte [rsp+0xe8+var_DB]
000000000000cf40         mov        r10d, eax
000000000000cf43         je         loc_cff0

000000000000cf49         mov        rax, qword [rsp+0xe8+var_D0]
000000000000cf4e         test       rax, rax
000000000000cf51         je         loc_d380

000000000000cf57         cmp        r11, 0xffffffffffffffff
000000000000cf5b         lea        rbx, qword [rbp+rax]
000000000000cf60         jne        loc_cf90

000000000000cf62         cmp        rax, 0x1
000000000000cf66         jbe        loc_cf90

000000000000cf68         mov        byte [rsp+0xe8+var_B0], r8b
000000000000cf6d         mov        byte [rsp+0xe8+var_B8], r10b
000000000000cf72         mov        qword [rsp+0xe8+var_C0], r9
000000000000cf77         call       j_strlen                                    ; strlen
000000000000cf7c         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000cf82         movzx      r10d, byte [rsp+0xe8+var_B8]
000000000000cf88         mov        r11, rax
000000000000cf8b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_cf90:
000000000000cf90         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
000000000000cf93         mov        byte [rsp+0xe8+var_C0], r10b
000000000000cf98         ja         loc_d550

000000000000cf9e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
000000000000cfa3         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
000000000000cfa8         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000cfab         mov        qword [rsp+0xe8+var_A8], r11
000000000000cfb0         mov        byte [rsp+0xe8+var_B0], r8b
000000000000cfb5         mov        qword [rsp+0xe8+var_B8], r9
000000000000cfba         call       j_memcmp                                    ; memcmp
000000000000cfbf         test       eax, eax
000000000000cfc1         mov        r9, qword [rsp+0xe8+var_B8]
000000000000cfc6         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000cfcc         mov        r11, qword [rsp+0xe8+var_A8]
000000000000cfd1         jne        loc_d550

000000000000cfd7         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000cfdc         movzx      r10d, byte [rsp+0xe8+var_C0]
000000000000cfe2         jne        loc_df65

000000000000cfe8         nop        dword [rax+rax]

                     loc_cff0:
000000000000cff0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_d540+19
000000000000cff4         cmp        bl, 0x7e
000000000000cff7         ja         loc_d318

000000000000cffd         lea        rcx, qword [switch_table_16b00+44]          ; 0x16b2c
000000000000d004         movzx      edx, bl
000000000000d007         movsxd     rax, dword [rcx+rdx*4]
000000000000d00b         add        rax, rcx
000000000000d00e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_d010:
000000000000d010         xor        r10d, r10d
000000000000d013         cmp        r11, 0x1
000000000000d017         setne      al
000000000000d01a         cmp        r11, 0xffffffffffffffff
000000000000d01e         jne        loc_d02c

000000000000d020         mov        rax, qword [rsp+arg_8]
000000000000d025         cmp        byte [rax+1], 0x0
000000000000d029         setne      al

                     loc_d02c:
000000000000d02c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_d010+14
000000000000d031         sete       dl
000000000000d034         test       al, al
000000000000d036         je         loc_d288

                     loc_d03c:
000000000000d03c         xor        r12d, r12d                                  ; CODE XREF=sub_d280+11
000000000000d03f         xor        eax, eax
000000000000d041         nop        dword [rax]
                        ; endp

                     loc_d048:
000000000000d048         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_d230+50, sub_d300+119
000000000000d04d         jne        loc_d162

000000000000d053         test       dl, dl
000000000000d055         jne        loc_d162

                     loc_d05b:
000000000000d05b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_d110+87
000000000000d060         test       rsi, rsi
000000000000d063         je         loc_d079

000000000000d065         mov        edx, ebx
000000000000d067         shr        dl, 0x5
000000000000d06a         movzx      edx, dl
000000000000d06d         mov        edx, dword [rsi+rdx*4]
000000000000d070         bt         edx, ebx
000000000000d073         jb         loc_d1c3

                     loc_d079:
000000000000d079         test       r10b, r10b                                  ; CODE XREF=sub_d010+83, sub_d110+93
000000000000d07c         jne        loc_d1c3

000000000000d082         xor        eax, 0x1
000000000000d085         add        rbp, 0x1
000000000000d089         and        eax, r8d

                     loc_d08c:
000000000000d08c         test       al, al                                      ; CODE XREF=sub_d560+936
000000000000d08e         je         loc_d0b0

000000000000d090         cmp        r13, r15
000000000000d093         jbe        loc_d09a

000000000000d095         mov        byte [r14+r15], 0x27

                     loc_d09a:
000000000000d09a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_d010+131
000000000000d09e         cmp        r13, rax
000000000000d0a1         jbe        loc_d0a9

000000000000d0a3         mov        byte [r14+r15+1], 0x27

                     loc_d0a9:
000000000000d0a9         add        r15, 0x2                                    ; CODE XREF=sub_d010+145
000000000000d0ad         xor        r8d, r8d

                     loc_d0b0:
000000000000d0b0         cmp        r15, r13                                    ; CODE XREF=sub_d010+126, sub_d110+275, sub_d560+869
000000000000d0b3         jae        loc_d0b9

000000000000d0b5         mov        byte [r14+r15], bl

                     loc_d0b9:
000000000000d0b9         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_d010+163
000000000000d0be         add        r15, 0x1
000000000000d0c2         mov        eax, 0x0
000000000000d0c7         test       r12b, r12b
000000000000d0ca         cmove      edi, eax
000000000000d0cd         mov        byte [rsp+0xe8+var_DA], dil
000000000000d0d2         jmp        loc_cf08
000000000000d0d7         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_d0e0:
000000000000d0e0         xor        r10d, r10d
000000000000d0e3         mov        eax, dword [rsp+arg_0]
000000000000d0e7         cmp        eax, 0x2
000000000000d0ea         je         loc_d6a8

000000000000d0f0         cmp        eax, 0x5
000000000000d0f3         je         loc_d668

000000000000d0f9         cmp        eax, 0x2
000000000000d0fc         mov        ebx, 0x3f
000000000000d101         sete       dl
000000000000d104         xor        r12d, r12d
000000000000d107         xor        eax, eax
000000000000d109         jmp        sub_d010+56
                        ; endp
000000000000d10e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_d110:
000000000000d110         xor        r10d, r10d
000000000000d113         cmp        dword [rsp+arg_0], 0x2
000000000000d118         je         loc_d620

000000000000d11e         mov        byte [rsp+arg_74], r12b
000000000000d123         xor        edx, edx
000000000000d125         xor        eax, eax
000000000000d127         mov        ebx, 0x27
000000000000d12c         jmp        sub_d010+56
                        ; endp
000000000000d131         nop        dword [rax]
000000000000d138         mov        edx, 0x9
000000000000d13d         mov        ebx, 0x74

                     loc_d142:
000000000000d142         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_d2d0+10, sub_d3c0+37, sub_d500+53
000000000000d147         sete       al
000000000000d14a         and        al, byte [rsp+arg_7]
000000000000d14e         jne        sub_d280+30

000000000000d154         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_d110+114
000000000000d159         jne        loc_d1c0

                     loc_d15b:
000000000000d15b         mov        ebx, edx                                    ; CODE XREF=sub_d230+18
000000000000d15d         xor        r12d, r12d
000000000000d160         xor        eax, eax
                        ; endp

                     loc_d162:
000000000000d162         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_d010+61, sub_d010+69
000000000000d167         jne        loc_d05b

000000000000d16d         jmp        loc_d079
000000000000d172         nop        word [rax+rax]
000000000000d178         mov        edx, 0x8
000000000000d17d         mov        ebx, 0x62
000000000000d182         jmp        sub_d110+68
000000000000d184         nop        dword [rax]
000000000000d188         cmp        dword [rsp+8], 0x2
000000000000d18d         je         sub_d560                                    ; sub_d560
000000000000d193         cmp        byte [rsp+0xd], 0x0
000000000000d198         je         sub_d3a0+16

                     loc_d19e:
000000000000d19e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_d3a0+8
000000000000d1a3         je         loc_d3b0

000000000000d1a9         cmp        qword [rsp+arg_10], 0x0
000000000000d1af         jne        loc_d56b

000000000000d1b5         mov        ebx, 0x5c
000000000000d1ba         nop        word [rax+rax]
                        ; endp

                     loc_d1c0:
000000000000d1c0         xor        r12d, r12d                                  ; CODE XREF=sub_d110+73, sub_d500+29
                        ; endp

                     loc_d1c3:
000000000000d1c3         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_d010+99, sub_d010+108
000000000000d1c8         sete       dl
000000000000d1cb         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000d1d0         mov        eax, edx
000000000000d1d2         jne        loc_da28

000000000000d1d8         mov        eax, r8d
000000000000d1db         xor        eax, 0x1
000000000000d1de         and        al, dl
000000000000d1e0         je         loc_d211

000000000000d1e2         cmp        r13, r15
000000000000d1e5         jbe        loc_d1ec

000000000000d1e7         mov        byte [r14+r15], 0x27

                     loc_d1ec:
000000000000d1ec         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_d110+213
000000000000d1f0         cmp        r13, rdx
000000000000d1f3         jbe        loc_d1fb

000000000000d1f5         mov        byte [r14+r15+1], 0x24

                     loc_d1fb:
000000000000d1fb         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_d110+227
000000000000d1ff         cmp        r13, rdx
000000000000d202         jbe        loc_d20a

000000000000d204         mov        byte [r14+r15+2], 0x27

                     loc_d20a:
000000000000d20a         add        r15, 0x3                                    ; CODE XREF=sub_d110+242
000000000000d20e         mov        r8d, eax

                     loc_d211:
000000000000d211         cmp        r13, r15                                    ; CODE XREF=sub_d110+208
000000000000d214         jbe        loc_d21b

000000000000d216         mov        byte [r14+r15], 0x5c

                     loc_d21b:
000000000000d21b         add        r15, 0x1                                    ; CODE XREF=sub_d110+260
000000000000d21f         add        rbp, 0x1
000000000000d223         jmp        loc_d0b0
000000000000d228         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_d230:
000000000000d230         cmp        byte [rsp+arg_5], 0x0
000000000000d235         jne        loc_d403

000000000000d23b         xor        edx, edx
000000000000d23d         test       byte [rsp+arg_70], 0x1
000000000000d242         je         loc_d15b

000000000000d248         add        rbp, 0x1
000000000000d24c         jmp        quotearg_buffer_restyled+232
                        ; endp
000000000000d251         nop        dword [rax]
000000000000d258         cmp        dword [rsp+8], 0x2
000000000000d25d         sete       dl
000000000000d260         xor        eax, eax
000000000000d262         jmp        sub_d010+56
000000000000d267         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d270:
000000000000d270         mov        edx, 0x7
000000000000d275         mov        ebx, 0x61
000000000000d27a         jmp        sub_d110+68
                        ; endp
000000000000d27f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d280:
000000000000d280         cmp        dword [rsp+8], 0x2
000000000000d285         sete       dl
                        ; endp

                     loc_d288:
000000000000d288         test       rbp, rbp                                    ; CODE XREF=sub_d010+38, sub_d4a0+35
000000000000d28b         jne        loc_d03c

000000000000d291         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_d4d0+43
000000000000d296         and        al, dl
000000000000d298         je         sub_d010+56

000000000000d29e         mov        rbp, r11
000000000000d2a1         mov        dword [rsp+arg_0], 0x2
000000000000d2a9         jmp        sub_d560+1097
                        ; endp
000000000000d2ae         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_d2b0:
000000000000d2b0         cmp        dword [rsp+arg_0], 0x2
000000000000d2b5         sete       dl
000000000000d2b8         xor        r12d, r12d
000000000000d2bb         jmp        sub_d280+17
                        ; endp
000000000000d2bd         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_d2c0:
000000000000d2c0         cmp        dword [rsp+arg_0], 0x2
000000000000d2c5         mov        ebx, 0x20
000000000000d2ca         sete       dl
000000000000d2cd         jmp        sub_d280+17
                        ; endp
000000000000d2cf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_d2d0:
000000000000d2d0         mov        edx, 0xd
000000000000d2d5         mov        ebx, 0x72
000000000000d2da         jmp        loc_d142
000000000000d2df         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d2e0:
000000000000d2e0         mov        edx, 0xc
000000000000d2e5         mov        ebx, 0x66
000000000000d2ea         jmp        sub_d110+68
                        ; endp
000000000000d2ef         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d2f0:
000000000000d2f0         mov        edx, 0xb
000000000000d2f5         mov        ebx, 0x76
000000000000d2fa         jmp        sub_d110+68
                        ; endp
000000000000d2ff         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d300:
000000000000d300         mov        edx, 0xa
000000000000d305         mov        ebx, 0x6e
000000000000d30a         jmp        sub_d110+50
                        ; endp
000000000000d30f         align      16

                     loc_d310:
000000000000d310         xor        r10d, r10d                                  ; CODE XREF=sub_d300+135
000000000000d313         nop        dword [rax+rax]

                     loc_d318:
000000000000d318         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
000000000000d31e         jne        loc_d6c8

000000000000d324         mov        qword [rsp+0xe8+var_B0], r11
000000000000d329         mov        byte [rsp+0xe8+var_B8], r8b
000000000000d32e         mov        byte [rsp+0xe8+var_C0], r10b
000000000000d333         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d338         mov        rcx, qword [rax]
000000000000d33b         movzx      edx, bl
000000000000d33e         movzx      r10d, byte [rsp+0xe8+var_C0]
000000000000d344         movzx      r8d, byte [rsp+0xe8+var_B8]
000000000000d34a         mov        r11, qword [rsp+0xe8+var_B0]
000000000000d34f         mov        edi, 0x1
000000000000d354         movzx      eax, word [rcx+rdx*2]
000000000000d358         and        ax, 0x4000
000000000000d35c         setne      r12b
000000000000d360         sete       al
000000000000d363         and        al, byte [rsp+0xe8+var_DB]

                     loc_d367:
000000000000d367         test       al, al                                      ; CODE XREF=sub_d560+2221
000000000000d369         jne        loc_dd01

000000000000d36f         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000d374         sete       dl
000000000000d377         jmp        loc_d048
000000000000d37c         align      128

                     loc_d380:
000000000000d380         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
000000000000d384         cmp        bl, 0x7e
000000000000d387         ja         loc_d310

000000000000d389         lea        rcx, qword [switch_table_16b00+552]         ; 0x16d28
000000000000d390         movzx      edx, bl
000000000000d393         movsxd     rax, dword [rcx+rdx*4]
000000000000d397         add        rax, rcx
000000000000d39a         jmp        rax
                        ; endp
000000000000d39c         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_d3a0:
000000000000d3a0         xor        r10d, r10d
000000000000d3a3         cmp        byte [rsp+arg_5], 0x0
000000000000d3a8         jne        loc_d19e

000000000000d3ae         nop

                     loc_d3b0:
000000000000d3b0         mov        edx, 0x5c                                   ; CODE XREF=sub_d110+136, sub_d110+147
000000000000d3b5         mov        ebx, 0x5c
000000000000d3ba         jmp        sub_d110+68
                        ; endp
000000000000d3bf         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d3c0:
000000000000d3c0         mov        edx, 0xc
000000000000d3c5         xor        r10d, r10d
000000000000d3c8         mov        ebx, 0x66
000000000000d3cd         jmp        sub_d110+68
                        ; endp
000000000000d3d2         nop        word [rax+rax]
000000000000d3d8         mov        edx, 0xa
000000000000d3dd         xor        r10d, r10d
000000000000d3e0         mov        ebx, 0x6e
000000000000d3e5         jmp        sub_d110+50
000000000000d3ea         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d3f0:
000000000000d3f0         mov        ebx, 0x61
000000000000d3f5         jmp        sub_d110+176
                        ; endp
000000000000d3fa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d400:
000000000000d400         xor        r10d, r10d
                        ; endp

                     loc_d403:
000000000000d403         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_d230+5
000000000000d408         sete       dl
000000000000d40b         cmp        byte [rsp+arg_7], 0x0
000000000000d410         jne        loc_dfaa

000000000000d416         mov        eax, r8d
000000000000d419         mov        rcx, r15
000000000000d41c         xor        eax, 0x1
000000000000d41f         and        al, dl
000000000000d421         je         loc_d450

000000000000d423         cmp        r13, r15
000000000000d426         jbe        loc_d42d

000000000000d428         mov        byte [r14+r15], 0x27

                     loc_d42d:
000000000000d42d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_d400+38
000000000000d431         cmp        r13, rcx
000000000000d434         jbe        loc_d43c

000000000000d436         mov        byte [r14+r15+1], 0x24

                     loc_d43c:
000000000000d43c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_d400+52
000000000000d440         cmp        r13, rcx
000000000000d443         ja         loc_da79

                     loc_d449:
000000000000d449         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_d560+1311
000000000000d44d         mov        r8d, eax

                     loc_d450:
000000000000d450         cmp        r13, rcx                                    ; CODE XREF=sub_d400+33
000000000000d453         jbe        loc_d45a

000000000000d455         mov        byte [r14+rcx], 0x5c

                     loc_d45a:
000000000000d45a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_d400+83
000000000000d45f         lea        r15, qword [rcx+1]
000000000000d463         je         loc_da69

000000000000d469         lea        rax, qword [rbp+1]
000000000000d46d         cmp        rax, r11
000000000000d470         jae        loc_d48b

000000000000d472         mov        rax, qword [rsp+arg_8]
000000000000d477         movzx      eax, byte [rax+rbp+1]
000000000000d47c         mov        byte [rsp+arg_20], al
000000000000d480         sub        eax, 0x30
000000000000d483         cmp        al, 0x9
000000000000d485         jbe        loc_dcb9

                     loc_d48b:
000000000000d48b         mov        eax, r12d                                   ; CODE XREF=sub_d400+112
000000000000d48e         mov        ebx, 0x30
000000000000d493         xor        r12d, r12d
000000000000d496         jmp        sub_d010+56
                        ; endp
000000000000d49b         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_d4a0:
000000000000d4a0         cmp        dword [rsp+arg_0], 0x2
000000000000d4a5         mov        r12d, r10d
000000000000d4a8         sete       dl
000000000000d4ab         xor        r10d, r10d
000000000000d4ae         xor        eax, eax
000000000000d4b0         jmp        sub_d010+56
                        ; endp
000000000000d4b5         nop        dword [rax]
000000000000d4b8         cmp        dword [rsp+8], 0x2
000000000000d4bd         sete       dl
000000000000d4c0         xor        r10d, r10d
000000000000d4c3         jmp        sub_d280+8
000000000000d4c8         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d4d0:
000000000000d4d0         cmp        dword [rsp+8], 0x2
000000000000d4d5         sete       dl
000000000000d4d8         xor        r10d, r10d
000000000000d4db         xor        r12d, r12d
000000000000d4de         jmp        sub_d280+17
                        ; endp
000000000000d4e3         nop        dword [rax+rax]
000000000000d4e8         cmp        dword [rsp+8], 0x2
000000000000d4ed         mov        r12d, r10d
000000000000d4f0         mov        ebx, 0x20
000000000000d4f5         sete       dl
000000000000d4f8         xor        r10d, r10d
000000000000d4fb         jmp        sub_d280+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d500:
000000000000d500         mov        edx, 0xd
000000000000d505         xor        r10d, r10d
000000000000d508         mov        ebx, 0x72
000000000000d50d         jmp        sub_d110+50
                        ; endp
000000000000d512         nop        word [rax+rax]
000000000000d518         mov        ebx, 0x76
000000000000d51d         jmp        sub_d110+176
000000000000d522         nop        word [rax+rax]
000000000000d528         mov        edx, 0x9
000000000000d52d         xor        r10d, r10d
000000000000d530         mov        ebx, 0x74
000000000000d535         jmp        sub_d110+50
000000000000d53a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_d540:
000000000000d540         mov        ebx, 0x62
000000000000d545         jmp        sub_d110+176
                        ; endp
000000000000d54a         nop        word [rax+rax]

                     loc_d550:
000000000000d550         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
000000000000d553         jmp        loc_cff0
000000000000d558         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_d560:
000000000000d560         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_d110+125
000000000000d565         jne        sub_d560+2416
                        ; endp

                     loc_d56b:
000000000000d56b         add        rbp, 0x1                                    ; CODE XREF=sub_d110+159
000000000000d56f         mov        eax, r8d
000000000000d572         xor        r12d, r12d
000000000000d575         mov        ebx, 0x5c
000000000000d57a         jmp        sub_d010+124
                        ; endp
000000000000d57f         align      128

                     loc_d580:
000000000000d580         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
000000000000d585         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000d58a         mov        r12d, r8d
000000000000d58d         mov        rbp, r11
000000000000d590         sete       dl
000000000000d593         mov        eax, ebx
000000000000d595         test       r15, r15
000000000000d598         sete       cl
000000000000d59b         and        eax, edx
000000000000d59d         and        al, cl
000000000000d59f         jne        loc_e006

000000000000d5a5         mov        eax, ebx
000000000000d5a7         xor        eax, 0x1
000000000000d5aa         and        dl, al
000000000000d5ac         je         loc_df1c

000000000000d5b2         cmp        byte [rsp+0xe8+var_6C], 0x0
000000000000d5b7         je         loc_df1a

000000000000d5bd         cmp        byte [rsp+0xe8+var_DA], 0x0
000000000000d5c2         jne        loc_dfbd

000000000000d5c8         test       r13, r13
000000000000d5cb         sete       al
000000000000d5ce         cmp        qword [rsp+0xe8+var_98], 0x0
000000000000d5d4         setne      dl
000000000000d5d7         and        al, dl
000000000000d5d9         je         loc_dffc

000000000000d5df         mov        r13, qword [rsp+0xe8+var_98]

                     loc_d5e4:
000000000000d5e4         lea        rbx, qword [aLibs+29]                       ; 0x16aa5, CODE XREF=sub_d560+2781
000000000000d5eb         mov        byte [r14], 0x27
000000000000d5ef         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000d5f7         mov        r15d, 0x1
000000000000d5fd         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000d606         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000d60b         mov        qword [rsp+0xe8+var_A0], rbx
000000000000d610         mov        byte [rsp+0xe8+var_6C], al
000000000000d614         jmp        loc_cef3
000000000000d619         align      32

                     loc_d620:
000000000000d620         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_d110+8
000000000000d625         jne        sub_d560+2416

000000000000d62b         test       r13, r13
000000000000d62e         je         loc_da30

000000000000d634         xor        edx, edx
000000000000d636         cmp        qword [rsp+arg_48], 0x0
000000000000d63c         jne        loc_da30

                     loc_d642:
000000000000d642         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_d560+1284, sub_d560+2794
000000000000d647         add        r15, 0x3
000000000000d64b         xor        eax, eax
000000000000d64d         mov        byte [rsp+arg_74], r12b
000000000000d652         xor        r8d, r8d
000000000000d655         mov        r13, rdx
000000000000d658         mov        ebx, 0x27
000000000000d65d         jmp        sub_d010+105
                        ; endp
000000000000d662         align      8

                     loc_d668:
000000000000d668         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_d0e0+19
000000000000d66d         je         loc_d690

000000000000d66f         lea        rcx, qword [rbp+2]
000000000000d673         cmp        rcx, r11
000000000000d676         jae        loc_d690

000000000000d678         mov        rax, qword [rsp+arg_8]
000000000000d67d         cmp        byte [rax+rbp+1], 0x3f
000000000000d682         je         loc_de12

000000000000d688         nop        dword [rax+rax]

                     loc_d690:
000000000000d690         xor        edx, edx                                    ; CODE XREF=sub_d560+269, sub_d560+278, sub_d560+2233, sub_d560+2253
000000000000d692         xor        r12d, r12d
000000000000d695         xor        eax, eax
000000000000d697         mov        ebx, 0x3f
000000000000d69c         jmp        sub_d010+56
                        ; endp
000000000000d6a1         align      8

                     loc_d6a8:
000000000000d6a8         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_d0e0+10
000000000000d6ad         jne        loc_ded0

000000000000d6b3         xor        r12d, r12d
000000000000d6b6         xor        eax, eax
000000000000d6b8         mov        ebx, 0x3f
000000000000d6bd         jmp        sub_d010+105
                        ; endp
000000000000d6c2         align      8

                     loc_d6c8:
000000000000d6c8         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_d300+30
000000000000d6d0         cmp        r11, 0xffffffffffffffff
000000000000d6d4         mov        qword [rsp+0xe8+var_48], 0x0
000000000000d6e0         mov        qword [rsp+0xe8+var_C0], rax
000000000000d6e5         jne        loc_d714

000000000000d6e7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
000000000000d6ec         mov        byte [rsp+0xe8+var_A8], r8b
000000000000d6f1         mov        byte [rsp+0xe8+var_B0], r10b
000000000000d6f6         mov        qword [rsp+0xe8+var_B8], r9
000000000000d6fb         call       j_strlen                                    ; strlen
000000000000d700         movzx      r8d, byte [rsp+0xe8+var_A8]
000000000000d706         movzx      r10d, byte [rsp+0xe8+var_B0]
000000000000d70c         mov        r11, rax
000000000000d70f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_d714:
000000000000d714         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_d560+389
000000000000d71c         xor        ecx, ecx
000000000000d71e         mov        byte [rsp+0xe8+var_6A], bl
000000000000d722         mov        byte [rsp+0xe8+var_6B], r8b
000000000000d727         mov        rbx, rcx
000000000000d72a         mov        qword [rsp+0xe8+var_60], r9
000000000000d732         mov        qword [rsp+0xe8+var_B0], rax
000000000000d737         mov        byte [rsp+0xe8+var_69], r10b
000000000000d73c         mov        qword [rsp+0xe8+var_68], r15
000000000000d744         mov        qword [rsp+0xe8+var_A8], r14
000000000000d749         mov        qword [rsp+0xe8+var_78], r13
000000000000d74e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_d753:
000000000000d753         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_d560+623
000000000000d758         lea        r14, qword [rbp+rbx]
000000000000d75d         mov        rdx, qword [rsp+0xe8+var_B8]
000000000000d762         mov        rcx, qword [rsp+0xe8+var_C0]
000000000000d767         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000d76c         lea        r13, qword [rax+r14]
000000000000d770         sub        rdx, r14
000000000000d773         mov        rsi, r13
000000000000d776         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000d77b         test       rax, rax
000000000000d77e         mov        r15, rax
000000000000d781         je         loc_d7d1

000000000000d783         cmp        rax, 0xffffffffffffffff
000000000000d787         je         loc_dda5

000000000000d78d         cmp        rax, 0xfffffffffffffffe
000000000000d791         je         loc_dd31

000000000000d797         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000d79c         sete       al
000000000000d79f         and        al, byte [rsp+0xe8+var_D9]
000000000000d7a3         jne        loc_d940

                     loc_d7a9:
000000000000d7a9         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_d560+996, sub_d560+1031
000000000000d7b0         call       j_iswprint                                  ; iswprint
000000000000d7b5         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
000000000000d7ba         test       eax, eax
000000000000d7bc         mov        eax, 0x0
000000000000d7c1         cmove      r12d, eax
000000000000d7c5         add        rbx, r15
000000000000d7c8         call       j_mbsinit                                   ; mbsinit
000000000000d7cd         test       eax, eax
000000000000d7cf         je         loc_d753

                     loc_d7d1:
000000000000d7d1         mov        edx, r12d                                   ; CODE XREF=sub_d560+545
000000000000d7d4         mov        rdi, rbx
000000000000d7d7         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000d7dd         xor        edx, 0x1
000000000000d7e0         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000d7e5         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000d7eb         and        dl, byte [rsp+0xe8+var_DB]
000000000000d7ef         mov        r15, qword [rsp+0xe8+var_68]
000000000000d7f7         mov        r14, qword [rsp+0xe8+var_A8]
000000000000d7fc         mov        r13, qword [rsp+0xe8+var_78]
000000000000d801         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_d806:
000000000000d806         cmp        rdi, 0x1                                    ; CODE XREF=sub_d560+2112, sub_d560+2168
000000000000d80a         jbe        loc_de0b

                     loc_d810:
000000000000d810         mov        rcx, rdi                                    ; CODE XREF=sub_d560+1961
000000000000d813         xor        esi, esi
000000000000d815         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000d81b         add        rcx, rbp
000000000000d81e         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000d823         jmp        loc_d8de
000000000000d828         align      16

                     loc_d830:
000000000000d830         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_d560+896
000000000000d835         sete       al
000000000000d838         test       r9b, r9b
000000000000d83b         jne        loc_dcf0

000000000000d841         mov        esi, r8d
000000000000d844         xor        esi, 0x1
000000000000d847         and        al, sil
000000000000d84a         je         loc_d87b

000000000000d84c         cmp        r13, r15
000000000000d84f         jbe        loc_d856

000000000000d851         mov        byte [r14+r15], 0x27

                     loc_d856:
000000000000d856         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_d560+751
000000000000d85a         cmp        r13, rsi
000000000000d85d         jbe        loc_d865

000000000000d85f         mov        byte [r14+r15+1], 0x24

                     loc_d865:
000000000000d865         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_d560+765
000000000000d869         cmp        r13, rsi
000000000000d86c         jbe        loc_d874

000000000000d86e         mov        byte [r14+r15+2], 0x27

                     loc_d874:
000000000000d874         add        r15, 0x3                                    ; CODE XREF=sub_d560+780
000000000000d878         mov        r8d, eax

                     loc_d87b:
000000000000d87b         cmp        r13, r15                                    ; CODE XREF=sub_d560+746
000000000000d87e         jbe        loc_d885

000000000000d880         mov        byte [r14+r15], 0x5c

                     loc_d885:
000000000000d885         lea        rax, qword [r15+1]                          ; CODE XREF=sub_d560+798
000000000000d889         cmp        r13, rax
000000000000d88c         jbe        loc_d89b

000000000000d88e         mov        eax, ebx
000000000000d890         shr        al, 0x6
000000000000d893         add        eax, 0x30
000000000000d896         mov        byte [r14+r15+1], al

                     loc_d89b:
000000000000d89b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_d560+812
000000000000d89f         cmp        r13, rax
000000000000d8a2         jbe        loc_d8b4

000000000000d8a4         mov        eax, ebx
000000000000d8a6         shr        al, 0x3
000000000000d8a9         and        eax, 0x7
000000000000d8ac         add        eax, 0x30
000000000000d8af         mov        byte [r14+r15+2], al

                     loc_d8b4:
000000000000d8b4         and        ebx, 0x7                                    ; CODE XREF=sub_d560+834
000000000000d8b7         add        rbp, 0x1
000000000000d8bb         add        r15, 0x3
000000000000d8bf         add        ebx, 0x30
000000000000d8c2         cmp        rbp, rcx
000000000000d8c5         jae        loc_d0b0

000000000000d8cb         mov        esi, edx

                     loc_d8cd:
000000000000d8cd         cmp        r13, r15                                    ; CODE XREF=sub_d560+985, sub_d560+1969
000000000000d8d0         jbe        loc_d8d6

000000000000d8d2         mov        byte [r14+r15], bl

                     loc_d8d6:
000000000000d8d6         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_d560+880
000000000000d8da         add        r15, 0x1

                     loc_d8de:
000000000000d8de         test       dl, dl                                      ; CODE XREF=sub_d560+707
000000000000d8e0         jne        loc_d830

000000000000d8e6         mov        eax, esi
000000000000d8e8         xor        eax, 0x1
000000000000d8eb         and        eax, r8d
000000000000d8ee         test       r10b, r10b
000000000000d8f1         je         loc_d901

000000000000d8f3         cmp        r13, r15
000000000000d8f6         jbe        loc_d8fd

000000000000d8f8         mov        byte [r14+r15], 0x5c

                     loc_d8fd:
000000000000d8fd         add        r15, 0x1                                    ; CODE XREF=sub_d560+918

                     loc_d901:
000000000000d901         add        rbp, 0x1                                    ; CODE XREF=sub_d560+913
000000000000d905         cmp        rbp, rcx
000000000000d908         jae        loc_d08c

000000000000d90e         test       al, al
000000000000d910         je         loc_dd0e

000000000000d916         cmp        r13, r15
000000000000d919         jbe        loc_d920

000000000000d91b         mov        byte [r14+r15], 0x27

                     loc_d920:
000000000000d920         lea        rax, qword [r15+1]                          ; CODE XREF=sub_d560+953
000000000000d924         cmp        r13, rax
000000000000d927         jbe        loc_d92f

000000000000d929         mov        byte [r14+r15+1], 0x27

                     loc_d92f:
000000000000d92f         add        r15, 0x2                                    ; CODE XREF=sub_d560+967
000000000000d933         xor        r10d, r10d
000000000000d936         xor        r8d, r8d
000000000000d939         jmp        loc_d8cd
000000000000d93b         align      64

                     loc_d940:
000000000000d940         cmp        r15, 0x1                                    ; CODE XREF=sub_d560+579
000000000000d944         je         loc_d7a9

000000000000d94a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000d94f         lea        rcx, qword [rdi+r15]
000000000000d953         lea        rdx, qword [rdi+r14+1]
000000000000d958         lea        r8, qword [rcx+r14]
000000000000d95c         jmp        loc_d96d
000000000000d95e         align      32

                     loc_d960:
000000000000d960         add        rdx, 0x1                                    ; CODE XREF=sub_d560+1046, sub_d560+1072
000000000000d964         cmp        r8, rdx
000000000000d967         je         loc_d7a9

                     loc_d96d:
000000000000d96d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_d560+1020
000000000000d970         sub        ecx, 0x5b
000000000000d973         cmp        cl, 0x21
000000000000d976         ja         loc_d960

000000000000d978         mov        esi, 0x1
000000000000d97d         shl        rsi, cl
000000000000d980         mov        rcx, rsi
000000000000d983         movabs     rsi, 0x20000002b
000000000000d98d         test       rcx, rsi
000000000000d990         je         loc_d960

000000000000d992         mov        r14, qword [rsp+0xe8+var_A8]
000000000000d997         mov        r13, qword [rsp+0xe8+var_78]
000000000000d99c         mov        rbp, qword [rsp+0xe8+var_B8]
000000000000d9a1         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_d9a9:
000000000000d9a9         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_d560+1227, sub_d560+1948, sub_d560+2585, sub_d560+2734
000000000000d9ae         je         loc_d9c0

000000000000d9b0         test       al, al
000000000000d9b2         mov        eax, 0x4
000000000000d9b7         cmove      eax, dword [rsp+0xe8+var_E0]
000000000000d9bc         mov        dword [rsp+0xe8+var_E0], eax

                     loc_d9c0:
000000000000d9c0         sub        rsp, 0x8                                    ; CODE XREF=sub_d560+1102
000000000000d9c4         mov        rcx, rbp
000000000000d9c7         mov        rsi, r13
000000000000d9ca         push       qword [rsp+0xf0+var_88]
000000000000d9ce         push       qword [rsp+0xf8+var_80]
000000000000d9d2         mov        rdi, r14
000000000000d9d5         push       0x0
000000000000d9d7         mov        r9d, dword [rsp+0x108+var_70]
000000000000d9df         mov        r8d, dword [rsp+0x108+var_E0]
000000000000d9e4         mov        rdx, qword [rsp+0x108+var_D8]
000000000000d9e9         and        r9d, 0xfffffffd
000000000000d9ed         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000d9f2         add        rsp, 0x20
000000000000d9f6         mov        r15, rax

                     loc_d9f9:
000000000000d9f9         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_d560+2549, sub_d560+2560, sub_d560+2711
000000000000da01         xor        rbx, qword [fs:0x28]
000000000000da0a         mov        rax, r15
000000000000da0d         jne        loc_e013

000000000000da13         add        rsp, 0xb8
000000000000da1a         pop        rbx
000000000000da1b         pop        rbp
000000000000da1c         pop        r12
000000000000da1e         pop        r13
000000000000da20         pop        r14
000000000000da22         pop        r15
000000000000da24         ret
                        ; endp
000000000000da25         align      8

                     loc_da28:
000000000000da28         mov        rbp, r11                                    ; CODE XREF=sub_d110+194
000000000000da2b         jmp        loc_d9a9

                     loc_da30:
000000000000da30         cmp        r13, r15                                    ; CODE XREF=sub_d560+206, sub_d560+220
000000000000da33         jbe        loc_da3a

000000000000da35         mov        byte [r14+r15], 0x27

                     loc_da3a:
000000000000da3a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_d560+1235
000000000000da3e         cmp        r13, rax
000000000000da41         jbe        loc_da49

000000000000da43         mov        byte [r14+r15+1], 0x5c

                     loc_da49:
000000000000da49         lea        rax, qword [r15+2]                          ; CODE XREF=sub_d560+1249
000000000000da4d         cmp        r13, rax
000000000000da50         jbe        loc_e042

000000000000da56         mov        rdx, r13
000000000000da59         mov        byte [r14+r15+2], 0x27
000000000000da5f         mov        r13, qword [rsp+arg_48]
000000000000da64         jmp        loc_d642

                     loc_da69:
000000000000da69         mov        eax, r12d                                   ; CODE XREF=sub_d400+99
000000000000da6c         mov        ebx, 0x30
000000000000da71         xor        r12d, r12d
000000000000da74         jmp        sub_d010+105
                        ; endp

                     loc_da79:
000000000000da79         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_d400+67
000000000000da7f         jmp        loc_d449

                     loc_da84:
000000000000da84         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
000000000000da86         jne        loc_ceb3

000000000000da8c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_da91:
000000000000da91         test       r13, r13                                    ; CODE XREF=sub_d560+2749
000000000000da94         jne        loc_e02a

000000000000da9a         lea        rax, qword [aLibs+29]                       ; 0x16aa5
000000000000daa1         mov        qword [rsp+0xe8+var_98], 0x0
000000000000daaa         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000daaf         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000dab4         xor        r12d, r12d
000000000000dab7         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000dabc         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000dac5         mov        qword [rsp+0xe8+var_A0], rax
000000000000daca         mov        r15d, 0x1
000000000000dad0         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000dad8         jmp        loc_cef3
000000000000dadd         align      32

                     loc_dae0:
000000000000dae0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
000000000000dae2         jne        loc_dedd

000000000000dae8         test       r13, r13
000000000000daeb         je         loc_dd16

000000000000daf1         mov        byte [r14], 0x22
000000000000daf5         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000dafa         xor        r12d, r12d
000000000000dafd         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000db02         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_db0b:
000000000000db0b         lea        rax, qword [aLibs+27]                       ; 0x16aa3, CODE XREF=sub_d560+1996
000000000000db12         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000db17         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000db1c         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000db25         mov        r15d, 0x1
000000000000db2b         mov        qword [rsp+0xe8+var_A0], rax
000000000000db30         jmp        loc_cef3

                     loc_db35:
000000000000db35         lea        rax, qword [aLibs+27]                       ; case 6, 0x16aa3, CODE XREF=quotearg_buffer_restyled+145
000000000000db3c         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000db41         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000db46         xor        r12d, r12d
000000000000db49         mov        qword [rsp+0xe8+var_98], 0x0
000000000000db52         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000db57         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000db5c         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000db65         xor        r15d, r15d
000000000000db68         mov        qword [rsp+0xe8+var_A0], rax
000000000000db6d         mov        dword [rsp+0xe8+var_E0], 0x5
000000000000db75         jmp        loc_cef3

                     loc_db7a:
000000000000db7a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000db7f         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000db84         xor        r12d, r12d
000000000000db87         mov        qword [rsp+0xe8+var_98], 0x0
000000000000db90         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000db95         xor        r15d, r15d
000000000000db98         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000db9d         mov        qword [rsp+0xe8+var_D0], 0x0
000000000000dba6         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000dbaf         jmp        loc_cef3

                     loc_dbb4:
000000000000dbb4         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
000000000000dbb9         je         loc_dc11

000000000000dbbb         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0x16aa7
000000000000dbc2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000dbc4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000dbc9         call       j_dcgettext                                 ; dcgettext
000000000000dbce         mov        rcx, rax
000000000000dbd1         mov        qword [rsp+0xe8+var_80], rax
000000000000dbd6         lea        rax, qword [aLibs+31]                       ; 0x16aa7
000000000000dbdd         cmp        rcx, rax
000000000000dbe0         je         loc_df7e

                     loc_dbe6:
000000000000dbe6         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x16aa5, CODE XREF=sub_d560+2607
000000000000dbed         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000dbef         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000dbf4         call       j_dcgettext                                 ; dcgettext
000000000000dbf9         mov        rcx, rax
000000000000dbfc         mov        qword [rsp+0xe8+var_88], rax
000000000000dc01         lea        rax, qword [aLibs+29]                       ; 0x16aa5
000000000000dc08         cmp        rcx, rax
000000000000dc0b         je         loc_df94

                     loc_dc11:
000000000000dc11         xor        r15d, r15d                                  ; CODE XREF=sub_d560+1625, sub_d560+2629
000000000000dc14         test       ebx, ebx
000000000000dc16         je         loc_dddd

                     loc_dc1c:
000000000000dc1c         test       ebx, ebx                                    ; CODE XREF=sub_d560+2183, sub_d560+2214
000000000000dc1e         mov        rbx, qword [rsp+0xe8+var_88]
000000000000dc23         setne      byte [rsp+0xe8+var_D9]
000000000000dc28         xor        r12d, r12d
000000000000dc2b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000dc2e         call       j_strlen                                    ; strlen
000000000000dc33         mov        qword [rsp+0xe8+var_A0], rbx
000000000000dc38         mov        qword [rsp+0xe8+var_D0], rax
000000000000dc3d         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000dc42         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000dc47         mov        qword [rsp+0xe8+var_98], 0x0
000000000000dc50         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000dc55         jmp        loc_cef3

                     loc_dc5a:
000000000000dc5a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000dc5f         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000dc64         xor        r12d, r12d
000000000000dc67         mov        qword [rsp+0xe8+var_98], 0x0
000000000000dc70         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000dc75         xor        r15d, r15d
000000000000dc78         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000dc7d         mov        qword [rsp+0xe8+var_D0], 0x0
000000000000dc86         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000dc8f         jmp        loc_cef3

                     loc_dc94:
000000000000dc94         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
000000000000dc99         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000dc9e         xor        r12d, r12d
000000000000dca1         mov        qword [rsp+0xe8+var_98], 0x0
000000000000dcaa         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000dcaf         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000dcb4         jmp        loc_ced3

                     loc_dcb9:
000000000000dcb9         cmp        r13, r15                                    ; CODE XREF=sub_d400+133
000000000000dcbc         jbe        loc_dcc3

000000000000dcbe         mov        byte [r14+r15], 0x30

                     loc_dcc3:
000000000000dcc3         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_d560+1884
000000000000dcc7         cmp        r13, rax
000000000000dcca         jbe        loc_dcd2

000000000000dccc         mov        byte [r14+rcx+2], 0x30

                     loc_dcd2:
000000000000dcd2         mov        eax, r12d                                   ; CODE XREF=sub_d560+1898
000000000000dcd5         lea        r15, qword [rcx+3]
000000000000dcd9         xor        r12d, r12d
000000000000dcdc         mov        ebx, 0x30
000000000000dce1         jmp        sub_d010+56
                        ; endp
000000000000dce6         align      16

                     loc_dcf0:
000000000000dcf0         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_d560+731
000000000000dcf5         mov        rbp, r11
000000000000dcf8         mov        byte [rsp+0xe8+var_DB], bl
000000000000dcfc         jmp        loc_d9a9

                     loc_dd01:
000000000000dd01         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_d300+105
000000000000dd06         xor        r12d, r12d
000000000000dd09         jmp        loc_d810

                     loc_dd0e:
000000000000dd0e         xor        r10d, r10d                                  ; CODE XREF=sub_d560+944
000000000000dd11         jmp        loc_d8cd

                     loc_dd16:
000000000000dd16         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_d560+1419
000000000000dd1f         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000dd24         xor        r12d, r12d
000000000000dd27         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000dd2c         jmp        loc_db0b

                     loc_dd31:
000000000000dd31         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_d560+561
000000000000dd36         mov        rsi, r14
000000000000dd39         mov        rcx, r13
000000000000dd3c         mov        rax, rbx
000000000000dd3f         mov        rdi, rbx
000000000000dd42         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000dd48         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000dd4d         mov        r9, qword [rsp+0xe8+var_60]
000000000000dd55         cmp        rsi, r11
000000000000dd58         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000dd5e         mov        r15, qword [rsp+0xe8+var_68]
000000000000dd66         mov        r14, qword [rsp+0xe8+var_A8]
000000000000dd6b         mov        r13, qword [rsp+0xe8+var_78]
000000000000dd70         jae        loc_dd98

000000000000dd72         cmp        byte [rcx], 0x0
000000000000dd75         jne        loc_dd87

000000000000dd77         jmp        loc_dd98
000000000000dd79         align      128

                     loc_dd80:
000000000000dd80         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_d560+2099
000000000000dd85         je         loc_dd95

                     loc_dd87:
000000000000dd87         add        rax, 0x1                                    ; CODE XREF=sub_d560+2069
000000000000dd8b         lea        rdx, qword [rbp+rax]
000000000000dd90         cmp        r11, rdx
000000000000dd93         ja         loc_dd80

                     loc_dd95:
000000000000dd95         mov        rdi, rax                                    ; CODE XREF=sub_d560+2085

                     loc_dd98:
000000000000dd98         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_d560+2064, sub_d560+2071
000000000000dd9d         xor        r12d, r12d
000000000000dda0         jmp        loc_d806

                     loc_dda5:
000000000000dda5         mov        rdi, rbx                                    ; CODE XREF=sub_d560+551
000000000000dda8         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000ddae         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000ddb3         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000ddb9         mov        r15, qword [rsp+0xe8+var_68]
000000000000ddc1         xor        r12d, r12d
000000000000ddc4         mov        r14, qword [rsp+0xe8+var_A8]
000000000000ddc9         mov        r13, qword [rsp+0xe8+var_78]
000000000000ddce         mov        r11, qword [rsp+0xe8+var_B8]
000000000000ddd3         movzx      edx, byte [rsp+0xe8+var_DB]
000000000000ddd8         jmp        loc_d806

                     loc_dddd:
000000000000dddd         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_d560+1718
000000000000dde2         movzx      eax, byte [rdx]
000000000000dde5         test       al, al
000000000000dde7         je         loc_dc1c

000000000000dded         nop        dword [rax]

                     loc_ddf0:
000000000000ddf0         cmp        r13, r15                                    ; CODE XREF=sub_d560+2212
000000000000ddf3         jbe        loc_ddf9

000000000000ddf5         mov        byte [r14+r15], al

                     loc_ddf9:
000000000000ddf9         add        r15, 0x1                                    ; CODE XREF=sub_d560+2195
000000000000ddfd         movzx      eax, byte [rdx+r15]
000000000000de02         test       al, al
000000000000de04         jne        loc_ddf0

000000000000de06         jmp        loc_dc1c

                     loc_de0b:
000000000000de0b         mov        eax, edx                                    ; CODE XREF=sub_d560+682
000000000000de0d         jmp        loc_d367

                     loc_de12:
000000000000de12         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_d560+290
000000000000de16         cmp        bl, 0x3e
000000000000de19         ja         loc_d690

000000000000de1f         movabs     rax, 0x7000a38200000000
000000000000de29         bt         rax, rbx
000000000000de2d         jae        loc_d690

000000000000de33         cmp        byte [rsp+arg_7], 0x0
000000000000de38         jne        loc_e022

000000000000de3e         cmp        r13, r15
000000000000de41         jbe        loc_de48

000000000000de43         mov        byte [r14+r15], 0x3f

                     loc_de48:
000000000000de48         lea        rax, qword [r15+1]                          ; CODE XREF=sub_d560+2273
000000000000de4c         cmp        r13, rax
000000000000de4f         jbe        loc_de57

000000000000de51         mov        byte [r14+r15+1], 0x22

                     loc_de57:
000000000000de57         lea        rax, qword [r15+2]                          ; CODE XREF=sub_d560+2287
000000000000de5b         cmp        r13, rax
000000000000de5e         jbe        loc_de66

000000000000de60         mov        byte [r14+r15+2], 0x22

                     loc_de66:
000000000000de66         lea        rax, qword [r15+3]                          ; CODE XREF=sub_d560+2302
000000000000de6a         cmp        r13, rax
000000000000de6d         jbe        loc_de75

000000000000de6f         mov        byte [r14+r15+3], 0x3f

                     loc_de75:
000000000000de75         add        r15, 0x4                                    ; CODE XREF=sub_d560+2317
000000000000de79         xor        edx, edx
000000000000de7b         xor        r12d, r12d
000000000000de7e         xor        eax, eax
000000000000de80         mov        rbp, rcx
000000000000de83         jmp        sub_d010+56
                        ; endp

                     loc_de88:
000000000000de88         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000de8a         je         loc_e018

000000000000de90         lea        rax, qword [aLibs+29]                       ; 0x16aa5
000000000000de97         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000de9c         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000dea1         xor        r12d, r12d
000000000000dea4         mov        qword [rsp+0xe8+var_98], 0x0
000000000000dead         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000deb2         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000deb7         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000dec0         xor        r15d, r15d
000000000000dec3         mov        qword [rsp+0xe8+var_A0], rax
000000000000dec8         jmp        loc_cef3
000000000000decd         align      16

                     loc_ded0:
000000000000ded0         mov        rbp, r11                                    ; CODE XREF=sub_d560+333
000000000000ded3         movzx      eax, byte [rsp+arg_7]
000000000000ded8         jmp        sub_d560+1097
                        ; endp

                     loc_dedd:
000000000000dedd         lea        rax, qword [aLibs+27]                       ; 0x16aa3, CODE XREF=sub_d560+1410
000000000000dee4         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000dee9         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000deee         xor        r12d, r12d
000000000000def1         mov        qword [rsp+0xe8+var_98], 0x0
000000000000defa         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000deff         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000df04         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000df0d         xor        r15d, r15d
000000000000df10         mov        qword [rsp+0xe8+var_A0], rax
000000000000df15         jmp        loc_cef3

                     loc_df1a:
000000000000df1a         mov        eax, edx                                    ; CODE XREF=sub_d560+87

                     loc_df1c:
000000000000df1c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_d560+76, sub_d560+2721
000000000000df21         test       rbx, rbx
000000000000df24         je         loc_df52

000000000000df26         test       al, al
000000000000df28         je         loc_df52

000000000000df2a         movzx      ecx, byte [rbx]
000000000000df2d         mov        rax, rbx
000000000000df30         test       cl, cl
000000000000df32         je         loc_df52

000000000000df34         mov        rdx, r15
000000000000df37         sub        rax, r15

                     loc_df3a:
000000000000df3a         cmp        r13, rdx                                    ; CODE XREF=sub_d560+2541
000000000000df3d         jbe        loc_df43

000000000000df3f         mov        byte [r14+rdx], cl

                     loc_df43:
000000000000df43         add        rdx, 0x1                                    ; CODE XREF=sub_d560+2525
000000000000df47         movzx      ecx, byte [rax+rdx]
000000000000df4b         test       cl, cl
000000000000df4d         jne        loc_df3a

000000000000df4f         mov        r15, rdx

                     loc_df52:
000000000000df52         cmp        r13, r15                                    ; CODE XREF=sub_d560+2500, sub_d560+2504, sub_d560+2514
000000000000df55         jbe        loc_d9f9

000000000000df5b         mov        byte [r14+r15], 0x0
000000000000df60         jmp        loc_d9f9

                     loc_df65:
000000000000df65         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000df6a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000df6f         mov        rbp, r11
000000000000df72         sete       al
000000000000df75         mov        byte [rsp+0xe8+var_DB], bl
000000000000df79         jmp        loc_d9a9

                     loc_df7e:
000000000000df7e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_d560+1664
000000000000df82         mov        rdi, rcx
000000000000df85         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000df8a         mov        qword [rsp+0xe8+var_80], rax
000000000000df8f         jmp        loc_dbe6

                     loc_df94:
000000000000df94         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_d560+1707
000000000000df98         mov        rdi, rcx
000000000000df9b         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000dfa0         mov        qword [rsp+0xe8+var_88], rax
000000000000dfa5         jmp        loc_dc11

                     loc_dfaa:
000000000000dfaa         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_d400+16
000000000000dfaf         mov        rbp, r11
000000000000dfb2         mov        eax, edx
000000000000dfb4         mov        byte [rsp+arg_5], bl
000000000000dfb8         jmp        sub_d560+1097
                        ; endp

                     loc_dfbd:
000000000000dfbd         sub        rsp, 0x8                                    ; CODE XREF=sub_d560+98
000000000000dfc1         mov        r8d, 0x5
000000000000dfc7         mov        rcx, r11
000000000000dfca         push       qword [rsp+0xf0+var_88]
000000000000dfce         push       qword [rsp+0xf8+var_80]
000000000000dfd2         mov        rdi, r14
000000000000dfd5         push       qword [rsp+0x100+var_C8]
000000000000dfd9         mov        r9d, dword [rsp+0x108+var_70]
000000000000dfe1         mov        rdx, qword [rsp+0x108+var_D8]
000000000000dfe6         mov        rsi, qword [rsp+0x108+var_98]
000000000000dfeb         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000dff0         add        rsp, 0x20
000000000000dff4         mov        r15, rax
000000000000dff7         jmp        loc_d9f9

                     loc_dffc:
000000000000dffc         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_d560+121
000000000000e001         jmp        loc_df1c

                     loc_e006:
000000000000e006         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_d560+63
000000000000e00e         jmp        loc_d9a9

                     loc_e013:
000000000000e013         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_d560+1197
                        ; endp

                     loc_e018:
000000000000e018         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_d560+2346
000000000000e01d         jmp        loc_da91

                     loc_e022:
000000000000e022         mov        rbp, r11                                    ; CODE XREF=sub_d560+2264
000000000000e025         jmp        sub_d560+1120
                        ; endp

                     loc_e02a:
000000000000e02a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_d560+1332
000000000000e02f         xor        eax, eax
000000000000e031         xor        r12d, r12d
000000000000e034         mov        qword [rsp+0xe8+var_98], 0x0
000000000000e03d         jmp        loc_d5e4

                     loc_e042:
000000000000e042         mov        rdx, r13                                    ; CODE XREF=sub_d560+1264
000000000000e045         mov        r13, qword [rsp+arg_48]
000000000000e04a         jmp        loc_d642

                     loc_e04f:
000000000000e04f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
000000000000e054         align      32                                          ; End of unwind block (FDE at 0x191a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
000000000000e060         push       r15                                         ; Begin of unwind block (FDE at 0x19220), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
000000000000e062         push       r14
000000000000e064         movsxd     r15, edi
000000000000e067         push       r13
000000000000e069         push       r12
000000000000e06b         mov        r14, rdx
000000000000e06e         push       rbp
000000000000e06f         push       rbx
000000000000e070         mov        rbp, rcx
000000000000e073         sub        rsp, 0x28
000000000000e077         mov        qword [rsp+0x58+var_50], rsi
000000000000e07c         call       j___errno_location                          ; __errno_location
000000000000e081         mov        r13, rax
000000000000e084         mov        eax, dword [rax]
000000000000e086         test       r15d, r15d
000000000000e089         mov        rbx, qword [slotvec]                        ; slotvec
000000000000e090         mov        dword [rsp+0x58+var_40], eax
000000000000e094         js         loc_e201

000000000000e09a         cmp        dword [nslots], r15d                        ; nslots
000000000000e0a1         jg         loc_e105

000000000000e0a3         cmp        r15d, 0x7fffffff
000000000000e0aa         je         loc_e206

000000000000e0b0         lea        r12d, dword [r15+1]
000000000000e0b4         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000e0bb         movsxd     rsi, r12d
000000000000e0be         shl        rsi, 0x4
000000000000e0c2         cmp        rbx, rax
000000000000e0c5         je         loc_e1e0

000000000000e0cb         mov        rdi, rbx                                    ; argument #1 for method xrealloc
000000000000e0ce         call       xrealloc                                    ; xrealloc
000000000000e0d3         mov        rbx, rax
000000000000e0d6         mov        qword [slotvec], rax                        ; slotvec

                     loc_e0dd:
000000000000e0dd         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
000000000000e0e4         mov        edx, r12d
000000000000e0e7         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000e0e9         sub        edx, edi
000000000000e0eb         shl        rdi, 0x4
000000000000e0ef         movsxd     rdx, edx
000000000000e0f2         add        rdi, rbx                                    ; argument "__s" for method j_memset
000000000000e0f5         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
000000000000e0f9         call       j_memset                                    ; memset
000000000000e0fe         mov        dword [nslots], r12d                        ; nslots

                     loc_e105:
000000000000e105         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
000000000000e108         shl        r15, 0x4
000000000000e10c         sub        rsp, 0x8
000000000000e110         add        rbx, r15
000000000000e113         lea        r15, qword [rbp+8]
000000000000e117         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
000000000000e11b         mov        r11, qword [rbx]
000000000000e11e         mov        r12, qword [rbx+8]
000000000000e122         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
000000000000e125         or         eax, 0x1
000000000000e128         mov        dword [rsp+0x60+var_3C], eax
000000000000e12c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000e12f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
000000000000e132         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000e135         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
000000000000e137         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
000000000000e13a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000e13f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
000000000000e142         mov        qword [rsp+0x78+var_48], r11
000000000000e147         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000e14c         add        rsp, 0x20
000000000000e150         mov        r11, qword [rsp+0x58+var_48]
000000000000e155         cmp        r11, rax
000000000000e158         ja         loc_e1c1

000000000000e15a         lea        rsi, qword [rax+1]
000000000000e15e         lea        rax, qword [slot0]                          ; slot0
000000000000e165         cmp        r12, rax
000000000000e168         mov        qword [rbx], rsi
000000000000e16b         je         loc_e17f

000000000000e16d         mov        rdi, r12
000000000000e170         mov        qword [rsp+0x58+var_48], rsi
000000000000e175         call       sub_2c80                                    ; sub_2c80
000000000000e17a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_e17f:
000000000000e17f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
000000000000e182         mov        qword [rsp+0x58+var_48], rsi
000000000000e187         call       xmalloc                                     ; xmalloc
000000000000e18c         sub        rsp, 0x8
000000000000e190         mov        qword [rbx+8], rax
000000000000e194         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
000000000000e198         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000e19b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000e19e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
000000000000e1a1         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
000000000000e1a3         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
000000000000e1a8         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000e1ab         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000e1b0         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
000000000000e1b5         mov        r12, rax
000000000000e1b8         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000e1bd         add        rsp, 0x20

                     loc_e1c1:
000000000000e1c1         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
000000000000e1c5         mov        dword [r13], eax
000000000000e1c9         add        rsp, 0x28
000000000000e1cd         mov        rax, r12
000000000000e1d0         pop        rbx
000000000000e1d1         pop        rbp
000000000000e1d2         pop        r12
000000000000e1d4         pop        r13
000000000000e1d6         pop        r14
000000000000e1d8         pop        r15
000000000000e1da         ret
                        ; endp
000000000000e1db         align      32

                     loc_e1e0:
000000000000e1e0         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
000000000000e1e2         call       xrealloc                                    ; xrealloc
000000000000e1e7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
000000000000e1ef         mov        rbx, rax
000000000000e1f2         mov        qword [slotvec], rax                        ; slotvec
000000000000e1f9         movups     xmmword [rax], xmm0
000000000000e1fc         jmp        loc_e0dd

                     loc_e201:
000000000000e201         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_e206:
000000000000e206         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_e20b:
000000000000e20b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x19220)
                     clone_quoting_options:
000000000000e210         push       r12                                         ; Begin of unwind block (FDE at 0x1928c)
000000000000e212         push       rbp
000000000000e213         push       rbx
000000000000e214         mov        rbx, rdi
000000000000e217         call       j___errno_location                          ; __errno_location
000000000000e21c         mov        r12d, dword [rax]
000000000000e21f         mov        rbp, rax
000000000000e222         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000e229         test       rbx, rbx
000000000000e22c         mov        esi, 0x38                                   ; argument #2 for method xmemdup
000000000000e231         cmove      rbx, rax
000000000000e235         mov        rdi, rbx                                    ; argument #1 for method xmemdup
000000000000e238         call       xmemdup                                     ; xmemdup
000000000000e23d         mov        dword [rbp], r12d
000000000000e241         pop        rbx
000000000000e242         pop        rbp
000000000000e243         pop        r12
000000000000e245         ret
                        ; endp
000000000000e246         align      16                                          ; End of unwind block (FDE at 0x1928c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
000000000000e250         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x192b8), default_quoting_options
000000000000e257         test       rdi, rdi
000000000000e25a         cmove      rdi, rax
000000000000e25e         mov        eax, dword [rdi]
000000000000e260         ret
                        ; endp
000000000000e261         align      16                                          ; End of unwind block (FDE at 0x192b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
000000000000e270         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x192cc), default_quoting_options
000000000000e277         test       rdi, rdi
000000000000e27a         cmove      rdi, rax
000000000000e27e         mov        dword [rdi], esi
000000000000e280         ret
                        ; endp
000000000000e281         align      16                                          ; End of unwind block (FDE at 0x192cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
000000000000e290         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x192e0), default_quoting_options
000000000000e297         test       rdi, rdi
000000000000e29a         mov        ecx, esi
000000000000e29c         cmove      rdi, rax
000000000000e2a0         mov        eax, esi
000000000000e2a2         and        ecx, 0x1f
000000000000e2a5         shr        al, 0x5
000000000000e2a8         movzx      eax, al
000000000000e2ab         lea        rdi, qword [rdi+rax*4+8]
000000000000e2b0         mov        esi, dword [rdi]
000000000000e2b2         mov        eax, esi
000000000000e2b4         shr        eax, cl
000000000000e2b6         xor        edx, eax
000000000000e2b8         and        eax, 0x1
000000000000e2bb         and        edx, 0x1
000000000000e2be         shl        edx, cl
000000000000e2c0         xor        edx, esi
000000000000e2c2         mov        dword [rdi], edx
000000000000e2c4         ret
                        ; endp
000000000000e2c5         align      16                                          ; End of unwind block (FDE at 0x192e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
000000000000e2d0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x192f4), default_quoting_options
000000000000e2d7         test       rdi, rdi
000000000000e2da         cmove      rdi, rax
000000000000e2de         mov        eax, dword [rdi+4]
000000000000e2e1         mov        dword [rdi+4], esi
000000000000e2e4         ret
                        ; endp
000000000000e2e5         align      16                                          ; End of unwind block (FDE at 0x192f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
000000000000e2f0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x19308), default_quoting_options
000000000000e2f7         test       rdi, rdi
000000000000e2fa         cmove      rdi, rax
000000000000e2fe         test       rsi, rsi
000000000000e301         mov        dword [rdi], 0xa
000000000000e307         je         loc_e317

000000000000e309         test       rdx, rdx
000000000000e30c         je         loc_e317

000000000000e30e         mov        qword [rdi+0x28], rsi
000000000000e312         mov        qword [rdi+0x30], rdx
000000000000e316         ret
                        ; endp

                     loc_e317:
000000000000e317         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
000000000000e31b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
000000000000e320         push       r15                                         ; End of unwind block (FDE at 0x19308), Begin of unwind block (FDE at 0x1931c)
000000000000e322         push       r14
000000000000e324         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000e32b         push       r13
000000000000e32d         push       r12
000000000000e32f         mov        r13, rdi
000000000000e332         push       rbp
000000000000e333         push       rbx
000000000000e334         mov        rbx, r8
000000000000e337         mov        r14, rsi
000000000000e33a         mov        r15, rdx
000000000000e33d         sub        rsp, 0x18
000000000000e341         test       r8, r8
000000000000e344         cmove      rbx, rax
000000000000e348         mov        qword [rsp+0x48+var_40], rcx
000000000000e34d         call       j___errno_location                          ; __errno_location
000000000000e352         mov        r12d, dword [rax]
000000000000e355         mov        rbp, rax
000000000000e358         lea        rax, qword [rbx+8]
000000000000e35c         sub        rsp, 0x8
000000000000e360         mov        r9d, dword [rbx+4]
000000000000e364         push       qword [rbx+0x30]
000000000000e367         mov        r8d, dword [rbx]
000000000000e36a         push       qword [rbx+0x28]
000000000000e36d         mov        rdx, r15
000000000000e370         push       rax
000000000000e371         mov        rcx, qword [rsp+0x68+var_40]
000000000000e376         mov        rsi, r14
000000000000e379         mov        rdi, r13
000000000000e37c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000e381         mov        dword [rbp], r12d
000000000000e385         add        rsp, 0x38
000000000000e389         pop        rbx
000000000000e38a         pop        rbp
000000000000e38b         pop        r12
000000000000e38d         pop        r13
000000000000e38f         pop        r14
000000000000e391         pop        r15
000000000000e393         ret
                        ; endp
000000000000e394         align      32                                          ; End of unwind block (FDE at 0x1931c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
000000000000e3a0         push       r15                                         ; Begin of unwind block (FDE at 0x19370), CODE XREF=quotearg_alloc+5
000000000000e3a2         push       r14
000000000000e3a4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000e3ab         push       r13
000000000000e3ad         push       r12
000000000000e3af         mov        r12, rdx
000000000000e3b2         push       rbp
000000000000e3b3         push       rbx
000000000000e3b4         mov        rbx, rcx
000000000000e3b7         mov        r14, rdi
000000000000e3ba         mov        r15, rsi
000000000000e3bd         sub        rsp, 0x38
000000000000e3c1         test       rcx, rcx
000000000000e3c4         cmove      rbx, rax
000000000000e3c8         xor        ebp, ebp
000000000000e3ca         call       j___errno_location                          ; __errno_location
000000000000e3cf         test       r12, r12
000000000000e3d2         mov        r13, rax
000000000000e3d5         mov        eax, dword [rax]
000000000000e3d7         sete       bpl
000000000000e3db         or         ebp, dword [rbx+4]
000000000000e3de         lea        r10, qword [rbx+8]
000000000000e3e2         sub        rsp, 0x8
000000000000e3e6         mov        r8d, dword [rbx]
000000000000e3e9         mov        rcx, r15
000000000000e3ec         mov        dword [rsp+0x70+var_5C], eax
000000000000e3f0         push       qword [rbx+0x30]
000000000000e3f3         mov        rdx, r14
000000000000e3f6         push       qword [rbx+0x28]
000000000000e3f9         push       r10
000000000000e3fb         xor        esi, esi
000000000000e3fd         mov        r9d, ebp
000000000000e400         xor        edi, edi
000000000000e402         mov        qword [rsp+0x88+var_48], r10
000000000000e407         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000e40c         lea        rsi, qword [rax+1]
000000000000e410         mov        qword [rsp+0x88+var_40], rax
000000000000e415         add        rsp, 0x20
000000000000e419         mov        rdi, rsi
000000000000e41c         mov        qword [rsp+0x68+var_50], rsi
000000000000e421         call       xmalloc                                     ; xmalloc
000000000000e426         mov        qword [rsp+0x68+var_58], rax
000000000000e42b         sub        rsp, 0x8
000000000000e42f         push       qword [rbx+0x30]
000000000000e432         push       qword [rbx+0x28]
000000000000e435         mov        r10, qword [rsp+0x80+var_48]
000000000000e43a         mov        r9d, ebp
000000000000e43d         mov        r8d, dword [rbx]
000000000000e440         mov        rcx, r15
000000000000e443         mov        rdx, r14
000000000000e446         mov        rdi, rax
000000000000e449         push       r10
000000000000e44b         mov        rsi, qword [rsp+0x88+var_50]
000000000000e450         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000e455         mov        eax, dword [rsp+0x88+var_5C]
000000000000e459         add        rsp, 0x20
000000000000e45d         test       r12, r12
000000000000e460         mov        dword [r13], eax
000000000000e464         je         loc_e46f

000000000000e466         mov        r11, qword [rsp+0x68+var_40]
000000000000e46b         mov        qword [r12], r11

                     loc_e46f:
000000000000e46f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
000000000000e474         add        rsp, 0x38
000000000000e478         pop        rbx
000000000000e479         pop        rbp
000000000000e47a         pop        r12
000000000000e47c         pop        r13
000000000000e47e         pop        r14
000000000000e480         pop        r15
000000000000e482         ret
                        ; endp
000000000000e483         align      16                                          ; End of unwind block (FDE at 0x19370)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
000000000000e490         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x193dc)
000000000000e493         xor        edx, edx
000000000000e495         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
000000000000e49a         align      32                                          ; End of unwind block (FDE at 0x193dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
000000000000e4a0         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x193f0), nslots
000000000000e4a6         push       r12
000000000000e4a8         mov        r12, qword [slotvec]                        ; slotvec
000000000000e4af         push       rbp
000000000000e4b0         push       rbx
000000000000e4b1         cmp        eax, 0x1
000000000000e4b4         jle        loc_e4e1

000000000000e4b6         sub        eax, 0x2
000000000000e4b9         lea        rbx, qword [r12+0x18]
000000000000e4be         shl        rax, 0x4
000000000000e4c2         lea        rbp, qword [r12+rax+0x28]
000000000000e4c7         nop        word [rax+rax]

                     loc_e4d0:
000000000000e4d0         mov        rdi, qword [rbx]                            ; CODE XREF=quotearg_free+63
000000000000e4d3         add        rbx, 0x10
000000000000e4d7         call       sub_2c80                                    ; sub_2c80
000000000000e4dc         cmp        rbx, rbp
000000000000e4df         jne        loc_e4d0

                     loc_e4e1:
000000000000e4e1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
000000000000e4e6         lea        rbx, qword [slot0]                          ; slot0
000000000000e4ed         cmp        rdi, rbx
000000000000e4f0         je         loc_e509

000000000000e4f2         call       sub_2c80                                    ; sub_2c80
000000000000e4f7         mov        qword [slotvec0], 0x100                     ; slotvec0
000000000000e502         mov        qword [slotvec0+8], rbx                     ; 0x21c098

                     loc_e509:
000000000000e509         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
000000000000e510         cmp        r12, rbx
000000000000e513         je         loc_e524

000000000000e515         mov        rdi, r12
000000000000e518         call       sub_2c80                                    ; sub_2c80
000000000000e51d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_e524:
000000000000e524         pop        rbx                                         ; CODE XREF=quotearg_free+115
000000000000e525         mov        dword [nslots], 0x1                         ; nslots
000000000000e52f         pop        rbp
000000000000e530         pop        r12
000000000000e532         ret
                        ; endp
000000000000e533         align      64                                          ; End of unwind block (FDE at 0x193f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
000000000000e540         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1941c), default_quoting_options
000000000000e547         mov        rdx, 0xffffffffffffffff
000000000000e54e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000e553         align      32                                          ; End of unwind block (FDE at 0x1941c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
000000000000e560         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x19430), default_quoting_options
000000000000e567         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000e56c         align      16                                          ; End of unwind block (FDE at 0x19430)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
000000000000e570         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x19444), default_quoting_options
000000000000e577         mov        rsi, rdi
000000000000e57a         mov        rdx, 0xffffffffffffffff
000000000000e581         xor        edi, edi
000000000000e583         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000e588         align      16                                          ; End of unwind block (FDE at 0x19444)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
000000000000e590         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x19458), default_quoting_options
000000000000e597         mov        rdx, rsi
000000000000e59a         mov        rsi, rdi
000000000000e59d         xor        edi, edi
000000000000e59f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000e5a4         align      16                                          ; End of unwind block (FDE at 0x19458)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
000000000000e5b0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1946c), CODE XREF=sub_47d0+40, sub_47d0+65, sub_47d0+87, sub_47d0+213, sub_47d0+231, sub_47d0+593, sub_47d0+612, emit_verbose+23, emit_verbose+41, create_hard_link+181, create_hard_link+199
000000000000e5b4         mov        rax, rdx
000000000000e5b7         mov        rdx, qword [fs:0x28]
000000000000e5c0         mov        qword [rsp+0x48+var_10], rdx
000000000000e5c5         xor        edx, edx
000000000000e5c7         cmp        esi, 0xa
000000000000e5ca         je         loc_e634

000000000000e5cc         mov        dword [rsp+0x48+var_48], esi
000000000000e5cf         mov        rcx, rsp
000000000000e5d2         mov        rdx, 0xffffffffffffffff
000000000000e5d9         mov        rsi, rax
000000000000e5dc         mov        qword [rsp+0x48+var_44], 0x0
000000000000e5e5         mov        qword [rsp+0x48+var_3C], 0x0
000000000000e5ee         mov        qword [rsp+0x48+var_34], 0x0
000000000000e5f7         mov        qword [rsp+0x48+var_2C], 0x0
000000000000e600         mov        qword [rsp+0x48+var_24], 0x0
000000000000e609         mov        qword [rsp+0x48+var_1C], 0x0
000000000000e612         mov        dword [rsp+0x48+var_14], 0x0
000000000000e61a         call       quotearg_n_options                          ; quotearg_n_options
000000000000e61f         mov        rcx, qword [rsp+0x48+var_10]
000000000000e624         xor        rcx, qword [fs:0x28]
000000000000e62d         jne        loc_e639

000000000000e62f         add        rsp, 0x48
000000000000e633         ret
                        ; endp

                     loc_e634:
000000000000e634         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_e639:
000000000000e639         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
000000000000e63e         align      64                                          ; End of unwind block (FDE at 0x1946c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
000000000000e640         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x19488), CODE XREF=quotearg_style_mem+10
000000000000e644         mov        rax, rdx
000000000000e647         mov        rdx, rcx
000000000000e64a         mov        rcx, qword [fs:0x28]
000000000000e653         mov        qword [rsp+0x48+var_10], rcx
000000000000e658         xor        ecx, ecx
000000000000e65a         cmp        esi, 0xa
000000000000e65d         je         loc_e6c0

000000000000e65f         mov        dword [rsp+0x48+var_48], esi
000000000000e662         mov        rcx, rsp
000000000000e665         mov        rsi, rax
000000000000e668         mov        qword [rsp+0x48+var_44], 0x0
000000000000e671         mov        qword [rsp+0x48+var_3C], 0x0
000000000000e67a         mov        qword [rsp+0x48+var_34], 0x0
000000000000e683         mov        qword [rsp+0x48+var_2C], 0x0
000000000000e68c         mov        qword [rsp+0x48+var_24], 0x0
000000000000e695         mov        qword [rsp+0x48+var_1C], 0x0
000000000000e69e         mov        dword [rsp+0x48+var_14], 0x0
000000000000e6a6         call       quotearg_n_options                          ; quotearg_n_options
000000000000e6ab         mov        rdx, qword [rsp+0x48+var_10]
000000000000e6b0         xor        rdx, qword [fs:0x28]
000000000000e6b9         jne        loc_e6c5

000000000000e6bb         add        rsp, 0x48
000000000000e6bf         ret
                        ; endp

                     loc_e6c0:
000000000000e6c0         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_e6c5:
000000000000e6c5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
000000000000e6ca         align      16                                          ; End of unwind block (FDE at 0x19488)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
000000000000e6d0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x194a4), CODE XREF=main+701, main+1116, main+1538, main+1649, main+1778, main+1843, do_move+292, excise+212, excise+321, prompt+421, prompt+649
000000000000e6d3         mov        esi, edi
000000000000e6d5         xor        edi, edi
000000000000e6d7         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
000000000000e6dc         align      32                                          ; End of unwind block (FDE at 0x194a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
000000000000e6e0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x194b8)
000000000000e6e3         mov        rdx, rsi
000000000000e6e6         mov        esi, edi
000000000000e6e8         xor        edi, edi
000000000000e6ea         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
000000000000e6ef         align      16                                          ; End of unwind block (FDE at 0x194b8)

                     quotearg_char_mem:
000000000000e6f0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x194cc), CODE XREF=quotearg_char+11
000000000000e6f4         mov        ecx, edx
000000000000e6f6         mov        rax, qword [fs:0x28]
000000000000e6ff         mov        qword [rsp+0x48+var_10], rax
000000000000e704         xor        eax, eax
000000000000e706         mov        rax, qword [qword_21c6d0]                   ; qword_21c6d0
000000000000e70d         mov        r8, rsp
000000000000e710         and        ecx, 0x1f
000000000000e713         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000e71b         mov        qword [rsp+0x48+var_18], rax
000000000000e720         mov        eax, edx
000000000000e722         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000e726         shr        al, 0x5
000000000000e729         movzx      eax, al
000000000000e72c         lea        r9, qword [r8+rax*4+8]
000000000000e731         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x21c6b0
000000000000e739         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000e73e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x21c6c0
000000000000e746         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000e74b         mov        edx, dword [r9]
000000000000e74e         mov        eax, edx
000000000000e750         shr        eax, cl
000000000000e752         not        eax
000000000000e754         and        eax, 0x1
000000000000e757         shl        eax, cl
000000000000e759         mov        rcx, r8
000000000000e75c         xor        eax, edx
000000000000e75e         mov        rdx, rsi
000000000000e761         mov        rsi, rdi
000000000000e764         mov        dword [r9], eax
000000000000e767         xor        edi, edi
000000000000e769         call       quotearg_n_options                          ; quotearg_n_options
000000000000e76e         mov        rsi, qword [rsp+0x48+var_10]
000000000000e773         xor        rsi, qword [fs:0x28]
000000000000e77c         jne        loc_e783

000000000000e77e         add        rsp, 0x48
000000000000e782         ret
                        ; endp

                     loc_e783:
000000000000e783         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
000000000000e788         align      16                                          ; End of unwind block (FDE at 0x194cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
000000000000e790         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x194e8)
000000000000e794         mov        rsi, 0xffffffffffffffff
000000000000e79b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
000000000000e7a0         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x194e8), Begin of unwind block (FDE at 0x194fc), CODE XREF=close_stdin+133, close_stdout+101
000000000000e7a5         mov        rsi, 0xffffffffffffffff
000000000000e7ac         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
000000000000e7b1         align      64                                          ; End of unwind block (FDE at 0x194fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
000000000000e7c0         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x19510)
000000000000e7c5         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
000000000000e7ca         align      16                                          ; End of unwind block (FDE at 0x19510)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
000000000000e7d0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x19524), CODE XREF=sub_43f0+11, sub_4540+11, sub_47d0+882, copy_internal+8762, copy_internal+9597, copy_internal+9619, copy_internal+16111, copy_internal+16190
000000000000e7d4         mov        rax, rdx
000000000000e7d7         mov        rdx, qword [fs:0x28]
000000000000e7e0         mov        qword [rsp+0x48+var_10], rdx
000000000000e7e5         xor        edx, edx
000000000000e7e7         cmp        esi, 0xa
000000000000e7ea         je         loc_e854

000000000000e7ec         mov        dword [rsp+0x48+var_48], esi
000000000000e7ef         mov        rcx, rsp
000000000000e7f2         mov        rdx, 0xffffffffffffffff
000000000000e7f9         mov        rsi, rax
000000000000e7fc         mov        qword [rsp+0x48+var_44], 0x0
000000000000e805         mov        qword [rsp+0x48+var_3C], 0x4000000
000000000000e80e         mov        qword [rsp+0x48+var_34], 0x0
000000000000e817         mov        qword [rsp+0x48+var_2C], 0x0
000000000000e820         mov        qword [rsp+0x48+var_24], 0x0
000000000000e829         mov        qword [rsp+0x48+var_1C], 0x0
000000000000e832         mov        dword [rsp+0x48+var_14], 0x0
000000000000e83a         call       quotearg_n_options                          ; quotearg_n_options
000000000000e83f         mov        rcx, qword [rsp+0x48+var_10]
000000000000e844         xor        rcx, qword [fs:0x28]
000000000000e84d         jne        loc_e859

000000000000e84f         add        rsp, 0x48
000000000000e853         ret
                        ; endp

                     loc_e854:
000000000000e854         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_e859:
000000000000e859         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000e85e         align      32                                          ; End of unwind block (FDE at 0x19524)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
000000000000e860         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x19540), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
000000000000e864         mov        r9, rcx
000000000000e867         mov        rcx, qword [qword_21c6d0]                   ; qword_21c6d0
000000000000e86e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000e876         mov        rax, qword [fs:0x28]
000000000000e87f         mov        qword [rsp+0x48+var_10], rax
000000000000e884         xor        eax, eax
000000000000e886         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000e88a         test       rsi, rsi
000000000000e88d         mov        qword [rsp+0x48+var_18], rcx
000000000000e892         mov        dword [rsp+0x48+var_48], 0xa
000000000000e899         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x21c6b0
000000000000e8a1         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000e8a6         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x21c6c0
000000000000e8ae         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000e8b3         je         loc_e8e7

000000000000e8b5         test       rdx, rdx
000000000000e8b8         je         loc_e8e7

000000000000e8ba         mov        qword [rsp+0x48+var_20], rsi
000000000000e8bf         mov        qword [rsp+0x48+var_18], rdx
000000000000e8c4         mov        rcx, rsp
000000000000e8c7         mov        rdx, r8
000000000000e8ca         mov        rsi, r9
000000000000e8cd         call       quotearg_n_options                          ; quotearg_n_options
000000000000e8d2         mov        rdi, qword [rsp+0x48+var_10]
000000000000e8d7         xor        rdi, qword [fs:0x28]
000000000000e8e0         jne        loc_e8ec

000000000000e8e2         add        rsp, 0x48
000000000000e8e6         ret
                        ; endp

                     loc_e8e7:
000000000000e8e7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_e8ec:
000000000000e8ec         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
000000000000e8f1         align      256                                         ; End of unwind block (FDE at 0x19540)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
000000000000e900         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x1955c)
000000000000e907         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000e90c         align      16                                          ; End of unwind block (FDE at 0x1955c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
000000000000e910         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x19570)
000000000000e913         mov        r8, 0xffffffffffffffff
000000000000e91a         mov        rdx, rsi
000000000000e91d         mov        rsi, rdi
000000000000e920         xor        edi, edi
000000000000e922         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000e927         align      16                                          ; End of unwind block (FDE at 0x19570)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
000000000000e930         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x19584)
000000000000e933         mov        rcx, rdx
000000000000e936         mov        rdx, rsi
000000000000e939         mov        rsi, rdi
000000000000e93c         xor        edi, edi
000000000000e93e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000e943         align      16                                          ; End of unwind block (FDE at 0x19584)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
000000000000e950         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x19598), quote_quoting_options
000000000000e957         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000e95c         align      32                                          ; End of unwind block (FDE at 0x19598)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
000000000000e960         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x195ac), quote_quoting_options
000000000000e967         mov        rdx, rsi
000000000000e96a         mov        rsi, rdi
000000000000e96d         xor        edi, edi
000000000000e96f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000e974         align      128                                         ; End of unwind block (FDE at 0x195ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
000000000000e980         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x195c0), quote_quoting_options, CODE XREF=argmatch_invalid+46
000000000000e987         mov        rdx, 0xffffffffffffffff
000000000000e98e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000e993         align      32                                          ; End of unwind block (FDE at 0x195c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
000000000000e9a0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x195d4), quote_quoting_options, CODE XREF=copy_acl+30, copy_acl+99, set_acl+21, argmatch_valid+90, argmatch_valid+169, randread_error+11
000000000000e9a7         mov        rsi, rdi
000000000000e9aa         mov        rdx, 0xffffffffffffffff
000000000000e9b1         xor        edi, edi
000000000000e9b3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000e9b8         align      64                                          ; End of unwind block (FDE at 0x195d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_C0: int32_t, -192
        ;    var_D8: int8_t, -216
        ;    var_150: int32_t, -336
        ;    var_168: int8_t, -360
        ;    var_170: int64_t, -368
        ;    var_174: int32_t, -372


                     renameatu:
000000000000e9c0         push       r15                                         ; Begin of unwind block (FDE at 0x195ec), CODE XREF=main+1464, copy_internal+819, backupfile_internal+847
000000000000e9c2         push       r14
000000000000e9c4         mov        r9d, r8d
000000000000e9c7         push       r13
000000000000e9c9         push       r12
000000000000e9cb         mov        r14d, edx
000000000000e9ce         push       rbp
000000000000e9cf         push       rbx
000000000000e9d0         mov        r12, rsi
000000000000e9d3         mov        r13, rcx
000000000000e9d6         mov        ebp, r8d
000000000000e9d9         mov        r8, rcx
000000000000e9dc         sub        rsp, 0x148
000000000000e9e3         mov        ecx, edx
000000000000e9e5         mov        rdx, rsi
000000000000e9e8         mov        rax, qword [fs:0x28]
000000000000e9f1         mov        qword [rsp+0x178+var_40], rax
000000000000e9f9         xor        eax, eax
000000000000e9fb         mov        esi, edi
000000000000e9fd         mov        dword [rsp+0x178+var_174], edi
000000000000ea01         mov        edi, 0x13c                                  ; argument "__sysno" for method j_syscall
000000000000ea06         call       j_syscall                                   ; syscall
000000000000ea0b         mov        rbx, rax
000000000000ea0e         mov        r15d, eax
000000000000ea11         call       j___errno_location                          ; __errno_location
000000000000ea16         test       ebx, ebx
000000000000ea18         js         loc_ea50

                     loc_ea1a:
000000000000ea1a         mov        rdx, qword [rsp+0x178+var_40]               ; CODE XREF=renameatu+166, renameatu+248, renameatu+274, renameatu+363, renameatu+431, renameatu+453, renameatu+608
000000000000ea22         xor        rdx, qword [fs:0x28]
000000000000ea2b         mov        eax, r15d
000000000000ea2e         jne        loc_ec25

000000000000ea34         add        rsp, 0x148
000000000000ea3b         pop        rbx
000000000000ea3c         pop        rbp
000000000000ea3d         pop        r12
000000000000ea3f         pop        r13
000000000000ea41         pop        r14
000000000000ea43         pop        r15
000000000000ea45         ret
                        ; endp
000000000000ea46         align      16

                     loc_ea50:
000000000000ea50         mov        r9, rax                                     ; CODE XREF=renameatu+88
000000000000ea53         mov        eax, dword [rax]
000000000000ea55         lea        ecx, dword [rax-0x16]
000000000000ea58         and        ecx, 0xffffffef
000000000000ea5b         setne      bl
000000000000ea5e         cmp        eax, 0x5f
000000000000ea61         setne      al
000000000000ea64         and        bl, al
000000000000ea66         jne        loc_ea1a

000000000000ea68         test       ebp, ebp
000000000000ea6a         jne        loc_eac0

                     loc_ea6c:
000000000000ea6c         mov        rdi, r12                                    ; argument "__s" for method j_strlen, CODE XREF=renameatu+541
000000000000ea6f         mov        qword [rsp+0x178+var_170], r9
000000000000ea74         call       j_strlen                                    ; strlen
000000000000ea79         mov        rdi, r13                                    ; argument "__s" for method j_strlen
000000000000ea7c         mov        rbp, rax
000000000000ea7f         call       j_strlen                                    ; strlen
000000000000ea84         test       rbp, rbp
000000000000ea87         je         loc_eaa3

000000000000ea89         test       rax, rax
000000000000ea8c         mov        r9, qword [rsp+0x178+var_170]
000000000000ea91         je         loc_eaa3

000000000000ea93         cmp        byte [r12+rbp-1], 0x2f
000000000000ea99         je         loc_eae0

000000000000ea9b         cmp        byte [r13+rax-1], 0x2f
000000000000eaa1         je         loc_eae0

                     loc_eaa3:
000000000000eaa3         mov        edi, dword [rsp+0x178+var_174]              ; argument "__oldfd" for method j_renameat, CODE XREF=renameatu+199, renameatu+209, renameatu+348, renameatu+524, renameatu+591
000000000000eaa7         mov        rcx, r13                                    ; argument "__new" for method j_renameat
000000000000eaaa         mov        edx, r14d                                   ; argument "__newfd" for method j_renameat
000000000000eaad         mov        rsi, r12                                    ; argument "__old" for method j_renameat
000000000000eab0         call       j_renameat                                  ; renameat
000000000000eab5         mov        r15d, eax
000000000000eab8         jmp        loc_ea1a
000000000000eabd         align      64

                     loc_eac0:
000000000000eac0         and        ebp, 0xfffffffe                             ; CODE XREF=renameatu+170
000000000000eac3         je         loc_eb30

000000000000eac5         mov        dword [r9], 0x5f
000000000000eacc         mov        r15d, 0xffffffff
000000000000ead2         jmp        loc_ea1a
000000000000ead7         align      32

                     loc_eae0:
000000000000eae0         mov        esi, dword [rsp+0x178+var_174]              ; argument "__fildes" for method j___fxstatat, CODE XREF=renameatu+217, renameatu+225
000000000000eae4         lea        rcx, qword [rsp+0x178+var_168]              ; argument "__stat_buf" for method j___fxstatat
000000000000eae9         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
000000000000eaef         mov        rdx, r12                                    ; argument "__filename" for method j___fxstatat
000000000000eaf2         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
000000000000eaf7         mov        qword [rsp+0x178+var_170], r9
000000000000eafc         call       j___fxstatat                                ; __fxstatat
000000000000eb01         test       eax, eax
000000000000eb03         jne        loc_eb69

000000000000eb05         test       bl, bl
000000000000eb07         mov        r9, qword [rsp+0x178+var_170]
000000000000eb0c         je         loc_eb8a

000000000000eb0e         mov        eax, dword [rsp+0x178+var_150]
000000000000eb12         and        eax, 0xf000
000000000000eb17         cmp        eax, 0x4000
000000000000eb1c         je         loc_eaa3

000000000000eb1e         mov        dword [r9], 0x2
000000000000eb25         mov        r15d, 0xffffffff
000000000000eb2b         jmp        loc_ea1a

                     loc_eb30:
000000000000eb30         lea        rcx, qword [rsp+0x178+var_D8]               ; argument "__stat_buf" for method j___fxstatat, CODE XREF=renameatu+259
000000000000eb38         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
000000000000eb3e         mov        rdx, r13                                    ; argument "__filename" for method j___fxstatat
000000000000eb41         mov        esi, r14d                                   ; argument "__fildes" for method j___fxstatat
000000000000eb44         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
000000000000eb49         mov        qword [rsp+0x178+var_170], r9
000000000000eb4e         call       j___fxstatat                                ; __fxstatat
000000000000eb53         test       eax, eax
000000000000eb55         mov        r9, qword [rsp+0x178+var_170]
000000000000eb5a         je         loc_eb78

000000000000eb5c         mov        eax, dword [r9]
000000000000eb5f         cmp        eax, 0x4b
000000000000eb62         je         loc_eb78

000000000000eb64         cmp        eax, 0x2
000000000000eb67         je         loc_ebd8

                     loc_eb69:
000000000000eb69         mov        r15d, 0xffffffff                            ; CODE XREF=renameatu+323, renameatu+506, renameatu+522, renameatu+572
000000000000eb6f         jmp        loc_ea1a
000000000000eb74         align      8

                     loc_eb78:
000000000000eb78         mov        dword [r9], 0x11                            ; CODE XREF=renameatu+410, renameatu+418
000000000000eb7f         mov        r15d, 0xffffffff
000000000000eb85         jmp        loc_ea1a

                     loc_eb8a:
000000000000eb8a         lea        rcx, qword [rsp+0x178+var_D8]               ; argument "__stat_buf" for method j___fxstatat, CODE XREF=renameatu+332
000000000000eb92         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
000000000000eb98         mov        rdx, r13                                    ; argument "__filename" for method j___fxstatat
000000000000eb9b         mov        esi, r14d                                   ; argument "__fildes" for method j___fxstatat
000000000000eb9e         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
000000000000eba3         mov        qword [rsp+0x178+var_170], r9
000000000000eba8         call       j___fxstatat                                ; __fxstatat
000000000000ebad         test       eax, eax
000000000000ebaf         mov        r9, qword [rsp+0x178+var_170]
000000000000ebb4         je         loc_ebe2

000000000000ebb6         cmp        dword [r9], 0x2
000000000000ebba         jne        loc_eb69

000000000000ebbc         mov        eax, dword [rsp+0x178+var_150]
000000000000ebc0         and        eax, 0xf000
000000000000ebc5         cmp        eax, 0x4000
000000000000ebca         jne        loc_eb69

000000000000ebcc         jmp        loc_eaa3
000000000000ebd1         align      8

                     loc_ebd8:
000000000000ebd8         mov        ebx, 0x1                                    ; CODE XREF=renameatu+423
000000000000ebdd         jmp        loc_ea6c

                     loc_ebe2:
000000000000ebe2         mov        eax, dword [rsp+0x178+var_C0]               ; CODE XREF=renameatu+500
000000000000ebe9         and        eax, 0xf000
000000000000ebee         cmp        eax, 0x4000
000000000000ebf3         je         loc_ec01

000000000000ebf5         mov        dword [r9], 0x14
000000000000ebfc         jmp        loc_eb69

                     loc_ec01:
000000000000ec01         mov        eax, dword [rsp+0x178+var_150]              ; CODE XREF=renameatu+563
000000000000ec05         and        eax, 0xf000
000000000000ec0a         cmp        eax, 0x4000
000000000000ec0f         je         loc_eaa3

000000000000ec15         mov        dword [r9], 0x15
000000000000ec1c         or         r15d, 0xffffffff
000000000000ec20         jmp        loc_ea1a

                     loc_ec25:
000000000000ec25         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=renameatu+110
                        ; endp
000000000000ec2a         align      16                                          ; End of unwind block (FDE at 0x195ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     get_root_dev_ino:
000000000000ec30         push       rbx                                         ; Begin of unwind block (FDE at 0x1963c), CODE XREF=do_move+133
000000000000ec31         lea        rsi, qword [aLibs+6]                        ; argument "__filename" for method j___lxstat, 0x16a8e
000000000000ec38         mov        rbx, rdi
000000000000ec3b         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
000000000000ec40         sub        rsp, 0xa0
000000000000ec47         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___lxstat
000000000000ec4a         mov        rax, qword [fs:0x28]
000000000000ec53         mov        qword [rsp+0xa8+var_10], rax
000000000000ec5b         xor        eax, eax
000000000000ec5d         call       j___lxstat                                  ; __lxstat
000000000000ec62         test       eax, eax
000000000000ec64         jne        loc_ec98

000000000000ec66         mov        rax, qword [rsp+0xa8+var_A0]
000000000000ec6b         mov        qword [rbx], rax
000000000000ec6e         mov        rax, qword [rsp+0xa8+var_A8]
000000000000ec72         mov        qword [rbx+8], rax
000000000000ec76         mov        rax, rbx

                     loc_ec79:
000000000000ec79         mov        rcx, qword [rsp+0xa8+var_10]                ; CODE XREF=get_root_dev_ino+106
000000000000ec81         xor        rcx, qword [fs:0x28]
000000000000ec8a         jne        loc_ec9c

000000000000ec8c         add        rsp, 0xa0
000000000000ec93         pop        rbx
000000000000ec94         ret
                        ; endp
000000000000ec95         align      8

                     loc_ec98:
000000000000ec98         xor        eax, eax                                    ; CODE XREF=get_root_dev_ino+52
000000000000ec9a         jmp        loc_ec79

                     loc_ec9c:
000000000000ec9c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=get_root_dev_ino+90
                        ; endp
000000000000eca1         align      16                                          ; End of unwind block (FDE at 0x1963c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_write:
000000000000ecb0         push       r13                                         ; Begin of unwind block (FDE at 0x19664), CODE XREF=full_write+57
000000000000ecb2         push       r12
000000000000ecb4         mov        r13d, edi
000000000000ecb7         push       rbp
000000000000ecb8         push       rbx
000000000000ecb9         mov        r12, rsi
000000000000ecbc         mov        rbx, rdx
000000000000ecbf         sub        rsp, 0x8
000000000000ecc3         nop        dword [rax+rax]

                     loc_ecc8:
000000000000ecc8         mov        rdx, rbx                                    ; argument "__n" for method j_write, CODE XREF=safe_write+56, safe_write+77
000000000000eccb         mov        rsi, r12                                    ; argument "__buf" for method j_write
000000000000ecce         mov        edi, r13d                                   ; argument "__fd" for method j_write
000000000000ecd1         call       j_write                                     ; write
000000000000ecd6         test       rax, rax
000000000000ecd9         mov        rbp, rax
000000000000ecdc         jns        loc_ed00

000000000000ecde         call       j___errno_location                          ; __errno_location
000000000000ece3         mov        eax, dword [rax]
000000000000ece5         cmp        eax, 0x4
000000000000ece8         je         loc_ecc8

000000000000ecea         cmp        eax, 0x16
000000000000eced         jne        loc_ed00

000000000000ecef         cmp        rbx, 0x7ff00000
000000000000ecf6         jbe        loc_ed00

000000000000ecf8         mov        ebx, 0x7ff00000
000000000000ecfd         jmp        loc_ecc8
000000000000ecff         align      256

                     loc_ed00:
000000000000ed00         add        rsp, 0x8                                    ; CODE XREF=safe_write+44, safe_write+61, safe_write+70
000000000000ed04         mov        rax, rbp
000000000000ed07         pop        rbx
000000000000ed08         pop        rbp
000000000000ed09         pop        r12
000000000000ed0b         pop        r13
000000000000ed0d         ret
                        ; endp
000000000000ed0e         align      16                                          ; End of unwind block (FDE at 0x19664)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344


                     same_nameat.part.0:
000000000000ed10         push       r13                                         ; Begin of unwind block (FDE at 0x1969c), CODE XREF=same_nameat+141
000000000000ed12         push       r12
000000000000ed14         mov        r13d, edi
000000000000ed17         push       rbp
000000000000ed18         push       rbx
000000000000ed19         mov        rdi, rsi
000000000000ed1c         mov        ebp, edx
000000000000ed1e         mov        r12, rcx
000000000000ed21         sub        rsp, 0x138
000000000000ed28         mov        rax, qword [fs:0x28]
000000000000ed31         mov        qword [rsp+0x158+var_30], rax
000000000000ed39         xor        eax, eax
000000000000ed3b         call       dir_name                                    ; dir_name
000000000000ed40         mov        rcx, rsp                                    ; argument "__stat_buf" for method j___fxstatat
000000000000ed43         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
000000000000ed49         mov        rdx, rax                                    ; argument "__filename" for method j___fxstatat
000000000000ed4c         mov        esi, r13d                                   ; argument "__fildes" for method j___fxstatat
000000000000ed4f         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
000000000000ed54         mov        rbx, rax
000000000000ed57         call       j___fxstatat                                ; __fxstatat
000000000000ed5c         test       eax, eax
000000000000ed5e         jne        loc_ee10

                     loc_ed64:
000000000000ed64         mov        rdi, rbx                                    ; CODE XREF=same_nameat.part.0+285
000000000000ed67         call       sub_2c80                                    ; sub_2c80
000000000000ed6c         mov        rdi, r12
000000000000ed6f         call       dir_name                                    ; dir_name
000000000000ed74         lea        rcx, qword [rsp+0x158+var_C8]               ; argument "__stat_buf" for method j___fxstatat
000000000000ed7c         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
000000000000ed82         mov        rdx, rax                                    ; argument "__filename" for method j___fxstatat
000000000000ed85         mov        esi, ebp                                    ; argument "__fildes" for method j___fxstatat
000000000000ed87         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
000000000000ed8c         mov        rbx, rax
000000000000ed8f         call       j___fxstatat                                ; __fxstatat
000000000000ed94         test       eax, eax
000000000000ed96         jne        loc_ede8

                     loc_ed98:
000000000000ed98         xor        ebp, ebp                                    ; CODE XREF=same_nameat.part.0+245
000000000000ed9a         mov        rax, qword [rsp+0x158+var_C0]
000000000000eda2         cmp        qword [rsp+0x158+var_150], rax
000000000000eda7         jne        loc_edb9

000000000000eda9         mov        rax, qword [rsp+0x158+var_C8]
000000000000edb1         cmp        qword [rsp+0x158+var_158], rax
000000000000edb5         sete       bpl

                     loc_edb9:
000000000000edb9         mov        rdi, rbx                                    ; CODE XREF=same_nameat.part.0+151
000000000000edbc         call       sub_2c80                                    ; sub_2c80
000000000000edc1         mov        rdx, qword [rsp+0x158+var_30]
000000000000edc9         xor        rdx, qword [fs:0x28]
000000000000edd2         mov        eax, ebp
000000000000edd4         jne        loc_ee32

000000000000edd6         add        rsp, 0x138
000000000000eddd         pop        rbx
000000000000edde         pop        rbp
000000000000eddf         pop        r12
000000000000ede1         pop        r13
000000000000ede3         ret
                        ; endp
000000000000ede4         align      8

                     loc_ede8:
000000000000ede8         call       j___errno_location                          ; __errno_location, CODE XREF=same_nameat.part.0+134
000000000000eded         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000edef         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x17447
000000000000edf6         mov        rcx, rbx
000000000000edf9         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000edfe         xor        eax, eax
000000000000ee00         call       j_error                                     ; error
000000000000ee05         jmp        loc_ed98
000000000000ee07         align      16

                     loc_ee10:
000000000000ee10         call       j___errno_location                          ; __errno_location, CODE XREF=same_nameat.part.0+78
000000000000ee15         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000ee17         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x17447
000000000000ee1e         mov        rcx, rbx
000000000000ee21         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000ee26         xor        eax, eax
000000000000ee28         call       j_error                                     ; error
000000000000ee2d         jmp        loc_ed64

                     loc_ee32:
000000000000ee32         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=same_nameat.part.0+196
                        ; endp
000000000000ee37         align      64                                          ; End of unwind block (FDE at 0x1969c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60


                     same_nameat:
000000000000ee40         push       r15                                         ; Begin of unwind block (FDE at 0x196d8), CODE XREF=same_name+13
000000000000ee42         push       r14
000000000000ee44         mov        r15d, edx
000000000000ee47         push       r13
000000000000ee49         push       r12
000000000000ee4b         push       rbp
000000000000ee4c         push       rbx
000000000000ee4d         mov        rbp, rcx
000000000000ee50         mov        rbx, rsi
000000000000ee53         sub        rsp, 0x18
000000000000ee57         mov        dword [rsp+0x48+var_3C], edi
000000000000ee5b         mov        rdi, rsi
000000000000ee5e         call       last_component                              ; last_component
000000000000ee63         mov        rdi, rbp
000000000000ee66         mov        r12, rax
000000000000ee69         call       last_component                              ; last_component
000000000000ee6e         mov        rdi, r12
000000000000ee71         mov        r13, rax
000000000000ee74         call       base_len                                    ; base_len
000000000000ee79         mov        rdi, r13
000000000000ee7c         mov        r14, rax
000000000000ee7f         call       base_len                                    ; base_len
000000000000ee84         cmp        r14, rax
000000000000ee87         je         loc_eea0

                     loc_ee89:
000000000000ee89         add        rsp, 0x18                                   ; CODE XREF=same_nameat+112
000000000000ee8d         xor        eax, eax
000000000000ee8f         pop        rbx
000000000000ee90         pop        rbp
000000000000ee91         pop        r12
000000000000ee93         pop        r13
000000000000ee95         pop        r14
000000000000ee97         pop        r15
000000000000ee99         ret
                        ; endp
000000000000ee9a         align      32

                     loc_eea0:
000000000000eea0         mov        rdx, r14                                    ; argument "__n" for method j_memcmp, CODE XREF=same_nameat+71
000000000000eea3         mov        rsi, r13                                    ; argument "__s2" for method j_memcmp
000000000000eea6         mov        rdi, r12                                    ; argument "__s1" for method j_memcmp
000000000000eea9         call       j_memcmp                                    ; memcmp
000000000000eeae         test       eax, eax
000000000000eeb0         jne        loc_ee89

000000000000eeb2         mov        edi, dword [rsp+0x48+var_3C]
000000000000eeb6         add        rsp, 0x18
000000000000eeba         mov        rcx, rbp
000000000000eebd         mov        edx, r15d
000000000000eec0         mov        rsi, rbx
000000000000eec3         pop        rbx
000000000000eec4         pop        rbp
000000000000eec5         pop        r12
000000000000eec7         pop        r13
000000000000eec9         pop        r14
000000000000eecb         pop        r15
000000000000eecd         jmp        same_nameat.part.0                          ; same_nameat.part.0
                        ; endp
000000000000eed2         align      32                                          ; End of unwind block (FDE at 0x196d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     same_name:
000000000000eee0         mov        edx, 0xffffff9c                             ; Begin of unwind block (FDE at 0x19738), CODE XREF=copy_internal+4249, copy_internal+5975, copy_internal+8174, copy_internal+8844, copy_internal+9838, copy_internal+10862, triple_compare+36
000000000000eee5         mov        rcx, rsi
000000000000eee8         mov        rsi, rdi
000000000000eeeb         mov        edi, edx
000000000000eeed         jmp        same_nameat                                 ; same_nameat
                        ; endp
000000000000eef2         align      256                                         ; End of unwind block (FDE at 0x19738)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     direntry_cmp_inode:
000000000000ef00         mov        rax, qword [rsi+8]                          ; Begin of unwind block (FDE at 0x1974c)
000000000000ef04         cmp        qword [rdi+8], rax
000000000000ef08         jb         loc_ef18

000000000000ef0a         seta       al
000000000000ef0d         movzx      eax, al
000000000000ef10         ret
                        ; endp
000000000000ef11         align      8

                     loc_ef18:
000000000000ef18         mov        eax, 0xffffffff                             ; CODE XREF=direntry_cmp_inode+8
000000000000ef1d         ret
                        ; endp
000000000000ef1e         align      32                                          ; End of unwind block (FDE at 0x1974c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     direntry_cmp_name:
000000000000ef20         mov        rsi, qword [rsi]                            ; Begin of unwind block (FDE at 0x19760), argument "__s2" for method j_strcmp
000000000000ef23         mov        rdi, qword [rdi]                            ; argument "__s1" for method j_strcmp
000000000000ef26         jmp        j_strcmp                                    ; strcmp
                        ; endp
000000000000ef2b         align      16                                          ; End of unwind block (FDE at 0x19760)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     streamsavedir:
000000000000ef30         push       r15                                         ; Begin of unwind block (FDE at 0x19774), CODE XREF=savedir+24
000000000000ef32         lea        rax, qword [comparison_function_table]      ; comparison_function_table
000000000000ef39         push       r14
000000000000ef3b         push       r13
000000000000ef3d         push       r12
000000000000ef3f         mov        esi, esi
000000000000ef41         push       rbp
000000000000ef42         push       rbx
000000000000ef43         sub        rsp, 0x48
000000000000ef47         mov        rax, qword [rax+rsi*8]
000000000000ef4b         test       rdi, rdi
000000000000ef4e         mov        qword [rsp+0x78+var_70], rax
000000000000ef53         je         loc_f25d

000000000000ef59         mov        rbx, rdi
000000000000ef5c         xor        r14d, r14d
000000000000ef5f         xor        r12d, r12d
000000000000ef62         call       j___errno_location                          ; __errno_location
000000000000ef67         xor        r13d, r13d
000000000000ef6a         mov        rbp, rax
000000000000ef6d         mov        qword [rsp+0x78+var_50], 0x0
000000000000ef76         mov        qword [rsp+0x78+var_68], 0x0
000000000000ef7f         mov        qword [rsp+0x78+var_58], 0x0
000000000000ef88         jmp        loc_ef94
000000000000ef8a         align      16

                     loc_ef90:
000000000000ef90         test       al, al                                      ; CODE XREF=streamsavedir+137, streamsavedir+276
000000000000ef92         jne        loc_efc9

                     loc_ef94:
000000000000ef94         mov        dword [rbp], 0x0                            ; CODE XREF=streamsavedir+88, streamsavedir+151, streamsavedir+262, streamsavedir+636
000000000000ef9b         mov        rdi, rbx                                    ; argument "__dirp" for method j_readdir
000000000000ef9e         call       j_readdir                                   ; readdir
000000000000efa3         test       rax, rax
000000000000efa6         mov        rcx, rax
000000000000efa9         je         loc_f050

000000000000efaf         lea        r15, qword [rax+0x13]
000000000000efb3         movzx      eax, byte [rax+0x13]
000000000000efb7         cmp        al, 0x2e
000000000000efb9         jne        loc_ef90

000000000000efbb         cmp        byte [rcx+0x14], 0x2e
000000000000efbf         je         loc_f040

000000000000efc1         movzx      eax, byte [rcx+0x14]
000000000000efc5         test       al, al
000000000000efc7         je         loc_ef94

                     loc_efc9:
000000000000efc9         mov        rdi, r15                                    ; argument "__s" for method j_strlen, CODE XREF=streamsavedir+98
000000000000efcc         mov        qword [rsp+0x78+var_48], rcx
000000000000efd1         call       j_strlen                                    ; strlen
000000000000efd6         add        rax, 0x1
000000000000efda         cmp        qword [rsp+0x78+var_70], 0x0
000000000000efe0         mov        qword [rsp+0x78+var_60], rax
000000000000efe5         je         loc_f128

000000000000efeb         cmp        r12, qword [rsp+0x78+var_50]
000000000000eff0         lea        rax, qword [r12+1]
000000000000eff5         mov        rcx, qword [rsp+0x78+var_48]
000000000000effa         mov        qword [rsp+0x78+var_40], rax
000000000000efff         je         loc_f1b1

                     loc_f005:
000000000000f005         shl        r12, 0x4                                    ; CODE XREF=streamsavedir+718
000000000000f009         mov        rdi, r15                                    ; argument #1 for method xstrdup
000000000000f00c         add        r12, qword [rsp+0x78+var_68]
000000000000f011         mov        qword [rsp+0x78+var_48], rcx
000000000000f016         call       xstrdup                                     ; xstrdup
000000000000f01b         mov        rcx, qword [rsp+0x78+var_48]
000000000000f020         add        r14, qword [rsp+0x78+var_60]
000000000000f025         mov        qword [r12], rax
000000000000f029         mov        rax, qword [rcx]
000000000000f02c         mov        qword [r12+8], rax
000000000000f031         mov        r12, qword [rsp+0x78+var_40]
000000000000f036         jmp        loc_ef94
000000000000f03b         align      64

                     loc_f040:
000000000000f040         movzx      eax, byte [rcx+0x15]                        ; CODE XREF=streamsavedir+143
000000000000f044         jmp        loc_ef90
000000000000f049         align      16

                     loc_f050:
000000000000f050         mov        ebx, dword [rbp]                            ; CODE XREF=streamsavedir+121
000000000000f053         test       ebx, ebx
000000000000f055         jne        loc_f240

000000000000f05b         cmp        qword [rsp+0x78+var_70], 0x0
000000000000f061         je         loc_f110

000000000000f067         test       r12, r12
000000000000f06a         lea        rbx, qword [r14+1]
000000000000f06e         jne        loc_f0a0

000000000000f070         mov        rdi, rbx                                    ; argument #1 for method xmalloc
000000000000f073         call       xmalloc                                     ; xmalloc
000000000000f078         mov        r13, rax
000000000000f07b         mov        rbx, rax

                     loc_f07e:
000000000000f07e         mov        rdi, qword [rsp+0x78+var_68]                ; CODE XREF=streamsavedir+470
000000000000f083         call       sub_2c80                                    ; sub_2c80

                     loc_f088:
000000000000f088         mov        byte [rbx], 0x0                             ; CODE XREF=streamsavedir+496, streamsavedir+746

                     loc_f08b:
000000000000f08b         add        rsp, 0x48                                   ; CODE XREF=sub_f23e+26, sub_f23e+34
000000000000f08f         mov        rax, r13
000000000000f092         pop        rbx
000000000000f093         pop        rbp
000000000000f094         pop        r12
000000000000f096         pop        r13
000000000000f098         pop        r14
000000000000f09a         pop        r15
000000000000f09c         ret
                        ; endp
000000000000f09d         align      32

                     loc_f0a0:
000000000000f0a0         mov        r15, qword [rsp+0x78+var_68]                ; CODE XREF=streamsavedir+318
000000000000f0a5         mov        rcx, qword [rsp+0x78+var_70]                ; argument "__compar" for method j_qsort
000000000000f0aa         mov        rsi, r12                                    ; argument "__nmemb" for method j_qsort
000000000000f0ad         mov        edx, 0x10                                   ; argument "__size" for method j_qsort
000000000000f0b2         shl        r12, 0x4
000000000000f0b6         mov        rdi, r15                                    ; argument "__base" for method j_qsort
000000000000f0b9         mov        rbp, r15
000000000000f0bc         add        r12, r15
000000000000f0bf         call       j_qsort                                     ; qsort
000000000000f0c4         mov        rdi, rbx                                    ; argument #1 for method xmalloc
000000000000f0c7         xor        ebx, ebx
000000000000f0c9         call       xmalloc                                     ; xmalloc
000000000000f0ce         mov        r13, rax
000000000000f0d1         nop        dword [rax]

                     loc_f0d8:
000000000000f0d8         mov        rsi, qword [rbp]                            ; argument "__src" for method j_stpcpy, CODE XREF=streamsavedir+465
000000000000f0dc         lea        r14, qword [r13+rbx]
000000000000f0e1         add        rbp, 0x10
000000000000f0e5         mov        rdi, r14                                    ; argument "__dest" for method j_stpcpy
000000000000f0e8         call       j_stpcpy                                    ; stpcpy
000000000000f0ed         mov        rdi, qword [rbp-0x10]
000000000000f0f1         sub        rax, r14
000000000000f0f4         lea        rbx, qword [rbx+rax+1]
000000000000f0f9         call       sub_2c80                                    ; sub_2c80
000000000000f0fe         cmp        r12, rbp
000000000000f101         jne        loc_f0d8

000000000000f103         add        rbx, r13
000000000000f106         jmp        loc_f07e
000000000000f10b         align      16

                     loc_f110:
000000000000f110         cmp        qword [rsp+0x78+var_58], r14                ; CODE XREF=streamsavedir+305
000000000000f115         je         loc_f203

000000000000f11b         lea        rbx, qword [r13+r14]
000000000000f120         jmp        loc_f088
000000000000f125         align      8

                     loc_f128:
000000000000f128         mov        rsi, qword [rsp+0x78+var_60]                ; CODE XREF=streamsavedir+181
000000000000f12d         mov        rax, qword [rsp+0x78+var_58]
000000000000f132         mov        rdx, rsi
000000000000f135         sub        rax, r14
000000000000f138         add        rdx, r14
000000000000f13b         mov        qword [rsp+0x78+var_48], rdx
000000000000f140         setb       dl
000000000000f143         cmp        rax, rsi
000000000000f146         movzx      edx, dl
000000000000f149         ja         loc_f195

000000000000f14b         test       rdx, rdx
000000000000f14e         jne        loc_f239

000000000000f154         test       r13, r13
000000000000f157         mov        rdx, qword [rsp+0x78+var_48]
000000000000f15c         je         loc_f21f

000000000000f162         movabs     rax, 0x5555555555555553
000000000000f16c         cmp        rdx, rax
000000000000f16f         ja         loc_f239

000000000000f175         mov        rax, rdx
000000000000f178         shr        rax, 0x1
000000000000f17b         lea        rax, qword [rdx+rax+1]
000000000000f180         mov        qword [rsp+0x78+var_58], rax

                     loc_f185:
000000000000f185         mov        rsi, qword [rsp+0x78+var_58]                ; argument #2 for method xrealloc, CODE XREF=streamsavedir+771
000000000000f18a         mov        rdi, r13                                    ; argument #1 for method xrealloc
000000000000f18d         call       xrealloc                                    ; xrealloc
000000000000f192         mov        r13, rax

                     loc_f195:
000000000000f195         mov        rdx, qword [rsp+0x78+var_60]                ; argument "__n" for method j_memcpy, CODE XREF=streamsavedir+537
000000000000f19a         lea        rdi, qword [r13+r14]                        ; argument "__dest" for method j_memcpy
000000000000f19f         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000f1a2         call       j_memcpy                                    ; memcpy
000000000000f1a7         mov        r14, qword [rsp+0x78+var_48]
000000000000f1ac         jmp        loc_ef94

                     loc_f1b1:
000000000000f1b1         cmp        qword [rsp+0x78+var_68], 0x0                ; CODE XREF=streamsavedir+207
000000000000f1b7         je         loc_f265

000000000000f1bd         movabs     rax, 0x555555555555554
000000000000f1c7         cmp        r12, rax
000000000000f1ca         ja         loc_f239

000000000000f1cc         mov        rax, r12
000000000000f1cf         shr        rax, 0x1
000000000000f1d2         add        rax, qword [rsp+0x78+var_40]
000000000000f1d7         mov        qword [rsp+0x78+var_50], rax

                     loc_f1dc:
000000000000f1dc         mov        rsi, qword [rsp+0x78+var_50]                ; CODE XREF=sub_f23e+94
000000000000f1e1         mov        rdi, qword [rsp+0x78+var_68]                ; argument #1 for method xrealloc
000000000000f1e6         mov        qword [rsp+0x78+var_48], rcx
000000000000f1eb         shl        rsi, 0x4                                    ; argument #2 for method xrealloc
000000000000f1ef         call       xrealloc                                    ; xrealloc
000000000000f1f4         mov        rcx, qword [rsp+0x78+var_48]
000000000000f1f9         mov        qword [rsp+0x78+var_68], rax
000000000000f1fe         jmp        loc_f005

                     loc_f203:
000000000000f203         mov        rbx, qword [rsp+0x78+var_58]                ; CODE XREF=streamsavedir+485
000000000000f208         mov        rdi, r13                                    ; argument #1 for method xrealloc
000000000000f20b         lea        rsi, qword [rbx+1]                          ; argument #2 for method xrealloc
000000000000f20f         call       xrealloc                                    ; xrealloc
000000000000f214         mov        r13, rax
000000000000f217         add        rbx, rax
000000000000f21a         jmp        loc_f088

                     loc_f21f:
000000000000f21f         test       rdx, rdx                                    ; CODE XREF=streamsavedir+556
000000000000f222         mov        eax, 0x80
000000000000f227         cmovne     rax, rdx
000000000000f22b         test       rax, rax
000000000000f22e         mov        qword [rsp+0x78+var_58], rax
000000000000f233         jns        loc_f185

                     loc_f239:
000000000000f239         call       xalloc_die                                  ; xalloc_die, CODE XREF=streamsavedir+542, streamsavedir+575, streamsavedir+666, sub_f23e+77, sub_f23e+82
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_f23e:
000000000000f23e         nop
                        ; endp

                     loc_f240:
000000000000f240         mov        rdi, qword [rsp+0x78+var_68]                ; CODE XREF=streamsavedir+293
000000000000f245         call       sub_2c80                                    ; sub_2c80
000000000000f24a         mov        rdi, r13
000000000000f24d         xor        r13d, r13d
000000000000f250         call       sub_2c80                                    ; sub_2c80
000000000000f255         mov        dword [rbp], ebx
000000000000f258         jmp        loc_f08b

                     loc_f25d:
000000000000f25d         xor        r13d, r13d                                  ; CODE XREF=streamsavedir+35
000000000000f260         jmp        loc_f08b

                     loc_f265:
000000000000f265         test       r12, r12                                    ; CODE XREF=streamsavedir+647
000000000000f268         mov        eax, 0x8
000000000000f26d         mov        edx, 0x10
000000000000f272         cmovne     rax, r12
000000000000f276         xor        esi, esi
000000000000f278         mov        rdi, rax
000000000000f27b         mov        qword [rsp+0x78+var_50], rax
000000000000f280         mov        rax, rdx
000000000000f283         mul        rdi
000000000000f286         jo         loc_f2a1

                     loc_f288:
000000000000f288         test       rax, rax                                    ; CODE XREF=sub_f23e+104
000000000000f28b         js         loc_f239

000000000000f28d         test       rsi, rsi
000000000000f290         jne        loc_f239

000000000000f292         lea        rax, qword [r12+1]
000000000000f297         mov        qword [rsp+0x78+var_40], rax
000000000000f29c         jmp        loc_f1dc

                     loc_f2a1:
000000000000f2a1         mov        esi, 0x1                                    ; CODE XREF=sub_f23e+72
000000000000f2a6         jmp        loc_f288
000000000000f2a8         align      16                                          ; End of unwind block (FDE at 0x19774)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     savedir:
000000000000f2b0         push       r12                                         ; Begin of unwind block (FDE at 0x197c4), CODE XREF=copy_internal+7591
000000000000f2b2         push       rbp
000000000000f2b3         mov        ebp, esi
000000000000f2b5         push       rbx
000000000000f2b6         call       opendir_safer                               ; opendir_safer
000000000000f2bb         test       rax, rax
000000000000f2be         je         loc_f2e8

000000000000f2c0         mov        esi, ebp
000000000000f2c2         mov        rbx, rax
000000000000f2c5         mov        rdi, rax
000000000000f2c8         call       streamsavedir                               ; streamsavedir
000000000000f2cd         mov        rdi, rbx                                    ; argument "__dirp" for method j_closedir
000000000000f2d0         mov        rbp, rax
000000000000f2d3         call       j_closedir                                  ; closedir
000000000000f2d8         test       eax, eax
000000000000f2da         jne        loc_f2f0

                     loc_f2dc:
000000000000f2dc         mov        rax, rbp                                    ; CODE XREF=savedir+58, savedir+88
000000000000f2df         pop        rbx
000000000000f2e0         pop        rbp
000000000000f2e1         pop        r12
000000000000f2e3         ret
                        ; endp
000000000000f2e4         align      8

                     loc_f2e8:
000000000000f2e8         xor        ebp, ebp                                    ; CODE XREF=savedir+14
000000000000f2ea         jmp        loc_f2dc
000000000000f2ec         align      16

                     loc_f2f0:
000000000000f2f0         call       j___errno_location                          ; __errno_location, CODE XREF=savedir+42
000000000000f2f5         mov        r12d, dword [rax]
000000000000f2f8         mov        rbx, rax
000000000000f2fb         mov        rdi, rbp
000000000000f2fe         call       sub_2c80                                    ; sub_2c80
000000000000f303         xor        ebp, ebp
000000000000f305         mov        dword [rbx], r12d
000000000000f308         jmp        loc_f2dc
000000000000f30a         align      16                                          ; End of unwind block (FDE at 0x197c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     try_nocreate:
000000000000f310         push       rbx                                         ; Begin of unwind block (FDE at 0x197f4), DATA XREF=gen_tempname_len+61
000000000000f311         mov        rsi, rdi                                    ; argument "__filename" for method j___lxstat
000000000000f314         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
000000000000f319         sub        rsp, 0xa0
000000000000f320         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___lxstat
000000000000f323         mov        rax, qword [fs:0x28]
000000000000f32c         mov        qword [rsp+0xa8+var_10], rax
000000000000f334         xor        eax, eax
000000000000f336         call       j___lxstat                                  ; __lxstat
000000000000f33b         mov        ebx, eax
000000000000f33d         call       j___errno_location                          ; __errno_location
000000000000f342         test       ebx, ebx
000000000000f344         je         loc_f360

000000000000f346         mov        edx, dword [rax]
000000000000f348         cmp        edx, 0x4b
000000000000f34b         je         loc_f360

000000000000f34d         xor        eax, eax
000000000000f34f         cmp        edx, 0x2
000000000000f352         setne      al
000000000000f355         neg        eax
000000000000f357         jmp        loc_f36b
000000000000f359         align      32

                     loc_f360:
000000000000f360         mov        dword [rax], 0x11                           ; CODE XREF=try_nocreate+52, try_nocreate+59
000000000000f366         mov        eax, 0xffffffff

                     loc_f36b:
000000000000f36b         mov        rcx, qword [rsp+0xa8+var_10]                ; CODE XREF=try_nocreate+71
000000000000f373         xor        rcx, qword [fs:0x28]
000000000000f37c         jne        loc_f387

000000000000f37e         add        rsp, 0xa0
000000000000f385         pop        rbx
000000000000f386         ret
                        ; endp

                     loc_f387:
000000000000f387         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=try_nocreate+108
                        ; endp
000000000000f38c         align      16                                          ; End of unwind block (FDE at 0x197f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     try_dir:
000000000000f390         mov        esi, 0x1c0                                  ; Begin of unwind block (FDE at 0x19818), argument "__mode" for method j_mkdir, DATA XREF=gen_tempname_len+117
000000000000f395         jmp        j_mkdir                                     ; mkdir
                        ; endp
000000000000f39a         align      32                                          ; End of unwind block (FDE at 0x19818)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     try_file:
000000000000f3a0         mov        esi, dword [rsi]                            ; Begin of unwind block (FDE at 0x1982c), DATA XREF=gen_tempname_len+85
000000000000f3a2         mov        edx, 0x180
000000000000f3a7         xor        eax, eax
000000000000f3a9         and        sil, 0x3c
000000000000f3ad         or         sil, 0xc2                                   ; argument "__oflag" for method j_open
000000000000f3b1         jmp        j_open                                      ; open
                        ; endp
000000000000f3b6         align      64                                          ; End of unwind block (FDE at 0x1982c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     try_tempname_len:
000000000000f3c0         push       r15                                         ; Begin of unwind block (FDE at 0x19840), CODE XREF=force_linkat+150, force_symlinkat+122, gen_tempname_len+68, gen_tempname_len+92, gen_tempname_len+124, try_tempname+6
000000000000f3c2         push       r14
000000000000f3c4         mov        r15, rdi
000000000000f3c7         push       r13
000000000000f3c9         push       r12
000000000000f3cb         mov        r14, r8
000000000000f3ce         push       rbp
000000000000f3cf         push       rbx
000000000000f3d0         mov        ebp, esi
000000000000f3d2         sub        rsp, 0x38
000000000000f3d6         mov        qword [rsp+0x68+var_50], rdx
000000000000f3db         mov        qword [rsp+0x68+var_68], rdi
000000000000f3df         mov        qword [rsp+0x68+var_48], rcx
000000000000f3e4         call       j___errno_location                          ; __errno_location
000000000000f3e9         mov        qword [rsp+0x68+var_60], rax
000000000000f3ee         mov        eax, dword [rax]
000000000000f3f0         mov        rdi, r15                                    ; argument "__s" for method j_strlen
000000000000f3f3         mov        dword [rsp+0x68+var_3C], eax
000000000000f3f7         call       j_strlen                                    ; strlen
000000000000f3fc         movsxd     rsi, ebp
000000000000f3ff         lea        rdx, qword [rsi+r14]
000000000000f403         cmp        rdx, rax
000000000000f406         ja         loc_f51b

000000000000f40c         sub        rax, r14
000000000000f40f         mov        rbx, rax
000000000000f412         sub        rbx, rsi
000000000000f415         lea        rsi, qword [aSimplebackupsu+19]             ; argument "__accept" for method j_strspn, 0x1689b
000000000000f41c         lea        rax, qword [r15+rbx]
000000000000f420         mov        rdi, rax                                    ; argument "__s" for method j_strspn
000000000000f423         mov        qword [rsp+0x68+var_58], rax
000000000000f428         call       j_strspn                                    ; strspn
000000000000f42d         cmp        r14, rax
000000000000f430         ja         loc_f51b

000000000000f436         xor        edi, edi
000000000000f438         mov        rsi, r14
000000000000f43b         call       randint_all_new                             ; randint_all_new
000000000000f440         test       rax, rax
000000000000f443         mov        rbp, rax
000000000000f446         je         loc_f52d

000000000000f44c         mov        rax, qword [rsp+0x68+var_68]
000000000000f450         lea        r12, qword [letters]                        ; "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
000000000000f457         mov        r13d, 0x3a2f8
000000000000f45d         add        rax, r14
000000000000f460         add        rbx, rax
000000000000f463         nop        dword [rax+rax]

                     loc_f468:
000000000000f468         test       r14, r14                                    ; CODE XREF=try_tempname_len+253
000000000000f46b         mov        r15, qword [rsp+0x68+var_58]
000000000000f470         je         loc_f497

000000000000f472         nop        word [rax+rax]

                     loc_f478:
000000000000f478         mov        esi, 0x3d                                   ; CODE XREF=try_tempname_len+213
000000000000f47d         mov        rdi, rbp
000000000000f480         add        r15, 0x1
000000000000f484         call       randint_genmax                              ; randint_genmax
000000000000f489         movzx      eax, byte [r12+rax]
000000000000f48e         mov        byte [r15-1], al
000000000000f492         cmp        r15, rbx
000000000000f495         jne        loc_f478

                     loc_f497:
000000000000f497         mov        rsi, qword [rsp+0x68+var_50]                ; CODE XREF=try_tempname_len+176
000000000000f49c         mov        rdi, qword [rsp+0x68+var_68]
000000000000f4a0         mov        rax, qword [rsp+0x68+var_48]
000000000000f4a5         call       rax
000000000000f4a7         test       eax, eax
000000000000f4a9         mov        edx, eax
000000000000f4ab         jns        loc_f4d9

000000000000f4ad         mov        rax, qword [rsp+0x68+var_60]
000000000000f4b2         mov        ecx, dword [rax]
000000000000f4b4         cmp        ecx, 0x11
000000000000f4b7         jne        loc_f514

000000000000f4b9         sub        r13d, 0x1
000000000000f4bd         jne        loc_f468

000000000000f4bf         mov        rdi, rbp
000000000000f4c2         call       randint_all_free                            ; randint_all_free
000000000000f4c7         mov        rax, qword [rsp+0x68+var_60]
000000000000f4cc         mov        edx, 0xffffffff
000000000000f4d1         mov        dword [rax], 0x11
000000000000f4d7         jmp        loc_f503

                     loc_f4d9:
000000000000f4d9         mov        rcx, qword [rsp+0x68+var_60]                ; CODE XREF=try_tempname_len+235
000000000000f4de         mov        eax, dword [rsp+0x68+var_3C]
000000000000f4e2         mov        dword [rcx], eax
000000000000f4e4         mov        ecx, eax

                     loc_f4e6:
000000000000f4e6         mov        rdi, rbp                                    ; CODE XREF=try_tempname_len+345
000000000000f4e9         mov        dword [rsp+0x68+var_58], edx
000000000000f4ed         mov        dword [rsp+0x68+var_68], ecx
000000000000f4f0         call       randint_all_free                            ; randint_all_free
000000000000f4f5         mov        rax, qword [rsp+0x68+var_60]
000000000000f4fa         mov        ecx, dword [rsp+0x68+var_68]
000000000000f4fd         mov        edx, dword [rsp+0x68+var_58]
000000000000f501         mov        dword [rax], ecx

                     loc_f503:
000000000000f503         add        rsp, 0x38                                   ; CODE XREF=try_tempname_len+279, try_tempname_len+363, try_tempname_len+370
000000000000f507         mov        eax, edx
000000000000f509         pop        rbx
000000000000f50a         pop        rbp
000000000000f50b         pop        r12
000000000000f50d         pop        r13
000000000000f50f         pop        r14
000000000000f511         pop        r15
000000000000f513         ret
                        ; endp

                     loc_f514:
000000000000f514         mov        edx, 0xffffffff                             ; CODE XREF=try_tempname_len+247
000000000000f519         jmp        loc_f4e6

                     loc_f51b:
000000000000f51b         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=try_tempname_len+70, try_tempname_len+112
000000000000f520         mov        edx, 0xffffffff
000000000000f525         mov        dword [rax], 0x16
000000000000f52b         jmp        loc_f503

                     loc_f52d:
000000000000f52d         mov        edx, 0xffffffff                             ; CODE XREF=try_tempname_len+134
000000000000f532         jmp        loc_f503
000000000000f534         align      64                                          ; End of unwind block (FDE at 0x19840)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_C: int32_t, -12


                     gen_tempname_len:
000000000000f540         sub        rsp, 0x18                                   ; Begin of unwind block (FDE at 0x1988c), CODE XREF=gen_tempname+6
000000000000f544         cmp        ecx, 0x1
000000000000f547         mov        dword [rsp+0x18+var_C], edx
000000000000f54b         je         loc_f5b0

000000000000f54d         cmp        ecx, 0x2
000000000000f550         je         loc_f578

000000000000f552         test       ecx, ecx
000000000000f554         je         loc_f590

000000000000f556         lea        rcx, qword [__PRETTY_FUNCTION__.5642]       ; argument "__function" for method j___assert_fail, "gen_tempname_len"
000000000000f55d         lea        rsi, qword [aCoreutils831li_16f68]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/tempname.c"
000000000000f564         lea        rdi, qword [aInvalidKindInG]                ; argument "__assertion" for method j___assert_fail, "! \\\"invalid KIND in __gen_tempname\\\""
000000000000f56b         mov        edx, 0x147                                  ; argument "__line" for method j___assert_fail
000000000000f570         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000f575         align      8

                     loc_f578:
000000000000f578         lea        rdx, qword [rsp+0x18+var_C]                 ; CODE XREF=gen_tempname_len+16
000000000000f57d         lea        rcx, qword [try_nocreate]                   ; try_nocreate
000000000000f584         call       try_tempname_len                            ; try_tempname_len
000000000000f589         add        rsp, 0x18
000000000000f58d         ret
                        ; endp
000000000000f58e         align      16

                     loc_f590:
000000000000f590         lea        rdx, qword [rsp+0x18+var_C]                 ; CODE XREF=gen_tempname_len+20
000000000000f595         lea        rcx, qword [try_file]                       ; try_file
000000000000f59c         call       try_tempname_len                            ; try_tempname_len
000000000000f5a1         add        rsp, 0x18
000000000000f5a5         ret
                        ; endp
000000000000f5a6         align      16

                     loc_f5b0:
000000000000f5b0         lea        rdx, qword [rsp+0x18+var_C]                 ; CODE XREF=gen_tempname_len+11
000000000000f5b5         lea        rcx, qword [try_dir]                        ; try_dir
000000000000f5bc         call       try_tempname_len                            ; try_tempname_len
000000000000f5c1         add        rsp, 0x18
000000000000f5c5         ret
                        ; endp
000000000000f5c6         align      16                                          ; End of unwind block (FDE at 0x1988c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gen_tempname:
000000000000f5d0         mov        r8d, 0x6                                    ; Begin of unwind block (FDE at 0x198b0)
000000000000f5d6         jmp        gen_tempname_len                            ; gen_tempname_len
                        ; endp
000000000000f5db         align      32                                          ; End of unwind block (FDE at 0x198b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     try_tempname:
000000000000f5e0         mov        r8d, 0x6                                    ; Begin of unwind block (FDE at 0x198c4)
000000000000f5e6         jmp        try_tempname_len                            ; try_tempname_len
                        ; endp
000000000000f5eb         align      16                                          ; End of unwind block (FDE at 0x198c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_safer:
000000000000f5f0         push       r13                                         ; Begin of unwind block (FDE at 0x198dc), CODE XREF=open_safer+42, openat_safer+41
000000000000f5f2         push       r12
000000000000f5f4         push       rbp
000000000000f5f5         push       rbx
000000000000f5f6         mov        ebx, edi
000000000000f5f8         sub        rsp, 0x8
000000000000f5fc         cmp        edi, 0x2
000000000000f5ff         ja         loc_f622

000000000000f601         call       dup_safer                                   ; dup_safer
000000000000f606         mov        r12d, eax
000000000000f609         call       j___errno_location                          ; __errno_location
000000000000f60e         mov        r13d, dword [rax]
000000000000f611         mov        rbp, rax
000000000000f614         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000f616         call       j_close                                     ; close
000000000000f61b         mov        ebx, r12d
000000000000f61e         mov        dword [rbp], r13d

                     loc_f622:
000000000000f622         add        rsp, 0x8                                    ; CODE XREF=fd_safer+15
000000000000f626         mov        eax, ebx
000000000000f628         pop        rbx
000000000000f629         pop        rbp
000000000000f62a         pop        r12
000000000000f62c         pop        r13
000000000000f62e         ret
                        ; endp
000000000000f62f         align      16                                          ; End of unwind block (FDE at 0x198dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dev_info_hash:
000000000000f630         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x19914), DATA XREF=utimecmpat+1591
000000000000f633         xor        edx, edx
000000000000f635         div        rsi
000000000000f638         mov        rax, rdx
000000000000f63b         ret
                        ; endp
000000000000f63c         align      64                                          ; End of unwind block (FDE at 0x19914)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dev_info_compare:
000000000000f640         mov        rax, qword [rsi]                            ; Begin of unwind block (FDE at 0x19928), DATA XREF=utimecmpat+1598
000000000000f643         cmp        qword [rdi], rax
000000000000f646         sete       al
000000000000f649         ret
                        ; endp
000000000000f64a         align      16                                          ; End of unwind block (FDE at 0x19928)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_FC: int8_t, -252
        ;    var_100: int32_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_11C: int32_t, -284
        ;    var_120: int32_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336


                     utimecmpat:
000000000000f650         push       r15                                         ; Begin of unwind block (FDE at 0x1993c), CODE XREF=utimecmp+17
000000000000f652         push       r14
000000000000f654         push       r13
000000000000f656         push       r12
000000000000f658         push       rbp
000000000000f659         push       rbx
000000000000f65a         mov        ebx, r8d
000000000000f65d         and        ebx, 0x1
000000000000f660         sub        rsp, 0x128
000000000000f667         mov        r13, qword [rcx+0x60]
000000000000f66b         mov        r14, qword [rdx+0x58]
000000000000f66f         mov        rax, qword [fs:0x28]
000000000000f678         mov        qword [rsp+0x158+var_40], rax
000000000000f680         xor        eax, eax
000000000000f682         test       ebx, ebx
000000000000f684         mov        r12, qword [rcx+0x58]
000000000000f688         mov        r15, qword [rdx+0x60]
000000000000f68c         mov        r9d, r13d
000000000000f68f         je         loc_f778

000000000000f695         cmp        r14, r12
000000000000f698         mov        r10d, edi
000000000000f69b         sete       byte [rsp+0x158+var_120]
000000000000f6a0         movzx      edi, byte [rsp+0x158+var_120]
000000000000f6a5         cmp        r15d, r13d
000000000000f6a8         sete       al
000000000000f6ab         and        al, dil
000000000000f6ae         mov        byte [rsp+0x158+var_150], al
000000000000f6b2         jne        loc_f7c0

000000000000f6b8         lea        rax, qword [r12-1]
000000000000f6bd         cmp        rax, r14
000000000000f6c0         jg         loc_f7c8

000000000000f6c6         lea        rax, qword [r14-1]
000000000000f6ca         cmp        rax, r12
000000000000f6cd         jg         loc_f78f

000000000000f6d3         mov        rbp, rdx
000000000000f6d6         mov        rdx, qword [ht.5307]                        ; ht.5307
000000000000f6dd         mov        r11, rsi
000000000000f6e0         test       rdx, rdx
000000000000f6e3         je         loc_fc80

                     loc_f6e9:
000000000000f6e9         mov        rsi, qword [new_dst_res.5308]               ; new_dst_res.5308, CODE XREF=utimecmpat+1660
000000000000f6f0         test       rsi, rsi
000000000000f6f3         je         loc_f7d0

                     loc_f6f9:
000000000000f6f9         mov        rax, qword [rbp]                            ; CODE XREF=utimecmpat+460
000000000000f6fd         mov        rdi, rdx
000000000000f700         mov        qword [rsp+0x158+var_130], r11
000000000000f705         mov        dword [rsp+0x158+var_138], r10d
000000000000f70a         mov        dword [rsp+0x158+var_140], r9d
000000000000f70f         mov        qword [rsi], rax
000000000000f712         call       hash_insert                                 ; hash_insert
000000000000f717         test       rax, rax
000000000000f71a         mov        qword [rsp+0x158+var_148], rax
000000000000f71f         mov        r9d, dword [rsp+0x158+var_140]
000000000000f724         mov        r10d, dword [rsp+0x158+var_138]
000000000000f729         mov        r11, qword [rsp+0x158+var_130]
000000000000f72e         je         loc_f828

000000000000f734         cmp        qword [new_dst_res.5308], rax               ; new_dst_res.5308
000000000000f73b         je         loc_fce0

                     loc_f741:
000000000000f741         mov        rax, qword [rsp+0x158+var_148]              ; CODE XREF=utimecmpat+561, utimecmpat+1691
000000000000f746         cmp        byte [rax+0xc], 0x0
000000000000f74a         mov        esi, dword [rax+8]
000000000000f74d         mov        dword [rsp+0x158+var_140], esi
000000000000f751         je         loc_f8aa

000000000000f757         xor        eax, eax
000000000000f759         cmp        esi, 0x77359400
000000000000f75f         sete       al
000000000000f762         not        eax
000000000000f764         cdqe
000000000000f766         and        r12, rax
000000000000f769         mov        eax, r9d
000000000000f76c         mov        r9d, r13d
000000000000f76f         cdq
000000000000f770         idiv       esi
000000000000f772         sub        r9d, edx
000000000000f775         nop        dword [rax]

                     loc_f778:
000000000000f778         cmp        r12, r14                                    ; CODE XREF=utimecmpat+63, utimecmpat+1572
000000000000f77b         jg         loc_f7c8

000000000000f77d         mov        ebx, 0x1
000000000000f782         jl         loc_f78f

000000000000f784         cmp        r9d, r15d
000000000000f787         jg         loc_f7c8

000000000000f789         setl       bl
000000000000f78c         movzx      ebx, bl

                     loc_f78f:
000000000000f78f         mov        rsi, qword [rsp+0x158+var_40]               ; CODE XREF=utimecmpat+125, utimecmpat+306, utimecmpat+370, utimecmpat+381, utimecmpat+1126, utimecmpat+1142, utimecmpat+1302
000000000000f797         xor        rsi, qword [fs:0x28]
000000000000f7a0         mov        eax, ebx
000000000000f7a2         jne        loc_fd78

000000000000f7a8         add        rsp, 0x128
000000000000f7af         pop        rbx
000000000000f7b0         pop        rbp
000000000000f7b1         pop        r12
000000000000f7b3         pop        r13
000000000000f7b5         pop        r14
000000000000f7b7         pop        r15
000000000000f7b9         ret
                        ; endp
000000000000f7ba         align      64

                     loc_f7c0:
000000000000f7c0         xor        ebx, ebx                                    ; CODE XREF=utimecmpat+98
000000000000f7c2         jmp        loc_f78f
000000000000f7c4         align      8

                     loc_f7c8:
000000000000f7c8         mov        ebx, 0xffffffff                             ; CODE XREF=utimecmpat+112, utimecmpat+299, utimecmpat+311, utimecmpat+1151, utimecmpat+1175
000000000000f7cd         jmp        loc_f78f
000000000000f7cf         align      16

                     loc_f7d0:
000000000000f7d0         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=utimecmpat+163
000000000000f7d5         mov        qword [rsp+0x158+var_130], r11
000000000000f7da         mov        dword [rsp+0x158+var_138], r10d
000000000000f7df         mov        dword [rsp+0x158+var_140], r9d
000000000000f7e4         mov        qword [rsp+0x158+var_148], rdx
000000000000f7e9         call       j_malloc                                    ; malloc
000000000000f7ee         test       rax, rax
000000000000f7f1         mov        rsi, rax
000000000000f7f4         mov        qword [new_dst_res.5308], rax               ; new_dst_res.5308
000000000000f7fb         mov        rdx, qword [rsp+0x158+var_148]
000000000000f800         mov        r9d, dword [rsp+0x158+var_140]
000000000000f805         mov        r10d, dword [rsp+0x158+var_138]
000000000000f80a         mov        r11, qword [rsp+0x158+var_130]
000000000000f80f         je         loc_f838

000000000000f811         mov        dword [rax+8], 0x77359400
000000000000f818         mov        byte [rax+0xc], 0x0
000000000000f81c         jmp        loc_f6f9
000000000000f821         align      8

                     loc_f828:
000000000000f828         mov        rdx, qword [ht.5307]                        ; ht.5307, CODE XREF=utimecmpat+222
000000000000f82f         test       rdx, rdx
000000000000f832         je         loc_fcd2

                     loc_f838:
000000000000f838         lea        rcx, qword [rsp+0x158+var_108]              ; CODE XREF=utimecmpat+447
000000000000f83d         mov        rax, qword [rbp]
000000000000f841         mov        rdi, rdx
000000000000f844         mov        qword [rsp+0x158+var_128], r11
000000000000f849         mov        dword [rsp+0x158+var_130], r10d
000000000000f84e         mov        rsi, rcx
000000000000f851         mov        dword [rsp+0x158+var_138], r9d
000000000000f856         mov        qword [rsp+0x158+var_140], rcx
000000000000f85b         mov        qword [rsp+0x158+var_108], rax
000000000000f860         call       hash_lookup                                 ; hash_lookup
000000000000f865         test       rax, rax
000000000000f868         mov        qword [rsp+0x158+var_148], rax
000000000000f86d         mov        rcx, qword [rsp+0x158+var_140]
000000000000f872         mov        r9d, dword [rsp+0x158+var_138]
000000000000f877         mov        r10d, dword [rsp+0x158+var_130]
000000000000f87c         mov        r11, qword [rsp+0x158+var_128]
000000000000f881         jne        loc_f741

000000000000f887         nop        word [rax+rax]

                     loc_f890:
000000000000f890         mov        dword [rsp+0x158+var_100], 0x77359400       ; CODE XREF=utimecmpat+1671
000000000000f898         mov        byte [rsp+0x158+var_FC], 0x0
000000000000f89d         mov        dword [rsp+0x158+var_140], 0x77359400
000000000000f8a5         mov        qword [rsp+0x158+var_148], rcx

                     loc_f8aa:
000000000000f8aa         mov        rcx, qword [rbp+0x50]                       ; CODE XREF=utimecmpat+257
000000000000f8ae         mov        eax, 0x66666667
000000000000f8b3         mov        rsi, qword [rbp+0x70]
000000000000f8b7         imul       ecx
000000000000f8b9         mov        eax, ecx
000000000000f8bb         mov        qword [rsp+0x158+var_130], rcx
000000000000f8c0         sar        eax, 0x1f
000000000000f8c3         sar        edx, 0x2
000000000000f8c6         sub        edx, eax
000000000000f8c8         lea        eax, dword [rdx+rdx*4]
000000000000f8cb         mov        dword [rsp+0x158+var_138], edx
000000000000f8cf         add        eax, eax
000000000000f8d1         sub        ecx, eax
000000000000f8d3         mov        eax, 0x66666667
000000000000f8d8         imul       esi
000000000000f8da         mov        eax, esi
000000000000f8dc         sar        eax, 0x1f
000000000000f8df         sar        edx, 0x2
000000000000f8e2         mov        edi, edx
000000000000f8e4         sub        edi, eax
000000000000f8e6         lea        eax, dword [rdi+rdi*4]
000000000000f8e9         add        eax, eax
000000000000f8eb         sub        esi, eax
000000000000f8ed         mov        eax, 0x66666667
000000000000f8f2         imul       r15d
000000000000f8f5         mov        eax, r15d
000000000000f8f8         or         ecx, esi
000000000000f8fa         sar        eax, 0x1f
000000000000f8fd         mov        esi, r15d
000000000000f900         sar        edx, 0x2
000000000000f903         mov        r8d, edx
000000000000f906         sub        r8d, eax
000000000000f909         lea        eax, dword [r8+r8*4]
000000000000f90d         add        eax, eax
000000000000f90f         sub        esi, eax
000000000000f911         or         ecx, esi
000000000000f913         jne        loc_fc68

000000000000f919         cmp        dword [rsp+0x158+var_140], 0xa
000000000000f91e         mov        rax, qword [rbp+0x48]
000000000000f922         mov        ecx, edi
000000000000f924         mov        edx, dword [rsp+0x158+var_138]
000000000000f928         mov        esi, r8d
000000000000f92b         mov        qword [rsp+0x158+var_110], rax
000000000000f930         mov        dword [rsp+0x158+var_128], edx
000000000000f934         jle        loc_fd48

000000000000f93a         mov        eax, 0x66666667
000000000000f93f         imul       edi
000000000000f941         mov        eax, edi
000000000000f943         sar        eax, 0x1f
000000000000f946         sar        edx, 0x2
000000000000f949         sub        edx, eax
000000000000f94b         lea        eax, dword [rdx+rdx*4]
000000000000f94e         add        eax, eax
000000000000f950         sub        edi, eax
000000000000f952         mov        eax, 0x66666667
000000000000f957         imul       dword [rsp+0x158+var_138]
000000000000f95b         mov        eax, dword [rsp+0x158+var_138]
000000000000f95f         sar        eax, 0x1f
000000000000f962         sar        edx, 0x2
000000000000f965         sub        edx, eax
000000000000f967         lea        eax, dword [rdx+rdx*4]
000000000000f96a         mov        edx, dword [rsp+0x158+var_138]
000000000000f96e         mov        dword [rsp+0x158+var_138], 0xa
000000000000f976         add        eax, eax
000000000000f978         sub        edx, eax
000000000000f97a         mov        eax, 0x66666667
000000000000f97f         or         edi, edx
000000000000f981         imul       r8d
000000000000f984         mov        eax, r8d
000000000000f987         mov        dword [rsp+0x158+var_11C], edi
000000000000f98b         sar        eax, 0x1f
000000000000f98e         mov        edi, 0x66666667
000000000000f993         sar        edx, 0x2
000000000000f996         sub        edx, eax
000000000000f998         lea        eax, dword [rdx+rdx*4]
000000000000f99b         mov        edx, 0x8
000000000000f9a0         add        eax, eax
000000000000f9a2         sub        r8d, eax
000000000000f9a5         mov        eax, dword [rsp+0x158+var_11C]
000000000000f9a9         or         eax, r8d
000000000000f9ac         jne        loc_fd64

000000000000f9b2         mov        dword [rsp+0x158+var_11C], r9d
000000000000f9b7         mov        qword [rsp+0x158+var_118], r14
000000000000f9bc         mov        r9d, 0xa
000000000000f9c2         mov        r8d, dword [rsp+0x158+var_128]
000000000000f9c7         mov        qword [rsp+0x158+var_138], r12
000000000000f9cc         mov        r14d, edx
000000000000f9cf         mov        qword [rsp+0x158+var_128], rbp

                     loc_f9d4:
000000000000f9d4         mov        eax, r8d                                    ; CODE XREF=utimecmpat+1054
000000000000f9d7         sar        r8d, 0x1f
000000000000f9db         lea        ebp, dword [r9+r9*4]
000000000000f9df         imul       edi
000000000000f9e1         mov        eax, ecx
000000000000f9e3         sar        ecx, 0x1f
000000000000f9e6         add        ebp, ebp
000000000000f9e8         mov        r9d, ebp
000000000000f9eb         sar        edx, 0x2
000000000000f9ee         sub        edx, r8d
000000000000f9f1         mov        r8d, edx
000000000000f9f4         imul       edi
000000000000f9f6         mov        eax, esi
000000000000f9f8         sar        esi, 0x1f
000000000000f9fb         sar        edx, 0x2
000000000000f9fe         sub        edx, ecx
000000000000fa00         mov        ecx, edx
000000000000fa02         imul       edi
000000000000fa04         sar        edx, 0x2
000000000000fa07         sub        edx, esi
000000000000fa09         cmp        ebp, dword [rsp+0x158+var_140]
000000000000fa0d         mov        esi, edx
000000000000fa0f         jge        loc_fcf0

000000000000fa15         mov        eax, r8d
000000000000fa18         mov        r12d, r8d
000000000000fa1b         imul       edi
000000000000fa1d         mov        eax, r8d
000000000000fa20         sar        eax, 0x1f
000000000000fa23         sar        edx, 0x2
000000000000fa26         sub        edx, eax
000000000000fa28         lea        eax, dword [rdx+rdx*4]
000000000000fa2b         add        eax, eax
000000000000fa2d         sub        r12d, eax
000000000000fa30         mov        eax, ecx
000000000000fa32         imul       edi
000000000000fa34         mov        eax, ecx
000000000000fa36         sar        eax, 0x1f
000000000000fa39         sar        edx, 0x2
000000000000fa3c         sub        edx, eax
000000000000fa3e         lea        eax, dword [rdx+rdx*4]
000000000000fa41         mov        edx, ecx
000000000000fa43         add        eax, eax
000000000000fa45         sub        edx, eax
000000000000fa47         mov        eax, esi
000000000000fa49         or         r12d, edx
000000000000fa4c         imul       edi
000000000000fa4e         mov        eax, esi
000000000000fa50         sar        eax, 0x1f
000000000000fa53         sar        edx, 0x2
000000000000fa56         sub        edx, eax
000000000000fa58         lea        eax, dword [rdx+rdx*4]
000000000000fa5b         mov        edx, esi
000000000000fa5d         add        eax, eax
000000000000fa5f         sub        edx, eax
000000000000fa61         or         r12d, edx
000000000000fa64         jne        loc_fcf0

000000000000fa6a         sub        r14d, 0x1
000000000000fa6e         jne        loc_f9d4

000000000000fa74         mov        r14, qword [rsp+0x158+var_118]
000000000000fa79         mov        rbp, qword [rsp+0x158+var_128]
000000000000fa7e         mov        rax, qword [rsp+0x158+var_110]
000000000000fa83         mov        r12, qword [rsp+0x158+var_138]
000000000000fa88         mov        r9d, dword [rsp+0x158+var_11C]
000000000000fa8d         or         rax, r14
000000000000fa90         or         rax, qword [rbp+0x68]
000000000000fa94         test       al, 0x1
000000000000fa96         mov        rax, qword [rsp+0x158+var_148]
000000000000fa9b         je         loc_fd28

000000000000faa1         mov        dword [rax+8], 0x3b9aca00
000000000000faa8         mov        dword [rsp+0x158+var_138], 0x3b9aca00
000000000000fab0         mov        rax, r12

                     loc_fab3:
000000000000fab3         cmp        r14, r12                                    ; CODE XREF=utimecmpat+1747, utimecmpat+1779, utimecmpat+1807, utimecmpat+1827
000000000000fab6         jg         loc_f78f

000000000000fabc         cmp        r15d, r13d
000000000000fabf         jl         loc_facc

000000000000fac1         cmp        byte [rsp+0x158+var_120], 0x0
000000000000fac6         jne        loc_f78f

                     loc_facc:
000000000000facc         cmp        r14, rax                                    ; CODE XREF=utimecmpat+1135
000000000000facf         jl         loc_f7c8

000000000000fad5         jne        loc_faed

000000000000fad7         mov        eax, r9d
000000000000fada         cdq
000000000000fadb         idiv       dword [rsp+0x158+var_138]
000000000000fadf         mov        eax, r13d
000000000000fae2         sub        eax, edx
000000000000fae4         cmp        eax, r15d
000000000000fae7         jg         loc_f7c8

                     loc_faed:
000000000000faed         mov        rax, qword [rsp+0x158+var_110]              ; CODE XREF=utimecmpat+1157
000000000000faf2         mov        edx, 0x38e38e39
000000000000faf7         lea        rbp, qword [rsp+0x158+var_F8]
000000000000fafc         mov        rsi, r11                                    ; argument "__path" for method j_utimensat
000000000000faff         mov        edi, r10d                                   ; argument "__fd" for method j_utimensat
000000000000fb02         mov        ecx, 0x100                                  ; argument "__flags" for method j_utimensat
000000000000fb07         mov        dword [rsp+0x158+var_140], r9d
000000000000fb0c         mov        dword [rsp+0x158+var_120], r10d
000000000000fb11         mov        qword [rsp+0x158+var_F8], rax
000000000000fb16         movsxd     rax, dword [rsp+0x158+var_130]
000000000000fb1b         mov        qword [rsp+0x158+var_F0], rax
000000000000fb20         movzx      eax, byte [rsp+0x158+var_150]
000000000000fb25         mov        qword [rsp+0x158+var_150], r11
000000000000fb2a         or         rax, r14
000000000000fb2d         mov        qword [rsp+0x158+var_E8], rax
000000000000fb32         mov        eax, dword [rsp+0x158+var_138]
000000000000fb36         mul        edx
000000000000fb38         mov        eax, edx
000000000000fb3a         mov        rdx, rbp                                    ; argument "__times" for method j_utimensat
000000000000fb3d         shr        eax, 0x1
000000000000fb3f         add        eax, r15d
000000000000fb42         cdqe
000000000000fb44         mov        qword [rsp+0x158+var_E0], rax
000000000000fb49         call       j_utimensat                                 ; utimensat
000000000000fb4e         test       eax, eax
000000000000fb50         mov        r10d, dword [rsp+0x158+var_120]
000000000000fb55         mov        r11, qword [rsp+0x158+var_150]
000000000000fb5a         mov        r9d, dword [rsp+0x158+var_140]
000000000000fb5f         je         loc_fb6b

                     loc_fb61:
000000000000fb61         mov        ebx, 0xfffffffe                             ; CODE XREF=utimecmpat+1889
000000000000fb66         jmp        loc_f78f

                     loc_fb6b:
000000000000fb6b         lea        rcx, qword [rsp+0x158+var_D8]               ; argument "__stat_buf" for method j___fxstatat, CODE XREF=utimecmpat+1295
000000000000fb73         mov        rdx, r11                                    ; argument "__filename" for method j___fxstatat
000000000000fb76         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
000000000000fb7c         mov        esi, r10d                                   ; argument "__fildes" for method j___fxstatat
000000000000fb7f         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
000000000000fb84         mov        dword [rsp+0x158+var_140], r9d
000000000000fb89         mov        qword [rsp+0x158+var_150], r11
000000000000fb8e         mov        dword [rsp+0x158+var_120], r10d
000000000000fb93         call       j___fxstatat                                ; __fxstatat
000000000000fb98         mov        rcx, qword [rsp+0x158+var_78]
000000000000fba0         mov        r8d, eax
000000000000fba3         mov        rax, qword [rsp+0x158+var_80]
000000000000fbab         movsxd     rdx, r15d
000000000000fbae         mov        r10d, dword [rsp+0x158+var_120]
000000000000fbb3         mov        r11, qword [rsp+0x158+var_150]
000000000000fbb8         mov        r9d, dword [rsp+0x158+var_140]
000000000000fbbd         xor        rcx, rdx
000000000000fbc0         xor        rax, r14
000000000000fbc3         or         rax, rcx
000000000000fbc6         movsxd     rcx, r8d
000000000000fbc9         or         rax, rcx
000000000000fbcc         jne        loc_fd7d

                     loc_fbd2:
000000000000fbd2         mov        ecx, dword [rsp+0x158+var_80]               ; CODE XREF=utimecmpat+1895
000000000000fbd9         mov        esi, 0xa
000000000000fbde         and        ecx, 0x1
000000000000fbe1         imul       ecx, ecx, 0x3b9aca00
000000000000fbe7         add        ecx, dword [rsp+0x158+var_78]
000000000000fbee         mov        eax, ecx
000000000000fbf0         cdq
000000000000fbf1         idiv       esi
000000000000fbf3         test       edx, edx
000000000000fbf5         jne        loc_fdc5

000000000000fbfb         cmp        dword [rsp+0x158+var_138], 0xa
000000000000fc00         je         loc_fc3d

000000000000fc02         mov        r8d, 0x9
000000000000fc08         mov        esi, 0xa
000000000000fc0d         mov        edi, 0xa
000000000000fc12         jmp        loc_fc1d

                     loc_fc14:
000000000000fc14         imul       esi, esi, 0xa                               ; CODE XREF=utimecmpat+1507
000000000000fc17         cmp        esi, dword [rsp+0x158+var_138]
000000000000fc1b         je         loc_fc3d

                     loc_fc1d:
000000000000fc1d         mov        eax, ecx                                    ; CODE XREF=utimecmpat+1474
000000000000fc1f         cdq
000000000000fc20         idiv       edi
000000000000fc22         cdq
000000000000fc23         mov        ecx, eax
000000000000fc25         idiv       edi
000000000000fc27         test       edx, edx
000000000000fc29         jne        loc_fdbc

000000000000fc2f         sub        r8d, 0x1
000000000000fc33         jne        loc_fc14

000000000000fc35         mov        dword [rsp+0x158+var_138], 0x77359400

                     loc_fc3d:
000000000000fc3d         mov        esi, dword [rsp+0x158+var_138]              ; CODE XREF=utimecmpat+1456, utimecmpat+1483, utimecmpat+1904, utimecmpat+1913
000000000000fc41         xor        eax, eax
000000000000fc43         cmp        esi, 0x77359400
000000000000fc49         mov        ebx, esi
000000000000fc4b         sete       al
000000000000fc4e         not        eax
000000000000fc50         cdqe
000000000000fc52         and        r12, rax
000000000000fc55         mov        eax, r9d
000000000000fc58         mov        r9d, r13d
000000000000fc5b         cdq
000000000000fc5c         idiv       esi
000000000000fc5e         sub        r9d, edx
000000000000fc61         nop        dword [rax]

                     loc_fc68:
000000000000fc68         mov        rax, qword [rsp+0x158+var_148]              ; CODE XREF=utimecmpat+707
000000000000fc6d         mov        dword [rax+8], ebx
000000000000fc70         mov        byte [rax+0xc], 0x1
000000000000fc74         jmp        loc_f778
000000000000fc79         align      128

                     loc_fc80:
000000000000fc80         mov        r8, qword [qword_21bfc8]                    ; qword_21bfc8, CODE XREF=utimecmpat+147
000000000000fc87         lea        rdx, qword [dev_info_hash]                  ; dev_info_hash
000000000000fc8e         lea        rcx, qword [dev_info_compare]               ; dev_info_compare
000000000000fc95         mov        qword [rsp+0x158+var_138], rsi
000000000000fc9a         mov        edi, 0x10
000000000000fc9f         xor        esi, esi
000000000000fca1         mov        dword [rsp+0x158+var_140], r10d
000000000000fca6         mov        dword [rsp+0x158+var_148], r13d
000000000000fcab         call       hash_initialize                             ; hash_initialize
000000000000fcb0         test       rax, rax
000000000000fcb3         mov        rdx, rax
000000000000fcb6         mov        qword [ht.5307], rax                        ; ht.5307
000000000000fcbd         mov        r9d, dword [rsp+0x158+var_148]
000000000000fcc2         mov        r10d, dword [rsp+0x158+var_140]
000000000000fcc7         mov        r11, qword [rsp+0x158+var_138]
000000000000fccc         jne        loc_f6e9

                     loc_fcd2:
000000000000fcd2         lea        rcx, qword [rsp+0x158+var_108]              ; CODE XREF=utimecmpat+482
000000000000fcd7         jmp        loc_f890
000000000000fcdc         align      32

                     loc_fce0:
000000000000fce0         mov        qword [new_dst_res.5308], 0x0               ; new_dst_res.5308, CODE XREF=utimecmpat+235
000000000000fceb         jmp        loc_f741

                     loc_fcf0:
000000000000fcf0         cmp        ebp, 0x77359400                             ; CODE XREF=utimecmpat+959, utimecmpat+1044
000000000000fcf6         mov        r12, qword [rsp+0x158+var_138]
000000000000fcfb         mov        rsi, qword [rsp+0x158+var_148]
000000000000fd00         sete       byte [rsp+0x158+var_150]
000000000000fd05         movzx      eax, byte [rsp+0x158+var_150]
000000000000fd0a         mov        dword [rsp+0x158+var_138], r9d
000000000000fd0f         mov        r14, qword [rsp+0x158+var_118]
000000000000fd14         mov        r9d, dword [rsp+0x158+var_11C]
000000000000fd19         mov        dword [rsi+8], ebp
000000000000fd1c         not        eax
000000000000fd1e         cdqe
000000000000fd20         and        rax, r12
000000000000fd23         jmp        loc_fab3

                     loc_fd28:
000000000000fd28         mov        dword [rax+8], 0x77359400                   ; CODE XREF=utimecmpat+1099
000000000000fd2f         mov        rax, r12
000000000000fd32         mov        byte [rsp+0x158+var_150], 0x1
000000000000fd37         and        rax, 0xfffffffffffffffe
000000000000fd3b         mov        dword [rsp+0x158+var_138], 0x77359400
000000000000fd43         jmp        loc_fab3

                     loc_fd48:
000000000000fd48         mov        rax, qword [rsp+0x158+var_148]              ; CODE XREF=utimecmpat+740
000000000000fd4d         mov        dword [rsp+0x158+var_138], 0xa
000000000000fd55         mov        dword [rax+8], 0xa
000000000000fd5c         mov        rax, r12
000000000000fd5f         jmp        loc_fab3

                     loc_fd64:
000000000000fd64         mov        rax, qword [rsp+0x158+var_148]              ; CODE XREF=utimecmpat+860
000000000000fd69         mov        dword [rax+8], 0xa
000000000000fd70         mov        rax, r12
000000000000fd73         jmp        loc_fab3

                     loc_fd78:
000000000000fd78         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=utimecmpat+338
                        ; endp

                     loc_fd7d:
000000000000fd7d         mov        qword [rsp+0x158+var_E0], rdx               ; CODE XREF=utimecmpat+1404
000000000000fd82         mov        ecx, 0x100                                  ; argument "__flags" for method j_utimensat
000000000000fd87         mov        rdx, rbp                                    ; argument "__times" for method j_utimensat
000000000000fd8a         mov        rsi, r11                                    ; argument "__path" for method j_utimensat
000000000000fd8d         mov        edi, r10d                                   ; argument "__fd" for method j_utimensat
000000000000fd90         mov        dword [rsp+0x158+var_150], r8d
000000000000fd95         mov        dword [rsp+0x158+var_120], r9d
000000000000fd9a         mov        qword [rsp+0x158+var_E8], r14
000000000000fd9f         call       j_utimensat                                 ; utimensat
000000000000fda4         mov        r8d, dword [rsp+0x158+var_150]
000000000000fda9         mov        r9d, dword [rsp+0x158+var_120]
000000000000fdae         test       r8d, r8d
000000000000fdb1         jne        loc_fb61

000000000000fdb7         jmp        loc_fbd2

                     loc_fdbc:
000000000000fdbc         mov        dword [rsp+0x158+var_138], esi              ; CODE XREF=utimecmpat+1497
000000000000fdc0         jmp        loc_fc3d

                     loc_fdc5:
000000000000fdc5         mov        dword [rsp+0x158+var_138], ebx              ; CODE XREF=utimecmpat+1445
000000000000fdc9         jmp        loc_fc3d
000000000000fdce         align      16                                          ; End of unwind block (FDE at 0x1993c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     utimecmp:
000000000000fdd0         mov        r8d, ecx                                    ; Begin of unwind block (FDE at 0x1998c), CODE XREF=copy_internal+651
000000000000fdd3         mov        rcx, rdx
000000000000fdd6         mov        rdx, rsi
000000000000fdd9         mov        rsi, rdi
000000000000fddc         mov        edi, 0xffffff9c
000000000000fde1         jmp        utimecmpat                                  ; utimecmpat
                        ; endp
000000000000fde6         align      16                                          ; End of unwind block (FDE at 0x1998c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_19: int8_t, -25


                     update_timespec:
000000000000fdf0         push       rbp                                         ; Begin of unwind block (FDE at 0x199a4), CODE XREF=fdutimens+612, lutimens+197
000000000000fdf1         push       rbx
000000000000fdf2         mov        rbp, rdi
000000000000fdf5         sub        rsp, 0x18
000000000000fdf9         mov        rbx, qword [rsi]
000000000000fdfc         mov        rax, qword [rbx+8]
000000000000fe00         mov        rdx, qword [rbx+0x18]
000000000000fe04         cmp        rax, 0x3ffffffe
000000000000fe0a         je         loc_fe70

000000000000fe0c         cmp        rax, 0x3fffffff
000000000000fe12         je         loc_fe30

000000000000fe14         cmp        rdx, 0x3ffffffe
000000000000fe1b         je         loc_fe4e

                     loc_fe1d:
000000000000fe1d         xor        eax, eax                                    ; CODE XREF=update_timespec+92
000000000000fe1f         cmp        rdx, 0x3fffffff
000000000000fe26         je         loc_fe98

                     loc_fe28:
000000000000fe28         add        rsp, 0x18                                   ; CODE XREF=update_timespec+140, update_timespec+166, update_timespec+209
000000000000fe2c         pop        rbx
000000000000fe2d         pop        rbp
000000000000fe2e         ret
                        ; endp
000000000000fe2f         align      16

                     loc_fe30:
000000000000fe30         cmp        rdx, 0x3fffffff                             ; CODE XREF=update_timespec+34
000000000000fe37         je         loc_feb8

000000000000fe39         mov        rdi, rbx
000000000000fe3c         call       gettime                                     ; gettime
000000000000fe41         mov        rdx, qword [rbx+0x18]
000000000000fe45         cmp        rdx, 0x3ffffffe
000000000000fe4c         jne        loc_fe1d

                     loc_fe4e:
000000000000fe4e         mov        rax, qword [rbp+0x60]                       ; CODE XREF=update_timespec+43
000000000000fe52         mov        rdx, qword [rbp+0x58]
000000000000fe56         mov        qword [rbx+0x18], rax
000000000000fe5a         mov        qword [rbx+0x10], rdx
000000000000fe5e         add        rsp, 0x18
000000000000fe62         xor        eax, eax
000000000000fe64         pop        rbx
000000000000fe65         pop        rbp
000000000000fe66         ret
                        ; endp
000000000000fe67         align      16

                     loc_fe70:
000000000000fe70         cmp        rdx, 0x3ffffffe                             ; CODE XREF=update_timespec+26
000000000000fe77         mov        eax, 0x1
000000000000fe7c         je         loc_fe28

000000000000fe7e         mov        rax, qword [rdi+0x50]
000000000000fe82         mov        rcx, qword [rdi+0x48]
000000000000fe86         mov        qword [rbx+8], rax
000000000000fe8a         xor        eax, eax
000000000000fe8c         cmp        rdx, 0x3fffffff
000000000000fe93         mov        qword [rbx], rcx
000000000000fe96         jne        loc_fe28

                     loc_fe98:
000000000000fe98         lea        rdi, qword [rbx+0x10]                       ; CODE XREF=update_timespec+54
000000000000fe9c         mov        byte [rsp+0x28+var_19], al
000000000000fea0         call       gettime                                     ; gettime
000000000000fea5         movzx      eax, byte [rsp+0x28+var_19]
000000000000feaa         add        rsp, 0x18
000000000000feae         pop        rbx
000000000000feaf         pop        rbp
000000000000feb0         ret
                        ; endp
000000000000feb1         align      8

                     loc_feb8:
000000000000feb8         mov        qword [rsi], 0x0                            ; CODE XREF=update_timespec+71
000000000000febf         xor        eax, eax
000000000000fec1         jmp        loc_fe28
000000000000fec6         align      16                                          ; End of unwind block (FDE at 0x199a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     validate_timespec:
000000000000fed0         mov        r9, qword [rdi+8]                           ; Begin of unwind block (FDE at 0x199e8), CODE XREF=fdutimens+77, lutimens+71
000000000000fed4         lea        rcx, qword [r9-0x3ffffffe]
000000000000fedb         cmp        rcx, 0x1
000000000000fedf         jbe        loc_feea

000000000000fee1         cmp        r9, 0x3b9ac9ff
000000000000fee8         ja         loc_ff60

                     loc_feea:
000000000000feea         mov        rdx, qword [rdi+0x18]                       ; CODE XREF=validate_timespec+15
000000000000feee         lea        r8, qword [rdx-0x3ffffffe]
000000000000fef5         cmp        r8, 0x1
000000000000fef9         jbe        loc_ff04

000000000000fefb         cmp        rdx, 0x3b9ac9ff
000000000000ff02         ja         loc_ff60

                     loc_ff04:
000000000000ff04         xor        esi, esi                                    ; CODE XREF=validate_timespec+41
000000000000ff06         xor        r10d, r10d
000000000000ff09         cmp        rcx, 0x1
000000000000ff0d         ja         loc_ff29

000000000000ff0f         xor        esi, esi
000000000000ff11         cmp        r9, 0x3ffffffe
000000000000ff18         mov        qword [rdi], 0x0
000000000000ff1f         sete       sil
000000000000ff23         mov        r10d, 0x1

                     loc_ff29:
000000000000ff29         cmp        r8, 0x1                                     ; CODE XREF=validate_timespec+61
000000000000ff2d         ja         loc_ff4b

000000000000ff2f         xor        eax, eax
000000000000ff31         cmp        rdx, 0x3ffffffe
000000000000ff38         mov        qword [rdi+0x10], 0x0
000000000000ff40         sete       al
000000000000ff43         mov        r10d, 0x1
000000000000ff49         add        esi, eax

                     loc_ff4b:
000000000000ff4b         xor        eax, eax                                    ; CODE XREF=validate_timespec+93
000000000000ff4d         cmp        esi, 0x1
000000000000ff50         sete       al
000000000000ff53         add        eax, r10d
000000000000ff56         ret
                        ; endp
000000000000ff57         align      32

                     loc_ff60:
000000000000ff60         sub        rsp, 0x8                                    ; CODE XREF=validate_timespec+24, validate_timespec+50
000000000000ff64         call       j___errno_location                          ; __errno_location
000000000000ff69         mov        dword [rax], 0x16
000000000000ff6f         mov        eax, 0xffffffff
000000000000ff74         add        rsp, 0x8
000000000000ff78         ret
                        ; endp
000000000000ff79         align      128                                         ; End of unwind block (FDE at 0x199e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     lutimensat:
000000000000ff80         mov        ecx, 0x100                                  ; Begin of unwind block (FDE at 0x19a00), argument "__flags" for method j_utimensat
000000000000ff85         jmp        j_utimensat                                 ; utimensat
                        ; endp
000000000000ff8a         align      16                                          ; End of unwind block (FDE at 0x19a00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_C8: int8_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int8_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_118: -280
        ;    var_128: int8_t, -296
        ;    var_130: int64_t, -304


                     fdutimens:
000000000000ff90         push       r14                                         ; Begin of unwind block (FDE at 0x19a14), CODE XREF=copy_internal+14866, lutimens+241
000000000000ff92         push       r13
000000000000ff94         push       r12
000000000000ff96         push       rbp
000000000000ff97         mov        r12, rsi
000000000000ff9a         push       rbx
000000000000ff9b         mov        ebx, edi
000000000000ff9d         sub        rsp, 0x110
000000000000ffa4         mov        rax, qword [fs:0x28]
000000000000ffad         mov        qword [rsp+0x138+var_30], rax
000000000000ffb5         xor        eax, eax
000000000000ffb7         test       rdx, rdx
000000000000ffba         je         loc_10280

000000000000ffc0         movdqu     xmm0, xmmword [rdx]
000000000000ffc4         lea        rdi, qword [rsp+0x138+var_128]
000000000000ffc9         movaps     xmmword [rsp+0x138+var_128], xmm0
000000000000ffce         mov        qword [rsp+0x138+var_130], rdi
000000000000ffd3         movdqu     xmm0, xmmword [rdx+0x10]
000000000000ffd8         movaps     xmmword [rsp+0x138+var_118], xmm0
000000000000ffdd         call       validate_timespec                           ; validate_timespec
000000000000ffe2         test       eax, eax
000000000000ffe4         mov        r13d, eax
000000000000ffe7         js         loc_103a3

                     loc_ffed:
000000000000ffed         test       ebx, ebx                                    ; CODE XREF=fdutimens+764
000000000000ffef         jns        loc_fffa

000000000000fff1         test       r12, r12
000000000000fff4         je         loc_10398

                     loc_fffa:
000000000000fffa         mov        eax, dword [utimensat_works_really]         ; utimensat_works_really, CODE XREF=fdutimens+95
0000000000010000         test       eax, eax
0000000000010002         js         loc_10038

0000000000010004         cmp        r13d, 0x2
0000000000010008         je         loc_10210

000000000001000e         mov        rsi, qword [rsp+0x138+var_130]

                     loc_10013:
0000000000010013         test       ebx, ebx                                    ; CODE XREF=fdutimens+711, fdutimens+741, fdutimens+1021
0000000000010015         js         loc_10340

000000000001001b         mov        edi, ebx                                    ; argument "__fd" for method j_futimens
000000000001001d         call       j_futimens                                  ; futimens
0000000000010022         cmp        eax, 0x0
0000000000010025         mov        ebp, eax
0000000000010027         jle        loc_1035d

                     loc_1002d:
000000000001002d         call       j___errno_location                          ; __errno_location, CODE XREF=fdutimens+967
0000000000010032         mov        dword [rax], 0x26

                     loc_10038:
0000000000010038         test       r13d, r13d                                  ; CODE XREF=fdutimens+114, fdutimens+1113
000000000001003b         mov        dword [utimensat_works_really], 0xffffffff  ; utimensat_works_really
0000000000010045         mov        dword [lutimensat_works_really], 0xffffffff ; lutimensat_works_really
000000000001004f         jne        loc_101b0

                     loc_10055:
0000000000010055         mov        rsi, qword [rsp+0x138+var_130]              ; CODE XREF=fdutimens+619
000000000001005a         test       rsi, rsi
000000000001005d         je         loc_102f0

0000000000010063         mov        rax, qword [rsi]
0000000000010066         mov        rdi, qword [rsi+8]
000000000001006a         movabs     rcx, 0x20c49ba5e353f7cf
0000000000010074         lea        r13, qword [rsp+0x138+var_108]
0000000000010079         mov        qword [rsp+0x138+var_108], rax
000000000001007e         mov        rax, rdi
0000000000010081         sar        rdi, 0x3f
0000000000010085         imul       rcx
0000000000010088         mov        rax, qword [rsi+0x10]
000000000001008c         mov        rsi, qword [rsi+0x18]
0000000000010090         mov        qword [rsp+0x138+var_F8], rax
0000000000010095         mov        rax, rsi
0000000000010098         sar        rsi, 0x3f
000000000001009c         sar        rdx, 0x7
00000000000100a0         sub        rdx, rdi
00000000000100a3         mov        qword [rsp+0x138+var_100], rdx
00000000000100a8         imul       rcx
00000000000100ab         mov        rcx, rdx
00000000000100ae         sar        rcx, 0x7
00000000000100b2         sub        rcx, rsi
00000000000100b5         mov        qword [rsp+0x138+var_F0], rcx

                     loc_100ba:
00000000000100ba         test       ebx, ebx                                    ; CODE XREF=fdutimens+867
00000000000100bc         mov        rdx, r13
00000000000100bf         js         loc_10298

00000000000100c5         xor        esi, esi                                    ; argument "__file" for method j_futimesat
00000000000100c7         mov        edi, ebx                                    ; argument "__fd" for method j_futimesat
00000000000100c9         call       j_futimesat                                 ; futimesat
00000000000100ce         test       eax, eax
00000000000100d0         mov        ebp, eax
00000000000100d2         jne        loc_102d0

00000000000100d8         test       r13, r13
00000000000100db         je         loc_102a7

00000000000100e1         cmp        qword [r13+8], 0x7a11f
00000000000100e9         setg       r12b
00000000000100ed         cmp        qword [r13+0x18], 0x7a11f
00000000000100f5         setg       r14b
00000000000100f9         test       r12b, r12b
00000000000100fc         jne        loc_10107

00000000000100fe         test       r14b, r14b
0000000000010101         je         loc_102a7

                     loc_10107:
0000000000010107         lea        rdx, qword [rsp+0x138+var_C8]               ; argument "__stat_buf" for method j___fxstat, CODE XREF=fdutimens+364
000000000001010c         mov        esi, ebx                                    ; argument "__fildes" for method j___fxstat
000000000001010e         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000010113         call       j___fxstat                                  ; __fxstat
0000000000010118         test       eax, eax
000000000001011a         jne        loc_102a7

0000000000010120         mov        rdx, qword [rsp+0x138+var_70]
0000000000010128         sub        rdx, qword [r13+0x10]
000000000001012c         mov        rax, qword [rsp+0x138+var_80]
0000000000010134         sub        rax, qword [r13]
0000000000010138         movdqa     xmm0, xmmword [r13]
000000000001013e         cmp        rdx, 0x1
0000000000010142         sete       dl
0000000000010145         movaps     xmmword [rsp+0x138+var_E8], xmm0
000000000001014a         and        r14d, edx
000000000001014d         cmp        rax, 0x1
0000000000010151         movdqa     xmm0, xmmword [r13+0x10]
0000000000010157         movaps     xmmword [rsp+0x138+var_D8], xmm0
000000000001015c         jne        loc_103b0

0000000000010162         test       r12b, r12b
0000000000010165         je         loc_103b0

000000000001016b         cmp        qword [rsp+0x138+var_78], 0x0
0000000000010174         jne        loc_103b0

000000000001017a         test       r14b, r14b
000000000001017d         mov        qword [rsp+0x138+var_E0], 0x0
0000000000010186         je         loc_10197

0000000000010188         cmp        qword [rsp+0x138+var_68], 0x0
0000000000010191         je         loc_103c8

                     loc_10197:
0000000000010197         lea        rdx, qword [rsp+0x138+var_E8]               ; argument "__tvp" for method j_futimesat, CODE XREF=fdutimens+502, fdutimens+1089
000000000001019c         xor        esi, esi                                    ; argument "__file" for method j_futimesat
000000000001019e         mov        edi, ebx                                    ; argument "__fd" for method j_futimesat
00000000000101a0         call       j_futimesat                                 ; futimesat

                     loc_101a5:
00000000000101a5         xor        ebp, ebp                                    ; CODE XREF=fdutimens+1059, fdutimens+1074
00000000000101a7         jmp        loc_102a7
00000000000101ac         align      16

                     loc_101b0:
00000000000101b0         cmp        r13d, 0x3                                   ; CODE XREF=fdutimens+191
00000000000101b4         je         loc_101dc

00000000000101b6         test       ebx, ebx
00000000000101b8         lea        rdx, qword [rsp+0x138+var_C8]
00000000000101bd         js         loc_10300

00000000000101c3         mov        esi, ebx                                    ; argument "__fildes" for method j___fxstat
00000000000101c5         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
00000000000101ca         call       j___fxstat                                  ; __fxstat
00000000000101cf         test       eax, eax
00000000000101d1         setne      al

                     loc_101d4:
00000000000101d4         test       al, al                                      ; CODE XREF=fdutimens+898
00000000000101d6         jne        loc_103a3

                     loc_101dc:
00000000000101dc         cmp        qword [rsp+0x138+var_130], 0x0              ; CODE XREF=fdutimens+548
00000000000101e2         je         loc_102f0

00000000000101e8         lea        rsi, qword [rsp+0x138+var_130]
00000000000101ed         lea        rdi, qword [rsp+0x138+var_C8]
00000000000101f2         xor        ebp, ebp
00000000000101f4         call       update_timespec                             ; update_timespec
00000000000101f9         test       al, al
00000000000101fb         je         loc_10055

0000000000010201         jmp        loc_102a7
0000000000010206         align      16

                     loc_10210:
0000000000010210         test       ebx, ebx                                    ; CODE XREF=fdutimens+120
0000000000010212         lea        rdx, qword [rsp+0x138+var_C8]
0000000000010217         js         loc_10320

000000000001021d         mov        esi, ebx                                    ; argument "__fildes" for method j___fxstat
000000000001021f         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000010224         call       j___fxstat                                  ; __fxstat
0000000000010229         test       eax, eax
000000000001022b         setne      al

                     loc_1022e:
000000000001022e         test       al, al                                      ; CODE XREF=fdutimens+930
0000000000010230         jne        loc_103a3

0000000000010236         mov        rsi, qword [rsp+0x138+var_130]
000000000001023b         cmp        qword [rsi+8], 0x3ffffffe
0000000000010243         je         loc_10370

0000000000010249         cmp        qword [rsi+0x18], 0x3ffffffe
0000000000010251         mov        r13d, 0x3
0000000000010257         jne        loc_10013

000000000001025d         mov        rax, qword [rsp+0x138+var_68]
0000000000010265         mov        rdx, qword [rsp+0x138+var_70]
000000000001026d         mov        qword [rsi+0x18], rax
0000000000010271         mov        qword [rsi+0x10], rdx
0000000000010275         jmp        loc_10013
000000000001027a         align      128

                     loc_10280:
0000000000010280         mov        qword [rsp+0x138+var_130], 0x0              ; CODE XREF=fdutimens+42
0000000000010289         xor        r13d, r13d
000000000001028c         jmp        loc_ffed
0000000000010291         align      8

                     loc_10298:
0000000000010298         mov        rsi, r12                                    ; argument "__file" for method j_futimesat, CODE XREF=fdutimens+303
000000000001029b         mov        edi, 0xffffff9c                             ; argument "__fd" for method j_futimesat
00000000000102a0         call       j_futimesat                                 ; futimesat
00000000000102a5         mov        ebp, eax

                     loc_102a7:
00000000000102a7         mov        rcx, qword [rsp+0x138+var_30]               ; CODE XREF=fdutimens+331, fdutimens+369, fdutimens+394, fdutimens+535, fdutimens+625, fdutimens+840, fdutimens+855, fdutimens+985, fdutimens+1048
00000000000102af         xor        rcx, qword [fs:0x28]
00000000000102b8         mov        eax, ebp
00000000000102ba         jne        loc_103d6

00000000000102c0         add        rsp, 0x110
00000000000102c7         pop        rbx
00000000000102c8         pop        rbp
00000000000102c9         pop        r12
00000000000102cb         pop        r13
00000000000102cd         pop        r14
00000000000102cf         ret
                        ; endp

                     loc_102d0:
00000000000102d0         test       r12, r12                                    ; CODE XREF=fdutimens+322
00000000000102d3         mov        ebp, 0xffffffff
00000000000102d8         je         loc_102a7

00000000000102da         mov        rsi, r13                                    ; argument "__tvp" for method j_utimes
00000000000102dd         mov        rdi, r12                                    ; argument "__file" for method j_utimes
00000000000102e0         call       j_utimes                                    ; utimes
00000000000102e5         mov        ebp, eax
00000000000102e7         jmp        loc_102a7
00000000000102e9         align      16

                     loc_102f0:
00000000000102f0         xor        r13d, r13d                                  ; CODE XREF=fdutimens+205, fdutimens+594
00000000000102f3         jmp        loc_100ba
00000000000102f8         align      256

                     loc_10300:
0000000000010300         mov        rsi, r12                                    ; argument "__filename" for method j___xstat, CODE XREF=fdutimens+557
0000000000010303         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000010308         call       j___xstat                                   ; __xstat
000000000001030d         test       eax, eax
000000000001030f         setne      al
0000000000010312         jmp        loc_101d4
0000000000010317         align      32

                     loc_10320:
0000000000010320         mov        rsi, r12                                    ; argument "__filename" for method j___xstat, CODE XREF=fdutimens+647
0000000000010323         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000010328         call       j___xstat                                   ; __xstat
000000000001032d         test       eax, eax
000000000001032f         setne      al
0000000000010332         jmp        loc_1022e
0000000000010337         align      64

                     loc_10340:
0000000000010340         xor        ecx, ecx                                    ; argument "__flags" for method j_utimensat, CODE XREF=fdutimens+133
0000000000010342         mov        rdx, rsi                                    ; argument "__times" for method j_utimensat
0000000000010345         mov        edi, 0xffffff9c                             ; argument "__fd" for method j_utimensat
000000000001034a         mov        rsi, r12                                    ; argument "__path" for method j_utimensat
000000000001034d         call       j_utimensat                                 ; utimensat
0000000000010352         cmp        eax, 0x0
0000000000010355         mov        ebp, eax
0000000000010357         jg         loc_1002d

                     loc_1035d:
000000000001035d         jne        loc_103db                                   ; CODE XREF=fdutimens+151

                     loc_1035f:
000000000001035f         mov        dword [utimensat_works_really], 0x1         ; utimensat_works_really, CODE XREF=fdutimens+1107
0000000000010369         jmp        loc_102a7
000000000001036e         align      16

                     loc_10370:
0000000000010370         mov        rax, qword [rsp+0x138+var_78]               ; CODE XREF=fdutimens+691
0000000000010378         mov        rdx, qword [rsp+0x138+var_80]
0000000000010380         mov        r13d, 0x3
0000000000010386         mov        qword [rsi], rdx
0000000000010389         mov        qword [rsi+8], rax
000000000001038d         jmp        loc_10013
0000000000010392         align      8

                     loc_10398:
0000000000010398         call       j___errno_location                          ; __errno_location, CODE XREF=fdutimens+100
000000000001039d         mov        dword [rax], 0x9

                     loc_103a3:
00000000000103a3         mov        ebp, 0xffffffff                             ; CODE XREF=fdutimens+87, fdutimens+582, fdutimens+672
00000000000103a8         jmp        loc_102a7
00000000000103ad         align      16

                     loc_103b0:
00000000000103b0         test       r14b, r14b                                  ; CODE XREF=fdutimens+460, fdutimens+469, fdutimens+484
00000000000103b3         je         loc_101a5

00000000000103b9         cmp        qword [rsp+0x138+var_68], 0x0
00000000000103c2         jne        loc_101a5

                     loc_103c8:
00000000000103c8         mov        qword [rsp+0x138+var_D0], 0x0               ; CODE XREF=fdutimens+513
00000000000103d1         jmp        loc_10197

                     loc_103d6:
00000000000103d6         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fdutimens+810
                        ; endp

                     loc_103db:
00000000000103db         call       j___errno_location                          ; __errno_location, CODE XREF=loc_1035d
00000000000103e0         cmp        dword [rax], 0x26
00000000000103e3         jne        loc_1035f

00000000000103e9         jmp        loc_10038
00000000000103ee         align      16                                          ; End of unwind block (FDE at 0x19a14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     utimens:
00000000000103f0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x19a5c), CODE XREF=copy_internal+9760
00000000000103f3         mov        rsi, rdi
00000000000103f6         mov        edi, 0xffffffff
00000000000103fb         jmp        fdutimens                                   ; fdutimens
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_A0: int32_t, -160
        ;    var_B8: int8_t, -184
        ;    var_C8: -200
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224


                     lutimens:
0000000000010400         push       r12                                         ; End of unwind block (FDE at 0x19a5c), Begin of unwind block (FDE at 0x19a70), CODE XREF=copy_internal+1655
0000000000010402         push       rbp
0000000000010403         mov        r12, rdi
0000000000010406         push       rbx
0000000000010407         sub        rsp, 0xd0
000000000001040e         mov        rax, qword [fs:0x28]
0000000000010417         mov        qword [rsp+0xe8+var_20], rax
000000000001041f         xor        eax, eax
0000000000010421         test       rsi, rsi
0000000000010424         je         loc_10520

000000000001042a         movdqu     xmm0, xmmword [rsi]
000000000001042e         lea        rdi, qword [rsp+0xe8+var_D8]
0000000000010433         movaps     xmmword [rsp+0xe8+var_D8], xmm0
0000000000010438         mov        qword [rsp+0xe8+var_E0], rdi
000000000001043d         movdqu     xmm0, xmmword [rsi+0x10]
0000000000010442         movaps     xmmword [rsp+0xe8+var_C8], xmm0
0000000000010447         call       validate_timespec                           ; validate_timespec
000000000001044c         test       eax, eax
000000000001044e         mov        ebx, eax
0000000000010450         js         loc_10560

0000000000010456         mov        eax, dword [lutimensat_works_really]        ; lutimensat_works_really
000000000001045c         test       eax, eax
000000000001045e         js         loc_10496

0000000000010460         cmp        ebx, 0x2
0000000000010463         je         loc_10590

0000000000010469         mov        rdx, qword [rsp+0xe8+var_E0]

                     loc_1046e:
000000000001046e         mov        ecx, 0x100                                  ; argument "__flags" for method j_utimensat, CODE XREF=lutimens+309, lutimens+450, lutimens+480, lutimens+561
0000000000010473         mov        rsi, r12                                    ; argument "__path" for method j_utimensat
0000000000010476         mov        edi, 0xffffff9c                             ; argument "__fd" for method j_utimensat
000000000001047b         call       j_utimensat                                 ; utimensat
0000000000010480         cmp        eax, 0x0
0000000000010483         mov        ebp, eax
0000000000010485         jle        loc_10570

000000000001048b         call       j___errno_location                          ; __errno_location
0000000000010490         mov        dword [rax], 0x26

                     loc_10496:
0000000000010496         test       ebx, ebx                                    ; CODE XREF=lutimens+94, lutimens+601
0000000000010498         mov        dword [lutimensat_works_really], 0xffffffff ; lutimensat_works_really
00000000000104a2         je         loc_10545

00000000000104a8         cmp        ebx, 0x3
00000000000104ab         jne        loc_105e8

00000000000104b1         cmp        qword [rsp+0xe8+var_E0], 0x0
00000000000104b7         je         loc_104d0

                     loc_104b9:
00000000000104b9         lea        rsi, qword [rsp+0xe8+var_E0]                ; CODE XREF=lutimens+520
00000000000104be         lea        rdi, qword [rsp+0xe8+var_B8]
00000000000104c3         xor        ebp, ebp
00000000000104c5         call       update_timespec                             ; update_timespec
00000000000104ca         test       al, al
00000000000104cc         jne        loc_104f8

00000000000104ce         nop

                     loc_104d0:
00000000000104d0         mov        eax, dword [rsp+0xe8+var_A0]                ; CODE XREF=lutimens+183, lutimens+345, lutimens+526
00000000000104d4         and        eax, 0xf000
00000000000104d9         cmp        eax, 0xa000
00000000000104de         je         loc_10636

00000000000104e4         mov        rdx, qword [rsp+0xe8+var_E0]
00000000000104e9         mov        rsi, r12
00000000000104ec         mov        edi, 0xffffffff
00000000000104f1         call       fdutimens                                   ; fdutimens
00000000000104f6         mov        ebp, eax

                     loc_104f8:
00000000000104f8         mov        rcx, qword [rsp+0xe8+var_20]                ; CODE XREF=lutimens+204, lutimens+357, lutimens+394
0000000000010500         xor        rcx, qword [fs:0x28]
0000000000010509         mov        eax, ebp
000000000001050b         jne        loc_10646

0000000000010511         add        rsp, 0xd0
0000000000010518         pop        rbx
0000000000010519         pop        rbp
000000000001051a         pop        r12
000000000001051c         ret
                        ; endp
000000000001051d         align      32

                     loc_10520:
0000000000010520         mov        ecx, dword [lutimensat_works_really]        ; lutimensat_works_really, CODE XREF=lutimens+36
0000000000010526         xor        edx, edx
0000000000010528         xor        ebx, ebx
000000000001052a         mov        qword [rsp+0xe8+var_E0], 0x0
0000000000010533         test       ecx, ecx
0000000000010535         jns        loc_1046e

000000000001053b         mov        dword [lutimensat_works_really], 0xffffffff ; lutimensat_works_really

                     loc_10545:
0000000000010545         lea        rdx, qword [rsp+0xe8+var_B8]                ; argument "__stat_buf" for method j___lxstat, CODE XREF=lutimens+162
000000000001054a         mov        rsi, r12                                    ; argument "__filename" for method j___lxstat
000000000001054d         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000010552         call       j___lxstat                                  ; __lxstat
0000000000010557         test       eax, eax
0000000000010559         je         loc_104d0

000000000001055f         nop

                     loc_10560:
0000000000010560         mov        ebp, 0xffffffff                             ; CODE XREF=lutimens+80, lutimens+420, lutimens+508, lutimens+577
0000000000010565         jmp        loc_104f8
0000000000010567         align      16

                     loc_10570:
0000000000010570         jne        loc_1064b                                   ; CODE XREF=lutimens+133

                     loc_10576:
0000000000010576         mov        dword [utimensat_works_really], 0x1         ; utimensat_works_really, CODE XREF=lutimens+595
0000000000010580         mov        dword [lutimensat_works_really], 0x1        ; lutimensat_works_really
000000000001058a         jmp        loc_104f8
000000000001058f         align      16

                     loc_10590:
0000000000010590         lea        rdx, qword [rsp+0xe8+var_B8]                ; argument "__stat_buf" for method j___lxstat, CODE XREF=lutimens+99
0000000000010595         mov        rsi, r12                                    ; argument "__filename" for method j___lxstat
0000000000010598         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
000000000001059d         call       j___lxstat                                  ; __lxstat
00000000000105a2         test       eax, eax
00000000000105a4         jne        loc_10560

00000000000105a6         mov        rdx, qword [rsp+0xe8+var_E0]
00000000000105ab         cmp        qword [rdx+8], 0x3ffffffe
00000000000105b3         je         loc_10618

00000000000105b5         cmp        qword [rdx+0x18], 0x3ffffffe
00000000000105bd         mov        ebx, 0x3
00000000000105c2         jne        loc_1046e

00000000000105c8         mov        rax, qword [rsp+0xe8+var_58]
00000000000105d0         mov        rcx, qword [rsp+0xe8+var_60]
00000000000105d8         mov        qword [rdx+0x18], rax
00000000000105dc         mov        qword [rdx+0x10], rcx
00000000000105e0         jmp        loc_1046e
00000000000105e5         align      8

                     loc_105e8:
00000000000105e8         lea        rdx, qword [rsp+0xe8+var_B8]                ; argument "__stat_buf" for method j___lxstat, CODE XREF=lutimens+171
00000000000105ed         mov        rsi, r12                                    ; argument "__filename" for method j___lxstat
00000000000105f0         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
00000000000105f5         call       j___lxstat                                  ; __lxstat
00000000000105fa         test       eax, eax
00000000000105fc         jne        loc_10560

0000000000010602         cmp        qword [rsp+0xe8+var_E0], 0x0
0000000000010608         jne        loc_104b9

000000000001060e         jmp        loc_104d0
0000000000010613         align      8

                     loc_10618:
0000000000010618         mov        rax, qword [rsp+0xe8+var_68]                ; CODE XREF=lutimens+435
0000000000010620         mov        rcx, qword [rsp+0xe8+var_70]
0000000000010625         mov        ebx, 0x3
000000000001062a         mov        qword [rdx], rcx
000000000001062d         mov        qword [rdx+8], rax
0000000000010631         jmp        loc_1046e

                     loc_10636:
0000000000010636         call       j___errno_location                          ; __errno_location, CODE XREF=lutimens+222
000000000001063b         mov        dword [rax], 0x26
0000000000010641         jmp        loc_10560

                     loc_10646:
0000000000010646         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lutimens+267
                        ; endp

                     loc_1064b:
000000000001064b         call       j___errno_location                          ; __errno_location, CODE XREF=loc_10570
0000000000010650         cmp        dword [rax], 0x26
0000000000010653         jne        loc_10576

0000000000010659         jmp        loc_10496
000000000001065e         align      32                                          ; End of unwind block (FDE at 0x19a70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000010660         push       r15                                         ; Begin of unwind block (FDE at 0x19aac), CODE XREF=version_etc_va+75, version_etc+161
0000000000010662         push       r14
0000000000010664         push       r13
0000000000010666         push       r12
0000000000010668         mov        r12, r9
000000000001066b         push       rbp
000000000001066c         push       rbx
000000000001066d         mov        rbp, rdi
0000000000010670         mov        rbx, r8
0000000000010673         sub        rsp, 0x28
0000000000010677         test       rsi, rsi
000000000001067a         je         loc_10798

0000000000010680         mov        r8, rdx
0000000000010683         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
000000000001068a         mov        r9, rcx
000000000001068d         xor        eax, eax
000000000001068f         mov        rcx, rsi
0000000000010692         mov        esi, 0x1
0000000000010697         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_1069c:
000000000001069c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x17032, CODE XREF=version_etc_arn+337
00000000000106a3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000106a5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000106aa         call       j_dcgettext                                 ; dcgettext
00000000000106af         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
00000000000106b6         mov        rcx, rax
00000000000106b9         mov        r8d, 0x7e3
00000000000106bf         mov        esi, 0x1
00000000000106c4         mov        rdi, rbp
00000000000106c7         xor        eax, eax
00000000000106c9         call       j___fprintf_chk                             ; __fprintf_chk
00000000000106ce         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
00000000000106d5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000106d7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000106dc         call       j_dcgettext                                 ; dcgettext
00000000000106e1         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
00000000000106e4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000106e7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000106ec         cmp        r12, 0x9
00000000000106f0         ja         loc_10a30

00000000000106f6         lea        rdx, qword [switch_table_17304]             ; switch_table_17304
00000000000106fd         movsxd     rax, dword [rdx+r12*4]
0000000000010701         add        rax, rdx
0000000000010704         jmp        rax                                         ; switch statement using table at 0x17304, with 10 cases, 0x10710,0x10786,0x107c0,0x10818,0x10858,0x108a0,0x108f0,0x10948,0x10978,0x109e0
0000000000010706         align      16

                     loc_10710:
0000000000010710         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000010714         mov        rax, qword [rbx+0x10]
0000000000010718         lea        rsi, qword [aWrittenBySSSns_17218]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000001071f         mov        r8, qword [rbx+8]
0000000000010723         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000010728         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000001072a         mov        r13, qword [rbx+0x30]
000000000001072e         mov        r12, qword [rbx+0x28]
0000000000010732         mov        qword [rsp+0x58+var_48], r9
0000000000010737         mov        r15, qword [rbx+0x20]
000000000001073b         mov        r14, qword [rbx+0x18]
000000000001073f         mov        qword [rsp+0x58+var_58], rax
0000000000010743         mov        qword [rsp+0x58+var_50], r8
0000000000010748         mov        rbx, qword [rbx]
000000000001074b         call       j_dcgettext                                 ; dcgettext
0000000000010750         sub        rsp, 0x8

                     loc_10754:
0000000000010754         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000010759         mov        rdx, rax
000000000001075c         mov        rcx, rbx
000000000001075f         mov        esi, 0x1
0000000000010764         mov        rdi, rbp
0000000000010767         xor        eax, eax
0000000000010769         push       r9
000000000001076b         push       r13
000000000001076d         push       r12
000000000001076f         push       r15
0000000000010771         push       r14
0000000000010773         mov        r9, qword [rsp+0x88+var_58]
0000000000010778         mov        r8, qword [rsp+0x88+var_50]
000000000001077d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000010782         add        rsp, 0x30

                     loc_10786:
0000000000010786         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000001078a         pop        rbx
000000000001078b         pop        rbp
000000000001078c         pop        r12
000000000001078e         pop        r13
0000000000010790         pop        r14
0000000000010792         pop        r15
0000000000010794         ret
                        ; endp
0000000000010795         align      8

                     loc_10798:
0000000000010798         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
000000000001079b         mov        rcx, rdx
000000000001079e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
00000000000107a5         mov        esi, 0x1
00000000000107aa         xor        eax, eax
00000000000107ac         call       j___fprintf_chk                             ; __fprintf_chk
00000000000107b1         jmp        loc_1069c
00000000000107b6         align      64

                     loc_107c0:
00000000000107c0         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
00000000000107c4         mov        r9, qword [rbx+0x38]
00000000000107c8         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
00000000000107cf         mov        rax, qword [rbx+0x10]
00000000000107d3         mov        r8, qword [rbx+8]
00000000000107d7         mov        edx, 0x5
00000000000107dc         mov        r13, qword [rbx+0x30]
00000000000107e0         mov        r12, qword [rbx+0x28]
00000000000107e4         mov        r15, qword [rbx+0x20]
00000000000107e8         mov        r14, qword [rbx+0x18]
00000000000107ec         mov        rbx, qword [rbx]
00000000000107ef         mov        qword [rsp+0x58+var_40], r10
00000000000107f4         mov        qword [rsp+0x58+var_48], r9
00000000000107f9         mov        qword [rsp+0x58+var_58], rax
00000000000107fd         mov        qword [rsp+0x58+var_50], r8

                     loc_10802:
0000000000010802         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000010804         call       j_dcgettext                                 ; dcgettext
0000000000010809         mov        r10, qword [rsp+0x58+var_40]
000000000001080e         push       r10
0000000000010810         jmp        loc_10754
0000000000010815         align      8

                     loc_10818:
0000000000010818         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000001081b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000010822         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000010827         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000010829         call       j_dcgettext                                 ; dcgettext
000000000001082e         add        rsp, 0x28
0000000000010832         mov        rcx, rbx
0000000000010835         mov        rdi, rbp
0000000000010838         pop        rbx
0000000000010839         pop        rbp
000000000001083a         pop        r12
000000000001083c         pop        r13
000000000001083e         pop        r14
0000000000010840         pop        r15
0000000000010842         mov        rdx, rax
0000000000010845         mov        esi, 0x1
000000000001084a         xor        eax, eax
000000000001084c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000010851         align      8

                     loc_10858:
0000000000010858         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000001085c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000010863         mov        rbx, qword [rbx]
0000000000010866         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000001086b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000001086d         call       j_dcgettext                                 ; dcgettext
0000000000010872         add        rsp, 0x28
0000000000010876         mov        r8, r12
0000000000010879         mov        rcx, rbx
000000000001087c         mov        rdi, rbp
000000000001087f         mov        rdx, rax
0000000000010882         mov        esi, 0x1
0000000000010887         pop        rbx
0000000000010888         pop        rbp
0000000000010889         pop        r12
000000000001088b         pop        r13
000000000001088d         pop        r14
000000000001088f         pop        r15
0000000000010891         xor        eax, eax
0000000000010893         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000010898         align      32

                     loc_108a0:
00000000000108a0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
00000000000108a4         mov        r12, qword [rbx+8]
00000000000108a8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
00000000000108af         mov        rbx, qword [rbx]
00000000000108b2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000108b7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000108b9         call       j_dcgettext                                 ; dcgettext
00000000000108be         add        rsp, 0x28
00000000000108c2         mov        r9, r13
00000000000108c5         mov        r8, r12
00000000000108c8         mov        rcx, rbx
00000000000108cb         mov        rdi, rbp
00000000000108ce         mov        rdx, rax
00000000000108d1         pop        rbx
00000000000108d2         pop        rbp
00000000000108d3         pop        r12
00000000000108d5         pop        r13
00000000000108d7         pop        r14
00000000000108d9         pop        r15
00000000000108db         mov        esi, 0x1
00000000000108e0         xor        eax, eax
00000000000108e2         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000108e7         align      16

                     loc_108f0:
00000000000108f0         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
00000000000108f7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000108fc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000108fe         mov        r14, qword [rbx+0x18]
0000000000010902         mov        r13, qword [rbx+0x10]
0000000000010906         mov        r12, qword [rbx+8]
000000000001090a         mov        rbx, qword [rbx]
000000000001090d         call       j_dcgettext                                 ; dcgettext
0000000000010912         sub        rsp, 0x8

                     loc_10916:
0000000000010916         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000010918         mov        rdx, rax
000000000001091b         mov        r9, r13
000000000001091e         mov        r8, r12
0000000000010921         mov        rcx, rbx
0000000000010924         mov        rdi, rbp
0000000000010927         mov        esi, 0x1
000000000001092c         xor        eax, eax
000000000001092e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000010933         pop        rax
0000000000010934         pop        rdx
0000000000010935         add        rsp, 0x28
0000000000010939         pop        rbx
000000000001093a         pop        rbp
000000000001093b         pop        r12
000000000001093d         pop        r13
000000000001093f         pop        r14
0000000000010941         pop        r15
0000000000010943         ret
                        ; endp
0000000000010944         align      8

                     loc_10948:
0000000000010948         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000001094c         lea        rsi, qword [aWrittenBySSSns_17198]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000010953         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000010958         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000001095a         mov        r14, qword [rbx+0x18]
000000000001095e         mov        r13, qword [rbx+0x10]
0000000000010962         mov        r12, qword [rbx+8]
0000000000010966         mov        rbx, qword [rbx]
0000000000010969         call       j_dcgettext                                 ; dcgettext
000000000001096e         push       r15
0000000000010970         jmp        loc_10916
0000000000010972         align      8

                     loc_10978:
0000000000010978         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000001097c         mov        r12, qword [rbx+0x28]
0000000000010980         lea        rsi, qword [aWrittenBySSSns_171c0]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000010987         mov        r15, qword [rbx+0x20]
000000000001098b         mov        r14, qword [rbx+0x18]
000000000001098f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000010994         mov        r13, qword [rbx+0x10]
0000000000010998         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000001099a         mov        rbx, qword [rbx]
000000000001099d         mov        qword [rsp+0x58+var_58], r8
00000000000109a1         call       j_dcgettext                                 ; dcgettext
00000000000109a6         sub        rsp, 0x8
00000000000109aa         mov        r9, r13
00000000000109ad         push       r12
00000000000109af         push       r15
00000000000109b1         push       r14

                     loc_109b3:
00000000000109b3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000109b8         mov        rcx, rbx
00000000000109bb         mov        rdx, rax
00000000000109be         mov        rdi, rbp
00000000000109c1         mov        esi, 0x1
00000000000109c6         xor        eax, eax
00000000000109c8         call       j___fprintf_chk                             ; __fprintf_chk
00000000000109cd         add        rsp, 0x20
00000000000109d1         add        rsp, 0x28
00000000000109d5         pop        rbx
00000000000109d6         pop        rbp
00000000000109d7         pop        r12
00000000000109d9         pop        r13
00000000000109db         pop        r14
00000000000109dd         pop        r15
00000000000109df         ret
                        ; endp

                     loc_109e0:
00000000000109e0         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
00000000000109e4         mov        r13, qword [rbx+0x30]
00000000000109e8         lea        rsi, qword [aWrittenBySSSns_171e8]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
00000000000109ef         mov        r12, qword [rbx+0x28]
00000000000109f3         mov        r15, qword [rbx+0x20]
00000000000109f7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000109fc         mov        r14, qword [rbx+0x18]
0000000000010a00         mov        r8, qword [rbx+8]
0000000000010a04         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000010a06         mov        qword [rsp+0x58+var_50], r9
0000000000010a0b         mov        rbx, qword [rbx]
0000000000010a0e         mov        qword [rsp+0x58+var_58], r8
0000000000010a12         call       j_dcgettext                                 ; dcgettext
0000000000010a17         push       r13
0000000000010a19         push       r12
0000000000010a1b         push       r15
0000000000010a1d         push       r14
0000000000010a1f         mov        r9, qword [rsp+0x78+var_50]
0000000000010a24         jmp        loc_109b3
0000000000010a26         align      16

                     loc_10a30:
0000000000010a30         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000010a34         mov        r9, qword [rbx+0x38]
0000000000010a38         mov        edx, 0x5
0000000000010a3d         mov        rax, qword [rbx+0x10]
0000000000010a41         mov        r8, qword [rbx+8]
0000000000010a45         lea        rsi, qword [aWrittenBySSSns_17280]          ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
0000000000010a4c         mov        r13, qword [rbx+0x30]
0000000000010a50         mov        r12, qword [rbx+0x28]
0000000000010a54         mov        r15, qword [rbx+0x20]
0000000000010a58         mov        r14, qword [rbx+0x18]
0000000000010a5c         mov        qword [rsp+0x58+var_40], r10
0000000000010a61         mov        qword [rsp+0x58+var_48], r9
0000000000010a66         mov        qword [rsp+0x58+var_58], rax
0000000000010a6a         mov        qword [rsp+0x58+var_50], r8
0000000000010a6f         mov        rbx, qword [rbx]
0000000000010a72         jmp        loc_10802
0000000000010a77         align      128                                         ; End of unwind block (FDE at 0x19aac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000010a80         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x19bc0)
0000000000010a83         cmp        qword [r8], 0x0
0000000000010a87         je         j_version_etc_arn                           ; version_etc_arn

0000000000010a89         nop        dword [rax]

                     loc_10a90:
0000000000010a90         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000010a94         cmp        qword [r8+r9*8], 0x0
0000000000010a99         jne        loc_10a90

                     j_version_etc_arn:        // version_etc_arn
0000000000010a9b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
0000000000010aa0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x19bc0), Begin of unwind block (FDE at 0x19bd4)
0000000000010aa4         mov        r10, r8
0000000000010aa7         xor        r9d, r9d
0000000000010aaa         mov        rax, qword [fs:0x28]
0000000000010ab3         mov        qword [rsp+0x68+var_10], rax
0000000000010ab8         xor        eax, eax
0000000000010aba         mov        r8, rsp
0000000000010abd         nop        dword [rax]

                     loc_10ac0:
0000000000010ac0         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
0000000000010ac3         cmp        eax, 0x2f
0000000000010ac6         ja         loc_10b0a

0000000000010ac8         mov        r11d, eax
0000000000010acb         add        r11, qword [r10+0x10]
0000000000010acf         add        eax, 0x8
0000000000010ad2         mov        dword [r10], eax

                     loc_10ad5:
0000000000010ad5         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000010ad8         test       rax, rax
0000000000010adb         mov        qword [r8+r9*8], rax
0000000000010adf         je         loc_10aeb

0000000000010ae1         add        r9, 0x1
0000000000010ae5         cmp        r9, 0xa
0000000000010ae9         jne        loc_10ac0

                     loc_10aeb:
0000000000010aeb         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000010af0         mov        rax, qword [rsp+0x68+var_10]
0000000000010af5         xor        rax, qword [fs:0x28]
0000000000010afe         jne        loc_10b05

0000000000010b00         add        rsp, 0x68
0000000000010b04         ret
                        ; endp

                     loc_10b05:
0000000000010b05         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_10b0a:
0000000000010b0a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
0000000000010b0e         lea        rax, qword [r11+8]
0000000000010b12         mov        qword [r10+8], rax
0000000000010b16         jmp        loc_10ad5
0000000000010b18         align      32                                          ; End of unwind block (FDE at 0x19bd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000010b20         push       rbp                                         ; Begin of unwind block (FDE at 0x19bf0), CODE XREF=main+609
0000000000010b21         push       rbx
0000000000010b22         mov        r10d, 0x20
0000000000010b28         xor        r11d, r11d
0000000000010b2b         sub        rsp, 0xb8
0000000000010b32         mov        rax, qword [fs:0x28]
0000000000010b3b         mov        qword [rsp+0xc8+var_50], rax
0000000000010b40         xor        eax, eax
0000000000010b42         lea        rax, qword [rsp+0xc8+arg_0]
0000000000010b4a         mov        qword [rsp+0xc8+var_28], r8
0000000000010b52         lea        rbx, qword [rsp+0xc8+arg_0]
0000000000010b5a         lea        r8, qword [rsp+0xc8+var_A8]
0000000000010b5f         mov        qword [rsp+0xc8+var_20], r9
0000000000010b67         mov        dword [rsp+0xc8+var_C0], 0x20
0000000000010b6f         mov        qword [rsp+0xc8+var_B8], rax
0000000000010b74         lea        rax, qword [rsp+0xc8+var_48]
0000000000010b7c         xor        r9d, r9d
0000000000010b7f         mov        qword [rsp+0xc8+var_B0], rax
0000000000010b84         mov        rbp, rax
0000000000010b87         nop        word [rax+rax]

                     loc_10b90:
0000000000010b90         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000010b94         ja         loc_10bec

0000000000010b96         mov        eax, r10d
0000000000010b99         mov        r11d, 0x1
0000000000010b9f         add        r10d, 0x8
0000000000010ba3         add        rax, rbp

                     loc_10ba6:
0000000000010ba6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000010ba9         test       rax, rax
0000000000010bac         mov        qword [r8+r9*8], rax
0000000000010bb0         je         loc_10bbc

0000000000010bb2         add        r9, 0x1
0000000000010bb6         cmp        r9, 0xa
0000000000010bba         jne        loc_10b90

                     loc_10bbc:
0000000000010bbc         test       r11b, r11b                                  ; CODE XREF=version_etc+144
0000000000010bbf         jne        loc_10be5

                     loc_10bc1:
0000000000010bc1         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000010bc6         mov        rax, qword [rsp+0xc8+var_50]
0000000000010bcb         xor        rax, qword [fs:0x28]
0000000000010bd4         jne        loc_10be0

0000000000010bd6         add        rsp, 0xb8
0000000000010bdd         pop        rbx
0000000000010bde         pop        rbp
0000000000010bdf         ret
                        ; endp

                     loc_10be0:
0000000000010be0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_10be5:
0000000000010be5         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
0000000000010bea         jmp        loc_10bc1

                     loc_10bec:
0000000000010bec         mov        rax, rbx                                    ; CODE XREF=version_etc+116
0000000000010bef         add        rbx, 0x8
0000000000010bf3         jmp        loc_10ba6
0000000000010bf5         align      1024                                        ; End of unwind block (FDE at 0x19bf0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000010c00         push       rbx                                         ; Begin of unwind block (FDE at 0x19c1c)
0000000000010c01         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000010c08         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000010c0d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000010c0f         call       j_dcgettext                                 ; dcgettext
0000000000010c14         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
0000000000010c1b         mov        rsi, rax
0000000000010c1e         mov        edi, 0x1
0000000000010c23         xor        eax, eax
0000000000010c25         call       j___printf_chk                              ; __printf_chk
0000000000010c2a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000010c31         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000010c36         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000010c38         call       j_dcgettext                                 ; dcgettext
0000000000010c3d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000010c44         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x14fae
0000000000010c4b         mov        rsi, rax
0000000000010c4e         mov        edi, 0x1
0000000000010c53         xor        eax, eax
0000000000010c55         call       j___printf_chk                              ; __printf_chk
0000000000010c5a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000010c61         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000010c68         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000010c6a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000010c6f         call       j_dcgettext                                 ; dcgettext
0000000000010c74         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000010c77         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000010c7a         pop        rbx
0000000000010c7b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     can_write_any_file:
0000000000010c80         cmp        byte [initialized.3064], 0x0                ; End of unwind block (FDE at 0x19c1c), Begin of unwind block (FDE at 0x19c3c), initialized.3064, CODE XREF=prompt+280, writable_destination+18
0000000000010c87         je         loc_10c98

0000000000010c89         movzx      eax, byte [can_write.3065]                  ; can_write.3065
0000000000010c90         ret
                        ; endp
0000000000010c91         align      8

                     loc_10c98:
0000000000010c98         sub        rsp, 0x8                                    ; CODE XREF=can_write_any_file+7
0000000000010c9c         call       j_geteuid                                   ; geteuid
0000000000010ca1         test       eax, eax
0000000000010ca3         mov        byte [initialized.3064], 0x1                ; initialized.3064
0000000000010caa         sete       al
0000000000010cad         mov        byte [can_write.3065], al                   ; can_write.3065
0000000000010cb3         add        rsp, 0x8
0000000000010cb7         ret
                        ; endp
0000000000010cb8         align      64                                          ; End of unwind block (FDE at 0x19c3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000010cc0         push       rbx                                         ; Begin of unwind block (FDE at 0x19c54), CODE XREF=copy_internal+10374, copy_internal+12347, copy_internal+15900, copy_internal+16009, remember_copied+24, record_file+29, quotearg_n_options+295, quotearg_alloc_mem+129, streamsavedir+323, streamsavedir+409, xnmalloc+25
0000000000010cc1         mov        rbx, rdi
0000000000010cc4         call       j_malloc                                    ; malloc
0000000000010cc9         test       rax, rax
0000000000010ccc         jne        loc_10cd3

0000000000010cce         test       rbx, rbx
0000000000010cd1         jne        loc_10cd5

                     loc_10cd3:
0000000000010cd3         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000010cd4         ret
                        ; endp

                     loc_10cd5:
0000000000010cd5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10cda:
0000000000010cda         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x19c54)
                     xnmalloc:
0000000000010ce0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x19c70)
0000000000010ce3         mul        rsi
0000000000010ce6         mov        rdi, rax
0000000000010ce9         seto       al
0000000000010cec         test       rdi, rdi
0000000000010cef         js         loc_10cfb

0000000000010cf1         movzx      eax, al
0000000000010cf4         test       rax, rax
0000000000010cf7         jne        loc_10cfb

0000000000010cf9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_10cfb:
0000000000010cfb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
0000000000010cff         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10d04:
0000000000010d04         nop                                                    ; End of unwind block (FDE at 0x19c70)
0000000000010d06         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000010d10         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x19c84)
                        ; endp
0000000000010d12         align      32                                          ; End of unwind block (FDE at 0x19c84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000010d20         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x19c98), CODE XREF=extent_scan_read+224, quotearg_n_options+110, quotearg_n_options+386, streamsavedir+605, streamsavedir+703, streamsavedir+735, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000010d23         push       rbx
0000000000010d24         mov        rbx, rsi
0000000000010d27         jne        loc_10d2e

0000000000010d29         test       rdi, rdi
0000000000010d2c         jne        loc_10d48

                     loc_10d2e:
0000000000010d2e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000010d31         call       j_realloc                                   ; realloc
0000000000010d36         test       rax, rax
0000000000010d39         jne        loc_10d40

0000000000010d3b         test       rbx, rbx
0000000000010d3e         jne        loc_10d51

                     loc_10d40:
0000000000010d40         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000010d41         ret
                        ; endp
0000000000010d42         align      8

                     loc_10d48:
0000000000010d48         call       sub_2c80                                    ; sub_2c80, CODE XREF=xrealloc+12
0000000000010d4d         xor        eax, eax
0000000000010d4f         pop        rbx
0000000000010d50         ret
                        ; endp

                     loc_10d51:
0000000000010d51         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10d56:
0000000000010d56         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x19c98)
                     xnrealloc:
0000000000010d60         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x19cbc)
0000000000010d63         mul        rdx
0000000000010d66         mov        rsi, rax
0000000000010d69         seto       al
0000000000010d6c         test       rsi, rsi
0000000000010d6f         js         loc_10d7b

0000000000010d71         movzx      eax, al
0000000000010d74         test       rax, rax
0000000000010d77         jne        loc_10d7b

0000000000010d79         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_10d7b:
0000000000010d7b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
0000000000010d7f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10d84:
0000000000010d84         nop                                                    ; End of unwind block (FDE at 0x19cbc)
0000000000010d86         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000010d90         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x19cd0)
0000000000010d93         mov        r9, rdx
0000000000010d96         mov        rcx, qword [rsi]
0000000000010d99         je         loc_10dd0

0000000000010d9b         xor        edx, edx
0000000000010d9d         movabs     rax, 0x5555555555555554
0000000000010da7         div        r9
0000000000010daa         cmp        rax, rcx
0000000000010dad         jbe        loc_10deb

0000000000010daf         mov        rax, rcx
0000000000010db2         shr        rax, 0x1
0000000000010db5         lea        rcx, qword [rax+rcx+1]

                     loc_10dba:
0000000000010dba         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
0000000000010dbd         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000010dc1         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000010dc4         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000010dc9         align      16

                     loc_10dd0:
0000000000010dd0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000010dd3         je         loc_10df8

                     loc_10dd5:
0000000000010dd5         mov        rax, rcx                                    ; CODE XREF=sub_10df4+28
0000000000010dd8         mul        r9
0000000000010ddb         seto       dl
0000000000010dde         test       rax, rax
0000000000010de1         movzx      edx, dl
0000000000010de4         js         loc_10deb

0000000000010de6         test       rdx, rdx
0000000000010de9         je         loc_10dba

                     loc_10deb:
0000000000010deb         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
0000000000010def         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10df4:
0000000000010df4         nop        dword [rax]
                        ; endp

                     loc_10df8:
0000000000010df8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
0000000000010dfa         mov        eax, 0x80
0000000000010dff         xor        r8d, r8d
0000000000010e02         div        r9
0000000000010e05         test       rax, rax
0000000000010e08         sete       r8b
0000000000010e0c         lea        rcx, qword [r8+rax]
0000000000010e10         jmp        loc_10dd5
0000000000010e12         align      32                                          ; End of unwind block (FDE at 0x19cd0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000010e20         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x19ce8)
0000000000010e23         mov        rax, qword [rsi]
0000000000010e26         je         loc_10e50

0000000000010e28         movabs     rdx, 0x5555555555555553
0000000000010e32         cmp        rax, rdx
0000000000010e35         ja         loc_10e61

0000000000010e37         mov        rdx, rax
0000000000010e3a         shr        rdx, 0x1
0000000000010e3d         lea        rax, qword [rdx+rax+1]

                     loc_10e42:
0000000000010e42         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000010e45         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000010e48         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000010e4d         align      16

                     loc_10e50:
0000000000010e50         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000010e53         mov        edx, 0x80
0000000000010e58         cmove      rax, rdx
0000000000010e5c         test       rax, rax
0000000000010e5f         jns        loc_10e42

                     loc_10e61:
0000000000010e61         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000010e65         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10e6a:
0000000000010e6a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x19ce8)
                     xzalloc:
0000000000010e70         push       rbx                                         ; Begin of unwind block (FDE at 0x19d00)
0000000000010e71         mov        rbx, rdi
0000000000010e74         call       xmalloc                                     ; xmalloc
0000000000010e79         mov        rdx, rbx                                    ; argument "__n" for method j_memset
0000000000010e7c         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000010e7e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000010e81         pop        rbx
0000000000010e82         jmp        j_memset                                    ; memset
                        ; endp
0000000000010e87         align      16                                          ; End of unwind block (FDE at 0x19d00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000010e90         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x19d1c)
0000000000010e93         sub        rsp, 0x8
0000000000010e97         mul        rsi
0000000000010e9a         seto       dl
0000000000010e9d         test       rax, rax
0000000000010ea0         js         loc_10eb9

0000000000010ea2         movzx      edx, dl
0000000000010ea5         test       rdx, rdx
0000000000010ea8         jne        loc_10eb9

0000000000010eaa         call       j_calloc                                    ; calloc
0000000000010eaf         test       rax, rax
0000000000010eb2         je         loc_10eb9

0000000000010eb4         add        rsp, 0x8
0000000000010eb8         ret
                        ; endp

                     loc_10eb9:
0000000000010eb9         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10ebe:
0000000000010ebe         nop                                                    ; End of unwind block (FDE at 0x19d1c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000010ec0         push       rbp                                         ; Begin of unwind block (FDE at 0x19d38), CODE XREF=clone_quoting_options+40
0000000000010ec1         push       rbx
0000000000010ec2         mov        rbp, rdi
0000000000010ec5         mov        rdi, rsi
0000000000010ec8         mov        rbx, rsi
0000000000010ecb         sub        rsp, 0x8
0000000000010ecf         call       xmalloc                                     ; xmalloc
0000000000010ed4         add        rsp, 0x8
0000000000010ed8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000010edb         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000010ede         pop        rbx
0000000000010edf         pop        rbp
0000000000010ee0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000010ee3         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000010ee8         align      16                                          ; End of unwind block (FDE at 0x19d38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000010ef0         push       rbx                                         ; Begin of unwind block (FDE at 0x19d60), CODE XREF=remember_copied+35, record_file+40, streamsavedir+230
0000000000010ef1         mov        rbx, rdi
0000000000010ef4         call       j_strlen                                    ; strlen
0000000000010ef9         mov        rdi, rbx
0000000000010efc         lea        rsi, qword [rax+1]
0000000000010f00         pop        rbx
0000000000010f01         jmp        xmemdup                                     ; xmemdup
                        ; endp
0000000000010f03         align      16                                          ; End of unwind block (FDE at 0x19d60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000010f10         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0x19d7c), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=remember_copied+116, hash_init+54, extent_scan_read+771, find_backup_file_name+21, dir_name+19, record_file+130, file_name_concat+19, quotearg_n_options+422, streamsavedir+777, xmalloc+21, xnmalloc+31
0000000000010f17         sub        rsp, 0x8
0000000000010f1b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000010f20         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000010f22         call       j_dcgettext                                 ; dcgettext
0000000000010f27         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
0000000000010f2d         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x17447
0000000000010f34         mov        rcx, rax
0000000000010f37         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000010f39         xor        eax, eax
0000000000010f3b         call       j_error                                     ; error
0000000000010f40         call       j_abort                                     ; abort
                        ; endp
0000000000010f45         align      16                                          ; End of unwind block (FDE at 0x19d7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xfts_open:
0000000000010f50         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x19d94), CODE XREF=rm+78
0000000000010f54         or         esi, 0x200
0000000000010f5a         call       rpl_fts_open                                ; rpl_fts_open
0000000000010f5f         test       rax, rax
0000000000010f62         je         loc_10f70

0000000000010f64         add        rsp, 0x8
0000000000010f68         ret
                        ; endp
0000000000010f69         align      16

                     loc_10f70:
0000000000010f70         call       j___errno_location                          ; __errno_location, CODE XREF=xfts_open+18
0000000000010f75         cmp        dword [rax], 0x16
0000000000010f78         je         loc_10f80

0000000000010f7a         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10f7f:
0000000000010f7f         nop
                        ; endp

                     loc_10f80:
0000000000010f80         lea        rcx, qword [__PRETTY_FUNCTION__.3434]       ; argument "__function" for method j___assert_fail, "xfts_open", CODE XREF=xfts_open+40
0000000000010f87         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xfts.c"
0000000000010f8e         lea        rdi, qword [aErrnoEinval]                   ; argument "__assertion" for method j___assert_fail, "errno != EINVAL"
0000000000010f95         mov        edx, 0x29                                   ; argument "__line" for method j___assert_fail
0000000000010f9a         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000010f9f         align      32                                          ; End of unwind block (FDE at 0x19d94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_warning_required:
0000000000010fa0         mov        edx, dword [rdi+0x48]                       ; Begin of unwind block (FDE at 0x19db0)
0000000000010fa3         mov        eax, 0x1
0000000000010fa8         and        edx, 0x11
0000000000010fab         cmp        edx, 0x10
0000000000010fae         je         loc_10fb7

0000000000010fb0         xor        eax, eax
0000000000010fb2         cmp        edx, 0x11
0000000000010fb5         je         loc_10fc0

                     loc_10fb7:
0000000000010fb7         ret                                                    ; CODE XREF=cycle_warning_required+14
                        ; endp
0000000000010fb9         align      64

                     loc_10fc0:
0000000000010fc0         cmp        qword [rsi+0x58], 0x0                       ; CODE XREF=cycle_warning_required+21
0000000000010fc5         setne      al
0000000000010fc8         ret
                        ; endp
0000000000010fc9         align      16                                          ; End of unwind block (FDE at 0x19db0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32


                     yesno:
0000000000010fd0         push       rbx                                         ; Begin of unwind block (FDE at 0x19dc4), CODE XREF=prompt+529, overwrite_ok.isra.12+270
0000000000010fd1         mov        edx, 0xa                                    ; argument "__delimiter" for method j___getdelim
0000000000010fd6         xor        ebx, ebx
0000000000010fd8         sub        rsp, 0x20
0000000000010fdc         mov        rcx, qword [stdin@@GLIBC_2.2.5]             ; argument "__stream" for method j___getdelim, stdin@@GLIBC_2.2.5
0000000000010fe3         lea        rsi, qword [rsp+0x28+var_18]                ; argument "__n" for method j___getdelim
0000000000010fe8         lea        rdi, qword [rsp+0x28+var_20]                ; argument "__lineptr" for method j___getdelim
0000000000010fed         mov        qword [rsp+0x28+var_20], 0x0
0000000000010ff6         mov        rax, qword [fs:0x28]
0000000000010fff         mov        qword [rsp+0x28+var_10], rax
0000000000011004         xor        eax, eax
0000000000011006         mov        qword [rsp+0x28+var_18], 0x0
000000000001100f         call       j___getdelim                                ; __getdelim
0000000000011014         test       rax, rax
0000000000011017         jle        loc_11032

0000000000011019         mov        rdi, qword [rsp+0x28+var_20]
000000000001101e         lea        rax, qword [rdi+rax-1]
0000000000011023         cmp        byte [rax], 0xa
0000000000011026         je         loc_11058

                     loc_11028:
0000000000011028         call       j_rpmatch                                   ; rpmatch, CODE XREF=yesno+144
000000000001102d         test       eax, eax
000000000001102f         setg       bl

                     loc_11032:
0000000000011032         mov        rdi, qword [rsp+0x28+var_20]                ; CODE XREF=yesno+71
0000000000011037         call       sub_2c80                                    ; sub_2c80
000000000001103c         mov        rdx, qword [rsp+0x28+var_10]
0000000000011041         xor        rdx, qword [fs:0x28]
000000000001104a         mov        eax, ebx
000000000001104c         jne        loc_11062

000000000001104e         add        rsp, 0x20
0000000000011052         pop        rbx
0000000000011053         ret
                        ; endp
0000000000011054         align      8

                     loc_11058:
0000000000011058         mov        byte [rax], 0x0                             ; CODE XREF=yesno+86
000000000001105b         mov        rdi, qword [rsp+0x28+var_20]
0000000000011060         jmp        loc_11028

                     loc_11062:
0000000000011062         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=yesno+124
                        ; endp
0000000000011067         align      16                                          ; End of unwind block (FDE at 0x19dc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000011070         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x19dec), CODE XREF=close_stdin+56, rpl_fclose+31
0000000000011073         push       rbx
0000000000011074         mov        rbx, rdi
0000000000011077         je         loc_1108a

0000000000011079         call       j___freading                                ; __freading
000000000001107e         test       eax, eax
0000000000011080         je         loc_1108a

0000000000011082         test       dword [rbx], 0x100
0000000000011088         jne        loc_11098

                     loc_1108a:
000000000001108a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000001108d         pop        rbx
000000000001108e         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000011093         align      8

                     loc_11098:
0000000000011098         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000001109b         mov        edx, 0x1
00000000000110a0         xor        esi, esi
00000000000110a2         call       rpl_fseeko                                  ; rpl_fseeko
00000000000110a7         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
00000000000110aa         pop        rbx
00000000000110ab         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     freadahead:
00000000000110b0         xor        eax, eax                                    ; End of unwind block (FDE at 0x19dec), Begin of unwind block (FDE at 0x19e0c), CODE XREF=close_stdin+14
00000000000110b2         mov        rcx, qword [rdi+0x20]
00000000000110b6         cmp        qword [rdi+0x28], rcx
00000000000110ba         ja         loc_110d7

00000000000110bc         mov        rax, qword [rdi+0x10]
00000000000110c0         sub        rax, qword [rdi+8]
00000000000110c4         test       dword [rdi], 0x100
00000000000110ca         je         loc_110d7

00000000000110cc         mov        rdx, qword [rdi+0x58]
00000000000110d0         sub        rdx, qword [rdi+0x48]
00000000000110d4         add        rax, rdx

                     loc_110d7:
00000000000110d7         ret                                                    ; CODE XREF=freadahead+10, freadahead+26
                        ; endp
00000000000110d9         align      32                                          ; End of unwind block (FDE at 0x19e0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
00000000000110e0         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x19e24), CODE XREF=close_stdin+194, rpl_fflush+50
00000000000110e4         cmp        qword [rdi+0x10], rax
00000000000110e8         je         loc_110f0

                     j_j_fseeko:        // fseeko
00000000000110ea         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
00000000000110ef         align      16

                     loc_110f0:
00000000000110f0         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
00000000000110f4         cmp        qword [rdi+0x28], rax
00000000000110f8         jne        j_j_fseeko                                  ; fseeko

00000000000110fa         cmp        qword [rdi+0x48], 0x0
00000000000110ff         jne        j_j_fseeko                                  ; fseeko

0000000000011101         push       r12
0000000000011103         push       rbp
0000000000011104         mov        r12d, edx
0000000000011107         push       rbx
0000000000011108         mov        rbp, rsi
000000000001110b         mov        rbx, rdi
000000000001110e         call       j_fileno                                    ; fileno
0000000000011113         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000011116         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000011119         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000001111b         call       j_lseek                                     ; lseek
0000000000011120         cmp        rax, 0xffffffffffffffff
0000000000011124         je         loc_11132

0000000000011126         and        dword [rbx], 0xffffffef
0000000000011129         mov        qword [rbx+0x90], rax
0000000000011130         xor        eax, eax

                     loc_11132:
0000000000011132         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000011133         pop        rbp
0000000000011134         pop        r12
0000000000011136         ret
                        ; endp
0000000000011137         align      64                                          ; End of unwind block (FDE at 0x19e24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     AD_compare:
0000000000011140         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x19e54), DATA XREF=setup_dir.isra.4+19
0000000000011142         mov        rdx, qword [rsi+8]
0000000000011146         cmp        qword [rdi+8], rdx
000000000001114a         je         loc_11150

000000000001114c         ret
                        ; endp
000000000001114e         align      16

                     loc_11150:
0000000000011150         mov        rax, qword [rsi]                            ; CODE XREF=AD_compare+10
0000000000011153         cmp        qword [rdi], rax
0000000000011156         sete       al
0000000000011159         ret
                        ; endp
000000000001115a         align      32                                          ; End of unwind block (FDE at 0x19e54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     AD_hash:
0000000000011160         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x19e68), DATA XREF=setup_dir.isra.4+26
0000000000011164         xor        edx, edx
0000000000011166         div        rsi
0000000000011169         mov        rax, rdx
000000000001116c         ret
                        ; endp
000000000001116d         align      16                                          ; End of unwind block (FDE at 0x19e68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dev_type_hash:
0000000000011170         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x19e7c), DATA XREF=filesystem_type+110
0000000000011173         xor        edx, edx
0000000000011175         div        rsi
0000000000011178         mov        rax, rdx
000000000001117b         ret
                        ; endp
000000000001117c         align      128                                         ; End of unwind block (FDE at 0x19e7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dev_type_compare:
0000000000011180         mov        rax, qword [rsi]                            ; Begin of unwind block (FDE at 0x19e90), DATA XREF=filesystem_type+103
0000000000011183         cmp        qword [rdi], rax
0000000000011186         sete       al
0000000000011189         ret
                        ; endp
000000000001118a         align      16                                          ; End of unwind block (FDE at 0x19e90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_compare_ino:
0000000000011190         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0x19ea4), DATA XREF=fts_build+2040
0000000000011193         mov        rax, qword [rsi]
0000000000011196         mov        rax, qword [rax+0x80]
000000000001119d         cmp        qword [rdx+0x80], rax
00000000000111a4         jb         loc_111b0

00000000000111a6         seta       al
00000000000111a9         movzx      eax, al
00000000000111ac         ret
                        ; endp
00000000000111ad         align      16

                     loc_111b0:
00000000000111b0         mov        eax, 0xffffffff                             ; CODE XREF=fts_compare_ino+20
00000000000111b5         ret
                        ; endp
00000000000111b6         align      64                                          ; End of unwind block (FDE at 0x19ea4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_stat:
00000000000111c0         push       r12                                         ; Begin of unwind block (FDE at 0x19eb8), CODE XREF=fts_build+1104, fts_build+1543, fts_build+2136, rpl_fts_open+765, rpl_fts_read+440, rpl_fts_read+645, rpl_fts_read+1452, rpl_fts_read+1624
00000000000111c2         push       rbp
00000000000111c3         mov        rbp, rsi
00000000000111c6         push       rbx
00000000000111c7         cmp        qword [rbp+0x58], 0x0
00000000000111cc         lea        rbx, qword [rsi+0x78]
00000000000111d0         mov        r12, rdi
00000000000111d3         mov        eax, dword [rdi+0x48]
00000000000111d6         mov        rsi, qword [rsi+0x30]
00000000000111da         jne        loc_11240

00000000000111dc         test       al, 0x1
00000000000111de         je         loc_11240

                     loc_111e0:
00000000000111e0         mov        rdx, rbx                                    ; argument "__stat_buf" for method j___xstat, CODE XREF=fts_stat+130, fts_stat+134
00000000000111e3         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000111e8         call       j___xstat                                   ; __xstat
00000000000111ed         test       eax, eax
00000000000111ef         je         loc_1126b

00000000000111f1         call       j___errno_location                          ; __errno_location
00000000000111f6         mov        r12, rax
00000000000111f9         mov        eax, dword [rax]
00000000000111fb         cmp        eax, 0x2
00000000000111fe         je         loc_11310

                     loc_11204:
0000000000011204         lea        rdi, qword [rbx+8]                          ; CODE XREF=fts_stat+327, fts_stat+361
0000000000011208         mov        dword [rbp+0x40], eax
000000000001120b         mov        qword [rbp+0x78], 0x0
0000000000011213         mov        qword [rbx+0x88], 0x0
000000000001121e         xor        eax, eax
0000000000011220         and        rdi, 0xfffffffffffffff8
0000000000011224         sub        rbx, rdi
0000000000011227         lea        ecx, dword [rbx+0x90]
000000000001122d         shr        ecx, 0x3
0000000000011230         rep stosq  qword [rdi], rax
0000000000011233         mov        eax, 0xa

                     loc_11238:
0000000000011238         pop        rbx                                         ; CODE XREF=fts_stat+278, fts_stat+310, fts_stat+397, fts_stat+413, fts_stat+442
0000000000011239         pop        rbp
000000000001123a         pop        r12
000000000001123c         ret
                        ; endp
000000000001123d         align      64

                     loc_11240:
0000000000011240         test       al, 0x2                                     ; CODE XREF=fts_stat+26, fts_stat+30
0000000000011242         jne        loc_111e0

0000000000011244         test       dl, dl
0000000000011246         jne        loc_111e0

0000000000011248         mov        rdx, rsi                                    ; argument "__filename" for method j___fxstatat
000000000001124b         mov        esi, dword [r12+0x2c]                       ; argument "__fildes" for method j___fxstatat
0000000000011250         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
0000000000011256         mov        rcx, rbx                                    ; argument "__stat_buf" for method j___fxstatat
0000000000011259         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
000000000001125e         call       j___fxstatat                                ; __fxstatat
0000000000011263         test       eax, eax
0000000000011265         jne        loc_11300

                     loc_1126b:
000000000001126b         mov        eax, dword [rbp+0x90]                       ; CODE XREF=fts_stat+47
0000000000011271         and        eax, 0xf000
0000000000011276         cmp        eax, 0x4000
000000000001127b         je         loc_112a0

000000000001127d         cmp        eax, 0xa000
0000000000011282         je         loc_11358

0000000000011288         cmp        eax, 0x8000
000000000001128d         sete       al
0000000000011290         movzx      eax, al
0000000000011293         pop        rbx
0000000000011294         lea        eax, dword [rax+rax*4+3]
0000000000011298         pop        rbp
0000000000011299         pop        r12
000000000001129b         ret
                        ; endp
000000000001129c         align      32

                     loc_112a0:
00000000000112a0         mov        rax, qword [rbp+0x88]                       ; CODE XREF=fts_stat+187
00000000000112a7         cmp        rax, 0x1
00000000000112ab         jbe        loc_11330

00000000000112b1         cmp        qword [rbp+0x58], 0x0
00000000000112b6         jle        loc_11330

00000000000112b8         test       byte [r12+0x48], 0x20
00000000000112be         lea        rdx, qword [rax-2]
00000000000112c2         cmove      rax, rdx

                     loc_112c6:
00000000000112c6         cmp        byte [rbp+0x108], 0x2e                      ; CODE XREF=fts_stat+375
00000000000112cd         mov        qword [rbp+0x68], rax
00000000000112d1         mov        eax, 0x1
00000000000112d6         jne        loc_11238

00000000000112dc         cmp        byte [rbp+0x109], 0x0
00000000000112e3         jne        loc_11368

                     loc_112e9:
00000000000112e9         cmp        qword [rbp+0x58], 0x1                       ; CODE XREF=fts_stat+448
00000000000112ee         sbb        eax, eax
00000000000112f0         and        eax, 0xfffffffc
00000000000112f3         add        eax, 0x5
00000000000112f6         jmp        loc_11238
00000000000112fb         align      256

                     loc_11300:
0000000000011300         call       j___errno_location                          ; __errno_location, CODE XREF=fts_stat+165
0000000000011305         mov        eax, dword [rax]
0000000000011307         jmp        loc_11204
000000000001130c         align      16

                     loc_11310:
0000000000011310         mov        rsi, qword [rbp+0x30]                       ; argument "__filename" for method j___lxstat, CODE XREF=fts_stat+62
0000000000011314         mov        rdx, rbx                                    ; argument "__stat_buf" for method j___lxstat
0000000000011317         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
000000000001131c         call       j___lxstat                                  ; __lxstat
0000000000011321         test       eax, eax
0000000000011323         je         loc_11340

0000000000011325         mov        eax, dword [r12]
0000000000011329         jmp        loc_11204
000000000001132e         align      16

                     loc_11330:
0000000000011330         mov        rax, 0xffffffffffffffff                     ; CODE XREF=fts_stat+235, fts_stat+246
0000000000011337         jmp        loc_112c6
0000000000011339         align      64

                     loc_11340:
0000000000011340         mov        dword [r12], 0x0                            ; CODE XREF=fts_stat+355
0000000000011348         mov        eax, 0xd
000000000001134d         jmp        loc_11238
0000000000011352         align      8

                     loc_11358:
0000000000011358         mov        eax, 0xc                                    ; CODE XREF=fts_stat+194
000000000001135d         jmp        loc_11238
0000000000011362         align      8

                     loc_11368:
0000000000011368         mov        edx, dword [rbp+0x108]                      ; CODE XREF=fts_stat+291
000000000001136e         and        edx, 0xffff00
0000000000011374         cmp        edx, 0x2e00
000000000001137a         jne        loc_11238

0000000000011380         jmp        loc_112e9
0000000000011385         align      16                                          ; End of unwind block (FDE at 0x19eb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_sort:
0000000000011390         push       r13                                         ; Begin of unwind block (FDE at 0x19ef4), CODE XREF=fts_build+1825, fts_build+2062, rpl_fts_open+548
0000000000011392         push       r12
0000000000011394         mov        r12, rdx
0000000000011397         push       rbp
0000000000011398         push       rbx
0000000000011399         mov        rbp, rdi
000000000001139c         mov        rbx, rsi
000000000001139f         sub        rsp, 0x8
00000000000113a3         cmp        qword [rbp+0x38], rdx
00000000000113a7         mov        r13, qword [rdi+0x40]
00000000000113ab         mov        rdi, qword [rdi+0x10]
00000000000113af         jae        loc_113e5

00000000000113b1         lea        rsi, qword [rdx+0x28]
00000000000113b5         movabs     rax, 0x1fffffffffffffff
00000000000113bf         cmp        rsi, rax
00000000000113c2         mov        qword [rbp+0x38], rsi
00000000000113c6         ja         loc_11464

00000000000113cc         shl        rsi, 0x3                                    ; argument "__size" for method j_realloc
00000000000113d0         call       j_realloc                                   ; realloc
00000000000113d5         test       rax, rax
00000000000113d8         mov        rdi, rax
00000000000113db         je         loc_11460

00000000000113e1         mov        qword [rbp+0x10], rax

                     loc_113e5:
00000000000113e5         test       rbx, rbx                                    ; CODE XREF=fts_sort+31
00000000000113e8         je         loc_11401

00000000000113ea         mov        rdx, rdi
00000000000113ed         nop        dword [rax]

                     loc_113f0:
00000000000113f0         add        rdx, 0x8                                    ; CODE XREF=fts_sort+111
00000000000113f4         mov        qword [rdx-8], rbx
00000000000113f8         mov        rbx, qword [rbx+0x10]
00000000000113fc         test       rbx, rbx
00000000000113ff         jne        loc_113f0

                     loc_11401:
0000000000011401         mov        rcx, r13                                    ; argument "__compar" for method j_qsort, CODE XREF=fts_sort+88
0000000000011404         mov        edx, 0x8                                    ; argument "__size" for method j_qsort
0000000000011409         mov        rsi, r12                                    ; argument "__nmemb" for method j_qsort
000000000001140c         call       j_qsort                                     ; qsort
0000000000011411         mov        r8, qword [rbp+0x10]
0000000000011415         mov        rcx, r12
0000000000011418         sub        rcx, 0x1
000000000001141c         mov        rax, qword [r8]
000000000001141f         je         loc_11490

0000000000011421         mov        rdi, rax
0000000000011424         mov        rdx, r8
0000000000011427         jmp        loc_11433
0000000000011429         align      16

                     loc_11430:
0000000000011430         mov        rdi, qword [rdx]                            ; CODE XREF=fts_sort+179

                     loc_11433:
0000000000011433         mov        rsi, qword [rdx+8]                          ; CODE XREF=fts_sort+151
0000000000011437         add        rdx, 0x8
000000000001143b         sub        rcx, 0x1
000000000001143f         mov        qword [rdi+0x10], rsi
0000000000011443         jne        loc_11430

0000000000011445         mov        rdx, qword [r8+r12*8-8]

                     loc_1144a:
000000000001144a         mov        qword [rdx+0x10], 0x0                       ; CODE XREF=fts_sort+259
0000000000011452         add        rsp, 0x8
0000000000011456         pop        rbx
0000000000011457         pop        rbp
0000000000011458         pop        r12
000000000001145a         pop        r13
000000000001145c         ret
                        ; endp
000000000001145d         align      32

                     loc_11460:
0000000000011460         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=fts_sort+75

                     loc_11464:
0000000000011464         call       sub_2c80                                    ; sub_2c80, CODE XREF=fts_sort+54
0000000000011469         mov        qword [rbp+0x10], 0x0
0000000000011471         mov        qword [rbp+0x38], 0x0
0000000000011479         add        rsp, 0x8
000000000001147d         mov        rax, rbx
0000000000011480         pop        rbx
0000000000011481         pop        rbp
0000000000011482         pop        r12
0000000000011484         pop        r13
0000000000011486         ret
                        ; endp
0000000000011487         align      16

                     loc_11490:
0000000000011490         mov        rdx, rax                                    ; CODE XREF=fts_sort+143
0000000000011493         jmp        loc_1144a
0000000000011495         align      32                                          ; End of unwind block (FDE at 0x19ef4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_alloc:
00000000000114a0         push       r13                                         ; Begin of unwind block (FDE at 0x19f44), CODE XREF=fts_build+556, rpl_fts_open+231, rpl_fts_open+334, rpl_fts_open+568
00000000000114a2         push       r12
00000000000114a4         mov        r12, rdi
00000000000114a7         push       rbp
00000000000114a8         lea        rdi, qword [rdx+0x110]
00000000000114af         push       rbx
00000000000114b0         mov        r13, rsi
00000000000114b3         mov        rbp, rdx
00000000000114b6         sub        rsp, 0x8
00000000000114ba         and        rdi, 0xfffffffffffffff8                     ; argument "__size" for method j_malloc
00000000000114be         call       j_malloc                                    ; malloc
00000000000114c3         test       rax, rax
00000000000114c6         mov        rbx, rax
00000000000114c9         je         loc_1151c

00000000000114cb         lea        rdi, qword [rax+0x108]                      ; argument "__dest" for method j_memcpy
00000000000114d2         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
00000000000114d5         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
00000000000114d8         call       j_memcpy                                    ; memcpy
00000000000114dd         mov        rax, qword [r12+0x20]
00000000000114e2         mov        byte [rbx+rbp+0x108], 0x0
00000000000114ea         mov        qword [rbx+0x60], rbp
00000000000114ee         mov        qword [rbx+0x50], r12
00000000000114f2         mov        dword [rbx+0x40], 0x0
00000000000114f9         mov        qword [rbx+0x18], 0x0
0000000000011501         mov        qword [rbx+0x38], rax
0000000000011505         mov        dword [rbx+0x72], 0x30000
000000000001150c         mov        qword [rbx+0x20], 0x0
0000000000011514         mov        qword [rbx+0x28], 0x0

                     loc_1151c:
000000000001151c         add        rsp, 0x8                                    ; CODE XREF=fts_alloc+41
0000000000011520         mov        rax, rbx
0000000000011523         pop        rbx
0000000000011524         pop        rbp
0000000000011525         pop        r12
0000000000011527         pop        r13
0000000000011529         ret
                        ; endp
000000000001152a         align      16                                          ; End of unwind block (FDE at 0x19f44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_lfree:
0000000000011530         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x19f7c), CODE XREF=fts_build+1638, fts_build+1893, fts_build+2281, fts_build+2418, rpl_fts_open+851, rpl_fts_close+92, rpl_fts_read+367, rpl_fts_read+1034, rpl_fts_children+75
0000000000011533         je         loc_11570

0000000000011535         push       rbp
0000000000011536         push       rbx
0000000000011537         mov        rbx, rdi
000000000001153a         sub        rsp, 0x8
000000000001153e         nop

                     loc_11540:
0000000000011540         mov        rdi, qword [rbx+0x18]                       ; CODE XREF=fts_lfree+48
0000000000011544         mov        rbp, qword [rbx+0x10]
0000000000011548         test       rdi, rdi
000000000001154b         je         loc_11552

000000000001154d         call       j_closedir                                  ; closedir

                     loc_11552:
0000000000011552         mov        rdi, rbx                                    ; CODE XREF=fts_lfree+27
0000000000011555         mov        rbx, rbp
0000000000011558         call       sub_2c80                                    ; sub_2c80
000000000001155d         test       rbp, rbp
0000000000011560         jne        loc_11540

0000000000011562         add        rsp, 0x8
0000000000011566         pop        rbx
0000000000011567         pop        rbp
0000000000011568         ret
                        ; endp
0000000000011569         align      16

                     loc_11570:
0000000000011570         ret                                                    ; CODE XREF=fts_lfree+3
                        ; endp
0000000000011572         align      128                                         ; End of unwind block (FDE at 0x19f7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_ring_clear:
0000000000011580         push       rbx                                         ; Begin of unwind block (FDE at 0x19fa8), CODE XREF=restore_initial_cwd+44, rpl_fts_close+140
0000000000011581         mov        rbx, rdi
0000000000011584         jmp        loc_1159c
0000000000011586         align      16

                     loc_11590:
0000000000011590         mov        rdi, rbx                                    ; CODE XREF=fd_ring_clear+38
0000000000011593         call       i_ring_pop                                  ; i_ring_pop
0000000000011598         test       eax, eax
000000000001159a         jns        loc_115b0

                     loc_1159c:
000000000001159c         mov        rdi, rbx                                    ; CODE XREF=fd_ring_clear+4, fd_ring_clear+55
000000000001159f         call       i_ring_empty                                ; i_ring_empty
00000000000115a4         test       al, al
00000000000115a6         je         loc_11590

00000000000115a8         pop        rbx
00000000000115a9         ret
                        ; endp
00000000000115aa         align      16

                     loc_115b0:
00000000000115b0         mov        edi, eax                                    ; argument "__fd" for method j_close, CODE XREF=fd_ring_clear+26
00000000000115b2         call       j_close                                     ; close
00000000000115b7         jmp        loc_1159c
00000000000115b9         align      64                                          ; End of unwind block (FDE at 0x19fa8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_A8: int64_t, -168
        ;    var_B8: int64_t, -184


                     filesystem_type:
00000000000115c0         push       r13                                         ; Begin of unwind block (FDE at 0x19fc4), CODE XREF=leaf_optimization+4, fts_build+708
00000000000115c2         push       r12
00000000000115c4         push       rbp
00000000000115c5         push       rbx
00000000000115c6         sub        rsp, 0x98
00000000000115cd         mov        rbx, qword [rdi+0x50]
00000000000115d1         mov        rax, qword [fs:0x28]
00000000000115da         mov        qword [rsp+0xb8+var_30], rax
00000000000115e2         xor        eax, eax
00000000000115e4         test       byte [rbx+0x49], 0x2
00000000000115e8         je         loc_11652

00000000000115ea         mov        r12, qword [rbx+0x50]
00000000000115ee         mov        rbp, rdi
00000000000115f1         mov        r13d, esi
00000000000115f4         test       r12, r12
00000000000115f7         je         loc_11620

                     loc_115f9:
00000000000115f9         mov        rax, qword [rbp+0x78]                       ; CODE XREF=filesystem_type+139
00000000000115fd         mov        rsi, rsp
0000000000011600         mov        rdi, r12
0000000000011603         mov        qword [rsp+0xb8+var_B8], rax
0000000000011607         call       hash_lookup                                 ; hash_lookup
000000000001160c         test       rax, rax
000000000001160f         je         loc_1164d

0000000000011611         mov        rbx, qword [rax+8]
0000000000011615         jmp        loc_11654
0000000000011617         align      32

                     loc_11620:
0000000000011620         mov        r8, qword [qword_21bfc8]                    ; qword_21bfc8, CODE XREF=filesystem_type+55
0000000000011627         lea        rcx, qword [dev_type_compare]               ; dev_type_compare
000000000001162e         lea        rdx, qword [dev_type_hash]                  ; dev_type_hash
0000000000011635         xor        esi, esi
0000000000011637         mov        edi, 0xd
000000000001163c         call       hash_initialize                             ; hash_initialize
0000000000011641         test       rax, rax
0000000000011644         mov        r12, rax
0000000000011647         mov        qword [rbx+0x50], rax
000000000001164b         jne        loc_115f9

                     loc_1164d:
000000000001164d         test       r13d, r13d                                  ; CODE XREF=filesystem_type+79
0000000000011650         jns        loc_11680

                     loc_11652:
0000000000011652         xor        ebx, ebx                                    ; CODE XREF=filesystem_type+40, filesystem_type+207

                     loc_11654:
0000000000011654         mov        rdx, qword [rsp+0xb8+var_30]                ; CODE XREF=filesystem_type+85, filesystem_type+217, filesystem_type+235, filesystem_type+275
000000000001165c         xor        rdx, qword [fs:0x28]
0000000000011665         mov        rax, rbx
0000000000011668         jne        loc_116e2

000000000001166a         add        rsp, 0x98
0000000000011671         pop        rbx
0000000000011672         pop        rbp
0000000000011673         pop        r12
0000000000011675         pop        r13
0000000000011677         ret
                        ; endp
0000000000011678         align      128

                     loc_11680:
0000000000011680         lea        rsi, qword [rsp+0xb8+var_A8]                ; argument "__buf" for method j_fstatfs, CODE XREF=filesystem_type+144
0000000000011685         mov        edi, r13d                                   ; argument "__fildes" for method j_fstatfs
0000000000011688         call       j_fstatfs                                   ; fstatfs
000000000001168d         test       eax, eax
000000000001168f         jne        loc_11652

0000000000011691         test       r12, r12
0000000000011694         mov        rbx, qword [rsp+0xb8+var_A8]
0000000000011699         je         loc_11654

000000000001169b         mov        edi, 0x10                                   ; argument "__size" for method j_malloc
00000000000116a0         call       j_malloc                                    ; malloc
00000000000116a5         test       rax, rax
00000000000116a8         mov        r13, rax
00000000000116ab         je         loc_11654

00000000000116ad         mov        rax, qword [rbp+0x78]
00000000000116b1         mov        qword [r13+8], rbx
00000000000116b5         mov        rsi, r13
00000000000116b8         mov        rdi, r12
00000000000116bb         mov        qword [r13], rax
00000000000116bf         call       hash_insert                                 ; hash_insert
00000000000116c4         test       rax, rax
00000000000116c7         je         loc_116d8

00000000000116c9         cmp        r13, rax
00000000000116cc         jne        loc_116e7

                     loc_116ce:
00000000000116ce         mov        rbx, qword [rsp+0xb8+var_A8]                ; CODE XREF=filesystem_type+288
00000000000116d3         jmp        loc_11654

                     loc_116d8:
00000000000116d8         mov        rdi, r13                                    ; CODE XREF=filesystem_type+263
00000000000116db         call       sub_2c80                                    ; sub_2c80
00000000000116e0         jmp        loc_116ce

                     loc_116e2:
00000000000116e2         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=filesystem_type+168
                        ; endp

                     loc_116e7:
00000000000116e7         call       j_abort                                     ; abort, CODE XREF=filesystem_type+268
                        ; endp
00000000000116ec         align      16                                          ; End of unwind block (FDE at 0x19fc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     leaf_optimization:
00000000000116f0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1a000), CODE XREF=fts_build+2231, rpl_fts_read+1797
00000000000116f4         call       filesystem_type                             ; filesystem_type
00000000000116f9         cmp        rax, 0x52654973
00000000000116ff         je         loc_11750

0000000000011701         jle        loc_11730

0000000000011703         cmp        rax, 0x58465342
0000000000011709         je         loc_11750

000000000001170b         mov        edx, 0xff534d42
0000000000011710         cmp        rax, rdx
0000000000011713         je         loc_11745

0000000000011715         cmp        rax, 0x5346414f
000000000001171b         je         loc_11745

                     loc_1171d:
000000000001171d         mov        eax, 0x1                                    ; CODE XREF=leaf_optimization+83
0000000000011722         add        rsp, 0x8
0000000000011726         ret
                        ; endp
0000000000011727         align      16

                     loc_11730:
0000000000011730         cmp        rax, 0x6969                                 ; CODE XREF=leaf_optimization+17
0000000000011736         je         loc_11745

0000000000011738         cmp        rax, 0x9fa0
000000000001173e         je         loc_11745

0000000000011740         test       rax, rax
0000000000011743         jne        loc_1171d

                     loc_11745:
0000000000011745         xor        eax, eax                                    ; CODE XREF=leaf_optimization+35, leaf_optimization+43, leaf_optimization+70, leaf_optimization+78
0000000000011747         add        rsp, 0x8
000000000001174b         ret
                        ; endp
000000000001174c         align      16

                     loc_11750:
0000000000011750         mov        eax, 0x2                                    ; CODE XREF=leaf_optimization+15, leaf_optimization+25
0000000000011755         add        rsp, 0x8
0000000000011759         ret
                        ; endp
000000000001175a         align      32                                          ; End of unwind block (FDE at 0x1a000)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cwd_advance_fd:
0000000000011760         push       rbp                                         ; Begin of unwind block (FDE at 0x1a024), CODE XREF=restore_initial_cwd+74, fts_safe_changedir+542, rpl_fts_read+1279, rpl_fts_children+290
0000000000011761         push       rbx
0000000000011762         mov        ebp, esi
0000000000011764         mov        rbx, rdi
0000000000011767         sub        rsp, 0x8
000000000001176b         mov        esi, dword [rdi+0x2c]
000000000001176e         cmp        esi, ebp
0000000000011770         jne        loc_11777

0000000000011772         cmp        esi, 0xffffff9c
0000000000011775         jne        loc_117c1

                     loc_11777:
0000000000011777         test       dl, dl                                      ; CODE XREF=cwd_advance_fd+16
0000000000011779         jne        loc_11790

000000000001177b         test       byte [rbx+0x48], 0x4
000000000001177f         jne        loc_11785

0000000000011781         test       esi, esi
0000000000011783         jns        loc_117b0

                     loc_11785:
0000000000011785         mov        dword [rbx+0x2c], ebp                       ; CODE XREF=cwd_advance_fd+31, cwd_advance_fd+59
0000000000011788         add        rsp, 0x8
000000000001178c         pop        rbx
000000000001178d         pop        rbp
000000000001178e         ret
                        ; endp
000000000001178f         align      16

                     loc_11790:
0000000000011790         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=cwd_advance_fd+25
0000000000011794         call       i_ring_push                                 ; i_ring_push
0000000000011799         test       eax, eax
000000000001179b         js         loc_11785

000000000001179d         mov        edi, eax                                    ; argument "__fd" for method j_close
000000000001179f         call       j_close                                     ; close
00000000000117a4         mov        dword [rbx+0x2c], ebp
00000000000117a7         add        rsp, 0x8
00000000000117ab         pop        rbx
00000000000117ac         pop        rbp
00000000000117ad         ret
                        ; endp
00000000000117ae         align      16

                     loc_117b0:
00000000000117b0         mov        edi, esi                                    ; argument "__fd" for method j_close, CODE XREF=cwd_advance_fd+35
00000000000117b2         call       j_close                                     ; close
00000000000117b7         mov        dword [rbx+0x2c], ebp
00000000000117ba         add        rsp, 0x8
00000000000117be         pop        rbx
00000000000117bf         pop        rbp
00000000000117c0         ret
                        ; endp

                     loc_117c1:
00000000000117c1         call       j_abort                                     ; abort, CODE XREF=cwd_advance_fd+21
                        ; endp
00000000000117c6         align      16                                          ; End of unwind block (FDE at 0x1a024)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     restore_initial_cwd:
00000000000117d0         push       rbp                                         ; Begin of unwind block (FDE at 0x1a068), CODE XREF=fts_build+1854, rpl_fts_read+675, rpl_fts_read+1171
00000000000117d1         push       rbx
00000000000117d2         mov        rbx, rdi
00000000000117d5         sub        rsp, 0x8
00000000000117d9         mov        edx, dword [rdi+0x48]
00000000000117dc         mov        ebp, edx
00000000000117de         and        ebp, 0x4
00000000000117e1         jne        loc_11828

00000000000117e3         and        dh, 0x2
00000000000117e6         jne        loc_11810

00000000000117e8         mov        edi, dword [rdi+0x28]                       ; argument "__fd" for method j_fchdir
00000000000117eb         xor        ebp, ebp
00000000000117ed         call       j_fchdir                                    ; fchdir
00000000000117f2         test       eax, eax
00000000000117f4         setne      bpl

                     loc_117f8:
00000000000117f8         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=restore_initial_cwd+79, restore_initial_cwd+90
00000000000117fc         call       fd_ring_clear                               ; fd_ring_clear
0000000000011801         add        rsp, 0x8
0000000000011805         mov        eax, ebp
0000000000011807         pop        rbx
0000000000011808         pop        rbp
0000000000011809         ret
                        ; endp
000000000001180a         align      16

                     loc_11810:
0000000000011810         mov        edx, 0x1                                    ; CODE XREF=restore_initial_cwd+22
0000000000011815         mov        esi, 0xffffff9c
000000000001181a         call       cwd_advance_fd                              ; cwd_advance_fd
000000000001181f         jmp        loc_117f8
0000000000011821         align      8

                     loc_11828:
0000000000011828         xor        ebp, ebp                                    ; CODE XREF=restore_initial_cwd+17
000000000001182a         jmp        loc_117f8
000000000001182c         align      16                                          ; End of unwind block (FDE at 0x1a068)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_palloc.isra.2:
0000000000011830         push       rbx                                         ; Begin of unwind block (FDE at 0x1a094), CODE XREF=fts_build+611, rpl_fts_open+189
0000000000011831         mov        rcx, qword [rsi]
0000000000011834         mov        rbx, rdi
0000000000011837         mov        rdi, qword [rdi]
000000000001183a         lea        rax, qword [rcx+rdx+0x100]
0000000000011842         cmp        rcx, rax
0000000000011845         ja         loc_11868

0000000000011847         mov        qword [rsi], rax
000000000001184a         mov        rsi, rax                                    ; argument "__size" for method j_realloc
000000000001184d         call       j_realloc                                   ; realloc
0000000000011852         test       rax, rax
0000000000011855         je         loc_11888

0000000000011857         mov        qword [rbx], rax
000000000001185a         mov        eax, 0x1
000000000001185f         pop        rbx
0000000000011860         ret
                        ; endp
0000000000011861         align      8

                     loc_11868:
0000000000011868         call       sub_2c80                                    ; sub_2c80, CODE XREF=fts_palloc.isra.2+21
000000000001186d         mov        qword [rbx], 0x0
0000000000011874         call       j___errno_location                          ; __errno_location
0000000000011879         mov        dword [rax], 0x24
000000000001187f         xor        eax, eax
0000000000011881         pop        rbx
0000000000011882         ret
                        ; endp
0000000000011883         align      8

                     loc_11888:
0000000000011888         mov        rdi, qword [rbx]                            ; CODE XREF=fts_palloc.isra.2+37
000000000001188b         call       sub_2c80                                    ; sub_2c80
0000000000011890         mov        qword [rbx], 0x0
0000000000011897         xor        eax, eax
0000000000011899         pop        rbx
000000000001189a         ret
                        ; endp
000000000001189b         align      32                                          ; End of unwind block (FDE at 0x1a094)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     setup_dir.isra.4:
00000000000118a0         and        edi, 0x102                                  ; Begin of unwind block (FDE at 0x1a0bc), CODE XREF=rpl_fts_open+613, rpl_fts_read+837
00000000000118a6         push       rbx
00000000000118a7         mov        rbx, rsi
00000000000118aa         je         loc_118e0

00000000000118ac         mov        r8, qword [qword_21bfc8]                    ; qword_21bfc8
00000000000118b3         lea        rcx, qword [AD_compare]                     ; AD_compare
00000000000118ba         lea        rdx, qword [AD_hash]                        ; AD_hash
00000000000118c1         xor        esi, esi
00000000000118c3         mov        edi, 0x1f
00000000000118c8         call       hash_initialize                             ; hash_initialize
00000000000118cd         test       rax, rax
00000000000118d0         mov        qword [rbx], rax
00000000000118d3         setne      al

                     loc_118d6:
00000000000118d6         pop        rbx                                         ; CODE XREF=setup_dir.isra.4+85
00000000000118d7         ret
                        ; endp
00000000000118d8         align      32

                     loc_118e0:
00000000000118e0         mov        edi, 0x20                                   ; argument "__size" for method j_malloc, CODE XREF=setup_dir.isra.4+10
00000000000118e5         call       j_malloc                                    ; malloc
00000000000118ea         mov        rdi, rax
00000000000118ed         mov        qword [rbx], rax
00000000000118f0         xor        eax, eax
00000000000118f2         test       rdi, rdi
00000000000118f5         je         loc_118d6

00000000000118f7         call       cycle_check_init                            ; cycle_check_init
00000000000118fc         mov        eax, 0x1
0000000000011901         pop        rbx
0000000000011902         ret
                        ; endp
0000000000011903         align      16                                          ; End of unwind block (FDE at 0x1a0bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_38: int8_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     diropen.isra.6:
0000000000011910         mov        rax, rdx                                    ; Begin of unwind block (FDE at 0x1a0dc), CODE XREF=fts_safe_changedir+141, rpl_fts_open+647, rpl_fts_read+1752, rpl_fts_read+1832, rpl_fts_children+202
0000000000011913         mov        edx, esi
0000000000011915         shl        edx, 0xd
0000000000011918         and        edx, 0x20000
000000000001191e         or         edx, 0x90900
0000000000011924         and        esi, 0x200
000000000001192a         jne        loc_11940

000000000001192c         mov        rdi, rax
000000000001192f         mov        esi, edx
0000000000011931         xor        eax, eax
0000000000011933         jmp        open_safer                                  ; open_safer
                        ; endp
0000000000011938         align      64

                     loc_11940:
0000000000011940         mov        rsi, rax                                    ; CODE XREF=diropen.isra.6+26
0000000000011943         xor        eax, eax
0000000000011945         jmp        openat_safer                                ; openat_safer
000000000001194a         align      16                                          ; End of unwind block (FDE at 0x1a0dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217


                     fts_safe_changedir:
0000000000011950         push       r15                                         ; Begin of unwind block (FDE at 0x1a0f0), CODE XREF=fts_build+2169, fts_build+2194, rpl_fts_read+542, rpl_fts_read+1123
0000000000011952         push       r14
0000000000011954         mov        r14, rsi
0000000000011957         push       r13
0000000000011959         push       r12
000000000001195b         mov        r13, rdi
000000000001195e         push       rbp
000000000001195f         push       rbx
0000000000011960         mov        r12d, edx
0000000000011963         mov        rbp, rcx
0000000000011966         sub        rsp, 0xb8
000000000001196d         mov        ebx, dword [rdi+0x48]
0000000000011970         mov        rax, qword [fs:0x28]
0000000000011979         mov        qword [rsp+0xe8+var_40], rax
0000000000011981         xor        eax, eax
0000000000011983         mov        r9d, ebx
0000000000011986         and        r9d, 0x4
000000000001198a         test       rcx, rcx
000000000001198d         je         loc_11a40

0000000000011993         lea        rdx, qword [aFtsreadFailed+16]              ; 0x15aeb
000000000001199a         mov        ecx, 0x3
000000000001199f         mov        rsi, rbp
00000000000119a2         mov        rdi, rdx
00000000000119a5         rep  cmpsb byte [rsi], byte [rdi]
00000000000119a7         seta       al
00000000000119aa         sbb        al, 0x0
00000000000119ac         test       al, al
00000000000119ae         jne        loc_11a40

00000000000119b4         test       r9d, r9d
00000000000119b7         jne        loc_11a45

00000000000119bd         test       r12d, r12d
00000000000119c0         jns        loc_11baa

00000000000119c6         test       bh, 0x2
00000000000119c9         jne        loc_11b10

                     loc_119cf:
00000000000119cf         mov        byte [rsp+0xe8+var_D9], 0x1                 ; CODE XREF=fts_safe_changedir+489

                     loc_119d4:
00000000000119d4         mov        edi, dword [r13+0x2c]                       ; CODE XREF=fts_safe_changedir+466, fts_safe_changedir+629
00000000000119d8         mov        rdx, rbp
00000000000119db         mov        esi, ebx
00000000000119dd         call       diropen.isra.6                              ; diropen.isra.6
00000000000119e2         test       eax, eax
00000000000119e4         mov        r15d, eax
00000000000119e7         js         loc_11b9b

00000000000119ed         mov        ebx, dword [r13+0x48]
00000000000119f1         test       bl, 0x2
00000000000119f4         je         loc_11a9a

00000000000119fa         nop        word [rax+rax]

                     loc_11a00:
0000000000011a00         lea        rdx, qword [rsp+0xe8+var_D8]                ; argument "__stat_buf" for method j___fxstat, CODE XREF=fts_safe_changedir+324, fts_safe_changedir+362, fts_safe_changedir+512, fts_safe_changedir+619
0000000000011a05         mov        esi, r15d                                   ; argument "__fildes" for method j___fxstat
0000000000011a08         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000011a0d         call       j___fxstat                                  ; __fxstat
0000000000011a12         test       eax, eax
0000000000011a14         je         loc_11ae0

                     loc_11a1a:
0000000000011a1a         mov        ebx, 0xffffffff                             ; CODE XREF=fts_safe_changedir+426

                     loc_11a1f:
0000000000011a1f         test       r12d, r12d                                  ; CODE XREF=fts_safe_changedir+387
0000000000011a22         jns        loc_11a55

0000000000011a24         call       j___errno_location                          ; __errno_location
0000000000011a29         mov        r12d, dword [rax]
0000000000011a2c         mov        rbp, rax
0000000000011a2f         mov        edi, r15d                                   ; argument "__fd" for method j_close
0000000000011a32         call       j_close                                     ; close
0000000000011a37         mov        dword [rbp], r12d
0000000000011a3b         jmp        loc_11a55
0000000000011a3d         align      64

                     loc_11a40:
0000000000011a40         test       r9d, r9d                                    ; CODE XREF=fts_safe_changedir+61, fts_safe_changedir+94
0000000000011a43         je         loc_11a80

                     loc_11a45:
0000000000011a45         and        bh, 0x2                                     ; CODE XREF=fts_safe_changedir+103
0000000000011a48         je         loc_11a53

0000000000011a4a         test       r12d, r12d
0000000000011a4d         jns        loc_11b00

                     loc_11a53:
0000000000011a53         xor        ebx, ebx                                    ; CODE XREF=fts_safe_changedir+248

                     loc_11a55:
0000000000011a55         mov        rcx, qword [rsp+0xe8+var_40]                ; CODE XREF=fts_safe_changedir+210, fts_safe_changedir+235, fts_safe_changedir+442, fts_safe_changedir+547, fts_safe_changedir+592
0000000000011a5d         xor        rcx, qword [fs:0x28]
0000000000011a66         mov        eax, ebx
0000000000011a68         jne        loc_11ba5

0000000000011a6e         add        rsp, 0xb8
0000000000011a75         pop        rbx
0000000000011a76         pop        rbp
0000000000011a77         pop        r12
0000000000011a79         pop        r13
0000000000011a7b         pop        r14
0000000000011a7d         pop        r15
0000000000011a7f         ret
                        ; endp

                     loc_11a80:
0000000000011a80         test       r12d, r12d                                  ; CODE XREF=fts_safe_changedir+243
0000000000011a83         js         loc_11bc0

0000000000011a89         test       bl, 0x2
0000000000011a8c         mov        r15d, r12d
0000000000011a8f         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000011a94         jne        loc_11a00

                     loc_11a9a:
0000000000011a9a         test       rbp, rbp                                    ; CODE XREF=fts_safe_changedir+164
0000000000011a9d         je         loc_11ac0

0000000000011a9f         lea        rdx, qword [aFtsreadFailed+16]              ; 0x15aeb

                     loc_11aa6:
0000000000011aa6         mov        ecx, 0x3                                    ; CODE XREF=fts_safe_changedir+613
0000000000011aab         mov        rsi, rbp
0000000000011aae         mov        rdi, rdx
0000000000011ab1         rep  cmpsb byte [rsi], byte [rdi]
0000000000011ab3         seta       al
0000000000011ab6         sbb        al, 0x0
0000000000011ab8         test       al, al
0000000000011aba         je         loc_11a00

                     loc_11ac0:
0000000000011ac0         and        bh, 0x2                                     ; CODE XREF=fts_safe_changedir+333, fts_safe_changedir+506, fts_safe_changedir+582
0000000000011ac3         jne        loc_11b58

0000000000011ac9         mov        edi, r15d                                   ; argument "__fd" for method j_fchdir
0000000000011acc         call       j_fchdir                                    ; fchdir
0000000000011ad1         mov        ebx, eax
0000000000011ad3         jmp        loc_11a1f
0000000000011ad8         align      32

                     loc_11ae0:
0000000000011ae0         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=fts_safe_changedir+196
0000000000011ae5         cmp        qword [r14+0x78], rax
0000000000011ae9         je         loc_11b80

                     loc_11aef:
0000000000011aef         call       j___errno_location                          ; __errno_location, CODE XREF=fts_safe_changedir+572
0000000000011af4         mov        dword [rax], 0x2
0000000000011afa         jmp        loc_11a1a
0000000000011aff         align      256

                     loc_11b00:
0000000000011b00         mov        edi, r12d                                   ; argument "__fd" for method j_close, CODE XREF=fts_safe_changedir+253
0000000000011b03         xor        ebx, ebx
0000000000011b05         call       j_close                                     ; close
0000000000011b0a         jmp        loc_11a55
0000000000011b0f         align      16

                     loc_11b10:
0000000000011b10         lea        r15, qword [r13+0x60]                       ; CODE XREF=fts_safe_changedir+121
0000000000011b14         mov        rdi, r15
0000000000011b17         call       i_ring_empty                                ; i_ring_empty
0000000000011b1c         test       al, al
0000000000011b1e         mov        byte [rsp+0xe8+var_D9], al
0000000000011b22         jne        loc_119d4

0000000000011b28         mov        rdi, r15
0000000000011b2b         call       i_ring_pop                                  ; i_ring_pop
0000000000011b30         test       eax, eax
0000000000011b32         mov        r15d, eax
0000000000011b35         mov        ebx, dword [r13+0x48]
0000000000011b39         js         loc_119cf

0000000000011b3f         test       bl, 0x2
0000000000011b42         mov        r12d, eax
0000000000011b45         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000011b4a         je         loc_11ac0

0000000000011b50         jmp        loc_11a00
0000000000011b55         align      8

                     loc_11b58:
0000000000011b58         movzx      r14d, byte [rsp+0xe8+var_D9]                ; CODE XREF=fts_safe_changedir+371
0000000000011b5e         mov        esi, r15d
0000000000011b61         mov        rdi, r13
0000000000011b64         xor        ebx, ebx
0000000000011b66         xor        r14d, 0x1
0000000000011b6a         movzx      edx, r14b
0000000000011b6e         call       cwd_advance_fd                              ; cwd_advance_fd
0000000000011b73         jmp        loc_11a55
0000000000011b78         align      128

                     loc_11b80:
0000000000011b80         mov        rax, qword [rsp+0xe8+var_D0]                ; CODE XREF=fts_safe_changedir+409
0000000000011b85         cmp        qword [r14+0x80], rax
0000000000011b8c         jne        loc_11aef

0000000000011b92         mov        ebx, dword [r13+0x48]
0000000000011b96         jmp        loc_11ac0

                     loc_11b9b:
0000000000011b9b         mov        ebx, 0xffffffff                             ; CODE XREF=fts_safe_changedir+151
0000000000011ba0         jmp        loc_11a55

                     loc_11ba5:
0000000000011ba5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fts_safe_changedir+280
                        ; endp

                     loc_11baa:
0000000000011baa         test       bl, 0x2                                     ; CODE XREF=fts_safe_changedir+112
0000000000011bad         mov        r15d, r12d
0000000000011bb0         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000011bb5         je         loc_11aa6

0000000000011bbb         jmp        loc_11a00

                     loc_11bc0:
0000000000011bc0         mov        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=fts_safe_changedir+307
0000000000011bc5         jmp        loc_119d4
0000000000011bca         align      16                                          ; End of unwind block (FDE at 0x1a0f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     enter_dir.isra.10:
0000000000011bd0         and        edi, 0x102                                  ; Begin of unwind block (FDE at 0x1a140), CODE XREF=fts_build+1558, rpl_fts_read+899
0000000000011bd6         push       r12
0000000000011bd8         mov        r12, rsi
0000000000011bdb         push       rbp
0000000000011bdc         push       rbx
0000000000011bdd         mov        rbx, rdx
0000000000011be0         je         loc_11c50

0000000000011be2         mov        edi, 0x18                                   ; argument "__size" for method j_malloc
0000000000011be7         call       j_malloc                                    ; malloc
0000000000011bec         test       rax, rax
0000000000011bef         mov        rbp, rax
0000000000011bf2         je         loc_11c78

0000000000011bf8         mov        rax, qword [rbx+0x78]
0000000000011bfc         mov        rdi, qword [r12]
0000000000011c00         mov        rsi, rbp
0000000000011c03         mov        qword [rbp+0x10], rbx
0000000000011c07         mov        qword [rbp], rax
0000000000011c0b         mov        rax, qword [rbx+0x80]
0000000000011c12         mov        qword [rbp+8], rax
0000000000011c16         call       hash_insert                                 ; hash_insert
0000000000011c1b         cmp        rbp, rax
0000000000011c1e         mov        r12, rax
0000000000011c21         je         loc_11c41

0000000000011c23         mov        rdi, rbp
0000000000011c26         call       sub_2c80                                    ; sub_2c80
0000000000011c2b         test       r12, r12
0000000000011c2e         je         loc_11c78

0000000000011c30         mov        rax, qword [r12+0x10]
0000000000011c35         mov        ecx, 0x2
0000000000011c3a         mov        word [rbx+0x70], cx
0000000000011c3e         mov        qword [rbx], rax

                     loc_11c41:
0000000000011c41         pop        rbx                                         ; CODE XREF=enter_dir.isra.10+81, enter_dir.isra.10+143
0000000000011c42         mov        eax, 0x1
0000000000011c47         pop        rbp
0000000000011c48         pop        r12
0000000000011c4a         ret
                        ; endp
0000000000011c4b         align      16

                     loc_11c50:
0000000000011c50         mov        rdi, qword [r12]                            ; CODE XREF=enter_dir.isra.10+16
0000000000011c54         lea        rsi, qword [rdx+0x78]
0000000000011c58         call       cycle_check                                 ; cycle_check
0000000000011c5d         test       al, al
0000000000011c5f         je         loc_11c41

0000000000011c61         mov        edx, 0x2
0000000000011c66         mov        qword [rbx], rbx
0000000000011c69         mov        word [rbx+0x70], dx
0000000000011c6d         pop        rbx
0000000000011c6e         pop        rbp
0000000000011c6f         pop        r12
0000000000011c71         ret
                        ; endp
0000000000011c72         align      8

                     loc_11c78:
0000000000011c78         pop        rbx                                         ; CODE XREF=enter_dir.isra.10+34, enter_dir.isra.10+94
0000000000011c79         xor        eax, eax
0000000000011c7b         pop        rbp
0000000000011c7c         pop        r12
0000000000011c7e         ret
                        ; endp
0000000000011c7f         align      128                                         ; End of unwind block (FDE at 0x1a140)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     leave_dir.isra.12:
0000000000011c80         sub        rsp, 0x28                                   ; Begin of unwind block (FDE at 0x1a184), CODE XREF=fts_build+1530, rpl_fts_read+405, rpl_fts_read+1209, rpl_fts_read+1368
0000000000011c84         mov        rcx, rsi
0000000000011c87         mov        rax, qword [fs:0x28]
0000000000011c90         mov        qword [rsp+0x28+var_10], rax
0000000000011c95         xor        eax, eax
0000000000011c97         and        edi, 0x102
0000000000011c9d         jne        loc_11ce0

0000000000011c9f         mov        rax, qword [rdx+8]
0000000000011ca3         test       rax, rax
0000000000011ca6         je         loc_11cc5

0000000000011ca8         cmp        qword [rax+0x58], 0x0
0000000000011cad         js         loc_11cc5

0000000000011caf         mov        rcx, qword [rsi]
0000000000011cb2         cmp        qword [rcx+0x10], 0x0
0000000000011cb7         je         loc_11d33

0000000000011cb9         mov        rsi, qword [rdx+0x80]
0000000000011cc0         cmp        qword [rcx], rsi
0000000000011cc3         je         loc_11d10

                     loc_11cc5:
0000000000011cc5         mov        rax, qword [rsp+0x28+var_10]                ; CODE XREF=leave_dir.isra.12+38, leave_dir.isra.12+45, leave_dir.isra.12+140, leave_dir.isra.12+152, leave_dir.isra.12+172
0000000000011cca         xor        rax, qword [fs:0x28]
0000000000011cd3         jne        loc_11d2e

0000000000011cd5         add        rsp, 0x28
0000000000011cd9         ret
                        ; endp
0000000000011cda         align      32

                     loc_11ce0:
0000000000011ce0         mov        rax, qword [rdx+0x78]                       ; CODE XREF=leave_dir.isra.12+29
0000000000011ce4         mov        rdi, qword [rcx]
0000000000011ce7         mov        rsi, rsp
0000000000011cea         mov        qword [rsp+0x28+var_28], rax
0000000000011cee         mov        rax, qword [rdx+0x80]
0000000000011cf5         mov        qword [rsp+0x28+var_20], rax
0000000000011cfa         call       hash_delete                                 ; hash_delete
0000000000011cff         test       rax, rax
0000000000011d02         je         loc_11d33

0000000000011d04         mov        rdi, rax
0000000000011d07         call       sub_2c80                                    ; sub_2c80
0000000000011d0c         jmp        loc_11cc5
0000000000011d0e         align      16

                     loc_11d10:
0000000000011d10         mov        rsi, qword [rdx+0x78]                       ; CODE XREF=leave_dir.isra.12+67
0000000000011d14         cmp        qword [rcx+8], rsi
0000000000011d18         jne        loc_11cc5

0000000000011d1a         mov        rdx, qword [rax+0x78]
0000000000011d1e         mov        rax, qword [rax+0x80]
0000000000011d25         mov        qword [rcx+8], rdx
0000000000011d29         mov        qword [rcx], rax
0000000000011d2c         jmp        loc_11cc5

                     loc_11d2e:
0000000000011d2e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=leave_dir.isra.12+83
                        ; endp

                     loc_11d33:
0000000000011d33         call       j_abort                                     ; abort, CODE XREF=leave_dir.isra.12+55, leave_dir.isra.12+130
                        ; endp
0000000000011d38         align      64                                          ; End of unwind block (FDE at 0x1a184)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_44: int32_t, -68
        ;    var_49: int8_t, -73
        ;    var_4A: int8_t, -74
        ;    var_4B: int8_t, -75
        ;    var_50: int32_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160


                     fts_build:
0000000000011d40         push       r15                                         ; Begin of unwind block (FDE at 0x1a1a0), CODE XREF=rpl_fts_read+1056, rpl_fts_read+1561, rpl_fts_children+139, rpl_fts_children+219
0000000000011d42         push       r14
0000000000011d44         mov        r15, rdi
0000000000011d47         push       r13
0000000000011d49         push       r12
0000000000011d4b         push       rbp
0000000000011d4c         push       rbx
0000000000011d4d         sub        rsp, 0x78
0000000000011d51         mov        rbp, qword [rdi]
0000000000011d54         mov        rax, qword [fs:0x28]
0000000000011d5d         mov        qword [rsp+0xa8+var_40], rax
0000000000011d62         xor        eax, eax
0000000000011d64         mov        dword [rsp+0xa8+var_50], esi
0000000000011d68         mov        rax, qword [rbp+0x18]
0000000000011d6c         test       rax, rax
0000000000011d6f         mov        qword [rsp+0xa8+var_58], rax
0000000000011d74         je         loc_121b0

0000000000011d7a         mov        rdi, rax                                    ; argument "__dirp" for method j_dirfd
0000000000011d7d         call       j_dirfd                                     ; dirfd
0000000000011d82         test       eax, eax
0000000000011d84         mov        dword [rsp+0xa8+var_44], eax
0000000000011d88         js         loc_122e0

0000000000011d8e         cmp        qword [r15+0x40], 0x0
0000000000011d93         je         loc_12568

0000000000011d99         mov        qword [rsp+0xa8+var_70], 0xffffffffffffffff

                     loc_11da2:
0000000000011da2         mov        edi, dword [r15+0x48]                       ; CODE XREF=fts_build+2207
0000000000011da6         mov        byte [rsp+0xa8+var_49], 0x1

                     loc_11dab:
0000000000011dab         mov        rcx, qword [rbp+0x48]                       ; CODE XREF=fts_build+1405, fts_build+2106, fts_build+2121
0000000000011daf         mov        rdx, qword [rbp+0x38]
0000000000011db3         mov        qword [rsp+0xa8+var_68], 0x0
0000000000011dbc         cmp        byte [rdx+rcx-1], 0x2f
0000000000011dc1         lea        rax, qword [rcx-1]
0000000000011dc5         cmovne     rax, rcx
0000000000011dc9         and        edi, 0x4
0000000000011dcc         mov        qword [rsp+0xa8+var_60], rax
0000000000011dd1         je         loc_11de3

0000000000011dd3         add        rax, qword [r15+0x20]
0000000000011dd7         lea        rbx, qword [rax+1]
0000000000011ddb         mov        byte [rax], 0x2f
0000000000011dde         mov        qword [rsp+0xa8+var_68], rbx

                     loc_11de3:
0000000000011de3         mov        rax, qword [rsp+0xa8+var_60]                ; CODE XREF=fts_build+145
0000000000011de8         mov        rbx, qword [r15+0x30]
0000000000011dec         mov        byte [rsp+0xa8+var_4A], 0x0
0000000000011df1         mov        byte [rsp+0xa8+var_4B], 0x0
0000000000011df6         mov        qword [rsp+0xa8+var_A0], 0x0
0000000000011dff         mov        qword [rsp+0xa8+var_98], 0x0
0000000000011e08         add        rax, 0x1
0000000000011e0c         mov        qword [rsp+0xa8+var_88], rbp
0000000000011e11         sub        rbx, rax
0000000000011e14         mov        qword [rsp+0xa8+var_90], rax
0000000000011e19         mov        rax, qword [rbp+0x58]
0000000000011e1d         mov        qword [rsp+0xa8+var_80], rbx
0000000000011e22         xor        ebx, ebx
0000000000011e24         add        rax, 0x1
0000000000011e28         mov        qword [rsp+0xa8+var_78], rax
0000000000011e2d         jmp        loc_11f0f
0000000000011e32         align      8

                     loc_11e38:
0000000000011e38         mov        r9, r14                                     ; CODE XREF=fts_build+578, fts_build+678
0000000000011e3b         add        r9, qword [rsp+0xa8+var_90]
0000000000011e40         jb         loc_126a0

0000000000011e46         mov        rax, qword [rsp+0xa8+var_78]
0000000000011e4b         lea        rsi, qword [r13+0x108]
0000000000011e52         mov        qword [r13+0x58], rax
0000000000011e56         mov        rax, qword [r15]
0000000000011e59         mov        qword [r13+0x48], r9
0000000000011e5d         mov        qword [r13+8], rax
0000000000011e61         mov        rax, qword [rbp]
0000000000011e65         mov        qword [r13+0x80], rax
0000000000011e6c         mov        eax, dword [r15+0x48]
0000000000011e70         test       al, 0x4
0000000000011e72         jne        loc_120e0

0000000000011e78         mov        qword [r13+0x30], rsi

                     loc_11e7c:
0000000000011e7c         cmp        qword [r15+0x40], 0x0                       ; CODE XREF=fts_build+958
0000000000011e81         je         loc_11e8c

0000000000011e83         test       ah, 0x4
0000000000011e86         je         loc_12188

                     loc_11e8c:
0000000000011e8c         movzx      edx, byte [rbp+0x12]                        ; CODE XREF=fts_build+321
0000000000011e90         and        eax, 0x18
0000000000011e93         mov        esi, edx
0000000000011e95         sub        edx, 0x1
0000000000011e98         cmp        eax, 0x18
0000000000011e9b         je         loc_12150

                     loc_11ea1:
0000000000011ea1         mov        ecx, 0xb                                    ; CODE XREF=fts_build+1046
0000000000011ea6         cmp        edx, 0xb
0000000000011ea9         mov        word [r13+0x70], cx
0000000000011eae         ja         loc_12118

0000000000011eb4         lea        rax, qword [CSWTCH.53]                      ; CSWTCH.53
0000000000011ebb         mov        eax, dword [rax+rdx*4]
0000000000011ebe         mov        dword [r13+0x90], eax
0000000000011ec5         mov        eax, 0x2

                     loc_11eca:
0000000000011eca         mov        qword [r13+0xa8], rax                       ; CODE XREF=fts_build+1000, fts_build+1087, fts_build+2508

                     loc_11ed1:
0000000000011ed1         cmp        qword [rsp+0xa8+var_98], 0x0                ; CODE XREF=fts_build+1114
0000000000011ed7         mov        qword [r13+0x10], 0x0
0000000000011edf         je         loc_12108

0000000000011ee5         mov        rax, qword [rsp+0xa8+var_A0]
0000000000011eea         mov        qword [rax+0x10], r13

                     loc_11eee:
0000000000011eee         cmp        rbx, j_stpcpy                               ; CODE XREF=fts_build+973
0000000000011ef5         je         loc_11ff0

                     loc_11efb:
0000000000011efb         add        rbx, 0x1                                    ; CODE XREF=fts_build+693, fts_build+1605
0000000000011eff         cmp        rbx, qword [rsp+0xa8+var_70]
0000000000011f04         jae        loc_12048

                     loc_11f0a:
0000000000011f0a         mov        qword [rsp+0xa8+var_A0], r13                ; CODE XREF=fts_build+765, fts_build+1030

                     loc_11f0f:
0000000000011f0f         mov        rax, qword [rsp+0xa8+var_88]                ; CODE XREF=fts_build+237
0000000000011f14         mov        r13, qword [rax+0x18]
0000000000011f18         test       r13, r13
0000000000011f1b         je         loc_123e8

0000000000011f21         call       j___errno_location                          ; __errno_location
0000000000011f26         mov        rdi, r13                                    ; argument "__dirp" for method j_readdir
0000000000011f29         mov        dword [rax], 0x0
0000000000011f2f         mov        r12, rax
0000000000011f32         call       j_readdir                                   ; readdir
0000000000011f37         test       rax, rax
0000000000011f3a         mov        rbp, rax
0000000000011f3d         je         loc_124c0

0000000000011f43         test       byte [r15+0x48], 0x20
0000000000011f48         jne        loc_11f54

0000000000011f4a         cmp        byte [rax+0x13], 0x2e
0000000000011f4e         je         loc_12130

                     loc_11f54:
0000000000011f54         lea        r13, qword [rbp+0x13]                       ; CODE XREF=fts_build+520, fts_build+1019
0000000000011f58         mov        rdi, r13                                    ; argument "__s" for method j_strlen
0000000000011f5b         call       j_strlen                                    ; strlen
0000000000011f60         mov        rsi, r13
0000000000011f63         mov        rdx, rax
0000000000011f66         mov        rdi, r15
0000000000011f69         mov        r14, rax
0000000000011f6c         call       fts_alloc                                   ; fts_alloc
0000000000011f71         test       rax, rax
0000000000011f74         mov        r13, rax
0000000000011f77         je         loc_12390

0000000000011f7d         cmp        qword [rsp+0xa8+var_80], r14
0000000000011f82         ja         loc_11e38

0000000000011f88         mov        rax, qword [r15+0x20]
0000000000011f8c         lea        rsi, qword [r15+0x30]
0000000000011f90         lea        rdi, qword [r15+0x20]
0000000000011f94         mov        qword [rsp+0xa8+var_80], rax
0000000000011f99         mov        rax, qword [rsp+0xa8+var_60]
0000000000011f9e         lea        rdx, qword [rax+r14+2]
0000000000011fa3         call       fts_palloc.isra.2                           ; fts_palloc.isra.2
0000000000011fa8         test       al, al
0000000000011faa         je         loc_12390

0000000000011fb0         mov        rdx, qword [r15+0x20]
0000000000011fb4         cmp        rdx, qword [rsp+0xa8+var_80]
0000000000011fb9         je         loc_121a0

0000000000011fbf         add        rdx, qword [rsp+0xa8+var_90]
0000000000011fc4         test       byte [r15+0x48], 0x4
0000000000011fc9         cmove      rdx, qword [rsp+0xa8+var_68]
0000000000011fcf         mov        qword [rsp+0xa8+var_68], rdx

                     loc_11fd4:
0000000000011fd4         mov        rcx, qword [r15+0x30]                       ; CODE XREF=fts_build+1125
0000000000011fd8         sub        rcx, qword [rsp+0xa8+var_90]
0000000000011fdd         mov        byte [rsp+0xa8+var_4B], al
0000000000011fe1         mov        qword [rsp+0xa8+var_80], rcx
0000000000011fe6         jmp        loc_11e38
0000000000011feb         align      16

                     loc_11ff0:
0000000000011ff0         cmp        qword [r15+0x40], 0x0                       ; CODE XREF=fts_build+437
0000000000011ff5         jne        loc_11efb

0000000000011ffb         mov        esi, dword [rsp+0xa8+var_44]
0000000000011fff         mov        rdi, qword [rsp+0xa8+var_88]
0000000000012004         call       filesystem_type                             ; filesystem_type
0000000000012009         cmp        rax, 0x1021994
000000000001200f         je         loc_12380

0000000000012015         mov        ecx, 0xff534d42
000000000001201a         cmp        rax, rcx
000000000001201d         je         loc_12380

0000000000012023         cmp        rax, 0x6969
0000000000012029         je         loc_12380

000000000001202f         add        rbx, 0x1
0000000000012033         cmp        rbx, qword [rsp+0xa8+var_70]
0000000000012038         mov        byte [rsp+0xa8+var_4A], 0x1
000000000001203d         jb         loc_11f0a

0000000000012043         nop        dword [rax+rax]

                     loc_12048:
0000000000012048         cmp        byte [rsp+0xa8+var_4B], 0x0                 ; CODE XREF=fts_build+452
000000000001204d         mov        rbp, qword [rsp+0xa8+var_88]
0000000000012052         je         loc_123f6

                     loc_12058:
0000000000012058         mov        rax, qword [r15+8]                          ; CODE XREF=fts_build+1712
000000000001205c         mov        rcx, qword [r15+0x20]
0000000000012060         test       rax, rax
0000000000012063         je         loc_12090

0000000000012065         nop        dword [rax]

                     loc_12068:
0000000000012068         mov        rdx, qword [rax+0x30]                       ; CODE XREF=fts_build+846
000000000001206c         lea        rsi, qword [rax+0x108]
0000000000012073         cmp        rdx, rsi
0000000000012076         je         loc_12083

0000000000012078         sub        rdx, qword [rax+0x38]
000000000001207c         add        rdx, rcx
000000000001207f         mov        qword [rax+0x30], rdx

                     loc_12083:
0000000000012083         mov        qword [rax+0x38], rcx                       ; CODE XREF=fts_build+822
0000000000012087         mov        rax, qword [rax+0x10]
000000000001208b         test       rax, rax
000000000001208e         jne        loc_12068

                     loc_12090:
0000000000012090         mov        rax, qword [rsp+0xa8+var_98]                ; CODE XREF=fts_build+803
0000000000012095         jmp        loc_120a3
0000000000012097         align      32

                     loc_120a0:
00000000000120a0         mov        rax, rdx                                    ; CODE XREF=fts_build+916, fts_build+922

                     loc_120a3:
00000000000120a3         cmp        qword [rax+0x58], 0x0                       ; CODE XREF=fts_build+853
00000000000120a8         js         loc_123f6

00000000000120ae         mov        rdx, qword [rax+0x30]
00000000000120b2         lea        rsi, qword [rax+0x108]
00000000000120b9         cmp        rdx, rsi
00000000000120bc         je         loc_120c9

00000000000120be         sub        rdx, qword [rax+0x38]
00000000000120c2         add        rdx, rcx
00000000000120c5         mov        qword [rax+0x30], rdx

                     loc_120c9:
00000000000120c9         mov        rdx, qword [rax+0x10]                       ; CODE XREF=fts_build+892
00000000000120cd         mov        qword [rax+0x38], rcx
00000000000120d1         test       rdx, rdx
00000000000120d4         jne        loc_120a0

00000000000120d6         mov        rdx, qword [rax+8]
00000000000120da         jmp        loc_120a0
00000000000120dc         align      32

                     loc_120e0:
00000000000120e0         mov        rax, qword [r13+0x38]                       ; CODE XREF=fts_build+306
00000000000120e4         mov        rdi, qword [rsp+0xa8+var_68]                ; argument "__dest" for method j_memmove
00000000000120e9         mov        qword [r13+0x30], rax
00000000000120ed         mov        rax, qword [r13+0x60]
00000000000120f1         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
00000000000120f5         call       j_memmove                                   ; memmove
00000000000120fa         mov        eax, dword [r15+0x48]
00000000000120fe         jmp        loc_11e7c
0000000000012103         align      8

                     loc_12108:
0000000000012108         mov        qword [rsp+0xa8+var_98], r13                ; CODE XREF=fts_build+415
000000000001210d         jmp        loc_11eee
0000000000012112         align      8

                     loc_12118:
0000000000012118         mov        dword [r13+0x90], 0x0                       ; CODE XREF=fts_build+366
0000000000012123         mov        eax, 0x2
0000000000012128         jmp        loc_11eca
000000000001212d         align      16

                     loc_12130:
0000000000012130         cmp        byte [rax+0x14], 0x0                        ; CODE XREF=fts_build+526
0000000000012134         je         loc_12141

0000000000012136         cmp        word [rax+0x14], 0x2e
000000000001213b         jne        loc_11f54

                     loc_12141:
0000000000012141         mov        r13, qword [rsp+0xa8+var_A0]                ; CODE XREF=fts_build+1012
0000000000012146         jmp        loc_11f0a
000000000001214b         align      16

                     loc_12150:
0000000000012150         and        esi, 0xfb                                   ; CODE XREF=fts_build+347
0000000000012156         je         loc_11ea1

000000000001215c         mov        eax, 0xb
0000000000012161         cmp        edx, 0xb
0000000000012164         mov        word [r13+0x70], ax
0000000000012169         jbe        loc_126f6

000000000001216f         mov        dword [r13+0x90], 0x0
000000000001217a         mov        eax, 0x1
000000000001217f         jmp        loc_11eca
0000000000012184         align      8

                     loc_12188:
0000000000012188         xor        edx, edx                                    ; CODE XREF=fts_build+326
000000000001218a         mov        rsi, r13
000000000001218d         mov        rdi, r15
0000000000012190         call       fts_stat                                    ; fts_stat
0000000000012195         mov        word [r13+0x70], ax
000000000001219a         jmp        loc_11ed1
000000000001219f         align      32

                     loc_121a0:
00000000000121a0         movzx      eax, byte [rsp+0xa8+var_4B]                 ; CODE XREF=fts_build+633
00000000000121a5         jmp        loc_11fd4
00000000000121aa         align      16

                     loc_121b0:
00000000000121b0         mov        eax, dword [rdi+0x48]                       ; CODE XREF=fts_build+52
00000000000121b3         mov        edx, eax
00000000000121b5         and        edx, 0x10
00000000000121b8         je         loc_121c7

00000000000121ba         test       al, 0x1
00000000000121bc         mov        edx, 0x20000
00000000000121c1         jne        loc_122c8

                     loc_121c7:
00000000000121c7         and        eax, 0x204                                  ; CODE XREF=fts_build+1144, fts_build+1429
00000000000121cc         mov        rsi, qword [rbp+0x30]
00000000000121d0         mov        edi, 0xffffff9c
00000000000121d5         cmp        eax, 0x200
00000000000121da         jne        loc_121e0

00000000000121dc         mov        edi, dword [r15+0x2c]

                     loc_121e0:
00000000000121e0         lea        rcx, qword [rsp+0xa8+var_44]                ; CODE XREF=fts_build+1178
00000000000121e5         call       opendirat                                   ; opendirat
00000000000121ea         test       rax, rax
00000000000121ed         mov        qword [rbp+0x18], rax
00000000000121f1         je         loc_12510

00000000000121f7         cmp        word [rbp+0x70], 0xb
00000000000121fc         je         loc_12590

0000000000012202         mov        edi, dword [r15+0x48]
0000000000012206         test       edi, 0x100
000000000001220c         jne        loc_12330

                     loc_12212:
0000000000012212         cmp        qword [r15+0x40], 0x1                       ; CODE XREF=fts_build+1565, fts_build+2145
0000000000012217         sbb        rax, rax
000000000001221a         and        eax, 0x186a1
000000000001221f         sub        rax, 0x1
0000000000012223         cmp        dword [rsp+0xa8+var_50], 0x2
0000000000012228         mov        qword [rsp+0xa8+var_70], rax
000000000001222d         je         loc_12580

0000000000012233         mov        edx, dword [r15+0x48]
0000000000012237         mov        eax, dword [rsp+0xa8+var_44]
000000000001223b         and        edx, 0x38
000000000001223e         cmp        edx, 0x18
0000000000012241         je         loc_125e4

                     loc_12247:
0000000000012247         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+2220, fts_build+2244
000000000001224c         mov        r12d, 0x1
0000000000012252         sete       bl

                     loc_12255:
0000000000012255         test       byte [r15+0x49], 0x2                        ; CODE XREF=fts_build+2389
000000000001225a         jne        loc_1263c

                     loc_12260:
0000000000012260         test       eax, eax                                    ; CODE XREF=fts_build+2323
0000000000012262         jns        loc_125c8

                     loc_12268:
0000000000012268         test       bl, bl                                      ; CODE XREF=fts_build+2201
000000000001226a         je         loc_1227b

000000000001226c         test       r12b, r12b
000000000001226f         je         loc_1227b

0000000000012271         call       j___errno_location                          ; __errno_location
0000000000012276         mov        eax, dword [rax]
0000000000012278         mov        dword [rbp+0x40], eax

                     loc_1227b:
000000000001227b         or         word [rbp+0x72], 0x1                        ; CODE XREF=fts_build+1322, fts_build+1327
0000000000012280         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
0000000000012284         call       j_closedir                                  ; closedir
0000000000012289         mov        edi, dword [r15+0x48]
000000000001228d         mov        qword [rbp+0x18], 0x0
0000000000012295         test       edi, 0x200
000000000001229b         je         loc_122b0

000000000001229d         mov        eax, dword [rsp+0xa8+var_44]
00000000000122a1         test       eax, eax
00000000000122a3         js         loc_122b0

00000000000122a5         mov        edi, eax                                    ; argument "__fd" for method j_close
00000000000122a7         call       j_close                                     ; close
00000000000122ac         mov        edi, dword [r15+0x48]

                     loc_122b0:
00000000000122b0         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=fts_build+1371, fts_build+1379
00000000000122b8         mov        byte [rsp+0xa8+var_49], 0x0
00000000000122bd         jmp        loc_11dab
00000000000122c2         align      8

                     loc_122c8:
00000000000122c8         xor        edx, edx                                    ; CODE XREF=fts_build+1153
00000000000122ca         cmp        qword [rbp+0x58], 0x0
00000000000122cf         setne      dl
00000000000122d2         shl        edx, 0x11
00000000000122d5         jmp        loc_121c7
00000000000122da         align      32

                     loc_122e0:
00000000000122e0         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir, CODE XREF=fts_build+72
00000000000122e4         call       j_closedir                                  ; closedir
00000000000122e9         cmp        dword [rsp+0xa8+var_50], 0x3
00000000000122ee         mov        qword [rbp+0x18], 0x0
00000000000122f6         je         loc_1251b

                     loc_122fc:
00000000000122fc         mov        qword [rsp+0xa8+var_98], 0x0                ; CODE XREF=fts_build+2005, fts_build+2032

                     loc_12305:
0000000000012305         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=fts_build+1591, fts_build+1692, fts_build+1798, fts_build+1808, fts_build+1835, fts_build+1907, fts_build+2080, fts_build+2295, fts_build+2476
000000000001230a         xor        rbx, qword [fs:0x28]
0000000000012313         mov        rax, qword [rsp+0xa8+var_98]
0000000000012318         jne        loc_126f1

000000000001231e         add        rsp, 0x78
0000000000012322         pop        rbx
0000000000012323         pop        rbp
0000000000012324         pop        r12
0000000000012326         pop        r13
0000000000012328         pop        r14
000000000001232a         pop        r15
000000000001232c         ret
                        ; endp
000000000001232d         align      16

                     loc_12330:
0000000000012330         lea        rbx, qword [r15+0x58]                       ; CODE XREF=fts_build+1228
0000000000012334         mov        rdx, rbp
0000000000012337         mov        rsi, rbx
000000000001233a         call       leave_dir.isra.12                           ; leave_dir.isra.12
000000000001233f         xor        edx, edx
0000000000012341         mov        rsi, rbp
0000000000012344         mov        rdi, r15
0000000000012347         call       fts_stat                                    ; fts_stat
000000000001234c         mov        edi, dword [r15+0x48]
0000000000012350         mov        rdx, rbp
0000000000012353         mov        rsi, rbx
0000000000012356         call       enter_dir.isra.10                           ; enter_dir.isra.10
000000000001235b         test       al, al
000000000001235d         jne        loc_12212

0000000000012363         call       j___errno_location                          ; __errno_location
0000000000012368         mov        qword [rsp+0xa8+var_98], 0x0
0000000000012371         mov        dword [rax], 0xc
0000000000012377         jmp        loc_12305
0000000000012379         align      128

                     loc_12380:
0000000000012380         mov        byte [rsp+0xa8+var_4A], 0x0                 ; CODE XREF=fts_build+719, fts_build+733, fts_build+745
0000000000012385         jmp        loc_11efb
000000000001238a         align      16

                     loc_12390:
0000000000012390         mov        rdi, r13                                    ; CODE XREF=fts_build+567, fts_build+618
0000000000012393         mov        rbp, qword [rsp+0xa8+var_88]
0000000000012398         mov        ebx, dword [r12]
000000000001239c         call       sub_2c80                                    ; sub_2c80
00000000000123a1         mov        rdi, qword [rsp+0xa8+var_98]
00000000000123a6         call       fts_lfree                                   ; fts_lfree
00000000000123ab         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
00000000000123af         call       j_closedir                                  ; closedir
00000000000123b4         mov        r9d, 0x7
00000000000123ba         mov        qword [rbp+0x18], 0x0
00000000000123c2         mov        qword [rsp+0xa8+var_98], 0x0
00000000000123cb         mov        word [rbp+0x70], r9w
00000000000123d0         or         dword [r15+0x48], 0x2000
00000000000123d8         mov        dword [r12], ebx
00000000000123dc         jmp        loc_12305
00000000000123e1         align      8

                     loc_123e8:
00000000000123e8         mov        rbp, rax                                    ; CODE XREF=fts_build+475

                     loc_123eb:
00000000000123eb         cmp        byte [rsp+0xa8+var_4B], 0x0                 ; CODE XREF=fts_build+1973, fts_build+1992
00000000000123f0         jne        loc_12058

                     loc_123f6:
00000000000123f6         test       byte [r15+0x48], 0x4                        ; CODE XREF=fts_build+786, fts_build+872
00000000000123fb         je         loc_1241b

00000000000123fd         mov        rax, qword [rsp+0xa8+var_90]
0000000000012402         cmp        qword [r15+0x30], rax
0000000000012406         je         loc_1240d

0000000000012408         test       rbx, rbx
000000000001240b         jne        loc_12413

                     loc_1240d:
000000000001240d         sub        qword [rsp+0xa8+var_68], 0x1                ; CODE XREF=fts_build+1734

                     loc_12413:
0000000000012413         mov        rax, qword [rsp+0xa8+var_68]                ; CODE XREF=fts_build+1739
0000000000012418         mov        byte [rax], 0x0

                     loc_1241b:
000000000001241b         cmp        qword [rsp+0xa8+var_58], 0x0                ; CODE XREF=fts_build+1723
0000000000012421         jne        loc_12490

0000000000012423         cmp        byte [rsp+0xa8+var_49], 0x0
0000000000012428         je         loc_12490

000000000001242a         cmp        dword [rsp+0xa8+var_50], 0x1
000000000001242f         je         loc_12470

0000000000012431         test       rbx, rbx
0000000000012434         je         loc_12470

                     loc_12436:
0000000000012436         cmp        byte [rsp+0xa8+var_4A], 0x0                 ; CODE XREF=fts_build+1875
000000000001243b         jne        loc_12538

0000000000012441         cmp        qword [r15+0x40], 0x0
0000000000012446         je         loc_12305

000000000001244c         cmp        rbx, 0x1
0000000000012450         je         loc_12305

0000000000012456         mov        rsi, qword [rsp+0xa8+var_98]
000000000001245b         mov        rdx, rbx
000000000001245e         mov        rdi, r15
0000000000012461         call       fts_sort                                    ; fts_sort
0000000000012466         mov        qword [rsp+0xa8+var_98], rax
000000000001246b         jmp        loc_12305

                     loc_12470:
0000000000012470         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=fts_build+1775, fts_build+1780
0000000000012475         jne        loc_125a6

000000000001247b         mov        rdi, r15
000000000001247e         call       restore_initial_cwd                         ; restore_initial_cwd
0000000000012483         test       eax, eax
0000000000012485         setne      al

                     loc_12488:
0000000000012488         test       al, al                                      ; CODE XREF=fts_build+2179
000000000001248a         jne        loc_12613

                     loc_12490:
0000000000012490         test       rbx, rbx                                    ; CODE XREF=fts_build+1761, fts_build+1768
0000000000012493         jne        loc_12436

0000000000012495         cmp        dword [rsp+0xa8+var_50], 0x3
000000000001249a         je         loc_12658

                     loc_124a0:
00000000000124a0         mov        rdi, qword [rsp+0xa8+var_98]                ; CODE XREF=fts_build+2336, fts_build+2346, fts_build+2361
00000000000124a5         call       fts_lfree                                   ; fts_lfree
00000000000124aa         mov        qword [rsp+0xa8+var_98], 0x0
00000000000124b3         jmp        loc_12305
00000000000124b8         align      64

                     loc_124c0:
00000000000124c0         mov        eax, dword [r12]                            ; CODE XREF=fts_build+509
00000000000124c4         mov        rbp, qword [rsp+0xa8+var_88]
00000000000124c9         test       eax, eax
00000000000124cb         je         loc_124ee

00000000000124cd         test       rbx, rbx
00000000000124d0         mov        dword [rbp+0x40], eax
00000000000124d3         jne        loc_12609

00000000000124d9         cmp        qword [rsp+0xa8+var_58], 0x0
00000000000124df         mov        eax, 0x4
00000000000124e4         jne        loc_12609

                     loc_124ea:
00000000000124ea         mov        word [rbp+0x70], ax                         ; CODE XREF=fts_build+2254

                     loc_124ee:
00000000000124ee         mov        rdi, qword [rbp+0x18]                       ; CODE XREF=fts_build+1931
00000000000124f2         test       rdi, rdi
00000000000124f5         je         loc_123eb

00000000000124fb         call       j_closedir                                  ; closedir
0000000000012500         mov        qword [rbp+0x18], 0x0
0000000000012508         jmp        loc_123eb
000000000001250d         align      16

                     loc_12510:
0000000000012510         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+1201
0000000000012515         jne        loc_122fc

                     loc_1251b:
000000000001251b         mov        r10d, 0x4                                   ; CODE XREF=fts_build+1462
0000000000012521         mov        word [rbp+0x70], r10w
0000000000012526         call       j___errno_location                          ; __errno_location
000000000001252b         mov        eax, dword [rax]
000000000001252d         mov        dword [rbp+0x40], eax
0000000000012530         jmp        loc_122fc
0000000000012535         align      8

                     loc_12538:
0000000000012538         lea        rax, qword [fts_compare_ino]                ; fts_compare_ino, CODE XREF=fts_build+1787
000000000001253f         mov        rsi, qword [rsp+0xa8+var_98]
0000000000012544         mov        rdx, rbx
0000000000012547         mov        rdi, r15
000000000001254a         mov        qword [r15+0x40], rax
000000000001254e         call       fts_sort                                    ; fts_sort
0000000000012553         mov        qword [r15+0x40], 0x0
000000000001255b         mov        qword [rsp+0xa8+var_98], rax
0000000000012560         jmp        loc_12305
0000000000012565         align      8

                     loc_12568:
0000000000012568         mov        qword [rsp+0xa8+var_70], 0x186a0            ; CODE XREF=fts_build+83
0000000000012571         mov        byte [rsp+0xa8+var_49], 0x1
0000000000012576         mov        edi, dword [r15+0x48]
000000000001257a         jmp        loc_11dab
000000000001257f         align      128

                     loc_12580:
0000000000012580         mov        byte [rsp+0xa8+var_49], 0x0                 ; CODE XREF=fts_build+1261, fts_build+2371
0000000000012585         mov        edi, dword [r15+0x48]
0000000000012589         jmp        loc_11dab
000000000001258e         align      16

                     loc_12590:
0000000000012590         xor        edx, edx                                    ; CODE XREF=fts_build+1212
0000000000012592         mov        rsi, rbp
0000000000012595         mov        rdi, r15
0000000000012598         call       fts_stat                                    ; fts_stat
000000000001259d         mov        word [rbp+0x70], ax
00000000000125a1         jmp        loc_12212

                     loc_125a6:
00000000000125a6         mov        rsi, qword [rbp+8]                          ; CODE XREF=fts_build+1845
00000000000125aa         lea        rcx, qword [aFtsreadFailed+16]              ; 0x15aeb
00000000000125b1         mov        edx, 0xffffffff
00000000000125b6         mov        rdi, r15
00000000000125b9         call       fts_safe_changedir                          ; fts_safe_changedir
00000000000125be         test       eax, eax
00000000000125c0         setne      al
00000000000125c3         jmp        loc_12488

                     loc_125c8:
00000000000125c8         xor        ecx, ecx                                    ; CODE XREF=fts_build+1314
00000000000125ca         mov        edx, eax
00000000000125cc         mov        rsi, rbp
00000000000125cf         mov        rdi, r15
00000000000125d2         call       fts_safe_changedir                          ; fts_safe_changedir
00000000000125d7         test       eax, eax
00000000000125d9         jne        loc_12268

00000000000125df         jmp        loc_11da2

                     loc_125e4:
00000000000125e4         cmp        qword [rbp+0x88], 0x2                       ; CODE XREF=fts_build+1281
00000000000125ec         jne        loc_12247

00000000000125f2         mov        esi, eax
00000000000125f4         mov        rdi, rbp
00000000000125f7         call       leaf_optimization                           ; leaf_optimization
00000000000125fc         test       eax, eax
00000000000125fe         jne        loc_1267e

0000000000012600         mov        eax, dword [rsp+0xa8+var_44]
0000000000012604         jmp        loc_12247

                     loc_12609:
0000000000012609         mov        eax, 0x7                                    ; CODE XREF=fts_build+1939, fts_build+1956
000000000001260e         jmp        loc_124ea

                     loc_12613:
0000000000012613         mov        edi, 0x7                                    ; CODE XREF=fts_build+1866
0000000000012618         mov        word [rbp+0x70], di
000000000001261c         or         dword [r15+0x48], 0x2000
0000000000012624         mov        rdi, qword [rsp+0xa8+var_98]
0000000000012629         call       fts_lfree                                   ; fts_lfree
000000000001262e         mov        qword [rsp+0xa8+var_98], 0x0
0000000000012637         jmp        loc_12305

                     loc_1263c:
000000000001263c         mov        edi, eax                                    ; CODE XREF=fts_build+1306
000000000001263e         mov        edx, 0x3
0000000000012643         mov        esi, 0x406
0000000000012648         xor        eax, eax
000000000001264a         call       rpl_fcntl                                   ; rpl_fcntl
000000000001264f         mov        dword [rsp+0xa8+var_44], eax
0000000000012653         jmp        loc_12260

                     loc_12658:
0000000000012658         movzx      eax, word [rbp+0x70]                        ; CODE XREF=fts_build+1882
000000000001265c         cmp        ax, 0x7
0000000000012660         je         loc_124a0

0000000000012666         cmp        ax, 0x4
000000000001266a         je         loc_124a0

0000000000012670         mov        esi, 0x6
0000000000012675         mov        word [rbp+0x70], si
0000000000012679         jmp        loc_124a0

                     loc_1267e:
000000000001267e         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+2238
0000000000012683         jne        loc_12580

0000000000012689         mov        eax, dword [rsp+0xa8+var_44]
000000000001268d         xor        r12d, r12d
0000000000012690         mov        ebx, 0x1
0000000000012695         jmp        loc_12255
000000000001269a         align      32

                     loc_126a0:
00000000000126a0         mov        rdi, r13                                    ; CODE XREF=fts_build+256
00000000000126a3         mov        rbp, qword [rsp+0xa8+var_88]
00000000000126a8         call       sub_2c80                                    ; sub_2c80
00000000000126ad         mov        rdi, qword [rsp+0xa8+var_98]
00000000000126b2         call       fts_lfree                                   ; fts_lfree
00000000000126b7         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
00000000000126bb         call       j_closedir                                  ; closedir
00000000000126c0         mov        r8d, 0x7
00000000000126c6         mov        qword [rbp+0x18], 0x0
00000000000126ce         mov        qword [rsp+0xa8+var_98], 0x0
00000000000126d7         mov        word [rbp+0x70], r8w
00000000000126dc         or         dword [r15+0x48], 0x2000
00000000000126e4         mov        dword [r12], 0x24
00000000000126ec         jmp        loc_12305

                     loc_126f1:
00000000000126f1         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fts_build+1496
                        ; endp

                     loc_126f6:
00000000000126f6         lea        rax, qword [CSWTCH.53]                      ; CSWTCH.53, CODE XREF=fts_build+1065
00000000000126fd         mov        eax, dword [rax+rdx*4]
0000000000012700         mov        dword [r13+0x90], eax
0000000000012707         mov        eax, 0x1
000000000001270c         jmp        loc_11eca
0000000000012711         align      32                                          ; End of unwind block (FDE at 0x1a1a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_42: int8_t, -66
        ;    var_50: int64_t, -80


                     rpl_fts_open:
0000000000012720         push       r15                                         ; Begin of unwind block (FDE at 0x1a1f0), CODE XREF=xfts_open+10
0000000000012722         push       r14
0000000000012724         push       r13
0000000000012726         push       r12
0000000000012728         push       rbp
0000000000012729         push       rbx
000000000001272a         sub        rsp, 0x28
000000000001272e         test       esi, 0xfffff000
0000000000012734         jne        loc_12ab8

000000000001273a         mov        eax, esi
000000000001273c         mov        ebp, esi
000000000001273e         and        eax, 0x204
0000000000012743         cmp        eax, 0x204
0000000000012748         je         loc_12ab8

000000000001274e         test       sil, 0x12
0000000000012752         je         loc_12ab8

0000000000012758         mov        r13, rdi
000000000001275b         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
0000000000012760         mov        edi, 0x80                                   ; argument "__nmemb" for method j_calloc
0000000000012765         mov        r14, rdx
0000000000012768         call       j_calloc                                    ; calloc
000000000001276d         test       rax, rax
0000000000012770         mov        rbx, rax
0000000000012773         je         loc_129ce

0000000000012779         test       bpl, 0x2
000000000001277d         mov        qword [rax+0x40], r14
0000000000012781         jne        loc_129e0

0000000000012787         mov        rdi, qword [r13]
000000000001278b         mov        dword [rax+0x48], ebp
000000000001278e         mov        dword [rbx+0x2c], 0xffffff9c
0000000000012795         test       rdi, rdi
0000000000012798         je         loc_129ff

                     loc_1279e:
000000000001279e         mov        r15, r13                                    ; CODE XREF=rpl_fts_open+729
00000000000127a1         xor        r12d, r12d
00000000000127a4         nop        dword [rax]

                     loc_127a8:
00000000000127a8         call       j_strlen                                    ; strlen, CODE XREF=rpl_fts_open+158
00000000000127ad         cmp        r12, rax
00000000000127b0         cmovb      r12, rax
00000000000127b4         add        r15, 0x8
00000000000127b8         mov        rdi, qword [r15]
00000000000127bb         test       rdi, rdi
00000000000127be         jne        loc_127a8

00000000000127c0         lea        rdx, qword [r12+1]
00000000000127c5         mov        eax, 0x1000
00000000000127ca         cmp        rdx, 0x1000
00000000000127d1         cmovb      rdx, rax

                     loc_127d5:
00000000000127d5         lea        rsi, qword [rbx+0x30]                       ; CODE XREF=rpl_fts_open+740
00000000000127d9         lea        rdi, qword [rbx+0x20]
00000000000127dd         call       fts_palloc.isra.2                           ; fts_palloc.isra.2
00000000000127e2         test       al, al
00000000000127e4         mov        byte [rsp+0x58+var_42], al
00000000000127e8         je         loc_12a89

00000000000127ee         mov        rsi, qword [r13]
00000000000127f2         test       rsi, rsi
00000000000127f5         je         loc_12aa0

00000000000127fb         lea        rsi, qword [aSSUnbackupn+20]                ; 0x1678c
0000000000012802         xor        edx, edx
0000000000012804         mov        rdi, rbx
0000000000012807         call       fts_alloc                                   ; fts_alloc
000000000001280c         test       rax, rax
000000000001280f         mov        r15, rax
0000000000012812         je         loc_12a80

0000000000012818         mov        rax, 0xffffffffffffffff
000000000001281f         test       r14, r14
0000000000012822         mov        rsi, qword [r13]
0000000000012826         mov        qword [r15+0x58], rax
000000000001282a         mov        qword [r15+0x68], rax
000000000001282e         je         loc_1283d

                     loc_12830:
0000000000012830         mov        eax, dword [rbx+0x48]                       ; CODE XREF=rpl_fts_open+902
0000000000012833         shr        eax, 0xa
0000000000012836         and        eax, 0x1
0000000000012839         mov        byte [rsp+0x58+var_42], al

                     loc_1283d:
000000000001283d         test       rsi, rsi                                    ; CODE XREF=rpl_fts_open+270
0000000000012840         je         loc_12aac

0000000000012846         shr        ebp, 0xb
0000000000012849         mov        qword [rsp+0x58+var_40], 0x0
0000000000012852         xor        r12d, r12d
0000000000012855         xor        ebp, 0x1
0000000000012858         mov        eax, ebp
000000000001285a         xor        ebp, ebp
000000000001285c         and        eax, 0x1
000000000001285f         mov        byte [rsp+0x58+var_41], al
0000000000012863         jmp        loc_128dc
0000000000012865         align      8

                     loc_12868:
0000000000012868         mov        rdx, rax                                    ; CODE XREF=rpl_fts_open+466, rpl_fts_open+477, rpl_fts_open+488, rpl_fts_open+501, rpl_fts_open+517
000000000001286b         mov        rdi, rbx
000000000001286e         call       fts_alloc                                   ; fts_alloc
0000000000012873         test       rax, rax
0000000000012876         mov        rcx, rax
0000000000012879         je         loc_12a70

000000000001287f         mov        qword [rax+0x58], 0x0
0000000000012887         mov        qword [rax+8], r15
000000000001288b         lea        rax, qword [rax+0x108]
0000000000012892         test       r12, r12
0000000000012895         mov        qword [rcx+0x30], rax
0000000000012899         je         loc_12a10

000000000001289f         cmp        byte [rsp+0x58+var_42], 0x0
00000000000128a4         je         loc_12a10

00000000000128aa         mov        esi, 0xb
00000000000128af         test       r14, r14
00000000000128b2         mov        qword [rcx+0xa8], 0x2
00000000000128bd         mov        word [rcx+0x70], si
00000000000128c1         je         loc_12a50

                     loc_128c7:
00000000000128c7         mov        qword [rcx+0x10], r12                       ; CODE XREF=rpl_fts_open+782
00000000000128cb         mov        r12, rcx

                     loc_128ce:
00000000000128ce         add        rbp, 0x1                                    ; CODE XREF=rpl_fts_open+809, rpl_fts_open+838
00000000000128d2         mov        rsi, qword [r13+rbp*8]
00000000000128d7         test       rsi, rsi
00000000000128da         je         loc_12930

                     loc_128dc:
00000000000128dc         mov        rdi, rsi                                    ; argument "__s" for method j_strlen, CODE XREF=rpl_fts_open+323
00000000000128df         mov        qword [rsp+0x58+var_50], rsi
00000000000128e4         call       j_strlen                                    ; strlen
00000000000128e9         cmp        rax, 0x2
00000000000128ed         mov        rsi, qword [rsp+0x58+var_50]
00000000000128f2         jbe        loc_12868

00000000000128f8         cmp        byte [rsp+0x58+var_41], 0x0
00000000000128fd         je         loc_12868

0000000000012903         cmp        byte [rsi+rax-1], 0x2f
0000000000012908         jne        loc_12868

000000000001290e         nop

                     loc_12910:
0000000000012910         cmp        byte [rsi+rax-2], 0x2f                      ; CODE XREF=rpl_fts_open+515
0000000000012915         jne        loc_12868

000000000001291b         sub        rax, 0x1
000000000001291f         cmp        rax, 0x1
0000000000012923         jne        loc_12910

0000000000012925         jmp        loc_12868
000000000001292a         align      16

                     loc_12930:
0000000000012930         test       r14, r14                                    ; CODE XREF=rpl_fts_open+442
0000000000012933         je         loc_1294c

0000000000012935         cmp        rbp, 0x1
0000000000012939         jbe        loc_1294c

000000000001293b         mov        rsi, r12
000000000001293e         mov        rdx, rbp
0000000000012941         mov        rdi, rbx
0000000000012944         call       fts_sort                                    ; fts_sort
0000000000012949         mov        r12, rax

                     loc_1294c:
000000000001294c         lea        rsi, qword [aSSUnbackupn+20]                ; 0x1678c, CODE XREF=rpl_fts_open+531, rpl_fts_open+537, rpl_fts_open+911
0000000000012953         xor        edx, edx
0000000000012955         mov        rdi, rbx
0000000000012958         call       fts_alloc                                   ; fts_alloc
000000000001295d         test       rax, rax
0000000000012960         mov        qword [rbx], rax
0000000000012963         je         loc_12a70

0000000000012969         mov        edi, dword [rbx+0x48]
000000000001296c         mov        edx, 0x9
0000000000012971         lea        rsi, qword [rbx+0x58]
0000000000012975         mov        qword [rax+0x10], r12
0000000000012979         mov        word [rax+0x70], dx
000000000001297d         mov        qword [rax+0x58], 0x1
0000000000012985         call       setup_dir.isra.4                            ; setup_dir.isra.4
000000000001298a         test       al, al
000000000001298c         je         loc_12a70

0000000000012992         mov        esi, dword [rbx+0x48]
0000000000012995         test       esi, 0x204
000000000001299b         jne        loc_129c0

000000000001299d         mov        edi, dword [rbx+0x2c]
00000000000129a0         lea        rdx, qword [aFtsreadFailed+17]              ; 0x15aec
00000000000129a7         call       diropen.isra.6                              ; diropen.isra.6
00000000000129ac         test       eax, eax
00000000000129ae         mov        dword [rbx+0x28], eax
00000000000129b1         jns        loc_129c0

00000000000129b3         or         dword [rbx+0x48], 0x4
00000000000129b7         nop        word [rax+rax]

                     loc_129c0:
00000000000129c0         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=rpl_fts_open+635, rpl_fts_open+657
00000000000129c4         mov        esi, 0xffffffff
00000000000129c9         call       i_ring_init                                 ; i_ring_init

                     loc_129ce:
00000000000129ce         add        rsp, 0x28                                   ; CODE XREF=rpl_fts_open+83, rpl_fts_open+883, rpl_fts_open+933
00000000000129d2         mov        rax, rbx
00000000000129d5         pop        rbx
00000000000129d6         pop        rbp
00000000000129d7         pop        r12
00000000000129d9         pop        r13
00000000000129db         pop        r14
00000000000129dd         pop        r15
00000000000129df         ret
                        ; endp

                     loc_129e0:
00000000000129e0         mov        rdi, qword [r13]                            ; CODE XREF=rpl_fts_open+97
00000000000129e4         mov        eax, ebp
00000000000129e6         mov        dword [rbx+0x2c], 0xffffff9c
00000000000129ed         and        ah, 0xfd
00000000000129f0         or         eax, 0x4
00000000000129f3         test       rdi, rdi
00000000000129f6         mov        dword [rbx+0x48], eax
00000000000129f9         jne        loc_1279e

                     loc_129ff:
00000000000129ff         mov        edx, 0x1000                                 ; CODE XREF=rpl_fts_open+120
0000000000012a04         jmp        loc_127d5
0000000000012a09         align      16

                     loc_12a10:
0000000000012a10         xor        edx, edx                                    ; CODE XREF=rpl_fts_open+377, rpl_fts_open+388
0000000000012a12         mov        rsi, rcx
0000000000012a15         mov        rdi, rbx
0000000000012a18         mov        qword [rsp+0x58+var_50], rcx
0000000000012a1d         call       fts_stat                                    ; fts_stat
0000000000012a22         mov        rcx, qword [rsp+0x58+var_50]
0000000000012a27         test       r14, r14
0000000000012a2a         mov        word [rcx+0x70], ax
0000000000012a2e         jne        loc_128c7

0000000000012a34         test       r12, r12
0000000000012a37         mov        qword [rcx+0x10], 0x0
0000000000012a3f         jne        loc_12a58

0000000000012a41         mov        qword [rsp+0x58+var_40], rcx
0000000000012a46         mov        r12, rcx
0000000000012a49         jmp        loc_128ce
0000000000012a4e         align      16

                     loc_12a50:
0000000000012a50         mov        qword [rcx+0x10], 0x0                       ; CODE XREF=rpl_fts_open+417

                     loc_12a58:
0000000000012a58         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=rpl_fts_open+799
0000000000012a5d         mov        qword [rsp+0x58+var_40], rcx
0000000000012a62         mov        qword [rax+0x10], rcx
0000000000012a66         jmp        loc_128ce
0000000000012a6b         align      16

                     loc_12a70:
0000000000012a70         mov        rdi, r12                                    ; CODE XREF=rpl_fts_open+345, rpl_fts_open+579, rpl_fts_open+620
0000000000012a73         call       fts_lfree                                   ; fts_lfree
0000000000012a78         mov        rdi, r15
0000000000012a7b         call       sub_2c80                                    ; sub_2c80

                     loc_12a80:
0000000000012a80         mov        rdi, qword [rbx+0x20]                       ; CODE XREF=rpl_fts_open+242
0000000000012a84         call       sub_2c80                                    ; sub_2c80

                     loc_12a89:
0000000000012a89         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_open+200
0000000000012a8c         xor        ebx, ebx
0000000000012a8e         call       sub_2c80                                    ; sub_2c80
0000000000012a93         jmp        loc_129ce
0000000000012a98         align      32

                     loc_12aa0:
0000000000012aa0         xor        r15d, r15d                                  ; CODE XREF=rpl_fts_open+213
0000000000012aa3         test       r14, r14
0000000000012aa6         jne        loc_12830

                     loc_12aac:
0000000000012aac         xor        r12d, r12d                                  ; CODE XREF=rpl_fts_open+288
0000000000012aaf         jmp        loc_1294c
0000000000012ab4         align      8

                     loc_12ab8:
0000000000012ab8         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_open+20, rpl_fts_open+40, rpl_fts_open+50
0000000000012abd         xor        ebx, ebx
0000000000012abf         mov        dword [rax], 0x16
0000000000012ac5         jmp        loc_129ce
0000000000012aca         align      16                                          ; End of unwind block (FDE at 0x1a1f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_close:
0000000000012ad0         push       r12                                         ; Begin of unwind block (FDE at 0x1a23c), CODE XREF=sub_43f0+127, sub_47d0+467
0000000000012ad2         push       rbp
0000000000012ad3         mov        rbp, rdi
0000000000012ad6         push       rbx
0000000000012ad7         mov        rdi, qword [rdi]
0000000000012ada         test       rdi, rdi
0000000000012add         je         loc_12b23

0000000000012adf         cmp        qword [rdi+0x58], 0x0
0000000000012ae4         jns        loc_12aff

0000000000012ae6         jmp        loc_12c00
0000000000012aeb         align      16

                     loc_12af0:
0000000000012af0         call       sub_2c80                                    ; sub_2c80, CODE XREF=rpl_fts_close+54
0000000000012af5         cmp        qword [rbx+0x58], 0x0
0000000000012afa         mov        rdi, rbx
0000000000012afd         js         loc_12b1b

                     loc_12aff:
0000000000012aff         mov        rbx, qword [rdi+0x10]                       ; CODE XREF=rpl_fts_close+20, rpl_fts_close+73
0000000000012b03         test       rbx, rbx
0000000000012b06         jne        loc_12af0

0000000000012b08         mov        rbx, qword [rdi+8]
0000000000012b0c         call       sub_2c80                                    ; sub_2c80
0000000000012b11         cmp        qword [rbx+0x58], 0x0
0000000000012b16         mov        rdi, rbx
0000000000012b19         jns        loc_12aff

                     loc_12b1b:
0000000000012b1b         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_close+45
0000000000012b1e         call       sub_2c80                                    ; sub_2c80

                     loc_12b23:
0000000000012b23         mov        rdi, qword [rbp+8]                          ; CODE XREF=rpl_fts_close+13, rpl_fts_close+315
0000000000012b27         test       rdi, rdi
0000000000012b2a         je         loc_12b31

0000000000012b2c         call       fts_lfree                                   ; fts_lfree

                     loc_12b31:
0000000000012b31         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=rpl_fts_close+90
0000000000012b35         call       sub_2c80                                    ; sub_2c80
0000000000012b3a         mov        rdi, qword [rbp+0x20]
0000000000012b3e         call       sub_2c80                                    ; sub_2c80
0000000000012b43         mov        eax, dword [rbp+0x48]
0000000000012b46         test       ah, 0x2
0000000000012b49         je         loc_12bb0

0000000000012b4b         mov        edi, dword [rbp+0x2c]
0000000000012b4e         test       edi, edi
0000000000012b50         jns        loc_12be0

                     loc_12b56:
0000000000012b56         xor        ebx, ebx                                    ; CODE XREF=rpl_fts_close+226, rpl_fts_close+250, rpl_fts_close+279

                     loc_12b58:
0000000000012b58         lea        rdi, qword [rbp+0x60]                       ; CODE XREF=rpl_fts_close+292, rpl_fts_close+340, rpl_fts_close+348, rpl_fts_close+364
0000000000012b5c         call       fd_ring_clear                               ; fd_ring_clear
0000000000012b61         mov        rdi, qword [rbp+0x50]
0000000000012b65         test       rdi, rdi
0000000000012b68         je         loc_12b6f

0000000000012b6a         call       hash_free                                   ; hash_free

                     loc_12b6f:
0000000000012b6f         test       dword [rbp+0x48], 0x102                     ; CODE XREF=rpl_fts_close+152
0000000000012b76         mov        rdi, qword [rbp+0x58]
0000000000012b7a         je         loc_12ba0

0000000000012b7c         test       rdi, rdi
0000000000012b7f         je         loc_12b86

0000000000012b81         call       hash_free                                   ; hash_free

                     loc_12b86:
0000000000012b86         mov        rdi, rbp                                    ; CODE XREF=rpl_fts_close+175, rpl_fts_close+213
0000000000012b89         call       sub_2c80                                    ; sub_2c80
0000000000012b8e         test       ebx, ebx
0000000000012b90         jne        loc_12c41

                     loc_12b96:
0000000000012b96         mov        eax, ebx                                    ; CODE XREF=rpl_fts_close+381
0000000000012b98         pop        rbx
0000000000012b99         pop        rbp
0000000000012b9a         pop        r12
0000000000012b9c         ret
                        ; endp
0000000000012b9d         align      32

                     loc_12ba0:
0000000000012ba0         call       sub_2c80                                    ; sub_2c80, CODE XREF=rpl_fts_close+170
0000000000012ba5         jmp        loc_12b86
0000000000012ba7         align      16

                     loc_12bb0:
0000000000012bb0         test       al, 0x4                                     ; CODE XREF=rpl_fts_close+121
0000000000012bb2         jne        loc_12b56

0000000000012bb4         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_fchdir
0000000000012bb7         call       j_fchdir                                    ; fchdir
0000000000012bbc         test       eax, eax
0000000000012bbe         jne        loc_12c10

0000000000012bc0         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_close
0000000000012bc3         call       j_close                                     ; close
0000000000012bc8         test       eax, eax
0000000000012bca         je         loc_12b56

0000000000012bcc         call       j___errno_location                          ; __errno_location
0000000000012bd1         mov        r12, rax
0000000000012bd4         jmp        loc_12c38
0000000000012bd6         align      32

                     loc_12be0:
0000000000012be0         call       j_close                                     ; close, CODE XREF=rpl_fts_close+128
0000000000012be5         test       eax, eax
0000000000012be7         je         loc_12b56

0000000000012bed         call       j___errno_location                          ; __errno_location
0000000000012bf2         mov        ebx, dword [rax]
0000000000012bf4         jmp        loc_12b58
0000000000012bf9         align      1024

                     loc_12c00:
0000000000012c00         mov        rbx, rdi                                    ; CODE XREF=rpl_fts_close+22
0000000000012c03         mov        rdi, rbx
0000000000012c06         call       sub_2c80                                    ; sub_2c80
0000000000012c0b         jmp        loc_12b23

                     loc_12c10:
0000000000012c10         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_close+238
0000000000012c15         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_close
0000000000012c18         mov        r12, rax
0000000000012c1b         mov        ebx, dword [rax]
0000000000012c1d         call       j_close                                     ; close
0000000000012c22         test       eax, eax
0000000000012c24         je         loc_12b58

0000000000012c2a         test       ebx, ebx
0000000000012c2c         jne        loc_12b58

0000000000012c32         nop        word [rax+rax]

                     loc_12c38:
0000000000012c38         mov        ebx, dword [r12]                            ; CODE XREF=rpl_fts_close+260
0000000000012c3c         jmp        loc_12b58

                     loc_12c41:
0000000000012c41         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_close+192
0000000000012c46         mov        dword [rax], ebx
0000000000012c48         mov        ebx, 0xffffffff
0000000000012c4d         jmp        loc_12b96
0000000000012c52         align      32                                          ; End of unwind block (FDE at 0x1a23c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_read:
0000000000012c60         push       r14                                         ; Begin of unwind block (FDE at 0x1a26c), CODE XREF=rm+115, sub_43f0+81, sub_43f0+89, sub_45b0+305, sub_4780+53
0000000000012c62         push       r13
0000000000012c64         push       r12
0000000000012c66         push       rbp
0000000000012c67         push       rbx
0000000000012c68         mov        rbp, qword [rdi]
0000000000012c6b         test       rbp, rbp
0000000000012c6e         je         loc_12d7e

0000000000012c74         mov        edx, dword [rdi+0x48]
0000000000012c77         test       dh, 0x20
0000000000012c7a         jne        loc_12d7e

0000000000012c80         movzx      eax, word [rbp+0x74]
0000000000012c84         mov        ebx, 0x3
0000000000012c89         mov        r12, rdi
0000000000012c8c         mov        word [rbp+0x74], bx
0000000000012c90         cmp        ax, 0x1
0000000000012c94         je         loc_12ee0

0000000000012c9a         cmp        ax, 0x2
0000000000012c9e         movzx      ecx, word [rbp+0x70]
0000000000012ca2         je         loc_12d90

0000000000012ca8         cmp        cx, 0x1
0000000000012cac         jne        loc_12ce0

0000000000012cae         jmp        loc_12ed0
0000000000012cb3         align      8

                     loc_12cb8:
0000000000012cb8         mov        qword [r12], rbx                            ; CODE XREF=rpl_fts_read+135
0000000000012cbc         mov        rdi, rbp
0000000000012cbf         call       sub_2c80                                    ; sub_2c80
0000000000012cc4         cmp        qword [rbx+0x58], 0x0
0000000000012cc9         je         loc_12f00

0000000000012ccf         movzx      eax, word [rbx+0x74]
0000000000012cd3         mov        rbp, rbx
0000000000012cd6         cmp        ax, 0x4
0000000000012cda         jne        loc_13008

                     loc_12ce0:
0000000000012ce0         mov        rbx, qword [rbp+0x10]                       ; CODE XREF=rpl_fts_read+76, rpl_fts_read+317
0000000000012ce4         test       rbx, rbx
0000000000012ce7         jne        loc_12cb8

0000000000012ce9         mov        rbx, qword [rbp+8]
0000000000012ced         cmp        qword [rbx+0x18], 0x0
0000000000012cf2         jne        loc_13260

                     loc_12cf8:
0000000000012cf8         mov        qword [r12], rbx                            ; CODE XREF=rpl_fts_read+1672
0000000000012cfc         mov        rdi, rbp
0000000000012cff         call       sub_2c80                                    ; sub_2c80
0000000000012d04         cmp        qword [rbx+0x58], 0xffffffffffffffff
0000000000012d09         je         loc_131c2

0000000000012d0f         cmp        word [rbx+0x70], 0xb
0000000000012d14         je         loc_12e4f

0000000000012d1a         mov        rdx, qword [r12+0x20]
0000000000012d1f         mov        rax, qword [rbx+0x48]
0000000000012d23         mov        byte [rdx+rax], 0x0
0000000000012d27         cmp        qword [rbx+0x58], 0x0
0000000000012d2c         je         loc_130f0

0000000000012d32         movzx      eax, word [rbx+0x72]
0000000000012d36         test       al, 0x2
0000000000012d38         je         loc_130a8

0000000000012d3e         mov        eax, dword [r12+0x48]
0000000000012d43         mov        edi, dword [rbx+0x44]
0000000000012d46         test       al, 0x4
0000000000012d48         je         loc_1314c

                     loc_12d4e:
0000000000012d4e         call       j_close                                     ; close, CODE XREF=rpl_fts_read+1287, rpl_fts_read+1708

                     loc_12d53:
0000000000012d53         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1098, rpl_fts_read+1130, rpl_fts_read+1180

                     loc_12d58:
0000000000012d58         cmp        word [rbx+0x70], 0x2                        ; CODE XREF=rpl_fts_read+1162
0000000000012d5d         je         loc_12d73

0000000000012d5f         mov        ecx, dword [rbx+0x40]
0000000000012d62         test       ecx, ecx
0000000000012d64         je         loc_13108

0000000000012d6a         mov        edx, 0x7
0000000000012d6f         mov        word [rbx+0x70], dx

                     loc_12d73:
0000000000012d73         and        edi, 0x2000                                 ; CODE XREF=rpl_fts_read+253, rpl_fts_read+1219
0000000000012d79         mov        rbp, rbx
0000000000012d7c         je         loc_12dfa

                     loc_12d7e:
0000000000012d7e         xor        ebp, ebp                                    ; CODE XREF=rpl_fts_read+14, rpl_fts_read+26, rpl_fts_read+1327, rpl_fts_read+1662
0000000000012d80         pop        rbx
0000000000012d81         mov        rax, rbp
0000000000012d84         pop        rbp
0000000000012d85         pop        r12
0000000000012d87         pop        r13
0000000000012d89         pop        r14
0000000000012d8b         ret
                        ; endp
0000000000012d8c         align      16

                     loc_12d90:
0000000000012d90         lea        eax, dword [rcx-0xc]                        ; CODE XREF=rpl_fts_read+66
0000000000012d93         cmp        ax, 0x1
0000000000012d97         jbe        loc_12e10

0000000000012d99         cmp        cx, 0x1
0000000000012d9d         jne        loc_12ce0

                     loc_12da3:
0000000000012da3         test       dl, 0x40                                    ; CODE XREF=rpl_fts_read+628
0000000000012da6         je         loc_12e58

0000000000012dac         mov        rax, qword [r12+0x18]
0000000000012db1         cmp        qword [rbp+0x78], rax
0000000000012db5         je         loc_12e58

                     loc_12dbb:
0000000000012dbb         test       byte [rbp+0x72], 0x2                        ; CODE XREF=rpl_fts_read+634
0000000000012dbf         jne        loc_132a0

                     loc_12dc5:
0000000000012dc5         mov        rdi, qword [r12+8]                          ; CODE XREF=rpl_fts_read+1608
0000000000012dca         test       rdi, rdi
0000000000012dcd         je         loc_12ddd

0000000000012dcf         call       fts_lfree                                   ; fts_lfree
0000000000012dd4         mov        qword [r12+8], 0x0

                     loc_12ddd:
0000000000012ddd         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+365
0000000000012de2         mov        r10d, 0x6
0000000000012de8         lea        rsi, qword [r12+0x58]
0000000000012ded         mov        word [rbp+0x70], r10w
0000000000012df2         mov        rdx, rbp
0000000000012df5         call       leave_dir.isra.12                           ; leave_dir.isra.12

                     loc_12dfa:
0000000000012dfa         pop        rbx                                         ; CODE XREF=rpl_fts_read+284, rpl_fts_read+467, rpl_fts_read+493, rpl_fts_read+864, rpl_fts_read+906, rpl_fts_read+925, rpl_fts_read+1373, rpl_fts_read+1407, rpl_fts_read+1518, rpl_fts_read+1724, rpl_fts_read+1778
0000000000012dfb         mov        rax, rbp
0000000000012dfe         pop        rbp
0000000000012dff         pop        r12
0000000000012e01         pop        r13
0000000000012e03         pop        r14
0000000000012e05         ret
                        ; endp
0000000000012e06         align      16

                     loc_12e10:
0000000000012e10         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_read+311
0000000000012e15         mov        rsi, rbp
0000000000012e18         call       fts_stat                                    ; fts_stat
0000000000012e1d         cmp        ax, 0x1
0000000000012e21         mov        word [rbp+0x70], ax
0000000000012e25         je         loc_1316c

0000000000012e2b         cmp        ax, 0xb
0000000000012e2f         mov        qword [r12], rbp
0000000000012e33         jne        loc_12dfa

0000000000012e35         nop        dword [rax]

                     loc_12e38:
0000000000012e38         mov        rax, qword [rbp+0xa8]                       ; CODE XREF=rpl_fts_read+854
0000000000012e3f         cmp        rax, 0x2
0000000000012e43         je         loc_131e8

0000000000012e49         cmp        rax, 0x1
0000000000012e4d         je         loc_12dfa

                     loc_12e4f:
0000000000012e4f         call       j_abort                                     ; abort, CODE XREF=rpl_fts_read+180
                        ; endp
0000000000012e54         align      8

                     loc_12e58:
0000000000012e58         mov        rdi, qword [r12+8]                          ; CODE XREF=rpl_fts_read+326, rpl_fts_read+341
0000000000012e5d         test       rdi, rdi
0000000000012e60         je         loc_13078

0000000000012e66         test       dh, 0x10
0000000000012e69         jne        loc_13062

0000000000012e6f         mov        rcx, qword [rbp+0x30]
0000000000012e73         mov        edx, 0xffffffff
0000000000012e78         mov        rsi, rbp
0000000000012e7b         mov        rdi, r12
0000000000012e7e         call       fts_safe_changedir                          ; fts_safe_changedir
0000000000012e83         test       eax, eax
0000000000012e85         je         loc_13142

0000000000012e8b         call       j___errno_location                          ; __errno_location
0000000000012e90         mov        eax, dword [rax]
0000000000012e92         or         word [rbp+0x72], 0x1
0000000000012e97         mov        dword [rbp+0x40], eax
0000000000012e9a         mov        rbp, qword [r12+8]
0000000000012e9f         test       rbp, rbp
0000000000012ea2         je         loc_13096

0000000000012ea8         mov        rax, rbp
0000000000012eab         nop        dword [rax+rax]

                     loc_12eb0:
0000000000012eb0         mov        rdx, qword [rax+8]                          ; CODE XREF=rpl_fts_read+611
0000000000012eb4         mov        rdx, qword [rdx+0x30]
0000000000012eb8         mov        qword [rax+0x30], rdx
0000000000012ebc         mov        rax, qword [rax+0x10]
0000000000012ec0         test       rax, rax
0000000000012ec3         jne        loc_12eb0

0000000000012ec5         jmp        loc_13096
0000000000012eca         align      16

                     loc_12ed0:
0000000000012ed0         cmp        ax, 0x4                                     ; CODE XREF=rpl_fts_read+78
0000000000012ed4         jne        loc_12da3

0000000000012eda         jmp        loc_12dbb
0000000000012edf         align      32

                     loc_12ee0:
0000000000012ee0         mov        rsi, rbp                                    ; CODE XREF=rpl_fts_read+52
0000000000012ee3         xor        edx, edx
0000000000012ee5         call       fts_stat                                    ; fts_stat
0000000000012eea         mov        word [rbp+0x70], ax
0000000000012eee         mov        rax, rbp
0000000000012ef1         pop        rbx
0000000000012ef2         pop        rbp
0000000000012ef3         pop        r12
0000000000012ef5         pop        r13
0000000000012ef7         pop        r14
0000000000012ef9         ret
                        ; endp
0000000000012efa         align      256

                     loc_12f00:
0000000000012f00         mov        rdi, r12                                    ; CODE XREF=rpl_fts_read+105
0000000000012f03         call       restore_initial_cwd                         ; restore_initial_cwd
0000000000012f08         test       eax, eax
0000000000012f0a         jne        loc_13311

0000000000012f10         test       dword [r12+0x48], 0x102
0000000000012f19         mov        rdi, qword [r12+0x58]
0000000000012f1e         je         loc_13058

0000000000012f24         test       rdi, rdi
0000000000012f27         je         loc_12f2e

0000000000012f29         call       hash_free                                   ; hash_free

                     loc_12f2e:
0000000000012f2e         mov        rdx, qword [rbx+0x60]                       ; CODE XREF=rpl_fts_read+711, rpl_fts_read+1021
0000000000012f32         lea        rbp, qword [rbx+0x108]
0000000000012f39         mov        rdi, qword [r12+0x20]                       ; argument "__dest" for method j_memmove
0000000000012f3e         mov        rsi, rbp                                    ; argument "__src" for method j_memmove
0000000000012f41         mov        qword [rbx+0x48], rdx
0000000000012f45         add        rdx, 0x1                                    ; argument "__n" for method j_memmove
0000000000012f49         call       j_memmove                                   ; memmove
0000000000012f4e         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
0000000000012f53         mov        rdi, rbp                                    ; argument "__s" for method j_strrchr
0000000000012f56         call       j_strrchr                                   ; strrchr
0000000000012f5b         test       rax, rax
0000000000012f5e         je         loc_12f8b

0000000000012f60         cmp        rbp, rax
0000000000012f63         je         loc_13130

                     loc_12f69:
0000000000012f69         lea        r13, qword [rax+1]                          ; CODE XREF=rpl_fts_read+1239
0000000000012f6d         mov        rdi, r13                                    ; argument "__s" for method j_strlen
0000000000012f70         call       j_strlen                                    ; strlen
0000000000012f75         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
0000000000012f79         mov        r14, rax
0000000000012f7c         mov        rsi, r13                                    ; argument "__src" for method j_memmove
0000000000012f7f         mov        rdi, rbp                                    ; argument "__dest" for method j_memmove
0000000000012f82         call       j_memmove                                   ; memmove
0000000000012f87         mov        qword [rbx+0x60], r14

                     loc_12f8b:
0000000000012f8b         mov        rax, qword [r12+0x20]                       ; CODE XREF=rpl_fts_read+766, rpl_fts_read+1245
0000000000012f90         mov        edi, dword [r12+0x48]
0000000000012f95         lea        rsi, qword [r12+0x58]
0000000000012f9a         mov        rbp, rbx
0000000000012f9d         mov        qword [rbx+0x38], rax
0000000000012fa1         mov        qword [rbx+0x30], rax
0000000000012fa5         call       setup_dir.isra.4                            ; setup_dir.isra.4
0000000000012faa         movzx      eax, word [rbx+0x70]

                     loc_12fae:
0000000000012fae         cmp        ax, 0xb                                     ; CODE XREF=rpl_fts_read+1007, rpl_fts_read+1853
0000000000012fb2         mov        qword [r12], rbp
0000000000012fb6         je         loc_12e38

                     loc_12fbc:
0000000000012fbc         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1479, rpl_fts_read+1815
0000000000012fc0         jne        loc_12dfa

                     loc_12fc6:
0000000000012fc6         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=rpl_fts_read+1311
0000000000012fcb         jne        loc_12fd6

                     loc_12fcd:
0000000000012fcd         mov        rax, qword [rbp+0x78]                       ; CODE XREF=rpl_fts_read+1784
0000000000012fd1         mov        qword [r12+0x18], rax

                     loc_12fd6:
0000000000012fd6         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+875, rpl_fts_read+1524
0000000000012fdb         lea        rsi, qword [r12+0x58]
0000000000012fe0         mov        rdx, rbp
0000000000012fe3         call       enter_dir.isra.10                           ; enter_dir.isra.10
0000000000012fe8         test       al, al
0000000000012fea         jne        loc_12dfa

0000000000012ff0         call       j___errno_location                          ; __errno_location
0000000000012ff5         xor        ebp, ebp
0000000000012ff7         mov        dword [rax], 0xc
0000000000012ffd         jmp        loc_12dfa
0000000000013002         align      8

                     loc_13008:
0000000000013008         cmp        ax, 0x2                                     ; CODE XREF=rpl_fts_read+122
000000000001300c         je         loc_132ad

                     loc_13012:
0000000000013012         mov        rax, qword [rbp+8]                          ; CODE XREF=rpl_fts_read+1087, rpl_fts_read+1585, rpl_fts_read+1651
0000000000013016         lea        rsi, qword [rbp+0x108]                      ; argument "__src" for method j_memmove
000000000001301d         mov        rdi, qword [rax+0x48]
0000000000013021         mov        rax, qword [rax+0x38]
0000000000013025         cmp        byte [rax+rdi-1], 0x2f
000000000001302a         lea        rdx, qword [rdi-1]
000000000001302e         cmove      rdi, rdx
0000000000013032         add        rdi, qword [r12+0x20]
0000000000013037         mov        byte [rdi], 0x2f
000000000001303a         mov        rax, qword [rbp+0x60]
000000000001303e         add        rdi, 0x1                                    ; argument "__dest" for method j_memmove
0000000000013042         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
0000000000013046         call       j_memmove                                   ; memmove
000000000001304b         movzx      eax, word [rbp+0x70]
000000000001304f         jmp        loc_12fae
0000000000013054         align      8

                     loc_13058:
0000000000013058         call       sub_2c80                                    ; sub_2c80, CODE XREF=rpl_fts_read+702
000000000001305d         jmp        loc_12f2e

                     loc_13062:
0000000000013062         and        dh, 0xef                                    ; CODE XREF=rpl_fts_read+521
0000000000013065         mov        dword [r12+0x48], edx
000000000001306a         call       fts_lfree                                   ; fts_lfree
000000000001306f         mov        qword [r12+8], 0x0

                     loc_13078:
0000000000013078         mov        esi, 0x3                                    ; CODE XREF=rpl_fts_read+512
000000000001307d         mov        rdi, r12
0000000000013080         call       fts_build                                   ; fts_build
0000000000013085         test       rax, rax
0000000000013088         mov        qword [r12+8], rax
000000000001308d         je         loc_13184

0000000000013093         mov        rbp, rax

                     loc_13096:
0000000000013096         mov        qword [r12+8], 0x0                          ; CODE XREF=rpl_fts_read+578, rpl_fts_read+613, rpl_fts_read+1255
000000000001309f         jmp        loc_13012
00000000000130a4         align      8

                     loc_130a8:
00000000000130a8         test       al, 0x1                                     ; CODE XREF=rpl_fts_read+216
00000000000130aa         jne        loc_12d53

00000000000130b0         mov        rsi, qword [rbx+8]
00000000000130b4         lea        rcx, qword [aFtsreadFailed+16]              ; 0x15aeb
00000000000130bb         mov        edx, 0xffffffff
00000000000130c0         mov        rdi, r12
00000000000130c3         call       fts_safe_changedir                          ; fts_safe_changedir
00000000000130c8         test       eax, eax
00000000000130ca         je         loc_12d53

                     loc_130d0:
00000000000130d0         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1178
00000000000130d5         mov        edi, dword [r12+0x48]
00000000000130da         mov        eax, dword [rax]
00000000000130dc         or         edi, 0x2000
00000000000130e2         mov        dword [rbx+0x40], eax
00000000000130e5         mov        dword [r12+0x48], edi
00000000000130ea         jmp        loc_12d58
00000000000130ef         align      16

                     loc_130f0:
00000000000130f0         mov        rdi, r12                                    ; CODE XREF=rpl_fts_read+204
00000000000130f3         call       restore_initial_cwd                         ; restore_initial_cwd
00000000000130f8         test       eax, eax
00000000000130fa         jne        loc_130d0

00000000000130fc         jmp        loc_12d53
0000000000013101         align      8

                     loc_13108:
0000000000013108         mov        eax, 0x6                                    ; CODE XREF=rpl_fts_read+260
000000000001310d         lea        rsi, qword [r12+0x58]
0000000000013112         mov        rdx, rbx
0000000000013115         mov        word [rbx+0x70], ax
0000000000013119         call       leave_dir.isra.12                           ; leave_dir.isra.12
000000000001311e         mov        edi, dword [r12+0x48]
0000000000013123         jmp        loc_12d73
0000000000013128         align      16

                     loc_13130:
0000000000013130         cmp        byte [rbx+0x109], 0x0                       ; CODE XREF=rpl_fts_read+771
0000000000013137         jne        loc_12f69

000000000001313d         jmp        loc_12f8b

                     loc_13142:
0000000000013142         mov        rbp, qword [r12+8]                          ; CODE XREF=rpl_fts_read+549
0000000000013147         jmp        loc_13096

                     loc_1314c:
000000000001314c         test       ah, 0x2                                     ; CODE XREF=rpl_fts_read+232
000000000001314f         je         loc_132ed

0000000000013155         mov        esi, edi
0000000000013157         mov        edx, 0x1
000000000001315c         mov        rdi, r12
000000000001315f         call       cwd_advance_fd                              ; cwd_advance_fd
0000000000013164         mov        edi, dword [rbx+0x44]
0000000000013167         jmp        loc_12d4e

                     loc_1316c:
000000000001316c         mov        esi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+453
0000000000013171         test       sil, 0x4
0000000000013175         je         loc_1337c

000000000001317b         mov        qword [r12], rbp
000000000001317f         jmp        loc_12fc6

                     loc_13184:
0000000000013184         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1069
0000000000013189         test       edi, 0x2000
000000000001318f         jne        loc_12d7e

0000000000013195         mov        r9d, dword [rbp+0x40]
0000000000013199         test       r9d, r9d
000000000001319c         je         loc_131b0

000000000001319e         cmp        word [rbp+0x70], 0x4
00000000000131a3         je         loc_131b0

00000000000131a5         mov        r8d, 0x7
00000000000131ab         mov        word [rbp+0x70], r8w

                     loc_131b0:
00000000000131b0         lea        rsi, qword [r12+0x58]                       ; CODE XREF=rpl_fts_read+1340, rpl_fts_read+1347
00000000000131b5         mov        rdx, rbp
00000000000131b8         call       leave_dir.isra.12                           ; leave_dir.isra.12
00000000000131bd         jmp        loc_12dfa

                     loc_131c2:
00000000000131c2         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_read+169
00000000000131c5         xor        ebp, ebp
00000000000131c7         call       sub_2c80                                    ; sub_2c80
00000000000131cc         call       j___errno_location                          ; __errno_location
00000000000131d1         mov        dword [rax], 0x0
00000000000131d7         mov        qword [r12], 0x0
00000000000131df         jmp        loc_12dfa
00000000000131e4         align      8

                     loc_131e8:
00000000000131e8         mov        rbx, qword [rbp+8]                          ; CODE XREF=rpl_fts_read+483
00000000000131ec         cmp        qword [rbx+0x68], 0x0
00000000000131f1         jne        loc_13204

00000000000131f3         mov        eax, dword [r12+0x48]
00000000000131f8         and        eax, 0x18
00000000000131fb         cmp        eax, 0x18
00000000000131fe         je         loc_1335d

                     loc_13204:
0000000000013204         xor        edx, edx                                    ; CODE XREF=rpl_fts_read+1425, rpl_fts_read+1805
0000000000013206         mov        rsi, rbp
0000000000013209         mov        rdi, r12
000000000001320c         call       fts_stat                                    ; fts_stat
0000000000013211         mov        edx, dword [rbp+0x90]
0000000000013217         mov        word [rbp+0x70], ax
000000000001321b         and        edx, 0xf000
0000000000013221         cmp        edx, 0x4000
0000000000013227         jne        loc_12fbc

000000000001322d         cmp        qword [rbp+0x58], 0x0
0000000000013232         je         loc_1334e

0000000000013238         mov        rcx, qword [rbx+0x68]
000000000001323c         lea        rdx, qword [rcx-1]
0000000000013240         cmp        rdx, 0xfffffffffffffffd
0000000000013244         ja         loc_1324a

0000000000013246         mov        qword [rbx+0x68], rdx

                     loc_1324a:
000000000001324a         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1508
000000000001324e         jne        loc_12dfa

0000000000013254         jmp        loc_12fd6
0000000000013259         align      32

                     loc_13260:
0000000000013260         mov        rax, qword [rbx+0x48]                       ; CODE XREF=rpl_fts_read+146
0000000000013264         mov        rdx, qword [r12+0x20]
0000000000013269         mov        esi, 0x3
000000000001326e         mov        qword [r12], rbx
0000000000013272         mov        rdi, r12
0000000000013275         mov        byte [rdx+rax], 0x0
0000000000013279         call       fts_build                                   ; fts_build
000000000001327e         test       rax, rax
0000000000013281         mov        rbx, rax
0000000000013284         je         loc_132d8

0000000000013286         mov        rdi, rbp
0000000000013289         mov        rbp, rbx
000000000001328c         call       sub_2c80                                    ; sub_2c80
0000000000013291         jmp        loc_13012
0000000000013296         align      32

                     loc_132a0:
00000000000132a0         mov        edi, dword [rbp+0x44]                       ; argument "__fd" for method j_close, CODE XREF=rpl_fts_read+351
00000000000132a3         call       j_close                                     ; close
00000000000132a8         jmp        loc_12dc5

                     loc_132ad:
00000000000132ad         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_read+940
00000000000132b2         mov        rsi, rbx
00000000000132b5         mov        rdi, r12
00000000000132b8         call       fts_stat                                    ; fts_stat
00000000000132bd         cmp        ax, 0x1
00000000000132c1         mov        word [rbx+0x70], ax
00000000000132c5         je         loc_13321

                     loc_132c7:
00000000000132c7         mov        esi, 0x3                                    ; CODE XREF=rpl_fts_read+1738, rpl_fts_read+1769, rpl_fts_read+1907
00000000000132cc         mov        rbp, rbx
00000000000132cf         mov        word [rbx+0x74], si
00000000000132d3         jmp        loc_13012

                     loc_132d8:
00000000000132d8         test       byte [r12+0x49], 0x20                       ; CODE XREF=rpl_fts_read+1572
00000000000132de         jne        loc_12d7e

00000000000132e4         mov        rbx, qword [rbp+8]
00000000000132e8         jmp        loc_12cf8

                     loc_132ed:
00000000000132ed         call       j_fchdir                                    ; fchdir, CODE XREF=rpl_fts_read+1263
00000000000132f2         test       eax, eax
00000000000132f4         je         loc_13309

00000000000132f6         call       j___errno_location                          ; __errno_location
00000000000132fb         mov        eax, dword [rax]
00000000000132fd         mov        dword [rbx+0x40], eax
0000000000013300         or         dword [r12+0x48], 0x2000

                     loc_13309:
0000000000013309         mov        edi, dword [rbx+0x44]                       ; CODE XREF=rpl_fts_read+1684
000000000001330c         jmp        loc_12d4e

                     loc_13311:
0000000000013311         or         dword [r12+0x48], 0x2000                    ; CODE XREF=rpl_fts_read+682
000000000001331a         xor        ebp, ebp
000000000001331c         jmp        loc_12dfa

                     loc_13321:
0000000000013321         mov        esi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1637
0000000000013326         test       sil, 0x4
000000000001332a         jne        loc_132c7

000000000001332c         mov        edi, dword [r12+0x2c]
0000000000013331         lea        rdx, qword [aFtsreadFailed+17]              ; 0x15aec
0000000000013338         call       diropen.isra.6                              ; diropen.isra.6
000000000001333d         test       eax, eax
000000000001333f         mov        dword [rbx+0x44], eax
0000000000013342         js         loc_133c0

0000000000013344         or         word [rbx+0x72], 0x2
0000000000013349         jmp        loc_132c7

                     loc_1334e:
000000000001334e         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1490
0000000000013352         jne        loc_12dfa

0000000000013358         jmp        loc_12fcd

                     loc_1335d:
000000000001335d         mov        esi, dword [r12+0x2c]                       ; CODE XREF=rpl_fts_read+1438
0000000000013362         mov        rdi, rbx
0000000000013365         call       leaf_optimization                           ; leaf_optimization
000000000001336a         cmp        eax, 0x2
000000000001336d         jne        loc_13204

0000000000013373         movzx      eax, word [rbp+0x70]
0000000000013377         jmp        loc_12fbc

                     loc_1337c:
000000000001337c         mov        edi, dword [r12+0x2c]                       ; CODE XREF=rpl_fts_read+1301
0000000000013381         lea        rdx, qword [aFtsreadFailed+17]              ; 0x15aec
0000000000013388         call       diropen.isra.6                              ; diropen.isra.6
000000000001338d         test       eax, eax
000000000001338f         mov        dword [rbp+0x44], eax
0000000000013392         js         loc_133a2

0000000000013394         or         word [rbp+0x72], 0x2
0000000000013399         movzx      eax, word [rbp+0x70]
000000000001339d         jmp        loc_12fae

                     loc_133a2:
00000000000133a2         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1842
00000000000133a7         mov        eax, dword [rax]
00000000000133a9         mov        r11d, 0x7
00000000000133af         mov        word [rbp+0x70], r11w
00000000000133b4         mov        dword [rbp+0x40], eax
00000000000133b7         mov        qword [r12], rbp
00000000000133bb         jmp        loc_12dfa

                     loc_133c0:
00000000000133c0         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1762
00000000000133c5         mov        eax, dword [rax]
00000000000133c7         mov        edi, 0x7
00000000000133cc         mov        word [rbx+0x70], di
00000000000133d0         mov        dword [rbx+0x40], eax
00000000000133d3         jmp        loc_132c7
00000000000133d8         align      32                                          ; End of unwind block (FDE at 0x1a26c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_set:
00000000000133e0         cmp        edx, 0x4                                    ; Begin of unwind block (FDE at 0x1a2d0), CODE XREF=sub_43f0+68, sub_45b0+297, sub_4780+45
00000000000133e3         ja         loc_133f0

00000000000133e5         mov        word [rsi+0x74], dx
00000000000133e9         xor        eax, eax
00000000000133eb         ret
                        ; endp
00000000000133ec         align      16

                     loc_133f0:
00000000000133f0         sub        rsp, 0x8                                    ; CODE XREF=rpl_fts_set+3
00000000000133f4         call       j___errno_location                          ; __errno_location
00000000000133f9         mov        dword [rax], 0x16
00000000000133ff         mov        eax, 0x1
0000000000013404         add        rsp, 0x8
0000000000013408         ret
                        ; endp
0000000000013409         align      16                                          ; End of unwind block (FDE at 0x1a2d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_children:
0000000000013410         push       r14                                         ; Begin of unwind block (FDE at 0x1a2e8)
0000000000013412         push       r13
0000000000013414         push       r12
0000000000013416         push       rbp
0000000000013417         mov        r12d, esi
000000000001341a         push       rbx
000000000001341b         mov        rbx, rdi
000000000001341e         call       j___errno_location                          ; __errno_location
0000000000013423         test       r12d, 0xffffefff
000000000001342a         mov        r13, rax
000000000001342d         jne        loc_13518

0000000000013433         mov        rbp, qword [rbx]
0000000000013436         mov        dword [rax], 0x0
000000000001343c         test       byte [rbx+0x49], 0x20
0000000000013440         jne        loc_134c0

0000000000013442         movzx      eax, word [rbp+0x70]
0000000000013446         cmp        ax, 0x9
000000000001344a         je         loc_134b0

000000000001344c         cmp        ax, 0x1
0000000000013450         jne        loc_134c0

0000000000013452         mov        rdi, qword [rbx+8]
0000000000013456         test       rdi, rdi
0000000000013459         je         loc_13460

000000000001345b         call       fts_lfree                                   ; fts_lfree

                     loc_13460:
0000000000013460         cmp        r12d, 0x1000                                ; CODE XREF=rpl_fts_children+73
0000000000013467         mov        r14d, 0x1
000000000001346d         jne        loc_1347c

000000000001346f         or         dword [rbx+0x48], 0x1000
0000000000013476         mov        r14d, 0x2

                     loc_1347c:
000000000001347c         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=rpl_fts_children+93
0000000000013481         jne        loc_13495

0000000000013483         mov        rax, qword [rbp+0x30]
0000000000013487         cmp        byte [rax], 0x2f
000000000001348a         je         loc_13495

000000000001348c         mov        esi, dword [rbx+0x48]
000000000001348f         test       sil, 0x4
0000000000013493         je         loc_134d0

                     loc_13495:
0000000000013495         mov        esi, r14d                                   ; CODE XREF=rpl_fts_children+113, rpl_fts_children+122
0000000000013498         mov        rdi, rbx
000000000001349b         call       fts_build                                   ; fts_build
00000000000134a0         mov        qword [rbx+8], rax

                     loc_134a4:
00000000000134a4         pop        rbx                                         ; CODE XREF=rpl_fts_children+256, rpl_fts_children+272, rpl_fts_children+307, rpl_fts_children+329
00000000000134a5         pop        rbp
00000000000134a6         pop        r12
00000000000134a8         pop        r13
00000000000134aa         pop        r14
00000000000134ac         ret
                        ; endp
00000000000134ad         align      16

                     loc_134b0:
00000000000134b0         pop        rbx                                         ; CODE XREF=rpl_fts_children+58
00000000000134b1         mov        rax, qword [rbp+0x10]
00000000000134b5         pop        rbp
00000000000134b6         pop        r12
00000000000134b8         pop        r13
00000000000134ba         pop        r14
00000000000134bc         ret
                        ; endp
00000000000134bd         align      64

                     loc_134c0:
00000000000134c0         pop        rbx                                         ; CODE XREF=rpl_fts_children+48, rpl_fts_children+64
00000000000134c1         xor        eax, eax
00000000000134c3         pop        rbp
00000000000134c4         pop        r12
00000000000134c6         pop        r13
00000000000134c8         pop        r14
00000000000134ca         ret
                        ; endp
00000000000134cb         align      16

                     loc_134d0:
00000000000134d0         mov        edi, dword [rbx+0x2c]                       ; CODE XREF=rpl_fts_children+131
00000000000134d3         lea        rdx, qword [aFtsreadFailed+17]              ; 0x15aec
00000000000134da         call       diropen.isra.6                              ; diropen.isra.6
00000000000134df         test       eax, eax
00000000000134e1         mov        ebp, eax
00000000000134e3         js         loc_13539

00000000000134e5         mov        esi, r14d
00000000000134e8         mov        rdi, rbx
00000000000134eb         call       fts_build                                   ; fts_build
00000000000134f0         test       byte [rbx+0x49], 0x2
00000000000134f4         mov        qword [rbx+8], rax
00000000000134f8         jne        loc_13528

00000000000134fa         mov        edi, ebp                                    ; argument "__fd" for method j_fchdir
00000000000134fc         call       j_fchdir                                    ; fchdir
0000000000013501         test       eax, eax
0000000000013503         jne        loc_13548

0000000000013505         mov        edi, ebp                                    ; argument "__fd" for method j_close
0000000000013507         call       j_close                                     ; close

                     loc_1350c:
000000000001350c         mov        rax, qword [rbx+8]                          ; CODE XREF=rpl_fts_children+295
0000000000013510         jmp        loc_134a4
0000000000013512         align      8

                     loc_13518:
0000000000013518         mov        dword [rax], 0x16                           ; CODE XREF=rpl_fts_children+29
000000000001351e         xor        eax, eax
0000000000013520         jmp        loc_134a4
0000000000013525         align      8

                     loc_13528:
0000000000013528         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_children+232
000000000001352d         mov        esi, ebp
000000000001352f         mov        rdi, rbx
0000000000013532         call       cwd_advance_fd                              ; cwd_advance_fd
0000000000013537         jmp        loc_1350c

                     loc_13539:
0000000000013539         mov        qword [rbx+8], 0x0                          ; CODE XREF=rpl_fts_children+211
0000000000013541         xor        eax, eax
0000000000013543         jmp        loc_134a4

                     loc_13548:
0000000000013548         mov        ebx, dword [r13]                            ; CODE XREF=rpl_fts_children+243
000000000001354c         mov        edi, ebp                                    ; argument "__fd" for method j_close
000000000001354e         call       j_close                                     ; close
0000000000013553         xor        eax, eax
0000000000013555         mov        dword [r13], ebx
0000000000013559         jmp        loc_134a4
000000000001355e         align      32                                          ; End of unwind block (FDE at 0x1a2e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000013560         push       r13                                         ; Begin of unwind block (FDE at 0x1a34c), CODE XREF=sub_d560+534
0000000000013562         push       r12
0000000000013564         mov        r13, rsi
0000000000013567         push       rbp
0000000000013568         push       rbx
0000000000013569         mov        rbx, rdi
000000000001356c         mov        r12, rdx
000000000001356f         sub        rsp, 0x18
0000000000013573         mov        rax, qword [fs:0x28]
000000000001357c         mov        qword [rsp+0x38+var_30], rax
0000000000013581         xor        eax, eax
0000000000013583         lea        rax, qword [rsp+0x38+var_34]
0000000000013588         test       rdi, rdi
000000000001358b         cmove      rbx, rax
000000000001358f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000013592         call       j_mbrtowc                                   ; mbrtowc
0000000000013597         cmp        rax, 0xfffffffffffffffd
000000000001359b         mov        rbp, rax
000000000001359e         jbe        loc_135c0

00000000000135a0         test       r12, r12
00000000000135a3         je         loc_135c0

00000000000135a5         xor        edi, edi
00000000000135a7         call       hard_locale                                 ; hard_locale
00000000000135ac         test       al, al
00000000000135ae         jne        loc_135c0

00000000000135b0         movzx      eax, byte [r13]
00000000000135b5         mov        ebp, 0x1
00000000000135ba         mov        dword [rbx], eax
00000000000135bc         nop        dword [rax]

                     loc_135c0:
00000000000135c0         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
00000000000135c5         xor        rdx, qword [fs:0x28]
00000000000135ce         mov        rax, rbp
00000000000135d1         jne        loc_135de

00000000000135d3         add        rsp, 0x18
00000000000135d7         pop        rbx
00000000000135d8         pop        rbp
00000000000135d9         pop        r12
00000000000135db         pop        r13
00000000000135dd         ret
                        ; endp

                     loc_135de:
00000000000135de         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
00000000000135e3         align      16                                          ; End of unwind block (FDE at 0x1a34c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_permission_context:
00000000000135f0         ret                                                    ; Begin of unwind block (FDE at 0x1a38c), CODE XREF=qcopy_acl+69, qset_acl+49
                        ; endp
00000000000135f2         align      512                                         ; End of unwind block (FDE at 0x1a38c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_permissions:
0000000000013600         mov        dword [rcx], edx                            ; Begin of unwind block (FDE at 0x1a3a4), CODE XREF=qcopy_acl+41
0000000000013602         xor        eax, eax
0000000000013604         ret
                        ; endp
0000000000013605         align      16                                          ; End of unwind block (FDE at 0x1a3a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     chmod_or_fchmod:
0000000000013610         mov        eax, esi                                    ; Begin of unwind block (FDE at 0x1a3bc), CODE XREF=set_permissions+14
0000000000013612         mov        esi, edx
0000000000013614         cmp        eax, 0xffffffff
0000000000013617         je         j_j_chmod                                   ; chmod

0000000000013619         mov        edi, eax                                    ; argument "__fd" for method j_fchmod
000000000001361b         jmp        j_fchmod                                    ; fchmod
                        ; endp

                     j_j_chmod:        // chmod
0000000000013620         jmp        j_chmod                                     ; chmod, CODE XREF=chmod_or_fchmod+7
                        ; endp
0000000000013625         align      16                                          ; End of unwind block (FDE at 0x1a3bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_permissions:
0000000000013630         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1a3d0), CODE XREF=qcopy_acl+59, qset_acl+39
0000000000013634         mov        rax, rsi
0000000000013637         mov        esi, edx
0000000000013639         mov        edx, dword [rdi]
000000000001363b         mov        rdi, rax
000000000001363e         call       chmod_or_fchmod                             ; chmod_or_fchmod
0000000000013643         test       eax, eax
0000000000013645         setne      al
0000000000013648         add        rsp, 0x8
000000000001364c         movzx      eax, al
000000000001364f         neg        eax
0000000000013651         ret
                        ; endp
0000000000013652         align      32                                          ; End of unwind block (FDE at 0x1a3d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
0000000000013660         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0x1a3ec), argument #1 for method usage, DATA XREF=argmatch_die
0000000000013665         jmp        usage                                       ; usage
                        ; endp
000000000001366a         align      16                                          ; End of unwind block (FDE at 0x1a3ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
0000000000013670         push       r15                                         ; Begin of unwind block (FDE at 0x1a400), CODE XREF=__xargmatch_internal+44
0000000000013672         push       r14
0000000000013674         mov        r15, rsi
0000000000013677         push       r13
0000000000013679         push       r12
000000000001367b         mov        r13, rcx
000000000001367e         push       rbp
000000000001367f         push       rbx
0000000000013680         mov        rbp, rdx
0000000000013683         sub        rsp, 0x28
0000000000013687         mov        qword [rsp+0x58+var_50], rdi
000000000001368c         mov        qword [rsp+0x58+var_40], rdx
0000000000013691         call       j_strlen                                    ; strlen
0000000000013696         mov        r14, qword [r15]
0000000000013699         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
00000000000136a1         test       r14, r14
00000000000136a4         je         loc_1375d

00000000000136aa         mov        r12, rax
00000000000136ad         mov        byte [rsp+0x58+var_41], 0x0
00000000000136b2         xor        ebx, ebx
00000000000136b4         jmp        loc_13707
00000000000136b6         align      64

                     loc_136c0:
00000000000136c0         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
00000000000136c5         test       rax, rax
00000000000136c8         je         loc_13770

00000000000136ce         mov        rdi, qword [rsp+0x58+var_58]
00000000000136d2         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
00000000000136d5         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
00000000000136d8         imul       rdi, r13
00000000000136dc         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
00000000000136df         call       j_memcmp                                    ; memcmp
00000000000136e4         test       eax, eax
00000000000136e6         movzx      eax, byte [rsp+0x58+var_41]
00000000000136eb         mov        ecx, 0x1
00000000000136f0         cmovne     eax, ecx
00000000000136f3         mov        byte [rsp+0x58+var_41], al

                     loc_136f7:
00000000000136f7         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
00000000000136fb         add        rbp, r13
00000000000136fe         mov        r14, qword [r15+rbx*8]
0000000000013702         test       r14, r14
0000000000013705         je         loc_13748

                     loc_13707:
0000000000013707         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
000000000001370c         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
000000000001370f         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
0000000000013712         call       j_strncmp                                   ; strncmp
0000000000013717         test       eax, eax
0000000000013719         jne        loc_136f7

000000000001371b         mov        rdi, r14                                    ; argument "__s" for method j_strlen
000000000001371e         call       j_strlen                                    ; strlen
0000000000013723         cmp        rax, r12
0000000000013726         je         loc_13780

0000000000013728         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
000000000001372d         jne        loc_136c0

000000000001372f         mov        qword [rsp+0x58+var_58], rbx
0000000000013733         add        rbx, 0x1
0000000000013737         add        rbp, r13
000000000001373a         mov        r14, qword [r15+rbx*8]
000000000001373e         test       r14, r14
0000000000013741         jne        loc_13707

0000000000013743         nop        dword [rax+rax]

                     loc_13748:
0000000000013748         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
000000000001374d         mov        rax, 0xfffffffffffffffe
0000000000013754         cmove      rax, qword [rsp+0x58+var_58]
0000000000013759         mov        qword [rsp+0x58+var_58], rax

                     loc_1375d:
000000000001375d         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
0000000000013761         add        rsp, 0x28
0000000000013765         pop        rbx
0000000000013766         pop        rbp
0000000000013767         pop        r12
0000000000013769         pop        r13
000000000001376b         pop        r14
000000000001376d         pop        r15
000000000001376f         ret
                        ; endp

                     loc_13770:
0000000000013770         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
0000000000013775         jmp        loc_136f7
0000000000013777         align      128

                     loc_13780:
0000000000013780         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
0000000000013784         jmp        loc_1375d
0000000000013786         align      16                                          ; End of unwind block (FDE at 0x1a400)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
0000000000013790         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0x1a44c), CODE XREF=__xargmatch_internal+78
0000000000013794         push       r12
0000000000013796         mov        edx, 0x5
000000000001379b         push       rbp
000000000001379c         mov        r12, rsi
000000000001379f         push       rbx
00000000000137a0         mov        rbp, rdi
00000000000137a3         je         loc_137f0

00000000000137a5         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
00000000000137ac         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000137ae         call       j_dcgettext                                 ; dcgettext
00000000000137b3         mov        rbx, rax

                     loc_137b6:
00000000000137b6         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
00000000000137b9         mov        edi, 0x1
00000000000137be         call       quote_n                                     ; quote_n
00000000000137c3         mov        rdx, r12
00000000000137c6         mov        rbp, rax
00000000000137c9         mov        esi, 0x8
00000000000137ce         xor        edi, edi
00000000000137d0         call       quotearg_n_style                            ; quotearg_n_style
00000000000137d5         mov        r8, rbp
00000000000137d8         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000137db         mov        rcx, rax
00000000000137de         pop        rbx
00000000000137df         pop        rbp
00000000000137e0         pop        r12
00000000000137e2         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000137e4         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000137e6         xor        eax, eax
00000000000137e8         jmp        j_error                                     ; error
                        ; endp
00000000000137ed         align      16

                     loc_137f0:
00000000000137f0         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
00000000000137f7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000137f9         call       j_dcgettext                                 ; dcgettext
00000000000137fe         mov        rbx, rax
0000000000013801         jmp        loc_137b6
0000000000013803         align      16                                          ; End of unwind block (FDE at 0x1a44c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
0000000000013810         push       r15                                         ; Begin of unwind block (FDE at 0x1a478), CODE XREF=__xargmatch_internal+92
0000000000013812         push       r14
0000000000013814         mov        r14, rdi
0000000000013817         push       r13
0000000000013819         push       r12
000000000001381b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000001381d         push       rbp
000000000001381e         push       rbx
000000000001381f         mov        rbp, rsi
0000000000013822         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
0000000000013829         mov        r12, rdx
000000000001382c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000013831         sub        rsp, 0x8
0000000000013835         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000001383c         call       j_dcgettext                                 ; dcgettext
0000000000013841         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000013844         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000013847         call       j_fputs_unlocked                            ; fputs_unlocked
000000000001384c         mov        r15, qword [r14]
000000000001384f         test       r15, r15
0000000000013852         je         loc_138e8

0000000000013858         xor        r13d, r13d
000000000001385b         xor        ebx, ebx
000000000001385d         jmp        loc_13898
000000000001385f         align      32

                     loc_13860:
0000000000013860         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
0000000000013863         add        rbx, 0x1
0000000000013867         mov        r13, rbp
000000000001386a         call       quote                                       ; quote
000000000001386f         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000013876         lea        rdx, qword [aNS]                            ; "\\n  - %s"
000000000001387d         mov        rcx, rax
0000000000013880         mov        esi, 0x1
0000000000013885         xor        eax, eax
0000000000013887         add        rbp, r12
000000000001388a         call       j___fprintf_chk                             ; __fprintf_chk
000000000001388f         mov        r15, qword [r14+rbx*8]
0000000000013893         test       r15, r15
0000000000013896         je         loc_138e8

                     loc_13898:
0000000000013898         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
000000000001389b         je         loc_13860

000000000001389d         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
00000000000138a0         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
00000000000138a3         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
00000000000138a6         call       j_memcmp                                    ; memcmp
00000000000138ab         test       eax, eax
00000000000138ad         jne        loc_13860

00000000000138af         mov        rdi, r15
00000000000138b2         add        rbx, 0x1
00000000000138b6         add        rbp, r12
00000000000138b9         call       quote                                       ; quote
00000000000138be         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000138c5         lea        rdx, qword [aNS+8]                          ; 0x17445
00000000000138cc         mov        rcx, rax
00000000000138cf         mov        esi, 0x1
00000000000138d4         xor        eax, eax
00000000000138d6         call       j___fprintf_chk                             ; __fprintf_chk
00000000000138db         mov        r15, qword [r14+rbx*8]
00000000000138df         test       r15, r15
00000000000138e2         jne        loc_13898

00000000000138e4         nop        dword [rax]

                     loc_138e8:
00000000000138e8         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
00000000000138ef         mov        rax, qword [rdi+0x28]
00000000000138f3         cmp        rax, qword [rdi+0x30]
00000000000138f7         jae        loc_13918

00000000000138f9         lea        rdx, qword [rax+1]
00000000000138fd         mov        qword [rdi+0x28], rdx
0000000000013901         mov        byte [rax], 0xa
0000000000013904         add        rsp, 0x8
0000000000013908         pop        rbx
0000000000013909         pop        rbp
000000000001390a         pop        r12
000000000001390c         pop        r13
000000000001390e         pop        r14
0000000000013910         pop        r15
0000000000013912         ret
                        ; endp
0000000000013913         align      8

                     loc_13918:
0000000000013918         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
000000000001391c         mov        esi, 0xa                                    ; argument #2 for method j___overflow
0000000000013921         pop        rbx
0000000000013922         pop        rbp
0000000000013923         pop        r12
0000000000013925         pop        r13
0000000000013927         pop        r14
0000000000013929         pop        r15
000000000001392b         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
0000000000013930         push       r15                                         ; End of unwind block (FDE at 0x1a478), Begin of unwind block (FDE at 0x1a4d8), CODE XREF=get_version.part.0+31
0000000000013932         push       r14
0000000000013934         mov        r14, rdi
0000000000013937         push       r13
0000000000013939         push       r12
000000000001393b         mov        r12, rsi
000000000001393e         push       rbp
000000000001393f         push       rbx
0000000000013940         mov        rbp, rcx
0000000000013943         mov        rbx, rdx
0000000000013946         mov        rcx, r8
0000000000013949         mov        rdx, rbp
000000000001394c         sub        rsp, 0x8
0000000000013950         mov        rsi, rbx
0000000000013953         mov        rdi, r12
0000000000013956         mov        r15, r8
0000000000013959         mov        r13, r9
000000000001395c         call       argmatch                                    ; argmatch
0000000000013961         test       rax, rax
0000000000013964         js         loc_13975

                     loc_13966:
0000000000013966         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
000000000001396a         pop        rbx
000000000001396b         pop        rbp
000000000001396c         pop        r12
000000000001396e         pop        r13
0000000000013970         pop        r14
0000000000013972         pop        r15
0000000000013974         ret
                        ; endp

                     loc_13975:
0000000000013975         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
0000000000013978         mov        rsi, r12
000000000001397b         mov        rdi, r14
000000000001397e         call       argmatch_invalid                            ; argmatch_invalid
0000000000013983         mov        rdx, r15
0000000000013986         mov        rsi, rbp
0000000000013989         mov        rdi, rbx
000000000001398c         call       argmatch_valid                              ; argmatch_valid
0000000000013991         call       r13
0000000000013994         mov        rax, 0xffffffffffffffff
000000000001399b         jmp        loc_13966
000000000001399d         align      32                                          ; End of unwind block (FDE at 0x1a4d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
00000000000139a0         push       r14                                         ; Begin of unwind block (FDE at 0x1a524)
00000000000139a2         push       r13
00000000000139a4         push       r12
00000000000139a6         push       rbp
00000000000139a7         push       rbx
00000000000139a8         mov        r14, qword [rsi]
00000000000139ab         test       r14, r14
00000000000139ae         je         loc_139e1

00000000000139b0         mov        r12, rcx
00000000000139b3         mov        r13, rdi
00000000000139b6         mov        rbp, rdx
00000000000139b9         lea        rbx, qword [rsi+8]
00000000000139bd         jmp        loc_139cf
00000000000139bf         align      64

                     loc_139c0:
00000000000139c0         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
00000000000139c3         add        rbp, r12
00000000000139c6         add        rbx, 0x8
00000000000139ca         test       r14, r14
00000000000139cd         je         loc_139e1

                     loc_139cf:
00000000000139cf         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
00000000000139d2         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
00000000000139d5         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
00000000000139d8         call       j_memcmp                                    ; memcmp
00000000000139dd         test       eax, eax
00000000000139df         jne        loc_139c0

                     loc_139e1:
00000000000139e1         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
00000000000139e2         mov        rax, r14
00000000000139e5         pop        rbp
00000000000139e6         pop        r12
00000000000139e8         pop        r13
00000000000139ea         pop        r14
00000000000139ec         ret
                        ; endp
00000000000139ed         align      16                                          ; End of unwind block (FDE at 0x1a524)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
00000000000139f0         push       r12                                         ; Begin of unwind block (FDE at 0x1a564), CODE XREF=close_stdin+31, close_stdin+76, close_stdin+214, close_stdout+13, close_stdout+51
00000000000139f2         push       rbp
00000000000139f3         mov        rbp, rdi
00000000000139f6         push       rbx
00000000000139f7         call       j___fpending                                ; __fpending
00000000000139fc         mov        ebx, dword [rbp]
00000000000139ff         mov        rdi, rbp
0000000000013a02         mov        r12, rax
0000000000013a05         call       rpl_fclose                                  ; rpl_fclose
0000000000013a0a         and        ebx, 0x20
0000000000013a0d         test       ebx, ebx
0000000000013a0f         jne        loc_13a28

0000000000013a11         test       eax, eax
0000000000013a13         je         loc_13a1f

0000000000013a15         test       r12, r12
0000000000013a18         mov        eax, 0xffffffff
0000000000013a1d         je         loc_13a58

                     loc_13a1f:
0000000000013a1f         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000013a20         pop        rbp
0000000000013a21         pop        r12
0000000000013a23         ret
                        ; endp
0000000000013a24         align      8

                     loc_13a28:
0000000000013a28         test       eax, eax                                    ; CODE XREF=close_stream+31
0000000000013a2a         jne        loc_13a48

0000000000013a2c         call       j___errno_location                          ; __errno_location
0000000000013a31         mov        dword [rax], 0x0
0000000000013a37         mov        eax, 0xffffffff
0000000000013a3c         pop        rbx
0000000000013a3d         pop        rbp
0000000000013a3e         pop        r12
0000000000013a40         ret
                        ; endp
0000000000013a41         align      8

                     loc_13a48:
0000000000013a48         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000013a49         mov        eax, 0xffffffff
0000000000013a4e         pop        rbp
0000000000013a4f         pop        r12
0000000000013a51         ret
                        ; endp
0000000000013a52         align      8

                     loc_13a58:
0000000000013a58         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
0000000000013a5d         cmp        dword [rax], 0x9
0000000000013a60         pop        rbx
0000000000013a61         pop        rbp
0000000000013a62         pop        r12
0000000000013a64         setne      al
0000000000013a67         movzx      eax, al
0000000000013a6a         neg        eax
0000000000013a6c         ret
                        ; endp
0000000000013a6d         align      16                                          ; End of unwind block (FDE at 0x1a564)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_check_init:
0000000000013a70         mov        qword [rdi+0x10], 0x0                       ; Begin of unwind block (FDE at 0x1a5b4), CODE XREF=setup_dir.isra.4+87
0000000000013a78         mov        dword [rdi+0x18], 0x95f616
0000000000013a7f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_check:
0000000000013a80         cmp        dword [rdi+0x18], 0x95f616                  ; End of unwind block (FDE at 0x1a5b4), Begin of unwind block (FDE at 0x1a5c8), CODE XREF=enter_dir.isra.10+136
0000000000013a87         jne        loc_13ae7

0000000000013a89         mov        rdx, qword [rdi+0x10]
0000000000013a8d         mov        rcx, qword [rsi+8]
0000000000013a91         test       rdx, rdx
0000000000013a94         je         loc_13ab0

0000000000013a96         cmp        qword [rdi], rcx
0000000000013a99         je         loc_13ac8

                     loc_13a9b:
0000000000013a9b         lea        r8, qword [rdx+1]                           ; CODE XREF=cycle_check+79
0000000000013a9f         xor        eax, eax
0000000000013aa1         test       rdx, r8
0000000000013aa4         mov        qword [rdi+0x10], r8
0000000000013aa8         je         loc_13ae0

0000000000013aaa         ret
                        ; endp
0000000000013aac         align      16

                     loc_13ab0:
0000000000013ab0         mov        qword [rdi+0x10], 0x1                       ; CODE XREF=cycle_check+20

                     loc_13ab8:
0000000000013ab8         mov        rax, qword [rsi]                            ; CODE XREF=cycle_check+101
0000000000013abb         mov        qword [rdi], rcx
0000000000013abe         mov        qword [rdi+8], rax
0000000000013ac2         xor        eax, eax
0000000000013ac4         ret
                        ; endp
0000000000013ac5         align      8

                     loc_13ac8:
0000000000013ac8         mov        rax, qword [rdi+8]                          ; CODE XREF=cycle_check+25
0000000000013acc         cmp        qword [rsi], rax
0000000000013acf         jne        loc_13a9b

                     loc_13ad1:
0000000000013ad1         mov        eax, 0x1                                    ; CODE XREF=cycle_check+99
0000000000013ad6         ret
                        ; endp
0000000000013ad7         align      32

                     loc_13ae0:
0000000000013ae0         test       r8, r8                                      ; CODE XREF=cycle_check+40
0000000000013ae3         je         loc_13ad1

0000000000013ae5         jmp        loc_13ab8

                     loc_13ae7:
0000000000013ae7         lea        rcx, qword [__PRETTY_FUNCTION__.3994]       ; argument "__function" for method j___assert_fail, "cycle_check", CODE XREF=cycle_check+7
0000000000013aee         lea        rsi, qword [aCoreutils831li_17450]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/cycle-check.c"
0000000000013af5         lea        rdi, qword [aStatemagic9827]                ; argument "__assertion" for method j___assert_fail, "state->magic == 9827862"
0000000000013afc         sub        rsp, 0x8
0000000000013b00         mov        edx, 0x3c                                   ; argument "__line" for method j___assert_fail
0000000000013b05         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000013b0a         align      16                                          ; End of unwind block (FDE at 0x1a5c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     opendir_safer:
0000000000013b10         push       r14                                         ; Begin of unwind block (FDE at 0x1a5e4), CODE XREF=savedir+6
0000000000013b12         push       r13
0000000000013b14         push       r12
0000000000013b16         push       rbp
0000000000013b17         push       rbx
0000000000013b18         call       j_opendir                                   ; opendir
0000000000013b1d         test       rax, rax
0000000000013b20         mov        rbx, rax
0000000000013b23         je         loc_13b32

0000000000013b25         mov        rdi, rax                                    ; argument "__dirp" for method j_dirfd
0000000000013b28         call       j_dirfd                                     ; dirfd
0000000000013b2d         cmp        eax, 0x2
0000000000013b30         jbe        loc_13b40

                     loc_13b32:
0000000000013b32         mov        rax, rbx                                    ; CODE XREF=opendir_safer+19
0000000000013b35         pop        rbx
0000000000013b36         pop        rbp
0000000000013b37         pop        r12
0000000000013b39         pop        r13
0000000000013b3b         pop        r14
0000000000013b3d         ret
                        ; endp
0000000000013b3e         align      64

                     loc_13b40:
0000000000013b40         mov        edi, eax                                    ; CODE XREF=opendir_safer+32
0000000000013b42         mov        edx, 0x3
0000000000013b47         mov        esi, 0x406
0000000000013b4c         xor        eax, eax
0000000000013b4e         call       rpl_fcntl                                   ; rpl_fcntl
0000000000013b53         mov        r12d, eax
0000000000013b56         call       j___errno_location                          ; __errno_location
0000000000013b5b         test       r12d, r12d
0000000000013b5e         mov        rbp, rax
0000000000013b61         jns        loc_13b88

0000000000013b63         mov        r14d, dword [rax]
0000000000013b66         xor        r13d, r13d

                     loc_13b69:
0000000000013b69         mov        rdi, rbx                                    ; argument "__dirp" for method j_closedir, CODE XREF=opendir_safer+138, opendir_safer+148
0000000000013b6c         mov        rbx, r13
0000000000013b6f         call       j_closedir                                  ; closedir
0000000000013b74         mov        dword [rbp], r14d
0000000000013b78         mov        rax, rbx
0000000000013b7b         pop        rbx
0000000000013b7c         pop        rbp
0000000000013b7d         pop        r12
0000000000013b7f         pop        r13
0000000000013b81         pop        r14
0000000000013b83         ret
                        ; endp
0000000000013b84         align      8

                     loc_13b88:
0000000000013b88         mov        edi, r12d                                   ; argument "__fd" for method j_fdopendir, CODE XREF=opendir_safer+81
0000000000013b8b         call       j_fdopendir                                 ; fdopendir
0000000000013b90         test       rax, rax
0000000000013b93         mov        r13, rax
0000000000013b96         mov        r14d, dword [rbp]
0000000000013b9a         jne        loc_13b69

0000000000013b9c         mov        edi, r12d                                   ; argument "__fd" for method j_close
0000000000013b9f         call       j_close                                     ; close
0000000000013ba4         jmp        loc_13b69
0000000000013ba6         align      16                                          ; End of unwind block (FDE at 0x1a5e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettime:
0000000000013bb0         mov        rsi, rdi                                    ; Begin of unwind block (FDE at 0x1a634), argument "__tp" for method j_clock_gettime, CODE XREF=update_timespec+76, update_timespec+176
0000000000013bb3         xor        edi, edi                                    ; argument "__clock_id" for method j_clock_gettime
0000000000013bb5         jmp        j_clock_gettime                             ; clock_gettime
                        ; endp
0000000000013bba         align      64                                          ; End of unwind block (FDE at 0x1a634)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     current_timespec:
0000000000013bc0         sub        rsp, 0x28                                   ; Begin of unwind block (FDE at 0x1a648)
0000000000013bc4         xor        edi, edi                                    ; argument "__clock_id" for method j_clock_gettime
0000000000013bc6         mov        rsi, rsp                                    ; argument "__tp" for method j_clock_gettime
0000000000013bc9         mov        rax, qword [fs:0x28]
0000000000013bd2         mov        qword [rsp+0x28+var_10], rax
0000000000013bd7         xor        eax, eax
0000000000013bd9         call       j_clock_gettime                             ; clock_gettime
0000000000013bde         mov        rcx, qword [rsp+0x28+var_10]
0000000000013be3         xor        rcx, qword [fs:0x28]
0000000000013bec         mov        rax, qword [rsp+0x28+var_28]
0000000000013bf0         mov        rdx, qword [rsp+0x28+var_20]
0000000000013bf5         jne        loc_13bfc

0000000000013bf7         add        rsp, 0x28
0000000000013bfb         ret
                        ; endp

                     loc_13bfc:
0000000000013bfc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=current_timespec+53
                        ; endp
0000000000013c01         align      16                                          ; End of unwind block (FDE at 0x1a648)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000013c10         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1a664), CODE XREF=rpl_mbrtowc+71
0000000000013c14         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000013c16         call       j_setlocale                                 ; setlocale
0000000000013c1b         mov        rdx, rax
0000000000013c1e         mov        eax, 0x1
0000000000013c23         test       rdx, rdx
0000000000013c26         je         loc_13c45

0000000000013c28         lea        rdi, qword [__PRETTY_FUNCTION__.3994+12]    ; 0x1749c
0000000000013c2f         mov        ecx, 0x2
0000000000013c34         mov        rsi, rdx
0000000000013c37         rep  cmpsb byte [rsi], byte [rdi]
0000000000013c39         seta       cl
0000000000013c3c         sbb        cl, 0x0
0000000000013c3f         xor        eax, eax
0000000000013c41         test       cl, cl
0000000000013c43         jne        loc_13c50

                     loc_13c45:
0000000000013c45         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000013c49         ret
                        ; endp
0000000000013c4a         align      16

                     loc_13c50:
0000000000013c50         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000013c57         mov        ecx, 0x6
0000000000013c5c         mov        rsi, rdx
0000000000013c5f         rep  cmpsb byte [rsi], byte [rdi]
0000000000013c61         seta       al
0000000000013c64         sbb        al, 0x0
0000000000013c66         test       al, al
0000000000013c68         setne      al
0000000000013c6b         add        rsp, 0x8
0000000000013c6f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_pjw:
0000000000013c70         movsx      rcx, byte [rdi]                             ; End of unwind block (FDE at 0x1a664), Begin of unwind block (FDE at 0x1a684), CODE XREF=triple_hash+15
0000000000013c74         test       cl, cl
0000000000013c76         je         loc_13ca0

0000000000013c78         xor        eax, eax
0000000000013c7a         nop        word [rax+rax]

                     loc_13c80:
0000000000013c80         rol        rax, 0x9                                    ; CODE XREF=hash_pjw+33
0000000000013c84         add        rdi, 0x1
0000000000013c88         add        rax, rcx
0000000000013c8b         movsx      rcx, byte [rdi]
0000000000013c8f         test       cl, cl
0000000000013c91         jne        loc_13c80

0000000000013c93         xor        edx, edx
0000000000013c95         div        rsi
0000000000013c98         mov        rax, rdx
0000000000013c9b         ret
                        ; endp
0000000000013c9c         align      32

                     loc_13ca0:
0000000000013ca0         xor        edx, edx                                    ; CODE XREF=hash_pjw+6
0000000000013ca2         mov        rax, rdx
0000000000013ca5         ret
                        ; endp
0000000000013ca6         align      16                                          ; End of unwind block (FDE at 0x1a684)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_init:
0000000000013cb0         mov        byte [rdi+0x1c], 0x1                        ; Begin of unwind block (FDE at 0x1a69c), CODE XREF=rpl_fts_open+681
0000000000013cb4         mov        qword [rdi+0x14], 0x0
0000000000013cbc         mov        dword [rdi], esi
0000000000013cbe         mov        dword [rdi+4], esi
0000000000013cc1         mov        dword [rdi+8], esi
0000000000013cc4         mov        dword [rdi+0xc], esi
0000000000013cc7         mov        dword [rdi+0x10], esi
0000000000013cca         ret
                        ; endp
0000000000013ccb         align      16                                          ; End of unwind block (FDE at 0x1a69c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_empty:
0000000000013cd0         movzx      eax, byte [rdi+0x1c]                        ; Begin of unwind block (FDE at 0x1a6b0), CODE XREF=fd_ring_clear+31, fts_safe_changedir+455
0000000000013cd4         ret
                        ; endp
0000000000013cd5         align      32                                          ; End of unwind block (FDE at 0x1a6b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_push:
0000000000013ce0         movzx      edx, byte [rdi+0x1c]                        ; Begin of unwind block (FDE at 0x1a6c4), CODE XREF=cwd_advance_fd+52
0000000000013ce4         mov        ecx, dword [rdi+0x14]
0000000000013ce7         xor        edx, 0x1
0000000000013cea         movzx      edx, dl
0000000000013ced         add        ecx, edx
0000000000013cef         and        ecx, 0x3
0000000000013cf2         mov        eax, ecx
0000000000013cf4         lea        r8, qword [rdi+rax*4]
0000000000013cf8         mov        eax, dword [r8]
0000000000013cfb         mov        dword [r8], esi
0000000000013cfe         mov        esi, dword [rdi+0x18]
0000000000013d01         mov        dword [rdi+0x14], ecx
0000000000013d04         cmp        esi, ecx
0000000000013d06         jne        loc_13d10

0000000000013d08         add        edx, esi
0000000000013d0a         and        edx, 0x3
0000000000013d0d         mov        dword [rdi+0x18], edx

                     loc_13d10:
0000000000013d10         mov        byte [rdi+0x1c], 0x0                        ; CODE XREF=i_ring_push+38
0000000000013d14         ret
                        ; endp
0000000000013d15         align      32                                          ; End of unwind block (FDE at 0x1a6c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_pop:
0000000000013d20         cmp        byte [rdi+0x1c], 0x0                        ; Begin of unwind block (FDE at 0x1a6d8), CODE XREF=fd_ring_clear+19, fts_safe_changedir+475
0000000000013d24         jne        loc_13d55

0000000000013d26         mov        eax, dword [rdi+0x14]
0000000000013d29         mov        esi, dword [rdi+0x10]
0000000000013d2c         lea        rcx, qword [rdi+rax*4]
0000000000013d30         mov        rdx, rax
0000000000013d33         mov        eax, dword [rcx]
0000000000013d35         mov        dword [rcx], esi
0000000000013d37         cmp        edx, dword [rdi+0x18]
0000000000013d3a         je         loc_13d50

0000000000013d3c         add        edx, 0x3
0000000000013d3f         and        edx, 0x3
0000000000013d42         mov        dword [rdi+0x14], edx
0000000000013d45         ret
                        ; endp
0000000000013d46         align      16

                     loc_13d50:
0000000000013d50         mov        byte [rdi+0x1c], 0x1                        ; CODE XREF=i_ring_pop+26
0000000000013d54         ret
                        ; endp

                     loc_13d55:
0000000000013d55         sub        rsp, 0x8                                    ; CODE XREF=i_ring_pop+4
0000000000013d59         call       j_abort                                     ; abort
                        ; endp
0000000000013d5e         align      32                                          ; End of unwind block (FDE at 0x1a6d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000013d60         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1a6ec), CODE XREF=gettext_quote.part.1+11
0000000000013d64         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000013d69         call       j_nl_langinfo                               ; nl_langinfo
0000000000013d6e         test       rax, rax
0000000000013d71         je         loc_13d90

0000000000013d73         cmp        byte [rax], 0x0
0000000000013d76         lea        rdx, qword [aAscii]                         ; "ASCII"
0000000000013d7d         cmove      rax, rdx
0000000000013d81         add        rsp, 0x8
0000000000013d85         ret
                        ; endp
0000000000013d86         align      16

                     loc_13d90:
0000000000013d90         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
0000000000013d97         add        rsp, 0x8
0000000000013d9b         ret
                        ; endp
0000000000013d9c         align      32                                          ; End of unwind block (FDE at 0x1a6ec)

                     openat_safer:
0000000000013da0         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0x1a70c), CODE XREF=opendirat+21, diropen.isra.6+53
0000000000013da4         mov        qword [rsp+0x58+var_20], rcx
0000000000013da9         xor        ecx, ecx
0000000000013dab         mov        rax, qword [fs:0x28]
0000000000013db4         mov        qword [rsp+0x58+var_40], rax
0000000000013db9         xor        eax, eax
0000000000013dbb         test       dl, 0x40
0000000000013dbe         jne        loc_13de8

                     loc_13dc0:
0000000000013dc0         xor        eax, eax                                    ; CODE XREF=openat_safer+103
0000000000013dc2         call       j_openat                                    ; openat
0000000000013dc7         mov        edi, eax
0000000000013dc9         call       fd_safer                                    ; fd_safer
0000000000013dce         mov        rsi, qword [rsp+0x58+var_40]
0000000000013dd3         xor        rsi, qword [fs:0x28]
0000000000013ddc         jne        loc_13e09

0000000000013dde         add        rsp, 0x58
0000000000013de2         ret
                        ; endp
0000000000013de3         align      8

                     loc_13de8:
0000000000013de8         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=openat_safer+30
0000000000013ded         mov        dword [rsp+0x58+var_58], 0x18
0000000000013df4         mov        ecx, dword [rsp+0x58+var_20]
0000000000013df8         mov        qword [rsp+0x58+var_50], rax
0000000000013dfd         lea        rax, qword [rsp+0x58+var_38]
0000000000013e02         mov        qword [rsp+0x58+var_48], rax
0000000000013e07         jmp        loc_13dc0

                     loc_13e09:
0000000000013e09         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=openat_safer+60
                        ; endp
0000000000013e0e         align      16                                          ; End of unwind block (FDE at 0x1a70c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randint_new:
0000000000013e10         push       rbx                                         ; Begin of unwind block (FDE at 0x1a72c)
0000000000013e11         mov        rbx, rdi
0000000000013e14         mov        edi, 0x18
0000000000013e19         call       xmalloc                                     ; xmalloc
0000000000013e1e         mov        qword [rax], rbx
0000000000013e21         mov        qword [rax+0x10], 0x0
0000000000013e29         mov        qword [rax+8], 0x0
0000000000013e31         pop        rbx
0000000000013e32         ret
                        ; endp
0000000000013e33         align      64                                          ; End of unwind block (FDE at 0x1a72c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randint_all_new:
0000000000013e40         push       rbx                                         ; Begin of unwind block (FDE at 0x1a748), CODE XREF=try_tempname_len+123
0000000000013e41         call       randread_new                                ; randread_new
0000000000013e46         test       rax, rax
0000000000013e49         je         loc_13e70

0000000000013e4b         mov        rbx, rax
0000000000013e4e         mov        edi, 0x18
0000000000013e53         call       xmalloc                                     ; xmalloc
0000000000013e58         mov        qword [rax], rbx
0000000000013e5b         mov        qword [rax+0x10], 0x0
0000000000013e63         mov        qword [rax+8], 0x0
0000000000013e6b         pop        rbx
0000000000013e6c         ret
                        ; endp
0000000000013e6d         align      16

                     loc_13e70:
0000000000013e70         xor        eax, eax                                    ; CODE XREF=randint_all_new+9
0000000000013e72         pop        rbx
0000000000013e73         ret
                        ; endp
0000000000013e74         align      128                                         ; End of unwind block (FDE at 0x1a748)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randint_get_source:
0000000000013e80         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x1a768)
0000000000013e83         ret
                        ; endp
0000000000013e84         align      16                                          ; End of unwind block (FDE at 0x1a768)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     randint_genmax:
0000000000013e90         push       r15                                         ; Begin of unwind block (FDE at 0x1a77c), CODE XREF=try_tempname_len+196
0000000000013e92         push       r14
0000000000013e94         lea        r15, qword [rsi+1]
0000000000013e98         push       r13
0000000000013e9a         push       r12
0000000000013e9c         mov        r13, rdi
0000000000013e9f         push       rbp
0000000000013ea0         push       rbx
0000000000013ea1         mov        r14, rsi
0000000000013ea4         sub        rsp, 0x28
0000000000013ea8         mov        rbp, qword [rdi+8]
0000000000013eac         mov        rbx, qword [rdi+0x10]
0000000000013eb0         mov        rax, qword [fs:0x28]
0000000000013eb9         mov        qword [rsp+0x58+var_40], rax
0000000000013ebe         xor        eax, eax
0000000000013ec0         mov        rax, qword [rdi]
0000000000013ec3         lea        r12, qword [rsp+0x58+var_48]
0000000000013ec8         mov        qword [rsp+0x58+var_50], rax
0000000000013ecd         jmp        loc_13f05
0000000000013ecf         align      16

                     loc_13ed0:
0000000000013ed0         cmp        rbx, r14                                    ; CODE XREF=randint_genmax+120
0000000000013ed3         je         loc_13f5f

                     loc_13ed9:
0000000000013ed9         mov        rax, rbx                                    ; CODE XREF=randint_genmax+201
0000000000013edc         xor        edx, edx
0000000000013ede         sub        rax, r14
0000000000013ee1         div        r15
0000000000013ee4         sub        rbx, rdx
0000000000013ee7         mov        rdi, rdx
0000000000013eea         mov        rsi, rax
0000000000013eed         xor        edx, edx
0000000000013eef         mov        rax, rbp
0000000000013ef2         div        r15
0000000000013ef5         cmp        rbp, rbx
0000000000013ef8         jbe        loc_13f98

0000000000013efe         lea        rbx, qword [rdi-1]
0000000000013f02         mov        rbp, rdx

                     loc_13f05:
0000000000013f05         cmp        rbx, r14                                    ; CODE XREF=randint_genmax+61
0000000000013f08         jae        loc_13ed0

0000000000013f0a         mov        rax, rbx
0000000000013f0d         xor        edx, edx
0000000000013f0f         nop

                     loc_13f10:
0000000000013f10         shl        rax, 0x8                                    ; CODE XREF=randint_genmax+145
0000000000013f14         add        rdx, 0x1
0000000000013f18         add        rax, 0xff
0000000000013f1e         cmp        r14, rax
0000000000013f21         ja         loc_13f10

0000000000013f23         mov        rdi, qword [rsp+0x58+var_50]
0000000000013f28         mov        rsi, r12
0000000000013f2b         call       randread                                    ; randread
0000000000013f30         mov        rax, r12
0000000000013f33         nop        dword [rax+rax]

                     loc_13f38:
0000000000013f38         movzx      edx, byte [rax]                             ; CODE XREF=randint_genmax+196
0000000000013f3b         shl        rbx, 0x8
0000000000013f3f         shl        rbp, 0x8
0000000000013f43         add        rbx, 0xff
0000000000013f4a         add        rax, 0x1
0000000000013f4e         add        rbp, rdx
0000000000013f51         cmp        r14, rbx
0000000000013f54         ja         loc_13f38

0000000000013f56         cmp        rbx, r14
0000000000013f59         jne        loc_13ed9

                     loc_13f5f:
0000000000013f5f         mov        qword [r13+0x10], 0x0                       ; CODE XREF=randint_genmax+67
0000000000013f67         mov        qword [r13+8], 0x0

                     loc_13f6f:
0000000000013f6f         mov        rcx, qword [rsp+0x58+var_40]                ; CODE XREF=randint_genmax+275
0000000000013f74         xor        rcx, qword [fs:0x28]
0000000000013f7d         mov        rax, rbp
0000000000013f80         jne        loc_13fa5

0000000000013f82         add        rsp, 0x28
0000000000013f86         pop        rbx
0000000000013f87         pop        rbp
0000000000013f88         pop        r12
0000000000013f8a         pop        r13
0000000000013f8c         pop        r14
0000000000013f8e         pop        r15
0000000000013f90         ret
                        ; endp
0000000000013f91         align      8

                     loc_13f98:
0000000000013f98         mov        qword [r13+8], rax                          ; CODE XREF=randint_genmax+104
0000000000013f9c         mov        qword [r13+0x10], rsi
0000000000013fa0         mov        rbp, rdx
0000000000013fa3         jmp        loc_13f6f

                     loc_13fa5:
0000000000013fa5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=randint_genmax+240
                        ; endp
0000000000013faa         align      16                                          ; End of unwind block (FDE at 0x1a77c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randint_free:
0000000000013fb0         push       rbx                                         ; Begin of unwind block (FDE at 0x1a7c8)
0000000000013fb1         mov        rdx, 0xffffffffffffffff
0000000000013fb8         mov        rbx, rdi
0000000000013fbb         mov        esi, 0x18
0000000000013fc0         call       j___explicit_bzero_chk                      ; __explicit_bzero_chk
0000000000013fc5         mov        rdi, rbx
0000000000013fc8         pop        rbx
0000000000013fc9         jmp        sub_2c80                                    ; sub_2c80
                        ; endp
0000000000013fce         align      16                                          ; End of unwind block (FDE at 0x1a7c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randint_all_free:
0000000000013fd0         push       r13                                         ; Begin of unwind block (FDE at 0x1a7e4), CODE XREF=try_tempname_len+258, try_tempname_len+304
0000000000013fd2         push       r12
0000000000013fd4         push       rbp
0000000000013fd5         push       rbx
0000000000013fd6         mov        rbx, rdi
0000000000013fd9         sub        rsp, 0x8
0000000000013fdd         mov        rdi, qword [rdi]
0000000000013fe0         call       randread_free                               ; randread_free
0000000000013fe5         mov        r12d, eax
0000000000013fe8         call       j___errno_location                          ; __errno_location
0000000000013fed         mov        r13d, dword [rax]
0000000000013ff0         mov        rdi, rbx
0000000000013ff3         mov        rdx, 0xffffffffffffffff
0000000000013ffa         mov        esi, 0x18
0000000000013fff         mov        rbp, rax
0000000000014002         call       j___explicit_bzero_chk                      ; __explicit_bzero_chk
0000000000014007         mov        rdi, rbx
000000000001400a         call       sub_2c80                                    ; sub_2c80
000000000001400f         mov        dword [rbp], r13d
0000000000014013         add        rsp, 0x8
0000000000014017         mov        eax, r12d
000000000001401a         pop        rbx
000000000001401b         pop        rbp
000000000001401c         pop        r12
000000000001401e         pop        r13
0000000000014020         ret
                        ; endp
0000000000014021         align      16                                          ; End of unwind block (FDE at 0x1a7e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randread_error:
0000000000014030         push       rbp                                         ; Begin of unwind block (FDE at 0x1a81c), DATA XREF=randread_new+90, randread_new+196, randread_new+348
0000000000014031         push       rbx
0000000000014032         sub        rsp, 0x8
0000000000014036         test       rdi, rdi
0000000000014039         je         loc_14078

000000000001403b         call       quote                                       ; quote
0000000000014040         mov        rbp, rax
0000000000014043         call       j___errno_location                          ; __errno_location
0000000000014048         cmp        dword [rax], 0x0
000000000001404b         mov        rbx, rax
000000000001404e         mov        edx, 0x5
0000000000014053         je         loc_1407d

0000000000014055         lea        rsi, qword [aSReadError]                    ; argument "msgid" for method j_dcgettext, "%s: read error"
000000000001405c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000001405e         call       j_dcgettext                                 ; dcgettext

                     loc_14063:
0000000000014063         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure, CODE XREF=randread_error+91
0000000000014069         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000001406b         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000001406e         mov        rcx, rbp
0000000000014071         xor        eax, eax
0000000000014073         call       j_error                                     ; error

                     loc_14078:
0000000000014078         call       j_abort                                     ; abort, CODE XREF=randread_error+9
                        ; endp

                     loc_1407d:
000000000001407d         lea        rsi, qword [aSEndOfFile]                    ; argument "msgid" for method j_dcgettext, "%s: end of file", CODE XREF=randread_error+35
0000000000014084         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000014086         call       j_dcgettext                                 ; dcgettext
000000000001408b         jmp        loc_14063
000000000001408d         align      16                                          ; End of unwind block (FDE at 0x1a81c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     randread_new:
0000000000014090         push       r15                                         ; Begin of unwind block (FDE at 0x1a83c), CODE XREF=randint_all_new+1
0000000000014092         push       r14
0000000000014094         push       r13
0000000000014096         push       r12
0000000000014098         push       rbp
0000000000014099         push       rbx
000000000001409a         sub        rsp, 0x38
000000000001409e         mov        rax, qword [fs:0x28]
00000000000140a7         mov        qword [rsp+0x68+var_40], rax
00000000000140ac         xor        eax, eax
00000000000140ae         test       rsi, rsi
00000000000140b1         je         loc_141d8

00000000000140b7         test       rdi, rdi
00000000000140ba         mov        r12, rdi
00000000000140bd         mov        rbp, rsi
00000000000140c0         je         loc_14140

00000000000140c2         lea        rsi, qword [aDevurandom+13]                 ; 0x174d6
00000000000140c9         call       fopen_safer                                 ; fopen_safer
00000000000140ce         test       rax, rax
00000000000140d1         mov        r13, rax
00000000000140d4         je         loc_142d8

00000000000140da         mov        edi, 0x1038
00000000000140df         call       xmalloc                                     ; xmalloc
00000000000140e4         mov        rbx, rax
00000000000140e7         mov        qword [rax], r13
00000000000140ea         lea        rax, qword [randread_error]                 ; randread_error
00000000000140f1         cmp        rbp, 0x1000
00000000000140f8         mov        ecx, 0x1000
00000000000140fd         lea        rsi, qword [rbx+0x18]                       ; argument "__buf" for method j_setvbuf
0000000000014101         cmovbe     rcx, rbp                                    ; argument "__n" for method j_setvbuf
0000000000014105         mov        qword [rbx+8], rax
0000000000014109         mov        qword [rbx+0x10], r12
000000000001410d         xor        edx, edx                                    ; argument "__modes" for method j_setvbuf
000000000001410f         mov        rdi, r13                                    ; argument "__stream" for method j_setvbuf
0000000000014112         call       j_setvbuf                                   ; setvbuf

                     loc_14117:
0000000000014117         mov        rdx, qword [rsp+0x68+var_40]                ; CODE XREF=randread_new+317, randread_new+367, randread_new+586
000000000001411c         xor        rdx, qword [fs:0x28]
0000000000014125         mov        rax, rbx
0000000000014128         jne        loc_142df

000000000001412e         add        rsp, 0x38
0000000000014132         pop        rbx
0000000000014133         pop        rbp
0000000000014134         pop        r12
0000000000014136         pop        r13
0000000000014138         pop        r14
000000000001413a         pop        r15
000000000001413c         ret
                        ; endp
000000000001413d         align      64

                     loc_14140:
0000000000014140         mov        edi, 0x1038                                 ; CODE XREF=randread_new+48
0000000000014145         call       xmalloc                                     ; xmalloc
000000000001414a         mov        rbx, rax
000000000001414d         mov        qword [rax], 0x0
0000000000014154         lea        rax, qword [randread_error]                 ; randread_error
000000000001415b         lea        rdi, qword [aDevurandom]                    ; argument "__file" for method j_open, "/dev/urandom"
0000000000014162         xor        esi, esi                                    ; argument "__oflag" for method j_open
0000000000014164         mov        qword [rbx+0x10], 0x0
000000000001416c         mov        qword [rbx+8], rax
0000000000014170         mov        qword [rbx+0x18], 0x0
0000000000014178         xor        eax, eax
000000000001417a         call       j_open                                      ; open
000000000001417f         test       eax, eax
0000000000014181         lea        r13, qword [rbx+0x20]
0000000000014185         mov        r15d, eax
0000000000014188         js         loc_14208

000000000001418a         cmp        rbp, 0x800
0000000000014191         mov        rdx, rbp
0000000000014194         mov        r14d, 0x800
000000000001419a         cmova      rdx, r14
000000000001419e         mov        ecx, aCationname                            ; "cation_name"
00000000000141a3         mov        rsi, r13
00000000000141a6         mov        edi, eax
00000000000141a8         call       j___read_chk                                ; __read_chk
00000000000141ad         mov        edi, r15d                                   ; argument "__fd" for method j_close
00000000000141b0         mov        rbp, rax
00000000000141b3         call       j_close                                     ; close
00000000000141b8         cmp        rbp, 0x7ff
00000000000141bf         jle        loc_142e4

                     loc_141c5:
00000000000141c5         mov        rdi, r13                                    ; CODE XREF=randread_new+502, randread_new+547, randread_new+573, randread_new+663, randread_new+742, randread_new+798
00000000000141c8         call       isaac_seed                                  ; isaac_seed
00000000000141cd         jmp        loc_14117
00000000000141d2         align      8

                     loc_141d8:
00000000000141d8         mov        edi, 0x1038                                 ; CODE XREF=randread_new+33
00000000000141dd         call       xmalloc                                     ; xmalloc
00000000000141e2         mov        rbx, rax
00000000000141e5         mov        qword [rax], 0x0
00000000000141ec         lea        rax, qword [randread_error]                 ; randread_error
00000000000141f3         mov        qword [rbx+0x10], 0x0
00000000000141fb         mov        qword [rbx+8], rax
00000000000141ff         jmp        loc_14117
0000000000014204         align      8

                     loc_14208:
0000000000014208         lea        r12, qword [rsp+0x68+var_58]                ; CODE XREF=randread_new+248
000000000001420d         xor        esi, esi                                    ; argument "__tz" for method j_gettimeofday
000000000001420f         mov        r14d, 0x18
0000000000014215         mov        rdi, r12                                    ; argument "__tv" for method j_gettimeofday
0000000000014218         call       j_gettimeofday                              ; gettimeofday
000000000001421d         movdqa     xmm0, xmmword [rsp+0x68+var_58]
0000000000014223         movups     xmmword [rbx+0x20], xmm0
0000000000014227         call       j_getpid                                    ; getpid
000000000001422c         mov        dword [rbx+0x30], eax
000000000001422f         mov        dword [rsp+0x68+var_58], eax
0000000000014233         call       j_getppid                                   ; getppid
0000000000014238         mov        dword [rsp+0x68+var_58], eax
000000000001423c         mov        dword [rbx+0x34], eax

                     loc_1423f:
000000000001423f         mov        ebp, 0x800                                  ; CODE XREF=randread_new+804
0000000000014244         mov        eax, 0x4
0000000000014249         sub        rbp, r14
000000000001424c         cmp        rbp, 0x4
0000000000014250         cmova      rbp, rax
0000000000014254         call       j_getuid                                    ; getuid
0000000000014259         test       ebp, ebp
000000000001425b         mov        dword [rsp+0x68+var_58], eax
000000000001425f         lea        rcx, qword [r13+r14]
0000000000014264         mov        esi, ebp
0000000000014266         je         loc_1427c

0000000000014268         xor        eax, eax

                     loc_1426a:
000000000001426a         mov        edx, eax                                    ; CODE XREF=randread_new+490
000000000001426c         add        eax, 0x1
000000000001426f         movzx      edi, byte [r12+rdx]
0000000000014274         cmp        eax, esi
0000000000014276         mov        byte [rcx+rdx], dil
000000000001427a         jb         loc_1426a

                     loc_1427c:
000000000001427c         add        rbp, r14                                    ; CODE XREF=randread_new+470
000000000001427f         cmp        rbp, 0x7ff
0000000000014286         ja         loc_141c5

000000000001428c         call       j_getgid                                    ; getgid
0000000000014291         mov        dword [rsp+0x68+var_58], eax
0000000000014295         mov        eax, 0x800
000000000001429a         mov        edx, 0x4
000000000001429f         sub        rax, rbp
00000000000142a2         lea        rcx, qword [r13+rbp]
00000000000142a7         cmp        rax, 0x4
00000000000142ab         cmova      rax, rdx
00000000000142af         test       eax, eax
00000000000142b1         mov        esi, eax
00000000000142b3         je         loc_141c5

00000000000142b9         xor        eax, eax

                     loc_142bb:
00000000000142bb         mov        edx, eax                                    ; CODE XREF=randread_new+571
00000000000142bd         add        eax, 0x1
00000000000142c0         movzx      edi, byte [r12+rdx]
00000000000142c5         cmp        eax, esi
00000000000142c7         mov        byte [rcx+rdx], dil
00000000000142cb         jb         loc_142bb

00000000000142cd         jmp        loc_141c5
00000000000142d2         align      8

                     loc_142d8:
00000000000142d8         xor        ebx, ebx                                    ; CODE XREF=randread_new+68
00000000000142da         jmp        loc_14117

                     loc_142df:
00000000000142df         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=randread_new+152
                        ; endp

                     loc_142e4:
00000000000142e4         test       rbp, rbp                                    ; CODE XREF=randread_new+303
00000000000142e7         mov        r15, r14
00000000000142ea         mov        eax, 0x10
00000000000142ef         cmovs      rbp, r12
00000000000142f3         lea        r12, qword [rsp+0x68+var_58]
00000000000142f8         sub        r15, rbp
00000000000142fb         cmp        r15, 0x10
00000000000142ff         mov        rdi, r12                                    ; argument "__tv" for method j_gettimeofday
0000000000014302         cmova      r15, rax
0000000000014306         xor        esi, esi                                    ; argument "__tz" for method j_gettimeofday
0000000000014308         call       j_gettimeofday                              ; gettimeofday
000000000001430d         lea        rax, qword [r13+rbp]
0000000000014312         add        rbp, r15
0000000000014315         mov        ecx, r15d
0000000000014318         cmp        rbp, 0x7ff
000000000001431f         mov        rsi, r12
0000000000014322         mov        rdi, rax
0000000000014325         rep movsb  byte [rdi], byte [rsi]
0000000000014327         ja         loc_141c5

000000000001432d         mov        r15, r14
0000000000014330         mov        r8d, 0x4
0000000000014336         sub        r15, rbp
0000000000014339         mov        qword [rsp+0x68+var_60], r8
000000000001433e         cmp        r15, 0x4
0000000000014342         cmova      r15, r8
0000000000014346         lea        rdx, qword [rbp+r15]
000000000001434b         add        rbp, r13
000000000001434e         mov        qword [rsp+0x68+var_68], rdx
0000000000014352         call       j_getpid                                    ; getpid
0000000000014357         mov        rdx, qword [rsp+0x68+var_68]
000000000001435b         mov        dword [rsp+0x68+var_58], eax
000000000001435f         mov        ecx, r15d
0000000000014362         mov        rdi, rbp
0000000000014365         mov        rsi, r12
0000000000014368         mov        r8, qword [rsp+0x68+var_60]
000000000001436d         rep movsb  byte [rdi], byte [rsi]
000000000001436f         cmp        rdx, 0x7ff
0000000000014376         jg         loc_141c5

000000000001437c         sub        r14, rdx
000000000001437f         cmp        r14, 0x4
0000000000014383         cmova      r14, r8
0000000000014387         call       j_getppid                                   ; getppid
000000000001438c         mov        rdx, qword [rsp+0x68+var_68]
0000000000014390         mov        dword [rsp+0x68+var_58], eax
0000000000014394         mov        ecx, r14d
0000000000014397         mov        rsi, r12
000000000001439a         lea        rax, qword [r13+rdx]
000000000001439f         add        r14, rdx
00000000000143a2         cmp        r14, 0x7ff
00000000000143a9         mov        rdi, rax
00000000000143ac         rep movsb  byte [rdi], byte [rsi]
00000000000143ae         ja         loc_141c5

00000000000143b4         jmp        loc_1423f
00000000000143b9         align      64                                          ; End of unwind block (FDE at 0x1a83c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randread_set_handler:
00000000000143c0         mov        qword [rdi+8], rsi                          ; Begin of unwind block (FDE at 0x1a888)
00000000000143c4         ret
                        ; endp
00000000000143c5         align      16                                          ; End of unwind block (FDE at 0x1a888)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randread_set_handler_arg:
00000000000143d0         mov        qword [rdi+0x10], rsi                       ; Begin of unwind block (FDE at 0x1a89c)
00000000000143d4         ret
                        ; endp
00000000000143d5         align      32                                          ; End of unwind block (FDE at 0x1a89c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     randread:
00000000000143e0         push       r15                                         ; Begin of unwind block (FDE at 0x1a8b0), CODE XREF=randint_genmax+155
00000000000143e2         push       r14
00000000000143e4         push       r13
00000000000143e6         push       r12
00000000000143e8         mov        r12, rdi
00000000000143eb         push       rbp
00000000000143ec         push       rbx
00000000000143ed         mov        rbp, rdx
00000000000143f0         mov        rbx, rsi
00000000000143f3         sub        rsp, 0x18
00000000000143f7         mov        rcx, qword [rdi]
00000000000143fa         test       rcx, rcx
00000000000143fd         mov        qword [rsp+0x48+var_40], rcx
0000000000014402         je         loc_14468

0000000000014404         call       j___errno_location                          ; __errno_location
0000000000014409         mov        rcx, qword [rsp+0x48+var_40]
000000000001440e         mov        r13, rax
0000000000014411         jmp        loc_14436
0000000000014413         align      8

                     loc_14418:
0000000000014418         mov        rax, qword [r12]                            ; CODE XREF=randread+112
000000000001441c         mov        rdi, qword [r12+0x10]
0000000000014421         mov        eax, dword [rax]
0000000000014423         and        eax, 0x20
0000000000014426         cmovne     eax, edx
0000000000014429         mov        dword [r13], eax
000000000001442d         call       qword [r12+8]
0000000000014432         mov        rcx, qword [r12]

                     loc_14436:
0000000000014436         mov        rdx, rbp                                    ; argument "__n" for method j_fread_unlocked, CODE XREF=randread+49
0000000000014439         mov        rdi, rbx                                    ; argument "__ptr" for method j_fread_unlocked
000000000001443c         mov        esi, 0x1                                    ; argument "__size" for method j_fread_unlocked
0000000000014441         call       j_fread_unlocked                            ; fread_unlocked
0000000000014446         add        rbx, rax
0000000000014449         sub        rbp, rax
000000000001444c         mov        edx, dword [r13]
0000000000014450         jne        loc_14418

                     loc_14452:
0000000000014452         add        rsp, 0x18                                   ; CODE XREF=randread+366
0000000000014456         pop        rbx
0000000000014457         pop        rbp
0000000000014458         pop        r12
000000000001445a         pop        r13
000000000001445c         pop        r14
000000000001445e         pop        r15
0000000000014460         ret
                        ; endp
0000000000014461         align      8

                     loc_14468:
0000000000014468         mov        r14, qword [rdi+0x18]                       ; CODE XREF=randread+34
000000000001446c         lea        rax, qword [rdi+0x838]
0000000000014473         lea        r13, qword [rdi+0x20]
0000000000014477         mov        qword [rsp+0x48+var_40], rax
000000000001447c         cmp        rdx, r14
000000000001447f         jbe        loc_14562

                     loc_14485:
0000000000014485         mov        esi, 0x800                                  ; CODE XREF=randread+330
000000000001448a         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000001448d         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000014490         sub        rsi, r14
0000000000014493         add        rsi, qword [rsp+0x48+var_40]                ; argument "__src" for method j_memcpy
0000000000014498         add        rbx, r14
000000000001449b         sub        rbp, r14
000000000001449e         call       j_memcpy                                    ; memcpy
00000000000144a3         test       bl, 0x7
00000000000144a6         jne        loc_14510

00000000000144a8         cmp        rbp, 0x7ff
00000000000144af         jbe        loc_14553

00000000000144b5         lea        r15, qword [rbp-0x800]
00000000000144bc         mov        r14, r15
00000000000144bf         and        r14d, 0x7ff
00000000000144c6         jmp        loc_144dc
00000000000144c8         align      16

                     loc_144d0:
00000000000144d0         cmp        r15, r14                                    ; CODE XREF=randread+276
00000000000144d3         je         loc_14510

00000000000144d5         sub        r15, 0x800

                     loc_144dc:
00000000000144dc         mov        rsi, rbx                                    ; CODE XREF=randread+230
00000000000144df         mov        rdi, r13
00000000000144e2         add        rbx, 0x800
00000000000144e9         call       isaac_refill                                ; isaac_refill
00000000000144ee         test       r15, r15
00000000000144f1         mov        rbp, r15
00000000000144f4         jne        loc_144d0

00000000000144f6         mov        qword [r12+0x18], 0x0
00000000000144ff         add        rsp, 0x18
0000000000014503         pop        rbx
0000000000014504         pop        rbp
0000000000014505         pop        r12
0000000000014507         pop        r13
0000000000014509         pop        r14
000000000001450b         pop        r15
000000000001450d         ret
                        ; endp
000000000001450e         align      16

                     loc_14510:
0000000000014510         mov        rsi, qword [rsp+0x48+var_40]                ; CODE XREF=randread+198, randread+243
0000000000014515         mov        rdi, r13
0000000000014518         mov        r14d, 0x800
000000000001451e         call       isaac_refill                                ; isaac_refill
0000000000014523         cmp        rbp, 0x800
000000000001452a         ja         loc_14485

                     loc_14530:
0000000000014530         mov        r14d, 0x800                                 ; CODE XREF=randread+384

                     loc_14536:
0000000000014536         mov        rsi, qword [rsp+0x48+var_40]                ; argument "__src" for method j_memcpy, CODE XREF=randread+404
000000000001453b         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000001453e         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
0000000000014541         sub        r14, rbp
0000000000014544         call       j_memcpy                                    ; memcpy
0000000000014549         mov        qword [r12+0x18], r14
000000000001454e         jmp        loc_14452

                     loc_14553:
0000000000014553         mov        rsi, qword [rsp+0x48+var_40]                ; CODE XREF=randread+207
0000000000014558         mov        rdi, r13
000000000001455b         call       isaac_refill                                ; isaac_refill
0000000000014560         jmp        loc_14530

                     loc_14562:
0000000000014562         mov        r15, rax                                    ; CODE XREF=randread+159
0000000000014565         sub        r15, r14
0000000000014568         lea        rax, qword [r15+0x800]
000000000001456f         mov        qword [rsp+0x48+var_40], rax
0000000000014574         jmp        loc_14536
0000000000014576         align      128                                         ; End of unwind block (FDE at 0x1a8b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randread_free:
0000000000014580         push       rbp                                         ; Begin of unwind block (FDE at 0x1a914), CODE XREF=randint_all_free+16
0000000000014581         push       rbx
0000000000014582         mov        rdx, 0xffffffffffffffff
0000000000014589         mov        rbx, rdi
000000000001458c         mov        esi, 0x1038
0000000000014591         sub        rsp, 0x8
0000000000014595         mov        rbp, qword [rdi]
0000000000014598         call       j___explicit_bzero_chk                      ; __explicit_bzero_chk
000000000001459d         mov        rdi, rbx
00000000000145a0         call       sub_2c80                                    ; sub_2c80
00000000000145a5         test       rbp, rbp
00000000000145a8         je         loc_145c0

00000000000145aa         add        rsp, 0x8
00000000000145ae         mov        rdi, rbp
00000000000145b1         pop        rbx
00000000000145b2         pop        rbp
00000000000145b3         jmp        rpl_fclose                                  ; rpl_fclose
00000000000145b8         align      64

                     loc_145c0:
00000000000145c0         add        rsp, 0x8                                    ; CODE XREF=randread_free+40
00000000000145c4         xor        eax, eax
00000000000145c6         pop        rbx
00000000000145c7         pop        rbp
00000000000145c8         ret
                        ; endp
00000000000145c9         align      16                                          ; End of unwind block (FDE at 0x1a914)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     isaac_refill:
00000000000145d0         mov        rax, qword [rdi+0x810]                      ; Begin of unwind block (FDE at 0x1a94c), CODE XREF=randread+265, randread+318, randread+379
00000000000145d7         mov        rdx, qword [rdi+0x800]
00000000000145de         lea        r9, qword [rdi+0x400]
00000000000145e5         lea        rcx, qword [rax+1]
00000000000145e9         mov        rax, rdi
00000000000145ec         mov        qword [rdi+0x810], rcx
00000000000145f3         add        rcx, qword [rdi+0x808]
00000000000145fa         nop        word [rax+rax]

                     loc_14600:
0000000000014600         mov        r8, rdx                                     ; CODE XREF=isaac_refill+329
0000000000014603         shl        r8, 0x15
0000000000014607         xor        rdx, r8
000000000001460a         mov        r8, qword [rax]
000000000001460d         not        rdx
0000000000014610         add        rdx, qword [rax+0x400]
0000000000014617         mov        r10, r8
000000000001461a         and        r10d, 0x7f8
0000000000014621         mov        r11, qword [rdi+r10]
0000000000014625         mov        r10, rdx
0000000000014628         shr        r10, 0x5
000000000001462c         add        r11, rdx
000000000001462f         xor        rdx, r10
0000000000014632         add        rcx, r11
0000000000014635         mov        qword [rax], rcx
0000000000014638         shr        rcx, 0x8
000000000001463c         and        ecx, 0x7f8
0000000000014642         mov        r11, qword [rdi+rcx]
0000000000014646         add        r11, r8
0000000000014649         mov        qword [rsi], r11
000000000001464c         add        rdx, qword [rax+0x408]
0000000000014653         mov        rcx, qword [rax+8]
0000000000014657         mov        r10, rdx
000000000001465a         mov        rdx, rcx
000000000001465d         and        edx, 0x7f8
0000000000014663         mov        r8, qword [rdi+rdx]
0000000000014667         mov        rdx, r10
000000000001466a         shl        rdx, 0xc
000000000001466e         xor        rdx, r10
0000000000014671         add        r8, r10
0000000000014674         add        r8, r11
0000000000014677         mov        qword [rax+8], r8
000000000001467b         shr        r8, 0x8
000000000001467f         and        r8d, 0x7f8
0000000000014686         add        rcx, qword [rdi+r8]
000000000001468a         mov        qword [rsi+8], rcx
000000000001468e         mov        r8, qword [rax+0x10]
0000000000014692         mov        r11, rcx
0000000000014695         add        rdx, qword [rax+0x410]
000000000001469c         mov        rcx, r8
000000000001469f         and        ecx, 0x7f8
00000000000146a5         mov        r10, qword [rdi+rcx]
00000000000146a9         add        r10, rdx
00000000000146ac         mov        rcx, r10
00000000000146af         add        rcx, r11
00000000000146b2         mov        qword [rax+0x10], rcx
00000000000146b6         shr        rcx, 0x8
00000000000146ba         and        ecx, 0x7f8
00000000000146c0         mov        r10, qword [rdi+rcx]
00000000000146c4         mov        rcx, rdx
00000000000146c7         shr        rcx, 0x21
00000000000146cb         xor        rdx, rcx
00000000000146ce         add        r10, r8
00000000000146d1         mov        qword [rsi+0x10], r10
00000000000146d5         mov        rcx, qword [rax+0x18]
00000000000146d9         add        rdx, qword [rax+0x418]
00000000000146e0         mov        r8, rcx
00000000000146e3         and        r8d, 0x7f8
00000000000146ea         mov        r11, qword [rdi+r8]
00000000000146ee         add        r11, rdx
00000000000146f1         mov        r8, r11
00000000000146f4         add        r8, r10
00000000000146f7         add        rax, 0x20
00000000000146fb         add        rsi, 0x20
00000000000146ff         mov        qword [rax-8], r8
0000000000014703         shr        r8, 0x8
0000000000014707         and        r8d, 0x7f8
000000000001470e         add        rcx, qword [rdi+r8]
0000000000014712         mov        qword [rsi-8], rcx
0000000000014716         cmp        rax, r9
0000000000014719         jb         loc_14600

000000000001471f         lea        r9, qword [rdi+0x800]
0000000000014726         nop        word [cs:rax+rax]

                     loc_14730:
0000000000014730         mov        r8, rdx                                     ; CODE XREF=isaac_refill+633
0000000000014733         shl        r8, 0x15
0000000000014737         xor        rdx, r8
000000000001473a         mov        r8, qword [rax]
000000000001473d         not        rdx
0000000000014740         add        rdx, qword [rax-0x400]
0000000000014747         mov        r10, r8
000000000001474a         and        r10d, 0x7f8
0000000000014751         mov        r11, qword [rdi+r10]
0000000000014755         mov        r10, rdx
0000000000014758         shr        r10, 0x5
000000000001475c         add        r11, rdx
000000000001475f         xor        rdx, r10
0000000000014762         add        rcx, r11
0000000000014765         mov        qword [rax], rcx
0000000000014768         shr        rcx, 0x8
000000000001476c         and        ecx, 0x7f8
0000000000014772         mov        r11, qword [rdi+rcx]
0000000000014776         add        r11, r8
0000000000014779         mov        qword [rsi], r11
000000000001477c         add        rdx, qword [rax-0x3f8]
0000000000014783         mov        rcx, qword [rax+8]
0000000000014787         mov        r10, rdx
000000000001478a         mov        rdx, rcx
000000000001478d         and        edx, 0x7f8
0000000000014793         mov        r8, qword [rdi+rdx]
0000000000014797         mov        rdx, r10
000000000001479a         shl        rdx, 0xc
000000000001479e         xor        rdx, r10
00000000000147a1         add        r8, r10
00000000000147a4         add        r8, r11
00000000000147a7         mov        qword [rax+8], r8
00000000000147ab         shr        r8, 0x8
00000000000147af         and        r8d, 0x7f8
00000000000147b6         add        rcx, qword [rdi+r8]
00000000000147ba         mov        qword [rsi+8], rcx
00000000000147be         mov        r8, qword [rax+0x10]
00000000000147c2         mov        r11, rcx
00000000000147c5         add        rdx, qword [rax-0x3f0]
00000000000147cc         mov        rcx, r8
00000000000147cf         and        ecx, 0x7f8
00000000000147d5         mov        r10, qword [rdi+rcx]
00000000000147d9         add        r10, rdx
00000000000147dc         mov        rcx, r10
00000000000147df         add        rcx, r11
00000000000147e2         mov        qword [rax+0x10], rcx
00000000000147e6         shr        rcx, 0x8
00000000000147ea         and        ecx, 0x7f8
00000000000147f0         mov        r10, qword [rdi+rcx]
00000000000147f4         mov        rcx, rdx
00000000000147f7         shr        rcx, 0x21
00000000000147fb         xor        rdx, rcx
00000000000147fe         add        r10, r8
0000000000014801         mov        qword [rsi+0x10], r10
0000000000014805         mov        rcx, qword [rax+0x18]
0000000000014809         add        rdx, qword [rax-0x3e8]
0000000000014810         mov        r8, rcx
0000000000014813         and        r8d, 0x7f8
000000000001481a         mov        r11, qword [rdi+r8]
000000000001481e         add        r11, rdx
0000000000014821         mov        r8, r11
0000000000014824         add        r8, r10
0000000000014827         add        rax, 0x20
000000000001482b         add        rsi, 0x20
000000000001482f         mov        qword [rax-8], r8
0000000000014833         shr        r8, 0x8
0000000000014837         and        r8d, 0x7f8
000000000001483e         add        rcx, qword [rdi+r8]
0000000000014842         mov        qword [rsi-8], rcx
0000000000014846         cmp        rax, r9
0000000000014849         jb         loc_14730

000000000001484f         mov        qword [rdi+0x800], rdx
0000000000014856         mov        qword [rdi+0x808], rcx
000000000001485d         ret
                        ; endp
000000000001485e         align      32                                          ; End of unwind block (FDE at 0x1a94c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     isaac_seed:
0000000000014860         push       r13                                         ; Begin of unwind block (FDE at 0x1a960), CODE XREF=randread_new+312
0000000000014862         push       r12
0000000000014864         lea        r12, qword [rdi+0x800]
000000000001486b         push       rbp
000000000001486c         mov        rdx, rdi
000000000001486f         push       rbx
0000000000014870         mov        rax, rdi
0000000000014873         movabs     rcx, 0x98f5704f6c44c0ab
000000000001487d         movabs     r10, 0xae985bf2cbfc89ed
0000000000014887         movabs     rbp, 0x48fe4a0fa5a09315
0000000000014891         movabs     rsi, 0x82f053db8355e0ce
000000000001489b         movabs     r8, 0xb29b2e824a595524
00000000000148a5         movabs     rbx, 0x8c0ea5053d4712a0
00000000000148af         movabs     r11, 0xb9f8b322c73ac862
00000000000148b9         movabs     r9, 0x647c4677a2884b7c
00000000000148c3         nop        dword [rax+rax]

                     loc_148c8:
00000000000148c8         add        rsi, qword [rax+0x20]                       ; CODE XREF=isaac_seed+314
00000000000148cc         add        rcx, qword [rax+0x38]
00000000000148d0         mov        r13, qword [rax]
00000000000148d3         add        rbp, qword [rax+0x28]
00000000000148d7         add        r10, qword [rax+0x30]
00000000000148db         sub        r13, rsi
00000000000148de         add        r9, r13
00000000000148e1         mov        r13, rcx
00000000000148e4         shr        r13, 0x9
00000000000148e8         add        rcx, r9
00000000000148eb         xor        rbp, r13
00000000000148ee         mov        r13, qword [rax+8]
00000000000148f2         sub        r13, rbp
00000000000148f5         add        r11, r13
00000000000148f8         mov        r13, r9
00000000000148fb         shl        r13, 0x9
00000000000148ff         add        r9, r11
0000000000014902         xor        r10, r13
0000000000014905         mov        r13, qword [rax+0x10]
0000000000014909         sub        r13, r10
000000000001490c         add        rbx, r13
000000000001490f         mov        r13, r11
0000000000014912         shr        r13, 0x17
0000000000014916         add        r11, rbx
0000000000014919         xor        rcx, r13
000000000001491c         mov        r13, qword [rax+0x18]
0000000000014920         sub        r13, rcx
0000000000014923         add        r8, r13
0000000000014926         mov        r13, rbx
0000000000014929         shl        r13, 0xf
000000000001492d         add        rbx, r8
0000000000014930         xor        r9, r13
0000000000014933         mov        r13, r8
0000000000014936         sub        rsi, r9
0000000000014939         shr        r13, 0xe
000000000001493d         mov        qword [rax], r9
0000000000014940         xor        r11, r13
0000000000014943         mov        r13, rsi
0000000000014946         add        r8, rsi
0000000000014949         sub        rbp, r11
000000000001494c         shl        r13, 0x14
0000000000014950         mov        qword [rax+8], r11
0000000000014954         xor        rbx, r13
0000000000014957         lea        r13, qword [rsi+rbp]
000000000001495b         mov        rsi, rbp
000000000001495e         sub        r10, rbx
0000000000014961         shr        rsi, 0x11
0000000000014965         mov        qword [rax+0x10], rbx
0000000000014969         xor        r8, rsi
000000000001496c         mov        rsi, r10
000000000001496f         add        rbp, r10
0000000000014972         sub        rcx, r8
0000000000014975         shl        rsi, 0xe
0000000000014979         mov        qword [rax+0x18], r8
000000000001497d         xor        rsi, r13
0000000000014980         add        r10, rcx
0000000000014983         mov        qword [rax+0x28], rbp
0000000000014987         mov        qword [rax+0x20], rsi
000000000001498b         mov        qword [rax+0x30], r10
000000000001498f         add        rax, 0x40
0000000000014993         mov        qword [rax-8], rcx
0000000000014997         cmp        r12, rax
000000000001499a         jne        loc_148c8

                     loc_149a0:
00000000000149a0         add        rsi, qword [rdx+0x20]                       ; CODE XREF=isaac_seed+530
00000000000149a4         add        rcx, qword [rdx+0x38]
00000000000149a8         mov        r12, qword [rdx]
00000000000149ab         add        rbp, qword [rdx+0x28]
00000000000149af         add        r10, qword [rdx+0x30]
00000000000149b3         sub        r12, rsi
00000000000149b6         add        r9, r12
00000000000149b9         mov        r12, rcx
00000000000149bc         shr        r12, 0x9
00000000000149c0         add        rcx, r9
00000000000149c3         xor        rbp, r12
00000000000149c6         mov        r12, qword [rdx+8]
00000000000149ca         sub        r12, rbp
00000000000149cd         add        r11, r12
00000000000149d0         mov        r12, r9
00000000000149d3         shl        r12, 0x9
00000000000149d7         add        r9, r11
00000000000149da         xor        r10, r12
00000000000149dd         mov        r12, qword [rdx+0x10]
00000000000149e1         sub        r12, r10
00000000000149e4         add        rbx, r12
00000000000149e7         mov        r12, r11
00000000000149ea         shr        r12, 0x17
00000000000149ee         add        r11, rbx
00000000000149f1         xor        rcx, r12
00000000000149f4         mov        r12, qword [rdx+0x18]
00000000000149f8         sub        r12, rcx
00000000000149fb         add        r8, r12
00000000000149fe         mov        r12, rbx
0000000000014a01         shl        r12, 0xf
0000000000014a05         add        rbx, r8
0000000000014a08         xor        r9, r12
0000000000014a0b         mov        r12, r8
0000000000014a0e         sub        rsi, r9
0000000000014a11         shr        r12, 0xe
0000000000014a15         mov        qword [rdx], r9
0000000000014a18         xor        r11, r12
0000000000014a1b         mov        r12, rsi
0000000000014a1e         add        r8, rsi
0000000000014a21         sub        rbp, r11
0000000000014a24         shl        r12, 0x14
0000000000014a28         mov        qword [rdx+8], r11
0000000000014a2c         xor        rbx, r12
0000000000014a2f         lea        r12, qword [rsi+rbp]
0000000000014a33         mov        rsi, rbp
0000000000014a36         sub        r10, rbx
0000000000014a39         shr        rsi, 0x11
0000000000014a3d         mov        qword [rdx+0x10], rbx
0000000000014a41         xor        r8, rsi
0000000000014a44         mov        rsi, r10
0000000000014a47         add        rbp, r10
0000000000014a4a         sub        rcx, r8
0000000000014a4d         shl        rsi, 0xe
0000000000014a51         mov        qword [rdx+0x18], r8
0000000000014a55         xor        rsi, r12
0000000000014a58         add        r10, rcx
0000000000014a5b         mov        qword [rdx+0x28], rbp
0000000000014a5f         mov        qword [rdx+0x20], rsi
0000000000014a63         mov        qword [rdx+0x30], r10
0000000000014a67         add        rdx, 0x40
0000000000014a6b         mov        qword [rdx-8], rcx
0000000000014a6f         cmp        rax, rdx
0000000000014a72         jne        loc_149a0

0000000000014a78         pop        rbx
0000000000014a79         mov        qword [rdi+0x810], 0x0
0000000000014a84         mov        qword [rdi+0x808], 0x0
0000000000014a8f         pop        rbp
0000000000014a90         mov        qword [rdi+0x800], 0x0
0000000000014a9b         pop        r12
0000000000014a9d         pop        r13
0000000000014a9f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dup_safer:
0000000000014aa0         mov        edx, 0x3                                    ; End of unwind block (FDE at 0x1a960), Begin of unwind block (FDE at 0x1a994), CODE XREF=fd_safer+17, fopen_safer+50
0000000000014aa5         xor        esi, esi
0000000000014aa7         xor        eax, eax
0000000000014aa9         jmp        rpl_fcntl                                   ; rpl_fcntl
                        ; endp
0000000000014aae         align      16                                          ; End of unwind block (FDE at 0x1a994)

                     rpl_fclose:
0000000000014ab0         push       r12                                         ; Begin of unwind block (FDE at 0x1a9ac), CODE XREF=close_stream+21, randread_free+51, fopen_safer+65, fopen_safer+134
0000000000014ab2         push       rbp
0000000000014ab3         push       rbx
0000000000014ab4         mov        rbx, rdi
0000000000014ab7         call       j_fileno                                    ; fileno
0000000000014abc         test       eax, eax
0000000000014abe         mov        rdi, rbx
0000000000014ac1         js         loc_14b17

0000000000014ac3         call       j___freading                                ; __freading
0000000000014ac8         test       eax, eax
0000000000014aca         jne        loc_14af8

                     loc_14acc:
0000000000014acc         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
0000000000014acf         call       rpl_fflush                                  ; rpl_fflush
0000000000014ad4         test       eax, eax
0000000000014ad6         je         loc_14b14

0000000000014ad8         call       j___errno_location                          ; __errno_location
0000000000014add         mov        r12d, dword [rax]
0000000000014ae0         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000014ae3         mov        rbp, rax
0000000000014ae6         call       j_fclose                                    ; fclose
0000000000014aeb         test       r12d, r12d
0000000000014aee         jne        loc_14b20

                     loc_14af0:
0000000000014af0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000014af1         pop        rbp
0000000000014af2         pop        r12
0000000000014af4         ret
                        ; endp
0000000000014af5         align      8

                     loc_14af8:
0000000000014af8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
0000000000014afb         call       j_fileno                                    ; fileno
0000000000014b00         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000014b02         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000014b07         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000014b09         call       j_lseek                                     ; lseek
0000000000014b0e         cmp        rax, 0xffffffffffffffff
0000000000014b12         jne        loc_14acc

                     loc_14b14:
0000000000014b14         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_14b17:
0000000000014b17         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000014b18         pop        rbp
0000000000014b19         pop        r12
0000000000014b1b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_14b20:
0000000000014b20         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000014b24         mov        eax, 0xffffffff
0000000000014b29         jmp        loc_14af0
0000000000014b2b         align      16                                          ; End of unwind block (FDE at 0x1a9ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     rpl_fcntl:
0000000000014b30         push       r12                                         ; Begin of unwind block (FDE at 0x1a9e4), CODE XREF=fts_build+2314, opendir_safer+62, dup_safer+9
0000000000014b32         push       rbp
0000000000014b33         mov        ebp, edi
0000000000014b35         push       rbx
0000000000014b36         sub        rsp, 0x50
0000000000014b3a         mov        rax, qword [fs:0x28]
0000000000014b43         mov        qword [rsp+0x68+var_50], rax
0000000000014b48         xor        eax, eax
0000000000014b4a         lea        rax, qword [rsp+0x68+arg_0]
0000000000014b4f         test       esi, esi
0000000000014b51         mov        qword [rsp+0x68+var_38], rdx
0000000000014b56         mov        qword [rsp+0x68+var_30], rcx
0000000000014b5b         mov        qword [rsp+0x68+var_28], r8
0000000000014b60         mov        qword [rsp+0x68+var_60], rax
0000000000014b65         lea        rax, qword [rsp+0x68+var_48]
0000000000014b6a         mov        qword [rsp+0x68+var_20], r9
0000000000014b6f         mov        dword [rsp+0x68+var_68], 0x10
0000000000014b76         mov        qword [rsp+0x68+var_58], rax
0000000000014b7b         je         loc_14d82

0000000000014b81         cmp        esi, 0x406
0000000000014b87         jne        loc_14bd0

0000000000014b89         mov        rax, qword [rsp+0x68+var_58]
0000000000014b8e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
0000000000014b95         mov        dword [rsp+0x68+var_68], 0x18
0000000000014b9c         mov        r12d, dword [rax+0x10]
0000000000014ba0         mov        edx, r12d
0000000000014ba3         js         loc_14cd3

0000000000014ba9         xor        eax, eax
0000000000014bab         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
0000000000014bb0         call       j_fcntl                                     ; fcntl
0000000000014bb5         test       eax, eax
0000000000014bb7         mov        ebx, eax
0000000000014bb9         js         loc_14d48

                     loc_14bbf:
0000000000014bbf         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
0000000000014bc9         jmp        loc_14c10
0000000000014bcb         align      16

                     loc_14bd0:
0000000000014bd0         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
0000000000014bd3         je         loc_14c00

0000000000014bd5         jg         loc_14c30

0000000000014bd7         cmp        esi, 0x4
0000000000014bda         je         loc_14cb0

0000000000014be0         jg         loc_14ca0

0000000000014be6         cmp        esi, 0x2
0000000000014be9         je         loc_14cb0

0000000000014bef         jg         loc_14c00

0000000000014bf1         cmp        esi, 0x1
0000000000014bf4         jne        loc_14c58

0000000000014bf6         nop        word [cs:rax+rax]

                     loc_14c00:
0000000000014c00         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
0000000000014c02         xor        eax, eax
0000000000014c04         call       j_fcntl                                     ; fcntl
0000000000014c09         mov        ebx, eax
0000000000014c0b         nop        dword [rax+rax]

                     loc_14c10:
0000000000014c10         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
0000000000014c15         xor        rcx, qword [fs:0x28]
0000000000014c1e         mov        eax, ebx
0000000000014c20         jne        loc_14d7d

0000000000014c26         add        rsp, 0x50
0000000000014c2a         pop        rbx
0000000000014c2b         pop        rbp
0000000000014c2c         pop        r12
0000000000014c2e         ret
                        ; endp
0000000000014c2f         align      16

                     loc_14c30:
0000000000014c30         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
0000000000014c36         jg         loc_14c80

0000000000014c38         cmp        esi, 0x406
0000000000014c3e         jge        loc_14cb0

0000000000014c40         cmp        esi, 0x401
0000000000014c46         je         loc_14c00

0000000000014c48         cmp        esi, 0x402
0000000000014c4e         je         loc_14cb0

0000000000014c50         cmp        esi, 0x400
0000000000014c56         je         loc_14cb0

                     loc_14c58:
0000000000014c58         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
0000000000014c5b         cmp        eax, 0x2f
0000000000014c5e         ja         loc_14d9a

0000000000014c64         add        rax, qword [rsp+0x68+var_58]

                     loc_14c69:
0000000000014c69         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
0000000000014c6c         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000014c6e         xor        eax, eax
0000000000014c70         call       j_fcntl                                     ; fcntl
0000000000014c75         mov        ebx, eax
0000000000014c77         jmp        loc_14c10
0000000000014c79         align      128

                     loc_14c80:
0000000000014c80         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
0000000000014c86         je         loc_14cb0

0000000000014c88         jl         loc_14c00

0000000000014c8e         cmp        esi, 0x40a
0000000000014c94         jne        loc_14c58

0000000000014c96         jmp        loc_14c00
0000000000014c9b         align      32

                     loc_14ca0:
0000000000014ca0         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
0000000000014ca3         je         loc_14c00

0000000000014ca9         jg         loc_14cb0

0000000000014cab         cmp        esi, 0x8
0000000000014cae         jne        loc_14c58

                     loc_14cb0:
0000000000014cb0         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
0000000000014cb3         cmp        eax, 0x2f
0000000000014cb6         ja         loc_14da4

0000000000014cbc         add        rax, qword [rsp+0x68+var_58]

                     loc_14cc1:
0000000000014cc1         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
0000000000014cc3         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000014cc5         xor        eax, eax
0000000000014cc7         call       j_fcntl                                     ; fcntl
0000000000014ccc         mov        ebx, eax
0000000000014cce         jmp        loc_14c10

                     loc_14cd3:
0000000000014cd3         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
0000000000014cd5         xor        eax, eax
0000000000014cd7         call       j_fcntl                                     ; fcntl
0000000000014cdc         test       eax, eax
0000000000014cde         mov        ebx, eax
0000000000014ce0         js         loc_14c10

0000000000014ce6         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000014ced         jne        loc_14c10

                     loc_14cf3:
0000000000014cf3         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
0000000000014cf5         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
0000000000014cfa         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
0000000000014cfc         call       j_fcntl                                     ; fcntl
0000000000014d01         test       eax, eax
0000000000014d03         js         loc_14d21

0000000000014d05         or         eax, 0x1
0000000000014d08         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
0000000000014d0d         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
0000000000014d0f         mov        edx, eax
0000000000014d11         xor        eax, eax
0000000000014d13         call       j_fcntl                                     ; fcntl
0000000000014d18         cmp        eax, 0xffffffff
0000000000014d1b         jne        loc_14c10

                     loc_14d21:
0000000000014d21         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
0000000000014d26         mov        r12d, dword [rax]
0000000000014d29         mov        rbp, rax
0000000000014d2c         mov        edi, ebx                                    ; argument "__fd" for method j_close
0000000000014d2e         call       j_close                                     ; close
0000000000014d33         mov        ebx, 0xffffffff
0000000000014d38         mov        dword [rbp], r12d
0000000000014d3c         jmp        loc_14c10
0000000000014d41         align      8

                     loc_14d48:
0000000000014d48         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
0000000000014d4d         cmp        dword [rax], 0x16
0000000000014d50         jne        loc_14bbf

0000000000014d56         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000014d58         xor        eax, eax
0000000000014d5a         mov        edx, r12d
0000000000014d5d         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000014d5f         call       j_fcntl                                     ; fcntl
0000000000014d64         test       eax, eax
0000000000014d66         mov        ebx, eax
0000000000014d68         js         loc_14c10

0000000000014d6e         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000014d78         jmp        loc_14cf3

                     loc_14d7d:
0000000000014d7d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_14d82:
0000000000014d82         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
0000000000014d87         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000014d89         mov        edx, dword [rax+0x10]
0000000000014d8c         xor        eax, eax
0000000000014d8e         call       j_fcntl                                     ; fcntl
0000000000014d93         mov        ebx, eax
0000000000014d95         jmp        loc_14c10

                     loc_14d9a:
0000000000014d9a         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
0000000000014d9f         jmp        loc_14c69

                     loc_14da4:
0000000000014da4         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
0000000000014da9         jmp        loc_14cc1
0000000000014dae         align      16                                          ; End of unwind block (FDE at 0x1a9e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fopen_safer:
0000000000014db0         push       r12                                         ; Begin of unwind block (FDE at 0x1aa1c), CODE XREF=randread_new+57
0000000000014db2         push       rbp
0000000000014db3         mov        rbp, rsi
0000000000014db6         push       rbx
0000000000014db7         call       j_fopen                                     ; fopen
0000000000014dbc         test       rax, rax
0000000000014dbf         mov        rbx, rax
0000000000014dc2         je         loc_14dd1

0000000000014dc4         mov        rdi, rax                                    ; argument "__stream" for method j_fileno
0000000000014dc7         call       j_fileno                                    ; fileno
0000000000014dcc         cmp        eax, 0x2
0000000000014dcf         jbe        loc_14de0

                     loc_14dd1:
0000000000014dd1         mov        rax, rbx                                    ; CODE XREF=fopen_safer+18, fopen_safer+91, fopen_safer+115, fopen_safer+145
0000000000014dd4         pop        rbx
0000000000014dd5         pop        rbp
0000000000014dd6         pop        r12
0000000000014dd8         ret
                        ; endp
0000000000014dd9         align      32

                     loc_14de0:
0000000000014de0         mov        edi, eax                                    ; CODE XREF=fopen_safer+31
0000000000014de2         call       dup_safer                                   ; dup_safer
0000000000014de7         test       eax, eax
0000000000014de9         mov        r12d, eax
0000000000014dec         js         loc_14e28

0000000000014dee         mov        rdi, rbx
0000000000014df1         call       rpl_fclose                                  ; rpl_fclose
0000000000014df6         test       eax, eax
0000000000014df8         jne        loc_14e0d

0000000000014dfa         mov        rsi, rbp                                    ; argument "__modes" for method j_fdopen
0000000000014dfd         mov        edi, r12d                                   ; argument "__fd" for method j_fdopen
0000000000014e00         call       j_fdopen                                    ; fdopen
0000000000014e05         test       rax, rax
0000000000014e08         mov        rbx, rax
0000000000014e0b         jne        loc_14dd1

                     loc_14e0d:
0000000000014e0d         call       j___errno_location                          ; __errno_location, CODE XREF=fopen_safer+72
0000000000014e12         mov        ebp, dword [rax]
0000000000014e14         mov        rbx, rax
0000000000014e17         mov        edi, r12d                                   ; argument "__fd" for method j_close
0000000000014e1a         call       j_close                                     ; close
0000000000014e1f         mov        dword [rbx], ebp
0000000000014e21         xor        ebx, ebx
0000000000014e23         jmp        loc_14dd1
0000000000014e25         align      8

                     loc_14e28:
0000000000014e28         call       j___errno_location                          ; __errno_location, CODE XREF=fopen_safer+60
0000000000014e2d         mov        r12d, dword [rax]
0000000000014e30         mov        rbp, rax
0000000000014e33         mov        rdi, rbx
0000000000014e36         call       rpl_fclose                                  ; rpl_fclose
0000000000014e3b         xor        ebx, ebx
0000000000014e3d         mov        dword [rbp], r12d
0000000000014e41         jmp        loc_14dd1
0000000000014e43         align      16                                          ; End of unwind block (FDE at 0x1aa1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
0000000000014e50         push       r15                                         ; Begin of unwind block (FDE at 0x1aa4c), DATA XREF=_start+22
0000000000014e52         push       r14
0000000000014e54         mov        r15, rdx
0000000000014e57         push       r13
0000000000014e59         push       r12
0000000000014e5b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000014e62         push       rbp
0000000000014e63         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
0000000000014e6a         push       rbx
0000000000014e6b         mov        r13d, edi
0000000000014e6e         mov        r14, rsi
0000000000014e71         sub        rbp, r12
0000000000014e74         sub        rsp, 0x8
0000000000014e78         sar        rbp, 0x3
0000000000014e7c         call       _init                                       ; _init
0000000000014e81         test       rbp, rbp
0000000000014e84         je         loc_14ea6

0000000000014e86         xor        ebx, ebx
0000000000014e88         nop        dword [rax+rax]

                     loc_14e90:
0000000000014e90         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
0000000000014e93         mov        rsi, r14
0000000000014e96         mov        edi, r13d
0000000000014e99         call       qword [r12+rbx*8]
0000000000014e9d         add        rbx, 0x1
0000000000014ea1         cmp        rbp, rbx
0000000000014ea4         jne        loc_14e90

                     loc_14ea6:
0000000000014ea6         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
0000000000014eaa         pop        rbx
0000000000014eab         pop        rbp
0000000000014eac         pop        r12
0000000000014eae         pop        r13
0000000000014eb0         pop        r14
0000000000014eb2         pop        r15
0000000000014eb4         ret
                        ; endp
0000000000014eb5         align      64                                          ; End of unwind block (FDE at 0x1aa4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
0000000000014ec0         ret                                                    ; Begin of unwind block (FDE at 0x1aa94), DATA XREF=_start+15
                        ; endp
0000000000014ec2         align      16                                          ; End of unwind block (FDE at 0x1aa94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
0000000000014ed0         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x1aaac), __dso_handle, CODE XREF=main+109
0000000000014ed7         xor        esi, esi
0000000000014ed9         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
0000000000014ede         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x1aaac)
0000000000014edf         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x14ee0; 0x14ee9[ (9 bytes)
        ; File offset : [85728; 85737[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
0000000000014ee0         sub        rsp, 0x8
0000000000014ee4         add        rsp, 0x8
0000000000014ee8         ret
                        ; endp
0000000000014ee9         db  0x00 ; '.'
0000000000014eea         db  0x00 ; '.'
0000000000014eeb         db  0x00 ; '.'
0000000000014eec         db  0x00 ; '.'
0000000000014eed         db  0x00 ; '.'
0000000000014eee         db  0x00 ; '.'
0000000000014eef         db  0x00 ; '.'
0000000000014ef0         db  0x00 ; '.'
0000000000014ef1         db  0x00 ; '.'
0000000000014ef2         db  0x00 ; '.'
0000000000014ef3         db  0x00 ; '.'
0000000000014ef4         db  0x00 ; '.'
0000000000014ef5         db  0x00 ; '.'
0000000000014ef6         db  0x00 ; '.'
0000000000014ef7         db  0x00 ; '.'
0000000000014ef8         db  0x00 ; '.'
0000000000014ef9         db  0x00 ; '.'
0000000000014efa         db  0x00 ; '.'
0000000000014efb         db  0x00 ; '.'
0000000000014efc         db  0x00 ; '.'
0000000000014efd         db  0x00 ; '.'
0000000000014efe         db  0x00 ; '.'
0000000000014eff         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x14f00; 0x174d9[ (9689 bytes)
        ; File offset : [85760; 95449[ (9689 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
0000000000014f00         db  0x01 ; '.'
0000000000014f01         db  0x00 ; '.'
0000000000014f02         db  0x02 ; '.'
0000000000014f03         db  0x00 ; '.'
                     aCoreutils831sr:
0000000000014f04         db         "../coreutils-8.31/src/mv.c", 0             ; DATA XREF=main+1703, do_move+256
                     aValidstatusSta:
0000000000014f1f         db         "VALID_STATUS (status)", 0                  ; DATA XREF=do_move+263
0000000000014f35         db  0x6d ; 'm'                                         ; DATA XREF=main+600, usage+459, usage+780, usage+964, usage+983, usage+1017
0000000000014f36         db  0x76 ; 'v'
0000000000014f37         db  0x00 ; '.'
0000000000014f38         db  0x5b ; '['                                         ; DATA XREF=usage+471
0000000000014f39         db  0x00 ; '.'
                     aTestInvocation:
0000000000014f3a         db         "test invocation", 0                        ; DATA XREF=usage+510
                     aMulticallInvoc:
0000000000014f4a         db         "Multi-call invocation", 0                  ; DATA XREF=usage+558
                     aSha224sum:
0000000000014f60         db         "sha224sum", 0                              ; DATA XREF=usage+575
                     aSha2Utilities:
0000000000014f6a         db         "sha2 utilities", 0                         ; DATA XREF=usage+587
                     aSha256sum:
0000000000014f79         db         "sha256sum", 0                              ; DATA XREF=usage+478
                     aSha384sum:
0000000000014f83         db         "sha384sum", 0                              ; DATA XREF=usage+522
                     aSha512sum:
0000000000014f8d         db         "sha512sum", 0                              ; DATA XREF=usage+546
                     aNsOnlineHelpSn:
0000000000014f97         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+666
0000000000014fae         db  0x47 ; 'G'                                         ; DATA XREF=main+593, usage+694, usage+887, emit_bug_reporting_address+68
0000000000014faf         db  0x4e ; 'N'
0000000000014fb0         db  0x55 ; 'U'
0000000000014fb1         db  0x20 ; ' '
                     aCoreutils:
0000000000014fb2         db         "coreutils", 0                              ; DATA XREF=main+78, main+90, usage+534
0000000000014fbc         db  0x65 ; 'e'                                         ; DATA XREF=usage+733, usage+926
0000000000014fbd         db  0x6e ; 'n'
0000000000014fbe         db  0x5f ; '_'
0000000000014fbf         db  0x00 ; '.'
                     aFullDocumentat:
0000000000014fc0         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+761, usage+950
                     aUsrlocalsharel:
0000000000014fdb         db         "/usr/local/share/locale", 0                ; DATA XREF=main+71
                     aFailedToAccess:
0000000000014ff3         db         "failed to access %s", 0                    ; DATA XREF=main+1783, main+1848
                     aTargetSIsNotAD:
0000000000015007         db         "target %s is not a directory", 0           ; DATA XREF=main+706, main+1654
                     aDavidMackenzie:
0000000000015024         db         "David MacKenzie", 0                        ; DATA XREF=main+578
                     aMikeParker:
0000000000015034         db         "Mike Parker", 0                            ; DATA XREF=main+585
                     aJimMeyering:
0000000000015040         db         "Jim Meyering", 0                           ; DATA XREF=main+555
                     aBfintuvstz:
000000000001504d         db         "bfint:uvS:TZ", 0                           ; DATA XREF=main+367
                     aMissingFileOpe:
000000000001505a         db         "missing file operand", 0                   ; DATA XREF=main+1630
                     aExtraOperandS:
000000000001506f         db         "extra operand %s", 0                       ; DATA XREF=main+1129
                     a2Nfiles:
0000000000015080         db         "2 <= n_files", 0                           ; DATA XREF=main+1710
                     aBackupType:
000000000001508d         db         "backup type", 0                            ; DATA XREF=main+946
                     aBackup:
0000000000015099         db         "backup", 0
                     aContext:
00000000000150a0         db         "context", 0
                     aForce:
00000000000150a8         db         "force", 0
                     aInteractive:
00000000000150ae         db         "interactive", 0
                     aNoclobber:
00000000000150ba         db         "no-clobber", 0
00000000000150c5         db  0x6e ; 'n'
00000000000150c6         db  0x6f ; 'o'
00000000000150c7         db  0x2d ; '-'
                     aTargetdirector:
00000000000150c8         db         "target-directory", 0
                     aStriptrailings_150d9:        // aStriptrailings
00000000000150d9         db         "strip-trailing-slashes", 0
                     aSuffix:
00000000000150f0         db         "suffix", 0
                     aUpdate:
00000000000150f7         db         "update", 0
                     aVerbose:
00000000000150fe         db         "verbose", 0
                     aHelp:
0000000000015106         db         "help", 0
                     aVersion:
000000000001510b         db         "version", 0
0000000000015113         align      8
                     aFailedToGetAtt:
0000000000015118         db         "failed to get attributes of %s", 0         ; DATA XREF=do_move+297
0000000000015137         align      8
                     aTrySHelpForMor:
0000000000015138         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000001515f         align      32
                     aUsageSOptionTS:
0000000000015160         db         "Usage: %s [OPTION]... [-T] SOURCE DEST\n  or:  %s [OPTION]... SOURCE... DIRECTORY\n  or:  %s [OPTION]... -t DIRECTORY SOURCE...\n", 0 ; DATA XREF=usage+93
00000000000151df         align      32
                     aRenameSourceTo:
00000000000151e0         db         "Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.\n", 0 ; DATA XREF=usage+138
                     aNmandatoryArgu:
0000000000015218         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+175
0000000000015263         align      8
                     aBackupcontrolM:
0000000000015268         db         "      --backup[=CONTROL]       make a backup of each existing destination file\n  -b                           like --backup but does not accept an argument\n  -f, --force                  do not prompt before overwriting\n  -i, --interactive            promp" ; DATA XREF=usage+212
0000000000015368         db         "t before overwrite\n  -n, --no-clobber             do not overwrite an existing file\nIf you specify more than one of -i, -f, -n, only the final one takes effect.\n", 0
000000000001540a         align      16
                     aStriptrailings:
0000000000015410         db         "      --strip-trailing-slashes  remove any trailing slashes from each SOURCE\n                                 argument\n  -S, --suffix=SUFFIX          override the usual backup suffix\n", 0 ; DATA XREF=usage+249
                     aTTargetdirecto:
00000000000154c8         db         "  -t, --target-directory=DIRECTORY  move all SOURCE arguments into DIRECTORY\n  -T, --no-target-directory    treat DEST as a normal file\n  -u, --update                 move only when the SOURCE file is newer\n                                 than the destina" ; DATA XREF=usage+286
00000000000155c8         db         "tion file or when the\n                                 destination file is missing\n  -v, --verbose                explain what is being done\n  -Z, --context                set SELinux security context of destination\n                                 file to"
00000000000156c8         db         " default type\n", 0
00000000000156d7         align      8
                     aHelpDisplayThi:
00000000000156d8         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+323
0000000000015705         align      8
                     aVersionOutputV:
0000000000015708         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+360
000000000001573e         align      64
                     aNtheBackupSuff:
0000000000015740         db         "\nThe backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\nThe version control method may be selected via the --backup option or through\nthe VERSION_CONTROL environment variable.  Here are the values:\n\n", 0 ; DATA XREF=usage+397
000000000001581d         align      32
                     aNoneOffNeverMa:
0000000000015820         db         "  none, off       never make backups (even if --backup is given)\n  numbered, t     make numbered backups\n  existing, nil   numbered if numbered backups exist, simple otherwise\n  simple, never   always make simple backups\n", 0 ; DATA XREF=usage+434
00000000000158fe         align      256
                     aHttpswwwgnuorg:
0000000000015900         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+687, usage+787, usage+880, usage+990, emit_bug_reporting_address+61
                     aReportAnyTrans:
0000000000015928         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1031
000000000001596f         align      16
                     aOrAvailableLoc:
0000000000015970         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+830
00000000000159a3         align      8
                     aMultipleTarget:
00000000000159a8         db         "multiple target directories specified", 0  ; DATA XREF=main+1727
00000000000159ce         align      16
                     aMissingDestina:
00000000000159d0         db         "missing destination file operand after %s", 0 ; DATA XREF=main+1543
00000000000159fa         align      512
                     aCannotCombineT:
0000000000015a00         db         "cannot combine --target-directory (-t) and --no-target-directory (-T)", 0 ; DATA XREF=main+1898
0000000000015a46         align      8
                     aOptionsBackupA:
0000000000015a48         db         "options --backup and --no-clobber are mutually exclusive", 0 ; DATA XREF=main+1587
0000000000015a81         align      8
                     __PRETTY_FUNCTION__.7189:
0000000000015a88         db         "do_move", 0                                ; DATA XREF=do_move+249
                     __PRETTY_FUNCTION__.7244:
0000000000015a90         db  0x6d ; 'm'                                         ; DATA XREF=main+1696
0000000000015a91         db  0x61 ; 'a'
0000000000015a92         db  0x69 ; 'i'
0000000000015a93         db  0x6e ; 'n'
0000000000015a94         db  0x00 ; '.'
                     aRemovedDirecto:
0000000000015a95         db         "removed directory %s\n", 0                 ; DATA XREF=excise+343
                     aRemovedSn:
0000000000015aab         db         "removed %s\n", 0                           ; DATA XREF=excise+536, create_hard_link+109, copy_internal+11626, copy_internal+13163
                     aCannotRemoveS:
0000000000015ab7         db         "cannot remove %s", 0                       ; DATA XREF=excise+217, prompt+857, prompt+1136, sub_45b0+339, copy_internal+9253, copy_internal+16279
                     aSRemoveSS:
0000000000015ac8         db         "%s: remove %s %s? ", 0                     ; DATA XREF=prompt+1112
                     aFtsreadFailed:
0000000000015adb         db         "fts_read failed", 0                        ; DATA XREF=sub_47d0+424
0000000000015aeb         db  0x2e ; '.'                                         ; DATA XREF=sub_47d0+45, sub_47d0+152, fts_safe_changedir+67, fts_safe_changedir+335, fts_build+2154, rpl_fts_read+1108
0000000000015aec         db  0x2e ; '.'                                         ; DATA XREF=sub_47d0+70, copy_internal+3800, rpl_fts_open+640, rpl_fts_read+1745, rpl_fts_read+1825, rpl_fts_children+195
0000000000015aed         db  0x00 ; '.'
                     aTraversalFaile:
0000000000015aee         db         "traversal failed: %s", 0                   ; DATA XREF=sub_43f0+16
                     aBugcoreutilsgn:
0000000000015b03         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=sub_47d0+914, emit_bug_reporting_address+20
                     aValidstatusS:
0000000000015b19         db         "VALID_STATUS (s)", 0                       ; DATA XREF=sub_47d0+959
                     aFtscloseFailed:
0000000000015b2a         db         "fts_close failed", 0                       ; DATA XREF=sub_47d0+480
0000000000015b3b         align      64
                     aSDescendIntoWr:
0000000000015b40         db         "%s: descend into write-protected directory %s? ", 0 ; DATA XREF=prompt+698
                     aSDescendIntoDi:
0000000000015b70         db         "%s: descend into directory %s? ", 0        ; DATA XREF=prompt+1200
                     aSRemoveWritepr:
0000000000015b90         db         "%s: remove write-protected %s %s? ", 0     ; DATA XREF=prompt+484
0000000000015bb3         align      8
                     aRefusingToRemo:
0000000000015bb8         db         "refusing to remove %s or %s directory: skipping %s", 0 ; DATA XREF=sub_47d0+92
0000000000015beb         align      16
                     aItIsDangerousT_15bf0:        // aItIsDangerousT
0000000000015bf0         db         "it is dangerous to operate recursively on %s", 0 ; DATA XREF=sub_47d0+827
0000000000015c1d         align      32
                     aItIsDangerousT:
0000000000015c20         db         "it is dangerous to operate recursively on %s (same as %s)", 0 ; DATA XREF=sub_47d0+617
0000000000015c5a         align      32
                     aUseNopreserver:
0000000000015c60         db         "use --no-preserve-root to override this failsafe", 0 ; DATA XREF=sub_47d0+664
0000000000015c91         align      8
                     aFailedToStatSS:
0000000000015c98         db         "failed to stat %s: skipping %s", 0         ; DATA XREF=sub_47d0+236
0000000000015cb7         align      8
                     aSkippingSSince:
0000000000015cb8         db         "skipping %s, since it's on a different device", 0 ; DATA XREF=sub_47d0+341, sub_47d0+736
0000000000015ce6         align      8
                     aWarningCircula:
0000000000015ce8         db         "WARNING: Circular directory structure.\nThis almost certainly means that you have a corrupted file system.\nNOTIFY YOUR SYSTEM MANAGER.\nThe following directory is part of the cycle:\n  %s\n", 0 ; DATA XREF=sub_4540+16
0000000000015da2         align      8
                     aUnexpectedFail:
0000000000015da8         db         "unexpected failure: fts_info=%d: %s\nplease report to %s", 0 ; DATA XREF=sub_47d0+892
                     aCoreutils831sr_15de0:        // aCoreutils831sr
0000000000015de0         db         "../coreutils-8.31/src/remove.c", 0         ; DATA XREF=sub_47d0+952
0000000000015dff         align      512
                     aAndPreserveroo:
0000000000015e00         db         "and --preserve-root=all is in effect", 0   ; DATA XREF=sub_47d0+380
0000000000015e25         db  0x00 ; '.'
0000000000015e26         db  0x00 ; '.'
0000000000015e27         db  0x00 ; '.'
0000000000015e28         db  0x0f ; '.'                                         ; DATA XREF=rm+53
0000000000015e29         db  0xed ; '.'
0000000000015e2a         db  0xfe ; '.'
0000000000015e2b         db  0xff ; '.'
0000000000015e2c         db  0x50 ; 'P'
0000000000015e2d         db  0xe7 ; '.'
0000000000015e2e         db  0xfe ; '.'
0000000000015e2f         db  0xff ; '.'
0000000000015e30         db  0x18 ; '.'
0000000000015e31         db  0xe7 ; '.'
0000000000015e32         db  0xfe ; '.'
0000000000015e33         db  0xff ; '.'
0000000000015e34         db  0x88 ; '.'
0000000000015e35         db  0xe6 ; '.'
0000000000015e36         db  0xfe ; '.'
0000000000015e37         db  0xff ; '.'
0000000000015e38         db  0x88 ; '.'
0000000000015e39         db  0xe6 ; '.'
0000000000015e3a         db  0xfe ; '.'
0000000000015e3b         db  0xff ; '.'
0000000000015e3c         db  0x0f ; '.'
0000000000015e3d         db  0xed ; '.'
0000000000015e3e         db  0xfe ; '.'
0000000000015e3f         db  0xff ; '.'
0000000000015e40         db  0x88 ; '.'
0000000000015e41         db  0xe6 ; '.'
0000000000015e42         db  0xfe ; '.'
0000000000015e43         db  0xff ; '.'
0000000000015e44         db  0xc8 ; '.'
0000000000015e45         db  0xe5 ; '.'
0000000000015e46         db  0xfe ; '.'
0000000000015e47         db  0xff ; '.'
0000000000015e48         db  0x88 ; '.'
0000000000015e49         db  0xe6 ; '.'
0000000000015e4a         db  0xfe ; '.'
0000000000015e4b         db  0xff ; '.'
0000000000015e4c         db  0x0f ; '.'
0000000000015e4d         db  0xed ; '.'
0000000000015e4e         db  0xfe ; '.'
0000000000015e4f         db  0xff ; '.'
0000000000015e50         db  0x88 ; '.'
0000000000015e51         db  0xe6 ; '.'
0000000000015e52         db  0xfe ; '.'
0000000000015e53         db  0xff ; '.'
0000000000015e54         db  0x88 ; '.'
0000000000015e55         db  0xe6 ; '.'
0000000000015e56         db  0xfe ; '.'
0000000000015e57         db  0xff ; '.'
0000000000015e58         db  0x88 ; '.'
0000000000015e59         db  0xe6 ; '.'
0000000000015e5a         db  0xfe ; '.'
0000000000015e5b         db  0xff ; '.'
0000000000015e5c         db  0x88 ; '.'
0000000000015e5d         db  0xe6 ; '.'
0000000000015e5e         db  0xfe ; '.'
0000000000015e5f         db  0xff ; '.'
                     __PRETTY_FUNCTION__.7067:
0000000000015e60         db  0x72 ; 'r'                                         ; DATA XREF=sub_47d0+945
0000000000015e61         db  0x6d ; 'm'
0000000000015e62         db  0x00 ; '.'
0000000000015e63         db  0x00 ; '.'
0000000000015e64         db  0x00 ; '.'
0000000000015e65         db  0x00 ; '.'
0000000000015e66         db  0x00 ; '.'
0000000000015e67         db  0x00 ; '.'
                     aFailedToRestor:
0000000000015e68         db         "failed to restore the default file creation context", 0 ; DATA XREF=restore_default_fscreatecon_or_die+6
0000000000015e9c         align      32
                     aCannotCreateHa:
0000000000015ea0         db         "cannot create hard link %s to %s", 0       ; DATA XREF=create_hard_link+204
0000000000015ec1         align      8
                     aSReplaceSOverr:
0000000000015ec8         db         "%s: replace %s, overriding mode %04lo (%s)? ", 0 ; DATA XREF=overwrite_ok.isra.12+134
0000000000015ef5         align      8
                     aSUnwritableSMo:
0000000000015ef8         db         "%s: unwritable %s (mode %04lo, %s); try anyway? ", 0 ; DATA XREF=overwrite_ok.isra.12+304
0000000000015f29         align      16
                     aFailedToGetSec:
0000000000015f30         db         "failed to get security context of %s", 0   ; DATA XREF=set_process_security_ctx+58
0000000000015f55         align      8
                     aFailedToSetThe:
0000000000015f58         db         "failed to set the security context of %s", 0 ; DATA XREF=set_file_security_ctx+51
0000000000015f81         align      8
                     aFailedToPreser:
0000000000015f88         db         "failed to preserve ownership for %s", 0    ; DATA XREF=set_owner+413, copy_internal+16324
0000000000015fac         align      16
                     aRNotSpecifiedO:
0000000000015fb0         db         "-r not specified; omitting directory %s", 0 ; DATA XREF=copy_internal+3065
                     aWarningSourceF:
0000000000015fd8         db         "warning: source file %s specified more than once", 0 ; DATA XREF=copy_internal+6457
0000000000016009         align      16
                     aCannotOverwrit_16010:        // aCannotOverwrit
0000000000016010         db         "cannot overwrite non-directory %s with directory %s", 0 ; DATA XREF=copy_internal+9135
0000000000016044         align      8
                     aWillNotOverwri:
0000000000016048         db         "will not overwrite just-created %s with %s", 0 ; DATA XREF=copy_internal+11081
0000000000016073         align      8
                     aCannotOverwrit:
0000000000016078         db         "cannot overwrite directory %s with non-directory", 0 ; DATA XREF=copy_internal+4867
00000000000160a9         align      16
                     aCannotMoveDire:
00000000000160b0         db         "cannot move directory onto non-directory: %s -> %s", 0 ; DATA XREF=copy_internal+9632
00000000000160e3         align      8
                     aBackingUpSMigh:
00000000000160e8         db         "backing up %s might destroy source;  %s not moved", 0 ; DATA XREF=copy_internal+10516
000000000001611a         align      32
                     aBackingUpSMigh_16120:        // aBackingUpSMigh
0000000000016120         db         "backing up %s might destroy source;  %s not copied", 0 ; DATA XREF=copy_internal+11126
0000000000016153         align      8
                     aWillNotCopySTh:
0000000000016158         db         "will not copy %s through just-created symlink %s", 0 ; DATA XREF=copy_internal+1049
0000000000016189         align      16
                     aCannotCopyADir:
0000000000016190         db         "cannot copy a directory, %s, into itself, %s", 0 ; DATA XREF=copy_internal+4306
00000000000161bd         align      64
                     aWarningSourceD:
00000000000161c0         db         "warning: source directory %s specified more than once", 0 ; DATA XREF=copy_internal+9947
00000000000161f6         align      8
                     aWillNotCreateH:
00000000000161f8         db         "will not create hard link %s to directory %s", 0 ; DATA XREF=copy_internal+8257
0000000000016225         align      8
                     aCannotMoveSToA:
0000000000016228         db         "cannot move %s to a subdirectory of itself, %s", 0 ; DATA XREF=copy_internal+6620
0000000000016257         align      8
                     aInterdeviceMov:
0000000000016258         db         "inter-device move failed: %s to %s; unable to remove target", 0 ; DATA XREF=copy_internal+6762
0000000000016294         align      8
                     aCannotCreateSy_16298:        // aCannotCreateSy
0000000000016298         db         "cannot create symbolic link %s to %s", 0   ; DATA XREF=copy_internal+3936
00000000000162bd         align      64
                     aSkippingFileSA:
00000000000162c0         db         "skipping file %s, as it was replaced while being copied", 0 ; DATA XREF=copy_internal+8483
                     aNotWritingThro:
00000000000162f8         db         "not writing through dangling symlink %s", 0 ; DATA XREF=copy_internal+16415
                     aSFailedToGetEx:
0000000000016320         db         "%s: failed to get extents info", 0         ; DATA XREF=copy_internal+16203
000000000001633f         align      64
                     aCannotCopyCycl:
0000000000016340         db         "cannot copy cyclic symbolic link %s", 0    ; DATA XREF=copy_internal+2969
0000000000016364         align      8
                     aSCanMakeRelati:
0000000000016368         db         "%s: can make relative symbolic links only in current directory", 0 ; DATA XREF=copy_internal+8775
00000000000163a7         align      8
                     aCannotCreateSy:
00000000000163a8         db         "cannot create symbolic link %s", 0         ; DATA XREF=copy_internal+11475
00000000000163c7         align      8
                     aValidbackuptyp:
00000000000163c8         db         "VALID_BACKUP_TYPE (co->backup_type)", 0    ; DATA XREF=copy+309
00000000000163ec         align      16
                     aValidsparsemod:
00000000000163f0         db         "VALID_SPARSE_MODE (co->sparse_mode)", 0    ; DATA XREF=copy+278
0000000000016414         align      8
                     aValidreflinkmo:
0000000000016418         db         "VALID_REFLINK_MODE (co->reflink_mode)", 0  ; DATA XREF=copy+247
000000000001643e         align      64
                     aCohardlinkCosy:
0000000000016440         db         "!(co->hard_link && co->symbolic_link)", 0  ; DATA XREF=copy+180
0000000000016466         align      8
                     aCoreflinkmodeR:
0000000000016468         db         "! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARSE_AUTO)", 0 ; DATA XREF=copy+211
                     aSS:
00000000000164b1         db         "%s -> %s", 0                               ; DATA XREF=emit_verbose+46
                     aBackupS:
00000000000164ba         db         " (backup: %s)", 0                          ; DATA XREF=emit_verbose+89
                     aSOverwriteS:
00000000000164c8         db         "%s: overwrite %s? ", 0                     ; DATA XREF=overwrite_ok.isra.12+213
                     aCannotLseekS:
00000000000164db         db         "cannot lseek %s", 0                        ; DATA XREF=create_hole+181, copy_internal+16598
                     aErrorDeallocat:
00000000000164eb         db         "error deallocating %s", 0                  ; DATA XREF=create_hole+97, copy_internal+15522
                     aErrorReadingS:
0000000000016501         db         "error reading %s", 0                       ; DATA XREF=sparse_copy+222
                     aErrorWritingS:
0000000000016512         db         "error writing %s", 0                       ; DATA XREF=sparse_copy+975
                     aOverflowReadin:
0000000000016523         db         "overflow reading %s", 0                    ; DATA XREF=sparse_copy+898
                     aClearingPermis:
0000000000016537         db         "clearing permissions for %s", 0            ; DATA XREF=set_owner+355
                     aCannotStatS:
0000000000016553         db         "cannot stat %s", 0                         ; DATA XREF=copy_internal+2287, copy_internal+3701, copy_internal+9918
                     aOmittingDirect:
0000000000016562         db         "omitting directory %s", 0                  ; DATA XREF=copy_internal+6544
                     aSAndSAreTheSam:
0000000000016578         db         "%s and %s are the same file", 0            ; DATA XREF=copy_internal+5676
                     aCannotBackupS:
0000000000016594         db         "cannot backup %s", 0                       ; DATA XREF=copy_internal+10050
                     aRenamed:
00000000000165a5         db         "renamed ", 0                               ; DATA XREF=copy_internal+5008
                     aCannotMoveSToS:
00000000000165ae         db         "cannot move %s to %s", 0                   ; DATA XREF=copy_internal+4500
                     aCopied:
00000000000165c3         db         "copied ", 0                                ; DATA XREF=copy_internal+9008
                     aCannotCreateDi:
00000000000165cb         db         "cannot create directory %s", 0             ; DATA XREF=copy_internal+5328
                     aSettingPermiss:
00000000000165e6         db         "setting permissions for %s", 0             ; DATA XREF=copy_internal+11548, set_acl+26
                     aCreatedDirecto:
0000000000016601         db         "created directory %s\n", 0                 ; DATA XREF=copy_internal+7449
                     aCannotAccessS:
0000000000016617         db         "cannot access %s", 0                       ; DATA XREF=copy_internal+11305
                     aCannotOpenSFor:
0000000000016628         db         "cannot open %s for reading", 0             ; DATA XREF=copy_internal+10212
                     aCannotFstatS:
0000000000016643         db         "cannot fstat %s", 0                        ; DATA XREF=copy_internal+10776, copy_internal+14983
                     aCannotCreateRe:
0000000000016653         db         "cannot create regular file %s", 0          ; DATA XREF=copy_internal+13430
                     aFailedToCloneS:
0000000000016671         db         "failed to clone %s from %s", 0             ; DATA XREF=copy_internal+15770
                     aSWriteFailed:
000000000001668c         db         "%s: write failed", 0                       ; DATA XREF=copy_internal+16116
                     aFailedToExtend:
000000000001669d         db         "failed to extend %s", 0                    ; DATA XREF=copy_internal+15243
                     aPreservingTime:
00000000000166b1         db         "preserving times for %s", 0                ; DATA XREF=copy_internal+1691, copy_internal+14896
                     aPreservingPerm:
00000000000166c9         db         "preserving permissions for %s", 0          ; DATA XREF=copy_internal+1979, copy_internal+14032, copy_acl+35
                     aFailedToCloseS:
00000000000166e7         db         "failed to close %s", 0                     ; DATA XREF=copy_internal+11224, copy_internal+13000
                     aCannotCreateFi:
00000000000166fa         db         "cannot create fifo %s", 0                  ; DATA XREF=copy_internal+10747
                     aCannotCreateSp:
0000000000016710         db         "cannot create special file %s", 0          ; DATA XREF=copy_internal+9748
                     aCannotReadSymb:
000000000001672e         db         "cannot read symbolic link %s", 0           ; DATA XREF=copy_internal+13532
                     aSHasUnknownFil:
000000000001674b         db         "%s has unknown file type", 0               ; DATA XREF=copy_internal+6395
                     aCannotUnbackup:
0000000000016764         db         "cannot un-backup %s", 0                    ; DATA XREF=copy_internal+6265
                     aSSUnbackupn:
0000000000016778         db         "%s -> %s (unbackup)\n", 0                  ; DATA XREF=copy_internal+4101
                     aCoreutils831sr_1678d:        // aCoreutils831sr
000000000001678d         db         "../coreutils-8.31/src/copy.c", 0           ; DATA XREF=copy+173, copy+204, copy+240, copy+271, copy+302, copy+333
                     aCoNull:
00000000000167aa         db         "co != NULL", 0                             ; DATA XREF=copy+340
00000000000167b5         align      8
                     __PRETTY_FUNCTION__.7875:
00000000000167b8         db         "valid_options", 0                          ; DATA XREF=copy+166, copy+197, copy+233, copy+264, copy+295, copy+326
00000000000167c6         align      8
                     aCoreutils831sr_167c8:        // aCoreutils831sr
00000000000167c8         db         "../coreutils-8.31/src/extent-scan.c", 0    ; DATA XREF=extent_scan_read+497, extent_scan_read+737
00000000000167ec         align      16
                     aScaneicountSiz:
00000000000167f0         db         "scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents", 0 ; DATA XREF=extent_scan_read+744
0000000000016827         align      8
                     aFmextentsifelo:
0000000000016828         db         "fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length", 0 ; DATA XREF=extent_scan_read+504
0000000000016868         align      16
                     __PRETTY_FUNCTION__.6956:
0000000000016870         db         "extent_scan_read", 0                       ; DATA XREF=extent_scan_read+490, extent_scan_read+730
                     a831:
0000000000016881         db         "8.31", 0                                   ; DATA XREF=Version
0000000000016886         db  0x7e ; '~'                                         ; DATA XREF=set_simple_backup_suffix+14
0000000000016887         db  0x00 ; '.'
                     aSimplebackupsu:
0000000000016888         db         "SIMPLE_BACKUP_SUFFIX", 0                   ; DATA XREF=set_simple_backup_suffix+48
000000000001689d         db  0x24 ; '$'                                         ; DATA XREF=xget_version+36
                     aVersioncontrol:
000000000001689e         db         "VERSION_CONTROL", 0                        ; DATA XREF=xget_version+10
                     aNone:
00000000000168ae         db         "none", 0
00000000000168b3         db  0x6f ; 'o'
00000000000168b4         db  0x66 ; 'f'
00000000000168b5         db  0x66 ; 'f'
00000000000168b6         db  0x00 ; '.'
                     aSimple:
00000000000168b7         db         "simple", 0
                     aNever:
00000000000168be         db         "never", 0
                     aExisting:
00000000000168c4         db         "existing", 0
00000000000168cd         db  0x6e ; 'n'
00000000000168ce         db  0x69 ; 'i'
00000000000168cf         db  0x6c ; 'l'
00000000000168d0         db  0x00 ; '.'
                     aNumbered:
00000000000168d1         db         "numbered", 0
00000000000168da         db  0x00 ; '.'
00000000000168db         db  0x00 ; '.'
00000000000168dc         db  0x00 ; '.'
00000000000168dd         db  0x00 ; '.'
00000000000168de         db  0x00 ; '.'
00000000000168df         db  0x00 ; '.'
                     backup_types:
00000000000168e0         db  0x00 ; '.'                                         ; DATA XREF=get_version.part.0+18, get_version.part.0+36
00000000000168e1         db  0x00 ; '.'
00000000000168e2         db  0x00 ; '.'
00000000000168e3         db  0x00 ; '.'
00000000000168e4         db  0x00 ; '.'
00000000000168e5         db  0x00 ; '.'
00000000000168e6         db  0x00 ; '.'
00000000000168e7         db  0x00 ; '.'
00000000000168e8         db  0x01 ; '.'
00000000000168e9         db  0x00 ; '.'
00000000000168ea         db  0x00 ; '.'
00000000000168eb         db  0x00 ; '.'
00000000000168ec         db  0x01 ; '.'
00000000000168ed         db  0x00 ; '.'
00000000000168ee         db  0x00 ; '.'
00000000000168ef         db  0x00 ; '.'
00000000000168f0         db  0x02 ; '.'
00000000000168f1         db  0x00 ; '.'
00000000000168f2         db  0x00 ; '.'
00000000000168f3         db  0x00 ; '.'
00000000000168f4         db  0x02 ; '.'
00000000000168f5         db  0x00 ; '.'
00000000000168f6         db  0x00 ; '.'
00000000000168f7         db  0x00 ; '.'
00000000000168f8         db  0x03 ; '.'
00000000000168f9         db  0x00 ; '.'
00000000000168fa         db  0x00 ; '.'
00000000000168fb         db  0x00 ; '.'
00000000000168fc         db  0x03 ; '.'
00000000000168fd         db  0x00 ; '.'
00000000000168fe         db  0x00 ; '.'
00000000000168ff         db  0x00 ; '.'
                     aErrorClosingFi:
0000000000016900         db         "error closing file", 0                     ; DATA XREF=close_stdin+88
                     aSS_16913:        // aSS
0000000000016913         db         "%s: %s", 0                                 ; DATA XREF=close_stdin+141, close_stdout+108
                     aWriteError:
000000000001691a         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aRegularEmptyFi:
0000000000016926         db         "regular empty file", 0                     ; DATA XREF=file_type+103
                     aRegularFile:
0000000000016939         db         "regular file", 0                           ; DATA XREF=file_type+120
                     aSymbolicLink:
0000000000016946         db         "symbolic link", 0                          ; DATA XREF=file_type+144
                     aBlockSpecialFi:
0000000000016954         db         "block special file", 0                     ; DATA XREF=file_type+192
                     aCharacterSpeci:
0000000000016967         db         "character special file", 0                 ; DATA XREF=file_type+208
000000000001697e         db  0x66 ; 'f'                                         ; DATA XREF=file_type+224
000000000001697f         db  0x69 ; 'i'
0000000000016980         db  0x66 ; 'f'
0000000000016981         db  0x6f ; 'o'
0000000000016982         db  0x00 ; '.'
                     aSocket:
0000000000016983         db         "socket", 0                                 ; DATA XREF=file_type+160
                     aWeirdFile:
000000000001698a         db         "weird file", 0                             ; DATA XREF=file_type+78
                     aEntriesLun:
0000000000016995         db         "# entries:         %lu\n", 0               ; DATA XREF=hash_print_statistics+101
                     aBucketsLun:
00000000000169ad         db         "# buckets:         %lu\n", 0               ; DATA XREF=hash_print_statistics+123
                     aMaxBucketLengt:
00000000000169c5         db         "max bucket length: %lu\n", 0               ; DATA XREF=hash_print_statistics+232
00000000000169dd         align      32
                     aBucketsUsedLu2:
00000000000169e0         db         "# buckets used:    %lu (%.2f%%)\n", 0      ; DATA XREF=hash_print_statistics+188
0000000000016a01         db  0x00 ; '.'
0000000000016a02         db  0x00 ; '.'
0000000000016a03         db  0x00 ; '.'
0000000000016a04         db  0x00 ; '.'
0000000000016a05         db  0x00 ; '.'
0000000000016a06         db  0x00 ; '.'
0000000000016a07         db  0x00 ; '.'
0000000000016a08         db  0x00 ; '.'
0000000000016a09         db  0x00 ; '.'
0000000000016a0a         db  0x00 ; '.'
0000000000016a0b         db  0x00 ; '.'
0000000000016a0c         db  0x00 ; '.'
0000000000016a0d         db  0x00 ; '.'
0000000000016a0e         db  0x00 ; '.'
0000000000016a0f         db  0x00 ; '.'
                     default_tuning:
0000000000016a10         db  0x00 ; '.'                                         ; DATA XREF=check_tuning.isra.0+3, hash_initialize+272
0000000000016a11         db  0x00 ; '.'
0000000000016a12         db  0x00 ; '.'
0000000000016a13         db  0x00 ; '.'
0000000000016a14         db  0x00 ; '.'
0000000000016a15         db  0x00 ; '.'
0000000000016a16         db  0x80 ; '.'
0000000000016a17         db  0x3f ; '?'
0000000000016a18         db  0xcd ; '.'
0000000000016a19         db  0xcc ; '.'
0000000000016a1a         db  0x4c ; 'L'
0000000000016a1b         db  0x3f ; '?'
0000000000016a1c         db  0xf4 ; '.'
0000000000016a1d         db  0xfd ; '.'
0000000000016a1e         db  0xb4 ; '.'
0000000000016a1f         db  0x3f ; '?'
0000000000016a20         db  0x00 ; '.'
0000000000016a21         db  0x00 ; '.'
0000000000016a22         db  0x00 ; '.'
0000000000016a23         db  0x00 ; '.'
                     float_16a24:        // float
0000000000016a24         dd         0.1f                                        ; DATA XREF=check_tuning.isra.0+25, check_tuning.isra.0+74
                     float_16a28:        // float
0000000000016a28         dd         0.9f                                        ; DATA XREF=check_tuning.isra.0+34
                     float_16a2c:        // float
0000000000016a2c         dd         1.1f                                        ; DATA XREF=check_tuning.isra.0+52
                     float_16a30:        // float
0000000000016a30         dd         0.0f                                        ; DATA XREF=check_tuning.isra.0+65
                     float_16a34:        // float
0000000000016a34         dd         1.0f                                        ; DATA XREF=check_tuning.isra.0+92
                     float_16a38:        // float
0000000000016a38         dd         0.8f                                        ; DATA XREF=hash_initialize+290
                     float_16a3c:        // float
0000000000016a3c         dd         1.84467e+19f                                ; DATA XREF=hash_initialize+318, hash_rehash+64, hash_insert_if_absent+413
                     float_16a40:        // float
0000000000016a40         dd         9.22337e+18f                                ; DATA XREF=hash_initialize+327, hash_initialize+336, hash_rehash+77, hash_rehash+90, hash_insert_if_absent+422, hash_insert_if_absent+608, hash_delete+250, hash_delete+400
0000000000016a44         align      2
0000000000016a4e         db  0x59 ; 'Y'
0000000000016a4f         db  0x40 ; '@'
                     aANullArgv0WasP:
0000000000016a50         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
0000000000016a88         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
0000000000016a90         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
0000000000016a91         db  0x74 ; 't'
0000000000016a92         db  0x2d ; '-'
0000000000016a93         db  0x00 ; '.'
0000000000016a94         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
0000000000016a95         db  0x80 ; '.'
0000000000016a96         db  0x98 ; '.'
0000000000016a97         db  0x00 ; '.'
0000000000016a98         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
0000000000016a99         db  0x80 ; '.'
0000000000016a9a         db  0x99 ; '.'
0000000000016a9b         db  0x00 ; '.'
0000000000016a9c         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
0000000000016a9d         db  0x07 ; '.'
0000000000016a9e         db  0x65 ; 'e'
0000000000016a9f         db  0x00 ; '.'
0000000000016aa0         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
0000000000016aa1         db  0xaf ; '.'
0000000000016aa2         db  0x00 ; '.'
0000000000016aa3         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_d560+1451, sub_d560+1493, sub_d560+2429
0000000000016aa4         db  0x00 ; '.'
0000000000016aa5         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_d560+132, sub_d560+1338, sub_d560+1670, sub_d560+1697, sub_d560+2352
0000000000016aa6         db  0x00 ; '.'
0000000000016aa7         db  0x60 ; '`'                                         ; DATA XREF=sub_d560+1627, sub_d560+1654
0000000000016aa8         db  0x00 ; '.'
                     aLiteral:
0000000000016aa9         db         "literal", 0
                     aShell:
0000000000016ab1         db         "shell", 0
                     aShellalways:
0000000000016ab7         db         "shell-always", 0
0000000000016ac4         db  0x73 ; 's'
0000000000016ac5         db  0x68 ; 'h'
0000000000016ac6         db  0x65 ; 'e'
0000000000016ac7         db  0x6c ; 'l'
0000000000016ac8         db  0x6c ; 'l'
0000000000016ac9         db  0x2d ; '-'
                     aEscape:
0000000000016aca         db         "escape", 0
                     aShellescapealw:
0000000000016ad1         db         "shell-escape-always", 0
                     aCmaybe:
0000000000016ae5         db         "c-maybe", 0
                     aClocale:
0000000000016aed         db         "clocale", 0
0000000000016af5         align      256
                     switch_table_16b00:        // switch_table
0000000000016b00         dd         quotearg_buffer_restyled.loc_dc5a-switch_table_16b00, quotearg_buffer_restyled.loc_ceb3-switch_table_16b00, quotearg_buffer_restyled.loc_de88-switch_table_16b00, quotearg_buffer_restyled.loc_dc94-switch_table_16b00 ; switch table used at 0xceb1 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000016b10         dd         quotearg_buffer_restyled.loc_da84-switch_table_16b00, quotearg_buffer_restyled.loc_dae0-switch_table_16b00, quotearg_buffer_restyled.loc_db35-switch_table_16b00, quotearg_buffer_restyled.loc_db7a-switch_table_16b00
0000000000016b20         dd         3 dup (quotearg_buffer_restyled.loc_dbb4-switch_table_16b00)
0000000000016b2c         db  0x04 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
0000000000016b2d         db  0x67 ; 'g'
0000000000016b2e         db  0xff ; '.'
0000000000016b2f         db  0xff ; '.'
0000000000016b30         db  0xec ; '.'
0000000000016b31         db  0x67 ; 'g'
0000000000016b32         db  0xff ; '.'
0000000000016b33         db  0xff ; '.'
0000000000016b34         db  0xec ; '.'
0000000000016b35         db  0x67 ; 'g'
0000000000016b36         db  0xff ; '.'
0000000000016b37         db  0xff ; '.'
0000000000016b38         db  0xec ; '.'
0000000000016b39         db  0x67 ; 'g'
0000000000016b3a         db  0xff ; '.'
0000000000016b3b         db  0xff ; '.'
0000000000016b3c         db  0xec ; '.'
0000000000016b3d         db  0x67 ; 'g'
0000000000016b3e         db  0xff ; '.'
0000000000016b3f         db  0xff ; '.'
0000000000016b40         db  0xec ; '.'
0000000000016b41         db  0x67 ; 'g'
0000000000016b42         db  0xff ; '.'
0000000000016b43         db  0xff ; '.'
0000000000016b44         db  0xec ; '.'
0000000000016b45         db  0x67 ; 'g'
0000000000016b46         db  0xff ; '.'
0000000000016b47         db  0xff ; '.'
0000000000016b48         db  0x44 ; 'D'
0000000000016b49         db  0x67 ; 'g'
0000000000016b4a         db  0xff ; '.'
0000000000016b4b         db  0xff ; '.'
0000000000016b4c         db  0x4c ; 'L'
0000000000016b4d         db  0x66 ; 'f'
0000000000016b4e         db  0xff ; '.'
0000000000016b4f         db  0xff ; '.'
0000000000016b50         db  0x0c ; '.'
0000000000016b51         db  0x66 ; 'f'
0000000000016b52         db  0xff ; '.'
0000000000016b53         db  0xff ; '.'
0000000000016b54         db  0xd4 ; '.'
0000000000016b55         db  0x67 ; 'g'
0000000000016b56         db  0xff ; '.'
0000000000016b57         db  0xff ; '.'
0000000000016b58         db  0xc4 ; '.'
0000000000016b59         db  0x67 ; 'g'
0000000000016b5a         db  0xff ; '.'
0000000000016b5b         db  0xff ; '.'
0000000000016b5c         db  0xb4 ; '.'
0000000000016b5d         db  0x67 ; 'g'
0000000000016b5e         db  0xff ; '.'
0000000000016b5f         db  0xff ; '.'
0000000000016b60         db  0xa4 ; '.'
0000000000016b61         db  0x67 ; 'g'
0000000000016b62         db  0xff ; '.'
0000000000016b63         db  0xff ; '.'
0000000000016b64         db  0xec ; '.'
0000000000016b65         db  0x67 ; 'g'
0000000000016b66         db  0xff ; '.'
0000000000016b67         db  0xff ; '.'
0000000000016b68         db  0xec ; '.'
0000000000016b69         db  0x67 ; 'g'
0000000000016b6a         db  0xff ; '.'
0000000000016b6b         db  0xff ; '.'
0000000000016b6c         db  0xec ; '.'
0000000000016b6d         db  0x67 ; 'g'
0000000000016b6e         db  0xff ; '.'
0000000000016b6f         db  0xff ; '.'
0000000000016b70         db  0xec ; '.'
0000000000016b71         db  0x67 ; 'g'
0000000000016b72         db  0xff ; '.'
0000000000016b73         db  0xff ; '.'
0000000000016b74         db  0xec ; '.'
0000000000016b75         db  0x67 ; 'g'
0000000000016b76         db  0xff ; '.'
0000000000016b77         db  0xff ; '.'
0000000000016b78         db  0xec ; '.'
0000000000016b79         db  0x67 ; 'g'
0000000000016b7a         db  0xff ; '.'
0000000000016b7b         db  0xff ; '.'
0000000000016b7c         db  0xec ; '.'
0000000000016b7d         db  0x67 ; 'g'
0000000000016b7e         db  0xff ; '.'
0000000000016b7f         db  0xff ; '.'
0000000000016b80         db  0xec ; '.'
0000000000016b81         db  0x67 ; 'g'
0000000000016b82         db  0xff ; '.'
0000000000016b83         db  0xff ; '.'
0000000000016b84         db  0xec ; '.'
0000000000016b85         db  0x67 ; 'g'
0000000000016b86         db  0xff ; '.'
0000000000016b87         db  0xff ; '.'
0000000000016b88         db  0xec ; '.'
0000000000016b89         db  0x67 ; 'g'
0000000000016b8a         db  0xff ; '.'
0000000000016b8b         db  0xff ; '.'
0000000000016b8c         db  0xec ; '.'
0000000000016b8d         db  0x67 ; 'g'
0000000000016b8e         db  0xff ; '.'
0000000000016b8f         db  0xff ; '.'
0000000000016b90         db  0xec ; '.'
0000000000016b91         db  0x67 ; 'g'
0000000000016b92         db  0xff ; '.'
0000000000016b93         db  0xff ; '.'
0000000000016b94         db  0xec ; '.'
0000000000016b95         db  0x67 ; 'g'
0000000000016b96         db  0xff ; '.'
0000000000016b97         db  0xff ; '.'
0000000000016b98         db  0xec ; '.'
0000000000016b99         db  0x67 ; 'g'
0000000000016b9a         db  0xff ; '.'
0000000000016b9b         db  0xff ; '.'
0000000000016b9c         db  0xec ; '.'
0000000000016b9d         db  0x67 ; 'g'
0000000000016b9e         db  0xff ; '.'
0000000000016b9f         db  0xff ; '.'
0000000000016ba0         db  0xec ; '.'
0000000000016ba1         db  0x67 ; 'g'
0000000000016ba2         db  0xff ; '.'
0000000000016ba3         db  0xff ; '.'
0000000000016ba4         db  0xec ; '.'
0000000000016ba5         db  0x67 ; 'g'
0000000000016ba6         db  0xff ; '.'
0000000000016ba7         db  0xff ; '.'
0000000000016ba8         db  0xec ; '.'
0000000000016ba9         db  0x67 ; 'g'
0000000000016baa         db  0xff ; '.'
0000000000016bab         db  0xff ; '.'
0000000000016bac         db  0x94 ; '.'
0000000000016bad         db  0x67 ; 'g'
0000000000016bae         db  0xff ; '.'
0000000000016baf         db  0xff ; '.'
0000000000016bb0         db  0x84 ; '.'
0000000000016bb1         db  0x67 ; 'g'
0000000000016bb2         db  0xff ; '.'
0000000000016bb3         db  0xff ; '.'
0000000000016bb4         db  0x84 ; '.'
0000000000016bb5         db  0x67 ; 'g'
0000000000016bb6         db  0xff ; '.'
0000000000016bb7         db  0xff ; '.'
0000000000016bb8         db  0x54 ; 'T'
0000000000016bb9         db  0x67 ; 'g'
0000000000016bba         db  0xff ; '.'
0000000000016bbb         db  0xff ; '.'
0000000000016bbc         db  0x84 ; '.'
0000000000016bbd         db  0x67 ; 'g'
0000000000016bbe         db  0xff ; '.'
0000000000016bbf         db  0xff ; '.'
0000000000016bc0         db  0x2c ; ','
0000000000016bc1         db  0x67 ; 'g'
0000000000016bc2         db  0xff ; '.'
0000000000016bc3         db  0xff ; '.'
0000000000016bc4         db  0x84 ; '.'
0000000000016bc5         db  0x67 ; 'g'
0000000000016bc6         db  0xff ; '.'
0000000000016bc7         db  0xff ; '.'
0000000000016bc8         db  0xe7 ; '.'
0000000000016bc9         db  0x65 ; 'e'
0000000000016bca         db  0xff ; '.'
0000000000016bcb         db  0xff ; '.'
0000000000016bcc         db  0x84 ; '.'
0000000000016bcd         db  0x67 ; 'g'
0000000000016bce         db  0xff ; '.'
0000000000016bcf         db  0xff ; '.'
0000000000016bd0         db  0x84 ; '.'
0000000000016bd1         db  0x67 ; 'g'
0000000000016bd2         db  0xff ; '.'
0000000000016bd3         db  0xff ; '.'
0000000000016bd4         db  0x84 ; '.'
0000000000016bd5         db  0x67 ; 'g'
0000000000016bd6         db  0xff ; '.'
0000000000016bd7         db  0xff ; '.'
0000000000016bd8         db  0x2c ; ','
0000000000016bd9         db  0x67 ; 'g'
0000000000016bda         db  0xff ; '.'
0000000000016bdb         db  0xff ; '.'
0000000000016bdc         db  0x2c ; ','
0000000000016bdd         db  0x67 ; 'g'
0000000000016bde         db  0xff ; '.'
0000000000016bdf         db  0xff ; '.'
0000000000016be0         db  0x2c ; ','
0000000000016be1         db  0x67 ; 'g'
0000000000016be2         db  0xff ; '.'
0000000000016be3         db  0xff ; '.'
0000000000016be4         db  0x2c ; ','
0000000000016be5         db  0x67 ; 'g'
0000000000016be6         db  0xff ; '.'
0000000000016be7         db  0xff ; '.'
0000000000016be8         db  0x2c ; ','
0000000000016be9         db  0x67 ; 'g'
0000000000016bea         db  0xff ; '.'
0000000000016beb         db  0xff ; '.'
0000000000016bec         db  0x2c ; ','
0000000000016bed         db  0x67 ; 'g'
0000000000016bee         db  0xff ; '.'
0000000000016bef         db  0xff ; '.'
0000000000016bf0         db  0x2c ; ','
0000000000016bf1         db  0x67 ; 'g'
0000000000016bf2         db  0xff ; '.'
0000000000016bf3         db  0xff ; '.'
0000000000016bf4         db  0x2c ; ','
0000000000016bf5         db  0x67 ; 'g'
0000000000016bf6         db  0xff ; '.'
0000000000016bf7         db  0xff ; '.'
0000000000016bf8         db  0x2c ; ','
0000000000016bf9         db  0x67 ; 'g'
0000000000016bfa         db  0xff ; '.'
0000000000016bfb         db  0xff ; '.'
0000000000016bfc         db  0x2c ; ','
0000000000016bfd         db  0x67 ; 'g'
0000000000016bfe         db  0xff ; '.'
0000000000016bff         db  0xff ; '.'
0000000000016c00         db  0x2c ; ','
0000000000016c01         db  0x67 ; 'g'
0000000000016c02         db  0xff ; '.'
0000000000016c03         db  0xff ; '.'
0000000000016c04         db  0x2c ; ','
0000000000016c05         db  0x67 ; 'g'
0000000000016c06         db  0xff ; '.'
0000000000016c07         db  0xff ; '.'
0000000000016c08         db  0x2c ; ','
0000000000016c09         db  0x67 ; 'g'
0000000000016c0a         db  0xff ; '.'
0000000000016c0b         db  0xff ; '.'
0000000000016c0c         db  0x2c ; ','
0000000000016c0d         db  0x67 ; 'g'
0000000000016c0e         db  0xff ; '.'
0000000000016c0f         db  0xff ; '.'
0000000000016c10         db  0x2c ; ','
0000000000016c11         db  0x67 ; 'g'
0000000000016c12         db  0xff ; '.'
0000000000016c13         db  0xff ; '.'
0000000000016c14         db  0x2c ; ','
0000000000016c15         db  0x67 ; 'g'
0000000000016c16         db  0xff ; '.'
0000000000016c17         db  0xff ; '.'
0000000000016c18         db  0x84 ; '.'
0000000000016c19         db  0x67 ; 'g'
0000000000016c1a         db  0xff ; '.'
0000000000016c1b         db  0xff ; '.'
0000000000016c1c         db  0x84 ; '.'
0000000000016c1d         db  0x67 ; 'g'
0000000000016c1e         db  0xff ; '.'
0000000000016c1f         db  0xff ; '.'
0000000000016c20         db  0x84 ; '.'
0000000000016c21         db  0x67 ; 'g'
0000000000016c22         db  0xff ; '.'
0000000000016c23         db  0xff ; '.'
0000000000016c24         db  0x84 ; '.'
0000000000016c25         db  0x67 ; 'g'
0000000000016c26         db  0xff ; '.'
0000000000016c27         db  0xff ; '.'
0000000000016c28         db  0xb7 ; '.'
0000000000016c29         db  0x65 ; 'e'
0000000000016c2a         db  0xff ; '.'
0000000000016c2b         db  0xff ; '.'
0000000000016c2c         db  0xec ; '.'
0000000000016c2d         db  0x67 ; 'g'
0000000000016c2e         db  0xff ; '.'
0000000000016c2f         db  0xff ; '.'
0000000000016c30         db  0x2c ; ','
0000000000016c31         db  0x67 ; 'g'
0000000000016c32         db  0xff ; '.'
0000000000016c33         db  0xff ; '.'
0000000000016c34         db  0x2c ; ','
0000000000016c35         db  0x67 ; 'g'
0000000000016c36         db  0xff ; '.'
0000000000016c37         db  0xff ; '.'
0000000000016c38         db  0x2c ; ','
0000000000016c39         db  0x67 ; 'g'
0000000000016c3a         db  0xff ; '.'
0000000000016c3b         db  0xff ; '.'
0000000000016c3c         db  0x2c ; ','
0000000000016c3d         db  0x67 ; 'g'
0000000000016c3e         db  0xff ; '.'
0000000000016c3f         db  0xff ; '.'
0000000000016c40         db  0x2c ; ','
0000000000016c41         db  0x67 ; 'g'
0000000000016c42         db  0xff ; '.'
0000000000016c43         db  0xff ; '.'
0000000000016c44         db  0x2c ; ','
0000000000016c45         db  0x67 ; 'g'
0000000000016c46         db  0xff ; '.'
0000000000016c47         db  0xff ; '.'
0000000000016c48         db  0x2c ; ','
0000000000016c49         db  0x67 ; 'g'
0000000000016c4a         db  0xff ; '.'
0000000000016c4b         db  0xff ; '.'
0000000000016c4c         db  0x2c ; ','
0000000000016c4d         db  0x67 ; 'g'
0000000000016c4e         db  0xff ; '.'
0000000000016c4f         db  0xff ; '.'
0000000000016c50         db  0x2c ; ','
0000000000016c51         db  0x67 ; 'g'
0000000000016c52         db  0xff ; '.'
0000000000016c53         db  0xff ; '.'
0000000000016c54         db  0x2c ; ','
0000000000016c55         db  0x67 ; 'g'
0000000000016c56         db  0xff ; '.'
0000000000016c57         db  0xff ; '.'
0000000000016c58         db  0x2c ; ','
0000000000016c59         db  0x67 ; 'g'
0000000000016c5a         db  0xff ; '.'
0000000000016c5b         db  0xff ; '.'
0000000000016c5c         db  0x2c ; ','
0000000000016c5d         db  0x67 ; 'g'
0000000000016c5e         db  0xff ; '.'
0000000000016c5f         db  0xff ; '.'
0000000000016c60         db  0x2c ; ','
0000000000016c61         db  0x67 ; 'g'
0000000000016c62         db  0xff ; '.'
0000000000016c63         db  0xff ; '.'
0000000000016c64         db  0x2c ; ','
0000000000016c65         db  0x67 ; 'g'
0000000000016c66         db  0xff ; '.'
0000000000016c67         db  0xff ; '.'
0000000000016c68         db  0x2c ; ','
0000000000016c69         db  0x67 ; 'g'
0000000000016c6a         db  0xff ; '.'
0000000000016c6b         db  0xff ; '.'
0000000000016c6c         db  0x2c ; ','
0000000000016c6d         db  0x67 ; 'g'
0000000000016c6e         db  0xff ; '.'
0000000000016c6f         db  0xff ; '.'
0000000000016c70         db  0x2c ; ','
0000000000016c71         db  0x67 ; 'g'
0000000000016c72         db  0xff ; '.'
0000000000016c73         db  0xff ; '.'
0000000000016c74         db  0x2c ; ','
0000000000016c75         db  0x67 ; 'g'
0000000000016c76         db  0xff ; '.'
0000000000016c77         db  0xff ; '.'
0000000000016c78         db  0x2c ; ','
0000000000016c79         db  0x67 ; 'g'
0000000000016c7a         db  0xff ; '.'
0000000000016c7b         db  0xff ; '.'
0000000000016c7c         db  0x2c ; ','
0000000000016c7d         db  0x67 ; 'g'
0000000000016c7e         db  0xff ; '.'
0000000000016c7f         db  0xff ; '.'
0000000000016c80         db  0x2c ; ','
0000000000016c81         db  0x67 ; 'g'
0000000000016c82         db  0xff ; '.'
0000000000016c83         db  0xff ; '.'
0000000000016c84         db  0x2c ; ','
0000000000016c85         db  0x67 ; 'g'
0000000000016c86         db  0xff ; '.'
0000000000016c87         db  0xff ; '.'
0000000000016c88         db  0x2c ; ','
0000000000016c89         db  0x67 ; 'g'
0000000000016c8a         db  0xff ; '.'
0000000000016c8b         db  0xff ; '.'
0000000000016c8c         db  0x2c ; ','
0000000000016c8d         db  0x67 ; 'g'
0000000000016c8e         db  0xff ; '.'
0000000000016c8f         db  0xff ; '.'
0000000000016c90         db  0x2c ; ','
0000000000016c91         db  0x67 ; 'g'
0000000000016c92         db  0xff ; '.'
0000000000016c93         db  0xff ; '.'
0000000000016c94         db  0x2c ; ','
0000000000016c95         db  0x67 ; 'g'
0000000000016c96         db  0xff ; '.'
0000000000016c97         db  0xff ; '.'
0000000000016c98         db  0x84 ; '.'
0000000000016c99         db  0x67 ; 'g'
0000000000016c9a         db  0xff ; '.'
0000000000016c9b         db  0xff ; '.'
0000000000016c9c         db  0x5c ; '\'
0000000000016c9d         db  0x66 ; 'f'
0000000000016c9e         db  0xff ; '.'
0000000000016c9f         db  0xff ; '.'
0000000000016ca0         db  0x2c ; ','
0000000000016ca1         db  0x67 ; 'g'
0000000000016ca2         db  0xff ; '.'
0000000000016ca3         db  0xff ; '.'
0000000000016ca4         db  0x84 ; '.'
0000000000016ca5         db  0x67 ; 'g'
0000000000016ca6         db  0xff ; '.'
0000000000016ca7         db  0xff ; '.'
0000000000016ca8         db  0x2c ; ','
0000000000016ca9         db  0x67 ; 'g'
0000000000016caa         db  0xff ; '.'
0000000000016cab         db  0xff ; '.'
0000000000016cac         db  0x84 ; '.'
0000000000016cad         db  0x67 ; 'g'
0000000000016cae         db  0xff ; '.'
0000000000016caf         db  0xff ; '.'
0000000000016cb0         db  0x2c ; ','
0000000000016cb1         db  0x67 ; 'g'
0000000000016cb2         db  0xff ; '.'
0000000000016cb3         db  0xff ; '.'
0000000000016cb4         db  0x2c ; ','
0000000000016cb5         db  0x67 ; 'g'
0000000000016cb6         db  0xff ; '.'
0000000000016cb7         db  0xff ; '.'
0000000000016cb8         db  0x2c ; ','
0000000000016cb9         db  0x67 ; 'g'
0000000000016cba         db  0xff ; '.'
0000000000016cbb         db  0xff ; '.'
0000000000016cbc         db  0x2c ; ','
0000000000016cbd         db  0x67 ; 'g'
0000000000016cbe         db  0xff ; '.'
0000000000016cbf         db  0xff ; '.'
0000000000016cc0         db  0x2c ; ','
0000000000016cc1         db  0x67 ; 'g'
0000000000016cc2         db  0xff ; '.'
0000000000016cc3         db  0xff ; '.'
0000000000016cc4         db  0x2c ; ','
0000000000016cc5         db  0x67 ; 'g'
0000000000016cc6         db  0xff ; '.'
0000000000016cc7         db  0xff ; '.'
0000000000016cc8         db  0x2c ; ','
0000000000016cc9         db  0x67 ; 'g'
0000000000016cca         db  0xff ; '.'
0000000000016ccb         db  0xff ; '.'
0000000000016ccc         db  0x2c ; ','
0000000000016ccd         db  0x67 ; 'g'
0000000000016cce         db  0xff ; '.'
0000000000016ccf         db  0xff ; '.'
0000000000016cd0         db  0x2c ; ','
0000000000016cd1         db  0x67 ; 'g'
0000000000016cd2         db  0xff ; '.'
0000000000016cd3         db  0xff ; '.'
0000000000016cd4         db  0x2c ; ','
0000000000016cd5         db  0x67 ; 'g'
0000000000016cd6         db  0xff ; '.'
0000000000016cd7         db  0xff ; '.'
0000000000016cd8         db  0x2c ; ','
0000000000016cd9         db  0x67 ; 'g'
0000000000016cda         db  0xff ; '.'
0000000000016cdb         db  0xff ; '.'
0000000000016cdc         db  0x2c ; ','
0000000000016cdd         db  0x67 ; 'g'
0000000000016cde         db  0xff ; '.'
0000000000016cdf         db  0xff ; '.'
0000000000016ce0         db  0x2c ; ','
0000000000016ce1         db  0x67 ; 'g'
0000000000016ce2         db  0xff ; '.'
0000000000016ce3         db  0xff ; '.'
0000000000016ce4         db  0x2c ; ','
0000000000016ce5         db  0x67 ; 'g'
0000000000016ce6         db  0xff ; '.'
0000000000016ce7         db  0xff ; '.'
0000000000016ce8         db  0x2c ; ','
0000000000016ce9         db  0x67 ; 'g'
0000000000016cea         db  0xff ; '.'
0000000000016ceb         db  0xff ; '.'
0000000000016cec         db  0x2c ; ','
0000000000016ced         db  0x67 ; 'g'
0000000000016cee         db  0xff ; '.'
0000000000016cef         db  0xff ; '.'
0000000000016cf0         db  0x2c ; ','
0000000000016cf1         db  0x67 ; 'g'
0000000000016cf2         db  0xff ; '.'
0000000000016cf3         db  0xff ; '.'
0000000000016cf4         db  0x2c ; ','
0000000000016cf5         db  0x67 ; 'g'
0000000000016cf6         db  0xff ; '.'
0000000000016cf7         db  0xff ; '.'
0000000000016cf8         db  0x2c ; ','
0000000000016cf9         db  0x67 ; 'g'
0000000000016cfa         db  0xff ; '.'
0000000000016cfb         db  0xff ; '.'
0000000000016cfc         db  0x2c ; ','
0000000000016cfd         db  0x67 ; 'g'
0000000000016cfe         db  0xff ; '.'
0000000000016cff         db  0xff ; '.'
0000000000016d00         db  0x2c ; ','
0000000000016d01         db  0x67 ; 'g'
0000000000016d02         db  0xff ; '.'
0000000000016d03         db  0xff ; '.'
0000000000016d04         db  0x2c ; ','
0000000000016d05         db  0x67 ; 'g'
0000000000016d06         db  0xff ; '.'
0000000000016d07         db  0xff ; '.'
0000000000016d08         db  0x2c ; ','
0000000000016d09         db  0x67 ; 'g'
0000000000016d0a         db  0xff ; '.'
0000000000016d0b         db  0xff ; '.'
0000000000016d0c         db  0x2c ; ','
0000000000016d0d         db  0x67 ; 'g'
0000000000016d0e         db  0xff ; '.'
0000000000016d0f         db  0xff ; '.'
0000000000016d10         db  0x2c ; ','
0000000000016d11         db  0x67 ; 'g'
0000000000016d12         db  0xff ; '.'
0000000000016d13         db  0xff ; '.'
0000000000016d14         db  0x2c ; ','
0000000000016d15         db  0x67 ; 'g'
0000000000016d16         db  0xff ; '.'
0000000000016d17         db  0xff ; '.'
0000000000016d18         db  0xe7 ; '.'
0000000000016d19         db  0x64 ; 'd'
0000000000016d1a         db  0xff ; '.'
0000000000016d1b         db  0xff ; '.'
0000000000016d1c         db  0x84 ; '.'
0000000000016d1d         db  0x67 ; 'g'
0000000000016d1e         db  0xff ; '.'
0000000000016d1f         db  0xff ; '.'
0000000000016d20         db  0xe7 ; '.'
0000000000016d21         db  0x64 ; 'd'
0000000000016d22         db  0xff ; '.'
0000000000016d23         db  0xff ; '.'
0000000000016d24         db  0x54 ; 'T'
0000000000016d25         db  0x67 ; 'g'
0000000000016d26         db  0xff ; '.'
0000000000016d27         db  0xff ; '.'
0000000000016d28         db  0xd8 ; '.'                                         ; DATA XREF=sub_d300+137
0000000000016d29         db  0x66 ; 'f'
0000000000016d2a         db  0xff ; '.'
0000000000016d2b         db  0xff ; '.'
0000000000016d2c         db  0xe8 ; '.'
0000000000016d2d         db  0x65 ; 'e'
0000000000016d2e         db  0xff ; '.'
0000000000016d2f         db  0xff ; '.'
0000000000016d30         db  0xe8 ; '.'
0000000000016d31         db  0x65 ; 'e'
0000000000016d32         db  0xff ; '.'
0000000000016d33         db  0xff ; '.'
0000000000016d34         db  0xe8 ; '.'
0000000000016d35         db  0x65 ; 'e'
0000000000016d36         db  0xff ; '.'
0000000000016d37         db  0xff ; '.'
0000000000016d38         db  0xe8 ; '.'
0000000000016d39         db  0x65 ; 'e'
0000000000016d3a         db  0xff ; '.'
0000000000016d3b         db  0xff ; '.'
0000000000016d3c         db  0xe8 ; '.'
0000000000016d3d         db  0x65 ; 'e'
0000000000016d3e         db  0xff ; '.'
0000000000016d3f         db  0xff ; '.'
0000000000016d40         db  0xe8 ; '.'
0000000000016d41         db  0x65 ; 'e'
0000000000016d42         db  0xff ; '.'
0000000000016d43         db  0xff ; '.'
0000000000016d44         db  0xc8 ; '.'
0000000000016d45         db  0x66 ; 'f'
0000000000016d46         db  0xff ; '.'
0000000000016d47         db  0xff ; '.'
0000000000016d48         db  0x18 ; '.'
0000000000016d49         db  0x68 ; 'h'
0000000000016d4a         db  0xff ; '.'
0000000000016d4b         db  0xff ; '.'
0000000000016d4c         db  0x00 ; '.'
0000000000016d4d         db  0x68 ; 'h'
0000000000016d4e         db  0xff ; '.'
0000000000016d4f         db  0xff ; '.'
0000000000016d50         db  0xb0 ; '.'
0000000000016d51         db  0x66 ; 'f'
0000000000016d52         db  0xff ; '.'
0000000000016d53         db  0xff ; '.'
0000000000016d54         db  0xf0 ; '.'
0000000000016d55         db  0x67 ; 'g'
0000000000016d56         db  0xff ; '.'
0000000000016d57         db  0xff ; '.'
0000000000016d58         db  0x98 ; '.'
0000000000016d59         db  0x66 ; 'f'
0000000000016d5a         db  0xff ; '.'
0000000000016d5b         db  0xff ; '.'
0000000000016d5c         db  0xd8 ; '.'
0000000000016d5d         db  0x67 ; 'g'
0000000000016d5e         db  0xff ; '.'
0000000000016d5f         db  0xff ; '.'
0000000000016d60         db  0xe8 ; '.'
0000000000016d61         db  0x65 ; 'e'
0000000000016d62         db  0xff ; '.'
0000000000016d63         db  0xff ; '.'
0000000000016d64         db  0xe8 ; '.'
0000000000016d65         db  0x65 ; 'e'
0000000000016d66         db  0xff ; '.'
0000000000016d67         db  0xff ; '.'
0000000000016d68         db  0xe8 ; '.'
0000000000016d69         db  0x65 ; 'e'
0000000000016d6a         db  0xff ; '.'
0000000000016d6b         db  0xff ; '.'
0000000000016d6c         db  0xe8 ; '.'
0000000000016d6d         db  0x65 ; 'e'
0000000000016d6e         db  0xff ; '.'
0000000000016d6f         db  0xff ; '.'
0000000000016d70         db  0xe8 ; '.'
0000000000016d71         db  0x65 ; 'e'
0000000000016d72         db  0xff ; '.'
0000000000016d73         db  0xff ; '.'
0000000000016d74         db  0xe8 ; '.'
0000000000016d75         db  0x65 ; 'e'
0000000000016d76         db  0xff ; '.'
0000000000016d77         db  0xff ; '.'
0000000000016d78         db  0xe8 ; '.'
0000000000016d79         db  0x65 ; 'e'
0000000000016d7a         db  0xff ; '.'
0000000000016d7b         db  0xff ; '.'
0000000000016d7c         db  0xe8 ; '.'
0000000000016d7d         db  0x65 ; 'e'
0000000000016d7e         db  0xff ; '.'
0000000000016d7f         db  0xff ; '.'
0000000000016d80         db  0xe8 ; '.'
0000000000016d81         db  0x65 ; 'e'
0000000000016d82         db  0xff ; '.'
0000000000016d83         db  0xff ; '.'
0000000000016d84         db  0xe8 ; '.'
0000000000016d85         db  0x65 ; 'e'
0000000000016d86         db  0xff ; '.'
0000000000016d87         db  0xff ; '.'
0000000000016d88         db  0xe8 ; '.'
0000000000016d89         db  0x65 ; 'e'
0000000000016d8a         db  0xff ; '.'
0000000000016d8b         db  0xff ; '.'
0000000000016d8c         db  0xe8 ; '.'
0000000000016d8d         db  0x65 ; 'e'
0000000000016d8e         db  0xff ; '.'
0000000000016d8f         db  0xff ; '.'
0000000000016d90         db  0xe8 ; '.'
0000000000016d91         db  0x65 ; 'e'
0000000000016d92         db  0xff ; '.'
0000000000016d93         db  0xff ; '.'
0000000000016d94         db  0xe8 ; '.'
0000000000016d95         db  0x65 ; 'e'
0000000000016d96         db  0xff ; '.'
0000000000016d97         db  0xff ; '.'
0000000000016d98         db  0xe8 ; '.'
0000000000016d99         db  0x65 ; 'e'
0000000000016d9a         db  0xff ; '.'
0000000000016d9b         db  0xff ; '.'
0000000000016d9c         db  0xe8 ; '.'
0000000000016d9d         db  0x65 ; 'e'
0000000000016d9e         db  0xff ; '.'
0000000000016d9f         db  0xff ; '.'
0000000000016da0         db  0xe8 ; '.'
0000000000016da1         db  0x65 ; 'e'
0000000000016da2         db  0xff ; '.'
0000000000016da3         db  0xff ; '.'
0000000000016da4         db  0xe8 ; '.'
0000000000016da5         db  0x65 ; 'e'
0000000000016da6         db  0xff ; '.'
0000000000016da7         db  0xff ; '.'
0000000000016da8         db  0xc0 ; '.'
0000000000016da9         db  0x67 ; 'g'
0000000000016daa         db  0xff ; '.'
0000000000016dab         db  0xff ; '.'
0000000000016dac         db  0xa8 ; '.'
0000000000016dad         db  0x67 ; 'g'
0000000000016dae         db  0xff ; '.'
0000000000016daf         db  0xff ; '.'
0000000000016db0         db  0xa8 ; '.'
0000000000016db1         db  0x67 ; 'g'
0000000000016db2         db  0xff ; '.'
0000000000016db3         db  0xff ; '.'
0000000000016db4         db  0x90 ; '.'
0000000000016db5         db  0x67 ; 'g'
0000000000016db6         db  0xff ; '.'
0000000000016db7         db  0xff ; '.'
0000000000016db8         db  0xa8 ; '.'
0000000000016db9         db  0x67 ; 'g'
0000000000016dba         db  0xff ; '.'
0000000000016dbb         db  0xff ; '.'
0000000000016dbc         db  0x78 ; 'x'
0000000000016dbd         db  0x67 ; 'g'
0000000000016dbe         db  0xff ; '.'
0000000000016dbf         db  0xff ; '.'
0000000000016dc0         db  0xa8 ; '.'
0000000000016dc1         db  0x67 ; 'g'
0000000000016dc2         db  0xff ; '.'
0000000000016dc3         db  0xff ; '.'
0000000000016dc4         db  0xe8 ; '.'
0000000000016dc5         db  0x63 ; 'c'
0000000000016dc6         db  0xff ; '.'
0000000000016dc7         db  0xff ; '.'
0000000000016dc8         db  0xa8 ; '.'
0000000000016dc9         db  0x67 ; 'g'
0000000000016dca         db  0xff ; '.'
0000000000016dcb         db  0xff ; '.'
0000000000016dcc         db  0xa8 ; '.'
0000000000016dcd         db  0x67 ; 'g'
0000000000016dce         db  0xff ; '.'
0000000000016dcf         db  0xff ; '.'
0000000000016dd0         db  0xa8 ; '.'
0000000000016dd1         db  0x67 ; 'g'
0000000000016dd2         db  0xff ; '.'
0000000000016dd3         db  0xff ; '.'
0000000000016dd4         db  0x78 ; 'x'
0000000000016dd5         db  0x67 ; 'g'
0000000000016dd6         db  0xff ; '.'
0000000000016dd7         db  0xff ; '.'
0000000000016dd8         db  0x78 ; 'x'
0000000000016dd9         db  0x67 ; 'g'
0000000000016dda         db  0xff ; '.'
0000000000016ddb         db  0xff ; '.'
0000000000016ddc         db  0x78 ; 'x'
0000000000016ddd         db  0x67 ; 'g'
0000000000016dde         db  0xff ; '.'
0000000000016ddf         db  0xff ; '.'
0000000000016de0         db  0x78 ; 'x'
0000000000016de1         db  0x67 ; 'g'
0000000000016de2         db  0xff ; '.'
0000000000016de3         db  0xff ; '.'
0000000000016de4         db  0x78 ; 'x'
0000000000016de5         db  0x67 ; 'g'
0000000000016de6         db  0xff ; '.'
0000000000016de7         db  0xff ; '.'
0000000000016de8         db  0x78 ; 'x'
0000000000016de9         db  0x67 ; 'g'
0000000000016dea         db  0xff ; '.'
0000000000016deb         db  0xff ; '.'
0000000000016dec         db  0x78 ; 'x'
0000000000016ded         db  0x67 ; 'g'
0000000000016dee         db  0xff ; '.'
0000000000016def         db  0xff ; '.'
0000000000016df0         db  0x78 ; 'x'
0000000000016df1         db  0x67 ; 'g'
0000000000016df2         db  0xff ; '.'
0000000000016df3         db  0xff ; '.'
0000000000016df4         db  0x78 ; 'x'
0000000000016df5         db  0x67 ; 'g'
0000000000016df6         db  0xff ; '.'
0000000000016df7         db  0xff ; '.'
0000000000016df8         db  0x78 ; 'x'
0000000000016df9         db  0x67 ; 'g'
0000000000016dfa         db  0xff ; '.'
0000000000016dfb         db  0xff ; '.'
0000000000016dfc         db  0x78 ; 'x'
0000000000016dfd         db  0x67 ; 'g'
0000000000016dfe         db  0xff ; '.'
0000000000016dff         db  0xff ; '.'
0000000000016e00         db  0x78 ; 'x'
0000000000016e01         db  0x67 ; 'g'
0000000000016e02         db  0xff ; '.'
0000000000016e03         db  0xff ; '.'
0000000000016e04         db  0x78 ; 'x'
0000000000016e05         db  0x67 ; 'g'
0000000000016e06         db  0xff ; '.'
0000000000016e07         db  0xff ; '.'
0000000000016e08         db  0x78 ; 'x'
0000000000016e09         db  0x67 ; 'g'
0000000000016e0a         db  0xff ; '.'
0000000000016e0b         db  0xff ; '.'
0000000000016e0c         db  0x78 ; 'x'
0000000000016e0d         db  0x67 ; 'g'
0000000000016e0e         db  0xff ; '.'
0000000000016e0f         db  0xff ; '.'
0000000000016e10         db  0x78 ; 'x'
0000000000016e11         db  0x67 ; 'g'
0000000000016e12         db  0xff ; '.'
0000000000016e13         db  0xff ; '.'
0000000000016e14         db  0xa8 ; '.'
0000000000016e15         db  0x67 ; 'g'
0000000000016e16         db  0xff ; '.'
0000000000016e17         db  0xff ; '.'
0000000000016e18         db  0xa8 ; '.'
0000000000016e19         db  0x67 ; 'g'
0000000000016e1a         db  0xff ; '.'
0000000000016e1b         db  0xff ; '.'
0000000000016e1c         db  0xa8 ; '.'
0000000000016e1d         db  0x67 ; 'g'
0000000000016e1e         db  0xff ; '.'
0000000000016e1f         db  0xff ; '.'
0000000000016e20         db  0xa8 ; '.'
0000000000016e21         db  0x67 ; 'g'
0000000000016e22         db  0xff ; '.'
0000000000016e23         db  0xff ; '.'
0000000000016e24         db  0xb8 ; '.'
0000000000016e25         db  0x63 ; 'c'
0000000000016e26         db  0xff ; '.'
0000000000016e27         db  0xff ; '.'
0000000000016e28         db  0xe8 ; '.'
0000000000016e29         db  0x65 ; 'e'
0000000000016e2a         db  0xff ; '.'
0000000000016e2b         db  0xff ; '.'
0000000000016e2c         db  0x78 ; 'x'
0000000000016e2d         db  0x67 ; 'g'
0000000000016e2e         db  0xff ; '.'
0000000000016e2f         db  0xff ; '.'
0000000000016e30         db  0x78 ; 'x'
0000000000016e31         db  0x67 ; 'g'
0000000000016e32         db  0xff ; '.'
0000000000016e33         db  0xff ; '.'
0000000000016e34         db  0x78 ; 'x'
0000000000016e35         db  0x67 ; 'g'
0000000000016e36         db  0xff ; '.'
0000000000016e37         db  0xff ; '.'
0000000000016e38         db  0x78 ; 'x'
0000000000016e39         db  0x67 ; 'g'
0000000000016e3a         db  0xff ; '.'
0000000000016e3b         db  0xff ; '.'
0000000000016e3c         db  0x78 ; 'x'
0000000000016e3d         db  0x67 ; 'g'
0000000000016e3e         db  0xff ; '.'
0000000000016e3f         db  0xff ; '.'
0000000000016e40         db  0x78 ; 'x'
0000000000016e41         db  0x67 ; 'g'
0000000000016e42         db  0xff ; '.'
0000000000016e43         db  0xff ; '.'
0000000000016e44         db  0x78 ; 'x'
0000000000016e45         db  0x67 ; 'g'
0000000000016e46         db  0xff ; '.'
0000000000016e47         db  0xff ; '.'
0000000000016e48         db  0x78 ; 'x'
0000000000016e49         db  0x67 ; 'g'
0000000000016e4a         db  0xff ; '.'
0000000000016e4b         db  0xff ; '.'
0000000000016e4c         db  0x78 ; 'x'
0000000000016e4d         db  0x67 ; 'g'
0000000000016e4e         db  0xff ; '.'
0000000000016e4f         db  0xff ; '.'
0000000000016e50         db  0x78 ; 'x'
0000000000016e51         db  0x67 ; 'g'
0000000000016e52         db  0xff ; '.'
0000000000016e53         db  0xff ; '.'
0000000000016e54         db  0x78 ; 'x'
0000000000016e55         db  0x67 ; 'g'
0000000000016e56         db  0xff ; '.'
0000000000016e57         db  0xff ; '.'
0000000000016e58         db  0x78 ; 'x'
0000000000016e59         db  0x67 ; 'g'
0000000000016e5a         db  0xff ; '.'
0000000000016e5b         db  0xff ; '.'
0000000000016e5c         db  0x78 ; 'x'
0000000000016e5d         db  0x67 ; 'g'
0000000000016e5e         db  0xff ; '.'
0000000000016e5f         db  0xff ; '.'
0000000000016e60         db  0x78 ; 'x'
0000000000016e61         db  0x67 ; 'g'
0000000000016e62         db  0xff ; '.'
0000000000016e63         db  0xff ; '.'
0000000000016e64         db  0x78 ; 'x'
0000000000016e65         db  0x67 ; 'g'
0000000000016e66         db  0xff ; '.'
0000000000016e67         db  0xff ; '.'
0000000000016e68         db  0x78 ; 'x'
0000000000016e69         db  0x67 ; 'g'
0000000000016e6a         db  0xff ; '.'
0000000000016e6b         db  0xff ; '.'
0000000000016e6c         db  0x78 ; 'x'
0000000000016e6d         db  0x67 ; 'g'
0000000000016e6e         db  0xff ; '.'
0000000000016e6f         db  0xff ; '.'
0000000000016e70         db  0x78 ; 'x'
0000000000016e71         db  0x67 ; 'g'
0000000000016e72         db  0xff ; '.'
0000000000016e73         db  0xff ; '.'
0000000000016e74         db  0x78 ; 'x'
0000000000016e75         db  0x67 ; 'g'
0000000000016e76         db  0xff ; '.'
0000000000016e77         db  0xff ; '.'
0000000000016e78         db  0x78 ; 'x'
0000000000016e79         db  0x67 ; 'g'
0000000000016e7a         db  0xff ; '.'
0000000000016e7b         db  0xff ; '.'
0000000000016e7c         db  0x78 ; 'x'
0000000000016e7d         db  0x67 ; 'g'
0000000000016e7e         db  0xff ; '.'
0000000000016e7f         db  0xff ; '.'
0000000000016e80         db  0x78 ; 'x'
0000000000016e81         db  0x67 ; 'g'
0000000000016e82         db  0xff ; '.'
0000000000016e83         db  0xff ; '.'
0000000000016e84         db  0x78 ; 'x'
0000000000016e85         db  0x67 ; 'g'
0000000000016e86         db  0xff ; '.'
0000000000016e87         db  0xff ; '.'
0000000000016e88         db  0x78 ; 'x'
0000000000016e89         db  0x67 ; 'g'
0000000000016e8a         db  0xff ; '.'
0000000000016e8b         db  0xff ; '.'
0000000000016e8c         db  0x78 ; 'x'
0000000000016e8d         db  0x67 ; 'g'
0000000000016e8e         db  0xff ; '.'
0000000000016e8f         db  0xff ; '.'
0000000000016e90         db  0x78 ; 'x'
0000000000016e91         db  0x67 ; 'g'
0000000000016e92         db  0xff ; '.'
0000000000016e93         db  0xff ; '.'
0000000000016e94         db  0xa8 ; '.'
0000000000016e95         db  0x67 ; 'g'
0000000000016e96         db  0xff ; '.'
0000000000016e97         db  0xff ; '.'
0000000000016e98         db  0x78 ; 'x'
0000000000016e99         db  0x66 ; 'f'
0000000000016e9a         db  0xff ; '.'
0000000000016e9b         db  0xff ; '.'
0000000000016e9c         db  0x78 ; 'x'
0000000000016e9d         db  0x67 ; 'g'
0000000000016e9e         db  0xff ; '.'
0000000000016e9f         db  0xff ; '.'
0000000000016ea0         db  0xa8 ; '.'
0000000000016ea1         db  0x67 ; 'g'
0000000000016ea2         db  0xff ; '.'
0000000000016ea3         db  0xff ; '.'
0000000000016ea4         db  0x78 ; 'x'
0000000000016ea5         db  0x67 ; 'g'
0000000000016ea6         db  0xff ; '.'
0000000000016ea7         db  0xff ; '.'
0000000000016ea8         db  0xa8 ; '.'
0000000000016ea9         db  0x67 ; 'g'
0000000000016eaa         db  0xff ; '.'
0000000000016eab         db  0xff ; '.'
0000000000016eac         db  0x78 ; 'x'
0000000000016ead         db  0x67 ; 'g'
0000000000016eae         db  0xff ; '.'
0000000000016eaf         db  0xff ; '.'
0000000000016eb0         db  0x78 ; 'x'
0000000000016eb1         db  0x67 ; 'g'
0000000000016eb2         db  0xff ; '.'
0000000000016eb3         db  0xff ; '.'
0000000000016eb4         db  0x78 ; 'x'
0000000000016eb5         db  0x67 ; 'g'
0000000000016eb6         db  0xff ; '.'
0000000000016eb7         db  0xff ; '.'
0000000000016eb8         db  0x78 ; 'x'
0000000000016eb9         db  0x67 ; 'g'
0000000000016eba         db  0xff ; '.'
0000000000016ebb         db  0xff ; '.'
0000000000016ebc         db  0x78 ; 'x'
0000000000016ebd         db  0x67 ; 'g'
0000000000016ebe         db  0xff ; '.'
0000000000016ebf         db  0xff ; '.'
0000000000016ec0         db  0x78 ; 'x'
0000000000016ec1         db  0x67 ; 'g'
0000000000016ec2         db  0xff ; '.'
0000000000016ec3         db  0xff ; '.'
0000000000016ec4         db  0x78 ; 'x'
0000000000016ec5         db  0x67 ; 'g'
0000000000016ec6         db  0xff ; '.'
0000000000016ec7         db  0xff ; '.'
0000000000016ec8         db  0x78 ; 'x'
0000000000016ec9         db  0x67 ; 'g'
0000000000016eca         db  0xff ; '.'
0000000000016ecb         db  0xff ; '.'
0000000000016ecc         db  0x78 ; 'x'
0000000000016ecd         db  0x67 ; 'g'
0000000000016ece         db  0xff ; '.'
0000000000016ecf         db  0xff ; '.'
0000000000016ed0         db  0x78 ; 'x'
0000000000016ed1         db  0x67 ; 'g'
0000000000016ed2         db  0xff ; '.'
0000000000016ed3         db  0xff ; '.'
0000000000016ed4         db  0x78 ; 'x'
0000000000016ed5         db  0x67 ; 'g'
0000000000016ed6         db  0xff ; '.'
0000000000016ed7         db  0xff ; '.'
0000000000016ed8         db  0x78 ; 'x'
0000000000016ed9         db  0x67 ; 'g'
0000000000016eda         db  0xff ; '.'
0000000000016edb         db  0xff ; '.'
0000000000016edc         db  0x78 ; 'x'
0000000000016edd         db  0x67 ; 'g'
0000000000016ede         db  0xff ; '.'
0000000000016edf         db  0xff ; '.'
0000000000016ee0         db  0x78 ; 'x'
0000000000016ee1         db  0x67 ; 'g'
0000000000016ee2         db  0xff ; '.'
0000000000016ee3         db  0xff ; '.'
0000000000016ee4         db  0x78 ; 'x'
0000000000016ee5         db  0x67 ; 'g'
0000000000016ee6         db  0xff ; '.'
0000000000016ee7         db  0xff ; '.'
0000000000016ee8         db  0x78 ; 'x'
0000000000016ee9         db  0x67 ; 'g'
0000000000016eea         db  0xff ; '.'
0000000000016eeb         db  0xff ; '.'
0000000000016eec         db  0x78 ; 'x'
0000000000016eed         db  0x67 ; 'g'
0000000000016eee         db  0xff ; '.'
0000000000016eef         db  0xff ; '.'
0000000000016ef0         db  0x78 ; 'x'
0000000000016ef1         db  0x67 ; 'g'
0000000000016ef2         db  0xff ; '.'
0000000000016ef3         db  0xff ; '.'
0000000000016ef4         db  0x78 ; 'x'
0000000000016ef5         db  0x67 ; 'g'
0000000000016ef6         db  0xff ; '.'
0000000000016ef7         db  0xff ; '.'
0000000000016ef8         db  0x78 ; 'x'
0000000000016ef9         db  0x67 ; 'g'
0000000000016efa         db  0xff ; '.'
0000000000016efb         db  0xff ; '.'
0000000000016efc         db  0x78 ; 'x'
0000000000016efd         db  0x67 ; 'g'
0000000000016efe         db  0xff ; '.'
0000000000016eff         db  0xff ; '.'
0000000000016f00         db  0x78 ; 'x'
0000000000016f01         db  0x67 ; 'g'
0000000000016f02         db  0xff ; '.'
0000000000016f03         db  0xff ; '.'
0000000000016f04         db  0x78 ; 'x'
0000000000016f05         db  0x67 ; 'g'
0000000000016f06         db  0xff ; '.'
0000000000016f07         db  0xff ; '.'
0000000000016f08         db  0x78 ; 'x'
0000000000016f09         db  0x67 ; 'g'
0000000000016f0a         db  0xff ; '.'
0000000000016f0b         db  0xff ; '.'
0000000000016f0c         db  0x78 ; 'x'
0000000000016f0d         db  0x67 ; 'g'
0000000000016f0e         db  0xff ; '.'
0000000000016f0f         db  0xff ; '.'
0000000000016f10         db  0x78 ; 'x'
0000000000016f11         db  0x67 ; 'g'
0000000000016f12         db  0xff ; '.'
0000000000016f13         db  0xff ; '.'
0000000000016f14         db  0xe8 ; '.'
0000000000016f15         db  0x62 ; 'b'
0000000000016f16         db  0xff ; '.'
0000000000016f17         db  0xff ; '.'
0000000000016f18         db  0xa8 ; '.'
0000000000016f19         db  0x67 ; 'g'
0000000000016f1a         db  0xff ; '.'
0000000000016f1b         db  0xff ; '.'
0000000000016f1c         db  0xe8 ; '.'
0000000000016f1d         db  0x62 ; 'b'
0000000000016f1e         db  0xff ; '.'
0000000000016f1f         db  0xff ; '.'
0000000000016f20         db  0x90 ; '.'
0000000000016f21         db  0x67 ; 'g'
0000000000016f22         db  0xff ; '.'
0000000000016f23         db  0xff ; '.'
0000000000016f24         db  0x00 ; '.'
0000000000016f25         db  0x00 ; '.'
0000000000016f26         db  0x00 ; '.'
0000000000016f27         db  0x00 ; '.'
0000000000016f28         db  0x00 ; '.'
0000000000016f29         db  0x00 ; '.'
0000000000016f2a         db  0x00 ; '.'
0000000000016f2b         db  0x00 ; '.'
0000000000016f2c         db  0x00 ; '.'
0000000000016f2d         db  0x00 ; '.'
0000000000016f2e         db  0x00 ; '.'
0000000000016f2f         db  0x00 ; '.'
0000000000016f30         db  0x00 ; '.'
0000000000016f31         db  0x00 ; '.'
0000000000016f32         db  0x00 ; '.'
0000000000016f33         db  0x00 ; '.'
0000000000016f34         db  0x00 ; '.'
0000000000016f35         db  0x00 ; '.'
0000000000016f36         db  0x00 ; '.'
0000000000016f37         db  0x00 ; '.'
0000000000016f38         db  0x00 ; '.'
0000000000016f39         db  0x00 ; '.'
0000000000016f3a         db  0x00 ; '.'
0000000000016f3b         db  0x00 ; '.'
0000000000016f3c         db  0x00 ; '.'
0000000000016f3d         db  0x00 ; '.'
0000000000016f3e         db  0x00 ; '.'
0000000000016f3f         db  0x00 ; '.'
                     quoting_style_vals:
0000000000016f40         db  0x00 ; '.'
0000000000016f41         db  0x00 ; '.'
0000000000016f42         db  0x00 ; '.'
0000000000016f43         db  0x00 ; '.'
0000000000016f44         db  0x01 ; '.'
0000000000016f45         db  0x00 ; '.'
0000000000016f46         db  0x00 ; '.'
0000000000016f47         db  0x00 ; '.'
0000000000016f48         db  0x02 ; '.'
0000000000016f49         db  0x00 ; '.'
0000000000016f4a         db  0x00 ; '.'
0000000000016f4b         db  0x00 ; '.'
0000000000016f4c         db  0x03 ; '.'
0000000000016f4d         db  0x00 ; '.'
0000000000016f4e         db  0x00 ; '.'
0000000000016f4f         db  0x00 ; '.'
0000000000016f50         db  0x04 ; '.'
0000000000016f51         db  0x00 ; '.'
0000000000016f52         db  0x00 ; '.'
0000000000016f53         db  0x00 ; '.'
0000000000016f54         db  0x05 ; '.'
0000000000016f55         db  0x00 ; '.'
0000000000016f56         db  0x00 ; '.'
0000000000016f57         db  0x00 ; '.'
0000000000016f58         db  0x06 ; '.'
0000000000016f59         db  0x00 ; '.'
0000000000016f5a         db  0x00 ; '.'
0000000000016f5b         db  0x00 ; '.'
0000000000016f5c         db  0x07 ; '.'
0000000000016f5d         db  0x00 ; '.'
0000000000016f5e         db  0x00 ; '.'
0000000000016f5f         db  0x00 ; '.'
0000000000016f60         db  0x08 ; '.'
0000000000016f61         db  0x00 ; '.'
0000000000016f62         db  0x00 ; '.'
0000000000016f63         db  0x00 ; '.'
0000000000016f64         db  0x09 ; '.'
0000000000016f65         db  0x00 ; '.'
0000000000016f66         db  0x00 ; '.'
0000000000016f67         db  0x00 ; '.'
                     aCoreutils831li_16f68:        // aCoreutils831li
0000000000016f68         db         "../coreutils-8.31/lib/tempname.c", 0       ; DATA XREF=gen_tempname_len+29
0000000000016f89         align      16
                     aInvalidKindInG:
0000000000016f90         db         "! \"invalid KIND in __gen_tempname\"", 0   ; DATA XREF=gen_tempname_len+36
0000000000016fb3         align      64
                     __PRETTY_FUNCTION__.5642:
0000000000016fc0         db         "gen_tempname_len", 0                       ; DATA XREF=gen_tempname_len+22
0000000000016fd1         align      32
                     letters:
0000000000016fe0         db         "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", 0 ; DATA XREF=try_tempname_len+144
                     aSSSn:
000000000001701f         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000001702b         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
0000000000017032         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
0000000000017033         db  0x43 ; 'C'
0000000000017034         db  0x29 ; ')'
0000000000017035         db  0x00 ; '.'
                     aWrittenBySn:
0000000000017036         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
0000000000017046         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000001705d         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
0000000000017079         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aSHomePageSn:
000000000001708e         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
00000000000170a2         align      8
                     aNlicenseGplv3G:
00000000000170a8         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
0000000000017174         align      8
                     aWrittenBySSSna:
0000000000017178         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_17198:        // aWrittenBySSSns
0000000000017198         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
00000000000171bc         align      64
                     aWrittenBySSSns_171c0:        // aWrittenBySSSns
00000000000171c0         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_171e8:        // aWrittenBySSSns
00000000000171e8         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
0000000000017214         align      8
                     aWrittenBySSSns_17218:        // aWrittenBySSSns
0000000000017218         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
0000000000017248         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000001727c         align      128
                     aWrittenBySSSns_17280:        // aWrittenBySSSns
0000000000017280         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
00000000000172bc         align      64
                     aGeneralHelpUsi:
00000000000172c0         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
0000000000017301         align      4
                     switch_table_17304:        // switch_table
0000000000017304         dd         version_etc_arn.loc_10786-switch_table_17304, version_etc_arn.loc_10818-switch_table_17304, version_etc_arn.loc_10858-switch_table_17304, version_etc_arn.loc_108a0-switch_table_17304 ; switch table used at 0x10704 containing 10 entries, DATA XREF=version_etc_arn+150
0000000000017314         dd         version_etc_arn.loc_108f0-switch_table_17304, version_etc_arn.loc_10948-switch_table_17304, version_etc_arn.loc_10978-switch_table_17304, version_etc_arn.loc_109e0-switch_table_17304
0000000000017324         dd         version_etc_arn.loc_10710-switch_table_17304, version_etc_arn.loc_107c0-switch_table_17304
000000000001732c         align      64
                     version_etc_copyright:
0000000000017340         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000001736f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li:
0000000000017380         db         "../coreutils-8.31/lib/xfts.c", 0           ; DATA XREF=sub_10f7f+8
                     aErrnoEinval:
000000000001739d         db         "errno != EINVAL", 0                        ; DATA XREF=sub_10f7f+15
00000000000173ad         align      16
                     __PRETTY_FUNCTION__.3434:
00000000000173b0         db         "xfts_open", 0                              ; DATA XREF=sub_10f7f+1
00000000000173ba         db  0x00 ; '.'
00000000000173bb         db  0x00 ; '.'
00000000000173bc         db  0x00 ; '.'
00000000000173bd         db  0x00 ; '.'
00000000000173be         db  0x00 ; '.'
00000000000173bf         db  0x00 ; '.'
                     CSWTCH.53:
00000000000173c0         db  0x00 ; '.'                                         ; DATA XREF=fts_build+372, fts_build+2486
00000000000173c1         db  0x10 ; '.'
00000000000173c2         db  0x00 ; '.'
00000000000173c3         db  0x00 ; '.'
00000000000173c4         db  0x00 ; '.'
00000000000173c5         db  0x20 ; ' '
00000000000173c6         db  0x00 ; '.'
00000000000173c7         db  0x00 ; '.'
00000000000173c8         db  0x00 ; '.'
00000000000173c9         db  0x00 ; '.'
00000000000173ca         db  0x00 ; '.'
00000000000173cb         db  0x00 ; '.'
00000000000173cc         db  0x00 ; '.'
00000000000173cd         db  0x40 ; '@'
00000000000173ce         db  0x00 ; '.'
00000000000173cf         db  0x00 ; '.'
00000000000173d0         db  0x00 ; '.'
00000000000173d1         db  0x00 ; '.'
00000000000173d2         db  0x00 ; '.'
00000000000173d3         db  0x00 ; '.'
00000000000173d4         db  0x00 ; '.'
00000000000173d5         db  0x60 ; '`'
00000000000173d6         db  0x00 ; '.'
00000000000173d7         db  0x00 ; '.'
00000000000173d8         db  0x00 ; '.'
00000000000173d9         db  0x00 ; '.'
00000000000173da         db  0x00 ; '.'
00000000000173db         db  0x00 ; '.'
00000000000173dc         db  0x00 ; '.'
00000000000173dd         db  0x80 ; '.'
00000000000173de         db  0x00 ; '.'
00000000000173df         db  0x00 ; '.'
00000000000173e0         db  0x00 ; '.'
00000000000173e1         db  0x00 ; '.'
00000000000173e2         db  0x00 ; '.'
00000000000173e3         db  0x00 ; '.'
00000000000173e4         db  0x00 ; '.'
00000000000173e5         db  0xa0 ; '.'
00000000000173e6         db  0x00 ; '.'
00000000000173e7         db  0x00 ; '.'
00000000000173e8         db  0x00 ; '.'
00000000000173e9         db  0x00 ; '.'
00000000000173ea         db  0x00 ; '.'
00000000000173eb         db  0x00 ; '.'
00000000000173ec         db  0x00 ; '.'
00000000000173ed         db  0xc0 ; '.'
00000000000173ee         db  0x00 ; '.'
00000000000173ef         db  0x00 ; '.'
                     aInvalidArgumen:
00000000000173f0         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
000000000001740b         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
0000000000017428         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
000000000001743d         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
0000000000017445         db  0x2c ; ','                                         ; DATA XREF=argmatch_valid+181
0000000000017446         db  0x20 ; ' '
0000000000017447         db  0x25 ; '%'                                         ; DATA XREF=copy_acl+114, close_stdin+242, close_stdout+143, same_nameat.part.0+223, same_nameat.part.0+263, xalloc_die+29
0000000000017448         db  0x73 ; 's'
0000000000017449         db  0x00 ; '.'
000000000001744a         db  0x00 ; '.'
000000000001744b         db  0x00 ; '.'
000000000001744c         db  0x00 ; '.'
000000000001744d         db  0x00 ; '.'
000000000001744e         db  0x00 ; '.'
000000000001744f         db  0x00 ; '.'
                     aCoreutils831li_17450:        // aCoreutils831li
0000000000017450         db         "../coreutils-8.31/lib/cycle-check.c", 0    ; DATA XREF=cycle_check+110
0000000000017474         align      8
                     aStatemagic9827:
0000000000017478         db         "state->magic == 9827862", 0                ; DATA XREF=cycle_check+117
                     __PRETTY_FUNCTION__.3994:
0000000000017490         db         "cycle_check", 0                            ; DATA XREF=cycle_check+103
000000000001749c         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000001749d         db  0x00 ; '.'
                     aPosix:
000000000001749e         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
00000000000174a4         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
                     aSEndOfFile:
00000000000174aa         db         "%s: end of file", 0                        ; DATA XREF=randread_error+77
                     aSReadError:
00000000000174ba         db         "%s: read error", 0                         ; DATA XREF=randread_error+37
                     aDevurandom:
00000000000174c9         db         "/dev/urandom", 0                           ; DATA XREF=randread_new+203
00000000000174d6         db  0x72 ; 'r'                                         ; DATA XREF=randread_new+50
00000000000174d7         db  0x62 ; 'b'
00000000000174d8         db  0x00 ; '.'
00000000000174d9         db  0x00 ; '.'
00000000000174da         db  0x00 ; '.'
00000000000174db         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0x174dc; 0x17d70[ (2196 bytes)
        ; File offset : [95452; 97648[ (2196 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

00000000000174dc         db  0x01 ; '.'
00000000000174dd         db  0x1b ; '.'
00000000000174de         db  0x03 ; '.'
00000000000174df         db  0x3b ; ';'
00000000000174e0         db  0x90 ; '.'
00000000000174e1         db  0x08 ; '.'
00000000000174e2         db  0x00 ; '.'
00000000000174e3         db  0x00 ; '.'
00000000000174e4         db  0x11 ; '.'
00000000000174e5         db  0x01 ; '.'
00000000000174e6         db  0x00 ; '.'
00000000000174e7         db  0x00 ; '.'
00000000000174e8         db  0x84 ; '.'
00000000000174e9         db  0xb0 ; '.'
00000000000174ea         db  0xfe ; '.'
00000000000174eb         db  0xff ; '.'
00000000000174ec         db  0xdc ; '.'
00000000000174ed         db  0x08 ; '.'
00000000000174ee         db  0x00 ; '.'
00000000000174ef         db  0x00 ; '.'
00000000000174f0         db  0xa4 ; '.'
00000000000174f1         db  0xb7 ; '.'
00000000000174f2         db  0xfe ; '.'
00000000000174f3         db  0xff ; '.'
00000000000174f4         db  0x04 ; '.'
00000000000174f5         db  0x09 ; '.'
00000000000174f6         db  0x00 ; '.'
00000000000174f7         db  0x00 ; '.'
00000000000174f8         db  0xb4 ; '.'
00000000000174f9         db  0xb7 ; '.'
00000000000174fa         db  0xfe ; '.'
00000000000174fb         db  0xff ; '.'
00000000000174fc         db  0x94 ; '.'
00000000000174fd         db  0x0b ; '.'
00000000000174fe         db  0x00 ; '.'
00000000000174ff         db  0x00 ; '.'
0000000000017500         db  0xca ; '.'
0000000000017501         db  0xb7 ; '.'
0000000000017502         db  0xfe ; '.'
0000000000017503         db  0xff ; '.'
0000000000017504         db  0xa8 ; '.'
0000000000017505         db  0x0b ; '.'
0000000000017506         db  0x00 ; '.'
0000000000017507         db  0x00 ; '.'
0000000000017508         db  0x04 ; '.'
0000000000017509         db  0xb8 ; '.'
000000000001750a         db  0xfe ; '.'
000000000001750b         db  0xff ; '.'
000000000001750c         db  0xb8 ; '.'
000000000001750d         db  0x09 ; '.'
000000000001750e         db  0x00 ; '.'
000000000001750f         db  0x00 ; '.'
0000000000017510         db  0xa4 ; '.'
0000000000017511         db  0xbf ; '.'
0000000000017512         db  0xfe ; '.'
0000000000017513         db  0xff ; '.'
0000000000017514         db  0xac ; '.'
0000000000017515         db  0x08 ; '.'
0000000000017516         db  0x00 ; '.'
0000000000017517         db  0x00 ; '.'
0000000000017518         db  0xb4 ; '.'
0000000000017519         db  0xc0 ; '.'
000000000001751a         db  0xfe ; '.'
000000000001751b         db  0xff ; '.'
000000000001751c         db  0x1c ; '.'
000000000001751d         db  0x09 ; '.'
000000000001751e         db  0x00 ; '.'
000000000001751f         db  0x00 ; '.'
0000000000017520         db  0x14 ; '.'
0000000000017521         db  0xc2 ; '.'
0000000000017522         db  0xfe ; '.'
0000000000017523         db  0xff ; '.'
0000000000017524         db  0x48 ; 'H'
0000000000017525         db  0x09 ; '.'
0000000000017526         db  0x00 ; '.'
0000000000017527         db  0x00 ; '.'
0000000000017528         db  0xa4 ; '.'
0000000000017529         db  0xc2 ; '.'
000000000001752a         db  0xfe ; '.'
000000000001752b         db  0xff ; '.'
000000000001752c         db  0x8c ; '.'
000000000001752d         db  0x09 ; '.'
000000000001752e         db  0x00 ; '.'
000000000001752f         db  0x00 ; '.'
0000000000017530         db  0xd4 ; '.'
0000000000017531         db  0xc6 ; '.'
0000000000017532         db  0xfe ; '.'
0000000000017533         db  0xff ; '.'
0000000000017534         db  0x14 ; '.'
0000000000017535         db  0x0a ; '.'
0000000000017536         db  0x00 ; '.'
0000000000017537         db  0x00 ; '.'
0000000000017538         db  0x24 ; '$'
0000000000017539         db  0xc9 ; '.'
000000000001753a         db  0xfe ; '.'
000000000001753b         db  0xff ; '.'
000000000001753c         db  0x50 ; 'P'
000000000001753d         db  0x0a ; '.'
000000000001753e         db  0x00 ; '.'
000000000001753f         db  0x00 ; '.'
0000000000017540         db  0xa4 ; '.'
0000000000017541         db  0xc9 ; '.'
0000000000017542         db  0xfe ; '.'
0000000000017543         db  0xff ; '.'
0000000000017544         db  0x74 ; 't'
0000000000017545         db  0x0a ; '.'
0000000000017546         db  0x00 ; '.'
0000000000017547         db  0x00 ; '.'
0000000000017548         db  0x74 ; 't'
0000000000017549         db  0xce ; '.'
000000000001754a         db  0xfe ; '.'
000000000001754b         db  0xff ; '.'
000000000001754c         db  0xc4 ; '.'
000000000001754d         db  0x0a ; '.'
000000000001754e         db  0x00 ; '.'
000000000001754f         db  0x00 ; '.'
0000000000017550         db  0xd4 ; '.'
0000000000017551         db  0xd6 ; '.'
0000000000017552         db  0xfe ; '.'
0000000000017553         db  0xff ; '.'
0000000000017554         db  0x14 ; '.'
0000000000017555         db  0x0b ; '.'
0000000000017556         db  0x00 ; '.'
0000000000017557         db  0x00 ; '.'
0000000000017558         db  0x24 ; '$'
0000000000017559         db  0xd7 ; '.'
000000000001755a         db  0xfe ; '.'
000000000001755b         db  0xff ; '.'
000000000001755c         db  0x38 ; '8'
000000000001755d         db  0x0b ; '.'
000000000001755e         db  0x00 ; '.'
000000000001755f         db  0x00 ; '.'
0000000000017560         db  0xd4 ; '.'
0000000000017561         db  0xd7 ; '.'
0000000000017562         db  0xfe ; '.'
0000000000017563         db  0xff ; '.'
0000000000017564         db  0x74 ; 't'
0000000000017565         db  0x0b ; '.'
0000000000017566         db  0x00 ; '.'
0000000000017567         db  0x00 ; '.'
0000000000017568         db  0x14 ; '.'
0000000000017569         db  0xd8 ; '.'
000000000001756a         db  0xfe ; '.'
000000000001756b         db  0xff ; '.'
000000000001756c         db  0xc0 ; '.'
000000000001756d         db  0x0b ; '.'
000000000001756e         db  0x00 ; '.'
000000000001756f         db  0x00 ; '.'
0000000000017570         db  0xd4 ; '.'
0000000000017571         db  0xd8 ; '.'
0000000000017572         db  0xfe ; '.'
0000000000017573         db  0xff ; '.'
0000000000017574         db  0xf8 ; '.'
0000000000017575         db  0x0b ; '.'
0000000000017576         db  0x00 ; '.'
0000000000017577         db  0x00 ; '.'
0000000000017578         db  0xe4 ; '.'
0000000000017579         db  0xd9 ; '.'
000000000001757a         db  0xfe ; '.'
000000000001757b         db  0xff ; '.'
000000000001757c         db  0x60 ; '`'
000000000001757d         db  0x0c ; '.'
000000000001757e         db  0x00 ; '.'
000000000001757f         db  0x00 ; '.'
0000000000017580         db  0x34 ; '4'
0000000000017581         db  0xdb ; '.'
0000000000017582         db  0xfe ; '.'
0000000000017583         db  0xff ; '.'
0000000000017584         db  0xb0 ; '.'
0000000000017585         db  0x0c ; '.'
0000000000017586         db  0x00 ; '.'
0000000000017587         db  0x00 ; '.'
0000000000017588         db  0xf4 ; '.'
0000000000017589         db  0xdb ; '.'
000000000001758a         db  0xfe ; '.'
000000000001758b         db  0xff ; '.'
000000000001758c         db  0x00 ; '.'
000000000001758d         db  0x0d ; '.'
000000000001758e         db  0x00 ; '.'
000000000001758f         db  0x00 ; '.'
0000000000017590         db  0x04 ; '.'
0000000000017591         db  0xe0 ; '.'
0000000000017592         db  0xfe ; '.'
0000000000017593         db  0xff ; '.'
0000000000017594         db  0x68 ; 'h'
0000000000017595         db  0x0d ; '.'
0000000000017596         db  0x00 ; '.'
0000000000017597         db  0x00 ; '.'
0000000000017598         db  0xd4 ; '.'
0000000000017599         db  0xe0 ; '.'
000000000001759a         db  0xfe ; '.'
000000000001759b         db  0xff ; '.'
000000000001759c         db  0xc4 ; '.'
000000000001759d         db  0x0d ; '.'
000000000001759e         db  0x00 ; '.'
000000000001759f         db  0x00 ; '.'
00000000000175a0         db  0x54 ; 'T'
00000000000175a1         db  0xe1 ; '.'
00000000000175a2         db  0xfe ; '.'
00000000000175a3         db  0xff ; '.'
00000000000175a4         db  0xfc ; '.'
00000000000175a5         db  0x0d ; '.'
00000000000175a6         db  0x00 ; '.'
00000000000175a7         db  0x00 ; '.'
00000000000175a8         db  0x84 ; '.'
00000000000175a9         db  0xe1 ; '.'
00000000000175aa         db  0xfe ; '.'
00000000000175ab         db  0xff ; '.'
00000000000175ac         db  0x18 ; '.'
00000000000175ad         db  0x0e ; '.'
00000000000175ae         db  0x00 ; '.'
00000000000175af         db  0x00 ; '.'
00000000000175b0         db  0xb4 ; '.'
00000000000175b1         db  0xe1 ; '.'
00000000000175b2         db  0xfe ; '.'
00000000000175b3         db  0xff ; '.'
00000000000175b4         db  0x34 ; '4'
00000000000175b5         db  0x0e ; '.'
00000000000175b6         db  0x00 ; '.'
00000000000175b7         db  0x00 ; '.'
00000000000175b8         db  0xf4 ; '.'
00000000000175b9         db  0xe1 ; '.'
00000000000175ba         db  0xfe ; '.'
00000000000175bb         db  0xff ; '.'
00000000000175bc         db  0x50 ; 'P'
00000000000175bd         db  0x0e ; '.'
00000000000175be         db  0x00 ; '.'
00000000000175bf         db  0x00 ; '.'
00000000000175c0         db  0x24 ; '$'
00000000000175c1         db  0xe2 ; '.'
00000000000175c2         db  0xfe ; '.'
00000000000175c3         db  0xff ; '.'
00000000000175c4         db  0x6c ; 'l'
00000000000175c5         db  0x0e ; '.'
00000000000175c6         db  0x00 ; '.'
00000000000175c7         db  0x00 ; '.'
00000000000175c8         db  0x34 ; '4'
00000000000175c9         db  0xe4 ; '.'
00000000000175ca         db  0xfe ; '.'
00000000000175cb         db  0xff ; '.'
00000000000175cc         db  0xec ; '.'
00000000000175cd         db  0x0e ; '.'
00000000000175ce         db  0x00 ; '.'
00000000000175cf         db  0x00 ; '.'
00000000000175d0         db  0x64 ; 'd'
00000000000175d1         db  0xe4 ; '.'
00000000000175d2         db  0xfe ; '.'
00000000000175d3         db  0xff ; '.'
00000000000175d4         db  0x0c ; '.'
00000000000175d5         db  0x0f ; '.'
00000000000175d6         db  0x00 ; '.'
00000000000175d7         db  0x00 ; '.'
00000000000175d8         db  0x74 ; 't'
00000000000175d9         db  0x25 ; '%'
00000000000175da         db  0xff ; '.'
00000000000175db         db  0xff ; '.'
00000000000175dc         db  0x3c ; '<'
00000000000175dd         db  0x0f ; '.'
00000000000175de         db  0x00 ; '.'
00000000000175df         db  0x00 ; '.'
00000000000175e0         db  0xe4 ; '.'
00000000000175e1         db  0x26 ; '&'
00000000000175e2         db  0xff ; '.'
00000000000175e3         db  0xff ; '.'
00000000000175e4         db  0x6c ; 'l'
00000000000175e5         db  0x0f ; '.'
00000000000175e6         db  0x00 ; '.'
00000000000175e7         db  0x00 ; '.'
00000000000175e8         db  0xf4 ; '.'
00000000000175e9         db  0x26 ; '&'
00000000000175ea         db  0xff ; '.'
00000000000175eb         db  0xff ; '.'
00000000000175ec         db  0x80 ; '.'
00000000000175ed         db  0x0f ; '.'
00000000000175ee         db  0x00 ; '.'
00000000000175ef         db  0x00 ; '.'
00000000000175f0         db  0x14 ; '.'
00000000000175f1         db  0x27 ; '''
00000000000175f2         db  0xff ; '.'
00000000000175f3         db  0xff ; '.'
00000000000175f4         db  0x94 ; '.'
00000000000175f5         db  0x0f ; '.'
00000000000175f6         db  0x00 ; '.'
00000000000175f7         db  0x00 ; '.'
00000000000175f8         db  0x34 ; '4'
00000000000175f9         db  0x27 ; '''
00000000000175fa         db  0xff ; '.'
00000000000175fb         db  0xff ; '.'
00000000000175fc         db  0xb0 ; '.'
00000000000175fd         db  0x0f ; '.'
00000000000175fe         db  0x00 ; '.'
00000000000175ff         db  0x00 ; '.'
0000000000017600         db  0xa4 ; '.'
0000000000017601         db  0x27 ; '''
0000000000017602         db  0xff ; '.'
0000000000017603         db  0xff ; '.'
0000000000017604         db  0xd4 ; '.'
0000000000017605         db  0x0f ; '.'
0000000000017606         db  0x00 ; '.'
0000000000017607         db  0x00 ; '.'
0000000000017608         db  0x04 ; '.'
0000000000017609         db  0x28 ; '('
000000000001760a         db  0xff ; '.'
000000000001760b         db  0xff ; '.'
000000000001760c         db  0xf0 ; '.'
000000000001760d         db  0x0f ; '.'
000000000001760e         db  0x00 ; '.'
000000000001760f         db  0x00 ; '.'
0000000000017610         db  0x84 ; '.'
0000000000017611         db  0x28 ; '('
0000000000017612         db  0xff ; '.'
0000000000017613         db  0xff ; '.'
0000000000017614         db  0x2c ; ','
0000000000017615         db  0x10 ; '.'
0000000000017616         db  0x00 ; '.'
0000000000017617         db  0x00 ; '.'
0000000000017618         db  0xc4 ; '.'
0000000000017619         db  0x28 ; '('
000000000001761a         db  0xff ; '.'
000000000001761b         db  0xff ; '.'
000000000001761c         db  0x48 ; 'H'
000000000001761d         db  0x10 ; '.'
000000000001761e         db  0x00 ; '.'
000000000001761f         db  0x00 ; '.'
0000000000017620         db  0xd4 ; '.'
0000000000017621         db  0x28 ; '('
0000000000017622         db  0xff ; '.'
0000000000017623         db  0xff ; '.'
0000000000017624         db  0x5c ; '\'
0000000000017625         db  0x10 ; '.'
0000000000017626         db  0x00 ; '.'
0000000000017627         db  0x00 ; '.'
0000000000017628         db  0x04 ; '.'
0000000000017629         db  0x29 ; ')'
000000000001762a         db  0xff ; '.'
000000000001762b         db  0xff ; '.'
000000000001762c         db  0x70 ; 'p'
000000000001762d         db  0x10 ; '.'
000000000001762e         db  0x00 ; '.'
000000000001762f         db  0x00 ; '.'
0000000000017630         db  0x14 ; '.'
0000000000017631         db  0x2c ; ','
0000000000017632         db  0xff ; '.'
0000000000017633         db  0xff ; '.'
0000000000017634         db  0xc4 ; '.'
0000000000017635         db  0x10 ; '.'
0000000000017636         db  0x00 ; '.'
0000000000017637         db  0x00 ; '.'
0000000000017638         db  0x34 ; '4'
0000000000017639         db  0x2c ; ','
000000000001763a         db  0xff ; '.'
000000000001763b         db  0xff ; '.'
000000000001763c         db  0xd8 ; '.'
000000000001763d         db  0x10 ; '.'
000000000001763e         db  0x00 ; '.'
000000000001763f         db  0x00 ; '.'
0000000000017640         db  0x94 ; '.'
0000000000017641         db  0x2c ; ','
0000000000017642         db  0xff ; '.'
0000000000017643         db  0xff ; '.'
0000000000017644         db  0x04 ; '.'
0000000000017645         db  0x11 ; '.'
0000000000017646         db  0x00 ; '.'
0000000000017647         db  0x00 ; '.'
0000000000017648         db  0xb4 ; '.'
0000000000017649         db  0x2c ; ','
000000000001764a         db  0xff ; '.'
000000000001764b         db  0xff ; '.'
000000000001764c         db  0x18 ; '.'
000000000001764d         db  0x11 ; '.'
000000000001764e         db  0x00 ; '.'
000000000001764f         db  0x00 ; '.'
0000000000017650         db  0x24 ; '$'
0000000000017651         db  0x2e ; '.'
0000000000017652         db  0xff ; '.'
0000000000017653         db  0xff ; '.'
0000000000017654         db  0x64 ; 'd'
0000000000017655         db  0x11 ; '.'
0000000000017656         db  0x00 ; '.'
0000000000017657         db  0x00 ; '.'
0000000000017658         db  0x84 ; '.'
0000000000017659         db  0x2f ; '/'
000000000001765a         db  0xff ; '.'
000000000001765b         db  0xff ; '.'
000000000001765c         db  0xac ; '.'
000000000001765d         db  0x11 ; '.'
000000000001765e         db  0x00 ; '.'
000000000001765f         db  0x00 ; '.'
0000000000017660         db  0x14 ; '.'
0000000000017661         db  0x30 ; '0'
0000000000017662         db  0xff ; '.'
0000000000017663         db  0xff ; '.'
0000000000017664         db  0xe4 ; '.'
0000000000017665         db  0x11 ; '.'
0000000000017666         db  0x00 ; '.'
0000000000017667         db  0x00 ; '.'
0000000000017668         db  0x64 ; 'd'
0000000000017669         db  0x30 ; '0'
000000000001766a         db  0xff ; '.'
000000000001766b         db  0xff ; '.'
000000000001766c         db  0x14 ; '.'
000000000001766d         db  0x12 ; '.'
000000000001766e         db  0x00 ; '.'
000000000001766f         db  0x00 ; '.'
0000000000017670         db  0x54 ; 'T'
0000000000017671         db  0x31 ; '1'
0000000000017672         db  0xff ; '.'
0000000000017673         db  0xff ; '.'
0000000000017674         db  0x64 ; 'd'
0000000000017675         db  0x12 ; '.'
0000000000017676         db  0x00 ; '.'
0000000000017677         db  0x00 ; '.'
0000000000017678         db  0xa4 ; '.'
0000000000017679         db  0x31 ; '1'
000000000001767a         db  0xff ; '.'
000000000001767b         db  0xff ; '.'
000000000001767c         db  0x80 ; '.'
000000000001767d         db  0x12 ; '.'
000000000001767e         db  0x00 ; '.'
000000000001767f         db  0x00 ; '.'
0000000000017680         db  0xc4 ; '.'
0000000000017681         db  0x37 ; '7'
0000000000017682         db  0xff ; '.'
0000000000017683         db  0xff ; '.'
0000000000017684         db  0xd4 ; '.'
0000000000017685         db  0x12 ; '.'
0000000000017686         db  0x00 ; '.'
0000000000017687         db  0x00 ; '.'
0000000000017688         db  0xd4 ; '.'
0000000000017689         db  0x37 ; '7'
000000000001768a         db  0xff ; '.'
000000000001768b         db  0xff ; '.'
000000000001768c         db  0xec ; '.'
000000000001768d         db  0x12 ; '.'
000000000001768e         db  0x00 ; '.'
000000000001768f         db  0x00 ; '.'
0000000000017690         db  0x14 ; '.'
0000000000017691         db  0x38 ; '8'
0000000000017692         db  0xff ; '.'
0000000000017693         db  0xff ; '.'
0000000000017694         db  0x04 ; '.'
0000000000017695         db  0x13 ; '.'
0000000000017696         db  0x00 ; '.'
0000000000017697         db  0x00 ; '.'
0000000000017698         db  0x34 ; '4'
0000000000017699         db  0x38 ; '8'
000000000001769a         db  0xff ; '.'
000000000001769b         db  0xff ; '.'
000000000001769c         db  0x20 ; ' '
000000000001769d         db  0x13 ; '.'
000000000001769e         db  0x00 ; '.'
000000000001769f         db  0x00 ; '.'
00000000000176a0         db  0x54 ; 'T'
00000000000176a1         db  0x38 ; '8'
00000000000176a2         db  0xff ; '.'
00000000000176a3         db  0xff ; '.'
00000000000176a4         db  0x34 ; '4'
00000000000176a5         db  0x13 ; '.'
00000000000176a6         db  0x00 ; '.'
00000000000176a7         db  0x00 ; '.'
00000000000176a8         db  0xa4 ; '.'
00000000000176a9         db  0x38 ; '8'
00000000000176aa         db  0xff ; '.'
00000000000176ab         db  0xff ; '.'
00000000000176ac         db  0x54 ; 'T'
00000000000176ad         db  0x13 ; '.'
00000000000176ae         db  0x00 ; '.'
00000000000176af         db  0x00 ; '.'
00000000000176b0         db  0x14 ; '.'
00000000000176b1         db  0x39 ; '9'
00000000000176b2         db  0xff ; '.'
00000000000176b3         db  0xff ; '.'
00000000000176b4         db  0x6c ; 'l'
00000000000176b5         db  0x13 ; '.'
00000000000176b6         db  0x00 ; '.'
00000000000176b7         db  0x00 ; '.'
00000000000176b8         db  0x24 ; '$'
00000000000176b9         db  0x39 ; '9'
00000000000176ba         db  0xff ; '.'
00000000000176bb         db  0xff ; '.'
00000000000176bc         db  0x80 ; '.'
00000000000176bd         db  0x13 ; '.'
00000000000176be         db  0x00 ; '.'
00000000000176bf         db  0x00 ; '.'
00000000000176c0         db  0x34 ; '4'
00000000000176c1         db  0x3a ; ':'
00000000000176c2         db  0xff ; '.'
00000000000176c3         db  0xff ; '.'
00000000000176c4         db  0xbc ; '.'
00000000000176c5         db  0x13 ; '.'
00000000000176c6         db  0x00 ; '.'
00000000000176c7         db  0x00 ; '.'
00000000000176c8         db  0x44 ; 'D'
00000000000176c9         db  0x3a ; ':'
00000000000176ca         db  0xff ; '.'
00000000000176cb         db  0xff ; '.'
00000000000176cc         db  0xd0 ; '.'
00000000000176cd         db  0x13 ; '.'
00000000000176ce         db  0x00 ; '.'
00000000000176cf         db  0x00 ; '.'
00000000000176d0         db  0x54 ; 'T'
00000000000176d1         db  0x3a ; ':'
00000000000176d2         db  0xff ; '.'
00000000000176d3         db  0xff ; '.'
00000000000176d4         db  0xe4 ; '.'
00000000000176d5         db  0x13 ; '.'
00000000000176d6         db  0x00 ; '.'
00000000000176d7         db  0x00 ; '.'
00000000000176d8         db  0x04 ; '.'
00000000000176d9         db  0x3b ; ';'
00000000000176da         db  0xff ; '.'
00000000000176db         db  0xff ; '.'
00000000000176dc         db  0x14 ; '.'
00000000000176dd         db  0x14 ; '.'
00000000000176de         db  0x00 ; '.'
00000000000176df         db  0x00 ; '.'
00000000000176e0         db  0x24 ; '$'
00000000000176e1         db  0x3b ; ';'
00000000000176e2         db  0xff ; '.'
00000000000176e3         db  0xff ; '.'
00000000000176e4         db  0x34 ; '4'
00000000000176e5         db  0x14 ; '.'
00000000000176e6         db  0x00 ; '.'
00000000000176e7         db  0x00 ; '.'
00000000000176e8         db  0x84 ; '.'
00000000000176e9         db  0x3b ; ';'
00000000000176ea         db  0xff ; '.'
00000000000176eb         db  0xff ; '.'
00000000000176ec         db  0x68 ; 'h'
00000000000176ed         db  0x14 ; '.'
00000000000176ee         db  0x00 ; '.'
00000000000176ef         db  0x00 ; '.'
00000000000176f0         db  0xe4 ; '.'
00000000000176f1         db  0x3b ; ';'
00000000000176f2         db  0xff ; '.'
00000000000176f3         db  0xff ; '.'
00000000000176f4         db  0x94 ; '.'
00000000000176f5         db  0x14 ; '.'
00000000000176f6         db  0x00 ; '.'
00000000000176f7         db  0x00 ; '.'
00000000000176f8         db  0x44 ; 'D'
00000000000176f9         db  0x3c ; '<'
00000000000176fa         db  0xff ; '.'
00000000000176fb         db  0xff ; '.'
00000000000176fc         db  0xa8 ; '.'
00000000000176fd         db  0x14 ; '.'
00000000000176fe         db  0x00 ; '.'
00000000000176ff         db  0x00 ; '.'
0000000000017700         db  0x94 ; '.'
0000000000017701         db  0x3c ; '<'
0000000000017702         db  0xff ; '.'
0000000000017703         db  0xff ; '.'
0000000000017704         db  0xd4 ; '.'
0000000000017705         db  0x14 ; '.'
0000000000017706         db  0x00 ; '.'
0000000000017707         db  0x00 ; '.'
0000000000017708         db  0xd4 ; '.'
0000000000017709         db  0x3c ; '<'
000000000001770a         db  0xff ; '.'
000000000001770b         db  0xff ; '.'
000000000001770c         db  0xfc ; '.'
000000000001770d         db  0x14 ; '.'
000000000001770e         db  0x00 ; '.'
000000000001770f         db  0x00 ; '.'
0000000000017710         db  0xe4 ; '.'
0000000000017711         db  0x3c ; '<'
0000000000017712         db  0xff ; '.'
0000000000017713         db  0xff ; '.'
0000000000017714         db  0x10 ; '.'
0000000000017715         db  0x15 ; '.'
0000000000017716         db  0x00 ; '.'
0000000000017717         db  0x00 ; '.'
0000000000017718         db  0x14 ; '.'
0000000000017719         db  0x3d ; '='
000000000001771a         db  0xff ; '.'
000000000001771b         db  0xff ; '.'
000000000001771c         db  0x2c ; ','
000000000001771d         db  0x15 ; '.'
000000000001771e         db  0x00 ; '.'
000000000001771f         db  0x00 ; '.'
0000000000017720         db  0x84 ; '.'
0000000000017721         db  0x3d ; '='
0000000000017722         db  0xff ; '.'
0000000000017723         db  0xff ; '.'
0000000000017724         db  0x4c ; 'L'
0000000000017725         db  0x15 ; '.'
0000000000017726         db  0x00 ; '.'
0000000000017727         db  0x00 ; '.'
0000000000017728         db  0x14 ; '.'
0000000000017729         db  0x3e ; '>'
000000000001772a         db  0xff ; '.'
000000000001772b         db  0xff ; '.'
000000000001772c         db  0xac ; '.'
000000000001772d         db  0x15 ; '.'
000000000001772e         db  0x00 ; '.'
000000000001772f         db  0x00 ; '.'
0000000000017730         db  0x74 ; 't'
0000000000017731         db  0x3e ; '>'
0000000000017732         db  0xff ; '.'
0000000000017733         db  0xff ; '.'
0000000000017734         db  0xcc ; '.'
0000000000017735         db  0x15 ; '.'
0000000000017736         db  0x00 ; '.'
0000000000017737         db  0x00 ; '.'
0000000000017738         db  0x64 ; 'd'
0000000000017739         db  0x3f ; '?'
000000000001773a         db  0xff ; '.'
000000000001773b         db  0xff ; '.'
000000000001773c         db  0xe4 ; '.'
000000000001773d         db  0x15 ; '.'
000000000001773e         db  0x00 ; '.'
000000000001773f         db  0x00 ; '.'
0000000000017740         db  0xf4 ; '.'
0000000000017741         db  0x40 ; '@'
0000000000017742         db  0xff ; '.'
0000000000017743         db  0xff ; '.'
0000000000017744         db  0xf8 ; '.'
0000000000017745         db  0x15 ; '.'
0000000000017746         db  0x00 ; '.'
0000000000017747         db  0x00 ; '.'
0000000000017748         db  0x04 ; '.'
0000000000017749         db  0x41 ; 'A'
000000000001774a         db  0xff ; '.'
000000000001774b         db  0xff ; '.'
000000000001774c         db  0x0c ; '.'
000000000001774d         db  0x16 ; '.'
000000000001774e         db  0x00 ; '.'
000000000001774f         db  0x00 ; '.'
0000000000017750         db  0x24 ; '$'
0000000000017751         db  0x41 ; 'A'
0000000000017752         db  0xff ; '.'
0000000000017753         db  0xff ; '.'
0000000000017754         db  0x2c ; ','
0000000000017755         db  0x16 ; '.'
0000000000017756         db  0x00 ; '.'
0000000000017757         db  0x00 ; '.'
0000000000017758         db  0x24 ; '$'
0000000000017759         db  0x42 ; 'B'
000000000001775a         db  0xff ; '.'
000000000001775b         db  0xff ; '.'
000000000001775c         db  0x7c ; '|'
000000000001775d         db  0x16 ; '.'
000000000001775e         db  0x00 ; '.'
000000000001775f         db  0x00 ; '.'
0000000000017760         db  0xa4 ; '.'
0000000000017761         db  0x42 ; 'B'
0000000000017762         db  0xff ; '.'
0000000000017763         db  0xff ; '.'
0000000000017764         db  0xcc ; '.'
0000000000017765         db  0x16 ; '.'
0000000000017766         db  0x00 ; '.'
0000000000017767         db  0x00 ; '.'
0000000000017768         db  0x44 ; 'D'
0000000000017769         db  0x43 ; 'C'
000000000001776a         db  0xff ; '.'
000000000001776b         db  0xff ; '.'
000000000001776c         db  0xe0 ; '.'
000000000001776d         db  0x16 ; '.'
000000000001776e         db  0x00 ; '.'
000000000001776f         db  0x00 ; '.'
0000000000017770         db  0x54 ; 'T'
0000000000017771         db  0x43 ; 'C'
0000000000017772         db  0xff ; '.'
0000000000017773         db  0xff ; '.'
0000000000017774         db  0xf4 ; '.'
0000000000017775         db  0x16 ; '.'
0000000000017776         db  0x00 ; '.'
0000000000017777         db  0x00 ; '.'
0000000000017778         db  0x64 ; 'd'
0000000000017779         db  0x43 ; 'C'
000000000001777a         db  0xff ; '.'
000000000001777b         db  0xff ; '.'
000000000001777c         db  0x08 ; '.'
000000000001777d         db  0x17 ; '.'
000000000001777e         db  0x00 ; '.'
000000000001777f         db  0x00 ; '.'
0000000000017780         db  0x94 ; '.'
0000000000017781         db  0x43 ; 'C'
0000000000017782         db  0xff ; '.'
0000000000017783         db  0xff ; '.'
0000000000017784         db  0x24 ; '$'
0000000000017785         db  0x17 ; '.'
0000000000017786         db  0x00 ; '.'
0000000000017787         db  0x00 ; '.'
0000000000017788         db  0xb4 ; '.'
0000000000017789         db  0x44 ; 'D'
000000000001778a         db  0xff ; '.'
000000000001778b         db  0xff ; '.'
000000000001778c         db  0x84 ; '.'
000000000001778d         db  0x17 ; '.'
000000000001778e         db  0x00 ; '.'
000000000001778f         db  0x00 ; '.'
0000000000017790         db  0x34 ; '4'
0000000000017791         db  0x45 ; 'E'
0000000000017792         db  0xff ; '.'
0000000000017793         db  0xff ; '.'
0000000000017794         db  0x98 ; '.'
0000000000017795         db  0x17 ; '.'
0000000000017796         db  0x00 ; '.'
0000000000017797         db  0x00 ; '.'
0000000000017798         db  0x74 ; 't'
0000000000017799         db  0x46 ; 'F'
000000000001779a         db  0xff ; '.'
000000000001779b         db  0xff ; '.'
000000000001779c         db  0xf8 ; '.'
000000000001779d         db  0x17 ; '.'
000000000001779e         db  0x00 ; '.'
000000000001779f         db  0x00 ; '.'
00000000000177a0         db  0x84 ; '.'
00000000000177a1         db  0x46 ; 'F'
00000000000177a2         db  0xff ; '.'
00000000000177a3         db  0xff ; '.'
00000000000177a4         db  0x0c ; '.'
00000000000177a5         db  0x18 ; '.'
00000000000177a6         db  0x00 ; '.'
00000000000177a7         db  0x00 ; '.'
00000000000177a8         db  0x94 ; '.'
00000000000177a9         db  0x46 ; 'F'
00000000000177aa         db  0xff ; '.'
00000000000177ab         db  0xff ; '.'
00000000000177ac         db  0x20 ; ' '
00000000000177ad         db  0x18 ; '.'
00000000000177ae         db  0x00 ; '.'
00000000000177af         db  0x00 ; '.'
00000000000177b0         db  0xa4 ; '.'
00000000000177b1         db  0x46 ; 'F'
00000000000177b2         db  0xff ; '.'
00000000000177b3         db  0xff ; '.'
00000000000177b4         db  0x34 ; '4'
00000000000177b5         db  0x18 ; '.'
00000000000177b6         db  0x00 ; '.'
00000000000177b7         db  0x00 ; '.'
00000000000177b8         db  0xf4 ; '.'
00000000000177b9         db  0x46 ; 'F'
00000000000177ba         db  0xff ; '.'
00000000000177bb         db  0xff ; '.'
00000000000177bc         db  0x48 ; 'H'
00000000000177bd         db  0x18 ; '.'
00000000000177be         db  0x00 ; '.'
00000000000177bf         db  0x00 ; '.'
00000000000177c0         db  0x54 ; 'T'
00000000000177c1         db  0x47 ; 'G'
00000000000177c2         db  0xff ; '.'
00000000000177c3         db  0xff ; '.'
00000000000177c4         db  0x5c ; '\'
00000000000177c5         db  0x18 ; '.'
00000000000177c6         db  0x00 ; '.'
00000000000177c7         db  0x00 ; '.'
00000000000177c8         db  0xa4 ; '.'
00000000000177c9         db  0x48 ; 'H'
00000000000177ca         db  0xff ; '.'
00000000000177cb         db  0xff ; '.'
00000000000177cc         db  0x98 ; '.'
00000000000177cd         db  0x18 ; '.'
00000000000177ce         db  0x00 ; '.'
00000000000177cf         db  0x00 ; '.'
00000000000177d0         db  0x04 ; '.'
00000000000177d1         db  0x49 ; 'I'
00000000000177d2         db  0xff ; '.'
00000000000177d3         db  0xff ; '.'
00000000000177d4         db  0xd0 ; '.'
00000000000177d5         db  0x18 ; '.'
00000000000177d6         db  0x00 ; '.'
00000000000177d7         db  0x00 ; '.'
00000000000177d8         db  0x54 ; 'T'
00000000000177d9         db  0x49 ; 'I'
00000000000177da         db  0xff ; '.'
00000000000177db         db  0xff ; '.'
00000000000177dc         db  0xe4 ; '.'
00000000000177dd         db  0x18 ; '.'
00000000000177de         db  0x00 ; '.'
00000000000177df         db  0x00 ; '.'
00000000000177e0         db  0xd4 ; '.'
00000000000177e1         db  0x49 ; 'I'
00000000000177e2         db  0xff ; '.'
00000000000177e3         db  0xff ; '.'
00000000000177e4         db  0x18 ; '.'
00000000000177e5         db  0x19 ; '.'
00000000000177e6         db  0x00 ; '.'
00000000000177e7         db  0x00 ; '.'
00000000000177e8         db  0x44 ; 'D'
00000000000177e9         db  0x4a ; 'J'
00000000000177ea         db  0xff ; '.'
00000000000177eb         db  0xff ; '.'
00000000000177ec         db  0x2c ; ','
00000000000177ed         db  0x19 ; '.'
00000000000177ee         db  0x00 ; '.'
00000000000177ef         db  0x00 ; '.'
00000000000177f0         db  0xb4 ; '.'
00000000000177f1         db  0x4a ; 'J'
00000000000177f2         db  0xff ; '.'
00000000000177f3         db  0xff ; '.'
00000000000177f4         db  0x78 ; 'x'
00000000000177f5         db  0x19 ; '.'
00000000000177f6         db  0x00 ; '.'
00000000000177f7         db  0x00 ; '.'
00000000000177f8         db  0xf4 ; '.'
00000000000177f9         db  0x4a ; 'J'
00000000000177fa         db  0xff ; '.'
00000000000177fb         db  0xff ; '.'
00000000000177fc         db  0x8c ; '.'
00000000000177fd         db  0x19 ; '.'
00000000000177fe         db  0x00 ; '.'
00000000000177ff         db  0x00 ; '.'
0000000000017800         db  0x14 ; '.'
0000000000017801         db  0x4b ; 'K'
0000000000017802         db  0xff ; '.'
0000000000017803         db  0xff ; '.'
0000000000017804         db  0xa0 ; '.'
0000000000017805         db  0x19 ; '.'
0000000000017806         db  0x00 ; '.'
0000000000017807         db  0x00 ; '.'
0000000000017808         db  0xd4 ; '.'
0000000000017809         db  0x4c ; 'L'
000000000001780a         db  0xff ; '.'
000000000001780b         db  0xff ; '.'
000000000001780c         db  0xec ; '.'
000000000001780d         db  0x19 ; '.'
000000000001780e         db  0x00 ; '.'
000000000001780f         db  0x00 ; '.'
0000000000017810         db  0x64 ; 'd'
0000000000017811         db  0x4d ; 'M'
0000000000017812         db  0xff ; '.'
0000000000017813         db  0xff ; '.'
0000000000017814         db  0x18 ; '.'
0000000000017815         db  0x1a ; '.'
0000000000017816         db  0x00 ; '.'
0000000000017817         db  0x00 ; '.'
0000000000017818         db  0x44 ; 'D'
0000000000017819         db  0x4e ; 'N'
000000000001781a         db  0xff ; '.'
000000000001781b         db  0xff ; '.'
000000000001781c         db  0x44 ; 'D'
000000000001781d         db  0x1a ; '.'
000000000001781e         db  0x00 ; '.'
000000000001781f         db  0x00 ; '.'
0000000000017820         db  0x84 ; '.'
0000000000017821         db  0x50 ; 'P'
0000000000017822         db  0xff ; '.'
0000000000017823         db  0xff ; '.'
0000000000017824         db  0x7c ; '|'
0000000000017825         db  0x1a ; '.'
0000000000017826         db  0x00 ; '.'
0000000000017827         db  0x00 ; '.'
0000000000017828         db  0x14 ; '.'
0000000000017829         db  0x53 ; 'S'
000000000001782a         db  0xff ; '.'
000000000001782b         db  0xff ; '.'
000000000001782c         db  0xb8 ; '.'
000000000001782d         db  0x1a ; '.'
000000000001782e         db  0x00 ; '.'
000000000001782f         db  0x00 ; '.'
0000000000017830         db  0x74 ; 't'
0000000000017831         db  0x53 ; 'S'
0000000000017832         db  0xff ; '.'
0000000000017833         db  0xff ; '.'
0000000000017834         db  0xdc ; '.'
0000000000017835         db  0x1a ; '.'
0000000000017836         db  0x00 ; '.'
0000000000017837         db  0x00 ; '.'
0000000000017838         db  0x84 ; '.'
0000000000017839         db  0x55 ; 'U'
000000000001783a         db  0xff ; '.'
000000000001783b         db  0xff ; '.'
000000000001783c         db  0x14 ; '.'
000000000001783d         db  0x1b ; '.'
000000000001783e         db  0x00 ; '.'
000000000001783f         db  0x00 ; '.'
0000000000017840         db  0xb4 ; '.'
0000000000017841         db  0x55 ; 'U'
0000000000017842         db  0xff ; '.'
0000000000017843         db  0xff ; '.'
0000000000017844         db  0x3c ; '<'
0000000000017845         db  0x1b ; '.'
0000000000017846         db  0x00 ; '.'
0000000000017847         db  0x00 ; '.'
0000000000017848         db  0xc4 ; '.'
0000000000017849         db  0x55 ; 'U'
000000000001784a         db  0xff ; '.'
000000000001784b         db  0xff ; '.'
000000000001784c         db  0x50 ; 'P'
000000000001784d         db  0x1b ; '.'
000000000001784e         db  0x00 ; '.'
000000000001784f         db  0x00 ; '.'
0000000000017850         db  0xf4 ; '.'
0000000000017851         db  0x55 ; 'U'
0000000000017852         db  0xff ; '.'
0000000000017853         db  0xff ; '.'
0000000000017854         db  0x68 ; 'h'
0000000000017855         db  0x1b ; '.'
0000000000017856         db  0x00 ; '.'
0000000000017857         db  0x00 ; '.'
0000000000017858         db  0x34 ; '4'
0000000000017859         db  0x56 ; 'V'
000000000001785a         db  0xff ; '.'
000000000001785b         db  0xff ; '.'
000000000001785c         db  0x80 ; '.'
000000000001785d         db  0x1b ; '.'
000000000001785e         db  0x00 ; '.'
000000000001785f         db  0x00 ; '.'
0000000000017860         db  0x54 ; 'T'
0000000000017861         db  0x56 ; 'V'
0000000000017862         db  0xff ; '.'
0000000000017863         db  0xff ; '.'
0000000000017864         db  0x9c ; '.'
0000000000017865         db  0x1b ; '.'
0000000000017866         db  0x00 ; '.'
0000000000017867         db  0x00 ; '.'
0000000000017868         db  0xd4 ; '.'
0000000000017869         db  0x56 ; 'V'
000000000001786a         db  0xff ; '.'
000000000001786b         db  0xff ; '.'
000000000001786c         db  0xfc ; '.'
000000000001786d         db  0x1b ; '.'
000000000001786e         db  0x00 ; '.'
000000000001786f         db  0x00 ; '.'
0000000000017870         db  0x74 ; 't'
0000000000017871         db  0x57 ; 'W'
0000000000017872         db  0xff ; '.'
0000000000017873         db  0xff ; '.'
0000000000017874         db  0x1c ; '.'
0000000000017875         db  0x1c ; '.'
0000000000017876         db  0x00 ; '.'
0000000000017877         db  0x00 ; '.'
0000000000017878         db  0xf4 ; '.'
0000000000017879         db  0x57 ; 'W'
000000000001787a         db  0xff ; '.'
000000000001787b         db  0xff ; '.'
000000000001787c         db  0x54 ; 'T'
000000000001787d         db  0x1c ; '.'
000000000001787e         db  0x00 ; '.'
000000000001787f         db  0x00 ; '.'
0000000000017880         db  0x54 ; 'T'
0000000000017881         db  0x58 ; 'X'
0000000000017882         db  0xff ; '.'
0000000000017883         db  0xff ; '.'
0000000000017884         db  0x84 ; '.'
0000000000017885         db  0x1c ; '.'
0000000000017886         db  0x00 ; '.'
0000000000017887         db  0x00 ; '.'
0000000000017888         db  0x44 ; 'D'
0000000000017889         db  0x59 ; 'Y'
000000000001788a         db  0xff ; '.'
000000000001788b         db  0xff ; '.'
000000000001788c         db  0xc8 ; '.'
000000000001788d         db  0x1c ; '.'
000000000001788e         db  0x00 ; '.'
000000000001788f         db  0x00 ; '.'
0000000000017890         db  0x84 ; '.'
0000000000017891         db  0x6b ; 'k'
0000000000017892         db  0xff ; '.'
0000000000017893         db  0xff ; '.'
0000000000017894         db  0x40 ; '@'
0000000000017895         db  0x1d ; '.'
0000000000017896         db  0x00 ; '.'
0000000000017897         db  0x00 ; '.'
0000000000017898         db  0x34 ; '4'
0000000000017899         db  0x6d ; 'm'
000000000001789a         db  0xff ; '.'
000000000001789b         db  0xff ; '.'
000000000001789c         db  0xac ; '.'
000000000001789d         db  0x1d ; '.'
000000000001789e         db  0x00 ; '.'
000000000001789f         db  0x00 ; '.'
00000000000178a0         db  0x74 ; 't'
00000000000178a1         db  0x6d ; 'm'
00000000000178a2         db  0xff ; '.'
00000000000178a3         db  0xff ; '.'
00000000000178a4         db  0xd8 ; '.'
00000000000178a5         db  0x1d ; '.'
00000000000178a6         db  0x00 ; '.'
00000000000178a7         db  0x00 ; '.'
00000000000178a8         db  0x94 ; '.'
00000000000178a9         db  0x6d ; 'm'
00000000000178aa         db  0xff ; '.'
00000000000178ab         db  0xff ; '.'
00000000000178ac         db  0xec ; '.'
00000000000178ad         db  0x1d ; '.'
00000000000178ae         db  0x00 ; '.'
00000000000178af         db  0x00 ; '.'
00000000000178b0         db  0xb4 ; '.'
00000000000178b1         db  0x6d ; 'm'
00000000000178b2         db  0xff ; '.'
00000000000178b3         db  0xff ; '.'
00000000000178b4         db  0x00 ; '.'
00000000000178b5         db  0x1e ; '.'
00000000000178b6         db  0x00 ; '.'
00000000000178b7         db  0x00 ; '.'
00000000000178b8         db  0xf4 ; '.'
00000000000178b9         db  0x6d ; 'm'
00000000000178ba         db  0xff ; '.'
00000000000178bb         db  0xff ; '.'
00000000000178bc         db  0x14 ; '.'
00000000000178bd         db  0x1e ; '.'
00000000000178be         db  0x00 ; '.'
00000000000178bf         db  0x00 ; '.'
00000000000178c0         db  0x14 ; '.'
00000000000178c1         db  0x6e ; 'n'
00000000000178c2         db  0xff ; '.'
00000000000178c3         db  0xff ; '.'
00000000000178c4         db  0x28 ; '('
00000000000178c5         db  0x1e ; '.'
00000000000178c6         db  0x00 ; '.'
00000000000178c7         db  0x00 ; '.'
00000000000178c8         db  0x44 ; 'D'
00000000000178c9         db  0x6e ; 'n'
00000000000178ca         db  0xff ; '.'
00000000000178cb         db  0xff ; '.'
00000000000178cc         db  0x3c ; '<'
00000000000178cd         db  0x1e ; '.'
00000000000178ce         db  0x00 ; '.'
00000000000178cf         db  0x00 ; '.'
00000000000178d0         db  0xc4 ; '.'
00000000000178d1         db  0x6e ; 'n'
00000000000178d2         db  0xff ; '.'
00000000000178d3         db  0xff ; '.'
00000000000178d4         db  0x90 ; '.'
00000000000178d5         db  0x1e ; '.'
00000000000178d6         db  0x00 ; '.'
00000000000178d7         db  0x00 ; '.'
00000000000178d8         db  0xb4 ; '.'
00000000000178d9         db  0x6f ; 'o'
00000000000178da         db  0xff ; '.'
00000000000178db         db  0xff ; '.'
00000000000178dc         db  0xfc ; '.'
00000000000178dd         db  0x1e ; '.'
00000000000178de         db  0x00 ; '.'
00000000000178df         db  0x00 ; '.'
00000000000178e0         db  0xc4 ; '.'
00000000000178e1         db  0x6f ; 'o'
00000000000178e2         db  0xff ; '.'
00000000000178e3         db  0xff ; '.'
00000000000178e4         db  0x10 ; '.'
00000000000178e5         db  0x1f ; '.'
00000000000178e6         db  0x00 ; '.'
00000000000178e7         db  0x00 ; '.'
00000000000178e8         db  0x64 ; 'd'
00000000000178e9         db  0x70 ; 'p'
00000000000178ea         db  0xff ; '.'
00000000000178eb         db  0xff ; '.'
00000000000178ec         db  0x3c ; '<'
00000000000178ed         db  0x1f ; '.'
00000000000178ee         db  0x00 ; '.'
00000000000178ef         db  0x00 ; '.'
00000000000178f0         db  0x84 ; '.'
00000000000178f1         db  0x70 ; 'p'
00000000000178f2         db  0xff ; '.'
00000000000178f3         db  0xff ; '.'
00000000000178f4         db  0x50 ; 'P'
00000000000178f5         db  0x1f ; '.'
00000000000178f6         db  0x00 ; '.'
00000000000178f7         db  0x00 ; '.'
00000000000178f8         db  0x94 ; '.'
00000000000178f9         db  0x70 ; 'p'
00000000000178fa         db  0xff ; '.'
00000000000178fb         db  0xff ; '.'
00000000000178fc         db  0x64 ; 'd'
00000000000178fd         db  0x1f ; '.'
00000000000178fe         db  0x00 ; '.'
00000000000178ff         db  0x00 ; '.'
0000000000017900         db  0xb4 ; '.'
0000000000017901         db  0x70 ; 'p'
0000000000017902         db  0xff ; '.'
0000000000017903         db  0xff ; '.'
0000000000017904         db  0x78 ; 'x'
0000000000017905         db  0x1f ; '.'
0000000000017906         db  0x00 ; '.'
0000000000017907         db  0x00 ; '.'
0000000000017908         db  0xd4 ; '.'
0000000000017909         db  0x70 ; 'p'
000000000001790a         db  0xff ; '.'
000000000001790b         db  0xff ; '.'
000000000001790c         db  0x8c ; '.'
000000000001790d         db  0x1f ; '.'
000000000001790e         db  0x00 ; '.'
000000000001790f         db  0x00 ; '.'
0000000000017910         db  0x64 ; 'd'
0000000000017911         db  0x71 ; 'q'
0000000000017912         db  0xff ; '.'
0000000000017913         db  0xff ; '.'
0000000000017914         db  0xa8 ; '.'
0000000000017915         db  0x1f ; '.'
0000000000017916         db  0x00 ; '.'
0000000000017917         db  0x00 ; '.'
0000000000017918         db  0xf4 ; '.'
0000000000017919         db  0x71 ; 'q'
000000000001791a         db  0xff ; '.'
000000000001791b         db  0xff ; '.'
000000000001791c         db  0xc4 ; '.'
000000000001791d         db  0x1f ; '.'
000000000001791e         db  0x00 ; '.'
000000000001791f         db  0x00 ; '.'
0000000000017920         db  0x04 ; '.'
0000000000017921         db  0x72 ; 'r'
0000000000017922         db  0xff ; '.'
0000000000017923         db  0xff ; '.'
0000000000017924         db  0xd8 ; '.'
0000000000017925         db  0x1f ; '.'
0000000000017926         db  0x00 ; '.'
0000000000017927         db  0x00 ; '.'
0000000000017928         db  0x14 ; '.'
0000000000017929         db  0x72 ; 'r'
000000000001792a         db  0xff ; '.'
000000000001792b         db  0xff ; '.'
000000000001792c         db  0xec ; '.'
000000000001792d         db  0x1f ; '.'
000000000001792e         db  0x00 ; '.'
000000000001792f         db  0x00 ; '.'
0000000000017930         db  0xb4 ; '.'
0000000000017931         db  0x72 ; 'r'
0000000000017932         db  0xff ; '.'
0000000000017933         db  0xff ; '.'
0000000000017934         db  0x08 ; '.'
0000000000017935         db  0x20 ; ' '
0000000000017936         db  0x00 ; '.'
0000000000017937         db  0x00 ; '.'
0000000000017938         db  0xc4 ; '.'
0000000000017939         db  0x72 ; 'r'
000000000001793a         db  0xff ; '.'
000000000001793b         db  0xff ; '.'
000000000001793c         db  0x1c ; '.'
000000000001793d         db  0x20 ; ' '
000000000001793e         db  0x00 ; '.'
000000000001793f         db  0x00 ; '.'
0000000000017940         db  0xe4 ; '.'
0000000000017941         db  0x72 ; 'r'
0000000000017942         db  0xff ; '.'
0000000000017943         db  0xff ; '.'
0000000000017944         db  0x30 ; '0'
0000000000017945         db  0x20 ; ' '
0000000000017946         db  0x00 ; '.'
0000000000017947         db  0x00 ; '.'
0000000000017948         db  0xf4 ; '.'
0000000000017949         db  0x72 ; 'r'
000000000001794a         db  0xff ; '.'
000000000001794b         db  0xff ; '.'
000000000001794c         db  0x44 ; 'D'
000000000001794d         db  0x20 ; ' '
000000000001794e         db  0x00 ; '.'
000000000001794f         db  0x00 ; '.'
0000000000017950         db  0x84 ; '.'
0000000000017951         db  0x73 ; 's'
0000000000017952         db  0xff ; '.'
0000000000017953         db  0xff ; '.'
0000000000017954         db  0x60 ; '`'
0000000000017955         db  0x20 ; ' '
0000000000017956         db  0x00 ; '.'
0000000000017957         db  0x00 ; '.'
0000000000017958         db  0x24 ; '$'
0000000000017959         db  0x74 ; 't'
000000000001795a         db  0xff ; '.'
000000000001795b         db  0xff ; '.'
000000000001795c         db  0x7c ; '|'
000000000001795d         db  0x20 ; ' '
000000000001795e         db  0x00 ; '.'
000000000001795f         db  0x00 ; '.'
0000000000017960         db  0x34 ; '4'
0000000000017961         db  0x74 ; 't'
0000000000017962         db  0xff ; '.'
0000000000017963         db  0xff ; '.'
0000000000017964         db  0x90 ; '.'
0000000000017965         db  0x20 ; ' '
0000000000017966         db  0x00 ; '.'
0000000000017967         db  0x00 ; '.'
0000000000017968         db  0x54 ; 'T'
0000000000017969         db  0x74 ; 't'
000000000001796a         db  0xff ; '.'
000000000001796b         db  0xff ; '.'
000000000001796c         db  0xa4 ; '.'
000000000001796d         db  0x20 ; ' '
000000000001796e         db  0x00 ; '.'
000000000001796f         db  0x00 ; '.'
0000000000017970         db  0x74 ; 't'
0000000000017971         db  0x74 ; 't'
0000000000017972         db  0xff ; '.'
0000000000017973         db  0xff ; '.'
0000000000017974         db  0xb8 ; '.'
0000000000017975         db  0x20 ; ' '
0000000000017976         db  0x00 ; '.'
0000000000017977         db  0x00 ; '.'
0000000000017978         db  0x84 ; '.'
0000000000017979         db  0x74 ; 't'
000000000001797a         db  0xff ; '.'
000000000001797b         db  0xff ; '.'
000000000001797c         db  0xcc ; '.'
000000000001797d         db  0x20 ; ' '
000000000001797e         db  0x00 ; '.'
000000000001797f         db  0x00 ; '.'
0000000000017980         db  0xa4 ; '.'
0000000000017981         db  0x74 ; 't'
0000000000017982         db  0xff ; '.'
0000000000017983         db  0xff ; '.'
0000000000017984         db  0xe0 ; '.'
0000000000017985         db  0x20 ; ' '
0000000000017986         db  0x00 ; '.'
0000000000017987         db  0x00 ; '.'
0000000000017988         db  0xc4 ; '.'
0000000000017989         db  0x74 ; 't'
000000000001798a         db  0xff ; '.'
000000000001798b         db  0xff ; '.'
000000000001798c         db  0xf4 ; '.'
000000000001798d         db  0x20 ; ' '
000000000001798e         db  0x00 ; '.'
000000000001798f         db  0x00 ; '.'
0000000000017990         db  0xe4 ; '.'
0000000000017991         db  0x74 ; 't'
0000000000017992         db  0xff ; '.'
0000000000017993         db  0xff ; '.'
0000000000017994         db  0x0c ; '.'
0000000000017995         db  0x21 ; '!'
0000000000017996         db  0x00 ; '.'
0000000000017997         db  0x00 ; '.'
0000000000017998         db  0x54 ; 'T'
0000000000017999         db  0x77 ; 'w'
000000000001799a         db  0xff ; '.'
000000000001799b         db  0xff ; '.'
000000000001799c         db  0x5c ; '\'
000000000001799d         db  0x21 ; '!'
000000000001799e         db  0x00 ; '.'
000000000001799f         db  0x00 ; '.'
00000000000179a0         db  0xd4 ; '.'
00000000000179a1         db  0x77 ; 'w'
00000000000179a2         db  0xff ; '.'
00000000000179a3         db  0xff ; '.'
00000000000179a4         db  0x84 ; '.'
00000000000179a5         db  0x21 ; '!'
00000000000179a6         db  0x00 ; '.'
00000000000179a7         db  0x00 ; '.'
00000000000179a8         db  0x34 ; '4'
00000000000179a9         db  0x78 ; 'x'
00000000000179aa         db  0xff ; '.'
00000000000179ab         db  0xff ; '.'
00000000000179ac         db  0xbc ; '.'
00000000000179ad         db  0x21 ; '!'
00000000000179ae         db  0x00 ; '.'
00000000000179af         db  0x00 ; '.'
00000000000179b0         db  0x64 ; 'd'
00000000000179b1         db  0x79 ; 'y'
00000000000179b2         db  0xff ; '.'
00000000000179b3         db  0xff ; '.'
00000000000179b4         db  0xf8 ; '.'
00000000000179b5         db  0x21 ; '!'
00000000000179b6         db  0x00 ; '.'
00000000000179b7         db  0x00 ; '.'
00000000000179b8         db  0x04 ; '.'
00000000000179b9         db  0x7a ; 'z'
00000000000179ba         db  0xff ; '.'
00000000000179bb         db  0xff ; '.'
00000000000179bc         db  0x58 ; 'X'
00000000000179bd         db  0x22 ; '"'
00000000000179be         db  0x00 ; '.'
00000000000179bf         db  0x00 ; '.'
00000000000179c0         db  0x24 ; '$'
00000000000179c1         db  0x7a ; 'z'
00000000000179c2         db  0xff ; '.'
00000000000179c3         db  0xff ; '.'
00000000000179c4         db  0x6c ; 'l'
00000000000179c5         db  0x22 ; '"'
00000000000179c6         db  0x00 ; '.'
00000000000179c7         db  0x00 ; '.'
00000000000179c8         db  0x44 ; 'D'
00000000000179c9         db  0x7a ; 'z'
00000000000179ca         db  0xff ; '.'
00000000000179cb         db  0xff ; '.'
00000000000179cc         db  0x80 ; '.'
00000000000179cd         db  0x22 ; '"'
00000000000179ce         db  0x00 ; '.'
00000000000179cf         db  0x00 ; '.'
00000000000179d0         db  0x54 ; 'T'
00000000000179d1         db  0x7a ; 'z'
00000000000179d2         db  0xff ; '.'
00000000000179d3         db  0xff ; '.'
00000000000179d4         db  0x94 ; '.'
00000000000179d5         db  0x22 ; '"'
00000000000179d6         db  0x00 ; '.'
00000000000179d7         db  0x00 ; '.'
00000000000179d8         db  0xd4 ; '.'
00000000000179d9         db  0x7d ; '}'
00000000000179da         db  0xff ; '.'
00000000000179db         db  0xff ; '.'
00000000000179dc         db  0xe4 ; '.'
00000000000179dd         db  0x22 ; '"'
00000000000179de         db  0x00 ; '.'
00000000000179df         db  0x00 ; '.'
00000000000179e0         db  0x34 ; '4'
00000000000179e1         db  0x7e ; '~'
00000000000179e2         db  0xff ; '.'
00000000000179e3         db  0xff ; '.'
00000000000179e4         db  0x14 ; '.'
00000000000179e5         db  0x23 ; '#'
00000000000179e6         db  0x00 ; '.'
00000000000179e7         db  0x00 ; '.'
00000000000179e8         db  0xb4 ; '.'
00000000000179e9         db  0x7e ; '~'
00000000000179ea         db  0xff ; '.'
00000000000179eb         db  0xff ; '.'
00000000000179ec         db  0x38 ; '8'
00000000000179ed         db  0x23 ; '#'
00000000000179ee         db  0x00 ; '.'
00000000000179ef         db  0x00 ; '.'
00000000000179f0         db  0xc4 ; '.'
00000000000179f1         db  0x7e ; '~'
00000000000179f2         db  0xff ; '.'
00000000000179f3         db  0xff ; '.'
00000000000179f4         db  0x4c ; 'L'
00000000000179f5         db  0x23 ; '#'
00000000000179f6         db  0x00 ; '.'
00000000000179f7         db  0x00 ; '.'
00000000000179f8         db  0xe4 ; '.'
00000000000179f9         db  0x7e ; '~'
00000000000179fa         db  0xff ; '.'
00000000000179fb         db  0xff ; '.'
00000000000179fc         db  0x60 ; '`'
00000000000179fd         db  0x23 ; '#'
00000000000179fe         db  0x00 ; '.'
00000000000179ff         db  0x00 ; '.'
0000000000017a00         db  0x64 ; 'd'
0000000000017a01         db  0x80 ; '.'
0000000000017a02         db  0xff ; '.'
0000000000017a03         db  0xff ; '.'
0000000000017a04         db  0xac ; '.'
0000000000017a05         db  0x23 ; '#'
0000000000017a06         db  0x00 ; '.'
0000000000017a07         db  0x00 ; '.'
0000000000017a08         db  0xf4 ; '.'
0000000000017a09         db  0x80 ; '.'
0000000000017a0a         db  0xff ; '.'
0000000000017a0b         db  0xff ; '.'
0000000000017a0c         db  0xd0 ; '.'
0000000000017a0d         db  0x23 ; '#'
0000000000017a0e         db  0x00 ; '.'
0000000000017a0f         db  0x00 ; '.'
0000000000017a10         db  0x04 ; '.'
0000000000017a11         db  0x81 ; '.'
0000000000017a12         db  0xff ; '.'
0000000000017a13         db  0xff ; '.'
0000000000017a14         db  0xe4 ; '.'
0000000000017a15         db  0x23 ; '#'
0000000000017a16         db  0x00 ; '.'
0000000000017a17         db  0x00 ; '.'
0000000000017a18         db  0x14 ; '.'
0000000000017a19         db  0x81 ; '.'
0000000000017a1a         db  0xff ; '.'
0000000000017a1b         db  0xff ; '.'
0000000000017a1c         db  0xfc ; '.'
0000000000017a1d         db  0x23 ; '#'
0000000000017a1e         db  0x00 ; '.'
0000000000017a1f         db  0x00 ; '.'
0000000000017a20         db  0x54 ; 'T'
0000000000017a21         db  0x81 ; '.'
0000000000017a22         db  0xff ; '.'
0000000000017a23         db  0xff ; '.'
0000000000017a24         db  0x34 ; '4'
0000000000017a25         db  0x24 ; '$'
0000000000017a26         db  0x00 ; '.'
0000000000017a27         db  0x00 ; '.'
0000000000017a28         db  0x64 ; 'd'
0000000000017a29         db  0x81 ; '.'
0000000000017a2a         db  0xff ; '.'
0000000000017a2b         db  0xff ; '.'
0000000000017a2c         db  0x48 ; 'H'
0000000000017a2d         db  0x24 ; '$'
0000000000017a2e         db  0x00 ; '.'
0000000000017a2f         db  0x00 ; '.'
0000000000017a30         db  0x74 ; 't'
0000000000017a31         db  0x81 ; '.'
0000000000017a32         db  0xff ; '.'
0000000000017a33         db  0xff ; '.'
0000000000017a34         db  0x5c ; '\'
0000000000017a35         db  0x24 ; '$'
0000000000017a36         db  0x00 ; '.'
0000000000017a37         db  0x00 ; '.'
0000000000017a38         db  0xf4 ; '.'
0000000000017a39         db  0x88 ; '.'
0000000000017a3a         db  0xff ; '.'
0000000000017a3b         db  0xff ; '.'
0000000000017a3c         db  0xac ; '.'
0000000000017a3d         db  0x24 ; '$'
0000000000017a3e         db  0x00 ; '.'
0000000000017a3f         db  0x00 ; '.'
0000000000017a40         db  0x14 ; '.'
0000000000017a41         db  0x89 ; '.'
0000000000017a42         db  0xff ; '.'
0000000000017a43         db  0xff ; '.'
0000000000017a44         db  0xc4 ; '.'
0000000000017a45         db  0x24 ; '$'
0000000000017a46         db  0x00 ; '.'
0000000000017a47         db  0x00 ; '.'
0000000000017a48         db  0xf4 ; '.'
0000000000017a49         db  0x89 ; '.'
0000000000017a4a         db  0xff ; '.'
0000000000017a4b         db  0xff ; '.'
0000000000017a4c         db  0x08 ; '.'
0000000000017a4d         db  0x25 ; '%'
0000000000017a4e         db  0x00 ; '.'
0000000000017a4f         db  0x00 ; '.'
0000000000017a50         db  0xa4 ; '.'
0000000000017a51         db  0x8a ; '.'
0000000000017a52         db  0xff ; '.'
0000000000017a53         db  0xff ; '.'
0000000000017a54         db  0x20 ; ' '
0000000000017a55         db  0x25 ; '%'
0000000000017a56         db  0x00 ; '.'
0000000000017a57         db  0x00 ; '.'
0000000000017a58         db  0xb4 ; '.'
0000000000017a59         db  0x8a ; '.'
0000000000017a5a         db  0xff ; '.'
0000000000017a5b         db  0xff ; '.'
0000000000017a5c         db  0x34 ; '4'
0000000000017a5d         db  0x25 ; '%'
0000000000017a5e         db  0x00 ; '.'
0000000000017a5f         db  0x00 ; '.'
0000000000017a60         db  0x14 ; '.'
0000000000017a61         db  0x8f ; '.'
0000000000017a62         db  0xff ; '.'
0000000000017a63         db  0xff ; '.'
0000000000017a64         db  0x7c ; '|'
0000000000017a65         db  0x25 ; '%'
0000000000017a66         db  0x00 ; '.'
0000000000017a67         db  0x00 ; '.'
0000000000017a68         db  0x24 ; '$'
0000000000017a69         db  0x8f ; '.'
0000000000017a6a         db  0xff ; '.'
0000000000017a6b         db  0xff ; '.'
0000000000017a6c         db  0x90 ; '.'
0000000000017a6d         db  0x25 ; '%'
0000000000017a6e         db  0x00 ; '.'
0000000000017a6f         db  0x00 ; '.'
0000000000017a70         db  0x84 ; '.'
0000000000017a71         db  0x91 ; '.'
0000000000017a72         db  0xff ; '.'
0000000000017a73         db  0xff ; '.'
0000000000017a74         db  0xcc ; '.'
0000000000017a75         db  0x25 ; '%'
0000000000017a76         db  0x00 ; '.'
0000000000017a77         db  0x00 ; '.'
0000000000017a78         db  0xa4 ; '.'
0000000000017a79         db  0x95 ; '.'
0000000000017a7a         db  0xff ; '.'
0000000000017a7b         db  0xff ; '.'
0000000000017a7c         db  0xe0 ; '.'
0000000000017a7d         db  0x26 ; '&'
0000000000017a7e         db  0x00 ; '.'
0000000000017a7f         db  0x00 ; '.'
0000000000017a80         db  0xc4 ; '.'
0000000000017a81         db  0x95 ; '.'
0000000000017a82         db  0xff ; '.'
0000000000017a83         db  0xff ; '.'
0000000000017a84         db  0xf4 ; '.'
0000000000017a85         db  0x26 ; '&'
0000000000017a86         db  0x00 ; '.'
0000000000017a87         db  0x00 ; '.'
0000000000017a88         db  0x44 ; 'D'
0000000000017a89         db  0x96 ; '.'
0000000000017a8a         db  0xff ; '.'
0000000000017a8b         db  0xff ; '.'
0000000000017a8c         db  0x10 ; '.'
0000000000017a8d         db  0x27 ; '''
0000000000017a8e         db  0x00 ; '.'
0000000000017a8f         db  0x00 ; '.'
0000000000017a90         db  0x24 ; '$'
0000000000017a91         db  0x97 ; '.'
0000000000017a92         db  0xff ; '.'
0000000000017a93         db  0xff ; '.'
0000000000017a94         db  0x3c ; '<'
0000000000017a95         db  0x27 ; '''
0000000000017a96         db  0x00 ; '.'
0000000000017a97         db  0x00 ; '.'
0000000000017a98         db  0xa4 ; '.'
0000000000017a99         db  0x97 ; '.'
0000000000017a9a         db  0xff ; '.'
0000000000017a9b         db  0xff ; '.'
0000000000017a9c         db  0x5c ; '\'
0000000000017a9d         db  0x27 ; '''
0000000000017a9e         db  0x00 ; '.'
0000000000017a9f         db  0x00 ; '.'
0000000000017aa0         db  0xe4 ; '.'
0000000000017aa1         db  0x97 ; '.'
0000000000017aa2         db  0xff ; '.'
0000000000017aa3         db  0xff ; '.'
0000000000017aa4         db  0x74 ; 't'
0000000000017aa5         db  0x27 ; '''
0000000000017aa6         db  0x00 ; '.'
0000000000017aa7         db  0x00 ; '.'
0000000000017aa8         db  0x04 ; '.'
0000000000017aa9         db  0x98 ; '.'
0000000000017aaa         db  0xff ; '.'
0000000000017aab         db  0xff ; '.'
0000000000017aac         db  0x90 ; '.'
0000000000017aad         db  0x27 ; '''
0000000000017aae         db  0x00 ; '.'
0000000000017aaf         db  0x00 ; '.'
0000000000017ab0         db  0x34 ; '4'
0000000000017ab1         db  0x98 ; '.'
0000000000017ab2         db  0xff ; '.'
0000000000017ab3         db  0xff ; '.'
0000000000017ab4         db  0xa4 ; '.'
0000000000017ab5         db  0x27 ; '''
0000000000017ab6         db  0x00 ; '.'
0000000000017ab7         db  0x00 ; '.'
0000000000017ab8         db  0x44 ; 'D'
0000000000017ab9         db  0x98 ; '.'
0000000000017aba         db  0xff ; '.'
0000000000017abb         db  0xff ; '.'
0000000000017abc         db  0xb8 ; '.'
0000000000017abd         db  0x27 ; '''
0000000000017abe         db  0x00 ; '.'
0000000000017abf         db  0x00 ; '.'
0000000000017ac0         db  0x84 ; '.'
0000000000017ac1         db  0x98 ; '.'
0000000000017ac2         db  0xff ; '.'
0000000000017ac3         db  0xff ; '.'
0000000000017ac4         db  0xdc ; '.'
0000000000017ac5         db  0x27 ; '''
0000000000017ac6         db  0x00 ; '.'
0000000000017ac7         db  0x00 ; '.'
0000000000017ac8         db  0xb4 ; '.'
0000000000017ac9         db  0x98 ; '.'
0000000000017aca         db  0xff ; '.'
0000000000017acb         db  0xff ; '.'
0000000000017acc         db  0xf0 ; '.'
0000000000017acd         db  0x27 ; '''
0000000000017ace         db  0x00 ; '.'
0000000000017acf         db  0x00 ; '.'
0000000000017ad0         db  0x44 ; 'D'
0000000000017ad1         db  0x99 ; '.'
0000000000017ad2         db  0xff ; '.'
0000000000017ad3         db  0xff ; '.'
0000000000017ad4         db  0x08 ; '.'
0000000000017ad5         db  0x28 ; '('
0000000000017ad6         db  0x00 ; '.'
0000000000017ad7         db  0x00 ; '.'
0000000000017ad8         db  0x94 ; '.'
0000000000017ad9         db  0x99 ; '.'
0000000000017ada         db  0xff ; '.'
0000000000017adb         db  0xff ; '.'
0000000000017adc         db  0x20 ; ' '
0000000000017add         db  0x28 ; '('
0000000000017ade         db  0x00 ; '.'
0000000000017adf         db  0x00 ; '.'
0000000000017ae0         db  0xb4 ; '.'
0000000000017ae1         db  0x99 ; '.'
0000000000017ae2         db  0xff ; '.'
0000000000017ae3         db  0xff ; '.'
0000000000017ae4         db  0x3c ; '<'
0000000000017ae5         db  0x28 ; '('
0000000000017ae6         db  0x00 ; '.'
0000000000017ae7         db  0x00 ; '.'
0000000000017ae8         db  0xe4 ; '.'
0000000000017ae9         db  0x99 ; '.'
0000000000017aea         db  0xff ; '.'
0000000000017aeb         db  0xff ; '.'
0000000000017aec         db  0x58 ; 'X'
0000000000017aed         db  0x28 ; '('
0000000000017aee         db  0x00 ; '.'
0000000000017aef         db  0x00 ; '.'
0000000000017af0         db  0x14 ; '.'
0000000000017af1         db  0x9a ; '.'
0000000000017af2         db  0xff ; '.'
0000000000017af3         db  0xff ; '.'
0000000000017af4         db  0x80 ; '.'
0000000000017af5         db  0x28 ; '('
0000000000017af6         db  0x00 ; '.'
0000000000017af7         db  0x00 ; '.'
0000000000017af8         db  0x34 ; '4'
0000000000017af9         db  0x9a ; '.'
0000000000017afa         db  0xff ; '.'
0000000000017afb         db  0xff ; '.'
0000000000017afc         db  0x9c ; '.'
0000000000017afd         db  0x28 ; '('
0000000000017afe         db  0x00 ; '.'
0000000000017aff         db  0x00 ; '.'
0000000000017b00         db  0x74 ; 't'
0000000000017b01         db  0x9a ; '.'
0000000000017b02         db  0xff ; '.'
0000000000017b03         db  0xff ; '.'
0000000000017b04         db  0xb4 ; '.'
0000000000017b05         db  0x28 ; '('
0000000000017b06         db  0x00 ; '.'
0000000000017b07         db  0x00 ; '.'
0000000000017b08         db  0xc4 ; '.'
0000000000017b09         db  0x9a ; '.'
0000000000017b0a         db  0xff ; '.'
0000000000017b0b         db  0xff ; '.'
0000000000017b0c         db  0xd0 ; '.'
0000000000017b0d         db  0x28 ; '('
0000000000017b0e         db  0x00 ; '.'
0000000000017b0f         db  0x00 ; '.'
0000000000017b10         db  0xf4 ; '.'
0000000000017b11         db  0x9a ; '.'
0000000000017b12         db  0xff ; '.'
0000000000017b13         db  0xff ; '.'
0000000000017b14         db  0xe4 ; '.'
0000000000017b15         db  0x28 ; '('
0000000000017b16         db  0x00 ; '.'
0000000000017b17         db  0x00 ; '.'
0000000000017b18         db  0x94 ; '.'
0000000000017b19         db  0x9b ; '.'
0000000000017b1a         db  0xff ; '.'
0000000000017b1b         db  0xff ; '.'
0000000000017b1c         db  0x0c ; '.'
0000000000017b1d         db  0x29 ; ')'
0000000000017b1e         db  0x00 ; '.'
0000000000017b1f         db  0x00 ; '.'
0000000000017b20         db  0xd4 ; '.'
0000000000017b21         db  0x9b ; '.'
0000000000017b22         db  0xff ; '.'
0000000000017b23         db  0xff ; '.'
0000000000017b24         db  0x2c ; ','
0000000000017b25         db  0x29 ; ')'
0000000000017b26         db  0x00 ; '.'
0000000000017b27         db  0x00 ; '.'
0000000000017b28         db  0x04 ; '.'
0000000000017b29         db  0x9c ; '.'
0000000000017b2a         db  0xff ; '.'
0000000000017b2b         db  0xff ; '.'
0000000000017b2c         db  0x44 ; 'D'
0000000000017b2d         db  0x29 ; ')'
0000000000017b2e         db  0x00 ; '.'
0000000000017b2f         db  0x00 ; '.'
0000000000017b30         db  0x64 ; 'd'
0000000000017b31         db  0x9c ; '.'
0000000000017b32         db  0xff ; '.'
0000000000017b33         db  0xff ; '.'
0000000000017b34         db  0x74 ; 't'
0000000000017b35         db  0x29 ; ')'
0000000000017b36         db  0x00 ; '.'
0000000000017b37         db  0x00 ; '.'
0000000000017b38         db  0x84 ; '.'
0000000000017b39         db  0x9c ; '.'
0000000000017b3a         db  0xff ; '.'
0000000000017b3b         db  0xff ; '.'
0000000000017b3c         db  0x88 ; '.'
0000000000017b3d         db  0x29 ; ')'
0000000000017b3e         db  0x00 ; '.'
0000000000017b3f         db  0x00 ; '.'
0000000000017b40         db  0x94 ; '.'
0000000000017b41         db  0x9c ; '.'
0000000000017b42         db  0xff ; '.'
0000000000017b43         db  0xff ; '.'
0000000000017b44         db  0x9c ; '.'
0000000000017b45         db  0x29 ; ')'
0000000000017b46         db  0x00 ; '.'
0000000000017b47         db  0x00 ; '.'
0000000000017b48         db  0xa4 ; '.'
0000000000017b49         db  0x9c ; '.'
0000000000017b4a         db  0xff ; '.'
0000000000017b4b         db  0xff ; '.'
0000000000017b4c         db  0xb0 ; '.'
0000000000017b4d         db  0x29 ; ')'
0000000000017b4e         db  0x00 ; '.'
0000000000017b4f         db  0x00 ; '.'
0000000000017b50         db  0xb4 ; '.'
0000000000017b51         db  0x9c ; '.'
0000000000017b52         db  0xff ; '.'
0000000000017b53         db  0xff ; '.'
0000000000017b54         db  0xc4 ; '.'
0000000000017b55         db  0x29 ; ')'
0000000000017b56         db  0x00 ; '.'
0000000000017b57         db  0x00 ; '.'
0000000000017b58         db  0xe4 ; '.'
0000000000017b59         db  0x9c ; '.'
0000000000017b5a         db  0xff ; '.'
0000000000017b5b         db  0xff ; '.'
0000000000017b5c         db  0xd8 ; '.'
0000000000017b5d         db  0x29 ; ')'
0000000000017b5e         db  0x00 ; '.'
0000000000017b5f         db  0x00 ; '.'
0000000000017b60         db  0xb4 ; '.'
0000000000017b61         db  0x9e ; '.'
0000000000017b62         db  0xff ; '.'
0000000000017b63         db  0xff ; '.'
0000000000017b64         db  0x14 ; '.'
0000000000017b65         db  0x2a ; '*'
0000000000017b66         db  0x00 ; '.'
0000000000017b67         db  0x00 ; '.'
0000000000017b68         db  0xc4 ; '.'
0000000000017b69         db  0x9f ; '.'
0000000000017b6a         db  0xff ; '.'
0000000000017b6b         db  0xff ; '.'
0000000000017b6c         db  0x64 ; 'd'
0000000000017b6d         db  0x2a ; '*'
0000000000017b6e         db  0x00 ; '.'
0000000000017b6f         db  0x00 ; '.'
0000000000017b70         db  0x54 ; 'T'
0000000000017b71         db  0xa0 ; '.'
0000000000017b72         db  0xff ; '.'
0000000000017b73         db  0xff ; '.'
0000000000017b74         db  0x9c ; '.'
0000000000017b75         db  0x2a ; '*'
0000000000017b76         db  0x00 ; '.'
0000000000017b77         db  0x00 ; '.'
0000000000017b78         db  0xa4 ; '.'
0000000000017b79         db  0xa0 ; '.'
0000000000017b7a         db  0xff ; '.'
0000000000017b7b         db  0xff ; '.'
0000000000017b7c         db  0xc8 ; '.'
0000000000017b7d         db  0x2a ; '*'
0000000000017b7e         db  0x00 ; '.'
0000000000017b7f         db  0x00 ; '.'
0000000000017b80         db  0xe4 ; '.'
0000000000017b81         db  0xa0 ; '.'
0000000000017b82         db  0xff ; '.'
0000000000017b83         db  0xff ; '.'
0000000000017b84         db  0xe4 ; '.'
0000000000017b85         db  0x2a ; '*'
0000000000017b86         db  0x00 ; '.'
0000000000017b87         db  0x00 ; '.'
0000000000017b88         db  0x14 ; '.'
0000000000017b89         db  0xa2 ; '.'
0000000000017b8a         db  0xff ; '.'
0000000000017b8b         db  0xff ; '.'
0000000000017b8c         db  0x20 ; ' '
0000000000017b8d         db  0x2b ; '+'
0000000000017b8e         db  0x00 ; '.'
0000000000017b8f         db  0x00 ; '.'
0000000000017b90         db  0x84 ; '.'
0000000000017b91         db  0xa2 ; '.'
0000000000017b92         db  0xff ; '.'
0000000000017b93         db  0xff ; '.'
0000000000017b94         db  0x44 ; 'D'
0000000000017b95         db  0x2b ; '+'
0000000000017b96         db  0x00 ; '.'
0000000000017b97         db  0x00 ; '.'
0000000000017b98         db  0xf4 ; '.'
0000000000017b99         db  0xa2 ; '.'
0000000000017b9a         db  0xff ; '.'
0000000000017b9b         db  0xff ; '.'
0000000000017b9c         db  0x88 ; '.'
0000000000017b9d         db  0x2b ; '+'
0000000000017b9e         db  0x00 ; '.'
0000000000017b9f         db  0x00 ; '.'
0000000000017ba0         db  0x54 ; 'T'
0000000000017ba1         db  0xa3 ; '.'
0000000000017ba2         db  0xff ; '.'
0000000000017ba3         db  0xff ; '.'
0000000000017ba4         db  0xb4 ; '.'
0000000000017ba5         db  0x2b ; '+'
0000000000017ba6         db  0x00 ; '.'
0000000000017ba7         db  0x00 ; '.'
0000000000017ba8         db  0xc4 ; '.'
0000000000017ba9         db  0xa3 ; '.'
0000000000017baa         db  0xff ; '.'
0000000000017bab         db  0xff ; '.'
0000000000017bac         db  0xdc ; '.'
0000000000017bad         db  0x2b ; '+'
0000000000017bae         db  0x00 ; '.'
0000000000017baf         db  0x00 ; '.'
0000000000017bb0         db  0x34 ; '4'
0000000000017bb1         db  0xa4 ; '.'
0000000000017bb2         db  0xff ; '.'
0000000000017bb3         db  0xff ; '.'
0000000000017bb4         db  0xfc ; '.'
0000000000017bb5         db  0x2b ; '+'
0000000000017bb6         db  0x00 ; '.'
0000000000017bb7         db  0x00 ; '.'
0000000000017bb8         db  0x74 ; 't'
0000000000017bb9         db  0xa4 ; '.'
0000000000017bba         db  0xff ; '.'
0000000000017bbb         db  0xff ; '.'
0000000000017bbc         db  0x10 ; '.'
0000000000017bbd         db  0x2c ; ','
0000000000017bbe         db  0x00 ; '.'
0000000000017bbf         db  0x00 ; '.'
0000000000017bc0         db  0xf4 ; '.'
0000000000017bc1         db  0xa6 ; '.'
0000000000017bc2         db  0xff ; '.'
0000000000017bc3         db  0xff ; '.'
0000000000017bc4         db  0x60 ; '`'
0000000000017bc5         db  0x2c ; ','
0000000000017bc6         db  0x00 ; '.'
0000000000017bc7         db  0x00 ; '.'
0000000000017bc8         db  0xa4 ; '.'
0000000000017bc9         db  0xa7 ; '.'
0000000000017bca         db  0xff ; '.'
0000000000017bcb         db  0xff ; '.'
0000000000017bcc         db  0xa4 ; '.'
0000000000017bcd         db  0x2c ; ','
0000000000017bce         db  0x00 ; '.'
0000000000017bcf         db  0x00 ; '.'
0000000000017bd0         db  0x64 ; 'd'
0000000000017bd1         db  0xa8 ; '.'
0000000000017bd2         db  0xff ; '.'
0000000000017bd3         db  0xff ; '.'
0000000000017bd4         db  0xc0 ; '.'
0000000000017bd5         db  0x2c ; ','
0000000000017bd6         db  0x00 ; '.'
0000000000017bd7         db  0x00 ; '.'
0000000000017bd8         db  0x44 ; 'D'
0000000000017bd9         db  0xb2 ; '.'
0000000000017bda         db  0xff ; '.'
0000000000017bdb         db  0xff ; '.'
0000000000017bdc         db  0x10 ; '.'
0000000000017bdd         db  0x2d ; '-'
0000000000017bde         db  0x00 ; '.'
0000000000017bdf         db  0x00 ; '.'
0000000000017be0         db  0xf4 ; '.'
0000000000017be1         db  0xb5 ; '.'
0000000000017be2         db  0xff ; '.'
0000000000017be3         db  0xff ; '.'
0000000000017be4         db  0x5c ; '\'
0000000000017be5         db  0x2d ; '-'
0000000000017be6         db  0x00 ; '.'
0000000000017be7         db  0x00 ; '.'
0000000000017be8         db  0x84 ; '.'
0000000000017be9         db  0xb7 ; '.'
0000000000017bea         db  0xff ; '.'
0000000000017beb         db  0xff ; '.'
0000000000017bec         db  0x8c ; '.'
0000000000017bed         db  0x2d ; '-'
0000000000017bee         db  0x00 ; '.'
0000000000017bef         db  0x00 ; '.'
0000000000017bf0         db  0x04 ; '.'
0000000000017bf1         db  0xbf ; '.'
0000000000017bf2         db  0xff ; '.'
0000000000017bf3         db  0xff ; '.'
0000000000017bf4         db  0xf0 ; '.'
0000000000017bf5         db  0x2d ; '-'
0000000000017bf6         db  0x00 ; '.'
0000000000017bf7         db  0x00 ; '.'
0000000000017bf8         db  0x34 ; '4'
0000000000017bf9         db  0xbf ; '.'
0000000000017bfa         db  0xff ; '.'
0000000000017bfb         db  0xff ; '.'
0000000000017bfc         db  0x08 ; '.'
0000000000017bfd         db  0x2e ; '.'
0000000000017bfe         db  0x00 ; '.'
0000000000017bff         db  0x00 ; '.'
0000000000017c00         db  0x84 ; '.'
0000000000017c01         db  0xc0 ; '.'
0000000000017c02         db  0xff ; '.'
0000000000017c03         db  0xff ; '.'
0000000000017c04         db  0x6c ; 'l'
0000000000017c05         db  0x2e ; '.'
0000000000017c06         db  0x00 ; '.'
0000000000017c07         db  0x00 ; '.'
0000000000017c08         db  0x14 ; '.'
0000000000017c09         db  0xc1 ; '.'
0000000000017c0a         db  0xff ; '.'
0000000000017c0b         db  0xff ; '.'
0000000000017c0c         db  0xac ; '.'
0000000000017c0d         db  0x2e ; '.'
0000000000017c0e         db  0x00 ; '.'
0000000000017c0f         db  0x00 ; '.'
0000000000017c10         db  0x24 ; '$'
0000000000017c11         db  0xc1 ; '.'
0000000000017c12         db  0xff ; '.'
0000000000017c13         db  0xff ; '.'
0000000000017c14         db  0xc4 ; '.'
0000000000017c15         db  0x2e ; '.'
0000000000017c16         db  0x00 ; '.'
0000000000017c17         db  0x00 ; '.'
0000000000017c18         db  0x34 ; '4'
0000000000017c19         db  0xc1 ; '.'
0000000000017c1a         db  0xff ; '.'
0000000000017c1b         db  0xff ; '.'
0000000000017c1c         db  0xdc ; '.'
0000000000017c1d         db  0x2e ; '.'
0000000000017c1e         db  0x00 ; '.'
0000000000017c1f         db  0x00 ; '.'
0000000000017c20         db  0x54 ; 'T'
0000000000017c21         db  0xc1 ; '.'
0000000000017c22         db  0xff ; '.'
0000000000017c23         db  0xff ; '.'
0000000000017c24         db  0xf0 ; '.'
0000000000017c25         db  0x2e ; '.'
0000000000017c26         db  0x00 ; '.'
0000000000017c27         db  0x00 ; '.'
0000000000017c28         db  0x84 ; '.'
0000000000017c29         db  0xc1 ; '.'
0000000000017c2a         db  0xff ; '.'
0000000000017c2b         db  0xff ; '.'
0000000000017c2c         db  0x0c ; '.'
0000000000017c2d         db  0x2f ; '/'
0000000000017c2e         db  0x00 ; '.'
0000000000017c2f         db  0x00 ; '.'
0000000000017c30         db  0x94 ; '.'
0000000000017c31         db  0xc1 ; '.'
0000000000017c32         db  0xff ; '.'
0000000000017c33         db  0xff ; '.'
0000000000017c34         db  0x20 ; ' '
0000000000017c35         db  0x2f ; '/'
0000000000017c36         db  0x00 ; '.'
0000000000017c37         db  0x00 ; '.'
0000000000017c38         db  0xb4 ; '.'
0000000000017c39         db  0xc2 ; '.'
0000000000017c3a         db  0xff ; '.'
0000000000017c3b         db  0xff ; '.'
0000000000017c3c         db  0x6c ; 'l'
0000000000017c3d         db  0x2f ; '/'
0000000000017c3e         db  0x00 ; '.'
0000000000017c3f         db  0x00 ; '.'
0000000000017c40         db  0x34 ; '4'
0000000000017c41         db  0xc3 ; '.'
0000000000017c42         db  0xff ; '.'
0000000000017c43         db  0xff ; '.'
0000000000017c44         db  0x98 ; '.'
0000000000017c45         db  0x2f ; '/'
0000000000017c46         db  0x00 ; '.'
0000000000017c47         db  0x00 ; '.'
0000000000017c48         db  0x54 ; 'T'
0000000000017c49         db  0xc4 ; '.'
0000000000017c4a         db  0xff ; '.'
0000000000017c4b         db  0xff ; '.'
0000000000017c4c         db  0xf8 ; '.'
0000000000017c4d         db  0x2f ; '/'
0000000000017c4e         db  0x00 ; '.'
0000000000017c4f         db  0x00 ; '.'
0000000000017c50         db  0xc4 ; '.'
0000000000017c51         db  0xc4 ; '.'
0000000000017c52         db  0xff ; '.'
0000000000017c53         db  0xff ; '.'
0000000000017c54         db  0x44 ; 'D'
0000000000017c55         db  0x30 ; '0'
0000000000017c56         db  0x00 ; '.'
0000000000017c57         db  0x00 ; '.'
0000000000017c58         db  0x14 ; '.'
0000000000017c59         db  0xc5 ; '.'
0000000000017c5a         db  0xff ; '.'
0000000000017c5b         db  0xff ; '.'
0000000000017c5c         db  0x84 ; '.'
0000000000017c5d         db  0x30 ; '0'
0000000000017c5e         db  0x00 ; '.'
0000000000017c5f         db  0x00 ; '.'
0000000000017c60         db  0x94 ; '.'
0000000000017c61         db  0xc5 ; '.'
0000000000017c62         db  0xff ; '.'
0000000000017c63         db  0xff ; '.'
0000000000017c64         db  0xd4 ; '.'
0000000000017c65         db  0x30 ; '0'
0000000000017c66         db  0x00 ; '.'
0000000000017c67         db  0x00 ; '.'
0000000000017c68         db  0xa4 ; '.'
0000000000017c69         db  0xc5 ; '.'
0000000000017c6a         db  0xff ; '.'
0000000000017c6b         db  0xff ; '.'
0000000000017c6c         db  0xe8 ; '.'
0000000000017c6d         db  0x30 ; '0'
0000000000017c6e         db  0x00 ; '.'
0000000000017c6f         db  0x00 ; '.'
0000000000017c70         db  0x34 ; '4'
0000000000017c71         db  0xc6 ; '.'
0000000000017c72         db  0xff ; '.'
0000000000017c73         db  0xff ; '.'
0000000000017c74         db  0x04 ; '.'
0000000000017c75         db  0x31 ; '1'
0000000000017c76         db  0x00 ; '.'
0000000000017c77         db  0x00 ; '.'
0000000000017c78         db  0xd4 ; '.'
0000000000017c79         db  0xc6 ; '.'
0000000000017c7a         db  0xff ; '.'
0000000000017c7b         db  0xff ; '.'
0000000000017c7c         db  0x54 ; 'T'
0000000000017c7d         db  0x31 ; '1'
0000000000017c7e         db  0x00 ; '.'
0000000000017c7f         db  0x00 ; '.'
0000000000017c80         db  0xe4 ; '.'
0000000000017c81         db  0xc6 ; '.'
0000000000017c82         db  0xff ; '.'
0000000000017c83         db  0xff ; '.'
0000000000017c84         db  0x68 ; 'h'
0000000000017c85         db  0x31 ; '1'
0000000000017c86         db  0x00 ; '.'
0000000000017c87         db  0x00 ; '.'
0000000000017c88         db  0x34 ; '4'
0000000000017c89         db  0xc7 ; '.'
0000000000017c8a         db  0xff ; '.'
0000000000017c8b         db  0xff ; '.'
0000000000017c8c         db  0x84 ; '.'
0000000000017c8d         db  0x31 ; '1'
0000000000017c8e         db  0x00 ; '.'
0000000000017c8f         db  0x00 ; '.'
0000000000017c90         db  0x94 ; '.'
0000000000017c91         db  0xc7 ; '.'
0000000000017c92         db  0xff ; '.'
0000000000017c93         db  0xff ; '.'
0000000000017c94         db  0xa4 ; '.'
0000000000017c95         db  0x31 ; '1'
0000000000017c96         db  0x00 ; '.'
0000000000017c97         db  0x00 ; '.'
0000000000017c98         db  0xd4 ; '.'
0000000000017c99         db  0xc7 ; '.'
0000000000017c9a         db  0xff ; '.'
0000000000017c9b         db  0xff ; '.'
0000000000017c9c         db  0xbc ; '.'
0000000000017c9d         db  0x31 ; '1'
0000000000017c9e         db  0x00 ; '.'
0000000000017c9f         db  0x00 ; '.'
0000000000017ca0         db  0xf4 ; '.'
0000000000017ca1         db  0xc7 ; '.'
0000000000017ca2         db  0xff ; '.'
0000000000017ca3         db  0xff ; '.'
0000000000017ca4         db  0xd0 ; '.'
0000000000017ca5         db  0x31 ; '1'
0000000000017ca6         db  0x00 ; '.'
0000000000017ca7         db  0x00 ; '.'
0000000000017ca8         db  0x04 ; '.'
0000000000017ca9         db  0xc8 ; '.'
0000000000017caa         db  0xff ; '.'
0000000000017cab         db  0xff ; '.'
0000000000017cac         db  0xe4 ; '.'
0000000000017cad         db  0x31 ; '1'
0000000000017cae         db  0x00 ; '.'
0000000000017caf         db  0x00 ; '.'
0000000000017cb0         db  0x44 ; 'D'
0000000000017cb1         db  0xc8 ; '.'
0000000000017cb2         db  0xff ; '.'
0000000000017cb3         db  0xff ; '.'
0000000000017cb4         db  0xf8 ; '.'
0000000000017cb5         db  0x31 ; '1'
0000000000017cb6         db  0x00 ; '.'
0000000000017cb7         db  0x00 ; '.'
0000000000017cb8         db  0x84 ; '.'
0000000000017cb9         db  0xc8 ; '.'
0000000000017cba         db  0xff ; '.'
0000000000017cbb         db  0xff ; '.'
0000000000017cbc         db  0x0c ; '.'
0000000000017cbd         db  0x32 ; '2'
0000000000017cbe         db  0x00 ; '.'
0000000000017cbf         db  0x00 ; '.'
0000000000017cc0         db  0xc4 ; '.'
0000000000017cc1         db  0xc8 ; '.'
0000000000017cc2         db  0xff ; '.'
0000000000017cc3         db  0xff ; '.'
0000000000017cc4         db  0x2c ; ','
0000000000017cc5         db  0x32 ; '2'
0000000000017cc6         db  0x00 ; '.'
0000000000017cc7         db  0x00 ; '.'
0000000000017cc8         db  0x34 ; '4'
0000000000017cc9         db  0xc9 ; '.'
0000000000017cca         db  0xff ; '.'
0000000000017ccb         db  0xff ; '.'
0000000000017ccc         db  0x4c ; 'L'
0000000000017ccd         db  0x32 ; '2'
0000000000017cce         db  0x00 ; '.'
0000000000017ccf         db  0x00 ; '.'
0000000000017cd0         db  0x64 ; 'd'
0000000000017cd1         db  0xc9 ; '.'
0000000000017cd2         db  0xff ; '.'
0000000000017cd3         db  0xff ; '.'
0000000000017cd4         db  0x68 ; 'h'
0000000000017cd5         db  0x32 ; '2'
0000000000017cd6         db  0x00 ; '.'
0000000000017cd7         db  0x00 ; '.'
0000000000017cd8         db  0xa4 ; '.'
0000000000017cd9         db  0xc9 ; '.'
0000000000017cda         db  0xff ; '.'
0000000000017cdb         db  0xff ; '.'
0000000000017cdc         db  0x88 ; '.'
0000000000017cdd         db  0x32 ; '2'
0000000000017cde         db  0x00 ; '.'
0000000000017cdf         db  0x00 ; '.'
0000000000017ce0         db  0xb4 ; '.'
0000000000017ce1         db  0xc9 ; '.'
0000000000017ce2         db  0xff ; '.'
0000000000017ce3         db  0xff ; '.'
0000000000017ce4         db  0x9c ; '.'
0000000000017ce5         db  0x32 ; '2'
0000000000017ce6         db  0x00 ; '.'
0000000000017ce7         db  0x00 ; '.'
0000000000017ce8         db  0xd4 ; '.'
0000000000017ce9         db  0xca ; '.'
0000000000017cea         db  0xff ; '.'
0000000000017ceb         db  0xff ; '.'
0000000000017cec         db  0xe8 ; '.'
0000000000017ced         db  0x32 ; '2'
0000000000017cee         db  0x00 ; '.'
0000000000017cef         db  0x00 ; '.'
0000000000017cf0         db  0xf4 ; '.'
0000000000017cf1         db  0xca ; '.'
0000000000017cf2         db  0xff ; '.'
0000000000017cf3         db  0xff ; '.'
0000000000017cf4         db  0x04 ; '.'
0000000000017cf5         db  0x33 ; '3'
0000000000017cf6         db  0x00 ; '.'
0000000000017cf7         db  0x00 ; '.'
0000000000017cf8         db  0x54 ; 'T'
0000000000017cf9         db  0xcb ; '.'
0000000000017cfa         db  0xff ; '.'
0000000000017cfb         db  0xff ; '.'
0000000000017cfc         db  0x3c ; '<'
0000000000017cfd         db  0x33 ; '3'
0000000000017cfe         db  0x00 ; '.'
0000000000017cff         db  0x00 ; '.'
0000000000017d00         db  0xb4 ; '.'
0000000000017d01         db  0xcb ; '.'
0000000000017d02         db  0xff ; '.'
0000000000017d03         db  0xff ; '.'
0000000000017d04         db  0x5c ; '\'
0000000000017d05         db  0x33 ; '3'
0000000000017d06         db  0x00 ; '.'
0000000000017d07         db  0x00 ; '.'
0000000000017d08         db  0xe4 ; '.'
0000000000017d09         db  0xce ; '.'
0000000000017d0a         db  0xff ; '.'
0000000000017d0b         db  0xff ; '.'
0000000000017d0c         db  0xa8 ; '.'
0000000000017d0d         db  0x33 ; '3'
0000000000017d0e         db  0x00 ; '.'
0000000000017d0f         db  0x00 ; '.'
0000000000017d10         db  0xf4 ; '.'
0000000000017d11         db  0xce ; '.'
0000000000017d12         db  0xff ; '.'
0000000000017d13         db  0xff ; '.'
0000000000017d14         db  0xbc ; '.'
0000000000017d15         db  0x33 ; '3'
0000000000017d16         db  0x00 ; '.'
0000000000017d17         db  0x00 ; '.'
0000000000017d18         db  0x04 ; '.'
0000000000017d19         db  0xcf ; '.'
0000000000017d1a         db  0xff ; '.'
0000000000017d1b         db  0xff ; '.'
0000000000017d1c         db  0xd0 ; '.'
0000000000017d1d         db  0x33 ; '3'
0000000000017d1e         db  0x00 ; '.'
0000000000017d1f         db  0x00 ; '.'
0000000000017d20         db  0xa4 ; '.'
0000000000017d21         db  0xd0 ; '.'
0000000000017d22         db  0xff ; '.'
0000000000017d23         db  0xff ; '.'
0000000000017d24         db  0x34 ; '4'
0000000000017d25         db  0x34 ; '4'
0000000000017d26         db  0x00 ; '.'
0000000000017d27         db  0x00 ; '.'
0000000000017d28         db  0xf4 ; '.'
0000000000017d29         db  0xd0 ; '.'
0000000000017d2a         db  0xff ; '.'
0000000000017d2b         db  0xff ; '.'
0000000000017d2c         db  0x6c ; 'l'
0000000000017d2d         db  0x34 ; '4'
0000000000017d2e         db  0x00 ; '.'
0000000000017d2f         db  0x00 ; '.'
0000000000017d30         db  0x84 ; '.'
0000000000017d31         db  0xd3 ; '.'
0000000000017d32         db  0xff ; '.'
0000000000017d33         db  0xff ; '.'
0000000000017d34         db  0x80 ; '.'
0000000000017d35         db  0x34 ; '4'
0000000000017d36         db  0x00 ; '.'
0000000000017d37         db  0x00 ; '.'
0000000000017d38         db  0xc4 ; '.'
0000000000017d39         db  0xd5 ; '.'
0000000000017d3a         db  0xff ; '.'
0000000000017d3b         db  0xff ; '.'
0000000000017d3c         db  0xb4 ; '.'
0000000000017d3d         db  0x34 ; '4'
0000000000017d3e         db  0x00 ; '.'
0000000000017d3f         db  0x00 ; '.'
0000000000017d40         db  0xd4 ; '.'
0000000000017d41         db  0xd5 ; '.'
0000000000017d42         db  0xff ; '.'
0000000000017d43         db  0xff ; '.'
0000000000017d44         db  0xcc ; '.'
0000000000017d45         db  0x34 ; '4'
0000000000017d46         db  0x00 ; '.'
0000000000017d47         db  0x00 ; '.'
0000000000017d48         db  0x54 ; 'T'
0000000000017d49         db  0xd6 ; '.'
0000000000017d4a         db  0xff ; '.'
0000000000017d4b         db  0xff ; '.'
0000000000017d4c         db  0x04 ; '.'
0000000000017d4d         db  0x35 ; '5'
0000000000017d4e         db  0x00 ; '.'
0000000000017d4f         db  0x00 ; '.'
0000000000017d50         db  0xd4 ; '.'
0000000000017d51         db  0xd8 ; '.'
0000000000017d52         db  0xff ; '.'
0000000000017d53         db  0xff ; '.'
0000000000017d54         db  0x3c ; '<'
0000000000017d55         db  0x35 ; '5'
0000000000017d56         db  0x00 ; '.'
0000000000017d57         db  0x00 ; '.'
0000000000017d58         db  0x74 ; 't'
0000000000017d59         db  0xd9 ; '.'
0000000000017d5a         db  0xff ; '.'
0000000000017d5b         db  0xff ; '.'
0000000000017d5c         db  0x6c ; 'l'
0000000000017d5d         db  0x35 ; '5'
0000000000017d5e         db  0x00 ; '.'
0000000000017d5f         db  0x00 ; '.'
0000000000017d60         db  0xe4 ; '.'
0000000000017d61         db  0xd9 ; '.'
0000000000017d62         db  0xff ; '.'
0000000000017d63         db  0xff ; '.'
0000000000017d64         db  0xb4 ; '.'
0000000000017d65         db  0x35 ; '5'
0000000000017d66         db  0x00 ; '.'
0000000000017d67         db  0x00 ; '.'
0000000000017d68         db  0xf4 ; '.'
0000000000017d69         db  0xd9 ; '.'
0000000000017d6a         db  0xff ; '.'
0000000000017d6b         db  0xff ; '.'
0000000000017d6c         db  0xcc ; '.'
0000000000017d6d         db  0x35 ; '5'
0000000000017d6e         db  0x00 ; '.'
0000000000017d6f         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x17d70; 0x1aac0[ (11600 bytes)
        ; File offset : [97648; 109248[ (11600 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000017d70         dd         0x00000014                                  ; Length of the record
0000000000017d74         dd         0x00000000                                  ; CIE ID
0000000000017d78         db         0x01                                        ; Version
0000000000017d79         db         "zR", 0                                     ; Augmentation String
0000000000017d7c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000017d7d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000017d7e         db         0x10                                        ; Return address register
0000000000017d7f         db         0x01                                        ; Augmentation data length
0000000000017d80         db         0x1b                                        ; FDE encoding
0000000000017d81         db  0x0c ; '.'
0000000000017d82         db  0x07 ; '.'
0000000000017d83         db  0x08 ; '.'
0000000000017d84         db  0x90 ; '.'
0000000000017d85         db  0x01 ; '.'
0000000000017d86         db  0x07 ; '.'
0000000000017d87         db  0x10 ; '.'
0000000000017d88         dd         0x00000014                                  ; Length of the record
0000000000017d8c         dd         0x0000001c                                  ; FDE: parent CIE at 0x17d70 (FDE encoding = 0x1B)
0000000000017d90         db         0xf0, 0xb6, 0xfe, 0xff                      ; begin 0x3480
0000000000017d94         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x34ab)
0000000000017d98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d99         align      32
0000000000017da0         dd         0x00000014                                  ; Length of the record
0000000000017da4         dd         0x00000000                                  ; CIE ID
0000000000017da8         db         0x01                                        ; Version
0000000000017da9         db         "zR", 0                                     ; Augmentation String
0000000000017dac         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000017dad         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000017dae         db         0x10                                        ; Return address register
0000000000017daf         db         0x01                                        ; Augmentation data length
0000000000017db0         db         0x1b                                        ; FDE encoding
0000000000017db1         db  0x0c ; '.'
0000000000017db2         db  0x07 ; '.'
0000000000017db3         db  0x08 ; '.'
0000000000017db4         db  0x90 ; '.'
0000000000017db5         db  0x01 ; '.'
0000000000017db6         db  0x00 ; '.'
0000000000017db7         db  0x00 ; '.'
0000000000017db8         dd         0x00000024                                  ; Length of the record
0000000000017dbc         dd         0x0000001c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017dc0         db         0xa0, 0xa7, 0xfe, 0xff                      ; begin 0x2560
0000000000017dc4         db         0x20, 0x07, 2 dup (0x00)                    ; length 0x720 (end at 0x2c80)
0000000000017dc8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017dc9         db  0x0e ; '.'
0000000000017dca         db  0x10 ; '.'
0000000000017dcb         db  0x46 ; 'F'
0000000000017dcc         db  0x0e ; '.'
0000000000017dcd         db  0x18 ; '.'
0000000000017dce         db  0x4a ; 'J'
0000000000017dcf         db  0x0f ; '.'
0000000000017dd0         db  0x0b ; '.'
0000000000017dd1         db  0x77 ; 'w'
0000000000017dd2         db  0x08 ; '.'
0000000000017dd3         db  0x80 ; '.'
0000000000017dd4         db  0x00 ; '.'
0000000000017dd5         db  0x3f ; '?'
0000000000017dd6         db  0x1a ; '.'
0000000000017dd7         db  0x3b ; ';'
0000000000017dd8         db  0x2a ; '*'
0000000000017dd9         db  0x33 ; '3'
0000000000017dda         db  0x24 ; '$'
0000000000017ddb         db  0x22 ; '"'
0000000000017ddc         db  0x00 ; '.'
0000000000017ddd         db  0x00 ; '.'
0000000000017dde         db  0x00 ; '.'
0000000000017ddf         db  0x00 ; '.'
0000000000017de0         dd         0x00000014                                  ; Length of the record
0000000000017de4         dd         0x00000044                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017de8         db         0x98, 0xae, 0xfe, 0xff                      ; begin 0x2c80
0000000000017dec         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x2c90)
0000000000017df0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017df1         align      8
0000000000017df8         dd         0x00000028                                  ; Length of the record
0000000000017dfc         dd         0x0000005c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017e00         db         0x90, 0xb7, 0xfe, 0xff                      ; begin 0x3590
0000000000017e04         db         0x5b, 0x01, 2 dup (0x00)                    ; length 0x15b (end at 0x36eb)
0000000000017e08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e09         db  0x41 ; 'A'
0000000000017e0a         db  0x0e ; '.'
0000000000017e0b         db  0x10 ; '.'
0000000000017e0c         db  0x86 ; '.'
0000000000017e0d         db  0x02 ; '.'
0000000000017e0e         db  0x41 ; 'A'
0000000000017e0f         db  0x0e ; '.'
0000000000017e10         db  0x18 ; '.'
0000000000017e11         db  0x83 ; '.'
0000000000017e12         db  0x03 ; '.'
0000000000017e13         db  0x4f ; 'O'
0000000000017e14         db  0x0e ; '.'
0000000000017e15         db  0x70 ; 'p'
0000000000017e16         db  0x02 ; '.'
0000000000017e17         db  0xd3 ; '.'
0000000000017e18         db  0x0a ; '.'
0000000000017e19         db  0x0e ; '.'
0000000000017e1a         db  0x18 ; '.'
0000000000017e1b         db  0x41 ; 'A'
0000000000017e1c         db  0x0e ; '.'
0000000000017e1d         db  0x10 ; '.'
0000000000017e1e         db  0x41 ; 'A'
0000000000017e1f         db  0x0e ; '.'
0000000000017e20         db  0x08 ; '.'
0000000000017e21         db  0x4a ; 'J'
0000000000017e22         db  0x0b ; '.'
0000000000017e23         db  0x00 ; '.'
0000000000017e24         dd         0x00000040                                  ; Length of the record
0000000000017e28         dd         0x00000088                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017e2c         db         0xc4, 0xb8, 0xfe, 0xff                      ; begin 0x36f0
0000000000017e30         db         0x8f, 3 dup (0x00)                          ; length 0x8f (end at 0x377f)
0000000000017e34         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e35         db  0x42 ; 'B'
0000000000017e36         db  0x0e ; '.'
0000000000017e37         db  0x10 ; '.'
0000000000017e38         db  0x8c ; '.'
0000000000017e39         db  0x02 ; '.'
0000000000017e3a         db  0x41 ; 'A'
0000000000017e3b         db  0x0e ; '.'
0000000000017e3c         db  0x18 ; '.'
0000000000017e3d         db  0x86 ; '.'
0000000000017e3e         db  0x03 ; '.'
0000000000017e3f         db  0x44 ; 'D'
0000000000017e40         db  0x0e ; '.'
0000000000017e41         db  0x20 ; ' '
0000000000017e42         db  0x83 ; '.'
0000000000017e43         db  0x04 ; '.'
0000000000017e44         db  0x4a ; 'J'
0000000000017e45         db  0x0e ; '.'
0000000000017e46         db  0x30 ; '0'
0000000000017e47         db  0x51 ; 'Q'
0000000000017e48         db  0x0a ; '.'
0000000000017e49         db  0x0e ; '.'
0000000000017e4a         db  0x20 ; ' '
0000000000017e4b         db  0x4a ; 'J'
0000000000017e4c         db  0x0e ; '.'
0000000000017e4d         db  0x18 ; '.'
0000000000017e4e         db  0x41 ; 'A'
0000000000017e4f         db  0x0e ; '.'
0000000000017e50         db  0x10 ; '.'
0000000000017e51         db  0x42 ; 'B'
0000000000017e52         db  0x0e ; '.'
0000000000017e53         db  0x08 ; '.'
0000000000017e54         db  0x49 ; 'I'
0000000000017e55         db  0x0b ; '.'
0000000000017e56         db  0x7c ; '|'
0000000000017e57         db  0x0a ; '.'
0000000000017e58         db  0x0e ; '.'
0000000000017e59         db  0x20 ; ' '
0000000000017e5a         db  0x43 ; 'C'
0000000000017e5b         db  0x0e ; '.'
0000000000017e5c         db  0x18 ; '.'
0000000000017e5d         db  0x41 ; 'A'
0000000000017e5e         db  0x0e ; '.'
0000000000017e5f         db  0x10 ; '.'
0000000000017e60         db  0x42 ; 'B'
0000000000017e61         db  0x0e ; '.'
0000000000017e62         db  0x08 ; '.'
0000000000017e63         db  0x46 ; 'F'
0000000000017e64         db  0x0b ; '.'
0000000000017e65         db  0x00 ; '.'
0000000000017e66         db  0x00 ; '.'
0000000000017e67         db  0x00 ; '.'
0000000000017e68         dd         0x00000028                                  ; Length of the record
0000000000017e6c         dd         0x000000cc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017e70         db         0x10, 0xb9, 0xfe, 0xff                      ; begin 0x3780
0000000000017e74         db         0x2a, 0x04, 2 dup (0x00)                    ; length 0x42a (end at 0x3baa)
0000000000017e78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e79         db  0x42 ; 'B'
0000000000017e7a         db  0x0e ; '.'
0000000000017e7b         db  0x10 ; '.'
0000000000017e7c         db  0x8d ; '.'
0000000000017e7d         db  0x02 ; '.'
0000000000017e7e         db  0x42 ; 'B'
0000000000017e7f         db  0x0e ; '.'
0000000000017e80         db  0x18 ; '.'
0000000000017e81         db  0x8c ; '.'
0000000000017e82         db  0x03 ; '.'
0000000000017e83         db  0x46 ; 'F'
0000000000017e84         db  0x0e ; '.'
0000000000017e85         db  0x20 ; ' '
0000000000017e86         db  0x86 ; '.'
0000000000017e87         db  0x04 ; '.'
0000000000017e88         db  0x41 ; 'A'
0000000000017e89         db  0x0e ; '.'
0000000000017e8a         db  0x28 ; '('
0000000000017e8b         db  0x83 ; '.'
0000000000017e8c         db  0x05 ; '.'
0000000000017e8d         db  0x49 ; 'I'
0000000000017e8e         db  0x0e ; '.'
0000000000017e8f         db  0xb0 ; '.'
0000000000017e90         db  0x01 ; '.'
0000000000017e91         db  0x00 ; '.'
0000000000017e92         db  0x00 ; '.'
0000000000017e93         db  0x00 ; '.'
0000000000017e94         dd         0x00000058                                  ; Length of the record
0000000000017e98         dd         0x000000f8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017e9c         db         0x44, 0xae, 0xfe, 0xff                      ; begin 0x2ce0
0000000000017ea0         db         0x93, 0x07, 2 dup (0x00)                    ; length 0x793 (end at 0x3473)
0000000000017ea4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ea5         db  0x42 ; 'B'
0000000000017ea6         db  0x0e ; '.'
0000000000017ea7         db  0x10 ; '.'
0000000000017ea8         db  0x8f ; '.'
0000000000017ea9         db  0x02 ; '.'
0000000000017eaa         db  0x42 ; 'B'
0000000000017eab         db  0x0e ; '.'
0000000000017eac         db  0x18 ; '.'
0000000000017ead         db  0x8e ; '.'
0000000000017eae         db  0x03 ; '.'
0000000000017eaf         db  0x42 ; 'B'
0000000000017eb0         db  0x0e ; '.'
0000000000017eb1         db  0x20 ; ' '
0000000000017eb2         db  0x8d ; '.'
0000000000017eb3         db  0x04 ; '.'
0000000000017eb4         db  0x42 ; 'B'
0000000000017eb5         db  0x0e ; '.'
0000000000017eb6         db  0x28 ; '('
0000000000017eb7         db  0x8c ; '.'
0000000000017eb8         db  0x05 ; '.'
0000000000017eb9         db  0x41 ; 'A'
0000000000017eba         db  0x0e ; '.'
0000000000017ebb         db  0x30 ; '0'
0000000000017ebc         db  0x86 ; '.'
0000000000017ebd         db  0x06 ; '.'
0000000000017ebe         db  0x41 ; 'A'
0000000000017ebf         db  0x0e ; '.'
0000000000017ec0         db  0x38 ; '8'
0000000000017ec1         db  0x83 ; '.'
0000000000017ec2         db  0x07 ; '.'
0000000000017ec3         db  0x4c ; 'L'
0000000000017ec4         db  0x0e ; '.'
0000000000017ec5         db  0xd0 ; '.'
0000000000017ec6         db  0x02 ; '.'
0000000000017ec7         db  0x03 ; '.'
0000000000017ec8         db  0x2c ; ','
0000000000017ec9         db  0x02 ; '.'
0000000000017eca         db  0x0a ; '.'
0000000000017ecb         db  0x0e ; '.'
0000000000017ecc         db  0xd8 ; '.'
0000000000017ecd         db  0x02 ; '.'
0000000000017ece         db  0x4f ; 'O'
0000000000017ecf         db  0x0e ; '.'
0000000000017ed0         db  0xe0 ; '.'
0000000000017ed1         db  0x02 ; '.'
0000000000017ed2         db  0x5f ; '_'
0000000000017ed3         db  0x0b ; '.'
0000000000017ed4         db  0x03 ; '.'
0000000000017ed5         db  0xc6 ; '.'
0000000000017ed6         db  0x01 ; '.'
0000000000017ed7         db  0x0a ; '.'
0000000000017ed8         db  0x0e ; '.'
0000000000017ed9         db  0x38 ; '8'
0000000000017eda         db  0x41 ; 'A'
0000000000017edb         db  0x0e ; '.'
0000000000017edc         db  0x30 ; '0'
0000000000017edd         db  0x41 ; 'A'
0000000000017ede         db  0x0e ; '.'
0000000000017edf         db  0x28 ; '('
0000000000017ee0         db  0x42 ; 'B'
0000000000017ee1         db  0x0e ; '.'
0000000000017ee2         db  0x20 ; ' '
0000000000017ee3         db  0x42 ; 'B'
0000000000017ee4         db  0x0e ; '.'
0000000000017ee5         db  0x18 ; '.'
0000000000017ee6         db  0x42 ; 'B'
0000000000017ee7         db  0x0e ; '.'
0000000000017ee8         db  0x10 ; '.'
0000000000017ee9         db  0x42 ; 'B'
0000000000017eea         db  0x0e ; '.'
0000000000017eeb         db  0x08 ; '.'
0000000000017eec         db  0x41 ; 'A'
0000000000017eed         db  0x0b ; '.'
0000000000017eee         db  0x00 ; '.'
0000000000017eef         db  0x00 ; '.'
0000000000017ef0         dd         0x00000038                                  ; Length of the record
0000000000017ef4         dd         0x00000154                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017ef8         db         0xb8, 0xbc, 0xfe, 0xff                      ; begin 0x3bb0
0000000000017efc         db         0x4d, 0x02, 2 dup (0x00)                    ; length 0x24d (end at 0x3dfd)
0000000000017f00         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f01         db  0x42 ; 'B'
0000000000017f02         db  0x0e ; '.'
0000000000017f03         db  0x10 ; '.'
0000000000017f04         db  0x8d ; '.'
0000000000017f05         db  0x02 ; '.'
0000000000017f06         db  0x42 ; 'B'
0000000000017f07         db  0x0e ; '.'
0000000000017f08         db  0x18 ; '.'
0000000000017f09         db  0x8c ; '.'
0000000000017f0a         db  0x03 ; '.'
0000000000017f0b         db  0x44 ; 'D'
0000000000017f0c         db  0x0e ; '.'
0000000000017f0d         db  0x20 ; ' '
0000000000017f0e         db  0x86 ; '.'
0000000000017f0f         db  0x04 ; '.'
0000000000017f10         db  0x41 ; 'A'
0000000000017f11         db  0x0e ; '.'
0000000000017f12         db  0x28 ; '('
0000000000017f13         db  0x83 ; '.'
0000000000017f14         db  0x05 ; '.'
0000000000017f15         db  0x51 ; 'Q'
0000000000017f16         db  0x0e ; '.'
0000000000017f17         db  0xd0 ; '.'
0000000000017f18         db  0x01 ; '.'
0000000000017f19         db  0x02 ; '.'
0000000000017f1a         db  0x59 ; 'Y'
0000000000017f1b         db  0x0a ; '.'
0000000000017f1c         db  0x0e ; '.'
0000000000017f1d         db  0x28 ; '('
0000000000017f1e         db  0x41 ; 'A'
0000000000017f1f         db  0x0e ; '.'
0000000000017f20         db  0x20 ; ' '
0000000000017f21         db  0x41 ; 'A'
0000000000017f22         db  0x0e ; '.'
0000000000017f23         db  0x18 ; '.'
0000000000017f24         db  0x42 ; 'B'
0000000000017f25         db  0x0e ; '.'
0000000000017f26         db  0x10 ; '.'
0000000000017f27         db  0x42 ; 'B'
0000000000017f28         db  0x0e ; '.'
0000000000017f29         db  0x08 ; '.'
0000000000017f2a         db  0x47 ; 'G'
0000000000017f2b         db  0x0b ; '.'
0000000000017f2c         dd         0x00000020                                  ; Length of the record
0000000000017f30         dd         0x00000190                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017f34         db         0xcc, 0xbe, 0xfe, 0xff                      ; begin 0x3e00
0000000000017f38         db         0x71, 3 dup (0x00)                          ; length 0x71 (end at 0x3e71)
0000000000017f3c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f3d         db  0x41 ; 'A'
0000000000017f3e         db  0x0e ; '.'
0000000000017f3f         db  0x10 ; '.'
0000000000017f40         db  0x83 ; '.'
0000000000017f41         db  0x02 ; '.'
0000000000017f42         db  0x55 ; 'U'
0000000000017f43         db  0x0a ; '.'
0000000000017f44         db  0x0e ; '.'
0000000000017f45         db  0x08 ; '.'
0000000000017f46         db  0x4a ; 'J'
0000000000017f47         db  0x0b ; '.'
0000000000017f48         db  0x78 ; 'x'
0000000000017f49         db  0x0a ; '.'
0000000000017f4a         db  0x0e ; '.'
0000000000017f4b         db  0x08 ; '.'
0000000000017f4c         db  0x48 ; 'H'
0000000000017f4d         db  0x0b ; '.'
0000000000017f4e         db  0x00 ; '.'
0000000000017f4f         db  0x00 ; '.'
0000000000017f50         dd         0x0000004c                                  ; Length of the record
0000000000017f54         dd         0x000001b4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017f58         db         0x28, 0xbf, 0xfe, 0xff                      ; begin 0x3e80
0000000000017f5c         db         0xc8, 0x04, 2 dup (0x00)                    ; length 0x4c8 (end at 0x4348)
0000000000017f60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f61         db  0x42 ; 'B'
0000000000017f62         db  0x0e ; '.'
0000000000017f63         db  0x10 ; '.'
0000000000017f64         db  0x8f ; '.'
0000000000017f65         db  0x02 ; '.'
0000000000017f66         db  0x42 ; 'B'
0000000000017f67         db  0x0e ; '.'
0000000000017f68         db  0x18 ; '.'
0000000000017f69         db  0x8e ; '.'
0000000000017f6a         db  0x03 ; '.'
0000000000017f6b         db  0x42 ; 'B'
0000000000017f6c         db  0x0e ; '.'
0000000000017f6d         db  0x20 ; ' '
0000000000017f6e         db  0x8d ; '.'
0000000000017f6f         db  0x04 ; '.'
0000000000017f70         db  0x42 ; 'B'
0000000000017f71         db  0x0e ; '.'
0000000000017f72         db  0x28 ; '('
0000000000017f73         db  0x8c ; '.'
0000000000017f74         db  0x05 ; '.'
0000000000017f75         db  0x44 ; 'D'
0000000000017f76         db  0x0e ; '.'
0000000000017f77         db  0x30 ; '0'
0000000000017f78         db  0x86 ; '.'
0000000000017f79         db  0x06 ; '.'
0000000000017f7a         db  0x41 ; 'A'
0000000000017f7b         db  0x0e ; '.'
0000000000017f7c         db  0x38 ; '8'
0000000000017f7d         db  0x83 ; '.'
0000000000017f7e         db  0x07 ; '.'
0000000000017f7f         db  0x4a ; 'J'
0000000000017f80         db  0x0e ; '.'
0000000000017f81         db  0x80 ; '.'
0000000000017f82         db  0x02 ; '.'
0000000000017f83         db  0x03 ; '.'
0000000000017f84         db  0x3e ; '>'
0000000000017f85         db  0x01 ; '.'
0000000000017f86         db  0x0a ; '.'
0000000000017f87         db  0x0e ; '.'
0000000000017f88         db  0x38 ; '8'
0000000000017f89         db  0x41 ; 'A'
0000000000017f8a         db  0x0e ; '.'
0000000000017f8b         db  0x30 ; '0'
0000000000017f8c         db  0x41 ; 'A'
0000000000017f8d         db  0x0e ; '.'
0000000000017f8e         db  0x28 ; '('
0000000000017f8f         db  0x42 ; 'B'
0000000000017f90         db  0x0e ; '.'
0000000000017f91         db  0x20 ; ' '
0000000000017f92         db  0x42 ; 'B'
0000000000017f93         db  0x0e ; '.'
0000000000017f94         db  0x18 ; '.'
0000000000017f95         db  0x42 ; 'B'
0000000000017f96         db  0x0e ; '.'
0000000000017f97         db  0x10 ; '.'
0000000000017f98         db  0x42 ; 'B'
0000000000017f99         db  0x0e ; '.'
0000000000017f9a         db  0x08 ; '.'
0000000000017f9b         db  0x41 ; 'A'
0000000000017f9c         db  0x0b ; '.'
0000000000017f9d         db  0x00 ; '.'
0000000000017f9e         db  0x00 ; '.'
0000000000017f9f         db  0x00 ; '.'
0000000000017fa0         dd         0x0000004c                                  ; Length of the record
0000000000017fa4         dd         0x00000204                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017fa8         db         0xa8, 0xc3, 0xfe, 0xff                      ; begin 0x4350
0000000000017fac         db         0x5f, 0x08, 2 dup (0x00)                    ; length 0x85f (end at 0x4baf)
0000000000017fb0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017fb1         db  0x42 ; 'B'
0000000000017fb2         db  0x0e ; '.'
0000000000017fb3         db  0x10 ; '.'
0000000000017fb4         db  0x8f ; '.'
0000000000017fb5         db  0x02 ; '.'
0000000000017fb6         db  0x42 ; 'B'
0000000000017fb7         db  0x0e ; '.'
0000000000017fb8         db  0x18 ; '.'
0000000000017fb9         db  0x8e ; '.'
0000000000017fba         db  0x03 ; '.'
0000000000017fbb         db  0x42 ; 'B'
0000000000017fbc         db  0x0e ; '.'
0000000000017fbd         db  0x20 ; ' '
0000000000017fbe         db  0x8d ; '.'
0000000000017fbf         db  0x04 ; '.'
0000000000017fc0         db  0x42 ; 'B'
0000000000017fc1         db  0x0e ; '.'
0000000000017fc2         db  0x28 ; '('
0000000000017fc3         db  0x8c ; '.'
0000000000017fc4         db  0x05 ; '.'
0000000000017fc5         db  0x41 ; 'A'
0000000000017fc6         db  0x0e ; '.'
0000000000017fc7         db  0x30 ; '0'
0000000000017fc8         db  0x86 ; '.'
0000000000017fc9         db  0x06 ; '.'
0000000000017fca         db  0x41 ; 'A'
0000000000017fcb         db  0x0e ; '.'
0000000000017fcc         db  0x38 ; '8'
0000000000017fcd         db  0x83 ; '.'
0000000000017fce         db  0x07 ; '.'
0000000000017fcf         db  0x47 ; 'G'
0000000000017fd0         db  0x0e ; '.'
0000000000017fd1         db  0x90 ; '.'
0000000000017fd2         db  0x02 ; '.'
0000000000017fd3         db  0x03 ; '.'
0000000000017fd4         db  0x3b ; ';'
0000000000017fd5         db  0x01 ; '.'
0000000000017fd6         db  0x0a ; '.'
0000000000017fd7         db  0x0e ; '.'
0000000000017fd8         db  0x38 ; '8'
0000000000017fd9         db  0x41 ; 'A'
0000000000017fda         db  0x0e ; '.'
0000000000017fdb         db  0x30 ; '0'
0000000000017fdc         db  0x41 ; 'A'
0000000000017fdd         db  0x0e ; '.'
0000000000017fde         db  0x28 ; '('
0000000000017fdf         db  0x42 ; 'B'
0000000000017fe0         db  0x0e ; '.'
0000000000017fe1         db  0x20 ; ' '
0000000000017fe2         db  0x42 ; 'B'
0000000000017fe3         db  0x0e ; '.'
0000000000017fe4         db  0x18 ; '.'
0000000000017fe5         db  0x42 ; 'B'
0000000000017fe6         db  0x0e ; '.'
0000000000017fe7         db  0x10 ; '.'
0000000000017fe8         db  0x42 ; 'B'
0000000000017fe9         db  0x0e ; '.'
0000000000017fea         db  0x08 ; '.'
0000000000017feb         db  0x4a ; 'J'
0000000000017fec         db  0x0b ; '.'
0000000000017fed         db  0x00 ; '.'
0000000000017fee         db  0x00 ; '.'
0000000000017fef         db  0x00 ; '.'
0000000000017ff0         dd         0x00000020                                  ; Length of the record
0000000000017ff4         dd         0x00000254                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000017ff8         db         0xb8, 0xcb, 0xfe, 0xff                      ; begin 0x4bb0
0000000000017ffc         db         0x44, 3 dup (0x00)                          ; length 0x44 (end at 0x4bf4)
0000000000018000         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018001         db  0x4f ; 'O'
0000000000018002         db  0x0e ; '.'
0000000000018003         db  0x10 ; '.'
0000000000018004         db  0x83 ; '.'
0000000000018005         db  0x02 ; '.'
0000000000018006         db  0x52 ; 'R'
0000000000018007         db  0x0e ; '.'
0000000000018008         db  0x08 ; '.'
0000000000018009         db  0x47 ; 'G'
000000000001800a         db  0xc3 ; '.'
000000000001800b         db  0x48 ; 'H'
000000000001800c         db  0x0e ; '.'
000000000001800d         db  0x10 ; '.'
000000000001800e         db  0x83 ; '.'
000000000001800f         db  0x02 ; '.'
0000000000018010         db  0x53 ; 'S'
0000000000018011         db  0x0e ; '.'
0000000000018012         db  0x08 ; '.'
0000000000018013         db  0x00 ; '.'
0000000000018014         dd         0x00000038                                  ; Length of the record
0000000000018018         dd         0x00000278                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001801c         db         0xe4, 0xcb, 0xfe, 0xff                      ; begin 0x4c00
0000000000018020         db         0xa5, 3 dup (0x00)                          ; length 0xa5 (end at 0x4ca5)
0000000000018024         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018025         db  0x4a ; 'J'
0000000000018026         db  0x0e ; '.'
0000000000018027         db  0x10 ; '.'
0000000000018028         db  0x8c ; '.'
0000000000018029         db  0x02 ; '.'
000000000001802a         db  0x44 ; 'D'
000000000001802b         db  0x0e ; '.'
000000000001802c         db  0x18 ; '.'
000000000001802d         db  0x86 ; '.'
000000000001802e         db  0x03 ; '.'
000000000001802f         db  0x41 ; 'A'
0000000000018030         db  0x0e ; '.'
0000000000018031         db  0x20 ; ' '
0000000000018032         db  0x83 ; '.'
0000000000018033         db  0x04 ; '.'
0000000000018034         db  0x02 ; '.'
0000000000018035         db  0x40 ; '@'
0000000000018036         db  0x0a ; '.'
0000000000018037         db  0x0e ; '.'
0000000000018038         db  0x18 ; '.'
0000000000018039         db  0x43 ; 'C'
000000000001803a         db  0x0e ; '.'
000000000001803b         db  0x10 ; '.'
000000000001803c         db  0x42 ; 'B'
000000000001803d         db  0x0e ; '.'
000000000001803e         db  0x08 ; '.'
000000000001803f         db  0x44 ; 'D'
0000000000018040         db  0x0b ; '.'
0000000000018041         db  0x41 ; 'A'
0000000000018042         db  0x0a ; '.'
0000000000018043         db  0x0e ; '.'
0000000000018044         db  0x18 ; '.'
0000000000018045         db  0x46 ; 'F'
0000000000018046         db  0x0e ; '.'
0000000000018047         db  0x10 ; '.'
0000000000018048         db  0x42 ; 'B'
0000000000018049         db  0x0e ; '.'
000000000001804a         db  0x08 ; '.'
000000000001804b         db  0x47 ; 'G'
000000000001804c         db  0x0b ; '.'
000000000001804d         db  0x00 ; '.'
000000000001804e         db  0x00 ; '.'
000000000001804f         db  0x00 ; '.'
0000000000018050         dd         0x0000001c                                  ; Length of the record
0000000000018054         dd         0x000002b4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018058         db         0x58, 0xcc, 0xfe, 0xff                      ; begin 0x4cb0
000000000001805c         db         0x37, 3 dup (0x00)                          ; length 0x37 (end at 0x4ce7)
0000000000018060         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018061         db  0x41 ; 'A'
0000000000018062         db  0x0e ; '.'
0000000000018063         db  0x10 ; '.'
0000000000018064         db  0x83 ; '.'
0000000000018065         db  0x02 ; '.'
0000000000018066         db  0x59 ; 'Y'
0000000000018067         db  0x0a ; '.'
0000000000018068         db  0x0e ; '.'
0000000000018069         db  0x08 ; '.'
000000000001806a         db  0x46 ; 'F'
000000000001806b         db  0x0b ; '.'
000000000001806c         db  0x56 ; 'V'
000000000001806d         db  0x0e ; '.'
000000000001806e         db  0x08 ; '.'
000000000001806f         db  0x00 ; '.'
0000000000018070         dd         0x00000010                                  ; Length of the record
0000000000018074         dd         0x000002d4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018078         db         0x18, 0xac, 0xfe, 0xff                      ; begin 0x2c90
000000000001807c         db         0x16, 3 dup (0x00)                          ; length 0x16 (end at 0x2ca6)
0000000000018080         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018081         align      4
0000000000018084         dd         0x00000014                                  ; Length of the record
0000000000018088         dd         0x000002e8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001808c         db         0x1a, 0xac, 0xfe, 0xff                      ; begin 0x2ca6
0000000000018090         db         0x33, 3 dup (0x00)                          ; length 0x33 (end at 0x2cd9)
0000000000018094         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018095         db  0x41 ; 'A'
0000000000018096         db  0x0e ; '.'
0000000000018097         db  0x10 ; '.'
0000000000018098         db  0x83 ; '.'
0000000000018099         db  0x02 ; '.'
000000000001809a         db  0x00 ; '.'
000000000001809b         db  0x00 ; '.'
000000000001809c         dd         0x00000034                                  ; Length of the record
00000000000180a0         dd         0x00000300                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000180a4         db         0x4c, 0xcc, 0xfe, 0xff                      ; begin 0x4cf0
00000000000180a8         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x4da6)
00000000000180ac         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000180ad         db  0x42 ; 'B'
00000000000180ae         db  0x0e ; '.'
00000000000180af         db  0x10 ; '.'
00000000000180b0         db  0x8c ; '.'
00000000000180b1         db  0x02 ; '.'
00000000000180b2         db  0x41 ; 'A'
00000000000180b3         db  0x0e ; '.'
00000000000180b4         db  0x18 ; '.'
00000000000180b5         db  0x86 ; '.'
00000000000180b6         db  0x03 ; '.'
00000000000180b7         db  0x44 ; 'D'
00000000000180b8         db  0x0e ; '.'
00000000000180b9         db  0x20 ; ' '
00000000000180ba         db  0x83 ; '.'
00000000000180bb         db  0x04 ; '.'
00000000000180bc         db  0x02 ; '.'
00000000000180bd         db  0x97 ; '.'
00000000000180be         db  0x0a ; '.'
00000000000180bf         db  0x0e ; '.'
00000000000180c0         db  0x18 ; '.'
00000000000180c1         db  0x41 ; 'A'
00000000000180c2         db  0x0e ; '.'
00000000000180c3         db  0x10 ; '.'
00000000000180c4         db  0x42 ; 'B'
00000000000180c5         db  0x0e ; '.'
00000000000180c6         db  0x08 ; '.'
00000000000180c7         db  0x47 ; 'G'
00000000000180c8         db  0x0b ; '.'
00000000000180c9         db  0x41 ; 'A'
00000000000180ca         db  0x0e ; '.'
00000000000180cb         db  0x18 ; '.'
00000000000180cc         db  0x41 ; 'A'
00000000000180cd         db  0x0e ; '.'
00000000000180ce         db  0x10 ; '.'
00000000000180cf         db  0x42 ; 'B'
00000000000180d0         db  0x0e ; '.'
00000000000180d1         db  0x08 ; '.'
00000000000180d2         db  0x00 ; '.'
00000000000180d3         db  0x00 ; '.'
00000000000180d4         dd         0x00000064                                  ; Length of the record
00000000000180d8         dd         0x00000338                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000180dc         db         0xd4, 0xcc, 0xfe, 0xff                      ; begin 0x4db0
00000000000180e0         db         0x05, 0x01, 2 dup (0x00)                    ; length 0x105 (end at 0x4eb5)
00000000000180e4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000180e5         db  0x42 ; 'B'
00000000000180e6         db  0x0e ; '.'
00000000000180e7         db  0x10 ; '.'
00000000000180e8         db  0x8d ; '.'
00000000000180e9         db  0x02 ; '.'
00000000000180ea         db  0x42 ; 'B'
00000000000180eb         db  0x0e ; '.'
00000000000180ec         db  0x18 ; '.'
00000000000180ed         db  0x8c ; '.'
00000000000180ee         db  0x03 ; '.'
00000000000180ef         db  0x45 ; 'E'
00000000000180f0         db  0x0e ; '.'
00000000000180f1         db  0x20 ; ' '
00000000000180f2         db  0x86 ; '.'
00000000000180f3         db  0x04 ; '.'
00000000000180f4         db  0x41 ; 'A'
00000000000180f5         db  0x0e ; '.'
00000000000180f6         db  0x28 ; '('
00000000000180f7         db  0x83 ; '.'
00000000000180f8         db  0x05 ; '.'
00000000000180f9         db  0x51 ; 'Q'
00000000000180fa         db  0x0e ; '.'
00000000000180fb         db  0x38 ; '8'
00000000000180fc         db  0x4c ; 'L'
00000000000180fd         db  0x0e ; '.'
00000000000180fe         db  0x40 ; '@'
00000000000180ff         db  0x57 ; 'W'
0000000000018100         db  0x0e ; '.'
0000000000018101         db  0x38 ; '8'
0000000000018102         db  0x41 ; 'A'
0000000000018103         db  0x0e ; '.'
0000000000018104         db  0x30 ; '0'
0000000000018105         db  0x4e ; 'N'
0000000000018106         db  0x0a ; '.'
0000000000018107         db  0x0e ; '.'
0000000000018108         db  0x28 ; '('
0000000000018109         db  0x48 ; 'H'
000000000001810a         db  0x0e ; '.'
000000000001810b         db  0x20 ; ' '
000000000001810c         db  0x41 ; 'A'
000000000001810d         db  0x0e ; '.'
000000000001810e         db  0x18 ; '.'
000000000001810f         db  0x42 ; 'B'
0000000000018110         db  0x0e ; '.'
0000000000018111         db  0x10 ; '.'
0000000000018112         db  0x42 ; 'B'
0000000000018113         db  0x0e ; '.'
0000000000018114         db  0x08 ; '.'
0000000000018115         db  0x46 ; 'F'
0000000000018116         db  0x0b ; '.'
0000000000018117         db  0x79 ; 'y'
0000000000018118         db  0x0a ; '.'
0000000000018119         db  0x0e ; '.'
000000000001811a         db  0x28 ; '('
000000000001811b         db  0x43 ; 'C'
000000000001811c         db  0x0e ; '.'
000000000001811d         db  0x20 ; ' '
000000000001811e         db  0x41 ; 'A'
000000000001811f         db  0x0e ; '.'
0000000000018120         db  0x18 ; '.'
0000000000018121         db  0x42 ; 'B'
0000000000018122         db  0x0e ; '.'
0000000000018123         db  0x10 ; '.'
0000000000018124         db  0x42 ; 'B'
0000000000018125         db  0x0e ; '.'
0000000000018126         db  0x08 ; '.'
0000000000018127         db  0x47 ; 'G'
0000000000018128         db  0x0b ; '.'
0000000000018129         db  0x02 ; '.'
000000000001812a         db  0x54 ; 'T'
000000000001812b         db  0x0e ; '.'
000000000001812c         db  0x28 ; '('
000000000001812d         db  0x43 ; 'C'
000000000001812e         db  0x0e ; '.'
000000000001812f         db  0x20 ; ' '
0000000000018130         db  0x41 ; 'A'
0000000000018131         db  0x0e ; '.'
0000000000018132         db  0x18 ; '.'
0000000000018133         db  0x42 ; 'B'
0000000000018134         db  0x0e ; '.'
0000000000018135         db  0x10 ; '.'
0000000000018136         db  0x42 ; 'B'
0000000000018137         db  0x0e ; '.'
0000000000018138         db  0x08 ; '.'
0000000000018139         db  0x00 ; '.'
000000000001813a         db  0x00 ; '.'
000000000001813b         db  0x00 ; '.'
000000000001813c         dd         0x0000004c                                  ; Length of the record
0000000000018140         dd         0x000003a0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018144         db         0x7c, 0xcd, 0xfe, 0xff                      ; begin 0x4ec0
0000000000018148         db         0x4b, 0x01, 2 dup (0x00)                    ; length 0x14b (end at 0x500b)
000000000001814c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001814d         db  0x42 ; 'B'
000000000001814e         db  0x0e ; '.'
000000000001814f         db  0x10 ; '.'
0000000000018150         db  0x8e ; '.'
0000000000018151         db  0x02 ; '.'
0000000000018152         db  0x42 ; 'B'
0000000000018153         db  0x0e ; '.'
0000000000018154         db  0x18 ; '.'
0000000000018155         db  0x8d ; '.'
0000000000018156         db  0x03 ; '.'
0000000000018157         db  0x45 ; 'E'
0000000000018158         db  0x0e ; '.'
0000000000018159         db  0x20 ; ' '
000000000001815a         db  0x8c ; '.'
000000000001815b         db  0x04 ; '.'
000000000001815c         db  0x41 ; 'A'
000000000001815d         db  0x0e ; '.'
000000000001815e         db  0x28 ; '('
000000000001815f         db  0x86 ; '.'
0000000000018160         db  0x05 ; '.'
0000000000018161         db  0x44 ; 'D'
0000000000018162         db  0x0e ; '.'
0000000000018163         db  0x30 ; '0'
0000000000018164         db  0x83 ; '.'
0000000000018165         db  0x06 ; '.'
0000000000018166         db  0x4a ; 'J'
0000000000018167         db  0x0e ; '.'
0000000000018168         db  0x50 ; 'P'
0000000000018169         db  0x02 ; '.'
000000000001816a         db  0x83 ; '.'
000000000001816b         db  0x0e ; '.'
000000000001816c         db  0x58 ; 'X'
000000000001816d         db  0x4d ; 'M'
000000000001816e         db  0x0e ; '.'
000000000001816f         db  0x60 ; '`'
0000000000018170         db  0x56 ; 'V'
0000000000018171         db  0x0e ; '.'
0000000000018172         db  0x58 ; 'X'
0000000000018173         db  0x41 ; 'A'
0000000000018174         db  0x0e ; '.'
0000000000018175         db  0x50 ; 'P'
0000000000018176         db  0x02 ; '.'
0000000000018177         db  0x68 ; 'h'
0000000000018178         db  0x0a ; '.'
0000000000018179         db  0x0e ; '.'
000000000001817a         db  0x30 ; '0'
000000000001817b         db  0x41 ; 'A'
000000000001817c         db  0x0e ; '.'
000000000001817d         db  0x28 ; '('
000000000001817e         db  0x41 ; 'A'
000000000001817f         db  0x0e ; '.'
0000000000018180         db  0x20 ; ' '
0000000000018181         db  0x42 ; 'B'
0000000000018182         db  0x0e ; '.'
0000000000018183         db  0x18 ; '.'
0000000000018184         db  0x42 ; 'B'
0000000000018185         db  0x0e ; '.'
0000000000018186         db  0x10 ; '.'
0000000000018187         db  0x42 ; 'B'
0000000000018188         db  0x0e ; '.'
0000000000018189         db  0x08 ; '.'
000000000001818a         db  0x41 ; 'A'
000000000001818b         db  0x0b ; '.'
000000000001818c         dd         0x0000004c                                  ; Length of the record
0000000000018190         dd         0x000003f0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018194         db         0x7c, 0xce, 0xfe, 0xff                      ; begin 0x5010
0000000000018198         db         0xbe, 3 dup (0x00)                          ; length 0xbe (end at 0x50ce)
000000000001819c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001819d         db  0x42 ; 'B'
000000000001819e         db  0x0e ; '.'
000000000001819f         db  0x10 ; '.'
00000000000181a0         db  0x8d ; '.'
00000000000181a1         db  0x02 ; '.'
00000000000181a2         db  0x42 ; 'B'
00000000000181a3         db  0x0e ; '.'
00000000000181a4         db  0x18 ; '.'
00000000000181a5         db  0x8c ; '.'
00000000000181a6         db  0x03 ; '.'
00000000000181a7         db  0x44 ; 'D'
00000000000181a8         db  0x0e ; '.'
00000000000181a9         db  0x20 ; ' '
00000000000181aa         db  0x86 ; '.'
00000000000181ab         db  0x04 ; '.'
00000000000181ac         db  0x41 ; 'A'
00000000000181ad         db  0x0e ; '.'
00000000000181ae         db  0x28 ; '('
00000000000181af         db  0x83 ; '.'
00000000000181b0         db  0x05 ; '.'
00000000000181b1         db  0x51 ; 'Q'
00000000000181b2         db  0x0e ; '.'
00000000000181b3         db  0x30 ; '0'
00000000000181b4         db  0x56 ; 'V'
00000000000181b5         db  0x0a ; '.'
00000000000181b6         db  0x0e ; '.'
00000000000181b7         db  0x28 ; '('
00000000000181b8         db  0x46 ; 'F'
00000000000181b9         db  0x0e ; '.'
00000000000181ba         db  0x20 ; ' '
00000000000181bb         db  0x41 ; 'A'
00000000000181bc         db  0x0e ; '.'
00000000000181bd         db  0x18 ; '.'
00000000000181be         db  0x42 ; 'B'
00000000000181bf         db  0x0e ; '.'
00000000000181c0         db  0x10 ; '.'
00000000000181c1         db  0x42 ; 'B'
00000000000181c2         db  0x0e ; '.'
00000000000181c3         db  0x08 ; '.'
00000000000181c4         db  0x45 ; 'E'
00000000000181c5         db  0x0b ; '.'
00000000000181c6         db  0x02 ; '.'
00000000000181c7         db  0x54 ; 'T'
00000000000181c8         db  0x0a ; '.'
00000000000181c9         db  0x0e ; '.'
00000000000181ca         db  0x28 ; '('
00000000000181cb         db  0x43 ; 'C'
00000000000181cc         db  0x0e ; '.'
00000000000181cd         db  0x20 ; ' '
00000000000181ce         db  0x41 ; 'A'
00000000000181cf         db  0x0e ; '.'
00000000000181d0         db  0x18 ; '.'
00000000000181d1         db  0x42 ; 'B'
00000000000181d2         db  0x0e ; '.'
00000000000181d3         db  0x10 ; '.'
00000000000181d4         db  0x42 ; 'B'
00000000000181d5         db  0x0e ; '.'
00000000000181d6         db  0x08 ; '.'
00000000000181d7         db  0x44 ; 'D'
00000000000181d8         db  0x0b ; '.'
00000000000181d9         db  0x00 ; '.'
00000000000181da         db  0x00 ; '.'
00000000000181db         db  0x00 ; '.'
00000000000181dc         dd         0x00000064                                  ; Length of the record
00000000000181e0         dd         0x00000440                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000181e4         db         0xec, 0xce, 0xfe, 0xff                      ; begin 0x50d0
00000000000181e8         db         0x0e, 0x04, 2 dup (0x00)                    ; length 0x40e (end at 0x54de)
00000000000181ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000181ed         db  0x42 ; 'B'
00000000000181ee         db  0x0e ; '.'
00000000000181ef         db  0x10 ; '.'
00000000000181f0         db  0x8f ; '.'
00000000000181f1         db  0x02 ; '.'
00000000000181f2         db  0x42 ; 'B'
00000000000181f3         db  0x0e ; '.'
00000000000181f4         db  0x18 ; '.'
00000000000181f5         db  0x8e ; '.'
00000000000181f6         db  0x03 ; '.'
00000000000181f7         db  0x42 ; 'B'
00000000000181f8         db  0x0e ; '.'
00000000000181f9         db  0x20 ; ' '
00000000000181fa         db  0x8d ; '.'
00000000000181fb         db  0x04 ; '.'
00000000000181fc         db  0x42 ; 'B'
00000000000181fd         db  0x0e ; '.'
00000000000181fe         db  0x28 ; '('
00000000000181ff         db  0x8c ; '.'
0000000000018200         db  0x05 ; '.'
0000000000018201         db  0x41 ; 'A'
0000000000018202         db  0x0e ; '.'
0000000000018203         db  0x30 ; '0'
0000000000018204         db  0x86 ; '.'
0000000000018205         db  0x06 ; '.'
0000000000018206         db  0x41 ; 'A'
0000000000018207         db  0x0e ; '.'
0000000000018208         db  0x38 ; '8'
0000000000018209         db  0x83 ; '.'
000000000001820a         db  0x07 ; '.'
000000000001820b         db  0x44 ; 'D'
000000000001820c         db  0x0e ; '.'
000000000001820d         db  0xb0 ; '.'
000000000001820e         db  0x01 ; '.'
000000000001820f         db  0x02 ; '.'
0000000000018210         db  0xfb ; '.'
0000000000018211         db  0x0a ; '.'
0000000000018212         db  0x0e ; '.'
0000000000018213         db  0x38 ; '8'
0000000000018214         db  0x44 ; 'D'
0000000000018215         db  0x0e ; '.'
0000000000018216         db  0x30 ; '0'
0000000000018217         db  0x41 ; 'A'
0000000000018218         db  0x0e ; '.'
0000000000018219         db  0x28 ; '('
000000000001821a         db  0x42 ; 'B'
000000000001821b         db  0x0e ; '.'
000000000001821c         db  0x20 ; ' '
000000000001821d         db  0x42 ; 'B'
000000000001821e         db  0x0e ; '.'
000000000001821f         db  0x18 ; '.'
0000000000018220         db  0x42 ; 'B'
0000000000018221         db  0x0e ; '.'
0000000000018222         db  0x10 ; '.'
0000000000018223         db  0x42 ; 'B'
0000000000018224         db  0x0e ; '.'
0000000000018225         db  0x08 ; '.'
0000000000018226         db  0x4a ; 'J'
0000000000018227         db  0x0b ; '.'
0000000000018228         db  0x03 ; '.'
0000000000018229         db  0x4d ; 'M'
000000000001822a         db  0x01 ; '.'
000000000001822b         db  0x0a ; '.'
000000000001822c         db  0x0e ; '.'
000000000001822d         db  0x38 ; '8'
000000000001822e         db  0x41 ; 'A'
000000000001822f         db  0x0e ; '.'
0000000000018230         db  0x30 ; '0'
0000000000018231         db  0x41 ; 'A'
0000000000018232         db  0x0e ; '.'
0000000000018233         db  0x28 ; '('
0000000000018234         db  0x42 ; 'B'
0000000000018235         db  0x0e ; '.'
0000000000018236         db  0x20 ; ' '
0000000000018237         db  0x42 ; 'B'
0000000000018238         db  0x0e ; '.'
0000000000018239         db  0x18 ; '.'
000000000001823a         db  0x42 ; 'B'
000000000001823b         db  0x0e ; '.'
000000000001823c         db  0x10 ; '.'
000000000001823d         db  0x42 ; 'B'
000000000001823e         db  0x0e ; '.'
000000000001823f         db  0x08 ; '.'
0000000000018240         db  0x49 ; 'I'
0000000000018241         db  0x0b ; '.'
0000000000018242         db  0x00 ; '.'
0000000000018243         db  0x00 ; '.'
0000000000018244         dd         0x00000058                                  ; Length of the record
0000000000018248         dd         0x000004a8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001824c         db         0x94, 0xd2, 0xfe, 0xff                      ; begin 0x54e0
0000000000018250         db         0xd0, 3 dup (0x00)                          ; length 0xd0 (end at 0x55b0)
0000000000018254         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018255         db  0x42 ; 'B'
0000000000018256         db  0x0e ; '.'
0000000000018257         db  0x10 ; '.'
0000000000018258         db  0x8d ; '.'
0000000000018259         db  0x02 ; '.'
000000000001825a         db  0x42 ; 'B'
000000000001825b         db  0x0e ; '.'
000000000001825c         db  0x18 ; '.'
000000000001825d         db  0x8c ; '.'
000000000001825e         db  0x03 ; '.'
000000000001825f         db  0x41 ; 'A'
0000000000018260         db  0x0e ; '.'
0000000000018261         db  0x20 ; ' '
0000000000018262         db  0x86 ; '.'
0000000000018263         db  0x04 ; '.'
0000000000018264         db  0x41 ; 'A'
0000000000018265         db  0x0e ; '.'
0000000000018266         db  0x28 ; '('
0000000000018267         db  0x83 ; '.'
0000000000018268         db  0x05 ; '.'
0000000000018269         db  0x47 ; 'G'
000000000001826a         db  0x0e ; '.'
000000000001826b         db  0x30 ; '0'
000000000001826c         db  0x02 ; '.'
000000000001826d         db  0x5e ; '^'
000000000001826e         db  0x0a ; '.'
000000000001826f         db  0x0e ; '.'
0000000000018270         db  0x28 ; '('
0000000000018271         db  0x46 ; 'F'
0000000000018272         db  0x0e ; '.'
0000000000018273         db  0x20 ; ' '
0000000000018274         db  0x41 ; 'A'
0000000000018275         db  0x0e ; '.'
0000000000018276         db  0x18 ; '.'
0000000000018277         db  0x42 ; 'B'
0000000000018278         db  0x0e ; '.'
0000000000018279         db  0x10 ; '.'
000000000001827a         db  0x42 ; 'B'
000000000001827b         db  0x0e ; '.'
000000000001827c         db  0x08 ; '.'
000000000001827d         db  0x4a ; 'J'
000000000001827e         db  0x0b ; '.'
000000000001827f         db  0x4c ; 'L'
0000000000018280         db  0x0a ; '.'
0000000000018281         db  0x0e ; '.'
0000000000018282         db  0x28 ; '('
0000000000018283         db  0x48 ; 'H'
0000000000018284         db  0x0e ; '.'
0000000000018285         db  0x20 ; ' '
0000000000018286         db  0x41 ; 'A'
0000000000018287         db  0x0e ; '.'
0000000000018288         db  0x18 ; '.'
0000000000018289         db  0x42 ; 'B'
000000000001828a         db  0x0e ; '.'
000000000001828b         db  0x10 ; '.'
000000000001828c         db  0x42 ; 'B'
000000000001828d         db  0x0e ; '.'
000000000001828e         db  0x08 ; '.'
000000000001828f         db  0x47 ; 'G'
0000000000018290         db  0x0b ; '.'
0000000000018291         db  0x67 ; 'g'
0000000000018292         db  0x0e ; '.'
0000000000018293         db  0x28 ; '('
0000000000018294         db  0x43 ; 'C'
0000000000018295         db  0x0e ; '.'
0000000000018296         db  0x20 ; ' '
0000000000018297         db  0x41 ; 'A'
0000000000018298         db  0x0e ; '.'
0000000000018299         db  0x18 ; '.'
000000000001829a         db  0x42 ; 'B'
000000000001829b         db  0x0e ; '.'
000000000001829c         db  0x10 ; '.'
000000000001829d         db  0x42 ; 'B'
000000000001829e         db  0x0e ; '.'
000000000001829f         db  0x08 ; '.'
00000000000182a0         dd         0x00000034                                  ; Length of the record
00000000000182a4         dd         0x00000504                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000182a8         db         0x08, 0xd3, 0xfe, 0xff                      ; begin 0x55b0
00000000000182ac         db         0x75, 3 dup (0x00)                          ; length 0x75 (end at 0x5625)
00000000000182b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000182b1         db  0x42 ; 'B'
00000000000182b2         db  0x0e ; '.'
00000000000182b3         db  0x10 ; '.'
00000000000182b4         db  0x8c ; '.'
00000000000182b5         db  0x02 ; '.'
00000000000182b6         db  0x41 ; 'A'
00000000000182b7         db  0x0e ; '.'
00000000000182b8         db  0x18 ; '.'
00000000000182b9         db  0x86 ; '.'
00000000000182ba         db  0x03 ; '.'
00000000000182bb         db  0x44 ; 'D'
00000000000182bc         db  0x0e ; '.'
00000000000182bd         db  0x20 ; ' '
00000000000182be         db  0x83 ; '.'
00000000000182bf         db  0x04 ; '.'
00000000000182c0         db  0x02 ; '.'
00000000000182c1         db  0x54 ; 'T'
00000000000182c2         db  0x0a ; '.'
00000000000182c3         db  0x0e ; '.'
00000000000182c4         db  0x18 ; '.'
00000000000182c5         db  0x43 ; 'C'
00000000000182c6         db  0x0e ; '.'
00000000000182c7         db  0x10 ; '.'
00000000000182c8         db  0x42 ; 'B'
00000000000182c9         db  0x0e ; '.'
00000000000182ca         db  0x08 ; '.'
00000000000182cb         db  0x48 ; 'H'
00000000000182cc         db  0x0b ; '.'
00000000000182cd         db  0x49 ; 'I'
00000000000182ce         db  0x0e ; '.'
00000000000182cf         db  0x18 ; '.'
00000000000182d0         db  0x41 ; 'A'
00000000000182d1         db  0x0e ; '.'
00000000000182d2         db  0x10 ; '.'
00000000000182d3         db  0x42 ; 'B'
00000000000182d4         db  0x0e ; '.'
00000000000182d5         db  0x08 ; '.'
00000000000182d6         db  0x00 ; '.'
00000000000182d7         db  0x00 ; '.'
00000000000182d8         dd         0x00000018                                  ; Length of the record
00000000000182dc         dd         0x0000053c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000182e0         db         0x50, 0xd3, 0xfe, 0xff                      ; begin 0x5630
00000000000182e4         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x565b)
00000000000182e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000182e9         db  0x58 ; 'X'
00000000000182ea         db  0x0e ; '.'
00000000000182eb         db  0x10 ; '.'
00000000000182ec         db  0x83 ; '.'
00000000000182ed         db  0x02 ; '.'
00000000000182ee         db  0x52 ; 'R'
00000000000182ef         db  0x0e ; '.'
00000000000182f0         db  0x08 ; '.'
00000000000182f1         db  0x00 ; '.'
00000000000182f2         db  0x00 ; '.'
00000000000182f3         db  0x00 ; '.'
00000000000182f4         dd         0x00000018                                  ; Length of the record
00000000000182f8         dd         0x00000558                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000182fc         db         0x64, 0xd3, 0xfe, 0xff                      ; begin 0x5660
0000000000018300         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x568b)
0000000000018304         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018305         db  0x58 ; 'X'
0000000000018306         db  0x0e ; '.'
0000000000018307         db  0x10 ; '.'
0000000000018308         db  0x83 ; '.'
0000000000018309         db  0x02 ; '.'
000000000001830a         db  0x52 ; 'R'
000000000001830b         db  0x0e ; '.'
000000000001830c         db  0x08 ; '.'
000000000001830d         db  0x00 ; '.'
000000000001830e         db  0x00 ; '.'
000000000001830f         db  0x00 ; '.'
0000000000018310         dd         0x00000018                                  ; Length of the record
0000000000018314         dd         0x00000574                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018318         db         0x78, 0xd3, 0xfe, 0xff                      ; begin 0x5690
000000000001831c         db         0x34, 3 dup (0x00)                          ; length 0x34 (end at 0x56c4)
0000000000018320         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018321         db  0x45 ; 'E'
0000000000018322         db  0x0e ; '.'
0000000000018323         db  0x10 ; '.'
0000000000018324         db  0x83 ; '.'
0000000000018325         db  0x02 ; '.'
0000000000018326         db  0x6e ; 'n'
0000000000018327         db  0x0e ; '.'
0000000000018328         db  0x08 ; '.'
0000000000018329         db  0x00 ; '.'
000000000001832a         db  0x00 ; '.'
000000000001832b         db  0x00 ; '.'
000000000001832c         dd         0x00000018                                  ; Length of the record
0000000000018330         dd         0x00000590                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018334         db         0x9c, 0xd3, 0xfe, 0xff                      ; begin 0x56d0
0000000000018338         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x56f4)
000000000001833c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001833d         db  0x41 ; 'A'
000000000001833e         db  0x0e ; '.'
000000000001833f         db  0x10 ; '.'
0000000000018340         db  0x83 ; '.'
0000000000018341         db  0x02 ; '.'
0000000000018342         db  0x62 ; 'b'
0000000000018343         db  0x0e ; '.'
0000000000018344         db  0x08 ; '.'
0000000000018345         db  0x00 ; '.'
0000000000018346         db  0x00 ; '.'
0000000000018347         db  0x00 ; '.'
0000000000018348         dd         0x0000007c                                  ; Length of the record
000000000001834c         dd         0x000005ac                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018350         db         0xb0, 0xd3, 0xfe, 0xff                      ; begin 0x5700
0000000000018354         db         0x0c, 0x02, 2 dup (0x00)                    ; length 0x20c (end at 0x590c)
0000000000018358         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018359         db  0x42 ; 'B'
000000000001835a         db  0x0e ; '.'
000000000001835b         db  0x10 ; '.'
000000000001835c         db  0x8f ; '.'
000000000001835d         db  0x02 ; '.'
000000000001835e         db  0x42 ; 'B'
000000000001835f         db  0x0e ; '.'
0000000000018360         db  0x18 ; '.'
0000000000018361         db  0x8e ; '.'
0000000000018362         db  0x03 ; '.'
0000000000018363         db  0x42 ; 'B'
0000000000018364         db  0x0e ; '.'
0000000000018365         db  0x20 ; ' '
0000000000018366         db  0x8d ; '.'
0000000000018367         db  0x04 ; '.'
0000000000018368         db  0x42 ; 'B'
0000000000018369         db  0x0e ; '.'
000000000001836a         db  0x28 ; '('
000000000001836b         db  0x8c ; '.'
000000000001836c         db  0x05 ; '.'
000000000001836d         db  0x44 ; 'D'
000000000001836e         db  0x0e ; '.'
000000000001836f         db  0x30 ; '0'
0000000000018370         db  0x86 ; '.'
0000000000018371         db  0x06 ; '.'
0000000000018372         db  0x41 ; 'A'
0000000000018373         db  0x0e ; '.'
0000000000018374         db  0x38 ; '8'
0000000000018375         db  0x83 ; '.'
0000000000018376         db  0x07 ; '.'
0000000000018377         db  0x49 ; 'I'
0000000000018378         db  0x0e ; '.'
0000000000018379         db  0x40 ; '@'
000000000001837a         db  0x02 ; '.'
000000000001837b         db  0x8c ; '.'
000000000001837c         db  0x0a ; '.'
000000000001837d         db  0x0e ; '.'
000000000001837e         db  0x38 ; '8'
000000000001837f         db  0x41 ; 'A'
0000000000018380         db  0x0e ; '.'
0000000000018381         db  0x30 ; '0'
0000000000018382         db  0x41 ; 'A'
0000000000018383         db  0x0e ; '.'
0000000000018384         db  0x28 ; '('
0000000000018385         db  0x42 ; 'B'
0000000000018386         db  0x0e ; '.'
0000000000018387         db  0x20 ; ' '
0000000000018388         db  0x42 ; 'B'
0000000000018389         db  0x0e ; '.'
000000000001838a         db  0x18 ; '.'
000000000001838b         db  0x42 ; 'B'
000000000001838c         db  0x0e ; '.'
000000000001838d         db  0x10 ; '.'
000000000001838e         db  0x42 ; 'B'
000000000001838f         db  0x0e ; '.'
0000000000018390         db  0x08 ; '.'
0000000000018391         db  0x44 ; 'D'
0000000000018392         db  0x0b ; '.'
0000000000018393         db  0x50 ; 'P'
0000000000018394         db  0x0a ; '.'
0000000000018395         db  0x0e ; '.'
0000000000018396         db  0x38 ; '8'
0000000000018397         db  0x46 ; 'F'
0000000000018398         db  0x0e ; '.'
0000000000018399         db  0x30 ; '0'
000000000001839a         db  0x41 ; 'A'
000000000001839b         db  0x0e ; '.'
000000000001839c         db  0x28 ; '('
000000000001839d         db  0x42 ; 'B'
000000000001839e         db  0x0e ; '.'
000000000001839f         db  0x20 ; ' '
00000000000183a0         db  0x42 ; 'B'
00000000000183a1         db  0x0e ; '.'
00000000000183a2         db  0x18 ; '.'
00000000000183a3         db  0x42 ; 'B'
00000000000183a4         db  0x0e ; '.'
00000000000183a5         db  0x10 ; '.'
00000000000183a6         db  0x42 ; 'B'
00000000000183a7         db  0x0e ; '.'
00000000000183a8         db  0x08 ; '.'
00000000000183a9         db  0x41 ; 'A'
00000000000183aa         db  0x0b ; '.'
00000000000183ab         db  0x03 ; '.'
00000000000183ac         db  0x04 ; '.'
00000000000183ad         db  0x01 ; '.'
00000000000183ae         db  0x0a ; '.'
00000000000183af         db  0x0e ; '.'
00000000000183b0         db  0x38 ; '8'
00000000000183b1         db  0x41 ; 'A'
00000000000183b2         db  0x0e ; '.'
00000000000183b3         db  0x30 ; '0'
00000000000183b4         db  0x41 ; 'A'
00000000000183b5         db  0x0e ; '.'
00000000000183b6         db  0x28 ; '('
00000000000183b7         db  0x42 ; 'B'
00000000000183b8         db  0x0e ; '.'
00000000000183b9         db  0x20 ; ' '
00000000000183ba         db  0x44 ; 'D'
00000000000183bb         db  0x0e ; '.'
00000000000183bc         db  0x18 ; '.'
00000000000183bd         db  0x42 ; 'B'
00000000000183be         db  0x0e ; '.'
00000000000183bf         db  0x10 ; '.'
00000000000183c0         db  0x42 ; 'B'
00000000000183c1         db  0x0e ; '.'
00000000000183c2         db  0x08 ; '.'
00000000000183c3         db  0x48 ; 'H'
00000000000183c4         db  0x0b ; '.'
00000000000183c5         db  0x00 ; '.'
00000000000183c6         db  0x00 ; '.'
00000000000183c7         db  0x00 ; '.'
00000000000183c8         dd         0x0000001c                                  ; Length of the record
00000000000183cc         dd         0x0000062c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000183d0         db         0x40, 0xd5, 0xfe, 0xff                      ; begin 0x5910
00000000000183d4         db         0x2a, 3 dup (0x00)                          ; length 0x2a (end at 0x593a)
00000000000183d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000183d9         db  0x41 ; 'A'
00000000000183da         db  0x0e ; '.'
00000000000183db         db  0x10 ; '.'
00000000000183dc         db  0x83 ; '.'
00000000000183dd         db  0x02 ; '.'
00000000000183de         db  0x4e ; 'N'
00000000000183df         db  0x0a ; '.'
00000000000183e0         db  0x0e ; '.'
00000000000183e1         db  0x08 ; '.'
00000000000183e2         db  0x41 ; 'A'
00000000000183e3         db  0x0b ; '.'
00000000000183e4         db  0x59 ; 'Y'
00000000000183e5         db  0x0e ; '.'
00000000000183e6         db  0x08 ; '.'
00000000000183e7         db  0x00 ; '.'
00000000000183e8         dd         0x0000002c                                  ; Length of the record
00000000000183ec         dd         0x0000064c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000183f0         db         0x50, 0xd5, 0xfe, 0xff                      ; begin 0x5940
00000000000183f4         db         0x0c, 0x41, 2 dup (0x00)                    ; length 0x410c (end at 0x9a4c)
00000000000183f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000183f9         db  0x41 ; 'A'
00000000000183fa         db  0x0e ; '.'
00000000000183fb         db  0x10 ; '.'
00000000000183fc         db  0x86 ; '.'
00000000000183fd         db  0x02 ; '.'
00000000000183fe         db  0x43 ; 'C'
00000000000183ff         db  0x0d ; '.'
0000000000018400         db  0x06 ; '.'
0000000000018401         db  0x48 ; 'H'
0000000000018402         db  0x8f ; '.'
0000000000018403         db  0x03 ; '.'
0000000000018404         db  0x8e ; '.'
0000000000018405         db  0x04 ; '.'
0000000000018406         db  0x8d ; '.'
0000000000018407         db  0x05 ; '.'
0000000000018408         db  0x8c ; '.'
0000000000018409         db  0x06 ; '.'
000000000001840a         db  0x44 ; 'D'
000000000001840b         db  0x83 ; '.'
000000000001840c         db  0x07 ; '.'
000000000001840d         db  0x03 ; '.'
000000000001840e         db  0x5a ; 'Z'
000000000001840f         db  0x08 ; '.'
0000000000018410         db  0x0a ; '.'
0000000000018411         db  0x0c ; '.'
0000000000018412         db  0x07 ; '.'
0000000000018413         db  0x08 ; '.'
0000000000018414         db  0x46 ; 'F'
0000000000018415         db  0x0b ; '.'
0000000000018416         db  0x00 ; '.'
0000000000018417         db  0x00 ; '.'
0000000000018418         dd         0x0000002c                                  ; Length of the record
000000000001841c         dd         0x0000067c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018420         db         0x30, 0x16, 2 dup (0xff)                    ; begin 0x9a50
0000000000018424         db         0x65, 0x01, 2 dup (0x00)                    ; length 0x165 (end at 0x9bb5)
0000000000018428         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018429         db  0x44 ; 'D'
000000000001842a         db  0x0e ; '.'
000000000001842b         db  0x20 ; ' '
000000000001842c         db  0x02 ; '.'
000000000001842d         db  0x59 ; 'Y'
000000000001842e         db  0x0e ; '.'
000000000001842f         db  0x28 ; '('
0000000000018430         db  0x45 ; 'E'
0000000000018431         db  0x0e ; '.'
0000000000018432         db  0x30 ; '0'
0000000000018433         db  0x5c ; '\'
0000000000018434         db  0x0e ; '.'
0000000000018435         db  0x38 ; '8'
0000000000018436         db  0x42 ; 'B'
0000000000018437         db  0x0e ; '.'
0000000000018438         db  0x40 ; '@'
0000000000018439         db  0x49 ; 'I'
000000000001843a         db  0x0e ; '.'
000000000001843b         db  0x20 ; ' '
000000000001843c         db  0x54 ; 'T'
000000000001843d         db  0x0a ; '.'
000000000001843e         db  0x0e ; '.'
000000000001843f         db  0x08 ; '.'
0000000000018440         db  0x43 ; 'C'
0000000000018441         db  0x0b ; '.'
0000000000018442         db  0x00 ; '.'
0000000000018443         db  0x00 ; '.'
0000000000018444         db  0x00 ; '.'
0000000000018445         db  0x00 ; '.'
0000000000018446         db  0x00 ; '.'
0000000000018447         db  0x00 ; '.'
0000000000018448         dd         0x00000010                                  ; Length of the record
000000000001844c         dd         0x000006ac                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018450         db         0x70, 0x17, 2 dup (0xff)                    ; begin 0x9bc0
0000000000018454         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x9bcc)
0000000000018458         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018459         align      4
000000000001845c         dd         0x00000010                                  ; Length of the record
0000000000018460         dd         0x000006c0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018464         db         0x6c, 0x17, 2 dup (0xff)                    ; begin 0x9bd0
0000000000018468         db         0x1c, 3 dup (0x00)                          ; length 0x1c (end at 0x9bec)
000000000001846c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001846d         align      16
0000000000018470         dd         0x00000018                                  ; Length of the record
0000000000018474         dd         0x000006d4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018478         db         0x78, 0x17, 2 dup (0xff)                    ; begin 0x9bf0
000000000001847c         db         0x16, 3 dup (0x00)                          ; length 0x16 (end at 0x9c06)
0000000000018480         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018481         db  0x41 ; 'A'
0000000000018482         db  0x0e ; '.'
0000000000018483         db  0x10 ; '.'
0000000000018484         db  0x83 ; '.'
0000000000018485         db  0x02 ; '.'
0000000000018486         db  0x50 ; 'P'
0000000000018487         db  0x0e ; '.'
0000000000018488         db  0x08 ; '.'
0000000000018489         db  0x00 ; '.'
000000000001848a         db  0x00 ; '.'
000000000001848b         db  0x00 ; '.'
000000000001848c         dd         0x00000020                                  ; Length of the record
0000000000018490         dd         0x000006f0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018494         db         0x7c, 0x17, 2 dup (0xff)                    ; begin 0x9c10
0000000000018498         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0x9c7a)
000000000001849c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001849d         db  0x41 ; 'A'
000000000001849e         db  0x0e ; '.'
000000000001849f         db  0x10 ; '.'
00000000000184a0         db  0x83 ; '.'
00000000000184a1         db  0x02 ; '.'
00000000000184a2         db  0x44 ; 'D'
00000000000184a3         db  0x0e ; '.'
00000000000184a4         db  0x30 ; '0'
00000000000184a5         db  0x02 ; '.'
00000000000184a6         db  0x5e ; '^'
00000000000184a7         db  0x0a ; '.'
00000000000184a8         db  0x0e ; '.'
00000000000184a9         db  0x10 ; '.'
00000000000184aa         db  0x41 ; 'A'
00000000000184ab         db  0x0e ; '.'
00000000000184ac         db  0x08 ; '.'
00000000000184ad         db  0x41 ; 'A'
00000000000184ae         db  0x0b ; '.'
00000000000184af         db  0x00 ; '.'
00000000000184b0         dd         0x00000018                                  ; Length of the record
00000000000184b4         dd         0x00000714                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000184b8         db         0xc8, 0x17, 2 dup (0xff)                    ; begin 0x9c80
00000000000184bc         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0x9cd9)
00000000000184c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000184c1         db  0x44 ; 'D'
00000000000184c2         db  0x0e ; '.'
00000000000184c3         db  0x30 ; '0'
00000000000184c4         db  0x02 ; '.'
00000000000184c5         db  0x45 ; 'E'
00000000000184c6         db  0x0a ; '.'
00000000000184c7         db  0x0e ; '.'
00000000000184c8         db  0x08 ; '.'
00000000000184c9         db  0x47 ; 'G'
00000000000184ca         db  0x0b ; '.'
00000000000184cb         db  0x00 ; '.'
00000000000184cc         dd         0x00000038                                  ; Length of the record
00000000000184d0         dd         0x00000730                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000184d4         db         0x0c, 0x18, 2 dup (0xff)                    ; begin 0x9ce0
00000000000184d8         db         0x79, 3 dup (0x00)                          ; length 0x79 (end at 0x9d59)
00000000000184dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000184dd         db  0x42 ; 'B'
00000000000184de         db  0x0e ; '.'
00000000000184df         db  0x10 ; '.'
00000000000184e0         db  0x8d ; '.'
00000000000184e1         db  0x02 ; '.'
00000000000184e2         db  0x42 ; 'B'
00000000000184e3         db  0x0e ; '.'
00000000000184e4         db  0x18 ; '.'
00000000000184e5         db  0x8c ; '.'
00000000000184e6         db  0x03 ; '.'
00000000000184e7         db  0x44 ; 'D'
00000000000184e8         db  0x0e ; '.'
00000000000184e9         db  0x20 ; ' '
00000000000184ea         db  0x86 ; '.'
00000000000184eb         db  0x04 ; '.'
00000000000184ec         db  0x41 ; 'A'
00000000000184ed         db  0x0e ; '.'
00000000000184ee         db  0x28 ; '('
00000000000184ef         db  0x83 ; '.'
00000000000184f0         db  0x05 ; '.'
00000000000184f1         db  0x4f ; 'O'
00000000000184f2         db  0x0e ; '.'
00000000000184f3         db  0x30 ; '0'
00000000000184f4         db  0x02 ; '.'
00000000000184f5         db  0x50 ; 'P'
00000000000184f6         db  0x0a ; '.'
00000000000184f7         db  0x0e ; '.'
00000000000184f8         db  0x28 ; '('
00000000000184f9         db  0x41 ; 'A'
00000000000184fa         db  0x0e ; '.'
00000000000184fb         db  0x20 ; ' '
00000000000184fc         db  0x41 ; 'A'
00000000000184fd         db  0x0e ; '.'
00000000000184fe         db  0x18 ; '.'
00000000000184ff         db  0x42 ; 'B'
0000000000018500         db  0x0e ; '.'
0000000000018501         db  0x10 ; '.'
0000000000018502         db  0x42 ; 'B'
0000000000018503         db  0x0e ; '.'
0000000000018504         db  0x08 ; '.'
0000000000018505         db  0x42 ; 'B'
0000000000018506         db  0x0b ; '.'
0000000000018507         db  0x00 ; '.'
0000000000018508         dd         0x00000018                                  ; Length of the record
000000000001850c         dd         0x0000076c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018510         db         0x50, 0x18, 2 dup (0xff)                    ; begin 0x9d60
0000000000018514         db         0x3b, 3 dup (0x00)                          ; length 0x3b (end at 0x9d9b)
0000000000018518         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018519         db  0x59 ; 'Y'
000000000001851a         db  0x0e ; '.'
000000000001851b         db  0x10 ; '.'
000000000001851c         db  0x5c ; '\'
000000000001851d         db  0x0a ; '.'
000000000001851e         db  0x0e ; '.'
000000000001851f         db  0x08 ; '.'
0000000000018520         db  0x41 ; 'A'
0000000000018521         db  0x0b ; '.'
0000000000018522         db  0x00 ; '.'
0000000000018523         db  0x00 ; '.'
0000000000018524         dd         0x00000010                                  ; Length of the record
0000000000018528         dd         0x00000788                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001852c         db         0x74, 0x18, 2 dup (0xff)                    ; begin 0x9da0
0000000000018530         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x9dac)
0000000000018534         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018535         align      8
0000000000018538         dd         0x00000010                                  ; Length of the record
000000000001853c         dd         0x0000079c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018540         db         0x70, 0x18, 2 dup (0xff)                    ; begin 0x9db0
0000000000018544         db         0x2a, 3 dup (0x00)                          ; length 0x2a (end at 0x9dda)
0000000000018548         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018549         align      4
000000000001854c         dd         0x00000050                                  ; Length of the record
0000000000018550         dd         0x000007b0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018554         db         0x8c, 0x18, 2 dup (0xff)                    ; begin 0x9de0
0000000000018558         db         0x0d, 0x03, 2 dup (0x00)                    ; length 0x30d (end at 0xa0ed)
000000000001855c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001855d         db  0x42 ; 'B'
000000000001855e         db  0x0e ; '.'
000000000001855f         db  0x10 ; '.'
0000000000018560         db  0x8f ; '.'
0000000000018561         db  0x02 ; '.'
0000000000018562         db  0x42 ; 'B'
0000000000018563         db  0x0e ; '.'
0000000000018564         db  0x18 ; '.'
0000000000018565         db  0x8e ; '.'
0000000000018566         db  0x03 ; '.'
0000000000018567         db  0x45 ; 'E'
0000000000018568         db  0x0e ; '.'
0000000000018569         db  0x20 ; ' '
000000000001856a         db  0x8d ; '.'
000000000001856b         db  0x04 ; '.'
000000000001856c         db  0x42 ; 'B'
000000000001856d         db  0x0e ; '.'
000000000001856e         db  0x28 ; '('
000000000001856f         db  0x8c ; '.'
0000000000018570         db  0x05 ; '.'
0000000000018571         db  0x44 ; 'D'
0000000000018572         db  0x0e ; '.'
0000000000018573         db  0x30 ; '0'
0000000000018574         db  0x86 ; '.'
0000000000018575         db  0x06 ; '.'
0000000000018576         db  0x41 ; 'A'
0000000000018577         db  0x0e ; '.'
0000000000018578         db  0x38 ; '8'
0000000000018579         db  0x83 ; '.'
000000000001857a         db  0x07 ; '.'
000000000001857b         db  0x51 ; 'Q'
000000000001857c         db  0x0e ; '.'
000000000001857d         db  0xd0 ; '.'
000000000001857e         db  0x20 ; ' '
000000000001857f         db  0x03 ; '.'
0000000000018580         db  0x5d ; ']'
0000000000018581         db  0x01 ; '.'
0000000000018582         db  0x0a ; '.'
0000000000018583         db  0x0e ; '.'
0000000000018584         db  0x38 ; '8'
0000000000018585         db  0x41 ; 'A'
0000000000018586         db  0x0e ; '.'
0000000000018587         db  0x30 ; '0'
0000000000018588         db  0x41 ; 'A'
0000000000018589         db  0x0e ; '.'
000000000001858a         db  0x28 ; '('
000000000001858b         db  0x42 ; 'B'
000000000001858c         db  0x0e ; '.'
000000000001858d         db  0x20 ; ' '
000000000001858e         db  0x42 ; 'B'
000000000001858f         db  0x0e ; '.'
0000000000018590         db  0x18 ; '.'
0000000000018591         db  0x42 ; 'B'
0000000000018592         db  0x0e ; '.'
0000000000018593         db  0x10 ; '.'
0000000000018594         db  0x42 ; 'B'
0000000000018595         db  0x0e ; '.'
0000000000018596         db  0x08 ; '.'
0000000000018597         db  0x48 ; 'H'
0000000000018598         db  0x0b ; '.'
0000000000018599         db  0x00 ; '.'
000000000001859a         db  0x00 ; '.'
000000000001859b         db  0x00 ; '.'
000000000001859c         db  0x00 ; '.'
000000000001859d         db  0x00 ; '.'
000000000001859e         db  0x00 ; '.'
000000000001859f         db  0x00 ; '.'
00000000000185a0         dd         0x00000010                                  ; Length of the record
00000000000185a4         dd         0x00000804                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000185a8         db         0x48, 0x1b, 2 dup (0xff)                    ; begin 0xa0f0
00000000000185ac         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0xa108)
00000000000185b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185b1         align      4
00000000000185b4         dd         0x00000028                                  ; Length of the record
00000000000185b8         dd         0x00000818                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000185bc         db         0x54, 0x1b, 2 dup (0xff)                    ; begin 0xa110
00000000000185c0         db         0x58, 3 dup (0x00)                          ; length 0x58 (end at 0xa168)
00000000000185c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185c5         db  0x42 ; 'B'
00000000000185c6         db  0x0e ; '.'
00000000000185c7         db  0x10 ; '.'
00000000000185c8         db  0x8c ; '.'
00000000000185c9         db  0x02 ; '.'
00000000000185ca         db  0x41 ; 'A'
00000000000185cb         db  0x0e ; '.'
00000000000185cc         db  0x18 ; '.'
00000000000185cd         db  0x86 ; '.'
00000000000185ce         db  0x03 ; '.'
00000000000185cf         db  0x44 ; 'D'
00000000000185d0         db  0x0e ; '.'
00000000000185d1         db  0x20 ; ' '
00000000000185d2         db  0x83 ; '.'
00000000000185d3         db  0x04 ; '.'
00000000000185d4         db  0x02 ; '.'
00000000000185d5         db  0x4d ; 'M'
00000000000185d6         db  0x0e ; '.'
00000000000185d7         db  0x18 ; '.'
00000000000185d8         db  0x41 ; 'A'
00000000000185d9         db  0x0e ; '.'
00000000000185da         db  0x10 ; '.'
00000000000185db         db  0x42 ; 'B'
00000000000185dc         db  0x0e ; '.'
00000000000185dd         db  0x08 ; '.'
00000000000185de         db  0x00 ; '.'
00000000000185df         db  0x00 ; '.'
00000000000185e0         dd         0x00000010                                  ; Length of the record
00000000000185e4         dd         0x00000844                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000185e8         db         0x88, 0x1b, 2 dup (0xff)                    ; begin 0xa170
00000000000185ec         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0xa181)
00000000000185f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185f1         align      4
00000000000185f4         dd         0x00000048                                  ; Length of the record
00000000000185f8         dd         0x00000858                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000185fc         db         0x94, 0x1b, 2 dup (0xff)                    ; begin 0xa190
0000000000018600         db         0x61, 0x01, 2 dup (0x00)                    ; length 0x161 (end at 0xa2f1)
0000000000018604         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018605         db  0x42 ; 'B'
0000000000018606         db  0x0e ; '.'
0000000000018607         db  0x10 ; '.'
0000000000018608         db  0x8f ; '.'
0000000000018609         db  0x02 ; '.'
000000000001860a         db  0x42 ; 'B'
000000000001860b         db  0x0e ; '.'
000000000001860c         db  0x18 ; '.'
000000000001860d         db  0x8e ; '.'
000000000001860e         db  0x03 ; '.'
000000000001860f         db  0x45 ; 'E'
0000000000018610         db  0x0e ; '.'
0000000000018611         db  0x20 ; ' '
0000000000018612         db  0x8d ; '.'
0000000000018613         db  0x04 ; '.'
0000000000018614         db  0x42 ; 'B'
0000000000018615         db  0x0e ; '.'
0000000000018616         db  0x28 ; '('
0000000000018617         db  0x8c ; '.'
0000000000018618         db  0x05 ; '.'
0000000000018619         db  0x44 ; 'D'
000000000001861a         db  0x0e ; '.'
000000000001861b         db  0x30 ; '0'
000000000001861c         db  0x86 ; '.'
000000000001861d         db  0x06 ; '.'
000000000001861e         db  0x41 ; 'A'
000000000001861f         db  0x0e ; '.'
0000000000018620         db  0x38 ; '8'
0000000000018621         db  0x83 ; '.'
0000000000018622         db  0x07 ; '.'
0000000000018623         db  0x4f ; 'O'
0000000000018624         db  0x0e ; '.'
0000000000018625         db  0x80 ; '.'
0000000000018626         db  0x03 ; '.'
0000000000018627         db  0x02 ; '.'
0000000000018628         db  0xc1 ; '.'
0000000000018629         db  0x0a ; '.'
000000000001862a         db  0x0e ; '.'
000000000001862b         db  0x38 ; '8'
000000000001862c         db  0x41 ; 'A'
000000000001862d         db  0x0e ; '.'
000000000001862e         db  0x30 ; '0'
000000000001862f         db  0x41 ; 'A'
0000000000018630         db  0x0e ; '.'
0000000000018631         db  0x28 ; '('
0000000000018632         db  0x42 ; 'B'
0000000000018633         db  0x0e ; '.'
0000000000018634         db  0x20 ; ' '
0000000000018635         db  0x42 ; 'B'
0000000000018636         db  0x0e ; '.'
0000000000018637         db  0x18 ; '.'
0000000000018638         db  0x42 ; 'B'
0000000000018639         db  0x0e ; '.'
000000000001863a         db  0x10 ; '.'
000000000001863b         db  0x42 ; 'B'
000000000001863c         db  0x0e ; '.'
000000000001863d         db  0x08 ; '.'
000000000001863e         db  0x46 ; 'F'
000000000001863f         db  0x0b ; '.'
0000000000018640         dd         0x00000044                                  ; Length of the record
0000000000018644         dd         0x000008a4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018648         db         0xb8, 0x1c, 2 dup (0xff)                    ; begin 0xa300
000000000001864c         db         0x52, 0x01, 2 dup (0x00)                    ; length 0x152 (end at 0xa452)
0000000000018650         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018651         db  0x42 ; 'B'
0000000000018652         db  0x0e ; '.'
0000000000018653         db  0x10 ; '.'
0000000000018654         db  0x8e ; '.'
0000000000018655         db  0x02 ; '.'
0000000000018656         db  0x42 ; 'B'
0000000000018657         db  0x0e ; '.'
0000000000018658         db  0x18 ; '.'
0000000000018659         db  0x8d ; '.'
000000000001865a         db  0x03 ; '.'
000000000001865b         db  0x42 ; 'B'
000000000001865c         db  0x0e ; '.'
000000000001865d         db  0x20 ; ' '
000000000001865e         db  0x8c ; '.'
000000000001865f         db  0x04 ; '.'
0000000000018660         db  0x41 ; 'A'
0000000000018661         db  0x0e ; '.'
0000000000018662         db  0x28 ; '('
0000000000018663         db  0x86 ; '.'
0000000000018664         db  0x05 ; '.'
0000000000018665         db  0x44 ; 'D'
0000000000018666         db  0x0e ; '.'
0000000000018667         db  0x30 ; '0'
0000000000018668         db  0x83 ; '.'
0000000000018669         db  0x06 ; '.'
000000000001866a         db  0x4c ; 'L'
000000000001866b         db  0x0e ; '.'
000000000001866c         db  0xe0 ; '.'
000000000001866d         db  0x02 ; '.'
000000000001866e         db  0x02 ; '.'
000000000001866f         db  0xb2 ; '.'
0000000000018670         db  0x0a ; '.'
0000000000018671         db  0x0e ; '.'
0000000000018672         db  0x30 ; '0'
0000000000018673         db  0x41 ; 'A'
0000000000018674         db  0x0e ; '.'
0000000000018675         db  0x28 ; '('
0000000000018676         db  0x41 ; 'A'
0000000000018677         db  0x0e ; '.'
0000000000018678         db  0x20 ; ' '
0000000000018679         db  0x42 ; 'B'
000000000001867a         db  0x0e ; '.'
000000000001867b         db  0x18 ; '.'
000000000001867c         db  0x42 ; 'B'
000000000001867d         db  0x0e ; '.'
000000000001867e         db  0x10 ; '.'
000000000001867f         db  0x42 ; 'B'
0000000000018680         db  0x0e ; '.'
0000000000018681         db  0x08 ; '.'
0000000000018682         db  0x47 ; 'G'
0000000000018683         db  0x0b ; '.'
0000000000018684         db  0x00 ; '.'
0000000000018685         db  0x00 ; '.'
0000000000018686         db  0x00 ; '.'
0000000000018687         db  0x00 ; '.'
0000000000018688         dd         0x00000034                                  ; Length of the record
000000000001868c         dd         0x000008ec                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018690         db         0xd0, 0x1d, 2 dup (0xff)                    ; begin 0xa460
0000000000018694         db         0x8c, 3 dup (0x00)                          ; length 0x8c (end at 0xa4ec)
0000000000018698         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018699         db  0x42 ; 'B'
000000000001869a         db  0x0e ; '.'
000000000001869b         db  0x10 ; '.'
000000000001869c         db  0x8c ; '.'
000000000001869d         db  0x02 ; '.'
000000000001869e         db  0x41 ; 'A'
000000000001869f         db  0x0e ; '.'
00000000000186a0         db  0x18 ; '.'                                         ; DATA XREF=fts_build+2088
00000000000186a1         db  0x86 ; '.'                                         ; DATA XREF=fts_build+1242
00000000000186a2         db  0x03 ; '.'
00000000000186a3         db  0x44 ; 'D'
00000000000186a4         db  0x0e ; '.'
00000000000186a5         db  0x20 ; ' '
00000000000186a6         db  0x83 ; '.'
00000000000186a7         db  0x04 ; '.'
00000000000186a8         db  0x02 ; '.'
00000000000186a9         db  0x4e ; 'N'
00000000000186aa         db  0x0a ; '.'
00000000000186ab         db  0x0e ; '.'
00000000000186ac         db  0x18 ; '.'
00000000000186ad         db  0x41 ; 'A'
00000000000186ae         db  0x0e ; '.'
00000000000186af         db  0x10 ; '.'
00000000000186b0         db  0x42 ; 'B'
00000000000186b1         db  0x0e ; '.'
00000000000186b2         db  0x08 ; '.'
00000000000186b3         db  0x48 ; 'H'
00000000000186b4         db  0x0b ; '.'
00000000000186b5         db  0x68 ; 'h'
00000000000186b6         db  0x0e ; '.'
00000000000186b7         db  0x18 ; '.'
00000000000186b8         db  0x41 ; 'A'
00000000000186b9         db  0x0e ; '.'
00000000000186ba         db  0x10 ; '.'
00000000000186bb         db  0x42 ; 'B'
00000000000186bc         db  0x0e ; '.'
00000000000186bd         db  0x08 ; '.'
00000000000186be         db  0x00 ; '.'
00000000000186bf         db  0x00 ; '.'
00000000000186c0         dd         0x0000002c                                  ; Length of the record
00000000000186c4         dd         0x00000924                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000186c8         db         0x28, 0x1e, 2 dup (0xff)                    ; begin 0xa4f0
00000000000186cc         db         0x50, 3 dup (0x00)                          ; length 0x50 (end at 0xa540)
00000000000186d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000186d1         db  0x42 ; 'B'
00000000000186d2         db  0x0e ; '.'
00000000000186d3         db  0x10 ; '.'
00000000000186d4         db  0x8c ; '.'
00000000000186d5         db  0x02 ; '.'
00000000000186d6         db  0x41 ; 'A'
00000000000186d7         db  0x0e ; '.'
00000000000186d8         db  0x18 ; '.'
00000000000186d9         db  0x86 ; '.'
00000000000186da         db  0x03 ; '.'
00000000000186db         db  0x44 ; 'D'
00000000000186dc         db  0x0e ; '.'
00000000000186dd         db  0x20 ; ' '
00000000000186de         db  0x83 ; '.'
00000000000186df         db  0x04 ; '.'
00000000000186e0         db  0x02 ; '.'
00000000000186e1         db  0x45 ; 'E'
00000000000186e2         db  0x0e ; '.'
00000000000186e3         db  0x18 ; '.'
00000000000186e4         db  0x41 ; 'A'
00000000000186e5         db  0x0e ; '.'
00000000000186e6         db  0x10 ; '.'
00000000000186e7         db  0x42 ; 'B'
00000000000186e8         db  0x0e ; '.'
00000000000186e9         db  0x08 ; '.'
00000000000186ea         db  0x00 ; '.'
00000000000186eb         db  0x00 ; '.'
00000000000186ec         db  0x00 ; '.'
00000000000186ed         db  0x00 ; '.'
00000000000186ee         db  0x00 ; '.'
00000000000186ef         db  0x00 ; '.'
00000000000186f0         dd         0x0000004c                                  ; Length of the record
00000000000186f4         dd         0x00000954                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000186f8         db         0x48, 0x1e, 2 dup (0xff)                    ; begin 0xa540
00000000000186fc         db         0xef, 3 dup (0x00)                          ; length 0xef (end at 0xa62f)
0000000000018700         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018701         db  0x42 ; 'B'
0000000000018702         db  0x0e ; '.'
0000000000018703         db  0x10 ; '.'
0000000000018704         db  0x8f ; '.'
0000000000018705         db  0x02 ; '.'
0000000000018706         db  0x42 ; 'B'
0000000000018707         db  0x0e ; '.'
0000000000018708         db  0x18 ; '.'
0000000000018709         db  0x8e ; '.'
000000000001870a         db  0x03 ; '.'
000000000001870b         db  0x47 ; 'G'
000000000001870c         db  0x0e ; '.'
000000000001870d         db  0x20 ; ' '
000000000001870e         db  0x8d ; '.'
000000000001870f         db  0x04 ; '.'
0000000000018710         db  0x42 ; 'B'
0000000000018711         db  0x0e ; '.'
0000000000018712         db  0x28 ; '('
0000000000018713         db  0x8c ; '.'
0000000000018714         db  0x05 ; '.'
0000000000018715         db  0x44 ; 'D'
0000000000018716         db  0x0e ; '.'
0000000000018717         db  0x30 ; '0'
0000000000018718         db  0x86 ; '.'
0000000000018719         db  0x06 ; '.'
000000000001871a         db  0x41 ; 'A'
000000000001871b         db  0x0e ; '.'
000000000001871c         db  0x38 ; '8'
000000000001871d         db  0x83 ; '.'
000000000001871e         db  0x07 ; '.'
000000000001871f         db  0x5c ; '\'
0000000000018720         db  0x0e ; '.'
0000000000018721         db  0x40 ; '@'
0000000000018722         db  0x02 ; '.'
0000000000018723         db  0x61 ; 'a'
0000000000018724         db  0x0a ; '.'
0000000000018725         db  0x0e ; '.'
0000000000018726         db  0x38 ; '8'
0000000000018727         db  0x44 ; 'D'
0000000000018728         db  0x0e ; '.'
0000000000018729         db  0x30 ; '0'
000000000001872a         db  0x41 ; 'A'
000000000001872b         db  0x0e ; '.'
000000000001872c         db  0x28 ; '('
000000000001872d         db  0x42 ; 'B'
000000000001872e         db  0x0e ; '.'
000000000001872f         db  0x20 ; ' '
0000000000018730         db  0x42 ; 'B'
0000000000018731         db  0x0e ; '.'
0000000000018732         db  0x18 ; '.'
0000000000018733         db  0x42 ; 'B'
0000000000018734         db  0x0e ; '.'
0000000000018735         db  0x10 ; '.'
0000000000018736         db  0x42 ; 'B'
0000000000018737         db  0x0e ; '.'
0000000000018738         db  0x08 ; '.'
0000000000018739         db  0x44 ; 'D'
000000000001873a         db  0x0b ; '.'
000000000001873b         db  0x00 ; '.'
000000000001873c         db  0x00 ; '.'
000000000001873d         db  0x00 ; '.'
000000000001873e         db  0x00 ; '.'
000000000001873f         db  0x00 ; '.'
0000000000018740         dd         0x00000018                                  ; Length of the record
0000000000018744         dd         0x000009a4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018748         db         0xe8, 0x1e, 2 dup (0xff)                    ; begin 0xa630
000000000001874c         db         0x46, 3 dup (0x00)                          ; length 0x46 (end at 0xa676)
0000000000018750         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018751         db  0x44 ; 'D'
0000000000018752         db  0x0e ; '.'
0000000000018753         db  0x10 ; '.'
0000000000018754         db  0x83 ; '.'
0000000000018755         db  0x02 ; '.'
0000000000018756         db  0x59 ; 'Y'
0000000000018757         db  0x0a ; '.'
0000000000018758         db  0x0e ; '.'
0000000000018759         db  0x08 ; '.'
000000000001875a         db  0x43 ; 'C'
000000000001875b         db  0x0b ; '.'
000000000001875c         dd         0x00000050                                  ; Length of the record
0000000000018760         dd         0x000009c0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018764         db         0x1c, 0x1f, 2 dup (0xff)                    ; begin 0xa680
0000000000018768         db         0x12, 0x06, 2 dup (0x00)                    ; length 0x612 (end at 0xac92)
000000000001876c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001876d         db  0x42 ; 'B'
000000000001876e         db  0x0e ; '.'
000000000001876f         db  0x10 ; '.'
0000000000018770         db  0x8f ; '.'
0000000000018771         db  0x02 ; '.'
0000000000018772         db  0x42 ; 'B'
0000000000018773         db  0x0e ; '.'
0000000000018774         db  0x18 ; '.'
0000000000018775         db  0x8e ; '.'
0000000000018776         db  0x03 ; '.'
0000000000018777         db  0x42 ; 'B'
0000000000018778         db  0x0e ; '.'
0000000000018779         db  0x20 ; ' '
000000000001877a         db  0x8d ; '.'
000000000001877b         db  0x04 ; '.'
000000000001877c         db  0x42 ; 'B'
000000000001877d         db  0x0e ; '.'
000000000001877e         db  0x28 ; '('
000000000001877f         db  0x8c ; '.'
0000000000018780         db  0x05 ; '.'
0000000000018781         db  0x41 ; 'A'
0000000000018782         db  0x0e ; '.'
0000000000018783         db  0x30 ; '0'
0000000000018784         db  0x86 ; '.'
0000000000018785         db  0x06 ; '.'
0000000000018786         db  0x41 ; 'A'
0000000000018787         db  0x0e ; '.'
0000000000018788         db  0x38 ; '8'
0000000000018789         db  0x83 ; '.'
000000000001878a         db  0x07 ; '.'
000000000001878b         db  0x4a ; 'J'
000000000001878c         db  0x0e ; '.'
000000000001878d         db  0xc0 ; '.'
000000000001878e         db  0x01 ; '.'
000000000001878f         db  0x03 ; '.'
0000000000018790         db  0x9a ; '.'
0000000000018791         db  0x03 ; '.'
0000000000018792         db  0x0a ; '.'
0000000000018793         db  0x0e ; '.'
0000000000018794         db  0x38 ; '8'
0000000000018795         db  0x41 ; 'A'
0000000000018796         db  0x0e ; '.'
0000000000018797         db  0x30 ; '0'
0000000000018798         db  0x41 ; 'A'
0000000000018799         db  0x0e ; '.'
000000000001879a         db  0x28 ; '('
000000000001879b         db  0x42 ; 'B'
000000000001879c         db  0x0e ; '.'
000000000001879d         db  0x20 ; ' '
000000000001879e         db  0x42 ; 'B'
000000000001879f         db  0x0e ; '.'
00000000000187a0         db  0x18 ; '.'
00000000000187a1         db  0x42 ; 'B'
00000000000187a2         db  0x0e ; '.'
00000000000187a3         db  0x10 ; '.'
00000000000187a4         db  0x42 ; 'B'
00000000000187a5         db  0x0e ; '.'
00000000000187a6         db  0x08 ; '.'
00000000000187a7         db  0x48 ; 'H'
00000000000187a8         db  0x0b ; '.'
00000000000187a9         db  0x00 ; '.'
00000000000187aa         db  0x00 ; '.'
00000000000187ab         db  0x00 ; '.'
00000000000187ac         db  0x00 ; '.'
00000000000187ad         db  0x00 ; '.'
00000000000187ae         db  0x00 ; '.'
00000000000187af         db  0x00 ; '.'
00000000000187b0         dd         0x00000014                                  ; Length of the record
00000000000187b4         dd         0x00000a14                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000187b8         db         0xe8, 0x24, 2 dup (0xff)                    ; begin 0xaca0
00000000000187bc         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xacaa)
00000000000187c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187c1         align      8
00000000000187c8         dd         0x00000014                                  ; Length of the record
00000000000187cc         dd         0x00000a2c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000187d0         db         0xe0, 0x24, 2 dup (0xff)                    ; begin 0xacb0
00000000000187d4         db         0x33, 3 dup (0x00)                          ; length 0x33 (end at 0xace3)
00000000000187d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187d9         db  0x44 ; 'D'
00000000000187da         db  0x0e ; '.'
00000000000187db         db  0x10 ; '.'
00000000000187dc         db  0x6e ; 'n'
00000000000187dd         db  0x0e ; '.'
00000000000187de         db  0x08 ; '.'
00000000000187df         db  0x00 ; '.'
00000000000187e0         dd         0x00000018                                  ; Length of the record
00000000000187e4         dd         0x00000a44                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000187e8         db         0x08, 0x25, 2 dup (0xff)                    ; begin 0xacf0
00000000000187ec         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0xad0a)
00000000000187f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187f1         db  0x44 ; 'D'
00000000000187f2         db  0x0e ; '.'
00000000000187f3         db  0x10 ; '.'
00000000000187f4         db  0x50 ; 'P'
00000000000187f5         db  0x0a ; '.'
00000000000187f6         db  0x0e ; '.'
00000000000187f7         db  0x08 ; '.'
00000000000187f8         db  0x41 ; 'A'
00000000000187f9         db  0x0b ; '.'
00000000000187fa         db  0x00 ; '.'
00000000000187fb         db  0x00 ; '.'
00000000000187fc         dd         0x00000010                                  ; Length of the record
0000000000018800         dd         0x00000a60                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018804         db         0x0c, 0x25, 2 dup (0xff)                    ; begin 0xad10
0000000000018808         db         0x16, 3 dup (0x00)                          ; length 0x16 (end at 0xad26)
000000000001880c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001880d         align      16
0000000000018810         dd         0x0000001c                                  ; Length of the record
0000000000018814         dd         0x00000a74                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018818         db         0x18, 0x25, 2 dup (0xff)                    ; begin 0xad30
000000000001881c         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0xad7a)
0000000000018820         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018821         db  0x55 ; 'U'
0000000000018822         db  0x0e ; '.'
0000000000018823         db  0x10 ; '.'
0000000000018824         db  0x5d ; ']'
0000000000018825         db  0x0e ; '.'
0000000000018826         db  0x08 ; '.'
0000000000018827         db  0x4e ; 'N'
0000000000018828         db  0x0e ; '.'
0000000000018829         db  0x10 ; '.'
000000000001882a         db  0x49 ; 'I'
000000000001882b         db  0x0e ; '.'
000000000001882c         db  0x08 ; '.'
000000000001882d         db  0x00 ; '.'
000000000001882e         db  0x00 ; '.'
000000000001882f         db  0x00 ; '.'
0000000000018830         dd         0x00000014                                  ; Length of the record
0000000000018834         dd         0x00000a94                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018838         db         0x48, 0x25, 2 dup (0xff)                    ; begin 0xad80
000000000001883c         db         0x70, 3 dup (0x00)                          ; length 0x70 (end at 0xadf0)
0000000000018840         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018841         align      8
0000000000018848         dd         0x00000010                                  ; Length of the record
000000000001884c         dd         0x00000aac                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018850         db         0xa0, 0x25, 2 dup (0xff)                    ; begin 0xadf0
0000000000018854         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0xadf8)
0000000000018858         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018859         align      4
000000000001885c         dd         0x00000038                                  ; Length of the record
0000000000018860         dd         0x00000ac0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018864         db         0x9c, 0x25, 2 dup (0xff)                    ; begin 0xae00
0000000000018868         db         0x07, 0x01, 2 dup (0x00)                    ; length 0x107 (end at 0xaf07)
000000000001886c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001886d         db  0x42 ; 'B'
000000000001886e         db  0x0e ; '.'
000000000001886f         db  0x10 ; '.'
0000000000018870         db  0x8c ; '.'
0000000000018871         db  0x02 ; '.'
0000000000018872         db  0x41 ; 'A'
0000000000018873         db  0x0e ; '.'
0000000000018874         db  0x18 ; '.'
0000000000018875         db  0x86 ; '.'
0000000000018876         db  0x03 ; '.'
0000000000018877         db  0x41 ; 'A'
0000000000018878         db  0x0e ; '.'
0000000000018879         db  0x20 ; ' '
000000000001887a         db  0x83 ; '.'
000000000001887b         db  0x04 ; '.'
000000000001887c         db  0x65 ; 'e'
000000000001887d         db  0x0a ; '.'
000000000001887e         db  0x0e ; '.'
000000000001887f         db  0x18 ; '.'
0000000000018880         db  0x41 ; 'A'
0000000000018881         db  0x0e ; '.'
0000000000018882         db  0x10 ; '.'
0000000000018883         db  0x42 ; 'B'
0000000000018884         db  0x0e ; '.'
0000000000018885         db  0x08 ; '.'
0000000000018886         db  0x4c ; 'L'
0000000000018887         db  0x0b ; '.'
0000000000018888         db  0x02 ; '.'
0000000000018889         db  0xac ; '.'
000000000001888a         db  0x0a ; '.'
000000000001888b         db  0x0e ; '.'
000000000001888c         db  0x18 ; '.'
000000000001888d         db  0x41 ; 'A'
000000000001888e         db  0x0e ; '.'
000000000001888f         db  0x10 ; '.'
0000000000018890         db  0x42 ; 'B'
0000000000018891         db  0x0e ; '.'
0000000000018892         db  0x08 ; '.'
0000000000018893         db  0x49 ; 'I'
0000000000018894         db  0x0b ; '.'
0000000000018895         db  0x00 ; '.'
0000000000018896         db  0x00 ; '.'
0000000000018897         db  0x00 ; '.'
0000000000018898         dd         0x00000010                                  ; Length of the record
000000000001889c         dd         0x00000afc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000188a0         db         0x70, 0x26, 2 dup (0xff)                    ; begin 0xaf10
00000000000188a4         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0xaf18)
00000000000188a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000188a9         align      4
00000000000188ac         dd         0x00000010                                  ; Length of the record
00000000000188b0         dd         0x00000b10                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000188b4         db         0x6c, 0x26, 2 dup (0xff)                    ; begin 0xaf20
00000000000188b8         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0xaf28)
00000000000188bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000188bd         align      64
00000000000188c0         dd         0x0000002c                                  ; Length of the record
00000000000188c4         dd         0x00000b24                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000188c8         db         0x68, 0x26, 2 dup (0xff)                    ; begin 0xaf30
00000000000188cc         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0xafd4)
00000000000188d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000188d1         db  0x41 ; 'A'
00000000000188d2         db  0x0e ; '.'
00000000000188d3         db  0x10 ; '.'
00000000000188d4         db  0x86 ; '.'
00000000000188d5         db  0x02 ; '.'
00000000000188d6         db  0x41 ; 'A'
00000000000188d7         db  0x0e ; '.'
00000000000188d8         db  0x18 ; '.'
00000000000188d9         db  0x83 ; '.'
00000000000188da         db  0x03 ; '.'
00000000000188db         db  0x44 ; 'D'
00000000000188dc         db  0x0e ; '.'
00000000000188dd         db  0x20 ; ' '
00000000000188de         db  0x7a ; 'z'
00000000000188df         db  0x0a ; '.'
00000000000188e0         db  0x0e ; '.'
00000000000188e1         db  0x18 ; '.'
00000000000188e2         db  0x41 ; 'A'
00000000000188e3         db  0x0e ; '.'
00000000000188e4         db  0x10 ; '.'
00000000000188e5         db  0x41 ; 'A'
00000000000188e6         db  0x0e ; '.'
00000000000188e7         db  0x08 ; '.'
00000000000188e8         db  0x41 ; 'A'
00000000000188e9         db  0x0b ; '.'
00000000000188ea         db  0x00 ; '.'
00000000000188eb         db  0x00 ; '.'
00000000000188ec         db  0x00 ; '.'
00000000000188ed         db  0x00 ; '.'
00000000000188ee         db  0x00 ; '.'
00000000000188ef         db  0x00 ; '.'
00000000000188f0         dd         0x0000001c                                  ; Length of the record
00000000000188f4         dd         0x00000b54                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000188f8         db         0xe8, 0x26, 2 dup (0xff)                    ; begin 0xafe0
00000000000188fc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0xaff8)
0000000000018900         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018901         db  0x44 ; 'D'
0000000000018902         db  0x0e ; '.'
0000000000018903         db  0x10 ; '.'
0000000000018904         db  0x4e ; 'N'
0000000000018905         db  0x0a ; '.'
0000000000018906         db  0x0e ; '.'
0000000000018907         db  0x08 ; '.'
0000000000018908         db  0x41 ; 'A'
0000000000018909         db  0x0b ; '.'
000000000001890a         db  0x00 ; '.'
000000000001890b         db  0x00 ; '.'
000000000001890c         db  0x00 ; '.'
000000000001890d         db  0x00 ; '.'
000000000001890e         db  0x00 ; '.'
000000000001890f         db  0x00 ; '.'
0000000000018910         dd         0x00000030                                  ; Length of the record
0000000000018914         dd         0x00000b74                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018918         db         0xe8, 0x26, 2 dup (0xff)                    ; begin 0xb000
000000000001891c         db         0x5d, 3 dup (0x00)                          ; length 0x5d (end at 0xb05d)
0000000000018920         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018921         db  0x41 ; 'A'
0000000000018922         db  0x0e ; '.'
0000000000018923         db  0x10 ; '.'
0000000000018924         db  0x86 ; '.'
0000000000018925         db  0x02 ; '.'
0000000000018926         db  0x41 ; 'A'
0000000000018927         db  0x0e ; '.'
0000000000018928         db  0x18 ; '.'
0000000000018929         db  0x83 ; '.'
000000000001892a         db  0x03 ; '.'
000000000001892b         db  0x49 ; 'I'
000000000001892c         db  0x0e ; '.'
000000000001892d         db  0x20 ; ' '
000000000001892e         db  0x7c ; '|'
000000000001892f         db  0x0a ; '.'
0000000000018930         db  0x0e ; '.'
0000000000018931         db  0x18 ; '.'
0000000000018932         db  0x44 ; 'D'
0000000000018933         db  0x0e ; '.'
0000000000018934         db  0x10 ; '.'
0000000000018935         db  0x41 ; 'A'
0000000000018936         db  0x0e ; '.'
0000000000018937         db  0x08 ; '.'
0000000000018938         db  0x44 ; 'D'
0000000000018939         db  0x0b ; '.'
000000000001893a         db  0x44 ; 'D'
000000000001893b         db  0x0e ; '.'
000000000001893c         db  0x18 ; '.'
000000000001893d         db  0x47 ; 'G'
000000000001893e         db  0x0e ; '.'
000000000001893f         db  0x10 ; '.'
0000000000018940         db  0x41 ; 'A'
0000000000018941         db  0x0e ; '.'
0000000000018942         db  0x08 ; '.'
0000000000018943         db  0x00 ; '.'
0000000000018944         dd         0x00000028                                  ; Length of the record
0000000000018948         dd         0x00000ba8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001894c         db         0x14, 0x27, 2 dup (0xff)                    ; begin 0xb060
0000000000018950         db         0x5a, 3 dup (0x00)                          ; length 0x5a (end at 0xb0ba)
0000000000018954         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018955         db  0x41 ; 'A'
0000000000018956         db  0x0e ; '.'
0000000000018957         db  0x10 ; '.'
0000000000018958         db  0x86 ; '.'
0000000000018959         db  0x02 ; '.'
000000000001895a         db  0x41 ; 'A'
000000000001895b         db  0x0e ; '.'
000000000001895c         db  0x18 ; '.'
000000000001895d         db  0x83 ; '.'
000000000001895e         db  0x03 ; '.'
000000000001895f         db  0x47 ; 'G'
0000000000018960         db  0x0e ; '.'
0000000000018961         db  0x20 ; ' '
0000000000018962         db  0x02 ; '.'
0000000000018963         db  0x41 ; 'A'
0000000000018964         db  0x0a ; '.'
0000000000018965         db  0x0e ; '.'
0000000000018966         db  0x18 ; '.'
0000000000018967         db  0x44 ; 'D'
0000000000018968         db  0x0e ; '.'
0000000000018969         db  0x10 ; '.'
000000000001896a         db  0x41 ; 'A'
000000000001896b         db  0x0e ; '.'
000000000001896c         db  0x08 ; '.'
000000000001896d         db  0x41 ; 'A'
000000000001896e         db  0x0b ; '.'
000000000001896f         db  0x00 ; '.'
0000000000018970         dd         0x00000010                                  ; Length of the record
0000000000018974         dd         0x00000bd4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018978         db         0x48, 0x27, 2 dup (0xff)                    ; begin 0xb0c0
000000000001897c         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0xb11c)
0000000000018980         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018981         align      4
0000000000018984         dd         0x00000028                                  ; Length of the record
0000000000018988         dd         0x00000be8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001898c         db         0x94, 0x27, 2 dup (0xff)                    ; begin 0xb120
0000000000018990         db         0x47, 3 dup (0x00)                          ; length 0x47 (end at 0xb167)
0000000000018994         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018995         db  0x41 ; 'A'
0000000000018996         db  0x0e ; '.'
0000000000018997         db  0x10 ; '.'
0000000000018998         db  0x83 ; '.'
0000000000018999         db  0x02 ; '.'
000000000001899a         db  0x5a ; 'Z'
000000000001899b         db  0x0a ; '.'
000000000001899c         db  0x0e ; '.'
000000000001899d         db  0x08 ; '.'
000000000001899e         db  0x45 ; 'E'
000000000001899f         db  0x0b ; '.'
00000000000189a0         db  0x5d ; ']'
00000000000189a1         db  0x0a ; '.'
00000000000189a2         db  0x0e ; '.'
00000000000189a3         db  0x08 ; '.'
00000000000189a4         db  0x43 ; 'C'
00000000000189a5         db  0x0b ; '.'
00000000000189a6         db  0x46 ; 'F'
00000000000189a7         db  0x0e ; '.'
00000000000189a8         db  0x08 ; '.'
00000000000189a9         db  0x00 ; '.'
00000000000189aa         db  0x00 ; '.'
00000000000189ab         db  0x00 ; '.'
00000000000189ac         db  0x00 ; '.'
00000000000189ad         db  0x00 ; '.'
00000000000189ae         db  0x00 ; '.'
00000000000189af         db  0x00 ; '.'
00000000000189b0         dd         0x00000024                                  ; Length of the record
00000000000189b4         dd         0x00000c14                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000189b8         db         0xb8, 0x27, 2 dup (0xff)                    ; begin 0xb170
00000000000189bc         db         0x33, 3 dup (0x00)                          ; length 0x33 (end at 0xb1a3)
00000000000189c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000189c1         db  0x41 ; 'A'
00000000000189c2         db  0x0e ; '.'
00000000000189c3         db  0x10 ; '.'
00000000000189c4         db  0x86 ; '.'
00000000000189c5         db  0x02 ; '.'
00000000000189c6         db  0x41 ; 'A'
00000000000189c7         db  0x0e ; '.'
00000000000189c8         db  0x18 ; '.'
00000000000189c9         db  0x83 ; '.'
00000000000189ca         db  0x03 ; '.'
00000000000189cb         db  0x47 ; 'G'
00000000000189cc         db  0x0e ; '.'
00000000000189cd         db  0x20 ; ' '
00000000000189ce         db  0x67 ; 'g'
00000000000189cf         db  0x0e ; '.'
00000000000189d0         db  0x18 ; '.'
00000000000189d1         db  0x41 ; 'A'
00000000000189d2         db  0x0e ; '.'
00000000000189d3         db  0x10 ; '.'
00000000000189d4         db  0x41 ; 'A'
00000000000189d5         db  0x0e ; '.'
00000000000189d6         db  0x08 ; '.'
00000000000189d7         db  0x00 ; '.'
00000000000189d8         dd         0x00000010                                  ; Length of the record
00000000000189dc         dd         0x00000c3c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000189e0         db         0xd0, 0x27, 2 dup (0xff)                    ; begin 0xb1b0
00000000000189e4         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0xb1b5)
00000000000189e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000189e9         align      4
00000000000189ec         dd         0x00000018                                  ; Length of the record
00000000000189f0         dd         0x00000c50                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000189f4         db         0xcc, 0x27, 2 dup (0xff)                    ; begin 0xb1c0
00000000000189f8         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0xb1e2)
00000000000189fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000189fd         db  0x46 ; 'F'
00000000000189fe         db  0x0e ; '.'
00000000000189ff         db  0x10 ; '.'
0000000000018a00         db  0x83 ; '.'
0000000000018a01         db  0x02 ; '.'
0000000000018a02         db  0x4e ; 'N'
0000000000018a03         db  0xc3 ; '.'
0000000000018a04         db  0x0e ; '.'
0000000000018a05         db  0x08 ; '.'
0000000000018a06         db  0x00 ; '.'
0000000000018a07         db  0x00 ; '.'
0000000000018a08         dd         0x0000001c                                  ; Length of the record
0000000000018a0c         dd         0x00000c6c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018a10         db         0xe0, 0x27, 2 dup (0xff)                    ; begin 0xb1f0
0000000000018a14         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0xb25e)
0000000000018a18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018a19         db  0x44 ; 'D'
0000000000018a1a         db  0x0e ; '.'
0000000000018a1b         db  0x60 ; '`'
0000000000018a1c         db  0x7f ; '.'
0000000000018a1d         db  0x0a ; '.'
0000000000018a1e         db  0x0e ; '.'
0000000000018a1f         db  0x08 ; '.'
0000000000018a20         db  0x45 ; 'E'
0000000000018a21         db  0x0b ; '.'
0000000000018a22         db  0x00 ; '.'
0000000000018a23         db  0x00 ; '.'
0000000000018a24         db  0x00 ; '.'
0000000000018a25         db  0x00 ; '.'
0000000000018a26         db  0x00 ; '.'
0000000000018a27         db  0x00 ; '.'
0000000000018a28         dd         0x0000005c                                  ; Length of the record
0000000000018a2c         dd         0x00000c8c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018a30         db         0x30, 0x28, 2 dup (0xff)                    ; begin 0xb260
0000000000018a34         db         0x87, 3 dup (0x00)                          ; length 0x87 (end at 0xb2e7)
0000000000018a38         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018a39         db  0x47 ; 'G'
0000000000018a3a         db  0x0e ; '.'
0000000000018a3b         db  0x10 ; '.'
0000000000018a3c         db  0x8d ; '.'
0000000000018a3d         db  0x02 ; '.'
0000000000018a3e         db  0x42 ; 'B'
0000000000018a3f         db  0x0e ; '.'
0000000000018a40         db  0x18 ; '.'
0000000000018a41         db  0x8c ; '.'
0000000000018a42         db  0x03 ; '.'
0000000000018a43         db  0x44 ; 'D'
0000000000018a44         db  0x0e ; '.'
0000000000018a45         db  0x20 ; ' '
0000000000018a46         db  0x86 ; '.'
0000000000018a47         db  0x04 ; '.'
0000000000018a48         db  0x41 ; 'A'
0000000000018a49         db  0x0e ; '.'
0000000000018a4a         db  0x28 ; '('
0000000000018a4b         db  0x83 ; '.'
0000000000018a4c         db  0x05 ; '.'
0000000000018a4d         db  0x4f ; 'O'
0000000000018a4e         db  0x0e ; '.'
0000000000018a4f         db  0x30 ; '0'
0000000000018a50         db  0x7c ; '|'
0000000000018a51         db  0x0a ; '.'
0000000000018a52         db  0x0e ; '.'
0000000000018a53         db  0x28 ; '('
0000000000018a54         db  0x44 ; 'D'
0000000000018a55         db  0xc3 ; '.'
0000000000018a56         db  0x0e ; '.'
0000000000018a57         db  0x20 ; ' '
0000000000018a58         db  0x41 ; 'A'
0000000000018a59         db  0xc6 ; '.'
0000000000018a5a         db  0x0e ; '.'
0000000000018a5b         db  0x18 ; '.'
0000000000018a5c         db  0x42 ; 'B'
0000000000018a5d         db  0xcc ; '.'
0000000000018a5e         db  0x0e ; '.'
0000000000018a5f         db  0x10 ; '.'
0000000000018a60         db  0x42 ; 'B'
0000000000018a61         db  0xcd ; '.'
0000000000018a62         db  0x0e ; '.'
0000000000018a63         db  0x08 ; '.'
0000000000018a64         db  0x4e ; 'N'
0000000000018a65         db  0x0b ; '.'
0000000000018a66         db  0x44 ; 'D'
0000000000018a67         db  0x0e ; '.'
0000000000018a68         db  0x28 ; '('
0000000000018a69         db  0x41 ; 'A'
0000000000018a6a         db  0x0e ; '.'
0000000000018a6b         db  0x20 ; ' '
0000000000018a6c         db  0x41 ; 'A'
0000000000018a6d         db  0x0e ; '.'
0000000000018a6e         db  0x18 ; '.'
0000000000018a6f         db  0x42 ; 'B'
0000000000018a70         db  0x0e ; '.'
0000000000018a71         db  0x10 ; '.'
0000000000018a72         db  0x42 ; 'B'
0000000000018a73         db  0x0e ; '.'
0000000000018a74         db  0x08 ; '.'
0000000000018a75         db  0x46 ; 'F'
0000000000018a76         db  0xc3 ; '.'
0000000000018a77         db  0xc6 ; '.'
0000000000018a78         db  0xcc ; '.'
0000000000018a79         db  0xcd ; '.'
0000000000018a7a         db  0x42 ; 'B'
0000000000018a7b         db  0x0e ; '.'
0000000000018a7c         db  0x30 ; '0'
0000000000018a7d         db  0x83 ; '.'
0000000000018a7e         db  0x05 ; '.'
0000000000018a7f         db  0x86 ; '.'
0000000000018a80         db  0x04 ; '.'
0000000000018a81         db  0x8c ; '.'
0000000000018a82         db  0x03 ; '.'
0000000000018a83         db  0x8d ; '.'
0000000000018a84         db  0x02 ; '.'
0000000000018a85         db  0x00 ; '.'
0000000000018a86         db  0x00 ; '.'
0000000000018a87         db  0x00 ; '.'
0000000000018a88         dd         0x0000001c                                  ; Length of the record
0000000000018a8c         dd         0x00000cec                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018a90         db         0x60, 0x28, 2 dup (0xff)                    ; begin 0xb2f0
0000000000018a94         db         0x56, 3 dup (0x00)                          ; length 0x56 (end at 0xb346)
0000000000018a98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018a99         db  0x44 ; 'D'
0000000000018a9a         db  0x0e ; '.'
0000000000018a9b         db  0x30 ; '0'
0000000000018a9c         db  0x02 ; '.'
0000000000018a9d         db  0x4c ; 'L'
0000000000018a9e         db  0x0a ; '.'
0000000000018a9f         db  0x0e ; '.'
0000000000018aa0         db  0x08 ; '.'
0000000000018aa1         db  0x41 ; 'A'
0000000000018aa2         db  0x0b ; '.'
0000000000018aa3         db  0x00 ; '.'
0000000000018aa4         db  0x00 ; '.'
0000000000018aa5         db  0x00 ; '.'
0000000000018aa6         db  0x00 ; '.'
0000000000018aa7         db  0x00 ; '.'
0000000000018aa8         dd         0x00000014                                  ; Length of the record
0000000000018aac         dd         0x00000d0c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018ab0         db         0xa0, 0x28, 2 dup (0xff)                    ; begin 0xb350
0000000000018ab4         db         0xee, 3 dup (0x00)                          ; length 0xee (end at 0xb43e)
0000000000018ab8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ab9         align      64
0000000000018ac0         dd         0x00000010                                  ; Length of the record
0000000000018ac4         dd         0x00000d24                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018ac8         db         0x78, 0x29, 2 dup (0xff)                    ; begin 0xb440
0000000000018acc         db         0x83, 0x01, 2 dup (0x00)                    ; length 0x183 (end at 0xb5c3)
0000000000018ad0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ad1         align      4
0000000000018ad4         dd         0x00000010                                  ; Length of the record
0000000000018ad8         dd         0x00000d38                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018adc         db         0xf4, 0x2a, 2 dup (0xff)                    ; begin 0xb5d0
0000000000018ae0         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0xb5d8)
0000000000018ae4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ae5         align      8
0000000000018ae8         dd         0x0000001c                                  ; Length of the record
0000000000018aec         dd         0x00000d4c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018af0         db         0xf0, 0x2a, 2 dup (0xff)                    ; begin 0xb5e0
0000000000018af4         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0xb5f8)
0000000000018af8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018af9         db  0x44 ; 'D'
0000000000018afa         db  0x0e ; '.'
0000000000018afb         db  0x10 ; '.'
0000000000018afc         db  0x4e ; 'N'
0000000000018afd         db  0x0a ; '.'
0000000000018afe         db  0x0e ; '.'
0000000000018aff         db  0x08 ; '.'
0000000000018b00         db  0x41 ; 'A'
0000000000018b01         db  0x0b ; '.'
0000000000018b02         db  0x00 ; '.'
0000000000018b03         db  0x00 ; '.'
0000000000018b04         db  0x00 ; '.'
0000000000018b05         db  0x00 ; '.'
0000000000018b06         db  0x00 ; '.'
0000000000018b07         db  0x00 ; '.'
0000000000018b08         dd         0x0000004c                                  ; Length of the record
0000000000018b0c         dd         0x00000d6c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018b10         db         0xf0, 0x2a, 2 dup (0xff)                    ; begin 0xb600
0000000000018b14         db         0xff, 3 dup (0x00)                          ; length 0xff (end at 0xb6ff)
0000000000018b18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b19         db  0x42 ; 'B'
0000000000018b1a         db  0x0e ; '.'
0000000000018b1b         db  0x10 ; '.'
0000000000018b1c         db  0x8f ; '.'
0000000000018b1d         db  0x02 ; '.'
0000000000018b1e         db  0x42 ; 'B'
0000000000018b1f         db  0x0e ; '.'
0000000000018b20         db  0x18 ; '.'
0000000000018b21         db  0x8e ; '.'
0000000000018b22         db  0x03 ; '.'
0000000000018b23         db  0x45 ; 'E'
0000000000018b24         db  0x0e ; '.'
0000000000018b25         db  0x20 ; ' '
0000000000018b26         db  0x8d ; '.'
0000000000018b27         db  0x04 ; '.'
0000000000018b28         db  0x42 ; 'B'
0000000000018b29         db  0x0e ; '.'
0000000000018b2a         db  0x28 ; '('
0000000000018b2b         db  0x8c ; '.'
0000000000018b2c         db  0x05 ; '.'
0000000000018b2d         db  0x44 ; 'D'
0000000000018b2e         db  0x0e ; '.'
0000000000018b2f         db  0x30 ; '0'
0000000000018b30         db  0x86 ; '.'
0000000000018b31         db  0x06 ; '.'
0000000000018b32         db  0x41 ; 'A'
0000000000018b33         db  0x0e ; '.'
0000000000018b34         db  0x38 ; '8'
0000000000018b35         db  0x83 ; '.'
0000000000018b36         db  0x07 ; '.'
0000000000018b37         db  0x47 ; 'G'
0000000000018b38         db  0x0e ; '.'
0000000000018b39         db  0x50 ; 'P'
0000000000018b3a         db  0x02 ; '.'
0000000000018b3b         db  0xc3 ; '.'
0000000000018b3c         db  0x0a ; '.'
0000000000018b3d         db  0x0e ; '.'
0000000000018b3e         db  0x38 ; '8'
0000000000018b3f         db  0x44 ; 'D'
0000000000018b40         db  0x0e ; '.'
0000000000018b41         db  0x30 ; '0'
0000000000018b42         db  0x41 ; 'A'
0000000000018b43         db  0x0e ; '.'
0000000000018b44         db  0x28 ; '('
0000000000018b45         db  0x42 ; 'B'
0000000000018b46         db  0x0e ; '.'
0000000000018b47         db  0x20 ; ' '
0000000000018b48         db  0x42 ; 'B'
0000000000018b49         db  0x0e ; '.'
0000000000018b4a         db  0x18 ; '.'
0000000000018b4b         db  0x42 ; 'B'
0000000000018b4c         db  0x0e ; '.'
0000000000018b4d         db  0x10 ; '.'
0000000000018b4e         db  0x42 ; 'B'
0000000000018b4f         db  0x0e ; '.'
0000000000018b50         db  0x08 ; '.'
0000000000018b51         db  0x49 ; 'I'
0000000000018b52         db  0x0b ; '.'
0000000000018b53         db  0x00 ; '.'
0000000000018b54         db  0x00 ; '.'
0000000000018b55         db  0x00 ; '.'
0000000000018b56         db  0x00 ; '.'
0000000000018b57         db  0x00 ; '.'
0000000000018b58         dd         0x0000004c                                  ; Length of the record
0000000000018b5c         dd         0x00000dbc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018b60         db         0xa0, 0x2b, 2 dup (0xff)                    ; begin 0xb700
0000000000018b64         db         0x76, 3 dup (0x00)                          ; length 0x76 (end at 0xb776)
0000000000018b68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b69         db  0x42 ; 'B'
0000000000018b6a         db  0x0e ; '.'
0000000000018b6b         db  0x10 ; '.'
0000000000018b6c         db  0x8d ; '.'
0000000000018b6d         db  0x02 ; '.'
0000000000018b6e         db  0x42 ; 'B'
0000000000018b6f         db  0x0e ; '.'
0000000000018b70         db  0x18 ; '.'
0000000000018b71         db  0x8c ; '.'
0000000000018b72         db  0x03 ; '.'
0000000000018b73         db  0x41 ; 'A'
0000000000018b74         db  0x0e ; '.'
0000000000018b75         db  0x20 ; ' '
0000000000018b76         db  0x86 ; '.'
0000000000018b77         db  0x04 ; '.'
0000000000018b78         db  0x41 ; 'A'
0000000000018b79         db  0x0e ; '.'
0000000000018b7a         db  0x28 ; '('
0000000000018b7b         db  0x83 ; '.'
0000000000018b7c         db  0x05 ; '.'
0000000000018b7d         db  0x44 ; 'D'
0000000000018b7e         db  0x0e ; '.'
0000000000018b7f         db  0x30 ; '0'
0000000000018b80         db  0x7e ; '~'
0000000000018b81         db  0x0a ; '.'
0000000000018b82         db  0x0e ; '.'
0000000000018b83         db  0x28 ; '('
0000000000018b84         db  0x44 ; 'D'
0000000000018b85         db  0x0e ; '.'
0000000000018b86         db  0x20 ; ' '
0000000000018b87         db  0x41 ; 'A'
0000000000018b88         db  0x0e ; '.'
0000000000018b89         db  0x18 ; '.'
0000000000018b8a         db  0x42 ; 'B'
0000000000018b8b         db  0x0e ; '.'
0000000000018b8c         db  0x10 ; '.'
0000000000018b8d         db  0x42 ; 'B'
0000000000018b8e         db  0x0e ; '.'
0000000000018b8f         db  0x08 ; '.'
0000000000018b90         db  0x47 ; 'G'
0000000000018b91         db  0x0b ; '.'
0000000000018b92         db  0x4f ; 'O'
0000000000018b93         db  0x0a ; '.'
0000000000018b94         db  0x0e ; '.'
0000000000018b95         db  0x28 ; '('
0000000000018b96         db  0x44 ; 'D'
0000000000018b97         db  0x0e ; '.'
0000000000018b98         db  0x20 ; ' '
0000000000018b99         db  0x41 ; 'A'
0000000000018b9a         db  0x0e ; '.'
0000000000018b9b         db  0x18 ; '.'
0000000000018b9c         db  0x42 ; 'B'
0000000000018b9d         db  0x0e ; '.'
0000000000018b9e         db  0x10 ; '.'
0000000000018b9f         db  0x42 ; 'B'
0000000000018ba0         db  0x0e ; '.'
0000000000018ba1         db  0x08 ; '.'
0000000000018ba2         db  0x41 ; 'A'
0000000000018ba3         db  0x0b ; '.'
0000000000018ba4         db  0x00 ; '.'
0000000000018ba5         db  0x00 ; '.'
0000000000018ba6         db  0x00 ; '.'
0000000000018ba7         db  0x00 ; '.'
0000000000018ba8         dd         0x00000010                                  ; Length of the record
0000000000018bac         dd         0x00000e0c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018bb0         db         0xd0, 0x2b, 2 dup (0xff)                    ; begin 0xb780
0000000000018bb4         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0xb813)
0000000000018bb8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018bb9         align      4
0000000000018bbc         dd         0x00000010                                  ; Length of the record
0000000000018bc0         dd         0x00000e20                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018bc4         db         0x5c, 0x2c, 2 dup (0xff)                    ; begin 0xb820
0000000000018bc8         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0xb830)
0000000000018bcc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018bcd         align      16
0000000000018bd0         dd         0x00000010                                  ; Length of the record
0000000000018bd4         dd         0x00000e34                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018bd8         db         0x58, 0x2c, 2 dup (0xff)                    ; begin 0xb830
0000000000018bdc         db         0x07, 3 dup (0x00)                          ; length 0x7 (end at 0xb837)
0000000000018be0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018be1         align      4
0000000000018be4         dd         0x00000018                                  ; Length of the record
0000000000018be8         dd         0x00000e48                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018bec         db         0x54, 0x2c, 2 dup (0xff)                    ; begin 0xb840
0000000000018bf0         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0xb862)
0000000000018bf4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018bf5         db  0x41 ; 'A'
0000000000018bf6         db  0x0e ; '.'
0000000000018bf7         db  0x10 ; '.'
0000000000018bf8         db  0x83 ; '.'
0000000000018bf9         db  0x02 ; '.'
0000000000018bfa         db  0x5b ; '['
0000000000018bfb         db  0x0a ; '.'
0000000000018bfc         db  0x0e ; '.'
0000000000018bfd         db  0x08 ; '.'
0000000000018bfe         db  0x41 ; 'A'
0000000000018bff         db  0x0b ; '.'
0000000000018c00         dd         0x0000005c                                  ; Length of the record
0000000000018c04         dd         0x00000e64                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018c08         db         0x68, 0x2c, 2 dup (0xff)                    ; begin 0xb870
0000000000018c0c         db         0x1e, 0x01, 2 dup (0x00)                    ; length 0x11e (end at 0xb98e)
0000000000018c10         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018c11         db  0x42 ; 'B'
0000000000018c12         db  0x0e ; '.'
0000000000018c13         db  0x10 ; '.'
0000000000018c14         db  0x8e ; '.'
0000000000018c15         db  0x02 ; '.'
0000000000018c16         db  0x42 ; 'B'
0000000000018c17         db  0x0e ; '.'
0000000000018c18         db  0x18 ; '.'
0000000000018c19         db  0x8d ; '.'
0000000000018c1a         db  0x03 ; '.'
0000000000018c1b         db  0x45 ; 'E'
0000000000018c1c         db  0x0e ; '.'
0000000000018c1d         db  0x20 ; ' '
0000000000018c1e         db  0x8c ; '.'
0000000000018c1f         db  0x04 ; '.'
0000000000018c20         db  0x41 ; 'A'
0000000000018c21         db  0x0e ; '.'
0000000000018c22         db  0x28 ; '('
0000000000018c23         db  0x86 ; '.'
0000000000018c24         db  0x05 ; '.'
0000000000018c25         db  0x44 ; 'D'
0000000000018c26         db  0x0e ; '.'
0000000000018c27         db  0x30 ; '0'
0000000000018c28         db  0x83 ; '.'
0000000000018c29         db  0x06 ; '.'
0000000000018c2a         db  0x02 ; '.'
0000000000018c2b         db  0xa1 ; '.'
0000000000018c2c         db  0x0a ; '.'
0000000000018c2d         db  0x0e ; '.'
0000000000018c2e         db  0x28 ; '('
0000000000018c2f         db  0x44 ; 'D'
0000000000018c30         db  0x0e ; '.'
0000000000018c31         db  0x20 ; ' '
0000000000018c32         db  0x42 ; 'B'
0000000000018c33         db  0x0e ; '.'
0000000000018c34         db  0x18 ; '.'
0000000000018c35         db  0x42 ; 'B'
0000000000018c36         db  0x0e ; '.'
0000000000018c37         db  0x10 ; '.'
0000000000018c38         db  0x42 ; 'B'
0000000000018c39         db  0x0e ; '.'
0000000000018c3a         db  0x08 ; '.'
0000000000018c3b         db  0x47 ; 'G'
0000000000018c3c         db  0x0b ; '.'
0000000000018c3d         db  0x71 ; 'q'
0000000000018c3e         db  0x0a ; '.'
0000000000018c3f         db  0x0e ; '.'
0000000000018c40         db  0x28 ; '('
0000000000018c41         db  0x41 ; 'A'
0000000000018c42         db  0x0e ; '.'
0000000000018c43         db  0x20 ; ' '
0000000000018c44         db  0x42 ; 'B'
0000000000018c45         db  0x0e ; '.'
0000000000018c46         db  0x18 ; '.'
0000000000018c47         db  0x42 ; 'B'
0000000000018c48         db  0x0e ; '.'
0000000000018c49         db  0x10 ; '.'
0000000000018c4a         db  0x42 ; 'B'
0000000000018c4b         db  0x0e ; '.'
0000000000018c4c         db  0x08 ; '.'
0000000000018c4d         db  0x48 ; 'H'
0000000000018c4e         db  0x0b ; '.'
0000000000018c4f         db  0x53 ; 'S'
0000000000018c50         db  0x0e ; '.'
0000000000018c51         db  0x28 ; '('
0000000000018c52         db  0x44 ; 'D'
0000000000018c53         db  0x0e ; '.'
0000000000018c54         db  0x20 ; ' '
0000000000018c55         db  0x42 ; 'B'
0000000000018c56         db  0x0e ; '.'
0000000000018c57         db  0x18 ; '.'
0000000000018c58         db  0x42 ; 'B'
0000000000018c59         db  0x0e ; '.'
0000000000018c5a         db  0x10 ; '.'
0000000000018c5b         db  0x42 ; 'B'
0000000000018c5c         db  0x0e ; '.'
0000000000018c5d         db  0x08 ; '.'
0000000000018c5e         db  0x00 ; '.'
0000000000018c5f         db  0x00 ; '.'
0000000000018c60         dd         0x00000010                                  ; Length of the record
0000000000018c64         dd         0x00000ec4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018c68         db         0x28, 0x2d, 2 dup (0xff)                    ; begin 0xb990
0000000000018c6c         db         0x77, 3 dup (0x00)                          ; length 0x77 (end at 0xba07)
0000000000018c70         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018c71         align      4
0000000000018c74         dd         0x0000005c                                  ; Length of the record
0000000000018c78         dd         0x00000ed8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018c7c         db         0x94, 0x2d, 2 dup (0xff)                    ; begin 0xba10
0000000000018c80         db         0x40, 0x01, 2 dup (0x00)                    ; length 0x140 (end at 0xbb50)
0000000000018c84         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018c85         db  0x42 ; 'B'
0000000000018c86         db  0x0e ; '.'
0000000000018c87         db  0x10 ; '.'
0000000000018c88         db  0x8f ; '.'
0000000000018c89         db  0x02 ; '.'
0000000000018c8a         db  0x42 ; 'B'
0000000000018c8b         db  0x0e ; '.'
0000000000018c8c         db  0x18 ; '.'
0000000000018c8d         db  0x8e ; '.'
0000000000018c8e         db  0x03 ; '.'
0000000000018c8f         db  0x42 ; 'B'
0000000000018c90         db  0x0e ; '.'
0000000000018c91         db  0x20 ; ' '
0000000000018c92         db  0x8d ; '.'
0000000000018c93         db  0x04 ; '.'
0000000000018c94         db  0x42 ; 'B'
0000000000018c95         db  0x0e ; '.'
0000000000018c96         db  0x28 ; '('
0000000000018c97         db  0x8c ; '.'
0000000000018c98         db  0x05 ; '.'
0000000000018c99         db  0x41 ; 'A'
0000000000018c9a         db  0x0e ; '.'
0000000000018c9b         db  0x30 ; '0'
0000000000018c9c         db  0x86 ; '.'
0000000000018c9d         db  0x06 ; '.'
0000000000018c9e         db  0x41 ; 'A'
0000000000018c9f         db  0x0e ; '.'
0000000000018ca0         db  0x38 ; '8'
0000000000018ca1         db  0x83 ; '.'
0000000000018ca2         db  0x07 ; '.'
0000000000018ca3         db  0x44 ; 'D'
0000000000018ca4         db  0x0e ; '.'
0000000000018ca5         db  0x40 ; '@'
0000000000018ca6         db  0x02 ; '.'
0000000000018ca7         db  0xee ; '.'
0000000000018ca8         db  0x0a ; '.'
0000000000018ca9         db  0x0e ; '.'
0000000000018caa         db  0x38 ; '8'
0000000000018cab         db  0x46 ; 'F'
0000000000018cac         db  0x0e ; '.'
0000000000018cad         db  0x30 ; '0'
0000000000018cae         db  0x41 ; 'A'
0000000000018caf         db  0x0e ; '.'
0000000000018cb0         db  0x28 ; '('
0000000000018cb1         db  0x42 ; 'B'
0000000000018cb2         db  0x0e ; '.'
0000000000018cb3         db  0x20 ; ' '
0000000000018cb4         db  0x42 ; 'B'
0000000000018cb5         db  0x0e ; '.'
0000000000018cb6         db  0x18 ; '.'
0000000000018cb7         db  0x42 ; 'B'
0000000000018cb8         db  0x0e ; '.'
0000000000018cb9         db  0x10 ; '.'
0000000000018cba         db  0x42 ; 'B'
0000000000018cbb         db  0x0e ; '.'
0000000000018cbc         db  0x08 ; '.'
0000000000018cbd         db  0x45 ; 'E'
0000000000018cbe         db  0x0b ; '.'
0000000000018cbf         db  0x63 ; 'c'
0000000000018cc0         db  0x0e ; '.'
0000000000018cc1         db  0x38 ; '8'
0000000000018cc2         db  0x43 ; 'C'
0000000000018cc3         db  0x0e ; '.'
0000000000018cc4         db  0x30 ; '0'
0000000000018cc5         db  0x41 ; 'A'
0000000000018cc6         db  0x0e ; '.'
0000000000018cc7         db  0x28 ; '('
0000000000018cc8         db  0x42 ; 'B'
0000000000018cc9         db  0x0e ; '.'
0000000000018cca         db  0x20 ; ' '
0000000000018ccb         db  0x42 ; 'B'
0000000000018ccc         db  0x0e ; '.'
0000000000018ccd         db  0x18 ; '.'
0000000000018cce         db  0x42 ; 'B'
0000000000018ccf         db  0x0e ; '.'
0000000000018cd0         db  0x10 ; '.'
0000000000018cd1         db  0x42 ; 'B'
0000000000018cd2         db  0x0e ; '.'
0000000000018cd3         db  0x08 ; '.'
0000000000018cd4         dd         0x00000010                                  ; Length of the record
0000000000018cd8         dd         0x00000f38                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018cdc         db         0x74, 0x2e, 2 dup (0xff)                    ; begin 0xbb50
0000000000018ce0         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0xbb55)
0000000000018ce4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ce5         align      8
0000000000018ce8         dd         0x00000010                                  ; Length of the record
0000000000018cec         dd         0x00000f4c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018cf0         db         0x70, 0x2e, 2 dup (0xff)                    ; begin 0xbb60
0000000000018cf4         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0xbb65)
0000000000018cf8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018cf9         align      4
0000000000018cfc         dd         0x00000010                                  ; Length of the record
0000000000018d00         dd         0x00000f60                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018d04         db         0x6c, 0x2e, 2 dup (0xff)                    ; begin 0xbb70
0000000000018d08         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0xbb75)
0000000000018d0c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d0d         align      16
0000000000018d10         dd         0x00000010                                  ; Length of the record
0000000000018d14         dd         0x00000f74                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018d18         db         0x68, 0x2e, 2 dup (0xff)                    ; begin 0xbb80
0000000000018d1c         db         0x49, 3 dup (0x00)                          ; length 0x49 (end at 0xbbc9)
0000000000018d20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d21         align      4
0000000000018d24         dd         0x00000010                                  ; Length of the record
0000000000018d28         dd         0x00000f88                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018d2c         db         0xa4, 0x2e, 2 dup (0xff)                    ; begin 0xbbd0
0000000000018d30         db         0x58, 3 dup (0x00)                          ; length 0x58 (end at 0xbc28)
0000000000018d34         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d35         align      8
0000000000018d38         dd         0x00000038                                  ; Length of the record
0000000000018d3c         dd         0x00000f9c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018d40         db         0xf0, 0x2e, 2 dup (0xff)                    ; begin 0xbc30
0000000000018d44         db         0x47, 0x01, 2 dup (0x00)                    ; length 0x147 (end at 0xbd77)
0000000000018d48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d49         db  0x42 ; 'B'
0000000000018d4a         db  0x0e ; '.'
0000000000018d4b         db  0x10 ; '.'
0000000000018d4c         db  0x8d ; '.'
0000000000018d4d         db  0x02 ; '.'
0000000000018d4e         db  0x42 ; 'B'
0000000000018d4f         db  0x0e ; '.'
0000000000018d50         db  0x18 ; '.'
0000000000018d51         db  0x8c ; '.'
0000000000018d52         db  0x03 ; '.'
0000000000018d53         db  0x44 ; 'D'
0000000000018d54         db  0x0e ; '.'
0000000000018d55         db  0x20 ; ' '
0000000000018d56         db  0x86 ; '.'
0000000000018d57         db  0x04 ; '.'
0000000000018d58         db  0x41 ; 'A'
0000000000018d59         db  0x0e ; '.'
0000000000018d5a         db  0x28 ; '('
0000000000018d5b         db  0x83 ; '.'
0000000000018d5c         db  0x05 ; '.'
0000000000018d5d         db  0x46 ; 'F'
0000000000018d5e         db  0x0e ; '.'
0000000000018d5f         db  0x30 ; '0'
0000000000018d60         db  0x02 ; '.'
0000000000018d61         db  0xcd ; '.'
0000000000018d62         db  0x0a ; '.'
0000000000018d63         db  0x0e ; '.'
0000000000018d64         db  0x28 ; '('
0000000000018d65         db  0x47 ; 'G'
0000000000018d66         db  0x0e ; '.'
0000000000018d67         db  0x20 ; ' '
0000000000018d68         db  0x41 ; 'A'
0000000000018d69         db  0x0e ; '.'
0000000000018d6a         db  0x18 ; '.'
0000000000018d6b         db  0x42 ; 'B'
0000000000018d6c         db  0x0e ; '.'
0000000000018d6d         db  0x10 ; '.'
0000000000018d6e         db  0x42 ; 'B'
0000000000018d6f         db  0x0e ; '.'
0000000000018d70         db  0x08 ; '.'
0000000000018d71         db  0x58 ; 'X'
0000000000018d72         db  0x0b ; '.'
0000000000018d73         db  0x00 ; '.'
0000000000018d74         dd         0x00000034                                  ; Length of the record
0000000000018d78         dd         0x00000fd8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018d7c         db         0x04, 0x30, 2 dup (0xff)                    ; begin 0xbd80
0000000000018d80         db         0x5b, 3 dup (0x00)                          ; length 0x5b (end at 0xbddb)
0000000000018d84         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d85         db  0x42 ; 'B'
0000000000018d86         db  0x0e ; '.'
0000000000018d87         db  0x10 ; '.'
0000000000018d88         db  0x8c ; '.'
0000000000018d89         db  0x02 ; '.'
0000000000018d8a         db  0x41 ; 'A'
0000000000018d8b         db  0x0e ; '.'
0000000000018d8c         db  0x18 ; '.'
0000000000018d8d         db  0x86 ; '.'
0000000000018d8e         db  0x03 ; '.'
0000000000018d8f         db  0x44 ; 'D'
0000000000018d90         db  0x0e ; '.'
0000000000018d91         db  0x20 ; ' '
0000000000018d92         db  0x83 ; '.'
0000000000018d93         db  0x04 ; '.'
0000000000018d94         db  0x79 ; 'y'
0000000000018d95         db  0x0a ; '.'
0000000000018d96         db  0x0e ; '.'
0000000000018d97         db  0x18 ; '.'
0000000000018d98         db  0x44 ; 'D'
0000000000018d99         db  0x0e ; '.'
0000000000018d9a         db  0x10 ; '.'
0000000000018d9b         db  0x42 ; 'B'
0000000000018d9c         db  0x0e ; '.'
0000000000018d9d         db  0x08 ; '.'
0000000000018d9e         db  0x4a ; 'J'
0000000000018d9f         db  0x0b ; '.'
0000000000018da0         db  0x44 ; 'D'
0000000000018da1         db  0x0e ; '.'
0000000000018da2         db  0x18 ; '.'
0000000000018da3         db  0x41 ; 'A'
0000000000018da4         db  0x0e ; '.'
0000000000018da5         db  0x10 ; '.'
0000000000018da6         db  0x45 ; 'E'
0000000000018da7         db  0x0e ; '.'
0000000000018da8         db  0x08 ; '.'
0000000000018da9         db  0x00 ; '.'
0000000000018daa         db  0x00 ; '.'
0000000000018dab         db  0x00 ; '.'
0000000000018dac         dd         0x00000010                                  ; Length of the record
0000000000018db0         dd         0x00001010                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018db4         db         0x2c, 0x30, 2 dup (0xff)                    ; begin 0xbde0
0000000000018db8         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0xbe21)
0000000000018dbc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018dbd         db  0x7c ; '|'
0000000000018dbe         db  0x0e ; '.'
0000000000018dbf         db  0x10 ; '.'
0000000000018dc0         dd         0x00000030                                  ; Length of the record
0000000000018dc4         dd         0x00001024                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018dc8         db         0x68, 0x30, 2 dup (0xff)                    ; begin 0xbe30
0000000000018dcc         db         0x72, 3 dup (0x00)                          ; length 0x72 (end at 0xbea2)
0000000000018dd0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018dd1         db  0x41 ; 'A'
0000000000018dd2         db  0x0e ; '.'
0000000000018dd3         db  0x10 ; '.'
0000000000018dd4         db  0x86 ; '.'
0000000000018dd5         db  0x02 ; '.'
0000000000018dd6         db  0x41 ; 'A'
0000000000018dd7         db  0x0e ; '.'
0000000000018dd8         db  0x18 ; '.'
0000000000018dd9         db  0x83 ; '.'
0000000000018dda         db  0x03 ; '.'
0000000000018ddb         db  0x4a ; 'J'
0000000000018ddc         db  0x0e ; '.'
0000000000018ddd         db  0x20 ; ' '
0000000000018dde         db  0x02 ; '.'
0000000000018ddf         db  0x53 ; 'S'
0000000000018de0         db  0x0a ; '.'
0000000000018de1         db  0x0e ; '.'
0000000000018de2         db  0x18 ; '.'
0000000000018de3         db  0x41 ; 'A'
0000000000018de4         db  0x0e ; '.'
0000000000018de5         db  0x10 ; '.'
0000000000018de6         db  0x41 ; 'A'
0000000000018de7         db  0x0e ; '.'
0000000000018de8         db  0x08 ; '.'
0000000000018de9         db  0x47 ; 'G'
0000000000018dea         db  0x0b ; '.'
0000000000018deb         db  0x47 ; 'G'
0000000000018dec         db  0x0e ; '.'
0000000000018ded         db  0x18 ; '.'
0000000000018dee         db  0x41 ; 'A'
0000000000018def         db  0x0e ; '.'
0000000000018df0         db  0x10 ; '.'
0000000000018df1         db  0x41 ; 'A'
0000000000018df2         db  0x0e ; '.'
0000000000018df3         db  0x08 ; '.'
0000000000018df4         dd         0x00000010                                  ; Length of the record
0000000000018df8         dd         0x00001058                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018dfc         db         0xb4, 0x30, 2 dup (0xff)                    ; begin 0xbeb0
0000000000018e00         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0xbf15)
0000000000018e04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e05         align      8
0000000000018e08         dd         0x00000048                                  ; Length of the record
0000000000018e0c         dd         0x0000106c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018e10         db         0x10, 0x31, 2 dup (0xff)                    ; begin 0xbf20
0000000000018e14         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0xbf8a)
0000000000018e18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e19         db  0x42 ; 'B'
0000000000018e1a         db  0x0e ; '.'
0000000000018e1b         db  0x10 ; '.'
0000000000018e1c         db  0x8f ; '.'
0000000000018e1d         db  0x02 ; '.'
0000000000018e1e         db  0x42 ; 'B'
0000000000018e1f         db  0x0e ; '.'
0000000000018e20         db  0x18 ; '.'
0000000000018e21         db  0x8e ; '.'
0000000000018e22         db  0x03 ; '.'
0000000000018e23         db  0x42 ; 'B'
0000000000018e24         db  0x0e ; '.'
0000000000018e25         db  0x20 ; ' '
0000000000018e26         db  0x8d ; '.'
0000000000018e27         db  0x04 ; '.'
0000000000018e28         db  0x42 ; 'B'
0000000000018e29         db  0x0e ; '.'
0000000000018e2a         db  0x28 ; '('
0000000000018e2b         db  0x8c ; '.'
0000000000018e2c         db  0x05 ; '.'
0000000000018e2d         db  0x41 ; 'A'
0000000000018e2e         db  0x0e ; '.'
0000000000018e2f         db  0x30 ; '0'
0000000000018e30         db  0x86 ; '.'
0000000000018e31         db  0x06 ; '.'
0000000000018e32         db  0x41 ; 'A'
0000000000018e33         db  0x0e ; '.'
0000000000018e34         db  0x38 ; '8'
0000000000018e35         db  0x83 ; '.'
0000000000018e36         db  0x07 ; '.'
0000000000018e37         db  0x44 ; 'D'
0000000000018e38         db  0x0e ; '.'
0000000000018e39         db  0x40 ; '@'
0000000000018e3a         db  0x02 ; '.'
0000000000018e3b         db  0x4a ; 'J'
0000000000018e3c         db  0x0a ; '.'
0000000000018e3d         db  0x0e ; '.'
0000000000018e3e         db  0x38 ; '8'
0000000000018e3f         db  0x44 ; 'D'
0000000000018e40         db  0x0e ; '.'
0000000000018e41         db  0x30 ; '0'
0000000000018e42         db  0x41 ; 'A'
0000000000018e43         db  0x0e ; '.'
0000000000018e44         db  0x28 ; '('
0000000000018e45         db  0x42 ; 'B'
0000000000018e46         db  0x0e ; '.'
0000000000018e47         db  0x20 ; ' '
0000000000018e48         db  0x42 ; 'B'
0000000000018e49         db  0x0e ; '.'
0000000000018e4a         db  0x18 ; '.'
0000000000018e4b         db  0x42 ; 'B'
0000000000018e4c         db  0x0e ; '.'
0000000000018e4d         db  0x10 ; '.'
0000000000018e4e         db  0x42 ; 'B'
0000000000018e4f         db  0x0e ; '.'
0000000000018e50         db  0x08 ; '.'
0000000000018e51         db  0x41 ; 'A'
0000000000018e52         db  0x0b ; '.'
0000000000018e53         db  0x00 ; '.'
0000000000018e54         dd         0x00000010                                  ; Length of the record
0000000000018e58         dd         0x000010b8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018e5c         db         0x34, 0x31, 2 dup (0xff)                    ; begin 0xbf90
0000000000018e60         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0xbfc1)
0000000000018e64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e65         align      8
0000000000018e68         dd         0x00000010                                  ; Length of the record
0000000000018e6c         dd         0x000010cc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018e70         db         0x60, 0x31, 2 dup (0xff)                    ; begin 0xbfd0
0000000000018e74         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0xbff0)
0000000000018e78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e79         align      4
0000000000018e7c         dd         0x00000048                                  ; Length of the record
0000000000018e80         dd         0x000010e0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018e84         db         0x6c, 0x31, 2 dup (0xff)                    ; begin 0xbff0
0000000000018e88         db         0xb4, 0x01, 2 dup (0x00)                    ; length 0x1b4 (end at 0xc1a4)
0000000000018e8c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e8d         db  0x42 ; 'B'
0000000000018e8e         db  0x0e ; '.'
0000000000018e8f         db  0x10 ; '.'
0000000000018e90         db  0x8f ; '.'
0000000000018e91         db  0x02 ; '.'
0000000000018e92         db  0x42 ; 'B'
0000000000018e93         db  0x0e ; '.'
0000000000018e94         db  0x18 ; '.'
0000000000018e95         db  0x8e ; '.'
0000000000018e96         db  0x03 ; '.'
0000000000018e97         db  0x49 ; 'I'
0000000000018e98         db  0x0e ; '.'
0000000000018e99         db  0x20 ; ' '
0000000000018e9a         db  0x8d ; '.'
0000000000018e9b         db  0x04 ; '.'
0000000000018e9c         db  0x42 ; 'B'
0000000000018e9d         db  0x0e ; '.'
0000000000018e9e         db  0x28 ; '('
0000000000018e9f         db  0x8c ; '.'
0000000000018ea0         db  0x05 ; '.'
0000000000018ea1         db  0x44 ; 'D'
0000000000018ea2         db  0x0e ; '.'
0000000000018ea3         db  0x30 ; '0'
0000000000018ea4         db  0x86 ; '.'
0000000000018ea5         db  0x06 ; '.'
0000000000018ea6         db  0x41 ; 'A'
0000000000018ea7         db  0x0e ; '.'
0000000000018ea8         db  0x38 ; '8'
0000000000018ea9         db  0x83 ; '.'
0000000000018eaa         db  0x07 ; '.'
0000000000018eab         db  0x52 ; 'R'
0000000000018eac         db  0x0e ; '.'
0000000000018ead         db  0x40 ; '@'
0000000000018eae         db  0x02 ; '.'
0000000000018eaf         db  0xd8 ; '.'
0000000000018eb0         db  0x0a ; '.'
0000000000018eb1         db  0x0e ; '.'
0000000000018eb2         db  0x38 ; '8'
0000000000018eb3         db  0x44 ; 'D'
0000000000018eb4         db  0x0e ; '.'
0000000000018eb5         db  0x30 ; '0'
0000000000018eb6         db  0x41 ; 'A'
0000000000018eb7         db  0x0e ; '.'
0000000000018eb8         db  0x28 ; '('
0000000000018eb9         db  0x42 ; 'B'
0000000000018eba         db  0x0e ; '.'
0000000000018ebb         db  0x20 ; ' '
0000000000018ebc         db  0x42 ; 'B'
0000000000018ebd         db  0x0e ; '.'
0000000000018ebe         db  0x18 ; '.'
0000000000018ebf         db  0x42 ; 'B'
0000000000018ec0         db  0x0e ; '.'
0000000000018ec1         db  0x10 ; '.'
0000000000018ec2         db  0x42 ; 'B'
0000000000018ec3         db  0x0e ; '.'
0000000000018ec4         db  0x08 ; '.'
0000000000018ec5         db  0x45 ; 'E'
0000000000018ec6         db  0x0b ; '.'
0000000000018ec7         db  0x00 ; '.'
0000000000018ec8         dd         0x00000028                                  ; Length of the record
0000000000018ecc         dd         0x0000112c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018ed0         db         0xe0, 0x32, 2 dup (0xff)                    ; begin 0xc1b0
0000000000018ed4         db         0x90, 3 dup (0x00)                          ; length 0x90 (end at 0xc240)
0000000000018ed8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ed9         db  0x42 ; 'B'
0000000000018eda         db  0x0e ; '.'
0000000000018edb         db  0x10 ; '.'
0000000000018edc         db  0x8c ; '.'
0000000000018edd         db  0x02 ; '.'
0000000000018ede         db  0x41 ; 'A'
0000000000018edf         db  0x0e ; '.'
0000000000018ee0         db  0x18 ; '.'
0000000000018ee1         db  0x86 ; '.'
0000000000018ee2         db  0x03 ; '.'
0000000000018ee3         db  0x44 ; 'D'
0000000000018ee4         db  0x0e ; '.'
0000000000018ee5         db  0x20 ; ' '
0000000000018ee6         db  0x83 ; '.'
0000000000018ee7         db  0x04 ; '.'
0000000000018ee8         db  0x02 ; '.'
0000000000018ee9         db  0x85 ; '.'
0000000000018eea         db  0x0e ; '.'
0000000000018eeb         db  0x18 ; '.'
0000000000018eec         db  0x41 ; 'A'
0000000000018eed         db  0x0e ; '.'
0000000000018eee         db  0x10 ; '.'
0000000000018eef         db  0x42 ; 'B'
0000000000018ef0         db  0x0e ; '.'
0000000000018ef1         db  0x08 ; '.'
0000000000018ef2         db  0x00 ; '.'
0000000000018ef3         db  0x00 ; '.'
0000000000018ef4         dd         0x00000028                                  ; Length of the record
0000000000018ef8         dd         0x00001158                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018efc         db         0x44, 0x33, 2 dup (0xff)                    ; begin 0xc240
0000000000018f00         db         0xd6, 3 dup (0x00)                          ; length 0xd6 (end at 0xc316)
0000000000018f04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018f05         db  0x42 ; 'B'
0000000000018f06         db  0x0e ; '.'
0000000000018f07         db  0x10 ; '.'
0000000000018f08         db  0x8c ; '.'
0000000000018f09         db  0x02 ; '.'
0000000000018f0a         db  0x41 ; 'A'
0000000000018f0b         db  0x0e ; '.'
0000000000018f0c         db  0x18 ; '.'
0000000000018f0d         db  0x86 ; '.'
0000000000018f0e         db  0x03 ; '.'
0000000000018f0f         db  0x44 ; 'D'
0000000000018f10         db  0x0e ; '.'
0000000000018f11         db  0x20 ; ' '
0000000000018f12         db  0x83 ; '.'
0000000000018f13         db  0x04 ; '.'
0000000000018f14         db  0x02 ; '.'
0000000000018f15         db  0xc4 ; '.'
0000000000018f16         db  0x0e ; '.'
0000000000018f17         db  0x18 ; '.'
0000000000018f18         db  0x44 ; 'D'
0000000000018f19         db  0x0e ; '.'
0000000000018f1a         db  0x10 ; '.'
0000000000018f1b         db  0x42 ; 'B'
0000000000018f1c         db  0x0e ; '.'
0000000000018f1d         db  0x08 ; '.'
0000000000018f1e         db  0x00 ; '.'
0000000000018f1f         db  0x00 ; '.'
0000000000018f20         dd         0x00000034                                  ; Length of the record
0000000000018f24         dd         0x00001184                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018f28         db         0xf8, 0x33, 2 dup (0xff)                    ; begin 0xc320
0000000000018f2c         db         0x3e, 0x02, 2 dup (0x00)                    ; length 0x23e (end at 0xc55e)
0000000000018f30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018f31         db  0x42 ; 'B'
0000000000018f32         db  0x0e ; '.'
0000000000018f33         db  0x10 ; '.'
0000000000018f34         db  0x8c ; '.'
0000000000018f35         db  0x02 ; '.'
0000000000018f36         db  0x41 ; 'A'
0000000000018f37         db  0x0e ; '.'
0000000000018f38         db  0x18 ; '.'
0000000000018f39         db  0x86 ; '.'
0000000000018f3a         db  0x03 ; '.'
0000000000018f3b         db  0x44 ; 'D'
0000000000018f3c         db  0x0e ; '.'
0000000000018f3d         db  0x20 ; ' '
0000000000018f3e         db  0x83 ; '.'
0000000000018f3f         db  0x04 ; '.'
0000000000018f40         db  0x44 ; 'D'
0000000000018f41         db  0x0e ; '.'
0000000000018f42         db  0x80 ; '.'
0000000000018f43         db  0x01 ; '.'
0000000000018f44         db  0x03 ; '.'
0000000000018f45         db  0x91 ; '.'
0000000000018f46         db  0x01 ; '.'
0000000000018f47         db  0x0a ; '.'
0000000000018f48         db  0x0e ; '.'
0000000000018f49         db  0x20 ; ' '
0000000000018f4a         db  0x41 ; 'A'
0000000000018f4b         db  0x0e ; '.'
0000000000018f4c         db  0x18 ; '.'
0000000000018f4d         db  0x41 ; 'A'
0000000000018f4e         db  0x0e ; '.'
0000000000018f4f         db  0x10 ; '.'
0000000000018f50         db  0x42 ; 'B'
0000000000018f51         db  0x0e ; '.'
0000000000018f52         db  0x08 ; '.'
0000000000018f53         db  0x48 ; 'H'
0000000000018f54         db  0x0b ; '.'
0000000000018f55         db  0x00 ; '.'
0000000000018f56         db  0x00 ; '.'
0000000000018f57         db  0x00 ; '.'
0000000000018f58         dd         0x00000038                                  ; Length of the record
0000000000018f5c         dd         0x000011bc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018f60         db         0x00, 0x36, 2 dup (0xff)                    ; begin 0xc560
0000000000018f64         db         0x84, 0x02, 2 dup (0x00)                    ; length 0x284 (end at 0xc7e4)
0000000000018f68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018f69         db  0x42 ; 'B'
0000000000018f6a         db  0x0e ; '.'
0000000000018f6b         db  0x10 ; '.'
0000000000018f6c         db  0x8d ; '.'
0000000000018f6d         db  0x02 ; '.'
0000000000018f6e         db  0x42 ; 'B'
0000000000018f6f         db  0x0e ; '.'
0000000000018f70         db  0x18 ; '.'
0000000000018f71         db  0x8c ; '.'
0000000000018f72         db  0x03 ; '.'
0000000000018f73         db  0x41 ; 'A'
0000000000018f74         db  0x0e ; '.'
0000000000018f75         db  0x20 ; ' '
0000000000018f76         db  0x86 ; '.'
0000000000018f77         db  0x04 ; '.'
0000000000018f78         db  0x41 ; 'A'
0000000000018f79         db  0x0e ; '.'
0000000000018f7a         db  0x28 ; '('
0000000000018f7b         db  0x83 ; '.'
0000000000018f7c         db  0x05 ; '.'
0000000000018f7d         db  0x44 ; 'D'
0000000000018f7e         db  0x0e ; '.'
0000000000018f7f         db  0x40 ; '@'
0000000000018f80         db  0x02 ; '.'
0000000000018f81         db  0x5a ; 'Z'
0000000000018f82         db  0x0a ; '.'
0000000000018f83         db  0x0e ; '.'
0000000000018f84         db  0x28 ; '('
0000000000018f85         db  0x41 ; 'A'
0000000000018f86         db  0x0e ; '.'
0000000000018f87         db  0x20 ; ' '
0000000000018f88         db  0x41 ; 'A'
0000000000018f89         db  0x0e ; '.'
0000000000018f8a         db  0x18 ; '.'
0000000000018f8b         db  0x42 ; 'B'
0000000000018f8c         db  0x0e ; '.'
0000000000018f8d         db  0x10 ; '.'
0000000000018f8e         db  0x42 ; 'B'
0000000000018f8f         db  0x0e ; '.'
0000000000018f90         db  0x08 ; '.'
0000000000018f91         db  0x46 ; 'F'
0000000000018f92         db  0x0b ; '.'
0000000000018f93         db  0x00 ; '.'
0000000000018f94         dd         0x00000020                                  ; Length of the record
0000000000018f98         dd         0x000011f8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018f9c         db         0x54, 0x38, 2 dup (0xff)                    ; begin 0xc7f0
0000000000018fa0         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0xc849)
0000000000018fa4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018fa5         db  0x41 ; 'A'
0000000000018fa6         db  0x0e ; '.'
0000000000018fa7         db  0x10 ; '.'
0000000000018fa8         db  0x83 ; '.'
0000000000018fa9         db  0x02 ; '.'
0000000000018faa         db  0x47 ; 'G'
0000000000018fab         db  0x0e ; '.'
0000000000018fac         db  0x20 ; ' '
0000000000018fad         db  0x7c ; '|'
0000000000018fae         db  0x0a ; '.'
0000000000018faf         db  0x0e ; '.'
0000000000018fb0         db  0x10 ; '.'
0000000000018fb1         db  0x41 ; 'A'
0000000000018fb2         db  0x0e ; '.'
0000000000018fb3         db  0x08 ; '.'
0000000000018fb4         db  0x4b ; 'K'
0000000000018fb5         db  0x0b ; '.'
0000000000018fb6         db  0x00 ; '.'
0000000000018fb7         db  0x00 ; '.'
0000000000018fb8         dd         0x00000034                                  ; Length of the record
0000000000018fbc         dd         0x0000121c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018fc0         db         0x90, 0x38, 2 dup (0xff)                    ; begin 0xc850
0000000000018fc4         db         0x03, 0x02, 2 dup (0x00)                    ; length 0x203 (end at 0xca53)
0000000000018fc8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018fc9         db  0x42 ; 'B'
0000000000018fca         db  0x0e ; '.'
0000000000018fcb         db  0x10 ; '.'
0000000000018fcc         db  0x8c ; '.'
0000000000018fcd         db  0x02 ; '.'
0000000000018fce         db  0x41 ; 'A'
0000000000018fcf         db  0x0e ; '.'
0000000000018fd0         db  0x18 ; '.'
0000000000018fd1         db  0x86 ; '.'
0000000000018fd2         db  0x03 ; '.'
0000000000018fd3         db  0x46 ; 'F'
0000000000018fd4         db  0x0e ; '.'
0000000000018fd5         db  0x20 ; ' '
0000000000018fd6         db  0x83 ; '.'
0000000000018fd7         db  0x04 ; '.'
0000000000018fd8         db  0x47 ; 'G'
0000000000018fd9         db  0x0e ; '.'
0000000000018fda         db  0x30 ; '0'
0000000000018fdb         db  0x02 ; '.'
0000000000018fdc         db  0x4a ; 'J'
0000000000018fdd         db  0x0a ; '.'
0000000000018fde         db  0x0e ; '.'
0000000000018fdf         db  0x20 ; ' '
0000000000018fe0         db  0x41 ; 'A'
0000000000018fe1         db  0x0e ; '.'
0000000000018fe2         db  0x18 ; '.'
0000000000018fe3         db  0x41 ; 'A'
0000000000018fe4         db  0x0e ; '.'
0000000000018fe5         db  0x10 ; '.'
0000000000018fe6         db  0x42 ; 'B'
0000000000018fe7         db  0x0e ; '.'
0000000000018fe8         db  0x08 ; '.'
0000000000018fe9         db  0x42 ; 'B'
0000000000018fea         db  0x0b ; '.'
0000000000018feb         db  0x00 ; '.'
0000000000018fec         db  0x00 ; '.'
0000000000018fed         db  0x00 ; '.'
0000000000018fee         db  0x00 ; '.'
0000000000018fef         db  0x00 ; '.'
0000000000018ff0         dd         0x00000024                                  ; Length of the record
0000000000018ff4         dd         0x00001254                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000018ff8         db         0x68, 0x3a, 2 dup (0xff)                    ; begin 0xca60
0000000000018ffc         db         0x27, 3 dup (0x00)                          ; length 0x27 (end at 0xca87)
0000000000019000         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019001         db  0x41 ; 'A'
0000000000019002         db  0x0e ; '.'
0000000000019003         db  0x10 ; '.'
0000000000019004         db  0x86 ; '.'
0000000000019005         db  0x02 ; '.'
0000000000019006         db  0x41 ; 'A'
0000000000019007         db  0x0e ; '.'
0000000000019008         db  0x18 ; '.'
0000000000019009         db  0x83 ; '.'
000000000001900a         db  0x03 ; '.'
000000000001900b         db  0x4a ; 'J'
000000000001900c         db  0x0e ; '.'
000000000001900d         db  0x20 ; ' '
000000000001900e         db  0x52 ; 'R'
000000000001900f         db  0x0e ; '.'
0000000000019010         db  0x18 ; '.'
0000000000019011         db  0x44 ; 'D'
0000000000019012         db  0x0e ; '.'
0000000000019013         db  0x10 ; '.'
0000000000019014         db  0x41 ; 'A'
0000000000019015         db  0x0e ; '.'
0000000000019016         db  0x08 ; '.'
0000000000019017         db  0x00 ; '.'
0000000000019018         dd         0x00000010                                  ; Length of the record
000000000001901c         dd         0x0000127c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019020         db         0x70, 0x3a, 2 dup (0xff)                    ; begin 0xca90
0000000000019024         db         0x0d, 3 dup (0x00)                          ; length 0xd (end at 0xca9d)
0000000000019028         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019029         align      4
000000000001902c         dd         0x00000014                                  ; Length of the record
0000000000019030         dd         0x00001290                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019034         db         0x6c, 0x3a, 2 dup (0xff)                    ; begin 0xcaa0
0000000000019038         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0xcace)
000000000001903c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001903d         db  0x5e ; '^'
000000000001903e         db  0x0e ; '.'
000000000001903f         db  0x10 ; '.'
0000000000019040         db  0x4f ; 'O'
0000000000019041         db  0x0e ; '.'
0000000000019042         db  0x08 ; '.'
0000000000019043         db  0x00 ; '.'
0000000000019044         dd         0x00000014                                  ; Length of the record
0000000000019048         dd         0x000012a8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001904c         db         0x84, 0x3a, 2 dup (0xff)                    ; begin 0xcad0
0000000000019050         db         0x33, 3 dup (0x00)                          ; length 0x33 (end at 0xcb03)
0000000000019054         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019055         db  0x5e ; '^'
0000000000019056         db  0x0e ; '.'
0000000000019057         db  0x10 ; '.'
0000000000019058         db  0x54 ; 'T'
0000000000019059         db  0x0e ; '.'
000000000001905a         db  0x08 ; '.'
000000000001905b         db  0x00 ; '.'
000000000001905c         dd         0x00000018                                  ; Length of the record
0000000000019060         dd         0x000012c0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019064         db         0xac, 0x3a, 2 dup (0xff)                    ; begin 0xcb10
0000000000019068         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0xcb25)
000000000001906c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001906d         db  0x41 ; 'A'
000000000001906e         db  0x0e ; '.'
000000000001906f         db  0x10 ; '.'
0000000000019070         db  0x83 ; '.'
0000000000019071         db  0x02 ; '.'
0000000000019072         db  0x4f ; 'O'
0000000000019073         db  0x0e ; '.'
0000000000019074         db  0x08 ; '.'
0000000000019075         db  0x00 ; '.'
0000000000019076         db  0x00 ; '.'
0000000000019077         db  0x00 ; '.'
0000000000019078         dd         0x0000005c                                  ; Length of the record
000000000001907c         dd         0x000012dc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019080         db         0xb0, 0x3a, 2 dup (0xff)                    ; begin 0xcb30
0000000000019084         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0xcbb0)
0000000000019088         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019089         db  0x42 ; 'B'
000000000001908a         db  0x0e ; '.'
000000000001908b         db  0x10 ; '.'
000000000001908c         db  0x8d ; '.'
000000000001908d         db  0x02 ; '.'
000000000001908e         db  0x42 ; 'B'
000000000001908f         db  0x0e ; '.'
0000000000019090         db  0x18 ; '.'
0000000000019091         db  0x8c ; '.'
0000000000019092         db  0x03 ; '.'
0000000000019093         db  0x47 ; 'G'
0000000000019094         db  0x0e ; '.'
0000000000019095         db  0x20 ; ' '
0000000000019096         db  0x86 ; '.'
0000000000019097         db  0x04 ; '.'
0000000000019098         db  0x41 ; 'A'
0000000000019099         db  0x0e ; '.'
000000000001909a         db  0x28 ; '('
000000000001909b         db  0x83 ; '.'
000000000001909c         db  0x05 ; '.'
000000000001909d         db  0x49 ; 'I'
000000000001909e         db  0x0e ; '.'
000000000001909f         db  0x30 ; '0'
00000000000190a0         db  0x62 ; 'b'
00000000000190a1         db  0x0a ; '.'
00000000000190a2         db  0x0e ; '.'
00000000000190a3         db  0x28 ; '('
00000000000190a4         db  0x44 ; 'D'
00000000000190a5         db  0x0e ; '.'
00000000000190a6         db  0x20 ; ' '
00000000000190a7         db  0x41 ; 'A'
00000000000190a8         db  0x0e ; '.'
00000000000190a9         db  0x18 ; '.'
00000000000190aa         db  0x42 ; 'B'
00000000000190ab         db  0x0e ; '.'
00000000000190ac         db  0x10 ; '.'
00000000000190ad         db  0x42 ; 'B'
00000000000190ae         db  0x0e ; '.'
00000000000190af         db  0x08 ; '.'
00000000000190b0         db  0x48 ; 'H'
00000000000190b1         db  0x0b ; '.'
00000000000190b2         db  0x5d ; ']'
00000000000190b3         db  0x0a ; '.'
00000000000190b4         db  0x0e ; '.'
00000000000190b5         db  0x28 ; '('
00000000000190b6         db  0x41 ; 'A'
00000000000190b7         db  0x0e ; '.'
00000000000190b8         db  0x20 ; ' '
00000000000190b9         db  0x41 ; 'A'
00000000000190ba         db  0x0e ; '.'
00000000000190bb         db  0x18 ; '.'
00000000000190bc         db  0x42 ; 'B'
00000000000190bd         db  0x0e ; '.'
00000000000190be         db  0x10 ; '.'
00000000000190bf         db  0x42 ; 'B'
00000000000190c0         db  0x0e ; '.'
00000000000190c1         db  0x08 ; '.'
00000000000190c2         db  0x45 ; 'E'
00000000000190c3         db  0x0b ; '.'
00000000000190c4         db  0x44 ; 'D'
00000000000190c5         db  0x0e ; '.'
00000000000190c6         db  0x28 ; '('
00000000000190c7         db  0x43 ; 'C'
00000000000190c8         db  0x0e ; '.'
00000000000190c9         db  0x20 ; ' '
00000000000190ca         db  0x44 ; 'D'
00000000000190cb         db  0x0e ; '.'
00000000000190cc         db  0x18 ; '.'
00000000000190cd         db  0x42 ; 'B'
00000000000190ce         db  0x0e ; '.'
00000000000190cf         db  0x10 ; '.'
00000000000190d0         db  0x42 ; 'B'
00000000000190d1         db  0x0e ; '.'
00000000000190d2         db  0x08 ; '.'
00000000000190d3         db  0x00 ; '.'
00000000000190d4         db  0x00 ; '.'
00000000000190d5         db  0x00 ; '.'
00000000000190d6         db  0x00 ; '.'
00000000000190d7         db  0x00 ; '.'
00000000000190d8         dd         0x0000001c                                  ; Length of the record
00000000000190dc         dd         0x0000133c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000190e0         db         0xd0, 0x3a, 2 dup (0xff)                    ; begin 0xcbb0
00000000000190e4         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0xcc4f)
00000000000190e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000190e9         db  0x44 ; 'D'
00000000000190ea         db  0x0e ; '.'
00000000000190eb         db  0x10 ; '.'
00000000000190ec         db  0x83 ; '.'
00000000000190ed         db  0x02 ; '.'
00000000000190ee         db  0x02 ; '.'
00000000000190ef         db  0x78 ; 'x'
00000000000190f0         db  0x0a ; '.'
00000000000190f1         db  0x0e ; '.'
00000000000190f2         db  0x08 ; '.'
00000000000190f3         db  0x41 ; 'A'
00000000000190f4         db  0x0b ; '.'
00000000000190f5         db  0x00 ; '.'
00000000000190f6         db  0x00 ; '.'
00000000000190f7         db  0x00 ; '.'
00000000000190f8         dd         0x00000034                                  ; Length of the record
00000000000190fc         dd         0x0000135c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019100         db         0x50, 0x3b, 2 dup (0xff)                    ; begin 0xcc50
0000000000019104         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0xccc4)
0000000000019108         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019109         db  0x42 ; 'B'
000000000001910a         db  0x0e ; '.'
000000000001910b         db  0x10 ; '.'
000000000001910c         db  0x8c ; '.'
000000000001910d         db  0x02 ; '.'
000000000001910e         db  0x41 ; 'A'
000000000001910f         db  0x0e ; '.'
0000000000019110         db  0x18 ; '.'
0000000000019111         db  0x86 ; '.'
0000000000019112         db  0x03 ; '.'
0000000000019113         db  0x44 ; 'D'
0000000000019114         db  0x0e ; '.'
0000000000019115         db  0x20 ; ' '
0000000000019116         db  0x83 ; '.'
0000000000019117         db  0x04 ; '.'
0000000000019118         db  0x4a ; 'J'
0000000000019119         db  0x0e ; '.'
000000000001911a         db  0x30 ; '0'
000000000001911b         db  0x02 ; '.'
000000000001911c         db  0x4f ; 'O'
000000000001911d         db  0x0a ; '.'
000000000001911e         db  0x0e ; '.'
000000000001911f         db  0x20 ; ' '
0000000000019120         db  0x41 ; 'A'
0000000000019121         db  0x0e ; '.'
0000000000019122         db  0x18 ; '.'
0000000000019123         db  0x41 ; 'A'
0000000000019124         db  0x0e ; '.'
0000000000019125         db  0x10 ; '.'
0000000000019126         db  0x42 ; 'B'
0000000000019127         db  0x0e ; '.'
0000000000019128         db  0x08 ; '.'
0000000000019129         db  0x44 ; 'D'
000000000001912a         db  0x0b ; '.'
000000000001912b         db  0x00 ; '.'
000000000001912c         db  0x00 ; '.'
000000000001912d         db  0x00 ; '.'
000000000001912e         db  0x00 ; '.'
000000000001912f         db  0x00 ; '.'
0000000000019130         dd         0x0000002c                                  ; Length of the record
0000000000019134         dd         0x00001394                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019138         db         0x98, 0x3b, 2 dup (0xff)                    ; begin 0xccd0
000000000001913c         db         0x54, 3 dup (0x00)                          ; length 0x54 (end at 0xcd24)
0000000000019140         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019141         db  0x41 ; 'A'
0000000000019142         db  0x0e ; '.'
0000000000019143         db  0x10 ; '.'
0000000000019144         db  0x86 ; '.'
0000000000019145         db  0x02 ; '.'
0000000000019146         db  0x41 ; 'A'
0000000000019147         db  0x0e ; '.'
0000000000019148         db  0x18 ; '.'
0000000000019149         db  0x83 ; '.'
000000000001914a         db  0x03 ; '.'
000000000001914b         db  0x44 ; 'D'
000000000001914c         db  0x0e ; '.'
000000000001914d         db  0x30 ; '0'
000000000001914e         db  0x02 ; '.'
000000000001914f         db  0x44 ; 'D'
0000000000019150         db  0x0a ; '.'
0000000000019151         db  0x0e ; '.'
0000000000019152         db  0x18 ; '.'
0000000000019153         db  0x43 ; 'C'
0000000000019154         db  0x0e ; '.'
0000000000019155         db  0x10 ; '.'
0000000000019156         db  0x41 ; 'A'
0000000000019157         db  0x0e ; '.'
0000000000019158         db  0x08 ; '.'
0000000000019159         db  0x41 ; 'A'
000000000001915a         db  0x0b ; '.'
000000000001915b         db  0x00 ; '.'
000000000001915c         db  0x00 ; '.'
000000000001915d         db  0x00 ; '.'
000000000001915e         db  0x00 ; '.'
000000000001915f         db  0x00 ; '.'
0000000000019160         dd         0x00000040                                  ; Length of the record
0000000000019164         dd         0x000013c4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019168         db         0xc8, 0x3b, 2 dup (0xff)                    ; begin 0xcd30
000000000001916c         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0xce17)
0000000000019170         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019171         db  0x41 ; 'A'
0000000000019172         db  0x0e ; '.'
0000000000019173         db  0x10 ; '.'
0000000000019174         db  0x86 ; '.'
0000000000019175         db  0x02 ; '.'
0000000000019176         db  0x41 ; 'A'
0000000000019177         db  0x0e ; '.'
0000000000019178         db  0x18 ; '.'
0000000000019179         db  0x83 ; '.'
000000000001917a         db  0x03 ; '.'
000000000001917b         db  0x49 ; 'I'
000000000001917c         db  0x0e ; '.'
000000000001917d         db  0x20 ; ' '
000000000001917e         db  0x6e ; 'n'
000000000001917f         db  0x0a ; '.'
0000000000019180         db  0x0e ; '.'
0000000000019181         db  0x18 ; '.'
0000000000019182         db  0x41 ; 'A'
0000000000019183         db  0x0e ; '.'
0000000000019184         db  0x10 ; '.'
0000000000019185         db  0x41 ; 'A'
0000000000019186         db  0x0e ; '.'
0000000000019187         db  0x08 ; '.'
0000000000019188         db  0x45 ; 'E'
0000000000019189         db  0x0b ; '.'
000000000001918a         db  0x02 ; '.'
000000000001918b         db  0x4a ; 'J'
000000000001918c         db  0x0a ; '.'
000000000001918d         db  0x0e ; '.'
000000000001918e         db  0x18 ; '.'
000000000001918f         db  0x41 ; 'A'
0000000000019190         db  0x0e ; '.'
0000000000019191         db  0x10 ; '.'
0000000000019192         db  0x41 ; 'A'
0000000000019193         db  0x0e ; '.'
0000000000019194         db  0x08 ; '.'
0000000000019195         db  0x44 ; 'D'
0000000000019196         db  0x0b ; '.'
0000000000019197         db  0x02 ; '.'
0000000000019198         db  0x54 ; 'T'
0000000000019199         db  0x0e ; '.'
000000000001919a         db  0x18 ; '.'
000000000001919b         db  0x41 ; 'A'
000000000001919c         db  0x0e ; '.'
000000000001919d         db  0x10 ; '.'
000000000001919e         db  0x41 ; 'A'
000000000001919f         db  0x0e ; '.'
00000000000191a0         db  0x08 ; '.'
00000000000191a1         db  0x00 ; '.'
00000000000191a2         db  0x00 ; '.'
00000000000191a3         db  0x00 ; '.'
00000000000191a4         dd         0x00000074                                  ; Length of the record
00000000000191a8         dd         0x00001408                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000191ac         db         0x74, 0x3c, 2 dup (0xff)                    ; begin 0xce20
00000000000191b0         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0xe054)
00000000000191b4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000191b5         db  0x42 ; 'B'
00000000000191b6         db  0x0e ; '.'
00000000000191b7         db  0x10 ; '.'
00000000000191b8         db  0x8f ; '.'
00000000000191b9         db  0x02 ; '.'
00000000000191ba         db  0x42 ; 'B'
00000000000191bb         db  0x0e ; '.'
00000000000191bc         db  0x18 ; '.'
00000000000191bd         db  0x8e ; '.'
00000000000191be         db  0x03 ; '.'
00000000000191bf         db  0x45 ; 'E'
00000000000191c0         db  0x0e ; '.'
00000000000191c1         db  0x20 ; ' '
00000000000191c2         db  0x8d ; '.'
00000000000191c3         db  0x04 ; '.'
00000000000191c4         db  0x42 ; 'B'
00000000000191c5         db  0x0e ; '.'
00000000000191c6         db  0x28 ; '('
00000000000191c7         db  0x8c ; '.'
00000000000191c8         db  0x05 ; '.'
00000000000191c9         db  0x44 ; 'D'
00000000000191ca         db  0x0e ; '.'
00000000000191cb         db  0x30 ; '0'
00000000000191cc         db  0x86 ; '.'
00000000000191cd         db  0x06 ; '.'
00000000000191ce         db  0x41 ; 'A'
00000000000191cf         db  0x0e ; '.'
00000000000191d0         db  0x38 ; '8'
00000000000191d1         db  0x83 ; '.'
00000000000191d2         db  0x07 ; '.'
00000000000191d3         db  0x53 ; 'S'
00000000000191d4         db  0x0e ; '.'
00000000000191d5         db  0xf0 ; '.'
00000000000191d6         db  0x01 ; '.'
00000000000191d7         db  0x03 ; '.'
00000000000191d8         db  0x81 ; '.'
00000000000191d9         db  0x0b ; '.'
00000000000191da         db  0x0e ; '.'
00000000000191db         db  0xf8 ; '.'
00000000000191dc         db  0x01 ; '.'
00000000000191dd         db  0x4a ; 'J'
00000000000191de         db  0x0e ; '.'
00000000000191df         db  0x80 ; '.'
00000000000191e0         db  0x02 ; '.'
00000000000191e1         db  0x44 ; 'D'
00000000000191e2         db  0x0e ; '.'
00000000000191e3         db  0x88 ; '.'
00000000000191e4         db  0x02 ; '.'
00000000000191e5         db  0x45 ; 'E'
00000000000191e6         db  0x0e ; '.'
00000000000191e7         db  0x90 ; '.'
00000000000191e8         db  0x02 ; '.'
00000000000191e9         db  0x5f ; '_'
00000000000191ea         db  0x0e ; '.'
00000000000191eb         db  0xf0 ; '.'
00000000000191ec         db  0x01 ; '.'
00000000000191ed         db  0x64 ; 'd'
00000000000191ee         db  0x0a ; '.'
00000000000191ef         db  0x0e ; '.'
00000000000191f0         db  0x38 ; '8'
00000000000191f1         db  0x41 ; 'A'
00000000000191f2         db  0x0e ; '.'
00000000000191f3         db  0x30 ; '0'
00000000000191f4         db  0x41 ; 'A'
00000000000191f5         db  0x0e ; '.'
00000000000191f6         db  0x28 ; '('
00000000000191f7         db  0x42 ; 'B'
00000000000191f8         db  0x0e ; '.'
00000000000191f9         db  0x20 ; ' '
00000000000191fa         db  0x42 ; 'B'
00000000000191fb         db  0x0e ; '.'
00000000000191fc         db  0x18 ; '.'
00000000000191fd         db  0x42 ; 'B'
00000000000191fe         db  0x0e ; '.'
00000000000191ff         db  0x10 ; '.'
0000000000019200         db  0x42 ; 'B'
0000000000019201         db  0x0e ; '.'
0000000000019202         db  0x08 ; '.'
0000000000019203         db  0x44 ; 'D'
0000000000019204         db  0x0b ; '.'
0000000000019205         db  0x03 ; '.'
0000000000019206         db  0x99 ; '.'
0000000000019207         db  0x05 ; '.'
0000000000019208         db  0x0e ; '.'
0000000000019209         db  0xf8 ; '.'
000000000001920a         db  0x01 ; '.'
000000000001920b         db  0x4d ; 'M'
000000000001920c         db  0x0e ; '.'
000000000001920d         db  0x80 ; '.'
000000000001920e         db  0x02 ; '.'
000000000001920f         db  0x44 ; 'D'
0000000000019210         db  0x0e ; '.'
0000000000019211         db  0x88 ; '.'
0000000000019212         db  0x02 ; '.'
0000000000019213         db  0x47 ; 'G'
0000000000019214         db  0x0e ; '.'
0000000000019215         db  0x90 ; '.'
0000000000019216         db  0x02 ; '.'
0000000000019217         db  0x5b ; '['
0000000000019218         db  0x0e ; '.'
0000000000019219         db  0xf0 ; '.'
000000000001921a         db  0x01 ; '.'
000000000001921b         db  0x00 ; '.'
000000000001921c         dd         0x00000068                                  ; Length of the record
0000000000019220         dd         0x00001480                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019224         db         0x3c, 0x4e, 2 dup (0xff)                    ; begin 0xe060
0000000000019228         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0xe20b)
000000000001922c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001922d         db  0x42 ; 'B'
000000000001922e         db  0x0e ; '.'
000000000001922f         db  0x10 ; '.'
0000000000019230         db  0x8f ; '.'
0000000000019231         db  0x02 ; '.'
0000000000019232         db  0x42 ; 'B'
0000000000019233         db  0x0e ; '.'
0000000000019234         db  0x18 ; '.'
0000000000019235         db  0x8e ; '.'
0000000000019236         db  0x03 ; '.'
0000000000019237         db  0x45 ; 'E'
0000000000019238         db  0x0e ; '.'
0000000000019239         db  0x20 ; ' '
000000000001923a         db  0x8d ; '.'
000000000001923b         db  0x04 ; '.'
000000000001923c         db  0x42 ; 'B'
000000000001923d         db  0x0e ; '.'
000000000001923e         db  0x28 ; '('
000000000001923f         db  0x8c ; '.'
0000000000019240         db  0x05 ; '.'
0000000000019241         db  0x44 ; 'D'
0000000000019242         db  0x0e ; '.'
0000000000019243         db  0x30 ; '0'
0000000000019244         db  0x86 ; '.'
0000000000019245         db  0x06 ; '.'
0000000000019246         db  0x41 ; 'A'
0000000000019247         db  0x0e ; '.'
0000000000019248         db  0x38 ; '8'
0000000000019249         db  0x83 ; '.'
000000000001924a         db  0x07 ; '.'
000000000001924b         db  0x47 ; 'G'
000000000001924c         db  0x0e ; '.'
000000000001924d         db  0x60 ; '`'
000000000001924e         db  0x02 ; '.'
000000000001924f         db  0x99 ; '.'
0000000000019250         db  0x0e ; '.'
0000000000019251         db  0x68 ; 'h'
0000000000019252         db  0x5f ; '_'
0000000000019253         db  0x0e ; '.'
0000000000019254         db  0x70 ; 'p'
0000000000019255         db  0x46 ; 'F'
0000000000019256         db  0x0e ; '.'
0000000000019257         db  0x78 ; 'x'
0000000000019258         db  0x42 ; 'B'
0000000000019259         db  0x0e ; '.'
000000000001925a         db  0x80 ; '.'
000000000001925b         db  0x01 ; '.'
000000000001925c         db  0x59 ; 'Y'
000000000001925d         db  0x0e ; '.'
000000000001925e         db  0x60 ; '`'
000000000001925f         db  0x02 ; '.'
0000000000019260         db  0x40 ; '@'
0000000000019261         db  0x0e ; '.'
0000000000019262         db  0x68 ; 'h'
0000000000019263         db  0x4b ; 'K'
0000000000019264         db  0x0e ; '.'
0000000000019265         db  0x70 ; 'p'
0000000000019266         db  0x43 ; 'C'
0000000000019267         db  0x0e ; '.'
0000000000019268         db  0x78 ; 'x'
0000000000019269         db  0x45 ; 'E'
000000000001926a         db  0x0e ; '.'
000000000001926b         db  0x80 ; '.'
000000000001926c         db  0x01 ; '.'
000000000001926d         db  0x5e ; '^'
000000000001926e         db  0x0e ; '.'
000000000001926f         db  0x60 ; '`'
0000000000019270         db  0x4c ; 'L'
0000000000019271         db  0x0a ; '.'
0000000000019272         db  0x0e ; '.'
0000000000019273         db  0x38 ; '8'
0000000000019274         db  0x44 ; 'D'
0000000000019275         db  0x0e ; '.'
0000000000019276         db  0x30 ; '0'
0000000000019277         db  0x41 ; 'A'
0000000000019278         db  0x0e ; '.'
0000000000019279         db  0x28 ; '('
000000000001927a         db  0x42 ; 'B'
000000000001927b         db  0x0e ; '.'
000000000001927c         db  0x20 ; ' '
000000000001927d         db  0x42 ; 'B'
000000000001927e         db  0x0e ; '.'
000000000001927f         db  0x18 ; '.'
0000000000019280         db  0x42 ; 'B'
0000000000019281         db  0x0e ; '.'
0000000000019282         db  0x10 ; '.'
0000000000019283         db  0x42 ; 'B'
0000000000019284         db  0x0e ; '.'
0000000000019285         db  0x08 ; '.'
0000000000019286         db  0x46 ; 'F'
0000000000019287         db  0x0b ; '.'
0000000000019288         dd         0x00000028                                  ; Length of the record
000000000001928c         dd         0x000014ec                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019290         db         0x80, 0x4f, 2 dup (0xff)                    ; begin 0xe210
0000000000019294         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0xe246)
0000000000019298         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019299         db  0x42 ; 'B'
000000000001929a         db  0x0e ; '.'
000000000001929b         db  0x10 ; '.'
000000000001929c         db  0x8c ; '.'
000000000001929d         db  0x02 ; '.'
000000000001929e         db  0x41 ; 'A'
000000000001929f         db  0x0e ; '.'
00000000000192a0         db  0x18 ; '.'
00000000000192a1         db  0x86 ; '.'
00000000000192a2         db  0x03 ; '.'
00000000000192a3         db  0x41 ; 'A'
00000000000192a4         db  0x0e ; '.'
00000000000192a5         db  0x20 ; ' '
00000000000192a6         db  0x83 ; '.'
00000000000192a7         db  0x04 ; '.'
00000000000192a8         db  0x6e ; 'n'
00000000000192a9         db  0x0e ; '.'
00000000000192aa         db  0x18 ; '.'
00000000000192ab         db  0x41 ; 'A'
00000000000192ac         db  0x0e ; '.'
00000000000192ad         db  0x10 ; '.'
00000000000192ae         db  0x42 ; 'B'
00000000000192af         db  0x0e ; '.'
00000000000192b0         db  0x08 ; '.'
00000000000192b1         db  0x00 ; '.'
00000000000192b2         db  0x00 ; '.'
00000000000192b3         db  0x00 ; '.'
00000000000192b4         dd         0x00000010                                  ; Length of the record
00000000000192b8         dd         0x00001518                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000192bc         db         0x94, 0x4f, 2 dup (0xff)                    ; begin 0xe250
00000000000192c0         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0xe261)
00000000000192c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000192c5         align      8
00000000000192c8         dd         0x00000010                                  ; Length of the record
00000000000192cc         dd         0x0000152c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000192d0         db         0xa0, 0x4f, 2 dup (0xff)                    ; begin 0xe270
00000000000192d4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0xe281)
00000000000192d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000192d9         align      4
00000000000192dc         dd         0x00000010                                  ; Length of the record
00000000000192e0         dd         0x00001540                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000192e4         db         0xac, 0x4f, 2 dup (0xff)                    ; begin 0xe290
00000000000192e8         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0xe2c5)
00000000000192ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000192ed         align      16
00000000000192f0         dd         0x00000010                                  ; Length of the record
00000000000192f4         dd         0x00001554                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000192f8         db         0xd8, 0x4f, 2 dup (0xff)                    ; begin 0xe2d0
00000000000192fc         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0xe2e5)
0000000000019300         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019301         align      4
0000000000019304         dd         0x00000010                                  ; Length of the record
0000000000019308         dd         0x00001568                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001930c         db         0xe4, 0x4f, 2 dup (0xff)                    ; begin 0xe2f0
0000000000019310         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0xe320)
0000000000019314         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019315         db  0x6b ; 'k'
0000000000019316         db  0x0e ; '.'
0000000000019317         db  0x10 ; '.'
0000000000019318         dd         0x00000050                                  ; Length of the record
000000000001931c         dd         0x0000157c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019320         db         0x00, 0x50, 2 dup (0xff)                    ; begin 0xe320
0000000000019324         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0xe394)
0000000000019328         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019329         db  0x42 ; 'B'
000000000001932a         db  0x0e ; '.'
000000000001932b         db  0x10 ; '.'
000000000001932c         db  0x8f ; '.'
000000000001932d         db  0x02 ; '.'
000000000001932e         db  0x42 ; 'B'
000000000001932f         db  0x0e ; '.'
0000000000019330         db  0x18 ; '.'
0000000000019331         db  0x8e ; '.'
0000000000019332         db  0x03 ; '.'
0000000000019333         db  0x49 ; 'I'
0000000000019334         db  0x0e ; '.'
0000000000019335         db  0x20 ; ' '
0000000000019336         db  0x8d ; '.'
0000000000019337         db  0x04 ; '.'
0000000000019338         db  0x42 ; 'B'
0000000000019339         db  0x0e ; '.'
000000000001933a         db  0x28 ; '('
000000000001933b         db  0x8c ; '.'
000000000001933c         db  0x05 ; '.'
000000000001933d         db  0x44 ; 'D'
000000000001933e         db  0x0e ; '.'
000000000001933f         db  0x30 ; '0'
0000000000019340         db  0x86 ; '.'
0000000000019341         db  0x06 ; '.'
0000000000019342         db  0x41 ; 'A'
0000000000019343         db  0x0e ; '.'
0000000000019344         db  0x38 ; '8'
0000000000019345         db  0x83 ; '.'
0000000000019346         db  0x07 ; '.'
0000000000019347         db  0x4d ; 'M'
0000000000019348         db  0x0e ; '.'
0000000000019349         db  0x50 ; 'P'
000000000001934a         db  0x5f ; '_'
000000000001934b         db  0x0e ; '.'
000000000001934c         db  0x58 ; 'X'
000000000001934d         db  0x47 ; 'G'
000000000001934e         db  0x0e ; '.'
000000000001934f         db  0x60 ; '`'
0000000000019350         db  0x46 ; 'F'
0000000000019351         db  0x0e ; '.'
0000000000019352         db  0x68 ; 'h'
0000000000019353         db  0x44 ; 'D'
0000000000019354         db  0x0e ; '.'
0000000000019355         db  0x70 ; 'p'
0000000000019356         db  0x58 ; 'X'
0000000000019357         db  0x0e ; '.'
0000000000019358         db  0x38 ; '8'
0000000000019359         db  0x41 ; 'A'
000000000001935a         db  0x0e ; '.'
000000000001935b         db  0x30 ; '0'
000000000001935c         db  0x41 ; 'A'
000000000001935d         db  0x0e ; '.'
000000000001935e         db  0x28 ; '('
000000000001935f         db  0x42 ; 'B'
0000000000019360         db  0x0e ; '.'
0000000000019361         db  0x20 ; ' '
0000000000019362         db  0x42 ; 'B'
0000000000019363         db  0x0e ; '.'
0000000000019364         db  0x18 ; '.'
0000000000019365         db  0x42 ; 'B'
0000000000019366         db  0x0e ; '.'
0000000000019367         db  0x10 ; '.'
0000000000019368         db  0x42 ; 'B'
0000000000019369         db  0x0e ; '.'
000000000001936a         db  0x08 ; '.'
000000000001936b         db  0x00 ; '.'
000000000001936c         dd         0x00000068                                  ; Length of the record
0000000000019370         dd         0x000015d0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019374         db         0x2c, 0x50, 2 dup (0xff)                    ; begin 0xe3a0
0000000000019378         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0xe483)
000000000001937c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001937d         db  0x42 ; 'B'
000000000001937e         db  0x0e ; '.'
000000000001937f         db  0x10 ; '.'
0000000000019380         db  0x8f ; '.'
0000000000019381         db  0x02 ; '.'
0000000000019382         db  0x42 ; 'B'
0000000000019383         db  0x0e ; '.'
0000000000019384         db  0x18 ; '.'
0000000000019385         db  0x8e ; '.'
0000000000019386         db  0x03 ; '.'
0000000000019387         db  0x49 ; 'I'
0000000000019388         db  0x0e ; '.'
0000000000019389         db  0x20 ; ' '
000000000001938a         db  0x8d ; '.'
000000000001938b         db  0x04 ; '.'
000000000001938c         db  0x42 ; 'B'
000000000001938d         db  0x0e ; '.'
000000000001938e         db  0x28 ; '('
000000000001938f         db  0x8c ; '.'
0000000000019390         db  0x05 ; '.'
0000000000019391         db  0x44 ; 'D'
0000000000019392         db  0x0e ; '.'
0000000000019393         db  0x30 ; '0'
0000000000019394         db  0x86 ; '.'
0000000000019395         db  0x06 ; '.'
0000000000019396         db  0x41 ; 'A'
0000000000019397         db  0x0e ; '.'
0000000000019398         db  0x38 ; '8'
0000000000019399         db  0x83 ; '.'
000000000001939a         db  0x07 ; '.'
000000000001939b         db  0x4d ; 'M'
000000000001939c         db  0x0e ; '.'
000000000001939d         db  0x70 ; 'p'
000000000001939e         db  0x65 ; 'e'
000000000001939f         db  0x0e ; '.'
00000000000193a0         db  0x78 ; 'x'
00000000000193a1         db  0x4d ; 'M'
00000000000193a2         db  0x0e ; '.'
00000000000193a3         db  0x80 ; '.'
00000000000193a4         db  0x01 ; '.'
00000000000193a5         db  0x46 ; 'F'
00000000000193a6         db  0x0e ; '.'
00000000000193a7         db  0x88 ; '.'
00000000000193a8         db  0x01 ; '.'
00000000000193a9         db  0x42 ; 'B'
00000000000193aa         db  0x0e ; '.'
00000000000193ab         db  0x90 ; '.'
00000000000193ac         db  0x01 ; '.'
00000000000193ad         db  0x5e ; '^'
00000000000193ae         db  0x0e ; '.'
00000000000193af         db  0x70 ; 'p'
00000000000193b0         db  0x56 ; 'V'
00000000000193b1         db  0x0e ; '.'
00000000000193b2         db  0x78 ; 'x'
00000000000193b3         db  0x43 ; 'C'
00000000000193b4         db  0x0e ; '.'
00000000000193b5         db  0x80 ; '.'
00000000000193b6         db  0x01 ; '.'
00000000000193b7         db  0x43 ; 'C'
00000000000193b8         db  0x0e ; '.'
00000000000193b9         db  0x88 ; '.'
00000000000193ba         db  0x01 ; '.'
00000000000193bb         db  0x56 ; 'V'
00000000000193bc         db  0x0e ; '.'
00000000000193bd         db  0x90 ; '.'
00000000000193be         db  0x01 ; '.'
00000000000193bf         db  0x52 ; 'R'
00000000000193c0         db  0x0e ; '.'
00000000000193c1         db  0x70 ; 'p'
00000000000193c2         db  0x5b ; '['
00000000000193c3         db  0x0e ; '.'
00000000000193c4         db  0x38 ; '8'
00000000000193c5         db  0x41 ; 'A'
00000000000193c6         db  0x0e ; '.'
00000000000193c7         db  0x30 ; '0'
00000000000193c8         db  0x41 ; 'A'
00000000000193c9         db  0x0e ; '.'
00000000000193ca         db  0x28 ; '('
00000000000193cb         db  0x42 ; 'B'
00000000000193cc         db  0x0e ; '.'
00000000000193cd         db  0x20 ; ' '
00000000000193ce         db  0x42 ; 'B'
00000000000193cf         db  0x0e ; '.'
00000000000193d0         db  0x18 ; '.'
00000000000193d1         db  0x42 ; 'B'
00000000000193d2         db  0x0e ; '.'
00000000000193d3         db  0x10 ; '.'
00000000000193d4         db  0x42 ; 'B'
00000000000193d5         db  0x0e ; '.'
00000000000193d6         db  0x08 ; '.'
00000000000193d7         db  0x00 ; '.'
00000000000193d8         dd         0x00000010                                  ; Length of the record
00000000000193dc         dd         0x0000163c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000193e0         db         0xb0, 0x50, 2 dup (0xff)                    ; begin 0xe490
00000000000193e4         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xe49a)
00000000000193e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000193e9         align      4
00000000000193ec         dd         0x00000028                                  ; Length of the record
00000000000193f0         dd         0x00001650                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000193f4         db         0xac, 0x50, 2 dup (0xff)                    ; begin 0xe4a0
00000000000193f8         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0xe533)
00000000000193fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000193fd         db  0x48 ; 'H'
00000000000193fe         db  0x0e ; '.'
00000000000193ff         db  0x10 ; '.'
0000000000019400         db  0x8c ; '.'
0000000000019401         db  0x02 ; '.'
0000000000019402         db  0x48 ; 'H'
0000000000019403         db  0x0e ; '.'
0000000000019404         db  0x18 ; '.'
0000000000019405         db  0x86 ; '.'
0000000000019406         db  0x03 ; '.'
0000000000019407         db  0x41 ; 'A'
0000000000019408         db  0x0e ; '.'
0000000000019409         db  0x20 ; ' '
000000000001940a         db  0x83 ; '.'
000000000001940b         db  0x04 ; '.'
000000000001940c         db  0x02 ; '.'
000000000001940d         db  0x74 ; 't'
000000000001940e         db  0x0e ; '.'
000000000001940f         db  0x18 ; '.'
0000000000019410         db  0x4b ; 'K'
0000000000019411         db  0x0e ; '.'
0000000000019412         db  0x10 ; '.'
0000000000019413         db  0x42 ; 'B'
0000000000019414         db  0x0e ; '.'
0000000000019415         db  0x08 ; '.'
0000000000019416         db  0x00 ; '.'
0000000000019417         db  0x00 ; '.'
0000000000019418         dd         0x00000010                                  ; Length of the record
000000000001941c         dd         0x0000167c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019420         db         0x20, 0x51, 2 dup (0xff)                    ; begin 0xe540
0000000000019424         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xe553)
0000000000019428         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019429         align      4
000000000001942c         dd         0x00000010                                  ; Length of the record
0000000000019430         dd         0x00001690                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019434         db         0x2c, 0x51, 2 dup (0xff)                    ; begin 0xe560
0000000000019438         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xe56c)
000000000001943c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001943d         align      64
0000000000019440         dd         0x00000010                                  ; Length of the record
0000000000019444         dd         0x000016a4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019448         db         0x28, 0x51, 2 dup (0xff)                    ; begin 0xe570
000000000001944c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0xe588)
0000000000019450         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019451         align      4
0000000000019454         dd         0x00000010                                  ; Length of the record
0000000000019458         dd         0x000016b8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001945c         db         0x34, 0x51, 2 dup (0xff)                    ; begin 0xe590
0000000000019460         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0xe5a4)
0000000000019464         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019465         align      8
0000000000019468         dd         0x00000018                                  ; Length of the record
000000000001946c         dd         0x000016cc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019470         db         0x40, 0x51, 2 dup (0xff)                    ; begin 0xe5b0
0000000000019474         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0xe63e)
0000000000019478         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019479         db  0x44 ; 'D'
000000000001947a         db  0x0e ; '.'
000000000001947b         db  0x50 ; 'P'
000000000001947c         db  0x02 ; '.'
000000000001947d         db  0x7f ; '.'
000000000001947e         db  0x0a ; '.'
000000000001947f         db  0x0e ; '.'
0000000000019480         db  0x08 ; '.'
0000000000019481         db  0x41 ; 'A'
0000000000019482         db  0x0b ; '.'
0000000000019483         db  0x00 ; '.'
0000000000019484         dd         0x00000018                                  ; Length of the record
0000000000019488         dd         0x000016e8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001948c         db         0xb4, 0x51, 2 dup (0xff)                    ; begin 0xe640
0000000000019490         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0xe6ca)
0000000000019494         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019495         db  0x44 ; 'D'
0000000000019496         db  0x0e ; '.'
0000000000019497         db  0x50 ; 'P'
0000000000019498         db  0x02 ; '.'
0000000000019499         db  0x7b ; '{'
000000000001949a         db  0x0a ; '.'
000000000001949b         db  0x0e ; '.'
000000000001949c         db  0x08 ; '.'
000000000001949d         db  0x41 ; 'A'
000000000001949e         db  0x0b ; '.'
000000000001949f         db  0x00 ; '.'
00000000000194a0         dd         0x00000010                                  ; Length of the record
00000000000194a4         dd         0x00001704                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000194a8         db         0x28, 0x52, 2 dup (0xff)                    ; begin 0xe6d0
00000000000194ac         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xe6dc)
00000000000194b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000194b1         align      4
00000000000194b4         dd         0x00000010                                  ; Length of the record
00000000000194b8         dd         0x00001718                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000194bc         db         0x24, 0x52, 2 dup (0xff)                    ; begin 0xe6e0
00000000000194c0         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0xe6ef)
00000000000194c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000194c5         align      8
00000000000194c8         dd         0x00000018                                  ; Length of the record
00000000000194cc         dd         0x0000172c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000194d0         db         0x20, 0x52, 2 dup (0xff)                    ; begin 0xe6f0
00000000000194d4         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0xe788)
00000000000194d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000194d9         db  0x44 ; 'D'
00000000000194da         db  0x0e ; '.'
00000000000194db         db  0x50 ; 'P'
00000000000194dc         db  0x02 ; '.'
00000000000194dd         db  0x8e ; '.'
00000000000194de         db  0x0a ; '.'
00000000000194df         db  0x0e ; '.'
00000000000194e0         db  0x08 ; '.'
00000000000194e1         db  0x41 ; 'A'
00000000000194e2         db  0x0b ; '.'
00000000000194e3         db  0x00 ; '.'
00000000000194e4         dd         0x00000010                                  ; Length of the record
00000000000194e8         dd         0x00001748                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000194ec         db         0xa4, 0x52, 2 dup (0xff)                    ; begin 0xe790
00000000000194f0         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0xe7a0)
00000000000194f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000194f5         align      8
00000000000194f8         dd         0x00000010                                  ; Length of the record
00000000000194fc         dd         0x0000175c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019500         db         0xa0, 0x52, 2 dup (0xff)                    ; begin 0xe7a0
0000000000019504         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0xe7b1)
0000000000019508         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019509         align      4
000000000001950c         dd         0x00000010                                  ; Length of the record
0000000000019510         dd         0x00001770                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019514         db         0xac, 0x52, 2 dup (0xff)                    ; begin 0xe7c0
0000000000019518         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xe7ca)
000000000001951c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001951d         align      32
0000000000019520         dd         0x00000018                                  ; Length of the record
0000000000019524         dd         0x00001784                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019528         db         0xa8, 0x52, 2 dup (0xff)                    ; begin 0xe7d0
000000000001952c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0xe85e)
0000000000019530         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019531         db  0x44 ; 'D'
0000000000019532         db  0x0e ; '.'
0000000000019533         db  0x50 ; 'P'
0000000000019534         db  0x02 ; '.'
0000000000019535         db  0x7f ; '.'
0000000000019536         db  0x0a ; '.'
0000000000019537         db  0x0e ; '.'
0000000000019538         db  0x08 ; '.'
0000000000019539         db  0x41 ; 'A'
000000000001953a         db  0x0b ; '.'
000000000001953b         db  0x00 ; '.'
000000000001953c         dd         0x00000018                                  ; Length of the record
0000000000019540         dd         0x000017a0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019544         db         0x1c, 0x53, 2 dup (0xff)                    ; begin 0xe860
0000000000019548         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0xe8f1)
000000000001954c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001954d         db  0x44 ; 'D'
000000000001954e         db  0x0e ; '.'
000000000001954f         db  0x50 ; 'P'
0000000000019550         db  0x02 ; '.'
0000000000019551         db  0x82 ; '.'
0000000000019552         db  0x0a ; '.'
0000000000019553         db  0x0e ; '.'
0000000000019554         db  0x08 ; '.'
0000000000019555         db  0x41 ; 'A'
0000000000019556         db  0x0b ; '.'
0000000000019557         db  0x00 ; '.'
0000000000019558         dd         0x00000010                                  ; Length of the record
000000000001955c         dd         0x000017bc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019560         db         0xa0, 0x53, 2 dup (0xff)                    ; begin 0xe900
0000000000019564         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xe90c)
0000000000019568         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019569         align      4
000000000001956c         dd         0x00000010                                  ; Length of the record
0000000000019570         dd         0x000017d0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019574         db         0x9c, 0x53, 2 dup (0xff)                    ; begin 0xe910
0000000000019578         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0xe927)
000000000001957c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001957d         align      128
0000000000019580         dd         0x00000010                                  ; Length of the record
0000000000019584         dd         0x000017e4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019588         db         0xa8, 0x53, 2 dup (0xff)                    ; begin 0xe930
000000000001958c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xe943)
0000000000019590         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019591         align      4
0000000000019594         dd         0x00000010                                  ; Length of the record
0000000000019598         dd         0x000017f8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001959c         db         0xb4, 0x53, 2 dup (0xff)                    ; begin 0xe950
00000000000195a0         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xe95c)
00000000000195a4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000195a5         align      8
00000000000195a8         dd         0x00000010                                  ; Length of the record
00000000000195ac         dd         0x0000180c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000195b0         db         0xb0, 0x53, 2 dup (0xff)                    ; begin 0xe960
00000000000195b4         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0xe974)
00000000000195b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000195b9         align      4
00000000000195bc         dd         0x00000010                                  ; Length of the record
00000000000195c0         dd         0x00001820                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000195c4         db         0xbc, 0x53, 2 dup (0xff)                    ; begin 0xe980
00000000000195c8         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xe993)
00000000000195cc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000195cd         align      16
00000000000195d0         dd         0x00000014                                  ; Length of the record
00000000000195d4         dd         0x00001834                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000195d8         db         0xc8, 0x53, 2 dup (0xff)                    ; begin 0xe9a0
00000000000195dc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0xe9b8)
00000000000195e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000195e1         align      8
00000000000195e8         dd         0x0000004c                                  ; Length of the record
00000000000195ec         dd         0x0000184c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000195f0         db         0xd0, 0x53, 2 dup (0xff)                    ; begin 0xe9c0
00000000000195f4         db         0x6a, 0x02, 2 dup (0x00)                    ; length 0x26a (end at 0xec2a)
00000000000195f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000195f9         db  0x42 ; 'B'
00000000000195fa         db  0x0e ; '.'
00000000000195fb         db  0x10 ; '.'
00000000000195fc         db  0x8f ; '.'
00000000000195fd         db  0x02 ; '.'
00000000000195fe         db  0x42 ; 'B'
00000000000195ff         db  0x0e ; '.'
0000000000019600         db  0x18 ; '.'
0000000000019601         db  0x8e ; '.'
0000000000019602         db  0x03 ; '.'
0000000000019603         db  0x45 ; 'E'
0000000000019604         db  0x0e ; '.'
0000000000019605         db  0x20 ; ' '
0000000000019606         db  0x8d ; '.'
0000000000019607         db  0x04 ; '.'
0000000000019608         db  0x42 ; 'B'
0000000000019609         db  0x0e ; '.'
000000000001960a         db  0x28 ; '('
000000000001960b         db  0x8c ; '.'
000000000001960c         db  0x05 ; '.'
000000000001960d         db  0x44 ; 'D'
000000000001960e         db  0x0e ; '.'
000000000001960f         db  0x30 ; '0'
0000000000019610         db  0x86 ; '.'
0000000000019611         db  0x06 ; '.'
0000000000019612         db  0x41 ; 'A'
0000000000019613         db  0x0e ; '.'
0000000000019614         db  0x38 ; '8'
0000000000019615         db  0x83 ; '.'
0000000000019616         db  0x07 ; '.'
0000000000019617         db  0x53 ; 'S'
0000000000019618         db  0x0e ; '.'
0000000000019619         db  0x80 ; '.'
000000000001961a         db  0x03 ; '.'
000000000001961b         db  0x02 ; '.'
000000000001961c         db  0x58 ; 'X'
000000000001961d         db  0x0a ; '.'
000000000001961e         db  0x0e ; '.'
000000000001961f         db  0x38 ; '8'
0000000000019620         db  0x41 ; 'A'
0000000000019621         db  0x0e ; '.'
0000000000019622         db  0x30 ; '0'
0000000000019623         db  0x41 ; 'A'
0000000000019624         db  0x0e ; '.'
0000000000019625         db  0x28 ; '('
0000000000019626         db  0x42 ; 'B'
0000000000019627         db  0x0e ; '.'
0000000000019628         db  0x20 ; ' '
0000000000019629         db  0x42 ; 'B'
000000000001962a         db  0x0e ; '.'
000000000001962b         db  0x18 ; '.'
000000000001962c         db  0x42 ; 'B'
000000000001962d         db  0x0e ; '.'
000000000001962e         db  0x10 ; '.'
000000000001962f         db  0x42 ; 'B'
0000000000019630         db  0x0e ; '.'
0000000000019631         db  0x08 ; '.'
0000000000019632         db  0x4b ; 'K'
0000000000019633         db  0x0b ; '.'
0000000000019634         db  0x00 ; '.'
0000000000019635         db  0x00 ; '.'
0000000000019636         db  0x00 ; '.'
0000000000019637         db  0x00 ; '.'
0000000000019638         dd         0x00000024                                  ; Length of the record
000000000001963c         dd         0x0000189c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019640         db         0xf0, 0x55, 2 dup (0xff)                    ; begin 0xec30
0000000000019644         db         0x71, 3 dup (0x00)                          ; length 0x71 (end at 0xeca1)
0000000000019648         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019649         db  0x41 ; 'A'
000000000001964a         db  0x0e ; '.'
000000000001964b         db  0x10 ; '.'
000000000001964c         db  0x83 ; '.'
000000000001964d         db  0x02 ; '.'
000000000001964e         db  0x56 ; 'V'
000000000001964f         db  0x0e ; '.'
0000000000019650         db  0xb0 ; '.'
0000000000019651         db  0x01 ; '.'
0000000000019652         db  0x02 ; '.'
0000000000019653         db  0x4c ; 'L'
0000000000019654         db  0x0a ; '.'
0000000000019655         db  0x0e ; '.'
0000000000019656         db  0x10 ; '.'
0000000000019657         db  0x41 ; 'A'
0000000000019658         db  0x0e ; '.'
0000000000019659         db  0x08 ; '.'
000000000001965a         db  0x44 ; 'D'
000000000001965b         db  0x0b ; '.'
000000000001965c         db  0x00 ; '.'
000000000001965d         db  0x00 ; '.'
000000000001965e         db  0x00 ; '.'
000000000001965f         db  0x00 ; '.'
0000000000019660         dd         0x00000034                                  ; Length of the record
0000000000019664         dd         0x000018c4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019668         db         0x48, 0x56, 2 dup (0xff)                    ; begin 0xecb0
000000000001966c         db         0x5e, 3 dup (0x00)                          ; length 0x5e (end at 0xed0e)
0000000000019670         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019671         db  0x42 ; 'B'
0000000000019672         db  0x0e ; '.'
0000000000019673         db  0x10 ; '.'
0000000000019674         db  0x8d ; '.'
0000000000019675         db  0x02 ; '.'
0000000000019676         db  0x42 ; 'B'
0000000000019677         db  0x0e ; '.'
0000000000019678         db  0x18 ; '.'
0000000000019679         db  0x8c ; '.'
000000000001967a         db  0x03 ; '.'
000000000001967b         db  0x44 ; 'D'
000000000001967c         db  0x0e ; '.'
000000000001967d         db  0x20 ; ' '
000000000001967e         db  0x86 ; '.'
000000000001967f         db  0x04 ; '.'
0000000000019680         db  0x41 ; 'A'
0000000000019681         db  0x0e ; '.'
0000000000019682         db  0x28 ; '('
0000000000019683         db  0x83 ; '.'
0000000000019684         db  0x05 ; '.'
0000000000019685         db  0x4a ; 'J'
0000000000019686         db  0x0e ; '.'
0000000000019687         db  0x30 ; '0'
0000000000019688         db  0x02 ; '.'
0000000000019689         db  0x41 ; 'A'
000000000001968a         db  0x0e ; '.'
000000000001968b         db  0x28 ; '('
000000000001968c         db  0x44 ; 'D'
000000000001968d         db  0x0e ; '.'
000000000001968e         db  0x20 ; ' '
000000000001968f         db  0x41 ; 'A'
0000000000019690         db  0x0e ; '.'
0000000000019691         db  0x18 ; '.'
0000000000019692         db  0x42 ; 'B'
0000000000019693         db  0x0e ; '.'
0000000000019694         db  0x10 ; '.'
0000000000019695         db  0x42 ; 'B'
0000000000019696         db  0x0e ; '.'
0000000000019697         db  0x08 ; '.'
0000000000019698         dd         0x00000038                                  ; Length of the record
000000000001969c         dd         0x000018fc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000196a0         db         0x70, 0x56, 2 dup (0xff)                    ; begin 0xed10
00000000000196a4         db         0x27, 0x01, 2 dup (0x00)                    ; length 0x127 (end at 0xee37)
00000000000196a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000196a9         db  0x42 ; 'B'
00000000000196aa         db  0x0e ; '.'
00000000000196ab         db  0x10 ; '.'
00000000000196ac         db  0x8d ; '.'
00000000000196ad         db  0x02 ; '.'
00000000000196ae         db  0x42 ; 'B'
00000000000196af         db  0x0e ; '.'
00000000000196b0         db  0x18 ; '.'
00000000000196b1         db  0x8c ; '.'
00000000000196b2         db  0x03 ; '.'
00000000000196b3         db  0x44 ; 'D'
00000000000196b4         db  0x0e ; '.'
00000000000196b5         db  0x20 ; ' '
00000000000196b6         db  0x86 ; '.'
00000000000196b7         db  0x04 ; '.'
00000000000196b8         db  0x41 ; 'A'
00000000000196b9         db  0x0e ; '.'
00000000000196ba         db  0x28 ; '('
00000000000196bb         db  0x83 ; '.'
00000000000196bc         db  0x05 ; '.'
00000000000196bd         db  0x4f ; 'O'
00000000000196be         db  0x0e ; '.'
00000000000196bf         db  0xe0 ; '.'
00000000000196c0         db  0x02 ; '.'
00000000000196c1         db  0x02 ; '.'
00000000000196c2         db  0xb5 ; '.'
00000000000196c3         db  0x0a ; '.'
00000000000196c4         db  0x0e ; '.'
00000000000196c5         db  0x28 ; '('
00000000000196c6         db  0x41 ; 'A'
00000000000196c7         db  0x0e ; '.'
00000000000196c8         db  0x20 ; ' '
00000000000196c9         db  0x41 ; 'A'
00000000000196ca         db  0x0e ; '.'
00000000000196cb         db  0x18 ; '.'
00000000000196cc         db  0x42 ; 'B'
00000000000196cd         db  0x0e ; '.'
00000000000196ce         db  0x10 ; '.'
00000000000196cf         db  0x42 ; 'B'
00000000000196d0         db  0x0e ; '.'
00000000000196d1         db  0x08 ; '.'
00000000000196d2         db  0x45 ; 'E'
00000000000196d3         db  0x0b ; '.'
00000000000196d4         dd         0x0000005c                                  ; Length of the record
00000000000196d8         dd         0x00001938                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000196dc         db         0x64, 0x57, 2 dup (0xff)                    ; begin 0xee40
00000000000196e0         db         0x92, 3 dup (0x00)                          ; length 0x92 (end at 0xeed2)
00000000000196e4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000196e5         db  0x42 ; 'B'
00000000000196e6         db  0x0e ; '.'
00000000000196e7         db  0x10 ; '.'
00000000000196e8         db  0x8f ; '.'
00000000000196e9         db  0x02 ; '.'
00000000000196ea         db  0x42 ; 'B'
00000000000196eb         db  0x0e ; '.'
00000000000196ec         db  0x18 ; '.'
00000000000196ed         db  0x8e ; '.'
00000000000196ee         db  0x03 ; '.'
00000000000196ef         db  0x45 ; 'E'
00000000000196f0         db  0x0e ; '.'
00000000000196f1         db  0x20 ; ' '
00000000000196f2         db  0x8d ; '.'
00000000000196f3         db  0x04 ; '.'
00000000000196f4         db  0x42 ; 'B'
00000000000196f5         db  0x0e ; '.'
00000000000196f6         db  0x28 ; '('
00000000000196f7         db  0x8c ; '.'
00000000000196f8         db  0x05 ; '.'
00000000000196f9         db  0x41 ; 'A'
00000000000196fa         db  0x0e ; '.'
00000000000196fb         db  0x30 ; '0'
00000000000196fc         db  0x86 ; '.'
00000000000196fd         db  0x06 ; '.'
00000000000196fe         db  0x41 ; 'A'
00000000000196ff         db  0x0e ; '.'
0000000000019700         db  0x38 ; '8'
0000000000019701         db  0x83 ; '.'
0000000000019702         db  0x07 ; '.'
0000000000019703         db  0x4a ; 'J'
0000000000019704         db  0x0e ; '.'
0000000000019705         db  0x50 ; 'P'
0000000000019706         db  0x76 ; 'v'
0000000000019707         db  0x0a ; '.'
0000000000019708         db  0x0e ; '.'
0000000000019709         db  0x38 ; '8'
000000000001970a         db  0x43 ; 'C'
000000000001970b         db  0x0e ; '.'
000000000001970c         db  0x30 ; '0'
000000000001970d         db  0x41 ; 'A'
000000000001970e         db  0x0e ; '.'
000000000001970f         db  0x28 ; '('
0000000000019710         db  0x42 ; 'B'
0000000000019711         db  0x0e ; '.'
0000000000019712         db  0x20 ; ' '
0000000000019713         db  0x42 ; 'B'
0000000000019714         db  0x0e ; '.'
0000000000019715         db  0x18 ; '.'
0000000000019716         db  0x42 ; 'B'
0000000000019717         db  0x0e ; '.'
0000000000019718         db  0x10 ; '.'
0000000000019719         db  0x42 ; 'B'
000000000001971a         db  0x0e ; '.'
000000000001971b         db  0x08 ; '.'
000000000001971c         db  0x47 ; 'G'
000000000001971d         db  0x0b ; '.'
000000000001971e         db  0x5a ; 'Z'
000000000001971f         db  0x0e ; '.'
0000000000019720         db  0x38 ; '8'
0000000000019721         db  0x4a ; 'J'
0000000000019722         db  0x0e ; '.'
0000000000019723         db  0x30 ; '0'
0000000000019724         db  0x41 ; 'A'
0000000000019725         db  0x0e ; '.'
0000000000019726         db  0x28 ; '('
0000000000019727         db  0x42 ; 'B'
0000000000019728         db  0x0e ; '.'
0000000000019729         db  0x20 ; ' '
000000000001972a         db  0x42 ; 'B'
000000000001972b         db  0x0e ; '.'
000000000001972c         db  0x18 ; '.'
000000000001972d         db  0x42 ; 'B'
000000000001972e         db  0x0e ; '.'
000000000001972f         db  0x10 ; '.'
0000000000019730         db  0x42 ; 'B'
0000000000019731         db  0x0e ; '.'
0000000000019732         db  0x08 ; '.'
0000000000019733         db  0x00 ; '.'
0000000000019734         dd         0x00000010                                  ; Length of the record
0000000000019738         dd         0x00001998                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001973c         db         0xa4, 0x57, 2 dup (0xff)                    ; begin 0xeee0
0000000000019740         db         0x12, 3 dup (0x00)                          ; length 0x12 (end at 0xeef2)
0000000000019744         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019745         align      8
0000000000019748         dd         0x00000010                                  ; Length of the record
000000000001974c         dd         0x000019ac                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019750         db         0xb0, 0x57, 2 dup (0xff)                    ; begin 0xef00
0000000000019754         db         0x1e, 3 dup (0x00)                          ; length 0x1e (end at 0xef1e)
0000000000019758         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019759         align      4
000000000001975c         dd         0x00000010                                  ; Length of the record
0000000000019760         dd         0x000019c0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019764         db         0xbc, 0x57, 2 dup (0xff)                    ; begin 0xef20
0000000000019768         db         0x0b, 3 dup (0x00)                          ; length 0xb (end at 0xef2b)
000000000001976c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001976d         align      16
0000000000019770         dd         0x0000004c                                  ; Length of the record
0000000000019774         dd         0x000019d4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019778         db         0xb8, 0x57, 2 dup (0xff)                    ; begin 0xef30
000000000001977c         db         0x78, 0x03, 2 dup (0x00)                    ; length 0x378 (end at 0xf2a8)
0000000000019780         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019781         db  0x42 ; 'B'
0000000000019782         db  0x0e ; '.'
0000000000019783         db  0x10 ; '.'
0000000000019784         db  0x8f ; '.'
0000000000019785         db  0x02 ; '.'
0000000000019786         db  0x49 ; 'I'
0000000000019787         db  0x0e ; '.'
0000000000019788         db  0x18 ; '.'
0000000000019789         db  0x8e ; '.'
000000000001978a         db  0x03 ; '.'
000000000001978b         db  0x42 ; 'B'
000000000001978c         db  0x0e ; '.'
000000000001978d         db  0x20 ; ' '
000000000001978e         db  0x8d ; '.'
000000000001978f         db  0x04 ; '.'
0000000000019790         db  0x42 ; 'B'
0000000000019791         db  0x0e ; '.'
0000000000019792         db  0x28 ; '('
0000000000019793         db  0x8c ; '.'
0000000000019794         db  0x05 ; '.'
0000000000019795         db  0x43 ; 'C'
0000000000019796         db  0x0e ; '.'
0000000000019797         db  0x30 ; '0'
0000000000019798         db  0x86 ; '.'
0000000000019799         db  0x06 ; '.'
000000000001979a         db  0x41 ; 'A'
000000000001979b         db  0x0e ; '.'
000000000001979c         db  0x38 ; '8'
000000000001979d         db  0x83 ; '.'
000000000001979e         db  0x07 ; '.'
000000000001979f         db  0x44 ; 'D'
00000000000197a0         db  0x0e ; '.'
00000000000197a1         db  0x80 ; '.'
00000000000197a2         db  0x01 ; '.'
00000000000197a3         db  0x03 ; '.'
00000000000197a4         db  0x48 ; 'H'
00000000000197a5         db  0x01 ; '.'
00000000000197a6         db  0x0a ; '.'
00000000000197a7         db  0x0e ; '.'
00000000000197a8         db  0x38 ; '8'
00000000000197a9         db  0x44 ; 'D'
00000000000197aa         db  0x0e ; '.'
00000000000197ab         db  0x30 ; '0'
00000000000197ac         db  0x41 ; 'A'
00000000000197ad         db  0x0e ; '.'
00000000000197ae         db  0x28 ; '('
00000000000197af         db  0x42 ; 'B'
00000000000197b0         db  0x0e ; '.'
00000000000197b1         db  0x20 ; ' '
00000000000197b2         db  0x42 ; 'B'
00000000000197b3         db  0x0e ; '.'
00000000000197b4         db  0x18 ; '.'
00000000000197b5         db  0x42 ; 'B'
00000000000197b6         db  0x0e ; '.'
00000000000197b7         db  0x10 ; '.'
00000000000197b8         db  0x42 ; 'B'
00000000000197b9         db  0x0e ; '.'
00000000000197ba         db  0x08 ; '.'
00000000000197bb         db  0x44 ; 'D'
00000000000197bc         db  0x0b ; '.'
00000000000197bd         db  0x00 ; '.'
00000000000197be         db  0x00 ; '.'
00000000000197bf         db  0x00 ; '.'
00000000000197c0         dd         0x0000002c                                  ; Length of the record
00000000000197c4         dd         0x00001a24                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000197c8         db         0xe8, 0x5a, 2 dup (0xff)                    ; begin 0xf2b0
00000000000197cc         db         0x5a, 3 dup (0x00)                          ; length 0x5a (end at 0xf30a)
00000000000197d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000197d1         db  0x42 ; 'B'
00000000000197d2         db  0x0e ; '.'
00000000000197d3         db  0x10 ; '.'
00000000000197d4         db  0x8c ; '.'
00000000000197d5         db  0x02 ; '.'
00000000000197d6         db  0x41 ; 'A'
00000000000197d7         db  0x0e ; '.'
00000000000197d8         db  0x18 ; '.'
00000000000197d9         db  0x86 ; '.'
00000000000197da         db  0x03 ; '.'
00000000000197db         db  0x43 ; 'C'
00000000000197dc         db  0x0e ; '.'
00000000000197dd         db  0x20 ; ' '
00000000000197de         db  0x83 ; '.'
00000000000197df         db  0x04 ; '.'
00000000000197e0         db  0x6a ; 'j'
00000000000197e1         db  0x0a ; '.'
00000000000197e2         db  0x0e ; '.'
00000000000197e3         db  0x18 ; '.'
00000000000197e4         db  0x41 ; 'A'
00000000000197e5         db  0x0e ; '.'
00000000000197e6         db  0x10 ; '.'
00000000000197e7         db  0x42 ; 'B'
00000000000197e8         db  0x0e ; '.'
00000000000197e9         db  0x08 ; '.'
00000000000197ea         db  0x45 ; 'E'
00000000000197eb         db  0x0b ; '.'
00000000000197ec         db  0x00 ; '.'
00000000000197ed         db  0x00 ; '.'
00000000000197ee         db  0x00 ; '.'
00000000000197ef         db  0x00 ; '.'
00000000000197f0         dd         0x00000020                                  ; Length of the record
00000000000197f4         dd         0x00001a54                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000197f8         db         0x18, 0x5b, 2 dup (0xff)                    ; begin 0xf310
00000000000197fc         db         0x7c, 3 dup (0x00)                          ; length 0x7c (end at 0xf38c)
0000000000019800         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019801         db  0x41 ; 'A'
0000000000019802         db  0x0e ; '.'
0000000000019803         db  0x10 ; '.'
0000000000019804         db  0x83 ; '.'
0000000000019805         db  0x02 ; '.'
0000000000019806         db  0x4f ; 'O'
0000000000019807         db  0x0e ; '.'
0000000000019808         db  0xb0 ; '.'
0000000000019809         db  0x01 ; '.'
000000000001980a         db  0x02 ; '.'
000000000001980b         db  0x65 ; 'e'
000000000001980c         db  0x0a ; '.'
000000000001980d         db  0x0e ; '.'
000000000001980e         db  0x10 ; '.'
000000000001980f         db  0x41 ; 'A'
0000000000019810         db  0x0e ; '.'
0000000000019811         db  0x08 ; '.'
0000000000019812         db  0x41 ; 'A'
0000000000019813         db  0x0b ; '.'
0000000000019814         dd         0x00000010                                  ; Length of the record
0000000000019818         dd         0x00001a78                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001981c         db         0x74, 0x5b, 2 dup (0xff)                    ; begin 0xf390
0000000000019820         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xf39a)
0000000000019824         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019825         align      8
0000000000019828         dd         0x00000010                                  ; Length of the record
000000000001982c         dd         0x00001a8c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019830         db         0x70, 0x5b, 2 dup (0xff)                    ; begin 0xf3a0
0000000000019834         db         0x16, 3 dup (0x00)                          ; length 0x16 (end at 0xf3b6)
0000000000019838         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019839         align      4
000000000001983c         dd         0x00000048                                  ; Length of the record
0000000000019840         dd         0x00001aa0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019844         db         0x7c, 0x5b, 2 dup (0xff)                    ; begin 0xf3c0
0000000000019848         db         0x74, 0x01, 2 dup (0x00)                    ; length 0x174 (end at 0xf534)
000000000001984c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001984d         db  0x42 ; 'B'
000000000001984e         db  0x0e ; '.'
000000000001984f         db  0x10 ; '.'
0000000000019850         db  0x8f ; '.'
0000000000019851         db  0x02 ; '.'
0000000000019852         db  0x42 ; 'B'
0000000000019853         db  0x0e ; '.'
0000000000019854         db  0x18 ; '.'
0000000000019855         db  0x8e ; '.'
0000000000019856         db  0x03 ; '.'
0000000000019857         db  0x45 ; 'E'
0000000000019858         db  0x0e ; '.'
0000000000019859         db  0x20 ; ' '
000000000001985a         db  0x8d ; '.'
000000000001985b         db  0x04 ; '.'
000000000001985c         db  0x42 ; 'B'
000000000001985d         db  0x0e ; '.'
000000000001985e         db  0x28 ; '('
000000000001985f         db  0x8c ; '.'
0000000000019860         db  0x05 ; '.'
0000000000019861         db  0x44 ; 'D'
0000000000019862         db  0x0e ; '.'
0000000000019863         db  0x30 ; '0'
0000000000019864         db  0x86 ; '.'
0000000000019865         db  0x06 ; '.'
0000000000019866         db  0x41 ; 'A'
0000000000019867         db  0x0e ; '.'
0000000000019868         db  0x38 ; '8'
0000000000019869         db  0x83 ; '.'
000000000001986a         db  0x07 ; '.'
000000000001986b         db  0x46 ; 'F'
000000000001986c         db  0x0e ; '.'
000000000001986d         db  0x70 ; 'p'
000000000001986e         db  0x03 ; '.'
000000000001986f         db  0x31 ; '1'
0000000000019870         db  0x01 ; '.'
0000000000019871         db  0x0a ; '.'
0000000000019872         db  0x0e ; '.'
0000000000019873         db  0x38 ; '8'
0000000000019874         db  0x43 ; 'C'
0000000000019875         db  0x0e ; '.'
0000000000019876         db  0x30 ; '0'
0000000000019877         db  0x41 ; 'A'
0000000000019878         db  0x0e ; '.'
0000000000019879         db  0x28 ; '('
000000000001987a         db  0x42 ; 'B'
000000000001987b         db  0x0e ; '.'
000000000001987c         db  0x20 ; ' '
000000000001987d         db  0x42 ; 'B'
000000000001987e         db  0x0e ; '.'
000000000001987f         db  0x18 ; '.'
0000000000019880         db  0x42 ; 'B'
0000000000019881         db  0x0e ; '.'
0000000000019882         db  0x10 ; '.'
0000000000019883         db  0x42 ; 'B'
0000000000019884         db  0x0e ; '.'
0000000000019885         db  0x08 ; '.'
0000000000019886         db  0x41 ; 'A'
0000000000019887         db  0x0b ; '.'
0000000000019888         dd         0x00000020                                  ; Length of the record
000000000001988c         dd         0x00001aec                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019890         db         0xb0, 0x5c, 2 dup (0xff)                    ; begin 0xf540
0000000000019894         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0xf5c6)
0000000000019898         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019899         db  0x44 ; 'D'
000000000001989a         db  0x0e ; '.'
000000000001989b         db  0x20 ; ' '
000000000001989c         db  0x02 ; '.'
000000000001989d         db  0x49 ; 'I'
000000000001989e         db  0x0a ; '.'
000000000001989f         db  0x0e ; '.'
00000000000198a0         db  0x08 ; '.'
00000000000198a1         db  0x43 ; 'C'
00000000000198a2         db  0x0b ; '.'
00000000000198a3         db  0x55 ; 'U'
00000000000198a4         db  0x0a ; '.'
00000000000198a5         db  0x0e ; '.'
00000000000198a6         db  0x08 ; '.'
00000000000198a7         db  0x4b ; 'K'
00000000000198a8         db  0x0b ; '.'
00000000000198a9         db  0x55 ; 'U'
00000000000198aa         db  0x0e ; '.'
00000000000198ab         db  0x08 ; '.'
00000000000198ac         dd         0x00000010                                  ; Length of the record
00000000000198b0         dd         0x00001b10                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000198b4         db         0x1c, 0x5d, 2 dup (0xff)                    ; begin 0xf5d0
00000000000198b8         db         0x0b, 3 dup (0x00)                          ; length 0xb (end at 0xf5db)
00000000000198bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000198bd         align      64
00000000000198c0         dd         0x00000014                                  ; Length of the record
00000000000198c4         dd         0x00001b24                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000198c8         db         0x18, 0x5d, 2 dup (0xff)                    ; begin 0xf5e0
00000000000198cc         db         0x0b, 3 dup (0x00)                          ; length 0xb (end at 0xf5eb)
00000000000198d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000198d1         align      8
00000000000198d8         dd         0x00000034                                  ; Length of the record
00000000000198dc         dd         0x00001b3c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000198e0         db         0x10, 0x5d, 2 dup (0xff)                    ; begin 0xf5f0
00000000000198e4         db         0x3f, 3 dup (0x00)                          ; length 0x3f (end at 0xf62f)
00000000000198e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000198e9         db  0x42 ; 'B'
00000000000198ea         db  0x0e ; '.'
00000000000198eb         db  0x10 ; '.'
00000000000198ec         db  0x8d ; '.'
00000000000198ed         db  0x02 ; '.'
00000000000198ee         db  0x42 ; 'B'
00000000000198ef         db  0x0e ; '.'
00000000000198f0         db  0x18 ; '.'
00000000000198f1         db  0x8c ; '.'
00000000000198f2         db  0x03 ; '.'
00000000000198f3         db  0x41 ; 'A'
00000000000198f4         db  0x0e ; '.'
00000000000198f5         db  0x20 ; ' '
00000000000198f6         db  0x86 ; '.'
00000000000198f7         db  0x04 ; '.'
00000000000198f8         db  0x41 ; 'A'
00000000000198f9         db  0x0e ; '.'
00000000000198fa         db  0x28 ; '('
00000000000198fb         db  0x83 ; '.'
00000000000198fc         db  0x05 ; '.'
00000000000198fd         db  0x46 ; 'F'
00000000000198fe         db  0x0e ; '.'
00000000000198ff         db  0x30 ; '0'
0000000000019900         db  0x6a ; 'j'
0000000000019901         db  0x0e ; '.'
0000000000019902         db  0x28 ; '('
0000000000019903         db  0x43 ; 'C'
0000000000019904         db  0x0e ; '.'
0000000000019905         db  0x20 ; ' '
0000000000019906         db  0x41 ; 'A'
0000000000019907         db  0x0e ; '.'
0000000000019908         db  0x18 ; '.'
0000000000019909         db  0x42 ; 'B'
000000000001990a         db  0x0e ; '.'
000000000001990b         db  0x10 ; '.'
000000000001990c         db  0x42 ; 'B'
000000000001990d         db  0x0e ; '.'
000000000001990e         db  0x08 ; '.'
000000000001990f         db  0x00 ; '.'
0000000000019910         dd         0x00000010                                  ; Length of the record
0000000000019914         dd         0x00001b74                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019918         db         0x18, 0x5d, 2 dup (0xff)                    ; begin 0xf630
000000000001991c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xf63c)
0000000000019920         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019921         align      4
0000000000019924         dd         0x00000010                                  ; Length of the record
0000000000019928         dd         0x00001b88                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001992c         db         0x14, 0x5d, 2 dup (0xff)                    ; begin 0xf640
0000000000019930         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xf64a)
0000000000019934         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019935         align      8
0000000000019938         dd         0x0000004c                                  ; Length of the record
000000000001993c         dd         0x00001b9c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019940         db         0x10, 0x5d, 2 dup (0xff)                    ; begin 0xf650
0000000000019944         db         0x7e, 0x07, 2 dup (0x00)                    ; length 0x77e (end at 0xfdce)
0000000000019948         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019949         db  0x42 ; 'B'
000000000001994a         db  0x0e ; '.'
000000000001994b         db  0x10 ; '.'
000000000001994c         db  0x8f ; '.'
000000000001994d         db  0x02 ; '.'
000000000001994e         db  0x42 ; 'B'
000000000001994f         db  0x0e ; '.'
0000000000019950         db  0x18 ; '.'
0000000000019951         db  0x8e ; '.'
0000000000019952         db  0x03 ; '.'
0000000000019953         db  0x42 ; 'B'
0000000000019954         db  0x0e ; '.'
0000000000019955         db  0x20 ; ' '
0000000000019956         db  0x8d ; '.'
0000000000019957         db  0x04 ; '.'
0000000000019958         db  0x42 ; 'B'
0000000000019959         db  0x0e ; '.'
000000000001995a         db  0x28 ; '('
000000000001995b         db  0x8c ; '.'
000000000001995c         db  0x05 ; '.'
000000000001995d         db  0x41 ; 'A'
000000000001995e         db  0x0e ; '.'
000000000001995f         db  0x30 ; '0'
0000000000019960         db  0x86 ; '.'
0000000000019961         db  0x06 ; '.'
0000000000019962         db  0x41 ; 'A'
0000000000019963         db  0x0e ; '.'
0000000000019964         db  0x38 ; '8'
0000000000019965         db  0x83 ; '.'
0000000000019966         db  0x07 ; '.'
0000000000019967         db  0x4d ; 'M'
0000000000019968         db  0x0e ; '.'
0000000000019969         db  0xe0 ; '.'
000000000001996a         db  0x02 ; '.'
000000000001996b         db  0x03 ; '.'
000000000001996c         db  0x48 ; 'H'
000000000001996d         db  0x01 ; '.'
000000000001996e         db  0x0a ; '.'
000000000001996f         db  0x0e ; '.'
0000000000019970         db  0x38 ; '8'
0000000000019971         db  0x41 ; 'A'
0000000000019972         db  0x0e ; '.'
0000000000019973         db  0x30 ; '0'
0000000000019974         db  0x41 ; 'A'
0000000000019975         db  0x0e ; '.'
0000000000019976         db  0x28 ; '('
0000000000019977         db  0x42 ; 'B'
0000000000019978         db  0x0e ; '.'
0000000000019979         db  0x20 ; ' '
000000000001997a         db  0x42 ; 'B'
000000000001997b         db  0x0e ; '.'
000000000001997c         db  0x18 ; '.'
000000000001997d         db  0x42 ; 'B'
000000000001997e         db  0x0e ; '.'
000000000001997f         db  0x10 ; '.'
0000000000019980         db  0x42 ; 'B'
0000000000019981         db  0x0e ; '.'
0000000000019982         db  0x08 ; '.'
0000000000019983         db  0x47 ; 'G'
0000000000019984         db  0x0b ; '.'
0000000000019985         db  0x00 ; '.'
0000000000019986         db  0x00 ; '.'
0000000000019987         db  0x00 ; '.'
0000000000019988         dd         0x00000014                                  ; Length of the record
000000000001998c         dd         0x00001bec                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019990         db         0x40, 0x64, 2 dup (0xff)                    ; begin 0xfdd0
0000000000019994         db         0x16, 3 dup (0x00)                          ; length 0x16 (end at 0xfde6)
0000000000019998         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019999         align      32
00000000000199a0         dd         0x00000040                                  ; Length of the record
00000000000199a4         dd         0x00001c04                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000199a8         db         0x48, 0x64, 2 dup (0xff)                    ; begin 0xfdf0
00000000000199ac         db         0xd6, 3 dup (0x00)                          ; length 0xd6 (end at 0xfec6)
00000000000199b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000199b1         db  0x41 ; 'A'
00000000000199b2         db  0x0e ; '.'
00000000000199b3         db  0x10 ; '.'
00000000000199b4         db  0x86 ; '.'
00000000000199b5         db  0x02 ; '.'
00000000000199b6         db  0x41 ; 'A'
00000000000199b7         db  0x0e ; '.'
00000000000199b8         db  0x18 ; '.'
00000000000199b9         db  0x83 ; '.'
00000000000199ba         db  0x03 ; '.'
00000000000199bb         db  0x47 ; 'G'
00000000000199bc         db  0x0e ; '.'
00000000000199bd         db  0x30 ; '0'
00000000000199be         db  0x73 ; 's'
00000000000199bf         db  0x0a ; '.'
00000000000199c0         db  0x0e ; '.'
00000000000199c1         db  0x18 ; '.'
00000000000199c2         db  0x41 ; 'A'
00000000000199c3         db  0x0e ; '.'
00000000000199c4         db  0x10 ; '.'
00000000000199c5         db  0x41 ; 'A'
00000000000199c6         db  0x0e ; '.'
00000000000199c7         db  0x08 ; '.'
00000000000199c8         db  0x42 ; 'B'
00000000000199c9         db  0x0b ; '.'
00000000000199ca         db  0x72 ; 'r'
00000000000199cb         db  0x0a ; '.'
00000000000199cc         db  0x0e ; '.'
00000000000199cd         db  0x18 ; '.'
00000000000199ce         db  0x43 ; 'C'
00000000000199cf         db  0x0e ; '.'
00000000000199d0         db  0x10 ; '.'
00000000000199d1         db  0x41 ; 'A'
00000000000199d2         db  0x0e ; '.'
00000000000199d3         db  0x08 ; '.'
00000000000199d4         db  0x4a ; 'J'
00000000000199d5         db  0x0b ; '.'
00000000000199d6         db  0x7e ; '~'
00000000000199d7         db  0x0a ; '.'
00000000000199d8         db  0x0e ; '.'
00000000000199d9         db  0x18 ; '.'
00000000000199da         db  0x41 ; 'A'
00000000000199db         db  0x0e ; '.'
00000000000199dc         db  0x10 ; '.'
00000000000199dd         db  0x41 ; 'A'
00000000000199de         db  0x0e ; '.'
00000000000199df         db  0x08 ; '.'
00000000000199e0         db  0x48 ; 'H'
00000000000199e1         db  0x0b ; '.'
00000000000199e2         db  0x00 ; '.'
00000000000199e3         db  0x00 ; '.'
00000000000199e4         dd         0x00000014                                  ; Length of the record
00000000000199e8         dd         0x00001c48                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
00000000000199ec         db         0xe4, 0x64, 2 dup (0xff)                    ; begin 0xfed0
00000000000199f0         db         0xa9, 3 dup (0x00)                          ; length 0xa9 (end at 0xff79)
00000000000199f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000199f5         db  0x02 ; '.'
00000000000199f6         db  0x94 ; '.'
00000000000199f7         db  0x0e ; '.'
00000000000199f8         db  0x10 ; '.'
00000000000199f9         db  0x54 ; 'T'
00000000000199fa         db  0x0e ; '.'
00000000000199fb         db  0x08 ; '.'
00000000000199fc         dd         0x00000010                                  ; Length of the record
0000000000019a00         dd         0x00001c60                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019a04         db         0x7c, 0x65, 2 dup (0xff)                    ; begin 0xff80
0000000000019a08         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xff8a)
0000000000019a0c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019a0d         align      16
0000000000019a10         dd         0x00000044                                  ; Length of the record
0000000000019a14         dd         0x00001c74                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019a18         db         0x78, 0x65, 2 dup (0xff)                    ; begin 0xff90
0000000000019a1c         db         0x5e, 0x04, 2 dup (0x00)                    ; length 0x45e (end at 0x103ee)
0000000000019a20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019a21         db  0x42 ; 'B'
0000000000019a22         db  0x0e ; '.'
0000000000019a23         db  0x10 ; '.'
0000000000019a24         db  0x8e ; '.'
0000000000019a25         db  0x02 ; '.'
0000000000019a26         db  0x42 ; 'B'
0000000000019a27         db  0x0e ; '.'
0000000000019a28         db  0x18 ; '.'
0000000000019a29         db  0x8d ; '.'
0000000000019a2a         db  0x03 ; '.'
0000000000019a2b         db  0x42 ; 'B'
0000000000019a2c         db  0x0e ; '.'
0000000000019a2d         db  0x20 ; ' '
0000000000019a2e         db  0x8c ; '.'
0000000000019a2f         db  0x04 ; '.'
0000000000019a30         db  0x41 ; 'A'
0000000000019a31         db  0x0e ; '.'
0000000000019a32         db  0x28 ; '('
0000000000019a33         db  0x86 ; '.'
0000000000019a34         db  0x05 ; '.'
0000000000019a35         db  0x44 ; 'D'
0000000000019a36         db  0x0e ; '.'
0000000000019a37         db  0x30 ; '0'
0000000000019a38         db  0x83 ; '.'
0000000000019a39         db  0x06 ; '.'
0000000000019a3a         db  0x49 ; 'I'
0000000000019a3b         db  0x0e ; '.'
0000000000019a3c         db  0xc0 ; '.'
0000000000019a3d         db  0x02 ; '.'
0000000000019a3e         db  0x03 ; '.'
0000000000019a3f         db  0x23 ; '#'
0000000000019a40         db  0x03 ; '.'
0000000000019a41         db  0x0a ; '.'
0000000000019a42         db  0x0e ; '.'
0000000000019a43         db  0x30 ; '0'
0000000000019a44         db  0x41 ; 'A'
0000000000019a45         db  0x0e ; '.'
0000000000019a46         db  0x28 ; '('
0000000000019a47         db  0x41 ; 'A'
0000000000019a48         db  0x0e ; '.'
0000000000019a49         db  0x20 ; ' '
0000000000019a4a         db  0x42 ; 'B'
0000000000019a4b         db  0x0e ; '.'
0000000000019a4c         db  0x18 ; '.'
0000000000019a4d         db  0x42 ; 'B'
0000000000019a4e         db  0x0e ; '.'
0000000000019a4f         db  0x10 ; '.'
0000000000019a50         db  0x42 ; 'B'
0000000000019a51         db  0x0e ; '.'
0000000000019a52         db  0x08 ; '.'
0000000000019a53         db  0x41 ; 'A'
0000000000019a54         db  0x0b ; '.'
0000000000019a55         db  0x00 ; '.'
0000000000019a56         db  0x00 ; '.'
0000000000019a57         db  0x00 ; '.'
0000000000019a58         dd         0x00000010                                  ; Length of the record
0000000000019a5c         dd         0x00001cbc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019a60         db         0x90, 0x69, 2 dup (0xff)                    ; begin 0x103f0
0000000000019a64         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x10400)
0000000000019a68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019a69         align      4
0000000000019a6c         dd         0x00000038                                  ; Length of the record
0000000000019a70         dd         0x00001cd0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019a74         db         0x8c, 0x69, 2 dup (0xff)                    ; begin 0x10400
0000000000019a78         db         0x5e, 0x02, 2 dup (0x00)                    ; length 0x25e (end at 0x1065e)
0000000000019a7c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019a7d         db  0x42 ; 'B'
0000000000019a7e         db  0x0e ; '.'
0000000000019a7f         db  0x10 ; '.'
0000000000019a80         db  0x8c ; '.'
0000000000019a81         db  0x02 ; '.'
0000000000019a82         db  0x41 ; 'A'
0000000000019a83         db  0x0e ; '.'
0000000000019a84         db  0x18 ; '.'
0000000000019a85         db  0x86 ; '.'
0000000000019a86         db  0x03 ; '.'
0000000000019a87         db  0x44 ; 'D'
0000000000019a88         db  0x0e ; '.'
0000000000019a89         db  0x20 ; ' '
0000000000019a8a         db  0x83 ; '.'
0000000000019a8b         db  0x04 ; '.'
0000000000019a8c         db  0x47 ; 'G'
0000000000019a8d         db  0x0e ; '.'
0000000000019a8e         db  0xf0 ; '.'
0000000000019a8f         db  0x01 ; '.'
0000000000019a90         db  0x03 ; '.'
0000000000019a91         db  0x0a ; '.'
0000000000019a92         db  0x01 ; '.'
0000000000019a93         db  0x0a ; '.'
0000000000019a94         db  0x0e ; '.'
0000000000019a95         db  0x20 ; ' '
0000000000019a96         db  0x41 ; 'A'
0000000000019a97         db  0x0e ; '.'
0000000000019a98         db  0x18 ; '.'
0000000000019a99         db  0x41 ; 'A'
0000000000019a9a         db  0x0e ; '.'
0000000000019a9b         db  0x10 ; '.'
0000000000019a9c         db  0x42 ; 'B'
0000000000019a9d         db  0x0e ; '.'
0000000000019a9e         db  0x08 ; '.'
0000000000019a9f         db  0x44 ; 'D'
0000000000019aa0         db  0x0b ; '.'
0000000000019aa1         db  0x00 ; '.'
0000000000019aa2         db  0x00 ; '.'
0000000000019aa3         db  0x00 ; '.'
0000000000019aa4         db  0x00 ; '.'
0000000000019aa5         db  0x00 ; '.'
0000000000019aa6         db  0x00 ; '.'
0000000000019aa7         db  0x00 ; '.'
0000000000019aa8         dd         0x00000110                                  ; Length of the record
0000000000019aac         dd         0x00001d0c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019ab0         db         0xb0, 0x6b, 2 dup (0xff)                    ; begin 0x10660
0000000000019ab4         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x10a77)
0000000000019ab8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019ab9         db  0x42 ; 'B'
0000000000019aba         db  0x0e ; '.'
0000000000019abb         db  0x10 ; '.'
0000000000019abc         db  0x8f ; '.'
0000000000019abd         db  0x02 ; '.'
0000000000019abe         db  0x42 ; 'B'
0000000000019abf         db  0x0e ; '.'
0000000000019ac0         db  0x18 ; '.'
0000000000019ac1         db  0x8e ; '.'
0000000000019ac2         db  0x03 ; '.'
0000000000019ac3         db  0x42 ; 'B'
0000000000019ac4         db  0x0e ; '.'
0000000000019ac5         db  0x20 ; ' '
0000000000019ac6         db  0x8d ; '.'
0000000000019ac7         db  0x04 ; '.'
0000000000019ac8         db  0x42 ; 'B'
0000000000019ac9         db  0x0e ; '.'
0000000000019aca         db  0x28 ; '('
0000000000019acb         db  0x8c ; '.'
0000000000019acc         db  0x05 ; '.'
0000000000019acd         db  0x44 ; 'D'
0000000000019ace         db  0x0e ; '.'
0000000000019acf         db  0x30 ; '0'
0000000000019ad0         db  0x86 ; '.'
0000000000019ad1         db  0x06 ; '.'
0000000000019ad2         db  0x41 ; 'A'
0000000000019ad3         db  0x0e ; '.'
0000000000019ad4         db  0x38 ; '8'
0000000000019ad5         db  0x83 ; '.'
0000000000019ad6         db  0x07 ; '.'
0000000000019ad7         db  0x4a ; 'J'
0000000000019ad8         db  0x0e ; '.'
0000000000019ad9         db  0x60 ; '`'
0000000000019ada         db  0x02 ; '.'
0000000000019adb         db  0xdd ; '.'
0000000000019adc         db  0x0e ; '.'
0000000000019add         db  0x68 ; 'h'
0000000000019ade         db  0x57 ; 'W'
0000000000019adf         db  0x0e ; '.'
0000000000019ae0         db  0x70 ; 'p'
0000000000019ae1         db  0x42 ; 'B'
0000000000019ae2         db  0x0e ; '.'
0000000000019ae3         db  0x78 ; 'x'
0000000000019ae4         db  0x42 ; 'B'
0000000000019ae5         db  0x0e ; '.'
0000000000019ae6         db  0x80 ; '.'
0000000000019ae7         db  0x01 ; '.'
0000000000019ae8         db  0x42 ; 'B'
0000000000019ae9         db  0x0e ; '.'
0000000000019aea         db  0x88 ; '.'
0000000000019aeb         db  0x01 ; '.'
0000000000019aec         db  0x42 ; 'B'
0000000000019aed         db  0x0e ; '.'
0000000000019aee         db  0x90 ; '.'
0000000000019aef         db  0x01 ; '.'
0000000000019af0         db  0x53 ; 'S'
0000000000019af1         db  0x0e ; '.'
0000000000019af2         db  0x60 ; '`'
0000000000019af3         db  0x44 ; 'D'
0000000000019af4         db  0x0a ; '.'
0000000000019af5         db  0x0e ; '.'
0000000000019af6         db  0x38 ; '8'
0000000000019af7         db  0x41 ; 'A'
0000000000019af8         db  0x0e ; '.'
0000000000019af9         db  0x30 ; '0'
0000000000019afa         db  0x41 ; 'A'
0000000000019afb         db  0x0e ; '.'
0000000000019afc         db  0x28 ; '('
0000000000019afd         db  0x42 ; 'B'
0000000000019afe         db  0x0e ; '.'
0000000000019aff         db  0x20 ; ' '
0000000000019b00         db  0x42 ; 'B'
0000000000019b01         db  0x0e ; '.'
0000000000019b02         db  0x18 ; '.'
0000000000019b03         db  0x42 ; 'B'
0000000000019b04         db  0x0e ; '.'
0000000000019b05         db  0x10 ; '.'
0000000000019b06         db  0x42 ; 'B'
0000000000019b07         db  0x0e ; '.'
0000000000019b08         db  0x08 ; '.'
0000000000019b09         db  0x44 ; 'D'
0000000000019b0a         db  0x0b ; '.'
0000000000019b0b         db  0x02 ; '.'
0000000000019b0c         db  0x78 ; 'x'
0000000000019b0d         db  0x0a ; '.'
0000000000019b0e         db  0x0e ; '.'
0000000000019b0f         db  0x68 ; 'h'
0000000000019b10         db  0x48 ; 'H'
0000000000019b11         db  0x0b ; '.'
0000000000019b12         db  0x5a ; 'Z'
0000000000019b13         db  0x0a ; '.'
0000000000019b14         db  0x0e ; '.'
0000000000019b15         db  0x38 ; '8'
0000000000019b16         db  0x47 ; 'G'
0000000000019b17         db  0x0e ; '.'
0000000000019b18         db  0x30 ; '0'
0000000000019b19         db  0x41 ; 'A'
0000000000019b1a         db  0x0e ; '.'
0000000000019b1b         db  0x28 ; '('
0000000000019b1c         db  0x42 ; 'B'
0000000000019b1d         db  0x0e ; '.'
0000000000019b1e         db  0x20 ; ' '
0000000000019b1f         db  0x42 ; 'B'
0000000000019b20         db  0x0e ; '.'
0000000000019b21         db  0x18 ; '.'
0000000000019b22         db  0x42 ; 'B'
0000000000019b23         db  0x0e ; '.'
0000000000019b24         db  0x10 ; '.'
0000000000019b25         db  0x42 ; 'B'
0000000000019b26         db  0x0e ; '.'
0000000000019b27         db  0x08 ; '.'
0000000000019b28         db  0x56 ; 'V'
0000000000019b29         db  0x0b ; '.'
0000000000019b2a         db  0x5e ; '^'
0000000000019b2b         db  0x0a ; '.'
0000000000019b2c         db  0x0e ; '.'
0000000000019b2d         db  0x38 ; '8'
0000000000019b2e         db  0x52 ; 'R'
0000000000019b2f         db  0x0e ; '.'
0000000000019b30         db  0x30 ; '0'
0000000000019b31         db  0x41 ; 'A'
0000000000019b32         db  0x0e ; '.'
0000000000019b33         db  0x28 ; '('
0000000000019b34         db  0x42 ; 'B'
0000000000019b35         db  0x0e ; '.'
0000000000019b36         db  0x20 ; ' '
0000000000019b37         db  0x42 ; 'B'
0000000000019b38         db  0x0e ; '.'
0000000000019b39         db  0x18 ; '.'
0000000000019b3a         db  0x42 ; 'B'
0000000000019b3b         db  0x0e ; '.'
0000000000019b3c         db  0x10 ; '.'
0000000000019b3d         db  0x42 ; 'B'
0000000000019b3e         db  0x0e ; '.'
0000000000019b3f         db  0x08 ; '.'
0000000000019b40         db  0x4f ; 'O'
0000000000019b41         db  0x0b ; '.'
0000000000019b42         db  0x62 ; 'b'
0000000000019b43         db  0x0a ; '.'
0000000000019b44         db  0x0e ; '.'
0000000000019b45         db  0x38 ; '8'
0000000000019b46         db  0x50 ; 'P'
0000000000019b47         db  0x0e ; '.'
0000000000019b48         db  0x30 ; '0'
0000000000019b49         db  0x41 ; 'A'
0000000000019b4a         db  0x0e ; '.'
0000000000019b4b         db  0x28 ; '('
0000000000019b4c         db  0x42 ; 'B'
0000000000019b4d         db  0x0e ; '.'
0000000000019b4e         db  0x20 ; ' '
0000000000019b4f         db  0x42 ; 'B'
0000000000019b50         db  0x0e ; '.'
0000000000019b51         db  0x18 ; '.'
0000000000019b52         db  0x42 ; 'B'
0000000000019b53         db  0x0e ; '.'
0000000000019b54         db  0x10 ; '.'
0000000000019b55         db  0x42 ; 'B'
0000000000019b56         db  0x0e ; '.'
0000000000019b57         db  0x08 ; '.'
0000000000019b58         db  0x55 ; 'U'
0000000000019b59         db  0x0b ; '.'
0000000000019b5a         db  0x66 ; 'f'
0000000000019b5b         db  0x0e ; '.'
0000000000019b5c         db  0x68 ; 'h'
0000000000019b5d         db  0x42 ; 'B'
0000000000019b5e         db  0x0e ; '.'
0000000000019b5f         db  0x70 ; 'p'
0000000000019b60         db  0x5c ; '\'
0000000000019b61         db  0x0e ; '.'
0000000000019b62         db  0x68 ; 'h'
0000000000019b63         db  0x41 ; 'A'
0000000000019b64         db  0x0e ; '.'
0000000000019b65         db  0x60 ; '`'
0000000000019b66         db  0x44 ; 'D'
0000000000019b67         db  0x0a ; '.'
0000000000019b68         db  0x0e ; '.'
0000000000019b69         db  0x38 ; '8'
0000000000019b6a         db  0x41 ; 'A'
0000000000019b6b         db  0x0e ; '.'
0000000000019b6c         db  0x30 ; '0'
0000000000019b6d         db  0x41 ; 'A'
0000000000019b6e         db  0x0e ; '.'
0000000000019b6f         db  0x28 ; '('
0000000000019b70         db  0x42 ; 'B'
0000000000019b71         db  0x0e ; '.'
0000000000019b72         db  0x20 ; ' '
0000000000019b73         db  0x42 ; 'B'
0000000000019b74         db  0x0e ; '.'
0000000000019b75         db  0x18 ; '.'
0000000000019b76         db  0x42 ; 'B'
0000000000019b77         db  0x0e ; '.'
0000000000019b78         db  0x10 ; '.'
0000000000019b79         db  0x42 ; 'B'
0000000000019b7a         db  0x0e ; '.'
0000000000019b7b         db  0x08 ; '.'
0000000000019b7c         db  0x45 ; 'E'
0000000000019b7d         db  0x0b ; '.'
0000000000019b7e         db  0x68 ; 'h'
0000000000019b7f         db  0x0a ; '.'
0000000000019b80         db  0x0e ; '.'
0000000000019b81         db  0x68 ; 'h'
0000000000019b82         db  0x48 ; 'H'
0000000000019b83         db  0x0b ; '.'
0000000000019b84         db  0x72 ; 'r'
0000000000019b85         db  0x0e ; '.'
0000000000019b86         db  0x68 ; 'h'
0000000000019b87         db  0x45 ; 'E'
0000000000019b88         db  0x0e ; '.'
0000000000019b89         db  0x70 ; 'p'
0000000000019b8a         db  0x42 ; 'B'
0000000000019b8b         db  0x0e ; '.'
0000000000019b8c         db  0x78 ; 'x'
0000000000019b8d         db  0x42 ; 'B'
0000000000019b8e         db  0x0e ; '.'
0000000000019b8f         db  0x80 ; '.'
0000000000019b90         db  0x01 ; '.'
0000000000019b91         db  0x5e ; '^'
0000000000019b92         db  0x0e ; '.'
0000000000019b93         db  0x60 ; '`'
0000000000019b94         db  0x44 ; 'D'
0000000000019b95         db  0x0a ; '.'
0000000000019b96         db  0x0e ; '.'
0000000000019b97         db  0x38 ; '8'
0000000000019b98         db  0x41 ; 'A'
0000000000019b99         db  0x0e ; '.'
0000000000019b9a         db  0x30 ; '0'
0000000000019b9b         db  0x41 ; 'A'
0000000000019b9c         db  0x0e ; '.'
0000000000019b9d         db  0x28 ; '('
0000000000019b9e         db  0x42 ; 'B'
0000000000019b9f         db  0x0e ; '.'
0000000000019ba0         db  0x20 ; ' '
0000000000019ba1         db  0x42 ; 'B'
0000000000019ba2         db  0x0e ; '.'
0000000000019ba3         db  0x18 ; '.'
0000000000019ba4         db  0x42 ; 'B'
0000000000019ba5         db  0x0e ; '.'
0000000000019ba6         db  0x10 ; '.'
0000000000019ba7         db  0x42 ; 'B'
0000000000019ba8         db  0x0e ; '.'
0000000000019ba9         db  0x08 ; '.'
0000000000019baa         db  0x41 ; 'A'
0000000000019bab         db  0x0b ; '.'
0000000000019bac         db  0x79 ; 'y'
0000000000019bad         db  0x0a ; '.'
0000000000019bae         db  0x0e ; '.'
0000000000019baf         db  0x68 ; 'h'
0000000000019bb0         db  0x42 ; 'B'
0000000000019bb1         db  0x0e ; '.'
0000000000019bb2         db  0x70 ; 'p'
0000000000019bb3         db  0x42 ; 'B'
0000000000019bb4         db  0x0e ; '.'
0000000000019bb5         db  0x78 ; 'x'
0000000000019bb6         db  0x42 ; 'B'
0000000000019bb7         db  0x0e ; '.'
0000000000019bb8         db  0x80 ; '.'
0000000000019bb9         db  0x01 ; '.'
0000000000019bba         db  0x51 ; 'Q'
0000000000019bbb         db  0x0b ; '.'
0000000000019bbc         dd         0x00000010                                  ; Length of the record
0000000000019bc0         dd         0x00001e20                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019bc4         db         0xbc, 0x6e, 2 dup (0xff)                    ; begin 0x10a80
0000000000019bc8         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x10aa0)
0000000000019bcc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019bcd         align      16
0000000000019bd0         dd         0x00000018                                  ; Length of the record
0000000000019bd4         dd         0x00001e34                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019bd8         db         0xc8, 0x6e, 2 dup (0xff)                    ; begin 0x10aa0
0000000000019bdc         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x10b18)
0000000000019be0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019be1         db  0x44 ; 'D'
0000000000019be2         db  0x0e ; '.'
0000000000019be3         db  0x70 ; 'p'
0000000000019be4         db  0x02 ; '.'
0000000000019be5         db  0x60 ; '`'
0000000000019be6         db  0x0a ; '.'
0000000000019be7         db  0x0e ; '.'
0000000000019be8         db  0x08 ; '.'
0000000000019be9         db  0x41 ; 'A'
0000000000019bea         db  0x0b ; '.'
0000000000019beb         db  0x00 ; '.'
0000000000019bec         dd         0x00000028                                  ; Length of the record
0000000000019bf0         dd         0x00001e50                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019bf4         db         0x2c, 0x6f, 2 dup (0xff)                    ; begin 0x10b20
0000000000019bf8         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x10bf5)
0000000000019bfc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019bfd         db  0x41 ; 'A'
0000000000019bfe         db  0x0e ; '.'
0000000000019bff         db  0x10 ; '.'
0000000000019c00         db  0x86 ; '.'
0000000000019c01         db  0x02 ; '.'
0000000000019c02         db  0x41 ; 'A'
0000000000019c03         db  0x0e ; '.'
0000000000019c04         db  0x18 ; '.'
0000000000019c05         db  0x83 ; '.'
0000000000019c06         db  0x03 ; '.'
0000000000019c07         db  0x50 ; 'P'
0000000000019c08         db  0x0e ; '.'
0000000000019c09         db  0xd0 ; '.'
0000000000019c0a         db  0x01 ; '.'
0000000000019c0b         db  0x02 ; '.'
0000000000019c0c         db  0xab ; '.'
0000000000019c0d         db  0x0a ; '.'
0000000000019c0e         db  0x0e ; '.'
0000000000019c0f         db  0x18 ; '.'
0000000000019c10         db  0x41 ; 'A'
0000000000019c11         db  0x0e ; '.'
0000000000019c12         db  0x10 ; '.'
0000000000019c13         db  0x41 ; 'A'
0000000000019c14         db  0x0e ; '.'
0000000000019c15         db  0x08 ; '.'
0000000000019c16         db  0x41 ; 'A'
0000000000019c17         db  0x0b ; '.'
0000000000019c18         dd         0x0000001c                                  ; Length of the record
0000000000019c1c         dd         0x00001e7c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019c20         db         0xe0, 0x6f, 2 dup (0xff)                    ; begin 0x10c00
0000000000019c24         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x10c80)
0000000000019c28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c29         db  0x41 ; 'A'
0000000000019c2a         db  0x0e ; '.'
0000000000019c2b         db  0x10 ; '.'
0000000000019c2c         db  0x83 ; '.'
0000000000019c2d         db  0x02 ; '.'
0000000000019c2e         db  0x02 ; '.'
0000000000019c2f         db  0x7a ; 'z'
0000000000019c30         db  0x0e ; '.'
0000000000019c31         db  0x08 ; '.'
0000000000019c32         db  0x00 ; '.'
0000000000019c33         db  0x00 ; '.'
0000000000019c34         db  0x00 ; '.'
0000000000019c35         db  0x00 ; '.'
0000000000019c36         db  0x00 ; '.'
0000000000019c37         db  0x00 ; '.'
0000000000019c38         dd         0x00000014                                  ; Length of the record
0000000000019c3c         dd         0x00001e9c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019c40         db         0x40, 0x70, 2 dup (0xff)                    ; begin 0x10c80
0000000000019c44         db         0x38, 3 dup (0x00)                          ; length 0x38 (end at 0x10cb8)
0000000000019c48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c49         db  0x5c ; '\'
0000000000019c4a         db  0x0e ; '.'
0000000000019c4b         db  0x10 ; '.'
0000000000019c4c         db  0x5b ; '['
0000000000019c4d         db  0x0e ; '.'
0000000000019c4e         db  0x08 ; '.'
0000000000019c4f         db  0x00 ; '.'
0000000000019c50         dd         0x00000018                                  ; Length of the record
0000000000019c54         dd         0x00001eb4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019c58         db         0x68, 0x70, 2 dup (0xff)                    ; begin 0x10cc0
0000000000019c5c         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x10cda)
0000000000019c60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c61         db  0x41 ; 'A'
0000000000019c62         db  0x0e ; '.'
0000000000019c63         db  0x10 ; '.'
0000000000019c64         db  0x83 ; '.'
0000000000019c65         db  0x02 ; '.'
0000000000019c66         db  0x53 ; 'S'
0000000000019c67         db  0x0a ; '.'
0000000000019c68         db  0x0e ; '.'
0000000000019c69         db  0x08 ; '.'
0000000000019c6a         db  0x41 ; 'A'
0000000000019c6b         db  0x0b ; '.'
0000000000019c6c         dd         0x00000010                                  ; Length of the record
0000000000019c70         dd         0x00001ed0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019c74         db         0x6c, 0x70, 2 dup (0xff)                    ; begin 0x10ce0
0000000000019c78         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x10d04)
0000000000019c7c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c7d         db  0x5f ; '_'
0000000000019c7e         db  0x0e ; '.'
0000000000019c7f         db  0x10 ; '.'
0000000000019c80         dd         0x00000010                                  ; Length of the record
0000000000019c84         dd         0x00001ee4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019c88         db         0x88, 0x70, 2 dup (0xff)                    ; begin 0x10d10
0000000000019c8c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x10d12)
0000000000019c90         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c91         align      4
0000000000019c94         dd         0x00000020                                  ; Length of the record
0000000000019c98         dd         0x00001ef8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019c9c         db         0x84, 0x70, 2 dup (0xff)                    ; begin 0x10d20
0000000000019ca0         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x10d56)
0000000000019ca4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019ca5         db  0x44 ; 'D'
0000000000019ca6         db  0x0e ; '.'
0000000000019ca7         db  0x10 ; '.'
0000000000019ca8         db  0x83 ; '.'
0000000000019ca9         db  0x02 ; '.'
0000000000019caa         db  0x5d ; ']'
0000000000019cab         db  0x0a ; '.'
0000000000019cac         db  0x0e ; '.'
0000000000019cad         db  0x08 ; '.'
0000000000019cae         db  0x47 ; 'G'
0000000000019caf         db  0x0b ; '.'
0000000000019cb0         db  0x48 ; 'H'
0000000000019cb1         db  0x0a ; '.'
0000000000019cb2         db  0x0e ; '.'
0000000000019cb3         db  0x08 ; '.'
0000000000019cb4         db  0x41 ; 'A'
0000000000019cb5         db  0x0b ; '.'
0000000000019cb6         db  0x00 ; '.'
0000000000019cb7         db  0x00 ; '.'
0000000000019cb8         dd         0x00000010                                  ; Length of the record
0000000000019cbc         dd         0x00001f1c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019cc0         db         0xa0, 0x70, 2 dup (0xff)                    ; begin 0x10d60
0000000000019cc4         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x10d84)
0000000000019cc8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019cc9         db  0x5f ; '_'
0000000000019cca         db  0x0e ; '.'
0000000000019ccb         db  0x10 ; '.'
0000000000019ccc         dd         0x00000014                                  ; Length of the record
0000000000019cd0         dd         0x00001f30                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019cd4         db         0xbc, 0x70, 2 dup (0xff)                    ; begin 0x10d90
0000000000019cd8         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x10e12)
0000000000019cdc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019cdd         db  0x02 ; '.'
0000000000019cde         db  0x5f ; '_'
0000000000019cdf         db  0x0e ; '.'
0000000000019ce0         db  0x10 ; '.'
0000000000019ce1         db  0x49 ; 'I'
0000000000019ce2         db  0x0e ; '.'
0000000000019ce3         db  0x08 ; '.'
0000000000019ce4         dd         0x00000014                                  ; Length of the record
0000000000019ce8         dd         0x00001f48                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019cec         db         0x34, 0x71, 2 dup (0xff)                    ; begin 0x10e20
0000000000019cf0         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x10e6a)
0000000000019cf4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019cf5         db  0x02 ; '.'
0000000000019cf6         db  0x45 ; 'E'
0000000000019cf7         db  0x0e ; '.'
0000000000019cf8         db  0x10 ; '.'
0000000000019cf9         db  0x00 ; '.'
0000000000019cfa         db  0x00 ; '.'
0000000000019cfb         db  0x00 ; '.'
0000000000019cfc         dd         0x00000018                                  ; Length of the record
0000000000019d00         dd         0x00001f60                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019d04         db         0x6c, 0x71, 2 dup (0xff)                    ; begin 0x10e70
0000000000019d08         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x10e87)
0000000000019d0c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d0d         db  0x41 ; 'A'
0000000000019d0e         db  0x0e ; '.'
0000000000019d0f         db  0x10 ; '.'
0000000000019d10         db  0x83 ; '.'
0000000000019d11         db  0x02 ; '.'
0000000000019d12         db  0x51 ; 'Q'
0000000000019d13         db  0x0e ; '.'
0000000000019d14         db  0x08 ; '.'
0000000000019d15         db  0x00 ; '.'
0000000000019d16         db  0x00 ; '.'
0000000000019d17         db  0x00 ; '.'
0000000000019d18         dd         0x00000018                                  ; Length of the record
0000000000019d1c         dd         0x00001f7c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019d20         db         0x70, 0x71, 2 dup (0xff)                    ; begin 0x10e90
0000000000019d24         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x10ebe)
0000000000019d28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d29         db  0x47 ; 'G'
0000000000019d2a         db  0x0e ; '.'
0000000000019d2b         db  0x10 ; '.'
0000000000019d2c         db  0x61 ; 'a'
0000000000019d2d         db  0x0a ; '.'
0000000000019d2e         db  0x0e ; '.'
0000000000019d2f         db  0x08 ; '.'
0000000000019d30         db  0x41 ; 'A'
0000000000019d31         db  0x0b ; '.'
0000000000019d32         db  0x00 ; '.'
0000000000019d33         db  0x00 ; '.'
0000000000019d34         dd         0x00000024                                  ; Length of the record
0000000000019d38         dd         0x00001f98                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019d3c         db         0x84, 0x71, 2 dup (0xff)                    ; begin 0x10ec0
0000000000019d40         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x10ee8)
0000000000019d44         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d45         db  0x41 ; 'A'
0000000000019d46         db  0x0e ; '.'
0000000000019d47         db  0x10 ; '.'
0000000000019d48         db  0x86 ; '.'
0000000000019d49         db  0x02 ; '.'
0000000000019d4a         db  0x41 ; 'A'
0000000000019d4b         db  0x0e ; '.'
0000000000019d4c         db  0x18 ; '.'
0000000000019d4d         db  0x83 ; '.'
0000000000019d4e         db  0x03 ; '.'
0000000000019d4f         db  0x4d ; 'M'
0000000000019d50         db  0x0e ; '.'
0000000000019d51         db  0x20 ; ' '
0000000000019d52         db  0x49 ; 'I'
0000000000019d53         db  0x0e ; '.'
0000000000019d54         db  0x18 ; '.'
0000000000019d55         db  0x47 ; 'G'
0000000000019d56         db  0x0e ; '.'
0000000000019d57         db  0x10 ; '.'
0000000000019d58         db  0x41 ; 'A'
0000000000019d59         db  0x0e ; '.'
0000000000019d5a         db  0x08 ; '.'
0000000000019d5b         db  0x00 ; '.'
0000000000019d5c         dd         0x00000018                                  ; Length of the record
0000000000019d60         dd         0x00001fc0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019d64         db         0x8c, 0x71, 2 dup (0xff)                    ; begin 0x10ef0
0000000000019d68         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x10f03)
0000000000019d6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d6d         db  0x41 ; 'A'
0000000000019d6e         db  0x0e ; '.'
0000000000019d6f         db  0x10 ; '.'
0000000000019d70         db  0x83 ; '.'
0000000000019d71         db  0x02 ; '.'
0000000000019d72         db  0x50 ; 'P'
0000000000019d73         db  0x0e ; '.'
0000000000019d74         db  0x08 ; '.'
0000000000019d75         db  0x00 ; '.'
0000000000019d76         db  0x00 ; '.'
0000000000019d77         db  0x00 ; '.'
0000000000019d78         dd         0x00000014                                  ; Length of the record
0000000000019d7c         dd         0x00001fdc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019d80         db         0x90, 0x71, 2 dup (0xff)                    ; begin 0x10f10
0000000000019d84         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x10f45)
0000000000019d88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d89         db  0x4b ; 'K'
0000000000019d8a         db  0x0e ; '.'
0000000000019d8b         db  0x10 ; '.'
0000000000019d8c         db  0x00 ; '.'
0000000000019d8d         db  0x00 ; '.'
0000000000019d8e         db  0x00 ; '.'
0000000000019d8f         db  0x00 ; '.'
0000000000019d90         dd         0x00000018                                  ; Length of the record
0000000000019d94         dd         0x00001ff4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019d98         db         0xb8, 0x71, 2 dup (0xff)                    ; begin 0x10f50
0000000000019d9c         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0x10f9f)
0000000000019da0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019da1         db  0x44 ; 'D'
0000000000019da2         db  0x0e ; '.'
0000000000019da3         db  0x10 ; '.'
0000000000019da4         db  0x54 ; 'T'
0000000000019da5         db  0x0a ; '.'
0000000000019da6         db  0x0e ; '.'
0000000000019da7         db  0x08 ; '.'
0000000000019da8         db  0x48 ; 'H'
0000000000019da9         db  0x0b ; '.'
0000000000019daa         db  0x00 ; '.'
0000000000019dab         db  0x00 ; '.'
0000000000019dac         dd         0x00000010                                  ; Length of the record
0000000000019db0         dd         0x00002010                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019db4         db         0xec, 0x71, 2 dup (0xff)                    ; begin 0x10fa0
0000000000019db8         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0x10fc9)
0000000000019dbc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019dbd         align      64
0000000000019dc0         dd         0x00000024                                  ; Length of the record
0000000000019dc4         dd         0x00002024                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019dc8         db         0x08, 0x72, 2 dup (0xff)                    ; begin 0x10fd0
0000000000019dcc         db         0x97, 3 dup (0x00)                          ; length 0x97 (end at 0x11067)
0000000000019dd0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019dd1         db  0x41 ; 'A'
0000000000019dd2         db  0x0e ; '.'
0000000000019dd3         db  0x10 ; '.'
0000000000019dd4         db  0x83 ; '.'
0000000000019dd5         db  0x02 ; '.'
0000000000019dd6         db  0x4b ; 'K'
0000000000019dd7         db  0x0e ; '.'
0000000000019dd8         db  0x30 ; '0'
0000000000019dd9         db  0x02 ; '.'
0000000000019dda         db  0x76 ; 'v'
0000000000019ddb         db  0x0a ; '.'
0000000000019ddc         db  0x0e ; '.'
0000000000019ddd         db  0x10 ; '.'
0000000000019dde         db  0x41 ; 'A'
0000000000019ddf         db  0x0e ; '.'
0000000000019de0         db  0x08 ; '.'
0000000000019de1         db  0x45 ; 'E'
0000000000019de2         db  0x0b ; '.'
0000000000019de3         db  0x00 ; '.'
0000000000019de4         db  0x00 ; '.'
0000000000019de5         db  0x00 ; '.'
0000000000019de6         db  0x00 ; '.'
0000000000019de7         db  0x00 ; '.'
0000000000019de8         dd         0x0000001c                                  ; Length of the record
0000000000019dec         dd         0x0000204c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019df0         db         0x80, 0x72, 2 dup (0xff)                    ; begin 0x11070
0000000000019df4         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x110b0)
0000000000019df8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019df9         db  0x44 ; 'D'
0000000000019dfa         db  0x0e ; '.'
0000000000019dfb         db  0x10 ; '.'
0000000000019dfc         db  0x83 ; '.'
0000000000019dfd         db  0x02 ; '.'
0000000000019dfe         db  0x5a ; 'Z'
0000000000019dff         db  0x0a ; '.'
0000000000019e00         db  0x0e ; '.'
0000000000019e01         db  0x08 ; '.'
0000000000019e02         db  0x4a ; 'J'
0000000000019e03         db  0x0b ; '.'
0000000000019e04         db  0x53 ; 'S'
0000000000019e05         db  0x0e ; '.'
0000000000019e06         db  0x08 ; '.'
0000000000019e07         db  0x00 ; '.'
0000000000019e08         dd         0x00000014                                  ; Length of the record
0000000000019e0c         dd         0x0000206c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019e10         db         0xa0, 0x72, 2 dup (0xff)                    ; begin 0x110b0
0000000000019e14         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0x110d9)
0000000000019e18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019e19         align      32
0000000000019e20         dd         0x0000002c                                  ; Length of the record
0000000000019e24         dd         0x00002084                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019e28         db         0xb8, 0x72, 2 dup (0xff)                    ; begin 0x110e0
0000000000019e2c         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x11137)
0000000000019e30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019e31         db  0x63 ; 'c'
0000000000019e32         db  0x0e ; '.'
0000000000019e33         db  0x10 ; '.'
0000000000019e34         db  0x8c ; '.'
0000000000019e35         db  0x02 ; '.'
0000000000019e36         db  0x41 ; 'A'
0000000000019e37         db  0x0e ; '.'
0000000000019e38         db  0x18 ; '.'
0000000000019e39         db  0x86 ; '.'
0000000000019e3a         db  0x03 ; '.'
0000000000019e3b         db  0x44 ; 'D'
0000000000019e3c         db  0x0e ; '.'
0000000000019e3d         db  0x20 ; ' '
0000000000019e3e         db  0x83 ; '.'
0000000000019e3f         db  0x04 ; '.'
0000000000019e40         db  0x6b ; 'k'
0000000000019e41         db  0x0e ; '.'
0000000000019e42         db  0x18 ; '.'
0000000000019e43         db  0x41 ; 'A'
0000000000019e44         db  0x0e ; '.'
0000000000019e45         db  0x10 ; '.'
0000000000019e46         db  0x42 ; 'B'
0000000000019e47         db  0x0e ; '.'
0000000000019e48         db  0x08 ; '.'
0000000000019e49         db  0x00 ; '.'
0000000000019e4a         db  0x00 ; '.'
0000000000019e4b         db  0x00 ; '.'
0000000000019e4c         db  0x00 ; '.'
0000000000019e4d         db  0x00 ; '.'
0000000000019e4e         db  0x00 ; '.'
0000000000019e4f         db  0x00 ; '.'
0000000000019e50         dd         0x00000010                                  ; Length of the record
0000000000019e54         dd         0x000020b4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019e58         db         0xe8, 0x72, 2 dup (0xff)                    ; begin 0x11140
0000000000019e5c         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x1115a)
0000000000019e60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019e61         align      4
0000000000019e64         dd         0x00000010                                  ; Length of the record
0000000000019e68         dd         0x000020c8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019e6c         db         0xf4, 0x72, 2 dup (0xff)                    ; begin 0x11160
0000000000019e70         db         0x0d, 3 dup (0x00)                          ; length 0xd (end at 0x1116d)
0000000000019e74         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019e75         align      8
0000000000019e78         dd         0x00000010                                  ; Length of the record
0000000000019e7c         dd         0x000020dc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019e80         db         0xf0, 0x72, 2 dup (0xff)                    ; begin 0x11170
0000000000019e84         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x1117c)
0000000000019e88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019e89         align      4
0000000000019e8c         dd         0x00000010                                  ; Length of the record
0000000000019e90         dd         0x000020f0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019e94         db         0xec, 0x72, 2 dup (0xff)                    ; begin 0x11180
0000000000019e98         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x1118a)
0000000000019e9c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019e9d         align      32
0000000000019ea0         dd         0x00000010                                  ; Length of the record
0000000000019ea4         dd         0x00002104                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019ea8         db         0xe8, 0x72, 2 dup (0xff)                    ; begin 0x11190
0000000000019eac         db         0x26, 3 dup (0x00)                          ; length 0x26 (end at 0x111b6)
0000000000019eb0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019eb1         align      4
0000000000019eb4         dd         0x00000038                                  ; Length of the record
0000000000019eb8         dd         0x00002118                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019ebc         db         0x04, 0x73, 2 dup (0xff)                    ; begin 0x111c0
0000000000019ec0         db         0xc5, 0x01, 2 dup (0x00)                    ; length 0x1c5 (end at 0x11385)
0000000000019ec4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019ec5         db  0x42 ; 'B'
0000000000019ec6         db  0x0e ; '.'
0000000000019ec7         db  0x10 ; '.'
0000000000019ec8         db  0x8c ; '.'
0000000000019ec9         db  0x02 ; '.'
0000000000019eca         db  0x41 ; 'A'
0000000000019ecb         db  0x0e ; '.'
0000000000019ecc         db  0x18 ; '.'
0000000000019ecd         db  0x86 ; '.'
0000000000019ece         db  0x03 ; '.'
0000000000019ecf         db  0x44 ; 'D'
0000000000019ed0         db  0x0e ; '.'
0000000000019ed1         db  0x20 ; ' '
0000000000019ed2         db  0x83 ; '.'
0000000000019ed3         db  0x04 ; '.'
0000000000019ed4         db  0x02 ; '.'
0000000000019ed5         db  0x72 ; 'r'
0000000000019ed6         db  0x0a ; '.'
0000000000019ed7         db  0x0e ; '.'
0000000000019ed8         db  0x18 ; '.'
0000000000019ed9         db  0x41 ; 'A'
0000000000019eda         db  0x0e ; '.'
0000000000019edb         db  0x10 ; '.'
0000000000019edc         db  0x42 ; 'B'
0000000000019edd         db  0x0e ; '.'
0000000000019ede         db  0x08 ; '.'
0000000000019edf         db  0x44 ; 'D'
0000000000019ee0         db  0x0b ; '.'
0000000000019ee1         db  0x02 ; '.'
0000000000019ee2         db  0x54 ; 'T'
0000000000019ee3         db  0x0a ; '.'
0000000000019ee4         db  0x0e ; '.'
0000000000019ee5         db  0x18 ; '.'
0000000000019ee6         db  0x45 ; 'E'
0000000000019ee7         db  0x0e ; '.'
0000000000019ee8         db  0x10 ; '.'
0000000000019ee9         db  0x42 ; 'B'
0000000000019eea         db  0x0e ; '.'
0000000000019eeb         db  0x08 ; '.'
0000000000019eec         db  0x45 ; 'E'
0000000000019eed         db  0x0b ; '.'
0000000000019eee         db  0x00 ; '.'
0000000000019eef         db  0x00 ; '.'
0000000000019ef0         dd         0x0000004c                                  ; Length of the record
0000000000019ef4         dd         0x00002154                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019ef8         db         0x98, 0x74, 2 dup (0xff)                    ; begin 0x11390
0000000000019efc         db         0x05, 0x01, 2 dup (0x00)                    ; length 0x105 (end at 0x11495)
0000000000019f00         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019f01         db  0x42 ; 'B'
0000000000019f02         db  0x0e ; '.'
0000000000019f03         db  0x10 ; '.'
0000000000019f04         db  0x8d ; '.'
0000000000019f05         db  0x02 ; '.'
0000000000019f06         db  0x42 ; 'B'
0000000000019f07         db  0x0e ; '.'
0000000000019f08         db  0x18 ; '.'
0000000000019f09         db  0x8c ; '.'
0000000000019f0a         db  0x03 ; '.'
0000000000019f0b         db  0x44 ; 'D'
0000000000019f0c         db  0x0e ; '.'
0000000000019f0d         db  0x20 ; ' '
0000000000019f0e         db  0x86 ; '.'
0000000000019f0f         db  0x04 ; '.'
0000000000019f10         db  0x41 ; 'A'
0000000000019f11         db  0x0e ; '.'
0000000000019f12         db  0x28 ; '('
0000000000019f13         db  0x83 ; '.'
0000000000019f14         db  0x05 ; '.'
0000000000019f15         db  0x4a ; 'J'
0000000000019f16         db  0x0e ; '.'
0000000000019f17         db  0x30 ; '0'
0000000000019f18         db  0x02 ; '.'
0000000000019f19         db  0xb3 ; '.'
0000000000019f1a         db  0x0a ; '.'
0000000000019f1b         db  0x0e ; '.'
0000000000019f1c         db  0x28 ; '('
0000000000019f1d         db  0x41 ; 'A'
0000000000019f1e         db  0x0e ; '.'
0000000000019f1f         db  0x20 ; ' '
0000000000019f20         db  0x41 ; 'A'
0000000000019f21         db  0x0e ; '.'
0000000000019f22         db  0x18 ; '.'
0000000000019f23         db  0x42 ; 'B'
0000000000019f24         db  0x0e ; '.'
0000000000019f25         db  0x10 ; '.'
0000000000019f26         db  0x42 ; 'B'
0000000000019f27         db  0x0e ; '.'
0000000000019f28         db  0x08 ; '.'
0000000000019f29         db  0x44 ; 'D'
0000000000019f2a         db  0x0b ; '.'
0000000000019f2b         db  0x5d ; ']'
0000000000019f2c         db  0x0a ; '.'
0000000000019f2d         db  0x0e ; '.'
0000000000019f2e         db  0x28 ; '('
0000000000019f2f         db  0x44 ; 'D'
0000000000019f30         db  0x0e ; '.'
0000000000019f31         db  0x20 ; ' '
0000000000019f32         db  0x41 ; 'A'
0000000000019f33         db  0x0e ; '.'
0000000000019f34         db  0x18 ; '.'
0000000000019f35         db  0x42 ; 'B'
0000000000019f36         db  0x0e ; '.'
0000000000019f37         db  0x10 ; '.'
0000000000019f38         db  0x42 ; 'B'
0000000000019f39         db  0x0e ; '.'
0000000000019f3a         db  0x08 ; '.'
0000000000019f3b         db  0x4a ; 'J'
0000000000019f3c         db  0x0b ; '.'
0000000000019f3d         db  0x00 ; '.'
0000000000019f3e         db  0x00 ; '.'
0000000000019f3f         db  0x00 ; '.'
0000000000019f40         dd         0x00000034                                  ; Length of the record
0000000000019f44         dd         0x000021a4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019f48         db         0x58, 0x75, 2 dup (0xff)                    ; begin 0x114a0
0000000000019f4c         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x1152a)
0000000000019f50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019f51         db  0x42 ; 'B'
0000000000019f52         db  0x0e ; '.'
0000000000019f53         db  0x10 ; '.'
0000000000019f54         db  0x8d ; '.'
0000000000019f55         db  0x02 ; '.'
0000000000019f56         db  0x42 ; 'B'
0000000000019f57         db  0x0e ; '.'
0000000000019f58         db  0x18 ; '.'
0000000000019f59         db  0x8c ; '.'
0000000000019f5a         db  0x03 ; '.'
0000000000019f5b         db  0x44 ; 'D'
0000000000019f5c         db  0x0e ; '.'
0000000000019f5d         db  0x20 ; ' '
0000000000019f5e         db  0x86 ; '.'
0000000000019f5f         db  0x04 ; '.'
0000000000019f60         db  0x48 ; 'H'
0000000000019f61         db  0x0e ; '.'
0000000000019f62         db  0x28 ; '('
0000000000019f63         db  0x83 ; '.'
0000000000019f64         db  0x05 ; '.'
0000000000019f65         db  0x4a ; 'J'
0000000000019f66         db  0x0e ; '.'
0000000000019f67         db  0x30 ; '0'
0000000000019f68         db  0x02 ; '.'
0000000000019f69         db  0x66 ; 'f'
0000000000019f6a         db  0x0e ; '.'
0000000000019f6b         db  0x28 ; '('
0000000000019f6c         db  0x44 ; 'D'
0000000000019f6d         db  0x0e ; '.'
0000000000019f6e         db  0x20 ; ' '
0000000000019f6f         db  0x41 ; 'A'
0000000000019f70         db  0x0e ; '.'
0000000000019f71         db  0x18 ; '.'
0000000000019f72         db  0x42 ; 'B'
0000000000019f73         db  0x0e ; '.'
0000000000019f74         db  0x10 ; '.'
0000000000019f75         db  0x42 ; 'B'
0000000000019f76         db  0x0e ; '.'
0000000000019f77         db  0x08 ; '.'
0000000000019f78         dd         0x00000028                                  ; Length of the record
0000000000019f7c         dd         0x000021dc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019f80         db         0xb0, 0x75, 2 dup (0xff)                    ; begin 0x11530
0000000000019f84         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x11572)
0000000000019f88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019f89         db  0x46 ; 'F'
0000000000019f8a         db  0x0e ; '.'
0000000000019f8b         db  0x10 ; '.'
0000000000019f8c         db  0x86 ; '.'
0000000000019f8d         db  0x02 ; '.'
0000000000019f8e         db  0x41 ; 'A'
0000000000019f8f         db  0x0e ; '.'
0000000000019f90         db  0x18 ; '.'
0000000000019f91         db  0x83 ; '.'
0000000000019f92         db  0x03 ; '.'
0000000000019f93         db  0x47 ; 'G'
0000000000019f94         db  0x0e ; '.'
0000000000019f95         db  0x20 ; ' '
0000000000019f96         db  0x68 ; 'h'
0000000000019f97         db  0x0e ; '.'
0000000000019f98         db  0x18 ; '.'
0000000000019f99         db  0x41 ; 'A'
0000000000019f9a         db  0x0e ; '.'
0000000000019f9b         db  0x10 ; '.'
0000000000019f9c         db  0x41 ; 'A'
0000000000019f9d         db  0x0e ; '.'
0000000000019f9e         db  0x08 ; '.'
0000000000019f9f         db  0x48 ; 'H'
0000000000019fa0         db  0xc3 ; '.'
0000000000019fa1         db  0xc6 ; '.'
0000000000019fa2         db  0x00 ; '.'
0000000000019fa3         db  0x00 ; '.'
0000000000019fa4         dd         0x00000018                                  ; Length of the record
0000000000019fa8         dd         0x00002208                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019fac         db         0xd4, 0x75, 2 dup (0xff)                    ; begin 0x11580
0000000000019fb0         db         0x39, 3 dup (0x00)                          ; length 0x39 (end at 0x115b9)
0000000000019fb4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019fb5         db  0x41 ; 'A'
0000000000019fb6         db  0x0e ; '.'
0000000000019fb7         db  0x10 ; '.'
0000000000019fb8         db  0x83 ; '.'
0000000000019fb9         db  0x02 ; '.'
0000000000019fba         db  0x68 ; 'h'
0000000000019fbb         db  0x0a ; '.'
0000000000019fbc         db  0x0e ; '.'
0000000000019fbd         db  0x08 ; '.'
0000000000019fbe         db  0x47 ; 'G'
0000000000019fbf         db  0x0b ; '.'
0000000000019fc0         dd         0x00000038                                  ; Length of the record
0000000000019fc4         dd         0x00002224                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
0000000000019fc8         db         0xf8, 0x75, 2 dup (0xff)                    ; begin 0x115c0
0000000000019fcc         db         0x2c, 0x01, 2 dup (0x00)                    ; length 0x12c (end at 0x116ec)
0000000000019fd0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019fd1         db  0x42 ; 'B'
0000000000019fd2         db  0x0e ; '.'
0000000000019fd3         db  0x10 ; '.'
0000000000019fd4         db  0x8d ; '.'
0000000000019fd5         db  0x02 ; '.'
0000000000019fd6         db  0x42 ; 'B'
0000000000019fd7         db  0x0e ; '.'
0000000000019fd8         db  0x18 ; '.'
0000000000019fd9         db  0x8c ; '.'
0000000000019fda         db  0x03 ; '.'
0000000000019fdb         db  0x41 ; 'A'
0000000000019fdc         db  0x0e ; '.'
0000000000019fdd         db  0x20 ; ' '
0000000000019fde         db  0x86 ; '.'
0000000000019fdf         db  0x04 ; '.'
0000000000019fe0         db  0x41 ; 'A'
0000000000019fe1         db  0x0e ; '.'
0000000000019fe2         db  0x28 ; '('
0000000000019fe3         db  0x83 ; '.'
0000000000019fe4         db  0x05 ; '.'
0000000000019fe5         db  0x47 ; 'G'
0000000000019fe6         db  0x0e ; '.'
0000000000019fe7         db  0xc0 ; '.'
0000000000019fe8         db  0x01 ; '.'
0000000000019fe9         db  0x02 ; '.'
0000000000019fea         db  0xa4 ; '.'
0000000000019feb         db  0x0a ; '.'
0000000000019fec         db  0x0e ; '.'
0000000000019fed         db  0x28 ; '('
0000000000019fee         db  0x41 ; 'A'
0000000000019fef         db  0x0e ; '.'
0000000000019ff0         db  0x20 ; ' '
0000000000019ff1         db  0x41 ; 'A'
0000000000019ff2         db  0x0e ; '.'
0000000000019ff3         db  0x18 ; '.'
0000000000019ff4         db  0x42 ; 'B'
0000000000019ff5         db  0x0e ; '.'
0000000000019ff6         db  0x10 ; '.'
0000000000019ff7         db  0x42 ; 'B'
0000000000019ff8         db  0x0e ; '.'
0000000000019ff9         db  0x08 ; '.'
0000000000019ffa         db  0x49 ; 'I'
0000000000019ffb         db  0x0b ; '.'
0000000000019ffc         dd         0x00000020                                  ; Length of the record
000000000001a000         dd         0x00002260                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a004         db         0xec, 0x76, 2 dup (0xff)                    ; begin 0x116f0
000000000001a008         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0x1175a)
000000000001a00c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a00d         db  0x44 ; 'D'
000000000001a00e         db  0x0e ; '.'
000000000001a00f         db  0x10 ; '.'
000000000001a010         db  0x72 ; 'r'
000000000001a011         db  0x0a ; '.'
000000000001a012         db  0x0e ; '.'
000000000001a013         db  0x08 ; '.'
000000000001a014         db  0x4a ; 'J'
000000000001a015         db  0x0b ; '.'
000000000001a016         db  0x5b ; '['
000000000001a017         db  0x0a ; '.'
000000000001a018         db  0x0e ; '.'
000000000001a019         db  0x08 ; '.'
000000000001a01a         db  0x45 ; 'E'
000000000001a01b         db  0x0b ; '.'
000000000001a01c         db  0x49 ; 'I'
000000000001a01d         db  0x0e ; '.'
000000000001a01e         db  0x08 ; '.'
000000000001a01f         db  0x00 ; '.'
000000000001a020         dd         0x00000040                                  ; Length of the record
000000000001a024         dd         0x00002284                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a028         db         0x38, 0x77, 2 dup (0xff)                    ; begin 0x11760
000000000001a02c         db         0x66, 3 dup (0x00)                          ; length 0x66 (end at 0x117c6)
000000000001a030         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a031         db  0x41 ; 'A'
000000000001a032         db  0x0e ; '.'
000000000001a033         db  0x10 ; '.'
000000000001a034         db  0x86 ; '.'
000000000001a035         db  0x02 ; '.'
000000000001a036         db  0x41 ; 'A'
000000000001a037         db  0x0e ; '.'
000000000001a038         db  0x18 ; '.'
000000000001a039         db  0x83 ; '.'
000000000001a03a         db  0x03 ; '.'
000000000001a03b         db  0x49 ; 'I'
000000000001a03c         db  0x0e ; '.'
000000000001a03d         db  0x20 ; ' '
000000000001a03e         db  0x61 ; 'a'
000000000001a03f         db  0x0a ; '.'
000000000001a040         db  0x0e ; '.'
000000000001a041         db  0x18 ; '.'
000000000001a042         db  0x41 ; 'A'
000000000001a043         db  0x0e ; '.'
000000000001a044         db  0x10 ; '.'
000000000001a045         db  0x41 ; 'A'
000000000001a046         db  0x0e ; '.'
000000000001a047         db  0x08 ; '.'
000000000001a048         db  0x42 ; 'B'
000000000001a049         db  0x0b ; '.'
000000000001a04a         db  0x5b ; '['
000000000001a04b         db  0x0a ; '.'
000000000001a04c         db  0x0e ; '.'
000000000001a04d         db  0x18 ; '.'
000000000001a04e         db  0x41 ; 'A'
000000000001a04f         db  0x0e ; '.'
000000000001a050         db  0x10 ; '.'
000000000001a051         db  0x41 ; 'A'
000000000001a052         db  0x0e ; '.'
000000000001a053         db  0x08 ; '.'
000000000001a054         db  0x43 ; 'C'
000000000001a055         db  0x0b ; '.'
000000000001a056         db  0x4e ; 'N'
000000000001a057         db  0x0a ; '.'
000000000001a058         db  0x0e ; '.'
000000000001a059         db  0x18 ; '.'
000000000001a05a         db  0x41 ; 'A'
000000000001a05b         db  0x0e ; '.'
000000000001a05c         db  0x10 ; '.'
000000000001a05d         db  0x41 ; 'A'
000000000001a05e         db  0x0e ; '.'
000000000001a05f         db  0x08 ; '.'
000000000001a060         db  0x41 ; 'A'
000000000001a061         db  0x0b ; '.'
000000000001a062         db  0x00 ; '.'
000000000001a063         db  0x00 ; '.'
000000000001a064         dd         0x00000028                                  ; Length of the record
000000000001a068         dd         0x000022c8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a06c         db         0x64, 0x77, 2 dup (0xff)                    ; begin 0x117d0
000000000001a070         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0x1182c)
000000000001a074         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a075         db  0x41 ; 'A'
000000000001a076         db  0x0e ; '.'
000000000001a077         db  0x10 ; '.'
000000000001a078         db  0x86 ; '.'
000000000001a079         db  0x02 ; '.'
000000000001a07a         db  0x41 ; 'A'
000000000001a07b         db  0x0e ; '.'
000000000001a07c         db  0x18 ; '.'
000000000001a07d         db  0x83 ; '.'
000000000001a07e         db  0x03 ; '.'
000000000001a07f         db  0x47 ; 'G'
000000000001a080         db  0x0e ; '.'
000000000001a081         db  0x20 ; ' '
000000000001a082         db  0x6c ; 'l'
000000000001a083         db  0x0a ; '.'
000000000001a084         db  0x0e ; '.'
000000000001a085         db  0x18 ; '.'
000000000001a086         db  0x43 ; 'C'
000000000001a087         db  0x0e ; '.'
000000000001a088         db  0x10 ; '.'
000000000001a089         db  0x41 ; 'A'
000000000001a08a         db  0x0e ; '.'
000000000001a08b         db  0x08 ; '.'
000000000001a08c         db  0x47 ; 'G'
000000000001a08d         db  0x0b ; '.'
000000000001a08e         db  0x00 ; '.'
000000000001a08f         db  0x00 ; '.'
000000000001a090         dd         0x00000024                                  ; Length of the record
000000000001a094         dd         0x000022f4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a098         db         0x98, 0x77, 2 dup (0xff)                    ; begin 0x11830
000000000001a09c         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0x1189b)
000000000001a0a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a0a1         db  0x41 ; 'A'
000000000001a0a2         db  0x0e ; '.'
000000000001a0a3         db  0x10 ; '.'
000000000001a0a4         db  0x83 ; '.'
000000000001a0a5         db  0x02 ; '.'
000000000001a0a6         db  0x6f ; 'o'
000000000001a0a7         db  0x0a ; '.'
000000000001a0a8         db  0x0e ; '.'
000000000001a0a9         db  0x08 ; '.'
000000000001a0aa         db  0x48 ; 'H'
000000000001a0ab         db  0x0b ; '.'
000000000001a0ac         db  0x5a ; 'Z'
000000000001a0ad         db  0x0a ; '.'
000000000001a0ae         db  0x0e ; '.'
000000000001a0af         db  0x08 ; '.'
000000000001a0b0         db  0x46 ; 'F'
000000000001a0b1         db  0x0b ; '.'
000000000001a0b2         db  0x52 ; 'R'
000000000001a0b3         db  0x0e ; '.'
000000000001a0b4         db  0x08 ; '.'
000000000001a0b5         db  0x00 ; '.'
000000000001a0b6         db  0x00 ; '.'
000000000001a0b7         db  0x00 ; '.'
000000000001a0b8         dd         0x0000001c                                  ; Length of the record
000000000001a0bc         dd         0x0000231c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a0c0         db         0xe0, 0x77, 2 dup (0xff)                    ; begin 0x118a0
000000000001a0c4         db         0x63, 3 dup (0x00)                          ; length 0x63 (end at 0x11903)
000000000001a0c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a0c9         db  0x47 ; 'G'
000000000001a0ca         db  0x0e ; '.'
000000000001a0cb         db  0x10 ; '.'
000000000001a0cc         db  0x83 ; '.'
000000000001a0cd         db  0x02 ; '.'
000000000001a0ce         db  0x70 ; 'p'
000000000001a0cf         db  0x0a ; '.'
000000000001a0d0         db  0x0e ; '.'
000000000001a0d1         db  0x08 ; '.'
000000000001a0d2         db  0x49 ; 'I'
000000000001a0d3         db  0x0b ; '.'
000000000001a0d4         db  0x62 ; 'b'
000000000001a0d5         db  0x0e ; '.'
000000000001a0d6         db  0x08 ; '.'
000000000001a0d7         db  0x00 ; '.'
000000000001a0d8         dd         0x00000010                                  ; Length of the record
000000000001a0dc         dd         0x0000233c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a0e0         db         0x30, 0x78, 2 dup (0xff)                    ; begin 0x11910
000000000001a0e4         db         0x3a, 3 dup (0x00)                          ; length 0x3a (end at 0x1194a)
000000000001a0e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a0e9         align      4
000000000001a0ec         dd         0x0000004c                                  ; Length of the record
000000000001a0f0         dd         0x00002350                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a0f4         db         0x5c, 0x78, 2 dup (0xff)                    ; begin 0x11950
000000000001a0f8         db         0x7a, 0x02, 2 dup (0x00)                    ; length 0x27a (end at 0x11bca)
000000000001a0fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a0fd         db  0x42 ; 'B'
000000000001a0fe         db  0x0e ; '.'
000000000001a0ff         db  0x10 ; '.'
000000000001a100         db  0x8f ; '.'
000000000001a101         db  0x02 ; '.'
000000000001a102         db  0x42 ; 'B'
000000000001a103         db  0x0e ; '.'
000000000001a104         db  0x18 ; '.'
000000000001a105         db  0x8e ; '.'
000000000001a106         db  0x03 ; '.'
000000000001a107         db  0x45 ; 'E'
000000000001a108         db  0x0e ; '.'
000000000001a109         db  0x20 ; ' '
000000000001a10a         db  0x8d ; '.'
000000000001a10b         db  0x04 ; '.'
000000000001a10c         db  0x42 ; 'B'
000000000001a10d         db  0x0e ; '.'
000000000001a10e         db  0x28 ; '('
000000000001a10f         db  0x8c ; '.'
000000000001a110         db  0x05 ; '.'
000000000001a111         db  0x44 ; 'D'
000000000001a112         db  0x0e ; '.'
000000000001a113         db  0x30 ; '0'
000000000001a114         db  0x86 ; '.'
000000000001a115         db  0x06 ; '.'
000000000001a116         db  0x41 ; 'A'
000000000001a117         db  0x0e ; '.'
000000000001a118         db  0x38 ; '8'
000000000001a119         db  0x83 ; '.'
000000000001a11a         db  0x07 ; '.'
000000000001a11b         db  0x4d ; 'M'
000000000001a11c         db  0x0e ; '.'
000000000001a11d         db  0xf0 ; '.'
000000000001a11e         db  0x01 ; '.'
000000000001a11f         db  0x03 ; '.'
000000000001a120         db  0x08 ; '.'
000000000001a121         db  0x01 ; '.'
000000000001a122         db  0x0a ; '.'
000000000001a123         db  0x0e ; '.'
000000000001a124         db  0x38 ; '8'
000000000001a125         db  0x41 ; 'A'
000000000001a126         db  0x0e ; '.'
000000000001a127         db  0x30 ; '0'
000000000001a128         db  0x41 ; 'A'
000000000001a129         db  0x0e ; '.'
000000000001a12a         db  0x28 ; '('
000000000001a12b         db  0x42 ; 'B'
000000000001a12c         db  0x0e ; '.'
000000000001a12d         db  0x20 ; ' '
000000000001a12e         db  0x42 ; 'B'
000000000001a12f         db  0x0e ; '.'
000000000001a130         db  0x18 ; '.'
000000000001a131         db  0x42 ; 'B'
000000000001a132         db  0x0e ; '.'
000000000001a133         db  0x10 ; '.'
000000000001a134         db  0x42 ; 'B'
000000000001a135         db  0x0e ; '.'
000000000001a136         db  0x08 ; '.'
000000000001a137         db  0x41 ; 'A'
000000000001a138         db  0x0b ; '.'
000000000001a139         db  0x00 ; '.'
000000000001a13a         db  0x00 ; '.'
000000000001a13b         db  0x00 ; '.'
000000000001a13c         dd         0x00000040                                  ; Length of the record
000000000001a140         dd         0x000023a0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a144         db         0x8c, 0x7a, 2 dup (0xff)                    ; begin 0x11bd0
000000000001a148         db         0xaf, 3 dup (0x00)                          ; length 0xaf (end at 0x11c7f)
000000000001a14c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a14d         db  0x48 ; 'H'
000000000001a14e         db  0x0e ; '.'
000000000001a14f         db  0x10 ; '.'
000000000001a150         db  0x8c ; '.'
000000000001a151         db  0x02 ; '.'
000000000001a152         db  0x44 ; 'D'
000000000001a153         db  0x0e ; '.'
000000000001a154         db  0x18 ; '.'
000000000001a155         db  0x86 ; '.'
000000000001a156         db  0x03 ; '.'
000000000001a157         db  0x41 ; 'A'
000000000001a158         db  0x0e ; '.'
000000000001a159         db  0x20 ; ' '
000000000001a15a         db  0x83 ; '.'
000000000001a15b         db  0x04 ; '.'
000000000001a15c         db  0x02 ; '.'
000000000001a15d         db  0x65 ; 'e'
000000000001a15e         db  0x0a ; '.'
000000000001a15f         db  0x0e ; '.'
000000000001a160         db  0x18 ; '.'
000000000001a161         db  0x46 ; 'F'
000000000001a162         db  0x0e ; '.'
000000000001a163         db  0x10 ; '.'
000000000001a164         db  0x42 ; 'B'
000000000001a165         db  0x0e ; '.'
000000000001a166         db  0x08 ; '.'
000000000001a167         db  0x46 ; 'F'
000000000001a168         db  0x0b ; '.'
000000000001a169         db  0x5e ; '^'
000000000001a16a         db  0x0a ; '.'
000000000001a16b         db  0x0e ; '.'
000000000001a16c         db  0x18 ; '.'
000000000001a16d         db  0x41 ; 'A'
000000000001a16e         db  0x0e ; '.'
000000000001a16f         db  0x10 ; '.'
000000000001a170         db  0x42 ; 'B'
000000000001a171         db  0x0e ; '.'
000000000001a172         db  0x08 ; '.'
000000000001a173         db  0x47 ; 'G'
000000000001a174         db  0x0b ; '.'
000000000001a175         db  0x41 ; 'A'
000000000001a176         db  0x0e ; '.'
000000000001a177         db  0x18 ; '.'
000000000001a178         db  0x43 ; 'C'
000000000001a179         db  0x0e ; '.'
000000000001a17a         db  0x10 ; '.'
000000000001a17b         db  0x42 ; 'B'
000000000001a17c         db  0x0e ; '.'
000000000001a17d         db  0x08 ; '.'
000000000001a17e         db  0x00 ; '.'
000000000001a17f         db  0x00 ; '.'
000000000001a180         dd         0x00000018                                  ; Length of the record
000000000001a184         dd         0x000023e4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a188         db         0xf8, 0x7a, 2 dup (0xff)                    ; begin 0x11c80
000000000001a18c         db         0xb8, 3 dup (0x00)                          ; length 0xb8 (end at 0x11d38)
000000000001a190         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a191         db  0x44 ; 'D'
000000000001a192         db  0x0e ; '.'
000000000001a193         db  0x30 ; '0'
000000000001a194         db  0x02 ; '.'
000000000001a195         db  0x55 ; 'U'
000000000001a196         db  0x0a ; '.'
000000000001a197         db  0x0e ; '.'
000000000001a198         db  0x08 ; '.'
000000000001a199         db  0x47 ; 'G'
000000000001a19a         db  0x0b ; '.'
000000000001a19b         db  0x00 ; '.'
000000000001a19c         dd         0x0000004c                                  ; Length of the record
000000000001a1a0         dd         0x00002400                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a1a4         db         0x9c, 0x7b, 2 dup (0xff)                    ; begin 0x11d40
000000000001a1a8         db         0xd1, 0x09, 2 dup (0x00)                    ; length 0x9d1 (end at 0x12711)
000000000001a1ac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a1ad         db  0x42 ; 'B'
000000000001a1ae         db  0x0e ; '.'
000000000001a1af         db  0x10 ; '.'
000000000001a1b0         db  0x8f ; '.'
000000000001a1b1         db  0x02 ; '.'
000000000001a1b2         db  0x42 ; 'B'
000000000001a1b3         db  0x0e ; '.'
000000000001a1b4         db  0x18 ; '.'
000000000001a1b5         db  0x8e ; '.'
000000000001a1b6         db  0x03 ; '.'
000000000001a1b7         db  0x45 ; 'E'
000000000001a1b8         db  0x0e ; '.'
000000000001a1b9         db  0x20 ; ' '
000000000001a1ba         db  0x8d ; '.'
000000000001a1bb         db  0x04 ; '.'
000000000001a1bc         db  0x42 ; 'B'
000000000001a1bd         db  0x0e ; '.'
000000000001a1be         db  0x28 ; '('
000000000001a1bf         db  0x8c ; '.'
000000000001a1c0         db  0x05 ; '.'
000000000001a1c1         db  0x41 ; 'A'
000000000001a1c2         db  0x0e ; '.'
000000000001a1c3         db  0x30 ; '0'
000000000001a1c4         db  0x86 ; '.'
000000000001a1c5         db  0x06 ; '.'
000000000001a1c6         db  0x41 ; 'A'
000000000001a1c7         db  0x0e ; '.'
000000000001a1c8         db  0x38 ; '8'
000000000001a1c9         db  0x83 ; '.'
000000000001a1ca         db  0x07 ; '.'
000000000001a1cb         db  0x44 ; 'D'
000000000001a1cc         db  0x0e ; '.'
000000000001a1cd         db  0xb0 ; '.'
000000000001a1ce         db  0x01 ; '.'
000000000001a1cf         db  0x03 ; '.'
000000000001a1d0         db  0xd1 ; '.'
000000000001a1d1         db  0x05 ; '.'
000000000001a1d2         db  0x0a ; '.'
000000000001a1d3         db  0x0e ; '.'
000000000001a1d4         db  0x38 ; '8'
000000000001a1d5         db  0x41 ; 'A'
000000000001a1d6         db  0x0e ; '.'
000000000001a1d7         db  0x30 ; '0'
000000000001a1d8         db  0x41 ; 'A'
000000000001a1d9         db  0x0e ; '.'
000000000001a1da         db  0x28 ; '('
000000000001a1db         db  0x42 ; 'B'
000000000001a1dc         db  0x0e ; '.'
000000000001a1dd         db  0x20 ; ' '
000000000001a1de         db  0x42 ; 'B'
000000000001a1df         db  0x0e ; '.'
000000000001a1e0         db  0x18 ; '.'
000000000001a1e1         db  0x42 ; 'B'
000000000001a1e2         db  0x0e ; '.'
000000000001a1e3         db  0x10 ; '.'
000000000001a1e4         db  0x42 ; 'B'
000000000001a1e5         db  0x0e ; '.'
000000000001a1e6         db  0x08 ; '.'
000000000001a1e7         db  0x44 ; 'D'
000000000001a1e8         db  0x0b ; '.'
000000000001a1e9         db  0x00 ; '.'
000000000001a1ea         db  0x00 ; '.'
000000000001a1eb         db  0x00 ; '.'
000000000001a1ec         dd         0x00000048                                  ; Length of the record
000000000001a1f0         dd         0x00002450                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a1f4         db         0x2c, 0x85, 2 dup (0xff)                    ; begin 0x12720
000000000001a1f8         db         0xaa, 0x03, 2 dup (0x00)                    ; length 0x3aa (end at 0x12aca)
000000000001a1fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a1fd         db  0x42 ; 'B'
000000000001a1fe         db  0x0e ; '.'
000000000001a1ff         db  0x10 ; '.'
000000000001a200         db  0x8f ; '.'
000000000001a201         db  0x02 ; '.'
000000000001a202         db  0x42 ; 'B'
000000000001a203         db  0x0e ; '.'
000000000001a204         db  0x18 ; '.'
000000000001a205         db  0x8e ; '.'
000000000001a206         db  0x03 ; '.'
000000000001a207         db  0x42 ; 'B'
000000000001a208         db  0x0e ; '.'
000000000001a209         db  0x20 ; ' '
000000000001a20a         db  0x8d ; '.'
000000000001a20b         db  0x04 ; '.'
000000000001a20c         db  0x42 ; 'B'
000000000001a20d         db  0x0e ; '.'
000000000001a20e         db  0x28 ; '('
000000000001a20f         db  0x8c ; '.'
000000000001a210         db  0x05 ; '.'
000000000001a211         db  0x41 ; 'A'
000000000001a212         db  0x0e ; '.'
000000000001a213         db  0x30 ; '0'
000000000001a214         db  0x86 ; '.'
000000000001a215         db  0x06 ; '.'
000000000001a216         db  0x41 ; 'A'
000000000001a217         db  0x0e ; '.'
000000000001a218         db  0x38 ; '8'
000000000001a219         db  0x83 ; '.'
000000000001a21a         db  0x07 ; '.'
000000000001a21b         db  0x44 ; 'D'
000000000001a21c         db  0x0e ; '.'
000000000001a21d         db  0x60 ; '`'
000000000001a21e         db  0x03 ; '.'
000000000001a21f         db  0xa4 ; '.'
000000000001a220         db  0x02 ; '.'
000000000001a221         db  0x0a ; '.'
000000000001a222         db  0x0e ; '.'
000000000001a223         db  0x38 ; '8'
000000000001a224         db  0x44 ; 'D'
000000000001a225         db  0x0e ; '.'
000000000001a226         db  0x30 ; '0'
000000000001a227         db  0x41 ; 'A'
000000000001a228         db  0x0e ; '.'
000000000001a229         db  0x28 ; '('
000000000001a22a         db  0x42 ; 'B'
000000000001a22b         db  0x0e ; '.'
000000000001a22c         db  0x20 ; ' '
000000000001a22d         db  0x42 ; 'B'
000000000001a22e         db  0x0e ; '.'
000000000001a22f         db  0x18 ; '.'
000000000001a230         db  0x42 ; 'B'
000000000001a231         db  0x0e ; '.'
000000000001a232         db  0x10 ; '.'
000000000001a233         db  0x42 ; 'B'
000000000001a234         db  0x0e ; '.'
000000000001a235         db  0x08 ; '.'
000000000001a236         db  0x41 ; 'A'
000000000001a237         db  0x0b ; '.'
000000000001a238         dd         0x0000002c                                  ; Length of the record
000000000001a23c         dd         0x0000249c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a240         db         0x90, 0x88, 2 dup (0xff)                    ; begin 0x12ad0
000000000001a244         db         0x82, 0x01, 2 dup (0x00)                    ; length 0x182 (end at 0x12c52)
000000000001a248         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a249         db  0x42 ; 'B'
000000000001a24a         db  0x0e ; '.'
000000000001a24b         db  0x10 ; '.'
000000000001a24c         db  0x8c ; '.'
000000000001a24d         db  0x02 ; '.'
000000000001a24e         db  0x41 ; 'A'
000000000001a24f         db  0x0e ; '.'
000000000001a250         db  0x18 ; '.'
000000000001a251         db  0x86 ; '.'
000000000001a252         db  0x03 ; '.'
000000000001a253         db  0x44 ; 'D'
000000000001a254         db  0x0e ; '.'
000000000001a255         db  0x20 ; ' '
000000000001a256         db  0x83 ; '.'
000000000001a257         db  0x04 ; '.'
000000000001a258         db  0x02 ; '.'
000000000001a259         db  0xc2 ; '.'
000000000001a25a         db  0x0a ; '.'
000000000001a25b         db  0x0e ; '.'
000000000001a25c         db  0x18 ; '.'
000000000001a25d         db  0x41 ; 'A'
000000000001a25e         db  0x0e ; '.'
000000000001a25f         db  0x10 ; '.'
000000000001a260         db  0x42 ; 'B'
000000000001a261         db  0x0e ; '.'
000000000001a262         db  0x08 ; '.'
000000000001a263         db  0x44 ; 'D'
000000000001a264         db  0x0b ; '.'
000000000001a265         db  0x00 ; '.'
000000000001a266         db  0x00 ; '.'
000000000001a267         db  0x00 ; '.'
000000000001a268         dd         0x00000060                                  ; Length of the record
000000000001a26c         dd         0x000024cc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a270         db         0xf0, 0x89, 2 dup (0xff)                    ; begin 0x12c60
000000000001a274         db         0x78, 0x07, 2 dup (0x00)                    ; length 0x778 (end at 0x133d8)
000000000001a278         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a279         db  0x42 ; 'B'
000000000001a27a         db  0x0e ; '.'
000000000001a27b         db  0x10 ; '.'
000000000001a27c         db  0x8e ; '.'
000000000001a27d         db  0x02 ; '.'
000000000001a27e         db  0x42 ; 'B'
000000000001a27f         db  0x0e ; '.'
000000000001a280         db  0x18 ; '.'
000000000001a281         db  0x8d ; '.'
000000000001a282         db  0x03 ; '.'
000000000001a283         db  0x42 ; 'B'
000000000001a284         db  0x0e ; '.'
000000000001a285         db  0x20 ; ' '
000000000001a286         db  0x8c ; '.'
000000000001a287         db  0x04 ; '.'
000000000001a288         db  0x41 ; 'A'
000000000001a289         db  0x0e ; '.'
000000000001a28a         db  0x28 ; '('
000000000001a28b         db  0x86 ; '.'
000000000001a28c         db  0x05 ; '.'
000000000001a28d         db  0x41 ; 'A'
000000000001a28e         db  0x0e ; '.'
000000000001a28f         db  0x30 ; '0'
000000000001a290         db  0x83 ; '.'
000000000001a291         db  0x06 ; '.'
000000000001a292         db  0x03 ; '.'
000000000001a293         db  0x19 ; '.'
000000000001a294         db  0x01 ; '.'
000000000001a295         db  0x0a ; '.'
000000000001a296         db  0x0e ; '.'
000000000001a297         db  0x28 ; '('
000000000001a298         db  0x44 ; 'D'
000000000001a299         db  0x0e ; '.'
000000000001a29a         db  0x20 ; ' '
000000000001a29b         db  0x42 ; 'B'
000000000001a29c         db  0x0e ; '.'
000000000001a29d         db  0x18 ; '.'
000000000001a29e         db  0x42 ; 'B'
000000000001a29f         db  0x0e ; '.'
000000000001a2a0         db  0x10 ; '.'
000000000001a2a1         db  0x42 ; 'B'
000000000001a2a2         db  0x0e ; '.'
000000000001a2a3         db  0x08 ; '.'
000000000001a2a4         db  0x45 ; 'E'
000000000001a2a5         db  0x0b ; '.'
000000000001a2a6         db  0x02 ; '.'
000000000001a2a7         db  0x6b ; 'k'
000000000001a2a8         db  0x0a ; '.'
000000000001a2a9         db  0x0e ; '.'
000000000001a2aa         db  0x28 ; '('
000000000001a2ab         db  0x44 ; 'D'
000000000001a2ac         db  0x0e ; '.'
000000000001a2ad         db  0x20 ; ' '
000000000001a2ae         db  0x42 ; 'B'
000000000001a2af         db  0x0e ; '.'
000000000001a2b0         db  0x18 ; '.'
000000000001a2b1         db  0x42 ; 'B'
000000000001a2b2         db  0x0e ; '.'
000000000001a2b3         db  0x10 ; '.'
000000000001a2b4         db  0x42 ; 'B'
000000000001a2b5         db  0x0e ; '.'
000000000001a2b6         db  0x08 ; '.'
000000000001a2b7         db  0x4b ; 'K'
000000000001a2b8         db  0x0b ; '.'
000000000001a2b9         db  0x02 ; '.'
000000000001a2ba         db  0xe2 ; '.'
000000000001a2bb         db  0x0a ; '.'
000000000001a2bc         db  0x0e ; '.'
000000000001a2bd         db  0x28 ; '('
000000000001a2be         db  0x41 ; 'A'
000000000001a2bf         db  0x0e ; '.'
000000000001a2c0         db  0x20 ; ' '
000000000001a2c1         db  0x42 ; 'B'
000000000001a2c2         db  0x0e ; '.'
000000000001a2c3         db  0x18 ; '.'
000000000001a2c4         db  0x42 ; 'B'
000000000001a2c5         db  0x0e ; '.'
000000000001a2c6         db  0x10 ; '.'
000000000001a2c7         db  0x42 ; 'B'
000000000001a2c8         db  0x0e ; '.'
000000000001a2c9         db  0x08 ; '.'
000000000001a2ca         db  0x47 ; 'G'
000000000001a2cb         db  0x0b ; '.'
000000000001a2cc         dd         0x00000014                                  ; Length of the record
000000000001a2d0         dd         0x00002530                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a2d4         db         0x0c, 0x91, 2 dup (0xff)                    ; begin 0x133e0
000000000001a2d8         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0x13409)
000000000001a2dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a2dd         db  0x54 ; 'T'
000000000001a2de         db  0x0e ; '.'
000000000001a2df         db  0x10 ; '.'
000000000001a2e0         db  0x54 ; 'T'
000000000001a2e1         db  0x0e ; '.'
000000000001a2e2         db  0x08 ; '.'
000000000001a2e3         db  0x00 ; '.'
000000000001a2e4         dd         0x00000060                                  ; Length of the record
000000000001a2e8         dd         0x00002548                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a2ec         db         0x24, 0x91, 2 dup (0xff)                    ; begin 0x13410
000000000001a2f0         db         0x4e, 0x01, 2 dup (0x00)                    ; length 0x14e (end at 0x1355e)
000000000001a2f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a2f5         db  0x42 ; 'B'
000000000001a2f6         db  0x0e ; '.'
000000000001a2f7         db  0x10 ; '.'
000000000001a2f8         db  0x8e ; '.'
000000000001a2f9         db  0x02 ; '.'
000000000001a2fa         db  0x42 ; 'B'
000000000001a2fb         db  0x0e ; '.'
000000000001a2fc         db  0x18 ; '.'
000000000001a2fd         db  0x8d ; '.'
000000000001a2fe         db  0x03 ; '.'
000000000001a2ff         db  0x42 ; 'B'
000000000001a300         db  0x0e ; '.'
000000000001a301         db  0x20 ; ' '
000000000001a302         db  0x8c ; '.'
000000000001a303         db  0x04 ; '.'
000000000001a304         db  0x41 ; 'A'
000000000001a305         db  0x0e ; '.'
000000000001a306         db  0x28 ; '('
000000000001a307         db  0x86 ; '.'
000000000001a308         db  0x05 ; '.'
000000000001a309         db  0x44 ; 'D'
000000000001a30a         db  0x0e ; '.'
000000000001a30b         db  0x30 ; '0'
000000000001a30c         db  0x83 ; '.'
000000000001a30d         db  0x06 ; '.'
000000000001a30e         db  0x02 ; '.'
000000000001a30f         db  0x8a ; '.'
000000000001a310         db  0x0a ; '.'
000000000001a311         db  0x0e ; '.'
000000000001a312         db  0x28 ; '('
000000000001a313         db  0x41 ; 'A'
000000000001a314         db  0x0e ; '.'
000000000001a315         db  0x20 ; ' '
000000000001a316         db  0x42 ; 'B'
000000000001a317         db  0x0e ; '.'
000000000001a318         db  0x18 ; '.'
000000000001a319         db  0x42 ; 'B'
000000000001a31a         db  0x0e ; '.'
000000000001a31b         db  0x10 ; '.'
000000000001a31c         db  0x42 ; 'B'
000000000001a31d         db  0x0e ; '.'
000000000001a31e         db  0x08 ; '.'
000000000001a31f         db  0x44 ; 'D'
000000000001a320         db  0x0b ; '.'
000000000001a321         db  0x41 ; 'A'
000000000001a322         db  0x0a ; '.'
000000000001a323         db  0x0e ; '.'
000000000001a324         db  0x28 ; '('
000000000001a325         db  0x45 ; 'E'
000000000001a326         db  0x0e ; '.'
000000000001a327         db  0x20 ; ' '
000000000001a328         db  0x42 ; 'B'
000000000001a329         db  0x0e ; '.'
000000000001a32a         db  0x18 ; '.'
000000000001a32b         db  0x42 ; 'B'
000000000001a32c         db  0x0e ; '.'
000000000001a32d         db  0x10 ; '.'
000000000001a32e         db  0x42 ; 'B'
000000000001a32f         db  0x0e ; '.'
000000000001a330         db  0x08 ; '.'
000000000001a331         db  0x44 ; 'D'
000000000001a332         db  0x0b ; '.'
000000000001a333         db  0x41 ; 'A'
000000000001a334         db  0x0a ; '.'
000000000001a335         db  0x0e ; '.'
000000000001a336         db  0x28 ; '('
000000000001a337         db  0x43 ; 'C'
000000000001a338         db  0x0e ; '.'
000000000001a339         db  0x20 ; ' '
000000000001a33a         db  0x42 ; 'B'
000000000001a33b         db  0x0e ; '.'
000000000001a33c         db  0x18 ; '.'
000000000001a33d         db  0x42 ; 'B'
000000000001a33e         db  0x0e ; '.'
000000000001a33f         db  0x10 ; '.'
000000000001a340         db  0x42 ; 'B'
000000000001a341         db  0x0e ; '.'
000000000001a342         db  0x08 ; '.'
000000000001a343         db  0x46 ; 'F'
000000000001a344         db  0x0b ; '.'
000000000001a345         db  0x00 ; '.'
000000000001a346         db  0x00 ; '.'
000000000001a347         db  0x00 ; '.'
000000000001a348         dd         0x0000003c                                  ; Length of the record
000000000001a34c         dd         0x000025ac                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a350         db         0x10, 0x92, 2 dup (0xff)                    ; begin 0x13560
000000000001a354         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x135e3)
000000000001a358         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a359         db  0x42 ; 'B'
000000000001a35a         db  0x0e ; '.'
000000000001a35b         db  0x10 ; '.'
000000000001a35c         db  0x8d ; '.'
000000000001a35d         db  0x02 ; '.'
000000000001a35e         db  0x42 ; 'B'
000000000001a35f         db  0x0e ; '.'
000000000001a360         db  0x18 ; '.'
000000000001a361         db  0x8c ; '.'
000000000001a362         db  0x03 ; '.'
000000000001a363         db  0x44 ; 'D'
000000000001a364         db  0x0e ; '.'
000000000001a365         db  0x20 ; ' '
000000000001a366         db  0x86 ; '.'
000000000001a367         db  0x04 ; '.'
000000000001a368         db  0x41 ; 'A'
000000000001a369         db  0x0e ; '.'
000000000001a36a         db  0x28 ; '('
000000000001a36b         db  0x83 ; '.'
000000000001a36c         db  0x05 ; '.'
000000000001a36d         db  0x4a ; 'J'
000000000001a36e         db  0x0e ; '.'
000000000001a36f         db  0x40 ; '@'
000000000001a370         db  0x02 ; '.'
000000000001a371         db  0x64 ; 'd'
000000000001a372         db  0x0a ; '.'
000000000001a373         db  0x0e ; '.'
000000000001a374         db  0x28 ; '('
000000000001a375         db  0x41 ; 'A'
000000000001a376         db  0x0e ; '.'
000000000001a377         db  0x20 ; ' '
000000000001a378         db  0x41 ; 'A'
000000000001a379         db  0x0e ; '.'
000000000001a37a         db  0x18 ; '.'
000000000001a37b         db  0x42 ; 'B'
000000000001a37c         db  0x0e ; '.'
000000000001a37d         db  0x10 ; '.'
000000000001a37e         db  0x42 ; 'B'
000000000001a37f         db  0x0e ; '.'
000000000001a380         db  0x08 ; '.'
000000000001a381         db  0x41 ; 'A'
000000000001a382         db  0x0b ; '.'
000000000001a383         db  0x00 ; '.'
000000000001a384         db  0x00 ; '.'
000000000001a385         db  0x00 ; '.'
000000000001a386         db  0x00 ; '.'
000000000001a387         db  0x00 ; '.'
000000000001a388         dd         0x00000014                                  ; Length of the record
000000000001a38c         dd         0x000025ec                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a390         db         0x60, 0x92, 2 dup (0xff)                    ; begin 0x135f0
000000000001a394         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x135f2)
000000000001a398         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a399         align      32
000000000001a3a0         dd         0x00000014                                  ; Length of the record
000000000001a3a4         dd         0x00002604                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a3a8         db         0x58, 0x92, 2 dup (0xff)                    ; begin 0x13600
000000000001a3ac         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x13605)
000000000001a3b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a3b1         align      8
000000000001a3b8         dd         0x00000010                                  ; Length of the record
000000000001a3bc         dd         0x0000261c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a3c0         db         0x50, 0x92, 2 dup (0xff)                    ; begin 0x13610
000000000001a3c4         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x13625)
000000000001a3c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a3c9         align      4
000000000001a3cc         dd         0x00000018                                  ; Length of the record
000000000001a3d0         dd         0x00002630                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a3d4         db         0x5c, 0x92, 2 dup (0xff)                    ; begin 0x13630
000000000001a3d8         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x13652)
000000000001a3dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a3dd         db  0x44 ; 'D'
000000000001a3de         db  0x0e ; '.'
000000000001a3df         db  0x10 ; '.'
000000000001a3e0         db  0x58 ; 'X'
000000000001a3e1         db  0x0e ; '.'
000000000001a3e2         db  0x08 ; '.'
000000000001a3e3         db  0x00 ; '.'
000000000001a3e4         db  0x00 ; '.'
000000000001a3e5         db  0x00 ; '.'
000000000001a3e6         db  0x00 ; '.'
000000000001a3e7         db  0x00 ; '.'
000000000001a3e8         dd         0x00000010                                  ; Length of the record
000000000001a3ec         dd         0x0000264c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a3f0         db         0x70, 0x92, 2 dup (0xff)                    ; begin 0x13660
000000000001a3f4         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x1366a)
000000000001a3f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a3f9         align      4
000000000001a3fc         dd         0x00000048                                  ; Length of the record
000000000001a400         dd         0x00002660                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a404         db         0x6c, 0x92, 2 dup (0xff)                    ; begin 0x13670
000000000001a408         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0x13786)
000000000001a40c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a40d         db  0x42 ; 'B'
000000000001a40e         db  0x0e ; '.'
000000000001a40f         db  0x10 ; '.'
000000000001a410         db  0x8f ; '.'
000000000001a411         db  0x02 ; '.'
000000000001a412         db  0x42 ; 'B'
000000000001a413         db  0x0e ; '.'
000000000001a414         db  0x18 ; '.'
000000000001a415         db  0x8e ; '.'
000000000001a416         db  0x03 ; '.'
000000000001a417         db  0x45 ; 'E'
000000000001a418         db  0x0e ; '.'
000000000001a419         db  0x20 ; ' '
000000000001a41a         db  0x8d ; '.'
000000000001a41b         db  0x04 ; '.'
000000000001a41c         db  0x42 ; 'B'
000000000001a41d         db  0x0e ; '.'
000000000001a41e         db  0x28 ; '('
000000000001a41f         db  0x8c ; '.'
000000000001a420         db  0x05 ; '.'
000000000001a421         db  0x44 ; 'D'
000000000001a422         db  0x0e ; '.'
000000000001a423         db  0x30 ; '0'
000000000001a424         db  0x86 ; '.'
000000000001a425         db  0x06 ; '.'
000000000001a426         db  0x41 ; 'A'
000000000001a427         db  0x0e ; '.'
000000000001a428         db  0x38 ; '8'
000000000001a429         db  0x83 ; '.'
000000000001a42a         db  0x07 ; '.'
000000000001a42b         db  0x47 ; 'G'
000000000001a42c         db  0x0e ; '.'
000000000001a42d         db  0x60 ; '`'
000000000001a42e         db  0x02 ; '.'
000000000001a42f         db  0xde ; '.'
000000000001a430         db  0x0a ; '.'
000000000001a431         db  0x0e ; '.'
000000000001a432         db  0x38 ; '8'
000000000001a433         db  0x41 ; 'A'
000000000001a434         db  0x0e ; '.'
000000000001a435         db  0x30 ; '0'
000000000001a436         db  0x41 ; 'A'
000000000001a437         db  0x0e ; '.'
000000000001a438         db  0x28 ; '('
000000000001a439         db  0x42 ; 'B'
000000000001a43a         db  0x0e ; '.'
000000000001a43b         db  0x20 ; ' '
000000000001a43c         db  0x42 ; 'B'
000000000001a43d         db  0x0e ; '.'
000000000001a43e         db  0x18 ; '.'
000000000001a43f         db  0x42 ; 'B'
000000000001a440         db  0x0e ; '.'
000000000001a441         db  0x10 ; '.'
000000000001a442         db  0x42 ; 'B'
000000000001a443         db  0x0e ; '.'
000000000001a444         db  0x08 ; '.'
000000000001a445         db  0x41 ; 'A'
000000000001a446         db  0x0b ; '.'
000000000001a447         db  0x00 ; '.'
000000000001a448         dd         0x00000028                                  ; Length of the record
000000000001a44c         dd         0x000026ac                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a450         db         0x40, 0x93, 2 dup (0xff)                    ; begin 0x13790
000000000001a454         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0x13803)
000000000001a458         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a459         db  0x46 ; 'F'
000000000001a45a         db  0x0e ; '.'
000000000001a45b         db  0x10 ; '.'
000000000001a45c         db  0x8c ; '.'
000000000001a45d         db  0x02 ; '.'
000000000001a45e         db  0x46 ; 'F'
000000000001a45f         db  0x0e ; '.'
000000000001a460         db  0x18 ; '.'
000000000001a461         db  0x86 ; '.'
000000000001a462         db  0x03 ; '.'
000000000001a463         db  0x44 ; 'D'
000000000001a464         db  0x0e ; '.'
000000000001a465         db  0x20 ; ' '
000000000001a466         db  0x83 ; '.'
000000000001a467         db  0x04 ; '.'
000000000001a468         db  0x7f ; '.'
000000000001a469         db  0x0a ; '.'
000000000001a46a         db  0x0e ; '.'
000000000001a46b         db  0x18 ; '.'
000000000001a46c         db  0x41 ; 'A'
000000000001a46d         db  0x0e ; '.'
000000000001a46e         db  0x10 ; '.'
000000000001a46f         db  0x42 ; 'B'
000000000001a470         db  0x0e ; '.'
000000000001a471         db  0x08 ; '.'
000000000001a472         db  0x4e ; 'N'
000000000001a473         db  0x0b ; '.'
000000000001a474         dd         0x0000005c                                  ; Length of the record
000000000001a478         dd         0x000026d8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a47c         db         0x94, 0x93, 2 dup (0xff)                    ; begin 0x13810
000000000001a480         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0x13930)
000000000001a484         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a485         db  0x42 ; 'B'
000000000001a486         db  0x0e ; '.'
000000000001a487         db  0x10 ; '.'
000000000001a488         db  0x8f ; '.'
000000000001a489         db  0x02 ; '.'
000000000001a48a         db  0x42 ; 'B'
000000000001a48b         db  0x0e ; '.'
000000000001a48c         db  0x18 ; '.'
000000000001a48d         db  0x8e ; '.'
000000000001a48e         db  0x03 ; '.'
000000000001a48f         db  0x45 ; 'E'
000000000001a490         db  0x0e ; '.'
000000000001a491         db  0x20 ; ' '
000000000001a492         db  0x8d ; '.'
000000000001a493         db  0x04 ; '.'
000000000001a494         db  0x42 ; 'B'
000000000001a495         db  0x0e ; '.'
000000000001a496         db  0x28 ; '('
000000000001a497         db  0x8c ; '.'
000000000001a498         db  0x05 ; '.'
000000000001a499         db  0x43 ; 'C'
000000000001a49a         db  0x0e ; '.'
000000000001a49b         db  0x30 ; '0'
000000000001a49c         db  0x86 ; '.'
000000000001a49d         db  0x06 ; '.'
000000000001a49e         db  0x41 ; 'A'
000000000001a49f         db  0x0e ; '.'
000000000001a4a0         db  0x38 ; '8'
000000000001a4a1         db  0x83 ; '.'
000000000001a4a2         db  0x07 ; '.'
000000000001a4a3         db  0x56 ; 'V'
000000000001a4a4         db  0x0e ; '.'
000000000001a4a5         db  0x40 ; '@'
000000000001a4a6         db  0x02 ; '.'
000000000001a4a7         db  0xd3 ; '.'
000000000001a4a8         db  0x0a ; '.'
000000000001a4a9         db  0x0e ; '.'
000000000001a4aa         db  0x38 ; '8'
000000000001a4ab         db  0x41 ; 'A'
000000000001a4ac         db  0x0e ; '.'
000000000001a4ad         db  0x30 ; '0'
000000000001a4ae         db  0x41 ; 'A'
000000000001a4af         db  0x0e ; '.'
000000000001a4b0         db  0x28 ; '('
000000000001a4b1         db  0x42 ; 'B'
000000000001a4b2         db  0x0e ; '.'
000000000001a4b3         db  0x20 ; ' '
000000000001a4b4         db  0x42 ; 'B'
000000000001a4b5         db  0x0e ; '.'
000000000001a4b6         db  0x18 ; '.'
000000000001a4b7         db  0x42 ; 'B'
000000000001a4b8         db  0x0e ; '.'
000000000001a4b9         db  0x10 ; '.'
000000000001a4ba         db  0x42 ; 'B'
000000000001a4bb         db  0x0e ; '.'
000000000001a4bc         db  0x08 ; '.'
000000000001a4bd         db  0x46 ; 'F'
000000000001a4be         db  0x0b ; '.'
000000000001a4bf         db  0x44 ; 'D'
000000000001a4c0         db  0x0e ; '.'
000000000001a4c1         db  0x38 ; '8'
000000000001a4c2         db  0x46 ; 'F'
000000000001a4c3         db  0x0e ; '.'
000000000001a4c4         db  0x30 ; '0'
000000000001a4c5         db  0x41 ; 'A'
000000000001a4c6         db  0x0e ; '.'
000000000001a4c7         db  0x28 ; '('
000000000001a4c8         db  0x42 ; 'B'
000000000001a4c9         db  0x0e ; '.'
000000000001a4ca         db  0x20 ; ' '
000000000001a4cb         db  0x42 ; 'B'
000000000001a4cc         db  0x0e ; '.'
000000000001a4cd         db  0x18 ; '.'
000000000001a4ce         db  0x42 ; 'B'
000000000001a4cf         db  0x0e ; '.'
000000000001a4d0         db  0x10 ; '.'
000000000001a4d1         db  0x42 ; 'B'
000000000001a4d2         db  0x0e ; '.'
000000000001a4d3         db  0x08 ; '.'
000000000001a4d4         dd         0x00000048                                  ; Length of the record
000000000001a4d8         dd         0x00002738                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a4dc         db         0x54, 0x94, 2 dup (0xff)                    ; begin 0x13930
000000000001a4e0         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0x1399d)
000000000001a4e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a4e5         db  0x42 ; 'B'
000000000001a4e6         db  0x0e ; '.'
000000000001a4e7         db  0x10 ; '.'
000000000001a4e8         db  0x8f ; '.'
000000000001a4e9         db  0x02 ; '.'
000000000001a4ea         db  0x42 ; 'B'
000000000001a4eb         db  0x0e ; '.'
000000000001a4ec         db  0x18 ; '.'
000000000001a4ed         db  0x8e ; '.'
000000000001a4ee         db  0x03 ; '.'
000000000001a4ef         db  0x45 ; 'E'
000000000001a4f0         db  0x0e ; '.'
000000000001a4f1         db  0x20 ; ' '
000000000001a4f2         db  0x8d ; '.'
000000000001a4f3         db  0x04 ; '.'
000000000001a4f4         db  0x42 ; 'B'
000000000001a4f5         db  0x0e ; '.'
000000000001a4f6         db  0x28 ; '('
000000000001a4f7         db  0x8c ; '.'
000000000001a4f8         db  0x05 ; '.'
000000000001a4f9         db  0x44 ; 'D'
000000000001a4fa         db  0x0e ; '.'
000000000001a4fb         db  0x30 ; '0'
000000000001a4fc         db  0x86 ; '.'
000000000001a4fd         db  0x06 ; '.'
000000000001a4fe         db  0x41 ; 'A'
000000000001a4ff         db  0x0e ; '.'
000000000001a500         db  0x38 ; '8'
000000000001a501         db  0x83 ; '.'
000000000001a502         db  0x07 ; '.'
000000000001a503         db  0x50 ; 'P'
000000000001a504         db  0x0e ; '.'
000000000001a505         db  0x40 ; '@'
000000000001a506         db  0x5a ; 'Z'
000000000001a507         db  0x0a ; '.'
000000000001a508         db  0x0e ; '.'
000000000001a509         db  0x38 ; '8'
000000000001a50a         db  0x41 ; 'A'
000000000001a50b         db  0x0e ; '.'
000000000001a50c         db  0x30 ; '0'
000000000001a50d         db  0x41 ; 'A'
000000000001a50e         db  0x0e ; '.'
000000000001a50f         db  0x28 ; '('
000000000001a510         db  0x42 ; 'B'
000000000001a511         db  0x0e ; '.'
000000000001a512         db  0x20 ; ' '
000000000001a513         db  0x42 ; 'B'
000000000001a514         db  0x0e ; '.'
000000000001a515         db  0x18 ; '.'
000000000001a516         db  0x42 ; 'B'
000000000001a517         db  0x0e ; '.'
000000000001a518         db  0x10 ; '.'
000000000001a519         db  0x42 ; 'B'
000000000001a51a         db  0x0e ; '.'
000000000001a51b         db  0x08 ; '.'
000000000001a51c         db  0x41 ; 'A'
000000000001a51d         db  0x0b ; '.'
000000000001a51e         db  0x00 ; '.'
000000000001a51f         db  0x00 ; '.'
000000000001a520         dd         0x0000003c                                  ; Length of the record
000000000001a524         dd         0x00002784                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a528         db         0x78, 0x94, 2 dup (0xff)                    ; begin 0x139a0
000000000001a52c         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0x139ed)
000000000001a530         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a531         db  0x42 ; 'B'
000000000001a532         db  0x0e ; '.'
000000000001a533         db  0x10 ; '.'
000000000001a534         db  0x8e ; '.'
000000000001a535         db  0x02 ; '.'
000000000001a536         db  0x42 ; 'B'
000000000001a537         db  0x0e ; '.'
000000000001a538         db  0x18 ; '.'
000000000001a539         db  0x8d ; '.'
000000000001a53a         db  0x03 ; '.'
000000000001a53b         db  0x42 ; 'B'
000000000001a53c         db  0x0e ; '.'
000000000001a53d         db  0x20 ; ' '
000000000001a53e         db  0x8c ; '.'
000000000001a53f         db  0x04 ; '.'
000000000001a540         db  0x41 ; 'A'
000000000001a541         db  0x0e ; '.'
000000000001a542         db  0x28 ; '('
000000000001a543         db  0x86 ; '.'
000000000001a544         db  0x05 ; '.'
000000000001a545         db  0x41 ; 'A'
000000000001a546         db  0x0e ; '.'
000000000001a547         db  0x30 ; '0'
000000000001a548         db  0x83 ; '.'
000000000001a549         db  0x06 ; '.'
000000000001a54a         db  0x7a ; 'z'
000000000001a54b         db  0x0e ; '.'
000000000001a54c         db  0x28 ; '('
000000000001a54d         db  0x44 ; 'D'
000000000001a54e         db  0x0e ; '.'
000000000001a54f         db  0x20 ; ' '
000000000001a550         db  0x42 ; 'B'
000000000001a551         db  0x0e ; '.'
000000000001a552         db  0x18 ; '.'
000000000001a553         db  0x42 ; 'B'
000000000001a554         db  0x0e ; '.'
000000000001a555         db  0x10 ; '.'
000000000001a556         db  0x42 ; 'B'
000000000001a557         db  0x0e ; '.'
000000000001a558         db  0x08 ; '.'
000000000001a559         db  0x00 ; '.'
000000000001a55a         db  0x00 ; '.'
000000000001a55b         db  0x00 ; '.'
000000000001a55c         db  0x00 ; '.'
000000000001a55d         db  0x00 ; '.'
000000000001a55e         db  0x00 ; '.'
000000000001a55f         db  0x00 ; '.'
000000000001a560         dd         0x0000004c                                  ; Length of the record
000000000001a564         dd         0x000027c4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a568         db         0x88, 0x94, 2 dup (0xff)                    ; begin 0x139f0
000000000001a56c         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x13a6d)
000000000001a570         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a571         db  0x42 ; 'B'
000000000001a572         db  0x0e ; '.'
000000000001a573         db  0x10 ; '.'
000000000001a574         db  0x8c ; '.'
000000000001a575         db  0x02 ; '.'
000000000001a576         db  0x41 ; 'A'
000000000001a577         db  0x0e ; '.'
000000000001a578         db  0x18 ; '.'
000000000001a579         db  0x86 ; '.'
000000000001a57a         db  0x03 ; '.'
000000000001a57b         db  0x44 ; 'D'
000000000001a57c         db  0x0e ; '.'
000000000001a57d         db  0x20 ; ' '
000000000001a57e         db  0x83 ; '.'
000000000001a57f         db  0x04 ; '.'
000000000001a580         db  0x69 ; 'i'
000000000001a581         db  0x0a ; '.'
000000000001a582         db  0x0e ; '.'
000000000001a583         db  0x18 ; '.'
000000000001a584         db  0x41 ; 'A'
000000000001a585         db  0x0e ; '.'
000000000001a586         db  0x10 ; '.'
000000000001a587         db  0x42 ; 'B'
000000000001a588         db  0x0e ; '.'
000000000001a589         db  0x08 ; '.'
000000000001a58a         db  0x45 ; 'E'
000000000001a58b         db  0x0b ; '.'
000000000001a58c         db  0x55 ; 'U'
000000000001a58d         db  0x0a ; '.'
000000000001a58e         db  0x0e ; '.'
000000000001a58f         db  0x18 ; '.'
000000000001a590         db  0x41 ; 'A'
000000000001a591         db  0x0e ; '.'
000000000001a592         db  0x10 ; '.'
000000000001a593         db  0x42 ; 'B'
000000000001a594         db  0x0e ; '.'
000000000001a595         db  0x08 ; '.'
000000000001a596         db  0x48 ; 'H'
000000000001a597         db  0x0b ; '.'
000000000001a598         db  0x41 ; 'A'
000000000001a599         db  0x0a ; '.'
000000000001a59a         db  0x0e ; '.'
000000000001a59b         db  0x18 ; '.'
000000000001a59c         db  0x46 ; 'F'
000000000001a59d         db  0x0e ; '.'
000000000001a59e         db  0x10 ; '.'
000000000001a59f         db  0x42 ; 'B'
000000000001a5a0         db  0x0e ; '.'
000000000001a5a1         db  0x08 ; '.'
000000000001a5a2         db  0x47 ; 'G'
000000000001a5a3         db  0x0b ; '.'
000000000001a5a4         db  0x49 ; 'I'
000000000001a5a5         db  0x0e ; '.'
000000000001a5a6         db  0x18 ; '.'
000000000001a5a7         db  0x41 ; 'A'
000000000001a5a8         db  0x0e ; '.'
000000000001a5a9         db  0x10 ; '.'
000000000001a5aa         db  0x42 ; 'B'
000000000001a5ab         db  0x0e ; '.'
000000000001a5ac         db  0x08 ; '.'
000000000001a5ad         db  0x00 ; '.'
000000000001a5ae         db  0x00 ; '.'
000000000001a5af         db  0x00 ; '.'
000000000001a5b0         dd         0x00000010                                  ; Length of the record
000000000001a5b4         dd         0x00002814                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a5b8         db         0xb8, 0x94, 2 dup (0xff)                    ; begin 0x13a70
000000000001a5bc         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x13a80)
000000000001a5c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a5c1         align      4
000000000001a5c4         dd         0x00000018                                  ; Length of the record
000000000001a5c8         dd         0x00002828                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a5cc         db         0xb4, 0x94, 2 dup (0xff)                    ; begin 0x13a80
000000000001a5d0         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x13b0a)
000000000001a5d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a5d5         db  0x02 ; '.'
000000000001a5d6         db  0x80 ; '.'
000000000001a5d7         db  0x0e ; '.'
000000000001a5d8         db  0x10 ; '.'
000000000001a5d9         db  0x00 ; '.'
000000000001a5da         db  0x00 ; '.'
000000000001a5db         db  0x00 ; '.'
000000000001a5dc         db  0x00 ; '.'
000000000001a5dd         db  0x00 ; '.'
000000000001a5de         db  0x00 ; '.'
000000000001a5df         db  0x00 ; '.'
000000000001a5e0         dd         0x0000004c                                  ; Length of the record
000000000001a5e4         dd         0x00002844                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a5e8         db         0x28, 0x95, 2 dup (0xff)                    ; begin 0x13b10
000000000001a5ec         db         0x96, 3 dup (0x00)                          ; length 0x96 (end at 0x13ba6)
000000000001a5f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a5f1         db  0x42 ; 'B'
000000000001a5f2         db  0x0e ; '.'
000000000001a5f3         db  0x10 ; '.'
000000000001a5f4         db  0x8e ; '.'
000000000001a5f5         db  0x02 ; '.'
000000000001a5f6         db  0x42 ; 'B'
000000000001a5f7         db  0x0e ; '.'
000000000001a5f8         db  0x18 ; '.'
000000000001a5f9         db  0x8d ; '.'
000000000001a5fa         db  0x03 ; '.'
000000000001a5fb         db  0x42 ; 'B'
000000000001a5fc         db  0x0e ; '.'
000000000001a5fd         db  0x20 ; ' '
000000000001a5fe         db  0x8c ; '.'
000000000001a5ff         db  0x04 ; '.'
000000000001a600         db  0x41 ; 'A'
000000000001a601         db  0x0e ; '.'
000000000001a602         db  0x28 ; '('
000000000001a603         db  0x86 ; '.'
000000000001a604         db  0x05 ; '.'
000000000001a605         db  0x41 ; 'A'
000000000001a606         db  0x0e ; '.'
000000000001a607         db  0x30 ; '0'
000000000001a608         db  0x83 ; '.'
000000000001a609         db  0x06 ; '.'
000000000001a60a         db  0x5e ; '^'
000000000001a60b         db  0x0a ; '.'
000000000001a60c         db  0x0e ; '.'
000000000001a60d         db  0x28 ; '('
000000000001a60e         db  0x41 ; 'A'
000000000001a60f         db  0x0e ; '.'
000000000001a610         db  0x20 ; ' '
000000000001a611         db  0x42 ; 'B'
000000000001a612         db  0x0e ; '.'
000000000001a613         db  0x18 ; '.'
000000000001a614         db  0x42 ; 'B'
000000000001a615         db  0x0e ; '.'
000000000001a616         db  0x10 ; '.'
000000000001a617         db  0x42 ; 'B'
000000000001a618         db  0x0e ; '.'
000000000001a619         db  0x08 ; '.'
000000000001a61a         db  0x43 ; 'C'
000000000001a61b         db  0x0b ; '.'
000000000001a61c         db  0x7c ; '|'
000000000001a61d         db  0x0a ; '.'
000000000001a61e         db  0x0e ; '.'
000000000001a61f         db  0x28 ; '('
000000000001a620         db  0x41 ; 'A'
000000000001a621         db  0x0e ; '.'
000000000001a622         db  0x20 ; ' '
000000000001a623         db  0x42 ; 'B'
000000000001a624         db  0x0e ; '.'
000000000001a625         db  0x18 ; '.'
000000000001a626         db  0x42 ; 'B'
000000000001a627         db  0x0e ; '.'
000000000001a628         db  0x10 ; '.'
000000000001a629         db  0x42 ; 'B'
000000000001a62a         db  0x0e ; '.'
000000000001a62b         db  0x08 ; '.'
000000000001a62c         db  0x45 ; 'E'
000000000001a62d         db  0x0b ; '.'
000000000001a62e         db  0x00 ; '.'
000000000001a62f         db  0x00 ; '.'
000000000001a630         dd         0x00000010                                  ; Length of the record
000000000001a634         dd         0x00002894                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a638         db         0x78, 0x95, 2 dup (0xff)                    ; begin 0x13bb0
000000000001a63c         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x13bba)
000000000001a640         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a641         align      4
000000000001a644         dd         0x00000018                                  ; Length of the record
000000000001a648         dd         0x000028a8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a64c         db         0x74, 0x95, 2 dup (0xff)                    ; begin 0x13bc0
000000000001a650         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x13c01)
000000000001a654         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a655         db  0x44 ; 'D'
000000000001a656         db  0x0e ; '.'
000000000001a657         db  0x30 ; '0'
000000000001a658         db  0x77 ; 'w'
000000000001a659         db  0x0a ; '.'
000000000001a65a         db  0x0e ; '.'
000000000001a65b         db  0x08 ; '.'
000000000001a65c         db  0x41 ; 'A'
000000000001a65d         db  0x0b ; '.'
000000000001a65e         db  0x00 ; '.'
000000000001a65f         db  0x00 ; '.'
000000000001a660         dd         0x0000001c                                  ; Length of the record
000000000001a664         dd         0x000028c4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a668         db         0xa8, 0x95, 2 dup (0xff)                    ; begin 0x13c10
000000000001a66c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x13c70)
000000000001a670         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a671         db  0x44 ; 'D'
000000000001a672         db  0x0e ; '.'
000000000001a673         db  0x10 ; '.'
000000000001a674         db  0x75 ; 'u'
000000000001a675         db  0x0a ; '.'
000000000001a676         db  0x0e ; '.'
000000000001a677         db  0x08 ; '.'
000000000001a678         db  0x47 ; 'G'
000000000001a679         db  0x0b ; '.'
000000000001a67a         db  0x5f ; '_'
000000000001a67b         db  0x0e ; '.'
000000000001a67c         db  0x08 ; '.'
000000000001a67d         db  0x00 ; '.'
000000000001a67e         db  0x00 ; '.'
000000000001a67f         db  0x00 ; '.'
000000000001a680         dd         0x00000014                                  ; Length of the record
000000000001a684         dd         0x000028e4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a688         db         0xe8, 0x95, 2 dup (0xff)                    ; begin 0x13c70
000000000001a68c         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x13ca6)
000000000001a690         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a691         align      8
000000000001a698         dd         0x00000010                                  ; Length of the record
000000000001a69c         dd         0x000028fc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a6a0         db         0x10, 0x96, 2 dup (0xff)                    ; begin 0x13cb0
000000000001a6a4         db         0x1b, 3 dup (0x00)                          ; length 0x1b (end at 0x13ccb)
000000000001a6a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a6a9         align      4
000000000001a6ac         dd         0x00000010                                  ; Length of the record
000000000001a6b0         dd         0x00002910                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a6b4         db         0x1c, 0x96, 2 dup (0xff)                    ; begin 0x13cd0
000000000001a6b8         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x13cd5)
000000000001a6bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a6bd         align      64
000000000001a6c0         dd         0x00000010                                  ; Length of the record
000000000001a6c4         dd         0x00002924                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a6c8         db         0x18, 0x96, 2 dup (0xff)                    ; begin 0x13ce0
000000000001a6cc         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x13d15)
000000000001a6d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a6d1         align      4
000000000001a6d4         dd         0x00000010                                  ; Length of the record
000000000001a6d8         dd         0x00002938                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a6dc         db         0x44, 0x96, 2 dup (0xff)                    ; begin 0x13d20
000000000001a6e0         db         0x3e, 3 dup (0x00)                          ; length 0x3e (end at 0x13d5e)
000000000001a6e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a6e5         db  0x79 ; 'y'
000000000001a6e6         db  0x0e ; '.'
000000000001a6e7         db  0x10 ; '.'
000000000001a6e8         dd         0x0000001c                                  ; Length of the record
000000000001a6ec         dd         0x0000294c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a6f0         db         0x70, 0x96, 2 dup (0xff)                    ; begin 0x13d60
000000000001a6f4         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x13d9c)
000000000001a6f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a6f9         db  0x44 ; 'D'
000000000001a6fa         db  0x0e ; '.'
000000000001a6fb         db  0x10 ; '.'
000000000001a6fc         db  0x61 ; 'a'
000000000001a6fd         db  0x0a ; '.'
000000000001a6fe         db  0x0e ; '.'
000000000001a6ff         db  0x08 ; '.'
000000000001a700         db  0x4b ; 'K'
000000000001a701         db  0x0b ; '.'
000000000001a702         db  0x4b ; 'K'
000000000001a703         db  0x0e ; '.'
000000000001a704         db  0x08 ; '.'
000000000001a705         db  0x00 ; '.'
000000000001a706         db  0x00 ; '.'
000000000001a707         db  0x00 ; '.'
000000000001a708         dd         0x0000001c                                  ; Length of the record
000000000001a70c         dd         0x0000296c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a710         db         0x90, 0x96, 2 dup (0xff)                    ; begin 0x13da0
000000000001a714         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x13e0e)
000000000001a718         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a719         db  0x44 ; 'D'
000000000001a71a         db  0x0e ; '.'
000000000001a71b         db  0x60 ; '`'
000000000001a71c         db  0x7e ; '~'
000000000001a71d         db  0x0a ; '.'
000000000001a71e         db  0x0e ; '.'
000000000001a71f         db  0x08 ; '.'
000000000001a720         db  0x46 ; 'F'
000000000001a721         db  0x0b ; '.'
000000000001a722         db  0x00 ; '.'
000000000001a723         db  0x00 ; '.'
000000000001a724         db  0x00 ; '.'
000000000001a725         db  0x00 ; '.'
000000000001a726         db  0x00 ; '.'
000000000001a727         db  0x00 ; '.'
000000000001a728         dd         0x00000018                                  ; Length of the record
000000000001a72c         dd         0x0000298c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a730         db         0xe0, 0x96, 2 dup (0xff)                    ; begin 0x13e10
000000000001a734         db         0x23, 3 dup (0x00)                          ; length 0x23 (end at 0x13e33)
000000000001a738         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a739         db  0x41 ; 'A'
000000000001a73a         db  0x0e ; '.'
000000000001a73b         db  0x10 ; '.'
000000000001a73c         db  0x83 ; '.'
000000000001a73d         db  0x02 ; '.'
000000000001a73e         db  0x61 ; 'a'
000000000001a73f         db  0x0e ; '.'
000000000001a740         db  0x08 ; '.'
000000000001a741         db  0x00 ; '.'
000000000001a742         db  0x00 ; '.'
000000000001a743         db  0x00 ; '.'
000000000001a744         dd         0x0000001c                                  ; Length of the record
000000000001a748         dd         0x000029a8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a74c         db         0xf4, 0x96, 2 dup (0xff)                    ; begin 0x13e40
000000000001a750         db         0x34, 3 dup (0x00)                          ; length 0x34 (end at 0x13e74)
000000000001a754         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a755         db  0x41 ; 'A'
000000000001a756         db  0x0e ; '.'
000000000001a757         db  0x10 ; '.'
000000000001a758         db  0x83 ; '.'
000000000001a759         db  0x02 ; '.'
000000000001a75a         db  0x6b ; 'k'
000000000001a75b         db  0x0a ; '.'
000000000001a75c         db  0x0e ; '.'
000000000001a75d         db  0x08 ; '.'
000000000001a75e         db  0x44 ; 'D'
000000000001a75f         db  0x0b ; '.'
000000000001a760         db  0x43 ; 'C'
000000000001a761         db  0x0e ; '.'
000000000001a762         db  0x08 ; '.'
000000000001a763         db  0x00 ; '.'
000000000001a764         dd         0x00000010                                  ; Length of the record
000000000001a768         dd         0x000029c8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a76c         db         0x14, 0x97, 2 dup (0xff)                    ; begin 0x13e80
000000000001a770         db         0x04, 3 dup (0x00)                          ; length 0x4 (end at 0x13e84)
000000000001a774         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a775         align      8
000000000001a778         dd         0x00000048                                  ; Length of the record
000000000001a77c         dd         0x000029dc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a780         db         0x10, 0x97, 2 dup (0xff)                    ; begin 0x13e90
000000000001a784         db         0x1a, 0x01, 2 dup (0x00)                    ; length 0x11a (end at 0x13faa)
000000000001a788         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a789         db  0x42 ; 'B'
000000000001a78a         db  0x0e ; '.'
000000000001a78b         db  0x10 ; '.'
000000000001a78c         db  0x8f ; '.'
000000000001a78d         db  0x02 ; '.'
000000000001a78e         db  0x42 ; 'B'
000000000001a78f         db  0x0e ; '.'
000000000001a790         db  0x18 ; '.'
000000000001a791         db  0x8e ; '.'
000000000001a792         db  0x03 ; '.'
000000000001a793         db  0x46 ; 'F'
000000000001a794         db  0x0e ; '.'
000000000001a795         db  0x20 ; ' '
000000000001a796         db  0x8d ; '.'
000000000001a797         db  0x04 ; '.'
000000000001a798         db  0x42 ; 'B'
000000000001a799         db  0x0e ; '.'
000000000001a79a         db  0x28 ; '('
000000000001a79b         db  0x8c ; '.'
000000000001a79c         db  0x05 ; '.'
000000000001a79d         db  0x44 ; 'D'
000000000001a79e         db  0x0e ; '.'
000000000001a79f         db  0x30 ; '0'
000000000001a7a0         db  0x86 ; '.'
000000000001a7a1         db  0x06 ; '.'
000000000001a7a2         db  0x41 ; 'A'
000000000001a7a3         db  0x0e ; '.'
000000000001a7a4         db  0x38 ; '8'
000000000001a7a5         db  0x83 ; '.'
000000000001a7a6         db  0x07 ; '.'
000000000001a7a7         db  0x47 ; 'G'
000000000001a7a8         db  0x0e ; '.'
000000000001a7a9         db  0x60 ; '`'
000000000001a7aa         db  0x02 ; '.'
000000000001a7ab         db  0xde ; '.'
000000000001a7ac         db  0x0a ; '.'
000000000001a7ad         db  0x0e ; '.'
000000000001a7ae         db  0x38 ; '8'
000000000001a7af         db  0x41 ; 'A'
000000000001a7b0         db  0x0e ; '.'
000000000001a7b1         db  0x30 ; '0'
000000000001a7b2         db  0x41 ; 'A'
000000000001a7b3         db  0x0e ; '.'
000000000001a7b4         db  0x28 ; '('
000000000001a7b5         db  0x42 ; 'B'
000000000001a7b6         db  0x0e ; '.'
000000000001a7b7         db  0x20 ; ' '
000000000001a7b8         db  0x42 ; 'B'
000000000001a7b9         db  0x0e ; '.'
000000000001a7ba         db  0x18 ; '.'
000000000001a7bb         db  0x42 ; 'B'
000000000001a7bc         db  0x0e ; '.'
000000000001a7bd         db  0x10 ; '.'
000000000001a7be         db  0x42 ; 'B'
000000000001a7bf         db  0x0e ; '.'
000000000001a7c0         db  0x08 ; '.'
000000000001a7c1         db  0x48 ; 'H'
000000000001a7c2         db  0x0b ; '.'
000000000001a7c3         db  0x00 ; '.'
000000000001a7c4         dd         0x00000018                                  ; Length of the record
000000000001a7c8         dd         0x00002a28                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a7cc         db         0xe4, 0x97, 2 dup (0xff)                    ; begin 0x13fb0
000000000001a7d0         db         0x1e, 3 dup (0x00)                          ; length 0x1e (end at 0x13fce)
000000000001a7d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a7d5         db  0x41 ; 'A'
000000000001a7d6         db  0x0e ; '.'
000000000001a7d7         db  0x10 ; '.'
000000000001a7d8         db  0x83 ; '.'
000000000001a7d9         db  0x02 ; '.'
000000000001a7da         db  0x58 ; 'X'
000000000001a7db         db  0x0e ; '.'
000000000001a7dc         db  0x08 ; '.'
000000000001a7dd         db  0x00 ; '.'
000000000001a7de         db  0x00 ; '.'
000000000001a7df         db  0x00 ; '.'
000000000001a7e0         dd         0x00000034                                  ; Length of the record
000000000001a7e4         dd         0x00002a44                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a7e8         db         0xe8, 0x97, 2 dup (0xff)                    ; begin 0x13fd0
000000000001a7ec         db         0x51, 3 dup (0x00)                          ; length 0x51 (end at 0x14021)
000000000001a7f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a7f1         db  0x42 ; 'B'
000000000001a7f2         db  0x0e ; '.'
000000000001a7f3         db  0x10 ; '.'
000000000001a7f4         db  0x8d ; '.'
000000000001a7f5         db  0x02 ; '.'
000000000001a7f6         db  0x42 ; 'B'
000000000001a7f7         db  0x0e ; '.'
000000000001a7f8         db  0x18 ; '.'
000000000001a7f9         db  0x8c ; '.'
000000000001a7fa         db  0x03 ; '.'
000000000001a7fb         db  0x41 ; 'A'
000000000001a7fc         db  0x0e ; '.'
000000000001a7fd         db  0x20 ; ' '
000000000001a7fe         db  0x86 ; '.'
000000000001a7ff         db  0x04 ; '.'
000000000001a800         db  0x41 ; 'A'
000000000001a801         db  0x0e ; '.'
000000000001a802         db  0x28 ; '('
000000000001a803         db  0x83 ; '.'
000000000001a804         db  0x05 ; '.'
000000000001a805         db  0x47 ; 'G'
000000000001a806         db  0x0e ; '.'
000000000001a807         db  0x30 ; '0'
000000000001a808         db  0x7a ; 'z'
000000000001a809         db  0x0e ; '.'
000000000001a80a         db  0x28 ; '('
000000000001a80b         db  0x44 ; 'D'
000000000001a80c         db  0x0e ; '.'
000000000001a80d         db  0x20 ; ' '
000000000001a80e         db  0x41 ; 'A'
000000000001a80f         db  0x0e ; '.'
000000000001a810         db  0x18 ; '.'
000000000001a811         db  0x42 ; 'B'
000000000001a812         db  0x0e ; '.'
000000000001a813         db  0x10 ; '.'
000000000001a814         db  0x42 ; 'B'
000000000001a815         db  0x0e ; '.'
000000000001a816         db  0x08 ; '.'
000000000001a817         db  0x00 ; '.'
000000000001a818         dd         0x0000001c                                  ; Length of the record
000000000001a81c         dd         0x00002a7c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a820         db         0x10, 0x98, 2 dup (0xff)                    ; begin 0x14030
000000000001a824         db         0x5d, 3 dup (0x00)                          ; length 0x5d (end at 0x1408d)
000000000001a828         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a829         db  0x41 ; 'A'
000000000001a82a         db  0x0e ; '.'
000000000001a82b         db  0x10 ; '.'
000000000001a82c         db  0x86 ; '.'
000000000001a82d         db  0x02 ; '.'
000000000001a82e         db  0x41 ; 'A'
000000000001a82f         db  0x0e ; '.'
000000000001a830         db  0x18 ; '.'
000000000001a831         db  0x83 ; '.'
000000000001a832         db  0x03 ; '.'
000000000001a833         db  0x44 ; 'D'
000000000001a834         db  0x0e ; '.'
000000000001a835         db  0x20 ; ' '
000000000001a836         db  0x00 ; '.'
000000000001a837         db  0x00 ; '.'
000000000001a838         dd         0x00000048                                  ; Length of the record
000000000001a83c         dd         0x00002a9c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a840         db         0x50, 0x98, 2 dup (0xff)                    ; begin 0x14090
000000000001a844         db         0x29, 0x03, 2 dup (0x00)                    ; length 0x329 (end at 0x143b9)
000000000001a848         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a849         db  0x42 ; 'B'
000000000001a84a         db  0x0e ; '.'
000000000001a84b         db  0x10 ; '.'
000000000001a84c         db  0x8f ; '.'
000000000001a84d         db  0x02 ; '.'
000000000001a84e         db  0x42 ; 'B'
000000000001a84f         db  0x0e ; '.'
000000000001a850         db  0x18 ; '.'
000000000001a851         db  0x8e ; '.'
000000000001a852         db  0x03 ; '.'
000000000001a853         db  0x42 ; 'B'
000000000001a854         db  0x0e ; '.'
000000000001a855         db  0x20 ; ' '
000000000001a856         db  0x8d ; '.'
000000000001a857         db  0x04 ; '.'
000000000001a858         db  0x42 ; 'B'
000000000001a859         db  0x0e ; '.'
000000000001a85a         db  0x28 ; '('
000000000001a85b         db  0x8c ; '.'
000000000001a85c         db  0x05 ; '.'
000000000001a85d         db  0x41 ; 'A'
000000000001a85e         db  0x0e ; '.'
000000000001a85f         db  0x30 ; '0'
000000000001a860         db  0x86 ; '.'
000000000001a861         db  0x06 ; '.'
000000000001a862         db  0x41 ; 'A'
000000000001a863         db  0x0e ; '.'
000000000001a864         db  0x38 ; '8'
000000000001a865         db  0x83 ; '.'
000000000001a866         db  0x07 ; '.'
000000000001a867         db  0x44 ; 'D'
000000000001a868         db  0x0e ; '.'
000000000001a869         db  0x70 ; 'p'
000000000001a86a         db  0x02 ; '.'
000000000001a86b         db  0x94 ; '.'
000000000001a86c         db  0x0a ; '.'
000000000001a86d         db  0x0e ; '.'
000000000001a86e         db  0x38 ; '8'
000000000001a86f         db  0x41 ; 'A'
000000000001a870         db  0x0e ; '.'
000000000001a871         db  0x30 ; '0'
000000000001a872         db  0x41 ; 'A'
000000000001a873         db  0x0e ; '.'
000000000001a874         db  0x28 ; '('
000000000001a875         db  0x42 ; 'B'
000000000001a876         db  0x0e ; '.'
000000000001a877         db  0x20 ; ' '
000000000001a878         db  0x42 ; 'B'
000000000001a879         db  0x0e ; '.'
000000000001a87a         db  0x18 ; '.'
000000000001a87b         db  0x42 ; 'B'
000000000001a87c         db  0x0e ; '.'
000000000001a87d         db  0x10 ; '.'
000000000001a87e         db  0x42 ; 'B'
000000000001a87f         db  0x0e ; '.'
000000000001a880         db  0x08 ; '.'
000000000001a881         db  0x44 ; 'D'
000000000001a882         db  0x0b ; '.'
000000000001a883         db  0x00 ; '.'
000000000001a884         dd         0x00000010                                  ; Length of the record
000000000001a888         dd         0x00002ae8                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a88c         db         0x34, 0x9b, 2 dup (0xff)                    ; begin 0x143c0
000000000001a890         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x143c5)
000000000001a894         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a895         align      8
000000000001a898         dd         0x00000010                                  ; Length of the record
000000000001a89c         dd         0x00002afc                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a8a0         db         0x30, 0x9b, 2 dup (0xff)                    ; begin 0x143d0
000000000001a8a4         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x143d5)
000000000001a8a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a8a9         align      4
000000000001a8ac         dd         0x00000060                                  ; Length of the record
000000000001a8b0         dd         0x00002b10                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a8b4         db         0x2c, 0x9b, 2 dup (0xff)                    ; begin 0x143e0
000000000001a8b8         db         0x96, 0x01, 2 dup (0x00)                    ; length 0x196 (end at 0x14576)
000000000001a8bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a8bd         db  0x42 ; 'B'
000000000001a8be         db  0x0e ; '.'
000000000001a8bf         db  0x10 ; '.'
000000000001a8c0         db  0x8f ; '.'
000000000001a8c1         db  0x02 ; '.'
000000000001a8c2         db  0x42 ; 'B'
000000000001a8c3         db  0x0e ; '.'
000000000001a8c4         db  0x18 ; '.'
000000000001a8c5         db  0x8e ; '.'
000000000001a8c6         db  0x03 ; '.'
000000000001a8c7         db  0x42 ; 'B'
000000000001a8c8         db  0x0e ; '.'
000000000001a8c9         db  0x20 ; ' '
000000000001a8ca         db  0x8d ; '.'
000000000001a8cb         db  0x04 ; '.'
000000000001a8cc         db  0x42 ; 'B'
000000000001a8cd         db  0x0e ; '.'
000000000001a8ce         db  0x28 ; '('
000000000001a8cf         db  0x8c ; '.'
000000000001a8d0         db  0x05 ; '.'
000000000001a8d1         db  0x44 ; 'D'
000000000001a8d2         db  0x0e ; '.'
000000000001a8d3         db  0x30 ; '0'
000000000001a8d4         db  0x86 ; '.'
000000000001a8d5         db  0x06 ; '.'
000000000001a8d6         db  0x41 ; 'A'
000000000001a8d7         db  0x0e ; '.'
000000000001a8d8         db  0x38 ; '8'
000000000001a8d9         db  0x83 ; '.'
000000000001a8da         db  0x07 ; '.'
000000000001a8db         db  0x4a ; 'J'
000000000001a8dc         db  0x0e ; '.'
000000000001a8dd         db  0x50 ; 'P'
000000000001a8de         db  0x02 ; '.'
000000000001a8df         db  0x5f ; '_'
000000000001a8e0         db  0x0a ; '.'
000000000001a8e1         db  0x0e ; '.'
000000000001a8e2         db  0x38 ; '8'
000000000001a8e3         db  0x41 ; 'A'
000000000001a8e4         db  0x0e ; '.'
000000000001a8e5         db  0x30 ; '0'
000000000001a8e6         db  0x41 ; 'A'
000000000001a8e7         db  0x0e ; '.'
000000000001a8e8         db  0x28 ; '('
000000000001a8e9         db  0x42 ; 'B'
000000000001a8ea         db  0x0e ; '.'
000000000001a8eb         db  0x20 ; ' '
000000000001a8ec         db  0x42 ; 'B'
000000000001a8ed         db  0x0e ; '.'
000000000001a8ee         db  0x18 ; '.'
000000000001a8ef         db  0x42 ; 'B'
000000000001a8f0         db  0x0e ; '.'
000000000001a8f1         db  0x10 ; '.'
000000000001a8f2         db  0x42 ; 'B'
000000000001a8f3         db  0x0e ; '.'
000000000001a8f4         db  0x08 ; '.'
000000000001a8f5         db  0x48 ; 'H'
000000000001a8f6         db  0x0b ; '.'
000000000001a8f7         db  0x02 ; '.'
000000000001a8f8         db  0x9b ; '.'
000000000001a8f9         db  0x0a ; '.'
000000000001a8fa         db  0x0e ; '.'
000000000001a8fb         db  0x38 ; '8'
000000000001a8fc         db  0x41 ; 'A'
000000000001a8fd         db  0x0e ; '.'
000000000001a8fe         db  0x30 ; '0'
000000000001a8ff         db  0x41 ; 'A'
000000000001a900         db  0x0e ; '.'
000000000001a901         db  0x28 ; '('
000000000001a902         db  0x42 ; 'B'
000000000001a903         db  0x0e ; '.'
000000000001a904         db  0x20 ; ' '
000000000001a905         db  0x42 ; 'B'
000000000001a906         db  0x0e ; '.'
000000000001a907         db  0x18 ; '.'
000000000001a908         db  0x42 ; 'B'
000000000001a909         db  0x0e ; '.'
000000000001a90a         db  0x10 ; '.'
000000000001a90b         db  0x42 ; 'B'
000000000001a90c         db  0x0e ; '.'
000000000001a90d         db  0x08 ; '.'
000000000001a90e         db  0x43 ; 'C'
000000000001a90f         db  0x0b ; '.'
000000000001a910         dd         0x00000034                                  ; Length of the record
000000000001a914         dd         0x00002b74                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a918         db         0x68, 0x9c, 2 dup (0xff)                    ; begin 0x14580
000000000001a91c         db         0x49, 3 dup (0x00)                          ; length 0x49 (end at 0x145c9)
000000000001a920         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a921         db  0x41 ; 'A'
000000000001a922         db  0x0e ; '.'
000000000001a923         db  0x10 ; '.'
000000000001a924         db  0x86 ; '.'
000000000001a925         db  0x02 ; '.'
000000000001a926         db  0x41 ; 'A'
000000000001a927         db  0x0e ; '.'
000000000001a928         db  0x18 ; '.'
000000000001a929         db  0x83 ; '.'
000000000001a92a         db  0x03 ; '.'
000000000001a92b         db  0x53 ; 'S'
000000000001a92c         db  0x0e ; '.'
000000000001a92d         db  0x20 ; ' '
000000000001a92e         db  0x59 ; 'Y'
000000000001a92f         db  0x0a ; '.'
000000000001a930         db  0x0e ; '.'
000000000001a931         db  0x18 ; '.'
000000000001a932         db  0x44 ; 'D'
000000000001a933         db  0x0e ; '.'
000000000001a934         db  0x10 ; '.'
000000000001a935         db  0x41 ; 'A'
000000000001a936         db  0x0e ; '.'
000000000001a937         db  0x08 ; '.'
000000000001a938         db  0x4d ; 'M'
000000000001a939         db  0x0b ; '.'
000000000001a93a         db  0x44 ; 'D'
000000000001a93b         db  0x0e ; '.'
000000000001a93c         db  0x18 ; '.'
000000000001a93d         db  0x43 ; 'C'
000000000001a93e         db  0x0e ; '.'
000000000001a93f         db  0x10 ; '.'
000000000001a940         db  0x41 ; 'A'
000000000001a941         db  0x0e ; '.'
000000000001a942         db  0x08 ; '.'
000000000001a943         db  0x00 ; '.'
000000000001a944         db  0x00 ; '.'
000000000001a945         db  0x00 ; '.'
000000000001a946         db  0x00 ; '.'
000000000001a947         db  0x00 ; '.'
000000000001a948         dd         0x00000010                                  ; Length of the record
000000000001a94c         dd         0x00002bac                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a950         db         0x80, 0x9c, 2 dup (0xff)                    ; begin 0x145d0
000000000001a954         db         0x8e, 0x02, 2 dup (0x00)                    ; length 0x28e (end at 0x1485e)
000000000001a958         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a959         align      4
000000000001a95c         dd         0x00000030                                  ; Length of the record
000000000001a960         dd         0x00002bc0                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a964         db         0xfc, 0x9e, 2 dup (0xff)                    ; begin 0x14860
000000000001a968         db         0x40, 0x02, 2 dup (0x00)                    ; length 0x240 (end at 0x14aa0)
000000000001a96c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a96d         db  0x42 ; 'B'
000000000001a96e         db  0x0e ; '.'
000000000001a96f         db  0x10 ; '.'
000000000001a970         db  0x8d ; '.'
000000000001a971         db  0x02 ; '.'
000000000001a972         db  0x42 ; 'B'
000000000001a973         db  0x0e ; '.'
000000000001a974         db  0x18 ; '.'
000000000001a975         db  0x8c ; '.'
000000000001a976         db  0x03 ; '.'
000000000001a977         db  0x48 ; 'H'
000000000001a978         db  0x0e ; '.'
000000000001a979         db  0x20 ; ' '
000000000001a97a         db  0x86 ; '.'
000000000001a97b         db  0x04 ; '.'
000000000001a97c         db  0x44 ; 'D'
000000000001a97d         db  0x0e ; '.'
000000000001a97e         db  0x28 ; '('
000000000001a97f         db  0x83 ; '.'
000000000001a980         db  0x05 ; '.'
000000000001a981         db  0x03 ; '.'
000000000001a982         db  0x09 ; '.'
000000000001a983         db  0x02 ; '.'
000000000001a984         db  0x0e ; '.'
000000000001a985         db  0x20 ; ' '
000000000001a986         db  0x57 ; 'W'
000000000001a987         db  0x0e ; '.'
000000000001a988         db  0x18 ; '.'
000000000001a989         db  0x4d ; 'M'
000000000001a98a         db  0x0e ; '.'
000000000001a98b         db  0x10 ; '.'
000000000001a98c         db  0x42 ; 'B'
000000000001a98d         db  0x0e ; '.'
000000000001a98e         db  0x08 ; '.'
000000000001a98f         db  0x00 ; '.'
000000000001a990         dd         0x00000014                                  ; Length of the record
000000000001a994         dd         0x00002bf4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a998         db         0x08, 0xa1, 2 dup (0xff)                    ; begin 0x14aa0
000000000001a99c         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x14aae)
000000000001a9a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a9a1         align      8
000000000001a9a8         dd         0x00000034                                  ; Length of the record
000000000001a9ac         dd         0x00002c0c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a9b0         db         0x00, 0xa1, 2 dup (0xff)                    ; begin 0x14ab0
000000000001a9b4         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x14b2b)
000000000001a9b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a9b9         db  0x42 ; 'B'
000000000001a9ba         db  0x0e ; '.'
000000000001a9bb         db  0x10 ; '.'
000000000001a9bc         db  0x8c ; '.'
000000000001a9bd         db  0x02 ; '.'
000000000001a9be         db  0x41 ; 'A'
000000000001a9bf         db  0x0e ; '.'
000000000001a9c0         db  0x18 ; '.'
000000000001a9c1         db  0x86 ; '.'
000000000001a9c2         db  0x03 ; '.'
000000000001a9c3         db  0x41 ; 'A'
000000000001a9c4         db  0x0e ; '.'
000000000001a9c5         db  0x20 ; ' '
000000000001a9c6         db  0x83 ; '.'
000000000001a9c7         db  0x04 ; '.'
000000000001a9c8         db  0x7d ; '}'
000000000001a9c9         db  0x0a ; '.'
000000000001a9ca         db  0x0e ; '.'
000000000001a9cb         db  0x18 ; '.'
000000000001a9cc         db  0x41 ; 'A'
000000000001a9cd         db  0x0e ; '.'
000000000001a9ce         db  0x10 ; '.'
000000000001a9cf         db  0x42 ; 'B'
000000000001a9d0         db  0x0e ; '.'
000000000001a9d1         db  0x08 ; '.'
000000000001a9d2         db  0x44 ; 'D'
000000000001a9d3         db  0x0b ; '.'
000000000001a9d4         db  0x60 ; '`'
000000000001a9d5         db  0x0a ; '.'
000000000001a9d6         db  0x0e ; '.'
000000000001a9d7         db  0x18 ; '.'
000000000001a9d8         db  0x41 ; 'A'
000000000001a9d9         db  0x0e ; '.'
000000000001a9da         db  0x10 ; '.'
000000000001a9db         db  0x42 ; 'B'
000000000001a9dc         db  0x0e ; '.'
000000000001a9dd         db  0x08 ; '.'
000000000001a9de         db  0x45 ; 'E'
000000000001a9df         db  0x0b ; '.'
000000000001a9e0         dd         0x00000034                                  ; Length of the record
000000000001a9e4         dd         0x00002c44                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001a9e8         db         0x48, 0xa1, 2 dup (0xff)                    ; begin 0x14b30
000000000001a9ec         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0x14dae)
000000000001a9f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a9f1         db  0x42 ; 'B'
000000000001a9f2         db  0x0e ; '.'
000000000001a9f3         db  0x10 ; '.'
000000000001a9f4         db  0x8c ; '.'
000000000001a9f5         db  0x02 ; '.'
000000000001a9f6         db  0x41 ; 'A'
000000000001a9f7         db  0x0e ; '.'
000000000001a9f8         db  0x18 ; '.'
000000000001a9f9         db  0x86 ; '.'
000000000001a9fa         db  0x03 ; '.'
000000000001a9fb         db  0x43 ; 'C'
000000000001a9fc         db  0x0e ; '.'
000000000001a9fd         db  0x20 ; ' '
000000000001a9fe         db  0x83 ; '.'
000000000001a9ff         db  0x04 ; '.'
000000000001aa00         db  0x44 ; 'D'
000000000001aa01         db  0x0e ; '.'
000000000001aa02         db  0x70 ; 'p'
000000000001aa03         db  0x02 ; '.'
000000000001aa04         db  0xf0 ; '.'
000000000001aa05         db  0x0a ; '.'
000000000001aa06         db  0x0e ; '.'
000000000001aa07         db  0x20 ; ' '
000000000001aa08         db  0x41 ; 'A'
000000000001aa09         db  0x0e ; '.'
000000000001aa0a         db  0x18 ; '.'
000000000001aa0b         db  0x41 ; 'A'
000000000001aa0c         db  0x0e ; '.'
000000000001aa0d         db  0x10 ; '.'
000000000001aa0e         db  0x42 ; 'B'
000000000001aa0f         db  0x0e ; '.'
000000000001aa10         db  0x08 ; '.'
000000000001aa11         db  0x42 ; 'B'
000000000001aa12         db  0x0b ; '.'
000000000001aa13         db  0x00 ; '.'
000000000001aa14         db  0x00 ; '.'
000000000001aa15         db  0x00 ; '.'
000000000001aa16         db  0x00 ; '.'
000000000001aa17         db  0x00 ; '.'
000000000001aa18         dd         0x0000002c                                  ; Length of the record
000000000001aa1c         dd         0x00002c7c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001aa20         db         0x90, 0xa3, 2 dup (0xff)                    ; begin 0x14db0
000000000001aa24         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x14e43)
000000000001aa28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001aa29         db  0x42 ; 'B'
000000000001aa2a         db  0x0e ; '.'
000000000001aa2b         db  0x10 ; '.'
000000000001aa2c         db  0x8c ; '.'
000000000001aa2d         db  0x02 ; '.'
000000000001aa2e         db  0x41 ; 'A'
000000000001aa2f         db  0x0e ; '.'
000000000001aa30         db  0x18 ; '.'
000000000001aa31         db  0x86 ; '.'
000000000001aa32         db  0x03 ; '.'
000000000001aa33         db  0x44 ; 'D'
000000000001aa34         db  0x0e ; '.'
000000000001aa35         db  0x20 ; ' '
000000000001aa36         db  0x83 ; '.'
000000000001aa37         db  0x04 ; '.'
000000000001aa38         db  0x5e ; '^'
000000000001aa39         db  0x0a ; '.'
000000000001aa3a         db  0x0e ; '.'
000000000001aa3b         db  0x18 ; '.'
000000000001aa3c         db  0x41 ; 'A'
000000000001aa3d         db  0x0e ; '.'
000000000001aa3e         db  0x10 ; '.'
000000000001aa3f         db  0x42 ; 'B'
000000000001aa40         db  0x0e ; '.'
000000000001aa41         db  0x08 ; '.'
000000000001aa42         db  0x48 ; 'H'
000000000001aa43         db  0x0b ; '.'
000000000001aa44         db  0x00 ; '.'
000000000001aa45         db  0x00 ; '.'
000000000001aa46         db  0x00 ; '.'
000000000001aa47         db  0x00 ; '.'
000000000001aa48         dd         0x00000044                                  ; Length of the record
000000000001aa4c         dd         0x00002cac                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001aa50         db         0x00, 0xa4, 2 dup (0xff)                    ; begin 0x14e50
000000000001aa54         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x14eb5)
000000000001aa58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001aa59         db  0x42 ; 'B'
000000000001aa5a         db  0x0e ; '.'
000000000001aa5b         db  0x10 ; '.'
000000000001aa5c         db  0x8f ; '.'
000000000001aa5d         db  0x02 ; '.'
000000000001aa5e         db  0x42 ; 'B'
000000000001aa5f         db  0x0e ; '.'
000000000001aa60         db  0x18 ; '.'
000000000001aa61         db  0x8e ; '.'
000000000001aa62         db  0x03 ; '.'
000000000001aa63         db  0x45 ; 'E'
000000000001aa64         db  0x0e ; '.'
000000000001aa65         db  0x20 ; ' '
000000000001aa66         db  0x8d ; '.'
000000000001aa67         db  0x04 ; '.'
000000000001aa68         db  0x42 ; 'B'
000000000001aa69         db  0x0e ; '.'
000000000001aa6a         db  0x28 ; '('
000000000001aa6b         db  0x8c ; '.'
000000000001aa6c         db  0x05 ; '.'
000000000001aa6d         db  0x48 ; 'H'
000000000001aa6e         db  0x0e ; '.'
000000000001aa6f         db  0x30 ; '0'
000000000001aa70         db  0x86 ; '.'
000000000001aa71         db  0x06 ; '.'
000000000001aa72         db  0x48 ; 'H'
000000000001aa73         db  0x0e ; '.'
000000000001aa74         db  0x38 ; '8'
000000000001aa75         db  0x83 ; '.'
000000000001aa76         db  0x07 ; '.'
000000000001aa77         db  0x4d ; 'M'
000000000001aa78         db  0x0e ; '.'
000000000001aa79         db  0x40 ; '@'
000000000001aa7a         db  0x72 ; 'r'
000000000001aa7b         db  0x0e ; '.'
000000000001aa7c         db  0x38 ; '8'
000000000001aa7d         db  0x41 ; 'A'
000000000001aa7e         db  0x0e ; '.'
000000000001aa7f         db  0x30 ; '0'
000000000001aa80         db  0x41 ; 'A'
000000000001aa81         db  0x0e ; '.'
000000000001aa82         db  0x28 ; '('
000000000001aa83         db  0x42 ; 'B'
000000000001aa84         db  0x0e ; '.'
000000000001aa85         db  0x20 ; ' '
000000000001aa86         db  0x42 ; 'B'
000000000001aa87         db  0x0e ; '.'
000000000001aa88         db  0x18 ; '.'
000000000001aa89         db  0x42 ; 'B'
000000000001aa8a         db  0x0e ; '.'
000000000001aa8b         db  0x10 ; '.'
000000000001aa8c         db  0x42 ; 'B'
000000000001aa8d         db  0x0e ; '.'
000000000001aa8e         db  0x08 ; '.'
000000000001aa8f         db  0x00 ; '.'
000000000001aa90         dd         0x00000014                                  ; Length of the record
000000000001aa94         dd         0x00002cf4                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001aa98         db         0x28, 0xa4, 2 dup (0xff)                    ; begin 0x14ec0
000000000001aa9c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x14ec2)
000000000001aaa0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001aaa1         align      8
000000000001aaa8         dd         0x00000010                                  ; Length of the record
000000000001aaac         dd         0x00002d0c                                  ; FDE: parent CIE at 0x17da0 (FDE encoding = 0x1B)
000000000001aab0         db         0x20, 0xa4, 2 dup (0xff)                    ; begin 0x14ed0
000000000001aab4         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x14ede)
000000000001aab8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001aab9         align      64


        ; Segment Segment 3
        ; Range: [0x21b790; 0x21c6f8[ (3944 bytes)
        ; File offset : [112528; 114856[ (2328 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x21b790; 0x21b798[ (8 bytes)
        ; File offset : [112528; 112536[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000021b790         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x21b798; 0x21b7a0[ (8 bytes)
        ; File offset : [112536; 112544[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000021b798         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x21b7a0; 0x21ba38[ (664 bytes)
        ; File offset : [112544; 113208[ (664 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_options:
000000000021b7a0         db  0x99 ; '.'                                         ; DATA XREF=main+360
000000000021b7a1         db  0x50 ; 'P'
000000000021b7a2         db  0x01 ; '.'
000000000021b7a3         db  0x00 ; '.'
000000000021b7a4         db  0x00 ; '.'
000000000021b7a5         db  0x00 ; '.'
000000000021b7a6         db  0x00 ; '.'
000000000021b7a7         db  0x00 ; '.'
000000000021b7a8         db  0x02 ; '.'
000000000021b7a9         db  0x00 ; '.'
000000000021b7aa         db  0x00 ; '.'
000000000021b7ab         db  0x00 ; '.'
000000000021b7ac         db  0x00 ; '.'
000000000021b7ad         db  0x00 ; '.'
000000000021b7ae         db  0x00 ; '.'
000000000021b7af         db  0x00 ; '.'
000000000021b7b0         db  0x00 ; '.'
000000000021b7b1         db  0x00 ; '.'
000000000021b7b2         db  0x00 ; '.'
000000000021b7b3         db  0x00 ; '.'
000000000021b7b4         db  0x00 ; '.'
000000000021b7b5         db  0x00 ; '.'
000000000021b7b6         db  0x00 ; '.'
000000000021b7b7         db  0x00 ; '.'
000000000021b7b8         db  0x62 ; 'b'
000000000021b7b9         db  0x00 ; '.'
000000000021b7ba         db  0x00 ; '.'
000000000021b7bb         db  0x00 ; '.'
000000000021b7bc         db  0x00 ; '.'
000000000021b7bd         db  0x00 ; '.'
000000000021b7be         db  0x00 ; '.'
000000000021b7bf         db  0x00 ; '.'
000000000021b7c0         db  0xa0 ; '.'
000000000021b7c1         db  0x50 ; 'P'
000000000021b7c2         db  0x01 ; '.'
000000000021b7c3         db  0x00 ; '.'
000000000021b7c4         db  0x00 ; '.'
000000000021b7c5         db  0x00 ; '.'
000000000021b7c6         db  0x00 ; '.'
000000000021b7c7         db  0x00 ; '.'
000000000021b7c8         db  0x00 ; '.'
000000000021b7c9         db  0x00 ; '.'
000000000021b7ca         db  0x00 ; '.'
000000000021b7cb         db  0x00 ; '.'
000000000021b7cc         db  0x00 ; '.'
000000000021b7cd         db  0x00 ; '.'
000000000021b7ce         db  0x00 ; '.'
000000000021b7cf         db  0x00 ; '.'
000000000021b7d0         db  0x00 ; '.'
000000000021b7d1         db  0x00 ; '.'
000000000021b7d2         db  0x00 ; '.'
000000000021b7d3         db  0x00 ; '.'
000000000021b7d4         db  0x00 ; '.'
000000000021b7d5         db  0x00 ; '.'
000000000021b7d6         db  0x00 ; '.'
000000000021b7d7         db  0x00 ; '.'
000000000021b7d8         db  0x5a ; 'Z'
000000000021b7d9         db  0x00 ; '.'
000000000021b7da         db  0x00 ; '.'
000000000021b7db         db  0x00 ; '.'
000000000021b7dc         db  0x00 ; '.'
000000000021b7dd         db  0x00 ; '.'
000000000021b7de         db  0x00 ; '.'
000000000021b7df         db  0x00 ; '.'
000000000021b7e0         db  0xa8 ; '.'
000000000021b7e1         db  0x50 ; 'P'
000000000021b7e2         db  0x01 ; '.'
000000000021b7e3         db  0x00 ; '.'
000000000021b7e4         db  0x00 ; '.'
000000000021b7e5         db  0x00 ; '.'
000000000021b7e6         db  0x00 ; '.'
000000000021b7e7         db  0x00 ; '.'
000000000021b7e8         db  0x00 ; '.'
000000000021b7e9         db  0x00 ; '.'
000000000021b7ea         db  0x00 ; '.'
000000000021b7eb         db  0x00 ; '.'
000000000021b7ec         db  0x00 ; '.'
000000000021b7ed         db  0x00 ; '.'
000000000021b7ee         db  0x00 ; '.'
000000000021b7ef         db  0x00 ; '.'
000000000021b7f0         db  0x00 ; '.'
000000000021b7f1         db  0x00 ; '.'
000000000021b7f2         db  0x00 ; '.'
000000000021b7f3         db  0x00 ; '.'
000000000021b7f4         db  0x00 ; '.'
000000000021b7f5         db  0x00 ; '.'
000000000021b7f6         db  0x00 ; '.'
000000000021b7f7         db  0x00 ; '.'
000000000021b7f8         db  0x66 ; 'f'
000000000021b7f9         db  0x00 ; '.'
000000000021b7fa         db  0x00 ; '.'
000000000021b7fb         db  0x00 ; '.'
000000000021b7fc         db  0x00 ; '.'
000000000021b7fd         db  0x00 ; '.'
000000000021b7fe         db  0x00 ; '.'
000000000021b7ff         db  0x00 ; '.'
000000000021b800         db  0xae ; '.'
000000000021b801         db  0x50 ; 'P'
000000000021b802         db  0x01 ; '.'
000000000021b803         db  0x00 ; '.'
000000000021b804         db  0x00 ; '.'
000000000021b805         db  0x00 ; '.'
000000000021b806         db  0x00 ; '.'
000000000021b807         db  0x00 ; '.'
000000000021b808         db  0x00 ; '.'
000000000021b809         db  0x00 ; '.'
000000000021b80a         db  0x00 ; '.'
000000000021b80b         db  0x00 ; '.'
000000000021b80c         db  0x00 ; '.'
000000000021b80d         db  0x00 ; '.'
000000000021b80e         db  0x00 ; '.'
000000000021b80f         db  0x00 ; '.'
000000000021b810         db  0x00 ; '.'
000000000021b811         db  0x00 ; '.'
000000000021b812         db  0x00 ; '.'
000000000021b813         db  0x00 ; '.'
000000000021b814         db  0x00 ; '.'
000000000021b815         db  0x00 ; '.'
000000000021b816         db  0x00 ; '.'
000000000021b817         db  0x00 ; '.'
000000000021b818         db  0x69 ; 'i'
000000000021b819         db  0x00 ; '.'
000000000021b81a         db  0x00 ; '.'
000000000021b81b         db  0x00 ; '.'
000000000021b81c         db  0x00 ; '.'
000000000021b81d         db  0x00 ; '.'
000000000021b81e         db  0x00 ; '.'
000000000021b81f         db  0x00 ; '.'
000000000021b820         db  0xba ; '.'
000000000021b821         db  0x50 ; 'P'
000000000021b822         db  0x01 ; '.'
000000000021b823         db  0x00 ; '.'
000000000021b824         db  0x00 ; '.'
000000000021b825         db  0x00 ; '.'
000000000021b826         db  0x00 ; '.'
000000000021b827         db  0x00 ; '.'
000000000021b828         db  0x00 ; '.'
000000000021b829         db  0x00 ; '.'
000000000021b82a         db  0x00 ; '.'
000000000021b82b         db  0x00 ; '.'
000000000021b82c         db  0x00 ; '.'
000000000021b82d         db  0x00 ; '.'
000000000021b82e         db  0x00 ; '.'
000000000021b82f         db  0x00 ; '.'
000000000021b830         db  0x00 ; '.'
000000000021b831         db  0x00 ; '.'
000000000021b832         db  0x00 ; '.'
000000000021b833         db  0x00 ; '.'
000000000021b834         db  0x00 ; '.'
000000000021b835         db  0x00 ; '.'
000000000021b836         db  0x00 ; '.'
000000000021b837         db  0x00 ; '.'
000000000021b838         db  0x6e ; 'n'
000000000021b839         db  0x00 ; '.'
000000000021b83a         db  0x00 ; '.'
000000000021b83b         db  0x00 ; '.'
000000000021b83c         db  0x00 ; '.'
000000000021b83d         db  0x00 ; '.'
000000000021b83e         db  0x00 ; '.'
000000000021b83f         db  0x00 ; '.'
000000000021b840         db  0xc5 ; '.'
000000000021b841         db  0x50 ; 'P'
000000000021b842         db  0x01 ; '.'
000000000021b843         db  0x00 ; '.'
000000000021b844         db  0x00 ; '.'
000000000021b845         db  0x00 ; '.'
000000000021b846         db  0x00 ; '.'
000000000021b847         db  0x00 ; '.'
000000000021b848         db  0x00 ; '.'
000000000021b849         db  0x00 ; '.'
000000000021b84a         db  0x00 ; '.'
000000000021b84b         db  0x00 ; '.'
000000000021b84c         db  0x00 ; '.'
000000000021b84d         db  0x00 ; '.'
000000000021b84e         db  0x00 ; '.'
000000000021b84f         db  0x00 ; '.'
000000000021b850         db  0x00 ; '.'
000000000021b851         db  0x00 ; '.'
000000000021b852         db  0x00 ; '.'
000000000021b853         db  0x00 ; '.'
000000000021b854         db  0x00 ; '.'
000000000021b855         db  0x00 ; '.'
000000000021b856         db  0x00 ; '.'
000000000021b857         db  0x00 ; '.'
000000000021b858         db  0x54 ; 'T'
000000000021b859         db  0x00 ; '.'
000000000021b85a         db  0x00 ; '.'
000000000021b85b         db  0x00 ; '.'
000000000021b85c         db  0x00 ; '.'
000000000021b85d         db  0x00 ; '.'
000000000021b85e         db  0x00 ; '.'
000000000021b85f         db  0x00 ; '.'
000000000021b860         db  0xd9 ; '.'
000000000021b861         db  0x50 ; 'P'
000000000021b862         db  0x01 ; '.'
000000000021b863         db  0x00 ; '.'
000000000021b864         db  0x00 ; '.'
000000000021b865         db  0x00 ; '.'
000000000021b866         db  0x00 ; '.'
000000000021b867         db  0x00 ; '.'
000000000021b868         db  0x00 ; '.'
000000000021b869         db  0x00 ; '.'
000000000021b86a         db  0x00 ; '.'
000000000021b86b         db  0x00 ; '.'
000000000021b86c         db  0x00 ; '.'
000000000021b86d         db  0x00 ; '.'
000000000021b86e         db  0x00 ; '.'
000000000021b86f         db  0x00 ; '.'
000000000021b870         db  0x00 ; '.'
000000000021b871         db  0x00 ; '.'
000000000021b872         db  0x00 ; '.'
000000000021b873         db  0x00 ; '.'
000000000021b874         db  0x00 ; '.'
000000000021b875         db  0x00 ; '.'
000000000021b876         db  0x00 ; '.'
000000000021b877         db  0x00 ; '.'
000000000021b878         db  0x80 ; '.'
000000000021b879         db  0x00 ; '.'
000000000021b87a         db  0x00 ; '.'
000000000021b87b         db  0x00 ; '.'
000000000021b87c         db  0x00 ; '.'
000000000021b87d         db  0x00 ; '.'
000000000021b87e         db  0x00 ; '.'
000000000021b87f         db  0x00 ; '.'
000000000021b880         db  0xf0 ; '.'
000000000021b881         db  0x50 ; 'P'
000000000021b882         db  0x01 ; '.'
000000000021b883         db  0x00 ; '.'
000000000021b884         db  0x00 ; '.'
000000000021b885         db  0x00 ; '.'
000000000021b886         db  0x00 ; '.'
000000000021b887         db  0x00 ; '.'
000000000021b888         db  0x01 ; '.'
000000000021b889         db  0x00 ; '.'
000000000021b88a         db  0x00 ; '.'
000000000021b88b         db  0x00 ; '.'
000000000021b88c         db  0x00 ; '.'
000000000021b88d         db  0x00 ; '.'
000000000021b88e         db  0x00 ; '.'
000000000021b88f         db  0x00 ; '.'
000000000021b890         db  0x00 ; '.'
000000000021b891         db  0x00 ; '.'
000000000021b892         db  0x00 ; '.'
000000000021b893         db  0x00 ; '.'
000000000021b894         db  0x00 ; '.'
000000000021b895         db  0x00 ; '.'
000000000021b896         db  0x00 ; '.'
000000000021b897         db  0x00 ; '.'
000000000021b898         db  0x53 ; 'S'
000000000021b899         db  0x00 ; '.'
000000000021b89a         db  0x00 ; '.'
000000000021b89b         db  0x00 ; '.'
000000000021b89c         db  0x00 ; '.'
000000000021b89d         db  0x00 ; '.'
000000000021b89e         db  0x00 ; '.'
000000000021b89f         db  0x00 ; '.'
000000000021b8a0         db  0xc8 ; '.'
000000000021b8a1         db  0x50 ; 'P'
000000000021b8a2         db  0x01 ; '.'
000000000021b8a3         db  0x00 ; '.'
000000000021b8a4         db  0x00 ; '.'
000000000021b8a5         db  0x00 ; '.'
000000000021b8a6         db  0x00 ; '.'
000000000021b8a7         db  0x00 ; '.'
000000000021b8a8         db  0x01 ; '.'
000000000021b8a9         db  0x00 ; '.'
000000000021b8aa         db  0x00 ; '.'
000000000021b8ab         db  0x00 ; '.'
000000000021b8ac         db  0x00 ; '.'
000000000021b8ad         db  0x00 ; '.'
000000000021b8ae         db  0x00 ; '.'
000000000021b8af         db  0x00 ; '.'
000000000021b8b0         db  0x00 ; '.'
000000000021b8b1         db  0x00 ; '.'
000000000021b8b2         db  0x00 ; '.'
000000000021b8b3         db  0x00 ; '.'
000000000021b8b4         db  0x00 ; '.'
000000000021b8b5         db  0x00 ; '.'
000000000021b8b6         db  0x00 ; '.'
000000000021b8b7         db  0x00 ; '.'
000000000021b8b8         db  0x74 ; 't'
000000000021b8b9         db  0x00 ; '.'
000000000021b8ba         db  0x00 ; '.'
000000000021b8bb         db  0x00 ; '.'
000000000021b8bc         db  0x00 ; '.'
000000000021b8bd         db  0x00 ; '.'
000000000021b8be         db  0x00 ; '.'
000000000021b8bf         db  0x00 ; '.'
000000000021b8c0         db  0xf7 ; '.'
000000000021b8c1         db  0x50 ; 'P'
000000000021b8c2         db  0x01 ; '.'
000000000021b8c3         db  0x00 ; '.'
000000000021b8c4         db  0x00 ; '.'
000000000021b8c5         db  0x00 ; '.'
000000000021b8c6         db  0x00 ; '.'
000000000021b8c7         db  0x00 ; '.'
000000000021b8c8         db  0x00 ; '.'
000000000021b8c9         db  0x00 ; '.'
000000000021b8ca         db  0x00 ; '.'
000000000021b8cb         db  0x00 ; '.'
000000000021b8cc         db  0x00 ; '.'
000000000021b8cd         db  0x00 ; '.'
000000000021b8ce         db  0x00 ; '.'
000000000021b8cf         db  0x00 ; '.'
000000000021b8d0         db  0x00 ; '.'
000000000021b8d1         db  0x00 ; '.'
000000000021b8d2         db  0x00 ; '.'
000000000021b8d3         db  0x00 ; '.'
000000000021b8d4         db  0x00 ; '.'
000000000021b8d5         db  0x00 ; '.'
000000000021b8d6         db  0x00 ; '.'
000000000021b8d7         db  0x00 ; '.'
000000000021b8d8         db  0x75 ; 'u'
000000000021b8d9         db  0x00 ; '.'
000000000021b8da         db  0x00 ; '.'
000000000021b8db         db  0x00 ; '.'
000000000021b8dc         db  0x00 ; '.'
000000000021b8dd         db  0x00 ; '.'
000000000021b8de         db  0x00 ; '.'
000000000021b8df         db  0x00 ; '.'
000000000021b8e0         db  0xfe ; '.'
000000000021b8e1         db  0x50 ; 'P'
000000000021b8e2         db  0x01 ; '.'
000000000021b8e3         db  0x00 ; '.'
000000000021b8e4         db  0x00 ; '.'
000000000021b8e5         db  0x00 ; '.'
000000000021b8e6         db  0x00 ; '.'
000000000021b8e7         db  0x00 ; '.'
000000000021b8e8         db  0x00 ; '.'
000000000021b8e9         db  0x00 ; '.'
000000000021b8ea         db  0x00 ; '.'
000000000021b8eb         db  0x00 ; '.'
000000000021b8ec         db  0x00 ; '.'
000000000021b8ed         db  0x00 ; '.'
000000000021b8ee         db  0x00 ; '.'
000000000021b8ef         db  0x00 ; '.'
000000000021b8f0         db  0x00 ; '.'
000000000021b8f1         db  0x00 ; '.'
000000000021b8f2         db  0x00 ; '.'
000000000021b8f3         db  0x00 ; '.'
000000000021b8f4         db  0x00 ; '.'
000000000021b8f5         db  0x00 ; '.'
000000000021b8f6         db  0x00 ; '.'
000000000021b8f7         db  0x00 ; '.'
000000000021b8f8         db  0x76 ; 'v'
000000000021b8f9         db  0x00 ; '.'
000000000021b8fa         db  0x00 ; '.'
000000000021b8fb         db  0x00 ; '.'
000000000021b8fc         db  0x00 ; '.'
000000000021b8fd         db  0x00 ; '.'
000000000021b8fe         db  0x00 ; '.'
000000000021b8ff         db  0x00 ; '.'
000000000021b900         db  0x06 ; '.'
000000000021b901         db  0x51 ; 'Q'
000000000021b902         db  0x01 ; '.'
000000000021b903         db  0x00 ; '.'
000000000021b904         db  0x00 ; '.'
000000000021b905         db  0x00 ; '.'
000000000021b906         db  0x00 ; '.'
000000000021b907         db  0x00 ; '.'
000000000021b908         db  0x00 ; '.'
000000000021b909         db  0x00 ; '.'
000000000021b90a         db  0x00 ; '.'
000000000021b90b         db  0x00 ; '.'
000000000021b90c         db  0x00 ; '.'
000000000021b90d         db  0x00 ; '.'
000000000021b90e         db  0x00 ; '.'
000000000021b90f         db  0x00 ; '.'
000000000021b910         db  0x00 ; '.'
000000000021b911         db  0x00 ; '.'
000000000021b912         db  0x00 ; '.'
000000000021b913         db  0x00 ; '.'
000000000021b914         db  0x00 ; '.'
000000000021b915         db  0x00 ; '.'
000000000021b916         db  0x00 ; '.'
000000000021b917         db  0x00 ; '.'
000000000021b918         db  0x7e ; '~'
000000000021b919         db  0xff ; '.'
000000000021b91a         db  0xff ; '.'
000000000021b91b         db  0xff ; '.'
000000000021b91c         db  0x00 ; '.'
000000000021b91d         db  0x00 ; '.'
000000000021b91e         db  0x00 ; '.'
000000000021b91f         db  0x00 ; '.'
000000000021b920         db  0x0b ; '.'
000000000021b921         db  0x51 ; 'Q'
000000000021b922         db  0x01 ; '.'
000000000021b923         db  0x00 ; '.'
000000000021b924         db  0x00 ; '.'
000000000021b925         db  0x00 ; '.'
000000000021b926         db  0x00 ; '.'
000000000021b927         db  0x00 ; '.'
000000000021b928         db  0x00 ; '.'
000000000021b929         db  0x00 ; '.'
000000000021b92a         db  0x00 ; '.'
000000000021b92b         db  0x00 ; '.'
000000000021b92c         db  0x00 ; '.'
000000000021b92d         db  0x00 ; '.'
000000000021b92e         db  0x00 ; '.'
000000000021b92f         db  0x00 ; '.'
000000000021b930         db  0x00 ; '.'
000000000021b931         db  0x00 ; '.'
000000000021b932         db  0x00 ; '.'
000000000021b933         db  0x00 ; '.'
000000000021b934         db  0x00 ; '.'
000000000021b935         db  0x00 ; '.'
000000000021b936         db  0x00 ; '.'
000000000021b937         db  0x00 ; '.'
000000000021b938         db  0x7d ; '}'
000000000021b939         db  0xff ; '.'
000000000021b93a         db  0xff ; '.'
000000000021b93b         db  0xff ; '.'
000000000021b93c         db  0x00 ; '.'
000000000021b93d         db  0x00 ; '.'
000000000021b93e         db  0x00 ; '.'
000000000021b93f         db  0x00 ; '.'
000000000021b940         db  0x00 ; '.'
000000000021b941         db  0x00 ; '.'
000000000021b942         db  0x00 ; '.'
000000000021b943         db  0x00 ; '.'
000000000021b944         db  0x00 ; '.'
000000000021b945         db  0x00 ; '.'
000000000021b946         db  0x00 ; '.'
000000000021b947         db  0x00 ; '.'
000000000021b948         db  0x00 ; '.'
000000000021b949         db  0x00 ; '.'
000000000021b94a         db  0x00 ; '.'
000000000021b94b         db  0x00 ; '.'
000000000021b94c         db  0x00 ; '.'
000000000021b94d         db  0x00 ; '.'
000000000021b94e         db  0x00 ; '.'
000000000021b94f         db  0x00 ; '.'
000000000021b950         db  0x00 ; '.'
000000000021b951         db  0x00 ; '.'
000000000021b952         db  0x00 ; '.'
000000000021b953         db  0x00 ; '.'
000000000021b954         db  0x00 ; '.'
000000000021b955         db  0x00 ; '.'
000000000021b956         db  0x00 ; '.'
000000000021b957         db  0x00 ; '.'
000000000021b958         db  0x00 ; '.'
000000000021b959         db  0x00 ; '.'
000000000021b95a         db  0x00 ; '.'
000000000021b95b         db  0x00 ; '.'
000000000021b95c         db  0x00 ; '.'
000000000021b95d         db  0x00 ; '.'
000000000021b95e         db  0x00 ; '.'
000000000021b95f         db  0x00 ; '.'
                     backup_args:
000000000021b960         db  0xae ; '.'                                         ; DATA XREF=get_version.part.0+11
000000000021b961         db  0x68 ; 'h'
000000000021b962         db  0x01 ; '.'
000000000021b963         db  0x00 ; '.'
000000000021b964         db  0x00 ; '.'
000000000021b965         db  0x00 ; '.'
000000000021b966         db  0x00 ; '.'
000000000021b967         db  0x00 ; '.'
000000000021b968         db  0xb3 ; '.'
000000000021b969         db  0x68 ; 'h'
000000000021b96a         db  0x01 ; '.'
000000000021b96b         db  0x00 ; '.'
000000000021b96c         db  0x00 ; '.'
000000000021b96d         db  0x00 ; '.'
000000000021b96e         db  0x00 ; '.'
000000000021b96f         db  0x00 ; '.'
000000000021b970         db  0xb7 ; '.'
000000000021b971         db  0x68 ; 'h'
000000000021b972         db  0x01 ; '.'
000000000021b973         db  0x00 ; '.'
000000000021b974         db  0x00 ; '.'
000000000021b975         db  0x00 ; '.'
000000000021b976         db  0x00 ; '.'
000000000021b977         db  0x00 ; '.'
000000000021b978         db  0xbe ; '.'
000000000021b979         db  0x68 ; 'h'
000000000021b97a         db  0x01 ; '.'
000000000021b97b         db  0x00 ; '.'
000000000021b97c         db  0x00 ; '.'
000000000021b97d         db  0x00 ; '.'
000000000021b97e         db  0x00 ; '.'
000000000021b97f         db  0x00 ; '.'
000000000021b980         db  0xc4 ; '.'
000000000021b981         db  0x68 ; 'h'
000000000021b982         db  0x01 ; '.'
000000000021b983         db  0x00 ; '.'
000000000021b984         db  0x00 ; '.'
000000000021b985         db  0x00 ; '.'
000000000021b986         db  0x00 ; '.'
000000000021b987         db  0x00 ; '.'
000000000021b988         db  0xcd ; '.'
000000000021b989         db  0x68 ; 'h'
000000000021b98a         db  0x01 ; '.'
000000000021b98b         db  0x00 ; '.'
000000000021b98c         db  0x00 ; '.'
000000000021b98d         db  0x00 ; '.'
000000000021b98e         db  0x00 ; '.'
000000000021b98f         db  0x00 ; '.'
000000000021b990         db  0xd1 ; '.'
000000000021b991         db  0x68 ; 'h'
000000000021b992         db  0x01 ; '.'
000000000021b993         db  0x00 ; '.'
000000000021b994         db  0x00 ; '.'
000000000021b995         db  0x00 ; '.'
000000000021b996         db  0x00 ; '.'
000000000021b997         db  0x00 ; '.'
000000000021b998         db  0x88 ; '.'
000000000021b999         db  0x69 ; 'i'
000000000021b99a         db  0x01 ; '.'
000000000021b99b         db  0x00 ; '.'
000000000021b99c         db  0x00 ; '.'
000000000021b99d         db  0x00 ; '.'
000000000021b99e         db  0x00 ; '.'
000000000021b99f         db  0x00 ; '.'
000000000021b9a0         db  0x00 ; '.'
000000000021b9a1         db  0x00 ; '.'
000000000021b9a2         db  0x00 ; '.'
000000000021b9a3         db  0x00 ; '.'
000000000021b9a4         db  0x00 ; '.'
000000000021b9a5         db  0x00 ; '.'
000000000021b9a6         db  0x00 ; '.'
000000000021b9a7         db  0x00 ; '.'
000000000021b9a8         db  0x00 ; '.'
000000000021b9a9         db  0x00 ; '.'
000000000021b9aa         db  0x00 ; '.'
000000000021b9ab         db  0x00 ; '.'
000000000021b9ac         db  0x00 ; '.'
000000000021b9ad         db  0x00 ; '.'
000000000021b9ae         db  0x00 ; '.'
000000000021b9af         db  0x00 ; '.'
000000000021b9b0         db  0x00 ; '.'
000000000021b9b1         db  0x00 ; '.'
000000000021b9b2         db  0x00 ; '.'
000000000021b9b3         db  0x00 ; '.'
000000000021b9b4         db  0x00 ; '.'
000000000021b9b5         db  0x00 ; '.'
000000000021b9b6         db  0x00 ; '.'
000000000021b9b7         db  0x00 ; '.'
000000000021b9b8         db  0x00 ; '.'
000000000021b9b9         db  0x00 ; '.'
000000000021b9ba         db  0x00 ; '.'
000000000021b9bb         db  0x00 ; '.'
000000000021b9bc         db  0x00 ; '.'
000000000021b9bd         db  0x00 ; '.'
000000000021b9be         db  0x00 ; '.'
000000000021b9bf         db  0x00 ; '.'
                     quoting_style_args:
000000000021b9c0         db  0xa9 ; '.'
000000000021b9c1         db  0x6a ; 'j'
000000000021b9c2         db  0x01 ; '.'
000000000021b9c3         db  0x00 ; '.'
000000000021b9c4         db  0x00 ; '.'
000000000021b9c5         db  0x00 ; '.'
000000000021b9c6         db  0x00 ; '.'
000000000021b9c7         db  0x00 ; '.'
000000000021b9c8         db  0xb1 ; '.'
000000000021b9c9         db  0x6a ; 'j'
000000000021b9ca         db  0x01 ; '.'
000000000021b9cb         db  0x00 ; '.'
000000000021b9cc         db  0x00 ; '.'
000000000021b9cd         db  0x00 ; '.'
000000000021b9ce         db  0x00 ; '.'
000000000021b9cf         db  0x00 ; '.'
000000000021b9d0         db  0xb7 ; '.'
000000000021b9d1         db  0x6a ; 'j'
000000000021b9d2         db  0x01 ; '.'
000000000021b9d3         db  0x00 ; '.'
000000000021b9d4         db  0x00 ; '.'
000000000021b9d5         db  0x00 ; '.'
000000000021b9d6         db  0x00 ; '.'
000000000021b9d7         db  0x00 ; '.'
000000000021b9d8         db  0xc4 ; '.'
000000000021b9d9         db  0x6a ; 'j'
000000000021b9da         db  0x01 ; '.'
000000000021b9db         db  0x00 ; '.'
000000000021b9dc         db  0x00 ; '.'
000000000021b9dd         db  0x00 ; '.'
000000000021b9de         db  0x00 ; '.'
000000000021b9df         db  0x00 ; '.'
000000000021b9e0         db  0xd1 ; '.'
000000000021b9e1         db  0x6a ; 'j'
000000000021b9e2         db  0x01 ; '.'
000000000021b9e3         db  0x00 ; '.'
000000000021b9e4         db  0x00 ; '.'
000000000021b9e5         db  0x00 ; '.'
000000000021b9e6         db  0x00 ; '.'
000000000021b9e7         db  0x00 ; '.'
000000000021b9e8         db  0x9b ; '.'
000000000021b9e9         db  0x73 ; 's'
000000000021b9ea         db  0x01 ; '.'
000000000021b9eb         db  0x00 ; '.'
000000000021b9ec         db  0x00 ; '.'
000000000021b9ed         db  0x00 ; '.'
000000000021b9ee         db  0x00 ; '.'
000000000021b9ef         db  0x00 ; '.'
000000000021b9f0         db  0xe5 ; '.'
000000000021b9f1         db  0x6a ; 'j'
000000000021b9f2         db  0x01 ; '.'
000000000021b9f3         db  0x00 ; '.'
000000000021b9f4         db  0x00 ; '.'
000000000021b9f5         db  0x00 ; '.'
000000000021b9f6         db  0x00 ; '.'
000000000021b9f7         db  0x00 ; '.'
000000000021b9f8         db  0xca ; '.'
000000000021b9f9         db  0x6a ; 'j'
000000000021b9fa         db  0x01 ; '.'
000000000021b9fb         db  0x00 ; '.'
000000000021b9fc         db  0x00 ; '.'
000000000021b9fd         db  0x00 ; '.'
000000000021b9fe         db  0x00 ; '.'
000000000021b9ff         db  0x00 ; '.'
000000000021ba00         db  0xec ; '.'
000000000021ba01         db  0x4f ; 'O'
000000000021ba02         db  0x01 ; '.'
000000000021ba03         db  0x00 ; '.'
000000000021ba04         db  0x00 ; '.'
000000000021ba05         db  0x00 ; '.'
000000000021ba06         db  0x00 ; '.'
000000000021ba07         db  0x00 ; '.'
000000000021ba08         db  0xed ; '.'
000000000021ba09         db  0x6a ; 'j'
000000000021ba0a         db  0x01 ; '.'
000000000021ba0b         db  0x00 ; '.'
000000000021ba0c         db  0x00 ; '.'
000000000021ba0d         db  0x00 ; '.'
000000000021ba0e         db  0x00 ; '.'
000000000021ba0f         db  0x00 ; '.'
000000000021ba10         db  0x00 ; '.'
000000000021ba11         db  0x00 ; '.'
000000000021ba12         db  0x00 ; '.'
000000000021ba13         db  0x00 ; '.'
000000000021ba14         db  0x00 ; '.'
000000000021ba15         db  0x00 ; '.'
000000000021ba16         db  0x00 ; '.'
000000000021ba17         db  0x00 ; '.'
000000000021ba18         db  0x00 ; '.'
000000000021ba19         db  0x00 ; '.'
000000000021ba1a         db  0x00 ; '.'
000000000021ba1b         db  0x00 ; '.'
000000000021ba1c         db  0x00 ; '.'
000000000021ba1d         db  0x00 ; '.'
000000000021ba1e         db  0x00 ; '.'
000000000021ba1f         db  0x00 ; '.'
                     comparison_function_table:
000000000021ba20         db  0x00 ; '.'                                         ; DATA XREF=streamsavedir+2
000000000021ba21         db  0x00 ; '.'
000000000021ba22         db  0x00 ; '.'
000000000021ba23         db  0x00 ; '.'
000000000021ba24         db  0x00 ; '.'
000000000021ba25         db  0x00 ; '.'
000000000021ba26         db  0x00 ; '.'
000000000021ba27         db  0x00 ; '.'
000000000021ba28         db  0x20 ; ' '
000000000021ba29         db  0xef ; '.'
000000000021ba2a         db  0x00 ; '.'
000000000021ba2b         db  0x00 ; '.'
000000000021ba2c         db  0x00 ; '.'
000000000021ba2d         db  0x00 ; '.'
000000000021ba2e         db  0x00 ; '.'
000000000021ba2f         db  0x00 ; '.'
000000000021ba30         db  0x00 ; '.'
000000000021ba31         db  0xef ; '.'
000000000021ba32         db  0x00 ; '.'
000000000021ba33         db  0x00 ; '.'
000000000021ba34         db  0x00 ; '.'
000000000021ba35         db  0x00 ; '.'
000000000021ba36         db  0x00 ; '.'
000000000021ba37         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x21ba38; 0x21bc28[ (496 bytes)
        ; File offset : [113208; 113704[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000021ba38         db  0x01 ; '.'
000000000021ba39         db  0x00 ; '.'
000000000021ba3a         db  0x00 ; '.'
000000000021ba3b         db  0x00 ; '.'
000000000021ba3c         db  0x00 ; '.'
000000000021ba3d         db  0x00 ; '.'
000000000021ba3e         db  0x00 ; '.'
000000000021ba3f         db  0x00 ; '.'
000000000021ba40         db  0x01 ; '.'
000000000021ba41         db  0x00 ; '.'
000000000021ba42         db  0x00 ; '.'
000000000021ba43         db  0x00 ; '.'
000000000021ba44         db  0x00 ; '.'
000000000021ba45         db  0x00 ; '.'
000000000021ba46         db  0x00 ; '.'
000000000021ba47         db  0x00 ; '.'
000000000021ba48         db  0x0c ; '.'
000000000021ba49         db  0x00 ; '.'
000000000021ba4a         db  0x00 ; '.'
000000000021ba4b         db  0x00 ; '.'
000000000021ba4c         db  0x00 ; '.'
000000000021ba4d         db  0x00 ; '.'
000000000021ba4e         db  0x00 ; '.'
000000000021ba4f         db  0x00 ; '.'
000000000021ba50         db  0x40 ; '@'
000000000021ba51         db  0x25 ; '%'
000000000021ba52         db  0x00 ; '.'
000000000021ba53         db  0x00 ; '.'
000000000021ba54         db  0x00 ; '.'
000000000021ba55         db  0x00 ; '.'
000000000021ba56         db  0x00 ; '.'
000000000021ba57         db  0x00 ; '.'
000000000021ba58         db  0x0d ; '.'
000000000021ba59         db  0x00 ; '.'
000000000021ba5a         db  0x00 ; '.'
000000000021ba5b         db  0x00 ; '.'
000000000021ba5c         db  0x00 ; '.'
000000000021ba5d         db  0x00 ; '.'
000000000021ba5e         db  0x00 ; '.'
000000000021ba5f         db  0x00 ; '.'
000000000021ba60         db  0xe0 ; '.'
000000000021ba61         db  0x4e ; 'N'
000000000021ba62         db  0x01 ; '.'
000000000021ba63         db  0x00 ; '.'
000000000021ba64         db  0x00 ; '.'
000000000021ba65         db  0x00 ; '.'
000000000021ba66         db  0x00 ; '.'
000000000021ba67         db  0x00 ; '.'
000000000021ba68         db  0x19 ; '.'
000000000021ba69         db  0x00 ; '.'
000000000021ba6a         db  0x00 ; '.'
000000000021ba6b         db  0x00 ; '.'
000000000021ba6c         db  0x00 ; '.'
000000000021ba6d         db  0x00 ; '.'
000000000021ba6e         db  0x00 ; '.'
000000000021ba6f         db  0x00 ; '.'
000000000021ba70         db  0x90 ; '.'
000000000021ba71         db  0xb7 ; '.'
000000000021ba72         db  0x21 ; '!'
000000000021ba73         db  0x00 ; '.'
000000000021ba74         db  0x00 ; '.'
000000000021ba75         db  0x00 ; '.'
000000000021ba76         db  0x00 ; '.'
000000000021ba77         db  0x00 ; '.'
000000000021ba78         db  0x1b ; '.'
000000000021ba79         db  0x00 ; '.'
000000000021ba7a         db  0x00 ; '.'
000000000021ba7b         db  0x00 ; '.'
000000000021ba7c         db  0x00 ; '.'
000000000021ba7d         db  0x00 ; '.'
000000000021ba7e         db  0x00 ; '.'
000000000021ba7f         db  0x00 ; '.'
000000000021ba80         db  0x08 ; '.'
000000000021ba81         db  0x00 ; '.'
000000000021ba82         db  0x00 ; '.'
000000000021ba83         db  0x00 ; '.'
000000000021ba84         db  0x00 ; '.'
000000000021ba85         db  0x00 ; '.'
000000000021ba86         db  0x00 ; '.'
000000000021ba87         db  0x00 ; '.'
000000000021ba88         db  0x1a ; '.'
000000000021ba89         db  0x00 ; '.'
000000000021ba8a         db  0x00 ; '.'
000000000021ba8b         db  0x00 ; '.'
000000000021ba8c         db  0x00 ; '.'
000000000021ba8d         db  0x00 ; '.'
000000000021ba8e         db  0x00 ; '.'
000000000021ba8f         db  0x00 ; '.'
000000000021ba90         db  0x98 ; '.'
000000000021ba91         db  0xb7 ; '.'
000000000021ba92         db  0x21 ; '!'
000000000021ba93         db  0x00 ; '.'
000000000021ba94         db  0x00 ; '.'
000000000021ba95         db  0x00 ; '.'
000000000021ba96         db  0x00 ; '.'
000000000021ba97         db  0x00 ; '.'
000000000021ba98         db  0x1c ; '.'
000000000021ba99         db  0x00 ; '.'
000000000021ba9a         db  0x00 ; '.'
000000000021ba9b         db  0x00 ; '.'
000000000021ba9c         db  0x00 ; '.'
000000000021ba9d         db  0x00 ; '.'
000000000021ba9e         db  0x00 ; '.'
000000000021ba9f         db  0x00 ; '.'
000000000021baa0         db  0x08 ; '.'
000000000021baa1         db  0x00 ; '.'
000000000021baa2         db  0x00 ; '.'
000000000021baa3         db  0x00 ; '.'
000000000021baa4         db  0x00 ; '.'
000000000021baa5         db  0x00 ; '.'
000000000021baa6         db  0x00 ; '.'
000000000021baa7         db  0x00 ; '.'
000000000021baa8         db  0xf5 ; '.'
000000000021baa9         db  0xfe ; '.'
000000000021baaa         db  0xff ; '.'
000000000021baab         db  0x6f ; 'o'
000000000021baac         db  0x00 ; '.'
000000000021baad         db  0x00 ; '.'
000000000021baae         db  0x00 ; '.'
000000000021baaf         db  0x00 ; '.'
000000000021bab0         db  0x98 ; '.'
000000000021bab1         db  0x02 ; '.'
000000000021bab2         db  0x00 ; '.'
000000000021bab3         db  0x00 ; '.'
000000000021bab4         db  0x00 ; '.'
000000000021bab5         db  0x00 ; '.'
000000000021bab6         db  0x00 ; '.'
000000000021bab7         db  0x00 ; '.'
000000000021bab8         db  0x05 ; '.'
000000000021bab9         db  0x00 ; '.'
000000000021baba         db  0x00 ; '.'
000000000021babb         db  0x00 ; '.'
000000000021babc         db  0x00 ; '.'
000000000021babd         db  0x00 ; '.'
000000000021babe         db  0x00 ; '.'
000000000021babf         db  0x00 ; '.'
000000000021bac0         db  0xf8 ; '.'
000000000021bac1         db  0x0e ; '.'
000000000021bac2         db  0x00 ; '.'
000000000021bac3         db  0x00 ; '.'
000000000021bac4         db  0x00 ; '.'
000000000021bac5         db  0x00 ; '.'
000000000021bac6         db  0x00 ; '.'
000000000021bac7         db  0x00 ; '.'
000000000021bac8         db  0x06 ; '.'
000000000021bac9         db  0x00 ; '.'
000000000021baca         db  0x00 ; '.'
000000000021bacb         db  0x00 ; '.'
000000000021bacc         db  0x00 ; '.'
000000000021bacd         db  0x00 ; '.'
000000000021bace         db  0x00 ; '.'
000000000021bacf         db  0x00 ; '.'
000000000021bad0         db  0xe0 ; '.'
000000000021bad1         db  0x02 ; '.'
000000000021bad2         db  0x00 ; '.'
000000000021bad3         db  0x00 ; '.'
000000000021bad4         db  0x00 ; '.'
000000000021bad5         db  0x00 ; '.'
000000000021bad6         db  0x00 ; '.'
000000000021bad7         db  0x00 ; '.'
000000000021bad8         db  0x0a ; '.'
000000000021bad9         db  0x00 ; '.'
000000000021bada         db  0x00 ; '.'
000000000021badb         db  0x00 ; '.'
000000000021badc         db  0x00 ; '.'
000000000021badd         db  0x00 ; '.'
000000000021bade         db  0x00 ; '.'
000000000021badf         db  0x00 ; '.'
000000000021bae0         db  0x11 ; '.'
000000000021bae1         db  0x05 ; '.'
000000000021bae2         db  0x00 ; '.'
000000000021bae3         db  0x00 ; '.'
000000000021bae4         db  0x00 ; '.'
000000000021bae5         db  0x00 ; '.'
000000000021bae6         db  0x00 ; '.'
000000000021bae7         db  0x00 ; '.'
000000000021bae8         db  0x0b ; '.'
000000000021bae9         db  0x00 ; '.'
000000000021baea         db  0x00 ; '.'
000000000021baeb         db  0x00 ; '.'
000000000021baec         db  0x00 ; '.'
000000000021baed         db  0x00 ; '.'
000000000021baee         db  0x00 ; '.'
000000000021baef         db  0x00 ; '.'
000000000021baf0         db  0x18 ; '.'
000000000021baf1         db  0x00 ; '.'
000000000021baf2         db  0x00 ; '.'
000000000021baf3         db  0x00 ; '.'
000000000021baf4         db  0x00 ; '.'
000000000021baf5         db  0x00 ; '.'
000000000021baf6         db  0x00 ; '.'
000000000021baf7         db  0x00 ; '.'
000000000021baf8         db  0x15 ; '.'
000000000021baf9         db  0x00 ; '.'
000000000021bafa         db  0x00 ; '.'
000000000021bafb         db  0x00 ; '.'
000000000021bafc         db  0x00 ; '.'
000000000021bafd         db  0x00 ; '.'
000000000021bafe         db  0x00 ; '.'
000000000021baff         db  0x00 ; '.'
000000000021bb00         db  0x00 ; '.'
000000000021bb01         db  0x00 ; '.'
000000000021bb02         db  0x00 ; '.'
000000000021bb03         db  0x00 ; '.'
000000000021bb04         db  0x00 ; '.'
000000000021bb05         db  0x00 ; '.'
000000000021bb06         db  0x00 ; '.'
000000000021bb07         db  0x00 ; '.'
000000000021bb08         db  0x03 ; '.'
000000000021bb09         db  0x00 ; '.'
000000000021bb0a         db  0x00 ; '.'
000000000021bb0b         db  0x00 ; '.'
000000000021bb0c         db  0x00 ; '.'
000000000021bb0d         db  0x00 ; '.'
000000000021bb0e         db  0x00 ; '.'
000000000021bb0f         db  0x00 ; '.'
000000000021bb10         db  0x28 ; '('
000000000021bb11         db  0xbc ; '.'
000000000021bb12         db  0x21 ; '!'
000000000021bb13         db  0x00 ; '.'
000000000021bb14         db  0x00 ; '.'
000000000021bb15         db  0x00 ; '.'
000000000021bb16         db  0x00 ; '.'
000000000021bb17         db  0x00 ; '.'
000000000021bb18         db  0x02 ; '.'
000000000021bb19         db  0x00 ; '.'
000000000021bb1a         db  0x00 ; '.'
000000000021bb1b         db  0x00 ; '.'
000000000021bb1c         db  0x00 ; '.'
000000000021bb1d         db  0x00 ; '.'
000000000021bb1e         db  0x00 ; '.'
000000000021bb1f         db  0x00 ; '.'
000000000021bb20         db  0x98 ; '.'
000000000021bb21         db  0x0a ; '.'
000000000021bb22         db  0x00 ; '.'
000000000021bb23         db  0x00 ; '.'
000000000021bb24         db  0x00 ; '.'
000000000021bb25         db  0x00 ; '.'
000000000021bb26         db  0x00 ; '.'
000000000021bb27         db  0x00 ; '.'
000000000021bb28         db  0x14 ; '.'
000000000021bb29         db  0x00 ; '.'
000000000021bb2a         db  0x00 ; '.'
000000000021bb2b         db  0x00 ; '.'
000000000021bb2c         db  0x00 ; '.'
000000000021bb2d         db  0x00 ; '.'
000000000021bb2e         db  0x00 ; '.'
000000000021bb2f         db  0x00 ; '.'
000000000021bb30         db  0x07 ; '.'
000000000021bb31         db  0x00 ; '.'
000000000021bb32         db  0x00 ; '.'
000000000021bb33         db  0x00 ; '.'
000000000021bb34         db  0x00 ; '.'
000000000021bb35         db  0x00 ; '.'
000000000021bb36         db  0x00 ; '.'
000000000021bb37         db  0x00 ; '.'
000000000021bb38         db  0x17 ; '.'
000000000021bb39         db  0x00 ; '.'
000000000021bb3a         db  0x00 ; '.'
000000000021bb3b         db  0x00 ; '.'
000000000021bb3c         db  0x00 ; '.'
000000000021bb3d         db  0x00 ; '.'
000000000021bb3e         db  0x00 ; '.'
000000000021bb3f         db  0x00 ; '.'
000000000021bb40         db  0xa8 ; '.'
000000000021bb41         db  0x1a ; '.'
000000000021bb42         db  0x00 ; '.'
000000000021bb43         db  0x00 ; '.'
000000000021bb44         db  0x00 ; '.'
000000000021bb45         db  0x00 ; '.'
000000000021bb46         db  0x00 ; '.'
000000000021bb47         db  0x00 ; '.'
000000000021bb48         db  0x07 ; '.'
000000000021bb49         db  0x00 ; '.'
000000000021bb4a         db  0x00 ; '.'
000000000021bb4b         db  0x00 ; '.'
000000000021bb4c         db  0x00 ; '.'
000000000021bb4d         db  0x00 ; '.'
000000000021bb4e         db  0x00 ; '.'
000000000021bb4f         db  0x00 ; '.'
000000000021bb50         db  0xb0 ; '.'
000000000021bb51         db  0x15 ; '.'
000000000021bb52         db  0x00 ; '.'
000000000021bb53         db  0x00 ; '.'
000000000021bb54         db  0x00 ; '.'
000000000021bb55         db  0x00 ; '.'
000000000021bb56         db  0x00 ; '.'
000000000021bb57         db  0x00 ; '.'
000000000021bb58         db  0x08 ; '.'
000000000021bb59         db  0x00 ; '.'
000000000021bb5a         db  0x00 ; '.'
000000000021bb5b         db  0x00 ; '.'
000000000021bb5c         db  0x00 ; '.'
000000000021bb5d         db  0x00 ; '.'
000000000021bb5e         db  0x00 ; '.'
000000000021bb5f         db  0x00 ; '.'
000000000021bb60         db  0xf8 ; '.'
000000000021bb61         db  0x04 ; '.'
000000000021bb62         db  0x00 ; '.'
000000000021bb63         db  0x00 ; '.'
000000000021bb64         db  0x00 ; '.'
000000000021bb65         db  0x00 ; '.'
000000000021bb66         db  0x00 ; '.'
000000000021bb67         db  0x00 ; '.'
000000000021bb68         db  0x09 ; '.'
000000000021bb69         db  0x00 ; '.'
000000000021bb6a         db  0x00 ; '.'
000000000021bb6b         db  0x00 ; '.'
000000000021bb6c         db  0x00 ; '.'
000000000021bb6d         db  0x00 ; '.'
000000000021bb6e         db  0x00 ; '.'
000000000021bb6f         db  0x00 ; '.'
000000000021bb70         db  0x18 ; '.'
000000000021bb71         db  0x00 ; '.'
000000000021bb72         db  0x00 ; '.'
000000000021bb73         db  0x00 ; '.'
000000000021bb74         db  0x00 ; '.'
000000000021bb75         db  0x00 ; '.'
000000000021bb76         db  0x00 ; '.'
000000000021bb77         db  0x00 ; '.'
000000000021bb78         db  0x1e ; '.'
000000000021bb79         db  0x00 ; '.'
000000000021bb7a         db  0x00 ; '.'
000000000021bb7b         db  0x00 ; '.'
000000000021bb7c         db  0x00 ; '.'
000000000021bb7d         db  0x00 ; '.'
000000000021bb7e         db  0x00 ; '.'
000000000021bb7f         db  0x00 ; '.'
000000000021bb80         db  0x08 ; '.'
000000000021bb81         db  0x00 ; '.'
000000000021bb82         db  0x00 ; '.'
000000000021bb83         db  0x00 ; '.'
000000000021bb84         db  0x00 ; '.'
000000000021bb85         db  0x00 ; '.'
000000000021bb86         db  0x00 ; '.'
000000000021bb87         db  0x00 ; '.'
000000000021bb88         db  0xfb ; '.'
000000000021bb89         db  0xff ; '.'
000000000021bb8a         db  0xff ; '.'
000000000021bb8b         db  0x6f ; 'o'
000000000021bb8c         db  0x00 ; '.'
000000000021bb8d         db  0x00 ; '.'
000000000021bb8e         db  0x00 ; '.'
000000000021bb8f         db  0x00 ; '.'
000000000021bb90         db  0x01 ; '.'
000000000021bb91         db  0x00 ; '.'
000000000021bb92         db  0x00 ; '.'
000000000021bb93         db  0x08 ; '.'
000000000021bb94         db  0x00 ; '.'
000000000021bb95         db  0x00 ; '.'
000000000021bb96         db  0x00 ; '.'
000000000021bb97         db  0x00 ; '.'
000000000021bb98         db  0xfe ; '.'
000000000021bb99         db  0xff ; '.'
000000000021bb9a         db  0xff ; '.'
000000000021bb9b         db  0x6f ; 'o'
000000000021bb9c         db  0x00 ; '.'
000000000021bb9d         db  0x00 ; '.'
000000000021bb9e         db  0x00 ; '.'
000000000021bb9f         db  0x00 ; '.'
000000000021bba0         db  0x10 ; '.'
000000000021bba1         db  0x15 ; '.'
000000000021bba2         db  0x00 ; '.'
000000000021bba3         db  0x00 ; '.'
000000000021bba4         db  0x00 ; '.'
000000000021bba5         db  0x00 ; '.'
000000000021bba6         db  0x00 ; '.'
000000000021bba7         db  0x00 ; '.'
000000000021bba8         db  0xff ; '.'
000000000021bba9         db  0xff ; '.'
000000000021bbaa         db  0xff ; '.'
000000000021bbab         db  0x6f ; 'o'
000000000021bbac         db  0x00 ; '.'
000000000021bbad         db  0x00 ; '.'
000000000021bbae         db  0x00 ; '.'
000000000021bbaf         db  0x00 ; '.'
000000000021bbb0         db  0x01 ; '.'
000000000021bbb1         db  0x00 ; '.'
000000000021bbb2         db  0x00 ; '.'
000000000021bbb3         db  0x00 ; '.'
000000000021bbb4         db  0x00 ; '.'
000000000021bbb5         db  0x00 ; '.'
000000000021bbb6         db  0x00 ; '.'
000000000021bbb7         db  0x00 ; '.'
000000000021bbb8         db  0xf0 ; '.'
000000000021bbb9         db  0xff ; '.'
000000000021bbba         db  0xff ; '.'
000000000021bbbb         db  0x6f ; 'o'
000000000021bbbc         db  0x00 ; '.'
000000000021bbbd         db  0x00 ; '.'
000000000021bbbe         db  0x00 ; '.'
000000000021bbbf         db  0x00 ; '.'
000000000021bbc0         db  0x0a ; '.'
000000000021bbc1         db  0x14 ; '.'
000000000021bbc2         db  0x00 ; '.'
000000000021bbc3         db  0x00 ; '.'
000000000021bbc4         db  0x00 ; '.'
000000000021bbc5         db  0x00 ; '.'
000000000021bbc6         db  0x00 ; '.'
000000000021bbc7         db  0x00 ; '.'
000000000021bbc8         db  0xf9 ; '.'
000000000021bbc9         db  0xff ; '.'
000000000021bbca         db  0xff ; '.'
000000000021bbcb         db  0x6f ; 'o'
000000000021bbcc         db  0x00 ; '.'
000000000021bbcd         db  0x00 ; '.'
000000000021bbce         db  0x00 ; '.'
000000000021bbcf         db  0x00 ; '.'
000000000021bbd0         db  0x28 ; '('
000000000021bbd1         db  0x00 ; '.'
000000000021bbd2         db  0x00 ; '.'
000000000021bbd3         db  0x00 ; '.'
000000000021bbd4         db  0x00 ; '.'
000000000021bbd5         db  0x00 ; '.'
000000000021bbd6         db  0x00 ; '.'
000000000021bbd7         db  0x00 ; '.'
000000000021bbd8         db  0x00 ; '.'
000000000021bbd9         db  0x00 ; '.'
000000000021bbda         db  0x00 ; '.'
000000000021bbdb         db  0x00 ; '.'
000000000021bbdc         db  0x00 ; '.'
000000000021bbdd         db  0x00 ; '.'
000000000021bbde         db  0x00 ; '.'
000000000021bbdf         db  0x00 ; '.'
000000000021bbe0         db  0x00 ; '.'
000000000021bbe1         db  0x00 ; '.'
000000000021bbe2         db  0x00 ; '.'
000000000021bbe3         db  0x00 ; '.'
000000000021bbe4         db  0x00 ; '.'
000000000021bbe5         db  0x00 ; '.'
000000000021bbe6         db  0x00 ; '.'
000000000021bbe7         db  0x00 ; '.'
000000000021bbe8         db  0x00 ; '.'
000000000021bbe9         db  0x00 ; '.'
000000000021bbea         db  0x00 ; '.'
000000000021bbeb         db  0x00 ; '.'
000000000021bbec         db  0x00 ; '.'
000000000021bbed         db  0x00 ; '.'
000000000021bbee         db  0x00 ; '.'
000000000021bbef         db  0x00 ; '.'
000000000021bbf0         db  0x00 ; '.'
000000000021bbf1         db  0x00 ; '.'
000000000021bbf2         db  0x00 ; '.'
000000000021bbf3         db  0x00 ; '.'
000000000021bbf4         db  0x00 ; '.'
000000000021bbf5         db  0x00 ; '.'
000000000021bbf6         db  0x00 ; '.'
000000000021bbf7         db  0x00 ; '.'
000000000021bbf8         db  0x00 ; '.'
000000000021bbf9         db  0x00 ; '.'
000000000021bbfa         db  0x00 ; '.'
000000000021bbfb         db  0x00 ; '.'
000000000021bbfc         db  0x00 ; '.'
000000000021bbfd         db  0x00 ; '.'
000000000021bbfe         db  0x00 ; '.'
000000000021bbff         db  0x00 ; '.'
000000000021bc00         db  0x00 ; '.'
000000000021bc01         db  0x00 ; '.'
000000000021bc02         db  0x00 ; '.'
000000000021bc03         db  0x00 ; '.'
000000000021bc04         db  0x00 ; '.'
000000000021bc05         db  0x00 ; '.'
000000000021bc06         db  0x00 ; '.'
000000000021bc07         db  0x00 ; '.'
000000000021bc08         db  0x00 ; '.'
000000000021bc09         db  0x00 ; '.'
000000000021bc0a         db  0x00 ; '.'
000000000021bc0b         db  0x00 ; '.'
000000000021bc0c         db  0x00 ; '.'
000000000021bc0d         db  0x00 ; '.'
000000000021bc0e         db  0x00 ; '.'
000000000021bc0f         db  0x00 ; '.'
000000000021bc10         db  0x00 ; '.'
000000000021bc11         db  0x00 ; '.'
000000000021bc12         db  0x00 ; '.'
000000000021bc13         db  0x00 ; '.'
000000000021bc14         db  0x00 ; '.'
000000000021bc15         db  0x00 ; '.'
000000000021bc16         db  0x00 ; '.'
000000000021bc17         db  0x00 ; '.'
000000000021bc18         db  0x00 ; '.'
000000000021bc19         db  0x00 ; '.'
000000000021bc1a         db  0x00 ; '.'
000000000021bc1b         db  0x00 ; '.'
000000000021bc1c         db  0x00 ; '.'
000000000021bc1d         db  0x00 ; '.'
000000000021bc1e         db  0x00 ; '.'
000000000021bc1f         db  0x00 ; '.'
000000000021bc20         db  0x00 ; '.'
000000000021bc21         db  0x00 ; '.'
000000000021bc22         db  0x00 ; '.'
000000000021bc23         db  0x00 ; '.'
000000000021bc24         db  0x00 ; '.'
000000000021bc25         db  0x00 ; '.'
000000000021bc26         db  0x00 ; '.'
000000000021bc27         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x21bc28; 0x21bff8[ (976 bytes)
        ; File offset : [113704; 114680[ (976 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000021bc28         db  0x38 ; '8'
000000000021bc29         db  0xba ; '.'
000000000021bc2a         db  0x21 ; '!'
000000000021bc2b         db  0x00 ; '.'
000000000021bc2c         db  0x00 ; '.'
000000000021bc2d         db  0x00 ; '.'
000000000021bc2e         db  0x00 ; '.'
000000000021bc2f         db  0x00 ; '.'
                     qword_21bc30:
000000000021bc30         dq         0x0000000000000000                          ; DATA XREF=0x2560
000000000021bc38         db  0x00 ; '.'                                         ; DATA XREF=0x2566
000000000021bc39         db  0x00 ; '.'
000000000021bc3a         db  0x00 ; '.'
000000000021bc3b         db  0x00 ; '.'
000000000021bc3c         db  0x00 ; '.'
000000000021bc3d         db  0x00 ; '.'
000000000021bc3e         db  0x00 ; '.'
000000000021bc3f         db  0x00 ; '.'
                     getenv@GOT:        // getenv
000000000021bc40         dq         0x000000000021c700                          ; DATA XREF=j_getenv
                     utimensat@GOT:        // utimensat
000000000021bc48         dq         0x000000000021c710                          ; DATA XREF=j_utimensat
                     abort@GOT:        // abort
000000000021bc50         dq         0x000000000021c718                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000021bc58         dq         0x000000000021c720                          ; DATA XREF=j___errno_location
                     unlink@GOT:        // unlink
000000000021bc60         dq         0x000000000021c728                          ; DATA XREF=j_unlink
                     strncmp@GOT:        // strncmp
000000000021bc68         dq         0x000000000021c730                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000021bc70         dq         0x000000000021c740                          ; DATA XREF=j__exit
                     strcpy@GOT:        // strcpy
000000000021bc78         dq         0x000000000021c748                          ; DATA XREF=j_strcpy
                     __fpending@GOT:        // __fpending
000000000021bc80         dq         0x000000000021c750                          ; DATA XREF=j___fpending
                     __read_chk@GOT:        // __read_chk
000000000021bc88         dq         0x000000000021c758                          ; DATA XREF=j___read_chk
                     mkdir@GOT:        // mkdir
000000000021bc90         dq         0x000000000021c760                          ; DATA XREF=j_mkdir
                     unlinkat@GOT:        // unlinkat
000000000021bc98         dq         0x000000000021c768                          ; DATA XREF=j_unlinkat
                     qsort@GOT:        // qsort
000000000021bca0         dq         0x000000000021c770                          ; DATA XREF=j_qsort
                     isatty@GOT:        // isatty
000000000021bca8         dq         0x000000000021c778                          ; DATA XREF=j_isatty
                     faccessat@GOT:        // faccessat
000000000021bcb0         dq         0x000000000021c780                          ; DATA XREF=j_faccessat
                     readlink@GOT:        // readlink
000000000021bcb8         dq         0x000000000021c788                          ; DATA XREF=j_readlink
                     fcntl@GOT:        // fcntl
000000000021bcc0         dq         0x000000000021c790                          ; DATA XREF=j_fcntl
                     clock_gettime@GOT:        // clock_gettime
000000000021bcc8         dq         0x000000000021c798                          ; DATA XREF=j_clock_gettime
                     write@GOT:        // write
000000000021bcd0         dq         0x000000000021c7a0                          ; DATA XREF=j_write
                     getpid@GOT:        // getpid
000000000021bcd8         dq         0x000000000021c7a8                          ; DATA XREF=j_getpid
                     fread_unlocked@GOT:        // fread_unlocked
000000000021bce0         dq         0x000000000021c7b0                          ; DATA XREF=j_fread_unlocked
                     textdomain@GOT:        // textdomain
000000000021bce8         dq         0x000000000021c7b8                          ; DATA XREF=j_textdomain
                     pathconf@GOT:        // pathconf
000000000021bcf0         dq         0x000000000021c7c0                          ; DATA XREF=j_pathconf
                     fclose@GOT:        // fclose
000000000021bcf8         dq         0x000000000021c7c8                          ; DATA XREF=j_fclose
                     opendir@GOT:        // opendir
000000000021bd00         dq         0x000000000021c7d0                          ; DATA XREF=j_opendir
                     bindtextdomain@GOT:        // bindtextdomain
000000000021bd08         dq         0x000000000021c7d8                          ; DATA XREF=j_bindtextdomain
                     stpcpy@GOT:        // stpcpy
000000000021bd10         dq         0x000000000021c7e0                          ; DATA XREF=j_stpcpy
                     rmdir@GOT:        // rmdir
000000000021bd18         dq         0x000000000021c7e8                          ; DATA XREF=j_rmdir
                     dcgettext@GOT:        // dcgettext
000000000021bd20         dq         0x000000000021c7f0                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000021bd28         dq         0x000000000021c7f8                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000021bd30         dq         0x000000000021c800                          ; DATA XREF=j_strlen
                     __lxstat@GOT:        // __lxstat
000000000021bd38         dq         0x000000000021c808                          ; DATA XREF=j___lxstat
                     openat@GOT:        // openat
000000000021bd40         dq         0x000000000021c810                          ; DATA XREF=j_openat
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000021bd48         dq         0x000000000021c818                          ; DATA XREF=j___stack_chk_fail
                     getuid@GOT:        // getuid
000000000021bd50         dq         0x000000000021c820                          ; DATA XREF=j_getuid
                     getopt_long@GOT:        // getopt_long
000000000021bd58         dq         0x000000000021c828                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000021bd60         dq         0x000000000021c830                          ; DATA XREF=j_mbrtowc
                     __fxstatat@GOT:        // __fxstatat
000000000021bd68         dq         0x000000000021c838                          ; DATA XREF=j___fxstatat
                     __overflow@GOT:        // __overflow
000000000021bd70         dq         0x000000000021c840                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
000000000021bd78         dq         0x000000000021c848                          ; DATA XREF=j_strrchr
                     ftruncate@GOT:        // ftruncate
000000000021bd80         dq         0x000000000021c850                          ; DATA XREF=j_ftruncate
                     lseek@GOT:        // lseek
000000000021bd88         dq         0x000000000021c858                          ; DATA XREF=j_lseek
                     gettimeofday@GOT:        // gettimeofday
000000000021bd90         dq         0x000000000021c860                          ; DATA XREF=j_gettimeofday
                     __assert_fail@GOT:        // __assert_fail
000000000021bd98         dq         0x000000000021c868                          ; DATA XREF=j___assert_fail
                     memset@GOT:        // memset
000000000021bda0         dq         0x000000000021c870                          ; DATA XREF=j_memset
                     geteuid@GOT:        // geteuid
000000000021bda8         dq         0x000000000021c878                          ; DATA XREF=j_geteuid
                     ioctl@GOT:        // ioctl
000000000021bdb0         dq         0x000000000021c880                          ; DATA XREF=j_ioctl
                     canonicalize_file_name@GOT:        // canonicalize_file_name
000000000021bdb8         dq         0x000000000021c888                          ; DATA XREF=j_canonicalize_file_name
                     close@GOT:        // close
000000000021bdc0         dq         0x000000000021c890                          ; DATA XREF=j_close
                     rewinddir@GOT:        // rewinddir
000000000021bdc8         dq         0x000000000021c898                          ; DATA XREF=j_rewinddir
                     strspn@GOT:        // strspn
000000000021bdd0         dq         0x000000000021c8a0                          ; DATA XREF=j_strspn
                     closedir@GOT:        // closedir
000000000021bdd8         dq         0x000000000021c8a8                          ; DATA XREF=j_closedir
                     posix_fadvise@GOT:        // posix_fadvise
000000000021bde0         dq         0x000000000021c8b0                          ; DATA XREF=j_posix_fadvise
                     read@GOT:        // read
000000000021bde8         dq         0x000000000021c8b8                          ; DATA XREF=j_read
                     memcmp@GOT:        // memcmp
000000000021bdf0         dq         0x000000000021c8c8                          ; DATA XREF=j_memcmp
                     fallocate@GOT:        // fallocate
000000000021bdf8         dq         0x000000000021c8d0                          ; DATA XREF=j_fallocate
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000021be00         dq         0x000000000021c8d8                          ; DATA XREF=j_fputs_unlocked
                     utimes@GOT:        // utimes
000000000021be08         dq         0x000000000021c8e0                          ; DATA XREF=j_utimes
                     calloc@GOT:        // calloc
000000000021be10         dq         0x000000000021c8e8                          ; DATA XREF=j_calloc
                     __getdelim@GOT:        // __getdelim
000000000021be18         dq         0x000000000021c8f0                          ; DATA XREF=j___getdelim
                     strcmp@GOT:        // strcmp
000000000021be20         dq         0x000000000021c8f8                          ; DATA XREF=j_strcmp
                     dirfd@GOT:        // dirfd
000000000021be28         dq         0x000000000021c900                          ; DATA XREF=j_dirfd
                     fpathconf@GOT:        // fpathconf
000000000021be30         dq         0x000000000021c908                          ; DATA XREF=j_fpathconf
                     rpmatch@GOT:        // rpmatch
000000000021be38         dq         0x000000000021c910                          ; DATA XREF=j_rpmatch
                     syscall@GOT:        // syscall
000000000021be40         dq         0x000000000021c918                          ; DATA XREF=j_syscall
                     mkfifo@GOT:        // mkfifo
000000000021be48         dq         0x000000000021c920                          ; DATA XREF=j_mkfifo
                     umask@GOT:        // umask
000000000021be50         dq         0x000000000021c930                          ; DATA XREF=j_umask
                     memcpy@GOT:        // memcpy
000000000021be58         dq         0x000000000021c938                          ; DATA XREF=j_memcpy
                     __xmknod@GOT:        // __xmknod
000000000021be60         dq         0x000000000021c940                          ; DATA XREF=j___xmknod
                     fileno@GOT:        // fileno
000000000021be68         dq         0x000000000021c948                          ; DATA XREF=j_fileno
                     getgid@GOT:        // getgid
000000000021be70         dq         0x000000000021c950                          ; DATA XREF=j_getgid
                     __xstat@GOT:        // __xstat
000000000021be78         dq         0x000000000021c958                          ; DATA XREF=j___xstat
                     readdir@GOT:        // readdir
000000000021be80         dq         0x000000000021c960                          ; DATA XREF=j_readdir
                     malloc@GOT:        // malloc
000000000021be88         dq         0x000000000021c968                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000021be90         dq         0x000000000021c970                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000021be98         dq         0x000000000021c978                          ; DATA XREF=j_nl_langinfo
                     __fxstat@GOT:        // __fxstat
000000000021bea0         dq         0x000000000021c980                          ; DATA XREF=j___fxstat
                     lchown@GOT:        // lchown
000000000021bea8         dq         0x000000000021c988                          ; DATA XREF=j_lchown
                     __freading@GOT:        // __freading
000000000021beb0         dq         0x000000000021c990                          ; DATA XREF=j___freading
                     fchdir@GOT:        // fchdir
000000000021beb8         dq         0x000000000021c998                          ; DATA XREF=j_fchdir
                     realloc@GOT:        // realloc
000000000021bec0         dq         0x000000000021c9a0                          ; DATA XREF=j_realloc
                     fdopen@GOT:        // fdopen
000000000021bec8         dq         0x000000000021c9a8                          ; DATA XREF=j_fdopen
                     linkat@GOT:        // linkat
000000000021bed0         dq         0x000000000021c9b0                          ; DATA XREF=j_linkat
                     setlocale@GOT:        // setlocale
000000000021bed8         dq         0x000000000021c9b8                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000021bee0         dq         0x000000000021c9c0                          ; DATA XREF=j___printf_chk
                     fchmod@GOT:        // fchmod
000000000021bee8         dq         0x000000000021c9c8                          ; DATA XREF=j_fchmod
                     setvbuf@GOT:        // setvbuf
000000000021bef0         dq         0x000000000021c9d0                          ; DATA XREF=j_setvbuf
                     chmod@GOT:        // chmod
000000000021bef8         dq         0x000000000021c9d8                          ; DATA XREF=j_chmod
                     mempcpy@GOT:        // mempcpy
000000000021bf00         dq         0x000000000021c9e0                          ; DATA XREF=j_mempcpy
                     memmove@GOT:        // memmove
000000000021bf08         dq         0x000000000021c9e8                          ; DATA XREF=j_memmove
                     error@GOT:        // error
000000000021bf10         dq         0x000000000021c9f0                          ; DATA XREF=j_error
                     __explicit_bzero_chk@GOT:        // __explicit_bzero_chk
000000000021bf18         dq         0x000000000021c9f8                          ; DATA XREF=j___explicit_bzero_chk
                     open@GOT:        // open
000000000021bf20         dq         0x000000000021ca00                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
000000000021bf28         dq         0x000000000021ca08                          ; DATA XREF=j_fseeko
                     fchown@GOT:        // fchown
000000000021bf30         dq         0x000000000021ca10                          ; DATA XREF=j_fchown
                     fopen@GOT:        // fopen
000000000021bf38         dq         0x000000000021ca18                          ; DATA XREF=j_fopen
                     rename@GOT:        // rename
000000000021bf40         dq         0x000000000021ca20                          ; DATA XREF=j_rename
                     fdopendir@GOT:        // fdopendir
000000000021bf48         dq         0x000000000021ca28                          ; DATA XREF=j_fdopendir
                     futimens@GOT:        // futimens
000000000021bf50         dq         0x000000000021ca30                          ; DATA XREF=j_futimens
                     euidaccess@GOT:        // euidaccess
000000000021bf58         dq         0x000000000021ca38                          ; DATA XREF=j_euidaccess
                     fstatfs@GOT:        // fstatfs
000000000021bf60         dq         0x000000000021ca40                          ; DATA XREF=j_fstatfs
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000021bf68         dq         0x000000000021ca48                          ; DATA XREF=j___cxa_atexit
                     renameat@GOT:        // renameat
000000000021bf70         dq         0x000000000021ca50                          ; DATA XREF=j_renameat
                     getpagesize@GOT:        // getpagesize
000000000021bf78         dq         0x000000000021ca58                          ; DATA XREF=j_getpagesize
                     getppid@GOT:        // getppid
000000000021bf80         dq         0x000000000021ca60                          ; DATA XREF=j_getppid
                     exit@GOT:        // exit
000000000021bf88         dq         0x000000000021ca68                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000021bf90         dq         0x000000000021ca70                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000021bf98         dq         0x000000000021ca78                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000021bfa0         dq         0x000000000021ca88                          ; DATA XREF=j_mbsinit
                     symlinkat@GOT:        // symlinkat
000000000021bfa8         dq         0x000000000021ca90                          ; DATA XREF=j_symlinkat
                     iswprint@GOT:        // iswprint
000000000021bfb0         dq         0x000000000021ca98                          ; DATA XREF=j_iswprint
                     futimesat@GOT:        // futimesat
000000000021bfb8         dq         0x000000000021caa8                          ; DATA XREF=j_futimesat
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000021bfc0         dq         0x000000000021cab0                          ; DATA XREF=j___ctype_b_loc
                     qword_21bfc8:
000000000021bfc8         dq         0x0000000000000000                          ; DATA XREF=sub_2c80, utimecmpat+1584, filesystem_type+96, setup_dir.isra.4+12
                     qword_21bfd0:
000000000021bfd0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000021bfd8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000021bfd9         db  0x00 ; '.'
000000000021bfda         db  0x00 ; '.'
000000000021bfdb         db  0x00 ; '.'
000000000021bfdc         db  0x00 ; '.'
000000000021bfdd         db  0x00 ; '.'
000000000021bfde         db  0x00 ; '.'
000000000021bfdf         db  0x00 ; '.'
                     qword_21bfe0:
000000000021bfe0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_21bfe8:
000000000021bfe8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_21bff0:
000000000021bff0         dq         0x0000000000000000                          ; DATA XREF=j_qword_21bff0, __do_global_dtors_aux+9
000000000021bff8         db  0x00 ; '.'
000000000021bff9         db  0x00 ; '.'
000000000021bffa         db  0x00 ; '.'
000000000021bffb         db  0x00 ; '.'
000000000021bffc         db  0x00 ; '.'
000000000021bffd         db  0x00 ; '.'
000000000021bffe         db  0x00 ; '.'
000000000021bfff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x21c000; 0x21c0a8[ (168 bytes)
        ; File offset : [114688; 114856[ (168 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000021c000         db  0x00 ; '.'
000000000021c001         db  0x00 ; '.'
000000000021c002         db  0x00 ; '.'
000000000021c003         db  0x00 ; '.'
000000000021c004         db  0x00 ; '.'
000000000021c005         db  0x00 ; '.'
000000000021c006         db  0x00 ; '.'
000000000021c007         db  0x00 ; '.'
                     __dso_handle:
000000000021c008         dq         0x000000000021c008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     mask.7898:
000000000021c010         dd         0xffffffff                                  ; DATA XREF=cached_umask+1, cached_umask+27
000000000021c014         align      2
000000000021c01a         db  0x02 ; '.'
000000000021c01b         db  0x00 ; '.'
000000000021c01c         db  0x00 ; '.'
000000000021c01d         db  0x00 ; '.'
000000000021c01e         db  0x00 ; '.'
000000000021c01f         db  0x00 ; '.'
                     Version:
000000000021c020         dq         0x0000000000016881                          ; "8.31", DATA XREF=main+569
                     exit_failure:
000000000021c028         dd         0x00000001                                  ; DATA XREF=close_stdin+168, close_stdout+130, xalloc_die+23, randread_error+51
000000000021c02c         db  0x00 ; '.'
000000000021c02d         db  0x00 ; '.'
000000000021c02e         db  0x00 ; '.'
000000000021c02f         db  0x00 ; '.'
000000000021c030         db  0x00 ; '.'
000000000021c031         db  0x00 ; '.'
000000000021c032         db  0x00 ; '.'
000000000021c033         db  0x00 ; '.'
000000000021c034         db  0x00 ; '.'
000000000021c035         db  0x00 ; '.'
000000000021c036         db  0x00 ; '.'
000000000021c037         db  0x00 ; '.'
000000000021c038         db  0x00 ; '.'
000000000021c039         db  0x00 ; '.'
000000000021c03a         db  0x00 ; '.'
000000000021c03b         db  0x00 ; '.'
000000000021c03c         db  0x00 ; '.'
000000000021c03d         db  0x00 ; '.'
000000000021c03e         db  0x00 ; '.'
000000000021c03f         db  0x00 ; '.'
                     quote_quoting_options:
000000000021c040         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000021c041         db  0x00 ; '.'
000000000021c042         db  0x00 ; '.'
000000000021c043         db  0x00 ; '.'
000000000021c044         db  0x00 ; '.'
000000000021c045         db  0x00 ; '.'
000000000021c046         db  0x00 ; '.'
000000000021c047         db  0x00 ; '.'
000000000021c048         db  0x00 ; '.'
000000000021c049         db  0x00 ; '.'
000000000021c04a         db  0x00 ; '.'
000000000021c04b         db  0x00 ; '.'
000000000021c04c         db  0x00 ; '.'
000000000021c04d         db  0x00 ; '.'
000000000021c04e         db  0x00 ; '.'
000000000021c04f         db  0x00 ; '.'
000000000021c050         db  0x00 ; '.'
000000000021c051         db  0x00 ; '.'
000000000021c052         db  0x00 ; '.'
000000000021c053         db  0x00 ; '.'
000000000021c054         db  0x00 ; '.'
000000000021c055         db  0x00 ; '.'
000000000021c056         db  0x00 ; '.'
000000000021c057         db  0x00 ; '.'
000000000021c058         db  0x00 ; '.'
000000000021c059         db  0x00 ; '.'
000000000021c05a         db  0x00 ; '.'
000000000021c05b         db  0x00 ; '.'
000000000021c05c         db  0x00 ; '.'
000000000021c05d         db  0x00 ; '.'
000000000021c05e         db  0x00 ; '.'
000000000021c05f         db  0x00 ; '.'
000000000021c060         db  0x00 ; '.'
000000000021c061         db  0x00 ; '.'
000000000021c062         db  0x00 ; '.'
000000000021c063         db  0x00 ; '.'
000000000021c064         db  0x00 ; '.'
000000000021c065         db  0x00 ; '.'
000000000021c066         db  0x00 ; '.'
000000000021c067         db  0x00 ; '.'
000000000021c068         db  0x00 ; '.'
000000000021c069         db  0x00 ; '.'
000000000021c06a         db  0x00 ; '.'
000000000021c06b         db  0x00 ; '.'
000000000021c06c         db  0x00 ; '.'
000000000021c06d         db  0x00 ; '.'
000000000021c06e         db  0x00 ; '.'
000000000021c06f         db  0x00 ; '.'
000000000021c070         db  0x00 ; '.'
000000000021c071         db  0x00 ; '.'
000000000021c072         db  0x00 ; '.'
000000000021c073         db  0x00 ; '.'
000000000021c074         db  0x00 ; '.'
000000000021c075         db  0x00 ; '.'
000000000021c076         db  0x00 ; '.'
000000000021c077         db  0x00 ; '.'
                     nslots:
000000000021c078         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000021c07c         db  0x00 ; '.'
000000000021c07d         db  0x00 ; '.'
000000000021c07e         db  0x00 ; '.'
000000000021c07f         db  0x00 ; '.'
                     slotvec:
000000000021c080         dq         0x000000000021c090                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000021c088         db  0x00 ; '.'
000000000021c089         db  0x00 ; '.'
000000000021c08a         db  0x00 ; '.'
000000000021c08b         db  0x00 ; '.'
000000000021c08c         db  0x00 ; '.'
000000000021c08d         db  0x00 ; '.'
000000000021c08e         db  0x00 ; '.'
000000000021c08f         db  0x00 ; '.'
                     slotvec0:
000000000021c090         dq         1.26481e-321, 1.09351e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec
                     argmatch_die:
000000000021c0a0         dq         0x0000000000013660                          ; DATA XREF=get_version.part.0+4
                     __TMC_END__:
000000000021c0a8         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7
000000000021c0a9         db  0x00 ; '.'
000000000021c0aa         db  0x00 ; '.'
000000000021c0ab         db  0x00 ; '.'
000000000021c0ac         db  0x00 ; '.'
000000000021c0ad         db  0x00 ; '.'
000000000021c0ae         db  0x00 ; '.'
000000000021c0af         db  0x00 ; '.'
000000000021c0b0         db  0x00 ; '.'
000000000021c0b1         db  0x00 ; '.'
000000000021c0b2         db  0x00 ; '.'
000000000021c0b3         db  0x00 ; '.'
000000000021c0b4         db  0x00 ; '.'
000000000021c0b5         db  0x00 ; '.'
000000000021c0b6         db  0x00 ; '.'
000000000021c0b7         db  0x00 ; '.'
000000000021c0b8         db  0x00 ; '.'
000000000021c0b9         db  0x00 ; '.'
000000000021c0ba         db  0x00 ; '.'
000000000021c0bb         db  0x00 ; '.'
000000000021c0bc         db  0x00 ; '.'
000000000021c0bd         db  0x00 ; '.'
000000000021c0be         db  0x00 ; '.'
000000000021c0bf         db  0x00 ; '.'


        ; Section .bss
        ; Range: [0x21c0c0; 0x21c6f8[ (1592 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000021c0c0         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+102
000000000021c0c1         db  0x00 ; '.'
000000000021c0c2         db  0x00 ; '.'
000000000021c0c3         db  0x00 ; '.'
000000000021c0c4         db  0x00 ; '.'
000000000021c0c5         db  0x00 ; '.'
000000000021c0c6         db  0x00 ; '.'
000000000021c0c7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000021c0c8         db  0x00 ; '.'                                         ; DATA XREF=main+562, usage+131, usage+168, usage+205, usage+242, usage+279, usage+316, usage+353, usage+390, usage+427, usage+1024
000000000021c0c9         db  0x00 ; '.'
000000000021c0ca         db  0x00 ; '.'
000000000021c0cb         db  0x00 ; '.'
000000000021c0cc         db  0x00 ; '.'
000000000021c0cd         db  0x00 ; '.'
000000000021c0ce         db  0x00 ; '.'
000000000021c0cf         db  0x00 ; '.'
                     stdin@@GLIBC_2.2.5:
000000000021c0d0         db  0x00 ; '.'                                         ; DATA XREF=close_stdin+4, close_stdin+63, close_stdin+201, yesno+12
000000000021c0d1         db  0x00 ; '.'
000000000021c0d2         db  0x00 ; '.'
000000000021c0d3         db  0x00 ; '.'
000000000021c0d4         db  0x00 ; '.'
000000000021c0d5         db  0x00 ; '.'
000000000021c0d6         db  0x00 ; '.'
000000000021c0d7         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
000000000021c0d8         db  0x00 ; '.'                                         ; DATA XREF=main+877
000000000021c0d9         db  0x00 ; '.'
000000000021c0da         db  0x00 ; '.'
000000000021c0db         db  0x00 ; '.'
000000000021c0dc         db  0x00 ; '.'
000000000021c0dd         db  0x00 ; '.'
000000000021c0de         db  0x00 ; '.'
000000000021c0df         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
000000000021c0e0         db  0x00 ; '.'                                         ; DATA XREF=main+638, main+670, main+784, main+832, main+1831
000000000021c0e1         db  0x00 ; '.'
000000000021c0e2         db  0x00 ; '.'
000000000021c0e3         db  0x00 ; '.'
000000000021c0e4         db  0x00 ; '.'
000000000021c0e5         db  0x00 ; '.'
000000000021c0e6         db  0x00 ; '.'
000000000021c0e7         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000021c0e8         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000021c0e9         db  0x00 ; '.'
000000000021c0ea         db  0x00 ; '.'
000000000021c0eb         db  0x00 ; '.'
000000000021c0ec         db  0x00 ; '.'
000000000021c0ed         db  0x00 ; '.'
000000000021c0ee         db  0x00 ; '.'
000000000021c0ef         db  0x00 ; '.'
000000000021c0f0         db  0x00 ; '.'
000000000021c0f1         db  0x00 ; '.'
000000000021c0f2         db  0x00 ; '.'
000000000021c0f3         db  0x00 ; '.'
000000000021c0f4         db  0x00 ; '.'
000000000021c0f5         db  0x00 ; '.'
000000000021c0f6         db  0x00 ; '.'
000000000021c0f7         db  0x00 ; '.'
000000000021c0f8         db  0x00 ; '.'
000000000021c0f9         db  0x00 ; '.'
000000000021c0fa         db  0x00 ; '.'
000000000021c0fb         db  0x00 ; '.'
000000000021c0fc         db  0x00 ; '.'
000000000021c0fd         db  0x00 ; '.'
000000000021c0fe         db  0x00 ; '.'
000000000021c0ff         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000021c100         db  0x00 ; '.'                                         ; DATA XREF=usage+61, prompt+498, prompt+712, overwrite_ok.isra.12+159, overwrite_ok.isra.12+242, close_stdout+44, set_program_name+125, argmatch_valid+37, argmatch_valid+95, argmatch_valid+174, argmatch_valid+216
000000000021c101         db  0x00 ; '.'
000000000021c102         db  0x00 ; '.'
000000000021c103         db  0x00 ; '.'
000000000021c104         db  0x00 ; '.'
000000000021c105         db  0x00 ; '.'
000000000021c106         db  0x00 ; '.'
000000000021c107         db  0x00 ; '.'
                     completed.7697:
000000000021c108         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000021c109         db  0x00 ; '.'
000000000021c10a         db  0x00 ; '.'
000000000021c10b         db  0x00 ; '.'
000000000021c10c         db  0x00 ; '.'
000000000021c10d         db  0x00 ; '.'
000000000021c10e         db  0x00 ; '.'
000000000021c10f         db  0x00 ; '.'
                     dev_ino_buf.7162:
000000000021c110         db  0x00 ; '.'                                         ; DATA XREF=do_move+83
000000000021c111         db  0x00 ; '.'
000000000021c112         db  0x00 ; '.'
000000000021c113         db  0x00 ; '.'
000000000021c114         db  0x00 ; '.'
000000000021c115         db  0x00 ; '.'
000000000021c116         db  0x00 ; '.'
000000000021c117         db  0x00 ; '.'
000000000021c118         db  0x00 ; '.'
000000000021c119         db  0x00 ; '.'
000000000021c11a         db  0x00 ; '.'
000000000021c11b         db  0x00 ; '.'
000000000021c11c         db  0x00 ; '.'
000000000021c11d         db  0x00 ; '.'
000000000021c11e         db  0x00 ; '.'
000000000021c11f         db  0x00 ; '.'
                     remove_trailing_slashes:
000000000021c120         db  0x00 ; '.'                                         ; DATA XREF=main+438, movefile+17
000000000021c121         db  0x00 ; '.'
000000000021c122         db  0x00 ; '.'
000000000021c123         db  0x00 ; '.'
000000000021c124         db  0x00 ; '.'
000000000021c125         db  0x00 ; '.'
000000000021c126         db  0x00 ; '.'
000000000021c127         db  0x00 ; '.'
000000000021c128         db  0x00 ; '.'
000000000021c129         db  0x00 ; '.'
000000000021c12a         db  0x00 ; '.'
000000000021c12b         db  0x00 ; '.'
000000000021c12c         db  0x00 ; '.'
000000000021c12d         db  0x00 ; '.'
000000000021c12e         db  0x00 ; '.'
000000000021c12f         db  0x00 ; '.'
000000000021c130         db  0x00 ; '.'
000000000021c131         db  0x00 ; '.'
000000000021c132         db  0x00 ; '.'
000000000021c133         db  0x00 ; '.'
000000000021c134         db  0x00 ; '.'
000000000021c135         db  0x00 ; '.'
000000000021c136         db  0x00 ; '.'
000000000021c137         db  0x00 ; '.'
000000000021c138         db  0x00 ; '.'
000000000021c139         db  0x00 ; '.'
000000000021c13a         db  0x00 ; '.'
000000000021c13b         db  0x00 ; '.'
000000000021c13c         db  0x00 ; '.'
000000000021c13d         db  0x00 ; '.'
000000000021c13e         db  0x00 ; '.'
000000000021c13f         db  0x00 ; '.'
                     fallback.7572:
000000000021c140         db  0x00 ; '.'                                         ; DATA XREF=write_zeros+135
000000000021c141         db  0x00 ; '.'
000000000021c142         db  0x00 ; '.'
000000000021c143         db  0x00 ; '.'
000000000021c144         db  0x00 ; '.'
000000000021c145         db  0x00 ; '.'
000000000021c146         db  0x00 ; '.'
000000000021c147         db  0x00 ; '.'
000000000021c148         db  0x00 ; '.'
000000000021c149         db  0x00 ; '.'
000000000021c14a         db  0x00 ; '.'
000000000021c14b         db  0x00 ; '.'
000000000021c14c         db  0x00 ; '.'
000000000021c14d         db  0x00 ; '.'
000000000021c14e         db  0x00 ; '.'
000000000021c14f         db  0x00 ; '.'
000000000021c150         db  0x00 ; '.'
000000000021c151         db  0x00 ; '.'
000000000021c152         db  0x00 ; '.'
000000000021c153         db  0x00 ; '.'
000000000021c154         db  0x00 ; '.'
000000000021c155         db  0x00 ; '.'
000000000021c156         db  0x00 ; '.'
000000000021c157         db  0x00 ; '.'
000000000021c158         db  0x00 ; '.'
000000000021c159         db  0x00 ; '.'
000000000021c15a         db  0x00 ; '.'
000000000021c15b         db  0x00 ; '.'
000000000021c15c         db  0x00 ; '.'
000000000021c15d         db  0x00 ; '.'
000000000021c15e         db  0x00 ; '.'
000000000021c15f         db  0x00 ; '.'
000000000021c160         db  0x00 ; '.'
000000000021c161         db  0x00 ; '.'
000000000021c162         db  0x00 ; '.'
000000000021c163         db  0x00 ; '.'
000000000021c164         db  0x00 ; '.'
000000000021c165         db  0x00 ; '.'
000000000021c166         db  0x00 ; '.'
000000000021c167         db  0x00 ; '.'
000000000021c168         db  0x00 ; '.'
000000000021c169         db  0x00 ; '.'
000000000021c16a         db  0x00 ; '.'
000000000021c16b         db  0x00 ; '.'
000000000021c16c         db  0x00 ; '.'
000000000021c16d         db  0x00 ; '.'
000000000021c16e         db  0x00 ; '.'
000000000021c16f         db  0x00 ; '.'
000000000021c170         db  0x00 ; '.'
000000000021c171         db  0x00 ; '.'
000000000021c172         db  0x00 ; '.'
000000000021c173         db  0x00 ; '.'
000000000021c174         db  0x00 ; '.'
000000000021c175         db  0x00 ; '.'
000000000021c176         db  0x00 ; '.'
000000000021c177         db  0x00 ; '.'
000000000021c178         db  0x00 ; '.'
000000000021c179         db  0x00 ; '.'
000000000021c17a         db  0x00 ; '.'
000000000021c17b         db  0x00 ; '.'
000000000021c17c         db  0x00 ; '.'
000000000021c17d         db  0x00 ; '.'
000000000021c17e         db  0x00 ; '.'
000000000021c17f         db  0x00 ; '.'
000000000021c180         db  0x00 ; '.'
000000000021c181         db  0x00 ; '.'
000000000021c182         db  0x00 ; '.'
000000000021c183         db  0x00 ; '.'
000000000021c184         db  0x00 ; '.'
000000000021c185         db  0x00 ; '.'
000000000021c186         db  0x00 ; '.'
000000000021c187         db  0x00 ; '.'
000000000021c188         db  0x00 ; '.'
000000000021c189         db  0x00 ; '.'
000000000021c18a         db  0x00 ; '.'
000000000021c18b         db  0x00 ; '.'
000000000021c18c         db  0x00 ; '.'
000000000021c18d         db  0x00 ; '.'
000000000021c18e         db  0x00 ; '.'
000000000021c18f         db  0x00 ; '.'
000000000021c190         db  0x00 ; '.'
000000000021c191         db  0x00 ; '.'
000000000021c192         db  0x00 ; '.'
000000000021c193         db  0x00 ; '.'
000000000021c194         db  0x00 ; '.'
000000000021c195         db  0x00 ; '.'
000000000021c196         db  0x00 ; '.'
000000000021c197         db  0x00 ; '.'
000000000021c198         db  0x00 ; '.'
000000000021c199         db  0x00 ; '.'
000000000021c19a         db  0x00 ; '.'
000000000021c19b         db  0x00 ; '.'
000000000021c19c         db  0x00 ; '.'
000000000021c19d         db  0x00 ; '.'
000000000021c19e         db  0x00 ; '.'
000000000021c19f         db  0x00 ; '.'
000000000021c1a0         db  0x00 ; '.'
000000000021c1a1         db  0x00 ; '.'
000000000021c1a2         db  0x00 ; '.'
000000000021c1a3         db  0x00 ; '.'
000000000021c1a4         db  0x00 ; '.'
000000000021c1a5         db  0x00 ; '.'
000000000021c1a6         db  0x00 ; '.'
000000000021c1a7         db  0x00 ; '.'
000000000021c1a8         db  0x00 ; '.'
000000000021c1a9         db  0x00 ; '.'
000000000021c1aa         db  0x00 ; '.'
000000000021c1ab         db  0x00 ; '.'
000000000021c1ac         db  0x00 ; '.'
000000000021c1ad         db  0x00 ; '.'
000000000021c1ae         db  0x00 ; '.'
000000000021c1af         db  0x00 ; '.'
000000000021c1b0         db  0x00 ; '.'
000000000021c1b1         db  0x00 ; '.'
000000000021c1b2         db  0x00 ; '.'
000000000021c1b3         db  0x00 ; '.'
000000000021c1b4         db  0x00 ; '.'
000000000021c1b5         db  0x00 ; '.'
000000000021c1b6         db  0x00 ; '.'
000000000021c1b7         db  0x00 ; '.'
000000000021c1b8         db  0x00 ; '.'
000000000021c1b9         db  0x00 ; '.'
000000000021c1ba         db  0x00 ; '.'
000000000021c1bb         db  0x00 ; '.'
000000000021c1bc         db  0x00 ; '.'
000000000021c1bd         db  0x00 ; '.'
000000000021c1be         db  0x00 ; '.'
000000000021c1bf         db  0x00 ; '.'
000000000021c1c0         db  0x00 ; '.'
000000000021c1c1         db  0x00 ; '.'
000000000021c1c2         db  0x00 ; '.'
000000000021c1c3         db  0x00 ; '.'
000000000021c1c4         db  0x00 ; '.'
000000000021c1c5         db  0x00 ; '.'
000000000021c1c6         db  0x00 ; '.'
000000000021c1c7         db  0x00 ; '.'
000000000021c1c8         db  0x00 ; '.'
000000000021c1c9         db  0x00 ; '.'
000000000021c1ca         db  0x00 ; '.'
000000000021c1cb         db  0x00 ; '.'
000000000021c1cc         db  0x00 ; '.'
000000000021c1cd         db  0x00 ; '.'
000000000021c1ce         db  0x00 ; '.'
000000000021c1cf         db  0x00 ; '.'
000000000021c1d0         db  0x00 ; '.'
000000000021c1d1         db  0x00 ; '.'
000000000021c1d2         db  0x00 ; '.'
000000000021c1d3         db  0x00 ; '.'
000000000021c1d4         db  0x00 ; '.'
000000000021c1d5         db  0x00 ; '.'
000000000021c1d6         db  0x00 ; '.'
000000000021c1d7         db  0x00 ; '.'
000000000021c1d8         db  0x00 ; '.'
000000000021c1d9         db  0x00 ; '.'
000000000021c1da         db  0x00 ; '.'
000000000021c1db         db  0x00 ; '.'
000000000021c1dc         db  0x00 ; '.'
000000000021c1dd         db  0x00 ; '.'
000000000021c1de         db  0x00 ; '.'
000000000021c1df         db  0x00 ; '.'
000000000021c1e0         db  0x00 ; '.'
000000000021c1e1         db  0x00 ; '.'
000000000021c1e2         db  0x00 ; '.'
000000000021c1e3         db  0x00 ; '.'
000000000021c1e4         db  0x00 ; '.'
000000000021c1e5         db  0x00 ; '.'
000000000021c1e6         db  0x00 ; '.'
000000000021c1e7         db  0x00 ; '.'
000000000021c1e8         db  0x00 ; '.'
000000000021c1e9         db  0x00 ; '.'
000000000021c1ea         db  0x00 ; '.'
000000000021c1eb         db  0x00 ; '.'
000000000021c1ec         db  0x00 ; '.'
000000000021c1ed         db  0x00 ; '.'
000000000021c1ee         db  0x00 ; '.'
000000000021c1ef         db  0x00 ; '.'
000000000021c1f0         db  0x00 ; '.'
000000000021c1f1         db  0x00 ; '.'
000000000021c1f2         db  0x00 ; '.'
000000000021c1f3         db  0x00 ; '.'
000000000021c1f4         db  0x00 ; '.'
000000000021c1f5         db  0x00 ; '.'
000000000021c1f6         db  0x00 ; '.'
000000000021c1f7         db  0x00 ; '.'
000000000021c1f8         db  0x00 ; '.'
000000000021c1f9         db  0x00 ; '.'
000000000021c1fa         db  0x00 ; '.'
000000000021c1fb         db  0x00 ; '.'
000000000021c1fc         db  0x00 ; '.'
000000000021c1fd         db  0x00 ; '.'
000000000021c1fe         db  0x00 ; '.'
000000000021c1ff         db  0x00 ; '.'
000000000021c200         db  0x00 ; '.'
000000000021c201         db  0x00 ; '.'
000000000021c202         db  0x00 ; '.'
000000000021c203         db  0x00 ; '.'
000000000021c204         db  0x00 ; '.'
000000000021c205         db  0x00 ; '.'
000000000021c206         db  0x00 ; '.'
000000000021c207         db  0x00 ; '.'
000000000021c208         db  0x00 ; '.'
000000000021c209         db  0x00 ; '.'
000000000021c20a         db  0x00 ; '.'
000000000021c20b         db  0x00 ; '.'
000000000021c20c         db  0x00 ; '.'
000000000021c20d         db  0x00 ; '.'
000000000021c20e         db  0x00 ; '.'
000000000021c20f         db  0x00 ; '.'
000000000021c210         db  0x00 ; '.'
000000000021c211         db  0x00 ; '.'
000000000021c212         db  0x00 ; '.'
000000000021c213         db  0x00 ; '.'
000000000021c214         db  0x00 ; '.'
000000000021c215         db  0x00 ; '.'
000000000021c216         db  0x00 ; '.'
000000000021c217         db  0x00 ; '.'
000000000021c218         db  0x00 ; '.'
000000000021c219         db  0x00 ; '.'
000000000021c21a         db  0x00 ; '.'
000000000021c21b         db  0x00 ; '.'
000000000021c21c         db  0x00 ; '.'
000000000021c21d         db  0x00 ; '.'
000000000021c21e         db  0x00 ; '.'
000000000021c21f         db  0x00 ; '.'
000000000021c220         db  0x00 ; '.'
000000000021c221         db  0x00 ; '.'
000000000021c222         db  0x00 ; '.'
000000000021c223         db  0x00 ; '.'
000000000021c224         db  0x00 ; '.'
000000000021c225         db  0x00 ; '.'
000000000021c226         db  0x00 ; '.'
000000000021c227         db  0x00 ; '.'
000000000021c228         db  0x00 ; '.'
000000000021c229         db  0x00 ; '.'
000000000021c22a         db  0x00 ; '.'
000000000021c22b         db  0x00 ; '.'
000000000021c22c         db  0x00 ; '.'
000000000021c22d         db  0x00 ; '.'
000000000021c22e         db  0x00 ; '.'
000000000021c22f         db  0x00 ; '.'
000000000021c230         db  0x00 ; '.'
000000000021c231         db  0x00 ; '.'
000000000021c232         db  0x00 ; '.'
000000000021c233         db  0x00 ; '.'
000000000021c234         db  0x00 ; '.'
000000000021c235         db  0x00 ; '.'
000000000021c236         db  0x00 ; '.'
000000000021c237         db  0x00 ; '.'
000000000021c238         db  0x00 ; '.'
000000000021c239         db  0x00 ; '.'
000000000021c23a         db  0x00 ; '.'
000000000021c23b         db  0x00 ; '.'
000000000021c23c         db  0x00 ; '.'
000000000021c23d         db  0x00 ; '.'
000000000021c23e         db  0x00 ; '.'
000000000021c23f         db  0x00 ; '.'
000000000021c240         db  0x00 ; '.'
000000000021c241         db  0x00 ; '.'
000000000021c242         db  0x00 ; '.'
000000000021c243         db  0x00 ; '.'
000000000021c244         db  0x00 ; '.'
000000000021c245         db  0x00 ; '.'
000000000021c246         db  0x00 ; '.'
000000000021c247         db  0x00 ; '.'
000000000021c248         db  0x00 ; '.'
000000000021c249         db  0x00 ; '.'
000000000021c24a         db  0x00 ; '.'
000000000021c24b         db  0x00 ; '.'
000000000021c24c         db  0x00 ; '.'
000000000021c24d         db  0x00 ; '.'
000000000021c24e         db  0x00 ; '.'
000000000021c24f         db  0x00 ; '.'
000000000021c250         db  0x00 ; '.'
000000000021c251         db  0x00 ; '.'
000000000021c252         db  0x00 ; '.'
000000000021c253         db  0x00 ; '.'
000000000021c254         db  0x00 ; '.'
000000000021c255         db  0x00 ; '.'
000000000021c256         db  0x00 ; '.'
000000000021c257         db  0x00 ; '.'
000000000021c258         db  0x00 ; '.'
000000000021c259         db  0x00 ; '.'
000000000021c25a         db  0x00 ; '.'
000000000021c25b         db  0x00 ; '.'
000000000021c25c         db  0x00 ; '.'
000000000021c25d         db  0x00 ; '.'
000000000021c25e         db  0x00 ; '.'
000000000021c25f         db  0x00 ; '.'
000000000021c260         db  0x00 ; '.'
000000000021c261         db  0x00 ; '.'
000000000021c262         db  0x00 ; '.'
000000000021c263         db  0x00 ; '.'
000000000021c264         db  0x00 ; '.'
000000000021c265         db  0x00 ; '.'
000000000021c266         db  0x00 ; '.'
000000000021c267         db  0x00 ; '.'
000000000021c268         db  0x00 ; '.'
000000000021c269         db  0x00 ; '.'
000000000021c26a         db  0x00 ; '.'
000000000021c26b         db  0x00 ; '.'
000000000021c26c         db  0x00 ; '.'
000000000021c26d         db  0x00 ; '.'
000000000021c26e         db  0x00 ; '.'
000000000021c26f         db  0x00 ; '.'
000000000021c270         db  0x00 ; '.'
000000000021c271         db  0x00 ; '.'
000000000021c272         db  0x00 ; '.'
000000000021c273         db  0x00 ; '.'
000000000021c274         db  0x00 ; '.'
000000000021c275         db  0x00 ; '.'
000000000021c276         db  0x00 ; '.'
000000000021c277         db  0x00 ; '.'
000000000021c278         db  0x00 ; '.'
000000000021c279         db  0x00 ; '.'
000000000021c27a         db  0x00 ; '.'
000000000021c27b         db  0x00 ; '.'
000000000021c27c         db  0x00 ; '.'
000000000021c27d         db  0x00 ; '.'
000000000021c27e         db  0x00 ; '.'
000000000021c27f         db  0x00 ; '.'
000000000021c280         db  0x00 ; '.'
000000000021c281         db  0x00 ; '.'
000000000021c282         db  0x00 ; '.'
000000000021c283         db  0x00 ; '.'
000000000021c284         db  0x00 ; '.'
000000000021c285         db  0x00 ; '.'
000000000021c286         db  0x00 ; '.'
000000000021c287         db  0x00 ; '.'
000000000021c288         db  0x00 ; '.'
000000000021c289         db  0x00 ; '.'
000000000021c28a         db  0x00 ; '.'
000000000021c28b         db  0x00 ; '.'
000000000021c28c         db  0x00 ; '.'
000000000021c28d         db  0x00 ; '.'
000000000021c28e         db  0x00 ; '.'
000000000021c28f         db  0x00 ; '.'
000000000021c290         db  0x00 ; '.'
000000000021c291         db  0x00 ; '.'
000000000021c292         db  0x00 ; '.'
000000000021c293         db  0x00 ; '.'
000000000021c294         db  0x00 ; '.'
000000000021c295         db  0x00 ; '.'
000000000021c296         db  0x00 ; '.'
000000000021c297         db  0x00 ; '.'
000000000021c298         db  0x00 ; '.'
000000000021c299         db  0x00 ; '.'
000000000021c29a         db  0x00 ; '.'
000000000021c29b         db  0x00 ; '.'
000000000021c29c         db  0x00 ; '.'
000000000021c29d         db  0x00 ; '.'
000000000021c29e         db  0x00 ; '.'
000000000021c29f         db  0x00 ; '.'
000000000021c2a0         db  0x00 ; '.'
000000000021c2a1         db  0x00 ; '.'
000000000021c2a2         db  0x00 ; '.'
000000000021c2a3         db  0x00 ; '.'
000000000021c2a4         db  0x00 ; '.'
000000000021c2a5         db  0x00 ; '.'
000000000021c2a6         db  0x00 ; '.'
000000000021c2a7         db  0x00 ; '.'
000000000021c2a8         db  0x00 ; '.'
000000000021c2a9         db  0x00 ; '.'
000000000021c2aa         db  0x00 ; '.'
000000000021c2ab         db  0x00 ; '.'
000000000021c2ac         db  0x00 ; '.'
000000000021c2ad         db  0x00 ; '.'
000000000021c2ae         db  0x00 ; '.'
000000000021c2af         db  0x00 ; '.'
000000000021c2b0         db  0x00 ; '.'
000000000021c2b1         db  0x00 ; '.'
000000000021c2b2         db  0x00 ; '.'
000000000021c2b3         db  0x00 ; '.'
000000000021c2b4         db  0x00 ; '.'
000000000021c2b5         db  0x00 ; '.'
000000000021c2b6         db  0x00 ; '.'
000000000021c2b7         db  0x00 ; '.'
000000000021c2b8         db  0x00 ; '.'
000000000021c2b9         db  0x00 ; '.'
000000000021c2ba         db  0x00 ; '.'
000000000021c2bb         db  0x00 ; '.'
000000000021c2bc         db  0x00 ; '.'
000000000021c2bd         db  0x00 ; '.'
000000000021c2be         db  0x00 ; '.'
000000000021c2bf         db  0x00 ; '.'
000000000021c2c0         db  0x00 ; '.'
000000000021c2c1         db  0x00 ; '.'
000000000021c2c2         db  0x00 ; '.'
000000000021c2c3         db  0x00 ; '.'
000000000021c2c4         db  0x00 ; '.'
000000000021c2c5         db  0x00 ; '.'
000000000021c2c6         db  0x00 ; '.'
000000000021c2c7         db  0x00 ; '.'
000000000021c2c8         db  0x00 ; '.'
000000000021c2c9         db  0x00 ; '.'
000000000021c2ca         db  0x00 ; '.'
000000000021c2cb         db  0x00 ; '.'
000000000021c2cc         db  0x00 ; '.'
000000000021c2cd         db  0x00 ; '.'
000000000021c2ce         db  0x00 ; '.'
000000000021c2cf         db  0x00 ; '.'
000000000021c2d0         db  0x00 ; '.'
000000000021c2d1         db  0x00 ; '.'
000000000021c2d2         db  0x00 ; '.'
000000000021c2d3         db  0x00 ; '.'
000000000021c2d4         db  0x00 ; '.'
000000000021c2d5         db  0x00 ; '.'
000000000021c2d6         db  0x00 ; '.'
000000000021c2d7         db  0x00 ; '.'
000000000021c2d8         db  0x00 ; '.'
000000000021c2d9         db  0x00 ; '.'
000000000021c2da         db  0x00 ; '.'
000000000021c2db         db  0x00 ; '.'
000000000021c2dc         db  0x00 ; '.'
000000000021c2dd         db  0x00 ; '.'
000000000021c2de         db  0x00 ; '.'
000000000021c2df         db  0x00 ; '.'
000000000021c2e0         db  0x00 ; '.'
000000000021c2e1         db  0x00 ; '.'
000000000021c2e2         db  0x00 ; '.'
000000000021c2e3         db  0x00 ; '.'
000000000021c2e4         db  0x00 ; '.'
000000000021c2e5         db  0x00 ; '.'
000000000021c2e6         db  0x00 ; '.'
000000000021c2e7         db  0x00 ; '.'
000000000021c2e8         db  0x00 ; '.'
000000000021c2e9         db  0x00 ; '.'
000000000021c2ea         db  0x00 ; '.'
000000000021c2eb         db  0x00 ; '.'
000000000021c2ec         db  0x00 ; '.'
000000000021c2ed         db  0x00 ; '.'
000000000021c2ee         db  0x00 ; '.'
000000000021c2ef         db  0x00 ; '.'
000000000021c2f0         db  0x00 ; '.'
000000000021c2f1         db  0x00 ; '.'
000000000021c2f2         db  0x00 ; '.'
000000000021c2f3         db  0x00 ; '.'
000000000021c2f4         db  0x00 ; '.'
000000000021c2f5         db  0x00 ; '.'
000000000021c2f6         db  0x00 ; '.'
000000000021c2f7         db  0x00 ; '.'
000000000021c2f8         db  0x00 ; '.'
000000000021c2f9         db  0x00 ; '.'
000000000021c2fa         db  0x00 ; '.'
000000000021c2fb         db  0x00 ; '.'
000000000021c2fc         db  0x00 ; '.'
000000000021c2fd         db  0x00 ; '.'
000000000021c2fe         db  0x00 ; '.'
000000000021c2ff         db  0x00 ; '.'
000000000021c300         db  0x00 ; '.'
000000000021c301         db  0x00 ; '.'
000000000021c302         db  0x00 ; '.'
000000000021c303         db  0x00 ; '.'
000000000021c304         db  0x00 ; '.'
000000000021c305         db  0x00 ; '.'
000000000021c306         db  0x00 ; '.'
000000000021c307         db  0x00 ; '.'
000000000021c308         db  0x00 ; '.'
000000000021c309         db  0x00 ; '.'
000000000021c30a         db  0x00 ; '.'
000000000021c30b         db  0x00 ; '.'
000000000021c30c         db  0x00 ; '.'
000000000021c30d         db  0x00 ; '.'
000000000021c30e         db  0x00 ; '.'
000000000021c30f         db  0x00 ; '.'
000000000021c310         db  0x00 ; '.'
000000000021c311         db  0x00 ; '.'
000000000021c312         db  0x00 ; '.'
000000000021c313         db  0x00 ; '.'
000000000021c314         db  0x00 ; '.'
000000000021c315         db  0x00 ; '.'
000000000021c316         db  0x00 ; '.'
000000000021c317         db  0x00 ; '.'
000000000021c318         db  0x00 ; '.'
000000000021c319         db  0x00 ; '.'
000000000021c31a         db  0x00 ; '.'
000000000021c31b         db  0x00 ; '.'
000000000021c31c         db  0x00 ; '.'
000000000021c31d         db  0x00 ; '.'
000000000021c31e         db  0x00 ; '.'
000000000021c31f         db  0x00 ; '.'
000000000021c320         db  0x00 ; '.'
000000000021c321         db  0x00 ; '.'
000000000021c322         db  0x00 ; '.'
000000000021c323         db  0x00 ; '.'
000000000021c324         db  0x00 ; '.'
000000000021c325         db  0x00 ; '.'
000000000021c326         db  0x00 ; '.'
000000000021c327         db  0x00 ; '.'
000000000021c328         db  0x00 ; '.'
000000000021c329         db  0x00 ; '.'
000000000021c32a         db  0x00 ; '.'
000000000021c32b         db  0x00 ; '.'
000000000021c32c         db  0x00 ; '.'
000000000021c32d         db  0x00 ; '.'
000000000021c32e         db  0x00 ; '.'
000000000021c32f         db  0x00 ; '.'
000000000021c330         db  0x00 ; '.'
000000000021c331         db  0x00 ; '.'
000000000021c332         db  0x00 ; '.'
000000000021c333         db  0x00 ; '.'
000000000021c334         db  0x00 ; '.'
000000000021c335         db  0x00 ; '.'
000000000021c336         db  0x00 ; '.'
000000000021c337         db  0x00 ; '.'
000000000021c338         db  0x00 ; '.'
000000000021c339         db  0x00 ; '.'
000000000021c33a         db  0x00 ; '.'
000000000021c33b         db  0x00 ; '.'
000000000021c33c         db  0x00 ; '.'
000000000021c33d         db  0x00 ; '.'
000000000021c33e         db  0x00 ; '.'
000000000021c33f         db  0x00 ; '.'
000000000021c340         db  0x00 ; '.'
000000000021c341         db  0x00 ; '.'
000000000021c342         db  0x00 ; '.'
000000000021c343         db  0x00 ; '.'
000000000021c344         db  0x00 ; '.'
000000000021c345         db  0x00 ; '.'
000000000021c346         db  0x00 ; '.'
000000000021c347         db  0x00 ; '.'
000000000021c348         db  0x00 ; '.'
000000000021c349         db  0x00 ; '.'
000000000021c34a         db  0x00 ; '.'
000000000021c34b         db  0x00 ; '.'
000000000021c34c         db  0x00 ; '.'
000000000021c34d         db  0x00 ; '.'
000000000021c34e         db  0x00 ; '.'
000000000021c34f         db  0x00 ; '.'
000000000021c350         db  0x00 ; '.'
000000000021c351         db  0x00 ; '.'
000000000021c352         db  0x00 ; '.'
000000000021c353         db  0x00 ; '.'
000000000021c354         db  0x00 ; '.'
000000000021c355         db  0x00 ; '.'
000000000021c356         db  0x00 ; '.'
000000000021c357         db  0x00 ; '.'
000000000021c358         db  0x00 ; '.'
000000000021c359         db  0x00 ; '.'
000000000021c35a         db  0x00 ; '.'
000000000021c35b         db  0x00 ; '.'
000000000021c35c         db  0x00 ; '.'
000000000021c35d         db  0x00 ; '.'
000000000021c35e         db  0x00 ; '.'
000000000021c35f         db  0x00 ; '.'
000000000021c360         db  0x00 ; '.'
000000000021c361         db  0x00 ; '.'
000000000021c362         db  0x00 ; '.'
000000000021c363         db  0x00 ; '.'
000000000021c364         db  0x00 ; '.'
000000000021c365         db  0x00 ; '.'
000000000021c366         db  0x00 ; '.'
000000000021c367         db  0x00 ; '.'
000000000021c368         db  0x00 ; '.'
000000000021c369         db  0x00 ; '.'
000000000021c36a         db  0x00 ; '.'
000000000021c36b         db  0x00 ; '.'
000000000021c36c         db  0x00 ; '.'
000000000021c36d         db  0x00 ; '.'
000000000021c36e         db  0x00 ; '.'
000000000021c36f         db  0x00 ; '.'
000000000021c370         db  0x00 ; '.'
000000000021c371         db  0x00 ; '.'
000000000021c372         db  0x00 ; '.'
000000000021c373         db  0x00 ; '.'
000000000021c374         db  0x00 ; '.'
000000000021c375         db  0x00 ; '.'
000000000021c376         db  0x00 ; '.'
000000000021c377         db  0x00 ; '.'
000000000021c378         db  0x00 ; '.'
000000000021c379         db  0x00 ; '.'
000000000021c37a         db  0x00 ; '.'
000000000021c37b         db  0x00 ; '.'
000000000021c37c         db  0x00 ; '.'
000000000021c37d         db  0x00 ; '.'
000000000021c37e         db  0x00 ; '.'
000000000021c37f         db  0x00 ; '.'
000000000021c380         db  0x00 ; '.'
000000000021c381         db  0x00 ; '.'
000000000021c382         db  0x00 ; '.'
000000000021c383         db  0x00 ; '.'
000000000021c384         db  0x00 ; '.'
000000000021c385         db  0x00 ; '.'
000000000021c386         db  0x00 ; '.'
000000000021c387         db  0x00 ; '.'
000000000021c388         db  0x00 ; '.'
000000000021c389         db  0x00 ; '.'
000000000021c38a         db  0x00 ; '.'
000000000021c38b         db  0x00 ; '.'
000000000021c38c         db  0x00 ; '.'
000000000021c38d         db  0x00 ; '.'
000000000021c38e         db  0x00 ; '.'
000000000021c38f         db  0x00 ; '.'
000000000021c390         db  0x00 ; '.'
000000000021c391         db  0x00 ; '.'
000000000021c392         db  0x00 ; '.'
000000000021c393         db  0x00 ; '.'
000000000021c394         db  0x00 ; '.'
000000000021c395         db  0x00 ; '.'
000000000021c396         db  0x00 ; '.'
000000000021c397         db  0x00 ; '.'
000000000021c398         db  0x00 ; '.'
000000000021c399         db  0x00 ; '.'
000000000021c39a         db  0x00 ; '.'
000000000021c39b         db  0x00 ; '.'
000000000021c39c         db  0x00 ; '.'
000000000021c39d         db  0x00 ; '.'
000000000021c39e         db  0x00 ; '.'
000000000021c39f         db  0x00 ; '.'
000000000021c3a0         db  0x00 ; '.'
000000000021c3a1         db  0x00 ; '.'
000000000021c3a2         db  0x00 ; '.'
000000000021c3a3         db  0x00 ; '.'
000000000021c3a4         db  0x00 ; '.'
000000000021c3a5         db  0x00 ; '.'
000000000021c3a6         db  0x00 ; '.'
000000000021c3a7         db  0x00 ; '.'
000000000021c3a8         db  0x00 ; '.'
000000000021c3a9         db  0x00 ; '.'
000000000021c3aa         db  0x00 ; '.'
000000000021c3ab         db  0x00 ; '.'
000000000021c3ac         db  0x00 ; '.'
000000000021c3ad         db  0x00 ; '.'
000000000021c3ae         db  0x00 ; '.'
000000000021c3af         db  0x00 ; '.'
000000000021c3b0         db  0x00 ; '.'
000000000021c3b1         db  0x00 ; '.'
000000000021c3b2         db  0x00 ; '.'
000000000021c3b3         db  0x00 ; '.'
000000000021c3b4         db  0x00 ; '.'
000000000021c3b5         db  0x00 ; '.'
000000000021c3b6         db  0x00 ; '.'
000000000021c3b7         db  0x00 ; '.'
000000000021c3b8         db  0x00 ; '.'
000000000021c3b9         db  0x00 ; '.'
000000000021c3ba         db  0x00 ; '.'
000000000021c3bb         db  0x00 ; '.'
000000000021c3bc         db  0x00 ; '.'
000000000021c3bd         db  0x00 ; '.'
000000000021c3be         db  0x00 ; '.'
000000000021c3bf         db  0x00 ; '.'
000000000021c3c0         db  0x00 ; '.'
000000000021c3c1         db  0x00 ; '.'
000000000021c3c2         db  0x00 ; '.'
000000000021c3c3         db  0x00 ; '.'
000000000021c3c4         db  0x00 ; '.'
000000000021c3c5         db  0x00 ; '.'
000000000021c3c6         db  0x00 ; '.'
000000000021c3c7         db  0x00 ; '.'
000000000021c3c8         db  0x00 ; '.'
000000000021c3c9         db  0x00 ; '.'
000000000021c3ca         db  0x00 ; '.'
000000000021c3cb         db  0x00 ; '.'
000000000021c3cc         db  0x00 ; '.'
000000000021c3cd         db  0x00 ; '.'
000000000021c3ce         db  0x00 ; '.'
000000000021c3cf         db  0x00 ; '.'
000000000021c3d0         db  0x00 ; '.'
000000000021c3d1         db  0x00 ; '.'
000000000021c3d2         db  0x00 ; '.'
000000000021c3d3         db  0x00 ; '.'
000000000021c3d4         db  0x00 ; '.'
000000000021c3d5         db  0x00 ; '.'
000000000021c3d6         db  0x00 ; '.'
000000000021c3d7         db  0x00 ; '.'
000000000021c3d8         db  0x00 ; '.'
000000000021c3d9         db  0x00 ; '.'
000000000021c3da         db  0x00 ; '.'
000000000021c3db         db  0x00 ; '.'
000000000021c3dc         db  0x00 ; '.'
000000000021c3dd         db  0x00 ; '.'
000000000021c3de         db  0x00 ; '.'
000000000021c3df         db  0x00 ; '.'
000000000021c3e0         db  0x00 ; '.'
000000000021c3e1         db  0x00 ; '.'
000000000021c3e2         db  0x00 ; '.'
000000000021c3e3         db  0x00 ; '.'
000000000021c3e4         db  0x00 ; '.'
000000000021c3e5         db  0x00 ; '.'
000000000021c3e6         db  0x00 ; '.'
000000000021c3e7         db  0x00 ; '.'
000000000021c3e8         db  0x00 ; '.'
000000000021c3e9         db  0x00 ; '.'
000000000021c3ea         db  0x00 ; '.'
000000000021c3eb         db  0x00 ; '.'
000000000021c3ec         db  0x00 ; '.'
000000000021c3ed         db  0x00 ; '.'
000000000021c3ee         db  0x00 ; '.'
000000000021c3ef         db  0x00 ; '.'
000000000021c3f0         db  0x00 ; '.'
000000000021c3f1         db  0x00 ; '.'
000000000021c3f2         db  0x00 ; '.'
000000000021c3f3         db  0x00 ; '.'
000000000021c3f4         db  0x00 ; '.'
000000000021c3f5         db  0x00 ; '.'
000000000021c3f6         db  0x00 ; '.'
000000000021c3f7         db  0x00 ; '.'
000000000021c3f8         db  0x00 ; '.'
000000000021c3f9         db  0x00 ; '.'
000000000021c3fa         db  0x00 ; '.'
000000000021c3fb         db  0x00 ; '.'
000000000021c3fc         db  0x00 ; '.'
000000000021c3fd         db  0x00 ; '.'
000000000021c3fe         db  0x00 ; '.'
000000000021c3ff         db  0x00 ; '.'
000000000021c400         db  0x00 ; '.'
000000000021c401         db  0x00 ; '.'
000000000021c402         db  0x00 ; '.'
000000000021c403         db  0x00 ; '.'
000000000021c404         db  0x00 ; '.'
000000000021c405         db  0x00 ; '.'
000000000021c406         db  0x00 ; '.'
000000000021c407         db  0x00 ; '.'
000000000021c408         db  0x00 ; '.'
000000000021c409         db  0x00 ; '.'
000000000021c40a         db  0x00 ; '.'
000000000021c40b         db  0x00 ; '.'
000000000021c40c         db  0x00 ; '.'
000000000021c40d         db  0x00 ; '.'
000000000021c40e         db  0x00 ; '.'
000000000021c40f         db  0x00 ; '.'
000000000021c410         db  0x00 ; '.'
000000000021c411         db  0x00 ; '.'
000000000021c412         db  0x00 ; '.'
000000000021c413         db  0x00 ; '.'
000000000021c414         db  0x00 ; '.'
000000000021c415         db  0x00 ; '.'
000000000021c416         db  0x00 ; '.'
000000000021c417         db  0x00 ; '.'
000000000021c418         db  0x00 ; '.'
000000000021c419         db  0x00 ; '.'
000000000021c41a         db  0x00 ; '.'
000000000021c41b         db  0x00 ; '.'
000000000021c41c         db  0x00 ; '.'
000000000021c41d         db  0x00 ; '.'
000000000021c41e         db  0x00 ; '.'
000000000021c41f         db  0x00 ; '.'
000000000021c420         db  0x00 ; '.'
000000000021c421         db  0x00 ; '.'
000000000021c422         db  0x00 ; '.'
000000000021c423         db  0x00 ; '.'
000000000021c424         db  0x00 ; '.'
000000000021c425         db  0x00 ; '.'
000000000021c426         db  0x00 ; '.'
000000000021c427         db  0x00 ; '.'
000000000021c428         db  0x00 ; '.'
000000000021c429         db  0x00 ; '.'
000000000021c42a         db  0x00 ; '.'
000000000021c42b         db  0x00 ; '.'
000000000021c42c         db  0x00 ; '.'
000000000021c42d         db  0x00 ; '.'
000000000021c42e         db  0x00 ; '.'
000000000021c42f         db  0x00 ; '.'
000000000021c430         db  0x00 ; '.'
000000000021c431         db  0x00 ; '.'
000000000021c432         db  0x00 ; '.'
000000000021c433         db  0x00 ; '.'
000000000021c434         db  0x00 ; '.'
000000000021c435         db  0x00 ; '.'
000000000021c436         db  0x00 ; '.'
000000000021c437         db  0x00 ; '.'
000000000021c438         db  0x00 ; '.'
000000000021c439         db  0x00 ; '.'
000000000021c43a         db  0x00 ; '.'
000000000021c43b         db  0x00 ; '.'
000000000021c43c         db  0x00 ; '.'
000000000021c43d         db  0x00 ; '.'
000000000021c43e         db  0x00 ; '.'
000000000021c43f         db  0x00 ; '.'
000000000021c440         db  0x00 ; '.'
000000000021c441         db  0x00 ; '.'
000000000021c442         db  0x00 ; '.'
000000000021c443         db  0x00 ; '.'
000000000021c444         db  0x00 ; '.'
000000000021c445         db  0x00 ; '.'
000000000021c446         db  0x00 ; '.'
000000000021c447         db  0x00 ; '.'
000000000021c448         db  0x00 ; '.'
000000000021c449         db  0x00 ; '.'
000000000021c44a         db  0x00 ; '.'
000000000021c44b         db  0x00 ; '.'
000000000021c44c         db  0x00 ; '.'
000000000021c44d         db  0x00 ; '.'
000000000021c44e         db  0x00 ; '.'
000000000021c44f         db  0x00 ; '.'
000000000021c450         db  0x00 ; '.'
000000000021c451         db  0x00 ; '.'
000000000021c452         db  0x00 ; '.'
000000000021c453         db  0x00 ; '.'
000000000021c454         db  0x00 ; '.'
000000000021c455         db  0x00 ; '.'
000000000021c456         db  0x00 ; '.'
000000000021c457         db  0x00 ; '.'
000000000021c458         db  0x00 ; '.'
000000000021c459         db  0x00 ; '.'
000000000021c45a         db  0x00 ; '.'
000000000021c45b         db  0x00 ; '.'
000000000021c45c         db  0x00 ; '.'
000000000021c45d         db  0x00 ; '.'
000000000021c45e         db  0x00 ; '.'
000000000021c45f         db  0x00 ; '.'
000000000021c460         db  0x00 ; '.'
000000000021c461         db  0x00 ; '.'
000000000021c462         db  0x00 ; '.'
000000000021c463         db  0x00 ; '.'
000000000021c464         db  0x00 ; '.'
000000000021c465         db  0x00 ; '.'
000000000021c466         db  0x00 ; '.'
000000000021c467         db  0x00 ; '.'
000000000021c468         db  0x00 ; '.'
000000000021c469         db  0x00 ; '.'
000000000021c46a         db  0x00 ; '.'
000000000021c46b         db  0x00 ; '.'
000000000021c46c         db  0x00 ; '.'
000000000021c46d         db  0x00 ; '.'
000000000021c46e         db  0x00 ; '.'
000000000021c46f         db  0x00 ; '.'
000000000021c470         db  0x00 ; '.'
000000000021c471         db  0x00 ; '.'
000000000021c472         db  0x00 ; '.'
000000000021c473         db  0x00 ; '.'
000000000021c474         db  0x00 ; '.'
000000000021c475         db  0x00 ; '.'
000000000021c476         db  0x00 ; '.'
000000000021c477         db  0x00 ; '.'
000000000021c478         db  0x00 ; '.'
000000000021c479         db  0x00 ; '.'
000000000021c47a         db  0x00 ; '.'
000000000021c47b         db  0x00 ; '.'
000000000021c47c         db  0x00 ; '.'
000000000021c47d         db  0x00 ; '.'
000000000021c47e         db  0x00 ; '.'
000000000021c47f         db  0x00 ; '.'
000000000021c480         db  0x00 ; '.'
000000000021c481         db  0x00 ; '.'
000000000021c482         db  0x00 ; '.'
000000000021c483         db  0x00 ; '.'
000000000021c484         db  0x00 ; '.'
000000000021c485         db  0x00 ; '.'
000000000021c486         db  0x00 ; '.'
000000000021c487         db  0x00 ; '.'
000000000021c488         db  0x00 ; '.'
000000000021c489         db  0x00 ; '.'
000000000021c48a         db  0x00 ; '.'
000000000021c48b         db  0x00 ; '.'
000000000021c48c         db  0x00 ; '.'
000000000021c48d         db  0x00 ; '.'
000000000021c48e         db  0x00 ; '.'
000000000021c48f         db  0x00 ; '.'
000000000021c490         db  0x00 ; '.'
000000000021c491         db  0x00 ; '.'
000000000021c492         db  0x00 ; '.'
000000000021c493         db  0x00 ; '.'
000000000021c494         db  0x00 ; '.'
000000000021c495         db  0x00 ; '.'
000000000021c496         db  0x00 ; '.'
000000000021c497         db  0x00 ; '.'
000000000021c498         db  0x00 ; '.'
000000000021c499         db  0x00 ; '.'
000000000021c49a         db  0x00 ; '.'
000000000021c49b         db  0x00 ; '.'
000000000021c49c         db  0x00 ; '.'
000000000021c49d         db  0x00 ; '.'
000000000021c49e         db  0x00 ; '.'
000000000021c49f         db  0x00 ; '.'
000000000021c4a0         db  0x00 ; '.'
000000000021c4a1         db  0x00 ; '.'
000000000021c4a2         db  0x00 ; '.'
000000000021c4a3         db  0x00 ; '.'
000000000021c4a4         db  0x00 ; '.'
000000000021c4a5         db  0x00 ; '.'
000000000021c4a6         db  0x00 ; '.'
000000000021c4a7         db  0x00 ; '.'
000000000021c4a8         db  0x00 ; '.'
000000000021c4a9         db  0x00 ; '.'
000000000021c4aa         db  0x00 ; '.'
000000000021c4ab         db  0x00 ; '.'
000000000021c4ac         db  0x00 ; '.'
000000000021c4ad         db  0x00 ; '.'
000000000021c4ae         db  0x00 ; '.'
000000000021c4af         db  0x00 ; '.'
000000000021c4b0         db  0x00 ; '.'
000000000021c4b1         db  0x00 ; '.'
000000000021c4b2         db  0x00 ; '.'
000000000021c4b3         db  0x00 ; '.'
000000000021c4b4         db  0x00 ; '.'
000000000021c4b5         db  0x00 ; '.'
000000000021c4b6         db  0x00 ; '.'
000000000021c4b7         db  0x00 ; '.'
000000000021c4b8         db  0x00 ; '.'
000000000021c4b9         db  0x00 ; '.'
000000000021c4ba         db  0x00 ; '.'
000000000021c4bb         db  0x00 ; '.'
000000000021c4bc         db  0x00 ; '.'
000000000021c4bd         db  0x00 ; '.'
000000000021c4be         db  0x00 ; '.'
000000000021c4bf         db  0x00 ; '.'
000000000021c4c0         db  0x00 ; '.'
000000000021c4c1         db  0x00 ; '.'
000000000021c4c2         db  0x00 ; '.'
000000000021c4c3         db  0x00 ; '.'
000000000021c4c4         db  0x00 ; '.'
000000000021c4c5         db  0x00 ; '.'
000000000021c4c6         db  0x00 ; '.'
000000000021c4c7         db  0x00 ; '.'
000000000021c4c8         db  0x00 ; '.'
000000000021c4c9         db  0x00 ; '.'
000000000021c4ca         db  0x00 ; '.'
000000000021c4cb         db  0x00 ; '.'
000000000021c4cc         db  0x00 ; '.'
000000000021c4cd         db  0x00 ; '.'
000000000021c4ce         db  0x00 ; '.'
000000000021c4cf         db  0x00 ; '.'
000000000021c4d0         db  0x00 ; '.'
000000000021c4d1         db  0x00 ; '.'
000000000021c4d2         db  0x00 ; '.'
000000000021c4d3         db  0x00 ; '.'
000000000021c4d4         db  0x00 ; '.'
000000000021c4d5         db  0x00 ; '.'
000000000021c4d6         db  0x00 ; '.'
000000000021c4d7         db  0x00 ; '.'
000000000021c4d8         db  0x00 ; '.'
000000000021c4d9         db  0x00 ; '.'
000000000021c4da         db  0x00 ; '.'
000000000021c4db         db  0x00 ; '.'
000000000021c4dc         db  0x00 ; '.'
000000000021c4dd         db  0x00 ; '.'
000000000021c4de         db  0x00 ; '.'
000000000021c4df         db  0x00 ; '.'
000000000021c4e0         db  0x00 ; '.'
000000000021c4e1         db  0x00 ; '.'
000000000021c4e2         db  0x00 ; '.'
000000000021c4e3         db  0x00 ; '.'
000000000021c4e4         db  0x00 ; '.'
000000000021c4e5         db  0x00 ; '.'
000000000021c4e6         db  0x00 ; '.'
000000000021c4e7         db  0x00 ; '.'
000000000021c4e8         db  0x00 ; '.'
000000000021c4e9         db  0x00 ; '.'
000000000021c4ea         db  0x00 ; '.'
000000000021c4eb         db  0x00 ; '.'
000000000021c4ec         db  0x00 ; '.'
000000000021c4ed         db  0x00 ; '.'
000000000021c4ee         db  0x00 ; '.'
000000000021c4ef         db  0x00 ; '.'
000000000021c4f0         db  0x00 ; '.'
000000000021c4f1         db  0x00 ; '.'
000000000021c4f2         db  0x00 ; '.'
000000000021c4f3         db  0x00 ; '.'
000000000021c4f4         db  0x00 ; '.'
000000000021c4f5         db  0x00 ; '.'
000000000021c4f6         db  0x00 ; '.'
000000000021c4f7         db  0x00 ; '.'
000000000021c4f8         db  0x00 ; '.'
000000000021c4f9         db  0x00 ; '.'
000000000021c4fa         db  0x00 ; '.'
000000000021c4fb         db  0x00 ; '.'
000000000021c4fc         db  0x00 ; '.'
000000000021c4fd         db  0x00 ; '.'
000000000021c4fe         db  0x00 ; '.'
000000000021c4ff         db  0x00 ; '.'
000000000021c500         db  0x00 ; '.'
000000000021c501         db  0x00 ; '.'
000000000021c502         db  0x00 ; '.'
000000000021c503         db  0x00 ; '.'
000000000021c504         db  0x00 ; '.'
000000000021c505         db  0x00 ; '.'
000000000021c506         db  0x00 ; '.'
000000000021c507         db  0x00 ; '.'
000000000021c508         db  0x00 ; '.'
000000000021c509         db  0x00 ; '.'
000000000021c50a         db  0x00 ; '.'
000000000021c50b         db  0x00 ; '.'
000000000021c50c         db  0x00 ; '.'
000000000021c50d         db  0x00 ; '.'
000000000021c50e         db  0x00 ; '.'
000000000021c50f         db  0x00 ; '.'
000000000021c510         db  0x00 ; '.'
000000000021c511         db  0x00 ; '.'
000000000021c512         db  0x00 ; '.'
000000000021c513         db  0x00 ; '.'
000000000021c514         db  0x00 ; '.'
000000000021c515         db  0x00 ; '.'
000000000021c516         db  0x00 ; '.'
000000000021c517         db  0x00 ; '.'
000000000021c518         db  0x00 ; '.'
000000000021c519         db  0x00 ; '.'
000000000021c51a         db  0x00 ; '.'
000000000021c51b         db  0x00 ; '.'
000000000021c51c         db  0x00 ; '.'
000000000021c51d         db  0x00 ; '.'
000000000021c51e         db  0x00 ; '.'
000000000021c51f         db  0x00 ; '.'
000000000021c520         db  0x00 ; '.'
000000000021c521         db  0x00 ; '.'
000000000021c522         db  0x00 ; '.'
000000000021c523         db  0x00 ; '.'
000000000021c524         db  0x00 ; '.'
000000000021c525         db  0x00 ; '.'
000000000021c526         db  0x00 ; '.'
000000000021c527         db  0x00 ; '.'
000000000021c528         db  0x00 ; '.'
000000000021c529         db  0x00 ; '.'
000000000021c52a         db  0x00 ; '.'
000000000021c52b         db  0x00 ; '.'
000000000021c52c         db  0x00 ; '.'
000000000021c52d         db  0x00 ; '.'
000000000021c52e         db  0x00 ; '.'
000000000021c52f         db  0x00 ; '.'
000000000021c530         db  0x00 ; '.'
000000000021c531         db  0x00 ; '.'
000000000021c532         db  0x00 ; '.'
000000000021c533         db  0x00 ; '.'
000000000021c534         db  0x00 ; '.'
000000000021c535         db  0x00 ; '.'
000000000021c536         db  0x00 ; '.'
000000000021c537         db  0x00 ; '.'
000000000021c538         db  0x00 ; '.'
000000000021c539         db  0x00 ; '.'
000000000021c53a         db  0x00 ; '.'
000000000021c53b         db  0x00 ; '.'
000000000021c53c         db  0x00 ; '.'
000000000021c53d         db  0x00 ; '.'
000000000021c53e         db  0x00 ; '.'
000000000021c53f         db  0x00 ; '.'
                     zeros.7570:
000000000021c540         db  0x00 ; '.'                                         ; DATA XREF=write_zeros, write_zeros+47, write_zeros+126, write_zeros+153
000000000021c541         db  0x00 ; '.'
000000000021c542         db  0x00 ; '.'
000000000021c543         db  0x00 ; '.'
000000000021c544         db  0x00 ; '.'
000000000021c545         db  0x00 ; '.'
000000000021c546         db  0x00 ; '.'
000000000021c547         db  0x00 ; '.'
                     top_level_dst_name:
000000000021c548         db  0x00 ; '.'                                         ; DATA XREF=copy_internal+4262, copy_internal+6576, copy+106
000000000021c549         db  0x00 ; '.'
000000000021c54a         db  0x00 ; '.'
000000000021c54b         db  0x00 ; '.'
000000000021c54c         db  0x00 ; '.'
000000000021c54d         db  0x00 ; '.'
000000000021c54e         db  0x00 ; '.'
000000000021c54f         db  0x00 ; '.'
                     top_level_src_name:
000000000021c550         db  0x00 ; '.'                                         ; DATA XREF=copy_internal+4284, copy_internal+6598, copy_internal+9930, copy+113
000000000021c551         db  0x00 ; '.'
000000000021c552         db  0x00 ; '.'
000000000021c553         db  0x00 ; '.'
000000000021c554         db  0x00 ; '.'
000000000021c555         db  0x00 ; '.'
000000000021c556         db  0x00 ; '.'
000000000021c557         db  0x00 ; '.'
                     src_to_dest:
000000000021c558         db  0x00 ; '.'                                         ; DATA XREF=forget_created+9, src_to_dest_lookup+8, remember_copied+40, hash_init+40, forget_all
000000000021c559         db  0x00 ; '.'
000000000021c55a         db  0x00 ; '.'
000000000021c55b         db  0x00 ; '.'
000000000021c55c         db  0x00 ; '.'
000000000021c55d         db  0x00 ; '.'
000000000021c55e         db  0x00 ; '.'
000000000021c55f         db  0x00 ; '.'
                     simple_backup_suffix:
000000000021c560         db  0x00 ; '.'                                         ; DATA XREF=copy_internal+3476, copy_internal+10379, set_simple_backup_suffix+21, backupfile_internal+72, backupfile_internal+970, backupfile_internal+1009, backupfile_internal+1513
000000000021c561         db  0x00 ; '.'
000000000021c562         db  0x00 ; '.'
000000000021c563         db  0x00 ; '.'
000000000021c564         db  0x00 ; '.'
000000000021c565         db  0x00 ; '.'
000000000021c566         db  0x00 ; '.'
000000000021c567         db  0x00 ; '.'
                     file_name:
000000000021c568         db  0x00 ; '.'                                         ; DATA XREF=close_stdin_set_file_name, close_stdin+107
000000000021c569         db  0x00 ; '.'
000000000021c56a         db  0x00 ; '.'
000000000021c56b         db  0x00 ; '.'
000000000021c56c         db  0x00 ; '.'
000000000021c56d         db  0x00 ; '.'
000000000021c56e         db  0x00 ; '.'
000000000021c56f         db  0x00 ; '.'
                     ignore_EPIPE:
000000000021c570         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000021c571         db  0x00 ; '.'
000000000021c572         db  0x00 ; '.'
000000000021c573         db  0x00 ; '.'
000000000021c574         db  0x00 ; '.'
000000000021c575         db  0x00 ; '.'
000000000021c576         db  0x00 ; '.'
000000000021c577         db  0x00 ; '.'
                     file_name_21c578:        // file_name
000000000021c578         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000021c579         db  0x00 ; '.'
000000000021c57a         db  0x00 ; '.'
000000000021c57b         db  0x00 ; '.'
000000000021c57c         db  0x00 ; '.'
000000000021c57d         db  0x00 ; '.'
000000000021c57e         db  0x00 ; '.'
000000000021c57f         db  0x00 ; '.'
                     program_name:
000000000021c580         db  0x00 ; '.'                                         ; DATA XREF=usage+20, prompt+466, prompt+680, overwrite_ok.isra.12+106, overwrite_ok.isra.12+220, set_program_name+109
000000000021c581         db  0x00 ; '.'
000000000021c582         db  0x00 ; '.'
000000000021c583         db  0x00 ; '.'
000000000021c584         db  0x00 ; '.'
000000000021c585         db  0x00 ; '.'
000000000021c586         db  0x00 ; '.'
000000000021c587         db  0x00 ; '.'
000000000021c588         db  0x00 ; '.'
000000000021c589         db  0x00 ; '.'
000000000021c58a         db  0x00 ; '.'
000000000021c58b         db  0x00 ; '.'
000000000021c58c         db  0x00 ; '.'
000000000021c58d         db  0x00 ; '.'
000000000021c58e         db  0x00 ; '.'
000000000021c58f         db  0x00 ; '.'
000000000021c590         db  0x00 ; '.'
000000000021c591         db  0x00 ; '.'
000000000021c592         db  0x00 ; '.'
000000000021c593         db  0x00 ; '.'
000000000021c594         db  0x00 ; '.'
000000000021c595         db  0x00 ; '.'
000000000021c596         db  0x00 ; '.'
000000000021c597         db  0x00 ; '.'
000000000021c598         db  0x00 ; '.'
000000000021c599         db  0x00 ; '.'
000000000021c59a         db  0x00 ; '.'
000000000021c59b         db  0x00 ; '.'
000000000021c59c         db  0x00 ; '.'
000000000021c59d         db  0x00 ; '.'
000000000021c59e         db  0x00 ; '.'
000000000021c59f         db  0x00 ; '.'
                     slot0:
000000000021c5a0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000021c5a1         db  0x00 ; '.'
000000000021c5a2         db  0x00 ; '.'
000000000021c5a3         db  0x00 ; '.'
000000000021c5a4         db  0x00 ; '.'
000000000021c5a5         db  0x00 ; '.'
000000000021c5a6         db  0x00 ; '.'
000000000021c5a7         db  0x00 ; '.'
000000000021c5a8         db  0x00 ; '.'
000000000021c5a9         db  0x00 ; '.'
000000000021c5aa         db  0x00 ; '.'
000000000021c5ab         db  0x00 ; '.'
000000000021c5ac         db  0x00 ; '.'
000000000021c5ad         db  0x00 ; '.'
000000000021c5ae         db  0x00 ; '.'
000000000021c5af         db  0x00 ; '.'
000000000021c5b0         db  0x00 ; '.'
000000000021c5b1         db  0x00 ; '.'
000000000021c5b2         db  0x00 ; '.'
000000000021c5b3         db  0x00 ; '.'
000000000021c5b4         db  0x00 ; '.'
000000000021c5b5         db  0x00 ; '.'
000000000021c5b6         db  0x00 ; '.'
000000000021c5b7         db  0x00 ; '.'
000000000021c5b8         db  0x00 ; '.'
000000000021c5b9         db  0x00 ; '.'
000000000021c5ba         db  0x00 ; '.'
000000000021c5bb         db  0x00 ; '.'
000000000021c5bc         db  0x00 ; '.'
000000000021c5bd         db  0x00 ; '.'
000000000021c5be         db  0x00 ; '.'
000000000021c5bf         db  0x00 ; '.'
000000000021c5c0         db  0x00 ; '.'
000000000021c5c1         db  0x00 ; '.'
000000000021c5c2         db  0x00 ; '.'
000000000021c5c3         db  0x00 ; '.'
000000000021c5c4         db  0x00 ; '.'
000000000021c5c5         db  0x00 ; '.'
000000000021c5c6         db  0x00 ; '.'
000000000021c5c7         db  0x00 ; '.'
000000000021c5c8         db  0x00 ; '.'
000000000021c5c9         db  0x00 ; '.'
000000000021c5ca         db  0x00 ; '.'
000000000021c5cb         db  0x00 ; '.'
000000000021c5cc         db  0x00 ; '.'
000000000021c5cd         db  0x00 ; '.'
000000000021c5ce         db  0x00 ; '.'
000000000021c5cf         db  0x00 ; '.'
000000000021c5d0         db  0x00 ; '.'
000000000021c5d1         db  0x00 ; '.'
000000000021c5d2         db  0x00 ; '.'
000000000021c5d3         db  0x00 ; '.'
000000000021c5d4         db  0x00 ; '.'
000000000021c5d5         db  0x00 ; '.'
000000000021c5d6         db  0x00 ; '.'
000000000021c5d7         db  0x00 ; '.'
000000000021c5d8         db  0x00 ; '.'
000000000021c5d9         db  0x00 ; '.'
000000000021c5da         db  0x00 ; '.'
000000000021c5db         db  0x00 ; '.'
000000000021c5dc         db  0x00 ; '.'
000000000021c5dd         db  0x00 ; '.'
000000000021c5de         db  0x00 ; '.'
000000000021c5df         db  0x00 ; '.'
000000000021c5e0         db  0x00 ; '.'
000000000021c5e1         db  0x00 ; '.'
000000000021c5e2         db  0x00 ; '.'
000000000021c5e3         db  0x00 ; '.'
000000000021c5e4         db  0x00 ; '.'
000000000021c5e5         db  0x00 ; '.'
000000000021c5e6         db  0x00 ; '.'
000000000021c5e7         db  0x00 ; '.'
000000000021c5e8         db  0x00 ; '.'
000000000021c5e9         db  0x00 ; '.'
000000000021c5ea         db  0x00 ; '.'
000000000021c5eb         db  0x00 ; '.'
000000000021c5ec         db  0x00 ; '.'
000000000021c5ed         db  0x00 ; '.'
000000000021c5ee         db  0x00 ; '.'
000000000021c5ef         db  0x00 ; '.'
000000000021c5f0         db  0x00 ; '.'
000000000021c5f1         db  0x00 ; '.'
000000000021c5f2         db  0x00 ; '.'
000000000021c5f3         db  0x00 ; '.'
000000000021c5f4         db  0x00 ; '.'
000000000021c5f5         db  0x00 ; '.'
000000000021c5f6         db  0x00 ; '.'
000000000021c5f7         db  0x00 ; '.'
000000000021c5f8         db  0x00 ; '.'
000000000021c5f9         db  0x00 ; '.'
000000000021c5fa         db  0x00 ; '.'
000000000021c5fb         db  0x00 ; '.'
000000000021c5fc         db  0x00 ; '.'
000000000021c5fd         db  0x00 ; '.'
000000000021c5fe         db  0x00 ; '.'
000000000021c5ff         db  0x00 ; '.'
000000000021c600         db  0x00 ; '.'
000000000021c601         db  0x00 ; '.'
000000000021c602         db  0x00 ; '.'
000000000021c603         db  0x00 ; '.'
000000000021c604         db  0x00 ; '.'
000000000021c605         db  0x00 ; '.'
000000000021c606         db  0x00 ; '.'
000000000021c607         db  0x00 ; '.'
000000000021c608         db  0x00 ; '.'
000000000021c609         db  0x00 ; '.'
000000000021c60a         db  0x00 ; '.'
000000000021c60b         db  0x00 ; '.'
000000000021c60c         db  0x00 ; '.'
000000000021c60d         db  0x00 ; '.'
000000000021c60e         db  0x00 ; '.'
000000000021c60f         db  0x00 ; '.'
000000000021c610         db  0x00 ; '.'
000000000021c611         db  0x00 ; '.'
000000000021c612         db  0x00 ; '.'
000000000021c613         db  0x00 ; '.'
000000000021c614         db  0x00 ; '.'
000000000021c615         db  0x00 ; '.'
000000000021c616         db  0x00 ; '.'
000000000021c617         db  0x00 ; '.'
000000000021c618         db  0x00 ; '.'
000000000021c619         db  0x00 ; '.'
000000000021c61a         db  0x00 ; '.'
000000000021c61b         db  0x00 ; '.'
000000000021c61c         db  0x00 ; '.'
000000000021c61d         db  0x00 ; '.'
000000000021c61e         db  0x00 ; '.'
000000000021c61f         db  0x00 ; '.'
000000000021c620         db  0x00 ; '.'
000000000021c621         db  0x00 ; '.'
000000000021c622         db  0x00 ; '.'
000000000021c623         db  0x00 ; '.'
000000000021c624         db  0x00 ; '.'
000000000021c625         db  0x00 ; '.'
000000000021c626         db  0x00 ; '.'
000000000021c627         db  0x00 ; '.'
000000000021c628         db  0x00 ; '.'
000000000021c629         db  0x00 ; '.'
000000000021c62a         db  0x00 ; '.'
000000000021c62b         db  0x00 ; '.'
000000000021c62c         db  0x00 ; '.'
000000000021c62d         db  0x00 ; '.'
000000000021c62e         db  0x00 ; '.'
000000000021c62f         db  0x00 ; '.'
000000000021c630         db  0x00 ; '.'
000000000021c631         db  0x00 ; '.'
000000000021c632         db  0x00 ; '.'
000000000021c633         db  0x00 ; '.'
000000000021c634         db  0x00 ; '.'
000000000021c635         db  0x00 ; '.'
000000000021c636         db  0x00 ; '.'
000000000021c637         db  0x00 ; '.'
000000000021c638         db  0x00 ; '.'
000000000021c639         db  0x00 ; '.'
000000000021c63a         db  0x00 ; '.'
000000000021c63b         db  0x00 ; '.'
000000000021c63c         db  0x00 ; '.'
000000000021c63d         db  0x00 ; '.'
000000000021c63e         db  0x00 ; '.'
000000000021c63f         db  0x00 ; '.'
000000000021c640         db  0x00 ; '.'
000000000021c641         db  0x00 ; '.'
000000000021c642         db  0x00 ; '.'
000000000021c643         db  0x00 ; '.'
000000000021c644         db  0x00 ; '.'
000000000021c645         db  0x00 ; '.'
000000000021c646         db  0x00 ; '.'
000000000021c647         db  0x00 ; '.'
000000000021c648         db  0x00 ; '.'
000000000021c649         db  0x00 ; '.'
000000000021c64a         db  0x00 ; '.'
000000000021c64b         db  0x00 ; '.'
000000000021c64c         db  0x00 ; '.'
000000000021c64d         db  0x00 ; '.'
000000000021c64e         db  0x00 ; '.'
000000000021c64f         db  0x00 ; '.'
000000000021c650         db  0x00 ; '.'
000000000021c651         db  0x00 ; '.'
000000000021c652         db  0x00 ; '.'
000000000021c653         db  0x00 ; '.'
000000000021c654         db  0x00 ; '.'
000000000021c655         db  0x00 ; '.'
000000000021c656         db  0x00 ; '.'
000000000021c657         db  0x00 ; '.'
000000000021c658         db  0x00 ; '.'
000000000021c659         db  0x00 ; '.'
000000000021c65a         db  0x00 ; '.'
000000000021c65b         db  0x00 ; '.'
000000000021c65c         db  0x00 ; '.'
000000000021c65d         db  0x00 ; '.'
000000000021c65e         db  0x00 ; '.'
000000000021c65f         db  0x00 ; '.'
000000000021c660         db  0x00 ; '.'
000000000021c661         db  0x00 ; '.'
000000000021c662         db  0x00 ; '.'
000000000021c663         db  0x00 ; '.'
000000000021c664         db  0x00 ; '.'
000000000021c665         db  0x00 ; '.'
000000000021c666         db  0x00 ; '.'
000000000021c667         db  0x00 ; '.'
000000000021c668         db  0x00 ; '.'
000000000021c669         db  0x00 ; '.'
000000000021c66a         db  0x00 ; '.'
000000000021c66b         db  0x00 ; '.'
000000000021c66c         db  0x00 ; '.'
000000000021c66d         db  0x00 ; '.'
000000000021c66e         db  0x00 ; '.'
000000000021c66f         db  0x00 ; '.'
000000000021c670         db  0x00 ; '.'
000000000021c671         db  0x00 ; '.'
000000000021c672         db  0x00 ; '.'
000000000021c673         db  0x00 ; '.'
000000000021c674         db  0x00 ; '.'
000000000021c675         db  0x00 ; '.'
000000000021c676         db  0x00 ; '.'
000000000021c677         db  0x00 ; '.'
000000000021c678         db  0x00 ; '.'
000000000021c679         db  0x00 ; '.'
000000000021c67a         db  0x00 ; '.'
000000000021c67b         db  0x00 ; '.'
000000000021c67c         db  0x00 ; '.'
000000000021c67d         db  0x00 ; '.'
000000000021c67e         db  0x00 ; '.'
000000000021c67f         db  0x00 ; '.'
000000000021c680         db  0x00 ; '.'
000000000021c681         db  0x00 ; '.'
000000000021c682         db  0x00 ; '.'
000000000021c683         db  0x00 ; '.'
000000000021c684         db  0x00 ; '.'
000000000021c685         db  0x00 ; '.'
000000000021c686         db  0x00 ; '.'
000000000021c687         db  0x00 ; '.'
000000000021c688         db  0x00 ; '.'
000000000021c689         db  0x00 ; '.'
000000000021c68a         db  0x00 ; '.'
000000000021c68b         db  0x00 ; '.'
000000000021c68c         db  0x00 ; '.'
000000000021c68d         db  0x00 ; '.'
000000000021c68e         db  0x00 ; '.'
000000000021c68f         db  0x00 ; '.'
000000000021c690         db  0x00 ; '.'
000000000021c691         db  0x00 ; '.'
000000000021c692         db  0x00 ; '.'
000000000021c693         db  0x00 ; '.'
000000000021c694         db  0x00 ; '.'
000000000021c695         db  0x00 ; '.'
000000000021c696         db  0x00 ; '.'
000000000021c697         db  0x00 ; '.'
000000000021c698         db  0x00 ; '.'
000000000021c699         db  0x00 ; '.'
000000000021c69a         db  0x00 ; '.'
000000000021c69b         db  0x00 ; '.'
000000000021c69c         db  0x00 ; '.'
000000000021c69d         db  0x00 ; '.'
000000000021c69e         db  0x00 ; '.'
000000000021c69f         db  0x00 ; '.'
                     default_quoting_options:
000000000021c6a0         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000021c6a1         db  0x00 ; '.'
000000000021c6a2         db  0x00 ; '.'
000000000021c6a3         db  0x00 ; '.'
000000000021c6a4         db  0x00 ; '.'
000000000021c6a5         db  0x00 ; '.'
000000000021c6a6         db  0x00 ; '.'
000000000021c6a7         db  0x00 ; '.'
000000000021c6a8         db  0x00 ; '.'
000000000021c6a9         db  0x00 ; '.'
000000000021c6aa         db  0x00 ; '.'
000000000021c6ab         db  0x00 ; '.'
000000000021c6ac         db  0x00 ; '.'
000000000021c6ad         db  0x00 ; '.'
000000000021c6ae         db  0x00 ; '.'
000000000021c6af         db  0x00 ; '.'
000000000021c6b0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000021c6b1         db  0x00 ; '.'
000000000021c6b2         db  0x00 ; '.'
000000000021c6b3         db  0x00 ; '.'
000000000021c6b4         db  0x00 ; '.'
000000000021c6b5         db  0x00 ; '.'
000000000021c6b6         db  0x00 ; '.'
000000000021c6b7         db  0x00 ; '.'
000000000021c6b8         db  0x00 ; '.'
000000000021c6b9         db  0x00 ; '.'
000000000021c6ba         db  0x00 ; '.'
000000000021c6bb         db  0x00 ; '.'
000000000021c6bc         db  0x00 ; '.'
000000000021c6bd         db  0x00 ; '.'
000000000021c6be         db  0x00 ; '.'
000000000021c6bf         db  0x00 ; '.'
000000000021c6c0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000021c6c1         db  0x00 ; '.'
000000000021c6c2         db  0x00 ; '.'
000000000021c6c3         db  0x00 ; '.'
000000000021c6c4         db  0x00 ; '.'
000000000021c6c5         db  0x00 ; '.'
000000000021c6c6         db  0x00 ; '.'
000000000021c6c7         db  0x00 ; '.'
000000000021c6c8         db  0x00 ; '.'
000000000021c6c9         db  0x00 ; '.'
000000000021c6ca         db  0x00 ; '.'
000000000021c6cb         db  0x00 ; '.'
000000000021c6cc         db  0x00 ; '.'
000000000021c6cd         db  0x00 ; '.'
000000000021c6ce         db  0x00 ; '.'
000000000021c6cf         db  0x00 ; '.'
                     qword_21c6d0:
000000000021c6d0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000021c6d1         db  0x00 ; '.'
000000000021c6d2         db  0x00 ; '.'
000000000021c6d3         db  0x00 ; '.'
000000000021c6d4         db  0x00 ; '.'
000000000021c6d5         db  0x00 ; '.'
000000000021c6d6         db  0x00 ; '.'
000000000021c6d7         db  0x00 ; '.'
                     new_dst_res.5308:
000000000021c6d8         db  0x00 ; '.'                                         ; DATA XREF=utimecmpat+153, utimecmpat+228, utimecmpat+420, utimecmpat+1680
000000000021c6d9         db  0x00 ; '.'
000000000021c6da         db  0x00 ; '.'
000000000021c6db         db  0x00 ; '.'
000000000021c6dc         db  0x00 ; '.'
000000000021c6dd         db  0x00 ; '.'
000000000021c6de         db  0x00 ; '.'
000000000021c6df         db  0x00 ; '.'
                     ht.5307:
000000000021c6e0         db  0x00 ; '.'                                         ; DATA XREF=utimecmpat+134, utimecmpat+472, utimecmpat+1638
000000000021c6e1         db  0x00 ; '.'
000000000021c6e2         db  0x00 ; '.'
000000000021c6e3         db  0x00 ; '.'
000000000021c6e4         db  0x00 ; '.'
000000000021c6e5         db  0x00 ; '.'
000000000021c6e6         db  0x00 ; '.'
000000000021c6e7         db  0x00 ; '.'
                     lutimensat_works_really:
000000000021c6e8         db  0x00 ; '.'                                         ; DATA XREF=fdutimens+181, lutimens+86, lutimens+152, lutimens+288, lutimens+315, lutimens+384
000000000021c6e9         db  0x00 ; '.'
000000000021c6ea         db  0x00 ; '.'
000000000021c6eb         db  0x00 ; '.'
                     utimensat_works_really:
000000000021c6ec         db  0x00 ; '.'                                         ; DATA XREF=fdutimens+106, fdutimens+171, fdutimens+975, lutimens+374
000000000021c6ed         db  0x00 ; '.'
000000000021c6ee         db  0x00 ; '.'
000000000021c6ef         db  0x00 ; '.'
                     can_write.3065:
000000000021c6f0         db  0x00 ; '.'                                         ; DATA XREF=can_write_any_file+9, can_write_any_file+45
                     initialized.3064:
000000000021c6f1         db  0x00 ; '.'                                         ; DATA XREF=can_write_any_file, can_write_any_file+35
000000000021c6f2         db  0x00 ; '.'
000000000021c6f3         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
000000000021c6f4         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
000000000021c6f5         db  0x00 ; '.'
000000000021c6f6         db  0x00 ; '.'
000000000021c6f7         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x21c700; 0x21ce70[ (1904 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x21c700; 0x439570[ (2215536 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     getenv:
000000000021c700         extern function code                                   ; DATA XREF=getenv@GOT
                     free:
000000000021c708         extern function code
                     utimensat:
000000000021c710         extern function code                                   ; DATA XREF=utimensat@GOT
                     abort:
000000000021c718         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000021c720         extern function code                                   ; DATA XREF=__errno_location@GOT
                     unlink:
000000000021c728         extern function code                                   ; DATA XREF=unlink@GOT
                     strncmp:
000000000021c730         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000021c738         extern function code
                     _exit:
000000000021c740         extern function code                                   ; DATA XREF=_exit@GOT
                     strcpy:
000000000021c748         extern function code                                   ; DATA XREF=strcpy@GOT
                     __fpending:
000000000021c750         extern function code                                   ; DATA XREF=__fpending@GOT
                     __read_chk:
000000000021c758         extern function code                                   ; DATA XREF=__read_chk@GOT
                     mkdir:
000000000021c760         extern function code                                   ; DATA XREF=mkdir@GOT
                     unlinkat:
000000000021c768         extern function code                                   ; DATA XREF=unlinkat@GOT
                     qsort:
000000000021c770         extern function code                                   ; DATA XREF=qsort@GOT
                     isatty:
000000000021c778         extern function code                                   ; DATA XREF=isatty@GOT
                     faccessat:
000000000021c780         extern function code                                   ; DATA XREF=faccessat@GOT
                     readlink:
000000000021c788         extern function code                                   ; DATA XREF=readlink@GOT
                     fcntl:
000000000021c790         extern function code                                   ; DATA XREF=fcntl@GOT
                     clock_gettime:
000000000021c798         extern function code                                   ; DATA XREF=clock_gettime@GOT
                     write:
000000000021c7a0         extern function code                                   ; DATA XREF=write@GOT
                     getpid:
000000000021c7a8         extern function code                                   ; DATA XREF=getpid@GOT
                     fread_unlocked:
000000000021c7b0         extern function code                                   ; DATA XREF=fread_unlocked@GOT
                     textdomain:
000000000021c7b8         extern function code                                   ; DATA XREF=textdomain@GOT
                     pathconf:
000000000021c7c0         extern function code                                   ; DATA XREF=pathconf@GOT
                     fclose:
000000000021c7c8         extern function code                                   ; DATA XREF=fclose@GOT
                     opendir:
000000000021c7d0         extern function code                                   ; DATA XREF=opendir@GOT
                     bindtextdomain:
000000000021c7d8         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     stpcpy:
000000000021c7e0         extern function code                                   ; DATA XREF=stpcpy@GOT
                     rmdir:
000000000021c7e8         extern function code                                   ; DATA XREF=rmdir@GOT
                     dcgettext:
000000000021c7f0         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000021c7f8         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000021c800         extern function code                                   ; DATA XREF=strlen@GOT
                     __lxstat:
000000000021c808         extern function code                                   ; DATA XREF=__lxstat@GOT
                     openat:
000000000021c810         extern function code                                   ; DATA XREF=openat@GOT
                     __stack_chk_fail:
000000000021c818         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getuid:
000000000021c820         extern function code                                   ; DATA XREF=getuid@GOT
                     getopt_long:
000000000021c828         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
000000000021c830         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     __fxstatat:
000000000021c838         extern function code                                   ; DATA XREF=__fxstatat@GOT
                     __overflow:
000000000021c840         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
000000000021c848         extern function code                                   ; DATA XREF=strrchr@GOT
                     ftruncate:
000000000021c850         extern function code                                   ; DATA XREF=ftruncate@GOT
                     lseek:
000000000021c858         extern function code                                   ; DATA XREF=lseek@GOT
                     gettimeofday:
000000000021c860         extern function code                                   ; DATA XREF=gettimeofday@GOT
                     __assert_fail:
000000000021c868         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     memset:
000000000021c870         extern function code                                   ; DATA XREF=memset@GOT
                     geteuid:
000000000021c878         extern function code                                   ; DATA XREF=geteuid@GOT
                     ioctl:
000000000021c880         extern function code                                   ; DATA XREF=ioctl@GOT
                     canonicalize_file_name:
000000000021c888         extern function code                                   ; DATA XREF=canonicalize_file_name@GOT
                     close:
000000000021c890         extern function code                                   ; DATA XREF=close@GOT
                     rewinddir:
000000000021c898         extern function code                                   ; DATA XREF=rewinddir@GOT
                     strspn:
000000000021c8a0         extern function code                                   ; DATA XREF=strspn@GOT
                     closedir:
000000000021c8a8         extern function code                                   ; DATA XREF=closedir@GOT
                     posix_fadvise:
000000000021c8b0         extern function code                                   ; DATA XREF=posix_fadvise@GOT
                     read:
000000000021c8b8         extern function code                                   ; DATA XREF=read@GOT
                     __libc_start_main:
000000000021c8c0         extern function code
                     memcmp:
000000000021c8c8         extern function code                                   ; DATA XREF=memcmp@GOT
                     fallocate:
000000000021c8d0         extern function code                                   ; DATA XREF=fallocate@GOT
                     fputs_unlocked:
000000000021c8d8         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     utimes:
000000000021c8e0         extern function code                                   ; DATA XREF=utimes@GOT
                     calloc:
000000000021c8e8         extern function code                                   ; DATA XREF=calloc@GOT
                     __getdelim:
000000000021c8f0         extern function code                                   ; DATA XREF=__getdelim@GOT
                     strcmp:
000000000021c8f8         extern function code                                   ; DATA XREF=strcmp@GOT
                     dirfd:
000000000021c900         extern function code                                   ; DATA XREF=dirfd@GOT
                     fpathconf:
000000000021c908         extern function code                                   ; DATA XREF=fpathconf@GOT
                     rpmatch:
000000000021c910         extern function code                                   ; DATA XREF=rpmatch@GOT
                     syscall:
000000000021c918         extern function code                                   ; DATA XREF=syscall@GOT
                     mkfifo:
000000000021c920         extern function code                                   ; DATA XREF=mkfifo@GOT
                     __gmon_start__:
000000000021c928         extern function code
                     umask:
000000000021c930         extern function code                                   ; DATA XREF=umask@GOT
                     memcpy:
000000000021c938         extern function code                                   ; DATA XREF=memcpy@GOT
                     __xmknod:
000000000021c940         extern function code                                   ; DATA XREF=__xmknod@GOT
                     fileno:
000000000021c948         extern function code                                   ; DATA XREF=fileno@GOT
                     getgid:
000000000021c950         extern function code                                   ; DATA XREF=getgid@GOT
                     __xstat:
000000000021c958         extern function code                                   ; DATA XREF=__xstat@GOT
                     readdir:
000000000021c960         extern function code                                   ; DATA XREF=readdir@GOT
                     malloc:
000000000021c968         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
000000000021c970         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000021c978         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __fxstat:
000000000021c980         extern function code                                   ; DATA XREF=__fxstat@GOT
                     lchown:
000000000021c988         extern function code                                   ; DATA XREF=lchown@GOT
                     __freading:
000000000021c990         extern function code                                   ; DATA XREF=__freading@GOT
                     fchdir:
000000000021c998         extern function code                                   ; DATA XREF=fchdir@GOT
                     realloc:
000000000021c9a0         extern function code                                   ; DATA XREF=realloc@GOT
                     fdopen:
000000000021c9a8         extern function code                                   ; DATA XREF=fdopen@GOT
                     linkat:
000000000021c9b0         extern function code                                   ; DATA XREF=linkat@GOT
                     setlocale:
000000000021c9b8         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000021c9c0         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     fchmod:
000000000021c9c8         extern function code                                   ; DATA XREF=fchmod@GOT
                     setvbuf:
000000000021c9d0         extern function code                                   ; DATA XREF=setvbuf@GOT
                     chmod:
000000000021c9d8         extern function code                                   ; DATA XREF=chmod@GOT
                     mempcpy:
000000000021c9e0         extern function code                                   ; DATA XREF=mempcpy@GOT
                     memmove:
000000000021c9e8         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
000000000021c9f0         extern function code                                   ; DATA XREF=error@GOT
                     __explicit_bzero_chk:
000000000021c9f8         extern function code                                   ; DATA XREF=__explicit_bzero_chk@GOT
                     open:
000000000021ca00         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
000000000021ca08         extern function code                                   ; DATA XREF=fseeko@GOT
                     fchown:
000000000021ca10         extern function code                                   ; DATA XREF=fchown@GOT
                     fopen:
000000000021ca18         extern function code                                   ; DATA XREF=fopen@GOT
                     rename:
000000000021ca20         extern function code                                   ; DATA XREF=rename@GOT
                     fdopendir:
000000000021ca28         extern function code                                   ; DATA XREF=fdopendir@GOT
                     futimens:
000000000021ca30         extern function code                                   ; DATA XREF=futimens@GOT
                     euidaccess:
000000000021ca38         extern function code                                   ; DATA XREF=euidaccess@GOT
                     fstatfs:
000000000021ca40         extern function code                                   ; DATA XREF=fstatfs@GOT
                     __cxa_atexit:
000000000021ca48         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     renameat:
000000000021ca50         extern function code                                   ; DATA XREF=renameat@GOT
                     getpagesize:
000000000021ca58         extern function code                                   ; DATA XREF=getpagesize@GOT
                     getppid:
000000000021ca60         extern function code                                   ; DATA XREF=getppid@GOT
                     exit:
000000000021ca68         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000021ca70         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000021ca78         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000021ca80         extern function code
                     mbsinit:
000000000021ca88         extern function code                                   ; DATA XREF=mbsinit@GOT
                     symlinkat:
000000000021ca90         extern function code                                   ; DATA XREF=symlinkat@GOT
                     iswprint:
000000000021ca98         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000021caa0         extern function code
                     futimesat:
000000000021caa8         extern function code                                   ; DATA XREF=futimesat@GOT
                     __ctype_b_loc:
000000000021cab0         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     getenv@@GLIBC_2.2.5:
000000000021cab8         extern function code
                     free@@GLIBC_2.2.5:
000000000021cac0         extern function code
                     utimensat@@GLIBC_2.6:
000000000021cac8         extern function code
                     abort@@GLIBC_2.2.5:
000000000021cad0         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000021cad8         extern function code
                     unlink@@GLIBC_2.2.5:
000000000021cae0         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000021cae8         extern function code
                     _ITM_deregisterTMCloneTable_21caf0:        // _ITM_deregisterTMCloneTable
000000000021caf0         extern function code
                     _exit@@GLIBC_2.2.5:
000000000021caf8         extern function code
                     strcpy@@GLIBC_2.2.5:
000000000021cb00         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000021cb08         extern function code
                     __read_chk@@GLIBC_2.4:
000000000021cb10         extern function code
                     mkdir@@GLIBC_2.2.5:
000000000021cb18         extern function code
                     unlinkat@@GLIBC_2.4:
000000000021cb20         extern function code
                     qsort@@GLIBC_2.2.5:
000000000021cb28         extern function code
                     isatty@@GLIBC_2.2.5:
000000000021cb30         extern function code
                     faccessat@@GLIBC_2.4:
000000000021cb38         extern function code
                     readlink@@GLIBC_2.2.5:
000000000021cb40         extern function code
                     fcntl@@GLIBC_2.2.5:
000000000021cb48         extern function code
                     clock_gettime@@GLIBC_2.17:
000000000021cb50         extern function code
                     write@@GLIBC_2.2.5:
000000000021cb58         extern function code
                     getpid@@GLIBC_2.2.5:
000000000021cb60         extern function code
                     fread_unlocked@@GLIBC_2.2.5:
000000000021cb68         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000021cb70         extern function code
                     pathconf@@GLIBC_2.2.5:
000000000021cb78         extern function code
                     fclose@@GLIBC_2.2.5:
000000000021cb80         extern function code
                     opendir@@GLIBC_2.2.5:
000000000021cb88         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000021cb90         extern function code
                     stpcpy@@GLIBC_2.2.5:
000000000021cb98         extern function code
                     rmdir@@GLIBC_2.2.5:
000000000021cba0         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000021cba8         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000021cbb0         extern function code
                     strlen@@GLIBC_2.2.5:
000000000021cbb8         extern function code
                     __lxstat@@GLIBC_2.2.5:
000000000021cbc0         extern function code
                     openat@@GLIBC_2.4:
000000000021cbc8         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000021cbd0         extern function code
                     getuid@@GLIBC_2.2.5:
000000000021cbd8         extern function code
                     getopt_long@@GLIBC_2.2.5:
000000000021cbe0         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000021cbe8         extern function code
                     __fxstatat@@GLIBC_2.4:
000000000021cbf0         extern function code
                     __overflow@@GLIBC_2.2.5:
000000000021cbf8         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000021cc00         extern function code
                     ftruncate@@GLIBC_2.2.5:
000000000021cc08         extern function code
                     lseek@@GLIBC_2.2.5:
000000000021cc10         extern function code
                     gettimeofday@@GLIBC_2.2.5:
000000000021cc18         extern function code
                     __assert_fail@@GLIBC_2.2.5:
000000000021cc20         extern function code
                     memset@@GLIBC_2.2.5:
000000000021cc28         extern function code
                     geteuid@@GLIBC_2.2.5:
000000000021cc30         extern function code
                     ioctl@@GLIBC_2.2.5:
000000000021cc38         extern function code
                     canonicalize_file_name@@GLIBC_2.2.5:
000000000021cc40         extern function code
                     close@@GLIBC_2.2.5:
000000000021cc48         extern function code
                     rewinddir@@GLIBC_2.2.5:
000000000021cc50         extern function code
                     strspn@@GLIBC_2.2.5:
000000000021cc58         extern function code
                     closedir@@GLIBC_2.2.5:
000000000021cc60         extern function code
                     posix_fadvise@@GLIBC_2.2.5:
000000000021cc68         extern function code
                     read@@GLIBC_2.2.5:
000000000021cc70         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000021cc78         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000021cc80         extern function code
                     fallocate@@GLIBC_2.10:
000000000021cc88         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000021cc90         extern function code
                     utimes@@GLIBC_2.2.5:
000000000021cc98         extern function code
                     calloc@@GLIBC_2.2.5:
000000000021cca0         extern function code
                     __getdelim@@GLIBC_2.2.5:
000000000021cca8         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000021ccb0         extern function code
                     dirfd@@GLIBC_2.2.5:
000000000021ccb8         extern function code
                     fpathconf@@GLIBC_2.2.5:
000000000021ccc0         extern function code
                     rpmatch@@GLIBC_2.2.5:
000000000021ccc8         extern function code
                     syscall@@GLIBC_2.2.5:
000000000021ccd0         extern function code
                     mkfifo@@GLIBC_2.2.5:
000000000021ccd8         extern function code
                     __gmon_start___21cce0:        // __gmon_start__
000000000021cce0         extern function code
                     umask@@GLIBC_2.2.5:
000000000021cce8         extern function code
                     memcpy@@GLIBC_2.14:
000000000021ccf0         extern function code
                     __xmknod@@GLIBC_2.2.5:
000000000021ccf8         extern function code
                     fileno@@GLIBC_2.2.5:
000000000021cd00         extern function code
                     getgid@@GLIBC_2.2.5:
000000000021cd08         extern function code
                     __xstat@@GLIBC_2.2.5:
000000000021cd10         extern function code
                     readdir@@GLIBC_2.2.5:
000000000021cd18         extern function code
                     malloc@@GLIBC_2.2.5:
000000000021cd20         extern function code
                     fflush@@GLIBC_2.2.5:
000000000021cd28         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000021cd30         extern function code
                     __fxstat@@GLIBC_2.2.5:
000000000021cd38         extern function code
                     lchown@@GLIBC_2.2.5:
000000000021cd40         extern function code
                     __freading@@GLIBC_2.2.5:
000000000021cd48         extern function code
                     fchdir@@GLIBC_2.2.5:
000000000021cd50         extern function code
                     realloc@@GLIBC_2.2.5:
000000000021cd58         extern function code
                     fdopen@@GLIBC_2.2.5:
000000000021cd60         extern function code
                     linkat@@GLIBC_2.4:
000000000021cd68         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000021cd70         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000021cd78         extern function code
                     fchmod@@GLIBC_2.2.5:
000000000021cd80         extern function code
                     setvbuf@@GLIBC_2.2.5:
000000000021cd88         extern function code
                     chmod@@GLIBC_2.2.5:
000000000021cd90         extern function code
                     mempcpy@@GLIBC_2.2.5:
000000000021cd98         extern function code
                     memmove@@GLIBC_2.2.5:
000000000021cda0         extern function code
                     error@@GLIBC_2.2.5:
000000000021cda8         extern function code
                     __explicit_bzero_chk@@GLIBC_2.25:
000000000021cdb0         extern function code
                     open@@GLIBC_2.2.5:
000000000021cdb8         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000021cdc0         extern function code
                     fchown@@GLIBC_2.2.5:
000000000021cdc8         extern function code
                     fopen@@GLIBC_2.2.5:
000000000021cdd0         extern function code
                     rename@@GLIBC_2.2.5:
000000000021cdd8         extern function code
                     fdopendir@@GLIBC_2.4:
000000000021cde0         extern function code
                     futimens@@GLIBC_2.6:
000000000021cde8         extern function code
                     euidaccess@@GLIBC_2.2.5:
000000000021cdf0         extern function code
                     fstatfs@@GLIBC_2.2.5:
000000000021cdf8         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000021ce00         extern function code
                     renameat@@GLIBC_2.4:
000000000021ce08         extern function code
                     getpagesize@@GLIBC_2.2.5:
000000000021ce10         extern function code
                     getppid@@GLIBC_2.2.5:
000000000021ce18         extern function code
                     exit@@GLIBC_2.2.5:
000000000021ce20         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000021ce28         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000021ce30         extern function code
                     _ITM_registerTMCloneTable_21ce38:        // _ITM_registerTMCloneTable
000000000021ce38         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000021ce40         extern function code
                     symlinkat@@GLIBC_2.4:
000000000021ce48         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000021ce50         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000021ce58         extern function code
                     futimesat@@GLIBC_2.4:
000000000021ce60         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000021ce68         extern function code
