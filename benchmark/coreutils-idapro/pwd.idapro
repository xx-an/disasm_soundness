LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 929D7397E7E88817FCC9A40A09633C9E1A19E845A841C581E6F565F00970A8DF
LOAD:0000000000000000 ; Input MD5    : 28A4378ECDD4B955C6B45999F91B8818
LOAD:0000000000000000 ; Input CRC32  : 853B67C9
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/pwd
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'pwd.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'root-dev-ino.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xgetcwd.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 262E0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6C90h                ; Size in file image
LOAD:00000000000000D8                 dq 6C90h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 570h                 ; Size in file image
LOAD:0000000000000110                 dq 708h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C18h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C18h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5E50h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5E50h                ; Physical address
LOAD:00000000000001B0                 dq 26Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 26Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B10h              ; Physical address
LOAD:0000000000000220                 dq 4F0h                 ; Size in file image
LOAD:0000000000000228                 dq 4F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 88h, 0F8h, 0A9h, 0F8h, 0F1h, 0CAh, 56h, 29h, 0B1h, 19h ; Desc
LOAD:0000000000000284                 db 0FCh, 6Ch, 0C7h, 84h, 3Bh, 80h, 0D0h, 0EAh, 0E3h, 99h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 3Ah
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 3Ah, 3Bh, 40h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aGetenv - offset byte_8F0, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F0                            offset dword_0, 0>
LOAD:0000000000000308                 Elf64_Sym <offset aFree - offset byte_8F0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aAbort - offset byte_8F0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000320                            0>
LOAD:0000000000000338                 Elf64_Sym <offset aErrnoLocation - offset byte_8F0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aStrncmp - offset byte_8F0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aItmDeregistert - offset byte_8F0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aExit - offset byte_8F0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000380                            0>
LOAD:0000000000000398                 Elf64_Sym <offset aFpending - offset byte_8F0, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aPuts - offset byte_8F0, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000003B0                            0>
LOAD:00000000000003C8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8F0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aFclose - offset byte_8F0, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aOpendir - offset byte_8F0, 12h, 0, 0, \ ; "opendir"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aBindtextdomain - offset byte_8F0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aDcgettext - offset byte_8F0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8F0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aStrlen - offset byte_8F0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aLxstat - offset byte_8F0, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aFchdir+1 - offset byte_8F0, 12h, 0, 0, \ ; "chdir"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aStackChkFail - offset byte_8F0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aGetoptLong - offset byte_8F0, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aMbrtowc - offset byte_8F0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aStrrchr - offset byte_8F0, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aLseek - offset byte_8F0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000500                            0>
LOAD:0000000000000518                 Elf64_Sym <offset aMemset - offset byte_8F0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aGetcwd - offset byte_8F0, 12h, 0, 0, \ ; "getcwd"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aClosedir - offset byte_8F0, 12h, 0, 0, \ ; "closedir"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aLibcStartMain - offset byte_8F0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aMemcmp - offset byte_8F0, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aFputsUnlocked - offset byte_8F0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aCalloc - offset byte_8F0, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aDirfd - offset byte_8F0, 12h, 0, 0, offset dword_0,\ ; "dirfd"
LOAD:00000000000005C0                            0>
LOAD:00000000000005D8                 Elf64_Sym <offset aGmonStart - offset byte_8F0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aMemcpy - offset byte_8F0, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aFileno - offset byte_8F0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aXstat - offset byte_8F0, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000620                            0>
LOAD:0000000000000638                 Elf64_Sym <offset aReaddir - offset byte_8F0, 12h, 0, 0, \ ; "readdir"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aMalloc - offset byte_8F0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aFflush - offset byte_8F0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aNlLanginfo - offset byte_8F0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aFxstat - offset byte_8F0, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aFreading - offset byte_8F0, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aFchdir - offset byte_8F0, 12h, 0, 0, \ ; "fchdir"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aRealloc - offset byte_8F0, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aSetlocale - offset byte_8F0, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aPrintfChk - offset byte_8F0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aError - offset byte_8F0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000728                            0>
LOAD:0000000000000740                 Elf64_Sym <offset aFseeko - offset byte_8F0, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aCxaAtexit - offset byte_8F0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aExit+1 - offset byte_8F0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aFwrite - offset byte_8F0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aFprintfChk - offset byte_8F0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aItmRegistertmc - offset byte_8F0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aMbsinit - offset byte_8F0, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aIswprint - offset byte_8F0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007E8                            offset dword_0, 0>
LOAD:0000000000000800                 Elf64_Sym <offset aCxaFinalize - offset byte_8F0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000800                            offset dword_0, 0>
LOAD:0000000000000818                 Elf64_Sym <offset aStrstr - offset byte_8F0, 12h, 0, 0, \ ; "strstr"
LOAD:0000000000000818                            offset dword_0, 0>
LOAD:0000000000000830                 Elf64_Sym <offset aCtypeBLoc - offset byte_8F0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000830                            offset dword_0, 0>
LOAD:0000000000000848                 Elf64_Sym <offset aStdout - offset byte_8F0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000848                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000860                 Elf64_Sym <offset aProgname - offset byte_8F0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000860                            offset __bss_start, 8>
LOAD:0000000000000878                 Elf64_Sym <offset aProgramInvocat - offset byte_8F0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000878                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000890                 Elf64_Sym <offset aPrognameFull - offset byte_8F0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000890                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008A8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8F0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000008A8                            offset __bss_start, 8>
LOAD:00000000000008C0                 Elf64_Sym <offset aStderr - offset byte_8F0, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000008C0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008D8                 Elf64_Sym <offset aOptind - offset byte_8F0, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008D8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008F0 ; ELF String Table
LOAD:00000000000008F0 byte_8F0        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000008F0                                         ; LOAD:0000000000000308↑o ...
LOAD:00000000000008F1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C48↓o
LOAD:00000000000008FB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000668↑o
LOAD:0000000000000902 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000710↑o
LOAD:000000000000090F aReaddir        db 'readdir',0          ; DATA XREF: LOAD:0000000000000638↑o
LOAD:0000000000000917 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:0000000000000921 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000929 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000931 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008D8↑o
LOAD:0000000000000938 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:0000000000000940 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000428↑o
LOAD:000000000000094A aClosedir       db 'closedir',0         ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000953 aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000953                                         ; LOAD:0000000000000488↑o
LOAD:000000000000095A aError          db 'error',0            ; DATA XREF: LOAD:0000000000000728↑o
LOAD:0000000000000960 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000965 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:0000000000000976 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000470↑o
LOAD:000000000000097F aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:0000000000000988 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000990 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000996 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000996                                         ; LOAD:0000000000000770↑o
LOAD:000000000000099C aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000099C                                         ; DATA XREF: LOAD:0000000000000878↑o
LOAD:00000000000009B4 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000009B4                                         ; DATA XREF: LOAD:0000000000000440↑o
LOAD:00000000000009CB aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:00000000000009D2 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000458↑o
LOAD:00000000000009D9 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000518↑o
LOAD:00000000000009E0 aStrstr         db 'strstr',0           ; DATA XREF: LOAD:0000000000000818↑o
LOAD:00000000000009E7 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000338↑o
LOAD:00000000000009F8 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000578↑o
LOAD:00000000000009FF aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:0000000000000A0D aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000A14 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000500↑o
LOAD:0000000000000A1A aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000A21 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000A28 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000A2F aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:0000000000000A37 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000680↑o
LOAD:0000000000000A43 aOpendir        db 'opendir',0          ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:0000000000000A4B aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000A59 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000A60 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:0000000000000A6B aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000008C0↑o
LOAD:0000000000000A72 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000A7E aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000698↑o
LOAD:0000000000000A87 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000608↑o
LOAD:0000000000000A8E aGetcwd         db 'getcwd',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000A95 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000788↑o
LOAD:0000000000000A9C aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000398↑o
LOAD:0000000000000AA7 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000AA7                                         ; DATA XREF: LOAD:00000000000008A8↑o
LOAD:0000000000000AC5 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000AD4 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000ADC aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000410↑o
LOAD:0000000000000ADC                                         ; LOAD:00000000000003C8↑o
LOAD:0000000000000AEB aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000AEB                                         ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000AFD aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000B03 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000B0A aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000B19 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000B1E aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000860↑o
LOAD:0000000000000B29 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000890↑o
LOAD:0000000000000B39 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000B46 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C58↓o
LOAD:0000000000000B50 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C68↓o
LOAD:0000000000000B5C aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C78↓o
LOAD:0000000000000B67 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C88↓o
LOAD:0000000000000B71 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C98↓o
LOAD:0000000000000B7D aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B7D                                         ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000B99 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000BA8 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000BA8                                         ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000BC2 ; ELF GNU Symbol Version Table
LOAD:0000000000000BC2                 dw 0
LOAD:0000000000000BC4                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000BD0                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; opendir@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000BDE                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BE0                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 2                    ; chdir@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BEA                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BEC                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 2                    ; getcwd@@GLIBC_2.2.5
LOAD:0000000000000BF6                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; dirfd@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C04                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C06                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C08                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:0000000000000C0C                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000C0E                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000C12                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C16                 dw 2                    ; fchdir@@GLIBC_2.2.5
LOAD:0000000000000C18                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C1A                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C1E                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C20                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C22                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C2A                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C2C                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C32                 dw 2                    ; strstr@@GLIBC_2.2.5
LOAD:0000000000000C34                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C36                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C38                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C3A                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C3C                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C3E                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C40                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C42                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C44                 dw 0
LOAD:0000000000000C46                 dw 0
LOAD:0000000000000C48 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C48                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8F0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C58                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8F0, \ ; "GLIBC_2.3"
LOAD:0000000000000C58                                10h>
LOAD:0000000000000C68                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8F0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C68                                10h>
LOAD:0000000000000C78                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8F0, \ ; "GLIBC_2.14"
LOAD:0000000000000C78                                10h>
LOAD:0000000000000C88                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8F0, \ ; "GLIBC_2.4"
LOAD:0000000000000C88                                10h>
LOAD:0000000000000C98                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8F0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000CA8 ; ELF RELA Relocation Table
LOAD:0000000000000CA8                 Elf64_Rela <207B10h, 8, 1A90h> ; R_X86_64_RELATIVE +1A90h
LOAD:0000000000000CC0                 Elf64_Rela <207B18h, 8, 1A50h> ; R_X86_64_RELATIVE +1A50h
LOAD:0000000000000CD8                 Elf64_Rela <207B20h, 8, 5238h> ; R_X86_64_RELATIVE +5238h
LOAD:0000000000000CF0                 Elf64_Rela <207B40h, 8, 5240h> ; R_X86_64_RELATIVE +5240h
LOAD:0000000000000D08                 Elf64_Rela <207B60h, 8, 5249h> ; R_X86_64_RELATIVE +5249h
LOAD:0000000000000D20                 Elf64_Rela <207B80h, 8, 524Eh> ; R_X86_64_RELATIVE +524Eh
LOAD:0000000000000D38                 Elf64_Rela <207BC0h, 8, 5601h> ; R_X86_64_RELATIVE +5601h
LOAD:0000000000000D50                 Elf64_Rela <207BC8h, 8, 5609h> ; R_X86_64_RELATIVE +5609h
LOAD:0000000000000D68                 Elf64_Rela <207BD0h, 8, 560Fh> ; R_X86_64_RELATIVE +560Fh
LOAD:0000000000000D80                 Elf64_Rela <207BD8h, 8, 561Ch> ; R_X86_64_RELATIVE +561Ch
LOAD:0000000000000D98                 Elf64_Rela <207BE0h, 8, 5629h> ; R_X86_64_RELATIVE +5629h
LOAD:0000000000000DB0                 Elf64_Rela <207BE8h, 8, 563Dh> ; R_X86_64_RELATIVE +563Dh
LOAD:0000000000000DC8                 Elf64_Rela <207BF0h, 8, 563Fh> ; R_X86_64_RELATIVE +563Fh
LOAD:0000000000000DE0                 Elf64_Rela <207BF8h, 8, 5622h> ; R_X86_64_RELATIVE +5622h
LOAD:0000000000000DF8                 Elf64_Rela <207C00h, 8, 5203h> ; R_X86_64_RELATIVE +5203h
LOAD:0000000000000E10                 Elf64_Rela <207C08h, 8, 5647h> ; R_X86_64_RELATIVE +5647h
LOAD:0000000000000E28                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000E40                 Elf64_Rela <208010h, 8, 558Bh> ; R_X86_64_RELATIVE +558Bh
LOAD:0000000000000E58                 Elf64_Rela <208060h, 8, 208070h> ; R_X86_64_RELATIVE +208070h
LOAD:0000000000000E70                 Elf64_Rela <208078h, 8, 2080E0h> ; R_X86_64_RELATIVE +2080E0h
LOAD:0000000000000E88                 Elf64_Rela <207FC0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000EA0                 Elf64_Rela <207FC8h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000EB8                 Elf64_Rela <207FD0h, 2000000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000ED0                 Elf64_Rela <207FD8h, 3400000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000EE8                 Elf64_Rela <207FE0h, 3700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F00                 Elf64_Rela <208080h, 3B00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000F18                 Elf64_Rela <208088h, 3A00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000F30                 Elf64_Rela <208090h, 4000000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F48                 Elf64_Rela <208098h, 3D00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F60                 Elf64_Rela <2080A0h, 3F00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F78 ; ELF JMPREL Relocation Table
LOAD:0000000000000F78                 Elf64_Rela <207E20h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000000F90                 Elf64_Rela <207E28h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000FA8                 Elf64_Rela <207E30h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000FC0                 Elf64_Rela <207E38h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000FD8                 Elf64_Rela <207E40h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000FF0                 Elf64_Rela <207E48h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001008                 Elf64_Rela <207E50h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001020                 Elf64_Rela <207E58h, 900000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000001038                 Elf64_Rela <207E60h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001050                 Elf64_Rela <207E68h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001068                 Elf64_Rela <207E70h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT opendir
LOAD:0000000000001080                 Elf64_Rela <207E78h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001098                 Elf64_Rela <207E80h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000010B0                 Elf64_Rela <207E88h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000010C8                 Elf64_Rela <207E90h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000010E0                 Elf64_Rela <207E98h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:00000000000010F8                 Elf64_Rela <207EA0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT chdir
LOAD:0000000000001110                 Elf64_Rela <207EA8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001128                 Elf64_Rela <207EB0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001140                 Elf64_Rela <207EB8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001158                 Elf64_Rela <207EC0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001170                 Elf64_Rela <207EC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001188                 Elf64_Rela <207ED0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000011A0                 Elf64_Rela <207ED8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT getcwd
LOAD:00000000000011B8                 Elf64_Rela <207EE0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:00000000000011D0                 Elf64_Rela <207EE8h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000011E8                 Elf64_Rela <207EF0h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001200                 Elf64_Rela <207EF8h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001218                 Elf64_Rela <207F00h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:0000000000001230                 Elf64_Rela <207F08h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001248                 Elf64_Rela <207F10h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001260                 Elf64_Rela <207F18h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001278                 Elf64_Rela <207F20h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000001290                 Elf64_Rela <207F28h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000012A8                 Elf64_Rela <207F30h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000012C0                 Elf64_Rela <207F38h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000012D8                 Elf64_Rela <207F40h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000012F0                 Elf64_Rela <207F48h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001308                 Elf64_Rela <207F50h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:0000000000001320                 Elf64_Rela <207F58h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001338                 Elf64_Rela <207F60h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001350                 Elf64_Rela <207F68h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001368                 Elf64_Rela <207F70h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001380                 Elf64_Rela <207F78h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001398                 Elf64_Rela <207F80h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000013B0                 Elf64_Rela <207F88h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000013C8                 Elf64_Rela <207F90h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000013E0                 Elf64_Rela <207F98h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000013F8                 Elf64_Rela <207FA0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001410                 Elf64_Rela <207FA8h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001428                 Elf64_Rela <207FB0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT strstr
LOAD:0000000000001440                 Elf64_Rela <207FB8h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001440 LOAD            ends
LOAD:0000000000001440
.init:0000000000001458 ; ===========================================================================
.init:0000000000001458
.init:0000000000001458 ; Segment type: Pure code
.init:0000000000001458 ; Segment permissions: Read/Execute
.init:0000000000001458 _init           segment dword public 'CODE' use64
.init:0000000000001458                 assume cs:_init
.init:0000000000001458                 ;org 1458h
.init:0000000000001458                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001458
.init:0000000000001458 ; =============== S U B R O U T I N E =======================================
.init:0000000000001458
.init:0000000000001458
.init:0000000000001458                 public _init_proc
.init:0000000000001458 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001458                 sub     rsp, 8          ; _init
.init:000000000000145C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001463                 test    rax, rax
.init:0000000000001466                 jz      short loc_146A
.init:0000000000001468                 call    rax ; __gmon_start__
.init:000000000000146A
.init:000000000000146A loc_146A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000146A                 add     rsp, 8
.init:000000000000146E                 retn
.init:000000000000146E _init_proc      endp
.init:000000000000146E
.init:000000000000146E _init           ends
.init:000000000000146E
LOAD:000000000000146F ; ===========================================================================
LOAD:000000000000146F
LOAD:000000000000146F ; Segment type: Pure code
LOAD:000000000000146F ; Segment permissions: Read/Execute
LOAD:000000000000146F LOAD            segment byte public 'CODE' use64
LOAD:000000000000146F                 assume cs:LOAD
LOAD:000000000000146F                 ;org 146Fh
LOAD:000000000000146F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000146F                 align 10h
LOAD:000000000000146F LOAD            ends
LOAD:000000000000146F
.plt:0000000000001470 ; ===========================================================================
.plt:0000000000001470
.plt:0000000000001470 ; Segment type: Pure code
.plt:0000000000001470 ; Segment permissions: Read/Execute
.plt:0000000000001470 _plt            segment para public 'CODE' use64
.plt:0000000000001470                 assume cs:_plt
.plt:0000000000001470                 ;org 1470h
.plt:0000000000001470                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470
.plt:0000000000001470 sub_1470        proc near               ; CODE XREF: .plt:000000000000148B↓j
.plt:0000000000001470                                         ; .plt:000000000000149B↓j ...
.plt:0000000000001470 ; __unwind {
.plt:0000000000001470                 push    cs:qword_207E10
.plt:0000000000001476                 jmp     cs:qword_207E18
.plt:0000000000001476 sub_1470        endp
.plt:0000000000001476
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:000000000000147C                 align 20h
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; char *getenv(const char *name)
.plt:0000000000001480 _getenv         proc near               ; CODE XREF: main+10↓p
.plt:0000000000001480                                         ; logical_getcwd+23↓p
.plt:0000000000001480                 jmp     cs:getenv_ptr
.plt:0000000000001480 _getenv         endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    0
.plt:000000000000148B                 jmp     sub_1470
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; void free(void *ptr)
.plt:0000000000001490 _free           proc near               ; CODE XREF: main+11A↓p
.plt:0000000000001490                                         ; main+199↓p ...
.plt:0000000000001490                 jmp     cs:free_ptr
.plt:0000000000001490 _free           endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    1
.plt:000000000000149B                 jmp     sub_1470
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: noreturn thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; void __noreturn abort(void)
.plt:00000000000014A0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000014A0                                         ; quotearg_buffer_restyled:def_28E1↓p ...
.plt:00000000000014A0                 jmp     cs:abort_ptr
.plt:00000000000014A0 _abort          endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    2
.plt:00000000000014AB                 jmp     sub_1470
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; int *__errno_location(void)
.plt:00000000000014B0 ___errno_location proc near             ; CODE XREF: robust_getcwd:loc_1E14↓p
.plt:00000000000014B0                                         ; robust_getcwd+3F8↓p ...
.plt:00000000000014B0                 jmp     cs:__errno_location_ptr
.plt:00000000000014B0 ___errno_location endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    3
.plt:00000000000014BB                 jmp     sub_1470
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000014C0 _strncmp        proc near               ; CODE XREF: usage+274↓p
.plt:00000000000014C0                                         ; usage+335↓p
.plt:00000000000014C0                 jmp     cs:strncmp_ptr
.plt:00000000000014C0 _strncmp        endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    4
.plt:00000000000014CB                 jmp     sub_1470
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: noreturn thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; void __noreturn _exit(int status)
.plt:00000000000014D0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000014D0                 jmp     cs:_exit_ptr
.plt:00000000000014D0 __exit          endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    5
.plt:00000000000014DB                 jmp     sub_1470
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; size_t __fpending(FILE *fp)
.plt:00000000000014E0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000014E0                 jmp     cs:__fpending_ptr
.plt:00000000000014E0 ___fpending     endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    6
.plt:00000000000014EB                 jmp     sub_1470
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int puts(const char *s)
.plt:00000000000014F0 _puts           proc near               ; CODE XREF: main+112↓p
.plt:00000000000014F0                                         ; main+129↓p ...
.plt:00000000000014F0                 jmp     cs:puts_ptr
.plt:00000000000014F0 _puts           endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    7
.plt:00000000000014FB                 jmp     sub_1470
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; char *textdomain(const char *domainname)
.plt:0000000000001500 _textdomain     proc near               ; CODE XREF: main+4F↓p
.plt:0000000000001500                 jmp     cs:textdomain_ptr
.plt:0000000000001500 _textdomain     endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    8
.plt:000000000000150B                 jmp     sub_1470
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; int fclose(FILE *stream)
.plt:0000000000001510 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001510                                         ; rpl_fclose+6B↓j
.plt:0000000000001510                 jmp     cs:fclose_ptr
.plt:0000000000001510 _fclose         endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    9
.plt:000000000000151B                 jmp     sub_1470
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; DIR *opendir(const char *name)
.plt:0000000000001520 _opendir        proc near               ; CODE XREF: robust_getcwd+BB↓p
.plt:0000000000001520                 jmp     cs:opendir_ptr
.plt:0000000000001520 _opendir        endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    0Ah
.plt:000000000000152B                 jmp     sub_1470
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001530 _bindtextdomain proc near               ; CODE XREF: main+43↓p
.plt:0000000000001530                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001530 _bindtextdomain endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    0Bh
.plt:000000000000153B                 jmp     sub_1470
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001540 _dcgettext      proc near               ; CODE XREF: main+13E↓p
.plt:0000000000001540                                         ; robust_getcwd+298↓p ...
.plt:0000000000001540                 jmp     cs:dcgettext_ptr
.plt:0000000000001540 _dcgettext      endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    0Ch
.plt:000000000000154B                 jmp     sub_1470
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001550 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001550                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001550 ___ctype_get_mb_cur_max endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    0Dh
.plt:000000000000155B                 jmp     sub_1470
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; size_t strlen(const char *s)
.plt:0000000000001560 _strlen         proc near               ; CODE XREF: robust_getcwd+191↓p
.plt:0000000000001560                                         ; quotearg_buffer_restyled+157↓p ...
.plt:0000000000001560                 jmp     cs:strlen_ptr
.plt:0000000000001560 _strlen         endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    0Eh
.plt:000000000000156B                 jmp     sub_1470
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001570 ___lxstat       proc near               ; CODE XREF: robust_getcwd+2C4↓p
.plt:0000000000001570                                         ; get_root_dev_ino+2D↓p
.plt:0000000000001570                 jmp     cs:__lxstat_ptr
.plt:0000000000001570 ___lxstat       endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    0Fh
.plt:000000000000157B                 jmp     sub_1470
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int chdir(const char *path)
.plt:0000000000001580 _chdir          proc near               ; CODE XREF: robust_getcwd+30C↓p
.plt:0000000000001580                 jmp     cs:chdir_ptr
.plt:0000000000001580 _chdir          endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    10h
.plt:000000000000158B                 jmp     sub_1470
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: noreturn thunk
.plt:0000000000001590
.plt:0000000000001590 ___stack_chk_fail proc near             ; CODE XREF: logical_getcwd:loc_1B92↓p
.plt:0000000000001590                                         ; robust_getcwd:loc_2228↓p ...
.plt:0000000000001590                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001590 ___stack_chk_fail endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    11h
.plt:000000000000159B                 jmp     sub_1470
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000015A0 _getopt_long    proc near               ; CODE XREF: main+76↓p
.plt:00000000000015A0                 jmp     cs:getopt_long_ptr
.plt:00000000000015A0 _getopt_long    endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    12h
.plt:00000000000015AB                 jmp     sub_1470
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000015B0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000015B0                 jmp     cs:mbrtowc_ptr
.plt:00000000000015B0 _mbrtowc        endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    13h
.plt:00000000000015BB                 jmp     sub_1470
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; char *strrchr(const char *s, int c)
.plt:00000000000015C0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000015C0                 jmp     cs:strrchr_ptr
.plt:00000000000015C0 _strrchr        endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    14h
.plt:00000000000015CB                 jmp     sub_1470
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000015D0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000015D0                                         ; rpl_fseeko+3B↓p
.plt:00000000000015D0                 jmp     cs:lseek_ptr
.plt:00000000000015D0 _lseek          endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    15h
.plt:00000000000015DB                 jmp     sub_1470
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000015E0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000015E0                                         ; xzalloc+12↓j
.plt:00000000000015E0                 jmp     cs:memset_ptr
.plt:00000000000015E0 _memset         endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    16h
.plt:00000000000015EB                 jmp     sub_1470
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; char *getcwd(char *buf, size_t size)
.plt:00000000000015F0 _getcwd         proc near               ; CODE XREF: xgetcwd+5↓p
.plt:00000000000015F0                 jmp     cs:getcwd_ptr
.plt:00000000000015F0 _getcwd         endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    17h
.plt:00000000000015FB                 jmp     sub_1470
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int closedir(DIR *dirp)
.plt:0000000000001600 _closedir       proc near               ; CODE XREF: robust_getcwd+1A9↓p
.plt:0000000000001600                                         ; robust_getcwd+268↓p ...
.plt:0000000000001600                 jmp     cs:closedir_ptr
.plt:0000000000001600 _closedir       endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    18h
.plt:000000000000160B                 jmp     sub_1470
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001610 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001610                 jmp     cs:memcmp_ptr
.plt:0000000000001610 _memcmp         endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    19h
.plt:000000000000161B                 jmp     sub_1470
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001620 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001620                                         ; usage+C2↓p ...
.plt:0000000000001620                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001620 _fputs_unlocked endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    1Ah
.plt:000000000000162B                 jmp     sub_1470
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001630 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001630                 jmp     cs:calloc_ptr
.plt:0000000000001630 _calloc         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    1Bh
.plt:000000000000163B                 jmp     sub_1470
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int dirfd(DIR *dirp)
.plt:0000000000001640 _dirfd          proc near               ; CODE XREF: robust_getcwd+CF↓p
.plt:0000000000001640                 jmp     cs:dirfd_ptr
.plt:0000000000001640 _dirfd          endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    1Ch
.plt:000000000000164B                 jmp     sub_1470
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001650 _memcpy         proc near               ; CODE XREF: file_name_prepend+7F↓p
.plt:0000000000001650                                         ; file_name_prepend+C8↓j ...
.plt:0000000000001650                 jmp     cs:memcpy_ptr
.plt:0000000000001650 _memcpy         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    1Dh
.plt:000000000000165B                 jmp     sub_1470
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int fileno(FILE *stream)
.plt:0000000000001660 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001660                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001660                 jmp     cs:fileno_ptr
.plt:0000000000001660 _fileno         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    1Eh
.plt:000000000000166B                 jmp     sub_1470
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001670 ___xstat        proc near               ; CODE XREF: logical_getcwd+AD↓p
.plt:0000000000001670                                         ; logical_getcwd+CA↓p ...
.plt:0000000000001670                 jmp     cs:__xstat_ptr
.plt:0000000000001670 ___xstat        endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    1Fh
.plt:000000000000167B                 jmp     sub_1470
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; struct dirent *readdir(DIR *dirp)
.plt:0000000000001680 _readdir        proc near               ; CODE XREF: robust_getcwd+143↓p
.plt:0000000000001680                 jmp     cs:readdir_ptr
.plt:0000000000001680 _readdir        endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    20h ; ' '
.plt:000000000000168B                 jmp     sub_1470
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; void *malloc(size_t size)
.plt:0000000000001690 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001690                 jmp     cs:malloc_ptr
.plt:0000000000001690 _malloc         endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    21h ; '!'
.plt:000000000000169B                 jmp     sub_1470
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; int fflush(FILE *stream)
.plt:00000000000016A0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000016A0                                         ; rpl_fflush+3B↓j
.plt:00000000000016A0                 jmp     cs:fflush_ptr
.plt:00000000000016A0 _fflush         endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    22h ; '"'
.plt:00000000000016AB                 jmp     sub_1470
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; char *nl_langinfo(nl_item item)
.plt:00000000000016B0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000016B0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000016B0 _nl_langinfo    endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    23h ; '#'
.plt:00000000000016BB                 jmp     sub_1470
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:00000000000016C0 ___fxstat       proc near               ; CODE XREF: robust_getcwd+F9↓p
.plt:00000000000016C0                 jmp     cs:__fxstat_ptr
.plt:00000000000016C0 ___fxstat       endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    24h ; '$'
.plt:00000000000016CB                 jmp     sub_1470
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int __freading(FILE *fp)
.plt:00000000000016D0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000016D0                                         ; rpl_fflush+9↓p
.plt:00000000000016D0                 jmp     cs:__freading_ptr
.plt:00000000000016D0 ___freading     endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    25h ; '%'
.plt:00000000000016DB                 jmp     sub_1470
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; int fchdir(int fd)
.plt:00000000000016E0 _fchdir         proc near               ; CODE XREF: robust_getcwd+E0↓p
.plt:00000000000016E0                 jmp     cs:fchdir_ptr
.plt:00000000000016E0 _fchdir         endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    26h ; '&'
.plt:00000000000016EB                 jmp     sub_1470
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000016F0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000016F0                 jmp     cs:realloc_ptr
.plt:00000000000016F0 _realloc        endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    27h ; '''
.plt:00000000000016FB                 jmp     sub_1470
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; char *setlocale(int category, const char *locale)
.plt:0000000000001700 _setlocale      proc near               ; CODE XREF: main+30↓p
.plt:0000000000001700                                         ; usage+25B↓p ...
.plt:0000000000001700                 jmp     cs:setlocale_ptr
.plt:0000000000001700 _setlocale      endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    28h ; '('
.plt:000000000000170B                 jmp     sub_1470
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001710                                         ; usage+161↓p ...
.plt:0000000000001710                 jmp     cs:__printf_chk_ptr
.plt:0000000000001710 ___printf_chk   endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    29h ; ')'
.plt:000000000000171B                 jmp     sub_1470
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001720 _error          proc near               ; CODE XREF: main+14C↓p
.plt:0000000000001720                                         ; robust_getcwd+2AC↓p ...
.plt:0000000000001720                 jmp     cs:error_ptr
.plt:0000000000001720 _error          endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    2Ah ; '*'
.plt:000000000000172B                 jmp     sub_1470
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001730 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4FCA↓j
.plt:0000000000001730                 jmp     cs:fseeko_ptr
.plt:0000000000001730 _fseeko         endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    2Bh ; '+'
.plt:000000000000173B                 jmp     sub_1470
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001740 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001740                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001740 ___cxa_atexit   endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    2Ch ; ','
.plt:000000000000174B                 jmp     sub_1470
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: noreturn thunk
.plt:0000000000001750
.plt:0000000000001750 ; void __noreturn exit(int status)
.plt:0000000000001750 _exit           proc near               ; CODE XREF: main+DA↓p
.plt:0000000000001750                                         ; usage+58↓p
.plt:0000000000001750                 jmp     cs:exit_ptr
.plt:0000000000001750 _exit           endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    2Dh ; '-'
.plt:000000000000175B                 jmp     sub_1470
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001760 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001760                 jmp     cs:fwrite_ptr
.plt:0000000000001760 _fwrite         endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    2Eh ; '.'
.plt:000000000000176B                 jmp     sub_1470
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001770                                         ; version_etc_arn+37↓p ...
.plt:0000000000001770                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001770 ___fprintf_chk  endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    2Fh ; '/'
.plt:000000000000177B                 jmp     sub_1470
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001780 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001780                 jmp     cs:mbsinit_ptr
.plt:0000000000001780 _mbsinit        endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    30h ; '0'
.plt:000000000000178B                 jmp     sub_1470
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; int iswprint(wint_t wc)
.plt:0000000000001790 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001790                 jmp     cs:iswprint_ptr
.plt:0000000000001790 _iswprint       endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    31h ; '1'
.plt:000000000000179B                 jmp     sub_1470
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; char *strstr(const char *haystack, const char *needle)
.plt:00000000000017A0 _strstr         proc near               ; CODE XREF: logical_getcwd+4F↓p
.plt:00000000000017A0                 jmp     cs:strstr_ptr
.plt:00000000000017A0 _strstr         endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    32h ; '2'
.plt:00000000000017AB                 jmp     sub_1470
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000017B0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000017B0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000017B0 ___ctype_b_loc  endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    33h ; '3'
.plt:00000000000017BB                 jmp     sub_1470
.plt:00000000000017BB ; } // starts at 1470
.plt:00000000000017BB _plt            ends
.plt:00000000000017BB
.plt.got:00000000000017C0 ; ===========================================================================
.plt.got:00000000000017C0
.plt.got:00000000000017C0 ; Segment type: Pure code
.plt.got:00000000000017C0 ; Segment permissions: Read/Execute
.plt.got:00000000000017C0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000017C0                 assume cs:_plt_got
.plt.got:00000000000017C0                 ;org 17C0h
.plt.got:00000000000017C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000017C0
.plt.got:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000017C0
.plt.got:00000000000017C0 ; Attributes: thunk
.plt.got:00000000000017C0
.plt.got:00000000000017C0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000017C0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000017C0 ; __unwind {
.plt.got:00000000000017C0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000017C0 __cxa_finalize  endp
.plt.got:00000000000017C0
.plt.got:00000000000017C0 ; ---------------------------------------------------------------------------
.plt.got:00000000000017C6                 align 8
.plt.got:00000000000017C6 ; } // starts at 17C0
.plt.got:00000000000017C6 _plt_got        ends
.plt.got:00000000000017C6
LOAD:00000000000017C8 ; ===========================================================================
LOAD:00000000000017C8
LOAD:00000000000017C8 ; Segment type: Pure code
LOAD:00000000000017C8 ; Segment permissions: Read/Execute
LOAD:00000000000017C8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000017C8                 assume cs:LOAD
LOAD:00000000000017C8                 ;org 17C8h
LOAD:00000000000017C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000017C8                 align 10h
LOAD:00000000000017C8 LOAD            ends
LOAD:00000000000017C8
.text:00000000000017D0 ; ===========================================================================
.text:00000000000017D0
.text:00000000000017D0 ; Segment type: Pure code
.text:00000000000017D0 ; Segment permissions: Read/Execute
.text:00000000000017D0 _text           segment para public 'CODE' use64
.text:00000000000017D0                 assume cs:_text
.text:00000000000017D0                 ;org 17D0h
.text:00000000000017D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000017D0
.text:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017D0
.text:00000000000017D0
.text:00000000000017D0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000017D0                 public main
.text:00000000000017D0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000017D0 ; __unwind {
.text:00000000000017D0                 push    r12
.text:00000000000017D2                 push    rbp
.text:00000000000017D3                 mov     ebp, edi
.text:00000000000017D5                 push    rbx
.text:00000000000017D6                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:00000000000017DD                 mov     rbx, rsi
.text:00000000000017E0                 call    _getenv
.text:00000000000017E5                 mov     rdi, [rbx]
.text:00000000000017E8                 test    rax, rax
.text:00000000000017EB                 setnz   r12b
.text:00000000000017EF                 call    set_program_name
.text:00000000000017F4                 lea     rsi, aUsageSOption+16h ; locale
.text:00000000000017FB                 mov     edi, 6          ; category
.text:0000000000001800                 call    _setlocale
.text:0000000000001805                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000180C                 lea     rdi, domainname ; "coreutils"
.text:0000000000001813                 call    _bindtextdomain
.text:0000000000001818                 lea     rdi, domainname ; "coreutils"
.text:000000000000181F                 call    _textdomain
.text:0000000000001824                 lea     rdi, close_stdout
.text:000000000000182B                 call    atexit
.text:0000000000001830
.text:0000000000001830 loc_1830:                               ; CODE XREF: main+9E↓j
.text:0000000000001830                                         ; main+E6↓j
.text:0000000000001830                 lea     rcx, longopts   ; longopts
.text:0000000000001837                 lea     rdx, shortopts  ; "LP"
.text:000000000000183E                 xor     r8d, r8d        ; longind
.text:0000000000001841                 mov     rsi, rbx        ; argv
.text:0000000000001844                 mov     edi, ebp        ; argc
.text:0000000000001846                 call    _getopt_long
.text:000000000000184B                 cmp     eax, 0FFFFFFFFh
.text:000000000000184E                 jz      short loc_18BB
.text:0000000000001850                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001855                 jz      loc_1985
.text:000000000000185B                 jle     short loc_1870
.text:000000000000185D                 cmp     eax, 4Ch ; 'L'
.text:0000000000001860                 jz      short loc_18B0
.text:0000000000001862                 cmp     eax, 50h ; 'P'
.text:0000000000001865                 jnz     loc_197B
.text:000000000000186B                 xor     r12d, r12d
.text:000000000000186E                 jmp     short loc_1830
.text:0000000000001870 ; ---------------------------------------------------------------------------
.text:0000000000001870
.text:0000000000001870 loc_1870:                               ; CODE XREF: main+8B↑j
.text:0000000000001870                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001875                 jnz     loc_197B
.text:000000000000187B                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001882                 mov     rcx, cs:Version
.text:0000000000001889                 lea     r8, aJimMeyering ; "Jim Meyering"
.text:0000000000001890                 lea     rdx, unk_51B5
.text:0000000000001897                 lea     rsi, aPwd       ; "pwd"
.text:000000000000189E                 xor     r9d, r9d
.text:00000000000018A1                 xor     eax, eax
.text:00000000000018A3                 call    version_etc
.text:00000000000018A8                 xor     edi, edi        ; status
.text:00000000000018AA                 call    _exit
.text:00000000000018AA ; ---------------------------------------------------------------------------
.text:00000000000018AF                 align 10h
.text:00000000000018B0
.text:00000000000018B0 loc_18B0:                               ; CODE XREF: main+90↑j
.text:00000000000018B0                 mov     r12d, 1
.text:00000000000018B6                 jmp     loc_1830
.text:00000000000018BB ; ---------------------------------------------------------------------------
.text:00000000000018BB
.text:00000000000018BB loc_18BB:                               ; CODE XREF: main+7E↑j
.text:00000000000018BB                 cmp     cs:optind@@GLIBC_2_2_5, ebp
.text:00000000000018C1                 jl      short loc_1900
.text:00000000000018C3
.text:00000000000018C3 loc_18C3:                               ; CODE XREF: main+151↓j
.text:00000000000018C3                 test    r12b, r12b
.text:00000000000018C6                 jz      short loc_18D2
.text:00000000000018C8                 call    logical_getcwd
.text:00000000000018CD                 test    rax, rax
.text:00000000000018D0                 jnz     short loc_18F6
.text:00000000000018D2
.text:00000000000018D2 loc_18D2:                               ; CODE XREF: main+F6↑j
.text:00000000000018D2                 call    xgetcwd
.text:00000000000018D7                 test    rax, rax
.text:00000000000018DA                 mov     rbx, rax
.text:00000000000018DD                 jz      short loc_1923
.text:00000000000018DF                 mov     rdi, rax        ; s
.text:00000000000018E2                 call    _puts
.text:00000000000018E7                 mov     rdi, rbx        ; ptr
.text:00000000000018EA                 call    _free
.text:00000000000018EF
.text:00000000000018EF loc_18EF:                               ; CODE XREF: main+12E↓j
.text:00000000000018EF                                         ; main+1A6↓j
.text:00000000000018EF                 pop     rbx
.text:00000000000018F0                 xor     eax, eax
.text:00000000000018F2                 pop     rbp
.text:00000000000018F3                 pop     r12
.text:00000000000018F5                 retn
.text:00000000000018F6 ; ---------------------------------------------------------------------------
.text:00000000000018F6
.text:00000000000018F6 loc_18F6:                               ; CODE XREF: main+100↑j
.text:00000000000018F6                 mov     rdi, rax        ; s
.text:00000000000018F9                 call    _puts
.text:00000000000018FE                 jmp     short loc_18EF
.text:0000000000001900 ; ---------------------------------------------------------------------------
.text:0000000000001900
.text:0000000000001900 loc_1900:                               ; CODE XREF: main+F1↑j
.text:0000000000001900                 lea     rsi, msgid      ; "ignoring non-option arguments"
.text:0000000000001907                 xor     edi, edi        ; domainname
.text:0000000000001909                 mov     edx, 5          ; category
.text:000000000000190E                 call    _dcgettext
.text:0000000000001913                 xor     esi, esi        ; errnum
.text:0000000000001915                 mov     rdx, rax        ; format
.text:0000000000001918                 xor     edi, edi        ; status
.text:000000000000191A                 xor     eax, eax
.text:000000000000191C                 call    _error
.text:0000000000001921                 jmp     short loc_18C3
.text:0000000000001923 ; ---------------------------------------------------------------------------
.text:0000000000001923
.text:0000000000001923 loc_1923:                               ; CODE XREF: main+10D↑j
.text:0000000000001923                 mov     edi, 18h
.text:0000000000001928                 call    xmalloc
.text:000000000000192D                 mov     edi, 2000h
.text:0000000000001932                 mov     rbx, rax
.text:0000000000001935                 mov     qword ptr [rax+8], 2000h
.text:000000000000193D                 call    xmalloc
.text:0000000000001942                 mov     rdx, [rbx+8]
.text:0000000000001946                 mov     [rbx], rax
.text:0000000000001949                 mov     rdi, rbx
.text:000000000000194C                 lea     rax, [rax+rdx-1]
.text:0000000000001951                 mov     [rbx+10h], rax
.text:0000000000001955                 mov     byte ptr [rax], 0
.text:0000000000001958                 call    robust_getcwd
.text:000000000000195D                 mov     rdi, [rbx+10h]  ; s
.text:0000000000001961                 call    _puts
.text:0000000000001966                 mov     rdi, [rbx]      ; ptr
.text:0000000000001969                 call    _free
.text:000000000000196E                 mov     rdi, rbx        ; ptr
.text:0000000000001971                 call    _free
.text:0000000000001976                 jmp     loc_18EF
.text:000000000000197B ; ---------------------------------------------------------------------------
.text:000000000000197B
.text:000000000000197B loc_197B:                               ; CODE XREF: main+95↑j
.text:000000000000197B                                         ; main+A5↑j
.text:000000000000197B                 mov     edi, 1          ; status
.text:0000000000001980                 call    usage
.text:0000000000001985 ; ---------------------------------------------------------------------------
.text:0000000000001985
.text:0000000000001985 loc_1985:                               ; CODE XREF: main+85↑j
.text:0000000000001985                 xor     edi, edi        ; status
.text:0000000000001987                 call    usage
.text:0000000000001987 ; } // starts at 17D0
.text:0000000000001987 main            endp
.text:0000000000001987
.text:0000000000001987 ; ---------------------------------------------------------------------------
.text:000000000000198C                 align 10h
.text:0000000000001990
.text:0000000000001990 ; =============== S U B R O U T I N E =======================================
.text:0000000000001990
.text:0000000000001990 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001990
.text:0000000000001990 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001990                 public start
.text:0000000000001990 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001990 ; __unwind {
.text:0000000000001990                 xor     ebp, ebp
.text:0000000000001992                 mov     r9, rdx         ; rtld_fini
.text:0000000000001995                 pop     rsi             ; argc
.text:0000000000001996                 mov     rdx, rsp        ; ubp_av
.text:0000000000001999                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000199D                 push    rax
.text:000000000000199E                 push    rsp             ; stack_end
.text:000000000000199F                 lea     r8, __libc_csu_fini ; fini
.text:00000000000019A6                 lea     rcx, __libc_csu_init ; init
.text:00000000000019AD                 lea     rdi, main       ; main
.text:00000000000019B4                 call    cs:__libc_start_main_ptr
.text:00000000000019BA                 hlt
.text:00000000000019BA ; } // starts at 1990
.text:00000000000019BA start           endp
.text:00000000000019BA
.text:00000000000019BA ; ---------------------------------------------------------------------------
.text:00000000000019BB                 align 20h
.text:00000000000019C0
.text:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019C0
.text:00000000000019C0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000019C0
.text:00000000000019C0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1A73↓p
.text:00000000000019C0                 lea     rdi, __bss_start
.text:00000000000019C7                 push    rbp
.text:00000000000019C8                 lea     rax, __bss_start
.text:00000000000019CF                 cmp     rax, rdi
.text:00000000000019D2                 mov     rbp, rsp
.text:00000000000019D5                 jz      short loc_19F0
.text:00000000000019D7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000019DE                 test    rax, rax
.text:00000000000019E1                 jz      short loc_19F0
.text:00000000000019E3                 pop     rbp
.text:00000000000019E4                 jmp     rax
.text:00000000000019E4 ; ---------------------------------------------------------------------------
.text:00000000000019E6                 align 10h
.text:00000000000019F0
.text:00000000000019F0 loc_19F0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000019F0                                         ; deregister_tm_clones+21↑j
.text:00000000000019F0                 pop     rbp
.text:00000000000019F1                 retn
.text:00000000000019F1 deregister_tm_clones endp
.text:00000000000019F1
.text:00000000000019F1 ; ---------------------------------------------------------------------------
.text:00000000000019F2                 align 20h
.text:0000000000001A00
.text:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A00
.text:0000000000001A00 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A00
.text:0000000000001A00 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001A00                 lea     rdi, __bss_start
.text:0000000000001A07                 lea     rsi, __bss_start
.text:0000000000001A0E                 push    rbp
.text:0000000000001A0F                 sub     rsi, rdi
.text:0000000000001A12                 mov     rbp, rsp
.text:0000000000001A15                 sar     rsi, 3
.text:0000000000001A19                 mov     rax, rsi
.text:0000000000001A1C                 shr     rax, 3Fh
.text:0000000000001A20                 add     rsi, rax
.text:0000000000001A23                 sar     rsi, 1
.text:0000000000001A26                 jz      short loc_1A40
.text:0000000000001A28                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001A2F                 test    rax, rax
.text:0000000000001A32                 jz      short loc_1A40
.text:0000000000001A34                 pop     rbp
.text:0000000000001A35                 jmp     rax
.text:0000000000001A35 ; ---------------------------------------------------------------------------
.text:0000000000001A37                 align 20h
.text:0000000000001A40
.text:0000000000001A40 loc_1A40:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001A40                                         ; register_tm_clones+32↑j
.text:0000000000001A40                 pop     rbp
.text:0000000000001A41                 retn
.text:0000000000001A41 register_tm_clones endp
.text:0000000000001A41
.text:0000000000001A41 ; ---------------------------------------------------------------------------
.text:0000000000001A42                 align 10h
.text:0000000000001A50
.text:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A50
.text:0000000000001A50 ; Attributes: info_from_lumina
.text:0000000000001A50
.text:0000000000001A50 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001A50                 cmp     cs:completed_7697, 0
.text:0000000000001A57                 jnz     short locret_1A88
.text:0000000000001A59                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001A61                 push    rbp
.text:0000000000001A62                 mov     rbp, rsp
.text:0000000000001A65                 jz      short loc_1A73
.text:0000000000001A67                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001A6E                 call    __cxa_finalize
.text:0000000000001A73
.text:0000000000001A73 loc_1A73:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001A73                 call    deregister_tm_clones
.text:0000000000001A78                 mov     cs:completed_7697, 1
.text:0000000000001A7F                 pop     rbp
.text:0000000000001A80                 retn
.text:0000000000001A80 ; ---------------------------------------------------------------------------
.text:0000000000001A81                 align 8
.text:0000000000001A88
.text:0000000000001A88 locret_1A88:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001A88                 rep retn
.text:0000000000001A88 __do_global_dtors_aux endp
.text:0000000000001A88
.text:0000000000001A88 ; ---------------------------------------------------------------------------
.text:0000000000001A8A                 align 10h
.text:0000000000001A90
.text:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A90
.text:0000000000001A90 ; Attributes: bp-based frame
.text:0000000000001A90
.text:0000000000001A90 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001A90                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001A90                 push    rbp
.text:0000000000001A91                 mov     rbp, rsp
.text:0000000000001A94                 pop     rbp
.text:0000000000001A95                 jmp     register_tm_clones
.text:0000000000001A95 frame_dummy     endp
.text:0000000000001A95
.text:0000000000001A95 ; ---------------------------------------------------------------------------
.text:0000000000001A9A                 align 20h
.text:0000000000001AA0
.text:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AA0
.text:0000000000001AA0
.text:0000000000001AA0 logical_getcwd  proc near               ; CODE XREF: main+F8↑p
.text:0000000000001AA0
.text:0000000000001AA0 var_148         = qword ptr -148h
.text:0000000000001AA0 var_140         = qword ptr -140h
.text:0000000000001AA0 stat_buf        = stat ptr -0B8h
.text:0000000000001AA0 var_20          = qword ptr -20h
.text:0000000000001AA0
.text:0000000000001AA0 ; __unwind {
.text:0000000000001AA0                 push    rbp
.text:0000000000001AA1                 push    rbx
.text:0000000000001AA2                 lea     rdi, aPwd_0     ; "PWD"
.text:0000000000001AA9                 sub     rsp, 138h
.text:0000000000001AB0                 mov     rax, fs:28h
.text:0000000000001AB9                 mov     [rsp+148h+var_20], rax
.text:0000000000001AC1                 xor     eax, eax
.text:0000000000001AC3                 call    _getenv
.text:0000000000001AC8                 test    rax, rax
.text:0000000000001ACB                 jz      short loc_1B20
.text:0000000000001ACD                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000001AD0                 mov     rbp, rax
.text:0000000000001AD3                 jnz     short loc_1B20
.text:0000000000001AD5                 mov     rdi, rax
.text:0000000000001AD8                 lea     rbx, needle     ; "/."
.text:0000000000001ADF                 jmp     short loc_1AEC
.text:0000000000001ADF ; ---------------------------------------------------------------------------
.text:0000000000001AE1                 align 8
.text:0000000000001AE8
.text:0000000000001AE8 loc_1AE8:                               ; CODE XREF: logical_getcwd+69↓j
.text:0000000000001AE8                                         ; logical_getcwd+76↓j
.text:0000000000001AE8                 lea     rdi, [rax+1]    ; haystack
.text:0000000000001AEC
.text:0000000000001AEC loc_1AEC:                               ; CODE XREF: logical_getcwd+3F↑j
.text:0000000000001AEC                 mov     rsi, rbx        ; needle
.text:0000000000001AEF                 call    _strstr
.text:0000000000001AF4                 test    rax, rax
.text:0000000000001AF7                 jz      short loc_1B42
.text:0000000000001AF9                 movzx   edx, byte ptr [rax+2]
.text:0000000000001AFD                 test    dl, dl
.text:0000000000001AFF                 jz      short loc_1B20
.text:0000000000001B01                 cmp     dl, 2Fh ; '/'
.text:0000000000001B04                 jz      short loc_1B20
.text:0000000000001B06                 cmp     dl, 2Eh ; '.'
.text:0000000000001B09                 jnz     short loc_1AE8
.text:0000000000001B0B                 movzx   edx, byte ptr [rax+3]
.text:0000000000001B0F                 test    dl, dl
.text:0000000000001B11                 jz      short loc_1B20
.text:0000000000001B13                 cmp     dl, 2Fh ; '/'
.text:0000000000001B16                 jnz     short loc_1AE8
.text:0000000000001B18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000001B20
.text:0000000000001B20 loc_1B20:                               ; CODE XREF: logical_getcwd+2B↑j
.text:0000000000001B20                                         ; logical_getcwd+33↑j ...
.text:0000000000001B20                 xor     ebp, ebp
.text:0000000000001B22
.text:0000000000001B22 loc_1B22:                               ; CODE XREF: logical_getcwd+EE↓j
.text:0000000000001B22                 mov     rcx, [rsp+148h+var_20]
.text:0000000000001B2A                 xor     rcx, fs:28h
.text:0000000000001B33                 mov     rax, rbp
.text:0000000000001B36                 jnz     short loc_1B92
.text:0000000000001B38                 add     rsp, 138h
.text:0000000000001B3F                 pop     rbx
.text:0000000000001B40                 pop     rbp
.text:0000000000001B41                 retn
.text:0000000000001B42 ; ---------------------------------------------------------------------------
.text:0000000000001B42
.text:0000000000001B42 loc_1B42:                               ; CODE XREF: logical_getcwd+57↑j
.text:0000000000001B42                 mov     rdx, rsp        ; stat_buf
.text:0000000000001B45                 mov     rsi, rbp        ; filename
.text:0000000000001B48                 mov     edi, 1          ; ver
.text:0000000000001B4D                 call    ___xstat
.text:0000000000001B52                 test    eax, eax
.text:0000000000001B54                 jnz     short loc_1B20
.text:0000000000001B56                 lea     rdx, [rsp+148h+stat_buf] ; stat_buf
.text:0000000000001B5E                 lea     rsi, path+1     ; filename
.text:0000000000001B65                 mov     edi, 1          ; ver
.text:0000000000001B6A                 call    ___xstat
.text:0000000000001B6F                 test    eax, eax
.text:0000000000001B71                 jnz     short loc_1B20
.text:0000000000001B73                 mov     rax, [rsp+148h+stat_buf.st_ino]
.text:0000000000001B7B                 cmp     [rsp+148h+var_140], rax
.text:0000000000001B80                 jnz     short loc_1B20
.text:0000000000001B82                 mov     rax, [rsp+148h+stat_buf.st_dev]
.text:0000000000001B8A                 cmp     [rsp+148h+var_148], rax
.text:0000000000001B8E                 jz      short loc_1B22
.text:0000000000001B90                 jmp     short loc_1B20
.text:0000000000001B92 ; ---------------------------------------------------------------------------
.text:0000000000001B92
.text:0000000000001B92 loc_1B92:                               ; CODE XREF: logical_getcwd+96↑j
.text:0000000000001B92                 call    ___stack_chk_fail
.text:0000000000001B92 ; } // starts at 1AA0
.text:0000000000001B92 logical_getcwd  endp
.text:0000000000001B92
.text:0000000000001B92 ; ---------------------------------------------------------------------------
.text:0000000000001B97                 align 20h
.text:0000000000001BA0
.text:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BA0
.text:0000000000001BA0
.text:0000000000001BA0 nth_parent      proc near               ; CODE XREF: robust_getcwd+27A↓p
.text:0000000000001BA0                                         ; robust_getcwd+395↓p ...
.text:0000000000001BA0 ; __unwind {
.text:0000000000001BA0                 push    rbp
.text:0000000000001BA1                 push    rbx
.text:0000000000001BA2                 mov     eax, 3
.text:0000000000001BA7                 mov     rbp, rdi
.text:0000000000001BAA                 sub     rsp, 8
.text:0000000000001BAE                 mul     rdi
.text:0000000000001BB1                 jo      short loc_1C16
.text:0000000000001BB3                 xor     ecx, ecx
.text:0000000000001BB5
.text:0000000000001BB5 loc_1BB5:                               ; CODE XREF: nth_parent+7B↓j
.text:0000000000001BB5                 test    rax, rax
.text:0000000000001BB8                 js      short loc_1C1D
.text:0000000000001BBA                 test    rcx, rcx
.text:0000000000001BBD                 jnz     short loc_1C1D
.text:0000000000001BBF                 lea     rbx, [rbp+rbp*2+0]
.text:0000000000001BC4                 mov     rdi, rbx
.text:0000000000001BC7                 call    xmalloc
.text:0000000000001BCC                 test    rbp, rbp
.text:0000000000001BCF                 jz      short loc_1C08
.text:0000000000001BD1                 lea     rdi, [rax+rbx]
.text:0000000000001BD5                 mov     rdx, rax
.text:0000000000001BD8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000001BE0
.text:0000000000001BE0 loc_1BE0:                               ; CODE XREF: nth_parent+54↓j
.text:0000000000001BE0                 mov     ecx, 2E2Eh
.text:0000000000001BE5                 mov     byte ptr [rdx+2], 2Fh ; '/'
.text:0000000000001BE9                 add     rdx, 3
.text:0000000000001BED                 mov     [rdx-3], cx
.text:0000000000001BF1                 cmp     rdx, rdi
.text:0000000000001BF4                 jnz     short loc_1BE0
.text:0000000000001BF6                 mov     byte ptr [rdi-1], 0
.text:0000000000001BFA                 add     rsp, 8
.text:0000000000001BFE                 pop     rbx
.text:0000000000001BFF                 pop     rbp
.text:0000000000001C00                 retn
.text:0000000000001C00 ; ---------------------------------------------------------------------------
.text:0000000000001C01                 align 8
.text:0000000000001C08
.text:0000000000001C08 loc_1C08:                               ; CODE XREF: nth_parent+2F↑j
.text:0000000000001C08                 mov     rdi, rax
.text:0000000000001C0B                 mov     byte ptr [rdi-1], 0
.text:0000000000001C0F                 add     rsp, 8
.text:0000000000001C13                 pop     rbx
.text:0000000000001C14                 pop     rbp
.text:0000000000001C15                 retn
.text:0000000000001C16 ; ---------------------------------------------------------------------------
.text:0000000000001C16
.text:0000000000001C16 loc_1C16:                               ; CODE XREF: nth_parent+11↑j
.text:0000000000001C16                 mov     ecx, 1
.text:0000000000001C1B                 jmp     short loc_1BB5
.text:0000000000001C1D ; ---------------------------------------------------------------------------
.text:0000000000001C1D
.text:0000000000001C1D loc_1C1D:                               ; CODE XREF: nth_parent+18↑j
.text:0000000000001C1D                                         ; nth_parent+1D↑j
.text:0000000000001C1D                 call    xalloc_die
.text:0000000000001C1D ; } // starts at 1BA0
.text:0000000000001C1D nth_parent      endp
.text:0000000000001C1D
.text:0000000000001C1D ; ---------------------------------------------------------------------------
.text:0000000000001C22                 align 10h
.text:0000000000001C30
.text:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C30
.text:0000000000001C30
.text:0000000000001C30 file_name_prepend proc near             ; CODE XREF: robust_getcwd+1A1↓p
.text:0000000000001C30                                         ; robust_getcwd+356↓p
.text:0000000000001C30
.text:0000000000001C30 ptr             = qword ptr -40h
.text:0000000000001C30
.text:0000000000001C30 ; __unwind {
.text:0000000000001C30                 push    r15
.text:0000000000001C32                 push    r14
.text:0000000000001C34                 mov     r14, rsi
.text:0000000000001C37                 push    r13
.text:0000000000001C39                 push    r12
.text:0000000000001C3B                 mov     r13, rdx
.text:0000000000001C3E                 push    rbp
.text:0000000000001C3F                 push    rbx
.text:0000000000001C40                 mov     rbx, rdi
.text:0000000000001C43                 sub     rsp, 18h
.text:0000000000001C47                 mov     rax, [rdi+10h]
.text:0000000000001C4B                 mov     r12, rax
.text:0000000000001C4E                 sub     r12, [rdi]
.text:0000000000001C51                 lea     rdi, [rdx+1]
.text:0000000000001C55                 cmp     rdi, r12
.text:0000000000001C58                 jbe     short loc_1CCC
.text:0000000000001C5A                 add     rdi, [rbx+8]
.text:0000000000001C5E                 mov     eax, 2
.text:0000000000001C63                 xor     ecx, ecx
.text:0000000000001C65                 mul     rdi
.text:0000000000001C68                 jo      loc_1CFD
.text:0000000000001C6E
.text:0000000000001C6E loc_1C6E:                               ; CODE XREF: file_name_prepend+D2↓j
.text:0000000000001C6E                 test    rax, rax
.text:0000000000001C71                 js      loc_1D07
.text:0000000000001C77                 test    rcx, rcx
.text:0000000000001C7A                 jnz     loc_1D07
.text:0000000000001C80                 lea     rbp, [rdi+rdi]
.text:0000000000001C84                 mov     rdi, rbp
.text:0000000000001C87                 call    xmalloc
.text:0000000000001C8C                 mov     rdx, [rbx+8]
.text:0000000000001C90                 mov     rcx, [rbx]
.text:0000000000001C93                 mov     rdi, rbp
.text:0000000000001C96                 mov     r15, rax
.text:0000000000001C99                 sub     rdx, r12        ; n
.text:0000000000001C9C                 lea     rsi, [rcx+r12]  ; src
.text:0000000000001CA0                 mov     [rsp+48h+ptr], rcx
.text:0000000000001CA5                 sub     rdi, rdx
.text:0000000000001CA8                 add     rdi, rax        ; dest
.text:0000000000001CAB                 mov     [rbx+10h], rdi
.text:0000000000001CAF                 call    _memcpy
.text:0000000000001CB4                 mov     rcx, [rsp+48h+ptr]
.text:0000000000001CB9                 mov     rdi, rcx        ; ptr
.text:0000000000001CBC                 call    _free
.text:0000000000001CC1                 mov     rax, [rbx+10h]
.text:0000000000001CC5                 mov     [rbx], r15
.text:0000000000001CC8                 mov     [rbx+8], rbp
.text:0000000000001CCC
.text:0000000000001CCC loc_1CCC:                               ; CODE XREF: file_name_prepend+28↑j
.text:0000000000001CCC                 mov     rdx, r13
.text:0000000000001CCF                 mov     rsi, r14        ; src
.text:0000000000001CD2                 not     rdx
.text:0000000000001CD5                 add     rax, rdx
.text:0000000000001CD8                 mov     rdx, r13        ; n
.text:0000000000001CDB                 mov     [rbx+10h], rax
.text:0000000000001CDF                 mov     byte ptr [rax], 2Fh ; '/'
.text:0000000000001CE2                 mov     rdi, [rbx+10h]
.text:0000000000001CE6                 add     rsp, 18h
.text:0000000000001CEA                 pop     rbx
.text:0000000000001CEB                 pop     rbp
.text:0000000000001CEC                 pop     r12
.text:0000000000001CEE                 pop     r13
.text:0000000000001CF0                 pop     r14
.text:0000000000001CF2                 pop     r15
.text:0000000000001CF4                 add     rdi, 1          ; dest
.text:0000000000001CF8                 jmp     _memcpy
.text:0000000000001CFD ; ---------------------------------------------------------------------------
.text:0000000000001CFD
.text:0000000000001CFD loc_1CFD:                               ; CODE XREF: file_name_prepend+38↑j
.text:0000000000001CFD                 mov     ecx, 1
.text:0000000000001D02                 jmp     loc_1C6E
.text:0000000000001D07 ; ---------------------------------------------------------------------------
.text:0000000000001D07
.text:0000000000001D07 loc_1D07:                               ; CODE XREF: file_name_prepend+41↑j
.text:0000000000001D07                                         ; file_name_prepend+4A↑j
.text:0000000000001D07                 call    xalloc_die
.text:0000000000001D07 ; } // starts at 1C30
.text:0000000000001D07 file_name_prepend endp
.text:0000000000001D07
.text:0000000000001D07 ; ---------------------------------------------------------------------------
.text:0000000000001D0C                 align 10h
.text:0000000000001D10
.text:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D10
.text:0000000000001D10
.text:0000000000001D10 robust_getcwd   proc near               ; CODE XREF: main+188↑p
.text:0000000000001D10
.text:0000000000001D10 var_238         = qword ptr -238h
.text:0000000000001D10 var_230         = qword ptr -230h
.text:0000000000001D10 var_228         = qword ptr -228h
.text:0000000000001D10 var_220         = qword ptr -220h
.text:0000000000001D10 var_218         = qword ptr -218h
.text:0000000000001D10 var_210         = qword ptr -210h
.text:0000000000001D10 var_208         = byte ptr -208h
.text:0000000000001D10 stat_buf        = stat ptr -1F8h
.text:0000000000001D10 var_168         = xmmword ptr -168h
.text:0000000000001D10 var_158         = xmmword ptr -158h
.text:0000000000001D10 var_148         = xmmword ptr -148h
.text:0000000000001D10 var_138         = xmmword ptr -138h
.text:0000000000001D10 var_128         = xmmword ptr -128h
.text:0000000000001D10 var_118         = xmmword ptr -118h
.text:0000000000001D10 var_108         = xmmword ptr -108h
.text:0000000000001D10 var_F8          = xmmword ptr -0F8h
.text:0000000000001D10 var_E8          = xmmword ptr -0E8h
.text:0000000000001D10 var_D8          = qword ptr -0D8h
.text:0000000000001D10 var_D0          = qword ptr -0D0h
.text:0000000000001D10 var_40          = qword ptr -40h
.text:0000000000001D10
.text:0000000000001D10 ; __unwind {
.text:0000000000001D10                 push    r15
.text:0000000000001D12                 push    r14
.text:0000000000001D14                 push    r13
.text:0000000000001D16                 push    r12
.text:0000000000001D18                 push    rbp
.text:0000000000001D19                 push    rbx
.text:0000000000001D1A                 sub     rsp, 208h
.text:0000000000001D21                 mov     [rsp+238h+var_210], rdi
.text:0000000000001D26                 lea     rdi, [rsp+238h+var_208]
.text:0000000000001D2B                 mov     rax, fs:28h
.text:0000000000001D34                 mov     [rsp+238h+var_40], rax
.text:0000000000001D3C                 xor     eax, eax
.text:0000000000001D3E                 call    get_root_dev_ino
.text:0000000000001D43                 test    rax, rax
.text:0000000000001D46                 mov     [rsp+238h+var_220], rax
.text:0000000000001D4B                 jz      loc_21E5
.text:0000000000001D51                 lea     rdx, [rsp+238h+stat_buf] ; stat_buf
.text:0000000000001D56                 lea     rsi, path+1     ; filename
.text:0000000000001D5D                 mov     edi, 1          ; ver
.text:0000000000001D62                 call    ___xstat
.text:0000000000001D67                 test    eax, eax
.text:0000000000001D69                 js      loc_215E
.text:0000000000001D6F                 lea     rax, [rsp+238h+var_168]
.text:0000000000001D77                 mov     [rsp+238h+var_230], 1
.text:0000000000001D80                 mov     [rsp+238h+var_218], rax
.text:0000000000001D85                 lea     rax, [rsp+238h+var_D8]
.text:0000000000001D8D                 mov     [rsp+238h+var_238], rax
.text:0000000000001D91                 nop     dword ptr [rax+00000000h]
.text:0000000000001D98
.text:0000000000001D98 loc_1D98:                               ; CODE XREF: robust_getcwd+24D↓j
.text:0000000000001D98                 mov     rax, [rsp+238h+var_220]
.text:0000000000001D9D                 mov     rcx, [rax]
.text:0000000000001DA0                 cmp     [rsp+238h+stat_buf.st_ino], rcx
.text:0000000000001DA5                 jnz     short loc_1DB6
.text:0000000000001DA7                 mov     rax, [rax+8]
.text:0000000000001DAB                 cmp     [rsp+238h+stat_buf.st_dev], rax
.text:0000000000001DB0                 jz      loc_204A
.text:0000000000001DB6
.text:0000000000001DB6 loc_1DB6:                               ; CODE XREF: robust_getcwd+95↑j
.text:0000000000001DB6                 mov     rax, [rsp+238h+var_230]
.text:0000000000001DBB                 lea     rdi, path       ; ".."
.text:0000000000001DC2                 add     rax, 1
.text:0000000000001DC6                 mov     [rsp+238h+var_228], rax
.text:0000000000001DCB                 call    _opendir
.text:0000000000001DD0                 test    rax, rax
.text:0000000000001DD3                 mov     rbx, rax
.text:0000000000001DD6                 jz      loc_21A1
.text:0000000000001DDC                 mov     rdi, rax        ; dirp
.text:0000000000001DDF                 call    _dirfd
.text:0000000000001DE4                 test    eax, eax
.text:0000000000001DE6                 mov     ebp, eax
.text:0000000000001DE8                 js      loc_2015
.text:0000000000001DEE                 mov     edi, eax        ; fd
.text:0000000000001DF0                 call    _fchdir
.text:0000000000001DF5                 test    eax, eax
.text:0000000000001DF7                 js      loc_20DD
.text:0000000000001DFD                 mov     rdx, [rsp+238h+var_218] ; stat_buf
.text:0000000000001E02                 mov     esi, ebp        ; fildes
.text:0000000000001E04                 mov     edi, 1          ; ver
.text:0000000000001E09                 call    ___fxstat
.text:0000000000001E0E                 shr     eax, 1Fh
.text:0000000000001E11                 mov     r12d, eax
.text:0000000000001E14
.text:0000000000001E14 loc_1E14:                               ; CODE XREF: robust_getcwd+335↓j
.text:0000000000001E14                 call    ___errno_location
.text:0000000000001E19                 test    r12b, r12b
.text:0000000000001E1C                 mov     rbp, rax
.text:0000000000001E1F                 jnz     loc_2121
.text:0000000000001E25                 mov     r14, qword ptr [rsp+238h+var_168]
.text:0000000000001E2D                 mov     r13, [rsp+238h+stat_buf.st_dev]
.text:0000000000001E32                 cmp     r14, r13
.text:0000000000001E35                 setnz   r12b
.text:0000000000001E39                 nop     dword ptr [rax+00000000h]
.text:0000000000001E40
.text:0000000000001E40 loc_1E40:                               ; CODE XREF: robust_getcwd+18C↓j
.text:0000000000001E40                                         ; robust_getcwd+2CB↓j ...
.text:0000000000001E40                 mov     dword ptr [rbp+0], 0
.text:0000000000001E47                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001E50
.text:0000000000001E50 loc_1E50:                               ; CODE XREF: robust_getcwd+16B↓j
.text:0000000000001E50                                         ; robust_getcwd+170↓j
.text:0000000000001E50                 mov     rdi, rbx        ; dirp
.text:0000000000001E53                 call    _readdir
.text:0000000000001E58                 test    rax, rax
.text:0000000000001E5B                 jz      loc_1F68
.text:0000000000001E61                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:0000000000001E65                 lea     r15, [rax+13h]
.text:0000000000001E69                 jnz     short loc_1E82
.text:0000000000001E6B                 xor     edx, edx
.text:0000000000001E6D                 cmp     byte ptr [rax+14h], 2Eh ; '.'
.text:0000000000001E71                 setz    dl
.text:0000000000001E74                 movzx   edx, byte ptr [rax+rdx+14h]
.text:0000000000001E79                 test    dl, dl
.text:0000000000001E7B                 jz      short loc_1E50
.text:0000000000001E7D                 cmp     dl, 2Fh ; '/'
.text:0000000000001E80                 jz      short loc_1E50
.text:0000000000001E82
.text:0000000000001E82 loc_1E82:                               ; CODE XREF: robust_getcwd+159↑j
.text:0000000000001E82                 mov     rax, [rax]
.text:0000000000001E85                 test    rax, rax
.text:0000000000001E88                 jz      loc_1FC8
.text:0000000000001E8E                 test    r12b, r12b
.text:0000000000001E91                 jnz     loc_1FC8
.text:0000000000001E97                 cmp     rax, [rsp+238h+stat_buf.st_ino]
.text:0000000000001E9C                 jnz     short loc_1E40
.text:0000000000001E9E
.text:0000000000001E9E loc_1E9E:                               ; CODE XREF: robust_getcwd+2E7↓j
.text:0000000000001E9E                                         ; robust_getcwd+300↓j
.text:0000000000001E9E                 mov     rdi, r15        ; s
.text:0000000000001EA1                 call    _strlen
.text:0000000000001EA6                 mov     rdi, [rsp+238h+var_210]
.text:0000000000001EAB                 mov     rdx, rax
.text:0000000000001EAE                 mov     rsi, r15
.text:0000000000001EB1                 call    file_name_prepend
.text:0000000000001EB6                 mov     rdi, rbx        ; dirp
.text:0000000000001EB9                 call    _closedir
.text:0000000000001EBE                 test    eax, eax
.text:0000000000001EC0                 jnz     loc_20A0
.text:0000000000001EC6                 movdqa  xmm0, [rsp+238h+var_168]
.text:0000000000001ECF                 mov     rax, [rsp+238h+var_228]
.text:0000000000001ED4                 movaps  xmmword ptr [rsp+238h+stat_buf.st_dev], xmm0
.text:0000000000001ED9                 movdqa  xmm0, [rsp+238h+var_158]
.text:0000000000001EE2                 mov     [rsp+238h+var_230], rax
.text:0000000000001EE7                 movaps  xmmword ptr [rsp+238h+stat_buf.st_nlink], xmm0
.text:0000000000001EEC                 movdqa  xmm0, [rsp+238h+var_148]
.text:0000000000001EF5                 movaps  xmmword ptr [rsp+238h+stat_buf.st_gid], xmm0
.text:0000000000001EFA                 movdqa  xmm0, [rsp+238h+var_138]
.text:0000000000001F03                 movaps  xmmword ptr [rsp+238h+stat_buf.st_size], xmm0
.text:0000000000001F08                 movdqa  xmm0, [rsp+238h+var_128]
.text:0000000000001F11                 movaps  xmmword ptr [rsp+238h+stat_buf.st_blocks], xmm0
.text:0000000000001F19                 movdqa  xmm0, [rsp+238h+var_118]
.text:0000000000001F22                 movaps  xmmword ptr [rsp+238h+stat_buf.st_atim.tv_nsec], xmm0
.text:0000000000001F2A                 movdqa  xmm0, [rsp+238h+var_108]
.text:0000000000001F33                 movaps  xmmword ptr [rsp+238h+stat_buf.st_mtim.tv_nsec], xmm0
.text:0000000000001F3B                 movdqa  xmm0, [rsp+238h+var_F8]
.text:0000000000001F44                 movaps  xmmword ptr [rsp+238h+stat_buf.st_ctim.tv_nsec], xmm0
.text:0000000000001F4C                 movdqa  xmm0, [rsp+238h+var_E8]
.text:0000000000001F55                 movaps  xmmword ptr [rsp+238h+stat_buf.__unused+8], xmm0
.text:0000000000001F5D                 jmp     loc_1D98
.text:0000000000001F5D ; ---------------------------------------------------------------------------
.text:0000000000001F62                 align 8
.text:0000000000001F68
.text:0000000000001F68 loc_1F68:                               ; CODE XREF: robust_getcwd+14B↑j
.text:0000000000001F68                 mov     r12d, [rbp+0]
.text:0000000000001F6C                 test    r12d, r12d
.text:0000000000001F6F                 jnz     loc_2094
.text:0000000000001F75                 mov     rdi, rbx        ; dirp
.text:0000000000001F78                 call    _closedir
.text:0000000000001F7D                 test    eax, eax
.text:0000000000001F7F                 jnz     loc_20A0
.text:0000000000001F85                 mov     rdi, [rsp+238h+var_230]
.text:0000000000001F8A                 call    nth_parent
.text:0000000000001F8F                 mov     rdi, rax
.text:0000000000001F92                 call    quote
.text:0000000000001F97                 lea     rsi, aCouldnTFindDir ; "couldn't find directory entry in %s wit"...
.text:0000000000001F9E                 mov     rbx, rax
.text:0000000000001FA1                 mov     edx, 5          ; category
.text:0000000000001FA6                 xor     edi, edi        ; domainname
.text:0000000000001FA8                 call    _dcgettext
.text:0000000000001FAD                 mov     rcx, rbx
.text:0000000000001FB0                 mov     rdx, rax        ; format
.text:0000000000001FB3                 xor     esi, esi        ; errnum
.text:0000000000001FB5                 mov     edi, 1          ; status
.text:0000000000001FBA                 xor     eax, eax
.text:0000000000001FBC                 call    _error
.text:0000000000001FC1                 nop     dword ptr [rax+00000000h]
.text:0000000000001FC8
.text:0000000000001FC8 loc_1FC8:                               ; CODE XREF: robust_getcwd+178↑j
.text:0000000000001FC8                                         ; robust_getcwd+181↑j
.text:0000000000001FC8                 mov     rdx, [rsp+238h+var_238] ; stat_buf
.text:0000000000001FCC                 mov     rsi, r15        ; filename
.text:0000000000001FCF                 mov     edi, 1          ; ver
.text:0000000000001FD4                 call    ___lxstat
.text:0000000000001FD9                 test    eax, eax
.text:0000000000001FDB                 js      loc_1E40
.text:0000000000001FE1                 mov     rax, [rsp+238h+stat_buf.st_ino]
.text:0000000000001FE6                 cmp     [rsp+238h+var_D0], rax
.text:0000000000001FEE                 jnz     loc_1E40
.text:0000000000001FF4                 cmp     r14, r13
.text:0000000000001FF7                 jz      loc_1E9E
.text:0000000000001FFD                 mov     rax, [rsp+238h+stat_buf.st_dev]
.text:0000000000002002                 cmp     [rsp+238h+var_D8], rax
.text:000000000000200A                 jnz     loc_1E40
.text:0000000000002010                 jmp     loc_1E9E
.text:0000000000002015 ; ---------------------------------------------------------------------------
.text:0000000000002015
.text:0000000000002015 loc_2015:                               ; CODE XREF: robust_getcwd+D8↑j
.text:0000000000002015                 lea     rdi, path       ; ".."
.text:000000000000201C                 call    _chdir
.text:0000000000002021                 test    eax, eax
.text:0000000000002023                 js      loc_20DD
.text:0000000000002029                 mov     rdx, [rsp+238h+var_218] ; stat_buf
.text:000000000000202E                 lea     rsi, path+1     ; filename
.text:0000000000002035                 mov     edi, 1          ; ver
.text:000000000000203A                 call    ___xstat
.text:000000000000203F                 shr     eax, 1Fh
.text:0000000000002042                 mov     r12d, eax
.text:0000000000002045                 jmp     loc_1E14
.text:000000000000204A ; ---------------------------------------------------------------------------
.text:000000000000204A
.text:000000000000204A loc_204A:                               ; CODE XREF: robust_getcwd+A0↑j
.text:000000000000204A                 mov     rax, [rsp+238h+var_210]
.text:000000000000204F                 mov     rax, [rax+10h]
.text:0000000000002053                 cmp     byte ptr [rax], 0
.text:0000000000002056                 jnz     short loc_206B
.text:0000000000002058                 mov     rdi, [rsp+238h+var_210]
.text:000000000000205D                 lea     rsi, aUsageSOption+16h ; ""
.text:0000000000002064                 xor     edx, edx
.text:0000000000002066                 call    file_name_prepend
.text:000000000000206B
.text:000000000000206B loc_206B:                               ; CODE XREF: robust_getcwd+346↑j
.text:000000000000206B                 mov     rax, [rsp+238h+var_40]
.text:0000000000002073                 xor     rax, fs:28h
.text:000000000000207C                 jnz     loc_2228
.text:0000000000002082                 add     rsp, 208h
.text:0000000000002089                 pop     rbx
.text:000000000000208A                 pop     rbp
.text:000000000000208B                 pop     r12
.text:000000000000208D                 pop     r13
.text:000000000000208F                 pop     r14
.text:0000000000002091                 pop     r15
.text:0000000000002093                 retn
.text:0000000000002094 ; ---------------------------------------------------------------------------
.text:0000000000002094
.text:0000000000002094 loc_2094:                               ; CODE XREF: robust_getcwd+25F↑j
.text:0000000000002094                 mov     rdi, rbx        ; dirp
.text:0000000000002097                 call    _closedir
.text:000000000000209C                 mov     [rbp+0], r12d
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: robust_getcwd+1B0↑j
.text:00000000000020A0                                         ; robust_getcwd+26F↑j
.text:00000000000020A0                 mov     rdi, [rsp+238h+var_230]
.text:00000000000020A5                 call    nth_parent
.text:00000000000020AA                 mov     rdi, rax
.text:00000000000020AD                 call    quote
.text:00000000000020B2                 lea     rsi, aReadingDirecto ; "reading directory %s"
.text:00000000000020B9                 mov     edx, 5          ; category
.text:00000000000020BE                 xor     edi, edi        ; domainname
.text:00000000000020C0                 mov     rbx, rax
.text:00000000000020C3                 call    _dcgettext
.text:00000000000020C8                 mov     esi, [rbp+0]    ; errnum
.text:00000000000020CB                 mov     rdx, rax        ; format
.text:00000000000020CE                 mov     rcx, rbx
.text:00000000000020D1                 mov     edi, 1          ; status
.text:00000000000020D6                 xor     eax, eax
.text:00000000000020D8                 call    _error
.text:00000000000020DD
.text:00000000000020DD loc_20DD:                               ; CODE XREF: robust_getcwd+E7↑j
.text:00000000000020DD                                         ; robust_getcwd+313↑j
.text:00000000000020DD                 mov     rdi, [rsp+238h+var_230]
.text:00000000000020E2                 call    nth_parent
.text:00000000000020E7                 mov     rdi, rax
.text:00000000000020EA                 call    quote
.text:00000000000020EF                 lea     rsi, aFailedToChdirT ; "failed to chdir to %s"
.text:00000000000020F6                 mov     edx, 5          ; category
.text:00000000000020FB                 xor     edi, edi        ; domainname
.text:00000000000020FD                 mov     rbp, rax
.text:0000000000002100                 call    _dcgettext
.text:0000000000002105                 mov     rbx, rax
.text:0000000000002108                 call    ___errno_location
.text:000000000000210D                 mov     esi, [rax]      ; errnum
.text:000000000000210F                 mov     rcx, rbp
.text:0000000000002112                 mov     rdx, rbx        ; format
.text:0000000000002115                 mov     edi, 1          ; status
.text:000000000000211A                 xor     eax, eax
.text:000000000000211C                 call    _error
.text:0000000000002121
.text:0000000000002121 loc_2121:                               ; CODE XREF: robust_getcwd+10F↑j
.text:0000000000002121                 mov     rdi, [rsp+238h+var_230]
.text:0000000000002126                 call    nth_parent
.text:000000000000212B                 mov     rdi, rax
.text:000000000000212E                 call    quote
.text:0000000000002133                 lea     rsi, aFailedToStatS ; "failed to stat %s"
.text:000000000000213A                 mov     edx, 5          ; category
.text:000000000000213F                 xor     edi, edi        ; domainname
.text:0000000000002141                 mov     rbx, rax
.text:0000000000002144                 call    _dcgettext
.text:0000000000002149                 mov     esi, [rbp+0]    ; errnum
.text:000000000000214C                 mov     rdx, rax        ; format
.text:000000000000214F                 mov     rcx, rbx
.text:0000000000002152                 mov     edi, 1          ; status
.text:0000000000002157                 xor     eax, eax
.text:0000000000002159                 call    _error
.text:000000000000215E
.text:000000000000215E loc_215E:                               ; CODE XREF: robust_getcwd+59↑j
.text:000000000000215E                 lea     rsi, path+1     ; "."
.text:0000000000002165                 mov     edi, 4
.text:000000000000216A                 call    quotearg_style
.text:000000000000216F                 lea     rsi, aFailedToStatS ; "failed to stat %s"
.text:0000000000002176                 mov     edx, 5          ; category
.text:000000000000217B                 xor     edi, edi        ; domainname
.text:000000000000217D                 mov     rbp, rax
.text:0000000000002180                 call    _dcgettext
.text:0000000000002185                 mov     rbx, rax
.text:0000000000002188                 call    ___errno_location
.text:000000000000218D                 mov     esi, [rax]      ; errnum
.text:000000000000218F                 mov     rcx, rbp
.text:0000000000002192                 mov     rdx, rbx        ; format
.text:0000000000002195                 mov     edi, 1          ; status
.text:000000000000219A                 xor     eax, eax
.text:000000000000219C                 call    _error
.text:00000000000021A1
.text:00000000000021A1 loc_21A1:                               ; CODE XREF: robust_getcwd+C6↑j
.text:00000000000021A1                 mov     rdi, [rsp+238h+var_230]
.text:00000000000021A6                 call    nth_parent
.text:00000000000021AB                 mov     rdi, rax
.text:00000000000021AE                 call    quote
.text:00000000000021B3                 lea     rsi, aCannotOpenDire ; "cannot open directory %s"
.text:00000000000021BA                 mov     edx, 5          ; category
.text:00000000000021BF                 xor     edi, edi        ; domainname
.text:00000000000021C1                 mov     rbp, rax
.text:00000000000021C4                 call    _dcgettext
.text:00000000000021C9                 mov     rbx, rax
.text:00000000000021CC                 call    ___errno_location
.text:00000000000021D1                 mov     esi, [rax]      ; errnum
.text:00000000000021D3                 mov     rcx, rbp
.text:00000000000021D6                 mov     rdx, rbx        ; format
.text:00000000000021D9                 mov     edi, 1          ; status
.text:00000000000021DE                 xor     eax, eax
.text:00000000000021E0                 call    _error
.text:00000000000021E5
.text:00000000000021E5 loc_21E5:                               ; CODE XREF: robust_getcwd+3B↑j
.text:00000000000021E5                 lea     rsi, aLibs+6    ; "/"
.text:00000000000021EC                 mov     edi, 4
.text:00000000000021F1                 call    quotearg_style
.text:00000000000021F6                 lea     rsi, aFailedToGetAtt ; "failed to get attributes of %s"
.text:00000000000021FD                 mov     edx, 5          ; category
.text:0000000000002202                 xor     edi, edi        ; domainname
.text:0000000000002204                 mov     rbp, rax
.text:0000000000002207                 call    _dcgettext
.text:000000000000220C                 mov     rbx, rax
.text:000000000000220F                 call    ___errno_location
.text:0000000000002214                 mov     esi, [rax]      ; errnum
.text:0000000000002216                 mov     rcx, rbp
.text:0000000000002219                 mov     rdx, rbx        ; format
.text:000000000000221C                 mov     edi, 1          ; status
.text:0000000000002221                 xor     eax, eax
.text:0000000000002223                 call    _error
.text:0000000000002228
.text:0000000000002228 loc_2228:                               ; CODE XREF: robust_getcwd+36C↑j
.text:0000000000002228                 call    ___stack_chk_fail
.text:0000000000002228 ; } // starts at 1D10
.text:0000000000002228 robust_getcwd   endp
.text:0000000000002228
.text:0000000000002228 ; ---------------------------------------------------------------------------
.text:000000000000222D                 align 10h
.text:0000000000002230
.text:0000000000002230 ; =============== S U B R O U T I N E =======================================
.text:0000000000002230
.text:0000000000002230 ; Attributes: noreturn
.text:0000000000002230
.text:0000000000002230 ; void __fastcall __noreturn usage(int status)
.text:0000000000002230                 public usage
.text:0000000000002230 usage           proc near               ; CODE XREF: main+1B0↑p
.text:0000000000002230                                         ; main+1B7↑p
.text:0000000000002230
.text:0000000000002230 var_A8          = qword ptr -0A8h
.text:0000000000002230 var_A0          = qword ptr -0A0h
.text:0000000000002230 var_98          = qword ptr -98h
.text:0000000000002230 var_90          = qword ptr -90h
.text:0000000000002230 var_88          = qword ptr -88h
.text:0000000000002230 var_80          = qword ptr -80h
.text:0000000000002230 var_78          = qword ptr -78h
.text:0000000000002230 var_70          = qword ptr -70h
.text:0000000000002230 var_68          = qword ptr -68h
.text:0000000000002230 var_60          = qword ptr -60h
.text:0000000000002230 var_58          = qword ptr -58h
.text:0000000000002230 var_50          = qword ptr -50h
.text:0000000000002230 var_48          = qword ptr -48h
.text:0000000000002230 var_40          = qword ptr -40h
.text:0000000000002230 var_30          = qword ptr -30h
.text:0000000000002230
.text:0000000000002230 ; __unwind {
.text:0000000000002230                 push    r13
.text:0000000000002232                 push    r12
.text:0000000000002234                 mov     edx, 5          ; category
.text:0000000000002239                 push    rbp
.text:000000000000223A                 push    rbx
.text:000000000000223B                 mov     ebp, edi
.text:000000000000223D                 sub     rsp, 88h
.text:0000000000002244                 mov     rbx, cs:program_name
.text:000000000000224B                 mov     rax, fs:28h
.text:0000000000002254                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002259                 xor     eax, eax
.text:000000000000225B                 test    edi, edi
.text:000000000000225D                 jz      short loc_228D
.text:000000000000225F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002266                 xor     edi, edi        ; domainname
.text:0000000000002268                 call    _dcgettext
.text:000000000000226D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002274                 mov     rdx, rax
.text:0000000000002277                 mov     rcx, rbx
.text:000000000000227A                 mov     esi, 1
.text:000000000000227F                 xor     eax, eax
.text:0000000000002281                 call    ___fprintf_chk
.text:0000000000002286
.text:0000000000002286 loc_2286:                               ; CODE XREF: usage+2EE↓j
.text:0000000000002286                 mov     edi, ebp        ; status
.text:0000000000002288                 call    _exit
.text:000000000000228D ; ---------------------------------------------------------------------------
.text:000000000000228D
.text:000000000000228D loc_228D:                               ; CODE XREF: usage+2D↑j
.text:000000000000228D                 lea     rsi, aUsageSOption ; "Usage: %s [OPTION]...\n"
.text:0000000000002294                 xor     edi, edi        ; domainname
.text:0000000000002296                 call    _dcgettext
.text:000000000000229B                 mov     rdx, rbx
.text:000000000000229E                 mov     rsi, rax
.text:00000000000022A1                 mov     edi, 1
.text:00000000000022A6                 xor     eax, eax
.text:00000000000022A8                 call    ___printf_chk
.text:00000000000022AD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000022B4                 lea     rsi, aPrintTheFullFi ; "Print the full filename of the current "...
.text:00000000000022BB                 mov     edx, 5          ; category
.text:00000000000022C0                 xor     edi, edi        ; domainname
.text:00000000000022C2                 call    _dcgettext
.text:00000000000022C7                 mov     rsi, rbx        ; stream
.text:00000000000022CA                 mov     rdi, rax        ; s
.text:00000000000022CD                 call    _fputs_unlocked
.text:00000000000022D2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000022D9                 lea     rsi, aLLogicalUsePwd ; "  -L, --logical   use PWD from environm"...
.text:00000000000022E0                 mov     edx, 5          ; category
.text:00000000000022E5                 xor     edi, edi        ; domainname
.text:00000000000022E7                 call    _dcgettext
.text:00000000000022EC                 mov     rsi, rbx        ; stream
.text:00000000000022EF                 mov     rdi, rax        ; s
.text:00000000000022F2                 call    _fputs_unlocked
.text:00000000000022F7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000022FE                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002305                 mov     edx, 5          ; category
.text:000000000000230A                 xor     edi, edi        ; domainname
.text:000000000000230C                 call    _dcgettext
.text:0000000000002311                 mov     rsi, rbx        ; stream
.text:0000000000002314                 mov     rdi, rax        ; s
.text:0000000000002317                 call    _fputs_unlocked
.text:000000000000231C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002323                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:000000000000232A                 mov     edx, 5          ; category
.text:000000000000232F                 xor     edi, edi        ; domainname
.text:0000000000002331                 call    _dcgettext
.text:0000000000002336                 mov     rsi, rbx        ; stream
.text:0000000000002339                 mov     rdi, rax        ; s
.text:000000000000233C                 call    _fputs_unlocked
.text:0000000000002341                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002348                 lea     rsi, aIfNoOptionIsSp ; "\nIf no option is specified, -P is assu"...
.text:000000000000234F                 mov     edx, 5          ; category
.text:0000000000002354                 xor     edi, edi        ; domainname
.text:0000000000002356                 call    _dcgettext
.text:000000000000235B                 mov     rsi, rbx        ; stream
.text:000000000000235E                 mov     rdi, rax        ; s
.text:0000000000002361                 lea     rbx, aPwd       ; "pwd"
.text:0000000000002368                 call    _fputs_unlocked
.text:000000000000236D                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:0000000000002374                 mov     edx, 5          ; category
.text:0000000000002379                 xor     edi, edi        ; domainname
.text:000000000000237B                 call    _dcgettext
.text:0000000000002380                 lea     rdx, aPwd       ; "pwd"
.text:0000000000002387                 mov     rsi, rax
.text:000000000000238A                 mov     edi, 1
.text:000000000000238F                 xor     eax, eax
.text:0000000000002391                 call    ___printf_chk
.text:0000000000002396                 lea     rax, asc_513F   ; "["
.text:000000000000239D                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000023A4                 mov     [rsp+0A8h+var_48], 0
.text:00000000000023AD                 mov     [rsp+0A8h+var_40], 0
.text:00000000000023B6                 mov     rdx, rsp
.text:00000000000023B9                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000023BD                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000023C4                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000023C9                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000023D0                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000023D5                 lea     rax, domainname ; "coreutils"
.text:00000000000023DC                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000023E1                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000023E8                 mov     [rsp+0A8h+var_98], rax
.text:00000000000023ED                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000023F4                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000023F9                 mov     [rsp+0A8h+var_90], rax
.text:00000000000023FE                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002405                 mov     [rsp+0A8h+var_88], rax
.text:000000000000240A                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002411                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002416                 mov     [rsp+0A8h+var_70], rax
.text:000000000000241B                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002420                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002425                 nop     dword ptr [rax]
.text:0000000000002428
.text:0000000000002428 loc_2428:                               ; CODE XREF: usage+215↓j
.text:0000000000002428                 add     rdx, 10h
.text:000000000000242C                 mov     rdi, [rdx]
.text:000000000000242F                 test    rdi, rdi
.text:0000000000002432                 jz      short loc_2447
.text:0000000000002434                 mov     ecx, 4
.text:0000000000002439                 mov     rsi, rbx
.text:000000000000243C                 repe cmpsb
.text:000000000000243E                 setnbe  al
.text:0000000000002441                 sbb     al, 0
.text:0000000000002443                 test    al, al
.text:0000000000002445                 jnz     short loc_2428
.text:0000000000002447
.text:0000000000002447 loc_2447:                               ; CODE XREF: usage+202↑j
.text:0000000000002447                 mov     r12, [rdx+8]
.text:000000000000244B                 xor     edi, edi        ; domainname
.text:000000000000244D                 mov     edx, 5          ; category
.text:0000000000002452                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002459                 test    r12, r12
.text:000000000000245C                 jz      loc_2523
.text:0000000000002462                 call    _dcgettext
.text:0000000000002467                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000246E                 lea     rdx, unk_51B5
.text:0000000000002475                 mov     rsi, rax
.text:0000000000002478                 mov     edi, 1
.text:000000000000247D                 xor     eax, eax
.text:000000000000247F                 call    ___printf_chk
.text:0000000000002484                 xor     esi, esi        ; locale
.text:0000000000002486                 mov     edi, 5          ; category
.text:000000000000248B                 call    _setlocale
.text:0000000000002490                 test    rax, rax
.text:0000000000002493                 jz      short loc_24B1
.text:0000000000002495                 lea     rsi, s2         ; "en_"
.text:000000000000249C                 mov     edx, 3          ; n
.text:00000000000024A1                 mov     rdi, rax        ; s1
.text:00000000000024A4                 call    _strncmp
.text:00000000000024A9                 test    eax, eax
.text:00000000000024AB                 jnz     loc_25B8
.text:00000000000024B1
.text:00000000000024B1 loc_24B1:                               ; CODE XREF: usage+263↑j
.text:00000000000024B1                                         ; usage+3AD↓j
.text:00000000000024B1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000024B8                 xor     edi, edi        ; domainname
.text:00000000000024BA                 mov     edx, 5          ; category
.text:00000000000024BF                 call    _dcgettext
.text:00000000000024C4                 lea     rcx, aPwd       ; "pwd"
.text:00000000000024CB                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000024D2                 mov     rsi, rax
.text:00000000000024D5                 mov     edi, 1
.text:00000000000024DA                 xor     eax, eax
.text:00000000000024DC                 call    ___printf_chk
.text:00000000000024E1                 cmp     r12, rbx
.text:00000000000024E4                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000024EB                 lea     rbx, aUsageSOption+16h ; ""
.text:00000000000024F2                 cmovz   rbx, rcx
.text:00000000000024F6
.text:00000000000024F6 loc_24F6:                               ; CODE XREF: usage+37C↓j
.text:00000000000024F6                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000024FD                 xor     edi, edi        ; domainname
.text:00000000000024FF                 mov     edx, 5          ; category
.text:0000000000002504                 call    _dcgettext
.text:0000000000002509                 mov     rcx, rbx
.text:000000000000250C                 mov     rsi, rax
.text:000000000000250F                 mov     rdx, r12
.text:0000000000002512                 mov     edi, 1
.text:0000000000002517                 xor     eax, eax
.text:0000000000002519                 call    ___printf_chk
.text:000000000000251E                 jmp     loc_2286
.text:0000000000002523 ; ---------------------------------------------------------------------------
.text:0000000000002523
.text:0000000000002523 loc_2523:                               ; CODE XREF: usage+22C↑j
.text:0000000000002523                 call    _dcgettext
.text:0000000000002528                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000252F                 lea     rdx, unk_51B5
.text:0000000000002536                 mov     rsi, rax
.text:0000000000002539                 mov     edi, 1
.text:000000000000253E                 xor     eax, eax
.text:0000000000002540                 call    ___printf_chk
.text:0000000000002545                 xor     esi, esi        ; locale
.text:0000000000002547                 mov     edi, 5          ; category
.text:000000000000254C                 call    _setlocale
.text:0000000000002551                 test    rax, rax
.text:0000000000002554                 jz      short loc_256E
.text:0000000000002556                 lea     rsi, s2         ; "en_"
.text:000000000000255D                 mov     edx, 3          ; n
.text:0000000000002562                 mov     rdi, rax        ; s1
.text:0000000000002565                 call    _strncmp
.text:000000000000256A                 test    eax, eax
.text:000000000000256C                 jnz     short loc_25B1
.text:000000000000256E
.text:000000000000256E loc_256E:                               ; CODE XREF: usage+324↑j
.text:000000000000256E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002575                 mov     edx, 5          ; category
.text:000000000000257A                 xor     edi, edi        ; domainname
.text:000000000000257C                 lea     r12, aPwd       ; "pwd"
.text:0000000000002583                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000258A                 call    _dcgettext
.text:000000000000258F                 lea     rcx, aPwd       ; "pwd"
.text:0000000000002596                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000259D                 mov     rsi, rax
.text:00000000000025A0                 mov     edi, 1
.text:00000000000025A5                 xor     eax, eax
.text:00000000000025A7                 call    ___printf_chk
.text:00000000000025AC                 jmp     loc_24F6
.text:00000000000025B1 ; ---------------------------------------------------------------------------
.text:00000000000025B1
.text:00000000000025B1 loc_25B1:                               ; CODE XREF: usage+33C↑j
.text:00000000000025B1                 lea     r12, aPwd       ; "pwd"
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: usage+27B↑j
.text:00000000000025B8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000025BF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000025C6                 xor     edi, edi        ; domainname
.text:00000000000025C8                 mov     edx, 5          ; category
.text:00000000000025CD                 call    _dcgettext
.text:00000000000025D2                 mov     rsi, r13        ; stream
.text:00000000000025D5                 mov     rdi, rax        ; s
.text:00000000000025D8                 call    _fputs_unlocked
.text:00000000000025DD                 jmp     loc_24B1
.text:00000000000025DD ; } // starts at 2230
.text:00000000000025DD usage           endp
.text:00000000000025DD
.text:00000000000025DD ; ---------------------------------------------------------------------------
.text:00000000000025E2                 align 10h
.text:00000000000025F0
.text:00000000000025F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025F0
.text:00000000000025F0
.text:00000000000025F0                 public close_stdout_set_file_name
.text:00000000000025F0 close_stdout_set_file_name proc near
.text:00000000000025F0 ; __unwind {
.text:00000000000025F0                 mov     cs:file_name, rdi
.text:00000000000025F7                 retn
.text:00000000000025F7 ; } // starts at 25F0
.text:00000000000025F7 close_stdout_set_file_name endp
.text:00000000000025F7
.text:00000000000025F7 ; ---------------------------------------------------------------------------
.text:00000000000025F8                 align 20h
.text:0000000000002600
.text:0000000000002600 ; =============== S U B R O U T I N E =======================================
.text:0000000000002600
.text:0000000000002600
.text:0000000000002600                 public close_stdout_set_ignore_EPIPE
.text:0000000000002600 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002600 ; __unwind {
.text:0000000000002600                 mov     cs:ignore_EPIPE, dil
.text:0000000000002607                 retn
.text:0000000000002607 ; } // starts at 2600
.text:0000000000002607 close_stdout_set_ignore_EPIPE endp
.text:0000000000002607
.text:0000000000002607 ; ---------------------------------------------------------------------------
.text:0000000000002608                 align 10h
.text:0000000000002610
.text:0000000000002610 ; =============== S U B R O U T I N E =======================================
.text:0000000000002610
.text:0000000000002610 ; Attributes: info_from_lumina
.text:0000000000002610
.text:0000000000002610 ; void __cdecl close_stdout()
.text:0000000000002610                 public close_stdout
.text:0000000000002610 close_stdout    proc near               ; DATA XREF: main+54↑o
.text:0000000000002610 ; __unwind {
.text:0000000000002610                 push    rbp
.text:0000000000002611                 push    rbx
.text:0000000000002612                 sub     rsp, 8
.text:0000000000002616                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000261D                 call    close_stream
.text:0000000000002622                 test    eax, eax
.text:0000000000002624                 jz      short loc_263C
.text:0000000000002626                 call    ___errno_location
.text:000000000000262B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002632                 mov     rbx, rax
.text:0000000000002635                 jz      short loc_2653
.text:0000000000002637                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000263A                 jnz     short loc_2653
.text:000000000000263C
.text:000000000000263C loc_263C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000263C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002643                 call    close_stream
.text:0000000000002648                 test    eax, eax
.text:000000000000264A                 jnz     short loc_2692
.text:000000000000264C                 add     rsp, 8
.text:0000000000002650                 pop     rbx
.text:0000000000002651                 pop     rbp
.text:0000000000002652                 retn
.text:0000000000002653 ; ---------------------------------------------------------------------------
.text:0000000000002653
.text:0000000000002653 loc_2653:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002653                                         ; close_stdout+2A↑j
.text:0000000000002653                 lea     rsi, aWriteError ; "write error"
.text:000000000000265A                 xor     edi, edi        ; domainname
.text:000000000000265C                 mov     edx, 5          ; category
.text:0000000000002661                 call    _dcgettext
.text:0000000000002666                 mov     rdi, cs:file_name
.text:000000000000266D                 mov     rbp, rax
.text:0000000000002670                 test    rdi, rdi
.text:0000000000002673                 jz      short loc_269D
.text:0000000000002675                 call    quotearg_colon
.text:000000000000267A                 mov     esi, [rbx]      ; errnum
.text:000000000000267C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002683                 mov     rcx, rax
.text:0000000000002686                 mov     r8, rbp
.text:0000000000002689                 xor     edi, edi        ; status
.text:000000000000268B                 xor     eax, eax
.text:000000000000268D                 call    _error
.text:0000000000002692
.text:0000000000002692 loc_2692:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002692                                         ; close_stdout+A2↓j
.text:0000000000002692                 mov     edi, cs:exit_failure ; status
.text:0000000000002698                 call    __exit
.text:000000000000269D ; ---------------------------------------------------------------------------
.text:000000000000269D
.text:000000000000269D loc_269D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000269D                 mov     esi, [rbx]      ; errnum
.text:000000000000269F                 lea     rdx, format+4   ; format
.text:00000000000026A6                 mov     rcx, rax
.text:00000000000026A9                 xor     edi, edi        ; status
.text:00000000000026AB                 xor     eax, eax
.text:00000000000026AD                 call    _error
.text:00000000000026B2                 jmp     short loc_2692
.text:00000000000026B2 ; } // starts at 2610
.text:00000000000026B2 close_stdout    endp
.text:00000000000026B2
.text:00000000000026B2 ; ---------------------------------------------------------------------------
.text:00000000000026B4                 align 20h
.text:00000000000026C0
.text:00000000000026C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026C0
.text:00000000000026C0
.text:00000000000026C0                 public set_program_name
.text:00000000000026C0 set_program_name proc near              ; CODE XREF: main+1F↑p
.text:00000000000026C0 ; __unwind {
.text:00000000000026C0                 test    rdi, rdi
.text:00000000000026C3                 push    rbx
.text:00000000000026C4                 jz      short loc_273D
.text:00000000000026C6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000026CB                 mov     rbx, rdi
.text:00000000000026CE                 call    _strrchr
.text:00000000000026D3                 test    rax, rax
.text:00000000000026D6                 jz      short loc_272D
.text:00000000000026D8                 lea     r8, [rax+1]
.text:00000000000026DC                 mov     rdx, r8
.text:00000000000026DF                 sub     rdx, rbx
.text:00000000000026E2                 cmp     rdx, 6
.text:00000000000026E6                 jle     short loc_272D
.text:00000000000026E8                 lea     rsi, [rax-6]
.text:00000000000026EC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000026F3                 mov     ecx, 7
.text:00000000000026F8                 repe cmpsb
.text:00000000000026FA                 setnbe  dl
.text:00000000000026FD                 sbb     dl, 0
.text:0000000000002700                 test    dl, dl
.text:0000000000002702                 jnz     short loc_272D
.text:0000000000002704                 lea     rdi, aLt        ; "lt-"
.text:000000000000270B                 mov     ecx, 3
.text:0000000000002710                 mov     rsi, r8
.text:0000000000002713                 mov     rbx, r8
.text:0000000000002716                 repe cmpsb
.text:0000000000002718                 setnbe  dl
.text:000000000000271B                 sbb     dl, 0
.text:000000000000271E                 test    dl, dl
.text:0000000000002720                 jnz     short loc_272D
.text:0000000000002722                 lea     rbx, [rax+4]
.text:0000000000002726                 mov     cs:__bss_start, rbx
.text:000000000000272D
.text:000000000000272D loc_272D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000272D                                         ; set_program_name+26↑j ...
.text:000000000000272D                 mov     cs:program_name, rbx
.text:0000000000002734                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000273B                 pop     rbx
.text:000000000000273C                 retn
.text:000000000000273D ; ---------------------------------------------------------------------------
.text:000000000000273D
.text:000000000000273D loc_273D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000273D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002744                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000274B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002750                 mov     esi, 1          ; size
.text:0000000000002755                 call    _fwrite
.text:000000000000275A                 call    _abort
.text:000000000000275A ; } // starts at 26C0
.text:000000000000275A set_program_name endp
.text:000000000000275A
.text:000000000000275A ; ---------------------------------------------------------------------------
.text:000000000000275F                 align 20h
.text:0000000000002760
.text:0000000000002760 ; =============== S U B R O U T I N E =======================================
.text:0000000000002760
.text:0000000000002760 ; Attributes: info_from_lumina
.text:0000000000002760
.text:0000000000002760 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002760 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002760                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002760 ; __unwind {
.text:0000000000002760                 push    rbp
.text:0000000000002761                 push    rbx
.text:0000000000002762                 mov     rbp, rdi
.text:0000000000002765                 mov     ebx, esi
.text:0000000000002767                 sub     rsp, 8
.text:000000000000276B                 call    locale_charset
.text:0000000000002770                 movzx   edx, byte ptr [rax]
.text:0000000000002773                 and     edx, 0FFFFFFDFh
.text:0000000000002776                 cmp     dl, 55h ; 'U'
.text:0000000000002779                 jz      short loc_27F0
.text:000000000000277B                 cmp     dl, 47h ; 'G'
.text:000000000000277E                 jz      short loc_27A0
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002780                                         ; gettext_quote+50↓j ...
.text:0000000000002780                 lea     rax, unk_55FB
.text:0000000000002787                 lea     rdx, asc_55FD   ; "'"
.text:000000000000278E                 cmp     ebx, 9
.text:0000000000002791                 cmovnz  rax, rdx
.text:0000000000002795                 add     rsp, 8
.text:0000000000002799                 pop     rbx
.text:000000000000279A                 pop     rbp
.text:000000000000279B                 retn
.text:000000000000279B ; ---------------------------------------------------------------------------
.text:000000000000279C                 align 20h
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000027A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000027A4                 and     edx, 0FFFFFFDFh
.text:00000000000027A7                 cmp     dl, 42h ; 'B'
.text:00000000000027AA                 jnz     short loc_2780
.text:00000000000027AC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000027B0                 jnz     short loc_2780
.text:00000000000027B2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000027B6                 jnz     short loc_2780
.text:00000000000027B8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000027BC                 jnz     short loc_2780
.text:00000000000027BE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000027C2                 jnz     short loc_2780
.text:00000000000027C4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000027C8                 jnz     short loc_2780
.text:00000000000027CA                 cmp     byte ptr [rax+7], 0
.text:00000000000027CE                 jnz     short loc_2780
.text:00000000000027D0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000027D4                 lea     rax, unk_55F4
.text:00000000000027DB                 lea     rdx, unk_55F8
.text:00000000000027E2                 cmovnz  rax, rdx
.text:00000000000027E6                 add     rsp, 8
.text:00000000000027EA                 pop     rbx
.text:00000000000027EB                 pop     rbp
.text:00000000000027EC                 retn
.text:00000000000027EC ; ---------------------------------------------------------------------------
.text:00000000000027ED                 align 10h
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000027F0                 movzx   edx, byte ptr [rax+1]
.text:00000000000027F4                 and     edx, 0FFFFFFDFh
.text:00000000000027F7                 cmp     dl, 54h ; 'T'
.text:00000000000027FA                 jnz     short loc_2780
.text:00000000000027FC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002800                 and     edx, 0FFFFFFDFh
.text:0000000000002803                 cmp     dl, 46h ; 'F'
.text:0000000000002806                 jnz     loc_2780
.text:000000000000280C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002810                 jnz     loc_2780
.text:0000000000002816                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000281A                 jnz     loc_2780
.text:0000000000002820                 cmp     byte ptr [rax+5], 0
.text:0000000000002824                 jnz     loc_2780
.text:000000000000282A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000282E                 lea     rax, unk_55EC
.text:0000000000002835                 lea     rdx, unk_55F0
.text:000000000000283C                 cmovnz  rax, rdx
.text:0000000000002840                 add     rsp, 8
.text:0000000000002844                 pop     rbx
.text:0000000000002845                 pop     rbp
.text:0000000000002846                 retn
.text:0000000000002846 ; } // starts at 2760
.text:0000000000002846 gettext_quote   endp
.text:0000000000002846
.text:0000000000002846 ; ---------------------------------------------------------------------------
.text:0000000000002847                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850 ; Attributes: info_from_lumina
.text:0000000000002850
.text:0000000000002850 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002850 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002850                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002850
.text:0000000000002850 var_E0          = dword ptr -0E0h
.text:0000000000002850 var_DB          = byte ptr -0DBh
.text:0000000000002850 var_DA          = byte ptr -0DAh
.text:0000000000002850 var_D9          = byte ptr -0D9h
.text:0000000000002850 s               = qword ptr -0D8h
.text:0000000000002850 n               = qword ptr -0D0h
.text:0000000000002850 var_C8          = qword ptr -0C8h
.text:0000000000002850 ps              = qword ptr -0C0h
.text:0000000000002850 var_B8          = qword ptr -0B8h
.text:0000000000002850 var_B0          = qword ptr -0B0h
.text:0000000000002850 var_A8          = qword ptr -0A8h
.text:0000000000002850 s2              = qword ptr -0A0h
.text:0000000000002850 var_98          = qword ptr -98h
.text:0000000000002850 var_90          = qword ptr -90h
.text:0000000000002850 var_88          = qword ptr -88h
.text:0000000000002850 var_80          = qword ptr -80h
.text:0000000000002850 var_78          = qword ptr -78h
.text:0000000000002850 var_70          = dword ptr -70h
.text:0000000000002850 var_6C          = byte ptr -6Ch
.text:0000000000002850 var_6B          = byte ptr -6Bh
.text:0000000000002850 var_6A          = byte ptr -6Ah
.text:0000000000002850 var_69          = byte ptr -69h
.text:0000000000002850 var_68          = qword ptr -68h
.text:0000000000002850 var_60          = qword ptr -60h
.text:0000000000002850 wc              = dword ptr -4Ch
.text:0000000000002850 var_48          = qword ptr -48h
.text:0000000000002850 var_40          = qword ptr -40h
.text:0000000000002850 arg_0           = qword ptr  8
.text:0000000000002850 arg_8           = qword ptr  10h
.text:0000000000002850 arg_10          = qword ptr  18h
.text:0000000000002850
.text:0000000000002850 ; __unwind {
.text:0000000000002850                 push    r15
.text:0000000000002852                 push    r14
.text:0000000000002854                 mov     r15d, r8d
.text:0000000000002857                 push    r13
.text:0000000000002859                 push    r12
.text:000000000000285B                 mov     r14, rdi
.text:000000000000285E                 push    rbp
.text:000000000000285F                 push    rbx
.text:0000000000002860                 mov     ebx, r9d
.text:0000000000002863                 mov     r13, rsi
.text:0000000000002866                 mov     rbp, rcx
.text:0000000000002869                 and     ebx, 2
.text:000000000000286C                 sub     rsp, 0B8h
.text:0000000000002873                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000287B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002880                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002885                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000288A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000288F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002897                 mov     [rsp+0E8h+var_80], rax
.text:000000000000289C                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000028A4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000028A9                 mov     rax, fs:28h
.text:00000000000028B2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000028BA                 xor     eax, eax
.text:00000000000028BC                 call    ___ctype_get_mb_cur_max
.text:00000000000028C1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000028C5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000028CA                 ja      def_28E1        ; jumptable 00000000000121F1 default case
.text:00000000000028D0                 lea     rcx, jpt_28E1
.text:00000000000028D7                 mov     edx, r15d
.text:00000000000028DA                 movsxd  rax, ds:(jpt_28E1 - 5660h)[rcx+rdx*4]
.text:00000000000028DE                 add     rax, rcx
.text:00000000000028E1                 jmp     rax             ; switch jump
.text:00000000000028E3 ; ---------------------------------------------------------------------------
.text:00000000000028E3
.text:00000000000028E3 loc_28E3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000028E3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000028E3                                         ; DATA XREF: ...
.text:00000000000028E3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000028E8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000028ED                 xor     r12d, r12d
.text:00000000000028F0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000028F9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000028FE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002903
.text:0000000000002903 loc_2903:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002903                 lea     rax, asc_55FD   ; "'"
.text:000000000000290A                 mov     [rsp+0E8h+n], 1
.text:0000000000002913                 xor     r15d, r15d
.text:0000000000002916                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000291E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002923
.text:0000000000002923 loc_2923:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002923                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002923                 xor     r11d, r11d
.text:0000000000002926                 mov     rax, rbp
.text:0000000000002929                 mov     r8d, r12d
.text:000000000000292C                 mov     rbp, r11
.text:000000000000292F                 mov     r11, rax
.text:0000000000002932                 nop     word ptr [rax+rax+00h]
.text:0000000000002938
.text:0000000000002938 loc_2938:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002938                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002938                 cmp     r11, rbp
.text:000000000000293B                 setnz   r12b
.text:000000000000293F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002943                 jnz     short loc_2952
.text:0000000000002945                 mov     rax, [rsp+0E8h+s]
.text:000000000000294A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000294E                 setnz   r12b
.text:0000000000002952
.text:0000000000002952 loc_2952:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002952                 test    r12b, r12b
.text:0000000000002955                 jz      loc_2FB0
.text:000000000000295B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002960                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002965                 lea     r9, [rdi+rbp]
.text:0000000000002969                 setnz   al
.text:000000000000296C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002970                 mov     r10d, eax
.text:0000000000002973                 jz      loc_2A20
.text:0000000000002979                 mov     rax, [rsp+0E8h+n]
.text:000000000000297E                 test    rax, rax
.text:0000000000002981                 jz      loc_2DB0
.text:0000000000002987                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000298B                 lea     rbx, [rbp+rax+0]
.text:0000000000002990                 jnz     short loc_29C0
.text:0000000000002992                 cmp     rax, 1
.text:0000000000002996                 jbe     short loc_29C0
.text:0000000000002998                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000299D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000029A2                 mov     [rsp+0E8h+ps], r9
.text:00000000000029A7                 call    _strlen
.text:00000000000029AC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000029B2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000029B8                 mov     r11, rax
.text:00000000000029BB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000029C0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000029C0                 cmp     rbx, r11
.text:00000000000029C3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000029C8                 ja      loc_2F80
.text:00000000000029CE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000029D3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000029D8                 mov     rdi, r9         ; s1
.text:00000000000029DB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000029E0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000029E5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000029EA                 call    _memcmp
.text:00000000000029EF                 test    eax, eax
.text:00000000000029F1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000029F6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000029FC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002A01                 jnz     loc_2F80
.text:0000000000002A07                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002A0C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002A12                 jnz     loc_3995
.text:0000000000002A18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002A20                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002A20                 movzx   ebx, byte ptr [r9]
.text:0000000000002A24                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002A27                 ja      def_2A3E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002A2D                 lea     rcx, jpt_2A3E
.text:0000000000002A34                 movzx   edx, bl
.text:0000000000002A37                 movsxd  rax, ds:(jpt_2A3E - 568Ch)[rcx+rdx*4]
.text:0000000000002A3B                 add     rax, rcx
.text:0000000000002A3E                 jmp     rax             ; switch jump
.text:0000000000002A40 ; ---------------------------------------------------------------------------
.text:0000000000002A40
.text:0000000000002A40 loc_2A40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002A40                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002A40                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002A43
.text:0000000000002A43 loc_2A43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A43                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002A43                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002A47                 setnz   al
.text:0000000000002A4A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A4E                 jnz     short loc_2A5C
.text:0000000000002A50                 mov     rax, [rsp+0E8h+s]
.text:0000000000002A55                 cmp     byte ptr [rax+1], 0
.text:0000000000002A59                 setnz   al
.text:0000000000002A5C
.text:0000000000002A5C loc_2A5C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002A5C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A61                 setz    dl
.text:0000000000002A64                 test    al, al
.text:0000000000002A66                 jz      loc_2CB8
.text:0000000000002A6C
.text:0000000000002A6C loc_2A6C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002A6C                 xor     r12d, r12d
.text:0000000000002A6F                 xor     eax, eax
.text:0000000000002A71                 nop     dword ptr [rax+00000000h]
.text:0000000000002A78
.text:0000000000002A78 loc_2A78:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002A78                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002A78                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002A7D                 jnz     loc_2B92
.text:0000000000002A83                 test    dl, dl
.text:0000000000002A85                 jnz     loc_2B92
.text:0000000000002A8B
.text:0000000000002A8B loc_2A8B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002A8B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002A90                 test    rsi, rsi
.text:0000000000002A93                 jz      short loc_2AA9
.text:0000000000002A95                 mov     edx, ebx
.text:0000000000002A97                 shr     dl, 5
.text:0000000000002A9A                 movzx   edx, dl
.text:0000000000002A9D                 mov     edx, [rsi+rdx*4]
.text:0000000000002AA0                 bt      edx, ebx
.text:0000000000002AA3                 jb      loc_2BF3
.text:0000000000002AA9
.text:0000000000002AA9 loc_2AA9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002AA9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002AA9                 test    r10b, r10b
.text:0000000000002AAC                 jnz     loc_2BF3
.text:0000000000002AB2                 xor     eax, 1
.text:0000000000002AB5                 add     rbp, 1
.text:0000000000002AB9                 and     eax, r8d
.text:0000000000002ABC
.text:0000000000002ABC loc_2ABC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002ABC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002ABC                 test    al, al
.text:0000000000002ABE                 jz      short loc_2AE0
.text:0000000000002AC0                 cmp     r13, r15
.text:0000000000002AC3                 jbe     short loc_2ACA
.text:0000000000002AC5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002ACA
.text:0000000000002ACA loc_2ACA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002ACA                 lea     rax, [r15+1]
.text:0000000000002ACE                 cmp     r13, rax
.text:0000000000002AD1                 jbe     short loc_2AD9
.text:0000000000002AD3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002AD9
.text:0000000000002AD9 loc_2AD9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002AD9                 add     r15, 2
.text:0000000000002ADD                 xor     r8d, r8d
.text:0000000000002AE0
.text:0000000000002AE0 loc_2AE0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002AE0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002AE0                 cmp     r15, r13
.text:0000000000002AE3                 jnb     short loc_2AE9
.text:0000000000002AE5                 mov     [r14+r15], bl
.text:0000000000002AE9
.text:0000000000002AE9 loc_2AE9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002AE9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002AEE                 add     r15, 1
.text:0000000000002AF2                 mov     eax, 0
.text:0000000000002AF7                 test    r12b, r12b
.text:0000000000002AFA                 cmovz   edi, eax
.text:0000000000002AFD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002B02                 jmp     loc_2938
.text:0000000000002B02 ; ---------------------------------------------------------------------------
.text:0000000000002B07                 align 10h
.text:0000000000002B10
.text:0000000000002B10 loc_2B10:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002B10                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002B10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002B13
.text:0000000000002B13 loc_2B13:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B13                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002B13                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002B17                 cmp     eax, 2
.text:0000000000002B1A                 jz      loc_30D8
.text:0000000000002B20                 cmp     eax, 5
.text:0000000000002B23                 jz      loc_3098
.text:0000000000002B29                 cmp     eax, 2
.text:0000000000002B2C                 mov     ebx, 3Fh ; '?'
.text:0000000000002B31                 setz    dl
.text:0000000000002B34                 xor     r12d, r12d
.text:0000000000002B37                 xor     eax, eax
.text:0000000000002B39                 jmp     loc_2A78
.text:0000000000002B39 ; ---------------------------------------------------------------------------
.text:0000000000002B3E                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002B40                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002B40                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002B43
.text:0000000000002B43 loc_2B43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B43                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002B43                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002B48                 jz      loc_3050
.text:0000000000002B4E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002B53                 xor     edx, edx
.text:0000000000002B55                 xor     eax, eax
.text:0000000000002B57                 mov     ebx, 27h ; '''
.text:0000000000002B5C                 jmp     loc_2A78
.text:0000000000002B5C ; ---------------------------------------------------------------------------
.text:0000000000002B61                 align 8
.text:0000000000002B68
.text:0000000000002B68 loc_2B68:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B68                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002B68                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002B6D                 mov     ebx, 74h ; 't'
.text:0000000000002B72
.text:0000000000002B72 loc_2B72:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002B72                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002B72                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B77                 setz    al
.text:0000000000002B7A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002B7E                 jnz     loc_2CCE
.text:0000000000002B84
.text:0000000000002B84 loc_2B84:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002B84                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002B84                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002B89                 jnz     short loc_2BF0
.text:0000000000002B8B
.text:0000000000002B8B loc_2B8B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002B8B                 mov     ebx, edx
.text:0000000000002B8D                 xor     r12d, r12d
.text:0000000000002B90                 xor     eax, eax
.text:0000000000002B92
.text:0000000000002B92 loc_2B92:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002B92                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002B92                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002B97                 jnz     loc_2A8B
.text:0000000000002B9D                 jmp     loc_2AA9
.text:0000000000002B9D ; ---------------------------------------------------------------------------
.text:0000000000002BA2                 align 8
.text:0000000000002BA8
.text:0000000000002BA8 loc_2BA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BA8                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002BA8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002BAD                 mov     ebx, 62h ; 'b'
.text:0000000000002BB2                 jmp     short loc_2B84
.text:0000000000002BB2 ; ---------------------------------------------------------------------------
.text:0000000000002BB4                 align 8
.text:0000000000002BB8
.text:0000000000002BB8 loc_2BB8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BB8                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002BB8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002BBD                 jz      loc_2F90
.text:0000000000002BC3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002BC8                 jz      loc_2DE0
.text:0000000000002BCE
.text:0000000000002BCE loc_2BCE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002BCE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002BD3                 jz      loc_2DE0
.text:0000000000002BD9                 cmp     [rsp+0E8h+n], 0
.text:0000000000002BDF                 jnz     loc_2F9B
.text:0000000000002BE5                 mov     ebx, 5Ch ; '\'
.text:0000000000002BEA                 nop     word ptr [rax+rax+00h]
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002BF0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002BF0                 xor     r12d, r12d
.text:0000000000002BF3
.text:0000000000002BF3 loc_2BF3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002BF3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002BF3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002BF8                 setz    dl
.text:0000000000002BFB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002C00                 mov     eax, edx
.text:0000000000002C02                 jnz     loc_3458
.text:0000000000002C08                 mov     eax, r8d
.text:0000000000002C0B                 xor     eax, 1
.text:0000000000002C0E                 and     al, dl
.text:0000000000002C10                 jz      short loc_2C41
.text:0000000000002C12                 cmp     r13, r15
.text:0000000000002C15                 jbe     short loc_2C1C
.text:0000000000002C17                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C1C
.text:0000000000002C1C loc_2C1C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000002C1C                 lea     rdx, [r15+1]
.text:0000000000002C20                 cmp     r13, rdx
.text:0000000000002C23                 jbe     short loc_2C2B
.text:0000000000002C25                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002C2B
.text:0000000000002C2B loc_2C2B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000002C2B                 lea     rdx, [r15+2]
.text:0000000000002C2F                 cmp     r13, rdx
.text:0000000000002C32                 jbe     short loc_2C3A
.text:0000000000002C34                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002C3A
.text:0000000000002C3A loc_2C3A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000002C3A                 add     r15, 3
.text:0000000000002C3E                 mov     r8d, eax
.text:0000000000002C41
.text:0000000000002C41 loc_2C41:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002C41                 cmp     r13, r15
.text:0000000000002C44                 jbe     short loc_2C4B
.text:0000000000002C46                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002C4B
.text:0000000000002C4B loc_2C4B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000002C4B                 add     r15, 1
.text:0000000000002C4F                 add     rbp, 1
.text:0000000000002C53                 jmp     loc_2AE0
.text:0000000000002C53 ; ---------------------------------------------------------------------------
.text:0000000000002C58                 align 20h
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002C60                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002C60                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002C65                 jnz     loc_2E33
.text:0000000000002C6B                 xor     edx, edx
.text:0000000000002C6D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002C72                 jz      loc_2B8B
.text:0000000000002C78                 add     rbp, 1
.text:0000000000002C7C                 jmp     loc_2938
.text:0000000000002C7C ; ---------------------------------------------------------------------------
.text:0000000000002C81                 align 8
.text:0000000000002C88
.text:0000000000002C88 loc_2C88:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002C88                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002C88                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000002C8D                 setz    dl
.text:0000000000002C90                 xor     eax, eax
.text:0000000000002C92                 jmp     loc_2A78
.text:0000000000002C92 ; ---------------------------------------------------------------------------
.text:0000000000002C97                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CA0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CA0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002CA5                 mov     ebx, 61h ; 'a'
.text:0000000000002CAA                 jmp     loc_2B84
.text:0000000000002CAA ; ---------------------------------------------------------------------------
.text:0000000000002CAF                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CB0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CB0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002CB5                 setz    dl
.text:0000000000002CB8
.text:0000000000002CB8 loc_2CB8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002CB8                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002CB8                 test    rbp, rbp
.text:0000000000002CBB                 jnz     loc_2A6C
.text:0000000000002CC1
.text:0000000000002CC1 loc_2CC1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002CC1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002CC1                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002CC6                 and     al, dl
.text:0000000000002CC8                 jz      loc_2A78
.text:0000000000002CCE
.text:0000000000002CCE loc_2CCE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000002CCE                 mov     rbp, r11
.text:0000000000002CD1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002CD9                 jmp     loc_33D9
.text:0000000000002CD9 ; ---------------------------------------------------------------------------
.text:0000000000002CDE                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CE0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CE0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002CE5                 setz    dl
.text:0000000000002CE8                 xor     r12d, r12d
.text:0000000000002CEB                 jmp     short loc_2CC1
.text:0000000000002CEB ; ---------------------------------------------------------------------------
.text:0000000000002CED                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 loc_2CF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CF0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CF0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002CF5                 mov     ebx, 20h ; ' '
.text:0000000000002CFA                 setz    dl
.text:0000000000002CFD                 jmp     short loc_2CC1
.text:0000000000002CFD ; ---------------------------------------------------------------------------
.text:0000000000002CFF                 align 20h
.text:0000000000002D00
.text:0000000000002D00 loc_2D00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D00                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D00                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002D05                 mov     ebx, 72h ; 'r'
.text:0000000000002D0A                 jmp     loc_2B72
.text:0000000000002D0A ; ---------------------------------------------------------------------------
.text:0000000000002D0F                 align 10h
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D10                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D10                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002D15                 mov     ebx, 66h ; 'f'
.text:0000000000002D1A                 jmp     loc_2B84
.text:0000000000002D1A ; ---------------------------------------------------------------------------
.text:0000000000002D1F                 align 20h
.text:0000000000002D20
.text:0000000000002D20 loc_2D20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D20                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D20                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002D25                 mov     ebx, 76h ; 'v'
.text:0000000000002D2A                 jmp     loc_2B84
.text:0000000000002D2A ; ---------------------------------------------------------------------------
.text:0000000000002D2F                 align 10h
.text:0000000000002D30
.text:0000000000002D30 loc_2D30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D30                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D30                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002D35                 mov     ebx, 6Eh ; 'n'
.text:0000000000002D3A                 jmp     loc_2B72
.text:0000000000002D3A ; ---------------------------------------------------------------------------
.text:0000000000002D3F                 align 20h
.text:0000000000002D40
.text:0000000000002D40 def_2DCA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002D40                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002D40                                         ; DATA XREF: ...
.text:0000000000002D40                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002D43                 nop     dword ptr [rax+rax+00h]
.text:0000000000002D48
.text:0000000000002D48 def_2A3E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002D48                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002D48                                         ; DATA XREF: ...
.text:0000000000002D48                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002D4E                 jnz     loc_30F8
.text:0000000000002D54                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002D59                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000002D5E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002D63                 call    ___ctype_b_loc
.text:0000000000002D68                 mov     rcx, [rax]
.text:0000000000002D6B                 movzx   edx, bl
.text:0000000000002D6E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002D74                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002D7A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000002D7F                 mov     edi, 1
.text:0000000000002D84                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002D88                 and     ax, 4000h
.text:0000000000002D8C                 setnz   r12b
.text:0000000000002D90                 setz    al
.text:0000000000002D93                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002D97
.text:0000000000002D97 loc_2D97:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002D97                 test    al, al
.text:0000000000002D99                 jnz     loc_3731
.text:0000000000002D9F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002DA4                 setz    dl
.text:0000000000002DA7                 jmp     loc_2A78
.text:0000000000002DA7 ; ---------------------------------------------------------------------------
.text:0000000000002DAC                 align 10h
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002DB0                 movzx   ebx, byte ptr [r9]
.text:0000000000002DB4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002DB7                 ja      short def_2DCA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002DB9                 lea     rcx, jpt_2DCA
.text:0000000000002DC0                 movzx   edx, bl
.text:0000000000002DC3                 movsxd  rax, ds:(jpt_2DCA - 5888h)[rcx+rdx*4]
.text:0000000000002DC7                 add     rax, rcx
.text:0000000000002DCA                 jmp     rax             ; switch jump
.text:0000000000002DCA ; ---------------------------------------------------------------------------
.text:0000000000002DCC                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DD0                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002DD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002DD3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002DD8                 jnz     loc_2BCE
.text:0000000000002DDE                 xchg    ax, ax
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002DE0                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002DE0                 mov     edx, 5Ch ; '\'
.text:0000000000002DE5                 mov     ebx, 5Ch ; '\'
.text:0000000000002DEA                 jmp     loc_2B84
.text:0000000000002DEA ; ---------------------------------------------------------------------------
.text:0000000000002DEF                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DF0                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002DF0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002DF5                 xor     r10d, r10d
.text:0000000000002DF8                 mov     ebx, 66h ; 'f'
.text:0000000000002DFD                 jmp     loc_2B84
.text:0000000000002DFD ; ---------------------------------------------------------------------------
.text:0000000000002E02                 align 8
.text:0000000000002E08
.text:0000000000002E08 loc_2E08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002E08                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002E08                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000002E0D                 xor     r10d, r10d
.text:0000000000002E10                 mov     ebx, 6Eh ; 'n'
.text:0000000000002E15                 jmp     loc_2B72
.text:0000000000002E15 ; ---------------------------------------------------------------------------
.text:0000000000002E1A                 align 20h
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002E20                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002E20                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002E25                 jmp     loc_2BF0
.text:0000000000002E25 ; ---------------------------------------------------------------------------
.text:0000000000002E2A                 align 10h
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002E30                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002E30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002E33
.text:0000000000002E33 loc_2E33:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002E33                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E38                 setz    dl
.text:0000000000002E3B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002E40                 jnz     loc_39DA
.text:0000000000002E46                 mov     eax, r8d
.text:0000000000002E49                 mov     rcx, r15
.text:0000000000002E4C                 xor     eax, 1
.text:0000000000002E4F                 and     al, dl
.text:0000000000002E51                 jz      short loc_2E80
.text:0000000000002E53                 cmp     r13, r15
.text:0000000000002E56                 jbe     short loc_2E5D
.text:0000000000002E58                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002E5D
.text:0000000000002E5D loc_2E5D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000002E5D                 lea     rcx, [r15+1]
.text:0000000000002E61                 cmp     r13, rcx
.text:0000000000002E64                 jbe     short loc_2E6C
.text:0000000000002E66                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002E6C
.text:0000000000002E6C loc_2E6C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000002E6C                 lea     rcx, [r15+2]
.text:0000000000002E70                 cmp     r13, rcx
.text:0000000000002E73                 ja      loc_34A9
.text:0000000000002E79
.text:0000000000002E79 loc_2E79:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002E79                 lea     rcx, [r15+3]
.text:0000000000002E7D                 mov     r8d, eax
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002E80                 cmp     r13, rcx
.text:0000000000002E83                 jbe     short loc_2E8A
.text:0000000000002E85                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000002E8A
.text:0000000000002E8A loc_2E8A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000002E8A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E8F                 lea     r15, [rcx+1]
.text:0000000000002E93                 jz      loc_3499
.text:0000000000002E99                 lea     rax, [rbp+1]
.text:0000000000002E9D                 cmp     rax, r11
.text:0000000000002EA0                 jnb     short loc_2EBB
.text:0000000000002EA2                 mov     rax, [rsp+0E8h+s]
.text:0000000000002EA7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000002EAC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002EB0                 sub     eax, 30h ; '0'
.text:0000000000002EB3                 cmp     al, 9
.text:0000000000002EB5                 jbe     loc_36E9
.text:0000000000002EBB
.text:0000000000002EBB loc_2EBB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000002EBB                 mov     eax, r12d
.text:0000000000002EBE                 mov     ebx, 30h ; '0'
.text:0000000000002EC3                 xor     r12d, r12d
.text:0000000000002EC6                 jmp     loc_2A78
.text:0000000000002EC6 ; ---------------------------------------------------------------------------
.text:0000000000002ECB                 align 10h
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002ED0                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002ED0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002ED5                 mov     r12d, r10d
.text:0000000000002ED8                 setz    dl
.text:0000000000002EDB                 xor     r10d, r10d
.text:0000000000002EDE                 xor     eax, eax
.text:0000000000002EE0                 jmp     loc_2A78
.text:0000000000002EE0 ; ---------------------------------------------------------------------------
.text:0000000000002EE5                 align 8
.text:0000000000002EE8
.text:0000000000002EE8 loc_2EE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002EE8                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002EE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000002EED                 setz    dl
.text:0000000000002EF0                 xor     r10d, r10d
.text:0000000000002EF3                 jmp     loc_2CB8
.text:0000000000002EF3 ; ---------------------------------------------------------------------------
.text:0000000000002EF8                 align 20h
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F00                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F00                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002F05                 setz    dl
.text:0000000000002F08                 xor     r10d, r10d
.text:0000000000002F0B                 xor     r12d, r12d
.text:0000000000002F0E                 jmp     loc_2CC1
.text:0000000000002F0E ; ---------------------------------------------------------------------------
.text:0000000000002F13                 align 8
.text:0000000000002F18
.text:0000000000002F18 loc_2F18:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F18                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F18                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000002F1D                 mov     r12d, r10d
.text:0000000000002F20                 mov     ebx, 20h ; ' '
.text:0000000000002F25                 setz    dl
.text:0000000000002F28                 xor     r10d, r10d
.text:0000000000002F2B                 jmp     loc_2CC1
.text:0000000000002F30 ; ---------------------------------------------------------------------------
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F30                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F30                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002F35                 xor     r10d, r10d
.text:0000000000002F38                 mov     ebx, 72h ; 'r'
.text:0000000000002F3D                 jmp     loc_2B72
.text:0000000000002F3D ; ---------------------------------------------------------------------------
.text:0000000000002F42                 align 8
.text:0000000000002F48
.text:0000000000002F48 loc_2F48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F48                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F48                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000002F4D                 jmp     loc_2BF0
.text:0000000000002F4D ; ---------------------------------------------------------------------------
.text:0000000000002F52                 align 8
.text:0000000000002F58
.text:0000000000002F58 loc_2F58:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F58                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F58                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000002F5D                 xor     r10d, r10d
.text:0000000000002F60                 mov     ebx, 74h ; 't'
.text:0000000000002F65                 jmp     loc_2B72
.text:0000000000002F65 ; ---------------------------------------------------------------------------
.text:0000000000002F6A                 align 10h
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F70                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F70                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002F75                 jmp     loc_2BF0
.text:0000000000002F75 ; ---------------------------------------------------------------------------
.text:0000000000002F7A                 align 20h
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002F80                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002F80                 xor     r10d, r10d
.text:0000000000002F83                 jmp     loc_2A20
.text:0000000000002F83 ; ---------------------------------------------------------------------------
.text:0000000000002F88                 align 10h
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002F90                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F95                 jnz     loc_3900
.text:0000000000002F9B
.text:0000000000002F9B loc_2F9B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000002F9B                 add     rbp, 1
.text:0000000000002F9F                 mov     eax, r8d
.text:0000000000002FA2                 xor     r12d, r12d
.text:0000000000002FA5                 mov     ebx, 5Ch ; '\'
.text:0000000000002FAA                 jmp     loc_2ABC
.text:0000000000002FAA ; ---------------------------------------------------------------------------
.text:0000000000002FAF                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 loc_2FB0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002FB0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FB5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002FBA                 mov     r12d, r8d
.text:0000000000002FBD                 mov     rbp, r11
.text:0000000000002FC0                 setz    dl
.text:0000000000002FC3                 mov     eax, ebx
.text:0000000000002FC5                 test    r15, r15
.text:0000000000002FC8                 setz    cl
.text:0000000000002FCB                 and     eax, edx
.text:0000000000002FCD                 and     al, cl
.text:0000000000002FCF                 jnz     loc_3A36
.text:0000000000002FD5                 mov     eax, ebx
.text:0000000000002FD7                 xor     eax, 1
.text:0000000000002FDA                 and     dl, al
.text:0000000000002FDC                 jz      loc_394C
.text:0000000000002FE2                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002FE7                 jz      loc_394A
.text:0000000000002FED                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002FF2                 jnz     loc_39ED
.text:0000000000002FF8                 test    r13, r13
.text:0000000000002FFB                 setz    al
.text:0000000000002FFE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003004                 setnz   dl
.text:0000000000003007                 and     al, dl
.text:0000000000003009                 jz      loc_3A2C
.text:000000000000300F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003014
.text:0000000000003014 loc_3014:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003014                 lea     rbx, asc_55FD   ; "'"
.text:000000000000301B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000301F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003027                 mov     r15d, 1
.text:000000000000302D                 mov     [rsp+0E8h+n], 1
.text:0000000000003036                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000303B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003040                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003044                 jmp     loc_2923
.text:0000000000003044 ; ---------------------------------------------------------------------------
.text:0000000000003049                 align 10h
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003050                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003055                 jnz     loc_3900
.text:000000000000305B                 test    r13, r13
.text:000000000000305E                 jz      loc_3460
.text:0000000000003064                 xor     edx, edx
.text:0000000000003066                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000306C                 jnz     loc_3460
.text:0000000000003072
.text:0000000000003072 loc_3072:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003072                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003072                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003077                 add     r15, 3
.text:000000000000307B                 xor     eax, eax
.text:000000000000307D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003082                 xor     r8d, r8d
.text:0000000000003085                 mov     r13, rdx
.text:0000000000003088                 mov     ebx, 27h ; '''
.text:000000000000308D                 jmp     loc_2AA9
.text:000000000000308D ; ---------------------------------------------------------------------------
.text:0000000000003092                 align 8
.text:0000000000003098
.text:0000000000003098 loc_3098:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003098                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000309D                 jz      short loc_30C0
.text:000000000000309F                 lea     rcx, [rbp+2]
.text:00000000000030A3                 cmp     rcx, r11
.text:00000000000030A6                 jnb     short loc_30C0
.text:00000000000030A8                 mov     rax, [rsp+0E8h+s]
.text:00000000000030AD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000030B2                 jz      loc_3842
.text:00000000000030B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000030C0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000030C0                 xor     edx, edx
.text:00000000000030C2                 xor     r12d, r12d
.text:00000000000030C5                 xor     eax, eax
.text:00000000000030C7                 mov     ebx, 3Fh ; '?'
.text:00000000000030CC                 jmp     loc_2A78
.text:00000000000030CC ; ---------------------------------------------------------------------------
.text:00000000000030D1                 align 8
.text:00000000000030D8
.text:00000000000030D8 loc_30D8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000030D8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000030DD                 jnz     loc_3900
.text:00000000000030E3                 xor     r12d, r12d
.text:00000000000030E6                 xor     eax, eax
.text:00000000000030E8                 mov     ebx, 3Fh ; '?'
.text:00000000000030ED                 jmp     loc_2AA9
.text:00000000000030ED ; ---------------------------------------------------------------------------
.text:00000000000030F2                 align 8
.text:00000000000030F8
.text:00000000000030F8 loc_30F8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000030F8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003100                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003104                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003110                 mov     [rsp+0E8h+ps], rax
.text:0000000000003115                 jnz     short loc_3144
.text:0000000000003117                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000311C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003121                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003126                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000312B                 call    _strlen
.text:0000000000003130                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003136                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000313C                 mov     r11, rax
.text:000000000000313F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003144
.text:0000000000003144 loc_3144:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003144                 lea     rax, [rsp+0E8h+wc]
.text:000000000000314C                 xor     ecx, ecx
.text:000000000000314E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003152                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003157                 mov     rbx, rcx
.text:000000000000315A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003162                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003167                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000316C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003174                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003179                 mov     [rsp+0E8h+var_78], r13
.text:000000000000317E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003183
.text:0000000000003183 loc_3183:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003183                 mov     rax, [rsp+0E8h+s]
.text:0000000000003188                 lea     r14, [rbp+rbx+0]
.text:000000000000318D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003192                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003197                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000319C                 lea     r13, [rax+r14]
.text:00000000000031A0                 sub     rdx, r14
.text:00000000000031A3                 mov     rsi, r13
.text:00000000000031A6                 call    rpl_mbrtowc
.text:00000000000031AB                 test    rax, rax
.text:00000000000031AE                 mov     r15, rax
.text:00000000000031B1                 jz      short loc_3201
.text:00000000000031B3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000031B7                 jz      loc_37D5
.text:00000000000031BD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000031C1                 jz      loc_3761
.text:00000000000031C7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031CC                 setz    al
.text:00000000000031CF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000031D3                 jnz     loc_3370
.text:00000000000031D9
.text:00000000000031D9 loc_31D9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000031D9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000031D9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000031E0                 call    _iswprint
.text:00000000000031E5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000031EA                 test    eax, eax
.text:00000000000031EC                 mov     eax, 0
.text:00000000000031F1                 cmovz   r12d, eax
.text:00000000000031F5                 add     rbx, r15
.text:00000000000031F8                 call    _mbsinit
.text:00000000000031FD                 test    eax, eax
.text:00000000000031FF                 jz      short loc_3183
.text:0000000000003201
.text:0000000000003201 loc_3201:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003201                 mov     edx, r12d
.text:0000000000003204                 mov     rdi, rbx
.text:0000000000003207                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000320D                 xor     edx, 1
.text:0000000000003210                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003215                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000321B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000321F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003227                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000322C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003231                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003236
.text:0000000000003236 loc_3236:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003236                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003236                 cmp     rdi, 1
.text:000000000000323A                 jbe     loc_383B
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003240                 mov     rcx, rdi
.text:0000000000003243                 xor     esi, esi
.text:0000000000003245                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000324B                 add     rcx, rbp
.text:000000000000324E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003253                 jmp     loc_330E
.text:0000000000003253 ; ---------------------------------------------------------------------------
.text:0000000000003258                 align 20h
.text:0000000000003260
.text:0000000000003260 loc_3260:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003260                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003265                 setz    al
.text:0000000000003268                 test    r9b, r9b
.text:000000000000326B                 jnz     loc_3720
.text:0000000000003271                 mov     esi, r8d
.text:0000000000003274                 xor     esi, 1
.text:0000000000003277                 and     al, sil
.text:000000000000327A                 jz      short loc_32AB
.text:000000000000327C                 cmp     r13, r15
.text:000000000000327F                 jbe     short loc_3286
.text:0000000000003281                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003286
.text:0000000000003286 loc_3286:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003286                 lea     rsi, [r15+1]
.text:000000000000328A                 cmp     r13, rsi
.text:000000000000328D                 jbe     short loc_3295
.text:000000000000328F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003295
.text:0000000000003295 loc_3295:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003295                 lea     rsi, [r15+2]
.text:0000000000003299                 cmp     r13, rsi
.text:000000000000329C                 jbe     short loc_32A4
.text:000000000000329E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000032A4
.text:00000000000032A4 loc_32A4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000032A4                 add     r15, 3
.text:00000000000032A8                 mov     r8d, eax
.text:00000000000032AB
.text:00000000000032AB loc_32AB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000032AB                 cmp     r13, r15
.text:00000000000032AE                 jbe     short loc_32B5
.text:00000000000032B0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000032B5
.text:00000000000032B5 loc_32B5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000032B5                 lea     rax, [r15+1]
.text:00000000000032B9                 cmp     r13, rax
.text:00000000000032BC                 jbe     short loc_32CB
.text:00000000000032BE                 mov     eax, ebx
.text:00000000000032C0                 shr     al, 6
.text:00000000000032C3                 add     eax, 30h ; '0'
.text:00000000000032C6                 mov     [r14+r15+1], al
.text:00000000000032CB
.text:00000000000032CB loc_32CB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000032CB                 lea     rax, [r15+2]
.text:00000000000032CF                 cmp     r13, rax
.text:00000000000032D2                 jbe     short loc_32E4
.text:00000000000032D4                 mov     eax, ebx
.text:00000000000032D6                 shr     al, 3
.text:00000000000032D9                 and     eax, 7
.text:00000000000032DC                 add     eax, 30h ; '0'
.text:00000000000032DF                 mov     [r14+r15+2], al
.text:00000000000032E4
.text:00000000000032E4 loc_32E4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000032E4                 and     ebx, 7
.text:00000000000032E7                 add     rbp, 1
.text:00000000000032EB                 add     r15, 3
.text:00000000000032EF                 add     ebx, 30h ; '0'
.text:00000000000032F2                 cmp     rbp, rcx
.text:00000000000032F5                 jnb     loc_2AE0
.text:00000000000032FB                 mov     esi, edx
.text:00000000000032FD
.text:00000000000032FD loc_32FD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000032FD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000032FD                 cmp     r13, r15
.text:0000000000003300                 jbe     short loc_3306
.text:0000000000003302                 mov     [r14+r15], bl
.text:0000000000003306
.text:0000000000003306 loc_3306:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003306                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000330A                 add     r15, 1
.text:000000000000330E
.text:000000000000330E loc_330E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000330E                 test    dl, dl
.text:0000000000003310                 jnz     loc_3260
.text:0000000000003316                 mov     eax, esi
.text:0000000000003318                 xor     eax, 1
.text:000000000000331B                 and     eax, r8d
.text:000000000000331E                 test    r10b, r10b
.text:0000000000003321                 jz      short loc_3331
.text:0000000000003323                 cmp     r13, r15
.text:0000000000003326                 jbe     short loc_332D
.text:0000000000003328                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000332D
.text:000000000000332D loc_332D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000332D                 add     r15, 1
.text:0000000000003331
.text:0000000000003331 loc_3331:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003331                 add     rbp, 1
.text:0000000000003335                 cmp     rbp, rcx
.text:0000000000003338                 jnb     loc_2ABC
.text:000000000000333E                 test    al, al
.text:0000000000003340                 jz      loc_373E
.text:0000000000003346                 cmp     r13, r15
.text:0000000000003349                 jbe     short loc_3350
.text:000000000000334B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003350                 lea     rax, [r15+1]
.text:0000000000003354                 cmp     r13, rax
.text:0000000000003357                 jbe     short loc_335F
.text:0000000000003359                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000335F
.text:000000000000335F loc_335F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000335F                 add     r15, 2
.text:0000000000003363                 xor     r10d, r10d
.text:0000000000003366                 xor     r8d, r8d
.text:0000000000003369                 jmp     short loc_32FD
.text:0000000000003369 ; ---------------------------------------------------------------------------
.text:000000000000336B                 align 10h
.text:0000000000003370
.text:0000000000003370 loc_3370:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003370                 cmp     r15, 1
.text:0000000000003374                 jz      loc_31D9
.text:000000000000337A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000337F                 lea     rcx, [rdi+r15]
.text:0000000000003383                 lea     rdx, [rdi+r14+1]
.text:0000000000003388                 lea     r8, [rcx+r14]
.text:000000000000338C                 jmp     short loc_339D
.text:000000000000338C ; ---------------------------------------------------------------------------
.text:000000000000338E                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003390                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003390                 add     rdx, 1
.text:0000000000003394                 cmp     r8, rdx
.text:0000000000003397                 jz      loc_31D9
.text:000000000000339D
.text:000000000000339D loc_339D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000339D                 movzx   ecx, byte ptr [rdx]
.text:00000000000033A0                 sub     ecx, 5Bh ; '['
.text:00000000000033A3                 cmp     cl, 21h ; '!'
.text:00000000000033A6                 ja      short loc_3390
.text:00000000000033A8                 mov     esi, 1
.text:00000000000033AD                 shl     rsi, cl
.text:00000000000033B0                 mov     rcx, rsi
.text:00000000000033B3                 mov     rsi, 20000002Bh
.text:00000000000033BD                 test    rcx, rsi
.text:00000000000033C0                 jz      short loc_3390
.text:00000000000033C2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000033C7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000033CC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000033D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033D9
.text:00000000000033D9 loc_33D9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000033D9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000033D9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000033DE                 jz      short loc_33F0
.text:00000000000033E0                 test    al, al
.text:00000000000033E2                 mov     eax, 4
.text:00000000000033E7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000033EC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000033F0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000033F0                 sub     rsp, 8
.text:00000000000033F4                 mov     rcx, rbp
.text:00000000000033F7                 mov     rsi, r13
.text:00000000000033FA                 push    [rsp+0F0h+var_88]
.text:00000000000033FE                 push    [rsp+0F8h+var_80]
.text:0000000000003402                 mov     rdi, r14
.text:0000000000003405                 push    0
.text:0000000000003407                 mov     r9d, [rsp+108h+var_70]
.text:000000000000340F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003414                 mov     rdx, [rsp+108h+s]
.text:0000000000003419                 and     r9d, 0FFFFFFFDh
.text:000000000000341D                 call    quotearg_buffer_restyled
.text:0000000000003422                 add     rsp, 20h
.text:0000000000003426                 mov     r15, rax
.text:0000000000003429
.text:0000000000003429 loc_3429:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003429                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003429                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003431                 xor     rbx, fs:28h
.text:000000000000343A                 mov     rax, r15
.text:000000000000343D                 jnz     loc_3A43
.text:0000000000003443                 add     rsp, 0B8h
.text:000000000000344A                 pop     rbx
.text:000000000000344B                 pop     rbp
.text:000000000000344C                 pop     r12
.text:000000000000344E                 pop     r13
.text:0000000000003450                 pop     r14
.text:0000000000003452                 pop     r15
.text:0000000000003454                 retn
.text:0000000000003454 ; ---------------------------------------------------------------------------
.text:0000000000003455                 align 8
.text:0000000000003458
.text:0000000000003458 loc_3458:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003458                 mov     rbp, r11
.text:000000000000345B                 jmp     loc_33D9
.text:0000000000003460 ; ---------------------------------------------------------------------------
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003460                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003460                 cmp     r13, r15
.text:0000000000003463                 jbe     short loc_346A
.text:0000000000003465                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000346A
.text:000000000000346A loc_346A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000346A                 lea     rax, [r15+1]
.text:000000000000346E                 cmp     r13, rax
.text:0000000000003471                 jbe     short loc_3479
.text:0000000000003473                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003479
.text:0000000000003479 loc_3479:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003479                 lea     rax, [r15+2]
.text:000000000000347D                 cmp     r13, rax
.text:0000000000003480                 jbe     loc_3A72
.text:0000000000003486                 mov     rdx, r13
.text:0000000000003489                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000348F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003494                 jmp     loc_3072
.text:0000000000003499 ; ---------------------------------------------------------------------------
.text:0000000000003499
.text:0000000000003499 loc_3499:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003499                 mov     eax, r12d
.text:000000000000349C                 mov     ebx, 30h ; '0'
.text:00000000000034A1                 xor     r12d, r12d
.text:00000000000034A4                 jmp     loc_2AA9
.text:00000000000034A9 ; ---------------------------------------------------------------------------
.text:00000000000034A9
.text:00000000000034A9 loc_34A9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000034A9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000034AF                 jmp     loc_2E79
.text:00000000000034B4 ; ---------------------------------------------------------------------------
.text:00000000000034B4
.text:00000000000034B4 loc_34B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000034B4                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000034B4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000034B6                 jnz     loc_28E3        ; jumptable 00000000000121F1 case 1
.text:00000000000034BC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000034C1
.text:00000000000034C1 loc_34C1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000034C1                 test    r13, r13
.text:00000000000034C4                 jnz     loc_3A5A
.text:00000000000034CA                 lea     rax, asc_55FD   ; "'"
.text:00000000000034D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000034DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000034DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000034E4                 xor     r12d, r12d
.text:00000000000034E7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000034EC                 mov     [rsp+0E8h+n], 1
.text:00000000000034F5                 mov     [rsp+0E8h+s2], rax
.text:00000000000034FA                 mov     r15d, 1
.text:0000000000003500                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003508                 jmp     loc_2923
.text:0000000000003508 ; ---------------------------------------------------------------------------
.text:000000000000350D                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003510                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:0000000000003510                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003512                 jnz     loc_390D
.text:0000000000003518                 test    r13, r13
.text:000000000000351B                 jz      loc_3746
.text:0000000000003521                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003525                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000352A                 xor     r12d, r12d
.text:000000000000352D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003532                 mov     [rsp+0E8h+var_98], 0
.text:000000000000353B
.text:000000000000353B loc_353B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000353B                 lea     rax, unk_55FB
.text:0000000000003542                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003547                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000354C                 mov     [rsp+0E8h+n], 1
.text:0000000000003555                 mov     r15d, 1
.text:000000000000355B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003560                 jmp     loc_2923
.text:0000000000003565 ; ---------------------------------------------------------------------------
.text:0000000000003565
.text:0000000000003565 loc_3565:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003565                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:0000000000003565                 lea     rax, unk_55FB   ; jumptable 00000000000121F1 case 6
.text:000000000000356C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003571                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003576                 xor     r12d, r12d
.text:0000000000003579                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003582                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003587                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000358C                 mov     [rsp+0E8h+n], 1
.text:0000000000003595                 xor     r15d, r15d
.text:0000000000003598                 mov     [rsp+0E8h+s2], rax
.text:000000000000359D                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000035A5                 jmp     loc_2923
.text:00000000000035AA ; ---------------------------------------------------------------------------
.text:00000000000035AA
.text:00000000000035AA loc_35AA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000035AA                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000035AA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000035AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000035B4                 xor     r12d, r12d
.text:00000000000035B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000035C0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000035C5                 xor     r15d, r15d
.text:00000000000035C8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000035CD                 mov     [rsp+0E8h+n], 0
.text:00000000000035D6                 mov     [rsp+0E8h+s2], 0
.text:00000000000035DF                 jmp     loc_2923
.text:00000000000035E4 ; ---------------------------------------------------------------------------
.text:00000000000035E4
.text:00000000000035E4 loc_35E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000035E4                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000035E4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000035E9                 jz      short loc_3641
.text:00000000000035EB                 lea     rsi, asc_55FF   ; "`"
.text:00000000000035F2                 xor     edi, edi        ; domainname
.text:00000000000035F4                 mov     edx, 5          ; category
.text:00000000000035F9                 call    _dcgettext
.text:00000000000035FE                 mov     rcx, rax
.text:0000000000003601                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003606                 lea     rax, asc_55FF   ; "`"
.text:000000000000360D                 cmp     rcx, rax
.text:0000000000003610                 jz      loc_39AE
.text:0000000000003616
.text:0000000000003616 loc_3616:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003616                 lea     rsi, asc_55FD   ; "'"
.text:000000000000361D                 xor     edi, edi        ; domainname
.text:000000000000361F                 mov     edx, 5          ; category
.text:0000000000003624                 call    _dcgettext
.text:0000000000003629                 mov     rcx, rax
.text:000000000000362C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003631                 lea     rax, asc_55FD   ; "'"
.text:0000000000003638                 cmp     rcx, rax
.text:000000000000363B                 jz      loc_39C4
.text:0000000000003641
.text:0000000000003641 loc_3641:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003641                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003641                 xor     r15d, r15d
.text:0000000000003644                 test    ebx, ebx
.text:0000000000003646                 jz      loc_380D
.text:000000000000364C
.text:000000000000364C loc_364C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000364C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000364C                 test    ebx, ebx
.text:000000000000364E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003653                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003658                 xor     r12d, r12d
.text:000000000000365B                 mov     rdi, rbx        ; s
.text:000000000000365E                 call    _strlen
.text:0000000000003663                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003668                 mov     [rsp+0E8h+n], rax
.text:000000000000366D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003672                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003677                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003680                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003685                 jmp     loc_2923
.text:000000000000368A ; ---------------------------------------------------------------------------
.text:000000000000368A
.text:000000000000368A loc_368A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000368A                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:000000000000368A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000368F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003694                 xor     r12d, r12d
.text:0000000000003697                 mov     [rsp+0E8h+var_98], 0
.text:00000000000036A0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000036A5                 xor     r15d, r15d
.text:00000000000036A8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000036AD                 mov     [rsp+0E8h+n], 0
.text:00000000000036B6                 mov     [rsp+0E8h+s2], 0
.text:00000000000036BF                 jmp     loc_2923
.text:00000000000036C4 ; ---------------------------------------------------------------------------
.text:00000000000036C4
.text:00000000000036C4 loc_36C4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000036C4                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000036C4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000036C9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000036CE                 xor     r12d, r12d
.text:00000000000036D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000036DA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000036DF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000036E4                 jmp     loc_2903
.text:00000000000036E9 ; ---------------------------------------------------------------------------
.text:00000000000036E9
.text:00000000000036E9 loc_36E9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000036E9                 cmp     r13, r15
.text:00000000000036EC                 jbe     short loc_36F3
.text:00000000000036EE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000036F3
.text:00000000000036F3 loc_36F3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000036F3                 lea     rax, [rcx+2]
.text:00000000000036F7                 cmp     r13, rax
.text:00000000000036FA                 jbe     short loc_3702
.text:00000000000036FC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003702
.text:0000000000003702 loc_3702:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003702                 mov     eax, r12d
.text:0000000000003705                 lea     r15, [rcx+3]
.text:0000000000003709                 xor     r12d, r12d
.text:000000000000370C                 mov     ebx, 30h ; '0'
.text:0000000000003711                 jmp     loc_2A78
.text:0000000000003711 ; ---------------------------------------------------------------------------
.text:0000000000003716                 align 20h
.text:0000000000003720
.text:0000000000003720 loc_3720:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003720                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003725                 mov     rbp, r11
.text:0000000000003728                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000372C                 jmp     loc_33D9
.text:0000000000003731 ; ---------------------------------------------------------------------------
.text:0000000000003731
.text:0000000000003731 loc_3731:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003731                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003736                 xor     r12d, r12d
.text:0000000000003739                 jmp     loc_3240
.text:000000000000373E ; ---------------------------------------------------------------------------
.text:000000000000373E
.text:000000000000373E loc_373E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000373E                 xor     r10d, r10d
.text:0000000000003741                 jmp     loc_32FD
.text:0000000000003746 ; ---------------------------------------------------------------------------
.text:0000000000003746
.text:0000000000003746 loc_3746:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003746                 mov     [rsp+0E8h+var_98], 0
.text:000000000000374F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003754                 xor     r12d, r12d
.text:0000000000003757                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000375C                 jmp     loc_353B
.text:0000000000003761 ; ---------------------------------------------------------------------------
.text:0000000000003761
.text:0000000000003761 loc_3761:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003761                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003766                 mov     rsi, r14
.text:0000000000003769                 mov     rcx, r13
.text:000000000000376C                 mov     rax, rbx
.text:000000000000376F                 mov     rdi, rbx
.text:0000000000003772                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003778                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000377D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003785                 cmp     rsi, r11
.text:0000000000003788                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000378E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003796                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000379B                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000037A0                 jnb     short loc_37C8
.text:00000000000037A2                 cmp     byte ptr [rcx], 0
.text:00000000000037A5                 jnz     short loc_37B7
.text:00000000000037A7                 jmp     short loc_37C8
.text:00000000000037A7 ; ---------------------------------------------------------------------------
.text:00000000000037A9                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000037B0                 cmp     byte ptr [r9+rax], 0
.text:00000000000037B5                 jz      short loc_37C5
.text:00000000000037B7
.text:00000000000037B7 loc_37B7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000037B7                 add     rax, 1
.text:00000000000037BB                 lea     rdx, [rbp+rax+0]
.text:00000000000037C0                 cmp     r11, rdx
.text:00000000000037C3                 ja      short loc_37B0
.text:00000000000037C5
.text:00000000000037C5 loc_37C5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000037C5                 mov     rdi, rax
.text:00000000000037C8
.text:00000000000037C8 loc_37C8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000037C8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000037C8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000037CD                 xor     r12d, r12d
.text:00000000000037D0                 jmp     loc_3236
.text:00000000000037D5 ; ---------------------------------------------------------------------------
.text:00000000000037D5
.text:00000000000037D5 loc_37D5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000037D5                 mov     rdi, rbx
.text:00000000000037D8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000037DE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000037E3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000037E9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000037F1                 xor     r12d, r12d
.text:00000000000037F4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000037F9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000037FE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003803                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003808                 jmp     loc_3236
.text:000000000000380D ; ---------------------------------------------------------------------------
.text:000000000000380D
.text:000000000000380D loc_380D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000380D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003812                 movzx   eax, byte ptr [rdx]
.text:0000000000003815                 test    al, al
.text:0000000000003817                 jz      loc_364C
.text:000000000000381D                 nop     dword ptr [rax]
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003820                 cmp     r13, r15
.text:0000000000003823                 jbe     short loc_3829
.text:0000000000003825                 mov     [r14+r15], al
.text:0000000000003829
.text:0000000000003829 loc_3829:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003829                 add     r15, 1
.text:000000000000382D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003832                 test    al, al
.text:0000000000003834                 jnz     short loc_3820
.text:0000000000003836                 jmp     loc_364C
.text:000000000000383B ; ---------------------------------------------------------------------------
.text:000000000000383B
.text:000000000000383B loc_383B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000383B                 mov     eax, edx
.text:000000000000383D                 jmp     loc_2D97
.text:0000000000003842 ; ---------------------------------------------------------------------------
.text:0000000000003842
.text:0000000000003842 loc_3842:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003842                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003846                 cmp     bl, 3Eh ; '>'
.text:0000000000003849                 ja      loc_30C0
.text:000000000000384F                 mov     rax, 7000A38200000000h
.text:0000000000003859                 bt      rax, rbx
.text:000000000000385D                 jnb     loc_30C0
.text:0000000000003863                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003868                 jnz     loc_3A52
.text:000000000000386E                 cmp     r13, r15
.text:0000000000003871                 jbe     short loc_3878
.text:0000000000003873                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003878
.text:0000000000003878 loc_3878:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003878                 lea     rax, [r15+1]
.text:000000000000387C                 cmp     r13, rax
.text:000000000000387F                 jbe     short loc_3887
.text:0000000000003881                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003887
.text:0000000000003887 loc_3887:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003887                 lea     rax, [r15+2]
.text:000000000000388B                 cmp     r13, rax
.text:000000000000388E                 jbe     short loc_3896
.text:0000000000003890                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003896
.text:0000000000003896 loc_3896:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003896                 lea     rax, [r15+3]
.text:000000000000389A                 cmp     r13, rax
.text:000000000000389D                 jbe     short loc_38A5
.text:000000000000389F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000038A5
.text:00000000000038A5 loc_38A5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000038A5                 add     r15, 4
.text:00000000000038A9                 xor     edx, edx
.text:00000000000038AB                 xor     r12d, r12d
.text:00000000000038AE                 xor     eax, eax
.text:00000000000038B0                 mov     rbp, rcx
.text:00000000000038B3                 jmp     loc_2A78
.text:00000000000038B8 ; ---------------------------------------------------------------------------
.text:00000000000038B8
.text:00000000000038B8 loc_38B8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000038B8                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000038B8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000038BA                 jz      loc_3A48
.text:00000000000038C0                 lea     rax, asc_55FD   ; "'"
.text:00000000000038C7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038CC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000038D1                 xor     r12d, r12d
.text:00000000000038D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038DD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000038E2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000038E7                 mov     [rsp+0E8h+n], 1
.text:00000000000038F0                 xor     r15d, r15d
.text:00000000000038F3                 mov     [rsp+0E8h+s2], rax
.text:00000000000038F8                 jmp     loc_2923
.text:00000000000038F8 ; ---------------------------------------------------------------------------
.text:00000000000038FD                 align 20h
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003900                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003900                 mov     rbp, r11
.text:0000000000003903                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003908                 jmp     loc_33D9
.text:000000000000390D ; ---------------------------------------------------------------------------
.text:000000000000390D
.text:000000000000390D loc_390D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000390D                 lea     rax, unk_55FB
.text:0000000000003914                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003919                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000391E                 xor     r12d, r12d
.text:0000000000003921                 mov     [rsp+0E8h+var_98], 0
.text:000000000000392A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000392F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003934                 mov     [rsp+0E8h+n], 1
.text:000000000000393D                 xor     r15d, r15d
.text:0000000000003940                 mov     [rsp+0E8h+s2], rax
.text:0000000000003945                 jmp     loc_2923
.text:000000000000394A ; ---------------------------------------------------------------------------
.text:000000000000394A
.text:000000000000394A loc_394A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000394A                 mov     eax, edx
.text:000000000000394C
.text:000000000000394C loc_394C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000394C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000394C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003951                 test    rbx, rbx
.text:0000000000003954                 jz      short loc_3982
.text:0000000000003956                 test    al, al
.text:0000000000003958                 jz      short loc_3982
.text:000000000000395A                 movzx   ecx, byte ptr [rbx]
.text:000000000000395D                 mov     rax, rbx
.text:0000000000003960                 test    cl, cl
.text:0000000000003962                 jz      short loc_3982
.text:0000000000003964                 mov     rdx, r15
.text:0000000000003967                 sub     rax, r15
.text:000000000000396A
.text:000000000000396A loc_396A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000396A                 cmp     r13, rdx
.text:000000000000396D                 jbe     short loc_3973
.text:000000000000396F                 mov     [r14+rdx], cl
.text:0000000000003973
.text:0000000000003973 loc_3973:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003973                 add     rdx, 1
.text:0000000000003977                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000397B                 test    cl, cl
.text:000000000000397D                 jnz     short loc_396A
.text:000000000000397F                 mov     r15, rdx
.text:0000000000003982
.text:0000000000003982 loc_3982:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003982                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003982                 cmp     r13, r15
.text:0000000000003985                 jbe     loc_3429
.text:000000000000398B                 mov     byte ptr [r14+r15], 0
.text:0000000000003990                 jmp     loc_3429
.text:0000000000003995 ; ---------------------------------------------------------------------------
.text:0000000000003995
.text:0000000000003995 loc_3995:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003995                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000399A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000399F                 mov     rbp, r11
.text:00000000000039A2                 setz    al
.text:00000000000039A5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000039A9                 jmp     loc_33D9
.text:00000000000039AE ; ---------------------------------------------------------------------------
.text:00000000000039AE
.text:00000000000039AE loc_39AE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000039AE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000039B2                 mov     rdi, rcx
.text:00000000000039B5                 call    gettext_quote
.text:00000000000039BA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000039BF                 jmp     loc_3616
.text:00000000000039C4 ; ---------------------------------------------------------------------------
.text:00000000000039C4
.text:00000000000039C4 loc_39C4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000039C4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000039C8                 mov     rdi, rcx
.text:00000000000039CB                 call    gettext_quote
.text:00000000000039D0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000039D5                 jmp     loc_3641
.text:00000000000039DA ; ---------------------------------------------------------------------------
.text:00000000000039DA
.text:00000000000039DA loc_39DA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000039DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000039DF                 mov     rbp, r11
.text:00000000000039E2                 mov     eax, edx
.text:00000000000039E4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000039E8                 jmp     loc_33D9
.text:00000000000039ED ; ---------------------------------------------------------------------------
.text:00000000000039ED
.text:00000000000039ED loc_39ED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000039ED                 sub     rsp, 8
.text:00000000000039F1                 mov     r8d, 5
.text:00000000000039F7                 mov     rcx, r11
.text:00000000000039FA                 push    [rsp+0F0h+var_88]
.text:00000000000039FE                 push    [rsp+0F8h+var_80]
.text:0000000000003A02                 mov     rdi, r14
.text:0000000000003A05                 push    [rsp+100h+var_C8]
.text:0000000000003A09                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003A11                 mov     rdx, [rsp+108h+s]
.text:0000000000003A16                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003A1B                 call    quotearg_buffer_restyled
.text:0000000000003A20                 add     rsp, 20h
.text:0000000000003A24                 mov     r15, rax
.text:0000000000003A27                 jmp     loc_3429
.text:0000000000003A2C ; ---------------------------------------------------------------------------
.text:0000000000003A2C
.text:0000000000003A2C loc_3A2C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003A2C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003A31                 jmp     loc_394C
.text:0000000000003A36 ; ---------------------------------------------------------------------------
.text:0000000000003A36
.text:0000000000003A36 loc_3A36:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003A36                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003A3E                 jmp     loc_33D9
.text:0000000000003A43 ; ---------------------------------------------------------------------------
.text:0000000000003A43
.text:0000000000003A43 loc_3A43:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003A43                 call    ___stack_chk_fail
.text:0000000000003A48 ; ---------------------------------------------------------------------------
.text:0000000000003A48
.text:0000000000003A48 loc_3A48:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003A48                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003A4D                 jmp     loc_34C1
.text:0000000000003A52 ; ---------------------------------------------------------------------------
.text:0000000000003A52
.text:0000000000003A52 loc_3A52:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003A52                 mov     rbp, r11
.text:0000000000003A55                 jmp     loc_33F0
.text:0000000000003A5A ; ---------------------------------------------------------------------------
.text:0000000000003A5A
.text:0000000000003A5A loc_3A5A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003A5A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A5F                 xor     eax, eax
.text:0000000000003A61                 xor     r12d, r12d
.text:0000000000003A64                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A6D                 jmp     loc_3014
.text:0000000000003A72 ; ---------------------------------------------------------------------------
.text:0000000000003A72
.text:0000000000003A72 loc_3A72:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003A72                 mov     rdx, r13
.text:0000000000003A75                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003A7A                 jmp     loc_3072
.text:0000000000003A7F ; ---------------------------------------------------------------------------
.text:0000000000003A7F
.text:0000000000003A7F def_28E1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003A7F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003A7F ; } // starts at 2850
.text:0000000000003A7F quotearg_buffer_restyled endp
.text:0000000000003A7F
.text:0000000000003A7F ; ---------------------------------------------------------------------------
.text:0000000000003A84                 align 10h
.text:0000000000003A90
.text:0000000000003A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A90
.text:0000000000003A90
.text:0000000000003A90 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003A90                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003A90
.text:0000000000003A90 var_50          = qword ptr -50h
.text:0000000000003A90 var_48          = qword ptr -48h
.text:0000000000003A90 var_40          = dword ptr -40h
.text:0000000000003A90 var_3C          = dword ptr -3Ch
.text:0000000000003A90
.text:0000000000003A90 ; __unwind {
.text:0000000000003A90                 push    r15
.text:0000000000003A92                 push    r14
.text:0000000000003A94                 movsxd  r15, edi
.text:0000000000003A97                 push    r13
.text:0000000000003A99                 push    r12
.text:0000000000003A9B                 mov     r14, rdx
.text:0000000000003A9E                 push    rbp
.text:0000000000003A9F                 push    rbx
.text:0000000000003AA0                 mov     rbp, rcx
.text:0000000000003AA3                 sub     rsp, 28h
.text:0000000000003AA7                 mov     [rsp+58h+var_50], rsi
.text:0000000000003AAC                 call    ___errno_location
.text:0000000000003AB1                 mov     r13, rax
.text:0000000000003AB4                 mov     eax, [rax]
.text:0000000000003AB6                 test    r15d, r15d
.text:0000000000003AB9                 mov     rbx, cs:slotvec
.text:0000000000003AC0                 mov     [rsp+58h+var_40], eax
.text:0000000000003AC4                 js      loc_3C31
.text:0000000000003ACA                 cmp     cs:nslots, r15d
.text:0000000000003AD1                 jg      short loc_3B35
.text:0000000000003AD3                 cmp     r15d, 7FFFFFFFh
.text:0000000000003ADA                 jz      loc_3C36
.text:0000000000003AE0                 lea     r12d, [r15+1]
.text:0000000000003AE4                 lea     rax, slotvec0
.text:0000000000003AEB                 movsxd  rsi, r12d
.text:0000000000003AEE                 shl     rsi, 4
.text:0000000000003AF2                 cmp     rbx, rax
.text:0000000000003AF5                 jz      loc_3C10
.text:0000000000003AFB                 mov     rdi, rbx
.text:0000000000003AFE                 call    xrealloc
.text:0000000000003B03                 mov     rbx, rax
.text:0000000000003B06                 mov     cs:slotvec, rax
.text:0000000000003B0D
.text:0000000000003B0D loc_3B0D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003B0D                 movsxd  rdi, cs:nslots
.text:0000000000003B14                 mov     edx, r12d
.text:0000000000003B17                 xor     esi, esi        ; c
.text:0000000000003B19                 sub     edx, edi
.text:0000000000003B1B                 shl     rdi, 4
.text:0000000000003B1F                 movsxd  rdx, edx
.text:0000000000003B22                 add     rdi, rbx        ; s
.text:0000000000003B25                 shl     rdx, 4          ; n
.text:0000000000003B29                 call    _memset
.text:0000000000003B2E                 mov     cs:nslots, r12d
.text:0000000000003B35
.text:0000000000003B35 loc_3B35:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003B35                 mov     eax, [rbp+4]
.text:0000000000003B38                 shl     r15, 4
.text:0000000000003B3C                 sub     rsp, 8
.text:0000000000003B40                 add     rbx, r15
.text:0000000000003B43                 lea     r15, [rbp+8]
.text:0000000000003B47                 mov     r8d, [rbp+0]
.text:0000000000003B4B                 mov     r11, [rbx]
.text:0000000000003B4E                 mov     r12, [rbx+8]
.text:0000000000003B52                 mov     rcx, r14
.text:0000000000003B55                 or      eax, 1
.text:0000000000003B58                 mov     [rsp+60h+var_3C], eax
.text:0000000000003B5C                 push    qword ptr [rbp+30h]
.text:0000000000003B5F                 mov     r9d, eax
.text:0000000000003B62                 push    qword ptr [rbp+28h]
.text:0000000000003B65                 push    r15
.text:0000000000003B67                 mov     rsi, r11
.text:0000000000003B6A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003B6F                 mov     rdi, r12
.text:0000000000003B72                 mov     [rsp+78h+var_48], r11
.text:0000000000003B77                 call    quotearg_buffer_restyled
.text:0000000000003B7C                 add     rsp, 20h
.text:0000000000003B80                 mov     r11, [rsp+58h+var_48]
.text:0000000000003B85                 cmp     r11, rax
.text:0000000000003B88                 ja      short loc_3BF1
.text:0000000000003B8A                 lea     rsi, [rax+1]
.text:0000000000003B8E                 lea     rax, slot0
.text:0000000000003B95                 cmp     r12, rax
.text:0000000000003B98                 mov     [rbx], rsi
.text:0000000000003B9B                 jz      short loc_3BAF
.text:0000000000003B9D                 mov     rdi, r12        ; ptr
.text:0000000000003BA0                 mov     [rsp+58h+var_48], rsi
.text:0000000000003BA5                 call    _free
.text:0000000000003BAA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003BAF
.text:0000000000003BAF loc_3BAF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003BAF                 mov     rdi, rsi
.text:0000000000003BB2                 mov     [rsp+58h+var_48], rsi
.text:0000000000003BB7                 call    xmalloc
.text:0000000000003BBC                 sub     rsp, 8
.text:0000000000003BC0                 mov     [rbx+8], rax
.text:0000000000003BC4                 mov     r8d, [rbp+0]
.text:0000000000003BC8                 push    qword ptr [rbp+30h]
.text:0000000000003BCB                 push    qword ptr [rbp+28h]
.text:0000000000003BCE                 mov     rcx, r14
.text:0000000000003BD1                 push    r15
.text:0000000000003BD3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003BD8                 mov     rdi, rax
.text:0000000000003BDB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003BE0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003BE5                 mov     r12, rax
.text:0000000000003BE8                 call    quotearg_buffer_restyled
.text:0000000000003BED                 add     rsp, 20h
.text:0000000000003BF1
.text:0000000000003BF1 loc_3BF1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003BF1                 mov     eax, [rsp+58h+var_40]
.text:0000000000003BF5                 mov     [r13+0], eax
.text:0000000000003BF9                 add     rsp, 28h
.text:0000000000003BFD                 mov     rax, r12
.text:0000000000003C00                 pop     rbx
.text:0000000000003C01                 pop     rbp
.text:0000000000003C02                 pop     r12
.text:0000000000003C04                 pop     r13
.text:0000000000003C06                 pop     r14
.text:0000000000003C08                 pop     r15
.text:0000000000003C0A                 retn
.text:0000000000003C0A ; ---------------------------------------------------------------------------
.text:0000000000003C0B                 align 10h
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003C10                 xor     edi, edi
.text:0000000000003C12                 call    xrealloc
.text:0000000000003C17                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000003C1F                 mov     rbx, rax
.text:0000000000003C22                 mov     cs:slotvec, rax
.text:0000000000003C29                 movups  xmmword ptr [rax], xmm0
.text:0000000000003C2C                 jmp     loc_3B0D
.text:0000000000003C31 ; ---------------------------------------------------------------------------
.text:0000000000003C31
.text:0000000000003C31 loc_3C31:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003C31                 call    _abort
.text:0000000000003C36 ; ---------------------------------------------------------------------------
.text:0000000000003C36
.text:0000000000003C36 loc_3C36:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003C36                 call    xalloc_die
.text:0000000000003C36 ; } // starts at 3A90
.text:0000000000003C36 quotearg_n_options endp
.text:0000000000003C36
.text:0000000000003C36 ; ---------------------------------------------------------------------------
.text:0000000000003C3B                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40 ; Attributes: info_from_lumina
.text:0000000000003C40
.text:0000000000003C40 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003C40                 public clone_quoting_options
.text:0000000000003C40 clone_quoting_options proc near
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 push    r12
.text:0000000000003C42                 push    rbp
.text:0000000000003C43                 push    rbx
.text:0000000000003C44                 mov     rbx, rdi
.text:0000000000003C47                 call    ___errno_location
.text:0000000000003C4C                 mov     r12d, [rax]
.text:0000000000003C4F                 mov     rbp, rax
.text:0000000000003C52                 lea     rax, default_quoting_options
.text:0000000000003C59                 test    rbx, rbx
.text:0000000000003C5C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003C61                 cmovz   rbx, rax
.text:0000000000003C65                 mov     rdi, rbx        ; src
.text:0000000000003C68                 call    xmemdup
.text:0000000000003C6D                 mov     [rbp+0], r12d
.text:0000000000003C71                 pop     rbx
.text:0000000000003C72                 pop     rbp
.text:0000000000003C73                 pop     r12
.text:0000000000003C75                 retn
.text:0000000000003C75 ; } // starts at 3C40
.text:0000000000003C75 clone_quoting_options endp
.text:0000000000003C75
.text:0000000000003C75 ; ---------------------------------------------------------------------------
.text:0000000000003C76                 align 20h
.text:0000000000003C80
.text:0000000000003C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C80
.text:0000000000003C80
.text:0000000000003C80                 public get_quoting_style
.text:0000000000003C80 get_quoting_style proc near
.text:0000000000003C80 ; __unwind {
.text:0000000000003C80                 lea     rax, default_quoting_options
.text:0000000000003C87                 test    rdi, rdi
.text:0000000000003C8A                 cmovz   rdi, rax
.text:0000000000003C8E                 mov     eax, [rdi]
.text:0000000000003C90                 retn
.text:0000000000003C90 ; } // starts at 3C80
.text:0000000000003C90 get_quoting_style endp
.text:0000000000003C90
.text:0000000000003C90 ; ---------------------------------------------------------------------------
.text:0000000000003C91                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0
.text:0000000000003CA0                 public set_quoting_style
.text:0000000000003CA0 set_quoting_style proc near
.text:0000000000003CA0 ; __unwind {
.text:0000000000003CA0                 lea     rax, default_quoting_options
.text:0000000000003CA7                 test    rdi, rdi
.text:0000000000003CAA                 cmovz   rdi, rax
.text:0000000000003CAE                 mov     [rdi], esi
.text:0000000000003CB0                 retn
.text:0000000000003CB0 ; } // starts at 3CA0
.text:0000000000003CB0 set_quoting_style endp
.text:0000000000003CB0
.text:0000000000003CB0 ; ---------------------------------------------------------------------------
.text:0000000000003CB1                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0 ; Attributes: info_from_lumina
.text:0000000000003CC0
.text:0000000000003CC0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003CC0                 public set_char_quoting
.text:0000000000003CC0 set_char_quoting proc near
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 lea     rax, default_quoting_options
.text:0000000000003CC7                 test    rdi, rdi
.text:0000000000003CCA                 mov     ecx, esi
.text:0000000000003CCC                 cmovz   rdi, rax
.text:0000000000003CD0                 mov     eax, esi
.text:0000000000003CD2                 and     ecx, 1Fh
.text:0000000000003CD5                 shr     al, 5
.text:0000000000003CD8                 movzx   eax, al
.text:0000000000003CDB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003CE0                 mov     esi, [rdi]
.text:0000000000003CE2                 mov     eax, esi
.text:0000000000003CE4                 shr     eax, cl
.text:0000000000003CE6                 xor     edx, eax
.text:0000000000003CE8                 and     eax, 1
.text:0000000000003CEB                 and     edx, 1
.text:0000000000003CEE                 shl     edx, cl
.text:0000000000003CF0                 xor     edx, esi
.text:0000000000003CF2                 mov     [rdi], edx
.text:0000000000003CF4                 retn
.text:0000000000003CF4 ; } // starts at 3CC0
.text:0000000000003CF4 set_char_quoting endp
.text:0000000000003CF4
.text:0000000000003CF4 ; ---------------------------------------------------------------------------
.text:0000000000003CF5                 align 20h
.text:0000000000003D00
.text:0000000000003D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D00
.text:0000000000003D00
.text:0000000000003D00                 public set_quoting_flags
.text:0000000000003D00 set_quoting_flags proc near
.text:0000000000003D00 ; __unwind {
.text:0000000000003D00                 lea     rax, default_quoting_options
.text:0000000000003D07                 test    rdi, rdi
.text:0000000000003D0A                 cmovz   rdi, rax
.text:0000000000003D0E                 mov     eax, [rdi+4]
.text:0000000000003D11                 mov     [rdi+4], esi
.text:0000000000003D14                 retn
.text:0000000000003D14 ; } // starts at 3D00
.text:0000000000003D14 set_quoting_flags endp
.text:0000000000003D14
.text:0000000000003D14 ; ---------------------------------------------------------------------------
.text:0000000000003D15                 align 20h
.text:0000000000003D20
.text:0000000000003D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D20
.text:0000000000003D20 ; Attributes: info_from_lumina
.text:0000000000003D20
.text:0000000000003D20 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003D20                 public set_custom_quoting
.text:0000000000003D20 set_custom_quoting proc near
.text:0000000000003D20 ; __unwind {
.text:0000000000003D20                 lea     rax, default_quoting_options
.text:0000000000003D27                 test    rdi, rdi
.text:0000000000003D2A                 cmovz   rdi, rax
.text:0000000000003D2E                 test    rsi, rsi
.text:0000000000003D31                 mov     dword ptr [rdi], 0Ah
.text:0000000000003D37                 jz      short loc_3D47
.text:0000000000003D39                 test    rdx, rdx
.text:0000000000003D3C                 jz      short loc_3D47
.text:0000000000003D3E                 mov     [rdi+28h], rsi
.text:0000000000003D42                 mov     [rdi+30h], rdx
.text:0000000000003D46                 retn
.text:0000000000003D47 ; ---------------------------------------------------------------------------
.text:0000000000003D47
.text:0000000000003D47 loc_3D47:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003D47                                         ; set_custom_quoting+1C↑j
.text:0000000000003D47                 sub     rsp, 8
.text:0000000000003D4B                 call    _abort
.text:0000000000003D4B ; } // starts at 3D20
.text:0000000000003D4B set_custom_quoting endp
.text:0000000000003D4B
.text:0000000000003D50
.text:0000000000003D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D50
.text:0000000000003D50 ; Attributes: info_from_lumina
.text:0000000000003D50
.text:0000000000003D50 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003D50                 public quotearg_buffer
.text:0000000000003D50 quotearg_buffer proc near
.text:0000000000003D50
.text:0000000000003D50 var_40          = qword ptr -40h
.text:0000000000003D50
.text:0000000000003D50 ; __unwind {
.text:0000000000003D50                 push    r15
.text:0000000000003D52                 push    r14
.text:0000000000003D54                 lea     rax, default_quoting_options
.text:0000000000003D5B                 push    r13
.text:0000000000003D5D                 push    r12
.text:0000000000003D5F                 mov     r13, rdi
.text:0000000000003D62                 push    rbp
.text:0000000000003D63                 push    rbx
.text:0000000000003D64                 mov     rbx, r8
.text:0000000000003D67                 mov     r14, rsi
.text:0000000000003D6A                 mov     r15, rdx
.text:0000000000003D6D                 sub     rsp, 18h
.text:0000000000003D71                 test    r8, r8
.text:0000000000003D74                 cmovz   rbx, rax
.text:0000000000003D78                 mov     [rsp+48h+var_40], rcx
.text:0000000000003D7D                 call    ___errno_location
.text:0000000000003D82                 mov     r12d, [rax]
.text:0000000000003D85                 mov     rbp, rax
.text:0000000000003D88                 lea     rax, [rbx+8]
.text:0000000000003D8C                 sub     rsp, 8
.text:0000000000003D90                 mov     r9d, [rbx+4]
.text:0000000000003D94                 push    qword ptr [rbx+30h]
.text:0000000000003D97                 mov     r8d, [rbx]
.text:0000000000003D9A                 push    qword ptr [rbx+28h]
.text:0000000000003D9D                 mov     rdx, r15
.text:0000000000003DA0                 push    rax
.text:0000000000003DA1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003DA6                 mov     rsi, r14
.text:0000000000003DA9                 mov     rdi, r13
.text:0000000000003DAC                 call    quotearg_buffer_restyled
.text:0000000000003DB1                 mov     [rbp+0], r12d
.text:0000000000003DB5                 add     rsp, 38h
.text:0000000000003DB9                 pop     rbx
.text:0000000000003DBA                 pop     rbp
.text:0000000000003DBB                 pop     r12
.text:0000000000003DBD                 pop     r13
.text:0000000000003DBF                 pop     r14
.text:0000000000003DC1                 pop     r15
.text:0000000000003DC3                 retn
.text:0000000000003DC3 ; } // starts at 3D50
.text:0000000000003DC3 quotearg_buffer endp
.text:0000000000003DC3
.text:0000000000003DC3 ; ---------------------------------------------------------------------------
.text:0000000000003DC4                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DD0
.text:0000000000003DD0 ; Attributes: info_from_lumina
.text:0000000000003DD0
.text:0000000000003DD0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003DD0                 public quotearg_alloc_mem
.text:0000000000003DD0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003DD0
.text:0000000000003DD0 var_5C          = dword ptr -5Ch
.text:0000000000003DD0 var_58          = qword ptr -58h
.text:0000000000003DD0 var_50          = qword ptr -50h
.text:0000000000003DD0 var_48          = qword ptr -48h
.text:0000000000003DD0 var_40          = qword ptr -40h
.text:0000000000003DD0
.text:0000000000003DD0 ; __unwind {
.text:0000000000003DD0                 push    r15
.text:0000000000003DD2                 push    r14
.text:0000000000003DD4                 lea     rax, default_quoting_options
.text:0000000000003DDB                 push    r13
.text:0000000000003DDD                 push    r12
.text:0000000000003DDF                 mov     r12, rdx
.text:0000000000003DE2                 push    rbp
.text:0000000000003DE3                 push    rbx
.text:0000000000003DE4                 mov     rbx, rcx
.text:0000000000003DE7                 mov     r14, rdi
.text:0000000000003DEA                 mov     r15, rsi
.text:0000000000003DED                 sub     rsp, 38h
.text:0000000000003DF1                 test    rcx, rcx
.text:0000000000003DF4                 cmovz   rbx, rax
.text:0000000000003DF8                 xor     ebp, ebp
.text:0000000000003DFA                 call    ___errno_location
.text:0000000000003DFF                 test    r12, r12
.text:0000000000003E02                 mov     r13, rax
.text:0000000000003E05                 mov     eax, [rax]
.text:0000000000003E07                 setz    bpl
.text:0000000000003E0B                 or      ebp, [rbx+4]
.text:0000000000003E0E                 lea     r10, [rbx+8]
.text:0000000000003E12                 sub     rsp, 8
.text:0000000000003E16                 mov     r8d, [rbx]
.text:0000000000003E19                 mov     rcx, r15
.text:0000000000003E1C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003E20                 push    qword ptr [rbx+30h]
.text:0000000000003E23                 mov     rdx, r14
.text:0000000000003E26                 push    qword ptr [rbx+28h]
.text:0000000000003E29                 push    r10
.text:0000000000003E2B                 xor     esi, esi
.text:0000000000003E2D                 mov     r9d, ebp
.text:0000000000003E30                 xor     edi, edi
.text:0000000000003E32                 mov     [rsp+88h+var_48], r10
.text:0000000000003E37                 call    quotearg_buffer_restyled
.text:0000000000003E3C                 lea     rsi, [rax+1]
.text:0000000000003E40                 mov     [rsp+88h+var_40], rax
.text:0000000000003E45                 add     rsp, 20h
.text:0000000000003E49                 mov     rdi, rsi
.text:0000000000003E4C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003E51                 call    xmalloc
.text:0000000000003E56                 mov     [rsp+68h+var_58], rax
.text:0000000000003E5B                 sub     rsp, 8
.text:0000000000003E5F                 push    qword ptr [rbx+30h]
.text:0000000000003E62                 push    qword ptr [rbx+28h]
.text:0000000000003E65                 mov     r10, [rsp+80h+var_48]
.text:0000000000003E6A                 mov     r9d, ebp
.text:0000000000003E6D                 mov     r8d, [rbx]
.text:0000000000003E70                 mov     rcx, r15
.text:0000000000003E73                 mov     rdx, r14
.text:0000000000003E76                 mov     rdi, rax
.text:0000000000003E79                 push    r10
.text:0000000000003E7B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003E80                 call    quotearg_buffer_restyled
.text:0000000000003E85                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003E89                 add     rsp, 20h
.text:0000000000003E8D                 test    r12, r12
.text:0000000000003E90                 mov     [r13+0], eax
.text:0000000000003E94                 jz      short loc_3E9F
.text:0000000000003E96                 mov     r11, [rsp+68h+var_40]
.text:0000000000003E9B                 mov     [r12], r11
.text:0000000000003E9F
.text:0000000000003E9F loc_3E9F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000003E9F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003EA4                 add     rsp, 38h
.text:0000000000003EA8                 pop     rbx
.text:0000000000003EA9                 pop     rbp
.text:0000000000003EAA                 pop     r12
.text:0000000000003EAC                 pop     r13
.text:0000000000003EAE                 pop     r14
.text:0000000000003EB0                 pop     r15
.text:0000000000003EB2                 retn
.text:0000000000003EB2 ; } // starts at 3DD0
.text:0000000000003EB2 quotearg_alloc_mem endp
.text:0000000000003EB2
.text:0000000000003EB2 ; ---------------------------------------------------------------------------
.text:0000000000003EB3                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0                 public quotearg_alloc
.text:0000000000003EC0 quotearg_alloc  proc near
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 mov     rcx, rdx
.text:0000000000003EC3                 xor     edx, edx
.text:0000000000003EC5                 jmp     quotearg_alloc_mem
.text:0000000000003EC5 ; } // starts at 3EC0
.text:0000000000003EC5 quotearg_alloc  endp
.text:0000000000003EC5
.text:0000000000003EC5 ; ---------------------------------------------------------------------------
.text:0000000000003ECA                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003ED0
.text:0000000000003ED0 ; Attributes: info_from_lumina
.text:0000000000003ED0
.text:0000000000003ED0 ; void __cdecl quotearg_free()
.text:0000000000003ED0                 public quotearg_free
.text:0000000000003ED0 quotearg_free   proc near
.text:0000000000003ED0 ; __unwind {
.text:0000000000003ED0                 mov     eax, cs:nslots
.text:0000000000003ED6                 push    r12
.text:0000000000003ED8                 mov     r12, cs:slotvec
.text:0000000000003EDF                 push    rbp
.text:0000000000003EE0                 push    rbx
.text:0000000000003EE1                 cmp     eax, 1
.text:0000000000003EE4                 jle     short loc_3F11
.text:0000000000003EE6                 sub     eax, 2
.text:0000000000003EE9                 lea     rbx, [r12+18h]
.text:0000000000003EEE                 shl     rax, 4
.text:0000000000003EF2                 lea     rbp, [r12+rax+28h]
.text:0000000000003EF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003F00                 mov     rdi, [rbx]      ; ptr
.text:0000000000003F03                 add     rbx, 10h
.text:0000000000003F07                 call    _free
.text:0000000000003F0C                 cmp     rbx, rbp
.text:0000000000003F0F                 jnz     short loc_3F00
.text:0000000000003F11
.text:0000000000003F11 loc_3F11:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003F11                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003F16                 lea     rbx, slot0
.text:0000000000003F1D                 cmp     rdi, rbx
.text:0000000000003F20                 jz      short loc_3F39
.text:0000000000003F22                 call    _free
.text:0000000000003F27                 mov     cs:slotvec0, 100h
.text:0000000000003F32                 mov     cs:off_208078, rbx
.text:0000000000003F39
.text:0000000000003F39 loc_3F39:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003F39                 lea     rbx, slotvec0
.text:0000000000003F40                 cmp     r12, rbx
.text:0000000000003F43                 jz      short loc_3F54
.text:0000000000003F45                 mov     rdi, r12        ; ptr
.text:0000000000003F48                 call    _free
.text:0000000000003F4D                 mov     cs:slotvec, rbx
.text:0000000000003F54
.text:0000000000003F54 loc_3F54:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003F54                 pop     rbx
.text:0000000000003F55                 mov     cs:nslots, 1
.text:0000000000003F5F                 pop     rbp
.text:0000000000003F60                 pop     r12
.text:0000000000003F62                 retn
.text:0000000000003F62 ; } // starts at 3ED0
.text:0000000000003F62 quotearg_free   endp
.text:0000000000003F62
.text:0000000000003F62 ; ---------------------------------------------------------------------------
.text:0000000000003F63                 align 10h
.text:0000000000003F70
.text:0000000000003F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F70
.text:0000000000003F70
.text:0000000000003F70                 public quotearg_n
.text:0000000000003F70 quotearg_n      proc near
.text:0000000000003F70 ; __unwind {
.text:0000000000003F70                 lea     rcx, default_quoting_options
.text:0000000000003F77                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F7E                 jmp     quotearg_n_options
.text:0000000000003F7E ; } // starts at 3F70
.text:0000000000003F7E quotearg_n      endp
.text:0000000000003F7E
.text:0000000000003F7E ; ---------------------------------------------------------------------------
.text:0000000000003F83                 align 10h
.text:0000000000003F90
.text:0000000000003F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F90
.text:0000000000003F90
.text:0000000000003F90                 public quotearg_n_mem
.text:0000000000003F90 quotearg_n_mem  proc near
.text:0000000000003F90 ; __unwind {
.text:0000000000003F90                 lea     rcx, default_quoting_options
.text:0000000000003F97                 jmp     quotearg_n_options
.text:0000000000003F97 ; } // starts at 3F90
.text:0000000000003F97 quotearg_n_mem  endp
.text:0000000000003F97
.text:0000000000003F97 ; ---------------------------------------------------------------------------
.text:0000000000003F9C                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FA0
.text:0000000000003FA0
.text:0000000000003FA0                 public quotearg
.text:0000000000003FA0 quotearg        proc near
.text:0000000000003FA0 ; __unwind {
.text:0000000000003FA0                 lea     rcx, default_quoting_options
.text:0000000000003FA7                 mov     rsi, rdi
.text:0000000000003FAA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003FB1                 xor     edi, edi
.text:0000000000003FB3                 jmp     quotearg_n_options
.text:0000000000003FB3 ; } // starts at 3FA0
.text:0000000000003FB3 quotearg        endp
.text:0000000000003FB3
.text:0000000000003FB3 ; ---------------------------------------------------------------------------
.text:0000000000003FB8                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FC0
.text:0000000000003FC0
.text:0000000000003FC0                 public quotearg_mem
.text:0000000000003FC0 quotearg_mem    proc near
.text:0000000000003FC0 ; __unwind {
.text:0000000000003FC0                 lea     rcx, default_quoting_options
.text:0000000000003FC7                 mov     rdx, rsi
.text:0000000000003FCA                 mov     rsi, rdi
.text:0000000000003FCD                 xor     edi, edi
.text:0000000000003FCF                 jmp     quotearg_n_options
.text:0000000000003FCF ; } // starts at 3FC0
.text:0000000000003FCF quotearg_mem    endp
.text:0000000000003FCF
.text:0000000000003FCF ; ---------------------------------------------------------------------------
.text:0000000000003FD4                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FE0
.text:0000000000003FE0 ; Attributes: info_from_lumina
.text:0000000000003FE0
.text:0000000000003FE0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003FE0                 public quotearg_n_style
.text:0000000000003FE0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003FE0
.text:0000000000003FE0 var_48          = dword ptr -48h
.text:0000000000003FE0 var_44          = qword ptr -44h
.text:0000000000003FE0 var_3C          = qword ptr -3Ch
.text:0000000000003FE0 var_34          = qword ptr -34h
.text:0000000000003FE0 var_2C          = qword ptr -2Ch
.text:0000000000003FE0 var_24          = qword ptr -24h
.text:0000000000003FE0 var_1C          = qword ptr -1Ch
.text:0000000000003FE0 var_14          = dword ptr -14h
.text:0000000000003FE0 var_10          = qword ptr -10h
.text:0000000000003FE0
.text:0000000000003FE0 ; __unwind {
.text:0000000000003FE0                 sub     rsp, 48h
.text:0000000000003FE4                 mov     rax, rdx
.text:0000000000003FE7                 mov     rdx, fs:28h
.text:0000000000003FF0                 mov     [rsp+48h+var_10], rdx
.text:0000000000003FF5                 xor     edx, edx
.text:0000000000003FF7                 cmp     esi, 0Ah
.text:0000000000003FFA                 jz      short loc_4064
.text:0000000000003FFC                 mov     [rsp+48h+var_48], esi
.text:0000000000003FFF                 mov     rcx, rsp
.text:0000000000004002                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004009                 mov     rsi, rax
.text:000000000000400C                 mov     [rsp+48h+var_44], 0
.text:0000000000004015                 mov     [rsp+48h+var_3C], 0
.text:000000000000401E                 mov     [rsp+48h+var_34], 0
.text:0000000000004027                 mov     [rsp+48h+var_2C], 0
.text:0000000000004030                 mov     [rsp+48h+var_24], 0
.text:0000000000004039                 mov     [rsp+48h+var_1C], 0
.text:0000000000004042                 mov     [rsp+48h+var_14], 0
.text:000000000000404A                 call    quotearg_n_options
.text:000000000000404F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004054                 xor     rcx, fs:28h
.text:000000000000405D                 jnz     short loc_4069
.text:000000000000405F                 add     rsp, 48h
.text:0000000000004063                 retn
.text:0000000000004064 ; ---------------------------------------------------------------------------
.text:0000000000004064
.text:0000000000004064 loc_4064:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004064                 call    _abort
.text:0000000000004069 ; ---------------------------------------------------------------------------
.text:0000000000004069
.text:0000000000004069 loc_4069:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004069                 call    ___stack_chk_fail
.text:0000000000004069 ; } // starts at 3FE0
.text:0000000000004069 quotearg_n_style endp
.text:0000000000004069
.text:0000000000004069 ; ---------------------------------------------------------------------------
.text:000000000000406E                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070 ; Attributes: info_from_lumina
.text:0000000000004070
.text:0000000000004070 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004070                 public quotearg_n_style_mem
.text:0000000000004070 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004070
.text:0000000000004070 var_48          = dword ptr -48h
.text:0000000000004070 var_44          = qword ptr -44h
.text:0000000000004070 var_3C          = qword ptr -3Ch
.text:0000000000004070 var_34          = qword ptr -34h
.text:0000000000004070 var_2C          = qword ptr -2Ch
.text:0000000000004070 var_24          = qword ptr -24h
.text:0000000000004070 var_1C          = qword ptr -1Ch
.text:0000000000004070 var_14          = dword ptr -14h
.text:0000000000004070 var_10          = qword ptr -10h
.text:0000000000004070
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 sub     rsp, 48h
.text:0000000000004074                 mov     rax, rdx
.text:0000000000004077                 mov     rdx, rcx
.text:000000000000407A                 mov     rcx, fs:28h
.text:0000000000004083                 mov     [rsp+48h+var_10], rcx
.text:0000000000004088                 xor     ecx, ecx
.text:000000000000408A                 cmp     esi, 0Ah
.text:000000000000408D                 jz      short loc_40F0
.text:000000000000408F                 mov     [rsp+48h+var_48], esi
.text:0000000000004092                 mov     rcx, rsp
.text:0000000000004095                 mov     rsi, rax
.text:0000000000004098                 mov     [rsp+48h+var_44], 0
.text:00000000000040A1                 mov     [rsp+48h+var_3C], 0
.text:00000000000040AA                 mov     [rsp+48h+var_34], 0
.text:00000000000040B3                 mov     [rsp+48h+var_2C], 0
.text:00000000000040BC                 mov     [rsp+48h+var_24], 0
.text:00000000000040C5                 mov     [rsp+48h+var_1C], 0
.text:00000000000040CE                 mov     [rsp+48h+var_14], 0
.text:00000000000040D6                 call    quotearg_n_options
.text:00000000000040DB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000040E0                 xor     rdx, fs:28h
.text:00000000000040E9                 jnz     short loc_40F5
.text:00000000000040EB                 add     rsp, 48h
.text:00000000000040EF                 retn
.text:00000000000040F0 ; ---------------------------------------------------------------------------
.text:00000000000040F0
.text:00000000000040F0 loc_40F0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000040F0                 call    _abort
.text:00000000000040F5 ; ---------------------------------------------------------------------------
.text:00000000000040F5
.text:00000000000040F5 loc_40F5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000040F5                 call    ___stack_chk_fail
.text:00000000000040F5 ; } // starts at 4070
.text:00000000000040F5 quotearg_n_style_mem endp
.text:00000000000040F5
.text:00000000000040F5 ; ---------------------------------------------------------------------------
.text:00000000000040FA                 align 20h
.text:0000000000004100
.text:0000000000004100 ; =============== S U B R O U T I N E =======================================
.text:0000000000004100
.text:0000000000004100
.text:0000000000004100                 public quotearg_style
.text:0000000000004100 quotearg_style  proc near               ; CODE XREF: robust_getcwd+45A↑p
.text:0000000000004100                                         ; robust_getcwd+4E1↑p
.text:0000000000004100 ; __unwind {
.text:0000000000004100                 mov     rdx, rsi
.text:0000000000004103                 mov     esi, edi
.text:0000000000004105                 xor     edi, edi
.text:0000000000004107                 jmp     quotearg_n_style
.text:0000000000004107 ; } // starts at 4100
.text:0000000000004107 quotearg_style  endp
.text:0000000000004107
.text:0000000000004107 ; ---------------------------------------------------------------------------
.text:000000000000410C                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110
.text:0000000000004110                 public quotearg_style_mem
.text:0000000000004110 quotearg_style_mem proc near
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 mov     rcx, rdx
.text:0000000000004113                 mov     rdx, rsi
.text:0000000000004116                 mov     esi, edi
.text:0000000000004118                 xor     edi, edi
.text:000000000000411A                 jmp     quotearg_n_style_mem
.text:000000000000411A ; } // starts at 4110
.text:000000000000411A quotearg_style_mem endp
.text:000000000000411A
.text:000000000000411A ; ---------------------------------------------------------------------------
.text:000000000000411F                 align 20h
.text:0000000000004120
.text:0000000000004120 ; =============== S U B R O U T I N E =======================================
.text:0000000000004120
.text:0000000000004120 ; Attributes: info_from_lumina
.text:0000000000004120
.text:0000000000004120 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004120                 public quotearg_char_mem
.text:0000000000004120 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004120                                         ; quotearg_colon+C↓j ...
.text:0000000000004120
.text:0000000000004120 var_48          = xmmword ptr -48h
.text:0000000000004120 var_38          = xmmword ptr -38h
.text:0000000000004120 var_28          = xmmword ptr -28h
.text:0000000000004120 var_18          = qword ptr -18h
.text:0000000000004120 var_10          = qword ptr -10h
.text:0000000000004120
.text:0000000000004120 ; __unwind {
.text:0000000000004120                 sub     rsp, 48h
.text:0000000000004124                 mov     ecx, edx
.text:0000000000004126                 mov     rax, fs:28h
.text:000000000000412F                 mov     [rsp+48h+var_10], rax
.text:0000000000004134                 xor     eax, eax
.text:0000000000004136                 mov     rax, cs:qword_208210
.text:000000000000413D                 mov     r8, rsp
.text:0000000000004140                 and     ecx, 1Fh
.text:0000000000004143                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000414B                 mov     [rsp+48h+var_18], rax
.text:0000000000004150                 mov     eax, edx
.text:0000000000004152                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004156                 shr     al, 5
.text:0000000000004159                 movzx   eax, al
.text:000000000000415C                 lea     r9, [r8+rax*4+8]
.text:0000000000004161                 movdqa  xmm0, cs:xmmword_2081F0
.text:0000000000004169                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000416E                 movdqa  xmm0, cs:xmmword_208200
.text:0000000000004176                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000417B                 mov     edx, [r9]
.text:000000000000417E                 mov     eax, edx
.text:0000000000004180                 shr     eax, cl
.text:0000000000004182                 not     eax
.text:0000000000004184                 and     eax, 1
.text:0000000000004187                 shl     eax, cl
.text:0000000000004189                 mov     rcx, r8
.text:000000000000418C                 xor     eax, edx
.text:000000000000418E                 mov     rdx, rsi
.text:0000000000004191                 mov     rsi, rdi
.text:0000000000004194                 mov     [r9], eax
.text:0000000000004197                 xor     edi, edi
.text:0000000000004199                 call    quotearg_n_options
.text:000000000000419E                 mov     rsi, [rsp+48h+var_10]
.text:00000000000041A3                 xor     rsi, fs:28h
.text:00000000000041AC                 jnz     short loc_41B3
.text:00000000000041AE                 add     rsp, 48h
.text:00000000000041B2                 retn
.text:00000000000041B3 ; ---------------------------------------------------------------------------
.text:00000000000041B3
.text:00000000000041B3 loc_41B3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000041B3                 call    ___stack_chk_fail
.text:00000000000041B3 ; } // starts at 4120
.text:00000000000041B3 quotearg_char_mem endp
.text:00000000000041B3
.text:00000000000041B3 ; ---------------------------------------------------------------------------
.text:00000000000041B8                 align 20h
.text:00000000000041C0
.text:00000000000041C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041C0
.text:00000000000041C0
.text:00000000000041C0                 public quotearg_char
.text:00000000000041C0 quotearg_char   proc near
.text:00000000000041C0 ; __unwind {
.text:00000000000041C0                 movsx   edx, sil
.text:00000000000041C4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000041CB                 jmp     quotearg_char_mem
.text:00000000000041CB ; } // starts at 41C0
.text:00000000000041CB quotearg_char   endp
.text:00000000000041CB
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0
.text:00000000000041D0                 public quotearg_colon
.text:00000000000041D0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 mov     edx, 3Ah ; ':'
.text:00000000000041D5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000041DC                 jmp     quotearg_char_mem
.text:00000000000041DC ; } // starts at 41D0
.text:00000000000041DC quotearg_colon  endp
.text:00000000000041DC
.text:00000000000041DC ; ---------------------------------------------------------------------------
.text:00000000000041E1                 align 10h
.text:00000000000041F0
.text:00000000000041F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041F0
.text:00000000000041F0
.text:00000000000041F0                 public quotearg_colon_mem
.text:00000000000041F0 quotearg_colon_mem proc near
.text:00000000000041F0 ; __unwind {
.text:00000000000041F0                 mov     edx, 3Ah ; ':'
.text:00000000000041F5                 jmp     quotearg_char_mem
.text:00000000000041F5 ; } // starts at 41F0
.text:00000000000041F5 quotearg_colon_mem endp
.text:00000000000041F5
.text:00000000000041F5 ; ---------------------------------------------------------------------------
.text:00000000000041FA                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200 ; Attributes: info_from_lumina
.text:0000000000004200
.text:0000000000004200 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004200                 public quotearg_n_style_colon
.text:0000000000004200 quotearg_n_style_colon proc near
.text:0000000000004200
.text:0000000000004200 var_48          = dword ptr -48h
.text:0000000000004200 var_44          = qword ptr -44h
.text:0000000000004200 var_3C          = qword ptr -3Ch
.text:0000000000004200 var_34          = qword ptr -34h
.text:0000000000004200 var_2C          = qword ptr -2Ch
.text:0000000000004200 var_24          = qword ptr -24h
.text:0000000000004200 var_1C          = qword ptr -1Ch
.text:0000000000004200 var_14          = dword ptr -14h
.text:0000000000004200 var_10          = qword ptr -10h
.text:0000000000004200
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 sub     rsp, 48h
.text:0000000000004204                 mov     rax, rdx
.text:0000000000004207                 mov     rdx, fs:28h
.text:0000000000004210                 mov     [rsp+48h+var_10], rdx
.text:0000000000004215                 xor     edx, edx
.text:0000000000004217                 cmp     esi, 0Ah
.text:000000000000421A                 jz      short loc_4284
.text:000000000000421C                 mov     [rsp+48h+var_48], esi
.text:000000000000421F                 mov     rcx, rsp
.text:0000000000004222                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004229                 mov     rsi, rax
.text:000000000000422C                 mov     [rsp+48h+var_44], 0
.text:0000000000004235                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000423E                 mov     [rsp+48h+var_34], 0
.text:0000000000004247                 mov     [rsp+48h+var_2C], 0
.text:0000000000004250                 mov     [rsp+48h+var_24], 0
.text:0000000000004259                 mov     [rsp+48h+var_1C], 0
.text:0000000000004262                 mov     [rsp+48h+var_14], 0
.text:000000000000426A                 call    quotearg_n_options
.text:000000000000426F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004274                 xor     rcx, fs:28h
.text:000000000000427D                 jnz     short loc_4289
.text:000000000000427F                 add     rsp, 48h
.text:0000000000004283                 retn
.text:0000000000004284 ; ---------------------------------------------------------------------------
.text:0000000000004284
.text:0000000000004284 loc_4284:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004284                 call    _abort
.text:0000000000004289 ; ---------------------------------------------------------------------------
.text:0000000000004289
.text:0000000000004289 loc_4289:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004289                 call    ___stack_chk_fail
.text:0000000000004289 ; } // starts at 4200
.text:0000000000004289 quotearg_n_style_colon endp
.text:0000000000004289
.text:0000000000004289 ; ---------------------------------------------------------------------------
.text:000000000000428E                 align 10h
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290 ; Attributes: info_from_lumina
.text:0000000000004290
.text:0000000000004290 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004290                 public quotearg_n_custom_mem
.text:0000000000004290 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004290                                         ; quotearg_custom+12↓j ...
.text:0000000000004290
.text:0000000000004290 var_48          = xmmword ptr -48h
.text:0000000000004290 var_38          = xmmword ptr -38h
.text:0000000000004290 var_28          = xmmword ptr -28h
.text:0000000000004290 var_18          = qword ptr -18h
.text:0000000000004290 var_10          = qword ptr -10h
.text:0000000000004290
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 sub     rsp, 48h
.text:0000000000004294                 mov     r9, rcx
.text:0000000000004297                 mov     rcx, cs:qword_208210
.text:000000000000429E                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000042A6                 mov     rax, fs:28h
.text:00000000000042AF                 mov     [rsp+48h+var_10], rax
.text:00000000000042B4                 xor     eax, eax
.text:00000000000042B6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000042BA                 test    rsi, rsi
.text:00000000000042BD                 mov     [rsp+48h+var_18], rcx
.text:00000000000042C2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000042C9                 movdqa  xmm0, cs:xmmword_2081F0
.text:00000000000042D1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000042D6                 movdqa  xmm0, cs:xmmword_208200
.text:00000000000042DE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000042E3                 jz      short loc_4317
.text:00000000000042E5                 test    rdx, rdx
.text:00000000000042E8                 jz      short loc_4317
.text:00000000000042EA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000042EF                 mov     [rsp+48h+var_18], rdx
.text:00000000000042F4                 mov     rcx, rsp
.text:00000000000042F7                 mov     rdx, r8
.text:00000000000042FA                 mov     rsi, r9
.text:00000000000042FD                 call    quotearg_n_options
.text:0000000000004302                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004307                 xor     rdi, fs:28h
.text:0000000000004310                 jnz     short loc_431C
.text:0000000000004312                 add     rsp, 48h
.text:0000000000004316                 retn
.text:0000000000004317 ; ---------------------------------------------------------------------------
.text:0000000000004317
.text:0000000000004317 loc_4317:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004317                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004317                 call    _abort
.text:000000000000431C ; ---------------------------------------------------------------------------
.text:000000000000431C
.text:000000000000431C loc_431C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000431C                 call    ___stack_chk_fail
.text:000000000000431C ; } // starts at 4290
.text:000000000000431C quotearg_n_custom_mem endp
.text:000000000000431C
.text:000000000000431C ; ---------------------------------------------------------------------------
.text:0000000000004321                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330
.text:0000000000004330                 public quotearg_n_custom
.text:0000000000004330 quotearg_n_custom proc near
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004337                 jmp     quotearg_n_custom_mem
.text:0000000000004337 ; } // starts at 4330
.text:0000000000004337 quotearg_n_custom endp
.text:0000000000004337
.text:0000000000004337 ; ---------------------------------------------------------------------------
.text:000000000000433C                 align 20h
.text:0000000000004340
.text:0000000000004340 ; =============== S U B R O U T I N E =======================================
.text:0000000000004340
.text:0000000000004340
.text:0000000000004340                 public quotearg_custom
.text:0000000000004340 quotearg_custom proc near
.text:0000000000004340 ; __unwind {
.text:0000000000004340                 mov     rcx, rdx
.text:0000000000004343                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000434A                 mov     rdx, rsi
.text:000000000000434D                 mov     rsi, rdi
.text:0000000000004350                 xor     edi, edi
.text:0000000000004352                 jmp     quotearg_n_custom_mem
.text:0000000000004352 ; } // starts at 4340
.text:0000000000004352 quotearg_custom endp
.text:0000000000004352
.text:0000000000004352 ; ---------------------------------------------------------------------------
.text:0000000000004357                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360
.text:0000000000004360                 public quotearg_custom_mem
.text:0000000000004360 quotearg_custom_mem proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 mov     r8, rcx
.text:0000000000004363                 mov     rcx, rdx
.text:0000000000004366                 mov     rdx, rsi
.text:0000000000004369                 mov     rsi, rdi
.text:000000000000436C                 xor     edi, edi
.text:000000000000436E                 jmp     quotearg_n_custom_mem
.text:000000000000436E ; } // starts at 4360
.text:000000000000436E quotearg_custom_mem endp
.text:000000000000436E
.text:000000000000436E ; ---------------------------------------------------------------------------
.text:0000000000004373                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380
.text:0000000000004380                 public quote_n_mem
.text:0000000000004380 quote_n_mem     proc near
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 lea     rcx, quote_quoting_options
.text:0000000000004387                 jmp     quotearg_n_options
.text:0000000000004387 ; } // starts at 4380
.text:0000000000004387 quote_n_mem     endp
.text:0000000000004387
.text:0000000000004387 ; ---------------------------------------------------------------------------
.text:000000000000438C                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390
.text:0000000000004390                 public quote_mem
.text:0000000000004390 quote_mem       proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 lea     rcx, quote_quoting_options
.text:0000000000004397                 mov     rdx, rsi
.text:000000000000439A                 mov     rsi, rdi
.text:000000000000439D                 xor     edi, edi
.text:000000000000439F                 jmp     quotearg_n_options
.text:000000000000439F ; } // starts at 4390
.text:000000000000439F quote_mem       endp
.text:000000000000439F
.text:000000000000439F ; ---------------------------------------------------------------------------
.text:00000000000043A4                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0
.text:00000000000043B0                 public quote_n
.text:00000000000043B0 quote_n         proc near
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 lea     rcx, quote_quoting_options
.text:00000000000043B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043BE                 jmp     quotearg_n_options
.text:00000000000043BE ; } // starts at 43B0
.text:00000000000043BE quote_n         endp
.text:00000000000043BE
.text:00000000000043BE ; ---------------------------------------------------------------------------
.text:00000000000043C3                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0
.text:00000000000043D0                 public quote
.text:00000000000043D0 quote           proc near               ; CODE XREF: robust_getcwd+282↑p
.text:00000000000043D0                                         ; robust_getcwd+39D↑p ...
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 lea     rcx, quote_quoting_options
.text:00000000000043D7                 mov     rsi, rdi
.text:00000000000043DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043E1                 xor     edi, edi
.text:00000000000043E3                 jmp     quotearg_n_options
.text:00000000000043E3 ; } // starts at 43D0
.text:00000000000043E3 quote           endp
.text:00000000000043E3
.text:00000000000043E3 ; ---------------------------------------------------------------------------
.text:00000000000043E8                 align 10h
.text:00000000000043F0
.text:00000000000043F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043F0
.text:00000000000043F0
.text:00000000000043F0                 public get_root_dev_ino
.text:00000000000043F0 get_root_dev_ino proc near              ; CODE XREF: robust_getcwd+2E↑p
.text:00000000000043F0
.text:00000000000043F0 var_A8          = qword ptr -0A8h
.text:00000000000043F0 var_A0          = qword ptr -0A0h
.text:00000000000043F0 var_10          = qword ptr -10h
.text:00000000000043F0
.text:00000000000043F0 ; __unwind {
.text:00000000000043F0                 push    rbx
.text:00000000000043F1                 lea     rsi, aLibs+6    ; filename
.text:00000000000043F8                 mov     rbx, rdi
.text:00000000000043FB                 mov     edi, 1          ; ver
.text:0000000000004400                 sub     rsp, 0A0h
.text:0000000000004407                 mov     rdx, rsp        ; stat_buf
.text:000000000000440A                 mov     rax, fs:28h
.text:0000000000004413                 mov     [rsp+0A8h+var_10], rax
.text:000000000000441B                 xor     eax, eax
.text:000000000000441D                 call    ___lxstat
.text:0000000000004422                 test    eax, eax
.text:0000000000004424                 jnz     short loc_4458
.text:0000000000004426                 mov     rax, [rsp+0A8h+var_A0]
.text:000000000000442B                 mov     [rbx], rax
.text:000000000000442E                 mov     rax, [rsp+0A8h+var_A8]
.text:0000000000004432                 mov     [rbx+8], rax
.text:0000000000004436                 mov     rax, rbx
.text:0000000000004439
.text:0000000000004439 loc_4439:                               ; CODE XREF: get_root_dev_ino+6A↓j
.text:0000000000004439                 mov     rcx, [rsp+0A8h+var_10]
.text:0000000000004441                 xor     rcx, fs:28h
.text:000000000000444A                 jnz     short loc_445C
.text:000000000000444C                 add     rsp, 0A0h
.text:0000000000004453                 pop     rbx
.text:0000000000004454                 retn
.text:0000000000004454 ; ---------------------------------------------------------------------------
.text:0000000000004455                 align 8
.text:0000000000004458
.text:0000000000004458 loc_4458:                               ; CODE XREF: get_root_dev_ino+34↑j
.text:0000000000004458                 xor     eax, eax
.text:000000000000445A                 jmp     short loc_4439
.text:000000000000445C ; ---------------------------------------------------------------------------
.text:000000000000445C
.text:000000000000445C loc_445C:                               ; CODE XREF: get_root_dev_ino+5A↑j
.text:000000000000445C                 call    ___stack_chk_fail
.text:000000000000445C ; } // starts at 43F0
.text:000000000000445C get_root_dev_ino endp
.text:000000000000445C
.text:000000000000445C ; ---------------------------------------------------------------------------
.text:0000000000004461                 align 10h
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470
.text:0000000000004470 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004470                 public version_etc_arn
.text:0000000000004470 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_48AB↓j
.text:0000000000004470                                         ; version_etc_va:loc_48FB↓p ...
.text:0000000000004470
.text:0000000000004470 var_58          = qword ptr -58h
.text:0000000000004470 var_50          = qword ptr -50h
.text:0000000000004470 var_48          = qword ptr -48h
.text:0000000000004470 var_40          = qword ptr -40h
.text:0000000000004470
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 push    r15
.text:0000000000004472                 push    r14
.text:0000000000004474                 push    r13
.text:0000000000004476                 push    r12
.text:0000000000004478                 mov     r12, r9
.text:000000000000447B                 push    rbp
.text:000000000000447C                 push    rbx
.text:000000000000447D                 mov     rbp, rdi
.text:0000000000004480                 mov     rbx, r8
.text:0000000000004483                 sub     rsp, 28h
.text:0000000000004487                 test    rsi, rsi
.text:000000000000448A                 jz      loc_45A8
.text:0000000000004490                 mov     r8, rdx
.text:0000000000004493                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000449A                 mov     r9, rcx
.text:000000000000449D                 xor     eax, eax
.text:000000000000449F                 mov     rcx, rsi
.text:00000000000044A2                 mov     esi, 1
.text:00000000000044A7                 call    ___fprintf_chk
.text:00000000000044AC
.text:00000000000044AC loc_44AC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000044AC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000044B3                 xor     edi, edi        ; domainname
.text:00000000000044B5                 mov     edx, 5          ; category
.text:00000000000044BA                 call    _dcgettext
.text:00000000000044BF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000044C6                 mov     rcx, rax
.text:00000000000044C9                 mov     r8d, 7E3h
.text:00000000000044CF                 mov     esi, 1
.text:00000000000044D4                 mov     rdi, rbp
.text:00000000000044D7                 xor     eax, eax
.text:00000000000044D9                 call    ___fprintf_chk
.text:00000000000044DE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000044E5                 xor     edi, edi        ; domainname
.text:00000000000044E7                 mov     edx, 5          ; category
.text:00000000000044EC                 call    _dcgettext
.text:00000000000044F1                 mov     rsi, rbp        ; stream
.text:00000000000044F4                 mov     rdi, rax        ; s
.text:00000000000044F7                 call    _fputs_unlocked
.text:00000000000044FC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004500                 ja      def_4514        ; jumptable 0000000000004514 default case
.text:0000000000004506                 lea     rdx, jpt_4514
.text:000000000000450D                 movsxd  rax, ds:(jpt_4514 - 5DC8h)[rdx+r12*4]
.text:0000000000004511                 add     rax, rdx
.text:0000000000004514                 jmp     rax             ; switch jump
.text:0000000000004514 ; ---------------------------------------------------------------------------
.text:0000000000004516                 align 20h
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004520                                         ; DATA XREF: .rodata:jpt_4514↓o
.text:0000000000004520                 mov     r9, [rbx+38h]   ; jumptable 0000000000004514 case 8
.text:0000000000004524                 mov     rax, [rbx+10h]
.text:0000000000004528                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000452F                 mov     r8, [rbx+8]
.text:0000000000004533                 mov     edx, 5          ; category
.text:0000000000004538                 xor     edi, edi        ; domainname
.text:000000000000453A                 mov     r13, [rbx+30h]
.text:000000000000453E                 mov     r12, [rbx+28h]
.text:0000000000004542                 mov     [rsp+58h+var_48], r9
.text:0000000000004547                 mov     r15, [rbx+20h]
.text:000000000000454B                 mov     r14, [rbx+18h]
.text:000000000000454F                 mov     [rsp+58h+var_58], rax
.text:0000000000004553                 mov     [rsp+58h+var_50], r8
.text:0000000000004558                 mov     rbx, [rbx]
.text:000000000000455B                 call    _dcgettext
.text:0000000000004560                 sub     rsp, 8
.text:0000000000004564
.text:0000000000004564 loc_4564:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004564                 mov     r9, [rsp+60h+var_48]
.text:0000000000004569                 mov     rdx, rax
.text:000000000000456C                 mov     rcx, rbx
.text:000000000000456F                 mov     esi, 1
.text:0000000000004574                 mov     rdi, rbp
.text:0000000000004577                 xor     eax, eax
.text:0000000000004579                 push    r9
.text:000000000000457B                 push    r13
.text:000000000000457D                 push    r12
.text:000000000000457F                 push    r15
.text:0000000000004581                 push    r14
.text:0000000000004583                 mov     r9, [rsp+88h+var_58]
.text:0000000000004588                 mov     r8, [rsp+88h+var_50]
.text:000000000000458D                 call    ___fprintf_chk
.text:0000000000004592                 add     rsp, 30h
.text:0000000000004596
.text:0000000000004596 loc_4596:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004596                                         ; DATA XREF: .rodata:jpt_4514↓o
.text:0000000000004596                 add     rsp, 28h        ; jumptable 0000000000004514 case 0
.text:000000000000459A                 pop     rbx
.text:000000000000459B                 pop     rbp
.text:000000000000459C                 pop     r12
.text:000000000000459E                 pop     r13
.text:00000000000045A0                 pop     r14
.text:00000000000045A2                 pop     r15
.text:00000000000045A4                 retn
.text:00000000000045A4 ; ---------------------------------------------------------------------------
.text:00000000000045A5                 align 8
.text:00000000000045A8
.text:00000000000045A8 loc_45A8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000045A8                 mov     r8, rcx
.text:00000000000045AB                 mov     rcx, rdx
.text:00000000000045AE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:00000000000045B5                 mov     esi, 1
.text:00000000000045BA                 xor     eax, eax
.text:00000000000045BC                 call    ___fprintf_chk
.text:00000000000045C1                 jmp     loc_44AC
.text:00000000000045C1 ; ---------------------------------------------------------------------------
.text:00000000000045C6                 align 10h
.text:00000000000045D0
.text:00000000000045D0 loc_45D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000045D0                                         ; DATA XREF: .rodata:jpt_4514↓o
.text:00000000000045D0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004514 case 9
.text:00000000000045D4                 mov     r9, [rbx+38h]
.text:00000000000045D8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000045DF                 mov     rax, [rbx+10h]
.text:00000000000045E3                 mov     r8, [rbx+8]
.text:00000000000045E7                 mov     edx, 5          ; category
.text:00000000000045EC                 mov     r13, [rbx+30h]
.text:00000000000045F0                 mov     r12, [rbx+28h]
.text:00000000000045F4                 mov     r15, [rbx+20h]
.text:00000000000045F8                 mov     r14, [rbx+18h]
.text:00000000000045FC                 mov     rbx, [rbx]
.text:00000000000045FF                 mov     [rsp+58h+var_40], r10
.text:0000000000004604                 mov     [rsp+58h+var_48], r9
.text:0000000000004609                 mov     [rsp+58h+var_58], rax
.text:000000000000460D                 mov     [rsp+58h+var_50], r8
.text:0000000000004612
.text:0000000000004612 loc_4612:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004612                 xor     edi, edi        ; domainname
.text:0000000000004614                 call    _dcgettext
.text:0000000000004619                 mov     r10, [rsp+58h+var_40]
.text:000000000000461E                 push    r10
.text:0000000000004620                 jmp     loc_4564
.text:0000000000004620 ; ---------------------------------------------------------------------------
.text:0000000000004625                 align 8
.text:0000000000004628
.text:0000000000004628 loc_4628:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004628                                         ; DATA XREF: .rodata:jpt_4514↓o
.text:0000000000004628                 mov     rbx, [rbx]      ; jumptable 0000000000004514 case 1
.text:000000000000462B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004632                 mov     edx, 5          ; category
.text:0000000000004637                 xor     edi, edi        ; domainname
.text:0000000000004639                 call    _dcgettext
.text:000000000000463E                 add     rsp, 28h
.text:0000000000004642                 mov     rcx, rbx
.text:0000000000004645                 mov     rdi, rbp
.text:0000000000004648                 pop     rbx
.text:0000000000004649                 pop     rbp
.text:000000000000464A                 pop     r12
.text:000000000000464C                 pop     r13
.text:000000000000464E                 pop     r14
.text:0000000000004650                 pop     r15
.text:0000000000004652                 mov     rdx, rax
.text:0000000000004655                 mov     esi, 1
.text:000000000000465A                 xor     eax, eax
.text:000000000000465C                 jmp     ___fprintf_chk
.text:000000000000465C ; ---------------------------------------------------------------------------
.text:0000000000004661                 align 8
.text:0000000000004668
.text:0000000000004668 loc_4668:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004668                                         ; DATA XREF: .rodata:jpt_4514↓o
.text:0000000000004668                 mov     r12, [rbx+8]    ; jumptable 0000000000004514 case 2
.text:000000000000466C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004673                 mov     rbx, [rbx]
.text:0000000000004676                 mov     edx, 5          ; category
.text:000000000000467B                 xor     edi, edi        ; domainname
.text:000000000000467D                 call    _dcgettext
.text:0000000000004682                 add     rsp, 28h
.text:0000000000004686                 mov     r8, r12
.text:0000000000004689                 mov     rcx, rbx
.text:000000000000468C                 mov     rdi, rbp
.text:000000000000468F                 mov     rdx, rax
.text:0000000000004692                 mov     esi, 1
.text:0000000000004697                 pop     rbx
.text:0000000000004698                 pop     rbp
.text:0000000000004699                 pop     r12
.text:000000000000469B                 pop     r13
.text:000000000000469D                 pop     r14
.text:000000000000469F                 pop     r15
.text:00000000000046A1                 xor     eax, eax
.text:00000000000046A3                 jmp     ___fprintf_chk
.text:00000000000046A3 ; ---------------------------------------------------------------------------
.text:00000000000046A8                 align 10h
.text:00000000000046B0
.text:00000000000046B0 loc_46B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000046B0                                         ; DATA XREF: .rodata:jpt_4514↓o
.text:00000000000046B0                 mov     r13, [rbx+10h]  ; jumptable 0000000000004514 case 3
.text:00000000000046B4                 mov     r12, [rbx+8]
.text:00000000000046B8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000046BF                 mov     rbx, [rbx]
.text:00000000000046C2                 mov     edx, 5          ; category
.text:00000000000046C7                 xor     edi, edi        ; domainname
.text:00000000000046C9                 call    _dcgettext
.text:00000000000046CE                 add     rsp, 28h
.text:00000000000046D2                 mov     r9, r13
.text:00000000000046D5                 mov     r8, r12
.text:00000000000046D8                 mov     rcx, rbx
.text:00000000000046DB                 mov     rdi, rbp
.text:00000000000046DE                 mov     rdx, rax
.text:00000000000046E1                 pop     rbx
.text:00000000000046E2                 pop     rbp
.text:00000000000046E3                 pop     r12
.text:00000000000046E5                 pop     r13
.text:00000000000046E7                 pop     r14
.text:00000000000046E9                 pop     r15
.text:00000000000046EB                 mov     esi, 1
.text:00000000000046F0                 xor     eax, eax
.text:00000000000046F2                 jmp     ___fprintf_chk
.text:00000000000046F2 ; ---------------------------------------------------------------------------
.text:00000000000046F7                 align 20h
.text:0000000000004700
.text:0000000000004700 loc_4700:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004700                                         ; DATA XREF: .rodata:jpt_4514↓o
.text:0000000000004700                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004514 case 4
.text:0000000000004707                 mov     edx, 5          ; category
.text:000000000000470C                 xor     edi, edi        ; domainname
.text:000000000000470E                 mov     r14, [rbx+18h]
.text:0000000000004712                 mov     r13, [rbx+10h]
.text:0000000000004716                 mov     r12, [rbx+8]
.text:000000000000471A                 mov     rbx, [rbx]
.text:000000000000471D                 call    _dcgettext
.text:0000000000004722                 sub     rsp, 8
.text:0000000000004726
.text:0000000000004726 loc_4726:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004726                 push    r14
.text:0000000000004728                 mov     rdx, rax
.text:000000000000472B                 mov     r9, r13
.text:000000000000472E                 mov     r8, r12
.text:0000000000004731                 mov     rcx, rbx
.text:0000000000004734                 mov     rdi, rbp
.text:0000000000004737                 mov     esi, 1
.text:000000000000473C                 xor     eax, eax
.text:000000000000473E                 call    ___fprintf_chk
.text:0000000000004743                 pop     rax
.text:0000000000004744                 pop     rdx
.text:0000000000004745                 add     rsp, 28h
.text:0000000000004749                 pop     rbx
.text:000000000000474A                 pop     rbp
.text:000000000000474B                 pop     r12
.text:000000000000474D                 pop     r13
.text:000000000000474F                 pop     r14
.text:0000000000004751                 pop     r15
.text:0000000000004753                 retn
.text:0000000000004753 ; ---------------------------------------------------------------------------
.text:0000000000004754                 align 8
.text:0000000000004758
.text:0000000000004758 loc_4758:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004758                                         ; DATA XREF: .rodata:jpt_4514↓o
.text:0000000000004758                 mov     r15, [rbx+20h]  ; jumptable 0000000000004514 case 5
.text:000000000000475C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004763                 mov     edx, 5          ; category
.text:0000000000004768                 xor     edi, edi        ; domainname
.text:000000000000476A                 mov     r14, [rbx+18h]
.text:000000000000476E                 mov     r13, [rbx+10h]
.text:0000000000004772                 mov     r12, [rbx+8]
.text:0000000000004776                 mov     rbx, [rbx]
.text:0000000000004779                 call    _dcgettext
.text:000000000000477E                 push    r15
.text:0000000000004780                 jmp     short loc_4726
.text:0000000000004780 ; ---------------------------------------------------------------------------
.text:0000000000004782                 align 8
.text:0000000000004788
.text:0000000000004788 loc_4788:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004788                                         ; DATA XREF: .rodata:jpt_4514↓o
.text:0000000000004788                 mov     r8, [rbx+8]     ; jumptable 0000000000004514 case 6
.text:000000000000478C                 mov     r12, [rbx+28h]
.text:0000000000004790                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004797                 mov     r15, [rbx+20h]
.text:000000000000479B                 mov     r14, [rbx+18h]
.text:000000000000479F                 mov     edx, 5          ; category
.text:00000000000047A4                 mov     r13, [rbx+10h]
.text:00000000000047A8                 xor     edi, edi        ; domainname
.text:00000000000047AA                 mov     rbx, [rbx]
.text:00000000000047AD                 mov     [rsp+58h+var_58], r8
.text:00000000000047B1                 call    _dcgettext
.text:00000000000047B6                 sub     rsp, 8
.text:00000000000047BA                 mov     r9, r13
.text:00000000000047BD                 push    r12
.text:00000000000047BF                 push    r15
.text:00000000000047C1                 push    r14
.text:00000000000047C3
.text:00000000000047C3 loc_47C3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000047C3                 mov     r8, [rsp+78h+var_58]
.text:00000000000047C8                 mov     rcx, rbx
.text:00000000000047CB                 mov     rdx, rax
.text:00000000000047CE                 mov     rdi, rbp
.text:00000000000047D1                 mov     esi, 1
.text:00000000000047D6                 xor     eax, eax
.text:00000000000047D8                 call    ___fprintf_chk
.text:00000000000047DD                 add     rsp, 20h
.text:00000000000047E1                 add     rsp, 28h
.text:00000000000047E5                 pop     rbx
.text:00000000000047E6                 pop     rbp
.text:00000000000047E7                 pop     r12
.text:00000000000047E9                 pop     r13
.text:00000000000047EB                 pop     r14
.text:00000000000047ED                 pop     r15
.text:00000000000047EF                 retn
.text:00000000000047F0 ; ---------------------------------------------------------------------------
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000047F0                                         ; DATA XREF: .rodata:jpt_4514↓o
.text:00000000000047F0                 mov     r9, [rbx+10h]   ; jumptable 0000000000004514 case 7
.text:00000000000047F4                 mov     r13, [rbx+30h]
.text:00000000000047F8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000047FF                 mov     r12, [rbx+28h]
.text:0000000000004803                 mov     r15, [rbx+20h]
.text:0000000000004807                 mov     edx, 5          ; category
.text:000000000000480C                 mov     r14, [rbx+18h]
.text:0000000000004810                 mov     r8, [rbx+8]
.text:0000000000004814                 xor     edi, edi        ; domainname
.text:0000000000004816                 mov     [rsp+58h+var_50], r9
.text:000000000000481B                 mov     rbx, [rbx]
.text:000000000000481E                 mov     [rsp+58h+var_58], r8
.text:0000000000004822                 call    _dcgettext
.text:0000000000004827                 push    r13
.text:0000000000004829                 push    r12
.text:000000000000482B                 push    r15
.text:000000000000482D                 push    r14
.text:000000000000482F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004834                 jmp     short loc_47C3
.text:0000000000004834 ; ---------------------------------------------------------------------------
.text:0000000000004836                 align 20h
.text:0000000000004840
.text:0000000000004840 def_4514:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004840                 mov     r10, [rbx+40h]  ; jumptable 0000000000004514 default case
.text:0000000000004844                 mov     r9, [rbx+38h]
.text:0000000000004848                 mov     edx, 5
.text:000000000000484D                 mov     rax, [rbx+10h]
.text:0000000000004851                 mov     r8, [rbx+8]
.text:0000000000004855                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000485C                 mov     r13, [rbx+30h]
.text:0000000000004860                 mov     r12, [rbx+28h]
.text:0000000000004864                 mov     r15, [rbx+20h]
.text:0000000000004868                 mov     r14, [rbx+18h]
.text:000000000000486C                 mov     [rsp+58h+var_40], r10
.text:0000000000004871                 mov     [rsp+58h+var_48], r9
.text:0000000000004876                 mov     [rsp+58h+var_58], rax
.text:000000000000487A                 mov     [rsp+58h+var_50], r8
.text:000000000000487F                 mov     rbx, [rbx]
.text:0000000000004882                 jmp     loc_4612
.text:0000000000004882 ; } // starts at 4470
.text:0000000000004882 version_etc_arn endp
.text:0000000000004882
.text:0000000000004882 ; ---------------------------------------------------------------------------
.text:0000000000004887                 align 10h
.text:0000000000004890
.text:0000000000004890 ; =============== S U B R O U T I N E =======================================
.text:0000000000004890
.text:0000000000004890 ; Attributes: info_from_lumina
.text:0000000000004890
.text:0000000000004890 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004890                 public version_etc_ar
.text:0000000000004890 version_etc_ar  proc near
.text:0000000000004890 ; __unwind {
.text:0000000000004890                 xor     r9d, r9d
.text:0000000000004893                 cmp     qword ptr [r8], 0
.text:0000000000004897                 jz      short loc_48AB
.text:0000000000004899                 nop     dword ptr [rax+00000000h]
.text:00000000000048A0
.text:00000000000048A0 loc_48A0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000048A0                 add     r9, 1
.text:00000000000048A4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000048A9                 jnz     short loc_48A0
.text:00000000000048AB
.text:00000000000048AB loc_48AB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000048AB                 jmp     version_etc_arn
.text:00000000000048AB ; } // starts at 4890
.text:00000000000048AB version_etc_ar  endp
.text:00000000000048AB
.text:00000000000048B0
.text:00000000000048B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048B0
.text:00000000000048B0 ; Attributes: info_from_lumina
.text:00000000000048B0
.text:00000000000048B0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000048B0                 public version_etc_va
.text:00000000000048B0 version_etc_va  proc near
.text:00000000000048B0
.text:00000000000048B0 authtab         = qword ptr -68h
.text:00000000000048B0 var_10          = qword ptr -10h
.text:00000000000048B0
.text:00000000000048B0 ; __unwind {
.text:00000000000048B0                 sub     rsp, 68h
.text:00000000000048B4                 mov     r10, r8
.text:00000000000048B7                 xor     r9d, r9d
.text:00000000000048BA                 mov     rax, fs:28h
.text:00000000000048C3                 mov     [rsp+68h+var_10], rax
.text:00000000000048C8                 xor     eax, eax
.text:00000000000048CA                 mov     r8, rsp
.text:00000000000048CD                 nop     dword ptr [rax]
.text:00000000000048D0
.text:00000000000048D0 loc_48D0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000048D0                 mov     eax, [r10]
.text:00000000000048D3                 cmp     eax, 2Fh ; '/'
.text:00000000000048D6                 ja      short loc_491A
.text:00000000000048D8                 mov     r11d, eax
.text:00000000000048DB                 add     r11, [r10+10h]
.text:00000000000048DF                 add     eax, 8
.text:00000000000048E2                 mov     [r10], eax
.text:00000000000048E5
.text:00000000000048E5 loc_48E5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000048E5                 mov     rax, [r11]
.text:00000000000048E8                 test    rax, rax
.text:00000000000048EB                 mov     [r8+r9*8], rax
.text:00000000000048EF                 jz      short loc_48FB
.text:00000000000048F1                 add     r9, 1
.text:00000000000048F5                 cmp     r9, 0Ah
.text:00000000000048F9                 jnz     short loc_48D0
.text:00000000000048FB
.text:00000000000048FB loc_48FB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000048FB                 call    version_etc_arn
.text:0000000000004900                 mov     rax, [rsp+68h+var_10]
.text:0000000000004905                 xor     rax, fs:28h
.text:000000000000490E                 jnz     short loc_4915
.text:0000000000004910                 add     rsp, 68h
.text:0000000000004914                 retn
.text:0000000000004915 ; ---------------------------------------------------------------------------
.text:0000000000004915
.text:0000000000004915 loc_4915:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004915                 call    ___stack_chk_fail
.text:000000000000491A ; ---------------------------------------------------------------------------
.text:000000000000491A
.text:000000000000491A loc_491A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000491A                 mov     r11, [r10+8]
.text:000000000000491E                 lea     rax, [r11+8]
.text:0000000000004922                 mov     [r10+8], rax
.text:0000000000004926                 jmp     short loc_48E5
.text:0000000000004926 ; } // starts at 48B0
.text:0000000000004926 version_etc_va  endp
.text:0000000000004926
.text:0000000000004926 ; ---------------------------------------------------------------------------
.text:0000000000004928                 align 10h
.text:0000000000004930
.text:0000000000004930 ; =============== S U B R O U T I N E =======================================
.text:0000000000004930
.text:0000000000004930 ; Attributes: info_from_lumina
.text:0000000000004930
.text:0000000000004930 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004930                 public version_etc
.text:0000000000004930 version_etc     proc near               ; CODE XREF: main+D3↑p
.text:0000000000004930
.text:0000000000004930 var_C0          = dword ptr -0C0h
.text:0000000000004930 var_B8          = qword ptr -0B8h
.text:0000000000004930 var_B0          = qword ptr -0B0h
.text:0000000000004930 var_A8          = byte ptr -0A8h
.text:0000000000004930 var_50          = qword ptr -50h
.text:0000000000004930 var_48          = byte ptr -48h
.text:0000000000004930 var_28          = qword ptr -28h
.text:0000000000004930 var_20          = qword ptr -20h
.text:0000000000004930 arg_0           = byte ptr  8
.text:0000000000004930
.text:0000000000004930 ; __unwind {
.text:0000000000004930                 push    rbp
.text:0000000000004931                 push    rbx
.text:0000000000004932                 mov     r10d, 20h ; ' '
.text:0000000000004938                 xor     r11d, r11d
.text:000000000000493B                 sub     rsp, 0B8h
.text:0000000000004942                 mov     rax, fs:28h
.text:000000000000494B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004950                 xor     eax, eax
.text:0000000000004952                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000495A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004962                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000496A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000496F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004977                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000497F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004984                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000498C                 xor     r9d, r9d
.text:000000000000498F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004994                 mov     rbp, rax
.text:0000000000004997                 nop     word ptr [rax+rax+00000000h]
.text:00000000000049A0
.text:00000000000049A0 loc_49A0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000049A0                 cmp     r10d, 2Fh ; '/'
.text:00000000000049A4                 ja      short loc_49FC
.text:00000000000049A6                 mov     eax, r10d
.text:00000000000049A9                 mov     r11d, 1
.text:00000000000049AF                 add     r10d, 8
.text:00000000000049B3                 add     rax, rbp
.text:00000000000049B6
.text:00000000000049B6 loc_49B6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000049B6                 mov     rax, [rax]
.text:00000000000049B9                 test    rax, rax
.text:00000000000049BC                 mov     [r8+r9*8], rax
.text:00000000000049C0                 jz      short loc_49CC
.text:00000000000049C2                 add     r9, 1
.text:00000000000049C6                 cmp     r9, 0Ah
.text:00000000000049CA                 jnz     short loc_49A0
.text:00000000000049CC
.text:00000000000049CC loc_49CC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000049CC                 test    r11b, r11b
.text:00000000000049CF                 jnz     short loc_49F5
.text:00000000000049D1
.text:00000000000049D1 loc_49D1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000049D1                 call    version_etc_arn
.text:00000000000049D6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000049DB                 xor     rax, fs:28h
.text:00000000000049E4                 jnz     short loc_49F0
.text:00000000000049E6                 add     rsp, 0B8h
.text:00000000000049ED                 pop     rbx
.text:00000000000049EE                 pop     rbp
.text:00000000000049EF                 retn
.text:00000000000049F0 ; ---------------------------------------------------------------------------
.text:00000000000049F0
.text:00000000000049F0 loc_49F0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000049F0                 call    ___stack_chk_fail
.text:00000000000049F5 ; ---------------------------------------------------------------------------
.text:00000000000049F5
.text:00000000000049F5 loc_49F5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000049F5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000049FA                 jmp     short loc_49D1
.text:00000000000049FC ; ---------------------------------------------------------------------------
.text:00000000000049FC
.text:00000000000049FC loc_49FC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000049FC                 mov     rax, rbx
.text:00000000000049FF                 add     rbx, 8
.text:0000000000004A03                 jmp     short loc_49B6
.text:0000000000004A03 ; } // starts at 4930
.text:0000000000004A03 version_etc     endp
.text:0000000000004A03
.text:0000000000004A03 ; ---------------------------------------------------------------------------
.text:0000000000004A05                 align 10h
.text:0000000000004A10
.text:0000000000004A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A10
.text:0000000000004A10 ; Attributes: info_from_lumina
.text:0000000000004A10
.text:0000000000004A10 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004A10                 public emit_bug_reporting_address
.text:0000000000004A10 emit_bug_reporting_address proc near
.text:0000000000004A10 ; __unwind {
.text:0000000000004A10                 push    rbx
.text:0000000000004A11                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004A18                 mov     edx, 5          ; category
.text:0000000000004A1D                 xor     edi, edi        ; domainname
.text:0000000000004A1F                 call    _dcgettext
.text:0000000000004A24                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004A2B                 mov     rsi, rax
.text:0000000000004A2E                 mov     edi, 1
.text:0000000000004A33                 xor     eax, eax
.text:0000000000004A35                 call    ___printf_chk
.text:0000000000004A3A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004A41                 mov     edx, 5          ; category
.text:0000000000004A46                 xor     edi, edi        ; domainname
.text:0000000000004A48                 call    _dcgettext
.text:0000000000004A4D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004A54                 lea     rdx, unk_51B5
.text:0000000000004A5B                 mov     rsi, rax
.text:0000000000004A5E                 mov     edi, 1
.text:0000000000004A63                 xor     eax, eax
.text:0000000000004A65                 call    ___printf_chk
.text:0000000000004A6A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A71                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004A78                 xor     edi, edi        ; domainname
.text:0000000000004A7A                 mov     edx, 5          ; category
.text:0000000000004A7F                 call    _dcgettext
.text:0000000000004A84                 mov     rsi, rbx        ; stream
.text:0000000000004A87                 mov     rdi, rax        ; s
.text:0000000000004A8A                 pop     rbx
.text:0000000000004A8B                 jmp     _fputs_unlocked
.text:0000000000004A8B ; } // starts at 4A10
.text:0000000000004A8B emit_bug_reporting_address endp
.text:0000000000004A8B
.text:0000000000004A90
.text:0000000000004A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A90
.text:0000000000004A90
.text:0000000000004A90                 public xmalloc
.text:0000000000004A90 xmalloc         proc near               ; CODE XREF: main+158↑p
.text:0000000000004A90                                         ; main+16D↑p ...
.text:0000000000004A90 ; __unwind {
.text:0000000000004A90                 push    rbx
.text:0000000000004A91                 mov     rbx, rdi
.text:0000000000004A94                 call    _malloc
.text:0000000000004A99                 test    rax, rax
.text:0000000000004A9C                 jnz     short loc_4AA3
.text:0000000000004A9E                 test    rbx, rbx
.text:0000000000004AA1                 jnz     short loc_4AA5
.text:0000000000004AA3
.text:0000000000004AA3 loc_4AA3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004AA3                 pop     rbx
.text:0000000000004AA4                 retn
.text:0000000000004AA5 ; ---------------------------------------------------------------------------
.text:0000000000004AA5
.text:0000000000004AA5 loc_4AA5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004AA5                 call    xalloc_die
.text:0000000000004AA5 ; } // starts at 4A90
.text:0000000000004AA5 xmalloc         endp
.text:0000000000004AA5
.text:0000000000004AA5 ; ---------------------------------------------------------------------------
.text:0000000000004AAA                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0 ; Attributes: info_from_lumina
.text:0000000000004AB0
.text:0000000000004AB0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004AB0                 public xnmalloc
.text:0000000000004AB0 xnmalloc        proc near
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 mov     rax, rdi
.text:0000000000004AB3                 mul     rsi
.text:0000000000004AB6                 mov     rdi, rax
.text:0000000000004AB9                 seto    al
.text:0000000000004ABC                 test    rdi, rdi
.text:0000000000004ABF                 js      short loc_4ACB
.text:0000000000004AC1                 movzx   eax, al
.text:0000000000004AC4                 test    rax, rax
.text:0000000000004AC7                 jnz     short loc_4ACB
.text:0000000000004AC9                 jmp     short xmalloc
.text:0000000000004ACB ; ---------------------------------------------------------------------------
.text:0000000000004ACB
.text:0000000000004ACB loc_4ACB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000004ACB                                         ; xnmalloc+17↑j
.text:0000000000004ACB                 sub     rsp, 8
.text:0000000000004ACF                 call    xalloc_die
.text:0000000000004ACF ; } // starts at 4AB0
.text:0000000000004ACF xnmalloc        endp
.text:0000000000004ACF
.text:0000000000004ACF ; ---------------------------------------------------------------------------
.text:0000000000004AD4                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AE0
.text:0000000000004AE0
.text:0000000000004AE0                 public xcharalloc
.text:0000000000004AE0 xcharalloc      proc near
.text:0000000000004AE0 ; __unwind {
.text:0000000000004AE0                 jmp     short xmalloc
.text:0000000000004AE0 ; } // starts at 4AE0
.text:0000000000004AE0 xcharalloc      endp
.text:0000000000004AE0
.text:0000000000004AE0 ; ---------------------------------------------------------------------------
.text:0000000000004AE2                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AF0
.text:0000000000004AF0 ; Attributes: info_from_lumina
.text:0000000000004AF0
.text:0000000000004AF0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004AF0                 public xrealloc
.text:0000000000004AF0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004AF0                                         ; quotearg_n_options+182↑p ...
.text:0000000000004AF0 ; __unwind {
.text:0000000000004AF0                 test    rsi, rsi
.text:0000000000004AF3                 push    rbx
.text:0000000000004AF4                 mov     rbx, rsi
.text:0000000000004AF7                 jnz     short loc_4AFE
.text:0000000000004AF9                 test    rdi, rdi
.text:0000000000004AFC                 jnz     short loc_4B18
.text:0000000000004AFE
.text:0000000000004AFE loc_4AFE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000004AFE                 mov     rsi, rbx        ; size
.text:0000000000004B01                 call    _realloc
.text:0000000000004B06                 test    rax, rax
.text:0000000000004B09                 jnz     short loc_4B10
.text:0000000000004B0B                 test    rbx, rbx
.text:0000000000004B0E                 jnz     short loc_4B21
.text:0000000000004B10
.text:0000000000004B10 loc_4B10:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004B10                 pop     rbx
.text:0000000000004B11                 retn
.text:0000000000004B11 ; ---------------------------------------------------------------------------
.text:0000000000004B12                 align 8
.text:0000000000004B18
.text:0000000000004B18 loc_4B18:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004B18                 call    _free
.text:0000000000004B1D                 xor     eax, eax
.text:0000000000004B1F                 pop     rbx
.text:0000000000004B20                 retn
.text:0000000000004B21 ; ---------------------------------------------------------------------------
.text:0000000000004B21
.text:0000000000004B21 loc_4B21:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004B21                 call    xalloc_die
.text:0000000000004B21 ; } // starts at 4AF0
.text:0000000000004B21 xrealloc        endp
.text:0000000000004B21
.text:0000000000004B21 ; ---------------------------------------------------------------------------
.text:0000000000004B26                 align 10h
.text:0000000000004B30
.text:0000000000004B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B30
.text:0000000000004B30 ; Attributes: info_from_lumina
.text:0000000000004B30
.text:0000000000004B30 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004B30                 public xnrealloc
.text:0000000000004B30 xnrealloc       proc near
.text:0000000000004B30 ; __unwind {
.text:0000000000004B30                 mov     rax, rsi
.text:0000000000004B33                 mul     rdx
.text:0000000000004B36                 mov     rsi, rax
.text:0000000000004B39                 seto    al
.text:0000000000004B3C                 test    rsi, rsi
.text:0000000000004B3F                 js      short loc_4B4B
.text:0000000000004B41                 movzx   eax, al
.text:0000000000004B44                 test    rax, rax
.text:0000000000004B47                 jnz     short loc_4B4B
.text:0000000000004B49                 jmp     short xrealloc
.text:0000000000004B4B ; ---------------------------------------------------------------------------
.text:0000000000004B4B
.text:0000000000004B4B loc_4B4B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000004B4B                                         ; xnrealloc+17↑j
.text:0000000000004B4B                 sub     rsp, 8
.text:0000000000004B4F                 call    xalloc_die
.text:0000000000004B4F ; } // starts at 4B30
.text:0000000000004B4F xnrealloc       endp
.text:0000000000004B4F
.text:0000000000004B4F ; ---------------------------------------------------------------------------
.text:0000000000004B54                 align 20h
.text:0000000000004B60
.text:0000000000004B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B60
.text:0000000000004B60 ; Attributes: info_from_lumina
.text:0000000000004B60
.text:0000000000004B60 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004B60                 public x2nrealloc
.text:0000000000004B60 x2nrealloc      proc near
.text:0000000000004B60 ; __unwind {
.text:0000000000004B60                 test    rdi, rdi
.text:0000000000004B63                 mov     r9, rdx
.text:0000000000004B66                 mov     rcx, [rsi]
.text:0000000000004B69                 jz      short loc_4BA0
.text:0000000000004B6B                 xor     edx, edx
.text:0000000000004B6D                 mov     rax, 5555555555555554h
.text:0000000000004B77                 div     r9
.text:0000000000004B7A                 cmp     rax, rcx
.text:0000000000004B7D                 jbe     short loc_4BBB
.text:0000000000004B7F                 mov     rax, rcx
.text:0000000000004B82                 shr     rax, 1
.text:0000000000004B85                 lea     rcx, [rax+rcx+1]
.text:0000000000004B8A
.text:0000000000004B8A loc_4B8A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000004B8A                 mov     [rsi], rcx
.text:0000000000004B8D                 imul    rcx, r9
.text:0000000000004B91                 mov     rsi, rcx
.text:0000000000004B94                 jmp     xrealloc
.text:0000000000004B94 ; ---------------------------------------------------------------------------
.text:0000000000004B99                 align 20h
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004BA0                 test    rcx, rcx
.text:0000000000004BA3                 jz      short loc_4BC8
.text:0000000000004BA5
.text:0000000000004BA5 loc_4BA5:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004BA5                 mov     rax, rcx
.text:0000000000004BA8                 mul     r9
.text:0000000000004BAB                 seto    dl
.text:0000000000004BAE                 test    rax, rax
.text:0000000000004BB1                 movzx   edx, dl
.text:0000000000004BB4                 js      short loc_4BBB
.text:0000000000004BB6                 test    rdx, rdx
.text:0000000000004BB9                 jz      short loc_4B8A
.text:0000000000004BBB
.text:0000000000004BBB loc_4BBB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000004BBB                                         ; x2nrealloc+54↑j
.text:0000000000004BBB                 sub     rsp, 8
.text:0000000000004BBF                 call    xalloc_die
.text:0000000000004BBF ; ---------------------------------------------------------------------------
.text:0000000000004BC4                 align 8
.text:0000000000004BC8
.text:0000000000004BC8 loc_4BC8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004BC8                 xor     edx, edx
.text:0000000000004BCA                 mov     eax, 80h
.text:0000000000004BCF                 xor     r8d, r8d
.text:0000000000004BD2                 div     r9
.text:0000000000004BD5                 test    rax, rax
.text:0000000000004BD8                 setz    r8b
.text:0000000000004BDC                 lea     rcx, [r8+rax]
.text:0000000000004BE0                 jmp     short loc_4BA5
.text:0000000000004BE0 ; } // starts at 4B60
.text:0000000000004BE0 x2nrealloc      endp
.text:0000000000004BE0
.text:0000000000004BE0 ; ---------------------------------------------------------------------------
.text:0000000000004BE2                 align 10h
.text:0000000000004BF0
.text:0000000000004BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BF0
.text:0000000000004BF0 ; Attributes: info_from_lumina
.text:0000000000004BF0
.text:0000000000004BF0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004BF0                 public x2realloc
.text:0000000000004BF0 x2realloc       proc near
.text:0000000000004BF0 ; __unwind {
.text:0000000000004BF0                 test    rdi, rdi
.text:0000000000004BF3                 mov     rax, [rsi]
.text:0000000000004BF6                 jz      short loc_4C20
.text:0000000000004BF8                 mov     rdx, 5555555555555553h
.text:0000000000004C02                 cmp     rax, rdx
.text:0000000000004C05                 ja      short loc_4C31
.text:0000000000004C07                 mov     rdx, rax
.text:0000000000004C0A                 shr     rdx, 1
.text:0000000000004C0D                 lea     rax, [rdx+rax+1]
.text:0000000000004C12
.text:0000000000004C12 loc_4C12:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004C12                 mov     [rsi], rax
.text:0000000000004C15                 mov     rsi, rax
.text:0000000000004C18                 jmp     xrealloc
.text:0000000000004C18 ; ---------------------------------------------------------------------------
.text:0000000000004C1D                 align 20h
.text:0000000000004C20
.text:0000000000004C20 loc_4C20:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004C20                 test    rax, rax
.text:0000000000004C23                 mov     edx, 80h
.text:0000000000004C28                 cmovz   rax, rdx
.text:0000000000004C2C                 test    rax, rax
.text:0000000000004C2F                 jns     short loc_4C12
.text:0000000000004C31
.text:0000000000004C31 loc_4C31:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004C31                 sub     rsp, 8
.text:0000000000004C35                 call    xalloc_die
.text:0000000000004C35 ; } // starts at 4BF0
.text:0000000000004C35 x2realloc       endp
.text:0000000000004C35
.text:0000000000004C35 ; ---------------------------------------------------------------------------
.text:0000000000004C3A                 align 20h
.text:0000000000004C40
.text:0000000000004C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C40
.text:0000000000004C40
.text:0000000000004C40 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004C40                 public xzalloc
.text:0000000000004C40 xzalloc         proc near
.text:0000000000004C40 ; __unwind {
.text:0000000000004C40                 push    rbx
.text:0000000000004C41                 mov     rbx, rdi
.text:0000000000004C44                 call    xmalloc
.text:0000000000004C49                 mov     rdx, rbx        ; n
.text:0000000000004C4C                 xor     esi, esi        ; c
.text:0000000000004C4E                 mov     rdi, rax        ; s
.text:0000000000004C51                 pop     rbx
.text:0000000000004C52                 jmp     _memset
.text:0000000000004C52 ; } // starts at 4C40
.text:0000000000004C52 xzalloc         endp
.text:0000000000004C52
.text:0000000000004C52 ; ---------------------------------------------------------------------------
.text:0000000000004C57                 align 20h
.text:0000000000004C60
.text:0000000000004C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C60
.text:0000000000004C60 ; Attributes: info_from_lumina
.text:0000000000004C60
.text:0000000000004C60 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004C60                 public xcalloc
.text:0000000000004C60 xcalloc         proc near
.text:0000000000004C60 ; __unwind {
.text:0000000000004C60                 mov     rax, rdi
.text:0000000000004C63                 sub     rsp, 8
.text:0000000000004C67                 mul     rsi
.text:0000000000004C6A                 seto    dl
.text:0000000000004C6D                 test    rax, rax
.text:0000000000004C70                 js      short loc_4C89
.text:0000000000004C72                 movzx   edx, dl
.text:0000000000004C75                 test    rdx, rdx
.text:0000000000004C78                 jnz     short loc_4C89
.text:0000000000004C7A                 call    _calloc
.text:0000000000004C7F                 test    rax, rax
.text:0000000000004C82                 jz      short loc_4C89
.text:0000000000004C84                 add     rsp, 8
.text:0000000000004C88                 retn
.text:0000000000004C89 ; ---------------------------------------------------------------------------
.text:0000000000004C89
.text:0000000000004C89 loc_4C89:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004C89                                         ; xcalloc+18↑j ...
.text:0000000000004C89                 call    xalloc_die
.text:0000000000004C89 ; } // starts at 4C60
.text:0000000000004C89 xcalloc         endp
.text:0000000000004C89
.text:0000000000004C89 ; ---------------------------------------------------------------------------
.text:0000000000004C8E                 align 10h
.text:0000000000004C90
.text:0000000000004C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C90
.text:0000000000004C90 ; Attributes: info_from_lumina
.text:0000000000004C90
.text:0000000000004C90 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004C90                 public xmemdup
.text:0000000000004C90 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004C90                                         ; xstrdup+11↓j
.text:0000000000004C90 ; __unwind {
.text:0000000000004C90                 push    rbp
.text:0000000000004C91                 push    rbx
.text:0000000000004C92                 mov     rbp, rdi
.text:0000000000004C95                 mov     rdi, rsi
.text:0000000000004C98                 mov     rbx, rsi
.text:0000000000004C9B                 sub     rsp, 8
.text:0000000000004C9F                 call    xmalloc
.text:0000000000004CA4                 add     rsp, 8
.text:0000000000004CA8                 mov     rdx, rbx        ; n
.text:0000000000004CAB                 mov     rsi, rbp        ; src
.text:0000000000004CAE                 pop     rbx
.text:0000000000004CAF                 pop     rbp
.text:0000000000004CB0                 mov     rdi, rax        ; dest
.text:0000000000004CB3                 jmp     _memcpy
.text:0000000000004CB3 ; } // starts at 4C90
.text:0000000000004CB3 xmemdup         endp
.text:0000000000004CB3
.text:0000000000004CB3 ; ---------------------------------------------------------------------------
.text:0000000000004CB8                 align 20h
.text:0000000000004CC0
.text:0000000000004CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CC0
.text:0000000000004CC0
.text:0000000000004CC0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004CC0                 public xstrdup
.text:0000000000004CC0 xstrdup         proc near
.text:0000000000004CC0 ; __unwind {
.text:0000000000004CC0                 push    rbx
.text:0000000000004CC1                 mov     rbx, rdi
.text:0000000000004CC4                 call    _strlen
.text:0000000000004CC9                 mov     rdi, rbx        ; src
.text:0000000000004CCC                 lea     rsi, [rax+1]    ; n
.text:0000000000004CD0                 pop     rbx
.text:0000000000004CD1                 jmp     short xmemdup
.text:0000000000004CD1 ; } // starts at 4CC0
.text:0000000000004CD1 xstrdup         endp
.text:0000000000004CD1
.text:0000000000004CD1 ; ---------------------------------------------------------------------------
.text:0000000000004CD3                 align 20h
.text:0000000000004CE0
.text:0000000000004CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CE0
.text:0000000000004CE0 ; Attributes: noreturn info_from_lumina
.text:0000000000004CE0
.text:0000000000004CE0 ; void __cdecl xalloc_die()
.text:0000000000004CE0                 public xalloc_die
.text:0000000000004CE0 xalloc_die      proc near               ; CODE XREF: nth_parent:loc_1C1D↑p
.text:0000000000004CE0                                         ; file_name_prepend:loc_1D07↑p ...
.text:0000000000004CE0 ; __unwind {
.text:0000000000004CE0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004CE7                 sub     rsp, 8
.text:0000000000004CEB                 mov     edx, 5          ; category
.text:0000000000004CF0                 xor     edi, edi        ; domainname
.text:0000000000004CF2                 call    _dcgettext
.text:0000000000004CF7                 mov     edi, cs:exit_failure ; status
.text:0000000000004CFD                 lea     rdx, format+4   ; format
.text:0000000000004D04                 mov     rcx, rax
.text:0000000000004D07                 xor     esi, esi        ; errnum
.text:0000000000004D09                 xor     eax, eax
.text:0000000000004D0B                 call    _error
.text:0000000000004D10                 call    _abort
.text:0000000000004D10 ; } // starts at 4CE0
.text:0000000000004D10 xalloc_die      endp
.text:0000000000004D10
.text:0000000000004D10 ; ---------------------------------------------------------------------------
.text:0000000000004D15                 align 20h
.text:0000000000004D20
.text:0000000000004D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D20
.text:0000000000004D20 ; Attributes: info_from_lumina
.text:0000000000004D20
.text:0000000000004D20 ; char *__cdecl xgetcwd()
.text:0000000000004D20                 public xgetcwd
.text:0000000000004D20 xgetcwd         proc near               ; CODE XREF: main:loc_18D2↑p
.text:0000000000004D20 ; __unwind {
.text:0000000000004D20                 push    rbx
.text:0000000000004D21                 xor     esi, esi        ; size
.text:0000000000004D23                 xor     edi, edi        ; buf
.text:0000000000004D25                 call    _getcwd
.text:0000000000004D2A                 test    rax, rax
.text:0000000000004D2D                 mov     rbx, rax
.text:0000000000004D30                 jz      short loc_4D40
.text:0000000000004D32
.text:0000000000004D32 loc_4D32:                               ; CODE XREF: xgetcwd+28↓j
.text:0000000000004D32                 mov     rax, rbx
.text:0000000000004D35                 pop     rbx
.text:0000000000004D36                 retn
.text:0000000000004D36 ; ---------------------------------------------------------------------------
.text:0000000000004D37                 align 20h
.text:0000000000004D40
.text:0000000000004D40 loc_4D40:                               ; CODE XREF: xgetcwd+10↑j
.text:0000000000004D40                 call    ___errno_location
.text:0000000000004D45                 cmp     dword ptr [rax], 0Ch
.text:0000000000004D48                 jnz     short loc_4D32
.text:0000000000004D4A                 call    xalloc_die
.text:0000000000004D4A ; } // starts at 4D20
.text:0000000000004D4A xgetcwd         endp
.text:0000000000004D4A
.text:0000000000004D4A ; ---------------------------------------------------------------------------
.text:0000000000004D4F                 align 10h
.text:0000000000004D50
.text:0000000000004D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D50
.text:0000000000004D50 ; Attributes: info_from_lumina
.text:0000000000004D50
.text:0000000000004D50 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004D50                 public rpl_mbrtowc
.text:0000000000004D50 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004D50
.text:0000000000004D50 pwc             = dword ptr -34h
.text:0000000000004D50 var_30          = qword ptr -30h
.text:0000000000004D50
.text:0000000000004D50 ; __unwind {
.text:0000000000004D50                 push    r13
.text:0000000000004D52                 push    r12
.text:0000000000004D54                 mov     r13, rsi
.text:0000000000004D57                 push    rbp
.text:0000000000004D58                 push    rbx
.text:0000000000004D59                 mov     rbx, rdi
.text:0000000000004D5C                 mov     r12, rdx
.text:0000000000004D5F                 sub     rsp, 18h
.text:0000000000004D63                 mov     rax, fs:28h
.text:0000000000004D6C                 mov     [rsp+38h+var_30], rax
.text:0000000000004D71                 xor     eax, eax
.text:0000000000004D73                 lea     rax, [rsp+38h+pwc]
.text:0000000000004D78                 test    rdi, rdi
.text:0000000000004D7B                 cmovz   rbx, rax
.text:0000000000004D7F                 mov     rdi, rbx        ; pwc
.text:0000000000004D82                 call    _mbrtowc
.text:0000000000004D87                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000004D8B                 mov     rbp, rax
.text:0000000000004D8E                 jbe     short loc_4DB0
.text:0000000000004D90                 test    r12, r12
.text:0000000000004D93                 jz      short loc_4DB0
.text:0000000000004D95                 xor     edi, edi
.text:0000000000004D97                 call    hard_locale
.text:0000000000004D9C                 test    al, al
.text:0000000000004D9E                 jnz     short loc_4DB0
.text:0000000000004DA0                 movzx   eax, byte ptr [r13+0]
.text:0000000000004DA5                 mov     ebp, 1
.text:0000000000004DAA                 mov     [rbx], eax
.text:0000000000004DAC                 nop     dword ptr [rax+00h]
.text:0000000000004DB0
.text:0000000000004DB0 loc_4DB0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004DB0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004DB0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004DB5                 xor     rdx, fs:28h
.text:0000000000004DBE                 mov     rax, rbp
.text:0000000000004DC1                 jnz     short loc_4DCE
.text:0000000000004DC3                 add     rsp, 18h
.text:0000000000004DC7                 pop     rbx
.text:0000000000004DC8                 pop     rbp
.text:0000000000004DC9                 pop     r12
.text:0000000000004DCB                 pop     r13
.text:0000000000004DCD                 retn
.text:0000000000004DCE ; ---------------------------------------------------------------------------
.text:0000000000004DCE
.text:0000000000004DCE loc_4DCE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000004DCE                 call    ___stack_chk_fail
.text:0000000000004DCE ; } // starts at 4D50
.text:0000000000004DCE rpl_mbrtowc     endp
.text:0000000000004DCE
.text:0000000000004DCE ; ---------------------------------------------------------------------------
.text:0000000000004DD3                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DE0
.text:0000000000004DE0 ; Attributes: info_from_lumina
.text:0000000000004DE0
.text:0000000000004DE0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004DE0                 public close_stream
.text:0000000000004DE0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004DE0                                         ; close_stdout+33↑p
.text:0000000000004DE0 ; __unwind {
.text:0000000000004DE0                 push    r12
.text:0000000000004DE2                 push    rbp
.text:0000000000004DE3                 mov     rbp, rdi
.text:0000000000004DE6                 push    rbx
.text:0000000000004DE7                 call    ___fpending
.text:0000000000004DEC                 mov     ebx, [rbp+0]
.text:0000000000004DEF                 mov     rdi, rbp        ; stream
.text:0000000000004DF2                 mov     r12, rax
.text:0000000000004DF5                 call    rpl_fclose
.text:0000000000004DFA                 and     ebx, 20h
.text:0000000000004DFD                 test    ebx, ebx
.text:0000000000004DFF                 jnz     short loc_4E18
.text:0000000000004E01                 test    eax, eax
.text:0000000000004E03                 jz      short loc_4E0F
.text:0000000000004E05                 test    r12, r12
.text:0000000000004E08                 mov     eax, 0FFFFFFFFh
.text:0000000000004E0D                 jz      short loc_4E48
.text:0000000000004E0F
.text:0000000000004E0F loc_4E0F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000004E0F                 pop     rbx
.text:0000000000004E10                 pop     rbp
.text:0000000000004E11                 pop     r12
.text:0000000000004E13                 retn
.text:0000000000004E13 ; ---------------------------------------------------------------------------
.text:0000000000004E14                 align 8
.text:0000000000004E18
.text:0000000000004E18 loc_4E18:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004E18                 test    eax, eax
.text:0000000000004E1A                 jnz     short loc_4E38
.text:0000000000004E1C                 call    ___errno_location
.text:0000000000004E21                 mov     dword ptr [rax], 0
.text:0000000000004E27                 mov     eax, 0FFFFFFFFh
.text:0000000000004E2C                 pop     rbx
.text:0000000000004E2D                 pop     rbp
.text:0000000000004E2E                 pop     r12
.text:0000000000004E30                 retn
.text:0000000000004E30 ; ---------------------------------------------------------------------------
.text:0000000000004E31                 align 8
.text:0000000000004E38
.text:0000000000004E38 loc_4E38:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004E38                 pop     rbx
.text:0000000000004E39                 mov     eax, 0FFFFFFFFh
.text:0000000000004E3E                 pop     rbp
.text:0000000000004E3F                 pop     r12
.text:0000000000004E41                 retn
.text:0000000000004E41 ; ---------------------------------------------------------------------------
.text:0000000000004E42                 align 8
.text:0000000000004E48
.text:0000000000004E48 loc_4E48:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004E48                 call    ___errno_location
.text:0000000000004E4D                 cmp     dword ptr [rax], 9
.text:0000000000004E50                 pop     rbx
.text:0000000000004E51                 pop     rbp
.text:0000000000004E52                 pop     r12
.text:0000000000004E54                 setnz   al
.text:0000000000004E57                 movzx   eax, al
.text:0000000000004E5A                 neg     eax
.text:0000000000004E5C                 retn
.text:0000000000004E5C ; } // starts at 4DE0
.text:0000000000004E5C close_stream    endp
.text:0000000000004E5C
.text:0000000000004E5C ; ---------------------------------------------------------------------------
.text:0000000000004E5D                 align 20h
.text:0000000000004E60
.text:0000000000004E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E60
.text:0000000000004E60
.text:0000000000004E60                 public hard_locale
.text:0000000000004E60 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004E60 ; __unwind {
.text:0000000000004E60                 sub     rsp, 8
.text:0000000000004E64                 xor     esi, esi        ; locale
.text:0000000000004E66                 call    _setlocale
.text:0000000000004E6B                 mov     rdx, rax
.text:0000000000004E6E                 mov     eax, 1
.text:0000000000004E73                 test    rdx, rdx
.text:0000000000004E76                 jz      short loc_4E95
.text:0000000000004E78                 lea     rdi, aC         ; "C"
.text:0000000000004E7F                 mov     ecx, 2
.text:0000000000004E84                 mov     rsi, rdx
.text:0000000000004E87                 repe cmpsb
.text:0000000000004E89                 setnbe  cl
.text:0000000000004E8C                 sbb     cl, 0
.text:0000000000004E8F                 xor     eax, eax
.text:0000000000004E91                 test    cl, cl
.text:0000000000004E93                 jnz     short loc_4EA0
.text:0000000000004E95
.text:0000000000004E95 loc_4E95:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004E95                 add     rsp, 8
.text:0000000000004E99                 retn
.text:0000000000004E99 ; ---------------------------------------------------------------------------
.text:0000000000004E9A                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 loc_4EA0:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004EA0                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004EA7                 mov     ecx, 6
.text:0000000000004EAC                 mov     rsi, rdx
.text:0000000000004EAF                 repe cmpsb
.text:0000000000004EB1                 setnbe  al
.text:0000000000004EB4                 sbb     al, 0
.text:0000000000004EB6                 test    al, al
.text:0000000000004EB8                 setnz   al
.text:0000000000004EBB                 add     rsp, 8
.text:0000000000004EBF                 retn
.text:0000000000004EBF ; } // starts at 4E60
.text:0000000000004EBF hard_locale     endp
.text:0000000000004EBF
.text:0000000000004EC0
.text:0000000000004EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EC0
.text:0000000000004EC0
.text:0000000000004EC0                 public locale_charset
.text:0000000000004EC0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004EC0 ; __unwind {
.text:0000000000004EC0                 sub     rsp, 8
.text:0000000000004EC4                 mov     edi, 0Eh        ; item
.text:0000000000004EC9                 call    _nl_langinfo
.text:0000000000004ECE                 test    rax, rax
.text:0000000000004ED1                 jz      short loc_4EF0
.text:0000000000004ED3                 cmp     byte ptr [rax], 0
.text:0000000000004ED6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000004EDD                 cmovz   rax, rdx
.text:0000000000004EE1                 add     rsp, 8
.text:0000000000004EE5                 retn
.text:0000000000004EE5 ; ---------------------------------------------------------------------------
.text:0000000000004EE6                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 loc_4EF0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004EF0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004EF7                 add     rsp, 8
.text:0000000000004EFB                 retn
.text:0000000000004EFB ; } // starts at 4EC0
.text:0000000000004EFB locale_charset  endp
.text:0000000000004EFB
.text:0000000000004EFB ; ---------------------------------------------------------------------------
.text:0000000000004EFC                 align 20h
.text:0000000000004F00
.text:0000000000004F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F00
.text:0000000000004F00 ; Attributes: info_from_lumina
.text:0000000000004F00
.text:0000000000004F00 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004F00                 public rpl_fclose
.text:0000000000004F00 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004F00 ; __unwind {
.text:0000000000004F00                 push    r12
.text:0000000000004F02                 push    rbp
.text:0000000000004F03                 push    rbx
.text:0000000000004F04                 mov     rbx, rdi
.text:0000000000004F07                 call    _fileno
.text:0000000000004F0C                 test    eax, eax
.text:0000000000004F0E                 mov     rdi, rbx        ; fp
.text:0000000000004F11                 js      short loc_4F67
.text:0000000000004F13                 call    ___freading
.text:0000000000004F18                 test    eax, eax
.text:0000000000004F1A                 jnz     short loc_4F48
.text:0000000000004F1C
.text:0000000000004F1C loc_4F1C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004F1C                 mov     rdi, rbx        ; stream
.text:0000000000004F1F                 call    rpl_fflush
.text:0000000000004F24                 test    eax, eax
.text:0000000000004F26                 jz      short loc_4F64
.text:0000000000004F28                 call    ___errno_location
.text:0000000000004F2D                 mov     r12d, [rax]
.text:0000000000004F30                 mov     rdi, rbx        ; stream
.text:0000000000004F33                 mov     rbp, rax
.text:0000000000004F36                 call    _fclose
.text:0000000000004F3B                 test    r12d, r12d
.text:0000000000004F3E                 jnz     short loc_4F70
.text:0000000000004F40
.text:0000000000004F40 loc_4F40:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004F40                 pop     rbx
.text:0000000000004F41                 pop     rbp
.text:0000000000004F42                 pop     r12
.text:0000000000004F44                 retn
.text:0000000000004F44 ; ---------------------------------------------------------------------------
.text:0000000000004F45                 align 8
.text:0000000000004F48
.text:0000000000004F48 loc_4F48:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004F48                 mov     rdi, rbx        ; stream
.text:0000000000004F4B                 call    _fileno
.text:0000000000004F50                 xor     esi, esi        ; offset
.text:0000000000004F52                 mov     edx, 1          ; whence
.text:0000000000004F57                 mov     edi, eax        ; fd
.text:0000000000004F59                 call    _lseek
.text:0000000000004F5E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F62                 jnz     short loc_4F1C
.text:0000000000004F64
.text:0000000000004F64 loc_4F64:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004F64                 mov     rdi, rbx        ; stream
.text:0000000000004F67
.text:0000000000004F67 loc_4F67:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004F67                 pop     rbx
.text:0000000000004F68                 pop     rbp
.text:0000000000004F69                 pop     r12
.text:0000000000004F6B                 jmp     _fclose
.text:0000000000004F70 ; ---------------------------------------------------------------------------
.text:0000000000004F70
.text:0000000000004F70 loc_4F70:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004F70                 mov     [rbp+0], r12d
.text:0000000000004F74                 mov     eax, 0FFFFFFFFh
.text:0000000000004F79                 jmp     short loc_4F40
.text:0000000000004F79 ; } // starts at 4F00
.text:0000000000004F79 rpl_fclose      endp
.text:0000000000004F79
.text:0000000000004F79 ; ---------------------------------------------------------------------------
.text:0000000000004F7B                 align 20h
.text:0000000000004F80
.text:0000000000004F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F80
.text:0000000000004F80 ; Attributes: info_from_lumina
.text:0000000000004F80
.text:0000000000004F80 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004F80                 public rpl_fflush
.text:0000000000004F80 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004F80 ; __unwind {
.text:0000000000004F80                 test    rdi, rdi
.text:0000000000004F83                 push    rbx
.text:0000000000004F84                 mov     rbx, rdi
.text:0000000000004F87                 jz      short loc_4F9A
.text:0000000000004F89                 call    ___freading
.text:0000000000004F8E                 test    eax, eax
.text:0000000000004F90                 jz      short loc_4F9A
.text:0000000000004F92                 test    dword ptr [rbx], 100h
.text:0000000000004F98                 jnz     short loc_4FA8
.text:0000000000004F9A
.text:0000000000004F9A loc_4F9A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004F9A                                         ; rpl_fflush+10↑j
.text:0000000000004F9A                 mov     rdi, rbx        ; stream
.text:0000000000004F9D                 pop     rbx
.text:0000000000004F9E                 jmp     _fflush
.text:0000000000004F9E ; ---------------------------------------------------------------------------
.text:0000000000004FA3                 align 8
.text:0000000000004FA8
.text:0000000000004FA8 loc_4FA8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004FA8                 mov     rdi, rbx
.text:0000000000004FAB                 mov     edx, 1
.text:0000000000004FB0                 xor     esi, esi
.text:0000000000004FB2                 call    rpl_fseeko
.text:0000000000004FB7                 mov     rdi, rbx        ; stream
.text:0000000000004FBA                 pop     rbx
.text:0000000000004FBB                 jmp     _fflush
.text:0000000000004FBB ; } // starts at 4F80
.text:0000000000004FBB rpl_fflush      endp
.text:0000000000004FBB
.text:0000000000004FC0
.text:0000000000004FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FC0
.text:0000000000004FC0 ; Attributes: info_from_lumina
.text:0000000000004FC0
.text:0000000000004FC0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004FC0                 public rpl_fseeko
.text:0000000000004FC0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004FC0 ; __unwind {
.text:0000000000004FC0                 mov     rax, [rdi+8]
.text:0000000000004FC4                 cmp     [rdi+10h], rax
.text:0000000000004FC8                 jz      short loc_4FD0
.text:0000000000004FCA
.text:0000000000004FCA loc_4FCA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004FCA                                         ; rpl_fseeko+1F↓j
.text:0000000000004FCA                 jmp     _fseeko
.text:0000000000004FCA ; ---------------------------------------------------------------------------
.text:0000000000004FCF                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 loc_4FD0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004FD0                 mov     rax, [rdi+20h]
.text:0000000000004FD4                 cmp     [rdi+28h], rax
.text:0000000000004FD8                 jnz     short loc_4FCA
.text:0000000000004FDA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004FDF                 jnz     short loc_4FCA
.text:0000000000004FE1                 push    r12
.text:0000000000004FE3                 push    rbp
.text:0000000000004FE4                 mov     r12d, edx
.text:0000000000004FE7                 push    rbx
.text:0000000000004FE8                 mov     rbp, rsi
.text:0000000000004FEB                 mov     rbx, rdi
.text:0000000000004FEE                 call    _fileno
.text:0000000000004FF3                 mov     edx, r12d       ; whence
.text:0000000000004FF6                 mov     rsi, rbp        ; offset
.text:0000000000004FF9                 mov     edi, eax        ; fd
.text:0000000000004FFB                 call    _lseek
.text:0000000000005000                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005004                 jz      short loc_5012
.text:0000000000005006                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005009                 mov     [rbx+90h], rax
.text:0000000000005010                 xor     eax, eax
.text:0000000000005012
.text:0000000000005012 loc_5012:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005012                 pop     rbx
.text:0000000000005013                 pop     rbp
.text:0000000000005014                 pop     r12
.text:0000000000005016                 retn
.text:0000000000005016 ; } // starts at 4FC0
.text:0000000000005016 rpl_fseeko      endp
.text:0000000000005016
.text:0000000000005016 ; ---------------------------------------------------------------------------
.text:0000000000005017                 align 20h
.text:0000000000005020
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020
.text:0000000000005020 ; Attributes: info_from_lumina
.text:0000000000005020
.text:0000000000005020 ; void _libc_csu_init(void)
.text:0000000000005020                 public __libc_csu_init
.text:0000000000005020 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 push    r15
.text:0000000000005022                 push    r14
.text:0000000000005024                 mov     r15, rdx
.text:0000000000005027                 push    r13
.text:0000000000005029                 push    r12
.text:000000000000502B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005032                 push    rbp
.text:0000000000005033                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000503A                 push    rbx
.text:000000000000503B                 mov     r13d, edi
.text:000000000000503E                 mov     r14, rsi
.text:0000000000005041                 sub     rbp, r12
.text:0000000000005044                 sub     rsp, 8
.text:0000000000005048                 sar     rbp, 3
.text:000000000000504C                 call    _init_proc
.text:0000000000005051                 test    rbp, rbp
.text:0000000000005054                 jz      short loc_5076
.text:0000000000005056                 xor     ebx, ebx
.text:0000000000005058                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005060
.text:0000000000005060 loc_5060:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005060                 mov     rdx, r15
.text:0000000000005063                 mov     rsi, r14
.text:0000000000005066                 mov     edi, r13d
.text:0000000000005069                 call    ds:(__frame_dummy_init_array_entry - 207B10h)[r12+rbx*8]
.text:000000000000506D                 add     rbx, 1
.text:0000000000005071                 cmp     rbp, rbx
.text:0000000000005074                 jnz     short loc_5060
.text:0000000000005076
.text:0000000000005076 loc_5076:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005076                 add     rsp, 8
.text:000000000000507A                 pop     rbx
.text:000000000000507B                 pop     rbp
.text:000000000000507C                 pop     r12
.text:000000000000507E                 pop     r13
.text:0000000000005080                 pop     r14
.text:0000000000005082                 pop     r15
.text:0000000000005084                 retn
.text:0000000000005084 ; } // starts at 5020
.text:0000000000005084 __libc_csu_init endp
.text:0000000000005084
.text:0000000000005084 ; ---------------------------------------------------------------------------
.text:0000000000005085                 align 10h
.text:0000000000005090
.text:0000000000005090 ; =============== S U B R O U T I N E =======================================
.text:0000000000005090
.text:0000000000005090
.text:0000000000005090 ; void _libc_csu_fini(void)
.text:0000000000005090                 public __libc_csu_fini
.text:0000000000005090 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005090 ; __unwind {
.text:0000000000005090                 rep retn
.text:0000000000005090 ; } // starts at 5090
.text:0000000000005090 __libc_csu_fini endp
.text:0000000000005090
.text:0000000000005090 ; ---------------------------------------------------------------------------
.text:0000000000005092                 align 20h
.text:00000000000050A0
.text:00000000000050A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050A0
.text:00000000000050A0
.text:00000000000050A0 atexit          proc near               ; CODE XREF: main+5B↑p
.text:00000000000050A0 ; __unwind {
.text:00000000000050A0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000050A7                 xor     esi, esi        ; obj
.text:00000000000050A9                 jmp     ___cxa_atexit
.text:00000000000050A9 ; } // starts at 50A0
.text:00000000000050A9 atexit          endp
.text:00000000000050A9
.text:00000000000050A9 _text           ends
.text:00000000000050A9
LOAD:00000000000050AE ; ===========================================================================
LOAD:00000000000050AE
LOAD:00000000000050AE ; Segment type: Pure code
LOAD:00000000000050AE ; Segment permissions: Read/Execute
LOAD:00000000000050AE LOAD            segment byte public 'CODE' use64
LOAD:00000000000050AE                 assume cs:LOAD
LOAD:00000000000050AE                 ;org 50AEh
LOAD:00000000000050AE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000050AE                 align 10h
LOAD:00000000000050AE LOAD            ends
LOAD:00000000000050AE
.fini:00000000000050B0 ; ===========================================================================
.fini:00000000000050B0
.fini:00000000000050B0 ; Segment type: Pure code
.fini:00000000000050B0 ; Segment permissions: Read/Execute
.fini:00000000000050B0 _fini           segment dword public 'CODE' use64
.fini:00000000000050B0                 assume cs:_fini
.fini:00000000000050B0                 ;org 50B0h
.fini:00000000000050B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000050B0
.fini:00000000000050B0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000050B0
.fini:00000000000050B0
.fini:00000000000050B0                 public _term_proc
.fini:00000000000050B0 _term_proc      proc near
.fini:00000000000050B0                 sub     rsp, 8          ; _fini
.fini:00000000000050B4                 add     rsp, 8
.fini:00000000000050B8                 retn
.fini:00000000000050B8 _term_proc      endp
.fini:00000000000050B8
.fini:00000000000050B8 _fini           ends
.fini:00000000000050B8
LOAD:00000000000050B9 ; ===========================================================================
LOAD:00000000000050B9
LOAD:00000000000050B9 ; Segment type: Pure code
LOAD:00000000000050B9 ; Segment permissions: Read/Execute
LOAD:00000000000050B9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000050B9                 assume cs:LOAD
LOAD:00000000000050B9                 ;org 50B9h
LOAD:00000000000050B9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000050B9                 align 20h
LOAD:00000000000050B9 LOAD            ends
LOAD:00000000000050B9
.rodata:00000000000050C0 ; ===========================================================================
.rodata:00000000000050C0
.rodata:00000000000050C0 ; Segment type: Pure data
.rodata:00000000000050C0 ; Segment permissions: Read
.rodata:00000000000050C0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000050C0                 assume cs:_rodata
.rodata:00000000000050C0                 ;org 50C0h
.rodata:00000000000050C0                 public _IO_stdin_used
.rodata:00000000000050C0 _IO_stdin_used  db    1
.rodata:00000000000050C1                 db    0
.rodata:00000000000050C2                 db    2
.rodata:00000000000050C3                 db    0
.rodata:00000000000050C4 ; const char aPwd_0[4]
.rodata:00000000000050C4 aPwd_0          db 'PWD',0              ; DATA XREF: logical_getcwd+2↑o
.rodata:00000000000050C8 ; const char needle[3]
.rodata:00000000000050C8 needle          db '/.',0               ; DATA XREF: logical_getcwd+38↑o
.rodata:00000000000050CB ; const char aFailedToStatS[]
.rodata:00000000000050CB aFailedToStatS  db 'failed to stat %s',0
.rodata:00000000000050CB                                         ; DATA XREF: robust_getcwd+423↑o
.rodata:00000000000050CB                                         ; robust_getcwd+45F↑o
.rodata:00000000000050DD ; const char path[]
.rodata:00000000000050DD path            db '..',0               ; DATA XREF: robust_getcwd+AB↑o
.rodata:00000000000050DD                                         ; robust_getcwd:loc_2015↑o ...
.rodata:00000000000050E0 ; const char aCannotOpenDire[]
.rodata:00000000000050E0 aCannotOpenDire db 'cannot open directory %s',0
.rodata:00000000000050E0                                         ; DATA XREF: robust_getcwd+4A3↑o
.rodata:00000000000050F9 ; const char aFailedToChdirT[]
.rodata:00000000000050F9 aFailedToChdirT db 'failed to chdir to %s',0
.rodata:00000000000050F9                                         ; DATA XREF: robust_getcwd+3DF↑o
.rodata:000000000000510F ; const char aReadingDirecto[]
.rodata:000000000000510F aReadingDirecto db 'reading directory %s',0
.rodata:000000000000510F                                         ; DATA XREF: robust_getcwd+3A2↑o
.rodata:0000000000005124 aPwd            db 'pwd',0              ; DATA XREF: main+C7↑o
.rodata:0000000000005124                                         ; usage+131↑o ...
.rodata:0000000000005128 ; const char aUsageSOption[]
.rodata:0000000000005128 aUsageSOption   db 'Usage: %s [OPTION]...',0Ah,0
.rodata:0000000000005128                                         ; DATA XREF: usage:loc_228D↑o
.rodata:000000000000513F asc_513F        db '[',0                ; DATA XREF: usage+166↑o
.rodata:0000000000005141 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+18D↑o
.rodata:0000000000005151 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000005151                                         ; DATA XREF: usage+1BD↑o
.rodata:0000000000005151                                         ; usage+2B4↑o ...
.rodata:0000000000005167 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1CE↑o
.rodata:0000000000005171 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1DA↑o
.rodata:0000000000005180 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+16D↑o
.rodata:000000000000518A aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+199↑o
.rodata:0000000000005194 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1B1↑o
.rodata:000000000000519E ; const char aSOnlineHelpS[]
.rodata:000000000000519E aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+222↑o
.rodata:000000000000519E                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000051B5 unk_51B5        db  47h ; G             ; DATA XREF: main+C0↑o
.rodata:00000000000051B5                                         ; usage+23E↑o ...
.rodata:00000000000051B6                 db  4Eh ; N
.rodata:00000000000051B7                 db  55h ; U
.rodata:00000000000051B8                 db  20h
.rodata:00000000000051B9 ; const char domainname[]
.rodata:00000000000051B9 domainname      db 'coreutils',0        ; DATA XREF: main+3C↑o
.rodata:00000000000051B9                                         ; main+48↑o ...
.rodata:00000000000051C3 ; const char s2[]
.rodata:00000000000051C3 s2              db 'en_',0              ; DATA XREF: usage+265↑o
.rodata:00000000000051C3                                         ; usage+326↑o
.rodata:00000000000051C7 ; const char aFullDocumentat[]
.rodata:00000000000051C7 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000051C7                                         ; DATA XREF: usage:loc_24B1↑o
.rodata:00000000000051C7                                         ; usage:loc_256E↑o
.rodata:00000000000051E2 ; const char name[]
.rodata:00000000000051E2 name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+6↑o
.rodata:00000000000051F2 ; const char dirname[]
.rodata:00000000000051F2 dirname         db '/usr/local/share/locale',0
.rodata:00000000000051F2                                         ; DATA XREF: main+35↑o
.rodata:000000000000520A ; const char shortopts[]
.rodata:000000000000520A shortopts       db 'LP',0               ; DATA XREF: main+67↑o
.rodata:000000000000520D aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+B9↑o
.rodata:000000000000521A ; const char msgid[]
.rodata:000000000000521A msgid           db 'ignoring non-option arguments',0
.rodata:000000000000521A                                         ; DATA XREF: main:loc_1900↑o
.rodata:0000000000005238 aLogical        db 'logical',0          ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000005240 aPhysical       db 'physical',0         ; DATA XREF: .data.rel.ro:0000000000207B40↓o
.rodata:0000000000005249 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207B60↓o
.rodata:000000000000524E aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207B80↓o
.rodata:0000000000005256                 align 8
.rodata:0000000000005258 ; const char aFailedToGetAtt[]
.rodata:0000000000005258 aFailedToGetAtt db 'failed to get attributes of %s',0
.rodata:0000000000005258                                         ; DATA XREF: robust_getcwd+4E6↑o
.rodata:0000000000005277                 align 8
.rodata:0000000000005278 ; const char aCouldnTFindDir[]
.rodata:0000000000005278 aCouldnTFindDir db 'couldn',27h,'t find directory entry in %s with matching i-node',0
.rodata:0000000000005278                                         ; DATA XREF: robust_getcwd+287↑o
.rodata:00000000000052B1                 align 8
.rodata:00000000000052B8 ; const char aTrySHelpForMor[]
.rodata:00000000000052B8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000052B8                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000052DF                 align 20h
.rodata:00000000000052E0 ; const char aPrintTheFullFi[]
.rodata:00000000000052E0 aPrintTheFullFi db 'Print the full filename of the current working directory.',0Ah
.rodata:00000000000052E0                                         ; DATA XREF: usage+84↑o
.rodata:00000000000052E0                 db 0Ah,0
.rodata:000000000000531C                 align 20h
.rodata:0000000000005320 ; const char aLLogicalUsePwd[]
.rodata:0000000000005320 aLLogicalUsePwd db '  -L, --logical   use PWD from environment, even if it contains s'
.rodata:0000000000005320                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000005320                 db 'ymlinks',0Ah
.rodata:0000000000005320                 db '  -P, --physical  avoid all symlinks',0Ah,0
.rodata:000000000000538F                 align 10h
.rodata:0000000000005390 ; const char aHelpDisplayThi[]
.rodata:0000000000005390 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005390                                         ; DATA XREF: usage+CE↑o
.rodata:00000000000053BD                 align 20h
.rodata:00000000000053C0 ; const char aVersionOutputV[]
.rodata:00000000000053C0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000053C0                                         ; DATA XREF: usage+F3↑o
.rodata:00000000000053F6                 align 8
.rodata:00000000000053F8 ; const char aIfNoOptionIsSp[]
.rodata:00000000000053F8 aIfNoOptionIsSp db 0Ah                  ; DATA XREF: usage+118↑o
.rodata:00000000000053F8                 db 'If no option is specified, -P is assumed.',0Ah,0
.rodata:0000000000005424                 align 8
.rodata:0000000000005428 ; const char aNoteYourShellM[]
.rodata:0000000000005428 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+13D↑o
.rodata:0000000000005428                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:0000000000005428                 db 'persedes',0Ah
.rodata:0000000000005428                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:0000000000005428                 db 'ocumentation',0Ah
.rodata:0000000000005428                 db 'for details about the options it supports.',0Ah,0
.rodata:00000000000054E7                 align 8
.rodata:00000000000054E8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000054E8                                         ; DATA XREF: usage+237↑o
.rodata:00000000000054E8                                         ; usage+29B↑o ...
.rodata:0000000000005510 ; const char aReportAnyTrans[]
.rodata:0000000000005510 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005510                                         ; DATA XREF: usage+38F↑o
.rodata:0000000000005510                 db 'am/>',0Ah,0
.rodata:0000000000005557                 align 8
.rodata:0000000000005558 ; const char aOrAvailableLoc[]
.rodata:0000000000005558 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005558                                         ; DATA XREF: usage:loc_24F6↑o
.rodata:000000000000558B a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005590 ; const char aWriteError[]
.rodata:0000000000005590 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2653↑o
.rodata:000000000000559C ; const char format[]
.rodata:000000000000559C format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000559C                                         ; close_stdout+8F↑o ...
.rodata:00000000000055A3                 align 8
.rodata:00000000000055A8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000055A8                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000055E0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000055E0                                         ; robust_getcwd:loc_21E5↑o ...
.rodata:00000000000055E8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000055EC unk_55EC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000055ED                 db  80h
.rodata:00000000000055EE                 db  98h
.rodata:00000000000055EF                 db    0
.rodata:00000000000055F0 unk_55F0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000055F1                 db  80h
.rodata:00000000000055F2                 db  99h
.rodata:00000000000055F3                 db    0
.rodata:00000000000055F4 unk_55F4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000055F5                 db    7
.rodata:00000000000055F6                 db  65h ; e
.rodata:00000000000055F7                 db    0
.rodata:00000000000055F8 unk_55F8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000055F9                 db 0AFh
.rodata:00000000000055FA                 db    0
.rodata:00000000000055FB unk_55FB        db  22h ; "             ; DATA XREF: gettext_quote:loc_2780↑o
.rodata:00000000000055FB                                         ; quotearg_buffer_restyled:loc_353B↑o ...
.rodata:00000000000055FC                 db    0
.rodata:00000000000055FD ; const char asc_55FD[2]
.rodata:00000000000055FD asc_55FD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000055FD                                         ; quotearg_buffer_restyled:loc_2903↑o ...
.rodata:00000000000055FF ; const char asc_55FF[2]
.rodata:00000000000055FF asc_55FF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000055FF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005601 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005609 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207BC8↓o
.rodata:000000000000560F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207BD0↓o
.rodata:000000000000561C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207BD8↓o
.rodata:000000000000561C                                         ; .data.rel.ro:0000000000207BF8↓o
.rodata:0000000000005629 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005629                                         ; DATA XREF: .data.rel.ro:0000000000207BE0↓o
.rodata:000000000000563D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207BE8↓o
.rodata:000000000000563F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207BF0↓o
.rodata:0000000000005647 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:000000000000564F                 align 20h
.rodata:0000000000005660 jpt_28E1        dd offset loc_368A - 5660h
.rodata:0000000000005660                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005660                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005660                 dd offset loc_28E3 - 5660h ; jump table for switch statement
.rodata:0000000000005660                 dd offset loc_38B8 - 5660h
.rodata:0000000000005660                 dd offset loc_36C4 - 5660h
.rodata:0000000000005660                 dd offset loc_34B4 - 5660h
.rodata:0000000000005660                 dd offset loc_3510 - 5660h
.rodata:0000000000005660                 dd offset loc_3565 - 5660h
.rodata:0000000000005660                 dd offset loc_35AA - 5660h
.rodata:0000000000005660                 dd offset loc_35E4 - 5660h
.rodata:0000000000005660                 dd offset loc_35E4 - 5660h
.rodata:0000000000005660                 dd offset loc_35E4 - 5660h
.rodata:000000000000568C jpt_2A3E        dd offset loc_2C60 - 568Ch, offset def_2A3E - 568Ch, offset def_2A3E - 568Ch
.rodata:000000000000568C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000568C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000568C                 dd offset def_2A3E - 568Ch, offset def_2A3E - 568Ch, offset def_2A3E - 568Ch ; jump table for switch statement
.rodata:000000000000568C                 dd offset def_2A3E - 568Ch, offset loc_2CA0 - 568Ch, offset loc_2BA8 - 568Ch
.rodata:000000000000568C                 dd offset loc_2B68 - 568Ch, offset loc_2D30 - 568Ch, offset loc_2D20 - 568Ch
.rodata:000000000000568C                 dd offset loc_2D10 - 568Ch, offset loc_2D00 - 568Ch, offset def_2A3E - 568Ch
.rodata:000000000000568C                 dd offset def_2A3E - 568Ch, offset def_2A3E - 568Ch, offset def_2A3E - 568Ch
.rodata:000000000000568C                 dd offset def_2A3E - 568Ch, offset def_2A3E - 568Ch, offset def_2A3E - 568Ch
.rodata:000000000000568C                 dd offset def_2A3E - 568Ch, offset def_2A3E - 568Ch, offset def_2A3E - 568Ch
.rodata:000000000000568C                 dd offset def_2A3E - 568Ch, offset def_2A3E - 568Ch, offset def_2A3E - 568Ch
.rodata:000000000000568C                 dd offset def_2A3E - 568Ch, offset def_2A3E - 568Ch, offset def_2A3E - 568Ch
.rodata:000000000000568C                 dd offset def_2A3E - 568Ch, offset def_2A3E - 568Ch, offset loc_2CF0 - 568Ch
.rodata:000000000000568C                 dd offset loc_2CE0 - 568Ch, offset loc_2CE0 - 568Ch, offset loc_2CB0 - 568Ch
.rodata:000000000000568C                 dd offset loc_2CE0 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2CE0 - 568Ch
.rodata:000000000000568C                 dd offset loc_2B43 - 568Ch, offset loc_2CE0 - 568Ch, offset loc_2CE0 - 568Ch
.rodata:000000000000568C                 dd offset loc_2CE0 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2CE0 - 568Ch
.rodata:000000000000568C                 dd offset loc_2CE0 - 568Ch, offset loc_2CE0 - 568Ch, offset loc_2CE0 - 568Ch
.rodata:000000000000568C                 dd offset loc_2B13 - 568Ch, offset def_2A3E - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2CE0 - 568Ch, offset loc_2BB8 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2CE0 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2CE0 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch, offset loc_2C88 - 568Ch
.rodata:000000000000568C                 dd offset loc_2A43 - 568Ch, offset loc_2CE0 - 568Ch, offset loc_2A43 - 568Ch
.rodata:000000000000568C                 dd offset loc_2CB0 - 568Ch
.rodata:0000000000005888 jpt_2DCA        dd offset loc_2E30 - 5888h, offset def_2DCA - 5888h, offset def_2DCA - 5888h
.rodata:0000000000005888                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005888                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005888                 dd offset def_2DCA - 5888h, offset def_2DCA - 5888h, offset def_2DCA - 5888h ; jump table for switch statement
.rodata:0000000000005888                 dd offset def_2DCA - 5888h, offset loc_2E20 - 5888h, offset loc_2F70 - 5888h
.rodata:0000000000005888                 dd offset loc_2F58 - 5888h, offset loc_2E08 - 5888h, offset loc_2F48 - 5888h
.rodata:0000000000005888                 dd offset loc_2DF0 - 5888h, offset loc_2F30 - 5888h, offset def_2DCA - 5888h
.rodata:0000000000005888                 dd offset def_2DCA - 5888h, offset def_2DCA - 5888h, offset def_2DCA - 5888h
.rodata:0000000000005888                 dd offset def_2DCA - 5888h, offset def_2DCA - 5888h, offset def_2DCA - 5888h
.rodata:0000000000005888                 dd offset def_2DCA - 5888h, offset def_2DCA - 5888h, offset def_2DCA - 5888h
.rodata:0000000000005888                 dd offset def_2DCA - 5888h, offset def_2DCA - 5888h, offset def_2DCA - 5888h
.rodata:0000000000005888                 dd offset def_2DCA - 5888h, offset def_2DCA - 5888h, offset def_2DCA - 5888h
.rodata:0000000000005888                 dd offset def_2DCA - 5888h, offset def_2DCA - 5888h, offset loc_2F18 - 5888h
.rodata:0000000000005888                 dd offset loc_2F00 - 5888h, offset loc_2F00 - 5888h, offset loc_2EE8 - 5888h
.rodata:0000000000005888                 dd offset loc_2F00 - 5888h, offset loc_2ED0 - 5888h, offset loc_2F00 - 5888h
.rodata:0000000000005888                 dd offset loc_2B40 - 5888h, offset loc_2F00 - 5888h, offset loc_2F00 - 5888h
.rodata:0000000000005888                 dd offset loc_2F00 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2F00 - 5888h
.rodata:0000000000005888                 dd offset loc_2F00 - 5888h, offset loc_2F00 - 5888h, offset loc_2F00 - 5888h
.rodata:0000000000005888                 dd offset loc_2B10 - 5888h, offset def_2DCA - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2F00 - 5888h, offset loc_2DD0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2F00 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2F00 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h, offset loc_2ED0 - 5888h
.rodata:0000000000005888                 dd offset loc_2A40 - 5888h, offset loc_2F00 - 5888h, offset loc_2A40 - 5888h
.rodata:0000000000005888                 dd offset loc_2EE8 - 5888h
.rodata:0000000000005A84                 align 20h
.rodata:0000000000005AA0                 public quoting_style_vals
.rodata:0000000000005AA0 quoting_style_vals db    0
.rodata:0000000000005AA1                 db    0
.rodata:0000000000005AA2                 db    0
.rodata:0000000000005AA3                 db    0
.rodata:0000000000005AA4                 db    1
.rodata:0000000000005AA5                 db    0
.rodata:0000000000005AA6                 db    0
.rodata:0000000000005AA7                 db    0
.rodata:0000000000005AA8                 db    2
.rodata:0000000000005AA9                 db    0
.rodata:0000000000005AAA                 db    0
.rodata:0000000000005AAB                 db    0
.rodata:0000000000005AAC                 db    3
.rodata:0000000000005AAD                 db    0
.rodata:0000000000005AAE                 db    0
.rodata:0000000000005AAF                 db    0
.rodata:0000000000005AB0                 db    4
.rodata:0000000000005AB1                 db    0
.rodata:0000000000005AB2                 db    0
.rodata:0000000000005AB3                 db    0
.rodata:0000000000005AB4                 db    5
.rodata:0000000000005AB5                 db    0
.rodata:0000000000005AB6                 db    0
.rodata:0000000000005AB7                 db    0
.rodata:0000000000005AB8                 db    6
.rodata:0000000000005AB9                 db    0
.rodata:0000000000005ABA                 db    0
.rodata:0000000000005ABB                 db    0
.rodata:0000000000005ABC                 db    7
.rodata:0000000000005ABD                 db    0
.rodata:0000000000005ABE                 db    0
.rodata:0000000000005ABF                 db    0
.rodata:0000000000005AC0                 db    8
.rodata:0000000000005AC1                 db    0
.rodata:0000000000005AC2                 db    0
.rodata:0000000000005AC3                 db    0
.rodata:0000000000005AC4                 db    9
.rodata:0000000000005AC5                 db    0
.rodata:0000000000005AC6                 db    0
.rodata:0000000000005AC7                 db    0
.rodata:0000000000005AC8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005AD4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000005ADB ; const char aC_0[]
.rodata:0000000000005ADB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_44AC↑o
.rodata:0000000000005ADF ; const char aWrittenByS[]
.rodata:0000000000005ADF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000005ADF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000005AEF ; const char aWrittenBySAndS[]
.rodata:0000000000005AEF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000005AEF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005B06 ; const char aWrittenBySSAnd[]
.rodata:0000000000005B06 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005B06                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005B22 ; const char aReportBugsToS[]
.rodata:0000000000005B22 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005B22                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005B37 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005B37                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000005B4D ; const char aSHomePageS[]
.rodata:0000000000005B4D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000005B4D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005B61                 align 8
.rodata:0000000000005B68 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005B68 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005B68                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005B68                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005B68                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005B68                 db '.',0Ah
.rodata:0000000000005B68                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005B68                 db 0Ah,0
.rodata:0000000000005C34                 align 8
.rodata:0000000000005C38 ; const char aWrittenBySSSAn[]
.rodata:0000000000005C38 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005C38                                         ; DATA XREF: version_etc_arn:loc_4700↑o
.rodata:0000000000005C38                 db 'and %s.',0Ah,0
.rodata:0000000000005C58 ; const char aWrittenBySSSSA[]
.rodata:0000000000005C58 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005C58                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005C58                 db '%s, and %s.',0Ah,0
.rodata:0000000000005C7C                 align 20h
.rodata:0000000000005C80 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005C80 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005C80                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005C80                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005CA8 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005CA8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005CA8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005CA8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005CD4                 align 8
.rodata:0000000000005CD8 ; const char aWrittenBySSSSS[]
.rodata:0000000000005CD8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005CD8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005CD8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005CD8                 db 'and %s.',0Ah,0
.rodata:0000000000005D08 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005D08 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005D08                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005D08                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005D08                 db '%s, and %s.',0Ah,0
.rodata:0000000000005D3C                 align 20h
.rodata:0000000000005D40 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005D40                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005D40                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005D40                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000005D7C                 align 20h
.rodata:0000000000005D80 ; const char aGeneralHelpUsi[]
.rodata:0000000000005D80 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005D80                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005D80                 db 0
.rodata:0000000000005DC1                 align 8
.rodata:0000000000005DC8 jpt_4514        dd offset loc_4596 - 5DC8h
.rodata:0000000000005DC8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005DC8                                         ; version_etc_arn+9D↑r
.rodata:0000000000005DC8                 dd offset loc_4628 - 5DC8h ; jump table for switch statement
.rodata:0000000000005DC8                 dd offset loc_4668 - 5DC8h
.rodata:0000000000005DC8                 dd offset loc_46B0 - 5DC8h
.rodata:0000000000005DC8                 dd offset loc_4700 - 5DC8h
.rodata:0000000000005DC8                 dd offset loc_4758 - 5DC8h
.rodata:0000000000005DC8                 dd offset loc_4788 - 5DC8h
.rodata:0000000000005DC8                 dd offset loc_47F0 - 5DC8h
.rodata:0000000000005DC8                 dd offset loc_4520 - 5DC8h
.rodata:0000000000005DC8                 dd offset loc_45D0 - 5DC8h
.rodata:0000000000005DF0                 align 20h
.rodata:0000000000005E00                 public version_etc_copyright
.rodata:0000000000005E00 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005E00                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000005E2F ; const char aMemoryExhauste[]
.rodata:0000000000005E2F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005E40 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005E42 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4EA0↑o
.rodata:0000000000005E48 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005E48                                         ; locale_charset:loc_4EF0↑o
.rodata:0000000000005E48 _rodata         ends
.rodata:0000000000005E48
LOAD:0000000000005E4E ; ===========================================================================
LOAD:0000000000005E4E
LOAD:0000000000005E4E ; Segment type: Pure code
LOAD:0000000000005E4E ; Segment permissions: Read/Execute
LOAD:0000000000005E4E LOAD            segment byte public 'CODE' use64
LOAD:0000000000005E4E                 assume cs:LOAD
LOAD:0000000000005E4E                 ;org 5E4Eh
LOAD:0000000000005E4E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005E4E                 align 10h
LOAD:0000000000005E4E LOAD            ends
LOAD:0000000000005E4E
.eh_frame_hdr:0000000000005E50 ; ===========================================================================
.eh_frame_hdr:0000000000005E50
.eh_frame_hdr:0000000000005E50 ; Segment type: Pure data
.eh_frame_hdr:0000000000005E50 ; Segment permissions: Read
.eh_frame_hdr:0000000000005E50 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005E50                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005E50                 ;org 5E50h
.eh_frame_hdr:0000000000005E50 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005E51                 db  1Bh
.eh_frame_hdr:0000000000005E52                 db    3
.eh_frame_hdr:0000000000005E53                 db  3Bh ; ;
.eh_frame_hdr:0000000000005E54                 db  6Ch ; l
.eh_frame_hdr:0000000000005E55                 db    2
.eh_frame_hdr:0000000000005E56                 db    0
.eh_frame_hdr:0000000000005E57                 db    0
.eh_frame_hdr:0000000000005E58                 db  4Ch ; L
.eh_frame_hdr:0000000000005E59                 db    0
.eh_frame_hdr:0000000000005E5A                 db    0
.eh_frame_hdr:0000000000005E5B                 db    0
.eh_frame_hdr:0000000000005E5C                 db  20h
.eh_frame_hdr:0000000000005E5D                 db 0B6h
.eh_frame_hdr:0000000000005E5E                 db 0FFh
.eh_frame_hdr:0000000000005E5F                 db 0FFh
.eh_frame_hdr:0000000000005E60                 db 0B8h
.eh_frame_hdr:0000000000005E61                 db    2
.eh_frame_hdr:0000000000005E62                 db    0
.eh_frame_hdr:0000000000005E63                 db    0
.eh_frame_hdr:0000000000005E64                 db  70h ; p
.eh_frame_hdr:0000000000005E65                 db 0B9h
.eh_frame_hdr:0000000000005E66                 db 0FFh
.eh_frame_hdr:0000000000005E67                 db 0FFh
.eh_frame_hdr:0000000000005E68                 db 0E0h
.eh_frame_hdr:0000000000005E69                 db    2
.eh_frame_hdr:0000000000005E6A                 db    0
.eh_frame_hdr:0000000000005E6B                 db    0
.eh_frame_hdr:0000000000005E6C                 db  80h
.eh_frame_hdr:0000000000005E6D                 db 0B9h
.eh_frame_hdr:0000000000005E6E                 db 0FFh
.eh_frame_hdr:0000000000005E6F                 db 0FFh
.eh_frame_hdr:0000000000005E70                 db  24h ; $
.eh_frame_hdr:0000000000005E71                 db    4
.eh_frame_hdr:0000000000005E72                 db    0
.eh_frame_hdr:0000000000005E73                 db    0
.eh_frame_hdr:0000000000005E74                 db  40h ; @
.eh_frame_hdr:0000000000005E75                 db 0BBh
.eh_frame_hdr:0000000000005E76                 db 0FFh
.eh_frame_hdr:0000000000005E77                 db 0FFh
.eh_frame_hdr:0000000000005E78                 db  88h
.eh_frame_hdr:0000000000005E79                 db    2
.eh_frame_hdr:0000000000005E7A                 db    0
.eh_frame_hdr:0000000000005E7B                 db    0
.eh_frame_hdr:0000000000005E7C                 db  50h ; P
.eh_frame_hdr:0000000000005E7D                 db 0BCh
.eh_frame_hdr:0000000000005E7E                 db 0FFh
.eh_frame_hdr:0000000000005E7F                 db 0FFh
.eh_frame_hdr:0000000000005E80                 db 0F8h
.eh_frame_hdr:0000000000005E81                 db    2
.eh_frame_hdr:0000000000005E82                 db    0
.eh_frame_hdr:0000000000005E83                 db    0
.eh_frame_hdr:0000000000005E84                 db  50h ; P
.eh_frame_hdr:0000000000005E85                 db 0BDh
.eh_frame_hdr:0000000000005E86                 db 0FFh
.eh_frame_hdr:0000000000005E87                 db 0FFh
.eh_frame_hdr:0000000000005E88                 db  24h ; $
.eh_frame_hdr:0000000000005E89                 db    3
.eh_frame_hdr:0000000000005E8A                 db    0
.eh_frame_hdr:0000000000005E8B                 db    0
.eh_frame_hdr:0000000000005E8C                 db 0E0h
.eh_frame_hdr:0000000000005E8D                 db 0BDh
.eh_frame_hdr:0000000000005E8E                 db 0FFh
.eh_frame_hdr:0000000000005E8F                 db 0FFh
.eh_frame_hdr:0000000000005E90                 db  5Ch ; \
.eh_frame_hdr:0000000000005E91                 db    3
.eh_frame_hdr:0000000000005E92                 db    0
.eh_frame_hdr:0000000000005E93                 db    0
.eh_frame_hdr:0000000000005E94                 db 0C0h
.eh_frame_hdr:0000000000005E95                 db 0BEh
.eh_frame_hdr:0000000000005E96                 db 0FFh
.eh_frame_hdr:0000000000005E97                 db 0FFh
.eh_frame_hdr:0000000000005E98                 db 0A8h
.eh_frame_hdr:0000000000005E99                 db    3
.eh_frame_hdr:0000000000005E9A                 db    0
.eh_frame_hdr:0000000000005E9B                 db    0
.eh_frame_hdr:0000000000005E9C                 db 0E0h
.eh_frame_hdr:0000000000005E9D                 db 0C3h
.eh_frame_hdr:0000000000005E9E                 db 0FFh
.eh_frame_hdr:0000000000005E9F                 db 0FFh
.eh_frame_hdr:0000000000005EA0                 db 0F8h
.eh_frame_hdr:0000000000005EA1                 db    3
.eh_frame_hdr:0000000000005EA2                 db    0
.eh_frame_hdr:0000000000005EA3                 db    0
.eh_frame_hdr:0000000000005EA4                 db 0A0h
.eh_frame_hdr:0000000000005EA5                 db 0C7h
.eh_frame_hdr:0000000000005EA6                 db 0FFh
.eh_frame_hdr:0000000000005EA7                 db 0FFh
.eh_frame_hdr:0000000000005EA8                 db  58h ; X
.eh_frame_hdr:0000000000005EA9                 db    4
.eh_frame_hdr:0000000000005EAA                 db    0
.eh_frame_hdr:0000000000005EAB                 db    0
.eh_frame_hdr:0000000000005EAC                 db 0B0h
.eh_frame_hdr:0000000000005EAD                 db 0C7h
.eh_frame_hdr:0000000000005EAE                 db 0FFh
.eh_frame_hdr:0000000000005EAF                 db 0FFh
.eh_frame_hdr:0000000000005EB0                 db  6Ch ; l
.eh_frame_hdr:0000000000005EB1                 db    4
.eh_frame_hdr:0000000000005EB2                 db    0
.eh_frame_hdr:0000000000005EB3                 db    0
.eh_frame_hdr:0000000000005EB4                 db 0C0h
.eh_frame_hdr:0000000000005EB5                 db 0C7h
.eh_frame_hdr:0000000000005EB6                 db 0FFh
.eh_frame_hdr:0000000000005EB7                 db 0FFh
.eh_frame_hdr:0000000000005EB8                 db  80h
.eh_frame_hdr:0000000000005EB9                 db    4
.eh_frame_hdr:0000000000005EBA                 db    0
.eh_frame_hdr:0000000000005EBB                 db    0
.eh_frame_hdr:0000000000005EBC                 db  70h ; p
.eh_frame_hdr:0000000000005EBD                 db 0C8h
.eh_frame_hdr:0000000000005EBE                 db 0FFh
.eh_frame_hdr:0000000000005EBF                 db 0FFh
.eh_frame_hdr:0000000000005EC0                 db 0B0h
.eh_frame_hdr:0000000000005EC1                 db    4
.eh_frame_hdr:0000000000005EC2                 db    0
.eh_frame_hdr:0000000000005EC3                 db    0
.eh_frame_hdr:0000000000005EC4                 db  10h
.eh_frame_hdr:0000000000005EC5                 db 0C9h
.eh_frame_hdr:0000000000005EC6                 db 0FFh
.eh_frame_hdr:0000000000005EC7                 db 0FFh
.eh_frame_hdr:0000000000005EC8                 db 0D0h
.eh_frame_hdr:0000000000005EC9                 db    4
.eh_frame_hdr:0000000000005ECA                 db    0
.eh_frame_hdr:0000000000005ECB                 db    0
.eh_frame_hdr:0000000000005ECC                 db    0
.eh_frame_hdr:0000000000005ECD                 db 0CAh
.eh_frame_hdr:0000000000005ECE                 db 0FFh
.eh_frame_hdr:0000000000005ECF                 db 0FFh
.eh_frame_hdr:0000000000005ED0                 db  14h
.eh_frame_hdr:0000000000005ED1                 db    5
.eh_frame_hdr:0000000000005ED2                 db    0
.eh_frame_hdr:0000000000005ED3                 db    0
.eh_frame_hdr:0000000000005ED4                 db  40h ; @
.eh_frame_hdr:0000000000005ED5                 db 0DCh
.eh_frame_hdr:0000000000005ED6                 db 0FFh
.eh_frame_hdr:0000000000005ED7                 db 0FFh
.eh_frame_hdr:0000000000005ED8                 db  8Ch
.eh_frame_hdr:0000000000005ED9                 db    5
.eh_frame_hdr:0000000000005EDA                 db    0
.eh_frame_hdr:0000000000005EDB                 db    0
.eh_frame_hdr:0000000000005EDC                 db 0F0h
.eh_frame_hdr:0000000000005EDD                 db 0DDh
.eh_frame_hdr:0000000000005EDE                 db 0FFh
.eh_frame_hdr:0000000000005EDF                 db 0FFh
.eh_frame_hdr:0000000000005EE0                 db 0F8h
.eh_frame_hdr:0000000000005EE1                 db    5
.eh_frame_hdr:0000000000005EE2                 db    0
.eh_frame_hdr:0000000000005EE3                 db    0
.eh_frame_hdr:0000000000005EE4                 db  30h ; 0
.eh_frame_hdr:0000000000005EE5                 db 0DEh
.eh_frame_hdr:0000000000005EE6                 db 0FFh
.eh_frame_hdr:0000000000005EE7                 db 0FFh
.eh_frame_hdr:0000000000005EE8                 db  24h ; $
.eh_frame_hdr:0000000000005EE9                 db    6
.eh_frame_hdr:0000000000005EEA                 db    0
.eh_frame_hdr:0000000000005EEB                 db    0
.eh_frame_hdr:0000000000005EEC                 db  50h ; P
.eh_frame_hdr:0000000000005EED                 db 0DEh
.eh_frame_hdr:0000000000005EEE                 db 0FFh
.eh_frame_hdr:0000000000005EEF                 db 0FFh
.eh_frame_hdr:0000000000005EF0                 db  38h ; 8
.eh_frame_hdr:0000000000005EF1                 db    6
.eh_frame_hdr:0000000000005EF2                 db    0
.eh_frame_hdr:0000000000005EF3                 db    0
.eh_frame_hdr:0000000000005EF4                 db  70h ; p
.eh_frame_hdr:0000000000005EF5                 db 0DEh
.eh_frame_hdr:0000000000005EF6                 db 0FFh
.eh_frame_hdr:0000000000005EF7                 db 0FFh
.eh_frame_hdr:0000000000005EF8                 db  4Ch ; L
.eh_frame_hdr:0000000000005EF9                 db    6
.eh_frame_hdr:0000000000005EFA                 db    0
.eh_frame_hdr:0000000000005EFB                 db    0
.eh_frame_hdr:0000000000005EFC                 db 0B0h
.eh_frame_hdr:0000000000005EFD                 db 0DEh
.eh_frame_hdr:0000000000005EFE                 db 0FFh
.eh_frame_hdr:0000000000005EFF                 db 0FFh
.eh_frame_hdr:0000000000005F00                 db  60h ; `
.eh_frame_hdr:0000000000005F01                 db    6
.eh_frame_hdr:0000000000005F02                 db    0
.eh_frame_hdr:0000000000005F03                 db    0
.eh_frame_hdr:0000000000005F04                 db 0D0h
.eh_frame_hdr:0000000000005F05                 db 0DEh
.eh_frame_hdr:0000000000005F06                 db 0FFh
.eh_frame_hdr:0000000000005F07                 db 0FFh
.eh_frame_hdr:0000000000005F08                 db  74h ; t
.eh_frame_hdr:0000000000005F09                 db    6
.eh_frame_hdr:0000000000005F0A                 db    0
.eh_frame_hdr:0000000000005F0B                 db    0
.eh_frame_hdr:0000000000005F0C                 db    0
.eh_frame_hdr:0000000000005F0D                 db 0DFh
.eh_frame_hdr:0000000000005F0E                 db 0FFh
.eh_frame_hdr:0000000000005F0F                 db 0FFh
.eh_frame_hdr:0000000000005F10                 db  88h
.eh_frame_hdr:0000000000005F11                 db    6
.eh_frame_hdr:0000000000005F12                 db    0
.eh_frame_hdr:0000000000005F13                 db    0
.eh_frame_hdr:0000000000005F14                 db  80h
.eh_frame_hdr:0000000000005F15                 db 0DFh
.eh_frame_hdr:0000000000005F16                 db 0FFh
.eh_frame_hdr:0000000000005F17                 db 0FFh
.eh_frame_hdr:0000000000005F18                 db 0DCh
.eh_frame_hdr:0000000000005F19                 db    6
.eh_frame_hdr:0000000000005F1A                 db    0
.eh_frame_hdr:0000000000005F1B                 db    0
.eh_frame_hdr:0000000000005F1C                 db  70h ; p
.eh_frame_hdr:0000000000005F1D                 db 0E0h
.eh_frame_hdr:0000000000005F1E                 db 0FFh
.eh_frame_hdr:0000000000005F1F                 db 0FFh
.eh_frame_hdr:0000000000005F20                 db  48h ; H
.eh_frame_hdr:0000000000005F21                 db    7
.eh_frame_hdr:0000000000005F22                 db    0
.eh_frame_hdr:0000000000005F23                 db    0
.eh_frame_hdr:0000000000005F24                 db  80h
.eh_frame_hdr:0000000000005F25                 db 0E0h
.eh_frame_hdr:0000000000005F26                 db 0FFh
.eh_frame_hdr:0000000000005F27                 db 0FFh
.eh_frame_hdr:0000000000005F28                 db  5Ch ; \
.eh_frame_hdr:0000000000005F29                 db    7
.eh_frame_hdr:0000000000005F2A                 db    0
.eh_frame_hdr:0000000000005F2B                 db    0
.eh_frame_hdr:0000000000005F2C                 db  20h
.eh_frame_hdr:0000000000005F2D                 db 0E1h
.eh_frame_hdr:0000000000005F2E                 db 0FFh
.eh_frame_hdr:0000000000005F2F                 db 0FFh
.eh_frame_hdr:0000000000005F30                 db  88h
.eh_frame_hdr:0000000000005F31                 db    7
.eh_frame_hdr:0000000000005F32                 db    0
.eh_frame_hdr:0000000000005F33                 db    0
.eh_frame_hdr:0000000000005F34                 db  40h ; @
.eh_frame_hdr:0000000000005F35                 db 0E1h
.eh_frame_hdr:0000000000005F36                 db 0FFh
.eh_frame_hdr:0000000000005F37                 db 0FFh
.eh_frame_hdr:0000000000005F38                 db  9Ch
.eh_frame_hdr:0000000000005F39                 db    7
.eh_frame_hdr:0000000000005F3A                 db    0
.eh_frame_hdr:0000000000005F3B                 db    0
.eh_frame_hdr:0000000000005F3C                 db  50h ; P
.eh_frame_hdr:0000000000005F3D                 db 0E1h
.eh_frame_hdr:0000000000005F3E                 db 0FFh
.eh_frame_hdr:0000000000005F3F                 db 0FFh
.eh_frame_hdr:0000000000005F40                 db 0B0h
.eh_frame_hdr:0000000000005F41                 db    7
.eh_frame_hdr:0000000000005F42                 db    0
.eh_frame_hdr:0000000000005F43                 db    0
.eh_frame_hdr:0000000000005F44                 db  70h ; p
.eh_frame_hdr:0000000000005F45                 db 0E1h
.eh_frame_hdr:0000000000005F46                 db 0FFh
.eh_frame_hdr:0000000000005F47                 db 0FFh
.eh_frame_hdr:0000000000005F48                 db 0C4h
.eh_frame_hdr:0000000000005F49                 db    7
.eh_frame_hdr:0000000000005F4A                 db    0
.eh_frame_hdr:0000000000005F4B                 db    0
.eh_frame_hdr:0000000000005F4C                 db  90h
.eh_frame_hdr:0000000000005F4D                 db 0E1h
.eh_frame_hdr:0000000000005F4E                 db 0FFh
.eh_frame_hdr:0000000000005F4F                 db 0FFh
.eh_frame_hdr:0000000000005F50                 db 0D8h
.eh_frame_hdr:0000000000005F51                 db    7
.eh_frame_hdr:0000000000005F52                 db    0
.eh_frame_hdr:0000000000005F53                 db    0
.eh_frame_hdr:0000000000005F54                 db  20h
.eh_frame_hdr:0000000000005F55                 db 0E2h
.eh_frame_hdr:0000000000005F56                 db 0FFh
.eh_frame_hdr:0000000000005F57                 db 0FFh
.eh_frame_hdr:0000000000005F58                 db 0F4h
.eh_frame_hdr:0000000000005F59                 db    7
.eh_frame_hdr:0000000000005F5A                 db    0
.eh_frame_hdr:0000000000005F5B                 db    0
.eh_frame_hdr:0000000000005F5C                 db 0B0h
.eh_frame_hdr:0000000000005F5D                 db 0E2h
.eh_frame_hdr:0000000000005F5E                 db 0FFh
.eh_frame_hdr:0000000000005F5F                 db 0FFh
.eh_frame_hdr:0000000000005F60                 db  10h
.eh_frame_hdr:0000000000005F61                 db    8
.eh_frame_hdr:0000000000005F62                 db    0
.eh_frame_hdr:0000000000005F63                 db    0
.eh_frame_hdr:0000000000005F64                 db 0C0h
.eh_frame_hdr:0000000000005F65                 db 0E2h
.eh_frame_hdr:0000000000005F66                 db 0FFh
.eh_frame_hdr:0000000000005F67                 db 0FFh
.eh_frame_hdr:0000000000005F68                 db  24h ; $
.eh_frame_hdr:0000000000005F69                 db    8
.eh_frame_hdr:0000000000005F6A                 db    0
.eh_frame_hdr:0000000000005F6B                 db    0
.eh_frame_hdr:0000000000005F6C                 db 0D0h
.eh_frame_hdr:0000000000005F6D                 db 0E2h
.eh_frame_hdr:0000000000005F6E                 db 0FFh
.eh_frame_hdr:0000000000005F6F                 db 0FFh
.eh_frame_hdr:0000000000005F70                 db  38h ; 8
.eh_frame_hdr:0000000000005F71                 db    8
.eh_frame_hdr:0000000000005F72                 db    0
.eh_frame_hdr:0000000000005F73                 db    0
.eh_frame_hdr:0000000000005F74                 db  70h ; p
.eh_frame_hdr:0000000000005F75                 db 0E3h
.eh_frame_hdr:0000000000005F76                 db 0FFh
.eh_frame_hdr:0000000000005F77                 db 0FFh
.eh_frame_hdr:0000000000005F78                 db  54h ; T
.eh_frame_hdr:0000000000005F79                 db    8
.eh_frame_hdr:0000000000005F7A                 db    0
.eh_frame_hdr:0000000000005F7B                 db    0
.eh_frame_hdr:0000000000005F7C                 db  80h
.eh_frame_hdr:0000000000005F7D                 db 0E3h
.eh_frame_hdr:0000000000005F7E                 db 0FFh
.eh_frame_hdr:0000000000005F7F                 db 0FFh
.eh_frame_hdr:0000000000005F80                 db  68h ; h
.eh_frame_hdr:0000000000005F81                 db    8
.eh_frame_hdr:0000000000005F82                 db    0
.eh_frame_hdr:0000000000005F83                 db    0
.eh_frame_hdr:0000000000005F84                 db 0A0h
.eh_frame_hdr:0000000000005F85                 db 0E3h
.eh_frame_hdr:0000000000005F86                 db 0FFh
.eh_frame_hdr:0000000000005F87                 db 0FFh
.eh_frame_hdr:0000000000005F88                 db  7Ch ; |
.eh_frame_hdr:0000000000005F89                 db    8
.eh_frame_hdr:0000000000005F8A                 db    0
.eh_frame_hdr:0000000000005F8B                 db    0
.eh_frame_hdr:0000000000005F8C                 db 0B0h
.eh_frame_hdr:0000000000005F8D                 db 0E3h
.eh_frame_hdr:0000000000005F8E                 db 0FFh
.eh_frame_hdr:0000000000005F8F                 db 0FFh
.eh_frame_hdr:0000000000005F90                 db  90h
.eh_frame_hdr:0000000000005F91                 db    8
.eh_frame_hdr:0000000000005F92                 db    0
.eh_frame_hdr:0000000000005F93                 db    0
.eh_frame_hdr:0000000000005F94                 db  40h ; @
.eh_frame_hdr:0000000000005F95                 db 0E4h
.eh_frame_hdr:0000000000005F96                 db 0FFh
.eh_frame_hdr:0000000000005F97                 db 0FFh
.eh_frame_hdr:0000000000005F98                 db 0ACh
.eh_frame_hdr:0000000000005F99                 db    8
.eh_frame_hdr:0000000000005F9A                 db    0
.eh_frame_hdr:0000000000005F9B                 db    0
.eh_frame_hdr:0000000000005F9C                 db 0E0h
.eh_frame_hdr:0000000000005F9D                 db 0E4h
.eh_frame_hdr:0000000000005F9E                 db 0FFh
.eh_frame_hdr:0000000000005F9F                 db 0FFh
.eh_frame_hdr:0000000000005FA0                 db 0C8h
.eh_frame_hdr:0000000000005FA1                 db    8
.eh_frame_hdr:0000000000005FA2                 db    0
.eh_frame_hdr:0000000000005FA3                 db    0
.eh_frame_hdr:0000000000005FA4                 db 0F0h
.eh_frame_hdr:0000000000005FA5                 db 0E4h
.eh_frame_hdr:0000000000005FA6                 db 0FFh
.eh_frame_hdr:0000000000005FA7                 db 0FFh
.eh_frame_hdr:0000000000005FA8                 db 0DCh
.eh_frame_hdr:0000000000005FA9                 db    8
.eh_frame_hdr:0000000000005FAA                 db    0
.eh_frame_hdr:0000000000005FAB                 db    0
.eh_frame_hdr:0000000000005FAC                 db  10h
.eh_frame_hdr:0000000000005FAD                 db 0E5h
.eh_frame_hdr:0000000000005FAE                 db 0FFh
.eh_frame_hdr:0000000000005FAF                 db 0FFh
.eh_frame_hdr:0000000000005FB0                 db 0F0h
.eh_frame_hdr:0000000000005FB1                 db    8
.eh_frame_hdr:0000000000005FB2                 db    0
.eh_frame_hdr:0000000000005FB3                 db    0
.eh_frame_hdr:0000000000005FB4                 db  30h ; 0
.eh_frame_hdr:0000000000005FB5                 db 0E5h
.eh_frame_hdr:0000000000005FB6                 db 0FFh
.eh_frame_hdr:0000000000005FB7                 db 0FFh
.eh_frame_hdr:0000000000005FB8                 db    4
.eh_frame_hdr:0000000000005FB9                 db    9
.eh_frame_hdr:0000000000005FBA                 db    0
.eh_frame_hdr:0000000000005FBB                 db    0
.eh_frame_hdr:0000000000005FBC                 db  40h ; @
.eh_frame_hdr:0000000000005FBD                 db 0E5h
.eh_frame_hdr:0000000000005FBE                 db 0FFh
.eh_frame_hdr:0000000000005FBF                 db 0FFh
.eh_frame_hdr:0000000000005FC0                 db  18h
.eh_frame_hdr:0000000000005FC1                 db    9
.eh_frame_hdr:0000000000005FC2                 db    0
.eh_frame_hdr:0000000000005FC3                 db    0
.eh_frame_hdr:0000000000005FC4                 db  60h ; `
.eh_frame_hdr:0000000000005FC5                 db 0E5h
.eh_frame_hdr:0000000000005FC6                 db 0FFh
.eh_frame_hdr:0000000000005FC7                 db 0FFh
.eh_frame_hdr:0000000000005FC8                 db  2Ch ; ,
.eh_frame_hdr:0000000000005FC9                 db    9
.eh_frame_hdr:0000000000005FCA                 db    0
.eh_frame_hdr:0000000000005FCB                 db    0
.eh_frame_hdr:0000000000005FCC                 db  80h
.eh_frame_hdr:0000000000005FCD                 db 0E5h
.eh_frame_hdr:0000000000005FCE                 db 0FFh
.eh_frame_hdr:0000000000005FCF                 db 0FFh
.eh_frame_hdr:0000000000005FD0                 db  40h ; @
.eh_frame_hdr:0000000000005FD1                 db    9
.eh_frame_hdr:0000000000005FD2                 db    0
.eh_frame_hdr:0000000000005FD3                 db    0
.eh_frame_hdr:0000000000005FD4                 db 0A0h
.eh_frame_hdr:0000000000005FD5                 db 0E5h
.eh_frame_hdr:0000000000005FD6                 db 0FFh
.eh_frame_hdr:0000000000005FD7                 db 0FFh
.eh_frame_hdr:0000000000005FD8                 db  58h ; X
.eh_frame_hdr:0000000000005FD9                 db    9
.eh_frame_hdr:0000000000005FDA                 db    0
.eh_frame_hdr:0000000000005FDB                 db    0
.eh_frame_hdr:0000000000005FDC                 db  20h
.eh_frame_hdr:0000000000005FDD                 db 0E6h
.eh_frame_hdr:0000000000005FDE                 db 0FFh
.eh_frame_hdr:0000000000005FDF                 db 0FFh
.eh_frame_hdr:0000000000005FE0                 db  80h
.eh_frame_hdr:0000000000005FE1                 db    9
.eh_frame_hdr:0000000000005FE2                 db    0
.eh_frame_hdr:0000000000005FE3                 db    0
.eh_frame_hdr:0000000000005FE4                 db  40h ; @
.eh_frame_hdr:0000000000005FE5                 db 0EAh
.eh_frame_hdr:0000000000005FE6                 db 0FFh
.eh_frame_hdr:0000000000005FE7                 db 0FFh
.eh_frame_hdr:0000000000005FE8                 db  94h
.eh_frame_hdr:0000000000005FE9                 db  0Ah
.eh_frame_hdr:0000000000005FEA                 db    0
.eh_frame_hdr:0000000000005FEB                 db    0
.eh_frame_hdr:0000000000005FEC                 db  60h ; `
.eh_frame_hdr:0000000000005FED                 db 0EAh
.eh_frame_hdr:0000000000005FEE                 db 0FFh
.eh_frame_hdr:0000000000005FEF                 db 0FFh
.eh_frame_hdr:0000000000005FF0                 db 0A8h
.eh_frame_hdr:0000000000005FF1                 db  0Ah
.eh_frame_hdr:0000000000005FF2                 db    0
.eh_frame_hdr:0000000000005FF3                 db    0
.eh_frame_hdr:0000000000005FF4                 db 0E0h
.eh_frame_hdr:0000000000005FF5                 db 0EAh
.eh_frame_hdr:0000000000005FF6                 db 0FFh
.eh_frame_hdr:0000000000005FF7                 db 0FFh
.eh_frame_hdr:0000000000005FF8                 db 0C4h
.eh_frame_hdr:0000000000005FF9                 db  0Ah
.eh_frame_hdr:0000000000005FFA                 db    0
.eh_frame_hdr:0000000000005FFB                 db    0
.eh_frame_hdr:0000000000005FFC                 db 0C0h
.eh_frame_hdr:0000000000005FFD                 db 0EBh
.eh_frame_hdr:0000000000005FFE                 db 0FFh
.eh_frame_hdr:0000000000005FFF                 db 0FFh
.eh_frame_hdr:0000000000006000                 db 0F0h
.eh_frame_hdr:0000000000006001                 db  0Ah
.eh_frame_hdr:0000000000006002                 db    0
.eh_frame_hdr:0000000000006003                 db    0
.eh_frame_hdr:0000000000006004                 db  40h ; @
.eh_frame_hdr:0000000000006005                 db 0ECh
.eh_frame_hdr:0000000000006006                 db 0FFh
.eh_frame_hdr:0000000000006007                 db 0FFh
.eh_frame_hdr:0000000000006008                 db  10h
.eh_frame_hdr:0000000000006009                 db  0Bh
.eh_frame_hdr:000000000000600A                 db    0
.eh_frame_hdr:000000000000600B                 db    0
.eh_frame_hdr:000000000000600C                 db  60h ; `
.eh_frame_hdr:000000000000600D                 db 0ECh
.eh_frame_hdr:000000000000600E                 db 0FFh
.eh_frame_hdr:000000000000600F                 db 0FFh
.eh_frame_hdr:0000000000006010                 db  2Ch ; ,
.eh_frame_hdr:0000000000006011                 db  0Bh
.eh_frame_hdr:0000000000006012                 db    0
.eh_frame_hdr:0000000000006013                 db    0
.eh_frame_hdr:0000000000006014                 db  90h
.eh_frame_hdr:0000000000006015                 db 0ECh
.eh_frame_hdr:0000000000006016                 db 0FFh
.eh_frame_hdr:0000000000006017                 db 0FFh
.eh_frame_hdr:0000000000006018                 db  40h ; @
.eh_frame_hdr:0000000000006019                 db  0Bh
.eh_frame_hdr:000000000000601A                 db    0
.eh_frame_hdr:000000000000601B                 db    0
.eh_frame_hdr:000000000000601C                 db 0A0h
.eh_frame_hdr:000000000000601D                 db 0ECh
.eh_frame_hdr:000000000000601E                 db 0FFh
.eh_frame_hdr:000000000000601F                 db 0FFh
.eh_frame_hdr:0000000000006020                 db  54h ; T
.eh_frame_hdr:0000000000006021                 db  0Bh
.eh_frame_hdr:0000000000006022                 db    0
.eh_frame_hdr:0000000000006023                 db    0
.eh_frame_hdr:0000000000006024                 db 0E0h
.eh_frame_hdr:0000000000006025                 db 0ECh
.eh_frame_hdr:0000000000006026                 db 0FFh
.eh_frame_hdr:0000000000006027                 db 0FFh
.eh_frame_hdr:0000000000006028                 db  78h ; x
.eh_frame_hdr:0000000000006029                 db  0Bh
.eh_frame_hdr:000000000000602A                 db    0
.eh_frame_hdr:000000000000602B                 db    0
.eh_frame_hdr:000000000000602C                 db  10h
.eh_frame_hdr:000000000000602D                 db 0EDh
.eh_frame_hdr:000000000000602E                 db 0FFh
.eh_frame_hdr:000000000000602F                 db 0FFh
.eh_frame_hdr:0000000000006030                 db  8Ch
.eh_frame_hdr:0000000000006031                 db  0Bh
.eh_frame_hdr:0000000000006032                 db    0
.eh_frame_hdr:0000000000006033                 db    0
.eh_frame_hdr:0000000000006034                 db 0A0h
.eh_frame_hdr:0000000000006035                 db 0EDh
.eh_frame_hdr:0000000000006036                 db 0FFh
.eh_frame_hdr:0000000000006037                 db 0FFh
.eh_frame_hdr:0000000000006038                 db 0A4h
.eh_frame_hdr:0000000000006039                 db  0Bh
.eh_frame_hdr:000000000000603A                 db    0
.eh_frame_hdr:000000000000603B                 db    0
.eh_frame_hdr:000000000000603C                 db 0F0h
.eh_frame_hdr:000000000000603D                 db 0EDh
.eh_frame_hdr:000000000000603E                 db 0FFh
.eh_frame_hdr:000000000000603F                 db 0FFh
.eh_frame_hdr:0000000000006040                 db 0BCh
.eh_frame_hdr:0000000000006041                 db  0Bh
.eh_frame_hdr:0000000000006042                 db    0
.eh_frame_hdr:0000000000006043                 db    0
.eh_frame_hdr:0000000000006044                 db  10h
.eh_frame_hdr:0000000000006045                 db 0EEh
.eh_frame_hdr:0000000000006046                 db 0FFh
.eh_frame_hdr:0000000000006047                 db 0FFh
.eh_frame_hdr:0000000000006048                 db 0D8h
.eh_frame_hdr:0000000000006049                 db  0Bh
.eh_frame_hdr:000000000000604A                 db    0
.eh_frame_hdr:000000000000604B                 db    0
.eh_frame_hdr:000000000000604C                 db  40h ; @
.eh_frame_hdr:000000000000604D                 db 0EEh
.eh_frame_hdr:000000000000604E                 db 0FFh
.eh_frame_hdr:000000000000604F                 db 0FFh
.eh_frame_hdr:0000000000006050                 db 0F4h
.eh_frame_hdr:0000000000006051                 db  0Bh
.eh_frame_hdr:0000000000006052                 db    0
.eh_frame_hdr:0000000000006053                 db    0
.eh_frame_hdr:0000000000006054                 db  70h ; p
.eh_frame_hdr:0000000000006055                 db 0EEh
.eh_frame_hdr:0000000000006056                 db 0FFh
.eh_frame_hdr:0000000000006057                 db 0FFh
.eh_frame_hdr:0000000000006058                 db  1Ch
.eh_frame_hdr:0000000000006059                 db  0Ch
.eh_frame_hdr:000000000000605A                 db    0
.eh_frame_hdr:000000000000605B                 db    0
.eh_frame_hdr:000000000000605C                 db  90h
.eh_frame_hdr:000000000000605D                 db 0EEh
.eh_frame_hdr:000000000000605E                 db 0FFh
.eh_frame_hdr:000000000000605F                 db 0FFh
.eh_frame_hdr:0000000000006060                 db  38h ; 8
.eh_frame_hdr:0000000000006061                 db  0Ch
.eh_frame_hdr:0000000000006062                 db    0
.eh_frame_hdr:0000000000006063                 db    0
.eh_frame_hdr:0000000000006064                 db 0D0h
.eh_frame_hdr:0000000000006065                 db 0EEh
.eh_frame_hdr:0000000000006066                 db 0FFh
.eh_frame_hdr:0000000000006067                 db 0FFh
.eh_frame_hdr:0000000000006068                 db  50h ; P
.eh_frame_hdr:0000000000006069                 db  0Ch
.eh_frame_hdr:000000000000606A                 db    0
.eh_frame_hdr:000000000000606B                 db    0
.eh_frame_hdr:000000000000606C                 db    0
.eh_frame_hdr:000000000000606D                 db 0EFh
.eh_frame_hdr:000000000000606E                 db 0FFh
.eh_frame_hdr:000000000000606F                 db 0FFh
.eh_frame_hdr:0000000000006070                 db  70h ; p
.eh_frame_hdr:0000000000006071                 db  0Ch
.eh_frame_hdr:0000000000006072                 db    0
.eh_frame_hdr:0000000000006073                 db    0
.eh_frame_hdr:0000000000006074                 db  90h
.eh_frame_hdr:0000000000006075                 db 0EFh
.eh_frame_hdr:0000000000006076                 db 0FFh
.eh_frame_hdr:0000000000006077                 db 0FFh
.eh_frame_hdr:0000000000006078                 db 0B0h
.eh_frame_hdr:0000000000006079                 db  0Ch
.eh_frame_hdr:000000000000607A                 db    0
.eh_frame_hdr:000000000000607B                 db    0
.eh_frame_hdr:000000000000607C                 db  10h
.eh_frame_hdr:000000000000607D                 db 0F0h
.eh_frame_hdr:000000000000607E                 db 0FFh
.eh_frame_hdr:000000000000607F                 db 0FFh
.eh_frame_hdr:0000000000006080                 db    0
.eh_frame_hdr:0000000000006081                 db  0Dh
.eh_frame_hdr:0000000000006082                 db    0
.eh_frame_hdr:0000000000006083                 db    0
.eh_frame_hdr:0000000000006084                 db  70h ; p
.eh_frame_hdr:0000000000006085                 db 0F0h
.eh_frame_hdr:0000000000006086                 db 0FFh
.eh_frame_hdr:0000000000006087                 db 0FFh
.eh_frame_hdr:0000000000006088                 db  20h
.eh_frame_hdr:0000000000006089                 db  0Dh
.eh_frame_hdr:000000000000608A                 db    0
.eh_frame_hdr:000000000000608B                 db    0
.eh_frame_hdr:000000000000608C                 db 0B0h
.eh_frame_hdr:000000000000608D                 db 0F0h
.eh_frame_hdr:000000000000608E                 db 0FFh
.eh_frame_hdr:000000000000608F                 db 0FFh
.eh_frame_hdr:0000000000006090                 db  40h ; @
.eh_frame_hdr:0000000000006091                 db  0Dh
.eh_frame_hdr:0000000000006092                 db    0
.eh_frame_hdr:0000000000006093                 db    0
.eh_frame_hdr:0000000000006094                 db  30h ; 0
.eh_frame_hdr:0000000000006095                 db 0F1h
.eh_frame_hdr:0000000000006096                 db 0FFh
.eh_frame_hdr:0000000000006097                 db 0FFh
.eh_frame_hdr:0000000000006098                 db  78h ; x
.eh_frame_hdr:0000000000006099                 db  0Dh
.eh_frame_hdr:000000000000609A                 db    0
.eh_frame_hdr:000000000000609B                 db    0
.eh_frame_hdr:000000000000609C                 db  70h ; p
.eh_frame_hdr:000000000000609D                 db 0F1h
.eh_frame_hdr:000000000000609E                 db 0FFh
.eh_frame_hdr:000000000000609F                 db 0FFh
.eh_frame_hdr:00000000000060A0                 db  98h
.eh_frame_hdr:00000000000060A1                 db  0Dh
.eh_frame_hdr:00000000000060A2                 db    0
.eh_frame_hdr:00000000000060A3                 db    0
.eh_frame_hdr:00000000000060A4                 db 0D0h
.eh_frame_hdr:00000000000060A5                 db 0F1h
.eh_frame_hdr:00000000000060A6                 db 0FFh
.eh_frame_hdr:00000000000060A7                 db 0FFh
.eh_frame_hdr:00000000000060A8                 db 0C8h
.eh_frame_hdr:00000000000060A9                 db  0Dh
.eh_frame_hdr:00000000000060AA                 db    0
.eh_frame_hdr:00000000000060AB                 db    0
.eh_frame_hdr:00000000000060AC                 db  40h ; @
.eh_frame_hdr:00000000000060AD                 db 0F2h
.eh_frame_hdr:00000000000060AE                 db 0FFh
.eh_frame_hdr:00000000000060AF                 db 0FFh
.eh_frame_hdr:00000000000060B0                 db  10h
.eh_frame_hdr:00000000000060B1                 db  0Eh
.eh_frame_hdr:00000000000060B2                 db    0
.eh_frame_hdr:00000000000060B3                 db    0
.eh_frame_hdr:00000000000060B4                 db  50h ; P
.eh_frame_hdr:00000000000060B5                 db 0F2h
.eh_frame_hdr:00000000000060B6                 db 0FFh
.eh_frame_hdr:00000000000060B7                 db 0FFh
.eh_frame_hdr:00000000000060B8                 db  28h ; (
.eh_frame_hdr:00000000000060B9                 db  0Eh
.eh_frame_hdr:00000000000060BA                 db    0
.eh_frame_hdr:00000000000060BB                 db    0
.eh_frame_hdr:00000000000060BB _eh_frame_hdr   ends
.eh_frame_hdr:00000000000060BB
LOAD:00000000000060BC ; ===========================================================================
LOAD:00000000000060BC
LOAD:00000000000060BC ; Segment type: Pure code
LOAD:00000000000060BC ; Segment permissions: Read/Execute
LOAD:00000000000060BC LOAD            segment byte public 'CODE' use64
LOAD:00000000000060BC                 assume cs:LOAD
LOAD:00000000000060BC                 ;org 60BCh
LOAD:00000000000060BC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000060BC                 align 20h
LOAD:00000000000060BC LOAD            ends
LOAD:00000000000060BC
.eh_frame:00000000000060C0 ; ===========================================================================
.eh_frame:00000000000060C0
.eh_frame:00000000000060C0 ; Segment type: Pure data
.eh_frame:00000000000060C0 ; Segment permissions: Read
.eh_frame:00000000000060C0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000060C0                 assume cs:_eh_frame
.eh_frame:00000000000060C0                 ;org 60C0h
.eh_frame:00000000000060C0                 db  14h
.eh_frame:00000000000060C1                 db    0
.eh_frame:00000000000060C2                 db    0
.eh_frame:00000000000060C3                 db    0
.eh_frame:00000000000060C4                 db    0
.eh_frame:00000000000060C5                 db    0
.eh_frame:00000000000060C6                 db    0
.eh_frame:00000000000060C7                 db    0
.eh_frame:00000000000060C8                 db    1
.eh_frame:00000000000060C9                 db  7Ah ; z
.eh_frame:00000000000060CA                 db  52h ; R
.eh_frame:00000000000060CB                 db    0
.eh_frame:00000000000060CC                 db    1
.eh_frame:00000000000060CD                 db  78h ; x
.eh_frame:00000000000060CE                 db  10h
.eh_frame:00000000000060CF                 db    1
.eh_frame:00000000000060D0                 db  1Bh
.eh_frame:00000000000060D1                 db  0Ch
.eh_frame:00000000000060D2                 db    7
.eh_frame:00000000000060D3                 db    8
.eh_frame:00000000000060D4                 db  90h
.eh_frame:00000000000060D5                 db    1
.eh_frame:00000000000060D6                 db    7
.eh_frame:00000000000060D7                 db  10h
.eh_frame:00000000000060D8                 db  14h
.eh_frame:00000000000060D9                 db    0
.eh_frame:00000000000060DA                 db    0
.eh_frame:00000000000060DB                 db    0
.eh_frame:00000000000060DC                 db  1Ch
.eh_frame:00000000000060DD                 db    0
.eh_frame:00000000000060DE                 db    0
.eh_frame:00000000000060DF                 db    0
.eh_frame:00000000000060E0                 db 0B0h
.eh_frame:00000000000060E1                 db 0B8h
.eh_frame:00000000000060E2                 db 0FFh
.eh_frame:00000000000060E3                 db 0FFh
.eh_frame:00000000000060E4                 db  2Bh ; +
.eh_frame:00000000000060E5                 db    0
.eh_frame:00000000000060E6                 db    0
.eh_frame:00000000000060E7                 db    0
.eh_frame:00000000000060E8                 db    0
.eh_frame:00000000000060E9                 db    0
.eh_frame:00000000000060EA                 db    0
.eh_frame:00000000000060EB                 db    0
.eh_frame:00000000000060EC                 db    0
.eh_frame:00000000000060ED                 db    0
.eh_frame:00000000000060EE                 db    0
.eh_frame:00000000000060EF                 db    0
.eh_frame:00000000000060F0                 db  14h
.eh_frame:00000000000060F1                 db    0
.eh_frame:00000000000060F2                 db    0
.eh_frame:00000000000060F3                 db    0
.eh_frame:00000000000060F4                 db    0
.eh_frame:00000000000060F5                 db    0
.eh_frame:00000000000060F6                 db    0
.eh_frame:00000000000060F7                 db    0
.eh_frame:00000000000060F8                 db    1
.eh_frame:00000000000060F9                 db  7Ah ; z
.eh_frame:00000000000060FA                 db  52h ; R
.eh_frame:00000000000060FB                 db    0
.eh_frame:00000000000060FC                 db    1
.eh_frame:00000000000060FD                 db  78h ; x
.eh_frame:00000000000060FE                 db  10h
.eh_frame:00000000000060FF                 db    1
.eh_frame:0000000000006100                 db  1Bh
.eh_frame:0000000000006101                 db  0Ch
.eh_frame:0000000000006102                 db    7
.eh_frame:0000000000006103                 db    8
.eh_frame:0000000000006104                 db  90h
.eh_frame:0000000000006105                 db    1
.eh_frame:0000000000006106                 db    0
.eh_frame:0000000000006107                 db    0
.eh_frame:0000000000006108                 db  24h ; $
.eh_frame:0000000000006109                 db    0
.eh_frame:000000000000610A                 db    0
.eh_frame:000000000000610B                 db    0
.eh_frame:000000000000610C                 db  1Ch
.eh_frame:000000000000610D                 db    0
.eh_frame:000000000000610E                 db    0
.eh_frame:000000000000610F                 db    0
.eh_frame:0000000000006110                 db  60h ; `
.eh_frame:0000000000006111                 db 0B3h
.eh_frame:0000000000006112                 db 0FFh
.eh_frame:0000000000006113                 db 0FFh
.eh_frame:0000000000006114                 db  50h ; P
.eh_frame:0000000000006115                 db    3
.eh_frame:0000000000006116                 db    0
.eh_frame:0000000000006117                 db    0
.eh_frame:0000000000006118                 db    0
.eh_frame:0000000000006119                 db  0Eh
.eh_frame:000000000000611A                 db  10h
.eh_frame:000000000000611B                 db  46h ; F
.eh_frame:000000000000611C                 db  0Eh
.eh_frame:000000000000611D                 db  18h
.eh_frame:000000000000611E                 db  4Ah ; J
.eh_frame:000000000000611F                 db  0Fh
.eh_frame:0000000000006120                 db  0Bh
.eh_frame:0000000000006121                 db  77h ; w
.eh_frame:0000000000006122                 db    8
.eh_frame:0000000000006123                 db  80h
.eh_frame:0000000000006124                 db    0
.eh_frame:0000000000006125                 db  3Fh ; ?
.eh_frame:0000000000006126                 db  1Ah
.eh_frame:0000000000006127                 db  3Bh ; ;
.eh_frame:0000000000006128                 db  2Ah ; *
.eh_frame:0000000000006129                 db  33h ; 3
.eh_frame:000000000000612A                 db  24h ; $
.eh_frame:000000000000612B                 db  22h ; "
.eh_frame:000000000000612C                 db    0
.eh_frame:000000000000612D                 db    0
.eh_frame:000000000000612E                 db    0
.eh_frame:000000000000612F                 db    0
.eh_frame:0000000000006130                 db  14h
.eh_frame:0000000000006131                 db    0
.eh_frame:0000000000006132                 db    0
.eh_frame:0000000000006133                 db    0
.eh_frame:0000000000006134                 db  44h ; D
.eh_frame:0000000000006135                 db    0
.eh_frame:0000000000006136                 db    0
.eh_frame:0000000000006137                 db    0
.eh_frame:0000000000006138                 db  88h
.eh_frame:0000000000006139                 db 0B6h
.eh_frame:000000000000613A                 db 0FFh
.eh_frame:000000000000613B                 db 0FFh
.eh_frame:000000000000613C                 db    8
.eh_frame:000000000000613D                 db    0
.eh_frame:000000000000613E                 db    0
.eh_frame:000000000000613F                 db    0
.eh_frame:0000000000006140                 db    0
.eh_frame:0000000000006141                 db    0
.eh_frame:0000000000006142                 db    0
.eh_frame:0000000000006143                 db    0
.eh_frame:0000000000006144                 db    0
.eh_frame:0000000000006145                 db    0
.eh_frame:0000000000006146                 db    0
.eh_frame:0000000000006147                 db    0
.eh_frame:0000000000006148                 db  28h ; (
.eh_frame:0000000000006149                 db    0
.eh_frame:000000000000614A                 db    0
.eh_frame:000000000000614B                 db    0
.eh_frame:000000000000614C                 db  5Ch ; \
.eh_frame:000000000000614D                 db    0
.eh_frame:000000000000614E                 db    0
.eh_frame:000000000000614F                 db    0
.eh_frame:0000000000006150                 db  50h ; P
.eh_frame:0000000000006151                 db 0B9h
.eh_frame:0000000000006152                 db 0FFh
.eh_frame:0000000000006153                 db 0FFh
.eh_frame:0000000000006154                 db 0F7h
.eh_frame:0000000000006155                 db    0
.eh_frame:0000000000006156                 db    0
.eh_frame:0000000000006157                 db    0
.eh_frame:0000000000006158                 db    0
.eh_frame:0000000000006159                 db  41h ; A
.eh_frame:000000000000615A                 db  0Eh
.eh_frame:000000000000615B                 db  10h
.eh_frame:000000000000615C                 db  86h
.eh_frame:000000000000615D                 db    2
.eh_frame:000000000000615E                 db  41h ; A
.eh_frame:000000000000615F                 db  0Eh
.eh_frame:0000000000006160                 db  18h
.eh_frame:0000000000006161                 db  83h
.eh_frame:0000000000006162                 db    3
.eh_frame:0000000000006163                 db  4Eh ; N
.eh_frame:0000000000006164                 db  0Eh
.eh_frame:0000000000006165                 db 0D0h
.eh_frame:0000000000006166                 db    2
.eh_frame:0000000000006167                 db    2
.eh_frame:0000000000006168                 db  8Fh
.eh_frame:0000000000006169                 db  0Ah
.eh_frame:000000000000616A                 db  0Eh
.eh_frame:000000000000616B                 db  18h
.eh_frame:000000000000616C                 db  41h ; A
.eh_frame:000000000000616D                 db  0Eh
.eh_frame:000000000000616E                 db  10h
.eh_frame:000000000000616F                 db  41h ; A
.eh_frame:0000000000006170                 db  0Eh
.eh_frame:0000000000006171                 db    8
.eh_frame:0000000000006172                 db  41h ; A
.eh_frame:0000000000006173                 db  0Bh
.eh_frame:0000000000006174                 db  34h ; 4
.eh_frame:0000000000006175                 db    0
.eh_frame:0000000000006176                 db    0
.eh_frame:0000000000006177                 db    0
.eh_frame:0000000000006178                 db  88h
.eh_frame:0000000000006179                 db    0
.eh_frame:000000000000617A                 db    0
.eh_frame:000000000000617B                 db    0
.eh_frame:000000000000617C                 db  24h ; $
.eh_frame:000000000000617D                 db 0BAh
.eh_frame:000000000000617E                 db 0FFh
.eh_frame:000000000000617F                 db 0FFh
.eh_frame:0000000000006180                 db  82h
.eh_frame:0000000000006181                 db    0
.eh_frame:0000000000006182                 db    0
.eh_frame:0000000000006183                 db    0
.eh_frame:0000000000006184                 db    0
.eh_frame:0000000000006185                 db  41h ; A
.eh_frame:0000000000006186                 db  0Eh
.eh_frame:0000000000006187                 db  10h
.eh_frame:0000000000006188                 db  86h
.eh_frame:0000000000006189                 db    2
.eh_frame:000000000000618A                 db  41h ; A
.eh_frame:000000000000618B                 db  0Eh
.eh_frame:000000000000618C                 db  18h
.eh_frame:000000000000618D                 db  83h
.eh_frame:000000000000618E                 db    3
.eh_frame:000000000000618F                 db  4Ch ; L
.eh_frame:0000000000006190                 db  0Eh
.eh_frame:0000000000006191                 db  20h
.eh_frame:0000000000006192                 db    2
.eh_frame:0000000000006193                 db  50h ; P
.eh_frame:0000000000006194                 db  0Ah
.eh_frame:0000000000006195                 db  0Eh
.eh_frame:0000000000006196                 db  18h
.eh_frame:0000000000006197                 db  41h ; A
.eh_frame:0000000000006198                 db  0Eh
.eh_frame:0000000000006199                 db  10h
.eh_frame:000000000000619A                 db  41h ; A
.eh_frame:000000000000619B                 db  0Eh
.eh_frame:000000000000619C                 db    8
.eh_frame:000000000000619D                 db  48h ; H
.eh_frame:000000000000619E                 db  0Bh
.eh_frame:000000000000619F                 db  4Bh ; K
.eh_frame:00000000000061A0                 db  0Ah
.eh_frame:00000000000061A1                 db  0Eh
.eh_frame:00000000000061A2                 db  18h
.eh_frame:00000000000061A3                 db  41h ; A
.eh_frame:00000000000061A4                 db  0Eh
.eh_frame:00000000000061A5                 db  10h
.eh_frame:00000000000061A6                 db  41h ; A
.eh_frame:00000000000061A7                 db  0Eh
.eh_frame:00000000000061A8                 db    8
.eh_frame:00000000000061A9                 db  41h ; A
.eh_frame:00000000000061AA                 db  0Bh
.eh_frame:00000000000061AB                 db    0
.eh_frame:00000000000061AC                 db  48h ; H
.eh_frame:00000000000061AD                 db    0
.eh_frame:00000000000061AE                 db    0
.eh_frame:00000000000061AF                 db    0
.eh_frame:00000000000061B0                 db 0C0h
.eh_frame:00000000000061B1                 db    0
.eh_frame:00000000000061B2                 db    0
.eh_frame:00000000000061B3                 db    0
.eh_frame:00000000000061B4                 db  7Ch ; |
.eh_frame:00000000000061B5                 db 0BAh
.eh_frame:00000000000061B6                 db 0FFh
.eh_frame:00000000000061B7                 db 0FFh
.eh_frame:00000000000061B8                 db 0DCh
.eh_frame:00000000000061B9                 db    0
.eh_frame:00000000000061BA                 db    0
.eh_frame:00000000000061BB                 db    0
.eh_frame:00000000000061BC                 db    0
.eh_frame:00000000000061BD                 db  42h ; B
.eh_frame:00000000000061BE                 db  0Eh
.eh_frame:00000000000061BF                 db  10h
.eh_frame:00000000000061C0                 db  8Fh
.eh_frame:00000000000061C1                 db    2
.eh_frame:00000000000061C2                 db  42h ; B
.eh_frame:00000000000061C3                 db  0Eh
.eh_frame:00000000000061C4                 db  18h
.eh_frame:00000000000061C5                 db  8Eh
.eh_frame:00000000000061C6                 db    3
.eh_frame:00000000000061C7                 db  45h ; E
.eh_frame:00000000000061C8                 db  0Eh
.eh_frame:00000000000061C9                 db  20h
.eh_frame:00000000000061CA                 db  8Dh
.eh_frame:00000000000061CB                 db    4
.eh_frame:00000000000061CC                 db  42h ; B
.eh_frame:00000000000061CD                 db  0Eh
.eh_frame:00000000000061CE                 db  28h ; (
.eh_frame:00000000000061CF                 db  8Ch
.eh_frame:00000000000061D0                 db    5
.eh_frame:00000000000061D1                 db  44h ; D
.eh_frame:00000000000061D2                 db  0Eh
.eh_frame:00000000000061D3                 db  30h ; 0
.eh_frame:00000000000061D4                 db  86h
.eh_frame:00000000000061D5                 db    6
.eh_frame:00000000000061D6                 db  41h ; A
.eh_frame:00000000000061D7                 db  0Eh
.eh_frame:00000000000061D8                 db  38h ; 8
.eh_frame:00000000000061D9                 db  83h
.eh_frame:00000000000061DA                 db    7
.eh_frame:00000000000061DB                 db  47h ; G
.eh_frame:00000000000061DC                 db  0Eh
.eh_frame:00000000000061DD                 db  50h ; P
.eh_frame:00000000000061DE                 db    2
.eh_frame:00000000000061DF                 db 0A3h
.eh_frame:00000000000061E0                 db  0Ah
.eh_frame:00000000000061E1                 db  0Eh
.eh_frame:00000000000061E2                 db  38h ; 8
.eh_frame:00000000000061E3                 db  41h ; A
.eh_frame:00000000000061E4                 db  0Eh
.eh_frame:00000000000061E5                 db  30h ; 0
.eh_frame:00000000000061E6                 db  41h ; A
.eh_frame:00000000000061E7                 db  0Eh
.eh_frame:00000000000061E8                 db  28h ; (
.eh_frame:00000000000061E9                 db  42h ; B
.eh_frame:00000000000061EA                 db  0Eh
.eh_frame:00000000000061EB                 db  20h
.eh_frame:00000000000061EC                 db  42h ; B
.eh_frame:00000000000061ED                 db  0Eh
.eh_frame:00000000000061EE                 db  18h
.eh_frame:00000000000061EF                 db  42h ; B
.eh_frame:00000000000061F0                 db  0Eh
.eh_frame:00000000000061F1                 db  10h
.eh_frame:00000000000061F2                 db  42h ; B
.eh_frame:00000000000061F3                 db  0Eh
.eh_frame:00000000000061F4                 db    8
.eh_frame:00000000000061F5                 db  49h ; I
.eh_frame:00000000000061F6                 db  0Bh
.eh_frame:00000000000061F7                 db    0
.eh_frame:00000000000061F8                 db  4Ch ; L
.eh_frame:00000000000061F9                 db    0
.eh_frame:00000000000061FA                 db    0
.eh_frame:00000000000061FB                 db    0
.eh_frame:00000000000061FC                 db  0Ch
.eh_frame:00000000000061FD                 db    1
.eh_frame:00000000000061FE                 db    0
.eh_frame:00000000000061FF                 db    0
.eh_frame:0000000000006200                 db  10h
.eh_frame:0000000000006201                 db 0BBh
.eh_frame:0000000000006202                 db 0FFh
.eh_frame:0000000000006203                 db 0FFh
.eh_frame:0000000000006204                 db  1Dh
.eh_frame:0000000000006205                 db    5
.eh_frame:0000000000006206                 db    0
.eh_frame:0000000000006207                 db    0
.eh_frame:0000000000006208                 db    0
.eh_frame:0000000000006209                 db  42h ; B
.eh_frame:000000000000620A                 db  0Eh
.eh_frame:000000000000620B                 db  10h
.eh_frame:000000000000620C                 db  8Fh
.eh_frame:000000000000620D                 db    2
.eh_frame:000000000000620E                 db  42h ; B
.eh_frame:000000000000620F                 db  0Eh
.eh_frame:0000000000006210                 db  18h
.eh_frame:0000000000006211                 db  8Eh
.eh_frame:0000000000006212                 db    3
.eh_frame:0000000000006213                 db  42h ; B
.eh_frame:0000000000006214                 db  0Eh
.eh_frame:0000000000006215                 db  20h
.eh_frame:0000000000006216                 db  8Dh
.eh_frame:0000000000006217                 db    4
.eh_frame:0000000000006218                 db  42h ; B
.eh_frame:0000000000006219                 db  0Eh
.eh_frame:000000000000621A                 db  28h ; (
.eh_frame:000000000000621B                 db  8Ch
.eh_frame:000000000000621C                 db    5
.eh_frame:000000000000621D                 db  41h ; A
.eh_frame:000000000000621E                 db  0Eh
.eh_frame:000000000000621F                 db  30h ; 0
.eh_frame:0000000000006220                 db  86h
.eh_frame:0000000000006221                 db    6
.eh_frame:0000000000006222                 db  41h ; A
.eh_frame:0000000000006223                 db  0Eh
.eh_frame:0000000000006224                 db  38h ; 8
.eh_frame:0000000000006225                 db  83h
.eh_frame:0000000000006226                 db    7
.eh_frame:0000000000006227                 db  47h ; G
.eh_frame:0000000000006228                 db  0Eh
.eh_frame:0000000000006229                 db 0C0h
.eh_frame:000000000000622A                 db    4
.eh_frame:000000000000622B                 db    3
.eh_frame:000000000000622C                 db  68h ; h
.eh_frame:000000000000622D                 db    3
.eh_frame:000000000000622E                 db  0Ah
.eh_frame:000000000000622F                 db  0Eh
.eh_frame:0000000000006230                 db  38h ; 8
.eh_frame:0000000000006231                 db  41h ; A
.eh_frame:0000000000006232                 db  0Eh
.eh_frame:0000000000006233                 db  30h ; 0
.eh_frame:0000000000006234                 db  41h ; A
.eh_frame:0000000000006235                 db  0Eh
.eh_frame:0000000000006236                 db  28h ; (
.eh_frame:0000000000006237                 db  42h ; B
.eh_frame:0000000000006238                 db  0Eh
.eh_frame:0000000000006239                 db  20h
.eh_frame:000000000000623A                 db  42h ; B
.eh_frame:000000000000623B                 db  0Eh
.eh_frame:000000000000623C                 db  18h
.eh_frame:000000000000623D                 db  42h ; B
.eh_frame:000000000000623E                 db  0Eh
.eh_frame:000000000000623F                 db  10h
.eh_frame:0000000000006240                 db  42h ; B
.eh_frame:0000000000006241                 db  0Eh
.eh_frame:0000000000006242                 db    8
.eh_frame:0000000000006243                 db  41h ; A
.eh_frame:0000000000006244                 db  0Bh
.eh_frame:0000000000006245                 db    0
.eh_frame:0000000000006246                 db    0
.eh_frame:0000000000006247                 db    0
.eh_frame:0000000000006248                 db  28h ; (
.eh_frame:0000000000006249                 db    0
.eh_frame:000000000000624A                 db    0
.eh_frame:000000000000624B                 db    0
.eh_frame:000000000000624C                 db  5Ch ; \
.eh_frame:000000000000624D                 db    1
.eh_frame:000000000000624E                 db    0
.eh_frame:000000000000624F                 db    0
.eh_frame:0000000000006250                 db 0E0h
.eh_frame:0000000000006251                 db 0BFh
.eh_frame:0000000000006252                 db 0FFh
.eh_frame:0000000000006253                 db 0FFh
.eh_frame:0000000000006254                 db 0B2h
.eh_frame:0000000000006255                 db    3
.eh_frame:0000000000006256                 db    0
.eh_frame:0000000000006257                 db    0
.eh_frame:0000000000006258                 db    0
.eh_frame:0000000000006259                 db  42h ; B
.eh_frame:000000000000625A                 db  0Eh
.eh_frame:000000000000625B                 db  10h
.eh_frame:000000000000625C                 db  8Dh
.eh_frame:000000000000625D                 db    2
.eh_frame:000000000000625E                 db  42h ; B
.eh_frame:000000000000625F                 db  0Eh
.eh_frame:0000000000006260                 db  18h
.eh_frame:0000000000006261                 db  8Ch
.eh_frame:0000000000006262                 db    3
.eh_frame:0000000000006263                 db  46h ; F
.eh_frame:0000000000006264                 db  0Eh
.eh_frame:0000000000006265                 db  20h
.eh_frame:0000000000006266                 db  86h
.eh_frame:0000000000006267                 db    4
.eh_frame:0000000000006268                 db  41h ; A
.eh_frame:0000000000006269                 db  0Eh
.eh_frame:000000000000626A                 db  28h ; (
.eh_frame:000000000000626B                 db  83h
.eh_frame:000000000000626C                 db    5
.eh_frame:000000000000626D                 db  49h ; I
.eh_frame:000000000000626E                 db  0Eh
.eh_frame:000000000000626F                 db 0B0h
.eh_frame:0000000000006270                 db    1
.eh_frame:0000000000006271                 db    0
.eh_frame:0000000000006272                 db    0
.eh_frame:0000000000006273                 db    0
.eh_frame:0000000000006274                 db  30h ; 0
.eh_frame:0000000000006275                 db    0
.eh_frame:0000000000006276                 db    0
.eh_frame:0000000000006277                 db    0
.eh_frame:0000000000006278                 db  88h
.eh_frame:0000000000006279                 db    1
.eh_frame:000000000000627A                 db    0
.eh_frame:000000000000627B                 db    0
.eh_frame:000000000000627C                 db  54h ; T
.eh_frame:000000000000627D                 db 0B5h
.eh_frame:000000000000627E                 db 0FFh
.eh_frame:000000000000627F                 db 0FFh
.eh_frame:0000000000006280                 db 0BCh
.eh_frame:0000000000006281                 db    1
.eh_frame:0000000000006282                 db    0
.eh_frame:0000000000006283                 db    0
.eh_frame:0000000000006284                 db    0
.eh_frame:0000000000006285                 db  42h ; B
.eh_frame:0000000000006286                 db  0Eh
.eh_frame:0000000000006287                 db  10h
.eh_frame:0000000000006288                 db  8Ch
.eh_frame:0000000000006289                 db    2
.eh_frame:000000000000628A                 db  41h ; A
.eh_frame:000000000000628B                 db  0Eh
.eh_frame:000000000000628C                 db  18h
.eh_frame:000000000000628D                 db  86h
.eh_frame:000000000000628E                 db    3
.eh_frame:000000000000628F                 db  43h ; C
.eh_frame:0000000000006290                 db  0Eh
.eh_frame:0000000000006291                 db  20h
.eh_frame:0000000000006292                 db  83h
.eh_frame:0000000000006293                 db    4
.eh_frame:0000000000006294                 db    3
.eh_frame:0000000000006295                 db  1Ah
.eh_frame:0000000000006296                 db    1
.eh_frame:0000000000006297                 db  0Ah
.eh_frame:0000000000006298                 db  0Eh
.eh_frame:0000000000006299                 db  18h
.eh_frame:000000000000629A                 db  43h ; C
.eh_frame:000000000000629B                 db  0Eh
.eh_frame:000000000000629C                 db  10h
.eh_frame:000000000000629D                 db  42h ; B
.eh_frame:000000000000629E                 db  0Eh
.eh_frame:000000000000629F                 db    8
.eh_frame:00000000000062A0                 db  41h ; A
.eh_frame:00000000000062A1                 db  0Bh
.eh_frame:00000000000062A2                 db    0
.eh_frame:00000000000062A3                 db    0
.eh_frame:00000000000062A4                 db    0
.eh_frame:00000000000062A5                 db    0
.eh_frame:00000000000062A6                 db    0
.eh_frame:00000000000062A7                 db    0
.eh_frame:00000000000062A8                 db  10h
.eh_frame:00000000000062A9                 db    0
.eh_frame:00000000000062AA                 db    0
.eh_frame:00000000000062AB                 db    0
.eh_frame:00000000000062AC                 db 0BCh
.eh_frame:00000000000062AD                 db    1
.eh_frame:00000000000062AE                 db    0
.eh_frame:00000000000062AF                 db    0
.eh_frame:00000000000062B0                 db  40h ; @
.eh_frame:00000000000062B1                 db 0C3h
.eh_frame:00000000000062B2                 db 0FFh
.eh_frame:00000000000062B3                 db 0FFh
.eh_frame:00000000000062B4                 db    8
.eh_frame:00000000000062B5                 db    0
.eh_frame:00000000000062B6                 db    0
.eh_frame:00000000000062B7                 db    0
.eh_frame:00000000000062B8                 db    0
.eh_frame:00000000000062B9                 db    0
.eh_frame:00000000000062BA                 db    0
.eh_frame:00000000000062BB                 db    0
.eh_frame:00000000000062BC                 db  10h
.eh_frame:00000000000062BD                 db    0
.eh_frame:00000000000062BE                 db    0
.eh_frame:00000000000062BF                 db    0
.eh_frame:00000000000062C0                 db 0D0h
.eh_frame:00000000000062C1                 db    1
.eh_frame:00000000000062C2                 db    0
.eh_frame:00000000000062C3                 db    0
.eh_frame:00000000000062C4                 db  3Ch ; <
.eh_frame:00000000000062C5                 db 0C3h
.eh_frame:00000000000062C6                 db 0FFh
.eh_frame:00000000000062C7                 db 0FFh
.eh_frame:00000000000062C8                 db    8
.eh_frame:00000000000062C9                 db    0
.eh_frame:00000000000062CA                 db    0
.eh_frame:00000000000062CB                 db    0
.eh_frame:00000000000062CC                 db    0
.eh_frame:00000000000062CD                 db    0
.eh_frame:00000000000062CE                 db    0
.eh_frame:00000000000062CF                 db    0
.eh_frame:00000000000062D0                 db  2Ch ; ,
.eh_frame:00000000000062D1                 db    0
.eh_frame:00000000000062D2                 db    0
.eh_frame:00000000000062D3                 db    0
.eh_frame:00000000000062D4                 db 0E4h
.eh_frame:00000000000062D5                 db    1
.eh_frame:00000000000062D6                 db    0
.eh_frame:00000000000062D7                 db    0
.eh_frame:00000000000062D8                 db  38h ; 8
.eh_frame:00000000000062D9                 db 0C3h
.eh_frame:00000000000062DA                 db 0FFh
.eh_frame:00000000000062DB                 db 0FFh
.eh_frame:00000000000062DC                 db 0A4h
.eh_frame:00000000000062DD                 db    0
.eh_frame:00000000000062DE                 db    0
.eh_frame:00000000000062DF                 db    0
.eh_frame:00000000000062E0                 db    0
.eh_frame:00000000000062E1                 db  41h ; A
.eh_frame:00000000000062E2                 db  0Eh
.eh_frame:00000000000062E3                 db  10h
.eh_frame:00000000000062E4                 db  86h
.eh_frame:00000000000062E5                 db    2
.eh_frame:00000000000062E6                 db  41h ; A
.eh_frame:00000000000062E7                 db  0Eh
.eh_frame:00000000000062E8                 db  18h
.eh_frame:00000000000062E9                 db  83h
.eh_frame:00000000000062EA                 db    3
.eh_frame:00000000000062EB                 db  44h ; D
.eh_frame:00000000000062EC                 db  0Eh
.eh_frame:00000000000062ED                 db  20h
.eh_frame:00000000000062EE                 db  7Ah ; z
.eh_frame:00000000000062EF                 db  0Ah
.eh_frame:00000000000062F0                 db  0Eh
.eh_frame:00000000000062F1                 db  18h
.eh_frame:00000000000062F2                 db  41h ; A
.eh_frame:00000000000062F3                 db  0Eh
.eh_frame:00000000000062F4                 db  10h
.eh_frame:00000000000062F5                 db  41h ; A
.eh_frame:00000000000062F6                 db  0Eh
.eh_frame:00000000000062F7                 db    8
.eh_frame:00000000000062F8                 db  41h ; A
.eh_frame:00000000000062F9                 db  0Bh
.eh_frame:00000000000062FA                 db    0
.eh_frame:00000000000062FB                 db    0
.eh_frame:00000000000062FC                 db    0
.eh_frame:00000000000062FD                 db    0
.eh_frame:00000000000062FE                 db    0
.eh_frame:00000000000062FF                 db    0
.eh_frame:0000000000006300                 db  1Ch
.eh_frame:0000000000006301                 db    0
.eh_frame:0000000000006302                 db    0
.eh_frame:0000000000006303                 db    0
.eh_frame:0000000000006304                 db  14h
.eh_frame:0000000000006305                 db    2
.eh_frame:0000000000006306                 db    0
.eh_frame:0000000000006307                 db    0
.eh_frame:0000000000006308                 db 0B8h
.eh_frame:0000000000006309                 db 0C3h
.eh_frame:000000000000630A                 db 0FFh
.eh_frame:000000000000630B                 db 0FFh
.eh_frame:000000000000630C                 db  9Fh
.eh_frame:000000000000630D                 db    0
.eh_frame:000000000000630E                 db    0
.eh_frame:000000000000630F                 db    0
.eh_frame:0000000000006310                 db    0
.eh_frame:0000000000006311                 db  44h ; D
.eh_frame:0000000000006312                 db  0Eh
.eh_frame:0000000000006313                 db  10h
.eh_frame:0000000000006314                 db  83h
.eh_frame:0000000000006315                 db    2
.eh_frame:0000000000006316                 db    2
.eh_frame:0000000000006317                 db  78h ; x
.eh_frame:0000000000006318                 db  0Ah
.eh_frame:0000000000006319                 db  0Eh
.eh_frame:000000000000631A                 db    8
.eh_frame:000000000000631B                 db  41h ; A
.eh_frame:000000000000631C                 db  0Bh
.eh_frame:000000000000631D                 db    0
.eh_frame:000000000000631E                 db    0
.eh_frame:000000000000631F                 db    0
.eh_frame:0000000000006320                 db  40h ; @
.eh_frame:0000000000006321                 db    0
.eh_frame:0000000000006322                 db    0
.eh_frame:0000000000006323                 db    0
.eh_frame:0000000000006324                 db  34h ; 4
.eh_frame:0000000000006325                 db    2
.eh_frame:0000000000006326                 db    0
.eh_frame:0000000000006327                 db    0
.eh_frame:0000000000006328                 db  38h ; 8
.eh_frame:0000000000006329                 db 0C4h
.eh_frame:000000000000632A                 db 0FFh
.eh_frame:000000000000632B                 db 0FFh
.eh_frame:000000000000632C                 db 0E7h
.eh_frame:000000000000632D                 db    0
.eh_frame:000000000000632E                 db    0
.eh_frame:000000000000632F                 db    0
.eh_frame:0000000000006330                 db    0
.eh_frame:0000000000006331                 db  41h ; A
.eh_frame:0000000000006332                 db  0Eh
.eh_frame:0000000000006333                 db  10h
.eh_frame:0000000000006334                 db  86h
.eh_frame:0000000000006335                 db    2
.eh_frame:0000000000006336                 db  41h ; A
.eh_frame:0000000000006337                 db  0Eh
.eh_frame:0000000000006338                 db  18h
.eh_frame:0000000000006339                 db  83h
.eh_frame:000000000000633A                 db    3
.eh_frame:000000000000633B                 db  49h ; I
.eh_frame:000000000000633C                 db  0Eh
.eh_frame:000000000000633D                 db  20h
.eh_frame:000000000000633E                 db  6Eh ; n
.eh_frame:000000000000633F                 db  0Ah
.eh_frame:0000000000006340                 db  0Eh
.eh_frame:0000000000006341                 db  18h
.eh_frame:0000000000006342                 db  41h ; A
.eh_frame:0000000000006343                 db  0Eh
.eh_frame:0000000000006344                 db  10h
.eh_frame:0000000000006345                 db  41h ; A
.eh_frame:0000000000006346                 db  0Eh
.eh_frame:0000000000006347                 db    8
.eh_frame:0000000000006348                 db  45h ; E
.eh_frame:0000000000006349                 db  0Bh
.eh_frame:000000000000634A                 db    2
.eh_frame:000000000000634B                 db  4Ah ; J
.eh_frame:000000000000634C                 db  0Ah
.eh_frame:000000000000634D                 db  0Eh
.eh_frame:000000000000634E                 db  18h
.eh_frame:000000000000634F                 db  41h ; A
.eh_frame:0000000000006350                 db  0Eh
.eh_frame:0000000000006351                 db  10h
.eh_frame:0000000000006352                 db  41h ; A
.eh_frame:0000000000006353                 db  0Eh
.eh_frame:0000000000006354                 db    8
.eh_frame:0000000000006355                 db  44h ; D
.eh_frame:0000000000006356                 db  0Bh
.eh_frame:0000000000006357                 db    2
.eh_frame:0000000000006358                 db  54h ; T
.eh_frame:0000000000006359                 db  0Eh
.eh_frame:000000000000635A                 db  18h
.eh_frame:000000000000635B                 db  41h ; A
.eh_frame:000000000000635C                 db  0Eh
.eh_frame:000000000000635D                 db  10h
.eh_frame:000000000000635E                 db  41h ; A
.eh_frame:000000000000635F                 db  0Eh
.eh_frame:0000000000006360                 db    8
.eh_frame:0000000000006361                 db    0
.eh_frame:0000000000006362                 db    0
.eh_frame:0000000000006363                 db    0
.eh_frame:0000000000006364                 db  74h ; t
.eh_frame:0000000000006365                 db    0
.eh_frame:0000000000006366                 db    0
.eh_frame:0000000000006367                 db    0
.eh_frame:0000000000006368                 db  78h ; x
.eh_frame:0000000000006369                 db    2
.eh_frame:000000000000636A                 db    0
.eh_frame:000000000000636B                 db    0
.eh_frame:000000000000636C                 db 0E4h
.eh_frame:000000000000636D                 db 0C4h
.eh_frame:000000000000636E                 db 0FFh
.eh_frame:000000000000636F                 db 0FFh
.eh_frame:0000000000006370                 db  34h ; 4
.eh_frame:0000000000006371                 db  12h
.eh_frame:0000000000006372                 db    0
.eh_frame:0000000000006373                 db    0
.eh_frame:0000000000006374                 db    0
.eh_frame:0000000000006375                 db  42h ; B
.eh_frame:0000000000006376                 db  0Eh
.eh_frame:0000000000006377                 db  10h
.eh_frame:0000000000006378                 db  8Fh
.eh_frame:0000000000006379                 db    2
.eh_frame:000000000000637A                 db  42h ; B
.eh_frame:000000000000637B                 db  0Eh
.eh_frame:000000000000637C                 db  18h
.eh_frame:000000000000637D                 db  8Eh
.eh_frame:000000000000637E                 db    3
.eh_frame:000000000000637F                 db  45h ; E
.eh_frame:0000000000006380                 db  0Eh
.eh_frame:0000000000006381                 db  20h
.eh_frame:0000000000006382                 db  8Dh
.eh_frame:0000000000006383                 db    4
.eh_frame:0000000000006384                 db  42h ; B
.eh_frame:0000000000006385                 db  0Eh
.eh_frame:0000000000006386                 db  28h ; (
.eh_frame:0000000000006387                 db  8Ch
.eh_frame:0000000000006388                 db    5
.eh_frame:0000000000006389                 db  44h ; D
.eh_frame:000000000000638A                 db  0Eh
.eh_frame:000000000000638B                 db  30h ; 0
.eh_frame:000000000000638C                 db  86h
.eh_frame:000000000000638D                 db    6
.eh_frame:000000000000638E                 db  41h ; A
.eh_frame:000000000000638F                 db  0Eh
.eh_frame:0000000000006390                 db  38h ; 8
.eh_frame:0000000000006391                 db  83h
.eh_frame:0000000000006392                 db    7
.eh_frame:0000000000006393                 db  53h ; S
.eh_frame:0000000000006394                 db  0Eh
.eh_frame:0000000000006395                 db 0F0h
.eh_frame:0000000000006396                 db    1
.eh_frame:0000000000006397                 db    3
.eh_frame:0000000000006398                 db  81h
.eh_frame:0000000000006399                 db  0Bh
.eh_frame:000000000000639A                 db  0Eh
.eh_frame:000000000000639B                 db 0F8h
.eh_frame:000000000000639C                 db    1
.eh_frame:000000000000639D                 db  4Ah ; J
.eh_frame:000000000000639E                 db  0Eh
.eh_frame:000000000000639F                 db  80h
.eh_frame:00000000000063A0                 db    2
.eh_frame:00000000000063A1                 db  44h ; D
.eh_frame:00000000000063A2                 db  0Eh
.eh_frame:00000000000063A3                 db  88h
.eh_frame:00000000000063A4                 db    2
.eh_frame:00000000000063A5                 db  45h ; E
.eh_frame:00000000000063A6                 db  0Eh
.eh_frame:00000000000063A7                 db  90h
.eh_frame:00000000000063A8                 db    2
.eh_frame:00000000000063A9                 db  5Fh ; _
.eh_frame:00000000000063AA                 db  0Eh
.eh_frame:00000000000063AB                 db 0F0h
.eh_frame:00000000000063AC                 db    1
.eh_frame:00000000000063AD                 db  64h ; d
.eh_frame:00000000000063AE                 db  0Ah
.eh_frame:00000000000063AF                 db  0Eh
.eh_frame:00000000000063B0                 db  38h ; 8
.eh_frame:00000000000063B1                 db  41h ; A
.eh_frame:00000000000063B2                 db  0Eh
.eh_frame:00000000000063B3                 db  30h ; 0
.eh_frame:00000000000063B4                 db  41h ; A
.eh_frame:00000000000063B5                 db  0Eh
.eh_frame:00000000000063B6                 db  28h ; (
.eh_frame:00000000000063B7                 db  42h ; B
.eh_frame:00000000000063B8                 db  0Eh
.eh_frame:00000000000063B9                 db  20h
.eh_frame:00000000000063BA                 db  42h ; B
.eh_frame:00000000000063BB                 db  0Eh
.eh_frame:00000000000063BC                 db  18h
.eh_frame:00000000000063BD                 db  42h ; B
.eh_frame:00000000000063BE                 db  0Eh
.eh_frame:00000000000063BF                 db  10h
.eh_frame:00000000000063C0                 db  42h ; B
.eh_frame:00000000000063C1                 db  0Eh
.eh_frame:00000000000063C2                 db    8
.eh_frame:00000000000063C3                 db  44h ; D
.eh_frame:00000000000063C4                 db  0Bh
.eh_frame:00000000000063C5                 db    3
.eh_frame:00000000000063C6                 db  99h
.eh_frame:00000000000063C7                 db    5
.eh_frame:00000000000063C8                 db  0Eh
.eh_frame:00000000000063C9                 db 0F8h
.eh_frame:00000000000063CA                 db    1
.eh_frame:00000000000063CB                 db  4Dh ; M
.eh_frame:00000000000063CC                 db  0Eh
.eh_frame:00000000000063CD                 db  80h
.eh_frame:00000000000063CE                 db    2
.eh_frame:00000000000063CF                 db  44h ; D
.eh_frame:00000000000063D0                 db  0Eh
.eh_frame:00000000000063D1                 db  88h
.eh_frame:00000000000063D2                 db    2
.eh_frame:00000000000063D3                 db  47h ; G
.eh_frame:00000000000063D4                 db  0Eh
.eh_frame:00000000000063D5                 db  90h
.eh_frame:00000000000063D6                 db    2
.eh_frame:00000000000063D7                 db  5Bh ; [
.eh_frame:00000000000063D8                 db  0Eh
.eh_frame:00000000000063D9                 db 0F0h
.eh_frame:00000000000063DA                 db    1
.eh_frame:00000000000063DB                 db    0
.eh_frame:00000000000063DC                 db  68h ; h
.eh_frame:00000000000063DD                 db    0
.eh_frame:00000000000063DE                 db    0
.eh_frame:00000000000063DF                 db    0
.eh_frame:00000000000063E0                 db 0F0h
.eh_frame:00000000000063E1                 db    2
.eh_frame:00000000000063E2                 db    0
.eh_frame:00000000000063E3                 db    0
.eh_frame:00000000000063E4                 db 0ACh
.eh_frame:00000000000063E5                 db 0D6h
.eh_frame:00000000000063E6                 db 0FFh
.eh_frame:00000000000063E7                 db 0FFh
.eh_frame:00000000000063E8                 db 0ABh
.eh_frame:00000000000063E9                 db    1
.eh_frame:00000000000063EA                 db    0
.eh_frame:00000000000063EB                 db    0
.eh_frame:00000000000063EC                 db    0
.eh_frame:00000000000063ED                 db  42h ; B
.eh_frame:00000000000063EE                 db  0Eh
.eh_frame:00000000000063EF                 db  10h
.eh_frame:00000000000063F0                 db  8Fh
.eh_frame:00000000000063F1                 db    2
.eh_frame:00000000000063F2                 db  42h ; B
.eh_frame:00000000000063F3                 db  0Eh
.eh_frame:00000000000063F4                 db  18h
.eh_frame:00000000000063F5                 db  8Eh
.eh_frame:00000000000063F6                 db    3
.eh_frame:00000000000063F7                 db  45h ; E
.eh_frame:00000000000063F8                 db  0Eh
.eh_frame:00000000000063F9                 db  20h
.eh_frame:00000000000063FA                 db  8Dh
.eh_frame:00000000000063FB                 db    4
.eh_frame:00000000000063FC                 db  42h ; B
.eh_frame:00000000000063FD                 db  0Eh
.eh_frame:00000000000063FE                 db  28h ; (
.eh_frame:00000000000063FF                 db  8Ch
.eh_frame:0000000000006400                 db    5
.eh_frame:0000000000006401                 db  44h ; D
.eh_frame:0000000000006402                 db  0Eh
.eh_frame:0000000000006403                 db  30h ; 0
.eh_frame:0000000000006404                 db  86h
.eh_frame:0000000000006405                 db    6
.eh_frame:0000000000006406                 db  41h ; A
.eh_frame:0000000000006407                 db  0Eh
.eh_frame:0000000000006408                 db  38h ; 8
.eh_frame:0000000000006409                 db  83h
.eh_frame:000000000000640A                 db    7
.eh_frame:000000000000640B                 db  47h ; G
.eh_frame:000000000000640C                 db  0Eh
.eh_frame:000000000000640D                 db  60h ; `
.eh_frame:000000000000640E                 db    2
.eh_frame:000000000000640F                 db  99h
.eh_frame:0000000000006410                 db  0Eh
.eh_frame:0000000000006411                 db  68h ; h
.eh_frame:0000000000006412                 db  5Fh ; _
.eh_frame:0000000000006413                 db  0Eh
.eh_frame:0000000000006414                 db  70h ; p
.eh_frame:0000000000006415                 db  46h ; F
.eh_frame:0000000000006416                 db  0Eh
.eh_frame:0000000000006417                 db  78h ; x
.eh_frame:0000000000006418                 db  42h ; B
.eh_frame:0000000000006419                 db  0Eh
.eh_frame:000000000000641A                 db  80h
.eh_frame:000000000000641B                 db    1
.eh_frame:000000000000641C                 db  59h ; Y
.eh_frame:000000000000641D                 db  0Eh
.eh_frame:000000000000641E                 db  60h ; `
.eh_frame:000000000000641F                 db    2
.eh_frame:0000000000006420                 db  40h ; @
.eh_frame:0000000000006421                 db  0Eh
.eh_frame:0000000000006422                 db  68h ; h
.eh_frame:0000000000006423                 db  4Bh ; K
.eh_frame:0000000000006424                 db  0Eh
.eh_frame:0000000000006425                 db  70h ; p
.eh_frame:0000000000006426                 db  43h ; C
.eh_frame:0000000000006427                 db  0Eh
.eh_frame:0000000000006428                 db  78h ; x
.eh_frame:0000000000006429                 db  45h ; E
.eh_frame:000000000000642A                 db  0Eh
.eh_frame:000000000000642B                 db  80h
.eh_frame:000000000000642C                 db    1
.eh_frame:000000000000642D                 db  5Eh ; ^
.eh_frame:000000000000642E                 db  0Eh
.eh_frame:000000000000642F                 db  60h ; `
.eh_frame:0000000000006430                 db  4Ch ; L
.eh_frame:0000000000006431                 db  0Ah
.eh_frame:0000000000006432                 db  0Eh
.eh_frame:0000000000006433                 db  38h ; 8
.eh_frame:0000000000006434                 db  44h ; D
.eh_frame:0000000000006435                 db  0Eh
.eh_frame:0000000000006436                 db  30h ; 0
.eh_frame:0000000000006437                 db  41h ; A
.eh_frame:0000000000006438                 db  0Eh
.eh_frame:0000000000006439                 db  28h ; (
.eh_frame:000000000000643A                 db  42h ; B
.eh_frame:000000000000643B                 db  0Eh
.eh_frame:000000000000643C                 db  20h
.eh_frame:000000000000643D                 db  42h ; B
.eh_frame:000000000000643E                 db  0Eh
.eh_frame:000000000000643F                 db  18h
.eh_frame:0000000000006440                 db  42h ; B
.eh_frame:0000000000006441                 db  0Eh
.eh_frame:0000000000006442                 db  10h
.eh_frame:0000000000006443                 db  42h ; B
.eh_frame:0000000000006444                 db  0Eh
.eh_frame:0000000000006445                 db    8
.eh_frame:0000000000006446                 db  46h ; F
.eh_frame:0000000000006447                 db  0Bh
.eh_frame:0000000000006448                 db  28h ; (
.eh_frame:0000000000006449                 db    0
.eh_frame:000000000000644A                 db    0
.eh_frame:000000000000644B                 db    0
.eh_frame:000000000000644C                 db  5Ch ; \
.eh_frame:000000000000644D                 db    3
.eh_frame:000000000000644E                 db    0
.eh_frame:000000000000644F                 db    0
.eh_frame:0000000000006450                 db 0F0h
.eh_frame:0000000000006451                 db 0D7h
.eh_frame:0000000000006452                 db 0FFh
.eh_frame:0000000000006453                 db 0FFh
.eh_frame:0000000000006454                 db  36h ; 6
.eh_frame:0000000000006455                 db    0
.eh_frame:0000000000006456                 db    0
.eh_frame:0000000000006457                 db    0
.eh_frame:0000000000006458                 db    0
.eh_frame:0000000000006459                 db  42h ; B
.eh_frame:000000000000645A                 db  0Eh
.eh_frame:000000000000645B                 db  10h
.eh_frame:000000000000645C                 db  8Ch
.eh_frame:000000000000645D                 db    2
.eh_frame:000000000000645E                 db  41h ; A
.eh_frame:000000000000645F                 db  0Eh
.eh_frame:0000000000006460                 db  18h
.eh_frame:0000000000006461                 db  86h
.eh_frame:0000000000006462                 db    3
.eh_frame:0000000000006463                 db  41h ; A
.eh_frame:0000000000006464                 db  0Eh
.eh_frame:0000000000006465                 db  20h
.eh_frame:0000000000006466                 db  83h
.eh_frame:0000000000006467                 db    4
.eh_frame:0000000000006468                 db  6Eh ; n
.eh_frame:0000000000006469                 db  0Eh
.eh_frame:000000000000646A                 db  18h
.eh_frame:000000000000646B                 db  41h ; A
.eh_frame:000000000000646C                 db  0Eh
.eh_frame:000000000000646D                 db  10h
.eh_frame:000000000000646E                 db  42h ; B
.eh_frame:000000000000646F                 db  0Eh
.eh_frame:0000000000006470                 db    8
.eh_frame:0000000000006471                 db    0
.eh_frame:0000000000006472                 db    0
.eh_frame:0000000000006473                 db    0
.eh_frame:0000000000006474                 db  10h
.eh_frame:0000000000006475                 db    0
.eh_frame:0000000000006476                 db    0
.eh_frame:0000000000006477                 db    0
.eh_frame:0000000000006478                 db  88h
.eh_frame:0000000000006479                 db    3
.eh_frame:000000000000647A                 db    0
.eh_frame:000000000000647B                 db    0
.eh_frame:000000000000647C                 db    4
.eh_frame:000000000000647D                 db 0D8h
.eh_frame:000000000000647E                 db 0FFh
.eh_frame:000000000000647F                 db 0FFh
.eh_frame:0000000000006480                 db  11h
.eh_frame:0000000000006481                 db    0
.eh_frame:0000000000006482                 db    0
.eh_frame:0000000000006483                 db    0
.eh_frame:0000000000006484                 db    0
.eh_frame:0000000000006485                 db    0
.eh_frame:0000000000006486                 db    0
.eh_frame:0000000000006487                 db    0
.eh_frame:0000000000006488                 db  10h
.eh_frame:0000000000006489                 db    0
.eh_frame:000000000000648A                 db    0
.eh_frame:000000000000648B                 db    0
.eh_frame:000000000000648C                 db  9Ch
.eh_frame:000000000000648D                 db    3
.eh_frame:000000000000648E                 db    0
.eh_frame:000000000000648F                 db    0
.eh_frame:0000000000006490                 db  10h
.eh_frame:0000000000006491                 db 0D8h
.eh_frame:0000000000006492                 db 0FFh
.eh_frame:0000000000006493                 db 0FFh
.eh_frame:0000000000006494                 db  11h
.eh_frame:0000000000006495                 db    0
.eh_frame:0000000000006496                 db    0
.eh_frame:0000000000006497                 db    0
.eh_frame:0000000000006498                 db    0
.eh_frame:0000000000006499                 db    0
.eh_frame:000000000000649A                 db    0
.eh_frame:000000000000649B                 db    0
.eh_frame:000000000000649C                 db  10h
.eh_frame:000000000000649D                 db    0
.eh_frame:000000000000649E                 db    0
.eh_frame:000000000000649F                 db    0
.eh_frame:00000000000064A0                 db 0B0h
.eh_frame:00000000000064A1                 db    3
.eh_frame:00000000000064A2                 db    0
.eh_frame:00000000000064A3                 db    0
.eh_frame:00000000000064A4                 db  1Ch
.eh_frame:00000000000064A5                 db 0D8h
.eh_frame:00000000000064A6                 db 0FFh
.eh_frame:00000000000064A7                 db 0FFh
.eh_frame:00000000000064A8                 db  35h ; 5
.eh_frame:00000000000064A9                 db    0
.eh_frame:00000000000064AA                 db    0
.eh_frame:00000000000064AB                 db    0
.eh_frame:00000000000064AC                 db    0
.eh_frame:00000000000064AD                 db    0
.eh_frame:00000000000064AE                 db    0
.eh_frame:00000000000064AF                 db    0
.eh_frame:00000000000064B0                 db  10h
.eh_frame:00000000000064B1                 db    0
.eh_frame:00000000000064B2                 db    0
.eh_frame:00000000000064B3                 db    0
.eh_frame:00000000000064B4                 db 0C4h
.eh_frame:00000000000064B5                 db    3
.eh_frame:00000000000064B6                 db    0
.eh_frame:00000000000064B7                 db    0
.eh_frame:00000000000064B8                 db  48h ; H
.eh_frame:00000000000064B9                 db 0D8h
.eh_frame:00000000000064BA                 db 0FFh
.eh_frame:00000000000064BB                 db 0FFh
.eh_frame:00000000000064BC                 db  15h
.eh_frame:00000000000064BD                 db    0
.eh_frame:00000000000064BE                 db    0
.eh_frame:00000000000064BF                 db    0
.eh_frame:00000000000064C0                 db    0
.eh_frame:00000000000064C1                 db    0
.eh_frame:00000000000064C2                 db    0
.eh_frame:00000000000064C3                 db    0
.eh_frame:00000000000064C4                 db  10h
.eh_frame:00000000000064C5                 db    0
.eh_frame:00000000000064C6                 db    0
.eh_frame:00000000000064C7                 db    0
.eh_frame:00000000000064C8                 db 0D8h
.eh_frame:00000000000064C9                 db    3
.eh_frame:00000000000064CA                 db    0
.eh_frame:00000000000064CB                 db    0
.eh_frame:00000000000064CC                 db  54h ; T
.eh_frame:00000000000064CD                 db 0D8h
.eh_frame:00000000000064CE                 db 0FFh
.eh_frame:00000000000064CF                 db 0FFh
.eh_frame:00000000000064D0                 db  30h ; 0
.eh_frame:00000000000064D1                 db    0
.eh_frame:00000000000064D2                 db    0
.eh_frame:00000000000064D3                 db    0
.eh_frame:00000000000064D4                 db    0
.eh_frame:00000000000064D5                 db  6Bh ; k
.eh_frame:00000000000064D6                 db  0Eh
.eh_frame:00000000000064D7                 db  10h
.eh_frame:00000000000064D8                 db  50h ; P
.eh_frame:00000000000064D9                 db    0
.eh_frame:00000000000064DA                 db    0
.eh_frame:00000000000064DB                 db    0
.eh_frame:00000000000064DC                 db 0ECh
.eh_frame:00000000000064DD                 db    3
.eh_frame:00000000000064DE                 db    0
.eh_frame:00000000000064DF                 db    0
.eh_frame:00000000000064E0                 db  70h ; p
.eh_frame:00000000000064E1                 db 0D8h
.eh_frame:00000000000064E2                 db 0FFh
.eh_frame:00000000000064E3                 db 0FFh
.eh_frame:00000000000064E4                 db  74h ; t
.eh_frame:00000000000064E5                 db    0
.eh_frame:00000000000064E6                 db    0
.eh_frame:00000000000064E7                 db    0
.eh_frame:00000000000064E8                 db    0
.eh_frame:00000000000064E9                 db  42h ; B
.eh_frame:00000000000064EA                 db  0Eh
.eh_frame:00000000000064EB                 db  10h
.eh_frame:00000000000064EC                 db  8Fh
.eh_frame:00000000000064ED                 db    2
.eh_frame:00000000000064EE                 db  42h ; B
.eh_frame:00000000000064EF                 db  0Eh
.eh_frame:00000000000064F0                 db  18h
.eh_frame:00000000000064F1                 db  8Eh
.eh_frame:00000000000064F2                 db    3
.eh_frame:00000000000064F3                 db  49h ; I
.eh_frame:00000000000064F4                 db  0Eh
.eh_frame:00000000000064F5                 db  20h
.eh_frame:00000000000064F6                 db  8Dh
.eh_frame:00000000000064F7                 db    4
.eh_frame:00000000000064F8                 db  42h ; B
.eh_frame:00000000000064F9                 db  0Eh
.eh_frame:00000000000064FA                 db  28h ; (
.eh_frame:00000000000064FB                 db  8Ch
.eh_frame:00000000000064FC                 db    5
.eh_frame:00000000000064FD                 db  44h ; D
.eh_frame:00000000000064FE                 db  0Eh
.eh_frame:00000000000064FF                 db  30h ; 0
.eh_frame:0000000000006500                 db  86h
.eh_frame:0000000000006501                 db    6
.eh_frame:0000000000006502                 db  41h ; A
.eh_frame:0000000000006503                 db  0Eh
.eh_frame:0000000000006504                 db  38h ; 8
.eh_frame:0000000000006505                 db  83h
.eh_frame:0000000000006506                 db    7
.eh_frame:0000000000006507                 db  4Dh ; M
.eh_frame:0000000000006508                 db  0Eh
.eh_frame:0000000000006509                 db  50h ; P
.eh_frame:000000000000650A                 db  5Fh ; _
.eh_frame:000000000000650B                 db  0Eh
.eh_frame:000000000000650C                 db  58h ; X
.eh_frame:000000000000650D                 db  47h ; G
.eh_frame:000000000000650E                 db  0Eh
.eh_frame:000000000000650F                 db  60h ; `
.eh_frame:0000000000006510                 db  46h ; F
.eh_frame:0000000000006511                 db  0Eh
.eh_frame:0000000000006512                 db  68h ; h
.eh_frame:0000000000006513                 db  44h ; D
.eh_frame:0000000000006514                 db  0Eh
.eh_frame:0000000000006515                 db  70h ; p
.eh_frame:0000000000006516                 db  58h ; X
.eh_frame:0000000000006517                 db  0Eh
.eh_frame:0000000000006518                 db  38h ; 8
.eh_frame:0000000000006519                 db  41h ; A
.eh_frame:000000000000651A                 db  0Eh
.eh_frame:000000000000651B                 db  30h ; 0
.eh_frame:000000000000651C                 db  41h ; A
.eh_frame:000000000000651D                 db  0Eh
.eh_frame:000000000000651E                 db  28h ; (
.eh_frame:000000000000651F                 db  42h ; B
.eh_frame:0000000000006520                 db  0Eh
.eh_frame:0000000000006521                 db  20h
.eh_frame:0000000000006522                 db  42h ; B
.eh_frame:0000000000006523                 db  0Eh
.eh_frame:0000000000006524                 db  18h
.eh_frame:0000000000006525                 db  42h ; B
.eh_frame:0000000000006526                 db  0Eh
.eh_frame:0000000000006527                 db  10h
.eh_frame:0000000000006528                 db  42h ; B
.eh_frame:0000000000006529                 db  0Eh
.eh_frame:000000000000652A                 db    8
.eh_frame:000000000000652B                 db    0
.eh_frame:000000000000652C                 db  68h ; h
.eh_frame:000000000000652D                 db    0
.eh_frame:000000000000652E                 db    0
.eh_frame:000000000000652F                 db    0
.eh_frame:0000000000006530                 db  40h ; @
.eh_frame:0000000000006531                 db    4
.eh_frame:0000000000006532                 db    0
.eh_frame:0000000000006533                 db    0
.eh_frame:0000000000006534                 db  9Ch
.eh_frame:0000000000006535                 db 0D8h
.eh_frame:0000000000006536                 db 0FFh
.eh_frame:0000000000006537                 db 0FFh
.eh_frame:0000000000006538                 db 0E3h
.eh_frame:0000000000006539                 db    0
.eh_frame:000000000000653A                 db    0
.eh_frame:000000000000653B                 db    0
.eh_frame:000000000000653C                 db    0
.eh_frame:000000000000653D                 db  42h ; B
.eh_frame:000000000000653E                 db  0Eh
.eh_frame:000000000000653F                 db  10h
.eh_frame:0000000000006540                 db  8Fh
.eh_frame:0000000000006541                 db    2
.eh_frame:0000000000006542                 db  42h ; B
.eh_frame:0000000000006543                 db  0Eh
.eh_frame:0000000000006544                 db  18h
.eh_frame:0000000000006545                 db  8Eh
.eh_frame:0000000000006546                 db    3
.eh_frame:0000000000006547                 db  49h ; I
.eh_frame:0000000000006548                 db  0Eh
.eh_frame:0000000000006549                 db  20h
.eh_frame:000000000000654A                 db  8Dh
.eh_frame:000000000000654B                 db    4
.eh_frame:000000000000654C                 db  42h ; B
.eh_frame:000000000000654D                 db  0Eh
.eh_frame:000000000000654E                 db  28h ; (
.eh_frame:000000000000654F                 db  8Ch
.eh_frame:0000000000006550                 db    5
.eh_frame:0000000000006551                 db  44h ; D
.eh_frame:0000000000006552                 db  0Eh
.eh_frame:0000000000006553                 db  30h ; 0
.eh_frame:0000000000006554                 db  86h
.eh_frame:0000000000006555                 db    6
.eh_frame:0000000000006556                 db  41h ; A
.eh_frame:0000000000006557                 db  0Eh
.eh_frame:0000000000006558                 db  38h ; 8
.eh_frame:0000000000006559                 db  83h
.eh_frame:000000000000655A                 db    7
.eh_frame:000000000000655B                 db  4Dh ; M
.eh_frame:000000000000655C                 db  0Eh
.eh_frame:000000000000655D                 db  70h ; p
.eh_frame:000000000000655E                 db  65h ; e
.eh_frame:000000000000655F                 db  0Eh
.eh_frame:0000000000006560                 db  78h ; x
.eh_frame:0000000000006561                 db  4Dh ; M
.eh_frame:0000000000006562                 db  0Eh
.eh_frame:0000000000006563                 db  80h
.eh_frame:0000000000006564                 db    1
.eh_frame:0000000000006565                 db  46h ; F
.eh_frame:0000000000006566                 db  0Eh
.eh_frame:0000000000006567                 db  88h
.eh_frame:0000000000006568                 db    1
.eh_frame:0000000000006569                 db  42h ; B
.eh_frame:000000000000656A                 db  0Eh
.eh_frame:000000000000656B                 db  90h
.eh_frame:000000000000656C                 db    1
.eh_frame:000000000000656D                 db  5Eh ; ^
.eh_frame:000000000000656E                 db  0Eh
.eh_frame:000000000000656F                 db  70h ; p
.eh_frame:0000000000006570                 db  56h ; V
.eh_frame:0000000000006571                 db  0Eh
.eh_frame:0000000000006572                 db  78h ; x
.eh_frame:0000000000006573                 db  43h ; C
.eh_frame:0000000000006574                 db  0Eh
.eh_frame:0000000000006575                 db  80h
.eh_frame:0000000000006576                 db    1
.eh_frame:0000000000006577                 db  43h ; C
.eh_frame:0000000000006578                 db  0Eh
.eh_frame:0000000000006579                 db  88h
.eh_frame:000000000000657A                 db    1
.eh_frame:000000000000657B                 db  56h ; V
.eh_frame:000000000000657C                 db  0Eh
.eh_frame:000000000000657D                 db  90h
.eh_frame:000000000000657E                 db    1
.eh_frame:000000000000657F                 db  52h ; R
.eh_frame:0000000000006580                 db  0Eh
.eh_frame:0000000000006581                 db  70h ; p
.eh_frame:0000000000006582                 db  5Bh ; [
.eh_frame:0000000000006583                 db  0Eh
.eh_frame:0000000000006584                 db  38h ; 8
.eh_frame:0000000000006585                 db  41h ; A
.eh_frame:0000000000006586                 db  0Eh
.eh_frame:0000000000006587                 db  30h ; 0
.eh_frame:0000000000006588                 db  41h ; A
.eh_frame:0000000000006589                 db  0Eh
.eh_frame:000000000000658A                 db  28h ; (
.eh_frame:000000000000658B                 db  42h ; B
.eh_frame:000000000000658C                 db  0Eh
.eh_frame:000000000000658D                 db  20h
.eh_frame:000000000000658E                 db  42h ; B
.eh_frame:000000000000658F                 db  0Eh
.eh_frame:0000000000006590                 db  18h
.eh_frame:0000000000006591                 db  42h ; B
.eh_frame:0000000000006592                 db  0Eh
.eh_frame:0000000000006593                 db  10h
.eh_frame:0000000000006594                 db  42h ; B
.eh_frame:0000000000006595                 db  0Eh
.eh_frame:0000000000006596                 db    8
.eh_frame:0000000000006597                 db    0
.eh_frame:0000000000006598                 db  10h
.eh_frame:0000000000006599                 db    0
.eh_frame:000000000000659A                 db    0
.eh_frame:000000000000659B                 db    0
.eh_frame:000000000000659C                 db 0ACh
.eh_frame:000000000000659D                 db    4
.eh_frame:000000000000659E                 db    0
.eh_frame:000000000000659F                 db    0
.eh_frame:00000000000065A0                 db  20h
.eh_frame:00000000000065A1                 db 0D9h
.eh_frame:00000000000065A2                 db 0FFh
.eh_frame:00000000000065A3                 db 0FFh
.eh_frame:00000000000065A4                 db  0Ah
.eh_frame:00000000000065A5                 db    0
.eh_frame:00000000000065A6                 db    0
.eh_frame:00000000000065A7                 db    0
.eh_frame:00000000000065A8                 db    0
.eh_frame:00000000000065A9                 db    0
.eh_frame:00000000000065AA                 db    0
.eh_frame:00000000000065AB                 db    0
.eh_frame:00000000000065AC                 db  28h ; (
.eh_frame:00000000000065AD                 db    0
.eh_frame:00000000000065AE                 db    0
.eh_frame:00000000000065AF                 db    0
.eh_frame:00000000000065B0                 db 0C0h
.eh_frame:00000000000065B1                 db    4
.eh_frame:00000000000065B2                 db    0
.eh_frame:00000000000065B3                 db    0
.eh_frame:00000000000065B4                 db  1Ch
.eh_frame:00000000000065B5                 db 0D9h
.eh_frame:00000000000065B6                 db 0FFh
.eh_frame:00000000000065B7                 db 0FFh
.eh_frame:00000000000065B8                 db  93h
.eh_frame:00000000000065B9                 db    0
.eh_frame:00000000000065BA                 db    0
.eh_frame:00000000000065BB                 db    0
.eh_frame:00000000000065BC                 db    0
.eh_frame:00000000000065BD                 db  48h ; H
.eh_frame:00000000000065BE                 db  0Eh
.eh_frame:00000000000065BF                 db  10h
.eh_frame:00000000000065C0                 db  8Ch
.eh_frame:00000000000065C1                 db    2
.eh_frame:00000000000065C2                 db  48h ; H
.eh_frame:00000000000065C3                 db  0Eh
.eh_frame:00000000000065C4                 db  18h
.eh_frame:00000000000065C5                 db  86h
.eh_frame:00000000000065C6                 db    3
.eh_frame:00000000000065C7                 db  41h ; A
.eh_frame:00000000000065C8                 db  0Eh
.eh_frame:00000000000065C9                 db  20h
.eh_frame:00000000000065CA                 db  83h
.eh_frame:00000000000065CB                 db    4
.eh_frame:00000000000065CC                 db    2
.eh_frame:00000000000065CD                 db  74h ; t
.eh_frame:00000000000065CE                 db  0Eh
.eh_frame:00000000000065CF                 db  18h
.eh_frame:00000000000065D0                 db  4Bh ; K
.eh_frame:00000000000065D1                 db  0Eh
.eh_frame:00000000000065D2                 db  10h
.eh_frame:00000000000065D3                 db  42h ; B
.eh_frame:00000000000065D4                 db  0Eh
.eh_frame:00000000000065D5                 db    8
.eh_frame:00000000000065D6                 db    0
.eh_frame:00000000000065D7                 db    0
.eh_frame:00000000000065D8                 db  10h
.eh_frame:00000000000065D9                 db    0
.eh_frame:00000000000065DA                 db    0
.eh_frame:00000000000065DB                 db    0
.eh_frame:00000000000065DC                 db 0ECh
.eh_frame:00000000000065DD                 db    4
.eh_frame:00000000000065DE                 db    0
.eh_frame:00000000000065DF                 db    0
.eh_frame:00000000000065E0                 db  90h
.eh_frame:00000000000065E1                 db 0D9h
.eh_frame:00000000000065E2                 db 0FFh
.eh_frame:00000000000065E3                 db 0FFh
.eh_frame:00000000000065E4                 db  13h
.eh_frame:00000000000065E5                 db    0
.eh_frame:00000000000065E6                 db    0
.eh_frame:00000000000065E7                 db    0
.eh_frame:00000000000065E8                 db    0
.eh_frame:00000000000065E9                 db    0
.eh_frame:00000000000065EA                 db    0
.eh_frame:00000000000065EB                 db    0
.eh_frame:00000000000065EC                 db  10h
.eh_frame:00000000000065ED                 db    0
.eh_frame:00000000000065EE                 db    0
.eh_frame:00000000000065EF                 db    0
.eh_frame:00000000000065F0                 db    0
.eh_frame:00000000000065F1                 db    5
.eh_frame:00000000000065F2                 db    0
.eh_frame:00000000000065F3                 db    0
.eh_frame:00000000000065F4                 db  9Ch
.eh_frame:00000000000065F5                 db 0D9h
.eh_frame:00000000000065F6                 db 0FFh
.eh_frame:00000000000065F7                 db 0FFh
.eh_frame:00000000000065F8                 db  0Ch
.eh_frame:00000000000065F9                 db    0
.eh_frame:00000000000065FA                 db    0
.eh_frame:00000000000065FB                 db    0
.eh_frame:00000000000065FC                 db    0
.eh_frame:00000000000065FD                 db    0
.eh_frame:00000000000065FE                 db    0
.eh_frame:00000000000065FF                 db    0
.eh_frame:0000000000006600                 db  10h
.eh_frame:0000000000006601                 db    0
.eh_frame:0000000000006602                 db    0
.eh_frame:0000000000006603                 db    0
.eh_frame:0000000000006604                 db  14h
.eh_frame:0000000000006605                 db    5
.eh_frame:0000000000006606                 db    0
.eh_frame:0000000000006607                 db    0
.eh_frame:0000000000006608                 db  98h
.eh_frame:0000000000006609                 db 0D9h
.eh_frame:000000000000660A                 db 0FFh
.eh_frame:000000000000660B                 db 0FFh
.eh_frame:000000000000660C                 db  18h
.eh_frame:000000000000660D                 db    0
.eh_frame:000000000000660E                 db    0
.eh_frame:000000000000660F                 db    0
.eh_frame:0000000000006610                 db    0
.eh_frame:0000000000006611                 db    0
.eh_frame:0000000000006612                 db    0
.eh_frame:0000000000006613                 db    0
.eh_frame:0000000000006614                 db  10h
.eh_frame:0000000000006615                 db    0
.eh_frame:0000000000006616                 db    0
.eh_frame:0000000000006617                 db    0
.eh_frame:0000000000006618                 db  28h ; (
.eh_frame:0000000000006619                 db    5
.eh_frame:000000000000661A                 db    0
.eh_frame:000000000000661B                 db    0
.eh_frame:000000000000661C                 db 0A4h
.eh_frame:000000000000661D                 db 0D9h
.eh_frame:000000000000661E                 db 0FFh
.eh_frame:000000000000661F                 db 0FFh
.eh_frame:0000000000006620                 db  14h
.eh_frame:0000000000006621                 db    0
.eh_frame:0000000000006622                 db    0
.eh_frame:0000000000006623                 db    0
.eh_frame:0000000000006624                 db    0
.eh_frame:0000000000006625                 db    0
.eh_frame:0000000000006626                 db    0
.eh_frame:0000000000006627                 db    0
.eh_frame:0000000000006628                 db  18h
.eh_frame:0000000000006629                 db    0
.eh_frame:000000000000662A                 db    0
.eh_frame:000000000000662B                 db    0
.eh_frame:000000000000662C                 db  3Ch ; <
.eh_frame:000000000000662D                 db    5
.eh_frame:000000000000662E                 db    0
.eh_frame:000000000000662F                 db    0
.eh_frame:0000000000006630                 db 0B0h
.eh_frame:0000000000006631                 db 0D9h
.eh_frame:0000000000006632                 db 0FFh
.eh_frame:0000000000006633                 db 0FFh
.eh_frame:0000000000006634                 db  8Eh
.eh_frame:0000000000006635                 db    0
.eh_frame:0000000000006636                 db    0
.eh_frame:0000000000006637                 db    0
.eh_frame:0000000000006638                 db    0
.eh_frame:0000000000006639                 db  44h ; D
.eh_frame:000000000000663A                 db  0Eh
.eh_frame:000000000000663B                 db  50h ; P
.eh_frame:000000000000663C                 db    2
.eh_frame:000000000000663D                 db  7Fh ; 
.eh_frame:000000000000663E                 db  0Ah
.eh_frame:000000000000663F                 db  0Eh
.eh_frame:0000000000006640                 db    8
.eh_frame:0000000000006641                 db  41h ; A
.eh_frame:0000000000006642                 db  0Bh
.eh_frame:0000000000006643                 db    0
.eh_frame:0000000000006644                 db  18h
.eh_frame:0000000000006645                 db    0
.eh_frame:0000000000006646                 db    0
.eh_frame:0000000000006647                 db    0
.eh_frame:0000000000006648                 db  58h ; X
.eh_frame:0000000000006649                 db    5
.eh_frame:000000000000664A                 db    0
.eh_frame:000000000000664B                 db    0
.eh_frame:000000000000664C                 db  24h ; $
.eh_frame:000000000000664D                 db 0DAh
.eh_frame:000000000000664E                 db 0FFh
.eh_frame:000000000000664F                 db 0FFh
.eh_frame:0000000000006650                 db  8Ah
.eh_frame:0000000000006651                 db    0
.eh_frame:0000000000006652                 db    0
.eh_frame:0000000000006653                 db    0
.eh_frame:0000000000006654                 db    0
.eh_frame:0000000000006655                 db  44h ; D
.eh_frame:0000000000006656                 db  0Eh
.eh_frame:0000000000006657                 db  50h ; P
.eh_frame:0000000000006658                 db    2
.eh_frame:0000000000006659                 db  7Bh ; {
.eh_frame:000000000000665A                 db  0Ah
.eh_frame:000000000000665B                 db  0Eh
.eh_frame:000000000000665C                 db    8
.eh_frame:000000000000665D                 db  41h ; A
.eh_frame:000000000000665E                 db  0Bh
.eh_frame:000000000000665F                 db    0
.eh_frame:0000000000006660                 db  10h
.eh_frame:0000000000006661                 db    0
.eh_frame:0000000000006662                 db    0
.eh_frame:0000000000006663                 db    0
.eh_frame:0000000000006664                 db  74h ; t
.eh_frame:0000000000006665                 db    5
.eh_frame:0000000000006666                 db    0
.eh_frame:0000000000006667                 db    0
.eh_frame:0000000000006668                 db  98h
.eh_frame:0000000000006669                 db 0DAh
.eh_frame:000000000000666A                 db 0FFh
.eh_frame:000000000000666B                 db 0FFh
.eh_frame:000000000000666C                 db  0Ch
.eh_frame:000000000000666D                 db    0
.eh_frame:000000000000666E                 db    0
.eh_frame:000000000000666F                 db    0
.eh_frame:0000000000006670                 db    0
.eh_frame:0000000000006671                 db    0
.eh_frame:0000000000006672                 db    0
.eh_frame:0000000000006673                 db    0
.eh_frame:0000000000006674                 db  10h
.eh_frame:0000000000006675                 db    0
.eh_frame:0000000000006676                 db    0
.eh_frame:0000000000006677                 db    0
.eh_frame:0000000000006678                 db  88h
.eh_frame:0000000000006679                 db    5
.eh_frame:000000000000667A                 db    0
.eh_frame:000000000000667B                 db    0
.eh_frame:000000000000667C                 db  94h
.eh_frame:000000000000667D                 db 0DAh
.eh_frame:000000000000667E                 db 0FFh
.eh_frame:000000000000667F                 db 0FFh
.eh_frame:0000000000006680                 db  0Fh
.eh_frame:0000000000006681                 db    0
.eh_frame:0000000000006682                 db    0
.eh_frame:0000000000006683                 db    0
.eh_frame:0000000000006684                 db    0
.eh_frame:0000000000006685                 db    0
.eh_frame:0000000000006686                 db    0
.eh_frame:0000000000006687                 db    0
.eh_frame:0000000000006688                 db  18h
.eh_frame:0000000000006689                 db    0
.eh_frame:000000000000668A                 db    0
.eh_frame:000000000000668B                 db    0
.eh_frame:000000000000668C                 db  9Ch
.eh_frame:000000000000668D                 db    5
.eh_frame:000000000000668E                 db    0
.eh_frame:000000000000668F                 db    0
.eh_frame:0000000000006690                 db  90h
.eh_frame:0000000000006691                 db 0DAh
.eh_frame:0000000000006692                 db 0FFh
.eh_frame:0000000000006693                 db 0FFh
.eh_frame:0000000000006694                 db  98h
.eh_frame:0000000000006695                 db    0
.eh_frame:0000000000006696                 db    0
.eh_frame:0000000000006697                 db    0
.eh_frame:0000000000006698                 db    0
.eh_frame:0000000000006699                 db  44h ; D
.eh_frame:000000000000669A                 db  0Eh
.eh_frame:000000000000669B                 db  50h ; P
.eh_frame:000000000000669C                 db    2
.eh_frame:000000000000669D                 db  8Eh
.eh_frame:000000000000669E                 db  0Ah
.eh_frame:000000000000669F                 db  0Eh
.eh_frame:00000000000066A0                 db    8
.eh_frame:00000000000066A1                 db  41h ; A
.eh_frame:00000000000066A2                 db  0Bh
.eh_frame:00000000000066A3                 db    0
.eh_frame:00000000000066A4                 db  10h
.eh_frame:00000000000066A5                 db    0
.eh_frame:00000000000066A6                 db    0
.eh_frame:00000000000066A7                 db    0
.eh_frame:00000000000066A8                 db 0B8h
.eh_frame:00000000000066A9                 db    5
.eh_frame:00000000000066AA                 db    0
.eh_frame:00000000000066AB                 db    0
.eh_frame:00000000000066AC                 db  14h
.eh_frame:00000000000066AD                 db 0DBh
.eh_frame:00000000000066AE                 db 0FFh
.eh_frame:00000000000066AF                 db 0FFh
.eh_frame:00000000000066B0                 db  10h
.eh_frame:00000000000066B1                 db    0
.eh_frame:00000000000066B2                 db    0
.eh_frame:00000000000066B3                 db    0
.eh_frame:00000000000066B4                 db    0
.eh_frame:00000000000066B5                 db    0
.eh_frame:00000000000066B6                 db    0
.eh_frame:00000000000066B7                 db    0
.eh_frame:00000000000066B8                 db  10h
.eh_frame:00000000000066B9                 db    0
.eh_frame:00000000000066BA                 db    0
.eh_frame:00000000000066BB                 db    0
.eh_frame:00000000000066BC                 db 0CCh
.eh_frame:00000000000066BD                 db    5
.eh_frame:00000000000066BE                 db    0
.eh_frame:00000000000066BF                 db    0
.eh_frame:00000000000066C0                 db  10h
.eh_frame:00000000000066C1                 db 0DBh
.eh_frame:00000000000066C2                 db 0FFh
.eh_frame:00000000000066C3                 db 0FFh
.eh_frame:00000000000066C4                 db  11h
.eh_frame:00000000000066C5                 db    0
.eh_frame:00000000000066C6                 db    0
.eh_frame:00000000000066C7                 db    0
.eh_frame:00000000000066C8                 db    0
.eh_frame:00000000000066C9                 db    0
.eh_frame:00000000000066CA                 db    0
.eh_frame:00000000000066CB                 db    0
.eh_frame:00000000000066CC                 db  10h
.eh_frame:00000000000066CD                 db    0
.eh_frame:00000000000066CE                 db    0
.eh_frame:00000000000066CF                 db    0
.eh_frame:00000000000066D0                 db 0E0h
.eh_frame:00000000000066D1                 db    5
.eh_frame:00000000000066D2                 db    0
.eh_frame:00000000000066D3                 db    0
.eh_frame:00000000000066D4                 db  1Ch
.eh_frame:00000000000066D5                 db 0DBh
.eh_frame:00000000000066D6                 db 0FFh
.eh_frame:00000000000066D7                 db 0FFh
.eh_frame:00000000000066D8                 db  0Ah
.eh_frame:00000000000066D9                 db    0
.eh_frame:00000000000066DA                 db    0
.eh_frame:00000000000066DB                 db    0
.eh_frame:00000000000066DC                 db    0
.eh_frame:00000000000066DD                 db    0
.eh_frame:00000000000066DE                 db    0
.eh_frame:00000000000066DF                 db    0
.eh_frame:00000000000066E0                 db  18h
.eh_frame:00000000000066E1                 db    0
.eh_frame:00000000000066E2                 db    0
.eh_frame:00000000000066E3                 db    0
.eh_frame:00000000000066E4                 db 0F4h
.eh_frame:00000000000066E5                 db    5
.eh_frame:00000000000066E6                 db    0
.eh_frame:00000000000066E7                 db    0
.eh_frame:00000000000066E8                 db  18h
.eh_frame:00000000000066E9                 db 0DBh
.eh_frame:00000000000066EA                 db 0FFh
.eh_frame:00000000000066EB                 db 0FFh
.eh_frame:00000000000066EC                 db  8Eh
.eh_frame:00000000000066ED                 db    0
.eh_frame:00000000000066EE                 db    0
.eh_frame:00000000000066EF                 db    0
.eh_frame:00000000000066F0                 db    0
.eh_frame:00000000000066F1                 db  44h ; D
.eh_frame:00000000000066F2                 db  0Eh
.eh_frame:00000000000066F3                 db  50h ; P
.eh_frame:00000000000066F4                 db    2
.eh_frame:00000000000066F5                 db  7Fh ; 
.eh_frame:00000000000066F6                 db  0Ah
.eh_frame:00000000000066F7                 db  0Eh
.eh_frame:00000000000066F8                 db    8
.eh_frame:00000000000066F9                 db  41h ; A
.eh_frame:00000000000066FA                 db  0Bh
.eh_frame:00000000000066FB                 db    0
.eh_frame:00000000000066FC                 db  18h
.eh_frame:00000000000066FD                 db    0
.eh_frame:00000000000066FE                 db    0
.eh_frame:00000000000066FF                 db    0
.eh_frame:0000000000006700                 db  10h
.eh_frame:0000000000006701                 db    6
.eh_frame:0000000000006702                 db    0
.eh_frame:0000000000006703                 db    0
.eh_frame:0000000000006704                 db  8Ch
.eh_frame:0000000000006705                 db 0DBh
.eh_frame:0000000000006706                 db 0FFh
.eh_frame:0000000000006707                 db 0FFh
.eh_frame:0000000000006708                 db  91h
.eh_frame:0000000000006709                 db    0
.eh_frame:000000000000670A                 db    0
.eh_frame:000000000000670B                 db    0
.eh_frame:000000000000670C                 db    0
.eh_frame:000000000000670D                 db  44h ; D
.eh_frame:000000000000670E                 db  0Eh
.eh_frame:000000000000670F                 db  50h ; P
.eh_frame:0000000000006710                 db    2
.eh_frame:0000000000006711                 db  82h
.eh_frame:0000000000006712                 db  0Ah
.eh_frame:0000000000006713                 db  0Eh
.eh_frame:0000000000006714                 db    8
.eh_frame:0000000000006715                 db  41h ; A
.eh_frame:0000000000006716                 db  0Bh
.eh_frame:0000000000006717                 db    0
.eh_frame:0000000000006718                 db  10h
.eh_frame:0000000000006719                 db    0
.eh_frame:000000000000671A                 db    0
.eh_frame:000000000000671B                 db    0
.eh_frame:000000000000671C                 db  2Ch ; ,
.eh_frame:000000000000671D                 db    6
.eh_frame:000000000000671E                 db    0
.eh_frame:000000000000671F                 db    0
.eh_frame:0000000000006720                 db  10h
.eh_frame:0000000000006721                 db 0DCh
.eh_frame:0000000000006722                 db 0FFh
.eh_frame:0000000000006723                 db 0FFh
.eh_frame:0000000000006724                 db  0Ch
.eh_frame:0000000000006725                 db    0
.eh_frame:0000000000006726                 db    0
.eh_frame:0000000000006727                 db    0
.eh_frame:0000000000006728                 db    0
.eh_frame:0000000000006729                 db    0
.eh_frame:000000000000672A                 db    0
.eh_frame:000000000000672B                 db    0
.eh_frame:000000000000672C                 db  10h
.eh_frame:000000000000672D                 db    0
.eh_frame:000000000000672E                 db    0
.eh_frame:000000000000672F                 db    0
.eh_frame:0000000000006730                 db  40h ; @
.eh_frame:0000000000006731                 db    6
.eh_frame:0000000000006732                 db    0
.eh_frame:0000000000006733                 db    0
.eh_frame:0000000000006734                 db  0Ch
.eh_frame:0000000000006735                 db 0DCh
.eh_frame:0000000000006736                 db 0FFh
.eh_frame:0000000000006737                 db 0FFh
.eh_frame:0000000000006738                 db  17h
.eh_frame:0000000000006739                 db    0
.eh_frame:000000000000673A                 db    0
.eh_frame:000000000000673B                 db    0
.eh_frame:000000000000673C                 db    0
.eh_frame:000000000000673D                 db    0
.eh_frame:000000000000673E                 db    0
.eh_frame:000000000000673F                 db    0
.eh_frame:0000000000006740                 db  10h
.eh_frame:0000000000006741                 db    0
.eh_frame:0000000000006742                 db    0
.eh_frame:0000000000006743                 db    0
.eh_frame:0000000000006744                 db  54h ; T
.eh_frame:0000000000006745                 db    6
.eh_frame:0000000000006746                 db    0
.eh_frame:0000000000006747                 db    0
.eh_frame:0000000000006748                 db  18h
.eh_frame:0000000000006749                 db 0DCh
.eh_frame:000000000000674A                 db 0FFh
.eh_frame:000000000000674B                 db 0FFh
.eh_frame:000000000000674C                 db  13h
.eh_frame:000000000000674D                 db    0
.eh_frame:000000000000674E                 db    0
.eh_frame:000000000000674F                 db    0
.eh_frame:0000000000006750                 db    0
.eh_frame:0000000000006751                 db    0
.eh_frame:0000000000006752                 db    0
.eh_frame:0000000000006753                 db    0
.eh_frame:0000000000006754                 db  10h
.eh_frame:0000000000006755                 db    0
.eh_frame:0000000000006756                 db    0
.eh_frame:0000000000006757                 db    0
.eh_frame:0000000000006758                 db  68h ; h
.eh_frame:0000000000006759                 db    6
.eh_frame:000000000000675A                 db    0
.eh_frame:000000000000675B                 db    0
.eh_frame:000000000000675C                 db  24h ; $
.eh_frame:000000000000675D                 db 0DCh
.eh_frame:000000000000675E                 db 0FFh
.eh_frame:000000000000675F                 db 0FFh
.eh_frame:0000000000006760                 db  0Ch
.eh_frame:0000000000006761                 db    0
.eh_frame:0000000000006762                 db    0
.eh_frame:0000000000006763                 db    0
.eh_frame:0000000000006764                 db    0
.eh_frame:0000000000006765                 db    0
.eh_frame:0000000000006766                 db    0
.eh_frame:0000000000006767                 db    0
.eh_frame:0000000000006768                 db  10h
.eh_frame:0000000000006769                 db    0
.eh_frame:000000000000676A                 db    0
.eh_frame:000000000000676B                 db    0
.eh_frame:000000000000676C                 db  7Ch ; |
.eh_frame:000000000000676D                 db    6
.eh_frame:000000000000676E                 db    0
.eh_frame:000000000000676F                 db    0
.eh_frame:0000000000006770                 db  20h
.eh_frame:0000000000006771                 db 0DCh
.eh_frame:0000000000006772                 db 0FFh
.eh_frame:0000000000006773                 db 0FFh
.eh_frame:0000000000006774                 db  14h
.eh_frame:0000000000006775                 db    0
.eh_frame:0000000000006776                 db    0
.eh_frame:0000000000006777                 db    0
.eh_frame:0000000000006778                 db    0
.eh_frame:0000000000006779                 db    0
.eh_frame:000000000000677A                 db    0
.eh_frame:000000000000677B                 db    0
.eh_frame:000000000000677C                 db  10h
.eh_frame:000000000000677D                 db    0
.eh_frame:000000000000677E                 db    0
.eh_frame:000000000000677F                 db    0
.eh_frame:0000000000006780                 db  90h
.eh_frame:0000000000006781                 db    6
.eh_frame:0000000000006782                 db    0
.eh_frame:0000000000006783                 db    0
.eh_frame:0000000000006784                 db  2Ch ; ,
.eh_frame:0000000000006785                 db 0DCh
.eh_frame:0000000000006786                 db 0FFh
.eh_frame:0000000000006787                 db 0FFh
.eh_frame:0000000000006788                 db  13h
.eh_frame:0000000000006789                 db    0
.eh_frame:000000000000678A                 db    0
.eh_frame:000000000000678B                 db    0
.eh_frame:000000000000678C                 db    0
.eh_frame:000000000000678D                 db    0
.eh_frame:000000000000678E                 db    0
.eh_frame:000000000000678F                 db    0
.eh_frame:0000000000006790                 db  14h
.eh_frame:0000000000006791                 db    0
.eh_frame:0000000000006792                 db    0
.eh_frame:0000000000006793                 db    0
.eh_frame:0000000000006794                 db 0A4h
.eh_frame:0000000000006795                 db    6
.eh_frame:0000000000006796                 db    0
.eh_frame:0000000000006797                 db    0
.eh_frame:0000000000006798                 db  38h ; 8
.eh_frame:0000000000006799                 db 0DCh
.eh_frame:000000000000679A                 db 0FFh
.eh_frame:000000000000679B                 db 0FFh
.eh_frame:000000000000679C                 db  18h
.eh_frame:000000000000679D                 db    0
.eh_frame:000000000000679E                 db    0
.eh_frame:000000000000679F                 db    0
.eh_frame:00000000000067A0                 db    0
.eh_frame:00000000000067A1                 db    0
.eh_frame:00000000000067A2                 db    0
.eh_frame:00000000000067A3                 db    0
.eh_frame:00000000000067A4                 db    0
.eh_frame:00000000000067A5                 db    0
.eh_frame:00000000000067A6                 db    0
.eh_frame:00000000000067A7                 db    0
.eh_frame:00000000000067A8                 db  24h ; $
.eh_frame:00000000000067A9                 db    0
.eh_frame:00000000000067AA                 db    0
.eh_frame:00000000000067AB                 db    0
.eh_frame:00000000000067AC                 db 0BCh
.eh_frame:00000000000067AD                 db    6
.eh_frame:00000000000067AE                 db    0
.eh_frame:00000000000067AF                 db    0
.eh_frame:00000000000067B0                 db  40h ; @
.eh_frame:00000000000067B1                 db 0DCh
.eh_frame:00000000000067B2                 db 0FFh
.eh_frame:00000000000067B3                 db 0FFh
.eh_frame:00000000000067B4                 db  71h ; q
.eh_frame:00000000000067B5                 db    0
.eh_frame:00000000000067B6                 db    0
.eh_frame:00000000000067B7                 db    0
.eh_frame:00000000000067B8                 db    0
.eh_frame:00000000000067B9                 db  41h ; A
.eh_frame:00000000000067BA                 db  0Eh
.eh_frame:00000000000067BB                 db  10h
.eh_frame:00000000000067BC                 db  83h
.eh_frame:00000000000067BD                 db    2
.eh_frame:00000000000067BE                 db  56h ; V
.eh_frame:00000000000067BF                 db  0Eh
.eh_frame:00000000000067C0                 db 0B0h
.eh_frame:00000000000067C1                 db    1
.eh_frame:00000000000067C2                 db    2
.eh_frame:00000000000067C3                 db  4Ch ; L
.eh_frame:00000000000067C4                 db  0Ah
.eh_frame:00000000000067C5                 db  0Eh
.eh_frame:00000000000067C6                 db  10h
.eh_frame:00000000000067C7                 db  41h ; A
.eh_frame:00000000000067C8                 db  0Eh
.eh_frame:00000000000067C9                 db    8
.eh_frame:00000000000067CA                 db  44h ; D
.eh_frame:00000000000067CB                 db  0Bh
.eh_frame:00000000000067CC                 db    0
.eh_frame:00000000000067CD                 db    0
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db  10h
.eh_frame:00000000000067D1                 db    1
.eh_frame:00000000000067D2                 db    0
.eh_frame:00000000000067D3                 db    0
.eh_frame:00000000000067D4                 db 0E4h
.eh_frame:00000000000067D5                 db    6
.eh_frame:00000000000067D6                 db    0
.eh_frame:00000000000067D7                 db    0
.eh_frame:00000000000067D8                 db  98h
.eh_frame:00000000000067D9                 db 0DCh
.eh_frame:00000000000067DA                 db 0FFh
.eh_frame:00000000000067DB                 db 0FFh
.eh_frame:00000000000067DC                 db  17h
.eh_frame:00000000000067DD                 db    4
.eh_frame:00000000000067DE                 db    0
.eh_frame:00000000000067DF                 db    0
.eh_frame:00000000000067E0                 db    0
.eh_frame:00000000000067E1                 db  42h ; B
.eh_frame:00000000000067E2                 db  0Eh
.eh_frame:00000000000067E3                 db  10h
.eh_frame:00000000000067E4                 db  8Fh
.eh_frame:00000000000067E5                 db    2
.eh_frame:00000000000067E6                 db  42h ; B
.eh_frame:00000000000067E7                 db  0Eh
.eh_frame:00000000000067E8                 db  18h
.eh_frame:00000000000067E9                 db  8Eh
.eh_frame:00000000000067EA                 db    3
.eh_frame:00000000000067EB                 db  42h ; B
.eh_frame:00000000000067EC                 db  0Eh
.eh_frame:00000000000067ED                 db  20h
.eh_frame:00000000000067EE                 db  8Dh
.eh_frame:00000000000067EF                 db    4
.eh_frame:00000000000067F0                 db  42h ; B
.eh_frame:00000000000067F1                 db  0Eh
.eh_frame:00000000000067F2                 db  28h ; (
.eh_frame:00000000000067F3                 db  8Ch
.eh_frame:00000000000067F4                 db    5
.eh_frame:00000000000067F5                 db  44h ; D
.eh_frame:00000000000067F6                 db  0Eh
.eh_frame:00000000000067F7                 db  30h ; 0
.eh_frame:00000000000067F8                 db  86h
.eh_frame:00000000000067F9                 db    6
.eh_frame:00000000000067FA                 db  41h ; A
.eh_frame:00000000000067FB                 db  0Eh
.eh_frame:00000000000067FC                 db  38h ; 8
.eh_frame:00000000000067FD                 db  83h
.eh_frame:00000000000067FE                 db    7
.eh_frame:00000000000067FF                 db  4Ah ; J
.eh_frame:0000000000006800                 db  0Eh
.eh_frame:0000000000006801                 db  60h ; `
.eh_frame:0000000000006802                 db    2
.eh_frame:0000000000006803                 db 0DDh
.eh_frame:0000000000006804                 db  0Eh
.eh_frame:0000000000006805                 db  68h ; h
.eh_frame:0000000000006806                 db  57h ; W
.eh_frame:0000000000006807                 db  0Eh
.eh_frame:0000000000006808                 db  70h ; p
.eh_frame:0000000000006809                 db  42h ; B
.eh_frame:000000000000680A                 db  0Eh
.eh_frame:000000000000680B                 db  78h ; x
.eh_frame:000000000000680C                 db  42h ; B
.eh_frame:000000000000680D                 db  0Eh
.eh_frame:000000000000680E                 db  80h
.eh_frame:000000000000680F                 db    1
.eh_frame:0000000000006810                 db  42h ; B
.eh_frame:0000000000006811                 db  0Eh
.eh_frame:0000000000006812                 db  88h
.eh_frame:0000000000006813                 db    1
.eh_frame:0000000000006814                 db  42h ; B
.eh_frame:0000000000006815                 db  0Eh
.eh_frame:0000000000006816                 db  90h
.eh_frame:0000000000006817                 db    1
.eh_frame:0000000000006818                 db  53h ; S
.eh_frame:0000000000006819                 db  0Eh
.eh_frame:000000000000681A                 db  60h ; `
.eh_frame:000000000000681B                 db  44h ; D
.eh_frame:000000000000681C                 db  0Ah
.eh_frame:000000000000681D                 db  0Eh
.eh_frame:000000000000681E                 db  38h ; 8
.eh_frame:000000000000681F                 db  41h ; A
.eh_frame:0000000000006820                 db  0Eh
.eh_frame:0000000000006821                 db  30h ; 0
.eh_frame:0000000000006822                 db  41h ; A
.eh_frame:0000000000006823                 db  0Eh
.eh_frame:0000000000006824                 db  28h ; (
.eh_frame:0000000000006825                 db  42h ; B
.eh_frame:0000000000006826                 db  0Eh
.eh_frame:0000000000006827                 db  20h
.eh_frame:0000000000006828                 db  42h ; B
.eh_frame:0000000000006829                 db  0Eh
.eh_frame:000000000000682A                 db  18h
.eh_frame:000000000000682B                 db  42h ; B
.eh_frame:000000000000682C                 db  0Eh
.eh_frame:000000000000682D                 db  10h
.eh_frame:000000000000682E                 db  42h ; B
.eh_frame:000000000000682F                 db  0Eh
.eh_frame:0000000000006830                 db    8
.eh_frame:0000000000006831                 db  44h ; D
.eh_frame:0000000000006832                 db  0Bh
.eh_frame:0000000000006833                 db    2
.eh_frame:0000000000006834                 db  78h ; x
.eh_frame:0000000000006835                 db  0Ah
.eh_frame:0000000000006836                 db  0Eh
.eh_frame:0000000000006837                 db  68h ; h
.eh_frame:0000000000006838                 db  48h ; H
.eh_frame:0000000000006839                 db  0Bh
.eh_frame:000000000000683A                 db  5Ah ; Z
.eh_frame:000000000000683B                 db  0Ah
.eh_frame:000000000000683C                 db  0Eh
.eh_frame:000000000000683D                 db  38h ; 8
.eh_frame:000000000000683E                 db  47h ; G
.eh_frame:000000000000683F                 db  0Eh
.eh_frame:0000000000006840                 db  30h ; 0
.eh_frame:0000000000006841                 db  41h ; A
.eh_frame:0000000000006842                 db  0Eh
.eh_frame:0000000000006843                 db  28h ; (
.eh_frame:0000000000006844                 db  42h ; B
.eh_frame:0000000000006845                 db  0Eh
.eh_frame:0000000000006846                 db  20h
.eh_frame:0000000000006847                 db  42h ; B
.eh_frame:0000000000006848                 db  0Eh
.eh_frame:0000000000006849                 db  18h
.eh_frame:000000000000684A                 db  42h ; B
.eh_frame:000000000000684B                 db  0Eh
.eh_frame:000000000000684C                 db  10h
.eh_frame:000000000000684D                 db  42h ; B
.eh_frame:000000000000684E                 db  0Eh
.eh_frame:000000000000684F                 db    8
.eh_frame:0000000000006850                 db  56h ; V
.eh_frame:0000000000006851                 db  0Bh
.eh_frame:0000000000006852                 db  5Eh ; ^
.eh_frame:0000000000006853                 db  0Ah
.eh_frame:0000000000006854                 db  0Eh
.eh_frame:0000000000006855                 db  38h ; 8
.eh_frame:0000000000006856                 db  52h ; R
.eh_frame:0000000000006857                 db  0Eh
.eh_frame:0000000000006858                 db  30h ; 0
.eh_frame:0000000000006859                 db  41h ; A
.eh_frame:000000000000685A                 db  0Eh
.eh_frame:000000000000685B                 db  28h ; (
.eh_frame:000000000000685C                 db  42h ; B
.eh_frame:000000000000685D                 db  0Eh
.eh_frame:000000000000685E                 db  20h
.eh_frame:000000000000685F                 db  42h ; B
.eh_frame:0000000000006860                 db  0Eh
.eh_frame:0000000000006861                 db  18h
.eh_frame:0000000000006862                 db  42h ; B
.eh_frame:0000000000006863                 db  0Eh
.eh_frame:0000000000006864                 db  10h
.eh_frame:0000000000006865                 db  42h ; B
.eh_frame:0000000000006866                 db  0Eh
.eh_frame:0000000000006867                 db    8
.eh_frame:0000000000006868                 db  4Fh ; O
.eh_frame:0000000000006869                 db  0Bh
.eh_frame:000000000000686A                 db  62h ; b
.eh_frame:000000000000686B                 db  0Ah
.eh_frame:000000000000686C                 db  0Eh
.eh_frame:000000000000686D                 db  38h ; 8
.eh_frame:000000000000686E                 db  50h ; P
.eh_frame:000000000000686F                 db  0Eh
.eh_frame:0000000000006870                 db  30h ; 0
.eh_frame:0000000000006871                 db  41h ; A
.eh_frame:0000000000006872                 db  0Eh
.eh_frame:0000000000006873                 db  28h ; (
.eh_frame:0000000000006874                 db  42h ; B
.eh_frame:0000000000006875                 db  0Eh
.eh_frame:0000000000006876                 db  20h
.eh_frame:0000000000006877                 db  42h ; B
.eh_frame:0000000000006878                 db  0Eh
.eh_frame:0000000000006879                 db  18h
.eh_frame:000000000000687A                 db  42h ; B
.eh_frame:000000000000687B                 db  0Eh
.eh_frame:000000000000687C                 db  10h
.eh_frame:000000000000687D                 db  42h ; B
.eh_frame:000000000000687E                 db  0Eh
.eh_frame:000000000000687F                 db    8
.eh_frame:0000000000006880                 db  55h ; U
.eh_frame:0000000000006881                 db  0Bh
.eh_frame:0000000000006882                 db  66h ; f
.eh_frame:0000000000006883                 db  0Eh
.eh_frame:0000000000006884                 db  68h ; h
.eh_frame:0000000000006885                 db  42h ; B
.eh_frame:0000000000006886                 db  0Eh
.eh_frame:0000000000006887                 db  70h ; p
.eh_frame:0000000000006888                 db  5Ch ; \
.eh_frame:0000000000006889                 db  0Eh
.eh_frame:000000000000688A                 db  68h ; h
.eh_frame:000000000000688B                 db  41h ; A
.eh_frame:000000000000688C                 db  0Eh
.eh_frame:000000000000688D                 db  60h ; `
.eh_frame:000000000000688E                 db  44h ; D
.eh_frame:000000000000688F                 db  0Ah
.eh_frame:0000000000006890                 db  0Eh
.eh_frame:0000000000006891                 db  38h ; 8
.eh_frame:0000000000006892                 db  41h ; A
.eh_frame:0000000000006893                 db  0Eh
.eh_frame:0000000000006894                 db  30h ; 0
.eh_frame:0000000000006895                 db  41h ; A
.eh_frame:0000000000006896                 db  0Eh
.eh_frame:0000000000006897                 db  28h ; (
.eh_frame:0000000000006898                 db  42h ; B
.eh_frame:0000000000006899                 db  0Eh
.eh_frame:000000000000689A                 db  20h
.eh_frame:000000000000689B                 db  42h ; B
.eh_frame:000000000000689C                 db  0Eh
.eh_frame:000000000000689D                 db  18h
.eh_frame:000000000000689E                 db  42h ; B
.eh_frame:000000000000689F                 db  0Eh
.eh_frame:00000000000068A0                 db  10h
.eh_frame:00000000000068A1                 db  42h ; B
.eh_frame:00000000000068A2                 db  0Eh
.eh_frame:00000000000068A3                 db    8
.eh_frame:00000000000068A4                 db  45h ; E
.eh_frame:00000000000068A5                 db  0Bh
.eh_frame:00000000000068A6                 db  68h ; h
.eh_frame:00000000000068A7                 db  0Ah
.eh_frame:00000000000068A8                 db  0Eh
.eh_frame:00000000000068A9                 db  68h ; h
.eh_frame:00000000000068AA                 db  48h ; H
.eh_frame:00000000000068AB                 db  0Bh
.eh_frame:00000000000068AC                 db  72h ; r
.eh_frame:00000000000068AD                 db  0Eh
.eh_frame:00000000000068AE                 db  68h ; h
.eh_frame:00000000000068AF                 db  45h ; E
.eh_frame:00000000000068B0                 db  0Eh
.eh_frame:00000000000068B1                 db  70h ; p
.eh_frame:00000000000068B2                 db  42h ; B
.eh_frame:00000000000068B3                 db  0Eh
.eh_frame:00000000000068B4                 db  78h ; x
.eh_frame:00000000000068B5                 db  42h ; B
.eh_frame:00000000000068B6                 db  0Eh
.eh_frame:00000000000068B7                 db  80h
.eh_frame:00000000000068B8                 db    1
.eh_frame:00000000000068B9                 db  5Eh ; ^
.eh_frame:00000000000068BA                 db  0Eh
.eh_frame:00000000000068BB                 db  60h ; `
.eh_frame:00000000000068BC                 db  44h ; D
.eh_frame:00000000000068BD                 db  0Ah
.eh_frame:00000000000068BE                 db  0Eh
.eh_frame:00000000000068BF                 db  38h ; 8
.eh_frame:00000000000068C0                 db  41h ; A
.eh_frame:00000000000068C1                 db  0Eh
.eh_frame:00000000000068C2                 db  30h ; 0
.eh_frame:00000000000068C3                 db  41h ; A
.eh_frame:00000000000068C4                 db  0Eh
.eh_frame:00000000000068C5                 db  28h ; (
.eh_frame:00000000000068C6                 db  42h ; B
.eh_frame:00000000000068C7                 db  0Eh
.eh_frame:00000000000068C8                 db  20h
.eh_frame:00000000000068C9                 db  42h ; B
.eh_frame:00000000000068CA                 db  0Eh
.eh_frame:00000000000068CB                 db  18h
.eh_frame:00000000000068CC                 db  42h ; B
.eh_frame:00000000000068CD                 db  0Eh
.eh_frame:00000000000068CE                 db  10h
.eh_frame:00000000000068CF                 db  42h ; B
.eh_frame:00000000000068D0                 db  0Eh
.eh_frame:00000000000068D1                 db    8
.eh_frame:00000000000068D2                 db  41h ; A
.eh_frame:00000000000068D3                 db  0Bh
.eh_frame:00000000000068D4                 db  79h ; y
.eh_frame:00000000000068D5                 db  0Ah
.eh_frame:00000000000068D6                 db  0Eh
.eh_frame:00000000000068D7                 db  68h ; h
.eh_frame:00000000000068D8                 db  42h ; B
.eh_frame:00000000000068D9                 db  0Eh
.eh_frame:00000000000068DA                 db  70h ; p
.eh_frame:00000000000068DB                 db  42h ; B
.eh_frame:00000000000068DC                 db  0Eh
.eh_frame:00000000000068DD                 db  78h ; x
.eh_frame:00000000000068DE                 db  42h ; B
.eh_frame:00000000000068DF                 db  0Eh
.eh_frame:00000000000068E0                 db  80h
.eh_frame:00000000000068E1                 db    1
.eh_frame:00000000000068E2                 db  51h ; Q
.eh_frame:00000000000068E3                 db  0Bh
.eh_frame:00000000000068E4                 db  10h
.eh_frame:00000000000068E5                 db    0
.eh_frame:00000000000068E6                 db    0
.eh_frame:00000000000068E7                 db    0
.eh_frame:00000000000068E8                 db 0F8h
.eh_frame:00000000000068E9                 db    7
.eh_frame:00000000000068EA                 db    0
.eh_frame:00000000000068EB                 db    0
.eh_frame:00000000000068EC                 db 0A4h
.eh_frame:00000000000068ED                 db 0DFh
.eh_frame:00000000000068EE                 db 0FFh
.eh_frame:00000000000068EF                 db 0FFh
.eh_frame:00000000000068F0                 db  20h
.eh_frame:00000000000068F1                 db    0
.eh_frame:00000000000068F2                 db    0
.eh_frame:00000000000068F3                 db    0
.eh_frame:00000000000068F4                 db    0
.eh_frame:00000000000068F5                 db    0
.eh_frame:00000000000068F6                 db    0
.eh_frame:00000000000068F7                 db    0
.eh_frame:00000000000068F8                 db  18h
.eh_frame:00000000000068F9                 db    0
.eh_frame:00000000000068FA                 db    0
.eh_frame:00000000000068FB                 db    0
.eh_frame:00000000000068FC                 db  0Ch
.eh_frame:00000000000068FD                 db    8
.eh_frame:00000000000068FE                 db    0
.eh_frame:00000000000068FF                 db    0
.eh_frame:0000000000006900                 db 0B0h
.eh_frame:0000000000006901                 db 0DFh
.eh_frame:0000000000006902                 db 0FFh
.eh_frame:0000000000006903                 db 0FFh
.eh_frame:0000000000006904                 db  78h ; x
.eh_frame:0000000000006905                 db    0
.eh_frame:0000000000006906                 db    0
.eh_frame:0000000000006907                 db    0
.eh_frame:0000000000006908                 db    0
.eh_frame:0000000000006909                 db  44h ; D
.eh_frame:000000000000690A                 db  0Eh
.eh_frame:000000000000690B                 db  70h ; p
.eh_frame:000000000000690C                 db    2
.eh_frame:000000000000690D                 db  60h ; `
.eh_frame:000000000000690E                 db  0Ah
.eh_frame:000000000000690F                 db  0Eh
.eh_frame:0000000000006910                 db    8
.eh_frame:0000000000006911                 db  41h ; A
.eh_frame:0000000000006912                 db  0Bh
.eh_frame:0000000000006913                 db    0
.eh_frame:0000000000006914                 db  28h ; (
.eh_frame:0000000000006915                 db    0
.eh_frame:0000000000006916                 db    0
.eh_frame:0000000000006917                 db    0
.eh_frame:0000000000006918                 db  28h ; (
.eh_frame:0000000000006919                 db    8
.eh_frame:000000000000691A                 db    0
.eh_frame:000000000000691B                 db    0
.eh_frame:000000000000691C                 db  14h
.eh_frame:000000000000691D                 db 0E0h
.eh_frame:000000000000691E                 db 0FFh
.eh_frame:000000000000691F                 db 0FFh
.eh_frame:0000000000006920                 db 0D5h
.eh_frame:0000000000006921                 db    0
.eh_frame:0000000000006922                 db    0
.eh_frame:0000000000006923                 db    0
.eh_frame:0000000000006924                 db    0
.eh_frame:0000000000006925                 db  41h ; A
.eh_frame:0000000000006926                 db  0Eh
.eh_frame:0000000000006927                 db  10h
.eh_frame:0000000000006928                 db  86h
.eh_frame:0000000000006929                 db    2
.eh_frame:000000000000692A                 db  41h ; A
.eh_frame:000000000000692B                 db  0Eh
.eh_frame:000000000000692C                 db  18h
.eh_frame:000000000000692D                 db  83h
.eh_frame:000000000000692E                 db    3
.eh_frame:000000000000692F                 db  50h ; P
.eh_frame:0000000000006930                 db  0Eh
.eh_frame:0000000000006931                 db 0D0h
.eh_frame:0000000000006932                 db    1
.eh_frame:0000000000006933                 db    2
.eh_frame:0000000000006934                 db 0ABh
.eh_frame:0000000000006935                 db  0Ah
.eh_frame:0000000000006936                 db  0Eh
.eh_frame:0000000000006937                 db  18h
.eh_frame:0000000000006938                 db  41h ; A
.eh_frame:0000000000006939                 db  0Eh
.eh_frame:000000000000693A                 db  10h
.eh_frame:000000000000693B                 db  41h ; A
.eh_frame:000000000000693C                 db  0Eh
.eh_frame:000000000000693D                 db    8
.eh_frame:000000000000693E                 db  41h ; A
.eh_frame:000000000000693F                 db  0Bh
.eh_frame:0000000000006940                 db  1Ch
.eh_frame:0000000000006941                 db    0
.eh_frame:0000000000006942                 db    0
.eh_frame:0000000000006943                 db    0
.eh_frame:0000000000006944                 db  54h ; T
.eh_frame:0000000000006945                 db    8
.eh_frame:0000000000006946                 db    0
.eh_frame:0000000000006947                 db    0
.eh_frame:0000000000006948                 db 0C8h
.eh_frame:0000000000006949                 db 0E0h
.eh_frame:000000000000694A                 db 0FFh
.eh_frame:000000000000694B                 db 0FFh
.eh_frame:000000000000694C                 db  80h
.eh_frame:000000000000694D                 db    0
.eh_frame:000000000000694E                 db    0
.eh_frame:000000000000694F                 db    0
.eh_frame:0000000000006950                 db    0
.eh_frame:0000000000006951                 db  41h ; A
.eh_frame:0000000000006952                 db  0Eh
.eh_frame:0000000000006953                 db  10h
.eh_frame:0000000000006954                 db  83h
.eh_frame:0000000000006955                 db    2
.eh_frame:0000000000006956                 db    2
.eh_frame:0000000000006957                 db  7Ah ; z
.eh_frame:0000000000006958                 db  0Eh
.eh_frame:0000000000006959                 db    8
.eh_frame:000000000000695A                 db    0
.eh_frame:000000000000695B                 db    0
.eh_frame:000000000000695C                 db    0
.eh_frame:000000000000695D                 db    0
.eh_frame:000000000000695E                 db    0
.eh_frame:000000000000695F                 db    0
.eh_frame:0000000000006960                 db  18h
.eh_frame:0000000000006961                 db    0
.eh_frame:0000000000006962                 db    0
.eh_frame:0000000000006963                 db    0
.eh_frame:0000000000006964                 db  74h ; t
.eh_frame:0000000000006965                 db    8
.eh_frame:0000000000006966                 db    0
.eh_frame:0000000000006967                 db    0
.eh_frame:0000000000006968                 db  28h ; (
.eh_frame:0000000000006969                 db 0E1h
.eh_frame:000000000000696A                 db 0FFh
.eh_frame:000000000000696B                 db 0FFh
.eh_frame:000000000000696C                 db  1Ah
.eh_frame:000000000000696D                 db    0
.eh_frame:000000000000696E                 db    0
.eh_frame:000000000000696F                 db    0
.eh_frame:0000000000006970                 db    0
.eh_frame:0000000000006971                 db  41h ; A
.eh_frame:0000000000006972                 db  0Eh
.eh_frame:0000000000006973                 db  10h
.eh_frame:0000000000006974                 db  83h
.eh_frame:0000000000006975                 db    2
.eh_frame:0000000000006976                 db  53h ; S
.eh_frame:0000000000006977                 db  0Ah
.eh_frame:0000000000006978                 db  0Eh
.eh_frame:0000000000006979                 db    8
.eh_frame:000000000000697A                 db  41h ; A
.eh_frame:000000000000697B                 db  0Bh
.eh_frame:000000000000697C                 db  10h
.eh_frame:000000000000697D                 db    0
.eh_frame:000000000000697E                 db    0
.eh_frame:000000000000697F                 db    0
.eh_frame:0000000000006980                 db  90h
.eh_frame:0000000000006981                 db    8
.eh_frame:0000000000006982                 db    0
.eh_frame:0000000000006983                 db    0
.eh_frame:0000000000006984                 db  2Ch ; ,
.eh_frame:0000000000006985                 db 0E1h
.eh_frame:0000000000006986                 db 0FFh
.eh_frame:0000000000006987                 db 0FFh
.eh_frame:0000000000006988                 db  24h ; $
.eh_frame:0000000000006989                 db    0
.eh_frame:000000000000698A                 db    0
.eh_frame:000000000000698B                 db    0
.eh_frame:000000000000698C                 db    0
.eh_frame:000000000000698D                 db  5Fh ; _
.eh_frame:000000000000698E                 db  0Eh
.eh_frame:000000000000698F                 db  10h
.eh_frame:0000000000006990                 db  10h
.eh_frame:0000000000006991                 db    0
.eh_frame:0000000000006992                 db    0
.eh_frame:0000000000006993                 db    0
.eh_frame:0000000000006994                 db 0A4h
.eh_frame:0000000000006995                 db    8
.eh_frame:0000000000006996                 db    0
.eh_frame:0000000000006997                 db    0
.eh_frame:0000000000006998                 db  48h ; H
.eh_frame:0000000000006999                 db 0E1h
.eh_frame:000000000000699A                 db 0FFh
.eh_frame:000000000000699B                 db 0FFh
.eh_frame:000000000000699C                 db    2
.eh_frame:000000000000699D                 db    0
.eh_frame:000000000000699E                 db    0
.eh_frame:000000000000699F                 db    0
.eh_frame:00000000000069A0                 db    0
.eh_frame:00000000000069A1                 db    0
.eh_frame:00000000000069A2                 db    0
.eh_frame:00000000000069A3                 db    0
.eh_frame:00000000000069A4                 db  20h
.eh_frame:00000000000069A5                 db    0
.eh_frame:00000000000069A6                 db    0
.eh_frame:00000000000069A7                 db    0
.eh_frame:00000000000069A8                 db 0B8h
.eh_frame:00000000000069A9                 db    8
.eh_frame:00000000000069AA                 db    0
.eh_frame:00000000000069AB                 db    0
.eh_frame:00000000000069AC                 db  44h ; D
.eh_frame:00000000000069AD                 db 0E1h
.eh_frame:00000000000069AE                 db 0FFh
.eh_frame:00000000000069AF                 db 0FFh
.eh_frame:00000000000069B0                 db  36h ; 6
.eh_frame:00000000000069B1                 db    0
.eh_frame:00000000000069B2                 db    0
.eh_frame:00000000000069B3                 db    0
.eh_frame:00000000000069B4                 db    0
.eh_frame:00000000000069B5                 db  44h ; D
.eh_frame:00000000000069B6                 db  0Eh
.eh_frame:00000000000069B7                 db  10h
.eh_frame:00000000000069B8                 db  83h
.eh_frame:00000000000069B9                 db    2
.eh_frame:00000000000069BA                 db  5Dh ; ]
.eh_frame:00000000000069BB                 db  0Ah
.eh_frame:00000000000069BC                 db  0Eh
.eh_frame:00000000000069BD                 db    8
.eh_frame:00000000000069BE                 db  47h ; G
.eh_frame:00000000000069BF                 db  0Bh
.eh_frame:00000000000069C0                 db  48h ; H
.eh_frame:00000000000069C1                 db  0Ah
.eh_frame:00000000000069C2                 db  0Eh
.eh_frame:00000000000069C3                 db    8
.eh_frame:00000000000069C4                 db  41h ; A
.eh_frame:00000000000069C5                 db  0Bh
.eh_frame:00000000000069C6                 db    0
.eh_frame:00000000000069C7                 db    0
.eh_frame:00000000000069C8                 db  10h
.eh_frame:00000000000069C9                 db    0
.eh_frame:00000000000069CA                 db    0
.eh_frame:00000000000069CB                 db    0
.eh_frame:00000000000069CC                 db 0DCh
.eh_frame:00000000000069CD                 db    8
.eh_frame:00000000000069CE                 db    0
.eh_frame:00000000000069CF                 db    0
.eh_frame:00000000000069D0                 db  60h ; `
.eh_frame:00000000000069D1                 db 0E1h
.eh_frame:00000000000069D2                 db 0FFh
.eh_frame:00000000000069D3                 db 0FFh
.eh_frame:00000000000069D4                 db  24h ; $
.eh_frame:00000000000069D5                 db    0
.eh_frame:00000000000069D6                 db    0
.eh_frame:00000000000069D7                 db    0
.eh_frame:00000000000069D8                 db    0
.eh_frame:00000000000069D9                 db  5Fh ; _
.eh_frame:00000000000069DA                 db  0Eh
.eh_frame:00000000000069DB                 db  10h
.eh_frame:00000000000069DC                 db  14h
.eh_frame:00000000000069DD                 db    0
.eh_frame:00000000000069DE                 db    0
.eh_frame:00000000000069DF                 db    0
.eh_frame:00000000000069E0                 db 0F0h
.eh_frame:00000000000069E1                 db    8
.eh_frame:00000000000069E2                 db    0
.eh_frame:00000000000069E3                 db    0
.eh_frame:00000000000069E4                 db  7Ch ; |
.eh_frame:00000000000069E5                 db 0E1h
.eh_frame:00000000000069E6                 db 0FFh
.eh_frame:00000000000069E7                 db 0FFh
.eh_frame:00000000000069E8                 db  82h
.eh_frame:00000000000069E9                 db    0
.eh_frame:00000000000069EA                 db    0
.eh_frame:00000000000069EB                 db    0
.eh_frame:00000000000069EC                 db    0
.eh_frame:00000000000069ED                 db    2
.eh_frame:00000000000069EE                 db  5Fh ; _
.eh_frame:00000000000069EF                 db  0Eh
.eh_frame:00000000000069F0                 db  10h
.eh_frame:00000000000069F1                 db  49h ; I
.eh_frame:00000000000069F2                 db  0Eh
.eh_frame:00000000000069F3                 db    8
.eh_frame:00000000000069F4                 db  14h
.eh_frame:00000000000069F5                 db    0
.eh_frame:00000000000069F6                 db    0
.eh_frame:00000000000069F7                 db    0
.eh_frame:00000000000069F8                 db    8
.eh_frame:00000000000069F9                 db    9
.eh_frame:00000000000069FA                 db    0
.eh_frame:00000000000069FB                 db    0
.eh_frame:00000000000069FC                 db 0F4h
.eh_frame:00000000000069FD                 db 0E1h
.eh_frame:00000000000069FE                 db 0FFh
.eh_frame:00000000000069FF                 db 0FFh
.eh_frame:0000000000006A00                 db  4Ah ; J
.eh_frame:0000000000006A01                 db    0
.eh_frame:0000000000006A02                 db    0
.eh_frame:0000000000006A03                 db    0
.eh_frame:0000000000006A04                 db    0
.eh_frame:0000000000006A05                 db    2
.eh_frame:0000000000006A06                 db  45h ; E
.eh_frame:0000000000006A07                 db  0Eh
.eh_frame:0000000000006A08                 db  10h
.eh_frame:0000000000006A09                 db    0
.eh_frame:0000000000006A0A                 db    0
.eh_frame:0000000000006A0B                 db    0
.eh_frame:0000000000006A0C                 db  18h
.eh_frame:0000000000006A0D                 db    0
.eh_frame:0000000000006A0E                 db    0
.eh_frame:0000000000006A0F                 db    0
.eh_frame:0000000000006A10                 db  20h
.eh_frame:0000000000006A11                 db    9
.eh_frame:0000000000006A12                 db    0
.eh_frame:0000000000006A13                 db    0
.eh_frame:0000000000006A14                 db  2Ch ; ,
.eh_frame:0000000000006A15                 db 0E2h
.eh_frame:0000000000006A16                 db 0FFh
.eh_frame:0000000000006A17                 db 0FFh
.eh_frame:0000000000006A18                 db  17h
.eh_frame:0000000000006A19                 db    0
.eh_frame:0000000000006A1A                 db    0
.eh_frame:0000000000006A1B                 db    0
.eh_frame:0000000000006A1C                 db    0
.eh_frame:0000000000006A1D                 db  41h ; A
.eh_frame:0000000000006A1E                 db  0Eh
.eh_frame:0000000000006A1F                 db  10h
.eh_frame:0000000000006A20                 db  83h
.eh_frame:0000000000006A21                 db    2
.eh_frame:0000000000006A22                 db  51h ; Q
.eh_frame:0000000000006A23                 db  0Eh
.eh_frame:0000000000006A24                 db    8
.eh_frame:0000000000006A25                 db    0
.eh_frame:0000000000006A26                 db    0
.eh_frame:0000000000006A27                 db    0
.eh_frame:0000000000006A28                 db  18h
.eh_frame:0000000000006A29                 db    0
.eh_frame:0000000000006A2A                 db    0
.eh_frame:0000000000006A2B                 db    0
.eh_frame:0000000000006A2C                 db  3Ch ; <
.eh_frame:0000000000006A2D                 db    9
.eh_frame:0000000000006A2E                 db    0
.eh_frame:0000000000006A2F                 db    0
.eh_frame:0000000000006A30                 db  30h ; 0
.eh_frame:0000000000006A31                 db 0E2h
.eh_frame:0000000000006A32                 db 0FFh
.eh_frame:0000000000006A33                 db 0FFh
.eh_frame:0000000000006A34                 db  2Eh ; .
.eh_frame:0000000000006A35                 db    0
.eh_frame:0000000000006A36                 db    0
.eh_frame:0000000000006A37                 db    0
.eh_frame:0000000000006A38                 db    0
.eh_frame:0000000000006A39                 db  47h ; G
.eh_frame:0000000000006A3A                 db  0Eh
.eh_frame:0000000000006A3B                 db  10h
.eh_frame:0000000000006A3C                 db  61h ; a
.eh_frame:0000000000006A3D                 db  0Ah
.eh_frame:0000000000006A3E                 db  0Eh
.eh_frame:0000000000006A3F                 db    8
.eh_frame:0000000000006A40                 db  41h ; A
.eh_frame:0000000000006A41                 db  0Bh
.eh_frame:0000000000006A42                 db    0
.eh_frame:0000000000006A43                 db    0
.eh_frame:0000000000006A44                 db  24h ; $
.eh_frame:0000000000006A45                 db    0
.eh_frame:0000000000006A46                 db    0
.eh_frame:0000000000006A47                 db    0
.eh_frame:0000000000006A48                 db  58h ; X
.eh_frame:0000000000006A49                 db    9
.eh_frame:0000000000006A4A                 db    0
.eh_frame:0000000000006A4B                 db    0
.eh_frame:0000000000006A4C                 db  44h ; D
.eh_frame:0000000000006A4D                 db 0E2h
.eh_frame:0000000000006A4E                 db 0FFh
.eh_frame:0000000000006A4F                 db 0FFh
.eh_frame:0000000000006A50                 db  28h ; (
.eh_frame:0000000000006A51                 db    0
.eh_frame:0000000000006A52                 db    0
.eh_frame:0000000000006A53                 db    0
.eh_frame:0000000000006A54                 db    0
.eh_frame:0000000000006A55                 db  41h ; A
.eh_frame:0000000000006A56                 db  0Eh
.eh_frame:0000000000006A57                 db  10h
.eh_frame:0000000000006A58                 db  86h
.eh_frame:0000000000006A59                 db    2
.eh_frame:0000000000006A5A                 db  41h ; A
.eh_frame:0000000000006A5B                 db  0Eh
.eh_frame:0000000000006A5C                 db  18h
.eh_frame:0000000000006A5D                 db  83h
.eh_frame:0000000000006A5E                 db    3
.eh_frame:0000000000006A5F                 db  4Dh ; M
.eh_frame:0000000000006A60                 db  0Eh
.eh_frame:0000000000006A61                 db  20h
.eh_frame:0000000000006A62                 db  49h ; I
.eh_frame:0000000000006A63                 db  0Eh
.eh_frame:0000000000006A64                 db  18h
.eh_frame:0000000000006A65                 db  47h ; G
.eh_frame:0000000000006A66                 db  0Eh
.eh_frame:0000000000006A67                 db  10h
.eh_frame:0000000000006A68                 db  41h ; A
.eh_frame:0000000000006A69                 db  0Eh
.eh_frame:0000000000006A6A                 db    8
.eh_frame:0000000000006A6B                 db    0
.eh_frame:0000000000006A6C                 db  18h
.eh_frame:0000000000006A6D                 db    0
.eh_frame:0000000000006A6E                 db    0
.eh_frame:0000000000006A6F                 db    0
.eh_frame:0000000000006A70                 db  80h
.eh_frame:0000000000006A71                 db    9
.eh_frame:0000000000006A72                 db    0
.eh_frame:0000000000006A73                 db    0
.eh_frame:0000000000006A74                 db  4Ch ; L
.eh_frame:0000000000006A75                 db 0E2h
.eh_frame:0000000000006A76                 db 0FFh
.eh_frame:0000000000006A77                 db 0FFh
.eh_frame:0000000000006A78                 db  13h
.eh_frame:0000000000006A79                 db    0
.eh_frame:0000000000006A7A                 db    0
.eh_frame:0000000000006A7B                 db    0
.eh_frame:0000000000006A7C                 db    0
.eh_frame:0000000000006A7D                 db  41h ; A
.eh_frame:0000000000006A7E                 db  0Eh
.eh_frame:0000000000006A7F                 db  10h
.eh_frame:0000000000006A80                 db  83h
.eh_frame:0000000000006A81                 db    2
.eh_frame:0000000000006A82                 db  50h ; P
.eh_frame:0000000000006A83                 db  0Eh
.eh_frame:0000000000006A84                 db    8
.eh_frame:0000000000006A85                 db    0
.eh_frame:0000000000006A86                 db    0
.eh_frame:0000000000006A87                 db    0
.eh_frame:0000000000006A88                 db  14h
.eh_frame:0000000000006A89                 db    0
.eh_frame:0000000000006A8A                 db    0
.eh_frame:0000000000006A8B                 db    0
.eh_frame:0000000000006A8C                 db  9Ch
.eh_frame:0000000000006A8D                 db    9
.eh_frame:0000000000006A8E                 db    0
.eh_frame:0000000000006A8F                 db    0
.eh_frame:0000000000006A90                 db  50h ; P
.eh_frame:0000000000006A91                 db 0E2h
.eh_frame:0000000000006A92                 db 0FFh
.eh_frame:0000000000006A93                 db 0FFh
.eh_frame:0000000000006A94                 db  35h ; 5
.eh_frame:0000000000006A95                 db    0
.eh_frame:0000000000006A96                 db    0
.eh_frame:0000000000006A97                 db    0
.eh_frame:0000000000006A98                 db    0
.eh_frame:0000000000006A99                 db  4Bh ; K
.eh_frame:0000000000006A9A                 db  0Eh
.eh_frame:0000000000006A9B                 db  10h
.eh_frame:0000000000006A9C                 db    0
.eh_frame:0000000000006A9D                 db    0
.eh_frame:0000000000006A9E                 db    0
.eh_frame:0000000000006A9F                 db    0
.eh_frame:0000000000006AA0                 db  1Ch
.eh_frame:0000000000006AA1                 db    0
.eh_frame:0000000000006AA2                 db    0
.eh_frame:0000000000006AA3                 db    0
.eh_frame:0000000000006AA4                 db 0B4h
.eh_frame:0000000000006AA5                 db    9
.eh_frame:0000000000006AA6                 db    0
.eh_frame:0000000000006AA7                 db    0
.eh_frame:0000000000006AA8                 db  78h ; x
.eh_frame:0000000000006AA9                 db 0E2h
.eh_frame:0000000000006AAA                 db 0FFh
.eh_frame:0000000000006AAB                 db 0FFh
.eh_frame:0000000000006AAC                 db  2Fh ; /
.eh_frame:0000000000006AAD                 db    0
.eh_frame:0000000000006AAE                 db    0
.eh_frame:0000000000006AAF                 db    0
.eh_frame:0000000000006AB0                 db    0
.eh_frame:0000000000006AB1                 db  41h ; A
.eh_frame:0000000000006AB2                 db  0Eh
.eh_frame:0000000000006AB3                 db  10h
.eh_frame:0000000000006AB4                 db  83h
.eh_frame:0000000000006AB5                 db    2
.eh_frame:0000000000006AB6                 db  55h ; U
.eh_frame:0000000000006AB7                 db  0Ah
.eh_frame:0000000000006AB8                 db  0Eh
.eh_frame:0000000000006AB9                 db    8
.eh_frame:0000000000006ABA                 db  4Ah ; J
.eh_frame:0000000000006ABB                 db  0Bh
.eh_frame:0000000000006ABC                 db    0
.eh_frame:0000000000006ABD                 db    0
.eh_frame:0000000000006ABE                 db    0
.eh_frame:0000000000006ABF                 db    0
.eh_frame:0000000000006AC0                 db  3Ch ; <
.eh_frame:0000000000006AC1                 db    0
.eh_frame:0000000000006AC2                 db    0
.eh_frame:0000000000006AC3                 db    0
.eh_frame:0000000000006AC4                 db 0D4h
.eh_frame:0000000000006AC5                 db    9
.eh_frame:0000000000006AC6                 db    0
.eh_frame:0000000000006AC7                 db    0
.eh_frame:0000000000006AC8                 db  88h
.eh_frame:0000000000006AC9                 db 0E2h
.eh_frame:0000000000006ACA                 db 0FFh
.eh_frame:0000000000006ACB                 db 0FFh
.eh_frame:0000000000006ACC                 db  83h
.eh_frame:0000000000006ACD                 db    0
.eh_frame:0000000000006ACE                 db    0
.eh_frame:0000000000006ACF                 db    0
.eh_frame:0000000000006AD0                 db    0
.eh_frame:0000000000006AD1                 db  42h ; B
.eh_frame:0000000000006AD2                 db  0Eh
.eh_frame:0000000000006AD3                 db  10h
.eh_frame:0000000000006AD4                 db  8Dh
.eh_frame:0000000000006AD5                 db    2
.eh_frame:0000000000006AD6                 db  42h ; B
.eh_frame:0000000000006AD7                 db  0Eh
.eh_frame:0000000000006AD8                 db  18h
.eh_frame:0000000000006AD9                 db  8Ch
.eh_frame:0000000000006ADA                 db    3
.eh_frame:0000000000006ADB                 db  44h ; D
.eh_frame:0000000000006ADC                 db  0Eh
.eh_frame:0000000000006ADD                 db  20h
.eh_frame:0000000000006ADE                 db  86h
.eh_frame:0000000000006ADF                 db    4
.eh_frame:0000000000006AE0                 db  41h ; A
.eh_frame:0000000000006AE1                 db  0Eh
.eh_frame:0000000000006AE2                 db  28h ; (
.eh_frame:0000000000006AE3                 db  83h
.eh_frame:0000000000006AE4                 db    5
.eh_frame:0000000000006AE5                 db  4Ah ; J
.eh_frame:0000000000006AE6                 db  0Eh
.eh_frame:0000000000006AE7                 db  40h ; @
.eh_frame:0000000000006AE8                 db    2
.eh_frame:0000000000006AE9                 db  64h ; d
.eh_frame:0000000000006AEA                 db  0Ah
.eh_frame:0000000000006AEB                 db  0Eh
.eh_frame:0000000000006AEC                 db  28h ; (
.eh_frame:0000000000006AED                 db  41h ; A
.eh_frame:0000000000006AEE                 db  0Eh
.eh_frame:0000000000006AEF                 db  20h
.eh_frame:0000000000006AF0                 db  41h ; A
.eh_frame:0000000000006AF1                 db  0Eh
.eh_frame:0000000000006AF2                 db  18h
.eh_frame:0000000000006AF3                 db  42h ; B
.eh_frame:0000000000006AF4                 db  0Eh
.eh_frame:0000000000006AF5                 db  10h
.eh_frame:0000000000006AF6                 db  42h ; B
.eh_frame:0000000000006AF7                 db  0Eh
.eh_frame:0000000000006AF8                 db    8
.eh_frame:0000000000006AF9                 db  41h ; A
.eh_frame:0000000000006AFA                 db  0Bh
.eh_frame:0000000000006AFB                 db    0
.eh_frame:0000000000006AFC                 db    0
.eh_frame:0000000000006AFD                 db    0
.eh_frame:0000000000006AFE                 db    0
.eh_frame:0000000000006AFF                 db    0
.eh_frame:0000000000006B00                 db  4Ch ; L
.eh_frame:0000000000006B01                 db    0
.eh_frame:0000000000006B02                 db    0
.eh_frame:0000000000006B03                 db    0
.eh_frame:0000000000006B04                 db  14h
.eh_frame:0000000000006B05                 db  0Ah
.eh_frame:0000000000006B06                 db    0
.eh_frame:0000000000006B07                 db    0
.eh_frame:0000000000006B08                 db 0D8h
.eh_frame:0000000000006B09                 db 0E2h
.eh_frame:0000000000006B0A                 db 0FFh
.eh_frame:0000000000006B0B                 db 0FFh
.eh_frame:0000000000006B0C                 db  7Dh ; }
.eh_frame:0000000000006B0D                 db    0
.eh_frame:0000000000006B0E                 db    0
.eh_frame:0000000000006B0F                 db    0
.eh_frame:0000000000006B10                 db    0
.eh_frame:0000000000006B11                 db  42h ; B
.eh_frame:0000000000006B12                 db  0Eh
.eh_frame:0000000000006B13                 db  10h
.eh_frame:0000000000006B14                 db  8Ch
.eh_frame:0000000000006B15                 db    2
.eh_frame:0000000000006B16                 db  41h ; A
.eh_frame:0000000000006B17                 db  0Eh
.eh_frame:0000000000006B18                 db  18h
.eh_frame:0000000000006B19                 db  86h
.eh_frame:0000000000006B1A                 db    3
.eh_frame:0000000000006B1B                 db  44h ; D
.eh_frame:0000000000006B1C                 db  0Eh
.eh_frame:0000000000006B1D                 db  20h
.eh_frame:0000000000006B1E                 db  83h
.eh_frame:0000000000006B1F                 db    4
.eh_frame:0000000000006B20                 db  69h ; i
.eh_frame:0000000000006B21                 db  0Ah
.eh_frame:0000000000006B22                 db  0Eh
.eh_frame:0000000000006B23                 db  18h
.eh_frame:0000000000006B24                 db  41h ; A
.eh_frame:0000000000006B25                 db  0Eh
.eh_frame:0000000000006B26                 db  10h
.eh_frame:0000000000006B27                 db  42h ; B
.eh_frame:0000000000006B28                 db  0Eh
.eh_frame:0000000000006B29                 db    8
.eh_frame:0000000000006B2A                 db  45h ; E
.eh_frame:0000000000006B2B                 db  0Bh
.eh_frame:0000000000006B2C                 db  55h ; U
.eh_frame:0000000000006B2D                 db  0Ah
.eh_frame:0000000000006B2E                 db  0Eh
.eh_frame:0000000000006B2F                 db  18h
.eh_frame:0000000000006B30                 db  41h ; A
.eh_frame:0000000000006B31                 db  0Eh
.eh_frame:0000000000006B32                 db  10h
.eh_frame:0000000000006B33                 db  42h ; B
.eh_frame:0000000000006B34                 db  0Eh
.eh_frame:0000000000006B35                 db    8
.eh_frame:0000000000006B36                 db  48h ; H
.eh_frame:0000000000006B37                 db  0Bh
.eh_frame:0000000000006B38                 db  41h ; A
.eh_frame:0000000000006B39                 db  0Ah
.eh_frame:0000000000006B3A                 db  0Eh
.eh_frame:0000000000006B3B                 db  18h
.eh_frame:0000000000006B3C                 db  46h ; F
.eh_frame:0000000000006B3D                 db  0Eh
.eh_frame:0000000000006B3E                 db  10h
.eh_frame:0000000000006B3F                 db  42h ; B
.eh_frame:0000000000006B40                 db  0Eh
.eh_frame:0000000000006B41                 db    8
.eh_frame:0000000000006B42                 db  47h ; G
.eh_frame:0000000000006B43                 db  0Bh
.eh_frame:0000000000006B44                 db  49h ; I
.eh_frame:0000000000006B45                 db  0Eh
.eh_frame:0000000000006B46                 db  18h
.eh_frame:0000000000006B47                 db  41h ; A
.eh_frame:0000000000006B48                 db  0Eh
.eh_frame:0000000000006B49                 db  10h
.eh_frame:0000000000006B4A                 db  42h ; B
.eh_frame:0000000000006B4B                 db  0Eh
.eh_frame:0000000000006B4C                 db    8
.eh_frame:0000000000006B4D                 db    0
.eh_frame:0000000000006B4E                 db    0
.eh_frame:0000000000006B4F                 db    0
.eh_frame:0000000000006B50                 db  1Ch
.eh_frame:0000000000006B51                 db    0
.eh_frame:0000000000006B52                 db    0
.eh_frame:0000000000006B53                 db    0
.eh_frame:0000000000006B54                 db  64h ; d
.eh_frame:0000000000006B55                 db  0Ah
.eh_frame:0000000000006B56                 db    0
.eh_frame:0000000000006B57                 db    0
.eh_frame:0000000000006B58                 db    8
.eh_frame:0000000000006B59                 db 0E3h
.eh_frame:0000000000006B5A                 db 0FFh
.eh_frame:0000000000006B5B                 db 0FFh
.eh_frame:0000000000006B5C                 db  60h ; `
.eh_frame:0000000000006B5D                 db    0
.eh_frame:0000000000006B5E                 db    0
.eh_frame:0000000000006B5F                 db    0
.eh_frame:0000000000006B60                 db    0
.eh_frame:0000000000006B61                 db  44h ; D
.eh_frame:0000000000006B62                 db  0Eh
.eh_frame:0000000000006B63                 db  10h
.eh_frame:0000000000006B64                 db  75h ; u
.eh_frame:0000000000006B65                 db  0Ah
.eh_frame:0000000000006B66                 db  0Eh
.eh_frame:0000000000006B67                 db    8
.eh_frame:0000000000006B68                 db  47h ; G
.eh_frame:0000000000006B69                 db  0Bh
.eh_frame:0000000000006B6A                 db  5Fh ; _
.eh_frame:0000000000006B6B                 db  0Eh
.eh_frame:0000000000006B6C                 db    8
.eh_frame:0000000000006B6D                 db    0
.eh_frame:0000000000006B6E                 db    0
.eh_frame:0000000000006B6F                 db    0
.eh_frame:0000000000006B70                 db  1Ch
.eh_frame:0000000000006B71                 db    0
.eh_frame:0000000000006B72                 db    0
.eh_frame:0000000000006B73                 db    0
.eh_frame:0000000000006B74                 db  84h
.eh_frame:0000000000006B75                 db  0Ah
.eh_frame:0000000000006B76                 db    0
.eh_frame:0000000000006B77                 db    0
.eh_frame:0000000000006B78                 db  48h ; H
.eh_frame:0000000000006B79                 db 0E3h
.eh_frame:0000000000006B7A                 db 0FFh
.eh_frame:0000000000006B7B                 db 0FFh
.eh_frame:0000000000006B7C                 db  3Ch ; <
.eh_frame:0000000000006B7D                 db    0
.eh_frame:0000000000006B7E                 db    0
.eh_frame:0000000000006B7F                 db    0
.eh_frame:0000000000006B80                 db    0
.eh_frame:0000000000006B81                 db  44h ; D
.eh_frame:0000000000006B82                 db  0Eh
.eh_frame:0000000000006B83                 db  10h
.eh_frame:0000000000006B84                 db  61h ; a
.eh_frame:0000000000006B85                 db  0Ah
.eh_frame:0000000000006B86                 db  0Eh
.eh_frame:0000000000006B87                 db    8
.eh_frame:0000000000006B88                 db  4Bh ; K
.eh_frame:0000000000006B89                 db  0Bh
.eh_frame:0000000000006B8A                 db  4Bh ; K
.eh_frame:0000000000006B8B                 db  0Eh
.eh_frame:0000000000006B8C                 db    8
.eh_frame:0000000000006B8D                 db    0
.eh_frame:0000000000006B8E                 db    0
.eh_frame:0000000000006B8F                 db    0
.eh_frame:0000000000006B90                 db  34h ; 4
.eh_frame:0000000000006B91                 db    0
.eh_frame:0000000000006B92                 db    0
.eh_frame:0000000000006B93                 db    0
.eh_frame:0000000000006B94                 db 0A4h
.eh_frame:0000000000006B95                 db  0Ah
.eh_frame:0000000000006B96                 db    0
.eh_frame:0000000000006B97                 db    0
.eh_frame:0000000000006B98                 db  68h ; h
.eh_frame:0000000000006B99                 db 0E3h
.eh_frame:0000000000006B9A                 db 0FFh
.eh_frame:0000000000006B9B                 db 0FFh
.eh_frame:0000000000006B9C                 db  7Bh ; {
.eh_frame:0000000000006B9D                 db    0
.eh_frame:0000000000006B9E                 db    0
.eh_frame:0000000000006B9F                 db    0
.eh_frame:0000000000006BA0                 db    0
.eh_frame:0000000000006BA1                 db  42h ; B
.eh_frame:0000000000006BA2                 db  0Eh
.eh_frame:0000000000006BA3                 db  10h
.eh_frame:0000000000006BA4                 db  8Ch
.eh_frame:0000000000006BA5                 db    2
.eh_frame:0000000000006BA6                 db  41h ; A
.eh_frame:0000000000006BA7                 db  0Eh
.eh_frame:0000000000006BA8                 db  18h
.eh_frame:0000000000006BA9                 db  86h
.eh_frame:0000000000006BAA                 db    3
.eh_frame:0000000000006BAB                 db  41h ; A
.eh_frame:0000000000006BAC                 db  0Eh
.eh_frame:0000000000006BAD                 db  20h
.eh_frame:0000000000006BAE                 db  83h
.eh_frame:0000000000006BAF                 db    4
.eh_frame:0000000000006BB0                 db  7Dh ; }
.eh_frame:0000000000006BB1                 db  0Ah
.eh_frame:0000000000006BB2                 db  0Eh
.eh_frame:0000000000006BB3                 db  18h
.eh_frame:0000000000006BB4                 db  41h ; A
.eh_frame:0000000000006BB5                 db  0Eh
.eh_frame:0000000000006BB6                 db  10h
.eh_frame:0000000000006BB7                 db  42h ; B
.eh_frame:0000000000006BB8                 db  0Eh
.eh_frame:0000000000006BB9                 db    8
.eh_frame:0000000000006BBA                 db  44h ; D
.eh_frame:0000000000006BBB                 db  0Bh
.eh_frame:0000000000006BBC                 db  60h ; `
.eh_frame:0000000000006BBD                 db  0Ah
.eh_frame:0000000000006BBE                 db  0Eh
.eh_frame:0000000000006BBF                 db  18h
.eh_frame:0000000000006BC0                 db  41h ; A
.eh_frame:0000000000006BC1                 db  0Eh
.eh_frame:0000000000006BC2                 db  10h
.eh_frame:0000000000006BC3                 db  42h ; B
.eh_frame:0000000000006BC4                 db  0Eh
.eh_frame:0000000000006BC5                 db    8
.eh_frame:0000000000006BC6                 db  45h ; E
.eh_frame:0000000000006BC7                 db  0Bh
.eh_frame:0000000000006BC8                 db  1Ch
.eh_frame:0000000000006BC9                 db    0
.eh_frame:0000000000006BCA                 db    0
.eh_frame:0000000000006BCB                 db    0
.eh_frame:0000000000006BCC                 db 0DCh
.eh_frame:0000000000006BCD                 db  0Ah
.eh_frame:0000000000006BCE                 db    0
.eh_frame:0000000000006BCF                 db    0
.eh_frame:0000000000006BD0                 db 0B0h
.eh_frame:0000000000006BD1                 db 0E3h
.eh_frame:0000000000006BD2                 db 0FFh
.eh_frame:0000000000006BD3                 db 0FFh
.eh_frame:0000000000006BD4                 db  40h ; @
.eh_frame:0000000000006BD5                 db    0
.eh_frame:0000000000006BD6                 db    0
.eh_frame:0000000000006BD7                 db    0
.eh_frame:0000000000006BD8                 db    0
.eh_frame:0000000000006BD9                 db  44h ; D
.eh_frame:0000000000006BDA                 db  0Eh
.eh_frame:0000000000006BDB                 db  10h
.eh_frame:0000000000006BDC                 db  83h
.eh_frame:0000000000006BDD                 db    2
.eh_frame:0000000000006BDE                 db  5Ah ; Z
.eh_frame:0000000000006BDF                 db  0Ah
.eh_frame:0000000000006BE0                 db  0Eh
.eh_frame:0000000000006BE1                 db    8
.eh_frame:0000000000006BE2                 db  4Ah ; J
.eh_frame:0000000000006BE3                 db  0Bh
.eh_frame:0000000000006BE4                 db  53h ; S
.eh_frame:0000000000006BE5                 db  0Eh
.eh_frame:0000000000006BE6                 db    8
.eh_frame:0000000000006BE7                 db    0
.eh_frame:0000000000006BE8                 db  2Ch ; ,
.eh_frame:0000000000006BE9                 db    0
.eh_frame:0000000000006BEA                 db    0
.eh_frame:0000000000006BEB                 db    0
.eh_frame:0000000000006BEC                 db 0FCh
.eh_frame:0000000000006BED                 db  0Ah
.eh_frame:0000000000006BEE                 db    0
.eh_frame:0000000000006BEF                 db    0
.eh_frame:0000000000006BF0                 db 0D0h
.eh_frame:0000000000006BF1                 db 0E3h
.eh_frame:0000000000006BF2                 db 0FFh
.eh_frame:0000000000006BF3                 db 0FFh
.eh_frame:0000000000006BF4                 db  57h ; W
.eh_frame:0000000000006BF5                 db    0
.eh_frame:0000000000006BF6                 db    0
.eh_frame:0000000000006BF7                 db    0
.eh_frame:0000000000006BF8                 db    0
.eh_frame:0000000000006BF9                 db  63h ; c
.eh_frame:0000000000006BFA                 db  0Eh
.eh_frame:0000000000006BFB                 db  10h
.eh_frame:0000000000006BFC                 db  8Ch
.eh_frame:0000000000006BFD                 db    2
.eh_frame:0000000000006BFE                 db  41h ; A
.eh_frame:0000000000006BFF                 db  0Eh
.eh_frame:0000000000006C00                 db  18h
.eh_frame:0000000000006C01                 db  86h
.eh_frame:0000000000006C02                 db    3
.eh_frame:0000000000006C03                 db  44h ; D
.eh_frame:0000000000006C04                 db  0Eh
.eh_frame:0000000000006C05                 db  20h
.eh_frame:0000000000006C06                 db  83h
.eh_frame:0000000000006C07                 db    4
.eh_frame:0000000000006C08                 db  6Bh ; k
.eh_frame:0000000000006C09                 db  0Eh
.eh_frame:0000000000006C0A                 db  18h
.eh_frame:0000000000006C0B                 db  41h ; A
.eh_frame:0000000000006C0C                 db  0Eh
.eh_frame:0000000000006C0D                 db  10h
.eh_frame:0000000000006C0E                 db  42h ; B
.eh_frame:0000000000006C0F                 db  0Eh
.eh_frame:0000000000006C10                 db    8
.eh_frame:0000000000006C11                 db    0
.eh_frame:0000000000006C12                 db    0
.eh_frame:0000000000006C13                 db    0
.eh_frame:0000000000006C14                 db    0
.eh_frame:0000000000006C15                 db    0
.eh_frame:0000000000006C16                 db    0
.eh_frame:0000000000006C17                 db    0
.eh_frame:0000000000006C18                 db  44h ; D
.eh_frame:0000000000006C19                 db    0
.eh_frame:0000000000006C1A                 db    0
.eh_frame:0000000000006C1B                 db    0
.eh_frame:0000000000006C1C                 db  2Ch ; ,
.eh_frame:0000000000006C1D                 db  0Bh
.eh_frame:0000000000006C1E                 db    0
.eh_frame:0000000000006C1F                 db    0
.eh_frame:0000000000006C20                 db    0
.eh_frame:0000000000006C21                 db 0E4h
.eh_frame:0000000000006C22                 db 0FFh
.eh_frame:0000000000006C23                 db 0FFh
.eh_frame:0000000000006C24                 db  65h ; e
.eh_frame:0000000000006C25                 db    0
.eh_frame:0000000000006C26                 db    0
.eh_frame:0000000000006C27                 db    0
.eh_frame:0000000000006C28                 db    0
.eh_frame:0000000000006C29                 db  42h ; B
.eh_frame:0000000000006C2A                 db  0Eh
.eh_frame:0000000000006C2B                 db  10h
.eh_frame:0000000000006C2C                 db  8Fh
.eh_frame:0000000000006C2D                 db    2
.eh_frame:0000000000006C2E                 db  42h ; B
.eh_frame:0000000000006C2F                 db  0Eh
.eh_frame:0000000000006C30                 db  18h
.eh_frame:0000000000006C31                 db  8Eh
.eh_frame:0000000000006C32                 db    3
.eh_frame:0000000000006C33                 db  45h ; E
.eh_frame:0000000000006C34                 db  0Eh
.eh_frame:0000000000006C35                 db  20h
.eh_frame:0000000000006C36                 db  8Dh
.eh_frame:0000000000006C37                 db    4
.eh_frame:0000000000006C38                 db  42h ; B
.eh_frame:0000000000006C39                 db  0Eh
.eh_frame:0000000000006C3A                 db  28h ; (
.eh_frame:0000000000006C3B                 db  8Ch
.eh_frame:0000000000006C3C                 db    5
.eh_frame:0000000000006C3D                 db  48h ; H
.eh_frame:0000000000006C3E                 db  0Eh
.eh_frame:0000000000006C3F                 db  30h ; 0
.eh_frame:0000000000006C40                 db  86h
.eh_frame:0000000000006C41                 db    6
.eh_frame:0000000000006C42                 db  48h ; H
.eh_frame:0000000000006C43                 db  0Eh
.eh_frame:0000000000006C44                 db  38h ; 8
.eh_frame:0000000000006C45                 db  83h
.eh_frame:0000000000006C46                 db    7
.eh_frame:0000000000006C47                 db  4Dh ; M
.eh_frame:0000000000006C48                 db  0Eh
.eh_frame:0000000000006C49                 db  40h ; @
.eh_frame:0000000000006C4A                 db  72h ; r
.eh_frame:0000000000006C4B                 db  0Eh
.eh_frame:0000000000006C4C                 db  38h ; 8
.eh_frame:0000000000006C4D                 db  41h ; A
.eh_frame:0000000000006C4E                 db  0Eh
.eh_frame:0000000000006C4F                 db  30h ; 0
.eh_frame:0000000000006C50                 db  41h ; A
.eh_frame:0000000000006C51                 db  0Eh
.eh_frame:0000000000006C52                 db  28h ; (
.eh_frame:0000000000006C53                 db  42h ; B
.eh_frame:0000000000006C54                 db  0Eh
.eh_frame:0000000000006C55                 db  20h
.eh_frame:0000000000006C56                 db  42h ; B
.eh_frame:0000000000006C57                 db  0Eh
.eh_frame:0000000000006C58                 db  18h
.eh_frame:0000000000006C59                 db  42h ; B
.eh_frame:0000000000006C5A                 db  0Eh
.eh_frame:0000000000006C5B                 db  10h
.eh_frame:0000000000006C5C                 db  42h ; B
.eh_frame:0000000000006C5D                 db  0Eh
.eh_frame:0000000000006C5E                 db    8
.eh_frame:0000000000006C5F                 db    0
.eh_frame:0000000000006C60                 db  14h
.eh_frame:0000000000006C61                 db    0
.eh_frame:0000000000006C62                 db    0
.eh_frame:0000000000006C63                 db    0
.eh_frame:0000000000006C64                 db  74h ; t
.eh_frame:0000000000006C65                 db  0Bh
.eh_frame:0000000000006C66                 db    0
.eh_frame:0000000000006C67                 db    0
.eh_frame:0000000000006C68                 db  28h ; (
.eh_frame:0000000000006C69                 db 0E4h
.eh_frame:0000000000006C6A                 db 0FFh
.eh_frame:0000000000006C6B                 db 0FFh
.eh_frame:0000000000006C6C                 db    2
.eh_frame:0000000000006C6D                 db    0
.eh_frame:0000000000006C6E                 db    0
.eh_frame:0000000000006C6F                 db    0
.eh_frame:0000000000006C70                 db    0
.eh_frame:0000000000006C71                 db    0
.eh_frame:0000000000006C72                 db    0
.eh_frame:0000000000006C73                 db    0
.eh_frame:0000000000006C74                 db    0
.eh_frame:0000000000006C75                 db    0
.eh_frame:0000000000006C76                 db    0
.eh_frame:0000000000006C77                 db    0
.eh_frame:0000000000006C78                 db  10h
.eh_frame:0000000000006C79                 db    0
.eh_frame:0000000000006C7A                 db    0
.eh_frame:0000000000006C7B                 db    0
.eh_frame:0000000000006C7C                 db  8Ch
.eh_frame:0000000000006C7D                 db  0Bh
.eh_frame:0000000000006C7E                 db    0
.eh_frame:0000000000006C7F                 db    0
.eh_frame:0000000000006C80                 db  20h
.eh_frame:0000000000006C81                 db 0E4h
.eh_frame:0000000000006C82                 db 0FFh
.eh_frame:0000000000006C83                 db 0FFh
.eh_frame:0000000000006C84                 db  0Eh
.eh_frame:0000000000006C85                 db    0
.eh_frame:0000000000006C86                 db    0
.eh_frame:0000000000006C87                 db    0
.eh_frame:0000000000006C88                 db    0
.eh_frame:0000000000006C89                 db    0
.eh_frame:0000000000006C8A                 db    0
.eh_frame:0000000000006C8B                 db    0
.eh_frame:0000000000006C8C __FRAME_END__   db    0
.eh_frame:0000000000006C8D                 db    0
.eh_frame:0000000000006C8E                 db    0
.eh_frame:0000000000006C8F                 db    0
.eh_frame:0000000000006C8F _eh_frame       ends
.eh_frame:0000000000006C8F
.init_array:0000000000207B10 ; ELF Initialization Function Table
.init_array:0000000000207B10 ; ===========================================================================
.init_array:0000000000207B10
.init_array:0000000000207B10 ; Segment type: Pure data
.init_array:0000000000207B10 ; Segment permissions: Read/Write
.init_array:0000000000207B10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B10                 assume cs:_init_array
.init_array:0000000000207B10                 ;org 207B10h
.init_array:0000000000207B10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B10
.fini_array:0000000000207B18 ; ELF Termination Function Table
.fini_array:0000000000207B18 ; ===========================================================================
.fini_array:0000000000207B18
.fini_array:0000000000207B18 ; Segment type: Pure data
.fini_array:0000000000207B18 ; Segment permissions: Read/Write
.fini_array:0000000000207B18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B18                 assume cs:_fini_array
.fini_array:0000000000207B18                 ;org 207B18h
.fini_array:0000000000207B18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B18
.data.rel.ro:0000000000207B20 ; ===========================================================================
.data.rel.ro:0000000000207B20
.data.rel.ro:0000000000207B20 ; Segment type: Pure data
.data.rel.ro:0000000000207B20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B20                 ;org 207B20h
.data.rel.ro:0000000000207B20 ; struct option longopts
.data.rel.ro:0000000000207B20 longopts        dq offset aLogical      ; name
.data.rel.ro:0000000000207B20                                         ; DATA XREF: main:loc_1830↑o
.data.rel.ro:0000000000207B20                 dd 0                    ; has_arg ; "logical"
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B20                 dq 0                    ; flag
.data.rel.ro:0000000000207B20                 dd 4Ch                  ; val
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B40                 dq offset aPhysical     ; "physical"
.data.rel.ro:0000000000207B48                 db    0
.data.rel.ro:0000000000207B49                 db    0
.data.rel.ro:0000000000207B4A                 db    0
.data.rel.ro:0000000000207B4B                 db    0
.data.rel.ro:0000000000207B4C                 db    0
.data.rel.ro:0000000000207B4D                 db    0
.data.rel.ro:0000000000207B4E                 db    0
.data.rel.ro:0000000000207B4F                 db    0
.data.rel.ro:0000000000207B50                 db    0
.data.rel.ro:0000000000207B51                 db    0
.data.rel.ro:0000000000207B52                 db    0
.data.rel.ro:0000000000207B53                 db    0
.data.rel.ro:0000000000207B54                 db    0
.data.rel.ro:0000000000207B55                 db    0
.data.rel.ro:0000000000207B56                 db    0
.data.rel.ro:0000000000207B57                 db    0
.data.rel.ro:0000000000207B58                 db  50h ; P
.data.rel.ro:0000000000207B59                 db    0
.data.rel.ro:0000000000207B5A                 db    0
.data.rel.ro:0000000000207B5B                 db    0
.data.rel.ro:0000000000207B5C                 db    0
.data.rel.ro:0000000000207B5D                 db    0
.data.rel.ro:0000000000207B5E                 db    0
.data.rel.ro:0000000000207B5F                 db    0
.data.rel.ro:0000000000207B60                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207B68                 db    0
.data.rel.ro:0000000000207B69                 db    0
.data.rel.ro:0000000000207B6A                 db    0
.data.rel.ro:0000000000207B6B                 db    0
.data.rel.ro:0000000000207B6C                 db    0
.data.rel.ro:0000000000207B6D                 db    0
.data.rel.ro:0000000000207B6E                 db    0
.data.rel.ro:0000000000207B6F                 db    0
.data.rel.ro:0000000000207B70                 db    0
.data.rel.ro:0000000000207B71                 db    0
.data.rel.ro:0000000000207B72                 db    0
.data.rel.ro:0000000000207B73                 db    0
.data.rel.ro:0000000000207B74                 db    0
.data.rel.ro:0000000000207B75                 db    0
.data.rel.ro:0000000000207B76                 db    0
.data.rel.ro:0000000000207B77                 db    0
.data.rel.ro:0000000000207B78                 db  7Eh ; ~
.data.rel.ro:0000000000207B79                 db 0FFh
.data.rel.ro:0000000000207B7A                 db 0FFh
.data.rel.ro:0000000000207B7B                 db 0FFh
.data.rel.ro:0000000000207B7C                 db    0
.data.rel.ro:0000000000207B7D                 db    0
.data.rel.ro:0000000000207B7E                 db    0
.data.rel.ro:0000000000207B7F                 db    0
.data.rel.ro:0000000000207B80                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207B88                 db    0
.data.rel.ro:0000000000207B89                 db    0
.data.rel.ro:0000000000207B8A                 db    0
.data.rel.ro:0000000000207B8B                 db    0
.data.rel.ro:0000000000207B8C                 db    0
.data.rel.ro:0000000000207B8D                 db    0
.data.rel.ro:0000000000207B8E                 db    0
.data.rel.ro:0000000000207B8F                 db    0
.data.rel.ro:0000000000207B90                 db    0
.data.rel.ro:0000000000207B91                 db    0
.data.rel.ro:0000000000207B92                 db    0
.data.rel.ro:0000000000207B93                 db    0
.data.rel.ro:0000000000207B94                 db    0
.data.rel.ro:0000000000207B95                 db    0
.data.rel.ro:0000000000207B96                 db    0
.data.rel.ro:0000000000207B97                 db    0
.data.rel.ro:0000000000207B98                 db  7Dh ; }
.data.rel.ro:0000000000207B99                 db 0FFh
.data.rel.ro:0000000000207B9A                 db 0FFh
.data.rel.ro:0000000000207B9B                 db 0FFh
.data.rel.ro:0000000000207B9C                 db    0
.data.rel.ro:0000000000207B9D                 db    0
.data.rel.ro:0000000000207B9E                 db    0
.data.rel.ro:0000000000207B9F                 db    0
.data.rel.ro:0000000000207BA0                 db    0
.data.rel.ro:0000000000207BA1                 db    0
.data.rel.ro:0000000000207BA2                 db    0
.data.rel.ro:0000000000207BA3                 db    0
.data.rel.ro:0000000000207BA4                 db    0
.data.rel.ro:0000000000207BA5                 db    0
.data.rel.ro:0000000000207BA6                 db    0
.data.rel.ro:0000000000207BA7                 db    0
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db    0
.data.rel.ro:0000000000207BB9                 db    0
.data.rel.ro:0000000000207BBA                 db    0
.data.rel.ro:0000000000207BBB                 db    0
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 public quoting_style_args
.data.rel.ro:0000000000207BC0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207BC8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207BD0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207BD8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207BE0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207BE8                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207BF0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207BF8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C08                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C10                 db    0
.data.rel.ro:0000000000207C11                 db    0
.data.rel.ro:0000000000207C12                 db    0
.data.rel.ro:0000000000207C13                 db    0
.data.rel.ro:0000000000207C14                 db    0
.data.rel.ro:0000000000207C15                 db    0
.data.rel.ro:0000000000207C16                 db    0
.data.rel.ro:0000000000207C17                 db    0
.data.rel.ro:0000000000207C17 _data_rel_ro    ends
.data.rel.ro:0000000000207C17
LOAD:0000000000207C18 ; ELF Dynamic Information
LOAD:0000000000207C18 ; ===========================================================================
LOAD:0000000000207C18
LOAD:0000000000207C18 ; Segment type: Pure data
LOAD:0000000000207C18 ; Segment permissions: Read/Write
LOAD:0000000000207C18 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C18                 assume cs:LOAD
LOAD:0000000000207C18                 ;org 207C18h
LOAD:0000000000207C18 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C18                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C18                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C28                 Elf64_Dyn <0Ch, 1458h>  ; DT_INIT
LOAD:0000000000207C38                 Elf64_Dyn <0Dh, 50B0h>  ; DT_FINI
LOAD:0000000000207C48                 Elf64_Dyn <19h, 207B10h> ; DT_INIT_ARRAY
LOAD:0000000000207C58                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207C68                 Elf64_Dyn <1Ah, 207B18h> ; DT_FINI_ARRAY
LOAD:0000000000207C78                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207C88                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207C98                 Elf64_Dyn <5, 8F0h>     ; DT_STRTAB
LOAD:0000000000207CA8                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000207CB8                 Elf64_Dyn <0Ah, 2D2h>   ; DT_STRSZ
LOAD:0000000000207CC8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207CD8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207CE8                 Elf64_Dyn <3, 207E08h>  ; DT_PLTGOT
LOAD:0000000000207CF8                 Elf64_Dyn <2, 4E0h>     ; DT_PLTRELSZ
LOAD:0000000000207D08                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D18                 Elf64_Dyn <17h, 0F78h>  ; DT_JMPREL
LOAD:0000000000207D28                 Elf64_Dyn <7, 0CA8h>    ; DT_RELA
LOAD:0000000000207D38                 Elf64_Dyn <8, 2D0h>     ; DT_RELASZ
LOAD:0000000000207D48                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D58                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207D68                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207D78                 Elf64_Dyn <6FFFFFFEh, 0C48h> ; DT_VERNEED
LOAD:0000000000207D88                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207D98                 Elf64_Dyn <6FFFFFF0h, 0BC2h> ; DT_VERSYM
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFF9h, 14h> ; DT_RELACOUNT
LOAD:0000000000207DB8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207DC8                 db    0
LOAD:0000000000207DC9                 db    0
LOAD:0000000000207DCA                 db    0
LOAD:0000000000207DCB                 db    0
LOAD:0000000000207DCC                 db    0
LOAD:0000000000207DCD                 db    0
LOAD:0000000000207DCE                 db    0
LOAD:0000000000207DCF                 db    0
LOAD:0000000000207DD0                 db    0
LOAD:0000000000207DD1                 db    0
LOAD:0000000000207DD2                 db    0
LOAD:0000000000207DD3                 db    0
LOAD:0000000000207DD4                 db    0
LOAD:0000000000207DD5                 db    0
LOAD:0000000000207DD6                 db    0
LOAD:0000000000207DD7                 db    0
LOAD:0000000000207DD8                 db    0
LOAD:0000000000207DD9                 db    0
LOAD:0000000000207DDA                 db    0
LOAD:0000000000207DDB                 db    0
LOAD:0000000000207DDC                 db    0
LOAD:0000000000207DDD                 db    0
LOAD:0000000000207DDE                 db    0
LOAD:0000000000207DDF                 db    0
LOAD:0000000000207DE0                 db    0
LOAD:0000000000207DE1                 db    0
LOAD:0000000000207DE2                 db    0
LOAD:0000000000207DE3                 db    0
LOAD:0000000000207DE4                 db    0
LOAD:0000000000207DE5                 db    0
LOAD:0000000000207DE6                 db    0
LOAD:0000000000207DE7                 db    0
LOAD:0000000000207DE8                 db    0
LOAD:0000000000207DE9                 db    0
LOAD:0000000000207DEA                 db    0
LOAD:0000000000207DEB                 db    0
LOAD:0000000000207DEC                 db    0
LOAD:0000000000207DED                 db    0
LOAD:0000000000207DEE                 db    0
LOAD:0000000000207DEF                 db    0
LOAD:0000000000207DF0                 db    0
LOAD:0000000000207DF1                 db    0
LOAD:0000000000207DF2                 db    0
LOAD:0000000000207DF3                 db    0
LOAD:0000000000207DF4                 db    0
LOAD:0000000000207DF5                 db    0
LOAD:0000000000207DF6                 db    0
LOAD:0000000000207DF7                 db    0
LOAD:0000000000207DF8                 db    0
LOAD:0000000000207DF9                 db    0
LOAD:0000000000207DFA                 db    0
LOAD:0000000000207DFB                 db    0
LOAD:0000000000207DFC                 db    0
LOAD:0000000000207DFD                 db    0
LOAD:0000000000207DFE                 db    0
LOAD:0000000000207DFF                 db    0
LOAD:0000000000207E00                 db    0
LOAD:0000000000207E01                 db    0
LOAD:0000000000207E02                 db    0
LOAD:0000000000207E03                 db    0
LOAD:0000000000207E04                 db    0
LOAD:0000000000207E05                 db    0
LOAD:0000000000207E06                 db    0
LOAD:0000000000207E07                 db    0
LOAD:0000000000207E07 LOAD            ends
LOAD:0000000000207E07
.got:0000000000207E08 ; ===========================================================================
.got:0000000000207E08
.got:0000000000207E08 ; Segment type: Pure data
.got:0000000000207E08 ; Segment permissions: Read/Write
.got:0000000000207E08 _got            segment qword public 'DATA' use64
.got:0000000000207E08                 assume cs:_got
.got:0000000000207E08                 ;org 207E08h
.got:0000000000207E08 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E10 qword_207E10    dq 0                    ; DATA XREF: sub_1470↑r
.got:0000000000207E18 qword_207E18    dq 0                    ; DATA XREF: sub_1470+6↑r
.got:0000000000207E20 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000207E28 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E30 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E38 __errno_location_ptr dq offset __errno_location
.got:0000000000207E38                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E40 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E48 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E50 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E58 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000207E60 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E68 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207E70 opendir_ptr     dq offset opendir       ; DATA XREF: _opendir↑r
.got:0000000000207E78 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207E78                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207E80 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207E88 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207E88                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207E90 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207E98 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:0000000000207EA0 chdir_ptr       dq offset chdir         ; DATA XREF: _chdir↑r
.got:0000000000207EA8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EA8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207EB0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EB8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EC0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207EC8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207ED0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207ED8 getcwd_ptr      dq offset getcwd        ; DATA XREF: _getcwd↑r
.got:0000000000207EE0 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:0000000000207EE8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207EF0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207EF0                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207EF8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F00 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:0000000000207F08 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F10 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F18 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000207F20 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:0000000000207F28 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F30 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F38 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F40 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000207F48 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F50 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:0000000000207F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F88 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207F90 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207F98 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207F98                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FA0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FA8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FB0 strstr_ptr      dq offset strstr        ; DATA XREF: _strstr↑r
.got:0000000000207FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FC8                                         ; DATA XREF: start+24↑r
.got:0000000000207FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FE0 _got            ends
.got:0000000000207FE0
LOAD:0000000000207FE8 ; ===========================================================================
LOAD:0000000000207FE8
LOAD:0000000000207FE8 ; Segment type: Pure data
LOAD:0000000000207FE8 ; Segment permissions: Read/Write
LOAD:0000000000207FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FE8                 assume cs:LOAD
LOAD:0000000000207FE8                 ;org 207FE8h
LOAD:0000000000207FE8                 align 20h
LOAD:0000000000207FE8 LOAD            ends
LOAD:0000000000207FE8
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010                 public Version
.data:0000000000208010 Version         dq offset a831          ; DATA XREF: main+B2↑r
.data:0000000000208010                                         ; "8.31"
.data:0000000000208018                 public exit_failure
.data:0000000000208018 ; int exit_failure
.data:0000000000208018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2692↑r
.data:0000000000208018                                         ; xalloc_die+17↑r
.data:000000000020801C                 align 20h
.data:0000000000208020                 public quote_quoting_options
.data:0000000000208020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208020                                         ; quote_mem↑o ...
.data:0000000000208021                 db    0
.data:0000000000208022                 db    0
.data:0000000000208023                 db    0
.data:0000000000208024                 db    0
.data:0000000000208025                 db    0
.data:0000000000208026                 db    0
.data:0000000000208027                 db    0
.data:0000000000208028                 db    0
.data:0000000000208029                 db    0
.data:000000000020802A                 db    0
.data:000000000020802B                 db    0
.data:000000000020802C                 db    0
.data:000000000020802D                 db    0
.data:000000000020802E                 db    0
.data:000000000020802F                 db    0
.data:0000000000208030                 db    0
.data:0000000000208031                 db    0
.data:0000000000208032                 db    0
.data:0000000000208033                 db    0
.data:0000000000208034                 db    0
.data:0000000000208035                 db    0
.data:0000000000208036                 db    0
.data:0000000000208037                 db    0
.data:0000000000208038                 db    0
.data:0000000000208039                 db    0
.data:000000000020803A                 db    0
.data:000000000020803B                 db    0
.data:000000000020803C                 db    0
.data:000000000020803D                 db    0
.data:000000000020803E                 db    0
.data:000000000020803F                 db    0
.data:0000000000208040                 db    0
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208058                                         ; quotearg_n_options:loc_3B0D↑r ...
.data:000000000020805C                 align 20h
.data:0000000000208060 ; void *slotvec
.data:0000000000208060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208060                                         ; quotearg_n_options+76↑w ...
.data:0000000000208068                 align 10h
.data:0000000000208070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208070                                         ; quotearg_n_options+187↑r ...
.data:0000000000208078 off_208078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208078 _data           ends
.data:0000000000208078
.bss:0000000000208080 ; ===========================================================================
.bss:0000000000208080
.bss:0000000000208080 ; Segment type: Uninitialized
.bss:0000000000208080 ; Segment permissions: Read/Write
.bss:0000000000208080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000208080                 assume cs:_bss
.bss:0000000000208080                 ;org 208080h
.bss:0000000000208080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000208080                 public __bss_start ; weak
.bss:0000000000208080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000860↑o
.bss:0000000000208080                                         ; LOAD:00000000000008A8↑o ...
.bss:0000000000208080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000208080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000208080                                         ; _edata
.bss:0000000000208080                                         ; Copy of shared data
.bss:0000000000208088                 public stdout@@GLIBC_2_2_5
.bss:0000000000208088 ; FILE *stdout
.bss:0000000000208088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000848↑o
.bss:0000000000208088                                         ; main+AB↑r ...
.bss:0000000000208088                                         ; Alternative name is 'stdout'
.bss:0000000000208088                                         ; Copy of shared data
.bss:0000000000208090                 public optind@@GLIBC_2_2_5
.bss:0000000000208090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008D8↑o
.bss:0000000000208090                                         ; main:loc_18BB↑r
.bss:0000000000208090                                         ; Alternative name is 'optind'
.bss:0000000000208090                                         ; Copy of shared data
.bss:0000000000208094                 align 8
.bss:0000000000208098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000208098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000208098                                         ; DATA XREF: LOAD:0000000000000878↑o
.bss:0000000000208098                                         ; LOAD:0000000000000890↑o ...
.bss:0000000000208098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000208098                                         ; Copy of shared data
.bss:00000000002080A0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080A0 ; FILE *stderr
.bss:00000000002080A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008C0↑o
.bss:00000000002080A0                                         ; usage+3D↑r ...
.bss:00000000002080A0                                         ; Alternative name is 'stderr'
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080A8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080A9                 align 10h
.bss:00000000002080B0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002080B0                                         ; close_stdout+1B↑r
.bss:00000000002080B1                 align 8
.bss:00000000002080B8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002080B8                                         ; close_stdout+56↑r
.bss:00000000002080C0                 public program_name
.bss:00000000002080C0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002080C0                                         ; set_program_name:loc_272D↑w
.bss:00000000002080C8                 align 20h
.bss:00000000002080E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002080E0                                         ; quotearg_free+46↑o ...
.bss:00000000002080E1                 db    ? ;
.bss:00000000002080E2                 db    ? ;
.bss:00000000002080E3                 db    ? ;
.bss:00000000002080E4                 db    ? ;
.bss:00000000002080E5                 db    ? ;
.bss:00000000002080E6                 db    ? ;
.bss:00000000002080E7                 db    ? ;
.bss:00000000002080E8                 db    ? ;
.bss:00000000002080E9                 db    ? ;
.bss:00000000002080EA                 db    ? ;
.bss:00000000002080EB                 db    ? ;
.bss:00000000002080EC                 db    ? ;
.bss:00000000002080ED                 db    ? ;
.bss:00000000002080EE                 db    ? ;
.bss:00000000002080EF                 db    ? ;
.bss:00000000002080F0                 db    ? ;
.bss:00000000002080F1                 db    ? ;
.bss:00000000002080F2                 db    ? ;
.bss:00000000002080F3                 db    ? ;
.bss:00000000002080F4                 db    ? ;
.bss:00000000002080F5                 db    ? ;
.bss:00000000002080F6                 db    ? ;
.bss:00000000002080F7                 db    ? ;
.bss:00000000002080F8                 db    ? ;
.bss:00000000002080F9                 db    ? ;
.bss:00000000002080FA                 db    ? ;
.bss:00000000002080FB                 db    ? ;
.bss:00000000002080FC                 db    ? ;
.bss:00000000002080FD                 db    ? ;
.bss:00000000002080FE                 db    ? ;
.bss:00000000002080FF                 db    ? ;
.bss:0000000000208100                 db    ? ;
.bss:0000000000208101                 db    ? ;
.bss:0000000000208102                 db    ? ;
.bss:0000000000208103                 db    ? ;
.bss:0000000000208104                 db    ? ;
.bss:0000000000208105                 db    ? ;
.bss:0000000000208106                 db    ? ;
.bss:0000000000208107                 db    ? ;
.bss:0000000000208108                 db    ? ;
.bss:0000000000208109                 db    ? ;
.bss:000000000020810A                 db    ? ;
.bss:000000000020810B                 db    ? ;
.bss:000000000020810C                 db    ? ;
.bss:000000000020810D                 db    ? ;
.bss:000000000020810E                 db    ? ;
.bss:000000000020810F                 db    ? ;
.bss:0000000000208110                 db    ? ;
.bss:0000000000208111                 db    ? ;
.bss:0000000000208112                 db    ? ;
.bss:0000000000208113                 db    ? ;
.bss:0000000000208114                 db    ? ;
.bss:0000000000208115                 db    ? ;
.bss:0000000000208116                 db    ? ;
.bss:0000000000208117                 db    ? ;
.bss:0000000000208118                 db    ? ;
.bss:0000000000208119                 db    ? ;
.bss:000000000020811A                 db    ? ;
.bss:000000000020811B                 db    ? ;
.bss:000000000020811C                 db    ? ;
.bss:000000000020811D                 db    ? ;
.bss:000000000020811E                 db    ? ;
.bss:000000000020811F                 db    ? ;
.bss:0000000000208120                 db    ? ;
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128                 db    ? ;
.bss:0000000000208129                 db    ? ;
.bss:000000000020812A                 db    ? ;
.bss:000000000020812B                 db    ? ;
.bss:000000000020812C                 db    ? ;
.bss:000000000020812D                 db    ? ;
.bss:000000000020812E                 db    ? ;
.bss:000000000020812F                 db    ? ;
.bss:0000000000208130                 db    ? ;
.bss:0000000000208131                 db    ? ;
.bss:0000000000208132                 db    ? ;
.bss:0000000000208133                 db    ? ;
.bss:0000000000208134                 db    ? ;
.bss:0000000000208135                 db    ? ;
.bss:0000000000208136                 db    ? ;
.bss:0000000000208137                 db    ? ;
.bss:0000000000208138                 db    ? ;
.bss:0000000000208139                 db    ? ;
.bss:000000000020813A                 db    ? ;
.bss:000000000020813B                 db    ? ;
.bss:000000000020813C                 db    ? ;
.bss:000000000020813D                 db    ? ;
.bss:000000000020813E                 db    ? ;
.bss:000000000020813F                 db    ? ;
.bss:0000000000208140                 db    ? ;
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002081E0                                         ; get_quoting_style↑o ...
.bss:00000000002081F0 xmmword_2081F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002081F0                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208200 xmmword_208200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208200                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208210 qword_208210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208210                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208210 _bss            ends
.bss:0000000000208210
.prgend:0000000000208218 ; ===========================================================================
.prgend:0000000000208218
.prgend:0000000000208218 ; Segment type: Zero-length
.prgend:0000000000208218 _prgend         segment byte public '' use64
.prgend:0000000000208218 _end            label byte
.prgend:0000000000208218 _prgend         ends
.prgend:0000000000208218
extern:0000000000208220 ; ===========================================================================
extern:0000000000208220
extern:0000000000208220 ; Segment type: Externs
extern:0000000000208220 ; extern
extern:0000000000208220 ; char *getenv(const char *name)
extern:0000000000208220                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000208220                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000208228 ; void free(void *ptr)
extern:0000000000208228                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208228                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208230 ; void __noreturn abort(void)
extern:0000000000208230                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208230                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208238 ; int *_errno_location(void)
extern:0000000000208238                 extrn __errno_location:near
extern:0000000000208238                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208238                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208240 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208240                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208240                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208248 ; void __noreturn exit(int status)
extern:0000000000208248                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208248                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208250 ; size_t _fpending(FILE *fp)
extern:0000000000208250                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208250                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208258 ; int puts(const char *s)
extern:0000000000208258                 extrn puts:near         ; CODE XREF: _puts↑j
extern:0000000000208258                                         ; DATA XREF: .got:puts_ptr↑o
extern:0000000000208260 ; char *textdomain(const char *domainname)
extern:0000000000208260                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000208260                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000208268 ; int fclose(FILE *stream)
extern:0000000000208268                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000208268                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000208270 ; DIR *opendir(const char *name)
extern:0000000000208270                 extrn opendir:near      ; CODE XREF: _opendir↑j
extern:0000000000208270                                         ; DATA XREF: .got:opendir_ptr↑o
extern:0000000000208278 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000208278                 extrn bindtextdomain:near
extern:0000000000208278                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000208278                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000208280 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000208280                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000208280                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000208288 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000208288                 extrn __ctype_get_mb_cur_max:near
extern:0000000000208288                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000208288                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000208290 ; size_t strlen(const char *s)
extern:0000000000208290                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000208290                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000208298 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000208298                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:0000000000208298                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:00000000002082A0 ; int chdir(const char *path)
extern:00000000002082A0                 extrn chdir:near        ; CODE XREF: _chdir↑j
extern:00000000002082A0                                         ; DATA XREF: .got:chdir_ptr↑o
extern:00000000002082A8                 extrn __stack_chk_fail:near
extern:00000000002082A8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082A8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082B0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082B0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002082B8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002082B8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002082B8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002082C0 ; char *strrchr(const char *s, int c)
extern:00000000002082C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002082C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002082C8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002082C8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002082C8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002082D0 ; void *memset(void *s, int c, size_t n)
extern:00000000002082D0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002082D0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002082D8 ; char *getcwd(char *buf, size_t size)
extern:00000000002082D8                 extrn getcwd:near       ; CODE XREF: _getcwd↑j
extern:00000000002082D8                                         ; DATA XREF: .got:getcwd_ptr↑o
extern:00000000002082E0 ; int closedir(DIR *dirp)
extern:00000000002082E0                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:00000000002082E0                                         ; DATA XREF: .got:closedir_ptr↑o
extern:00000000002082E8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002082E8                 extrn __libc_start_main:near
extern:00000000002082E8                                         ; CODE XREF: start+24↑p
extern:00000000002082E8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002082F0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002082F0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002082F0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002082F8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002082F8                 extrn fputs_unlocked:near
extern:00000000002082F8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002082F8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208300 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208300                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208300                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208308 ; int dirfd(DIR *dirp)
extern:0000000000208308                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:0000000000208308                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:0000000000208310 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208310                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208310                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208318 ; int fileno(FILE *stream)
extern:0000000000208318                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208318                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208320 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000208320                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:0000000000208320                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:0000000000208328 ; struct dirent *readdir(DIR *dirp)
extern:0000000000208328                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:0000000000208328                                         ; DATA XREF: .got:readdir_ptr↑o
extern:0000000000208330 ; void *malloc(size_t size)
extern:0000000000208330                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208330                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208338 ; int fflush(FILE *stream)
extern:0000000000208338                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208338                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208340 ; char *nl_langinfo(nl_item item)
extern:0000000000208340                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208340                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208348 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:0000000000208348                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:0000000000208348                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:0000000000208350 ; int _freading(FILE *fp)
extern:0000000000208350                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208350                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208358 ; int fchdir(int fd)
extern:0000000000208358                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:0000000000208358                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:0000000000208360 ; void *realloc(void *ptr, size_t size)
extern:0000000000208360                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208360                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208368 ; char *setlocale(int category, const char *locale)
extern:0000000000208368                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208368                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208370                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208370                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208378 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208378                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208378                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000208380 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000208380                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000208380                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000208388 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000208388                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000208388                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000208390 ; void __noreturn exit(int status)
extern:0000000000208390                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000208390                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000208398 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000208398                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000208398                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002083A0                 extrn __fprintf_chk:near
extern:00000000002083A0                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002083A0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002083A8 ; int mbsinit(const mbstate_t *ps)
extern:00000000002083A8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002083A8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002083B0 ; int iswprint(wint_t wc)
extern:00000000002083B0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002083B0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002083B8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002083B8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002083B8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002083B8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002083C0 ; char *strstr(const char *haystack, const char *needle)
extern:00000000002083C0                 extrn strstr:near       ; CODE XREF: _strstr↑j
extern:00000000002083C0                                         ; DATA XREF: .got:strstr_ptr↑o
extern:00000000002083C8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002083C8                 extrn __ctype_b_loc:near
extern:00000000002083C8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002083C8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002083D0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002083D0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002083D8                 extrn __gmon_start__:near ; weak
extern:00000000002083D8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002083D8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002083E0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002083E0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002083E0
extern:00000000002083E0
extern:00000000002083E0                 end start
