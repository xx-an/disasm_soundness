LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 69157A66B9DE50C897AFC2C4C6AD3F6FB7BB19119459086D5D248772BBB9C2B7
LOAD:0000000000000000 ; Input MD5    : D2505552B29A8F2985F995633C4B9623
LOAD:0000000000000000 ; Input CRC32  : 95C16729
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/pinky
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'pinky.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'canon-host.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'imaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'readutmp.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2A658h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7AA0h                ; Size in file image
LOAD:00000000000000D8                 dq 7AA0h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 590h                 ; Size in file image
LOAD:0000000000000110                 dq 7C8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7BD8h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207BD8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 6BA8h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 6BA8h                ; Physical address
LOAD:00000000000001B0                 dq 284h                 ; Size in file image
LOAD:00000000000001B8                 dq 284h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B10h              ; Physical address
LOAD:0000000000000220                 dq 4F0h                 ; Size in file image
LOAD:0000000000000228                 dq 4F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0A4h, 0BEh, 56h, 3Dh, 5Eh, 8Dh, 0BDh, 0B6h, 0, 6Ah ; Desc
LOAD:0000000000000284                 db 2Dh, 0EEh, 46h, 0B9h, 0A3h, 76h, 0CBh, 16h, 0A8h, 64h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 44h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 44h, 45h, 4Ah
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aCtypeToupperLo - offset byte_9E0, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F0                            offset dword_0, 0>
LOAD:0000000000000308                 Elf64_Sym <offset aUtmpxname - offset byte_9E0, 12h, 0, 0, \ ; "utmpxname"
LOAD:0000000000000308                            offset dword_0, 0>
LOAD:0000000000000320                 Elf64_Sym <offset aFree - offset byte_9E0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000320                            0>
LOAD:0000000000000338                 Elf64_Sym <offset aLocaltime - offset byte_9E0, 12h, 0, 0, \ ; "localtime"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aAbort - offset byte_9E0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000350                            0>
LOAD:0000000000000368                 Elf64_Sym <offset aErrnoLocation - offset byte_9E0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aStrncpy - offset byte_9E0, 12h, 0, 0, \ ; "strncpy"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aStrncmp - offset byte_9E0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aItmDeregistert - offset byte_9E0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aExit - offset byte_9E0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003C8                            0>
LOAD:00000000000003E0                 Elf64_Sym <offset aFpending - offset byte_9E0, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aFreadUnlocked - offset byte_9E0, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_9E0, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aEndutxent - offset byte_9E0, 12h, 0, 0, \ ; "endutxent"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aFclose - offset byte_9E0, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aBindtextdomain - offset byte_9E0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aStpcpy - offset byte_9E0, 12h, 0, 0, \ ; "stpcpy"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aDcgettext - offset byte_9E0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_9E0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aStrlen - offset byte_9E0, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aStackChkFail - offset byte_9E0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aGetoptLong - offset byte_9E0, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aMbrtowc - offset byte_9E0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aStrchr - offset byte_9E0, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aGaiStrerror - offset byte_9E0, 12h, 0, 0, \ ; "gai_strerror"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aOverflow - offset byte_9E0, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aStrrchr - offset byte_9E0, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aLseek - offset byte_9E0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000578                            0>
LOAD:0000000000000590                 Elf64_Sym <offset aMemset - offset byte_9E0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aLibcStartMain - offset byte_9E0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aMemcmp - offset byte_9E0, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aFputsUnlocked - offset byte_9E0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aCalloc - offset byte_9E0, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aGetpwnam - offset byte_9E0, 12h, 0, 0, \ ; "getpwnam"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aSetutxent - offset byte_9E0, 12h, 0, 0, \ ; "setutxent"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aGmonStart - offset byte_9E0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aMemcpy - offset byte_9E0, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aKill - offset byte_9E0, 12h, 0, 0, offset dword_0, \ ; "kill"
LOAD:0000000000000668                            0>
LOAD:0000000000000680                 Elf64_Sym <offset aStrftime+4 - offset byte_9E0, 12h, 0, 0, \ ; "time"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aFileno - offset byte_9E0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aXstat - offset byte_9E0, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:00000000000006B0                            0>
LOAD:00000000000006C8                 Elf64_Sym <offset aMalloc - offset byte_9E0, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aFflush - offset byte_9E0, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aNlLanginfo - offset byte_9E0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aFreading - offset byte_9E0, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aFwriteUnlocked - offset byte_9E0, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aRealloc - offset byte_9E0, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aSetlocale - offset byte_9E0, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aPrintfChk - offset byte_9E0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aStrftime - offset byte_9E0, 12h, 0, 0, \ ; "strftime"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aGetutxent - offset byte_9E0, 12h, 0, 0, \ ; "getutxent"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aGaiStrerror+7 - offset byte_9E0, 12h, 0, 0, \ ; "error"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aFseeko - offset byte_9E0, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aFopen - offset byte_9E0, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000007E8                            0>
LOAD:0000000000000800                 Elf64_Sym <offset aCxaAtexit - offset byte_9E0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000800                            offset dword_0, 0>
LOAD:0000000000000818                 Elf64_Sym <offset aExit+1 - offset byte_9E0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000818                            offset dword_0, 0>
LOAD:0000000000000830                 Elf64_Sym <offset aFwrite - offset byte_9E0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000830                            offset dword_0, 0>
LOAD:0000000000000848                 Elf64_Sym <offset aFprintfChk - offset byte_9E0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000848                            offset dword_0, 0>
LOAD:0000000000000860                 Elf64_Sym <offset aItmRegistertmc - offset byte_9E0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000860                            offset dword_0, 0>
LOAD:0000000000000878                 Elf64_Sym <offset aGetaddrinfo - offset byte_9E0, 12h, 0, 0, \ ; "getaddrinfo"
LOAD:0000000000000878                            offset dword_0, 0>
LOAD:0000000000000890                 Elf64_Sym <offset aStrdup - offset byte_9E0, 12h, 0, 0, \ ; "strdup"
LOAD:0000000000000890                            offset dword_0, 0>
LOAD:00000000000008A8                 Elf64_Sym <offset aMbsinit - offset byte_9E0, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000008A8                            offset dword_0, 0>
LOAD:00000000000008C0                 Elf64_Sym <offset aIswprint - offset byte_9E0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000008C0                            offset dword_0, 0>
LOAD:00000000000008D8                 Elf64_Sym <offset aCxaFinalize - offset byte_9E0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000008D8                            offset dword_0, 0>
LOAD:00000000000008F0                 Elf64_Sym <offset aCtypeBLoc - offset byte_9E0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000008F0                            offset dword_0, 0>
LOAD:0000000000000908                 Elf64_Sym <offset aFreeaddrinfo - offset byte_9E0, 12h, 0, 0, \ ; "freeaddrinfo"
LOAD:0000000000000908                            offset dword_0, 0>
LOAD:0000000000000920                 Elf64_Sym <offset aSprintfChk - offset byte_9E0, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000920                            offset dword_0, 0>
LOAD:0000000000000938                 Elf64_Sym <offset aStdout - offset byte_9E0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000938                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000950                 Elf64_Sym <offset aProgname - offset byte_9E0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000950                            offset __bss_start, 8>
LOAD:0000000000000968                 Elf64_Sym <offset aProgramInvocat - offset byte_9E0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000968                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000980                 Elf64_Sym <offset aPrognameFull - offset byte_9E0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000980                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000998                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_9E0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000998                            offset __bss_start, 8>
LOAD:00000000000009B0                 Elf64_Sym <offset aStderr - offset byte_9E0, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000009B0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000009C8                 Elf64_Sym <offset aOptind - offset byte_9E0, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000009C8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009E0 ; ELF String Table
LOAD:00000000000009E0 byte_9E0        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000009E0                                         ; LOAD:0000000000000308↑o ...
LOAD:00000000000009E1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000DD0↓o
LOAD:00000000000009EB aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:00000000000009F2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000770↑o
LOAD:00000000000009FF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000A09 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000500↑o
LOAD:0000000000000A11 aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:0000000000000A17 aGaiStrerror    db 'gai_strerror',0     ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000A17                                         ; LOAD:00000000000007B8↑o
LOAD:0000000000000A24 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000398↑o
LOAD:0000000000000A2C aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000009C8↑o
LOAD:0000000000000A33 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000A3B aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000A45 aStrncpy        db 'strncpy',0          ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000A4D aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000A5E aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000008C0↑o
LOAD:0000000000000A67 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000A6F aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000A75 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:0000000000000A75                                         ; LOAD:0000000000000818↑o
LOAD:0000000000000A7B aKill           db 'kill',0             ; DATA XREF: LOAD:0000000000000668↑o
LOAD:0000000000000A80 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A80                                         ; DATA XREF: LOAD:0000000000000968↑o
LOAD:0000000000000A98 aStrdup         db 'strdup',0           ; DATA XREF: LOAD:0000000000000890↑o
LOAD:0000000000000A9F aStrftime       db 'strftime',0         ; DATA XREF: LOAD:0000000000000788↑o
LOAD:0000000000000A9F                                         ; LOAD:0000000000000680↑o
LOAD:0000000000000AA8 aSetutxent      db 'setutxent',0        ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000AB2 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000AB2                                         ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:0000000000000AC9 aGetpwnam       db 'getpwnam',0         ; DATA XREF: LOAD:0000000000000608↑o
LOAD:0000000000000AD2 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000AD9 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000AE0 aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:0000000000000AEF aGetaddrinfo    db 'getaddrinfo',0      ; DATA XREF: LOAD:0000000000000878↑o
LOAD:0000000000000AFB aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000B02 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000B13 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000B1A aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000B28 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000938↑o
LOAD:0000000000000B2F aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000B35 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000B3C aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000B43 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000B4A aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000008A8↑o
LOAD:0000000000000B52 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:0000000000000B5E aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000008F0↑o
LOAD:0000000000000B6C aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000B77 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000009B0↑o
LOAD:0000000000000B7E aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:0000000000000B8A aUtmpxname      db 'utmpxname',0        ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000B94 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000698↑o
LOAD:0000000000000B9B aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000BA2 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000BAD aLocaltime      db 'localtime',0        ; DATA XREF: LOAD:0000000000000338↑o
LOAD:0000000000000BB7 aEndutxent      db 'endutxent',0        ; DATA XREF: LOAD:0000000000000428↑o
LOAD:0000000000000BC1 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000518↑o
LOAD:0000000000000BC8 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000BC8                                         ; DATA XREF: LOAD:0000000000000998↑o
LOAD:0000000000000BE6 aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000BE6                                         ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000BFA aGetutxent      db 'getutxent',0        ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:0000000000000C04 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000008D8↑o
LOAD:0000000000000C13 aFreeaddrinfo   db 'freeaddrinfo',0     ; DATA XREF: LOAD:0000000000000908↑o
LOAD:0000000000000C20 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000920↑o
LOAD:0000000000000C2E aXstat          db '__xstat',0          ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:0000000000000C36 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000C36                                         ; LOAD:0000000000000410↑o
LOAD:0000000000000C45 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000728↑o
LOAD:0000000000000C55 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C55                                         ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000C67 aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:0000000000000470↑o
LOAD:0000000000000C6E aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:0000000000000C75 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000C80 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000C8F aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000C94 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000950↑o
LOAD:0000000000000C9F aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000980↑o
LOAD:0000000000000CAF aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000CBC aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000DE0↓o
LOAD:0000000000000CC8 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000DF0↓o
LOAD:0000000000000CD3 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000E00↓o
LOAD:0000000000000CDD aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000E10↓o
LOAD:0000000000000CE9 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000E20↓o
LOAD:0000000000000CF3 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000CF3                                         ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000D0F aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000638↑o
LOAD:0000000000000D1E aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000D1E                                         ; DATA XREF: LOAD:0000000000000860↑o
LOAD:0000000000000D38 ; ELF GNU Symbol Version Table
LOAD:0000000000000D38                 dw 0
LOAD:0000000000000D3A                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000D3C                 dw 3                    ; utmpxname@@GLIBC_2.2.5
LOAD:0000000000000D3E                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000D40                 dw 3                    ; localtime@@GLIBC_2.2.5
LOAD:0000000000000D42                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000D44                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000D46                 dw 3                    ; strncpy@@GLIBC_2.2.5
LOAD:0000000000000D48                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D4A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D4C                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D4E                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D50                 dw 3                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D52                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D54                 dw 3                    ; endutxent@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D5A                 dw 3                    ; stpcpy@@GLIBC_2.2.5
LOAD:0000000000000D5C                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D5E                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D60                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D62                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D64                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D66                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D68                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000D6A                 dw 3                    ; gai_strerror@@GLIBC_2.2.5
LOAD:0000000000000D6C                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000D6E                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000D70                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D72                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D74                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D76                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D78                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D7A                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D7C                 dw 3                    ; getpwnam@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 3                    ; setutxent@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D82                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D84                 dw 3                    ; kill@@GLIBC_2.2.5
LOAD:0000000000000D86                 dw 3                    ; time@@GLIBC_2.2.5
LOAD:0000000000000D88                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000D8A                 dw 3                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000D8C                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000D8E                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000D90                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000D92                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000D94                 dw 3                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D96                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000D98                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000D9A                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000D9C                 dw 3                    ; strftime@@GLIBC_2.2.5
LOAD:0000000000000D9E                 dw 3                    ; getutxent@@GLIBC_2.2.5
LOAD:0000000000000DA0                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000DA2                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000DA4                 dw 3                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000DA6                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000DA8                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000DAA                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000DAC                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000DAE                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000DB0                 dw 3                    ; getaddrinfo@@GLIBC_2.2.5
LOAD:0000000000000DB2                 dw 3                    ; strdup@@GLIBC_2.2.5
LOAD:0000000000000DB4                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000DB6                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000DB8                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000DBA                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000DBC                 dw 3                    ; freeaddrinfo@@GLIBC_2.2.5
LOAD:0000000000000DBE                 dw 6                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000DC0                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000DC2                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000DC4                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000DC6                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000DC8                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000DCA                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000DCC                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000DCE                 dw 0
LOAD:0000000000000DD0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000DD0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_9E0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000DE0                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_9E0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000DE0                                10h>
LOAD:0000000000000DF0                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_9E0, \ ; "GLIBC_2.14"
LOAD:0000000000000DF0                                10h>
LOAD:0000000000000E00                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_9E0, \ ; "GLIBC_2.4"
LOAD:0000000000000E00                                10h>
LOAD:0000000000000E10                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_9E0, \ ; "GLIBC_2.2.5"
LOAD:0000000000000E10                                10h>
LOAD:0000000000000E20                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_9E0, 0> ; "GLIBC_2.3"
LOAD:0000000000000E30 ; ELF RELA Relocation Table
LOAD:0000000000000E30                 Elf64_Rela <207B10h, 8, 20C0h> ; R_X86_64_RELATIVE +20C0h
LOAD:0000000000000E48                 Elf64_Rela <207B18h, 8, 2080h> ; R_X86_64_RELATIVE +2080h
LOAD:0000000000000E60                 Elf64_Rela <207B20h, 8, 5E5Dh> ; R_X86_64_RELATIVE +5E5Dh
LOAD:0000000000000E78                 Elf64_Rela <207B40h, 8, 5E62h> ; R_X86_64_RELATIVE +5E62h
LOAD:0000000000000E90                 Elf64_Rela <207B80h, 8, 6369h> ; R_X86_64_RELATIVE +6369h
LOAD:0000000000000EA8                 Elf64_Rela <207B88h, 8, 6371h> ; R_X86_64_RELATIVE +6371h
LOAD:0000000000000EC0                 Elf64_Rela <207B90h, 8, 6377h> ; R_X86_64_RELATIVE +6377h
LOAD:0000000000000ED8                 Elf64_Rela <207B98h, 8, 6384h> ; R_X86_64_RELATIVE +6384h
LOAD:0000000000000EF0                 Elf64_Rela <207BA0h, 8, 6391h> ; R_X86_64_RELATIVE +6391h
LOAD:0000000000000F08                 Elf64_Rela <207BA8h, 8, 63A5h> ; R_X86_64_RELATIVE +63A5h
LOAD:0000000000000F20                 Elf64_Rela <207BB0h, 8, 63A7h> ; R_X86_64_RELATIVE +63A7h
LOAD:0000000000000F38                 Elf64_Rela <207BB8h, 8, 638Ah> ; R_X86_64_RELATIVE +638Ah
LOAD:0000000000000F50                 Elf64_Rela <207BC0h, 8, 5DCCh> ; R_X86_64_RELATIVE +5DCCh
LOAD:0000000000000F68                 Elf64_Rela <207BC8h, 8, 63AFh> ; R_X86_64_RELATIVE +63AFh
LOAD:0000000000000F80                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000F98                 Elf64_Rela <208018h, 8, 62ECh> ; R_X86_64_RELATIVE +62ECh
LOAD:0000000000000FB0                 Elf64_Rela <208080h, 8, 208090h> ; R_X86_64_RELATIVE +208090h
LOAD:0000000000000FC8                 Elf64_Rela <208098h, 8, 2081A0h> ; R_X86_64_RELATIVE +2081A0h
LOAD:0000000000000FE0                 Elf64_Rela <207FD0h, 900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000FF8                 Elf64_Rela <207FD8h, 1E00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001010                 Elf64_Rela <207FE0h, 2400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001028                 Elf64_Rela <207FE8h, 3B00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001040                 Elf64_Rela <207FF0h, 4000000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001058                 Elf64_Rela <2080A0h, 4500000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001070                 Elf64_Rela <2080A8h, 4400000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001088                 Elf64_Rela <2080B0h, 4A00000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000010A0                 Elf64_Rela <2080B8h, 4700000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000010B8                 Elf64_Rela <2080C0h, 4900000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000010D0 ; ELF JMPREL Relocation Table
LOAD:00000000000010D0                 Elf64_Rela <207DE0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:00000000000010E8                 Elf64_Rela <207DE8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT utmpxname
LOAD:0000000000001100                 Elf64_Rela <207DF0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001118                 Elf64_Rela <207DF8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT localtime
LOAD:0000000000001130                 Elf64_Rela <207E00h, 500000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001148                 Elf64_Rela <207E08h, 600000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001160                 Elf64_Rela <207E10h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strncpy
LOAD:0000000000001178                 Elf64_Rela <207E18h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001190                 Elf64_Rela <207E20h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000011A8                 Elf64_Rela <207E28h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000011C0                 Elf64_Rela <207E30h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:00000000000011D8                 Elf64_Rela <207E38h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000011F0                 Elf64_Rela <207E40h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT endutxent
LOAD:0000000000001208                 Elf64_Rela <207E48h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001220                 Elf64_Rela <207E50h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001238                 Elf64_Rela <207E58h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:0000000000001250                 Elf64_Rela <207E60h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001268                 Elf64_Rela <207E68h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001280                 Elf64_Rela <207E70h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001298                 Elf64_Rela <207E78h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000012B0                 Elf64_Rela <207E80h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000012C8                 Elf64_Rela <207E88h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000012E0                 Elf64_Rela <207E90h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000012F8                 Elf64_Rela <207E98h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT gai_strerror
LOAD:0000000000001310                 Elf64_Rela <207EA0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001328                 Elf64_Rela <207EA8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001340                 Elf64_Rela <207EB0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001358                 Elf64_Rela <207EB8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001370                 Elf64_Rela <207EC0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001388                 Elf64_Rela <207EC8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000013A0                 Elf64_Rela <207ED0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000013B8                 Elf64_Rela <207ED8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT getpwnam
LOAD:00000000000013D0                 Elf64_Rela <207EE0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT setutxent
LOAD:00000000000013E8                 Elf64_Rela <207EE8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001400                 Elf64_Rela <207EF0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT kill
LOAD:0000000000001418                 Elf64_Rela <207EF8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT time
LOAD:0000000000001430                 Elf64_Rela <207F00h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001448                 Elf64_Rela <207F08h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001460                 Elf64_Rela <207F10h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001478                 Elf64_Rela <207F18h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001490                 Elf64_Rela <207F20h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000014A8                 Elf64_Rela <207F28h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000014C0                 Elf64_Rela <207F30h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000014D8                 Elf64_Rela <207F38h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000014F0                 Elf64_Rela <207F40h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001508                 Elf64_Rela <207F48h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001520                 Elf64_Rela <207F50h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT strftime
LOAD:0000000000001538                 Elf64_Rela <207F58h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT getutxent
LOAD:0000000000001550                 Elf64_Rela <207F60h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001568                 Elf64_Rela <207F68h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001580                 Elf64_Rela <207F70h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001598                 Elf64_Rela <207F78h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000015B0                 Elf64_Rela <207F80h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000015C8                 Elf64_Rela <207F88h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000015E0                 Elf64_Rela <207F90h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000015F8                 Elf64_Rela <207F98h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT getaddrinfo
LOAD:0000000000001610                 Elf64_Rela <207FA0h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT strdup
LOAD:0000000000001628                 Elf64_Rela <207FA8h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001640                 Elf64_Rela <207FB0h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001658                 Elf64_Rela <207FB8h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001670                 Elf64_Rela <207FC0h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT freeaddrinfo
LOAD:0000000000001688                 Elf64_Rela <207FC8h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001688 LOAD            ends
LOAD:0000000000001688
.init:00000000000016A0 ; ===========================================================================
.init:00000000000016A0
.init:00000000000016A0 ; Segment type: Pure code
.init:00000000000016A0 ; Segment permissions: Read/Execute
.init:00000000000016A0 _init           segment dword public 'CODE' use64
.init:00000000000016A0                 assume cs:_init
.init:00000000000016A0                 ;org 16A0h
.init:00000000000016A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000016A0
.init:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.init:00000000000016A0
.init:00000000000016A0
.init:00000000000016A0                 public _init_proc
.init:00000000000016A0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000016A0                 sub     rsp, 8          ; _init
.init:00000000000016A4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000016AB                 test    rax, rax
.init:00000000000016AE                 jz      short loc_16B2
.init:00000000000016B0                 call    rax ; __gmon_start__
.init:00000000000016B2
.init:00000000000016B2 loc_16B2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000016B2                 add     rsp, 8
.init:00000000000016B6                 retn
.init:00000000000016B6 _init_proc      endp
.init:00000000000016B6
.init:00000000000016B6 _init           ends
.init:00000000000016B6
LOAD:00000000000016B7 ; ===========================================================================
LOAD:00000000000016B7
LOAD:00000000000016B7 ; Segment type: Pure code
LOAD:00000000000016B7 ; Segment permissions: Read/Execute
LOAD:00000000000016B7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000016B7                 assume cs:LOAD
LOAD:00000000000016B7                 ;org 16B7h
LOAD:00000000000016B7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016B7                 align 20h
LOAD:00000000000016B7 LOAD            ends
LOAD:00000000000016B7
.plt:00000000000016C0 ; ===========================================================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Segment type: Pure code
.plt:00000000000016C0 ; Segment permissions: Read/Execute
.plt:00000000000016C0 _plt            segment para public 'CODE' use64
.plt:00000000000016C0                 assume cs:_plt
.plt:00000000000016C0                 ;org 16C0h
.plt:00000000000016C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0
.plt:00000000000016C0 sub_16C0        proc near               ; CODE XREF: .plt:00000000000016DB↓j
.plt:00000000000016C0                                         ; .plt:00000000000016EB↓j ...
.plt:00000000000016C0 ; __unwind {
.plt:00000000000016C0                 push    cs:qword_207DD0
.plt:00000000000016C6                 jmp     cs:qword_207DD8
.plt:00000000000016C6 sub_16C0        endp
.plt:00000000000016C6
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016CC                 align 10h
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; const __int32_t **__ctype_toupper_loc(void)
.plt:00000000000016D0 ___ctype_toupper_loc proc near          ; CODE XREF: create_fullname+CA↓p
.plt:00000000000016D0                 jmp     cs:__ctype_toupper_loc_ptr
.plt:00000000000016D0 ___ctype_toupper_loc endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    0
.plt:00000000000016DB                 jmp     sub_16C0
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; int utmpxname(const char *file)
.plt:00000000000016E0 _utmpxname      proc near               ; CODE XREF: read_utmp+2C↓p
.plt:00000000000016E0                 jmp     cs:utmpxname_ptr
.plt:00000000000016E0 _utmpxname      endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    1
.plt:00000000000016EB                 jmp     sub_16C0
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; void free(void *ptr)
.plt:00000000000016F0 _free           proc near               ; CODE XREF: print_long_entry+D2↓p
.plt:00000000000016F0                                         ; print_long_entry+2B4↓p ...
.plt:00000000000016F0                 jmp     cs:free_ptr
.plt:00000000000016F0 _free           endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    2
.plt:00000000000016FB                 jmp     sub_16C0
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; struct tm *localtime(const time_t *timer)
.plt:0000000000001700 _localtime      proc near               ; CODE XREF: print_entry+1AA↓p
.plt:0000000000001700                 jmp     cs:localtime_ptr
.plt:0000000000001700 _localtime      endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    3
.plt:000000000000170B                 jmp     sub_16C0
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: noreturn thunk
.plt:0000000000001710
.plt:0000000000001710 ; void __noreturn abort(void)
.plt:0000000000001710 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001710                                         ; quotearg_buffer_restyled:def_3391↓p ...
.plt:0000000000001710                 jmp     cs:abort_ptr
.plt:0000000000001710 _abort          endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    4
.plt:000000000000171B                 jmp     sub_16C0
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int *__errno_location(void)
.plt:0000000000001720 ___errno_location proc near             ; CODE XREF: main+4DD↓p
.plt:0000000000001720                                         ; close_stdout+16↓p ...
.plt:0000000000001720                 jmp     cs:__errno_location_ptr
.plt:0000000000001720 ___errno_location endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    5
.plt:000000000000172B                 jmp     sub_16C0
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; char *strncpy(char *dest, const char *src, size_t n)
.plt:0000000000001730 _strncpy        proc near               ; CODE XREF: extract_trimmed_name+22↓p
.plt:0000000000001730                 jmp     cs:strncpy_ptr
.plt:0000000000001730 _strncpy        endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    6
.plt:000000000000173B                 jmp     sub_16C0
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001740 _strncmp        proc near               ; CODE XREF: main+31A↓p
.plt:0000000000001740                                         ; usage+24C↓p ...
.plt:0000000000001740                 jmp     cs:strncmp_ptr
.plt:0000000000001740 _strncmp        endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    7
.plt:000000000000174B                 jmp     sub_16C0
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: noreturn thunk
.plt:0000000000001750
.plt:0000000000001750 ; void __noreturn _exit(int status)
.plt:0000000000001750 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001750                 jmp     cs:_exit_ptr
.plt:0000000000001750 __exit          endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    8
.plt:000000000000175B                 jmp     sub_16C0
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; size_t __fpending(FILE *fp)
.plt:0000000000001760 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001760                 jmp     cs:__fpending_ptr
.plt:0000000000001760 ___fpending     endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    9
.plt:000000000000176B                 jmp     sub_16C0
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001770 _fread_unlocked proc near               ; CODE XREF: print_long_entry+29F↓p
.plt:0000000000001770                                         ; print_long_entry+367↓p
.plt:0000000000001770                 jmp     cs:fread_unlocked_ptr
.plt:0000000000001770 _fread_unlocked endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    0Ah
.plt:000000000000177B                 jmp     sub_16C0
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; char *textdomain(const char *domainname)
.plt:0000000000001780 _textdomain     proc near               ; CODE XREF: main+5D↓p
.plt:0000000000001780                 jmp     cs:textdomain_ptr
.plt:0000000000001780 _textdomain     endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    0Bh
.plt:000000000000178B                 jmp     sub_16C0
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; void endutxent(void)
.plt:0000000000001790 _endutxent      proc near               ; CODE XREF: read_utmp:loc_5A11↓p
.plt:0000000000001790                 jmp     cs:endutxent_ptr
.plt:0000000000001790 _endutxent      endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    0Ch
.plt:000000000000179B                 jmp     sub_16C0
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; int fclose(FILE *stream)
.plt:00000000000017A0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000017A0                                         ; rpl_fclose+6B↓j
.plt:00000000000017A0                 jmp     cs:fclose_ptr
.plt:00000000000017A0 _fclose         endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    0Dh
.plt:00000000000017AB                 jmp     sub_16C0
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000017B0 _bindtextdomain proc near               ; CODE XREF: main+51↓p
.plt:00000000000017B0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000017B0 _bindtextdomain endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    0Eh
.plt:00000000000017BB                 jmp     sub_16C0
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; char *stpcpy(char *dest, const char *src)
.plt:00000000000017C0 _stpcpy         proc near               ; CODE XREF: print_long_entry+21B↓p
.plt:00000000000017C0                                         ; print_long_entry+2E2↓p
.plt:00000000000017C0                 jmp     cs:stpcpy_ptr
.plt:00000000000017C0 _stpcpy         endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    0Fh
.plt:00000000000017CB                 jmp     sub_16C0
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000017D0 _dcgettext      proc near               ; CODE XREF: main+338↓p
.plt:00000000000017D0                                         ; main+36E↓p ...
.plt:00000000000017D0                 jmp     cs:dcgettext_ptr
.plt:00000000000017D0 _dcgettext      endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    10h
.plt:00000000000017DB                 jmp     sub_16C0
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000017E0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000017E0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000017E0 ___ctype_get_mb_cur_max endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    11h
.plt:00000000000017EB                 jmp     sub_16C0
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; size_t strlen(const char *s)
.plt:00000000000017F0 _strlen         proc near               ; CODE XREF: create_fullname+10↓p
.plt:00000000000017F0                                         ; create_fullname+3F↓p ...
.plt:00000000000017F0                 jmp     cs:strlen_ptr
.plt:00000000000017F0 _strlen         endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    12h
.plt:00000000000017FB                 jmp     sub_16C0
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: noreturn thunk
.plt:0000000000001800
.plt:0000000000001800 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1F82↓p
.plt:0000000000001800                                         ; print_long_entry:loc_25EF↓p ...
.plt:0000000000001800                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001800 ___stack_chk_fail endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    13h
.plt:000000000000180B                 jmp     sub_16C0
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001810 _getopt_long    proc near               ; CODE XREF: main+82↓p
.plt:0000000000001810                 jmp     cs:getopt_long_ptr
.plt:0000000000001810 _getopt_long    endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    14h
.plt:000000000000181B                 jmp     sub_16C0
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001820 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001820                 jmp     cs:mbrtowc_ptr
.plt:0000000000001820 _mbrtowc        endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    15h
.plt:000000000000182B                 jmp     sub_16C0
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; char *strchr(const char *s, int c)
.plt:0000000000001830 _strchr         proc near               ; CODE XREF: print_long_entry+9A↓p
.plt:0000000000001830                                         ; print_entry+103↓p ...
.plt:0000000000001830                 jmp     cs:strchr_ptr
.plt:0000000000001830 _strchr         endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    16h
.plt:000000000000183B                 jmp     sub_16C0
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; const char *gai_strerror(int ecode)
.plt:0000000000001840 _gai_strerror   proc near               ; CODE XREF: ch_strerror+6↓j
.plt:0000000000001840                 jmp     cs:gai_strerror_ptr
.plt:0000000000001840 _gai_strerror   endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    17h
.plt:000000000000184B                 jmp     sub_16C0
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001850 ___overflow     proc near               ; CODE XREF: main+4B8↓p
.plt:0000000000001850                                         ; print_long_entry+3C5↓p ...
.plt:0000000000001850                 jmp     cs:__overflow_ptr
.plt:0000000000001850 ___overflow     endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    18h
.plt:000000000000185B                 jmp     sub_16C0
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; char *strrchr(const char *s, int c)
.plt:0000000000001860 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001860                 jmp     cs:strrchr_ptr
.plt:0000000000001860 _strrchr        endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    19h
.plt:000000000000186B                 jmp     sub_16C0
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001870 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001870                                         ; rpl_fseeko+3B↓p
.plt:0000000000001870                 jmp     cs:lseek_ptr
.plt:0000000000001870 _lseek          endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    1Ah
.plt:000000000000187B                 jmp     sub_16C0
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001880 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001880                                         ; xzalloc+12↓j
.plt:0000000000001880                 jmp     cs:memset_ptr
.plt:0000000000001880 _memset         endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    1Bh
.plt:000000000000188B                 jmp     sub_16C0
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001890 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001890                 jmp     cs:memcmp_ptr
.plt:0000000000001890 _memcmp         endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    1Ch
.plt:000000000000189B                 jmp     sub_16C0
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000018A0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000018A0                                         ; usage+C2↓p ...
.plt:00000000000018A0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000018A0 _fputs_unlocked endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    1Dh
.plt:00000000000018AB                 jmp     sub_16C0
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000018B0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000018B0                 jmp     cs:calloc_ptr
.plt:00000000000018B0 _calloc         endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    1Eh
.plt:00000000000018BB                 jmp     sub_16C0
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; struct passwd *getpwnam(const char *name)
.plt:00000000000018C0 _getpwnam       proc near               ; CODE XREF: print_long_entry+23↓p
.plt:00000000000018C0                                         ; print_entry+E6↓p
.plt:00000000000018C0                 jmp     cs:getpwnam_ptr
.plt:00000000000018C0 _getpwnam       endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    1Fh
.plt:00000000000018CB                 jmp     sub_16C0
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; void setutxent(void)
.plt:00000000000018D0 _setutxent      proc near               ; CODE XREF: read_utmp+31↓p
.plt:00000000000018D0                 jmp     cs:setutxent_ptr
.plt:00000000000018D0 _setutxent      endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    20h ; ' '
.plt:00000000000018DB                 jmp     sub_16C0
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000018E0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000018E0                 jmp     cs:memcpy_ptr
.plt:00000000000018E0 _memcpy         endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    21h ; '!'
.plt:00000000000018EB                 jmp     sub_16C0
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; int kill(__pid_t pid, int sig)
.plt:00000000000018F0 _kill           proc near               ; CODE XREF: read_utmp+F7↓p
.plt:00000000000018F0                 jmp     cs:kill_ptr
.plt:00000000000018F0 _kill           endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    22h ; '"'
.plt:00000000000018FB                 jmp     sub_16C0
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; time_t time(time_t *timer)
.plt:0000000000001900 _time           proc near               ; CODE XREF: print_entry+437↓p
.plt:0000000000001900                 jmp     cs:time_ptr
.plt:0000000000001900 _time           endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    23h ; '#'
.plt:000000000000190B                 jmp     sub_16C0
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; int fileno(FILE *stream)
.plt:0000000000001910 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001910                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001910                 jmp     cs:fileno_ptr
.plt:0000000000001910 _fileno         endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    24h ; '$'
.plt:000000000000191B                 jmp     sub_16C0
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001920 ___xstat        proc near               ; CODE XREF: print_entry+74↓p
.plt:0000000000001920                 jmp     cs:__xstat_ptr
.plt:0000000000001920 ___xstat        endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    25h ; '%'
.plt:000000000000192B                 jmp     sub_16C0
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; void *malloc(size_t size)
.plt:0000000000001930 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001930                 jmp     cs:malloc_ptr
.plt:0000000000001930 _malloc         endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    26h ; '&'
.plt:000000000000193B                 jmp     sub_16C0
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; int fflush(FILE *stream)
.plt:0000000000001940 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001940                                         ; rpl_fflush+3B↓j
.plt:0000000000001940                 jmp     cs:fflush_ptr
.plt:0000000000001940 _fflush         endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    27h ; '''
.plt:000000000000194B                 jmp     sub_16C0
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; char *nl_langinfo(nl_item item)
.plt:0000000000001950 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001950                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001950 _nl_langinfo    endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    28h ; '('
.plt:000000000000195B                 jmp     sub_16C0
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; int __freading(FILE *fp)
.plt:0000000000001960 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001960                                         ; rpl_fflush+9↓p
.plt:0000000000001960                 jmp     cs:__freading_ptr
.plt:0000000000001960 ___freading     endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    29h ; ')'
.plt:000000000000196B                 jmp     sub_16C0
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001970 _fwrite_unlocked proc near              ; CODE XREF: print_long_entry+28A↓p
.plt:0000000000001970                                         ; print_long_entry+352↓p
.plt:0000000000001970                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001970 _fwrite_unlocked endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    2Ah ; '*'
.plt:000000000000197B                 jmp     sub_16C0
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001980 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001980                 jmp     cs:realloc_ptr
.plt:0000000000001980 _realloc        endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    2Bh ; '+'
.plt:000000000000198B                 jmp     sub_16C0
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; char *setlocale(int category, const char *locale)
.plt:0000000000001990 _setlocale      proc near               ; CODE XREF: main+3E↓p
.plt:0000000000001990                                         ; usage+233↓p ...
.plt:0000000000001990                 jmp     cs:setlocale_ptr
.plt:0000000000001990 _setlocale      endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    2Ch ; ','
.plt:000000000000199B                 jmp     sub_16C0
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ___printf_chk   proc near               ; CODE XREF: main+34E↓p
.plt:00000000000019A0                                         ; main+384↓p ...
.plt:00000000000019A0                 jmp     cs:__printf_chk_ptr
.plt:00000000000019A0 ___printf_chk   endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    2Dh ; '-'
.plt:00000000000019AB                 jmp     sub_16C0
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
.plt:00000000000019B0 _strftime       proc near               ; CODE XREF: print_entry+1CE↓p
.plt:00000000000019B0                 jmp     cs:strftime_ptr
.plt:00000000000019B0 _strftime       endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    2Eh ; '.'
.plt:00000000000019BB                 jmp     sub_16C0
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; struct utmpx *getutxent(void)
.plt:00000000000019C0 _getutxent      proc near               ; CODE XREF: read_utmp:loc_5996↓p
.plt:00000000000019C0                                         ; read_utmp+A4↓p
.plt:00000000000019C0                 jmp     cs:getutxent_ptr
.plt:00000000000019C0 _getutxent      endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    2Fh ; '/'
.plt:00000000000019CB                 jmp     sub_16C0
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000019D0 _error          proc near               ; CODE XREF: main+4A4↓p
.plt:00000000000019D0                                         ; main+4F5↓p ...
.plt:00000000000019D0                 jmp     cs:error_ptr
.plt:00000000000019D0 _error          endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    30h ; '0'
.plt:00000000000019DB                 jmp     sub_16C0
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000019E0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_581A↓j
.plt:00000000000019E0                 jmp     cs:fseeko_ptr
.plt:00000000000019E0 _fseeko         endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    31h ; '1'
.plt:00000000000019EB                 jmp     sub_16C0
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; FILE *fopen(const char *filename, const char *modes)
.plt:00000000000019F0 _fopen          proc near               ; CODE XREF: print_long_entry+240↓p
.plt:00000000000019F0                                         ; print_long_entry+304↓p
.plt:00000000000019F0                 jmp     cs:fopen_ptr
.plt:00000000000019F0 _fopen          endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    32h ; '2'
.plt:00000000000019FB                 jmp     sub_16C0
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001A00 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001A00                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001A00 ___cxa_atexit   endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    33h ; '3'
.plt:0000000000001A0B                 jmp     sub_16C0
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: noreturn thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; void __noreturn exit(int status)
.plt:0000000000001A10 _exit           proc near               ; CODE XREF: main+158↓p
.plt:0000000000001A10                                         ; usage+58↓p
.plt:0000000000001A10                 jmp     cs:exit_ptr
.plt:0000000000001A10 _exit           endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    34h ; '4'
.plt:0000000000001A1B                 jmp     sub_16C0
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001A20 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001A20                 jmp     cs:fwrite_ptr
.plt:0000000000001A20 _fwrite         endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    35h ; '5'
.plt:0000000000001A2B                 jmp     sub_16C0
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001A30                                         ; version_etc_arn+37↓p ...
.plt:0000000000001A30                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001A30 ___fprintf_chk  endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    36h ; '6'
.plt:0000000000001A3B                 jmp     sub_16C0
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int getaddrinfo(const char *name, const char *service, const struct addrinfo *req, struct addrinfo **pai)
.plt:0000000000001A40 _getaddrinfo    proc near               ; CODE XREF: canon_host_r+3C↓p
.plt:0000000000001A40                 jmp     cs:getaddrinfo_ptr
.plt:0000000000001A40 _getaddrinfo    endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    37h ; '7'
.plt:0000000000001A4B                 jmp     sub_16C0
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; char *strdup(const char *s)
.plt:0000000000001A50 _strdup         proc near               ; CODE XREF: canon_host_r+55↓p
.plt:0000000000001A50                 jmp     cs:strdup_ptr
.plt:0000000000001A50 _strdup         endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    38h ; '8'
.plt:0000000000001A5B                 jmp     sub_16C0
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001A60 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001A60                 jmp     cs:mbsinit_ptr
.plt:0000000000001A60 _mbsinit        endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    39h ; '9'
.plt:0000000000001A6B                 jmp     sub_16C0
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; int iswprint(wint_t wc)
.plt:0000000000001A70 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001A70                 jmp     cs:iswprint_ptr
.plt:0000000000001A70 _iswprint       endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    3Ah ; ':'
.plt:0000000000001A7B                 jmp     sub_16C0
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001A80 ___ctype_b_loc  proc near               ; CODE XREF: create_fullname+AF↓p
.plt:0000000000001A80                                         ; quotearg_buffer_restyled+513↓p
.plt:0000000000001A80                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001A80 ___ctype_b_loc  endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    3Bh ; ';'
.plt:0000000000001A8B                 jmp     sub_16C0
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; void freeaddrinfo(struct addrinfo *ai)
.plt:0000000000001A90 _freeaddrinfo   proc near               ; CODE XREF: canon_host_r+70↓p
.plt:0000000000001A90                 jmp     cs:freeaddrinfo_ptr
.plt:0000000000001A90 _freeaddrinfo   endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    3Ch ; '<'
.plt:0000000000001A9B                 jmp     sub_16C0
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ___sprintf_chk  proc near               ; CODE XREF: print_entry+389↓p
.plt:0000000000001AA0                                         ; print_entry+4EC↓p
.plt:0000000000001AA0                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001AA0 ___sprintf_chk  endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    3Dh ; '='
.plt:0000000000001AAB                 jmp     sub_16C0
.plt:0000000000001AAB ; } // starts at 16C0
.plt:0000000000001AAB _plt            ends
.plt:0000000000001AAB
.plt.got:0000000000001AB0 ; ===========================================================================
.plt.got:0000000000001AB0
.plt.got:0000000000001AB0 ; Segment type: Pure code
.plt.got:0000000000001AB0 ; Segment permissions: Read/Execute
.plt.got:0000000000001AB0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001AB0                 assume cs:_plt_got
.plt.got:0000000000001AB0                 ;org 1AB0h
.plt.got:0000000000001AB0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001AB0
.plt.got:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001AB0
.plt.got:0000000000001AB0 ; Attributes: thunk
.plt.got:0000000000001AB0
.plt.got:0000000000001AB0 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001AB0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001AB0 ; __unwind {
.plt.got:0000000000001AB0                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001AB0 __cxa_finalize  endp
.plt.got:0000000000001AB0
.plt.got:0000000000001AB0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001AB6                 align 8
.plt.got:0000000000001AB6 ; } // starts at 1AB0
.plt.got:0000000000001AB6 _plt_got        ends
.plt.got:0000000000001AB6
LOAD:0000000000001AB8 ; ===========================================================================
LOAD:0000000000001AB8
LOAD:0000000000001AB8 ; Segment type: Pure code
LOAD:0000000000001AB8 ; Segment permissions: Read/Execute
LOAD:0000000000001AB8 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001AB8                 assume cs:LOAD
LOAD:0000000000001AB8                 ;org 1AB8h
LOAD:0000000000001AB8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001AB8                 align 20h
LOAD:0000000000001AB8 LOAD            ends
LOAD:0000000000001AB8
.text:0000000000001AC0 ; ===========================================================================
.text:0000000000001AC0
.text:0000000000001AC0 ; Segment type: Pure code
.text:0000000000001AC0 ; Segment permissions: Read/Execute
.text:0000000000001AC0 _text           segment para public 'CODE' use64
.text:0000000000001AC0                 assume cs:_text
.text:0000000000001AC0                 ;org 1AC0h
.text:0000000000001AC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001AC0
.text:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AC0
.text:0000000000001AC0
.text:0000000000001AC0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001AC0                 public main
.text:0000000000001AC0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001AC0
.text:0000000000001AC0 var_50          = qword ptr -50h
.text:0000000000001AC0 var_48          = qword ptr -48h
.text:0000000000001AC0 var_40          = qword ptr -40h
.text:0000000000001AC0
.text:0000000000001AC0 ; __unwind {
.text:0000000000001AC0                 push    r15
.text:0000000000001AC2                 push    r14
.text:0000000000001AC4                 push    r13
.text:0000000000001AC6                 push    r12
.text:0000000000001AC8                 lea     r12, longopts
.text:0000000000001ACF                 push    rbp
.text:0000000000001AD0                 push    rbx
.text:0000000000001AD1                 mov     ebp, edi
.text:0000000000001AD3                 mov     rbx, rsi
.text:0000000000001AD6                 sub     rsp, 28h
.text:0000000000001ADA                 mov     rdi, [rsi]
.text:0000000000001ADD                 mov     rax, fs:28h
.text:0000000000001AE6                 mov     [rsp+58h+var_40], rax
.text:0000000000001AEB                 xor     eax, eax
.text:0000000000001AED                 call    set_program_name
.text:0000000000001AF2                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001AF9                 mov     edi, 6          ; category
.text:0000000000001AFE                 call    _setlocale
.text:0000000000001B03                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001B0A                 lea     rdi, domainname ; "coreutils"
.text:0000000000001B11                 call    _bindtextdomain
.text:0000000000001B16                 lea     rdi, domainname ; "coreutils"
.text:0000000000001B1D                 call    _textdomain
.text:0000000000001B22                 lea     rdi, close_stdout
.text:0000000000001B29                 call    atexit
.text:0000000000001B2E                 xchg    ax, ax
.text:0000000000001B30
.text:0000000000001B30 loc_1B30:                               ; CODE XREF: main+BF↓j
.text:0000000000001B30                                         ; main+EC↓j ...
.text:0000000000001B30                 lea     rdx, shortopts  ; "sfwiqbhlp"
.text:0000000000001B37                 xor     r8d, r8d        ; longind
.text:0000000000001B3A                 mov     rcx, r12        ; longopts
.text:0000000000001B3D                 mov     rsi, rbx        ; argv
.text:0000000000001B40                 mov     edi, ebp        ; argc
.text:0000000000001B42                 call    _getopt_long
.text:0000000000001B47                 cmp     eax, 0FFFFFFFFh
.text:0000000000001B4A                 jz      loc_1C94
.text:0000000000001B50                 cmp     eax, 69h ; 'i'
.text:0000000000001B53                 jz      loc_1C20
.text:0000000000001B59                 jle     short loc_1B88
.text:0000000000001B5B                 cmp     eax, 71h ; 'q'
.text:0000000000001B5E                 jz      loc_1C48
.text:0000000000001B64                 jg      short loc_1BB0
.text:0000000000001B66                 cmp     eax, 6Ch ; 'l'
.text:0000000000001B69                 jz      loc_1C38
.text:0000000000001B6F                 cmp     eax, 70h ; 'p'
.text:0000000000001B72                 jnz     loc_1F69
.text:0000000000001B78                 mov     cs:include_plan, 0
.text:0000000000001B7F                 jmp     short loc_1B30
.text:0000000000001B7F ; ---------------------------------------------------------------------------
.text:0000000000001B81                 align 8
.text:0000000000001B88
.text:0000000000001B88 loc_1B88:                               ; CODE XREF: main+99↑j
.text:0000000000001B88                 cmp     eax, 62h ; 'b'
.text:0000000000001B8B                 jz      loc_1C78
.text:0000000000001B91                 jle     short loc_1BD0
.text:0000000000001B93                 cmp     eax, 66h ; 'f'
.text:0000000000001B96                 jz      loc_1C68
.text:0000000000001B9C                 cmp     eax, 68h ; 'h'
.text:0000000000001B9F                 jnz     loc_1F69
.text:0000000000001BA5                 mov     cs:include_project, 0
.text:0000000000001BAC                 jmp     short loc_1B30
.text:0000000000001BAC ; ---------------------------------------------------------------------------
.text:0000000000001BAE                 align 10h
.text:0000000000001BB0
.text:0000000000001BB0 loc_1BB0:                               ; CODE XREF: main+A4↑j
.text:0000000000001BB0                 cmp     eax, 73h ; 's'
.text:0000000000001BB3                 jz      loc_1C88
.text:0000000000001BB9                 cmp     eax, 77h ; 'w'
.text:0000000000001BBC                 jnz     loc_1F69
.text:0000000000001BC2                 mov     cs:include_fullname, 0
.text:0000000000001BC9                 jmp     loc_1B30
.text:0000000000001BC9 ; ---------------------------------------------------------------------------
.text:0000000000001BCE                 align 10h
.text:0000000000001BD0
.text:0000000000001BD0 loc_1BD0:                               ; CODE XREF: main+D1↑j
.text:0000000000001BD0                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001BD5                 jnz     loc_1F3A
.text:0000000000001BDB                 lea     rax, aKavehGhazi ; "Kaveh Ghazi"
.text:0000000000001BE2                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BE9                 mov     rcx, cs:Version
.text:0000000000001BF0                 push    0
.text:0000000000001BF2                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001BF9                 lea     r8, aJosephArceneau ; "Joseph Arceneaux"
.text:0000000000001C00                 push    rax
.text:0000000000001C01                 lea     rdx, unk_5D8E
.text:0000000000001C08                 lea     rsi, aPinky     ; "pinky"
.text:0000000000001C0F                 xor     eax, eax
.text:0000000000001C11                 call    version_etc
.text:0000000000001C16                 xor     edi, edi        ; status
.text:0000000000001C18                 call    _exit
.text:0000000000001C18 ; ---------------------------------------------------------------------------
.text:0000000000001C1D                 align 20h
.text:0000000000001C20
.text:0000000000001C20 loc_1C20:                               ; CODE XREF: main+93↑j
.text:0000000000001C20                 mov     cs:include_fullname, 0
.text:0000000000001C27                 mov     cs:include_where, 0
.text:0000000000001C2E                 jmp     loc_1B30
.text:0000000000001C2E ; ---------------------------------------------------------------------------
.text:0000000000001C33                 align 8
.text:0000000000001C38
.text:0000000000001C38 loc_1C38:                               ; CODE XREF: main+A9↑j
.text:0000000000001C38                 mov     cs:do_short_format, 0
.text:0000000000001C3F                 jmp     loc_1B30
.text:0000000000001C3F ; ---------------------------------------------------------------------------
.text:0000000000001C44                 align 8
.text:0000000000001C48
.text:0000000000001C48 loc_1C48:                               ; CODE XREF: main+9E↑j
.text:0000000000001C48                 mov     cs:include_fullname, 0
.text:0000000000001C4F                 mov     cs:include_where, 0
.text:0000000000001C56                 mov     cs:include_idle, 0
.text:0000000000001C5D                 jmp     loc_1B30
.text:0000000000001C5D ; ---------------------------------------------------------------------------
.text:0000000000001C62                 align 8
.text:0000000000001C68
.text:0000000000001C68 loc_1C68:                               ; CODE XREF: main+D6↑j
.text:0000000000001C68                 mov     cs:include_heading, 0
.text:0000000000001C6F                 jmp     loc_1B30
.text:0000000000001C6F ; ---------------------------------------------------------------------------
.text:0000000000001C74                 align 8
.text:0000000000001C78
.text:0000000000001C78 loc_1C78:                               ; CODE XREF: main+CB↑j
.text:0000000000001C78                 mov     cs:include_home_and_shell, 0
.text:0000000000001C7F                 jmp     loc_1B30
.text:0000000000001C7F ; ---------------------------------------------------------------------------
.text:0000000000001C84                 align 8
.text:0000000000001C88
.text:0000000000001C88 loc_1C88:                               ; CODE XREF: main+F3↑j
.text:0000000000001C88                 mov     cs:do_short_format, 1
.text:0000000000001C8F                 jmp     loc_1B30
.text:0000000000001C94 ; ---------------------------------------------------------------------------
.text:0000000000001C94
.text:0000000000001C94 loc_1C94:                               ; CODE XREF: main+8A↑j
.text:0000000000001C94                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001C9B                 sub     ebp, eax
.text:0000000000001C9D                 cmp     cs:do_short_format, 0
.text:0000000000001CA4                 jnz     short loc_1D07
.text:0000000000001CA6                 test    ebp, ebp
.text:0000000000001CA8                 jz      loc_1F48
.text:0000000000001CAE                 shl     rax, 3
.text:0000000000001CB2                 test    ebp, ebp
.text:0000000000001CB4                 jle     short loc_1CE2
.text:0000000000001CB6                 lea     r12, [rbx+rax]
.text:0000000000001CBA                 lea     edx, [rbp-1]
.text:0000000000001CBD                 lea     rax, [rbx+rax+8]
.text:0000000000001CC2                 lea     rbx, [rax+rdx*8]
.text:0000000000001CC6                 db      2Eh
.text:0000000000001CC6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001CD0
.text:0000000000001CD0 loc_1CD0:                               ; CODE XREF: main+220↓j
.text:0000000000001CD0                 mov     rdi, [r12]
.text:0000000000001CD4                 add     r12, 8
.text:0000000000001CD8                 call    print_long_entry
.text:0000000000001CDD                 cmp     r12, rbx
.text:0000000000001CE0                 jnz     short loc_1CD0
.text:0000000000001CE2
.text:0000000000001CE2 loc_1CE2:                               ; CODE XREF: main+1F4↑j
.text:0000000000001CE2                                         ; main+2D6↓j
.text:0000000000001CE2                 xor     eax, eax
.text:0000000000001CE4                 mov     rcx, [rsp+58h+var_40]
.text:0000000000001CE9                 xor     rcx, fs:28h
.text:0000000000001CF2                 jnz     loc_1F82
.text:0000000000001CF8                 add     rsp, 28h
.text:0000000000001CFC                 pop     rbx
.text:0000000000001CFD                 pop     rbp
.text:0000000000001CFE                 pop     r12
.text:0000000000001D00                 pop     r13
.text:0000000000001D02                 pop     r14
.text:0000000000001D04                 pop     r15
.text:0000000000001D06                 retn
.text:0000000000001D07 ; ---------------------------------------------------------------------------
.text:0000000000001D07
.text:0000000000001D07 loc_1D07:                               ; CODE XREF: main+1E4↑j
.text:0000000000001D07                 lea     rdx, [rsp+58h+var_48]
.text:0000000000001D0C                 lea     rsi, [rsp+58h+var_50]
.text:0000000000001D11                 lea     rdi, aVarRunUtmp ; "/var/run/utmp"
.text:0000000000001D18                 xor     ecx, ecx
.text:0000000000001D1A                 lea     r12, ds:0[rax*8]
.text:0000000000001D22                 mov     [rsp+58h+var_48], 0
.text:0000000000001D2B                 call    read_utmp
.text:0000000000001D30                 test    eax, eax
.text:0000000000001D32                 jnz     loc_1F87
.text:0000000000001D38                 mov     edi, 2
.text:0000000000001D3D                 mov     r13, [rsp+58h+var_48]
.text:0000000000001D42                 mov     r14, [rsp+58h+var_50]
.text:0000000000001D47                 call    hard_locale
.text:0000000000001D4C                 test    al, al
.text:0000000000001D4E                 jnz     short loc_1D9B
.text:0000000000001D50                 lea     rax, aBEHM      ; "%b %e %H:%M"
.text:0000000000001D57                 mov     cs:time_format_width, 0Ch
.text:0000000000001D61                 mov     cs:time_format, rax
.text:0000000000001D68
.text:0000000000001D68 loc_1D68:                               ; CODE XREF: main+2F3↓j
.text:0000000000001D68                 cmp     cs:include_heading, 0
.text:0000000000001D6F                 jnz     short loc_1DEA
.text:0000000000001D71
.text:0000000000001D71 loc_1D71:                               ; CODE XREF: main+3EE↓j
.text:0000000000001D71                                         ; main+4BD↓j
.text:0000000000001D71                 add     rbx, r12
.text:0000000000001D74                 jmp     short loc_1D8C
.text:0000000000001D76 ; ---------------------------------------------------------------------------
.text:0000000000001D76
.text:0000000000001D76 loc_1D76:                               ; CODE XREF: main+2D4↓j
.text:0000000000001D76                 cmp     byte ptr [r13+2Ch], 0
.text:0000000000001D7B                 jz      short loc_1D85
.text:0000000000001D7D                 cmp     word ptr [r13+0], 7
.text:0000000000001D83                 jz      short loc_1DB5
.text:0000000000001D85
.text:0000000000001D85 loc_1D85:                               ; CODE XREF: main+2BB↑j
.text:0000000000001D85                                         ; main+308↓j ...
.text:0000000000001D85                 add     r13, 180h
.text:0000000000001D8C
.text:0000000000001D8C loc_1D8C:                               ; CODE XREF: main+2B4↑j
.text:0000000000001D8C                 sub     r14, 1
.text:0000000000001D90                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:0000000000001D94                 jnz     short loc_1D76
.text:0000000000001D96                 jmp     loc_1CE2
.text:0000000000001D9B ; ---------------------------------------------------------------------------
.text:0000000000001D9B
.text:0000000000001D9B loc_1D9B:                               ; CODE XREF: main+28E↑j
.text:0000000000001D9B                 lea     rax, aYMDHM     ; "%Y-%m-%d %H:%M"
.text:0000000000001DA2                 mov     cs:time_format_width, 10h
.text:0000000000001DAC                 mov     cs:time_format, rax
.text:0000000000001DB3                 jmp     short loc_1D68
.text:0000000000001DB5 ; ---------------------------------------------------------------------------
.text:0000000000001DB5
.text:0000000000001DB5 loc_1DB5:                               ; CODE XREF: main+2C3↑j
.text:0000000000001DB5                 xor     r12d, r12d
.text:0000000000001DB8                 test    ebp, ebp
.text:0000000000001DBA                 lea     r15, [r13+2Ch]
.text:0000000000001DBE                 jnz     short loc_1DE3
.text:0000000000001DC0
.text:0000000000001DC0 loc_1DC0:                               ; CODE XREF: main+321↓j
.text:0000000000001DC0                 mov     rdi, r13
.text:0000000000001DC3                 call    print_entry
.text:0000000000001DC8                 jmp     short loc_1D85
.text:0000000000001DCA ; ---------------------------------------------------------------------------
.text:0000000000001DCA
.text:0000000000001DCA loc_1DCA:                               ; CODE XREF: main+326↓j
.text:0000000000001DCA                 mov     rsi, [rbx+r12*8] ; s2
.text:0000000000001DCE                 mov     edx, 20h ; ' '  ; n
.text:0000000000001DD3                 mov     rdi, r15        ; s1
.text:0000000000001DD6                 add     r12, 1
.text:0000000000001DDA                 call    _strncmp
.text:0000000000001DDF                 test    eax, eax
.text:0000000000001DE1                 jz      short loc_1DC0
.text:0000000000001DE3
.text:0000000000001DE3 loc_1DE3:                               ; CODE XREF: main+2FE↑j
.text:0000000000001DE3                 cmp     ebp, r12d
.text:0000000000001DE6                 jg      short loc_1DCA
.text:0000000000001DE8                 jmp     short loc_1D85
.text:0000000000001DEA ; ---------------------------------------------------------------------------
.text:0000000000001DEA
.text:0000000000001DEA loc_1DEA:                               ; CODE XREF: main+2AF↑j
.text:0000000000001DEA                 lea     rsi, msgid      ; "Login"
.text:0000000000001DF1                 xor     edi, edi        ; domainname
.text:0000000000001DF3                 mov     edx, 5          ; category
.text:0000000000001DF8                 call    _dcgettext
.text:0000000000001DFD                 lea     rsi, a8s        ; "%-8s"
.text:0000000000001E04                 mov     rdx, rax
.text:0000000000001E07                 mov     edi, 1
.text:0000000000001E0C                 xor     eax, eax
.text:0000000000001E0E                 call    ___printf_chk
.text:0000000000001E13                 cmp     cs:include_fullname, 0
.text:0000000000001E1A                 jnz     loc_1EB3
.text:0000000000001E20
.text:0000000000001E20 loc_1E20:                               ; CODE XREF: main+41C↓j
.text:0000000000001E20                 lea     rsi, aTty       ; " TTY"
.text:0000000000001E27                 xor     edi, edi        ; domainname
.text:0000000000001E29                 mov     edx, 5          ; category
.text:0000000000001E2E                 call    _dcgettext
.text:0000000000001E33                 lea     rsi, a9s        ; " %-9s"
.text:0000000000001E3A                 mov     rdx, rax
.text:0000000000001E3D                 mov     edi, 1
.text:0000000000001E42                 xor     eax, eax
.text:0000000000001E44                 call    ___printf_chk
.text:0000000000001E49                 cmp     cs:include_idle, 0
.text:0000000000001E50                 jnz     loc_1F0C
.text:0000000000001E56
.text:0000000000001E56 loc_1E56:                               ; CODE XREF: main+475↓j
.text:0000000000001E56                 lea     rsi, aWhen      ; "When"
.text:0000000000001E5D                 xor     edi, edi        ; domainname
.text:0000000000001E5F                 mov     edx, 5          ; category
.text:0000000000001E64                 call    _dcgettext
.text:0000000000001E69                 mov     edx, cs:time_format_width
.text:0000000000001E6F                 lea     rsi, aS         ; " %-*s"
.text:0000000000001E76                 mov     rcx, rax
.text:0000000000001E79                 mov     edi, 1
.text:0000000000001E7E                 xor     eax, eax
.text:0000000000001E80                 call    ___printf_chk
.text:0000000000001E85                 cmp     cs:include_where, 0
.text:0000000000001E8C                 jnz     short loc_1EE1
.text:0000000000001E8E
.text:0000000000001E8E loc_1E8E:                               ; CODE XREF: main+44A↓j
.text:0000000000001E8E                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001E95                 mov     rax, [rdi+28h]
.text:0000000000001E99                 cmp     rax, [rdi+30h]
.text:0000000000001E9D                 jnb     loc_1F73
.text:0000000000001EA3                 lea     rdx, [rax+1]
.text:0000000000001EA7                 mov     [rdi+28h], rdx
.text:0000000000001EAB                 mov     byte ptr [rax], 0Ah
.text:0000000000001EAE                 jmp     loc_1D71
.text:0000000000001EB3 ; ---------------------------------------------------------------------------
.text:0000000000001EB3
.text:0000000000001EB3 loc_1EB3:                               ; CODE XREF: main+35A↑j
.text:0000000000001EB3                 lea     rsi, aName      ; "Name"
.text:0000000000001EBA                 xor     edi, edi        ; domainname
.text:0000000000001EBC                 mov     edx, 5          ; category
.text:0000000000001EC1                 call    _dcgettext
.text:0000000000001EC6                 lea     rsi, a19s       ; " %-19s"
.text:0000000000001ECD                 mov     rdx, rax
.text:0000000000001ED0                 mov     edi, 1
.text:0000000000001ED5                 xor     eax, eax
.text:0000000000001ED7                 call    ___printf_chk
.text:0000000000001EDC                 jmp     loc_1E20
.text:0000000000001EE1 ; ---------------------------------------------------------------------------
.text:0000000000001EE1
.text:0000000000001EE1 loc_1EE1:                               ; CODE XREF: main+3CC↑j
.text:0000000000001EE1                 lea     rsi, aWhere     ; "Where"
.text:0000000000001EE8                 xor     edi, edi        ; domainname
.text:0000000000001EEA                 mov     edx, 5          ; category
.text:0000000000001EEF                 call    _dcgettext
.text:0000000000001EF4                 lea     rsi, format+3   ; " %s"
.text:0000000000001EFB                 mov     rdx, rax
.text:0000000000001EFE                 mov     edi, 1
.text:0000000000001F03                 xor     eax, eax
.text:0000000000001F05                 call    ___printf_chk
.text:0000000000001F0A                 jmp     short loc_1E8E
.text:0000000000001F0C ; ---------------------------------------------------------------------------
.text:0000000000001F0C
.text:0000000000001F0C loc_1F0C:                               ; CODE XREF: main+390↑j
.text:0000000000001F0C                 lea     rsi, aIdle      ; "Idle"
.text:0000000000001F13                 xor     edi, edi        ; domainname
.text:0000000000001F15                 mov     edx, 5          ; category
.text:0000000000001F1A                 call    _dcgettext
.text:0000000000001F1F                 lea     rsi, a6s        ; " %-6s"
.text:0000000000001F26                 mov     rdx, rax
.text:0000000000001F29                 mov     edi, 1
.text:0000000000001F2E                 xor     eax, eax
.text:0000000000001F30                 call    ___printf_chk
.text:0000000000001F35                 jmp     loc_1E56
.text:0000000000001F3A ; ---------------------------------------------------------------------------
.text:0000000000001F3A
.text:0000000000001F3A loc_1F3A:                               ; CODE XREF: main+115↑j
.text:0000000000001F3A                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001F3F                 jnz     short loc_1F69
.text:0000000000001F41                 xor     edi, edi        ; status
.text:0000000000001F43                 call    usage
.text:0000000000001F48 ; ---------------------------------------------------------------------------
.text:0000000000001F48
.text:0000000000001F48 loc_1F48:                               ; CODE XREF: main+1E8↑j
.text:0000000000001F48                 lea     rsi, aNoUsernameSpec ; "no username specified; at least one mus"...
.text:0000000000001F4F                 mov     edx, 5          ; category
.text:0000000000001F54                 xor     edi, edi        ; domainname
.text:0000000000001F56                 call    _dcgettext
.text:0000000000001F5B                 xor     esi, esi        ; errnum
.text:0000000000001F5D                 mov     rdx, rax        ; format
.text:0000000000001F60                 xor     edi, edi        ; status
.text:0000000000001F62                 xor     eax, eax
.text:0000000000001F64                 call    _error
.text:0000000000001F69
.text:0000000000001F69 loc_1F69:                               ; CODE XREF: main+B2↑j
.text:0000000000001F69                                         ; main+DF↑j ...
.text:0000000000001F69                 mov     edi, 1          ; status
.text:0000000000001F6E                 call    usage
.text:0000000000001F73 ; ---------------------------------------------------------------------------
.text:0000000000001F73
.text:0000000000001F73 loc_1F73:                               ; CODE XREF: main+3DD↑j
.text:0000000000001F73                 mov     esi, 0Ah        ; int
.text:0000000000001F78                 call    ___overflow
.text:0000000000001F7D                 jmp     loc_1D71
.text:0000000000001F82 ; ---------------------------------------------------------------------------
.text:0000000000001F82
.text:0000000000001F82 loc_1F82:                               ; CODE XREF: main+232↑j
.text:0000000000001F82                 call    ___stack_chk_fail
.text:0000000000001F87 ; ---------------------------------------------------------------------------
.text:0000000000001F87
.text:0000000000001F87 loc_1F87:                               ; CODE XREF: main+272↑j
.text:0000000000001F87                 lea     rdx, aVarRunUtmp ; "/var/run/utmp"
.text:0000000000001F8E                 mov     esi, 3
.text:0000000000001F93                 xor     edi, edi
.text:0000000000001F95                 call    quotearg_n_style_colon
.text:0000000000001F9A                 mov     rbx, rax
.text:0000000000001F9D                 call    ___errno_location
.text:0000000000001FA2                 mov     esi, [rax]      ; errnum
.text:0000000000001FA4                 lea     rdx, format+4   ; format
.text:0000000000001FAB                 mov     rcx, rbx
.text:0000000000001FAE                 mov     edi, 1          ; status
.text:0000000000001FB3                 xor     eax, eax
.text:0000000000001FB5                 call    _error
.text:0000000000001FB5 ; } // starts at 1AC0
.text:0000000000001FBA                 nop     word ptr [rax+rax+00h]
.text:0000000000001FBA main            endp ; sp-analysis failed
.text:0000000000001FBA
.text:0000000000001FC0
.text:0000000000001FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FC0
.text:0000000000001FC0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001FC0
.text:0000000000001FC0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001FC0                 public start
.text:0000000000001FC0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001FC0 ; __unwind {
.text:0000000000001FC0                 xor     ebp, ebp
.text:0000000000001FC2                 mov     r9, rdx         ; rtld_fini
.text:0000000000001FC5                 pop     rsi             ; argc
.text:0000000000001FC6                 mov     rdx, rsp        ; ubp_av
.text:0000000000001FC9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001FCD                 push    rax
.text:0000000000001FCE                 push    rsp             ; stack_end
.text:0000000000001FCF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001FD6                 lea     rcx, __libc_csu_init ; init
.text:0000000000001FDD                 lea     rdi, main       ; main
.text:0000000000001FE4                 call    cs:__libc_start_main_ptr
.text:0000000000001FEA                 hlt
.text:0000000000001FEA ; } // starts at 1FC0
.text:0000000000001FEA start           endp
.text:0000000000001FEA
.text:0000000000001FEA ; ---------------------------------------------------------------------------
.text:0000000000001FEB                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FF0
.text:0000000000001FF0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001FF0
.text:0000000000001FF0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_20A3↓p
.text:0000000000001FF0                 lea     rdi, __bss_start
.text:0000000000001FF7                 push    rbp
.text:0000000000001FF8                 lea     rax, __bss_start
.text:0000000000001FFF                 cmp     rax, rdi
.text:0000000000002002                 mov     rbp, rsp
.text:0000000000002005                 jz      short loc_2020
.text:0000000000002007                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000200E                 test    rax, rax
.text:0000000000002011                 jz      short loc_2020
.text:0000000000002013                 pop     rbp
.text:0000000000002014                 jmp     rax
.text:0000000000002014 ; ---------------------------------------------------------------------------
.text:0000000000002016                 align 20h
.text:0000000000002020
.text:0000000000002020 loc_2020:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002020                                         ; deregister_tm_clones+21↑j
.text:0000000000002020                 pop     rbp
.text:0000000000002021                 retn
.text:0000000000002021 deregister_tm_clones endp
.text:0000000000002021
.text:0000000000002021 ; ---------------------------------------------------------------------------
.text:0000000000002022                 align 10h
.text:0000000000002030
.text:0000000000002030 ; =============== S U B R O U T I N E =======================================
.text:0000000000002030
.text:0000000000002030 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002030
.text:0000000000002030 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002030                 lea     rdi, __bss_start
.text:0000000000002037                 lea     rsi, __bss_start
.text:000000000000203E                 push    rbp
.text:000000000000203F                 sub     rsi, rdi
.text:0000000000002042                 mov     rbp, rsp
.text:0000000000002045                 sar     rsi, 3
.text:0000000000002049                 mov     rax, rsi
.text:000000000000204C                 shr     rax, 3Fh
.text:0000000000002050                 add     rsi, rax
.text:0000000000002053                 sar     rsi, 1
.text:0000000000002056                 jz      short loc_2070
.text:0000000000002058                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000205F                 test    rax, rax
.text:0000000000002062                 jz      short loc_2070
.text:0000000000002064                 pop     rbp
.text:0000000000002065                 jmp     rax
.text:0000000000002065 ; ---------------------------------------------------------------------------
.text:0000000000002067                 align 10h
.text:0000000000002070
.text:0000000000002070 loc_2070:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002070                                         ; register_tm_clones+32↑j
.text:0000000000002070                 pop     rbp
.text:0000000000002071                 retn
.text:0000000000002071 register_tm_clones endp
.text:0000000000002071
.text:0000000000002071 ; ---------------------------------------------------------------------------
.text:0000000000002072                 align 20h
.text:0000000000002080
.text:0000000000002080 ; =============== S U B R O U T I N E =======================================
.text:0000000000002080
.text:0000000000002080 ; Attributes: info_from_lumina
.text:0000000000002080
.text:0000000000002080 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002080                 cmp     cs:completed_7697, 0
.text:0000000000002087                 jnz     short locret_20B8
.text:0000000000002089                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002091                 push    rbp
.text:0000000000002092                 mov     rbp, rsp
.text:0000000000002095                 jz      short loc_20A3
.text:0000000000002097                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000209E                 call    __cxa_finalize
.text:00000000000020A3
.text:00000000000020A3 loc_20A3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000020A3                 call    deregister_tm_clones
.text:00000000000020A8                 mov     cs:completed_7697, 1
.text:00000000000020AF                 pop     rbp
.text:00000000000020B0                 retn
.text:00000000000020B0 ; ---------------------------------------------------------------------------
.text:00000000000020B1                 align 8
.text:00000000000020B8
.text:00000000000020B8 locret_20B8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000020B8                 rep retn
.text:00000000000020B8 __do_global_dtors_aux endp
.text:00000000000020B8
.text:00000000000020B8 ; ---------------------------------------------------------------------------
.text:00000000000020BA                 align 20h
.text:00000000000020C0
.text:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020C0
.text:00000000000020C0 ; Attributes: bp-based frame
.text:00000000000020C0
.text:00000000000020C0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000020C0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000020C0                 push    rbp
.text:00000000000020C1                 mov     rbp, rsp
.text:00000000000020C4                 pop     rbp
.text:00000000000020C5                 jmp     register_tm_clones
.text:00000000000020C5 frame_dummy     endp
.text:00000000000020C5
.text:00000000000020C5 ; ---------------------------------------------------------------------------
.text:00000000000020CA                 align 10h
.text:00000000000020D0
.text:00000000000020D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020D0
.text:00000000000020D0
.text:00000000000020D0 create_fullname proc near               ; CODE XREF: print_long_entry+B1↓p
.text:00000000000020D0                                         ; print_entry+11A↓p
.text:00000000000020D0 ; __unwind {
.text:00000000000020D0                 push    r14
.text:00000000000020D2                 push    r13
.text:00000000000020D4                 mov     r13, rdi
.text:00000000000020D7                 push    r12
.text:00000000000020D9                 push    rbp
.text:00000000000020DA                 mov     rbp, rsi
.text:00000000000020DD                 push    rbx
.text:00000000000020DE                 xor     ebx, ebx
.text:00000000000020E0                 call    _strlen
.text:00000000000020E5                 lea     r12, [rax+1]
.text:00000000000020E9                 mov     rdx, r13
.text:00000000000020EC                 nop     dword ptr [rax+00h]
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: create_fullname+32↓j
.text:00000000000020F0                                         ; create_fullname+124↓j
.text:00000000000020F0                 movzx   ecx, byte ptr [rdx]
.text:00000000000020F3                 add     rdx, 1
.text:00000000000020F7                 cmp     cl, 26h ; '&'
.text:00000000000020FA                 jz      loc_21F0
.text:0000000000002100                 test    cl, cl
.text:0000000000002102                 jnz     short loc_20F0
.text:0000000000002104                 test    rbx, rbx
.text:0000000000002107                 jz      short loc_214B
.text:0000000000002109                 mov     rdi, rbp        ; s
.text:000000000000210C                 sub     r12, rbx
.text:000000000000210F                 call    _strlen
.text:0000000000002114                 mov     rcx, rax
.text:0000000000002117                 xor     esi, esi
.text:0000000000002119                 imul    rcx, rbx
.text:000000000000211D                 add     r12, rcx
.text:0000000000002120                 setb    sil
.text:0000000000002124                 mul     rbx
.text:0000000000002127                 mov     edx, 1
.text:000000000000212C                 seto    al
.text:000000000000212F                 test    rcx, rcx
.text:0000000000002132                 movzx   eax, al
.text:0000000000002135                 cmovs   rax, rdx
.text:0000000000002139                 test    rsi, rsi
.text:000000000000213C                 jnz     loc_21F9
.text:0000000000002142                 test    rax, rax
.text:0000000000002145                 jnz     loc_21F9
.text:000000000000214B
.text:000000000000214B loc_214B:                               ; CODE XREF: create_fullname+37↑j
.text:000000000000214B                 mov     rdi, r12
.text:000000000000214E                 call    xmalloc
.text:0000000000002153                 mov     r12, rax
.text:0000000000002156                 movzx   eax, byte ptr [r13+0]
.text:000000000000215B                 mov     rbx, r12
.text:000000000000215E                 test    al, al
.text:0000000000002160                 jnz     short loc_217B
.text:0000000000002162                 jmp     short loc_21DF
.text:0000000000002162 ; ---------------------------------------------------------------------------
.text:0000000000002164                 align 8
.text:0000000000002168
.text:0000000000002168 loc_2168:                               ; CODE XREF: create_fullname+AD↓j
.text:0000000000002168                 mov     [rbx], al
.text:000000000000216A                 add     rbx, 1
.text:000000000000216E
.text:000000000000216E loc_216E:                               ; CODE XREF: create_fullname+E7↓j
.text:000000000000216E                 add     r13, 1
.text:0000000000002172                 movzx   eax, byte ptr [r13+0]
.text:0000000000002177                 test    al, al
.text:0000000000002179                 jz      short loc_21DF
.text:000000000000217B
.text:000000000000217B loc_217B:                               ; CODE XREF: create_fullname+90↑j
.text:000000000000217B                                         ; create_fullname+10D↓j
.text:000000000000217B                 cmp     al, 26h ; '&'
.text:000000000000217D                 jnz     short loc_2168
.text:000000000000217F                 call    ___ctype_b_loc
.text:0000000000002184                 movzx   r14d, byte ptr [rbp+0]
.text:0000000000002189                 mov     rax, [rax]
.text:000000000000218C                 mov     rcx, rbp
.text:000000000000218F                 test    byte ptr [rax+r14*2+1], 2
.text:0000000000002195                 mov     rdx, r14
.text:0000000000002198                 jz      short loc_21B5
.text:000000000000219A                 call    ___ctype_toupper_loc
.text:000000000000219F                 mov     rax, [rax]
.text:00000000000021A2                 movzx   edx, byte ptr [rbp+1]
.text:00000000000021A6                 lea     rcx, [rbp+1]
.text:00000000000021AA                 add     rbx, 1
.text:00000000000021AE                 mov     eax, [rax+r14*4]
.text:00000000000021B2                 mov     [rbx-1], al
.text:00000000000021B5
.text:00000000000021B5 loc_21B5:                               ; CODE XREF: create_fullname+C8↑j
.text:00000000000021B5                 test    dl, dl
.text:00000000000021B7                 jz      short loc_216E
.text:00000000000021B9                 nop     dword ptr [rax+00000000h]
.text:00000000000021C0
.text:00000000000021C0 loc_21C0:                               ; CODE XREF: create_fullname+100↓j
.text:00000000000021C0                 add     rcx, 1
.text:00000000000021C4                 add     rbx, 1
.text:00000000000021C8                 mov     [rbx-1], dl
.text:00000000000021CB                 movzx   edx, byte ptr [rcx]
.text:00000000000021CE                 test    dl, dl
.text:00000000000021D0                 jnz     short loc_21C0
.text:00000000000021D2                 add     r13, 1
.text:00000000000021D6                 movzx   eax, byte ptr [r13+0]
.text:00000000000021DB                 test    al, al
.text:00000000000021DD                 jnz     short loc_217B
.text:00000000000021DF
.text:00000000000021DF loc_21DF:                               ; CODE XREF: create_fullname+92↑j
.text:00000000000021DF                                         ; create_fullname+A9↑j
.text:00000000000021DF                 mov     byte ptr [rbx], 0
.text:00000000000021E2                 mov     rax, r12
.text:00000000000021E5                 pop     rbx
.text:00000000000021E6                 pop     rbp
.text:00000000000021E7                 pop     r12
.text:00000000000021E9                 pop     r13
.text:00000000000021EB                 pop     r14
.text:00000000000021ED                 retn
.text:00000000000021ED ; ---------------------------------------------------------------------------
.text:00000000000021EE                 align 10h
.text:00000000000021F0
.text:00000000000021F0 loc_21F0:                               ; CODE XREF: create_fullname+2A↑j
.text:00000000000021F0                 add     rbx, 1
.text:00000000000021F4                 jmp     loc_20F0
.text:00000000000021F9 ; ---------------------------------------------------------------------------
.text:00000000000021F9
.text:00000000000021F9 loc_21F9:                               ; CODE XREF: create_fullname+6C↑j
.text:00000000000021F9                                         ; create_fullname+75↑j
.text:00000000000021F9                 call    xalloc_die
.text:00000000000021F9 ; } // starts at 20D0
.text:00000000000021F9 create_fullname endp
.text:00000000000021F9
.text:00000000000021F9 ; ---------------------------------------------------------------------------
.text:00000000000021FE                 align 20h
.text:0000000000002200
.text:0000000000002200 ; =============== S U B R O U T I N E =======================================
.text:0000000000002200
.text:0000000000002200
.text:0000000000002200 print_long_entry proc near              ; CODE XREF: main+218↑p
.text:0000000000002200
.text:0000000000002200 var_30          = qword ptr -30h
.text:0000000000002200
.text:0000000000002200 ; __unwind {
.text:0000000000002200                 push    r13
.text:0000000000002202                 push    r12
.text:0000000000002204                 push    rbp
.text:0000000000002205                 push    rbx
.text:0000000000002206                 mov     rbp, rdi
.text:0000000000002209                 sub     rsp, 418h
.text:0000000000002210                 mov     rax, fs:28h
.text:0000000000002219                 mov     [rsp+438h+var_30], rax
.text:0000000000002221                 xor     eax, eax
.text:0000000000002223                 call    _getpwnam
.text:0000000000002228                 lea     rsi, aLoginName ; "Login name: "
.text:000000000000222F                 mov     edx, 5          ; category
.text:0000000000002234                 xor     edi, edi        ; domainname
.text:0000000000002236                 mov     rbx, rax
.text:0000000000002239                 call    _dcgettext
.text:000000000000223E                 mov     edi, 1
.text:0000000000002243                 mov     rsi, rax
.text:0000000000002246                 xor     eax, eax
.text:0000000000002248                 call    ___printf_chk
.text:000000000000224D                 lea     rsi, a28s       ; "%-28s"
.text:0000000000002254                 mov     rdx, rbp
.text:0000000000002257                 mov     edi, 1
.text:000000000000225C                 xor     eax, eax
.text:000000000000225E                 call    ___printf_chk
.text:0000000000002263                 lea     rsi, aInRealLife ; "In real life: "
.text:000000000000226A                 xor     edi, edi        ; domainname
.text:000000000000226C                 mov     edx, 5          ; category
.text:0000000000002271                 call    _dcgettext
.text:0000000000002276                 mov     edi, 1
.text:000000000000227B                 mov     rsi, rax
.text:000000000000227E                 xor     eax, eax
.text:0000000000002280                 call    ___printf_chk
.text:0000000000002285                 test    rbx, rbx
.text:0000000000002288                 jz      loc_2590
.text:000000000000228E                 mov     rbp, [rbx+18h]
.text:0000000000002292                 mov     esi, 2Ch ; ','  ; c
.text:0000000000002297                 mov     rdi, rbp        ; s
.text:000000000000229A                 call    _strchr
.text:000000000000229F                 test    rax, rax
.text:00000000000022A2                 jz      short loc_22AB
.text:00000000000022A4                 mov     byte ptr [rax], 0
.text:00000000000022A7                 mov     rbp, [rbx+18h]
.text:00000000000022AB
.text:00000000000022AB loc_22AB:                               ; CODE XREF: print_long_entry+A2↑j
.text:00000000000022AB                 mov     rsi, [rbx]
.text:00000000000022AE                 mov     rdi, rbp
.text:00000000000022B1                 call    create_fullname
.text:00000000000022B6                 lea     rsi, format+3   ; " %s"
.text:00000000000022BD                 mov     rdx, rax
.text:00000000000022C0                 mov     rbp, rax
.text:00000000000022C3                 mov     edi, 1
.text:00000000000022C8                 xor     eax, eax
.text:00000000000022CA                 call    ___printf_chk
.text:00000000000022CF                 mov     rdi, rbp        ; ptr
.text:00000000000022D2                 call    _free
.text:00000000000022D7                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000022DE                 mov     rax, [rdi+28h]
.text:00000000000022E2                 cmp     rax, [rdi+30h]
.text:00000000000022E6                 jnb     loc_25C0
.text:00000000000022EC                 lea     rdx, [rax+1]
.text:00000000000022F0                 mov     [rdi+28h], rdx
.text:00000000000022F4                 mov     byte ptr [rax], 0Ah
.text:00000000000022F7
.text:00000000000022F7 loc_22F7:                               ; CODE XREF: print_long_entry+3CA↓j
.text:00000000000022F7                 cmp     cs:include_home_and_shell, 0
.text:00000000000022FE                 jnz     short loc_2360
.text:0000000000002300
.text:0000000000002300 loc_2300:                               ; CODE XREF: print_long_entry+3EA↓j
.text:0000000000002300                 cmp     cs:include_project, 0
.text:0000000000002307                 jnz     loc_23FF
.text:000000000000230D
.text:000000000000230D loc_230D:                               ; CODE XREF: print_long_entry+1F9↓j
.text:000000000000230D                 cmp     cs:include_plan, 0
.text:0000000000002314                 jnz     loc_24C6
.text:000000000000231A
.text:000000000000231A loc_231A:                               ; CODE XREF: print_long_entry+2C0↓j
.text:000000000000231A                                         ; print_long_entry+381↓j
.text:000000000000231A                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002321                 mov     rax, [rdi+28h]
.text:0000000000002325                 cmp     rax, [rdi+30h]
.text:0000000000002329                 jnb     loc_25D0
.text:000000000000232F                 lea     rdx, [rax+1]
.text:0000000000002333                 mov     [rdi+28h], rdx
.text:0000000000002337                 mov     byte ptr [rax], 0Ah
.text:000000000000233A
.text:000000000000233A loc_233A:                               ; CODE XREF: print_long_entry+3B9↓j
.text:000000000000233A                                         ; print_long_entry+3DA↓j
.text:000000000000233A                 mov     rax, [rsp+438h+var_30]
.text:0000000000002342                 xor     rax, fs:28h
.text:000000000000234B                 jnz     loc_25EF
.text:0000000000002351                 add     rsp, 418h
.text:0000000000002358                 pop     rbx
.text:0000000000002359                 pop     rbp
.text:000000000000235A                 pop     r12
.text:000000000000235C                 pop     r13
.text:000000000000235E                 retn
.text:000000000000235E ; ---------------------------------------------------------------------------
.text:000000000000235F                 align 20h
.text:0000000000002360
.text:0000000000002360 loc_2360:                               ; CODE XREF: print_long_entry+FE↑j
.text:0000000000002360                 lea     rsi, aDirectory ; "Directory: "
.text:0000000000002367                 mov     edx, 5          ; category
.text:000000000000236C                 xor     edi, edi        ; domainname
.text:000000000000236E                 call    _dcgettext
.text:0000000000002373                 mov     edi, 1
.text:0000000000002378                 mov     rsi, rax
.text:000000000000237B                 xor     eax, eax
.text:000000000000237D                 call    ___printf_chk
.text:0000000000002382                 mov     rdx, [rbx+20h]
.text:0000000000002386                 lea     rsi, a29s       ; "%-29s"
.text:000000000000238D                 mov     edi, 1
.text:0000000000002392                 xor     eax, eax
.text:0000000000002394                 call    ___printf_chk
.text:0000000000002399                 lea     rsi, aShell     ; "Shell: "
.text:00000000000023A0                 mov     edx, 5          ; category
.text:00000000000023A5                 xor     edi, edi        ; domainname
.text:00000000000023A7                 call    _dcgettext
.text:00000000000023AC                 mov     edi, 1
.text:00000000000023B1                 mov     rsi, rax
.text:00000000000023B4                 xor     eax, eax
.text:00000000000023B6                 call    ___printf_chk
.text:00000000000023BB                 mov     rdx, [rbx+28h]
.text:00000000000023BF                 lea     rsi, format+3   ; " %s"
.text:00000000000023C6                 mov     edi, 1
.text:00000000000023CB                 xor     eax, eax
.text:00000000000023CD                 call    ___printf_chk
.text:00000000000023D2                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000023D9                 mov     rax, [rdi+28h]
.text:00000000000023DD                 cmp     rax, [rdi+30h]
.text:00000000000023E1                 jnb     loc_25E0
.text:00000000000023E7                 cmp     cs:include_project, 0
.text:00000000000023EE                 lea     rdx, [rax+1]
.text:00000000000023F2                 mov     [rdi+28h], rdx
.text:00000000000023F6                 mov     byte ptr [rax], 0Ah
.text:00000000000023F9                 jz      loc_230D
.text:00000000000023FF
.text:00000000000023FF loc_23FF:                               ; CODE XREF: print_long_entry+107↑j
.text:00000000000023FF                 mov     rdi, [rbx+20h]  ; s
.text:0000000000002403                 call    _strlen
.text:0000000000002408                 lea     rdi, [rax+0Ah]
.text:000000000000240C                 call    xmalloc
.text:0000000000002411                 mov     rsi, [rbx+20h]  ; src
.text:0000000000002415                 mov     rdi, rax        ; dest
.text:0000000000002418                 mov     r13, rax
.text:000000000000241B                 call    _stpcpy
.text:0000000000002420                 mov     rcx, 63656A6F72702E2Fh
.text:000000000000242A                 lea     rsi, aWriteError+0Ah ; modes
.text:0000000000002431                 mov     rdi, r13        ; filename
.text:0000000000002434                 mov     [rax], rcx
.text:0000000000002437                 mov     ecx, 74h ; 't'
.text:000000000000243C                 mov     [rax+8], cx
.text:0000000000002440                 call    _fopen
.text:0000000000002445                 test    rax, rax
.text:0000000000002448                 mov     r12, rax
.text:000000000000244B                 jz      short loc_24B1
.text:000000000000244D                 lea     rsi, aProject   ; "Project: "
.text:0000000000002454                 mov     edx, 5          ; category
.text:0000000000002459                 xor     edi, edi        ; domainname
.text:000000000000245B                 mov     rbp, rsp
.text:000000000000245E                 call    _dcgettext
.text:0000000000002463                 mov     edi, 1
.text:0000000000002468                 mov     rsi, rax
.text:000000000000246B                 xor     eax, eax
.text:000000000000246D                 call    ___printf_chk
.text:0000000000002472                 jmp     short loc_248F
.text:0000000000002472 ; ---------------------------------------------------------------------------
.text:0000000000002474                 align 8
.text:0000000000002478
.text:0000000000002478 loc_2478:                               ; CODE XREF: print_long_entry+2A7↓j
.text:0000000000002478                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000247F                 mov     rdx, rax        ; n
.text:0000000000002482                 mov     esi, 1          ; size
.text:0000000000002487                 mov     rdi, rbp        ; ptr
.text:000000000000248A                 call    _fwrite_unlocked
.text:000000000000248F
.text:000000000000248F loc_248F:                               ; CODE XREF: print_long_entry+272↑j
.text:000000000000248F                 mov     rcx, r12        ; stream
.text:0000000000002492                 mov     edx, 400h       ; n
.text:0000000000002497                 mov     esi, 1          ; size
.text:000000000000249C                 mov     rdi, rbp        ; ptr
.text:000000000000249F                 call    _fread_unlocked
.text:00000000000024A4                 test    rax, rax
.text:00000000000024A7                 jnz     short loc_2478
.text:00000000000024A9                 mov     rdi, r12        ; stream
.text:00000000000024AC                 call    rpl_fclose
.text:00000000000024B1
.text:00000000000024B1 loc_24B1:                               ; CODE XREF: print_long_entry+24B↑j
.text:00000000000024B1                 mov     rdi, r13        ; ptr
.text:00000000000024B4                 call    _free
.text:00000000000024B9                 cmp     cs:include_plan, 0
.text:00000000000024C0                 jz      loc_231A
.text:00000000000024C6
.text:00000000000024C6 loc_24C6:                               ; CODE XREF: print_long_entry+114↑j
.text:00000000000024C6                 mov     rdi, [rbx+20h]  ; s
.text:00000000000024CA                 call    _strlen
.text:00000000000024CF                 lea     rdi, [rax+7]
.text:00000000000024D3                 call    xmalloc
.text:00000000000024D8                 mov     rsi, [rbx+20h]  ; src
.text:00000000000024DC                 mov     rdi, rax        ; dest
.text:00000000000024DF                 mov     r12, rax
.text:00000000000024E2                 call    _stpcpy
.text:00000000000024E7                 mov     edx, 6E61h
.text:00000000000024EC                 lea     rsi, aWriteError+0Ah ; modes
.text:00000000000024F3                 mov     dword ptr [rax], 6C702E2Fh
.text:00000000000024F9                 mov     [rax+4], dx
.text:00000000000024FD                 mov     byte ptr [rax+6], 0
.text:0000000000002501                 mov     rdi, r12        ; filename
.text:0000000000002504                 call    _fopen
.text:0000000000002509                 test    rax, rax
.text:000000000000250C                 mov     rbx, rax
.text:000000000000250F                 jz      short loc_2579
.text:0000000000002511                 lea     rsi, aPlan      ; "Plan:\n"
.text:0000000000002518                 mov     edx, 5          ; category
.text:000000000000251D                 xor     edi, edi        ; domainname
.text:000000000000251F                 mov     rbp, rsp
.text:0000000000002522                 call    _dcgettext
.text:0000000000002527                 mov     edi, 1
.text:000000000000252C                 mov     rsi, rax
.text:000000000000252F                 xor     eax, eax
.text:0000000000002531                 call    ___printf_chk
.text:0000000000002536                 jmp     short loc_2557
.text:0000000000002536 ; ---------------------------------------------------------------------------
.text:0000000000002538                 align 20h
.text:0000000000002540
.text:0000000000002540 loc_2540:                               ; CODE XREF: print_long_entry+36F↓j
.text:0000000000002540                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002547                 mov     rdx, rax        ; n
.text:000000000000254A                 mov     esi, 1          ; size
.text:000000000000254F                 mov     rdi, rbp        ; ptr
.text:0000000000002552                 call    _fwrite_unlocked
.text:0000000000002557
.text:0000000000002557 loc_2557:                               ; CODE XREF: print_long_entry+336↑j
.text:0000000000002557                 mov     rcx, rbx        ; stream
.text:000000000000255A                 mov     edx, 400h       ; n
.text:000000000000255F                 mov     esi, 1          ; size
.text:0000000000002564                 mov     rdi, rbp        ; ptr
.text:0000000000002567                 call    _fread_unlocked
.text:000000000000256C                 test    rax, rax
.text:000000000000256F                 jnz     short loc_2540
.text:0000000000002571                 mov     rdi, rbx        ; stream
.text:0000000000002574                 call    rpl_fclose
.text:0000000000002579
.text:0000000000002579 loc_2579:                               ; CODE XREF: print_long_entry+30F↑j
.text:0000000000002579                 mov     rdi, r12        ; ptr
.text:000000000000257C                 call    _free
.text:0000000000002581                 jmp     loc_231A
.text:0000000000002581 ; ---------------------------------------------------------------------------
.text:0000000000002586                 align 10h
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: print_long_entry+88↑j
.text:0000000000002590                 lea     rsi, asc_5C86   ; "???\n"
.text:0000000000002597                 xor     edi, edi        ; domainname
.text:0000000000002599                 mov     edx, 5          ; category
.text:000000000000259E                 call    _dcgettext
.text:00000000000025A3                 lea     rsi, format+3   ; " %s"
.text:00000000000025AA                 mov     rdx, rax
.text:00000000000025AD                 mov     edi, 1
.text:00000000000025B2                 xor     eax, eax
.text:00000000000025B4                 call    ___printf_chk
.text:00000000000025B9                 jmp     loc_233A
.text:00000000000025B9 ; ---------------------------------------------------------------------------
.text:00000000000025BE                 align 20h
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: print_long_entry+E6↑j
.text:00000000000025C0                 mov     esi, 0Ah        ; int
.text:00000000000025C5                 call    ___overflow
.text:00000000000025CA                 jmp     loc_22F7
.text:00000000000025CA ; ---------------------------------------------------------------------------
.text:00000000000025CF                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: print_long_entry+129↑j
.text:00000000000025D0                 mov     esi, 0Ah        ; int
.text:00000000000025D5                 call    ___overflow
.text:00000000000025DA                 jmp     loc_233A
.text:00000000000025DA ; ---------------------------------------------------------------------------
.text:00000000000025DF                 align 20h
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: print_long_entry+1E1↑j
.text:00000000000025E0                 mov     esi, 0Ah        ; int
.text:00000000000025E5                 call    ___overflow
.text:00000000000025EA                 jmp     loc_2300
.text:00000000000025EF ; ---------------------------------------------------------------------------
.text:00000000000025EF
.text:00000000000025EF loc_25EF:                               ; CODE XREF: print_long_entry+14B↑j
.text:00000000000025EF                 call    ___stack_chk_fail
.text:00000000000025EF ; } // starts at 2200
.text:00000000000025EF print_long_entry endp
.text:00000000000025EF
.text:00000000000025EF ; ---------------------------------------------------------------------------
.text:00000000000025F4                 align 20h
.text:0000000000002600
.text:0000000000002600 ; =============== S U B R O U T I N E =======================================
.text:0000000000002600
.text:0000000000002600
.text:0000000000002600 print_entry     proc near               ; CODE XREF: main+303↑p
.text:0000000000002600
.text:0000000000002600 var_220         = qword ptr -220h
.text:0000000000002600 timer           = qword ptr -210h
.text:0000000000002600 stat_buf        = stat ptr -208h
.text:0000000000002600 filename        = byte ptr -178h
.text:0000000000002600 var_174         = word ptr -174h
.text:0000000000002600 name            = byte ptr -148h
.text:0000000000002600 var_40          = qword ptr -40h
.text:0000000000002600
.text:0000000000002600 ; __unwind {
.text:0000000000002600                 push    r15
.text:0000000000002602                 push    r14
.text:0000000000002604                 push    r13
.text:0000000000002606                 push    r12
.text:0000000000002608                 push    rbp
.text:0000000000002609                 push    rbx
.text:000000000000260A                 mov     rbp, rdi
.text:000000000000260D                 sub     rsp, 1F8h
.text:0000000000002614                 movzx   ecx, byte ptr [rdi+8]
.text:0000000000002618                 mov     rax, fs:28h
.text:0000000000002621                 mov     [rsp+228h+var_40], rax
.text:0000000000002629                 xor     eax, eax
.text:000000000000262B                 cmp     cl, 2Fh ; '/'
.text:000000000000262E                 jnz     loc_29A0
.text:0000000000002634                 lea     rax, [rdi+8]
.text:0000000000002638                 lea     rsi, [rsp+228h+filename] ; filename
.text:0000000000002640                 lea     rdi, [rdi+28h]
.text:0000000000002644                 mov     r12, rax
.text:0000000000002647                 mov     rdx, rsi
.text:000000000000264A                 jmp     short loc_2657
.text:000000000000264A ; ---------------------------------------------------------------------------
.text:000000000000264C                 align 10h
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: print_entry+65↓j
.text:0000000000002650                 movzx   ecx, byte ptr [rax]
.text:0000000000002653                 test    cl, cl
.text:0000000000002655                 jz      short loc_2667
.text:0000000000002657
.text:0000000000002657 loc_2657:                               ; CODE XREF: print_entry+4A↑j
.text:0000000000002657                                         ; print_entry+3D1↓j
.text:0000000000002657                 add     rax, 1
.text:000000000000265B                 add     rdx, 1
.text:000000000000265F                 mov     [rdx-1], cl
.text:0000000000002662                 cmp     rax, rdi
.text:0000000000002665                 jb      short loc_2650
.text:0000000000002667
.text:0000000000002667 loc_2667:                               ; CODE XREF: print_entry+55↑j
.text:0000000000002667                                         ; print_entry+3D7↓j
.text:0000000000002667                 mov     byte ptr [rdx], 0
.text:000000000000266A                 lea     rdx, [rsp+228h+stat_buf] ; stat_buf
.text:000000000000266F                 mov     edi, 1          ; ver
.text:0000000000002674                 call    ___xstat
.text:0000000000002679                 test    eax, eax
.text:000000000000267B                 jnz     loc_2870
.text:0000000000002681                 mov     eax, [rsp+228h+stat_buf.st_mode]
.text:0000000000002685                 mov     r14, [rsp+228h+stat_buf.st_atim.tv_sec]
.text:000000000000268A                 and     eax, 10h
.text:000000000000268D                 cmp     eax, 1
.text:0000000000002690                 sbb     r13d, r13d
.text:0000000000002693                 and     r13d, 0Ah
.text:0000000000002697                 add     r13d, 20h ; ' '
.text:000000000000269B
.text:000000000000269B loc_269B:                               ; CODE XREF: print_entry+279↓j
.text:000000000000269B                 lea     rbx, [rbp+2Ch]
.text:000000000000269F                 lea     rsi, a8S        ; "%-8.*s"
.text:00000000000026A6                 xor     eax, eax
.text:00000000000026A8                 mov     edx, 20h ; ' '
.text:00000000000026AD                 mov     edi, 1
.text:00000000000026B2                 mov     rcx, rbx
.text:00000000000026B5                 call    ___printf_chk
.text:00000000000026BA                 cmp     cs:include_fullname, 0
.text:00000000000026C1                 jz      short loc_2740
.text:00000000000026C3                 movzx   edx, byte ptr [rbp+2Ch]
.text:00000000000026C7                 lea     r15, [rsp+228h+name]
.text:00000000000026CF                 lea     rcx, [rbp+4Ch]
.text:00000000000026D3                 mov     rax, r15
.text:00000000000026D6                 test    dl, dl
.text:00000000000026D8                 jnz     loc_285B
.text:00000000000026DE                 xchg    ax, ax
.text:00000000000026E0
.text:00000000000026E0 loc_26E0:                               ; CODE XREF: print_entry+255↓j
.text:00000000000026E0                                         ; print_entry+26B↓j
.text:00000000000026E0                 mov     byte ptr [rax], 0
.text:00000000000026E3                 mov     rdi, r15        ; name
.text:00000000000026E6                 call    _getpwnam
.text:00000000000026EB                 test    rax, rax
.text:00000000000026EE                 mov     rbx, rax
.text:00000000000026F1                 jz      loc_2A00
.text:00000000000026F7                 mov     r15, [rax+18h]
.text:00000000000026FB                 mov     esi, 2Ch ; ','  ; c
.text:0000000000002700                 mov     rdi, r15        ; s
.text:0000000000002703                 call    _strchr
.text:0000000000002708                 test    rax, rax
.text:000000000000270B                 jz      short loc_2714
.text:000000000000270D                 mov     byte ptr [rax], 0
.text:0000000000002710                 mov     r15, [rbx+18h]
.text:0000000000002714
.text:0000000000002714 loc_2714:                               ; CODE XREF: print_entry+10B↑j
.text:0000000000002714                 mov     rsi, [rbx]
.text:0000000000002717                 mov     rdi, r15
.text:000000000000271A                 call    create_fullname
.text:000000000000271F                 lea     rsi, a1919s     ; " %-19.19s"
.text:0000000000002726                 mov     rbx, rax
.text:0000000000002729                 mov     rdx, rax
.text:000000000000272C                 mov     edi, 1
.text:0000000000002731                 xor     eax, eax
.text:0000000000002733                 call    ___printf_chk
.text:0000000000002738                 mov     rdi, rbx        ; ptr
.text:000000000000273B                 call    _free
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: print_entry+C1↑j
.text:0000000000002740                                         ; print_entry+429↓j
.text:0000000000002740                 lea     rsi, unk_5CD8
.text:0000000000002747                 xor     eax, eax
.text:0000000000002749                 mov     r8, r12
.text:000000000000274C                 mov     ecx, 20h ; ' '
.text:0000000000002751                 mov     edx, r13d
.text:0000000000002754                 mov     edi, 1
.text:0000000000002759                 call    ___printf_chk
.text:000000000000275E                 cmp     cs:include_idle, 0
.text:0000000000002765                 jz      short loc_2799
.text:0000000000002767                 test    r14, r14
.text:000000000000276A                 jnz     loc_2920
.text:0000000000002770                 lea     rsi, asc_5CF7   ; "?????"
.text:0000000000002777                 mov     edx, 5          ; category
.text:000000000000277C                 xor     edi, edi        ; domainname
.text:000000000000277E                 call    _dcgettext
.text:0000000000002783                 mov     rdx, rax
.text:0000000000002786
.text:0000000000002786 loc_2786:                               ; CODE XREF: print_entry+33E↓j
.text:0000000000002786                                         ; print_entry+395↓j ...
.text:0000000000002786                 lea     rsi, a6s        ; " %-6s"
.text:000000000000278D                 mov     edi, 1
.text:0000000000002792                 xor     eax, eax
.text:0000000000002794                 call    ___printf_chk
.text:0000000000002799
.text:0000000000002799 loc_2799:                               ; CODE XREF: print_entry+165↑j
.text:0000000000002799                 movsxd  rax, dword ptr [rbp+154h]
.text:00000000000027A0                 lea     rdi, [rsp+228h+timer] ; timer
.text:00000000000027A5                 mov     [rsp+228h+timer], rax
.text:00000000000027AA                 call    _localtime
.text:00000000000027AF                 test    rax, rax
.text:00000000000027B2                 jz      loc_29E0
.text:00000000000027B8                 mov     rdx, cs:time_format ; format
.text:00000000000027BF                 lea     rdi, buf_7049   ; s
.text:00000000000027C6                 mov     rcx, rax        ; tp
.text:00000000000027C9                 mov     esi, 21h ; '!'  ; maxsize
.text:00000000000027CE                 call    _strftime
.text:00000000000027D3                 lea     rdx, buf_7049
.text:00000000000027DA
.text:00000000000027DA loc_27DA:                               ; CODE XREF: print_entry+3F4↓j
.text:00000000000027DA                 lea     rsi, format+3   ; " %s"
.text:00000000000027E1                 xor     eax, eax
.text:00000000000027E3                 mov     edi, 1
.text:00000000000027E8                 call    ___printf_chk
.text:00000000000027ED                 cmp     cs:include_where, 0
.text:00000000000027F4                 jz      short loc_2802
.text:00000000000027F6                 movzx   edx, byte ptr [rbp+4Ch]
.text:00000000000027FA                 test    dl, dl
.text:00000000000027FC                 jnz     loc_2880
.text:0000000000002802
.text:0000000000002802 loc_2802:                               ; CODE XREF: print_entry+1F4↑j
.text:0000000000002802                                         ; print_entry+30A↓j ...
.text:0000000000002802                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002809                 mov     rax, [rdi+28h]
.text:000000000000280D                 cmp     rax, [rdi+30h]
.text:0000000000002811                 jnb     loc_2A80
.text:0000000000002817                 lea     rdx, [rax+1]
.text:000000000000281B                 mov     [rdi+28h], rdx
.text:000000000000281F                 mov     byte ptr [rax], 0Ah
.text:0000000000002822
.text:0000000000002822 loc_2822:                               ; CODE XREF: print_entry+48A↓j
.text:0000000000002822                 mov     rax, [rsp+228h+var_40]
.text:000000000000282A                 xor     rax, fs:28h
.text:0000000000002833                 jnz     loc_2B39
.text:0000000000002839                 add     rsp, 1F8h
.text:0000000000002840                 pop     rbx
.text:0000000000002841                 pop     rbp
.text:0000000000002842                 pop     r12
.text:0000000000002844                 pop     r13
.text:0000000000002846                 pop     r14
.text:0000000000002848                 pop     r15
.text:000000000000284A                 retn
.text:000000000000284A ; ---------------------------------------------------------------------------
.text:000000000000284B                 align 10h
.text:0000000000002850
.text:0000000000002850 loc_2850:                               ; CODE XREF: print_entry+269↓j
.text:0000000000002850                 movzx   edx, byte ptr [rbx]
.text:0000000000002853                 test    dl, dl
.text:0000000000002855                 jz      loc_26E0
.text:000000000000285B
.text:000000000000285B loc_285B:                               ; CODE XREF: print_entry+D8↑j
.text:000000000000285B                 add     rbx, 1
.text:000000000000285F                 add     rax, 1
.text:0000000000002863                 mov     [rax-1], dl
.text:0000000000002866                 cmp     rcx, rbx
.text:0000000000002869                 ja      short loc_2850
.text:000000000000286B                 jmp     loc_26E0
.text:0000000000002870 ; ---------------------------------------------------------------------------
.text:0000000000002870
.text:0000000000002870 loc_2870:                               ; CODE XREF: print_entry+7B↑j
.text:0000000000002870                 mov     r13d, 3Fh ; '?'
.text:0000000000002876                 xor     r14d, r14d
.text:0000000000002879                 jmp     loc_269B
.text:0000000000002879 ; ---------------------------------------------------------------------------
.text:000000000000287E                 align 20h
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: print_entry+1FC↑j
.text:0000000000002880                 lea     r15, [rsp+228h+name]
.text:0000000000002888                 lea     rax, [rbp+4Ch]
.text:000000000000288C                 add     rbp, 14Ch
.text:0000000000002893                 mov     rcx, r15
.text:0000000000002896                 jmp     short loc_28A7
.text:0000000000002896 ; ---------------------------------------------------------------------------
.text:0000000000002898                 align 20h
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: print_entry+2B5↓j
.text:00000000000028A0                 movzx   edx, byte ptr [rax]
.text:00000000000028A3                 test    dl, dl
.text:00000000000028A5                 jz      short loc_28B7
.text:00000000000028A7
.text:00000000000028A7 loc_28A7:                               ; CODE XREF: print_entry+296↑j
.text:00000000000028A7                 add     rax, 1
.text:00000000000028AB                 add     rcx, 1
.text:00000000000028AF                 mov     [rcx-1], dl
.text:00000000000028B2                 cmp     rbp, rax
.text:00000000000028B5                 ja      short loc_28A0
.text:00000000000028B7
.text:00000000000028B7 loc_28B7:                               ; CODE XREF: print_entry+2A5↑j
.text:00000000000028B7                 mov     byte ptr [rcx], 0
.text:00000000000028BA                 mov     esi, 3Ah ; ':'  ; c
.text:00000000000028BF                 mov     rdi, r15        ; s
.text:00000000000028C2                 call    _strchr
.text:00000000000028C7                 test    rax, rax
.text:00000000000028CA                 jz      loc_2A50
.text:00000000000028D0                 mov     byte ptr [rax], 0
.text:00000000000028D3                 cmp     [rsp+228h+name], 0
.text:00000000000028DB                 lea     rcx, [rax+1]
.text:00000000000028DF                 jnz     loc_2AFD
.text:00000000000028E5
.text:00000000000028E5 loc_28E5:                               ; CODE XREF: print_entry+51B↓j
.text:00000000000028E5                 mov     rbx, r15
.text:00000000000028E8
.text:00000000000028E8 loc_28E8:                               ; CODE XREF: print_entry+515↓j
.text:00000000000028E8                 test    rcx, rcx
.text:00000000000028EB                 jz      loc_2A61
.text:00000000000028F1                 lea     rsi, aSS        ; " %s:%s"
.text:00000000000028F8                 mov     rdx, rbx
.text:00000000000028FB                 mov     edi, 1
.text:0000000000002900                 xor     eax, eax
.text:0000000000002902                 call    ___printf_chk
.text:0000000000002907
.text:0000000000002907 loc_2907:                               ; CODE XREF: print_entry+477↓j
.text:0000000000002907                 cmp     rbx, r15
.text:000000000000290A                 jz      loc_2802
.text:0000000000002910                 mov     rdi, rbx        ; ptr
.text:0000000000002913                 call    _free
.text:0000000000002918                 jmp     loc_2802
.text:0000000000002918 ; ---------------------------------------------------------------------------
.text:000000000000291D                 align 20h
.text:0000000000002920
.text:0000000000002920 loc_2920:                               ; CODE XREF: print_entry+16A↑j
.text:0000000000002920                 mov     rcx, cs:now_7040
.text:0000000000002927                 test    rcx, rcx
.text:000000000000292A                 jz      loc_2A30
.text:0000000000002930
.text:0000000000002930 loc_2930:                               ; CODE XREF: print_entry+443↓j
.text:0000000000002930                 sub     rcx, r14
.text:0000000000002933                 lea     rdx, asc_5CB6   ; "     "
.text:000000000000293A                 cmp     rcx, 3Bh ; ';'
.text:000000000000293E                 jle     loc_2786
.text:0000000000002944                 cmp     rcx, 1517Fh
.text:000000000000294B                 jle     loc_2A90
.text:0000000000002951                 mov     rax, rcx
.text:0000000000002954                 mov     rdx, 1845C8A0CE512957h
.text:000000000000295E                 sar     rcx, 3Fh
.text:0000000000002962                 imul    rdx
.text:0000000000002965                 lea     rdi, buf_7041
.text:000000000000296C                 mov     esi, 1
.text:0000000000002971                 xor     eax, eax
.text:0000000000002973                 sar     rdx, 0Dh
.text:0000000000002977                 sub     rdx, rcx
.text:000000000000297A                 lea     rcx, aLud       ; "%lud"
.text:0000000000002981                 mov     r8, rdx
.text:0000000000002984                 mov     edx, 16h
.text:0000000000002989                 call    ___sprintf_chk
.text:000000000000298E                 lea     rdx, buf_7041
.text:0000000000002995                 jmp     loc_2786
.text:0000000000002995 ; ---------------------------------------------------------------------------
.text:000000000000299A                 align 20h
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: print_entry+2E↑j
.text:00000000000029A0                 mov     eax, 2Fh ; '/'
.text:00000000000029A5                 lea     rsi, [rsp+228h+filename]
.text:00000000000029AD                 test    cl, cl
.text:00000000000029AF                 mov     [rsp+228h+var_174], ax
.text:00000000000029B7                 lea     rax, [rdi+8]
.text:00000000000029BB                 mov     dword ptr [rsp+228h+filename], 7665642Fh
.text:00000000000029C6                 lea     rdi, [rdi+28h]
.text:00000000000029CA                 lea     rdx, [rsi+5]
.text:00000000000029CE                 mov     r12, rax
.text:00000000000029D1                 jnz     loc_2657
.text:00000000000029D7                 jmp     loc_2667
.text:00000000000029D7 ; ---------------------------------------------------------------------------
.text:00000000000029DC                 align 20h
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: print_entry+1B2↑j
.text:00000000000029E0                 mov     rdi, [rsp+228h+timer]
.text:00000000000029E5                 lea     rsi, buf_7049
.text:00000000000029EC                 call    imaxtostr
.text:00000000000029F1                 mov     rdx, rax
.text:00000000000029F4                 jmp     loc_27DA
.text:00000000000029F4 ; ---------------------------------------------------------------------------
.text:00000000000029F9                 align 20h
.text:0000000000002A00
.text:0000000000002A00 loc_2A00:                               ; CODE XREF: print_entry+F1↑j
.text:0000000000002A00                 lea     rsi, asc_5CBC   ; "        ???"
.text:0000000000002A07                 xor     edi, edi        ; domainname
.text:0000000000002A09                 mov     edx, 5          ; category
.text:0000000000002A0E                 call    _dcgettext
.text:0000000000002A13                 lea     rsi, a19s_0     ; " %19s"
.text:0000000000002A1A                 mov     rdx, rax
.text:0000000000002A1D                 mov     edi, 1
.text:0000000000002A22                 xor     eax, eax
.text:0000000000002A24                 call    ___printf_chk
.text:0000000000002A29                 jmp     loc_2740
.text:0000000000002A29 ; ---------------------------------------------------------------------------
.text:0000000000002A2E                 align 10h
.text:0000000000002A30
.text:0000000000002A30 loc_2A30:                               ; CODE XREF: print_entry+32A↑j
.text:0000000000002A30                 lea     rdi, now_7040   ; timer
.text:0000000000002A37                 call    _time
.text:0000000000002A3C                 mov     rcx, cs:now_7040
.text:0000000000002A43                 jmp     loc_2930
.text:0000000000002A43 ; ---------------------------------------------------------------------------
.text:0000000000002A48                 align 10h
.text:0000000000002A50
.text:0000000000002A50 loc_2A50:                               ; CODE XREF: print_entry+2CA↑j
.text:0000000000002A50                 cmp     [rsp+228h+name], 0
.text:0000000000002A58                 jnz     loc_2B20
.text:0000000000002A5E
.text:0000000000002A5E loc_2A5E:                               ; CODE XREF: print_entry+534↓j
.text:0000000000002A5E                 mov     rbx, r15
.text:0000000000002A61
.text:0000000000002A61 loc_2A61:                               ; CODE XREF: print_entry+2EB↑j
.text:0000000000002A61                                         ; print_entry+52E↓j
.text:0000000000002A61                 lea     rsi, format+3   ; " %s"
.text:0000000000002A68                 mov     rdx, rbx
.text:0000000000002A6B                 mov     edi, 1
.text:0000000000002A70                 xor     eax, eax
.text:0000000000002A72                 call    ___printf_chk
.text:0000000000002A77                 jmp     loc_2907
.text:0000000000002A77 ; ---------------------------------------------------------------------------
.text:0000000000002A7C                 align 20h
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: print_entry+211↑j
.text:0000000000002A80                 mov     esi, 0Ah        ; int
.text:0000000000002A85                 call    ___overflow
.text:0000000000002A8A                 jmp     loc_2822
.text:0000000000002A8A ; ---------------------------------------------------------------------------
.text:0000000000002A8F                 align 10h
.text:0000000000002A90
.text:0000000000002A90 loc_2A90:                               ; CODE XREF: print_entry+34B↑j
.text:0000000000002A90                 mov     rax, rcx
.text:0000000000002A93                 mov     rdx, 48D159E26AF37C05h
.text:0000000000002A9D                 lea     rdi, buf_7041
.text:0000000000002AA4                 imul    rdx
.text:0000000000002AA7                 mov     rax, rcx
.text:0000000000002AAA                 mov     esi, 1
.text:0000000000002AAF                 sar     rax, 3Fh
.text:0000000000002AB3                 sar     rdx, 0Ah
.text:0000000000002AB7                 mov     r8, rdx
.text:0000000000002ABA                 mov     rdx, 8888888888888889h
.text:0000000000002AC4                 sub     r8, rax
.text:0000000000002AC7                 imul    rax, r8, 0E10h
.text:0000000000002ACE                 sub     rcx, rax
.text:0000000000002AD1                 mov     rax, rcx
.text:0000000000002AD4                 lea     rcx, a02d02d    ; "%02d:%02d"
.text:0000000000002ADB                 mul     rdx
.text:0000000000002ADE                 xor     eax, eax
.text:0000000000002AE0                 shr     rdx, 5
.text:0000000000002AE4                 mov     r9d, edx
.text:0000000000002AE7                 mov     edx, 16h
.text:0000000000002AEC                 call    ___sprintf_chk
.text:0000000000002AF1                 lea     rdx, buf_7041
.text:0000000000002AF8                 jmp     loc_2786
.text:0000000000002AFD ; ---------------------------------------------------------------------------
.text:0000000000002AFD
.text:0000000000002AFD loc_2AFD:                               ; CODE XREF: print_entry+2DF↑j
.text:0000000000002AFD                 mov     rdi, r15
.text:0000000000002B00                 mov     [rsp+228h+var_220], rcx
.text:0000000000002B05                 call    canon_host
.text:0000000000002B0A                 test    rax, rax
.text:0000000000002B0D                 mov     rbx, rax
.text:0000000000002B10                 mov     rcx, [rsp+228h+var_220]
.text:0000000000002B15                 jnz     loc_28E8
.text:0000000000002B1B                 jmp     loc_28E5
.text:0000000000002B20 ; ---------------------------------------------------------------------------
.text:0000000000002B20
.text:0000000000002B20 loc_2B20:                               ; CODE XREF: print_entry+458↑j
.text:0000000000002B20                 mov     rdi, r15
.text:0000000000002B23                 call    canon_host
.text:0000000000002B28                 test    rax, rax
.text:0000000000002B2B                 mov     rbx, rax
.text:0000000000002B2E                 jnz     loc_2A61
.text:0000000000002B34                 jmp     loc_2A5E
.text:0000000000002B39 ; ---------------------------------------------------------------------------
.text:0000000000002B39
.text:0000000000002B39 loc_2B39:                               ; CODE XREF: print_entry+233↑j
.text:0000000000002B39                 call    ___stack_chk_fail
.text:0000000000002B39 ; } // starts at 2600
.text:0000000000002B39 print_entry     endp
.text:0000000000002B39
.text:0000000000002B39 ; ---------------------------------------------------------------------------
.text:0000000000002B3E                 align 20h
.text:0000000000002B40
.text:0000000000002B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B40
.text:0000000000002B40 ; Attributes: noreturn
.text:0000000000002B40
.text:0000000000002B40 ; void __fastcall __noreturn usage(int status)
.text:0000000000002B40                 public usage
.text:0000000000002B40 usage           proc near               ; CODE XREF: main+483↑p
.text:0000000000002B40                                         ; main+4AE↑p
.text:0000000000002B40
.text:0000000000002B40 var_A8          = qword ptr -0A8h
.text:0000000000002B40 var_A0          = qword ptr -0A0h
.text:0000000000002B40 var_98          = qword ptr -98h
.text:0000000000002B40 var_90          = qword ptr -90h
.text:0000000000002B40 var_88          = qword ptr -88h
.text:0000000000002B40 var_80          = qword ptr -80h
.text:0000000000002B40 var_78          = qword ptr -78h
.text:0000000000002B40 var_70          = qword ptr -70h
.text:0000000000002B40 var_68          = qword ptr -68h
.text:0000000000002B40 var_60          = qword ptr -60h
.text:0000000000002B40 var_58          = qword ptr -58h
.text:0000000000002B40 var_50          = qword ptr -50h
.text:0000000000002B40 var_48          = qword ptr -48h
.text:0000000000002B40 var_40          = qword ptr -40h
.text:0000000000002B40 var_30          = qword ptr -30h
.text:0000000000002B40
.text:0000000000002B40 ; __unwind {
.text:0000000000002B40                 push    r13
.text:0000000000002B42                 push    r12
.text:0000000000002B44                 mov     edx, 5          ; category
.text:0000000000002B49                 push    rbp
.text:0000000000002B4A                 push    rbx
.text:0000000000002B4B                 mov     ebp, edi
.text:0000000000002B4D                 sub     rsp, 88h
.text:0000000000002B54                 mov     rbx, cs:program_name
.text:0000000000002B5B                 mov     rax, fs:28h
.text:0000000000002B64                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002B69                 xor     eax, eax
.text:0000000000002B6B                 test    edi, edi
.text:0000000000002B6D                 jz      short loc_2B9D
.text:0000000000002B6F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002B76                 xor     edi, edi        ; domainname
.text:0000000000002B78                 call    _dcgettext
.text:0000000000002B7D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002B84                 mov     rdx, rax
.text:0000000000002B87                 mov     rcx, rbx
.text:0000000000002B8A                 mov     esi, 1
.text:0000000000002B8F                 xor     eax, eax
.text:0000000000002B91                 call    ___fprintf_chk
.text:0000000000002B96
.text:0000000000002B96 loc_2B96:                               ; CODE XREF: usage+2C6↓j
.text:0000000000002B96                 mov     edi, ebp        ; status
.text:0000000000002B98                 call    _exit
.text:0000000000002B9D ; ---------------------------------------------------------------------------
.text:0000000000002B9D
.text:0000000000002B9D loc_2B9D:                               ; CODE XREF: usage+2D↑j
.text:0000000000002B9D                 lea     rsi, aUsageSOptionUs ; "Usage: %s [OPTION]... [USER]...\n"
.text:0000000000002BA4                 xor     edi, edi        ; domainname
.text:0000000000002BA6                 call    _dcgettext
.text:0000000000002BAB                 mov     rdx, rbx
.text:0000000000002BAE                 mov     rsi, rax
.text:0000000000002BB1                 mov     edi, 1
.text:0000000000002BB6                 xor     eax, eax
.text:0000000000002BB8                 call    ___printf_chk
.text:0000000000002BBD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002BC4                 lea     rsi, aLProduceLongFo ; "\n  -l              produce long format"...
.text:0000000000002BCB                 mov     edx, 5          ; category
.text:0000000000002BD0                 xor     edi, edi        ; domainname
.text:0000000000002BD2                 call    _dcgettext
.text:0000000000002BD7                 mov     rsi, rbx        ; stream
.text:0000000000002BDA                 mov     rdi, rax        ; s
.text:0000000000002BDD                 call    _fputs_unlocked
.text:0000000000002BE2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002BE9                 lea     rsi, aFOmitTheLineOf ; "  -f              omit the line of colu"...
.text:0000000000002BF0                 mov     edx, 5          ; category
.text:0000000000002BF5                 xor     edi, edi        ; domainname
.text:0000000000002BF7                 call    _dcgettext
.text:0000000000002BFC                 mov     rsi, rbx        ; stream
.text:0000000000002BFF                 mov     rdi, rax        ; s
.text:0000000000002C02                 call    _fputs_unlocked
.text:0000000000002C07                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002C0E                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002C15                 mov     edx, 5          ; category
.text:0000000000002C1A                 xor     edi, edi        ; domainname
.text:0000000000002C1C                 call    _dcgettext
.text:0000000000002C21                 mov     rsi, rbx        ; stream
.text:0000000000002C24                 mov     rdi, rax        ; s
.text:0000000000002C27                 call    _fputs_unlocked
.text:0000000000002C2C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002C33                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002C3A                 mov     edx, 5          ; category
.text:0000000000002C3F                 xor     edi, edi        ; domainname
.text:0000000000002C41                 call    _dcgettext
.text:0000000000002C46                 mov     rsi, rbx        ; stream
.text:0000000000002C49                 mov     rdi, rax        ; s
.text:0000000000002C4C                 lea     rbx, aPinky     ; "pinky"
.text:0000000000002C53                 call    _fputs_unlocked
.text:0000000000002C58                 lea     rsi, aALightweightFi ; "\nA lightweight 'finger' program;  prin"...
.text:0000000000002C5F                 mov     edx, 5          ; category
.text:0000000000002C64                 xor     edi, edi        ; domainname
.text:0000000000002C66                 call    _dcgettext
.text:0000000000002C6B                 lea     rdx, aVarRunUtmp ; "/var/run/utmp"
.text:0000000000002C72                 mov     rsi, rax
.text:0000000000002C75                 mov     edi, 1
.text:0000000000002C7A                 xor     eax, eax
.text:0000000000002C7C                 call    ___printf_chk
.text:0000000000002C81                 lea     rax, asc_5D18   ; "["
.text:0000000000002C88                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002C8F                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002C98                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002CA1                 mov     rdx, rsp
.text:0000000000002CA4                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002CA8                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002CAF                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002CB4                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002CBB                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002CC0                 lea     rax, domainname ; "coreutils"
.text:0000000000002CC7                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002CCC                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002CD3                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002CD8                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002CDF                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002CE4                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002CE9                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002CF0                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002CF5                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002CFC                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002D01                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002D06                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002D0B                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: usage+1ED↓j
.text:0000000000002D10                 add     rdx, 10h
.text:0000000000002D14                 mov     rdi, [rdx]
.text:0000000000002D17                 test    rdi, rdi
.text:0000000000002D1A                 jz      short loc_2D2F
.text:0000000000002D1C                 mov     ecx, 6
.text:0000000000002D21                 mov     rsi, rbx
.text:0000000000002D24                 repe cmpsb
.text:0000000000002D26                 setnbe  al
.text:0000000000002D29                 sbb     al, 0
.text:0000000000002D2B                 test    al, al
.text:0000000000002D2D                 jnz     short loc_2D10
.text:0000000000002D2F
.text:0000000000002D2F loc_2D2F:                               ; CODE XREF: usage+1DA↑j
.text:0000000000002D2F                 mov     r12, [rdx+8]
.text:0000000000002D33                 xor     edi, edi        ; domainname
.text:0000000000002D35                 mov     edx, 5          ; category
.text:0000000000002D3A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002D41                 test    r12, r12
.text:0000000000002D44                 jz      loc_2E0B
.text:0000000000002D4A                 call    _dcgettext
.text:0000000000002D4F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002D56                 lea     rdx, unk_5D8E
.text:0000000000002D5D                 mov     rsi, rax
.text:0000000000002D60                 mov     edi, 1
.text:0000000000002D65                 xor     eax, eax
.text:0000000000002D67                 call    ___printf_chk
.text:0000000000002D6C                 xor     esi, esi        ; locale
.text:0000000000002D6E                 mov     edi, 5          ; category
.text:0000000000002D73                 call    _setlocale
.text:0000000000002D78                 test    rax, rax
.text:0000000000002D7B                 jz      short loc_2D99
.text:0000000000002D7D                 lea     rsi, s2         ; "en_"
.text:0000000000002D84                 mov     edx, 3          ; n
.text:0000000000002D89                 mov     rdi, rax        ; s1
.text:0000000000002D8C                 call    _strncmp
.text:0000000000002D91                 test    eax, eax
.text:0000000000002D93                 jnz     loc_2EA0
.text:0000000000002D99
.text:0000000000002D99 loc_2D99:                               ; CODE XREF: usage+23B↑j
.text:0000000000002D99                                         ; usage+385↓j
.text:0000000000002D99                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002DA0                 xor     edi, edi        ; domainname
.text:0000000000002DA2                 mov     edx, 5          ; category
.text:0000000000002DA7                 call    _dcgettext
.text:0000000000002DAC                 lea     rcx, aPinky     ; "pinky"
.text:0000000000002DB3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002DBA                 mov     rsi, rax
.text:0000000000002DBD                 mov     edi, 1
.text:0000000000002DC2                 xor     eax, eax
.text:0000000000002DC4                 call    ___printf_chk
.text:0000000000002DC9                 cmp     r12, rbx
.text:0000000000002DCC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002DD3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002DDA                 cmovz   rbx, rcx
.text:0000000000002DDE
.text:0000000000002DDE loc_2DDE:                               ; CODE XREF: usage+354↓j
.text:0000000000002DDE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002DE5                 xor     edi, edi        ; domainname
.text:0000000000002DE7                 mov     edx, 5          ; category
.text:0000000000002DEC                 call    _dcgettext
.text:0000000000002DF1                 mov     rcx, rbx
.text:0000000000002DF4                 mov     rsi, rax
.text:0000000000002DF7                 mov     rdx, r12
.text:0000000000002DFA                 mov     edi, 1
.text:0000000000002DFF                 xor     eax, eax
.text:0000000000002E01                 call    ___printf_chk
.text:0000000000002E06                 jmp     loc_2B96
.text:0000000000002E0B ; ---------------------------------------------------------------------------
.text:0000000000002E0B
.text:0000000000002E0B loc_2E0B:                               ; CODE XREF: usage+204↑j
.text:0000000000002E0B                 call    _dcgettext
.text:0000000000002E10                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002E17                 lea     rdx, unk_5D8E
.text:0000000000002E1E                 mov     rsi, rax
.text:0000000000002E21                 mov     edi, 1
.text:0000000000002E26                 xor     eax, eax
.text:0000000000002E28                 call    ___printf_chk
.text:0000000000002E2D                 xor     esi, esi        ; locale
.text:0000000000002E2F                 mov     edi, 5          ; category
.text:0000000000002E34                 call    _setlocale
.text:0000000000002E39                 test    rax, rax
.text:0000000000002E3C                 jz      short loc_2E56
.text:0000000000002E3E                 lea     rsi, s2         ; "en_"
.text:0000000000002E45                 mov     edx, 3          ; n
.text:0000000000002E4A                 mov     rdi, rax        ; s1
.text:0000000000002E4D                 call    _strncmp
.text:0000000000002E52                 test    eax, eax
.text:0000000000002E54                 jnz     short loc_2E99
.text:0000000000002E56
.text:0000000000002E56 loc_2E56:                               ; CODE XREF: usage+2FC↑j
.text:0000000000002E56                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002E5D                 mov     edx, 5          ; category
.text:0000000000002E62                 xor     edi, edi        ; domainname
.text:0000000000002E64                 lea     r12, aPinky     ; "pinky"
.text:0000000000002E6B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002E72                 call    _dcgettext
.text:0000000000002E77                 lea     rcx, aPinky     ; "pinky"
.text:0000000000002E7E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002E85                 mov     rsi, rax
.text:0000000000002E88                 mov     edi, 1
.text:0000000000002E8D                 xor     eax, eax
.text:0000000000002E8F                 call    ___printf_chk
.text:0000000000002E94                 jmp     loc_2DDE
.text:0000000000002E99 ; ---------------------------------------------------------------------------
.text:0000000000002E99
.text:0000000000002E99 loc_2E99:                               ; CODE XREF: usage+314↑j
.text:0000000000002E99                 lea     r12, aPinky     ; "pinky"
.text:0000000000002EA0
.text:0000000000002EA0 loc_2EA0:                               ; CODE XREF: usage+253↑j
.text:0000000000002EA0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002EA7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002EAE                 xor     edi, edi        ; domainname
.text:0000000000002EB0                 mov     edx, 5          ; category
.text:0000000000002EB5                 call    _dcgettext
.text:0000000000002EBA                 mov     rsi, r13        ; stream
.text:0000000000002EBD                 mov     rdi, rax        ; s
.text:0000000000002EC0                 call    _fputs_unlocked
.text:0000000000002EC5                 jmp     loc_2D99
.text:0000000000002EC5 ; } // starts at 2B40
.text:0000000000002EC5 usage           endp
.text:0000000000002EC5
.text:0000000000002EC5 ; ---------------------------------------------------------------------------
.text:0000000000002ECA                 align 10h
.text:0000000000002ED0
.text:0000000000002ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002ED0
.text:0000000000002ED0
.text:0000000000002ED0 ; __int64 __fastcall canon_host_r(char *s)
.text:0000000000002ED0                 public canon_host_r
.text:0000000000002ED0 canon_host_r    proc near               ; CODE XREF: canon_host+7↓j
.text:0000000000002ED0
.text:0000000000002ED0 ai              = qword ptr -28h
.text:0000000000002ED0 var_20          = qword ptr -20h
.text:0000000000002ED0
.text:0000000000002ED0 ; __unwind {
.text:0000000000002ED0                 push    r12
.text:0000000000002ED2                 push    rbp
.text:0000000000002ED3                 lea     rdx, hints_3317 ; req
.text:0000000000002EDA                 push    rbx
.text:0000000000002EDB                 mov     rbx, rsi
.text:0000000000002EDE                 xor     esi, esi        ; service
.text:0000000000002EE0                 mov     rbp, rdi
.text:0000000000002EE3                 sub     rsp, 10h
.text:0000000000002EE7                 mov     cs:hints_3317.ai_flags, 2
.text:0000000000002EF1                 mov     rcx, rsp        ; pai
.text:0000000000002EF4                 mov     [rsp+28h+ai], 0
.text:0000000000002EFC                 mov     rax, fs:28h
.text:0000000000002F05                 mov     [rsp+28h+var_20], rax
.text:0000000000002F0A                 xor     eax, eax
.text:0000000000002F0C                 call    _getaddrinfo
.text:0000000000002F11                 test    eax, eax
.text:0000000000002F13                 jnz     short loc_2F68
.text:0000000000002F15                 mov     r12, [rsp+28h+ai]
.text:0000000000002F19                 mov     rdi, [r12+20h]
.text:0000000000002F1E                 test    rdi, rdi
.text:0000000000002F21                 cmovz   rdi, rbp        ; s
.text:0000000000002F25                 call    _strdup
.text:0000000000002F2A                 test    rax, rax
.text:0000000000002F2D                 mov     rbp, rax
.text:0000000000002F30                 jnz     short loc_2F3D
.text:0000000000002F32                 test    rbx, rbx
.text:0000000000002F35                 jz      short loc_2F3D
.text:0000000000002F37                 mov     dword ptr [rbx], 0FFFFFFF6h
.text:0000000000002F3D
.text:0000000000002F3D loc_2F3D:                               ; CODE XREF: canon_host_r+60↑j
.text:0000000000002F3D                                         ; canon_host_r+65↑j
.text:0000000000002F3D                 mov     rdi, r12        ; ai
.text:0000000000002F40                 call    _freeaddrinfo
.text:0000000000002F45
.text:0000000000002F45 loc_2F45:                               ; CODE XREF: canon_host_r+9D↓j
.text:0000000000002F45                                         ; canon_host_r+A1↓j
.text:0000000000002F45                 mov     rdx, [rsp+28h+var_20]
.text:0000000000002F4A                 xor     rdx, fs:28h
.text:0000000000002F53                 mov     rax, rbp
.text:0000000000002F56                 jnz     short loc_2F73
.text:0000000000002F58                 add     rsp, 10h
.text:0000000000002F5C                 pop     rbx
.text:0000000000002F5D                 pop     rbp
.text:0000000000002F5E                 pop     r12
.text:0000000000002F60                 retn
.text:0000000000002F60 ; ---------------------------------------------------------------------------
.text:0000000000002F61                 align 8
.text:0000000000002F68
.text:0000000000002F68 loc_2F68:                               ; CODE XREF: canon_host_r+43↑j
.text:0000000000002F68                 xor     ebp, ebp
.text:0000000000002F6A                 test    rbx, rbx
.text:0000000000002F6D                 jz      short loc_2F45
.text:0000000000002F6F                 mov     [rbx], eax
.text:0000000000002F71                 jmp     short loc_2F45
.text:0000000000002F73 ; ---------------------------------------------------------------------------
.text:0000000000002F73
.text:0000000000002F73 loc_2F73:                               ; CODE XREF: canon_host_r+86↑j
.text:0000000000002F73                 call    ___stack_chk_fail
.text:0000000000002F73 ; } // starts at 2ED0
.text:0000000000002F73 canon_host_r    endp
.text:0000000000002F73
.text:0000000000002F73 ; ---------------------------------------------------------------------------
.text:0000000000002F78                 align 20h
.text:0000000000002F80
.text:0000000000002F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F80
.text:0000000000002F80
.text:0000000000002F80                 public canon_host
.text:0000000000002F80 canon_host      proc near               ; CODE XREF: print_entry+505↑p
.text:0000000000002F80                                         ; print_entry+523↑p
.text:0000000000002F80 ; __unwind {
.text:0000000000002F80                 lea     rsi, last_cherror
.text:0000000000002F87                 jmp     canon_host_r
.text:0000000000002F87 ; } // starts at 2F80
.text:0000000000002F87 canon_host      endp
.text:0000000000002F87
.text:0000000000002F87 ; ---------------------------------------------------------------------------
.text:0000000000002F8C                 align 10h
.text:0000000000002F90
.text:0000000000002F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F90
.text:0000000000002F90
.text:0000000000002F90                 public ch_strerror
.text:0000000000002F90 ch_strerror     proc near
.text:0000000000002F90 ; __unwind {
.text:0000000000002F90                 mov     edi, cs:last_cherror ; ecode
.text:0000000000002F96                 jmp     _gai_strerror
.text:0000000000002F96 ; } // starts at 2F90
.text:0000000000002F96 ch_strerror     endp
.text:0000000000002F96
.text:0000000000002F96 ; ---------------------------------------------------------------------------
.text:0000000000002F9B                 align 20h
.text:0000000000002FA0
.text:0000000000002FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FA0
.text:0000000000002FA0
.text:0000000000002FA0                 public close_stdout_set_file_name
.text:0000000000002FA0 close_stdout_set_file_name proc near
.text:0000000000002FA0 ; __unwind {
.text:0000000000002FA0                 mov     cs:file_name, rdi
.text:0000000000002FA7                 retn
.text:0000000000002FA7 ; } // starts at 2FA0
.text:0000000000002FA7 close_stdout_set_file_name endp
.text:0000000000002FA7
.text:0000000000002FA7 ; ---------------------------------------------------------------------------
.text:0000000000002FA8                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FB0
.text:0000000000002FB0
.text:0000000000002FB0                 public close_stdout_set_ignore_EPIPE
.text:0000000000002FB0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002FB0 ; __unwind {
.text:0000000000002FB0                 mov     cs:ignore_EPIPE, dil
.text:0000000000002FB7                 retn
.text:0000000000002FB7 ; } // starts at 2FB0
.text:0000000000002FB7 close_stdout_set_ignore_EPIPE endp
.text:0000000000002FB7
.text:0000000000002FB7 ; ---------------------------------------------------------------------------
.text:0000000000002FB8                 align 20h
.text:0000000000002FC0
.text:0000000000002FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FC0
.text:0000000000002FC0 ; Attributes: info_from_lumina
.text:0000000000002FC0
.text:0000000000002FC0 ; void __cdecl close_stdout()
.text:0000000000002FC0                 public close_stdout
.text:0000000000002FC0 close_stdout    proc near               ; DATA XREF: main+62↑o
.text:0000000000002FC0 ; __unwind {
.text:0000000000002FC0                 push    rbp
.text:0000000000002FC1                 push    rbx
.text:0000000000002FC2                 sub     rsp, 8
.text:0000000000002FC6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002FCD                 call    close_stream
.text:0000000000002FD2                 test    eax, eax
.text:0000000000002FD4                 jz      short loc_2FEC
.text:0000000000002FD6                 call    ___errno_location
.text:0000000000002FDB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002FE2                 mov     rbx, rax
.text:0000000000002FE5                 jz      short loc_3003
.text:0000000000002FE7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000002FEA                 jnz     short loc_3003
.text:0000000000002FEC
.text:0000000000002FEC loc_2FEC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000002FEC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002FF3                 call    close_stream
.text:0000000000002FF8                 test    eax, eax
.text:0000000000002FFA                 jnz     short loc_3042
.text:0000000000002FFC                 add     rsp, 8
.text:0000000000003000                 pop     rbx
.text:0000000000003001                 pop     rbp
.text:0000000000003002                 retn
.text:0000000000003003 ; ---------------------------------------------------------------------------
.text:0000000000003003
.text:0000000000003003 loc_3003:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003003                                         ; close_stdout+2A↑j
.text:0000000000003003                 lea     rsi, aWriteError ; "write error"
.text:000000000000300A                 xor     edi, edi        ; domainname
.text:000000000000300C                 mov     edx, 5          ; category
.text:0000000000003011                 call    _dcgettext
.text:0000000000003016                 mov     rdi, cs:file_name
.text:000000000000301D                 mov     rbp, rax
.text:0000000000003020                 test    rdi, rdi
.text:0000000000003023                 jz      short loc_304D
.text:0000000000003025                 call    quotearg_colon
.text:000000000000302A                 mov     esi, [rbx]      ; errnum
.text:000000000000302C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003033                 mov     rcx, rax
.text:0000000000003036                 mov     r8, rbp
.text:0000000000003039                 xor     edi, edi        ; status
.text:000000000000303B                 xor     eax, eax
.text:000000000000303D                 call    _error
.text:0000000000003042
.text:0000000000003042 loc_3042:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003042                                         ; close_stdout+A2↓j
.text:0000000000003042                 mov     edi, cs:exit_failure ; status
.text:0000000000003048                 call    __exit
.text:000000000000304D ; ---------------------------------------------------------------------------
.text:000000000000304D
.text:000000000000304D loc_304D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000304D                 mov     esi, [rbx]      ; errnum
.text:000000000000304F                 lea     rdx, format+4   ; format
.text:0000000000003056                 mov     rcx, rax
.text:0000000000003059                 xor     edi, edi        ; status
.text:000000000000305B                 xor     eax, eax
.text:000000000000305D                 call    _error
.text:0000000000003062                 jmp     short loc_3042
.text:0000000000003062 ; } // starts at 2FC0
.text:0000000000003062 close_stdout    endp
.text:0000000000003062
.text:0000000000003062 ; ---------------------------------------------------------------------------
.text:0000000000003064                 align 10h
.text:0000000000003070
.text:0000000000003070 ; =============== S U B R O U T I N E =======================================
.text:0000000000003070
.text:0000000000003070
.text:0000000000003070                 public hard_locale
.text:0000000000003070 hard_locale     proc near               ; CODE XREF: main+287↑p
.text:0000000000003070                                         ; rpl_mbrtowc+47↓p
.text:0000000000003070 ; __unwind {
.text:0000000000003070                 sub     rsp, 8
.text:0000000000003074                 xor     esi, esi        ; locale
.text:0000000000003076                 call    _setlocale
.text:000000000000307B                 mov     rdx, rax
.text:000000000000307E                 mov     eax, 1
.text:0000000000003083                 test    rdx, rdx
.text:0000000000003086                 jz      short loc_30A5
.text:0000000000003088                 lea     rdi, aC         ; "C"
.text:000000000000308F                 mov     ecx, 2
.text:0000000000003094                 mov     rsi, rdx
.text:0000000000003097                 repe cmpsb
.text:0000000000003099                 setnbe  cl
.text:000000000000309C                 sbb     cl, 0
.text:000000000000309F                 xor     eax, eax
.text:00000000000030A1                 test    cl, cl
.text:00000000000030A3                 jnz     short loc_30B0
.text:00000000000030A5
.text:00000000000030A5 loc_30A5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000030A5                 add     rsp, 8
.text:00000000000030A9                 retn
.text:00000000000030A9 ; ---------------------------------------------------------------------------
.text:00000000000030AA                 align 10h
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000030B0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000030B7                 mov     ecx, 6
.text:00000000000030BC                 mov     rsi, rdx
.text:00000000000030BF                 repe cmpsb
.text:00000000000030C1                 setnbe  al
.text:00000000000030C4                 sbb     al, 0
.text:00000000000030C6                 test    al, al
.text:00000000000030C8                 setnz   al
.text:00000000000030CB                 add     rsp, 8
.text:00000000000030CF                 retn
.text:00000000000030CF ; } // starts at 3070
.text:00000000000030CF hard_locale     endp
.text:00000000000030CF
.text:00000000000030D0
.text:00000000000030D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030D0
.text:00000000000030D0 ; Attributes: info_from_lumina
.text:00000000000030D0
.text:00000000000030D0 ; char *__fastcall imaxtostr(intmax_t i, char *buf)
.text:00000000000030D0                 public imaxtostr
.text:00000000000030D0 imaxtostr       proc near               ; CODE XREF: print_entry+3EC↑p
.text:00000000000030D0 ; __unwind {
.text:00000000000030D0                 test    rdi, rdi
.text:00000000000030D3                 lea     rcx, [rsi+14h]
.text:00000000000030D7                 mov     byte ptr [rsi+14h], 0
.text:00000000000030DB                 mov     r9, 6666666666666667h
.text:00000000000030E5                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:00000000000030EF                 mov     r8d, 30h ; '0'
.text:00000000000030F5                 js      short loc_3133
.text:00000000000030F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: imaxtostr+54↓j
.text:0000000000003100                 mov     rax, rdi
.text:0000000000003103                 sub     rcx, 1
.text:0000000000003107                 mul     rsi
.text:000000000000310A                 shr     rdx, 3
.text:000000000000310E                 lea     rax, [rdx+rdx*4]
.text:0000000000003112                 add     rax, rax
.text:0000000000003115                 sub     rdi, rax
.text:0000000000003118                 add     edi, 30h ; '0'
.text:000000000000311B                 test    rdx, rdx
.text:000000000000311E                 mov     [rcx], dil
.text:0000000000003121                 mov     rdi, rdx
.text:0000000000003124                 jnz     short loc_3100
.text:0000000000003126                 mov     rax, rcx
.text:0000000000003129                 retn
.text:0000000000003129 ; ---------------------------------------------------------------------------
.text:000000000000312A                 align 10h
.text:0000000000003130
.text:0000000000003130 loc_3130:                               ; CODE XREF: imaxtostr+8E↓j
.text:0000000000003130                 mov     rcx, rsi
.text:0000000000003133
.text:0000000000003133 loc_3133:                               ; CODE XREF: imaxtostr+25↑j
.text:0000000000003133                 mov     rax, rdi
.text:0000000000003136                 lea     rsi, [rcx-1]
.text:000000000000313A                 imul    r9
.text:000000000000313D                 mov     rax, rdi
.text:0000000000003140                 sar     rax, 3Fh
.text:0000000000003144                 sar     rdx, 2
.text:0000000000003148                 sub     rdx, rax
.text:000000000000314B                 lea     rax, [rdx+rdx*4]
.text:000000000000314F                 lea     eax, [r8+rax*2]
.text:0000000000003153                 sub     eax, edi
.text:0000000000003155                 test    rdx, rdx
.text:0000000000003158                 mov     rdi, rdx
.text:000000000000315B                 mov     [rcx-1], al
.text:000000000000315E                 jnz     short loc_3130
.text:0000000000003160                 sub     rcx, 2
.text:0000000000003164                 mov     byte ptr [rsi-1], 2Dh ; '-'
.text:0000000000003168                 mov     rax, rcx
.text:000000000000316B                 retn
.text:000000000000316B ; } // starts at 30D0
.text:000000000000316B imaxtostr       endp
.text:000000000000316B
.text:000000000000316B ; ---------------------------------------------------------------------------
.text:000000000000316C                 align 10h
.text:0000000000003170
.text:0000000000003170 ; =============== S U B R O U T I N E =======================================
.text:0000000000003170
.text:0000000000003170
.text:0000000000003170                 public set_program_name
.text:0000000000003170 set_program_name proc near              ; CODE XREF: main+2D↑p
.text:0000000000003170 ; __unwind {
.text:0000000000003170                 test    rdi, rdi
.text:0000000000003173                 push    rbx
.text:0000000000003174                 jz      short loc_31ED
.text:0000000000003176                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000317B                 mov     rbx, rdi
.text:000000000000317E                 call    _strrchr
.text:0000000000003183                 test    rax, rax
.text:0000000000003186                 jz      short loc_31DD
.text:0000000000003188                 lea     r8, [rax+1]
.text:000000000000318C                 mov     rdx, r8
.text:000000000000318F                 sub     rdx, rbx
.text:0000000000003192                 cmp     rdx, 6
.text:0000000000003196                 jle     short loc_31DD
.text:0000000000003198                 lea     rsi, [rax-6]
.text:000000000000319C                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000031A3                 mov     ecx, 7
.text:00000000000031A8                 repe cmpsb
.text:00000000000031AA                 setnbe  dl
.text:00000000000031AD                 sbb     dl, 0
.text:00000000000031B0                 test    dl, dl
.text:00000000000031B2                 jnz     short loc_31DD
.text:00000000000031B4                 lea     rdi, aLt        ; "lt-"
.text:00000000000031BB                 mov     ecx, 3
.text:00000000000031C0                 mov     rsi, r8
.text:00000000000031C3                 mov     rbx, r8
.text:00000000000031C6                 repe cmpsb
.text:00000000000031C8                 setnbe  dl
.text:00000000000031CB                 sbb     dl, 0
.text:00000000000031CE                 test    dl, dl
.text:00000000000031D0                 jnz     short loc_31DD
.text:00000000000031D2                 lea     rbx, [rax+4]
.text:00000000000031D6                 mov     cs:__bss_start, rbx
.text:00000000000031DD
.text:00000000000031DD loc_31DD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000031DD                                         ; set_program_name+26↑j ...
.text:00000000000031DD                 mov     cs:program_name, rbx
.text:00000000000031E4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000031EB                 pop     rbx
.text:00000000000031EC                 retn
.text:00000000000031ED ; ---------------------------------------------------------------------------
.text:00000000000031ED
.text:00000000000031ED loc_31ED:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000031ED                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000031F4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000031FB                 mov     edx, 37h ; '7'  ; n
.text:0000000000003200                 mov     esi, 1          ; size
.text:0000000000003205                 call    _fwrite
.text:000000000000320A                 call    _abort
.text:000000000000320A ; } // starts at 3170
.text:000000000000320A set_program_name endp
.text:000000000000320A
.text:000000000000320A ; ---------------------------------------------------------------------------
.text:000000000000320F                 align 10h
.text:0000000000003210
.text:0000000000003210 ; =============== S U B R O U T I N E =======================================
.text:0000000000003210
.text:0000000000003210 ; Attributes: info_from_lumina
.text:0000000000003210
.text:0000000000003210 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000003210 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000003210                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000003210 ; __unwind {
.text:0000000000003210                 push    rbp
.text:0000000000003211                 push    rbx
.text:0000000000003212                 mov     rbp, rdi
.text:0000000000003215                 mov     ebx, esi
.text:0000000000003217                 sub     rsp, 8
.text:000000000000321B                 call    locale_charset
.text:0000000000003220                 movzx   edx, byte ptr [rax]
.text:0000000000003223                 and     edx, 0FFFFFFDFh
.text:0000000000003226                 cmp     dl, 55h ; 'U'
.text:0000000000003229                 jz      short loc_32A0
.text:000000000000322B                 cmp     dl, 47h ; 'G'
.text:000000000000322E                 jz      short loc_3250
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000003230                                         ; gettext_quote+50↓j ...
.text:0000000000003230                 lea     rax, unk_6363
.text:0000000000003237                 lea     rdx, asc_6365   ; "'"
.text:000000000000323E                 cmp     ebx, 9
.text:0000000000003241                 cmovnz  rax, rdx
.text:0000000000003245                 add     rsp, 8
.text:0000000000003249                 pop     rbx
.text:000000000000324A                 pop     rbp
.text:000000000000324B                 retn
.text:000000000000324B ; ---------------------------------------------------------------------------
.text:000000000000324C                 align 10h
.text:0000000000003250
.text:0000000000003250 loc_3250:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003250                 movzx   edx, byte ptr [rax+1]
.text:0000000000003254                 and     edx, 0FFFFFFDFh
.text:0000000000003257                 cmp     dl, 42h ; 'B'
.text:000000000000325A                 jnz     short loc_3230
.text:000000000000325C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003260                 jnz     short loc_3230
.text:0000000000003262                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003266                 jnz     short loc_3230
.text:0000000000003268                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000326C                 jnz     short loc_3230
.text:000000000000326E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003272                 jnz     short loc_3230
.text:0000000000003274                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003278                 jnz     short loc_3230
.text:000000000000327A                 cmp     byte ptr [rax+7], 0
.text:000000000000327E                 jnz     short loc_3230
.text:0000000000003280                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003284                 lea     rax, unk_635C
.text:000000000000328B                 lea     rdx, unk_6360
.text:0000000000003292                 cmovnz  rax, rdx
.text:0000000000003296                 add     rsp, 8
.text:000000000000329A                 pop     rbx
.text:000000000000329B                 pop     rbp
.text:000000000000329C                 retn
.text:000000000000329C ; ---------------------------------------------------------------------------
.text:000000000000329D                 align 20h
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000032A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000032A4                 and     edx, 0FFFFFFDFh
.text:00000000000032A7                 cmp     dl, 54h ; 'T'
.text:00000000000032AA                 jnz     short loc_3230
.text:00000000000032AC                 movzx   edx, byte ptr [rax+2]
.text:00000000000032B0                 and     edx, 0FFFFFFDFh
.text:00000000000032B3                 cmp     dl, 46h ; 'F'
.text:00000000000032B6                 jnz     loc_3230
.text:00000000000032BC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000032C0                 jnz     loc_3230
.text:00000000000032C6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000032CA                 jnz     loc_3230
.text:00000000000032D0                 cmp     byte ptr [rax+5], 0
.text:00000000000032D4                 jnz     loc_3230
.text:00000000000032DA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000032DE                 lea     rax, unk_6354
.text:00000000000032E5                 lea     rdx, unk_6358
.text:00000000000032EC                 cmovnz  rax, rdx
.text:00000000000032F0                 add     rsp, 8
.text:00000000000032F4                 pop     rbx
.text:00000000000032F5                 pop     rbp
.text:00000000000032F6                 retn
.text:00000000000032F6 ; } // starts at 3210
.text:00000000000032F6 gettext_quote   endp
.text:00000000000032F6
.text:00000000000032F6 ; ---------------------------------------------------------------------------
.text:00000000000032F7                 align 20h
.text:0000000000003300
.text:0000000000003300 ; =============== S U B R O U T I N E =======================================
.text:0000000000003300
.text:0000000000003300 ; Attributes: info_from_lumina
.text:0000000000003300
.text:0000000000003300 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003300 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003300                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003300
.text:0000000000003300 var_E0          = dword ptr -0E0h
.text:0000000000003300 var_DB          = byte ptr -0DBh
.text:0000000000003300 var_DA          = byte ptr -0DAh
.text:0000000000003300 var_D9          = byte ptr -0D9h
.text:0000000000003300 s               = qword ptr -0D8h
.text:0000000000003300 n               = qword ptr -0D0h
.text:0000000000003300 var_C8          = qword ptr -0C8h
.text:0000000000003300 ps              = qword ptr -0C0h
.text:0000000000003300 var_B8          = qword ptr -0B8h
.text:0000000000003300 var_B0          = qword ptr -0B0h
.text:0000000000003300 var_A8          = qword ptr -0A8h
.text:0000000000003300 s2              = qword ptr -0A0h
.text:0000000000003300 var_98          = qword ptr -98h
.text:0000000000003300 var_90          = qword ptr -90h
.text:0000000000003300 var_88          = qword ptr -88h
.text:0000000000003300 var_80          = qword ptr -80h
.text:0000000000003300 var_78          = qword ptr -78h
.text:0000000000003300 var_70          = dword ptr -70h
.text:0000000000003300 var_6C          = byte ptr -6Ch
.text:0000000000003300 var_6B          = byte ptr -6Bh
.text:0000000000003300 var_6A          = byte ptr -6Ah
.text:0000000000003300 var_69          = byte ptr -69h
.text:0000000000003300 var_68          = qword ptr -68h
.text:0000000000003300 var_60          = qword ptr -60h
.text:0000000000003300 wc              = dword ptr -4Ch
.text:0000000000003300 var_48          = qword ptr -48h
.text:0000000000003300 var_40          = qword ptr -40h
.text:0000000000003300 arg_0           = qword ptr  8
.text:0000000000003300 arg_8           = qword ptr  10h
.text:0000000000003300 arg_10          = qword ptr  18h
.text:0000000000003300
.text:0000000000003300 ; __unwind {
.text:0000000000003300                 push    r15
.text:0000000000003302                 push    r14
.text:0000000000003304                 mov     r15d, r8d
.text:0000000000003307                 push    r13
.text:0000000000003309                 push    r12
.text:000000000000330B                 mov     r14, rdi
.text:000000000000330E                 push    rbp
.text:000000000000330F                 push    rbx
.text:0000000000003310                 mov     ebx, r9d
.text:0000000000003313                 mov     r13, rsi
.text:0000000000003316                 mov     rbp, rcx
.text:0000000000003319                 and     ebx, 2
.text:000000000000331C                 sub     rsp, 0B8h
.text:0000000000003323                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000332B                 mov     [rsp+0E8h+s], rdx
.text:0000000000003330                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003335                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000333A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000333F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003347                 mov     [rsp+0E8h+var_80], rax
.text:000000000000334C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003354                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003359                 mov     rax, fs:28h
.text:0000000000003362                 mov     [rsp+0E8h+var_40], rax
.text:000000000000336A                 xor     eax, eax
.text:000000000000336C                 call    ___ctype_get_mb_cur_max
.text:0000000000003371                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003375                 mov     [rsp+0E8h+var_90], rax
.text:000000000000337A                 ja      def_3391        ; jumptable 00000000000121F1 default case
.text:0000000000003380                 lea     rcx, jpt_3391
.text:0000000000003387                 mov     edx, r15d
.text:000000000000338A                 movsxd  rax, ds:(jpt_3391 - 63C0h)[rcx+rdx*4]
.text:000000000000338E                 add     rax, rcx
.text:0000000000003391                 jmp     rax             ; switch jump
.text:0000000000003393 ; ---------------------------------------------------------------------------
.text:0000000000003393
.text:0000000000003393 loc_3393:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003393                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003393                                         ; DATA XREF: ...
.text:0000000000003393                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003398                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000339D                 xor     r12d, r12d
.text:00000000000033A0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033A9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000033AE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000033B3
.text:00000000000033B3 loc_33B3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000033B3                 lea     rax, asc_6365   ; "'"
.text:00000000000033BA                 mov     [rsp+0E8h+n], 1
.text:00000000000033C3                 xor     r15d, r15d
.text:00000000000033C6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033CE                 mov     [rsp+0E8h+s2], rax
.text:00000000000033D3
.text:00000000000033D3 loc_33D3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000033D3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000033D3                 xor     r11d, r11d
.text:00000000000033D6                 mov     rax, rbp
.text:00000000000033D9                 mov     r8d, r12d
.text:00000000000033DC                 mov     rbp, r11
.text:00000000000033DF                 mov     r11, rax
.text:00000000000033E2                 nop     word ptr [rax+rax+00h]
.text:00000000000033E8
.text:00000000000033E8 loc_33E8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000033E8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000033E8                 cmp     r11, rbp
.text:00000000000033EB                 setnz   r12b
.text:00000000000033EF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000033F3                 jnz     short loc_3402
.text:00000000000033F5                 mov     rax, [rsp+0E8h+s]
.text:00000000000033FA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000033FE                 setnz   r12b
.text:0000000000003402
.text:0000000000003402 loc_3402:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003402                 test    r12b, r12b
.text:0000000000003405                 jz      loc_3A60
.text:000000000000340B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003410                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003415                 lea     r9, [rdi+rbp]
.text:0000000000003419                 setnz   al
.text:000000000000341C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003420                 mov     r10d, eax
.text:0000000000003423                 jz      loc_34D0
.text:0000000000003429                 mov     rax, [rsp+0E8h+n]
.text:000000000000342E                 test    rax, rax
.text:0000000000003431                 jz      loc_3860
.text:0000000000003437                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000343B                 lea     rbx, [rbp+rax+0]
.text:0000000000003440                 jnz     short loc_3470
.text:0000000000003442                 cmp     rax, 1
.text:0000000000003446                 jbe     short loc_3470
.text:0000000000003448                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000344D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003452                 mov     [rsp+0E8h+ps], r9
.text:0000000000003457                 call    _strlen
.text:000000000000345C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003462                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003468                 mov     r11, rax
.text:000000000000346B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003470                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003470                 cmp     rbx, r11
.text:0000000000003473                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003478                 ja      loc_3A30
.text:000000000000347E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003483                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003488                 mov     rdi, r9         ; s1
.text:000000000000348B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003490                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003495                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000349A                 call    _memcmp
.text:000000000000349F                 test    eax, eax
.text:00000000000034A1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000034A6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000034AC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000034B1                 jnz     loc_3A30
.text:00000000000034B7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000034BC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000034C2                 jnz     loc_4445
.text:00000000000034C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000034D0
.text:00000000000034D0 loc_34D0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000034D0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000034D0                 movzx   ebx, byte ptr [r9]
.text:00000000000034D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000034D7                 ja      def_34EE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000034DD                 lea     rcx, jpt_34EE
.text:00000000000034E4                 movzx   edx, bl
.text:00000000000034E7                 movsxd  rax, ds:(jpt_34EE - 63ECh)[rcx+rdx*4]
.text:00000000000034EB                 add     rax, rcx
.text:00000000000034EE                 jmp     rax             ; switch jump
.text:00000000000034F0 ; ---------------------------------------------------------------------------
.text:00000000000034F0
.text:00000000000034F0 loc_34F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000034F0                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000034F0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000034F3
.text:00000000000034F3 loc_34F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000034F3                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:00000000000034F3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000034F7                 setnz   al
.text:00000000000034FA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000034FE                 jnz     short loc_350C
.text:0000000000003500                 mov     rax, [rsp+0E8h+s]
.text:0000000000003505                 cmp     byte ptr [rax+1], 0
.text:0000000000003509                 setnz   al
.text:000000000000350C
.text:000000000000350C loc_350C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000350C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003511                 setz    dl
.text:0000000000003514                 test    al, al
.text:0000000000003516                 jz      loc_3768
.text:000000000000351C
.text:000000000000351C loc_351C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000351C                 xor     r12d, r12d
.text:000000000000351F                 xor     eax, eax
.text:0000000000003521                 nop     dword ptr [rax+00000000h]
.text:0000000000003528
.text:0000000000003528 loc_3528:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003528                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003528                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000352D                 jnz     loc_3642
.text:0000000000003533                 test    dl, dl
.text:0000000000003535                 jnz     loc_3642
.text:000000000000353B
.text:000000000000353B loc_353B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000353B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003540                 test    rsi, rsi
.text:0000000000003543                 jz      short loc_3559
.text:0000000000003545                 mov     edx, ebx
.text:0000000000003547                 shr     dl, 5
.text:000000000000354A                 movzx   edx, dl
.text:000000000000354D                 mov     edx, [rsi+rdx*4]
.text:0000000000003550                 bt      edx, ebx
.text:0000000000003553                 jb      loc_36A3
.text:0000000000003559
.text:0000000000003559 loc_3559:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003559                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003559                 test    r10b, r10b
.text:000000000000355C                 jnz     loc_36A3
.text:0000000000003562                 xor     eax, 1
.text:0000000000003565                 add     rbp, 1
.text:0000000000003569                 and     eax, r8d
.text:000000000000356C
.text:000000000000356C loc_356C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000356C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000356C                 test    al, al
.text:000000000000356E                 jz      short loc_3590
.text:0000000000003570                 cmp     r13, r15
.text:0000000000003573                 jbe     short loc_357A
.text:0000000000003575                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000357A
.text:000000000000357A loc_357A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000357A                 lea     rax, [r15+1]
.text:000000000000357E                 cmp     r13, rax
.text:0000000000003581                 jbe     short loc_3589
.text:0000000000003583                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003589
.text:0000000000003589 loc_3589:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003589                 add     r15, 2
.text:000000000000358D                 xor     r8d, r8d
.text:0000000000003590
.text:0000000000003590 loc_3590:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003590                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003590                 cmp     r15, r13
.text:0000000000003593                 jnb     short loc_3599
.text:0000000000003595                 mov     [r14+r15], bl
.text:0000000000003599
.text:0000000000003599 loc_3599:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003599                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000359E                 add     r15, 1
.text:00000000000035A2                 mov     eax, 0
.text:00000000000035A7                 test    r12b, r12b
.text:00000000000035AA                 cmovz   edi, eax
.text:00000000000035AD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000035B2                 jmp     loc_33E8
.text:00000000000035B2 ; ---------------------------------------------------------------------------
.text:00000000000035B7                 align 20h
.text:00000000000035C0
.text:00000000000035C0 loc_35C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000035C0                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000035C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000035C3
.text:00000000000035C3 loc_35C3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035C3                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:00000000000035C3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000035C7                 cmp     eax, 2
.text:00000000000035CA                 jz      loc_3B88
.text:00000000000035D0                 cmp     eax, 5
.text:00000000000035D3                 jz      loc_3B48
.text:00000000000035D9                 cmp     eax, 2
.text:00000000000035DC                 mov     ebx, 3Fh ; '?'
.text:00000000000035E1                 setz    dl
.text:00000000000035E4                 xor     r12d, r12d
.text:00000000000035E7                 xor     eax, eax
.text:00000000000035E9                 jmp     loc_3528
.text:00000000000035E9 ; ---------------------------------------------------------------------------
.text:00000000000035EE                 align 10h
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000035F0                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000035F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000035F3
.text:00000000000035F3 loc_35F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035F3                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:00000000000035F3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000035F8                 jz      loc_3B00
.text:00000000000035FE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003603                 xor     edx, edx
.text:0000000000003605                 xor     eax, eax
.text:0000000000003607                 mov     ebx, 27h ; '''
.text:000000000000360C                 jmp     loc_3528
.text:000000000000360C ; ---------------------------------------------------------------------------
.text:0000000000003611                 align 8
.text:0000000000003618
.text:0000000000003618 loc_3618:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003618                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:0000000000003618                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000361D                 mov     ebx, 74h ; 't'
.text:0000000000003622
.text:0000000000003622 loc_3622:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003622                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003622                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003627                 setz    al
.text:000000000000362A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000362E                 jnz     loc_377E
.text:0000000000003634
.text:0000000000003634 loc_3634:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003634                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003634                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003639                 jnz     short loc_36A0
.text:000000000000363B
.text:000000000000363B loc_363B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000363B                 mov     ebx, edx
.text:000000000000363D                 xor     r12d, r12d
.text:0000000000003640                 xor     eax, eax
.text:0000000000003642
.text:0000000000003642 loc_3642:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003642                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003642                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003647                 jnz     loc_353B
.text:000000000000364D                 jmp     loc_3559
.text:000000000000364D ; ---------------------------------------------------------------------------
.text:0000000000003652                 align 8
.text:0000000000003658
.text:0000000000003658 loc_3658:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003658                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:0000000000003658                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000365D                 mov     ebx, 62h ; 'b'
.text:0000000000003662                 jmp     short loc_3634
.text:0000000000003662 ; ---------------------------------------------------------------------------
.text:0000000000003664                 align 8
.text:0000000000003668
.text:0000000000003668 loc_3668:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003668                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:0000000000003668                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000366D                 jz      loc_3A40
.text:0000000000003673                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003678                 jz      loc_3890
.text:000000000000367E
.text:000000000000367E loc_367E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000367E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003683                 jz      loc_3890
.text:0000000000003689                 cmp     [rsp+0E8h+n], 0
.text:000000000000368F                 jnz     loc_3A4B
.text:0000000000003695                 mov     ebx, 5Ch ; '\'
.text:000000000000369A                 nop     word ptr [rax+rax+00h]
.text:00000000000036A0
.text:00000000000036A0 loc_36A0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000036A0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000036A0                 xor     r12d, r12d
.text:00000000000036A3
.text:00000000000036A3 loc_36A3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000036A3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000036A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000036A8                 setz    dl
.text:00000000000036AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000036B0                 mov     eax, edx
.text:00000000000036B2                 jnz     loc_3F08
.text:00000000000036B8                 mov     eax, r8d
.text:00000000000036BB                 xor     eax, 1
.text:00000000000036BE                 and     al, dl
.text:00000000000036C0                 jz      short loc_36F1
.text:00000000000036C2                 cmp     r13, r15
.text:00000000000036C5                 jbe     short loc_36CC
.text:00000000000036C7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000036CC
.text:00000000000036CC loc_36CC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000036CC                 lea     rdx, [r15+1]
.text:00000000000036D0                 cmp     r13, rdx
.text:00000000000036D3                 jbe     short loc_36DB
.text:00000000000036D5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000036DB
.text:00000000000036DB loc_36DB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000036DB                 lea     rdx, [r15+2]
.text:00000000000036DF                 cmp     r13, rdx
.text:00000000000036E2                 jbe     short loc_36EA
.text:00000000000036E4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000036EA
.text:00000000000036EA loc_36EA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000036EA                 add     r15, 3
.text:00000000000036EE                 mov     r8d, eax
.text:00000000000036F1
.text:00000000000036F1 loc_36F1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000036F1                 cmp     r13, r15
.text:00000000000036F4                 jbe     short loc_36FB
.text:00000000000036F6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000036FB
.text:00000000000036FB loc_36FB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000036FB                 add     r15, 1
.text:00000000000036FF                 add     rbp, 1
.text:0000000000003703                 jmp     loc_3590
.text:0000000000003703 ; ---------------------------------------------------------------------------
.text:0000000000003708                 align 10h
.text:0000000000003710
.text:0000000000003710 loc_3710:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003710                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:0000000000003710                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003715                 jnz     loc_38E3
.text:000000000000371B                 xor     edx, edx
.text:000000000000371D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003722                 jz      loc_363B
.text:0000000000003728                 add     rbp, 1
.text:000000000000372C                 jmp     loc_33E8
.text:000000000000372C ; ---------------------------------------------------------------------------
.text:0000000000003731                 align 8
.text:0000000000003738
.text:0000000000003738 loc_3738:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003738                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:0000000000003738                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000373D                 setz    dl
.text:0000000000003740                 xor     eax, eax
.text:0000000000003742                 jmp     loc_3528
.text:0000000000003742 ; ---------------------------------------------------------------------------
.text:0000000000003747                 align 10h
.text:0000000000003750
.text:0000000000003750 loc_3750:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003750                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:0000000000003750                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003755                 mov     ebx, 61h ; 'a'
.text:000000000000375A                 jmp     loc_3634
.text:000000000000375A ; ---------------------------------------------------------------------------
.text:000000000000375F                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003760                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:0000000000003760                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003765                 setz    dl
.text:0000000000003768
.text:0000000000003768 loc_3768:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003768                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003768                 test    rbp, rbp
.text:000000000000376B                 jnz     loc_351C
.text:0000000000003771
.text:0000000000003771 loc_3771:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003771                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003771                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003776                 and     al, dl
.text:0000000000003778                 jz      loc_3528
.text:000000000000377E
.text:000000000000377E loc_377E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000377E                 mov     rbp, r11
.text:0000000000003781                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003789                 jmp     loc_3E89
.text:0000000000003789 ; ---------------------------------------------------------------------------
.text:000000000000378E                 align 10h
.text:0000000000003790
.text:0000000000003790 loc_3790:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003790                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:0000000000003790                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003795                 setz    dl
.text:0000000000003798                 xor     r12d, r12d
.text:000000000000379B                 jmp     short loc_3771
.text:000000000000379B ; ---------------------------------------------------------------------------
.text:000000000000379D                 align 20h
.text:00000000000037A0
.text:00000000000037A0 loc_37A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037A0                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:00000000000037A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000037A5                 mov     ebx, 20h ; ' '
.text:00000000000037AA                 setz    dl
.text:00000000000037AD                 jmp     short loc_3771
.text:00000000000037AD ; ---------------------------------------------------------------------------
.text:00000000000037AF                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037B0                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:00000000000037B0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000037B5                 mov     ebx, 72h ; 'r'
.text:00000000000037BA                 jmp     loc_3622
.text:00000000000037BA ; ---------------------------------------------------------------------------
.text:00000000000037BF                 align 20h
.text:00000000000037C0
.text:00000000000037C0 loc_37C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037C0                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:00000000000037C0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000037C5                 mov     ebx, 66h ; 'f'
.text:00000000000037CA                 jmp     loc_3634
.text:00000000000037CA ; ---------------------------------------------------------------------------
.text:00000000000037CF                 align 10h
.text:00000000000037D0
.text:00000000000037D0 loc_37D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037D0                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:00000000000037D0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000037D5                 mov     ebx, 76h ; 'v'
.text:00000000000037DA                 jmp     loc_3634
.text:00000000000037DA ; ---------------------------------------------------------------------------
.text:00000000000037DF                 align 20h
.text:00000000000037E0
.text:00000000000037E0 loc_37E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037E0                                         ; DATA XREF: .rodata:jpt_34EE↓o
.text:00000000000037E0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000037E5                 mov     ebx, 6Eh ; 'n'
.text:00000000000037EA                 jmp     loc_3622
.text:00000000000037EA ; ---------------------------------------------------------------------------
.text:00000000000037EF                 align 10h
.text:00000000000037F0
.text:00000000000037F0 def_387A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000037F0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000037F0                                         ; DATA XREF: ...
.text:00000000000037F0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000037F3                 nop     dword ptr [rax+rax+00h]
.text:00000000000037F8
.text:00000000000037F8 def_34EE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000037F8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000037F8                                         ; DATA XREF: ...
.text:00000000000037F8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000037FE                 jnz     loc_3BA8
.text:0000000000003804                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003809                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000380E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003813                 call    ___ctype_b_loc
.text:0000000000003818                 mov     rcx, [rax]
.text:000000000000381B                 movzx   edx, bl
.text:000000000000381E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003824                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000382A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000382F                 mov     edi, 1
.text:0000000000003834                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003838                 and     ax, 4000h
.text:000000000000383C                 setnz   r12b
.text:0000000000003840                 setz    al
.text:0000000000003843                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003847
.text:0000000000003847 loc_3847:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003847                 test    al, al
.text:0000000000003849                 jnz     loc_41E1
.text:000000000000384F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003854                 setz    dl
.text:0000000000003857                 jmp     loc_3528
.text:0000000000003857 ; ---------------------------------------------------------------------------
.text:000000000000385C                 align 20h
.text:0000000000003860
.text:0000000000003860 loc_3860:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003860                 movzx   ebx, byte ptr [r9]
.text:0000000000003864                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003867                 ja      short def_387A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003869                 lea     rcx, jpt_387A
.text:0000000000003870                 movzx   edx, bl
.text:0000000000003873                 movsxd  rax, ds:(jpt_387A - 65E8h)[rcx+rdx*4]
.text:0000000000003877                 add     rax, rcx
.text:000000000000387A                 jmp     rax             ; switch jump
.text:000000000000387A ; ---------------------------------------------------------------------------
.text:000000000000387C                 align 20h
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003880                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:0000000000003880                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003883                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003888                 jnz     loc_367E
.text:000000000000388E                 xchg    ax, ax
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003890                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003890                 mov     edx, 5Ch ; '\'
.text:0000000000003895                 mov     ebx, 5Ch ; '\'
.text:000000000000389A                 jmp     loc_3634
.text:000000000000389A ; ---------------------------------------------------------------------------
.text:000000000000389F                 align 20h
.text:00000000000038A0
.text:00000000000038A0 loc_38A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038A0                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000038A0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000038A5                 xor     r10d, r10d
.text:00000000000038A8                 mov     ebx, 66h ; 'f'
.text:00000000000038AD                 jmp     loc_3634
.text:00000000000038AD ; ---------------------------------------------------------------------------
.text:00000000000038B2                 align 8
.text:00000000000038B8
.text:00000000000038B8 loc_38B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038B8                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000038B8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000038BD                 xor     r10d, r10d
.text:00000000000038C0                 mov     ebx, 6Eh ; 'n'
.text:00000000000038C5                 jmp     loc_3622
.text:00000000000038C5 ; ---------------------------------------------------------------------------
.text:00000000000038CA                 align 10h
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038D0                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000038D0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000038D5                 jmp     loc_36A0
.text:00000000000038D5 ; ---------------------------------------------------------------------------
.text:00000000000038DA                 align 20h
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038E0                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000038E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000038E3
.text:00000000000038E3 loc_38E3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000038E3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038E8                 setz    dl
.text:00000000000038EB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000038F0                 jnz     loc_448A
.text:00000000000038F6                 mov     eax, r8d
.text:00000000000038F9                 mov     rcx, r15
.text:00000000000038FC                 xor     eax, 1
.text:00000000000038FF                 and     al, dl
.text:0000000000003901                 jz      short loc_3930
.text:0000000000003903                 cmp     r13, r15
.text:0000000000003906                 jbe     short loc_390D
.text:0000000000003908                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000390D
.text:000000000000390D loc_390D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000390D                 lea     rcx, [r15+1]
.text:0000000000003911                 cmp     r13, rcx
.text:0000000000003914                 jbe     short loc_391C
.text:0000000000003916                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000391C
.text:000000000000391C loc_391C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000391C                 lea     rcx, [r15+2]
.text:0000000000003920                 cmp     r13, rcx
.text:0000000000003923                 ja      loc_3F59
.text:0000000000003929
.text:0000000000003929 loc_3929:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003929                 lea     rcx, [r15+3]
.text:000000000000392D                 mov     r8d, eax
.text:0000000000003930
.text:0000000000003930 loc_3930:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003930                 cmp     r13, rcx
.text:0000000000003933                 jbe     short loc_393A
.text:0000000000003935                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000393A
.text:000000000000393A loc_393A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000393A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000393F                 lea     r15, [rcx+1]
.text:0000000000003943                 jz      loc_3F49
.text:0000000000003949                 lea     rax, [rbp+1]
.text:000000000000394D                 cmp     rax, r11
.text:0000000000003950                 jnb     short loc_396B
.text:0000000000003952                 mov     rax, [rsp+0E8h+s]
.text:0000000000003957                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000395C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003960                 sub     eax, 30h ; '0'
.text:0000000000003963                 cmp     al, 9
.text:0000000000003965                 jbe     loc_4199
.text:000000000000396B
.text:000000000000396B loc_396B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000396B                 mov     eax, r12d
.text:000000000000396E                 mov     ebx, 30h ; '0'
.text:0000000000003973                 xor     r12d, r12d
.text:0000000000003976                 jmp     loc_3528
.text:0000000000003976 ; ---------------------------------------------------------------------------
.text:000000000000397B                 align 20h
.text:0000000000003980
.text:0000000000003980 loc_3980:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003980                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:0000000000003980                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003985                 mov     r12d, r10d
.text:0000000000003988                 setz    dl
.text:000000000000398B                 xor     r10d, r10d
.text:000000000000398E                 xor     eax, eax
.text:0000000000003990                 jmp     loc_3528
.text:0000000000003990 ; ---------------------------------------------------------------------------
.text:0000000000003995                 align 8
.text:0000000000003998
.text:0000000000003998 loc_3998:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003998                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:0000000000003998                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000399D                 setz    dl
.text:00000000000039A0                 xor     r10d, r10d
.text:00000000000039A3                 jmp     loc_3768
.text:00000000000039A3 ; ---------------------------------------------------------------------------
.text:00000000000039A8                 align 10h
.text:00000000000039B0
.text:00000000000039B0 loc_39B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039B0                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000039B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000039B5                 setz    dl
.text:00000000000039B8                 xor     r10d, r10d
.text:00000000000039BB                 xor     r12d, r12d
.text:00000000000039BE                 jmp     loc_3771
.text:00000000000039BE ; ---------------------------------------------------------------------------
.text:00000000000039C3                 align 8
.text:00000000000039C8
.text:00000000000039C8 loc_39C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039C8                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000039C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000039CD                 mov     r12d, r10d
.text:00000000000039D0                 mov     ebx, 20h ; ' '
.text:00000000000039D5                 setz    dl
.text:00000000000039D8                 xor     r10d, r10d
.text:00000000000039DB                 jmp     loc_3771
.text:00000000000039E0 ; ---------------------------------------------------------------------------
.text:00000000000039E0
.text:00000000000039E0 loc_39E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039E0                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000039E0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000039E5                 xor     r10d, r10d
.text:00000000000039E8                 mov     ebx, 72h ; 'r'
.text:00000000000039ED                 jmp     loc_3622
.text:00000000000039ED ; ---------------------------------------------------------------------------
.text:00000000000039F2                 align 8
.text:00000000000039F8
.text:00000000000039F8 loc_39F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039F8                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:00000000000039F8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000039FD                 jmp     loc_36A0
.text:00000000000039FD ; ---------------------------------------------------------------------------
.text:0000000000003A02                 align 8
.text:0000000000003A08
.text:0000000000003A08 loc_3A08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A08                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:0000000000003A08                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003A0D                 xor     r10d, r10d
.text:0000000000003A10                 mov     ebx, 74h ; 't'
.text:0000000000003A15                 jmp     loc_3622
.text:0000000000003A15 ; ---------------------------------------------------------------------------
.text:0000000000003A1A                 align 20h
.text:0000000000003A20
.text:0000000000003A20 loc_3A20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A20                                         ; DATA XREF: .rodata:jpt_387A↓o
.text:0000000000003A20                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003A25                 jmp     loc_36A0
.text:0000000000003A25 ; ---------------------------------------------------------------------------
.text:0000000000003A2A                 align 10h
.text:0000000000003A30
.text:0000000000003A30 loc_3A30:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003A30                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003A30                 xor     r10d, r10d
.text:0000000000003A33                 jmp     loc_34D0
.text:0000000000003A33 ; ---------------------------------------------------------------------------
.text:0000000000003A38                 align 20h
.text:0000000000003A40
.text:0000000000003A40 loc_3A40:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003A40                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A45                 jnz     loc_43B0
.text:0000000000003A4B
.text:0000000000003A4B loc_3A4B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003A4B                 add     rbp, 1
.text:0000000000003A4F                 mov     eax, r8d
.text:0000000000003A52                 xor     r12d, r12d
.text:0000000000003A55                 mov     ebx, 5Ch ; '\'
.text:0000000000003A5A                 jmp     loc_356C
.text:0000000000003A5A ; ---------------------------------------------------------------------------
.text:0000000000003A5F                 align 20h
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003A60                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003A65                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003A6A                 mov     r12d, r8d
.text:0000000000003A6D                 mov     rbp, r11
.text:0000000000003A70                 setz    dl
.text:0000000000003A73                 mov     eax, ebx
.text:0000000000003A75                 test    r15, r15
.text:0000000000003A78                 setz    cl
.text:0000000000003A7B                 and     eax, edx
.text:0000000000003A7D                 and     al, cl
.text:0000000000003A7F                 jnz     loc_44E6
.text:0000000000003A85                 mov     eax, ebx
.text:0000000000003A87                 xor     eax, 1
.text:0000000000003A8A                 and     dl, al
.text:0000000000003A8C                 jz      loc_43FC
.text:0000000000003A92                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003A97                 jz      loc_43FA
.text:0000000000003A9D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003AA2                 jnz     loc_449D
.text:0000000000003AA8                 test    r13, r13
.text:0000000000003AAB                 setz    al
.text:0000000000003AAE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003AB4                 setnz   dl
.text:0000000000003AB7                 and     al, dl
.text:0000000000003AB9                 jz      loc_44DC
.text:0000000000003ABF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003AC4
.text:0000000000003AC4 loc_3AC4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003AC4                 lea     rbx, asc_6365   ; "'"
.text:0000000000003ACB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003ACF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003AD7                 mov     r15d, 1
.text:0000000000003ADD                 mov     [rsp+0E8h+n], 1
.text:0000000000003AE6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003AEB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003AF0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003AF4                 jmp     loc_33D3
.text:0000000000003AF4 ; ---------------------------------------------------------------------------
.text:0000000000003AF9                 align 20h
.text:0000000000003B00
.text:0000000000003B00 loc_3B00:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003B00                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003B05                 jnz     loc_43B0
.text:0000000000003B0B                 test    r13, r13
.text:0000000000003B0E                 jz      loc_3F10
.text:0000000000003B14                 xor     edx, edx
.text:0000000000003B16                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003B1C                 jnz     loc_3F10
.text:0000000000003B22
.text:0000000000003B22 loc_3B22:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003B22                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003B22                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003B27                 add     r15, 3
.text:0000000000003B2B                 xor     eax, eax
.text:0000000000003B2D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003B32                 xor     r8d, r8d
.text:0000000000003B35                 mov     r13, rdx
.text:0000000000003B38                 mov     ebx, 27h ; '''
.text:0000000000003B3D                 jmp     loc_3559
.text:0000000000003B3D ; ---------------------------------------------------------------------------
.text:0000000000003B42                 align 8
.text:0000000000003B48
.text:0000000000003B48 loc_3B48:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003B48                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003B4D                 jz      short loc_3B70
.text:0000000000003B4F                 lea     rcx, [rbp+2]
.text:0000000000003B53                 cmp     rcx, r11
.text:0000000000003B56                 jnb     short loc_3B70
.text:0000000000003B58                 mov     rax, [rsp+0E8h+s]
.text:0000000000003B5D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003B62                 jz      loc_42F2
.text:0000000000003B68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003B70                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003B70                 xor     edx, edx
.text:0000000000003B72                 xor     r12d, r12d
.text:0000000000003B75                 xor     eax, eax
.text:0000000000003B77                 mov     ebx, 3Fh ; '?'
.text:0000000000003B7C                 jmp     loc_3528
.text:0000000000003B7C ; ---------------------------------------------------------------------------
.text:0000000000003B81                 align 8
.text:0000000000003B88
.text:0000000000003B88 loc_3B88:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003B88                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003B8D                 jnz     loc_43B0
.text:0000000000003B93                 xor     r12d, r12d
.text:0000000000003B96                 xor     eax, eax
.text:0000000000003B98                 mov     ebx, 3Fh ; '?'
.text:0000000000003B9D                 jmp     loc_3559
.text:0000000000003B9D ; ---------------------------------------------------------------------------
.text:0000000000003BA2                 align 8
.text:0000000000003BA8
.text:0000000000003BA8 loc_3BA8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003BA8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003BB0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BB4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003BC0                 mov     [rsp+0E8h+ps], rax
.text:0000000000003BC5                 jnz     short loc_3BF4
.text:0000000000003BC7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003BCC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003BD1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003BD6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003BDB                 call    _strlen
.text:0000000000003BE0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003BE6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003BEC                 mov     r11, rax
.text:0000000000003BEF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003BF4
.text:0000000000003BF4 loc_3BF4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003BF4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003BFC                 xor     ecx, ecx
.text:0000000000003BFE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003C02                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003C07                 mov     rbx, rcx
.text:0000000000003C0A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003C12                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003C17                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003C1C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003C24                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003C29                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003C2E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003C33
.text:0000000000003C33 loc_3C33:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003C33                 mov     rax, [rsp+0E8h+s]
.text:0000000000003C38                 lea     r14, [rbp+rbx+0]
.text:0000000000003C3D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003C42                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003C47                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003C4C                 lea     r13, [rax+r14]
.text:0000000000003C50                 sub     rdx, r14
.text:0000000000003C53                 mov     rsi, r13
.text:0000000000003C56                 call    rpl_mbrtowc
.text:0000000000003C5B                 test    rax, rax
.text:0000000000003C5E                 mov     r15, rax
.text:0000000000003C61                 jz      short loc_3CB1
.text:0000000000003C63                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C67                 jz      loc_4285
.text:0000000000003C6D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003C71                 jz      loc_4211
.text:0000000000003C77                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C7C                 setz    al
.text:0000000000003C7F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003C83                 jnz     loc_3E20
.text:0000000000003C89
.text:0000000000003C89 loc_3C89:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003C89                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003C89                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003C90                 call    _iswprint
.text:0000000000003C95                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000003C9A                 test    eax, eax
.text:0000000000003C9C                 mov     eax, 0
.text:0000000000003CA1                 cmovz   r12d, eax
.text:0000000000003CA5                 add     rbx, r15
.text:0000000000003CA8                 call    _mbsinit
.text:0000000000003CAD                 test    eax, eax
.text:0000000000003CAF                 jz      short loc_3C33
.text:0000000000003CB1
.text:0000000000003CB1 loc_3CB1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003CB1                 mov     edx, r12d
.text:0000000000003CB4                 mov     rdi, rbx
.text:0000000000003CB7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003CBD                 xor     edx, 1
.text:0000000000003CC0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003CC5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003CCB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000003CCF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003CD7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003CDC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003CE1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003CE6
.text:0000000000003CE6 loc_3CE6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003CE6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003CE6                 cmp     rdi, 1
.text:0000000000003CEA                 jbe     loc_42EB
.text:0000000000003CF0
.text:0000000000003CF0 loc_3CF0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003CF0                 mov     rcx, rdi
.text:0000000000003CF3                 xor     esi, esi
.text:0000000000003CF5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000003CFB                 add     rcx, rbp
.text:0000000000003CFE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003D03                 jmp     loc_3DBE
.text:0000000000003D03 ; ---------------------------------------------------------------------------
.text:0000000000003D08                 align 10h
.text:0000000000003D10
.text:0000000000003D10 loc_3D10:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003D10                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D15                 setz    al
.text:0000000000003D18                 test    r9b, r9b
.text:0000000000003D1B                 jnz     loc_41D0
.text:0000000000003D21                 mov     esi, r8d
.text:0000000000003D24                 xor     esi, 1
.text:0000000000003D27                 and     al, sil
.text:0000000000003D2A                 jz      short loc_3D5B
.text:0000000000003D2C                 cmp     r13, r15
.text:0000000000003D2F                 jbe     short loc_3D36
.text:0000000000003D31                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003D36
.text:0000000000003D36 loc_3D36:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003D36                 lea     rsi, [r15+1]
.text:0000000000003D3A                 cmp     r13, rsi
.text:0000000000003D3D                 jbe     short loc_3D45
.text:0000000000003D3F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003D45
.text:0000000000003D45 loc_3D45:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003D45                 lea     rsi, [r15+2]
.text:0000000000003D49                 cmp     r13, rsi
.text:0000000000003D4C                 jbe     short loc_3D54
.text:0000000000003D4E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003D54
.text:0000000000003D54 loc_3D54:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003D54                 add     r15, 3
.text:0000000000003D58                 mov     r8d, eax
.text:0000000000003D5B
.text:0000000000003D5B loc_3D5B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000003D5B                 cmp     r13, r15
.text:0000000000003D5E                 jbe     short loc_3D65
.text:0000000000003D60                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003D65
.text:0000000000003D65 loc_3D65:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003D65                 lea     rax, [r15+1]
.text:0000000000003D69                 cmp     r13, rax
.text:0000000000003D6C                 jbe     short loc_3D7B
.text:0000000000003D6E                 mov     eax, ebx
.text:0000000000003D70                 shr     al, 6
.text:0000000000003D73                 add     eax, 30h ; '0'
.text:0000000000003D76                 mov     [r14+r15+1], al
.text:0000000000003D7B
.text:0000000000003D7B loc_3D7B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000003D7B                 lea     rax, [r15+2]
.text:0000000000003D7F                 cmp     r13, rax
.text:0000000000003D82                 jbe     short loc_3D94
.text:0000000000003D84                 mov     eax, ebx
.text:0000000000003D86                 shr     al, 3
.text:0000000000003D89                 and     eax, 7
.text:0000000000003D8C                 add     eax, 30h ; '0'
.text:0000000000003D8F                 mov     [r14+r15+2], al
.text:0000000000003D94
.text:0000000000003D94 loc_3D94:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003D94                 and     ebx, 7
.text:0000000000003D97                 add     rbp, 1
.text:0000000000003D9B                 add     r15, 3
.text:0000000000003D9F                 add     ebx, 30h ; '0'
.text:0000000000003DA2                 cmp     rbp, rcx
.text:0000000000003DA5                 jnb     loc_3590
.text:0000000000003DAB                 mov     esi, edx
.text:0000000000003DAD
.text:0000000000003DAD loc_3DAD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003DAD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003DAD                 cmp     r13, r15
.text:0000000000003DB0                 jbe     short loc_3DB6
.text:0000000000003DB2                 mov     [r14+r15], bl
.text:0000000000003DB6
.text:0000000000003DB6 loc_3DB6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003DB6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003DBA                 add     r15, 1
.text:0000000000003DBE
.text:0000000000003DBE loc_3DBE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003DBE                 test    dl, dl
.text:0000000000003DC0                 jnz     loc_3D10
.text:0000000000003DC6                 mov     eax, esi
.text:0000000000003DC8                 xor     eax, 1
.text:0000000000003DCB                 and     eax, r8d
.text:0000000000003DCE                 test    r10b, r10b
.text:0000000000003DD1                 jz      short loc_3DE1
.text:0000000000003DD3                 cmp     r13, r15
.text:0000000000003DD6                 jbe     short loc_3DDD
.text:0000000000003DD8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003DDD
.text:0000000000003DDD loc_3DDD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003DDD                 add     r15, 1
.text:0000000000003DE1
.text:0000000000003DE1 loc_3DE1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003DE1                 add     rbp, 1
.text:0000000000003DE5                 cmp     rbp, rcx
.text:0000000000003DE8                 jnb     loc_356C
.text:0000000000003DEE                 test    al, al
.text:0000000000003DF0                 jz      loc_41EE
.text:0000000000003DF6                 cmp     r13, r15
.text:0000000000003DF9                 jbe     short loc_3E00
.text:0000000000003DFB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003E00                 lea     rax, [r15+1]
.text:0000000000003E04                 cmp     r13, rax
.text:0000000000003E07                 jbe     short loc_3E0F
.text:0000000000003E09                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003E0F
.text:0000000000003E0F loc_3E0F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003E0F                 add     r15, 2
.text:0000000000003E13                 xor     r10d, r10d
.text:0000000000003E16                 xor     r8d, r8d
.text:0000000000003E19                 jmp     short loc_3DAD
.text:0000000000003E19 ; ---------------------------------------------------------------------------
.text:0000000000003E1B                 align 20h
.text:0000000000003E20
.text:0000000000003E20 loc_3E20:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003E20                 cmp     r15, 1
.text:0000000000003E24                 jz      loc_3C89
.text:0000000000003E2A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003E2F                 lea     rcx, [rdi+r15]
.text:0000000000003E33                 lea     rdx, [rdi+r14+1]
.text:0000000000003E38                 lea     r8, [rcx+r14]
.text:0000000000003E3C                 jmp     short loc_3E4D
.text:0000000000003E3C ; ---------------------------------------------------------------------------
.text:0000000000003E3E                 align 20h
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003E40                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003E40                 add     rdx, 1
.text:0000000000003E44                 cmp     r8, rdx
.text:0000000000003E47                 jz      loc_3C89
.text:0000000000003E4D
.text:0000000000003E4D loc_3E4D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003E4D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003E50                 sub     ecx, 5Bh ; '['
.text:0000000000003E53                 cmp     cl, 21h ; '!'
.text:0000000000003E56                 ja      short loc_3E40
.text:0000000000003E58                 mov     esi, 1
.text:0000000000003E5D                 shl     rsi, cl
.text:0000000000003E60                 mov     rcx, rsi
.text:0000000000003E63                 mov     rsi, 20000002Bh
.text:0000000000003E6D                 test    rcx, rsi
.text:0000000000003E70                 jz      short loc_3E40
.text:0000000000003E72                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003E77                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003E7C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003E81                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E89
.text:0000000000003E89 loc_3E89:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003E89                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003E89                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003E8E                 jz      short loc_3EA0
.text:0000000000003E90                 test    al, al
.text:0000000000003E92                 mov     eax, 4
.text:0000000000003E97                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003E9C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003EA0
.text:0000000000003EA0 loc_3EA0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003EA0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003EA0                 sub     rsp, 8
.text:0000000000003EA4                 mov     rcx, rbp
.text:0000000000003EA7                 mov     rsi, r13
.text:0000000000003EAA                 push    [rsp+0F0h+var_88]
.text:0000000000003EAE                 push    [rsp+0F8h+var_80]
.text:0000000000003EB2                 mov     rdi, r14
.text:0000000000003EB5                 push    0
.text:0000000000003EB7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003EBF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003EC4                 mov     rdx, [rsp+108h+s]
.text:0000000000003EC9                 and     r9d, 0FFFFFFFDh
.text:0000000000003ECD                 call    quotearg_buffer_restyled
.text:0000000000003ED2                 add     rsp, 20h
.text:0000000000003ED6                 mov     r15, rax
.text:0000000000003ED9
.text:0000000000003ED9 loc_3ED9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003ED9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003ED9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003EE1                 xor     rbx, fs:28h
.text:0000000000003EEA                 mov     rax, r15
.text:0000000000003EED                 jnz     loc_44F3
.text:0000000000003EF3                 add     rsp, 0B8h
.text:0000000000003EFA                 pop     rbx
.text:0000000000003EFB                 pop     rbp
.text:0000000000003EFC                 pop     r12
.text:0000000000003EFE                 pop     r13
.text:0000000000003F00                 pop     r14
.text:0000000000003F02                 pop     r15
.text:0000000000003F04                 retn
.text:0000000000003F04 ; ---------------------------------------------------------------------------
.text:0000000000003F05                 align 8
.text:0000000000003F08
.text:0000000000003F08 loc_3F08:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003F08                 mov     rbp, r11
.text:0000000000003F0B                 jmp     loc_3E89
.text:0000000000003F10 ; ---------------------------------------------------------------------------
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003F10                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003F10                 cmp     r13, r15
.text:0000000000003F13                 jbe     short loc_3F1A
.text:0000000000003F15                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003F1A
.text:0000000000003F1A loc_3F1A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003F1A                 lea     rax, [r15+1]
.text:0000000000003F1E                 cmp     r13, rax
.text:0000000000003F21                 jbe     short loc_3F29
.text:0000000000003F23                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003F29
.text:0000000000003F29 loc_3F29:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003F29                 lea     rax, [r15+2]
.text:0000000000003F2D                 cmp     r13, rax
.text:0000000000003F30                 jbe     loc_4522
.text:0000000000003F36                 mov     rdx, r13
.text:0000000000003F39                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003F3F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003F44                 jmp     loc_3B22
.text:0000000000003F49 ; ---------------------------------------------------------------------------
.text:0000000000003F49
.text:0000000000003F49 loc_3F49:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003F49                 mov     eax, r12d
.text:0000000000003F4C                 mov     ebx, 30h ; '0'
.text:0000000000003F51                 xor     r12d, r12d
.text:0000000000003F54                 jmp     loc_3559
.text:0000000000003F59 ; ---------------------------------------------------------------------------
.text:0000000000003F59
.text:0000000000003F59 loc_3F59:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003F59                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003F5F                 jmp     loc_3929
.text:0000000000003F64 ; ---------------------------------------------------------------------------
.text:0000000000003F64
.text:0000000000003F64 loc_3F64:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003F64                                         ; DATA XREF: .rodata:jpt_3391↓o
.text:0000000000003F64                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003F66                 jnz     loc_3393        ; jumptable 00000000000121F1 case 1
.text:0000000000003F6C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003F71
.text:0000000000003F71 loc_3F71:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003F71                 test    r13, r13
.text:0000000000003F74                 jnz     loc_450A
.text:0000000000003F7A                 lea     rax, asc_6365   ; "'"
.text:0000000000003F81                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003F8A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003F8F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003F94                 xor     r12d, r12d
.text:0000000000003F97                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003F9C                 mov     [rsp+0E8h+n], 1
.text:0000000000003FA5                 mov     [rsp+0E8h+s2], rax
.text:0000000000003FAA                 mov     r15d, 1
.text:0000000000003FB0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003FB8                 jmp     loc_33D3
.text:0000000000003FB8 ; ---------------------------------------------------------------------------
.text:0000000000003FBD                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 loc_3FC0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003FC0                                         ; DATA XREF: .rodata:jpt_3391↓o
.text:0000000000003FC0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003FC2                 jnz     loc_43BD
.text:0000000000003FC8                 test    r13, r13
.text:0000000000003FCB                 jz      loc_41F6
.text:0000000000003FD1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003FD5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003FDA                 xor     r12d, r12d
.text:0000000000003FDD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003FE2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003FEB
.text:0000000000003FEB loc_3FEB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003FEB                 lea     rax, unk_6363
.text:0000000000003FF2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003FF7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003FFC                 mov     [rsp+0E8h+n], 1
.text:0000000000004005                 mov     r15d, 1
.text:000000000000400B                 mov     [rsp+0E8h+s2], rax
.text:0000000000004010                 jmp     loc_33D3
.text:0000000000004015 ; ---------------------------------------------------------------------------
.text:0000000000004015
.text:0000000000004015 loc_4015:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004015                                         ; DATA XREF: .rodata:jpt_3391↓o
.text:0000000000004015                 lea     rax, unk_6363   ; jumptable 00000000000121F1 case 6
.text:000000000000401C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004021                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004026                 xor     r12d, r12d
.text:0000000000004029                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004032                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004037                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000403C                 mov     [rsp+0E8h+n], 1
.text:0000000000004045                 xor     r15d, r15d
.text:0000000000004048                 mov     [rsp+0E8h+s2], rax
.text:000000000000404D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004055                 jmp     loc_33D3
.text:000000000000405A ; ---------------------------------------------------------------------------
.text:000000000000405A
.text:000000000000405A loc_405A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000405A                                         ; DATA XREF: .rodata:jpt_3391↓o
.text:000000000000405A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000405F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004064                 xor     r12d, r12d
.text:0000000000004067                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004070                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004075                 xor     r15d, r15d
.text:0000000000004078                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000407D                 mov     [rsp+0E8h+n], 0
.text:0000000000004086                 mov     [rsp+0E8h+s2], 0
.text:000000000000408F                 jmp     loc_33D3
.text:0000000000004094 ; ---------------------------------------------------------------------------
.text:0000000000004094
.text:0000000000004094 loc_4094:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004094                                         ; DATA XREF: .rodata:jpt_3391↓o
.text:0000000000004094                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004099                 jz      short loc_40F1
.text:000000000000409B                 lea     rsi, asc_6367   ; "`"
.text:00000000000040A2                 xor     edi, edi        ; domainname
.text:00000000000040A4                 mov     edx, 5          ; category
.text:00000000000040A9                 call    _dcgettext
.text:00000000000040AE                 mov     rcx, rax
.text:00000000000040B1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000040B6                 lea     rax, asc_6367   ; "`"
.text:00000000000040BD                 cmp     rcx, rax
.text:00000000000040C0                 jz      loc_445E
.text:00000000000040C6
.text:00000000000040C6 loc_40C6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000040C6                 lea     rsi, asc_6365   ; "'"
.text:00000000000040CD                 xor     edi, edi        ; domainname
.text:00000000000040CF                 mov     edx, 5          ; category
.text:00000000000040D4                 call    _dcgettext
.text:00000000000040D9                 mov     rcx, rax
.text:00000000000040DC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000040E1                 lea     rax, asc_6365   ; "'"
.text:00000000000040E8                 cmp     rcx, rax
.text:00000000000040EB                 jz      loc_4474
.text:00000000000040F1
.text:00000000000040F1 loc_40F1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000040F1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000040F1                 xor     r15d, r15d
.text:00000000000040F4                 test    ebx, ebx
.text:00000000000040F6                 jz      loc_42BD
.text:00000000000040FC
.text:00000000000040FC loc_40FC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000040FC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000040FC                 test    ebx, ebx
.text:00000000000040FE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004103                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004108                 xor     r12d, r12d
.text:000000000000410B                 mov     rdi, rbx        ; s
.text:000000000000410E                 call    _strlen
.text:0000000000004113                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004118                 mov     [rsp+0E8h+n], rax
.text:000000000000411D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004122                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004127                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004130                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004135                 jmp     loc_33D3
.text:000000000000413A ; ---------------------------------------------------------------------------
.text:000000000000413A
.text:000000000000413A loc_413A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000413A                                         ; DATA XREF: .rodata:jpt_3391↓o
.text:000000000000413A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000413F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004144                 xor     r12d, r12d
.text:0000000000004147                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004150                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004155                 xor     r15d, r15d
.text:0000000000004158                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000415D                 mov     [rsp+0E8h+n], 0
.text:0000000000004166                 mov     [rsp+0E8h+s2], 0
.text:000000000000416F                 jmp     loc_33D3
.text:0000000000004174 ; ---------------------------------------------------------------------------
.text:0000000000004174
.text:0000000000004174 loc_4174:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004174                                         ; DATA XREF: .rodata:jpt_3391↓o
.text:0000000000004174                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004179                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000417E                 xor     r12d, r12d
.text:0000000000004181                 mov     [rsp+0E8h+var_98], 0
.text:000000000000418A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000418F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004194                 jmp     loc_33B3
.text:0000000000004199 ; ---------------------------------------------------------------------------
.text:0000000000004199
.text:0000000000004199 loc_4199:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004199                 cmp     r13, r15
.text:000000000000419C                 jbe     short loc_41A3
.text:000000000000419E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000041A3
.text:00000000000041A3 loc_41A3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000041A3                 lea     rax, [rcx+2]
.text:00000000000041A7                 cmp     r13, rax
.text:00000000000041AA                 jbe     short loc_41B2
.text:00000000000041AC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000041B2
.text:00000000000041B2 loc_41B2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000041B2                 mov     eax, r12d
.text:00000000000041B5                 lea     r15, [rcx+3]
.text:00000000000041B9                 xor     r12d, r12d
.text:00000000000041BC                 mov     ebx, 30h ; '0'
.text:00000000000041C1                 jmp     loc_3528
.text:00000000000041C1 ; ---------------------------------------------------------------------------
.text:00000000000041C6                 align 10h
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000041D0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000041D5                 mov     rbp, r11
.text:00000000000041D8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000041DC                 jmp     loc_3E89
.text:00000000000041E1 ; ---------------------------------------------------------------------------
.text:00000000000041E1
.text:00000000000041E1 loc_41E1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000041E1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000041E6                 xor     r12d, r12d
.text:00000000000041E9                 jmp     loc_3CF0
.text:00000000000041EE ; ---------------------------------------------------------------------------
.text:00000000000041EE
.text:00000000000041EE loc_41EE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000041EE                 xor     r10d, r10d
.text:00000000000041F1                 jmp     loc_3DAD
.text:00000000000041F6 ; ---------------------------------------------------------------------------
.text:00000000000041F6
.text:00000000000041F6 loc_41F6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000041F6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000041FF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004204                 xor     r12d, r12d
.text:0000000000004207                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000420C                 jmp     loc_3FEB
.text:0000000000004211 ; ---------------------------------------------------------------------------
.text:0000000000004211
.text:0000000000004211 loc_4211:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000004211                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004216                 mov     rsi, r14
.text:0000000000004219                 mov     rcx, r13
.text:000000000000421C                 mov     rax, rbx
.text:000000000000421F                 mov     rdi, rbx
.text:0000000000004222                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004228                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000422D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000004235                 cmp     rsi, r11
.text:0000000000004238                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000423E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004246                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000424B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004250                 jnb     short loc_4278
.text:0000000000004252                 cmp     byte ptr [rcx], 0
.text:0000000000004255                 jnz     short loc_4267
.text:0000000000004257                 jmp     short loc_4278
.text:0000000000004257 ; ---------------------------------------------------------------------------
.text:0000000000004259                 align 20h
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004260                 cmp     byte ptr [r9+rax], 0
.text:0000000000004265                 jz      short loc_4275
.text:0000000000004267
.text:0000000000004267 loc_4267:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004267                 add     rax, 1
.text:000000000000426B                 lea     rdx, [rbp+rax+0]
.text:0000000000004270                 cmp     r11, rdx
.text:0000000000004273                 ja      short loc_4260
.text:0000000000004275
.text:0000000000004275 loc_4275:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004275                 mov     rdi, rax
.text:0000000000004278
.text:0000000000004278 loc_4278:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004278                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004278                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000427D                 xor     r12d, r12d
.text:0000000000004280                 jmp     loc_3CE6
.text:0000000000004285 ; ---------------------------------------------------------------------------
.text:0000000000004285
.text:0000000000004285 loc_4285:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004285                 mov     rdi, rbx
.text:0000000000004288                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000428E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004293                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004299                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000042A1                 xor     r12d, r12d
.text:00000000000042A4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000042A9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000042AE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000042B3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000042B8                 jmp     loc_3CE6
.text:00000000000042BD ; ---------------------------------------------------------------------------
.text:00000000000042BD
.text:00000000000042BD loc_42BD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000042BD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000042C2                 movzx   eax, byte ptr [rdx]
.text:00000000000042C5                 test    al, al
.text:00000000000042C7                 jz      loc_40FC
.text:00000000000042CD                 nop     dword ptr [rax]
.text:00000000000042D0
.text:00000000000042D0 loc_42D0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000042D0                 cmp     r13, r15
.text:00000000000042D3                 jbe     short loc_42D9
.text:00000000000042D5                 mov     [r14+r15], al
.text:00000000000042D9
.text:00000000000042D9 loc_42D9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000042D9                 add     r15, 1
.text:00000000000042DD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000042E2                 test    al, al
.text:00000000000042E4                 jnz     short loc_42D0
.text:00000000000042E6                 jmp     loc_40FC
.text:00000000000042EB ; ---------------------------------------------------------------------------
.text:00000000000042EB
.text:00000000000042EB loc_42EB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000042EB                 mov     eax, edx
.text:00000000000042ED                 jmp     loc_3847
.text:00000000000042F2 ; ---------------------------------------------------------------------------
.text:00000000000042F2
.text:00000000000042F2 loc_42F2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000042F2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000042F6                 cmp     bl, 3Eh ; '>'
.text:00000000000042F9                 ja      loc_3B70
.text:00000000000042FF                 mov     rax, 7000A38200000000h
.text:0000000000004309                 bt      rax, rbx
.text:000000000000430D                 jnb     loc_3B70
.text:0000000000004313                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004318                 jnz     loc_4502
.text:000000000000431E                 cmp     r13, r15
.text:0000000000004321                 jbe     short loc_4328
.text:0000000000004323                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004328
.text:0000000000004328 loc_4328:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004328                 lea     rax, [r15+1]
.text:000000000000432C                 cmp     r13, rax
.text:000000000000432F                 jbe     short loc_4337
.text:0000000000004331                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004337
.text:0000000000004337 loc_4337:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004337                 lea     rax, [r15+2]
.text:000000000000433B                 cmp     r13, rax
.text:000000000000433E                 jbe     short loc_4346
.text:0000000000004340                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004346
.text:0000000000004346 loc_4346:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004346                 lea     rax, [r15+3]
.text:000000000000434A                 cmp     r13, rax
.text:000000000000434D                 jbe     short loc_4355
.text:000000000000434F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004355
.text:0000000000004355 loc_4355:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004355                 add     r15, 4
.text:0000000000004359                 xor     edx, edx
.text:000000000000435B                 xor     r12d, r12d
.text:000000000000435E                 xor     eax, eax
.text:0000000000004360                 mov     rbp, rcx
.text:0000000000004363                 jmp     loc_3528
.text:0000000000004368 ; ---------------------------------------------------------------------------
.text:0000000000004368
.text:0000000000004368 loc_4368:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004368                                         ; DATA XREF: .rodata:jpt_3391↓o
.text:0000000000004368                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000436A                 jz      loc_44F8
.text:0000000000004370                 lea     rax, asc_6365   ; "'"
.text:0000000000004377                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000437C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004381                 xor     r12d, r12d
.text:0000000000004384                 mov     [rsp+0E8h+var_98], 0
.text:000000000000438D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004392                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004397                 mov     [rsp+0E8h+n], 1
.text:00000000000043A0                 xor     r15d, r15d
.text:00000000000043A3                 mov     [rsp+0E8h+s2], rax
.text:00000000000043A8                 jmp     loc_33D3
.text:00000000000043A8 ; ---------------------------------------------------------------------------
.text:00000000000043AD                 align 10h
.text:00000000000043B0
.text:00000000000043B0 loc_43B0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000043B0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000043B0                 mov     rbp, r11
.text:00000000000043B3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000043B8                 jmp     loc_3E89
.text:00000000000043BD ; ---------------------------------------------------------------------------
.text:00000000000043BD
.text:00000000000043BD loc_43BD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000043BD                 lea     rax, unk_6363
.text:00000000000043C4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000043C9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043CE                 xor     r12d, r12d
.text:00000000000043D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043DA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000043DF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000043E4                 mov     [rsp+0E8h+n], 1
.text:00000000000043ED                 xor     r15d, r15d
.text:00000000000043F0                 mov     [rsp+0E8h+s2], rax
.text:00000000000043F5                 jmp     loc_33D3
.text:00000000000043FA ; ---------------------------------------------------------------------------
.text:00000000000043FA
.text:00000000000043FA loc_43FA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000043FA                 mov     eax, edx
.text:00000000000043FC
.text:00000000000043FC loc_43FC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000043FC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000043FC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004401                 test    rbx, rbx
.text:0000000000004404                 jz      short loc_4432
.text:0000000000004406                 test    al, al
.text:0000000000004408                 jz      short loc_4432
.text:000000000000440A                 movzx   ecx, byte ptr [rbx]
.text:000000000000440D                 mov     rax, rbx
.text:0000000000004410                 test    cl, cl
.text:0000000000004412                 jz      short loc_4432
.text:0000000000004414                 mov     rdx, r15
.text:0000000000004417                 sub     rax, r15
.text:000000000000441A
.text:000000000000441A loc_441A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000441A                 cmp     r13, rdx
.text:000000000000441D                 jbe     short loc_4423
.text:000000000000441F                 mov     [r14+rdx], cl
.text:0000000000004423
.text:0000000000004423 loc_4423:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004423                 add     rdx, 1
.text:0000000000004427                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000442B                 test    cl, cl
.text:000000000000442D                 jnz     short loc_441A
.text:000000000000442F                 mov     r15, rdx
.text:0000000000004432
.text:0000000000004432 loc_4432:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004432                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004432                 cmp     r13, r15
.text:0000000000004435                 jbe     loc_3ED9
.text:000000000000443B                 mov     byte ptr [r14+r15], 0
.text:0000000000004440                 jmp     loc_3ED9
.text:0000000000004445 ; ---------------------------------------------------------------------------
.text:0000000000004445
.text:0000000000004445 loc_4445:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004445                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000444A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000444F                 mov     rbp, r11
.text:0000000000004452                 setz    al
.text:0000000000004455                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004459                 jmp     loc_3E89
.text:000000000000445E ; ---------------------------------------------------------------------------
.text:000000000000445E
.text:000000000000445E loc_445E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000445E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004462                 mov     rdi, rcx
.text:0000000000004465                 call    gettext_quote
.text:000000000000446A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000446F                 jmp     loc_40C6
.text:0000000000004474 ; ---------------------------------------------------------------------------
.text:0000000000004474
.text:0000000000004474 loc_4474:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004474                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004478                 mov     rdi, rcx
.text:000000000000447B                 call    gettext_quote
.text:0000000000004480                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004485                 jmp     loc_40F1
.text:000000000000448A ; ---------------------------------------------------------------------------
.text:000000000000448A
.text:000000000000448A loc_448A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000448A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000448F                 mov     rbp, r11
.text:0000000000004492                 mov     eax, edx
.text:0000000000004494                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004498                 jmp     loc_3E89
.text:000000000000449D ; ---------------------------------------------------------------------------
.text:000000000000449D
.text:000000000000449D loc_449D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000449D                 sub     rsp, 8
.text:00000000000044A1                 mov     r8d, 5
.text:00000000000044A7                 mov     rcx, r11
.text:00000000000044AA                 push    [rsp+0F0h+var_88]
.text:00000000000044AE                 push    [rsp+0F8h+var_80]
.text:00000000000044B2                 mov     rdi, r14
.text:00000000000044B5                 push    [rsp+100h+var_C8]
.text:00000000000044B9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000044C1                 mov     rdx, [rsp+108h+s]
.text:00000000000044C6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000044CB                 call    quotearg_buffer_restyled
.text:00000000000044D0                 add     rsp, 20h
.text:00000000000044D4                 mov     r15, rax
.text:00000000000044D7                 jmp     loc_3ED9
.text:00000000000044DC ; ---------------------------------------------------------------------------
.text:00000000000044DC
.text:00000000000044DC loc_44DC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000044DC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000044E1                 jmp     loc_43FC
.text:00000000000044E6 ; ---------------------------------------------------------------------------
.text:00000000000044E6
.text:00000000000044E6 loc_44E6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000044E6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000044EE                 jmp     loc_3E89
.text:00000000000044F3 ; ---------------------------------------------------------------------------
.text:00000000000044F3
.text:00000000000044F3 loc_44F3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000044F3                 call    ___stack_chk_fail
.text:00000000000044F8 ; ---------------------------------------------------------------------------
.text:00000000000044F8
.text:00000000000044F8 loc_44F8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000044F8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000044FD                 jmp     loc_3F71
.text:0000000000004502 ; ---------------------------------------------------------------------------
.text:0000000000004502
.text:0000000000004502 loc_4502:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004502                 mov     rbp, r11
.text:0000000000004505                 jmp     loc_3EA0
.text:000000000000450A ; ---------------------------------------------------------------------------
.text:000000000000450A
.text:000000000000450A loc_450A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000450A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000450F                 xor     eax, eax
.text:0000000000004511                 xor     r12d, r12d
.text:0000000000004514                 mov     [rsp+0E8h+var_98], 0
.text:000000000000451D                 jmp     loc_3AC4
.text:0000000000004522 ; ---------------------------------------------------------------------------
.text:0000000000004522
.text:0000000000004522 loc_4522:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004522                 mov     rdx, r13
.text:0000000000004525                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000452A                 jmp     loc_3B22
.text:000000000000452F ; ---------------------------------------------------------------------------
.text:000000000000452F
.text:000000000000452F def_3391:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000452F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000452F ; } // starts at 3300
.text:000000000000452F quotearg_buffer_restyled endp
.text:000000000000452F
.text:000000000000452F ; ---------------------------------------------------------------------------
.text:0000000000004534                 align 20h
.text:0000000000004540
.text:0000000000004540 ; =============== S U B R O U T I N E =======================================
.text:0000000000004540
.text:0000000000004540
.text:0000000000004540 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004540                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004540
.text:0000000000004540 var_50          = qword ptr -50h
.text:0000000000004540 var_48          = qword ptr -48h
.text:0000000000004540 var_40          = dword ptr -40h
.text:0000000000004540 var_3C          = dword ptr -3Ch
.text:0000000000004540
.text:0000000000004540 ; __unwind {
.text:0000000000004540                 push    r15
.text:0000000000004542                 push    r14
.text:0000000000004544                 movsxd  r15, edi
.text:0000000000004547                 push    r13
.text:0000000000004549                 push    r12
.text:000000000000454B                 mov     r14, rdx
.text:000000000000454E                 push    rbp
.text:000000000000454F                 push    rbx
.text:0000000000004550                 mov     rbp, rcx
.text:0000000000004553                 sub     rsp, 28h
.text:0000000000004557                 mov     [rsp+58h+var_50], rsi
.text:000000000000455C                 call    ___errno_location
.text:0000000000004561                 mov     r13, rax
.text:0000000000004564                 mov     eax, [rax]
.text:0000000000004566                 test    r15d, r15d
.text:0000000000004569                 mov     rbx, cs:slotvec
.text:0000000000004570                 mov     [rsp+58h+var_40], eax
.text:0000000000004574                 js      loc_46E1
.text:000000000000457A                 cmp     cs:nslots, r15d
.text:0000000000004581                 jg      short loc_45E5
.text:0000000000004583                 cmp     r15d, 7FFFFFFFh
.text:000000000000458A                 jz      loc_46E6
.text:0000000000004590                 lea     r12d, [r15+1]
.text:0000000000004594                 lea     rax, slotvec0
.text:000000000000459B                 movsxd  rsi, r12d
.text:000000000000459E                 shl     rsi, 4
.text:00000000000045A2                 cmp     rbx, rax
.text:00000000000045A5                 jz      loc_46C0
.text:00000000000045AB                 mov     rdi, rbx
.text:00000000000045AE                 call    xrealloc
.text:00000000000045B3                 mov     rbx, rax
.text:00000000000045B6                 mov     cs:slotvec, rax
.text:00000000000045BD
.text:00000000000045BD loc_45BD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000045BD                 movsxd  rdi, cs:nslots
.text:00000000000045C4                 mov     edx, r12d
.text:00000000000045C7                 xor     esi, esi        ; c
.text:00000000000045C9                 sub     edx, edi
.text:00000000000045CB                 shl     rdi, 4
.text:00000000000045CF                 movsxd  rdx, edx
.text:00000000000045D2                 add     rdi, rbx        ; s
.text:00000000000045D5                 shl     rdx, 4          ; n
.text:00000000000045D9                 call    _memset
.text:00000000000045DE                 mov     cs:nslots, r12d
.text:00000000000045E5
.text:00000000000045E5 loc_45E5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000045E5                 mov     eax, [rbp+4]
.text:00000000000045E8                 shl     r15, 4
.text:00000000000045EC                 sub     rsp, 8
.text:00000000000045F0                 add     rbx, r15
.text:00000000000045F3                 lea     r15, [rbp+8]
.text:00000000000045F7                 mov     r8d, [rbp+0]
.text:00000000000045FB                 mov     r11, [rbx]
.text:00000000000045FE                 mov     r12, [rbx+8]
.text:0000000000004602                 mov     rcx, r14
.text:0000000000004605                 or      eax, 1
.text:0000000000004608                 mov     [rsp+60h+var_3C], eax
.text:000000000000460C                 push    qword ptr [rbp+30h]
.text:000000000000460F                 mov     r9d, eax
.text:0000000000004612                 push    qword ptr [rbp+28h]
.text:0000000000004615                 push    r15
.text:0000000000004617                 mov     rsi, r11
.text:000000000000461A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000461F                 mov     rdi, r12
.text:0000000000004622                 mov     [rsp+78h+var_48], r11
.text:0000000000004627                 call    quotearg_buffer_restyled
.text:000000000000462C                 add     rsp, 20h
.text:0000000000004630                 mov     r11, [rsp+58h+var_48]
.text:0000000000004635                 cmp     r11, rax
.text:0000000000004638                 ja      short loc_46A1
.text:000000000000463A                 lea     rsi, [rax+1]
.text:000000000000463E                 lea     rax, slot0
.text:0000000000004645                 cmp     r12, rax
.text:0000000000004648                 mov     [rbx], rsi
.text:000000000000464B                 jz      short loc_465F
.text:000000000000464D                 mov     rdi, r12        ; ptr
.text:0000000000004650                 mov     [rsp+58h+var_48], rsi
.text:0000000000004655                 call    _free
.text:000000000000465A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000465F
.text:000000000000465F loc_465F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000465F                 mov     rdi, rsi
.text:0000000000004662                 mov     [rsp+58h+var_48], rsi
.text:0000000000004667                 call    xmalloc
.text:000000000000466C                 sub     rsp, 8
.text:0000000000004670                 mov     [rbx+8], rax
.text:0000000000004674                 mov     r8d, [rbp+0]
.text:0000000000004678                 push    qword ptr [rbp+30h]
.text:000000000000467B                 push    qword ptr [rbp+28h]
.text:000000000000467E                 mov     rcx, r14
.text:0000000000004681                 push    r15
.text:0000000000004683                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004688                 mov     rdi, rax
.text:000000000000468B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004690                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004695                 mov     r12, rax
.text:0000000000004698                 call    quotearg_buffer_restyled
.text:000000000000469D                 add     rsp, 20h
.text:00000000000046A1
.text:00000000000046A1 loc_46A1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000046A1                 mov     eax, [rsp+58h+var_40]
.text:00000000000046A5                 mov     [r13+0], eax
.text:00000000000046A9                 add     rsp, 28h
.text:00000000000046AD                 mov     rax, r12
.text:00000000000046B0                 pop     rbx
.text:00000000000046B1                 pop     rbp
.text:00000000000046B2                 pop     r12
.text:00000000000046B4                 pop     r13
.text:00000000000046B6                 pop     r14
.text:00000000000046B8                 pop     r15
.text:00000000000046BA                 retn
.text:00000000000046BA ; ---------------------------------------------------------------------------
.text:00000000000046BB                 align 20h
.text:00000000000046C0
.text:00000000000046C0 loc_46C0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000046C0                 xor     edi, edi
.text:00000000000046C2                 call    xrealloc
.text:00000000000046C7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000046CF                 mov     rbx, rax
.text:00000000000046D2                 mov     cs:slotvec, rax
.text:00000000000046D9                 movups  xmmword ptr [rax], xmm0
.text:00000000000046DC                 jmp     loc_45BD
.text:00000000000046E1 ; ---------------------------------------------------------------------------
.text:00000000000046E1
.text:00000000000046E1 loc_46E1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000046E1                 call    _abort
.text:00000000000046E6 ; ---------------------------------------------------------------------------
.text:00000000000046E6
.text:00000000000046E6 loc_46E6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000046E6                 call    xalloc_die
.text:00000000000046E6 ; } // starts at 4540
.text:00000000000046E6 quotearg_n_options endp
.text:00000000000046E6
.text:00000000000046E6 ; ---------------------------------------------------------------------------
.text:00000000000046EB                 align 10h
.text:00000000000046F0
.text:00000000000046F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046F0
.text:00000000000046F0 ; Attributes: info_from_lumina
.text:00000000000046F0
.text:00000000000046F0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000046F0                 public clone_quoting_options
.text:00000000000046F0 clone_quoting_options proc near
.text:00000000000046F0 ; __unwind {
.text:00000000000046F0                 push    r12
.text:00000000000046F2                 push    rbp
.text:00000000000046F3                 push    rbx
.text:00000000000046F4                 mov     rbx, rdi
.text:00000000000046F7                 call    ___errno_location
.text:00000000000046FC                 mov     r12d, [rax]
.text:00000000000046FF                 mov     rbp, rax
.text:0000000000004702                 lea     rax, default_quoting_options
.text:0000000000004709                 test    rbx, rbx
.text:000000000000470C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004711                 cmovz   rbx, rax
.text:0000000000004715                 mov     rdi, rbx        ; src
.text:0000000000004718                 call    xmemdup
.text:000000000000471D                 mov     [rbp+0], r12d
.text:0000000000004721                 pop     rbx
.text:0000000000004722                 pop     rbp
.text:0000000000004723                 pop     r12
.text:0000000000004725                 retn
.text:0000000000004725 ; } // starts at 46F0
.text:0000000000004725 clone_quoting_options endp
.text:0000000000004725
.text:0000000000004725 ; ---------------------------------------------------------------------------
.text:0000000000004726                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730
.text:0000000000004730                 public get_quoting_style
.text:0000000000004730 get_quoting_style proc near
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 lea     rax, default_quoting_options
.text:0000000000004737                 test    rdi, rdi
.text:000000000000473A                 cmovz   rdi, rax
.text:000000000000473E                 mov     eax, [rdi]
.text:0000000000004740                 retn
.text:0000000000004740 ; } // starts at 4730
.text:0000000000004740 get_quoting_style endp
.text:0000000000004740
.text:0000000000004740 ; ---------------------------------------------------------------------------
.text:0000000000004741                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750
.text:0000000000004750                 public set_quoting_style
.text:0000000000004750 set_quoting_style proc near
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 lea     rax, default_quoting_options
.text:0000000000004757                 test    rdi, rdi
.text:000000000000475A                 cmovz   rdi, rax
.text:000000000000475E                 mov     [rdi], esi
.text:0000000000004760                 retn
.text:0000000000004760 ; } // starts at 4750
.text:0000000000004760 set_quoting_style endp
.text:0000000000004760
.text:0000000000004760 ; ---------------------------------------------------------------------------
.text:0000000000004761                 align 10h
.text:0000000000004770
.text:0000000000004770 ; =============== S U B R O U T I N E =======================================
.text:0000000000004770
.text:0000000000004770 ; Attributes: info_from_lumina
.text:0000000000004770
.text:0000000000004770 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004770                 public set_char_quoting
.text:0000000000004770 set_char_quoting proc near
.text:0000000000004770 ; __unwind {
.text:0000000000004770                 lea     rax, default_quoting_options
.text:0000000000004777                 test    rdi, rdi
.text:000000000000477A                 mov     ecx, esi
.text:000000000000477C                 cmovz   rdi, rax
.text:0000000000004780                 mov     eax, esi
.text:0000000000004782                 and     ecx, 1Fh
.text:0000000000004785                 shr     al, 5
.text:0000000000004788                 movzx   eax, al
.text:000000000000478B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004790                 mov     esi, [rdi]
.text:0000000000004792                 mov     eax, esi
.text:0000000000004794                 shr     eax, cl
.text:0000000000004796                 xor     edx, eax
.text:0000000000004798                 and     eax, 1
.text:000000000000479B                 and     edx, 1
.text:000000000000479E                 shl     edx, cl
.text:00000000000047A0                 xor     edx, esi
.text:00000000000047A2                 mov     [rdi], edx
.text:00000000000047A4                 retn
.text:00000000000047A4 ; } // starts at 4770
.text:00000000000047A4 set_char_quoting endp
.text:00000000000047A4
.text:00000000000047A4 ; ---------------------------------------------------------------------------
.text:00000000000047A5                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0
.text:00000000000047B0                 public set_quoting_flags
.text:00000000000047B0 set_quoting_flags proc near
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 lea     rax, default_quoting_options
.text:00000000000047B7                 test    rdi, rdi
.text:00000000000047BA                 cmovz   rdi, rax
.text:00000000000047BE                 mov     eax, [rdi+4]
.text:00000000000047C1                 mov     [rdi+4], esi
.text:00000000000047C4                 retn
.text:00000000000047C4 ; } // starts at 47B0
.text:00000000000047C4 set_quoting_flags endp
.text:00000000000047C4
.text:00000000000047C4 ; ---------------------------------------------------------------------------
.text:00000000000047C5                 align 10h
.text:00000000000047D0
.text:00000000000047D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047D0
.text:00000000000047D0 ; Attributes: info_from_lumina
.text:00000000000047D0
.text:00000000000047D0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000047D0                 public set_custom_quoting
.text:00000000000047D0 set_custom_quoting proc near
.text:00000000000047D0 ; __unwind {
.text:00000000000047D0                 lea     rax, default_quoting_options
.text:00000000000047D7                 test    rdi, rdi
.text:00000000000047DA                 cmovz   rdi, rax
.text:00000000000047DE                 test    rsi, rsi
.text:00000000000047E1                 mov     dword ptr [rdi], 0Ah
.text:00000000000047E7                 jz      short loc_47F7
.text:00000000000047E9                 test    rdx, rdx
.text:00000000000047EC                 jz      short loc_47F7
.text:00000000000047EE                 mov     [rdi+28h], rsi
.text:00000000000047F2                 mov     [rdi+30h], rdx
.text:00000000000047F6                 retn
.text:00000000000047F7 ; ---------------------------------------------------------------------------
.text:00000000000047F7
.text:00000000000047F7 loc_47F7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000047F7                                         ; set_custom_quoting+1C↑j
.text:00000000000047F7                 sub     rsp, 8
.text:00000000000047FB                 call    _abort
.text:00000000000047FB ; } // starts at 47D0
.text:00000000000047FB set_custom_quoting endp
.text:00000000000047FB
.text:0000000000004800
.text:0000000000004800 ; =============== S U B R O U T I N E =======================================
.text:0000000000004800
.text:0000000000004800 ; Attributes: info_from_lumina
.text:0000000000004800
.text:0000000000004800 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004800                 public quotearg_buffer
.text:0000000000004800 quotearg_buffer proc near
.text:0000000000004800
.text:0000000000004800 var_40          = qword ptr -40h
.text:0000000000004800
.text:0000000000004800 ; __unwind {
.text:0000000000004800                 push    r15
.text:0000000000004802                 push    r14
.text:0000000000004804                 lea     rax, default_quoting_options
.text:000000000000480B                 push    r13
.text:000000000000480D                 push    r12
.text:000000000000480F                 mov     r13, rdi
.text:0000000000004812                 push    rbp
.text:0000000000004813                 push    rbx
.text:0000000000004814                 mov     rbx, r8
.text:0000000000004817                 mov     r14, rsi
.text:000000000000481A                 mov     r15, rdx
.text:000000000000481D                 sub     rsp, 18h
.text:0000000000004821                 test    r8, r8
.text:0000000000004824                 cmovz   rbx, rax
.text:0000000000004828                 mov     [rsp+48h+var_40], rcx
.text:000000000000482D                 call    ___errno_location
.text:0000000000004832                 mov     r12d, [rax]
.text:0000000000004835                 mov     rbp, rax
.text:0000000000004838                 lea     rax, [rbx+8]
.text:000000000000483C                 sub     rsp, 8
.text:0000000000004840                 mov     r9d, [rbx+4]
.text:0000000000004844                 push    qword ptr [rbx+30h]
.text:0000000000004847                 mov     r8d, [rbx]
.text:000000000000484A                 push    qword ptr [rbx+28h]
.text:000000000000484D                 mov     rdx, r15
.text:0000000000004850                 push    rax
.text:0000000000004851                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004856                 mov     rsi, r14
.text:0000000000004859                 mov     rdi, r13
.text:000000000000485C                 call    quotearg_buffer_restyled
.text:0000000000004861                 mov     [rbp+0], r12d
.text:0000000000004865                 add     rsp, 38h
.text:0000000000004869                 pop     rbx
.text:000000000000486A                 pop     rbp
.text:000000000000486B                 pop     r12
.text:000000000000486D                 pop     r13
.text:000000000000486F                 pop     r14
.text:0000000000004871                 pop     r15
.text:0000000000004873                 retn
.text:0000000000004873 ; } // starts at 4800
.text:0000000000004873 quotearg_buffer endp
.text:0000000000004873
.text:0000000000004873 ; ---------------------------------------------------------------------------
.text:0000000000004874                 align 20h
.text:0000000000004880
.text:0000000000004880 ; =============== S U B R O U T I N E =======================================
.text:0000000000004880
.text:0000000000004880 ; Attributes: info_from_lumina
.text:0000000000004880
.text:0000000000004880 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004880                 public quotearg_alloc_mem
.text:0000000000004880 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004880
.text:0000000000004880 var_5C          = dword ptr -5Ch
.text:0000000000004880 var_58          = qword ptr -58h
.text:0000000000004880 var_50          = qword ptr -50h
.text:0000000000004880 var_48          = qword ptr -48h
.text:0000000000004880 var_40          = qword ptr -40h
.text:0000000000004880
.text:0000000000004880 ; __unwind {
.text:0000000000004880                 push    r15
.text:0000000000004882                 push    r14
.text:0000000000004884                 lea     rax, default_quoting_options
.text:000000000000488B                 push    r13
.text:000000000000488D                 push    r12
.text:000000000000488F                 mov     r12, rdx
.text:0000000000004892                 push    rbp
.text:0000000000004893                 push    rbx
.text:0000000000004894                 mov     rbx, rcx
.text:0000000000004897                 mov     r14, rdi
.text:000000000000489A                 mov     r15, rsi
.text:000000000000489D                 sub     rsp, 38h
.text:00000000000048A1                 test    rcx, rcx
.text:00000000000048A4                 cmovz   rbx, rax
.text:00000000000048A8                 xor     ebp, ebp
.text:00000000000048AA                 call    ___errno_location
.text:00000000000048AF                 test    r12, r12
.text:00000000000048B2                 mov     r13, rax
.text:00000000000048B5                 mov     eax, [rax]
.text:00000000000048B7                 setz    bpl
.text:00000000000048BB                 or      ebp, [rbx+4]
.text:00000000000048BE                 lea     r10, [rbx+8]
.text:00000000000048C2                 sub     rsp, 8
.text:00000000000048C6                 mov     r8d, [rbx]
.text:00000000000048C9                 mov     rcx, r15
.text:00000000000048CC                 mov     [rsp+70h+var_5C], eax
.text:00000000000048D0                 push    qword ptr [rbx+30h]
.text:00000000000048D3                 mov     rdx, r14
.text:00000000000048D6                 push    qword ptr [rbx+28h]
.text:00000000000048D9                 push    r10
.text:00000000000048DB                 xor     esi, esi
.text:00000000000048DD                 mov     r9d, ebp
.text:00000000000048E0                 xor     edi, edi
.text:00000000000048E2                 mov     [rsp+88h+var_48], r10
.text:00000000000048E7                 call    quotearg_buffer_restyled
.text:00000000000048EC                 lea     rsi, [rax+1]
.text:00000000000048F0                 mov     [rsp+88h+var_40], rax
.text:00000000000048F5                 add     rsp, 20h
.text:00000000000048F9                 mov     rdi, rsi
.text:00000000000048FC                 mov     [rsp+68h+var_50], rsi
.text:0000000000004901                 call    xmalloc
.text:0000000000004906                 mov     [rsp+68h+var_58], rax
.text:000000000000490B                 sub     rsp, 8
.text:000000000000490F                 push    qword ptr [rbx+30h]
.text:0000000000004912                 push    qword ptr [rbx+28h]
.text:0000000000004915                 mov     r10, [rsp+80h+var_48]
.text:000000000000491A                 mov     r9d, ebp
.text:000000000000491D                 mov     r8d, [rbx]
.text:0000000000004920                 mov     rcx, r15
.text:0000000000004923                 mov     rdx, r14
.text:0000000000004926                 mov     rdi, rax
.text:0000000000004929                 push    r10
.text:000000000000492B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004930                 call    quotearg_buffer_restyled
.text:0000000000004935                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004939                 add     rsp, 20h
.text:000000000000493D                 test    r12, r12
.text:0000000000004940                 mov     [r13+0], eax
.text:0000000000004944                 jz      short loc_494F
.text:0000000000004946                 mov     r11, [rsp+68h+var_40]
.text:000000000000494B                 mov     [r12], r11
.text:000000000000494F
.text:000000000000494F loc_494F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000494F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004954                 add     rsp, 38h
.text:0000000000004958                 pop     rbx
.text:0000000000004959                 pop     rbp
.text:000000000000495A                 pop     r12
.text:000000000000495C                 pop     r13
.text:000000000000495E                 pop     r14
.text:0000000000004960                 pop     r15
.text:0000000000004962                 retn
.text:0000000000004962 ; } // starts at 4880
.text:0000000000004962 quotearg_alloc_mem endp
.text:0000000000004962
.text:0000000000004962 ; ---------------------------------------------------------------------------
.text:0000000000004963                 align 10h
.text:0000000000004970
.text:0000000000004970 ; =============== S U B R O U T I N E =======================================
.text:0000000000004970
.text:0000000000004970
.text:0000000000004970                 public quotearg_alloc
.text:0000000000004970 quotearg_alloc  proc near
.text:0000000000004970 ; __unwind {
.text:0000000000004970                 mov     rcx, rdx
.text:0000000000004973                 xor     edx, edx
.text:0000000000004975                 jmp     quotearg_alloc_mem
.text:0000000000004975 ; } // starts at 4970
.text:0000000000004975 quotearg_alloc  endp
.text:0000000000004975
.text:0000000000004975 ; ---------------------------------------------------------------------------
.text:000000000000497A                 align 20h
.text:0000000000004980
.text:0000000000004980 ; =============== S U B R O U T I N E =======================================
.text:0000000000004980
.text:0000000000004980 ; Attributes: info_from_lumina
.text:0000000000004980
.text:0000000000004980 ; void __cdecl quotearg_free()
.text:0000000000004980                 public quotearg_free
.text:0000000000004980 quotearg_free   proc near
.text:0000000000004980 ; __unwind {
.text:0000000000004980                 mov     eax, cs:nslots
.text:0000000000004986                 push    r12
.text:0000000000004988                 mov     r12, cs:slotvec
.text:000000000000498F                 push    rbp
.text:0000000000004990                 push    rbx
.text:0000000000004991                 cmp     eax, 1
.text:0000000000004994                 jle     short loc_49C1
.text:0000000000004996                 sub     eax, 2
.text:0000000000004999                 lea     rbx, [r12+18h]
.text:000000000000499E                 shl     rax, 4
.text:00000000000049A2                 lea     rbp, [r12+rax+28h]
.text:00000000000049A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000049B0
.text:00000000000049B0 loc_49B0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000049B0                 mov     rdi, [rbx]      ; ptr
.text:00000000000049B3                 add     rbx, 10h
.text:00000000000049B7                 call    _free
.text:00000000000049BC                 cmp     rbx, rbp
.text:00000000000049BF                 jnz     short loc_49B0
.text:00000000000049C1
.text:00000000000049C1 loc_49C1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000049C1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000049C6                 lea     rbx, slot0
.text:00000000000049CD                 cmp     rdi, rbx
.text:00000000000049D0                 jz      short loc_49E9
.text:00000000000049D2                 call    _free
.text:00000000000049D7                 mov     cs:slotvec0, 100h
.text:00000000000049E2                 mov     cs:off_208098, rbx
.text:00000000000049E9
.text:00000000000049E9 loc_49E9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000049E9                 lea     rbx, slotvec0
.text:00000000000049F0                 cmp     r12, rbx
.text:00000000000049F3                 jz      short loc_4A04
.text:00000000000049F5                 mov     rdi, r12        ; ptr
.text:00000000000049F8                 call    _free
.text:00000000000049FD                 mov     cs:slotvec, rbx
.text:0000000000004A04
.text:0000000000004A04 loc_4A04:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004A04                 pop     rbx
.text:0000000000004A05                 mov     cs:nslots, 1
.text:0000000000004A0F                 pop     rbp
.text:0000000000004A10                 pop     r12
.text:0000000000004A12                 retn
.text:0000000000004A12 ; } // starts at 4980
.text:0000000000004A12 quotearg_free   endp
.text:0000000000004A12
.text:0000000000004A12 ; ---------------------------------------------------------------------------
.text:0000000000004A13                 align 20h
.text:0000000000004A20
.text:0000000000004A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A20
.text:0000000000004A20
.text:0000000000004A20                 public quotearg_n
.text:0000000000004A20 quotearg_n      proc near
.text:0000000000004A20 ; __unwind {
.text:0000000000004A20                 lea     rcx, default_quoting_options
.text:0000000000004A27                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A2E                 jmp     quotearg_n_options
.text:0000000000004A2E ; } // starts at 4A20
.text:0000000000004A2E quotearg_n      endp
.text:0000000000004A2E
.text:0000000000004A2E ; ---------------------------------------------------------------------------
.text:0000000000004A33                 align 20h
.text:0000000000004A40
.text:0000000000004A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A40
.text:0000000000004A40
.text:0000000000004A40                 public quotearg_n_mem
.text:0000000000004A40 quotearg_n_mem  proc near
.text:0000000000004A40 ; __unwind {
.text:0000000000004A40                 lea     rcx, default_quoting_options
.text:0000000000004A47                 jmp     quotearg_n_options
.text:0000000000004A47 ; } // starts at 4A40
.text:0000000000004A47 quotearg_n_mem  endp
.text:0000000000004A47
.text:0000000000004A47 ; ---------------------------------------------------------------------------
.text:0000000000004A4C                 align 10h
.text:0000000000004A50
.text:0000000000004A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A50
.text:0000000000004A50
.text:0000000000004A50                 public quotearg
.text:0000000000004A50 quotearg        proc near
.text:0000000000004A50 ; __unwind {
.text:0000000000004A50                 lea     rcx, default_quoting_options
.text:0000000000004A57                 mov     rsi, rdi
.text:0000000000004A5A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A61                 xor     edi, edi
.text:0000000000004A63                 jmp     quotearg_n_options
.text:0000000000004A63 ; } // starts at 4A50
.text:0000000000004A63 quotearg        endp
.text:0000000000004A63
.text:0000000000004A63 ; ---------------------------------------------------------------------------
.text:0000000000004A68                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70
.text:0000000000004A70                 public quotearg_mem
.text:0000000000004A70 quotearg_mem    proc near
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 lea     rcx, default_quoting_options
.text:0000000000004A77                 mov     rdx, rsi
.text:0000000000004A7A                 mov     rsi, rdi
.text:0000000000004A7D                 xor     edi, edi
.text:0000000000004A7F                 jmp     quotearg_n_options
.text:0000000000004A7F ; } // starts at 4A70
.text:0000000000004A7F quotearg_mem    endp
.text:0000000000004A7F
.text:0000000000004A7F ; ---------------------------------------------------------------------------
.text:0000000000004A84                 align 10h
.text:0000000000004A90
.text:0000000000004A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A90
.text:0000000000004A90 ; Attributes: info_from_lumina
.text:0000000000004A90
.text:0000000000004A90 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004A90                 public quotearg_n_style
.text:0000000000004A90 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004A90
.text:0000000000004A90 var_48          = dword ptr -48h
.text:0000000000004A90 var_44          = qword ptr -44h
.text:0000000000004A90 var_3C          = qword ptr -3Ch
.text:0000000000004A90 var_34          = qword ptr -34h
.text:0000000000004A90 var_2C          = qword ptr -2Ch
.text:0000000000004A90 var_24          = qword ptr -24h
.text:0000000000004A90 var_1C          = qword ptr -1Ch
.text:0000000000004A90 var_14          = dword ptr -14h
.text:0000000000004A90 var_10          = qword ptr -10h
.text:0000000000004A90
.text:0000000000004A90 ; __unwind {
.text:0000000000004A90                 sub     rsp, 48h
.text:0000000000004A94                 mov     rax, rdx
.text:0000000000004A97                 mov     rdx, fs:28h
.text:0000000000004AA0                 mov     [rsp+48h+var_10], rdx
.text:0000000000004AA5                 xor     edx, edx
.text:0000000000004AA7                 cmp     esi, 0Ah
.text:0000000000004AAA                 jz      short loc_4B14
.text:0000000000004AAC                 mov     [rsp+48h+var_48], esi
.text:0000000000004AAF                 mov     rcx, rsp
.text:0000000000004AB2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004AB9                 mov     rsi, rax
.text:0000000000004ABC                 mov     [rsp+48h+var_44], 0
.text:0000000000004AC5                 mov     [rsp+48h+var_3C], 0
.text:0000000000004ACE                 mov     [rsp+48h+var_34], 0
.text:0000000000004AD7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004AE0                 mov     [rsp+48h+var_24], 0
.text:0000000000004AE9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004AF2                 mov     [rsp+48h+var_14], 0
.text:0000000000004AFA                 call    quotearg_n_options
.text:0000000000004AFF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004B04                 xor     rcx, fs:28h
.text:0000000000004B0D                 jnz     short loc_4B19
.text:0000000000004B0F                 add     rsp, 48h
.text:0000000000004B13                 retn
.text:0000000000004B14 ; ---------------------------------------------------------------------------
.text:0000000000004B14
.text:0000000000004B14 loc_4B14:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004B14                 call    _abort
.text:0000000000004B19 ; ---------------------------------------------------------------------------
.text:0000000000004B19
.text:0000000000004B19 loc_4B19:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004B19                 call    ___stack_chk_fail
.text:0000000000004B19 ; } // starts at 4A90
.text:0000000000004B19 quotearg_n_style endp
.text:0000000000004B19
.text:0000000000004B19 ; ---------------------------------------------------------------------------
.text:0000000000004B1E                 align 20h
.text:0000000000004B20
.text:0000000000004B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B20
.text:0000000000004B20 ; Attributes: info_from_lumina
.text:0000000000004B20
.text:0000000000004B20 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004B20                 public quotearg_n_style_mem
.text:0000000000004B20 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004B20
.text:0000000000004B20 var_48          = dword ptr -48h
.text:0000000000004B20 var_44          = qword ptr -44h
.text:0000000000004B20 var_3C          = qword ptr -3Ch
.text:0000000000004B20 var_34          = qword ptr -34h
.text:0000000000004B20 var_2C          = qword ptr -2Ch
.text:0000000000004B20 var_24          = qword ptr -24h
.text:0000000000004B20 var_1C          = qword ptr -1Ch
.text:0000000000004B20 var_14          = dword ptr -14h
.text:0000000000004B20 var_10          = qword ptr -10h
.text:0000000000004B20
.text:0000000000004B20 ; __unwind {
.text:0000000000004B20                 sub     rsp, 48h
.text:0000000000004B24                 mov     rax, rdx
.text:0000000000004B27                 mov     rdx, rcx
.text:0000000000004B2A                 mov     rcx, fs:28h
.text:0000000000004B33                 mov     [rsp+48h+var_10], rcx
.text:0000000000004B38                 xor     ecx, ecx
.text:0000000000004B3A                 cmp     esi, 0Ah
.text:0000000000004B3D                 jz      short loc_4BA0
.text:0000000000004B3F                 mov     [rsp+48h+var_48], esi
.text:0000000000004B42                 mov     rcx, rsp
.text:0000000000004B45                 mov     rsi, rax
.text:0000000000004B48                 mov     [rsp+48h+var_44], 0
.text:0000000000004B51                 mov     [rsp+48h+var_3C], 0
.text:0000000000004B5A                 mov     [rsp+48h+var_34], 0
.text:0000000000004B63                 mov     [rsp+48h+var_2C], 0
.text:0000000000004B6C                 mov     [rsp+48h+var_24], 0
.text:0000000000004B75                 mov     [rsp+48h+var_1C], 0
.text:0000000000004B7E                 mov     [rsp+48h+var_14], 0
.text:0000000000004B86                 call    quotearg_n_options
.text:0000000000004B8B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004B90                 xor     rdx, fs:28h
.text:0000000000004B99                 jnz     short loc_4BA5
.text:0000000000004B9B                 add     rsp, 48h
.text:0000000000004B9F                 retn
.text:0000000000004BA0 ; ---------------------------------------------------------------------------
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004BA0                 call    _abort
.text:0000000000004BA5 ; ---------------------------------------------------------------------------
.text:0000000000004BA5
.text:0000000000004BA5 loc_4BA5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004BA5                 call    ___stack_chk_fail
.text:0000000000004BA5 ; } // starts at 4B20
.text:0000000000004BA5 quotearg_n_style_mem endp
.text:0000000000004BA5
.text:0000000000004BA5 ; ---------------------------------------------------------------------------
.text:0000000000004BAA                 align 10h
.text:0000000000004BB0
.text:0000000000004BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BB0
.text:0000000000004BB0
.text:0000000000004BB0                 public quotearg_style
.text:0000000000004BB0 quotearg_style  proc near
.text:0000000000004BB0 ; __unwind {
.text:0000000000004BB0                 mov     rdx, rsi
.text:0000000000004BB3                 mov     esi, edi
.text:0000000000004BB5                 xor     edi, edi
.text:0000000000004BB7                 jmp     quotearg_n_style
.text:0000000000004BB7 ; } // starts at 4BB0
.text:0000000000004BB7 quotearg_style  endp
.text:0000000000004BB7
.text:0000000000004BB7 ; ---------------------------------------------------------------------------
.text:0000000000004BBC                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BC0
.text:0000000000004BC0
.text:0000000000004BC0                 public quotearg_style_mem
.text:0000000000004BC0 quotearg_style_mem proc near
.text:0000000000004BC0 ; __unwind {
.text:0000000000004BC0                 mov     rcx, rdx
.text:0000000000004BC3                 mov     rdx, rsi
.text:0000000000004BC6                 mov     esi, edi
.text:0000000000004BC8                 xor     edi, edi
.text:0000000000004BCA                 jmp     quotearg_n_style_mem
.text:0000000000004BCA ; } // starts at 4BC0
.text:0000000000004BCA quotearg_style_mem endp
.text:0000000000004BCA
.text:0000000000004BCA ; ---------------------------------------------------------------------------
.text:0000000000004BCF                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0 ; Attributes: info_from_lumina
.text:0000000000004BD0
.text:0000000000004BD0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004BD0                 public quotearg_char_mem
.text:0000000000004BD0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004BD0                                         ; quotearg_colon+C↓j ...
.text:0000000000004BD0
.text:0000000000004BD0 var_48          = xmmword ptr -48h
.text:0000000000004BD0 var_38          = xmmword ptr -38h
.text:0000000000004BD0 var_28          = xmmword ptr -28h
.text:0000000000004BD0 var_18          = qword ptr -18h
.text:0000000000004BD0 var_10          = qword ptr -10h
.text:0000000000004BD0
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 sub     rsp, 48h
.text:0000000000004BD4                 mov     ecx, edx
.text:0000000000004BD6                 mov     rax, fs:28h
.text:0000000000004BDF                 mov     [rsp+48h+var_10], rax
.text:0000000000004BE4                 xor     eax, eax
.text:0000000000004BE6                 mov     rax, cs:qword_2082D0
.text:0000000000004BED                 mov     r8, rsp
.text:0000000000004BF0                 and     ecx, 1Fh
.text:0000000000004BF3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004BFB                 mov     [rsp+48h+var_18], rax
.text:0000000000004C00                 mov     eax, edx
.text:0000000000004C02                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004C06                 shr     al, 5
.text:0000000000004C09                 movzx   eax, al
.text:0000000000004C0C                 lea     r9, [r8+rax*4+8]
.text:0000000000004C11                 movdqa  xmm0, cs:xmmword_2082B0
.text:0000000000004C19                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004C1E                 movdqa  xmm0, cs:xmmword_2082C0
.text:0000000000004C26                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004C2B                 mov     edx, [r9]
.text:0000000000004C2E                 mov     eax, edx
.text:0000000000004C30                 shr     eax, cl
.text:0000000000004C32                 not     eax
.text:0000000000004C34                 and     eax, 1
.text:0000000000004C37                 shl     eax, cl
.text:0000000000004C39                 mov     rcx, r8
.text:0000000000004C3C                 xor     eax, edx
.text:0000000000004C3E                 mov     rdx, rsi
.text:0000000000004C41                 mov     rsi, rdi
.text:0000000000004C44                 mov     [r9], eax
.text:0000000000004C47                 xor     edi, edi
.text:0000000000004C49                 call    quotearg_n_options
.text:0000000000004C4E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004C53                 xor     rsi, fs:28h
.text:0000000000004C5C                 jnz     short loc_4C63
.text:0000000000004C5E                 add     rsp, 48h
.text:0000000000004C62                 retn
.text:0000000000004C63 ; ---------------------------------------------------------------------------
.text:0000000000004C63
.text:0000000000004C63 loc_4C63:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004C63                 call    ___stack_chk_fail
.text:0000000000004C63 ; } // starts at 4BD0
.text:0000000000004C63 quotearg_char_mem endp
.text:0000000000004C63
.text:0000000000004C63 ; ---------------------------------------------------------------------------
.text:0000000000004C68                 align 10h
.text:0000000000004C70
.text:0000000000004C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C70
.text:0000000000004C70
.text:0000000000004C70                 public quotearg_char
.text:0000000000004C70 quotearg_char   proc near
.text:0000000000004C70 ; __unwind {
.text:0000000000004C70                 movsx   edx, sil
.text:0000000000004C74                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C7B                 jmp     quotearg_char_mem
.text:0000000000004C7B ; } // starts at 4C70
.text:0000000000004C7B quotearg_char   endp
.text:0000000000004C7B
.text:0000000000004C80
.text:0000000000004C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C80
.text:0000000000004C80
.text:0000000000004C80                 public quotearg_colon
.text:0000000000004C80 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004C80 ; __unwind {
.text:0000000000004C80                 mov     edx, 3Ah ; ':'
.text:0000000000004C85                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C8C                 jmp     quotearg_char_mem
.text:0000000000004C8C ; } // starts at 4C80
.text:0000000000004C8C quotearg_colon  endp
.text:0000000000004C8C
.text:0000000000004C8C ; ---------------------------------------------------------------------------
.text:0000000000004C91                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0
.text:0000000000004CA0                 public quotearg_colon_mem
.text:0000000000004CA0 quotearg_colon_mem proc near
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 mov     edx, 3Ah ; ':'
.text:0000000000004CA5                 jmp     quotearg_char_mem
.text:0000000000004CA5 ; } // starts at 4CA0
.text:0000000000004CA5 quotearg_colon_mem endp
.text:0000000000004CA5
.text:0000000000004CA5 ; ---------------------------------------------------------------------------
.text:0000000000004CAA                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0 ; Attributes: info_from_lumina
.text:0000000000004CB0
.text:0000000000004CB0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004CB0                 public quotearg_n_style_colon
.text:0000000000004CB0 quotearg_n_style_colon proc near        ; CODE XREF: main+4D5↑p
.text:0000000000004CB0
.text:0000000000004CB0 var_48          = dword ptr -48h
.text:0000000000004CB0 var_44          = qword ptr -44h
.text:0000000000004CB0 var_3C          = qword ptr -3Ch
.text:0000000000004CB0 var_34          = qword ptr -34h
.text:0000000000004CB0 var_2C          = qword ptr -2Ch
.text:0000000000004CB0 var_24          = qword ptr -24h
.text:0000000000004CB0 var_1C          = qword ptr -1Ch
.text:0000000000004CB0 var_14          = dword ptr -14h
.text:0000000000004CB0 var_10          = qword ptr -10h
.text:0000000000004CB0
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 sub     rsp, 48h
.text:0000000000004CB4                 mov     rax, rdx
.text:0000000000004CB7                 mov     rdx, fs:28h
.text:0000000000004CC0                 mov     [rsp+48h+var_10], rdx
.text:0000000000004CC5                 xor     edx, edx
.text:0000000000004CC7                 cmp     esi, 0Ah
.text:0000000000004CCA                 jz      short loc_4D34
.text:0000000000004CCC                 mov     [rsp+48h+var_48], esi
.text:0000000000004CCF                 mov     rcx, rsp
.text:0000000000004CD2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CD9                 mov     rsi, rax
.text:0000000000004CDC                 mov     [rsp+48h+var_44], 0
.text:0000000000004CE5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000004CEE                 mov     [rsp+48h+var_34], 0
.text:0000000000004CF7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004D00                 mov     [rsp+48h+var_24], 0
.text:0000000000004D09                 mov     [rsp+48h+var_1C], 0
.text:0000000000004D12                 mov     [rsp+48h+var_14], 0
.text:0000000000004D1A                 call    quotearg_n_options
.text:0000000000004D1F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004D24                 xor     rcx, fs:28h
.text:0000000000004D2D                 jnz     short loc_4D39
.text:0000000000004D2F                 add     rsp, 48h
.text:0000000000004D33                 retn
.text:0000000000004D34 ; ---------------------------------------------------------------------------
.text:0000000000004D34
.text:0000000000004D34 loc_4D34:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004D34                 call    _abort
.text:0000000000004D39 ; ---------------------------------------------------------------------------
.text:0000000000004D39
.text:0000000000004D39 loc_4D39:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004D39                 call    ___stack_chk_fail
.text:0000000000004D39 ; } // starts at 4CB0
.text:0000000000004D39 quotearg_n_style_colon endp
.text:0000000000004D39
.text:0000000000004D39 ; ---------------------------------------------------------------------------
.text:0000000000004D3E                 align 20h
.text:0000000000004D40
.text:0000000000004D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D40
.text:0000000000004D40 ; Attributes: info_from_lumina
.text:0000000000004D40
.text:0000000000004D40 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004D40                 public quotearg_n_custom_mem
.text:0000000000004D40 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004D40                                         ; quotearg_custom+12↓j ...
.text:0000000000004D40
.text:0000000000004D40 var_48          = xmmword ptr -48h
.text:0000000000004D40 var_38          = xmmword ptr -38h
.text:0000000000004D40 var_28          = xmmword ptr -28h
.text:0000000000004D40 var_18          = qword ptr -18h
.text:0000000000004D40 var_10          = qword ptr -10h
.text:0000000000004D40
.text:0000000000004D40 ; __unwind {
.text:0000000000004D40                 sub     rsp, 48h
.text:0000000000004D44                 mov     r9, rcx
.text:0000000000004D47                 mov     rcx, cs:qword_2082D0
.text:0000000000004D4E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004D56                 mov     rax, fs:28h
.text:0000000000004D5F                 mov     [rsp+48h+var_10], rax
.text:0000000000004D64                 xor     eax, eax
.text:0000000000004D66                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004D6A                 test    rsi, rsi
.text:0000000000004D6D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004D72                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004D79                 movdqa  xmm0, cs:xmmword_2082B0
.text:0000000000004D81                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004D86                 movdqa  xmm0, cs:xmmword_2082C0
.text:0000000000004D8E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004D93                 jz      short loc_4DC7
.text:0000000000004D95                 test    rdx, rdx
.text:0000000000004D98                 jz      short loc_4DC7
.text:0000000000004D9A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004D9F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004DA4                 mov     rcx, rsp
.text:0000000000004DA7                 mov     rdx, r8
.text:0000000000004DAA                 mov     rsi, r9
.text:0000000000004DAD                 call    quotearg_n_options
.text:0000000000004DB2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004DB7                 xor     rdi, fs:28h
.text:0000000000004DC0                 jnz     short loc_4DCC
.text:0000000000004DC2                 add     rsp, 48h
.text:0000000000004DC6                 retn
.text:0000000000004DC7 ; ---------------------------------------------------------------------------
.text:0000000000004DC7
.text:0000000000004DC7 loc_4DC7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004DC7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004DC7                 call    _abort
.text:0000000000004DCC ; ---------------------------------------------------------------------------
.text:0000000000004DCC
.text:0000000000004DCC loc_4DCC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004DCC                 call    ___stack_chk_fail
.text:0000000000004DCC ; } // starts at 4D40
.text:0000000000004DCC quotearg_n_custom_mem endp
.text:0000000000004DCC
.text:0000000000004DCC ; ---------------------------------------------------------------------------
.text:0000000000004DD1                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DE0
.text:0000000000004DE0
.text:0000000000004DE0                 public quotearg_n_custom
.text:0000000000004DE0 quotearg_n_custom proc near
.text:0000000000004DE0 ; __unwind {
.text:0000000000004DE0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004DE7                 jmp     quotearg_n_custom_mem
.text:0000000000004DE7 ; } // starts at 4DE0
.text:0000000000004DE7 quotearg_n_custom endp
.text:0000000000004DE7
.text:0000000000004DE7 ; ---------------------------------------------------------------------------
.text:0000000000004DEC                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DF0
.text:0000000000004DF0
.text:0000000000004DF0                 public quotearg_custom
.text:0000000000004DF0 quotearg_custom proc near
.text:0000000000004DF0 ; __unwind {
.text:0000000000004DF0                 mov     rcx, rdx
.text:0000000000004DF3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004DFA                 mov     rdx, rsi
.text:0000000000004DFD                 mov     rsi, rdi
.text:0000000000004E00                 xor     edi, edi
.text:0000000000004E02                 jmp     quotearg_n_custom_mem
.text:0000000000004E02 ; } // starts at 4DF0
.text:0000000000004E02 quotearg_custom endp
.text:0000000000004E02
.text:0000000000004E02 ; ---------------------------------------------------------------------------
.text:0000000000004E07                 align 10h
.text:0000000000004E10
.text:0000000000004E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E10
.text:0000000000004E10
.text:0000000000004E10                 public quotearg_custom_mem
.text:0000000000004E10 quotearg_custom_mem proc near
.text:0000000000004E10 ; __unwind {
.text:0000000000004E10                 mov     r8, rcx
.text:0000000000004E13                 mov     rcx, rdx
.text:0000000000004E16                 mov     rdx, rsi
.text:0000000000004E19                 mov     rsi, rdi
.text:0000000000004E1C                 xor     edi, edi
.text:0000000000004E1E                 jmp     quotearg_n_custom_mem
.text:0000000000004E1E ; } // starts at 4E10
.text:0000000000004E1E quotearg_custom_mem endp
.text:0000000000004E1E
.text:0000000000004E1E ; ---------------------------------------------------------------------------
.text:0000000000004E23                 align 10h
.text:0000000000004E30
.text:0000000000004E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E30
.text:0000000000004E30
.text:0000000000004E30                 public quote_n_mem
.text:0000000000004E30 quote_n_mem     proc near
.text:0000000000004E30 ; __unwind {
.text:0000000000004E30                 lea     rcx, quote_quoting_options
.text:0000000000004E37                 jmp     quotearg_n_options
.text:0000000000004E37 ; } // starts at 4E30
.text:0000000000004E37 quote_n_mem     endp
.text:0000000000004E37
.text:0000000000004E37 ; ---------------------------------------------------------------------------
.text:0000000000004E3C                 align 20h
.text:0000000000004E40
.text:0000000000004E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E40
.text:0000000000004E40
.text:0000000000004E40                 public quote_mem
.text:0000000000004E40 quote_mem       proc near
.text:0000000000004E40 ; __unwind {
.text:0000000000004E40                 lea     rcx, quote_quoting_options
.text:0000000000004E47                 mov     rdx, rsi
.text:0000000000004E4A                 mov     rsi, rdi
.text:0000000000004E4D                 xor     edi, edi
.text:0000000000004E4F                 jmp     quotearg_n_options
.text:0000000000004E4F ; } // starts at 4E40
.text:0000000000004E4F quote_mem       endp
.text:0000000000004E4F
.text:0000000000004E4F ; ---------------------------------------------------------------------------
.text:0000000000004E54                 align 20h
.text:0000000000004E60
.text:0000000000004E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E60
.text:0000000000004E60
.text:0000000000004E60                 public quote_n
.text:0000000000004E60 quote_n         proc near
.text:0000000000004E60 ; __unwind {
.text:0000000000004E60                 lea     rcx, quote_quoting_options
.text:0000000000004E67                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E6E                 jmp     quotearg_n_options
.text:0000000000004E6E ; } // starts at 4E60
.text:0000000000004E6E quote_n         endp
.text:0000000000004E6E
.text:0000000000004E6E ; ---------------------------------------------------------------------------
.text:0000000000004E73                 align 20h
.text:0000000000004E80
.text:0000000000004E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E80
.text:0000000000004E80
.text:0000000000004E80                 public quote
.text:0000000000004E80 quote           proc near
.text:0000000000004E80 ; __unwind {
.text:0000000000004E80                 lea     rcx, quote_quoting_options
.text:0000000000004E87                 mov     rsi, rdi
.text:0000000000004E8A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E91                 xor     edi, edi
.text:0000000000004E93                 jmp     quotearg_n_options
.text:0000000000004E93 ; } // starts at 4E80
.text:0000000000004E93 quote           endp
.text:0000000000004E93
.text:0000000000004E93 ; ---------------------------------------------------------------------------
.text:0000000000004E98                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA0
.text:0000000000004EA0
.text:0000000000004EA0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004EA0                 public version_etc_arn
.text:0000000000004EA0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_52DB↓j
.text:0000000000004EA0                                         ; version_etc_va:loc_532B↓p ...
.text:0000000000004EA0
.text:0000000000004EA0 var_58          = qword ptr -58h
.text:0000000000004EA0 var_50          = qword ptr -50h
.text:0000000000004EA0 var_48          = qword ptr -48h
.text:0000000000004EA0 var_40          = qword ptr -40h
.text:0000000000004EA0
.text:0000000000004EA0 ; __unwind {
.text:0000000000004EA0                 push    r15
.text:0000000000004EA2                 push    r14
.text:0000000000004EA4                 push    r13
.text:0000000000004EA6                 push    r12
.text:0000000000004EA8                 mov     r12, r9
.text:0000000000004EAB                 push    rbp
.text:0000000000004EAC                 push    rbx
.text:0000000000004EAD                 mov     rbp, rdi
.text:0000000000004EB0                 mov     rbx, r8
.text:0000000000004EB3                 sub     rsp, 28h
.text:0000000000004EB7                 test    rsi, rsi
.text:0000000000004EBA                 jz      loc_4FD8
.text:0000000000004EC0                 mov     r8, rdx
.text:0000000000004EC3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004ECA                 mov     r9, rcx
.text:0000000000004ECD                 xor     eax, eax
.text:0000000000004ECF                 mov     rcx, rsi
.text:0000000000004ED2                 mov     esi, 1
.text:0000000000004ED7                 call    ___fprintf_chk
.text:0000000000004EDC
.text:0000000000004EDC loc_4EDC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004EDC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004EE3                 xor     edi, edi        ; domainname
.text:0000000000004EE5                 mov     edx, 5          ; category
.text:0000000000004EEA                 call    _dcgettext
.text:0000000000004EEF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004EF6                 mov     rcx, rax
.text:0000000000004EF9                 mov     r8d, 7E3h
.text:0000000000004EFF                 mov     esi, 1
.text:0000000000004F04                 mov     rdi, rbp
.text:0000000000004F07                 xor     eax, eax
.text:0000000000004F09                 call    ___fprintf_chk
.text:0000000000004F0E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004F15                 xor     edi, edi        ; domainname
.text:0000000000004F17                 mov     edx, 5          ; category
.text:0000000000004F1C                 call    _dcgettext
.text:0000000000004F21                 mov     rsi, rbp        ; stream
.text:0000000000004F24                 mov     rdi, rax        ; s
.text:0000000000004F27                 call    _fputs_unlocked
.text:0000000000004F2C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004F30                 ja      def_4F44        ; jumptable 0000000000004F44 default case
.text:0000000000004F36                 lea     rdx, jpt_4F44
.text:0000000000004F3D                 movsxd  rax, ds:(jpt_4F44 - 6B28h)[rdx+r12*4]
.text:0000000000004F41                 add     rax, rdx
.text:0000000000004F44                 jmp     rax             ; switch jump
.text:0000000000004F44 ; ---------------------------------------------------------------------------
.text:0000000000004F46                 align 10h
.text:0000000000004F50
.text:0000000000004F50 loc_4F50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004F50                                         ; DATA XREF: .rodata:jpt_4F44↓o
.text:0000000000004F50                 mov     r9, [rbx+38h]   ; jumptable 0000000000004F44 case 8
.text:0000000000004F54                 mov     rax, [rbx+10h]
.text:0000000000004F58                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004F5F                 mov     r8, [rbx+8]
.text:0000000000004F63                 mov     edx, 5          ; category
.text:0000000000004F68                 xor     edi, edi        ; domainname
.text:0000000000004F6A                 mov     r13, [rbx+30h]
.text:0000000000004F6E                 mov     r12, [rbx+28h]
.text:0000000000004F72                 mov     [rsp+58h+var_48], r9
.text:0000000000004F77                 mov     r15, [rbx+20h]
.text:0000000000004F7B                 mov     r14, [rbx+18h]
.text:0000000000004F7F                 mov     [rsp+58h+var_58], rax
.text:0000000000004F83                 mov     [rsp+58h+var_50], r8
.text:0000000000004F88                 mov     rbx, [rbx]
.text:0000000000004F8B                 call    _dcgettext
.text:0000000000004F90                 sub     rsp, 8
.text:0000000000004F94
.text:0000000000004F94 loc_4F94:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004F94                 mov     r9, [rsp+60h+var_48]
.text:0000000000004F99                 mov     rdx, rax
.text:0000000000004F9C                 mov     rcx, rbx
.text:0000000000004F9F                 mov     esi, 1
.text:0000000000004FA4                 mov     rdi, rbp
.text:0000000000004FA7                 xor     eax, eax
.text:0000000000004FA9                 push    r9
.text:0000000000004FAB                 push    r13
.text:0000000000004FAD                 push    r12
.text:0000000000004FAF                 push    r15
.text:0000000000004FB1                 push    r14
.text:0000000000004FB3                 mov     r9, [rsp+88h+var_58]
.text:0000000000004FB8                 mov     r8, [rsp+88h+var_50]
.text:0000000000004FBD                 call    ___fprintf_chk
.text:0000000000004FC2                 add     rsp, 30h
.text:0000000000004FC6
.text:0000000000004FC6 loc_4FC6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004FC6                                         ; DATA XREF: .rodata:jpt_4F44↓o
.text:0000000000004FC6                 add     rsp, 28h        ; jumptable 0000000000004F44 case 0
.text:0000000000004FCA                 pop     rbx
.text:0000000000004FCB                 pop     rbp
.text:0000000000004FCC                 pop     r12
.text:0000000000004FCE                 pop     r13
.text:0000000000004FD0                 pop     r14
.text:0000000000004FD2                 pop     r15
.text:0000000000004FD4                 retn
.text:0000000000004FD4 ; ---------------------------------------------------------------------------
.text:0000000000004FD5                 align 8
.text:0000000000004FD8
.text:0000000000004FD8 loc_4FD8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004FD8                 mov     r8, rcx
.text:0000000000004FDB                 mov     rcx, rdx
.text:0000000000004FDE                 lea     rdx, aSS_1      ; "%s %s\n"
.text:0000000000004FE5                 mov     esi, 1
.text:0000000000004FEA                 xor     eax, eax
.text:0000000000004FEC                 call    ___fprintf_chk
.text:0000000000004FF1                 jmp     loc_4EDC
.text:0000000000004FF1 ; ---------------------------------------------------------------------------
.text:0000000000004FF6                 align 20h
.text:0000000000005000
.text:0000000000005000 loc_5000:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005000                                         ; DATA XREF: .rodata:jpt_4F44↓o
.text:0000000000005000                 mov     r10, [rbx+40h]  ; jumptable 0000000000004F44 case 9
.text:0000000000005004                 mov     r9, [rbx+38h]
.text:0000000000005008                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000500F                 mov     rax, [rbx+10h]
.text:0000000000005013                 mov     r8, [rbx+8]
.text:0000000000005017                 mov     edx, 5          ; category
.text:000000000000501C                 mov     r13, [rbx+30h]
.text:0000000000005020                 mov     r12, [rbx+28h]
.text:0000000000005024                 mov     r15, [rbx+20h]
.text:0000000000005028                 mov     r14, [rbx+18h]
.text:000000000000502C                 mov     rbx, [rbx]
.text:000000000000502F                 mov     [rsp+58h+var_40], r10
.text:0000000000005034                 mov     [rsp+58h+var_48], r9
.text:0000000000005039                 mov     [rsp+58h+var_58], rax
.text:000000000000503D                 mov     [rsp+58h+var_50], r8
.text:0000000000005042
.text:0000000000005042 loc_5042:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005042                 xor     edi, edi        ; domainname
.text:0000000000005044                 call    _dcgettext
.text:0000000000005049                 mov     r10, [rsp+58h+var_40]
.text:000000000000504E                 push    r10
.text:0000000000005050                 jmp     loc_4F94
.text:0000000000005050 ; ---------------------------------------------------------------------------
.text:0000000000005055                 align 8
.text:0000000000005058
.text:0000000000005058 loc_5058:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005058                                         ; DATA XREF: .rodata:jpt_4F44↓o
.text:0000000000005058                 mov     rbx, [rbx]      ; jumptable 0000000000004F44 case 1
.text:000000000000505B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005062                 mov     edx, 5          ; category
.text:0000000000005067                 xor     edi, edi        ; domainname
.text:0000000000005069                 call    _dcgettext
.text:000000000000506E                 add     rsp, 28h
.text:0000000000005072                 mov     rcx, rbx
.text:0000000000005075                 mov     rdi, rbp
.text:0000000000005078                 pop     rbx
.text:0000000000005079                 pop     rbp
.text:000000000000507A                 pop     r12
.text:000000000000507C                 pop     r13
.text:000000000000507E                 pop     r14
.text:0000000000005080                 pop     r15
.text:0000000000005082                 mov     rdx, rax
.text:0000000000005085                 mov     esi, 1
.text:000000000000508A                 xor     eax, eax
.text:000000000000508C                 jmp     ___fprintf_chk
.text:000000000000508C ; ---------------------------------------------------------------------------
.text:0000000000005091                 align 8
.text:0000000000005098
.text:0000000000005098 loc_5098:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005098                                         ; DATA XREF: .rodata:jpt_4F44↓o
.text:0000000000005098                 mov     r12, [rbx+8]    ; jumptable 0000000000004F44 case 2
.text:000000000000509C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000050A3                 mov     rbx, [rbx]
.text:00000000000050A6                 mov     edx, 5          ; category
.text:00000000000050AB                 xor     edi, edi        ; domainname
.text:00000000000050AD                 call    _dcgettext
.text:00000000000050B2                 add     rsp, 28h
.text:00000000000050B6                 mov     r8, r12
.text:00000000000050B9                 mov     rcx, rbx
.text:00000000000050BC                 mov     rdi, rbp
.text:00000000000050BF                 mov     rdx, rax
.text:00000000000050C2                 mov     esi, 1
.text:00000000000050C7                 pop     rbx
.text:00000000000050C8                 pop     rbp
.text:00000000000050C9                 pop     r12
.text:00000000000050CB                 pop     r13
.text:00000000000050CD                 pop     r14
.text:00000000000050CF                 pop     r15
.text:00000000000050D1                 xor     eax, eax
.text:00000000000050D3                 jmp     ___fprintf_chk
.text:00000000000050D3 ; ---------------------------------------------------------------------------
.text:00000000000050D8                 align 20h
.text:00000000000050E0
.text:00000000000050E0 loc_50E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000050E0                                         ; DATA XREF: .rodata:jpt_4F44↓o
.text:00000000000050E0                 mov     r13, [rbx+10h]  ; jumptable 0000000000004F44 case 3
.text:00000000000050E4                 mov     r12, [rbx+8]
.text:00000000000050E8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000050EF                 mov     rbx, [rbx]
.text:00000000000050F2                 mov     edx, 5          ; category
.text:00000000000050F7                 xor     edi, edi        ; domainname
.text:00000000000050F9                 call    _dcgettext
.text:00000000000050FE                 add     rsp, 28h
.text:0000000000005102                 mov     r9, r13
.text:0000000000005105                 mov     r8, r12
.text:0000000000005108                 mov     rcx, rbx
.text:000000000000510B                 mov     rdi, rbp
.text:000000000000510E                 mov     rdx, rax
.text:0000000000005111                 pop     rbx
.text:0000000000005112                 pop     rbp
.text:0000000000005113                 pop     r12
.text:0000000000005115                 pop     r13
.text:0000000000005117                 pop     r14
.text:0000000000005119                 pop     r15
.text:000000000000511B                 mov     esi, 1
.text:0000000000005120                 xor     eax, eax
.text:0000000000005122                 jmp     ___fprintf_chk
.text:0000000000005122 ; ---------------------------------------------------------------------------
.text:0000000000005127                 align 10h
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005130                                         ; DATA XREF: .rodata:jpt_4F44↓o
.text:0000000000005130                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004F44 case 4
.text:0000000000005137                 mov     edx, 5          ; category
.text:000000000000513C                 xor     edi, edi        ; domainname
.text:000000000000513E                 mov     r14, [rbx+18h]
.text:0000000000005142                 mov     r13, [rbx+10h]
.text:0000000000005146                 mov     r12, [rbx+8]
.text:000000000000514A                 mov     rbx, [rbx]
.text:000000000000514D                 call    _dcgettext
.text:0000000000005152                 sub     rsp, 8
.text:0000000000005156
.text:0000000000005156 loc_5156:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005156                 push    r14
.text:0000000000005158                 mov     rdx, rax
.text:000000000000515B                 mov     r9, r13
.text:000000000000515E                 mov     r8, r12
.text:0000000000005161                 mov     rcx, rbx
.text:0000000000005164                 mov     rdi, rbp
.text:0000000000005167                 mov     esi, 1
.text:000000000000516C                 xor     eax, eax
.text:000000000000516E                 call    ___fprintf_chk
.text:0000000000005173                 pop     rax
.text:0000000000005174                 pop     rdx
.text:0000000000005175                 add     rsp, 28h
.text:0000000000005179                 pop     rbx
.text:000000000000517A                 pop     rbp
.text:000000000000517B                 pop     r12
.text:000000000000517D                 pop     r13
.text:000000000000517F                 pop     r14
.text:0000000000005181                 pop     r15
.text:0000000000005183                 retn
.text:0000000000005183 ; ---------------------------------------------------------------------------
.text:0000000000005184                 align 8
.text:0000000000005188
.text:0000000000005188 loc_5188:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005188                                         ; DATA XREF: .rodata:jpt_4F44↓o
.text:0000000000005188                 mov     r15, [rbx+20h]  ; jumptable 0000000000004F44 case 5
.text:000000000000518C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005193                 mov     edx, 5          ; category
.text:0000000000005198                 xor     edi, edi        ; domainname
.text:000000000000519A                 mov     r14, [rbx+18h]
.text:000000000000519E                 mov     r13, [rbx+10h]
.text:00000000000051A2                 mov     r12, [rbx+8]
.text:00000000000051A6                 mov     rbx, [rbx]
.text:00000000000051A9                 call    _dcgettext
.text:00000000000051AE                 push    r15
.text:00000000000051B0                 jmp     short loc_5156
.text:00000000000051B0 ; ---------------------------------------------------------------------------
.text:00000000000051B2                 align 8
.text:00000000000051B8
.text:00000000000051B8 loc_51B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000051B8                                         ; DATA XREF: .rodata:jpt_4F44↓o
.text:00000000000051B8                 mov     r8, [rbx+8]     ; jumptable 0000000000004F44 case 6
.text:00000000000051BC                 mov     r12, [rbx+28h]
.text:00000000000051C0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000051C7                 mov     r15, [rbx+20h]
.text:00000000000051CB                 mov     r14, [rbx+18h]
.text:00000000000051CF                 mov     edx, 5          ; category
.text:00000000000051D4                 mov     r13, [rbx+10h]
.text:00000000000051D8                 xor     edi, edi        ; domainname
.text:00000000000051DA                 mov     rbx, [rbx]
.text:00000000000051DD                 mov     [rsp+58h+var_58], r8
.text:00000000000051E1                 call    _dcgettext
.text:00000000000051E6                 sub     rsp, 8
.text:00000000000051EA                 mov     r9, r13
.text:00000000000051ED                 push    r12
.text:00000000000051EF                 push    r15
.text:00000000000051F1                 push    r14
.text:00000000000051F3
.text:00000000000051F3 loc_51F3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000051F3                 mov     r8, [rsp+78h+var_58]
.text:00000000000051F8                 mov     rcx, rbx
.text:00000000000051FB                 mov     rdx, rax
.text:00000000000051FE                 mov     rdi, rbp
.text:0000000000005201                 mov     esi, 1
.text:0000000000005206                 xor     eax, eax
.text:0000000000005208                 call    ___fprintf_chk
.text:000000000000520D                 add     rsp, 20h
.text:0000000000005211                 add     rsp, 28h
.text:0000000000005215                 pop     rbx
.text:0000000000005216                 pop     rbp
.text:0000000000005217                 pop     r12
.text:0000000000005219                 pop     r13
.text:000000000000521B                 pop     r14
.text:000000000000521D                 pop     r15
.text:000000000000521F                 retn
.text:0000000000005220 ; ---------------------------------------------------------------------------
.text:0000000000005220
.text:0000000000005220 loc_5220:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005220                                         ; DATA XREF: .rodata:jpt_4F44↓o
.text:0000000000005220                 mov     r9, [rbx+10h]   ; jumptable 0000000000004F44 case 7
.text:0000000000005224                 mov     r13, [rbx+30h]
.text:0000000000005228                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000522F                 mov     r12, [rbx+28h]
.text:0000000000005233                 mov     r15, [rbx+20h]
.text:0000000000005237                 mov     edx, 5          ; category
.text:000000000000523C                 mov     r14, [rbx+18h]
.text:0000000000005240                 mov     r8, [rbx+8]
.text:0000000000005244                 xor     edi, edi        ; domainname
.text:0000000000005246                 mov     [rsp+58h+var_50], r9
.text:000000000000524B                 mov     rbx, [rbx]
.text:000000000000524E                 mov     [rsp+58h+var_58], r8
.text:0000000000005252                 call    _dcgettext
.text:0000000000005257                 push    r13
.text:0000000000005259                 push    r12
.text:000000000000525B                 push    r15
.text:000000000000525D                 push    r14
.text:000000000000525F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005264                 jmp     short loc_51F3
.text:0000000000005264 ; ---------------------------------------------------------------------------
.text:0000000000005266                 align 10h
.text:0000000000005270
.text:0000000000005270 def_4F44:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005270                 mov     r10, [rbx+40h]  ; jumptable 0000000000004F44 default case
.text:0000000000005274                 mov     r9, [rbx+38h]
.text:0000000000005278                 mov     edx, 5
.text:000000000000527D                 mov     rax, [rbx+10h]
.text:0000000000005281                 mov     r8, [rbx+8]
.text:0000000000005285                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000528C                 mov     r13, [rbx+30h]
.text:0000000000005290                 mov     r12, [rbx+28h]
.text:0000000000005294                 mov     r15, [rbx+20h]
.text:0000000000005298                 mov     r14, [rbx+18h]
.text:000000000000529C                 mov     [rsp+58h+var_40], r10
.text:00000000000052A1                 mov     [rsp+58h+var_48], r9
.text:00000000000052A6                 mov     [rsp+58h+var_58], rax
.text:00000000000052AA                 mov     [rsp+58h+var_50], r8
.text:00000000000052AF                 mov     rbx, [rbx]
.text:00000000000052B2                 jmp     loc_5042
.text:00000000000052B2 ; } // starts at 4EA0
.text:00000000000052B2 version_etc_arn endp
.text:00000000000052B2
.text:00000000000052B2 ; ---------------------------------------------------------------------------
.text:00000000000052B7                 align 20h
.text:00000000000052C0
.text:00000000000052C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052C0
.text:00000000000052C0 ; Attributes: info_from_lumina
.text:00000000000052C0
.text:00000000000052C0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000052C0                 public version_etc_ar
.text:00000000000052C0 version_etc_ar  proc near
.text:00000000000052C0 ; __unwind {
.text:00000000000052C0                 xor     r9d, r9d
.text:00000000000052C3                 cmp     qword ptr [r8], 0
.text:00000000000052C7                 jz      short loc_52DB
.text:00000000000052C9                 nop     dword ptr [rax+00000000h]
.text:00000000000052D0
.text:00000000000052D0 loc_52D0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000052D0                 add     r9, 1
.text:00000000000052D4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000052D9                 jnz     short loc_52D0
.text:00000000000052DB
.text:00000000000052DB loc_52DB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000052DB                 jmp     version_etc_arn
.text:00000000000052DB ; } // starts at 52C0
.text:00000000000052DB version_etc_ar  endp
.text:00000000000052DB
.text:00000000000052E0
.text:00000000000052E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052E0
.text:00000000000052E0 ; Attributes: info_from_lumina
.text:00000000000052E0
.text:00000000000052E0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000052E0                 public version_etc_va
.text:00000000000052E0 version_etc_va  proc near
.text:00000000000052E0
.text:00000000000052E0 authtab         = qword ptr -68h
.text:00000000000052E0 var_10          = qword ptr -10h
.text:00000000000052E0
.text:00000000000052E0 ; __unwind {
.text:00000000000052E0                 sub     rsp, 68h
.text:00000000000052E4                 mov     r10, r8
.text:00000000000052E7                 xor     r9d, r9d
.text:00000000000052EA                 mov     rax, fs:28h
.text:00000000000052F3                 mov     [rsp+68h+var_10], rax
.text:00000000000052F8                 xor     eax, eax
.text:00000000000052FA                 mov     r8, rsp
.text:00000000000052FD                 nop     dword ptr [rax]
.text:0000000000005300
.text:0000000000005300 loc_5300:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005300                 mov     eax, [r10]
.text:0000000000005303                 cmp     eax, 2Fh ; '/'
.text:0000000000005306                 ja      short loc_534A
.text:0000000000005308                 mov     r11d, eax
.text:000000000000530B                 add     r11, [r10+10h]
.text:000000000000530F                 add     eax, 8
.text:0000000000005312                 mov     [r10], eax
.text:0000000000005315
.text:0000000000005315 loc_5315:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005315                 mov     rax, [r11]
.text:0000000000005318                 test    rax, rax
.text:000000000000531B                 mov     [r8+r9*8], rax
.text:000000000000531F                 jz      short loc_532B
.text:0000000000005321                 add     r9, 1
.text:0000000000005325                 cmp     r9, 0Ah
.text:0000000000005329                 jnz     short loc_5300
.text:000000000000532B
.text:000000000000532B loc_532B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000532B                 call    version_etc_arn
.text:0000000000005330                 mov     rax, [rsp+68h+var_10]
.text:0000000000005335                 xor     rax, fs:28h
.text:000000000000533E                 jnz     short loc_5345
.text:0000000000005340                 add     rsp, 68h
.text:0000000000005344                 retn
.text:0000000000005345 ; ---------------------------------------------------------------------------
.text:0000000000005345
.text:0000000000005345 loc_5345:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005345                 call    ___stack_chk_fail
.text:000000000000534A ; ---------------------------------------------------------------------------
.text:000000000000534A
.text:000000000000534A loc_534A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000534A                 mov     r11, [r10+8]
.text:000000000000534E                 lea     rax, [r11+8]
.text:0000000000005352                 mov     [r10+8], rax
.text:0000000000005356                 jmp     short loc_5315
.text:0000000000005356 ; } // starts at 52E0
.text:0000000000005356 version_etc_va  endp
.text:0000000000005356
.text:0000000000005356 ; ---------------------------------------------------------------------------
.text:0000000000005358                 align 20h
.text:0000000000005360
.text:0000000000005360 ; =============== S U B R O U T I N E =======================================
.text:0000000000005360
.text:0000000000005360 ; Attributes: info_from_lumina
.text:0000000000005360
.text:0000000000005360 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005360                 public version_etc
.text:0000000000005360 version_etc     proc near               ; CODE XREF: main+151↑p
.text:0000000000005360
.text:0000000000005360 var_C0          = dword ptr -0C0h
.text:0000000000005360 var_B8          = qword ptr -0B8h
.text:0000000000005360 var_B0          = qword ptr -0B0h
.text:0000000000005360 var_A8          = byte ptr -0A8h
.text:0000000000005360 var_50          = qword ptr -50h
.text:0000000000005360 var_48          = byte ptr -48h
.text:0000000000005360 var_28          = qword ptr -28h
.text:0000000000005360 var_20          = qword ptr -20h
.text:0000000000005360 arg_0           = byte ptr  8
.text:0000000000005360
.text:0000000000005360 ; __unwind {
.text:0000000000005360                 push    rbp
.text:0000000000005361                 push    rbx
.text:0000000000005362                 mov     r10d, 20h ; ' '
.text:0000000000005368                 xor     r11d, r11d
.text:000000000000536B                 sub     rsp, 0B8h
.text:0000000000005372                 mov     rax, fs:28h
.text:000000000000537B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005380                 xor     eax, eax
.text:0000000000005382                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000538A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005392                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000539A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000539F                 mov     [rsp+0C8h+var_20], r9
.text:00000000000053A7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000053AF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000053B4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000053BC                 xor     r9d, r9d
.text:00000000000053BF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000053C4                 mov     rbp, rax
.text:00000000000053C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000053D0
.text:00000000000053D0 loc_53D0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000053D0                 cmp     r10d, 2Fh ; '/'
.text:00000000000053D4                 ja      short loc_542C
.text:00000000000053D6                 mov     eax, r10d
.text:00000000000053D9                 mov     r11d, 1
.text:00000000000053DF                 add     r10d, 8
.text:00000000000053E3                 add     rax, rbp
.text:00000000000053E6
.text:00000000000053E6 loc_53E6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000053E6                 mov     rax, [rax]
.text:00000000000053E9                 test    rax, rax
.text:00000000000053EC                 mov     [r8+r9*8], rax
.text:00000000000053F0                 jz      short loc_53FC
.text:00000000000053F2                 add     r9, 1
.text:00000000000053F6                 cmp     r9, 0Ah
.text:00000000000053FA                 jnz     short loc_53D0
.text:00000000000053FC
.text:00000000000053FC loc_53FC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000053FC                 test    r11b, r11b
.text:00000000000053FF                 jnz     short loc_5425
.text:0000000000005401
.text:0000000000005401 loc_5401:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005401                 call    version_etc_arn
.text:0000000000005406                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000540B                 xor     rax, fs:28h
.text:0000000000005414                 jnz     short loc_5420
.text:0000000000005416                 add     rsp, 0B8h
.text:000000000000541D                 pop     rbx
.text:000000000000541E                 pop     rbp
.text:000000000000541F                 retn
.text:0000000000005420 ; ---------------------------------------------------------------------------
.text:0000000000005420
.text:0000000000005420 loc_5420:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005420                 call    ___stack_chk_fail
.text:0000000000005425 ; ---------------------------------------------------------------------------
.text:0000000000005425
.text:0000000000005425 loc_5425:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005425                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000542A                 jmp     short loc_5401
.text:000000000000542C ; ---------------------------------------------------------------------------
.text:000000000000542C
.text:000000000000542C loc_542C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000542C                 mov     rax, rbx
.text:000000000000542F                 add     rbx, 8
.text:0000000000005433                 jmp     short loc_53E6
.text:0000000000005433 ; } // starts at 5360
.text:0000000000005433 version_etc     endp
.text:0000000000005433
.text:0000000000005433 ; ---------------------------------------------------------------------------
.text:0000000000005435                 align 20h
.text:0000000000005440
.text:0000000000005440 ; =============== S U B R O U T I N E =======================================
.text:0000000000005440
.text:0000000000005440 ; Attributes: info_from_lumina
.text:0000000000005440
.text:0000000000005440 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005440                 public emit_bug_reporting_address
.text:0000000000005440 emit_bug_reporting_address proc near
.text:0000000000005440 ; __unwind {
.text:0000000000005440                 push    rbx
.text:0000000000005441                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005448                 mov     edx, 5          ; category
.text:000000000000544D                 xor     edi, edi        ; domainname
.text:000000000000544F                 call    _dcgettext
.text:0000000000005454                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000545B                 mov     rsi, rax
.text:000000000000545E                 mov     edi, 1
.text:0000000000005463                 xor     eax, eax
.text:0000000000005465                 call    ___printf_chk
.text:000000000000546A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005471                 mov     edx, 5          ; category
.text:0000000000005476                 xor     edi, edi        ; domainname
.text:0000000000005478                 call    _dcgettext
.text:000000000000547D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005484                 lea     rdx, unk_5D8E
.text:000000000000548B                 mov     rsi, rax
.text:000000000000548E                 mov     edi, 1
.text:0000000000005493                 xor     eax, eax
.text:0000000000005495                 call    ___printf_chk
.text:000000000000549A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000054A1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000054A8                 xor     edi, edi        ; domainname
.text:00000000000054AA                 mov     edx, 5          ; category
.text:00000000000054AF                 call    _dcgettext
.text:00000000000054B4                 mov     rsi, rbx        ; stream
.text:00000000000054B7                 mov     rdi, rax        ; s
.text:00000000000054BA                 pop     rbx
.text:00000000000054BB                 jmp     _fputs_unlocked
.text:00000000000054BB ; } // starts at 5440
.text:00000000000054BB emit_bug_reporting_address endp
.text:00000000000054BB
.text:00000000000054C0
.text:00000000000054C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054C0
.text:00000000000054C0
.text:00000000000054C0                 public xmalloc
.text:00000000000054C0 xmalloc         proc near               ; CODE XREF: create_fullname+7E↑p
.text:00000000000054C0                                         ; print_long_entry+20C↑p ...
.text:00000000000054C0 ; __unwind {
.text:00000000000054C0                 push    rbx
.text:00000000000054C1                 mov     rbx, rdi
.text:00000000000054C4                 call    _malloc
.text:00000000000054C9                 test    rax, rax
.text:00000000000054CC                 jnz     short loc_54D3
.text:00000000000054CE                 test    rbx, rbx
.text:00000000000054D1                 jnz     short loc_54D5
.text:00000000000054D3
.text:00000000000054D3 loc_54D3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000054D3                 pop     rbx
.text:00000000000054D4                 retn
.text:00000000000054D5 ; ---------------------------------------------------------------------------
.text:00000000000054D5
.text:00000000000054D5 loc_54D5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000054D5                 call    xalloc_die
.text:00000000000054D5 ; } // starts at 54C0
.text:00000000000054D5 xmalloc         endp
.text:00000000000054D5
.text:00000000000054D5 ; ---------------------------------------------------------------------------
.text:00000000000054DA                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0 ; Attributes: info_from_lumina
.text:00000000000054E0
.text:00000000000054E0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000054E0                 public xnmalloc
.text:00000000000054E0 xnmalloc        proc near
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 mov     rax, rdi
.text:00000000000054E3                 mul     rsi
.text:00000000000054E6                 mov     rdi, rax
.text:00000000000054E9                 seto    al
.text:00000000000054EC                 test    rdi, rdi
.text:00000000000054EF                 js      short loc_54FB
.text:00000000000054F1                 movzx   eax, al
.text:00000000000054F4                 test    rax, rax
.text:00000000000054F7                 jnz     short loc_54FB
.text:00000000000054F9                 jmp     short xmalloc
.text:00000000000054FB ; ---------------------------------------------------------------------------
.text:00000000000054FB
.text:00000000000054FB loc_54FB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000054FB                                         ; xnmalloc+17↑j
.text:00000000000054FB                 sub     rsp, 8
.text:00000000000054FF                 call    xalloc_die
.text:00000000000054FF ; } // starts at 54E0
.text:00000000000054FF xnmalloc        endp
.text:00000000000054FF
.text:00000000000054FF ; ---------------------------------------------------------------------------
.text:0000000000005504                 align 10h
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510
.text:0000000000005510                 public xcharalloc
.text:0000000000005510 xcharalloc      proc near
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 jmp     short xmalloc
.text:0000000000005510 ; } // starts at 5510
.text:0000000000005510 xcharalloc      endp
.text:0000000000005510
.text:0000000000005510 ; ---------------------------------------------------------------------------
.text:0000000000005512                 align 20h
.text:0000000000005520
.text:0000000000005520 ; =============== S U B R O U T I N E =======================================
.text:0000000000005520
.text:0000000000005520 ; Attributes: info_from_lumina
.text:0000000000005520
.text:0000000000005520 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005520                 public xrealloc
.text:0000000000005520 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005520                                         ; quotearg_n_options+182↑p ...
.text:0000000000005520 ; __unwind {
.text:0000000000005520                 test    rsi, rsi
.text:0000000000005523                 push    rbx
.text:0000000000005524                 mov     rbx, rsi
.text:0000000000005527                 jnz     short loc_552E
.text:0000000000005529                 test    rdi, rdi
.text:000000000000552C                 jnz     short loc_5548
.text:000000000000552E
.text:000000000000552E loc_552E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000552E                 mov     rsi, rbx        ; size
.text:0000000000005531                 call    _realloc
.text:0000000000005536                 test    rax, rax
.text:0000000000005539                 jnz     short loc_5540
.text:000000000000553B                 test    rbx, rbx
.text:000000000000553E                 jnz     short loc_5551
.text:0000000000005540
.text:0000000000005540 loc_5540:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005540                 pop     rbx
.text:0000000000005541                 retn
.text:0000000000005541 ; ---------------------------------------------------------------------------
.text:0000000000005542                 align 8
.text:0000000000005548
.text:0000000000005548 loc_5548:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005548                 call    _free
.text:000000000000554D                 xor     eax, eax
.text:000000000000554F                 pop     rbx
.text:0000000000005550                 retn
.text:0000000000005551 ; ---------------------------------------------------------------------------
.text:0000000000005551
.text:0000000000005551 loc_5551:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005551                 call    xalloc_die
.text:0000000000005551 ; } // starts at 5520
.text:0000000000005551 xrealloc        endp
.text:0000000000005551
.text:0000000000005551 ; ---------------------------------------------------------------------------
.text:0000000000005556                 align 20h
.text:0000000000005560
.text:0000000000005560 ; =============== S U B R O U T I N E =======================================
.text:0000000000005560
.text:0000000000005560 ; Attributes: info_from_lumina
.text:0000000000005560
.text:0000000000005560 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005560                 public xnrealloc
.text:0000000000005560 xnrealloc       proc near
.text:0000000000005560 ; __unwind {
.text:0000000000005560                 mov     rax, rsi
.text:0000000000005563                 mul     rdx
.text:0000000000005566                 mov     rsi, rax
.text:0000000000005569                 seto    al
.text:000000000000556C                 test    rsi, rsi
.text:000000000000556F                 js      short loc_557B
.text:0000000000005571                 movzx   eax, al
.text:0000000000005574                 test    rax, rax
.text:0000000000005577                 jnz     short loc_557B
.text:0000000000005579                 jmp     short xrealloc
.text:000000000000557B ; ---------------------------------------------------------------------------
.text:000000000000557B
.text:000000000000557B loc_557B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000557B                                         ; xnrealloc+17↑j
.text:000000000000557B                 sub     rsp, 8
.text:000000000000557F                 call    xalloc_die
.text:000000000000557F ; } // starts at 5560
.text:000000000000557F xnrealloc       endp
.text:000000000000557F
.text:000000000000557F ; ---------------------------------------------------------------------------
.text:0000000000005584                 align 10h
.text:0000000000005590
.text:0000000000005590 ; =============== S U B R O U T I N E =======================================
.text:0000000000005590
.text:0000000000005590 ; Attributes: info_from_lumina
.text:0000000000005590
.text:0000000000005590 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005590                 public x2nrealloc
.text:0000000000005590 x2nrealloc      proc near
.text:0000000000005590 ; __unwind {
.text:0000000000005590                 test    rdi, rdi
.text:0000000000005593                 mov     r9, rdx
.text:0000000000005596                 mov     rcx, [rsi]
.text:0000000000005599                 jz      short loc_55D0
.text:000000000000559B                 xor     edx, edx
.text:000000000000559D                 mov     rax, 5555555555555554h
.text:00000000000055A7                 div     r9
.text:00000000000055AA                 cmp     rax, rcx
.text:00000000000055AD                 jbe     short loc_55EB
.text:00000000000055AF                 mov     rax, rcx
.text:00000000000055B2                 shr     rax, 1
.text:00000000000055B5                 lea     rcx, [rax+rcx+1]
.text:00000000000055BA
.text:00000000000055BA loc_55BA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000055BA                 mov     [rsi], rcx
.text:00000000000055BD                 imul    rcx, r9
.text:00000000000055C1                 mov     rsi, rcx
.text:00000000000055C4                 jmp     xrealloc
.text:00000000000055C4 ; ---------------------------------------------------------------------------
.text:00000000000055C9                 align 10h
.text:00000000000055D0
.text:00000000000055D0 loc_55D0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000055D0                 test    rcx, rcx
.text:00000000000055D3                 jz      short loc_55F8
.text:00000000000055D5
.text:00000000000055D5 loc_55D5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000055D5                 mov     rax, rcx
.text:00000000000055D8                 mul     r9
.text:00000000000055DB                 seto    dl
.text:00000000000055DE                 test    rax, rax
.text:00000000000055E1                 movzx   edx, dl
.text:00000000000055E4                 js      short loc_55EB
.text:00000000000055E6                 test    rdx, rdx
.text:00000000000055E9                 jz      short loc_55BA
.text:00000000000055EB
.text:00000000000055EB loc_55EB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000055EB                                         ; x2nrealloc+54↑j
.text:00000000000055EB                 sub     rsp, 8
.text:00000000000055EF                 call    xalloc_die
.text:00000000000055EF ; ---------------------------------------------------------------------------
.text:00000000000055F4                 align 8
.text:00000000000055F8
.text:00000000000055F8 loc_55F8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000055F8                 xor     edx, edx
.text:00000000000055FA                 mov     eax, 80h
.text:00000000000055FF                 xor     r8d, r8d
.text:0000000000005602                 div     r9
.text:0000000000005605                 test    rax, rax
.text:0000000000005608                 setz    r8b
.text:000000000000560C                 lea     rcx, [r8+rax]
.text:0000000000005610                 jmp     short loc_55D5
.text:0000000000005610 ; } // starts at 5590
.text:0000000000005610 x2nrealloc      endp
.text:0000000000005610
.text:0000000000005610 ; ---------------------------------------------------------------------------
.text:0000000000005612                 align 20h
.text:0000000000005620
.text:0000000000005620 ; =============== S U B R O U T I N E =======================================
.text:0000000000005620
.text:0000000000005620 ; Attributes: info_from_lumina
.text:0000000000005620
.text:0000000000005620 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005620                 public x2realloc
.text:0000000000005620 x2realloc       proc near
.text:0000000000005620 ; __unwind {
.text:0000000000005620                 test    rdi, rdi
.text:0000000000005623                 mov     rax, [rsi]
.text:0000000000005626                 jz      short loc_5650
.text:0000000000005628                 mov     rdx, 5555555555555553h
.text:0000000000005632                 cmp     rax, rdx
.text:0000000000005635                 ja      short loc_5661
.text:0000000000005637                 mov     rdx, rax
.text:000000000000563A                 shr     rdx, 1
.text:000000000000563D                 lea     rax, [rdx+rax+1]
.text:0000000000005642
.text:0000000000005642 loc_5642:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005642                 mov     [rsi], rax
.text:0000000000005645                 mov     rsi, rax
.text:0000000000005648                 jmp     xrealloc
.text:0000000000005648 ; ---------------------------------------------------------------------------
.text:000000000000564D                 align 10h
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005650                 test    rax, rax
.text:0000000000005653                 mov     edx, 80h
.text:0000000000005658                 cmovz   rax, rdx
.text:000000000000565C                 test    rax, rax
.text:000000000000565F                 jns     short loc_5642
.text:0000000000005661
.text:0000000000005661 loc_5661:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005661                 sub     rsp, 8
.text:0000000000005665                 call    xalloc_die
.text:0000000000005665 ; } // starts at 5620
.text:0000000000005665 x2realloc       endp
.text:0000000000005665
.text:0000000000005665 ; ---------------------------------------------------------------------------
.text:000000000000566A                 align 10h
.text:0000000000005670
.text:0000000000005670 ; =============== S U B R O U T I N E =======================================
.text:0000000000005670
.text:0000000000005670
.text:0000000000005670 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005670                 public xzalloc
.text:0000000000005670 xzalloc         proc near
.text:0000000000005670 ; __unwind {
.text:0000000000005670                 push    rbx
.text:0000000000005671                 mov     rbx, rdi
.text:0000000000005674                 call    xmalloc
.text:0000000000005679                 mov     rdx, rbx        ; n
.text:000000000000567C                 xor     esi, esi        ; c
.text:000000000000567E                 mov     rdi, rax        ; s
.text:0000000000005681                 pop     rbx
.text:0000000000005682                 jmp     _memset
.text:0000000000005682 ; } // starts at 5670
.text:0000000000005682 xzalloc         endp
.text:0000000000005682
.text:0000000000005682 ; ---------------------------------------------------------------------------
.text:0000000000005687                 align 10h
.text:0000000000005690
.text:0000000000005690 ; =============== S U B R O U T I N E =======================================
.text:0000000000005690
.text:0000000000005690 ; Attributes: info_from_lumina
.text:0000000000005690
.text:0000000000005690 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005690                 public xcalloc
.text:0000000000005690 xcalloc         proc near
.text:0000000000005690 ; __unwind {
.text:0000000000005690                 mov     rax, rdi
.text:0000000000005693                 sub     rsp, 8
.text:0000000000005697                 mul     rsi
.text:000000000000569A                 seto    dl
.text:000000000000569D                 test    rax, rax
.text:00000000000056A0                 js      short loc_56B9
.text:00000000000056A2                 movzx   edx, dl
.text:00000000000056A5                 test    rdx, rdx
.text:00000000000056A8                 jnz     short loc_56B9
.text:00000000000056AA                 call    _calloc
.text:00000000000056AF                 test    rax, rax
.text:00000000000056B2                 jz      short loc_56B9
.text:00000000000056B4                 add     rsp, 8
.text:00000000000056B8                 retn
.text:00000000000056B9 ; ---------------------------------------------------------------------------
.text:00000000000056B9
.text:00000000000056B9 loc_56B9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000056B9                                         ; xcalloc+18↑j ...
.text:00000000000056B9                 call    xalloc_die
.text:00000000000056B9 ; } // starts at 5690
.text:00000000000056B9 xcalloc         endp
.text:00000000000056B9
.text:00000000000056B9 ; ---------------------------------------------------------------------------
.text:00000000000056BE                 align 20h
.text:00000000000056C0
.text:00000000000056C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056C0
.text:00000000000056C0 ; Attributes: info_from_lumina
.text:00000000000056C0
.text:00000000000056C0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000056C0                 public xmemdup
.text:00000000000056C0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000056C0                                         ; xstrdup+11↓j
.text:00000000000056C0 ; __unwind {
.text:00000000000056C0                 push    rbp
.text:00000000000056C1                 push    rbx
.text:00000000000056C2                 mov     rbp, rdi
.text:00000000000056C5                 mov     rdi, rsi
.text:00000000000056C8                 mov     rbx, rsi
.text:00000000000056CB                 sub     rsp, 8
.text:00000000000056CF                 call    xmalloc
.text:00000000000056D4                 add     rsp, 8
.text:00000000000056D8                 mov     rdx, rbx        ; n
.text:00000000000056DB                 mov     rsi, rbp        ; src
.text:00000000000056DE                 pop     rbx
.text:00000000000056DF                 pop     rbp
.text:00000000000056E0                 mov     rdi, rax        ; dest
.text:00000000000056E3                 jmp     _memcpy
.text:00000000000056E3 ; } // starts at 56C0
.text:00000000000056E3 xmemdup         endp
.text:00000000000056E3
.text:00000000000056E3 ; ---------------------------------------------------------------------------
.text:00000000000056E8                 align 10h
.text:00000000000056F0
.text:00000000000056F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056F0
.text:00000000000056F0
.text:00000000000056F0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000056F0                 public xstrdup
.text:00000000000056F0 xstrdup         proc near
.text:00000000000056F0 ; __unwind {
.text:00000000000056F0                 push    rbx
.text:00000000000056F1                 mov     rbx, rdi
.text:00000000000056F4                 call    _strlen
.text:00000000000056F9                 mov     rdi, rbx        ; src
.text:00000000000056FC                 lea     rsi, [rax+1]    ; n
.text:0000000000005700                 pop     rbx
.text:0000000000005701                 jmp     short xmemdup
.text:0000000000005701 ; } // starts at 56F0
.text:0000000000005701 xstrdup         endp
.text:0000000000005701
.text:0000000000005701 ; ---------------------------------------------------------------------------
.text:0000000000005703                 align 10h
.text:0000000000005710
.text:0000000000005710 ; =============== S U B R O U T I N E =======================================
.text:0000000000005710
.text:0000000000005710 ; Attributes: noreturn info_from_lumina
.text:0000000000005710
.text:0000000000005710 ; void __cdecl xalloc_die()
.text:0000000000005710                 public xalloc_die
.text:0000000000005710 xalloc_die      proc near               ; CODE XREF: create_fullname:loc_21F9↑p
.text:0000000000005710                                         ; quotearg_n_options:loc_46E6↑p ...
.text:0000000000005710 ; __unwind {
.text:0000000000005710                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005717                 sub     rsp, 8
.text:000000000000571B                 mov     edx, 5          ; category
.text:0000000000005720                 xor     edi, edi        ; domainname
.text:0000000000005722                 call    _dcgettext
.text:0000000000005727                 mov     edi, cs:exit_failure ; status
.text:000000000000572D                 lea     rdx, format+4   ; format
.text:0000000000005734                 mov     rcx, rax
.text:0000000000005737                 xor     esi, esi        ; errnum
.text:0000000000005739                 xor     eax, eax
.text:000000000000573B                 call    _error
.text:0000000000005740                 call    _abort
.text:0000000000005740 ; } // starts at 5710
.text:0000000000005740 xalloc_die      endp
.text:0000000000005740
.text:0000000000005740 ; ---------------------------------------------------------------------------
.text:0000000000005745                 align 10h
.text:0000000000005750
.text:0000000000005750 ; =============== S U B R O U T I N E =======================================
.text:0000000000005750
.text:0000000000005750 ; Attributes: info_from_lumina
.text:0000000000005750
.text:0000000000005750 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005750                 public rpl_fclose
.text:0000000000005750 rpl_fclose      proc near               ; CODE XREF: print_long_entry+2AC↑p
.text:0000000000005750                                         ; print_long_entry+374↑p ...
.text:0000000000005750 ; __unwind {
.text:0000000000005750                 push    r12
.text:0000000000005752                 push    rbp
.text:0000000000005753                 push    rbx
.text:0000000000005754                 mov     rbx, rdi
.text:0000000000005757                 call    _fileno
.text:000000000000575C                 test    eax, eax
.text:000000000000575E                 mov     rdi, rbx        ; fp
.text:0000000000005761                 js      short loc_57B7
.text:0000000000005763                 call    ___freading
.text:0000000000005768                 test    eax, eax
.text:000000000000576A                 jnz     short loc_5798
.text:000000000000576C
.text:000000000000576C loc_576C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000576C                 mov     rdi, rbx        ; stream
.text:000000000000576F                 call    rpl_fflush
.text:0000000000005774                 test    eax, eax
.text:0000000000005776                 jz      short loc_57B4
.text:0000000000005778                 call    ___errno_location
.text:000000000000577D                 mov     r12d, [rax]
.text:0000000000005780                 mov     rdi, rbx        ; stream
.text:0000000000005783                 mov     rbp, rax
.text:0000000000005786                 call    _fclose
.text:000000000000578B                 test    r12d, r12d
.text:000000000000578E                 jnz     short loc_57C0
.text:0000000000005790
.text:0000000000005790 loc_5790:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005790                 pop     rbx
.text:0000000000005791                 pop     rbp
.text:0000000000005792                 pop     r12
.text:0000000000005794                 retn
.text:0000000000005794 ; ---------------------------------------------------------------------------
.text:0000000000005795                 align 8
.text:0000000000005798
.text:0000000000005798 loc_5798:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005798                 mov     rdi, rbx        ; stream
.text:000000000000579B                 call    _fileno
.text:00000000000057A0                 xor     esi, esi        ; offset
.text:00000000000057A2                 mov     edx, 1          ; whence
.text:00000000000057A7                 mov     edi, eax        ; fd
.text:00000000000057A9                 call    _lseek
.text:00000000000057AE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000057B2                 jnz     short loc_576C
.text:00000000000057B4
.text:00000000000057B4 loc_57B4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000057B4                 mov     rdi, rbx        ; stream
.text:00000000000057B7
.text:00000000000057B7 loc_57B7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000057B7                 pop     rbx
.text:00000000000057B8                 pop     rbp
.text:00000000000057B9                 pop     r12
.text:00000000000057BB                 jmp     _fclose
.text:00000000000057C0 ; ---------------------------------------------------------------------------
.text:00000000000057C0
.text:00000000000057C0 loc_57C0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000057C0                 mov     [rbp+0], r12d
.text:00000000000057C4                 mov     eax, 0FFFFFFFFh
.text:00000000000057C9                 jmp     short loc_5790
.text:00000000000057C9 ; } // starts at 5750
.text:00000000000057C9 rpl_fclose      endp
.text:00000000000057C9
.text:00000000000057C9 ; ---------------------------------------------------------------------------
.text:00000000000057CB                 align 10h
.text:00000000000057D0
.text:00000000000057D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057D0
.text:00000000000057D0 ; Attributes: info_from_lumina
.text:00000000000057D0
.text:00000000000057D0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000057D0                 public rpl_fflush
.text:00000000000057D0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000057D0 ; __unwind {
.text:00000000000057D0                 test    rdi, rdi
.text:00000000000057D3                 push    rbx
.text:00000000000057D4                 mov     rbx, rdi
.text:00000000000057D7                 jz      short loc_57EA
.text:00000000000057D9                 call    ___freading
.text:00000000000057DE                 test    eax, eax
.text:00000000000057E0                 jz      short loc_57EA
.text:00000000000057E2                 test    dword ptr [rbx], 100h
.text:00000000000057E8                 jnz     short loc_57F8
.text:00000000000057EA
.text:00000000000057EA loc_57EA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000057EA                                         ; rpl_fflush+10↑j
.text:00000000000057EA                 mov     rdi, rbx        ; stream
.text:00000000000057ED                 pop     rbx
.text:00000000000057EE                 jmp     _fflush
.text:00000000000057EE ; ---------------------------------------------------------------------------
.text:00000000000057F3                 align 8
.text:00000000000057F8
.text:00000000000057F8 loc_57F8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000057F8                 mov     rdi, rbx
.text:00000000000057FB                 mov     edx, 1
.text:0000000000005800                 xor     esi, esi
.text:0000000000005802                 call    rpl_fseeko
.text:0000000000005807                 mov     rdi, rbx        ; stream
.text:000000000000580A                 pop     rbx
.text:000000000000580B                 jmp     _fflush
.text:000000000000580B ; } // starts at 57D0
.text:000000000000580B rpl_fflush      endp
.text:000000000000580B
.text:0000000000005810
.text:0000000000005810 ; =============== S U B R O U T I N E =======================================
.text:0000000000005810
.text:0000000000005810 ; Attributes: info_from_lumina
.text:0000000000005810
.text:0000000000005810 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005810                 public rpl_fseeko
.text:0000000000005810 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005810 ; __unwind {
.text:0000000000005810                 mov     rax, [rdi+8]
.text:0000000000005814                 cmp     [rdi+10h], rax
.text:0000000000005818                 jz      short loc_5820
.text:000000000000581A
.text:000000000000581A loc_581A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000581A                                         ; rpl_fseeko+1F↓j
.text:000000000000581A                 jmp     _fseeko
.text:000000000000581A ; ---------------------------------------------------------------------------
.text:000000000000581F                 align 20h
.text:0000000000005820
.text:0000000000005820 loc_5820:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005820                 mov     rax, [rdi+20h]
.text:0000000000005824                 cmp     [rdi+28h], rax
.text:0000000000005828                 jnz     short loc_581A
.text:000000000000582A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000582F                 jnz     short loc_581A
.text:0000000000005831                 push    r12
.text:0000000000005833                 push    rbp
.text:0000000000005834                 mov     r12d, edx
.text:0000000000005837                 push    rbx
.text:0000000000005838                 mov     rbp, rsi
.text:000000000000583B                 mov     rbx, rdi
.text:000000000000583E                 call    _fileno
.text:0000000000005843                 mov     edx, r12d       ; whence
.text:0000000000005846                 mov     rsi, rbp        ; offset
.text:0000000000005849                 mov     edi, eax        ; fd
.text:000000000000584B                 call    _lseek
.text:0000000000005850                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005854                 jz      short loc_5862
.text:0000000000005856                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005859                 mov     [rbx+90h], rax
.text:0000000000005860                 xor     eax, eax
.text:0000000000005862
.text:0000000000005862 loc_5862:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005862                 pop     rbx
.text:0000000000005863                 pop     rbp
.text:0000000000005864                 pop     r12
.text:0000000000005866                 retn
.text:0000000000005866 ; } // starts at 5810
.text:0000000000005866 rpl_fseeko      endp
.text:0000000000005866
.text:0000000000005866 ; ---------------------------------------------------------------------------
.text:0000000000005867                 align 10h
.text:0000000000005870
.text:0000000000005870 ; =============== S U B R O U T I N E =======================================
.text:0000000000005870
.text:0000000000005870 ; Attributes: info_from_lumina
.text:0000000000005870
.text:0000000000005870 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005870                 public rpl_mbrtowc
.text:0000000000005870 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005870
.text:0000000000005870 pwc             = dword ptr -34h
.text:0000000000005870 var_30          = qword ptr -30h
.text:0000000000005870
.text:0000000000005870 ; __unwind {
.text:0000000000005870                 push    r13
.text:0000000000005872                 push    r12
.text:0000000000005874                 mov     r13, rsi
.text:0000000000005877                 push    rbp
.text:0000000000005878                 push    rbx
.text:0000000000005879                 mov     rbx, rdi
.text:000000000000587C                 mov     r12, rdx
.text:000000000000587F                 sub     rsp, 18h
.text:0000000000005883                 mov     rax, fs:28h
.text:000000000000588C                 mov     [rsp+38h+var_30], rax
.text:0000000000005891                 xor     eax, eax
.text:0000000000005893                 lea     rax, [rsp+38h+pwc]
.text:0000000000005898                 test    rdi, rdi
.text:000000000000589B                 cmovz   rbx, rax
.text:000000000000589F                 mov     rdi, rbx        ; pwc
.text:00000000000058A2                 call    _mbrtowc
.text:00000000000058A7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000058AB                 mov     rbp, rax
.text:00000000000058AE                 jbe     short loc_58D0
.text:00000000000058B0                 test    r12, r12
.text:00000000000058B3                 jz      short loc_58D0
.text:00000000000058B5                 xor     edi, edi
.text:00000000000058B7                 call    hard_locale
.text:00000000000058BC                 test    al, al
.text:00000000000058BE                 jnz     short loc_58D0
.text:00000000000058C0                 movzx   eax, byte ptr [r13+0]
.text:00000000000058C5                 mov     ebp, 1
.text:00000000000058CA                 mov     [rbx], eax
.text:00000000000058CC                 nop     dword ptr [rax+00h]
.text:00000000000058D0
.text:00000000000058D0 loc_58D0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000058D0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000058D0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000058D5                 xor     rdx, fs:28h
.text:00000000000058DE                 mov     rax, rbp
.text:00000000000058E1                 jnz     short loc_58EE
.text:00000000000058E3                 add     rsp, 18h
.text:00000000000058E7                 pop     rbx
.text:00000000000058E8                 pop     rbp
.text:00000000000058E9                 pop     r12
.text:00000000000058EB                 pop     r13
.text:00000000000058ED                 retn
.text:00000000000058EE ; ---------------------------------------------------------------------------
.text:00000000000058EE
.text:00000000000058EE loc_58EE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000058EE                 call    ___stack_chk_fail
.text:00000000000058EE ; } // starts at 5870
.text:00000000000058EE rpl_mbrtowc     endp
.text:00000000000058EE
.text:00000000000058EE ; ---------------------------------------------------------------------------
.text:00000000000058F3                 align 20h
.text:0000000000005900
.text:0000000000005900 ; =============== S U B R O U T I N E =======================================
.text:0000000000005900
.text:0000000000005900
.text:0000000000005900                 public extract_trimmed_name
.text:0000000000005900 extract_trimmed_name proc near
.text:0000000000005900 ; __unwind {
.text:0000000000005900                 push    rbp
.text:0000000000005901                 push    rbx
.text:0000000000005902                 mov     rbp, rdi
.text:0000000000005905                 mov     edi, 21h ; '!'
.text:000000000000590A                 sub     rsp, 8
.text:000000000000590E                 call    xmalloc
.text:0000000000005913                 lea     rsi, [rbp+2Ch]  ; src
.text:0000000000005917                 mov     rbx, rax
.text:000000000000591A                 mov     edx, 20h ; ' '  ; n
.text:000000000000591F                 mov     rdi, rax        ; dest
.text:0000000000005922                 call    _strncpy
.text:0000000000005927                 mov     rdi, rbx        ; s
.text:000000000000592A                 mov     byte ptr [rbx+20h], 0
.text:000000000000592E                 call    _strlen
.text:0000000000005933                 add     rax, rbx
.text:0000000000005936                 cmp     rbx, rax
.text:0000000000005939                 jnb     short loc_5941
.text:000000000000593B
.text:000000000000593B loc_593B:                               ; CODE XREF: extract_trimmed_name+5A↓j
.text:000000000000593B                 cmp     byte ptr [rax-1], 20h ; ' '
.text:000000000000593F                 jz      short loc_5950
.text:0000000000005941
.text:0000000000005941 loc_5941:                               ; CODE XREF: extract_trimmed_name+39↑j
.text:0000000000005941                                         ; extract_trimmed_name+5C↓j
.text:0000000000005941                 add     rsp, 8
.text:0000000000005945                 mov     rax, rbx
.text:0000000000005948                 pop     rbx
.text:0000000000005949                 pop     rbp
.text:000000000000594A                 retn
.text:000000000000594A ; ---------------------------------------------------------------------------
.text:000000000000594B                 align 10h
.text:0000000000005950
.text:0000000000005950 loc_5950:                               ; CODE XREF: extract_trimmed_name+3F↑j
.text:0000000000005950                 sub     rax, 1
.text:0000000000005954                 mov     byte ptr [rax], 0
.text:0000000000005957                 cmp     rbx, rax
.text:000000000000595A                 jnz     short loc_593B
.text:000000000000595C                 jmp     short loc_5941
.text:000000000000595C ; } // starts at 5900
.text:000000000000595C extract_trimmed_name endp
.text:000000000000595C
.text:000000000000595C ; ---------------------------------------------------------------------------
.text:000000000000595E                 align 20h
.text:0000000000005960
.text:0000000000005960 ; =============== S U B R O U T I N E =======================================
.text:0000000000005960
.text:0000000000005960
.text:0000000000005960                 public read_utmp
.text:0000000000005960 read_utmp       proc near               ; CODE XREF: main+26B↑p
.text:0000000000005960
.text:0000000000005960 var_48          = qword ptr -48h
.text:0000000000005960 var_40          = qword ptr -40h
.text:0000000000005960
.text:0000000000005960 ; __unwind {
.text:0000000000005960                 push    r15
.text:0000000000005962                 push    r14
.text:0000000000005964                 xor     r14d, r14d
.text:0000000000005967                 push    r13
.text:0000000000005969                 mov     r13d, ecx
.text:000000000000596C                 push    r12
.text:000000000000596E                 push    rbp
.text:000000000000596F                 push    rbx
.text:0000000000005970                 mov     r12d, r13d
.text:0000000000005973                 xor     ebx, ebx
.text:0000000000005975                 xor     ebp, ebp
.text:0000000000005977                 and     r12d, 2
.text:000000000000597B                 sub     rsp, 18h
.text:000000000000597F                 and     r13d, 1
.text:0000000000005983                 mov     [rsp+48h+var_48], rsi
.text:0000000000005987                 mov     [rsp+48h+var_40], rdx
.text:000000000000598C                 call    _utmpxname
.text:0000000000005991                 call    _setutxent
.text:0000000000005996
.text:0000000000005996 loc_5996:                               ; CODE XREF: read_utmp+58↓j
.text:0000000000005996                                         ; read_utmp+10C↓j
.text:0000000000005996                 call    _getutxent
.text:000000000000599B                 test    rax, rax
.text:000000000000599E                 mov     r15, rax
.text:00000000000059A1                 jz      short loc_5A11
.text:00000000000059A3
.text:00000000000059A3 loc_59A3:                               ; CODE XREF: read_utmp+AF↓j
.text:00000000000059A3                 cmp     word ptr [r15], 7
.text:00000000000059A8                 jnz     short loc_59B5
.text:00000000000059AA                 cmp     byte ptr [r15+2Ch], 0
.text:00000000000059AF                 jnz     loc_5A40
.text:00000000000059B5
.text:00000000000059B5 loc_59B5:                               ; CODE XREF: read_utmp+48↑j
.text:00000000000059B5                 test    r12d, r12d
.text:00000000000059B8                 jnz     short loc_5996
.text:00000000000059BA
.text:00000000000059BA loc_59BA:                               ; CODE XREF: read_utmp+E6↓j
.text:00000000000059BA                                         ; read_utmp+EF↓j ...
.text:00000000000059BA                 cmp     rbp, rbx
.text:00000000000059BD                 jz      loc_5A80
.text:00000000000059C3
.text:00000000000059C3 loc_59C3:                               ; CODE XREF: read_utmp+115↓j
.text:00000000000059C3                                         ; read_utmp+153↓j
.text:00000000000059C3                 lea     rax, [rbx+rbx*2]
.text:00000000000059C7                 mov     rdx, [r15]
.text:00000000000059CA                 mov     rsi, r15
.text:00000000000059CD                 add     rbx, 1
.text:00000000000059D1                 shl     rax, 7
.text:00000000000059D5                 add     rax, r14
.text:00000000000059D8                 mov     [rax], rdx
.text:00000000000059DB                 lea     rdi, [rax+8]
.text:00000000000059DF                 mov     rdx, [r15+178h]
.text:00000000000059E6                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:00000000000059EA                 mov     [rax+178h], rdx
.text:00000000000059F1                 sub     rax, rdi
.text:00000000000059F4                 sub     rsi, rax
.text:00000000000059F7                 add     eax, 180h
.text:00000000000059FC                 shr     eax, 3
.text:00000000000059FF                 mov     ecx, eax
.text:0000000000005A01                 rep movsq
.text:0000000000005A04                 call    _getutxent
.text:0000000000005A09                 test    rax, rax
.text:0000000000005A0C                 mov     r15, rax
.text:0000000000005A0F                 jnz     short loc_59A3
.text:0000000000005A11
.text:0000000000005A11 loc_5A11:                               ; CODE XREF: read_utmp+41↑j
.text:0000000000005A11                 call    _endutxent
.text:0000000000005A16                 mov     rax, [rsp+48h+var_48]
.text:0000000000005A1A                 mov     [rax], rbx
.text:0000000000005A1D                 mov     rax, [rsp+48h+var_40]
.text:0000000000005A22                 mov     [rax], r14
.text:0000000000005A25                 add     rsp, 18h
.text:0000000000005A29                 xor     eax, eax
.text:0000000000005A2B                 pop     rbx
.text:0000000000005A2C                 pop     rbp
.text:0000000000005A2D                 pop     r12
.text:0000000000005A2F                 pop     r13
.text:0000000000005A31                 pop     r14
.text:0000000000005A33                 pop     r15
.text:0000000000005A35                 retn
.text:0000000000005A35 ; ---------------------------------------------------------------------------
.text:0000000000005A36                 align 20h
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: read_utmp+4F↑j
.text:0000000000005A40                 mov     edi, [r15+4]    ; pid
.text:0000000000005A44                 test    edi, edi
.text:0000000000005A46                 jle     loc_59BA
.text:0000000000005A4C                 test    r13b, r13b
.text:0000000000005A4F                 jz      loc_59BA
.text:0000000000005A55                 xor     esi, esi        ; sig
.text:0000000000005A57                 call    _kill
.text:0000000000005A5C                 test    eax, eax
.text:0000000000005A5E                 jns     loc_59BA
.text:0000000000005A64                 call    ___errno_location
.text:0000000000005A69                 cmp     dword ptr [rax], 3
.text:0000000000005A6C                 jz      loc_5996
.text:0000000000005A72                 cmp     rbp, rbx
.text:0000000000005A75                 jnz     loc_59C3
.text:0000000000005A7B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005A80
.text:0000000000005A80 loc_5A80:                               ; CODE XREF: read_utmp+5D↑j
.text:0000000000005A80                 test    r14, r14
.text:0000000000005A83                 jz      short loc_5AB8
.text:0000000000005A85                 mov     rax, 38E38E38E38E37h
.text:0000000000005A8F                 cmp     rbp, rax
.text:0000000000005A92                 ja      short loc_5ADD
.text:0000000000005A94                 mov     rax, rbp
.text:0000000000005A97                 shr     rax, 1
.text:0000000000005A9A                 lea     rbp, [rbp+rax+1]
.text:0000000000005A9F
.text:0000000000005A9F loc_5A9F:                               ; CODE XREF: read_utmp+17B↓j
.text:0000000000005A9F                 lea     rsi, [rbp+rbp*2+0]
.text:0000000000005AA4                 mov     rdi, r14
.text:0000000000005AA7                 shl     rsi, 7
.text:0000000000005AAB                 call    xrealloc
.text:0000000000005AB0                 mov     r14, rax
.text:0000000000005AB3                 jmp     loc_59C3
.text:0000000000005AB8 ; ---------------------------------------------------------------------------
.text:0000000000005AB8
.text:0000000000005AB8 loc_5AB8:                               ; CODE XREF: read_utmp+123↑j
.text:0000000000005AB8                 test    rbp, rbp
.text:0000000000005ABB                 mov     eax, 1
.text:0000000000005AC0                 mov     edx, 180h
.text:0000000000005AC5                 cmovz   rbp, rax
.text:0000000000005AC9                 mov     rax, rdx
.text:0000000000005ACC                 xor     esi, esi
.text:0000000000005ACE                 mul     rbp
.text:0000000000005AD1                 jo      short loc_5AE2
.text:0000000000005AD3
.text:0000000000005AD3 loc_5AD3:                               ; CODE XREF: read_utmp+187↓j
.text:0000000000005AD3                 test    rax, rax
.text:0000000000005AD6                 js      short loc_5ADD
.text:0000000000005AD8                 test    rsi, rsi
.text:0000000000005ADB                 jz      short loc_5A9F
.text:0000000000005ADD
.text:0000000000005ADD loc_5ADD:                               ; CODE XREF: read_utmp+132↑j
.text:0000000000005ADD                                         ; read_utmp+176↑j
.text:0000000000005ADD                 call    xalloc_die
.text:0000000000005AE2 ; ---------------------------------------------------------------------------
.text:0000000000005AE2
.text:0000000000005AE2 loc_5AE2:                               ; CODE XREF: read_utmp+171↑j
.text:0000000000005AE2                 mov     esi, 1
.text:0000000000005AE7                 jmp     short loc_5AD3
.text:0000000000005AE7 ; } // starts at 5960
.text:0000000000005AE7 read_utmp       endp
.text:0000000000005AE7
.text:0000000000005AE7 ; ---------------------------------------------------------------------------
.text:0000000000005AE9                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0
.text:0000000000005AF0 ; Attributes: info_from_lumina
.text:0000000000005AF0
.text:0000000000005AF0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005AF0                 public close_stream
.text:0000000000005AF0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005AF0                                         ; close_stdout+33↑p
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 push    r12
.text:0000000000005AF2                 push    rbp
.text:0000000000005AF3                 mov     rbp, rdi
.text:0000000000005AF6                 push    rbx
.text:0000000000005AF7                 call    ___fpending
.text:0000000000005AFC                 mov     ebx, [rbp+0]
.text:0000000000005AFF                 mov     rdi, rbp        ; stream
.text:0000000000005B02                 mov     r12, rax
.text:0000000000005B05                 call    rpl_fclose
.text:0000000000005B0A                 and     ebx, 20h
.text:0000000000005B0D                 test    ebx, ebx
.text:0000000000005B0F                 jnz     short loc_5B28
.text:0000000000005B11                 test    eax, eax
.text:0000000000005B13                 jz      short loc_5B1F
.text:0000000000005B15                 test    r12, r12
.text:0000000000005B18                 mov     eax, 0FFFFFFFFh
.text:0000000000005B1D                 jz      short loc_5B58
.text:0000000000005B1F
.text:0000000000005B1F loc_5B1F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000005B1F                 pop     rbx
.text:0000000000005B20                 pop     rbp
.text:0000000000005B21                 pop     r12
.text:0000000000005B23                 retn
.text:0000000000005B23 ; ---------------------------------------------------------------------------
.text:0000000000005B24                 align 8
.text:0000000000005B28
.text:0000000000005B28 loc_5B28:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005B28                 test    eax, eax
.text:0000000000005B2A                 jnz     short loc_5B48
.text:0000000000005B2C                 call    ___errno_location
.text:0000000000005B31                 mov     dword ptr [rax], 0
.text:0000000000005B37                 mov     eax, 0FFFFFFFFh
.text:0000000000005B3C                 pop     rbx
.text:0000000000005B3D                 pop     rbp
.text:0000000000005B3E                 pop     r12
.text:0000000000005B40                 retn
.text:0000000000005B40 ; ---------------------------------------------------------------------------
.text:0000000000005B41                 align 8
.text:0000000000005B48
.text:0000000000005B48 loc_5B48:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005B48                 pop     rbx
.text:0000000000005B49                 mov     eax, 0FFFFFFFFh
.text:0000000000005B4E                 pop     rbp
.text:0000000000005B4F                 pop     r12
.text:0000000000005B51                 retn
.text:0000000000005B51 ; ---------------------------------------------------------------------------
.text:0000000000005B52                 align 8
.text:0000000000005B58
.text:0000000000005B58 loc_5B58:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005B58                 call    ___errno_location
.text:0000000000005B5D                 cmp     dword ptr [rax], 9
.text:0000000000005B60                 pop     rbx
.text:0000000000005B61                 pop     rbp
.text:0000000000005B62                 pop     r12
.text:0000000000005B64                 setnz   al
.text:0000000000005B67                 movzx   eax, al
.text:0000000000005B6A                 neg     eax
.text:0000000000005B6C                 retn
.text:0000000000005B6C ; } // starts at 5AF0
.text:0000000000005B6C close_stream    endp
.text:0000000000005B6C
.text:0000000000005B6C ; ---------------------------------------------------------------------------
.text:0000000000005B6D                 align 10h
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70
.text:0000000000005B70                 public locale_charset
.text:0000000000005B70 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 sub     rsp, 8
.text:0000000000005B74                 mov     edi, 0Eh        ; item
.text:0000000000005B79                 call    _nl_langinfo
.text:0000000000005B7E                 test    rax, rax
.text:0000000000005B81                 jz      short loc_5BA0
.text:0000000000005B83                 cmp     byte ptr [rax], 0
.text:0000000000005B86                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000005B8D                 cmovz   rax, rdx
.text:0000000000005B91                 add     rsp, 8
.text:0000000000005B95                 retn
.text:0000000000005B95 ; ---------------------------------------------------------------------------
.text:0000000000005B96                 align 20h
.text:0000000000005BA0
.text:0000000000005BA0 loc_5BA0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005BA0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005BA7                 add     rsp, 8
.text:0000000000005BAB                 retn
.text:0000000000005BAB ; } // starts at 5B70
.text:0000000000005BAB locale_charset  endp
.text:0000000000005BAB
.text:0000000000005BAB ; ---------------------------------------------------------------------------
.text:0000000000005BAC                 align 10h
.text:0000000000005BB0
.text:0000000000005BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BB0
.text:0000000000005BB0 ; Attributes: info_from_lumina
.text:0000000000005BB0
.text:0000000000005BB0 ; void _libc_csu_init(void)
.text:0000000000005BB0                 public __libc_csu_init
.text:0000000000005BB0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005BB0 ; __unwind {
.text:0000000000005BB0                 push    r15
.text:0000000000005BB2                 push    r14
.text:0000000000005BB4                 mov     r15, rdx
.text:0000000000005BB7                 push    r13
.text:0000000000005BB9                 push    r12
.text:0000000000005BBB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005BC2                 push    rbp
.text:0000000000005BC3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000005BCA                 push    rbx
.text:0000000000005BCB                 mov     r13d, edi
.text:0000000000005BCE                 mov     r14, rsi
.text:0000000000005BD1                 sub     rbp, r12
.text:0000000000005BD4                 sub     rsp, 8
.text:0000000000005BD8                 sar     rbp, 3
.text:0000000000005BDC                 call    _init_proc
.text:0000000000005BE1                 test    rbp, rbp
.text:0000000000005BE4                 jz      short loc_5C06
.text:0000000000005BE6                 xor     ebx, ebx
.text:0000000000005BE8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005BF0
.text:0000000000005BF0 loc_5BF0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005BF0                 mov     rdx, r15
.text:0000000000005BF3                 mov     rsi, r14
.text:0000000000005BF6                 mov     edi, r13d
.text:0000000000005BF9                 call    ds:(__frame_dummy_init_array_entry - 207B10h)[r12+rbx*8]
.text:0000000000005BFD                 add     rbx, 1
.text:0000000000005C01                 cmp     rbp, rbx
.text:0000000000005C04                 jnz     short loc_5BF0
.text:0000000000005C06
.text:0000000000005C06 loc_5C06:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005C06                 add     rsp, 8
.text:0000000000005C0A                 pop     rbx
.text:0000000000005C0B                 pop     rbp
.text:0000000000005C0C                 pop     r12
.text:0000000000005C0E                 pop     r13
.text:0000000000005C10                 pop     r14
.text:0000000000005C12                 pop     r15
.text:0000000000005C14                 retn
.text:0000000000005C14 ; } // starts at 5BB0
.text:0000000000005C14 __libc_csu_init endp
.text:0000000000005C14
.text:0000000000005C14 ; ---------------------------------------------------------------------------
.text:0000000000005C15                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20
.text:0000000000005C20 ; void _libc_csu_fini(void)
.text:0000000000005C20                 public __libc_csu_fini
.text:0000000000005C20 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 rep retn
.text:0000000000005C20 ; } // starts at 5C20
.text:0000000000005C20 __libc_csu_fini endp
.text:0000000000005C20
.text:0000000000005C20 ; ---------------------------------------------------------------------------
.text:0000000000005C22                 align 10h
.text:0000000000005C30
.text:0000000000005C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C30
.text:0000000000005C30
.text:0000000000005C30 atexit          proc near               ; CODE XREF: main+69↑p
.text:0000000000005C30 ; __unwind {
.text:0000000000005C30                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005C37                 xor     esi, esi        ; obj
.text:0000000000005C39                 jmp     ___cxa_atexit
.text:0000000000005C39 ; } // starts at 5C30
.text:0000000000005C39 atexit          endp
.text:0000000000005C39
.text:0000000000005C39 _text           ends
.text:0000000000005C39
LOAD:0000000000005C3E ; ===========================================================================
LOAD:0000000000005C3E
LOAD:0000000000005C3E ; Segment type: Pure code
LOAD:0000000000005C3E ; Segment permissions: Read/Execute
LOAD:0000000000005C3E LOAD            segment byte public 'CODE' use64
LOAD:0000000000005C3E                 assume cs:LOAD
LOAD:0000000000005C3E                 ;org 5C3Eh
LOAD:0000000000005C3E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005C3E                 align 20h
LOAD:0000000000005C3E LOAD            ends
LOAD:0000000000005C3E
.fini:0000000000005C40 ; ===========================================================================
.fini:0000000000005C40
.fini:0000000000005C40 ; Segment type: Pure code
.fini:0000000000005C40 ; Segment permissions: Read/Execute
.fini:0000000000005C40 _fini           segment dword public 'CODE' use64
.fini:0000000000005C40                 assume cs:_fini
.fini:0000000000005C40                 ;org 5C40h
.fini:0000000000005C40                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005C40
.fini:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005C40
.fini:0000000000005C40
.fini:0000000000005C40                 public _term_proc
.fini:0000000000005C40 _term_proc      proc near
.fini:0000000000005C40                 sub     rsp, 8          ; _fini
.fini:0000000000005C44                 add     rsp, 8
.fini:0000000000005C48                 retn
.fini:0000000000005C48 _term_proc      endp
.fini:0000000000005C48
.fini:0000000000005C48 _fini           ends
.fini:0000000000005C48
LOAD:0000000000005C49 ; ===========================================================================
LOAD:0000000000005C49
LOAD:0000000000005C49 ; Segment type: Pure code
LOAD:0000000000005C49 ; Segment permissions: Read/Execute
LOAD:0000000000005C49 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005C49                 assume cs:LOAD
LOAD:0000000000005C49                 ;org 5C49h
LOAD:0000000000005C49                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005C49                 align 20h
LOAD:0000000000005C49 LOAD            ends
LOAD:0000000000005C49
.rodata:0000000000005C60 ; ===========================================================================
.rodata:0000000000005C60
.rodata:0000000000005C60 ; Segment type: Pure data
.rodata:0000000000005C60 ; Segment permissions: Read
.rodata:0000000000005C60 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005C60                 assume cs:_rodata
.rodata:0000000000005C60                 ;org 5C60h
.rodata:0000000000005C60                 public _IO_stdin_used
.rodata:0000000000005C60 _IO_stdin_used  db    1
.rodata:0000000000005C61                 db    0
.rodata:0000000000005C62                 db    2
.rodata:0000000000005C63                 db    0
.rodata:0000000000005C64 ; const char aLoginName[]
.rodata:0000000000005C64 aLoginName      db 'Login name: ',0     ; DATA XREF: print_long_entry+28↑o
.rodata:0000000000005C71 a28s            db '%-28s',0            ; DATA XREF: print_long_entry+4D↑o
.rodata:0000000000005C77 ; const char aInRealLife[]
.rodata:0000000000005C77 aInRealLife     db 'In real life: ',0   ; DATA XREF: print_long_entry+63↑o
.rodata:0000000000005C86 ; const char asc_5C86[]
.rodata:0000000000005C86 asc_5C86        db '???',0Ah,0          ; DATA XREF: print_long_entry:loc_2590↑o
.rodata:0000000000005C8B ; const char aDirectory[]
.rodata:0000000000005C8B aDirectory      db 'Directory: ',0      ; DATA XREF: print_long_entry:loc_2360↑o
.rodata:0000000000005C97 a29s            db '%-29s',0            ; DATA XREF: print_long_entry+186↑o
.rodata:0000000000005C9D ; const char aShell[]
.rodata:0000000000005C9D aShell          db 'Shell: ',0          ; DATA XREF: print_long_entry+199↑o
.rodata:0000000000005CA5 ; const char aProject[]
.rodata:0000000000005CA5 aProject        db 'Project: ',0        ; DATA XREF: print_long_entry+24D↑o
.rodata:0000000000005CAF ; const char aPlan[]
.rodata:0000000000005CAF aPlan           db 'Plan:',0Ah,0        ; DATA XREF: print_long_entry+311↑o
.rodata:0000000000005CB6 asc_5CB6        db '     ',0            ; DATA XREF: print_entry+333↑o
.rodata:0000000000005CBC ; const char asc_5CBC[]
.rodata:0000000000005CBC asc_5CBC        db '        ???',0      ; DATA XREF: print_entry:loc_2A00↑o
.rodata:0000000000005CC8 a19s_0          db ' %19s',0            ; DATA XREF: print_entry+413↑o
.rodata:0000000000005CCE a1919s          db ' %-19.19s',0        ; DATA XREF: print_entry+11F↑o
.rodata:0000000000005CD8 unk_5CD8        db  20h                 ; DATA XREF: print_entry:loc_2740↑o
.rodata:0000000000005CD9                 db  25h ; %
.rodata:0000000000005CDA                 db  63h ; c
.rodata:0000000000005CDB a8S             db '%-8.*s',0           ; DATA XREF: print_entry+9F↑o
.rodata:0000000000005CE2 a02d02d         db '%02d:%02d',0        ; DATA XREF: print_entry+4D4↑o
.rodata:0000000000005CEC aLud            db '%lud',0             ; DATA XREF: print_entry+37A↑o
.rodata:0000000000005CF1 a6s             db ' %-6s',0            ; DATA XREF: main+45F↑o
.rodata:0000000000005CF1                                         ; print_entry:loc_2786↑o
.rodata:0000000000005CF7 ; const char asc_5CF7[]
.rodata:0000000000005CF7 asc_5CF7        db '?????',0            ; DATA XREF: print_entry+170↑o
.rodata:0000000000005CFD aSS             db ' %s:%s',0           ; DATA XREF: print_entry+2F1↑o
.rodata:0000000000005D04 aPinky          db 'pinky',0            ; DATA XREF: main+148↑o
.rodata:0000000000005D04                                         ; usage+10C↑o ...
.rodata:0000000000005D0A aVarRunUtmp     db '/var/run/utmp',0    ; DATA XREF: main+251↑o
.rodata:0000000000005D0A                                         ; main:loc_1F87↑o ...
.rodata:0000000000005D18 asc_5D18        db '[',0                ; DATA XREF: usage+141↑o
.rodata:0000000000005D1A aTestInvocation db 'test invocation',0  ; DATA XREF: usage+168↑o
.rodata:0000000000005D2A aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000005D2A                                         ; DATA XREF: usage+198↑o
.rodata:0000000000005D2A                                         ; usage+28C↑o ...
.rodata:0000000000005D40 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1A9↑o
.rodata:0000000000005D4A aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1B5↑o
.rodata:0000000000005D59 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+148↑o
.rodata:0000000000005D63 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+174↑o
.rodata:0000000000005D6D aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+18C↑o
.rodata:0000000000005D77 ; const char aSOnlineHelpS[]
.rodata:0000000000005D77 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1FA↑o
.rodata:0000000000005D77                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000005D8E unk_5D8E        db  47h ; G             ; DATA XREF: main+141↑o
.rodata:0000000000005D8E                                         ; usage+216↑o ...
.rodata:0000000000005D8F                 db  4Eh ; N
.rodata:0000000000005D90                 db  55h ; U
.rodata:0000000000005D91                 db  20h
.rodata:0000000000005D92 ; const char domainname[]
.rodata:0000000000005D92 domainname      db 'coreutils',0        ; DATA XREF: main+4A↑o
.rodata:0000000000005D92                                         ; main+56↑o ...
.rodata:0000000000005D9C ; const char s2[]
.rodata:0000000000005D9C s2              db 'en_',0              ; DATA XREF: usage+23D↑o
.rodata:0000000000005D9C                                         ; usage+2FE↑o
.rodata:0000000000005DA0 ; const char aFullDocumentat[]
.rodata:0000000000005DA0 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000005DA0                                         ; DATA XREF: usage:loc_2D99↑o
.rodata:0000000000005DA0                                         ; usage:loc_2E56↑o
.rodata:0000000000005DBB ; const char dirname[]
.rodata:0000000000005DBB dirname         db '/usr/local/share/locale',0
.rodata:0000000000005DBB                                         ; DATA XREF: main+43↑o
.rodata:0000000000005DD3 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+132↑o
.rodata:0000000000005DE3 aJosephArceneau db 'Joseph Arceneaux',0 ; DATA XREF: main+139↑o
.rodata:0000000000005DF4 aKavehGhazi     db 'Kaveh Ghazi',0      ; DATA XREF: main+11B↑o
.rodata:0000000000005E00 ; const char shortopts[]
.rodata:0000000000005E00 shortopts       db 'sfwiqbhlp',0        ; DATA XREF: main:loc_1B30↑o
.rodata:0000000000005E0A aYMDHM          db '%Y-%m-%d %H:%M',0   ; DATA XREF: main:loc_1D9B↑o
.rodata:0000000000005E19 aBEHM           db '%b %e %H:%M',0      ; DATA XREF: main+290↑o
.rodata:0000000000005E25 ; const char msgid[]
.rodata:0000000000005E25 msgid           db 'Login',0            ; DATA XREF: main:loc_1DEA↑o
.rodata:0000000000005E2B a8s             db '%-8s',0             ; DATA XREF: main+33D↑o
.rodata:0000000000005E30 ; const char aName[]
.rodata:0000000000005E30 aName           db 'Name',0             ; DATA XREF: main:loc_1EB3↑o
.rodata:0000000000005E35 a19s            db ' %-19s',0           ; DATA XREF: main+406↑o
.rodata:0000000000005E3C ; const char aTty[]
.rodata:0000000000005E3C aTty            db ' TTY',0             ; DATA XREF: main:loc_1E20↑o
.rodata:0000000000005E41 a9s             db ' %-9s',0            ; DATA XREF: main+373↑o
.rodata:0000000000005E47 ; const char aIdle[]
.rodata:0000000000005E47 aIdle           db 'Idle',0             ; DATA XREF: main:loc_1F0C↑o
.rodata:0000000000005E4C ; const char aWhen[]
.rodata:0000000000005E4C aWhen           db 'When',0             ; DATA XREF: main:loc_1E56↑o
.rodata:0000000000005E51 aS              db ' %-*s',0            ; DATA XREF: main+3AF↑o
.rodata:0000000000005E57 ; const char aWhere[]
.rodata:0000000000005E57 aWhere          db 'Where',0            ; DATA XREF: main:loc_1EE1↑o
.rodata:0000000000005E5D aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000005E62 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207B40↓o
.rodata:0000000000005E6A                 align 10h
.rodata:0000000000005E70 ; const char aTrySHelpForMor[]
.rodata:0000000000005E70 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005E70                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000005E97                 align 8
.rodata:0000000000005E98 ; const char aUsageSOptionUs[]
.rodata:0000000000005E98 aUsageSOptionUs db 'Usage: %s [OPTION]... [USER]...',0Ah,0
.rodata:0000000000005E98                                         ; DATA XREF: usage:loc_2B9D↑o
.rodata:0000000000005EB9                 align 20h
.rodata:0000000000005EC0 ; const char aLProduceLongFo[]
.rodata:0000000000005EC0 aLProduceLongFo db 0Ah                  ; DATA XREF: usage+84↑o
.rodata:0000000000005EC0                 db '  -l              produce long format output for the specified US'
.rodata:0000000000005EC0                 db 'ERs',0Ah
.rodata:0000000000005EC0                 db '  -b              omit the user',27h,'s home directory and shell '
.rodata:0000000000005EC0                 db 'in long format',0Ah
.rodata:0000000000005EC0                 db '  -h              omit the user',27h,'s project file in long form'
.rodata:0000000000005EC0                 db 'at',0Ah
.rodata:0000000000005EC0                 db '  -p              omit the user',27h,'s plan file in long format',0Ah
.rodata:0000000000005EC0                 db '  -s              do short format output, this is the default',0Ah
.rodata:0000000000005EC0                 db 0
.rodata:0000000000006008 ; const char aFOmitTheLineOf[]
.rodata:0000000000006008 aFOmitTheLineOf db '  -f              omit the line of column headings in short forma'
.rodata:0000000000006008                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000006008                 db 't',0Ah
.rodata:0000000000006008                 db '  -w              omit the user',27h,'s full name in short format'
.rodata:0000000000006008                 db 0Ah
.rodata:0000000000006008                 db '  -i              omit the user',27h,'s full name and remote host'
.rodata:0000000000006008                 db ' in short format',0Ah
.rodata:0000000000006008                 db '  -q              omit the user',27h,'s full name, remote host an'
.rodata:0000000000006008                 db 'd idle time',0Ah
.rodata:0000000000006008                 db '                  in short format',0Ah,0
.rodata:000000000000613D                 align 20h
.rodata:0000000000006140 ; const char aHelpDisplayThi[]
.rodata:0000000000006140 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006140                                         ; DATA XREF: usage+CE↑o
.rodata:000000000000616D                 align 10h
.rodata:0000000000006170 ; const char aVersionOutputV[]
.rodata:0000000000006170 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000006170                                         ; DATA XREF: usage+F3↑o
.rodata:00000000000061A6                 align 8
.rodata:00000000000061A8 ; const char aALightweightFi[]
.rodata:00000000000061A8 aALightweightFi db 0Ah                  ; DATA XREF: usage+118↑o
.rodata:00000000000061A8                 db 'A lightweight ',27h,'finger',27h,' program;  print user informati'
.rodata:00000000000061A8                 db 'on.',0Ah
.rodata:00000000000061A8                 db 'The utmp file will be %s.',0Ah,0
.rodata:00000000000061FD                 align 20h
.rodata:0000000000006200 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006200                                         ; DATA XREF: usage+20F↑o
.rodata:0000000000006200                                         ; usage+273↑o ...
.rodata:0000000000006228 ; const char aReportAnyTrans[]
.rodata:0000000000006228 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006228                                         ; DATA XREF: usage+367↑o
.rodata:0000000000006228                 db 'am/>',0Ah,0
.rodata:000000000000626F                 align 10h
.rodata:0000000000006270 ; const char aOrAvailableLoc[]
.rodata:0000000000006270 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000006270                                         ; DATA XREF: usage:loc_2DDE↑o
.rodata:00000000000062A3                 align 8
.rodata:00000000000062A8 ; const char aNoUsernameSpec[]
.rodata:00000000000062A8 aNoUsernameSpec db 'no username specified; at least one must be specified when using '
.rodata:00000000000062A8                                         ; DATA XREF: main:loc_1F48↑o
.rodata:00000000000062A8                 db '-l',0
.rodata:00000000000062EC a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000062F1 ; const char aWriteError[]
.rodata:00000000000062F1 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3003↑o
.rodata:00000000000062F1                                         ; print_long_entry+22A↑o ...
.rodata:00000000000062FD ; const char format[]
.rodata:00000000000062FD format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000062FD                                         ; main+434↑o ...
.rodata:0000000000006304 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000006306 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_30B0↑o
.rodata:000000000000630C                 align 10h
.rodata:0000000000006310 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000006310                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000006348 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000006350 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000006354 unk_6354        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000006355                 db  80h
.rodata:0000000000006356                 db  98h
.rodata:0000000000006357                 db    0
.rodata:0000000000006358 unk_6358        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000006359                 db  80h
.rodata:000000000000635A                 db  99h
.rodata:000000000000635B                 db    0
.rodata:000000000000635C unk_635C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000635D                 db    7
.rodata:000000000000635E                 db  65h ; e
.rodata:000000000000635F                 db    0
.rodata:0000000000006360 unk_6360        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000006361                 db 0AFh
.rodata:0000000000006362                 db    0
.rodata:0000000000006363 unk_6363        db  22h ; "             ; DATA XREF: gettext_quote:loc_3230↑o
.rodata:0000000000006363                                         ; quotearg_buffer_restyled:loc_3FEB↑o ...
.rodata:0000000000006364                 db    0
.rodata:0000000000006365 ; const char asc_6365[2]
.rodata:0000000000006365 asc_6365        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000006365                                         ; quotearg_buffer_restyled:loc_33B3↑o ...
.rodata:0000000000006367 ; const char asc_6367[2]
.rodata:0000000000006367 asc_6367        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000006367                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000006369 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000006371 aShell_0        db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207B88↓o
.rodata:0000000000006377 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207B90↓o
.rodata:0000000000006384 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207B98↓o
.rodata:0000000000006384                                         ; .data.rel.ro:0000000000207BB8↓o
.rodata:0000000000006391 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000006391                                         ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:00000000000063A5 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207BA8↓o
.rodata:00000000000063A7 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207BB0↓o
.rodata:00000000000063AF aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207BC8↓o
.rodata:00000000000063B7                 align 20h
.rodata:00000000000063C0 jpt_3391        dd offset loc_413A - 63C0h
.rodata:00000000000063C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000063C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000063C0                 dd offset loc_3393 - 63C0h ; jump table for switch statement
.rodata:00000000000063C0                 dd offset loc_4368 - 63C0h
.rodata:00000000000063C0                 dd offset loc_4174 - 63C0h
.rodata:00000000000063C0                 dd offset loc_3F64 - 63C0h
.rodata:00000000000063C0                 dd offset loc_3FC0 - 63C0h
.rodata:00000000000063C0                 dd offset loc_4015 - 63C0h
.rodata:00000000000063C0                 dd offset loc_405A - 63C0h
.rodata:00000000000063C0                 dd offset loc_4094 - 63C0h
.rodata:00000000000063C0                 dd offset loc_4094 - 63C0h
.rodata:00000000000063C0                 dd offset loc_4094 - 63C0h
.rodata:00000000000063EC jpt_34EE        dd offset loc_3710 - 63ECh, offset def_34EE - 63ECh, offset def_34EE - 63ECh
.rodata:00000000000063EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000063EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000063EC                 dd offset def_34EE - 63ECh, offset def_34EE - 63ECh, offset def_34EE - 63ECh ; jump table for switch statement
.rodata:00000000000063EC                 dd offset def_34EE - 63ECh, offset loc_3750 - 63ECh, offset loc_3658 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3618 - 63ECh, offset loc_37E0 - 63ECh, offset loc_37D0 - 63ECh
.rodata:00000000000063EC                 dd offset loc_37C0 - 63ECh, offset loc_37B0 - 63ECh, offset def_34EE - 63ECh
.rodata:00000000000063EC                 dd offset def_34EE - 63ECh, offset def_34EE - 63ECh, offset def_34EE - 63ECh
.rodata:00000000000063EC                 dd offset def_34EE - 63ECh, offset def_34EE - 63ECh, offset def_34EE - 63ECh
.rodata:00000000000063EC                 dd offset def_34EE - 63ECh, offset def_34EE - 63ECh, offset def_34EE - 63ECh
.rodata:00000000000063EC                 dd offset def_34EE - 63ECh, offset def_34EE - 63ECh, offset def_34EE - 63ECh
.rodata:00000000000063EC                 dd offset def_34EE - 63ECh, offset def_34EE - 63ECh, offset def_34EE - 63ECh
.rodata:00000000000063EC                 dd offset def_34EE - 63ECh, offset def_34EE - 63ECh, offset loc_37A0 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3790 - 63ECh, offset loc_3790 - 63ECh, offset loc_3760 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3790 - 63ECh, offset loc_3738 - 63ECh, offset loc_3790 - 63ECh
.rodata:00000000000063EC                 dd offset loc_35F3 - 63ECh, offset loc_3790 - 63ECh, offset loc_3790 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3790 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3790 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3790 - 63ECh, offset loc_3790 - 63ECh, offset loc_3790 - 63ECh
.rodata:00000000000063EC                 dd offset loc_35C3 - 63ECh, offset def_34EE - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3790 - 63ECh, offset loc_3668 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3790 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3790 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3738 - 63ECh, offset loc_3738 - 63ECh, offset loc_3738 - 63ECh
.rodata:00000000000063EC                 dd offset loc_34F3 - 63ECh, offset loc_3790 - 63ECh, offset loc_34F3 - 63ECh
.rodata:00000000000063EC                 dd offset loc_3760 - 63ECh
.rodata:00000000000065E8 jpt_387A        dd offset loc_38E0 - 65E8h, offset def_387A - 65E8h, offset def_387A - 65E8h
.rodata:00000000000065E8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000065E8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000065E8                 dd offset def_387A - 65E8h, offset def_387A - 65E8h, offset def_387A - 65E8h ; jump table for switch statement
.rodata:00000000000065E8                 dd offset def_387A - 65E8h, offset loc_38D0 - 65E8h, offset loc_3A20 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3A08 - 65E8h, offset loc_38B8 - 65E8h, offset loc_39F8 - 65E8h
.rodata:00000000000065E8                 dd offset loc_38A0 - 65E8h, offset loc_39E0 - 65E8h, offset def_387A - 65E8h
.rodata:00000000000065E8                 dd offset def_387A - 65E8h, offset def_387A - 65E8h, offset def_387A - 65E8h
.rodata:00000000000065E8                 dd offset def_387A - 65E8h, offset def_387A - 65E8h, offset def_387A - 65E8h
.rodata:00000000000065E8                 dd offset def_387A - 65E8h, offset def_387A - 65E8h, offset def_387A - 65E8h
.rodata:00000000000065E8                 dd offset def_387A - 65E8h, offset def_387A - 65E8h, offset def_387A - 65E8h
.rodata:00000000000065E8                 dd offset def_387A - 65E8h, offset def_387A - 65E8h, offset def_387A - 65E8h
.rodata:00000000000065E8                 dd offset def_387A - 65E8h, offset def_387A - 65E8h, offset loc_39C8 - 65E8h
.rodata:00000000000065E8                 dd offset loc_39B0 - 65E8h, offset loc_39B0 - 65E8h, offset loc_3998 - 65E8h
.rodata:00000000000065E8                 dd offset loc_39B0 - 65E8h, offset loc_3980 - 65E8h, offset loc_39B0 - 65E8h
.rodata:00000000000065E8                 dd offset loc_35F0 - 65E8h, offset loc_39B0 - 65E8h, offset loc_39B0 - 65E8h
.rodata:00000000000065E8                 dd offset loc_39B0 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_39B0 - 65E8h
.rodata:00000000000065E8                 dd offset loc_39B0 - 65E8h, offset loc_39B0 - 65E8h, offset loc_39B0 - 65E8h
.rodata:00000000000065E8                 dd offset loc_35C0 - 65E8h, offset def_387A - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_39B0 - 65E8h, offset loc_3880 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_39B0 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_39B0 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3980 - 65E8h, offset loc_3980 - 65E8h, offset loc_3980 - 65E8h
.rodata:00000000000065E8                 dd offset loc_34F0 - 65E8h, offset loc_39B0 - 65E8h, offset loc_34F0 - 65E8h
.rodata:00000000000065E8                 dd offset loc_3998 - 65E8h
.rodata:00000000000067E4                 align 20h
.rodata:0000000000006800                 public quoting_style_vals
.rodata:0000000000006800 quoting_style_vals db    0
.rodata:0000000000006801                 db    0
.rodata:0000000000006802                 db    0
.rodata:0000000000006803                 db    0
.rodata:0000000000006804                 db    1
.rodata:0000000000006805                 db    0
.rodata:0000000000006806                 db    0
.rodata:0000000000006807                 db    0
.rodata:0000000000006808                 db    2
.rodata:0000000000006809                 db    0
.rodata:000000000000680A                 db    0
.rodata:000000000000680B                 db    0
.rodata:000000000000680C                 db    3
.rodata:000000000000680D                 db    0
.rodata:000000000000680E                 db    0
.rodata:000000000000680F                 db    0
.rodata:0000000000006810                 db    4
.rodata:0000000000006811                 db    0
.rodata:0000000000006812                 db    0
.rodata:0000000000006813                 db    0
.rodata:0000000000006814                 db    5
.rodata:0000000000006815                 db    0
.rodata:0000000000006816                 db    0
.rodata:0000000000006817                 db    0
.rodata:0000000000006818                 db    6
.rodata:0000000000006819                 db    0
.rodata:000000000000681A                 db    0
.rodata:000000000000681B                 db    0
.rodata:000000000000681C                 db    7
.rodata:000000000000681D                 db    0
.rodata:000000000000681E                 db    0
.rodata:000000000000681F                 db    0
.rodata:0000000000006820                 db    8
.rodata:0000000000006821                 db    0
.rodata:0000000000006822                 db    0
.rodata:0000000000006823                 db    0
.rodata:0000000000006824                 db    9
.rodata:0000000000006825                 db    0
.rodata:0000000000006826                 db    0
.rodata:0000000000006827                 db    0
.rodata:0000000000006828 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006834 aSS_1           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000683B ; const char aC_0[]
.rodata:000000000000683B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4EDC↑o
.rodata:000000000000683F ; const char aWrittenByS[]
.rodata:000000000000683F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000683F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000684F ; const char aWrittenBySAndS[]
.rodata:000000000000684F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000684F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006866 ; const char aWrittenBySSAnd[]
.rodata:0000000000006866 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006866                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006882 ; const char aReportBugsToS[]
.rodata:0000000000006882 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006882                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006897 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006897                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000068AD ; const char aSHomePageS[]
.rodata:00000000000068AD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000068AD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000068C1                 align 8
.rodata:00000000000068C8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000068C8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000068C8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000068C8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000068C8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000068C8                 db '.',0Ah
.rodata:00000000000068C8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000068C8                 db 0Ah,0
.rodata:0000000000006994                 align 8
.rodata:0000000000006998 ; const char aWrittenBySSSAn[]
.rodata:0000000000006998 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006998                                         ; DATA XREF: version_etc_arn:loc_5130↑o
.rodata:0000000000006998                 db 'and %s.',0Ah,0
.rodata:00000000000069B8 ; const char aWrittenBySSSSA[]
.rodata:00000000000069B8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000069B8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000069B8                 db '%s, and %s.',0Ah,0
.rodata:00000000000069DC                 align 20h
.rodata:00000000000069E0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000069E0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000069E0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000069E0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006A08 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006A08 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006A08                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006A08                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006A34                 align 8
.rodata:0000000000006A38 ; const char aWrittenBySSSSS[]
.rodata:0000000000006A38 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006A38                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006A38                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006A38                 db 'and %s.',0Ah,0
.rodata:0000000000006A68 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006A68 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006A68                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006A68                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006A68                 db '%s, and %s.',0Ah,0
.rodata:0000000000006A9C                 align 20h
.rodata:0000000000006AA0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006AA0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000006AA0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006AA0                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000006ADC                 align 20h
.rodata:0000000000006AE0 ; const char aGeneralHelpUsi[]
.rodata:0000000000006AE0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000006AE0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000006AE0                 db 0
.rodata:0000000000006B21                 align 8
.rodata:0000000000006B28 jpt_4F44        dd offset loc_4FC6 - 6B28h
.rodata:0000000000006B28                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006B28                                         ; version_etc_arn+9D↑r
.rodata:0000000000006B28                 dd offset loc_5058 - 6B28h ; jump table for switch statement
.rodata:0000000000006B28                 dd offset loc_5098 - 6B28h
.rodata:0000000000006B28                 dd offset loc_50E0 - 6B28h
.rodata:0000000000006B28                 dd offset loc_5130 - 6B28h
.rodata:0000000000006B28                 dd offset loc_5188 - 6B28h
.rodata:0000000000006B28                 dd offset loc_51B8 - 6B28h
.rodata:0000000000006B28                 dd offset loc_5220 - 6B28h
.rodata:0000000000006B28                 dd offset loc_4F50 - 6B28h
.rodata:0000000000006B28                 dd offset loc_5000 - 6B28h
.rodata:0000000000006B50                 align 20h
.rodata:0000000000006B60                 public version_etc_copyright
.rodata:0000000000006B60 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006B60                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000006B8F ; const char aMemoryExhauste[]
.rodata:0000000000006B8F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000006BA0 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000006BA0                                         ; locale_charset:loc_5BA0↑o
.rodata:0000000000006BA0 _rodata         ends
.rodata:0000000000006BA0
LOAD:0000000000006BA6 ; ===========================================================================
LOAD:0000000000006BA6
LOAD:0000000000006BA6 ; Segment type: Pure code
LOAD:0000000000006BA6 ; Segment permissions: Read/Execute
LOAD:0000000000006BA6 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006BA6                 assume cs:LOAD
LOAD:0000000000006BA6                 ;org 6BA6h
LOAD:0000000000006BA6                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006BA6                 align 8
LOAD:0000000000006BA6 LOAD            ends
LOAD:0000000000006BA6
.eh_frame_hdr:0000000000006BA8 ; ===========================================================================
.eh_frame_hdr:0000000000006BA8
.eh_frame_hdr:0000000000006BA8 ; Segment type: Pure data
.eh_frame_hdr:0000000000006BA8 ; Segment permissions: Read
.eh_frame_hdr:0000000000006BA8 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000006BA8                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000006BA8                 ;org 6BA8h
.eh_frame_hdr:0000000000006BA8 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000006BA9                 db  1Bh
.eh_frame_hdr:0000000000006BAA                 db    3
.eh_frame_hdr:0000000000006BAB                 db  3Bh ; ;
.eh_frame_hdr:0000000000006BAC                 db  84h
.eh_frame_hdr:0000000000006BAD                 db    2
.eh_frame_hdr:0000000000006BAE                 db    0
.eh_frame_hdr:0000000000006BAF                 db    0
.eh_frame_hdr:0000000000006BB0                 db  4Fh ; O
.eh_frame_hdr:0000000000006BB1                 db    0
.eh_frame_hdr:0000000000006BB2                 db    0
.eh_frame_hdr:0000000000006BB3                 db    0
.eh_frame_hdr:0000000000006BB4                 db  18h
.eh_frame_hdr:0000000000006BB5                 db 0ABh
.eh_frame_hdr:0000000000006BB6                 db 0FFh
.eh_frame_hdr:0000000000006BB7                 db 0FFh
.eh_frame_hdr:0000000000006BB8                 db 0D0h
.eh_frame_hdr:0000000000006BB9                 db    2
.eh_frame_hdr:0000000000006BBA                 db    0
.eh_frame_hdr:0000000000006BBB                 db    0
.eh_frame_hdr:0000000000006BBC                 db    8
.eh_frame_hdr:0000000000006BBD                 db 0AFh
.eh_frame_hdr:0000000000006BBE                 db 0FFh
.eh_frame_hdr:0000000000006BBF                 db 0FFh
.eh_frame_hdr:0000000000006BC0                 db 0F8h
.eh_frame_hdr:0000000000006BC1                 db    2
.eh_frame_hdr:0000000000006BC2                 db    0
.eh_frame_hdr:0000000000006BC3                 db    0
.eh_frame_hdr:0000000000006BC4                 db  18h
.eh_frame_hdr:0000000000006BC5                 db 0AFh
.eh_frame_hdr:0000000000006BC6                 db 0FFh
.eh_frame_hdr:0000000000006BC7                 db 0FFh
.eh_frame_hdr:0000000000006BC8                 db  0Ch
.eh_frame_hdr:0000000000006BC9                 db    4
.eh_frame_hdr:0000000000006BCA                 db    0
.eh_frame_hdr:0000000000006BCB                 db    0
.eh_frame_hdr:0000000000006BCC                 db  18h
.eh_frame_hdr:0000000000006BCD                 db 0B4h
.eh_frame_hdr:0000000000006BCE                 db 0FFh
.eh_frame_hdr:0000000000006BCF                 db 0FFh
.eh_frame_hdr:0000000000006BD0                 db 0A0h
.eh_frame_hdr:0000000000006BD1                 db    2
.eh_frame_hdr:0000000000006BD2                 db    0
.eh_frame_hdr:0000000000006BD3                 db    0
.eh_frame_hdr:0000000000006BD4                 db  28h ; (
.eh_frame_hdr:0000000000006BD5                 db 0B5h
.eh_frame_hdr:0000000000006BD6                 db 0FFh
.eh_frame_hdr:0000000000006BD7                 db 0FFh
.eh_frame_hdr:0000000000006BD8                 db  10h
.eh_frame_hdr:0000000000006BD9                 db    3
.eh_frame_hdr:0000000000006BDA                 db    0
.eh_frame_hdr:0000000000006BDB                 db    0
.eh_frame_hdr:0000000000006BDC                 db  58h ; X
.eh_frame_hdr:0000000000006BDD                 db 0B6h
.eh_frame_hdr:0000000000006BDE                 db 0FFh
.eh_frame_hdr:0000000000006BDF                 db 0FFh
.eh_frame_hdr:0000000000006BE0                 db  50h ; P
.eh_frame_hdr:0000000000006BE1                 db    3
.eh_frame_hdr:0000000000006BE2                 db    0
.eh_frame_hdr:0000000000006BE3                 db    0
.eh_frame_hdr:0000000000006BE4                 db  58h ; X
.eh_frame_hdr:0000000000006BE5                 db 0BAh
.eh_frame_hdr:0000000000006BE6                 db 0FFh
.eh_frame_hdr:0000000000006BE7                 db 0FFh
.eh_frame_hdr:0000000000006BE8                 db  90h
.eh_frame_hdr:0000000000006BE9                 db    3
.eh_frame_hdr:0000000000006BEA                 db    0
.eh_frame_hdr:0000000000006BEB                 db    0
.eh_frame_hdr:0000000000006BEC                 db  98h
.eh_frame_hdr:0000000000006BED                 db 0BFh
.eh_frame_hdr:0000000000006BEE                 db 0FFh
.eh_frame_hdr:0000000000006BEF                 db 0FFh
.eh_frame_hdr:0000000000006BF0                 db 0E0h
.eh_frame_hdr:0000000000006BF1                 db    3
.eh_frame_hdr:0000000000006BF2                 db    0
.eh_frame_hdr:0000000000006BF3                 db    0
.eh_frame_hdr:0000000000006BF4                 db  28h ; (
.eh_frame_hdr:0000000000006BF5                 db 0C3h
.eh_frame_hdr:0000000000006BF6                 db 0FFh
.eh_frame_hdr:0000000000006BF7                 db 0FFh
.eh_frame_hdr:0000000000006BF8                 db  68h ; h
.eh_frame_hdr:0000000000006BF9                 db    4
.eh_frame_hdr:0000000000006BFA                 db    0
.eh_frame_hdr:0000000000006BFB                 db    0
.eh_frame_hdr:0000000000006BFC                 db 0D8h
.eh_frame_hdr:0000000000006BFD                 db 0C3h
.eh_frame_hdr:0000000000006BFE                 db 0FFh
.eh_frame_hdr:0000000000006BFF                 db 0FFh
.eh_frame_hdr:0000000000006C00                 db  9Ch
.eh_frame_hdr:0000000000006C01                 db    4
.eh_frame_hdr:0000000000006C02                 db    0
.eh_frame_hdr:0000000000006C03                 db    0
.eh_frame_hdr:0000000000006C04                 db 0E8h
.eh_frame_hdr:0000000000006C05                 db 0C3h
.eh_frame_hdr:0000000000006C06                 db 0FFh
.eh_frame_hdr:0000000000006C07                 db 0FFh
.eh_frame_hdr:0000000000006C08                 db 0B0h
.eh_frame_hdr:0000000000006C09                 db    4
.eh_frame_hdr:0000000000006C0A                 db    0
.eh_frame_hdr:0000000000006C0B                 db    0
.eh_frame_hdr:0000000000006C0C                 db 0F8h
.eh_frame_hdr:0000000000006C0D                 db 0C3h
.eh_frame_hdr:0000000000006C0E                 db 0FFh
.eh_frame_hdr:0000000000006C0F                 db 0FFh
.eh_frame_hdr:0000000000006C10                 db 0C8h
.eh_frame_hdr:0000000000006C11                 db    4
.eh_frame_hdr:0000000000006C12                 db    0
.eh_frame_hdr:0000000000006C13                 db    0
.eh_frame_hdr:0000000000006C14                 db    8
.eh_frame_hdr:0000000000006C15                 db 0C4h
.eh_frame_hdr:0000000000006C16                 db 0FFh
.eh_frame_hdr:0000000000006C17                 db 0FFh
.eh_frame_hdr:0000000000006C18                 db 0DCh
.eh_frame_hdr:0000000000006C19                 db    4
.eh_frame_hdr:0000000000006C1A                 db    0
.eh_frame_hdr:0000000000006C1B                 db    0
.eh_frame_hdr:0000000000006C1C                 db  18h
.eh_frame_hdr:0000000000006C1D                 db 0C4h
.eh_frame_hdr:0000000000006C1E                 db 0FFh
.eh_frame_hdr:0000000000006C1F                 db 0FFh
.eh_frame_hdr:0000000000006C20                 db 0F0h
.eh_frame_hdr:0000000000006C21                 db    4
.eh_frame_hdr:0000000000006C22                 db    0
.eh_frame_hdr:0000000000006C23                 db    0
.eh_frame_hdr:0000000000006C24                 db 0C8h
.eh_frame_hdr:0000000000006C25                 db 0C4h
.eh_frame_hdr:0000000000006C26                 db 0FFh
.eh_frame_hdr:0000000000006C27                 db 0FFh
.eh_frame_hdr:0000000000006C28                 db  20h
.eh_frame_hdr:0000000000006C29                 db    5
.eh_frame_hdr:0000000000006C2A                 db    0
.eh_frame_hdr:0000000000006C2B                 db    0
.eh_frame_hdr:0000000000006C2C                 db  28h ; (
.eh_frame_hdr:0000000000006C2D                 db 0C5h
.eh_frame_hdr:0000000000006C2E                 db 0FFh
.eh_frame_hdr:0000000000006C2F                 db 0FFh
.eh_frame_hdr:0000000000006C30                 db  40h ; @
.eh_frame_hdr:0000000000006C31                 db    5
.eh_frame_hdr:0000000000006C32                 db    0
.eh_frame_hdr:0000000000006C33                 db    0
.eh_frame_hdr:0000000000006C34                 db 0C8h
.eh_frame_hdr:0000000000006C35                 db 0C5h
.eh_frame_hdr:0000000000006C36                 db 0FFh
.eh_frame_hdr:0000000000006C37                 db 0FFh
.eh_frame_hdr:0000000000006C38                 db  58h ; X
.eh_frame_hdr:0000000000006C39                 db    5
.eh_frame_hdr:0000000000006C3A                 db    0
.eh_frame_hdr:0000000000006C3B                 db    0
.eh_frame_hdr:0000000000006C3C                 db  68h ; h
.eh_frame_hdr:0000000000006C3D                 db 0C6h
.eh_frame_hdr:0000000000006C3E                 db 0FFh
.eh_frame_hdr:0000000000006C3F                 db 0FFh
.eh_frame_hdr:0000000000006C40                 db  78h ; x
.eh_frame_hdr:0000000000006C41                 db    5
.eh_frame_hdr:0000000000006C42                 db    0
.eh_frame_hdr:0000000000006C43                 db    0
.eh_frame_hdr:0000000000006C44                 db  58h ; X
.eh_frame_hdr:0000000000006C45                 db 0C7h
.eh_frame_hdr:0000000000006C46                 db 0FFh
.eh_frame_hdr:0000000000006C47                 db 0FFh
.eh_frame_hdr:0000000000006C48                 db 0BCh
.eh_frame_hdr:0000000000006C49                 db    5
.eh_frame_hdr:0000000000006C4A                 db    0
.eh_frame_hdr:0000000000006C4B                 db    0
.eh_frame_hdr:0000000000006C4C                 db  98h
.eh_frame_hdr:0000000000006C4D                 db 0D9h
.eh_frame_hdr:0000000000006C4E                 db 0FFh
.eh_frame_hdr:0000000000006C4F                 db 0FFh
.eh_frame_hdr:0000000000006C50                 db  34h ; 4
.eh_frame_hdr:0000000000006C51                 db    6
.eh_frame_hdr:0000000000006C52                 db    0
.eh_frame_hdr:0000000000006C53                 db    0
.eh_frame_hdr:0000000000006C54                 db  48h ; H
.eh_frame_hdr:0000000000006C55                 db 0DBh
.eh_frame_hdr:0000000000006C56                 db 0FFh
.eh_frame_hdr:0000000000006C57                 db 0FFh
.eh_frame_hdr:0000000000006C58                 db 0A0h
.eh_frame_hdr:0000000000006C59                 db    6
.eh_frame_hdr:0000000000006C5A                 db    0
.eh_frame_hdr:0000000000006C5B                 db    0
.eh_frame_hdr:0000000000006C5C                 db  88h
.eh_frame_hdr:0000000000006C5D                 db 0DBh
.eh_frame_hdr:0000000000006C5E                 db 0FFh
.eh_frame_hdr:0000000000006C5F                 db 0FFh
.eh_frame_hdr:0000000000006C60                 db 0CCh
.eh_frame_hdr:0000000000006C61                 db    6
.eh_frame_hdr:0000000000006C62                 db    0
.eh_frame_hdr:0000000000006C63                 db    0
.eh_frame_hdr:0000000000006C64                 db 0A8h
.eh_frame_hdr:0000000000006C65                 db 0DBh
.eh_frame_hdr:0000000000006C66                 db 0FFh
.eh_frame_hdr:0000000000006C67                 db 0FFh
.eh_frame_hdr:0000000000006C68                 db 0E0h
.eh_frame_hdr:0000000000006C69                 db    6
.eh_frame_hdr:0000000000006C6A                 db    0
.eh_frame_hdr:0000000000006C6B                 db    0
.eh_frame_hdr:0000000000006C6C                 db 0C8h
.eh_frame_hdr:0000000000006C6D                 db 0DBh
.eh_frame_hdr:0000000000006C6E                 db 0FFh
.eh_frame_hdr:0000000000006C6F                 db 0FFh
.eh_frame_hdr:0000000000006C70                 db 0F4h
.eh_frame_hdr:0000000000006C71                 db    6
.eh_frame_hdr:0000000000006C72                 db    0
.eh_frame_hdr:0000000000006C73                 db    0
.eh_frame_hdr:0000000000006C74                 db    8
.eh_frame_hdr:0000000000006C75                 db 0DCh
.eh_frame_hdr:0000000000006C76                 db 0FFh
.eh_frame_hdr:0000000000006C77                 db 0FFh
.eh_frame_hdr:0000000000006C78                 db    8
.eh_frame_hdr:0000000000006C79                 db    7
.eh_frame_hdr:0000000000006C7A                 db    0
.eh_frame_hdr:0000000000006C7B                 db    0
.eh_frame_hdr:0000000000006C7C                 db  28h ; (
.eh_frame_hdr:0000000000006C7D                 db 0DCh
.eh_frame_hdr:0000000000006C7E                 db 0FFh
.eh_frame_hdr:0000000000006C7F                 db 0FFh
.eh_frame_hdr:0000000000006C80                 db  1Ch
.eh_frame_hdr:0000000000006C81                 db    7
.eh_frame_hdr:0000000000006C82                 db    0
.eh_frame_hdr:0000000000006C83                 db    0
.eh_frame_hdr:0000000000006C84                 db  58h ; X
.eh_frame_hdr:0000000000006C85                 db 0DCh
.eh_frame_hdr:0000000000006C86                 db 0FFh
.eh_frame_hdr:0000000000006C87                 db 0FFh
.eh_frame_hdr:0000000000006C88                 db  30h ; 0
.eh_frame_hdr:0000000000006C89                 db    7
.eh_frame_hdr:0000000000006C8A                 db    0
.eh_frame_hdr:0000000000006C8B                 db    0
.eh_frame_hdr:0000000000006C8C                 db 0D8h
.eh_frame_hdr:0000000000006C8D                 db 0DCh
.eh_frame_hdr:0000000000006C8E                 db 0FFh
.eh_frame_hdr:0000000000006C8F                 db 0FFh
.eh_frame_hdr:0000000000006C90                 db  84h
.eh_frame_hdr:0000000000006C91                 db    7
.eh_frame_hdr:0000000000006C92                 db    0
.eh_frame_hdr:0000000000006C93                 db    0
.eh_frame_hdr:0000000000006C94                 db 0C8h
.eh_frame_hdr:0000000000006C95                 db 0DDh
.eh_frame_hdr:0000000000006C96                 db 0FFh
.eh_frame_hdr:0000000000006C97                 db 0FFh
.eh_frame_hdr:0000000000006C98                 db 0F0h
.eh_frame_hdr:0000000000006C99                 db    7
.eh_frame_hdr:0000000000006C9A                 db    0
.eh_frame_hdr:0000000000006C9B                 db    0
.eh_frame_hdr:0000000000006C9C                 db 0D8h
.eh_frame_hdr:0000000000006C9D                 db 0DDh
.eh_frame_hdr:0000000000006C9E                 db 0FFh
.eh_frame_hdr:0000000000006C9F                 db 0FFh
.eh_frame_hdr:0000000000006CA0                 db    4
.eh_frame_hdr:0000000000006CA1                 db    8
.eh_frame_hdr:0000000000006CA2                 db    0
.eh_frame_hdr:0000000000006CA3                 db    0
.eh_frame_hdr:0000000000006CA4                 db  78h ; x
.eh_frame_hdr:0000000000006CA5                 db 0DEh
.eh_frame_hdr:0000000000006CA6                 db 0FFh
.eh_frame_hdr:0000000000006CA7                 db 0FFh
.eh_frame_hdr:0000000000006CA8                 db  30h ; 0
.eh_frame_hdr:0000000000006CA9                 db    8
.eh_frame_hdr:0000000000006CAA                 db    0
.eh_frame_hdr:0000000000006CAB                 db    0
.eh_frame_hdr:0000000000006CAC                 db  98h
.eh_frame_hdr:0000000000006CAD                 db 0DEh
.eh_frame_hdr:0000000000006CAE                 db 0FFh
.eh_frame_hdr:0000000000006CAF                 db 0FFh
.eh_frame_hdr:0000000000006CB0                 db  44h ; D
.eh_frame_hdr:0000000000006CB1                 db    8
.eh_frame_hdr:0000000000006CB2                 db    0
.eh_frame_hdr:0000000000006CB3                 db    0
.eh_frame_hdr:0000000000006CB4                 db 0A8h
.eh_frame_hdr:0000000000006CB5                 db 0DEh
.eh_frame_hdr:0000000000006CB6                 db 0FFh
.eh_frame_hdr:0000000000006CB7                 db 0FFh
.eh_frame_hdr:0000000000006CB8                 db  58h ; X
.eh_frame_hdr:0000000000006CB9                 db    8
.eh_frame_hdr:0000000000006CBA                 db    0
.eh_frame_hdr:0000000000006CBB                 db    0
.eh_frame_hdr:0000000000006CBC                 db 0C8h
.eh_frame_hdr:0000000000006CBD                 db 0DEh
.eh_frame_hdr:0000000000006CBE                 db 0FFh
.eh_frame_hdr:0000000000006CBF                 db 0FFh
.eh_frame_hdr:0000000000006CC0                 db  6Ch ; l
.eh_frame_hdr:0000000000006CC1                 db    8
.eh_frame_hdr:0000000000006CC2                 db    0
.eh_frame_hdr:0000000000006CC3                 db    0
.eh_frame_hdr:0000000000006CC4                 db 0E8h
.eh_frame_hdr:0000000000006CC5                 db 0DEh
.eh_frame_hdr:0000000000006CC6                 db 0FFh
.eh_frame_hdr:0000000000006CC7                 db 0FFh
.eh_frame_hdr:0000000000006CC8                 db  80h
.eh_frame_hdr:0000000000006CC9                 db    8
.eh_frame_hdr:0000000000006CCA                 db    0
.eh_frame_hdr:0000000000006CCB                 db    0
.eh_frame_hdr:0000000000006CCC                 db  78h ; x
.eh_frame_hdr:0000000000006CCD                 db 0DFh
.eh_frame_hdr:0000000000006CCE                 db 0FFh
.eh_frame_hdr:0000000000006CCF                 db 0FFh
.eh_frame_hdr:0000000000006CD0                 db  9Ch
.eh_frame_hdr:0000000000006CD1                 db    8
.eh_frame_hdr:0000000000006CD2                 db    0
.eh_frame_hdr:0000000000006CD3                 db    0
.eh_frame_hdr:0000000000006CD4                 db    8
.eh_frame_hdr:0000000000006CD5                 db 0E0h
.eh_frame_hdr:0000000000006CD6                 db 0FFh
.eh_frame_hdr:0000000000006CD7                 db 0FFh
.eh_frame_hdr:0000000000006CD8                 db 0B8h
.eh_frame_hdr:0000000000006CD9                 db    8
.eh_frame_hdr:0000000000006CDA                 db    0
.eh_frame_hdr:0000000000006CDB                 db    0
.eh_frame_hdr:0000000000006CDC                 db  18h
.eh_frame_hdr:0000000000006CDD                 db 0E0h
.eh_frame_hdr:0000000000006CDE                 db 0FFh
.eh_frame_hdr:0000000000006CDF                 db 0FFh
.eh_frame_hdr:0000000000006CE0                 db 0CCh
.eh_frame_hdr:0000000000006CE1                 db    8
.eh_frame_hdr:0000000000006CE2                 db    0
.eh_frame_hdr:0000000000006CE3                 db    0
.eh_frame_hdr:0000000000006CE4                 db  28h ; (
.eh_frame_hdr:0000000000006CE5                 db 0E0h
.eh_frame_hdr:0000000000006CE6                 db 0FFh
.eh_frame_hdr:0000000000006CE7                 db 0FFh
.eh_frame_hdr:0000000000006CE8                 db 0E0h
.eh_frame_hdr:0000000000006CE9                 db    8
.eh_frame_hdr:0000000000006CEA                 db    0
.eh_frame_hdr:0000000000006CEB                 db    0
.eh_frame_hdr:0000000000006CEC                 db 0C8h
.eh_frame_hdr:0000000000006CED                 db 0E0h
.eh_frame_hdr:0000000000006CEE                 db 0FFh
.eh_frame_hdr:0000000000006CEF                 db 0FFh
.eh_frame_hdr:0000000000006CF0                 db 0FCh
.eh_frame_hdr:0000000000006CF1                 db    8
.eh_frame_hdr:0000000000006CF2                 db    0
.eh_frame_hdr:0000000000006CF3                 db    0
.eh_frame_hdr:0000000000006CF4                 db 0D8h
.eh_frame_hdr:0000000000006CF5                 db 0E0h
.eh_frame_hdr:0000000000006CF6                 db 0FFh
.eh_frame_hdr:0000000000006CF7                 db 0FFh
.eh_frame_hdr:0000000000006CF8                 db  10h
.eh_frame_hdr:0000000000006CF9                 db    9
.eh_frame_hdr:0000000000006CFA                 db    0
.eh_frame_hdr:0000000000006CFB                 db    0
.eh_frame_hdr:0000000000006CFC                 db 0F8h
.eh_frame_hdr:0000000000006CFD                 db 0E0h
.eh_frame_hdr:0000000000006CFE                 db 0FFh
.eh_frame_hdr:0000000000006CFF                 db 0FFh
.eh_frame_hdr:0000000000006D00                 db  24h ; $
.eh_frame_hdr:0000000000006D01                 db    9
.eh_frame_hdr:0000000000006D02                 db    0
.eh_frame_hdr:0000000000006D03                 db    0
.eh_frame_hdr:0000000000006D04                 db    8
.eh_frame_hdr:0000000000006D05                 db 0E1h
.eh_frame_hdr:0000000000006D06                 db 0FFh
.eh_frame_hdr:0000000000006D07                 db 0FFh
.eh_frame_hdr:0000000000006D08                 db  38h ; 8
.eh_frame_hdr:0000000000006D09                 db    9
.eh_frame_hdr:0000000000006D0A                 db    0
.eh_frame_hdr:0000000000006D0B                 db    0
.eh_frame_hdr:0000000000006D0C                 db  98h
.eh_frame_hdr:0000000000006D0D                 db 0E1h
.eh_frame_hdr:0000000000006D0E                 db 0FFh
.eh_frame_hdr:0000000000006D0F                 db 0FFh
.eh_frame_hdr:0000000000006D10                 db  54h ; T
.eh_frame_hdr:0000000000006D11                 db    9
.eh_frame_hdr:0000000000006D12                 db    0
.eh_frame_hdr:0000000000006D13                 db    0
.eh_frame_hdr:0000000000006D14                 db  38h ; 8
.eh_frame_hdr:0000000000006D15                 db 0E2h
.eh_frame_hdr:0000000000006D16                 db 0FFh
.eh_frame_hdr:0000000000006D17                 db 0FFh
.eh_frame_hdr:0000000000006D18                 db  70h ; p
.eh_frame_hdr:0000000000006D19                 db    9
.eh_frame_hdr:0000000000006D1A                 db    0
.eh_frame_hdr:0000000000006D1B                 db    0
.eh_frame_hdr:0000000000006D1C                 db  48h ; H
.eh_frame_hdr:0000000000006D1D                 db 0E2h
.eh_frame_hdr:0000000000006D1E                 db 0FFh
.eh_frame_hdr:0000000000006D1F                 db 0FFh
.eh_frame_hdr:0000000000006D20                 db  84h
.eh_frame_hdr:0000000000006D21                 db    9
.eh_frame_hdr:0000000000006D22                 db    0
.eh_frame_hdr:0000000000006D23                 db    0
.eh_frame_hdr:0000000000006D24                 db  68h ; h
.eh_frame_hdr:0000000000006D25                 db 0E2h
.eh_frame_hdr:0000000000006D26                 db 0FFh
.eh_frame_hdr:0000000000006D27                 db 0FFh
.eh_frame_hdr:0000000000006D28                 db  98h
.eh_frame_hdr:0000000000006D29                 db    9
.eh_frame_hdr:0000000000006D2A                 db    0
.eh_frame_hdr:0000000000006D2B                 db    0
.eh_frame_hdr:0000000000006D2C                 db  88h
.eh_frame_hdr:0000000000006D2D                 db 0E2h
.eh_frame_hdr:0000000000006D2E                 db 0FFh
.eh_frame_hdr:0000000000006D2F                 db 0FFh
.eh_frame_hdr:0000000000006D30                 db 0ACh
.eh_frame_hdr:0000000000006D31                 db    9
.eh_frame_hdr:0000000000006D32                 db    0
.eh_frame_hdr:0000000000006D33                 db    0
.eh_frame_hdr:0000000000006D34                 db  98h
.eh_frame_hdr:0000000000006D35                 db 0E2h
.eh_frame_hdr:0000000000006D36                 db 0FFh
.eh_frame_hdr:0000000000006D37                 db 0FFh
.eh_frame_hdr:0000000000006D38                 db 0C0h
.eh_frame_hdr:0000000000006D39                 db    9
.eh_frame_hdr:0000000000006D3A                 db    0
.eh_frame_hdr:0000000000006D3B                 db    0
.eh_frame_hdr:0000000000006D3C                 db 0B8h
.eh_frame_hdr:0000000000006D3D                 db 0E2h
.eh_frame_hdr:0000000000006D3E                 db 0FFh
.eh_frame_hdr:0000000000006D3F                 db 0FFh
.eh_frame_hdr:0000000000006D40                 db 0D4h
.eh_frame_hdr:0000000000006D41                 db    9
.eh_frame_hdr:0000000000006D42                 db    0
.eh_frame_hdr:0000000000006D43                 db    0
.eh_frame_hdr:0000000000006D44                 db 0D8h
.eh_frame_hdr:0000000000006D45                 db 0E2h
.eh_frame_hdr:0000000000006D46                 db 0FFh
.eh_frame_hdr:0000000000006D47                 db 0FFh
.eh_frame_hdr:0000000000006D48                 db 0E8h
.eh_frame_hdr:0000000000006D49                 db    9
.eh_frame_hdr:0000000000006D4A                 db    0
.eh_frame_hdr:0000000000006D4B                 db    0
.eh_frame_hdr:0000000000006D4C                 db 0F8h
.eh_frame_hdr:0000000000006D4D                 db 0E2h
.eh_frame_hdr:0000000000006D4E                 db 0FFh
.eh_frame_hdr:0000000000006D4F                 db 0FFh
.eh_frame_hdr:0000000000006D50                 db    0
.eh_frame_hdr:0000000000006D51                 db  0Ah
.eh_frame_hdr:0000000000006D52                 db    0
.eh_frame_hdr:0000000000006D53                 db    0
.eh_frame_hdr:0000000000006D54                 db  18h
.eh_frame_hdr:0000000000006D55                 db 0E7h
.eh_frame_hdr:0000000000006D56                 db 0FFh
.eh_frame_hdr:0000000000006D57                 db 0FFh
.eh_frame_hdr:0000000000006D58                 db  14h
.eh_frame_hdr:0000000000006D59                 db  0Bh
.eh_frame_hdr:0000000000006D5A                 db    0
.eh_frame_hdr:0000000000006D5B                 db    0
.eh_frame_hdr:0000000000006D5C                 db  38h ; 8
.eh_frame_hdr:0000000000006D5D                 db 0E7h
.eh_frame_hdr:0000000000006D5E                 db 0FFh
.eh_frame_hdr:0000000000006D5F                 db 0FFh
.eh_frame_hdr:0000000000006D60                 db  28h ; (
.eh_frame_hdr:0000000000006D61                 db  0Bh
.eh_frame_hdr:0000000000006D62                 db    0
.eh_frame_hdr:0000000000006D63                 db    0
.eh_frame_hdr:0000000000006D64                 db 0B8h
.eh_frame_hdr:0000000000006D65                 db 0E7h
.eh_frame_hdr:0000000000006D66                 db 0FFh
.eh_frame_hdr:0000000000006D67                 db 0FFh
.eh_frame_hdr:0000000000006D68                 db  44h ; D
.eh_frame_hdr:0000000000006D69                 db  0Bh
.eh_frame_hdr:0000000000006D6A                 db    0
.eh_frame_hdr:0000000000006D6B                 db    0
.eh_frame_hdr:0000000000006D6C                 db  98h
.eh_frame_hdr:0000000000006D6D                 db 0E8h
.eh_frame_hdr:0000000000006D6E                 db 0FFh
.eh_frame_hdr:0000000000006D6F                 db 0FFh
.eh_frame_hdr:0000000000006D70                 db  70h ; p
.eh_frame_hdr:0000000000006D71                 db  0Bh
.eh_frame_hdr:0000000000006D72                 db    0
.eh_frame_hdr:0000000000006D73                 db    0
.eh_frame_hdr:0000000000006D74                 db  18h
.eh_frame_hdr:0000000000006D75                 db 0E9h
.eh_frame_hdr:0000000000006D76                 db 0FFh
.eh_frame_hdr:0000000000006D77                 db 0FFh
.eh_frame_hdr:0000000000006D78                 db  90h
.eh_frame_hdr:0000000000006D79                 db  0Bh
.eh_frame_hdr:0000000000006D7A                 db    0
.eh_frame_hdr:0000000000006D7B                 db    0
.eh_frame_hdr:0000000000006D7C                 db  38h ; 8
.eh_frame_hdr:0000000000006D7D                 db 0E9h
.eh_frame_hdr:0000000000006D7E                 db 0FFh
.eh_frame_hdr:0000000000006D7F                 db 0FFh
.eh_frame_hdr:0000000000006D80                 db 0ACh
.eh_frame_hdr:0000000000006D81                 db  0Bh
.eh_frame_hdr:0000000000006D82                 db    0
.eh_frame_hdr:0000000000006D83                 db    0
.eh_frame_hdr:0000000000006D84                 db  68h ; h
.eh_frame_hdr:0000000000006D85                 db 0E9h
.eh_frame_hdr:0000000000006D86                 db 0FFh
.eh_frame_hdr:0000000000006D87                 db 0FFh
.eh_frame_hdr:0000000000006D88                 db 0C0h
.eh_frame_hdr:0000000000006D89                 db  0Bh
.eh_frame_hdr:0000000000006D8A                 db    0
.eh_frame_hdr:0000000000006D8B                 db    0
.eh_frame_hdr:0000000000006D8C                 db  78h ; x
.eh_frame_hdr:0000000000006D8D                 db 0E9h
.eh_frame_hdr:0000000000006D8E                 db 0FFh
.eh_frame_hdr:0000000000006D8F                 db 0FFh
.eh_frame_hdr:0000000000006D90                 db 0D4h
.eh_frame_hdr:0000000000006D91                 db  0Bh
.eh_frame_hdr:0000000000006D92                 db    0
.eh_frame_hdr:0000000000006D93                 db    0
.eh_frame_hdr:0000000000006D94                 db 0B8h
.eh_frame_hdr:0000000000006D95                 db 0E9h
.eh_frame_hdr:0000000000006D96                 db 0FFh
.eh_frame_hdr:0000000000006D97                 db 0FFh
.eh_frame_hdr:0000000000006D98                 db 0F8h
.eh_frame_hdr:0000000000006D99                 db  0Bh
.eh_frame_hdr:0000000000006D9A                 db    0
.eh_frame_hdr:0000000000006D9B                 db    0
.eh_frame_hdr:0000000000006D9C                 db 0E8h
.eh_frame_hdr:0000000000006D9D                 db 0E9h
.eh_frame_hdr:0000000000006D9E                 db 0FFh
.eh_frame_hdr:0000000000006D9F                 db 0FFh
.eh_frame_hdr:0000000000006DA0                 db  0Ch
.eh_frame_hdr:0000000000006DA1                 db  0Ch
.eh_frame_hdr:0000000000006DA2                 db    0
.eh_frame_hdr:0000000000006DA3                 db    0
.eh_frame_hdr:0000000000006DA4                 db  78h ; x
.eh_frame_hdr:0000000000006DA5                 db 0EAh
.eh_frame_hdr:0000000000006DA6                 db 0FFh
.eh_frame_hdr:0000000000006DA7                 db 0FFh
.eh_frame_hdr:0000000000006DA8                 db  24h ; $
.eh_frame_hdr:0000000000006DA9                 db  0Ch
.eh_frame_hdr:0000000000006DAA                 db    0
.eh_frame_hdr:0000000000006DAB                 db    0
.eh_frame_hdr:0000000000006DAC                 db 0C8h
.eh_frame_hdr:0000000000006DAD                 db 0EAh
.eh_frame_hdr:0000000000006DAE                 db 0FFh
.eh_frame_hdr:0000000000006DAF                 db 0FFh
.eh_frame_hdr:0000000000006DB0                 db  3Ch ; <
.eh_frame_hdr:0000000000006DB1                 db  0Ch
.eh_frame_hdr:0000000000006DB2                 db    0
.eh_frame_hdr:0000000000006DB3                 db    0
.eh_frame_hdr:0000000000006DB4                 db 0E8h
.eh_frame_hdr:0000000000006DB5                 db 0EAh
.eh_frame_hdr:0000000000006DB6                 db 0FFh
.eh_frame_hdr:0000000000006DB7                 db 0FFh
.eh_frame_hdr:0000000000006DB8                 db  58h ; X
.eh_frame_hdr:0000000000006DB9                 db  0Ch
.eh_frame_hdr:0000000000006DBA                 db    0
.eh_frame_hdr:0000000000006DBB                 db    0
.eh_frame_hdr:0000000000006DBC                 db  18h
.eh_frame_hdr:0000000000006DBD                 db 0EBh
.eh_frame_hdr:0000000000006DBE                 db 0FFh
.eh_frame_hdr:0000000000006DBF                 db 0FFh
.eh_frame_hdr:0000000000006DC0                 db  74h ; t
.eh_frame_hdr:0000000000006DC1                 db  0Ch
.eh_frame_hdr:0000000000006DC2                 db    0
.eh_frame_hdr:0000000000006DC3                 db    0
.eh_frame_hdr:0000000000006DC4                 db  48h ; H
.eh_frame_hdr:0000000000006DC5                 db 0EBh
.eh_frame_hdr:0000000000006DC6                 db 0FFh
.eh_frame_hdr:0000000000006DC7                 db 0FFh
.eh_frame_hdr:0000000000006DC8                 db  9Ch
.eh_frame_hdr:0000000000006DC9                 db  0Ch
.eh_frame_hdr:0000000000006DCA                 db    0
.eh_frame_hdr:0000000000006DCB                 db    0
.eh_frame_hdr:0000000000006DCC                 db  68h ; h
.eh_frame_hdr:0000000000006DCD                 db 0EBh
.eh_frame_hdr:0000000000006DCE                 db 0FFh
.eh_frame_hdr:0000000000006DCF                 db 0FFh
.eh_frame_hdr:0000000000006DD0                 db 0B8h
.eh_frame_hdr:0000000000006DD1                 db  0Ch
.eh_frame_hdr:0000000000006DD2                 db    0
.eh_frame_hdr:0000000000006DD3                 db    0
.eh_frame_hdr:0000000000006DD4                 db 0A8h
.eh_frame_hdr:0000000000006DD5                 db 0EBh
.eh_frame_hdr:0000000000006DD6                 db 0FFh
.eh_frame_hdr:0000000000006DD7                 db 0FFh
.eh_frame_hdr:0000000000006DD8                 db 0D0h
.eh_frame_hdr:0000000000006DD9                 db  0Ch
.eh_frame_hdr:0000000000006DDA                 db    0
.eh_frame_hdr:0000000000006DDB                 db    0
.eh_frame_hdr:0000000000006DDC                 db  28h ; (
.eh_frame_hdr:0000000000006DDD                 db 0ECh
.eh_frame_hdr:0000000000006DDE                 db 0FFh
.eh_frame_hdr:0000000000006DDF                 db 0FFh
.eh_frame_hdr:0000000000006DE0                 db    8
.eh_frame_hdr:0000000000006DE1                 db  0Dh
.eh_frame_hdr:0000000000006DE2                 db    0
.eh_frame_hdr:0000000000006DE3                 db    0
.eh_frame_hdr:0000000000006DE4                 db  68h ; h
.eh_frame_hdr:0000000000006DE5                 db 0ECh
.eh_frame_hdr:0000000000006DE6                 db 0FFh
.eh_frame_hdr:0000000000006DE7                 db 0FFh
.eh_frame_hdr:0000000000006DE8                 db  28h ; (
.eh_frame_hdr:0000000000006DE9                 db  0Dh
.eh_frame_hdr:0000000000006DEA                 db    0
.eh_frame_hdr:0000000000006DEB                 db    0
.eh_frame_hdr:0000000000006DEC                 db 0C8h
.eh_frame_hdr:0000000000006DED                 db 0ECh
.eh_frame_hdr:0000000000006DEE                 db 0FFh
.eh_frame_hdr:0000000000006DEF                 db 0FFh
.eh_frame_hdr:0000000000006DF0                 db  58h ; X
.eh_frame_hdr:0000000000006DF1                 db  0Dh
.eh_frame_hdr:0000000000006DF2                 db    0
.eh_frame_hdr:0000000000006DF3                 db    0
.eh_frame_hdr:0000000000006DF4                 db  58h ; X
.eh_frame_hdr:0000000000006DF5                 db 0EDh
.eh_frame_hdr:0000000000006DF6                 db 0FFh
.eh_frame_hdr:0000000000006DF7                 db 0FFh
.eh_frame_hdr:0000000000006DF8                 db  98h
.eh_frame_hdr:0000000000006DF9                 db  0Dh
.eh_frame_hdr:0000000000006DFA                 db    0
.eh_frame_hdr:0000000000006DFB                 db    0
.eh_frame_hdr:0000000000006DFC                 db 0B8h
.eh_frame_hdr:0000000000006DFD                 db 0EDh
.eh_frame_hdr:0000000000006DFE                 db 0FFh
.eh_frame_hdr:0000000000006DFF                 db 0FFh
.eh_frame_hdr:0000000000006E00                 db 0C4h
.eh_frame_hdr:0000000000006E01                 db  0Dh
.eh_frame_hdr:0000000000006E02                 db    0
.eh_frame_hdr:0000000000006E03                 db    0
.eh_frame_hdr:0000000000006E04                 db  48h ; H
.eh_frame_hdr:0000000000006E05                 db 0EFh
.eh_frame_hdr:0000000000006E06                 db 0FFh
.eh_frame_hdr:0000000000006E07                 db 0FFh
.eh_frame_hdr:0000000000006E08                 db  10h
.eh_frame_hdr:0000000000006E09                 db  0Eh
.eh_frame_hdr:0000000000006E0A                 db    0
.eh_frame_hdr:0000000000006E0B                 db    0
.eh_frame_hdr:0000000000006E0C                 db 0C8h
.eh_frame_hdr:0000000000006E0D                 db 0EFh
.eh_frame_hdr:0000000000006E0E                 db 0FFh
.eh_frame_hdr:0000000000006E0F                 db 0FFh
.eh_frame_hdr:0000000000006E10                 db  60h ; `
.eh_frame_hdr:0000000000006E11                 db  0Eh
.eh_frame_hdr:0000000000006E12                 db    0
.eh_frame_hdr:0000000000006E13                 db    0
.eh_frame_hdr:0000000000006E14                 db    8
.eh_frame_hdr:0000000000006E15                 db 0F0h
.eh_frame_hdr:0000000000006E16                 db 0FFh
.eh_frame_hdr:0000000000006E17                 db 0FFh
.eh_frame_hdr:0000000000006E18                 db  80h
.eh_frame_hdr:0000000000006E19                 db  0Eh
.eh_frame_hdr:0000000000006E1A                 db    0
.eh_frame_hdr:0000000000006E1B                 db    0
.eh_frame_hdr:0000000000006E1C                 db  78h ; x
.eh_frame_hdr:0000000000006E1D                 db 0F0h
.eh_frame_hdr:0000000000006E1E                 db 0FFh
.eh_frame_hdr:0000000000006E1F                 db 0FFh
.eh_frame_hdr:0000000000006E20                 db 0C8h
.eh_frame_hdr:0000000000006E21                 db  0Eh
.eh_frame_hdr:0000000000006E22                 db    0
.eh_frame_hdr:0000000000006E23                 db    0
.eh_frame_hdr:0000000000006E24                 db  88h
.eh_frame_hdr:0000000000006E25                 db 0F0h
.eh_frame_hdr:0000000000006E26                 db 0FFh
.eh_frame_hdr:0000000000006E27                 db 0FFh
.eh_frame_hdr:0000000000006E28                 db 0E0h
.eh_frame_hdr:0000000000006E29                 db  0Eh
.eh_frame_hdr:0000000000006E2A                 db    0
.eh_frame_hdr:0000000000006E2B                 db    0
.eh_frame_hdr:0000000000006E2B _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006E2B
LOAD:0000000000006E2C ; ===========================================================================
LOAD:0000000000006E2C
LOAD:0000000000006E2C ; Segment type: Pure code
LOAD:0000000000006E2C ; Segment permissions: Read/Execute
LOAD:0000000000006E2C LOAD            segment byte public 'CODE' use64
LOAD:0000000000006E2C                 assume cs:LOAD
LOAD:0000000000006E2C                 ;org 6E2Ch
LOAD:0000000000006E2C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006E2C                 align 10h
LOAD:0000000000006E2C LOAD            ends
LOAD:0000000000006E2C
.eh_frame:0000000000006E30 ; ===========================================================================
.eh_frame:0000000000006E30
.eh_frame:0000000000006E30 ; Segment type: Pure data
.eh_frame:0000000000006E30 ; Segment permissions: Read
.eh_frame:0000000000006E30 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006E30                 assume cs:_eh_frame
.eh_frame:0000000000006E30                 ;org 6E30h
.eh_frame:0000000000006E30                 db  14h
.eh_frame:0000000000006E31                 db    0
.eh_frame:0000000000006E32                 db    0
.eh_frame:0000000000006E33                 db    0
.eh_frame:0000000000006E34                 db    0
.eh_frame:0000000000006E35                 db    0
.eh_frame:0000000000006E36                 db    0
.eh_frame:0000000000006E37                 db    0
.eh_frame:0000000000006E38                 db    1
.eh_frame:0000000000006E39                 db  7Ah ; z
.eh_frame:0000000000006E3A                 db  52h ; R
.eh_frame:0000000000006E3B                 db    0
.eh_frame:0000000000006E3C                 db    1
.eh_frame:0000000000006E3D                 db  78h ; x
.eh_frame:0000000000006E3E                 db  10h
.eh_frame:0000000000006E3F                 db    1
.eh_frame:0000000000006E40                 db  1Bh
.eh_frame:0000000000006E41                 db  0Ch
.eh_frame:0000000000006E42                 db    7
.eh_frame:0000000000006E43                 db    8
.eh_frame:0000000000006E44                 db  90h
.eh_frame:0000000000006E45                 db    1
.eh_frame:0000000000006E46                 db    7
.eh_frame:0000000000006E47                 db  10h
.eh_frame:0000000000006E48                 db  14h
.eh_frame:0000000000006E49                 db    0
.eh_frame:0000000000006E4A                 db    0
.eh_frame:0000000000006E4B                 db    0
.eh_frame:0000000000006E4C                 db  1Ch
.eh_frame:0000000000006E4D                 db    0
.eh_frame:0000000000006E4E                 db    0
.eh_frame:0000000000006E4F                 db    0
.eh_frame:0000000000006E50                 db  70h ; p
.eh_frame:0000000000006E51                 db 0B1h
.eh_frame:0000000000006E52                 db 0FFh
.eh_frame:0000000000006E53                 db 0FFh
.eh_frame:0000000000006E54                 db  2Bh ; +
.eh_frame:0000000000006E55                 db    0
.eh_frame:0000000000006E56                 db    0
.eh_frame:0000000000006E57                 db    0
.eh_frame:0000000000006E58                 db    0
.eh_frame:0000000000006E59                 db    0
.eh_frame:0000000000006E5A                 db    0
.eh_frame:0000000000006E5B                 db    0
.eh_frame:0000000000006E5C                 db    0
.eh_frame:0000000000006E5D                 db    0
.eh_frame:0000000000006E5E                 db    0
.eh_frame:0000000000006E5F                 db    0
.eh_frame:0000000000006E60                 db  14h
.eh_frame:0000000000006E61                 db    0
.eh_frame:0000000000006E62                 db    0
.eh_frame:0000000000006E63                 db    0
.eh_frame:0000000000006E64                 db    0
.eh_frame:0000000000006E65                 db    0
.eh_frame:0000000000006E66                 db    0
.eh_frame:0000000000006E67                 db    0
.eh_frame:0000000000006E68                 db    1
.eh_frame:0000000000006E69                 db  7Ah ; z
.eh_frame:0000000000006E6A                 db  52h ; R
.eh_frame:0000000000006E6B                 db    0
.eh_frame:0000000000006E6C                 db    1
.eh_frame:0000000000006E6D                 db  78h ; x
.eh_frame:0000000000006E6E                 db  10h
.eh_frame:0000000000006E6F                 db    1
.eh_frame:0000000000006E70                 db  1Bh
.eh_frame:0000000000006E71                 db  0Ch
.eh_frame:0000000000006E72                 db    7
.eh_frame:0000000000006E73                 db    8
.eh_frame:0000000000006E74                 db  90h
.eh_frame:0000000000006E75                 db    1
.eh_frame:0000000000006E76                 db    0
.eh_frame:0000000000006E77                 db    0
.eh_frame:0000000000006E78                 db  24h ; $
.eh_frame:0000000000006E79                 db    0
.eh_frame:0000000000006E7A                 db    0
.eh_frame:0000000000006E7B                 db    0
.eh_frame:0000000000006E7C                 db  1Ch
.eh_frame:0000000000006E7D                 db    0
.eh_frame:0000000000006E7E                 db    0
.eh_frame:0000000000006E7F                 db    0
.eh_frame:0000000000006E80                 db  40h ; @
.eh_frame:0000000000006E81                 db 0A8h
.eh_frame:0000000000006E82                 db 0FFh
.eh_frame:0000000000006E83                 db 0FFh
.eh_frame:0000000000006E84                 db 0F0h
.eh_frame:0000000000006E85                 db    3
.eh_frame:0000000000006E86                 db    0
.eh_frame:0000000000006E87                 db    0
.eh_frame:0000000000006E88                 db    0
.eh_frame:0000000000006E89                 db  0Eh
.eh_frame:0000000000006E8A                 db  10h
.eh_frame:0000000000006E8B                 db  46h ; F
.eh_frame:0000000000006E8C                 db  0Eh
.eh_frame:0000000000006E8D                 db  18h
.eh_frame:0000000000006E8E                 db  4Ah ; J
.eh_frame:0000000000006E8F                 db  0Fh
.eh_frame:0000000000006E90                 db  0Bh
.eh_frame:0000000000006E91                 db  77h ; w
.eh_frame:0000000000006E92                 db    8
.eh_frame:0000000000006E93                 db  80h
.eh_frame:0000000000006E94                 db    0
.eh_frame:0000000000006E95                 db  3Fh ; ?
.eh_frame:0000000000006E96                 db  1Ah
.eh_frame:0000000000006E97                 db  3Bh ; ;
.eh_frame:0000000000006E98                 db  2Ah ; *
.eh_frame:0000000000006E99                 db  33h ; 3
.eh_frame:0000000000006E9A                 db  24h ; $
.eh_frame:0000000000006E9B                 db  22h ; "
.eh_frame:0000000000006E9C                 db    0
.eh_frame:0000000000006E9D                 db    0
.eh_frame:0000000000006E9E                 db    0
.eh_frame:0000000000006E9F                 db    0
.eh_frame:0000000000006EA0                 db  14h
.eh_frame:0000000000006EA1                 db    0
.eh_frame:0000000000006EA2                 db    0
.eh_frame:0000000000006EA3                 db    0
.eh_frame:0000000000006EA4                 db  44h ; D
.eh_frame:0000000000006EA5                 db    0
.eh_frame:0000000000006EA6                 db    0
.eh_frame:0000000000006EA7                 db    0
.eh_frame:0000000000006EA8                 db    8
.eh_frame:0000000000006EA9                 db 0ACh
.eh_frame:0000000000006EAA                 db 0FFh
.eh_frame:0000000000006EAB                 db 0FFh
.eh_frame:0000000000006EAC                 db    8
.eh_frame:0000000000006EAD                 db    0
.eh_frame:0000000000006EAE                 db    0
.eh_frame:0000000000006EAF                 db    0
.eh_frame:0000000000006EB0                 db    0
.eh_frame:0000000000006EB1                 db    0
.eh_frame:0000000000006EB2                 db    0
.eh_frame:0000000000006EB3                 db    0
.eh_frame:0000000000006EB4                 db    0
.eh_frame:0000000000006EB5                 db    0
.eh_frame:0000000000006EB6                 db    0
.eh_frame:0000000000006EB7                 db    0
.eh_frame:0000000000006EB8                 db  3Ch ; <
.eh_frame:0000000000006EB9                 db    0
.eh_frame:0000000000006EBA                 db    0
.eh_frame:0000000000006EBB                 db    0
.eh_frame:0000000000006EBC                 db  5Ch ; \
.eh_frame:0000000000006EBD                 db    0
.eh_frame:0000000000006EBE                 db    0
.eh_frame:0000000000006EBF                 db    0
.eh_frame:0000000000006EC0                 db  10h
.eh_frame:0000000000006EC1                 db 0B2h
.eh_frame:0000000000006EC2                 db 0FFh
.eh_frame:0000000000006EC3                 db 0FFh
.eh_frame:0000000000006EC4                 db  2Eh ; .
.eh_frame:0000000000006EC5                 db    1
.eh_frame:0000000000006EC6                 db    0
.eh_frame:0000000000006EC7                 db    0
.eh_frame:0000000000006EC8                 db    0
.eh_frame:0000000000006EC9                 db  42h ; B
.eh_frame:0000000000006ECA                 db  0Eh
.eh_frame:0000000000006ECB                 db  10h
.eh_frame:0000000000006ECC                 db  8Eh
.eh_frame:0000000000006ECD                 db    2
.eh_frame:0000000000006ECE                 db  42h ; B
.eh_frame:0000000000006ECF                 db  0Eh
.eh_frame:0000000000006ED0                 db  18h
.eh_frame:0000000000006ED1                 db  8Dh
.eh_frame:0000000000006ED2                 db    3
.eh_frame:0000000000006ED3                 db  45h ; E
.eh_frame:0000000000006ED4                 db  0Eh
.eh_frame:0000000000006ED5                 db  20h
.eh_frame:0000000000006ED6                 db  8Ch
.eh_frame:0000000000006ED7                 db    4
.eh_frame:0000000000006ED8                 db  41h ; A
.eh_frame:0000000000006ED9                 db  0Eh
.eh_frame:0000000000006EDA                 db  28h ; (
.eh_frame:0000000000006EDB                 db  86h
.eh_frame:0000000000006EDC                 db    5
.eh_frame:0000000000006EDD                 db  44h ; D
.eh_frame:0000000000006EDE                 db  0Eh
.eh_frame:0000000000006EDF                 db  30h ; 0
.eh_frame:0000000000006EE0                 db  83h
.eh_frame:0000000000006EE1                 db    6
.eh_frame:0000000000006EE2                 db    3
.eh_frame:0000000000006EE3                 db    8
.eh_frame:0000000000006EE4                 db    1
.eh_frame:0000000000006EE5                 db  0Ah
.eh_frame:0000000000006EE6                 db  0Eh
.eh_frame:0000000000006EE7                 db  28h ; (
.eh_frame:0000000000006EE8                 db  41h ; A
.eh_frame:0000000000006EE9                 db  0Eh
.eh_frame:0000000000006EEA                 db  20h
.eh_frame:0000000000006EEB                 db  42h ; B
.eh_frame:0000000000006EEC                 db  0Eh
.eh_frame:0000000000006EED                 db  18h
.eh_frame:0000000000006EEE                 db  42h ; B
.eh_frame:0000000000006EEF                 db  0Eh
.eh_frame:0000000000006EF0                 db  10h
.eh_frame:0000000000006EF1                 db  42h ; B
.eh_frame:0000000000006EF2                 db  0Eh
.eh_frame:0000000000006EF3                 db    8
.eh_frame:0000000000006EF4                 db  43h ; C
.eh_frame:0000000000006EF5                 db  0Bh
.eh_frame:0000000000006EF6                 db    0
.eh_frame:0000000000006EF7                 db    0
.eh_frame:0000000000006EF8                 db  3Ch ; <
.eh_frame:0000000000006EF9                 db    0
.eh_frame:0000000000006EFA                 db    0
.eh_frame:0000000000006EFB                 db    0
.eh_frame:0000000000006EFC                 db  9Ch
.eh_frame:0000000000006EFD                 db    0
.eh_frame:0000000000006EFE                 db    0
.eh_frame:0000000000006EFF                 db    0
.eh_frame:0000000000006F00                 db    0
.eh_frame:0000000000006F01                 db 0B3h
.eh_frame:0000000000006F02                 db 0FFh
.eh_frame:0000000000006F03                 db 0FFh
.eh_frame:0000000000006F04                 db 0F4h
.eh_frame:0000000000006F05                 db    3
.eh_frame:0000000000006F06                 db    0
.eh_frame:0000000000006F07                 db    0
.eh_frame:0000000000006F08                 db    0
.eh_frame:0000000000006F09                 db  42h ; B
.eh_frame:0000000000006F0A                 db  0Eh
.eh_frame:0000000000006F0B                 db  10h
.eh_frame:0000000000006F0C                 db  8Dh
.eh_frame:0000000000006F0D                 db    2
.eh_frame:0000000000006F0E                 db  42h ; B
.eh_frame:0000000000006F0F                 db  0Eh
.eh_frame:0000000000006F10                 db  18h
.eh_frame:0000000000006F11                 db  8Ch
.eh_frame:0000000000006F12                 db    3
.eh_frame:0000000000006F13                 db  41h ; A
.eh_frame:0000000000006F14                 db  0Eh
.eh_frame:0000000000006F15                 db  20h
.eh_frame:0000000000006F16                 db  86h
.eh_frame:0000000000006F17                 db    4
.eh_frame:0000000000006F18                 db  41h ; A
.eh_frame:0000000000006F19                 db  0Eh
.eh_frame:0000000000006F1A                 db  28h ; (
.eh_frame:0000000000006F1B                 db  83h
.eh_frame:0000000000006F1C                 db    5
.eh_frame:0000000000006F1D                 db  4Ah ; J
.eh_frame:0000000000006F1E                 db  0Eh
.eh_frame:0000000000006F1F                 db 0C0h
.eh_frame:0000000000006F20                 db    8
.eh_frame:0000000000006F21                 db    3
.eh_frame:0000000000006F22                 db  48h ; H
.eh_frame:0000000000006F23                 db    1
.eh_frame:0000000000006F24                 db  0Ah
.eh_frame:0000000000006F25                 db  0Eh
.eh_frame:0000000000006F26                 db  28h ; (
.eh_frame:0000000000006F27                 db  41h ; A
.eh_frame:0000000000006F28                 db  0Eh
.eh_frame:0000000000006F29                 db  20h
.eh_frame:0000000000006F2A                 db  41h ; A
.eh_frame:0000000000006F2B                 db  0Eh
.eh_frame:0000000000006F2C                 db  18h
.eh_frame:0000000000006F2D                 db  42h ; B
.eh_frame:0000000000006F2E                 db  0Eh
.eh_frame:0000000000006F2F                 db  10h
.eh_frame:0000000000006F30                 db  42h ; B
.eh_frame:0000000000006F31                 db  0Eh
.eh_frame:0000000000006F32                 db    8
.eh_frame:0000000000006F33                 db  42h ; B
.eh_frame:0000000000006F34                 db  0Bh
.eh_frame:0000000000006F35                 db    0
.eh_frame:0000000000006F36                 db    0
.eh_frame:0000000000006F37                 db    0
.eh_frame:0000000000006F38                 db  4Ch ; L
.eh_frame:0000000000006F39                 db    0
.eh_frame:0000000000006F3A                 db    0
.eh_frame:0000000000006F3B                 db    0
.eh_frame:0000000000006F3C                 db 0DCh
.eh_frame:0000000000006F3D                 db    0
.eh_frame:0000000000006F3E                 db    0
.eh_frame:0000000000006F3F                 db    0
.eh_frame:0000000000006F40                 db 0C0h
.eh_frame:0000000000006F41                 db 0B6h
.eh_frame:0000000000006F42                 db 0FFh
.eh_frame:0000000000006F43                 db 0FFh
.eh_frame:0000000000006F44                 db  3Eh ; >
.eh_frame:0000000000006F45                 db    5
.eh_frame:0000000000006F46                 db    0
.eh_frame:0000000000006F47                 db    0
.eh_frame:0000000000006F48                 db    0
.eh_frame:0000000000006F49                 db  42h ; B
.eh_frame:0000000000006F4A                 db  0Eh
.eh_frame:0000000000006F4B                 db  10h
.eh_frame:0000000000006F4C                 db  8Fh
.eh_frame:0000000000006F4D                 db    2
.eh_frame:0000000000006F4E                 db  42h ; B
.eh_frame:0000000000006F4F                 db  0Eh
.eh_frame:0000000000006F50                 db  18h
.eh_frame:0000000000006F51                 db  8Eh
.eh_frame:0000000000006F52                 db    3
.eh_frame:0000000000006F53                 db  42h ; B
.eh_frame:0000000000006F54                 db  0Eh
.eh_frame:0000000000006F55                 db  20h
.eh_frame:0000000000006F56                 db  8Dh
.eh_frame:0000000000006F57                 db    4
.eh_frame:0000000000006F58                 db  42h ; B
.eh_frame:0000000000006F59                 db  0Eh
.eh_frame:0000000000006F5A                 db  28h ; (
.eh_frame:0000000000006F5B                 db  8Ch
.eh_frame:0000000000006F5C                 db    5
.eh_frame:0000000000006F5D                 db  41h ; A
.eh_frame:0000000000006F5E                 db  0Eh
.eh_frame:0000000000006F5F                 db  30h ; 0
.eh_frame:0000000000006F60                 db  86h
.eh_frame:0000000000006F61                 db    6
.eh_frame:0000000000006F62                 db  41h ; A
.eh_frame:0000000000006F63                 db  0Eh
.eh_frame:0000000000006F64                 db  38h ; 8
.eh_frame:0000000000006F65                 db  83h
.eh_frame:0000000000006F66                 db    7
.eh_frame:0000000000006F67                 db  4Ah ; J
.eh_frame:0000000000006F68                 db  0Eh
.eh_frame:0000000000006F69                 db 0B0h
.eh_frame:0000000000006F6A                 db    4
.eh_frame:0000000000006F6B                 db    3
.eh_frame:0000000000006F6C                 db  2Ch ; ,
.eh_frame:0000000000006F6D                 db    2
.eh_frame:0000000000006F6E                 db  0Ah
.eh_frame:0000000000006F6F                 db  0Eh
.eh_frame:0000000000006F70                 db  38h ; 8
.eh_frame:0000000000006F71                 db  41h ; A
.eh_frame:0000000000006F72                 db  0Eh
.eh_frame:0000000000006F73                 db  30h ; 0
.eh_frame:0000000000006F74                 db  41h ; A
.eh_frame:0000000000006F75                 db  0Eh
.eh_frame:0000000000006F76                 db  28h ; (
.eh_frame:0000000000006F77                 db  42h ; B
.eh_frame:0000000000006F78                 db  0Eh
.eh_frame:0000000000006F79                 db  20h
.eh_frame:0000000000006F7A                 db  42h ; B
.eh_frame:0000000000006F7B                 db  0Eh
.eh_frame:0000000000006F7C                 db  18h
.eh_frame:0000000000006F7D                 db  42h ; B
.eh_frame:0000000000006F7E                 db  0Eh
.eh_frame:0000000000006F7F                 db  10h
.eh_frame:0000000000006F80                 db  42h ; B
.eh_frame:0000000000006F81                 db  0Eh
.eh_frame:0000000000006F82                 db    8
.eh_frame:0000000000006F83                 db  46h ; F
.eh_frame:0000000000006F84                 db  0Bh
.eh_frame:0000000000006F85                 db    0
.eh_frame:0000000000006F86                 db    0
.eh_frame:0000000000006F87                 db    0
.eh_frame:0000000000006F88                 db  28h ; (
.eh_frame:0000000000006F89                 db    0
.eh_frame:0000000000006F8A                 db    0
.eh_frame:0000000000006F8B                 db    0
.eh_frame:0000000000006F8C                 db  2Ch ; ,
.eh_frame:0000000000006F8D                 db    1
.eh_frame:0000000000006F8E                 db    0
.eh_frame:0000000000006F8F                 db    0
.eh_frame:0000000000006F90                 db 0B0h
.eh_frame:0000000000006F91                 db 0BBh
.eh_frame:0000000000006F92                 db 0FFh
.eh_frame:0000000000006F93                 db 0FFh
.eh_frame:0000000000006F94                 db  8Ah
.eh_frame:0000000000006F95                 db    3
.eh_frame:0000000000006F96                 db    0
.eh_frame:0000000000006F97                 db    0
.eh_frame:0000000000006F98                 db    0
.eh_frame:0000000000006F99                 db  42h ; B
.eh_frame:0000000000006F9A                 db  0Eh
.eh_frame:0000000000006F9B                 db  10h
.eh_frame:0000000000006F9C                 db  8Dh
.eh_frame:0000000000006F9D                 db    2
.eh_frame:0000000000006F9E                 db  42h ; B
.eh_frame:0000000000006F9F                 db  0Eh
.eh_frame:0000000000006FA0                 db  18h
.eh_frame:0000000000006FA1                 db  8Ch
.eh_frame:0000000000006FA2                 db    3
.eh_frame:0000000000006FA3                 db  46h ; F
.eh_frame:0000000000006FA4                 db  0Eh
.eh_frame:0000000000006FA5                 db  20h
.eh_frame:0000000000006FA6                 db  86h
.eh_frame:0000000000006FA7                 db    4
.eh_frame:0000000000006FA8                 db  41h ; A
.eh_frame:0000000000006FA9                 db  0Eh
.eh_frame:0000000000006FAA                 db  28h ; (
.eh_frame:0000000000006FAB                 db  83h
.eh_frame:0000000000006FAC                 db    5
.eh_frame:0000000000006FAD                 db  49h ; I
.eh_frame:0000000000006FAE                 db  0Eh
.eh_frame:0000000000006FAF                 db 0B0h
.eh_frame:0000000000006FB0                 db    1
.eh_frame:0000000000006FB1                 db    0
.eh_frame:0000000000006FB2                 db    0
.eh_frame:0000000000006FB3                 db    0
.eh_frame:0000000000006FB4                 db  58h ; X
.eh_frame:0000000000006FB5                 db    0
.eh_frame:0000000000006FB6                 db    0
.eh_frame:0000000000006FB7                 db    0
.eh_frame:0000000000006FB8                 db  58h ; X
.eh_frame:0000000000006FB9                 db    1
.eh_frame:0000000000006FBA                 db    0
.eh_frame:0000000000006FBB                 db    0
.eh_frame:0000000000006FBC                 db    4
.eh_frame:0000000000006FBD                 db 0ABh
.eh_frame:0000000000006FBE                 db 0FFh
.eh_frame:0000000000006FBF                 db 0FFh
.eh_frame:0000000000006FC0                 db 0FAh
.eh_frame:0000000000006FC1                 db    4
.eh_frame:0000000000006FC2                 db    0
.eh_frame:0000000000006FC3                 db    0
.eh_frame:0000000000006FC4                 db    0
.eh_frame:0000000000006FC5                 db  42h ; B
.eh_frame:0000000000006FC6                 db  0Eh
.eh_frame:0000000000006FC7                 db  10h
.eh_frame:0000000000006FC8                 db  8Fh
.eh_frame:0000000000006FC9                 db    2
.eh_frame:0000000000006FCA                 db  42h ; B
.eh_frame:0000000000006FCB                 db  0Eh
.eh_frame:0000000000006FCC                 db  18h
.eh_frame:0000000000006FCD                 db  8Eh
.eh_frame:0000000000006FCE                 db    3
.eh_frame:0000000000006FCF                 db  42h ; B
.eh_frame:0000000000006FD0                 db  0Eh
.eh_frame:0000000000006FD1                 db  20h
.eh_frame:0000000000006FD2                 db  8Dh
.eh_frame:0000000000006FD3                 db    4
.eh_frame:0000000000006FD4                 db  42h ; B
.eh_frame:0000000000006FD5                 db  0Eh
.eh_frame:0000000000006FD6                 db  28h ; (
.eh_frame:0000000000006FD7                 db  8Ch
.eh_frame:0000000000006FD8                 db    5
.eh_frame:0000000000006FD9                 db  48h ; H
.eh_frame:0000000000006FDA                 db  0Eh
.eh_frame:0000000000006FDB                 db  30h ; 0
.eh_frame:0000000000006FDC                 db  86h
.eh_frame:0000000000006FDD                 db    6
.eh_frame:0000000000006FDE                 db  41h ; A
.eh_frame:0000000000006FDF                 db  0Eh
.eh_frame:0000000000006FE0                 db  38h ; 8
.eh_frame:0000000000006FE1                 db  83h
.eh_frame:0000000000006FE2                 db    7
.eh_frame:0000000000006FE3                 db  49h ; I
.eh_frame:0000000000006FE4                 db  0Eh
.eh_frame:0000000000006FE5                 db  60h ; `
.eh_frame:0000000000006FE6                 db    3
.eh_frame:0000000000006FE7                 db  18h
.eh_frame:0000000000006FE8                 db    1
.eh_frame:0000000000006FE9                 db  0Ah
.eh_frame:0000000000006FEA                 db  0Eh
.eh_frame:0000000000006FEB                 db  68h ; h
.eh_frame:0000000000006FEC                 db  4Fh ; O
.eh_frame:0000000000006FED                 db  0Eh
.eh_frame:0000000000006FEE                 db  70h ; p
.eh_frame:0000000000006FEF                 db  5Fh ; _
.eh_frame:0000000000006FF0                 db  0Bh
.eh_frame:0000000000006FF1                 db    2
.eh_frame:0000000000006FF2                 db 0DCh
.eh_frame:0000000000006FF3                 db  0Ah
.eh_frame:0000000000006FF4                 db  0Eh
.eh_frame:0000000000006FF5                 db  38h ; 8
.eh_frame:0000000000006FF6                 db  41h ; A
.eh_frame:0000000000006FF7                 db  0Eh
.eh_frame:0000000000006FF8                 db  30h ; 0
.eh_frame:0000000000006FF9                 db  41h ; A
.eh_frame:0000000000006FFA                 db  0Eh
.eh_frame:0000000000006FFB                 db  28h ; (
.eh_frame:0000000000006FFC                 db  42h ; B
.eh_frame:0000000000006FFD                 db  0Eh
.eh_frame:0000000000006FFE                 db  20h
.eh_frame:0000000000006FFF                 db  42h ; B
.eh_frame:0000000000007000                 db  0Eh
.eh_frame:0000000000007001                 db  18h
.eh_frame:0000000000007002                 db  42h ; B
.eh_frame:0000000000007003                 db  0Eh
.eh_frame:0000000000007004                 db  10h
.eh_frame:0000000000007005                 db  42h ; B
.eh_frame:0000000000007006                 db  0Eh
.eh_frame:0000000000007007                 db    8
.eh_frame:0000000000007008                 db  41h ; A
.eh_frame:0000000000007009                 db  0Bh
.eh_frame:000000000000700A                 db    0
.eh_frame:000000000000700B                 db    0
.eh_frame:000000000000700C                 db    0
.eh_frame:000000000000700D                 db    0
.eh_frame:000000000000700E                 db    0
.eh_frame:000000000000700F                 db    0
.eh_frame:0000000000007010                 db  30h ; 0
.eh_frame:0000000000007011                 db    0
.eh_frame:0000000000007012                 db    0
.eh_frame:0000000000007013                 db    0
.eh_frame:0000000000007014                 db 0B4h
.eh_frame:0000000000007015                 db    1
.eh_frame:0000000000007016                 db    0
.eh_frame:0000000000007017                 db    0
.eh_frame:0000000000007018                 db 0B8h
.eh_frame:0000000000007019                 db 0BEh
.eh_frame:000000000000701A                 db 0FFh
.eh_frame:000000000000701B                 db 0FFh
.eh_frame:000000000000701C                 db 0A8h
.eh_frame:000000000000701D                 db    0
.eh_frame:000000000000701E                 db    0
.eh_frame:000000000000701F                 db    0
.eh_frame:0000000000007020                 db    0
.eh_frame:0000000000007021                 db  42h ; B
.eh_frame:0000000000007022                 db  0Eh
.eh_frame:0000000000007023                 db  10h
.eh_frame:0000000000007024                 db  8Ch
.eh_frame:0000000000007025                 db    2
.eh_frame:0000000000007026                 db  41h ; A
.eh_frame:0000000000007027                 db  0Eh
.eh_frame:0000000000007028                 db  18h
.eh_frame:0000000000007029                 db  86h
.eh_frame:000000000000702A                 db    3
.eh_frame:000000000000702B                 db  48h ; H
.eh_frame:000000000000702C                 db  0Eh
.eh_frame:000000000000702D                 db  20h
.eh_frame:000000000000702E                 db  83h
.eh_frame:000000000000702F                 db    4
.eh_frame:0000000000007030                 db  4Ch ; L
.eh_frame:0000000000007031                 db  0Eh
.eh_frame:0000000000007032                 db  30h ; 0
.eh_frame:0000000000007033                 db    2
.eh_frame:0000000000007034                 db  75h ; u
.eh_frame:0000000000007035                 db  0Ah
.eh_frame:0000000000007036                 db  0Eh
.eh_frame:0000000000007037                 db  20h
.eh_frame:0000000000007038                 db  41h ; A
.eh_frame:0000000000007039                 db  0Eh
.eh_frame:000000000000703A                 db  18h
.eh_frame:000000000000703B                 db  41h ; A
.eh_frame:000000000000703C                 db  0Eh
.eh_frame:000000000000703D                 db  10h
.eh_frame:000000000000703E                 db  42h ; B
.eh_frame:000000000000703F                 db  0Eh
.eh_frame:0000000000007040                 db    8
.eh_frame:0000000000007041                 db  48h ; H
.eh_frame:0000000000007042                 db  0Bh
.eh_frame:0000000000007043                 db    0
.eh_frame:0000000000007044                 db  10h
.eh_frame:0000000000007045                 db    0
.eh_frame:0000000000007046                 db    0
.eh_frame:0000000000007047                 db    0
.eh_frame:0000000000007048                 db 0E8h
.eh_frame:0000000000007049                 db    1
.eh_frame:000000000000704A                 db    0
.eh_frame:000000000000704B                 db    0
.eh_frame:000000000000704C                 db  34h ; 4
.eh_frame:000000000000704D                 db 0BFh
.eh_frame:000000000000704E                 db 0FFh
.eh_frame:000000000000704F                 db 0FFh
.eh_frame:0000000000007050                 db  0Ch
.eh_frame:0000000000007051                 db    0
.eh_frame:0000000000007052                 db    0
.eh_frame:0000000000007053                 db    0
.eh_frame:0000000000007054                 db    0
.eh_frame:0000000000007055                 db    0
.eh_frame:0000000000007056                 db    0
.eh_frame:0000000000007057                 db    0
.eh_frame:0000000000007058                 db  14h
.eh_frame:0000000000007059                 db    0
.eh_frame:000000000000705A                 db    0
.eh_frame:000000000000705B                 db    0
.eh_frame:000000000000705C                 db 0FCh
.eh_frame:000000000000705D                 db    1
.eh_frame:000000000000705E                 db    0
.eh_frame:000000000000705F                 db    0
.eh_frame:0000000000007060                 db  30h ; 0
.eh_frame:0000000000007061                 db 0BFh
.eh_frame:0000000000007062                 db 0FFh
.eh_frame:0000000000007063                 db 0FFh
.eh_frame:0000000000007064                 db  0Bh
.eh_frame:0000000000007065                 db    0
.eh_frame:0000000000007066                 db    0
.eh_frame:0000000000007067                 db    0
.eh_frame:0000000000007068                 db    0
.eh_frame:0000000000007069                 db    0
.eh_frame:000000000000706A                 db    0
.eh_frame:000000000000706B                 db    0
.eh_frame:000000000000706C                 db    0
.eh_frame:000000000000706D                 db    0
.eh_frame:000000000000706E                 db    0
.eh_frame:000000000000706F                 db    0
.eh_frame:0000000000007070                 db  10h
.eh_frame:0000000000007071                 db    0
.eh_frame:0000000000007072                 db    0
.eh_frame:0000000000007073                 db    0
.eh_frame:0000000000007074                 db  14h
.eh_frame:0000000000007075                 db    2
.eh_frame:0000000000007076                 db    0
.eh_frame:0000000000007077                 db    0
.eh_frame:0000000000007078                 db  28h ; (
.eh_frame:0000000000007079                 db 0BFh
.eh_frame:000000000000707A                 db 0FFh
.eh_frame:000000000000707B                 db 0FFh
.eh_frame:000000000000707C                 db    8
.eh_frame:000000000000707D                 db    0
.eh_frame:000000000000707E                 db    0
.eh_frame:000000000000707F                 db    0
.eh_frame:0000000000007080                 db    0
.eh_frame:0000000000007081                 db    0
.eh_frame:0000000000007082                 db    0
.eh_frame:0000000000007083                 db    0
.eh_frame:0000000000007084                 db  10h
.eh_frame:0000000000007085                 db    0
.eh_frame:0000000000007086                 db    0
.eh_frame:0000000000007087                 db    0
.eh_frame:0000000000007088                 db  28h ; (
.eh_frame:0000000000007089                 db    2
.eh_frame:000000000000708A                 db    0
.eh_frame:000000000000708B                 db    0
.eh_frame:000000000000708C                 db  24h ; $
.eh_frame:000000000000708D                 db 0BFh
.eh_frame:000000000000708E                 db 0FFh
.eh_frame:000000000000708F                 db 0FFh
.eh_frame:0000000000007090                 db    8
.eh_frame:0000000000007091                 db    0
.eh_frame:0000000000007092                 db    0
.eh_frame:0000000000007093                 db    0
.eh_frame:0000000000007094                 db    0
.eh_frame:0000000000007095                 db    0
.eh_frame:0000000000007096                 db    0
.eh_frame:0000000000007097                 db    0
.eh_frame:0000000000007098                 db  2Ch ; ,
.eh_frame:0000000000007099                 db    0
.eh_frame:000000000000709A                 db    0
.eh_frame:000000000000709B                 db    0
.eh_frame:000000000000709C                 db  3Ch ; <
.eh_frame:000000000000709D                 db    2
.eh_frame:000000000000709E                 db    0
.eh_frame:000000000000709F                 db    0
.eh_frame:00000000000070A0                 db  20h
.eh_frame:00000000000070A1                 db 0BFh
.eh_frame:00000000000070A2                 db 0FFh
.eh_frame:00000000000070A3                 db 0FFh
.eh_frame:00000000000070A4                 db 0A4h
.eh_frame:00000000000070A5                 db    0
.eh_frame:00000000000070A6                 db    0
.eh_frame:00000000000070A7                 db    0
.eh_frame:00000000000070A8                 db    0
.eh_frame:00000000000070A9                 db  41h ; A
.eh_frame:00000000000070AA                 db  0Eh
.eh_frame:00000000000070AB                 db  10h
.eh_frame:00000000000070AC                 db  86h
.eh_frame:00000000000070AD                 db    2
.eh_frame:00000000000070AE                 db  41h ; A
.eh_frame:00000000000070AF                 db  0Eh
.eh_frame:00000000000070B0                 db  18h
.eh_frame:00000000000070B1                 db  83h
.eh_frame:00000000000070B2                 db    3
.eh_frame:00000000000070B3                 db  44h ; D
.eh_frame:00000000000070B4                 db  0Eh
.eh_frame:00000000000070B5                 db  20h
.eh_frame:00000000000070B6                 db  7Ah ; z
.eh_frame:00000000000070B7                 db  0Ah
.eh_frame:00000000000070B8                 db  0Eh
.eh_frame:00000000000070B9                 db  18h
.eh_frame:00000000000070BA                 db  41h ; A
.eh_frame:00000000000070BB                 db  0Eh
.eh_frame:00000000000070BC                 db  10h
.eh_frame:00000000000070BD                 db  41h ; A
.eh_frame:00000000000070BE                 db  0Eh
.eh_frame:00000000000070BF                 db    8
.eh_frame:00000000000070C0                 db  41h ; A
.eh_frame:00000000000070C1                 db  0Bh
.eh_frame:00000000000070C2                 db    0
.eh_frame:00000000000070C3                 db    0
.eh_frame:00000000000070C4                 db    0
.eh_frame:00000000000070C5                 db    0
.eh_frame:00000000000070C6                 db    0
.eh_frame:00000000000070C7                 db    0
.eh_frame:00000000000070C8                 db  1Ch
.eh_frame:00000000000070C9                 db    0
.eh_frame:00000000000070CA                 db    0
.eh_frame:00000000000070CB                 db    0
.eh_frame:00000000000070CC                 db  6Ch ; l
.eh_frame:00000000000070CD                 db    2
.eh_frame:00000000000070CE                 db    0
.eh_frame:00000000000070CF                 db    0
.eh_frame:00000000000070D0                 db 0A0h
.eh_frame:00000000000070D1                 db 0BFh
.eh_frame:00000000000070D2                 db 0FFh
.eh_frame:00000000000070D3                 db 0FFh
.eh_frame:00000000000070D4                 db  60h ; `
.eh_frame:00000000000070D5                 db    0
.eh_frame:00000000000070D6                 db    0
.eh_frame:00000000000070D7                 db    0
.eh_frame:00000000000070D8                 db    0
.eh_frame:00000000000070D9                 db  44h ; D
.eh_frame:00000000000070DA                 db  0Eh
.eh_frame:00000000000070DB                 db  10h
.eh_frame:00000000000070DC                 db  75h ; u
.eh_frame:00000000000070DD                 db  0Ah
.eh_frame:00000000000070DE                 db  0Eh
.eh_frame:00000000000070DF                 db    8
.eh_frame:00000000000070E0                 db  47h ; G
.eh_frame:00000000000070E1                 db  0Bh
.eh_frame:00000000000070E2                 db  5Fh ; _
.eh_frame:00000000000070E3                 db  0Eh
.eh_frame:00000000000070E4                 db    8
.eh_frame:00000000000070E5                 db    0
.eh_frame:00000000000070E6                 db    0
.eh_frame:00000000000070E7                 db    0
.eh_frame:00000000000070E8                 db  14h
.eh_frame:00000000000070E9                 db    0
.eh_frame:00000000000070EA                 db    0
.eh_frame:00000000000070EB                 db    0
.eh_frame:00000000000070EC                 db  8Ch
.eh_frame:00000000000070ED                 db    2
.eh_frame:00000000000070EE                 db    0
.eh_frame:00000000000070EF                 db    0
.eh_frame:00000000000070F0                 db 0E0h
.eh_frame:00000000000070F1                 db 0BFh
.eh_frame:00000000000070F2                 db 0FFh
.eh_frame:00000000000070F3                 db 0FFh
.eh_frame:00000000000070F4                 db  9Ch
.eh_frame:00000000000070F5                 db    0
.eh_frame:00000000000070F6                 db    0
.eh_frame:00000000000070F7                 db    0
.eh_frame:00000000000070F8                 db    0
.eh_frame:00000000000070F9                 db    0
.eh_frame:00000000000070FA                 db    0
.eh_frame:00000000000070FB                 db    0
.eh_frame:00000000000070FC                 db    0
.eh_frame:00000000000070FD                 db    0
.eh_frame:00000000000070FE                 db    0
.eh_frame:00000000000070FF                 db    0
.eh_frame:0000000000007100                 db  1Ch
.eh_frame:0000000000007101                 db    0
.eh_frame:0000000000007102                 db    0
.eh_frame:0000000000007103                 db    0
.eh_frame:0000000000007104                 db 0A4h
.eh_frame:0000000000007105                 db    2
.eh_frame:0000000000007106                 db    0
.eh_frame:0000000000007107                 db    0
.eh_frame:0000000000007108                 db  68h ; h
.eh_frame:0000000000007109                 db 0C0h
.eh_frame:000000000000710A                 db 0FFh
.eh_frame:000000000000710B                 db 0FFh
.eh_frame:000000000000710C                 db  9Fh
.eh_frame:000000000000710D                 db    0
.eh_frame:000000000000710E                 db    0
.eh_frame:000000000000710F                 db    0
.eh_frame:0000000000007110                 db    0
.eh_frame:0000000000007111                 db  44h ; D
.eh_frame:0000000000007112                 db  0Eh
.eh_frame:0000000000007113                 db  10h
.eh_frame:0000000000007114                 db  83h
.eh_frame:0000000000007115                 db    2
.eh_frame:0000000000007116                 db    2
.eh_frame:0000000000007117                 db  78h ; x
.eh_frame:0000000000007118                 db  0Ah
.eh_frame:0000000000007119                 db  0Eh
.eh_frame:000000000000711A                 db    8
.eh_frame:000000000000711B                 db  41h ; A
.eh_frame:000000000000711C                 db  0Bh
.eh_frame:000000000000711D                 db    0
.eh_frame:000000000000711E                 db    0
.eh_frame:000000000000711F                 db    0
.eh_frame:0000000000007120                 db  40h ; @
.eh_frame:0000000000007121                 db    0
.eh_frame:0000000000007122                 db    0
.eh_frame:0000000000007123                 db    0
.eh_frame:0000000000007124                 db 0C4h
.eh_frame:0000000000007125                 db    2
.eh_frame:0000000000007126                 db    0
.eh_frame:0000000000007127                 db    0
.eh_frame:0000000000007128                 db 0E8h
.eh_frame:0000000000007129                 db 0C0h
.eh_frame:000000000000712A                 db 0FFh
.eh_frame:000000000000712B                 db 0FFh
.eh_frame:000000000000712C                 db 0E7h
.eh_frame:000000000000712D                 db    0
.eh_frame:000000000000712E                 db    0
.eh_frame:000000000000712F                 db    0
.eh_frame:0000000000007130                 db    0
.eh_frame:0000000000007131                 db  41h ; A
.eh_frame:0000000000007132                 db  0Eh
.eh_frame:0000000000007133                 db  10h
.eh_frame:0000000000007134                 db  86h
.eh_frame:0000000000007135                 db    2
.eh_frame:0000000000007136                 db  41h ; A
.eh_frame:0000000000007137                 db  0Eh
.eh_frame:0000000000007138                 db  18h
.eh_frame:0000000000007139                 db  83h
.eh_frame:000000000000713A                 db    3
.eh_frame:000000000000713B                 db  49h ; I
.eh_frame:000000000000713C                 db  0Eh
.eh_frame:000000000000713D                 db  20h
.eh_frame:000000000000713E                 db  6Eh ; n
.eh_frame:000000000000713F                 db  0Ah
.eh_frame:0000000000007140                 db  0Eh
.eh_frame:0000000000007141                 db  18h
.eh_frame:0000000000007142                 db  41h ; A
.eh_frame:0000000000007143                 db  0Eh
.eh_frame:0000000000007144                 db  10h
.eh_frame:0000000000007145                 db  41h ; A
.eh_frame:0000000000007146                 db  0Eh
.eh_frame:0000000000007147                 db    8
.eh_frame:0000000000007148                 db  45h ; E
.eh_frame:0000000000007149                 db  0Bh
.eh_frame:000000000000714A                 db    2
.eh_frame:000000000000714B                 db  4Ah ; J
.eh_frame:000000000000714C                 db  0Ah
.eh_frame:000000000000714D                 db  0Eh
.eh_frame:000000000000714E                 db  18h
.eh_frame:000000000000714F                 db  41h ; A
.eh_frame:0000000000007150                 db  0Eh
.eh_frame:0000000000007151                 db  10h
.eh_frame:0000000000007152                 db  41h ; A
.eh_frame:0000000000007153                 db  0Eh
.eh_frame:0000000000007154                 db    8
.eh_frame:0000000000007155                 db  44h ; D
.eh_frame:0000000000007156                 db  0Bh
.eh_frame:0000000000007157                 db    2
.eh_frame:0000000000007158                 db  54h ; T
.eh_frame:0000000000007159                 db  0Eh
.eh_frame:000000000000715A                 db  18h
.eh_frame:000000000000715B                 db  41h ; A
.eh_frame:000000000000715C                 db  0Eh
.eh_frame:000000000000715D                 db  10h
.eh_frame:000000000000715E                 db  41h ; A
.eh_frame:000000000000715F                 db  0Eh
.eh_frame:0000000000007160                 db    8
.eh_frame:0000000000007161                 db    0
.eh_frame:0000000000007162                 db    0
.eh_frame:0000000000007163                 db    0
.eh_frame:0000000000007164                 db  74h ; t
.eh_frame:0000000000007165                 db    0
.eh_frame:0000000000007166                 db    0
.eh_frame:0000000000007167                 db    0
.eh_frame:0000000000007168                 db    8
.eh_frame:0000000000007169                 db    3
.eh_frame:000000000000716A                 db    0
.eh_frame:000000000000716B                 db    0
.eh_frame:000000000000716C                 db  94h
.eh_frame:000000000000716D                 db 0C1h
.eh_frame:000000000000716E                 db 0FFh
.eh_frame:000000000000716F                 db 0FFh
.eh_frame:0000000000007170                 db  34h ; 4
.eh_frame:0000000000007171                 db  12h
.eh_frame:0000000000007172                 db    0
.eh_frame:0000000000007173                 db    0
.eh_frame:0000000000007174                 db    0
.eh_frame:0000000000007175                 db  42h ; B
.eh_frame:0000000000007176                 db  0Eh
.eh_frame:0000000000007177                 db  10h
.eh_frame:0000000000007178                 db  8Fh
.eh_frame:0000000000007179                 db    2
.eh_frame:000000000000717A                 db  42h ; B
.eh_frame:000000000000717B                 db  0Eh
.eh_frame:000000000000717C                 db  18h
.eh_frame:000000000000717D                 db  8Eh
.eh_frame:000000000000717E                 db    3
.eh_frame:000000000000717F                 db  45h ; E
.eh_frame:0000000000007180                 db  0Eh
.eh_frame:0000000000007181                 db  20h
.eh_frame:0000000000007182                 db  8Dh
.eh_frame:0000000000007183                 db    4
.eh_frame:0000000000007184                 db  42h ; B
.eh_frame:0000000000007185                 db  0Eh
.eh_frame:0000000000007186                 db  28h ; (
.eh_frame:0000000000007187                 db  8Ch
.eh_frame:0000000000007188                 db    5
.eh_frame:0000000000007189                 db  44h ; D
.eh_frame:000000000000718A                 db  0Eh
.eh_frame:000000000000718B                 db  30h ; 0
.eh_frame:000000000000718C                 db  86h
.eh_frame:000000000000718D                 db    6
.eh_frame:000000000000718E                 db  41h ; A
.eh_frame:000000000000718F                 db  0Eh
.eh_frame:0000000000007190                 db  38h ; 8
.eh_frame:0000000000007191                 db  83h
.eh_frame:0000000000007192                 db    7
.eh_frame:0000000000007193                 db  53h ; S
.eh_frame:0000000000007194                 db  0Eh
.eh_frame:0000000000007195                 db 0F0h
.eh_frame:0000000000007196                 db    1
.eh_frame:0000000000007197                 db    3
.eh_frame:0000000000007198                 db  81h
.eh_frame:0000000000007199                 db  0Bh
.eh_frame:000000000000719A                 db  0Eh
.eh_frame:000000000000719B                 db 0F8h
.eh_frame:000000000000719C                 db    1
.eh_frame:000000000000719D                 db  4Ah ; J
.eh_frame:000000000000719E                 db  0Eh
.eh_frame:000000000000719F                 db  80h
.eh_frame:00000000000071A0                 db    2
.eh_frame:00000000000071A1                 db  44h ; D
.eh_frame:00000000000071A2                 db  0Eh
.eh_frame:00000000000071A3                 db  88h
.eh_frame:00000000000071A4                 db    2
.eh_frame:00000000000071A5                 db  45h ; E
.eh_frame:00000000000071A6                 db  0Eh
.eh_frame:00000000000071A7                 db  90h
.eh_frame:00000000000071A8                 db    2
.eh_frame:00000000000071A9                 db  5Fh ; _
.eh_frame:00000000000071AA                 db  0Eh
.eh_frame:00000000000071AB                 db 0F0h
.eh_frame:00000000000071AC                 db    1
.eh_frame:00000000000071AD                 db  64h ; d
.eh_frame:00000000000071AE                 db  0Ah
.eh_frame:00000000000071AF                 db  0Eh
.eh_frame:00000000000071B0                 db  38h ; 8
.eh_frame:00000000000071B1                 db  41h ; A
.eh_frame:00000000000071B2                 db  0Eh
.eh_frame:00000000000071B3                 db  30h ; 0
.eh_frame:00000000000071B4                 db  41h ; A
.eh_frame:00000000000071B5                 db  0Eh
.eh_frame:00000000000071B6                 db  28h ; (
.eh_frame:00000000000071B7                 db  42h ; B
.eh_frame:00000000000071B8                 db  0Eh
.eh_frame:00000000000071B9                 db  20h
.eh_frame:00000000000071BA                 db  42h ; B
.eh_frame:00000000000071BB                 db  0Eh
.eh_frame:00000000000071BC                 db  18h
.eh_frame:00000000000071BD                 db  42h ; B
.eh_frame:00000000000071BE                 db  0Eh
.eh_frame:00000000000071BF                 db  10h
.eh_frame:00000000000071C0                 db  42h ; B
.eh_frame:00000000000071C1                 db  0Eh
.eh_frame:00000000000071C2                 db    8
.eh_frame:00000000000071C3                 db  44h ; D
.eh_frame:00000000000071C4                 db  0Bh
.eh_frame:00000000000071C5                 db    3
.eh_frame:00000000000071C6                 db  99h
.eh_frame:00000000000071C7                 db    5
.eh_frame:00000000000071C8                 db  0Eh
.eh_frame:00000000000071C9                 db 0F8h
.eh_frame:00000000000071CA                 db    1
.eh_frame:00000000000071CB                 db  4Dh ; M
.eh_frame:00000000000071CC                 db  0Eh
.eh_frame:00000000000071CD                 db  80h
.eh_frame:00000000000071CE                 db    2
.eh_frame:00000000000071CF                 db  44h ; D
.eh_frame:00000000000071D0                 db  0Eh
.eh_frame:00000000000071D1                 db  88h
.eh_frame:00000000000071D2                 db    2
.eh_frame:00000000000071D3                 db  47h ; G
.eh_frame:00000000000071D4                 db  0Eh
.eh_frame:00000000000071D5                 db  90h
.eh_frame:00000000000071D6                 db    2
.eh_frame:00000000000071D7                 db  5Bh ; [
.eh_frame:00000000000071D8                 db  0Eh
.eh_frame:00000000000071D9                 db 0F0h
.eh_frame:00000000000071DA                 db    1
.eh_frame:00000000000071DB                 db    0
.eh_frame:00000000000071DC                 db  68h ; h
.eh_frame:00000000000071DD                 db    0
.eh_frame:00000000000071DE                 db    0
.eh_frame:00000000000071DF                 db    0
.eh_frame:00000000000071E0                 db  80h
.eh_frame:00000000000071E1                 db    3
.eh_frame:00000000000071E2                 db    0
.eh_frame:00000000000071E3                 db    0
.eh_frame:00000000000071E4                 db  5Ch ; \
.eh_frame:00000000000071E5                 db 0D3h
.eh_frame:00000000000071E6                 db 0FFh
.eh_frame:00000000000071E7                 db 0FFh
.eh_frame:00000000000071E8                 db 0ABh
.eh_frame:00000000000071E9                 db    1
.eh_frame:00000000000071EA                 db    0
.eh_frame:00000000000071EB                 db    0
.eh_frame:00000000000071EC                 db    0
.eh_frame:00000000000071ED                 db  42h ; B
.eh_frame:00000000000071EE                 db  0Eh
.eh_frame:00000000000071EF                 db  10h
.eh_frame:00000000000071F0                 db  8Fh
.eh_frame:00000000000071F1                 db    2
.eh_frame:00000000000071F2                 db  42h ; B
.eh_frame:00000000000071F3                 db  0Eh
.eh_frame:00000000000071F4                 db  18h
.eh_frame:00000000000071F5                 db  8Eh
.eh_frame:00000000000071F6                 db    3
.eh_frame:00000000000071F7                 db  45h ; E
.eh_frame:00000000000071F8                 db  0Eh
.eh_frame:00000000000071F9                 db  20h
.eh_frame:00000000000071FA                 db  8Dh
.eh_frame:00000000000071FB                 db    4
.eh_frame:00000000000071FC                 db  42h ; B
.eh_frame:00000000000071FD                 db  0Eh
.eh_frame:00000000000071FE                 db  28h ; (
.eh_frame:00000000000071FF                 db  8Ch
.eh_frame:0000000000007200                 db    5
.eh_frame:0000000000007201                 db  44h ; D
.eh_frame:0000000000007202                 db  0Eh
.eh_frame:0000000000007203                 db  30h ; 0
.eh_frame:0000000000007204                 db  86h
.eh_frame:0000000000007205                 db    6
.eh_frame:0000000000007206                 db  41h ; A
.eh_frame:0000000000007207                 db  0Eh
.eh_frame:0000000000007208                 db  38h ; 8
.eh_frame:0000000000007209                 db  83h
.eh_frame:000000000000720A                 db    7
.eh_frame:000000000000720B                 db  47h ; G
.eh_frame:000000000000720C                 db  0Eh
.eh_frame:000000000000720D                 db  60h ; `
.eh_frame:000000000000720E                 db    2
.eh_frame:000000000000720F                 db  99h
.eh_frame:0000000000007210                 db  0Eh
.eh_frame:0000000000007211                 db  68h ; h
.eh_frame:0000000000007212                 db  5Fh ; _
.eh_frame:0000000000007213                 db  0Eh
.eh_frame:0000000000007214                 db  70h ; p
.eh_frame:0000000000007215                 db  46h ; F
.eh_frame:0000000000007216                 db  0Eh
.eh_frame:0000000000007217                 db  78h ; x
.eh_frame:0000000000007218                 db  42h ; B
.eh_frame:0000000000007219                 db  0Eh
.eh_frame:000000000000721A                 db  80h
.eh_frame:000000000000721B                 db    1
.eh_frame:000000000000721C                 db  59h ; Y
.eh_frame:000000000000721D                 db  0Eh
.eh_frame:000000000000721E                 db  60h ; `
.eh_frame:000000000000721F                 db    2
.eh_frame:0000000000007220                 db  40h ; @
.eh_frame:0000000000007221                 db  0Eh
.eh_frame:0000000000007222                 db  68h ; h
.eh_frame:0000000000007223                 db  4Bh ; K
.eh_frame:0000000000007224                 db  0Eh
.eh_frame:0000000000007225                 db  70h ; p
.eh_frame:0000000000007226                 db  43h ; C
.eh_frame:0000000000007227                 db  0Eh
.eh_frame:0000000000007228                 db  78h ; x
.eh_frame:0000000000007229                 db  45h ; E
.eh_frame:000000000000722A                 db  0Eh
.eh_frame:000000000000722B                 db  80h
.eh_frame:000000000000722C                 db    1
.eh_frame:000000000000722D                 db  5Eh ; ^
.eh_frame:000000000000722E                 db  0Eh
.eh_frame:000000000000722F                 db  60h ; `
.eh_frame:0000000000007230                 db  4Ch ; L
.eh_frame:0000000000007231                 db  0Ah
.eh_frame:0000000000007232                 db  0Eh
.eh_frame:0000000000007233                 db  38h ; 8
.eh_frame:0000000000007234                 db  44h ; D
.eh_frame:0000000000007235                 db  0Eh
.eh_frame:0000000000007236                 db  30h ; 0
.eh_frame:0000000000007237                 db  41h ; A
.eh_frame:0000000000007238                 db  0Eh
.eh_frame:0000000000007239                 db  28h ; (
.eh_frame:000000000000723A                 db  42h ; B
.eh_frame:000000000000723B                 db  0Eh
.eh_frame:000000000000723C                 db  20h
.eh_frame:000000000000723D                 db  42h ; B
.eh_frame:000000000000723E                 db  0Eh
.eh_frame:000000000000723F                 db  18h
.eh_frame:0000000000007240                 db  42h ; B
.eh_frame:0000000000007241                 db  0Eh
.eh_frame:0000000000007242                 db  10h
.eh_frame:0000000000007243                 db  42h ; B
.eh_frame:0000000000007244                 db  0Eh
.eh_frame:0000000000007245                 db    8
.eh_frame:0000000000007246                 db  46h ; F
.eh_frame:0000000000007247                 db  0Bh
.eh_frame:0000000000007248                 db  28h ; (
.eh_frame:0000000000007249                 db    0
.eh_frame:000000000000724A                 db    0
.eh_frame:000000000000724B                 db    0
.eh_frame:000000000000724C                 db 0ECh
.eh_frame:000000000000724D                 db    3
.eh_frame:000000000000724E                 db    0
.eh_frame:000000000000724F                 db    0
.eh_frame:0000000000007250                 db 0A0h
.eh_frame:0000000000007251                 db 0D4h
.eh_frame:0000000000007252                 db 0FFh
.eh_frame:0000000000007253                 db 0FFh
.eh_frame:0000000000007254                 db  36h ; 6
.eh_frame:0000000000007255                 db    0
.eh_frame:0000000000007256                 db    0
.eh_frame:0000000000007257                 db    0
.eh_frame:0000000000007258                 db    0
.eh_frame:0000000000007259                 db  42h ; B
.eh_frame:000000000000725A                 db  0Eh
.eh_frame:000000000000725B                 db  10h
.eh_frame:000000000000725C                 db  8Ch
.eh_frame:000000000000725D                 db    2
.eh_frame:000000000000725E                 db  41h ; A
.eh_frame:000000000000725F                 db  0Eh
.eh_frame:0000000000007260                 db  18h
.eh_frame:0000000000007261                 db  86h
.eh_frame:0000000000007262                 db    3
.eh_frame:0000000000007263                 db  41h ; A
.eh_frame:0000000000007264                 db  0Eh
.eh_frame:0000000000007265                 db  20h
.eh_frame:0000000000007266                 db  83h
.eh_frame:0000000000007267                 db    4
.eh_frame:0000000000007268                 db  6Eh ; n
.eh_frame:0000000000007269                 db  0Eh
.eh_frame:000000000000726A                 db  18h
.eh_frame:000000000000726B                 db  41h ; A
.eh_frame:000000000000726C                 db  0Eh
.eh_frame:000000000000726D                 db  10h
.eh_frame:000000000000726E                 db  42h ; B
.eh_frame:000000000000726F                 db  0Eh
.eh_frame:0000000000007270                 db    8
.eh_frame:0000000000007271                 db    0
.eh_frame:0000000000007272                 db    0
.eh_frame:0000000000007273                 db    0
.eh_frame:0000000000007274                 db  10h
.eh_frame:0000000000007275                 db    0
.eh_frame:0000000000007276                 db    0
.eh_frame:0000000000007277                 db    0
.eh_frame:0000000000007278                 db  18h
.eh_frame:0000000000007279                 db    4
.eh_frame:000000000000727A                 db    0
.eh_frame:000000000000727B                 db    0
.eh_frame:000000000000727C                 db 0B4h
.eh_frame:000000000000727D                 db 0D4h
.eh_frame:000000000000727E                 db 0FFh
.eh_frame:000000000000727F                 db 0FFh
.eh_frame:0000000000007280                 db  11h
.eh_frame:0000000000007281                 db    0
.eh_frame:0000000000007282                 db    0
.eh_frame:0000000000007283                 db    0
.eh_frame:0000000000007284                 db    0
.eh_frame:0000000000007285                 db    0
.eh_frame:0000000000007286                 db    0
.eh_frame:0000000000007287                 db    0
.eh_frame:0000000000007288                 db  10h
.eh_frame:0000000000007289                 db    0
.eh_frame:000000000000728A                 db    0
.eh_frame:000000000000728B                 db    0
.eh_frame:000000000000728C                 db  2Ch ; ,
.eh_frame:000000000000728D                 db    4
.eh_frame:000000000000728E                 db    0
.eh_frame:000000000000728F                 db    0
.eh_frame:0000000000007290                 db 0C0h
.eh_frame:0000000000007291                 db 0D4h
.eh_frame:0000000000007292                 db 0FFh
.eh_frame:0000000000007293                 db 0FFh
.eh_frame:0000000000007294                 db  11h
.eh_frame:0000000000007295                 db    0
.eh_frame:0000000000007296                 db    0
.eh_frame:0000000000007297                 db    0
.eh_frame:0000000000007298                 db    0
.eh_frame:0000000000007299                 db    0
.eh_frame:000000000000729A                 db    0
.eh_frame:000000000000729B                 db    0
.eh_frame:000000000000729C                 db  10h
.eh_frame:000000000000729D                 db    0
.eh_frame:000000000000729E                 db    0
.eh_frame:000000000000729F                 db    0
.eh_frame:00000000000072A0                 db  40h ; @
.eh_frame:00000000000072A1                 db    4
.eh_frame:00000000000072A2                 db    0
.eh_frame:00000000000072A3                 db    0
.eh_frame:00000000000072A4                 db 0CCh
.eh_frame:00000000000072A5                 db 0D4h
.eh_frame:00000000000072A6                 db 0FFh
.eh_frame:00000000000072A7                 db 0FFh
.eh_frame:00000000000072A8                 db  35h ; 5
.eh_frame:00000000000072A9                 db    0
.eh_frame:00000000000072AA                 db    0
.eh_frame:00000000000072AB                 db    0
.eh_frame:00000000000072AC                 db    0
.eh_frame:00000000000072AD                 db    0
.eh_frame:00000000000072AE                 db    0
.eh_frame:00000000000072AF                 db    0
.eh_frame:00000000000072B0                 db  10h
.eh_frame:00000000000072B1                 db    0
.eh_frame:00000000000072B2                 db    0
.eh_frame:00000000000072B3                 db    0
.eh_frame:00000000000072B4                 db  54h ; T
.eh_frame:00000000000072B5                 db    4
.eh_frame:00000000000072B6                 db    0
.eh_frame:00000000000072B7                 db    0
.eh_frame:00000000000072B8                 db 0F8h
.eh_frame:00000000000072B9                 db 0D4h
.eh_frame:00000000000072BA                 db 0FFh
.eh_frame:00000000000072BB                 db 0FFh
.eh_frame:00000000000072BC                 db  15h
.eh_frame:00000000000072BD                 db    0
.eh_frame:00000000000072BE                 db    0
.eh_frame:00000000000072BF                 db    0
.eh_frame:00000000000072C0                 db    0
.eh_frame:00000000000072C1                 db    0
.eh_frame:00000000000072C2                 db    0
.eh_frame:00000000000072C3                 db    0
.eh_frame:00000000000072C4                 db  10h
.eh_frame:00000000000072C5                 db    0
.eh_frame:00000000000072C6                 db    0
.eh_frame:00000000000072C7                 db    0
.eh_frame:00000000000072C8                 db  68h ; h
.eh_frame:00000000000072C9                 db    4
.eh_frame:00000000000072CA                 db    0
.eh_frame:00000000000072CB                 db    0
.eh_frame:00000000000072CC                 db    4
.eh_frame:00000000000072CD                 db 0D5h
.eh_frame:00000000000072CE                 db 0FFh
.eh_frame:00000000000072CF                 db 0FFh
.eh_frame:00000000000072D0                 db  30h ; 0
.eh_frame:00000000000072D1                 db    0
.eh_frame:00000000000072D2                 db    0
.eh_frame:00000000000072D3                 db    0
.eh_frame:00000000000072D4                 db    0
.eh_frame:00000000000072D5                 db  6Bh ; k
.eh_frame:00000000000072D6                 db  0Eh
.eh_frame:00000000000072D7                 db  10h
.eh_frame:00000000000072D8                 db  50h ; P
.eh_frame:00000000000072D9                 db    0
.eh_frame:00000000000072DA                 db    0
.eh_frame:00000000000072DB                 db    0
.eh_frame:00000000000072DC                 db  7Ch ; |
.eh_frame:00000000000072DD                 db    4
.eh_frame:00000000000072DE                 db    0
.eh_frame:00000000000072DF                 db    0
.eh_frame:00000000000072E0                 db  20h
.eh_frame:00000000000072E1                 db 0D5h
.eh_frame:00000000000072E2                 db 0FFh
.eh_frame:00000000000072E3                 db 0FFh
.eh_frame:00000000000072E4                 db  74h ; t
.eh_frame:00000000000072E5                 db    0
.eh_frame:00000000000072E6                 db    0
.eh_frame:00000000000072E7                 db    0
.eh_frame:00000000000072E8                 db    0
.eh_frame:00000000000072E9                 db  42h ; B
.eh_frame:00000000000072EA                 db  0Eh
.eh_frame:00000000000072EB                 db  10h
.eh_frame:00000000000072EC                 db  8Fh
.eh_frame:00000000000072ED                 db    2
.eh_frame:00000000000072EE                 db  42h ; B
.eh_frame:00000000000072EF                 db  0Eh
.eh_frame:00000000000072F0                 db  18h
.eh_frame:00000000000072F1                 db  8Eh
.eh_frame:00000000000072F2                 db    3
.eh_frame:00000000000072F3                 db  49h ; I
.eh_frame:00000000000072F4                 db  0Eh
.eh_frame:00000000000072F5                 db  20h
.eh_frame:00000000000072F6                 db  8Dh
.eh_frame:00000000000072F7                 db    4
.eh_frame:00000000000072F8                 db  42h ; B
.eh_frame:00000000000072F9                 db  0Eh
.eh_frame:00000000000072FA                 db  28h ; (
.eh_frame:00000000000072FB                 db  8Ch
.eh_frame:00000000000072FC                 db    5
.eh_frame:00000000000072FD                 db  44h ; D
.eh_frame:00000000000072FE                 db  0Eh
.eh_frame:00000000000072FF                 db  30h ; 0
.eh_frame:0000000000007300                 db  86h
.eh_frame:0000000000007301                 db    6
.eh_frame:0000000000007302                 db  41h ; A
.eh_frame:0000000000007303                 db  0Eh
.eh_frame:0000000000007304                 db  38h ; 8
.eh_frame:0000000000007305                 db  83h
.eh_frame:0000000000007306                 db    7
.eh_frame:0000000000007307                 db  4Dh ; M
.eh_frame:0000000000007308                 db  0Eh
.eh_frame:0000000000007309                 db  50h ; P
.eh_frame:000000000000730A                 db  5Fh ; _
.eh_frame:000000000000730B                 db  0Eh
.eh_frame:000000000000730C                 db  58h ; X
.eh_frame:000000000000730D                 db  47h ; G
.eh_frame:000000000000730E                 db  0Eh
.eh_frame:000000000000730F                 db  60h ; `
.eh_frame:0000000000007310                 db  46h ; F
.eh_frame:0000000000007311                 db  0Eh
.eh_frame:0000000000007312                 db  68h ; h
.eh_frame:0000000000007313                 db  44h ; D
.eh_frame:0000000000007314                 db  0Eh
.eh_frame:0000000000007315                 db  70h ; p
.eh_frame:0000000000007316                 db  58h ; X
.eh_frame:0000000000007317                 db  0Eh
.eh_frame:0000000000007318                 db  38h ; 8
.eh_frame:0000000000007319                 db  41h ; A
.eh_frame:000000000000731A                 db  0Eh
.eh_frame:000000000000731B                 db  30h ; 0
.eh_frame:000000000000731C                 db  41h ; A
.eh_frame:000000000000731D                 db  0Eh
.eh_frame:000000000000731E                 db  28h ; (
.eh_frame:000000000000731F                 db  42h ; B
.eh_frame:0000000000007320                 db  0Eh
.eh_frame:0000000000007321                 db  20h
.eh_frame:0000000000007322                 db  42h ; B
.eh_frame:0000000000007323                 db  0Eh
.eh_frame:0000000000007324                 db  18h
.eh_frame:0000000000007325                 db  42h ; B
.eh_frame:0000000000007326                 db  0Eh
.eh_frame:0000000000007327                 db  10h
.eh_frame:0000000000007328                 db  42h ; B
.eh_frame:0000000000007329                 db  0Eh
.eh_frame:000000000000732A                 db    8
.eh_frame:000000000000732B                 db    0
.eh_frame:000000000000732C                 db  68h ; h
.eh_frame:000000000000732D                 db    0
.eh_frame:000000000000732E                 db    0
.eh_frame:000000000000732F                 db    0
.eh_frame:0000000000007330                 db 0D0h
.eh_frame:0000000000007331                 db    4
.eh_frame:0000000000007332                 db    0
.eh_frame:0000000000007333                 db    0
.eh_frame:0000000000007334                 db  4Ch ; L
.eh_frame:0000000000007335                 db 0D5h
.eh_frame:0000000000007336                 db 0FFh
.eh_frame:0000000000007337                 db 0FFh
.eh_frame:0000000000007338                 db 0E3h
.eh_frame:0000000000007339                 db    0
.eh_frame:000000000000733A                 db    0
.eh_frame:000000000000733B                 db    0
.eh_frame:000000000000733C                 db    0
.eh_frame:000000000000733D                 db  42h ; B
.eh_frame:000000000000733E                 db  0Eh
.eh_frame:000000000000733F                 db  10h
.eh_frame:0000000000007340                 db  8Fh
.eh_frame:0000000000007341                 db    2
.eh_frame:0000000000007342                 db  42h ; B
.eh_frame:0000000000007343                 db  0Eh
.eh_frame:0000000000007344                 db  18h
.eh_frame:0000000000007345                 db  8Eh
.eh_frame:0000000000007346                 db    3
.eh_frame:0000000000007347                 db  49h ; I
.eh_frame:0000000000007348                 db  0Eh
.eh_frame:0000000000007349                 db  20h
.eh_frame:000000000000734A                 db  8Dh
.eh_frame:000000000000734B                 db    4
.eh_frame:000000000000734C                 db  42h ; B
.eh_frame:000000000000734D                 db  0Eh
.eh_frame:000000000000734E                 db  28h ; (
.eh_frame:000000000000734F                 db  8Ch
.eh_frame:0000000000007350                 db    5
.eh_frame:0000000000007351                 db  44h ; D
.eh_frame:0000000000007352                 db  0Eh
.eh_frame:0000000000007353                 db  30h ; 0
.eh_frame:0000000000007354                 db  86h
.eh_frame:0000000000007355                 db    6
.eh_frame:0000000000007356                 db  41h ; A
.eh_frame:0000000000007357                 db  0Eh
.eh_frame:0000000000007358                 db  38h ; 8
.eh_frame:0000000000007359                 db  83h
.eh_frame:000000000000735A                 db    7
.eh_frame:000000000000735B                 db  4Dh ; M
.eh_frame:000000000000735C                 db  0Eh
.eh_frame:000000000000735D                 db  70h ; p
.eh_frame:000000000000735E                 db  65h ; e
.eh_frame:000000000000735F                 db  0Eh
.eh_frame:0000000000007360                 db  78h ; x
.eh_frame:0000000000007361                 db  4Dh ; M
.eh_frame:0000000000007362                 db  0Eh
.eh_frame:0000000000007363                 db  80h
.eh_frame:0000000000007364                 db    1
.eh_frame:0000000000007365                 db  46h ; F
.eh_frame:0000000000007366                 db  0Eh
.eh_frame:0000000000007367                 db  88h
.eh_frame:0000000000007368                 db    1
.eh_frame:0000000000007369                 db  42h ; B
.eh_frame:000000000000736A                 db  0Eh
.eh_frame:000000000000736B                 db  90h
.eh_frame:000000000000736C                 db    1
.eh_frame:000000000000736D                 db  5Eh ; ^
.eh_frame:000000000000736E                 db  0Eh
.eh_frame:000000000000736F                 db  70h ; p
.eh_frame:0000000000007370                 db  56h ; V
.eh_frame:0000000000007371                 db  0Eh
.eh_frame:0000000000007372                 db  78h ; x
.eh_frame:0000000000007373                 db  43h ; C
.eh_frame:0000000000007374                 db  0Eh
.eh_frame:0000000000007375                 db  80h
.eh_frame:0000000000007376                 db    1
.eh_frame:0000000000007377                 db  43h ; C
.eh_frame:0000000000007378                 db  0Eh
.eh_frame:0000000000007379                 db  88h
.eh_frame:000000000000737A                 db    1
.eh_frame:000000000000737B                 db  56h ; V
.eh_frame:000000000000737C                 db  0Eh
.eh_frame:000000000000737D                 db  90h
.eh_frame:000000000000737E                 db    1
.eh_frame:000000000000737F                 db  52h ; R
.eh_frame:0000000000007380                 db  0Eh
.eh_frame:0000000000007381                 db  70h ; p
.eh_frame:0000000000007382                 db  5Bh ; [
.eh_frame:0000000000007383                 db  0Eh
.eh_frame:0000000000007384                 db  38h ; 8
.eh_frame:0000000000007385                 db  41h ; A
.eh_frame:0000000000007386                 db  0Eh
.eh_frame:0000000000007387                 db  30h ; 0
.eh_frame:0000000000007388                 db  41h ; A
.eh_frame:0000000000007389                 db  0Eh
.eh_frame:000000000000738A                 db  28h ; (
.eh_frame:000000000000738B                 db  42h ; B
.eh_frame:000000000000738C                 db  0Eh
.eh_frame:000000000000738D                 db  20h
.eh_frame:000000000000738E                 db  42h ; B
.eh_frame:000000000000738F                 db  0Eh
.eh_frame:0000000000007390                 db  18h
.eh_frame:0000000000007391                 db  42h ; B
.eh_frame:0000000000007392                 db  0Eh
.eh_frame:0000000000007393                 db  10h
.eh_frame:0000000000007394                 db  42h ; B
.eh_frame:0000000000007395                 db  0Eh
.eh_frame:0000000000007396                 db    8
.eh_frame:0000000000007397                 db    0
.eh_frame:0000000000007398                 db  10h
.eh_frame:0000000000007399                 db    0
.eh_frame:000000000000739A                 db    0
.eh_frame:000000000000739B                 db    0
.eh_frame:000000000000739C                 db  3Ch ; <
.eh_frame:000000000000739D                 db    5
.eh_frame:000000000000739E                 db    0
.eh_frame:000000000000739F                 db    0
.eh_frame:00000000000073A0                 db 0D0h
.eh_frame:00000000000073A1                 db 0D5h
.eh_frame:00000000000073A2                 db 0FFh
.eh_frame:00000000000073A3                 db 0FFh
.eh_frame:00000000000073A4                 db  0Ah
.eh_frame:00000000000073A5                 db    0
.eh_frame:00000000000073A6                 db    0
.eh_frame:00000000000073A7                 db    0
.eh_frame:00000000000073A8                 db    0
.eh_frame:00000000000073A9                 db    0
.eh_frame:00000000000073AA                 db    0
.eh_frame:00000000000073AB                 db    0
.eh_frame:00000000000073AC                 db  28h ; (
.eh_frame:00000000000073AD                 db    0
.eh_frame:00000000000073AE                 db    0
.eh_frame:00000000000073AF                 db    0
.eh_frame:00000000000073B0                 db  50h ; P
.eh_frame:00000000000073B1                 db    5
.eh_frame:00000000000073B2                 db    0
.eh_frame:00000000000073B3                 db    0
.eh_frame:00000000000073B4                 db 0CCh
.eh_frame:00000000000073B5                 db 0D5h
.eh_frame:00000000000073B6                 db 0FFh
.eh_frame:00000000000073B7                 db 0FFh
.eh_frame:00000000000073B8                 db  93h
.eh_frame:00000000000073B9                 db    0
.eh_frame:00000000000073BA                 db    0
.eh_frame:00000000000073BB                 db    0
.eh_frame:00000000000073BC                 db    0
.eh_frame:00000000000073BD                 db  48h ; H
.eh_frame:00000000000073BE                 db  0Eh
.eh_frame:00000000000073BF                 db  10h
.eh_frame:00000000000073C0                 db  8Ch
.eh_frame:00000000000073C1                 db    2
.eh_frame:00000000000073C2                 db  48h ; H
.eh_frame:00000000000073C3                 db  0Eh
.eh_frame:00000000000073C4                 db  18h
.eh_frame:00000000000073C5                 db  86h
.eh_frame:00000000000073C6                 db    3
.eh_frame:00000000000073C7                 db  41h ; A
.eh_frame:00000000000073C8                 db  0Eh
.eh_frame:00000000000073C9                 db  20h
.eh_frame:00000000000073CA                 db  83h
.eh_frame:00000000000073CB                 db    4
.eh_frame:00000000000073CC                 db    2
.eh_frame:00000000000073CD                 db  74h ; t
.eh_frame:00000000000073CE                 db  0Eh
.eh_frame:00000000000073CF                 db  18h
.eh_frame:00000000000073D0                 db  4Bh ; K
.eh_frame:00000000000073D1                 db  0Eh
.eh_frame:00000000000073D2                 db  10h
.eh_frame:00000000000073D3                 db  42h ; B
.eh_frame:00000000000073D4                 db  0Eh
.eh_frame:00000000000073D5                 db    8
.eh_frame:00000000000073D6                 db    0
.eh_frame:00000000000073D7                 db    0
.eh_frame:00000000000073D8                 db  10h
.eh_frame:00000000000073D9                 db    0
.eh_frame:00000000000073DA                 db    0
.eh_frame:00000000000073DB                 db    0
.eh_frame:00000000000073DC                 db  7Ch ; |
.eh_frame:00000000000073DD                 db    5
.eh_frame:00000000000073DE                 db    0
.eh_frame:00000000000073DF                 db    0
.eh_frame:00000000000073E0                 db  40h ; @
.eh_frame:00000000000073E1                 db 0D6h
.eh_frame:00000000000073E2                 db 0FFh
.eh_frame:00000000000073E3                 db 0FFh
.eh_frame:00000000000073E4                 db  13h
.eh_frame:00000000000073E5                 db    0
.eh_frame:00000000000073E6                 db    0
.eh_frame:00000000000073E7                 db    0
.eh_frame:00000000000073E8                 db    0
.eh_frame:00000000000073E9                 db    0
.eh_frame:00000000000073EA                 db    0
.eh_frame:00000000000073EB                 db    0
.eh_frame:00000000000073EC                 db  10h
.eh_frame:00000000000073ED                 db    0
.eh_frame:00000000000073EE                 db    0
.eh_frame:00000000000073EF                 db    0
.eh_frame:00000000000073F0                 db  90h
.eh_frame:00000000000073F1                 db    5
.eh_frame:00000000000073F2                 db    0
.eh_frame:00000000000073F3                 db    0
.eh_frame:00000000000073F4                 db  4Ch ; L
.eh_frame:00000000000073F5                 db 0D6h
.eh_frame:00000000000073F6                 db 0FFh
.eh_frame:00000000000073F7                 db 0FFh
.eh_frame:00000000000073F8                 db  0Ch
.eh_frame:00000000000073F9                 db    0
.eh_frame:00000000000073FA                 db    0
.eh_frame:00000000000073FB                 db    0
.eh_frame:00000000000073FC                 db    0
.eh_frame:00000000000073FD                 db    0
.eh_frame:00000000000073FE                 db    0
.eh_frame:00000000000073FF                 db    0
.eh_frame:0000000000007400                 db  10h
.eh_frame:0000000000007401                 db    0
.eh_frame:0000000000007402                 db    0
.eh_frame:0000000000007403                 db    0
.eh_frame:0000000000007404                 db 0A4h
.eh_frame:0000000000007405                 db    5
.eh_frame:0000000000007406                 db    0
.eh_frame:0000000000007407                 db    0
.eh_frame:0000000000007408                 db  48h ; H
.eh_frame:0000000000007409                 db 0D6h
.eh_frame:000000000000740A                 db 0FFh
.eh_frame:000000000000740B                 db 0FFh
.eh_frame:000000000000740C                 db  18h
.eh_frame:000000000000740D                 db    0
.eh_frame:000000000000740E                 db    0
.eh_frame:000000000000740F                 db    0
.eh_frame:0000000000007410                 db    0
.eh_frame:0000000000007411                 db    0
.eh_frame:0000000000007412                 db    0
.eh_frame:0000000000007413                 db    0
.eh_frame:0000000000007414                 db  10h
.eh_frame:0000000000007415                 db    0
.eh_frame:0000000000007416                 db    0
.eh_frame:0000000000007417                 db    0
.eh_frame:0000000000007418                 db 0B8h
.eh_frame:0000000000007419                 db    5
.eh_frame:000000000000741A                 db    0
.eh_frame:000000000000741B                 db    0
.eh_frame:000000000000741C                 db  54h ; T
.eh_frame:000000000000741D                 db 0D6h
.eh_frame:000000000000741E                 db 0FFh
.eh_frame:000000000000741F                 db 0FFh
.eh_frame:0000000000007420                 db  14h
.eh_frame:0000000000007421                 db    0
.eh_frame:0000000000007422                 db    0
.eh_frame:0000000000007423                 db    0
.eh_frame:0000000000007424                 db    0
.eh_frame:0000000000007425                 db    0
.eh_frame:0000000000007426                 db    0
.eh_frame:0000000000007427                 db    0
.eh_frame:0000000000007428                 db  18h
.eh_frame:0000000000007429                 db    0
.eh_frame:000000000000742A                 db    0
.eh_frame:000000000000742B                 db    0
.eh_frame:000000000000742C                 db 0CCh
.eh_frame:000000000000742D                 db    5
.eh_frame:000000000000742E                 db    0
.eh_frame:000000000000742F                 db    0
.eh_frame:0000000000007430                 db  60h ; `
.eh_frame:0000000000007431                 db 0D6h
.eh_frame:0000000000007432                 db 0FFh
.eh_frame:0000000000007433                 db 0FFh
.eh_frame:0000000000007434                 db  8Eh
.eh_frame:0000000000007435                 db    0
.eh_frame:0000000000007436                 db    0
.eh_frame:0000000000007437                 db    0
.eh_frame:0000000000007438                 db    0
.eh_frame:0000000000007439                 db  44h ; D
.eh_frame:000000000000743A                 db  0Eh
.eh_frame:000000000000743B                 db  50h ; P
.eh_frame:000000000000743C                 db    2
.eh_frame:000000000000743D                 db  7Fh ; 
.eh_frame:000000000000743E                 db  0Ah
.eh_frame:000000000000743F                 db  0Eh
.eh_frame:0000000000007440                 db    8
.eh_frame:0000000000007441                 db  41h ; A
.eh_frame:0000000000007442                 db  0Bh
.eh_frame:0000000000007443                 db    0
.eh_frame:0000000000007444                 db  18h
.eh_frame:0000000000007445                 db    0
.eh_frame:0000000000007446                 db    0
.eh_frame:0000000000007447                 db    0
.eh_frame:0000000000007448                 db 0E8h
.eh_frame:0000000000007449                 db    5
.eh_frame:000000000000744A                 db    0
.eh_frame:000000000000744B                 db    0
.eh_frame:000000000000744C                 db 0D4h
.eh_frame:000000000000744D                 db 0D6h
.eh_frame:000000000000744E                 db 0FFh
.eh_frame:000000000000744F                 db 0FFh
.eh_frame:0000000000007450                 db  8Ah
.eh_frame:0000000000007451                 db    0
.eh_frame:0000000000007452                 db    0
.eh_frame:0000000000007453                 db    0
.eh_frame:0000000000007454                 db    0
.eh_frame:0000000000007455                 db  44h ; D
.eh_frame:0000000000007456                 db  0Eh
.eh_frame:0000000000007457                 db  50h ; P
.eh_frame:0000000000007458                 db    2
.eh_frame:0000000000007459                 db  7Bh ; {
.eh_frame:000000000000745A                 db  0Ah
.eh_frame:000000000000745B                 db  0Eh
.eh_frame:000000000000745C                 db    8
.eh_frame:000000000000745D                 db  41h ; A
.eh_frame:000000000000745E                 db  0Bh
.eh_frame:000000000000745F                 db    0
.eh_frame:0000000000007460                 db  10h
.eh_frame:0000000000007461                 db    0
.eh_frame:0000000000007462                 db    0
.eh_frame:0000000000007463                 db    0
.eh_frame:0000000000007464                 db    4
.eh_frame:0000000000007465                 db    6
.eh_frame:0000000000007466                 db    0
.eh_frame:0000000000007467                 db    0
.eh_frame:0000000000007468                 db  48h ; H
.eh_frame:0000000000007469                 db 0D7h
.eh_frame:000000000000746A                 db 0FFh
.eh_frame:000000000000746B                 db 0FFh
.eh_frame:000000000000746C                 db  0Ch
.eh_frame:000000000000746D                 db    0
.eh_frame:000000000000746E                 db    0
.eh_frame:000000000000746F                 db    0
.eh_frame:0000000000007470                 db    0
.eh_frame:0000000000007471                 db    0
.eh_frame:0000000000007472                 db    0
.eh_frame:0000000000007473                 db    0
.eh_frame:0000000000007474                 db  10h
.eh_frame:0000000000007475                 db    0
.eh_frame:0000000000007476                 db    0
.eh_frame:0000000000007477                 db    0
.eh_frame:0000000000007478                 db  18h
.eh_frame:0000000000007479                 db    6
.eh_frame:000000000000747A                 db    0
.eh_frame:000000000000747B                 db    0
.eh_frame:000000000000747C                 db  44h ; D
.eh_frame:000000000000747D                 db 0D7h
.eh_frame:000000000000747E                 db 0FFh
.eh_frame:000000000000747F                 db 0FFh
.eh_frame:0000000000007480                 db  0Fh
.eh_frame:0000000000007481                 db    0
.eh_frame:0000000000007482                 db    0
.eh_frame:0000000000007483                 db    0
.eh_frame:0000000000007484                 db    0
.eh_frame:0000000000007485                 db    0
.eh_frame:0000000000007486                 db    0
.eh_frame:0000000000007487                 db    0
.eh_frame:0000000000007488                 db  18h
.eh_frame:0000000000007489                 db    0
.eh_frame:000000000000748A                 db    0
.eh_frame:000000000000748B                 db    0
.eh_frame:000000000000748C                 db  2Ch ; ,
.eh_frame:000000000000748D                 db    6
.eh_frame:000000000000748E                 db    0
.eh_frame:000000000000748F                 db    0
.eh_frame:0000000000007490                 db  40h ; @
.eh_frame:0000000000007491                 db 0D7h
.eh_frame:0000000000007492                 db 0FFh
.eh_frame:0000000000007493                 db 0FFh
.eh_frame:0000000000007494                 db  98h
.eh_frame:0000000000007495                 db    0
.eh_frame:0000000000007496                 db    0
.eh_frame:0000000000007497                 db    0
.eh_frame:0000000000007498                 db    0
.eh_frame:0000000000007499                 db  44h ; D
.eh_frame:000000000000749A                 db  0Eh
.eh_frame:000000000000749B                 db  50h ; P
.eh_frame:000000000000749C                 db    2
.eh_frame:000000000000749D                 db  8Eh
.eh_frame:000000000000749E                 db  0Ah
.eh_frame:000000000000749F                 db  0Eh
.eh_frame:00000000000074A0                 db    8
.eh_frame:00000000000074A1                 db  41h ; A
.eh_frame:00000000000074A2                 db  0Bh
.eh_frame:00000000000074A3                 db    0
.eh_frame:00000000000074A4                 db  10h
.eh_frame:00000000000074A5                 db    0
.eh_frame:00000000000074A6                 db    0
.eh_frame:00000000000074A7                 db    0
.eh_frame:00000000000074A8                 db  48h ; H
.eh_frame:00000000000074A9                 db    6
.eh_frame:00000000000074AA                 db    0
.eh_frame:00000000000074AB                 db    0
.eh_frame:00000000000074AC                 db 0C4h
.eh_frame:00000000000074AD                 db 0D7h
.eh_frame:00000000000074AE                 db 0FFh
.eh_frame:00000000000074AF                 db 0FFh
.eh_frame:00000000000074B0                 db  10h
.eh_frame:00000000000074B1                 db    0
.eh_frame:00000000000074B2                 db    0
.eh_frame:00000000000074B3                 db    0
.eh_frame:00000000000074B4                 db    0
.eh_frame:00000000000074B5                 db    0
.eh_frame:00000000000074B6                 db    0
.eh_frame:00000000000074B7                 db    0
.eh_frame:00000000000074B8                 db  10h
.eh_frame:00000000000074B9                 db    0
.eh_frame:00000000000074BA                 db    0
.eh_frame:00000000000074BB                 db    0
.eh_frame:00000000000074BC                 db  5Ch ; \
.eh_frame:00000000000074BD                 db    6
.eh_frame:00000000000074BE                 db    0
.eh_frame:00000000000074BF                 db    0
.eh_frame:00000000000074C0                 db 0C0h
.eh_frame:00000000000074C1                 db 0D7h
.eh_frame:00000000000074C2                 db 0FFh
.eh_frame:00000000000074C3                 db 0FFh
.eh_frame:00000000000074C4                 db  11h
.eh_frame:00000000000074C5                 db    0
.eh_frame:00000000000074C6                 db    0
.eh_frame:00000000000074C7                 db    0
.eh_frame:00000000000074C8                 db    0
.eh_frame:00000000000074C9                 db    0
.eh_frame:00000000000074CA                 db    0
.eh_frame:00000000000074CB                 db    0
.eh_frame:00000000000074CC                 db  10h
.eh_frame:00000000000074CD                 db    0
.eh_frame:00000000000074CE                 db    0
.eh_frame:00000000000074CF                 db    0
.eh_frame:00000000000074D0                 db  70h ; p
.eh_frame:00000000000074D1                 db    6
.eh_frame:00000000000074D2                 db    0
.eh_frame:00000000000074D3                 db    0
.eh_frame:00000000000074D4                 db 0CCh
.eh_frame:00000000000074D5                 db 0D7h
.eh_frame:00000000000074D6                 db 0FFh
.eh_frame:00000000000074D7                 db 0FFh
.eh_frame:00000000000074D8                 db  0Ah
.eh_frame:00000000000074D9                 db    0
.eh_frame:00000000000074DA                 db    0
.eh_frame:00000000000074DB                 db    0
.eh_frame:00000000000074DC                 db    0
.eh_frame:00000000000074DD                 db    0
.eh_frame:00000000000074DE                 db    0
.eh_frame:00000000000074DF                 db    0
.eh_frame:00000000000074E0                 db  18h
.eh_frame:00000000000074E1                 db    0
.eh_frame:00000000000074E2                 db    0
.eh_frame:00000000000074E3                 db    0
.eh_frame:00000000000074E4                 db  84h
.eh_frame:00000000000074E5                 db    6
.eh_frame:00000000000074E6                 db    0
.eh_frame:00000000000074E7                 db    0
.eh_frame:00000000000074E8                 db 0C8h
.eh_frame:00000000000074E9                 db 0D7h
.eh_frame:00000000000074EA                 db 0FFh
.eh_frame:00000000000074EB                 db 0FFh
.eh_frame:00000000000074EC                 db  8Eh
.eh_frame:00000000000074ED                 db    0
.eh_frame:00000000000074EE                 db    0
.eh_frame:00000000000074EF                 db    0
.eh_frame:00000000000074F0                 db    0
.eh_frame:00000000000074F1                 db  44h ; D
.eh_frame:00000000000074F2                 db  0Eh
.eh_frame:00000000000074F3                 db  50h ; P
.eh_frame:00000000000074F4                 db    2
.eh_frame:00000000000074F5                 db  7Fh ; 
.eh_frame:00000000000074F6                 db  0Ah
.eh_frame:00000000000074F7                 db  0Eh
.eh_frame:00000000000074F8                 db    8
.eh_frame:00000000000074F9                 db  41h ; A
.eh_frame:00000000000074FA                 db  0Bh
.eh_frame:00000000000074FB                 db    0
.eh_frame:00000000000074FC                 db  18h
.eh_frame:00000000000074FD                 db    0
.eh_frame:00000000000074FE                 db    0
.eh_frame:00000000000074FF                 db    0
.eh_frame:0000000000007500                 db 0A0h
.eh_frame:0000000000007501                 db    6
.eh_frame:0000000000007502                 db    0
.eh_frame:0000000000007503                 db    0
.eh_frame:0000000000007504                 db  3Ch ; <
.eh_frame:0000000000007505                 db 0D8h
.eh_frame:0000000000007506                 db 0FFh
.eh_frame:0000000000007507                 db 0FFh
.eh_frame:0000000000007508                 db  91h
.eh_frame:0000000000007509                 db    0
.eh_frame:000000000000750A                 db    0
.eh_frame:000000000000750B                 db    0
.eh_frame:000000000000750C                 db    0
.eh_frame:000000000000750D                 db  44h ; D
.eh_frame:000000000000750E                 db  0Eh
.eh_frame:000000000000750F                 db  50h ; P
.eh_frame:0000000000007510                 db    2
.eh_frame:0000000000007511                 db  82h
.eh_frame:0000000000007512                 db  0Ah
.eh_frame:0000000000007513                 db  0Eh
.eh_frame:0000000000007514                 db    8
.eh_frame:0000000000007515                 db  41h ; A
.eh_frame:0000000000007516                 db  0Bh
.eh_frame:0000000000007517                 db    0
.eh_frame:0000000000007518                 db  10h
.eh_frame:0000000000007519                 db    0
.eh_frame:000000000000751A                 db    0
.eh_frame:000000000000751B                 db    0
.eh_frame:000000000000751C                 db 0BCh
.eh_frame:000000000000751D                 db    6
.eh_frame:000000000000751E                 db    0
.eh_frame:000000000000751F                 db    0
.eh_frame:0000000000007520                 db 0C0h
.eh_frame:0000000000007521                 db 0D8h
.eh_frame:0000000000007522                 db 0FFh
.eh_frame:0000000000007523                 db 0FFh
.eh_frame:0000000000007524                 db  0Ch
.eh_frame:0000000000007525                 db    0
.eh_frame:0000000000007526                 db    0
.eh_frame:0000000000007527                 db    0
.eh_frame:0000000000007528                 db    0
.eh_frame:0000000000007529                 db    0
.eh_frame:000000000000752A                 db    0
.eh_frame:000000000000752B                 db    0
.eh_frame:000000000000752C                 db  10h
.eh_frame:000000000000752D                 db    0
.eh_frame:000000000000752E                 db    0
.eh_frame:000000000000752F                 db    0
.eh_frame:0000000000007530                 db 0D0h
.eh_frame:0000000000007531                 db    6
.eh_frame:0000000000007532                 db    0
.eh_frame:0000000000007533                 db    0
.eh_frame:0000000000007534                 db 0BCh
.eh_frame:0000000000007535                 db 0D8h
.eh_frame:0000000000007536                 db 0FFh
.eh_frame:0000000000007537                 db 0FFh
.eh_frame:0000000000007538                 db  17h
.eh_frame:0000000000007539                 db    0
.eh_frame:000000000000753A                 db    0
.eh_frame:000000000000753B                 db    0
.eh_frame:000000000000753C                 db    0
.eh_frame:000000000000753D                 db    0
.eh_frame:000000000000753E                 db    0
.eh_frame:000000000000753F                 db    0
.eh_frame:0000000000007540                 db  10h
.eh_frame:0000000000007541                 db    0
.eh_frame:0000000000007542                 db    0
.eh_frame:0000000000007543                 db    0
.eh_frame:0000000000007544                 db 0E4h
.eh_frame:0000000000007545                 db    6
.eh_frame:0000000000007546                 db    0
.eh_frame:0000000000007547                 db    0
.eh_frame:0000000000007548                 db 0C8h
.eh_frame:0000000000007549                 db 0D8h
.eh_frame:000000000000754A                 db 0FFh
.eh_frame:000000000000754B                 db 0FFh
.eh_frame:000000000000754C                 db  13h
.eh_frame:000000000000754D                 db    0
.eh_frame:000000000000754E                 db    0
.eh_frame:000000000000754F                 db    0
.eh_frame:0000000000007550                 db    0
.eh_frame:0000000000007551                 db    0
.eh_frame:0000000000007552                 db    0
.eh_frame:0000000000007553                 db    0
.eh_frame:0000000000007554                 db  10h
.eh_frame:0000000000007555                 db    0
.eh_frame:0000000000007556                 db    0
.eh_frame:0000000000007557                 db    0
.eh_frame:0000000000007558                 db 0F8h
.eh_frame:0000000000007559                 db    6
.eh_frame:000000000000755A                 db    0
.eh_frame:000000000000755B                 db    0
.eh_frame:000000000000755C                 db 0D4h
.eh_frame:000000000000755D                 db 0D8h
.eh_frame:000000000000755E                 db 0FFh
.eh_frame:000000000000755F                 db 0FFh
.eh_frame:0000000000007560                 db  0Ch
.eh_frame:0000000000007561                 db    0
.eh_frame:0000000000007562                 db    0
.eh_frame:0000000000007563                 db    0
.eh_frame:0000000000007564                 db    0
.eh_frame:0000000000007565                 db    0
.eh_frame:0000000000007566                 db    0
.eh_frame:0000000000007567                 db    0
.eh_frame:0000000000007568                 db  10h
.eh_frame:0000000000007569                 db    0
.eh_frame:000000000000756A                 db    0
.eh_frame:000000000000756B                 db    0
.eh_frame:000000000000756C                 db  0Ch
.eh_frame:000000000000756D                 db    7
.eh_frame:000000000000756E                 db    0
.eh_frame:000000000000756F                 db    0
.eh_frame:0000000000007570                 db 0D0h
.eh_frame:0000000000007571                 db 0D8h
.eh_frame:0000000000007572                 db 0FFh
.eh_frame:0000000000007573                 db 0FFh
.eh_frame:0000000000007574                 db  14h
.eh_frame:0000000000007575                 db    0
.eh_frame:0000000000007576                 db    0
.eh_frame:0000000000007577                 db    0
.eh_frame:0000000000007578                 db    0
.eh_frame:0000000000007579                 db    0
.eh_frame:000000000000757A                 db    0
.eh_frame:000000000000757B                 db    0
.eh_frame:000000000000757C                 db  10h
.eh_frame:000000000000757D                 db    0
.eh_frame:000000000000757E                 db    0
.eh_frame:000000000000757F                 db    0
.eh_frame:0000000000007580                 db  20h
.eh_frame:0000000000007581                 db    7
.eh_frame:0000000000007582                 db    0
.eh_frame:0000000000007583                 db    0
.eh_frame:0000000000007584                 db 0DCh
.eh_frame:0000000000007585                 db 0D8h
.eh_frame:0000000000007586                 db 0FFh
.eh_frame:0000000000007587                 db 0FFh
.eh_frame:0000000000007588                 db  13h
.eh_frame:0000000000007589                 db    0
.eh_frame:000000000000758A                 db    0
.eh_frame:000000000000758B                 db    0
.eh_frame:000000000000758C                 db    0
.eh_frame:000000000000758D                 db    0
.eh_frame:000000000000758E                 db    0
.eh_frame:000000000000758F                 db    0
.eh_frame:0000000000007590                 db  14h
.eh_frame:0000000000007591                 db    0
.eh_frame:0000000000007592                 db    0
.eh_frame:0000000000007593                 db    0
.eh_frame:0000000000007594                 db  34h ; 4
.eh_frame:0000000000007595                 db    7
.eh_frame:0000000000007596                 db    0
.eh_frame:0000000000007597                 db    0
.eh_frame:0000000000007598                 db 0E8h
.eh_frame:0000000000007599                 db 0D8h
.eh_frame:000000000000759A                 db 0FFh
.eh_frame:000000000000759B                 db 0FFh
.eh_frame:000000000000759C                 db  18h
.eh_frame:000000000000759D                 db    0
.eh_frame:000000000000759E                 db    0
.eh_frame:000000000000759F                 db    0
.eh_frame:00000000000075A0                 db    0
.eh_frame:00000000000075A1                 db    0
.eh_frame:00000000000075A2                 db    0
.eh_frame:00000000000075A3                 db    0
.eh_frame:00000000000075A4                 db    0
.eh_frame:00000000000075A5                 db    0
.eh_frame:00000000000075A6                 db    0
.eh_frame:00000000000075A7                 db    0
.eh_frame:00000000000075A8                 db  10h
.eh_frame:00000000000075A9                 db    1
.eh_frame:00000000000075AA                 db    0
.eh_frame:00000000000075AB                 db    0
.eh_frame:00000000000075AC                 db  4Ch ; L
.eh_frame:00000000000075AD                 db    7
.eh_frame:00000000000075AE                 db    0
.eh_frame:00000000000075AF                 db    0
.eh_frame:00000000000075B0                 db 0F0h
.eh_frame:00000000000075B1                 db 0D8h
.eh_frame:00000000000075B2                 db 0FFh
.eh_frame:00000000000075B3                 db 0FFh
.eh_frame:00000000000075B4                 db  17h
.eh_frame:00000000000075B5                 db    4
.eh_frame:00000000000075B6                 db    0
.eh_frame:00000000000075B7                 db    0
.eh_frame:00000000000075B8                 db    0
.eh_frame:00000000000075B9                 db  42h ; B
.eh_frame:00000000000075BA                 db  0Eh
.eh_frame:00000000000075BB                 db  10h
.eh_frame:00000000000075BC                 db  8Fh
.eh_frame:00000000000075BD                 db    2
.eh_frame:00000000000075BE                 db  42h ; B
.eh_frame:00000000000075BF                 db  0Eh
.eh_frame:00000000000075C0                 db  18h
.eh_frame:00000000000075C1                 db  8Eh
.eh_frame:00000000000075C2                 db    3
.eh_frame:00000000000075C3                 db  42h ; B
.eh_frame:00000000000075C4                 db  0Eh
.eh_frame:00000000000075C5                 db  20h
.eh_frame:00000000000075C6                 db  8Dh
.eh_frame:00000000000075C7                 db    4
.eh_frame:00000000000075C8                 db  42h ; B
.eh_frame:00000000000075C9                 db  0Eh
.eh_frame:00000000000075CA                 db  28h ; (
.eh_frame:00000000000075CB                 db  8Ch
.eh_frame:00000000000075CC                 db    5
.eh_frame:00000000000075CD                 db  44h ; D
.eh_frame:00000000000075CE                 db  0Eh
.eh_frame:00000000000075CF                 db  30h ; 0
.eh_frame:00000000000075D0                 db  86h
.eh_frame:00000000000075D1                 db    6
.eh_frame:00000000000075D2                 db  41h ; A
.eh_frame:00000000000075D3                 db  0Eh
.eh_frame:00000000000075D4                 db  38h ; 8
.eh_frame:00000000000075D5                 db  83h
.eh_frame:00000000000075D6                 db    7
.eh_frame:00000000000075D7                 db  4Ah ; J
.eh_frame:00000000000075D8                 db  0Eh
.eh_frame:00000000000075D9                 db  60h ; `
.eh_frame:00000000000075DA                 db    2
.eh_frame:00000000000075DB                 db 0DDh
.eh_frame:00000000000075DC                 db  0Eh
.eh_frame:00000000000075DD                 db  68h ; h
.eh_frame:00000000000075DE                 db  57h ; W
.eh_frame:00000000000075DF                 db  0Eh
.eh_frame:00000000000075E0                 db  70h ; p
.eh_frame:00000000000075E1                 db  42h ; B
.eh_frame:00000000000075E2                 db  0Eh
.eh_frame:00000000000075E3                 db  78h ; x
.eh_frame:00000000000075E4                 db  42h ; B
.eh_frame:00000000000075E5                 db  0Eh
.eh_frame:00000000000075E6                 db  80h
.eh_frame:00000000000075E7                 db    1
.eh_frame:00000000000075E8                 db  42h ; B
.eh_frame:00000000000075E9                 db  0Eh
.eh_frame:00000000000075EA                 db  88h
.eh_frame:00000000000075EB                 db    1
.eh_frame:00000000000075EC                 db  42h ; B
.eh_frame:00000000000075ED                 db  0Eh
.eh_frame:00000000000075EE                 db  90h
.eh_frame:00000000000075EF                 db    1
.eh_frame:00000000000075F0                 db  53h ; S
.eh_frame:00000000000075F1                 db  0Eh
.eh_frame:00000000000075F2                 db  60h ; `
.eh_frame:00000000000075F3                 db  44h ; D
.eh_frame:00000000000075F4                 db  0Ah
.eh_frame:00000000000075F5                 db  0Eh
.eh_frame:00000000000075F6                 db  38h ; 8
.eh_frame:00000000000075F7                 db  41h ; A
.eh_frame:00000000000075F8                 db  0Eh
.eh_frame:00000000000075F9                 db  30h ; 0
.eh_frame:00000000000075FA                 db  41h ; A
.eh_frame:00000000000075FB                 db  0Eh
.eh_frame:00000000000075FC                 db  28h ; (
.eh_frame:00000000000075FD                 db  42h ; B
.eh_frame:00000000000075FE                 db  0Eh
.eh_frame:00000000000075FF                 db  20h
.eh_frame:0000000000007600                 db  42h ; B
.eh_frame:0000000000007601                 db  0Eh
.eh_frame:0000000000007602                 db  18h
.eh_frame:0000000000007603                 db  42h ; B
.eh_frame:0000000000007604                 db  0Eh
.eh_frame:0000000000007605                 db  10h
.eh_frame:0000000000007606                 db  42h ; B
.eh_frame:0000000000007607                 db  0Eh
.eh_frame:0000000000007608                 db    8
.eh_frame:0000000000007609                 db  44h ; D
.eh_frame:000000000000760A                 db  0Bh
.eh_frame:000000000000760B                 db    2
.eh_frame:000000000000760C                 db  78h ; x
.eh_frame:000000000000760D                 db  0Ah
.eh_frame:000000000000760E                 db  0Eh
.eh_frame:000000000000760F                 db  68h ; h
.eh_frame:0000000000007610                 db  48h ; H
.eh_frame:0000000000007611                 db  0Bh
.eh_frame:0000000000007612                 db  5Ah ; Z
.eh_frame:0000000000007613                 db  0Ah
.eh_frame:0000000000007614                 db  0Eh
.eh_frame:0000000000007615                 db  38h ; 8
.eh_frame:0000000000007616                 db  47h ; G
.eh_frame:0000000000007617                 db  0Eh
.eh_frame:0000000000007618                 db  30h ; 0
.eh_frame:0000000000007619                 db  41h ; A
.eh_frame:000000000000761A                 db  0Eh
.eh_frame:000000000000761B                 db  28h ; (
.eh_frame:000000000000761C                 db  42h ; B
.eh_frame:000000000000761D                 db  0Eh
.eh_frame:000000000000761E                 db  20h
.eh_frame:000000000000761F                 db  42h ; B
.eh_frame:0000000000007620                 db  0Eh
.eh_frame:0000000000007621                 db  18h
.eh_frame:0000000000007622                 db  42h ; B
.eh_frame:0000000000007623                 db  0Eh
.eh_frame:0000000000007624                 db  10h
.eh_frame:0000000000007625                 db  42h ; B
.eh_frame:0000000000007626                 db  0Eh
.eh_frame:0000000000007627                 db    8
.eh_frame:0000000000007628                 db  56h ; V
.eh_frame:0000000000007629                 db  0Bh
.eh_frame:000000000000762A                 db  5Eh ; ^
.eh_frame:000000000000762B                 db  0Ah
.eh_frame:000000000000762C                 db  0Eh
.eh_frame:000000000000762D                 db  38h ; 8
.eh_frame:000000000000762E                 db  52h ; R
.eh_frame:000000000000762F                 db  0Eh
.eh_frame:0000000000007630                 db  30h ; 0
.eh_frame:0000000000007631                 db  41h ; A
.eh_frame:0000000000007632                 db  0Eh
.eh_frame:0000000000007633                 db  28h ; (
.eh_frame:0000000000007634                 db  42h ; B
.eh_frame:0000000000007635                 db  0Eh
.eh_frame:0000000000007636                 db  20h
.eh_frame:0000000000007637                 db  42h ; B
.eh_frame:0000000000007638                 db  0Eh
.eh_frame:0000000000007639                 db  18h
.eh_frame:000000000000763A                 db  42h ; B
.eh_frame:000000000000763B                 db  0Eh
.eh_frame:000000000000763C                 db  10h
.eh_frame:000000000000763D                 db  42h ; B
.eh_frame:000000000000763E                 db  0Eh
.eh_frame:000000000000763F                 db    8
.eh_frame:0000000000007640                 db  4Fh ; O
.eh_frame:0000000000007641                 db  0Bh
.eh_frame:0000000000007642                 db  62h ; b
.eh_frame:0000000000007643                 db  0Ah
.eh_frame:0000000000007644                 db  0Eh
.eh_frame:0000000000007645                 db  38h ; 8
.eh_frame:0000000000007646                 db  50h ; P
.eh_frame:0000000000007647                 db  0Eh
.eh_frame:0000000000007648                 db  30h ; 0
.eh_frame:0000000000007649                 db  41h ; A
.eh_frame:000000000000764A                 db  0Eh
.eh_frame:000000000000764B                 db  28h ; (
.eh_frame:000000000000764C                 db  42h ; B
.eh_frame:000000000000764D                 db  0Eh
.eh_frame:000000000000764E                 db  20h
.eh_frame:000000000000764F                 db  42h ; B
.eh_frame:0000000000007650                 db  0Eh
.eh_frame:0000000000007651                 db  18h
.eh_frame:0000000000007652                 db  42h ; B
.eh_frame:0000000000007653                 db  0Eh
.eh_frame:0000000000007654                 db  10h
.eh_frame:0000000000007655                 db  42h ; B
.eh_frame:0000000000007656                 db  0Eh
.eh_frame:0000000000007657                 db    8
.eh_frame:0000000000007658                 db  55h ; U
.eh_frame:0000000000007659                 db  0Bh
.eh_frame:000000000000765A                 db  66h ; f
.eh_frame:000000000000765B                 db  0Eh
.eh_frame:000000000000765C                 db  68h ; h
.eh_frame:000000000000765D                 db  42h ; B
.eh_frame:000000000000765E                 db  0Eh
.eh_frame:000000000000765F                 db  70h ; p
.eh_frame:0000000000007660                 db  5Ch ; \
.eh_frame:0000000000007661                 db  0Eh
.eh_frame:0000000000007662                 db  68h ; h
.eh_frame:0000000000007663                 db  41h ; A
.eh_frame:0000000000007664                 db  0Eh
.eh_frame:0000000000007665                 db  60h ; `
.eh_frame:0000000000007666                 db  44h ; D
.eh_frame:0000000000007667                 db  0Ah
.eh_frame:0000000000007668                 db  0Eh
.eh_frame:0000000000007669                 db  38h ; 8
.eh_frame:000000000000766A                 db  41h ; A
.eh_frame:000000000000766B                 db  0Eh
.eh_frame:000000000000766C                 db  30h ; 0
.eh_frame:000000000000766D                 db  41h ; A
.eh_frame:000000000000766E                 db  0Eh
.eh_frame:000000000000766F                 db  28h ; (
.eh_frame:0000000000007670                 db  42h ; B
.eh_frame:0000000000007671                 db  0Eh
.eh_frame:0000000000007672                 db  20h
.eh_frame:0000000000007673                 db  42h ; B
.eh_frame:0000000000007674                 db  0Eh
.eh_frame:0000000000007675                 db  18h
.eh_frame:0000000000007676                 db  42h ; B
.eh_frame:0000000000007677                 db  0Eh
.eh_frame:0000000000007678                 db  10h
.eh_frame:0000000000007679                 db  42h ; B
.eh_frame:000000000000767A                 db  0Eh
.eh_frame:000000000000767B                 db    8
.eh_frame:000000000000767C                 db  45h ; E
.eh_frame:000000000000767D                 db  0Bh
.eh_frame:000000000000767E                 db  68h ; h
.eh_frame:000000000000767F                 db  0Ah
.eh_frame:0000000000007680                 db  0Eh
.eh_frame:0000000000007681                 db  68h ; h
.eh_frame:0000000000007682                 db  48h ; H
.eh_frame:0000000000007683                 db  0Bh
.eh_frame:0000000000007684                 db  72h ; r
.eh_frame:0000000000007685                 db  0Eh
.eh_frame:0000000000007686                 db  68h ; h
.eh_frame:0000000000007687                 db  45h ; E
.eh_frame:0000000000007688                 db  0Eh
.eh_frame:0000000000007689                 db  70h ; p
.eh_frame:000000000000768A                 db  42h ; B
.eh_frame:000000000000768B                 db  0Eh
.eh_frame:000000000000768C                 db  78h ; x
.eh_frame:000000000000768D                 db  42h ; B
.eh_frame:000000000000768E                 db  0Eh
.eh_frame:000000000000768F                 db  80h
.eh_frame:0000000000007690                 db    1
.eh_frame:0000000000007691                 db  5Eh ; ^
.eh_frame:0000000000007692                 db  0Eh
.eh_frame:0000000000007693                 db  60h ; `
.eh_frame:0000000000007694                 db  44h ; D
.eh_frame:0000000000007695                 db  0Ah
.eh_frame:0000000000007696                 db  0Eh
.eh_frame:0000000000007697                 db  38h ; 8
.eh_frame:0000000000007698                 db  41h ; A
.eh_frame:0000000000007699                 db  0Eh
.eh_frame:000000000000769A                 db  30h ; 0
.eh_frame:000000000000769B                 db  41h ; A
.eh_frame:000000000000769C                 db  0Eh
.eh_frame:000000000000769D                 db  28h ; (
.eh_frame:000000000000769E                 db  42h ; B
.eh_frame:000000000000769F                 db  0Eh
.eh_frame:00000000000076A0                 db  20h
.eh_frame:00000000000076A1                 db  42h ; B
.eh_frame:00000000000076A2                 db  0Eh
.eh_frame:00000000000076A3                 db  18h
.eh_frame:00000000000076A4                 db  42h ; B
.eh_frame:00000000000076A5                 db  0Eh
.eh_frame:00000000000076A6                 db  10h
.eh_frame:00000000000076A7                 db  42h ; B
.eh_frame:00000000000076A8                 db  0Eh
.eh_frame:00000000000076A9                 db    8
.eh_frame:00000000000076AA                 db  41h ; A
.eh_frame:00000000000076AB                 db  0Bh
.eh_frame:00000000000076AC                 db  79h ; y
.eh_frame:00000000000076AD                 db  0Ah
.eh_frame:00000000000076AE                 db  0Eh
.eh_frame:00000000000076AF                 db  68h ; h
.eh_frame:00000000000076B0                 db  42h ; B
.eh_frame:00000000000076B1                 db  0Eh
.eh_frame:00000000000076B2                 db  70h ; p
.eh_frame:00000000000076B3                 db  42h ; B
.eh_frame:00000000000076B4                 db  0Eh
.eh_frame:00000000000076B5                 db  78h ; x
.eh_frame:00000000000076B6                 db  42h ; B
.eh_frame:00000000000076B7                 db  0Eh
.eh_frame:00000000000076B8                 db  80h
.eh_frame:00000000000076B9                 db    1
.eh_frame:00000000000076BA                 db  51h ; Q
.eh_frame:00000000000076BB                 db  0Bh
.eh_frame:00000000000076BC                 db  10h
.eh_frame:00000000000076BD                 db    0
.eh_frame:00000000000076BE                 db    0
.eh_frame:00000000000076BF                 db    0
.eh_frame:00000000000076C0                 db  60h ; `
.eh_frame:00000000000076C1                 db    8
.eh_frame:00000000000076C2                 db    0
.eh_frame:00000000000076C3                 db    0
.eh_frame:00000000000076C4                 db 0FCh
.eh_frame:00000000000076C5                 db 0DBh
.eh_frame:00000000000076C6                 db 0FFh
.eh_frame:00000000000076C7                 db 0FFh
.eh_frame:00000000000076C8                 db  20h
.eh_frame:00000000000076C9                 db    0
.eh_frame:00000000000076CA                 db    0
.eh_frame:00000000000076CB                 db    0
.eh_frame:00000000000076CC                 db    0
.eh_frame:00000000000076CD                 db    0
.eh_frame:00000000000076CE                 db    0
.eh_frame:00000000000076CF                 db    0
.eh_frame:00000000000076D0                 db  18h
.eh_frame:00000000000076D1                 db    0
.eh_frame:00000000000076D2                 db    0
.eh_frame:00000000000076D3                 db    0
.eh_frame:00000000000076D4                 db  74h ; t
.eh_frame:00000000000076D5                 db    8
.eh_frame:00000000000076D6                 db    0
.eh_frame:00000000000076D7                 db    0
.eh_frame:00000000000076D8                 db    8
.eh_frame:00000000000076D9                 db 0DCh
.eh_frame:00000000000076DA                 db 0FFh
.eh_frame:00000000000076DB                 db 0FFh
.eh_frame:00000000000076DC                 db  78h ; x
.eh_frame:00000000000076DD                 db    0
.eh_frame:00000000000076DE                 db    0
.eh_frame:00000000000076DF                 db    0
.eh_frame:00000000000076E0                 db    0
.eh_frame:00000000000076E1                 db  44h ; D
.eh_frame:00000000000076E2                 db  0Eh
.eh_frame:00000000000076E3                 db  70h ; p
.eh_frame:00000000000076E4                 db    2
.eh_frame:00000000000076E5                 db  60h ; `
.eh_frame:00000000000076E6                 db  0Ah
.eh_frame:00000000000076E7                 db  0Eh
.eh_frame:00000000000076E8                 db    8
.eh_frame:00000000000076E9                 db  41h ; A
.eh_frame:00000000000076EA                 db  0Bh
.eh_frame:00000000000076EB                 db    0
.eh_frame:00000000000076EC                 db  28h ; (
.eh_frame:00000000000076ED                 db    0
.eh_frame:00000000000076EE                 db    0
.eh_frame:00000000000076EF                 db    0
.eh_frame:00000000000076F0                 db  90h
.eh_frame:00000000000076F1                 db    8
.eh_frame:00000000000076F2                 db    0
.eh_frame:00000000000076F3                 db    0
.eh_frame:00000000000076F4                 db  6Ch ; l
.eh_frame:00000000000076F5                 db 0DCh
.eh_frame:00000000000076F6                 db 0FFh
.eh_frame:00000000000076F7                 db 0FFh
.eh_frame:00000000000076F8                 db 0D5h
.eh_frame:00000000000076F9                 db    0
.eh_frame:00000000000076FA                 db    0
.eh_frame:00000000000076FB                 db    0
.eh_frame:00000000000076FC                 db    0
.eh_frame:00000000000076FD                 db  41h ; A
.eh_frame:00000000000076FE                 db  0Eh
.eh_frame:00000000000076FF                 db  10h
.eh_frame:0000000000007700                 db  86h
.eh_frame:0000000000007701                 db    2
.eh_frame:0000000000007702                 db  41h ; A
.eh_frame:0000000000007703                 db  0Eh
.eh_frame:0000000000007704                 db  18h
.eh_frame:0000000000007705                 db  83h
.eh_frame:0000000000007706                 db    3
.eh_frame:0000000000007707                 db  50h ; P
.eh_frame:0000000000007708                 db  0Eh
.eh_frame:0000000000007709                 db 0D0h
.eh_frame:000000000000770A                 db    1
.eh_frame:000000000000770B                 db    2
.eh_frame:000000000000770C                 db 0ABh
.eh_frame:000000000000770D                 db  0Ah
.eh_frame:000000000000770E                 db  0Eh
.eh_frame:000000000000770F                 db  18h
.eh_frame:0000000000007710                 db  41h ; A
.eh_frame:0000000000007711                 db  0Eh
.eh_frame:0000000000007712                 db  10h
.eh_frame:0000000000007713                 db  41h ; A
.eh_frame:0000000000007714                 db  0Eh
.eh_frame:0000000000007715                 db    8
.eh_frame:0000000000007716                 db  41h ; A
.eh_frame:0000000000007717                 db  0Bh
.eh_frame:0000000000007718                 db  1Ch
.eh_frame:0000000000007719                 db    0
.eh_frame:000000000000771A                 db    0
.eh_frame:000000000000771B                 db    0
.eh_frame:000000000000771C                 db 0BCh
.eh_frame:000000000000771D                 db    8
.eh_frame:000000000000771E                 db    0
.eh_frame:000000000000771F                 db    0
.eh_frame:0000000000007720                 db  20h
.eh_frame:0000000000007721                 db 0DDh
.eh_frame:0000000000007722                 db 0FFh
.eh_frame:0000000000007723                 db 0FFh
.eh_frame:0000000000007724                 db  80h
.eh_frame:0000000000007725                 db    0
.eh_frame:0000000000007726                 db    0
.eh_frame:0000000000007727                 db    0
.eh_frame:0000000000007728                 db    0
.eh_frame:0000000000007729                 db  41h ; A
.eh_frame:000000000000772A                 db  0Eh
.eh_frame:000000000000772B                 db  10h
.eh_frame:000000000000772C                 db  83h
.eh_frame:000000000000772D                 db    2
.eh_frame:000000000000772E                 db    2
.eh_frame:000000000000772F                 db  7Ah ; z
.eh_frame:0000000000007730                 db  0Eh
.eh_frame:0000000000007731                 db    8
.eh_frame:0000000000007732                 db    0
.eh_frame:0000000000007733                 db    0
.eh_frame:0000000000007734                 db    0
.eh_frame:0000000000007735                 db    0
.eh_frame:0000000000007736                 db    0
.eh_frame:0000000000007737                 db    0
.eh_frame:0000000000007738                 db  18h
.eh_frame:0000000000007739                 db    0
.eh_frame:000000000000773A                 db    0
.eh_frame:000000000000773B                 db    0
.eh_frame:000000000000773C                 db 0DCh
.eh_frame:000000000000773D                 db    8
.eh_frame:000000000000773E                 db    0
.eh_frame:000000000000773F                 db    0
.eh_frame:0000000000007740                 db  80h
.eh_frame:0000000000007741                 db 0DDh
.eh_frame:0000000000007742                 db 0FFh
.eh_frame:0000000000007743                 db 0FFh
.eh_frame:0000000000007744                 db  1Ah
.eh_frame:0000000000007745                 db    0
.eh_frame:0000000000007746                 db    0
.eh_frame:0000000000007747                 db    0
.eh_frame:0000000000007748                 db    0
.eh_frame:0000000000007749                 db  41h ; A
.eh_frame:000000000000774A                 db  0Eh
.eh_frame:000000000000774B                 db  10h
.eh_frame:000000000000774C                 db  83h
.eh_frame:000000000000774D                 db    2
.eh_frame:000000000000774E                 db  53h ; S
.eh_frame:000000000000774F                 db  0Ah
.eh_frame:0000000000007750                 db  0Eh
.eh_frame:0000000000007751                 db    8
.eh_frame:0000000000007752                 db  41h ; A
.eh_frame:0000000000007753                 db  0Bh
.eh_frame:0000000000007754                 db  10h
.eh_frame:0000000000007755                 db    0
.eh_frame:0000000000007756                 db    0
.eh_frame:0000000000007757                 db    0
.eh_frame:0000000000007758                 db 0F8h
.eh_frame:0000000000007759                 db    8
.eh_frame:000000000000775A                 db    0
.eh_frame:000000000000775B                 db    0
.eh_frame:000000000000775C                 db  84h
.eh_frame:000000000000775D                 db 0DDh
.eh_frame:000000000000775E                 db 0FFh
.eh_frame:000000000000775F                 db 0FFh
.eh_frame:0000000000007760                 db  24h ; $
.eh_frame:0000000000007761                 db    0
.eh_frame:0000000000007762                 db    0
.eh_frame:0000000000007763                 db    0
.eh_frame:0000000000007764                 db    0
.eh_frame:0000000000007765                 db  5Fh ; _
.eh_frame:0000000000007766                 db  0Eh
.eh_frame:0000000000007767                 db  10h
.eh_frame:0000000000007768                 db  10h
.eh_frame:0000000000007769                 db    0
.eh_frame:000000000000776A                 db    0
.eh_frame:000000000000776B                 db    0
.eh_frame:000000000000776C                 db  0Ch
.eh_frame:000000000000776D                 db    9
.eh_frame:000000000000776E                 db    0
.eh_frame:000000000000776F                 db    0
.eh_frame:0000000000007770                 db 0A0h
.eh_frame:0000000000007771                 db 0DDh
.eh_frame:0000000000007772                 db 0FFh
.eh_frame:0000000000007773                 db 0FFh
.eh_frame:0000000000007774                 db    2
.eh_frame:0000000000007775                 db    0
.eh_frame:0000000000007776                 db    0
.eh_frame:0000000000007777                 db    0
.eh_frame:0000000000007778                 db    0
.eh_frame:0000000000007779                 db    0
.eh_frame:000000000000777A                 db    0
.eh_frame:000000000000777B                 db    0
.eh_frame:000000000000777C                 db  20h
.eh_frame:000000000000777D                 db    0
.eh_frame:000000000000777E                 db    0
.eh_frame:000000000000777F                 db    0
.eh_frame:0000000000007780                 db  20h
.eh_frame:0000000000007781                 db    9
.eh_frame:0000000000007782                 db    0
.eh_frame:0000000000007783                 db    0
.eh_frame:0000000000007784                 db  9Ch
.eh_frame:0000000000007785                 db 0DDh
.eh_frame:0000000000007786                 db 0FFh
.eh_frame:0000000000007787                 db 0FFh
.eh_frame:0000000000007788                 db  36h ; 6
.eh_frame:0000000000007789                 db    0
.eh_frame:000000000000778A                 db    0
.eh_frame:000000000000778B                 db    0
.eh_frame:000000000000778C                 db    0
.eh_frame:000000000000778D                 db  44h ; D
.eh_frame:000000000000778E                 db  0Eh
.eh_frame:000000000000778F                 db  10h
.eh_frame:0000000000007790                 db  83h
.eh_frame:0000000000007791                 db    2
.eh_frame:0000000000007792                 db  5Dh ; ]
.eh_frame:0000000000007793                 db  0Ah
.eh_frame:0000000000007794                 db  0Eh
.eh_frame:0000000000007795                 db    8
.eh_frame:0000000000007796                 db  47h ; G
.eh_frame:0000000000007797                 db  0Bh
.eh_frame:0000000000007798                 db  48h ; H
.eh_frame:0000000000007799                 db  0Ah
.eh_frame:000000000000779A                 db  0Eh
.eh_frame:000000000000779B                 db    8
.eh_frame:000000000000779C                 db  41h ; A
.eh_frame:000000000000779D                 db  0Bh
.eh_frame:000000000000779E                 db    0
.eh_frame:000000000000779F                 db    0
.eh_frame:00000000000077A0                 db  10h
.eh_frame:00000000000077A1                 db    0
.eh_frame:00000000000077A2                 db    0
.eh_frame:00000000000077A3                 db    0
.eh_frame:00000000000077A4                 db  44h ; D
.eh_frame:00000000000077A5                 db    9
.eh_frame:00000000000077A6                 db    0
.eh_frame:00000000000077A7                 db    0
.eh_frame:00000000000077A8                 db 0B8h
.eh_frame:00000000000077A9                 db 0DDh
.eh_frame:00000000000077AA                 db 0FFh
.eh_frame:00000000000077AB                 db 0FFh
.eh_frame:00000000000077AC                 db  24h ; $
.eh_frame:00000000000077AD                 db    0
.eh_frame:00000000000077AE                 db    0
.eh_frame:00000000000077AF                 db    0
.eh_frame:00000000000077B0                 db    0
.eh_frame:00000000000077B1                 db  5Fh ; _
.eh_frame:00000000000077B2                 db  0Eh
.eh_frame:00000000000077B3                 db  10h
.eh_frame:00000000000077B4                 db  14h
.eh_frame:00000000000077B5                 db    0
.eh_frame:00000000000077B6                 db    0
.eh_frame:00000000000077B7                 db    0
.eh_frame:00000000000077B8                 db  58h ; X
.eh_frame:00000000000077B9                 db    9
.eh_frame:00000000000077BA                 db    0
.eh_frame:00000000000077BB                 db    0
.eh_frame:00000000000077BC                 db 0D4h
.eh_frame:00000000000077BD                 db 0DDh
.eh_frame:00000000000077BE                 db 0FFh
.eh_frame:00000000000077BF                 db 0FFh
.eh_frame:00000000000077C0                 db  82h
.eh_frame:00000000000077C1                 db    0
.eh_frame:00000000000077C2                 db    0
.eh_frame:00000000000077C3                 db    0
.eh_frame:00000000000077C4                 db    0
.eh_frame:00000000000077C5                 db    2
.eh_frame:00000000000077C6                 db  5Fh ; _
.eh_frame:00000000000077C7                 db  0Eh
.eh_frame:00000000000077C8                 db  10h
.eh_frame:00000000000077C9                 db  49h ; I
.eh_frame:00000000000077CA                 db  0Eh
.eh_frame:00000000000077CB                 db    8
.eh_frame:00000000000077CC                 db  14h
.eh_frame:00000000000077CD                 db    0
.eh_frame:00000000000077CE                 db    0
.eh_frame:00000000000077CF                 db    0
.eh_frame:00000000000077D0                 db  70h ; p
.eh_frame:00000000000077D1                 db    9
.eh_frame:00000000000077D2                 db    0
.eh_frame:00000000000077D3                 db    0
.eh_frame:00000000000077D4                 db  4Ch ; L
.eh_frame:00000000000077D5                 db 0DEh
.eh_frame:00000000000077D6                 db 0FFh
.eh_frame:00000000000077D7                 db 0FFh
.eh_frame:00000000000077D8                 db  4Ah ; J
.eh_frame:00000000000077D9                 db    0
.eh_frame:00000000000077DA                 db    0
.eh_frame:00000000000077DB                 db    0
.eh_frame:00000000000077DC                 db    0
.eh_frame:00000000000077DD                 db    2
.eh_frame:00000000000077DE                 db  45h ; E
.eh_frame:00000000000077DF                 db  0Eh
.eh_frame:00000000000077E0                 db  10h
.eh_frame:00000000000077E1                 db    0
.eh_frame:00000000000077E2                 db    0
.eh_frame:00000000000077E3                 db    0
.eh_frame:00000000000077E4                 db  18h
.eh_frame:00000000000077E5                 db    0
.eh_frame:00000000000077E6                 db    0
.eh_frame:00000000000077E7                 db    0
.eh_frame:00000000000077E8                 db  88h
.eh_frame:00000000000077E9                 db    9
.eh_frame:00000000000077EA                 db    0
.eh_frame:00000000000077EB                 db    0
.eh_frame:00000000000077EC                 db  84h
.eh_frame:00000000000077ED                 db 0DEh
.eh_frame:00000000000077EE                 db 0FFh
.eh_frame:00000000000077EF                 db 0FFh
.eh_frame:00000000000077F0                 db  17h
.eh_frame:00000000000077F1                 db    0
.eh_frame:00000000000077F2                 db    0
.eh_frame:00000000000077F3                 db    0
.eh_frame:00000000000077F4                 db    0
.eh_frame:00000000000077F5                 db  41h ; A
.eh_frame:00000000000077F6                 db  0Eh
.eh_frame:00000000000077F7                 db  10h
.eh_frame:00000000000077F8                 db  83h
.eh_frame:00000000000077F9                 db    2
.eh_frame:00000000000077FA                 db  51h ; Q
.eh_frame:00000000000077FB                 db  0Eh
.eh_frame:00000000000077FC                 db    8
.eh_frame:00000000000077FD                 db    0
.eh_frame:00000000000077FE                 db    0
.eh_frame:00000000000077FF                 db    0
.eh_frame:0000000000007800                 db  18h
.eh_frame:0000000000007801                 db    0
.eh_frame:0000000000007802                 db    0
.eh_frame:0000000000007803                 db    0
.eh_frame:0000000000007804                 db 0A4h
.eh_frame:0000000000007805                 db    9
.eh_frame:0000000000007806                 db    0
.eh_frame:0000000000007807                 db    0
.eh_frame:0000000000007808                 db  88h
.eh_frame:0000000000007809                 db 0DEh
.eh_frame:000000000000780A                 db 0FFh
.eh_frame:000000000000780B                 db 0FFh
.eh_frame:000000000000780C                 db  2Eh ; .
.eh_frame:000000000000780D                 db    0
.eh_frame:000000000000780E                 db    0
.eh_frame:000000000000780F                 db    0
.eh_frame:0000000000007810                 db    0
.eh_frame:0000000000007811                 db  47h ; G
.eh_frame:0000000000007812                 db  0Eh
.eh_frame:0000000000007813                 db  10h
.eh_frame:0000000000007814                 db  61h ; a
.eh_frame:0000000000007815                 db  0Ah
.eh_frame:0000000000007816                 db  0Eh
.eh_frame:0000000000007817                 db    8
.eh_frame:0000000000007818                 db  41h ; A
.eh_frame:0000000000007819                 db  0Bh
.eh_frame:000000000000781A                 db    0
.eh_frame:000000000000781B                 db    0
.eh_frame:000000000000781C                 db  24h ; $
.eh_frame:000000000000781D                 db    0
.eh_frame:000000000000781E                 db    0
.eh_frame:000000000000781F                 db    0
.eh_frame:0000000000007820                 db 0C0h
.eh_frame:0000000000007821                 db    9
.eh_frame:0000000000007822                 db    0
.eh_frame:0000000000007823                 db    0
.eh_frame:0000000000007824                 db  9Ch
.eh_frame:0000000000007825                 db 0DEh
.eh_frame:0000000000007826                 db 0FFh
.eh_frame:0000000000007827                 db 0FFh
.eh_frame:0000000000007828                 db  28h ; (
.eh_frame:0000000000007829                 db    0
.eh_frame:000000000000782A                 db    0
.eh_frame:000000000000782B                 db    0
.eh_frame:000000000000782C                 db    0
.eh_frame:000000000000782D                 db  41h ; A
.eh_frame:000000000000782E                 db  0Eh
.eh_frame:000000000000782F                 db  10h
.eh_frame:0000000000007830                 db  86h
.eh_frame:0000000000007831                 db    2
.eh_frame:0000000000007832                 db  41h ; A
.eh_frame:0000000000007833                 db  0Eh
.eh_frame:0000000000007834                 db  18h
.eh_frame:0000000000007835                 db  83h
.eh_frame:0000000000007836                 db    3
.eh_frame:0000000000007837                 db  4Dh ; M
.eh_frame:0000000000007838                 db  0Eh
.eh_frame:0000000000007839                 db  20h
.eh_frame:000000000000783A                 db  49h ; I
.eh_frame:000000000000783B                 db  0Eh
.eh_frame:000000000000783C                 db  18h
.eh_frame:000000000000783D                 db  47h ; G
.eh_frame:000000000000783E                 db  0Eh
.eh_frame:000000000000783F                 db  10h
.eh_frame:0000000000007840                 db  41h ; A
.eh_frame:0000000000007841                 db  0Eh
.eh_frame:0000000000007842                 db    8
.eh_frame:0000000000007843                 db    0
.eh_frame:0000000000007844                 db  18h
.eh_frame:0000000000007845                 db    0
.eh_frame:0000000000007846                 db    0
.eh_frame:0000000000007847                 db    0
.eh_frame:0000000000007848                 db 0E8h
.eh_frame:0000000000007849                 db    9
.eh_frame:000000000000784A                 db    0
.eh_frame:000000000000784B                 db    0
.eh_frame:000000000000784C                 db 0A4h
.eh_frame:000000000000784D                 db 0DEh
.eh_frame:000000000000784E                 db 0FFh
.eh_frame:000000000000784F                 db 0FFh
.eh_frame:0000000000007850                 db  13h
.eh_frame:0000000000007851                 db    0
.eh_frame:0000000000007852                 db    0
.eh_frame:0000000000007853                 db    0
.eh_frame:0000000000007854                 db    0
.eh_frame:0000000000007855                 db  41h ; A
.eh_frame:0000000000007856                 db  0Eh
.eh_frame:0000000000007857                 db  10h
.eh_frame:0000000000007858                 db  83h
.eh_frame:0000000000007859                 db    2
.eh_frame:000000000000785A                 db  50h ; P
.eh_frame:000000000000785B                 db  0Eh
.eh_frame:000000000000785C                 db    8
.eh_frame:000000000000785D                 db    0
.eh_frame:000000000000785E                 db    0
.eh_frame:000000000000785F                 db    0
.eh_frame:0000000000007860                 db  14h
.eh_frame:0000000000007861                 db    0
.eh_frame:0000000000007862                 db    0
.eh_frame:0000000000007863                 db    0
.eh_frame:0000000000007864                 db    4
.eh_frame:0000000000007865                 db  0Ah
.eh_frame:0000000000007866                 db    0
.eh_frame:0000000000007867                 db    0
.eh_frame:0000000000007868                 db 0A8h
.eh_frame:0000000000007869                 db 0DEh
.eh_frame:000000000000786A                 db 0FFh
.eh_frame:000000000000786B                 db 0FFh
.eh_frame:000000000000786C                 db  35h ; 5
.eh_frame:000000000000786D                 db    0
.eh_frame:000000000000786E                 db    0
.eh_frame:000000000000786F                 db    0
.eh_frame:0000000000007870                 db    0
.eh_frame:0000000000007871                 db  4Bh ; K
.eh_frame:0000000000007872                 db  0Eh
.eh_frame:0000000000007873                 db  10h
.eh_frame:0000000000007874                 db    0
.eh_frame:0000000000007875                 db    0
.eh_frame:0000000000007876                 db    0
.eh_frame:0000000000007877                 db    0
.eh_frame:0000000000007878                 db  34h ; 4
.eh_frame:0000000000007879                 db    0
.eh_frame:000000000000787A                 db    0
.eh_frame:000000000000787B                 db    0
.eh_frame:000000000000787C                 db  1Ch
.eh_frame:000000000000787D                 db  0Ah
.eh_frame:000000000000787E                 db    0
.eh_frame:000000000000787F                 db    0
.eh_frame:0000000000007880                 db 0D0h
.eh_frame:0000000000007881                 db 0DEh
.eh_frame:0000000000007882                 db 0FFh
.eh_frame:0000000000007883                 db 0FFh
.eh_frame:0000000000007884                 db  7Bh ; {
.eh_frame:0000000000007885                 db    0
.eh_frame:0000000000007886                 db    0
.eh_frame:0000000000007887                 db    0
.eh_frame:0000000000007888                 db    0
.eh_frame:0000000000007889                 db  42h ; B
.eh_frame:000000000000788A                 db  0Eh
.eh_frame:000000000000788B                 db  10h
.eh_frame:000000000000788C                 db  8Ch
.eh_frame:000000000000788D                 db    2
.eh_frame:000000000000788E                 db  41h ; A
.eh_frame:000000000000788F                 db  0Eh
.eh_frame:0000000000007890                 db  18h
.eh_frame:0000000000007891                 db  86h
.eh_frame:0000000000007892                 db    3
.eh_frame:0000000000007893                 db  41h ; A
.eh_frame:0000000000007894                 db  0Eh
.eh_frame:0000000000007895                 db  20h
.eh_frame:0000000000007896                 db  83h
.eh_frame:0000000000007897                 db    4
.eh_frame:0000000000007898                 db  7Dh ; }
.eh_frame:0000000000007899                 db  0Ah
.eh_frame:000000000000789A                 db  0Eh
.eh_frame:000000000000789B                 db  18h
.eh_frame:000000000000789C                 db  41h ; A
.eh_frame:000000000000789D                 db  0Eh
.eh_frame:000000000000789E                 db  10h
.eh_frame:000000000000789F                 db  42h ; B
.eh_frame:00000000000078A0                 db  0Eh
.eh_frame:00000000000078A1                 db    8
.eh_frame:00000000000078A2                 db  44h ; D
.eh_frame:00000000000078A3                 db  0Bh
.eh_frame:00000000000078A4                 db  60h ; `
.eh_frame:00000000000078A5                 db  0Ah
.eh_frame:00000000000078A6                 db  0Eh
.eh_frame:00000000000078A7                 db  18h
.eh_frame:00000000000078A8                 db  41h ; A
.eh_frame:00000000000078A9                 db  0Eh
.eh_frame:00000000000078AA                 db  10h
.eh_frame:00000000000078AB                 db  42h ; B
.eh_frame:00000000000078AC                 db  0Eh
.eh_frame:00000000000078AD                 db    8
.eh_frame:00000000000078AE                 db  45h ; E
.eh_frame:00000000000078AF                 db  0Bh
.eh_frame:00000000000078B0                 db  1Ch
.eh_frame:00000000000078B1                 db    0
.eh_frame:00000000000078B2                 db    0
.eh_frame:00000000000078B3                 db    0
.eh_frame:00000000000078B4                 db  54h ; T
.eh_frame:00000000000078B5                 db  0Ah
.eh_frame:00000000000078B6                 db    0
.eh_frame:00000000000078B7                 db    0
.eh_frame:00000000000078B8                 db  18h
.eh_frame:00000000000078B9                 db 0DFh
.eh_frame:00000000000078BA                 db 0FFh
.eh_frame:00000000000078BB                 db 0FFh
.eh_frame:00000000000078BC                 db  40h ; @
.eh_frame:00000000000078BD                 db    0
.eh_frame:00000000000078BE                 db    0
.eh_frame:00000000000078BF                 db    0
.eh_frame:00000000000078C0                 db    0
.eh_frame:00000000000078C1                 db  44h ; D
.eh_frame:00000000000078C2                 db  0Eh
.eh_frame:00000000000078C3                 db  10h
.eh_frame:00000000000078C4                 db  83h
.eh_frame:00000000000078C5                 db    2
.eh_frame:00000000000078C6                 db  5Ah ; Z
.eh_frame:00000000000078C7                 db  0Ah
.eh_frame:00000000000078C8                 db  0Eh
.eh_frame:00000000000078C9                 db    8
.eh_frame:00000000000078CA                 db  4Ah ; J
.eh_frame:00000000000078CB                 db  0Bh
.eh_frame:00000000000078CC                 db  53h ; S
.eh_frame:00000000000078CD                 db  0Eh
.eh_frame:00000000000078CE                 db    8
.eh_frame:00000000000078CF                 db    0
.eh_frame:00000000000078D0                 db  2Ch ; ,
.eh_frame:00000000000078D1                 db    0
.eh_frame:00000000000078D2                 db    0
.eh_frame:00000000000078D3                 db    0
.eh_frame:00000000000078D4                 db  74h ; t
.eh_frame:00000000000078D5                 db  0Ah
.eh_frame:00000000000078D6                 db    0
.eh_frame:00000000000078D7                 db    0
.eh_frame:00000000000078D8                 db  38h ; 8
.eh_frame:00000000000078D9                 db 0DFh
.eh_frame:00000000000078DA                 db 0FFh
.eh_frame:00000000000078DB                 db 0FFh
.eh_frame:00000000000078DC                 db  57h ; W
.eh_frame:00000000000078DD                 db    0
.eh_frame:00000000000078DE                 db    0
.eh_frame:00000000000078DF                 db    0
.eh_frame:00000000000078E0                 db    0
.eh_frame:00000000000078E1                 db  63h ; c
.eh_frame:00000000000078E2                 db  0Eh
.eh_frame:00000000000078E3                 db  10h
.eh_frame:00000000000078E4                 db  8Ch
.eh_frame:00000000000078E5                 db    2
.eh_frame:00000000000078E6                 db  41h ; A
.eh_frame:00000000000078E7                 db  0Eh
.eh_frame:00000000000078E8                 db  18h
.eh_frame:00000000000078E9                 db  86h
.eh_frame:00000000000078EA                 db    3
.eh_frame:00000000000078EB                 db  44h ; D
.eh_frame:00000000000078EC                 db  0Eh
.eh_frame:00000000000078ED                 db  20h
.eh_frame:00000000000078EE                 db  83h
.eh_frame:00000000000078EF                 db    4
.eh_frame:00000000000078F0                 db  6Bh ; k
.eh_frame:00000000000078F1                 db  0Eh
.eh_frame:00000000000078F2                 db  18h
.eh_frame:00000000000078F3                 db  41h ; A
.eh_frame:00000000000078F4                 db  0Eh
.eh_frame:00000000000078F5                 db  10h
.eh_frame:00000000000078F6                 db  42h ; B
.eh_frame:00000000000078F7                 db  0Eh
.eh_frame:00000000000078F8                 db    8
.eh_frame:00000000000078F9                 db    0
.eh_frame:00000000000078FA                 db    0
.eh_frame:00000000000078FB                 db    0
.eh_frame:00000000000078FC                 db    0
.eh_frame:00000000000078FD                 db    0
.eh_frame:00000000000078FE                 db    0
.eh_frame:00000000000078FF                 db    0
.eh_frame:0000000000007900                 db  3Ch ; <
.eh_frame:0000000000007901                 db    0
.eh_frame:0000000000007902                 db    0
.eh_frame:0000000000007903                 db    0
.eh_frame:0000000000007904                 db 0A4h
.eh_frame:0000000000007905                 db  0Ah
.eh_frame:0000000000007906                 db    0
.eh_frame:0000000000007907                 db    0
.eh_frame:0000000000007908                 db  68h ; h
.eh_frame:0000000000007909                 db 0DFh
.eh_frame:000000000000790A                 db 0FFh
.eh_frame:000000000000790B                 db 0FFh
.eh_frame:000000000000790C                 db  83h
.eh_frame:000000000000790D                 db    0
.eh_frame:000000000000790E                 db    0
.eh_frame:000000000000790F                 db    0
.eh_frame:0000000000007910                 db    0
.eh_frame:0000000000007911                 db  42h ; B
.eh_frame:0000000000007912                 db  0Eh
.eh_frame:0000000000007913                 db  10h
.eh_frame:0000000000007914                 db  8Dh
.eh_frame:0000000000007915                 db    2
.eh_frame:0000000000007916                 db  42h ; B
.eh_frame:0000000000007917                 db  0Eh
.eh_frame:0000000000007918                 db  18h
.eh_frame:0000000000007919                 db  8Ch
.eh_frame:000000000000791A                 db    3
.eh_frame:000000000000791B                 db  44h ; D
.eh_frame:000000000000791C                 db  0Eh
.eh_frame:000000000000791D                 db  20h
.eh_frame:000000000000791E                 db  86h
.eh_frame:000000000000791F                 db    4
.eh_frame:0000000000007920                 db  41h ; A
.eh_frame:0000000000007921                 db  0Eh
.eh_frame:0000000000007922                 db  28h ; (
.eh_frame:0000000000007923                 db  83h
.eh_frame:0000000000007924                 db    5
.eh_frame:0000000000007925                 db  4Ah ; J
.eh_frame:0000000000007926                 db  0Eh
.eh_frame:0000000000007927                 db  40h ; @
.eh_frame:0000000000007928                 db    2
.eh_frame:0000000000007929                 db  64h ; d
.eh_frame:000000000000792A                 db  0Ah
.eh_frame:000000000000792B                 db  0Eh
.eh_frame:000000000000792C                 db  28h ; (
.eh_frame:000000000000792D                 db  41h ; A
.eh_frame:000000000000792E                 db  0Eh
.eh_frame:000000000000792F                 db  20h
.eh_frame:0000000000007930                 db  41h ; A
.eh_frame:0000000000007931                 db  0Eh
.eh_frame:0000000000007932                 db  18h
.eh_frame:0000000000007933                 db  42h ; B
.eh_frame:0000000000007934                 db  0Eh
.eh_frame:0000000000007935                 db  10h
.eh_frame:0000000000007936                 db  42h ; B
.eh_frame:0000000000007937                 db  0Eh
.eh_frame:0000000000007938                 db    8
.eh_frame:0000000000007939                 db  41h ; A
.eh_frame:000000000000793A                 db  0Bh
.eh_frame:000000000000793B                 db    0
.eh_frame:000000000000793C                 db    0
.eh_frame:000000000000793D                 db    0
.eh_frame:000000000000793E                 db    0
.eh_frame:000000000000793F                 db    0
.eh_frame:0000000000007940                 db  28h ; (
.eh_frame:0000000000007941                 db    0
.eh_frame:0000000000007942                 db    0
.eh_frame:0000000000007943                 db    0
.eh_frame:0000000000007944                 db 0E4h
.eh_frame:0000000000007945                 db  0Ah
.eh_frame:0000000000007946                 db    0
.eh_frame:0000000000007947                 db    0
.eh_frame:0000000000007948                 db 0B8h
.eh_frame:0000000000007949                 db 0DFh
.eh_frame:000000000000794A                 db 0FFh
.eh_frame:000000000000794B                 db 0FFh
.eh_frame:000000000000794C                 db  5Eh ; ^
.eh_frame:000000000000794D                 db    0
.eh_frame:000000000000794E                 db    0
.eh_frame:000000000000794F                 db    0
.eh_frame:0000000000007950                 db    0
.eh_frame:0000000000007951                 db  41h ; A
.eh_frame:0000000000007952                 db  0Eh
.eh_frame:0000000000007953                 db  10h
.eh_frame:0000000000007954                 db  86h
.eh_frame:0000000000007955                 db    2
.eh_frame:0000000000007956                 db  41h ; A
.eh_frame:0000000000007957                 db  0Eh
.eh_frame:0000000000007958                 db  18h
.eh_frame:0000000000007959                 db  83h
.eh_frame:000000000000795A                 db    3
.eh_frame:000000000000795B                 db  4Ch ; L
.eh_frame:000000000000795C                 db  0Eh
.eh_frame:000000000000795D                 db  20h
.eh_frame:000000000000795E                 db  77h ; w
.eh_frame:000000000000795F                 db  0Ah
.eh_frame:0000000000007960                 db  0Eh
.eh_frame:0000000000007961                 db  18h
.eh_frame:0000000000007962                 db  44h ; D
.eh_frame:0000000000007963                 db  0Eh
.eh_frame:0000000000007964                 db  10h
.eh_frame:0000000000007965                 db  41h ; A
.eh_frame:0000000000007966                 db  0Eh
.eh_frame:0000000000007967                 db    8
.eh_frame:0000000000007968                 db  46h ; F
.eh_frame:0000000000007969                 db  0Bh
.eh_frame:000000000000796A                 db    0
.eh_frame:000000000000796B                 db    0
.eh_frame:000000000000796C                 db  48h ; H
.eh_frame:000000000000796D                 db    0
.eh_frame:000000000000796E                 db    0
.eh_frame:000000000000796F                 db    0
.eh_frame:0000000000007970                 db  10h
.eh_frame:0000000000007971                 db  0Bh
.eh_frame:0000000000007972                 db    0
.eh_frame:0000000000007973                 db    0
.eh_frame:0000000000007974                 db 0ECh
.eh_frame:0000000000007975                 db 0DFh
.eh_frame:0000000000007976                 db 0FFh
.eh_frame:0000000000007977                 db 0FFh
.eh_frame:0000000000007978                 db  89h
.eh_frame:0000000000007979                 db    1
.eh_frame:000000000000797A                 db    0
.eh_frame:000000000000797B                 db    0
.eh_frame:000000000000797C                 db    0
.eh_frame:000000000000797D                 db  42h ; B
.eh_frame:000000000000797E                 db  0Eh
.eh_frame:000000000000797F                 db  10h
.eh_frame:0000000000007980                 db  8Fh
.eh_frame:0000000000007981                 db    2
.eh_frame:0000000000007982                 db  42h ; B
.eh_frame:0000000000007983                 db  0Eh
.eh_frame:0000000000007984                 db  18h
.eh_frame:0000000000007985                 db  8Eh
.eh_frame:0000000000007986                 db    3
.eh_frame:0000000000007987                 db  45h ; E
.eh_frame:0000000000007988                 db  0Eh
.eh_frame:0000000000007989                 db  20h
.eh_frame:000000000000798A                 db  8Dh
.eh_frame:000000000000798B                 db    4
.eh_frame:000000000000798C                 db  45h ; E
.eh_frame:000000000000798D                 db  0Eh
.eh_frame:000000000000798E                 db  28h ; (
.eh_frame:000000000000798F                 db  8Ch
.eh_frame:0000000000007990                 db    5
.eh_frame:0000000000007991                 db  41h ; A
.eh_frame:0000000000007992                 db  0Eh
.eh_frame:0000000000007993                 db  30h ; 0
.eh_frame:0000000000007994                 db  86h
.eh_frame:0000000000007995                 db    6
.eh_frame:0000000000007996                 db  41h ; A
.eh_frame:0000000000007997                 db  0Eh
.eh_frame:0000000000007998                 db  38h ; 8
.eh_frame:0000000000007999                 db  83h
.eh_frame:000000000000799A                 db    7
.eh_frame:000000000000799B                 db  4Fh ; O
.eh_frame:000000000000799C                 db  0Eh
.eh_frame:000000000000799D                 db  50h ; P
.eh_frame:000000000000799E                 db    2
.eh_frame:000000000000799F                 db 0AAh
.eh_frame:00000000000079A0                 db  0Ah
.eh_frame:00000000000079A1                 db  0Eh
.eh_frame:00000000000079A2                 db  38h ; 8
.eh_frame:00000000000079A3                 db  43h ; C
.eh_frame:00000000000079A4                 db  0Eh
.eh_frame:00000000000079A5                 db  30h ; 0
.eh_frame:00000000000079A6                 db  41h ; A
.eh_frame:00000000000079A7                 db  0Eh
.eh_frame:00000000000079A8                 db  28h ; (
.eh_frame:00000000000079A9                 db  42h ; B
.eh_frame:00000000000079AA                 db  0Eh
.eh_frame:00000000000079AB                 db  20h
.eh_frame:00000000000079AC                 db  42h ; B
.eh_frame:00000000000079AD                 db  0Eh
.eh_frame:00000000000079AE                 db  18h
.eh_frame:00000000000079AF                 db  42h ; B
.eh_frame:00000000000079B0                 db  0Eh
.eh_frame:00000000000079B1                 db  10h
.eh_frame:00000000000079B2                 db  42h ; B
.eh_frame:00000000000079B3                 db  0Eh
.eh_frame:00000000000079B4                 db    8
.eh_frame:00000000000079B5                 db  4Bh ; K
.eh_frame:00000000000079B6                 db  0Bh
.eh_frame:00000000000079B7                 db    0
.eh_frame:00000000000079B8                 db  4Ch ; L
.eh_frame:00000000000079B9                 db    0
.eh_frame:00000000000079BA                 db    0
.eh_frame:00000000000079BB                 db    0
.eh_frame:00000000000079BC                 db  5Ch ; \
.eh_frame:00000000000079BD                 db  0Bh
.eh_frame:00000000000079BE                 db    0
.eh_frame:00000000000079BF                 db    0
.eh_frame:00000000000079C0                 db  30h ; 0
.eh_frame:00000000000079C1                 db 0E1h
.eh_frame:00000000000079C2                 db 0FFh
.eh_frame:00000000000079C3                 db 0FFh
.eh_frame:00000000000079C4                 db  7Dh ; }
.eh_frame:00000000000079C5                 db    0
.eh_frame:00000000000079C6                 db    0
.eh_frame:00000000000079C7                 db    0
.eh_frame:00000000000079C8                 db    0
.eh_frame:00000000000079C9                 db  42h ; B
.eh_frame:00000000000079CA                 db  0Eh
.eh_frame:00000000000079CB                 db  10h
.eh_frame:00000000000079CC                 db  8Ch
.eh_frame:00000000000079CD                 db    2
.eh_frame:00000000000079CE                 db  41h ; A
.eh_frame:00000000000079CF                 db  0Eh
.eh_frame:00000000000079D0                 db  18h
.eh_frame:00000000000079D1                 db  86h
.eh_frame:00000000000079D2                 db    3
.eh_frame:00000000000079D3                 db  44h ; D
.eh_frame:00000000000079D4                 db  0Eh
.eh_frame:00000000000079D5                 db  20h
.eh_frame:00000000000079D6                 db  83h
.eh_frame:00000000000079D7                 db    4
.eh_frame:00000000000079D8                 db  69h ; i
.eh_frame:00000000000079D9                 db  0Ah
.eh_frame:00000000000079DA                 db  0Eh
.eh_frame:00000000000079DB                 db  18h
.eh_frame:00000000000079DC                 db  41h ; A
.eh_frame:00000000000079DD                 db  0Eh
.eh_frame:00000000000079DE                 db  10h
.eh_frame:00000000000079DF                 db  42h ; B
.eh_frame:00000000000079E0                 db  0Eh
.eh_frame:00000000000079E1                 db    8
.eh_frame:00000000000079E2                 db  45h ; E
.eh_frame:00000000000079E3                 db  0Bh
.eh_frame:00000000000079E4                 db  55h ; U
.eh_frame:00000000000079E5                 db  0Ah
.eh_frame:00000000000079E6                 db  0Eh
.eh_frame:00000000000079E7                 db  18h
.eh_frame:00000000000079E8                 db  41h ; A
.eh_frame:00000000000079E9                 db  0Eh
.eh_frame:00000000000079EA                 db  10h
.eh_frame:00000000000079EB                 db  42h ; B
.eh_frame:00000000000079EC                 db  0Eh
.eh_frame:00000000000079ED                 db    8
.eh_frame:00000000000079EE                 db  48h ; H
.eh_frame:00000000000079EF                 db  0Bh
.eh_frame:00000000000079F0                 db  41h ; A
.eh_frame:00000000000079F1                 db  0Ah
.eh_frame:00000000000079F2                 db  0Eh
.eh_frame:00000000000079F3                 db  18h
.eh_frame:00000000000079F4                 db  46h ; F
.eh_frame:00000000000079F5                 db  0Eh
.eh_frame:00000000000079F6                 db  10h
.eh_frame:00000000000079F7                 db  42h ; B
.eh_frame:00000000000079F8                 db  0Eh
.eh_frame:00000000000079F9                 db    8
.eh_frame:00000000000079FA                 db  47h ; G
.eh_frame:00000000000079FB                 db  0Bh
.eh_frame:00000000000079FC                 db  49h ; I
.eh_frame:00000000000079FD                 db  0Eh
.eh_frame:00000000000079FE                 db  18h
.eh_frame:00000000000079FF                 db  41h ; A
.eh_frame:0000000000007A00                 db  0Eh
.eh_frame:0000000000007A01                 db  10h
.eh_frame:0000000000007A02                 db  42h ; B
.eh_frame:0000000000007A03                 db  0Eh
.eh_frame:0000000000007A04                 db    8
.eh_frame:0000000000007A05                 db    0
.eh_frame:0000000000007A06                 db    0
.eh_frame:0000000000007A07                 db    0
.eh_frame:0000000000007A08                 db  1Ch
.eh_frame:0000000000007A09                 db    0
.eh_frame:0000000000007A0A                 db    0
.eh_frame:0000000000007A0B                 db    0
.eh_frame:0000000000007A0C                 db 0ACh
.eh_frame:0000000000007A0D                 db  0Bh
.eh_frame:0000000000007A0E                 db    0
.eh_frame:0000000000007A0F                 db    0
.eh_frame:0000000000007A10                 db  60h ; `
.eh_frame:0000000000007A11                 db 0E1h
.eh_frame:0000000000007A12                 db 0FFh
.eh_frame:0000000000007A13                 db 0FFh
.eh_frame:0000000000007A14                 db  3Ch ; <
.eh_frame:0000000000007A15                 db    0
.eh_frame:0000000000007A16                 db    0
.eh_frame:0000000000007A17                 db    0
.eh_frame:0000000000007A18                 db    0
.eh_frame:0000000000007A19                 db  44h ; D
.eh_frame:0000000000007A1A                 db  0Eh
.eh_frame:0000000000007A1B                 db  10h
.eh_frame:0000000000007A1C                 db  61h ; a
.eh_frame:0000000000007A1D                 db  0Ah
.eh_frame:0000000000007A1E                 db  0Eh
.eh_frame:0000000000007A1F                 db    8
.eh_frame:0000000000007A20                 db  4Bh ; K
.eh_frame:0000000000007A21                 db  0Bh
.eh_frame:0000000000007A22                 db  4Bh ; K
.eh_frame:0000000000007A23                 db  0Eh
.eh_frame:0000000000007A24                 db    8
.eh_frame:0000000000007A25                 db    0
.eh_frame:0000000000007A26                 db    0
.eh_frame:0000000000007A27                 db    0
.eh_frame:0000000000007A28                 db  44h ; D
.eh_frame:0000000000007A29                 db    0
.eh_frame:0000000000007A2A                 db    0
.eh_frame:0000000000007A2B                 db    0
.eh_frame:0000000000007A2C                 db 0CCh
.eh_frame:0000000000007A2D                 db  0Bh
.eh_frame:0000000000007A2E                 db    0
.eh_frame:0000000000007A2F                 db    0
.eh_frame:0000000000007A30                 db  80h
.eh_frame:0000000000007A31                 db 0E1h
.eh_frame:0000000000007A32                 db 0FFh
.eh_frame:0000000000007A33                 db 0FFh
.eh_frame:0000000000007A34                 db  65h ; e
.eh_frame:0000000000007A35                 db    0
.eh_frame:0000000000007A36                 db    0
.eh_frame:0000000000007A37                 db    0
.eh_frame:0000000000007A38                 db    0
.eh_frame:0000000000007A39                 db  42h ; B
.eh_frame:0000000000007A3A                 db  0Eh
.eh_frame:0000000000007A3B                 db  10h
.eh_frame:0000000000007A3C                 db  8Fh
.eh_frame:0000000000007A3D                 db    2
.eh_frame:0000000000007A3E                 db  42h ; B
.eh_frame:0000000000007A3F                 db  0Eh
.eh_frame:0000000000007A40                 db  18h
.eh_frame:0000000000007A41                 db  8Eh
.eh_frame:0000000000007A42                 db    3
.eh_frame:0000000000007A43                 db  45h ; E
.eh_frame:0000000000007A44                 db  0Eh
.eh_frame:0000000000007A45                 db  20h
.eh_frame:0000000000007A46                 db  8Dh
.eh_frame:0000000000007A47                 db    4
.eh_frame:0000000000007A48                 db  42h ; B
.eh_frame:0000000000007A49                 db  0Eh
.eh_frame:0000000000007A4A                 db  28h ; (
.eh_frame:0000000000007A4B                 db  8Ch
.eh_frame:0000000000007A4C                 db    5
.eh_frame:0000000000007A4D                 db  48h ; H
.eh_frame:0000000000007A4E                 db  0Eh
.eh_frame:0000000000007A4F                 db  30h ; 0
.eh_frame:0000000000007A50                 db  86h
.eh_frame:0000000000007A51                 db    6
.eh_frame:0000000000007A52                 db  48h ; H
.eh_frame:0000000000007A53                 db  0Eh
.eh_frame:0000000000007A54                 db  38h ; 8
.eh_frame:0000000000007A55                 db  83h
.eh_frame:0000000000007A56                 db    7
.eh_frame:0000000000007A57                 db  4Dh ; M
.eh_frame:0000000000007A58                 db  0Eh
.eh_frame:0000000000007A59                 db  40h ; @
.eh_frame:0000000000007A5A                 db  72h ; r
.eh_frame:0000000000007A5B                 db  0Eh
.eh_frame:0000000000007A5C                 db  38h ; 8
.eh_frame:0000000000007A5D                 db  41h ; A
.eh_frame:0000000000007A5E                 db  0Eh
.eh_frame:0000000000007A5F                 db  30h ; 0
.eh_frame:0000000000007A60                 db  41h ; A
.eh_frame:0000000000007A61                 db  0Eh
.eh_frame:0000000000007A62                 db  28h ; (
.eh_frame:0000000000007A63                 db  42h ; B
.eh_frame:0000000000007A64                 db  0Eh
.eh_frame:0000000000007A65                 db  20h
.eh_frame:0000000000007A66                 db  42h ; B
.eh_frame:0000000000007A67                 db  0Eh
.eh_frame:0000000000007A68                 db  18h
.eh_frame:0000000000007A69                 db  42h ; B
.eh_frame:0000000000007A6A                 db  0Eh
.eh_frame:0000000000007A6B                 db  10h
.eh_frame:0000000000007A6C                 db  42h ; B
.eh_frame:0000000000007A6D                 db  0Eh
.eh_frame:0000000000007A6E                 db    8
.eh_frame:0000000000007A6F                 db    0
.eh_frame:0000000000007A70                 db  14h
.eh_frame:0000000000007A71                 db    0
.eh_frame:0000000000007A72                 db    0
.eh_frame:0000000000007A73                 db    0
.eh_frame:0000000000007A74                 db  14h
.eh_frame:0000000000007A75                 db  0Ch
.eh_frame:0000000000007A76                 db    0
.eh_frame:0000000000007A77                 db    0
.eh_frame:0000000000007A78                 db 0A8h
.eh_frame:0000000000007A79                 db 0E1h
.eh_frame:0000000000007A7A                 db 0FFh
.eh_frame:0000000000007A7B                 db 0FFh
.eh_frame:0000000000007A7C                 db    2
.eh_frame:0000000000007A7D                 db    0
.eh_frame:0000000000007A7E                 db    0
.eh_frame:0000000000007A7F                 db    0
.eh_frame:0000000000007A80                 db    0
.eh_frame:0000000000007A81                 db    0
.eh_frame:0000000000007A82                 db    0
.eh_frame:0000000000007A83                 db    0
.eh_frame:0000000000007A84                 db    0
.eh_frame:0000000000007A85                 db    0
.eh_frame:0000000000007A86                 db    0
.eh_frame:0000000000007A87                 db    0
.eh_frame:0000000000007A88                 db  10h
.eh_frame:0000000000007A89                 db    0
.eh_frame:0000000000007A8A                 db    0
.eh_frame:0000000000007A8B                 db    0
.eh_frame:0000000000007A8C                 db  2Ch ; ,
.eh_frame:0000000000007A8D                 db  0Ch
.eh_frame:0000000000007A8E                 db    0
.eh_frame:0000000000007A8F                 db    0
.eh_frame:0000000000007A90                 db 0A0h
.eh_frame:0000000000007A91                 db 0E1h
.eh_frame:0000000000007A92                 db 0FFh
.eh_frame:0000000000007A93                 db 0FFh
.eh_frame:0000000000007A94                 db  0Eh
.eh_frame:0000000000007A95                 db    0
.eh_frame:0000000000007A96                 db    0
.eh_frame:0000000000007A97                 db    0
.eh_frame:0000000000007A98                 db    0
.eh_frame:0000000000007A99                 db    0
.eh_frame:0000000000007A9A                 db    0
.eh_frame:0000000000007A9B                 db    0
.eh_frame:0000000000007A9C __FRAME_END__   db    0
.eh_frame:0000000000007A9D                 db    0
.eh_frame:0000000000007A9E                 db    0
.eh_frame:0000000000007A9F                 db    0
.eh_frame:0000000000007A9F _eh_frame       ends
.eh_frame:0000000000007A9F
.init_array:0000000000207B10 ; ELF Initialization Function Table
.init_array:0000000000207B10 ; ===========================================================================
.init_array:0000000000207B10
.init_array:0000000000207B10 ; Segment type: Pure data
.init_array:0000000000207B10 ; Segment permissions: Read/Write
.init_array:0000000000207B10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B10                 assume cs:_init_array
.init_array:0000000000207B10                 ;org 207B10h
.init_array:0000000000207B10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B10
.fini_array:0000000000207B18 ; ELF Termination Function Table
.fini_array:0000000000207B18 ; ===========================================================================
.fini_array:0000000000207B18
.fini_array:0000000000207B18 ; Segment type: Pure data
.fini_array:0000000000207B18 ; Segment permissions: Read/Write
.fini_array:0000000000207B18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B18                 assume cs:_fini_array
.fini_array:0000000000207B18                 ;org 207B18h
.fini_array:0000000000207B18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B18
.data.rel.ro:0000000000207B20 ; ===========================================================================
.data.rel.ro:0000000000207B20
.data.rel.ro:0000000000207B20 ; Segment type: Pure data
.data.rel.ro:0000000000207B20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B20                 ;org 207B20h
.data.rel.ro:0000000000207B20 ; struct option longopts
.data.rel.ro:0000000000207B20 longopts        dq offset aHelp         ; name
.data.rel.ro:0000000000207B20                                         ; DATA XREF: main+8↑o
.data.rel.ro:0000000000207B20                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B20                 dq 0                    ; flag
.data.rel.ro:0000000000207B20                 dd 0FFFFFF7Eh           ; val
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B40                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207B48                 db    0
.data.rel.ro:0000000000207B49                 db    0
.data.rel.ro:0000000000207B4A                 db    0
.data.rel.ro:0000000000207B4B                 db    0
.data.rel.ro:0000000000207B4C                 db    0
.data.rel.ro:0000000000207B4D                 db    0
.data.rel.ro:0000000000207B4E                 db    0
.data.rel.ro:0000000000207B4F                 db    0
.data.rel.ro:0000000000207B50                 db    0
.data.rel.ro:0000000000207B51                 db    0
.data.rel.ro:0000000000207B52                 db    0
.data.rel.ro:0000000000207B53                 db    0
.data.rel.ro:0000000000207B54                 db    0
.data.rel.ro:0000000000207B55                 db    0
.data.rel.ro:0000000000207B56                 db    0
.data.rel.ro:0000000000207B57                 db    0
.data.rel.ro:0000000000207B58                 db  7Dh ; }
.data.rel.ro:0000000000207B59                 db 0FFh
.data.rel.ro:0000000000207B5A                 db 0FFh
.data.rel.ro:0000000000207B5B                 db 0FFh
.data.rel.ro:0000000000207B5C                 db    0
.data.rel.ro:0000000000207B5D                 db    0
.data.rel.ro:0000000000207B5E                 db    0
.data.rel.ro:0000000000207B5F                 db    0
.data.rel.ro:0000000000207B60                 db    0
.data.rel.ro:0000000000207B61                 db    0
.data.rel.ro:0000000000207B62                 db    0
.data.rel.ro:0000000000207B63                 db    0
.data.rel.ro:0000000000207B64                 db    0
.data.rel.ro:0000000000207B65                 db    0
.data.rel.ro:0000000000207B66                 db    0
.data.rel.ro:0000000000207B67                 db    0
.data.rel.ro:0000000000207B68                 db    0
.data.rel.ro:0000000000207B69                 db    0
.data.rel.ro:0000000000207B6A                 db    0
.data.rel.ro:0000000000207B6B                 db    0
.data.rel.ro:0000000000207B6C                 db    0
.data.rel.ro:0000000000207B6D                 db    0
.data.rel.ro:0000000000207B6E                 db    0
.data.rel.ro:0000000000207B6F                 db    0
.data.rel.ro:0000000000207B70                 db    0
.data.rel.ro:0000000000207B71                 db    0
.data.rel.ro:0000000000207B72                 db    0
.data.rel.ro:0000000000207B73                 db    0
.data.rel.ro:0000000000207B74                 db    0
.data.rel.ro:0000000000207B75                 db    0
.data.rel.ro:0000000000207B76                 db    0
.data.rel.ro:0000000000207B77                 db    0
.data.rel.ro:0000000000207B78                 db    0
.data.rel.ro:0000000000207B79                 db    0
.data.rel.ro:0000000000207B7A                 db    0
.data.rel.ro:0000000000207B7B                 db    0
.data.rel.ro:0000000000207B7C                 db    0
.data.rel.ro:0000000000207B7D                 db    0
.data.rel.ro:0000000000207B7E                 db    0
.data.rel.ro:0000000000207B7F                 db    0
.data.rel.ro:0000000000207B80                 public quoting_style_args
.data.rel.ro:0000000000207B80 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207B88                 dq offset aShell_0      ; "shell"
.data.rel.ro:0000000000207B90                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207B98                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207BA0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207BA8                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207BB0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207BB8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207BC0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207BC8                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD7 _data_rel_ro    ends
.data.rel.ro:0000000000207BD7
LOAD:0000000000207BD8 ; ELF Dynamic Information
LOAD:0000000000207BD8 ; ===========================================================================
LOAD:0000000000207BD8
LOAD:0000000000207BD8 ; Segment type: Pure data
LOAD:0000000000207BD8 ; Segment permissions: Read/Write
LOAD:0000000000207BD8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207BD8                 assume cs:LOAD
LOAD:0000000000207BD8                 ;org 207BD8h
LOAD:0000000000207BD8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207BD8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207BD8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207BE8                 Elf64_Dyn <0Ch, 16A0h>  ; DT_INIT
LOAD:0000000000207BF8                 Elf64_Dyn <0Dh, 5C40h>  ; DT_FINI
LOAD:0000000000207C08                 Elf64_Dyn <19h, 207B10h> ; DT_INIT_ARRAY
LOAD:0000000000207C18                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207C28                 Elf64_Dyn <1Ah, 207B18h> ; DT_FINI_ARRAY
LOAD:0000000000207C38                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207C48                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207C58                 Elf64_Dyn <5, 9E0h>     ; DT_STRTAB
LOAD:0000000000207C68                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000207C78                 Elf64_Dyn <0Ah, 358h>   ; DT_STRSZ
LOAD:0000000000207C88                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207C98                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207CA8                 Elf64_Dyn <3, 207DC8h>  ; DT_PLTGOT
LOAD:0000000000207CB8                 Elf64_Dyn <2, 5D0h>     ; DT_PLTRELSZ
LOAD:0000000000207CC8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207CD8                 Elf64_Dyn <17h, 10D0h>  ; DT_JMPREL
LOAD:0000000000207CE8                 Elf64_Dyn <7, 0E30h>    ; DT_RELA
LOAD:0000000000207CF8                 Elf64_Dyn <8, 2A0h>     ; DT_RELASZ
LOAD:0000000000207D08                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D18                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207D28                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207D38                 Elf64_Dyn <6FFFFFFEh, 0DD0h> ; DT_VERNEED
LOAD:0000000000207D48                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207D58                 Elf64_Dyn <6FFFFFF0h, 0D38h> ; DT_VERSYM
LOAD:0000000000207D68                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000207D78                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207D88                 db    0
LOAD:0000000000207D89                 db    0
LOAD:0000000000207D8A                 db    0
LOAD:0000000000207D8B                 db    0
LOAD:0000000000207D8C                 db    0
LOAD:0000000000207D8D                 db    0
LOAD:0000000000207D8E                 db    0
LOAD:0000000000207D8F                 db    0
LOAD:0000000000207D90                 db    0
LOAD:0000000000207D91                 db    0
LOAD:0000000000207D92                 db    0
LOAD:0000000000207D93                 db    0
LOAD:0000000000207D94                 db    0
LOAD:0000000000207D95                 db    0
LOAD:0000000000207D96                 db    0
LOAD:0000000000207D97                 db    0
LOAD:0000000000207D98                 db    0
LOAD:0000000000207D99                 db    0
LOAD:0000000000207D9A                 db    0
LOAD:0000000000207D9B                 db    0
LOAD:0000000000207D9C                 db    0
LOAD:0000000000207D9D                 db    0
LOAD:0000000000207D9E                 db    0
LOAD:0000000000207D9F                 db    0
LOAD:0000000000207DA0                 db    0
LOAD:0000000000207DA1                 db    0
LOAD:0000000000207DA2                 db    0
LOAD:0000000000207DA3                 db    0
LOAD:0000000000207DA4                 db    0
LOAD:0000000000207DA5                 db    0
LOAD:0000000000207DA6                 db    0
LOAD:0000000000207DA7                 db    0
LOAD:0000000000207DA8                 db    0
LOAD:0000000000207DA9                 db    0
LOAD:0000000000207DAA                 db    0
LOAD:0000000000207DAB                 db    0
LOAD:0000000000207DAC                 db    0
LOAD:0000000000207DAD                 db    0
LOAD:0000000000207DAE                 db    0
LOAD:0000000000207DAF                 db    0
LOAD:0000000000207DB0                 db    0
LOAD:0000000000207DB1                 db    0
LOAD:0000000000207DB2                 db    0
LOAD:0000000000207DB3                 db    0
LOAD:0000000000207DB4                 db    0
LOAD:0000000000207DB5                 db    0
LOAD:0000000000207DB6                 db    0
LOAD:0000000000207DB7                 db    0
LOAD:0000000000207DB8                 db    0
LOAD:0000000000207DB9                 db    0
LOAD:0000000000207DBA                 db    0
LOAD:0000000000207DBB                 db    0
LOAD:0000000000207DBC                 db    0
LOAD:0000000000207DBD                 db    0
LOAD:0000000000207DBE                 db    0
LOAD:0000000000207DBF                 db    0
LOAD:0000000000207DC0                 db    0
LOAD:0000000000207DC1                 db    0
LOAD:0000000000207DC2                 db    0
LOAD:0000000000207DC3                 db    0
LOAD:0000000000207DC4                 db    0
LOAD:0000000000207DC5                 db    0
LOAD:0000000000207DC6                 db    0
LOAD:0000000000207DC7                 db    0
LOAD:0000000000207DC7 LOAD            ends
LOAD:0000000000207DC7
.got:0000000000207DC8 ; ===========================================================================
.got:0000000000207DC8
.got:0000000000207DC8 ; Segment type: Pure data
.got:0000000000207DC8 ; Segment permissions: Read/Write
.got:0000000000207DC8 _got            segment qword public 'DATA' use64
.got:0000000000207DC8                 assume cs:_got
.got:0000000000207DC8                 ;org 207DC8h
.got:0000000000207DC8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207DD0 qword_207DD0    dq 0                    ; DATA XREF: sub_16C0↑r
.got:0000000000207DD8 qword_207DD8    dq 0                    ; DATA XREF: sub_16C0+6↑r
.got:0000000000207DE0 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000207DE0                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000207DE8 utmpxname_ptr   dq offset utmpxname     ; DATA XREF: _utmpxname↑r
.got:0000000000207DF0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207DF8 localtime_ptr   dq offset localtime     ; DATA XREF: _localtime↑r
.got:0000000000207E00 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E08 __errno_location_ptr dq offset __errno_location
.got:0000000000207E08                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E10 strncpy_ptr     dq offset strncpy       ; DATA XREF: _strncpy↑r
.got:0000000000207E18 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E20 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E28 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E30 fread_unlocked_ptr dq offset fread_unlocked
.got:0000000000207E30                                         ; DATA XREF: _fread_unlocked↑r
.got:0000000000207E38 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E40 endutxent_ptr   dq offset endutxent     ; DATA XREF: _endutxent↑r
.got:0000000000207E48 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207E50 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207E50                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207E58 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:0000000000207E60 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207E68 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207E68                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207E70 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207E78 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207E78                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207E80 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207E88 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207E90 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000207E98 gai_strerror_ptr dq offset gai_strerror ; DATA XREF: _gai_strerror↑r
.got:0000000000207EA0 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000207EA8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207EB0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207EB8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207EC0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207EC8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207EC8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207ED0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207ED8 getpwnam_ptr    dq offset getpwnam      ; DATA XREF: _getpwnam↑r
.got:0000000000207EE0 setutxent_ptr   dq offset setutxent     ; DATA XREF: _setutxent↑r
.got:0000000000207EE8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207EF0 kill_ptr        dq offset kill          ; DATA XREF: _kill↑r
.got:0000000000207EF8 time_ptr        dq offset time          ; DATA XREF: _time↑r
.got:0000000000207F00 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F08 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000207F10 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F18 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F20 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F28 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F30 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000207F30                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000207F38 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F40 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F48 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F50 strftime_ptr    dq offset strftime      ; DATA XREF: _strftime↑r
.got:0000000000207F58 getutxent_ptr   dq offset getutxent     ; DATA XREF: _getutxent↑r
.got:0000000000207F60 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F68 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F70 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000207F78 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F80 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207F88 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207F90 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207F90                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207F98 getaddrinfo_ptr dq offset getaddrinfo   ; DATA XREF: _getaddrinfo↑r
.got:0000000000207FA0 strdup_ptr      dq offset strdup        ; DATA XREF: _strdup↑r
.got:0000000000207FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC0 freeaddrinfo_ptr dq offset freeaddrinfo ; DATA XREF: _freeaddrinfo↑r
.got:0000000000207FC8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000207FC8                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000207FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FD8                                         ; DATA XREF: start+24↑r
.got:0000000000207FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FF0 _got            ends
.got:0000000000207FF0
LOAD:0000000000207FF8 ; ===========================================================================
LOAD:0000000000207FF8
LOAD:0000000000207FF8 ; Segment type: Pure data
LOAD:0000000000207FF8 ; Segment permissions: Read/Write
LOAD:0000000000207FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FF8                 assume cs:LOAD
LOAD:0000000000207FF8                 ;org 207FF8h
LOAD:0000000000207FF8                 align 20h
LOAD:0000000000207FF8 LOAD            ends
LOAD:0000000000207FF8
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010 include_where   db 1                    ; DATA XREF: main+167↑w
.data:0000000000208010                                         ; main+18F↑w ...
.data:0000000000208011 do_short_format db 1                    ; DATA XREF: main:loc_1C38↑w
.data:0000000000208011                                         ; main:loc_1C88↑w ...
.data:0000000000208012 include_home_and_shell db 1             ; DATA XREF: main:loc_1C78↑w
.data:0000000000208012                                         ; print_long_entry:loc_22F7↑r
.data:0000000000208013 include_plan    db 1                    ; DATA XREF: main+B8↑w
.data:0000000000208013                                         ; print_long_entry:loc_230D↑r ...
.data:0000000000208014 include_project db 1                    ; DATA XREF: main+E5↑w
.data:0000000000208014                                         ; print_long_entry:loc_2300↑r ...
.data:0000000000208015 include_fullname db 1                   ; DATA XREF: main+102↑w
.data:0000000000208015                                         ; main:loc_1C20↑w ...
.data:0000000000208016 include_heading db 1                    ; DATA XREF: main:loc_1C68↑w
.data:0000000000208016                                         ; main:loc_1D68↑r
.data:0000000000208017 include_idle    db 1                    ; DATA XREF: main+196↑w
.data:0000000000208017                                         ; main+389↑r ...
.data:0000000000208018                 public Version
.data:0000000000208018 Version         dq offset a831          ; DATA XREF: main+129↑r
.data:0000000000208018                                         ; "8.31"
.data:0000000000208020                 public exit_failure
.data:0000000000208020 ; int exit_failure
.data:0000000000208020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3042↑r
.data:0000000000208020                                         ; xalloc_die+17↑r
.data:0000000000208024                 align 20h
.data:0000000000208040                 public quote_quoting_options
.data:0000000000208040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208040                                         ; quote_mem↑o ...
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058                 db    0
.data:0000000000208059                 db    0
.data:000000000020805A                 db    0
.data:000000000020805B                 db    0
.data:000000000020805C                 db    0
.data:000000000020805D                 db    0
.data:000000000020805E                 db    0
.data:000000000020805F                 db    0
.data:0000000000208060                 db    0
.data:0000000000208061                 db    0
.data:0000000000208062                 db    0
.data:0000000000208063                 db    0
.data:0000000000208064                 db    0
.data:0000000000208065                 db    0
.data:0000000000208066                 db    0
.data:0000000000208067                 db    0
.data:0000000000208068                 db    0
.data:0000000000208069                 db    0
.data:000000000020806A                 db    0
.data:000000000020806B                 db    0
.data:000000000020806C                 db    0
.data:000000000020806D                 db    0
.data:000000000020806E                 db    0
.data:000000000020806F                 db    0
.data:0000000000208070                 db    0
.data:0000000000208071                 db    0
.data:0000000000208072                 db    0
.data:0000000000208073                 db    0
.data:0000000000208074                 db    0
.data:0000000000208075                 db    0
.data:0000000000208076                 db    0
.data:0000000000208077                 db    0
.data:0000000000208078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208078                                         ; quotearg_n_options:loc_45BD↑r ...
.data:000000000020807C                 align 20h
.data:0000000000208080 ; void *slotvec
.data:0000000000208080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208080                                         ; quotearg_n_options+76↑w ...
.data:0000000000208088                 align 10h
.data:0000000000208090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208090                                         ; quotearg_n_options+187↑r ...
.data:0000000000208098 off_208098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208098 _data           ends
.data:0000000000208098
.bss:00000000002080A0 ; ===========================================================================
.bss:00000000002080A0
.bss:00000000002080A0 ; Segment type: Uninitialized
.bss:00000000002080A0 ; Segment permissions: Read/Write
.bss:00000000002080A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002080A0                 assume cs:_bss
.bss:00000000002080A0                 ;org 2080A0h
.bss:00000000002080A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002080A0                 public __bss_start ; weak
.bss:00000000002080A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000950↑o
.bss:00000000002080A0                                         ; LOAD:0000000000000998↑o ...
.bss:00000000002080A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002080A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002080A0                                         ; _edata
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002080A8 ; _IO_FILE *stdout
.bss:00000000002080A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000938↑o
.bss:00000000002080A8                                         ; main+122↑r ...
.bss:00000000002080A8                                         ; Alternative name is 'stdout'
.bss:00000000002080A8                                         ; Copy of shared data
.bss:00000000002080B0                 public optind@@GLIBC_2_2_5
.bss:00000000002080B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000009C8↑o
.bss:00000000002080B0                                         ; main:loc_1C94↑r
.bss:00000000002080B0                                         ; Alternative name is 'optind'
.bss:00000000002080B0                                         ; Copy of shared data
.bss:00000000002080B4                 align 8
.bss:00000000002080B8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080B8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080B8                                         ; DATA XREF: LOAD:0000000000000968↑o
.bss:00000000002080B8                                         ; LOAD:0000000000000980↑o ...
.bss:00000000002080B8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080B8                                         ; Copy of shared data
.bss:00000000002080C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080C0 ; FILE *stderr
.bss:00000000002080C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009B0↑o
.bss:00000000002080C0                                         ; usage+3D↑r ...
.bss:00000000002080C0                                         ; Alternative name is 'stderr'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080C9                 align 20h
.bss:00000000002080E0 ; char buf_7049[48]
.bss:00000000002080E0 buf_7049        db 30h dup(?)           ; DATA XREF: print_entry+1BF↑o
.bss:00000000002080E0                                         ; print_entry+1D3↑o ...
.bss:0000000000208110 buf_7041        db    ? ;               ; DATA XREF: print_entry+365↑o
.bss:0000000000208110                                         ; print_entry+38E↑o ...
.bss:0000000000208111                 db    ? ;
.bss:0000000000208112                 db    ? ;
.bss:0000000000208113                 db    ? ;
.bss:0000000000208114                 db    ? ;
.bss:0000000000208115                 db    ? ;
.bss:0000000000208116                 db    ? ;
.bss:0000000000208117                 db    ? ;
.bss:0000000000208118                 db    ? ;
.bss:0000000000208119                 db    ? ;
.bss:000000000020811A                 db    ? ;
.bss:000000000020811B                 db    ? ;
.bss:000000000020811C                 db    ? ;
.bss:000000000020811D                 db    ? ;
.bss:000000000020811E                 db    ? ;
.bss:000000000020811F                 db    ? ;
.bss:0000000000208120                 db    ? ;
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128 ; time_t now_7040
.bss:0000000000208128 now_7040        dq ?                    ; DATA XREF: print_entry:loc_2920↑r
.bss:0000000000208128                                         ; print_entry:loc_2A30↑o ...
.bss:0000000000208130 time_format_width dd ?                  ; DATA XREF: main+297↑w
.bss:0000000000208130                                         ; main+2E2↑w ...
.bss:0000000000208134                 align 8
.bss:0000000000208138 ; char *time_format
.bss:0000000000208138 time_format     dq ?                    ; DATA XREF: main+2A1↑w
.bss:0000000000208138                                         ; main+2EC↑w ...
.bss:0000000000208140 ; struct addrinfo hints_3317
.bss:0000000000208140 hints_3317      addrinfo <?>            ; DATA XREF: canon_host_r+3↑o
.bss:0000000000208140                                         ; canon_host_r+17↑w
.bss:0000000000208170 ; int last_cherror
.bss:0000000000208170 last_cherror    dd ?                    ; DATA XREF: canon_host↑o
.bss:0000000000208170                                         ; ch_strerror↑r
.bss:0000000000208174                 align 8
.bss:0000000000208178 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000208178                                         ; close_stdout+1B↑r
.bss:0000000000208179                 align 20h
.bss:0000000000208180 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000208180                                         ; close_stdout+56↑r
.bss:0000000000208188                 public program_name
.bss:0000000000208188 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000208188                                         ; set_program_name:loc_31DD↑w
.bss:0000000000208190                 align 20h
.bss:00000000002081A0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002081A0                                         ; quotearg_free+46↑o ...
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200                 db    ? ;
.bss:0000000000208201                 db    ? ;
.bss:0000000000208202                 db    ? ;
.bss:0000000000208203                 db    ? ;
.bss:0000000000208204                 db    ? ;
.bss:0000000000208205                 db    ? ;
.bss:0000000000208206                 db    ? ;
.bss:0000000000208207                 db    ? ;
.bss:0000000000208208                 db    ? ;
.bss:0000000000208209                 db    ? ;
.bss:000000000020820A                 db    ? ;
.bss:000000000020820B                 db    ? ;
.bss:000000000020820C                 db    ? ;
.bss:000000000020820D                 db    ? ;
.bss:000000000020820E                 db    ? ;
.bss:000000000020820F                 db    ? ;
.bss:0000000000208210                 db    ? ;
.bss:0000000000208211                 db    ? ;
.bss:0000000000208212                 db    ? ;
.bss:0000000000208213                 db    ? ;
.bss:0000000000208214                 db    ? ;
.bss:0000000000208215                 db    ? ;
.bss:0000000000208216                 db    ? ;
.bss:0000000000208217                 db    ? ;
.bss:0000000000208218                 db    ? ;
.bss:0000000000208219                 db    ? ;
.bss:000000000020821A                 db    ? ;
.bss:000000000020821B                 db    ? ;
.bss:000000000020821C                 db    ? ;
.bss:000000000020821D                 db    ? ;
.bss:000000000020821E                 db    ? ;
.bss:000000000020821F                 db    ? ;
.bss:0000000000208220                 db    ? ;
.bss:0000000000208221                 db    ? ;
.bss:0000000000208222                 db    ? ;
.bss:0000000000208223                 db    ? ;
.bss:0000000000208224                 db    ? ;
.bss:0000000000208225                 db    ? ;
.bss:0000000000208226                 db    ? ;
.bss:0000000000208227                 db    ? ;
.bss:0000000000208228                 db    ? ;
.bss:0000000000208229                 db    ? ;
.bss:000000000020822A                 db    ? ;
.bss:000000000020822B                 db    ? ;
.bss:000000000020822C                 db    ? ;
.bss:000000000020822D                 db    ? ;
.bss:000000000020822E                 db    ? ;
.bss:000000000020822F                 db    ? ;
.bss:0000000000208230                 db    ? ;
.bss:0000000000208231                 db    ? ;
.bss:0000000000208232                 db    ? ;
.bss:0000000000208233                 db    ? ;
.bss:0000000000208234                 db    ? ;
.bss:0000000000208235                 db    ? ;
.bss:0000000000208236                 db    ? ;
.bss:0000000000208237                 db    ? ;
.bss:0000000000208238                 db    ? ;
.bss:0000000000208239                 db    ? ;
.bss:000000000020823A                 db    ? ;
.bss:000000000020823B                 db    ? ;
.bss:000000000020823C                 db    ? ;
.bss:000000000020823D                 db    ? ;
.bss:000000000020823E                 db    ? ;
.bss:000000000020823F                 db    ? ;
.bss:0000000000208240                 db    ? ;
.bss:0000000000208241                 db    ? ;
.bss:0000000000208242                 db    ? ;
.bss:0000000000208243                 db    ? ;
.bss:0000000000208244                 db    ? ;
.bss:0000000000208245                 db    ? ;
.bss:0000000000208246                 db    ? ;
.bss:0000000000208247                 db    ? ;
.bss:0000000000208248                 db    ? ;
.bss:0000000000208249                 db    ? ;
.bss:000000000020824A                 db    ? ;
.bss:000000000020824B                 db    ? ;
.bss:000000000020824C                 db    ? ;
.bss:000000000020824D                 db    ? ;
.bss:000000000020824E                 db    ? ;
.bss:000000000020824F                 db    ? ;
.bss:0000000000208250                 db    ? ;
.bss:0000000000208251                 db    ? ;
.bss:0000000000208252                 db    ? ;
.bss:0000000000208253                 db    ? ;
.bss:0000000000208254                 db    ? ;
.bss:0000000000208255                 db    ? ;
.bss:0000000000208256                 db    ? ;
.bss:0000000000208257                 db    ? ;
.bss:0000000000208258                 db    ? ;
.bss:0000000000208259                 db    ? ;
.bss:000000000020825A                 db    ? ;
.bss:000000000020825B                 db    ? ;
.bss:000000000020825C                 db    ? ;
.bss:000000000020825D                 db    ? ;
.bss:000000000020825E                 db    ? ;
.bss:000000000020825F                 db    ? ;
.bss:0000000000208260                 db    ? ;
.bss:0000000000208261                 db    ? ;
.bss:0000000000208262                 db    ? ;
.bss:0000000000208263                 db    ? ;
.bss:0000000000208264                 db    ? ;
.bss:0000000000208265                 db    ? ;
.bss:0000000000208266                 db    ? ;
.bss:0000000000208267                 db    ? ;
.bss:0000000000208268                 db    ? ;
.bss:0000000000208269                 db    ? ;
.bss:000000000020826A                 db    ? ;
.bss:000000000020826B                 db    ? ;
.bss:000000000020826C                 db    ? ;
.bss:000000000020826D                 db    ? ;
.bss:000000000020826E                 db    ? ;
.bss:000000000020826F                 db    ? ;
.bss:0000000000208270                 db    ? ;
.bss:0000000000208271                 db    ? ;
.bss:0000000000208272                 db    ? ;
.bss:0000000000208273                 db    ? ;
.bss:0000000000208274                 db    ? ;
.bss:0000000000208275                 db    ? ;
.bss:0000000000208276                 db    ? ;
.bss:0000000000208277                 db    ? ;
.bss:0000000000208278                 db    ? ;
.bss:0000000000208279                 db    ? ;
.bss:000000000020827A                 db    ? ;
.bss:000000000020827B                 db    ? ;
.bss:000000000020827C                 db    ? ;
.bss:000000000020827D                 db    ? ;
.bss:000000000020827E                 db    ? ;
.bss:000000000020827F                 db    ? ;
.bss:0000000000208280                 db    ? ;
.bss:0000000000208281                 db    ? ;
.bss:0000000000208282                 db    ? ;
.bss:0000000000208283                 db    ? ;
.bss:0000000000208284                 db    ? ;
.bss:0000000000208285                 db    ? ;
.bss:0000000000208286                 db    ? ;
.bss:0000000000208287                 db    ? ;
.bss:0000000000208288                 db    ? ;
.bss:0000000000208289                 db    ? ;
.bss:000000000020828A                 db    ? ;
.bss:000000000020828B                 db    ? ;
.bss:000000000020828C                 db    ? ;
.bss:000000000020828D                 db    ? ;
.bss:000000000020828E                 db    ? ;
.bss:000000000020828F                 db    ? ;
.bss:0000000000208290                 db    ? ;
.bss:0000000000208291                 db    ? ;
.bss:0000000000208292                 db    ? ;
.bss:0000000000208293                 db    ? ;
.bss:0000000000208294                 db    ? ;
.bss:0000000000208295                 db    ? ;
.bss:0000000000208296                 db    ? ;
.bss:0000000000208297                 db    ? ;
.bss:0000000000208298                 db    ? ;
.bss:0000000000208299                 db    ? ;
.bss:000000000020829A                 db    ? ;
.bss:000000000020829B                 db    ? ;
.bss:000000000020829C                 db    ? ;
.bss:000000000020829D                 db    ? ;
.bss:000000000020829E                 db    ? ;
.bss:000000000020829F                 db    ? ;
.bss:00000000002082A0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002082A0                                         ; get_quoting_style↑o ...
.bss:00000000002082B0 xmmword_2082B0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002082B0                                         ; quotearg_n_custom_mem+39↑r
.bss:00000000002082C0 xmmword_2082C0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:00000000002082C0                                         ; quotearg_n_custom_mem+46↑r
.bss:00000000002082D0 qword_2082D0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:00000000002082D0                                         ; quotearg_n_custom_mem+7↑r
.bss:00000000002082D0 _bss            ends
.bss:00000000002082D0
.prgend:00000000002082D8 ; ===========================================================================
.prgend:00000000002082D8
.prgend:00000000002082D8 ; Segment type: Zero-length
.prgend:00000000002082D8 _prgend         segment byte public '' use64
.prgend:00000000002082D8 _end            label byte
.prgend:00000000002082D8 _prgend         ends
.prgend:00000000002082D8
extern:00000000002082E0 ; ===========================================================================
extern:00000000002082E0
extern:00000000002082E0 ; Segment type: Externs
extern:00000000002082E0 ; extern
extern:00000000002082E0 ; const __int32_t **_ctype_toupper_loc(void)
extern:00000000002082E0                 extrn __ctype_toupper_loc:near
extern:00000000002082E0                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:00000000002082E0                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:00000000002082E8 ; int utmpxname(const char *file)
extern:00000000002082E8                 extrn utmpxname:near    ; CODE XREF: _utmpxname↑j
extern:00000000002082E8                                         ; DATA XREF: .got:utmpxname_ptr↑o
extern:00000000002082F0 ; void free(void *ptr)
extern:00000000002082F0                 extrn free:near         ; CODE XREF: _free↑j
extern:00000000002082F0                                         ; DATA XREF: .got:free_ptr↑o
extern:00000000002082F8 ; struct tm *localtime(const time_t *timer)
extern:00000000002082F8                 extrn localtime:near    ; CODE XREF: _localtime↑j
extern:00000000002082F8                                         ; DATA XREF: .got:localtime_ptr↑o
extern:0000000000208300 ; void __noreturn abort(void)
extern:0000000000208300                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208300                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208308 ; int *_errno_location(void)
extern:0000000000208308                 extrn __errno_location:near
extern:0000000000208308                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208308                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208310 ; char *strncpy(char *dest, const char *src, size_t n)
extern:0000000000208310                 extrn strncpy:near      ; CODE XREF: _strncpy↑j
extern:0000000000208310                                         ; DATA XREF: .got:strncpy_ptr↑o
extern:0000000000208318 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208318                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208318                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208320 ; void __noreturn exit(int status)
extern:0000000000208320                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208320                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208328 ; size_t _fpending(FILE *fp)
extern:0000000000208328                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208328                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208330 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000208330                 extrn fread_unlocked:near
extern:0000000000208330                                         ; CODE XREF: _fread_unlocked↑j
extern:0000000000208330                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:0000000000208338 ; char *textdomain(const char *domainname)
extern:0000000000208338                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000208338                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000208340 ; void endutxent(void)
extern:0000000000208340                 extrn endutxent:near    ; CODE XREF: _endutxent↑j
extern:0000000000208340                                         ; DATA XREF: .got:endutxent_ptr↑o
extern:0000000000208348 ; int fclose(FILE *stream)
extern:0000000000208348                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000208348                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000208350 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000208350                 extrn bindtextdomain:near
extern:0000000000208350                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000208350                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000208358 ; char *stpcpy(char *dest, const char *src)
extern:0000000000208358                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:0000000000208358                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:0000000000208360 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000208360                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000208360                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000208368 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000208368                 extrn __ctype_get_mb_cur_max:near
extern:0000000000208368                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000208368                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000208370 ; size_t strlen(const char *s)
extern:0000000000208370                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000208370                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000208378                 extrn __stack_chk_fail:near
extern:0000000000208378                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000208378                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000208380 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000208380                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000208380                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000208388 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000208388                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000208388                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000208390 ; char *strchr(const char *s, int c)
extern:0000000000208390                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000208390                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000208398 ; const char *gai_strerror(int ecode)
extern:0000000000208398                 extrn gai_strerror:near ; CODE XREF: _gai_strerror↑j
extern:0000000000208398                                         ; DATA XREF: .got:gai_strerror_ptr↑o
extern:00000000002083A0 ; int _overflow(_IO_FILE *, int)
extern:00000000002083A0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002083A0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002083A8 ; char *strrchr(const char *s, int c)
extern:00000000002083A8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002083A8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002083B0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002083B0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002083B0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002083B8 ; void *memset(void *s, int c, size_t n)
extern:00000000002083B8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002083B8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002083C0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002083C0                 extrn __libc_start_main:near
extern:00000000002083C0                                         ; CODE XREF: start+24↑p
extern:00000000002083C0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002083C8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002083C8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002083C8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002083D0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002083D0                 extrn fputs_unlocked:near
extern:00000000002083D0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002083D0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002083D8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002083D8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002083D8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002083E0 ; struct passwd *getpwnam(const char *name)
extern:00000000002083E0                 extrn getpwnam:near     ; CODE XREF: _getpwnam↑j
extern:00000000002083E0                                         ; DATA XREF: .got:getpwnam_ptr↑o
extern:00000000002083E8 ; void setutxent(void)
extern:00000000002083E8                 extrn setutxent:near    ; CODE XREF: _setutxent↑j
extern:00000000002083E8                                         ; DATA XREF: .got:setutxent_ptr↑o
extern:00000000002083F0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002083F0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002083F0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002083F8 ; int kill(__pid_t pid, int sig)
extern:00000000002083F8                 extrn kill:near         ; CODE XREF: _kill↑j
extern:00000000002083F8                                         ; DATA XREF: .got:kill_ptr↑o
extern:0000000000208400 ; time_t time(time_t *timer)
extern:0000000000208400                 extrn time:near         ; CODE XREF: _time↑j
extern:0000000000208400                                         ; DATA XREF: .got:time_ptr↑o
extern:0000000000208408 ; int fileno(FILE *stream)
extern:0000000000208408                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208408                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208410 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000208410                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:0000000000208410                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:0000000000208418 ; void *malloc(size_t size)
extern:0000000000208418                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208418                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208420 ; int fflush(FILE *stream)
extern:0000000000208420                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208420                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208428 ; char *nl_langinfo(nl_item item)
extern:0000000000208428                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208428                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208430 ; int _freading(FILE *fp)
extern:0000000000208430                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208430                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208438 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000208438                 extrn fwrite_unlocked:near
extern:0000000000208438                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000208438                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000208440 ; void *realloc(void *ptr, size_t size)
extern:0000000000208440                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208440                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208448 ; char *setlocale(int category, const char *locale)
extern:0000000000208448                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208448                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208450                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208450                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208458 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
extern:0000000000208458                 extrn strftime:near     ; CODE XREF: _strftime↑j
extern:0000000000208458                                         ; DATA XREF: .got:strftime_ptr↑o
extern:0000000000208460 ; struct utmpx *getutxent(void)
extern:0000000000208460                 extrn getutxent:near    ; CODE XREF: _getutxent↑j
extern:0000000000208460                                         ; DATA XREF: .got:getutxent_ptr↑o
extern:0000000000208468 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208468                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208468                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000208470 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000208470                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000208470                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000208478 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000208478                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000208478                                         ; DATA XREF: .got:fopen_ptr↑o
extern:0000000000208480 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000208480                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000208480                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000208488 ; void __noreturn exit(int status)
extern:0000000000208488                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000208488                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000208490 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000208490                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000208490                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000208498                 extrn __fprintf_chk:near
extern:0000000000208498                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000208498                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002084A0 ; int getaddrinfo(const char *name, const char *service, const struct addrinfo *req, struct addrinfo **pai)
extern:00000000002084A0                 extrn getaddrinfo:near  ; CODE XREF: _getaddrinfo↑j
extern:00000000002084A0                                         ; DATA XREF: .got:getaddrinfo_ptr↑o
extern:00000000002084A8 ; char *strdup(const char *s)
extern:00000000002084A8                 extrn strdup:near       ; CODE XREF: _strdup↑j
extern:00000000002084A8                                         ; DATA XREF: .got:strdup_ptr↑o
extern:00000000002084B0 ; int mbsinit(const mbstate_t *ps)
extern:00000000002084B0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002084B0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002084B8 ; int iswprint(wint_t wc)
extern:00000000002084B8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002084B8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002084C0 ; int __fastcall __cxa_finalize(void *)
extern:00000000002084C0                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002084C0                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002084C0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002084C8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002084C8                 extrn __ctype_b_loc:near
extern:00000000002084C8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002084C8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002084D0 ; void freeaddrinfo(struct addrinfo *ai)
extern:00000000002084D0                 extrn freeaddrinfo:near ; CODE XREF: _freeaddrinfo↑j
extern:00000000002084D0                                         ; DATA XREF: .got:freeaddrinfo_ptr↑o
extern:00000000002084D8                 extrn __sprintf_chk:near
extern:00000000002084D8                                         ; CODE XREF: ___sprintf_chk↑j
extern:00000000002084D8                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:00000000002084E0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002084E0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002084E8                 extrn __gmon_start__:near ; weak
extern:00000000002084E8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002084E8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002084F0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002084F0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002084F0
extern:00000000002084F0
extern:00000000002084F0                 end start
