LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 1F9F2A2089E9B64771983994FF2EFE5496046E66DEDE9AB38132A79818D6F7D1
LOAD:0000000000000000 ; Input MD5    : 1E1D0045A7EE3A72D6AF6E58C9D9E4E3
LOAD:0000000000000000 ; Input CRC32  : 54977F00
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/shuf
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'shuf.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'freopen-safer.c'
LOAD:0000000000000000 ; Source File : 'linebuffer.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'randint.c'
LOAD:0000000000000000 ; Source File : 'randperm.c'
LOAD:0000000000000000 ; Source File : 'randread.c'
LOAD:0000000000000000 ; Source File : 'rand-isaac.c'
LOAD:0000000000000000 ; Source File : 'read-file.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 45EB8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0BCA0h               ; Size in file image
LOAD:00000000000000D8                 dq 0BCA0h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0C9F0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20C9F0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 690h                 ; Size in file image
LOAD:0000000000000110                 dq 850h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0CB98h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20CB98h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0A2F8h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0A2F8h               ; Physical address
LOAD:00000000000001B0                 dq 43Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 43Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0C9F0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20C9F0h              ; Physical address
LOAD:0000000000000220                 dq 610h                 ; Size in file image
LOAD:0000000000000228                 dq 610h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 21h, 8Eh, 23h, 73h, 46h, 40h, 0E1h, 44h, 56h, 2Eh, 2Bh ; Desc
LOAD:0000000000000284                 db 13h, 0F8h, 0C2h, 15h, 3Eh, 0F4h, 0FFh, 8Fh, 0CBh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 4Bh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 4Bh, 4Ch, 52h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aUflow - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_AC0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_AC0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_AC0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_AC0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_AC0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFtello - offset byte_AC0, 12h, 0, 0, \ ; "ftello"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_AC0, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aReadChk - offset byte_AC0, 12h, 0, 0, \ ; "__read_chk"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFerror - offset byte_AC0, 12h, 0, 0, \ ; "ferror"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFread - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "fread"
LOAD:0000000000000400                            0>
LOAD:0000000000000418                 Elf64_Sym <offset aFcntl - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000418                            0>
LOAD:0000000000000430                 Elf64_Sym <offset aGetpid - offset byte_AC0, 12h, 0, 0, \ ; "getpid"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aFreadUnlocked - offset byte_AC0, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_AC0, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aFclose - offset byte_AC0, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aBindtextdomain - offset byte_AC0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStpcpy - offset byte_AC0, 12h, 0, 0, \ ; "stpcpy"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aDcgettext - offset byte_AC0, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_AC0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrlen - offset byte_AC0, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStackChkFail - offset byte_AC0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aGetuid - offset byte_AC0, 12h, 0, 0, \ ; "getuid"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aGetoptLong - offset byte_AC0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMbrtowc - offset byte_AC0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aDup2 - offset byte_AC0, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:0000000000000568                            0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrchr - offset byte_AC0, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aStrrchr - offset byte_AC0, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aLseek - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000005B0                            0>
LOAD:00000000000005C8                 Elf64_Sym <offset aGettimeofday - offset byte_AC0, 12h, 0, 0, \ ; "gettimeofday"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aAssertFail - offset byte_AC0, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aStrtoulInterna - offset byte_AC0, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMemset - offset byte_AC0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFreopen - offset byte_AC0, 12h, 0, 0, \ ; "freopen"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFclose+1 - offset byte_AC0, 12h, 0, 0, \ ; "close"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aPosixFadvise - offset byte_AC0, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aMemchr - offset byte_AC0, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aLibcStartMain - offset byte_AC0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aMemcmp - offset byte_AC0, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFputsUnlocked - offset byte_AC0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aCalloc - offset byte_AC0, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aStrcmp - offset byte_AC0, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aGmonStart - offset byte_AC0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aMemcpy - offset byte_AC0, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFileno - offset byte_AC0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aGetgid - offset byte_AC0, 12h, 0, 0, \ ; "getgid"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aMalloc - offset byte_AC0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFflush - offset byte_AC0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aNlLanginfo - offset byte_AC0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFxstat - offset byte_AC0, 12h, 0, 0, \ ; "__fxstat"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFreading - offset byte_AC0, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFwriteUnlocked - offset byte_AC0, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aRealloc - offset byte_AC0, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFdopen - offset byte_AC0, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aSetlocale - offset byte_AC0, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aPrintfChk - offset byte_AC0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aSetvbuf - offset byte_AC0, 12h, 0, 0, \ ; "setvbuf"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aFerror+1 - offset byte_AC0, 12h, 0, 0, \ ; "error"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aExplicitBzeroC - offset byte_AC0, 12h, 0, 0, \ ; "__explicit_bzero_chk"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aFdopen+2 - offset byte_AC0, 12h, 0, 0, \ ; "open"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aFseeko - offset byte_AC0, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aFopen - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000008C8                            0>
LOAD:00000000000008E0                 Elf64_Sym <offset aStrtoul - offset byte_AC0, 12h, 0, 0, \ ; "strtoul"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aCxaAtexit - offset byte_AC0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aGetppid - offset byte_AC0, 12h, 0, 0, \ ; "getppid"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aExit+1 - offset byte_AC0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aFwrite - offset byte_AC0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aFprintfChk - offset byte_AC0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aItmRegistertmc - offset byte_AC0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aMbsinit - offset byte_AC0, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aIswprint - offset byte_AC0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aCxaFinalize - offset byte_AC0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aCtypeBLoc - offset byte_AC0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aStdout - offset byte_AC0, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000009E8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000A00                 Elf64_Sym <offset aProgname - offset byte_AC0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000A00                            offset __bss_start, 8>
LOAD:0000000000000A18                 Elf64_Sym <offset aStdin - offset byte_AC0, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000A18                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aProgramInvocat - offset byte_AC0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000A30                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A48                 Elf64_Sym <offset aPrognameFull - offset byte_AC0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A48                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A60                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_AC0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A60                            offset __bss_start, 8>
LOAD:0000000000000A78                 Elf64_Sym <offset aStderr - offset byte_AC0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A78                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A90                 Elf64_Sym <offset aOptind - offset byte_AC0, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A90                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000AA8                 Elf64_Sym <offset aOptarg - offset byte_AC0, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000AA8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000AC0 ; ELF String Table
LOAD:0000000000000AC0 byte_AC0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000AC0                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000AC1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000F00↓o
LOAD:0000000000000ACB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000AD2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000ADF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000AE9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000AF1 aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000AF7 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000AFF aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000B06 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B0E aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B18 aReadChk        db '__read_chk',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000B23 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000B34 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000B3D aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000B45 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000B4B aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000B51 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000B51                                         ; LOAD:0000000000000928↑o
LOAD:0000000000000B57 aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B5E aGetpid         db 'getpid',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000B65 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000B65                                         ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000B7D aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000B8B aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000B8B                                         ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BA2 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000BB0 aGetppid        db 'getppid',0          ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000BB8 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000BBF aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000BC6 aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000BD5 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000BDC aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000BED aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000BF4 aDup2           db 'dup2',0             ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000BF9 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C07 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000C0E aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000C14 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000C1B aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000C1B                                         ; LOAD:0000000000000640↑o
LOAD:0000000000000C22 aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000C2A aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000C31 aFtello         db 'ftello',0           ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000C38 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000C40 aGetgid         db 'getgid',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000C47 aUflow          db '__uflow',0          ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000C4F aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000C5B aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000C69 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000C70 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000C7B aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000C82 aGetuid         db 'getuid',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000C89 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000C95 aFreopen        db 'freopen',0          ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000C9D aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000CA6 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000CAD aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000CB4 aFread          db 'fread',0            ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000CBA aGettimeofday   db 'gettimeofday',0     ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000CC7 aExplicitBzeroC db '__explicit_bzero_chk',0
LOAD:0000000000000CC7                                         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000CDC aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000CE7 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000CEE aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000CEE                                         ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000D0C aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000D0C                                         ; LOAD:0000000000000898↑o
LOAD:0000000000000D13 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000D22 aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000D2A aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000D30 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000D30                                         ; LOAD:0000000000000460↑o
LOAD:0000000000000D3F aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000D4F aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000D56 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000D56                                         ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000D68 aFerror         db 'ferror',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000D68                                         ; LOAD:0000000000000868↑o
LOAD:0000000000000D6F aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000D76 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000D7D aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000D7D                                         ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000D90 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000D9F aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000DA4 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000DAF aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000DBF aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000DCC aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000F10↓o
LOAD:0000000000000DD6 aGlibc225       db 'GLIBC_2.25',0       ; DATA XREF: LOAD:0000000000000F20↓o
LOAD:0000000000000DE1 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000F30↓o
LOAD:0000000000000DED aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000F40↓o
LOAD:0000000000000DF8 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000F50↓o
LOAD:0000000000000E02 aGlibc225_0     db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000F60↓o
LOAD:0000000000000E0E aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000E0E                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000E2A aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000E39 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000E39                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000E53                 align 4
LOAD:0000000000000E54 ; ELF GNU Symbol Version Table
LOAD:0000000000000E54                 dw 0
LOAD:0000000000000E56                 dw 2                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000E58                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000E5A                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000E5C                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000E5E                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000E60                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000E62                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000E64                 dw 2                    ; ftello@@GLIBC_2.2.5
LOAD:0000000000000E66                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000E68                 dw 3                    ; __read_chk@@GLIBC_2.4
LOAD:0000000000000E6A                 dw 2                    ; ferror@@GLIBC_2.2.5
LOAD:0000000000000E6C                 dw 2                    ; fread@@GLIBC_2.2.5
LOAD:0000000000000E6E                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000E70                 dw 2                    ; getpid@@GLIBC_2.2.5
LOAD:0000000000000E72                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E74                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000E76                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000E78                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000E7A                 dw 2                    ; stpcpy@@GLIBC_2.2.5
LOAD:0000000000000E7C                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000E7E                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000E80                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000E82                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000E84                 dw 2                    ; getuid@@GLIBC_2.2.5
LOAD:0000000000000E86                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000E88                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000E8A                 dw 2                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000E8C                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000E8E                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000E90                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000E92                 dw 2                    ; gettimeofday@@GLIBC_2.2.5
LOAD:0000000000000E94                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000E96                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000E98                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000E9A                 dw 2                    ; freopen@@GLIBC_2.2.5
LOAD:0000000000000E9C                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000E9E                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000EA0                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000EA2                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000EA4                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000EA6                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000EA8                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000EAA                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000EAC                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000EAE                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000EB0                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000EB2                 dw 2                    ; getgid@@GLIBC_2.2.5
LOAD:0000000000000EB4                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000EB6                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000EB8                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000EBA                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000EBC                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000EBE                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000EC0                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000EC2                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000EC4                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000EC6                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000EC8                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:0000000000000ECA                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000ECC                 dw 6                    ; __explicit_bzero_chk@@GLIBC_2.25
LOAD:0000000000000ECE                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000ED0                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000ED2                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000ED4                 dw 2                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000000ED6                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000ED8                 dw 2                    ; getppid@@GLIBC_2.2.5
LOAD:0000000000000EDA                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000EDC                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000EDE                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000EE0                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000EE2                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000EE4                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000EE6                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000EE8                 dw 7                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000EEA                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000EEC                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000EEE                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000EF0                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000EF2                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000EF4                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000EF6                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000EF8                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000EFA                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000EFC                 dw 0
LOAD:0000000000000EFE                 dw 0
LOAD:0000000000000F00 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000F00                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_AC0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000F10                 Elf64_Vernaux <0D696913h, 0, 7, offset aGlibc23 - offset byte_AC0, \ ; "GLIBC_2.3"
LOAD:0000000000000F10                                10h>
LOAD:0000000000000F20                 Elf64_Vernaux <6969185h, 0, 6, offset aGlibc225 - offset byte_AC0, \ ; "GLIBC_2.25"
LOAD:0000000000000F20                                10h>
LOAD:0000000000000F30                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_AC0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000F30                                10h>
LOAD:0000000000000F40                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_AC0, \ ; "GLIBC_2.14"
LOAD:0000000000000F40                                10h>
LOAD:0000000000000F50                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_AC0, \ ; "GLIBC_2.4"
LOAD:0000000000000F50                                10h>
LOAD:0000000000000F60                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225_0 - offset byte_AC0, \ ; "GLIBC_2.2.5"
LOAD:0000000000000F60                                0>
LOAD:0000000000000F70 ; ELF RELA Relocation Table
LOAD:0000000000000F70                 Elf64_Rela <20C9F0h, 8, 2D40h> ; R_X86_64_RELATIVE +2D40h
LOAD:0000000000000F88                 Elf64_Rela <20C9F8h, 8, 2D00h> ; R_X86_64_RELATIVE +2D00h
LOAD:0000000000000FA0                 Elf64_Rela <20CA00h, 8, 9277h> ; R_X86_64_RELATIVE +9277h
LOAD:0000000000000FB8                 Elf64_Rela <20CA20h, 8, 927Ch> ; R_X86_64_RELATIVE +927Ch
LOAD:0000000000000FD0                 Elf64_Rela <20CA40h, 8, 9288h> ; R_X86_64_RELATIVE +9288h
LOAD:0000000000000FE8                 Elf64_Rela <20CA60h, 8, 9293h> ; R_X86_64_RELATIVE +9293h
LOAD:0000000000001000                 Elf64_Rela <20CA80h, 8, 929Ah> ; R_X86_64_RELATIVE +929Ah
LOAD:0000000000001018                 Elf64_Rela <20CAA0h, 8, 925Ch> ; R_X86_64_RELATIVE +925Ch
LOAD:0000000000001030                 Elf64_Rela <20CAC0h, 8, 92A8h> ; R_X86_64_RELATIVE +92A8h
LOAD:0000000000001048                 Elf64_Rela <20CAE0h, 8, 92B8h> ; R_X86_64_RELATIVE +92B8h
LOAD:0000000000001060                 Elf64_Rela <20CB00h, 8, 92BDh> ; R_X86_64_RELATIVE +92BDh
LOAD:0000000000001078                 Elf64_Rela <20CB40h, 8, 97C1h> ; R_X86_64_RELATIVE +97C1h
LOAD:0000000000001090                 Elf64_Rela <20CB48h, 8, 97C9h> ; R_X86_64_RELATIVE +97C9h
LOAD:00000000000010A8                 Elf64_Rela <20CB50h, 8, 97CFh> ; R_X86_64_RELATIVE +97CFh
LOAD:00000000000010C0                 Elf64_Rela <20CB58h, 8, 97DCh> ; R_X86_64_RELATIVE +97DCh
LOAD:00000000000010D8                 Elf64_Rela <20CB60h, 8, 97E9h> ; R_X86_64_RELATIVE +97E9h
LOAD:00000000000010F0                 Elf64_Rela <20CB68h, 8, 9267h> ; R_X86_64_RELATIVE +9267h
LOAD:0000000000001108                 Elf64_Rela <20CB70h, 8, 97FDh> ; R_X86_64_RELATIVE +97FDh
LOAD:0000000000001120                 Elf64_Rela <20CB78h, 8, 97E2h> ; R_X86_64_RELATIVE +97E2h
LOAD:0000000000001138                 Elf64_Rela <20CB80h, 8, 91BDh> ; R_X86_64_RELATIVE +91BDh
LOAD:0000000000001150                 Elf64_Rela <20CB88h, 8, 9805h> ; R_X86_64_RELATIVE +9805h
LOAD:0000000000001168                 Elf64_Rela <20D008h, 8, 20D008h> ; R_X86_64_RELATIVE +20D008h
LOAD:0000000000001180                 Elf64_Rela <20D010h, 8, 9759h> ; R_X86_64_RELATIVE +9759h
LOAD:0000000000001198                 Elf64_Rela <20D060h, 8, 20D070h> ; R_X86_64_RELATIVE +20D070h
LOAD:00000000000011B0                 Elf64_Rela <20D078h, 8, 20D100h> ; R_X86_64_RELATIVE +20D100h
LOAD:00000000000011C8                 Elf64_Rela <20CFC0h, 200000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:00000000000011E0                 Elf64_Rela <20CFC8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000011F8                 Elf64_Rela <20CFD0h, 2700000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001210                 Elf64_Rela <20CFD8h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001228                 Elf64_Rela <20CFE0h, 4600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001240                 Elf64_Rela <20CFE8h, 4900000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001258                 Elf64_Rela <20D080h, 4C00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001270                 Elf64_Rela <20D088h, 4B00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001288                 Elf64_Rela <20D090h, 4D00000005h, 0> ; R_X86_64_COPY stdin
LOAD:00000000000012A0                 Elf64_Rela <20D098h, 5200000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000012B8                 Elf64_Rela <20D0A0h, 5300000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000012D0                 Elf64_Rela <20D0A8h, 4F00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000012E8                 Elf64_Rela <20D0C0h, 5100000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001300 ; ELF JMPREL Relocation Table
LOAD:0000000000001300                 Elf64_Rela <20CDA0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000001318                 Elf64_Rela <20CDA8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001330                 Elf64_Rela <20CDB0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001348                 Elf64_Rela <20CDB8h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001360                 Elf64_Rela <20CDC0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001378                 Elf64_Rela <20CDC8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT ftello
LOAD:0000000000001390                 Elf64_Rela <20CDD0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000013A8                 Elf64_Rela <20CDD8h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __read_chk
LOAD:00000000000013C0                 Elf64_Rela <20CDE0h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT ferror
LOAD:00000000000013D8                 Elf64_Rela <20CDE8h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fread
LOAD:00000000000013F0                 Elf64_Rela <20CDF0h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001408                 Elf64_Rela <20CDF8h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT getpid
LOAD:0000000000001420                 Elf64_Rela <20CE00h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:0000000000001438                 Elf64_Rela <20CE08h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001450                 Elf64_Rela <20CE10h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001468                 Elf64_Rela <20CE18h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001480                 Elf64_Rela <20CE20h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:0000000000001498                 Elf64_Rela <20CE28h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000014B0                 Elf64_Rela <20CE30h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000014C8                 Elf64_Rela <20CE38h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000014E0                 Elf64_Rela <20CE40h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000014F8                 Elf64_Rela <20CE48h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT getuid
LOAD:0000000000001510                 Elf64_Rela <20CE50h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001528                 Elf64_Rela <20CE58h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001540                 Elf64_Rela <20CE60h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:0000000000001558                 Elf64_Rela <20CE68h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001570                 Elf64_Rela <20CE70h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001588                 Elf64_Rela <20CE78h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000015A0                 Elf64_Rela <20CE80h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT gettimeofday
LOAD:00000000000015B8                 Elf64_Rela <20CE88h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000015D0                 Elf64_Rela <20CE90h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:00000000000015E8                 Elf64_Rela <20CE98h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001600                 Elf64_Rela <20CEA0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT freopen
LOAD:0000000000001618                 Elf64_Rela <20CEA8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001630                 Elf64_Rela <20CEB0h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001648                 Elf64_Rela <20CEB8h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001660                 Elf64_Rela <20CEC0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001678                 Elf64_Rela <20CEC8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001690                 Elf64_Rela <20CED0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000016A8                 Elf64_Rela <20CED8h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000016C0                 Elf64_Rela <20CEE0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000016D8                 Elf64_Rela <20CEE8h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000016F0                 Elf64_Rela <20CEF0h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT getgid
LOAD:0000000000001708                 Elf64_Rela <20CEF8h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001720                 Elf64_Rela <20CF00h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001738                 Elf64_Rela <20CF08h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001750                 Elf64_Rela <20CF10h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001768                 Elf64_Rela <20CF18h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001780                 Elf64_Rela <20CF20h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001798                 Elf64_Rela <20CF28h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000017B0                 Elf64_Rela <20CF30h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:00000000000017C8                 Elf64_Rela <20CF38h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000017E0                 Elf64_Rela <20CF40h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000017F8                 Elf64_Rela <20CF48h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000001810                 Elf64_Rela <20CF50h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001828                 Elf64_Rela <20CF58h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT __explicit_bzero_chk
LOAD:0000000000001840                 Elf64_Rela <20CF60h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001858                 Elf64_Rela <20CF68h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001870                 Elf64_Rela <20CF70h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001888                 Elf64_Rela <20CF78h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:00000000000018A0                 Elf64_Rela <20CF80h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000018B8                 Elf64_Rela <20CF88h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT getppid
LOAD:00000000000018D0                 Elf64_Rela <20CF90h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000018E8                 Elf64_Rela <20CF98h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001900                 Elf64_Rela <20CFA0h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001918                 Elf64_Rela <20CFA8h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001930                 Elf64_Rela <20CFB0h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001948                 Elf64_Rela <20CFB8h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001948 LOAD            ends
LOAD:0000000000001948
.init:0000000000001960 ; ===========================================================================
.init:0000000000001960
.init:0000000000001960 ; Segment type: Pure code
.init:0000000000001960 ; Segment permissions: Read/Execute
.init:0000000000001960 _init           segment dword public 'CODE' use64
.init:0000000000001960                 assume cs:_init
.init:0000000000001960                 ;org 1960h
.init:0000000000001960                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001960
.init:0000000000001960 ; =============== S U B R O U T I N E =======================================
.init:0000000000001960
.init:0000000000001960
.init:0000000000001960                 public _init_proc
.init:0000000000001960 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001960                 sub     rsp, 8          ; _init
.init:0000000000001964                 mov     rax, cs:__gmon_start___ptr
.init:000000000000196B                 test    rax, rax
.init:000000000000196E                 jz      short loc_1972
.init:0000000000001970                 call    rax ; __gmon_start__
.init:0000000000001972
.init:0000000000001972 loc_1972:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001972                 add     rsp, 8
.init:0000000000001976                 retn
.init:0000000000001976 _init_proc      endp
.init:0000000000001976
.init:0000000000001976 _init           ends
.init:0000000000001976
LOAD:0000000000001977 ; ===========================================================================
LOAD:0000000000001977
LOAD:0000000000001977 ; Segment type: Pure code
LOAD:0000000000001977 ; Segment permissions: Read/Execute
LOAD:0000000000001977 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001977                 assume cs:LOAD
LOAD:0000000000001977                 ;org 1977h
LOAD:0000000000001977                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001977                 align 20h
LOAD:0000000000001977 LOAD            ends
LOAD:0000000000001977
.plt:0000000000001980 ; ===========================================================================
.plt:0000000000001980
.plt:0000000000001980 ; Segment type: Pure code
.plt:0000000000001980 ; Segment permissions: Read/Execute
.plt:0000000000001980 _plt            segment para public 'CODE' use64
.plt:0000000000001980                 assume cs:_plt
.plt:0000000000001980                 ;org 1980h
.plt:0000000000001980                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980
.plt:0000000000001980 sub_1980        proc near               ; CODE XREF: .plt:000000000000199B↓j
.plt:0000000000001980                                         ; .plt:00000000000019AB↓j ...
.plt:0000000000001980 ; __unwind {
.plt:0000000000001980                 push    cs:qword_20CD90
.plt:0000000000001986                 jmp     cs:qword_20CD98
.plt:0000000000001986 sub_1980        endp
.plt:0000000000001986
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:000000000000198C                 align 10h
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; int __uflow(_IO_FILE *)
.plt:0000000000001990 ___uflow        proc near               ; CODE XREF: readlinebuffer_delim+BB↓p
.plt:0000000000001990                 jmp     cs:__uflow_ptr
.plt:0000000000001990 ___uflow        endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    0
.plt:000000000000199B                 jmp     sub_1980
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: noreturn thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; void __noreturn abort(void)
.plt:00000000000019A0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000019A0                                         ; quotearg_buffer_restyled:def_37A1↓p ...
.plt:00000000000019A0                 jmp     cs:abort_ptr
.plt:00000000000019A0 _abort          endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    1
.plt:00000000000019AB                 jmp     sub_1980
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int *__errno_location(void)
.plt:00000000000019B0 ___errno_location proc near             ; CODE XREF: main+399↓p
.plt:00000000000019B0                                         ; main+599↓p ...
.plt:00000000000019B0                 jmp     cs:__errno_location_ptr
.plt:00000000000019B0 ___errno_location endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    2
.plt:00000000000019BB                 jmp     sub_1980
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000019C0 _strncmp        proc near               ; CODE XREF: usage+29C↓p
.plt:00000000000019C0                                         ; usage+35D↓p
.plt:00000000000019C0                 jmp     cs:strncmp_ptr
.plt:00000000000019C0 _strncmp        endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    3
.plt:00000000000019CB                 jmp     sub_1980
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: noreturn thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; void __noreturn _exit(int status)
.plt:00000000000019D0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000019D0                 jmp     cs:_exit_ptr
.plt:00000000000019D0 __exit          endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    4
.plt:00000000000019DB                 jmp     sub_1980
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; __off_t ftello(FILE *stream)
.plt:00000000000019E0 _ftello         proc near               ; CODE XREF: fread_file+1AB↓p
.plt:00000000000019E0                 jmp     cs:ftello_ptr
.plt:00000000000019E0 _ftello         endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    5
.plt:00000000000019EB                 jmp     sub_1980
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; size_t __fpending(FILE *fp)
.plt:00000000000019F0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000019F0                 jmp     cs:__fpending_ptr
.plt:00000000000019F0 ___fpending     endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    6
.plt:00000000000019FB                 jmp     sub_1980
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ___read_chk     proc near               ; CODE XREF: randread_new+118↓p
.plt:0000000000001A00                 jmp     cs:__read_chk_ptr
.plt:0000000000001A00 ___read_chk     endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    7
.plt:0000000000001A0B                 jmp     sub_1980
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; int ferror(FILE *stream)
.plt:0000000000001A10 _ferror         proc near               ; CODE XREF: fread_file+EA↓p
.plt:0000000000001A10                 jmp     cs:ferror_ptr
.plt:0000000000001A10 _ferror         endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    8
.plt:0000000000001A1B                 jmp     sub_1980
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001A20 _fread          proc near               ; CODE XREF: fread_file+CF↓p
.plt:0000000000001A20                 jmp     cs:fread_ptr
.plt:0000000000001A20 _fread          endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    9
.plt:0000000000001A2B                 jmp     sub_1980
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001A30 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001A30                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001A30                 jmp     cs:fcntl_ptr
.plt:0000000000001A30 _fcntl          endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    0Ah
.plt:0000000000001A3B                 jmp     sub_1980
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; __pid_t getpid(void)
.plt:0000000000001A40 _getpid         proc near               ; CODE XREF: randread_new+197↓p
.plt:0000000000001A40                                         ; randread_new+2C2↓p
.plt:0000000000001A40                 jmp     cs:getpid_ptr
.plt:0000000000001A40 _getpid         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    0Bh
.plt:0000000000001A4B                 jmp     sub_1980
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001A50 _fread_unlocked proc near               ; CODE XREF: randread+61↓p
.plt:0000000000001A50                 jmp     cs:fread_unlocked_ptr
.plt:0000000000001A50 _fread_unlocked endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    0Ch
.plt:0000000000001A5B                 jmp     sub_1980
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; char *textdomain(const char *domainname)
.plt:0000000000001A60 _textdomain     proc near               ; CODE XREF: main+6C↓p
.plt:0000000000001A60                 jmp     cs:textdomain_ptr
.plt:0000000000001A60 _textdomain     endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    0Dh
.plt:0000000000001A6B                 jmp     sub_1980
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; int fclose(FILE *stream)
.plt:0000000000001A70 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001A70                                         ; rpl_fclose+6B↓j
.plt:0000000000001A70                 jmp     cs:fclose_ptr
.plt:0000000000001A70 _fclose         endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    0Eh
.plt:0000000000001A7B                 jmp     sub_1980
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001A80 _bindtextdomain proc near               ; CODE XREF: main+60↓p
.plt:0000000000001A80                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001A80 _bindtextdomain endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    0Fh
.plt:0000000000001A8B                 jmp     sub_1980
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; char *stpcpy(char *dest, const char *src)
.plt:0000000000001A90 _stpcpy         proc near               ; CODE XREF: main+6DF↓p
.plt:0000000000001A90                 jmp     cs:stpcpy_ptr
.plt:0000000000001A90 _stpcpy         endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    10h
.plt:0000000000001A9B                 jmp     sub_1980
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001AA0 _dcgettext      proc near               ; CODE XREF: main+191↓p
.plt:0000000000001AA0                                         ; main+1CF↓p ...
.plt:0000000000001AA0                 jmp     cs:dcgettext_ptr
.plt:0000000000001AA0 _dcgettext      endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    11h
.plt:0000000000001AAB                 jmp     sub_1980
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001AB0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001AB0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001AB0 ___ctype_get_mb_cur_max endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    12h
.plt:0000000000001ABB                 jmp     sub_1980
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; size_t strlen(const char *s)
.plt:0000000000001AC0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001AC0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001AC0                 jmp     cs:strlen_ptr
.plt:0000000000001AC0 _strlen         endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    13h
.plt:0000000000001ACB                 jmp     sub_1980
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: noreturn thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_29F3↓p
.plt:0000000000001AD0                                         ; quotearg_buffer_restyled:loc_4903↓p ...
.plt:0000000000001AD0                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001AD0 ___stack_chk_fail endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    14h
.plt:0000000000001ADB                 jmp     sub_1980
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; __uid_t getuid(void)
.plt:0000000000001AE0 _getuid         proc near               ; CODE XREF: randread_new+1C4↓p
.plt:0000000000001AE0                 jmp     cs:getuid_ptr
.plt:0000000000001AE0 _getuid         endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    15h
.plt:0000000000001AEB                 jmp     sub_1980
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001AF0 _getopt_long    proc near               ; CODE XREF: main+BE↓p
.plt:0000000000001AF0                 jmp     cs:getopt_long_ptr
.plt:0000000000001AF0 _getopt_long    endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    16h
.plt:0000000000001AFB                 jmp     sub_1980
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001B00 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001B00                 jmp     cs:mbrtowc_ptr
.plt:0000000000001B00 _mbrtowc        endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    17h
.plt:0000000000001B0B                 jmp     sub_1980
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; int dup2(int fd, int fd2)
.plt:0000000000001B10 _dup2           proc near               ; CODE XREF: freopen_safer+4F↓p
.plt:0000000000001B10                                         ; freopen_safer+64↓p ...
.plt:0000000000001B10                 jmp     cs:dup2_ptr
.plt:0000000000001B10 _dup2           endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    18h
.plt:0000000000001B1B                 jmp     sub_1980
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; char *strchr(const char *s, int c)
.plt:0000000000001B20 _strchr         proc near               ; CODE XREF: main+162↓p
.plt:0000000000001B20                                         ; xstrtoul+123↓p ...
.plt:0000000000001B20                 jmp     cs:strchr_ptr
.plt:0000000000001B20 _strchr         endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    19h
.plt:0000000000001B2B                 jmp     sub_1980
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; char *strrchr(const char *s, int c)
.plt:0000000000001B30 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001B30                 jmp     cs:strrchr_ptr
.plt:0000000000001B30 _strrchr        endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    1Ah
.plt:0000000000001B3B                 jmp     sub_1980
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001B40 _lseek          proc near               ; CODE XREF: main+8BC↓p
.plt:0000000000001B40                                         ; rpl_fclose+59↓p ...
.plt:0000000000001B40                 jmp     cs:lseek_ptr
.plt:0000000000001B40 _lseek          endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    1Bh
.plt:0000000000001B4B                 jmp     sub_1980
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
.plt:0000000000001B50 _gettimeofday   proc near               ; CODE XREF: randread_new+188↓p
.plt:0000000000001B50                                         ; randread_new+278↓p
.plt:0000000000001B50                 jmp     cs:gettimeofday_ptr
.plt:0000000000001B50 _gettimeofday   endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    1Ch
.plt:0000000000001B5B                 jmp     sub_1980
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: noreturn thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001B60 ___assert_fail  proc near               ; CODE XREF: xstrtoul+39F↓p
.plt:0000000000001B60                                         ; xstrtoumax+39F↓p
.plt:0000000000001B60                 jmp     cs:__assert_fail_ptr
.plt:0000000000001B60 ___assert_fail  endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    1Dh
.plt:0000000000001B6B                 jmp     sub_1980
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001B70 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001B70                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001B70 ___strtoul_internal endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    1Eh
.plt:0000000000001B7B                 jmp     sub_1980
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001B80 _memset         proc near               ; CODE XREF: main+531↓p
.plt:0000000000001B80                                         ; quotearg_n_options+99↓p ...
.plt:0000000000001B80                 jmp     cs:memset_ptr
.plt:0000000000001B80 _memset         endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    1Fh
.plt:0000000000001B8B                 jmp     sub_1980
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
.plt:0000000000001B90 _freopen        proc near               ; CODE XREF: freopen_safer+BB↓p
.plt:0000000000001B90                 jmp     cs:freopen_ptr
.plt:0000000000001B90 _freopen        endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    20h ; ' '
.plt:0000000000001B9B                 jmp     sub_1980
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; int close(int fd)
.plt:0000000000001BA0 _close          proc near               ; CODE XREF: protect_fd+29↓p
.plt:0000000000001BA0                                         ; freopen_safer+133↓p ...
.plt:0000000000001BA0                 jmp     cs:close_ptr
.plt:0000000000001BA0 _close          endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    21h ; '!'
.plt:0000000000001BAB                 jmp     sub_1980
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001BB0 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001BB0                                         ; fadvise+16↓j
.plt:0000000000001BB0                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001BB0 _posix_fadvise  endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    22h ; '"'
.plt:0000000000001BBB                 jmp     sub_1980
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001BC0 _memchr         proc near               ; CODE XREF: main+946↓p
.plt:0000000000001BC0                                         ; main+9E1↓p
.plt:0000000000001BC0                 jmp     cs:memchr_ptr
.plt:0000000000001BC0 _memchr         endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    23h ; '#'
.plt:0000000000001BCB                 jmp     sub_1980
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001BD0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001BD0                 jmp     cs:memcmp_ptr
.plt:0000000000001BD0 _memcmp         endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    24h ; '$'
.plt:0000000000001BDB                 jmp     sub_1980
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001BE0 _fputs_unlocked proc near               ; CODE XREF: usage+A3↓p
.plt:0000000000001BE0                                         ; usage+C8↓p ...
.plt:0000000000001BE0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001BE0 _fputs_unlocked endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    25h ; '%'
.plt:0000000000001BEB                 jmp     sub_1980
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001BF0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001BF0                                         ; hash_initialize+B1↓p ...
.plt:0000000000001BF0                 jmp     cs:calloc_ptr
.plt:0000000000001BF0 _calloc         endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    26h ; '&'
.plt:0000000000001BFB                 jmp     sub_1980
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001C00 _strcmp         proc near               ; CODE XREF: main+10F↓p
.plt:0000000000001C00                                         ; main+288↓p ...
.plt:0000000000001C00                 jmp     cs:strcmp_ptr
.plt:0000000000001C00 _strcmp         endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    27h ; '''
.plt:0000000000001C0B                 jmp     sub_1980
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001C10 _memcpy         proc near               ; CODE XREF: randread+BE↓p
.plt:0000000000001C10                                         ; randread+164↓p ...
.plt:0000000000001C10                 jmp     cs:memcpy_ptr
.plt:0000000000001C10 _memcpy         endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    28h ; '('
.plt:0000000000001C1B                 jmp     sub_1980
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; int fileno(FILE *stream)
.plt:0000000000001C20 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001C20                                         ; freopen_safer+1C↓p ...
.plt:0000000000001C20                 jmp     cs:fileno_ptr
.plt:0000000000001C20 _fileno         endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    29h ; ')'
.plt:0000000000001C2B                 jmp     sub_1980
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; __gid_t getgid(void)
.plt:0000000000001C30 _getgid         proc near               ; CODE XREF: randread_new+1FC↓p
.plt:0000000000001C30                 jmp     cs:getgid_ptr
.plt:0000000000001C30 _getgid         endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    2Ah ; '*'
.plt:0000000000001C3B                 jmp     sub_1980
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; void *malloc(size_t size)
.plt:0000000000001C40 _malloc         proc near               ; CODE XREF: fread_file+62↓p
.plt:0000000000001C40                                         ; xmalloc+4↓p ...
.plt:0000000000001C40                 jmp     cs:malloc_ptr
.plt:0000000000001C40 _malloc         endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    2Bh ; '+'
.plt:0000000000001C4B                 jmp     sub_1980
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int fflush(FILE *stream)
.plt:0000000000001C50 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001C50                                         ; rpl_fflush+3B↓j
.plt:0000000000001C50                 jmp     cs:fflush_ptr
.plt:0000000000001C50 _fflush         endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    2Ch ; ','
.plt:0000000000001C5B                 jmp     sub_1980
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; char *nl_langinfo(nl_item item)
.plt:0000000000001C60 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001C60                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001C60 _nl_langinfo    endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    2Dh ; '-'
.plt:0000000000001C6B                 jmp     sub_1980
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001C70 ___fxstat       proc near               ; CODE XREF: main+887↓p
.plt:0000000000001C70                                         ; fread_file+3D↓p
.plt:0000000000001C70                 jmp     cs:__fxstat_ptr
.plt:0000000000001C70 ___fxstat       endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    2Eh ; '.'
.plt:0000000000001C7B                 jmp     sub_1980
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; int __freading(FILE *fp)
.plt:0000000000001C80 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001C80                                         ; rpl_fflush+9↓p
.plt:0000000000001C80                 jmp     cs:__freading_ptr
.plt:0000000000001C80 ___freading     endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    2Fh ; '/'
.plt:0000000000001C8B                 jmp     sub_1980
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001C90 _fwrite_unlocked proc near              ; CODE XREF: main+822↓p
.plt:0000000000001C90                                         ; main+B7B↓p ...
.plt:0000000000001C90                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001C90 _fwrite_unlocked endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    30h ; '0'
.plt:0000000000001C9B                 jmp     sub_1980
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001CA0 _realloc        proc near               ; CODE XREF: fread_file+A9↓p
.plt:0000000000001CA0                                         ; fread_file+187↓p ...
.plt:0000000000001CA0                 jmp     cs:realloc_ptr
.plt:0000000000001CA0 _realloc        endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    31h ; '1'
.plt:0000000000001CAB                 jmp     sub_1980
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000001CB0 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000001CB0                 jmp     cs:fdopen_ptr
.plt:0000000000001CB0 _fdopen         endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    32h ; '2'
.plt:0000000000001CBB                 jmp     sub_1980
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; char *setlocale(int category, const char *locale)
.plt:0000000000001CC0 _setlocale      proc near               ; CODE XREF: main+4D↓p
.plt:0000000000001CC0                                         ; usage+283↓p ...
.plt:0000000000001CC0                 jmp     cs:setlocale_ptr
.plt:0000000000001CC0 _setlocale      endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    33h ; '3'
.plt:0000000000001CCB                 jmp     sub_1980
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ___printf_chk   proc near               ; CODE XREF: main+640↓p
.plt:0000000000001CD0                                         ; main+7D7↓p ...
.plt:0000000000001CD0                 jmp     cs:__printf_chk_ptr
.plt:0000000000001CD0 ___printf_chk   endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    34h ; '4'
.plt:0000000000001CDB                 jmp     sub_1980
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000001CE0 _setvbuf        proc near               ; CODE XREF: randread_new+82↓p
.plt:0000000000001CE0                 jmp     cs:setvbuf_ptr
.plt:0000000000001CE0 _setvbuf        endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    35h ; '5'
.plt:0000000000001CEB                 jmp     sub_1980
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001CF0 _error          proc near               ; CODE XREF: main+341↓p
.plt:0000000000001CF0                                         ; main+3B4↓p ...
.plt:0000000000001CF0                 jmp     cs:error_ptr
.plt:0000000000001CF0 _error          endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    36h ; '6'
.plt:0000000000001CFB                 jmp     sub_1980
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ___explicit_bzero_chk proc near         ; CODE XREF: randint_free+10↓p
.plt:0000000000001D00                                         ; randint_all_free+32↓p ...
.plt:0000000000001D00                 jmp     cs:__explicit_bzero_chk_ptr
.plt:0000000000001D00 ___explicit_bzero_chk endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    37h ; '7'
.plt:0000000000001D0B                 jmp     sub_1980
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; int open(const char *file, int oflag, ...)
.plt:0000000000001D10 _open           proc near               ; CODE XREF: protect_fd+18↓p
.plt:0000000000001D10                                         ; randread_new+EA↓p
.plt:0000000000001D10                 jmp     cs:open_ptr
.plt:0000000000001D10 _open           endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    38h ; '8'
.plt:0000000000001D1B                 jmp     sub_1980
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001D20 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_784A↓j
.plt:0000000000001D20                 jmp     cs:fseeko_ptr
.plt:0000000000001D20 _fseeko         endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    39h ; '9'
.plt:0000000000001D2B                 jmp     sub_1980
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001D30 _fopen          proc near               ; CODE XREF: internal_read_file+10↓p
.plt:0000000000001D30                                         ; fopen_safer+7↓p
.plt:0000000000001D30                 jmp     cs:fopen_ptr
.plt:0000000000001D30 _fopen          endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    3Ah ; ':'
.plt:0000000000001D3B                 jmp     sub_1980
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000001D40 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:0000000000001D40                 jmp     cs:strtoul_ptr
.plt:0000000000001D40 _strtoul        endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    3Bh ; ';'
.plt:0000000000001D4B                 jmp     sub_1980
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001D50 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001D50                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001D50 ___cxa_atexit   endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    3Ch ; '<'
.plt:0000000000001D5B                 jmp     sub_1980
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; __pid_t getppid(void)
.plt:0000000000001D60 _getppid        proc near               ; CODE XREF: randread_new+1A3↓p
.plt:0000000000001D60                                         ; randread_new+2F7↓p
.plt:0000000000001D60                 jmp     cs:getppid_ptr
.plt:0000000000001D60 _getppid        endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    3Dh ; '='
.plt:0000000000001D6B                 jmp     sub_1980
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: noreturn thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; void __noreturn exit(int status)
.plt:0000000000001D70 _exit           proc near               ; CODE XREF: main+302↓p
.plt:0000000000001D70                                         ; usage+58↓p
.plt:0000000000001D70                 jmp     cs:exit_ptr
.plt:0000000000001D70 _exit           endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    3Eh ; '>'
.plt:0000000000001D7B                 jmp     sub_1980
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001D80 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001D80                 jmp     cs:fwrite_ptr
.plt:0000000000001D80 _fwrite         endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    3Fh ; '?'
.plt:0000000000001D8B                 jmp     sub_1980
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001D90                                         ; version_etc_arn+37↓p ...
.plt:0000000000001D90                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001D90 ___fprintf_chk  endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    40h ; '@'
.plt:0000000000001D9B                 jmp     sub_1980
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001DA0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001DA0                 jmp     cs:mbsinit_ptr
.plt:0000000000001DA0 _mbsinit        endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    41h ; 'A'
.plt:0000000000001DAB                 jmp     sub_1980
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; int iswprint(wint_t wc)
.plt:0000000000001DB0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001DB0                 jmp     cs:iswprint_ptr
.plt:0000000000001DB0 _iswprint       endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    42h ; 'B'
.plt:0000000000001DBB                 jmp     sub_1980
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001DC0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001DC0                                         ; xstrtoul+55↓p ...
.plt:0000000000001DC0                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001DC0 ___ctype_b_loc  endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    43h ; 'C'
.plt:0000000000001DCB                 jmp     sub_1980
.plt:0000000000001DCB ; } // starts at 1980
.plt:0000000000001DCB _plt            ends
.plt:0000000000001DCB
.plt.got:0000000000001DD0 ; ===========================================================================
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; Segment type: Pure code
.plt.got:0000000000001DD0 ; Segment permissions: Read/Execute
.plt.got:0000000000001DD0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001DD0                 assume cs:_plt_got
.plt.got:0000000000001DD0                 ;org 1DD0h
.plt.got:0000000000001DD0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; Attributes: thunk
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; void free(void *ptr)
.plt.got:0000000000001DD0 free            proc near               ; CODE XREF: freebuffer+4↓j
.plt.got:0000000000001DD0                                         ; quotearg_n_options+115↓p ...
.plt.got:0000000000001DD0 ; __unwind {
.plt.got:0000000000001DD0                 jmp     cs:free_ptr
.plt.got:0000000000001DD0 free            endp
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001DD6                 align 8
.plt.got:0000000000001DD8
.plt.got:0000000000001DD8 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001DD8
.plt.got:0000000000001DD8 ; Attributes: thunk
.plt.got:0000000000001DD8
.plt.got:0000000000001DD8 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001DD8 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001DD8                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001DD8 __cxa_finalize  endp
.plt.got:0000000000001DD8
.plt.got:0000000000001DD8 ; ---------------------------------------------------------------------------
.plt.got:0000000000001DDE                 align 20h
.plt.got:0000000000001DDE ; } // starts at 1DD0
.plt.got:0000000000001DDE _plt_got        ends
.plt.got:0000000000001DDE
.text:0000000000001DE0 ; ===========================================================================
.text:0000000000001DE0
.text:0000000000001DE0 ; Segment type: Pure code
.text:0000000000001DE0 ; Segment permissions: Read/Execute
.text:0000000000001DE0 _text           segment para public 'CODE' use64
.text:0000000000001DE0                 assume cs:_text
.text:0000000000001DE0                 ;org 1DE0h
.text:0000000000001DE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001DE0
.text:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DE0
.text:0000000000001DE0
.text:0000000000001DE0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001DE0                 public main
.text:0000000000001DE0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001DE0
.text:0000000000001DE0 var_140         = qword ptr -140h
.text:0000000000001DE0 var_138         = qword ptr -138h
.text:0000000000001DE0 var_12A         = byte ptr -12Ah
.text:0000000000001DE0 var_129         = byte ptr -129h
.text:0000000000001DE0 c               = dword ptr -128h
.text:0000000000001DE0 var_120         = qword ptr -120h
.text:0000000000001DE0 var_118         = qword ptr -118h
.text:0000000000001DE0 var_110         = qword ptr -110h
.text:0000000000001DE0 var_108         = qword ptr -108h
.text:0000000000001DE0 var_100         = qword ptr -100h
.text:0000000000001DE0 var_F8          = qword ptr -0F8h
.text:0000000000001DE0 stat_buf        = stat ptr -0D8h
.text:0000000000001DE0 var_40          = qword ptr -40h
.text:0000000000001DE0
.text:0000000000001DE0 ; __unwind {
.text:0000000000001DE0                 push    r15
.text:0000000000001DE2                 push    r14
.text:0000000000001DE4                 xor     r15d, r15d
.text:0000000000001DE7                 push    r13
.text:0000000000001DE9                 push    r12
.text:0000000000001DEB                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000001DF2                 push    rbp
.text:0000000000001DF3                 push    rbx
.text:0000000000001DF4                 mov     ebp, edi
.text:0000000000001DF6                 mov     rbx, rsi
.text:0000000000001DF9                 xor     r13d, r13d
.text:0000000000001DFC                 mov     r14, r12
.text:0000000000001DFF                 sub     rsp, 118h
.text:0000000000001E06                 mov     rdi, [rsi]
.text:0000000000001E09                 mov     rax, fs:28h
.text:0000000000001E12                 mov     [rsp+148h+var_40], rax
.text:0000000000001E1A                 xor     eax, eax
.text:0000000000001E1C                 call    set_program_name
.text:0000000000001E21                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001E28                 mov     edi, 6          ; category
.text:0000000000001E2D                 call    _setlocale
.text:0000000000001E32                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001E39                 lea     rdi, domainname ; "coreutils"
.text:0000000000001E40                 call    _bindtextdomain
.text:0000000000001E45                 lea     rdi, domainname ; "coreutils"
.text:0000000000001E4C                 call    _textdomain
.text:0000000000001E51                 lea     rdi, close_stdout
.text:0000000000001E58                 call    atexit
.text:0000000000001E5D                 lea     rax, [rsp+148h+var_F8]
.text:0000000000001E62                 mov     [rsp+148h+var_12A], 0
.text:0000000000001E67                 mov     [rsp+148h+var_129], 0Ah
.text:0000000000001E6C                 mov     [rsp+148h+var_120], 0
.text:0000000000001E75                 mov     byte ptr [rsp+148h+var_140], 0
.text:0000000000001E7A                 mov     byte ptr [rsp+148h+var_138], 0
.text:0000000000001E7F                 mov     qword ptr [rsp+148h+c], rax
.text:0000000000001E84                 nop     dword ptr [rax+00h]
.text:0000000000001E88
.text:0000000000001E88 loc_1E88:                               ; CODE XREF: main+124↓j
.text:0000000000001E88                                         ; main+217↓j ...
.text:0000000000001E88                 lea     rcx, long_opts  ; longopts
.text:0000000000001E8F                 lea     rdx, shortopts  ; "ei:n:o:rz"
.text:0000000000001E96                 xor     r8d, r8d        ; longind
.text:0000000000001E99                 mov     rsi, rbx        ; argv
.text:0000000000001E9C                 mov     edi, ebp        ; argc
.text:0000000000001E9E                 call    _getopt_long
.text:0000000000001EA3                 cmp     eax, 0FFFFFFFFh
.text:0000000000001EA6                 jz      loc_2199
.text:0000000000001EAC                 cmp     eax, 6Eh ; 'n'
.text:0000000000001EAF                 jz      loc_2010
.text:0000000000001EB5                 jle     short loc_1F10
.text:0000000000001EB7                 cmp     eax, 72h ; 'r'
.text:0000000000001EBA                 jz      loc_2088
.text:0000000000001EC0                 jle     loc_2048
.text:0000000000001EC6                 cmp     eax, 7Ah ; 'z'
.text:0000000000001EC9                 jz      loc_2000
.text:0000000000001ECF                 add     eax, 0FFFFFF80h
.text:0000000000001ED2                 jnz     loc_29E2
.text:0000000000001ED8                 test    r13, r13
.text:0000000000001EDB                 mov     rdx, cs:optarg@@GLIBC_2_2_5
.text:0000000000001EE2                 jz      short loc_1F01
.text:0000000000001EE4                 mov     rsi, rdx        ; s2
.text:0000000000001EE7                 mov     rdi, r13        ; s1
.text:0000000000001EEA                 mov     [rsp+148h+var_118], rdx
.text:0000000000001EEF                 call    _strcmp
.text:0000000000001EF4                 test    eax, eax
.text:0000000000001EF6                 mov     rdx, [rsp+148h+var_118]
.text:0000000000001EFB                 jnz     loc_2BEF
.text:0000000000001F01
.text:0000000000001F01 loc_1F01:                               ; CODE XREF: main+102↑j
.text:0000000000001F01                 mov     r13, rdx
.text:0000000000001F04                 jmp     short loc_1E88
.text:0000000000001F04 ; ---------------------------------------------------------------------------
.text:0000000000001F06                 align 10h
.text:0000000000001F10
.text:0000000000001F10 loc_1F10:                               ; CODE XREF: main+D5↑j
.text:0000000000001F10                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001F15                 jz      loc_29EC
.text:0000000000001F1B                 jle     loc_20A8
.text:0000000000001F21                 cmp     eax, 65h ; 'e'
.text:0000000000001F24                 jz      loc_2098
.text:0000000000001F2A                 cmp     eax, 69h ; 'i'
.text:0000000000001F2D                 jnz     loc_29E2
.text:0000000000001F33                 mov     r14, cs:optarg@@GLIBC_2_2_5
.text:0000000000001F3A                 mov     esi, 2Dh ; '-'  ; c
.text:0000000000001F3F                 mov     rdi, r14        ; s
.text:0000000000001F42                 call    _strchr
.text:0000000000001F47                 cmp     byte ptr [rsp+148h+var_140], 0
.text:0000000000001F4C                 jnz     loc_2C13
.text:0000000000001F52                 test    rax, rax
.text:0000000000001F55                 jz      loc_2126
.text:0000000000001F5B                 lea     rsi, msgid      ; "invalid input range"
.text:0000000000001F62                 xor     edi, edi        ; domainname
.text:0000000000001F64                 mov     edx, 5          ; category
.text:0000000000001F69                 mov     byte ptr [rax], 0
.text:0000000000001F6C                 mov     [rsp+148h+var_140], rax
.text:0000000000001F71                 call    _dcgettext
.text:0000000000001F76                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001F7D                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001F84                 xor     r9d, r9d
.text:0000000000001F87                 mov     r8, rax
.text:0000000000001F8A                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000001F8E                 xor     esi, esi
.text:0000000000001F90                 call    xdectoumax
.text:0000000000001F95                 mov     r10, [rsp+148h+var_140]
.text:0000000000001F9A                 lea     rsi, msgid      ; "invalid input range"
.text:0000000000001FA1                 xor     edi, edi        ; domainname
.text:0000000000001FA3                 mov     edx, 5          ; category
.text:0000000000001FA8                 mov     r14, rax
.text:0000000000001FAB                 mov     byte ptr [r10], 2Dh ; '-'
.text:0000000000001FAF                 call    _dcgettext
.text:0000000000001FB4                 mov     r10, [rsp+148h+var_140]
.text:0000000000001FB9                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001FC0                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000001FC4                 xor     r9d, r9d
.text:0000000000001FC7                 xor     esi, esi
.text:0000000000001FC9                 mov     r8, rax
.text:0000000000001FCC                 lea     rdi, [r10+1]
.text:0000000000001FD0                 call    xdectoumax
.text:0000000000001FD5                 cmp     r14, rax
.text:0000000000001FD8                 mov     [rsp+148h+var_120], rax
.text:0000000000001FDD                 setnbe  dl
.text:0000000000001FE0                 sub     rax, r14
.text:0000000000001FE3                 add     rax, 1
.text:0000000000001FE7                 setz    al
.text:0000000000001FEA                 cmp     dl, al
.text:0000000000001FEC                 jnz     loc_2154
.text:0000000000001FF2                 mov     byte ptr [rsp+148h+var_140], 1
.text:0000000000001FF7                 jmp     loc_1E88
.text:0000000000001FF7 ; ---------------------------------------------------------------------------
.text:0000000000001FFC                 align 20h
.text:0000000000002000
.text:0000000000002000 loc_2000:                               ; CODE XREF: main+E9↑j
.text:0000000000002000                 mov     [rsp+148h+var_129], 0
.text:0000000000002005                 jmp     loc_1E88
.text:0000000000002005 ; ---------------------------------------------------------------------------
.text:000000000000200A                 align 10h
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: main+CF↑j
.text:0000000000002010                 mov     rcx, qword ptr [rsp+148h+c]
.text:0000000000002015                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:000000000000201C                 xor     r8d, r8d
.text:000000000000201F                 xor     esi, esi
.text:0000000000002021                 mov     edx, 0Ah
.text:0000000000002026                 call    xstrtoul
.text:000000000000202B                 test    eax, eax
.text:000000000000202D                 jnz     loc_20E7
.text:0000000000002033                 mov     rax, [rsp+148h+var_F8]
.text:0000000000002038                 cmp     r12, rax
.text:000000000000203B                 cmova   r12, rax
.text:000000000000203F                 jmp     loc_1E88
.text:000000000000203F ; ---------------------------------------------------------------------------
.text:0000000000002044                 align 8
.text:0000000000002048
.text:0000000000002048 loc_2048:                               ; CODE XREF: main+E0↑j
.text:0000000000002048                 cmp     eax, 6Fh ; 'o'
.text:000000000000204B                 jnz     loc_29E2
.text:0000000000002051                 test    r15, r15
.text:0000000000002054                 mov     rdx, cs:optarg@@GLIBC_2_2_5
.text:000000000000205B                 jz      short loc_207A
.text:000000000000205D                 mov     rsi, rdx        ; s2
.text:0000000000002060                 mov     rdi, r15        ; s1
.text:0000000000002063                 mov     [rsp+148h+var_118], rdx
.text:0000000000002068                 call    _strcmp
.text:000000000000206D                 test    eax, eax
.text:000000000000206F                 mov     rdx, [rsp+148h+var_118]
.text:0000000000002074                 jnz     loc_2A7A
.text:000000000000207A
.text:000000000000207A loc_207A:                               ; CODE XREF: main+27B↑j
.text:000000000000207A                 mov     r15, rdx
.text:000000000000207D                 jmp     loc_1E88
.text:000000000000207D ; ---------------------------------------------------------------------------
.text:0000000000002082                 align 8
.text:0000000000002088
.text:0000000000002088 loc_2088:                               ; CODE XREF: main+DA↑j
.text:0000000000002088                 mov     [rsp+148h+var_12A], 1
.text:000000000000208D                 jmp     loc_1E88
.text:000000000000208D ; ---------------------------------------------------------------------------
.text:0000000000002092                 align 8
.text:0000000000002098
.text:0000000000002098 loc_2098:                               ; CODE XREF: main+144↑j
.text:0000000000002098                 mov     byte ptr [rsp+148h+var_138], 1
.text:000000000000209D                 jmp     loc_1E88
.text:000000000000209D ; ---------------------------------------------------------------------------
.text:00000000000020A2                 align 8
.text:00000000000020A8
.text:00000000000020A8 loc_20A8:                               ; CODE XREF: main+13B↑j
.text:00000000000020A8                 cmp     eax, 0FFFFFF7Dh
.text:00000000000020AD                 jnz     loc_29E2
.text:00000000000020B3                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000020BA                 mov     rcx, cs:Version
.text:00000000000020C1                 lea     r8, aPaulEggert ; "Paul Eggert"
.text:00000000000020C8                 lea     rdx, unk_917F
.text:00000000000020CF                 lea     rsi, aShuf      ; "shuf"
.text:00000000000020D6                 xor     r9d, r9d
.text:00000000000020D9                 xor     eax, eax
.text:00000000000020DB                 call    version_etc
.text:00000000000020E0                 xor     edi, edi        ; status
.text:00000000000020E2                 call    _exit
.text:00000000000020E7 ; ---------------------------------------------------------------------------
.text:00000000000020E7
.text:00000000000020E7 loc_20E7:                               ; CODE XREF: main+24D↑j
.text:00000000000020E7                 sub     eax, 1
.text:00000000000020EA                 jz      loc_1E88
.text:00000000000020F0                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000020F7                 call    quote
.text:00000000000020FC                 lea     rsi, aInvalidLineCou ; "invalid line count: %s"
.text:0000000000002103                 mov     rbx, rax
.text:0000000000002106                 mov     edx, 5          ; category
.text:000000000000210B                 xor     edi, edi        ; domainname
.text:000000000000210D                 call    _dcgettext
.text:0000000000002112                 mov     rcx, rbx
.text:0000000000002115                 mov     rdx, rax        ; format
.text:0000000000002118                 xor     esi, esi        ; errnum
.text:000000000000211A                 mov     edi, 1          ; status
.text:000000000000211F                 xor     eax, eax
.text:0000000000002121                 call    _error
.text:0000000000002126
.text:0000000000002126 loc_2126:                               ; CODE XREF: main+175↑j
.text:0000000000002126                 lea     rsi, msgid      ; "invalid input range"
.text:000000000000212D                 mov     edx, 5          ; category
.text:0000000000002132                 xor     edi, edi        ; domainname
.text:0000000000002134                 call    _dcgettext
.text:0000000000002139                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002140                 mov     r8, rax
.text:0000000000002143                 xor     r9d, r9d
.text:0000000000002146                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000214A                 xor     esi, esi
.text:000000000000214C                 mov     rdi, r14
.text:000000000000214F                 call    xdectoumax
.text:0000000000002154
.text:0000000000002154 loc_2154:                               ; CODE XREF: main+20C↑j
.text:0000000000002154                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000215B                 call    quote
.text:0000000000002160                 lea     rsi, msgid      ; "invalid input range"
.text:0000000000002167                 mov     edx, 5          ; category
.text:000000000000216C                 xor     edi, edi        ; domainname
.text:000000000000216E                 mov     rbp, rax
.text:0000000000002171                 call    _dcgettext
.text:0000000000002176                 mov     rbx, rax
.text:0000000000002179                 call    ___errno_location
.text:000000000000217E                 mov     esi, [rax]      ; errnum
.text:0000000000002180                 lea     rdx, format     ; "%s: %s"
.text:0000000000002187                 mov     r8, rbp
.text:000000000000218A                 mov     rcx, rbx
.text:000000000000218D                 mov     edi, 1          ; status
.text:0000000000002192                 xor     eax, eax
.text:0000000000002194                 call    _error
.text:0000000000002199
.text:0000000000002199 loc_2199:                               ; CODE XREF: main+C6↑j
.text:0000000000002199                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000021A0                 sub     ebp, eax
.text:00000000000021A2                 cmp     byte ptr [rsp+148h+var_138], 0
.text:00000000000021A7                 lea     rbx, [rbx+rax*8]
.text:00000000000021AB                 jz      loc_2320
.text:00000000000021B1                 cmp     byte ptr [rsp+148h+var_140], 0
.text:00000000000021B6                 jnz     loc_29C1
.text:00000000000021BC
.text:00000000000021BC loc_21BC:                               ; CODE XREF: main+545↓j
.text:00000000000021BC                 cmp     byte ptr [rsp+148h+var_138], 0
.text:00000000000021C1                 jnz     loc_2461
.text:00000000000021C7                 cmp     ebp, 1
.text:00000000000021CA                 mov     eax, 8
.text:00000000000021CF                 jg      loc_2A11
.text:00000000000021D5                 cmp     byte ptr [rsp+148h+var_138], 0
.text:00000000000021DA                 jnz     loc_2461
.text:00000000000021E0                 sub     ebp, 1
.text:00000000000021E3                 mov     rdx, cs:stdin@@GLIBC_2_2_5
.text:00000000000021EA                 jnz     loc_2638
.text:00000000000021F0                 mov     rbp, [rbx]
.text:00000000000021F3                 lea     rsi, aLt+2      ; s2
.text:00000000000021FA                 mov     qword ptr [rsp+148h+c], rdx
.text:00000000000021FF                 mov     rdi, rbp        ; s1
.text:0000000000002202                 call    _strcmp
.text:0000000000002207                 test    eax, eax
.text:0000000000002209                 mov     rdx, qword ptr [rsp+148h+c]
.text:000000000000220E                 jz      loc_2638
.text:0000000000002214                 test    r12, r12
.text:0000000000002217                 jnz     loc_297E
.text:000000000000221D                 mov     esi, 2
.text:0000000000002222                 mov     rdi, rdx
.text:0000000000002225                 call    fadvise
.text:000000000000222A                 cmp     [rsp+148h+var_12A], 0
.text:000000000000222F                 jnz     loc_26BA
.text:0000000000002235
.text:0000000000002235 loc_2235:                               ; CODE XREF: main+875↓j
.text:0000000000002235                                         ; main+88E↓j ...
.text:0000000000002235                 or      rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000002239                 mov     rdi, r13
.text:000000000000223C                 call    randint_all_new
.text:0000000000002241                 test    rax, rax
.text:0000000000002244                 mov     qword ptr [rsp+148h+c], rax
.text:0000000000002249                 jz      loc_2367
.text:000000000000224F                 movsx   eax, [rsp+148h+var_129]
.text:0000000000002254                 cmp     r12, 400h
.text:000000000000225B                 mov     ebx, 400h
.text:0000000000002260                 cmovbe  rbx, r12
.text:0000000000002264                 mov     esi, 18h
.text:0000000000002269                 xor     ebp, ebp
.text:000000000000226B                 mov     rdi, rbx
.text:000000000000226E                 mov     dword ptr [rsp+148h+var_118], eax
.text:0000000000002272                 mov     rax, cs:stdin@@GLIBC_2_2_5
.text:0000000000002279                 mov     [rsp+148h+var_138], rax
.text:000000000000227E                 call    xcalloc
.text:0000000000002283                 mov     [rsp+148h+var_108], r14
.text:0000000000002288                 xor     r8d, r8d
.text:000000000000228B                 mov     r14, rbx
.text:000000000000228E                 mov     rbx, rax
.text:0000000000002291
.text:0000000000002291 loc_2291:                               ; CODE XREF: main+4E3↓j
.text:0000000000002291                                         ; main+53B↓j
.text:0000000000002291                 cmp     r12, rbp
.text:0000000000002294                 jz      loc_27E6
.text:000000000000229A                 imul    r13, rbp, 18h
.text:000000000000229E                 mov     edx, dword ptr [rsp+148h+var_118]
.text:00000000000022A2                 mov     rsi, [rsp+148h+var_138]
.text:00000000000022A7                 lea     rdi, [rbx+r13]
.text:00000000000022AB                 call    readlinebuffer_delim
.text:00000000000022B0                 test    rax, rax
.text:00000000000022B3                 mov     r8, rax
.text:00000000000022B6                 jz      loc_2904
.text:00000000000022BC                 add     rbp, 1
.text:00000000000022C0                 cmp     rbp, r14
.text:00000000000022C3                 jb      short loc_2291
.text:00000000000022C5                 mov     edx, 18h
.text:00000000000022CA                 add     r14, 400h
.text:00000000000022D1                 xor     esi, esi
.text:00000000000022D3                 mov     rax, rdx
.text:00000000000022D6                 mul     r14
.text:00000000000022D9                 jo      loc_2A05
.text:00000000000022DF
.text:00000000000022DF loc_22DF:                               ; CODE XREF: main+C2A↓j
.text:00000000000022DF                 test    rax, rax
.text:00000000000022E2                 mov     [rsp+148h+var_110], r8
.text:00000000000022E7                 js      loc_2A00
.text:00000000000022ED                 test    rsi, rsi
.text:00000000000022F0                 jnz     loc_2A00
.text:00000000000022F6                 imul    rsi, r14, 18h
.text:00000000000022FA                 mov     rdi, rbx
.text:00000000000022FD                 call    xrealloc
.text:0000000000002302                 lea     rdi, [rax+r13+18h] ; s
.text:0000000000002307                 mov     edx, 6000h      ; n
.text:000000000000230C                 xor     esi, esi        ; c
.text:000000000000230E                 mov     rbx, rax
.text:0000000000002311                 call    _memset
.text:0000000000002316                 mov     r8, [rsp+148h+var_110]
.text:000000000000231B                 jmp     loc_2291
.text:0000000000002320 ; ---------------------------------------------------------------------------
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: main+3CB↑j
.text:0000000000002320                 cmp     byte ptr [rsp+148h+var_140], 0
.text:0000000000002325                 jz      loc_21BC
.text:000000000000232B                 test    ebp, ebp
.text:000000000000232D                 jg      loc_2A0F
.text:0000000000002333                 mov     rax, [rsp+148h+var_120]
.text:0000000000002338                 xor     ebx, ebx
.text:000000000000233A                 add     rax, 1
.text:000000000000233E                 sub     rax, r14
.text:0000000000002341                 mov     [rsp+148h+var_118], rax
.text:0000000000002346
.text:0000000000002346 loc_2346:                               ; CODE XREF: main+715↓j
.text:0000000000002346                                         ; main+A01↓j
.text:0000000000002346                 cmp     [rsp+148h+var_12A], 0
.text:000000000000234B                 jz      short loc_2396
.text:000000000000234D                 or      rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000002351                 mov     rdi, r13
.text:0000000000002354                 call    randint_all_new
.text:0000000000002359                 test    rax, rax
.text:000000000000235C                 mov     qword ptr [rsp+148h+c], rax
.text:0000000000002361                 jnz     loc_24FA
.text:0000000000002367
.text:0000000000002367 loc_2367:                               ; CODE XREF: main+469↑j
.text:0000000000002367                                         ; main+5E0↓j
.text:0000000000002367                 mov     rdx, r13
.text:000000000000236A                 mov     esi, 3
.text:000000000000236F                 xor     edi, edi
.text:0000000000002371                 call    quotearg_n_style_colon
.text:0000000000002376                 mov     rbx, rax
.text:0000000000002379                 call    ___errno_location
.text:000000000000237E                 mov     esi, [rax]      ; errnum
.text:0000000000002380                 lea     rdx, format+4   ; format
.text:0000000000002387                 mov     rcx, rbx
.text:000000000000238A                 mov     edi, 1          ; status
.text:000000000000238F                 xor     eax, eax
.text:0000000000002391                 call    _error
.text:0000000000002396
.text:0000000000002396 loc_2396:                               ; CODE XREF: main+56B↑j
.text:0000000000002396                 mov     rax, [rsp+148h+var_118]
.text:000000000000239B                 cmp     r12, rax
.text:000000000000239E                 mov     rsi, rax
.text:00000000000023A1                 cmova   r12, rax
.text:00000000000023A5                 mov     rdi, r12
.text:00000000000023A8                 call    randperm_bound
.text:00000000000023AD                 mov     rdi, r13
.text:00000000000023B0                 mov     rsi, rax
.text:00000000000023B3                 call    randint_all_new
.text:00000000000023B8                 test    rax, rax
.text:00000000000023BB                 mov     qword ptr [rsp+148h+c], rax
.text:00000000000023C0                 jz      short loc_2367
.text:00000000000023C2                 movzx   ecx, byte ptr [rsp+148h+var_138]
.text:00000000000023C7                 or      cl, byte ptr [rsp+148h+var_140]
.text:00000000000023CB                 jz      loc_2505
.text:00000000000023D1                 mov     rdx, [rsp+148h+var_118]
.text:00000000000023D6                 mov     rdi, qword ptr [rsp+148h+c]
.text:00000000000023DB                 mov     rsi, r12
.text:00000000000023DE                 call    randperm_new
.text:00000000000023E3                 test    r15, r15
.text:00000000000023E6                 mov     r13, rax
.text:00000000000023E9                 jnz     loc_28A2
.text:00000000000023EF
.text:00000000000023EF loc_23EF:                               ; CODE XREF: main+CEA↓j
.text:00000000000023EF                 cmp     byte ptr [rsp+148h+var_140], 0
.text:00000000000023F4                 jz      loc_25CE
.text:00000000000023FA                 movsx   r15d, [rsp+148h+var_129]
.text:0000000000002400                 xor     ebx, ebx
.text:0000000000002402                 lea     rbp, aLuC       ; "%lu%c"
.text:0000000000002409                 jmp     short loc_2431
.text:000000000000240B ; ---------------------------------------------------------------------------
.text:000000000000240B
.text:000000000000240B loc_240B:                               ; CODE XREF: main+654↓j
.text:000000000000240B                 mov     rdx, [r13+rbx*8+0]
.text:0000000000002410                 xor     eax, eax
.text:0000000000002412                 mov     ecx, r15d
.text:0000000000002415                 mov     rsi, rbp
.text:0000000000002418                 mov     edi, 1
.text:000000000000241D                 add     rdx, r14
.text:0000000000002420                 call    ___printf_chk
.text:0000000000002425                 test    eax, eax
.text:0000000000002427                 js      loc_260C
.text:000000000000242D                 add     rbx, 1
.text:0000000000002431
.text:0000000000002431 loc_2431:                               ; CODE XREF: main+629↑j
.text:0000000000002431                 cmp     rbx, r12
.text:0000000000002434                 jnz     short loc_240B
.text:0000000000002436
.text:0000000000002436 loc_2436:                               ; CODE XREF: main+77D↓j
.text:0000000000002436                                         ; main+7E9↓j ...
.text:0000000000002436                 xor     eax, eax
.text:0000000000002438                 mov     rcx, [rsp+148h+var_40]
.text:0000000000002440                 xor     rcx, fs:28h
.text:0000000000002449                 jnz     loc_29F3
.text:000000000000244F                 add     rsp, 118h
.text:0000000000002456                 pop     rbx
.text:0000000000002457                 pop     rbp
.text:0000000000002458                 pop     r12
.text:000000000000245A                 pop     r13
.text:000000000000245C                 pop     r14
.text:000000000000245E                 pop     r15
.text:0000000000002460                 retn
.text:0000000000002461 ; ---------------------------------------------------------------------------
.text:0000000000002461
.text:0000000000002461 loc_2461:                               ; CODE XREF: main+3E1↑j
.text:0000000000002461                                         ; main+3FA↑j
.text:0000000000002461                 movsxd  rax, ebp
.text:0000000000002464                 xor     edx, edx
.text:0000000000002466                 or      r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000246A                 mov     [rsp+148h+var_118], rax
.text:000000000000246F                 mov     rsi, rax
.text:0000000000002472                 xor     eax, eax
.text:0000000000002474                 jmp     short loc_248B
.text:0000000000002476 ; ---------------------------------------------------------------------------
.text:0000000000002476
.text:0000000000002476 loc_2476:                               ; CODE XREF: main+6AD↓j
.text:0000000000002476                 mov     rdi, [rbx+rdx*8]
.text:000000000000247A                 mov     rcx, r8
.text:000000000000247D                 add     rdx, 1
.text:0000000000002481                 repne scasb
.text:0000000000002483                 not     rcx
.text:0000000000002486                 lea     rsi, [rsi+rcx-1]
.text:000000000000248B
.text:000000000000248B loc_248B:                               ; CODE XREF: main+694↑j
.text:000000000000248B                 cmp     ebp, edx
.text:000000000000248D                 jg      short loc_2476
.text:000000000000248F                 mov     rdi, rsi
.text:0000000000002492                 call    xmalloc
.text:0000000000002497                 xor     edx, edx
.text:0000000000002499                 mov     qword ptr [rsp+148h+c], r14
.text:000000000000249E                 mov     [rsp+148h+var_110], r13
.text:00000000000024A3                 mov     [rsp+148h+var_108], r12
.text:00000000000024A8                 mov     r13, rax
.text:00000000000024AB                 mov     r12, rbx
.text:00000000000024AE                 mov     r14, rdx
.text:00000000000024B1                 movzx   ebx, [rsp+148h+var_129]
.text:00000000000024B6                 jmp     short loc_24D2
.text:00000000000024B8 ; ---------------------------------------------------------------------------
.text:00000000000024B8
.text:00000000000024B8 loc_24B8:                               ; CODE XREF: main+6F5↓j
.text:00000000000024B8                 mov     rsi, [r12+r14*8] ; src
.text:00000000000024BC                 mov     rdi, r13        ; dest
.text:00000000000024BF                 call    _stpcpy
.text:00000000000024C4                 mov     [r12+r14*8], r13
.text:00000000000024C8                 lea     r13, [rax+1]
.text:00000000000024CC                 mov     [rax], bl
.text:00000000000024CE                 add     r14, 1
.text:00000000000024D2
.text:00000000000024D2 loc_24D2:                               ; CODE XREF: main+6D6↑j
.text:00000000000024D2                 cmp     ebp, r14d
.text:00000000000024D5                 jg      short loc_24B8
.text:00000000000024D7                 mov     rax, [rsp+148h+var_118]
.text:00000000000024DC                 mov     rbx, r12
.text:00000000000024DF                 mov     rcx, r13
.text:00000000000024E2                 mov     r14, qword ptr [rsp+148h+c]
.text:00000000000024E7                 mov     r13, [rsp+148h+var_110]
.text:00000000000024EC                 mov     r12, [rsp+148h+var_108]
.text:00000000000024F1                 mov     [rbx+rax*8], rcx
.text:00000000000024F5                 jmp     loc_2346
.text:00000000000024FA ; ---------------------------------------------------------------------------
.text:00000000000024FA
.text:00000000000024FA loc_24FA:                               ; CODE XREF: main+581↑j
.text:00000000000024FA                 movzx   ecx, byte ptr [rsp+148h+var_138]
.text:00000000000024FF                 or      cl, byte ptr [rsp+148h+var_140]
.text:0000000000002503                 jnz     short loc_2536
.text:0000000000002505
.text:0000000000002505 loc_2505:                               ; CODE XREF: main+5EB↑j
.text:0000000000002505                 mov     [rsp+148h+var_110], 0
.text:000000000000250E
.text:000000000000250E loc_250E:                               ; CODE XREF: main+ABD↓j
.text:000000000000250E                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000002515                 mov     byte ptr [rsp+148h+var_138], cl
.text:0000000000002519                 call    rpl_fclose
.text:000000000000251E                 test    eax, eax
.text:0000000000002520                 movzx   ecx, byte ptr [rsp+148h+var_138]
.text:0000000000002525                 jnz     loc_2B16
.text:000000000000252B                 cmp     [rsp+148h+var_12A], 0
.text:0000000000002530                 jz      loc_2A9E
.text:0000000000002536
.text:0000000000002536 loc_2536:                               ; CODE XREF: main+723↑j
.text:0000000000002536                 test    r15, r15
.text:0000000000002539                 jz      short loc_255A
.text:000000000000253B                 mov     rdx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002542                 lea     rsi, aW         ; "w"
.text:0000000000002549                 mov     rdi, r15
.text:000000000000254C                 call    freopen_safer
.text:0000000000002551                 test    rax, rax
.text:0000000000002554                 jz      loc_28D5
.text:000000000000255A
.text:000000000000255A loc_255A:                               ; CODE XREF: main+759↑j
.text:000000000000255A                 test    r12, r12
.text:000000000000255D                 jz      loc_2436
.text:0000000000002563                 cmp     [rsp+148h+var_118], 0
.text:0000000000002569                 jz      loc_2B78
.text:000000000000256F                 cmp     byte ptr [rsp+148h+var_140], 0
.text:0000000000002574                 jz      loc_2913
.text:000000000000257A                 mov     r13, [rsp+148h+var_120]
.text:000000000000257F                 movsx   ebp, [rsp+148h+var_129]
.text:0000000000002584                 xor     r15d, r15d
.text:0000000000002587                 mov     rax, r12
.text:000000000000258A                 lea     rbx, aLuC       ; "%lu%c"
.text:0000000000002591                 mov     r12, r15
.text:0000000000002594                 mov     r15, rax
.text:0000000000002597                 sub     r13, r14
.text:000000000000259A
.text:000000000000259A loc_259A:                               ; CODE XREF: main+7E7↓j
.text:000000000000259A                 mov     rdi, qword ptr [rsp+148h+c]
.text:000000000000259F                 mov     rsi, r13
.text:00000000000025A2                 call    randint_genmax
.text:00000000000025A7                 lea     rdx, [r14+rax]
.text:00000000000025AB                 mov     ecx, ebp
.text:00000000000025AD                 xor     eax, eax
.text:00000000000025AF                 mov     rsi, rbx
.text:00000000000025B2                 mov     edi, 1
.text:00000000000025B7                 call    ___printf_chk
.text:00000000000025BC                 test    eax, eax
.text:00000000000025BE                 js      short loc_260C
.text:00000000000025C0                 add     r12, 1
.text:00000000000025C4                 cmp     r15, r12
.text:00000000000025C7                 jnz     short loc_259A
.text:00000000000025C9                 jmp     loc_2436
.text:00000000000025CE ; ---------------------------------------------------------------------------
.text:00000000000025CE
.text:00000000000025CE loc_25CE:                               ; CODE XREF: main+614↑j
.text:00000000000025CE                 xor     r14d, r14d
.text:00000000000025D1                 jmp     short loc_25D7
.text:00000000000025D3 ; ---------------------------------------------------------------------------
.text:00000000000025D3
.text:00000000000025D3 loc_25D3:                               ; CODE XREF: main+82A↓j
.text:00000000000025D3                 add     r14, 1
.text:00000000000025D7
.text:00000000000025D7 loc_25D7:                               ; CODE XREF: main+7F1↑j
.text:00000000000025D7                 cmp     r14, r12
.text:00000000000025DA                 jz      loc_2436
.text:00000000000025E0                 mov     rax, [r13+r14*8+0]
.text:00000000000025E5                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000025EC                 mov     esi, 1          ; size
.text:00000000000025F1                 lea     rax, [rbx+rax*8]
.text:00000000000025F5                 mov     rdi, [rax]      ; ptr
.text:00000000000025F8                 mov     rbp, [rax+8]
.text:00000000000025FC                 sub     rbp, rdi
.text:00000000000025FF                 mov     rdx, rbp        ; n
.text:0000000000002602                 call    _fwrite_unlocked
.text:0000000000002607                 cmp     rbp, rax
.text:000000000000260A                 jz      short loc_25D3
.text:000000000000260C
.text:000000000000260C loc_260C:                               ; CODE XREF: main+647↑j
.text:000000000000260C                                         ; main+7DE↑j ...
.text:000000000000260C                 lea     rsi, aWriteError ; "write error"
.text:0000000000002613                 mov     edx, 5          ; category
.text:0000000000002618                 xor     edi, edi        ; domainname
.text:000000000000261A                 call    _dcgettext
.text:000000000000261F                 mov     rbx, rax
.text:0000000000002622                 call    ___errno_location
.text:0000000000002627                 mov     esi, [rax]      ; errnum
.text:0000000000002629                 mov     rdx, rbx        ; format
.text:000000000000262C                 mov     edi, 1          ; status
.text:0000000000002631                 xor     eax, eax
.text:0000000000002633                 call    _error
.text:0000000000002638
.text:0000000000002638 loc_2638:                               ; CODE XREF: main+40A↑j
.text:0000000000002638                                         ; main+42E↑j
.text:0000000000002638                 mov     esi, 2
.text:000000000000263D                 mov     rdi, rdx
.text:0000000000002640                 call    fadvise
.text:0000000000002645                 cmp     [rsp+148h+var_12A], 0
.text:000000000000264A                 jnz     short loc_26BA
.text:000000000000264C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000002650                 jz      short loc_26BA
.text:0000000000002652                 test    r12, r12
.text:0000000000002655                 jz      loc_2235
.text:000000000000265B
.text:000000000000265B loc_265B:                               ; CODE XREF: main+BD6↓j
.text:000000000000265B                 lea     rdx, [rsp+148h+stat_buf] ; stat_buf
.text:0000000000002660                 xor     esi, esi        ; fildes
.text:0000000000002662                 mov     edi, 1          ; ver
.text:0000000000002667                 call    ___fxstat
.text:000000000000266C                 test    eax, eax
.text:000000000000266E                 jnz     loc_2235
.text:0000000000002674                 mov     eax, [rsp+148h+stat_buf.st_mode]
.text:000000000000267B                 and     eax, 0D000h
.text:0000000000002680                 cmp     eax, 8000h
.text:0000000000002685                 jnz     loc_2235
.text:000000000000268B                 xor     esi, esi        ; offset
.text:000000000000268D                 xor     edi, edi        ; fd
.text:000000000000268F                 mov     edx, 1          ; whence
.text:0000000000002694                 mov     rbx, [rsp+148h+stat_buf.st_size]
.text:000000000000269C                 call    _lseek
.text:00000000000026A1                 test    rax, rax
.text:00000000000026A4                 js      loc_2235
.text:00000000000026AA                 sub     rbx, rax
.text:00000000000026AD                 cmp     rbx, 800000h
.text:00000000000026B4                 jg      loc_2235
.text:00000000000026BA
.text:00000000000026BA loc_26BA:                               ; CODE XREF: main+44F↑j
.text:00000000000026BA                                         ; main+86A↑j ...
.text:00000000000026BA                 movsx   eax, [rsp+148h+var_129]
.text:00000000000026BF                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:00000000000026C6                 lea     rsi, [rsp+148h+var_F8]
.text:00000000000026CB                 mov     [rsp+148h+c], eax
.text:00000000000026CF                 call    fread_file
.text:00000000000026D4                 test    rax, rax
.text:00000000000026D7                 mov     rcx, rax
.text:00000000000026DA                 jz      loc_2B4C
.text:00000000000026E0                 mov     rbp, [rsp+148h+var_F8]
.text:00000000000026E5                 test    rbp, rbp
.text:00000000000026E8                 jz      short loc_2706
.text:00000000000026EA                 movzx   ebx, [rsp+148h+var_129]
.text:00000000000026EF                 cmp     bl, [rax+rbp-1]
.text:00000000000026F3                 jz      short loc_2706
.text:00000000000026F5                 lea     rax, [rbp+1]
.text:00000000000026F9                 mov     [rsp+148h+var_F8], rax
.text:00000000000026FE                 mov     [rcx+rbp], bl
.text:0000000000002701                 mov     rbp, [rsp+148h+var_F8]
.text:0000000000002706
.text:0000000000002706 loc_2706:                               ; CODE XREF: main+908↑j
.text:0000000000002706                                         ; main+913↑j
.text:0000000000002706                 add     rbp, rcx
.text:0000000000002709                 mov     rdi, rcx
.text:000000000000270C                 xor     eax, eax
.text:000000000000270E                 mov     ebx, [rsp+148h+c]
.text:0000000000002712                 mov     [rsp+148h+var_110], rcx
.text:0000000000002717                 mov     [rsp+148h+var_108], r12
.text:000000000000271C                 jmp     short loc_2732
.text:000000000000271E ; ---------------------------------------------------------------------------
.text:000000000000271E
.text:000000000000271E loc_271E:                               ; CODE XREF: main+959↓j
.text:000000000000271E                 mov     rdx, rbp
.text:0000000000002721                 mov     esi, ebx        ; c
.text:0000000000002723                 sub     rdx, rdi        ; n
.text:0000000000002726                 call    _memchr
.text:000000000000272B                 lea     rdi, [rax+1]    ; s
.text:000000000000272F                 mov     rax, r12
.text:0000000000002732
.text:0000000000002732 loc_2732:                               ; CODE XREF: main+93C↑j
.text:0000000000002732                 cmp     rbp, rdi
.text:0000000000002735                 lea     r12, [rax+1]
.text:0000000000002739                 ja      short loc_271E
.text:000000000000273B                 mov     edx, 8
.text:0000000000002740                 mov     rbx, r12
.text:0000000000002743                 mov     [rsp+148h+var_118], rax
.text:0000000000002748                 mov     rax, rdx
.text:000000000000274B                 xor     esi, esi
.text:000000000000274D                 mov     rcx, [rsp+148h+var_110]
.text:0000000000002752                 mul     rbx
.text:0000000000002755                 mov     r12, [rsp+148h+var_108]
.text:000000000000275A                 jo      loc_2B42
.text:0000000000002760
.text:0000000000002760 loc_2760:                               ; CODE XREF: main+D67↓j
.text:0000000000002760                 test    rax, rax
.text:0000000000002763                 js      loc_2A00
.text:0000000000002769                 test    rsi, rsi
.text:000000000000276C                 jnz     loc_2A00
.text:0000000000002772                 lea     rdi, ds:0[rbx*8]
.text:000000000000277A                 mov     [rsp+148h+var_110], rcx
.text:000000000000277F                 call    xmalloc
.text:0000000000002784                 mov     rcx, [rsp+148h+var_110]
.text:0000000000002789                 mov     rbx, rax
.text:000000000000278C                 mov     [rsp+148h+var_110], r15
.text:0000000000002791                 mov     [rsp+148h+var_100], r12
.text:0000000000002796                 mov     [rsp+148h+var_108], rbx
.text:000000000000279B                 mov     r12d, [rsp+148h+c]
.text:00000000000027A0                 mov     [rax], rcx
.text:00000000000027A3                 mov     rax, [rsp+148h+var_118]
.text:00000000000027A8                 mov     rdi, rcx
.text:00000000000027AB                 lea     rax, [rbx+rax*8]
.text:00000000000027AF                 mov     r15, rax
.text:00000000000027B2                 jmp     short loc_27CD
.text:00000000000027B4 ; ---------------------------------------------------------------------------
.text:00000000000027B4
.text:00000000000027B4 loc_27B4:                               ; CODE XREF: main+9F0↓j
.text:00000000000027B4                 mov     rdx, rbp
.text:00000000000027B7                 mov     esi, r12d       ; c
.text:00000000000027BA                 add     rbx, 8
.text:00000000000027BE                 sub     rdx, rdi        ; n
.text:00000000000027C1                 call    _memchr
.text:00000000000027C6                 lea     rdi, [rax+1]    ; s
.text:00000000000027CA                 mov     [rbx], rdi
.text:00000000000027CD
.text:00000000000027CD loc_27CD:                               ; CODE XREF: main+9D2↑j
.text:00000000000027CD                 cmp     r15, rbx
.text:00000000000027D0                 jnz     short loc_27B4
.text:00000000000027D2                 mov     r15, [rsp+148h+var_110]
.text:00000000000027D7                 mov     rbx, [rsp+148h+var_108]
.text:00000000000027DC                 mov     r12, [rsp+148h+var_100]
.text:00000000000027E1                 jmp     loc_2346
.text:00000000000027E6 ; ---------------------------------------------------------------------------
.text:00000000000027E6
.text:00000000000027E6 loc_27E6:                               ; CODE XREF: main+4B4↑j
.text:00000000000027E6                 test    r8, r8
.text:00000000000027E9                 mov     r14, [rsp+148h+var_108]
.text:00000000000027EE                 mov     [rsp+148h+var_110], rbx
.text:00000000000027F3                 jz      loc_29F8
.text:00000000000027F9                 lea     r13, [rsp+148h+var_F8]
.text:00000000000027FE                 mov     rbp, r12
.text:0000000000002801                 mov     rdi, r13
.text:0000000000002804                 call    initbuffer
.text:0000000000002809                 mov     [rsp+148h+var_108], r15
.text:000000000000280E                 mov     [rsp+148h+var_100], r14
.text:0000000000002813                 mov     r15, [rsp+148h+var_138]
.text:0000000000002818                 mov     r14d, dword ptr [rsp+148h+var_118]
.text:000000000000281D                 jmp     short loc_282B
.text:000000000000281F ; ---------------------------------------------------------------------------
.text:000000000000281F
.text:000000000000281F loc_281F:                               ; CODE XREF: main+A7F↓j
.text:000000000000281F                 test    rbp, rbp
.text:0000000000002822                 jz      loc_296A
.text:0000000000002828                 mov     rbp, rbx
.text:000000000000282B
.text:000000000000282B loc_282B:                               ; CODE XREF: main+A3D↑j
.text:000000000000282B                 mov     rdi, qword ptr [rsp+148h+c]
.text:0000000000002830                 mov     rsi, rbp
.text:0000000000002833                 lea     rbx, [rbp+1]
.text:0000000000002837                 call    randint_genmax
.text:000000000000283C                 cmp     r12, rax
.text:000000000000283F                 mov     rdi, r13
.text:0000000000002842                 jbe     short loc_2851
.text:0000000000002844                 imul    rax, 18h
.text:0000000000002848                 mov     rcx, [rsp+148h+var_110]
.text:000000000000284D                 lea     rdi, [rcx+rax]
.text:0000000000002851
.text:0000000000002851 loc_2851:                               ; CODE XREF: main+A62↑j
.text:0000000000002851                 mov     edx, r14d
.text:0000000000002854                 mov     rsi, r15
.text:0000000000002857                 call    readlinebuffer_delim
.text:000000000000285C                 test    rax, rax
.text:000000000000285F                 jnz     short loc_281F
.text:0000000000002861                 test    rbp, rbp
.text:0000000000002864                 mov     r15, [rsp+148h+var_108]
.text:0000000000002869                 mov     r14, [rsp+148h+var_100]
.text:000000000000286E                 jz      loc_2BC8
.text:0000000000002874
.text:0000000000002874 loc_2874:                               ; CODE XREF: main+B99↓j
.text:0000000000002874                 mov     rdi, r13
.text:0000000000002877                 call    freebuffer
.text:000000000000287C
.text:000000000000287C loc_287C:                               ; CODE XREF: main+B2E↓j
.text:000000000000287C                                         ; main+C1B↓j
.text:000000000000287C                 mov     rax, [rsp+148h+var_138]
.text:0000000000002881                 test    byte ptr [rax], 20h
.text:0000000000002884                 jnz     loc_2B9C
.text:000000000000288A                 cmp     r12, rbp
.text:000000000000288D                 mov     ecx, 1
.text:0000000000002892                 cmova   r12, rbp
.text:0000000000002896                 xor     ebx, ebx
.text:0000000000002898                 mov     [rsp+148h+var_118], r12
.text:000000000000289D                 jmp     loc_250E
.text:00000000000028A2 ; ---------------------------------------------------------------------------
.text:00000000000028A2
.text:00000000000028A2 loc_28A2:                               ; CODE XREF: main+609↑j
.text:00000000000028A2                 xor     ecx, ecx
.text:00000000000028A4                 mov     [rsp+148h+var_110], 0
.text:00000000000028AD
.text:00000000000028AD loc_28AD:                               ; CODE XREF: main+CDF↓j
.text:00000000000028AD                 mov     rdx, cs:stdout@@GLIBC_2_2_5
.text:00000000000028B4                 lea     rsi, aW         ; "w"
.text:00000000000028BB                 mov     rdi, r15
.text:00000000000028BE                 mov     byte ptr [rsp+148h+var_138], cl
.text:00000000000028C2                 call    freopen_safer
.text:00000000000028C7                 test    rax, rax
.text:00000000000028CA                 movzx   ecx, byte ptr [rsp+148h+var_138]
.text:00000000000028CF                 jnz     loc_2AC5
.text:00000000000028D5
.text:00000000000028D5 loc_28D5:                               ; CODE XREF: main+774↑j
.text:00000000000028D5                 mov     rdx, r15
.text:00000000000028D8                 mov     esi, 3
.text:00000000000028DD                 xor     edi, edi
.text:00000000000028DF                 call    quotearg_n_style_colon
.text:00000000000028E4                 mov     rbx, rax
.text:00000000000028E7                 call    ___errno_location
.text:00000000000028EC                 mov     esi, [rax]      ; errnum
.text:00000000000028EE                 lea     rdx, format+4   ; format
.text:00000000000028F5                 mov     rcx, rbx
.text:00000000000028F8                 mov     edi, 1          ; status
.text:00000000000028FD                 xor     eax, eax
.text:00000000000028FF                 call    _error
.text:0000000000002904
.text:0000000000002904 loc_2904:                               ; CODE XREF: main+4D6↑j
.text:0000000000002904                 mov     r14, [rsp+148h+var_108]
.text:0000000000002909                 mov     [rsp+148h+var_110], rbx
.text:000000000000290E                 jmp     loc_287C
.text:0000000000002913 ; ---------------------------------------------------------------------------
.text:0000000000002913
.text:0000000000002913 loc_2913:                               ; CODE XREF: main+794↑j
.text:0000000000002913                 mov     rax, [rsp+148h+var_118]
.text:0000000000002918                 xor     r14d, r14d
.text:000000000000291B                 mov     r15, qword ptr [rsp+148h+c]
.text:0000000000002920                 lea     r13, [rax-1]
.text:0000000000002924                 jmp     short loc_2933
.text:0000000000002926 ; ---------------------------------------------------------------------------
.text:0000000000002926
.text:0000000000002926 loc_2926:                               ; CODE XREF: main+B83↓j
.text:0000000000002926                 add     r14, 1
.text:000000000000292A                 cmp     r12, r14
.text:000000000000292D                 jz      loc_2436
.text:0000000000002933
.text:0000000000002933 loc_2933:                               ; CODE XREF: main+B44↑j
.text:0000000000002933                 mov     rsi, r13
.text:0000000000002936                 mov     rdi, r15
.text:0000000000002939                 call    randint_genmax
.text:000000000000293E                 lea     rax, [rbx+rax*8]
.text:0000000000002942                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002949                 mov     esi, 1          ; size
.text:000000000000294E                 mov     rdi, [rax]      ; ptr
.text:0000000000002951                 mov     rbp, [rax+8]
.text:0000000000002955                 sub     rbp, rdi
.text:0000000000002958                 mov     rdx, rbp        ; n
.text:000000000000295B                 call    _fwrite_unlocked
.text:0000000000002960                 cmp     rbp, rax
.text:0000000000002963                 jz      short loc_2926
.text:0000000000002965                 jmp     loc_260C
.text:000000000000296A ; ---------------------------------------------------------------------------
.text:000000000000296A
.text:000000000000296A loc_296A:                               ; CODE XREF: main+A42↑j
.text:000000000000296A                 mov     r15, [rsp+148h+var_108]
.text:000000000000296F                 mov     r14, [rsp+148h+var_100]
.text:0000000000002974                 mov     ebp, 1
.text:0000000000002979                 jmp     loc_2874
.text:000000000000297E ; ---------------------------------------------------------------------------
.text:000000000000297E
.text:000000000000297E loc_297E:                               ; CODE XREF: main+437↑j
.text:000000000000297E                 lea     rsi, aReadError+9 ; "r"
.text:0000000000002985                 mov     rdi, rbp
.text:0000000000002988                 call    freopen_safer
.text:000000000000298D                 test    rax, rax
.text:0000000000002990                 jz      loc_2A4B
.text:0000000000002996                 mov     rdi, cs:stdin@@GLIBC_2_2_5
.text:000000000000299D                 mov     esi, 2
.text:00000000000029A2                 call    fadvise
.text:00000000000029A7                 cmp     [rsp+148h+var_12A], 0
.text:00000000000029AC                 jnz     loc_26BA
.text:00000000000029B2                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000029B6                 jnz     loc_265B
.text:00000000000029BC                 jmp     loc_26BA
.text:00000000000029C1 ; ---------------------------------------------------------------------------
.text:00000000000029C1
.text:00000000000029C1 loc_29C1:                               ; CODE XREF: main+3D6↑j
.text:00000000000029C1                 lea     rsi, aCannotCombineE ; "cannot combine -e and -i options"
.text:00000000000029C8                 mov     edx, 5          ; category
.text:00000000000029CD                 xor     edi, edi        ; domainname
.text:00000000000029CF                 call    _dcgettext
.text:00000000000029D4                 xor     esi, esi        ; errnum
.text:00000000000029D6                 mov     rdx, rax        ; format
.text:00000000000029D9                 xor     edi, edi        ; status
.text:00000000000029DB                 xor     eax, eax
.text:00000000000029DD                 call    _error
.text:00000000000029E2
.text:00000000000029E2 loc_29E2:                               ; CODE XREF: main+F2↑j
.text:00000000000029E2                                         ; main+14D↑j ...
.text:00000000000029E2                 mov     edi, 1          ; status
.text:00000000000029E7                 call    usage
.text:00000000000029EC ; ---------------------------------------------------------------------------
.text:00000000000029EC
.text:00000000000029EC loc_29EC:                               ; CODE XREF: main+135↑j
.text:00000000000029EC                 xor     edi, edi        ; status
.text:00000000000029EE                 call    usage
.text:00000000000029F3 ; ---------------------------------------------------------------------------
.text:00000000000029F3
.text:00000000000029F3 loc_29F3:                               ; CODE XREF: main+669↑j
.text:00000000000029F3                 call    ___stack_chk_fail
.text:00000000000029F8 ; ---------------------------------------------------------------------------
.text:00000000000029F8
.text:00000000000029F8 loc_29F8:                               ; CODE XREF: main+A13↑j
.text:00000000000029F8                 mov     rbp, r12
.text:00000000000029FB                 jmp     loc_287C
.text:0000000000002A00 ; ---------------------------------------------------------------------------
.text:0000000000002A00
.text:0000000000002A00 loc_2A00:                               ; CODE XREF: main+507↑j
.text:0000000000002A00                                         ; main+510↑j ...
.text:0000000000002A00                 call    xalloc_die
.text:0000000000002A05 ; ---------------------------------------------------------------------------
.text:0000000000002A05
.text:0000000000002A05 loc_2A05:                               ; CODE XREF: main+4F9↑j
.text:0000000000002A05                 mov     esi, 1
.text:0000000000002A0A                 jmp     loc_22DF
.text:0000000000002A0F ; ---------------------------------------------------------------------------
.text:0000000000002A0F
.text:0000000000002A0F loc_2A0F:                               ; CODE XREF: main+54D↑j
.text:0000000000002A0F                 xor     eax, eax
.text:0000000000002A11
.text:0000000000002A11 loc_2A11:                               ; CODE XREF: main+3EF↑j
.text:0000000000002A11                 mov     rdi, [rbx+rax]
.text:0000000000002A15                 call    quote
.text:0000000000002A1A                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000002A21                 mov     rbx, rax
.text:0000000000002A24                 mov     edx, 5          ; category
.text:0000000000002A29                 xor     edi, edi        ; domainname
.text:0000000000002A2B                 call    _dcgettext
.text:0000000000002A30                 xor     edi, edi        ; status
.text:0000000000002A32                 mov     rdx, rax        ; format
.text:0000000000002A35                 mov     rcx, rbx
.text:0000000000002A38                 xor     esi, esi        ; errnum
.text:0000000000002A3A                 xor     eax, eax
.text:0000000000002A3C                 call    _error
.text:0000000000002A41                 mov     edi, 1          ; status
.text:0000000000002A46                 call    usage
.text:0000000000002A4B ; ---------------------------------------------------------------------------
.text:0000000000002A4B
.text:0000000000002A4B loc_2A4B:                               ; CODE XREF: main+BB0↑j
.text:0000000000002A4B                 mov     rdx, [rbx]
.text:0000000000002A4E                 mov     esi, 3
.text:0000000000002A53                 xor     edi, edi
.text:0000000000002A55                 call    quotearg_n_style_colon
.text:0000000000002A5A                 mov     rbx, rax
.text:0000000000002A5D                 call    ___errno_location
.text:0000000000002A62                 mov     esi, [rax]      ; errnum
.text:0000000000002A64                 lea     rdx, format+4   ; format
.text:0000000000002A6B                 mov     rcx, rbx
.text:0000000000002A6E                 mov     edi, 1          ; status
.text:0000000000002A73                 xor     eax, eax
.text:0000000000002A75                 call    _error
.text:0000000000002A7A
.text:0000000000002A7A loc_2A7A:                               ; CODE XREF: main+294↑j
.text:0000000000002A7A                 lea     rsi, aMultipleOutput ; "multiple output files specified"
.text:0000000000002A81                 mov     edx, 5          ; category
.text:0000000000002A86                 xor     edi, edi        ; domainname
.text:0000000000002A88                 call    _dcgettext
.text:0000000000002A8D                 xor     esi, esi        ; errnum
.text:0000000000002A8F                 mov     rdx, rax        ; format
.text:0000000000002A92                 mov     edi, 1          ; status
.text:0000000000002A97                 xor     eax, eax
.text:0000000000002A99                 call    _error
.text:0000000000002A9E
.text:0000000000002A9E loc_2A9E:                               ; CODE XREF: main+750↑j
.text:0000000000002A9E                 mov     rdx, [rsp+148h+var_118]
.text:0000000000002AA3                 mov     rdi, qword ptr [rsp+148h+c]
.text:0000000000002AA8                 mov     rsi, r12
.text:0000000000002AAB                 mov     byte ptr [rsp+148h+var_138], cl
.text:0000000000002AAF                 call    randperm_new
.text:0000000000002AB4                 test    r15, r15
.text:0000000000002AB7                 mov     r13, rax
.text:0000000000002ABA                 movzx   ecx, byte ptr [rsp+148h+var_138]
.text:0000000000002ABF                 jnz     loc_28AD
.text:0000000000002AC5
.text:0000000000002AC5 loc_2AC5:                               ; CODE XREF: main+AEF↑j
.text:0000000000002AC5                 xor     r15d, r15d
.text:0000000000002AC8                 test    cl, cl
.text:0000000000002ACA                 jz      loc_23EF
.text:0000000000002AD0                 mov     rbp, [rsp+148h+var_118]
.text:0000000000002AD5                 mov     r12, [rsp+148h+var_110]
.text:0000000000002ADA                 jmp     short loc_2B0C
.text:0000000000002ADC ; ---------------------------------------------------------------------------
.text:0000000000002ADC
.text:0000000000002ADC loc_2ADC:                               ; CODE XREF: main+D2F↓j
.text:0000000000002ADC                 imul    rbx, [r13+r15*8+0], 18h
.text:0000000000002AE2                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002AE9                 mov     esi, 1          ; size
.text:0000000000002AEE                 add     rbx, r12
.text:0000000000002AF1                 mov     rdx, [rbx+8]    ; n
.text:0000000000002AF5                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000002AF9                 call    _fwrite_unlocked
.text:0000000000002AFE                 cmp     rax, [rbx+8]
.text:0000000000002B02                 jnz     loc_260C
.text:0000000000002B08                 add     r15, 1
.text:0000000000002B0C
.text:0000000000002B0C loc_2B0C:                               ; CODE XREF: main+CFA↑j
.text:0000000000002B0C                 cmp     rbp, r15
.text:0000000000002B0F                 jnz     short loc_2ADC
.text:0000000000002B11                 jmp     loc_2436
.text:0000000000002B16 ; ---------------------------------------------------------------------------
.text:0000000000002B16
.text:0000000000002B16 loc_2B16:                               ; CODE XREF: main+745↑j
.text:0000000000002B16                 lea     rsi, aReadError ; "read error"
.text:0000000000002B1D                 mov     edx, 5          ; category
.text:0000000000002B22                 xor     edi, edi        ; domainname
.text:0000000000002B24                 call    _dcgettext
.text:0000000000002B29                 mov     rbx, rax
.text:0000000000002B2C                 call    ___errno_location
.text:0000000000002B31                 mov     esi, [rax]      ; errnum
.text:0000000000002B33                 mov     rdx, rbx        ; format
.text:0000000000002B36                 mov     edi, 1          ; status
.text:0000000000002B3B                 xor     eax, eax
.text:0000000000002B3D                 call    _error
.text:0000000000002B42
.text:0000000000002B42 loc_2B42:                               ; CODE XREF: main+97A↑j
.text:0000000000002B42                 mov     esi, 1
.text:0000000000002B47                 jmp     loc_2760
.text:0000000000002B4C ; ---------------------------------------------------------------------------
.text:0000000000002B4C
.text:0000000000002B4C loc_2B4C:                               ; CODE XREF: main+8FA↑j
.text:0000000000002B4C                 lea     rsi, aReadError ; "read error"
.text:0000000000002B53                 mov     edx, 5          ; category
.text:0000000000002B58                 xor     edi, edi        ; domainname
.text:0000000000002B5A                 call    _dcgettext
.text:0000000000002B5F                 mov     rbx, rax
.text:0000000000002B62                 call    ___errno_location
.text:0000000000002B67                 mov     esi, [rax]      ; errnum
.text:0000000000002B69                 mov     rdx, rbx        ; format
.text:0000000000002B6C                 mov     edi, 1          ; status
.text:0000000000002B71                 xor     eax, eax
.text:0000000000002B73                 call    _error
.text:0000000000002B78
.text:0000000000002B78 loc_2B78:                               ; CODE XREF: main+789↑j
.text:0000000000002B78                 lea     rsi, aNoLinesToRepea ; "no lines to repeat"
.text:0000000000002B7F                 mov     edx, 5          ; category
.text:0000000000002B84                 xor     edi, edi        ; domainname
.text:0000000000002B86                 call    _dcgettext
.text:0000000000002B8B                 xor     esi, esi        ; errnum
.text:0000000000002B8D                 mov     rdx, rax        ; format
.text:0000000000002B90                 mov     edi, 1          ; status
.text:0000000000002B95                 xor     eax, eax
.text:0000000000002B97                 call    _error
.text:0000000000002B9C
.text:0000000000002B9C loc_2B9C:                               ; CODE XREF: main+AA4↑j
.text:0000000000002B9C                 lea     rsi, aReadError ; "read error"
.text:0000000000002BA3                 mov     edx, 5          ; category
.text:0000000000002BA8                 xor     edi, edi        ; domainname
.text:0000000000002BAA                 call    _dcgettext
.text:0000000000002BAF                 mov     rbx, rax
.text:0000000000002BB2                 call    ___errno_location
.text:0000000000002BB7                 mov     esi, [rax]      ; errnum
.text:0000000000002BB9                 mov     rdx, rbx        ; format
.text:0000000000002BBC                 mov     edi, 1          ; status
.text:0000000000002BC1                 xor     eax, eax
.text:0000000000002BC3                 call    _error
.text:0000000000002BC8
.text:0000000000002BC8 loc_2BC8:                               ; CODE XREF: main+A8E↑j
.text:0000000000002BC8                 lea     rsi, aTooManyInputLi ; "too many input lines"
.text:0000000000002BCF                 mov     edx, 5          ; category
.text:0000000000002BD4                 xor     edi, edi        ; domainname
.text:0000000000002BD6                 call    _dcgettext
.text:0000000000002BDB                 mov     esi, 4Bh ; 'K'  ; errnum
.text:0000000000002BE0                 mov     rdx, rax        ; format
.text:0000000000002BE3                 mov     edi, 1          ; status
.text:0000000000002BE8                 xor     eax, eax
.text:0000000000002BEA                 call    _error
.text:0000000000002BEF
.text:0000000000002BEF loc_2BEF:                               ; CODE XREF: main+11B↑j
.text:0000000000002BEF                 lea     rsi, aMultipleRandom ; "multiple random sources specified"
.text:0000000000002BF6                 mov     edx, 5          ; category
.text:0000000000002BFB                 xor     edi, edi        ; domainname
.text:0000000000002BFD                 call    _dcgettext
.text:0000000000002C02                 xor     esi, esi        ; errnum
.text:0000000000002C04                 mov     rdx, rax        ; format
.text:0000000000002C07                 mov     edi, 1          ; status
.text:0000000000002C0C                 xor     eax, eax
.text:0000000000002C0E                 call    _error
.text:0000000000002C13
.text:0000000000002C13 loc_2C13:                               ; CODE XREF: main+16C↑j
.text:0000000000002C13                 lea     rsi, aMultipleIOptio ; "multiple -i options specified"
.text:0000000000002C1A                 mov     edx, 5          ; category
.text:0000000000002C1F                 xor     edi, edi        ; domainname
.text:0000000000002C21                 call    _dcgettext
.text:0000000000002C26                 xor     esi, esi        ; errnum
.text:0000000000002C28                 mov     rdx, rax        ; format
.text:0000000000002C2B                 mov     edi, 1          ; status
.text:0000000000002C30                 xor     eax, eax
.text:0000000000002C32                 call    _error
.text:0000000000002C32 ; } // starts at 1DE0
.text:0000000000002C37                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002C37 main            endp ; sp-analysis failed
.text:0000000000002C37
.text:0000000000002C40
.text:0000000000002C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C40
.text:0000000000002C40 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002C40
.text:0000000000002C40 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002C40                 public start
.text:0000000000002C40 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002C40 ; __unwind {
.text:0000000000002C40                 xor     ebp, ebp
.text:0000000000002C42                 mov     r9, rdx         ; rtld_fini
.text:0000000000002C45                 pop     rsi             ; argc
.text:0000000000002C46                 mov     rdx, rsp        ; ubp_av
.text:0000000000002C49                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000002C4D                 push    rax
.text:0000000000002C4E                 push    rsp             ; stack_end
.text:0000000000002C4F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002C56                 lea     rcx, __libc_csu_init ; init
.text:0000000000002C5D                 lea     rdi, main       ; main
.text:0000000000002C64                 call    cs:__libc_start_main_ptr
.text:0000000000002C6A                 hlt
.text:0000000000002C6A ; } // starts at 2C40
.text:0000000000002C6A start           endp
.text:0000000000002C6A
.text:0000000000002C6A ; ---------------------------------------------------------------------------
.text:0000000000002C6B                 align 10h
.text:0000000000002C70
.text:0000000000002C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C70
.text:0000000000002C70 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002C70
.text:0000000000002C70 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2D23↓p
.text:0000000000002C70                 lea     rdi, __bss_start
.text:0000000000002C77                 push    rbp
.text:0000000000002C78                 lea     rax, __bss_start
.text:0000000000002C7F                 cmp     rax, rdi
.text:0000000000002C82                 mov     rbp, rsp
.text:0000000000002C85                 jz      short loc_2CA0
.text:0000000000002C87                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000002C8E                 test    rax, rax
.text:0000000000002C91                 jz      short loc_2CA0
.text:0000000000002C93                 pop     rbp
.text:0000000000002C94                 jmp     rax
.text:0000000000002C94 ; ---------------------------------------------------------------------------
.text:0000000000002C96                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002CA0                                         ; deregister_tm_clones+21↑j
.text:0000000000002CA0                 pop     rbp
.text:0000000000002CA1                 retn
.text:0000000000002CA1 deregister_tm_clones endp
.text:0000000000002CA1
.text:0000000000002CA1 ; ---------------------------------------------------------------------------
.text:0000000000002CA2                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CB0
.text:0000000000002CB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002CB0
.text:0000000000002CB0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002CB0                 lea     rdi, __bss_start
.text:0000000000002CB7                 lea     rsi, __bss_start
.text:0000000000002CBE                 push    rbp
.text:0000000000002CBF                 sub     rsi, rdi
.text:0000000000002CC2                 mov     rbp, rsp
.text:0000000000002CC5                 sar     rsi, 3
.text:0000000000002CC9                 mov     rax, rsi
.text:0000000000002CCC                 shr     rax, 3Fh
.text:0000000000002CD0                 add     rsi, rax
.text:0000000000002CD3                 sar     rsi, 1
.text:0000000000002CD6                 jz      short loc_2CF0
.text:0000000000002CD8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000002CDF                 test    rax, rax
.text:0000000000002CE2                 jz      short loc_2CF0
.text:0000000000002CE4                 pop     rbp
.text:0000000000002CE5                 jmp     rax
.text:0000000000002CE5 ; ---------------------------------------------------------------------------
.text:0000000000002CE7                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 loc_2CF0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002CF0                                         ; register_tm_clones+32↑j
.text:0000000000002CF0                 pop     rbp
.text:0000000000002CF1                 retn
.text:0000000000002CF1 register_tm_clones endp
.text:0000000000002CF1
.text:0000000000002CF1 ; ---------------------------------------------------------------------------
.text:0000000000002CF2                 align 20h
.text:0000000000002D00
.text:0000000000002D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D00
.text:0000000000002D00 ; Attributes: info_from_lumina
.text:0000000000002D00
.text:0000000000002D00 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002D00                 cmp     cs:completed_7697, 0
.text:0000000000002D07                 jnz     short locret_2D38
.text:0000000000002D09                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002D11                 push    rbp
.text:0000000000002D12                 mov     rbp, rsp
.text:0000000000002D15                 jz      short loc_2D23
.text:0000000000002D17                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000002D1E                 call    __cxa_finalize
.text:0000000000002D23
.text:0000000000002D23 loc_2D23:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002D23                 call    deregister_tm_clones
.text:0000000000002D28                 mov     cs:completed_7697, 1
.text:0000000000002D2F                 pop     rbp
.text:0000000000002D30                 retn
.text:0000000000002D30 ; ---------------------------------------------------------------------------
.text:0000000000002D31                 align 8
.text:0000000000002D38
.text:0000000000002D38 locret_2D38:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002D38                 rep retn
.text:0000000000002D38 __do_global_dtors_aux endp
.text:0000000000002D38
.text:0000000000002D38 ; ---------------------------------------------------------------------------
.text:0000000000002D3A                 align 20h
.text:0000000000002D40
.text:0000000000002D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D40
.text:0000000000002D40 ; Attributes: bp-based frame
.text:0000000000002D40
.text:0000000000002D40 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002D40                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002D40                 push    rbp
.text:0000000000002D41                 mov     rbp, rsp
.text:0000000000002D44                 pop     rbp
.text:0000000000002D45                 jmp     register_tm_clones
.text:0000000000002D45 frame_dummy     endp
.text:0000000000002D45
.text:0000000000002D45 ; ---------------------------------------------------------------------------
.text:0000000000002D4A                 align 10h
.text:0000000000002D50
.text:0000000000002D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D50
.text:0000000000002D50 ; Attributes: noreturn
.text:0000000000002D50
.text:0000000000002D50 ; void __fastcall __noreturn usage(int status)
.text:0000000000002D50                 public usage
.text:0000000000002D50 usage           proc near               ; CODE XREF: main+C07↑p
.text:0000000000002D50                                         ; main+C0E↑p ...
.text:0000000000002D50
.text:0000000000002D50 var_A8          = qword ptr -0A8h
.text:0000000000002D50 var_A0          = qword ptr -0A0h
.text:0000000000002D50 var_98          = qword ptr -98h
.text:0000000000002D50 var_90          = qword ptr -90h
.text:0000000000002D50 var_88          = qword ptr -88h
.text:0000000000002D50 var_80          = qword ptr -80h
.text:0000000000002D50 var_78          = qword ptr -78h
.text:0000000000002D50 var_70          = qword ptr -70h
.text:0000000000002D50 var_68          = qword ptr -68h
.text:0000000000002D50 var_60          = qword ptr -60h
.text:0000000000002D50 var_58          = qword ptr -58h
.text:0000000000002D50 var_50          = qword ptr -50h
.text:0000000000002D50 var_48          = qword ptr -48h
.text:0000000000002D50 var_40          = qword ptr -40h
.text:0000000000002D50 var_30          = qword ptr -30h
.text:0000000000002D50
.text:0000000000002D50 ; __unwind {
.text:0000000000002D50                 push    r13
.text:0000000000002D52                 push    r12
.text:0000000000002D54                 mov     edx, 5          ; category
.text:0000000000002D59                 push    rbp
.text:0000000000002D5A                 push    rbx
.text:0000000000002D5B                 mov     ebp, edi
.text:0000000000002D5D                 sub     rsp, 88h
.text:0000000000002D64                 mov     rbx, cs:program_name
.text:0000000000002D6B                 mov     rax, fs:28h
.text:0000000000002D74                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002D79                 xor     eax, eax
.text:0000000000002D7B                 test    edi, edi
.text:0000000000002D7D                 jz      short loc_2DAD
.text:0000000000002D7F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002D86                 xor     edi, edi        ; domainname
.text:0000000000002D88                 call    _dcgettext
.text:0000000000002D8D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002D94                 mov     rdx, rax
.text:0000000000002D97                 mov     rcx, rbx
.text:0000000000002D9A                 mov     esi, 1
.text:0000000000002D9F                 xor     eax, eax
.text:0000000000002DA1                 call    ___fprintf_chk
.text:0000000000002DA6
.text:0000000000002DA6 loc_2DA6:                               ; CODE XREF: usage+316↓j
.text:0000000000002DA6                 mov     edi, ebp        ; status
.text:0000000000002DA8                 call    _exit
.text:0000000000002DAD ; ---------------------------------------------------------------------------
.text:0000000000002DAD
.text:0000000000002DAD loc_2DAD:                               ; CODE XREF: usage+2D↑j
.text:0000000000002DAD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]\n  or:  %s"...
.text:0000000000002DB4                 xor     edi, edi        ; domainname
.text:0000000000002DB6                 call    _dcgettext
.text:0000000000002DBB                 mov     rcx, rbx
.text:0000000000002DBE                 mov     r8, rbx
.text:0000000000002DC1                 mov     rdx, rbx
.text:0000000000002DC4                 mov     rsi, rax
.text:0000000000002DC7                 mov     edi, 1
.text:0000000000002DCC                 xor     eax, eax
.text:0000000000002DCE                 call    ___printf_chk
.text:0000000000002DD3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002DDA                 lea     rsi, aWriteARandomPe ; "Write a random permutation of the input"...
.text:0000000000002DE1                 mov     edx, 5          ; category
.text:0000000000002DE6                 xor     edi, edi        ; domainname
.text:0000000000002DE8                 call    _dcgettext
.text:0000000000002DED                 mov     rsi, rbx        ; stream
.text:0000000000002DF0                 mov     rdi, rax        ; s
.text:0000000000002DF3                 call    _fputs_unlocked
.text:0000000000002DF8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002DFF                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000002E06                 mov     edx, 5          ; category
.text:0000000000002E0B                 xor     edi, edi        ; domainname
.text:0000000000002E0D                 call    _dcgettext
.text:0000000000002E12                 mov     rsi, rbx        ; stream
.text:0000000000002E15                 mov     rdi, rax        ; s
.text:0000000000002E18                 call    _fputs_unlocked
.text:0000000000002E1D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E24                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002E2B                 mov     edx, 5          ; category
.text:0000000000002E30                 xor     edi, edi        ; domainname
.text:0000000000002E32                 call    _dcgettext
.text:0000000000002E37                 mov     rsi, rbx        ; stream
.text:0000000000002E3A                 mov     rdi, rax        ; s
.text:0000000000002E3D                 call    _fputs_unlocked
.text:0000000000002E42                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E49                 lea     rsi, aEEchoTreatEach ; "  -e, --echo                treat each "...
.text:0000000000002E50                 mov     edx, 5          ; category
.text:0000000000002E55                 xor     edi, edi        ; domainname
.text:0000000000002E57                 call    _dcgettext
.text:0000000000002E5C                 mov     rsi, rbx        ; stream
.text:0000000000002E5F                 mov     rdi, rax        ; s
.text:0000000000002E62                 call    _fputs_unlocked
.text:0000000000002E67                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E6E                 lea     rsi, aZZeroTerminate ; "  -z, --zero-terminated     line delimi"...
.text:0000000000002E75                 mov     edx, 5          ; category
.text:0000000000002E7A                 xor     edi, edi        ; domainname
.text:0000000000002E7C                 call    _dcgettext
.text:0000000000002E81                 mov     rsi, rbx        ; stream
.text:0000000000002E84                 mov     rdi, rax        ; s
.text:0000000000002E87                 call    _fputs_unlocked
.text:0000000000002E8C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E93                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002E9A                 mov     edx, 5          ; category
.text:0000000000002E9F                 xor     edi, edi        ; domainname
.text:0000000000002EA1                 call    _dcgettext
.text:0000000000002EA6                 mov     rsi, rbx        ; stream
.text:0000000000002EA9                 mov     rdi, rax        ; s
.text:0000000000002EAC                 call    _fputs_unlocked
.text:0000000000002EB1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002EB8                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002EBF                 mov     edx, 5          ; category
.text:0000000000002EC4                 xor     edi, edi        ; domainname
.text:0000000000002EC6                 call    _dcgettext
.text:0000000000002ECB                 mov     rsi, rbx        ; stream
.text:0000000000002ECE                 mov     rdi, rax        ; s
.text:0000000000002ED1                 lea     rbx, aShuf      ; "shuf"
.text:0000000000002ED8                 call    _fputs_unlocked
.text:0000000000002EDD                 lea     rax, asc_9109   ; "["
.text:0000000000002EE4                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002EEB                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002EF4                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002EFD                 mov     rdx, rsp
.text:0000000000002F00                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002F04                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002F0B                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002F10                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002F17                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002F1C                 lea     rax, domainname ; "coreutils"
.text:0000000000002F23                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002F28                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002F2F                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002F34                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002F3B                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002F40                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002F45                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002F4C                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002F51                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002F58                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002F5D                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002F62                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002F67                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002F6C                 nop     dword ptr [rax+00h]
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: usage+23D↓j
.text:0000000000002F70                 add     rdx, 10h
.text:0000000000002F74                 mov     rdi, [rdx]
.text:0000000000002F77                 test    rdi, rdi
.text:0000000000002F7A                 jz      short loc_2F8F
.text:0000000000002F7C                 mov     ecx, 5
.text:0000000000002F81                 mov     rsi, rbx
.text:0000000000002F84                 repe cmpsb
.text:0000000000002F86                 setnbe  al
.text:0000000000002F89                 sbb     al, 0
.text:0000000000002F8B                 test    al, al
.text:0000000000002F8D                 jnz     short loc_2F70
.text:0000000000002F8F
.text:0000000000002F8F loc_2F8F:                               ; CODE XREF: usage+22A↑j
.text:0000000000002F8F                 mov     r12, [rdx+8]
.text:0000000000002F93                 xor     edi, edi        ; domainname
.text:0000000000002F95                 mov     edx, 5          ; category
.text:0000000000002F9A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002FA1                 test    r12, r12
.text:0000000000002FA4                 jz      loc_306B
.text:0000000000002FAA                 call    _dcgettext
.text:0000000000002FAF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002FB6                 lea     rdx, unk_917F
.text:0000000000002FBD                 mov     rsi, rax
.text:0000000000002FC0                 mov     edi, 1
.text:0000000000002FC5                 xor     eax, eax
.text:0000000000002FC7                 call    ___printf_chk
.text:0000000000002FCC                 xor     esi, esi        ; locale
.text:0000000000002FCE                 mov     edi, 5          ; category
.text:0000000000002FD3                 call    _setlocale
.text:0000000000002FD8                 test    rax, rax
.text:0000000000002FDB                 jz      short loc_2FF9
.text:0000000000002FDD                 lea     rsi, s2         ; "en_"
.text:0000000000002FE4                 mov     edx, 3          ; n
.text:0000000000002FE9                 mov     rdi, rax        ; s1
.text:0000000000002FEC                 call    _strncmp
.text:0000000000002FF1                 test    eax, eax
.text:0000000000002FF3                 jnz     loc_3100
.text:0000000000002FF9
.text:0000000000002FF9 loc_2FF9:                               ; CODE XREF: usage+28B↑j
.text:0000000000002FF9                                         ; usage+3D5↓j
.text:0000000000002FF9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003000                 xor     edi, edi        ; domainname
.text:0000000000003002                 mov     edx, 5          ; category
.text:0000000000003007                 call    _dcgettext
.text:000000000000300C                 lea     rcx, aShuf      ; "shuf"
.text:0000000000003013                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000301A                 mov     rsi, rax
.text:000000000000301D                 mov     edi, 1
.text:0000000000003022                 xor     eax, eax
.text:0000000000003024                 call    ___printf_chk
.text:0000000000003029                 cmp     r12, rbx
.text:000000000000302C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003033                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000303A                 cmovz   rbx, rcx
.text:000000000000303E
.text:000000000000303E loc_303E:                               ; CODE XREF: usage+3A4↓j
.text:000000000000303E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003045                 xor     edi, edi        ; domainname
.text:0000000000003047                 mov     edx, 5          ; category
.text:000000000000304C                 call    _dcgettext
.text:0000000000003051                 mov     rcx, rbx
.text:0000000000003054                 mov     rsi, rax
.text:0000000000003057                 mov     rdx, r12
.text:000000000000305A                 mov     edi, 1
.text:000000000000305F                 xor     eax, eax
.text:0000000000003061                 call    ___printf_chk
.text:0000000000003066                 jmp     loc_2DA6
.text:000000000000306B ; ---------------------------------------------------------------------------
.text:000000000000306B
.text:000000000000306B loc_306B:                               ; CODE XREF: usage+254↑j
.text:000000000000306B                 call    _dcgettext
.text:0000000000003070                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003077                 lea     rdx, unk_917F
.text:000000000000307E                 mov     rsi, rax
.text:0000000000003081                 mov     edi, 1
.text:0000000000003086                 xor     eax, eax
.text:0000000000003088                 call    ___printf_chk
.text:000000000000308D                 xor     esi, esi        ; locale
.text:000000000000308F                 mov     edi, 5          ; category
.text:0000000000003094                 call    _setlocale
.text:0000000000003099                 test    rax, rax
.text:000000000000309C                 jz      short loc_30B6
.text:000000000000309E                 lea     rsi, s2         ; "en_"
.text:00000000000030A5                 mov     edx, 3          ; n
.text:00000000000030AA                 mov     rdi, rax        ; s1
.text:00000000000030AD                 call    _strncmp
.text:00000000000030B2                 test    eax, eax
.text:00000000000030B4                 jnz     short loc_30F9
.text:00000000000030B6
.text:00000000000030B6 loc_30B6:                               ; CODE XREF: usage+34C↑j
.text:00000000000030B6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000030BD                 mov     edx, 5          ; category
.text:00000000000030C2                 xor     edi, edi        ; domainname
.text:00000000000030C4                 lea     r12, aShuf      ; "shuf"
.text:00000000000030CB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000030D2                 call    _dcgettext
.text:00000000000030D7                 lea     rcx, aShuf      ; "shuf"
.text:00000000000030DE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000030E5                 mov     rsi, rax
.text:00000000000030E8                 mov     edi, 1
.text:00000000000030ED                 xor     eax, eax
.text:00000000000030EF                 call    ___printf_chk
.text:00000000000030F4                 jmp     loc_303E
.text:00000000000030F9 ; ---------------------------------------------------------------------------
.text:00000000000030F9
.text:00000000000030F9 loc_30F9:                               ; CODE XREF: usage+364↑j
.text:00000000000030F9                 lea     r12, aShuf      ; "shuf"
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: usage+2A3↑j
.text:0000000000003100                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000003107                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000310E                 xor     edi, edi        ; domainname
.text:0000000000003110                 mov     edx, 5          ; category
.text:0000000000003115                 call    _dcgettext
.text:000000000000311A                 mov     rsi, r13        ; stream
.text:000000000000311D                 mov     rdi, rax        ; s
.text:0000000000003120                 call    _fputs_unlocked
.text:0000000000003125                 jmp     loc_2FF9
.text:0000000000003125 ; } // starts at 2D50
.text:0000000000003125 usage           endp
.text:0000000000003125
.text:0000000000003125 ; ---------------------------------------------------------------------------
.text:000000000000312A                 align 10h
.text:0000000000003130
.text:0000000000003130 ; =============== S U B R O U T I N E =======================================
.text:0000000000003130
.text:0000000000003130
.text:0000000000003130                 public close_stdout_set_file_name
.text:0000000000003130 close_stdout_set_file_name proc near
.text:0000000000003130 ; __unwind {
.text:0000000000003130                 mov     cs:file_name, rdi
.text:0000000000003137                 retn
.text:0000000000003137 ; } // starts at 3130
.text:0000000000003137 close_stdout_set_file_name endp
.text:0000000000003137
.text:0000000000003137 ; ---------------------------------------------------------------------------
.text:0000000000003138                 align 20h
.text:0000000000003140
.text:0000000000003140 ; =============== S U B R O U T I N E =======================================
.text:0000000000003140
.text:0000000000003140
.text:0000000000003140                 public close_stdout_set_ignore_EPIPE
.text:0000000000003140 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003140 ; __unwind {
.text:0000000000003140                 mov     cs:ignore_EPIPE, dil
.text:0000000000003147                 retn
.text:0000000000003147 ; } // starts at 3140
.text:0000000000003147 close_stdout_set_ignore_EPIPE endp
.text:0000000000003147
.text:0000000000003147 ; ---------------------------------------------------------------------------
.text:0000000000003148                 align 10h
.text:0000000000003150
.text:0000000000003150 ; =============== S U B R O U T I N E =======================================
.text:0000000000003150
.text:0000000000003150 ; Attributes: info_from_lumina
.text:0000000000003150
.text:0000000000003150 ; void __cdecl close_stdout()
.text:0000000000003150                 public close_stdout
.text:0000000000003150 close_stdout    proc near               ; DATA XREF: main+71↑o
.text:0000000000003150 ; __unwind {
.text:0000000000003150                 push    rbp
.text:0000000000003151                 push    rbx
.text:0000000000003152                 sub     rsp, 8
.text:0000000000003156                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000315D                 call    close_stream
.text:0000000000003162                 test    eax, eax
.text:0000000000003164                 jz      short loc_317C
.text:0000000000003166                 call    ___errno_location
.text:000000000000316B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003172                 mov     rbx, rax
.text:0000000000003175                 jz      short loc_3193
.text:0000000000003177                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000317A                 jnz     short loc_3193
.text:000000000000317C
.text:000000000000317C loc_317C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000317C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003183                 call    close_stream
.text:0000000000003188                 test    eax, eax
.text:000000000000318A                 jnz     short loc_31D2
.text:000000000000318C                 add     rsp, 8
.text:0000000000003190                 pop     rbx
.text:0000000000003191                 pop     rbp
.text:0000000000003192                 retn
.text:0000000000003193 ; ---------------------------------------------------------------------------
.text:0000000000003193
.text:0000000000003193 loc_3193:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003193                                         ; close_stdout+2A↑j
.text:0000000000003193                 lea     rsi, aWriteError ; "write error"
.text:000000000000319A                 xor     edi, edi        ; domainname
.text:000000000000319C                 mov     edx, 5          ; category
.text:00000000000031A1                 call    _dcgettext
.text:00000000000031A6                 mov     rdi, cs:file_name
.text:00000000000031AD                 mov     rbp, rax
.text:00000000000031B0                 test    rdi, rdi
.text:00000000000031B3                 jz      short loc_31DD
.text:00000000000031B5                 call    quotearg_colon
.text:00000000000031BA                 mov     esi, [rbx]      ; errnum
.text:00000000000031BC                 lea     rdx, format     ; "%s: %s"
.text:00000000000031C3                 mov     rcx, rax
.text:00000000000031C6                 mov     r8, rbp
.text:00000000000031C9                 xor     edi, edi        ; status
.text:00000000000031CB                 xor     eax, eax
.text:00000000000031CD                 call    _error
.text:00000000000031D2
.text:00000000000031D2 loc_31D2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000031D2                                         ; close_stdout+A2↓j
.text:00000000000031D2                 mov     edi, cs:exit_failure ; status
.text:00000000000031D8                 call    __exit
.text:00000000000031DD ; ---------------------------------------------------------------------------
.text:00000000000031DD
.text:00000000000031DD loc_31DD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000031DD                 mov     esi, [rbx]      ; errnum
.text:00000000000031DF                 lea     rdx, format+4   ; format
.text:00000000000031E6                 mov     rcx, rax
.text:00000000000031E9                 xor     edi, edi        ; status
.text:00000000000031EB                 xor     eax, eax
.text:00000000000031ED                 call    _error
.text:00000000000031F2                 jmp     short loc_31D2
.text:00000000000031F2 ; } // starts at 3150
.text:00000000000031F2 close_stdout    endp
.text:00000000000031F2
.text:00000000000031F2 ; ---------------------------------------------------------------------------
.text:00000000000031F4                 align 20h
.text:0000000000003200
.text:0000000000003200 ; =============== S U B R O U T I N E =======================================
.text:0000000000003200
.text:0000000000003200
.text:0000000000003200 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000003200                 public fdadvise
.text:0000000000003200 fdadvise        proc near
.text:0000000000003200 ; __unwind {
.text:0000000000003200                 jmp     _posix_fadvise
.text:0000000000003200 ; } // starts at 3200
.text:0000000000003200 fdadvise        endp
.text:0000000000003200
.text:0000000000003200 ; ---------------------------------------------------------------------------
.text:0000000000003205                 align 10h
.text:0000000000003210
.text:0000000000003210 ; =============== S U B R O U T I N E =======================================
.text:0000000000003210
.text:0000000000003210
.text:0000000000003210                 public fadvise
.text:0000000000003210 fadvise         proc near               ; CODE XREF: main+445↑p
.text:0000000000003210                                         ; main+860↑p ...
.text:0000000000003210 ; __unwind {
.text:0000000000003210                 test    rdi, rdi
.text:0000000000003213                 jz      short locret_3230
.text:0000000000003215                 push    rbx
.text:0000000000003216                 mov     ebx, esi
.text:0000000000003218                 call    _fileno
.text:000000000000321D                 mov     ecx, ebx        ; advise
.text:000000000000321F                 xor     edx, edx        ; len
.text:0000000000003221                 xor     esi, esi        ; offset
.text:0000000000003223                 pop     rbx
.text:0000000000003224                 mov     edi, eax        ; fd
.text:0000000000003226                 jmp     _posix_fadvise
.text:0000000000003226 ; ---------------------------------------------------------------------------
.text:000000000000322B                 align 10h
.text:0000000000003230
.text:0000000000003230 locret_3230:                            ; CODE XREF: fadvise+3↑j
.text:0000000000003230                 rep retn
.text:0000000000003230 ; } // starts at 3210
.text:0000000000003230 fadvise         endp
.text:0000000000003230
.text:0000000000003230 ; ---------------------------------------------------------------------------
.text:0000000000003232                 align 20h
.text:0000000000003240
.text:0000000000003240 ; =============== S U B R O U T I N E =======================================
.text:0000000000003240
.text:0000000000003240
.text:0000000000003240 protect_fd      proc near               ; CODE XREF: freopen_safer+83↓p
.text:0000000000003240                                         ; freopen_safer+A1↓p ...
.text:0000000000003240 ; __unwind {
.text:0000000000003240                 push    rbp
.text:0000000000003241                 push    rbx
.text:0000000000003242                 mov     ebp, edi
.text:0000000000003244                 lea     rdi, file       ; "/dev/null"
.text:000000000000324B                 xor     esi, esi        ; oflag
.text:000000000000324D                 xor     eax, eax
.text:000000000000324F                 sub     rsp, 8
.text:0000000000003253                 mov     ebx, 1
.text:0000000000003258                 call    _open
.text:000000000000325D                 cmp     ebp, eax
.text:000000000000325F                 jz      short loc_3279
.text:0000000000003261                 xor     ebx, ebx
.text:0000000000003263                 test    eax, eax
.text:0000000000003265                 js      short loc_3279
.text:0000000000003267                 mov     edi, eax        ; fd
.text:0000000000003269                 call    _close
.text:000000000000326E                 call    ___errno_location
.text:0000000000003273                 mov     dword ptr [rax], 9
.text:0000000000003279
.text:0000000000003279 loc_3279:                               ; CODE XREF: protect_fd+1F↑j
.text:0000000000003279                                         ; protect_fd+25↑j
.text:0000000000003279                 add     rsp, 8
.text:000000000000327D                 mov     eax, ebx
.text:000000000000327F                 pop     rbx
.text:0000000000003280                 pop     rbp
.text:0000000000003281                 retn
.text:0000000000003281 ; } // starts at 3240
.text:0000000000003281 protect_fd      endp
.text:0000000000003281
.text:0000000000003281 ; ---------------------------------------------------------------------------
.text:0000000000003282                 align 10h
.text:0000000000003290
.text:0000000000003290 ; =============== S U B R O U T I N E =======================================
.text:0000000000003290
.text:0000000000003290
.text:0000000000003290                 public freopen_safer
.text:0000000000003290 freopen_safer   proc near               ; CODE XREF: main+76C↑p
.text:0000000000003290                                         ; main+AE2↑p ...
.text:0000000000003290
.text:0000000000003290 filename        = qword ptr -40h
.text:0000000000003290
.text:0000000000003290 ; __unwind {
.text:0000000000003290                 push    r15
.text:0000000000003292                 push    r14
.text:0000000000003294                 mov     r15, rsi
.text:0000000000003297                 push    r13
.text:0000000000003299                 push    r12
.text:000000000000329B                 mov     r12, rdx
.text:000000000000329E                 push    rbp
.text:000000000000329F                 push    rbx
.text:00000000000032A0                 sub     rsp, 18h
.text:00000000000032A4                 mov     [rsp+48h+filename], rdi
.text:00000000000032A9                 mov     rdi, rdx        ; stream
.text:00000000000032AC                 call    _fileno
.text:00000000000032B1                 mov     ebx, eax
.text:00000000000032B3                 call    ___errno_location
.text:00000000000032B8                 cmp     ebx, 1
.text:00000000000032BB                 mov     r14, rax
.text:00000000000032BE                 jz      loc_3420
.text:00000000000032C4                 cmp     ebx, 2
.text:00000000000032C7                 jz      loc_3410
.text:00000000000032CD                 test    ebx, ebx
.text:00000000000032CF                 jz      loc_3388
.text:00000000000032D5                 mov     esi, 2          ; fd2
.text:00000000000032DA                 mov     edi, 2          ; fd
.text:00000000000032DF                 call    _dup2
.text:00000000000032E4                 cmp     eax, 2
.text:00000000000032E7                 setnz   bl
.text:00000000000032EA
.text:00000000000032EA loc_32EA:                               ; CODE XREF: freopen_safer+182↓j
.text:00000000000032EA                 mov     esi, 1          ; fd2
.text:00000000000032EF                 mov     edi, 1          ; fd
.text:00000000000032F4                 call    _dup2
.text:00000000000032F9                 cmp     eax, 1
.text:00000000000032FC                 setnz   bpl
.text:0000000000003300
.text:0000000000003300 loc_3300:                               ; CODE XREF: freopen_safer+194↓j
.text:0000000000003300                 xor     esi, esi        ; fd2
.text:0000000000003302                 xor     edi, edi        ; fd
.text:0000000000003304                 call    _dup2
.text:0000000000003309                 test    eax, eax
.text:000000000000330B                 jz      loc_3398
.text:0000000000003311                 xor     edi, edi
.text:0000000000003313                 call    protect_fd
.text:0000000000003318                 test    al, al
.text:000000000000331A                 mov     r13d, eax
.text:000000000000331D                 jz      loc_3430
.text:0000000000003323                 test    bpl, bpl
.text:0000000000003326                 jnz     short loc_33A0
.text:0000000000003328
.text:0000000000003328 loc_3328:                               ; CODE XREF: freopen_safer+10E↓j
.text:0000000000003328                                         ; freopen_safer+11E↓j
.text:0000000000003328                 test    bl, bl
.text:000000000000332A                 jz      short loc_3340
.text:000000000000332C                 mov     edi, 2
.text:0000000000003331                 call    protect_fd
.text:0000000000003336                 test    al, al
.text:0000000000003338                 mov     ebx, eax
.text:000000000000333A                 jz      loc_33F0
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: freopen_safer+9A↑j
.text:0000000000003340                                         ; freopen_safer+FF↓j
.text:0000000000003340                 mov     rdi, [rsp+48h+filename] ; filename
.text:0000000000003345                 mov     rdx, r12        ; stream
.text:0000000000003348                 mov     rsi, r15        ; modes
.text:000000000000334B                 call    _freopen
.text:0000000000003350                 mov     r12, rax
.text:0000000000003353
.text:0000000000003353 loc_3353:                               ; CODE XREF: freopen_safer+1A9↓j
.text:0000000000003353                 test    bl, bl
.text:0000000000003355                 mov     r15d, [r14]
.text:0000000000003358                 jnz     loc_3400
.text:000000000000335E
.text:000000000000335E loc_335E:                               ; CODE XREF: freopen_safer+17A↓j
.text:000000000000335E                 test    bpl, bpl
.text:0000000000003361                 jnz     short loc_33D0
.text:0000000000003363                 test    r13b, r13b
.text:0000000000003366                 jnz     short loc_33DF
.text:0000000000003368
.text:0000000000003368 loc_3368:                               ; CODE XREF: freopen_safer+14D↓j
.text:0000000000003368                                         ; freopen_safer+156↓j
.text:0000000000003368                 test    r12, r12
.text:000000000000336B                 jnz     short loc_3370
.text:000000000000336D                 mov     [r14], r15d
.text:0000000000003370
.text:0000000000003370 loc_3370:                               ; CODE XREF: freopen_safer+DB↑j
.text:0000000000003370                 add     rsp, 18h
.text:0000000000003374                 mov     rax, r12
.text:0000000000003377                 pop     rbx
.text:0000000000003378                 pop     rbp
.text:0000000000003379                 pop     r12
.text:000000000000337B                 pop     r13
.text:000000000000337D                 pop     r14
.text:000000000000337F                 pop     r15
.text:0000000000003381                 retn
.text:0000000000003381 ; ---------------------------------------------------------------------------
.text:0000000000003382                 align 8
.text:0000000000003388
.text:0000000000003388 loc_3388:                               ; CODE XREF: freopen_safer+3F↑j
.text:0000000000003388                 xor     ebx, ebx
.text:000000000000338A                 xor     ebp, ebp
.text:000000000000338C                 xor     r13d, r13d
.text:000000000000338F                 jmp     short loc_3340
.text:000000000000338F ; ---------------------------------------------------------------------------
.text:0000000000003391                 align 8
.text:0000000000003398
.text:0000000000003398 loc_3398:                               ; CODE XREF: freopen_safer+7B↑j
.text:0000000000003398                 xor     r13d, r13d
.text:000000000000339B                 test    bpl, bpl
.text:000000000000339E                 jz      short loc_3328
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: freopen_safer+96↑j
.text:00000000000033A0                 mov     edi, 1
.text:00000000000033A5                 call    protect_fd
.text:00000000000033AA                 test    al, al
.text:00000000000033AC                 mov     ebp, eax
.text:00000000000033AE                 jnz     loc_3328
.text:00000000000033B4                 xor     r12d, r12d
.text:00000000000033B7                 test    bl, bl
.text:00000000000033B9                 mov     r15d, [r14]
.text:00000000000033BC                 jz      short loc_33D0
.text:00000000000033BE                 mov     edi, 2          ; fd
.text:00000000000033C3                 call    _close
.text:00000000000033C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: freopen_safer+D1↑j
.text:00000000000033D0                                         ; freopen_safer+12C↑j
.text:00000000000033D0                 mov     edi, 1          ; fd
.text:00000000000033D5                 call    _close
.text:00000000000033DA                 test    r13b, r13b
.text:00000000000033DD                 jz      short loc_3368
.text:00000000000033DF
.text:00000000000033DF loc_33DF:                               ; CODE XREF: freopen_safer+D6↑j
.text:00000000000033DF                 xor     edi, edi        ; fd
.text:00000000000033E1                 call    _close
.text:00000000000033E6                 jmp     short loc_3368
.text:00000000000033E6 ; ---------------------------------------------------------------------------
.text:00000000000033E8                 align 10h
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: freopen_safer+AA↑j
.text:00000000000033F0                 mov     r15d, [r14]
.text:00000000000033F3                 xor     r12d, r12d
.text:00000000000033F6                 db      2Eh
.text:00000000000033F6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: freopen_safer+C8↑j
.text:0000000000003400                 mov     edi, 2          ; fd
.text:0000000000003405                 call    _close
.text:000000000000340A                 jmp     loc_335E
.text:000000000000340A ; ---------------------------------------------------------------------------
.text:000000000000340F                 align 10h
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: freopen_safer+37↑j
.text:0000000000003410                 xor     ebx, ebx
.text:0000000000003412                 jmp     loc_32EA
.text:0000000000003412 ; ---------------------------------------------------------------------------
.text:0000000000003417                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: freopen_safer+2E↑j
.text:0000000000003420                 xor     ebx, ebx
.text:0000000000003422                 xor     ebp, ebp
.text:0000000000003424                 jmp     loc_3300
.text:0000000000003424 ; ---------------------------------------------------------------------------
.text:0000000000003429                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: freopen_safer+8D↑j
.text:0000000000003430                 mov     r13d, 1
.text:0000000000003436                 xor     r12d, r12d
.text:0000000000003439                 jmp     loc_3353
.text:0000000000003439 ; } // starts at 3290
.text:0000000000003439 freopen_safer   endp
.text:0000000000003439
.text:0000000000003439 ; ---------------------------------------------------------------------------
.text:000000000000343E                 align 20h
.text:0000000000003440
.text:0000000000003440 ; =============== S U B R O U T I N E =======================================
.text:0000000000003440
.text:0000000000003440
.text:0000000000003440                 public initbuffer
.text:0000000000003440 initbuffer      proc near               ; CODE XREF: main+A24↑p
.text:0000000000003440 ; __unwind {
.text:0000000000003440                 pxor    xmm0, xmm0
.text:0000000000003444                 mov     qword ptr [rdi+10h], 0
.text:000000000000344C                 movups  xmmword ptr [rdi], xmm0
.text:000000000000344F                 retn
.text:000000000000344F ; } // starts at 3440
.text:000000000000344F initbuffer      endp
.text:000000000000344F
.text:0000000000003450
.text:0000000000003450 ; =============== S U B R O U T I N E =======================================
.text:0000000000003450
.text:0000000000003450
.text:0000000000003450                 public readlinebuffer_delim
.text:0000000000003450 readlinebuffer_delim proc near          ; CODE XREF: main+4CB↑p
.text:0000000000003450                                         ; main+A77↑p ...
.text:0000000000003450
.text:0000000000003450 var_48          = qword ptr -48h
.text:0000000000003450 var_39          = byte ptr -39h
.text:0000000000003450
.text:0000000000003450 ; __unwind {
.text:0000000000003450                 push    r15
.text:0000000000003452                 push    r14
.text:0000000000003454                 push    r13
.text:0000000000003456                 push    r12
.text:0000000000003458                 push    rbp
.text:0000000000003459                 push    rbx
.text:000000000000345A                 sub     rsp, 18h
.text:000000000000345E                 mov     r13, [rdi+10h]
.text:0000000000003462                 mov     r8, [rdi]
.text:0000000000003465                 add     r8, r13
.text:0000000000003468                 test    byte ptr [rsi], 10h
.text:000000000000346B                 jnz     loc_3540
.text:0000000000003471                 mov     r14, rdi
.text:0000000000003474                 mov     rbp, rsi
.text:0000000000003477                 mov     rbx, r13
.text:000000000000347A                 movsx   r15d, dl
.text:000000000000347E                 jmp     short loc_348B
.text:0000000000003480 ; ---------------------------------------------------------------------------
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: readlinebuffer_delim+5A↓j
.text:0000000000003480                 cmp     r12d, r15d
.text:0000000000003483                 lea     rbx, [rsi+1]
.text:0000000000003487                 mov     [rsi], cl
.text:0000000000003489                 jz      short loc_34E6
.text:000000000000348B
.text:000000000000348B loc_348B:                               ; CODE XREF: readlinebuffer_delim+2E↑j
.text:000000000000348B                                         ; readlinebuffer_delim+94↓j
.text:000000000000348B                 mov     rcx, [rbp+8]
.text:000000000000348F                 cmp     rcx, [rbp+10h]
.text:0000000000003493                 jnb     short loc_3500
.text:0000000000003495                 lea     rax, [rcx+1]
.text:0000000000003499                 mov     [rbp+8], rax
.text:000000000000349D                 movzx   r12d, byte ptr [rcx]
.text:00000000000034A1                 mov     ecx, r12d
.text:00000000000034A4
.text:00000000000034A4 loc_34A4:                               ; CODE XREF: readlinebuffer_delim+E6↓j
.text:00000000000034A4                                         ; readlinebuffer_delim+103↓j
.text:00000000000034A4                 cmp     rbx, r8
.text:00000000000034A7                 mov     rsi, rbx
.text:00000000000034AA                 jnz     short loc_3480
.text:00000000000034AC                 mov     rbx, [r14]
.text:00000000000034AF                 mov     rsi, r14
.text:00000000000034B2                 mov     rdi, r13
.text:00000000000034B5                 mov     [rsp+48h+var_39], dl
.text:00000000000034B9                 mov     byte ptr [rsp+48h+var_48], cl
.text:00000000000034BC                 call    x2realloc
.text:00000000000034C1                 mov     r8, [r14]
.text:00000000000034C4                 movzx   ecx, byte ptr [rsp+48h+var_48]
.text:00000000000034C8                 lea     rsi, [rax+rbx]
.text:00000000000034CC                 mov     [r14+10h], rax
.text:00000000000034D0                 mov     r13, rax
.text:00000000000034D3                 movzx   edx, [rsp+48h+var_39]
.text:00000000000034D8                 lea     rbx, [rsi+1]
.text:00000000000034DC                 add     r8, rax
.text:00000000000034DF                 cmp     r12d, r15d
.text:00000000000034E2                 mov     [rsi], cl
.text:00000000000034E4                 jnz     short loc_348B
.text:00000000000034E6
.text:00000000000034E6 loc_34E6:                               ; CODE XREF: readlinebuffer_delim+39↑j
.text:00000000000034E6                                         ; readlinebuffer_delim+DF↓j
.text:00000000000034E6                 sub     rbx, r13
.text:00000000000034E9                 mov     rax, r14
.text:00000000000034EC                 mov     [r14+8], rbx
.text:00000000000034F0                 add     rsp, 18h
.text:00000000000034F4                 pop     rbx
.text:00000000000034F5                 pop     rbp
.text:00000000000034F6                 pop     r12
.text:00000000000034F8                 pop     r13
.text:00000000000034FA                 pop     r14
.text:00000000000034FC                 pop     r15
.text:00000000000034FE                 retn
.text:00000000000034FE ; ---------------------------------------------------------------------------
.text:00000000000034FF                 align 20h
.text:0000000000003500
.text:0000000000003500 loc_3500:                               ; CODE XREF: readlinebuffer_delim+43↑j
.text:0000000000003500                 mov     rdi, rbp        ; _IO_FILE *
.text:0000000000003503                 mov     [rsp+48h+var_39], dl
.text:0000000000003507                 mov     [rsp+48h+var_48], r8
.text:000000000000350B                 call    ___uflow
.text:0000000000003510                 cmp     eax, 0FFFFFFFFh
.text:0000000000003513                 mov     r12d, eax
.text:0000000000003516                 mov     r8, [rsp+48h+var_48]
.text:000000000000351A                 movzx   edx, [rsp+48h+var_39]
.text:000000000000351F                 jnz     short loc_3551
.text:0000000000003521                 cmp     r13, rbx
.text:0000000000003524                 jz      short loc_3540
.text:0000000000003526                 test    byte ptr [rbp+0], 20h
.text:000000000000352A                 jnz     short loc_3540
.text:000000000000352C                 cmp     [rbx-1], dl
.text:000000000000352F                 jz      short loc_34E6
.text:0000000000003531                 mov     r12d, r15d
.text:0000000000003534                 mov     ecx, edx
.text:0000000000003536                 jmp     loc_34A4
.text:0000000000003536 ; ---------------------------------------------------------------------------
.text:000000000000353B                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: readlinebuffer_delim+1B↑j
.text:0000000000003540                                         ; readlinebuffer_delim+D4↑j ...
.text:0000000000003540                 add     rsp, 18h
.text:0000000000003544                 xor     eax, eax
.text:0000000000003546                 pop     rbx
.text:0000000000003547                 pop     rbp
.text:0000000000003548                 pop     r12
.text:000000000000354A                 pop     r13
.text:000000000000354C                 pop     r14
.text:000000000000354E                 pop     r15
.text:0000000000003550                 retn
.text:0000000000003551 ; ---------------------------------------------------------------------------
.text:0000000000003551
.text:0000000000003551 loc_3551:                               ; CODE XREF: readlinebuffer_delim+CF↑j
.text:0000000000003551                 mov     ecx, eax
.text:0000000000003553                 jmp     loc_34A4
.text:0000000000003553 ; } // starts at 3450
.text:0000000000003553 readlinebuffer_delim endp
.text:0000000000003553
.text:0000000000003553 ; ---------------------------------------------------------------------------
.text:0000000000003558                 align 20h
.text:0000000000003560
.text:0000000000003560 ; =============== S U B R O U T I N E =======================================
.text:0000000000003560
.text:0000000000003560
.text:0000000000003560                 public readlinebuffer
.text:0000000000003560 readlinebuffer  proc near
.text:0000000000003560 ; __unwind {
.text:0000000000003560                 mov     edx, 0Ah
.text:0000000000003565                 jmp     readlinebuffer_delim
.text:0000000000003565 ; } // starts at 3560
.text:0000000000003565 readlinebuffer  endp
.text:0000000000003565
.text:0000000000003565 ; ---------------------------------------------------------------------------
.text:000000000000356A                 align 10h
.text:0000000000003570
.text:0000000000003570 ; =============== S U B R O U T I N E =======================================
.text:0000000000003570
.text:0000000000003570
.text:0000000000003570                 public freebuffer
.text:0000000000003570 freebuffer      proc near               ; CODE XREF: main+A97↑p
.text:0000000000003570 ; __unwind {
.text:0000000000003570                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000003574                 jmp     free
.text:0000000000003574 ; } // starts at 3570
.text:0000000000003574 freebuffer      endp
.text:0000000000003574
.text:0000000000003574 ; ---------------------------------------------------------------------------
.text:0000000000003579                 align 20h
.text:0000000000003580
.text:0000000000003580 ; =============== S U B R O U T I N E =======================================
.text:0000000000003580
.text:0000000000003580
.text:0000000000003580                 public set_program_name
.text:0000000000003580 set_program_name proc near              ; CODE XREF: main+3C↑p
.text:0000000000003580 ; __unwind {
.text:0000000000003580                 test    rdi, rdi
.text:0000000000003583                 push    rbx
.text:0000000000003584                 jz      short loc_35FD
.text:0000000000003586                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000358B                 mov     rbx, rdi
.text:000000000000358E                 call    _strrchr
.text:0000000000003593                 test    rax, rax
.text:0000000000003596                 jz      short loc_35ED
.text:0000000000003598                 lea     r8, [rax+1]
.text:000000000000359C                 mov     rdx, r8
.text:000000000000359F                 sub     rdx, rbx
.text:00000000000035A2                 cmp     rdx, 6
.text:00000000000035A6                 jle     short loc_35ED
.text:00000000000035A8                 lea     rsi, [rax-6]
.text:00000000000035AC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000035B3                 mov     ecx, 7
.text:00000000000035B8                 repe cmpsb
.text:00000000000035BA                 setnbe  dl
.text:00000000000035BD                 sbb     dl, 0
.text:00000000000035C0                 test    dl, dl
.text:00000000000035C2                 jnz     short loc_35ED
.text:00000000000035C4                 lea     rdi, aLt        ; "lt-"
.text:00000000000035CB                 mov     ecx, 3
.text:00000000000035D0                 mov     rsi, r8
.text:00000000000035D3                 mov     rbx, r8
.text:00000000000035D6                 repe cmpsb
.text:00000000000035D8                 setnbe  dl
.text:00000000000035DB                 sbb     dl, 0
.text:00000000000035DE                 test    dl, dl
.text:00000000000035E0                 jnz     short loc_35ED
.text:00000000000035E2                 lea     rbx, [rax+4]
.text:00000000000035E6                 mov     cs:__bss_start, rbx
.text:00000000000035ED
.text:00000000000035ED loc_35ED:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000035ED                                         ; set_program_name+26↑j ...
.text:00000000000035ED                 mov     cs:program_name, rbx
.text:00000000000035F4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000035FB                 pop     rbx
.text:00000000000035FC                 retn
.text:00000000000035FD ; ---------------------------------------------------------------------------
.text:00000000000035FD
.text:00000000000035FD loc_35FD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000035FD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003604                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000360B                 mov     edx, 37h ; '7'  ; n
.text:0000000000003610                 mov     esi, 1          ; size
.text:0000000000003615                 call    _fwrite
.text:000000000000361A                 call    _abort
.text:000000000000361A ; } // starts at 3580
.text:000000000000361A set_program_name endp
.text:000000000000361A
.text:000000000000361A ; ---------------------------------------------------------------------------
.text:000000000000361F                 align 20h
.text:0000000000003620
.text:0000000000003620 ; =============== S U B R O U T I N E =======================================
.text:0000000000003620
.text:0000000000003620 ; Attributes: info_from_lumina
.text:0000000000003620
.text:0000000000003620 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000003620 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000003620                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000003620 ; __unwind {
.text:0000000000003620                 push    rbp
.text:0000000000003621                 push    rbx
.text:0000000000003622                 mov     rbp, rdi
.text:0000000000003625                 mov     ebx, esi
.text:0000000000003627                 sub     rsp, 8
.text:000000000000362B                 call    locale_charset
.text:0000000000003630                 movzx   edx, byte ptr [rax]
.text:0000000000003633                 and     edx, 0FFFFFFDFh
.text:0000000000003636                 cmp     dl, 55h ; 'U'
.text:0000000000003639                 jz      short loc_36B0
.text:000000000000363B                 cmp     dl, 47h ; 'G'
.text:000000000000363E                 jz      short loc_3660
.text:0000000000003640
.text:0000000000003640 loc_3640:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000003640                                         ; gettext_quote+50↓j ...
.text:0000000000003640                 lea     rax, unk_97BB
.text:0000000000003647                 lea     rdx, asc_97BD   ; "'"
.text:000000000000364E                 cmp     ebx, 9
.text:0000000000003651                 cmovnz  rax, rdx
.text:0000000000003655                 add     rsp, 8
.text:0000000000003659                 pop     rbx
.text:000000000000365A                 pop     rbp
.text:000000000000365B                 retn
.text:000000000000365B ; ---------------------------------------------------------------------------
.text:000000000000365C                 align 20h
.text:0000000000003660
.text:0000000000003660 loc_3660:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003660                 movzx   edx, byte ptr [rax+1]
.text:0000000000003664                 and     edx, 0FFFFFFDFh
.text:0000000000003667                 cmp     dl, 42h ; 'B'
.text:000000000000366A                 jnz     short loc_3640
.text:000000000000366C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003670                 jnz     short loc_3640
.text:0000000000003672                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003676                 jnz     short loc_3640
.text:0000000000003678                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000367C                 jnz     short loc_3640
.text:000000000000367E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003682                 jnz     short loc_3640
.text:0000000000003684                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003688                 jnz     short loc_3640
.text:000000000000368A                 cmp     byte ptr [rax+7], 0
.text:000000000000368E                 jnz     short loc_3640
.text:0000000000003690                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003694                 lea     rax, unk_97B4
.text:000000000000369B                 lea     rdx, unk_97B8
.text:00000000000036A2                 cmovnz  rax, rdx
.text:00000000000036A6                 add     rsp, 8
.text:00000000000036AA                 pop     rbx
.text:00000000000036AB                 pop     rbp
.text:00000000000036AC                 retn
.text:00000000000036AC ; ---------------------------------------------------------------------------
.text:00000000000036AD                 align 10h
.text:00000000000036B0
.text:00000000000036B0 loc_36B0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000036B0                 movzx   edx, byte ptr [rax+1]
.text:00000000000036B4                 and     edx, 0FFFFFFDFh
.text:00000000000036B7                 cmp     dl, 54h ; 'T'
.text:00000000000036BA                 jnz     short loc_3640
.text:00000000000036BC                 movzx   edx, byte ptr [rax+2]
.text:00000000000036C0                 and     edx, 0FFFFFFDFh
.text:00000000000036C3                 cmp     dl, 46h ; 'F'
.text:00000000000036C6                 jnz     loc_3640
.text:00000000000036CC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000036D0                 jnz     loc_3640
.text:00000000000036D6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000036DA                 jnz     loc_3640
.text:00000000000036E0                 cmp     byte ptr [rax+5], 0
.text:00000000000036E4                 jnz     loc_3640
.text:00000000000036EA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000036EE                 lea     rax, unk_97AC
.text:00000000000036F5                 lea     rdx, unk_97B0
.text:00000000000036FC                 cmovnz  rax, rdx
.text:0000000000003700                 add     rsp, 8
.text:0000000000003704                 pop     rbx
.text:0000000000003705                 pop     rbp
.text:0000000000003706                 retn
.text:0000000000003706 ; } // starts at 3620
.text:0000000000003706 gettext_quote   endp
.text:0000000000003706
.text:0000000000003706 ; ---------------------------------------------------------------------------
.text:0000000000003707                 align 10h
.text:0000000000003710
.text:0000000000003710 ; =============== S U B R O U T I N E =======================================
.text:0000000000003710
.text:0000000000003710 ; Attributes: info_from_lumina
.text:0000000000003710
.text:0000000000003710 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003710 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003710                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003710
.text:0000000000003710 var_E0          = dword ptr -0E0h
.text:0000000000003710 var_DB          = byte ptr -0DBh
.text:0000000000003710 var_DA          = byte ptr -0DAh
.text:0000000000003710 var_D9          = byte ptr -0D9h
.text:0000000000003710 s               = qword ptr -0D8h
.text:0000000000003710 n               = qword ptr -0D0h
.text:0000000000003710 var_C8          = qword ptr -0C8h
.text:0000000000003710 ps              = qword ptr -0C0h
.text:0000000000003710 var_B8          = qword ptr -0B8h
.text:0000000000003710 var_B0          = qword ptr -0B0h
.text:0000000000003710 var_A8          = qword ptr -0A8h
.text:0000000000003710 s2              = qword ptr -0A0h
.text:0000000000003710 var_98          = qword ptr -98h
.text:0000000000003710 var_90          = qword ptr -90h
.text:0000000000003710 var_88          = qword ptr -88h
.text:0000000000003710 var_80          = qword ptr -80h
.text:0000000000003710 var_78          = qword ptr -78h
.text:0000000000003710 var_70          = dword ptr -70h
.text:0000000000003710 var_6C          = byte ptr -6Ch
.text:0000000000003710 var_6B          = byte ptr -6Bh
.text:0000000000003710 var_6A          = byte ptr -6Ah
.text:0000000000003710 var_69          = byte ptr -69h
.text:0000000000003710 var_68          = qword ptr -68h
.text:0000000000003710 var_60          = qword ptr -60h
.text:0000000000003710 wc              = dword ptr -4Ch
.text:0000000000003710 var_48          = qword ptr -48h
.text:0000000000003710 var_40          = qword ptr -40h
.text:0000000000003710 arg_0           = qword ptr  8
.text:0000000000003710 arg_8           = qword ptr  10h
.text:0000000000003710 arg_10          = qword ptr  18h
.text:0000000000003710
.text:0000000000003710 ; __unwind {
.text:0000000000003710                 push    r15
.text:0000000000003712                 push    r14
.text:0000000000003714                 mov     r15d, r8d
.text:0000000000003717                 push    r13
.text:0000000000003719                 push    r12
.text:000000000000371B                 mov     r14, rdi
.text:000000000000371E                 push    rbp
.text:000000000000371F                 push    rbx
.text:0000000000003720                 mov     ebx, r9d
.text:0000000000003723                 mov     r13, rsi
.text:0000000000003726                 mov     rbp, rcx
.text:0000000000003729                 and     ebx, 2
.text:000000000000372C                 sub     rsp, 0B8h
.text:0000000000003733                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000373B                 mov     [rsp+0E8h+s], rdx
.text:0000000000003740                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003745                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000374A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000374F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003757                 mov     [rsp+0E8h+var_80], rax
.text:000000000000375C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003764                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003769                 mov     rax, fs:28h
.text:0000000000003772                 mov     [rsp+0E8h+var_40], rax
.text:000000000000377A                 xor     eax, eax
.text:000000000000377C                 call    ___ctype_get_mb_cur_max
.text:0000000000003781                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003785                 mov     [rsp+0E8h+var_90], rax
.text:000000000000378A                 ja      def_37A1        ; jumptable 00000000000121F1 default case
.text:0000000000003790                 lea     rcx, jpt_37A1
.text:0000000000003797                 mov     edx, r15d
.text:000000000000379A                 movsxd  rax, ds:(jpt_37A1 - 9820h)[rcx+rdx*4]
.text:000000000000379E                 add     rax, rcx
.text:00000000000037A1                 jmp     rax             ; switch jump
.text:00000000000037A3 ; ---------------------------------------------------------------------------
.text:00000000000037A3
.text:00000000000037A3 loc_37A3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000037A3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000037A3                                         ; DATA XREF: ...
.text:00000000000037A3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000037A8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000037AD                 xor     r12d, r12d
.text:00000000000037B0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000037B9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000037BE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000037C3
.text:00000000000037C3 loc_37C3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000037C3                 lea     rax, asc_97BD   ; "'"
.text:00000000000037CA                 mov     [rsp+0E8h+n], 1
.text:00000000000037D3                 xor     r15d, r15d
.text:00000000000037D6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000037DE                 mov     [rsp+0E8h+s2], rax
.text:00000000000037E3
.text:00000000000037E3 loc_37E3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000037E3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000037E3                 xor     r11d, r11d
.text:00000000000037E6                 mov     rax, rbp
.text:00000000000037E9                 mov     r8d, r12d
.text:00000000000037EC                 mov     rbp, r11
.text:00000000000037EF                 mov     r11, rax
.text:00000000000037F2                 nop     word ptr [rax+rax+00h]
.text:00000000000037F8
.text:00000000000037F8 loc_37F8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000037F8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000037F8                 cmp     r11, rbp
.text:00000000000037FB                 setnz   r12b
.text:00000000000037FF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003803                 jnz     short loc_3812
.text:0000000000003805                 mov     rax, [rsp+0E8h+s]
.text:000000000000380A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000380E                 setnz   r12b
.text:0000000000003812
.text:0000000000003812 loc_3812:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003812                 test    r12b, r12b
.text:0000000000003815                 jz      loc_3E70
.text:000000000000381B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003820                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003825                 lea     r9, [rdi+rbp]
.text:0000000000003829                 setnz   al
.text:000000000000382C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003830                 mov     r10d, eax
.text:0000000000003833                 jz      loc_38E0
.text:0000000000003839                 mov     rax, [rsp+0E8h+n]
.text:000000000000383E                 test    rax, rax
.text:0000000000003841                 jz      loc_3C70
.text:0000000000003847                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000384B                 lea     rbx, [rbp+rax+0]
.text:0000000000003850                 jnz     short loc_3880
.text:0000000000003852                 cmp     rax, 1
.text:0000000000003856                 jbe     short loc_3880
.text:0000000000003858                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000385D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003862                 mov     [rsp+0E8h+ps], r9
.text:0000000000003867                 call    _strlen
.text:000000000000386C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003872                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003878                 mov     r11, rax
.text:000000000000387B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003880                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003880                 cmp     rbx, r11
.text:0000000000003883                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003888                 ja      loc_3E40
.text:000000000000388E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003893                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003898                 mov     rdi, r9         ; s1
.text:000000000000389B                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000038A0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000038A5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000038AA                 call    _memcmp
.text:00000000000038AF                 test    eax, eax
.text:00000000000038B1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000038B6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000038BC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000038C1                 jnz     loc_3E40
.text:00000000000038C7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000038CC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000038D2                 jnz     loc_4855
.text:00000000000038D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000038E0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000038E0                 movzx   ebx, byte ptr [r9]
.text:00000000000038E4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000038E7                 ja      def_38FE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000038ED                 lea     rcx, jpt_38FE
.text:00000000000038F4                 movzx   edx, bl
.text:00000000000038F7                 movsxd  rax, ds:(jpt_38FE - 984Ch)[rcx+rdx*4]
.text:00000000000038FB                 add     rax, rcx
.text:00000000000038FE                 jmp     rax             ; switch jump
.text:0000000000003900 ; ---------------------------------------------------------------------------
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003900                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003900                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003903
.text:0000000000003903 loc_3903:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003903                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003903                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003907                 setnz   al
.text:000000000000390A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000390E                 jnz     short loc_391C
.text:0000000000003910                 mov     rax, [rsp+0E8h+s]
.text:0000000000003915                 cmp     byte ptr [rax+1], 0
.text:0000000000003919                 setnz   al
.text:000000000000391C
.text:000000000000391C loc_391C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000391C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003921                 setz    dl
.text:0000000000003924                 test    al, al
.text:0000000000003926                 jz      loc_3B78
.text:000000000000392C
.text:000000000000392C loc_392C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000392C                 xor     r12d, r12d
.text:000000000000392F                 xor     eax, eax
.text:0000000000003931                 nop     dword ptr [rax+00000000h]
.text:0000000000003938
.text:0000000000003938 loc_3938:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003938                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003938                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000393D                 jnz     loc_3A52
.text:0000000000003943                 test    dl, dl
.text:0000000000003945                 jnz     loc_3A52
.text:000000000000394B
.text:000000000000394B loc_394B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000394B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003950                 test    rsi, rsi
.text:0000000000003953                 jz      short loc_3969
.text:0000000000003955                 mov     edx, ebx
.text:0000000000003957                 shr     dl, 5
.text:000000000000395A                 movzx   edx, dl
.text:000000000000395D                 mov     edx, [rsi+rdx*4]
.text:0000000000003960                 bt      edx, ebx
.text:0000000000003963                 jb      loc_3AB3
.text:0000000000003969
.text:0000000000003969 loc_3969:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003969                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003969                 test    r10b, r10b
.text:000000000000396C                 jnz     loc_3AB3
.text:0000000000003972                 xor     eax, 1
.text:0000000000003975                 add     rbp, 1
.text:0000000000003979                 and     eax, r8d
.text:000000000000397C
.text:000000000000397C loc_397C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000397C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000397C                 test    al, al
.text:000000000000397E                 jz      short loc_39A0
.text:0000000000003980                 cmp     r13, r15
.text:0000000000003983                 jbe     short loc_398A
.text:0000000000003985                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000398A
.text:000000000000398A loc_398A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000398A                 lea     rax, [r15+1]
.text:000000000000398E                 cmp     r13, rax
.text:0000000000003991                 jbe     short loc_3999
.text:0000000000003993                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003999
.text:0000000000003999 loc_3999:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003999                 add     r15, 2
.text:000000000000399D                 xor     r8d, r8d
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000039A0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000039A0                 cmp     r15, r13
.text:00000000000039A3                 jnb     short loc_39A9
.text:00000000000039A5                 mov     [r14+r15], bl
.text:00000000000039A9
.text:00000000000039A9 loc_39A9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000039A9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000039AE                 add     r15, 1
.text:00000000000039B2                 mov     eax, 0
.text:00000000000039B7                 test    r12b, r12b
.text:00000000000039BA                 cmovz   edi, eax
.text:00000000000039BD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000039C2                 jmp     loc_37F8
.text:00000000000039C2 ; ---------------------------------------------------------------------------
.text:00000000000039C7                 align 10h
.text:00000000000039D0
.text:00000000000039D0 loc_39D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000039D0                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:00000000000039D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000039D3
.text:00000000000039D3 loc_39D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039D3                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:00000000000039D3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000039D7                 cmp     eax, 2
.text:00000000000039DA                 jz      loc_3F98
.text:00000000000039E0                 cmp     eax, 5
.text:00000000000039E3                 jz      loc_3F58
.text:00000000000039E9                 cmp     eax, 2
.text:00000000000039EC                 mov     ebx, 3Fh ; '?'
.text:00000000000039F1                 setz    dl
.text:00000000000039F4                 xor     r12d, r12d
.text:00000000000039F7                 xor     eax, eax
.text:00000000000039F9                 jmp     loc_3938
.text:00000000000039F9 ; ---------------------------------------------------------------------------
.text:00000000000039FE                 align 20h
.text:0000000000003A00
.text:0000000000003A00 loc_3A00:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003A00                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003A00                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003A03
.text:0000000000003A03 loc_3A03:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A03                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003A03                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003A08                 jz      loc_3F10
.text:0000000000003A0E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003A13                 xor     edx, edx
.text:0000000000003A15                 xor     eax, eax
.text:0000000000003A17                 mov     ebx, 27h ; '''
.text:0000000000003A1C                 jmp     loc_3938
.text:0000000000003A1C ; ---------------------------------------------------------------------------
.text:0000000000003A21                 align 8
.text:0000000000003A28
.text:0000000000003A28 loc_3A28:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A28                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003A28                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000003A2D                 mov     ebx, 74h ; 't'
.text:0000000000003A32
.text:0000000000003A32 loc_3A32:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003A32                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003A32                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003A37                 setz    al
.text:0000000000003A3A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003A3E                 jnz     loc_3B8E
.text:0000000000003A44
.text:0000000000003A44 loc_3A44:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003A44                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003A44                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003A49                 jnz     short loc_3AB0
.text:0000000000003A4B
.text:0000000000003A4B loc_3A4B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000003A4B                 mov     ebx, edx
.text:0000000000003A4D                 xor     r12d, r12d
.text:0000000000003A50                 xor     eax, eax
.text:0000000000003A52
.text:0000000000003A52 loc_3A52:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003A52                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003A52                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A57                 jnz     loc_394B
.text:0000000000003A5D                 jmp     loc_3969
.text:0000000000003A5D ; ---------------------------------------------------------------------------
.text:0000000000003A62                 align 8
.text:0000000000003A68
.text:0000000000003A68 loc_3A68:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A68                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003A68                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000003A6D                 mov     ebx, 62h ; 'b'
.text:0000000000003A72                 jmp     short loc_3A44
.text:0000000000003A72 ; ---------------------------------------------------------------------------
.text:0000000000003A74                 align 8
.text:0000000000003A78
.text:0000000000003A78 loc_3A78:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A78                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003A78                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000003A7D                 jz      loc_3E50
.text:0000000000003A83                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003A88                 jz      loc_3CA0
.text:0000000000003A8E
.text:0000000000003A8E loc_3A8E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000003A8E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A93                 jz      loc_3CA0
.text:0000000000003A99                 cmp     [rsp+0E8h+n], 0
.text:0000000000003A9F                 jnz     loc_3E5B
.text:0000000000003AA5                 mov     ebx, 5Ch ; '\'
.text:0000000000003AAA                 nop     word ptr [rax+rax+00h]
.text:0000000000003AB0
.text:0000000000003AB0 loc_3AB0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003AB0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003AB0                 xor     r12d, r12d
.text:0000000000003AB3
.text:0000000000003AB3 loc_3AB3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003AB3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003AB3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003AB8                 setz    dl
.text:0000000000003ABB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003AC0                 mov     eax, edx
.text:0000000000003AC2                 jnz     loc_4318
.text:0000000000003AC8                 mov     eax, r8d
.text:0000000000003ACB                 xor     eax, 1
.text:0000000000003ACE                 and     al, dl
.text:0000000000003AD0                 jz      short loc_3B01
.text:0000000000003AD2                 cmp     r13, r15
.text:0000000000003AD5                 jbe     short loc_3ADC
.text:0000000000003AD7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003ADC
.text:0000000000003ADC loc_3ADC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000003ADC                 lea     rdx, [r15+1]
.text:0000000000003AE0                 cmp     r13, rdx
.text:0000000000003AE3                 jbe     short loc_3AEB
.text:0000000000003AE5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003AEB
.text:0000000000003AEB loc_3AEB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000003AEB                 lea     rdx, [r15+2]
.text:0000000000003AEF                 cmp     r13, rdx
.text:0000000000003AF2                 jbe     short loc_3AFA
.text:0000000000003AF4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003AFA
.text:0000000000003AFA loc_3AFA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000003AFA                 add     r15, 3
.text:0000000000003AFE                 mov     r8d, eax
.text:0000000000003B01
.text:0000000000003B01 loc_3B01:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003B01                 cmp     r13, r15
.text:0000000000003B04                 jbe     short loc_3B0B
.text:0000000000003B06                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003B0B
.text:0000000000003B0B loc_3B0B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000003B0B                 add     r15, 1
.text:0000000000003B0F                 add     rbp, 1
.text:0000000000003B13                 jmp     loc_39A0
.text:0000000000003B13 ; ---------------------------------------------------------------------------
.text:0000000000003B18                 align 20h
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B20                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003B20                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003B25                 jnz     loc_3CF3
.text:0000000000003B2B                 xor     edx, edx
.text:0000000000003B2D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003B32                 jz      loc_3A4B
.text:0000000000003B38                 add     rbp, 1
.text:0000000000003B3C                 jmp     loc_37F8
.text:0000000000003B3C ; ---------------------------------------------------------------------------
.text:0000000000003B41                 align 8
.text:0000000000003B48
.text:0000000000003B48 loc_3B48:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B48                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003B48                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000003B4D                 setz    dl
.text:0000000000003B50                 xor     eax, eax
.text:0000000000003B52                 jmp     loc_3938
.text:0000000000003B52 ; ---------------------------------------------------------------------------
.text:0000000000003B57                 align 20h
.text:0000000000003B60
.text:0000000000003B60 loc_3B60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B60                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003B60                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003B65                 mov     ebx, 61h ; 'a'
.text:0000000000003B6A                 jmp     loc_3A44
.text:0000000000003B6A ; ---------------------------------------------------------------------------
.text:0000000000003B6F                 align 10h
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B70                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003B70                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003B75                 setz    dl
.text:0000000000003B78
.text:0000000000003B78 loc_3B78:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003B78                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003B78                 test    rbp, rbp
.text:0000000000003B7B                 jnz     loc_392C
.text:0000000000003B81
.text:0000000000003B81 loc_3B81:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003B81                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003B81                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003B86                 and     al, dl
.text:0000000000003B88                 jz      loc_3938
.text:0000000000003B8E
.text:0000000000003B8E loc_3B8E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000003B8E                 mov     rbp, r11
.text:0000000000003B91                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B99                 jmp     loc_4299
.text:0000000000003B99 ; ---------------------------------------------------------------------------
.text:0000000000003B9E                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003BA0                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003BA0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003BA5                 setz    dl
.text:0000000000003BA8                 xor     r12d, r12d
.text:0000000000003BAB                 jmp     short loc_3B81
.text:0000000000003BAB ; ---------------------------------------------------------------------------
.text:0000000000003BAD                 align 10h
.text:0000000000003BB0
.text:0000000000003BB0 loc_3BB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003BB0                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003BB0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003BB5                 mov     ebx, 20h ; ' '
.text:0000000000003BBA                 setz    dl
.text:0000000000003BBD                 jmp     short loc_3B81
.text:0000000000003BBD ; ---------------------------------------------------------------------------
.text:0000000000003BBF                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 loc_3BC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003BC0                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003BC0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003BC5                 mov     ebx, 72h ; 'r'
.text:0000000000003BCA                 jmp     loc_3A32
.text:0000000000003BCA ; ---------------------------------------------------------------------------
.text:0000000000003BCF                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 loc_3BD0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003BD0                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003BD0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003BD5                 mov     ebx, 66h ; 'f'
.text:0000000000003BDA                 jmp     loc_3A44
.text:0000000000003BDA ; ---------------------------------------------------------------------------
.text:0000000000003BDF                 align 20h
.text:0000000000003BE0
.text:0000000000003BE0 loc_3BE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003BE0                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003BE0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003BE5                 mov     ebx, 76h ; 'v'
.text:0000000000003BEA                 jmp     loc_3A44
.text:0000000000003BEA ; ---------------------------------------------------------------------------
.text:0000000000003BEF                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 loc_3BF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003BF0                                         ; DATA XREF: .rodata:jpt_38FE↓o
.text:0000000000003BF0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003BF5                 mov     ebx, 6Eh ; 'n'
.text:0000000000003BFA                 jmp     loc_3A32
.text:0000000000003BFA ; ---------------------------------------------------------------------------
.text:0000000000003BFF                 align 20h
.text:0000000000003C00
.text:0000000000003C00 def_3C8A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003C00                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003C00                                         ; DATA XREF: ...
.text:0000000000003C00                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003C03                 nop     dword ptr [rax+rax+00h]
.text:0000000000003C08
.text:0000000000003C08 def_38FE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003C08                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003C08                                         ; DATA XREF: ...
.text:0000000000003C08                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003C0E                 jnz     loc_3FB8
.text:0000000000003C14                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003C19                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000003C1E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003C23                 call    ___ctype_b_loc
.text:0000000000003C28                 mov     rcx, [rax]
.text:0000000000003C2B                 movzx   edx, bl
.text:0000000000003C2E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003C34                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003C3A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003C3F                 mov     edi, 1
.text:0000000000003C44                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003C48                 and     ax, 4000h
.text:0000000000003C4C                 setnz   r12b
.text:0000000000003C50                 setz    al
.text:0000000000003C53                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003C57
.text:0000000000003C57 loc_3C57:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003C57                 test    al, al
.text:0000000000003C59                 jnz     loc_45F1
.text:0000000000003C5F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C64                 setz    dl
.text:0000000000003C67                 jmp     loc_3938
.text:0000000000003C67 ; ---------------------------------------------------------------------------
.text:0000000000003C6C                 align 10h
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003C70                 movzx   ebx, byte ptr [r9]
.text:0000000000003C74                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003C77                 ja      short def_3C8A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003C79                 lea     rcx, jpt_3C8A
.text:0000000000003C80                 movzx   edx, bl
.text:0000000000003C83                 movsxd  rax, ds:(jpt_3C8A - 9A48h)[rcx+rdx*4]
.text:0000000000003C87                 add     rax, rcx
.text:0000000000003C8A                 jmp     rax             ; switch jump
.text:0000000000003C8A ; ---------------------------------------------------------------------------
.text:0000000000003C8C                 align 10h
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C90                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003C90                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003C93                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003C98                 jnz     loc_3A8E
.text:0000000000003C9E                 xchg    ax, ax
.text:0000000000003CA0
.text:0000000000003CA0 loc_3CA0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003CA0                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003CA0                 mov     edx, 5Ch ; '\'
.text:0000000000003CA5                 mov     ebx, 5Ch ; '\'
.text:0000000000003CAA                 jmp     loc_3A44
.text:0000000000003CAA ; ---------------------------------------------------------------------------
.text:0000000000003CAF                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 loc_3CB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003CB0                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003CB0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003CB5                 xor     r10d, r10d
.text:0000000000003CB8                 mov     ebx, 66h ; 'f'
.text:0000000000003CBD                 jmp     loc_3A44
.text:0000000000003CBD ; ---------------------------------------------------------------------------
.text:0000000000003CC2                 align 8
.text:0000000000003CC8
.text:0000000000003CC8 loc_3CC8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003CC8                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003CC8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000003CCD                 xor     r10d, r10d
.text:0000000000003CD0                 mov     ebx, 6Eh ; 'n'
.text:0000000000003CD5                 jmp     loc_3A32
.text:0000000000003CD5 ; ---------------------------------------------------------------------------
.text:0000000000003CDA                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 loc_3CE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003CE0                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003CE0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003CE5                 jmp     loc_3AB0
.text:0000000000003CE5 ; ---------------------------------------------------------------------------
.text:0000000000003CEA                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 loc_3CF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003CF0                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003CF0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003CF3
.text:0000000000003CF3 loc_3CF3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003CF3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003CF8                 setz    dl
.text:0000000000003CFB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003D00                 jnz     loc_489A
.text:0000000000003D06                 mov     eax, r8d
.text:0000000000003D09                 mov     rcx, r15
.text:0000000000003D0C                 xor     eax, 1
.text:0000000000003D0F                 and     al, dl
.text:0000000000003D11                 jz      short loc_3D40
.text:0000000000003D13                 cmp     r13, r15
.text:0000000000003D16                 jbe     short loc_3D1D
.text:0000000000003D18                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003D1D
.text:0000000000003D1D loc_3D1D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000003D1D                 lea     rcx, [r15+1]
.text:0000000000003D21                 cmp     r13, rcx
.text:0000000000003D24                 jbe     short loc_3D2C
.text:0000000000003D26                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003D2C
.text:0000000000003D2C loc_3D2C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000003D2C                 lea     rcx, [r15+2]
.text:0000000000003D30                 cmp     r13, rcx
.text:0000000000003D33                 ja      loc_4369
.text:0000000000003D39
.text:0000000000003D39 loc_3D39:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003D39                 lea     rcx, [r15+3]
.text:0000000000003D3D                 mov     r8d, eax
.text:0000000000003D40
.text:0000000000003D40 loc_3D40:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003D40                 cmp     r13, rcx
.text:0000000000003D43                 jbe     short loc_3D4A
.text:0000000000003D45                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000003D4A
.text:0000000000003D4A loc_3D4A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000003D4A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D4F                 lea     r15, [rcx+1]
.text:0000000000003D53                 jz      loc_4359
.text:0000000000003D59                 lea     rax, [rbp+1]
.text:0000000000003D5D                 cmp     rax, r11
.text:0000000000003D60                 jnb     short loc_3D7B
.text:0000000000003D62                 mov     rax, [rsp+0E8h+s]
.text:0000000000003D67                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000003D6C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003D70                 sub     eax, 30h ; '0'
.text:0000000000003D73                 cmp     al, 9
.text:0000000000003D75                 jbe     loc_45A9
.text:0000000000003D7B
.text:0000000000003D7B loc_3D7B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000003D7B                 mov     eax, r12d
.text:0000000000003D7E                 mov     ebx, 30h ; '0'
.text:0000000000003D83                 xor     r12d, r12d
.text:0000000000003D86                 jmp     loc_3938
.text:0000000000003D86 ; ---------------------------------------------------------------------------
.text:0000000000003D8B                 align 10h
.text:0000000000003D90
.text:0000000000003D90 loc_3D90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D90                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003D90                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003D95                 mov     r12d, r10d
.text:0000000000003D98                 setz    dl
.text:0000000000003D9B                 xor     r10d, r10d
.text:0000000000003D9E                 xor     eax, eax
.text:0000000000003DA0                 jmp     loc_3938
.text:0000000000003DA0 ; ---------------------------------------------------------------------------
.text:0000000000003DA5                 align 8
.text:0000000000003DA8
.text:0000000000003DA8 loc_3DA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003DA8                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003DA8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000003DAD                 setz    dl
.text:0000000000003DB0                 xor     r10d, r10d
.text:0000000000003DB3                 jmp     loc_3B78
.text:0000000000003DB3 ; ---------------------------------------------------------------------------
.text:0000000000003DB8                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003DC0                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003DC0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003DC5                 setz    dl
.text:0000000000003DC8                 xor     r10d, r10d
.text:0000000000003DCB                 xor     r12d, r12d
.text:0000000000003DCE                 jmp     loc_3B81
.text:0000000000003DCE ; ---------------------------------------------------------------------------
.text:0000000000003DD3                 align 8
.text:0000000000003DD8
.text:0000000000003DD8 loc_3DD8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003DD8                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003DD8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000003DDD                 mov     r12d, r10d
.text:0000000000003DE0                 mov     ebx, 20h ; ' '
.text:0000000000003DE5                 setz    dl
.text:0000000000003DE8                 xor     r10d, r10d
.text:0000000000003DEB                 jmp     loc_3B81
.text:0000000000003DF0 ; ---------------------------------------------------------------------------
.text:0000000000003DF0
.text:0000000000003DF0 loc_3DF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003DF0                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003DF0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003DF5                 xor     r10d, r10d
.text:0000000000003DF8                 mov     ebx, 72h ; 'r'
.text:0000000000003DFD                 jmp     loc_3A32
.text:0000000000003DFD ; ---------------------------------------------------------------------------
.text:0000000000003E02                 align 8
.text:0000000000003E08
.text:0000000000003E08 loc_3E08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003E08                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003E08                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000003E0D                 jmp     loc_3AB0
.text:0000000000003E0D ; ---------------------------------------------------------------------------
.text:0000000000003E12                 align 8
.text:0000000000003E18
.text:0000000000003E18 loc_3E18:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003E18                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003E18                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003E1D                 xor     r10d, r10d
.text:0000000000003E20                 mov     ebx, 74h ; 't'
.text:0000000000003E25                 jmp     loc_3A32
.text:0000000000003E25 ; ---------------------------------------------------------------------------
.text:0000000000003E2A                 align 10h
.text:0000000000003E30
.text:0000000000003E30 loc_3E30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003E30                                         ; DATA XREF: .rodata:jpt_3C8A↓o
.text:0000000000003E30                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003E35                 jmp     loc_3AB0
.text:0000000000003E35 ; ---------------------------------------------------------------------------
.text:0000000000003E3A                 align 20h
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003E40                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003E40                 xor     r10d, r10d
.text:0000000000003E43                 jmp     loc_38E0
.text:0000000000003E43 ; ---------------------------------------------------------------------------
.text:0000000000003E48                 align 10h
.text:0000000000003E50
.text:0000000000003E50 loc_3E50:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003E50                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E55                 jnz     loc_47C0
.text:0000000000003E5B
.text:0000000000003E5B loc_3E5B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003E5B                 add     rbp, 1
.text:0000000000003E5F                 mov     eax, r8d
.text:0000000000003E62                 xor     r12d, r12d
.text:0000000000003E65                 mov     ebx, 5Ch ; '\'
.text:0000000000003E6A                 jmp     loc_397C
.text:0000000000003E6A ; ---------------------------------------------------------------------------
.text:0000000000003E6F                 align 10h
.text:0000000000003E70
.text:0000000000003E70 loc_3E70:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003E70                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E75                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003E7A                 mov     r12d, r8d
.text:0000000000003E7D                 mov     rbp, r11
.text:0000000000003E80                 setz    dl
.text:0000000000003E83                 mov     eax, ebx
.text:0000000000003E85                 test    r15, r15
.text:0000000000003E88                 setz    cl
.text:0000000000003E8B                 and     eax, edx
.text:0000000000003E8D                 and     al, cl
.text:0000000000003E8F                 jnz     loc_48F6
.text:0000000000003E95                 mov     eax, ebx
.text:0000000000003E97                 xor     eax, 1
.text:0000000000003E9A                 and     dl, al
.text:0000000000003E9C                 jz      loc_480C
.text:0000000000003EA2                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003EA7                 jz      loc_480A
.text:0000000000003EAD                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003EB2                 jnz     loc_48AD
.text:0000000000003EB8                 test    r13, r13
.text:0000000000003EBB                 setz    al
.text:0000000000003EBE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003EC4                 setnz   dl
.text:0000000000003EC7                 and     al, dl
.text:0000000000003EC9                 jz      loc_48EC
.text:0000000000003ECF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003ED4
.text:0000000000003ED4 loc_3ED4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003ED4                 lea     rbx, asc_97BD   ; "'"
.text:0000000000003EDB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003EDF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003EE7                 mov     r15d, 1
.text:0000000000003EED                 mov     [rsp+0E8h+n], 1
.text:0000000000003EF6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003EFB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003F00                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003F04                 jmp     loc_37E3
.text:0000000000003F04 ; ---------------------------------------------------------------------------
.text:0000000000003F09                 align 10h
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003F10                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003F15                 jnz     loc_47C0
.text:0000000000003F1B                 test    r13, r13
.text:0000000000003F1E                 jz      loc_4320
.text:0000000000003F24                 xor     edx, edx
.text:0000000000003F26                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003F2C                 jnz     loc_4320
.text:0000000000003F32
.text:0000000000003F32 loc_3F32:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003F32                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003F32                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003F37                 add     r15, 3
.text:0000000000003F3B                 xor     eax, eax
.text:0000000000003F3D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003F42                 xor     r8d, r8d
.text:0000000000003F45                 mov     r13, rdx
.text:0000000000003F48                 mov     ebx, 27h ; '''
.text:0000000000003F4D                 jmp     loc_3969
.text:0000000000003F4D ; ---------------------------------------------------------------------------
.text:0000000000003F52                 align 8
.text:0000000000003F58
.text:0000000000003F58 loc_3F58:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003F58                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003F5D                 jz      short loc_3F80
.text:0000000000003F5F                 lea     rcx, [rbp+2]
.text:0000000000003F63                 cmp     rcx, r11
.text:0000000000003F66                 jnb     short loc_3F80
.text:0000000000003F68                 mov     rax, [rsp+0E8h+s]
.text:0000000000003F6D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003F72                 jz      loc_4702
.text:0000000000003F78                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003F80                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003F80                 xor     edx, edx
.text:0000000000003F82                 xor     r12d, r12d
.text:0000000000003F85                 xor     eax, eax
.text:0000000000003F87                 mov     ebx, 3Fh ; '?'
.text:0000000000003F8C                 jmp     loc_3938
.text:0000000000003F8C ; ---------------------------------------------------------------------------
.text:0000000000003F91                 align 8
.text:0000000000003F98
.text:0000000000003F98 loc_3F98:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003F98                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003F9D                 jnz     loc_47C0
.text:0000000000003FA3                 xor     r12d, r12d
.text:0000000000003FA6                 xor     eax, eax
.text:0000000000003FA8                 mov     ebx, 3Fh ; '?'
.text:0000000000003FAD                 jmp     loc_3969
.text:0000000000003FAD ; ---------------------------------------------------------------------------
.text:0000000000003FB2                 align 8
.text:0000000000003FB8
.text:0000000000003FB8 loc_3FB8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003FB8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003FC0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003FC4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003FD0                 mov     [rsp+0E8h+ps], rax
.text:0000000000003FD5                 jnz     short loc_4004
.text:0000000000003FD7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003FDC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003FE1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003FE6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003FEB                 call    _strlen
.text:0000000000003FF0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003FF6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003FFC                 mov     r11, rax
.text:0000000000003FFF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004004
.text:0000000000004004 loc_4004:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004004                 lea     rax, [rsp+0E8h+wc]
.text:000000000000400C                 xor     ecx, ecx
.text:000000000000400E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004012                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004017                 mov     rbx, rcx
.text:000000000000401A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004022                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004027                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000402C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000004034                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000004039                 mov     [rsp+0E8h+var_78], r13
.text:000000000000403E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000004043
.text:0000000000004043 loc_4043:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000004043                 mov     rax, [rsp+0E8h+s]
.text:0000000000004048                 lea     r14, [rbp+rbx+0]
.text:000000000000404D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004052                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004057                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000405C                 lea     r13, [rax+r14]
.text:0000000000004060                 sub     rdx, r14
.text:0000000000004063                 mov     rsi, r13
.text:0000000000004066                 call    rpl_mbrtowc
.text:000000000000406B                 test    rax, rax
.text:000000000000406E                 mov     r15, rax
.text:0000000000004071                 jz      short loc_40C1
.text:0000000000004073                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004077                 jz      loc_4695
.text:000000000000407D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004081                 jz      loc_4621
.text:0000000000004087                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000408C                 setz    al
.text:000000000000408F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004093                 jnz     loc_4230
.text:0000000000004099
.text:0000000000004099 loc_4099:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004099                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004099                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000040A0                 call    _iswprint
.text:00000000000040A5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000040AA                 test    eax, eax
.text:00000000000040AC                 mov     eax, 0
.text:00000000000040B1                 cmovz   r12d, eax
.text:00000000000040B5                 add     rbx, r15
.text:00000000000040B8                 call    _mbsinit
.text:00000000000040BD                 test    eax, eax
.text:00000000000040BF                 jz      short loc_4043
.text:00000000000040C1
.text:00000000000040C1 loc_40C1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000040C1                 mov     edx, r12d
.text:00000000000040C4                 mov     rdi, rbx
.text:00000000000040C7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000040CD                 xor     edx, 1
.text:00000000000040D0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000040D5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000040DB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000040DF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000040E7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000040EC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000040F1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000040F6
.text:00000000000040F6 loc_40F6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000040F6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000040F6                 cmp     rdi, 1
.text:00000000000040FA                 jbe     loc_46FB
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004100                 mov     rcx, rdi
.text:0000000000004103                 xor     esi, esi
.text:0000000000004105                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000410B                 add     rcx, rbp
.text:000000000000410E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004113                 jmp     loc_41CE
.text:0000000000004113 ; ---------------------------------------------------------------------------
.text:0000000000004118                 align 20h
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000004120                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004125                 setz    al
.text:0000000000004128                 test    r9b, r9b
.text:000000000000412B                 jnz     loc_45E0
.text:0000000000004131                 mov     esi, r8d
.text:0000000000004134                 xor     esi, 1
.text:0000000000004137                 and     al, sil
.text:000000000000413A                 jz      short loc_416B
.text:000000000000413C                 cmp     r13, r15
.text:000000000000413F                 jbe     short loc_4146
.text:0000000000004141                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004146
.text:0000000000004146 loc_4146:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000004146                 lea     rsi, [r15+1]
.text:000000000000414A                 cmp     r13, rsi
.text:000000000000414D                 jbe     short loc_4155
.text:000000000000414F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004155
.text:0000000000004155 loc_4155:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004155                 lea     rsi, [r15+2]
.text:0000000000004159                 cmp     r13, rsi
.text:000000000000415C                 jbe     short loc_4164
.text:000000000000415E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004164
.text:0000000000004164 loc_4164:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004164                 add     r15, 3
.text:0000000000004168                 mov     r8d, eax
.text:000000000000416B
.text:000000000000416B loc_416B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000416B                 cmp     r13, r15
.text:000000000000416E                 jbe     short loc_4175
.text:0000000000004170                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004175
.text:0000000000004175 loc_4175:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004175                 lea     rax, [r15+1]
.text:0000000000004179                 cmp     r13, rax
.text:000000000000417C                 jbe     short loc_418B
.text:000000000000417E                 mov     eax, ebx
.text:0000000000004180                 shr     al, 6
.text:0000000000004183                 add     eax, 30h ; '0'
.text:0000000000004186                 mov     [r14+r15+1], al
.text:000000000000418B
.text:000000000000418B loc_418B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000418B                 lea     rax, [r15+2]
.text:000000000000418F                 cmp     r13, rax
.text:0000000000004192                 jbe     short loc_41A4
.text:0000000000004194                 mov     eax, ebx
.text:0000000000004196                 shr     al, 3
.text:0000000000004199                 and     eax, 7
.text:000000000000419C                 add     eax, 30h ; '0'
.text:000000000000419F                 mov     [r14+r15+2], al
.text:00000000000041A4
.text:00000000000041A4 loc_41A4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000041A4                 and     ebx, 7
.text:00000000000041A7                 add     rbp, 1
.text:00000000000041AB                 add     r15, 3
.text:00000000000041AF                 add     ebx, 30h ; '0'
.text:00000000000041B2                 cmp     rbp, rcx
.text:00000000000041B5                 jnb     loc_39A0
.text:00000000000041BB                 mov     esi, edx
.text:00000000000041BD
.text:00000000000041BD loc_41BD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000041BD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000041BD                 cmp     r13, r15
.text:00000000000041C0                 jbe     short loc_41C6
.text:00000000000041C2                 mov     [r14+r15], bl
.text:00000000000041C6
.text:00000000000041C6 loc_41C6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000041C6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000041CA                 add     r15, 1
.text:00000000000041CE
.text:00000000000041CE loc_41CE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000041CE                 test    dl, dl
.text:00000000000041D0                 jnz     loc_4120
.text:00000000000041D6                 mov     eax, esi
.text:00000000000041D8                 xor     eax, 1
.text:00000000000041DB                 and     eax, r8d
.text:00000000000041DE                 test    r10b, r10b
.text:00000000000041E1                 jz      short loc_41F1
.text:00000000000041E3                 cmp     r13, r15
.text:00000000000041E6                 jbe     short loc_41ED
.text:00000000000041E8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000041ED
.text:00000000000041ED loc_41ED:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000041ED                 add     r15, 1
.text:00000000000041F1
.text:00000000000041F1 loc_41F1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000041F1                 add     rbp, 1
.text:00000000000041F5                 cmp     rbp, rcx
.text:00000000000041F8                 jnb     loc_397C
.text:00000000000041FE                 test    al, al
.text:0000000000004200                 jz      loc_45FE
.text:0000000000004206                 cmp     r13, r15
.text:0000000000004209                 jbe     short loc_4210
.text:000000000000420B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004210
.text:0000000000004210 loc_4210:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004210                 lea     rax, [r15+1]
.text:0000000000004214                 cmp     r13, rax
.text:0000000000004217                 jbe     short loc_421F
.text:0000000000004219                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000421F
.text:000000000000421F loc_421F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000421F                 add     r15, 2
.text:0000000000004223                 xor     r10d, r10d
.text:0000000000004226                 xor     r8d, r8d
.text:0000000000004229                 jmp     short loc_41BD
.text:0000000000004229 ; ---------------------------------------------------------------------------
.text:000000000000422B                 align 10h
.text:0000000000004230
.text:0000000000004230 loc_4230:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004230                 cmp     r15, 1
.text:0000000000004234                 jz      loc_4099
.text:000000000000423A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000423F                 lea     rcx, [rdi+r15]
.text:0000000000004243                 lea     rdx, [rdi+r14+1]
.text:0000000000004248                 lea     r8, [rcx+r14]
.text:000000000000424C                 jmp     short loc_425D
.text:000000000000424C ; ---------------------------------------------------------------------------
.text:000000000000424E                 align 10h
.text:0000000000004250
.text:0000000000004250 loc_4250:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004250                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004250                 add     rdx, 1
.text:0000000000004254                 cmp     r8, rdx
.text:0000000000004257                 jz      loc_4099
.text:000000000000425D
.text:000000000000425D loc_425D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000425D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004260                 sub     ecx, 5Bh ; '['
.text:0000000000004263                 cmp     cl, 21h ; '!'
.text:0000000000004266                 ja      short loc_4250
.text:0000000000004268                 mov     esi, 1
.text:000000000000426D                 shl     rsi, cl
.text:0000000000004270                 mov     rcx, rsi
.text:0000000000004273                 mov     rsi, 20000002Bh
.text:000000000000427D                 test    rcx, rsi
.text:0000000000004280                 jz      short loc_4250
.text:0000000000004282                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004287                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000428C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004291                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004299
.text:0000000000004299 loc_4299:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004299                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004299                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000429E                 jz      short loc_42B0
.text:00000000000042A0                 test    al, al
.text:00000000000042A2                 mov     eax, 4
.text:00000000000042A7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000042AC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000042B0
.text:00000000000042B0 loc_42B0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000042B0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000042B0                 sub     rsp, 8
.text:00000000000042B4                 mov     rcx, rbp
.text:00000000000042B7                 mov     rsi, r13
.text:00000000000042BA                 push    [rsp+0F0h+var_88]
.text:00000000000042BE                 push    [rsp+0F8h+var_80]
.text:00000000000042C2                 mov     rdi, r14
.text:00000000000042C5                 push    0
.text:00000000000042C7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000042CF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000042D4                 mov     rdx, [rsp+108h+s]
.text:00000000000042D9                 and     r9d, 0FFFFFFFDh
.text:00000000000042DD                 call    quotearg_buffer_restyled
.text:00000000000042E2                 add     rsp, 20h
.text:00000000000042E6                 mov     r15, rax
.text:00000000000042E9
.text:00000000000042E9 loc_42E9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000042E9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000042E9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000042F1                 xor     rbx, fs:28h
.text:00000000000042FA                 mov     rax, r15
.text:00000000000042FD                 jnz     loc_4903
.text:0000000000004303                 add     rsp, 0B8h
.text:000000000000430A                 pop     rbx
.text:000000000000430B                 pop     rbp
.text:000000000000430C                 pop     r12
.text:000000000000430E                 pop     r13
.text:0000000000004310                 pop     r14
.text:0000000000004312                 pop     r15
.text:0000000000004314                 retn
.text:0000000000004314 ; ---------------------------------------------------------------------------
.text:0000000000004315                 align 8
.text:0000000000004318
.text:0000000000004318 loc_4318:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004318                 mov     rbp, r11
.text:000000000000431B                 jmp     loc_4299
.text:0000000000004320 ; ---------------------------------------------------------------------------
.text:0000000000004320
.text:0000000000004320 loc_4320:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004320                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004320                 cmp     r13, r15
.text:0000000000004323                 jbe     short loc_432A
.text:0000000000004325                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000432A
.text:000000000000432A loc_432A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000432A                 lea     rax, [r15+1]
.text:000000000000432E                 cmp     r13, rax
.text:0000000000004331                 jbe     short loc_4339
.text:0000000000004333                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004339
.text:0000000000004339 loc_4339:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004339                 lea     rax, [r15+2]
.text:000000000000433D                 cmp     r13, rax
.text:0000000000004340                 jbe     loc_4932
.text:0000000000004346                 mov     rdx, r13
.text:0000000000004349                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000434F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004354                 jmp     loc_3F32
.text:0000000000004359 ; ---------------------------------------------------------------------------
.text:0000000000004359
.text:0000000000004359 loc_4359:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004359                 mov     eax, r12d
.text:000000000000435C                 mov     ebx, 30h ; '0'
.text:0000000000004361                 xor     r12d, r12d
.text:0000000000004364                 jmp     loc_3969
.text:0000000000004369 ; ---------------------------------------------------------------------------
.text:0000000000004369
.text:0000000000004369 loc_4369:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004369                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000436F                 jmp     loc_3D39
.text:0000000000004374 ; ---------------------------------------------------------------------------
.text:0000000000004374
.text:0000000000004374 loc_4374:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004374                                         ; DATA XREF: .rodata:jpt_37A1↓o
.text:0000000000004374                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004376                 jnz     loc_37A3        ; jumptable 00000000000121F1 case 1
.text:000000000000437C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004381
.text:0000000000004381 loc_4381:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004381                 test    r13, r13
.text:0000000000004384                 jnz     loc_491A
.text:000000000000438A                 lea     rax, asc_97BD   ; "'"
.text:0000000000004391                 mov     [rsp+0E8h+var_98], 0
.text:000000000000439A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000439F                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043A4                 xor     r12d, r12d
.text:00000000000043A7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000043AC                 mov     [rsp+0E8h+n], 1
.text:00000000000043B5                 mov     [rsp+0E8h+s2], rax
.text:00000000000043BA                 mov     r15d, 1
.text:00000000000043C0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000043C8                 jmp     loc_37E3
.text:00000000000043C8 ; ---------------------------------------------------------------------------
.text:00000000000043CD                 align 10h
.text:00000000000043D0
.text:00000000000043D0 loc_43D0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000043D0                                         ; DATA XREF: .rodata:jpt_37A1↓o
.text:00000000000043D0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000043D2                 jnz     loc_47CD
.text:00000000000043D8                 test    r13, r13
.text:00000000000043DB                 jz      loc_4606
.text:00000000000043E1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000043E5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000043EA                 xor     r12d, r12d
.text:00000000000043ED                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043F2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043FB
.text:00000000000043FB loc_43FB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000043FB                 lea     rax, unk_97BB
.text:0000000000004402                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004407                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000440C                 mov     [rsp+0E8h+n], 1
.text:0000000000004415                 mov     r15d, 1
.text:000000000000441B                 mov     [rsp+0E8h+s2], rax
.text:0000000000004420                 jmp     loc_37E3
.text:0000000000004425 ; ---------------------------------------------------------------------------
.text:0000000000004425
.text:0000000000004425 loc_4425:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004425                                         ; DATA XREF: .rodata:jpt_37A1↓o
.text:0000000000004425                 lea     rax, unk_97BB   ; jumptable 00000000000121F1 case 6
.text:000000000000442C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004431                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004436                 xor     r12d, r12d
.text:0000000000004439                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004442                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004447                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000444C                 mov     [rsp+0E8h+n], 1
.text:0000000000004455                 xor     r15d, r15d
.text:0000000000004458                 mov     [rsp+0E8h+s2], rax
.text:000000000000445D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004465                 jmp     loc_37E3
.text:000000000000446A ; ---------------------------------------------------------------------------
.text:000000000000446A
.text:000000000000446A loc_446A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000446A                                         ; DATA XREF: .rodata:jpt_37A1↓o
.text:000000000000446A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000446F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004474                 xor     r12d, r12d
.text:0000000000004477                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004480                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004485                 xor     r15d, r15d
.text:0000000000004488                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000448D                 mov     [rsp+0E8h+n], 0
.text:0000000000004496                 mov     [rsp+0E8h+s2], 0
.text:000000000000449F                 jmp     loc_37E3
.text:00000000000044A4 ; ---------------------------------------------------------------------------
.text:00000000000044A4
.text:00000000000044A4 loc_44A4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000044A4                                         ; DATA XREF: .rodata:jpt_37A1↓o
.text:00000000000044A4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000044A9                 jz      short loc_4501
.text:00000000000044AB                 lea     rsi, asc_97BF   ; "`"
.text:00000000000044B2                 xor     edi, edi        ; domainname
.text:00000000000044B4                 mov     edx, 5          ; category
.text:00000000000044B9                 call    _dcgettext
.text:00000000000044BE                 mov     rcx, rax
.text:00000000000044C1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000044C6                 lea     rax, asc_97BF   ; "`"
.text:00000000000044CD                 cmp     rcx, rax
.text:00000000000044D0                 jz      loc_486E
.text:00000000000044D6
.text:00000000000044D6 loc_44D6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000044D6                 lea     rsi, asc_97BD   ; "'"
.text:00000000000044DD                 xor     edi, edi        ; domainname
.text:00000000000044DF                 mov     edx, 5          ; category
.text:00000000000044E4                 call    _dcgettext
.text:00000000000044E9                 mov     rcx, rax
.text:00000000000044EC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000044F1                 lea     rax, asc_97BD   ; "'"
.text:00000000000044F8                 cmp     rcx, rax
.text:00000000000044FB                 jz      loc_4884
.text:0000000000004501
.text:0000000000004501 loc_4501:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004501                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004501                 xor     r15d, r15d
.text:0000000000004504                 test    ebx, ebx
.text:0000000000004506                 jz      loc_46CD
.text:000000000000450C
.text:000000000000450C loc_450C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000450C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000450C                 test    ebx, ebx
.text:000000000000450E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004513                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004518                 xor     r12d, r12d
.text:000000000000451B                 mov     rdi, rbx        ; s
.text:000000000000451E                 call    _strlen
.text:0000000000004523                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004528                 mov     [rsp+0E8h+n], rax
.text:000000000000452D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004532                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004537                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004540                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004545                 jmp     loc_37E3
.text:000000000000454A ; ---------------------------------------------------------------------------
.text:000000000000454A
.text:000000000000454A loc_454A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000454A                                         ; DATA XREF: .rodata:jpt_37A1↓o
.text:000000000000454A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000454F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004554                 xor     r12d, r12d
.text:0000000000004557                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004560                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004565                 xor     r15d, r15d
.text:0000000000004568                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000456D                 mov     [rsp+0E8h+n], 0
.text:0000000000004576                 mov     [rsp+0E8h+s2], 0
.text:000000000000457F                 jmp     loc_37E3
.text:0000000000004584 ; ---------------------------------------------------------------------------
.text:0000000000004584
.text:0000000000004584 loc_4584:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004584                                         ; DATA XREF: .rodata:jpt_37A1↓o
.text:0000000000004584                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004589                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000458E                 xor     r12d, r12d
.text:0000000000004591                 mov     [rsp+0E8h+var_98], 0
.text:000000000000459A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000459F                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000045A4                 jmp     loc_37C3
.text:00000000000045A9 ; ---------------------------------------------------------------------------
.text:00000000000045A9
.text:00000000000045A9 loc_45A9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000045A9                 cmp     r13, r15
.text:00000000000045AC                 jbe     short loc_45B3
.text:00000000000045AE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000045B3
.text:00000000000045B3 loc_45B3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000045B3                 lea     rax, [rcx+2]
.text:00000000000045B7                 cmp     r13, rax
.text:00000000000045BA                 jbe     short loc_45C2
.text:00000000000045BC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000045C2
.text:00000000000045C2 loc_45C2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000045C2                 mov     eax, r12d
.text:00000000000045C5                 lea     r15, [rcx+3]
.text:00000000000045C9                 xor     r12d, r12d
.text:00000000000045CC                 mov     ebx, 30h ; '0'
.text:00000000000045D1                 jmp     loc_3938
.text:00000000000045D1 ; ---------------------------------------------------------------------------
.text:00000000000045D6                 align 20h
.text:00000000000045E0
.text:00000000000045E0 loc_45E0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000045E0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000045E5                 mov     rbp, r11
.text:00000000000045E8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000045EC                 jmp     loc_4299
.text:00000000000045F1 ; ---------------------------------------------------------------------------
.text:00000000000045F1
.text:00000000000045F1 loc_45F1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000045F1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000045F6                 xor     r12d, r12d
.text:00000000000045F9                 jmp     loc_4100
.text:00000000000045FE ; ---------------------------------------------------------------------------
.text:00000000000045FE
.text:00000000000045FE loc_45FE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000045FE                 xor     r10d, r10d
.text:0000000000004601                 jmp     loc_41BD
.text:0000000000004606 ; ---------------------------------------------------------------------------
.text:0000000000004606
.text:0000000000004606 loc_4606:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004606                 mov     [rsp+0E8h+var_98], 0
.text:000000000000460F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004614                 xor     r12d, r12d
.text:0000000000004617                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000461C                 jmp     loc_43FB
.text:0000000000004621 ; ---------------------------------------------------------------------------
.text:0000000000004621
.text:0000000000004621 loc_4621:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000004621                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004626                 mov     rsi, r14
.text:0000000000004629                 mov     rcx, r13
.text:000000000000462C                 mov     rax, rbx
.text:000000000000462F                 mov     rdi, rbx
.text:0000000000004632                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004638                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000463D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000004645                 cmp     rsi, r11
.text:0000000000004648                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000464E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004656                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000465B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004660                 jnb     short loc_4688
.text:0000000000004662                 cmp     byte ptr [rcx], 0
.text:0000000000004665                 jnz     short loc_4677
.text:0000000000004667                 jmp     short loc_4688
.text:0000000000004667 ; ---------------------------------------------------------------------------
.text:0000000000004669                 align 10h
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004670                 cmp     byte ptr [r9+rax], 0
.text:0000000000004675                 jz      short loc_4685
.text:0000000000004677
.text:0000000000004677 loc_4677:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004677                 add     rax, 1
.text:000000000000467B                 lea     rdx, [rbp+rax+0]
.text:0000000000004680                 cmp     r11, rdx
.text:0000000000004683                 ja      short loc_4670
.text:0000000000004685
.text:0000000000004685 loc_4685:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004685                 mov     rdi, rax
.text:0000000000004688
.text:0000000000004688 loc_4688:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004688                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004688                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000468D                 xor     r12d, r12d
.text:0000000000004690                 jmp     loc_40F6
.text:0000000000004695 ; ---------------------------------------------------------------------------
.text:0000000000004695
.text:0000000000004695 loc_4695:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004695                 mov     rdi, rbx
.text:0000000000004698                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000469E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000046A3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000046A9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000046B1                 xor     r12d, r12d
.text:00000000000046B4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000046B9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000046BE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000046C3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000046C8                 jmp     loc_40F6
.text:00000000000046CD ; ---------------------------------------------------------------------------
.text:00000000000046CD
.text:00000000000046CD loc_46CD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000046CD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000046D2                 movzx   eax, byte ptr [rdx]
.text:00000000000046D5                 test    al, al
.text:00000000000046D7                 jz      loc_450C
.text:00000000000046DD                 nop     dword ptr [rax]
.text:00000000000046E0
.text:00000000000046E0 loc_46E0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000046E0                 cmp     r13, r15
.text:00000000000046E3                 jbe     short loc_46E9
.text:00000000000046E5                 mov     [r14+r15], al
.text:00000000000046E9
.text:00000000000046E9 loc_46E9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000046E9                 add     r15, 1
.text:00000000000046ED                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000046F2                 test    al, al
.text:00000000000046F4                 jnz     short loc_46E0
.text:00000000000046F6                 jmp     loc_450C
.text:00000000000046FB ; ---------------------------------------------------------------------------
.text:00000000000046FB
.text:00000000000046FB loc_46FB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000046FB                 mov     eax, edx
.text:00000000000046FD                 jmp     loc_3C57
.text:0000000000004702 ; ---------------------------------------------------------------------------
.text:0000000000004702
.text:0000000000004702 loc_4702:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004702                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004706                 cmp     bl, 3Eh ; '>'
.text:0000000000004709                 ja      loc_3F80
.text:000000000000470F                 mov     rax, 7000A38200000000h
.text:0000000000004719                 bt      rax, rbx
.text:000000000000471D                 jnb     loc_3F80
.text:0000000000004723                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004728                 jnz     loc_4912
.text:000000000000472E                 cmp     r13, r15
.text:0000000000004731                 jbe     short loc_4738
.text:0000000000004733                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004738
.text:0000000000004738 loc_4738:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004738                 lea     rax, [r15+1]
.text:000000000000473C                 cmp     r13, rax
.text:000000000000473F                 jbe     short loc_4747
.text:0000000000004741                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004747
.text:0000000000004747 loc_4747:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004747                 lea     rax, [r15+2]
.text:000000000000474B                 cmp     r13, rax
.text:000000000000474E                 jbe     short loc_4756
.text:0000000000004750                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004756
.text:0000000000004756 loc_4756:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004756                 lea     rax, [r15+3]
.text:000000000000475A                 cmp     r13, rax
.text:000000000000475D                 jbe     short loc_4765
.text:000000000000475F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004765
.text:0000000000004765 loc_4765:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004765                 add     r15, 4
.text:0000000000004769                 xor     edx, edx
.text:000000000000476B                 xor     r12d, r12d
.text:000000000000476E                 xor     eax, eax
.text:0000000000004770                 mov     rbp, rcx
.text:0000000000004773                 jmp     loc_3938
.text:0000000000004778 ; ---------------------------------------------------------------------------
.text:0000000000004778
.text:0000000000004778 loc_4778:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004778                                         ; DATA XREF: .rodata:jpt_37A1↓o
.text:0000000000004778                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000477A                 jz      loc_4908
.text:0000000000004780                 lea     rax, asc_97BD   ; "'"
.text:0000000000004787                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000478C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004791                 xor     r12d, r12d
.text:0000000000004794                 mov     [rsp+0E8h+var_98], 0
.text:000000000000479D                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000047A2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000047A7                 mov     [rsp+0E8h+n], 1
.text:00000000000047B0                 xor     r15d, r15d
.text:00000000000047B3                 mov     [rsp+0E8h+s2], rax
.text:00000000000047B8                 jmp     loc_37E3
.text:00000000000047B8 ; ---------------------------------------------------------------------------
.text:00000000000047BD                 align 20h
.text:00000000000047C0
.text:00000000000047C0 loc_47C0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000047C0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000047C0                 mov     rbp, r11
.text:00000000000047C3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000047C8                 jmp     loc_4299
.text:00000000000047CD ; ---------------------------------------------------------------------------
.text:00000000000047CD
.text:00000000000047CD loc_47CD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000047CD                 lea     rax, unk_97BB
.text:00000000000047D4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000047D9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000047DE                 xor     r12d, r12d
.text:00000000000047E1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000047EA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000047EF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000047F4                 mov     [rsp+0E8h+n], 1
.text:00000000000047FD                 xor     r15d, r15d
.text:0000000000004800                 mov     [rsp+0E8h+s2], rax
.text:0000000000004805                 jmp     loc_37E3
.text:000000000000480A ; ---------------------------------------------------------------------------
.text:000000000000480A
.text:000000000000480A loc_480A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000480A                 mov     eax, edx
.text:000000000000480C
.text:000000000000480C loc_480C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000480C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000480C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004811                 test    rbx, rbx
.text:0000000000004814                 jz      short loc_4842
.text:0000000000004816                 test    al, al
.text:0000000000004818                 jz      short loc_4842
.text:000000000000481A                 movzx   ecx, byte ptr [rbx]
.text:000000000000481D                 mov     rax, rbx
.text:0000000000004820                 test    cl, cl
.text:0000000000004822                 jz      short loc_4842
.text:0000000000004824                 mov     rdx, r15
.text:0000000000004827                 sub     rax, r15
.text:000000000000482A
.text:000000000000482A loc_482A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000482A                 cmp     r13, rdx
.text:000000000000482D                 jbe     short loc_4833
.text:000000000000482F                 mov     [r14+rdx], cl
.text:0000000000004833
.text:0000000000004833 loc_4833:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004833                 add     rdx, 1
.text:0000000000004837                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000483B                 test    cl, cl
.text:000000000000483D                 jnz     short loc_482A
.text:000000000000483F                 mov     r15, rdx
.text:0000000000004842
.text:0000000000004842 loc_4842:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004842                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004842                 cmp     r13, r15
.text:0000000000004845                 jbe     loc_42E9
.text:000000000000484B                 mov     byte ptr [r14+r15], 0
.text:0000000000004850                 jmp     loc_42E9
.text:0000000000004855 ; ---------------------------------------------------------------------------
.text:0000000000004855
.text:0000000000004855 loc_4855:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004855                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000485A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000485F                 mov     rbp, r11
.text:0000000000004862                 setz    al
.text:0000000000004865                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004869                 jmp     loc_4299
.text:000000000000486E ; ---------------------------------------------------------------------------
.text:000000000000486E
.text:000000000000486E loc_486E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000486E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004872                 mov     rdi, rcx
.text:0000000000004875                 call    gettext_quote
.text:000000000000487A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000487F                 jmp     loc_44D6
.text:0000000000004884 ; ---------------------------------------------------------------------------
.text:0000000000004884
.text:0000000000004884 loc_4884:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004884                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004888                 mov     rdi, rcx
.text:000000000000488B                 call    gettext_quote
.text:0000000000004890                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004895                 jmp     loc_4501
.text:000000000000489A ; ---------------------------------------------------------------------------
.text:000000000000489A
.text:000000000000489A loc_489A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000489A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000489F                 mov     rbp, r11
.text:00000000000048A2                 mov     eax, edx
.text:00000000000048A4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000048A8                 jmp     loc_4299
.text:00000000000048AD ; ---------------------------------------------------------------------------
.text:00000000000048AD
.text:00000000000048AD loc_48AD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000048AD                 sub     rsp, 8
.text:00000000000048B1                 mov     r8d, 5
.text:00000000000048B7                 mov     rcx, r11
.text:00000000000048BA                 push    [rsp+0F0h+var_88]
.text:00000000000048BE                 push    [rsp+0F8h+var_80]
.text:00000000000048C2                 mov     rdi, r14
.text:00000000000048C5                 push    [rsp+100h+var_C8]
.text:00000000000048C9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000048D1                 mov     rdx, [rsp+108h+s]
.text:00000000000048D6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000048DB                 call    quotearg_buffer_restyled
.text:00000000000048E0                 add     rsp, 20h
.text:00000000000048E4                 mov     r15, rax
.text:00000000000048E7                 jmp     loc_42E9
.text:00000000000048EC ; ---------------------------------------------------------------------------
.text:00000000000048EC
.text:00000000000048EC loc_48EC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000048EC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000048F1                 jmp     loc_480C
.text:00000000000048F6 ; ---------------------------------------------------------------------------
.text:00000000000048F6
.text:00000000000048F6 loc_48F6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000048F6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000048FE                 jmp     loc_4299
.text:0000000000004903 ; ---------------------------------------------------------------------------
.text:0000000000004903
.text:0000000000004903 loc_4903:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004903                 call    ___stack_chk_fail
.text:0000000000004908 ; ---------------------------------------------------------------------------
.text:0000000000004908
.text:0000000000004908 loc_4908:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004908                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000490D                 jmp     loc_4381
.text:0000000000004912 ; ---------------------------------------------------------------------------
.text:0000000000004912
.text:0000000000004912 loc_4912:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004912                 mov     rbp, r11
.text:0000000000004915                 jmp     loc_42B0
.text:000000000000491A ; ---------------------------------------------------------------------------
.text:000000000000491A
.text:000000000000491A loc_491A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000491A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000491F                 xor     eax, eax
.text:0000000000004921                 xor     r12d, r12d
.text:0000000000004924                 mov     [rsp+0E8h+var_98], 0
.text:000000000000492D                 jmp     loc_3ED4
.text:0000000000004932 ; ---------------------------------------------------------------------------
.text:0000000000004932
.text:0000000000004932 loc_4932:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004932                 mov     rdx, r13
.text:0000000000004935                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000493A                 jmp     loc_3F32
.text:000000000000493F ; ---------------------------------------------------------------------------
.text:000000000000493F
.text:000000000000493F def_37A1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000493F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000493F ; } // starts at 3710
.text:000000000000493F quotearg_buffer_restyled endp
.text:000000000000493F
.text:000000000000493F ; ---------------------------------------------------------------------------
.text:0000000000004944                 align 10h
.text:0000000000004950
.text:0000000000004950 ; =============== S U B R O U T I N E =======================================
.text:0000000000004950
.text:0000000000004950
.text:0000000000004950 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004950                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004950
.text:0000000000004950 var_50          = qword ptr -50h
.text:0000000000004950 var_48          = qword ptr -48h
.text:0000000000004950 var_40          = dword ptr -40h
.text:0000000000004950 var_3C          = dword ptr -3Ch
.text:0000000000004950
.text:0000000000004950 ; __unwind {
.text:0000000000004950                 push    r15
.text:0000000000004952                 push    r14
.text:0000000000004954                 movsxd  r15, edi
.text:0000000000004957                 push    r13
.text:0000000000004959                 push    r12
.text:000000000000495B                 mov     r14, rdx
.text:000000000000495E                 push    rbp
.text:000000000000495F                 push    rbx
.text:0000000000004960                 mov     rbp, rcx
.text:0000000000004963                 sub     rsp, 28h
.text:0000000000004967                 mov     [rsp+58h+var_50], rsi
.text:000000000000496C                 call    ___errno_location
.text:0000000000004971                 mov     r13, rax
.text:0000000000004974                 mov     eax, [rax]
.text:0000000000004976                 test    r15d, r15d
.text:0000000000004979                 mov     rbx, cs:slotvec
.text:0000000000004980                 mov     [rsp+58h+var_40], eax
.text:0000000000004984                 js      loc_4AF1
.text:000000000000498A                 cmp     cs:nslots, r15d
.text:0000000000004991                 jg      short loc_49F5
.text:0000000000004993                 cmp     r15d, 7FFFFFFFh
.text:000000000000499A                 jz      loc_4AF6
.text:00000000000049A0                 lea     r12d, [r15+1]
.text:00000000000049A4                 lea     rax, slotvec0
.text:00000000000049AB                 movsxd  rsi, r12d
.text:00000000000049AE                 shl     rsi, 4
.text:00000000000049B2                 cmp     rbx, rax
.text:00000000000049B5                 jz      loc_4AD0
.text:00000000000049BB                 mov     rdi, rbx
.text:00000000000049BE                 call    xrealloc
.text:00000000000049C3                 mov     rbx, rax
.text:00000000000049C6                 mov     cs:slotvec, rax
.text:00000000000049CD
.text:00000000000049CD loc_49CD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000049CD                 movsxd  rdi, cs:nslots
.text:00000000000049D4                 mov     edx, r12d
.text:00000000000049D7                 xor     esi, esi        ; c
.text:00000000000049D9                 sub     edx, edi
.text:00000000000049DB                 shl     rdi, 4
.text:00000000000049DF                 movsxd  rdx, edx
.text:00000000000049E2                 add     rdi, rbx        ; s
.text:00000000000049E5                 shl     rdx, 4          ; n
.text:00000000000049E9                 call    _memset
.text:00000000000049EE                 mov     cs:nslots, r12d
.text:00000000000049F5
.text:00000000000049F5 loc_49F5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000049F5                 mov     eax, [rbp+4]
.text:00000000000049F8                 shl     r15, 4
.text:00000000000049FC                 sub     rsp, 8
.text:0000000000004A00                 add     rbx, r15
.text:0000000000004A03                 lea     r15, [rbp+8]
.text:0000000000004A07                 mov     r8d, [rbp+0]
.text:0000000000004A0B                 mov     r11, [rbx]
.text:0000000000004A0E                 mov     r12, [rbx+8]
.text:0000000000004A12                 mov     rcx, r14
.text:0000000000004A15                 or      eax, 1
.text:0000000000004A18                 mov     [rsp+60h+var_3C], eax
.text:0000000000004A1C                 push    qword ptr [rbp+30h]
.text:0000000000004A1F                 mov     r9d, eax
.text:0000000000004A22                 push    qword ptr [rbp+28h]
.text:0000000000004A25                 push    r15
.text:0000000000004A27                 mov     rsi, r11
.text:0000000000004A2A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004A2F                 mov     rdi, r12
.text:0000000000004A32                 mov     [rsp+78h+var_48], r11
.text:0000000000004A37                 call    quotearg_buffer_restyled
.text:0000000000004A3C                 add     rsp, 20h
.text:0000000000004A40                 mov     r11, [rsp+58h+var_48]
.text:0000000000004A45                 cmp     r11, rax
.text:0000000000004A48                 ja      short loc_4AB1
.text:0000000000004A4A                 lea     rsi, [rax+1]
.text:0000000000004A4E                 lea     rax, slot0
.text:0000000000004A55                 cmp     r12, rax
.text:0000000000004A58                 mov     [rbx], rsi
.text:0000000000004A5B                 jz      short loc_4A6F
.text:0000000000004A5D                 mov     rdi, r12        ; ptr
.text:0000000000004A60                 mov     [rsp+58h+var_48], rsi
.text:0000000000004A65                 call    free
.text:0000000000004A6A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000004A6F
.text:0000000000004A6F loc_4A6F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000004A6F                 mov     rdi, rsi
.text:0000000000004A72                 mov     [rsp+58h+var_48], rsi
.text:0000000000004A77                 call    xmalloc
.text:0000000000004A7C                 sub     rsp, 8
.text:0000000000004A80                 mov     [rbx+8], rax
.text:0000000000004A84                 mov     r8d, [rbp+0]
.text:0000000000004A88                 push    qword ptr [rbp+30h]
.text:0000000000004A8B                 push    qword ptr [rbp+28h]
.text:0000000000004A8E                 mov     rcx, r14
.text:0000000000004A91                 push    r15
.text:0000000000004A93                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004A98                 mov     rdi, rax
.text:0000000000004A9B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004AA0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004AA5                 mov     r12, rax
.text:0000000000004AA8                 call    quotearg_buffer_restyled
.text:0000000000004AAD                 add     rsp, 20h
.text:0000000000004AB1
.text:0000000000004AB1 loc_4AB1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004AB1                 mov     eax, [rsp+58h+var_40]
.text:0000000000004AB5                 mov     [r13+0], eax
.text:0000000000004AB9                 add     rsp, 28h
.text:0000000000004ABD                 mov     rax, r12
.text:0000000000004AC0                 pop     rbx
.text:0000000000004AC1                 pop     rbp
.text:0000000000004AC2                 pop     r12
.text:0000000000004AC4                 pop     r13
.text:0000000000004AC6                 pop     r14
.text:0000000000004AC8                 pop     r15
.text:0000000000004ACA                 retn
.text:0000000000004ACA ; ---------------------------------------------------------------------------
.text:0000000000004ACB                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 loc_4AD0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004AD0                 xor     edi, edi
.text:0000000000004AD2                 call    xrealloc
.text:0000000000004AD7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000004ADF                 mov     rbx, rax
.text:0000000000004AE2                 mov     cs:slotvec, rax
.text:0000000000004AE9                 movups  xmmword ptr [rax], xmm0
.text:0000000000004AEC                 jmp     loc_49CD
.text:0000000000004AF1 ; ---------------------------------------------------------------------------
.text:0000000000004AF1
.text:0000000000004AF1 loc_4AF1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004AF1                 call    _abort
.text:0000000000004AF6 ; ---------------------------------------------------------------------------
.text:0000000000004AF6
.text:0000000000004AF6 loc_4AF6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004AF6                 call    xalloc_die
.text:0000000000004AF6 ; } // starts at 4950
.text:0000000000004AF6 quotearg_n_options endp
.text:0000000000004AF6
.text:0000000000004AF6 ; ---------------------------------------------------------------------------
.text:0000000000004AFB                 align 20h
.text:0000000000004B00
.text:0000000000004B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B00
.text:0000000000004B00 ; Attributes: info_from_lumina
.text:0000000000004B00
.text:0000000000004B00 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004B00                 public clone_quoting_options
.text:0000000000004B00 clone_quoting_options proc near
.text:0000000000004B00 ; __unwind {
.text:0000000000004B00                 push    r12
.text:0000000000004B02                 push    rbp
.text:0000000000004B03                 push    rbx
.text:0000000000004B04                 mov     rbx, rdi
.text:0000000000004B07                 call    ___errno_location
.text:0000000000004B0C                 mov     r12d, [rax]
.text:0000000000004B0F                 mov     rbp, rax
.text:0000000000004B12                 lea     rax, default_quoting_options
.text:0000000000004B19                 test    rbx, rbx
.text:0000000000004B1C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004B21                 cmovz   rbx, rax
.text:0000000000004B25                 mov     rdi, rbx        ; src
.text:0000000000004B28                 call    xmemdup
.text:0000000000004B2D                 mov     [rbp+0], r12d
.text:0000000000004B31                 pop     rbx
.text:0000000000004B32                 pop     rbp
.text:0000000000004B33                 pop     r12
.text:0000000000004B35                 retn
.text:0000000000004B35 ; } // starts at 4B00
.text:0000000000004B35 clone_quoting_options endp
.text:0000000000004B35
.text:0000000000004B35 ; ---------------------------------------------------------------------------
.text:0000000000004B36                 align 20h
.text:0000000000004B40
.text:0000000000004B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B40
.text:0000000000004B40
.text:0000000000004B40                 public get_quoting_style
.text:0000000000004B40 get_quoting_style proc near
.text:0000000000004B40 ; __unwind {
.text:0000000000004B40                 lea     rax, default_quoting_options
.text:0000000000004B47                 test    rdi, rdi
.text:0000000000004B4A                 cmovz   rdi, rax
.text:0000000000004B4E                 mov     eax, [rdi]
.text:0000000000004B50                 retn
.text:0000000000004B50 ; } // starts at 4B40
.text:0000000000004B50 get_quoting_style endp
.text:0000000000004B50
.text:0000000000004B50 ; ---------------------------------------------------------------------------
.text:0000000000004B51                 align 20h
.text:0000000000004B60
.text:0000000000004B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B60
.text:0000000000004B60
.text:0000000000004B60                 public set_quoting_style
.text:0000000000004B60 set_quoting_style proc near
.text:0000000000004B60 ; __unwind {
.text:0000000000004B60                 lea     rax, default_quoting_options
.text:0000000000004B67                 test    rdi, rdi
.text:0000000000004B6A                 cmovz   rdi, rax
.text:0000000000004B6E                 mov     [rdi], esi
.text:0000000000004B70                 retn
.text:0000000000004B70 ; } // starts at 4B60
.text:0000000000004B70 set_quoting_style endp
.text:0000000000004B70
.text:0000000000004B70 ; ---------------------------------------------------------------------------
.text:0000000000004B71                 align 20h
.text:0000000000004B80
.text:0000000000004B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B80
.text:0000000000004B80 ; Attributes: info_from_lumina
.text:0000000000004B80
.text:0000000000004B80 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004B80                 public set_char_quoting
.text:0000000000004B80 set_char_quoting proc near
.text:0000000000004B80 ; __unwind {
.text:0000000000004B80                 lea     rax, default_quoting_options
.text:0000000000004B87                 test    rdi, rdi
.text:0000000000004B8A                 mov     ecx, esi
.text:0000000000004B8C                 cmovz   rdi, rax
.text:0000000000004B90                 mov     eax, esi
.text:0000000000004B92                 and     ecx, 1Fh
.text:0000000000004B95                 shr     al, 5
.text:0000000000004B98                 movzx   eax, al
.text:0000000000004B9B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004BA0                 mov     esi, [rdi]
.text:0000000000004BA2                 mov     eax, esi
.text:0000000000004BA4                 shr     eax, cl
.text:0000000000004BA6                 xor     edx, eax
.text:0000000000004BA8                 and     eax, 1
.text:0000000000004BAB                 and     edx, 1
.text:0000000000004BAE                 shl     edx, cl
.text:0000000000004BB0                 xor     edx, esi
.text:0000000000004BB2                 mov     [rdi], edx
.text:0000000000004BB4                 retn
.text:0000000000004BB4 ; } // starts at 4B80
.text:0000000000004BB4 set_char_quoting endp
.text:0000000000004BB4
.text:0000000000004BB4 ; ---------------------------------------------------------------------------
.text:0000000000004BB5                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BC0
.text:0000000000004BC0
.text:0000000000004BC0                 public set_quoting_flags
.text:0000000000004BC0 set_quoting_flags proc near
.text:0000000000004BC0 ; __unwind {
.text:0000000000004BC0                 lea     rax, default_quoting_options
.text:0000000000004BC7                 test    rdi, rdi
.text:0000000000004BCA                 cmovz   rdi, rax
.text:0000000000004BCE                 mov     eax, [rdi+4]
.text:0000000000004BD1                 mov     [rdi+4], esi
.text:0000000000004BD4                 retn
.text:0000000000004BD4 ; } // starts at 4BC0
.text:0000000000004BD4 set_quoting_flags endp
.text:0000000000004BD4
.text:0000000000004BD4 ; ---------------------------------------------------------------------------
.text:0000000000004BD5                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BE0
.text:0000000000004BE0 ; Attributes: info_from_lumina
.text:0000000000004BE0
.text:0000000000004BE0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004BE0                 public set_custom_quoting
.text:0000000000004BE0 set_custom_quoting proc near
.text:0000000000004BE0 ; __unwind {
.text:0000000000004BE0                 lea     rax, default_quoting_options
.text:0000000000004BE7                 test    rdi, rdi
.text:0000000000004BEA                 cmovz   rdi, rax
.text:0000000000004BEE                 test    rsi, rsi
.text:0000000000004BF1                 mov     dword ptr [rdi], 0Ah
.text:0000000000004BF7                 jz      short loc_4C07
.text:0000000000004BF9                 test    rdx, rdx
.text:0000000000004BFC                 jz      short loc_4C07
.text:0000000000004BFE                 mov     [rdi+28h], rsi
.text:0000000000004C02                 mov     [rdi+30h], rdx
.text:0000000000004C06                 retn
.text:0000000000004C07 ; ---------------------------------------------------------------------------
.text:0000000000004C07
.text:0000000000004C07 loc_4C07:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004C07                                         ; set_custom_quoting+1C↑j
.text:0000000000004C07                 sub     rsp, 8
.text:0000000000004C0B                 call    _abort
.text:0000000000004C0B ; } // starts at 4BE0
.text:0000000000004C0B set_custom_quoting endp
.text:0000000000004C0B
.text:0000000000004C10
.text:0000000000004C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C10
.text:0000000000004C10 ; Attributes: info_from_lumina
.text:0000000000004C10
.text:0000000000004C10 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004C10                 public quotearg_buffer
.text:0000000000004C10 quotearg_buffer proc near
.text:0000000000004C10
.text:0000000000004C10 var_40          = qword ptr -40h
.text:0000000000004C10
.text:0000000000004C10 ; __unwind {
.text:0000000000004C10                 push    r15
.text:0000000000004C12                 push    r14
.text:0000000000004C14                 lea     rax, default_quoting_options
.text:0000000000004C1B                 push    r13
.text:0000000000004C1D                 push    r12
.text:0000000000004C1F                 mov     r13, rdi
.text:0000000000004C22                 push    rbp
.text:0000000000004C23                 push    rbx
.text:0000000000004C24                 mov     rbx, r8
.text:0000000000004C27                 mov     r14, rsi
.text:0000000000004C2A                 mov     r15, rdx
.text:0000000000004C2D                 sub     rsp, 18h
.text:0000000000004C31                 test    r8, r8
.text:0000000000004C34                 cmovz   rbx, rax
.text:0000000000004C38                 mov     [rsp+48h+var_40], rcx
.text:0000000000004C3D                 call    ___errno_location
.text:0000000000004C42                 mov     r12d, [rax]
.text:0000000000004C45                 mov     rbp, rax
.text:0000000000004C48                 lea     rax, [rbx+8]
.text:0000000000004C4C                 sub     rsp, 8
.text:0000000000004C50                 mov     r9d, [rbx+4]
.text:0000000000004C54                 push    qword ptr [rbx+30h]
.text:0000000000004C57                 mov     r8d, [rbx]
.text:0000000000004C5A                 push    qword ptr [rbx+28h]
.text:0000000000004C5D                 mov     rdx, r15
.text:0000000000004C60                 push    rax
.text:0000000000004C61                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004C66                 mov     rsi, r14
.text:0000000000004C69                 mov     rdi, r13
.text:0000000000004C6C                 call    quotearg_buffer_restyled
.text:0000000000004C71                 mov     [rbp+0], r12d
.text:0000000000004C75                 add     rsp, 38h
.text:0000000000004C79                 pop     rbx
.text:0000000000004C7A                 pop     rbp
.text:0000000000004C7B                 pop     r12
.text:0000000000004C7D                 pop     r13
.text:0000000000004C7F                 pop     r14
.text:0000000000004C81                 pop     r15
.text:0000000000004C83                 retn
.text:0000000000004C83 ; } // starts at 4C10
.text:0000000000004C83 quotearg_buffer endp
.text:0000000000004C83
.text:0000000000004C83 ; ---------------------------------------------------------------------------
.text:0000000000004C84                 align 10h
.text:0000000000004C90
.text:0000000000004C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C90
.text:0000000000004C90 ; Attributes: info_from_lumina
.text:0000000000004C90
.text:0000000000004C90 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004C90                 public quotearg_alloc_mem
.text:0000000000004C90 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004C90
.text:0000000000004C90 var_5C          = dword ptr -5Ch
.text:0000000000004C90 var_58          = qword ptr -58h
.text:0000000000004C90 var_50          = qword ptr -50h
.text:0000000000004C90 var_48          = qword ptr -48h
.text:0000000000004C90 var_40          = qword ptr -40h
.text:0000000000004C90
.text:0000000000004C90 ; __unwind {
.text:0000000000004C90                 push    r15
.text:0000000000004C92                 push    r14
.text:0000000000004C94                 lea     rax, default_quoting_options
.text:0000000000004C9B                 push    r13
.text:0000000000004C9D                 push    r12
.text:0000000000004C9F                 mov     r12, rdx
.text:0000000000004CA2                 push    rbp
.text:0000000000004CA3                 push    rbx
.text:0000000000004CA4                 mov     rbx, rcx
.text:0000000000004CA7                 mov     r14, rdi
.text:0000000000004CAA                 mov     r15, rsi
.text:0000000000004CAD                 sub     rsp, 38h
.text:0000000000004CB1                 test    rcx, rcx
.text:0000000000004CB4                 cmovz   rbx, rax
.text:0000000000004CB8                 xor     ebp, ebp
.text:0000000000004CBA                 call    ___errno_location
.text:0000000000004CBF                 test    r12, r12
.text:0000000000004CC2                 mov     r13, rax
.text:0000000000004CC5                 mov     eax, [rax]
.text:0000000000004CC7                 setz    bpl
.text:0000000000004CCB                 or      ebp, [rbx+4]
.text:0000000000004CCE                 lea     r10, [rbx+8]
.text:0000000000004CD2                 sub     rsp, 8
.text:0000000000004CD6                 mov     r8d, [rbx]
.text:0000000000004CD9                 mov     rcx, r15
.text:0000000000004CDC                 mov     [rsp+70h+var_5C], eax
.text:0000000000004CE0                 push    qword ptr [rbx+30h]
.text:0000000000004CE3                 mov     rdx, r14
.text:0000000000004CE6                 push    qword ptr [rbx+28h]
.text:0000000000004CE9                 push    r10
.text:0000000000004CEB                 xor     esi, esi
.text:0000000000004CED                 mov     r9d, ebp
.text:0000000000004CF0                 xor     edi, edi
.text:0000000000004CF2                 mov     [rsp+88h+var_48], r10
.text:0000000000004CF7                 call    quotearg_buffer_restyled
.text:0000000000004CFC                 lea     rsi, [rax+1]
.text:0000000000004D00                 mov     [rsp+88h+var_40], rax
.text:0000000000004D05                 add     rsp, 20h
.text:0000000000004D09                 mov     rdi, rsi
.text:0000000000004D0C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004D11                 call    xmalloc
.text:0000000000004D16                 mov     [rsp+68h+var_58], rax
.text:0000000000004D1B                 sub     rsp, 8
.text:0000000000004D1F                 push    qword ptr [rbx+30h]
.text:0000000000004D22                 push    qword ptr [rbx+28h]
.text:0000000000004D25                 mov     r10, [rsp+80h+var_48]
.text:0000000000004D2A                 mov     r9d, ebp
.text:0000000000004D2D                 mov     r8d, [rbx]
.text:0000000000004D30                 mov     rcx, r15
.text:0000000000004D33                 mov     rdx, r14
.text:0000000000004D36                 mov     rdi, rax
.text:0000000000004D39                 push    r10
.text:0000000000004D3B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004D40                 call    quotearg_buffer_restyled
.text:0000000000004D45                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004D49                 add     rsp, 20h
.text:0000000000004D4D                 test    r12, r12
.text:0000000000004D50                 mov     [r13+0], eax
.text:0000000000004D54                 jz      short loc_4D5F
.text:0000000000004D56                 mov     r11, [rsp+68h+var_40]
.text:0000000000004D5B                 mov     [r12], r11
.text:0000000000004D5F
.text:0000000000004D5F loc_4D5F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000004D5F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004D64                 add     rsp, 38h
.text:0000000000004D68                 pop     rbx
.text:0000000000004D69                 pop     rbp
.text:0000000000004D6A                 pop     r12
.text:0000000000004D6C                 pop     r13
.text:0000000000004D6E                 pop     r14
.text:0000000000004D70                 pop     r15
.text:0000000000004D72                 retn
.text:0000000000004D72 ; } // starts at 4C90
.text:0000000000004D72 quotearg_alloc_mem endp
.text:0000000000004D72
.text:0000000000004D72 ; ---------------------------------------------------------------------------
.text:0000000000004D73                 align 20h
.text:0000000000004D80
.text:0000000000004D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D80
.text:0000000000004D80
.text:0000000000004D80                 public quotearg_alloc
.text:0000000000004D80 quotearg_alloc  proc near
.text:0000000000004D80 ; __unwind {
.text:0000000000004D80                 mov     rcx, rdx
.text:0000000000004D83                 xor     edx, edx
.text:0000000000004D85                 jmp     quotearg_alloc_mem
.text:0000000000004D85 ; } // starts at 4D80
.text:0000000000004D85 quotearg_alloc  endp
.text:0000000000004D85
.text:0000000000004D85 ; ---------------------------------------------------------------------------
.text:0000000000004D8A                 align 10h
.text:0000000000004D90
.text:0000000000004D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D90
.text:0000000000004D90 ; Attributes: info_from_lumina
.text:0000000000004D90
.text:0000000000004D90 ; void __cdecl quotearg_free()
.text:0000000000004D90                 public quotearg_free
.text:0000000000004D90 quotearg_free   proc near
.text:0000000000004D90 ; __unwind {
.text:0000000000004D90                 mov     eax, cs:nslots
.text:0000000000004D96                 push    r12
.text:0000000000004D98                 mov     r12, cs:slotvec
.text:0000000000004D9F                 push    rbp
.text:0000000000004DA0                 push    rbx
.text:0000000000004DA1                 cmp     eax, 1
.text:0000000000004DA4                 jle     short loc_4DD1
.text:0000000000004DA6                 sub     eax, 2
.text:0000000000004DA9                 lea     rbx, [r12+18h]
.text:0000000000004DAE                 shl     rax, 4
.text:0000000000004DB2                 lea     rbp, [r12+rax+28h]
.text:0000000000004DB7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004DC0
.text:0000000000004DC0 loc_4DC0:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004DC0                 mov     rdi, [rbx]      ; ptr
.text:0000000000004DC3                 add     rbx, 10h
.text:0000000000004DC7                 call    free
.text:0000000000004DCC                 cmp     rbx, rbp
.text:0000000000004DCF                 jnz     short loc_4DC0
.text:0000000000004DD1
.text:0000000000004DD1 loc_4DD1:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004DD1                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004DD6                 lea     rbx, slot0
.text:0000000000004DDD                 cmp     rdi, rbx
.text:0000000000004DE0                 jz      short loc_4DF9
.text:0000000000004DE2                 call    free
.text:0000000000004DE7                 mov     cs:slotvec0, 100h
.text:0000000000004DF2                 mov     cs:off_20D078, rbx
.text:0000000000004DF9
.text:0000000000004DF9 loc_4DF9:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004DF9                 lea     rbx, slotvec0
.text:0000000000004E00                 cmp     r12, rbx
.text:0000000000004E03                 jz      short loc_4E14
.text:0000000000004E05                 mov     rdi, r12        ; ptr
.text:0000000000004E08                 call    free
.text:0000000000004E0D                 mov     cs:slotvec, rbx
.text:0000000000004E14
.text:0000000000004E14 loc_4E14:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004E14                 pop     rbx
.text:0000000000004E15                 mov     cs:nslots, 1
.text:0000000000004E1F                 pop     rbp
.text:0000000000004E20                 pop     r12
.text:0000000000004E22                 retn
.text:0000000000004E22 ; } // starts at 4D90
.text:0000000000004E22 quotearg_free   endp
.text:0000000000004E22
.text:0000000000004E22 ; ---------------------------------------------------------------------------
.text:0000000000004E23                 align 10h
.text:0000000000004E30
.text:0000000000004E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E30
.text:0000000000004E30
.text:0000000000004E30                 public quotearg_n
.text:0000000000004E30 quotearg_n      proc near
.text:0000000000004E30 ; __unwind {
.text:0000000000004E30                 lea     rcx, default_quoting_options
.text:0000000000004E37                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E3E                 jmp     quotearg_n_options
.text:0000000000004E3E ; } // starts at 4E30
.text:0000000000004E3E quotearg_n      endp
.text:0000000000004E3E
.text:0000000000004E3E ; ---------------------------------------------------------------------------
.text:0000000000004E43                 align 10h
.text:0000000000004E50
.text:0000000000004E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E50
.text:0000000000004E50
.text:0000000000004E50                 public quotearg_n_mem
.text:0000000000004E50 quotearg_n_mem  proc near
.text:0000000000004E50 ; __unwind {
.text:0000000000004E50                 lea     rcx, default_quoting_options
.text:0000000000004E57                 jmp     quotearg_n_options
.text:0000000000004E57 ; } // starts at 4E50
.text:0000000000004E57 quotearg_n_mem  endp
.text:0000000000004E57
.text:0000000000004E57 ; ---------------------------------------------------------------------------
.text:0000000000004E5C                 align 20h
.text:0000000000004E60
.text:0000000000004E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E60
.text:0000000000004E60
.text:0000000000004E60                 public quotearg
.text:0000000000004E60 quotearg        proc near
.text:0000000000004E60 ; __unwind {
.text:0000000000004E60                 lea     rcx, default_quoting_options
.text:0000000000004E67                 mov     rsi, rdi
.text:0000000000004E6A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E71                 xor     edi, edi
.text:0000000000004E73                 jmp     quotearg_n_options
.text:0000000000004E73 ; } // starts at 4E60
.text:0000000000004E73 quotearg        endp
.text:0000000000004E73
.text:0000000000004E73 ; ---------------------------------------------------------------------------
.text:0000000000004E78                 align 20h
.text:0000000000004E80
.text:0000000000004E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E80
.text:0000000000004E80
.text:0000000000004E80                 public quotearg_mem
.text:0000000000004E80 quotearg_mem    proc near
.text:0000000000004E80 ; __unwind {
.text:0000000000004E80                 lea     rcx, default_quoting_options
.text:0000000000004E87                 mov     rdx, rsi
.text:0000000000004E8A                 mov     rsi, rdi
.text:0000000000004E8D                 xor     edi, edi
.text:0000000000004E8F                 jmp     quotearg_n_options
.text:0000000000004E8F ; } // starts at 4E80
.text:0000000000004E8F quotearg_mem    endp
.text:0000000000004E8F
.text:0000000000004E8F ; ---------------------------------------------------------------------------
.text:0000000000004E94                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA0
.text:0000000000004EA0 ; Attributes: info_from_lumina
.text:0000000000004EA0
.text:0000000000004EA0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004EA0                 public quotearg_n_style
.text:0000000000004EA0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004EA0
.text:0000000000004EA0 var_48          = dword ptr -48h
.text:0000000000004EA0 var_44          = qword ptr -44h
.text:0000000000004EA0 var_3C          = qword ptr -3Ch
.text:0000000000004EA0 var_34          = qword ptr -34h
.text:0000000000004EA0 var_2C          = qword ptr -2Ch
.text:0000000000004EA0 var_24          = qword ptr -24h
.text:0000000000004EA0 var_1C          = qword ptr -1Ch
.text:0000000000004EA0 var_14          = dword ptr -14h
.text:0000000000004EA0 var_10          = qword ptr -10h
.text:0000000000004EA0
.text:0000000000004EA0 ; __unwind {
.text:0000000000004EA0                 sub     rsp, 48h
.text:0000000000004EA4                 mov     rax, rdx
.text:0000000000004EA7                 mov     rdx, fs:28h
.text:0000000000004EB0                 mov     [rsp+48h+var_10], rdx
.text:0000000000004EB5                 xor     edx, edx
.text:0000000000004EB7                 cmp     esi, 0Ah
.text:0000000000004EBA                 jz      short loc_4F24
.text:0000000000004EBC                 mov     [rsp+48h+var_48], esi
.text:0000000000004EBF                 mov     rcx, rsp
.text:0000000000004EC2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EC9                 mov     rsi, rax
.text:0000000000004ECC                 mov     [rsp+48h+var_44], 0
.text:0000000000004ED5                 mov     [rsp+48h+var_3C], 0
.text:0000000000004EDE                 mov     [rsp+48h+var_34], 0
.text:0000000000004EE7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004EF0                 mov     [rsp+48h+var_24], 0
.text:0000000000004EF9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004F02                 mov     [rsp+48h+var_14], 0
.text:0000000000004F0A                 call    quotearg_n_options
.text:0000000000004F0F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004F14                 xor     rcx, fs:28h
.text:0000000000004F1D                 jnz     short loc_4F29
.text:0000000000004F1F                 add     rsp, 48h
.text:0000000000004F23                 retn
.text:0000000000004F24 ; ---------------------------------------------------------------------------
.text:0000000000004F24
.text:0000000000004F24 loc_4F24:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004F24                 call    _abort
.text:0000000000004F29 ; ---------------------------------------------------------------------------
.text:0000000000004F29
.text:0000000000004F29 loc_4F29:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004F29                 call    ___stack_chk_fail
.text:0000000000004F29 ; } // starts at 4EA0
.text:0000000000004F29 quotearg_n_style endp
.text:0000000000004F29
.text:0000000000004F29 ; ---------------------------------------------------------------------------
.text:0000000000004F2E                 align 10h
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30 ; Attributes: info_from_lumina
.text:0000000000004F30
.text:0000000000004F30 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004F30                 public quotearg_n_style_mem
.text:0000000000004F30 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004F30
.text:0000000000004F30 var_48          = dword ptr -48h
.text:0000000000004F30 var_44          = qword ptr -44h
.text:0000000000004F30 var_3C          = qword ptr -3Ch
.text:0000000000004F30 var_34          = qword ptr -34h
.text:0000000000004F30 var_2C          = qword ptr -2Ch
.text:0000000000004F30 var_24          = qword ptr -24h
.text:0000000000004F30 var_1C          = qword ptr -1Ch
.text:0000000000004F30 var_14          = dword ptr -14h
.text:0000000000004F30 var_10          = qword ptr -10h
.text:0000000000004F30
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 sub     rsp, 48h
.text:0000000000004F34                 mov     rax, rdx
.text:0000000000004F37                 mov     rdx, rcx
.text:0000000000004F3A                 mov     rcx, fs:28h
.text:0000000000004F43                 mov     [rsp+48h+var_10], rcx
.text:0000000000004F48                 xor     ecx, ecx
.text:0000000000004F4A                 cmp     esi, 0Ah
.text:0000000000004F4D                 jz      short loc_4FB0
.text:0000000000004F4F                 mov     [rsp+48h+var_48], esi
.text:0000000000004F52                 mov     rcx, rsp
.text:0000000000004F55                 mov     rsi, rax
.text:0000000000004F58                 mov     [rsp+48h+var_44], 0
.text:0000000000004F61                 mov     [rsp+48h+var_3C], 0
.text:0000000000004F6A                 mov     [rsp+48h+var_34], 0
.text:0000000000004F73                 mov     [rsp+48h+var_2C], 0
.text:0000000000004F7C                 mov     [rsp+48h+var_24], 0
.text:0000000000004F85                 mov     [rsp+48h+var_1C], 0
.text:0000000000004F8E                 mov     [rsp+48h+var_14], 0
.text:0000000000004F96                 call    quotearg_n_options
.text:0000000000004F9B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004FA0                 xor     rdx, fs:28h
.text:0000000000004FA9                 jnz     short loc_4FB5
.text:0000000000004FAB                 add     rsp, 48h
.text:0000000000004FAF                 retn
.text:0000000000004FB0 ; ---------------------------------------------------------------------------
.text:0000000000004FB0
.text:0000000000004FB0 loc_4FB0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004FB0                 call    _abort
.text:0000000000004FB5 ; ---------------------------------------------------------------------------
.text:0000000000004FB5
.text:0000000000004FB5 loc_4FB5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004FB5                 call    ___stack_chk_fail
.text:0000000000004FB5 ; } // starts at 4F30
.text:0000000000004FB5 quotearg_n_style_mem endp
.text:0000000000004FB5
.text:0000000000004FB5 ; ---------------------------------------------------------------------------
.text:0000000000004FBA                 align 20h
.text:0000000000004FC0
.text:0000000000004FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FC0
.text:0000000000004FC0
.text:0000000000004FC0                 public quotearg_style
.text:0000000000004FC0 quotearg_style  proc near
.text:0000000000004FC0 ; __unwind {
.text:0000000000004FC0                 mov     rdx, rsi
.text:0000000000004FC3                 mov     esi, edi
.text:0000000000004FC5                 xor     edi, edi
.text:0000000000004FC7                 jmp     quotearg_n_style
.text:0000000000004FC7 ; } // starts at 4FC0
.text:0000000000004FC7 quotearg_style  endp
.text:0000000000004FC7
.text:0000000000004FC7 ; ---------------------------------------------------------------------------
.text:0000000000004FCC                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FD0
.text:0000000000004FD0
.text:0000000000004FD0                 public quotearg_style_mem
.text:0000000000004FD0 quotearg_style_mem proc near
.text:0000000000004FD0 ; __unwind {
.text:0000000000004FD0                 mov     rcx, rdx
.text:0000000000004FD3                 mov     rdx, rsi
.text:0000000000004FD6                 mov     esi, edi
.text:0000000000004FD8                 xor     edi, edi
.text:0000000000004FDA                 jmp     quotearg_n_style_mem
.text:0000000000004FDA ; } // starts at 4FD0
.text:0000000000004FDA quotearg_style_mem endp
.text:0000000000004FDA
.text:0000000000004FDA ; ---------------------------------------------------------------------------
.text:0000000000004FDF                 align 20h
.text:0000000000004FE0
.text:0000000000004FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FE0
.text:0000000000004FE0 ; Attributes: info_from_lumina
.text:0000000000004FE0
.text:0000000000004FE0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004FE0                 public quotearg_char_mem
.text:0000000000004FE0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004FE0                                         ; quotearg_colon+C↓j ...
.text:0000000000004FE0
.text:0000000000004FE0 var_48          = xmmword ptr -48h
.text:0000000000004FE0 var_38          = xmmword ptr -38h
.text:0000000000004FE0 var_28          = xmmword ptr -28h
.text:0000000000004FE0 var_18          = qword ptr -18h
.text:0000000000004FE0 var_10          = qword ptr -10h
.text:0000000000004FE0
.text:0000000000004FE0 ; __unwind {
.text:0000000000004FE0                 sub     rsp, 48h
.text:0000000000004FE4                 mov     ecx, edx
.text:0000000000004FE6                 mov     rax, fs:28h
.text:0000000000004FEF                 mov     [rsp+48h+var_10], rax
.text:0000000000004FF4                 xor     eax, eax
.text:0000000000004FF6                 mov     rax, cs:qword_20D230
.text:0000000000004FFD                 mov     r8, rsp
.text:0000000000005000                 and     ecx, 1Fh
.text:0000000000005003                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000500B                 mov     [rsp+48h+var_18], rax
.text:0000000000005010                 mov     eax, edx
.text:0000000000005012                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005016                 shr     al, 5
.text:0000000000005019                 movzx   eax, al
.text:000000000000501C                 lea     r9, [r8+rax*4+8]
.text:0000000000005021                 movdqa  xmm0, cs:xmmword_20D210
.text:0000000000005029                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000502E                 movdqa  xmm0, cs:xmmword_20D220
.text:0000000000005036                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000503B                 mov     edx, [r9]
.text:000000000000503E                 mov     eax, edx
.text:0000000000005040                 shr     eax, cl
.text:0000000000005042                 not     eax
.text:0000000000005044                 and     eax, 1
.text:0000000000005047                 shl     eax, cl
.text:0000000000005049                 mov     rcx, r8
.text:000000000000504C                 xor     eax, edx
.text:000000000000504E                 mov     rdx, rsi
.text:0000000000005051                 mov     rsi, rdi
.text:0000000000005054                 mov     [r9], eax
.text:0000000000005057                 xor     edi, edi
.text:0000000000005059                 call    quotearg_n_options
.text:000000000000505E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005063                 xor     rsi, fs:28h
.text:000000000000506C                 jnz     short loc_5073
.text:000000000000506E                 add     rsp, 48h
.text:0000000000005072                 retn
.text:0000000000005073 ; ---------------------------------------------------------------------------
.text:0000000000005073
.text:0000000000005073 loc_5073:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005073                 call    ___stack_chk_fail
.text:0000000000005073 ; } // starts at 4FE0
.text:0000000000005073 quotearg_char_mem endp
.text:0000000000005073
.text:0000000000005073 ; ---------------------------------------------------------------------------
.text:0000000000005078                 align 20h
.text:0000000000005080
.text:0000000000005080 ; =============== S U B R O U T I N E =======================================
.text:0000000000005080
.text:0000000000005080
.text:0000000000005080                 public quotearg_char
.text:0000000000005080 quotearg_char   proc near
.text:0000000000005080 ; __unwind {
.text:0000000000005080                 movsx   edx, sil
.text:0000000000005084                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000508B                 jmp     quotearg_char_mem
.text:000000000000508B ; } // starts at 5080
.text:000000000000508B quotearg_char   endp
.text:000000000000508B
.text:0000000000005090
.text:0000000000005090 ; =============== S U B R O U T I N E =======================================
.text:0000000000005090
.text:0000000000005090
.text:0000000000005090                 public quotearg_colon
.text:0000000000005090 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005090 ; __unwind {
.text:0000000000005090                 mov     edx, 3Ah ; ':'
.text:0000000000005095                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000509C                 jmp     quotearg_char_mem
.text:000000000000509C ; } // starts at 5090
.text:000000000000509C quotearg_colon  endp
.text:000000000000509C
.text:000000000000509C ; ---------------------------------------------------------------------------
.text:00000000000050A1                 align 10h
.text:00000000000050B0
.text:00000000000050B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050B0
.text:00000000000050B0
.text:00000000000050B0                 public quotearg_colon_mem
.text:00000000000050B0 quotearg_colon_mem proc near
.text:00000000000050B0 ; __unwind {
.text:00000000000050B0                 mov     edx, 3Ah ; ':'
.text:00000000000050B5                 jmp     quotearg_char_mem
.text:00000000000050B5 ; } // starts at 50B0
.text:00000000000050B5 quotearg_colon_mem endp
.text:00000000000050B5
.text:00000000000050B5 ; ---------------------------------------------------------------------------
.text:00000000000050BA                 align 20h
.text:00000000000050C0
.text:00000000000050C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050C0
.text:00000000000050C0 ; Attributes: info_from_lumina
.text:00000000000050C0
.text:00000000000050C0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000050C0                 public quotearg_n_style_colon
.text:00000000000050C0 quotearg_n_style_colon proc near        ; CODE XREF: main+591↑p
.text:00000000000050C0                                         ; main+AFF↑p ...
.text:00000000000050C0
.text:00000000000050C0 var_48          = dword ptr -48h
.text:00000000000050C0 var_44          = qword ptr -44h
.text:00000000000050C0 var_3C          = qword ptr -3Ch
.text:00000000000050C0 var_34          = qword ptr -34h
.text:00000000000050C0 var_2C          = qword ptr -2Ch
.text:00000000000050C0 var_24          = qword ptr -24h
.text:00000000000050C0 var_1C          = qword ptr -1Ch
.text:00000000000050C0 var_14          = dword ptr -14h
.text:00000000000050C0 var_10          = qword ptr -10h
.text:00000000000050C0
.text:00000000000050C0 ; __unwind {
.text:00000000000050C0                 sub     rsp, 48h
.text:00000000000050C4                 mov     rax, rdx
.text:00000000000050C7                 mov     rdx, fs:28h
.text:00000000000050D0                 mov     [rsp+48h+var_10], rdx
.text:00000000000050D5                 xor     edx, edx
.text:00000000000050D7                 cmp     esi, 0Ah
.text:00000000000050DA                 jz      short loc_5144
.text:00000000000050DC                 mov     [rsp+48h+var_48], esi
.text:00000000000050DF                 mov     rcx, rsp
.text:00000000000050E2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000050E9                 mov     rsi, rax
.text:00000000000050EC                 mov     [rsp+48h+var_44], 0
.text:00000000000050F5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000050FE                 mov     [rsp+48h+var_34], 0
.text:0000000000005107                 mov     [rsp+48h+var_2C], 0
.text:0000000000005110                 mov     [rsp+48h+var_24], 0
.text:0000000000005119                 mov     [rsp+48h+var_1C], 0
.text:0000000000005122                 mov     [rsp+48h+var_14], 0
.text:000000000000512A                 call    quotearg_n_options
.text:000000000000512F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005134                 xor     rcx, fs:28h
.text:000000000000513D                 jnz     short loc_5149
.text:000000000000513F                 add     rsp, 48h
.text:0000000000005143                 retn
.text:0000000000005144 ; ---------------------------------------------------------------------------
.text:0000000000005144
.text:0000000000005144 loc_5144:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000005144                 call    _abort
.text:0000000000005149 ; ---------------------------------------------------------------------------
.text:0000000000005149
.text:0000000000005149 loc_5149:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000005149                 call    ___stack_chk_fail
.text:0000000000005149 ; } // starts at 50C0
.text:0000000000005149 quotearg_n_style_colon endp
.text:0000000000005149
.text:0000000000005149 ; ---------------------------------------------------------------------------
.text:000000000000514E                 align 10h
.text:0000000000005150
.text:0000000000005150 ; =============== S U B R O U T I N E =======================================
.text:0000000000005150
.text:0000000000005150 ; Attributes: info_from_lumina
.text:0000000000005150
.text:0000000000005150 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005150                 public quotearg_n_custom_mem
.text:0000000000005150 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005150                                         ; quotearg_custom+12↓j ...
.text:0000000000005150
.text:0000000000005150 var_48          = xmmword ptr -48h
.text:0000000000005150 var_38          = xmmword ptr -38h
.text:0000000000005150 var_28          = xmmword ptr -28h
.text:0000000000005150 var_18          = qword ptr -18h
.text:0000000000005150 var_10          = qword ptr -10h
.text:0000000000005150
.text:0000000000005150 ; __unwind {
.text:0000000000005150                 sub     rsp, 48h
.text:0000000000005154                 mov     r9, rcx
.text:0000000000005157                 mov     rcx, cs:qword_20D230
.text:000000000000515E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005166                 mov     rax, fs:28h
.text:000000000000516F                 mov     [rsp+48h+var_10], rax
.text:0000000000005174                 xor     eax, eax
.text:0000000000005176                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000517A                 test    rsi, rsi
.text:000000000000517D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005182                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005189                 movdqa  xmm0, cs:xmmword_20D210
.text:0000000000005191                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005196                 movdqa  xmm0, cs:xmmword_20D220
.text:000000000000519E                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000051A3                 jz      short loc_51D7
.text:00000000000051A5                 test    rdx, rdx
.text:00000000000051A8                 jz      short loc_51D7
.text:00000000000051AA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000051AF                 mov     [rsp+48h+var_18], rdx
.text:00000000000051B4                 mov     rcx, rsp
.text:00000000000051B7                 mov     rdx, r8
.text:00000000000051BA                 mov     rsi, r9
.text:00000000000051BD                 call    quotearg_n_options
.text:00000000000051C2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000051C7                 xor     rdi, fs:28h
.text:00000000000051D0                 jnz     short loc_51DC
.text:00000000000051D2                 add     rsp, 48h
.text:00000000000051D6                 retn
.text:00000000000051D7 ; ---------------------------------------------------------------------------
.text:00000000000051D7
.text:00000000000051D7 loc_51D7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000051D7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000051D7                 call    _abort
.text:00000000000051DC ; ---------------------------------------------------------------------------
.text:00000000000051DC
.text:00000000000051DC loc_51DC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000051DC                 call    ___stack_chk_fail
.text:00000000000051DC ; } // starts at 5150
.text:00000000000051DC quotearg_n_custom_mem endp
.text:00000000000051DC
.text:00000000000051DC ; ---------------------------------------------------------------------------
.text:00000000000051E1                 align 10h
.text:00000000000051F0
.text:00000000000051F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051F0
.text:00000000000051F0
.text:00000000000051F0                 public quotearg_n_custom
.text:00000000000051F0 quotearg_n_custom proc near
.text:00000000000051F0 ; __unwind {
.text:00000000000051F0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000051F7                 jmp     quotearg_n_custom_mem
.text:00000000000051F7 ; } // starts at 51F0
.text:00000000000051F7 quotearg_n_custom endp
.text:00000000000051F7
.text:00000000000051F7 ; ---------------------------------------------------------------------------
.text:00000000000051FC                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200
.text:0000000000005200                 public quotearg_custom
.text:0000000000005200 quotearg_custom proc near
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 mov     rcx, rdx
.text:0000000000005203                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000520A                 mov     rdx, rsi
.text:000000000000520D                 mov     rsi, rdi
.text:0000000000005210                 xor     edi, edi
.text:0000000000005212                 jmp     quotearg_n_custom_mem
.text:0000000000005212 ; } // starts at 5200
.text:0000000000005212 quotearg_custom endp
.text:0000000000005212
.text:0000000000005212 ; ---------------------------------------------------------------------------
.text:0000000000005217                 align 20h
.text:0000000000005220
.text:0000000000005220 ; =============== S U B R O U T I N E =======================================
.text:0000000000005220
.text:0000000000005220
.text:0000000000005220                 public quotearg_custom_mem
.text:0000000000005220 quotearg_custom_mem proc near
.text:0000000000005220 ; __unwind {
.text:0000000000005220                 mov     r8, rcx
.text:0000000000005223                 mov     rcx, rdx
.text:0000000000005226                 mov     rdx, rsi
.text:0000000000005229                 mov     rsi, rdi
.text:000000000000522C                 xor     edi, edi
.text:000000000000522E                 jmp     quotearg_n_custom_mem
.text:000000000000522E ; } // starts at 5220
.text:000000000000522E quotearg_custom_mem endp
.text:000000000000522E
.text:000000000000522E ; ---------------------------------------------------------------------------
.text:0000000000005233                 align 20h
.text:0000000000005240
.text:0000000000005240 ; =============== S U B R O U T I N E =======================================
.text:0000000000005240
.text:0000000000005240
.text:0000000000005240                 public quote_n_mem
.text:0000000000005240 quote_n_mem     proc near
.text:0000000000005240 ; __unwind {
.text:0000000000005240                 lea     rcx, quote_quoting_options
.text:0000000000005247                 jmp     quotearg_n_options
.text:0000000000005247 ; } // starts at 5240
.text:0000000000005247 quote_n_mem     endp
.text:0000000000005247
.text:0000000000005247 ; ---------------------------------------------------------------------------
.text:000000000000524C                 align 10h
.text:0000000000005250
.text:0000000000005250 ; =============== S U B R O U T I N E =======================================
.text:0000000000005250
.text:0000000000005250
.text:0000000000005250                 public quote_mem
.text:0000000000005250 quote_mem       proc near
.text:0000000000005250 ; __unwind {
.text:0000000000005250                 lea     rcx, quote_quoting_options
.text:0000000000005257                 mov     rdx, rsi
.text:000000000000525A                 mov     rsi, rdi
.text:000000000000525D                 xor     edi, edi
.text:000000000000525F                 jmp     quotearg_n_options
.text:000000000000525F ; } // starts at 5250
.text:000000000000525F quote_mem       endp
.text:000000000000525F
.text:000000000000525F ; ---------------------------------------------------------------------------
.text:0000000000005264                 align 10h
.text:0000000000005270
.text:0000000000005270 ; =============== S U B R O U T I N E =======================================
.text:0000000000005270
.text:0000000000005270
.text:0000000000005270                 public quote_n
.text:0000000000005270 quote_n         proc near
.text:0000000000005270 ; __unwind {
.text:0000000000005270                 lea     rcx, quote_quoting_options
.text:0000000000005277                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000527E                 jmp     quotearg_n_options
.text:000000000000527E ; } // starts at 5270
.text:000000000000527E quote_n         endp
.text:000000000000527E
.text:000000000000527E ; ---------------------------------------------------------------------------
.text:0000000000005283                 align 10h
.text:0000000000005290
.text:0000000000005290 ; =============== S U B R O U T I N E =======================================
.text:0000000000005290
.text:0000000000005290
.text:0000000000005290                 public quote
.text:0000000000005290 quote           proc near               ; CODE XREF: main+317↑p
.text:0000000000005290                                         ; main+37B↑p ...
.text:0000000000005290 ; __unwind {
.text:0000000000005290                 lea     rcx, quote_quoting_options
.text:0000000000005297                 mov     rsi, rdi
.text:000000000000529A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000052A1                 xor     edi, edi
.text:00000000000052A3                 jmp     quotearg_n_options
.text:00000000000052A3 ; } // starts at 5290
.text:00000000000052A3 quote           endp
.text:00000000000052A3
.text:00000000000052A3 ; ---------------------------------------------------------------------------
.text:00000000000052A8                 align 10h
.text:00000000000052B0
.text:00000000000052B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052B0
.text:00000000000052B0
.text:00000000000052B0                 public randint_new
.text:00000000000052B0 randint_new     proc near
.text:00000000000052B0 ; __unwind {
.text:00000000000052B0                 push    rbx
.text:00000000000052B1                 mov     rbx, rdi
.text:00000000000052B4                 mov     edi, 18h
.text:00000000000052B9                 call    xmalloc
.text:00000000000052BE                 mov     [rax], rbx
.text:00000000000052C1                 mov     qword ptr [rax+10h], 0
.text:00000000000052C9                 mov     qword ptr [rax+8], 0
.text:00000000000052D1                 pop     rbx
.text:00000000000052D2                 retn
.text:00000000000052D2 ; } // starts at 52B0
.text:00000000000052D2 randint_new     endp
.text:00000000000052D2
.text:00000000000052D2 ; ---------------------------------------------------------------------------
.text:00000000000052D3                 align 20h
.text:00000000000052E0
.text:00000000000052E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052E0
.text:00000000000052E0
.text:00000000000052E0                 public randint_all_new
.text:00000000000052E0 randint_all_new proc near               ; CODE XREF: main+45C↑p
.text:00000000000052E0                                         ; main+574↑p ...
.text:00000000000052E0 ; __unwind {
.text:00000000000052E0                 push    rbx
.text:00000000000052E1                 call    randread_new
.text:00000000000052E6                 test    rax, rax
.text:00000000000052E9                 jz      short loc_5310
.text:00000000000052EB                 mov     rbx, rax
.text:00000000000052EE                 mov     edi, 18h
.text:00000000000052F3                 call    xmalloc
.text:00000000000052F8                 mov     [rax], rbx
.text:00000000000052FB                 mov     qword ptr [rax+10h], 0
.text:0000000000005303                 mov     qword ptr [rax+8], 0
.text:000000000000530B                 pop     rbx
.text:000000000000530C                 retn
.text:000000000000530C ; ---------------------------------------------------------------------------
.text:000000000000530D                 align 10h
.text:0000000000005310
.text:0000000000005310 loc_5310:                               ; CODE XREF: randint_all_new+9↑j
.text:0000000000005310                 xor     eax, eax
.text:0000000000005312                 pop     rbx
.text:0000000000005313                 retn
.text:0000000000005313 ; } // starts at 52E0
.text:0000000000005313 randint_all_new endp
.text:0000000000005313
.text:0000000000005313 ; ---------------------------------------------------------------------------
.text:0000000000005314                 align 20h
.text:0000000000005320
.text:0000000000005320 ; =============== S U B R O U T I N E =======================================
.text:0000000000005320
.text:0000000000005320
.text:0000000000005320                 public randint_get_source
.text:0000000000005320 randint_get_source proc near
.text:0000000000005320 ; __unwind {
.text:0000000000005320                 mov     rax, [rdi]
.text:0000000000005323                 retn
.text:0000000000005323 ; } // starts at 5320
.text:0000000000005323 randint_get_source endp
.text:0000000000005323
.text:0000000000005323 ; ---------------------------------------------------------------------------
.text:0000000000005324                 align 10h
.text:0000000000005330
.text:0000000000005330 ; =============== S U B R O U T I N E =======================================
.text:0000000000005330
.text:0000000000005330
.text:0000000000005330                 public randint_genmax
.text:0000000000005330 randint_genmax  proc near               ; CODE XREF: main+7C2↑p
.text:0000000000005330                                         ; main+A57↑p ...
.text:0000000000005330
.text:0000000000005330 var_50          = qword ptr -50h
.text:0000000000005330 var_48          = byte ptr -48h
.text:0000000000005330 var_40          = qword ptr -40h
.text:0000000000005330
.text:0000000000005330 ; __unwind {
.text:0000000000005330                 push    r15
.text:0000000000005332                 push    r14
.text:0000000000005334                 lea     r15, [rsi+1]
.text:0000000000005338                 push    r13
.text:000000000000533A                 push    r12
.text:000000000000533C                 mov     r13, rdi
.text:000000000000533F                 push    rbp
.text:0000000000005340                 push    rbx
.text:0000000000005341                 mov     r14, rsi
.text:0000000000005344                 sub     rsp, 28h
.text:0000000000005348                 mov     rbp, [rdi+8]
.text:000000000000534C                 mov     rbx, [rdi+10h]
.text:0000000000005350                 mov     rax, fs:28h
.text:0000000000005359                 mov     [rsp+58h+var_40], rax
.text:000000000000535E                 xor     eax, eax
.text:0000000000005360                 mov     rax, [rdi]
.text:0000000000005363                 lea     r12, [rsp+58h+var_48]
.text:0000000000005368                 mov     [rsp+58h+var_50], rax
.text:000000000000536D                 jmp     short loc_53A5
.text:000000000000536D ; ---------------------------------------------------------------------------
.text:000000000000536F                 align 10h
.text:0000000000005370
.text:0000000000005370 loc_5370:                               ; CODE XREF: randint_genmax+78↓j
.text:0000000000005370                 cmp     rbx, r14
.text:0000000000005373                 jz      loc_53FF
.text:0000000000005379
.text:0000000000005379 loc_5379:                               ; CODE XREF: randint_genmax+C9↓j
.text:0000000000005379                 mov     rax, rbx
.text:000000000000537C                 xor     edx, edx
.text:000000000000537E                 sub     rax, r14
.text:0000000000005381                 div     r15
.text:0000000000005384                 sub     rbx, rdx
.text:0000000000005387                 mov     rdi, rdx
.text:000000000000538A                 mov     rsi, rax
.text:000000000000538D                 xor     edx, edx
.text:000000000000538F                 mov     rax, rbp
.text:0000000000005392                 div     r15
.text:0000000000005395                 cmp     rbp, rbx
.text:0000000000005398                 jbe     loc_5438
.text:000000000000539E                 lea     rbx, [rdi-1]
.text:00000000000053A2                 mov     rbp, rdx
.text:00000000000053A5
.text:00000000000053A5 loc_53A5:                               ; CODE XREF: randint_genmax+3D↑j
.text:00000000000053A5                 cmp     rbx, r14
.text:00000000000053A8                 jnb     short loc_5370
.text:00000000000053AA                 mov     rax, rbx
.text:00000000000053AD                 xor     edx, edx
.text:00000000000053AF                 nop
.text:00000000000053B0
.text:00000000000053B0 loc_53B0:                               ; CODE XREF: randint_genmax+91↓j
.text:00000000000053B0                 shl     rax, 8
.text:00000000000053B4                 add     rdx, 1
.text:00000000000053B8                 add     rax, 0FFh
.text:00000000000053BE                 cmp     r14, rax
.text:00000000000053C1                 ja      short loc_53B0
.text:00000000000053C3                 mov     rdi, [rsp+58h+var_50]
.text:00000000000053C8                 mov     rsi, r12
.text:00000000000053CB                 call    randread
.text:00000000000053D0                 mov     rax, r12
.text:00000000000053D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000053D8
.text:00000000000053D8 loc_53D8:                               ; CODE XREF: randint_genmax+C4↓j
.text:00000000000053D8                 movzx   edx, byte ptr [rax]
.text:00000000000053DB                 shl     rbx, 8
.text:00000000000053DF                 shl     rbp, 8
.text:00000000000053E3                 add     rbx, 0FFh
.text:00000000000053EA                 add     rax, 1
.text:00000000000053EE                 add     rbp, rdx
.text:00000000000053F1                 cmp     r14, rbx
.text:00000000000053F4                 ja      short loc_53D8
.text:00000000000053F6                 cmp     rbx, r14
.text:00000000000053F9                 jnz     loc_5379
.text:00000000000053FF
.text:00000000000053FF loc_53FF:                               ; CODE XREF: randint_genmax+43↑j
.text:00000000000053FF                 mov     qword ptr [r13+10h], 0
.text:0000000000005407                 mov     qword ptr [r13+8], 0
.text:000000000000540F
.text:000000000000540F loc_540F:                               ; CODE XREF: randint_genmax+113↓j
.text:000000000000540F                 mov     rcx, [rsp+58h+var_40]
.text:0000000000005414                 xor     rcx, fs:28h
.text:000000000000541D                 mov     rax, rbp
.text:0000000000005420                 jnz     short loc_5445
.text:0000000000005422                 add     rsp, 28h
.text:0000000000005426                 pop     rbx
.text:0000000000005427                 pop     rbp
.text:0000000000005428                 pop     r12
.text:000000000000542A                 pop     r13
.text:000000000000542C                 pop     r14
.text:000000000000542E                 pop     r15
.text:0000000000005430                 retn
.text:0000000000005430 ; ---------------------------------------------------------------------------
.text:0000000000005431                 align 8
.text:0000000000005438
.text:0000000000005438 loc_5438:                               ; CODE XREF: randint_genmax+68↑j
.text:0000000000005438                 mov     [r13+8], rax
.text:000000000000543C                 mov     [r13+10h], rsi
.text:0000000000005440                 mov     rbp, rdx
.text:0000000000005443                 jmp     short loc_540F
.text:0000000000005445 ; ---------------------------------------------------------------------------
.text:0000000000005445
.text:0000000000005445 loc_5445:                               ; CODE XREF: randint_genmax+F0↑j
.text:0000000000005445                 call    ___stack_chk_fail
.text:0000000000005445 ; } // starts at 5330
.text:0000000000005445 randint_genmax  endp
.text:0000000000005445
.text:0000000000005445 ; ---------------------------------------------------------------------------
.text:000000000000544A                 align 10h
.text:0000000000005450
.text:0000000000005450 ; =============== S U B R O U T I N E =======================================
.text:0000000000005450
.text:0000000000005450
.text:0000000000005450 ; __int64 __fastcall randint_free(void *ptr)
.text:0000000000005450                 public randint_free
.text:0000000000005450 randint_free    proc near
.text:0000000000005450 ; __unwind {
.text:0000000000005450                 push    rbx
.text:0000000000005451                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005458                 mov     rbx, rdi
.text:000000000000545B                 mov     esi, 18h
.text:0000000000005460                 call    ___explicit_bzero_chk
.text:0000000000005465                 mov     rdi, rbx        ; ptr
.text:0000000000005468                 pop     rbx
.text:0000000000005469                 jmp     free
.text:0000000000005469 ; } // starts at 5450
.text:0000000000005469 randint_free    endp
.text:0000000000005469
.text:0000000000005469 ; ---------------------------------------------------------------------------
.text:000000000000546E                 align 10h
.text:0000000000005470
.text:0000000000005470 ; =============== S U B R O U T I N E =======================================
.text:0000000000005470
.text:0000000000005470
.text:0000000000005470 ; __int64 __fastcall randint_all_free(void *ptr)
.text:0000000000005470                 public randint_all_free
.text:0000000000005470 randint_all_free proc near
.text:0000000000005470 ; __unwind {
.text:0000000000005470                 push    r13
.text:0000000000005472                 push    r12
.text:0000000000005474                 push    rbp
.text:0000000000005475                 push    rbx
.text:0000000000005476                 mov     rbx, rdi
.text:0000000000005479                 sub     rsp, 8
.text:000000000000547D                 mov     rdi, [rdi]      ; ptr
.text:0000000000005480                 call    randread_free
.text:0000000000005485                 mov     r12d, eax
.text:0000000000005488                 call    ___errno_location
.text:000000000000548D                 mov     r13d, [rax]
.text:0000000000005490                 mov     rdi, rbx
.text:0000000000005493                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000549A                 mov     esi, 18h
.text:000000000000549F                 mov     rbp, rax
.text:00000000000054A2                 call    ___explicit_bzero_chk
.text:00000000000054A7                 mov     rdi, rbx        ; ptr
.text:00000000000054AA                 call    free
.text:00000000000054AF                 mov     [rbp+0], r13d
.text:00000000000054B3                 add     rsp, 8
.text:00000000000054B7                 mov     eax, r12d
.text:00000000000054BA                 pop     rbx
.text:00000000000054BB                 pop     rbp
.text:00000000000054BC                 pop     r12
.text:00000000000054BE                 pop     r13
.text:00000000000054C0                 retn
.text:00000000000054C0 ; } // starts at 5470
.text:00000000000054C0 randint_all_free endp
.text:00000000000054C0
.text:00000000000054C0 ; ---------------------------------------------------------------------------
.text:00000000000054C1                 align 10h
.text:00000000000054D0
.text:00000000000054D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054D0
.text:00000000000054D0
.text:00000000000054D0 sparse_hash_    proc near               ; DATA XREF: randperm_new+A9↓o
.text:00000000000054D0 ; __unwind {
.text:00000000000054D0                 mov     rax, [rdi]
.text:00000000000054D3                 xor     edx, edx
.text:00000000000054D5                 div     rsi
.text:00000000000054D8                 mov     rax, rdx
.text:00000000000054DB                 retn
.text:00000000000054DB ; } // starts at 54D0
.text:00000000000054DB sparse_hash_    endp
.text:00000000000054DB
.text:00000000000054DB ; ---------------------------------------------------------------------------
.text:00000000000054DC                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0
.text:00000000000054E0 sparse_cmp_     proc near               ; DATA XREF: randperm_new+A2↓o
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 mov     rax, [rsi]
.text:00000000000054E3                 cmp     [rdi], rax
.text:00000000000054E6                 setz    al
.text:00000000000054E9                 retn
.text:00000000000054E9 ; } // starts at 54E0
.text:00000000000054E9 sparse_cmp_     endp
.text:00000000000054E9
.text:00000000000054E9 ; ---------------------------------------------------------------------------
.text:00000000000054EA                 align 10h
.text:00000000000054F0
.text:00000000000054F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054F0
.text:00000000000054F0
.text:00000000000054F0                 public randperm_bound
.text:00000000000054F0 randperm_bound  proc near               ; CODE XREF: main+5C8↑p
.text:00000000000054F0 ; __unwind {
.text:00000000000054F0                 mov     rax, rsi
.text:00000000000054F3                 sub     rax, 1
.text:00000000000054F7                 jz      short locret_5515
.text:00000000000054F9                 xor     esi, esi
.text:00000000000054FB                 nop     dword ptr [rax+rax+00h]
.text:0000000000005500
.text:0000000000005500 loc_5500:                               ; CODE XREF: randperm_bound+17↓j
.text:0000000000005500                 add     rsi, 1
.text:0000000000005504                 shr     rax, 1
.text:0000000000005507                 jnz     short loc_5500
.text:0000000000005509                 imul    rdi, rsi
.text:000000000000550D                 lea     rax, [rdi+7]
.text:0000000000005511                 shr     rax, 3
.text:0000000000005515
.text:0000000000005515 locret_5515:                            ; CODE XREF: randperm_bound+7↑j
.text:0000000000005515                 rep retn
.text:0000000000005515 ; } // starts at 54F0
.text:0000000000005515 randperm_bound  endp
.text:0000000000005515
.text:0000000000005515 ; ---------------------------------------------------------------------------
.text:0000000000005517                 align 20h
.text:0000000000005520
.text:0000000000005520 ; =============== S U B R O U T I N E =======================================
.text:0000000000005520
.text:0000000000005520
.text:0000000000005520                 public randperm_new
.text:0000000000005520 randperm_new    proc near               ; CODE XREF: main+5FE↑p
.text:0000000000005520                                         ; main+CCF↑p
.text:0000000000005520
.text:0000000000005520 var_94          = dword ptr -94h
.text:0000000000005520 ptr             = qword ptr -90h
.text:0000000000005520 var_88          = qword ptr -88h
.text:0000000000005520 var_80          = qword ptr -80h
.text:0000000000005520 var_78          = qword ptr -78h
.text:0000000000005520 var_70          = qword ptr -70h
.text:0000000000005520 var_68          = qword ptr -68h
.text:0000000000005520 var_60          = qword ptr -60h
.text:0000000000005520 var_58          = qword ptr -58h
.text:0000000000005520 var_50          = qword ptr -50h
.text:0000000000005520 var_40          = qword ptr -40h
.text:0000000000005520
.text:0000000000005520 ; __unwind {
.text:0000000000005520                 push    r15
.text:0000000000005522                 push    r14
.text:0000000000005524                 push    r13
.text:0000000000005526                 push    r12
.text:0000000000005528                 push    rbp
.text:0000000000005529                 push    rbx
.text:000000000000552A                 sub     rsp, 68h
.text:000000000000552E                 mov     rax, fs:28h
.text:0000000000005537                 mov     [rsp+98h+var_40], rax
.text:000000000000553C                 xor     eax, eax
.text:000000000000553E                 test    rsi, rsi
.text:0000000000005541                 jz      loc_57E8
.text:0000000000005547                 cmp     rsi, 1
.text:000000000000554B                 mov     r13, rdi
.text:000000000000554E                 mov     r12, rsi
.text:0000000000005551                 mov     rbp, rdx
.text:0000000000005554                 jnz     short loc_55A0
.text:0000000000005556                 mov     edi, 8
.text:000000000000555B                 call    xmalloc
.text:0000000000005560                 lea     rsi, [rbp-1]
.text:0000000000005564                 mov     rbx, rax
.text:0000000000005567                 mov     rdi, r13
.text:000000000000556A                 call    randint_genmax
.text:000000000000556F                 mov     [rbx], rax
.text:0000000000005572
.text:0000000000005572 loc_5572:                               ; CODE XREF: randperm_new+2BD↓j
.text:0000000000005572                                         ; randperm_new+2CA↓j ...
.text:0000000000005572                 mov     rdx, [rsp+98h+var_40]
.text:0000000000005577                 xor     rdx, fs:28h
.text:0000000000005580                 mov     rax, rbx
.text:0000000000005583                 jnz     loc_5847
.text:0000000000005589                 add     rsp, 68h
.text:000000000000558D                 pop     rbx
.text:000000000000558E                 pop     rbp
.text:000000000000558F                 pop     r12
.text:0000000000005591                 pop     r13
.text:0000000000005593                 pop     r14
.text:0000000000005595                 pop     r15
.text:0000000000005597                 retn
.text:0000000000005597 ; ---------------------------------------------------------------------------
.text:0000000000005598                 align 20h
.text:00000000000055A0
.text:00000000000055A0 loc_55A0:                               ; CODE XREF: randperm_new+34↑j
.text:00000000000055A0                 cmp     rdx, 1FFFFh
.text:00000000000055A7                 jbe     short loc_5628
.text:00000000000055A9                 mov     rax, rdx
.text:00000000000055AC                 xor     edx, edx
.text:00000000000055AE                 div     rsi
.text:00000000000055B1                 cmp     rax, 1Fh
.text:00000000000055B5                 jbe     short loc_5628
.text:00000000000055B7                 mov     r8, cs:free_ptr
.text:00000000000055BE                 lea     rdi, [rsi+rsi]
.text:00000000000055C2                 lea     rcx, sparse_cmp_
.text:00000000000055C9                 lea     rdx, sparse_hash_
.text:00000000000055D0                 xor     esi, esi
.text:00000000000055D2                 call    hash_initialize
.text:00000000000055D7                 test    rax, rax
.text:00000000000055DA                 mov     [rsp+98h+ptr], rax
.text:00000000000055DF                 jz      loc_584C
.text:00000000000055E5                 mov     edx, 8
.text:00000000000055EA                 xor     ecx, ecx
.text:00000000000055EC                 mov     rax, rdx
.text:00000000000055EF                 mul     r12
.text:00000000000055F2                 jo      loc_585B
.text:00000000000055F8
.text:00000000000055F8 loc_55F8:                               ; CODE XREF: randperm_new+340↓j
.text:00000000000055F8                 test    rax, rax
.text:00000000000055FB                 js      loc_584C
.text:0000000000005601                 test    rcx, rcx
.text:0000000000005604                 jnz     loc_584C
.text:000000000000560A                 lea     rdi, ds:0[r12*8]
.text:0000000000005612                 call    xmalloc
.text:0000000000005617                 mov     [rsp+98h+var_94], 1
.text:000000000000561F                 mov     rbx, rax
.text:0000000000005622                 jmp     short loc_5686
.text:0000000000005622 ; ---------------------------------------------------------------------------
.text:0000000000005624                 align 8
.text:0000000000005628
.text:0000000000005628 loc_5628:                               ; CODE XREF: randperm_new+87↑j
.text:0000000000005628                                         ; randperm_new+95↑j
.text:0000000000005628                 mov     edx, 8
.text:000000000000562D                 xor     ecx, ecx
.text:000000000000562F                 mov     rax, rdx
.text:0000000000005632                 mul     rbp
.text:0000000000005635                 jo      loc_5865
.text:000000000000563B
.text:000000000000563B loc_563B:                               ; CODE XREF: randperm_new+34A↓j
.text:000000000000563B                 test    rax, rax
.text:000000000000563E                 js      loc_584C
.text:0000000000005644                 test    rcx, rcx
.text:0000000000005647                 jnz     loc_584C
.text:000000000000564D                 lea     rdi, ds:0[rbp*8]
.text:0000000000005655                 call    xmalloc
.text:000000000000565A                 test    rbp, rbp
.text:000000000000565D                 mov     rbx, rax
.text:0000000000005660                 jz      short loc_5675
.text:0000000000005662                 xor     eax, eax
.text:0000000000005664                 nop     dword ptr [rax+00h]
.text:0000000000005668
.text:0000000000005668 loc_5668:                               ; CODE XREF: randperm_new+153↓j
.text:0000000000005668                 mov     [rbx+rax*8], rax
.text:000000000000566C                 add     rax, 1
.text:0000000000005670                 cmp     rbp, rax
.text:0000000000005673                 jnz     short loc_5668
.text:0000000000005675
.text:0000000000005675 loc_5675:                               ; CODE XREF: randperm_new+140↑j
.text:0000000000005675                 mov     [rsp+98h+var_94], 0
.text:000000000000567D                 mov     [rsp+98h+ptr], 0
.text:0000000000005686
.text:0000000000005686 loc_5686:                               ; CODE XREF: randperm_new+102↑j
.text:0000000000005686                 lea     rax, [rbp-1]
.text:000000000000568A                 xor     ebp, ebp
.text:000000000000568C                 mov     [rsp+98h+var_88], rax
.text:0000000000005691                 lea     rax, [rsp+98h+var_58]
.text:0000000000005696                 mov     [rsp+98h+var_78], rax
.text:000000000000569B                 lea     rax, [rsp+98h+var_68]
.text:00000000000056A0                 mov     [rsp+98h+var_70], rax
.text:00000000000056A5                 jmp     short loc_56CF
.text:00000000000056A5 ; ---------------------------------------------------------------------------
.text:00000000000056A7                 align 10h
.text:00000000000056B0
.text:00000000000056B0 loc_56B0:                               ; CODE XREF: randperm_new+1C9↓j
.text:00000000000056B0                 lea     rax, [rbx+r14*8]
.text:00000000000056B4                 mov     rsi, [rbx+rbp*8]
.text:00000000000056B8                 mov     rcx, [rax]
.text:00000000000056BB                 mov     [rbx+rbp*8], rcx
.text:00000000000056BF                 add     rbp, 1
.text:00000000000056C3                 mov     [rax], rsi
.text:00000000000056C6                 cmp     r12, rbp
.text:00000000000056C9                 jbe     loc_5799
.text:00000000000056CF
.text:00000000000056CF loc_56CF:                               ; CODE XREF: randperm_new+185↑j
.text:00000000000056CF                                         ; randperm_new+273↓j
.text:00000000000056CF                 mov     rsi, [rsp+98h+var_88]
.text:00000000000056D4                 mov     rdi, r13
.text:00000000000056D7                 sub     rsi, rbp
.text:00000000000056DA                 call    randint_genmax
.text:00000000000056DF                 mov     edx, [rsp+98h+var_94]
.text:00000000000056E3                 lea     r14, [rax+rbp]
.text:00000000000056E7                 test    edx, edx
.text:00000000000056E9                 jz      short loc_56B0
.text:00000000000056EB                 mov     rsi, [rsp+98h+var_78]
.text:00000000000056F0                 mov     rdi, [rsp+98h+ptr]
.text:00000000000056F5                 mov     [rsp+98h+var_58], rbp
.text:00000000000056FA                 mov     [rsp+98h+var_50], 0
.text:0000000000005703                 call    hash_delete
.text:0000000000005708                 mov     rsi, [rsp+98h+var_70]
.text:000000000000570D                 mov     rdi, [rsp+98h+ptr]
.text:0000000000005712                 mov     r15, rax
.text:0000000000005715                 mov     [rsp+98h+var_68], r14
.text:000000000000571A                 mov     [rsp+98h+var_60], 0
.text:0000000000005723                 call    hash_delete
.text:0000000000005728                 test    r15, r15
.text:000000000000572B                 mov     r9, rax
.text:000000000000572E                 jz      loc_5810
.text:0000000000005734
.text:0000000000005734 loc_5734:                               ; CODE XREF: randperm_new+30E↓j
.text:0000000000005734                 test    r9, r9
.text:0000000000005737                 jz      loc_57F0
.text:000000000000573D                 mov     r14, [r9+8]
.text:0000000000005741
.text:0000000000005741 loc_5741:                               ; CODE XREF: randperm_new+2E4↓j
.text:0000000000005741                 mov     rax, [r15+8]
.text:0000000000005745                 mov     [r15+8], r14
.text:0000000000005749                 mov     rsi, r15
.text:000000000000574C                 mov     r14, [rsp+98h+ptr]
.text:0000000000005751                 mov     [rsp+98h+var_80], r9
.text:0000000000005756                 mov     [r9+8], rax
.text:000000000000575A                 mov     rdi, r14
.text:000000000000575D                 call    hash_insert
.text:0000000000005762                 test    rax, rax
.text:0000000000005765                 jz      loc_584C
.text:000000000000576B                 mov     r9, [rsp+98h+var_80]
.text:0000000000005770                 mov     rdi, r14
.text:0000000000005773                 mov     rsi, r9
.text:0000000000005776                 call    hash_insert
.text:000000000000577B                 test    rax, rax
.text:000000000000577E                 jz      loc_584C
.text:0000000000005784                 mov     rax, [r15+8]
.text:0000000000005788                 mov     [rbx+rbp*8], rax
.text:000000000000578C                 add     rbp, 1
.text:0000000000005790                 cmp     r12, rbp
.text:0000000000005793                 ja      loc_56CF
.text:0000000000005799
.text:0000000000005799 loc_5799:                               ; CODE XREF: randperm_new+1A9↑j
.text:0000000000005799                 mov     eax, [rsp+98h+var_94]
.text:000000000000579D                 test    eax, eax
.text:000000000000579F                 jnz     loc_5838
.text:00000000000057A5                 mov     edx, 8
.text:00000000000057AA                 xor     ecx, ecx
.text:00000000000057AC                 mov     rax, rdx
.text:00000000000057AF                 mul     r12
.text:00000000000057B2                 jo      loc_5851
.text:00000000000057B8
.text:00000000000057B8 loc_57B8:                               ; CODE XREF: randperm_new+336↓j
.text:00000000000057B8                 test    rax, rax
.text:00000000000057BB                 js      loc_584C
.text:00000000000057C1                 test    rcx, rcx
.text:00000000000057C4                 jnz     loc_584C
.text:00000000000057CA                 lea     rsi, ds:0[r12*8]
.text:00000000000057D2                 mov     rdi, rbx
.text:00000000000057D5                 call    xrealloc
.text:00000000000057DA                 mov     rbx, rax
.text:00000000000057DD                 jmp     loc_5572
.text:00000000000057DD ; ---------------------------------------------------------------------------
.text:00000000000057E2                 align 8
.text:00000000000057E8
.text:00000000000057E8 loc_57E8:                               ; CODE XREF: randperm_new+21↑j
.text:00000000000057E8                 xor     ebx, ebx
.text:00000000000057EA                 jmp     loc_5572
.text:00000000000057EA ; ---------------------------------------------------------------------------
.text:00000000000057EF                 align 10h
.text:00000000000057F0
.text:00000000000057F0 loc_57F0:                               ; CODE XREF: randperm_new+217↑j
.text:00000000000057F0                 mov     edi, 10h
.text:00000000000057F5                 call    xmalloc
.text:00000000000057FA                 mov     r9, rax
.text:00000000000057FD                 mov     [rax+8], r14
.text:0000000000005801                 mov     [rax], r14
.text:0000000000005804                 jmp     loc_5741
.text:0000000000005804 ; ---------------------------------------------------------------------------
.text:0000000000005809                 align 10h
.text:0000000000005810
.text:0000000000005810 loc_5810:                               ; CODE XREF: randperm_new+20E↑j
.text:0000000000005810                 mov     edi, 10h
.text:0000000000005815                 mov     [rsp+98h+var_80], rax
.text:000000000000581A                 call    xmalloc
.text:000000000000581F                 mov     r9, [rsp+98h+var_80]
.text:0000000000005824                 mov     r15, rax
.text:0000000000005827                 mov     [rax+8], rbp
.text:000000000000582B                 mov     [rax], rbp
.text:000000000000582E                 jmp     loc_5734
.text:000000000000582E ; ---------------------------------------------------------------------------
.text:0000000000005833                 align 8
.text:0000000000005838
.text:0000000000005838 loc_5838:                               ; CODE XREF: randperm_new+27F↑j
.text:0000000000005838                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000583D                 call    hash_free
.text:0000000000005842                 jmp     loc_5572
.text:0000000000005847 ; ---------------------------------------------------------------------------
.text:0000000000005847
.text:0000000000005847 loc_5847:                               ; CODE XREF: randperm_new+63↑j
.text:0000000000005847                 call    ___stack_chk_fail
.text:000000000000584C ; ---------------------------------------------------------------------------
.text:000000000000584C
.text:000000000000584C loc_584C:                               ; CODE XREF: randperm_new+BF↑j
.text:000000000000584C                                         ; randperm_new+DB↑j ...
.text:000000000000584C                 call    xalloc_die
.text:0000000000005851 ; ---------------------------------------------------------------------------
.text:0000000000005851
.text:0000000000005851 loc_5851:                               ; CODE XREF: randperm_new+292↑j
.text:0000000000005851                 mov     ecx, 1
.text:0000000000005856                 jmp     loc_57B8
.text:000000000000585B ; ---------------------------------------------------------------------------
.text:000000000000585B
.text:000000000000585B loc_585B:                               ; CODE XREF: randperm_new+D2↑j
.text:000000000000585B                 mov     ecx, 1
.text:0000000000005860                 jmp     loc_55F8
.text:0000000000005865 ; ---------------------------------------------------------------------------
.text:0000000000005865
.text:0000000000005865 loc_5865:                               ; CODE XREF: randperm_new+115↑j
.text:0000000000005865                 mov     ecx, 1
.text:000000000000586A                 jmp     loc_563B
.text:000000000000586A ; } // starts at 5520
.text:000000000000586A randperm_new    endp
.text:000000000000586A
.text:000000000000586A ; ---------------------------------------------------------------------------
.text:000000000000586F                 align 10h
.text:0000000000005870
.text:0000000000005870 ; =============== S U B R O U T I N E =======================================
.text:0000000000005870
.text:0000000000005870 ; Attributes: noreturn
.text:0000000000005870
.text:0000000000005870 randread_error  proc near               ; DATA XREF: randread_new+5A↓o
.text:0000000000005870                                         ; randread_new+C4↓o ...
.text:0000000000005870 ; __unwind {
.text:0000000000005870                 push    rbp
.text:0000000000005871                 push    rbx
.text:0000000000005872                 sub     rsp, 8
.text:0000000000005876                 test    rdi, rdi
.text:0000000000005879                 jz      short loc_58B8
.text:000000000000587B                 call    quote
.text:0000000000005880                 mov     rbp, rax
.text:0000000000005883                 call    ___errno_location
.text:0000000000005888                 cmp     dword ptr [rax], 0
.text:000000000000588B                 mov     rbx, rax
.text:000000000000588E                 mov     edx, 5          ; category
.text:0000000000005893                 jz      short loc_58BD
.text:0000000000005895                 lea     rsi, aS         ; "%s: "
.text:000000000000589C                 xor     edi, edi        ; domainname
.text:000000000000589E                 call    _dcgettext
.text:00000000000058A3
.text:00000000000058A3 loc_58A3:                               ; CODE XREF: randread_error+5B↓j
.text:00000000000058A3                 mov     edi, cs:exit_failure ; status
.text:00000000000058A9                 mov     esi, [rbx]      ; errnum
.text:00000000000058AB                 mov     rdx, rax        ; format
.text:00000000000058AE                 mov     rcx, rbp
.text:00000000000058B1                 xor     eax, eax
.text:00000000000058B3                 call    _error
.text:00000000000058B8
.text:00000000000058B8 loc_58B8:                               ; CODE XREF: randread_error+9↑j
.text:00000000000058B8                 call    _abort
.text:00000000000058BD ; ---------------------------------------------------------------------------
.text:00000000000058BD
.text:00000000000058BD loc_58BD:                               ; CODE XREF: randread_error+23↑j
.text:00000000000058BD                 lea     rsi, aSEndOfFile ; "%s: end of file"
.text:00000000000058C4                 xor     edi, edi        ; domainname
.text:00000000000058C6                 call    _dcgettext
.text:00000000000058CB                 jmp     short loc_58A3
.text:00000000000058CB ; } // starts at 5870
.text:00000000000058CB randread_error  endp
.text:00000000000058CB
.text:00000000000058CB ; ---------------------------------------------------------------------------
.text:00000000000058CD                 align 10h
.text:00000000000058D0
.text:00000000000058D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058D0
.text:00000000000058D0
.text:00000000000058D0                 public randread_new
.text:00000000000058D0 randread_new    proc near               ; CODE XREF: randint_all_new+1↑p
.text:00000000000058D0
.text:00000000000058D0 var_68          = qword ptr -68h
.text:00000000000058D0 var_60          = qword ptr -60h
.text:00000000000058D0 tv              = timeval ptr -58h
.text:00000000000058D0 var_40          = qword ptr -40h
.text:00000000000058D0
.text:00000000000058D0 ; __unwind {
.text:00000000000058D0                 push    r15
.text:00000000000058D2                 push    r14
.text:00000000000058D4                 push    r13
.text:00000000000058D6                 push    r12
.text:00000000000058D8                 push    rbp
.text:00000000000058D9                 push    rbx
.text:00000000000058DA                 sub     rsp, 38h
.text:00000000000058DE                 mov     rax, fs:28h
.text:00000000000058E7                 mov     [rsp+68h+var_40], rax
.text:00000000000058EC                 xor     eax, eax
.text:00000000000058EE                 test    rsi, rsi
.text:00000000000058F1                 jz      loc_5A18
.text:00000000000058F7                 test    rdi, rdi
.text:00000000000058FA                 mov     r12, rdi
.text:00000000000058FD                 mov     rbp, rsi
.text:0000000000005900                 jz      short loc_5980
.text:0000000000005902                 lea     rsi, aRb        ; "rb"
.text:0000000000005909                 call    fopen_safer
.text:000000000000590E                 test    rax, rax
.text:0000000000005911                 mov     r13, rax
.text:0000000000005914                 jz      loc_5B18
.text:000000000000591A                 mov     edi, 1038h
.text:000000000000591F                 call    xmalloc
.text:0000000000005924                 mov     rbx, rax
.text:0000000000005927                 mov     [rax], r13
.text:000000000000592A                 lea     rax, randread_error
.text:0000000000005931                 cmp     rbp, 1000h
.text:0000000000005938                 mov     ecx, 1000h
.text:000000000000593D                 lea     rsi, [rbx+18h]  ; buf
.text:0000000000005941                 cmovbe  rcx, rbp        ; n
.text:0000000000005945                 mov     [rbx+8], rax
.text:0000000000005949                 mov     [rbx+10h], r12
.text:000000000000594D                 xor     edx, edx        ; modes
.text:000000000000594F                 mov     rdi, r13        ; stream
.text:0000000000005952                 call    _setvbuf
.text:0000000000005957
.text:0000000000005957 loc_5957:                               ; CODE XREF: randread_new+13D↓j
.text:0000000000005957                                         ; randread_new+16F↓j ...
.text:0000000000005957                 mov     rdx, [rsp+68h+var_40]
.text:000000000000595C                 xor     rdx, fs:28h
.text:0000000000005965                 mov     rax, rbx
.text:0000000000005968                 jnz     loc_5B1F
.text:000000000000596E                 add     rsp, 38h
.text:0000000000005972                 pop     rbx
.text:0000000000005973                 pop     rbp
.text:0000000000005974                 pop     r12
.text:0000000000005976                 pop     r13
.text:0000000000005978                 pop     r14
.text:000000000000597A                 pop     r15
.text:000000000000597C                 retn
.text:000000000000597C ; ---------------------------------------------------------------------------
.text:000000000000597D                 align 20h
.text:0000000000005980
.text:0000000000005980 loc_5980:                               ; CODE XREF: randread_new+30↑j
.text:0000000000005980                 mov     edi, 1038h
.text:0000000000005985                 call    xmalloc
.text:000000000000598A                 mov     rbx, rax
.text:000000000000598D                 mov     qword ptr [rax], 0
.text:0000000000005994                 lea     rax, randread_error
.text:000000000000599B                 lea     rdi, aDevUrandom ; "/dev/urandom"
.text:00000000000059A2                 xor     esi, esi        ; oflag
.text:00000000000059A4                 mov     qword ptr [rbx+10h], 0
.text:00000000000059AC                 mov     [rbx+8], rax
.text:00000000000059B0                 mov     qword ptr [rbx+18h], 0
.text:00000000000059B8                 xor     eax, eax
.text:00000000000059BA                 call    _open
.text:00000000000059BF                 test    eax, eax
.text:00000000000059C1                 lea     r13, [rbx+20h]
.text:00000000000059C5                 mov     r15d, eax
.text:00000000000059C8                 js      short loc_5A48
.text:00000000000059CA                 cmp     rbp, 800h
.text:00000000000059D1                 mov     rdx, rbp
.text:00000000000059D4                 mov     r14d, 800h
.text:00000000000059DA                 cmova   rdx, r14
.text:00000000000059DE                 mov     ecx, 1018h
.text:00000000000059E3                 mov     rsi, r13
.text:00000000000059E6                 mov     edi, eax
.text:00000000000059E8                 call    ___read_chk
.text:00000000000059ED                 mov     edi, r15d       ; fd
.text:00000000000059F0                 mov     rbp, rax
.text:00000000000059F3                 call    _close
.text:00000000000059F8                 cmp     rbp, 7FFh
.text:00000000000059FF                 jle     loc_5B24
.text:0000000000005A05
.text:0000000000005A05 loc_5A05:                               ; CODE XREF: randread_new+1F6↓j
.text:0000000000005A05                                         ; randread_new+223↓j ...
.text:0000000000005A05                 mov     rdi, r13
.text:0000000000005A08                 call    isaac_seed
.text:0000000000005A0D                 jmp     loc_5957
.text:0000000000005A0D ; ---------------------------------------------------------------------------
.text:0000000000005A12                 align 8
.text:0000000000005A18
.text:0000000000005A18 loc_5A18:                               ; CODE XREF: randread_new+21↑j
.text:0000000000005A18                 mov     edi, 1038h
.text:0000000000005A1D                 call    xmalloc
.text:0000000000005A22                 mov     rbx, rax
.text:0000000000005A25                 mov     qword ptr [rax], 0
.text:0000000000005A2C                 lea     rax, randread_error
.text:0000000000005A33                 mov     qword ptr [rbx+10h], 0
.text:0000000000005A3B                 mov     [rbx+8], rax
.text:0000000000005A3F                 jmp     loc_5957
.text:0000000000005A3F ; ---------------------------------------------------------------------------
.text:0000000000005A44                 align 8
.text:0000000000005A48
.text:0000000000005A48 loc_5A48:                               ; CODE XREF: randread_new+F8↑j
.text:0000000000005A48                 lea     r12, [rsp+68h+tv]
.text:0000000000005A4D                 xor     esi, esi        ; tz
.text:0000000000005A4F                 mov     r14d, 18h
.text:0000000000005A55                 mov     rdi, r12        ; tv
.text:0000000000005A58                 call    _gettimeofday
.text:0000000000005A5D                 movdqa  xmm0, xmmword ptr [rsp+68h+tv.tv_sec]
.text:0000000000005A63                 movups  xmmword ptr [rbx+20h], xmm0
.text:0000000000005A67                 call    _getpid
.text:0000000000005A6C                 mov     [rbx+30h], eax
.text:0000000000005A6F                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000005A73                 call    _getppid
.text:0000000000005A78                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000005A7C                 mov     [rbx+34h], eax
.text:0000000000005A7F
.text:0000000000005A7F loc_5A7F:                               ; CODE XREF: randread_new+324↓j
.text:0000000000005A7F                 mov     ebp, 800h
.text:0000000000005A84                 mov     eax, 4
.text:0000000000005A89                 sub     rbp, r14
.text:0000000000005A8C                 cmp     rbp, 4
.text:0000000000005A90                 cmova   rbp, rax
.text:0000000000005A94                 call    _getuid
.text:0000000000005A99                 test    ebp, ebp
.text:0000000000005A9B                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000005A9F                 lea     rcx, [r13+r14+0]
.text:0000000000005AA4                 mov     esi, ebp
.text:0000000000005AA6                 jz      short loc_5ABC
.text:0000000000005AA8                 xor     eax, eax
.text:0000000000005AAA
.text:0000000000005AAA loc_5AAA:                               ; CODE XREF: randread_new+1EA↓j
.text:0000000000005AAA                 mov     edx, eax
.text:0000000000005AAC                 add     eax, 1
.text:0000000000005AAF                 movzx   edi, byte ptr [r12+rdx]
.text:0000000000005AB4                 cmp     eax, esi
.text:0000000000005AB6                 mov     [rcx+rdx], dil
.text:0000000000005ABA                 jb      short loc_5AAA
.text:0000000000005ABC
.text:0000000000005ABC loc_5ABC:                               ; CODE XREF: randread_new+1D6↑j
.text:0000000000005ABC                 add     rbp, r14
.text:0000000000005ABF                 cmp     rbp, 7FFh
.text:0000000000005AC6                 ja      loc_5A05
.text:0000000000005ACC                 call    _getgid
.text:0000000000005AD1                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000005AD5                 mov     eax, 800h
.text:0000000000005ADA                 mov     edx, 4
.text:0000000000005ADF                 sub     rax, rbp
.text:0000000000005AE2                 lea     rcx, [r13+rbp+0]
.text:0000000000005AE7                 cmp     rax, 4
.text:0000000000005AEB                 cmova   rax, rdx
.text:0000000000005AEF                 test    eax, eax
.text:0000000000005AF1                 mov     esi, eax
.text:0000000000005AF3                 jz      loc_5A05
.text:0000000000005AF9                 xor     eax, eax
.text:0000000000005AFB
.text:0000000000005AFB loc_5AFB:                               ; CODE XREF: randread_new+23B↓j
.text:0000000000005AFB                 mov     edx, eax
.text:0000000000005AFD                 add     eax, 1
.text:0000000000005B00                 movzx   edi, byte ptr [r12+rdx]
.text:0000000000005B05                 cmp     eax, esi
.text:0000000000005B07                 mov     [rcx+rdx], dil
.text:0000000000005B0B                 jb      short loc_5AFB
.text:0000000000005B0D                 jmp     loc_5A05
.text:0000000000005B0D ; ---------------------------------------------------------------------------
.text:0000000000005B12                 align 8
.text:0000000000005B18
.text:0000000000005B18 loc_5B18:                               ; CODE XREF: randread_new+44↑j
.text:0000000000005B18                 xor     ebx, ebx
.text:0000000000005B1A                 jmp     loc_5957
.text:0000000000005B1F ; ---------------------------------------------------------------------------
.text:0000000000005B1F
.text:0000000000005B1F loc_5B1F:                               ; CODE XREF: randread_new+98↑j
.text:0000000000005B1F                 call    ___stack_chk_fail
.text:0000000000005B24 ; ---------------------------------------------------------------------------
.text:0000000000005B24
.text:0000000000005B24 loc_5B24:                               ; CODE XREF: randread_new+12F↑j
.text:0000000000005B24                 test    rbp, rbp
.text:0000000000005B27                 mov     r15, r14
.text:0000000000005B2A                 mov     eax, 10h
.text:0000000000005B2F                 cmovs   rbp, r12
.text:0000000000005B33                 lea     r12, [rsp+68h+tv]
.text:0000000000005B38                 sub     r15, rbp
.text:0000000000005B3B                 cmp     r15, 10h
.text:0000000000005B3F                 mov     rdi, r12        ; tv
.text:0000000000005B42                 cmova   r15, rax
.text:0000000000005B46                 xor     esi, esi        ; tz
.text:0000000000005B48                 call    _gettimeofday
.text:0000000000005B4D                 lea     rax, [r13+rbp+0]
.text:0000000000005B52                 add     rbp, r15
.text:0000000000005B55                 mov     ecx, r15d
.text:0000000000005B58                 cmp     rbp, 7FFh
.text:0000000000005B5F                 mov     rsi, r12
.text:0000000000005B62                 mov     rdi, rax
.text:0000000000005B65                 rep movsb
.text:0000000000005B67                 ja      loc_5A05
.text:0000000000005B6D                 mov     r15, r14
.text:0000000000005B70                 mov     r8d, 4
.text:0000000000005B76                 sub     r15, rbp
.text:0000000000005B79                 mov     [rsp+68h+var_60], r8
.text:0000000000005B7E                 cmp     r15, 4
.text:0000000000005B82                 cmova   r15, r8
.text:0000000000005B86                 lea     rdx, [rbp+r15+0]
.text:0000000000005B8B                 add     rbp, r13
.text:0000000000005B8E                 mov     [rsp+68h+var_68], rdx
.text:0000000000005B92                 call    _getpid
.text:0000000000005B97                 mov     rdx, [rsp+68h+var_68]
.text:0000000000005B9B                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000005B9F                 mov     ecx, r15d
.text:0000000000005BA2                 mov     rdi, rbp
.text:0000000000005BA5                 mov     rsi, r12
.text:0000000000005BA8                 mov     r8, [rsp+68h+var_60]
.text:0000000000005BAD                 rep movsb
.text:0000000000005BAF                 cmp     rdx, 7FFh
.text:0000000000005BB6                 jg      loc_5A05
.text:0000000000005BBC                 sub     r14, rdx
.text:0000000000005BBF                 cmp     r14, 4
.text:0000000000005BC3                 cmova   r14, r8
.text:0000000000005BC7                 call    _getppid
.text:0000000000005BCC                 mov     rdx, [rsp+68h+var_68]
.text:0000000000005BD0                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000005BD4                 mov     ecx, r14d
.text:0000000000005BD7                 mov     rsi, r12
.text:0000000000005BDA                 lea     rax, [r13+rdx+0]
.text:0000000000005BDF                 add     r14, rdx
.text:0000000000005BE2                 cmp     r14, 7FFh
.text:0000000000005BE9                 mov     rdi, rax
.text:0000000000005BEC                 rep movsb
.text:0000000000005BEE                 ja      loc_5A05
.text:0000000000005BF4                 jmp     loc_5A7F
.text:0000000000005BF4 ; } // starts at 58D0
.text:0000000000005BF4 randread_new    endp
.text:0000000000005BF4
.text:0000000000005BF4 ; ---------------------------------------------------------------------------
.text:0000000000005BF9                 align 20h
.text:0000000000005C00
.text:0000000000005C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C00
.text:0000000000005C00
.text:0000000000005C00                 public randread_set_handler
.text:0000000000005C00 randread_set_handler proc near
.text:0000000000005C00 ; __unwind {
.text:0000000000005C00                 mov     [rdi+8], rsi
.text:0000000000005C04                 retn
.text:0000000000005C04 ; } // starts at 5C00
.text:0000000000005C04 randread_set_handler endp
.text:0000000000005C04
.text:0000000000005C04 ; ---------------------------------------------------------------------------
.text:0000000000005C05                 align 10h
.text:0000000000005C10
.text:0000000000005C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C10
.text:0000000000005C10
.text:0000000000005C10                 public randread_set_handler_arg
.text:0000000000005C10 randread_set_handler_arg proc near
.text:0000000000005C10 ; __unwind {
.text:0000000000005C10                 mov     [rdi+10h], rsi
.text:0000000000005C14                 retn
.text:0000000000005C14 ; } // starts at 5C10
.text:0000000000005C14 randread_set_handler_arg endp
.text:0000000000005C14
.text:0000000000005C14 ; ---------------------------------------------------------------------------
.text:0000000000005C15                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20
.text:0000000000005C20                 public randread
.text:0000000000005C20 randread        proc near               ; CODE XREF: randint_genmax+9B↑p
.text:0000000000005C20
.text:0000000000005C20 src             = qword ptr -40h
.text:0000000000005C20
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 push    r15
.text:0000000000005C22                 push    r14
.text:0000000000005C24                 push    r13
.text:0000000000005C26                 push    r12
.text:0000000000005C28                 mov     r12, rdi
.text:0000000000005C2B                 push    rbp
.text:0000000000005C2C                 push    rbx
.text:0000000000005C2D                 mov     rbp, rdx
.text:0000000000005C30                 mov     rbx, rsi
.text:0000000000005C33                 sub     rsp, 18h
.text:0000000000005C37                 mov     rcx, [rdi]
.text:0000000000005C3A                 test    rcx, rcx
.text:0000000000005C3D                 mov     [rsp+48h+src], rcx
.text:0000000000005C42                 jz      short loc_5CA8
.text:0000000000005C44                 call    ___errno_location
.text:0000000000005C49                 mov     rcx, [rsp+48h+src]
.text:0000000000005C4E                 mov     r13, rax
.text:0000000000005C51                 jmp     short loc_5C76
.text:0000000000005C51 ; ---------------------------------------------------------------------------
.text:0000000000005C53                 align 8
.text:0000000000005C58
.text:0000000000005C58 loc_5C58:                               ; CODE XREF: randread+70↓j
.text:0000000000005C58                 mov     rax, [r12]
.text:0000000000005C5C                 mov     rdi, [r12+10h]
.text:0000000000005C61                 mov     eax, [rax]
.text:0000000000005C63                 and     eax, 20h
.text:0000000000005C66                 cmovnz  eax, edx
.text:0000000000005C69                 mov     [r13+0], eax
.text:0000000000005C6D                 call    qword ptr [r12+8]
.text:0000000000005C72                 mov     rcx, [r12]      ; stream
.text:0000000000005C76
.text:0000000000005C76 loc_5C76:                               ; CODE XREF: randread+31↑j
.text:0000000000005C76                 mov     rdx, rbp        ; n
.text:0000000000005C79                 mov     rdi, rbx        ; ptr
.text:0000000000005C7C                 mov     esi, 1          ; size
.text:0000000000005C81                 call    _fread_unlocked
.text:0000000000005C86                 add     rbx, rax
.text:0000000000005C89                 sub     rbp, rax
.text:0000000000005C8C                 mov     edx, [r13+0]
.text:0000000000005C90                 jnz     short loc_5C58
.text:0000000000005C92
.text:0000000000005C92 loc_5C92:                               ; CODE XREF: randread+16E↓j
.text:0000000000005C92                 add     rsp, 18h
.text:0000000000005C96                 pop     rbx
.text:0000000000005C97                 pop     rbp
.text:0000000000005C98                 pop     r12
.text:0000000000005C9A                 pop     r13
.text:0000000000005C9C                 pop     r14
.text:0000000000005C9E                 pop     r15
.text:0000000000005CA0                 retn
.text:0000000000005CA0 ; ---------------------------------------------------------------------------
.text:0000000000005CA1                 align 8
.text:0000000000005CA8
.text:0000000000005CA8 loc_5CA8:                               ; CODE XREF: randread+22↑j
.text:0000000000005CA8                 mov     r14, [rdi+18h]
.text:0000000000005CAC                 lea     rax, [rdi+838h]
.text:0000000000005CB3                 lea     r13, [rdi+20h]
.text:0000000000005CB7                 mov     [rsp+48h+src], rax
.text:0000000000005CBC                 cmp     rdx, r14
.text:0000000000005CBF                 jbe     loc_5DA2
.text:0000000000005CC5
.text:0000000000005CC5 loc_5CC5:                               ; CODE XREF: randread+14A↓j
.text:0000000000005CC5                 mov     esi, 800h
.text:0000000000005CCA                 mov     rdi, rbx        ; dest
.text:0000000000005CCD                 mov     rdx, r14        ; n
.text:0000000000005CD0                 sub     rsi, r14
.text:0000000000005CD3                 add     rsi, [rsp+48h+src] ; src
.text:0000000000005CD8                 add     rbx, r14
.text:0000000000005CDB                 sub     rbp, r14
.text:0000000000005CDE                 call    _memcpy
.text:0000000000005CE3                 test    bl, 7
.text:0000000000005CE6                 jnz     short loc_5D50
.text:0000000000005CE8                 cmp     rbp, 7FFh
.text:0000000000005CEF                 jbe     loc_5D93
.text:0000000000005CF5                 lea     r15, [rbp-800h]
.text:0000000000005CFC                 mov     r14, r15
.text:0000000000005CFF                 and     r14d, 7FFh
.text:0000000000005D06                 jmp     short loc_5D1C
.text:0000000000005D06 ; ---------------------------------------------------------------------------
.text:0000000000005D08                 align 10h
.text:0000000000005D10
.text:0000000000005D10 loc_5D10:                               ; CODE XREF: randread+114↓j
.text:0000000000005D10                 cmp     r15, r14
.text:0000000000005D13                 jz      short loc_5D50
.text:0000000000005D15                 sub     r15, 800h
.text:0000000000005D1C
.text:0000000000005D1C loc_5D1C:                               ; CODE XREF: randread+E6↑j
.text:0000000000005D1C                 mov     rsi, rbx
.text:0000000000005D1F                 mov     rdi, r13
.text:0000000000005D22                 add     rbx, 800h
.text:0000000000005D29                 call    isaac_refill
.text:0000000000005D2E                 test    r15, r15
.text:0000000000005D31                 mov     rbp, r15
.text:0000000000005D34                 jnz     short loc_5D10
.text:0000000000005D36                 mov     qword ptr [r12+18h], 0
.text:0000000000005D3F                 add     rsp, 18h
.text:0000000000005D43                 pop     rbx
.text:0000000000005D44                 pop     rbp
.text:0000000000005D45                 pop     r12
.text:0000000000005D47                 pop     r13
.text:0000000000005D49                 pop     r14
.text:0000000000005D4B                 pop     r15
.text:0000000000005D4D                 retn
.text:0000000000005D4D ; ---------------------------------------------------------------------------
.text:0000000000005D4E                 align 10h
.text:0000000000005D50
.text:0000000000005D50 loc_5D50:                               ; CODE XREF: randread+C6↑j
.text:0000000000005D50                                         ; randread+F3↑j
.text:0000000000005D50                 mov     rsi, [rsp+48h+src]
.text:0000000000005D55                 mov     rdi, r13
.text:0000000000005D58                 mov     r14d, 800h
.text:0000000000005D5E                 call    isaac_refill
.text:0000000000005D63                 cmp     rbp, 800h
.text:0000000000005D6A                 ja      loc_5CC5
.text:0000000000005D70
.text:0000000000005D70 loc_5D70:                               ; CODE XREF: randread+180↓j
.text:0000000000005D70                 mov     r14d, 800h
.text:0000000000005D76
.text:0000000000005D76 loc_5D76:                               ; CODE XREF: randread+194↓j
.text:0000000000005D76                 mov     rsi, [rsp+48h+src] ; src
.text:0000000000005D7B                 mov     rdx, rbp        ; n
.text:0000000000005D7E                 mov     rdi, rbx        ; dest
.text:0000000000005D81                 sub     r14, rbp
.text:0000000000005D84                 call    _memcpy
.text:0000000000005D89                 mov     [r12+18h], r14
.text:0000000000005D8E                 jmp     loc_5C92
.text:0000000000005D93 ; ---------------------------------------------------------------------------
.text:0000000000005D93
.text:0000000000005D93 loc_5D93:                               ; CODE XREF: randread+CF↑j
.text:0000000000005D93                 mov     rsi, [rsp+48h+src]
.text:0000000000005D98                 mov     rdi, r13
.text:0000000000005D9B                 call    isaac_refill
.text:0000000000005DA0                 jmp     short loc_5D70
.text:0000000000005DA2 ; ---------------------------------------------------------------------------
.text:0000000000005DA2
.text:0000000000005DA2 loc_5DA2:                               ; CODE XREF: randread+9F↑j
.text:0000000000005DA2                 mov     r15, rax
.text:0000000000005DA5                 sub     r15, r14
.text:0000000000005DA8                 lea     rax, [r15+800h]
.text:0000000000005DAF                 mov     [rsp+48h+src], rax
.text:0000000000005DB4                 jmp     short loc_5D76
.text:0000000000005DB4 ; } // starts at 5C20
.text:0000000000005DB4 randread        endp
.text:0000000000005DB4
.text:0000000000005DB4 ; ---------------------------------------------------------------------------
.text:0000000000005DB6                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DC0
.text:0000000000005DC0
.text:0000000000005DC0 ; __int64 __fastcall randread_free(void *ptr)
.text:0000000000005DC0                 public randread_free
.text:0000000000005DC0 randread_free   proc near               ; CODE XREF: randint_all_free+10↑p
.text:0000000000005DC0 ; __unwind {
.text:0000000000005DC0                 push    rbp
.text:0000000000005DC1                 push    rbx
.text:0000000000005DC2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DC9                 mov     rbx, rdi
.text:0000000000005DCC                 mov     esi, 1038h
.text:0000000000005DD1                 sub     rsp, 8
.text:0000000000005DD5                 mov     rbp, [rdi]
.text:0000000000005DD8                 call    ___explicit_bzero_chk
.text:0000000000005DDD                 mov     rdi, rbx        ; ptr
.text:0000000000005DE0                 call    free
.text:0000000000005DE5                 test    rbp, rbp
.text:0000000000005DE8                 jz      short loc_5E00
.text:0000000000005DEA                 add     rsp, 8
.text:0000000000005DEE                 mov     rdi, rbp        ; stream
.text:0000000000005DF1                 pop     rbx
.text:0000000000005DF2                 pop     rbp
.text:0000000000005DF3                 jmp     rpl_fclose
.text:0000000000005DF3 ; ---------------------------------------------------------------------------
.text:0000000000005DF8                 align 20h
.text:0000000000005E00
.text:0000000000005E00 loc_5E00:                               ; CODE XREF: randread_free+28↑j
.text:0000000000005E00                 add     rsp, 8
.text:0000000000005E04                 xor     eax, eax
.text:0000000000005E06                 pop     rbx
.text:0000000000005E07                 pop     rbp
.text:0000000000005E08                 retn
.text:0000000000005E08 ; } // starts at 5DC0
.text:0000000000005E08 randread_free   endp
.text:0000000000005E08
.text:0000000000005E08 ; ---------------------------------------------------------------------------
.text:0000000000005E09                 align 10h
.text:0000000000005E10
.text:0000000000005E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E10
.text:0000000000005E10
.text:0000000000005E10                 public isaac_refill
.text:0000000000005E10 isaac_refill    proc near               ; CODE XREF: randread+109↑p
.text:0000000000005E10                                         ; randread+13E↑p ...
.text:0000000000005E10 ; __unwind {
.text:0000000000005E10                 mov     rax, [rdi+810h]
.text:0000000000005E17                 mov     rdx, [rdi+800h]
.text:0000000000005E1E                 lea     r9, [rdi+400h]
.text:0000000000005E25                 lea     rcx, [rax+1]
.text:0000000000005E29                 mov     rax, rdi
.text:0000000000005E2C                 mov     [rdi+810h], rcx
.text:0000000000005E33                 add     rcx, [rdi+808h]
.text:0000000000005E3A                 nop     word ptr [rax+rax+00h]
.text:0000000000005E40
.text:0000000000005E40 loc_5E40:                               ; CODE XREF: isaac_refill+149↓j
.text:0000000000005E40                 mov     r8, rdx
.text:0000000000005E43                 shl     r8, 15h
.text:0000000000005E47                 xor     rdx, r8
.text:0000000000005E4A                 mov     r8, [rax]
.text:0000000000005E4D                 not     rdx
.text:0000000000005E50                 add     rdx, [rax+400h]
.text:0000000000005E57                 mov     r10, r8
.text:0000000000005E5A                 and     r10d, 7F8h
.text:0000000000005E61                 mov     r11, [rdi+r10]
.text:0000000000005E65                 mov     r10, rdx
.text:0000000000005E68                 shr     r10, 5
.text:0000000000005E6C                 add     r11, rdx
.text:0000000000005E6F                 xor     rdx, r10
.text:0000000000005E72                 add     rcx, r11
.text:0000000000005E75                 mov     [rax], rcx
.text:0000000000005E78                 shr     rcx, 8
.text:0000000000005E7C                 and     ecx, 7F8h
.text:0000000000005E82                 mov     r11, [rdi+rcx]
.text:0000000000005E86                 add     r11, r8
.text:0000000000005E89                 mov     [rsi], r11
.text:0000000000005E8C                 add     rdx, [rax+408h]
.text:0000000000005E93                 mov     rcx, [rax+8]
.text:0000000000005E97                 mov     r10, rdx
.text:0000000000005E9A                 mov     rdx, rcx
.text:0000000000005E9D                 and     edx, 7F8h
.text:0000000000005EA3                 mov     r8, [rdi+rdx]
.text:0000000000005EA7                 mov     rdx, r10
.text:0000000000005EAA                 shl     rdx, 0Ch
.text:0000000000005EAE                 xor     rdx, r10
.text:0000000000005EB1                 add     r8, r10
.text:0000000000005EB4                 add     r8, r11
.text:0000000000005EB7                 mov     [rax+8], r8
.text:0000000000005EBB                 shr     r8, 8
.text:0000000000005EBF                 and     r8d, 7F8h
.text:0000000000005EC6                 add     rcx, [rdi+r8]
.text:0000000000005ECA                 mov     [rsi+8], rcx
.text:0000000000005ECE                 mov     r8, [rax+10h]
.text:0000000000005ED2                 mov     r11, rcx
.text:0000000000005ED5                 add     rdx, [rax+410h]
.text:0000000000005EDC                 mov     rcx, r8
.text:0000000000005EDF                 and     ecx, 7F8h
.text:0000000000005EE5                 mov     r10, [rdi+rcx]
.text:0000000000005EE9                 add     r10, rdx
.text:0000000000005EEC                 mov     rcx, r10
.text:0000000000005EEF                 add     rcx, r11
.text:0000000000005EF2                 mov     [rax+10h], rcx
.text:0000000000005EF6                 shr     rcx, 8
.text:0000000000005EFA                 and     ecx, 7F8h
.text:0000000000005F00                 mov     r10, [rdi+rcx]
.text:0000000000005F04                 mov     rcx, rdx
.text:0000000000005F07                 shr     rcx, 21h
.text:0000000000005F0B                 xor     rdx, rcx
.text:0000000000005F0E                 add     r10, r8
.text:0000000000005F11                 mov     [rsi+10h], r10
.text:0000000000005F15                 mov     rcx, [rax+18h]
.text:0000000000005F19                 add     rdx, [rax+418h]
.text:0000000000005F20                 mov     r8, rcx
.text:0000000000005F23                 and     r8d, 7F8h
.text:0000000000005F2A                 mov     r11, [rdi+r8]
.text:0000000000005F2E                 add     r11, rdx
.text:0000000000005F31                 mov     r8, r11
.text:0000000000005F34                 add     r8, r10
.text:0000000000005F37                 add     rax, 20h ; ' '
.text:0000000000005F3B                 add     rsi, 20h ; ' '
.text:0000000000005F3F                 mov     [rax-8], r8
.text:0000000000005F43                 shr     r8, 8
.text:0000000000005F47                 and     r8d, 7F8h
.text:0000000000005F4E                 add     rcx, [rdi+r8]
.text:0000000000005F52                 mov     [rsi-8], rcx
.text:0000000000005F56                 cmp     rax, r9
.text:0000000000005F59                 jb      loc_5E40
.text:0000000000005F5F                 lea     r9, [rdi+800h]
.text:0000000000005F66                 db      2Eh
.text:0000000000005F66                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005F70
.text:0000000000005F70 loc_5F70:                               ; CODE XREF: isaac_refill+279↓j
.text:0000000000005F70                 mov     r8, rdx
.text:0000000000005F73                 shl     r8, 15h
.text:0000000000005F77                 xor     rdx, r8
.text:0000000000005F7A                 mov     r8, [rax]
.text:0000000000005F7D                 not     rdx
.text:0000000000005F80                 add     rdx, [rax-400h]
.text:0000000000005F87                 mov     r10, r8
.text:0000000000005F8A                 and     r10d, 7F8h
.text:0000000000005F91                 mov     r11, [rdi+r10]
.text:0000000000005F95                 mov     r10, rdx
.text:0000000000005F98                 shr     r10, 5
.text:0000000000005F9C                 add     r11, rdx
.text:0000000000005F9F                 xor     rdx, r10
.text:0000000000005FA2                 add     rcx, r11
.text:0000000000005FA5                 mov     [rax], rcx
.text:0000000000005FA8                 shr     rcx, 8
.text:0000000000005FAC                 and     ecx, 7F8h
.text:0000000000005FB2                 mov     r11, [rdi+rcx]
.text:0000000000005FB6                 add     r11, r8
.text:0000000000005FB9                 mov     [rsi], r11
.text:0000000000005FBC                 add     rdx, [rax-3F8h]
.text:0000000000005FC3                 mov     rcx, [rax+8]
.text:0000000000005FC7                 mov     r10, rdx
.text:0000000000005FCA                 mov     rdx, rcx
.text:0000000000005FCD                 and     edx, 7F8h
.text:0000000000005FD3                 mov     r8, [rdi+rdx]
.text:0000000000005FD7                 mov     rdx, r10
.text:0000000000005FDA                 shl     rdx, 0Ch
.text:0000000000005FDE                 xor     rdx, r10
.text:0000000000005FE1                 add     r8, r10
.text:0000000000005FE4                 add     r8, r11
.text:0000000000005FE7                 mov     [rax+8], r8
.text:0000000000005FEB                 shr     r8, 8
.text:0000000000005FEF                 and     r8d, 7F8h
.text:0000000000005FF6                 add     rcx, [rdi+r8]
.text:0000000000005FFA                 mov     [rsi+8], rcx
.text:0000000000005FFE                 mov     r8, [rax+10h]
.text:0000000000006002                 mov     r11, rcx
.text:0000000000006005                 add     rdx, [rax-3F0h]
.text:000000000000600C                 mov     rcx, r8
.text:000000000000600F                 and     ecx, 7F8h
.text:0000000000006015                 mov     r10, [rdi+rcx]
.text:0000000000006019                 add     r10, rdx
.text:000000000000601C                 mov     rcx, r10
.text:000000000000601F                 add     rcx, r11
.text:0000000000006022                 mov     [rax+10h], rcx
.text:0000000000006026                 shr     rcx, 8
.text:000000000000602A                 and     ecx, 7F8h
.text:0000000000006030                 mov     r10, [rdi+rcx]
.text:0000000000006034                 mov     rcx, rdx
.text:0000000000006037                 shr     rcx, 21h
.text:000000000000603B                 xor     rdx, rcx
.text:000000000000603E                 add     r10, r8
.text:0000000000006041                 mov     [rsi+10h], r10
.text:0000000000006045                 mov     rcx, [rax+18h]
.text:0000000000006049                 add     rdx, [rax-3E8h]
.text:0000000000006050                 mov     r8, rcx
.text:0000000000006053                 and     r8d, 7F8h
.text:000000000000605A                 mov     r11, [rdi+r8]
.text:000000000000605E                 add     r11, rdx
.text:0000000000006061                 mov     r8, r11
.text:0000000000006064                 add     r8, r10
.text:0000000000006067                 add     rax, 20h ; ' '
.text:000000000000606B                 add     rsi, 20h ; ' '
.text:000000000000606F                 mov     [rax-8], r8
.text:0000000000006073                 shr     r8, 8
.text:0000000000006077                 and     r8d, 7F8h
.text:000000000000607E                 add     rcx, [rdi+r8]
.text:0000000000006082                 mov     [rsi-8], rcx
.text:0000000000006086                 cmp     rax, r9
.text:0000000000006089                 jb      loc_5F70
.text:000000000000608F                 mov     [rdi+800h], rdx
.text:0000000000006096                 mov     [rdi+808h], rcx
.text:000000000000609D                 retn
.text:000000000000609D ; } // starts at 5E10
.text:000000000000609D isaac_refill    endp
.text:000000000000609D
.text:000000000000609D ; ---------------------------------------------------------------------------
.text:000000000000609E                 align 20h
.text:00000000000060A0
.text:00000000000060A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060A0
.text:00000000000060A0
.text:00000000000060A0                 public isaac_seed
.text:00000000000060A0 isaac_seed      proc near               ; CODE XREF: randread_new+138↑p
.text:00000000000060A0 ; __unwind {
.text:00000000000060A0                 push    r13
.text:00000000000060A2                 push    r12
.text:00000000000060A4                 lea     r12, [rdi+800h]
.text:00000000000060AB                 push    rbp
.text:00000000000060AC                 mov     rdx, rdi
.text:00000000000060AF                 push    rbx
.text:00000000000060B0                 mov     rax, rdi
.text:00000000000060B3                 mov     rcx, 98F5704F6C44C0ABh
.text:00000000000060BD                 mov     r10, 0AE985BF2CBFC89EDh
.text:00000000000060C7                 mov     rbp, 48FE4A0FA5A09315h
.text:00000000000060D1                 mov     rsi, 82F053DB8355E0CEh
.text:00000000000060DB                 mov     r8, 0B29B2E824A595524h
.text:00000000000060E5                 mov     rbx, 8C0EA5053D4712A0h
.text:00000000000060EF                 mov     r11, 0B9F8B322C73AC862h
.text:00000000000060F9                 mov     r9, 647C4677A2884B7Ch
.text:0000000000006103                 nop     dword ptr [rax+rax+00h]
.text:0000000000006108
.text:0000000000006108 loc_6108:                               ; CODE XREF: isaac_seed+13A↓j
.text:0000000000006108                 add     rsi, [rax+20h]
.text:000000000000610C                 add     rcx, [rax+38h]
.text:0000000000006110                 mov     r13, [rax]
.text:0000000000006113                 add     rbp, [rax+28h]
.text:0000000000006117                 add     r10, [rax+30h]
.text:000000000000611B                 sub     r13, rsi
.text:000000000000611E                 add     r9, r13
.text:0000000000006121                 mov     r13, rcx
.text:0000000000006124                 shr     r13, 9
.text:0000000000006128                 add     rcx, r9
.text:000000000000612B                 xor     rbp, r13
.text:000000000000612E                 mov     r13, [rax+8]
.text:0000000000006132                 sub     r13, rbp
.text:0000000000006135                 add     r11, r13
.text:0000000000006138                 mov     r13, r9
.text:000000000000613B                 shl     r13, 9
.text:000000000000613F                 add     r9, r11
.text:0000000000006142                 xor     r10, r13
.text:0000000000006145                 mov     r13, [rax+10h]
.text:0000000000006149                 sub     r13, r10
.text:000000000000614C                 add     rbx, r13
.text:000000000000614F                 mov     r13, r11
.text:0000000000006152                 shr     r13, 17h
.text:0000000000006156                 add     r11, rbx
.text:0000000000006159                 xor     rcx, r13
.text:000000000000615C                 mov     r13, [rax+18h]
.text:0000000000006160                 sub     r13, rcx
.text:0000000000006163                 add     r8, r13
.text:0000000000006166                 mov     r13, rbx
.text:0000000000006169                 shl     r13, 0Fh
.text:000000000000616D                 add     rbx, r8
.text:0000000000006170                 xor     r9, r13
.text:0000000000006173                 mov     r13, r8
.text:0000000000006176                 sub     rsi, r9
.text:0000000000006179                 shr     r13, 0Eh
.text:000000000000617D                 mov     [rax], r9
.text:0000000000006180                 xor     r11, r13
.text:0000000000006183                 mov     r13, rsi
.text:0000000000006186                 add     r8, rsi
.text:0000000000006189                 sub     rbp, r11
.text:000000000000618C                 shl     r13, 14h
.text:0000000000006190                 mov     [rax+8], r11
.text:0000000000006194                 xor     rbx, r13
.text:0000000000006197                 lea     r13, [rsi+rbp]
.text:000000000000619B                 mov     rsi, rbp
.text:000000000000619E                 sub     r10, rbx
.text:00000000000061A1                 shr     rsi, 11h
.text:00000000000061A5                 mov     [rax+10h], rbx
.text:00000000000061A9                 xor     r8, rsi
.text:00000000000061AC                 mov     rsi, r10
.text:00000000000061AF                 add     rbp, r10
.text:00000000000061B2                 sub     rcx, r8
.text:00000000000061B5                 shl     rsi, 0Eh
.text:00000000000061B9                 mov     [rax+18h], r8
.text:00000000000061BD                 xor     rsi, r13
.text:00000000000061C0                 add     r10, rcx
.text:00000000000061C3                 mov     [rax+28h], rbp
.text:00000000000061C7                 mov     [rax+20h], rsi
.text:00000000000061CB                 mov     [rax+30h], r10
.text:00000000000061CF                 add     rax, 40h ; '@'
.text:00000000000061D3                 mov     [rax-8], rcx
.text:00000000000061D7                 cmp     r12, rax
.text:00000000000061DA                 jnz     loc_6108
.text:00000000000061E0
.text:00000000000061E0 loc_61E0:                               ; CODE XREF: isaac_seed+212↓j
.text:00000000000061E0                 add     rsi, [rdx+20h]
.text:00000000000061E4                 add     rcx, [rdx+38h]
.text:00000000000061E8                 mov     r12, [rdx]
.text:00000000000061EB                 add     rbp, [rdx+28h]
.text:00000000000061EF                 add     r10, [rdx+30h]
.text:00000000000061F3                 sub     r12, rsi
.text:00000000000061F6                 add     r9, r12
.text:00000000000061F9                 mov     r12, rcx
.text:00000000000061FC                 shr     r12, 9
.text:0000000000006200                 add     rcx, r9
.text:0000000000006203                 xor     rbp, r12
.text:0000000000006206                 mov     r12, [rdx+8]
.text:000000000000620A                 sub     r12, rbp
.text:000000000000620D                 add     r11, r12
.text:0000000000006210                 mov     r12, r9
.text:0000000000006213                 shl     r12, 9
.text:0000000000006217                 add     r9, r11
.text:000000000000621A                 xor     r10, r12
.text:000000000000621D                 mov     r12, [rdx+10h]
.text:0000000000006221                 sub     r12, r10
.text:0000000000006224                 add     rbx, r12
.text:0000000000006227                 mov     r12, r11
.text:000000000000622A                 shr     r12, 17h
.text:000000000000622E                 add     r11, rbx
.text:0000000000006231                 xor     rcx, r12
.text:0000000000006234                 mov     r12, [rdx+18h]
.text:0000000000006238                 sub     r12, rcx
.text:000000000000623B                 add     r8, r12
.text:000000000000623E                 mov     r12, rbx
.text:0000000000006241                 shl     r12, 0Fh
.text:0000000000006245                 add     rbx, r8
.text:0000000000006248                 xor     r9, r12
.text:000000000000624B                 mov     r12, r8
.text:000000000000624E                 sub     rsi, r9
.text:0000000000006251                 shr     r12, 0Eh
.text:0000000000006255                 mov     [rdx], r9
.text:0000000000006258                 xor     r11, r12
.text:000000000000625B                 mov     r12, rsi
.text:000000000000625E                 add     r8, rsi
.text:0000000000006261                 sub     rbp, r11
.text:0000000000006264                 shl     r12, 14h
.text:0000000000006268                 mov     [rdx+8], r11
.text:000000000000626C                 xor     rbx, r12
.text:000000000000626F                 lea     r12, [rsi+rbp]
.text:0000000000006273                 mov     rsi, rbp
.text:0000000000006276                 sub     r10, rbx
.text:0000000000006279                 shr     rsi, 11h
.text:000000000000627D                 mov     [rdx+10h], rbx
.text:0000000000006281                 xor     r8, rsi
.text:0000000000006284                 mov     rsi, r10
.text:0000000000006287                 add     rbp, r10
.text:000000000000628A                 sub     rcx, r8
.text:000000000000628D                 shl     rsi, 0Eh
.text:0000000000006291                 mov     [rdx+18h], r8
.text:0000000000006295                 xor     rsi, r12
.text:0000000000006298                 add     r10, rcx
.text:000000000000629B                 mov     [rdx+28h], rbp
.text:000000000000629F                 mov     [rdx+20h], rsi
.text:00000000000062A3                 mov     [rdx+30h], r10
.text:00000000000062A7                 add     rdx, 40h ; '@'
.text:00000000000062AB                 mov     [rdx-8], rcx
.text:00000000000062AF                 cmp     rax, rdx
.text:00000000000062B2                 jnz     loc_61E0
.text:00000000000062B8                 pop     rbx
.text:00000000000062B9                 mov     qword ptr [rdi+810h], 0
.text:00000000000062C4                 mov     qword ptr [rdi+808h], 0
.text:00000000000062CF                 pop     rbp
.text:00000000000062D0                 mov     qword ptr [rdi+800h], 0
.text:00000000000062DB                 pop     r12
.text:00000000000062DD                 pop     r13
.text:00000000000062DF                 retn
.text:00000000000062DF ; } // starts at 60A0
.text:00000000000062DF isaac_seed      endp
.text:00000000000062DF
.text:00000000000062E0
.text:00000000000062E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062E0
.text:00000000000062E0
.text:00000000000062E0 ; __int64 __fastcall fread_file(FILE *stream)
.text:00000000000062E0                 public fread_file
.text:00000000000062E0 fread_file      proc near               ; CODE XREF: main+8EF↑p
.text:00000000000062E0                                         ; internal_read_file+23↓p
.text:00000000000062E0
.text:00000000000062E0 var_E0          = qword ptr -0E0h
.text:00000000000062E0 stat_buf        = stat ptr -0D8h
.text:00000000000062E0 var_40          = qword ptr -40h
.text:00000000000062E0
.text:00000000000062E0 ; __unwind {
.text:00000000000062E0                 push    r15
.text:00000000000062E2                 push    r14
.text:00000000000062E4                 push    r13
.text:00000000000062E6                 push    r12
.text:00000000000062E8                 mov     r13, rdi
.text:00000000000062EB                 push    rbp
.text:00000000000062EC                 push    rbx
.text:00000000000062ED                 sub     rsp, 0B8h
.text:00000000000062F4                 mov     [rsp+0E8h+var_E0], rsi
.text:00000000000062F9                 mov     rax, fs:28h
.text:0000000000006302                 mov     [rsp+0E8h+var_40], rax
.text:000000000000630A                 xor     eax, eax
.text:000000000000630C                 call    _fileno
.text:0000000000006311                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:0000000000006316                 mov     esi, eax        ; fildes
.text:0000000000006318                 mov     edi, 1          ; ver
.text:000000000000631D                 call    ___fxstat
.text:0000000000006322                 test    eax, eax
.text:0000000000006324                 js      short loc_633A
.text:0000000000006326                 mov     eax, [rsp+0E8h+stat_buf.st_mode]
.text:000000000000632A                 and     eax, 0F000h
.text:000000000000632F                 cmp     eax, 8000h
.text:0000000000006334                 jz      loc_6488
.text:000000000000633A
.text:000000000000633A loc_633A:                               ; CODE XREF: fread_file+44↑j
.text:000000000000633A                                         ; fread_file+1B3↓j ...
.text:000000000000633A                 mov     ebx, 2000h
.text:000000000000633F
.text:000000000000633F loc_633F:                               ; CODE XREF: fread_file+1CE↓j
.text:000000000000633F                 mov     rdi, rbx        ; size
.text:0000000000006342                 call    _malloc
.text:0000000000006347                 test    rax, rax
.text:000000000000634A                 mov     r12, rax
.text:000000000000634D                 jz      loc_63F0
.text:0000000000006353                 xor     ebp, ebp
.text:0000000000006355                 mov     r15, 0FFFFFFFFFFFFFFFFh
.text:000000000000635C                 jmp     short loc_639A
.text:000000000000635C ; ---------------------------------------------------------------------------
.text:000000000000635E                 align 20h
.text:0000000000006360
.text:0000000000006360 loc_6360:                               ; CODE XREF: fread_file+DA↓j
.text:0000000000006360                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006364                 jz      loc_6440
.text:000000000000636A                 mov     rax, rbx
.text:000000000000636D                 mov     rdi, r12        ; ptr
.text:0000000000006370                 shr     rax, 1
.text:0000000000006373                 mov     rdx, rax
.text:0000000000006376                 add     rax, rbx
.text:0000000000006379                 not     rdx
.text:000000000000637C                 cmp     rdx, rbx
.text:000000000000637F                 cmovbe  rax, r15
.text:0000000000006383                 mov     rsi, rax        ; size
.text:0000000000006386                 mov     rbx, rax
.text:0000000000006389                 call    _realloc
.text:000000000000638E                 test    rax, rax
.text:0000000000006391                 jz      loc_6420
.text:0000000000006397                 mov     r12, rax
.text:000000000000639A
.text:000000000000639A loc_639A:                               ; CODE XREF: fread_file+7C↑j
.text:000000000000639A                 mov     r14, rbx
.text:000000000000639D                 lea     rdi, [r12+rbp]  ; ptr
.text:00000000000063A1                 mov     rcx, r13        ; stream
.text:00000000000063A4                 sub     r14, rbp
.text:00000000000063A7                 mov     esi, 1          ; size
.text:00000000000063AC                 mov     rdx, r14        ; n
.text:00000000000063AF                 call    _fread
.text:00000000000063B4                 add     rbp, rax
.text:00000000000063B7                 cmp     r14, rax
.text:00000000000063BA                 jz      short loc_6360
.text:00000000000063BC                 call    ___errno_location
.text:00000000000063C1                 mov     rdi, r13        ; stream
.text:00000000000063C4                 mov     r14, rax
.text:00000000000063C7                 mov     r15d, [rax]
.text:00000000000063CA                 call    _ferror
.text:00000000000063CF                 test    eax, eax
.text:00000000000063D1                 jnz     short loc_642B
.text:00000000000063D3                 sub     rbx, 1
.text:00000000000063D7                 cmp     rbx, rbp
.text:00000000000063DA                 ja      loc_6460
.text:00000000000063E0                 mov     rax, [rsp+0E8h+var_E0]
.text:00000000000063E5                 mov     byte ptr [r12+rbp], 0
.text:00000000000063EA                 mov     [rax], rbp
.text:00000000000063ED                 nop     dword ptr [rax]
.text:00000000000063F0
.text:00000000000063F0 loc_63F0:                               ; CODE XREF: fread_file+6D↑j
.text:00000000000063F0                                         ; fread_file+159↓j ...
.text:00000000000063F0                 mov     rcx, [rsp+0E8h+var_40]
.text:00000000000063F8                 xor     rcx, fs:28h
.text:0000000000006401                 mov     rax, r12
.text:0000000000006404                 jnz     loc_64B3
.text:000000000000640A                 add     rsp, 0B8h
.text:0000000000006411                 pop     rbx
.text:0000000000006412                 pop     rbp
.text:0000000000006413                 pop     r12
.text:0000000000006415                 pop     r13
.text:0000000000006417                 pop     r14
.text:0000000000006419                 pop     r15
.text:000000000000641B                 retn
.text:000000000000641B ; ---------------------------------------------------------------------------
.text:000000000000641C                 align 20h
.text:0000000000006420
.text:0000000000006420 loc_6420:                               ; CODE XREF: fread_file+B1↑j
.text:0000000000006420                 call    ___errno_location
.text:0000000000006425                 mov     r15d, [rax]
.text:0000000000006428                 mov     r14, rax
.text:000000000000642B
.text:000000000000642B loc_642B:                               ; CODE XREF: fread_file+F1↑j
.text:000000000000642B                 mov     rdi, r12        ; ptr
.text:000000000000642E                 xor     r12d, r12d
.text:0000000000006431                 call    free
.text:0000000000006436                 mov     [r14], r15d
.text:0000000000006439                 jmp     short loc_63F0
.text:0000000000006439 ; ---------------------------------------------------------------------------
.text:000000000000643B                 align 20h
.text:0000000000006440
.text:0000000000006440 loc_6440:                               ; CODE XREF: fread_file+84↑j
.text:0000000000006440                 call    ___errno_location
.text:0000000000006445                 mov     r15d, 0Ch
.text:000000000000644B                 mov     r14, rax
.text:000000000000644E                 mov     rdi, r12        ; ptr
.text:0000000000006451                 call    free
.text:0000000000006456                 xor     r12d, r12d
.text:0000000000006459                 mov     [r14], r15d
.text:000000000000645C                 jmp     short loc_63F0
.text:000000000000645C ; ---------------------------------------------------------------------------
.text:000000000000645E                 align 20h
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: fread_file+FA↑j
.text:0000000000006460                 lea     rsi, [rbp+1]    ; size
.text:0000000000006464                 mov     rdi, r12        ; ptr
.text:0000000000006467                 call    _realloc
.text:000000000000646C                 test    rax, rax
.text:000000000000646F                 cmovnz  r12, rax
.text:0000000000006473                 mov     rax, [rsp+0E8h+var_E0]
.text:0000000000006478                 mov     byte ptr [r12+rbp], 0
.text:000000000000647D                 mov     [rax], rbp
.text:0000000000006480                 jmp     loc_63F0
.text:0000000000006480 ; ---------------------------------------------------------------------------
.text:0000000000006485                 align 8
.text:0000000000006488
.text:0000000000006488 loc_6488:                               ; CODE XREF: fread_file+54↑j
.text:0000000000006488                 mov     rdi, r13        ; stream
.text:000000000000648B                 call    _ftello
.text:0000000000006490                 test    rax, rax
.text:0000000000006493                 js      loc_633A
.text:0000000000006499                 mov     rbx, [rsp+0E8h+stat_buf.st_size]
.text:000000000000649E                 cmp     rbx, rax
.text:00000000000064A1                 jle     loc_633A
.text:00000000000064A7                 sub     rbx, rax
.text:00000000000064AA                 add     rbx, 1
.text:00000000000064AE                 jmp     loc_633F
.text:00000000000064B3 ; ---------------------------------------------------------------------------
.text:00000000000064B3
.text:00000000000064B3 loc_64B3:                               ; CODE XREF: fread_file+124↑j
.text:00000000000064B3                 call    ___stack_chk_fail
.text:00000000000064B3 ; } // starts at 62E0
.text:00000000000064B3 fread_file      endp
.text:00000000000064B3
.text:00000000000064B3 ; ---------------------------------------------------------------------------
.text:00000000000064B8                 align 20h
.text:00000000000064C0
.text:00000000000064C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064C0
.text:00000000000064C0
.text:00000000000064C0 internal_read_file proc near            ; CODE XREF: read_file+7↓j
.text:00000000000064C0                                         ; read_binary_file+7↓j
.text:00000000000064C0 ; __unwind {
.text:00000000000064C0                 push    r13
.text:00000000000064C2                 push    r12
.text:00000000000064C4                 push    rbp
.text:00000000000064C5                 push    rbx
.text:00000000000064C6                 mov     rbp, rsi
.text:00000000000064C9                 mov     rsi, rdx        ; modes
.text:00000000000064CC                 sub     rsp, 8
.text:00000000000064D0                 call    _fopen
.text:00000000000064D5                 test    rax, rax
.text:00000000000064D8                 jz      short loc_6530
.text:00000000000064DA                 mov     rsi, rbp
.text:00000000000064DD                 mov     rdi, rax        ; stream
.text:00000000000064E0                 mov     rbx, rax
.text:00000000000064E3                 call    fread_file
.text:00000000000064E8                 mov     rbp, rax
.text:00000000000064EB                 call    ___errno_location
.text:00000000000064F0                 mov     rdi, rbx        ; stream
.text:00000000000064F3                 mov     r12, rax
.text:00000000000064F6                 mov     r13d, [rax]
.text:00000000000064F9                 call    rpl_fclose
.text:00000000000064FE                 test    eax, eax
.text:0000000000006500                 jnz     short loc_6510
.text:0000000000006502
.text:0000000000006502 loc_6502:                               ; CODE XREF: internal_read_file+67↓j
.text:0000000000006502                                         ; internal_read_file+72↓j
.text:0000000000006502                 add     rsp, 8
.text:0000000000006506                 mov     rax, rbp
.text:0000000000006509                 pop     rbx
.text:000000000000650A                 pop     rbp
.text:000000000000650B                 pop     r12
.text:000000000000650D                 pop     r13
.text:000000000000650F                 retn
.text:0000000000006510 ; ---------------------------------------------------------------------------
.text:0000000000006510
.text:0000000000006510 loc_6510:                               ; CODE XREF: internal_read_file+40↑j
.text:0000000000006510                 test    rbp, rbp
.text:0000000000006513                 jz      short loc_6521
.text:0000000000006515                 mov     rdi, rbp        ; ptr
.text:0000000000006518                 mov     r13d, [r12]
.text:000000000000651C                 call    free
.text:0000000000006521
.text:0000000000006521 loc_6521:                               ; CODE XREF: internal_read_file+53↑j
.text:0000000000006521                 mov     [r12], r13d
.text:0000000000006525                 xor     ebp, ebp
.text:0000000000006527                 jmp     short loc_6502
.text:0000000000006527 ; ---------------------------------------------------------------------------
.text:0000000000006529                 align 10h
.text:0000000000006530
.text:0000000000006530 loc_6530:                               ; CODE XREF: internal_read_file+18↑j
.text:0000000000006530                 xor     ebp, ebp
.text:0000000000006532                 jmp     short loc_6502
.text:0000000000006532 ; } // starts at 64C0
.text:0000000000006532 internal_read_file endp
.text:0000000000006532
.text:0000000000006532 ; ---------------------------------------------------------------------------
.text:0000000000006534                 align 20h
.text:0000000000006540
.text:0000000000006540 ; =============== S U B R O U T I N E =======================================
.text:0000000000006540
.text:0000000000006540
.text:0000000000006540                 public read_file
.text:0000000000006540 read_file       proc near
.text:0000000000006540 ; __unwind {
.text:0000000000006540                 lea     rdx, aReadError+9 ; "r"
.text:0000000000006547                 jmp     internal_read_file
.text:0000000000006547 ; } // starts at 6540
.text:0000000000006547 read_file       endp
.text:0000000000006547
.text:0000000000006547 ; ---------------------------------------------------------------------------
.text:000000000000654C                 align 10h
.text:0000000000006550
.text:0000000000006550 ; =============== S U B R O U T I N E =======================================
.text:0000000000006550
.text:0000000000006550
.text:0000000000006550                 public read_binary_file
.text:0000000000006550 read_binary_file proc near
.text:0000000000006550 ; __unwind {
.text:0000000000006550                 lea     rdx, aRb        ; "rb"
.text:0000000000006557                 jmp     internal_read_file
.text:0000000000006557 ; } // starts at 6550
.text:0000000000006557 read_binary_file endp
.text:0000000000006557
.text:0000000000006557 ; ---------------------------------------------------------------------------
.text:000000000000655C                 align 20h
.text:0000000000006560
.text:0000000000006560 ; =============== S U B R O U T I N E =======================================
.text:0000000000006560
.text:0000000000006560
.text:0000000000006560 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000006560                 public version_etc_arn
.text:0000000000006560 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_699B↓j
.text:0000000000006560                                         ; version_etc_va:loc_69EB↓p ...
.text:0000000000006560
.text:0000000000006560 var_58          = qword ptr -58h
.text:0000000000006560 var_50          = qword ptr -50h
.text:0000000000006560 var_48          = qword ptr -48h
.text:0000000000006560 var_40          = qword ptr -40h
.text:0000000000006560
.text:0000000000006560 ; __unwind {
.text:0000000000006560                 push    r15
.text:0000000000006562                 push    r14
.text:0000000000006564                 push    r13
.text:0000000000006566                 push    r12
.text:0000000000006568                 mov     r12, r9
.text:000000000000656B                 push    rbp
.text:000000000000656C                 push    rbx
.text:000000000000656D                 mov     rbp, rdi
.text:0000000000006570                 mov     rbx, r8
.text:0000000000006573                 sub     rsp, 28h
.text:0000000000006577                 test    rsi, rsi
.text:000000000000657A                 jz      loc_6698
.text:0000000000006580                 mov     r8, rdx
.text:0000000000006583                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000658A                 mov     r9, rcx
.text:000000000000658D                 xor     eax, eax
.text:000000000000658F                 mov     rcx, rsi
.text:0000000000006592                 mov     esi, 1
.text:0000000000006597                 call    ___fprintf_chk
.text:000000000000659C
.text:000000000000659C loc_659C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000659C                 lea     rsi, aC_0       ; "(C)"
.text:00000000000065A3                 xor     edi, edi        ; domainname
.text:00000000000065A5                 mov     edx, 5          ; category
.text:00000000000065AA                 call    _dcgettext
.text:00000000000065AF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000065B6                 mov     rcx, rax
.text:00000000000065B9                 mov     r8d, 7E3h
.text:00000000000065BF                 mov     esi, 1
.text:00000000000065C4                 mov     rdi, rbp
.text:00000000000065C7                 xor     eax, eax
.text:00000000000065C9                 call    ___fprintf_chk
.text:00000000000065CE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000065D5                 xor     edi, edi        ; domainname
.text:00000000000065D7                 mov     edx, 5          ; category
.text:00000000000065DC                 call    _dcgettext
.text:00000000000065E1                 mov     rsi, rbp        ; stream
.text:00000000000065E4                 mov     rdi, rax        ; s
.text:00000000000065E7                 call    _fputs_unlocked
.text:00000000000065EC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000065F0                 ja      def_6604        ; jumptable 0000000000006604 default case
.text:00000000000065F6                 lea     rdx, jpt_6604
.text:00000000000065FD                 movsxd  rax, ds:(jpt_6604 - 9FACh)[rdx+r12*4]
.text:0000000000006601                 add     rax, rdx
.text:0000000000006604                 jmp     rax             ; switch jump
.text:0000000000006604 ; ---------------------------------------------------------------------------
.text:0000000000006606                 align 10h
.text:0000000000006610
.text:0000000000006610 loc_6610:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006610                                         ; DATA XREF: .rodata:jpt_6604↓o
.text:0000000000006610                 mov     r9, [rbx+38h]   ; jumptable 0000000000006604 case 8
.text:0000000000006614                 mov     rax, [rbx+10h]
.text:0000000000006618                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000661F                 mov     r8, [rbx+8]
.text:0000000000006623                 mov     edx, 5          ; category
.text:0000000000006628                 xor     edi, edi        ; domainname
.text:000000000000662A                 mov     r13, [rbx+30h]
.text:000000000000662E                 mov     r12, [rbx+28h]
.text:0000000000006632                 mov     [rsp+58h+var_48], r9
.text:0000000000006637                 mov     r15, [rbx+20h]
.text:000000000000663B                 mov     r14, [rbx+18h]
.text:000000000000663F                 mov     [rsp+58h+var_58], rax
.text:0000000000006643                 mov     [rsp+58h+var_50], r8
.text:0000000000006648                 mov     rbx, [rbx]
.text:000000000000664B                 call    _dcgettext
.text:0000000000006650                 sub     rsp, 8
.text:0000000000006654
.text:0000000000006654 loc_6654:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000006654                 mov     r9, [rsp+60h+var_48]
.text:0000000000006659                 mov     rdx, rax
.text:000000000000665C                 mov     rcx, rbx
.text:000000000000665F                 mov     esi, 1
.text:0000000000006664                 mov     rdi, rbp
.text:0000000000006667                 xor     eax, eax
.text:0000000000006669                 push    r9
.text:000000000000666B                 push    r13
.text:000000000000666D                 push    r12
.text:000000000000666F                 push    r15
.text:0000000000006671                 push    r14
.text:0000000000006673                 mov     r9, [rsp+88h+var_58]
.text:0000000000006678                 mov     r8, [rsp+88h+var_50]
.text:000000000000667D                 call    ___fprintf_chk
.text:0000000000006682                 add     rsp, 30h
.text:0000000000006686
.text:0000000000006686 loc_6686:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006686                                         ; DATA XREF: .rodata:jpt_6604↓o
.text:0000000000006686                 add     rsp, 28h        ; jumptable 0000000000006604 case 0
.text:000000000000668A                 pop     rbx
.text:000000000000668B                 pop     rbp
.text:000000000000668C                 pop     r12
.text:000000000000668E                 pop     r13
.text:0000000000006690                 pop     r14
.text:0000000000006692                 pop     r15
.text:0000000000006694                 retn
.text:0000000000006694 ; ---------------------------------------------------------------------------
.text:0000000000006695                 align 8
.text:0000000000006698
.text:0000000000006698 loc_6698:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000006698                 mov     r8, rcx
.text:000000000000669B                 mov     rcx, rdx
.text:000000000000669E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:00000000000066A5                 mov     esi, 1
.text:00000000000066AA                 xor     eax, eax
.text:00000000000066AC                 call    ___fprintf_chk
.text:00000000000066B1                 jmp     loc_659C
.text:00000000000066B1 ; ---------------------------------------------------------------------------
.text:00000000000066B6                 align 20h
.text:00000000000066C0
.text:00000000000066C0 loc_66C0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000066C0                                         ; DATA XREF: .rodata:jpt_6604↓o
.text:00000000000066C0                 mov     r10, [rbx+40h]  ; jumptable 0000000000006604 case 9
.text:00000000000066C4                 mov     r9, [rbx+38h]
.text:00000000000066C8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000066CF                 mov     rax, [rbx+10h]
.text:00000000000066D3                 mov     r8, [rbx+8]
.text:00000000000066D7                 mov     edx, 5          ; category
.text:00000000000066DC                 mov     r13, [rbx+30h]
.text:00000000000066E0                 mov     r12, [rbx+28h]
.text:00000000000066E4                 mov     r15, [rbx+20h]
.text:00000000000066E8                 mov     r14, [rbx+18h]
.text:00000000000066EC                 mov     rbx, [rbx]
.text:00000000000066EF                 mov     [rsp+58h+var_40], r10
.text:00000000000066F4                 mov     [rsp+58h+var_48], r9
.text:00000000000066F9                 mov     [rsp+58h+var_58], rax
.text:00000000000066FD                 mov     [rsp+58h+var_50], r8
.text:0000000000006702
.text:0000000000006702 loc_6702:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000006702                 xor     edi, edi        ; domainname
.text:0000000000006704                 call    _dcgettext
.text:0000000000006709                 mov     r10, [rsp+58h+var_40]
.text:000000000000670E                 push    r10
.text:0000000000006710                 jmp     loc_6654
.text:0000000000006710 ; ---------------------------------------------------------------------------
.text:0000000000006715                 align 8
.text:0000000000006718
.text:0000000000006718 loc_6718:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006718                                         ; DATA XREF: .rodata:jpt_6604↓o
.text:0000000000006718                 mov     rbx, [rbx]      ; jumptable 0000000000006604 case 1
.text:000000000000671B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000006722                 mov     edx, 5          ; category
.text:0000000000006727                 xor     edi, edi        ; domainname
.text:0000000000006729                 call    _dcgettext
.text:000000000000672E                 add     rsp, 28h
.text:0000000000006732                 mov     rcx, rbx
.text:0000000000006735                 mov     rdi, rbp
.text:0000000000006738                 pop     rbx
.text:0000000000006739                 pop     rbp
.text:000000000000673A                 pop     r12
.text:000000000000673C                 pop     r13
.text:000000000000673E                 pop     r14
.text:0000000000006740                 pop     r15
.text:0000000000006742                 mov     rdx, rax
.text:0000000000006745                 mov     esi, 1
.text:000000000000674A                 xor     eax, eax
.text:000000000000674C                 jmp     ___fprintf_chk
.text:000000000000674C ; ---------------------------------------------------------------------------
.text:0000000000006751                 align 8
.text:0000000000006758
.text:0000000000006758 loc_6758:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006758                                         ; DATA XREF: .rodata:jpt_6604↓o
.text:0000000000006758                 mov     r12, [rbx+8]    ; jumptable 0000000000006604 case 2
.text:000000000000675C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000006763                 mov     rbx, [rbx]
.text:0000000000006766                 mov     edx, 5          ; category
.text:000000000000676B                 xor     edi, edi        ; domainname
.text:000000000000676D                 call    _dcgettext
.text:0000000000006772                 add     rsp, 28h
.text:0000000000006776                 mov     r8, r12
.text:0000000000006779                 mov     rcx, rbx
.text:000000000000677C                 mov     rdi, rbp
.text:000000000000677F                 mov     rdx, rax
.text:0000000000006782                 mov     esi, 1
.text:0000000000006787                 pop     rbx
.text:0000000000006788                 pop     rbp
.text:0000000000006789                 pop     r12
.text:000000000000678B                 pop     r13
.text:000000000000678D                 pop     r14
.text:000000000000678F                 pop     r15
.text:0000000000006791                 xor     eax, eax
.text:0000000000006793                 jmp     ___fprintf_chk
.text:0000000000006793 ; ---------------------------------------------------------------------------
.text:0000000000006798                 align 20h
.text:00000000000067A0
.text:00000000000067A0 loc_67A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000067A0                                         ; DATA XREF: .rodata:jpt_6604↓o
.text:00000000000067A0                 mov     r13, [rbx+10h]  ; jumptable 0000000000006604 case 3
.text:00000000000067A4                 mov     r12, [rbx+8]
.text:00000000000067A8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000067AF                 mov     rbx, [rbx]
.text:00000000000067B2                 mov     edx, 5          ; category
.text:00000000000067B7                 xor     edi, edi        ; domainname
.text:00000000000067B9                 call    _dcgettext
.text:00000000000067BE                 add     rsp, 28h
.text:00000000000067C2                 mov     r9, r13
.text:00000000000067C5                 mov     r8, r12
.text:00000000000067C8                 mov     rcx, rbx
.text:00000000000067CB                 mov     rdi, rbp
.text:00000000000067CE                 mov     rdx, rax
.text:00000000000067D1                 pop     rbx
.text:00000000000067D2                 pop     rbp
.text:00000000000067D3                 pop     r12
.text:00000000000067D5                 pop     r13
.text:00000000000067D7                 pop     r14
.text:00000000000067D9                 pop     r15
.text:00000000000067DB                 mov     esi, 1
.text:00000000000067E0                 xor     eax, eax
.text:00000000000067E2                 jmp     ___fprintf_chk
.text:00000000000067E2 ; ---------------------------------------------------------------------------
.text:00000000000067E7                 align 10h
.text:00000000000067F0
.text:00000000000067F0 loc_67F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000067F0                                         ; DATA XREF: .rodata:jpt_6604↓o
.text:00000000000067F0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000006604 case 4
.text:00000000000067F7                 mov     edx, 5          ; category
.text:00000000000067FC                 xor     edi, edi        ; domainname
.text:00000000000067FE                 mov     r14, [rbx+18h]
.text:0000000000006802                 mov     r13, [rbx+10h]
.text:0000000000006806                 mov     r12, [rbx+8]
.text:000000000000680A                 mov     rbx, [rbx]
.text:000000000000680D                 call    _dcgettext
.text:0000000000006812                 sub     rsp, 8
.text:0000000000006816
.text:0000000000006816 loc_6816:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000006816                 push    r14
.text:0000000000006818                 mov     rdx, rax
.text:000000000000681B                 mov     r9, r13
.text:000000000000681E                 mov     r8, r12
.text:0000000000006821                 mov     rcx, rbx
.text:0000000000006824                 mov     rdi, rbp
.text:0000000000006827                 mov     esi, 1
.text:000000000000682C                 xor     eax, eax
.text:000000000000682E                 call    ___fprintf_chk
.text:0000000000006833                 pop     rax
.text:0000000000006834                 pop     rdx
.text:0000000000006835                 add     rsp, 28h
.text:0000000000006839                 pop     rbx
.text:000000000000683A                 pop     rbp
.text:000000000000683B                 pop     r12
.text:000000000000683D                 pop     r13
.text:000000000000683F                 pop     r14
.text:0000000000006841                 pop     r15
.text:0000000000006843                 retn
.text:0000000000006843 ; ---------------------------------------------------------------------------
.text:0000000000006844                 align 8
.text:0000000000006848
.text:0000000000006848 loc_6848:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006848                                         ; DATA XREF: .rodata:jpt_6604↓o
.text:0000000000006848                 mov     r15, [rbx+20h]  ; jumptable 0000000000006604 case 5
.text:000000000000684C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000006853                 mov     edx, 5          ; category
.text:0000000000006858                 xor     edi, edi        ; domainname
.text:000000000000685A                 mov     r14, [rbx+18h]
.text:000000000000685E                 mov     r13, [rbx+10h]
.text:0000000000006862                 mov     r12, [rbx+8]
.text:0000000000006866                 mov     rbx, [rbx]
.text:0000000000006869                 call    _dcgettext
.text:000000000000686E                 push    r15
.text:0000000000006870                 jmp     short loc_6816
.text:0000000000006870 ; ---------------------------------------------------------------------------
.text:0000000000006872                 align 8
.text:0000000000006878
.text:0000000000006878 loc_6878:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006878                                         ; DATA XREF: .rodata:jpt_6604↓o
.text:0000000000006878                 mov     r8, [rbx+8]     ; jumptable 0000000000006604 case 6
.text:000000000000687C                 mov     r12, [rbx+28h]
.text:0000000000006880                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000006887                 mov     r15, [rbx+20h]
.text:000000000000688B                 mov     r14, [rbx+18h]
.text:000000000000688F                 mov     edx, 5          ; category
.text:0000000000006894                 mov     r13, [rbx+10h]
.text:0000000000006898                 xor     edi, edi        ; domainname
.text:000000000000689A                 mov     rbx, [rbx]
.text:000000000000689D                 mov     [rsp+58h+var_58], r8
.text:00000000000068A1                 call    _dcgettext
.text:00000000000068A6                 sub     rsp, 8
.text:00000000000068AA                 mov     r9, r13
.text:00000000000068AD                 push    r12
.text:00000000000068AF                 push    r15
.text:00000000000068B1                 push    r14
.text:00000000000068B3
.text:00000000000068B3 loc_68B3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000068B3                 mov     r8, [rsp+78h+var_58]
.text:00000000000068B8                 mov     rcx, rbx
.text:00000000000068BB                 mov     rdx, rax
.text:00000000000068BE                 mov     rdi, rbp
.text:00000000000068C1                 mov     esi, 1
.text:00000000000068C6                 xor     eax, eax
.text:00000000000068C8                 call    ___fprintf_chk
.text:00000000000068CD                 add     rsp, 20h
.text:00000000000068D1                 add     rsp, 28h
.text:00000000000068D5                 pop     rbx
.text:00000000000068D6                 pop     rbp
.text:00000000000068D7                 pop     r12
.text:00000000000068D9                 pop     r13
.text:00000000000068DB                 pop     r14
.text:00000000000068DD                 pop     r15
.text:00000000000068DF                 retn
.text:00000000000068E0 ; ---------------------------------------------------------------------------
.text:00000000000068E0
.text:00000000000068E0 loc_68E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000068E0                                         ; DATA XREF: .rodata:jpt_6604↓o
.text:00000000000068E0                 mov     r9, [rbx+10h]   ; jumptable 0000000000006604 case 7
.text:00000000000068E4                 mov     r13, [rbx+30h]
.text:00000000000068E8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000068EF                 mov     r12, [rbx+28h]
.text:00000000000068F3                 mov     r15, [rbx+20h]
.text:00000000000068F7                 mov     edx, 5          ; category
.text:00000000000068FC                 mov     r14, [rbx+18h]
.text:0000000000006900                 mov     r8, [rbx+8]
.text:0000000000006904                 xor     edi, edi        ; domainname
.text:0000000000006906                 mov     [rsp+58h+var_50], r9
.text:000000000000690B                 mov     rbx, [rbx]
.text:000000000000690E                 mov     [rsp+58h+var_58], r8
.text:0000000000006912                 call    _dcgettext
.text:0000000000006917                 push    r13
.text:0000000000006919                 push    r12
.text:000000000000691B                 push    r15
.text:000000000000691D                 push    r14
.text:000000000000691F                 mov     r9, [rsp+78h+var_50]
.text:0000000000006924                 jmp     short loc_68B3
.text:0000000000006924 ; ---------------------------------------------------------------------------
.text:0000000000006926                 align 10h
.text:0000000000006930
.text:0000000000006930 def_6604:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000006930                 mov     r10, [rbx+40h]  ; jumptable 0000000000006604 default case
.text:0000000000006934                 mov     r9, [rbx+38h]
.text:0000000000006938                 mov     edx, 5
.text:000000000000693D                 mov     rax, [rbx+10h]
.text:0000000000006941                 mov     r8, [rbx+8]
.text:0000000000006945                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000694C                 mov     r13, [rbx+30h]
.text:0000000000006950                 mov     r12, [rbx+28h]
.text:0000000000006954                 mov     r15, [rbx+20h]
.text:0000000000006958                 mov     r14, [rbx+18h]
.text:000000000000695C                 mov     [rsp+58h+var_40], r10
.text:0000000000006961                 mov     [rsp+58h+var_48], r9
.text:0000000000006966                 mov     [rsp+58h+var_58], rax
.text:000000000000696A                 mov     [rsp+58h+var_50], r8
.text:000000000000696F                 mov     rbx, [rbx]
.text:0000000000006972                 jmp     loc_6702
.text:0000000000006972 ; } // starts at 6560
.text:0000000000006972 version_etc_arn endp
.text:0000000000006972
.text:0000000000006972 ; ---------------------------------------------------------------------------
.text:0000000000006977                 align 20h
.text:0000000000006980
.text:0000000000006980 ; =============== S U B R O U T I N E =======================================
.text:0000000000006980
.text:0000000000006980 ; Attributes: info_from_lumina
.text:0000000000006980
.text:0000000000006980 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000006980                 public version_etc_ar
.text:0000000000006980 version_etc_ar  proc near
.text:0000000000006980 ; __unwind {
.text:0000000000006980                 xor     r9d, r9d
.text:0000000000006983                 cmp     qword ptr [r8], 0
.text:0000000000006987                 jz      short loc_699B
.text:0000000000006989                 nop     dword ptr [rax+00000000h]
.text:0000000000006990
.text:0000000000006990 loc_6990:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000006990                 add     r9, 1
.text:0000000000006994                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000006999                 jnz     short loc_6990
.text:000000000000699B
.text:000000000000699B loc_699B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000699B                 jmp     version_etc_arn
.text:000000000000699B ; } // starts at 6980
.text:000000000000699B version_etc_ar  endp
.text:000000000000699B
.text:00000000000069A0
.text:00000000000069A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069A0
.text:00000000000069A0 ; Attributes: info_from_lumina
.text:00000000000069A0
.text:00000000000069A0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000069A0                 public version_etc_va
.text:00000000000069A0 version_etc_va  proc near
.text:00000000000069A0
.text:00000000000069A0 authtab         = qword ptr -68h
.text:00000000000069A0 var_10          = qword ptr -10h
.text:00000000000069A0
.text:00000000000069A0 ; __unwind {
.text:00000000000069A0                 sub     rsp, 68h
.text:00000000000069A4                 mov     r10, r8
.text:00000000000069A7                 xor     r9d, r9d
.text:00000000000069AA                 mov     rax, fs:28h
.text:00000000000069B3                 mov     [rsp+68h+var_10], rax
.text:00000000000069B8                 xor     eax, eax
.text:00000000000069BA                 mov     r8, rsp
.text:00000000000069BD                 nop     dword ptr [rax]
.text:00000000000069C0
.text:00000000000069C0 loc_69C0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000069C0                 mov     eax, [r10]
.text:00000000000069C3                 cmp     eax, 2Fh ; '/'
.text:00000000000069C6                 ja      short loc_6A0A
.text:00000000000069C8                 mov     r11d, eax
.text:00000000000069CB                 add     r11, [r10+10h]
.text:00000000000069CF                 add     eax, 8
.text:00000000000069D2                 mov     [r10], eax
.text:00000000000069D5
.text:00000000000069D5 loc_69D5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000069D5                 mov     rax, [r11]
.text:00000000000069D8                 test    rax, rax
.text:00000000000069DB                 mov     [r8+r9*8], rax
.text:00000000000069DF                 jz      short loc_69EB
.text:00000000000069E1                 add     r9, 1
.text:00000000000069E5                 cmp     r9, 0Ah
.text:00000000000069E9                 jnz     short loc_69C0
.text:00000000000069EB
.text:00000000000069EB loc_69EB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000069EB                 call    version_etc_arn
.text:00000000000069F0                 mov     rax, [rsp+68h+var_10]
.text:00000000000069F5                 xor     rax, fs:28h
.text:00000000000069FE                 jnz     short loc_6A05
.text:0000000000006A00                 add     rsp, 68h
.text:0000000000006A04                 retn
.text:0000000000006A05 ; ---------------------------------------------------------------------------
.text:0000000000006A05
.text:0000000000006A05 loc_6A05:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000006A05                 call    ___stack_chk_fail
.text:0000000000006A0A ; ---------------------------------------------------------------------------
.text:0000000000006A0A
.text:0000000000006A0A loc_6A0A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000006A0A                 mov     r11, [r10+8]
.text:0000000000006A0E                 lea     rax, [r11+8]
.text:0000000000006A12                 mov     [r10+8], rax
.text:0000000000006A16                 jmp     short loc_69D5
.text:0000000000006A16 ; } // starts at 69A0
.text:0000000000006A16 version_etc_va  endp
.text:0000000000006A16
.text:0000000000006A16 ; ---------------------------------------------------------------------------
.text:0000000000006A18                 align 20h
.text:0000000000006A20
.text:0000000000006A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A20
.text:0000000000006A20 ; Attributes: info_from_lumina
.text:0000000000006A20
.text:0000000000006A20 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000006A20                 public version_etc
.text:0000000000006A20 version_etc     proc near               ; CODE XREF: main+2FB↑p
.text:0000000000006A20
.text:0000000000006A20 var_C0          = dword ptr -0C0h
.text:0000000000006A20 var_B8          = qword ptr -0B8h
.text:0000000000006A20 var_B0          = qword ptr -0B0h
.text:0000000000006A20 var_A8          = byte ptr -0A8h
.text:0000000000006A20 var_50          = qword ptr -50h
.text:0000000000006A20 var_48          = byte ptr -48h
.text:0000000000006A20 var_28          = qword ptr -28h
.text:0000000000006A20 var_20          = qword ptr -20h
.text:0000000000006A20 arg_0           = byte ptr  8
.text:0000000000006A20
.text:0000000000006A20 ; __unwind {
.text:0000000000006A20                 push    rbp
.text:0000000000006A21                 push    rbx
.text:0000000000006A22                 mov     r10d, 20h ; ' '
.text:0000000000006A28                 xor     r11d, r11d
.text:0000000000006A2B                 sub     rsp, 0B8h
.text:0000000000006A32                 mov     rax, fs:28h
.text:0000000000006A3B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000006A40                 xor     eax, eax
.text:0000000000006A42                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000006A4A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000006A52                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000006A5A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000006A5F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000006A67                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000006A6F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000006A74                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000006A7C                 xor     r9d, r9d
.text:0000000000006A7F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000006A84                 mov     rbp, rax
.text:0000000000006A87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006A90
.text:0000000000006A90 loc_6A90:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000006A90                 cmp     r10d, 2Fh ; '/'
.text:0000000000006A94                 ja      short loc_6AEC
.text:0000000000006A96                 mov     eax, r10d
.text:0000000000006A99                 mov     r11d, 1
.text:0000000000006A9F                 add     r10d, 8
.text:0000000000006AA3                 add     rax, rbp
.text:0000000000006AA6
.text:0000000000006AA6 loc_6AA6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000006AA6                 mov     rax, [rax]
.text:0000000000006AA9                 test    rax, rax
.text:0000000000006AAC                 mov     [r8+r9*8], rax
.text:0000000000006AB0                 jz      short loc_6ABC
.text:0000000000006AB2                 add     r9, 1
.text:0000000000006AB6                 cmp     r9, 0Ah
.text:0000000000006ABA                 jnz     short loc_6A90
.text:0000000000006ABC
.text:0000000000006ABC loc_6ABC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000006ABC                 test    r11b, r11b
.text:0000000000006ABF                 jnz     short loc_6AE5
.text:0000000000006AC1
.text:0000000000006AC1 loc_6AC1:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000006AC1                 call    version_etc_arn
.text:0000000000006AC6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000006ACB                 xor     rax, fs:28h
.text:0000000000006AD4                 jnz     short loc_6AE0
.text:0000000000006AD6                 add     rsp, 0B8h
.text:0000000000006ADD                 pop     rbx
.text:0000000000006ADE                 pop     rbp
.text:0000000000006ADF                 retn
.text:0000000000006AE0 ; ---------------------------------------------------------------------------
.text:0000000000006AE0
.text:0000000000006AE0 loc_6AE0:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006AE0                 call    ___stack_chk_fail
.text:0000000000006AE5 ; ---------------------------------------------------------------------------
.text:0000000000006AE5
.text:0000000000006AE5 loc_6AE5:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006AE5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000006AEA                 jmp     short loc_6AC1
.text:0000000000006AEC ; ---------------------------------------------------------------------------
.text:0000000000006AEC
.text:0000000000006AEC loc_6AEC:                               ; CODE XREF: version_etc+74↑j
.text:0000000000006AEC                 mov     rax, rbx
.text:0000000000006AEF                 add     rbx, 8
.text:0000000000006AF3                 jmp     short loc_6AA6
.text:0000000000006AF3 ; } // starts at 6A20
.text:0000000000006AF3 version_etc     endp
.text:0000000000006AF3
.text:0000000000006AF3 ; ---------------------------------------------------------------------------
.text:0000000000006AF5                 align 20h
.text:0000000000006B00
.text:0000000000006B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B00
.text:0000000000006B00 ; Attributes: info_from_lumina
.text:0000000000006B00
.text:0000000000006B00 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006B00                 public emit_bug_reporting_address
.text:0000000000006B00 emit_bug_reporting_address proc near
.text:0000000000006B00 ; __unwind {
.text:0000000000006B00                 push    rbx
.text:0000000000006B01                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000006B08                 mov     edx, 5          ; category
.text:0000000000006B0D                 xor     edi, edi        ; domainname
.text:0000000000006B0F                 call    _dcgettext
.text:0000000000006B14                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000006B1B                 mov     rsi, rax
.text:0000000000006B1E                 mov     edi, 1
.text:0000000000006B23                 xor     eax, eax
.text:0000000000006B25                 call    ___printf_chk
.text:0000000000006B2A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000006B31                 mov     edx, 5          ; category
.text:0000000000006B36                 xor     edi, edi        ; domainname
.text:0000000000006B38                 call    _dcgettext
.text:0000000000006B3D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006B44                 lea     rdx, unk_917F
.text:0000000000006B4B                 mov     rsi, rax
.text:0000000000006B4E                 mov     edi, 1
.text:0000000000006B53                 xor     eax, eax
.text:0000000000006B55                 call    ___printf_chk
.text:0000000000006B5A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006B61                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000006B68                 xor     edi, edi        ; domainname
.text:0000000000006B6A                 mov     edx, 5          ; category
.text:0000000000006B6F                 call    _dcgettext
.text:0000000000006B74                 mov     rsi, rbx        ; stream
.text:0000000000006B77                 mov     rdi, rax        ; s
.text:0000000000006B7A                 pop     rbx
.text:0000000000006B7B                 jmp     _fputs_unlocked
.text:0000000000006B7B ; } // starts at 6B00
.text:0000000000006B7B emit_bug_reporting_address endp
.text:0000000000006B7B
.text:0000000000006B80
.text:0000000000006B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B80
.text:0000000000006B80
.text:0000000000006B80                 public xmalloc
.text:0000000000006B80 xmalloc         proc near               ; CODE XREF: main+6B2↑p
.text:0000000000006B80                                         ; main+99F↑p ...
.text:0000000000006B80 ; __unwind {
.text:0000000000006B80                 push    rbx
.text:0000000000006B81                 mov     rbx, rdi
.text:0000000000006B84                 call    _malloc
.text:0000000000006B89                 test    rax, rax
.text:0000000000006B8C                 jnz     short loc_6B93
.text:0000000000006B8E                 test    rbx, rbx
.text:0000000000006B91                 jnz     short loc_6B95
.text:0000000000006B93
.text:0000000000006B93 loc_6B93:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000006B93                 pop     rbx
.text:0000000000006B94                 retn
.text:0000000000006B95 ; ---------------------------------------------------------------------------
.text:0000000000006B95
.text:0000000000006B95 loc_6B95:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000006B95                 call    xalloc_die
.text:0000000000006B95 ; } // starts at 6B80
.text:0000000000006B95 xmalloc         endp
.text:0000000000006B95
.text:0000000000006B95 ; ---------------------------------------------------------------------------
.text:0000000000006B9A                 align 20h
.text:0000000000006BA0
.text:0000000000006BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BA0
.text:0000000000006BA0 ; Attributes: info_from_lumina
.text:0000000000006BA0
.text:0000000000006BA0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000006BA0                 public xnmalloc
.text:0000000000006BA0 xnmalloc        proc near
.text:0000000000006BA0 ; __unwind {
.text:0000000000006BA0                 mov     rax, rdi
.text:0000000000006BA3                 mul     rsi
.text:0000000000006BA6                 mov     rdi, rax
.text:0000000000006BA9                 seto    al
.text:0000000000006BAC                 test    rdi, rdi
.text:0000000000006BAF                 js      short loc_6BBB
.text:0000000000006BB1                 movzx   eax, al
.text:0000000000006BB4                 test    rax, rax
.text:0000000000006BB7                 jnz     short loc_6BBB
.text:0000000000006BB9                 jmp     short xmalloc
.text:0000000000006BBB ; ---------------------------------------------------------------------------
.text:0000000000006BBB
.text:0000000000006BBB loc_6BBB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000006BBB                                         ; xnmalloc+17↑j
.text:0000000000006BBB                 sub     rsp, 8
.text:0000000000006BBF                 call    xalloc_die
.text:0000000000006BBF ; } // starts at 6BA0
.text:0000000000006BBF xnmalloc        endp
.text:0000000000006BBF
.text:0000000000006BBF ; ---------------------------------------------------------------------------
.text:0000000000006BC4                 align 10h
.text:0000000000006BD0
.text:0000000000006BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BD0
.text:0000000000006BD0
.text:0000000000006BD0                 public xcharalloc
.text:0000000000006BD0 xcharalloc      proc near
.text:0000000000006BD0 ; __unwind {
.text:0000000000006BD0                 jmp     short xmalloc
.text:0000000000006BD0 ; } // starts at 6BD0
.text:0000000000006BD0 xcharalloc      endp
.text:0000000000006BD0
.text:0000000000006BD0 ; ---------------------------------------------------------------------------
.text:0000000000006BD2                 align 20h
.text:0000000000006BE0
.text:0000000000006BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BE0
.text:0000000000006BE0 ; Attributes: info_from_lumina
.text:0000000000006BE0
.text:0000000000006BE0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006BE0                 public xrealloc
.text:0000000000006BE0 xrealloc        proc near               ; CODE XREF: main+51D↑p
.text:0000000000006BE0                                         ; quotearg_n_options+6E↑p ...
.text:0000000000006BE0 ; __unwind {
.text:0000000000006BE0                 test    rsi, rsi
.text:0000000000006BE3                 push    rbx
.text:0000000000006BE4                 mov     rbx, rsi
.text:0000000000006BE7                 jnz     short loc_6BEE
.text:0000000000006BE9                 test    rdi, rdi
.text:0000000000006BEC                 jnz     short loc_6C08
.text:0000000000006BEE
.text:0000000000006BEE loc_6BEE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000006BEE                 mov     rsi, rbx        ; size
.text:0000000000006BF1                 call    _realloc
.text:0000000000006BF6                 test    rax, rax
.text:0000000000006BF9                 jnz     short loc_6C00
.text:0000000000006BFB                 test    rbx, rbx
.text:0000000000006BFE                 jnz     short loc_6C11
.text:0000000000006C00
.text:0000000000006C00 loc_6C00:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000006C00                 pop     rbx
.text:0000000000006C01                 retn
.text:0000000000006C01 ; ---------------------------------------------------------------------------
.text:0000000000006C02                 align 8
.text:0000000000006C08
.text:0000000000006C08 loc_6C08:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000006C08                 call    free
.text:0000000000006C0D                 xor     eax, eax
.text:0000000000006C0F                 pop     rbx
.text:0000000000006C10                 retn
.text:0000000000006C11 ; ---------------------------------------------------------------------------
.text:0000000000006C11
.text:0000000000006C11 loc_6C11:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000006C11                 call    xalloc_die
.text:0000000000006C11 ; } // starts at 6BE0
.text:0000000000006C11 xrealloc        endp
.text:0000000000006C11
.text:0000000000006C11 ; ---------------------------------------------------------------------------
.text:0000000000006C16                 align 20h
.text:0000000000006C20
.text:0000000000006C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C20
.text:0000000000006C20 ; Attributes: info_from_lumina
.text:0000000000006C20
.text:0000000000006C20 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000006C20                 public xnrealloc
.text:0000000000006C20 xnrealloc       proc near
.text:0000000000006C20 ; __unwind {
.text:0000000000006C20                 mov     rax, rsi
.text:0000000000006C23                 mul     rdx
.text:0000000000006C26                 mov     rsi, rax
.text:0000000000006C29                 seto    al
.text:0000000000006C2C                 test    rsi, rsi
.text:0000000000006C2F                 js      short loc_6C3B
.text:0000000000006C31                 movzx   eax, al
.text:0000000000006C34                 test    rax, rax
.text:0000000000006C37                 jnz     short loc_6C3B
.text:0000000000006C39                 jmp     short xrealloc
.text:0000000000006C3B ; ---------------------------------------------------------------------------
.text:0000000000006C3B
.text:0000000000006C3B loc_6C3B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000006C3B                                         ; xnrealloc+17↑j
.text:0000000000006C3B                 sub     rsp, 8
.text:0000000000006C3F                 call    xalloc_die
.text:0000000000006C3F ; } // starts at 6C20
.text:0000000000006C3F xnrealloc       endp
.text:0000000000006C3F
.text:0000000000006C3F ; ---------------------------------------------------------------------------
.text:0000000000006C44                 align 10h
.text:0000000000006C50
.text:0000000000006C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C50
.text:0000000000006C50 ; Attributes: info_from_lumina
.text:0000000000006C50
.text:0000000000006C50 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000006C50                 public x2nrealloc
.text:0000000000006C50 x2nrealloc      proc near
.text:0000000000006C50 ; __unwind {
.text:0000000000006C50                 test    rdi, rdi
.text:0000000000006C53                 mov     r9, rdx
.text:0000000000006C56                 mov     rcx, [rsi]
.text:0000000000006C59                 jz      short loc_6C90
.text:0000000000006C5B                 xor     edx, edx
.text:0000000000006C5D                 mov     rax, 5555555555555554h
.text:0000000000006C67                 div     r9
.text:0000000000006C6A                 cmp     rax, rcx
.text:0000000000006C6D                 jbe     short loc_6CAB
.text:0000000000006C6F                 mov     rax, rcx
.text:0000000000006C72                 shr     rax, 1
.text:0000000000006C75                 lea     rcx, [rax+rcx+1]
.text:0000000000006C7A
.text:0000000000006C7A loc_6C7A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000006C7A                 mov     [rsi], rcx
.text:0000000000006C7D                 imul    rcx, r9
.text:0000000000006C81                 mov     rsi, rcx
.text:0000000000006C84                 jmp     xrealloc
.text:0000000000006C84 ; ---------------------------------------------------------------------------
.text:0000000000006C89                 align 10h
.text:0000000000006C90
.text:0000000000006C90 loc_6C90:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000006C90                 test    rcx, rcx
.text:0000000000006C93                 jz      short loc_6CB8
.text:0000000000006C95
.text:0000000000006C95 loc_6C95:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000006C95                 mov     rax, rcx
.text:0000000000006C98                 mul     r9
.text:0000000000006C9B                 seto    dl
.text:0000000000006C9E                 test    rax, rax
.text:0000000000006CA1                 movzx   edx, dl
.text:0000000000006CA4                 js      short loc_6CAB
.text:0000000000006CA6                 test    rdx, rdx
.text:0000000000006CA9                 jz      short loc_6C7A
.text:0000000000006CAB
.text:0000000000006CAB loc_6CAB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000006CAB                                         ; x2nrealloc+54↑j
.text:0000000000006CAB                 sub     rsp, 8
.text:0000000000006CAF                 call    xalloc_die
.text:0000000000006CAF ; ---------------------------------------------------------------------------
.text:0000000000006CB4                 align 8
.text:0000000000006CB8
.text:0000000000006CB8 loc_6CB8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000006CB8                 xor     edx, edx
.text:0000000000006CBA                 mov     eax, 80h
.text:0000000000006CBF                 xor     r8d, r8d
.text:0000000000006CC2                 div     r9
.text:0000000000006CC5                 test    rax, rax
.text:0000000000006CC8                 setz    r8b
.text:0000000000006CCC                 lea     rcx, [r8+rax]
.text:0000000000006CD0                 jmp     short loc_6C95
.text:0000000000006CD0 ; } // starts at 6C50
.text:0000000000006CD0 x2nrealloc      endp
.text:0000000000006CD0
.text:0000000000006CD0 ; ---------------------------------------------------------------------------
.text:0000000000006CD2                 align 20h
.text:0000000000006CE0
.text:0000000000006CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CE0
.text:0000000000006CE0 ; Attributes: info_from_lumina
.text:0000000000006CE0
.text:0000000000006CE0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006CE0                 public x2realloc
.text:0000000000006CE0 x2realloc       proc near               ; CODE XREF: readlinebuffer_delim+6C↑p
.text:0000000000006CE0 ; __unwind {
.text:0000000000006CE0                 test    rdi, rdi
.text:0000000000006CE3                 mov     rax, [rsi]
.text:0000000000006CE6                 jz      short loc_6D10
.text:0000000000006CE8                 mov     rdx, 5555555555555553h
.text:0000000000006CF2                 cmp     rax, rdx
.text:0000000000006CF5                 ja      short loc_6D21
.text:0000000000006CF7                 mov     rdx, rax
.text:0000000000006CFA                 shr     rdx, 1
.text:0000000000006CFD                 lea     rax, [rdx+rax+1]
.text:0000000000006D02
.text:0000000000006D02 loc_6D02:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000006D02                 mov     [rsi], rax
.text:0000000000006D05                 mov     rsi, rax
.text:0000000000006D08                 jmp     xrealloc
.text:0000000000006D08 ; ---------------------------------------------------------------------------
.text:0000000000006D0D                 align 10h
.text:0000000000006D10
.text:0000000000006D10 loc_6D10:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000006D10                 test    rax, rax
.text:0000000000006D13                 mov     edx, 80h
.text:0000000000006D18                 cmovz   rax, rdx
.text:0000000000006D1C                 test    rax, rax
.text:0000000000006D1F                 jns     short loc_6D02
.text:0000000000006D21
.text:0000000000006D21 loc_6D21:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000006D21                 sub     rsp, 8
.text:0000000000006D25                 call    xalloc_die
.text:0000000000006D25 ; } // starts at 6CE0
.text:0000000000006D25 x2realloc       endp
.text:0000000000006D25
.text:0000000000006D25 ; ---------------------------------------------------------------------------
.text:0000000000006D2A                 align 10h
.text:0000000000006D30
.text:0000000000006D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D30
.text:0000000000006D30
.text:0000000000006D30 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006D30                 public xzalloc
.text:0000000000006D30 xzalloc         proc near
.text:0000000000006D30 ; __unwind {
.text:0000000000006D30                 push    rbx
.text:0000000000006D31                 mov     rbx, rdi
.text:0000000000006D34                 call    xmalloc
.text:0000000000006D39                 mov     rdx, rbx        ; n
.text:0000000000006D3C                 xor     esi, esi        ; c
.text:0000000000006D3E                 mov     rdi, rax        ; s
.text:0000000000006D41                 pop     rbx
.text:0000000000006D42                 jmp     _memset
.text:0000000000006D42 ; } // starts at 6D30
.text:0000000000006D42 xzalloc         endp
.text:0000000000006D42
.text:0000000000006D42 ; ---------------------------------------------------------------------------
.text:0000000000006D47                 align 10h
.text:0000000000006D50
.text:0000000000006D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D50
.text:0000000000006D50 ; Attributes: info_from_lumina
.text:0000000000006D50
.text:0000000000006D50 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006D50                 public xcalloc
.text:0000000000006D50 xcalloc         proc near               ; CODE XREF: main+49E↑p
.text:0000000000006D50 ; __unwind {
.text:0000000000006D50                 mov     rax, rdi
.text:0000000000006D53                 sub     rsp, 8
.text:0000000000006D57                 mul     rsi
.text:0000000000006D5A                 seto    dl
.text:0000000000006D5D                 test    rax, rax
.text:0000000000006D60                 js      short loc_6D79
.text:0000000000006D62                 movzx   edx, dl
.text:0000000000006D65                 test    rdx, rdx
.text:0000000000006D68                 jnz     short loc_6D79
.text:0000000000006D6A                 call    _calloc
.text:0000000000006D6F                 test    rax, rax
.text:0000000000006D72                 jz      short loc_6D79
.text:0000000000006D74                 add     rsp, 8
.text:0000000000006D78                 retn
.text:0000000000006D79 ; ---------------------------------------------------------------------------
.text:0000000000006D79
.text:0000000000006D79 loc_6D79:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000006D79                                         ; xcalloc+18↑j ...
.text:0000000000006D79                 call    xalloc_die
.text:0000000000006D79 ; } // starts at 6D50
.text:0000000000006D79 xcalloc         endp
.text:0000000000006D79
.text:0000000000006D79 ; ---------------------------------------------------------------------------
.text:0000000000006D7E                 align 20h
.text:0000000000006D80
.text:0000000000006D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D80
.text:0000000000006D80 ; Attributes: info_from_lumina
.text:0000000000006D80
.text:0000000000006D80 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000006D80                 public xmemdup
.text:0000000000006D80 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000006D80                                         ; xstrdup+11↓j
.text:0000000000006D80 ; __unwind {
.text:0000000000006D80                 push    rbp
.text:0000000000006D81                 push    rbx
.text:0000000000006D82                 mov     rbp, rdi
.text:0000000000006D85                 mov     rdi, rsi
.text:0000000000006D88                 mov     rbx, rsi
.text:0000000000006D8B                 sub     rsp, 8
.text:0000000000006D8F                 call    xmalloc
.text:0000000000006D94                 add     rsp, 8
.text:0000000000006D98                 mov     rdx, rbx        ; n
.text:0000000000006D9B                 mov     rsi, rbp        ; src
.text:0000000000006D9E                 pop     rbx
.text:0000000000006D9F                 pop     rbp
.text:0000000000006DA0                 mov     rdi, rax        ; dest
.text:0000000000006DA3                 jmp     _memcpy
.text:0000000000006DA3 ; } // starts at 6D80
.text:0000000000006DA3 xmemdup         endp
.text:0000000000006DA3
.text:0000000000006DA3 ; ---------------------------------------------------------------------------
.text:0000000000006DA8                 align 10h
.text:0000000000006DB0
.text:0000000000006DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DB0
.text:0000000000006DB0
.text:0000000000006DB0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000006DB0                 public xstrdup
.text:0000000000006DB0 xstrdup         proc near
.text:0000000000006DB0 ; __unwind {
.text:0000000000006DB0                 push    rbx
.text:0000000000006DB1                 mov     rbx, rdi
.text:0000000000006DB4                 call    _strlen
.text:0000000000006DB9                 mov     rdi, rbx        ; src
.text:0000000000006DBC                 lea     rsi, [rax+1]    ; n
.text:0000000000006DC0                 pop     rbx
.text:0000000000006DC1                 jmp     short xmemdup
.text:0000000000006DC1 ; } // starts at 6DB0
.text:0000000000006DC1 xstrdup         endp
.text:0000000000006DC1
.text:0000000000006DC1 ; ---------------------------------------------------------------------------
.text:0000000000006DC3                 align 10h
.text:0000000000006DD0
.text:0000000000006DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DD0
.text:0000000000006DD0 ; Attributes: noreturn info_from_lumina
.text:0000000000006DD0
.text:0000000000006DD0 ; void __cdecl xalloc_die()
.text:0000000000006DD0                 public xalloc_die
.text:0000000000006DD0 xalloc_die      proc near               ; CODE XREF: main:loc_2A00↑p
.text:0000000000006DD0                                         ; quotearg_n_options:loc_4AF6↑p ...
.text:0000000000006DD0 ; __unwind {
.text:0000000000006DD0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000006DD7                 sub     rsp, 8
.text:0000000000006DDB                 mov     edx, 5          ; category
.text:0000000000006DE0                 xor     edi, edi        ; domainname
.text:0000000000006DE2                 call    _dcgettext
.text:0000000000006DE7                 mov     edi, cs:exit_failure ; status
.text:0000000000006DED                 lea     rdx, format+4   ; format
.text:0000000000006DF4                 mov     rcx, rax
.text:0000000000006DF7                 xor     esi, esi        ; errnum
.text:0000000000006DF9                 xor     eax, eax
.text:0000000000006DFB                 call    _error
.text:0000000000006E00                 call    _abort
.text:0000000000006E00 ; } // starts at 6DD0
.text:0000000000006E00 xalloc_die      endp
.text:0000000000006E00
.text:0000000000006E00 ; ---------------------------------------------------------------------------
.text:0000000000006E05                 align 10h
.text:0000000000006E10
.text:0000000000006E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E10
.text:0000000000006E10 ; Attributes: info_from_lumina
.text:0000000000006E10
.text:0000000000006E10 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000006E10                 public xnumtoumax
.text:0000000000006E10 xnumtoumax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:0000000000006E10
.text:0000000000006E10 var_48          = qword ptr -48h
.text:0000000000006E10 var_40          = qword ptr -40h
.text:0000000000006E10 arg_0           = dword ptr  8
.text:0000000000006E10
.text:0000000000006E10 ; __unwind {
.text:0000000000006E10                 push    r15
.text:0000000000006E12                 push    r14
.text:0000000000006E14                 mov     r15, rcx
.text:0000000000006E17                 push    r13
.text:0000000000006E19                 push    r12
.text:0000000000006E1B                 mov     r14, rdx
.text:0000000000006E1E                 push    rbp
.text:0000000000006E1F                 push    rbx
.text:0000000000006E20                 mov     edx, esi
.text:0000000000006E22                 xor     esi, esi
.text:0000000000006E24                 mov     r12, rdi
.text:0000000000006E27                 mov     r13, r9
.text:0000000000006E2A                 sub     rsp, 18h
.text:0000000000006E2E                 mov     rcx, rsp
.text:0000000000006E31                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000006E35                 mov     rax, fs:28h
.text:0000000000006E3E                 mov     [rsp+48h+var_40], rax
.text:0000000000006E43                 xor     eax, eax
.text:0000000000006E45                 call    xstrtoumax
.text:0000000000006E4A                 test    eax, eax
.text:0000000000006E4C                 jnz     loc_6EE0
.text:0000000000006E52                 mov     rbp, [rsp+48h+var_48]
.text:0000000000006E56                 cmp     rbp, r14
.text:0000000000006E59                 jb      short loc_6E60
.text:0000000000006E5B                 cmp     rbp, r15
.text:0000000000006E5E                 jbe     short loc_6EB4
.text:0000000000006E60
.text:0000000000006E60 loc_6E60:                               ; CODE XREF: xnumtoumax+49↑j
.text:0000000000006E60                 call    ___errno_location
.text:0000000000006E65                 cmp     rbp, 40000000h
.text:0000000000006E6C                 mov     r14, rax
.text:0000000000006E6F                 sbb     eax, eax
.text:0000000000006E71                 and     eax, 0FFFFFFD7h
.text:0000000000006E74                 add     eax, 4Bh ; 'K'
.text:0000000000006E77                 mov     [r14], eax
.text:0000000000006E7A
.text:0000000000006E7A loc_6E7A:                               ; CODE XREF: xnumtoumax+E2↓j
.text:0000000000006E7A                                         ; xnumtoumax+EA↓j ...
.text:0000000000006E7A                 mov     rdi, r12
.text:0000000000006E7D                 call    quote
.text:0000000000006E82                 mov     esi, [r14]
.text:0000000000006E85                 mov     r8, rax
.text:0000000000006E88                 mov     eax, 0
.text:0000000000006E8D                 lea     rdx, format     ; "%s: %s"
.text:0000000000006E94                 mov     rcx, r13
.text:0000000000006E97                 cmp     esi, 16h
.text:0000000000006E9A                 cmovz   esi, eax        ; errnum
.text:0000000000006E9D                 test    ebx, ebx
.text:0000000000006E9F                 mov     eax, 1
.text:0000000000006EA4                 cmovz   ebx, eax
.text:0000000000006EA7                 xor     eax, eax
.text:0000000000006EA9                 mov     edi, ebx        ; status
.text:0000000000006EAB                 call    _error
.text:0000000000006EB0                 mov     rbp, [rsp+48h+var_48]
.text:0000000000006EB4
.text:0000000000006EB4 loc_6EB4:                               ; CODE XREF: xnumtoumax+4E↑j
.text:0000000000006EB4                 mov     rdx, [rsp+48h+var_40]
.text:0000000000006EB9                 xor     rdx, fs:28h
.text:0000000000006EC2                 mov     rax, rbp
.text:0000000000006EC5                 jnz     short loc_6F0B
.text:0000000000006EC7                 add     rsp, 18h
.text:0000000000006ECB                 pop     rbx
.text:0000000000006ECC                 pop     rbp
.text:0000000000006ECD                 pop     r12
.text:0000000000006ECF                 pop     r13
.text:0000000000006ED1                 pop     r14
.text:0000000000006ED3                 pop     r15
.text:0000000000006ED5                 retn
.text:0000000000006ED5 ; ---------------------------------------------------------------------------
.text:0000000000006ED6                 align 20h
.text:0000000000006EE0
.text:0000000000006EE0 loc_6EE0:                               ; CODE XREF: xnumtoumax+3C↑j
.text:0000000000006EE0                 mov     ebp, eax
.text:0000000000006EE2                 call    ___errno_location
.text:0000000000006EE7                 cmp     ebp, 1
.text:0000000000006EEA                 mov     r14, rax
.text:0000000000006EED                 jz      short loc_6F00
.text:0000000000006EEF                 cmp     ebp, 3
.text:0000000000006EF2                 jnz     short loc_6E7A
.text:0000000000006EF4                 mov     dword ptr [rax], 0
.text:0000000000006EFA                 jmp     loc_6E7A
.text:0000000000006EFA ; ---------------------------------------------------------------------------
.text:0000000000006EFF                 align 20h
.text:0000000000006F00
.text:0000000000006F00 loc_6F00:                               ; CODE XREF: xnumtoumax+DD↑j
.text:0000000000006F00                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000006F06                 jmp     loc_6E7A
.text:0000000000006F0B ; ---------------------------------------------------------------------------
.text:0000000000006F0B
.text:0000000000006F0B loc_6F0B:                               ; CODE XREF: xnumtoumax+B5↑j
.text:0000000000006F0B                 call    ___stack_chk_fail
.text:0000000000006F0B ; } // starts at 6E10
.text:0000000000006F0B xnumtoumax      endp
.text:0000000000006F0B
.text:0000000000006F10
.text:0000000000006F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F10
.text:0000000000006F10 ; Attributes: info_from_lumina
.text:0000000000006F10
.text:0000000000006F10 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000006F10                 public xdectoumax
.text:0000000000006F10 xdectoumax      proc near               ; CODE XREF: main+1B0↑p
.text:0000000000006F10                                         ; main+1F0↑p ...
.text:0000000000006F10 ; __unwind {
.text:0000000000006F10                 sub     rsp, 10h
.text:0000000000006F14                 push    r9
.text:0000000000006F16                 mov     r9, r8
.text:0000000000006F19                 mov     r8, rcx
.text:0000000000006F1C                 mov     rcx, rdx
.text:0000000000006F1F                 mov     rdx, rsi
.text:0000000000006F22                 mov     esi, 0Ah
.text:0000000000006F27                 call    xnumtoumax
.text:0000000000006F2C                 add     rsp, 18h
.text:0000000000006F30                 retn
.text:0000000000006F30 ; } // starts at 6F10
.text:0000000000006F30 xdectoumax      endp
.text:0000000000006F30
.text:0000000000006F30 ; ---------------------------------------------------------------------------
.text:0000000000006F31                 align 20h
.text:0000000000006F40
.text:0000000000006F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F40
.text:0000000000006F40
.text:0000000000006F40 ; __int64 __fastcall xstrtoul(char *nptr)
.text:0000000000006F40                 public xstrtoul
.text:0000000000006F40 xstrtoul        proc near               ; CODE XREF: main+246↑p
.text:0000000000006F40
.text:0000000000006F40 base            = dword ptr -50h
.text:0000000000006F40 endptr          = qword ptr -48h
.text:0000000000006F40 var_40          = qword ptr -40h
.text:0000000000006F40
.text:0000000000006F40 ; __unwind {
.text:0000000000006F40                 push    r15
.text:0000000000006F42                 push    r14
.text:0000000000006F44                 push    r13
.text:0000000000006F46                 push    r12
.text:0000000000006F48                 push    rbp
.text:0000000000006F49                 push    rbx
.text:0000000000006F4A                 sub     rsp, 28h
.text:0000000000006F4E                 mov     rax, fs:28h
.text:0000000000006F57                 mov     [rsp+58h+var_40], rax
.text:0000000000006F5C                 xor     eax, eax
.text:0000000000006F5E                 cmp     edx, 24h ; '$'
.text:0000000000006F61                 ja      loc_72C5
.text:0000000000006F67                 lea     rax, [rsp+58h+endptr]
.text:0000000000006F6C                 mov     r15, rsi
.text:0000000000006F6F                 test    rsi, rsi
.text:0000000000006F72                 mov     rbp, rdi
.text:0000000000006F75                 mov     [rsp+58h+base], edx
.text:0000000000006F79                 mov     r14, rcx
.text:0000000000006F7C                 mov     r13, r8
.text:0000000000006F7F                 cmovz   r15, rax
.text:0000000000006F83                 call    ___errno_location
.text:0000000000006F88                 mov     dword ptr [rax], 0
.text:0000000000006F8E                 mov     r12, rax
.text:0000000000006F91                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000006F95                 call    ___ctype_b_loc
.text:0000000000006F9A                 mov     edx, [rsp+58h+base] ; base
.text:0000000000006F9E                 mov     rsi, [rax]
.text:0000000000006FA1                 mov     rax, rbp
.text:0000000000006FA4                 jmp     short loc_6FB7
.text:0000000000006FA4 ; ---------------------------------------------------------------------------
.text:0000000000006FA6                 align 10h
.text:0000000000006FB0
.text:0000000000006FB0 loc_6FB0:                               ; CODE XREF: xstrtoul+7F↓j
.text:0000000000006FB0                 add     rax, 1
.text:0000000000006FB4                 movzx   ebx, byte ptr [rax]
.text:0000000000006FB7
.text:0000000000006FB7 loc_6FB7:                               ; CODE XREF: xstrtoul+64↑j
.text:0000000000006FB7                 movzx   ecx, bl
.text:0000000000006FBA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000006FBF                 jnz     short loc_6FB0
.text:0000000000006FC1                 cmp     bl, 2Dh ; '-'
.text:0000000000006FC4                 jz      short loc_7018
.text:0000000000006FC6                 mov     rsi, r15        ; endptr
.text:0000000000006FC9                 mov     rdi, rbp        ; nptr
.text:0000000000006FCC                 call    _strtoul
.text:0000000000006FD1                 mov     rcx, [r15]
.text:0000000000006FD4                 mov     rbx, rax
.text:0000000000006FD7                 cmp     rcx, rbp
.text:0000000000006FDA                 jz      short loc_7008
.text:0000000000006FDC                 mov     eax, [r12]
.text:0000000000006FE0                 test    eax, eax
.text:0000000000006FE2                 jz      short loc_7048
.text:0000000000006FE4                 cmp     eax, 22h ; '"'
.text:0000000000006FE7                 mov     ebp, 1
.text:0000000000006FEC                 jnz     short loc_7018
.text:0000000000006FEE
.text:0000000000006FEE loc_6FEE:                               ; CODE XREF: xstrtoul+10A↓j
.text:0000000000006FEE                 test    r13, r13
.text:0000000000006FF1                 jz      short loc_6FFC
.text:0000000000006FF3                 movzx   r12d, byte ptr [rcx]
.text:0000000000006FF7                 test    r12b, r12b
.text:0000000000006FFA                 jnz     short loc_7077
.text:0000000000006FFC
.text:0000000000006FFC loc_6FFC:                               ; CODE XREF: xstrtoul+B1↑j
.text:0000000000006FFC                 mov     [r14], rbx
.text:0000000000006FFF                 jmp     short loc_701D
.text:0000000000006FFF ; ---------------------------------------------------------------------------
.text:0000000000007001                 align 8
.text:0000000000007008
.text:0000000000007008 loc_7008:                               ; CODE XREF: xstrtoul+9A↑j
.text:0000000000007008                 test    r13, r13
.text:000000000000700B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000007010                 jnz     short loc_7050
.text:0000000000007012                 nop     word ptr [rax+rax+00h]
.text:0000000000007018
.text:0000000000007018 loc_7018:                               ; CODE XREF: xstrtoul+84↑j
.text:0000000000007018                                         ; xstrtoul+AC↑j ...
.text:0000000000007018                 mov     ebp, 4
.text:000000000000701D
.text:000000000000701D loc_701D:                               ; CODE XREF: xstrtoul+BF↑j
.text:000000000000701D                                         ; xstrtoul+217↓j ...
.text:000000000000701D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000007022                 xor     rdi, fs:28h
.text:000000000000702B                 mov     eax, ebp
.text:000000000000702D                 jnz     loc_72C0
.text:0000000000007033                 add     rsp, 28h
.text:0000000000007037                 pop     rbx
.text:0000000000007038                 pop     rbp
.text:0000000000007039                 pop     r12
.text:000000000000703B                 pop     r13
.text:000000000000703D                 pop     r14
.text:000000000000703F                 pop     r15
.text:0000000000007041                 retn
.text:0000000000007041 ; ---------------------------------------------------------------------------
.text:0000000000007042                 align 8
.text:0000000000007048
.text:0000000000007048 loc_7048:                               ; CODE XREF: xstrtoul+A2↑j
.text:0000000000007048                 xor     ebp, ebp
.text:000000000000704A                 jmp     short loc_6FEE
.text:000000000000704A ; ---------------------------------------------------------------------------
.text:000000000000704C                 align 10h
.text:0000000000007050
.text:0000000000007050 loc_7050:                               ; CODE XREF: xstrtoul+D0↑j
.text:0000000000007050                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000007055                 test    r12b, r12b
.text:0000000000007058                 jz      short loc_7018
.text:000000000000705A                 movsx   esi, r12b       ; c
.text:000000000000705E                 mov     rdi, r13        ; s
.text:0000000000007061                 xor     ebp, ebp
.text:0000000000007063                 call    _strchr
.text:0000000000007068                 test    rax, rax
.text:000000000000706B                 mov     ebx, 1
.text:0000000000007070                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000007075                 jz      short loc_7018
.text:0000000000007077
.text:0000000000007077 loc_7077:                               ; CODE XREF: xstrtoul+BA↑j
.text:0000000000007077                 movsx   esi, r12b       ; c
.text:000000000000707B                 mov     rdi, r13        ; s
.text:000000000000707E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000007083                 call    _strchr
.text:0000000000007088                 test    rax, rax
.text:000000000000708B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000007090                 jz      def_7116        ; jumptable 0000000000007116 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000007096                 lea     eax, [r12-45h]
.text:000000000000709B                 cmp     al, 2Fh ; '/'
.text:000000000000709D                 ja      short loc_70F0
.text:000000000000709F                 mov     rdx, 814400308945h
.text:00000000000070A9                 bt      rdx, rax
.text:00000000000070AD                 jnb     short loc_70F0
.text:00000000000070AF                 mov     esi, 30h ; '0'  ; c
.text:00000000000070B4                 mov     rdi, r13        ; s
.text:00000000000070B7                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000070BC                 call    _strchr
.text:00000000000070C1                 test    rax, rax
.text:00000000000070C4                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000070C9                 jz      short loc_70F0
.text:00000000000070CB                 movzx   eax, byte ptr [rcx+1]
.text:00000000000070CF                 cmp     al, 44h ; 'D'
.text:00000000000070D1                 jz      short loc_70DF
.text:00000000000070D3                 cmp     al, 69h ; 'i'
.text:00000000000070D5                 jz      loc_72A8
.text:00000000000070DB                 cmp     al, 42h ; 'B'
.text:00000000000070DD                 jnz     short loc_70F0
.text:00000000000070DF
.text:00000000000070DF loc_70DF:                               ; CODE XREF: xstrtoul+191↑j
.text:00000000000070DF                 mov     edi, 2
.text:00000000000070E4                 mov     esi, 3E8h
.text:00000000000070E9                 jmp     short loc_70FA
.text:00000000000070E9 ; ---------------------------------------------------------------------------
.text:00000000000070EB                 align 10h
.text:00000000000070F0
.text:00000000000070F0 loc_70F0:                               ; CODE XREF: xstrtoul+15D↑j
.text:00000000000070F0                                         ; xstrtoul+16D↑j ...
.text:00000000000070F0                 mov     edi, 1
.text:00000000000070F5                 mov     esi, 400h
.text:00000000000070FA
.text:00000000000070FA loc_70FA:                               ; CODE XREF: xstrtoul+1A9↑j
.text:00000000000070FA                                         ; xstrtoul+37B↓j
.text:00000000000070FA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:00000000000070FE                 cmp     r12b, 35h
.text:0000000000007102                 ja      short def_7116  ; jumptable 0000000000007116 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000007104                 lea     rdx, jpt_7116
.text:000000000000710B                 movzx   r12d, r12b
.text:000000000000710F                 movsxd  rax, ds:(jpt_7116 - 0A068h)[rdx+r12*4]
.text:0000000000007113                 add     rax, rdx
.text:0000000000007116                 jmp     rax             ; switch jump
.text:0000000000007118 ; ---------------------------------------------------------------------------
.text:0000000000007118
.text:0000000000007118 loc_7118:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000007118                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:0000000000007118                 mov     rax, rbx        ; jumptable 0000000000007116 cases 77,109
.text:000000000000711B                 mul     rsi
.text:000000000000711E                 jo      loc_7311
.text:0000000000007124                 xor     r8d, r8d
.text:0000000000007127
.text:0000000000007127 loc_7127:                               ; CODE XREF: xstrtoul+34E↓j
.text:0000000000007127                                         ; xstrtoul+35E↓j ...
.text:0000000000007127                 mul     rsi
.text:000000000000712A                 jo      loc_7302
.text:0000000000007130                 mov     rbx, rax
.text:0000000000007133
.text:0000000000007133 loc_7133:                               ; CODE XREF: xstrtoul+3CC↓j
.text:0000000000007133                 or      ebp, r8d
.text:0000000000007136                 db      2Eh
.text:0000000000007136                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007140
.text:0000000000007140 loc_7140:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000007140                                         ; xstrtoul+23B↓j ...
.text:0000000000007140                 movsxd  rdi, edi        ; jumptable 0000000000007116 case 99
.text:0000000000007143                 mov     eax, ebp
.text:0000000000007145                 add     rcx, rdi
.text:0000000000007148                 or      eax, 2
.text:000000000000714B                 mov     [r15], rcx
.text:000000000000714E                 cmp     byte ptr [rcx], 0
.text:0000000000007151                 mov     [r14], rbx
.text:0000000000007154                 cmovnz  ebp, eax
.text:0000000000007157                 jmp     loc_701D
.text:000000000000715C ; ---------------------------------------------------------------------------
.text:000000000000715C
.text:000000000000715C def_7116:                               ; CODE XREF: xstrtoul+150↑j
.text:000000000000715C                                         ; xstrtoul+1C2↑j ...
.text:000000000000715C                 mov     [r14], rbx      ; jumptable 0000000000007116 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000715F                 or      ebp, 2
.text:0000000000007162                 jmp     loc_701D
.text:0000000000007167 ; ---------------------------------------------------------------------------
.text:0000000000007167
.text:0000000000007167 loc_7167:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000007167                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:0000000000007167                 mov     edx, 2          ; jumptable 0000000000007116 case 119
.text:000000000000716C                 mov     rax, rdx
.text:000000000000716F                 mul     rbx
.text:0000000000007172                 jo      loc_720E
.text:0000000000007178                 add     rbx, rbx
.text:000000000000717B                 jmp     short loc_7140  ; jumptable 0000000000007116 case 99
.text:000000000000717D ; ---------------------------------------------------------------------------
.text:000000000000717D
.text:000000000000717D loc_717D:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000717D                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:000000000000717D                 mov     edx, 200h       ; jumptable 0000000000007116 case 98
.text:0000000000007182                 mov     rax, rdx
.text:0000000000007185                 mul     rbx
.text:0000000000007188                 jo      loc_720E
.text:000000000000718E                 shl     rbx, 9
.text:0000000000007192                 jmp     short loc_7140  ; jumptable 0000000000007116 case 99
.text:0000000000007194 ; ---------------------------------------------------------------------------
.text:0000000000007194
.text:0000000000007194 loc_7194:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000007194                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:0000000000007194                 mov     r8d, 7          ; jumptable 0000000000007116 case 90
.text:000000000000719A                 xor     r9d, r9d
.text:000000000000719D                 nop     dword ptr [rax]
.text:00000000000071A0
.text:00000000000071A0 loc_71A0:                               ; CODE XREF: xstrtoul+273↓j
.text:00000000000071A0                 mov     rax, rbx
.text:00000000000071A3                 mul     rsi
.text:00000000000071A6                 mov     rbx, rax
.text:00000000000071A9                 jo      loc_733E
.text:00000000000071AF
.text:00000000000071AF loc_71AF:                               ; CODE XREF: xstrtoul+408↓j
.text:00000000000071AF                 sub     r8d, 1
.text:00000000000071B3                 jnz     short loc_71A0
.text:00000000000071B5
.text:00000000000071B5 loc_71B5:                               ; CODE XREF: xstrtoul+29D↓j
.text:00000000000071B5                                         ; xstrtoul+2BD↓j ...
.text:00000000000071B5                 or      ebp, r9d
.text:00000000000071B8                 jmp     short loc_7140  ; jumptable 0000000000007116 case 99
.text:00000000000071BA ; ---------------------------------------------------------------------------
.text:00000000000071BA
.text:00000000000071BA loc_71BA:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000071BA                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:00000000000071BA                 mov     r8d, 8          ; jumptable 0000000000007116 case 89
.text:00000000000071C0                 xor     r9d, r9d
.text:00000000000071C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000071C8
.text:00000000000071C8 loc_71C8:                               ; CODE XREF: xstrtoul+29B↓j
.text:00000000000071C8                 mov     rax, rbx
.text:00000000000071CB                 mul     rsi
.text:00000000000071CE                 mov     rbx, rax
.text:00000000000071D1                 jo      loc_7320
.text:00000000000071D7
.text:00000000000071D7 loc_71D7:                               ; CODE XREF: xstrtoul+3EA↓j
.text:00000000000071D7                 sub     r8d, 1
.text:00000000000071DB                 jnz     short loc_71C8
.text:00000000000071DD                 jmp     short loc_71B5
.text:00000000000071DF ; ---------------------------------------------------------------------------
.text:00000000000071DF
.text:00000000000071DF loc_71DF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000071DF                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:00000000000071DF                 mov     r8d, 4          ; jumptable 0000000000007116 cases 84,116
.text:00000000000071E5                 xor     r9d, r9d
.text:00000000000071E8
.text:00000000000071E8 loc_71E8:                               ; CODE XREF: xstrtoul+2BB↓j
.text:00000000000071E8                 mov     rax, rbx
.text:00000000000071EB                 mul     rsi
.text:00000000000071EE                 mov     rbx, rax
.text:00000000000071F1                 jo      loc_72F3
.text:00000000000071F7
.text:00000000000071F7 loc_71F7:                               ; CODE XREF: xstrtoul+3BD↓j
.text:00000000000071F7                 sub     r8d, 1
.text:00000000000071FB                 jnz     short loc_71E8
.text:00000000000071FD                 jmp     short loc_71B5
.text:00000000000071FF ; ---------------------------------------------------------------------------
.text:00000000000071FF
.text:00000000000071FF loc_71FF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000071FF                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:00000000000071FF                 mov     rax, rbx        ; jumptable 0000000000007116 cases 75,107
.text:0000000000007202                 mul     rsi
.text:0000000000007205                 mov     rbx, rax
.text:0000000000007208                 jno     loc_7140        ; jumptable 0000000000007116 case 99
.text:000000000000720E
.text:000000000000720E loc_720E:                               ; CODE XREF: xstrtoul+232↑j
.text:000000000000720E                                         ; xstrtoul+248↑j ...
.text:000000000000720E                 mov     ebp, 1
.text:0000000000007213                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007217                 jmp     loc_7140        ; jumptable 0000000000007116 case 99
.text:0000000000007217 ; ---------------------------------------------------------------------------
.text:000000000000721C                 align 20h
.text:0000000000007220
.text:0000000000007220 loc_7220:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000007220                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:0000000000007220                 mov     r8d, 5          ; jumptable 0000000000007116 case 80
.text:0000000000007226                 xor     r9d, r9d
.text:0000000000007229
.text:0000000000007229 loc_7229:                               ; CODE XREF: xstrtoul+2FC↓j
.text:0000000000007229                 mov     rax, rbx
.text:000000000000722C                 mul     rsi
.text:000000000000722F                 mov     rbx, rax
.text:0000000000007232                 jo      loc_732F
.text:0000000000007238
.text:0000000000007238 loc_7238:                               ; CODE XREF: xstrtoul+3F9↓j
.text:0000000000007238                 sub     r8d, 1
.text:000000000000723C                 jnz     short loc_7229
.text:000000000000723E                 jmp     loc_71B5
.text:0000000000007243 ; ---------------------------------------------------------------------------
.text:0000000000007243
.text:0000000000007243 loc_7243:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000007243                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:0000000000007243                 mov     r8d, 6          ; jumptable 0000000000007116 case 69
.text:0000000000007249                 xor     r9d, r9d
.text:000000000000724C
.text:000000000000724C loc_724C:                               ; CODE XREF: xstrtoul+31F↓j
.text:000000000000724C                 mov     rax, rbx
.text:000000000000724F                 mul     rsi
.text:0000000000007252                 mov     rbx, rax
.text:0000000000007255                 jo      loc_72E4
.text:000000000000725B
.text:000000000000725B loc_725B:                               ; CODE XREF: xstrtoul+3AE↓j
.text:000000000000725B                 sub     r8d, 1
.text:000000000000725F                 jnz     short loc_724C
.text:0000000000007261                 jmp     loc_71B5
.text:0000000000007266 ; ---------------------------------------------------------------------------
.text:0000000000007266
.text:0000000000007266 loc_7266:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000007266                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:0000000000007266                 mov     edx, 400h       ; jumptable 0000000000007116 case 66
.text:000000000000726B                 mov     rax, rdx
.text:000000000000726E                 mul     rbx
.text:0000000000007271                 jo      short loc_720E
.text:0000000000007273                 shl     rbx, 0Ah
.text:0000000000007277                 jmp     loc_7140        ; jumptable 0000000000007116 case 99
.text:000000000000727C ; ---------------------------------------------------------------------------
.text:000000000000727C
.text:000000000000727C loc_727C:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000727C                                         ; DATA XREF: .rodata:jpt_7116↓o
.text:000000000000727C                 mov     rax, rbx        ; jumptable 0000000000007116 cases 71,103
.text:000000000000727F                 mul     rsi
.text:0000000000007282                 jo      loc_734D
.text:0000000000007288                 xor     r8d, r8d
.text:000000000000728B
.text:000000000000728B loc_728B:                               ; CODE XREF: xstrtoul+417↓j
.text:000000000000728B                 mul     rsi
.text:000000000000728E                 jno     loc_7127
.text:0000000000007294                 mov     r8d, 1
.text:000000000000729A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000729E                 jmp     loc_7127
.text:000000000000729E ; ---------------------------------------------------------------------------
.text:00000000000072A3                 align 8
.text:00000000000072A8
.text:00000000000072A8 loc_72A8:                               ; CODE XREF: xstrtoul+195↑j
.text:00000000000072A8                 xor     edi, edi
.text:00000000000072AA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:00000000000072AE                 mov     esi, 400h
.text:00000000000072B3                 setz    dil
.text:00000000000072B7                 lea     edi, [rdi+rdi+1]
.text:00000000000072BB                 jmp     loc_70FA
.text:00000000000072C0 ; ---------------------------------------------------------------------------
.text:00000000000072C0
.text:00000000000072C0 loc_72C0:                               ; CODE XREF: xstrtoul+ED↑j
.text:00000000000072C0                 call    ___stack_chk_fail
.text:00000000000072C5 ; ---------------------------------------------------------------------------
.text:00000000000072C5
.text:00000000000072C5 loc_72C5:                               ; CODE XREF: xstrtoul+21↑j
.text:00000000000072C5                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoul"
.text:00000000000072CC                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000072D3                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000072DA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000072DF                 call    ___assert_fail
.text:00000000000072E4 ; ---------------------------------------------------------------------------
.text:00000000000072E4
.text:00000000000072E4 loc_72E4:                               ; CODE XREF: xstrtoul+315↑j
.text:00000000000072E4                 mov     r9d, 1
.text:00000000000072EA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000072EE                 jmp     loc_725B
.text:00000000000072F3 ; ---------------------------------------------------------------------------
.text:00000000000072F3
.text:00000000000072F3 loc_72F3:                               ; CODE XREF: xstrtoul+2B1↑j
.text:00000000000072F3                 mov     r9d, 1
.text:00000000000072F9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000072FD                 jmp     loc_71F7
.text:0000000000007302 ; ---------------------------------------------------------------------------
.text:0000000000007302
.text:0000000000007302 loc_7302:                               ; CODE XREF: xstrtoul+1EA↑j
.text:0000000000007302                 mov     r8d, 1
.text:0000000000007308                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000730C                 jmp     loc_7133
.text:0000000000007311 ; ---------------------------------------------------------------------------
.text:0000000000007311
.text:0000000000007311 loc_7311:                               ; CODE XREF: xstrtoul+1DE↑j
.text:0000000000007311                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007315                 mov     r8d, 1
.text:000000000000731B                 jmp     loc_7127
.text:0000000000007320 ; ---------------------------------------------------------------------------
.text:0000000000007320
.text:0000000000007320 loc_7320:                               ; CODE XREF: xstrtoul+291↑j
.text:0000000000007320                 mov     r9d, 1
.text:0000000000007326                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000732A                 jmp     loc_71D7
.text:000000000000732F ; ---------------------------------------------------------------------------
.text:000000000000732F
.text:000000000000732F loc_732F:                               ; CODE XREF: xstrtoul+2F2↑j
.text:000000000000732F                 mov     r9d, 1
.text:0000000000007335                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007339                 jmp     loc_7238
.text:000000000000733E ; ---------------------------------------------------------------------------
.text:000000000000733E
.text:000000000000733E loc_733E:                               ; CODE XREF: xstrtoul+269↑j
.text:000000000000733E                 mov     r9d, 1
.text:0000000000007344                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007348                 jmp     loc_71AF
.text:000000000000734D ; ---------------------------------------------------------------------------
.text:000000000000734D
.text:000000000000734D loc_734D:                               ; CODE XREF: xstrtoul+342↑j
.text:000000000000734D                 mov     r8d, 1
.text:0000000000007353                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007357                 jmp     loc_728B
.text:0000000000007357 ; } // starts at 6F40
.text:0000000000007357 xstrtoul        endp
.text:0000000000007357
.text:0000000000007357 ; ---------------------------------------------------------------------------
.text:000000000000735C                 align 20h
.text:0000000000007360
.text:0000000000007360 ; =============== S U B R O U T I N E =======================================
.text:0000000000007360
.text:0000000000007360
.text:0000000000007360 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000007360                 public xstrtoumax
.text:0000000000007360 xstrtoumax      proc near               ; CODE XREF: xnumtoumax+35↑p
.text:0000000000007360
.text:0000000000007360 base            = dword ptr -50h
.text:0000000000007360 endptr          = qword ptr -48h
.text:0000000000007360 var_40          = qword ptr -40h
.text:0000000000007360
.text:0000000000007360 ; __unwind {
.text:0000000000007360                 push    r15
.text:0000000000007362                 push    r14
.text:0000000000007364                 push    r13
.text:0000000000007366                 push    r12
.text:0000000000007368                 push    rbp
.text:0000000000007369                 push    rbx
.text:000000000000736A                 sub     rsp, 28h
.text:000000000000736E                 mov     rax, fs:28h
.text:0000000000007377                 mov     [rsp+58h+var_40], rax
.text:000000000000737C                 xor     eax, eax
.text:000000000000737E                 cmp     edx, 24h ; '$'
.text:0000000000007381                 ja      loc_76E5
.text:0000000000007387                 lea     rax, [rsp+58h+endptr]
.text:000000000000738C                 mov     r15, rsi
.text:000000000000738F                 test    rsi, rsi
.text:0000000000007392                 mov     rbp, rdi
.text:0000000000007395                 mov     [rsp+58h+base], edx
.text:0000000000007399                 mov     r14, rcx
.text:000000000000739C                 mov     r13, r8
.text:000000000000739F                 cmovz   r15, rax
.text:00000000000073A3                 call    ___errno_location
.text:00000000000073A8                 mov     dword ptr [rax], 0
.text:00000000000073AE                 mov     r12, rax
.text:00000000000073B1                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000073B5                 call    ___ctype_b_loc
.text:00000000000073BA                 mov     edx, [rsp+58h+base] ; base
.text:00000000000073BE                 mov     rsi, [rax]
.text:00000000000073C1                 mov     rax, rbp
.text:00000000000073C4                 jmp     short loc_73D7
.text:00000000000073C4 ; ---------------------------------------------------------------------------
.text:00000000000073C6                 align 10h
.text:00000000000073D0
.text:00000000000073D0 loc_73D0:                               ; CODE XREF: xstrtoumax+7F↓j
.text:00000000000073D0                 add     rax, 1
.text:00000000000073D4                 movzx   ebx, byte ptr [rax]
.text:00000000000073D7
.text:00000000000073D7 loc_73D7:                               ; CODE XREF: xstrtoumax+64↑j
.text:00000000000073D7                 movzx   ecx, bl
.text:00000000000073DA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:00000000000073DF                 jnz     short loc_73D0
.text:00000000000073E1                 cmp     bl, 2Dh ; '-'
.text:00000000000073E4                 jz      short loc_7438
.text:00000000000073E6                 xor     ecx, ecx        ; group
.text:00000000000073E8                 mov     rsi, r15        ; endptr
.text:00000000000073EB                 mov     rdi, rbp        ; nptr
.text:00000000000073EE                 call    ___strtoul_internal
.text:00000000000073F3                 mov     rcx, [r15]
.text:00000000000073F6                 mov     rbx, rax
.text:00000000000073F9                 cmp     rcx, rbp
.text:00000000000073FC                 jz      short loc_7428
.text:00000000000073FE                 mov     eax, [r12]
.text:0000000000007402                 test    eax, eax
.text:0000000000007404                 jz      short loc_7468
.text:0000000000007406                 cmp     eax, 22h ; '"'
.text:0000000000007409                 mov     ebp, 1
.text:000000000000740E                 jnz     short loc_7438
.text:0000000000007410
.text:0000000000007410 loc_7410:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000007410                 test    r13, r13
.text:0000000000007413                 jz      short loc_741E
.text:0000000000007415                 movzx   r12d, byte ptr [rcx]
.text:0000000000007419                 test    r12b, r12b
.text:000000000000741C                 jnz     short loc_7497
.text:000000000000741E
.text:000000000000741E loc_741E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000741E                 mov     [r14], rbx
.text:0000000000007421                 jmp     short loc_743D
.text:0000000000007421 ; ---------------------------------------------------------------------------
.text:0000000000007423                 align 8
.text:0000000000007428
.text:0000000000007428 loc_7428:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000007428                 test    r13, r13
.text:000000000000742B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000007430                 jnz     short loc_7470
.text:0000000000007432                 nop     word ptr [rax+rax+00h]
.text:0000000000007438
.text:0000000000007438 loc_7438:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000007438                                         ; xstrtoumax+AE↑j ...
.text:0000000000007438                 mov     ebp, 4
.text:000000000000743D
.text:000000000000743D loc_743D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:000000000000743D                                         ; xstrtoumax+217↓j ...
.text:000000000000743D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000007442                 xor     rdi, fs:28h
.text:000000000000744B                 mov     eax, ebp
.text:000000000000744D                 jnz     loc_76E0
.text:0000000000007453                 add     rsp, 28h
.text:0000000000007457                 pop     rbx
.text:0000000000007458                 pop     rbp
.text:0000000000007459                 pop     r12
.text:000000000000745B                 pop     r13
.text:000000000000745D                 pop     r14
.text:000000000000745F                 pop     r15
.text:0000000000007461                 retn
.text:0000000000007461 ; ---------------------------------------------------------------------------
.text:0000000000007462                 align 8
.text:0000000000007468
.text:0000000000007468 loc_7468:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000007468                 xor     ebp, ebp
.text:000000000000746A                 jmp     short loc_7410
.text:000000000000746A ; ---------------------------------------------------------------------------
.text:000000000000746C                 align 10h
.text:0000000000007470
.text:0000000000007470 loc_7470:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000007470                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000007475                 test    r12b, r12b
.text:0000000000007478                 jz      short loc_7438
.text:000000000000747A                 movsx   esi, r12b       ; c
.text:000000000000747E                 mov     rdi, r13        ; s
.text:0000000000007481                 xor     ebp, ebp
.text:0000000000007483                 call    _strchr
.text:0000000000007488                 test    rax, rax
.text:000000000000748B                 mov     ebx, 1
.text:0000000000007490                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000007495                 jz      short loc_7438
.text:0000000000007497
.text:0000000000007497 loc_7497:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000007497                 movsx   esi, r12b       ; c
.text:000000000000749B                 mov     rdi, r13        ; s
.text:000000000000749E                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000074A3                 call    _strchr
.text:00000000000074A8                 test    rax, rax
.text:00000000000074AB                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000074B0                 jz      def_7536        ; jumptable 0000000000007536 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000074B6                 lea     eax, [r12-45h]
.text:00000000000074BB                 cmp     al, 2Fh ; '/'
.text:00000000000074BD                 ja      short loc_7510
.text:00000000000074BF                 mov     rdx, 814400308945h
.text:00000000000074C9                 bt      rdx, rax
.text:00000000000074CD                 jnb     short loc_7510
.text:00000000000074CF                 mov     esi, 30h ; '0'  ; c
.text:00000000000074D4                 mov     rdi, r13        ; s
.text:00000000000074D7                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000074DC                 call    _strchr
.text:00000000000074E1                 test    rax, rax
.text:00000000000074E4                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000074E9                 jz      short loc_7510
.text:00000000000074EB                 movzx   eax, byte ptr [rcx+1]
.text:00000000000074EF                 cmp     al, 44h ; 'D'
.text:00000000000074F1                 jz      short loc_74FF
.text:00000000000074F3                 cmp     al, 69h ; 'i'
.text:00000000000074F5                 jz      loc_76C8
.text:00000000000074FB                 cmp     al, 42h ; 'B'
.text:00000000000074FD                 jnz     short loc_7510
.text:00000000000074FF
.text:00000000000074FF loc_74FF:                               ; CODE XREF: xstrtoumax+191↑j
.text:00000000000074FF                 mov     edi, 2
.text:0000000000007504                 mov     esi, 3E8h
.text:0000000000007509                 jmp     short loc_751A
.text:0000000000007509 ; ---------------------------------------------------------------------------
.text:000000000000750B                 align 10h
.text:0000000000007510
.text:0000000000007510 loc_7510:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000007510                                         ; xstrtoumax+16D↑j ...
.text:0000000000007510                 mov     edi, 1
.text:0000000000007515                 mov     esi, 400h
.text:000000000000751A
.text:000000000000751A loc_751A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000751A                                         ; xstrtoumax+37B↓j
.text:000000000000751A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000751E                 cmp     r12b, 35h
.text:0000000000007522                 ja      short def_7536  ; jumptable 0000000000007536 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000007524                 lea     rdx, jpt_7536
.text:000000000000752B                 movzx   r12d, r12b
.text:000000000000752F                 movsxd  rax, ds:(jpt_7536 - 0A150h)[rdx+r12*4]
.text:0000000000007533                 add     rax, rdx
.text:0000000000007536                 jmp     rax             ; switch jump
.text:0000000000007538 ; ---------------------------------------------------------------------------
.text:0000000000007538
.text:0000000000007538 loc_7538:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007538                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:0000000000007538                 mov     rax, rbx        ; jumptable 0000000000007536 cases 77,109
.text:000000000000753B                 mul     rsi
.text:000000000000753E                 jo      loc_7731
.text:0000000000007544                 xor     r8d, r8d
.text:0000000000007547
.text:0000000000007547 loc_7547:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000007547                                         ; xstrtoumax+35E↓j ...
.text:0000000000007547                 mul     rsi
.text:000000000000754A                 jo      loc_7722
.text:0000000000007550                 mov     rbx, rax
.text:0000000000007553
.text:0000000000007553 loc_7553:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000007553                 or      ebp, r8d
.text:0000000000007556                 db      2Eh
.text:0000000000007556                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007560
.text:0000000000007560 loc_7560:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007560                                         ; xstrtoumax+23B↓j ...
.text:0000000000007560                 movsxd  rdi, edi        ; jumptable 0000000000007536 case 99
.text:0000000000007563                 mov     eax, ebp
.text:0000000000007565                 add     rcx, rdi
.text:0000000000007568                 or      eax, 2
.text:000000000000756B                 mov     [r15], rcx
.text:000000000000756E                 cmp     byte ptr [rcx], 0
.text:0000000000007571                 mov     [r14], rbx
.text:0000000000007574                 cmovnz  ebp, eax
.text:0000000000007577                 jmp     loc_743D
.text:000000000000757C ; ---------------------------------------------------------------------------
.text:000000000000757C
.text:000000000000757C def_7536:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000757C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000757C                 mov     [r14], rbx      ; jumptable 0000000000007536 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000757F                 or      ebp, 2
.text:0000000000007582                 jmp     loc_743D
.text:0000000000007587 ; ---------------------------------------------------------------------------
.text:0000000000007587
.text:0000000000007587 loc_7587:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007587                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:0000000000007587                 mov     edx, 2          ; jumptable 0000000000007536 case 119
.text:000000000000758C                 mov     rax, rdx
.text:000000000000758F                 mul     rbx
.text:0000000000007592                 jo      loc_762E
.text:0000000000007598                 add     rbx, rbx
.text:000000000000759B                 jmp     short loc_7560  ; jumptable 0000000000007536 case 99
.text:000000000000759D ; ---------------------------------------------------------------------------
.text:000000000000759D
.text:000000000000759D loc_759D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000759D                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:000000000000759D                 mov     edx, 200h       ; jumptable 0000000000007536 case 98
.text:00000000000075A2                 mov     rax, rdx
.text:00000000000075A5                 mul     rbx
.text:00000000000075A8                 jo      loc_762E
.text:00000000000075AE                 shl     rbx, 9
.text:00000000000075B2                 jmp     short loc_7560  ; jumptable 0000000000007536 case 99
.text:00000000000075B4 ; ---------------------------------------------------------------------------
.text:00000000000075B4
.text:00000000000075B4 loc_75B4:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000075B4                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:00000000000075B4                 mov     r8d, 7          ; jumptable 0000000000007536 case 90
.text:00000000000075BA                 xor     r9d, r9d
.text:00000000000075BD                 nop     dword ptr [rax]
.text:00000000000075C0
.text:00000000000075C0 loc_75C0:                               ; CODE XREF: xstrtoumax+273↓j
.text:00000000000075C0                 mov     rax, rbx
.text:00000000000075C3                 mul     rsi
.text:00000000000075C6                 mov     rbx, rax
.text:00000000000075C9                 jo      loc_775E
.text:00000000000075CF
.text:00000000000075CF loc_75CF:                               ; CODE XREF: xstrtoumax+408↓j
.text:00000000000075CF                 sub     r8d, 1
.text:00000000000075D3                 jnz     short loc_75C0
.text:00000000000075D5
.text:00000000000075D5 loc_75D5:                               ; CODE XREF: xstrtoumax+29D↓j
.text:00000000000075D5                                         ; xstrtoumax+2BD↓j ...
.text:00000000000075D5                 or      ebp, r9d
.text:00000000000075D8                 jmp     short loc_7560  ; jumptable 0000000000007536 case 99
.text:00000000000075DA ; ---------------------------------------------------------------------------
.text:00000000000075DA
.text:00000000000075DA loc_75DA:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000075DA                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:00000000000075DA                 mov     r8d, 8          ; jumptable 0000000000007536 case 89
.text:00000000000075E0                 xor     r9d, r9d
.text:00000000000075E3                 nop     dword ptr [rax+rax+00h]
.text:00000000000075E8
.text:00000000000075E8 loc_75E8:                               ; CODE XREF: xstrtoumax+29B↓j
.text:00000000000075E8                 mov     rax, rbx
.text:00000000000075EB                 mul     rsi
.text:00000000000075EE                 mov     rbx, rax
.text:00000000000075F1                 jo      loc_7740
.text:00000000000075F7
.text:00000000000075F7 loc_75F7:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:00000000000075F7                 sub     r8d, 1
.text:00000000000075FB                 jnz     short loc_75E8
.text:00000000000075FD                 jmp     short loc_75D5
.text:00000000000075FF ; ---------------------------------------------------------------------------
.text:00000000000075FF
.text:00000000000075FF loc_75FF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000075FF                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:00000000000075FF                 mov     r8d, 4          ; jumptable 0000000000007536 cases 84,116
.text:0000000000007605                 xor     r9d, r9d
.text:0000000000007608
.text:0000000000007608 loc_7608:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000007608                 mov     rax, rbx
.text:000000000000760B                 mul     rsi
.text:000000000000760E                 mov     rbx, rax
.text:0000000000007611                 jo      loc_7713
.text:0000000000007617
.text:0000000000007617 loc_7617:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000007617                 sub     r8d, 1
.text:000000000000761B                 jnz     short loc_7608
.text:000000000000761D                 jmp     short loc_75D5
.text:000000000000761F ; ---------------------------------------------------------------------------
.text:000000000000761F
.text:000000000000761F loc_761F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000761F                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:000000000000761F                 mov     rax, rbx        ; jumptable 0000000000007536 cases 75,107
.text:0000000000007622                 mul     rsi
.text:0000000000007625                 mov     rbx, rax
.text:0000000000007628                 jno     loc_7560        ; jumptable 0000000000007536 case 99
.text:000000000000762E
.text:000000000000762E loc_762E:                               ; CODE XREF: xstrtoumax+232↑j
.text:000000000000762E                                         ; xstrtoumax+248↑j ...
.text:000000000000762E                 mov     ebp, 1
.text:0000000000007633                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007637                 jmp     loc_7560        ; jumptable 0000000000007536 case 99
.text:0000000000007637 ; ---------------------------------------------------------------------------
.text:000000000000763C                 align 20h
.text:0000000000007640
.text:0000000000007640 loc_7640:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007640                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:0000000000007640                 mov     r8d, 5          ; jumptable 0000000000007536 case 80
.text:0000000000007646                 xor     r9d, r9d
.text:0000000000007649
.text:0000000000007649 loc_7649:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000007649                 mov     rax, rbx
.text:000000000000764C                 mul     rsi
.text:000000000000764F                 mov     rbx, rax
.text:0000000000007652                 jo      loc_774F
.text:0000000000007658
.text:0000000000007658 loc_7658:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000007658                 sub     r8d, 1
.text:000000000000765C                 jnz     short loc_7649
.text:000000000000765E                 jmp     loc_75D5
.text:0000000000007663 ; ---------------------------------------------------------------------------
.text:0000000000007663
.text:0000000000007663 loc_7663:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007663                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:0000000000007663                 mov     r8d, 6          ; jumptable 0000000000007536 case 69
.text:0000000000007669                 xor     r9d, r9d
.text:000000000000766C
.text:000000000000766C loc_766C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000766C                 mov     rax, rbx
.text:000000000000766F                 mul     rsi
.text:0000000000007672                 mov     rbx, rax
.text:0000000000007675                 jo      loc_7704
.text:000000000000767B
.text:000000000000767B loc_767B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000767B                 sub     r8d, 1
.text:000000000000767F                 jnz     short loc_766C
.text:0000000000007681                 jmp     loc_75D5
.text:0000000000007686 ; ---------------------------------------------------------------------------
.text:0000000000007686
.text:0000000000007686 loc_7686:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007686                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:0000000000007686                 mov     edx, 400h       ; jumptable 0000000000007536 case 66
.text:000000000000768B                 mov     rax, rdx
.text:000000000000768E                 mul     rbx
.text:0000000000007691                 jo      short loc_762E
.text:0000000000007693                 shl     rbx, 0Ah
.text:0000000000007697                 jmp     loc_7560        ; jumptable 0000000000007536 case 99
.text:000000000000769C ; ---------------------------------------------------------------------------
.text:000000000000769C
.text:000000000000769C loc_769C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000769C                                         ; DATA XREF: .rodata:jpt_7536↓o
.text:000000000000769C                 mov     rax, rbx        ; jumptable 0000000000007536 cases 71,103
.text:000000000000769F                 mul     rsi
.text:00000000000076A2                 jo      loc_776D
.text:00000000000076A8                 xor     r8d, r8d
.text:00000000000076AB
.text:00000000000076AB loc_76AB:                               ; CODE XREF: xstrtoumax+417↓j
.text:00000000000076AB                 mul     rsi
.text:00000000000076AE                 jno     loc_7547
.text:00000000000076B4                 mov     r8d, 1
.text:00000000000076BA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000076BE                 jmp     loc_7547
.text:00000000000076BE ; ---------------------------------------------------------------------------
.text:00000000000076C3                 align 8
.text:00000000000076C8
.text:00000000000076C8 loc_76C8:                               ; CODE XREF: xstrtoumax+195↑j
.text:00000000000076C8                 xor     edi, edi
.text:00000000000076CA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:00000000000076CE                 mov     esi, 400h
.text:00000000000076D3                 setz    dil
.text:00000000000076D7                 lea     edi, [rdi+rdi+1]
.text:00000000000076DB                 jmp     loc_751A
.text:00000000000076E0 ; ---------------------------------------------------------------------------
.text:00000000000076E0
.text:00000000000076E0 loc_76E0:                               ; CODE XREF: xstrtoumax+ED↑j
.text:00000000000076E0                 call    ___stack_chk_fail
.text:00000000000076E5 ; ---------------------------------------------------------------------------
.text:00000000000076E5
.text:00000000000076E5 loc_76E5:                               ; CODE XREF: xstrtoumax+21↑j
.text:00000000000076E5                 lea     rcx, __PRETTY_FUNCTION___4162_0 ; "xstrtoumax"
.text:00000000000076EC                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000076F3                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000076FA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000076FF                 call    ___assert_fail
.text:0000000000007704 ; ---------------------------------------------------------------------------
.text:0000000000007704
.text:0000000000007704 loc_7704:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000007704                 mov     r9d, 1
.text:000000000000770A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000770E                 jmp     loc_767B
.text:0000000000007713 ; ---------------------------------------------------------------------------
.text:0000000000007713
.text:0000000000007713 loc_7713:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000007713                 mov     r9d, 1
.text:0000000000007719                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000771D                 jmp     loc_7617
.text:0000000000007722 ; ---------------------------------------------------------------------------
.text:0000000000007722
.text:0000000000007722 loc_7722:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000007722                 mov     r8d, 1
.text:0000000000007728                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000772C                 jmp     loc_7553
.text:0000000000007731 ; ---------------------------------------------------------------------------
.text:0000000000007731
.text:0000000000007731 loc_7731:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000007731                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007735                 mov     r8d, 1
.text:000000000000773B                 jmp     loc_7547
.text:0000000000007740 ; ---------------------------------------------------------------------------
.text:0000000000007740
.text:0000000000007740 loc_7740:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000007740                 mov     r9d, 1
.text:0000000000007746                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000774A                 jmp     loc_75F7
.text:000000000000774F ; ---------------------------------------------------------------------------
.text:000000000000774F
.text:000000000000774F loc_774F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:000000000000774F                 mov     r9d, 1
.text:0000000000007755                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007759                 jmp     loc_7658
.text:000000000000775E ; ---------------------------------------------------------------------------
.text:000000000000775E
.text:000000000000775E loc_775E:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000775E                 mov     r9d, 1
.text:0000000000007764                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007768                 jmp     loc_75CF
.text:000000000000776D ; ---------------------------------------------------------------------------
.text:000000000000776D
.text:000000000000776D loc_776D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000776D                 mov     r8d, 1
.text:0000000000007773                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007777                 jmp     loc_76AB
.text:0000000000007777 ; } // starts at 7360
.text:0000000000007777 xstrtoumax      endp
.text:0000000000007777
.text:0000000000007777 ; ---------------------------------------------------------------------------
.text:000000000000777C                 align 20h
.text:0000000000007780
.text:0000000000007780 ; =============== S U B R O U T I N E =======================================
.text:0000000000007780
.text:0000000000007780 ; Attributes: info_from_lumina
.text:0000000000007780
.text:0000000000007780 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000007780                 public rpl_fclose
.text:0000000000007780 rpl_fclose      proc near               ; CODE XREF: main+739↑p
.text:0000000000007780                                         ; randread_free+33↑j ...
.text:0000000000007780 ; __unwind {
.text:0000000000007780                 push    r12
.text:0000000000007782                 push    rbp
.text:0000000000007783                 push    rbx
.text:0000000000007784                 mov     rbx, rdi
.text:0000000000007787                 call    _fileno
.text:000000000000778C                 test    eax, eax
.text:000000000000778E                 mov     rdi, rbx        ; fp
.text:0000000000007791                 js      short loc_77E7
.text:0000000000007793                 call    ___freading
.text:0000000000007798                 test    eax, eax
.text:000000000000779A                 jnz     short loc_77C8
.text:000000000000779C
.text:000000000000779C loc_779C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000779C                 mov     rdi, rbx        ; stream
.text:000000000000779F                 call    rpl_fflush
.text:00000000000077A4                 test    eax, eax
.text:00000000000077A6                 jz      short loc_77E4
.text:00000000000077A8                 call    ___errno_location
.text:00000000000077AD                 mov     r12d, [rax]
.text:00000000000077B0                 mov     rdi, rbx        ; stream
.text:00000000000077B3                 mov     rbp, rax
.text:00000000000077B6                 call    _fclose
.text:00000000000077BB                 test    r12d, r12d
.text:00000000000077BE                 jnz     short loc_77F0
.text:00000000000077C0
.text:00000000000077C0 loc_77C0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000077C0                 pop     rbx
.text:00000000000077C1                 pop     rbp
.text:00000000000077C2                 pop     r12
.text:00000000000077C4                 retn
.text:00000000000077C4 ; ---------------------------------------------------------------------------
.text:00000000000077C5                 align 8
.text:00000000000077C8
.text:00000000000077C8 loc_77C8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000077C8                 mov     rdi, rbx        ; stream
.text:00000000000077CB                 call    _fileno
.text:00000000000077D0                 xor     esi, esi        ; offset
.text:00000000000077D2                 mov     edx, 1          ; whence
.text:00000000000077D7                 mov     edi, eax        ; fd
.text:00000000000077D9                 call    _lseek
.text:00000000000077DE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000077E2                 jnz     short loc_779C
.text:00000000000077E4
.text:00000000000077E4 loc_77E4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000077E4                 mov     rdi, rbx        ; stream
.text:00000000000077E7
.text:00000000000077E7 loc_77E7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000077E7                 pop     rbx
.text:00000000000077E8                 pop     rbp
.text:00000000000077E9                 pop     r12
.text:00000000000077EB                 jmp     _fclose
.text:00000000000077F0 ; ---------------------------------------------------------------------------
.text:00000000000077F0
.text:00000000000077F0 loc_77F0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000077F0                 mov     [rbp+0], r12d
.text:00000000000077F4                 mov     eax, 0FFFFFFFFh
.text:00000000000077F9                 jmp     short loc_77C0
.text:00000000000077F9 ; } // starts at 7780
.text:00000000000077F9 rpl_fclose      endp
.text:00000000000077F9
.text:00000000000077F9 ; ---------------------------------------------------------------------------
.text:00000000000077FB                 align 20h
.text:0000000000007800
.text:0000000000007800 ; =============== S U B R O U T I N E =======================================
.text:0000000000007800
.text:0000000000007800 ; Attributes: info_from_lumina
.text:0000000000007800
.text:0000000000007800 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000007800                 public rpl_fflush
.text:0000000000007800 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000007800 ; __unwind {
.text:0000000000007800                 test    rdi, rdi
.text:0000000000007803                 push    rbx
.text:0000000000007804                 mov     rbx, rdi
.text:0000000000007807                 jz      short loc_781A
.text:0000000000007809                 call    ___freading
.text:000000000000780E                 test    eax, eax
.text:0000000000007810                 jz      short loc_781A
.text:0000000000007812                 test    dword ptr [rbx], 100h
.text:0000000000007818                 jnz     short loc_7828
.text:000000000000781A
.text:000000000000781A loc_781A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000781A                                         ; rpl_fflush+10↑j
.text:000000000000781A                 mov     rdi, rbx        ; stream
.text:000000000000781D                 pop     rbx
.text:000000000000781E                 jmp     _fflush
.text:000000000000781E ; ---------------------------------------------------------------------------
.text:0000000000007823                 align 8
.text:0000000000007828
.text:0000000000007828 loc_7828:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000007828                 mov     rdi, rbx
.text:000000000000782B                 mov     edx, 1
.text:0000000000007830                 xor     esi, esi
.text:0000000000007832                 call    rpl_fseeko
.text:0000000000007837                 mov     rdi, rbx        ; stream
.text:000000000000783A                 pop     rbx
.text:000000000000783B                 jmp     _fflush
.text:000000000000783B ; } // starts at 7800
.text:000000000000783B rpl_fflush      endp
.text:000000000000783B
.text:0000000000007840
.text:0000000000007840 ; =============== S U B R O U T I N E =======================================
.text:0000000000007840
.text:0000000000007840 ; Attributes: info_from_lumina
.text:0000000000007840
.text:0000000000007840 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000007840                 public rpl_fseeko
.text:0000000000007840 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000007840 ; __unwind {
.text:0000000000007840                 mov     rax, [rdi+8]
.text:0000000000007844                 cmp     [rdi+10h], rax
.text:0000000000007848                 jz      short loc_7850
.text:000000000000784A
.text:000000000000784A loc_784A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000784A                                         ; rpl_fseeko+1F↓j
.text:000000000000784A                 jmp     _fseeko
.text:000000000000784A ; ---------------------------------------------------------------------------
.text:000000000000784F                 align 10h
.text:0000000000007850
.text:0000000000007850 loc_7850:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000007850                 mov     rax, [rdi+20h]
.text:0000000000007854                 cmp     [rdi+28h], rax
.text:0000000000007858                 jnz     short loc_784A
.text:000000000000785A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000785F                 jnz     short loc_784A
.text:0000000000007861                 push    r12
.text:0000000000007863                 push    rbp
.text:0000000000007864                 mov     r12d, edx
.text:0000000000007867                 push    rbx
.text:0000000000007868                 mov     rbp, rsi
.text:000000000000786B                 mov     rbx, rdi
.text:000000000000786E                 call    _fileno
.text:0000000000007873                 mov     edx, r12d       ; whence
.text:0000000000007876                 mov     rsi, rbp        ; offset
.text:0000000000007879                 mov     edi, eax        ; fd
.text:000000000000787B                 call    _lseek
.text:0000000000007880                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007884                 jz      short loc_7892
.text:0000000000007886                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000007889                 mov     [rbx+90h], rax
.text:0000000000007890                 xor     eax, eax
.text:0000000000007892
.text:0000000000007892 loc_7892:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000007892                 pop     rbx
.text:0000000000007893                 pop     rbp
.text:0000000000007894                 pop     r12
.text:0000000000007896                 retn
.text:0000000000007896 ; } // starts at 7840
.text:0000000000007896 rpl_fseeko      endp
.text:0000000000007896
.text:0000000000007896 ; ---------------------------------------------------------------------------
.text:0000000000007897                 align 20h
.text:00000000000078A0
.text:00000000000078A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000078A0
.text:00000000000078A0 ; Attributes: info_from_lumina
.text:00000000000078A0
.text:00000000000078A0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000078A0                 public rpl_mbrtowc
.text:00000000000078A0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000078A0
.text:00000000000078A0 pwc             = dword ptr -34h
.text:00000000000078A0 var_30          = qword ptr -30h
.text:00000000000078A0
.text:00000000000078A0 ; __unwind {
.text:00000000000078A0                 push    r13
.text:00000000000078A2                 push    r12
.text:00000000000078A4                 mov     r13, rsi
.text:00000000000078A7                 push    rbp
.text:00000000000078A8                 push    rbx
.text:00000000000078A9                 mov     rbx, rdi
.text:00000000000078AC                 mov     r12, rdx
.text:00000000000078AF                 sub     rsp, 18h
.text:00000000000078B3                 mov     rax, fs:28h
.text:00000000000078BC                 mov     [rsp+38h+var_30], rax
.text:00000000000078C1                 xor     eax, eax
.text:00000000000078C3                 lea     rax, [rsp+38h+pwc]
.text:00000000000078C8                 test    rdi, rdi
.text:00000000000078CB                 cmovz   rbx, rax
.text:00000000000078CF                 mov     rdi, rbx        ; pwc
.text:00000000000078D2                 call    _mbrtowc
.text:00000000000078D7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000078DB                 mov     rbp, rax
.text:00000000000078DE                 jbe     short loc_7900
.text:00000000000078E0                 test    r12, r12
.text:00000000000078E3                 jz      short loc_7900
.text:00000000000078E5                 xor     edi, edi
.text:00000000000078E7                 call    hard_locale
.text:00000000000078EC                 test    al, al
.text:00000000000078EE                 jnz     short loc_7900
.text:00000000000078F0                 movzx   eax, byte ptr [r13+0]
.text:00000000000078F5                 mov     ebp, 1
.text:00000000000078FA                 mov     [rbx], eax
.text:00000000000078FC                 nop     dword ptr [rax+00h]
.text:0000000000007900
.text:0000000000007900 loc_7900:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000007900                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000007900                 mov     rdx, [rsp+38h+var_30]
.text:0000000000007905                 xor     rdx, fs:28h
.text:000000000000790E                 mov     rax, rbp
.text:0000000000007911                 jnz     short loc_791E
.text:0000000000007913                 add     rsp, 18h
.text:0000000000007917                 pop     rbx
.text:0000000000007918                 pop     rbp
.text:0000000000007919                 pop     r12
.text:000000000000791B                 pop     r13
.text:000000000000791D                 retn
.text:000000000000791E ; ---------------------------------------------------------------------------
.text:000000000000791E
.text:000000000000791E loc_791E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000791E                 call    ___stack_chk_fail
.text:000000000000791E ; } // starts at 78A0
.text:000000000000791E rpl_mbrtowc     endp
.text:000000000000791E
.text:000000000000791E ; ---------------------------------------------------------------------------
.text:0000000000007923                 align 10h
.text:0000000000007930
.text:0000000000007930 ; =============== S U B R O U T I N E =======================================
.text:0000000000007930
.text:0000000000007930 ; Attributes: info_from_lumina
.text:0000000000007930
.text:0000000000007930 ; int __fastcall close_stream(FILE *stream)
.text:0000000000007930                 public close_stream
.text:0000000000007930 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000007930                                         ; close_stdout+33↑p
.text:0000000000007930 ; __unwind {
.text:0000000000007930                 push    r12
.text:0000000000007932                 push    rbp
.text:0000000000007933                 mov     rbp, rdi
.text:0000000000007936                 push    rbx
.text:0000000000007937                 call    ___fpending
.text:000000000000793C                 mov     ebx, [rbp+0]
.text:000000000000793F                 mov     rdi, rbp        ; stream
.text:0000000000007942                 mov     r12, rax
.text:0000000000007945                 call    rpl_fclose
.text:000000000000794A                 and     ebx, 20h
.text:000000000000794D                 test    ebx, ebx
.text:000000000000794F                 jnz     short loc_7968
.text:0000000000007951                 test    eax, eax
.text:0000000000007953                 jz      short loc_795F
.text:0000000000007955                 test    r12, r12
.text:0000000000007958                 mov     eax, 0FFFFFFFFh
.text:000000000000795D                 jz      short loc_7998
.text:000000000000795F
.text:000000000000795F loc_795F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000795F                 pop     rbx
.text:0000000000007960                 pop     rbp
.text:0000000000007961                 pop     r12
.text:0000000000007963                 retn
.text:0000000000007963 ; ---------------------------------------------------------------------------
.text:0000000000007964                 align 8
.text:0000000000007968
.text:0000000000007968 loc_7968:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000007968                 test    eax, eax
.text:000000000000796A                 jnz     short loc_7988
.text:000000000000796C                 call    ___errno_location
.text:0000000000007971                 mov     dword ptr [rax], 0
.text:0000000000007977                 mov     eax, 0FFFFFFFFh
.text:000000000000797C                 pop     rbx
.text:000000000000797D                 pop     rbp
.text:000000000000797E                 pop     r12
.text:0000000000007980                 retn
.text:0000000000007980 ; ---------------------------------------------------------------------------
.text:0000000000007981                 align 8
.text:0000000000007988
.text:0000000000007988 loc_7988:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000007988                 pop     rbx
.text:0000000000007989                 mov     eax, 0FFFFFFFFh
.text:000000000000798E                 pop     rbp
.text:000000000000798F                 pop     r12
.text:0000000000007991                 retn
.text:0000000000007991 ; ---------------------------------------------------------------------------
.text:0000000000007992                 align 8
.text:0000000000007998
.text:0000000000007998 loc_7998:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000007998                 call    ___errno_location
.text:000000000000799D                 cmp     dword ptr [rax], 9
.text:00000000000079A0                 pop     rbx
.text:00000000000079A1                 pop     rbp
.text:00000000000079A2                 pop     r12
.text:00000000000079A4                 setnz   al
.text:00000000000079A7                 movzx   eax, al
.text:00000000000079AA                 neg     eax
.text:00000000000079AC                 retn
.text:00000000000079AC ; } // starts at 7930
.text:00000000000079AC close_stream    endp
.text:00000000000079AC
.text:00000000000079AC ; ---------------------------------------------------------------------------
.text:00000000000079AD                 align 10h
.text:00000000000079B0
.text:00000000000079B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000079B0
.text:00000000000079B0
.text:00000000000079B0                 public fopen_safer
.text:00000000000079B0 fopen_safer     proc near               ; CODE XREF: randread_new+39↑p
.text:00000000000079B0 ; __unwind {
.text:00000000000079B0                 push    r12
.text:00000000000079B2                 push    rbp
.text:00000000000079B3                 mov     rbp, rsi
.text:00000000000079B6                 push    rbx
.text:00000000000079B7                 call    _fopen
.text:00000000000079BC                 test    rax, rax
.text:00000000000079BF                 mov     rbx, rax
.text:00000000000079C2                 jz      short loc_79D1
.text:00000000000079C4                 mov     rdi, rax        ; stream
.text:00000000000079C7                 call    _fileno
.text:00000000000079CC                 cmp     eax, 2
.text:00000000000079CF                 jbe     short loc_79E0
.text:00000000000079D1
.text:00000000000079D1 loc_79D1:                               ; CODE XREF: fopen_safer+12↑j
.text:00000000000079D1                                         ; fopen_safer+5B↓j ...
.text:00000000000079D1                 mov     rax, rbx
.text:00000000000079D4                 pop     rbx
.text:00000000000079D5                 pop     rbp
.text:00000000000079D6                 pop     r12
.text:00000000000079D8                 retn
.text:00000000000079D8 ; ---------------------------------------------------------------------------
.text:00000000000079D9                 align 20h
.text:00000000000079E0
.text:00000000000079E0 loc_79E0:                               ; CODE XREF: fopen_safer+1F↑j
.text:00000000000079E0                 mov     edi, eax
.text:00000000000079E2                 call    dup_safer
.text:00000000000079E7                 test    eax, eax
.text:00000000000079E9                 mov     r12d, eax
.text:00000000000079EC                 js      short loc_7A28
.text:00000000000079EE                 mov     rdi, rbx        ; stream
.text:00000000000079F1                 call    rpl_fclose
.text:00000000000079F6                 test    eax, eax
.text:00000000000079F8                 jnz     short loc_7A0D
.text:00000000000079FA                 mov     rsi, rbp        ; modes
.text:00000000000079FD                 mov     edi, r12d       ; fd
.text:0000000000007A00                 call    _fdopen
.text:0000000000007A05                 test    rax, rax
.text:0000000000007A08                 mov     rbx, rax
.text:0000000000007A0B                 jnz     short loc_79D1
.text:0000000000007A0D
.text:0000000000007A0D loc_7A0D:                               ; CODE XREF: fopen_safer+48↑j
.text:0000000000007A0D                 call    ___errno_location
.text:0000000000007A12                 mov     ebp, [rax]
.text:0000000000007A14                 mov     rbx, rax
.text:0000000000007A17                 mov     edi, r12d       ; fd
.text:0000000000007A1A                 call    _close
.text:0000000000007A1F                 mov     [rbx], ebp
.text:0000000000007A21                 xor     ebx, ebx
.text:0000000000007A23                 jmp     short loc_79D1
.text:0000000000007A23 ; ---------------------------------------------------------------------------
.text:0000000000007A25                 align 8
.text:0000000000007A28
.text:0000000000007A28 loc_7A28:                               ; CODE XREF: fopen_safer+3C↑j
.text:0000000000007A28                 call    ___errno_location
.text:0000000000007A2D                 mov     r12d, [rax]
.text:0000000000007A30                 mov     rbp, rax
.text:0000000000007A33                 mov     rdi, rbx        ; stream
.text:0000000000007A36                 call    rpl_fclose
.text:0000000000007A3B                 xor     ebx, ebx
.text:0000000000007A3D                 mov     [rbp+0], r12d
.text:0000000000007A41                 jmp     short loc_79D1
.text:0000000000007A41 ; } // starts at 79B0
.text:0000000000007A41 fopen_safer     endp
.text:0000000000007A41
.text:0000000000007A41 ; ---------------------------------------------------------------------------
.text:0000000000007A43                 align 10h
.text:0000000000007A50
.text:0000000000007A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A50
.text:0000000000007A50
.text:0000000000007A50                 public hard_locale
.text:0000000000007A50 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000007A50 ; __unwind {
.text:0000000000007A50                 sub     rsp, 8
.text:0000000000007A54                 xor     esi, esi        ; locale
.text:0000000000007A56                 call    _setlocale
.text:0000000000007A5B                 mov     rdx, rax
.text:0000000000007A5E                 mov     eax, 1
.text:0000000000007A63                 test    rdx, rdx
.text:0000000000007A66                 jz      short loc_7A85
.text:0000000000007A68                 lea     rdi, aC         ; "C"
.text:0000000000007A6F                 mov     ecx, 2
.text:0000000000007A74                 mov     rsi, rdx
.text:0000000000007A77                 repe cmpsb
.text:0000000000007A79                 setnbe  cl
.text:0000000000007A7C                 sbb     cl, 0
.text:0000000000007A7F                 xor     eax, eax
.text:0000000000007A81                 test    cl, cl
.text:0000000000007A83                 jnz     short loc_7A90
.text:0000000000007A85
.text:0000000000007A85 loc_7A85:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000007A85                 add     rsp, 8
.text:0000000000007A89                 retn
.text:0000000000007A89 ; ---------------------------------------------------------------------------
.text:0000000000007A8A                 align 10h
.text:0000000000007A90
.text:0000000000007A90 loc_7A90:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000007A90                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000007A97                 mov     ecx, 6
.text:0000000000007A9C                 mov     rsi, rdx
.text:0000000000007A9F                 repe cmpsb
.text:0000000000007AA1                 setnbe  al
.text:0000000000007AA4                 sbb     al, 0
.text:0000000000007AA6                 test    al, al
.text:0000000000007AA8                 setnz   al
.text:0000000000007AAB                 add     rsp, 8
.text:0000000000007AAF                 retn
.text:0000000000007AAF ; } // starts at 7A50
.text:0000000000007AAF hard_locale     endp
.text:0000000000007AAF
.text:0000000000007AB0
.text:0000000000007AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AB0
.text:0000000000007AB0 ; Attributes: info_from_lumina
.text:0000000000007AB0
.text:0000000000007AB0 ; size_t __fastcall next_prime(size_t candidate)
.text:0000000000007AB0 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:0000000000007AB0                                         ; hash_rehash+7B↓p
.text:0000000000007AB0 ; __unwind {
.text:0000000000007AB0                 cmp     rdi, 0Ah
.text:0000000000007AB4                 mov     eax, 0Ah
.text:0000000000007AB9                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:0000000000007AC3                 cmovb   rdi, rax
.text:0000000000007AC7                 or      rdi, 1
.text:0000000000007ACB                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007ACF                 jz      short loc_7B3F
.text:0000000000007AD1                 nop     dword ptr [rax+00000000h]
.text:0000000000007AD8
.text:0000000000007AD8 loc_7AD8:                               ; CODE XREF: next_prime+8D↓j
.text:0000000000007AD8                 mov     rax, rdi
.text:0000000000007ADB                 mov     rcx, rdi
.text:0000000000007ADE                 mul     r9
.text:0000000000007AE1                 mov     rax, rdx
.text:0000000000007AE4                 shr     rax, 1
.text:0000000000007AE7                 lea     rax, [rax+rax*2]
.text:0000000000007AEB                 sub     rcx, rax
.text:0000000000007AEE                 cmp     rdi, 9
.text:0000000000007AF2                 mov     rax, rcx
.text:0000000000007AF5                 jbe     short loc_7B30
.text:0000000000007AF7                 test    rcx, rcx
.text:0000000000007AFA                 jz      short loc_7B35
.text:0000000000007AFC                 mov     r8d, 10h
.text:0000000000007B02                 mov     esi, 9
.text:0000000000007B07                 mov     ecx, 3
.text:0000000000007B0C                 jmp     short loc_7B19
.text:0000000000007B0C ; ---------------------------------------------------------------------------
.text:0000000000007B0E                 align 10h
.text:0000000000007B10
.text:0000000000007B10 loc_7B10:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000007B10                 add     r8, 8
.text:0000000000007B14                 test    rdx, rdx
.text:0000000000007B17                 jz      short loc_7B35
.text:0000000000007B19
.text:0000000000007B19 loc_7B19:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000007B19                 add     rcx, 2
.text:0000000000007B1D                 xor     edx, edx
.text:0000000000007B1F                 mov     rax, rdi
.text:0000000000007B22                 div     rcx
.text:0000000000007B25                 add     rsi, r8
.text:0000000000007B28                 cmp     rsi, rdi
.text:0000000000007B2B                 mov     rax, rdx
.text:0000000000007B2E                 jb      short loc_7B10
.text:0000000000007B30
.text:0000000000007B30 loc_7B30:                               ; CODE XREF: next_prime+45↑j
.text:0000000000007B30                 test    rax, rax
.text:0000000000007B33                 jnz     short loc_7B3F
.text:0000000000007B35
.text:0000000000007B35 loc_7B35:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000007B35                                         ; next_prime+67↑j
.text:0000000000007B35                 add     rdi, 2
.text:0000000000007B39                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007B3D                 jnz     short loc_7AD8
.text:0000000000007B3F
.text:0000000000007B3F loc_7B3F:                               ; CODE XREF: next_prime+1F↑j
.text:0000000000007B3F                                         ; next_prime+83↑j
.text:0000000000007B3F                 mov     rax, rdi
.text:0000000000007B42                 retn
.text:0000000000007B42 ; } // starts at 7AB0
.text:0000000000007B42 next_prime      endp
.text:0000000000007B42
.text:0000000000007B42 ; ---------------------------------------------------------------------------
.text:0000000000007B43                 align 10h
.text:0000000000007B50
.text:0000000000007B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B50
.text:0000000000007B50
.text:0000000000007B50 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000007B50 ; __unwind {
.text:0000000000007B50                 mov     rax, rdi
.text:0000000000007B53                 xor     edx, edx
.text:0000000000007B55                 ror     rax, 3
.text:0000000000007B59                 div     rsi
.text:0000000000007B5C                 mov     rax, rdx
.text:0000000000007B5F                 retn
.text:0000000000007B5F ; } // starts at 7B50
.text:0000000000007B5F raw_hasher      endp
.text:0000000000007B5F
.text:0000000000007B60
.text:0000000000007B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B60
.text:0000000000007B60
.text:0000000000007B60 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:0000000000007B60 ; __unwind {
.text:0000000000007B60                 cmp     rdi, rsi
.text:0000000000007B63                 setz    al
.text:0000000000007B66                 retn
.text:0000000000007B66 ; } // starts at 7B60
.text:0000000000007B66 raw_comparator  endp
.text:0000000000007B66
.text:0000000000007B66 ; ---------------------------------------------------------------------------
.text:0000000000007B67                 align 10h
.text:0000000000007B70
.text:0000000000007B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B70
.text:0000000000007B70 ; Attributes: info_from_lumina
.text:0000000000007B70
.text:0000000000007B70 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:0000000000007B70 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:0000000000007B70                                         ; transfer_entries+65↓p ...
.text:0000000000007B70 ; __unwind {
.text:0000000000007B70                 push    rbx
.text:0000000000007B71                 mov     rbx, rdi
.text:0000000000007B74                 mov     rdi, rsi
.text:0000000000007B77                 mov     rsi, [rbx+10h]
.text:0000000000007B7B                 call    qword ptr [rbx+30h]
.text:0000000000007B7E                 cmp     [rbx+10h], rax
.text:0000000000007B82                 jbe     short loc_7B8D
.text:0000000000007B84                 shl     rax, 4
.text:0000000000007B88                 add     rax, [rbx]
.text:0000000000007B8B                 pop     rbx
.text:0000000000007B8C                 retn
.text:0000000000007B8D ; ---------------------------------------------------------------------------
.text:0000000000007B8D
.text:0000000000007B8D loc_7B8D:                               ; CODE XREF: safe_hasher+12↑j
.text:0000000000007B8D                 call    _abort
.text:0000000000007B8D ; } // starts at 7B70
.text:0000000000007B8D safe_hasher     endp
.text:0000000000007B8D
.text:0000000000007B8D ; ---------------------------------------------------------------------------
.text:0000000000007B92                 align 20h
.text:0000000000007BA0
.text:0000000000007BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007BA0
.text:0000000000007BA0 ; Attributes: info_from_lumina
.text:0000000000007BA0
.text:0000000000007BA0 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:0000000000007BA0 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:0000000000007BA0                                         ; hash_insert_if_absent+1CF↓p ...
.text:0000000000007BA0 ; __unwind {
.text:0000000000007BA0                 push    r14
.text:0000000000007BA2                 push    r13
.text:0000000000007BA4                 mov     r14, rdx
.text:0000000000007BA7                 push    r12
.text:0000000000007BA9                 push    rbp
.text:0000000000007BAA                 mov     r12, rdi
.text:0000000000007BAD                 push    rbx
.text:0000000000007BAE                 mov     rbp, rsi
.text:0000000000007BB1                 mov     r13d, ecx
.text:0000000000007BB4                 call    safe_hasher
.text:0000000000007BB9                 mov     [r14], rax
.text:0000000000007BBC                 mov     rsi, [rax]
.text:0000000000007BBF                 test    rsi, rsi
.text:0000000000007BC2                 jz      loc_7CB0
.text:0000000000007BC8                 cmp     rsi, rbp
.text:0000000000007BCB                 mov     rbx, rax
.text:0000000000007BCE                 jz      loc_7C63
.text:0000000000007BD4                 mov     rdi, rbp
.text:0000000000007BD7                 call    qword ptr [r12+38h]
.text:0000000000007BDC                 test    al, al
.text:0000000000007BDE                 jnz     loc_7C60
.text:0000000000007BE4                 mov     rax, [rbx+8]
.text:0000000000007BE8                 test    rax, rax
.text:0000000000007BEB                 jz      loc_7CB0
.text:0000000000007BF1                 mov     rsi, [rax]
.text:0000000000007BF4                 cmp     rbp, rsi
.text:0000000000007BF7                 jnz     short loc_7C19
.text:0000000000007BF9                 jmp     short loc_7C2C
.text:0000000000007BF9 ; ---------------------------------------------------------------------------
.text:0000000000007BFB                 align 20h
.text:0000000000007C00
.text:0000000000007C00 loc_7C00:                               ; CODE XREF: hash_find_entry+83↓j
.text:0000000000007C00                 mov     rbx, [rbx+8]
.text:0000000000007C04                 mov     rax, [rbx+8]
.text:0000000000007C08                 test    rax, rax
.text:0000000000007C0B                 jz      loc_7CB0
.text:0000000000007C11                 mov     rsi, [rax]
.text:0000000000007C14                 cmp     rsi, rbp
.text:0000000000007C17                 jz      short loc_7C2C
.text:0000000000007C19
.text:0000000000007C19 loc_7C19:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000007C19                 mov     rdi, rbp
.text:0000000000007C1C                 call    qword ptr [r12+38h]
.text:0000000000007C21                 test    al, al
.text:0000000000007C23                 jz      short loc_7C00
.text:0000000000007C25                 mov     rax, [rbx+8]
.text:0000000000007C29                 mov     rsi, [rax]
.text:0000000000007C2C
.text:0000000000007C2C loc_7C2C:                               ; CODE XREF: hash_find_entry+59↑j
.text:0000000000007C2C                                         ; hash_find_entry+77↑j
.text:0000000000007C2C                 test    r13b, r13b
.text:0000000000007C2F                 jz      short loc_7C4E
.text:0000000000007C31                 mov     rdx, [rax+8]
.text:0000000000007C35                 mov     [rbx+8], rdx
.text:0000000000007C39                 mov     qword ptr [rax], 0
.text:0000000000007C40                 mov     rdx, [r12+48h]
.text:0000000000007C45                 mov     [rax+8], rdx
.text:0000000000007C49                 mov     [r12+48h], rax
.text:0000000000007C4E
.text:0000000000007C4E loc_7C4E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:0000000000007C4E                                         ; hash_find_entry+C6↓j ...
.text:0000000000007C4E                 pop     rbx
.text:0000000000007C4F                 mov     rax, rsi
.text:0000000000007C52                 pop     rbp
.text:0000000000007C53                 pop     r12
.text:0000000000007C55                 pop     r13
.text:0000000000007C57                 pop     r14
.text:0000000000007C59                 retn
.text:0000000000007C59 ; ---------------------------------------------------------------------------
.text:0000000000007C5A                 align 20h
.text:0000000000007C60
.text:0000000000007C60 loc_7C60:                               ; CODE XREF: hash_find_entry+3E↑j
.text:0000000000007C60                 mov     rsi, [rbx]
.text:0000000000007C63
.text:0000000000007C63 loc_7C63:                               ; CODE XREF: hash_find_entry+2E↑j
.text:0000000000007C63                 test    r13b, r13b
.text:0000000000007C66                 jz      short loc_7C4E
.text:0000000000007C68                 mov     rax, [rbx+8]
.text:0000000000007C6C                 test    rax, rax
.text:0000000000007C6F                 jz      short loc_7CA0
.text:0000000000007C71                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000007C75                 movups  xmmword ptr [rbx], xmm0
.text:0000000000007C78                 mov     qword ptr [rax], 0
.text:0000000000007C7F                 mov     rdx, [r12+48h]
.text:0000000000007C84                 mov     [rax+8], rdx
.text:0000000000007C88                 mov     [r12+48h], rax
.text:0000000000007C8D                 mov     rax, rsi
.text:0000000000007C90                 pop     rbx
.text:0000000000007C91                 pop     rbp
.text:0000000000007C92                 pop     r12
.text:0000000000007C94                 pop     r13
.text:0000000000007C96                 pop     r14
.text:0000000000007C98                 retn
.text:0000000000007C98 ; ---------------------------------------------------------------------------
.text:0000000000007C99                 align 20h
.text:0000000000007CA0
.text:0000000000007CA0 loc_7CA0:                               ; CODE XREF: hash_find_entry+CF↑j
.text:0000000000007CA0                 mov     qword ptr [rbx], 0
.text:0000000000007CA7                 jmp     short loc_7C4E
.text:0000000000007CA7 ; ---------------------------------------------------------------------------
.text:0000000000007CA9                 align 10h
.text:0000000000007CB0
.text:0000000000007CB0 loc_7CB0:                               ; CODE XREF: hash_find_entry+22↑j
.text:0000000000007CB0                                         ; hash_find_entry+4B↑j ...
.text:0000000000007CB0                 xor     esi, esi
.text:0000000000007CB2                 pop     rbx
.text:0000000000007CB3                 mov     rax, rsi
.text:0000000000007CB6                 pop     rbp
.text:0000000000007CB7                 pop     r12
.text:0000000000007CB9                 pop     r13
.text:0000000000007CBB                 pop     r14
.text:0000000000007CBD                 retn
.text:0000000000007CBD ; } // starts at 7BA0
.text:0000000000007CBD hash_find_entry endp
.text:0000000000007CBD
.text:0000000000007CBD ; ---------------------------------------------------------------------------
.text:0000000000007CBE                 align 20h
.text:0000000000007CC0
.text:0000000000007CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CC0
.text:0000000000007CC0 ; Attributes: info_from_lumina
.text:0000000000007CC0
.text:0000000000007CC0 ; _Bool check_tuning(Hash_table *table)
.text:0000000000007CC0 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:0000000000007CC0                                         ; hash_initialize+11B↓p ...
.text:0000000000007CC0 ; __unwind {
.text:0000000000007CC0                 mov     rdx, [rdi]
.text:0000000000007CC3                 lea     rcx, default_tuning
.text:0000000000007CCA                 mov     eax, 1
.text:0000000000007CCF                 cmp     rdx, rcx
.text:0000000000007CD2                 jz      short locret_7D35
.text:0000000000007CD4                 movss   xmm0, dword ptr [rdx+8]
.text:0000000000007CD9                 ucomiss xmm0, cs:dword_A2C4
.text:0000000000007CE0                 jbe     short loc_7D30
.text:0000000000007CE2                 movss   xmm1, cs:dword_A2C8
.text:0000000000007CEA                 ucomiss xmm1, xmm0
.text:0000000000007CED                 jbe     short loc_7D30
.text:0000000000007CEF                 movss   xmm1, dword ptr [rdx+0Ch]
.text:0000000000007CF4                 ucomiss xmm1, cs:dword_A2CC
.text:0000000000007CFB                 jbe     short loc_7D30
.text:0000000000007CFD                 movss   xmm1, dword ptr [rdx]
.text:0000000000007D01                 ucomiss xmm1, cs:dword_A2D0
.text:0000000000007D08                 jb      short loc_7D30
.text:0000000000007D0A                 addss   xmm1, cs:dword_A2C4
.text:0000000000007D12                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000007D17                 ucomiss xmm2, xmm1
.text:0000000000007D1A                 jbe     short loc_7D30
.text:0000000000007D1C                 movss   xmm3, cs:dword_A2D4
.text:0000000000007D24                 ucomiss xmm3, xmm2
.text:0000000000007D27                 jb      short loc_7D30
.text:0000000000007D29                 ucomiss xmm0, xmm1
.text:0000000000007D2C                 ja      short locret_7D35
.text:0000000000007D2E                 xchg    ax, ax
.text:0000000000007D30
.text:0000000000007D30 loc_7D30:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000007D30                                         ; check_tuning+2D↑j ...
.text:0000000000007D30                 mov     [rdi], rcx
.text:0000000000007D33                 xor     eax, eax
.text:0000000000007D35
.text:0000000000007D35 locret_7D35:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000007D35                                         ; check_tuning+6C↑j
.text:0000000000007D35                 rep retn
.text:0000000000007D35 ; } // starts at 7CC0
.text:0000000000007D35 check_tuning    endp
.text:0000000000007D35
.text:0000000000007D35 ; ---------------------------------------------------------------------------
.text:0000000000007D37                 align 20h
.text:0000000000007D40
.text:0000000000007D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D40
.text:0000000000007D40 ; Attributes: info_from_lumina
.text:0000000000007D40
.text:0000000000007D40 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000007D40 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000007D40                                         ; hash_rehash+152↓p ...
.text:0000000000007D40 ; __unwind {
.text:0000000000007D40                 push    r15
.text:0000000000007D42                 push    r14
.text:0000000000007D44                 push    r13
.text:0000000000007D46                 push    r12
.text:0000000000007D48                 push    rbp
.text:0000000000007D49                 push    rbx
.text:0000000000007D4A                 sub     rsp, 8
.text:0000000000007D4E                 mov     r12, [rsi]
.text:0000000000007D51                 cmp     r12, [rsi+8]
.text:0000000000007D55                 jnb     loc_7E38
.text:0000000000007D5B                 mov     rbp, rdi
.text:0000000000007D5E                 mov     r13, rsi
.text:0000000000007D61                 mov     r14d, edx
.text:0000000000007D64                 nop     dword ptr [rax+00h]
.text:0000000000007D68
.text:0000000000007D68 loc_7D68:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000007D68                 mov     r15, [r12]
.text:0000000000007D6C                 test    r15, r15
.text:0000000000007D6F                 jz      loc_7E2A
.text:0000000000007D75                 mov     rbx, [r12+8]
.text:0000000000007D7A                 test    rbx, rbx
.text:0000000000007D7D                 jnz     short loc_7D9C
.text:0000000000007D7F                 jmp     short loc_7DDB
.text:0000000000007D7F ; ---------------------------------------------------------------------------
.text:0000000000007D81                 align 8
.text:0000000000007D88
.text:0000000000007D88 loc_7D88:                               ; CODE XREF: transfer_entries+72↓j
.text:0000000000007D88                 mov     rcx, [rax+8]
.text:0000000000007D8C                 test    rdx, rdx
.text:0000000000007D8F                 mov     [rbx+8], rcx
.text:0000000000007D93                 mov     [rax+8], rbx
.text:0000000000007D97                 mov     rbx, rdx
.text:0000000000007D9A                 jz      short loc_7DD7
.text:0000000000007D9C
.text:0000000000007D9C loc_7D9C:                               ; CODE XREF: transfer_entries+3D↑j
.text:0000000000007D9C                                         ; transfer_entries+95↓j
.text:0000000000007D9C                 mov     r15, [rbx]
.text:0000000000007D9F                 mov     rdi, rbp
.text:0000000000007DA2                 mov     rsi, r15
.text:0000000000007DA5                 call    safe_hasher
.text:0000000000007DAA                 cmp     qword ptr [rax], 0
.text:0000000000007DAE                 mov     rdx, [rbx+8]
.text:0000000000007DB2                 jnz     short loc_7D88
.text:0000000000007DB4                 mov     [rax], r15
.text:0000000000007DB7                 add     qword ptr [rbp+18h], 1
.text:0000000000007DBC                 test    rdx, rdx
.text:0000000000007DBF                 mov     qword ptr [rbx], 0
.text:0000000000007DC6                 mov     rax, [rbp+48h]
.text:0000000000007DCA                 mov     [rbx+8], rax
.text:0000000000007DCE                 mov     [rbp+48h], rbx
.text:0000000000007DD2                 mov     rbx, rdx
.text:0000000000007DD5                 jnz     short loc_7D9C
.text:0000000000007DD7
.text:0000000000007DD7 loc_7DD7:                               ; CODE XREF: transfer_entries+5A↑j
.text:0000000000007DD7                 mov     r15, [r12]
.text:0000000000007DDB
.text:0000000000007DDB loc_7DDB:                               ; CODE XREF: transfer_entries+3F↑j
.text:0000000000007DDB                 test    r14b, r14b
.text:0000000000007DDE                 mov     qword ptr [r12+8], 0
.text:0000000000007DE7                 jnz     short loc_7E2A
.text:0000000000007DE9                 mov     rsi, r15
.text:0000000000007DEC                 mov     rdi, rbp
.text:0000000000007DEF                 call    safe_hasher
.text:0000000000007DF4                 cmp     qword ptr [rax], 0
.text:0000000000007DF8                 mov     rbx, rax
.text:0000000000007DFB                 jz      short loc_7E50
.text:0000000000007DFD                 mov     rax, [rbp+48h]
.text:0000000000007E01                 test    rax, rax
.text:0000000000007E04                 jz      short loc_7E60
.text:0000000000007E06                 mov     rdx, [rax+8]
.text:0000000000007E0A                 mov     [rbp+48h], rdx
.text:0000000000007E0E
.text:0000000000007E0E loc_7E0E:                               ; CODE XREF: transfer_entries+12D↓j
.text:0000000000007E0E                 mov     rdx, [rbx+8]
.text:0000000000007E12                 mov     [rax], r15
.text:0000000000007E15                 mov     [rax+8], rdx
.text:0000000000007E19                 mov     [rbx+8], rax
.text:0000000000007E1D
.text:0000000000007E1D loc_7E1D:                               ; CODE XREF: transfer_entries+118↓j
.text:0000000000007E1D                 mov     qword ptr [r12], 0
.text:0000000000007E25                 sub     qword ptr [r13+18h], 1
.text:0000000000007E2A
.text:0000000000007E2A loc_7E2A:                               ; CODE XREF: transfer_entries+2F↑j
.text:0000000000007E2A                                         ; transfer_entries+A7↑j
.text:0000000000007E2A                 add     r12, 10h
.text:0000000000007E2E                 cmp     [r13+8], r12
.text:0000000000007E32                 ja      loc_7D68
.text:0000000000007E38
.text:0000000000007E38 loc_7E38:                               ; CODE XREF: transfer_entries+15↑j
.text:0000000000007E38                 add     rsp, 8
.text:0000000000007E3C                 mov     eax, 1
.text:0000000000007E41                 pop     rbx
.text:0000000000007E42                 pop     rbp
.text:0000000000007E43                 pop     r12
.text:0000000000007E45                 pop     r13
.text:0000000000007E47                 pop     r14
.text:0000000000007E49                 pop     r15
.text:0000000000007E4B                 retn
.text:0000000000007E4B ; ---------------------------------------------------------------------------
.text:0000000000007E4C                 align 10h
.text:0000000000007E50
.text:0000000000007E50 loc_7E50:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000007E50                 mov     [rax], r15
.text:0000000000007E53                 add     qword ptr [rbp+18h], 1
.text:0000000000007E58                 jmp     short loc_7E1D
.text:0000000000007E58 ; ---------------------------------------------------------------------------
.text:0000000000007E5A                 align 20h
.text:0000000000007E60
.text:0000000000007E60 loc_7E60:                               ; CODE XREF: transfer_entries+C4↑j
.text:0000000000007E60                 mov     edi, 10h        ; size
.text:0000000000007E65                 call    _malloc
.text:0000000000007E6A                 test    rax, rax
.text:0000000000007E6D                 jnz     short loc_7E0E
.text:0000000000007E6F                 add     rsp, 8
.text:0000000000007E73                 xor     eax, eax
.text:0000000000007E75                 pop     rbx
.text:0000000000007E76                 pop     rbp
.text:0000000000007E77                 pop     r12
.text:0000000000007E79                 pop     r13
.text:0000000000007E7B                 pop     r14
.text:0000000000007E7D                 pop     r15
.text:0000000000007E7F                 retn
.text:0000000000007E7F ; } // starts at 7D40
.text:0000000000007E7F transfer_entries endp
.text:0000000000007E7F
.text:0000000000007E80
.text:0000000000007E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E80
.text:0000000000007E80
.text:0000000000007E80                 public hash_get_n_buckets
.text:0000000000007E80 hash_get_n_buckets proc near
.text:0000000000007E80 ; __unwind {
.text:0000000000007E80                 mov     rax, [rdi+10h]
.text:0000000000007E84                 retn
.text:0000000000007E84 ; } // starts at 7E80
.text:0000000000007E84 hash_get_n_buckets endp
.text:0000000000007E84
.text:0000000000007E84 ; ---------------------------------------------------------------------------
.text:0000000000007E85                 align 10h
.text:0000000000007E90
.text:0000000000007E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E90
.text:0000000000007E90
.text:0000000000007E90                 public hash_get_n_buckets_used
.text:0000000000007E90 hash_get_n_buckets_used proc near
.text:0000000000007E90 ; __unwind {
.text:0000000000007E90                 mov     rax, [rdi+18h]
.text:0000000000007E94                 retn
.text:0000000000007E94 ; } // starts at 7E90
.text:0000000000007E94 hash_get_n_buckets_used endp
.text:0000000000007E94
.text:0000000000007E94 ; ---------------------------------------------------------------------------
.text:0000000000007E95                 align 20h
.text:0000000000007EA0
.text:0000000000007EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007EA0
.text:0000000000007EA0
.text:0000000000007EA0                 public hash_get_n_entries
.text:0000000000007EA0 hash_get_n_entries proc near
.text:0000000000007EA0 ; __unwind {
.text:0000000000007EA0                 mov     rax, [rdi+20h]
.text:0000000000007EA4                 retn
.text:0000000000007EA4 ; } // starts at 7EA0
.text:0000000000007EA4 hash_get_n_entries endp
.text:0000000000007EA4
.text:0000000000007EA4 ; ---------------------------------------------------------------------------
.text:0000000000007EA5                 align 10h
.text:0000000000007EB0
.text:0000000000007EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007EB0
.text:0000000000007EB0 ; Attributes: info_from_lumina
.text:0000000000007EB0
.text:0000000000007EB0 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:0000000000007EB0                 public hash_get_max_bucket_length
.text:0000000000007EB0 hash_get_max_bucket_length proc near
.text:0000000000007EB0 ; __unwind {
.text:0000000000007EB0                 mov     rsi, [rdi]
.text:0000000000007EB3                 mov     rdi, [rdi+8]
.text:0000000000007EB7                 xor     eax, eax
.text:0000000000007EB9                 cmp     rsi, rdi
.text:0000000000007EBC                 jnb     short locret_7EF7
.text:0000000000007EBE                 xchg    ax, ax
.text:0000000000007EC0
.text:0000000000007EC0 loc_7EC0:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:0000000000007EC0                 cmp     qword ptr [rsi], 0
.text:0000000000007EC4                 jz      short loc_7EEC
.text:0000000000007EC6                 mov     rdx, [rsi+8]
.text:0000000000007ECA                 mov     ecx, 1
.text:0000000000007ECF                 test    rdx, rdx
.text:0000000000007ED2                 jz      short loc_7EE5
.text:0000000000007ED4                 nop     dword ptr [rax+00h]
.text:0000000000007ED8
.text:0000000000007ED8 loc_7ED8:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:0000000000007ED8                 mov     rdx, [rdx+8]
.text:0000000000007EDC                 add     rcx, 1
.text:0000000000007EE0                 test    rdx, rdx
.text:0000000000007EE3                 jnz     short loc_7ED8
.text:0000000000007EE5
.text:0000000000007EE5 loc_7EE5:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:0000000000007EE5                 cmp     rax, rcx
.text:0000000000007EE8                 cmovb   rax, rcx
.text:0000000000007EEC
.text:0000000000007EEC loc_7EEC:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:0000000000007EEC                 add     rsi, 10h
.text:0000000000007EF0                 cmp     rsi, rdi
.text:0000000000007EF3                 jb      short loc_7EC0
.text:0000000000007EF5                 rep retn
.text:0000000000007EF7 ; ---------------------------------------------------------------------------
.text:0000000000007EF7
.text:0000000000007EF7 locret_7EF7:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:0000000000007EF7                 rep retn
.text:0000000000007EF7 ; } // starts at 7EB0
.text:0000000000007EF7 hash_get_max_bucket_length endp
.text:0000000000007EF7
.text:0000000000007EF7 ; ---------------------------------------------------------------------------
.text:0000000000007EF9                 align 20h
.text:0000000000007F00
.text:0000000000007F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F00
.text:0000000000007F00 ; Attributes: info_from_lumina
.text:0000000000007F00
.text:0000000000007F00 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:0000000000007F00                 public hash_table_ok
.text:0000000000007F00 hash_table_ok   proc near
.text:0000000000007F00 ; __unwind {
.text:0000000000007F00                 mov     rcx, [rdi]
.text:0000000000007F03                 mov     r8, [rdi+8]
.text:0000000000007F07                 xor     edx, edx
.text:0000000000007F09                 xor     esi, esi
.text:0000000000007F0B                 cmp     rcx, r8
.text:0000000000007F0E                 jnb     short loc_7F46
.text:0000000000007F10
.text:0000000000007F10 loc_7F10:                               ; CODE XREF: hash_table_ok+44↓j
.text:0000000000007F10                 cmp     qword ptr [rcx], 0
.text:0000000000007F14                 jz      short loc_7F3D
.text:0000000000007F16                 mov     rax, [rcx+8]
.text:0000000000007F1A                 add     rsi, 1
.text:0000000000007F1E                 add     rdx, 1
.text:0000000000007F22                 test    rax, rax
.text:0000000000007F25                 jz      short loc_7F3D
.text:0000000000007F27                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007F30
.text:0000000000007F30 loc_7F30:                               ; CODE XREF: hash_table_ok+3B↓j
.text:0000000000007F30                 mov     rax, [rax+8]
.text:0000000000007F34                 add     rdx, 1
.text:0000000000007F38                 test    rax, rax
.text:0000000000007F3B                 jnz     short loc_7F30
.text:0000000000007F3D
.text:0000000000007F3D loc_7F3D:                               ; CODE XREF: hash_table_ok+14↑j
.text:0000000000007F3D                                         ; hash_table_ok+25↑j
.text:0000000000007F3D                 add     rcx, 10h
.text:0000000000007F41                 cmp     rcx, r8
.text:0000000000007F44                 jb      short loc_7F10
.text:0000000000007F46
.text:0000000000007F46 loc_7F46:                               ; CODE XREF: hash_table_ok+E↑j
.text:0000000000007F46                 xor     eax, eax
.text:0000000000007F48                 cmp     [rdi+18h], rsi
.text:0000000000007F4C                 jz      short loc_7F50
.text:0000000000007F4E                 rep retn
.text:0000000000007F50 ; ---------------------------------------------------------------------------
.text:0000000000007F50
.text:0000000000007F50 loc_7F50:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000007F50                 cmp     [rdi+20h], rdx
.text:0000000000007F54                 setz    al
.text:0000000000007F57                 retn
.text:0000000000007F57 ; } // starts at 7F00
.text:0000000000007F57 hash_table_ok   endp
.text:0000000000007F57
.text:0000000000007F57 ; ---------------------------------------------------------------------------
.text:0000000000007F58                 align 20h
.text:0000000000007F60
.text:0000000000007F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F60
.text:0000000000007F60 ; Attributes: info_from_lumina
.text:0000000000007F60
.text:0000000000007F60 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:0000000000007F60                 public hash_print_statistics
.text:0000000000007F60 hash_print_statistics proc near
.text:0000000000007F60 ; __unwind {
.text:0000000000007F60                 push    r13
.text:0000000000007F62                 push    r12
.text:0000000000007F64                 mov     r12, rsi
.text:0000000000007F67                 push    rbp
.text:0000000000007F68                 push    rbx
.text:0000000000007F69                 xor     ebx, ebx
.text:0000000000007F6B                 sub     rsp, 8
.text:0000000000007F6F                 mov     rsi, [rdi]
.text:0000000000007F72                 mov     rcx, [rdi+20h]
.text:0000000000007F76                 mov     rbp, [rdi+10h]
.text:0000000000007F7A                 mov     r13, [rdi+18h]
.text:0000000000007F7E                 mov     rdi, [rdi+8]
.text:0000000000007F82                 cmp     rsi, rdi
.text:0000000000007F85                 jnb     short loc_7FC5
.text:0000000000007F87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007F90
.text:0000000000007F90 loc_7F90:                               ; CODE XREF: hash_print_statistics+63↓j
.text:0000000000007F90                 cmp     qword ptr [rsi], 0
.text:0000000000007F94                 jz      short loc_7FBC
.text:0000000000007F96                 mov     rax, [rsi+8]
.text:0000000000007F9A                 mov     edx, 1
.text:0000000000007F9F                 test    rax, rax
.text:0000000000007FA2                 jz      short loc_7FB5
.text:0000000000007FA4                 nop     dword ptr [rax+00h]
.text:0000000000007FA8
.text:0000000000007FA8 loc_7FA8:                               ; CODE XREF: hash_print_statistics+53↓j
.text:0000000000007FA8                 mov     rax, [rax+8]
.text:0000000000007FAC                 add     rdx, 1
.text:0000000000007FB0                 test    rax, rax
.text:0000000000007FB3                 jnz     short loc_7FA8
.text:0000000000007FB5
.text:0000000000007FB5 loc_7FB5:                               ; CODE XREF: hash_print_statistics+42↑j
.text:0000000000007FB5                 cmp     rbx, rdx
.text:0000000000007FB8                 cmovb   rbx, rdx
.text:0000000000007FBC
.text:0000000000007FBC loc_7FBC:                               ; CODE XREF: hash_print_statistics+34↑j
.text:0000000000007FBC                 add     rsi, 10h
.text:0000000000007FC0                 cmp     rsi, rdi
.text:0000000000007FC3                 jb      short loc_7F90
.text:0000000000007FC5
.text:0000000000007FC5 loc_7FC5:                               ; CODE XREF: hash_print_statistics+25↑j
.text:0000000000007FC5                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:0000000000007FCC                 mov     esi, 1
.text:0000000000007FD1                 mov     rdi, r12
.text:0000000000007FD4                 xor     eax, eax
.text:0000000000007FD6                 call    ___fprintf_chk
.text:0000000000007FDB                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:0000000000007FE2                 xor     eax, eax
.text:0000000000007FE4                 mov     rcx, rbp
.text:0000000000007FE7                 mov     esi, 1
.text:0000000000007FEC                 mov     rdi, r12
.text:0000000000007FEF                 call    ___fprintf_chk
.text:0000000000007FF4                 test    r13, r13
.text:0000000000007FF7                 js      short loc_8060
.text:0000000000007FF9                 pxor    xmm0, xmm0
.text:0000000000007FFD                 test    rbp, rbp
.text:0000000000008000                 cvtsi2sd xmm0, r13
.text:0000000000008005                 mulsd   xmm0, cs:qword_A2E8
.text:000000000000800D                 js      short loc_8089
.text:000000000000800F
.text:000000000000800F loc_800F:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000800F                 pxor    xmm1, xmm1
.text:0000000000008013                 cvtsi2sd xmm1, rbp
.text:0000000000008018
.text:0000000000008018 loc_8018:                               ; CODE XREF: hash_print_statistics+142↓j
.text:0000000000008018                 divsd   xmm0, xmm1
.text:000000000000801C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0000000000008023                 mov     rcx, r13
.text:0000000000008026                 mov     rdi, r12
.text:0000000000008029                 mov     esi, 1
.text:000000000000802E                 mov     eax, 1
.text:0000000000008033                 call    ___fprintf_chk
.text:0000000000008038                 add     rsp, 8
.text:000000000000803C                 mov     rcx, rbx
.text:000000000000803F                 mov     rdi, r12
.text:0000000000008042                 pop     rbx
.text:0000000000008043                 pop     rbp
.text:0000000000008044                 pop     r12
.text:0000000000008046                 pop     r13
.text:0000000000008048                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000804F                 mov     esi, 1
.text:0000000000008054                 xor     eax, eax
.text:0000000000008056                 jmp     ___fprintf_chk
.text:0000000000008056 ; ---------------------------------------------------------------------------
.text:000000000000805B                 align 20h
.text:0000000000008060
.text:0000000000008060 loc_8060:                               ; CODE XREF: hash_print_statistics+97↑j
.text:0000000000008060                 mov     rax, r13
.text:0000000000008063                 mov     rdx, r13
.text:0000000000008066                 pxor    xmm0, xmm0
.text:000000000000806A                 shr     rax, 1
.text:000000000000806D                 and     edx, 1
.text:0000000000008070                 or      rax, rdx
.text:0000000000008073                 test    rbp, rbp
.text:0000000000008076                 cvtsi2sd xmm0, rax
.text:000000000000807B                 addsd   xmm0, xmm0
.text:000000000000807F                 mulsd   xmm0, cs:qword_A2E8
.text:0000000000008087                 jns     short loc_800F
.text:0000000000008089
.text:0000000000008089 loc_8089:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:0000000000008089                 mov     rax, rbp
.text:000000000000808C                 pxor    xmm1, xmm1
.text:0000000000008090                 shr     rax, 1
.text:0000000000008093                 and     ebp, 1
.text:0000000000008096                 or      rax, rbp
.text:0000000000008099                 cvtsi2sd xmm1, rax
.text:000000000000809E                 addsd   xmm1, xmm1
.text:00000000000080A2                 jmp     loc_8018
.text:00000000000080A2 ; } // starts at 7F60
.text:00000000000080A2 hash_print_statistics endp
.text:00000000000080A2
.text:00000000000080A2 ; ---------------------------------------------------------------------------
.text:00000000000080A7                 align 10h
.text:00000000000080B0
.text:00000000000080B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080B0
.text:00000000000080B0 ; Attributes: info_from_lumina
.text:00000000000080B0
.text:00000000000080B0 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:00000000000080B0                 public hash_lookup
.text:00000000000080B0 hash_lookup     proc near
.text:00000000000080B0 ; __unwind {
.text:00000000000080B0                 push    r12
.text:00000000000080B2                 push    rbp
.text:00000000000080B3                 mov     r12, rdi
.text:00000000000080B6                 push    rbx
.text:00000000000080B7                 mov     rbp, rsi
.text:00000000000080BA                 call    safe_hasher
.text:00000000000080BF                 mov     rsi, [rax]
.text:00000000000080C2                 test    rsi, rsi
.text:00000000000080C5                 jz      short loc_80ED
.text:00000000000080C7                 mov     rbx, rax
.text:00000000000080CA                 jmp     short loc_80D3
.text:00000000000080CA ; ---------------------------------------------------------------------------
.text:00000000000080CC                 align 10h
.text:00000000000080D0
.text:00000000000080D0 loc_80D0:                               ; CODE XREF: hash_lookup+3B↓j
.text:00000000000080D0                 mov     rsi, [rbx]
.text:00000000000080D3
.text:00000000000080D3 loc_80D3:                               ; CODE XREF: hash_lookup+1A↑j
.text:00000000000080D3                 cmp     rsi, rbp
.text:00000000000080D6                 jz      short loc_80EF
.text:00000000000080D8                 mov     rdi, rbp
.text:00000000000080DB                 call    qword ptr [r12+38h]
.text:00000000000080E0                 test    al, al
.text:00000000000080E2                 jnz     short loc_8100
.text:00000000000080E4                 mov     rbx, [rbx+8]
.text:00000000000080E8                 test    rbx, rbx
.text:00000000000080EB                 jnz     short loc_80D0
.text:00000000000080ED
.text:00000000000080ED loc_80ED:                               ; CODE XREF: hash_lookup+15↑j
.text:00000000000080ED                 xor     esi, esi
.text:00000000000080EF
.text:00000000000080EF loc_80EF:                               ; CODE XREF: hash_lookup+26↑j
.text:00000000000080EF                 pop     rbx
.text:00000000000080F0                 mov     rax, rsi
.text:00000000000080F3                 pop     rbp
.text:00000000000080F4                 pop     r12
.text:00000000000080F6                 retn
.text:00000000000080F6 ; ---------------------------------------------------------------------------
.text:00000000000080F7                 align 20h
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: hash_lookup+32↑j
.text:0000000000008100                 mov     rsi, [rbx]
.text:0000000000008103                 pop     rbx
.text:0000000000008104                 pop     rbp
.text:0000000000008105                 mov     rax, rsi
.text:0000000000008108                 pop     r12
.text:000000000000810A                 retn
.text:000000000000810A ; } // starts at 80B0
.text:000000000000810A hash_lookup     endp
.text:000000000000810A
.text:000000000000810A ; ---------------------------------------------------------------------------
.text:000000000000810B                 align 10h
.text:0000000000008110
.text:0000000000008110 ; =============== S U B R O U T I N E =======================================
.text:0000000000008110
.text:0000000000008110 ; Attributes: info_from_lumina
.text:0000000000008110
.text:0000000000008110 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:0000000000008110                 public hash_get_first
.text:0000000000008110 hash_get_first  proc near
.text:0000000000008110 ; __unwind {
.text:0000000000008110                 cmp     qword ptr [rdi+20h], 0
.text:0000000000008115                 jz      short loc_8143
.text:0000000000008117                 mov     rdx, [rdi]
.text:000000000000811A                 mov     rcx, [rdi+8]
.text:000000000000811E                 cmp     rdx, rcx
.text:0000000000008121                 jnb     short loc_8148
.text:0000000000008123                 mov     rax, [rdx]
.text:0000000000008126                 test    rax, rax
.text:0000000000008129                 jnz     short locret_8146
.text:000000000000812B                 nop     dword ptr [rax+rax+00h]
.text:0000000000008130
.text:0000000000008130 loc_8130:                               ; CODE XREF: hash_get_first+2F↓j
.text:0000000000008130                 add     rdx, 10h
.text:0000000000008134                 cmp     rdx, rcx
.text:0000000000008137                 jnb     short loc_8148
.text:0000000000008139                 mov     rax, [rdx]
.text:000000000000813C                 test    rax, rax
.text:000000000000813F                 jz      short loc_8130
.text:0000000000008141                 rep retn
.text:0000000000008143 ; ---------------------------------------------------------------------------
.text:0000000000008143
.text:0000000000008143 loc_8143:                               ; CODE XREF: hash_get_first+5↑j
.text:0000000000008143                 xor     eax, eax
.text:0000000000008145                 retn
.text:0000000000008146 ; ---------------------------------------------------------------------------
.text:0000000000008146
.text:0000000000008146 locret_8146:                            ; CODE XREF: hash_get_first+19↑j
.text:0000000000008146                 rep retn
.text:0000000000008148 ; ---------------------------------------------------------------------------
.text:0000000000008148
.text:0000000000008148 loc_8148:                               ; CODE XREF: hash_get_first+11↑j
.text:0000000000008148                                         ; hash_get_first+27↑j
.text:0000000000008148                 sub     rsp, 8
.text:000000000000814C                 call    _abort
.text:000000000000814C ; } // starts at 8110
.text:000000000000814C hash_get_first  endp
.text:000000000000814C
.text:000000000000814C ; ---------------------------------------------------------------------------
.text:0000000000008151                 align 20h
.text:0000000000008160
.text:0000000000008160 ; =============== S U B R O U T I N E =======================================
.text:0000000000008160
.text:0000000000008160 ; Attributes: info_from_lumina
.text:0000000000008160
.text:0000000000008160 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:0000000000008160                 public hash_get_next
.text:0000000000008160 hash_get_next   proc near
.text:0000000000008160 ; __unwind {
.text:0000000000008160                 push    rbp
.text:0000000000008161                 push    rbx
.text:0000000000008162                 mov     rbp, rdi
.text:0000000000008165                 mov     rbx, rsi
.text:0000000000008168                 sub     rsp, 8
.text:000000000000816C                 call    safe_hasher
.text:0000000000008171                 mov     rdx, rax
.text:0000000000008174                 mov     rcx, rax
.text:0000000000008177                 mov     rax, [rdx]
.text:000000000000817A                 mov     rdx, [rdx+8]
.text:000000000000817E                 cmp     rax, rbx
.text:0000000000008181                 jz      short loc_8199
.text:0000000000008183                 nop     dword ptr [rax+rax+00h]
.text:0000000000008188
.text:0000000000008188 loc_8188:                               ; CODE XREF: hash_get_next+37↓j
.text:0000000000008188                 test    rdx, rdx
.text:000000000000818B                 jz      short loc_819E
.text:000000000000818D                 mov     rax, [rdx]
.text:0000000000008190                 mov     rdx, [rdx+8]
.text:0000000000008194                 cmp     rax, rbx
.text:0000000000008197                 jnz     short loc_8188
.text:0000000000008199
.text:0000000000008199 loc_8199:                               ; CODE XREF: hash_get_next+21↑j
.text:0000000000008199                 test    rdx, rdx
.text:000000000000819C                 jnz     short loc_81C8
.text:000000000000819E
.text:000000000000819E loc_819E:                               ; CODE XREF: hash_get_next+2B↑j
.text:000000000000819E                 mov     rdx, [rbp+8]
.text:00000000000081A2                 jmp     short loc_81B0
.text:00000000000081A2 ; ---------------------------------------------------------------------------
.text:00000000000081A4                 align 8
.text:00000000000081A8
.text:00000000000081A8 loc_81A8:                               ; CODE XREF: hash_get_next+57↓j
.text:00000000000081A8                 mov     rax, [rcx]
.text:00000000000081AB                 test    rax, rax
.text:00000000000081AE                 jnz     short loc_81BB
.text:00000000000081B0
.text:00000000000081B0 loc_81B0:                               ; CODE XREF: hash_get_next+42↑j
.text:00000000000081B0                 add     rcx, 10h
.text:00000000000081B4                 cmp     rdx, rcx
.text:00000000000081B7                 ja      short loc_81A8
.text:00000000000081B9                 xor     eax, eax
.text:00000000000081BB
.text:00000000000081BB loc_81BB:                               ; CODE XREF: hash_get_next+4E↑j
.text:00000000000081BB                 add     rsp, 8
.text:00000000000081BF                 pop     rbx
.text:00000000000081C0                 pop     rbp
.text:00000000000081C1                 retn
.text:00000000000081C1 ; ---------------------------------------------------------------------------
.text:00000000000081C2                 align 8
.text:00000000000081C8
.text:00000000000081C8 loc_81C8:                               ; CODE XREF: hash_get_next+3C↑j
.text:00000000000081C8                 mov     rax, [rdx]
.text:00000000000081CB                 add     rsp, 8
.text:00000000000081CF                 pop     rbx
.text:00000000000081D0                 pop     rbp
.text:00000000000081D1                 retn
.text:00000000000081D1 ; } // starts at 8160
.text:00000000000081D1 hash_get_next   endp
.text:00000000000081D1
.text:00000000000081D1 ; ---------------------------------------------------------------------------
.text:00000000000081D2                 align 20h
.text:00000000000081E0
.text:00000000000081E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081E0
.text:00000000000081E0 ; Attributes: info_from_lumina
.text:00000000000081E0
.text:00000000000081E0 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:00000000000081E0                 public hash_get_entries
.text:00000000000081E0 hash_get_entries proc near
.text:00000000000081E0 ; __unwind {
.text:00000000000081E0                 mov     r9, [rdi]
.text:00000000000081E3                 cmp     [rdi+8], r9
.text:00000000000081E7                 jbe     short loc_8242
.text:00000000000081E9                 xor     r8d, r8d
.text:00000000000081EC
.text:00000000000081EC loc_81EC:                               ; CODE XREF: hash_get_entries+55↓j
.text:00000000000081EC                 mov     rcx, [r9]
.text:00000000000081EF                 test    rcx, rcx
.text:00000000000081F2                 jz      short loc_822D
.text:00000000000081F4                 cmp     rdx, r8
.text:00000000000081F7                 jbe     short loc_8237
.text:00000000000081F9                 mov     [rsi+r8*8], rcx
.text:00000000000081FD                 mov     rcx, [r9+8]
.text:0000000000008201                 lea     rax, [r8+1]
.text:0000000000008205                 test    rcx, rcx
.text:0000000000008208                 jz      short loc_822A
.text:000000000000820A                 nop     word ptr [rax+rax+00h]
.text:0000000000008210
.text:0000000000008210 loc_8210:                               ; CODE XREF: hash_get_entries+48↓j
.text:0000000000008210                 cmp     rdx, rax
.text:0000000000008213                 jz      short locret_8240
.text:0000000000008215                 mov     r8, [rcx]
.text:0000000000008218                 add     rax, 1
.text:000000000000821C                 mov     [rsi+rax*8-8], r8
.text:0000000000008221                 mov     rcx, [rcx+8]
.text:0000000000008225                 test    rcx, rcx
.text:0000000000008228                 jnz     short loc_8210
.text:000000000000822A
.text:000000000000822A loc_822A:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000822A                 mov     r8, rax
.text:000000000000822D
.text:000000000000822D loc_822D:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000822D                 add     r9, 10h
.text:0000000000008231                 cmp     [rdi+8], r9
.text:0000000000008235                 ja      short loc_81EC
.text:0000000000008237
.text:0000000000008237 loc_8237:                               ; CODE XREF: hash_get_entries+17↑j
.text:0000000000008237                 mov     rax, r8
.text:000000000000823A                 retn
.text:000000000000823A ; ---------------------------------------------------------------------------
.text:000000000000823B                 align 20h
.text:0000000000008240
.text:0000000000008240 locret_8240:                            ; CODE XREF: hash_get_entries+33↑j
.text:0000000000008240                 rep retn
.text:0000000000008242 ; ---------------------------------------------------------------------------
.text:0000000000008242
.text:0000000000008242 loc_8242:                               ; CODE XREF: hash_get_entries+7↑j
.text:0000000000008242                 xor     eax, eax
.text:0000000000008244                 retn
.text:0000000000008244 ; } // starts at 81E0
.text:0000000000008244 hash_get_entries endp
.text:0000000000008244
.text:0000000000008244 ; ---------------------------------------------------------------------------
.text:0000000000008245                 align 10h
.text:0000000000008250
.text:0000000000008250 ; =============== S U B R O U T I N E =======================================
.text:0000000000008250
.text:0000000000008250 ; Attributes: info_from_lumina
.text:0000000000008250
.text:0000000000008250 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000008250                 public hash_do_for_each
.text:0000000000008250 hash_do_for_each proc near
.text:0000000000008250 ; __unwind {
.text:0000000000008250                 push    r15
.text:0000000000008252                 push    r14
.text:0000000000008254                 push    r13
.text:0000000000008256                 push    r12
.text:0000000000008258                 push    rbp
.text:0000000000008259                 push    rbx
.text:000000000000825A                 sub     rsp, 8
.text:000000000000825E                 mov     r14, [rdi]
.text:0000000000008261                 cmp     [rdi+8], r14
.text:0000000000008265                 jbe     short loc_82B6
.text:0000000000008267                 mov     r13, rdx
.text:000000000000826A                 mov     r12, rsi
.text:000000000000826D                 mov     r15, rdi
.text:0000000000008270                 xor     ebp, ebp
.text:0000000000008272
.text:0000000000008272 loc_8272:                               ; CODE XREF: hash_do_for_each+52↓j
.text:0000000000008272                 mov     rdi, [r14]
.text:0000000000008275                 test    rdi, rdi
.text:0000000000008278                 jz      short loc_829A
.text:000000000000827A                 mov     rbx, r14
.text:000000000000827D                 jmp     short loc_8283
.text:000000000000827D ; ---------------------------------------------------------------------------
.text:000000000000827F                 align 20h
.text:0000000000008280
.text:0000000000008280 loc_8280:                               ; CODE XREF: hash_do_for_each+48↓j
.text:0000000000008280                 mov     rdi, [rbx]
.text:0000000000008283
.text:0000000000008283 loc_8283:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:0000000000008283                 mov     rsi, r13
.text:0000000000008286                 call    r12
.text:0000000000008289                 test    al, al
.text:000000000000828B                 jz      short loc_82A4
.text:000000000000828D                 mov     rbx, [rbx+8]
.text:0000000000008291                 add     rbp, 1
.text:0000000000008295                 test    rbx, rbx
.text:0000000000008298                 jnz     short loc_8280
.text:000000000000829A
.text:000000000000829A loc_829A:                               ; CODE XREF: hash_do_for_each+28↑j
.text:000000000000829A                 add     r14, 10h
.text:000000000000829E                 cmp     [r15+8], r14
.text:00000000000082A2                 ja      short loc_8272
.text:00000000000082A4
.text:00000000000082A4 loc_82A4:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:00000000000082A4                                         ; hash_do_for_each+68↓j
.text:00000000000082A4                 add     rsp, 8
.text:00000000000082A8                 mov     rax, rbp
.text:00000000000082AB                 pop     rbx
.text:00000000000082AC                 pop     rbp
.text:00000000000082AD                 pop     r12
.text:00000000000082AF                 pop     r13
.text:00000000000082B1                 pop     r14
.text:00000000000082B3                 pop     r15
.text:00000000000082B5                 retn
.text:00000000000082B6 ; ---------------------------------------------------------------------------
.text:00000000000082B6
.text:00000000000082B6 loc_82B6:                               ; CODE XREF: hash_do_for_each+15↑j
.text:00000000000082B6                 xor     ebp, ebp
.text:00000000000082B8                 jmp     short loc_82A4
.text:00000000000082B8 ; } // starts at 8250
.text:00000000000082B8 hash_do_for_each endp
.text:00000000000082B8
.text:00000000000082B8 ; ---------------------------------------------------------------------------
.text:00000000000082BA                 align 20h
.text:00000000000082C0
.text:00000000000082C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082C0
.text:00000000000082C0 ; Attributes: info_from_lumina
.text:00000000000082C0
.text:00000000000082C0 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:00000000000082C0                 public hash_string
.text:00000000000082C0 hash_string     proc near
.text:00000000000082C0 ; __unwind {
.text:00000000000082C0                 movzx   ecx, byte ptr [rdi]
.text:00000000000082C3                 xor     edx, edx
.text:00000000000082C5                 test    cl, cl
.text:00000000000082C7                 jz      short loc_82ED
.text:00000000000082C9                 nop     dword ptr [rax+00000000h]
.text:00000000000082D0
.text:00000000000082D0 loc_82D0:                               ; CODE XREF: hash_string+2B↓j
.text:00000000000082D0                 mov     rax, rdx
.text:00000000000082D3                 add     rdi, 1
.text:00000000000082D7                 shl     rax, 5
.text:00000000000082DB                 sub     rax, rdx
.text:00000000000082DE                 xor     edx, edx
.text:00000000000082E0                 add     rax, rcx
.text:00000000000082E3                 movzx   ecx, byte ptr [rdi]
.text:00000000000082E6                 div     rsi
.text:00000000000082E9                 test    cl, cl
.text:00000000000082EB                 jnz     short loc_82D0
.text:00000000000082ED
.text:00000000000082ED loc_82ED:                               ; CODE XREF: hash_string+7↑j
.text:00000000000082ED                 mov     rax, rdx
.text:00000000000082F0                 retn
.text:00000000000082F0 ; } // starts at 82C0
.text:00000000000082F0 hash_string     endp
.text:00000000000082F0
.text:00000000000082F0 ; ---------------------------------------------------------------------------
.text:00000000000082F1                 align 20h
.text:0000000000008300
.text:0000000000008300 ; =============== S U B R O U T I N E =======================================
.text:0000000000008300
.text:0000000000008300 ; Attributes: info_from_lumina
.text:0000000000008300
.text:0000000000008300 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:0000000000008300                 public hash_reset_tuning
.text:0000000000008300 hash_reset_tuning proc near
.text:0000000000008300 ; __unwind {
.text:0000000000008300                 mov     rax, 3F80000000000000h
.text:000000000000830A                 mov     byte ptr [rdi+10h], 0
.text:000000000000830E                 mov     [rdi], rax
.text:0000000000008311                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000831B                 mov     [rdi+8], rax
.text:000000000000831F                 retn
.text:000000000000831F ; } // starts at 8300
.text:000000000000831F hash_reset_tuning endp
.text:000000000000831F
.text:0000000000008320
.text:0000000000008320 ; =============== S U B R O U T I N E =======================================
.text:0000000000008320
.text:0000000000008320 ; Attributes: info_from_lumina
.text:0000000000008320
.text:0000000000008320 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:0000000000008320                 public hash_initialize
.text:0000000000008320 hash_initialize proc near               ; CODE XREF: randperm_new+B2↑p
.text:0000000000008320 ; __unwind {
.text:0000000000008320                 push    r15
.text:0000000000008322                 push    r14
.text:0000000000008324                 lea     rax, raw_hasher
.text:000000000000832B                 push    r13
.text:000000000000832D                 push    r12
.text:000000000000832F                 mov     r12, rdx
.text:0000000000008332                 push    rbp
.text:0000000000008333                 push    rbx
.text:0000000000008334                 mov     r13, rcx
.text:0000000000008337                 mov     rbp, rdi
.text:000000000000833A                 mov     edi, 50h ; 'P'  ; size
.text:000000000000833F                 mov     r15, rsi
.text:0000000000008342                 sub     rsp, 8
.text:0000000000008346                 test    rdx, rdx
.text:0000000000008349                 mov     r14, r8
.text:000000000000834C                 cmovz   r12, rax
.text:0000000000008350                 lea     rax, raw_comparator
.text:0000000000008357                 test    rcx, rcx
.text:000000000000835A                 cmovz   r13, rax
.text:000000000000835E                 call    _malloc
.text:0000000000008363                 test    rax, rax
.text:0000000000008366                 mov     rbx, rax
.text:0000000000008369                 jz      loc_841A
.text:000000000000836F                 test    r15, r15
.text:0000000000008372                 lea     rdi, [rax+28h]
.text:0000000000008376                 jz      loc_8430
.text:000000000000837C                 mov     [rax+28h], r15
.text:0000000000008380                 call    check_tuning
.text:0000000000008385                 test    al, al
.text:0000000000008387                 jz      loc_8410
.text:000000000000838D                 cmp     byte ptr [r15+10h], 0
.text:0000000000008392                 jz      loc_8490
.text:0000000000008398
.text:0000000000008398 loc_8398:                               ; CODE XREF: hash_initialize+16A↓j
.text:0000000000008398                                         ; hash_initialize+1A5↓j
.text:0000000000008398                 mov     rdi, rbp
.text:000000000000839B                 call    next_prime
.text:00000000000083A0                 mov     edx, 8
.text:00000000000083A5                 mov     rbp, rax
.text:00000000000083A8                 xor     ecx, ecx
.text:00000000000083AA                 mov     rax, rdx
.text:00000000000083AD                 mul     rbp
.text:00000000000083B0                 jo      loc_84CA
.text:00000000000083B6
.text:00000000000083B6 loc_83B6:                               ; CODE XREF: hash_initialize+1AF↓j
.text:00000000000083B6                 test    rax, rax
.text:00000000000083B9                 js      short loc_8410
.text:00000000000083BB                 test    rcx, rcx
.text:00000000000083BE                 jnz     short loc_8410
.text:00000000000083C0                 test    rbp, rbp
.text:00000000000083C3                 mov     [rbx+10h], rbp
.text:00000000000083C7                 jz      short loc_8410
.text:00000000000083C9                 mov     esi, 10h        ; size
.text:00000000000083CE                 mov     rdi, rbp        ; nmemb
.text:00000000000083D1                 call    _calloc
.text:00000000000083D6                 test    rax, rax
.text:00000000000083D9                 mov     [rbx], rax
.text:00000000000083DC                 jz      short loc_8410
.text:00000000000083DE                 shl     rbp, 4
.text:00000000000083E2                 mov     qword ptr [rbx+18h], 0
.text:00000000000083EA                 mov     qword ptr [rbx+20h], 0
.text:00000000000083F2                 add     rbp, rax
.text:00000000000083F5                 mov     [rbx+30h], r12
.text:00000000000083F9                 mov     [rbx+38h], r13
.text:00000000000083FD                 mov     [rbx+8], rbp
.text:0000000000008401                 mov     [rbx+40h], r14
.text:0000000000008405                 mov     qword ptr [rbx+48h], 0
.text:000000000000840D                 jmp     short loc_841A
.text:000000000000840D ; ---------------------------------------------------------------------------
.text:000000000000840F                 align 10h
.text:0000000000008410
.text:0000000000008410 loc_8410:                               ; CODE XREF: hash_initialize+67↑j
.text:0000000000008410                                         ; hash_initialize+99↑j ...
.text:0000000000008410                 mov     rdi, rbx        ; ptr
.text:0000000000008413                 xor     ebx, ebx
.text:0000000000008415                 call    free
.text:000000000000841A
.text:000000000000841A loc_841A:                               ; CODE XREF: hash_initialize+49↑j
.text:000000000000841A                                         ; hash_initialize+ED↑j
.text:000000000000841A                 add     rsp, 8
.text:000000000000841E                 mov     rax, rbx
.text:0000000000008421                 pop     rbx
.text:0000000000008422                 pop     rbp
.text:0000000000008423                 pop     r12
.text:0000000000008425                 pop     r13
.text:0000000000008427                 pop     r14
.text:0000000000008429                 pop     r15
.text:000000000000842B                 retn
.text:000000000000842B ; ---------------------------------------------------------------------------
.text:000000000000842C                 align 10h
.text:0000000000008430
.text:0000000000008430 loc_8430:                               ; CODE XREF: hash_initialize+56↑j
.text:0000000000008430                 lea     rax, default_tuning
.text:0000000000008437                 mov     [rbx+28h], rax
.text:000000000000843B                 call    check_tuning
.text:0000000000008440                 test    al, al
.text:0000000000008442                 movss   xmm1, cs:dword_A2D8
.text:000000000000844A                 jz      short loc_8410
.text:000000000000844C                 test    rbp, rbp
.text:000000000000844F                 js      short loc_849B
.text:0000000000008451
.text:0000000000008451 loc_8451:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000008451                 pxor    xmm0, xmm0
.text:0000000000008455                 cvtsi2ss xmm0, rbp
.text:000000000000845A
.text:000000000000845A loc_845A:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000845A                 divss   xmm0, xmm1
.text:000000000000845E                 ucomiss xmm0, cs:dword_A2DC
.text:0000000000008465                 jnb     short loc_8410
.text:0000000000008467                 ucomiss xmm0, cs:dword_A2E0
.text:000000000000846E                 jb      short loc_84C0
.text:0000000000008470                 subss   xmm0, cs:dword_A2E0
.text:0000000000008478                 mov     rax, 8000000000000000h
.text:0000000000008482                 cvttss2si rbp, xmm0
.text:0000000000008487                 xor     rbp, rax
.text:000000000000848A                 jmp     loc_8398
.text:000000000000848A ; ---------------------------------------------------------------------------
.text:000000000000848F                 align 10h
.text:0000000000008490
.text:0000000000008490 loc_8490:                               ; CODE XREF: hash_initialize+72↑j
.text:0000000000008490                 test    rbp, rbp
.text:0000000000008493                 movss   xmm1, dword ptr [r15+8]
.text:0000000000008499                 jns     short loc_8451
.text:000000000000849B
.text:000000000000849B loc_849B:                               ; CODE XREF: hash_initialize+12F↑j
.text:000000000000849B                 mov     rax, rbp
.text:000000000000849E                 pxor    xmm0, xmm0
.text:00000000000084A2                 shr     rax, 1
.text:00000000000084A5                 and     ebp, 1
.text:00000000000084A8                 or      rax, rbp
.text:00000000000084AB                 cvtsi2ss xmm0, rax
.text:00000000000084B0                 addss   xmm0, xmm0
.text:00000000000084B4                 jmp     short loc_845A
.text:00000000000084B4 ; ---------------------------------------------------------------------------
.text:00000000000084B6                 align 20h
.text:00000000000084C0
.text:00000000000084C0 loc_84C0:                               ; CODE XREF: hash_initialize+14E↑j
.text:00000000000084C0                 cvttss2si rbp, xmm0
.text:00000000000084C5                 jmp     loc_8398
.text:00000000000084CA ; ---------------------------------------------------------------------------
.text:00000000000084CA
.text:00000000000084CA loc_84CA:                               ; CODE XREF: hash_initialize+90↑j
.text:00000000000084CA                 mov     ecx, 1
.text:00000000000084CF                 jmp     loc_83B6
.text:00000000000084CF ; } // starts at 8320
.text:00000000000084CF hash_initialize endp
.text:00000000000084CF
.text:00000000000084CF ; ---------------------------------------------------------------------------
.text:00000000000084D4                 align 20h
.text:00000000000084E0
.text:00000000000084E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000084E0
.text:00000000000084E0 ; Attributes: info_from_lumina
.text:00000000000084E0
.text:00000000000084E0 ; void __fastcall hash_clear(Hash_table *table)
.text:00000000000084E0                 public hash_clear
.text:00000000000084E0 hash_clear      proc near
.text:00000000000084E0 ; __unwind {
.text:00000000000084E0                 push    r12
.text:00000000000084E2                 push    rbp
.text:00000000000084E3                 mov     rbp, rdi
.text:00000000000084E6                 push    rbx
.text:00000000000084E7                 mov     r12, [rdi]
.text:00000000000084EA                 cmp     r12, [rdi+8]
.text:00000000000084EE                 jnb     short loc_855B
.text:00000000000084F0
.text:00000000000084F0 loc_84F0:                               ; CODE XREF: hash_clear+79↓j
.text:00000000000084F0                 cmp     qword ptr [r12], 0
.text:00000000000084F5                 jz      short loc_8551
.text:00000000000084F7                 mov     rbx, [r12+8]
.text:00000000000084FC                 mov     rax, [rbp+40h]
.text:0000000000008500                 test    rbx, rbx
.text:0000000000008503                 jz      short loc_8535
.text:0000000000008505                 nop     dword ptr [rax]
.text:0000000000008508
.text:0000000000008508 loc_8508:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000008508                 test    rax, rax
.text:000000000000850B                 jz      short loc_8516
.text:000000000000850D                 mov     rdi, [rbx]
.text:0000000000008510                 call    rax
.text:0000000000008512                 mov     rax, [rbp+40h]
.text:0000000000008516
.text:0000000000008516 loc_8516:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000008516                 mov     rdx, [rbx+8]
.text:000000000000851A                 mov     rcx, [rbp+48h]
.text:000000000000851E                 mov     qword ptr [rbx], 0
.text:0000000000008525                 test    rdx, rdx
.text:0000000000008528                 mov     [rbx+8], rcx
.text:000000000000852C                 mov     [rbp+48h], rbx
.text:0000000000008530                 mov     rbx, rdx
.text:0000000000008533                 jnz     short loc_8508
.text:0000000000008535
.text:0000000000008535 loc_8535:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000008535                 test    rax, rax
.text:0000000000008538                 jz      short loc_8540
.text:000000000000853A                 mov     rdi, [r12]
.text:000000000000853E                 call    rax
.text:0000000000008540
.text:0000000000008540 loc_8540:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000008540                 mov     qword ptr [r12], 0
.text:0000000000008548                 mov     qword ptr [r12+8], 0
.text:0000000000008551
.text:0000000000008551 loc_8551:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000008551                 add     r12, 10h
.text:0000000000008555                 cmp     [rbp+8], r12
.text:0000000000008559                 ja      short loc_84F0
.text:000000000000855B
.text:000000000000855B loc_855B:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000855B                 mov     qword ptr [rbp+18h], 0
.text:0000000000008563                 mov     qword ptr [rbp+20h], 0
.text:000000000000856B                 pop     rbx
.text:000000000000856C                 pop     rbp
.text:000000000000856D                 pop     r12
.text:000000000000856F                 retn
.text:000000000000856F ; } // starts at 84E0
.text:000000000000856F hash_clear      endp
.text:000000000000856F
.text:0000000000008570
.text:0000000000008570 ; =============== S U B R O U T I N E =======================================
.text:0000000000008570
.text:0000000000008570 ; Attributes: info_from_lumina
.text:0000000000008570
.text:0000000000008570 ; void __fastcall hash_free(Hash_table *table)
.text:0000000000008570                 public hash_free
.text:0000000000008570 hash_free       proc near               ; CODE XREF: randperm_new+31D↑p
.text:0000000000008570 ; __unwind {
.text:0000000000008570                 push    r12
.text:0000000000008572                 push    rbp
.text:0000000000008573                 mov     r12, rdi
.text:0000000000008576                 push    rbx
.text:0000000000008577                 cmp     qword ptr [rdi+40h], 0
.text:000000000000857C                 mov     rbp, [rdi]
.text:000000000000857F                 mov     rax, [rdi+8]
.text:0000000000008583                 jz      short loc_85D3
.text:0000000000008585                 cmp     qword ptr [rdi+20h], 0
.text:000000000000858A                 jz      short loc_85D3
.text:000000000000858C                 cmp     rbp, rax
.text:000000000000858F                 jnb     short loc_860C
.text:0000000000008591                 nop     dword ptr [rax+00000000h]
.text:0000000000008598
.text:0000000000008598 loc_8598:                               ; CODE XREF: hash_free+5D↓j
.text:0000000000008598                 mov     rdi, [rbp+0]
.text:000000000000859C                 test    rdi, rdi
.text:000000000000859F                 jz      short loc_85C6
.text:00000000000085A1                 mov     rbx, rbp
.text:00000000000085A4                 jmp     short loc_85B3
.text:00000000000085A4 ; ---------------------------------------------------------------------------
.text:00000000000085A6                 align 10h
.text:00000000000085B0
.text:00000000000085B0 loc_85B0:                               ; CODE XREF: hash_free+4F↓j
.text:00000000000085B0                 mov     rdi, [rbx]
.text:00000000000085B3
.text:00000000000085B3 loc_85B3:                               ; CODE XREF: hash_free+34↑j
.text:00000000000085B3                 call    qword ptr [r12+40h]
.text:00000000000085B8                 mov     rbx, [rbx+8]
.text:00000000000085BC                 test    rbx, rbx
.text:00000000000085BF                 jnz     short loc_85B0
.text:00000000000085C1                 mov     rax, [r12+8]
.text:00000000000085C6
.text:00000000000085C6 loc_85C6:                               ; CODE XREF: hash_free+2F↑j
.text:00000000000085C6                 add     rbp, 10h
.text:00000000000085CA                 cmp     rax, rbp
.text:00000000000085CD                 ja      short loc_8598
.text:00000000000085CF                 mov     rbp, [r12]
.text:00000000000085D3
.text:00000000000085D3 loc_85D3:                               ; CODE XREF: hash_free+13↑j
.text:00000000000085D3                                         ; hash_free+1A↑j
.text:00000000000085D3                 cmp     rbp, rax
.text:00000000000085D6                 jnb     short loc_860C
.text:00000000000085D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000085E0
.text:00000000000085E0 loc_85E0:                               ; CODE XREF: hash_free+9A↓j
.text:00000000000085E0                 mov     rdi, [rbp+8]    ; ptr
.text:00000000000085E4                 test    rdi, rdi
.text:00000000000085E7                 jz      short loc_8601
.text:00000000000085E9                 nop     dword ptr [rax+00000000h]
.text:00000000000085F0
.text:00000000000085F0 loc_85F0:                               ; CODE XREF: hash_free+8F↓j
.text:00000000000085F0                 mov     rbx, [rdi+8]
.text:00000000000085F4                 call    free
.text:00000000000085F9                 test    rbx, rbx
.text:00000000000085FC                 mov     rdi, rbx
.text:00000000000085FF                 jnz     short loc_85F0
.text:0000000000008601
.text:0000000000008601 loc_8601:                               ; CODE XREF: hash_free+77↑j
.text:0000000000008601                 add     rbp, 10h
.text:0000000000008605                 cmp     [r12+8], rbp
.text:000000000000860A                 ja      short loc_85E0
.text:000000000000860C
.text:000000000000860C loc_860C:                               ; CODE XREF: hash_free+1F↑j
.text:000000000000860C                                         ; hash_free+66↑j
.text:000000000000860C                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000008611                 test    rdi, rdi
.text:0000000000008614                 jz      short loc_8631
.text:0000000000008616                 db      2Eh
.text:0000000000008616                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008620
.text:0000000000008620 loc_8620:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000008620                 mov     rbx, [rdi+8]
.text:0000000000008624                 call    free
.text:0000000000008629                 test    rbx, rbx
.text:000000000000862C                 mov     rdi, rbx
.text:000000000000862F                 jnz     short loc_8620
.text:0000000000008631
.text:0000000000008631 loc_8631:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000008631                 mov     rdi, [r12]      ; ptr
.text:0000000000008635                 call    free
.text:000000000000863A                 pop     rbx
.text:000000000000863B                 mov     rdi, r12        ; ptr
.text:000000000000863E                 pop     rbp
.text:000000000000863F                 pop     r12
.text:0000000000008641                 jmp     free
.text:0000000000008641 ; } // starts at 8570
.text:0000000000008641 hash_free       endp
.text:0000000000008641
.text:0000000000008641 ; ---------------------------------------------------------------------------
.text:0000000000008646                 align 10h
.text:0000000000008650
.text:0000000000008650 ; =============== S U B R O U T I N E =======================================
.text:0000000000008650
.text:0000000000008650 ; Attributes: info_from_lumina
.text:0000000000008650
.text:0000000000008650 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000008650                 public hash_rehash
.text:0000000000008650 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000008650                                         ; hash_delete+10F↓p
.text:0000000000008650
.text:0000000000008650 ptr             = qword ptr -78h
.text:0000000000008650 var_70          = qword ptr -70h
.text:0000000000008650 var_68          = qword ptr -68h
.text:0000000000008650 var_60          = qword ptr -60h
.text:0000000000008650 var_58          = qword ptr -58h
.text:0000000000008650 var_50          = qword ptr -50h
.text:0000000000008650 var_48          = qword ptr -48h
.text:0000000000008650 var_40          = qword ptr -40h
.text:0000000000008650 var_38          = qword ptr -38h
.text:0000000000008650 var_30          = qword ptr -30h
.text:0000000000008650 var_20          = qword ptr -20h
.text:0000000000008650
.text:0000000000008650 ; __unwind {
.text:0000000000008650                 push    r12
.text:0000000000008652                 push    rbp
.text:0000000000008653                 mov     rbp, rdi
.text:0000000000008656                 push    rbx
.text:0000000000008657                 sub     rsp, 60h
.text:000000000000865B                 mov     r12, [rdi+28h]
.text:000000000000865F                 mov     rax, fs:28h
.text:0000000000008668                 mov     [rsp+78h+var_20], rax
.text:000000000000866D                 xor     eax, eax
.text:000000000000866F                 cmp     byte ptr [r12+10h], 0
.text:0000000000008675                 jnz     short loc_86C8
.text:0000000000008677                 test    rsi, rsi
.text:000000000000867A                 js      loc_87F8
.text:0000000000008680                 pxor    xmm0, xmm0
.text:0000000000008684                 cvtsi2ss xmm0, rsi
.text:0000000000008689
.text:0000000000008689 loc_8689:                               ; CODE XREF: hash_rehash+1C1↓j
.text:0000000000008689                 divss   xmm0, dword ptr [r12+8]
.text:0000000000008690                 ucomiss xmm0, cs:dword_A2DC
.text:0000000000008697                 jnb     loc_87D0
.text:000000000000869D                 ucomiss xmm0, cs:dword_A2E0
.text:00000000000086A4                 jb      loc_8820
.text:00000000000086AA                 subss   xmm0, cs:dword_A2E0
.text:00000000000086B2                 mov     rax, 8000000000000000h
.text:00000000000086BC                 cvttss2si rsi, xmm0
.text:00000000000086C1                 xor     rsi, rax
.text:00000000000086C4                 nop     dword ptr [rax+00h]
.text:00000000000086C8
.text:00000000000086C8 loc_86C8:                               ; CODE XREF: hash_rehash+25↑j
.text:00000000000086C8                                         ; hash_rehash+1D5↓j
.text:00000000000086C8                 mov     rdi, rsi
.text:00000000000086CB                 call    next_prime
.text:00000000000086D0                 mov     edx, 8
.text:00000000000086D5                 mov     rbx, rax
.text:00000000000086D8                 xor     ecx, ecx
.text:00000000000086DA                 mov     rax, rdx
.text:00000000000086DD                 mul     rbx
.text:00000000000086E0                 jo      loc_887F
.text:00000000000086E6
.text:00000000000086E6 loc_86E6:                               ; CODE XREF: hash_rehash+234↓j
.text:00000000000086E6                 test    rax, rax
.text:00000000000086E9                 mov     eax, 1
.text:00000000000086EE                 cmovs   rcx, rax
.text:00000000000086F2                 test    rbx, rbx
.text:00000000000086F5                 jz      loc_87D0
.text:00000000000086FB                 and     ecx, 1
.text:00000000000086FE                 jnz     loc_87D0
.text:0000000000008704                 cmp     [rbp+10h], rbx
.text:0000000000008708                 jz      loc_8830
.text:000000000000870E                 mov     esi, 10h        ; size
.text:0000000000008713                 mov     rdi, rbx        ; nmemb
.text:0000000000008716                 call    _calloc
.text:000000000000871B                 test    rax, rax
.text:000000000000871E                 mov     [rsp+78h+ptr], rax
.text:0000000000008722                 jz      loc_87D0
.text:0000000000008728                 mov     [rsp+78h+var_68], rbx
.text:000000000000872D                 shl     rbx, 4
.text:0000000000008731                 mov     [rsp+78h+var_50], r12
.text:0000000000008736                 add     rbx, rax
.text:0000000000008739                 mov     rax, [rbp+30h]
.text:000000000000873D                 mov     r12, rsp
.text:0000000000008740                 xor     edx, edx
.text:0000000000008742                 mov     rsi, rbp
.text:0000000000008745                 mov     rdi, r12
.text:0000000000008748                 mov     [rsp+78h+var_70], rbx
.text:000000000000874D                 mov     [rsp+78h+var_60], 0
.text:0000000000008756                 mov     [rsp+78h+var_48], rax
.text:000000000000875B                 mov     rax, [rbp+38h]
.text:000000000000875F                 mov     [rsp+78h+var_58], 0
.text:0000000000008768                 mov     [rsp+78h+var_40], rax
.text:000000000000876D                 mov     rax, [rbp+40h]
.text:0000000000008771                 mov     [rsp+78h+var_38], rax
.text:0000000000008776                 mov     rax, [rbp+48h]
.text:000000000000877A                 mov     [rsp+78h+var_30], rax
.text:000000000000877F                 call    transfer_entries
.text:0000000000008784                 test    al, al
.text:0000000000008786                 mov     ebx, eax
.text:0000000000008788                 jnz     loc_8840
.text:000000000000878E                 mov     rax, [rsp+78h+var_30]
.text:0000000000008793                 mov     edx, 1
.text:0000000000008798                 mov     rsi, r12
.text:000000000000879B                 mov     rdi, rbp
.text:000000000000879E                 mov     [rbp+48h], rax
.text:00000000000087A2                 call    transfer_entries
.text:00000000000087A7                 test    al, al
.text:00000000000087A9                 jz      loc_8889
.text:00000000000087AF                 xor     edx, edx
.text:00000000000087B1                 mov     rsi, r12
.text:00000000000087B4                 mov     rdi, rbp
.text:00000000000087B7                 call    transfer_entries
.text:00000000000087BC                 test    al, al
.text:00000000000087BE                 jz      loc_8889
.text:00000000000087C4                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:00000000000087C8                 call    free
.text:00000000000087CD                 jmp     short loc_87D2
.text:00000000000087CD ; ---------------------------------------------------------------------------
.text:00000000000087CF                 align 10h
.text:00000000000087D0
.text:00000000000087D0 loc_87D0:                               ; CODE XREF: hash_rehash+47↑j
.text:00000000000087D0                                         ; hash_rehash+A5↑j ...
.text:00000000000087D0                 xor     ebx, ebx
.text:00000000000087D2
.text:00000000000087D2 loc_87D2:                               ; CODE XREF: hash_rehash+17D↑j
.text:00000000000087D2                                         ; hash_rehash+1E5↓j ...
.text:00000000000087D2                 mov     rcx, [rsp+78h+var_20]
.text:00000000000087D7                 xor     rcx, fs:28h
.text:00000000000087E0                 mov     eax, ebx
.text:00000000000087E2                 jnz     loc_887A
.text:00000000000087E8                 add     rsp, 60h
.text:00000000000087EC                 pop     rbx
.text:00000000000087ED                 pop     rbp
.text:00000000000087EE                 pop     r12
.text:00000000000087F0                 retn
.text:00000000000087F0 ; ---------------------------------------------------------------------------
.text:00000000000087F1                 align 8
.text:00000000000087F8
.text:00000000000087F8 loc_87F8:                               ; CODE XREF: hash_rehash+2A↑j
.text:00000000000087F8                 mov     rax, rsi
.text:00000000000087FB                 pxor    xmm0, xmm0
.text:00000000000087FF                 shr     rax, 1
.text:0000000000008802                 and     esi, 1
.text:0000000000008805                 or      rax, rsi
.text:0000000000008808                 cvtsi2ss xmm0, rax
.text:000000000000880D                 addss   xmm0, xmm0
.text:0000000000008811                 jmp     loc_8689
.text:0000000000008811 ; ---------------------------------------------------------------------------
.text:0000000000008816                 align 20h
.text:0000000000008820
.text:0000000000008820 loc_8820:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000008820                 cvttss2si rsi, xmm0
.text:0000000000008825                 jmp     loc_86C8
.text:0000000000008825 ; ---------------------------------------------------------------------------
.text:000000000000882A                 align 10h
.text:0000000000008830
.text:0000000000008830 loc_8830:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000008830                 mov     ebx, 1
.text:0000000000008835                 jmp     short loc_87D2
.text:0000000000008835 ; ---------------------------------------------------------------------------
.text:0000000000008837                 align 20h
.text:0000000000008840
.text:0000000000008840 loc_8840:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000008840                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000008844                 call    free
.text:0000000000008849                 mov     rax, [rsp+78h+ptr]
.text:000000000000884D                 mov     [rbp+0], rax
.text:0000000000008851                 mov     rax, [rsp+78h+var_70]
.text:0000000000008856                 mov     [rbp+8], rax
.text:000000000000885A                 mov     rax, [rsp+78h+var_68]
.text:000000000000885F                 mov     [rbp+10h], rax
.text:0000000000008863                 mov     rax, [rsp+78h+var_60]
.text:0000000000008868                 mov     [rbp+18h], rax
.text:000000000000886C                 mov     rax, [rsp+78h+var_30]
.text:0000000000008871                 mov     [rbp+48h], rax
.text:0000000000008875                 jmp     loc_87D2
.text:000000000000887A ; ---------------------------------------------------------------------------
.text:000000000000887A
.text:000000000000887A loc_887A:                               ; CODE XREF: hash_rehash+192↑j
.text:000000000000887A                 call    ___stack_chk_fail
.text:000000000000887F ; ---------------------------------------------------------------------------
.text:000000000000887F
.text:000000000000887F loc_887F:                               ; CODE XREF: hash_rehash+90↑j
.text:000000000000887F                 mov     ecx, 1
.text:0000000000008884                 jmp     loc_86E6
.text:0000000000008889 ; ---------------------------------------------------------------------------
.text:0000000000008889
.text:0000000000008889 loc_8889:                               ; CODE XREF: hash_rehash+159↑j
.text:0000000000008889                                         ; hash_rehash+16E↑j
.text:0000000000008889                 call    _abort
.text:0000000000008889 ; } // starts at 8650
.text:0000000000008889 hash_rehash     endp
.text:0000000000008889
.text:0000000000008889 ; ---------------------------------------------------------------------------
.text:000000000000888E                 align 10h
.text:0000000000008890
.text:0000000000008890 ; =============== S U B R O U T I N E =======================================
.text:0000000000008890
.text:0000000000008890 ; Attributes: info_from_lumina
.text:0000000000008890
.text:0000000000008890 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:0000000000008890                 public hash_insert_if_absent
.text:0000000000008890 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:0000000000008890
.text:0000000000008890 var_38          = qword ptr -38h
.text:0000000000008890 var_30          = qword ptr -30h
.text:0000000000008890
.text:0000000000008890 ; __unwind {
.text:0000000000008890                 push    r13
.text:0000000000008892                 push    r12
.text:0000000000008894                 push    rbp
.text:0000000000008895                 push    rbx
.text:0000000000008896                 sub     rsp, 18h
.text:000000000000889A                 mov     rax, fs:28h
.text:00000000000088A3                 mov     [rsp+38h+var_30], rax
.text:00000000000088A8                 xor     eax, eax
.text:00000000000088AA                 test    rsi, rsi
.text:00000000000088AD                 jz      loc_8A6D
.text:00000000000088B3                 mov     r12, rsp
.text:00000000000088B6                 xor     ecx, ecx
.text:00000000000088B8                 mov     r13, rdx
.text:00000000000088BB                 mov     rdx, r12
.text:00000000000088BE                 mov     rbx, rdi
.text:00000000000088C1                 mov     rbp, rsi
.text:00000000000088C4                 call    hash_find_entry
.text:00000000000088C9                 test    rax, rax
.text:00000000000088CC                 mov     rdx, rax
.text:00000000000088CF                 jz      short loc_8900
.text:00000000000088D1                 xor     eax, eax
.text:00000000000088D3                 test    r13, r13
.text:00000000000088D6                 jz      short loc_88DC
.text:00000000000088D8                 mov     [r13+0], rdx
.text:00000000000088DC
.text:00000000000088DC loc_88DC:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:00000000000088DC                                         ; hash_insert_if_absent+E9↓j ...
.text:00000000000088DC                 mov     rcx, [rsp+38h+var_30]
.text:00000000000088E1                 xor     rcx, fs:28h
.text:00000000000088EA                 jnz     loc_8B0F
.text:00000000000088F0                 add     rsp, 18h
.text:00000000000088F4                 pop     rbx
.text:00000000000088F5                 pop     rbp
.text:00000000000088F6                 pop     r12
.text:00000000000088F8                 pop     r13
.text:00000000000088FA                 retn
.text:00000000000088FA ; ---------------------------------------------------------------------------
.text:00000000000088FB                 align 20h
.text:0000000000008900
.text:0000000000008900 loc_8900:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:0000000000008900                 mov     rax, [rbx+18h]
.text:0000000000008904                 test    rax, rax
.text:0000000000008907                 js      short loc_8980
.text:0000000000008909                 pxor    xmm1, xmm1
.text:000000000000890D                 mov     rdx, [rbx+28h]
.text:0000000000008911                 cvtsi2ss xmm1, rax
.text:0000000000008916                 mov     rax, [rbx+10h]
.text:000000000000891A                 test    rax, rax
.text:000000000000891D                 js      loc_89AA
.text:0000000000008923
.text:0000000000008923 loc_8923:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000008923                 pxor    xmm0, xmm0
.text:0000000000008927                 cvtsi2ss xmm0, rax
.text:000000000000892C
.text:000000000000892C loc_892C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:000000000000892C                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000008931                 ucomiss xmm1, xmm0
.text:0000000000008934                 ja      loc_89D0
.text:000000000000893A
.text:000000000000893A loc_893A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:000000000000893A                                         ; hash_insert_if_absent+1D7↓j
.text:000000000000893A                 mov     r12, [rsp+38h+var_38]
.text:000000000000893E                 cmp     qword ptr [r12], 0
.text:0000000000008943                 jz      loc_8A78
.text:0000000000008949                 mov     rax, [rbx+48h]
.text:000000000000894D                 test    rax, rax
.text:0000000000008950                 jz      loc_8A90
.text:0000000000008956                 mov     rdx, [rax+8]
.text:000000000000895A                 mov     [rbx+48h], rdx
.text:000000000000895E
.text:000000000000895E loc_895E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:000000000000895E                 mov     rdx, [r12+8]
.text:0000000000008963                 mov     [rax], rbp
.text:0000000000008966                 mov     [rax+8], rdx
.text:000000000000896A                 mov     [r12+8], rax
.text:000000000000896F                 mov     eax, 1
.text:0000000000008974                 add     qword ptr [rbx+20h], 1
.text:0000000000008979                 jmp     loc_88DC
.text:0000000000008979 ; ---------------------------------------------------------------------------
.text:000000000000897E                 align 20h
.text:0000000000008980
.text:0000000000008980 loc_8980:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:0000000000008980                 mov     rdx, rax
.text:0000000000008983                 pxor    xmm1, xmm1
.text:0000000000008987                 and     eax, 1
.text:000000000000898A                 shr     rdx, 1
.text:000000000000898D                 or      rdx, rax
.text:0000000000008990                 mov     rax, [rbx+10h]
.text:0000000000008994                 cvtsi2ss xmm1, rdx
.text:0000000000008999                 mov     rdx, [rbx+28h]
.text:000000000000899D                 test    rax, rax
.text:00000000000089A0                 addss   xmm1, xmm1
.text:00000000000089A4                 jns     loc_8923
.text:00000000000089AA
.text:00000000000089AA loc_89AA:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:00000000000089AA                 mov     rcx, rax
.text:00000000000089AD                 pxor    xmm0, xmm0
.text:00000000000089B1                 shr     rcx, 1
.text:00000000000089B4                 and     eax, 1
.text:00000000000089B7                 or      rcx, rax
.text:00000000000089BA                 cvtsi2ss xmm0, rcx
.text:00000000000089BF                 addss   xmm0, xmm0
.text:00000000000089C3                 jmp     loc_892C
.text:00000000000089C3 ; ---------------------------------------------------------------------------
.text:00000000000089C8                 align 10h
.text:00000000000089D0
.text:00000000000089D0 loc_89D0:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:00000000000089D0                 lea     rdi, [rbx+28h]
.text:00000000000089D4                 call    check_tuning
.text:00000000000089D9                 mov     rax, [rbx+10h]
.text:00000000000089DD                 mov     rdx, [rbx+28h]
.text:00000000000089E1                 test    rax, rax
.text:00000000000089E4                 movss   xmm2, dword ptr [rdx+8]
.text:00000000000089E9                 js      loc_8AB0
.text:00000000000089EF                 pxor    xmm0, xmm0
.text:00000000000089F3                 cvtsi2ss xmm0, rax
.text:00000000000089F8
.text:00000000000089F8 loc_89F8:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:00000000000089F8                 mov     rax, [rbx+18h]
.text:00000000000089FC                 test    rax, rax
.text:00000000000089FF                 js      loc_8AD0
.text:0000000000008A05                 pxor    xmm1, xmm1
.text:0000000000008A09                 cvtsi2ss xmm1, rax
.text:0000000000008A0E
.text:0000000000008A0E loc_8A0E:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:0000000000008A0E                 movaps  xmm3, xmm2
.text:0000000000008A11                 mulss   xmm3, xmm0
.text:0000000000008A15                 ucomiss xmm1, xmm3
.text:0000000000008A18                 jbe     loc_893A
.text:0000000000008A1E                 cmp     byte ptr [rdx+10h], 0
.text:0000000000008A22                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000008A27                 jnz     short loc_8A2D
.text:0000000000008A29                 mulss   xmm0, xmm2
.text:0000000000008A2D
.text:0000000000008A2D loc_8A2D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:0000000000008A2D                 ucomiss xmm0, cs:dword_A2DC
.text:0000000000008A34                 jnb     short loc_8AA3
.text:0000000000008A36                 ucomiss xmm0, cs:dword_A2E0
.text:0000000000008A3D                 jnb     loc_8AF0
.text:0000000000008A43                 cvttss2si rsi, xmm0
.text:0000000000008A48
.text:0000000000008A48 loc_8A48:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000008A48                 mov     rdi, rbx
.text:0000000000008A4B                 call    hash_rehash
.text:0000000000008A50                 test    al, al
.text:0000000000008A52                 jz      short loc_8AA3
.text:0000000000008A54                 xor     ecx, ecx
.text:0000000000008A56                 mov     rdx, r12
.text:0000000000008A59                 mov     rsi, rbp
.text:0000000000008A5C                 mov     rdi, rbx
.text:0000000000008A5F                 call    hash_find_entry
.text:0000000000008A64                 test    rax, rax
.text:0000000000008A67                 jz      loc_893A
.text:0000000000008A6D
.text:0000000000008A6D loc_8A6D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:0000000000008A6D                 call    _abort
.text:0000000000008A6D ; ---------------------------------------------------------------------------
.text:0000000000008A72                 align 8
.text:0000000000008A78
.text:0000000000008A78 loc_8A78:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:0000000000008A78                 mov     [r12], rbp
.text:0000000000008A7C                 mov     eax, 1
.text:0000000000008A81                 add     qword ptr [rbx+20h], 1
.text:0000000000008A86                 add     qword ptr [rbx+18h], 1
.text:0000000000008A8B                 jmp     loc_88DC
.text:0000000000008A90 ; ---------------------------------------------------------------------------
.text:0000000000008A90
.text:0000000000008A90 loc_8A90:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:0000000000008A90                 mov     edi, 10h        ; size
.text:0000000000008A95                 call    _malloc
.text:0000000000008A9A                 test    rax, rax
.text:0000000000008A9D                 jnz     loc_895E
.text:0000000000008AA3
.text:0000000000008AA3 loc_8AA3:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:0000000000008AA3                                         ; hash_insert_if_absent+1C2↑j
.text:0000000000008AA3                 mov     eax, 0FFFFFFFFh
.text:0000000000008AA8                 jmp     loc_88DC
.text:0000000000008AA8 ; ---------------------------------------------------------------------------
.text:0000000000008AAD                 align 10h
.text:0000000000008AB0
.text:0000000000008AB0 loc_8AB0:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:0000000000008AB0                 mov     rcx, rax
.text:0000000000008AB3                 pxor    xmm0, xmm0
.text:0000000000008AB7                 shr     rcx, 1
.text:0000000000008ABA                 and     eax, 1
.text:0000000000008ABD                 or      rcx, rax
.text:0000000000008AC0                 cvtsi2ss xmm0, rcx
.text:0000000000008AC5                 addss   xmm0, xmm0
.text:0000000000008AC9                 jmp     loc_89F8
.text:0000000000008AC9 ; ---------------------------------------------------------------------------
.text:0000000000008ACE                 align 10h
.text:0000000000008AD0
.text:0000000000008AD0 loc_8AD0:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:0000000000008AD0                 mov     rcx, rax
.text:0000000000008AD3                 pxor    xmm1, xmm1
.text:0000000000008AD7                 shr     rcx, 1
.text:0000000000008ADA                 and     eax, 1
.text:0000000000008ADD                 or      rcx, rax
.text:0000000000008AE0                 cvtsi2ss xmm1, rcx
.text:0000000000008AE5                 addss   xmm1, xmm1
.text:0000000000008AE9                 jmp     loc_8A0E
.text:0000000000008AE9 ; ---------------------------------------------------------------------------
.text:0000000000008AEE                 align 10h
.text:0000000000008AF0
.text:0000000000008AF0 loc_8AF0:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:0000000000008AF0                 subss   xmm0, cs:dword_A2E0
.text:0000000000008AF8                 mov     rax, 8000000000000000h
.text:0000000000008B02                 cvttss2si rsi, xmm0
.text:0000000000008B07                 xor     rsi, rax
.text:0000000000008B0A                 jmp     loc_8A48
.text:0000000000008B0F ; ---------------------------------------------------------------------------
.text:0000000000008B0F
.text:0000000000008B0F loc_8B0F:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:0000000000008B0F                 call    ___stack_chk_fail
.text:0000000000008B0F ; } // starts at 8890
.text:0000000000008B0F hash_insert_if_absent endp
.text:0000000000008B0F
.text:0000000000008B0F ; ---------------------------------------------------------------------------
.text:0000000000008B14                 align 20h
.text:0000000000008B20
.text:0000000000008B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B20
.text:0000000000008B20 ; Attributes: info_from_lumina
.text:0000000000008B20
.text:0000000000008B20 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:0000000000008B20                 public hash_insert
.text:0000000000008B20 hash_insert     proc near               ; CODE XREF: randperm_new+23D↑p
.text:0000000000008B20                                         ; randperm_new+256↑p
.text:0000000000008B20
.text:0000000000008B20 var_18          = qword ptr -18h
.text:0000000000008B20 var_10          = qword ptr -10h
.text:0000000000008B20
.text:0000000000008B20 ; __unwind {
.text:0000000000008B20                 push    rbx
.text:0000000000008B21                 mov     rbx, rsi
.text:0000000000008B24                 sub     rsp, 10h
.text:0000000000008B28                 mov     rdx, rsp
.text:0000000000008B2B                 mov     rax, fs:28h
.text:0000000000008B34                 mov     [rsp+18h+var_10], rax
.text:0000000000008B39                 xor     eax, eax
.text:0000000000008B3B                 call    hash_insert_if_absent
.text:0000000000008B40                 cmp     eax, 0FFFFFFFFh
.text:0000000000008B43                 jz      short loc_8B70
.text:0000000000008B45                 test    eax, eax
.text:0000000000008B47                 jnz     short loc_8B4D
.text:0000000000008B49                 mov     rbx, [rsp+18h+var_18]
.text:0000000000008B4D
.text:0000000000008B4D loc_8B4D:                               ; CODE XREF: hash_insert+27↑j
.text:0000000000008B4D                                         ; hash_insert+52↓j
.text:0000000000008B4D                 mov     rcx, [rsp+18h+var_10]
.text:0000000000008B52                 xor     rcx, fs:28h
.text:0000000000008B5B                 mov     rax, rbx
.text:0000000000008B5E                 jnz     short loc_8B74
.text:0000000000008B60                 add     rsp, 10h
.text:0000000000008B64                 pop     rbx
.text:0000000000008B65                 retn
.text:0000000000008B65 ; ---------------------------------------------------------------------------
.text:0000000000008B66                 align 10h
.text:0000000000008B70
.text:0000000000008B70 loc_8B70:                               ; CODE XREF: hash_insert+23↑j
.text:0000000000008B70                 xor     ebx, ebx
.text:0000000000008B72                 jmp     short loc_8B4D
.text:0000000000008B74 ; ---------------------------------------------------------------------------
.text:0000000000008B74
.text:0000000000008B74 loc_8B74:                               ; CODE XREF: hash_insert+3E↑j
.text:0000000000008B74                 call    ___stack_chk_fail
.text:0000000000008B74 ; } // starts at 8B20
.text:0000000000008B74 hash_insert     endp
.text:0000000000008B74
.text:0000000000008B74 ; ---------------------------------------------------------------------------
.text:0000000000008B79                 align 20h
.text:0000000000008B80
.text:0000000000008B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B80
.text:0000000000008B80 ; Attributes: info_from_lumina
.text:0000000000008B80
.text:0000000000008B80 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:0000000000008B80                 public hash_delete
.text:0000000000008B80 hash_delete     proc near               ; CODE XREF: randperm_new+1E3↑p
.text:0000000000008B80                                         ; randperm_new+203↑p
.text:0000000000008B80
.text:0000000000008B80 var_28          = qword ptr -28h
.text:0000000000008B80 var_20          = qword ptr -20h
.text:0000000000008B80
.text:0000000000008B80 ; __unwind {
.text:0000000000008B80                 push    r12
.text:0000000000008B82                 push    rbp
.text:0000000000008B83                 mov     ecx, 1
.text:0000000000008B88                 push    rbx
.text:0000000000008B89                 mov     rbx, rdi
.text:0000000000008B8C                 sub     rsp, 10h
.text:0000000000008B90                 mov     rdx, rsp
.text:0000000000008B93                 mov     rax, fs:28h
.text:0000000000008B9C                 mov     [rsp+28h+var_20], rax
.text:0000000000008BA1                 xor     eax, eax
.text:0000000000008BA3                 call    hash_find_entry
.text:0000000000008BA8                 test    rax, rax
.text:0000000000008BAB                 mov     rbp, rax
.text:0000000000008BAE                 jz      short loc_8BBF
.text:0000000000008BB0                 mov     rax, [rsp+28h+var_28]
.text:0000000000008BB4                 sub     qword ptr [rbx+20h], 1
.text:0000000000008BB9                 cmp     qword ptr [rax], 0
.text:0000000000008BBD                 jz      short loc_8BE0
.text:0000000000008BBF
.text:0000000000008BBF loc_8BBF:                               ; CODE XREF: hash_delete+2E↑j
.text:0000000000008BBF                                         ; hash_delete+9F↓j ...
.text:0000000000008BBF                 mov     rcx, [rsp+28h+var_20]
.text:0000000000008BC4                 xor     rcx, fs:28h
.text:0000000000008BCD                 mov     rax, rbp
.text:0000000000008BD0                 jnz     loc_8D7E
.text:0000000000008BD6                 add     rsp, 10h
.text:0000000000008BDA                 pop     rbx
.text:0000000000008BDB                 pop     rbp
.text:0000000000008BDC                 pop     r12
.text:0000000000008BDE                 retn
.text:0000000000008BDE ; ---------------------------------------------------------------------------
.text:0000000000008BDF                 align 20h
.text:0000000000008BE0
.text:0000000000008BE0 loc_8BE0:                               ; CODE XREF: hash_delete+3D↑j
.text:0000000000008BE0                 mov     rax, [rbx+18h]
.text:0000000000008BE4                 sub     rax, 1
.text:0000000000008BE8                 test    rax, rax
.text:0000000000008BEB                 mov     [rbx+18h], rax
.text:0000000000008BEF                 js      loc_8CF0
.text:0000000000008BF5                 pxor    xmm0, xmm0
.text:0000000000008BF9                 cvtsi2ss xmm0, rax
.text:0000000000008BFE
.text:0000000000008BFE loc_8BFE:                               ; CODE XREF: hash_delete+189↓j
.text:0000000000008BFE                 mov     rax, [rbx+10h]
.text:0000000000008C02                 mov     rdx, [rbx+28h]
.text:0000000000008C06                 test    rax, rax
.text:0000000000008C09                 js      loc_8CD0
.text:0000000000008C0F                 pxor    xmm1, xmm1
.text:0000000000008C13                 cvtsi2ss xmm1, rax
.text:0000000000008C18
.text:0000000000008C18 loc_8C18:                               ; CODE XREF: hash_delete+169↓j
.text:0000000000008C18                 mulss   xmm1, dword ptr [rdx]
.text:0000000000008C1C                 ucomiss xmm1, xmm0
.text:0000000000008C1F                 jbe     short loc_8BBF
.text:0000000000008C21                 lea     rdi, [rbx+28h]
.text:0000000000008C25                 call    check_tuning
.text:0000000000008C2A                 mov     rax, [rbx+10h]
.text:0000000000008C2E                 mov     rdx, [rbx+28h]
.text:0000000000008C32                 test    rax, rax
.text:0000000000008C35                 js      loc_8D60
.text:0000000000008C3B                 pxor    xmm0, xmm0
.text:0000000000008C3F                 cvtsi2ss xmm0, rax
.text:0000000000008C44
.text:0000000000008C44 loc_8C44:                               ; CODE XREF: hash_delete+1F9↓j
.text:0000000000008C44                 mov     rax, [rbx+18h]
.text:0000000000008C48                 test    rax, rax
.text:0000000000008C4B                 js      loc_8D40
.text:0000000000008C51                 pxor    xmm1, xmm1
.text:0000000000008C55                 cvtsi2ss xmm1, rax
.text:0000000000008C5A
.text:0000000000008C5A loc_8C5A:                               ; CODE XREF: hash_delete+1D9↓j
.text:0000000000008C5A                 movss   xmm2, dword ptr [rdx]
.text:0000000000008C5E                 mulss   xmm2, xmm0
.text:0000000000008C62                 ucomiss xmm2, xmm1
.text:0000000000008C65                 jbe     loc_8BBF
.text:0000000000008C6B                 cmp     byte ptr [rdx+10h], 0
.text:0000000000008C6F                 mulss   xmm0, dword ptr [rdx+4]
.text:0000000000008C74                 jz      loc_8D30
.text:0000000000008C7A
.text:0000000000008C7A loc_8C7A:                               ; CODE XREF: hash_delete+1B5↓j
.text:0000000000008C7A                 ucomiss xmm0, cs:dword_A2E0
.text:0000000000008C81                 jnb     loc_8D10
.text:0000000000008C87                 cvttss2si rsi, xmm0
.text:0000000000008C8C
.text:0000000000008C8C loc_8C8C:                               ; CODE XREF: hash_delete+1AA↓j
.text:0000000000008C8C                 mov     rdi, rbx
.text:0000000000008C8F                 call    hash_rehash
.text:0000000000008C94                 test    al, al
.text:0000000000008C96                 jnz     loc_8BBF
.text:0000000000008C9C                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000008CA0                 test    rdi, rdi
.text:0000000000008CA3                 jz      short loc_8CB9
.text:0000000000008CA5                 nop     dword ptr [rax]
.text:0000000000008CA8
.text:0000000000008CA8 loc_8CA8:                               ; CODE XREF: hash_delete+137↓j
.text:0000000000008CA8                 mov     r12, [rdi+8]
.text:0000000000008CAC                 call    free
.text:0000000000008CB1                 test    r12, r12
.text:0000000000008CB4                 mov     rdi, r12
.text:0000000000008CB7                 jnz     short loc_8CA8
.text:0000000000008CB9
.text:0000000000008CB9 loc_8CB9:                               ; CODE XREF: hash_delete+123↑j
.text:0000000000008CB9                 mov     qword ptr [rbx+48h], 0
.text:0000000000008CC1                 jmp     loc_8BBF
.text:0000000000008CC1 ; ---------------------------------------------------------------------------
.text:0000000000008CC6                 align 10h
.text:0000000000008CD0
.text:0000000000008CD0 loc_8CD0:                               ; CODE XREF: hash_delete+89↑j
.text:0000000000008CD0                 mov     rcx, rax
.text:0000000000008CD3                 pxor    xmm1, xmm1
.text:0000000000008CD7                 shr     rcx, 1
.text:0000000000008CDA                 and     eax, 1
.text:0000000000008CDD                 or      rcx, rax
.text:0000000000008CE0                 cvtsi2ss xmm1, rcx
.text:0000000000008CE5                 addss   xmm1, xmm1
.text:0000000000008CE9                 jmp     loc_8C18
.text:0000000000008CE9 ; ---------------------------------------------------------------------------
.text:0000000000008CEE                 align 10h
.text:0000000000008CF0
.text:0000000000008CF0 loc_8CF0:                               ; CODE XREF: hash_delete+6F↑j
.text:0000000000008CF0                 mov     rdx, rax
.text:0000000000008CF3                 pxor    xmm0, xmm0
.text:0000000000008CF7                 shr     rdx, 1
.text:0000000000008CFA                 and     eax, 1
.text:0000000000008CFD                 or      rdx, rax
.text:0000000000008D00                 cvtsi2ss xmm0, rdx
.text:0000000000008D05                 addss   xmm0, xmm0
.text:0000000000008D09                 jmp     loc_8BFE
.text:0000000000008D09 ; ---------------------------------------------------------------------------
.text:0000000000008D0E                 align 10h
.text:0000000000008D10
.text:0000000000008D10 loc_8D10:                               ; CODE XREF: hash_delete+101↑j
.text:0000000000008D10                 subss   xmm0, cs:dword_A2E0
.text:0000000000008D18                 mov     rax, 8000000000000000h
.text:0000000000008D22                 cvttss2si rsi, xmm0
.text:0000000000008D27                 xor     rsi, rax
.text:0000000000008D2A                 jmp     loc_8C8C
.text:0000000000008D2A ; ---------------------------------------------------------------------------
.text:0000000000008D2F                 align 10h
.text:0000000000008D30
.text:0000000000008D30 loc_8D30:                               ; CODE XREF: hash_delete+F4↑j
.text:0000000000008D30                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000008D35                 jmp     loc_8C7A
.text:0000000000008D35 ; ---------------------------------------------------------------------------
.text:0000000000008D3A                 align 20h
.text:0000000000008D40
.text:0000000000008D40 loc_8D40:                               ; CODE XREF: hash_delete+CB↑j
.text:0000000000008D40                 mov     rcx, rax
.text:0000000000008D43                 pxor    xmm1, xmm1
.text:0000000000008D47                 shr     rcx, 1
.text:0000000000008D4A                 and     eax, 1
.text:0000000000008D4D                 or      rcx, rax
.text:0000000000008D50                 cvtsi2ss xmm1, rcx
.text:0000000000008D55                 addss   xmm1, xmm1
.text:0000000000008D59                 jmp     loc_8C5A
.text:0000000000008D59 ; ---------------------------------------------------------------------------
.text:0000000000008D5E                 align 20h
.text:0000000000008D60
.text:0000000000008D60 loc_8D60:                               ; CODE XREF: hash_delete+B5↑j
.text:0000000000008D60                 mov     rcx, rax
.text:0000000000008D63                 pxor    xmm0, xmm0
.text:0000000000008D67                 shr     rcx, 1
.text:0000000000008D6A                 and     eax, 1
.text:0000000000008D6D                 or      rcx, rax
.text:0000000000008D70                 cvtsi2ss xmm0, rcx
.text:0000000000008D75                 addss   xmm0, xmm0
.text:0000000000008D79                 jmp     loc_8C44
.text:0000000000008D7E ; ---------------------------------------------------------------------------
.text:0000000000008D7E
.text:0000000000008D7E loc_8D7E:                               ; CODE XREF: hash_delete+50↑j
.text:0000000000008D7E                 call    ___stack_chk_fail
.text:0000000000008D7E ; } // starts at 8B80
.text:0000000000008D7E hash_delete     endp
.text:0000000000008D7E
.text:0000000000008D7E ; ---------------------------------------------------------------------------
.text:0000000000008D83                 align 10h
.text:0000000000008D90
.text:0000000000008D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D90
.text:0000000000008D90
.text:0000000000008D90                 public locale_charset
.text:0000000000008D90 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000008D90 ; __unwind {
.text:0000000000008D90                 sub     rsp, 8
.text:0000000000008D94                 mov     edi, 0Eh        ; item
.text:0000000000008D99                 call    _nl_langinfo
.text:0000000000008D9E                 test    rax, rax
.text:0000000000008DA1                 jz      short loc_8DC0
.text:0000000000008DA3                 cmp     byte ptr [rax], 0
.text:0000000000008DA6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000008DAD                 cmovz   rax, rdx
.text:0000000000008DB1                 add     rsp, 8
.text:0000000000008DB5                 retn
.text:0000000000008DB5 ; ---------------------------------------------------------------------------
.text:0000000000008DB6                 align 20h
.text:0000000000008DC0
.text:0000000000008DC0 loc_8DC0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000008DC0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000008DC7                 add     rsp, 8
.text:0000000000008DCB                 retn
.text:0000000000008DCB ; } // starts at 8D90
.text:0000000000008DCB locale_charset  endp
.text:0000000000008DCB
.text:0000000000008DCB ; ---------------------------------------------------------------------------
.text:0000000000008DCC                 align 10h
.text:0000000000008DD0
.text:0000000000008DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DD0
.text:0000000000008DD0
.text:0000000000008DD0                 public dup_safer
.text:0000000000008DD0 dup_safer       proc near               ; CODE XREF: fopen_safer+32↑p
.text:0000000000008DD0 ; __unwind {
.text:0000000000008DD0                 mov     edx, 3
.text:0000000000008DD5                 xor     esi, esi
.text:0000000000008DD7                 xor     eax, eax
.text:0000000000008DD9                 jmp     rpl_fcntl
.text:0000000000008DD9 ; } // starts at 8DD0
.text:0000000000008DD9 dup_safer       endp
.text:0000000000008DD9
.text:0000000000008DD9 ; ---------------------------------------------------------------------------
.text:0000000000008DDE                 align 20h
.text:0000000000008DE0
.text:0000000000008DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DE0
.text:0000000000008DE0
.text:0000000000008DE0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000008DE0                 public rpl_fcntl
.text:0000000000008DE0 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:0000000000008DE0
.text:0000000000008DE0 var_68          = dword ptr -68h
.text:0000000000008DE0 var_60          = qword ptr -60h
.text:0000000000008DE0 var_58          = qword ptr -58h
.text:0000000000008DE0 var_50          = qword ptr -50h
.text:0000000000008DE0 var_48          = byte ptr -48h
.text:0000000000008DE0 var_38          = qword ptr -38h
.text:0000000000008DE0 var_30          = qword ptr -30h
.text:0000000000008DE0 var_28          = qword ptr -28h
.text:0000000000008DE0 var_20          = qword ptr -20h
.text:0000000000008DE0 arg_0           = byte ptr  8
.text:0000000000008DE0
.text:0000000000008DE0 ; __unwind {
.text:0000000000008DE0                 push    r12
.text:0000000000008DE2                 push    rbp
.text:0000000000008DE3                 mov     ebp, edi
.text:0000000000008DE5                 push    rbx
.text:0000000000008DE6                 sub     rsp, 50h
.text:0000000000008DEA                 mov     rax, fs:28h
.text:0000000000008DF3                 mov     [rsp+68h+var_50], rax
.text:0000000000008DF8                 xor     eax, eax
.text:0000000000008DFA                 lea     rax, [rsp+68h+arg_0]
.text:0000000000008DFF                 test    esi, esi
.text:0000000000008E01                 mov     [rsp+68h+var_38], rdx
.text:0000000000008E06                 mov     [rsp+68h+var_30], rcx
.text:0000000000008E0B                 mov     [rsp+68h+var_28], r8
.text:0000000000008E10                 mov     [rsp+68h+var_60], rax
.text:0000000000008E15                 lea     rax, [rsp+68h+var_48]
.text:0000000000008E1A                 mov     [rsp+68h+var_20], r9
.text:0000000000008E1F                 mov     [rsp+68h+var_68], 10h
.text:0000000000008E26                 mov     [rsp+68h+var_58], rax
.text:0000000000008E2B                 jz      loc_9032
.text:0000000000008E31                 cmp     esi, 406h
.text:0000000000008E37                 jnz     short loc_8E80
.text:0000000000008E39                 mov     rax, [rsp+68h+var_58]
.text:0000000000008E3E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000008E45                 mov     [rsp+68h+var_68], 18h
.text:0000000000008E4C                 mov     r12d, [rax+10h]
.text:0000000000008E50                 mov     edx, r12d
.text:0000000000008E53                 js      loc_8F83
.text:0000000000008E59                 xor     eax, eax
.text:0000000000008E5B                 mov     esi, 406h       ; cmd
.text:0000000000008E60                 call    _fcntl
.text:0000000000008E65                 test    eax, eax
.text:0000000000008E67                 mov     ebx, eax
.text:0000000000008E69                 js      loc_8FF8
.text:0000000000008E6F
.text:0000000000008E6F loc_8E6F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:0000000000008E6F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000008E79                 jmp     short loc_8EC0
.text:0000000000008E79 ; ---------------------------------------------------------------------------
.text:0000000000008E7B                 align 20h
.text:0000000000008E80
.text:0000000000008E80 loc_8E80:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000008E80                 cmp     esi, 0Bh
.text:0000000000008E83                 jz      short loc_8EB0
.text:0000000000008E85                 jg      short loc_8EE0
.text:0000000000008E87                 cmp     esi, 4
.text:0000000000008E8A                 jz      loc_8F60
.text:0000000000008E90                 jg      loc_8F50
.text:0000000000008E96                 cmp     esi, 2
.text:0000000000008E99                 jz      loc_8F60
.text:0000000000008E9F                 jg      short loc_8EB0
.text:0000000000008EA1                 cmp     esi, 1
.text:0000000000008EA4                 jnz     short loc_8F08
.text:0000000000008EA6                 db      2Eh
.text:0000000000008EA6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008EB0
.text:0000000000008EB0 loc_8EB0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000008EB0                                         ; rpl_fcntl+BF↑j ...
.text:0000000000008EB0                 mov     edi, ebp        ; fd
.text:0000000000008EB2                 xor     eax, eax
.text:0000000000008EB4                 call    _fcntl
.text:0000000000008EB9                 mov     ebx, eax
.text:0000000000008EBB                 nop     dword ptr [rax+rax+00h]
.text:0000000000008EC0
.text:0000000000008EC0 loc_8EC0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000008EC0                                         ; rpl_fcntl+147↓j ...
.text:0000000000008EC0                 mov     rcx, [rsp+68h+var_50]
.text:0000000000008EC5                 xor     rcx, fs:28h
.text:0000000000008ECE                 mov     eax, ebx
.text:0000000000008ED0                 jnz     loc_902D
.text:0000000000008ED6                 add     rsp, 50h
.text:0000000000008EDA                 pop     rbx
.text:0000000000008EDB                 pop     rbp
.text:0000000000008EDC                 pop     r12
.text:0000000000008EDE                 retn
.text:0000000000008EDE ; ---------------------------------------------------------------------------
.text:0000000000008EDF                 align 20h
.text:0000000000008EE0
.text:0000000000008EE0 loc_8EE0:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000008EE0                 cmp     esi, 407h
.text:0000000000008EE6                 jg      short loc_8F30
.text:0000000000008EE8                 cmp     esi, 406h
.text:0000000000008EEE                 jge     short loc_8F60
.text:0000000000008EF0                 cmp     esi, 401h
.text:0000000000008EF6                 jz      short loc_8EB0
.text:0000000000008EF8                 cmp     esi, 402h
.text:0000000000008EFE                 jz      short loc_8F60
.text:0000000000008F00                 cmp     esi, 400h
.text:0000000000008F06                 jz      short loc_8F60
.text:0000000000008F08
.text:0000000000008F08 loc_8F08:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000008F08                                         ; rpl_fcntl+164↓j ...
.text:0000000000008F08                 mov     eax, [rsp+68h+var_68]
.text:0000000000008F0B                 cmp     eax, 2Fh ; '/'
.text:0000000000008F0E                 ja      loc_904A
.text:0000000000008F14                 add     rax, [rsp+68h+var_58]
.text:0000000000008F19
.text:0000000000008F19 loc_8F19:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000008F19                 mov     rdx, [rax]
.text:0000000000008F1C                 mov     edi, ebp        ; fd
.text:0000000000008F1E                 xor     eax, eax
.text:0000000000008F20                 call    _fcntl
.text:0000000000008F25                 mov     ebx, eax
.text:0000000000008F27                 jmp     short loc_8EC0
.text:0000000000008F27 ; ---------------------------------------------------------------------------
.text:0000000000008F29                 align 10h
.text:0000000000008F30
.text:0000000000008F30 loc_8F30:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000008F30                 cmp     esi, 409h
.text:0000000000008F36                 jz      short loc_8F60
.text:0000000000008F38                 jl      loc_8EB0
.text:0000000000008F3E                 cmp     esi, 40Ah
.text:0000000000008F44                 jnz     short loc_8F08
.text:0000000000008F46                 jmp     loc_8EB0
.text:0000000000008F46 ; ---------------------------------------------------------------------------
.text:0000000000008F4B                 align 10h
.text:0000000000008F50
.text:0000000000008F50 loc_8F50:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000008F50                 cmp     esi, 9
.text:0000000000008F53                 jz      loc_8EB0
.text:0000000000008F59                 jg      short loc_8F60
.text:0000000000008F5B                 cmp     esi, 8
.text:0000000000008F5E                 jnz     short loc_8F08
.text:0000000000008F60
.text:0000000000008F60 loc_8F60:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000008F60                                         ; rpl_fcntl+B9↑j ...
.text:0000000000008F60                 mov     eax, [rsp+68h+var_68]
.text:0000000000008F63                 cmp     eax, 2Fh ; '/'
.text:0000000000008F66                 ja      loc_9054
.text:0000000000008F6C                 add     rax, [rsp+68h+var_58]
.text:0000000000008F71
.text:0000000000008F71 loc_8F71:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000008F71                 mov     edx, [rax]
.text:0000000000008F73                 mov     edi, ebp        ; fd
.text:0000000000008F75                 xor     eax, eax
.text:0000000000008F77                 call    _fcntl
.text:0000000000008F7C                 mov     ebx, eax
.text:0000000000008F7E                 jmp     loc_8EC0
.text:0000000000008F83 ; ---------------------------------------------------------------------------
.text:0000000000008F83
.text:0000000000008F83 loc_8F83:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000008F83                 xor     esi, esi        ; cmd
.text:0000000000008F85                 xor     eax, eax
.text:0000000000008F87                 call    _fcntl
.text:0000000000008F8C                 test    eax, eax
.text:0000000000008F8E                 mov     ebx, eax
.text:0000000000008F90                 js      loc_8EC0
.text:0000000000008F96                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000008F9D                 jnz     loc_8EC0
.text:0000000000008FA3
.text:0000000000008FA3 loc_8FA3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000008FA3                 xor     eax, eax
.text:0000000000008FA5                 mov     esi, 1          ; cmd
.text:0000000000008FAA                 mov     edi, ebx        ; fd
.text:0000000000008FAC                 call    _fcntl
.text:0000000000008FB1                 test    eax, eax
.text:0000000000008FB3                 js      short loc_8FD1
.text:0000000000008FB5                 or      eax, 1
.text:0000000000008FB8                 mov     esi, 2          ; cmd
.text:0000000000008FBD                 mov     edi, ebx        ; fd
.text:0000000000008FBF                 mov     edx, eax
.text:0000000000008FC1                 xor     eax, eax
.text:0000000000008FC3                 call    _fcntl
.text:0000000000008FC8                 cmp     eax, 0FFFFFFFFh
.text:0000000000008FCB                 jnz     loc_8EC0
.text:0000000000008FD1
.text:0000000000008FD1 loc_8FD1:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000008FD1                 call    ___errno_location
.text:0000000000008FD6                 mov     r12d, [rax]
.text:0000000000008FD9                 mov     rbp, rax
.text:0000000000008FDC                 mov     edi, ebx        ; fd
.text:0000000000008FDE                 call    _close
.text:0000000000008FE3                 mov     ebx, 0FFFFFFFFh
.text:0000000000008FE8                 mov     [rbp+0], r12d
.text:0000000000008FEC                 jmp     loc_8EC0
.text:0000000000008FEC ; ---------------------------------------------------------------------------
.text:0000000000008FF1                 align 8
.text:0000000000008FF8
.text:0000000000008FF8 loc_8FF8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000008FF8                 call    ___errno_location
.text:0000000000008FFD                 cmp     dword ptr [rax], 16h
.text:0000000000009000                 jnz     loc_8E6F
.text:0000000000009006                 xor     esi, esi        ; cmd
.text:0000000000009008                 xor     eax, eax
.text:000000000000900A                 mov     edx, r12d
.text:000000000000900D                 mov     edi, ebp        ; fd
.text:000000000000900F                 call    _fcntl
.text:0000000000009014                 test    eax, eax
.text:0000000000009016                 mov     ebx, eax
.text:0000000000009018                 js      loc_8EC0
.text:000000000000901E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000009028                 jmp     loc_8FA3
.text:000000000000902D ; ---------------------------------------------------------------------------
.text:000000000000902D
.text:000000000000902D loc_902D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000902D                 call    ___stack_chk_fail
.text:0000000000009032 ; ---------------------------------------------------------------------------
.text:0000000000009032
.text:0000000000009032 loc_9032:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000009032                 mov     rax, [rsp+68h+var_58]
.text:0000000000009037                 xor     esi, esi        ; cmd
.text:0000000000009039                 mov     edx, [rax+10h]
.text:000000000000903C                 xor     eax, eax
.text:000000000000903E                 call    _fcntl
.text:0000000000009043                 mov     ebx, eax
.text:0000000000009045                 jmp     loc_8EC0
.text:000000000000904A ; ---------------------------------------------------------------------------
.text:000000000000904A
.text:000000000000904A loc_904A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000904A                 mov     rax, [rsp+68h+var_60]
.text:000000000000904F                 jmp     loc_8F19
.text:0000000000009054 ; ---------------------------------------------------------------------------
.text:0000000000009054
.text:0000000000009054 loc_9054:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000009054                 mov     rax, [rsp+68h+var_60]
.text:0000000000009059                 jmp     loc_8F71
.text:0000000000009059 ; } // starts at 8DE0
.text:0000000000009059 rpl_fcntl       endp
.text:0000000000009059
.text:0000000000009059 ; ---------------------------------------------------------------------------
.text:000000000000905E                 align 20h
.text:0000000000009060
.text:0000000000009060 ; =============== S U B R O U T I N E =======================================
.text:0000000000009060
.text:0000000000009060 ; Attributes: info_from_lumina
.text:0000000000009060
.text:0000000000009060 ; void _libc_csu_init(void)
.text:0000000000009060                 public __libc_csu_init
.text:0000000000009060 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000009060 ; __unwind {
.text:0000000000009060                 push    r15
.text:0000000000009062                 push    r14
.text:0000000000009064                 mov     r15, rdx
.text:0000000000009067                 push    r13
.text:0000000000009069                 push    r12
.text:000000000000906B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000009072                 push    rbp
.text:0000000000009073                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000907A                 push    rbx
.text:000000000000907B                 mov     r13d, edi
.text:000000000000907E                 mov     r14, rsi
.text:0000000000009081                 sub     rbp, r12
.text:0000000000009084                 sub     rsp, 8
.text:0000000000009088                 sar     rbp, 3
.text:000000000000908C                 call    _init_proc
.text:0000000000009091                 test    rbp, rbp
.text:0000000000009094                 jz      short loc_90B6
.text:0000000000009096                 xor     ebx, ebx
.text:0000000000009098                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000090A0
.text:00000000000090A0 loc_90A0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000090A0                 mov     rdx, r15
.text:00000000000090A3                 mov     rsi, r14
.text:00000000000090A6                 mov     edi, r13d
.text:00000000000090A9                 call    ds:(__frame_dummy_init_array_entry - 20C9F0h)[r12+rbx*8]
.text:00000000000090AD                 add     rbx, 1
.text:00000000000090B1                 cmp     rbp, rbx
.text:00000000000090B4                 jnz     short loc_90A0
.text:00000000000090B6
.text:00000000000090B6 loc_90B6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000090B6                 add     rsp, 8
.text:00000000000090BA                 pop     rbx
.text:00000000000090BB                 pop     rbp
.text:00000000000090BC                 pop     r12
.text:00000000000090BE                 pop     r13
.text:00000000000090C0                 pop     r14
.text:00000000000090C2                 pop     r15
.text:00000000000090C4                 retn
.text:00000000000090C4 ; } // starts at 9060
.text:00000000000090C4 __libc_csu_init endp
.text:00000000000090C4
.text:00000000000090C4 ; ---------------------------------------------------------------------------
.text:00000000000090C5                 align 10h
.text:00000000000090D0
.text:00000000000090D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090D0
.text:00000000000090D0
.text:00000000000090D0 ; void _libc_csu_fini(void)
.text:00000000000090D0                 public __libc_csu_fini
.text:00000000000090D0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000090D0 ; __unwind {
.text:00000000000090D0                 rep retn
.text:00000000000090D0 ; } // starts at 90D0
.text:00000000000090D0 __libc_csu_fini endp
.text:00000000000090D0
.text:00000000000090D0 ; ---------------------------------------------------------------------------
.text:00000000000090D2                 align 20h
.text:00000000000090E0
.text:00000000000090E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090E0
.text:00000000000090E0
.text:00000000000090E0 atexit          proc near               ; CODE XREF: main+78↑p
.text:00000000000090E0 ; __unwind {
.text:00000000000090E0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000090E7                 xor     esi, esi        ; obj
.text:00000000000090E9                 jmp     ___cxa_atexit
.text:00000000000090E9 ; } // starts at 90E0
.text:00000000000090E9 atexit          endp
.text:00000000000090E9
.text:00000000000090E9 _text           ends
.text:00000000000090E9
LOAD:00000000000090EE ; ===========================================================================
LOAD:00000000000090EE
LOAD:00000000000090EE ; Segment type: Pure code
LOAD:00000000000090EE ; Segment permissions: Read/Execute
LOAD:00000000000090EE LOAD            segment byte public 'CODE' use64
LOAD:00000000000090EE                 assume cs:LOAD
LOAD:00000000000090EE                 ;org 90EEh
LOAD:00000000000090EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000090EE                 align 10h
LOAD:00000000000090EE LOAD            ends
LOAD:00000000000090EE
.fini:00000000000090F0 ; ===========================================================================
.fini:00000000000090F0
.fini:00000000000090F0 ; Segment type: Pure code
.fini:00000000000090F0 ; Segment permissions: Read/Execute
.fini:00000000000090F0 _fini           segment dword public 'CODE' use64
.fini:00000000000090F0                 assume cs:_fini
.fini:00000000000090F0                 ;org 90F0h
.fini:00000000000090F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000090F0
.fini:00000000000090F0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000090F0
.fini:00000000000090F0
.fini:00000000000090F0                 public _term_proc
.fini:00000000000090F0 _term_proc      proc near
.fini:00000000000090F0                 sub     rsp, 8          ; _fini
.fini:00000000000090F4                 add     rsp, 8
.fini:00000000000090F8                 retn
.fini:00000000000090F8 _term_proc      endp
.fini:00000000000090F8
.fini:00000000000090F8 _fini           ends
.fini:00000000000090F8
LOAD:00000000000090F9 ; ===========================================================================
LOAD:00000000000090F9
LOAD:00000000000090F9 ; Segment type: Pure code
LOAD:00000000000090F9 ; Segment permissions: Read/Execute
LOAD:00000000000090F9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000090F9                 assume cs:LOAD
LOAD:00000000000090F9                 ;org 90F9h
LOAD:00000000000090F9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000090F9                 align 20h
LOAD:00000000000090F9 LOAD            ends
LOAD:00000000000090F9
.rodata:0000000000009100 ; ===========================================================================
.rodata:0000000000009100
.rodata:0000000000009100 ; Segment type: Pure data
.rodata:0000000000009100 ; Segment permissions: Read
.rodata:0000000000009100 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000009100                 assume cs:_rodata
.rodata:0000000000009100                 ;org 9100h
.rodata:0000000000009100                 public _IO_stdin_used
.rodata:0000000000009100 _IO_stdin_used  db    1
.rodata:0000000000009101                 db    0
.rodata:0000000000009102                 db    2
.rodata:0000000000009103                 db    0
.rodata:0000000000009104 aShuf           db 'shuf',0             ; DATA XREF: main+2EF↑o
.rodata:0000000000009104                                         ; usage+181↑o ...
.rodata:0000000000009109 asc_9109        db '[',0                ; DATA XREF: usage+18D↑o
.rodata:000000000000910B aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1B4↑o
.rodata:000000000000911B aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000911B                                         ; DATA XREF: usage+1E4↑o
.rodata:000000000000911B                                         ; usage+2DC↑o ...
.rodata:0000000000009131 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1F5↑o
.rodata:000000000000913B aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+201↑o
.rodata:000000000000914A aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+194↑o
.rodata:0000000000009154 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1C0↑o
.rodata:000000000000915E aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1D8↑o
.rodata:0000000000009168 ; const char aSOnlineHelpS[]
.rodata:0000000000009168 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+24A↑o
.rodata:0000000000009168                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000917F unk_917F        db  47h ; G             ; DATA XREF: main+2E8↑o
.rodata:000000000000917F                                         ; usage+266↑o ...
.rodata:0000000000009180                 db  4Eh ; N
.rodata:0000000000009181                 db  55h ; U
.rodata:0000000000009182                 db  20h
.rodata:0000000000009183 ; const char domainname[]
.rodata:0000000000009183 domainname      db 'coreutils',0        ; DATA XREF: main+59↑o
.rodata:0000000000009183                                         ; main+65↑o ...
.rodata:000000000000918D ; const char s2[]
.rodata:000000000000918D s2              db 'en_',0              ; DATA XREF: usage+28D↑o
.rodata:000000000000918D                                         ; usage+34E↑o
.rodata:0000000000009191 ; const char aFullDocumentat[]
.rodata:0000000000009191 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000009191                                         ; DATA XREF: usage:loc_2FF9↑o
.rodata:0000000000009191                                         ; usage:loc_30B6↑o
.rodata:00000000000091AC ; const char dirname[]
.rodata:00000000000091AC dirname         db '/usr/local/share/locale',0
.rodata:00000000000091AC                                         ; DATA XREF: main+52↑o
.rodata:00000000000091C4 ; const char aMultipleIOptio[]
.rodata:00000000000091C4 aMultipleIOptio db 'multiple -i options specified',0
.rodata:00000000000091C4                                         ; DATA XREF: main:loc_2C13↑o
.rodata:00000000000091E2 ; const char msgid[]
.rodata:00000000000091E2 msgid           db 'invalid input range',0
.rodata:00000000000091E2                                         ; DATA XREF: main+17B↑o
.rodata:00000000000091E2                                         ; main+1BA↑o ...
.rodata:00000000000091F6 ; const char format[]
.rodata:00000000000091F6 format          db '%s: %s',0           ; DATA XREF: main+3A0↑o
.rodata:00000000000091F6                                         ; close_stdout+6C↑o ...
.rodata:00000000000091FD ; const char aInvalidLineCou[]
.rodata:00000000000091FD aInvalidLineCou db 'invalid line count: %s',0
.rodata:00000000000091FD                                         ; DATA XREF: main+31C↑o
.rodata:0000000000009214 aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: main+2E1↑o
.rodata:0000000000009220 ; const char shortopts[]
.rodata:0000000000009220 shortopts       db 'ei:n:o:rz',0        ; DATA XREF: main+AF↑o
.rodata:000000000000922A ; const char aExtraOperandS[]
.rodata:000000000000922A aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+C3A↑o
.rodata:000000000000923B ; const char aTooManyInputLi[]
.rodata:000000000000923B aTooManyInputLi db 'too many input lines',0
.rodata:000000000000923B                                         ; DATA XREF: main:loc_2BC8↑o
.rodata:0000000000009250 ; const char aNoLinesToRepea[]
.rodata:0000000000009250 aNoLinesToRepea db 'no lines to repeat',0
.rodata:0000000000009250                                         ; DATA XREF: main:loc_2B78↑o
.rodata:0000000000009250                                         ; .data.rel.ro:000000000020CAA0↓o
.rodata:0000000000009263 aLuC            db '%lu%c',0            ; DATA XREF: main+622↑o
.rodata:0000000000009263                                         ; main+7AA↑o ...
.rodata:0000000000009269 ; const char aWriteError[]
.rodata:0000000000009269 aWriteError     db 'write error',0      ; DATA XREF: main:loc_260C↑o
.rodata:0000000000009269                                         ; close_stdout:loc_3193↑o
.rodata:0000000000009275 aW              db 'w',0                ; DATA XREF: main+762↑o
.rodata:0000000000009275                                         ; main+AD4↑o
.rodata:0000000000009277 aEcho           db 'echo',0             ; DATA XREF: .data.rel.ro:long_opts↓o
.rodata:000000000000927C aInputRange     db 'input-range',0      ; DATA XREF: .data.rel.ro:000000000020CA20↓o
.rodata:0000000000009288 aHeadCount      db 'head-count',0       ; DATA XREF: .data.rel.ro:000000000020CA40↓o
.rodata:0000000000009293 aOutput         db 'output',0           ; DATA XREF: .data.rel.ro:000000000020CA60↓o
.rodata:000000000000929A aRandomSource   db 'random-source',0    ; DATA XREF: .data.rel.ro:000000000020CA80↓o
.rodata:00000000000092A8 aZeroTerminated db 'zero-terminated',0  ; DATA XREF: .data.rel.ro:000000000020CAC0↓o
.rodata:00000000000092B8 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020CAE0↓o
.rodata:00000000000092BD aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020CB00↓o
.rodata:00000000000092C5                 align 8
.rodata:00000000000092C8 ; const char aTrySHelpForMor[]
.rodata:00000000000092C8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000092C8                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000092EF                 align 10h
.rodata:00000000000092F0 ; const char aUsageSOptionFi[]
.rodata:00000000000092F0 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]',0Ah
.rodata:00000000000092F0                                         ; DATA XREF: usage:loc_2DAD↑o
.rodata:00000000000092F0                 db '  or:  %s -e [OPTION]... [ARG]...',0Ah
.rodata:00000000000092F0                 db '  or:  %s -i LO-HI [OPTION]...',0Ah,0
.rodata:000000000000934F                 align 10h
.rodata:0000000000009350 ; const char aWriteARandomPe[]
.rodata:0000000000009350 aWriteARandomPe db 'Write a random permutation of the input lines to standard output.'
.rodata:0000000000009350                                         ; DATA XREF: usage+8A↑o
.rodata:0000000000009350                 db 0Ah,0
.rodata:0000000000009393                 align 8
.rodata:0000000000009398 ; const char aWithNoFileOrWh[]
.rodata:0000000000009398 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+AF↑o
.rodata:0000000000009398                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:00000000000093D0 ; const char aMandatoryArgum[]
.rodata:00000000000093D0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+D4↑o
.rodata:00000000000093D0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:00000000000093D0                 db 'ns too.',0Ah,0
.rodata:000000000000941B                 align 20h
.rodata:0000000000009420 ; const char aEEchoTreatEach[]
.rodata:0000000000009420 aEEchoTreatEach db '  -e, --echo                treat each ARG as an input line',0Ah
.rodata:0000000000009420                                         ; DATA XREF: usage+F9↑o
.rodata:0000000000009420                 db '  -i, --input-range=LO-HI   treat each number LO through HI as an'
.rodata:0000000000009420                 db ' input line',0Ah
.rodata:0000000000009420                 db '  -n, --head-count=COUNT    output at most COUNT lines',0Ah
.rodata:0000000000009420                 db '  -o, --output=FILE         write result to FILE instead of stand'
.rodata:0000000000009420                 db 'ard output',0Ah
.rodata:0000000000009420                 db '      --random-source=FILE  get random bytes from FILE',0Ah
.rodata:0000000000009420                 db '  -r, --repeat              output lines can be repeated',0Ah,0
.rodata:000000000000959D                 align 20h
.rodata:00000000000095A0 ; const char aZZeroTerminate[]
.rodata:00000000000095A0 aZZeroTerminate db '  -z, --zero-terminated     line delimiter is NUL, not newline',0Ah
.rodata:00000000000095A0                                         ; DATA XREF: usage+11E↑o
.rodata:00000000000095A0                 db 0
.rodata:00000000000095E0 ; const char aHelpDisplayThi[]
.rodata:00000000000095E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000095E0                                         ; DATA XREF: usage+143↑o
.rodata:000000000000960D                 align 10h
.rodata:0000000000009610 ; const char aVersionOutputV[]
.rodata:0000000000009610 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000009610                                         ; DATA XREF: usage+168↑o
.rodata:0000000000009646                 align 8
.rodata:0000000000009648 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000009648                                         ; DATA XREF: usage+25F↑o
.rodata:0000000000009648                                         ; usage+2C3↑o ...
.rodata:0000000000009670 ; const char aReportAnyTrans[]
.rodata:0000000000009670 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000009670                                         ; DATA XREF: usage+3B7↑o
.rodata:0000000000009670                 db 'am/>',0Ah,0
.rodata:00000000000096B7                 align 8
.rodata:00000000000096B8 ; const char aOrAvailableLoc[]
.rodata:00000000000096B8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000096B8                                         ; DATA XREF: usage:loc_303E↑o
.rodata:00000000000096EB                 align 10h
.rodata:00000000000096F0 ; const char aMultipleOutput[]
.rodata:00000000000096F0 aMultipleOutput db 'multiple output files specified',0
.rodata:00000000000096F0                                         ; DATA XREF: main:loc_2A7A↑o
.rodata:0000000000009710 ; const char aMultipleRandom[]
.rodata:0000000000009710 aMultipleRandom db 'multiple random sources specified',0
.rodata:0000000000009710                                         ; DATA XREF: main:loc_2BEF↑o
.rodata:0000000000009732                 align 8
.rodata:0000000000009738 ; const char aCannotCombineE[]
.rodata:0000000000009738 aCannotCombineE db 'cannot combine -e and -i options',0
.rodata:0000000000009738                                         ; DATA XREF: main:loc_29C1↑o
.rodata:0000000000009759 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000975E ; const char file[]
.rodata:000000000000975E file            db '/dev/null',0        ; DATA XREF: protect_fd+4↑o
.rodata:0000000000009768 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000009768                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000097A0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000097A8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000097A8                                         ; main+413↑o
.rodata:00000000000097AC unk_97AC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000097AD                 db  80h
.rodata:00000000000097AE                 db  98h
.rodata:00000000000097AF                 db    0
.rodata:00000000000097B0 unk_97B0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000097B1                 db  80h
.rodata:00000000000097B2                 db  99h
.rodata:00000000000097B3                 db    0
.rodata:00000000000097B4 unk_97B4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000097B5                 db    7
.rodata:00000000000097B6                 db  65h ; e
.rodata:00000000000097B7                 db    0
.rodata:00000000000097B8 unk_97B8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000097B9                 db 0AFh
.rodata:00000000000097BA                 db    0
.rodata:00000000000097BB unk_97BB        db  22h ; "             ; DATA XREF: gettext_quote:loc_3640↑o
.rodata:00000000000097BB                                         ; quotearg_buffer_restyled:loc_43FB↑o ...
.rodata:00000000000097BC                 db    0
.rodata:00000000000097BD ; const char asc_97BD[2]
.rodata:00000000000097BD asc_97BD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000097BD                                         ; quotearg_buffer_restyled:loc_37C3↑o ...
.rodata:00000000000097BF ; const char asc_97BF[2]
.rodata:00000000000097BF asc_97BF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000097BF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000097C1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000097C9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020CB48↓o
.rodata:00000000000097CF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020CB50↓o
.rodata:00000000000097DC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020CB58↓o
.rodata:00000000000097DC                                         ; .data.rel.ro:000000000020CB78↓o
.rodata:00000000000097E9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000097E9                                         ; DATA XREF: .data.rel.ro:000000000020CB60↓o
.rodata:00000000000097FD aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020CB70↓o
.rodata:0000000000009805 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020CB88↓o
.rodata:000000000000980D                 align 20h
.rodata:0000000000009820 jpt_37A1        dd offset loc_454A - 9820h
.rodata:0000000000009820                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000009820                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000009820                 dd offset loc_37A3 - 9820h ; jump table for switch statement
.rodata:0000000000009820                 dd offset loc_4778 - 9820h
.rodata:0000000000009820                 dd offset loc_4584 - 9820h
.rodata:0000000000009820                 dd offset loc_4374 - 9820h
.rodata:0000000000009820                 dd offset loc_43D0 - 9820h
.rodata:0000000000009820                 dd offset loc_4425 - 9820h
.rodata:0000000000009820                 dd offset loc_446A - 9820h
.rodata:0000000000009820                 dd offset loc_44A4 - 9820h
.rodata:0000000000009820                 dd offset loc_44A4 - 9820h
.rodata:0000000000009820                 dd offset loc_44A4 - 9820h
.rodata:000000000000984C jpt_38FE        dd offset loc_3B20 - 984Ch, offset def_38FE - 984Ch, offset def_38FE - 984Ch
.rodata:000000000000984C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000984C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000984C                 dd offset def_38FE - 984Ch, offset def_38FE - 984Ch, offset def_38FE - 984Ch ; jump table for switch statement
.rodata:000000000000984C                 dd offset def_38FE - 984Ch, offset loc_3B60 - 984Ch, offset loc_3A68 - 984Ch
.rodata:000000000000984C                 dd offset loc_3A28 - 984Ch, offset loc_3BF0 - 984Ch, offset loc_3BE0 - 984Ch
.rodata:000000000000984C                 dd offset loc_3BD0 - 984Ch, offset loc_3BC0 - 984Ch, offset def_38FE - 984Ch
.rodata:000000000000984C                 dd offset def_38FE - 984Ch, offset def_38FE - 984Ch, offset def_38FE - 984Ch
.rodata:000000000000984C                 dd offset def_38FE - 984Ch, offset def_38FE - 984Ch, offset def_38FE - 984Ch
.rodata:000000000000984C                 dd offset def_38FE - 984Ch, offset def_38FE - 984Ch, offset def_38FE - 984Ch
.rodata:000000000000984C                 dd offset def_38FE - 984Ch, offset def_38FE - 984Ch, offset def_38FE - 984Ch
.rodata:000000000000984C                 dd offset def_38FE - 984Ch, offset def_38FE - 984Ch, offset def_38FE - 984Ch
.rodata:000000000000984C                 dd offset def_38FE - 984Ch, offset def_38FE - 984Ch, offset loc_3BB0 - 984Ch
.rodata:000000000000984C                 dd offset loc_3BA0 - 984Ch, offset loc_3BA0 - 984Ch, offset loc_3B70 - 984Ch
.rodata:000000000000984C                 dd offset loc_3BA0 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3BA0 - 984Ch
.rodata:000000000000984C                 dd offset loc_3A03 - 984Ch, offset loc_3BA0 - 984Ch, offset loc_3BA0 - 984Ch
.rodata:000000000000984C                 dd offset loc_3BA0 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3BA0 - 984Ch
.rodata:000000000000984C                 dd offset loc_3BA0 - 984Ch, offset loc_3BA0 - 984Ch, offset loc_3BA0 - 984Ch
.rodata:000000000000984C                 dd offset loc_39D3 - 984Ch, offset def_38FE - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3BA0 - 984Ch, offset loc_3A78 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3BA0 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3BA0 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch, offset loc_3B48 - 984Ch
.rodata:000000000000984C                 dd offset loc_3903 - 984Ch, offset loc_3BA0 - 984Ch, offset loc_3903 - 984Ch
.rodata:000000000000984C                 dd offset loc_3B70 - 984Ch
.rodata:0000000000009A48 jpt_3C8A        dd offset loc_3CF0 - 9A48h, offset def_3C8A - 9A48h, offset def_3C8A - 9A48h
.rodata:0000000000009A48                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000009A48                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000009A48                 dd offset def_3C8A - 9A48h, offset def_3C8A - 9A48h, offset def_3C8A - 9A48h ; jump table for switch statement
.rodata:0000000000009A48                 dd offset def_3C8A - 9A48h, offset loc_3CE0 - 9A48h, offset loc_3E30 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3E18 - 9A48h, offset loc_3CC8 - 9A48h, offset loc_3E08 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3CB0 - 9A48h, offset loc_3DF0 - 9A48h, offset def_3C8A - 9A48h
.rodata:0000000000009A48                 dd offset def_3C8A - 9A48h, offset def_3C8A - 9A48h, offset def_3C8A - 9A48h
.rodata:0000000000009A48                 dd offset def_3C8A - 9A48h, offset def_3C8A - 9A48h, offset def_3C8A - 9A48h
.rodata:0000000000009A48                 dd offset def_3C8A - 9A48h, offset def_3C8A - 9A48h, offset def_3C8A - 9A48h
.rodata:0000000000009A48                 dd offset def_3C8A - 9A48h, offset def_3C8A - 9A48h, offset def_3C8A - 9A48h
.rodata:0000000000009A48                 dd offset def_3C8A - 9A48h, offset def_3C8A - 9A48h, offset def_3C8A - 9A48h
.rodata:0000000000009A48                 dd offset def_3C8A - 9A48h, offset def_3C8A - 9A48h, offset loc_3DD8 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3DC0 - 9A48h, offset loc_3DC0 - 9A48h, offset loc_3DA8 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3DC0 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3DC0 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3A00 - 9A48h, offset loc_3DC0 - 9A48h, offset loc_3DC0 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3DC0 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3DC0 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3DC0 - 9A48h, offset loc_3DC0 - 9A48h, offset loc_3DC0 - 9A48h
.rodata:0000000000009A48                 dd offset loc_39D0 - 9A48h, offset def_3C8A - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3DC0 - 9A48h, offset loc_3C90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3DC0 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3DC0 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h, offset loc_3D90 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3900 - 9A48h, offset loc_3DC0 - 9A48h, offset loc_3900 - 9A48h
.rodata:0000000000009A48                 dd offset loc_3DA8 - 9A48h
.rodata:0000000000009C44                 align 20h
.rodata:0000000000009C60                 public quoting_style_vals
.rodata:0000000000009C60 quoting_style_vals db    0
.rodata:0000000000009C61                 db    0
.rodata:0000000000009C62                 db    0
.rodata:0000000000009C63                 db    0
.rodata:0000000000009C64                 db    1
.rodata:0000000000009C65                 db    0
.rodata:0000000000009C66                 db    0
.rodata:0000000000009C67                 db    0
.rodata:0000000000009C68                 db    2
.rodata:0000000000009C69                 db    0
.rodata:0000000000009C6A                 db    0
.rodata:0000000000009C6B                 db    0
.rodata:0000000000009C6C                 db    3
.rodata:0000000000009C6D                 db    0
.rodata:0000000000009C6E                 db    0
.rodata:0000000000009C6F                 db    0
.rodata:0000000000009C70                 db    4
.rodata:0000000000009C71                 db    0
.rodata:0000000000009C72                 db    0
.rodata:0000000000009C73                 db    0
.rodata:0000000000009C74                 db    5
.rodata:0000000000009C75                 db    0
.rodata:0000000000009C76                 db    0
.rodata:0000000000009C77                 db    0
.rodata:0000000000009C78                 db    6
.rodata:0000000000009C79                 db    0
.rodata:0000000000009C7A                 db    0
.rodata:0000000000009C7B                 db    0
.rodata:0000000000009C7C                 db    7
.rodata:0000000000009C7D                 db    0
.rodata:0000000000009C7E                 db    0
.rodata:0000000000009C7F                 db    0
.rodata:0000000000009C80                 db    8
.rodata:0000000000009C81                 db    0
.rodata:0000000000009C82                 db    0
.rodata:0000000000009C83                 db    0
.rodata:0000000000009C84                 db    9
.rodata:0000000000009C85                 db    0
.rodata:0000000000009C86                 db    0
.rodata:0000000000009C87                 db    0
.rodata:0000000000009C88 ; const char aSEndOfFile[]
.rodata:0000000000009C88 aSEndOfFile     db '%s: end of file',0  ; DATA XREF: randread_error:loc_58BD↑o
.rodata:0000000000009C98 ; const char aS[4]
.rodata:0000000000009C98 aS              db '%s: '               ; DATA XREF: randread_error+25↑o
.rodata:0000000000009C9C ; const char aReadError[]
.rodata:0000000000009C9C aReadError      db 'read error',0       ; DATA XREF: main:loc_2B16↑o
.rodata:0000000000009C9C                                         ; main:loc_2B4C↑o ...
.rodata:0000000000009CA7 ; const char aDevUrandom[]
.rodata:0000000000009CA7 aDevUrandom     db '/dev/urandom',0     ; DATA XREF: randread_new+CB↑o
.rodata:0000000000009CB4 aRb             db 'rb',0               ; DATA XREF: randread_new+32↑o
.rodata:0000000000009CB4                                         ; read_binary_file↑o
.rodata:0000000000009CB7 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000009CC3 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000009CCA ; const char aC_0[]
.rodata:0000000000009CCA aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_659C↑o
.rodata:0000000000009CCE ; const char aWrittenByS[]
.rodata:0000000000009CCE aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000009CCE                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000009CDE ; const char aWrittenBySAndS[]
.rodata:0000000000009CDE aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000009CDE                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000009CF5 ; const char aWrittenBySSAnd[]
.rodata:0000000000009CF5 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000009CF5                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000009D11 ; const char aReportBugsToS[]
.rodata:0000000000009D11 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000009D11                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000009D26 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000009D26                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000009D3C ; const char aSHomePageS[]
.rodata:0000000000009D3C aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000009D3C                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000009D50 ; const char aLicenseGplv3Gn[]
.rodata:0000000000009D50 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000009D50                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000009D50                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000009D50                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000009D50                 db '.',0Ah
.rodata:0000000000009D50                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000009D50                 db 0Ah,0
.rodata:0000000000009E1C                 align 20h
.rodata:0000000000009E20 ; const char aWrittenBySSSAn[]
.rodata:0000000000009E20 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009E20                                         ; DATA XREF: version_etc_arn:loc_67F0↑o
.rodata:0000000000009E20                 db 'and %s.',0Ah,0
.rodata:0000000000009E40 ; const char aWrittenBySSSSA[]
.rodata:0000000000009E40 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009E40                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000009E40                 db '%s, and %s.',0Ah,0
.rodata:0000000000009E64                 align 8
.rodata:0000000000009E68 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000009E68 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009E68                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000009E68                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000009E90 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000009E90 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009E90                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000009E90                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000009EBC                 align 20h
.rodata:0000000000009EC0 ; const char aWrittenBySSSSS[]
.rodata:0000000000009EC0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009EC0                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000009EC0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009EC0                 db 'and %s.',0Ah,0
.rodata:0000000000009EF0 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000009EF0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009EF0                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000009EF0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009EF0                 db '%s, and %s.',0Ah,0
.rodata:0000000000009F24                 align 8
.rodata:0000000000009F28 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009F28                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000009F28                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009F28                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000009F64                 align 8
.rodata:0000000000009F68 ; const char aGeneralHelpUsi[]
.rodata:0000000000009F68 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000009F68                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000009F68                 db 0
.rodata:0000000000009FA9                 align 4
.rodata:0000000000009FAC jpt_6604        dd offset loc_6686 - 9FACh
.rodata:0000000000009FAC                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000009FAC                                         ; version_etc_arn+9D↑r
.rodata:0000000000009FAC                 dd offset loc_6718 - 9FACh ; jump table for switch statement
.rodata:0000000000009FAC                 dd offset loc_6758 - 9FACh
.rodata:0000000000009FAC                 dd offset loc_67A0 - 9FACh
.rodata:0000000000009FAC                 dd offset loc_67F0 - 9FACh
.rodata:0000000000009FAC                 dd offset loc_6848 - 9FACh
.rodata:0000000000009FAC                 dd offset loc_6878 - 9FACh
.rodata:0000000000009FAC                 dd offset loc_68E0 - 9FACh
.rodata:0000000000009FAC                 dd offset loc_6610 - 9FACh
.rodata:0000000000009FAC                 dd offset loc_66C0 - 9FACh
.rodata:0000000000009FD4                 align 20h
.rodata:0000000000009FE0                 public version_etc_copyright
.rodata:0000000000009FE0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000009FE0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000A00F ; const char aMemoryExhauste[]
.rodata:000000000000A00F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000A020 ; const char aCoreutils831Li[]
.rodata:000000000000A020 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000A020                                         ; DATA XREF: xstrtoul+38C↑o
.rodata:000000000000A020                                         ; xstrtoumax+38C↑o
.rodata:000000000000A040 ; const char assertion[]
.rodata:000000000000A040 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000A040                                         ; DATA XREF: xstrtoul+393↑o
.rodata:000000000000A040                                         ; xstrtoumax+393↑o
.rodata:000000000000A066                 align 8
.rodata:000000000000A068 jpt_7116        dd offset loc_7266 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:000000000000A068                                         ; xstrtoul+1CF↑r
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset loc_7243 - 0A068h ; jump table for switch statement
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset loc_727C - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset loc_71FF - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset loc_7118 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset loc_7220 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset loc_71DF - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset loc_71BA - 0A068h
.rodata:000000000000A068                 dd offset loc_7194 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset loc_717D - 0A068h, offset loc_7140 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset loc_727C - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset loc_71FF - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset loc_7118 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset loc_71DF - 0A068h, offset def_7116 - 0A068h
.rodata:000000000000A068                 dd offset def_7116 - 0A068h, offset loc_7167 - 0A068h
.rodata:000000000000A140 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000A140 __PRETTY_FUNCTION___4162 db 'xstrtoul',0
.rodata:000000000000A140                                         ; DATA XREF: xstrtoul:loc_72C5↑o
.rodata:000000000000A149                 align 10h
.rodata:000000000000A150 jpt_7536        dd offset loc_7686 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000000A150                                         ; xstrtoumax+1CF↑r
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset loc_7663 - 0A150h ; jump table for switch statement
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset loc_769C - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset loc_761F - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset loc_7538 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset loc_7640 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset loc_75FF - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset loc_75DA - 0A150h
.rodata:000000000000A150                 dd offset loc_75B4 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset loc_759D - 0A150h, offset loc_7560 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset loc_769C - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset loc_761F - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset loc_7538 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset loc_75FF - 0A150h, offset def_7536 - 0A150h
.rodata:000000000000A150                 dd offset def_7536 - 0A150h, offset loc_7587 - 0A150h
.rodata:000000000000A228 ; const char _PRETTY_FUNCTION___4162_0[]
.rodata:000000000000A228 __PRETTY_FUNCTION___4162_0 db 'xstrtoumax',0
.rodata:000000000000A228                                         ; DATA XREF: xstrtoumax:loc_76E5↑o
.rodata:000000000000A233 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000A235 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_7A90↑o
.rodata:000000000000A23B aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:000000000000A23B                                         ; DATA XREF: hash_print_statistics:loc_7FC5↑o
.rodata:000000000000A253 aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000000A253                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000000A26B aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000000A26B                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:000000000000A283                 align 8
.rodata:000000000000A288 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:000000000000A288                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:000000000000A2A9                 align 10h
.rodata:000000000000A2B0 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:000000000000A2B0                                         ; hash_initialize:loc_8430↑o
.rodata:000000000000A2B1                 db    0
.rodata:000000000000A2B2                 db    0
.rodata:000000000000A2B3                 db    0
.rodata:000000000000A2B4                 db    0
.rodata:000000000000A2B5                 db    0
.rodata:000000000000A2B6                 db  80h
.rodata:000000000000A2B7                 db  3Fh ; ?
.rodata:000000000000A2B8                 db 0CDh
.rodata:000000000000A2B9                 db 0CCh
.rodata:000000000000A2BA                 db  4Ch ; L
.rodata:000000000000A2BB                 db  3Fh ; ?
.rodata:000000000000A2BC                 db 0F4h
.rodata:000000000000A2BD                 db 0FDh
.rodata:000000000000A2BE                 db 0B4h
.rodata:000000000000A2BF                 db  3Fh ; ?
.rodata:000000000000A2C0                 db    0
.rodata:000000000000A2C1                 db    0
.rodata:000000000000A2C2                 db    0
.rodata:000000000000A2C3                 db    0
.rodata:000000000000A2C4 dword_A2C4      dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:000000000000A2C4                                         ; check_tuning+4A↑r
.rodata:000000000000A2C8 dword_A2C8      dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000000A2CC dword_A2CC      dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:000000000000A2D0 dword_A2D0      dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:000000000000A2D4 dword_A2D4      dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:000000000000A2D8 dword_A2D8      dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000000A2DC dword_A2DC      dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000000A2DC                                         ; hash_rehash+40↑r ...
.rodata:000000000000A2E0 dword_A2E0      dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:000000000000A2E0                                         ; hash_initialize+150↑r ...
.rodata:000000000000A2E4                 align 8
.rodata:000000000000A2E8 qword_A2E8      dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:000000000000A2E8                                         ; hash_print_statistics+11F↑r
.rodata:000000000000A2F0 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000A2F0                                         ; locale_charset:loc_8DC0↑o
.rodata:000000000000A2F0 _rodata         ends
.rodata:000000000000A2F0
LOAD:000000000000A2F6 ; ===========================================================================
LOAD:000000000000A2F6
LOAD:000000000000A2F6 ; Segment type: Pure code
LOAD:000000000000A2F6 ; Segment permissions: Read/Execute
LOAD:000000000000A2F6 LOAD            segment byte public 'CODE' use64
LOAD:000000000000A2F6                 assume cs:LOAD
LOAD:000000000000A2F6                 ;org 0A2F6h
LOAD:000000000000A2F6                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000A2F6                 align 8
LOAD:000000000000A2F6 LOAD            ends
LOAD:000000000000A2F6
.eh_frame_hdr:000000000000A2F8 ; ===========================================================================
.eh_frame_hdr:000000000000A2F8
.eh_frame_hdr:000000000000A2F8 ; Segment type: Pure data
.eh_frame_hdr:000000000000A2F8 ; Segment permissions: Read
.eh_frame_hdr:000000000000A2F8 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000A2F8                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000A2F8                 ;org 0A2F8h
.eh_frame_hdr:000000000000A2F8 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000A2F9                 db  1Bh
.eh_frame_hdr:000000000000A2FA                 db    3
.eh_frame_hdr:000000000000A2FB                 db  3Bh ; ;
.eh_frame_hdr:000000000000A2FC                 db  3Ch ; <
.eh_frame_hdr:000000000000A2FD                 db    4
.eh_frame_hdr:000000000000A2FE                 db    0
.eh_frame_hdr:000000000000A2FF                 db    0
.eh_frame_hdr:000000000000A300                 db  86h
.eh_frame_hdr:000000000000A301                 db    0
.eh_frame_hdr:000000000000A302                 db    0
.eh_frame_hdr:000000000000A303                 db    0
.eh_frame_hdr:000000000000A304                 db  88h
.eh_frame_hdr:000000000000A305                 db  76h ; v
.eh_frame_hdr:000000000000A306                 db 0FFh
.eh_frame_hdr:000000000000A307                 db 0FFh
.eh_frame_hdr:000000000000A308                 db  88h
.eh_frame_hdr:000000000000A309                 db    4
.eh_frame_hdr:000000000000A30A                 db    0
.eh_frame_hdr:000000000000A30B                 db    0
.eh_frame_hdr:000000000000A30C                 db 0D8h
.eh_frame_hdr:000000000000A30D                 db  7Ah ; z
.eh_frame_hdr:000000000000A30E                 db 0FFh
.eh_frame_hdr:000000000000A30F                 db 0FFh
.eh_frame_hdr:000000000000A310                 db 0B0h
.eh_frame_hdr:000000000000A311                 db    4
.eh_frame_hdr:000000000000A312                 db    0
.eh_frame_hdr:000000000000A313                 db    0
.eh_frame_hdr:000000000000A314                 db 0E8h
.eh_frame_hdr:000000000000A315                 db  7Ah ; z
.eh_frame_hdr:000000000000A316                 db 0FFh
.eh_frame_hdr:000000000000A317                 db 0FFh
.eh_frame_hdr:000000000000A318                 db 0F4h
.eh_frame_hdr:000000000000A319                 db    4
.eh_frame_hdr:000000000000A31A                 db    0
.eh_frame_hdr:000000000000A31B                 db    0
.eh_frame_hdr:000000000000A31C                 db  48h ; H
.eh_frame_hdr:000000000000A31D                 db  89h
.eh_frame_hdr:000000000000A31E                 db 0FFh
.eh_frame_hdr:000000000000A31F                 db 0FFh
.eh_frame_hdr:000000000000A320                 db  58h ; X
.eh_frame_hdr:000000000000A321                 db    4
.eh_frame_hdr:000000000000A322                 db    0
.eh_frame_hdr:000000000000A323                 db    0
.eh_frame_hdr:000000000000A324                 db  58h ; X
.eh_frame_hdr:000000000000A325                 db  8Ah
.eh_frame_hdr:000000000000A326                 db 0FFh
.eh_frame_hdr:000000000000A327                 db 0FFh
.eh_frame_hdr:000000000000A328                 db 0C8h
.eh_frame_hdr:000000000000A329                 db    4
.eh_frame_hdr:000000000000A32A                 db    0
.eh_frame_hdr:000000000000A32B                 db    0
.eh_frame_hdr:000000000000A32C                 db  38h ; 8
.eh_frame_hdr:000000000000A32D                 db  8Eh
.eh_frame_hdr:000000000000A32E                 db 0FFh
.eh_frame_hdr:000000000000A32F                 db 0FFh
.eh_frame_hdr:000000000000A330                 db  48h ; H
.eh_frame_hdr:000000000000A331                 db    5
.eh_frame_hdr:000000000000A332                 db    0
.eh_frame_hdr:000000000000A333                 db    0
.eh_frame_hdr:000000000000A334                 db  48h ; H
.eh_frame_hdr:000000000000A335                 db  8Eh
.eh_frame_hdr:000000000000A336                 db 0FFh
.eh_frame_hdr:000000000000A337                 db 0FFh
.eh_frame_hdr:000000000000A338                 db  5Ch ; \
.eh_frame_hdr:000000000000A339                 db    5
.eh_frame_hdr:000000000000A33A                 db    0
.eh_frame_hdr:000000000000A33B                 db    0
.eh_frame_hdr:000000000000A33C                 db  58h ; X
.eh_frame_hdr:000000000000A33D                 db  8Eh
.eh_frame_hdr:000000000000A33E                 db 0FFh
.eh_frame_hdr:000000000000A33F                 db 0FFh
.eh_frame_hdr:000000000000A340                 db  70h ; p
.eh_frame_hdr:000000000000A341                 db    5
.eh_frame_hdr:000000000000A342                 db    0
.eh_frame_hdr:000000000000A343                 db    0
.eh_frame_hdr:000000000000A344                 db    8
.eh_frame_hdr:000000000000A345                 db  8Fh
.eh_frame_hdr:000000000000A346                 db 0FFh
.eh_frame_hdr:000000000000A347                 db 0FFh
.eh_frame_hdr:000000000000A348                 db 0A0h
.eh_frame_hdr:000000000000A349                 db    5
.eh_frame_hdr:000000000000A34A                 db    0
.eh_frame_hdr:000000000000A34B                 db    0
.eh_frame_hdr:000000000000A34C                 db  18h
.eh_frame_hdr:000000000000A34D                 db  8Fh
.eh_frame_hdr:000000000000A34E                 db 0FFh
.eh_frame_hdr:000000000000A34F                 db 0FFh
.eh_frame_hdr:000000000000A350                 db 0B4h
.eh_frame_hdr:000000000000A351                 db    5
.eh_frame_hdr:000000000000A352                 db    0
.eh_frame_hdr:000000000000A353                 db    0
.eh_frame_hdr:000000000000A354                 db  48h ; H
.eh_frame_hdr:000000000000A355                 db  8Fh
.eh_frame_hdr:000000000000A356                 db 0FFh
.eh_frame_hdr:000000000000A357                 db 0FFh
.eh_frame_hdr:000000000000A358                 db 0D0h
.eh_frame_hdr:000000000000A359                 db    5
.eh_frame_hdr:000000000000A35A                 db    0
.eh_frame_hdr:000000000000A35B                 db    0
.eh_frame_hdr:000000000000A35C                 db  98h
.eh_frame_hdr:000000000000A35D                 db  8Fh
.eh_frame_hdr:000000000000A35E                 db 0FFh
.eh_frame_hdr:000000000000A35F                 db 0FFh
.eh_frame_hdr:000000000000A360                 db 0F8h
.eh_frame_hdr:000000000000A361                 db    5
.eh_frame_hdr:000000000000A362                 db    0
.eh_frame_hdr:000000000000A363                 db    0
.eh_frame_hdr:000000000000A364                 db  48h ; H
.eh_frame_hdr:000000000000A365                 db  91h
.eh_frame_hdr:000000000000A366                 db 0FFh
.eh_frame_hdr:000000000000A367                 db 0FFh
.eh_frame_hdr:000000000000A368                 db  48h ; H
.eh_frame_hdr:000000000000A369                 db    6
.eh_frame_hdr:000000000000A36A                 db    0
.eh_frame_hdr:000000000000A36B                 db    0
.eh_frame_hdr:000000000000A36C                 db  58h ; X
.eh_frame_hdr:000000000000A36D                 db  91h
.eh_frame_hdr:000000000000A36E                 db 0FFh
.eh_frame_hdr:000000000000A36F                 db 0FFh
.eh_frame_hdr:000000000000A370                 db  5Ch ; \
.eh_frame_hdr:000000000000A371                 db    6
.eh_frame_hdr:000000000000A372                 db    0
.eh_frame_hdr:000000000000A373                 db    0
.eh_frame_hdr:000000000000A374                 db  68h ; h
.eh_frame_hdr:000000000000A375                 db  92h
.eh_frame_hdr:000000000000A376                 db 0FFh
.eh_frame_hdr:000000000000A377                 db 0FFh
.eh_frame_hdr:000000000000A378                 db 0C0h
.eh_frame_hdr:000000000000A379                 db    6
.eh_frame_hdr:000000000000A37A                 db    0
.eh_frame_hdr:000000000000A37B                 db    0
.eh_frame_hdr:000000000000A37C                 db  78h ; x
.eh_frame_hdr:000000000000A37D                 db  92h
.eh_frame_hdr:000000000000A37E                 db 0FFh
.eh_frame_hdr:000000000000A37F                 db 0FFh
.eh_frame_hdr:000000000000A380                 db 0D4h
.eh_frame_hdr:000000000000A381                 db    6
.eh_frame_hdr:000000000000A382                 db    0
.eh_frame_hdr:000000000000A383                 db    0
.eh_frame_hdr:000000000000A384                 db  88h
.eh_frame_hdr:000000000000A385                 db  92h
.eh_frame_hdr:000000000000A386                 db 0FFh
.eh_frame_hdr:000000000000A387                 db 0FFh
.eh_frame_hdr:000000000000A388                 db 0E8h
.eh_frame_hdr:000000000000A389                 db    6
.eh_frame_hdr:000000000000A38A                 db    0
.eh_frame_hdr:000000000000A38B                 db    0
.eh_frame_hdr:000000000000A38C                 db  28h ; (
.eh_frame_hdr:000000000000A38D                 db  93h
.eh_frame_hdr:000000000000A38E                 db 0FFh
.eh_frame_hdr:000000000000A38F                 db 0FFh
.eh_frame_hdr:000000000000A390                 db    8
.eh_frame_hdr:000000000000A391                 db    7
.eh_frame_hdr:000000000000A392                 db    0
.eh_frame_hdr:000000000000A393                 db    0
.eh_frame_hdr:000000000000A394                 db  18h
.eh_frame_hdr:000000000000A395                 db  94h
.eh_frame_hdr:000000000000A396                 db 0FFh
.eh_frame_hdr:000000000000A397                 db 0FFh
.eh_frame_hdr:000000000000A398                 db  4Ch ; L
.eh_frame_hdr:000000000000A399                 db    7
.eh_frame_hdr:000000000000A39A                 db    0
.eh_frame_hdr:000000000000A39B                 db    0
.eh_frame_hdr:000000000000A39C                 db  58h ; X
.eh_frame_hdr:000000000000A39D                 db 0A6h
.eh_frame_hdr:000000000000A39E                 db 0FFh
.eh_frame_hdr:000000000000A39F                 db 0FFh
.eh_frame_hdr:000000000000A3A0                 db 0C4h
.eh_frame_hdr:000000000000A3A1                 db    7
.eh_frame_hdr:000000000000A3A2                 db    0
.eh_frame_hdr:000000000000A3A3                 db    0
.eh_frame_hdr:000000000000A3A4                 db    8
.eh_frame_hdr:000000000000A3A5                 db 0A8h
.eh_frame_hdr:000000000000A3A6                 db 0FFh
.eh_frame_hdr:000000000000A3A7                 db 0FFh
.eh_frame_hdr:000000000000A3A8                 db  30h ; 0
.eh_frame_hdr:000000000000A3A9                 db    8
.eh_frame_hdr:000000000000A3AA                 db    0
.eh_frame_hdr:000000000000A3AB                 db    0
.eh_frame_hdr:000000000000A3AC                 db  48h ; H
.eh_frame_hdr:000000000000A3AD                 db 0A8h
.eh_frame_hdr:000000000000A3AE                 db 0FFh
.eh_frame_hdr:000000000000A3AF                 db 0FFh
.eh_frame_hdr:000000000000A3B0                 db  5Ch ; \
.eh_frame_hdr:000000000000A3B1                 db    8
.eh_frame_hdr:000000000000A3B2                 db    0
.eh_frame_hdr:000000000000A3B3                 db    0
.eh_frame_hdr:000000000000A3B4                 db  68h ; h
.eh_frame_hdr:000000000000A3B5                 db 0A8h
.eh_frame_hdr:000000000000A3B6                 db 0FFh
.eh_frame_hdr:000000000000A3B7                 db 0FFh
.eh_frame_hdr:000000000000A3B8                 db  70h ; p
.eh_frame_hdr:000000000000A3B9                 db    8
.eh_frame_hdr:000000000000A3BA                 db    0
.eh_frame_hdr:000000000000A3BB                 db    0
.eh_frame_hdr:000000000000A3BC                 db  88h
.eh_frame_hdr:000000000000A3BD                 db 0A8h
.eh_frame_hdr:000000000000A3BE                 db 0FFh
.eh_frame_hdr:000000000000A3BF                 db 0FFh
.eh_frame_hdr:000000000000A3C0                 db  84h
.eh_frame_hdr:000000000000A3C1                 db    8
.eh_frame_hdr:000000000000A3C2                 db    0
.eh_frame_hdr:000000000000A3C3                 db    0
.eh_frame_hdr:000000000000A3C4                 db 0C8h
.eh_frame_hdr:000000000000A3C5                 db 0A8h
.eh_frame_hdr:000000000000A3C6                 db 0FFh
.eh_frame_hdr:000000000000A3C7                 db 0FFh
.eh_frame_hdr:000000000000A3C8                 db  98h
.eh_frame_hdr:000000000000A3C9                 db    8
.eh_frame_hdr:000000000000A3CA                 db    0
.eh_frame_hdr:000000000000A3CB                 db    0
.eh_frame_hdr:000000000000A3CC                 db 0E8h
.eh_frame_hdr:000000000000A3CD                 db 0A8h
.eh_frame_hdr:000000000000A3CE                 db 0FFh
.eh_frame_hdr:000000000000A3CF                 db 0FFh
.eh_frame_hdr:000000000000A3D0                 db 0ACh
.eh_frame_hdr:000000000000A3D1                 db    8
.eh_frame_hdr:000000000000A3D2                 db    0
.eh_frame_hdr:000000000000A3D3                 db    0
.eh_frame_hdr:000000000000A3D4                 db  18h
.eh_frame_hdr:000000000000A3D5                 db 0A9h
.eh_frame_hdr:000000000000A3D6                 db 0FFh
.eh_frame_hdr:000000000000A3D7                 db 0FFh
.eh_frame_hdr:000000000000A3D8                 db 0C0h
.eh_frame_hdr:000000000000A3D9                 db    8
.eh_frame_hdr:000000000000A3DA                 db    0
.eh_frame_hdr:000000000000A3DB                 db    0
.eh_frame_hdr:000000000000A3DC                 db  98h
.eh_frame_hdr:000000000000A3DD                 db 0A9h
.eh_frame_hdr:000000000000A3DE                 db 0FFh
.eh_frame_hdr:000000000000A3DF                 db 0FFh
.eh_frame_hdr:000000000000A3E0                 db  14h
.eh_frame_hdr:000000000000A3E1                 db    9
.eh_frame_hdr:000000000000A3E2                 db    0
.eh_frame_hdr:000000000000A3E3                 db    0
.eh_frame_hdr:000000000000A3E4                 db  88h
.eh_frame_hdr:000000000000A3E5                 db 0AAh
.eh_frame_hdr:000000000000A3E6                 db 0FFh
.eh_frame_hdr:000000000000A3E7                 db 0FFh
.eh_frame_hdr:000000000000A3E8                 db  80h
.eh_frame_hdr:000000000000A3E9                 db    9
.eh_frame_hdr:000000000000A3EA                 db    0
.eh_frame_hdr:000000000000A3EB                 db    0
.eh_frame_hdr:000000000000A3EC                 db  98h
.eh_frame_hdr:000000000000A3ED                 db 0AAh
.eh_frame_hdr:000000000000A3EE                 db 0FFh
.eh_frame_hdr:000000000000A3EF                 db 0FFh
.eh_frame_hdr:000000000000A3F0                 db  94h
.eh_frame_hdr:000000000000A3F1                 db    9
.eh_frame_hdr:000000000000A3F2                 db    0
.eh_frame_hdr:000000000000A3F3                 db    0
.eh_frame_hdr:000000000000A3F4                 db  38h ; 8
.eh_frame_hdr:000000000000A3F5                 db 0ABh
.eh_frame_hdr:000000000000A3F6                 db 0FFh
.eh_frame_hdr:000000000000A3F7                 db 0FFh
.eh_frame_hdr:000000000000A3F8                 db 0C0h
.eh_frame_hdr:000000000000A3F9                 db    9
.eh_frame_hdr:000000000000A3FA                 db    0
.eh_frame_hdr:000000000000A3FB                 db    0
.eh_frame_hdr:000000000000A3FC                 db  58h ; X
.eh_frame_hdr:000000000000A3FD                 db 0ABh
.eh_frame_hdr:000000000000A3FE                 db 0FFh
.eh_frame_hdr:000000000000A3FF                 db 0FFh
.eh_frame_hdr:000000000000A400                 db 0D4h
.eh_frame_hdr:000000000000A401                 db    9
.eh_frame_hdr:000000000000A402                 db    0
.eh_frame_hdr:000000000000A403                 db    0
.eh_frame_hdr:000000000000A404                 db  68h ; h
.eh_frame_hdr:000000000000A405                 db 0ABh
.eh_frame_hdr:000000000000A406                 db 0FFh
.eh_frame_hdr:000000000000A407                 db 0FFh
.eh_frame_hdr:000000000000A408                 db 0E8h
.eh_frame_hdr:000000000000A409                 db    9
.eh_frame_hdr:000000000000A40A                 db    0
.eh_frame_hdr:000000000000A40B                 db    0
.eh_frame_hdr:000000000000A40C                 db  88h
.eh_frame_hdr:000000000000A40D                 db 0ABh
.eh_frame_hdr:000000000000A40E                 db 0FFh
.eh_frame_hdr:000000000000A40F                 db 0FFh
.eh_frame_hdr:000000000000A410                 db 0FCh
.eh_frame_hdr:000000000000A411                 db    9
.eh_frame_hdr:000000000000A412                 db    0
.eh_frame_hdr:000000000000A413                 db    0
.eh_frame_hdr:000000000000A414                 db 0A8h
.eh_frame_hdr:000000000000A415                 db 0ABh
.eh_frame_hdr:000000000000A416                 db 0FFh
.eh_frame_hdr:000000000000A417                 db 0FFh
.eh_frame_hdr:000000000000A418                 db  10h
.eh_frame_hdr:000000000000A419                 db  0Ah
.eh_frame_hdr:000000000000A41A                 db    0
.eh_frame_hdr:000000000000A41B                 db    0
.eh_frame_hdr:000000000000A41C                 db  38h ; 8
.eh_frame_hdr:000000000000A41D                 db 0ACh
.eh_frame_hdr:000000000000A41E                 db 0FFh
.eh_frame_hdr:000000000000A41F                 db 0FFh
.eh_frame_hdr:000000000000A420                 db  2Ch ; ,
.eh_frame_hdr:000000000000A421                 db  0Ah
.eh_frame_hdr:000000000000A422                 db    0
.eh_frame_hdr:000000000000A423                 db    0
.eh_frame_hdr:000000000000A424                 db 0C8h
.eh_frame_hdr:000000000000A425                 db 0ACh
.eh_frame_hdr:000000000000A426                 db 0FFh
.eh_frame_hdr:000000000000A427                 db 0FFh
.eh_frame_hdr:000000000000A428                 db  48h ; H
.eh_frame_hdr:000000000000A429                 db  0Ah
.eh_frame_hdr:000000000000A42A                 db    0
.eh_frame_hdr:000000000000A42B                 db    0
.eh_frame_hdr:000000000000A42C                 db 0D8h
.eh_frame_hdr:000000000000A42D                 db 0ACh
.eh_frame_hdr:000000000000A42E                 db 0FFh
.eh_frame_hdr:000000000000A42F                 db 0FFh
.eh_frame_hdr:000000000000A430                 db  5Ch ; \
.eh_frame_hdr:000000000000A431                 db  0Ah
.eh_frame_hdr:000000000000A432                 db    0
.eh_frame_hdr:000000000000A433                 db    0
.eh_frame_hdr:000000000000A434                 db 0E8h
.eh_frame_hdr:000000000000A435                 db 0ACh
.eh_frame_hdr:000000000000A436                 db 0FFh
.eh_frame_hdr:000000000000A437                 db 0FFh
.eh_frame_hdr:000000000000A438                 db  70h ; p
.eh_frame_hdr:000000000000A439                 db  0Ah
.eh_frame_hdr:000000000000A43A                 db    0
.eh_frame_hdr:000000000000A43B                 db    0
.eh_frame_hdr:000000000000A43C                 db  88h
.eh_frame_hdr:000000000000A43D                 db 0ADh
.eh_frame_hdr:000000000000A43E                 db 0FFh
.eh_frame_hdr:000000000000A43F                 db 0FFh
.eh_frame_hdr:000000000000A440                 db  8Ch
.eh_frame_hdr:000000000000A441                 db  0Ah
.eh_frame_hdr:000000000000A442                 db    0
.eh_frame_hdr:000000000000A443                 db    0
.eh_frame_hdr:000000000000A444                 db  98h
.eh_frame_hdr:000000000000A445                 db 0ADh
.eh_frame_hdr:000000000000A446                 db 0FFh
.eh_frame_hdr:000000000000A447                 db 0FFh
.eh_frame_hdr:000000000000A448                 db 0A0h
.eh_frame_hdr:000000000000A449                 db  0Ah
.eh_frame_hdr:000000000000A44A                 db    0
.eh_frame_hdr:000000000000A44B                 db    0
.eh_frame_hdr:000000000000A44C                 db 0B8h
.eh_frame_hdr:000000000000A44D                 db 0ADh
.eh_frame_hdr:000000000000A44E                 db 0FFh
.eh_frame_hdr:000000000000A44F                 db 0FFh
.eh_frame_hdr:000000000000A450                 db 0B4h
.eh_frame_hdr:000000000000A451                 db  0Ah
.eh_frame_hdr:000000000000A452                 db    0
.eh_frame_hdr:000000000000A453                 db    0
.eh_frame_hdr:000000000000A454                 db 0C8h
.eh_frame_hdr:000000000000A455                 db 0ADh
.eh_frame_hdr:000000000000A456                 db 0FFh
.eh_frame_hdr:000000000000A457                 db 0FFh
.eh_frame_hdr:000000000000A458                 db 0C8h
.eh_frame_hdr:000000000000A459                 db  0Ah
.eh_frame_hdr:000000000000A45A                 db    0
.eh_frame_hdr:000000000000A45B                 db    0
.eh_frame_hdr:000000000000A45C                 db  58h ; X
.eh_frame_hdr:000000000000A45D                 db 0AEh
.eh_frame_hdr:000000000000A45E                 db 0FFh
.eh_frame_hdr:000000000000A45F                 db 0FFh
.eh_frame_hdr:000000000000A460                 db 0E4h
.eh_frame_hdr:000000000000A461                 db  0Ah
.eh_frame_hdr:000000000000A462                 db    0
.eh_frame_hdr:000000000000A463                 db    0
.eh_frame_hdr:000000000000A464                 db 0F8h
.eh_frame_hdr:000000000000A465                 db 0AEh
.eh_frame_hdr:000000000000A466                 db 0FFh
.eh_frame_hdr:000000000000A467                 db 0FFh
.eh_frame_hdr:000000000000A468                 db    0
.eh_frame_hdr:000000000000A469                 db  0Bh
.eh_frame_hdr:000000000000A46A                 db    0
.eh_frame_hdr:000000000000A46B                 db    0
.eh_frame_hdr:000000000000A46C                 db    8
.eh_frame_hdr:000000000000A46D                 db 0AFh
.eh_frame_hdr:000000000000A46E                 db 0FFh
.eh_frame_hdr:000000000000A46F                 db 0FFh
.eh_frame_hdr:000000000000A470                 db  14h
.eh_frame_hdr:000000000000A471                 db  0Bh
.eh_frame_hdr:000000000000A472                 db    0
.eh_frame_hdr:000000000000A473                 db    0
.eh_frame_hdr:000000000000A474                 db  28h ; (
.eh_frame_hdr:000000000000A475                 db 0AFh
.eh_frame_hdr:000000000000A476                 db 0FFh
.eh_frame_hdr:000000000000A477                 db 0FFh
.eh_frame_hdr:000000000000A478                 db  28h ; (
.eh_frame_hdr:000000000000A479                 db  0Bh
.eh_frame_hdr:000000000000A47A                 db    0
.eh_frame_hdr:000000000000A47B                 db    0
.eh_frame_hdr:000000000000A47C                 db  48h ; H
.eh_frame_hdr:000000000000A47D                 db 0AFh
.eh_frame_hdr:000000000000A47E                 db 0FFh
.eh_frame_hdr:000000000000A47F                 db 0FFh
.eh_frame_hdr:000000000000A480                 db  3Ch ; <
.eh_frame_hdr:000000000000A481                 db  0Bh
.eh_frame_hdr:000000000000A482                 db    0
.eh_frame_hdr:000000000000A483                 db    0
.eh_frame_hdr:000000000000A484                 db  58h ; X
.eh_frame_hdr:000000000000A485                 db 0AFh
.eh_frame_hdr:000000000000A486                 db 0FFh
.eh_frame_hdr:000000000000A487                 db 0FFh
.eh_frame_hdr:000000000000A488                 db  50h ; P
.eh_frame_hdr:000000000000A489                 db  0Bh
.eh_frame_hdr:000000000000A48A                 db    0
.eh_frame_hdr:000000000000A48B                 db    0
.eh_frame_hdr:000000000000A48C                 db  78h ; x
.eh_frame_hdr:000000000000A48D                 db 0AFh
.eh_frame_hdr:000000000000A48E                 db 0FFh
.eh_frame_hdr:000000000000A48F                 db 0FFh
.eh_frame_hdr:000000000000A490                 db  64h ; d
.eh_frame_hdr:000000000000A491                 db  0Bh
.eh_frame_hdr:000000000000A492                 db    0
.eh_frame_hdr:000000000000A493                 db    0
.eh_frame_hdr:000000000000A494                 db  98h
.eh_frame_hdr:000000000000A495                 db 0AFh
.eh_frame_hdr:000000000000A496                 db 0FFh
.eh_frame_hdr:000000000000A497                 db 0FFh
.eh_frame_hdr:000000000000A498                 db  78h ; x
.eh_frame_hdr:000000000000A499                 db  0Bh
.eh_frame_hdr:000000000000A49A                 db    0
.eh_frame_hdr:000000000000A49B                 db    0
.eh_frame_hdr:000000000000A49C                 db 0B8h
.eh_frame_hdr:000000000000A49D                 db 0AFh
.eh_frame_hdr:000000000000A49E                 db 0FFh
.eh_frame_hdr:000000000000A49F                 db 0FFh
.eh_frame_hdr:000000000000A4A0                 db  90h
.eh_frame_hdr:000000000000A4A1                 db  0Bh
.eh_frame_hdr:000000000000A4A2                 db    0
.eh_frame_hdr:000000000000A4A3                 db    0
.eh_frame_hdr:000000000000A4A4                 db 0E8h
.eh_frame_hdr:000000000000A4A5                 db 0AFh
.eh_frame_hdr:000000000000A4A6                 db 0FFh
.eh_frame_hdr:000000000000A4A7                 db 0FFh
.eh_frame_hdr:000000000000A4A8                 db 0ACh
.eh_frame_hdr:000000000000A4A9                 db  0Bh
.eh_frame_hdr:000000000000A4AA                 db    0
.eh_frame_hdr:000000000000A4AB                 db    0
.eh_frame_hdr:000000000000A4AC                 db  28h ; (
.eh_frame_hdr:000000000000A4AD                 db 0B0h
.eh_frame_hdr:000000000000A4AE                 db 0FFh
.eh_frame_hdr:000000000000A4AF                 db 0FFh
.eh_frame_hdr:000000000000A4B0                 db 0CCh
.eh_frame_hdr:000000000000A4B1                 db  0Bh
.eh_frame_hdr:000000000000A4B2                 db    0
.eh_frame_hdr:000000000000A4B3                 db    0
.eh_frame_hdr:000000000000A4B4                 db  38h ; 8
.eh_frame_hdr:000000000000A4B5                 db 0B0h
.eh_frame_hdr:000000000000A4B6                 db 0FFh
.eh_frame_hdr:000000000000A4B7                 db 0FFh
.eh_frame_hdr:000000000000A4B8                 db 0E0h
.eh_frame_hdr:000000000000A4B9                 db  0Bh
.eh_frame_hdr:000000000000A4BA                 db    0
.eh_frame_hdr:000000000000A4BB                 db    0
.eh_frame_hdr:000000000000A4BC                 db  58h ; X
.eh_frame_hdr:000000000000A4BD                 db 0B1h
.eh_frame_hdr:000000000000A4BE                 db 0FFh
.eh_frame_hdr:000000000000A4BF                 db 0FFh
.eh_frame_hdr:000000000000A4C0                 db  2Ch ; ,
.eh_frame_hdr:000000000000A4C1                 db  0Ch
.eh_frame_hdr:000000000000A4C2                 db    0
.eh_frame_hdr:000000000000A4C3                 db    0
.eh_frame_hdr:000000000000A4C4                 db  78h ; x
.eh_frame_hdr:000000000000A4C5                 db 0B1h
.eh_frame_hdr:000000000000A4C6                 db 0FFh
.eh_frame_hdr:000000000000A4C7                 db 0FFh
.eh_frame_hdr:000000000000A4C8                 db  48h ; H
.eh_frame_hdr:000000000000A4C9                 db  0Ch
.eh_frame_hdr:000000000000A4CA                 db    0
.eh_frame_hdr:000000000000A4CB                 db    0
.eh_frame_hdr:000000000000A4CC                 db 0D8h
.eh_frame_hdr:000000000000A4CD                 db 0B1h
.eh_frame_hdr:000000000000A4CE                 db 0FFh
.eh_frame_hdr:000000000000A4CF                 db 0FFh
.eh_frame_hdr:000000000000A4D0                 db  80h
.eh_frame_hdr:000000000000A4D1                 db  0Ch
.eh_frame_hdr:000000000000A4D2                 db    0
.eh_frame_hdr:000000000000A4D3                 db    0
.eh_frame_hdr:000000000000A4D4                 db 0E8h
.eh_frame_hdr:000000000000A4D5                 db 0B1h
.eh_frame_hdr:000000000000A4D6                 db 0FFh
.eh_frame_hdr:000000000000A4D7                 db 0FFh
.eh_frame_hdr:000000000000A4D8                 db  94h
.eh_frame_hdr:000000000000A4D9                 db  0Ch
.eh_frame_hdr:000000000000A4DA                 db    0
.eh_frame_hdr:000000000000A4DB                 db    0
.eh_frame_hdr:000000000000A4DC                 db 0F8h
.eh_frame_hdr:000000000000A4DD                 db 0B1h
.eh_frame_hdr:000000000000A4DE                 db 0FFh
.eh_frame_hdr:000000000000A4DF                 db 0FFh
.eh_frame_hdr:000000000000A4E0                 db 0A8h
.eh_frame_hdr:000000000000A4E1                 db  0Ch
.eh_frame_hdr:000000000000A4E2                 db    0
.eh_frame_hdr:000000000000A4E3                 db    0
.eh_frame_hdr:000000000000A4E4                 db  28h ; (
.eh_frame_hdr:000000000000A4E5                 db 0B2h
.eh_frame_hdr:000000000000A4E6                 db 0FFh
.eh_frame_hdr:000000000000A4E7                 db 0FFh
.eh_frame_hdr:000000000000A4E8                 db 0BCh
.eh_frame_hdr:000000000000A4E9                 db  0Ch
.eh_frame_hdr:000000000000A4EA                 db    0
.eh_frame_hdr:000000000000A4EB                 db    0
.eh_frame_hdr:000000000000A4EC                 db  78h ; x
.eh_frame_hdr:000000000000A4ED                 db 0B5h
.eh_frame_hdr:000000000000A4EE                 db 0FFh
.eh_frame_hdr:000000000000A4EF                 db 0FFh
.eh_frame_hdr:000000000000A4F0                 db    8
.eh_frame_hdr:000000000000A4F1                 db  0Dh
.eh_frame_hdr:000000000000A4F2                 db    0
.eh_frame_hdr:000000000000A4F3                 db    0
.eh_frame_hdr:000000000000A4F4                 db 0D8h
.eh_frame_hdr:000000000000A4F5                 db 0B5h
.eh_frame_hdr:000000000000A4F6                 db 0FFh
.eh_frame_hdr:000000000000A4F7                 db 0FFh
.eh_frame_hdr:000000000000A4F8                 db  28h ; (
.eh_frame_hdr:000000000000A4F9                 db  0Dh
.eh_frame_hdr:000000000000A4FA                 db    0
.eh_frame_hdr:000000000000A4FB                 db    0
.eh_frame_hdr:000000000000A4FC                 db    8
.eh_frame_hdr:000000000000A4FD                 db 0B9h
.eh_frame_hdr:000000000000A4FE                 db 0FFh
.eh_frame_hdr:000000000000A4FF                 db 0FFh
.eh_frame_hdr:000000000000A500                 db  74h ; t
.eh_frame_hdr:000000000000A501                 db  0Dh
.eh_frame_hdr:000000000000A502                 db    0
.eh_frame_hdr:000000000000A503                 db    0
.eh_frame_hdr:000000000000A504                 db  18h
.eh_frame_hdr:000000000000A505                 db 0B9h
.eh_frame_hdr:000000000000A506                 db 0FFh
.eh_frame_hdr:000000000000A507                 db 0FFh
.eh_frame_hdr:000000000000A508                 db  88h
.eh_frame_hdr:000000000000A509                 db  0Dh
.eh_frame_hdr:000000000000A50A                 db    0
.eh_frame_hdr:000000000000A50B                 db    0
.eh_frame_hdr:000000000000A50C                 db  28h ; (
.eh_frame_hdr:000000000000A50D                 db 0B9h
.eh_frame_hdr:000000000000A50E                 db 0FFh
.eh_frame_hdr:000000000000A50F                 db 0FFh
.eh_frame_hdr:000000000000A510                 db  9Ch
.eh_frame_hdr:000000000000A511                 db  0Dh
.eh_frame_hdr:000000000000A512                 db    0
.eh_frame_hdr:000000000000A513                 db    0
.eh_frame_hdr:000000000000A514                 db 0C8h
.eh_frame_hdr:000000000000A515                 db 0BAh
.eh_frame_hdr:000000000000A516                 db 0FFh
.eh_frame_hdr:000000000000A517                 db 0FFh
.eh_frame_hdr:000000000000A518                 db    0
.eh_frame_hdr:000000000000A519                 db  0Eh
.eh_frame_hdr:000000000000A51A                 db    0
.eh_frame_hdr:000000000000A51B                 db    0
.eh_frame_hdr:000000000000A51C                 db  18h
.eh_frame_hdr:000000000000A51D                 db 0BBh
.eh_frame_hdr:000000000000A51E                 db 0FFh
.eh_frame_hdr:000000000000A51F                 db 0FFh
.eh_frame_hdr:000000000000A520                 db  38h ; 8
.eh_frame_hdr:000000000000A521                 db  0Eh
.eh_frame_hdr:000000000000A522                 db    0
.eh_frame_hdr:000000000000A523                 db    0
.eh_frame_hdr:000000000000A524                 db 0A8h
.eh_frame_hdr:000000000000A525                 db 0BDh
.eh_frame_hdr:000000000000A526                 db 0FFh
.eh_frame_hdr:000000000000A527                 db 0FFh
.eh_frame_hdr:000000000000A528                 db  4Ch ; L
.eh_frame_hdr:000000000000A529                 db  0Eh
.eh_frame_hdr:000000000000A52A                 db    0
.eh_frame_hdr:000000000000A52B                 db    0
.eh_frame_hdr:000000000000A52C                 db 0E8h
.eh_frame_hdr:000000000000A52D                 db 0BFh
.eh_frame_hdr:000000000000A52E                 db 0FFh
.eh_frame_hdr:000000000000A52F                 db 0FFh
.eh_frame_hdr:000000000000A530                 db  80h
.eh_frame_hdr:000000000000A531                 db  0Eh
.eh_frame_hdr:000000000000A532                 db    0
.eh_frame_hdr:000000000000A533                 db    0
.eh_frame_hdr:000000000000A534                 db 0C8h
.eh_frame_hdr:000000000000A535                 db 0C1h
.eh_frame_hdr:000000000000A536                 db 0FFh
.eh_frame_hdr:000000000000A537                 db 0FFh
.eh_frame_hdr:000000000000A538                 db 0D0h
.eh_frame_hdr:000000000000A539                 db  0Eh
.eh_frame_hdr:000000000000A53A                 db    0
.eh_frame_hdr:000000000000A53B                 db    0
.eh_frame_hdr:000000000000A53C                 db  48h ; H
.eh_frame_hdr:000000000000A53D                 db 0C2h
.eh_frame_hdr:000000000000A53E                 db 0FFh
.eh_frame_hdr:000000000000A53F                 db 0FFh
.eh_frame_hdr:000000000000A540                 db  0Ch
.eh_frame_hdr:000000000000A541                 db  0Fh
.eh_frame_hdr:000000000000A542                 db    0
.eh_frame_hdr:000000000000A543                 db    0
.eh_frame_hdr:000000000000A544                 db  58h ; X
.eh_frame_hdr:000000000000A545                 db 0C2h
.eh_frame_hdr:000000000000A546                 db 0FFh
.eh_frame_hdr:000000000000A547                 db 0FFh
.eh_frame_hdr:000000000000A548                 db  20h
.eh_frame_hdr:000000000000A549                 db  0Fh
.eh_frame_hdr:000000000000A54A                 db    0
.eh_frame_hdr:000000000000A54B                 db    0
.eh_frame_hdr:000000000000A54C                 db  68h ; h
.eh_frame_hdr:000000000000A54D                 db 0C2h
.eh_frame_hdr:000000000000A54E                 db 0FFh
.eh_frame_hdr:000000000000A54F                 db 0FFh
.eh_frame_hdr:000000000000A550                 db  38h ; 8
.eh_frame_hdr:000000000000A551                 db  0Fh
.eh_frame_hdr:000000000000A552                 db    0
.eh_frame_hdr:000000000000A553                 db    0
.eh_frame_hdr:000000000000A554                 db  88h
.eh_frame_hdr:000000000000A555                 db 0C6h
.eh_frame_hdr:000000000000A556                 db 0FFh
.eh_frame_hdr:000000000000A557                 db 0FFh
.eh_frame_hdr:000000000000A558                 db  4Ch ; L
.eh_frame_hdr:000000000000A559                 db  10h
.eh_frame_hdr:000000000000A55A                 db    0
.eh_frame_hdr:000000000000A55B                 db    0
.eh_frame_hdr:000000000000A55C                 db 0A8h
.eh_frame_hdr:000000000000A55D                 db 0C6h
.eh_frame_hdr:000000000000A55E                 db 0FFh
.eh_frame_hdr:000000000000A55F                 db 0FFh
.eh_frame_hdr:000000000000A560                 db  60h ; `
.eh_frame_hdr:000000000000A561                 db  10h
.eh_frame_hdr:000000000000A562                 db    0
.eh_frame_hdr:000000000000A563                 db    0
.eh_frame_hdr:000000000000A564                 db  28h ; (
.eh_frame_hdr:000000000000A565                 db 0C7h
.eh_frame_hdr:000000000000A566                 db 0FFh
.eh_frame_hdr:000000000000A567                 db 0FFh
.eh_frame_hdr:000000000000A568                 db  7Ch ; |
.eh_frame_hdr:000000000000A569                 db  10h
.eh_frame_hdr:000000000000A56A                 db    0
.eh_frame_hdr:000000000000A56B                 db    0
.eh_frame_hdr:000000000000A56C                 db    8
.eh_frame_hdr:000000000000A56D                 db 0C8h
.eh_frame_hdr:000000000000A56E                 db 0FFh
.eh_frame_hdr:000000000000A56F                 db 0FFh
.eh_frame_hdr:000000000000A570                 db 0A8h
.eh_frame_hdr:000000000000A571                 db  10h
.eh_frame_hdr:000000000000A572                 db    0
.eh_frame_hdr:000000000000A573                 db    0
.eh_frame_hdr:000000000000A574                 db  88h
.eh_frame_hdr:000000000000A575                 db 0C8h
.eh_frame_hdr:000000000000A576                 db 0FFh
.eh_frame_hdr:000000000000A577                 db 0FFh
.eh_frame_hdr:000000000000A578                 db 0C8h
.eh_frame_hdr:000000000000A579                 db  10h
.eh_frame_hdr:000000000000A57A                 db    0
.eh_frame_hdr:000000000000A57B                 db    0
.eh_frame_hdr:000000000000A57C                 db 0A8h
.eh_frame_hdr:000000000000A57D                 db 0C8h
.eh_frame_hdr:000000000000A57E                 db 0FFh
.eh_frame_hdr:000000000000A57F                 db 0FFh
.eh_frame_hdr:000000000000A580                 db 0E4h
.eh_frame_hdr:000000000000A581                 db  10h
.eh_frame_hdr:000000000000A582                 db    0
.eh_frame_hdr:000000000000A583                 db    0
.eh_frame_hdr:000000000000A584                 db 0D8h
.eh_frame_hdr:000000000000A585                 db 0C8h
.eh_frame_hdr:000000000000A586                 db 0FFh
.eh_frame_hdr:000000000000A587                 db 0FFh
.eh_frame_hdr:000000000000A588                 db 0F8h
.eh_frame_hdr:000000000000A589                 db  10h
.eh_frame_hdr:000000000000A58A                 db    0
.eh_frame_hdr:000000000000A58B                 db    0
.eh_frame_hdr:000000000000A58C                 db 0E8h
.eh_frame_hdr:000000000000A58D                 db 0C8h
.eh_frame_hdr:000000000000A58E                 db 0FFh
.eh_frame_hdr:000000000000A58F                 db 0FFh
.eh_frame_hdr:000000000000A590                 db  0Ch
.eh_frame_hdr:000000000000A591                 db  11h
.eh_frame_hdr:000000000000A592                 db    0
.eh_frame_hdr:000000000000A593                 db    0
.eh_frame_hdr:000000000000A594                 db  28h ; (
.eh_frame_hdr:000000000000A595                 db 0C9h
.eh_frame_hdr:000000000000A596                 db 0FFh
.eh_frame_hdr:000000000000A597                 db 0FFh
.eh_frame_hdr:000000000000A598                 db  30h ; 0
.eh_frame_hdr:000000000000A599                 db  11h
.eh_frame_hdr:000000000000A59A                 db    0
.eh_frame_hdr:000000000000A59B                 db    0
.eh_frame_hdr:000000000000A59C                 db  58h ; X
.eh_frame_hdr:000000000000A59D                 db 0C9h
.eh_frame_hdr:000000000000A59E                 db 0FFh
.eh_frame_hdr:000000000000A59F                 db 0FFh
.eh_frame_hdr:000000000000A5A0                 db  44h ; D
.eh_frame_hdr:000000000000A5A1                 db  11h
.eh_frame_hdr:000000000000A5A2                 db    0
.eh_frame_hdr:000000000000A5A3                 db    0
.eh_frame_hdr:000000000000A5A4                 db 0E8h
.eh_frame_hdr:000000000000A5A5                 db 0C9h
.eh_frame_hdr:000000000000A5A6                 db 0FFh
.eh_frame_hdr:000000000000A5A7                 db 0FFh
.eh_frame_hdr:000000000000A5A8                 db  5Ch ; \
.eh_frame_hdr:000000000000A5A9                 db  11h
.eh_frame_hdr:000000000000A5AA                 db    0
.eh_frame_hdr:000000000000A5AB                 db    0
.eh_frame_hdr:000000000000A5AC                 db  38h ; 8
.eh_frame_hdr:000000000000A5AD                 db 0CAh
.eh_frame_hdr:000000000000A5AE                 db 0FFh
.eh_frame_hdr:000000000000A5AF                 db 0FFh
.eh_frame_hdr:000000000000A5B0                 db  74h ; t
.eh_frame_hdr:000000000000A5B1                 db  11h
.eh_frame_hdr:000000000000A5B2                 db    0
.eh_frame_hdr:000000000000A5B3                 db    0
.eh_frame_hdr:000000000000A5B4                 db  58h ; X
.eh_frame_hdr:000000000000A5B5                 db 0CAh
.eh_frame_hdr:000000000000A5B6                 db 0FFh
.eh_frame_hdr:000000000000A5B7                 db 0FFh
.eh_frame_hdr:000000000000A5B8                 db  90h
.eh_frame_hdr:000000000000A5B9                 db  11h
.eh_frame_hdr:000000000000A5BA                 db    0
.eh_frame_hdr:000000000000A5BB                 db    0
.eh_frame_hdr:000000000000A5BC                 db  88h
.eh_frame_hdr:000000000000A5BD                 db 0CAh
.eh_frame_hdr:000000000000A5BE                 db 0FFh
.eh_frame_hdr:000000000000A5BF                 db 0FFh
.eh_frame_hdr:000000000000A5C0                 db 0ACh
.eh_frame_hdr:000000000000A5C1                 db  11h
.eh_frame_hdr:000000000000A5C2                 db    0
.eh_frame_hdr:000000000000A5C3                 db    0
.eh_frame_hdr:000000000000A5C4                 db 0B8h
.eh_frame_hdr:000000000000A5C5                 db 0CAh
.eh_frame_hdr:000000000000A5C6                 db 0FFh
.eh_frame_hdr:000000000000A5C7                 db 0FFh
.eh_frame_hdr:000000000000A5C8                 db 0D4h
.eh_frame_hdr:000000000000A5C9                 db  11h
.eh_frame_hdr:000000000000A5CA                 db    0
.eh_frame_hdr:000000000000A5CB                 db    0
.eh_frame_hdr:000000000000A5CC                 db 0D8h
.eh_frame_hdr:000000000000A5CD                 db 0CAh
.eh_frame_hdr:000000000000A5CE                 db 0FFh
.eh_frame_hdr:000000000000A5CF                 db 0FFh
.eh_frame_hdr:000000000000A5D0                 db 0F0h
.eh_frame_hdr:000000000000A5D1                 db  11h
.eh_frame_hdr:000000000000A5D2                 db    0
.eh_frame_hdr:000000000000A5D3                 db    0
.eh_frame_hdr:000000000000A5D4                 db  18h
.eh_frame_hdr:000000000000A5D5                 db 0CBh
.eh_frame_hdr:000000000000A5D6                 db 0FFh
.eh_frame_hdr:000000000000A5D7                 db 0FFh
.eh_frame_hdr:000000000000A5D8                 db    8
.eh_frame_hdr:000000000000A5D9                 db  12h
.eh_frame_hdr:000000000000A5DA                 db    0
.eh_frame_hdr:000000000000A5DB                 db    0
.eh_frame_hdr:000000000000A5DC                 db  18h
.eh_frame_hdr:000000000000A5DD                 db 0CCh
.eh_frame_hdr:000000000000A5DE                 db 0FFh
.eh_frame_hdr:000000000000A5DF                 db 0FFh
.eh_frame_hdr:000000000000A5E0                 db  54h ; T
.eh_frame_hdr:000000000000A5E1                 db  12h
.eh_frame_hdr:000000000000A5E2                 db    0
.eh_frame_hdr:000000000000A5E3                 db    0
.eh_frame_hdr:000000000000A5E4                 db  48h ; H
.eh_frame_hdr:000000000000A5E5                 db 0CCh
.eh_frame_hdr:000000000000A5E6                 db 0FFh
.eh_frame_hdr:000000000000A5E7                 db 0FFh
.eh_frame_hdr:000000000000A5E8                 db  70h ; p
.eh_frame_hdr:000000000000A5E9                 db  12h
.eh_frame_hdr:000000000000A5EA                 db    0
.eh_frame_hdr:000000000000A5EB                 db    0
.eh_frame_hdr:000000000000A5EC                 db  68h ; h
.eh_frame_hdr:000000000000A5ED                 db 0D0h
.eh_frame_hdr:000000000000A5EE                 db 0FFh
.eh_frame_hdr:000000000000A5EF                 db 0FFh
.eh_frame_hdr:000000000000A5F0                 db 0C0h
.eh_frame_hdr:000000000000A5F1                 db  12h
.eh_frame_hdr:000000000000A5F2                 db    0
.eh_frame_hdr:000000000000A5F3                 db    0
.eh_frame_hdr:000000000000A5F4                 db  88h
.eh_frame_hdr:000000000000A5F5                 db 0D4h
.eh_frame_hdr:000000000000A5F6                 db 0FFh
.eh_frame_hdr:000000000000A5F7                 db 0FFh
.eh_frame_hdr:000000000000A5F8                 db  10h
.eh_frame_hdr:000000000000A5F9                 db  13h
.eh_frame_hdr:000000000000A5FA                 db    0
.eh_frame_hdr:000000000000A5FB                 db    0
.eh_frame_hdr:000000000000A5FC                 db    8
.eh_frame_hdr:000000000000A5FD                 db 0D5h
.eh_frame_hdr:000000000000A5FE                 db 0FFh
.eh_frame_hdr:000000000000A5FF                 db 0FFh
.eh_frame_hdr:000000000000A600                 db  48h ; H
.eh_frame_hdr:000000000000A601                 db  13h
.eh_frame_hdr:000000000000A602                 db    0
.eh_frame_hdr:000000000000A603                 db    0
.eh_frame_hdr:000000000000A604                 db  48h ; H
.eh_frame_hdr:000000000000A605                 db 0D5h
.eh_frame_hdr:000000000000A606                 db 0FFh
.eh_frame_hdr:000000000000A607                 db 0FFh
.eh_frame_hdr:000000000000A608                 db  68h ; h
.eh_frame_hdr:000000000000A609                 db  13h
.eh_frame_hdr:000000000000A60A                 db    0
.eh_frame_hdr:000000000000A60B                 db    0
.eh_frame_hdr:000000000000A60C                 db 0A8h
.eh_frame_hdr:000000000000A60D                 db 0D5h
.eh_frame_hdr:000000000000A60E                 db 0FFh
.eh_frame_hdr:000000000000A60F                 db 0FFh
.eh_frame_hdr:000000000000A610                 db  98h
.eh_frame_hdr:000000000000A611                 db  13h
.eh_frame_hdr:000000000000A612                 db    0
.eh_frame_hdr:000000000000A613                 db    0
.eh_frame_hdr:000000000000A614                 db  38h ; 8
.eh_frame_hdr:000000000000A615                 db 0D6h
.eh_frame_hdr:000000000000A616                 db 0FFh
.eh_frame_hdr:000000000000A617                 db 0FFh
.eh_frame_hdr:000000000000A618                 db 0D8h
.eh_frame_hdr:000000000000A619                 db  13h
.eh_frame_hdr:000000000000A61A                 db    0
.eh_frame_hdr:000000000000A61B                 db    0
.eh_frame_hdr:000000000000A61C                 db 0B8h
.eh_frame_hdr:000000000000A61D                 db 0D6h
.eh_frame_hdr:000000000000A61E                 db 0FFh
.eh_frame_hdr:000000000000A61F                 db 0FFh
.eh_frame_hdr:000000000000A620                 db  28h ; (
.eh_frame_hdr:000000000000A621                 db  14h
.eh_frame_hdr:000000000000A622                 db    0
.eh_frame_hdr:000000000000A623                 db    0
.eh_frame_hdr:000000000000A624                 db  58h ; X
.eh_frame_hdr:000000000000A625                 db 0D7h
.eh_frame_hdr:000000000000A626                 db 0FFh
.eh_frame_hdr:000000000000A627                 db 0FFh
.eh_frame_hdr:000000000000A628                 db  58h ; X
.eh_frame_hdr:000000000000A629                 db  14h
.eh_frame_hdr:000000000000A62A                 db    0
.eh_frame_hdr:000000000000A62B                 db    0
.eh_frame_hdr:000000000000A62C                 db 0B8h
.eh_frame_hdr:000000000000A62D                 db 0D7h
.eh_frame_hdr:000000000000A62E                 db 0FFh
.eh_frame_hdr:000000000000A62F                 db 0FFh
.eh_frame_hdr:000000000000A630                 db  78h ; x
.eh_frame_hdr:000000000000A631                 db  14h
.eh_frame_hdr:000000000000A632                 db    0
.eh_frame_hdr:000000000000A633                 db    0
.eh_frame_hdr:000000000000A634                 db  58h ; X
.eh_frame_hdr:000000000000A635                 db 0D8h
.eh_frame_hdr:000000000000A636                 db 0FFh
.eh_frame_hdr:000000000000A637                 db 0FFh
.eh_frame_hdr:000000000000A638                 db  8Ch
.eh_frame_hdr:000000000000A639                 db  14h
.eh_frame_hdr:000000000000A63A                 db    0
.eh_frame_hdr:000000000000A63B                 db    0
.eh_frame_hdr:000000000000A63C                 db  68h ; h
.eh_frame_hdr:000000000000A63D                 db 0D8h
.eh_frame_hdr:000000000000A63E                 db 0FFh
.eh_frame_hdr:000000000000A63F                 db 0FFh
.eh_frame_hdr:000000000000A640                 db 0A0h
.eh_frame_hdr:000000000000A641                 db  14h
.eh_frame_hdr:000000000000A642                 db    0
.eh_frame_hdr:000000000000A643                 db    0
.eh_frame_hdr:000000000000A644                 db  78h ; x
.eh_frame_hdr:000000000000A645                 db 0D8h
.eh_frame_hdr:000000000000A646                 db 0FFh
.eh_frame_hdr:000000000000A647                 db 0FFh
.eh_frame_hdr:000000000000A648                 db 0B4h
.eh_frame_hdr:000000000000A649                 db  14h
.eh_frame_hdr:000000000000A64A                 db    0
.eh_frame_hdr:000000000000A64B                 db    0
.eh_frame_hdr:000000000000A64C                 db 0A8h
.eh_frame_hdr:000000000000A64D                 db 0D8h
.eh_frame_hdr:000000000000A64E                 db 0FFh
.eh_frame_hdr:000000000000A64F                 db 0FFh
.eh_frame_hdr:000000000000A650                 db 0D0h
.eh_frame_hdr:000000000000A651                 db  14h
.eh_frame_hdr:000000000000A652                 db    0
.eh_frame_hdr:000000000000A653                 db    0
.eh_frame_hdr:000000000000A654                 db 0C8h
.eh_frame_hdr:000000000000A655                 db 0D9h
.eh_frame_hdr:000000000000A656                 db 0FFh
.eh_frame_hdr:000000000000A657                 db 0FFh
.eh_frame_hdr:000000000000A658                 db  30h ; 0
.eh_frame_hdr:000000000000A659                 db  15h
.eh_frame_hdr:000000000000A65A                 db    0
.eh_frame_hdr:000000000000A65B                 db    0
.eh_frame_hdr:000000000000A65C                 db  48h ; H
.eh_frame_hdr:000000000000A65D                 db 0DAh
.eh_frame_hdr:000000000000A65E                 db 0FFh
.eh_frame_hdr:000000000000A65F                 db 0FFh
.eh_frame_hdr:000000000000A660                 db  44h ; D
.eh_frame_hdr:000000000000A661                 db  15h
.eh_frame_hdr:000000000000A662                 db    0
.eh_frame_hdr:000000000000A663                 db    0
.eh_frame_hdr:000000000000A664                 db  88h
.eh_frame_hdr:000000000000A665                 db 0DBh
.eh_frame_hdr:000000000000A666                 db 0FFh
.eh_frame_hdr:000000000000A667                 db 0FFh
.eh_frame_hdr:000000000000A668                 db 0A4h
.eh_frame_hdr:000000000000A669                 db  15h
.eh_frame_hdr:000000000000A66A                 db    0
.eh_frame_hdr:000000000000A66B                 db    0
.eh_frame_hdr:000000000000A66C                 db  98h
.eh_frame_hdr:000000000000A66D                 db 0DBh
.eh_frame_hdr:000000000000A66E                 db 0FFh
.eh_frame_hdr:000000000000A66F                 db 0FFh
.eh_frame_hdr:000000000000A670                 db 0B8h
.eh_frame_hdr:000000000000A671                 db  15h
.eh_frame_hdr:000000000000A672                 db    0
.eh_frame_hdr:000000000000A673                 db    0
.eh_frame_hdr:000000000000A674                 db 0A8h
.eh_frame_hdr:000000000000A675                 db 0DBh
.eh_frame_hdr:000000000000A676                 db 0FFh
.eh_frame_hdr:000000000000A677                 db 0FFh
.eh_frame_hdr:000000000000A678                 db 0CCh
.eh_frame_hdr:000000000000A679                 db  15h
.eh_frame_hdr:000000000000A67A                 db    0
.eh_frame_hdr:000000000000A67B                 db    0
.eh_frame_hdr:000000000000A67C                 db 0B8h
.eh_frame_hdr:000000000000A67D                 db 0DBh
.eh_frame_hdr:000000000000A67E                 db 0FFh
.eh_frame_hdr:000000000000A67F                 db 0FFh
.eh_frame_hdr:000000000000A680                 db 0E0h
.eh_frame_hdr:000000000000A681                 db  15h
.eh_frame_hdr:000000000000A682                 db    0
.eh_frame_hdr:000000000000A683                 db    0
.eh_frame_hdr:000000000000A684                 db    8
.eh_frame_hdr:000000000000A685                 db 0DCh
.eh_frame_hdr:000000000000A686                 db 0FFh
.eh_frame_hdr:000000000000A687                 db 0FFh
.eh_frame_hdr:000000000000A688                 db 0F4h
.eh_frame_hdr:000000000000A689                 db  15h
.eh_frame_hdr:000000000000A68A                 db    0
.eh_frame_hdr:000000000000A68B                 db    0
.eh_frame_hdr:000000000000A68C                 db  68h ; h
.eh_frame_hdr:000000000000A68D                 db 0DCh
.eh_frame_hdr:000000000000A68E                 db 0FFh
.eh_frame_hdr:000000000000A68F                 db 0FFh
.eh_frame_hdr:000000000000A690                 db    8
.eh_frame_hdr:000000000000A691                 db  16h
.eh_frame_hdr:000000000000A692                 db    0
.eh_frame_hdr:000000000000A693                 db    0
.eh_frame_hdr:000000000000A694                 db 0B8h
.eh_frame_hdr:000000000000A695                 db 0DDh
.eh_frame_hdr:000000000000A696                 db 0FFh
.eh_frame_hdr:000000000000A697                 db 0FFh
.eh_frame_hdr:000000000000A698                 db  44h ; D
.eh_frame_hdr:000000000000A699                 db  16h
.eh_frame_hdr:000000000000A69A                 db    0
.eh_frame_hdr:000000000000A69B                 db    0
.eh_frame_hdr:000000000000A69C                 db  18h
.eh_frame_hdr:000000000000A69D                 db 0DEh
.eh_frame_hdr:000000000000A69E                 db 0FFh
.eh_frame_hdr:000000000000A69F                 db 0FFh
.eh_frame_hdr:000000000000A6A0                 db  7Ch ; |
.eh_frame_hdr:000000000000A6A1                 db  16h
.eh_frame_hdr:000000000000A6A2                 db    0
.eh_frame_hdr:000000000000A6A3                 db    0
.eh_frame_hdr:000000000000A6A4                 db  68h ; h
.eh_frame_hdr:000000000000A6A5                 db 0DEh
.eh_frame_hdr:000000000000A6A6                 db 0FFh
.eh_frame_hdr:000000000000A6A7                 db 0FFh
.eh_frame_hdr:000000000000A6A8                 db  90h
.eh_frame_hdr:000000000000A6A9                 db  16h
.eh_frame_hdr:000000000000A6AA                 db    0
.eh_frame_hdr:000000000000A6AB                 db    0
.eh_frame_hdr:000000000000A6AC                 db 0E8h
.eh_frame_hdr:000000000000A6AD                 db 0DEh
.eh_frame_hdr:000000000000A6AE                 db 0FFh
.eh_frame_hdr:000000000000A6AF                 db 0FFh
.eh_frame_hdr:000000000000A6B0                 db 0C4h
.eh_frame_hdr:000000000000A6B1                 db  16h
.eh_frame_hdr:000000000000A6B2                 db    0
.eh_frame_hdr:000000000000A6B3                 db    0
.eh_frame_hdr:000000000000A6B4                 db  58h ; X
.eh_frame_hdr:000000000000A6B5                 db 0DFh
.eh_frame_hdr:000000000000A6B6                 db 0FFh
.eh_frame_hdr:000000000000A6B7                 db 0FFh
.eh_frame_hdr:000000000000A6B8                 db 0D8h
.eh_frame_hdr:000000000000A6B9                 db  16h
.eh_frame_hdr:000000000000A6BA                 db    0
.eh_frame_hdr:000000000000A6BB                 db    0
.eh_frame_hdr:000000000000A6BC                 db 0C8h
.eh_frame_hdr:000000000000A6BD                 db 0DFh
.eh_frame_hdr:000000000000A6BE                 db 0FFh
.eh_frame_hdr:000000000000A6BF                 db 0FFh
.eh_frame_hdr:000000000000A6C0                 db  24h ; $
.eh_frame_hdr:000000000000A6C1                 db  17h
.eh_frame_hdr:000000000000A6C2                 db    0
.eh_frame_hdr:000000000000A6C3                 db    0
.eh_frame_hdr:000000000000A6C4                 db    8
.eh_frame_hdr:000000000000A6C5                 db 0E0h
.eh_frame_hdr:000000000000A6C6                 db 0FFh
.eh_frame_hdr:000000000000A6C7                 db 0FFh
.eh_frame_hdr:000000000000A6C8                 db  38h ; 8
.eh_frame_hdr:000000000000A6C9                 db  17h
.eh_frame_hdr:000000000000A6CA                 db    0
.eh_frame_hdr:000000000000A6CB                 db    0
.eh_frame_hdr:000000000000A6CC                 db  28h ; (
.eh_frame_hdr:000000000000A6CD                 db 0E0h
.eh_frame_hdr:000000000000A6CE                 db 0FFh
.eh_frame_hdr:000000000000A6CF                 db 0FFh
.eh_frame_hdr:000000000000A6D0                 db  4Ch ; L
.eh_frame_hdr:000000000000A6D1                 db  17h
.eh_frame_hdr:000000000000A6D2                 db    0
.eh_frame_hdr:000000000000A6D3                 db    0
.eh_frame_hdr:000000000000A6D4                 db 0E8h
.eh_frame_hdr:000000000000A6D5                 db 0E1h
.eh_frame_hdr:000000000000A6D6                 db 0FFh
.eh_frame_hdr:000000000000A6D7                 db 0FFh
.eh_frame_hdr:000000000000A6D8                 db  98h
.eh_frame_hdr:000000000000A6D9                 db  17h
.eh_frame_hdr:000000000000A6DA                 db    0
.eh_frame_hdr:000000000000A6DB                 db    0
.eh_frame_hdr:000000000000A6DC                 db  78h ; x
.eh_frame_hdr:000000000000A6DD                 db 0E2h
.eh_frame_hdr:000000000000A6DE                 db 0FFh
.eh_frame_hdr:000000000000A6DF                 db 0FFh
.eh_frame_hdr:000000000000A6E0                 db 0C4h
.eh_frame_hdr:000000000000A6E1                 db  17h
.eh_frame_hdr:000000000000A6E2                 db    0
.eh_frame_hdr:000000000000A6E3                 db    0
.eh_frame_hdr:000000000000A6E4                 db  58h ; X
.eh_frame_hdr:000000000000A6E5                 db 0E3h
.eh_frame_hdr:000000000000A6E6                 db 0FFh
.eh_frame_hdr:000000000000A6E7                 db 0FFh
.eh_frame_hdr:000000000000A6E8                 db 0F0h
.eh_frame_hdr:000000000000A6E9                 db  17h
.eh_frame_hdr:000000000000A6EA                 db    0
.eh_frame_hdr:000000000000A6EB                 db    0
.eh_frame_hdr:000000000000A6EC                 db  98h
.eh_frame_hdr:000000000000A6ED                 db 0E5h
.eh_frame_hdr:000000000000A6EE                 db 0FFh
.eh_frame_hdr:000000000000A6EF                 db 0FFh
.eh_frame_hdr:000000000000A6F0                 db  28h ; (
.eh_frame_hdr:000000000000A6F1                 db  18h
.eh_frame_hdr:000000000000A6F2                 db    0
.eh_frame_hdr:000000000000A6F3                 db    0
.eh_frame_hdr:000000000000A6F4                 db  28h ; (
.eh_frame_hdr:000000000000A6F5                 db 0E8h
.eh_frame_hdr:000000000000A6F6                 db 0FFh
.eh_frame_hdr:000000000000A6F7                 db 0FFh
.eh_frame_hdr:000000000000A6F8                 db  64h ; d
.eh_frame_hdr:000000000000A6F9                 db  18h
.eh_frame_hdr:000000000000A6FA                 db    0
.eh_frame_hdr:000000000000A6FB                 db    0
.eh_frame_hdr:000000000000A6FC                 db  88h
.eh_frame_hdr:000000000000A6FD                 db 0E8h
.eh_frame_hdr:000000000000A6FE                 db 0FFh
.eh_frame_hdr:000000000000A6FF                 db 0FFh
.eh_frame_hdr:000000000000A700                 db  88h
.eh_frame_hdr:000000000000A701                 db  18h
.eh_frame_hdr:000000000000A702                 db    0
.eh_frame_hdr:000000000000A703                 db    0
.eh_frame_hdr:000000000000A704                 db  98h
.eh_frame_hdr:000000000000A705                 db 0EAh
.eh_frame_hdr:000000000000A706                 db 0FFh
.eh_frame_hdr:000000000000A707                 db 0FFh
.eh_frame_hdr:000000000000A708                 db 0C0h
.eh_frame_hdr:000000000000A709                 db  18h
.eh_frame_hdr:000000000000A70A                 db    0
.eh_frame_hdr:000000000000A70B                 db    0
.eh_frame_hdr:000000000000A70C                 db 0D8h
.eh_frame_hdr:000000000000A70D                 db 0EAh
.eh_frame_hdr:000000000000A70E                 db 0FFh
.eh_frame_hdr:000000000000A70F                 db 0FFh
.eh_frame_hdr:000000000000A710                 db 0E0h
.eh_frame_hdr:000000000000A711                 db  18h
.eh_frame_hdr:000000000000A712                 db    0
.eh_frame_hdr:000000000000A713                 db    0
.eh_frame_hdr:000000000000A714                 db 0E8h
.eh_frame_hdr:000000000000A715                 db 0EAh
.eh_frame_hdr:000000000000A716                 db 0FFh
.eh_frame_hdr:000000000000A717                 db 0FFh
.eh_frame_hdr:000000000000A718                 db 0F8h
.eh_frame_hdr:000000000000A719                 db  18h
.eh_frame_hdr:000000000000A71A                 db    0
.eh_frame_hdr:000000000000A71B                 db    0
.eh_frame_hdr:000000000000A71C                 db  68h ; h
.eh_frame_hdr:000000000000A71D                 db 0EDh
.eh_frame_hdr:000000000000A71E                 db 0FFh
.eh_frame_hdr:000000000000A71F                 db 0FFh
.eh_frame_hdr:000000000000A720                 db  30h ; 0
.eh_frame_hdr:000000000000A721                 db  19h
.eh_frame_hdr:000000000000A722                 db    0
.eh_frame_hdr:000000000000A723                 db    0
.eh_frame_hdr:000000000000A724                 db 0D8h
.eh_frame_hdr:000000000000A725                 db 0EDh
.eh_frame_hdr:000000000000A726                 db 0FFh
.eh_frame_hdr:000000000000A727                 db 0FFh
.eh_frame_hdr:000000000000A728                 db  78h ; x
.eh_frame_hdr:000000000000A729                 db  19h
.eh_frame_hdr:000000000000A72A                 db    0
.eh_frame_hdr:000000000000A72B                 db    0
.eh_frame_hdr:000000000000A72C                 db 0E8h
.eh_frame_hdr:000000000000A72D                 db 0EDh
.eh_frame_hdr:000000000000A72E                 db 0FFh
.eh_frame_hdr:000000000000A72F                 db 0FFh
.eh_frame_hdr:000000000000A730                 db  90h
.eh_frame_hdr:000000000000A731                 db  19h
.eh_frame_hdr:000000000000A732                 db    0
.eh_frame_hdr:000000000000A733                 db    0
.eh_frame_hdr:000000000000A733 _eh_frame_hdr   ends
.eh_frame_hdr:000000000000A733
LOAD:000000000000A734 ; ===========================================================================
LOAD:000000000000A734
LOAD:000000000000A734 ; Segment type: Pure code
LOAD:000000000000A734 ; Segment permissions: Read/Execute
LOAD:000000000000A734 LOAD            segment byte public 'CODE' use64
LOAD:000000000000A734                 assume cs:LOAD
LOAD:000000000000A734                 ;org 0A734h
LOAD:000000000000A734                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000A734                 align 8
LOAD:000000000000A734 LOAD            ends
LOAD:000000000000A734
.eh_frame:000000000000A738 ; ===========================================================================
.eh_frame:000000000000A738
.eh_frame:000000000000A738 ; Segment type: Pure data
.eh_frame:000000000000A738 ; Segment permissions: Read
.eh_frame:000000000000A738 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000A738                 assume cs:_eh_frame
.eh_frame:000000000000A738                 ;org 0A738h
.eh_frame:000000000000A738                 db  14h
.eh_frame:000000000000A739                 db    0
.eh_frame:000000000000A73A                 db    0
.eh_frame:000000000000A73B                 db    0
.eh_frame:000000000000A73C                 db    0
.eh_frame:000000000000A73D                 db    0
.eh_frame:000000000000A73E                 db    0
.eh_frame:000000000000A73F                 db    0
.eh_frame:000000000000A740                 db    1
.eh_frame:000000000000A741                 db  7Ah ; z
.eh_frame:000000000000A742                 db  52h ; R
.eh_frame:000000000000A743                 db    0
.eh_frame:000000000000A744                 db    1
.eh_frame:000000000000A745                 db  78h ; x
.eh_frame:000000000000A746                 db  10h
.eh_frame:000000000000A747                 db    1
.eh_frame:000000000000A748                 db  1Bh
.eh_frame:000000000000A749                 db  0Ch
.eh_frame:000000000000A74A                 db    7
.eh_frame:000000000000A74B                 db    8
.eh_frame:000000000000A74C                 db  90h
.eh_frame:000000000000A74D                 db    1
.eh_frame:000000000000A74E                 db    7
.eh_frame:000000000000A74F                 db  10h
.eh_frame:000000000000A750                 db  14h
.eh_frame:000000000000A751                 db    0
.eh_frame:000000000000A752                 db    0
.eh_frame:000000000000A753                 db    0
.eh_frame:000000000000A754                 db  1Ch
.eh_frame:000000000000A755                 db    0
.eh_frame:000000000000A756                 db    0
.eh_frame:000000000000A757                 db    0
.eh_frame:000000000000A758                 db 0E8h
.eh_frame:000000000000A759                 db  84h
.eh_frame:000000000000A75A                 db 0FFh
.eh_frame:000000000000A75B                 db 0FFh
.eh_frame:000000000000A75C                 db  2Bh ; +
.eh_frame:000000000000A75D                 db    0
.eh_frame:000000000000A75E                 db    0
.eh_frame:000000000000A75F                 db    0
.eh_frame:000000000000A760                 db    0
.eh_frame:000000000000A761                 db    0
.eh_frame:000000000000A762                 db    0
.eh_frame:000000000000A763                 db    0
.eh_frame:000000000000A764                 db    0
.eh_frame:000000000000A765                 db    0
.eh_frame:000000000000A766                 db    0
.eh_frame:000000000000A767                 db    0
.eh_frame:000000000000A768                 db  14h
.eh_frame:000000000000A769                 db    0
.eh_frame:000000000000A76A                 db    0
.eh_frame:000000000000A76B                 db    0
.eh_frame:000000000000A76C                 db    0
.eh_frame:000000000000A76D                 db    0
.eh_frame:000000000000A76E                 db    0
.eh_frame:000000000000A76F                 db    0
.eh_frame:000000000000A770                 db    1
.eh_frame:000000000000A771                 db  7Ah ; z
.eh_frame:000000000000A772                 db  52h ; R
.eh_frame:000000000000A773                 db    0
.eh_frame:000000000000A774                 db    1
.eh_frame:000000000000A775                 db  78h ; x
.eh_frame:000000000000A776                 db  10h
.eh_frame:000000000000A777                 db    1
.eh_frame:000000000000A778                 db  1Bh
.eh_frame:000000000000A779                 db  0Ch
.eh_frame:000000000000A77A                 db    7
.eh_frame:000000000000A77B                 db    8
.eh_frame:000000000000A77C                 db  90h
.eh_frame:000000000000A77D                 db    1
.eh_frame:000000000000A77E                 db    0
.eh_frame:000000000000A77F                 db    0
.eh_frame:000000000000A780                 db  24h ; $
.eh_frame:000000000000A781                 db    0
.eh_frame:000000000000A782                 db    0
.eh_frame:000000000000A783                 db    0
.eh_frame:000000000000A784                 db  1Ch
.eh_frame:000000000000A785                 db    0
.eh_frame:000000000000A786                 db    0
.eh_frame:000000000000A787                 db    0
.eh_frame:000000000000A788                 db 0F8h
.eh_frame:000000000000A789                 db  71h ; q
.eh_frame:000000000000A78A                 db 0FFh
.eh_frame:000000000000A78B                 db 0FFh
.eh_frame:000000000000A78C                 db  50h ; P
.eh_frame:000000000000A78D                 db    4
.eh_frame:000000000000A78E                 db    0
.eh_frame:000000000000A78F                 db    0
.eh_frame:000000000000A790                 db    0
.eh_frame:000000000000A791                 db  0Eh
.eh_frame:000000000000A792                 db  10h
.eh_frame:000000000000A793                 db  46h ; F
.eh_frame:000000000000A794                 db  0Eh
.eh_frame:000000000000A795                 db  18h
.eh_frame:000000000000A796                 db  4Ah ; J
.eh_frame:000000000000A797                 db  0Fh
.eh_frame:000000000000A798                 db  0Bh
.eh_frame:000000000000A799                 db  77h ; w
.eh_frame:000000000000A79A                 db    8
.eh_frame:000000000000A79B                 db  80h
.eh_frame:000000000000A79C                 db    0
.eh_frame:000000000000A79D                 db  3Fh ; ?
.eh_frame:000000000000A79E                 db  1Ah
.eh_frame:000000000000A79F                 db  3Bh ; ;
.eh_frame:000000000000A7A0                 db  2Ah ; *
.eh_frame:000000000000A7A1                 db  33h ; 3
.eh_frame:000000000000A7A2                 db  24h ; $
.eh_frame:000000000000A7A3                 db  22h ; "
.eh_frame:000000000000A7A4                 db    0
.eh_frame:000000000000A7A5                 db    0
.eh_frame:000000000000A7A6                 db    0
.eh_frame:000000000000A7A7                 db    0
.eh_frame:000000000000A7A8                 db  14h
.eh_frame:000000000000A7A9                 db    0
.eh_frame:000000000000A7AA                 db    0
.eh_frame:000000000000A7AB                 db    0
.eh_frame:000000000000A7AC                 db  44h ; D
.eh_frame:000000000000A7AD                 db    0
.eh_frame:000000000000A7AE                 db    0
.eh_frame:000000000000A7AF                 db    0
.eh_frame:000000000000A7B0                 db  20h
.eh_frame:000000000000A7B1                 db  76h ; v
.eh_frame:000000000000A7B2                 db 0FFh
.eh_frame:000000000000A7B3                 db 0FFh
.eh_frame:000000000000A7B4                 db  10h
.eh_frame:000000000000A7B5                 db    0
.eh_frame:000000000000A7B6                 db    0
.eh_frame:000000000000A7B7                 db    0
.eh_frame:000000000000A7B8                 db    0
.eh_frame:000000000000A7B9                 db    0
.eh_frame:000000000000A7BA                 db    0
.eh_frame:000000000000A7BB                 db    0
.eh_frame:000000000000A7BC                 db    0
.eh_frame:000000000000A7BD                 db    0
.eh_frame:000000000000A7BE                 db    0
.eh_frame:000000000000A7BF                 db    0
.eh_frame:000000000000A7C0                 db  28h ; (
.eh_frame:000000000000A7C1                 db    0
.eh_frame:000000000000A7C2                 db    0
.eh_frame:000000000000A7C3                 db    0
.eh_frame:000000000000A7C4                 db  5Ch ; \
.eh_frame:000000000000A7C5                 db    0
.eh_frame:000000000000A7C6                 db    0
.eh_frame:000000000000A7C7                 db    0
.eh_frame:000000000000A7C8                 db  88h
.eh_frame:000000000000A7C9                 db  85h
.eh_frame:000000000000A7CA                 db 0FFh
.eh_frame:000000000000A7CB                 db 0FFh
.eh_frame:000000000000A7CC                 db 0DAh
.eh_frame:000000000000A7CD                 db    3
.eh_frame:000000000000A7CE                 db    0
.eh_frame:000000000000A7CF                 db    0
.eh_frame:000000000000A7D0                 db    0
.eh_frame:000000000000A7D1                 db  42h ; B
.eh_frame:000000000000A7D2                 db  0Eh
.eh_frame:000000000000A7D3                 db  10h
.eh_frame:000000000000A7D4                 db  8Dh
.eh_frame:000000000000A7D5                 db    2
.eh_frame:000000000000A7D6                 db  42h ; B
.eh_frame:000000000000A7D7                 db  0Eh
.eh_frame:000000000000A7D8                 db  18h
.eh_frame:000000000000A7D9                 db  8Ch
.eh_frame:000000000000A7DA                 db    3
.eh_frame:000000000000A7DB                 db  46h ; F
.eh_frame:000000000000A7DC                 db  0Eh
.eh_frame:000000000000A7DD                 db  20h
.eh_frame:000000000000A7DE                 db  86h
.eh_frame:000000000000A7DF                 db    4
.eh_frame:000000000000A7E0                 db  41h ; A
.eh_frame:000000000000A7E1                 db  0Eh
.eh_frame:000000000000A7E2                 db  28h ; (
.eh_frame:000000000000A7E3                 db  83h
.eh_frame:000000000000A7E4                 db    5
.eh_frame:000000000000A7E5                 db  49h ; I
.eh_frame:000000000000A7E6                 db  0Eh
.eh_frame:000000000000A7E7                 db 0B0h
.eh_frame:000000000000A7E8                 db    1
.eh_frame:000000000000A7E9                 db    0
.eh_frame:000000000000A7EA                 db    0
.eh_frame:000000000000A7EB                 db    0
.eh_frame:000000000000A7EC                 db  50h ; P
.eh_frame:000000000000A7ED                 db    0
.eh_frame:000000000000A7EE                 db    0
.eh_frame:000000000000A7EF                 db    0
.eh_frame:000000000000A7F0                 db  88h
.eh_frame:000000000000A7F1                 db    0
.eh_frame:000000000000A7F2                 db    0
.eh_frame:000000000000A7F3                 db    0
.eh_frame:000000000000A7F4                 db 0ECh
.eh_frame:000000000000A7F5                 db  75h ; u
.eh_frame:000000000000A7F6                 db 0FFh
.eh_frame:000000000000A7F7                 db 0FFh
.eh_frame:000000000000A7F8                 db  57h ; W
.eh_frame:000000000000A7F9                 db  0Eh
.eh_frame:000000000000A7FA                 db    0
.eh_frame:000000000000A7FB                 db    0
.eh_frame:000000000000A7FC                 db    0
.eh_frame:000000000000A7FD                 db  42h ; B
.eh_frame:000000000000A7FE                 db  0Eh
.eh_frame:000000000000A7FF                 db  10h
.eh_frame:000000000000A800                 db  8Fh
.eh_frame:000000000000A801                 db    2
.eh_frame:000000000000A802                 db  42h ; B
.eh_frame:000000000000A803                 db  0Eh
.eh_frame:000000000000A804                 db  18h
.eh_frame:000000000000A805                 db  8Eh
.eh_frame:000000000000A806                 db    3
.eh_frame:000000000000A807                 db  45h ; E
.eh_frame:000000000000A808                 db  0Eh
.eh_frame:000000000000A809                 db  20h
.eh_frame:000000000000A80A                 db  8Dh
.eh_frame:000000000000A80B                 db    4
.eh_frame:000000000000A80C                 db  42h ; B
.eh_frame:000000000000A80D                 db  0Eh
.eh_frame:000000000000A80E                 db  28h ; (
.eh_frame:000000000000A80F                 db  8Ch
.eh_frame:000000000000A810                 db    5
.eh_frame:000000000000A811                 db  48h ; H
.eh_frame:000000000000A812                 db  0Eh
.eh_frame:000000000000A813                 db  30h ; 0
.eh_frame:000000000000A814                 db  86h
.eh_frame:000000000000A815                 db    6
.eh_frame:000000000000A816                 db  41h ; A
.eh_frame:000000000000A817                 db  0Eh
.eh_frame:000000000000A818                 db  38h ; 8
.eh_frame:000000000000A819                 db  83h
.eh_frame:000000000000A81A                 db    7
.eh_frame:000000000000A81B                 db  52h ; R
.eh_frame:000000000000A81C                 db  0Eh
.eh_frame:000000000000A81D                 db 0D0h
.eh_frame:000000000000A81E                 db    2
.eh_frame:000000000000A81F                 db    3
.eh_frame:000000000000A820                 db  50h ; P
.eh_frame:000000000000A821                 db    6
.eh_frame:000000000000A822                 db  0Ah
.eh_frame:000000000000A823                 db  0Eh
.eh_frame:000000000000A824                 db  38h ; 8
.eh_frame:000000000000A825                 db  41h ; A
.eh_frame:000000000000A826                 db  0Eh
.eh_frame:000000000000A827                 db  30h ; 0
.eh_frame:000000000000A828                 db  41h ; A
.eh_frame:000000000000A829                 db  0Eh
.eh_frame:000000000000A82A                 db  28h ; (
.eh_frame:000000000000A82B                 db  42h ; B
.eh_frame:000000000000A82C                 db  0Eh
.eh_frame:000000000000A82D                 db  20h
.eh_frame:000000000000A82E                 db  42h ; B
.eh_frame:000000000000A82F                 db  0Eh
.eh_frame:000000000000A830                 db  18h
.eh_frame:000000000000A831                 db  42h ; B
.eh_frame:000000000000A832                 db  0Eh
.eh_frame:000000000000A833                 db  10h
.eh_frame:000000000000A834                 db  42h ; B
.eh_frame:000000000000A835                 db  0Eh
.eh_frame:000000000000A836                 db    8
.eh_frame:000000000000A837                 db  41h ; A
.eh_frame:000000000000A838                 db  0Bh
.eh_frame:000000000000A839                 db    0
.eh_frame:000000000000A83A                 db    0
.eh_frame:000000000000A83B                 db    0
.eh_frame:000000000000A83C                 db    0
.eh_frame:000000000000A83D                 db    0
.eh_frame:000000000000A83E                 db    0
.eh_frame:000000000000A83F                 db    0
.eh_frame:000000000000A840                 db  10h
.eh_frame:000000000000A841                 db    0
.eh_frame:000000000000A842                 db    0
.eh_frame:000000000000A843                 db    0
.eh_frame:000000000000A844                 db 0DCh
.eh_frame:000000000000A845                 db    0
.eh_frame:000000000000A846                 db    0
.eh_frame:000000000000A847                 db    0
.eh_frame:000000000000A848                 db 0E8h
.eh_frame:000000000000A849                 db  88h
.eh_frame:000000000000A84A                 db 0FFh
.eh_frame:000000000000A84B                 db 0FFh
.eh_frame:000000000000A84C                 db    8
.eh_frame:000000000000A84D                 db    0
.eh_frame:000000000000A84E                 db    0
.eh_frame:000000000000A84F                 db    0
.eh_frame:000000000000A850                 db    0
.eh_frame:000000000000A851                 db    0
.eh_frame:000000000000A852                 db    0
.eh_frame:000000000000A853                 db    0
.eh_frame:000000000000A854                 db  10h
.eh_frame:000000000000A855                 db    0
.eh_frame:000000000000A856                 db    0
.eh_frame:000000000000A857                 db    0
.eh_frame:000000000000A858                 db 0F0h
.eh_frame:000000000000A859                 db    0
.eh_frame:000000000000A85A                 db    0
.eh_frame:000000000000A85B                 db    0
.eh_frame:000000000000A85C                 db 0E4h
.eh_frame:000000000000A85D                 db  88h
.eh_frame:000000000000A85E                 db 0FFh
.eh_frame:000000000000A85F                 db 0FFh
.eh_frame:000000000000A860                 db    8
.eh_frame:000000000000A861                 db    0
.eh_frame:000000000000A862                 db    0
.eh_frame:000000000000A863                 db    0
.eh_frame:000000000000A864                 db    0
.eh_frame:000000000000A865                 db    0
.eh_frame:000000000000A866                 db    0
.eh_frame:000000000000A867                 db    0
.eh_frame:000000000000A868                 db  2Ch ; ,
.eh_frame:000000000000A869                 db    0
.eh_frame:000000000000A86A                 db    0
.eh_frame:000000000000A86B                 db    0
.eh_frame:000000000000A86C                 db    4
.eh_frame:000000000000A86D                 db    1
.eh_frame:000000000000A86E                 db    0
.eh_frame:000000000000A86F                 db    0
.eh_frame:000000000000A870                 db 0E0h
.eh_frame:000000000000A871                 db  88h
.eh_frame:000000000000A872                 db 0FFh
.eh_frame:000000000000A873                 db 0FFh
.eh_frame:000000000000A874                 db 0A4h
.eh_frame:000000000000A875                 db    0
.eh_frame:000000000000A876                 db    0
.eh_frame:000000000000A877                 db    0
.eh_frame:000000000000A878                 db    0
.eh_frame:000000000000A879                 db  41h ; A
.eh_frame:000000000000A87A                 db  0Eh
.eh_frame:000000000000A87B                 db  10h
.eh_frame:000000000000A87C                 db  86h
.eh_frame:000000000000A87D                 db    2
.eh_frame:000000000000A87E                 db  41h ; A
.eh_frame:000000000000A87F                 db  0Eh
.eh_frame:000000000000A880                 db  18h
.eh_frame:000000000000A881                 db  83h
.eh_frame:000000000000A882                 db    3
.eh_frame:000000000000A883                 db  44h ; D
.eh_frame:000000000000A884                 db  0Eh
.eh_frame:000000000000A885                 db  20h
.eh_frame:000000000000A886                 db  7Ah ; z
.eh_frame:000000000000A887                 db  0Ah
.eh_frame:000000000000A888                 db  0Eh
.eh_frame:000000000000A889                 db  18h
.eh_frame:000000000000A88A                 db  41h ; A
.eh_frame:000000000000A88B                 db  0Eh
.eh_frame:000000000000A88C                 db  10h
.eh_frame:000000000000A88D                 db  41h ; A
.eh_frame:000000000000A88E                 db  0Eh
.eh_frame:000000000000A88F                 db    8
.eh_frame:000000000000A890                 db  41h ; A
.eh_frame:000000000000A891                 db  0Bh
.eh_frame:000000000000A892                 db    0
.eh_frame:000000000000A893                 db    0
.eh_frame:000000000000A894                 db    0
.eh_frame:000000000000A895                 db    0
.eh_frame:000000000000A896                 db    0
.eh_frame:000000000000A897                 db    0
.eh_frame:000000000000A898                 db  10h
.eh_frame:000000000000A899                 db    0
.eh_frame:000000000000A89A                 db    0
.eh_frame:000000000000A89B                 db    0
.eh_frame:000000000000A89C                 db  34h ; 4
.eh_frame:000000000000A89D                 db    1
.eh_frame:000000000000A89E                 db    0
.eh_frame:000000000000A89F                 db    0
.eh_frame:000000000000A8A0                 db  60h ; `
.eh_frame:000000000000A8A1                 db  89h
.eh_frame:000000000000A8A2                 db 0FFh
.eh_frame:000000000000A8A3                 db 0FFh
.eh_frame:000000000000A8A4                 db    5
.eh_frame:000000000000A8A5                 db    0
.eh_frame:000000000000A8A6                 db    0
.eh_frame:000000000000A8A7                 db    0
.eh_frame:000000000000A8A8                 db    0
.eh_frame:000000000000A8A9                 db    0
.eh_frame:000000000000A8AA                 db    0
.eh_frame:000000000000A8AB                 db    0
.eh_frame:000000000000A8AC                 db  18h
.eh_frame:000000000000A8AD                 db    0
.eh_frame:000000000000A8AE                 db    0
.eh_frame:000000000000A8AF                 db    0
.eh_frame:000000000000A8B0                 db  48h ; H
.eh_frame:000000000000A8B1                 db    1
.eh_frame:000000000000A8B2                 db    0
.eh_frame:000000000000A8B3                 db    0
.eh_frame:000000000000A8B4                 db  5Ch ; \
.eh_frame:000000000000A8B5                 db  89h
.eh_frame:000000000000A8B6                 db 0FFh
.eh_frame:000000000000A8B7                 db 0FFh
.eh_frame:000000000000A8B8                 db  22h ; "
.eh_frame:000000000000A8B9                 db    0
.eh_frame:000000000000A8BA                 db    0
.eh_frame:000000000000A8BB                 db    0
.eh_frame:000000000000A8BC                 db    0
.eh_frame:000000000000A8BD                 db  46h ; F
.eh_frame:000000000000A8BE                 db  0Eh
.eh_frame:000000000000A8BF                 db  10h
.eh_frame:000000000000A8C0                 db  83h
.eh_frame:000000000000A8C1                 db    2
.eh_frame:000000000000A8C2                 db  4Eh ; N
.eh_frame:000000000000A8C3                 db 0C3h
.eh_frame:000000000000A8C4                 db  0Eh
.eh_frame:000000000000A8C5                 db    8
.eh_frame:000000000000A8C6                 db    0
.eh_frame:000000000000A8C7                 db    0
.eh_frame:000000000000A8C8                 db  24h ; $
.eh_frame:000000000000A8C9                 db    0
.eh_frame:000000000000A8CA                 db    0
.eh_frame:000000000000A8CB                 db    0
.eh_frame:000000000000A8CC                 db  64h ; d
.eh_frame:000000000000A8CD                 db    1
.eh_frame:000000000000A8CE                 db    0
.eh_frame:000000000000A8CF                 db    0
.eh_frame:000000000000A8D0                 db  70h ; p
.eh_frame:000000000000A8D1                 db  89h
.eh_frame:000000000000A8D2                 db 0FFh
.eh_frame:000000000000A8D3                 db 0FFh
.eh_frame:000000000000A8D4                 db  42h ; B
.eh_frame:000000000000A8D5                 db    0
.eh_frame:000000000000A8D6                 db    0
.eh_frame:000000000000A8D7                 db    0
.eh_frame:000000000000A8D8                 db    0
.eh_frame:000000000000A8D9                 db  41h ; A
.eh_frame:000000000000A8DA                 db  0Eh
.eh_frame:000000000000A8DB                 db  10h
.eh_frame:000000000000A8DC                 db  86h
.eh_frame:000000000000A8DD                 db    2
.eh_frame:000000000000A8DE                 db  41h ; A
.eh_frame:000000000000A8DF                 db  0Eh
.eh_frame:000000000000A8E0                 db  18h
.eh_frame:000000000000A8E1                 db  83h
.eh_frame:000000000000A8E2                 db    3
.eh_frame:000000000000A8E3                 db  51h ; Q
.eh_frame:000000000000A8E4                 db  0Eh
.eh_frame:000000000000A8E5                 db  20h
.eh_frame:000000000000A8E6                 db  6Ah ; j
.eh_frame:000000000000A8E7                 db  0Eh
.eh_frame:000000000000A8E8                 db  18h
.eh_frame:000000000000A8E9                 db  43h ; C
.eh_frame:000000000000A8EA                 db  0Eh
.eh_frame:000000000000A8EB                 db  10h
.eh_frame:000000000000A8EC                 db  41h ; A
.eh_frame:000000000000A8ED                 db  0Eh
.eh_frame:000000000000A8EE                 db    8
.eh_frame:000000000000A8EF                 db    0
.eh_frame:000000000000A8F0                 db  4Ch ; L
.eh_frame:000000000000A8F1                 db    0
.eh_frame:000000000000A8F2                 db    0
.eh_frame:000000000000A8F3                 db    0
.eh_frame:000000000000A8F4                 db  8Ch
.eh_frame:000000000000A8F5                 db    1
.eh_frame:000000000000A8F6                 db    0
.eh_frame:000000000000A8F7                 db    0
.eh_frame:000000000000A8F8                 db  98h
.eh_frame:000000000000A8F9                 db  89h
.eh_frame:000000000000A8FA                 db 0FFh
.eh_frame:000000000000A8FB                 db 0FFh
.eh_frame:000000000000A8FC                 db 0AEh
.eh_frame:000000000000A8FD                 db    1
.eh_frame:000000000000A8FE                 db    0
.eh_frame:000000000000A8FF                 db    0
.eh_frame:000000000000A900                 db    0
.eh_frame:000000000000A901                 db  42h ; B
.eh_frame:000000000000A902                 db  0Eh
.eh_frame:000000000000A903                 db  10h
.eh_frame:000000000000A904                 db  8Fh
.eh_frame:000000000000A905                 db    2
.eh_frame:000000000000A906                 db  42h ; B
.eh_frame:000000000000A907                 db  0Eh
.eh_frame:000000000000A908                 db  18h
.eh_frame:000000000000A909                 db  8Eh
.eh_frame:000000000000A90A                 db    3
.eh_frame:000000000000A90B                 db  45h ; E
.eh_frame:000000000000A90C                 db  0Eh
.eh_frame:000000000000A90D                 db  20h
.eh_frame:000000000000A90E                 db  8Dh
.eh_frame:000000000000A90F                 db    4
.eh_frame:000000000000A910                 db  42h ; B
.eh_frame:000000000000A911                 db  0Eh
.eh_frame:000000000000A912                 db  28h ; (
.eh_frame:000000000000A913                 db  8Ch
.eh_frame:000000000000A914                 db    5
.eh_frame:000000000000A915                 db  44h ; D
.eh_frame:000000000000A916                 db  0Eh
.eh_frame:000000000000A917                 db  30h ; 0
.eh_frame:000000000000A918                 db  86h
.eh_frame:000000000000A919                 db    6
.eh_frame:000000000000A91A                 db  41h ; A
.eh_frame:000000000000A91B                 db  0Eh
.eh_frame:000000000000A91C                 db  38h ; 8
.eh_frame:000000000000A91D                 db  83h
.eh_frame:000000000000A91E                 db    7
.eh_frame:000000000000A91F                 db  44h ; D
.eh_frame:000000000000A920                 db  0Eh
.eh_frame:000000000000A921                 db  50h ; P
.eh_frame:000000000000A922                 db    2
.eh_frame:000000000000A923                 db 0D0h
.eh_frame:000000000000A924                 db  0Ah
.eh_frame:000000000000A925                 db  0Eh
.eh_frame:000000000000A926                 db  38h ; 8
.eh_frame:000000000000A927                 db  44h ; D
.eh_frame:000000000000A928                 db  0Eh
.eh_frame:000000000000A929                 db  30h ; 0
.eh_frame:000000000000A92A                 db  41h ; A
.eh_frame:000000000000A92B                 db  0Eh
.eh_frame:000000000000A92C                 db  28h ; (
.eh_frame:000000000000A92D                 db  42h ; B
.eh_frame:000000000000A92E                 db  0Eh
.eh_frame:000000000000A92F                 db  20h
.eh_frame:000000000000A930                 db  42h ; B
.eh_frame:000000000000A931                 db  0Eh
.eh_frame:000000000000A932                 db  18h
.eh_frame:000000000000A933                 db  42h ; B
.eh_frame:000000000000A934                 db  0Eh
.eh_frame:000000000000A935                 db  10h
.eh_frame:000000000000A936                 db  42h ; B
.eh_frame:000000000000A937                 db  0Eh
.eh_frame:000000000000A938                 db    8
.eh_frame:000000000000A939                 db  47h ; G
.eh_frame:000000000000A93A                 db  0Bh
.eh_frame:000000000000A93B                 db    0
.eh_frame:000000000000A93C                 db    0
.eh_frame:000000000000A93D                 db    0
.eh_frame:000000000000A93E                 db    0
.eh_frame:000000000000A93F                 db    0
.eh_frame:000000000000A940                 db  10h
.eh_frame:000000000000A941                 db    0
.eh_frame:000000000000A942                 db    0
.eh_frame:000000000000A943                 db    0
.eh_frame:000000000000A944                 db 0DCh
.eh_frame:000000000000A945                 db    1
.eh_frame:000000000000A946                 db    0
.eh_frame:000000000000A947                 db    0
.eh_frame:000000000000A948                 db 0F8h
.eh_frame:000000000000A949                 db  8Ah
.eh_frame:000000000000A94A                 db 0FFh
.eh_frame:000000000000A94B                 db 0FFh
.eh_frame:000000000000A94C                 db  10h
.eh_frame:000000000000A94D                 db    0
.eh_frame:000000000000A94E                 db    0
.eh_frame:000000000000A94F                 db    0
.eh_frame:000000000000A950                 db    0
.eh_frame:000000000000A951                 db    0
.eh_frame:000000000000A952                 db    0
.eh_frame:000000000000A953                 db    0
.eh_frame:000000000000A954                 db  60h ; `
.eh_frame:000000000000A955                 db    0
.eh_frame:000000000000A956                 db    0
.eh_frame:000000000000A957                 db    0
.eh_frame:000000000000A958                 db 0F0h
.eh_frame:000000000000A959                 db    1
.eh_frame:000000000000A95A                 db    0
.eh_frame:000000000000A95B                 db    0
.eh_frame:000000000000A95C                 db 0F4h
.eh_frame:000000000000A95D                 db  8Ah
.eh_frame:000000000000A95E                 db 0FFh
.eh_frame:000000000000A95F                 db 0FFh
.eh_frame:000000000000A960                 db    8
.eh_frame:000000000000A961                 db    1
.eh_frame:000000000000A962                 db    0
.eh_frame:000000000000A963                 db    0
.eh_frame:000000000000A964                 db    0
.eh_frame:000000000000A965                 db  42h ; B
.eh_frame:000000000000A966                 db  0Eh
.eh_frame:000000000000A967                 db  10h
.eh_frame:000000000000A968                 db  8Fh
.eh_frame:000000000000A969                 db    2
.eh_frame:000000000000A96A                 db  42h ; B
.eh_frame:000000000000A96B                 db  0Eh
.eh_frame:000000000000A96C                 db  18h
.eh_frame:000000000000A96D                 db  8Eh
.eh_frame:000000000000A96E                 db    3
.eh_frame:000000000000A96F                 db  42h ; B
.eh_frame:000000000000A970                 db  0Eh
.eh_frame:000000000000A971                 db  20h
.eh_frame:000000000000A972                 db  8Dh
.eh_frame:000000000000A973                 db    4
.eh_frame:000000000000A974                 db  42h ; B
.eh_frame:000000000000A975                 db  0Eh
.eh_frame:000000000000A976                 db  28h ; (
.eh_frame:000000000000A977                 db  8Ch
.eh_frame:000000000000A978                 db    5
.eh_frame:000000000000A979                 db  41h ; A
.eh_frame:000000000000A97A                 db  0Eh
.eh_frame:000000000000A97B                 db  30h ; 0
.eh_frame:000000000000A97C                 db  86h
.eh_frame:000000000000A97D                 db    6
.eh_frame:000000000000A97E                 db  41h ; A
.eh_frame:000000000000A97F                 db  0Eh
.eh_frame:000000000000A980                 db  38h ; 8
.eh_frame:000000000000A981                 db  83h
.eh_frame:000000000000A982                 db    7
.eh_frame:000000000000A983                 db  44h ; D
.eh_frame:000000000000A984                 db  0Eh
.eh_frame:000000000000A985                 db  50h ; P
.eh_frame:000000000000A986                 db    2
.eh_frame:000000000000A987                 db  96h
.eh_frame:000000000000A988                 db  0Ah
.eh_frame:000000000000A989                 db  0Eh
.eh_frame:000000000000A98A                 db  38h ; 8
.eh_frame:000000000000A98B                 db  41h ; A
.eh_frame:000000000000A98C                 db  0Eh
.eh_frame:000000000000A98D                 db  30h ; 0
.eh_frame:000000000000A98E                 db  41h ; A
.eh_frame:000000000000A98F                 db  0Eh
.eh_frame:000000000000A990                 db  28h ; (
.eh_frame:000000000000A991                 db  42h ; B
.eh_frame:000000000000A992                 db  0Eh
.eh_frame:000000000000A993                 db  20h
.eh_frame:000000000000A994                 db  42h ; B
.eh_frame:000000000000A995                 db  0Eh
.eh_frame:000000000000A996                 db  18h
.eh_frame:000000000000A997                 db  42h ; B
.eh_frame:000000000000A998                 db  0Eh
.eh_frame:000000000000A999                 db  10h
.eh_frame:000000000000A99A                 db  42h ; B
.eh_frame:000000000000A99B                 db  0Eh
.eh_frame:000000000000A99C                 db    8
.eh_frame:000000000000A99D                 db  42h ; B
.eh_frame:000000000000A99E                 db  0Bh
.eh_frame:000000000000A99F                 db    2
.eh_frame:000000000000A9A0                 db  44h ; D
.eh_frame:000000000000A9A1                 db  0Ah
.eh_frame:000000000000A9A2                 db  0Eh
.eh_frame:000000000000A9A3                 db  38h ; 8
.eh_frame:000000000000A9A4                 db  43h ; C
.eh_frame:000000000000A9A5                 db  0Eh
.eh_frame:000000000000A9A6                 db  30h ; 0
.eh_frame:000000000000A9A7                 db  41h ; A
.eh_frame:000000000000A9A8                 db  0Eh
.eh_frame:000000000000A9A9                 db  28h ; (
.eh_frame:000000000000A9AA                 db  42h ; B
.eh_frame:000000000000A9AB                 db  0Eh
.eh_frame:000000000000A9AC                 db  20h
.eh_frame:000000000000A9AD                 db  42h ; B
.eh_frame:000000000000A9AE                 db  0Eh
.eh_frame:000000000000A9AF                 db  18h
.eh_frame:000000000000A9B0                 db  42h ; B
.eh_frame:000000000000A9B1                 db  0Eh
.eh_frame:000000000000A9B2                 db  10h
.eh_frame:000000000000A9B3                 db  42h ; B
.eh_frame:000000000000A9B4                 db  0Eh
.eh_frame:000000000000A9B5                 db    8
.eh_frame:000000000000A9B6                 db  41h ; A
.eh_frame:000000000000A9B7                 db  0Bh
.eh_frame:000000000000A9B8                 db  10h
.eh_frame:000000000000A9B9                 db    0
.eh_frame:000000000000A9BA                 db    0
.eh_frame:000000000000A9BB                 db    0
.eh_frame:000000000000A9BC                 db  54h ; T
.eh_frame:000000000000A9BD                 db    2
.eh_frame:000000000000A9BE                 db    0
.eh_frame:000000000000A9BF                 db    0
.eh_frame:000000000000A9C0                 db 0A0h
.eh_frame:000000000000A9C1                 db  8Bh
.eh_frame:000000000000A9C2                 db 0FFh
.eh_frame:000000000000A9C3                 db 0FFh
.eh_frame:000000000000A9C4                 db  0Ah
.eh_frame:000000000000A9C5                 db    0
.eh_frame:000000000000A9C6                 db    0
.eh_frame:000000000000A9C7                 db    0
.eh_frame:000000000000A9C8                 db    0
.eh_frame:000000000000A9C9                 db    0
.eh_frame:000000000000A9CA                 db    0
.eh_frame:000000000000A9CB                 db    0
.eh_frame:000000000000A9CC                 db  10h
.eh_frame:000000000000A9CD                 db    0
.eh_frame:000000000000A9CE                 db    0
.eh_frame:000000000000A9CF                 db    0
.eh_frame:000000000000A9D0                 db  68h ; h
.eh_frame:000000000000A9D1                 db    2
.eh_frame:000000000000A9D2                 db    0
.eh_frame:000000000000A9D3                 db    0
.eh_frame:000000000000A9D4                 db  9Ch
.eh_frame:000000000000A9D5                 db  8Bh
.eh_frame:000000000000A9D6                 db 0FFh
.eh_frame:000000000000A9D7                 db 0FFh
.eh_frame:000000000000A9D8                 db    9
.eh_frame:000000000000A9D9                 db    0
.eh_frame:000000000000A9DA                 db    0
.eh_frame:000000000000A9DB                 db    0
.eh_frame:000000000000A9DC                 db    0
.eh_frame:000000000000A9DD                 db    0
.eh_frame:000000000000A9DE                 db    0
.eh_frame:000000000000A9DF                 db    0
.eh_frame:000000000000A9E0                 db  1Ch
.eh_frame:000000000000A9E1                 db    0
.eh_frame:000000000000A9E2                 db    0
.eh_frame:000000000000A9E3                 db    0
.eh_frame:000000000000A9E4                 db  7Ch ; |
.eh_frame:000000000000A9E5                 db    2
.eh_frame:000000000000A9E6                 db    0
.eh_frame:000000000000A9E7                 db    0
.eh_frame:000000000000A9E8                 db  98h
.eh_frame:000000000000A9E9                 db  8Bh
.eh_frame:000000000000A9EA                 db 0FFh
.eh_frame:000000000000A9EB                 db 0FFh
.eh_frame:000000000000A9EC                 db  9Fh
.eh_frame:000000000000A9ED                 db    0
.eh_frame:000000000000A9EE                 db    0
.eh_frame:000000000000A9EF                 db    0
.eh_frame:000000000000A9F0                 db    0
.eh_frame:000000000000A9F1                 db  44h ; D
.eh_frame:000000000000A9F2                 db  0Eh
.eh_frame:000000000000A9F3                 db  10h
.eh_frame:000000000000A9F4                 db  83h
.eh_frame:000000000000A9F5                 db    2
.eh_frame:000000000000A9F6                 db    2
.eh_frame:000000000000A9F7                 db  78h ; x
.eh_frame:000000000000A9F8                 db  0Ah
.eh_frame:000000000000A9F9                 db  0Eh
.eh_frame:000000000000A9FA                 db    8
.eh_frame:000000000000A9FB                 db  41h ; A
.eh_frame:000000000000A9FC                 db  0Bh
.eh_frame:000000000000A9FD                 db    0
.eh_frame:000000000000A9FE                 db    0
.eh_frame:000000000000A9FF                 db    0
.eh_frame:000000000000AA00                 db  40h ; @
.eh_frame:000000000000AA01                 db    0
.eh_frame:000000000000AA02                 db    0
.eh_frame:000000000000AA03                 db    0
.eh_frame:000000000000AA04                 db  9Ch
.eh_frame:000000000000AA05                 db    2
.eh_frame:000000000000AA06                 db    0
.eh_frame:000000000000AA07                 db    0
.eh_frame:000000000000AA08                 db  18h
.eh_frame:000000000000AA09                 db  8Ch
.eh_frame:000000000000AA0A                 db 0FFh
.eh_frame:000000000000AA0B                 db 0FFh
.eh_frame:000000000000AA0C                 db 0E7h
.eh_frame:000000000000AA0D                 db    0
.eh_frame:000000000000AA0E                 db    0
.eh_frame:000000000000AA0F                 db    0
.eh_frame:000000000000AA10                 db    0
.eh_frame:000000000000AA11                 db  41h ; A
.eh_frame:000000000000AA12                 db  0Eh
.eh_frame:000000000000AA13                 db  10h
.eh_frame:000000000000AA14                 db  86h
.eh_frame:000000000000AA15                 db    2
.eh_frame:000000000000AA16                 db  41h ; A
.eh_frame:000000000000AA17                 db  0Eh
.eh_frame:000000000000AA18                 db  18h
.eh_frame:000000000000AA19                 db  83h
.eh_frame:000000000000AA1A                 db    3
.eh_frame:000000000000AA1B                 db  49h ; I
.eh_frame:000000000000AA1C                 db  0Eh
.eh_frame:000000000000AA1D                 db  20h
.eh_frame:000000000000AA1E                 db  6Eh ; n
.eh_frame:000000000000AA1F                 db  0Ah
.eh_frame:000000000000AA20                 db  0Eh
.eh_frame:000000000000AA21                 db  18h
.eh_frame:000000000000AA22                 db  41h ; A
.eh_frame:000000000000AA23                 db  0Eh
.eh_frame:000000000000AA24                 db  10h
.eh_frame:000000000000AA25                 db  41h ; A
.eh_frame:000000000000AA26                 db  0Eh
.eh_frame:000000000000AA27                 db    8
.eh_frame:000000000000AA28                 db  45h ; E
.eh_frame:000000000000AA29                 db  0Bh
.eh_frame:000000000000AA2A                 db    2
.eh_frame:000000000000AA2B                 db  4Ah ; J
.eh_frame:000000000000AA2C                 db  0Ah
.eh_frame:000000000000AA2D                 db  0Eh
.eh_frame:000000000000AA2E                 db  18h
.eh_frame:000000000000AA2F                 db  41h ; A
.eh_frame:000000000000AA30                 db  0Eh
.eh_frame:000000000000AA31                 db  10h
.eh_frame:000000000000AA32                 db  41h ; A
.eh_frame:000000000000AA33                 db  0Eh
.eh_frame:000000000000AA34                 db    8
.eh_frame:000000000000AA35                 db  44h ; D
.eh_frame:000000000000AA36                 db  0Bh
.eh_frame:000000000000AA37                 db    2
.eh_frame:000000000000AA38                 db  54h ; T
.eh_frame:000000000000AA39                 db  0Eh
.eh_frame:000000000000AA3A                 db  18h
.eh_frame:000000000000AA3B                 db  41h ; A
.eh_frame:000000000000AA3C                 db  0Eh
.eh_frame:000000000000AA3D                 db  10h
.eh_frame:000000000000AA3E                 db  41h ; A
.eh_frame:000000000000AA3F                 db  0Eh
.eh_frame:000000000000AA40                 db    8
.eh_frame:000000000000AA41                 db    0
.eh_frame:000000000000AA42                 db    0
.eh_frame:000000000000AA43                 db    0
.eh_frame:000000000000AA44                 db  74h ; t
.eh_frame:000000000000AA45                 db    0
.eh_frame:000000000000AA46                 db    0
.eh_frame:000000000000AA47                 db    0
.eh_frame:000000000000AA48                 db 0E0h
.eh_frame:000000000000AA49                 db    2
.eh_frame:000000000000AA4A                 db    0
.eh_frame:000000000000AA4B                 db    0
.eh_frame:000000000000AA4C                 db 0C4h
.eh_frame:000000000000AA4D                 db  8Ch
.eh_frame:000000000000AA4E                 db 0FFh
.eh_frame:000000000000AA4F                 db 0FFh
.eh_frame:000000000000AA50                 db  34h ; 4
.eh_frame:000000000000AA51                 db  12h
.eh_frame:000000000000AA52                 db    0
.eh_frame:000000000000AA53                 db    0
.eh_frame:000000000000AA54                 db    0
.eh_frame:000000000000AA55                 db  42h ; B
.eh_frame:000000000000AA56                 db  0Eh
.eh_frame:000000000000AA57                 db  10h
.eh_frame:000000000000AA58                 db  8Fh
.eh_frame:000000000000AA59                 db    2
.eh_frame:000000000000AA5A                 db  42h ; B
.eh_frame:000000000000AA5B                 db  0Eh
.eh_frame:000000000000AA5C                 db  18h
.eh_frame:000000000000AA5D                 db  8Eh
.eh_frame:000000000000AA5E                 db    3
.eh_frame:000000000000AA5F                 db  45h ; E
.eh_frame:000000000000AA60                 db  0Eh
.eh_frame:000000000000AA61                 db  20h
.eh_frame:000000000000AA62                 db  8Dh
.eh_frame:000000000000AA63                 db    4
.eh_frame:000000000000AA64                 db  42h ; B
.eh_frame:000000000000AA65                 db  0Eh
.eh_frame:000000000000AA66                 db  28h ; (
.eh_frame:000000000000AA67                 db  8Ch
.eh_frame:000000000000AA68                 db    5
.eh_frame:000000000000AA69                 db  44h ; D
.eh_frame:000000000000AA6A                 db  0Eh
.eh_frame:000000000000AA6B                 db  30h ; 0
.eh_frame:000000000000AA6C                 db  86h
.eh_frame:000000000000AA6D                 db    6
.eh_frame:000000000000AA6E                 db  41h ; A
.eh_frame:000000000000AA6F                 db  0Eh
.eh_frame:000000000000AA70                 db  38h ; 8
.eh_frame:000000000000AA71                 db  83h
.eh_frame:000000000000AA72                 db    7
.eh_frame:000000000000AA73                 db  53h ; S
.eh_frame:000000000000AA74                 db  0Eh
.eh_frame:000000000000AA75                 db 0F0h
.eh_frame:000000000000AA76                 db    1
.eh_frame:000000000000AA77                 db    3
.eh_frame:000000000000AA78                 db  81h
.eh_frame:000000000000AA79                 db  0Bh
.eh_frame:000000000000AA7A                 db  0Eh
.eh_frame:000000000000AA7B                 db 0F8h
.eh_frame:000000000000AA7C                 db    1
.eh_frame:000000000000AA7D                 db  4Ah ; J
.eh_frame:000000000000AA7E                 db  0Eh
.eh_frame:000000000000AA7F                 db  80h
.eh_frame:000000000000AA80                 db    2
.eh_frame:000000000000AA81                 db  44h ; D
.eh_frame:000000000000AA82                 db  0Eh
.eh_frame:000000000000AA83                 db  88h
.eh_frame:000000000000AA84                 db    2
.eh_frame:000000000000AA85                 db  45h ; E
.eh_frame:000000000000AA86                 db  0Eh
.eh_frame:000000000000AA87                 db  90h
.eh_frame:000000000000AA88                 db    2
.eh_frame:000000000000AA89                 db  5Fh ; _
.eh_frame:000000000000AA8A                 db  0Eh
.eh_frame:000000000000AA8B                 db 0F0h
.eh_frame:000000000000AA8C                 db    1
.eh_frame:000000000000AA8D                 db  64h ; d
.eh_frame:000000000000AA8E                 db  0Ah
.eh_frame:000000000000AA8F                 db  0Eh
.eh_frame:000000000000AA90                 db  38h ; 8
.eh_frame:000000000000AA91                 db  41h ; A
.eh_frame:000000000000AA92                 db  0Eh
.eh_frame:000000000000AA93                 db  30h ; 0
.eh_frame:000000000000AA94                 db  41h ; A
.eh_frame:000000000000AA95                 db  0Eh
.eh_frame:000000000000AA96                 db  28h ; (
.eh_frame:000000000000AA97                 db  42h ; B
.eh_frame:000000000000AA98                 db  0Eh
.eh_frame:000000000000AA99                 db  20h
.eh_frame:000000000000AA9A                 db  42h ; B
.eh_frame:000000000000AA9B                 db  0Eh
.eh_frame:000000000000AA9C                 db  18h
.eh_frame:000000000000AA9D                 db  42h ; B
.eh_frame:000000000000AA9E                 db  0Eh
.eh_frame:000000000000AA9F                 db  10h
.eh_frame:000000000000AAA0                 db  42h ; B
.eh_frame:000000000000AAA1                 db  0Eh
.eh_frame:000000000000AAA2                 db    8
.eh_frame:000000000000AAA3                 db  44h ; D
.eh_frame:000000000000AAA4                 db  0Bh
.eh_frame:000000000000AAA5                 db    3
.eh_frame:000000000000AAA6                 db  99h
.eh_frame:000000000000AAA7                 db    5
.eh_frame:000000000000AAA8                 db  0Eh
.eh_frame:000000000000AAA9                 db 0F8h
.eh_frame:000000000000AAAA                 db    1
.eh_frame:000000000000AAAB                 db  4Dh ; M
.eh_frame:000000000000AAAC                 db  0Eh
.eh_frame:000000000000AAAD                 db  80h
.eh_frame:000000000000AAAE                 db    2
.eh_frame:000000000000AAAF                 db  44h ; D
.eh_frame:000000000000AAB0                 db  0Eh
.eh_frame:000000000000AAB1                 db  88h
.eh_frame:000000000000AAB2                 db    2
.eh_frame:000000000000AAB3                 db  47h ; G
.eh_frame:000000000000AAB4                 db  0Eh
.eh_frame:000000000000AAB5                 db  90h
.eh_frame:000000000000AAB6                 db    2
.eh_frame:000000000000AAB7                 db  5Bh ; [
.eh_frame:000000000000AAB8                 db  0Eh
.eh_frame:000000000000AAB9                 db 0F0h
.eh_frame:000000000000AABA                 db    1
.eh_frame:000000000000AABB                 db    0
.eh_frame:000000000000AABC                 db  68h ; h
.eh_frame:000000000000AABD                 db    0
.eh_frame:000000000000AABE                 db    0
.eh_frame:000000000000AABF                 db    0
.eh_frame:000000000000AAC0                 db  58h ; X
.eh_frame:000000000000AAC1                 db    3
.eh_frame:000000000000AAC2                 db    0
.eh_frame:000000000000AAC3                 db    0
.eh_frame:000000000000AAC4                 db  8Ch
.eh_frame:000000000000AAC5                 db  9Eh
.eh_frame:000000000000AAC6                 db 0FFh
.eh_frame:000000000000AAC7                 db 0FFh
.eh_frame:000000000000AAC8                 db 0ABh
.eh_frame:000000000000AAC9                 db    1
.eh_frame:000000000000AACA                 db    0
.eh_frame:000000000000AACB                 db    0
.eh_frame:000000000000AACC                 db    0
.eh_frame:000000000000AACD                 db  42h ; B
.eh_frame:000000000000AACE                 db  0Eh
.eh_frame:000000000000AACF                 db  10h
.eh_frame:000000000000AAD0                 db  8Fh
.eh_frame:000000000000AAD1                 db    2
.eh_frame:000000000000AAD2                 db  42h ; B
.eh_frame:000000000000AAD3                 db  0Eh
.eh_frame:000000000000AAD4                 db  18h
.eh_frame:000000000000AAD5                 db  8Eh
.eh_frame:000000000000AAD6                 db    3
.eh_frame:000000000000AAD7                 db  45h ; E
.eh_frame:000000000000AAD8                 db  0Eh
.eh_frame:000000000000AAD9                 db  20h
.eh_frame:000000000000AADA                 db  8Dh
.eh_frame:000000000000AADB                 db    4
.eh_frame:000000000000AADC                 db  42h ; B
.eh_frame:000000000000AADD                 db  0Eh
.eh_frame:000000000000AADE                 db  28h ; (
.eh_frame:000000000000AADF                 db  8Ch
.eh_frame:000000000000AAE0                 db    5
.eh_frame:000000000000AAE1                 db  44h ; D
.eh_frame:000000000000AAE2                 db  0Eh
.eh_frame:000000000000AAE3                 db  30h ; 0
.eh_frame:000000000000AAE4                 db  86h
.eh_frame:000000000000AAE5                 db    6
.eh_frame:000000000000AAE6                 db  41h ; A
.eh_frame:000000000000AAE7                 db  0Eh
.eh_frame:000000000000AAE8                 db  38h ; 8
.eh_frame:000000000000AAE9                 db  83h
.eh_frame:000000000000AAEA                 db    7
.eh_frame:000000000000AAEB                 db  47h ; G
.eh_frame:000000000000AAEC                 db  0Eh
.eh_frame:000000000000AAED                 db  60h ; `
.eh_frame:000000000000AAEE                 db    2
.eh_frame:000000000000AAEF                 db  99h
.eh_frame:000000000000AAF0                 db  0Eh
.eh_frame:000000000000AAF1                 db  68h ; h
.eh_frame:000000000000AAF2                 db  5Fh ; _
.eh_frame:000000000000AAF3                 db  0Eh
.eh_frame:000000000000AAF4                 db  70h ; p
.eh_frame:000000000000AAF5                 db  46h ; F
.eh_frame:000000000000AAF6                 db  0Eh
.eh_frame:000000000000AAF7                 db  78h ; x
.eh_frame:000000000000AAF8                 db  42h ; B
.eh_frame:000000000000AAF9                 db  0Eh
.eh_frame:000000000000AAFA                 db  80h
.eh_frame:000000000000AAFB                 db    1
.eh_frame:000000000000AAFC                 db  59h ; Y
.eh_frame:000000000000AAFD                 db  0Eh
.eh_frame:000000000000AAFE                 db  60h ; `
.eh_frame:000000000000AAFF                 db    2
.eh_frame:000000000000AB00                 db  40h ; @
.eh_frame:000000000000AB01                 db  0Eh
.eh_frame:000000000000AB02                 db  68h ; h
.eh_frame:000000000000AB03                 db  4Bh ; K
.eh_frame:000000000000AB04                 db  0Eh
.eh_frame:000000000000AB05                 db  70h ; p
.eh_frame:000000000000AB06                 db  43h ; C
.eh_frame:000000000000AB07                 db  0Eh
.eh_frame:000000000000AB08                 db  78h ; x
.eh_frame:000000000000AB09                 db  45h ; E
.eh_frame:000000000000AB0A                 db  0Eh
.eh_frame:000000000000AB0B                 db  80h
.eh_frame:000000000000AB0C                 db    1
.eh_frame:000000000000AB0D                 db  5Eh ; ^
.eh_frame:000000000000AB0E                 db  0Eh
.eh_frame:000000000000AB0F                 db  60h ; `
.eh_frame:000000000000AB10                 db  4Ch ; L
.eh_frame:000000000000AB11                 db  0Ah
.eh_frame:000000000000AB12                 db  0Eh
.eh_frame:000000000000AB13                 db  38h ; 8
.eh_frame:000000000000AB14                 db  44h ; D
.eh_frame:000000000000AB15                 db  0Eh
.eh_frame:000000000000AB16                 db  30h ; 0
.eh_frame:000000000000AB17                 db  41h ; A
.eh_frame:000000000000AB18                 db  0Eh
.eh_frame:000000000000AB19                 db  28h ; (
.eh_frame:000000000000AB1A                 db  42h ; B
.eh_frame:000000000000AB1B                 db  0Eh
.eh_frame:000000000000AB1C                 db  20h
.eh_frame:000000000000AB1D                 db  42h ; B
.eh_frame:000000000000AB1E                 db  0Eh
.eh_frame:000000000000AB1F                 db  18h
.eh_frame:000000000000AB20                 db  42h ; B
.eh_frame:000000000000AB21                 db  0Eh
.eh_frame:000000000000AB22                 db  10h
.eh_frame:000000000000AB23                 db  42h ; B
.eh_frame:000000000000AB24                 db  0Eh
.eh_frame:000000000000AB25                 db    8
.eh_frame:000000000000AB26                 db  46h ; F
.eh_frame:000000000000AB27                 db  0Bh
.eh_frame:000000000000AB28                 db  28h ; (
.eh_frame:000000000000AB29                 db    0
.eh_frame:000000000000AB2A                 db    0
.eh_frame:000000000000AB2B                 db    0
.eh_frame:000000000000AB2C                 db 0C4h
.eh_frame:000000000000AB2D                 db    3
.eh_frame:000000000000AB2E                 db    0
.eh_frame:000000000000AB2F                 db    0
.eh_frame:000000000000AB30                 db 0D0h
.eh_frame:000000000000AB31                 db  9Fh
.eh_frame:000000000000AB32                 db 0FFh
.eh_frame:000000000000AB33                 db 0FFh
.eh_frame:000000000000AB34                 db  36h ; 6
.eh_frame:000000000000AB35                 db    0
.eh_frame:000000000000AB36                 db    0
.eh_frame:000000000000AB37                 db    0
.eh_frame:000000000000AB38                 db    0
.eh_frame:000000000000AB39                 db  42h ; B
.eh_frame:000000000000AB3A                 db  0Eh
.eh_frame:000000000000AB3B                 db  10h
.eh_frame:000000000000AB3C                 db  8Ch
.eh_frame:000000000000AB3D                 db    2
.eh_frame:000000000000AB3E                 db  41h ; A
.eh_frame:000000000000AB3F                 db  0Eh
.eh_frame:000000000000AB40                 db  18h
.eh_frame:000000000000AB41                 db  86h
.eh_frame:000000000000AB42                 db    3
.eh_frame:000000000000AB43                 db  41h ; A
.eh_frame:000000000000AB44                 db  0Eh
.eh_frame:000000000000AB45                 db  20h
.eh_frame:000000000000AB46                 db  83h
.eh_frame:000000000000AB47                 db    4
.eh_frame:000000000000AB48                 db  6Eh ; n
.eh_frame:000000000000AB49                 db  0Eh
.eh_frame:000000000000AB4A                 db  18h
.eh_frame:000000000000AB4B                 db  41h ; A
.eh_frame:000000000000AB4C                 db  0Eh
.eh_frame:000000000000AB4D                 db  10h
.eh_frame:000000000000AB4E                 db  42h ; B
.eh_frame:000000000000AB4F                 db  0Eh
.eh_frame:000000000000AB50                 db    8
.eh_frame:000000000000AB51                 db    0
.eh_frame:000000000000AB52                 db    0
.eh_frame:000000000000AB53                 db    0
.eh_frame:000000000000AB54                 db  10h
.eh_frame:000000000000AB55                 db    0
.eh_frame:000000000000AB56                 db    0
.eh_frame:000000000000AB57                 db    0
.eh_frame:000000000000AB58                 db 0F0h
.eh_frame:000000000000AB59                 db    3
.eh_frame:000000000000AB5A                 db    0
.eh_frame:000000000000AB5B                 db    0
.eh_frame:000000000000AB5C                 db 0E4h
.eh_frame:000000000000AB5D                 db  9Fh
.eh_frame:000000000000AB5E                 db 0FFh
.eh_frame:000000000000AB5F                 db 0FFh
.eh_frame:000000000000AB60                 db  11h
.eh_frame:000000000000AB61                 db    0
.eh_frame:000000000000AB62                 db    0
.eh_frame:000000000000AB63                 db    0
.eh_frame:000000000000AB64                 db    0
.eh_frame:000000000000AB65                 db    0
.eh_frame:000000000000AB66                 db    0
.eh_frame:000000000000AB67                 db    0
.eh_frame:000000000000AB68                 db  10h
.eh_frame:000000000000AB69                 db    0
.eh_frame:000000000000AB6A                 db    0
.eh_frame:000000000000AB6B                 db    0
.eh_frame:000000000000AB6C                 db    4
.eh_frame:000000000000AB6D                 db    4
.eh_frame:000000000000AB6E                 db    0
.eh_frame:000000000000AB6F                 db    0
.eh_frame:000000000000AB70                 db 0F0h
.eh_frame:000000000000AB71                 db  9Fh
.eh_frame:000000000000AB72                 db 0FFh
.eh_frame:000000000000AB73                 db 0FFh
.eh_frame:000000000000AB74                 db  11h
.eh_frame:000000000000AB75                 db    0
.eh_frame:000000000000AB76                 db    0
.eh_frame:000000000000AB77                 db    0
.eh_frame:000000000000AB78                 db    0
.eh_frame:000000000000AB79                 db    0
.eh_frame:000000000000AB7A                 db    0
.eh_frame:000000000000AB7B                 db    0
.eh_frame:000000000000AB7C                 db  10h
.eh_frame:000000000000AB7D                 db    0
.eh_frame:000000000000AB7E                 db    0
.eh_frame:000000000000AB7F                 db    0
.eh_frame:000000000000AB80                 db  18h
.eh_frame:000000000000AB81                 db    4
.eh_frame:000000000000AB82                 db    0
.eh_frame:000000000000AB83                 db    0
.eh_frame:000000000000AB84                 db 0FCh
.eh_frame:000000000000AB85                 db  9Fh
.eh_frame:000000000000AB86                 db 0FFh
.eh_frame:000000000000AB87                 db 0FFh
.eh_frame:000000000000AB88                 db  35h ; 5
.eh_frame:000000000000AB89                 db    0
.eh_frame:000000000000AB8A                 db    0
.eh_frame:000000000000AB8B                 db    0
.eh_frame:000000000000AB8C                 db    0
.eh_frame:000000000000AB8D                 db    0
.eh_frame:000000000000AB8E                 db    0
.eh_frame:000000000000AB8F                 db    0
.eh_frame:000000000000AB90                 db  10h
.eh_frame:000000000000AB91                 db    0
.eh_frame:000000000000AB92                 db    0
.eh_frame:000000000000AB93                 db    0
.eh_frame:000000000000AB94                 db  2Ch ; ,
.eh_frame:000000000000AB95                 db    4
.eh_frame:000000000000AB96                 db    0
.eh_frame:000000000000AB97                 db    0
.eh_frame:000000000000AB98                 db  28h ; (
.eh_frame:000000000000AB99                 db 0A0h
.eh_frame:000000000000AB9A                 db 0FFh
.eh_frame:000000000000AB9B                 db 0FFh
.eh_frame:000000000000AB9C                 db  15h
.eh_frame:000000000000AB9D                 db    0
.eh_frame:000000000000AB9E                 db    0
.eh_frame:000000000000AB9F                 db    0
.eh_frame:000000000000ABA0                 db    0
.eh_frame:000000000000ABA1                 db    0
.eh_frame:000000000000ABA2                 db    0
.eh_frame:000000000000ABA3                 db    0
.eh_frame:000000000000ABA4                 db  10h
.eh_frame:000000000000ABA5                 db    0
.eh_frame:000000000000ABA6                 db    0
.eh_frame:000000000000ABA7                 db    0
.eh_frame:000000000000ABA8                 db  40h ; @
.eh_frame:000000000000ABA9                 db    4
.eh_frame:000000000000ABAA                 db    0
.eh_frame:000000000000ABAB                 db    0
.eh_frame:000000000000ABAC                 db  34h ; 4
.eh_frame:000000000000ABAD                 db 0A0h
.eh_frame:000000000000ABAE                 db 0FFh
.eh_frame:000000000000ABAF                 db 0FFh
.eh_frame:000000000000ABB0                 db  30h ; 0
.eh_frame:000000000000ABB1                 db    0
.eh_frame:000000000000ABB2                 db    0
.eh_frame:000000000000ABB3                 db    0
.eh_frame:000000000000ABB4                 db    0
.eh_frame:000000000000ABB5                 db  6Bh ; k
.eh_frame:000000000000ABB6                 db  0Eh
.eh_frame:000000000000ABB7                 db  10h
.eh_frame:000000000000ABB8                 db  50h ; P
.eh_frame:000000000000ABB9                 db    0
.eh_frame:000000000000ABBA                 db    0
.eh_frame:000000000000ABBB                 db    0
.eh_frame:000000000000ABBC                 db  54h ; T
.eh_frame:000000000000ABBD                 db    4
.eh_frame:000000000000ABBE                 db    0
.eh_frame:000000000000ABBF                 db    0
.eh_frame:000000000000ABC0                 db  50h ; P
.eh_frame:000000000000ABC1                 db 0A0h
.eh_frame:000000000000ABC2                 db 0FFh
.eh_frame:000000000000ABC3                 db 0FFh
.eh_frame:000000000000ABC4                 db  74h ; t
.eh_frame:000000000000ABC5                 db    0
.eh_frame:000000000000ABC6                 db    0
.eh_frame:000000000000ABC7                 db    0
.eh_frame:000000000000ABC8                 db    0
.eh_frame:000000000000ABC9                 db  42h ; B
.eh_frame:000000000000ABCA                 db  0Eh
.eh_frame:000000000000ABCB                 db  10h
.eh_frame:000000000000ABCC                 db  8Fh
.eh_frame:000000000000ABCD                 db    2
.eh_frame:000000000000ABCE                 db  42h ; B
.eh_frame:000000000000ABCF                 db  0Eh
.eh_frame:000000000000ABD0                 db  18h
.eh_frame:000000000000ABD1                 db  8Eh
.eh_frame:000000000000ABD2                 db    3
.eh_frame:000000000000ABD3                 db  49h ; I
.eh_frame:000000000000ABD4                 db  0Eh
.eh_frame:000000000000ABD5                 db  20h
.eh_frame:000000000000ABD6                 db  8Dh
.eh_frame:000000000000ABD7                 db    4
.eh_frame:000000000000ABD8                 db  42h ; B
.eh_frame:000000000000ABD9                 db  0Eh
.eh_frame:000000000000ABDA                 db  28h ; (
.eh_frame:000000000000ABDB                 db  8Ch
.eh_frame:000000000000ABDC                 db    5
.eh_frame:000000000000ABDD                 db  44h ; D
.eh_frame:000000000000ABDE                 db  0Eh
.eh_frame:000000000000ABDF                 db  30h ; 0
.eh_frame:000000000000ABE0                 db  86h
.eh_frame:000000000000ABE1                 db    6
.eh_frame:000000000000ABE2                 db  41h ; A
.eh_frame:000000000000ABE3                 db  0Eh
.eh_frame:000000000000ABE4                 db  38h ; 8
.eh_frame:000000000000ABE5                 db  83h
.eh_frame:000000000000ABE6                 db    7
.eh_frame:000000000000ABE7                 db  4Dh ; M
.eh_frame:000000000000ABE8                 db  0Eh
.eh_frame:000000000000ABE9                 db  50h ; P
.eh_frame:000000000000ABEA                 db  5Fh ; _
.eh_frame:000000000000ABEB                 db  0Eh
.eh_frame:000000000000ABEC                 db  58h ; X
.eh_frame:000000000000ABED                 db  47h ; G
.eh_frame:000000000000ABEE                 db  0Eh
.eh_frame:000000000000ABEF                 db  60h ; `
.eh_frame:000000000000ABF0                 db  46h ; F
.eh_frame:000000000000ABF1                 db  0Eh
.eh_frame:000000000000ABF2                 db  68h ; h
.eh_frame:000000000000ABF3                 db  44h ; D
.eh_frame:000000000000ABF4                 db  0Eh
.eh_frame:000000000000ABF5                 db  70h ; p
.eh_frame:000000000000ABF6                 db  58h ; X
.eh_frame:000000000000ABF7                 db  0Eh
.eh_frame:000000000000ABF8                 db  38h ; 8
.eh_frame:000000000000ABF9                 db  41h ; A
.eh_frame:000000000000ABFA                 db  0Eh
.eh_frame:000000000000ABFB                 db  30h ; 0
.eh_frame:000000000000ABFC                 db  41h ; A
.eh_frame:000000000000ABFD                 db  0Eh
.eh_frame:000000000000ABFE                 db  28h ; (
.eh_frame:000000000000ABFF                 db  42h ; B
.eh_frame:000000000000AC00                 db  0Eh
.eh_frame:000000000000AC01                 db  20h
.eh_frame:000000000000AC02                 db  42h ; B
.eh_frame:000000000000AC03                 db  0Eh
.eh_frame:000000000000AC04                 db  18h
.eh_frame:000000000000AC05                 db  42h ; B
.eh_frame:000000000000AC06                 db  0Eh
.eh_frame:000000000000AC07                 db  10h
.eh_frame:000000000000AC08                 db  42h ; B
.eh_frame:000000000000AC09                 db  0Eh
.eh_frame:000000000000AC0A                 db    8
.eh_frame:000000000000AC0B                 db    0
.eh_frame:000000000000AC0C                 db  68h ; h
.eh_frame:000000000000AC0D                 db    0
.eh_frame:000000000000AC0E                 db    0
.eh_frame:000000000000AC0F                 db    0
.eh_frame:000000000000AC10                 db 0A8h
.eh_frame:000000000000AC11                 db    4
.eh_frame:000000000000AC12                 db    0
.eh_frame:000000000000AC13                 db    0
.eh_frame:000000000000AC14                 db  7Ch ; |
.eh_frame:000000000000AC15                 db 0A0h
.eh_frame:000000000000AC16                 db 0FFh
.eh_frame:000000000000AC17                 db 0FFh
.eh_frame:000000000000AC18                 db 0E3h
.eh_frame:000000000000AC19                 db    0
.eh_frame:000000000000AC1A                 db    0
.eh_frame:000000000000AC1B                 db    0
.eh_frame:000000000000AC1C                 db    0
.eh_frame:000000000000AC1D                 db  42h ; B
.eh_frame:000000000000AC1E                 db  0Eh
.eh_frame:000000000000AC1F                 db  10h
.eh_frame:000000000000AC20                 db  8Fh
.eh_frame:000000000000AC21                 db    2
.eh_frame:000000000000AC22                 db  42h ; B
.eh_frame:000000000000AC23                 db  0Eh
.eh_frame:000000000000AC24                 db  18h
.eh_frame:000000000000AC25                 db  8Eh
.eh_frame:000000000000AC26                 db    3
.eh_frame:000000000000AC27                 db  49h ; I
.eh_frame:000000000000AC28                 db  0Eh
.eh_frame:000000000000AC29                 db  20h
.eh_frame:000000000000AC2A                 db  8Dh
.eh_frame:000000000000AC2B                 db    4
.eh_frame:000000000000AC2C                 db  42h ; B
.eh_frame:000000000000AC2D                 db  0Eh
.eh_frame:000000000000AC2E                 db  28h ; (
.eh_frame:000000000000AC2F                 db  8Ch
.eh_frame:000000000000AC30                 db    5
.eh_frame:000000000000AC31                 db  44h ; D
.eh_frame:000000000000AC32                 db  0Eh
.eh_frame:000000000000AC33                 db  30h ; 0
.eh_frame:000000000000AC34                 db  86h
.eh_frame:000000000000AC35                 db    6
.eh_frame:000000000000AC36                 db  41h ; A
.eh_frame:000000000000AC37                 db  0Eh
.eh_frame:000000000000AC38                 db  38h ; 8
.eh_frame:000000000000AC39                 db  83h
.eh_frame:000000000000AC3A                 db    7
.eh_frame:000000000000AC3B                 db  4Dh ; M
.eh_frame:000000000000AC3C                 db  0Eh
.eh_frame:000000000000AC3D                 db  70h ; p
.eh_frame:000000000000AC3E                 db  65h ; e
.eh_frame:000000000000AC3F                 db  0Eh
.eh_frame:000000000000AC40                 db  78h ; x
.eh_frame:000000000000AC41                 db  4Dh ; M
.eh_frame:000000000000AC42                 db  0Eh
.eh_frame:000000000000AC43                 db  80h
.eh_frame:000000000000AC44                 db    1
.eh_frame:000000000000AC45                 db  46h ; F
.eh_frame:000000000000AC46                 db  0Eh
.eh_frame:000000000000AC47                 db  88h
.eh_frame:000000000000AC48                 db    1
.eh_frame:000000000000AC49                 db  42h ; B
.eh_frame:000000000000AC4A                 db  0Eh
.eh_frame:000000000000AC4B                 db  90h
.eh_frame:000000000000AC4C                 db    1
.eh_frame:000000000000AC4D                 db  5Eh ; ^
.eh_frame:000000000000AC4E                 db  0Eh
.eh_frame:000000000000AC4F                 db  70h ; p
.eh_frame:000000000000AC50                 db  56h ; V
.eh_frame:000000000000AC51                 db  0Eh
.eh_frame:000000000000AC52                 db  78h ; x
.eh_frame:000000000000AC53                 db  43h ; C
.eh_frame:000000000000AC54                 db  0Eh
.eh_frame:000000000000AC55                 db  80h
.eh_frame:000000000000AC56                 db    1
.eh_frame:000000000000AC57                 db  43h ; C
.eh_frame:000000000000AC58                 db  0Eh
.eh_frame:000000000000AC59                 db  88h
.eh_frame:000000000000AC5A                 db    1
.eh_frame:000000000000AC5B                 db  56h ; V
.eh_frame:000000000000AC5C                 db  0Eh
.eh_frame:000000000000AC5D                 db  90h
.eh_frame:000000000000AC5E                 db    1
.eh_frame:000000000000AC5F                 db  52h ; R
.eh_frame:000000000000AC60                 db  0Eh
.eh_frame:000000000000AC61                 db  70h ; p
.eh_frame:000000000000AC62                 db  5Bh ; [
.eh_frame:000000000000AC63                 db  0Eh
.eh_frame:000000000000AC64                 db  38h ; 8
.eh_frame:000000000000AC65                 db  41h ; A
.eh_frame:000000000000AC66                 db  0Eh
.eh_frame:000000000000AC67                 db  30h ; 0
.eh_frame:000000000000AC68                 db  41h ; A
.eh_frame:000000000000AC69                 db  0Eh
.eh_frame:000000000000AC6A                 db  28h ; (
.eh_frame:000000000000AC6B                 db  42h ; B
.eh_frame:000000000000AC6C                 db  0Eh
.eh_frame:000000000000AC6D                 db  20h
.eh_frame:000000000000AC6E                 db  42h ; B
.eh_frame:000000000000AC6F                 db  0Eh
.eh_frame:000000000000AC70                 db  18h
.eh_frame:000000000000AC71                 db  42h ; B
.eh_frame:000000000000AC72                 db  0Eh
.eh_frame:000000000000AC73                 db  10h
.eh_frame:000000000000AC74                 db  42h ; B
.eh_frame:000000000000AC75                 db  0Eh
.eh_frame:000000000000AC76                 db    8
.eh_frame:000000000000AC77                 db    0
.eh_frame:000000000000AC78                 db  10h
.eh_frame:000000000000AC79                 db    0
.eh_frame:000000000000AC7A                 db    0
.eh_frame:000000000000AC7B                 db    0
.eh_frame:000000000000AC7C                 db  14h
.eh_frame:000000000000AC7D                 db    5
.eh_frame:000000000000AC7E                 db    0
.eh_frame:000000000000AC7F                 db    0
.eh_frame:000000000000AC80                 db    0
.eh_frame:000000000000AC81                 db 0A1h
.eh_frame:000000000000AC82                 db 0FFh
.eh_frame:000000000000AC83                 db 0FFh
.eh_frame:000000000000AC84                 db  0Ah
.eh_frame:000000000000AC85                 db    0
.eh_frame:000000000000AC86                 db    0
.eh_frame:000000000000AC87                 db    0
.eh_frame:000000000000AC88                 db    0
.eh_frame:000000000000AC89                 db    0
.eh_frame:000000000000AC8A                 db    0
.eh_frame:000000000000AC8B                 db    0
.eh_frame:000000000000AC8C                 db  28h ; (
.eh_frame:000000000000AC8D                 db    0
.eh_frame:000000000000AC8E                 db    0
.eh_frame:000000000000AC8F                 db    0
.eh_frame:000000000000AC90                 db  28h ; (
.eh_frame:000000000000AC91                 db    5
.eh_frame:000000000000AC92                 db    0
.eh_frame:000000000000AC93                 db    0
.eh_frame:000000000000AC94                 db 0FCh
.eh_frame:000000000000AC95                 db 0A0h
.eh_frame:000000000000AC96                 db 0FFh
.eh_frame:000000000000AC97                 db 0FFh
.eh_frame:000000000000AC98                 db  93h
.eh_frame:000000000000AC99                 db    0
.eh_frame:000000000000AC9A                 db    0
.eh_frame:000000000000AC9B                 db    0
.eh_frame:000000000000AC9C                 db    0
.eh_frame:000000000000AC9D                 db  48h ; H
.eh_frame:000000000000AC9E                 db  0Eh
.eh_frame:000000000000AC9F                 db  10h
.eh_frame:000000000000ACA0                 db  8Ch
.eh_frame:000000000000ACA1                 db    2
.eh_frame:000000000000ACA2                 db  48h ; H
.eh_frame:000000000000ACA3                 db  0Eh
.eh_frame:000000000000ACA4                 db  18h
.eh_frame:000000000000ACA5                 db  86h
.eh_frame:000000000000ACA6                 db    3
.eh_frame:000000000000ACA7                 db  41h ; A
.eh_frame:000000000000ACA8                 db  0Eh
.eh_frame:000000000000ACA9                 db  20h
.eh_frame:000000000000ACAA                 db  83h
.eh_frame:000000000000ACAB                 db    4
.eh_frame:000000000000ACAC                 db    2
.eh_frame:000000000000ACAD                 db  74h ; t
.eh_frame:000000000000ACAE                 db  0Eh
.eh_frame:000000000000ACAF                 db  18h
.eh_frame:000000000000ACB0                 db  4Bh ; K
.eh_frame:000000000000ACB1                 db  0Eh
.eh_frame:000000000000ACB2                 db  10h
.eh_frame:000000000000ACB3                 db  42h ; B
.eh_frame:000000000000ACB4                 db  0Eh
.eh_frame:000000000000ACB5                 db    8
.eh_frame:000000000000ACB6                 db    0
.eh_frame:000000000000ACB7                 db    0
.eh_frame:000000000000ACB8                 db  10h
.eh_frame:000000000000ACB9                 db    0
.eh_frame:000000000000ACBA                 db    0
.eh_frame:000000000000ACBB                 db    0
.eh_frame:000000000000ACBC                 db  54h ; T
.eh_frame:000000000000ACBD                 db    5
.eh_frame:000000000000ACBE                 db    0
.eh_frame:000000000000ACBF                 db    0
.eh_frame:000000000000ACC0                 db  70h ; p
.eh_frame:000000000000ACC1                 db 0A1h
.eh_frame:000000000000ACC2                 db 0FFh
.eh_frame:000000000000ACC3                 db 0FFh
.eh_frame:000000000000ACC4                 db  13h
.eh_frame:000000000000ACC5                 db    0
.eh_frame:000000000000ACC6                 db    0
.eh_frame:000000000000ACC7                 db    0
.eh_frame:000000000000ACC8                 db    0
.eh_frame:000000000000ACC9                 db    0
.eh_frame:000000000000ACCA                 db    0
.eh_frame:000000000000ACCB                 db    0
.eh_frame:000000000000ACCC                 db  10h
.eh_frame:000000000000ACCD                 db    0
.eh_frame:000000000000ACCE                 db    0
.eh_frame:000000000000ACCF                 db    0
.eh_frame:000000000000ACD0                 db  68h ; h
.eh_frame:000000000000ACD1                 db    5
.eh_frame:000000000000ACD2                 db    0
.eh_frame:000000000000ACD3                 db    0
.eh_frame:000000000000ACD4                 db  7Ch ; |
.eh_frame:000000000000ACD5                 db 0A1h
.eh_frame:000000000000ACD6                 db 0FFh
.eh_frame:000000000000ACD7                 db 0FFh
.eh_frame:000000000000ACD8                 db  0Ch
.eh_frame:000000000000ACD9                 db    0
.eh_frame:000000000000ACDA                 db    0
.eh_frame:000000000000ACDB                 db    0
.eh_frame:000000000000ACDC                 db    0
.eh_frame:000000000000ACDD                 db    0
.eh_frame:000000000000ACDE                 db    0
.eh_frame:000000000000ACDF                 db    0
.eh_frame:000000000000ACE0                 db  10h
.eh_frame:000000000000ACE1                 db    0
.eh_frame:000000000000ACE2                 db    0
.eh_frame:000000000000ACE3                 db    0
.eh_frame:000000000000ACE4                 db  7Ch ; |
.eh_frame:000000000000ACE5                 db    5
.eh_frame:000000000000ACE6                 db    0
.eh_frame:000000000000ACE7                 db    0
.eh_frame:000000000000ACE8                 db  78h ; x
.eh_frame:000000000000ACE9                 db 0A1h
.eh_frame:000000000000ACEA                 db 0FFh
.eh_frame:000000000000ACEB                 db 0FFh
.eh_frame:000000000000ACEC                 db  18h
.eh_frame:000000000000ACED                 db    0
.eh_frame:000000000000ACEE                 db    0
.eh_frame:000000000000ACEF                 db    0
.eh_frame:000000000000ACF0                 db    0
.eh_frame:000000000000ACF1                 db    0
.eh_frame:000000000000ACF2                 db    0
.eh_frame:000000000000ACF3                 db    0
.eh_frame:000000000000ACF4                 db  10h
.eh_frame:000000000000ACF5                 db    0
.eh_frame:000000000000ACF6                 db    0
.eh_frame:000000000000ACF7                 db    0
.eh_frame:000000000000ACF8                 db  90h
.eh_frame:000000000000ACF9                 db    5
.eh_frame:000000000000ACFA                 db    0
.eh_frame:000000000000ACFB                 db    0
.eh_frame:000000000000ACFC                 db  84h
.eh_frame:000000000000ACFD                 db 0A1h
.eh_frame:000000000000ACFE                 db 0FFh
.eh_frame:000000000000ACFF                 db 0FFh
.eh_frame:000000000000AD00                 db  14h
.eh_frame:000000000000AD01                 db    0
.eh_frame:000000000000AD02                 db    0
.eh_frame:000000000000AD03                 db    0
.eh_frame:000000000000AD04                 db    0
.eh_frame:000000000000AD05                 db    0
.eh_frame:000000000000AD06                 db    0
.eh_frame:000000000000AD07                 db    0
.eh_frame:000000000000AD08                 db  18h
.eh_frame:000000000000AD09                 db    0
.eh_frame:000000000000AD0A                 db    0
.eh_frame:000000000000AD0B                 db    0
.eh_frame:000000000000AD0C                 db 0A4h
.eh_frame:000000000000AD0D                 db    5
.eh_frame:000000000000AD0E                 db    0
.eh_frame:000000000000AD0F                 db    0
.eh_frame:000000000000AD10                 db  90h
.eh_frame:000000000000AD11                 db 0A1h
.eh_frame:000000000000AD12                 db 0FFh
.eh_frame:000000000000AD13                 db 0FFh
.eh_frame:000000000000AD14                 db  8Eh
.eh_frame:000000000000AD15                 db    0
.eh_frame:000000000000AD16                 db    0
.eh_frame:000000000000AD17                 db    0
.eh_frame:000000000000AD18                 db    0
.eh_frame:000000000000AD19                 db  44h ; D
.eh_frame:000000000000AD1A                 db  0Eh
.eh_frame:000000000000AD1B                 db  50h ; P
.eh_frame:000000000000AD1C                 db    2
.eh_frame:000000000000AD1D                 db  7Fh ; 
.eh_frame:000000000000AD1E                 db  0Ah
.eh_frame:000000000000AD1F                 db  0Eh
.eh_frame:000000000000AD20                 db    8
.eh_frame:000000000000AD21                 db  41h ; A
.eh_frame:000000000000AD22                 db  0Bh
.eh_frame:000000000000AD23                 db    0
.eh_frame:000000000000AD24                 db  18h
.eh_frame:000000000000AD25                 db    0
.eh_frame:000000000000AD26                 db    0
.eh_frame:000000000000AD27                 db    0
.eh_frame:000000000000AD28                 db 0C0h
.eh_frame:000000000000AD29                 db    5
.eh_frame:000000000000AD2A                 db    0
.eh_frame:000000000000AD2B                 db    0
.eh_frame:000000000000AD2C                 db    4
.eh_frame:000000000000AD2D                 db 0A2h
.eh_frame:000000000000AD2E                 db 0FFh
.eh_frame:000000000000AD2F                 db 0FFh
.eh_frame:000000000000AD30                 db  8Ah
.eh_frame:000000000000AD31                 db    0
.eh_frame:000000000000AD32                 db    0
.eh_frame:000000000000AD33                 db    0
.eh_frame:000000000000AD34                 db    0
.eh_frame:000000000000AD35                 db  44h ; D
.eh_frame:000000000000AD36                 db  0Eh
.eh_frame:000000000000AD37                 db  50h ; P
.eh_frame:000000000000AD38                 db    2
.eh_frame:000000000000AD39                 db  7Bh ; {
.eh_frame:000000000000AD3A                 db  0Ah
.eh_frame:000000000000AD3B                 db  0Eh
.eh_frame:000000000000AD3C                 db    8
.eh_frame:000000000000AD3D                 db  41h ; A
.eh_frame:000000000000AD3E                 db  0Bh
.eh_frame:000000000000AD3F                 db    0
.eh_frame:000000000000AD40                 db  10h
.eh_frame:000000000000AD41                 db    0
.eh_frame:000000000000AD42                 db    0
.eh_frame:000000000000AD43                 db    0
.eh_frame:000000000000AD44                 db 0DCh
.eh_frame:000000000000AD45                 db    5
.eh_frame:000000000000AD46                 db    0
.eh_frame:000000000000AD47                 db    0
.eh_frame:000000000000AD48                 db  78h ; x
.eh_frame:000000000000AD49                 db 0A2h
.eh_frame:000000000000AD4A                 db 0FFh
.eh_frame:000000000000AD4B                 db 0FFh
.eh_frame:000000000000AD4C                 db  0Ch
.eh_frame:000000000000AD4D                 db    0
.eh_frame:000000000000AD4E                 db    0
.eh_frame:000000000000AD4F                 db    0
.eh_frame:000000000000AD50                 db    0
.eh_frame:000000000000AD51                 db    0
.eh_frame:000000000000AD52                 db    0
.eh_frame:000000000000AD53                 db    0
.eh_frame:000000000000AD54                 db  10h
.eh_frame:000000000000AD55                 db    0
.eh_frame:000000000000AD56                 db    0
.eh_frame:000000000000AD57                 db    0
.eh_frame:000000000000AD58                 db 0F0h
.eh_frame:000000000000AD59                 db    5
.eh_frame:000000000000AD5A                 db    0
.eh_frame:000000000000AD5B                 db    0
.eh_frame:000000000000AD5C                 db  74h ; t
.eh_frame:000000000000AD5D                 db 0A2h
.eh_frame:000000000000AD5E                 db 0FFh
.eh_frame:000000000000AD5F                 db 0FFh
.eh_frame:000000000000AD60                 db  0Fh
.eh_frame:000000000000AD61                 db    0
.eh_frame:000000000000AD62                 db    0
.eh_frame:000000000000AD63                 db    0
.eh_frame:000000000000AD64                 db    0
.eh_frame:000000000000AD65                 db    0
.eh_frame:000000000000AD66                 db    0
.eh_frame:000000000000AD67                 db    0
.eh_frame:000000000000AD68                 db  18h
.eh_frame:000000000000AD69                 db    0
.eh_frame:000000000000AD6A                 db    0
.eh_frame:000000000000AD6B                 db    0
.eh_frame:000000000000AD6C                 db    4
.eh_frame:000000000000AD6D                 db    6
.eh_frame:000000000000AD6E                 db    0
.eh_frame:000000000000AD6F                 db    0
.eh_frame:000000000000AD70                 db  70h ; p
.eh_frame:000000000000AD71                 db 0A2h
.eh_frame:000000000000AD72                 db 0FFh
.eh_frame:000000000000AD73                 db 0FFh
.eh_frame:000000000000AD74                 db  98h
.eh_frame:000000000000AD75                 db    0
.eh_frame:000000000000AD76                 db    0
.eh_frame:000000000000AD77                 db    0
.eh_frame:000000000000AD78                 db    0
.eh_frame:000000000000AD79                 db  44h ; D
.eh_frame:000000000000AD7A                 db  0Eh
.eh_frame:000000000000AD7B                 db  50h ; P
.eh_frame:000000000000AD7C                 db    2
.eh_frame:000000000000AD7D                 db  8Eh
.eh_frame:000000000000AD7E                 db  0Ah
.eh_frame:000000000000AD7F                 db  0Eh
.eh_frame:000000000000AD80                 db    8
.eh_frame:000000000000AD81                 db  41h ; A
.eh_frame:000000000000AD82                 db  0Bh
.eh_frame:000000000000AD83                 db    0
.eh_frame:000000000000AD84                 db  10h
.eh_frame:000000000000AD85                 db    0
.eh_frame:000000000000AD86                 db    0
.eh_frame:000000000000AD87                 db    0
.eh_frame:000000000000AD88                 db  20h
.eh_frame:000000000000AD89                 db    6
.eh_frame:000000000000AD8A                 db    0
.eh_frame:000000000000AD8B                 db    0
.eh_frame:000000000000AD8C                 db 0F4h
.eh_frame:000000000000AD8D                 db 0A2h
.eh_frame:000000000000AD8E                 db 0FFh
.eh_frame:000000000000AD8F                 db 0FFh
.eh_frame:000000000000AD90                 db  10h
.eh_frame:000000000000AD91                 db    0
.eh_frame:000000000000AD92                 db    0
.eh_frame:000000000000AD93                 db    0
.eh_frame:000000000000AD94                 db    0
.eh_frame:000000000000AD95                 db    0
.eh_frame:000000000000AD96                 db    0
.eh_frame:000000000000AD97                 db    0
.eh_frame:000000000000AD98                 db  10h
.eh_frame:000000000000AD99                 db    0
.eh_frame:000000000000AD9A                 db    0
.eh_frame:000000000000AD9B                 db    0
.eh_frame:000000000000AD9C                 db  34h ; 4
.eh_frame:000000000000AD9D                 db    6
.eh_frame:000000000000AD9E                 db    0
.eh_frame:000000000000AD9F                 db    0
.eh_frame:000000000000ADA0                 db 0F0h
.eh_frame:000000000000ADA1                 db 0A2h
.eh_frame:000000000000ADA2                 db 0FFh
.eh_frame:000000000000ADA3                 db 0FFh
.eh_frame:000000000000ADA4                 db  11h
.eh_frame:000000000000ADA5                 db    0
.eh_frame:000000000000ADA6                 db    0
.eh_frame:000000000000ADA7                 db    0
.eh_frame:000000000000ADA8                 db    0
.eh_frame:000000000000ADA9                 db    0
.eh_frame:000000000000ADAA                 db    0
.eh_frame:000000000000ADAB                 db    0
.eh_frame:000000000000ADAC                 db  10h
.eh_frame:000000000000ADAD                 db    0
.eh_frame:000000000000ADAE                 db    0
.eh_frame:000000000000ADAF                 db    0
.eh_frame:000000000000ADB0                 db  48h ; H
.eh_frame:000000000000ADB1                 db    6
.eh_frame:000000000000ADB2                 db    0
.eh_frame:000000000000ADB3                 db    0
.eh_frame:000000000000ADB4                 db 0FCh
.eh_frame:000000000000ADB5                 db 0A2h
.eh_frame:000000000000ADB6                 db 0FFh
.eh_frame:000000000000ADB7                 db 0FFh
.eh_frame:000000000000ADB8                 db  0Ah
.eh_frame:000000000000ADB9                 db    0
.eh_frame:000000000000ADBA                 db    0
.eh_frame:000000000000ADBB                 db    0
.eh_frame:000000000000ADBC                 db    0
.eh_frame:000000000000ADBD                 db    0
.eh_frame:000000000000ADBE                 db    0
.eh_frame:000000000000ADBF                 db    0
.eh_frame:000000000000ADC0                 db  18h
.eh_frame:000000000000ADC1                 db    0
.eh_frame:000000000000ADC2                 db    0
.eh_frame:000000000000ADC3                 db    0
.eh_frame:000000000000ADC4                 db  5Ch ; \
.eh_frame:000000000000ADC5                 db    6
.eh_frame:000000000000ADC6                 db    0
.eh_frame:000000000000ADC7                 db    0
.eh_frame:000000000000ADC8                 db 0F8h
.eh_frame:000000000000ADC9                 db 0A2h
.eh_frame:000000000000ADCA                 db 0FFh
.eh_frame:000000000000ADCB                 db 0FFh
.eh_frame:000000000000ADCC                 db  8Eh
.eh_frame:000000000000ADCD                 db    0
.eh_frame:000000000000ADCE                 db    0
.eh_frame:000000000000ADCF                 db    0
.eh_frame:000000000000ADD0                 db    0
.eh_frame:000000000000ADD1                 db  44h ; D
.eh_frame:000000000000ADD2                 db  0Eh
.eh_frame:000000000000ADD3                 db  50h ; P
.eh_frame:000000000000ADD4                 db    2
.eh_frame:000000000000ADD5                 db  7Fh ; 
.eh_frame:000000000000ADD6                 db  0Ah
.eh_frame:000000000000ADD7                 db  0Eh
.eh_frame:000000000000ADD8                 db    8
.eh_frame:000000000000ADD9                 db  41h ; A
.eh_frame:000000000000ADDA                 db  0Bh
.eh_frame:000000000000ADDB                 db    0
.eh_frame:000000000000ADDC                 db  18h
.eh_frame:000000000000ADDD                 db    0
.eh_frame:000000000000ADDE                 db    0
.eh_frame:000000000000ADDF                 db    0
.eh_frame:000000000000ADE0                 db  78h ; x
.eh_frame:000000000000ADE1                 db    6
.eh_frame:000000000000ADE2                 db    0
.eh_frame:000000000000ADE3                 db    0
.eh_frame:000000000000ADE4                 db  6Ch ; l
.eh_frame:000000000000ADE5                 db 0A3h
.eh_frame:000000000000ADE6                 db 0FFh
.eh_frame:000000000000ADE7                 db 0FFh
.eh_frame:000000000000ADE8                 db  91h
.eh_frame:000000000000ADE9                 db    0
.eh_frame:000000000000ADEA                 db    0
.eh_frame:000000000000ADEB                 db    0
.eh_frame:000000000000ADEC                 db    0
.eh_frame:000000000000ADED                 db  44h ; D
.eh_frame:000000000000ADEE                 db  0Eh
.eh_frame:000000000000ADEF                 db  50h ; P
.eh_frame:000000000000ADF0                 db    2
.eh_frame:000000000000ADF1                 db  82h
.eh_frame:000000000000ADF2                 db  0Ah
.eh_frame:000000000000ADF3                 db  0Eh
.eh_frame:000000000000ADF4                 db    8
.eh_frame:000000000000ADF5                 db  41h ; A
.eh_frame:000000000000ADF6                 db  0Bh
.eh_frame:000000000000ADF7                 db    0
.eh_frame:000000000000ADF8                 db  10h
.eh_frame:000000000000ADF9                 db    0
.eh_frame:000000000000ADFA                 db    0
.eh_frame:000000000000ADFB                 db    0
.eh_frame:000000000000ADFC                 db  94h
.eh_frame:000000000000ADFD                 db    6
.eh_frame:000000000000ADFE                 db    0
.eh_frame:000000000000ADFF                 db    0
.eh_frame:000000000000AE00                 db 0F0h
.eh_frame:000000000000AE01                 db 0A3h
.eh_frame:000000000000AE02                 db 0FFh
.eh_frame:000000000000AE03                 db 0FFh
.eh_frame:000000000000AE04                 db  0Ch
.eh_frame:000000000000AE05                 db    0
.eh_frame:000000000000AE06                 db    0
.eh_frame:000000000000AE07                 db    0
.eh_frame:000000000000AE08                 db    0
.eh_frame:000000000000AE09                 db    0
.eh_frame:000000000000AE0A                 db    0
.eh_frame:000000000000AE0B                 db    0
.eh_frame:000000000000AE0C                 db  10h
.eh_frame:000000000000AE0D                 db    0
.eh_frame:000000000000AE0E                 db    0
.eh_frame:000000000000AE0F                 db    0
.eh_frame:000000000000AE10                 db 0A8h
.eh_frame:000000000000AE11                 db    6
.eh_frame:000000000000AE12                 db    0
.eh_frame:000000000000AE13                 db    0
.eh_frame:000000000000AE14                 db 0ECh
.eh_frame:000000000000AE15                 db 0A3h
.eh_frame:000000000000AE16                 db 0FFh
.eh_frame:000000000000AE17                 db 0FFh
.eh_frame:000000000000AE18                 db  17h
.eh_frame:000000000000AE19                 db    0
.eh_frame:000000000000AE1A                 db    0
.eh_frame:000000000000AE1B                 db    0
.eh_frame:000000000000AE1C                 db    0
.eh_frame:000000000000AE1D                 db    0
.eh_frame:000000000000AE1E                 db    0
.eh_frame:000000000000AE1F                 db    0
.eh_frame:000000000000AE20                 db  10h
.eh_frame:000000000000AE21                 db    0
.eh_frame:000000000000AE22                 db    0
.eh_frame:000000000000AE23                 db    0
.eh_frame:000000000000AE24                 db 0BCh
.eh_frame:000000000000AE25                 db    6
.eh_frame:000000000000AE26                 db    0
.eh_frame:000000000000AE27                 db    0
.eh_frame:000000000000AE28                 db 0F8h
.eh_frame:000000000000AE29                 db 0A3h
.eh_frame:000000000000AE2A                 db 0FFh
.eh_frame:000000000000AE2B                 db 0FFh
.eh_frame:000000000000AE2C                 db  13h
.eh_frame:000000000000AE2D                 db    0
.eh_frame:000000000000AE2E                 db    0
.eh_frame:000000000000AE2F                 db    0
.eh_frame:000000000000AE30                 db    0
.eh_frame:000000000000AE31                 db    0
.eh_frame:000000000000AE32                 db    0
.eh_frame:000000000000AE33                 db    0
.eh_frame:000000000000AE34                 db  10h
.eh_frame:000000000000AE35                 db    0
.eh_frame:000000000000AE36                 db    0
.eh_frame:000000000000AE37                 db    0
.eh_frame:000000000000AE38                 db 0D0h
.eh_frame:000000000000AE39                 db    6
.eh_frame:000000000000AE3A                 db    0
.eh_frame:000000000000AE3B                 db    0
.eh_frame:000000000000AE3C                 db    4
.eh_frame:000000000000AE3D                 db 0A4h
.eh_frame:000000000000AE3E                 db 0FFh
.eh_frame:000000000000AE3F                 db 0FFh
.eh_frame:000000000000AE40                 db  0Ch
.eh_frame:000000000000AE41                 db    0
.eh_frame:000000000000AE42                 db    0
.eh_frame:000000000000AE43                 db    0
.eh_frame:000000000000AE44                 db    0
.eh_frame:000000000000AE45                 db    0
.eh_frame:000000000000AE46                 db    0
.eh_frame:000000000000AE47                 db    0
.eh_frame:000000000000AE48                 db  10h
.eh_frame:000000000000AE49                 db    0
.eh_frame:000000000000AE4A                 db    0
.eh_frame:000000000000AE4B                 db    0
.eh_frame:000000000000AE4C                 db 0E4h
.eh_frame:000000000000AE4D                 db    6
.eh_frame:000000000000AE4E                 db    0
.eh_frame:000000000000AE4F                 db    0
.eh_frame:000000000000AE50                 db    0
.eh_frame:000000000000AE51                 db 0A4h
.eh_frame:000000000000AE52                 db 0FFh
.eh_frame:000000000000AE53                 db 0FFh
.eh_frame:000000000000AE54                 db  14h
.eh_frame:000000000000AE55                 db    0
.eh_frame:000000000000AE56                 db    0
.eh_frame:000000000000AE57                 db    0
.eh_frame:000000000000AE58                 db    0
.eh_frame:000000000000AE59                 db    0
.eh_frame:000000000000AE5A                 db    0
.eh_frame:000000000000AE5B                 db    0
.eh_frame:000000000000AE5C                 db  10h
.eh_frame:000000000000AE5D                 db    0
.eh_frame:000000000000AE5E                 db    0
.eh_frame:000000000000AE5F                 db    0
.eh_frame:000000000000AE60                 db 0F8h
.eh_frame:000000000000AE61                 db    6
.eh_frame:000000000000AE62                 db    0
.eh_frame:000000000000AE63                 db    0
.eh_frame:000000000000AE64                 db  0Ch
.eh_frame:000000000000AE65                 db 0A4h
.eh_frame:000000000000AE66                 db 0FFh
.eh_frame:000000000000AE67                 db 0FFh
.eh_frame:000000000000AE68                 db  13h
.eh_frame:000000000000AE69                 db    0
.eh_frame:000000000000AE6A                 db    0
.eh_frame:000000000000AE6B                 db    0
.eh_frame:000000000000AE6C                 db    0
.eh_frame:000000000000AE6D                 db    0
.eh_frame:000000000000AE6E                 db    0
.eh_frame:000000000000AE6F                 db    0
.eh_frame:000000000000AE70                 db  14h
.eh_frame:000000000000AE71                 db    0
.eh_frame:000000000000AE72                 db    0
.eh_frame:000000000000AE73                 db    0
.eh_frame:000000000000AE74                 db  0Ch
.eh_frame:000000000000AE75                 db    7
.eh_frame:000000000000AE76                 db    0
.eh_frame:000000000000AE77                 db    0
.eh_frame:000000000000AE78                 db  18h
.eh_frame:000000000000AE79                 db 0A4h
.eh_frame:000000000000AE7A                 db 0FFh
.eh_frame:000000000000AE7B                 db 0FFh
.eh_frame:000000000000AE7C                 db  18h
.eh_frame:000000000000AE7D                 db    0
.eh_frame:000000000000AE7E                 db    0
.eh_frame:000000000000AE7F                 db    0
.eh_frame:000000000000AE80                 db    0
.eh_frame:000000000000AE81                 db    0
.eh_frame:000000000000AE82                 db    0
.eh_frame:000000000000AE83                 db    0
.eh_frame:000000000000AE84                 db    0
.eh_frame:000000000000AE85                 db    0
.eh_frame:000000000000AE86                 db    0
.eh_frame:000000000000AE87                 db    0
.eh_frame:000000000000AE88                 db  18h
.eh_frame:000000000000AE89                 db    0
.eh_frame:000000000000AE8A                 db    0
.eh_frame:000000000000AE8B                 db    0
.eh_frame:000000000000AE8C                 db  24h ; $
.eh_frame:000000000000AE8D                 db    7
.eh_frame:000000000000AE8E                 db    0
.eh_frame:000000000000AE8F                 db    0
.eh_frame:000000000000AE90                 db  20h
.eh_frame:000000000000AE91                 db 0A4h
.eh_frame:000000000000AE92                 db 0FFh
.eh_frame:000000000000AE93                 db 0FFh
.eh_frame:000000000000AE94                 db  23h ; #
.eh_frame:000000000000AE95                 db    0
.eh_frame:000000000000AE96                 db    0
.eh_frame:000000000000AE97                 db    0
.eh_frame:000000000000AE98                 db    0
.eh_frame:000000000000AE99                 db  41h ; A
.eh_frame:000000000000AE9A                 db  0Eh
.eh_frame:000000000000AE9B                 db  10h
.eh_frame:000000000000AE9C                 db  83h
.eh_frame:000000000000AE9D                 db    2
.eh_frame:000000000000AE9E                 db  61h ; a
.eh_frame:000000000000AE9F                 db  0Eh
.eh_frame:000000000000AEA0                 db    8
.eh_frame:000000000000AEA1                 db    0
.eh_frame:000000000000AEA2                 db    0
.eh_frame:000000000000AEA3                 db    0
.eh_frame:000000000000AEA4                 db  1Ch
.eh_frame:000000000000AEA5                 db    0
.eh_frame:000000000000AEA6                 db    0
.eh_frame:000000000000AEA7                 db    0
.eh_frame:000000000000AEA8                 db  40h ; @
.eh_frame:000000000000AEA9                 db    7
.eh_frame:000000000000AEAA                 db    0
.eh_frame:000000000000AEAB                 db    0
.eh_frame:000000000000AEAC                 db  34h ; 4
.eh_frame:000000000000AEAD                 db 0A4h
.eh_frame:000000000000AEAE                 db 0FFh
.eh_frame:000000000000AEAF                 db 0FFh
.eh_frame:000000000000AEB0                 db  34h ; 4
.eh_frame:000000000000AEB1                 db    0
.eh_frame:000000000000AEB2                 db    0
.eh_frame:000000000000AEB3                 db    0
.eh_frame:000000000000AEB4                 db    0
.eh_frame:000000000000AEB5                 db  41h ; A
.eh_frame:000000000000AEB6                 db  0Eh
.eh_frame:000000000000AEB7                 db  10h
.eh_frame:000000000000AEB8                 db  83h
.eh_frame:000000000000AEB9                 db    2
.eh_frame:000000000000AEBA                 db  6Bh ; k
.eh_frame:000000000000AEBB                 db  0Ah
.eh_frame:000000000000AEBC                 db  0Eh
.eh_frame:000000000000AEBD                 db    8
.eh_frame:000000000000AEBE                 db  44h ; D
.eh_frame:000000000000AEBF                 db  0Bh
.eh_frame:000000000000AEC0                 db  43h ; C
.eh_frame:000000000000AEC1                 db  0Eh
.eh_frame:000000000000AEC2                 db    8
.eh_frame:000000000000AEC3                 db    0
.eh_frame:000000000000AEC4                 db  10h
.eh_frame:000000000000AEC5                 db    0
.eh_frame:000000000000AEC6                 db    0
.eh_frame:000000000000AEC7                 db    0
.eh_frame:000000000000AEC8                 db  60h ; `
.eh_frame:000000000000AEC9                 db    7
.eh_frame:000000000000AECA                 db    0
.eh_frame:000000000000AECB                 db    0
.eh_frame:000000000000AECC                 db  54h ; T
.eh_frame:000000000000AECD                 db 0A4h
.eh_frame:000000000000AECE                 db 0FFh
.eh_frame:000000000000AECF                 db 0FFh
.eh_frame:000000000000AED0                 db    4
.eh_frame:000000000000AED1                 db    0
.eh_frame:000000000000AED2                 db    0
.eh_frame:000000000000AED3                 db    0
.eh_frame:000000000000AED4                 db    0
.eh_frame:000000000000AED5                 db    0
.eh_frame:000000000000AED6                 db    0
.eh_frame:000000000000AED7                 db    0
.eh_frame:000000000000AED8                 db  48h ; H
.eh_frame:000000000000AED9                 db    0
.eh_frame:000000000000AEDA                 db    0
.eh_frame:000000000000AEDB                 db    0
.eh_frame:000000000000AEDC                 db  74h ; t
.eh_frame:000000000000AEDD                 db    7
.eh_frame:000000000000AEDE                 db    0
.eh_frame:000000000000AEDF                 db    0
.eh_frame:000000000000AEE0                 db  50h ; P
.eh_frame:000000000000AEE1                 db 0A4h
.eh_frame:000000000000AEE2                 db 0FFh
.eh_frame:000000000000AEE3                 db 0FFh
.eh_frame:000000000000AEE4                 db  1Ah
.eh_frame:000000000000AEE5                 db    1
.eh_frame:000000000000AEE6                 db    0
.eh_frame:000000000000AEE7                 db    0
.eh_frame:000000000000AEE8                 db    0
.eh_frame:000000000000AEE9                 db  42h ; B
.eh_frame:000000000000AEEA                 db  0Eh
.eh_frame:000000000000AEEB                 db  10h
.eh_frame:000000000000AEEC                 db  8Fh
.eh_frame:000000000000AEED                 db    2
.eh_frame:000000000000AEEE                 db  42h ; B
.eh_frame:000000000000AEEF                 db  0Eh
.eh_frame:000000000000AEF0                 db  18h
.eh_frame:000000000000AEF1                 db  8Eh
.eh_frame:000000000000AEF2                 db    3
.eh_frame:000000000000AEF3                 db  46h ; F
.eh_frame:000000000000AEF4                 db  0Eh
.eh_frame:000000000000AEF5                 db  20h
.eh_frame:000000000000AEF6                 db  8Dh
.eh_frame:000000000000AEF7                 db    4
.eh_frame:000000000000AEF8                 db  42h ; B
.eh_frame:000000000000AEF9                 db  0Eh
.eh_frame:000000000000AEFA                 db  28h ; (
.eh_frame:000000000000AEFB                 db  8Ch
.eh_frame:000000000000AEFC                 db    5
.eh_frame:000000000000AEFD                 db  44h ; D
.eh_frame:000000000000AEFE                 db  0Eh
.eh_frame:000000000000AEFF                 db  30h ; 0
.eh_frame:000000000000AF00                 db  86h
.eh_frame:000000000000AF01                 db    6
.eh_frame:000000000000AF02                 db  41h ; A
.eh_frame:000000000000AF03                 db  0Eh
.eh_frame:000000000000AF04                 db  38h ; 8
.eh_frame:000000000000AF05                 db  83h
.eh_frame:000000000000AF06                 db    7
.eh_frame:000000000000AF07                 db  47h ; G
.eh_frame:000000000000AF08                 db  0Eh
.eh_frame:000000000000AF09                 db  60h ; `
.eh_frame:000000000000AF0A                 db    2
.eh_frame:000000000000AF0B                 db 0DEh
.eh_frame:000000000000AF0C                 db  0Ah
.eh_frame:000000000000AF0D                 db  0Eh
.eh_frame:000000000000AF0E                 db  38h ; 8
.eh_frame:000000000000AF0F                 db  41h ; A
.eh_frame:000000000000AF10                 db  0Eh
.eh_frame:000000000000AF11                 db  30h ; 0
.eh_frame:000000000000AF12                 db  41h ; A
.eh_frame:000000000000AF13                 db  0Eh
.eh_frame:000000000000AF14                 db  28h ; (
.eh_frame:000000000000AF15                 db  42h ; B
.eh_frame:000000000000AF16                 db  0Eh
.eh_frame:000000000000AF17                 db  20h
.eh_frame:000000000000AF18                 db  42h ; B
.eh_frame:000000000000AF19                 db  0Eh
.eh_frame:000000000000AF1A                 db  18h
.eh_frame:000000000000AF1B                 db  42h ; B
.eh_frame:000000000000AF1C                 db  0Eh
.eh_frame:000000000000AF1D                 db  10h
.eh_frame:000000000000AF1E                 db  42h ; B
.eh_frame:000000000000AF1F                 db  0Eh
.eh_frame:000000000000AF20                 db    8
.eh_frame:000000000000AF21                 db  48h ; H
.eh_frame:000000000000AF22                 db  0Bh
.eh_frame:000000000000AF23                 db    0
.eh_frame:000000000000AF24                 db  18h
.eh_frame:000000000000AF25                 db    0
.eh_frame:000000000000AF26                 db    0
.eh_frame:000000000000AF27                 db    0
.eh_frame:000000000000AF28                 db 0C0h
.eh_frame:000000000000AF29                 db    7
.eh_frame:000000000000AF2A                 db    0
.eh_frame:000000000000AF2B                 db    0
.eh_frame:000000000000AF2C                 db  24h ; $
.eh_frame:000000000000AF2D                 db 0A5h
.eh_frame:000000000000AF2E                 db 0FFh
.eh_frame:000000000000AF2F                 db 0FFh
.eh_frame:000000000000AF30                 db  1Eh
.eh_frame:000000000000AF31                 db    0
.eh_frame:000000000000AF32                 db    0
.eh_frame:000000000000AF33                 db    0
.eh_frame:000000000000AF34                 db    0
.eh_frame:000000000000AF35                 db  41h ; A
.eh_frame:000000000000AF36                 db  0Eh
.eh_frame:000000000000AF37                 db  10h
.eh_frame:000000000000AF38                 db  83h
.eh_frame:000000000000AF39                 db    2
.eh_frame:000000000000AF3A                 db  58h ; X
.eh_frame:000000000000AF3B                 db  0Eh
.eh_frame:000000000000AF3C                 db    8
.eh_frame:000000000000AF3D                 db    0
.eh_frame:000000000000AF3E                 db    0
.eh_frame:000000000000AF3F                 db    0
.eh_frame:000000000000AF40                 db  34h ; 4
.eh_frame:000000000000AF41                 db    0
.eh_frame:000000000000AF42                 db    0
.eh_frame:000000000000AF43                 db    0
.eh_frame:000000000000AF44                 db 0DCh
.eh_frame:000000000000AF45                 db    7
.eh_frame:000000000000AF46                 db    0
.eh_frame:000000000000AF47                 db    0
.eh_frame:000000000000AF48                 db  28h ; (
.eh_frame:000000000000AF49                 db 0A5h
.eh_frame:000000000000AF4A                 db 0FFh
.eh_frame:000000000000AF4B                 db 0FFh
.eh_frame:000000000000AF4C                 db  51h ; Q
.eh_frame:000000000000AF4D                 db    0
.eh_frame:000000000000AF4E                 db    0
.eh_frame:000000000000AF4F                 db    0
.eh_frame:000000000000AF50                 db    0
.eh_frame:000000000000AF51                 db  42h ; B
.eh_frame:000000000000AF52                 db  0Eh
.eh_frame:000000000000AF53                 db  10h
.eh_frame:000000000000AF54                 db  8Dh
.eh_frame:000000000000AF55                 db    2
.eh_frame:000000000000AF56                 db  42h ; B
.eh_frame:000000000000AF57                 db  0Eh
.eh_frame:000000000000AF58                 db  18h
.eh_frame:000000000000AF59                 db  8Ch
.eh_frame:000000000000AF5A                 db    3
.eh_frame:000000000000AF5B                 db  41h ; A
.eh_frame:000000000000AF5C                 db  0Eh
.eh_frame:000000000000AF5D                 db  20h
.eh_frame:000000000000AF5E                 db  86h
.eh_frame:000000000000AF5F                 db    4
.eh_frame:000000000000AF60                 db  41h ; A
.eh_frame:000000000000AF61                 db  0Eh
.eh_frame:000000000000AF62                 db  28h ; (
.eh_frame:000000000000AF63                 db  83h
.eh_frame:000000000000AF64                 db    5
.eh_frame:000000000000AF65                 db  47h ; G
.eh_frame:000000000000AF66                 db  0Eh
.eh_frame:000000000000AF67                 db  30h ; 0
.eh_frame:000000000000AF68                 db  7Ah ; z
.eh_frame:000000000000AF69                 db  0Eh
.eh_frame:000000000000AF6A                 db  28h ; (
.eh_frame:000000000000AF6B                 db  44h ; D
.eh_frame:000000000000AF6C                 db  0Eh
.eh_frame:000000000000AF6D                 db  20h
.eh_frame:000000000000AF6E                 db  41h ; A
.eh_frame:000000000000AF6F                 db  0Eh
.eh_frame:000000000000AF70                 db  18h
.eh_frame:000000000000AF71                 db  42h ; B
.eh_frame:000000000000AF72                 db  0Eh
.eh_frame:000000000000AF73                 db  10h
.eh_frame:000000000000AF74                 db  42h ; B
.eh_frame:000000000000AF75                 db  0Eh
.eh_frame:000000000000AF76                 db    8
.eh_frame:000000000000AF77                 db    0
.eh_frame:000000000000AF78                 db  10h
.eh_frame:000000000000AF79                 db    0
.eh_frame:000000000000AF7A                 db    0
.eh_frame:000000000000AF7B                 db    0
.eh_frame:000000000000AF7C                 db  14h
.eh_frame:000000000000AF7D                 db    8
.eh_frame:000000000000AF7E                 db    0
.eh_frame:000000000000AF7F                 db    0
.eh_frame:000000000000AF80                 db  50h ; P
.eh_frame:000000000000AF81                 db 0A5h
.eh_frame:000000000000AF82                 db 0FFh
.eh_frame:000000000000AF83                 db 0FFh
.eh_frame:000000000000AF84                 db  0Ch
.eh_frame:000000000000AF85                 db    0
.eh_frame:000000000000AF86                 db    0
.eh_frame:000000000000AF87                 db    0
.eh_frame:000000000000AF88                 db    0
.eh_frame:000000000000AF89                 db    0
.eh_frame:000000000000AF8A                 db    0
.eh_frame:000000000000AF8B                 db    0
.eh_frame:000000000000AF8C                 db  10h
.eh_frame:000000000000AF8D                 db    0
.eh_frame:000000000000AF8E                 db    0
.eh_frame:000000000000AF8F                 db    0
.eh_frame:000000000000AF90                 db  28h ; (
.eh_frame:000000000000AF91                 db    8
.eh_frame:000000000000AF92                 db    0
.eh_frame:000000000000AF93                 db    0
.eh_frame:000000000000AF94                 db  4Ch ; L
.eh_frame:000000000000AF95                 db 0A5h
.eh_frame:000000000000AF96                 db 0FFh
.eh_frame:000000000000AF97                 db 0FFh
.eh_frame:000000000000AF98                 db  0Ah
.eh_frame:000000000000AF99                 db    0
.eh_frame:000000000000AF9A                 db    0
.eh_frame:000000000000AF9B                 db    0
.eh_frame:000000000000AF9C                 db    0
.eh_frame:000000000000AF9D                 db    0
.eh_frame:000000000000AF9E                 db    0
.eh_frame:000000000000AF9F                 db    0
.eh_frame:000000000000AFA0                 db  10h
.eh_frame:000000000000AFA1                 db    0
.eh_frame:000000000000AFA2                 db    0
.eh_frame:000000000000AFA3                 db    0
.eh_frame:000000000000AFA4                 db  3Ch ; <
.eh_frame:000000000000AFA5                 db    8
.eh_frame:000000000000AFA6                 db    0
.eh_frame:000000000000AFA7                 db    0
.eh_frame:000000000000AFA8                 db  48h ; H
.eh_frame:000000000000AFA9                 db 0A5h
.eh_frame:000000000000AFAA                 db 0FFh
.eh_frame:000000000000AFAB                 db 0FFh
.eh_frame:000000000000AFAC                 db  27h ; '
.eh_frame:000000000000AFAD                 db    0
.eh_frame:000000000000AFAE                 db    0
.eh_frame:000000000000AFAF                 db    0
.eh_frame:000000000000AFB0                 db    0
.eh_frame:000000000000AFB1                 db    0
.eh_frame:000000000000AFB2                 db    0
.eh_frame:000000000000AFB3                 db    0
.eh_frame:000000000000AFB4                 db  48h ; H
.eh_frame:000000000000AFB5                 db    0
.eh_frame:000000000000AFB6                 db    0
.eh_frame:000000000000AFB7                 db    0
.eh_frame:000000000000AFB8                 db  50h ; P
.eh_frame:000000000000AFB9                 db    8
.eh_frame:000000000000AFBA                 db    0
.eh_frame:000000000000AFBB                 db    0
.eh_frame:000000000000AFBC                 db  64h ; d
.eh_frame:000000000000AFBD                 db 0A5h
.eh_frame:000000000000AFBE                 db 0FFh
.eh_frame:000000000000AFBF                 db 0FFh
.eh_frame:000000000000AFC0                 db  4Fh ; O
.eh_frame:000000000000AFC1                 db    3
.eh_frame:000000000000AFC2                 db    0
.eh_frame:000000000000AFC3                 db    0
.eh_frame:000000000000AFC4                 db    0
.eh_frame:000000000000AFC5                 db  42h ; B
.eh_frame:000000000000AFC6                 db  0Eh
.eh_frame:000000000000AFC7                 db  10h
.eh_frame:000000000000AFC8                 db  8Fh
.eh_frame:000000000000AFC9                 db    2
.eh_frame:000000000000AFCA                 db  42h ; B
.eh_frame:000000000000AFCB                 db  0Eh
.eh_frame:000000000000AFCC                 db  18h
.eh_frame:000000000000AFCD                 db  8Eh
.eh_frame:000000000000AFCE                 db    3
.eh_frame:000000000000AFCF                 db  42h ; B
.eh_frame:000000000000AFD0                 db  0Eh
.eh_frame:000000000000AFD1                 db  20h
.eh_frame:000000000000AFD2                 db  8Dh
.eh_frame:000000000000AFD3                 db    4
.eh_frame:000000000000AFD4                 db  42h ; B
.eh_frame:000000000000AFD5                 db  0Eh
.eh_frame:000000000000AFD6                 db  28h ; (
.eh_frame:000000000000AFD7                 db  8Ch
.eh_frame:000000000000AFD8                 db    5
.eh_frame:000000000000AFD9                 db  41h ; A
.eh_frame:000000000000AFDA                 db  0Eh
.eh_frame:000000000000AFDB                 db  30h ; 0
.eh_frame:000000000000AFDC                 db  86h
.eh_frame:000000000000AFDD                 db    6
.eh_frame:000000000000AFDE                 db  41h ; A
.eh_frame:000000000000AFDF                 db  0Eh
.eh_frame:000000000000AFE0                 db  38h ; 8
.eh_frame:000000000000AFE1                 db  83h
.eh_frame:000000000000AFE2                 db    7
.eh_frame:000000000000AFE3                 db  44h ; D
.eh_frame:000000000000AFE4                 db  0Eh
.eh_frame:000000000000AFE5                 db 0A0h
.eh_frame:000000000000AFE6                 db    1
.eh_frame:000000000000AFE7                 db    2
.eh_frame:000000000000AFE8                 db  5Fh ; _
.eh_frame:000000000000AFE9                 db  0Ah
.eh_frame:000000000000AFEA                 db  0Eh
.eh_frame:000000000000AFEB                 db  38h ; 8
.eh_frame:000000000000AFEC                 db  41h ; A
.eh_frame:000000000000AFED                 db  0Eh
.eh_frame:000000000000AFEE                 db  30h ; 0
.eh_frame:000000000000AFEF                 db  41h ; A
.eh_frame:000000000000AFF0                 db  0Eh
.eh_frame:000000000000AFF1                 db  28h ; (
.eh_frame:000000000000AFF2                 db  42h ; B
.eh_frame:000000000000AFF3                 db  0Eh
.eh_frame:000000000000AFF4                 db  20h
.eh_frame:000000000000AFF5                 db  42h ; B
.eh_frame:000000000000AFF6                 db  0Eh
.eh_frame:000000000000AFF7                 db  18h
.eh_frame:000000000000AFF8                 db  42h ; B
.eh_frame:000000000000AFF9                 db  0Eh
.eh_frame:000000000000AFFA                 db  10h
.eh_frame:000000000000AFFB                 db  42h ; B
.eh_frame:000000000000AFFC                 db  0Eh
.eh_frame:000000000000AFFD                 db    8
.eh_frame:000000000000AFFE                 db  49h ; I
.eh_frame:000000000000AFFF                 db  0Bh
.eh_frame:000000000000B000                 db  1Ch
.eh_frame:000000000000B001                 db    0
.eh_frame:000000000000B002                 db    0
.eh_frame:000000000000B003                 db    0
.eh_frame:000000000000B004                 db  9Ch
.eh_frame:000000000000B005                 db    8
.eh_frame:000000000000B006                 db    0
.eh_frame:000000000000B007                 db    0
.eh_frame:000000000000B008                 db  68h ; h
.eh_frame:000000000000B009                 db 0A8h
.eh_frame:000000000000B00A                 db 0FFh
.eh_frame:000000000000B00B                 db 0FFh
.eh_frame:000000000000B00C                 db  5Dh ; ]
.eh_frame:000000000000B00D                 db    0
.eh_frame:000000000000B00E                 db    0
.eh_frame:000000000000B00F                 db    0
.eh_frame:000000000000B010                 db    0
.eh_frame:000000000000B011                 db  41h ; A
.eh_frame:000000000000B012                 db  0Eh
.eh_frame:000000000000B013                 db  10h
.eh_frame:000000000000B014                 db  86h
.eh_frame:000000000000B015                 db    2
.eh_frame:000000000000B016                 db  41h ; A
.eh_frame:000000000000B017                 db  0Eh
.eh_frame:000000000000B018                 db  18h
.eh_frame:000000000000B019                 db  83h
.eh_frame:000000000000B01A                 db    3
.eh_frame:000000000000B01B                 db  44h ; D
.eh_frame:000000000000B01C                 db  0Eh
.eh_frame:000000000000B01D                 db  20h
.eh_frame:000000000000B01E                 db    0
.eh_frame:000000000000B01F                 db    0
.eh_frame:000000000000B020                 db  48h ; H
.eh_frame:000000000000B021                 db    0
.eh_frame:000000000000B022                 db    0
.eh_frame:000000000000B023                 db    0
.eh_frame:000000000000B024                 db 0BCh
.eh_frame:000000000000B025                 db    8
.eh_frame:000000000000B026                 db    0
.eh_frame:000000000000B027                 db    0
.eh_frame:000000000000B028                 db 0A8h
.eh_frame:000000000000B029                 db 0A8h
.eh_frame:000000000000B02A                 db 0FFh
.eh_frame:000000000000B02B                 db 0FFh
.eh_frame:000000000000B02C                 db  29h ; )
.eh_frame:000000000000B02D                 db    3
.eh_frame:000000000000B02E                 db    0
.eh_frame:000000000000B02F                 db    0
.eh_frame:000000000000B030                 db    0
.eh_frame:000000000000B031                 db  42h ; B
.eh_frame:000000000000B032                 db  0Eh
.eh_frame:000000000000B033                 db  10h
.eh_frame:000000000000B034                 db  8Fh
.eh_frame:000000000000B035                 db    2
.eh_frame:000000000000B036                 db  42h ; B
.eh_frame:000000000000B037                 db  0Eh
.eh_frame:000000000000B038                 db  18h
.eh_frame:000000000000B039                 db  8Eh
.eh_frame:000000000000B03A                 db    3
.eh_frame:000000000000B03B                 db  42h ; B
.eh_frame:000000000000B03C                 db  0Eh
.eh_frame:000000000000B03D                 db  20h
.eh_frame:000000000000B03E                 db  8Dh
.eh_frame:000000000000B03F                 db    4
.eh_frame:000000000000B040                 db  42h ; B
.eh_frame:000000000000B041                 db  0Eh
.eh_frame:000000000000B042                 db  28h ; (
.eh_frame:000000000000B043                 db  8Ch
.eh_frame:000000000000B044                 db    5
.eh_frame:000000000000B045                 db  41h ; A
.eh_frame:000000000000B046                 db  0Eh
.eh_frame:000000000000B047                 db  30h ; 0
.eh_frame:000000000000B048                 db  86h
.eh_frame:000000000000B049                 db    6
.eh_frame:000000000000B04A                 db  41h ; A
.eh_frame:000000000000B04B                 db  0Eh
.eh_frame:000000000000B04C                 db  38h ; 8
.eh_frame:000000000000B04D                 db  83h
.eh_frame:000000000000B04E                 db    7
.eh_frame:000000000000B04F                 db  44h ; D
.eh_frame:000000000000B050                 db  0Eh
.eh_frame:000000000000B051                 db  70h ; p
.eh_frame:000000000000B052                 db    2
.eh_frame:000000000000B053                 db  94h
.eh_frame:000000000000B054                 db  0Ah
.eh_frame:000000000000B055                 db  0Eh
.eh_frame:000000000000B056                 db  38h ; 8
.eh_frame:000000000000B057                 db  41h ; A
.eh_frame:000000000000B058                 db  0Eh
.eh_frame:000000000000B059                 db  30h ; 0
.eh_frame:000000000000B05A                 db  41h ; A
.eh_frame:000000000000B05B                 db  0Eh
.eh_frame:000000000000B05C                 db  28h ; (
.eh_frame:000000000000B05D                 db  42h ; B
.eh_frame:000000000000B05E                 db  0Eh
.eh_frame:000000000000B05F                 db  20h
.eh_frame:000000000000B060                 db  42h ; B
.eh_frame:000000000000B061                 db  0Eh
.eh_frame:000000000000B062                 db  18h
.eh_frame:000000000000B063                 db  42h ; B
.eh_frame:000000000000B064                 db  0Eh
.eh_frame:000000000000B065                 db  10h
.eh_frame:000000000000B066                 db  42h ; B
.eh_frame:000000000000B067                 db  0Eh
.eh_frame:000000000000B068                 db    8
.eh_frame:000000000000B069                 db  44h ; D
.eh_frame:000000000000B06A                 db  0Bh
.eh_frame:000000000000B06B                 db    0
.eh_frame:000000000000B06C                 db  10h
.eh_frame:000000000000B06D                 db    0
.eh_frame:000000000000B06E                 db    0
.eh_frame:000000000000B06F                 db    0
.eh_frame:000000000000B070                 db    8
.eh_frame:000000000000B071                 db    9
.eh_frame:000000000000B072                 db    0
.eh_frame:000000000000B073                 db    0
.eh_frame:000000000000B074                 db  8Ch
.eh_frame:000000000000B075                 db 0ABh
.eh_frame:000000000000B076                 db 0FFh
.eh_frame:000000000000B077                 db 0FFh
.eh_frame:000000000000B078                 db    5
.eh_frame:000000000000B079                 db    0
.eh_frame:000000000000B07A                 db    0
.eh_frame:000000000000B07B                 db    0
.eh_frame:000000000000B07C                 db    0
.eh_frame:000000000000B07D                 db    0
.eh_frame:000000000000B07E                 db    0
.eh_frame:000000000000B07F                 db    0
.eh_frame:000000000000B080                 db  10h
.eh_frame:000000000000B081                 db    0
.eh_frame:000000000000B082                 db    0
.eh_frame:000000000000B083                 db    0
.eh_frame:000000000000B084                 db  1Ch
.eh_frame:000000000000B085                 db    9
.eh_frame:000000000000B086                 db    0
.eh_frame:000000000000B087                 db    0
.eh_frame:000000000000B088                 db  88h
.eh_frame:000000000000B089                 db 0ABh
.eh_frame:000000000000B08A                 db 0FFh
.eh_frame:000000000000B08B                 db 0FFh
.eh_frame:000000000000B08C                 db    5
.eh_frame:000000000000B08D                 db    0
.eh_frame:000000000000B08E                 db    0
.eh_frame:000000000000B08F                 db    0
.eh_frame:000000000000B090                 db    0
.eh_frame:000000000000B091                 db    0
.eh_frame:000000000000B092                 db    0
.eh_frame:000000000000B093                 db    0
.eh_frame:000000000000B094                 db  60h ; `
.eh_frame:000000000000B095                 db    0
.eh_frame:000000000000B096                 db    0
.eh_frame:000000000000B097                 db    0
.eh_frame:000000000000B098                 db  30h ; 0
.eh_frame:000000000000B099                 db    9
.eh_frame:000000000000B09A                 db    0
.eh_frame:000000000000B09B                 db    0
.eh_frame:000000000000B09C                 db  84h
.eh_frame:000000000000B09D                 db 0ABh
.eh_frame:000000000000B09E                 db 0FFh
.eh_frame:000000000000B09F                 db 0FFh
.eh_frame:000000000000B0A0                 db  96h
.eh_frame:000000000000B0A1                 db    1
.eh_frame:000000000000B0A2                 db    0
.eh_frame:000000000000B0A3                 db    0
.eh_frame:000000000000B0A4                 db    0
.eh_frame:000000000000B0A5                 db  42h ; B
.eh_frame:000000000000B0A6                 db  0Eh
.eh_frame:000000000000B0A7                 db  10h
.eh_frame:000000000000B0A8                 db  8Fh
.eh_frame:000000000000B0A9                 db    2
.eh_frame:000000000000B0AA                 db  42h ; B
.eh_frame:000000000000B0AB                 db  0Eh
.eh_frame:000000000000B0AC                 db  18h
.eh_frame:000000000000B0AD                 db  8Eh
.eh_frame:000000000000B0AE                 db    3
.eh_frame:000000000000B0AF                 db  42h ; B
.eh_frame:000000000000B0B0                 db  0Eh
.eh_frame:000000000000B0B1                 db  20h
.eh_frame:000000000000B0B2                 db  8Dh
.eh_frame:000000000000B0B3                 db    4
.eh_frame:000000000000B0B4                 db  42h ; B
.eh_frame:000000000000B0B5                 db  0Eh
.eh_frame:000000000000B0B6                 db  28h ; (
.eh_frame:000000000000B0B7                 db  8Ch
.eh_frame:000000000000B0B8                 db    5
.eh_frame:000000000000B0B9                 db  44h ; D
.eh_frame:000000000000B0BA                 db  0Eh
.eh_frame:000000000000B0BB                 db  30h ; 0
.eh_frame:000000000000B0BC                 db  86h
.eh_frame:000000000000B0BD                 db    6
.eh_frame:000000000000B0BE                 db  41h ; A
.eh_frame:000000000000B0BF                 db  0Eh
.eh_frame:000000000000B0C0                 db  38h ; 8
.eh_frame:000000000000B0C1                 db  83h
.eh_frame:000000000000B0C2                 db    7
.eh_frame:000000000000B0C3                 db  4Ah ; J
.eh_frame:000000000000B0C4                 db  0Eh
.eh_frame:000000000000B0C5                 db  50h ; P
.eh_frame:000000000000B0C6                 db    2
.eh_frame:000000000000B0C7                 db  5Fh ; _
.eh_frame:000000000000B0C8                 db  0Ah
.eh_frame:000000000000B0C9                 db  0Eh
.eh_frame:000000000000B0CA                 db  38h ; 8
.eh_frame:000000000000B0CB                 db  41h ; A
.eh_frame:000000000000B0CC                 db  0Eh
.eh_frame:000000000000B0CD                 db  30h ; 0
.eh_frame:000000000000B0CE                 db  41h ; A
.eh_frame:000000000000B0CF                 db  0Eh
.eh_frame:000000000000B0D0                 db  28h ; (
.eh_frame:000000000000B0D1                 db  42h ; B
.eh_frame:000000000000B0D2                 db  0Eh
.eh_frame:000000000000B0D3                 db  20h
.eh_frame:000000000000B0D4                 db  42h ; B
.eh_frame:000000000000B0D5                 db  0Eh
.eh_frame:000000000000B0D6                 db  18h
.eh_frame:000000000000B0D7                 db  42h ; B
.eh_frame:000000000000B0D8                 db  0Eh
.eh_frame:000000000000B0D9                 db  10h
.eh_frame:000000000000B0DA                 db  42h ; B
.eh_frame:000000000000B0DB                 db  0Eh
.eh_frame:000000000000B0DC                 db    8
.eh_frame:000000000000B0DD                 db  48h ; H
.eh_frame:000000000000B0DE                 db  0Bh
.eh_frame:000000000000B0DF                 db    2
.eh_frame:000000000000B0E0                 db  9Bh
.eh_frame:000000000000B0E1                 db  0Ah
.eh_frame:000000000000B0E2                 db  0Eh
.eh_frame:000000000000B0E3                 db  38h ; 8
.eh_frame:000000000000B0E4                 db  41h ; A
.eh_frame:000000000000B0E5                 db  0Eh
.eh_frame:000000000000B0E6                 db  30h ; 0
.eh_frame:000000000000B0E7                 db  41h ; A
.eh_frame:000000000000B0E8                 db  0Eh
.eh_frame:000000000000B0E9                 db  28h ; (
.eh_frame:000000000000B0EA                 db  42h ; B
.eh_frame:000000000000B0EB                 db  0Eh
.eh_frame:000000000000B0EC                 db  20h
.eh_frame:000000000000B0ED                 db  42h ; B
.eh_frame:000000000000B0EE                 db  0Eh
.eh_frame:000000000000B0EF                 db  18h
.eh_frame:000000000000B0F0                 db  42h ; B
.eh_frame:000000000000B0F1                 db  0Eh
.eh_frame:000000000000B0F2                 db  10h
.eh_frame:000000000000B0F3                 db  42h ; B
.eh_frame:000000000000B0F4                 db  0Eh
.eh_frame:000000000000B0F5                 db    8
.eh_frame:000000000000B0F6                 db  43h ; C
.eh_frame:000000000000B0F7                 db  0Bh
.eh_frame:000000000000B0F8                 db  34h ; 4
.eh_frame:000000000000B0F9                 db    0
.eh_frame:000000000000B0FA                 db    0
.eh_frame:000000000000B0FB                 db    0
.eh_frame:000000000000B0FC                 db  94h
.eh_frame:000000000000B0FD                 db    9
.eh_frame:000000000000B0FE                 db    0
.eh_frame:000000000000B0FF                 db    0
.eh_frame:000000000000B100                 db 0C0h
.eh_frame:000000000000B101                 db 0ACh
.eh_frame:000000000000B102                 db 0FFh
.eh_frame:000000000000B103                 db 0FFh
.eh_frame:000000000000B104                 db  49h ; I
.eh_frame:000000000000B105                 db    0
.eh_frame:000000000000B106                 db    0
.eh_frame:000000000000B107                 db    0
.eh_frame:000000000000B108                 db    0
.eh_frame:000000000000B109                 db  41h ; A
.eh_frame:000000000000B10A                 db  0Eh
.eh_frame:000000000000B10B                 db  10h
.eh_frame:000000000000B10C                 db  86h
.eh_frame:000000000000B10D                 db    2
.eh_frame:000000000000B10E                 db  41h ; A
.eh_frame:000000000000B10F                 db  0Eh
.eh_frame:000000000000B110                 db  18h
.eh_frame:000000000000B111                 db  83h
.eh_frame:000000000000B112                 db    3
.eh_frame:000000000000B113                 db  53h ; S
.eh_frame:000000000000B114                 db  0Eh
.eh_frame:000000000000B115                 db  20h
.eh_frame:000000000000B116                 db  59h ; Y
.eh_frame:000000000000B117                 db  0Ah
.eh_frame:000000000000B118                 db  0Eh
.eh_frame:000000000000B119                 db  18h
.eh_frame:000000000000B11A                 db  44h ; D
.eh_frame:000000000000B11B                 db  0Eh
.eh_frame:000000000000B11C                 db  10h
.eh_frame:000000000000B11D                 db  41h ; A
.eh_frame:000000000000B11E                 db  0Eh
.eh_frame:000000000000B11F                 db    8
.eh_frame:000000000000B120                 db  4Dh ; M
.eh_frame:000000000000B121                 db  0Bh
.eh_frame:000000000000B122                 db  44h ; D
.eh_frame:000000000000B123                 db  0Eh
.eh_frame:000000000000B124                 db  18h
.eh_frame:000000000000B125                 db  43h ; C
.eh_frame:000000000000B126                 db  0Eh
.eh_frame:000000000000B127                 db  10h
.eh_frame:000000000000B128                 db  41h ; A
.eh_frame:000000000000B129                 db  0Eh
.eh_frame:000000000000B12A                 db    8
.eh_frame:000000000000B12B                 db    0
.eh_frame:000000000000B12C                 db    0
.eh_frame:000000000000B12D                 db    0
.eh_frame:000000000000B12E                 db    0
.eh_frame:000000000000B12F                 db    0
.eh_frame:000000000000B130                 db  10h
.eh_frame:000000000000B131                 db    0
.eh_frame:000000000000B132                 db    0
.eh_frame:000000000000B133                 db    0
.eh_frame:000000000000B134                 db 0CCh
.eh_frame:000000000000B135                 db    9
.eh_frame:000000000000B136                 db    0
.eh_frame:000000000000B137                 db    0
.eh_frame:000000000000B138                 db 0D8h
.eh_frame:000000000000B139                 db 0ACh
.eh_frame:000000000000B13A                 db 0FFh
.eh_frame:000000000000B13B                 db 0FFh
.eh_frame:000000000000B13C                 db  8Eh
.eh_frame:000000000000B13D                 db    2
.eh_frame:000000000000B13E                 db    0
.eh_frame:000000000000B13F                 db    0
.eh_frame:000000000000B140                 db    0
.eh_frame:000000000000B141                 db    0
.eh_frame:000000000000B142                 db    0
.eh_frame:000000000000B143                 db    0
.eh_frame:000000000000B144                 db  30h ; 0
.eh_frame:000000000000B145                 db    0
.eh_frame:000000000000B146                 db    0
.eh_frame:000000000000B147                 db    0
.eh_frame:000000000000B148                 db 0E0h
.eh_frame:000000000000B149                 db    9
.eh_frame:000000000000B14A                 db    0
.eh_frame:000000000000B14B                 db    0
.eh_frame:000000000000B14C                 db  54h ; T
.eh_frame:000000000000B14D                 db 0AFh
.eh_frame:000000000000B14E                 db 0FFh
.eh_frame:000000000000B14F                 db 0FFh
.eh_frame:000000000000B150                 db  40h ; @
.eh_frame:000000000000B151                 db    2
.eh_frame:000000000000B152                 db    0
.eh_frame:000000000000B153                 db    0
.eh_frame:000000000000B154                 db    0
.eh_frame:000000000000B155                 db  42h ; B
.eh_frame:000000000000B156                 db  0Eh
.eh_frame:000000000000B157                 db  10h
.eh_frame:000000000000B158                 db  8Dh
.eh_frame:000000000000B159                 db    2
.eh_frame:000000000000B15A                 db  42h ; B
.eh_frame:000000000000B15B                 db  0Eh
.eh_frame:000000000000B15C                 db  18h
.eh_frame:000000000000B15D                 db  8Ch
.eh_frame:000000000000B15E                 db    3
.eh_frame:000000000000B15F                 db  48h ; H
.eh_frame:000000000000B160                 db  0Eh
.eh_frame:000000000000B161                 db  20h
.eh_frame:000000000000B162                 db  86h
.eh_frame:000000000000B163                 db    4
.eh_frame:000000000000B164                 db  44h ; D
.eh_frame:000000000000B165                 db  0Eh
.eh_frame:000000000000B166                 db  28h ; (
.eh_frame:000000000000B167                 db  83h
.eh_frame:000000000000B168                 db    5
.eh_frame:000000000000B169                 db    3
.eh_frame:000000000000B16A                 db    9
.eh_frame:000000000000B16B                 db    2
.eh_frame:000000000000B16C                 db  0Eh
.eh_frame:000000000000B16D                 db  20h
.eh_frame:000000000000B16E                 db  57h ; W
.eh_frame:000000000000B16F                 db  0Eh
.eh_frame:000000000000B170                 db  18h
.eh_frame:000000000000B171                 db  4Dh ; M
.eh_frame:000000000000B172                 db  0Eh
.eh_frame:000000000000B173                 db  10h
.eh_frame:000000000000B174                 db  42h ; B
.eh_frame:000000000000B175                 db  0Eh
.eh_frame:000000000000B176                 db    8
.eh_frame:000000000000B177                 db    0
.eh_frame:000000000000B178                 db  4Ch ; L
.eh_frame:000000000000B179                 db    0
.eh_frame:000000000000B17A                 db    0
.eh_frame:000000000000B17B                 db    0
.eh_frame:000000000000B17C                 db  14h
.eh_frame:000000000000B17D                 db  0Ah
.eh_frame:000000000000B17E                 db    0
.eh_frame:000000000000B17F                 db    0
.eh_frame:000000000000B180                 db  60h ; `
.eh_frame:000000000000B181                 db 0B1h
.eh_frame:000000000000B182                 db 0FFh
.eh_frame:000000000000B183                 db 0FFh
.eh_frame:000000000000B184                 db 0D8h
.eh_frame:000000000000B185                 db    1
.eh_frame:000000000000B186                 db    0
.eh_frame:000000000000B187                 db    0
.eh_frame:000000000000B188                 db    0
.eh_frame:000000000000B189                 db  42h ; B
.eh_frame:000000000000B18A                 db  0Eh
.eh_frame:000000000000B18B                 db  10h
.eh_frame:000000000000B18C                 db  8Fh
.eh_frame:000000000000B18D                 db    2
.eh_frame:000000000000B18E                 db  42h ; B
.eh_frame:000000000000B18F                 db  0Eh
.eh_frame:000000000000B190                 db  18h
.eh_frame:000000000000B191                 db  8Eh
.eh_frame:000000000000B192                 db    3
.eh_frame:000000000000B193                 db  42h ; B
.eh_frame:000000000000B194                 db  0Eh
.eh_frame:000000000000B195                 db  20h
.eh_frame:000000000000B196                 db  8Dh
.eh_frame:000000000000B197                 db    4
.eh_frame:000000000000B198                 db  42h ; B
.eh_frame:000000000000B199                 db  0Eh
.eh_frame:000000000000B19A                 db  28h ; (
.eh_frame:000000000000B19B                 db  8Ch
.eh_frame:000000000000B19C                 db    5
.eh_frame:000000000000B19D                 db  44h ; D
.eh_frame:000000000000B19E                 db  0Eh
.eh_frame:000000000000B19F                 db  30h ; 0
.eh_frame:000000000000B1A0                 db  86h
.eh_frame:000000000000B1A1                 db    6
.eh_frame:000000000000B1A2                 db  41h ; A
.eh_frame:000000000000B1A3                 db  0Eh
.eh_frame:000000000000B1A4                 db  38h ; 8
.eh_frame:000000000000B1A5                 db  83h
.eh_frame:000000000000B1A6                 db    7
.eh_frame:000000000000B1A7                 db  47h ; G
.eh_frame:000000000000B1A8                 db  0Eh
.eh_frame:000000000000B1A9                 db 0F0h
.eh_frame:000000000000B1AA                 db    1
.eh_frame:000000000000B1AB                 db    3
.eh_frame:000000000000B1AC                 db  1Dh
.eh_frame:000000000000B1AD                 db    1
.eh_frame:000000000000B1AE                 db  0Ah
.eh_frame:000000000000B1AF                 db  0Eh
.eh_frame:000000000000B1B0                 db  38h ; 8
.eh_frame:000000000000B1B1                 db  41h ; A
.eh_frame:000000000000B1B2                 db  0Eh
.eh_frame:000000000000B1B3                 db  30h ; 0
.eh_frame:000000000000B1B4                 db  41h ; A
.eh_frame:000000000000B1B5                 db  0Eh
.eh_frame:000000000000B1B6                 db  28h ; (
.eh_frame:000000000000B1B7                 db  42h ; B
.eh_frame:000000000000B1B8                 db  0Eh
.eh_frame:000000000000B1B9                 db  20h
.eh_frame:000000000000B1BA                 db  42h ; B
.eh_frame:000000000000B1BB                 db  0Eh
.eh_frame:000000000000B1BC                 db  18h
.eh_frame:000000000000B1BD                 db  42h ; B
.eh_frame:000000000000B1BE                 db  0Eh
.eh_frame:000000000000B1BF                 db  10h
.eh_frame:000000000000B1C0                 db  42h ; B
.eh_frame:000000000000B1C1                 db  0Eh
.eh_frame:000000000000B1C2                 db    8
.eh_frame:000000000000B1C3                 db  45h ; E
.eh_frame:000000000000B1C4                 db  0Bh
.eh_frame:000000000000B1C5                 db    0
.eh_frame:000000000000B1C6                 db    0
.eh_frame:000000000000B1C7                 db    0
.eh_frame:000000000000B1C8                 db  38h ; 8
.eh_frame:000000000000B1C9                 db    0
.eh_frame:000000000000B1CA                 db    0
.eh_frame:000000000000B1CB                 db    0
.eh_frame:000000000000B1CC                 db  64h ; d
.eh_frame:000000000000B1CD                 db  0Ah
.eh_frame:000000000000B1CE                 db    0
.eh_frame:000000000000B1CF                 db    0
.eh_frame:000000000000B1D0                 db 0F0h
.eh_frame:000000000000B1D1                 db 0B2h
.eh_frame:000000000000B1D2                 db 0FFh
.eh_frame:000000000000B1D3                 db 0FFh
.eh_frame:000000000000B1D4                 db  74h ; t
.eh_frame:000000000000B1D5                 db    0
.eh_frame:000000000000B1D6                 db    0
.eh_frame:000000000000B1D7                 db    0
.eh_frame:000000000000B1D8                 db    0
.eh_frame:000000000000B1D9                 db  42h ; B
.eh_frame:000000000000B1DA                 db  0Eh
.eh_frame:000000000000B1DB                 db  10h
.eh_frame:000000000000B1DC                 db  8Dh
.eh_frame:000000000000B1DD                 db    2
.eh_frame:000000000000B1DE                 db  42h ; B
.eh_frame:000000000000B1DF                 db  0Eh
.eh_frame:000000000000B1E0                 db  18h
.eh_frame:000000000000B1E1                 db  8Ch
.eh_frame:000000000000B1E2                 db    3
.eh_frame:000000000000B1E3                 db  41h ; A
.eh_frame:000000000000B1E4                 db  0Eh
.eh_frame:000000000000B1E5                 db  20h
.eh_frame:000000000000B1E6                 db  86h
.eh_frame:000000000000B1E7                 db    4
.eh_frame:000000000000B1E8                 db  41h ; A
.eh_frame:000000000000B1E9                 db  0Eh
.eh_frame:000000000000B1EA                 db  28h ; (
.eh_frame:000000000000B1EB                 db  83h
.eh_frame:000000000000B1EC                 db    5
.eh_frame:000000000000B1ED                 db  4Ah ; J
.eh_frame:000000000000B1EE                 db  0Eh
.eh_frame:000000000000B1EF                 db  30h ; 0
.eh_frame:000000000000B1F0                 db  76h ; v
.eh_frame:000000000000B1F1                 db  0Ah
.eh_frame:000000000000B1F2                 db  0Eh
.eh_frame:000000000000B1F3                 db  28h ; (
.eh_frame:000000000000B1F4                 db  44h ; D
.eh_frame:000000000000B1F5                 db  0Eh
.eh_frame:000000000000B1F6                 db  20h
.eh_frame:000000000000B1F7                 db  41h ; A
.eh_frame:000000000000B1F8                 db  0Eh
.eh_frame:000000000000B1F9                 db  18h
.eh_frame:000000000000B1FA                 db  42h ; B
.eh_frame:000000000000B1FB                 db  0Eh
.eh_frame:000000000000B1FC                 db  10h
.eh_frame:000000000000B1FD                 db  42h ; B
.eh_frame:000000000000B1FE                 db  0Eh
.eh_frame:000000000000B1FF                 db    8
.eh_frame:000000000000B200                 db  41h ; A
.eh_frame:000000000000B201                 db  0Bh
.eh_frame:000000000000B202                 db    0
.eh_frame:000000000000B203                 db    0
.eh_frame:000000000000B204                 db  10h
.eh_frame:000000000000B205                 db    0
.eh_frame:000000000000B206                 db    0
.eh_frame:000000000000B207                 db    0
.eh_frame:000000000000B208                 db 0A0h
.eh_frame:000000000000B209                 db  0Ah
.eh_frame:000000000000B20A                 db    0
.eh_frame:000000000000B20B                 db    0
.eh_frame:000000000000B20C                 db  34h ; 4
.eh_frame:000000000000B20D                 db 0B3h
.eh_frame:000000000000B20E                 db 0FFh
.eh_frame:000000000000B20F                 db 0FFh
.eh_frame:000000000000B210                 db  0Ch
.eh_frame:000000000000B211                 db    0
.eh_frame:000000000000B212                 db    0
.eh_frame:000000000000B213                 db    0
.eh_frame:000000000000B214                 db    0
.eh_frame:000000000000B215                 db    0
.eh_frame:000000000000B216                 db    0
.eh_frame:000000000000B217                 db    0
.eh_frame:000000000000B218                 db  14h
.eh_frame:000000000000B219                 db    0
.eh_frame:000000000000B21A                 db    0
.eh_frame:000000000000B21B                 db    0
.eh_frame:000000000000B21C                 db 0B4h
.eh_frame:000000000000B21D                 db  0Ah
.eh_frame:000000000000B21E                 db    0
.eh_frame:000000000000B21F                 db    0
.eh_frame:000000000000B220                 db  30h ; 0
.eh_frame:000000000000B221                 db 0B3h
.eh_frame:000000000000B222                 db 0FFh
.eh_frame:000000000000B223                 db 0FFh
.eh_frame:000000000000B224                 db  0Ch
.eh_frame:000000000000B225                 db    0
.eh_frame:000000000000B226                 db    0
.eh_frame:000000000000B227                 db    0
.eh_frame:000000000000B228                 db    0
.eh_frame:000000000000B229                 db    0
.eh_frame:000000000000B22A                 db    0
.eh_frame:000000000000B22B                 db    0
.eh_frame:000000000000B22C                 db    0
.eh_frame:000000000000B22D                 db    0
.eh_frame:000000000000B22E                 db    0
.eh_frame:000000000000B22F                 db    0
.eh_frame:000000000000B230                 db  10h
.eh_frame:000000000000B231                 db    1
.eh_frame:000000000000B232                 db    0
.eh_frame:000000000000B233                 db    0
.eh_frame:000000000000B234                 db 0CCh
.eh_frame:000000000000B235                 db  0Ah
.eh_frame:000000000000B236                 db    0
.eh_frame:000000000000B237                 db    0
.eh_frame:000000000000B238                 db  28h ; (
.eh_frame:000000000000B239                 db 0B3h
.eh_frame:000000000000B23A                 db 0FFh
.eh_frame:000000000000B23B                 db 0FFh
.eh_frame:000000000000B23C                 db  17h
.eh_frame:000000000000B23D                 db    4
.eh_frame:000000000000B23E                 db    0
.eh_frame:000000000000B23F                 db    0
.eh_frame:000000000000B240                 db    0
.eh_frame:000000000000B241                 db  42h ; B
.eh_frame:000000000000B242                 db  0Eh
.eh_frame:000000000000B243                 db  10h
.eh_frame:000000000000B244                 db  8Fh
.eh_frame:000000000000B245                 db    2
.eh_frame:000000000000B246                 db  42h ; B
.eh_frame:000000000000B247                 db  0Eh
.eh_frame:000000000000B248                 db  18h
.eh_frame:000000000000B249                 db  8Eh
.eh_frame:000000000000B24A                 db    3
.eh_frame:000000000000B24B                 db  42h ; B
.eh_frame:000000000000B24C                 db  0Eh
.eh_frame:000000000000B24D                 db  20h
.eh_frame:000000000000B24E                 db  8Dh
.eh_frame:000000000000B24F                 db    4
.eh_frame:000000000000B250                 db  42h ; B
.eh_frame:000000000000B251                 db  0Eh
.eh_frame:000000000000B252                 db  28h ; (
.eh_frame:000000000000B253                 db  8Ch
.eh_frame:000000000000B254                 db    5
.eh_frame:000000000000B255                 db  44h ; D
.eh_frame:000000000000B256                 db  0Eh
.eh_frame:000000000000B257                 db  30h ; 0
.eh_frame:000000000000B258                 db  86h
.eh_frame:000000000000B259                 db    6
.eh_frame:000000000000B25A                 db  41h ; A
.eh_frame:000000000000B25B                 db  0Eh
.eh_frame:000000000000B25C                 db  38h ; 8
.eh_frame:000000000000B25D                 db  83h
.eh_frame:000000000000B25E                 db    7
.eh_frame:000000000000B25F                 db  4Ah ; J
.eh_frame:000000000000B260                 db  0Eh
.eh_frame:000000000000B261                 db  60h ; `
.eh_frame:000000000000B262                 db    2
.eh_frame:000000000000B263                 db 0DDh
.eh_frame:000000000000B264                 db  0Eh
.eh_frame:000000000000B265                 db  68h ; h
.eh_frame:000000000000B266                 db  57h ; W
.eh_frame:000000000000B267                 db  0Eh
.eh_frame:000000000000B268                 db  70h ; p
.eh_frame:000000000000B269                 db  42h ; B
.eh_frame:000000000000B26A                 db  0Eh
.eh_frame:000000000000B26B                 db  78h ; x
.eh_frame:000000000000B26C                 db  42h ; B
.eh_frame:000000000000B26D                 db  0Eh
.eh_frame:000000000000B26E                 db  80h
.eh_frame:000000000000B26F                 db    1
.eh_frame:000000000000B270                 db  42h ; B
.eh_frame:000000000000B271                 db  0Eh
.eh_frame:000000000000B272                 db  88h
.eh_frame:000000000000B273                 db    1
.eh_frame:000000000000B274                 db  42h ; B
.eh_frame:000000000000B275                 db  0Eh
.eh_frame:000000000000B276                 db  90h
.eh_frame:000000000000B277                 db    1
.eh_frame:000000000000B278                 db  53h ; S
.eh_frame:000000000000B279                 db  0Eh
.eh_frame:000000000000B27A                 db  60h ; `
.eh_frame:000000000000B27B                 db  44h ; D
.eh_frame:000000000000B27C                 db  0Ah
.eh_frame:000000000000B27D                 db  0Eh
.eh_frame:000000000000B27E                 db  38h ; 8
.eh_frame:000000000000B27F                 db  41h ; A
.eh_frame:000000000000B280                 db  0Eh
.eh_frame:000000000000B281                 db  30h ; 0
.eh_frame:000000000000B282                 db  41h ; A
.eh_frame:000000000000B283                 db  0Eh
.eh_frame:000000000000B284                 db  28h ; (
.eh_frame:000000000000B285                 db  42h ; B
.eh_frame:000000000000B286                 db  0Eh
.eh_frame:000000000000B287                 db  20h
.eh_frame:000000000000B288                 db  42h ; B
.eh_frame:000000000000B289                 db  0Eh
.eh_frame:000000000000B28A                 db  18h
.eh_frame:000000000000B28B                 db  42h ; B
.eh_frame:000000000000B28C                 db  0Eh
.eh_frame:000000000000B28D                 db  10h
.eh_frame:000000000000B28E                 db  42h ; B
.eh_frame:000000000000B28F                 db  0Eh
.eh_frame:000000000000B290                 db    8
.eh_frame:000000000000B291                 db  44h ; D
.eh_frame:000000000000B292                 db  0Bh
.eh_frame:000000000000B293                 db    2
.eh_frame:000000000000B294                 db  78h ; x
.eh_frame:000000000000B295                 db  0Ah
.eh_frame:000000000000B296                 db  0Eh
.eh_frame:000000000000B297                 db  68h ; h
.eh_frame:000000000000B298                 db  48h ; H
.eh_frame:000000000000B299                 db  0Bh
.eh_frame:000000000000B29A                 db  5Ah ; Z
.eh_frame:000000000000B29B                 db  0Ah
.eh_frame:000000000000B29C                 db  0Eh
.eh_frame:000000000000B29D                 db  38h ; 8
.eh_frame:000000000000B29E                 db  47h ; G
.eh_frame:000000000000B29F                 db  0Eh
.eh_frame:000000000000B2A0                 db  30h ; 0
.eh_frame:000000000000B2A1                 db  41h ; A
.eh_frame:000000000000B2A2                 db  0Eh
.eh_frame:000000000000B2A3                 db  28h ; (
.eh_frame:000000000000B2A4                 db  42h ; B
.eh_frame:000000000000B2A5                 db  0Eh
.eh_frame:000000000000B2A6                 db  20h
.eh_frame:000000000000B2A7                 db  42h ; B
.eh_frame:000000000000B2A8                 db  0Eh
.eh_frame:000000000000B2A9                 db  18h
.eh_frame:000000000000B2AA                 db  42h ; B
.eh_frame:000000000000B2AB                 db  0Eh
.eh_frame:000000000000B2AC                 db  10h
.eh_frame:000000000000B2AD                 db  42h ; B
.eh_frame:000000000000B2AE                 db  0Eh
.eh_frame:000000000000B2AF                 db    8
.eh_frame:000000000000B2B0                 db  56h ; V
.eh_frame:000000000000B2B1                 db  0Bh
.eh_frame:000000000000B2B2                 db  5Eh ; ^
.eh_frame:000000000000B2B3                 db  0Ah
.eh_frame:000000000000B2B4                 db  0Eh
.eh_frame:000000000000B2B5                 db  38h ; 8
.eh_frame:000000000000B2B6                 db  52h ; R
.eh_frame:000000000000B2B7                 db  0Eh
.eh_frame:000000000000B2B8                 db  30h ; 0
.eh_frame:000000000000B2B9                 db  41h ; A
.eh_frame:000000000000B2BA                 db  0Eh
.eh_frame:000000000000B2BB                 db  28h ; (
.eh_frame:000000000000B2BC                 db  42h ; B
.eh_frame:000000000000B2BD                 db  0Eh
.eh_frame:000000000000B2BE                 db  20h
.eh_frame:000000000000B2BF                 db  42h ; B
.eh_frame:000000000000B2C0                 db  0Eh
.eh_frame:000000000000B2C1                 db  18h
.eh_frame:000000000000B2C2                 db  42h ; B
.eh_frame:000000000000B2C3                 db  0Eh
.eh_frame:000000000000B2C4                 db  10h
.eh_frame:000000000000B2C5                 db  42h ; B
.eh_frame:000000000000B2C6                 db  0Eh
.eh_frame:000000000000B2C7                 db    8
.eh_frame:000000000000B2C8                 db  4Fh ; O
.eh_frame:000000000000B2C9                 db  0Bh
.eh_frame:000000000000B2CA                 db  62h ; b
.eh_frame:000000000000B2CB                 db  0Ah
.eh_frame:000000000000B2CC                 db  0Eh
.eh_frame:000000000000B2CD                 db  38h ; 8
.eh_frame:000000000000B2CE                 db  50h ; P
.eh_frame:000000000000B2CF                 db  0Eh
.eh_frame:000000000000B2D0                 db  30h ; 0
.eh_frame:000000000000B2D1                 db  41h ; A
.eh_frame:000000000000B2D2                 db  0Eh
.eh_frame:000000000000B2D3                 db  28h ; (
.eh_frame:000000000000B2D4                 db  42h ; B
.eh_frame:000000000000B2D5                 db  0Eh
.eh_frame:000000000000B2D6                 db  20h
.eh_frame:000000000000B2D7                 db  42h ; B
.eh_frame:000000000000B2D8                 db  0Eh
.eh_frame:000000000000B2D9                 db  18h
.eh_frame:000000000000B2DA                 db  42h ; B
.eh_frame:000000000000B2DB                 db  0Eh
.eh_frame:000000000000B2DC                 db  10h
.eh_frame:000000000000B2DD                 db  42h ; B
.eh_frame:000000000000B2DE                 db  0Eh
.eh_frame:000000000000B2DF                 db    8
.eh_frame:000000000000B2E0                 db  55h ; U
.eh_frame:000000000000B2E1                 db  0Bh
.eh_frame:000000000000B2E2                 db  66h ; f
.eh_frame:000000000000B2E3                 db  0Eh
.eh_frame:000000000000B2E4                 db  68h ; h
.eh_frame:000000000000B2E5                 db  42h ; B
.eh_frame:000000000000B2E6                 db  0Eh
.eh_frame:000000000000B2E7                 db  70h ; p
.eh_frame:000000000000B2E8                 db  5Ch ; \
.eh_frame:000000000000B2E9                 db  0Eh
.eh_frame:000000000000B2EA                 db  68h ; h
.eh_frame:000000000000B2EB                 db  41h ; A
.eh_frame:000000000000B2EC                 db  0Eh
.eh_frame:000000000000B2ED                 db  60h ; `
.eh_frame:000000000000B2EE                 db  44h ; D
.eh_frame:000000000000B2EF                 db  0Ah
.eh_frame:000000000000B2F0                 db  0Eh
.eh_frame:000000000000B2F1                 db  38h ; 8
.eh_frame:000000000000B2F2                 db  41h ; A
.eh_frame:000000000000B2F3                 db  0Eh
.eh_frame:000000000000B2F4                 db  30h ; 0
.eh_frame:000000000000B2F5                 db  41h ; A
.eh_frame:000000000000B2F6                 db  0Eh
.eh_frame:000000000000B2F7                 db  28h ; (
.eh_frame:000000000000B2F8                 db  42h ; B
.eh_frame:000000000000B2F9                 db  0Eh
.eh_frame:000000000000B2FA                 db  20h
.eh_frame:000000000000B2FB                 db  42h ; B
.eh_frame:000000000000B2FC                 db  0Eh
.eh_frame:000000000000B2FD                 db  18h
.eh_frame:000000000000B2FE                 db  42h ; B
.eh_frame:000000000000B2FF                 db  0Eh
.eh_frame:000000000000B300                 db  10h
.eh_frame:000000000000B301                 db  42h ; B
.eh_frame:000000000000B302                 db  0Eh
.eh_frame:000000000000B303                 db    8
.eh_frame:000000000000B304                 db  45h ; E
.eh_frame:000000000000B305                 db  0Bh
.eh_frame:000000000000B306                 db  68h ; h
.eh_frame:000000000000B307                 db  0Ah
.eh_frame:000000000000B308                 db  0Eh
.eh_frame:000000000000B309                 db  68h ; h
.eh_frame:000000000000B30A                 db  48h ; H
.eh_frame:000000000000B30B                 db  0Bh
.eh_frame:000000000000B30C                 db  72h ; r
.eh_frame:000000000000B30D                 db  0Eh
.eh_frame:000000000000B30E                 db  68h ; h
.eh_frame:000000000000B30F                 db  45h ; E
.eh_frame:000000000000B310                 db  0Eh
.eh_frame:000000000000B311                 db  70h ; p
.eh_frame:000000000000B312                 db  42h ; B
.eh_frame:000000000000B313                 db  0Eh
.eh_frame:000000000000B314                 db  78h ; x
.eh_frame:000000000000B315                 db  42h ; B
.eh_frame:000000000000B316                 db  0Eh
.eh_frame:000000000000B317                 db  80h
.eh_frame:000000000000B318                 db    1
.eh_frame:000000000000B319                 db  5Eh ; ^
.eh_frame:000000000000B31A                 db  0Eh
.eh_frame:000000000000B31B                 db  60h ; `
.eh_frame:000000000000B31C                 db  44h ; D
.eh_frame:000000000000B31D                 db  0Ah
.eh_frame:000000000000B31E                 db  0Eh
.eh_frame:000000000000B31F                 db  38h ; 8
.eh_frame:000000000000B320                 db  41h ; A
.eh_frame:000000000000B321                 db  0Eh
.eh_frame:000000000000B322                 db  30h ; 0
.eh_frame:000000000000B323                 db  41h ; A
.eh_frame:000000000000B324                 db  0Eh
.eh_frame:000000000000B325                 db  28h ; (
.eh_frame:000000000000B326                 db  42h ; B
.eh_frame:000000000000B327                 db  0Eh
.eh_frame:000000000000B328                 db  20h
.eh_frame:000000000000B329                 db  42h ; B
.eh_frame:000000000000B32A                 db  0Eh
.eh_frame:000000000000B32B                 db  18h
.eh_frame:000000000000B32C                 db  42h ; B
.eh_frame:000000000000B32D                 db  0Eh
.eh_frame:000000000000B32E                 db  10h
.eh_frame:000000000000B32F                 db  42h ; B
.eh_frame:000000000000B330                 db  0Eh
.eh_frame:000000000000B331                 db    8
.eh_frame:000000000000B332                 db  41h ; A
.eh_frame:000000000000B333                 db  0Bh
.eh_frame:000000000000B334                 db  79h ; y
.eh_frame:000000000000B335                 db  0Ah
.eh_frame:000000000000B336                 db  0Eh
.eh_frame:000000000000B337                 db  68h ; h
.eh_frame:000000000000B338                 db  42h ; B
.eh_frame:000000000000B339                 db  0Eh
.eh_frame:000000000000B33A                 db  70h ; p
.eh_frame:000000000000B33B                 db  42h ; B
.eh_frame:000000000000B33C                 db  0Eh
.eh_frame:000000000000B33D                 db  78h ; x
.eh_frame:000000000000B33E                 db  42h ; B
.eh_frame:000000000000B33F                 db  0Eh
.eh_frame:000000000000B340                 db  80h
.eh_frame:000000000000B341                 db    1
.eh_frame:000000000000B342                 db  51h ; Q
.eh_frame:000000000000B343                 db  0Bh
.eh_frame:000000000000B344                 db  10h
.eh_frame:000000000000B345                 db    0
.eh_frame:000000000000B346                 db    0
.eh_frame:000000000000B347                 db    0
.eh_frame:000000000000B348                 db 0E0h
.eh_frame:000000000000B349                 db  0Bh
.eh_frame:000000000000B34A                 db    0
.eh_frame:000000000000B34B                 db    0
.eh_frame:000000000000B34C                 db  34h ; 4
.eh_frame:000000000000B34D                 db 0B6h
.eh_frame:000000000000B34E                 db 0FFh
.eh_frame:000000000000B34F                 db 0FFh
.eh_frame:000000000000B350                 db  20h
.eh_frame:000000000000B351                 db    0
.eh_frame:000000000000B352                 db    0
.eh_frame:000000000000B353                 db    0
.eh_frame:000000000000B354                 db    0
.eh_frame:000000000000B355                 db    0
.eh_frame:000000000000B356                 db    0
.eh_frame:000000000000B357                 db    0
.eh_frame:000000000000B358                 db  18h
.eh_frame:000000000000B359                 db    0
.eh_frame:000000000000B35A                 db    0
.eh_frame:000000000000B35B                 db    0
.eh_frame:000000000000B35C                 db 0F4h
.eh_frame:000000000000B35D                 db  0Bh
.eh_frame:000000000000B35E                 db    0
.eh_frame:000000000000B35F                 db    0
.eh_frame:000000000000B360                 db  40h ; @
.eh_frame:000000000000B361                 db 0B6h
.eh_frame:000000000000B362                 db 0FFh
.eh_frame:000000000000B363                 db 0FFh
.eh_frame:000000000000B364                 db  78h ; x
.eh_frame:000000000000B365                 db    0
.eh_frame:000000000000B366                 db    0
.eh_frame:000000000000B367                 db    0
.eh_frame:000000000000B368                 db    0
.eh_frame:000000000000B369                 db  44h ; D
.eh_frame:000000000000B36A                 db  0Eh
.eh_frame:000000000000B36B                 db  70h ; p
.eh_frame:000000000000B36C                 db    2
.eh_frame:000000000000B36D                 db  60h ; `
.eh_frame:000000000000B36E                 db  0Ah
.eh_frame:000000000000B36F                 db  0Eh
.eh_frame:000000000000B370                 db    8
.eh_frame:000000000000B371                 db  41h ; A
.eh_frame:000000000000B372                 db  0Bh
.eh_frame:000000000000B373                 db    0
.eh_frame:000000000000B374                 db  28h ; (
.eh_frame:000000000000B375                 db    0
.eh_frame:000000000000B376                 db    0
.eh_frame:000000000000B377                 db    0
.eh_frame:000000000000B378                 db  10h
.eh_frame:000000000000B379                 db  0Ch
.eh_frame:000000000000B37A                 db    0
.eh_frame:000000000000B37B                 db    0
.eh_frame:000000000000B37C                 db 0A4h
.eh_frame:000000000000B37D                 db 0B6h
.eh_frame:000000000000B37E                 db 0FFh
.eh_frame:000000000000B37F                 db 0FFh
.eh_frame:000000000000B380                 db 0D5h
.eh_frame:000000000000B381                 db    0
.eh_frame:000000000000B382                 db    0
.eh_frame:000000000000B383                 db    0
.eh_frame:000000000000B384                 db    0
.eh_frame:000000000000B385                 db  41h ; A
.eh_frame:000000000000B386                 db  0Eh
.eh_frame:000000000000B387                 db  10h
.eh_frame:000000000000B388                 db  86h
.eh_frame:000000000000B389                 db    2
.eh_frame:000000000000B38A                 db  41h ; A
.eh_frame:000000000000B38B                 db  0Eh
.eh_frame:000000000000B38C                 db  18h
.eh_frame:000000000000B38D                 db  83h
.eh_frame:000000000000B38E                 db    3
.eh_frame:000000000000B38F                 db  50h ; P
.eh_frame:000000000000B390                 db  0Eh
.eh_frame:000000000000B391                 db 0D0h
.eh_frame:000000000000B392                 db    1
.eh_frame:000000000000B393                 db    2
.eh_frame:000000000000B394                 db 0ABh
.eh_frame:000000000000B395                 db  0Ah
.eh_frame:000000000000B396                 db  0Eh
.eh_frame:000000000000B397                 db  18h
.eh_frame:000000000000B398                 db  41h ; A
.eh_frame:000000000000B399                 db  0Eh
.eh_frame:000000000000B39A                 db  10h
.eh_frame:000000000000B39B                 db  41h ; A
.eh_frame:000000000000B39C                 db  0Eh
.eh_frame:000000000000B39D                 db    8
.eh_frame:000000000000B39E                 db  41h ; A
.eh_frame:000000000000B39F                 db  0Bh
.eh_frame:000000000000B3A0                 db  1Ch
.eh_frame:000000000000B3A1                 db    0
.eh_frame:000000000000B3A2                 db    0
.eh_frame:000000000000B3A3                 db    0
.eh_frame:000000000000B3A4                 db  3Ch ; <
.eh_frame:000000000000B3A5                 db  0Ch
.eh_frame:000000000000B3A6                 db    0
.eh_frame:000000000000B3A7                 db    0
.eh_frame:000000000000B3A8                 db  58h ; X
.eh_frame:000000000000B3A9                 db 0B7h
.eh_frame:000000000000B3AA                 db 0FFh
.eh_frame:000000000000B3AB                 db 0FFh
.eh_frame:000000000000B3AC                 db  80h
.eh_frame:000000000000B3AD                 db    0
.eh_frame:000000000000B3AE                 db    0
.eh_frame:000000000000B3AF                 db    0
.eh_frame:000000000000B3B0                 db    0
.eh_frame:000000000000B3B1                 db  41h ; A
.eh_frame:000000000000B3B2                 db  0Eh
.eh_frame:000000000000B3B3                 db  10h
.eh_frame:000000000000B3B4                 db  83h
.eh_frame:000000000000B3B5                 db    2
.eh_frame:000000000000B3B6                 db    2
.eh_frame:000000000000B3B7                 db  7Ah ; z
.eh_frame:000000000000B3B8                 db  0Eh
.eh_frame:000000000000B3B9                 db    8
.eh_frame:000000000000B3BA                 db    0
.eh_frame:000000000000B3BB                 db    0
.eh_frame:000000000000B3BC                 db    0
.eh_frame:000000000000B3BD                 db    0
.eh_frame:000000000000B3BE                 db    0
.eh_frame:000000000000B3BF                 db    0
.eh_frame:000000000000B3C0                 db  18h
.eh_frame:000000000000B3C1                 db    0
.eh_frame:000000000000B3C2                 db    0
.eh_frame:000000000000B3C3                 db    0
.eh_frame:000000000000B3C4                 db  5Ch ; \
.eh_frame:000000000000B3C5                 db  0Ch
.eh_frame:000000000000B3C6                 db    0
.eh_frame:000000000000B3C7                 db    0
.eh_frame:000000000000B3C8                 db 0B8h
.eh_frame:000000000000B3C9                 db 0B7h
.eh_frame:000000000000B3CA                 db 0FFh
.eh_frame:000000000000B3CB                 db 0FFh
.eh_frame:000000000000B3CC                 db  1Ah
.eh_frame:000000000000B3CD                 db    0
.eh_frame:000000000000B3CE                 db    0
.eh_frame:000000000000B3CF                 db    0
.eh_frame:000000000000B3D0                 db    0
.eh_frame:000000000000B3D1                 db  41h ; A
.eh_frame:000000000000B3D2                 db  0Eh
.eh_frame:000000000000B3D3                 db  10h
.eh_frame:000000000000B3D4                 db  83h
.eh_frame:000000000000B3D5                 db    2
.eh_frame:000000000000B3D6                 db  53h ; S
.eh_frame:000000000000B3D7                 db  0Ah
.eh_frame:000000000000B3D8                 db  0Eh
.eh_frame:000000000000B3D9                 db    8
.eh_frame:000000000000B3DA                 db  41h ; A
.eh_frame:000000000000B3DB                 db  0Bh
.eh_frame:000000000000B3DC                 db  10h
.eh_frame:000000000000B3DD                 db    0
.eh_frame:000000000000B3DE                 db    0
.eh_frame:000000000000B3DF                 db    0
.eh_frame:000000000000B3E0                 db  78h ; x
.eh_frame:000000000000B3E1                 db  0Ch
.eh_frame:000000000000B3E2                 db    0
.eh_frame:000000000000B3E3                 db    0
.eh_frame:000000000000B3E4                 db 0BCh
.eh_frame:000000000000B3E5                 db 0B7h
.eh_frame:000000000000B3E6                 db 0FFh
.eh_frame:000000000000B3E7                 db 0FFh
.eh_frame:000000000000B3E8                 db  24h ; $
.eh_frame:000000000000B3E9                 db    0
.eh_frame:000000000000B3EA                 db    0
.eh_frame:000000000000B3EB                 db    0
.eh_frame:000000000000B3EC                 db    0
.eh_frame:000000000000B3ED                 db  5Fh ; _
.eh_frame:000000000000B3EE                 db  0Eh
.eh_frame:000000000000B3EF                 db  10h
.eh_frame:000000000000B3F0                 db  10h
.eh_frame:000000000000B3F1                 db    0
.eh_frame:000000000000B3F2                 db    0
.eh_frame:000000000000B3F3                 db    0
.eh_frame:000000000000B3F4                 db  8Ch
.eh_frame:000000000000B3F5                 db  0Ch
.eh_frame:000000000000B3F6                 db    0
.eh_frame:000000000000B3F7                 db    0
.eh_frame:000000000000B3F8                 db 0D8h
.eh_frame:000000000000B3F9                 db 0B7h
.eh_frame:000000000000B3FA                 db 0FFh
.eh_frame:000000000000B3FB                 db 0FFh
.eh_frame:000000000000B3FC                 db    2
.eh_frame:000000000000B3FD                 db    0
.eh_frame:000000000000B3FE                 db    0
.eh_frame:000000000000B3FF                 db    0
.eh_frame:000000000000B400                 db    0
.eh_frame:000000000000B401                 db    0
.eh_frame:000000000000B402                 db    0
.eh_frame:000000000000B403                 db    0
.eh_frame:000000000000B404                 db  20h
.eh_frame:000000000000B405                 db    0
.eh_frame:000000000000B406                 db    0
.eh_frame:000000000000B407                 db    0
.eh_frame:000000000000B408                 db 0A0h
.eh_frame:000000000000B409                 db  0Ch
.eh_frame:000000000000B40A                 db    0
.eh_frame:000000000000B40B                 db    0
.eh_frame:000000000000B40C                 db 0D4h
.eh_frame:000000000000B40D                 db 0B7h
.eh_frame:000000000000B40E                 db 0FFh
.eh_frame:000000000000B40F                 db 0FFh
.eh_frame:000000000000B410                 db  36h ; 6
.eh_frame:000000000000B411                 db    0
.eh_frame:000000000000B412                 db    0
.eh_frame:000000000000B413                 db    0
.eh_frame:000000000000B414                 db    0
.eh_frame:000000000000B415                 db  44h ; D
.eh_frame:000000000000B416                 db  0Eh
.eh_frame:000000000000B417                 db  10h
.eh_frame:000000000000B418                 db  83h
.eh_frame:000000000000B419                 db    2
.eh_frame:000000000000B41A                 db  5Dh ; ]
.eh_frame:000000000000B41B                 db  0Ah
.eh_frame:000000000000B41C                 db  0Eh
.eh_frame:000000000000B41D                 db    8
.eh_frame:000000000000B41E                 db  47h ; G
.eh_frame:000000000000B41F                 db  0Bh
.eh_frame:000000000000B420                 db  48h ; H
.eh_frame:000000000000B421                 db  0Ah
.eh_frame:000000000000B422                 db  0Eh
.eh_frame:000000000000B423                 db    8
.eh_frame:000000000000B424                 db  41h ; A
.eh_frame:000000000000B425                 db  0Bh
.eh_frame:000000000000B426                 db    0
.eh_frame:000000000000B427                 db    0
.eh_frame:000000000000B428                 db  10h
.eh_frame:000000000000B429                 db    0
.eh_frame:000000000000B42A                 db    0
.eh_frame:000000000000B42B                 db    0
.eh_frame:000000000000B42C                 db 0C4h
.eh_frame:000000000000B42D                 db  0Ch
.eh_frame:000000000000B42E                 db    0
.eh_frame:000000000000B42F                 db    0
.eh_frame:000000000000B430                 db 0F0h
.eh_frame:000000000000B431                 db 0B7h
.eh_frame:000000000000B432                 db 0FFh
.eh_frame:000000000000B433                 db 0FFh
.eh_frame:000000000000B434                 db  24h ; $
.eh_frame:000000000000B435                 db    0
.eh_frame:000000000000B436                 db    0
.eh_frame:000000000000B437                 db    0
.eh_frame:000000000000B438                 db    0
.eh_frame:000000000000B439                 db  5Fh ; _
.eh_frame:000000000000B43A                 db  0Eh
.eh_frame:000000000000B43B                 db  10h
.eh_frame:000000000000B43C                 db  14h
.eh_frame:000000000000B43D                 db    0
.eh_frame:000000000000B43E                 db    0
.eh_frame:000000000000B43F                 db    0
.eh_frame:000000000000B440                 db 0D8h
.eh_frame:000000000000B441                 db  0Ch
.eh_frame:000000000000B442                 db    0
.eh_frame:000000000000B443                 db    0
.eh_frame:000000000000B444                 db  0Ch
.eh_frame:000000000000B445                 db 0B8h
.eh_frame:000000000000B446                 db 0FFh
.eh_frame:000000000000B447                 db 0FFh
.eh_frame:000000000000B448                 db  82h
.eh_frame:000000000000B449                 db    0
.eh_frame:000000000000B44A                 db    0
.eh_frame:000000000000B44B                 db    0
.eh_frame:000000000000B44C                 db    0
.eh_frame:000000000000B44D                 db    2
.eh_frame:000000000000B44E                 db  5Fh ; _
.eh_frame:000000000000B44F                 db  0Eh
.eh_frame:000000000000B450                 db  10h
.eh_frame:000000000000B451                 db  49h ; I
.eh_frame:000000000000B452                 db  0Eh
.eh_frame:000000000000B453                 db    8
.eh_frame:000000000000B454                 db  14h
.eh_frame:000000000000B455                 db    0
.eh_frame:000000000000B456                 db    0
.eh_frame:000000000000B457                 db    0
.eh_frame:000000000000B458                 db 0F0h
.eh_frame:000000000000B459                 db  0Ch
.eh_frame:000000000000B45A                 db    0
.eh_frame:000000000000B45B                 db    0
.eh_frame:000000000000B45C                 db  84h
.eh_frame:000000000000B45D                 db 0B8h
.eh_frame:000000000000B45E                 db 0FFh
.eh_frame:000000000000B45F                 db 0FFh
.eh_frame:000000000000B460                 db  4Ah ; J
.eh_frame:000000000000B461                 db    0
.eh_frame:000000000000B462                 db    0
.eh_frame:000000000000B463                 db    0
.eh_frame:000000000000B464                 db    0
.eh_frame:000000000000B465                 db    2
.eh_frame:000000000000B466                 db  45h ; E
.eh_frame:000000000000B467                 db  0Eh
.eh_frame:000000000000B468                 db  10h
.eh_frame:000000000000B469                 db    0
.eh_frame:000000000000B46A                 db    0
.eh_frame:000000000000B46B                 db    0
.eh_frame:000000000000B46C                 db  18h
.eh_frame:000000000000B46D                 db    0
.eh_frame:000000000000B46E                 db    0
.eh_frame:000000000000B46F                 db    0
.eh_frame:000000000000B470                 db    8
.eh_frame:000000000000B471                 db  0Dh
.eh_frame:000000000000B472                 db    0
.eh_frame:000000000000B473                 db    0
.eh_frame:000000000000B474                 db 0BCh
.eh_frame:000000000000B475                 db 0B8h
.eh_frame:000000000000B476                 db 0FFh
.eh_frame:000000000000B477                 db 0FFh
.eh_frame:000000000000B478                 db  17h
.eh_frame:000000000000B479                 db    0
.eh_frame:000000000000B47A                 db    0
.eh_frame:000000000000B47B                 db    0
.eh_frame:000000000000B47C                 db    0
.eh_frame:000000000000B47D                 db  41h ; A
.eh_frame:000000000000B47E                 db  0Eh
.eh_frame:000000000000B47F                 db  10h
.eh_frame:000000000000B480                 db  83h
.eh_frame:000000000000B481                 db    2
.eh_frame:000000000000B482                 db  51h ; Q
.eh_frame:000000000000B483                 db  0Eh
.eh_frame:000000000000B484                 db    8
.eh_frame:000000000000B485                 db    0
.eh_frame:000000000000B486                 db    0
.eh_frame:000000000000B487                 db    0
.eh_frame:000000000000B488                 db  18h
.eh_frame:000000000000B489                 db    0
.eh_frame:000000000000B48A                 db    0
.eh_frame:000000000000B48B                 db    0
.eh_frame:000000000000B48C                 db  24h ; $
.eh_frame:000000000000B48D                 db  0Dh
.eh_frame:000000000000B48E                 db    0
.eh_frame:000000000000B48F                 db    0
.eh_frame:000000000000B490                 db 0C0h
.eh_frame:000000000000B491                 db 0B8h
.eh_frame:000000000000B492                 db 0FFh
.eh_frame:000000000000B493                 db 0FFh
.eh_frame:000000000000B494                 db  2Eh ; .
.eh_frame:000000000000B495                 db    0
.eh_frame:000000000000B496                 db    0
.eh_frame:000000000000B497                 db    0
.eh_frame:000000000000B498                 db    0
.eh_frame:000000000000B499                 db  47h ; G
.eh_frame:000000000000B49A                 db  0Eh
.eh_frame:000000000000B49B                 db  10h
.eh_frame:000000000000B49C                 db  61h ; a
.eh_frame:000000000000B49D                 db  0Ah
.eh_frame:000000000000B49E                 db  0Eh
.eh_frame:000000000000B49F                 db    8
.eh_frame:000000000000B4A0                 db  41h ; A
.eh_frame:000000000000B4A1                 db  0Bh
.eh_frame:000000000000B4A2                 db    0
.eh_frame:000000000000B4A3                 db    0
.eh_frame:000000000000B4A4                 db  24h ; $
.eh_frame:000000000000B4A5                 db    0
.eh_frame:000000000000B4A6                 db    0
.eh_frame:000000000000B4A7                 db    0
.eh_frame:000000000000B4A8                 db  40h ; @
.eh_frame:000000000000B4A9                 db  0Dh
.eh_frame:000000000000B4AA                 db    0
.eh_frame:000000000000B4AB                 db    0
.eh_frame:000000000000B4AC                 db 0D4h
.eh_frame:000000000000B4AD                 db 0B8h
.eh_frame:000000000000B4AE                 db 0FFh
.eh_frame:000000000000B4AF                 db 0FFh
.eh_frame:000000000000B4B0                 db  28h ; (
.eh_frame:000000000000B4B1                 db    0
.eh_frame:000000000000B4B2                 db    0
.eh_frame:000000000000B4B3                 db    0
.eh_frame:000000000000B4B4                 db    0
.eh_frame:000000000000B4B5                 db  41h ; A
.eh_frame:000000000000B4B6                 db  0Eh
.eh_frame:000000000000B4B7                 db  10h
.eh_frame:000000000000B4B8                 db  86h
.eh_frame:000000000000B4B9                 db    2
.eh_frame:000000000000B4BA                 db  41h ; A
.eh_frame:000000000000B4BB                 db  0Eh
.eh_frame:000000000000B4BC                 db  18h
.eh_frame:000000000000B4BD                 db  83h
.eh_frame:000000000000B4BE                 db    3
.eh_frame:000000000000B4BF                 db  4Dh ; M
.eh_frame:000000000000B4C0                 db  0Eh
.eh_frame:000000000000B4C1                 db  20h
.eh_frame:000000000000B4C2                 db  49h ; I
.eh_frame:000000000000B4C3                 db  0Eh
.eh_frame:000000000000B4C4                 db  18h
.eh_frame:000000000000B4C5                 db  47h ; G
.eh_frame:000000000000B4C6                 db  0Eh
.eh_frame:000000000000B4C7                 db  10h
.eh_frame:000000000000B4C8                 db  41h ; A
.eh_frame:000000000000B4C9                 db  0Eh
.eh_frame:000000000000B4CA                 db    8
.eh_frame:000000000000B4CB                 db    0
.eh_frame:000000000000B4CC                 db  18h
.eh_frame:000000000000B4CD                 db    0
.eh_frame:000000000000B4CE                 db    0
.eh_frame:000000000000B4CF                 db    0
.eh_frame:000000000000B4D0                 db  68h ; h
.eh_frame:000000000000B4D1                 db  0Dh
.eh_frame:000000000000B4D2                 db    0
.eh_frame:000000000000B4D3                 db    0
.eh_frame:000000000000B4D4                 db 0DCh
.eh_frame:000000000000B4D5                 db 0B8h
.eh_frame:000000000000B4D6                 db 0FFh
.eh_frame:000000000000B4D7                 db 0FFh
.eh_frame:000000000000B4D8                 db  13h
.eh_frame:000000000000B4D9                 db    0
.eh_frame:000000000000B4DA                 db    0
.eh_frame:000000000000B4DB                 db    0
.eh_frame:000000000000B4DC                 db    0
.eh_frame:000000000000B4DD                 db  41h ; A
.eh_frame:000000000000B4DE                 db  0Eh
.eh_frame:000000000000B4DF                 db  10h
.eh_frame:000000000000B4E0                 db  83h
.eh_frame:000000000000B4E1                 db    2
.eh_frame:000000000000B4E2                 db  50h ; P
.eh_frame:000000000000B4E3                 db  0Eh
.eh_frame:000000000000B4E4                 db    8
.eh_frame:000000000000B4E5                 db    0
.eh_frame:000000000000B4E6                 db    0
.eh_frame:000000000000B4E7                 db    0
.eh_frame:000000000000B4E8                 db  14h
.eh_frame:000000000000B4E9                 db    0
.eh_frame:000000000000B4EA                 db    0
.eh_frame:000000000000B4EB                 db    0
.eh_frame:000000000000B4EC                 db  84h
.eh_frame:000000000000B4ED                 db  0Dh
.eh_frame:000000000000B4EE                 db    0
.eh_frame:000000000000B4EF                 db    0
.eh_frame:000000000000B4F0                 db 0E0h
.eh_frame:000000000000B4F1                 db 0B8h
.eh_frame:000000000000B4F2                 db 0FFh
.eh_frame:000000000000B4F3                 db 0FFh
.eh_frame:000000000000B4F4                 db  35h ; 5
.eh_frame:000000000000B4F5                 db    0
.eh_frame:000000000000B4F6                 db    0
.eh_frame:000000000000B4F7                 db    0
.eh_frame:000000000000B4F8                 db    0
.eh_frame:000000000000B4F9                 db  4Bh ; K
.eh_frame:000000000000B4FA                 db  0Eh
.eh_frame:000000000000B4FB                 db  10h
.eh_frame:000000000000B4FC                 db    0
.eh_frame:000000000000B4FD                 db    0
.eh_frame:000000000000B4FE                 db    0
.eh_frame:000000000000B4FF                 db    0
.eh_frame:000000000000B500                 db  48h ; H
.eh_frame:000000000000B501                 db    0
.eh_frame:000000000000B502                 db    0
.eh_frame:000000000000B503                 db    0
.eh_frame:000000000000B504                 db  9Ch
.eh_frame:000000000000B505                 db  0Dh
.eh_frame:000000000000B506                 db    0
.eh_frame:000000000000B507                 db    0
.eh_frame:000000000000B508                 db    8
.eh_frame:000000000000B509                 db 0B9h
.eh_frame:000000000000B50A                 db 0FFh
.eh_frame:000000000000B50B                 db 0FFh
.eh_frame:000000000000B50C                 db    0
.eh_frame:000000000000B50D                 db    1
.eh_frame:000000000000B50E                 db    0
.eh_frame:000000000000B50F                 db    0
.eh_frame:000000000000B510                 db    0
.eh_frame:000000000000B511                 db  42h ; B
.eh_frame:000000000000B512                 db  0Eh
.eh_frame:000000000000B513                 db  10h
.eh_frame:000000000000B514                 db  8Fh
.eh_frame:000000000000B515                 db    2
.eh_frame:000000000000B516                 db  42h ; B
.eh_frame:000000000000B517                 db  0Eh
.eh_frame:000000000000B518                 db  18h
.eh_frame:000000000000B519                 db  8Eh
.eh_frame:000000000000B51A                 db    3
.eh_frame:000000000000B51B                 db  45h ; E
.eh_frame:000000000000B51C                 db  0Eh
.eh_frame:000000000000B51D                 db  20h
.eh_frame:000000000000B51E                 db  8Dh
.eh_frame:000000000000B51F                 db    4
.eh_frame:000000000000B520                 db  42h ; B
.eh_frame:000000000000B521                 db  0Eh
.eh_frame:000000000000B522                 db  28h ; (
.eh_frame:000000000000B523                 db  8Ch
.eh_frame:000000000000B524                 db    5
.eh_frame:000000000000B525                 db  44h ; D
.eh_frame:000000000000B526                 db  0Eh
.eh_frame:000000000000B527                 db  30h ; 0
.eh_frame:000000000000B528                 db  86h
.eh_frame:000000000000B529                 db    6
.eh_frame:000000000000B52A                 db  41h ; A
.eh_frame:000000000000B52B                 db  0Eh
.eh_frame:000000000000B52C                 db  38h ; 8
.eh_frame:000000000000B52D                 db  83h
.eh_frame:000000000000B52E                 db    7
.eh_frame:000000000000B52F                 db  4Eh ; N
.eh_frame:000000000000B530                 db  0Eh
.eh_frame:000000000000B531                 db  50h ; P
.eh_frame:000000000000B532                 db    2
.eh_frame:000000000000B533                 db  9Dh
.eh_frame:000000000000B534                 db  0Ah
.eh_frame:000000000000B535                 db  0Eh
.eh_frame:000000000000B536                 db  38h ; 8
.eh_frame:000000000000B537                 db  41h ; A
.eh_frame:000000000000B538                 db  0Eh
.eh_frame:000000000000B539                 db  30h ; 0
.eh_frame:000000000000B53A                 db  41h ; A
.eh_frame:000000000000B53B                 db  0Eh
.eh_frame:000000000000B53C                 db  28h ; (
.eh_frame:000000000000B53D                 db  42h ; B
.eh_frame:000000000000B53E                 db  0Eh
.eh_frame:000000000000B53F                 db  20h
.eh_frame:000000000000B540                 db  42h ; B
.eh_frame:000000000000B541                 db  0Eh
.eh_frame:000000000000B542                 db  18h
.eh_frame:000000000000B543                 db  42h ; B
.eh_frame:000000000000B544                 db  0Eh
.eh_frame:000000000000B545                 db  10h
.eh_frame:000000000000B546                 db  42h ; B
.eh_frame:000000000000B547                 db  0Eh
.eh_frame:000000000000B548                 db    8
.eh_frame:000000000000B549                 db  4Bh ; K
.eh_frame:000000000000B54A                 db  0Bh
.eh_frame:000000000000B54B                 db    0
.eh_frame:000000000000B54C                 db  18h
.eh_frame:000000000000B54D                 db    0
.eh_frame:000000000000B54E                 db    0
.eh_frame:000000000000B54F                 db    0
.eh_frame:000000000000B550                 db 0E8h
.eh_frame:000000000000B551                 db  0Dh
.eh_frame:000000000000B552                 db    0
.eh_frame:000000000000B553                 db    0
.eh_frame:000000000000B554                 db 0BCh
.eh_frame:000000000000B555                 db 0B9h
.eh_frame:000000000000B556                 db 0FFh
.eh_frame:000000000000B557                 db 0FFh
.eh_frame:000000000000B558                 db  21h ; !
.eh_frame:000000000000B559                 db    0
.eh_frame:000000000000B55A                 db    0
.eh_frame:000000000000B55B                 db    0
.eh_frame:000000000000B55C                 db    0
.eh_frame:000000000000B55D                 db  44h ; D
.eh_frame:000000000000B55E                 db  0Eh
.eh_frame:000000000000B55F                 db  18h
.eh_frame:000000000000B560                 db  42h ; B
.eh_frame:000000000000B561                 db  0Eh
.eh_frame:000000000000B562                 db  20h
.eh_frame:000000000000B563                 db  5Ah ; Z
.eh_frame:000000000000B564                 db  0Eh
.eh_frame:000000000000B565                 db    8
.eh_frame:000000000000B566                 db    0
.eh_frame:000000000000B567                 db    0
.eh_frame:000000000000B568                 db  4Ch ; L
.eh_frame:000000000000B569                 db    0
.eh_frame:000000000000B56A                 db    0
.eh_frame:000000000000B56B                 db    0
.eh_frame:000000000000B56C                 db    4
.eh_frame:000000000000B56D                 db  0Eh
.eh_frame:000000000000B56E                 db    0
.eh_frame:000000000000B56F                 db    0
.eh_frame:000000000000B570                 db 0D0h
.eh_frame:000000000000B571                 db 0B9h
.eh_frame:000000000000B572                 db 0FFh
.eh_frame:000000000000B573                 db 0FFh
.eh_frame:000000000000B574                 db  1Ch
.eh_frame:000000000000B575                 db    4
.eh_frame:000000000000B576                 db    0
.eh_frame:000000000000B577                 db    0
.eh_frame:000000000000B578                 db    0
.eh_frame:000000000000B579                 db  42h ; B
.eh_frame:000000000000B57A                 db  0Eh
.eh_frame:000000000000B57B                 db  10h
.eh_frame:000000000000B57C                 db  8Fh
.eh_frame:000000000000B57D                 db    2
.eh_frame:000000000000B57E                 db  42h ; B
.eh_frame:000000000000B57F                 db  0Eh
.eh_frame:000000000000B580                 db  18h
.eh_frame:000000000000B581                 db  8Eh
.eh_frame:000000000000B582                 db    3
.eh_frame:000000000000B583                 db  42h ; B
.eh_frame:000000000000B584                 db  0Eh
.eh_frame:000000000000B585                 db  20h
.eh_frame:000000000000B586                 db  8Dh
.eh_frame:000000000000B587                 db    4
.eh_frame:000000000000B588                 db  42h ; B
.eh_frame:000000000000B589                 db  0Eh
.eh_frame:000000000000B58A                 db  28h ; (
.eh_frame:000000000000B58B                 db  8Ch
.eh_frame:000000000000B58C                 db    5
.eh_frame:000000000000B58D                 db  41h ; A
.eh_frame:000000000000B58E                 db  0Eh
.eh_frame:000000000000B58F                 db  30h ; 0
.eh_frame:000000000000B590                 db  86h
.eh_frame:000000000000B591                 db    6
.eh_frame:000000000000B592                 db  41h ; A
.eh_frame:000000000000B593                 db  0Eh
.eh_frame:000000000000B594                 db  38h ; 8
.eh_frame:000000000000B595                 db  83h
.eh_frame:000000000000B596                 db    7
.eh_frame:000000000000B597                 db  44h ; D
.eh_frame:000000000000B598                 db  0Eh
.eh_frame:000000000000B599                 db  60h ; `
.eh_frame:000000000000B59A                 db    2
.eh_frame:000000000000B59B                 db 0E9h
.eh_frame:000000000000B59C                 db  0Ah
.eh_frame:000000000000B59D                 db  0Eh
.eh_frame:000000000000B59E                 db  38h ; 8
.eh_frame:000000000000B59F                 db  41h ; A
.eh_frame:000000000000B5A0                 db  0Eh
.eh_frame:000000000000B5A1                 db  30h ; 0
.eh_frame:000000000000B5A2                 db  41h ; A
.eh_frame:000000000000B5A3                 db  0Eh
.eh_frame:000000000000B5A4                 db  28h ; (
.eh_frame:000000000000B5A5                 db  42h ; B
.eh_frame:000000000000B5A6                 db  0Eh
.eh_frame:000000000000B5A7                 db  20h
.eh_frame:000000000000B5A8                 db  42h ; B
.eh_frame:000000000000B5A9                 db  0Eh
.eh_frame:000000000000B5AA                 db  18h
.eh_frame:000000000000B5AB                 db  42h ; B
.eh_frame:000000000000B5AC                 db  0Eh
.eh_frame:000000000000B5AD                 db  10h
.eh_frame:000000000000B5AE                 db  42h ; B
.eh_frame:000000000000B5AF                 db  0Eh
.eh_frame:000000000000B5B0                 db    8
.eh_frame:000000000000B5B1                 db  47h ; G
.eh_frame:000000000000B5B2                 db  0Bh
.eh_frame:000000000000B5B3                 db    0
.eh_frame:000000000000B5B4                 db    0
.eh_frame:000000000000B5B5                 db    0
.eh_frame:000000000000B5B6                 db    0
.eh_frame:000000000000B5B7                 db    0
.eh_frame:000000000000B5B8                 db  4Ch ; L
.eh_frame:000000000000B5B9                 db    0
.eh_frame:000000000000B5BA                 db    0
.eh_frame:000000000000B5BB                 db    0
.eh_frame:000000000000B5BC                 db  54h ; T
.eh_frame:000000000000B5BD                 db  0Eh
.eh_frame:000000000000B5BE                 db    0
.eh_frame:000000000000B5BF                 db    0
.eh_frame:000000000000B5C0                 db 0A0h
.eh_frame:000000000000B5C1                 db 0BDh
.eh_frame:000000000000B5C2                 db 0FFh
.eh_frame:000000000000B5C3                 db 0FFh
.eh_frame:000000000000B5C4                 db  1Ch
.eh_frame:000000000000B5C5                 db    4
.eh_frame:000000000000B5C6                 db    0
.eh_frame:000000000000B5C7                 db    0
.eh_frame:000000000000B5C8                 db    0
.eh_frame:000000000000B5C9                 db  42h ; B
.eh_frame:000000000000B5CA                 db  0Eh
.eh_frame:000000000000B5CB                 db  10h
.eh_frame:000000000000B5CC                 db  8Fh
.eh_frame:000000000000B5CD                 db    2
.eh_frame:000000000000B5CE                 db  42h ; B
.eh_frame:000000000000B5CF                 db  0Eh
.eh_frame:000000000000B5D0                 db  18h
.eh_frame:000000000000B5D1                 db  8Eh
.eh_frame:000000000000B5D2                 db    3
.eh_frame:000000000000B5D3                 db  42h ; B
.eh_frame:000000000000B5D4                 db  0Eh
.eh_frame:000000000000B5D5                 db  20h
.eh_frame:000000000000B5D6                 db  8Dh
.eh_frame:000000000000B5D7                 db    4
.eh_frame:000000000000B5D8                 db  42h ; B
.eh_frame:000000000000B5D9                 db  0Eh
.eh_frame:000000000000B5DA                 db  28h ; (
.eh_frame:000000000000B5DB                 db  8Ch
.eh_frame:000000000000B5DC                 db    5
.eh_frame:000000000000B5DD                 db  41h ; A
.eh_frame:000000000000B5DE                 db  0Eh
.eh_frame:000000000000B5DF                 db  30h ; 0
.eh_frame:000000000000B5E0                 db  86h
.eh_frame:000000000000B5E1                 db    6
.eh_frame:000000000000B5E2                 db  41h ; A
.eh_frame:000000000000B5E3                 db  0Eh
.eh_frame:000000000000B5E4                 db  38h ; 8
.eh_frame:000000000000B5E5                 db  83h
.eh_frame:000000000000B5E6                 db    7
.eh_frame:000000000000B5E7                 db  44h ; D
.eh_frame:000000000000B5E8                 db  0Eh
.eh_frame:000000000000B5E9                 db  60h ; `
.eh_frame:000000000000B5EA                 db    2
.eh_frame:000000000000B5EB                 db 0E9h
.eh_frame:000000000000B5EC                 db  0Ah
.eh_frame:000000000000B5ED                 db  0Eh
.eh_frame:000000000000B5EE                 db  38h ; 8
.eh_frame:000000000000B5EF                 db  41h ; A
.eh_frame:000000000000B5F0                 db  0Eh
.eh_frame:000000000000B5F1                 db  30h ; 0
.eh_frame:000000000000B5F2                 db  41h ; A
.eh_frame:000000000000B5F3                 db  0Eh
.eh_frame:000000000000B5F4                 db  28h ; (
.eh_frame:000000000000B5F5                 db  42h ; B
.eh_frame:000000000000B5F6                 db  0Eh
.eh_frame:000000000000B5F7                 db  20h
.eh_frame:000000000000B5F8                 db  42h ; B
.eh_frame:000000000000B5F9                 db  0Eh
.eh_frame:000000000000B5FA                 db  18h
.eh_frame:000000000000B5FB                 db  42h ; B
.eh_frame:000000000000B5FC                 db  0Eh
.eh_frame:000000000000B5FD                 db  10h
.eh_frame:000000000000B5FE                 db  42h ; B
.eh_frame:000000000000B5FF                 db  0Eh
.eh_frame:000000000000B600                 db    8
.eh_frame:000000000000B601                 db  47h ; G
.eh_frame:000000000000B602                 db  0Bh
.eh_frame:000000000000B603                 db    0
.eh_frame:000000000000B604                 db    0
.eh_frame:000000000000B605                 db    0
.eh_frame:000000000000B606                 db    0
.eh_frame:000000000000B607                 db    0
.eh_frame:000000000000B608                 db  34h ; 4
.eh_frame:000000000000B609                 db    0
.eh_frame:000000000000B60A                 db    0
.eh_frame:000000000000B60B                 db    0
.eh_frame:000000000000B60C                 db 0A4h
.eh_frame:000000000000B60D                 db  0Eh
.eh_frame:000000000000B60E                 db    0
.eh_frame:000000000000B60F                 db    0
.eh_frame:000000000000B610                 db  70h ; p
.eh_frame:000000000000B611                 db 0C1h
.eh_frame:000000000000B612                 db 0FFh
.eh_frame:000000000000B613                 db 0FFh
.eh_frame:000000000000B614                 db  7Bh ; {
.eh_frame:000000000000B615                 db    0
.eh_frame:000000000000B616                 db    0
.eh_frame:000000000000B617                 db    0
.eh_frame:000000000000B618                 db    0
.eh_frame:000000000000B619                 db  42h ; B
.eh_frame:000000000000B61A                 db  0Eh
.eh_frame:000000000000B61B                 db  10h
.eh_frame:000000000000B61C                 db  8Ch
.eh_frame:000000000000B61D                 db    2
.eh_frame:000000000000B61E                 db  41h ; A
.eh_frame:000000000000B61F                 db  0Eh
.eh_frame:000000000000B620                 db  18h
.eh_frame:000000000000B621                 db  86h
.eh_frame:000000000000B622                 db    3
.eh_frame:000000000000B623                 db  41h ; A
.eh_frame:000000000000B624                 db  0Eh
.eh_frame:000000000000B625                 db  20h
.eh_frame:000000000000B626                 db  83h
.eh_frame:000000000000B627                 db    4
.eh_frame:000000000000B628                 db  7Dh ; }
.eh_frame:000000000000B629                 db  0Ah
.eh_frame:000000000000B62A                 db  0Eh
.eh_frame:000000000000B62B                 db  18h
.eh_frame:000000000000B62C                 db  41h ; A
.eh_frame:000000000000B62D                 db  0Eh
.eh_frame:000000000000B62E                 db  10h
.eh_frame:000000000000B62F                 db  42h ; B
.eh_frame:000000000000B630                 db  0Eh
.eh_frame:000000000000B631                 db    8
.eh_frame:000000000000B632                 db  44h ; D
.eh_frame:000000000000B633                 db  0Bh
.eh_frame:000000000000B634                 db  60h ; `
.eh_frame:000000000000B635                 db  0Ah
.eh_frame:000000000000B636                 db  0Eh
.eh_frame:000000000000B637                 db  18h
.eh_frame:000000000000B638                 db  41h ; A
.eh_frame:000000000000B639                 db  0Eh
.eh_frame:000000000000B63A                 db  10h
.eh_frame:000000000000B63B                 db  42h ; B
.eh_frame:000000000000B63C                 db  0Eh
.eh_frame:000000000000B63D                 db    8
.eh_frame:000000000000B63E                 db  45h ; E
.eh_frame:000000000000B63F                 db  0Bh
.eh_frame:000000000000B640                 db  1Ch
.eh_frame:000000000000B641                 db    0
.eh_frame:000000000000B642                 db    0
.eh_frame:000000000000B643                 db    0
.eh_frame:000000000000B644                 db 0DCh
.eh_frame:000000000000B645                 db  0Eh
.eh_frame:000000000000B646                 db    0
.eh_frame:000000000000B647                 db    0
.eh_frame:000000000000B648                 db 0B8h
.eh_frame:000000000000B649                 db 0C1h
.eh_frame:000000000000B64A                 db 0FFh
.eh_frame:000000000000B64B                 db 0FFh
.eh_frame:000000000000B64C                 db  40h ; @
.eh_frame:000000000000B64D                 db    0
.eh_frame:000000000000B64E                 db    0
.eh_frame:000000000000B64F                 db    0
.eh_frame:000000000000B650                 db    0
.eh_frame:000000000000B651                 db  44h ; D
.eh_frame:000000000000B652                 db  0Eh
.eh_frame:000000000000B653                 db  10h
.eh_frame:000000000000B654                 db  83h
.eh_frame:000000000000B655                 db    2
.eh_frame:000000000000B656                 db  5Ah ; Z
.eh_frame:000000000000B657                 db  0Ah
.eh_frame:000000000000B658                 db  0Eh
.eh_frame:000000000000B659                 db    8
.eh_frame:000000000000B65A                 db  4Ah ; J
.eh_frame:000000000000B65B                 db  0Bh
.eh_frame:000000000000B65C                 db  53h ; S
.eh_frame:000000000000B65D                 db  0Eh
.eh_frame:000000000000B65E                 db    8
.eh_frame:000000000000B65F                 db    0
.eh_frame:000000000000B660                 db  2Ch ; ,
.eh_frame:000000000000B661                 db    0
.eh_frame:000000000000B662                 db    0
.eh_frame:000000000000B663                 db    0
.eh_frame:000000000000B664                 db 0FCh
.eh_frame:000000000000B665                 db  0Eh
.eh_frame:000000000000B666                 db    0
.eh_frame:000000000000B667                 db    0
.eh_frame:000000000000B668                 db 0D8h
.eh_frame:000000000000B669                 db 0C1h
.eh_frame:000000000000B66A                 db 0FFh
.eh_frame:000000000000B66B                 db 0FFh
.eh_frame:000000000000B66C                 db  57h ; W
.eh_frame:000000000000B66D                 db    0
.eh_frame:000000000000B66E                 db    0
.eh_frame:000000000000B66F                 db    0
.eh_frame:000000000000B670                 db    0
.eh_frame:000000000000B671                 db  63h ; c
.eh_frame:000000000000B672                 db  0Eh
.eh_frame:000000000000B673                 db  10h
.eh_frame:000000000000B674                 db  8Ch
.eh_frame:000000000000B675                 db    2
.eh_frame:000000000000B676                 db  41h ; A
.eh_frame:000000000000B677                 db  0Eh
.eh_frame:000000000000B678                 db  18h
.eh_frame:000000000000B679                 db  86h
.eh_frame:000000000000B67A                 db    3
.eh_frame:000000000000B67B                 db  44h ; D
.eh_frame:000000000000B67C                 db  0Eh
.eh_frame:000000000000B67D                 db  20h
.eh_frame:000000000000B67E                 db  83h
.eh_frame:000000000000B67F                 db    4
.eh_frame:000000000000B680                 db  6Bh ; k
.eh_frame:000000000000B681                 db  0Eh
.eh_frame:000000000000B682                 db  18h
.eh_frame:000000000000B683                 db  41h ; A
.eh_frame:000000000000B684                 db  0Eh
.eh_frame:000000000000B685                 db  10h
.eh_frame:000000000000B686                 db  42h ; B
.eh_frame:000000000000B687                 db  0Eh
.eh_frame:000000000000B688                 db    8
.eh_frame:000000000000B689                 db    0
.eh_frame:000000000000B68A                 db    0
.eh_frame:000000000000B68B                 db    0
.eh_frame:000000000000B68C                 db    0
.eh_frame:000000000000B68D                 db    0
.eh_frame:000000000000B68E                 db    0
.eh_frame:000000000000B68F                 db    0
.eh_frame:000000000000B690                 db  3Ch ; <
.eh_frame:000000000000B691                 db    0
.eh_frame:000000000000B692                 db    0
.eh_frame:000000000000B693                 db    0
.eh_frame:000000000000B694                 db  2Ch ; ,
.eh_frame:000000000000B695                 db  0Fh
.eh_frame:000000000000B696                 db    0
.eh_frame:000000000000B697                 db    0
.eh_frame:000000000000B698                 db    8
.eh_frame:000000000000B699                 db 0C2h
.eh_frame:000000000000B69A                 db 0FFh
.eh_frame:000000000000B69B                 db 0FFh
.eh_frame:000000000000B69C                 db  83h
.eh_frame:000000000000B69D                 db    0
.eh_frame:000000000000B69E                 db    0
.eh_frame:000000000000B69F                 db    0
.eh_frame:000000000000B6A0                 db    0
.eh_frame:000000000000B6A1                 db  42h ; B
.eh_frame:000000000000B6A2                 db  0Eh
.eh_frame:000000000000B6A3                 db  10h
.eh_frame:000000000000B6A4                 db  8Dh
.eh_frame:000000000000B6A5                 db    2
.eh_frame:000000000000B6A6                 db  42h ; B
.eh_frame:000000000000B6A7                 db  0Eh
.eh_frame:000000000000B6A8                 db  18h
.eh_frame:000000000000B6A9                 db  8Ch
.eh_frame:000000000000B6AA                 db    3
.eh_frame:000000000000B6AB                 db  44h ; D
.eh_frame:000000000000B6AC                 db  0Eh
.eh_frame:000000000000B6AD                 db  20h
.eh_frame:000000000000B6AE                 db  86h
.eh_frame:000000000000B6AF                 db    4
.eh_frame:000000000000B6B0                 db  41h ; A
.eh_frame:000000000000B6B1                 db  0Eh
.eh_frame:000000000000B6B2                 db  28h ; (
.eh_frame:000000000000B6B3                 db  83h
.eh_frame:000000000000B6B4                 db    5
.eh_frame:000000000000B6B5                 db  4Ah ; J
.eh_frame:000000000000B6B6                 db  0Eh
.eh_frame:000000000000B6B7                 db  40h ; @
.eh_frame:000000000000B6B8                 db    2
.eh_frame:000000000000B6B9                 db  64h ; d
.eh_frame:000000000000B6BA                 db  0Ah
.eh_frame:000000000000B6BB                 db  0Eh
.eh_frame:000000000000B6BC                 db  28h ; (
.eh_frame:000000000000B6BD                 db  41h ; A
.eh_frame:000000000000B6BE                 db  0Eh
.eh_frame:000000000000B6BF                 db  20h
.eh_frame:000000000000B6C0                 db  41h ; A
.eh_frame:000000000000B6C1                 db  0Eh
.eh_frame:000000000000B6C2                 db  18h
.eh_frame:000000000000B6C3                 db  42h ; B
.eh_frame:000000000000B6C4                 db  0Eh
.eh_frame:000000000000B6C5                 db  10h
.eh_frame:000000000000B6C6                 db  42h ; B
.eh_frame:000000000000B6C7                 db  0Eh
.eh_frame:000000000000B6C8                 db    8
.eh_frame:000000000000B6C9                 db  41h ; A
.eh_frame:000000000000B6CA                 db  0Bh
.eh_frame:000000000000B6CB                 db    0
.eh_frame:000000000000B6CC                 db    0
.eh_frame:000000000000B6CD                 db    0
.eh_frame:000000000000B6CE                 db    0
.eh_frame:000000000000B6CF                 db    0
.eh_frame:000000000000B6D0                 db  4Ch ; L
.eh_frame:000000000000B6D1                 db    0
.eh_frame:000000000000B6D2                 db    0
.eh_frame:000000000000B6D3                 db    0
.eh_frame:000000000000B6D4                 db  6Ch ; l
.eh_frame:000000000000B6D5                 db  0Fh
.eh_frame:000000000000B6D6                 db    0
.eh_frame:000000000000B6D7                 db    0
.eh_frame:000000000000B6D8                 db  58h ; X
.eh_frame:000000000000B6D9                 db 0C2h
.eh_frame:000000000000B6DA                 db 0FFh
.eh_frame:000000000000B6DB                 db 0FFh
.eh_frame:000000000000B6DC                 db  7Dh ; }
.eh_frame:000000000000B6DD                 db    0
.eh_frame:000000000000B6DE                 db    0
.eh_frame:000000000000B6DF                 db    0
.eh_frame:000000000000B6E0                 db    0
.eh_frame:000000000000B6E1                 db  42h ; B
.eh_frame:000000000000B6E2                 db  0Eh
.eh_frame:000000000000B6E3                 db  10h
.eh_frame:000000000000B6E4                 db  8Ch
.eh_frame:000000000000B6E5                 db    2
.eh_frame:000000000000B6E6                 db  41h ; A
.eh_frame:000000000000B6E7                 db  0Eh
.eh_frame:000000000000B6E8                 db  18h
.eh_frame:000000000000B6E9                 db  86h
.eh_frame:000000000000B6EA                 db    3
.eh_frame:000000000000B6EB                 db  44h ; D
.eh_frame:000000000000B6EC                 db  0Eh
.eh_frame:000000000000B6ED                 db  20h
.eh_frame:000000000000B6EE                 db  83h
.eh_frame:000000000000B6EF                 db    4
.eh_frame:000000000000B6F0                 db  69h ; i
.eh_frame:000000000000B6F1                 db  0Ah
.eh_frame:000000000000B6F2                 db  0Eh
.eh_frame:000000000000B6F3                 db  18h
.eh_frame:000000000000B6F4                 db  41h ; A
.eh_frame:000000000000B6F5                 db  0Eh
.eh_frame:000000000000B6F6                 db  10h
.eh_frame:000000000000B6F7                 db  42h ; B
.eh_frame:000000000000B6F8                 db  0Eh
.eh_frame:000000000000B6F9                 db    8
.eh_frame:000000000000B6FA                 db  45h ; E
.eh_frame:000000000000B6FB                 db  0Bh
.eh_frame:000000000000B6FC                 db  55h ; U
.eh_frame:000000000000B6FD                 db  0Ah
.eh_frame:000000000000B6FE                 db  0Eh
.eh_frame:000000000000B6FF                 db  18h
.eh_frame:000000000000B700                 db  41h ; A
.eh_frame:000000000000B701                 db  0Eh
.eh_frame:000000000000B702                 db  10h
.eh_frame:000000000000B703                 db  42h ; B
.eh_frame:000000000000B704                 db  0Eh
.eh_frame:000000000000B705                 db    8
.eh_frame:000000000000B706                 db  48h ; H
.eh_frame:000000000000B707                 db  0Bh
.eh_frame:000000000000B708                 db  41h ; A
.eh_frame:000000000000B709                 db  0Ah
.eh_frame:000000000000B70A                 db  0Eh
.eh_frame:000000000000B70B                 db  18h
.eh_frame:000000000000B70C                 db  46h ; F
.eh_frame:000000000000B70D                 db  0Eh
.eh_frame:000000000000B70E                 db  10h
.eh_frame:000000000000B70F                 db  42h ; B
.eh_frame:000000000000B710                 db  0Eh
.eh_frame:000000000000B711                 db    8
.eh_frame:000000000000B712                 db  47h ; G
.eh_frame:000000000000B713                 db  0Bh
.eh_frame:000000000000B714                 db  49h ; I
.eh_frame:000000000000B715                 db  0Eh
.eh_frame:000000000000B716                 db  18h
.eh_frame:000000000000B717                 db  41h ; A
.eh_frame:000000000000B718                 db  0Eh
.eh_frame:000000000000B719                 db  10h
.eh_frame:000000000000B71A                 db  42h ; B
.eh_frame:000000000000B71B                 db  0Eh
.eh_frame:000000000000B71C                 db    8
.eh_frame:000000000000B71D                 db    0
.eh_frame:000000000000B71E                 db    0
.eh_frame:000000000000B71F                 db    0
.eh_frame:000000000000B720                 db  2Ch ; ,
.eh_frame:000000000000B721                 db    0
.eh_frame:000000000000B722                 db    0
.eh_frame:000000000000B723                 db    0
.eh_frame:000000000000B724                 db 0BCh
.eh_frame:000000000000B725                 db  0Fh
.eh_frame:000000000000B726                 db    0
.eh_frame:000000000000B727                 db    0
.eh_frame:000000000000B728                 db  88h
.eh_frame:000000000000B729                 db 0C2h
.eh_frame:000000000000B72A                 db 0FFh
.eh_frame:000000000000B72B                 db 0FFh
.eh_frame:000000000000B72C                 db  93h
.eh_frame:000000000000B72D                 db    0
.eh_frame:000000000000B72E                 db    0
.eh_frame:000000000000B72F                 db    0
.eh_frame:000000000000B730                 db    0
.eh_frame:000000000000B731                 db  42h ; B
.eh_frame:000000000000B732                 db  0Eh
.eh_frame:000000000000B733                 db  10h
.eh_frame:000000000000B734                 db  8Ch
.eh_frame:000000000000B735                 db    2
.eh_frame:000000000000B736                 db  41h ; A
.eh_frame:000000000000B737                 db  0Eh
.eh_frame:000000000000B738                 db  18h
.eh_frame:000000000000B739                 db  86h
.eh_frame:000000000000B73A                 db    3
.eh_frame:000000000000B73B                 db  44h ; D
.eh_frame:000000000000B73C                 db  0Eh
.eh_frame:000000000000B73D                 db  20h
.eh_frame:000000000000B73E                 db  83h
.eh_frame:000000000000B73F                 db    4
.eh_frame:000000000000B740                 db  5Eh ; ^
.eh_frame:000000000000B741                 db  0Ah
.eh_frame:000000000000B742                 db  0Eh
.eh_frame:000000000000B743                 db  18h
.eh_frame:000000000000B744                 db  41h ; A
.eh_frame:000000000000B745                 db  0Eh
.eh_frame:000000000000B746                 db  10h
.eh_frame:000000000000B747                 db  42h ; B
.eh_frame:000000000000B748                 db  0Eh
.eh_frame:000000000000B749                 db    8
.eh_frame:000000000000B74A                 db  48h ; H
.eh_frame:000000000000B74B                 db  0Bh
.eh_frame:000000000000B74C                 db    0
.eh_frame:000000000000B74D                 db    0
.eh_frame:000000000000B74E                 db    0
.eh_frame:000000000000B74F                 db    0
.eh_frame:000000000000B750                 db  1Ch
.eh_frame:000000000000B751                 db    0
.eh_frame:000000000000B752                 db    0
.eh_frame:000000000000B753                 db    0
.eh_frame:000000000000B754                 db 0ECh
.eh_frame:000000000000B755                 db  0Fh
.eh_frame:000000000000B756                 db    0
.eh_frame:000000000000B757                 db    0
.eh_frame:000000000000B758                 db 0F8h
.eh_frame:000000000000B759                 db 0C2h
.eh_frame:000000000000B75A                 db 0FFh
.eh_frame:000000000000B75B                 db 0FFh
.eh_frame:000000000000B75C                 db  60h ; `
.eh_frame:000000000000B75D                 db    0
.eh_frame:000000000000B75E                 db    0
.eh_frame:000000000000B75F                 db    0
.eh_frame:000000000000B760                 db    0
.eh_frame:000000000000B761                 db  44h ; D
.eh_frame:000000000000B762                 db  0Eh
.eh_frame:000000000000B763                 db  10h
.eh_frame:000000000000B764                 db  75h ; u
.eh_frame:000000000000B765                 db  0Ah
.eh_frame:000000000000B766                 db  0Eh
.eh_frame:000000000000B767                 db    8
.eh_frame:000000000000B768                 db  47h ; G
.eh_frame:000000000000B769                 db  0Bh
.eh_frame:000000000000B76A                 db  5Fh ; _
.eh_frame:000000000000B76B                 db  0Eh
.eh_frame:000000000000B76C                 db    8
.eh_frame:000000000000B76D                 db    0
.eh_frame:000000000000B76E                 db    0
.eh_frame:000000000000B76F                 db    0
.eh_frame:000000000000B770                 db  10h
.eh_frame:000000000000B771                 db    0
.eh_frame:000000000000B772                 db    0
.eh_frame:000000000000B773                 db    0
.eh_frame:000000000000B774                 db  0Ch
.eh_frame:000000000000B775                 db  10h
.eh_frame:000000000000B776                 db    0
.eh_frame:000000000000B777                 db    0
.eh_frame:000000000000B778                 db  38h ; 8
.eh_frame:000000000000B779                 db 0C3h
.eh_frame:000000000000B77A                 db 0FFh
.eh_frame:000000000000B77B                 db 0FFh
.eh_frame:000000000000B77C                 db  93h
.eh_frame:000000000000B77D                 db    0
.eh_frame:000000000000B77E                 db    0
.eh_frame:000000000000B77F                 db    0
.eh_frame:000000000000B780                 db    0
.eh_frame:000000000000B781                 db    0
.eh_frame:000000000000B782                 db    0
.eh_frame:000000000000B783                 db    0
.eh_frame:000000000000B784                 db  10h
.eh_frame:000000000000B785                 db    0
.eh_frame:000000000000B786                 db    0
.eh_frame:000000000000B787                 db    0
.eh_frame:000000000000B788                 db  20h
.eh_frame:000000000000B789                 db  10h
.eh_frame:000000000000B78A                 db    0
.eh_frame:000000000000B78B                 db    0
.eh_frame:000000000000B78C                 db 0C4h
.eh_frame:000000000000B78D                 db 0C3h
.eh_frame:000000000000B78E                 db 0FFh
.eh_frame:000000000000B78F                 db 0FFh
.eh_frame:000000000000B790                 db  10h
.eh_frame:000000000000B791                 db    0
.eh_frame:000000000000B792                 db    0
.eh_frame:000000000000B793                 db    0
.eh_frame:000000000000B794                 db    0
.eh_frame:000000000000B795                 db    0
.eh_frame:000000000000B796                 db    0
.eh_frame:000000000000B797                 db    0
.eh_frame:000000000000B798                 db  10h
.eh_frame:000000000000B799                 db    0
.eh_frame:000000000000B79A                 db    0
.eh_frame:000000000000B79B                 db    0
.eh_frame:000000000000B79C                 db  34h ; 4
.eh_frame:000000000000B79D                 db  10h
.eh_frame:000000000000B79E                 db    0
.eh_frame:000000000000B79F                 db    0
.eh_frame:000000000000B7A0                 db 0C0h
.eh_frame:000000000000B7A1                 db 0C3h
.eh_frame:000000000000B7A2                 db 0FFh
.eh_frame:000000000000B7A3                 db 0FFh
.eh_frame:000000000000B7A4                 db    7
.eh_frame:000000000000B7A5                 db    0
.eh_frame:000000000000B7A6                 db    0
.eh_frame:000000000000B7A7                 db    0
.eh_frame:000000000000B7A8                 db    0
.eh_frame:000000000000B7A9                 db    0
.eh_frame:000000000000B7AA                 db    0
.eh_frame:000000000000B7AB                 db    0
.eh_frame:000000000000B7AC                 db  18h
.eh_frame:000000000000B7AD                 db    0
.eh_frame:000000000000B7AE                 db    0
.eh_frame:000000000000B7AF                 db    0
.eh_frame:000000000000B7B0                 db  48h ; H
.eh_frame:000000000000B7B1                 db  10h
.eh_frame:000000000000B7B2                 db    0
.eh_frame:000000000000B7B3                 db    0
.eh_frame:000000000000B7B4                 db 0BCh
.eh_frame:000000000000B7B5                 db 0C3h
.eh_frame:000000000000B7B6                 db 0FFh
.eh_frame:000000000000B7B7                 db 0FFh
.eh_frame:000000000000B7B8                 db  22h ; "
.eh_frame:000000000000B7B9                 db    0
.eh_frame:000000000000B7BA                 db    0
.eh_frame:000000000000B7BB                 db    0
.eh_frame:000000000000B7BC                 db    0
.eh_frame:000000000000B7BD                 db  41h ; A
.eh_frame:000000000000B7BE                 db  0Eh
.eh_frame:000000000000B7BF                 db  10h
.eh_frame:000000000000B7C0                 db  83h
.eh_frame:000000000000B7C1                 db    2
.eh_frame:000000000000B7C2                 db  5Bh ; [
.eh_frame:000000000000B7C3                 db  0Ah
.eh_frame:000000000000B7C4                 db  0Eh
.eh_frame:000000000000B7C5                 db    8
.eh_frame:000000000000B7C6                 db  41h ; A
.eh_frame:000000000000B7C7                 db  0Bh
.eh_frame:000000000000B7C8                 db  5Ch ; \
.eh_frame:000000000000B7C9                 db    0
.eh_frame:000000000000B7CA                 db    0
.eh_frame:000000000000B7CB                 db    0
.eh_frame:000000000000B7CC                 db  64h ; d
.eh_frame:000000000000B7CD                 db  10h
.eh_frame:000000000000B7CE                 db    0
.eh_frame:000000000000B7CF                 db    0
.eh_frame:000000000000B7D0                 db 0D0h
.eh_frame:000000000000B7D1                 db 0C3h
.eh_frame:000000000000B7D2                 db 0FFh
.eh_frame:000000000000B7D3                 db 0FFh
.eh_frame:000000000000B7D4                 db  1Eh
.eh_frame:000000000000B7D5                 db    1
.eh_frame:000000000000B7D6                 db    0
.eh_frame:000000000000B7D7                 db    0
.eh_frame:000000000000B7D8                 db    0
.eh_frame:000000000000B7D9                 db  42h ; B
.eh_frame:000000000000B7DA                 db  0Eh
.eh_frame:000000000000B7DB                 db  10h
.eh_frame:000000000000B7DC                 db  8Eh
.eh_frame:000000000000B7DD                 db    2
.eh_frame:000000000000B7DE                 db  42h ; B
.eh_frame:000000000000B7DF                 db  0Eh
.eh_frame:000000000000B7E0                 db  18h
.eh_frame:000000000000B7E1                 db  8Dh
.eh_frame:000000000000B7E2                 db    3
.eh_frame:000000000000B7E3                 db  45h ; E
.eh_frame:000000000000B7E4                 db  0Eh
.eh_frame:000000000000B7E5                 db  20h
.eh_frame:000000000000B7E6                 db  8Ch
.eh_frame:000000000000B7E7                 db    4
.eh_frame:000000000000B7E8                 db  41h ; A
.eh_frame:000000000000B7E9                 db  0Eh
.eh_frame:000000000000B7EA                 db  28h ; (
.eh_frame:000000000000B7EB                 db  86h
.eh_frame:000000000000B7EC                 db    5
.eh_frame:000000000000B7ED                 db  44h ; D
.eh_frame:000000000000B7EE                 db  0Eh
.eh_frame:000000000000B7EF                 db  30h ; 0
.eh_frame:000000000000B7F0                 db  83h
.eh_frame:000000000000B7F1                 db    6
.eh_frame:000000000000B7F2                 db    2
.eh_frame:000000000000B7F3                 db 0A1h
.eh_frame:000000000000B7F4                 db  0Ah
.eh_frame:000000000000B7F5                 db  0Eh
.eh_frame:000000000000B7F6                 db  28h ; (
.eh_frame:000000000000B7F7                 db  44h ; D
.eh_frame:000000000000B7F8                 db  0Eh
.eh_frame:000000000000B7F9                 db  20h
.eh_frame:000000000000B7FA                 db  42h ; B
.eh_frame:000000000000B7FB                 db  0Eh
.eh_frame:000000000000B7FC                 db  18h
.eh_frame:000000000000B7FD                 db  42h ; B
.eh_frame:000000000000B7FE                 db  0Eh
.eh_frame:000000000000B7FF                 db  10h
.eh_frame:000000000000B800                 db  42h ; B
.eh_frame:000000000000B801                 db  0Eh
.eh_frame:000000000000B802                 db    8
.eh_frame:000000000000B803                 db  47h ; G
.eh_frame:000000000000B804                 db  0Bh
.eh_frame:000000000000B805                 db  71h ; q
.eh_frame:000000000000B806                 db  0Ah
.eh_frame:000000000000B807                 db  0Eh
.eh_frame:000000000000B808                 db  28h ; (
.eh_frame:000000000000B809                 db  41h ; A
.eh_frame:000000000000B80A                 db  0Eh
.eh_frame:000000000000B80B                 db  20h
.eh_frame:000000000000B80C                 db  42h ; B
.eh_frame:000000000000B80D                 db  0Eh
.eh_frame:000000000000B80E                 db  18h
.eh_frame:000000000000B80F                 db  42h ; B
.eh_frame:000000000000B810                 db  0Eh
.eh_frame:000000000000B811                 db  10h
.eh_frame:000000000000B812                 db  42h ; B
.eh_frame:000000000000B813                 db  0Eh
.eh_frame:000000000000B814                 db    8
.eh_frame:000000000000B815                 db  48h ; H
.eh_frame:000000000000B816                 db  0Bh
.eh_frame:000000000000B817                 db  53h ; S
.eh_frame:000000000000B818                 db  0Eh
.eh_frame:000000000000B819                 db  28h ; (
.eh_frame:000000000000B81A                 db  44h ; D
.eh_frame:000000000000B81B                 db  0Eh
.eh_frame:000000000000B81C                 db  20h
.eh_frame:000000000000B81D                 db  42h ; B
.eh_frame:000000000000B81E                 db  0Eh
.eh_frame:000000000000B81F                 db  18h
.eh_frame:000000000000B820                 db  42h ; B
.eh_frame:000000000000B821                 db  0Eh
.eh_frame:000000000000B822                 db  10h
.eh_frame:000000000000B823                 db  42h ; B
.eh_frame:000000000000B824                 db  0Eh
.eh_frame:000000000000B825                 db    8
.eh_frame:000000000000B826                 db    0
.eh_frame:000000000000B827                 db    0
.eh_frame:000000000000B828                 db  10h
.eh_frame:000000000000B829                 db    0
.eh_frame:000000000000B82A                 db    0
.eh_frame:000000000000B82B                 db    0
.eh_frame:000000000000B82C                 db 0C4h
.eh_frame:000000000000B82D                 db  10h
.eh_frame:000000000000B82E                 db    0
.eh_frame:000000000000B82F                 db    0
.eh_frame:000000000000B830                 db  90h
.eh_frame:000000000000B831                 db 0C4h
.eh_frame:000000000000B832                 db 0FFh
.eh_frame:000000000000B833                 db 0FFh
.eh_frame:000000000000B834                 db  77h ; w
.eh_frame:000000000000B835                 db    0
.eh_frame:000000000000B836                 db    0
.eh_frame:000000000000B837                 db    0
.eh_frame:000000000000B838                 db    0
.eh_frame:000000000000B839                 db    0
.eh_frame:000000000000B83A                 db    0
.eh_frame:000000000000B83B                 db    0
.eh_frame:000000000000B83C                 db  5Ch ; \
.eh_frame:000000000000B83D                 db    0
.eh_frame:000000000000B83E                 db    0
.eh_frame:000000000000B83F                 db    0
.eh_frame:000000000000B840                 db 0D8h
.eh_frame:000000000000B841                 db  10h
.eh_frame:000000000000B842                 db    0
.eh_frame:000000000000B843                 db    0
.eh_frame:000000000000B844                 db 0FCh
.eh_frame:000000000000B845                 db 0C4h
.eh_frame:000000000000B846                 db 0FFh
.eh_frame:000000000000B847                 db 0FFh
.eh_frame:000000000000B848                 db  40h ; @
.eh_frame:000000000000B849                 db    1
.eh_frame:000000000000B84A                 db    0
.eh_frame:000000000000B84B                 db    0
.eh_frame:000000000000B84C                 db    0
.eh_frame:000000000000B84D                 db  42h ; B
.eh_frame:000000000000B84E                 db  0Eh
.eh_frame:000000000000B84F                 db  10h
.eh_frame:000000000000B850                 db  8Fh
.eh_frame:000000000000B851                 db    2
.eh_frame:000000000000B852                 db  42h ; B
.eh_frame:000000000000B853                 db  0Eh
.eh_frame:000000000000B854                 db  18h
.eh_frame:000000000000B855                 db  8Eh
.eh_frame:000000000000B856                 db    3
.eh_frame:000000000000B857                 db  42h ; B
.eh_frame:000000000000B858                 db  0Eh
.eh_frame:000000000000B859                 db  20h
.eh_frame:000000000000B85A                 db  8Dh
.eh_frame:000000000000B85B                 db    4
.eh_frame:000000000000B85C                 db  42h ; B
.eh_frame:000000000000B85D                 db  0Eh
.eh_frame:000000000000B85E                 db  28h ; (
.eh_frame:000000000000B85F                 db  8Ch
.eh_frame:000000000000B860                 db    5
.eh_frame:000000000000B861                 db  41h ; A
.eh_frame:000000000000B862                 db  0Eh
.eh_frame:000000000000B863                 db  30h ; 0
.eh_frame:000000000000B864                 db  86h
.eh_frame:000000000000B865                 db    6
.eh_frame:000000000000B866                 db  41h ; A
.eh_frame:000000000000B867                 db  0Eh
.eh_frame:000000000000B868                 db  38h ; 8
.eh_frame:000000000000B869                 db  83h
.eh_frame:000000000000B86A                 db    7
.eh_frame:000000000000B86B                 db  44h ; D
.eh_frame:000000000000B86C                 db  0Eh
.eh_frame:000000000000B86D                 db  40h ; @
.eh_frame:000000000000B86E                 db    2
.eh_frame:000000000000B86F                 db 0EEh
.eh_frame:000000000000B870                 db  0Ah
.eh_frame:000000000000B871                 db  0Eh
.eh_frame:000000000000B872                 db  38h ; 8
.eh_frame:000000000000B873                 db  46h ; F
.eh_frame:000000000000B874                 db  0Eh
.eh_frame:000000000000B875                 db  30h ; 0
.eh_frame:000000000000B876                 db  41h ; A
.eh_frame:000000000000B877                 db  0Eh
.eh_frame:000000000000B878                 db  28h ; (
.eh_frame:000000000000B879                 db  42h ; B
.eh_frame:000000000000B87A                 db  0Eh
.eh_frame:000000000000B87B                 db  20h
.eh_frame:000000000000B87C                 db  42h ; B
.eh_frame:000000000000B87D                 db  0Eh
.eh_frame:000000000000B87E                 db  18h
.eh_frame:000000000000B87F                 db  42h ; B
.eh_frame:000000000000B880                 db  0Eh
.eh_frame:000000000000B881                 db  10h
.eh_frame:000000000000B882                 db  42h ; B
.eh_frame:000000000000B883                 db  0Eh
.eh_frame:000000000000B884                 db    8
.eh_frame:000000000000B885                 db  45h ; E
.eh_frame:000000000000B886                 db  0Bh
.eh_frame:000000000000B887                 db  63h ; c
.eh_frame:000000000000B888                 db  0Eh
.eh_frame:000000000000B889                 db  38h ; 8
.eh_frame:000000000000B88A                 db  43h ; C
.eh_frame:000000000000B88B                 db  0Eh
.eh_frame:000000000000B88C                 db  30h ; 0
.eh_frame:000000000000B88D                 db  41h ; A
.eh_frame:000000000000B88E                 db  0Eh
.eh_frame:000000000000B88F                 db  28h ; (
.eh_frame:000000000000B890                 db  42h ; B
.eh_frame:000000000000B891                 db  0Eh
.eh_frame:000000000000B892                 db  20h
.eh_frame:000000000000B893                 db  42h ; B
.eh_frame:000000000000B894                 db  0Eh
.eh_frame:000000000000B895                 db  18h
.eh_frame:000000000000B896                 db  42h ; B
.eh_frame:000000000000B897                 db  0Eh
.eh_frame:000000000000B898                 db  10h
.eh_frame:000000000000B899                 db  42h ; B
.eh_frame:000000000000B89A                 db  0Eh
.eh_frame:000000000000B89B                 db    8
.eh_frame:000000000000B89C                 db  10h
.eh_frame:000000000000B89D                 db    0
.eh_frame:000000000000B89E                 db    0
.eh_frame:000000000000B89F                 db    0
.eh_frame:000000000000B8A0                 db  38h ; 8
.eh_frame:000000000000B8A1                 db  11h
.eh_frame:000000000000B8A2                 db    0
.eh_frame:000000000000B8A3                 db    0
.eh_frame:000000000000B8A4                 db 0DCh
.eh_frame:000000000000B8A5                 db 0C5h
.eh_frame:000000000000B8A6                 db 0FFh
.eh_frame:000000000000B8A7                 db 0FFh
.eh_frame:000000000000B8A8                 db    5
.eh_frame:000000000000B8A9                 db    0
.eh_frame:000000000000B8AA                 db    0
.eh_frame:000000000000B8AB                 db    0
.eh_frame:000000000000B8AC                 db    0
.eh_frame:000000000000B8AD                 db    0
.eh_frame:000000000000B8AE                 db    0
.eh_frame:000000000000B8AF                 db    0
.eh_frame:000000000000B8B0                 db  10h
.eh_frame:000000000000B8B1                 db    0
.eh_frame:000000000000B8B2                 db    0
.eh_frame:000000000000B8B3                 db    0
.eh_frame:000000000000B8B4                 db  4Ch ; L
.eh_frame:000000000000B8B5                 db  11h
.eh_frame:000000000000B8B6                 db    0
.eh_frame:000000000000B8B7                 db    0
.eh_frame:000000000000B8B8                 db 0D8h
.eh_frame:000000000000B8B9                 db 0C5h
.eh_frame:000000000000B8BA                 db 0FFh
.eh_frame:000000000000B8BB                 db 0FFh
.eh_frame:000000000000B8BC                 db    5
.eh_frame:000000000000B8BD                 db    0
.eh_frame:000000000000B8BE                 db    0
.eh_frame:000000000000B8BF                 db    0
.eh_frame:000000000000B8C0                 db    0
.eh_frame:000000000000B8C1                 db    0
.eh_frame:000000000000B8C2                 db    0
.eh_frame:000000000000B8C3                 db    0
.eh_frame:000000000000B8C4                 db  10h
.eh_frame:000000000000B8C5                 db    0
.eh_frame:000000000000B8C6                 db    0
.eh_frame:000000000000B8C7                 db    0
.eh_frame:000000000000B8C8                 db  60h ; `
.eh_frame:000000000000B8C9                 db  11h
.eh_frame:000000000000B8CA                 db    0
.eh_frame:000000000000B8CB                 db    0
.eh_frame:000000000000B8CC                 db 0D4h
.eh_frame:000000000000B8CD                 db 0C5h
.eh_frame:000000000000B8CE                 db 0FFh
.eh_frame:000000000000B8CF                 db 0FFh
.eh_frame:000000000000B8D0                 db    5
.eh_frame:000000000000B8D1                 db    0
.eh_frame:000000000000B8D2                 db    0
.eh_frame:000000000000B8D3                 db    0
.eh_frame:000000000000B8D4                 db    0
.eh_frame:000000000000B8D5                 db    0
.eh_frame:000000000000B8D6                 db    0
.eh_frame:000000000000B8D7                 db    0
.eh_frame:000000000000B8D8                 db  10h
.eh_frame:000000000000B8D9                 db    0
.eh_frame:000000000000B8DA                 db    0
.eh_frame:000000000000B8DB                 db    0
.eh_frame:000000000000B8DC                 db  74h ; t
.eh_frame:000000000000B8DD                 db  11h
.eh_frame:000000000000B8DE                 db    0
.eh_frame:000000000000B8DF                 db    0
.eh_frame:000000000000B8E0                 db 0D0h
.eh_frame:000000000000B8E1                 db 0C5h
.eh_frame:000000000000B8E2                 db 0FFh
.eh_frame:000000000000B8E3                 db 0FFh
.eh_frame:000000000000B8E4                 db  49h ; I
.eh_frame:000000000000B8E5                 db    0
.eh_frame:000000000000B8E6                 db    0
.eh_frame:000000000000B8E7                 db    0
.eh_frame:000000000000B8E8                 db    0
.eh_frame:000000000000B8E9                 db    0
.eh_frame:000000000000B8EA                 db    0
.eh_frame:000000000000B8EB                 db    0
.eh_frame:000000000000B8EC                 db  10h
.eh_frame:000000000000B8ED                 db    0
.eh_frame:000000000000B8EE                 db    0
.eh_frame:000000000000B8EF                 db    0
.eh_frame:000000000000B8F0                 db  88h
.eh_frame:000000000000B8F1                 db  11h
.eh_frame:000000000000B8F2                 db    0
.eh_frame:000000000000B8F3                 db    0
.eh_frame:000000000000B8F4                 db  0Ch
.eh_frame:000000000000B8F5                 db 0C6h
.eh_frame:000000000000B8F6                 db 0FFh
.eh_frame:000000000000B8F7                 db 0FFh
.eh_frame:000000000000B8F8                 db  58h ; X
.eh_frame:000000000000B8F9                 db    0
.eh_frame:000000000000B8FA                 db    0
.eh_frame:000000000000B8FB                 db    0
.eh_frame:000000000000B8FC                 db    0
.eh_frame:000000000000B8FD                 db    0
.eh_frame:000000000000B8FE                 db    0
.eh_frame:000000000000B8FF                 db    0
.eh_frame:000000000000B900                 db  38h ; 8
.eh_frame:000000000000B901                 db    0
.eh_frame:000000000000B902                 db    0
.eh_frame:000000000000B903                 db    0
.eh_frame:000000000000B904                 db  9Ch
.eh_frame:000000000000B905                 db  11h
.eh_frame:000000000000B906                 db    0
.eh_frame:000000000000B907                 db    0
.eh_frame:000000000000B908                 db  58h ; X
.eh_frame:000000000000B909                 db 0C6h
.eh_frame:000000000000B90A                 db 0FFh
.eh_frame:000000000000B90B                 db 0FFh
.eh_frame:000000000000B90C                 db  47h ; G
.eh_frame:000000000000B90D                 db    1
.eh_frame:000000000000B90E                 db    0
.eh_frame:000000000000B90F                 db    0
.eh_frame:000000000000B910                 db    0
.eh_frame:000000000000B911                 db  42h ; B
.eh_frame:000000000000B912                 db  0Eh
.eh_frame:000000000000B913                 db  10h
.eh_frame:000000000000B914                 db  8Dh
.eh_frame:000000000000B915                 db    2
.eh_frame:000000000000B916                 db  42h ; B
.eh_frame:000000000000B917                 db  0Eh
.eh_frame:000000000000B918                 db  18h
.eh_frame:000000000000B919                 db  8Ch
.eh_frame:000000000000B91A                 db    3
.eh_frame:000000000000B91B                 db  44h ; D
.eh_frame:000000000000B91C                 db  0Eh
.eh_frame:000000000000B91D                 db  20h
.eh_frame:000000000000B91E                 db  86h
.eh_frame:000000000000B91F                 db    4
.eh_frame:000000000000B920                 db  41h ; A
.eh_frame:000000000000B921                 db  0Eh
.eh_frame:000000000000B922                 db  28h ; (
.eh_frame:000000000000B923                 db  83h
.eh_frame:000000000000B924                 db    5
.eh_frame:000000000000B925                 db  46h ; F
.eh_frame:000000000000B926                 db  0Eh
.eh_frame:000000000000B927                 db  30h ; 0
.eh_frame:000000000000B928                 db    2
.eh_frame:000000000000B929                 db 0CDh
.eh_frame:000000000000B92A                 db  0Ah
.eh_frame:000000000000B92B                 db  0Eh
.eh_frame:000000000000B92C                 db  28h ; (
.eh_frame:000000000000B92D                 db  47h ; G
.eh_frame:000000000000B92E                 db  0Eh
.eh_frame:000000000000B92F                 db  20h
.eh_frame:000000000000B930                 db  41h ; A
.eh_frame:000000000000B931                 db  0Eh
.eh_frame:000000000000B932                 db  18h
.eh_frame:000000000000B933                 db  42h ; B
.eh_frame:000000000000B934                 db  0Eh
.eh_frame:000000000000B935                 db  10h
.eh_frame:000000000000B936                 db  42h ; B
.eh_frame:000000000000B937                 db  0Eh
.eh_frame:000000000000B938                 db    8
.eh_frame:000000000000B939                 db  58h ; X
.eh_frame:000000000000B93A                 db  0Bh
.eh_frame:000000000000B93B                 db    0
.eh_frame:000000000000B93C                 db  34h ; 4
.eh_frame:000000000000B93D                 db    0
.eh_frame:000000000000B93E                 db    0
.eh_frame:000000000000B93F                 db    0
.eh_frame:000000000000B940                 db 0D8h
.eh_frame:000000000000B941                 db  11h
.eh_frame:000000000000B942                 db    0
.eh_frame:000000000000B943                 db    0
.eh_frame:000000000000B944                 db  6Ch ; l
.eh_frame:000000000000B945                 db 0C7h
.eh_frame:000000000000B946                 db 0FFh
.eh_frame:000000000000B947                 db 0FFh
.eh_frame:000000000000B948                 db  5Bh ; [
.eh_frame:000000000000B949                 db    0
.eh_frame:000000000000B94A                 db    0
.eh_frame:000000000000B94B                 db    0
.eh_frame:000000000000B94C                 db    0
.eh_frame:000000000000B94D                 db  42h ; B
.eh_frame:000000000000B94E                 db  0Eh
.eh_frame:000000000000B94F                 db  10h
.eh_frame:000000000000B950                 db  8Ch
.eh_frame:000000000000B951                 db    2
.eh_frame:000000000000B952                 db  41h ; A
.eh_frame:000000000000B953                 db  0Eh
.eh_frame:000000000000B954                 db  18h
.eh_frame:000000000000B955                 db  86h
.eh_frame:000000000000B956                 db    3
.eh_frame:000000000000B957                 db  44h ; D
.eh_frame:000000000000B958                 db  0Eh
.eh_frame:000000000000B959                 db  20h
.eh_frame:000000000000B95A                 db  83h
.eh_frame:000000000000B95B                 db    4
.eh_frame:000000000000B95C                 db  79h ; y
.eh_frame:000000000000B95D                 db  0Ah
.eh_frame:000000000000B95E                 db  0Eh
.eh_frame:000000000000B95F                 db  18h
.eh_frame:000000000000B960                 db  44h ; D
.eh_frame:000000000000B961                 db  0Eh
.eh_frame:000000000000B962                 db  10h
.eh_frame:000000000000B963                 db  42h ; B
.eh_frame:000000000000B964                 db  0Eh
.eh_frame:000000000000B965                 db    8
.eh_frame:000000000000B966                 db  4Ah ; J
.eh_frame:000000000000B967                 db  0Bh
.eh_frame:000000000000B968                 db  44h ; D
.eh_frame:000000000000B969                 db  0Eh
.eh_frame:000000000000B96A                 db  18h
.eh_frame:000000000000B96B                 db  41h ; A
.eh_frame:000000000000B96C                 db  0Eh
.eh_frame:000000000000B96D                 db  10h
.eh_frame:000000000000B96E                 db  45h ; E
.eh_frame:000000000000B96F                 db  0Eh
.eh_frame:000000000000B970                 db    8
.eh_frame:000000000000B971                 db    0
.eh_frame:000000000000B972                 db    0
.eh_frame:000000000000B973                 db    0
.eh_frame:000000000000B974                 db  10h
.eh_frame:000000000000B975                 db    0
.eh_frame:000000000000B976                 db    0
.eh_frame:000000000000B977                 db    0
.eh_frame:000000000000B978                 db  10h
.eh_frame:000000000000B979                 db  12h
.eh_frame:000000000000B97A                 db    0
.eh_frame:000000000000B97B                 db    0
.eh_frame:000000000000B97C                 db  94h
.eh_frame:000000000000B97D                 db 0C7h
.eh_frame:000000000000B97E                 db 0FFh
.eh_frame:000000000000B97F                 db 0FFh
.eh_frame:000000000000B980                 db  41h ; A
.eh_frame:000000000000B981                 db    0
.eh_frame:000000000000B982                 db    0
.eh_frame:000000000000B983                 db    0
.eh_frame:000000000000B984                 db    0
.eh_frame:000000000000B985                 db  7Ch ; |
.eh_frame:000000000000B986                 db  0Eh
.eh_frame:000000000000B987                 db  10h
.eh_frame:000000000000B988                 db  30h ; 0
.eh_frame:000000000000B989                 db    0
.eh_frame:000000000000B98A                 db    0
.eh_frame:000000000000B98B                 db    0
.eh_frame:000000000000B98C                 db  24h ; $
.eh_frame:000000000000B98D                 db  12h
.eh_frame:000000000000B98E                 db    0
.eh_frame:000000000000B98F                 db    0
.eh_frame:000000000000B990                 db 0D0h
.eh_frame:000000000000B991                 db 0C7h
.eh_frame:000000000000B992                 db 0FFh
.eh_frame:000000000000B993                 db 0FFh
.eh_frame:000000000000B994                 db  72h ; r
.eh_frame:000000000000B995                 db    0
.eh_frame:000000000000B996                 db    0
.eh_frame:000000000000B997                 db    0
.eh_frame:000000000000B998                 db    0
.eh_frame:000000000000B999                 db  41h ; A
.eh_frame:000000000000B99A                 db  0Eh
.eh_frame:000000000000B99B                 db  10h
.eh_frame:000000000000B99C                 db  86h
.eh_frame:000000000000B99D                 db    2
.eh_frame:000000000000B99E                 db  41h ; A
.eh_frame:000000000000B99F                 db  0Eh
.eh_frame:000000000000B9A0                 db  18h
.eh_frame:000000000000B9A1                 db  83h
.eh_frame:000000000000B9A2                 db    3
.eh_frame:000000000000B9A3                 db  4Ah ; J
.eh_frame:000000000000B9A4                 db  0Eh
.eh_frame:000000000000B9A5                 db  20h
.eh_frame:000000000000B9A6                 db    2
.eh_frame:000000000000B9A7                 db  53h ; S
.eh_frame:000000000000B9A8                 db  0Ah
.eh_frame:000000000000B9A9                 db  0Eh
.eh_frame:000000000000B9AA                 db  18h
.eh_frame:000000000000B9AB                 db  41h ; A
.eh_frame:000000000000B9AC                 db  0Eh
.eh_frame:000000000000B9AD                 db  10h
.eh_frame:000000000000B9AE                 db  41h ; A
.eh_frame:000000000000B9AF                 db  0Eh
.eh_frame:000000000000B9B0                 db    8
.eh_frame:000000000000B9B1                 db  47h ; G
.eh_frame:000000000000B9B2                 db  0Bh
.eh_frame:000000000000B9B3                 db  47h ; G
.eh_frame:000000000000B9B4                 db  0Eh
.eh_frame:000000000000B9B5                 db  18h
.eh_frame:000000000000B9B6                 db  41h ; A
.eh_frame:000000000000B9B7                 db  0Eh
.eh_frame:000000000000B9B8                 db  10h
.eh_frame:000000000000B9B9                 db  41h ; A
.eh_frame:000000000000B9BA                 db  0Eh
.eh_frame:000000000000B9BB                 db    8
.eh_frame:000000000000B9BC                 db  10h
.eh_frame:000000000000B9BD                 db    0
.eh_frame:000000000000B9BE                 db    0
.eh_frame:000000000000B9BF                 db    0
.eh_frame:000000000000B9C0                 db  58h ; X
.eh_frame:000000000000B9C1                 db  12h
.eh_frame:000000000000B9C2                 db    0
.eh_frame:000000000000B9C3                 db    0
.eh_frame:000000000000B9C4                 db  1Ch
.eh_frame:000000000000B9C5                 db 0C8h
.eh_frame:000000000000B9C6                 db 0FFh
.eh_frame:000000000000B9C7                 db 0FFh
.eh_frame:000000000000B9C8                 db  65h ; e
.eh_frame:000000000000B9C9                 db    0
.eh_frame:000000000000B9CA                 db    0
.eh_frame:000000000000B9CB                 db    0
.eh_frame:000000000000B9CC                 db    0
.eh_frame:000000000000B9CD                 db    0
.eh_frame:000000000000B9CE                 db    0
.eh_frame:000000000000B9CF                 db    0
.eh_frame:000000000000B9D0                 db  48h ; H
.eh_frame:000000000000B9D1                 db    0
.eh_frame:000000000000B9D2                 db    0
.eh_frame:000000000000B9D3                 db    0
.eh_frame:000000000000B9D4                 db  6Ch ; l
.eh_frame:000000000000B9D5                 db  12h
.eh_frame:000000000000B9D6                 db    0
.eh_frame:000000000000B9D7                 db    0
.eh_frame:000000000000B9D8                 db  78h ; x
.eh_frame:000000000000B9D9                 db 0C8h
.eh_frame:000000000000B9DA                 db 0FFh
.eh_frame:000000000000B9DB                 db 0FFh
.eh_frame:000000000000B9DC                 db  6Ah ; j
.eh_frame:000000000000B9DD                 db    0
.eh_frame:000000000000B9DE                 db    0
.eh_frame:000000000000B9DF                 db    0
.eh_frame:000000000000B9E0                 db    0
.eh_frame:000000000000B9E1                 db  42h ; B
.eh_frame:000000000000B9E2                 db  0Eh
.eh_frame:000000000000B9E3                 db  10h
.eh_frame:000000000000B9E4                 db  8Fh
.eh_frame:000000000000B9E5                 db    2
.eh_frame:000000000000B9E6                 db  42h ; B
.eh_frame:000000000000B9E7                 db  0Eh
.eh_frame:000000000000B9E8                 db  18h
.eh_frame:000000000000B9E9                 db  8Eh
.eh_frame:000000000000B9EA                 db    3
.eh_frame:000000000000B9EB                 db  42h ; B
.eh_frame:000000000000B9EC                 db  0Eh
.eh_frame:000000000000B9ED                 db  20h
.eh_frame:000000000000B9EE                 db  8Dh
.eh_frame:000000000000B9EF                 db    4
.eh_frame:000000000000B9F0                 db  42h ; B
.eh_frame:000000000000B9F1                 db  0Eh
.eh_frame:000000000000B9F2                 db  28h ; (
.eh_frame:000000000000B9F3                 db  8Ch
.eh_frame:000000000000B9F4                 db    5
.eh_frame:000000000000B9F5                 db  41h ; A
.eh_frame:000000000000B9F6                 db  0Eh
.eh_frame:000000000000B9F7                 db  30h ; 0
.eh_frame:000000000000B9F8                 db  86h
.eh_frame:000000000000B9F9                 db    6
.eh_frame:000000000000B9FA                 db  41h ; A
.eh_frame:000000000000B9FB                 db  0Eh
.eh_frame:000000000000B9FC                 db  38h ; 8
.eh_frame:000000000000B9FD                 db  83h
.eh_frame:000000000000B9FE                 db    7
.eh_frame:000000000000B9FF                 db  44h ; D
.eh_frame:000000000000BA00                 db  0Eh
.eh_frame:000000000000BA01                 db  40h ; @
.eh_frame:000000000000BA02                 db    2
.eh_frame:000000000000BA03                 db  4Ah ; J
.eh_frame:000000000000BA04                 db  0Ah
.eh_frame:000000000000BA05                 db  0Eh
.eh_frame:000000000000BA06                 db  38h ; 8
.eh_frame:000000000000BA07                 db  44h ; D
.eh_frame:000000000000BA08                 db  0Eh
.eh_frame:000000000000BA09                 db  30h ; 0
.eh_frame:000000000000BA0A                 db  41h ; A
.eh_frame:000000000000BA0B                 db  0Eh
.eh_frame:000000000000BA0C                 db  28h ; (
.eh_frame:000000000000BA0D                 db  42h ; B
.eh_frame:000000000000BA0E                 db  0Eh
.eh_frame:000000000000BA0F                 db  20h
.eh_frame:000000000000BA10                 db  42h ; B
.eh_frame:000000000000BA11                 db  0Eh
.eh_frame:000000000000BA12                 db  18h
.eh_frame:000000000000BA13                 db  42h ; B
.eh_frame:000000000000BA14                 db  0Eh
.eh_frame:000000000000BA15                 db  10h
.eh_frame:000000000000BA16                 db  42h ; B
.eh_frame:000000000000BA17                 db  0Eh
.eh_frame:000000000000BA18                 db    8
.eh_frame:000000000000BA19                 db  41h ; A
.eh_frame:000000000000BA1A                 db  0Bh
.eh_frame:000000000000BA1B                 db    0
.eh_frame:000000000000BA1C                 db  10h
.eh_frame:000000000000BA1D                 db    0
.eh_frame:000000000000BA1E                 db    0
.eh_frame:000000000000BA1F                 db    0
.eh_frame:000000000000BA20                 db 0B8h
.eh_frame:000000000000BA21                 db  12h
.eh_frame:000000000000BA22                 db    0
.eh_frame:000000000000BA23                 db    0
.eh_frame:000000000000BA24                 db  9Ch
.eh_frame:000000000000BA25                 db 0C8h
.eh_frame:000000000000BA26                 db 0FFh
.eh_frame:000000000000BA27                 db 0FFh
.eh_frame:000000000000BA28                 db  31h ; 1
.eh_frame:000000000000BA29                 db    0
.eh_frame:000000000000BA2A                 db    0
.eh_frame:000000000000BA2B                 db    0
.eh_frame:000000000000BA2C                 db    0
.eh_frame:000000000000BA2D                 db    0
.eh_frame:000000000000BA2E                 db    0
.eh_frame:000000000000BA2F                 db    0
.eh_frame:000000000000BA30                 db  10h
.eh_frame:000000000000BA31                 db    0
.eh_frame:000000000000BA32                 db    0
.eh_frame:000000000000BA33                 db    0
.eh_frame:000000000000BA34                 db 0CCh
.eh_frame:000000000000BA35                 db  12h
.eh_frame:000000000000BA36                 db    0
.eh_frame:000000000000BA37                 db    0
.eh_frame:000000000000BA38                 db 0C8h
.eh_frame:000000000000BA39                 db 0C8h
.eh_frame:000000000000BA3A                 db 0FFh
.eh_frame:000000000000BA3B                 db 0FFh
.eh_frame:000000000000BA3C                 db  20h
.eh_frame:000000000000BA3D                 db    0
.eh_frame:000000000000BA3E                 db    0
.eh_frame:000000000000BA3F                 db    0
.eh_frame:000000000000BA40                 db    0
.eh_frame:000000000000BA41                 db    0
.eh_frame:000000000000BA42                 db    0
.eh_frame:000000000000BA43                 db    0
.eh_frame:000000000000BA44                 db  48h ; H
.eh_frame:000000000000BA45                 db    0
.eh_frame:000000000000BA46                 db    0
.eh_frame:000000000000BA47                 db    0
.eh_frame:000000000000BA48                 db 0E0h
.eh_frame:000000000000BA49                 db  12h
.eh_frame:000000000000BA4A                 db    0
.eh_frame:000000000000BA4B                 db    0
.eh_frame:000000000000BA4C                 db 0D4h
.eh_frame:000000000000BA4D                 db 0C8h
.eh_frame:000000000000BA4E                 db 0FFh
.eh_frame:000000000000BA4F                 db 0FFh
.eh_frame:000000000000BA50                 db 0B4h
.eh_frame:000000000000BA51                 db    1
.eh_frame:000000000000BA52                 db    0
.eh_frame:000000000000BA53                 db    0
.eh_frame:000000000000BA54                 db    0
.eh_frame:000000000000BA55                 db  42h ; B
.eh_frame:000000000000BA56                 db  0Eh
.eh_frame:000000000000BA57                 db  10h
.eh_frame:000000000000BA58                 db  8Fh
.eh_frame:000000000000BA59                 db    2
.eh_frame:000000000000BA5A                 db  42h ; B
.eh_frame:000000000000BA5B                 db  0Eh
.eh_frame:000000000000BA5C                 db  18h
.eh_frame:000000000000BA5D                 db  8Eh
.eh_frame:000000000000BA5E                 db    3
.eh_frame:000000000000BA5F                 db  49h ; I
.eh_frame:000000000000BA60                 db  0Eh
.eh_frame:000000000000BA61                 db  20h
.eh_frame:000000000000BA62                 db  8Dh
.eh_frame:000000000000BA63                 db    4
.eh_frame:000000000000BA64                 db  42h ; B
.eh_frame:000000000000BA65                 db  0Eh
.eh_frame:000000000000BA66                 db  28h ; (
.eh_frame:000000000000BA67                 db  8Ch
.eh_frame:000000000000BA68                 db    5
.eh_frame:000000000000BA69                 db  44h ; D
.eh_frame:000000000000BA6A                 db  0Eh
.eh_frame:000000000000BA6B                 db  30h ; 0
.eh_frame:000000000000BA6C                 db  86h
.eh_frame:000000000000BA6D                 db    6
.eh_frame:000000000000BA6E                 db  41h ; A
.eh_frame:000000000000BA6F                 db  0Eh
.eh_frame:000000000000BA70                 db  38h ; 8
.eh_frame:000000000000BA71                 db  83h
.eh_frame:000000000000BA72                 db    7
.eh_frame:000000000000BA73                 db  52h ; R
.eh_frame:000000000000BA74                 db  0Eh
.eh_frame:000000000000BA75                 db  40h ; @
.eh_frame:000000000000BA76                 db    2
.eh_frame:000000000000BA77                 db 0D8h
.eh_frame:000000000000BA78                 db  0Ah
.eh_frame:000000000000BA79                 db  0Eh
.eh_frame:000000000000BA7A                 db  38h ; 8
.eh_frame:000000000000BA7B                 db  44h ; D
.eh_frame:000000000000BA7C                 db  0Eh
.eh_frame:000000000000BA7D                 db  30h ; 0
.eh_frame:000000000000BA7E                 db  41h ; A
.eh_frame:000000000000BA7F                 db  0Eh
.eh_frame:000000000000BA80                 db  28h ; (
.eh_frame:000000000000BA81                 db  42h ; B
.eh_frame:000000000000BA82                 db  0Eh
.eh_frame:000000000000BA83                 db  20h
.eh_frame:000000000000BA84                 db  42h ; B
.eh_frame:000000000000BA85                 db  0Eh
.eh_frame:000000000000BA86                 db  18h
.eh_frame:000000000000BA87                 db  42h ; B
.eh_frame:000000000000BA88                 db  0Eh
.eh_frame:000000000000BA89                 db  10h
.eh_frame:000000000000BA8A                 db  42h ; B
.eh_frame:000000000000BA8B                 db  0Eh
.eh_frame:000000000000BA8C                 db    8
.eh_frame:000000000000BA8D                 db  45h ; E
.eh_frame:000000000000BA8E                 db  0Bh
.eh_frame:000000000000BA8F                 db    0
.eh_frame:000000000000BA90                 db  28h ; (
.eh_frame:000000000000BA91                 db    0
.eh_frame:000000000000BA92                 db    0
.eh_frame:000000000000BA93                 db    0
.eh_frame:000000000000BA94                 db  2Ch ; ,
.eh_frame:000000000000BA95                 db  13h
.eh_frame:000000000000BA96                 db    0
.eh_frame:000000000000BA97                 db    0
.eh_frame:000000000000BA98                 db  48h ; H
.eh_frame:000000000000BA99                 db 0CAh
.eh_frame:000000000000BA9A                 db 0FFh
.eh_frame:000000000000BA9B                 db 0FFh
.eh_frame:000000000000BA9C                 db  90h
.eh_frame:000000000000BA9D                 db    0
.eh_frame:000000000000BA9E                 db    0
.eh_frame:000000000000BA9F                 db    0
.eh_frame:000000000000BAA0                 db    0
.eh_frame:000000000000BAA1                 db  42h ; B
.eh_frame:000000000000BAA2                 db  0Eh
.eh_frame:000000000000BAA3                 db  10h
.eh_frame:000000000000BAA4                 db  8Ch
.eh_frame:000000000000BAA5                 db    2
.eh_frame:000000000000BAA6                 db  41h ; A
.eh_frame:000000000000BAA7                 db  0Eh
.eh_frame:000000000000BAA8                 db  18h
.eh_frame:000000000000BAA9                 db  86h
.eh_frame:000000000000BAAA                 db    3
.eh_frame:000000000000BAAB                 db  44h ; D
.eh_frame:000000000000BAAC                 db  0Eh
.eh_frame:000000000000BAAD                 db  20h
.eh_frame:000000000000BAAE                 db  83h
.eh_frame:000000000000BAAF                 db    4
.eh_frame:000000000000BAB0                 db    2
.eh_frame:000000000000BAB1                 db  85h
.eh_frame:000000000000BAB2                 db  0Eh
.eh_frame:000000000000BAB3                 db  18h
.eh_frame:000000000000BAB4                 db  41h ; A
.eh_frame:000000000000BAB5                 db  0Eh
.eh_frame:000000000000BAB6                 db  10h
.eh_frame:000000000000BAB7                 db  42h ; B
.eh_frame:000000000000BAB8                 db  0Eh
.eh_frame:000000000000BAB9                 db    8
.eh_frame:000000000000BABA                 db    0
.eh_frame:000000000000BABB                 db    0
.eh_frame:000000000000BABC                 db  28h ; (
.eh_frame:000000000000BABD                 db    0
.eh_frame:000000000000BABE                 db    0
.eh_frame:000000000000BABF                 db    0
.eh_frame:000000000000BAC0                 db  58h ; X
.eh_frame:000000000000BAC1                 db  13h
.eh_frame:000000000000BAC2                 db    0
.eh_frame:000000000000BAC3                 db    0
.eh_frame:000000000000BAC4                 db 0ACh
.eh_frame:000000000000BAC5                 db 0CAh
.eh_frame:000000000000BAC6                 db 0FFh
.eh_frame:000000000000BAC7                 db 0FFh
.eh_frame:000000000000BAC8                 db 0D6h
.eh_frame:000000000000BAC9                 db    0
.eh_frame:000000000000BACA                 db    0
.eh_frame:000000000000BACB                 db    0
.eh_frame:000000000000BACC                 db    0
.eh_frame:000000000000BACD                 db  42h ; B
.eh_frame:000000000000BACE                 db  0Eh
.eh_frame:000000000000BACF                 db  10h
.eh_frame:000000000000BAD0                 db  8Ch
.eh_frame:000000000000BAD1                 db    2
.eh_frame:000000000000BAD2                 db  41h ; A
.eh_frame:000000000000BAD3                 db  0Eh
.eh_frame:000000000000BAD4                 db  18h
.eh_frame:000000000000BAD5                 db  86h
.eh_frame:000000000000BAD6                 db    3
.eh_frame:000000000000BAD7                 db  44h ; D
.eh_frame:000000000000BAD8                 db  0Eh
.eh_frame:000000000000BAD9                 db  20h
.eh_frame:000000000000BADA                 db  83h
.eh_frame:000000000000BADB                 db    4
.eh_frame:000000000000BADC                 db    2
.eh_frame:000000000000BADD                 db 0C4h
.eh_frame:000000000000BADE                 db  0Eh
.eh_frame:000000000000BADF                 db  18h
.eh_frame:000000000000BAE0                 db  44h ; D
.eh_frame:000000000000BAE1                 db  0Eh
.eh_frame:000000000000BAE2                 db  10h
.eh_frame:000000000000BAE3                 db  42h ; B
.eh_frame:000000000000BAE4                 db  0Eh
.eh_frame:000000000000BAE5                 db    8
.eh_frame:000000000000BAE6                 db    0
.eh_frame:000000000000BAE7                 db    0
.eh_frame:000000000000BAE8                 db  34h ; 4
.eh_frame:000000000000BAE9                 db    0
.eh_frame:000000000000BAEA                 db    0
.eh_frame:000000000000BAEB                 db    0
.eh_frame:000000000000BAEC                 db  84h
.eh_frame:000000000000BAED                 db  13h
.eh_frame:000000000000BAEE                 db    0
.eh_frame:000000000000BAEF                 db    0
.eh_frame:000000000000BAF0                 db  60h ; `
.eh_frame:000000000000BAF1                 db 0CBh
.eh_frame:000000000000BAF2                 db 0FFh
.eh_frame:000000000000BAF3                 db 0FFh
.eh_frame:000000000000BAF4                 db  3Eh ; >
.eh_frame:000000000000BAF5                 db    2
.eh_frame:000000000000BAF6                 db    0
.eh_frame:000000000000BAF7                 db    0
.eh_frame:000000000000BAF8                 db    0
.eh_frame:000000000000BAF9                 db  42h ; B
.eh_frame:000000000000BAFA                 db  0Eh
.eh_frame:000000000000BAFB                 db  10h
.eh_frame:000000000000BAFC                 db  8Ch
.eh_frame:000000000000BAFD                 db    2
.eh_frame:000000000000BAFE                 db  41h ; A
.eh_frame:000000000000BAFF                 db  0Eh
.eh_frame:000000000000BB00                 db  18h
.eh_frame:000000000000BB01                 db  86h
.eh_frame:000000000000BB02                 db    3
.eh_frame:000000000000BB03                 db  44h ; D
.eh_frame:000000000000BB04                 db  0Eh
.eh_frame:000000000000BB05                 db  20h
.eh_frame:000000000000BB06                 db  83h
.eh_frame:000000000000BB07                 db    4
.eh_frame:000000000000BB08                 db  44h ; D
.eh_frame:000000000000BB09                 db  0Eh
.eh_frame:000000000000BB0A                 db  80h
.eh_frame:000000000000BB0B                 db    1
.eh_frame:000000000000BB0C                 db    3
.eh_frame:000000000000BB0D                 db  91h
.eh_frame:000000000000BB0E                 db    1
.eh_frame:000000000000BB0F                 db  0Ah
.eh_frame:000000000000BB10                 db  0Eh
.eh_frame:000000000000BB11                 db  20h
.eh_frame:000000000000BB12                 db  41h ; A
.eh_frame:000000000000BB13                 db  0Eh
.eh_frame:000000000000BB14                 db  18h
.eh_frame:000000000000BB15                 db  41h ; A
.eh_frame:000000000000BB16                 db  0Eh
.eh_frame:000000000000BB17                 db  10h
.eh_frame:000000000000BB18                 db  42h ; B
.eh_frame:000000000000BB19                 db  0Eh
.eh_frame:000000000000BB1A                 db    8
.eh_frame:000000000000BB1B                 db  48h ; H
.eh_frame:000000000000BB1C                 db  0Bh
.eh_frame:000000000000BB1D                 db    0
.eh_frame:000000000000BB1E                 db    0
.eh_frame:000000000000BB1F                 db    0
.eh_frame:000000000000BB20                 db  38h ; 8
.eh_frame:000000000000BB21                 db    0
.eh_frame:000000000000BB22                 db    0
.eh_frame:000000000000BB23                 db    0
.eh_frame:000000000000BB24                 db 0BCh
.eh_frame:000000000000BB25                 db  13h
.eh_frame:000000000000BB26                 db    0
.eh_frame:000000000000BB27                 db    0
.eh_frame:000000000000BB28                 db  68h ; h
.eh_frame:000000000000BB29                 db 0CDh
.eh_frame:000000000000BB2A                 db 0FFh
.eh_frame:000000000000BB2B                 db 0FFh
.eh_frame:000000000000BB2C                 db  84h
.eh_frame:000000000000BB2D                 db    2
.eh_frame:000000000000BB2E                 db    0
.eh_frame:000000000000BB2F                 db    0
.eh_frame:000000000000BB30                 db    0
.eh_frame:000000000000BB31                 db  42h ; B
.eh_frame:000000000000BB32                 db  0Eh
.eh_frame:000000000000BB33                 db  10h
.eh_frame:000000000000BB34                 db  8Dh
.eh_frame:000000000000BB35                 db    2
.eh_frame:000000000000BB36                 db  42h ; B
.eh_frame:000000000000BB37                 db  0Eh
.eh_frame:000000000000BB38                 db  18h
.eh_frame:000000000000BB39                 db  8Ch
.eh_frame:000000000000BB3A                 db    3
.eh_frame:000000000000BB3B                 db  41h ; A
.eh_frame:000000000000BB3C                 db  0Eh
.eh_frame:000000000000BB3D                 db  20h
.eh_frame:000000000000BB3E                 db  86h
.eh_frame:000000000000BB3F                 db    4
.eh_frame:000000000000BB40                 db  41h ; A
.eh_frame:000000000000BB41                 db  0Eh
.eh_frame:000000000000BB42                 db  28h ; (
.eh_frame:000000000000BB43                 db  83h
.eh_frame:000000000000BB44                 db    5
.eh_frame:000000000000BB45                 db  44h ; D
.eh_frame:000000000000BB46                 db  0Eh
.eh_frame:000000000000BB47                 db  40h ; @
.eh_frame:000000000000BB48                 db    2
.eh_frame:000000000000BB49                 db  5Ah ; Z
.eh_frame:000000000000BB4A                 db  0Ah
.eh_frame:000000000000BB4B                 db  0Eh
.eh_frame:000000000000BB4C                 db  28h ; (
.eh_frame:000000000000BB4D                 db  41h ; A
.eh_frame:000000000000BB4E                 db  0Eh
.eh_frame:000000000000BB4F                 db  20h
.eh_frame:000000000000BB50                 db  41h ; A
.eh_frame:000000000000BB51                 db  0Eh
.eh_frame:000000000000BB52                 db  18h
.eh_frame:000000000000BB53                 db  42h ; B
.eh_frame:000000000000BB54                 db  0Eh
.eh_frame:000000000000BB55                 db  10h
.eh_frame:000000000000BB56                 db  42h ; B
.eh_frame:000000000000BB57                 db  0Eh
.eh_frame:000000000000BB58                 db    8
.eh_frame:000000000000BB59                 db  46h ; F
.eh_frame:000000000000BB5A                 db  0Bh
.eh_frame:000000000000BB5B                 db    0
.eh_frame:000000000000BB5C                 db  20h
.eh_frame:000000000000BB5D                 db    0
.eh_frame:000000000000BB5E                 db    0
.eh_frame:000000000000BB5F                 db    0
.eh_frame:000000000000BB60                 db 0F8h
.eh_frame:000000000000BB61                 db  13h
.eh_frame:000000000000BB62                 db    0
.eh_frame:000000000000BB63                 db    0
.eh_frame:000000000000BB64                 db 0BCh
.eh_frame:000000000000BB65                 db 0CFh
.eh_frame:000000000000BB66                 db 0FFh
.eh_frame:000000000000BB67                 db 0FFh
.eh_frame:000000000000BB68                 db  59h ; Y
.eh_frame:000000000000BB69                 db    0
.eh_frame:000000000000BB6A                 db    0
.eh_frame:000000000000BB6B                 db    0
.eh_frame:000000000000BB6C                 db    0
.eh_frame:000000000000BB6D                 db  41h ; A
.eh_frame:000000000000BB6E                 db  0Eh
.eh_frame:000000000000BB6F                 db  10h
.eh_frame:000000000000BB70                 db  83h
.eh_frame:000000000000BB71                 db    2
.eh_frame:000000000000BB72                 db  47h ; G
.eh_frame:000000000000BB73                 db  0Eh
.eh_frame:000000000000BB74                 db  20h
.eh_frame:000000000000BB75                 db  7Ch ; |
.eh_frame:000000000000BB76                 db  0Ah
.eh_frame:000000000000BB77                 db  0Eh
.eh_frame:000000000000BB78                 db  10h
.eh_frame:000000000000BB79                 db  41h ; A
.eh_frame:000000000000BB7A                 db  0Eh
.eh_frame:000000000000BB7B                 db    8
.eh_frame:000000000000BB7C                 db  4Bh ; K
.eh_frame:000000000000BB7D                 db  0Bh
.eh_frame:000000000000BB7E                 db    0
.eh_frame:000000000000BB7F                 db    0
.eh_frame:000000000000BB80                 db  34h ; 4
.eh_frame:000000000000BB81                 db    0
.eh_frame:000000000000BB82                 db    0
.eh_frame:000000000000BB83                 db    0
.eh_frame:000000000000BB84                 db  1Ch
.eh_frame:000000000000BB85                 db  14h
.eh_frame:000000000000BB86                 db    0
.eh_frame:000000000000BB87                 db    0
.eh_frame:000000000000BB88                 db 0F8h
.eh_frame:000000000000BB89                 db 0CFh
.eh_frame:000000000000BB8A                 db 0FFh
.eh_frame:000000000000BB8B                 db 0FFh
.eh_frame:000000000000BB8C                 db    3
.eh_frame:000000000000BB8D                 db    2
.eh_frame:000000000000BB8E                 db    0
.eh_frame:000000000000BB8F                 db    0
.eh_frame:000000000000BB90                 db    0
.eh_frame:000000000000BB91                 db  42h ; B
.eh_frame:000000000000BB92                 db  0Eh
.eh_frame:000000000000BB93                 db  10h
.eh_frame:000000000000BB94                 db  8Ch
.eh_frame:000000000000BB95                 db    2
.eh_frame:000000000000BB96                 db  41h ; A
.eh_frame:000000000000BB97                 db  0Eh
.eh_frame:000000000000BB98                 db  18h
.eh_frame:000000000000BB99                 db  86h
.eh_frame:000000000000BB9A                 db    3
.eh_frame:000000000000BB9B                 db  46h ; F
.eh_frame:000000000000BB9C                 db  0Eh
.eh_frame:000000000000BB9D                 db  20h
.eh_frame:000000000000BB9E                 db  83h
.eh_frame:000000000000BB9F                 db    4
.eh_frame:000000000000BBA0                 db  47h ; G
.eh_frame:000000000000BBA1                 db  0Eh
.eh_frame:000000000000BBA2                 db  30h ; 0
.eh_frame:000000000000BBA3                 db    2
.eh_frame:000000000000BBA4                 db  4Ah ; J
.eh_frame:000000000000BBA5                 db  0Ah
.eh_frame:000000000000BBA6                 db  0Eh
.eh_frame:000000000000BBA7                 db  20h
.eh_frame:000000000000BBA8                 db  41h ; A
.eh_frame:000000000000BBA9                 db  0Eh
.eh_frame:000000000000BBAA                 db  18h
.eh_frame:000000000000BBAB                 db  41h ; A
.eh_frame:000000000000BBAC                 db  0Eh
.eh_frame:000000000000BBAD                 db  10h
.eh_frame:000000000000BBAE                 db  42h ; B
.eh_frame:000000000000BBAF                 db  0Eh
.eh_frame:000000000000BBB0                 db    8
.eh_frame:000000000000BBB1                 db  42h ; B
.eh_frame:000000000000BBB2                 db  0Bh
.eh_frame:000000000000BBB3                 db    0
.eh_frame:000000000000BBB4                 db    0
.eh_frame:000000000000BBB5                 db    0
.eh_frame:000000000000BBB6                 db    0
.eh_frame:000000000000BBB7                 db    0
.eh_frame:000000000000BBB8                 db  1Ch
.eh_frame:000000000000BBB9                 db    0
.eh_frame:000000000000BBBA                 db    0
.eh_frame:000000000000BBBB                 db    0
.eh_frame:000000000000BBBC                 db  54h ; T
.eh_frame:000000000000BBBD                 db  14h
.eh_frame:000000000000BBBE                 db    0
.eh_frame:000000000000BBBF                 db    0
.eh_frame:000000000000BBC0                 db 0D0h
.eh_frame:000000000000BBC1                 db 0D1h
.eh_frame:000000000000BBC2                 db 0FFh
.eh_frame:000000000000BBC3                 db 0FFh
.eh_frame:000000000000BBC4                 db  3Ch ; <
.eh_frame:000000000000BBC5                 db    0
.eh_frame:000000000000BBC6                 db    0
.eh_frame:000000000000BBC7                 db    0
.eh_frame:000000000000BBC8                 db    0
.eh_frame:000000000000BBC9                 db  44h ; D
.eh_frame:000000000000BBCA                 db  0Eh
.eh_frame:000000000000BBCB                 db  10h
.eh_frame:000000000000BBCC                 db  61h ; a
.eh_frame:000000000000BBCD                 db  0Ah
.eh_frame:000000000000BBCE                 db  0Eh
.eh_frame:000000000000BBCF                 db    8
.eh_frame:000000000000BBD0                 db  4Bh ; K
.eh_frame:000000000000BBD1                 db  0Bh
.eh_frame:000000000000BBD2                 db  4Bh ; K
.eh_frame:000000000000BBD3                 db  0Eh
.eh_frame:000000000000BBD4                 db    8
.eh_frame:000000000000BBD5                 db    0
.eh_frame:000000000000BBD6                 db    0
.eh_frame:000000000000BBD7                 db    0
.eh_frame:000000000000BBD8                 db  14h
.eh_frame:000000000000BBD9                 db    0
.eh_frame:000000000000BBDA                 db    0
.eh_frame:000000000000BBDB                 db    0
.eh_frame:000000000000BBDC                 db  74h ; t
.eh_frame:000000000000BBDD                 db  14h
.eh_frame:000000000000BBDE                 db    0
.eh_frame:000000000000BBDF                 db    0
.eh_frame:000000000000BBE0                 db 0F0h
.eh_frame:000000000000BBE1                 db 0D1h
.eh_frame:000000000000BBE2                 db 0FFh
.eh_frame:000000000000BBE3                 db 0FFh
.eh_frame:000000000000BBE4                 db  0Eh
.eh_frame:000000000000BBE5                 db    0
.eh_frame:000000000000BBE6                 db    0
.eh_frame:000000000000BBE7                 db    0
.eh_frame:000000000000BBE8                 db    0
.eh_frame:000000000000BBE9                 db    0
.eh_frame:000000000000BBEA                 db    0
.eh_frame:000000000000BBEB                 db    0
.eh_frame:000000000000BBEC                 db    0
.eh_frame:000000000000BBED                 db    0
.eh_frame:000000000000BBEE                 db    0
.eh_frame:000000000000BBEF                 db    0
.eh_frame:000000000000BBF0                 db  34h ; 4
.eh_frame:000000000000BBF1                 db    0
.eh_frame:000000000000BBF2                 db    0
.eh_frame:000000000000BBF3                 db    0
.eh_frame:000000000000BBF4                 db  8Ch
.eh_frame:000000000000BBF5                 db  14h
.eh_frame:000000000000BBF6                 db    0
.eh_frame:000000000000BBF7                 db    0
.eh_frame:000000000000BBF8                 db 0E8h
.eh_frame:000000000000BBF9                 db 0D1h
.eh_frame:000000000000BBFA                 db 0FFh
.eh_frame:000000000000BBFB                 db 0FFh
.eh_frame:000000000000BBFC                 db  7Eh ; ~
.eh_frame:000000000000BBFD                 db    2
.eh_frame:000000000000BBFE                 db    0
.eh_frame:000000000000BBFF                 db    0
.eh_frame:000000000000BC00                 db    0
.eh_frame:000000000000BC01                 db  42h ; B
.eh_frame:000000000000BC02                 db  0Eh
.eh_frame:000000000000BC03                 db  10h
.eh_frame:000000000000BC04                 db  8Ch
.eh_frame:000000000000BC05                 db    2
.eh_frame:000000000000BC06                 db  41h ; A
.eh_frame:000000000000BC07                 db  0Eh
.eh_frame:000000000000BC08                 db  18h
.eh_frame:000000000000BC09                 db  86h
.eh_frame:000000000000BC0A                 db    3
.eh_frame:000000000000BC0B                 db  43h ; C
.eh_frame:000000000000BC0C                 db  0Eh
.eh_frame:000000000000BC0D                 db  20h
.eh_frame:000000000000BC0E                 db  83h
.eh_frame:000000000000BC0F                 db    4
.eh_frame:000000000000BC10                 db  44h ; D
.eh_frame:000000000000BC11                 db  0Eh
.eh_frame:000000000000BC12                 db  70h ; p
.eh_frame:000000000000BC13                 db    2
.eh_frame:000000000000BC14                 db 0F0h
.eh_frame:000000000000BC15                 db  0Ah
.eh_frame:000000000000BC16                 db  0Eh
.eh_frame:000000000000BC17                 db  20h
.eh_frame:000000000000BC18                 db  41h ; A
.eh_frame:000000000000BC19                 db  0Eh
.eh_frame:000000000000BC1A                 db  18h
.eh_frame:000000000000BC1B                 db  41h ; A
.eh_frame:000000000000BC1C                 db  0Eh
.eh_frame:000000000000BC1D                 db  10h
.eh_frame:000000000000BC1E                 db  42h ; B
.eh_frame:000000000000BC1F                 db  0Eh
.eh_frame:000000000000BC20                 db    8
.eh_frame:000000000000BC21                 db  42h ; B
.eh_frame:000000000000BC22                 db  0Bh
.eh_frame:000000000000BC23                 db    0
.eh_frame:000000000000BC24                 db    0
.eh_frame:000000000000BC25                 db    0
.eh_frame:000000000000BC26                 db    0
.eh_frame:000000000000BC27                 db    0
.eh_frame:000000000000BC28                 db  44h ; D
.eh_frame:000000000000BC29                 db    0
.eh_frame:000000000000BC2A                 db    0
.eh_frame:000000000000BC2B                 db    0
.eh_frame:000000000000BC2C                 db 0C4h
.eh_frame:000000000000BC2D                 db  14h
.eh_frame:000000000000BC2E                 db    0
.eh_frame:000000000000BC2F                 db    0
.eh_frame:000000000000BC30                 db  30h ; 0
.eh_frame:000000000000BC31                 db 0D4h
.eh_frame:000000000000BC32                 db 0FFh
.eh_frame:000000000000BC33                 db 0FFh
.eh_frame:000000000000BC34                 db  65h ; e
.eh_frame:000000000000BC35                 db    0
.eh_frame:000000000000BC36                 db    0
.eh_frame:000000000000BC37                 db    0
.eh_frame:000000000000BC38                 db    0
.eh_frame:000000000000BC39                 db  42h ; B
.eh_frame:000000000000BC3A                 db  0Eh
.eh_frame:000000000000BC3B                 db  10h
.eh_frame:000000000000BC3C                 db  8Fh
.eh_frame:000000000000BC3D                 db    2
.eh_frame:000000000000BC3E                 db  42h ; B
.eh_frame:000000000000BC3F                 db  0Eh
.eh_frame:000000000000BC40                 db  18h
.eh_frame:000000000000BC41                 db  8Eh
.eh_frame:000000000000BC42                 db    3
.eh_frame:000000000000BC43                 db  45h ; E
.eh_frame:000000000000BC44                 db  0Eh
.eh_frame:000000000000BC45                 db  20h
.eh_frame:000000000000BC46                 db  8Dh
.eh_frame:000000000000BC47                 db    4
.eh_frame:000000000000BC48                 db  42h ; B
.eh_frame:000000000000BC49                 db  0Eh
.eh_frame:000000000000BC4A                 db  28h ; (
.eh_frame:000000000000BC4B                 db  8Ch
.eh_frame:000000000000BC4C                 db    5
.eh_frame:000000000000BC4D                 db  48h ; H
.eh_frame:000000000000BC4E                 db  0Eh
.eh_frame:000000000000BC4F                 db  30h ; 0
.eh_frame:000000000000BC50                 db  86h
.eh_frame:000000000000BC51                 db    6
.eh_frame:000000000000BC52                 db  48h ; H
.eh_frame:000000000000BC53                 db  0Eh
.eh_frame:000000000000BC54                 db  38h ; 8
.eh_frame:000000000000BC55                 db  83h
.eh_frame:000000000000BC56                 db    7
.eh_frame:000000000000BC57                 db  4Dh ; M
.eh_frame:000000000000BC58                 db  0Eh
.eh_frame:000000000000BC59                 db  40h ; @
.eh_frame:000000000000BC5A                 db  72h ; r
.eh_frame:000000000000BC5B                 db  0Eh
.eh_frame:000000000000BC5C                 db  38h ; 8
.eh_frame:000000000000BC5D                 db  41h ; A
.eh_frame:000000000000BC5E                 db  0Eh
.eh_frame:000000000000BC5F                 db  30h ; 0
.eh_frame:000000000000BC60                 db  41h ; A
.eh_frame:000000000000BC61                 db  0Eh
.eh_frame:000000000000BC62                 db  28h ; (
.eh_frame:000000000000BC63                 db  42h ; B
.eh_frame:000000000000BC64                 db  0Eh
.eh_frame:000000000000BC65                 db  20h
.eh_frame:000000000000BC66                 db  42h ; B
.eh_frame:000000000000BC67                 db  0Eh
.eh_frame:000000000000BC68                 db  18h
.eh_frame:000000000000BC69                 db  42h ; B
.eh_frame:000000000000BC6A                 db  0Eh
.eh_frame:000000000000BC6B                 db  10h
.eh_frame:000000000000BC6C                 db  42h ; B
.eh_frame:000000000000BC6D                 db  0Eh
.eh_frame:000000000000BC6E                 db    8
.eh_frame:000000000000BC6F                 db    0
.eh_frame:000000000000BC70                 db  14h
.eh_frame:000000000000BC71                 db    0
.eh_frame:000000000000BC72                 db    0
.eh_frame:000000000000BC73                 db    0
.eh_frame:000000000000BC74                 db  0Ch
.eh_frame:000000000000BC75                 db  15h
.eh_frame:000000000000BC76                 db    0
.eh_frame:000000000000BC77                 db    0
.eh_frame:000000000000BC78                 db  58h ; X
.eh_frame:000000000000BC79                 db 0D4h
.eh_frame:000000000000BC7A                 db 0FFh
.eh_frame:000000000000BC7B                 db 0FFh
.eh_frame:000000000000BC7C                 db    2
.eh_frame:000000000000BC7D                 db    0
.eh_frame:000000000000BC7E                 db    0
.eh_frame:000000000000BC7F                 db    0
.eh_frame:000000000000BC80                 db    0
.eh_frame:000000000000BC81                 db    0
.eh_frame:000000000000BC82                 db    0
.eh_frame:000000000000BC83                 db    0
.eh_frame:000000000000BC84                 db    0
.eh_frame:000000000000BC85                 db    0
.eh_frame:000000000000BC86                 db    0
.eh_frame:000000000000BC87                 db    0
.eh_frame:000000000000BC88                 db  10h
.eh_frame:000000000000BC89                 db    0
.eh_frame:000000000000BC8A                 db    0
.eh_frame:000000000000BC8B                 db    0
.eh_frame:000000000000BC8C                 db  24h ; $
.eh_frame:000000000000BC8D                 db  15h
.eh_frame:000000000000BC8E                 db    0
.eh_frame:000000000000BC8F                 db    0
.eh_frame:000000000000BC90                 db  50h ; P
.eh_frame:000000000000BC91                 db 0D4h
.eh_frame:000000000000BC92                 db 0FFh
.eh_frame:000000000000BC93                 db 0FFh
.eh_frame:000000000000BC94                 db  0Eh
.eh_frame:000000000000BC95                 db    0
.eh_frame:000000000000BC96                 db    0
.eh_frame:000000000000BC97                 db    0
.eh_frame:000000000000BC98                 db    0
.eh_frame:000000000000BC99                 db    0
.eh_frame:000000000000BC9A                 db    0
.eh_frame:000000000000BC9B                 db    0
.eh_frame:000000000000BC9C __FRAME_END__   db    0
.eh_frame:000000000000BC9D                 db    0
.eh_frame:000000000000BC9E                 db    0
.eh_frame:000000000000BC9F                 db    0
.eh_frame:000000000000BC9F _eh_frame       ends
.eh_frame:000000000000BC9F
.init_array:000000000020C9F0 ; ELF Initialization Function Table
.init_array:000000000020C9F0 ; ===========================================================================
.init_array:000000000020C9F0
.init_array:000000000020C9F0 ; Segment type: Pure data
.init_array:000000000020C9F0 ; Segment permissions: Read/Write
.init_array:000000000020C9F0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020C9F0                 assume cs:_init_array
.init_array:000000000020C9F0                 ;org 20C9F0h
.init_array:000000000020C9F0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020C9F0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020C9F0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020C9F0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020C9F0
.fini_array:000000000020C9F8 ; ELF Termination Function Table
.fini_array:000000000020C9F8 ; ===========================================================================
.fini_array:000000000020C9F8
.fini_array:000000000020C9F8 ; Segment type: Pure data
.fini_array:000000000020C9F8 ; Segment permissions: Read/Write
.fini_array:000000000020C9F8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020C9F8                 assume cs:_fini_array
.fini_array:000000000020C9F8                 ;org 20C9F8h
.fini_array:000000000020C9F8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020C9F8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020C9F8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020C9F8
.data.rel.ro:000000000020CA00 ; ===========================================================================
.data.rel.ro:000000000020CA00
.data.rel.ro:000000000020CA00 ; Segment type: Pure data
.data.rel.ro:000000000020CA00 ; Segment permissions: Read/Write
.data.rel.ro:000000000020CA00 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020CA00                 assume cs:_data_rel_ro
.data.rel.ro:000000000020CA00                 ;org 20CA00h
.data.rel.ro:000000000020CA00 ; struct option long_opts
.data.rel.ro:000000000020CA00 long_opts       dq offset aEcho         ; name
.data.rel.ro:000000000020CA00                                         ; DATA XREF: main:loc_1E88↑o
.data.rel.ro:000000000020CA00                 dd 0                    ; has_arg ; "echo"
.data.rel.ro:000000000020CA00                 db 4 dup(0)
.data.rel.ro:000000000020CA00                 dq 0                    ; flag
.data.rel.ro:000000000020CA00                 dd 65h                  ; val
.data.rel.ro:000000000020CA00                 db 4 dup(0)
.data.rel.ro:000000000020CA20                 dq offset aInputRange   ; "input-range"
.data.rel.ro:000000000020CA28                 db    1
.data.rel.ro:000000000020CA29                 db    0
.data.rel.ro:000000000020CA2A                 db    0
.data.rel.ro:000000000020CA2B                 db    0
.data.rel.ro:000000000020CA2C                 db    0
.data.rel.ro:000000000020CA2D                 db    0
.data.rel.ro:000000000020CA2E                 db    0
.data.rel.ro:000000000020CA2F                 db    0
.data.rel.ro:000000000020CA30                 db    0
.data.rel.ro:000000000020CA31                 db    0
.data.rel.ro:000000000020CA32                 db    0
.data.rel.ro:000000000020CA33                 db    0
.data.rel.ro:000000000020CA34                 db    0
.data.rel.ro:000000000020CA35                 db    0
.data.rel.ro:000000000020CA36                 db    0
.data.rel.ro:000000000020CA37                 db    0
.data.rel.ro:000000000020CA38                 db  69h ; i
.data.rel.ro:000000000020CA39                 db    0
.data.rel.ro:000000000020CA3A                 db    0
.data.rel.ro:000000000020CA3B                 db    0
.data.rel.ro:000000000020CA3C                 db    0
.data.rel.ro:000000000020CA3D                 db    0
.data.rel.ro:000000000020CA3E                 db    0
.data.rel.ro:000000000020CA3F                 db    0
.data.rel.ro:000000000020CA40                 dq offset aHeadCount    ; "head-count"
.data.rel.ro:000000000020CA48                 db    1
.data.rel.ro:000000000020CA49                 db    0
.data.rel.ro:000000000020CA4A                 db    0
.data.rel.ro:000000000020CA4B                 db    0
.data.rel.ro:000000000020CA4C                 db    0
.data.rel.ro:000000000020CA4D                 db    0
.data.rel.ro:000000000020CA4E                 db    0
.data.rel.ro:000000000020CA4F                 db    0
.data.rel.ro:000000000020CA50                 db    0
.data.rel.ro:000000000020CA51                 db    0
.data.rel.ro:000000000020CA52                 db    0
.data.rel.ro:000000000020CA53                 db    0
.data.rel.ro:000000000020CA54                 db    0
.data.rel.ro:000000000020CA55                 db    0
.data.rel.ro:000000000020CA56                 db    0
.data.rel.ro:000000000020CA57                 db    0
.data.rel.ro:000000000020CA58                 db  6Eh ; n
.data.rel.ro:000000000020CA59                 db    0
.data.rel.ro:000000000020CA5A                 db    0
.data.rel.ro:000000000020CA5B                 db    0
.data.rel.ro:000000000020CA5C                 db    0
.data.rel.ro:000000000020CA5D                 db    0
.data.rel.ro:000000000020CA5E                 db    0
.data.rel.ro:000000000020CA5F                 db    0
.data.rel.ro:000000000020CA60                 dq offset aOutput       ; "output"
.data.rel.ro:000000000020CA68                 db    1
.data.rel.ro:000000000020CA69                 db    0
.data.rel.ro:000000000020CA6A                 db    0
.data.rel.ro:000000000020CA6B                 db    0
.data.rel.ro:000000000020CA6C                 db    0
.data.rel.ro:000000000020CA6D                 db    0
.data.rel.ro:000000000020CA6E                 db    0
.data.rel.ro:000000000020CA6F                 db    0
.data.rel.ro:000000000020CA70                 db    0
.data.rel.ro:000000000020CA71                 db    0
.data.rel.ro:000000000020CA72                 db    0
.data.rel.ro:000000000020CA73                 db    0
.data.rel.ro:000000000020CA74                 db    0
.data.rel.ro:000000000020CA75                 db    0
.data.rel.ro:000000000020CA76                 db    0
.data.rel.ro:000000000020CA77                 db    0
.data.rel.ro:000000000020CA78                 db  6Fh ; o
.data.rel.ro:000000000020CA79                 db    0
.data.rel.ro:000000000020CA7A                 db    0
.data.rel.ro:000000000020CA7B                 db    0
.data.rel.ro:000000000020CA7C                 db    0
.data.rel.ro:000000000020CA7D                 db    0
.data.rel.ro:000000000020CA7E                 db    0
.data.rel.ro:000000000020CA7F                 db    0
.data.rel.ro:000000000020CA80                 dq offset aRandomSource ; "random-source"
.data.rel.ro:000000000020CA88                 db    1
.data.rel.ro:000000000020CA89                 db    0
.data.rel.ro:000000000020CA8A                 db    0
.data.rel.ro:000000000020CA8B                 db    0
.data.rel.ro:000000000020CA8C                 db    0
.data.rel.ro:000000000020CA8D                 db    0
.data.rel.ro:000000000020CA8E                 db    0
.data.rel.ro:000000000020CA8F                 db    0
.data.rel.ro:000000000020CA90                 db    0
.data.rel.ro:000000000020CA91                 db    0
.data.rel.ro:000000000020CA92                 db    0
.data.rel.ro:000000000020CA93                 db    0
.data.rel.ro:000000000020CA94                 db    0
.data.rel.ro:000000000020CA95                 db    0
.data.rel.ro:000000000020CA96                 db    0
.data.rel.ro:000000000020CA97                 db    0
.data.rel.ro:000000000020CA98                 db  80h
.data.rel.ro:000000000020CA99                 db    0
.data.rel.ro:000000000020CA9A                 db    0
.data.rel.ro:000000000020CA9B                 db    0
.data.rel.ro:000000000020CA9C                 db    0
.data.rel.ro:000000000020CA9D                 db    0
.data.rel.ro:000000000020CA9E                 db    0
.data.rel.ro:000000000020CA9F                 db    0
.data.rel.ro:000000000020CAA0                 dq offset aNoLinesToRepea+0Ch ; "repeat"
.data.rel.ro:000000000020CAA8                 db    0
.data.rel.ro:000000000020CAA9                 db    0
.data.rel.ro:000000000020CAAA                 db    0
.data.rel.ro:000000000020CAAB                 db    0
.data.rel.ro:000000000020CAAC                 db    0
.data.rel.ro:000000000020CAAD                 db    0
.data.rel.ro:000000000020CAAE                 db    0
.data.rel.ro:000000000020CAAF                 db    0
.data.rel.ro:000000000020CAB0                 db    0
.data.rel.ro:000000000020CAB1                 db    0
.data.rel.ro:000000000020CAB2                 db    0
.data.rel.ro:000000000020CAB3                 db    0
.data.rel.ro:000000000020CAB4                 db    0
.data.rel.ro:000000000020CAB5                 db    0
.data.rel.ro:000000000020CAB6                 db    0
.data.rel.ro:000000000020CAB7                 db    0
.data.rel.ro:000000000020CAB8                 db  72h ; r
.data.rel.ro:000000000020CAB9                 db    0
.data.rel.ro:000000000020CABA                 db    0
.data.rel.ro:000000000020CABB                 db    0
.data.rel.ro:000000000020CABC                 db    0
.data.rel.ro:000000000020CABD                 db    0
.data.rel.ro:000000000020CABE                 db    0
.data.rel.ro:000000000020CABF                 db    0
.data.rel.ro:000000000020CAC0                 dq offset aZeroTerminated ; "zero-terminated"
.data.rel.ro:000000000020CAC8                 db    0
.data.rel.ro:000000000020CAC9                 db    0
.data.rel.ro:000000000020CACA                 db    0
.data.rel.ro:000000000020CACB                 db    0
.data.rel.ro:000000000020CACC                 db    0
.data.rel.ro:000000000020CACD                 db    0
.data.rel.ro:000000000020CACE                 db    0
.data.rel.ro:000000000020CACF                 db    0
.data.rel.ro:000000000020CAD0                 db    0
.data.rel.ro:000000000020CAD1                 db    0
.data.rel.ro:000000000020CAD2                 db    0
.data.rel.ro:000000000020CAD3                 db    0
.data.rel.ro:000000000020CAD4                 db    0
.data.rel.ro:000000000020CAD5                 db    0
.data.rel.ro:000000000020CAD6                 db    0
.data.rel.ro:000000000020CAD7                 db    0
.data.rel.ro:000000000020CAD8                 db  7Ah ; z
.data.rel.ro:000000000020CAD9                 db    0
.data.rel.ro:000000000020CADA                 db    0
.data.rel.ro:000000000020CADB                 db    0
.data.rel.ro:000000000020CADC                 db    0
.data.rel.ro:000000000020CADD                 db    0
.data.rel.ro:000000000020CADE                 db    0
.data.rel.ro:000000000020CADF                 db    0
.data.rel.ro:000000000020CAE0                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020CAE8                 db    0
.data.rel.ro:000000000020CAE9                 db    0
.data.rel.ro:000000000020CAEA                 db    0
.data.rel.ro:000000000020CAEB                 db    0
.data.rel.ro:000000000020CAEC                 db    0
.data.rel.ro:000000000020CAED                 db    0
.data.rel.ro:000000000020CAEE                 db    0
.data.rel.ro:000000000020CAEF                 db    0
.data.rel.ro:000000000020CAF0                 db    0
.data.rel.ro:000000000020CAF1                 db    0
.data.rel.ro:000000000020CAF2                 db    0
.data.rel.ro:000000000020CAF3                 db    0
.data.rel.ro:000000000020CAF4                 db    0
.data.rel.ro:000000000020CAF5                 db    0
.data.rel.ro:000000000020CAF6                 db    0
.data.rel.ro:000000000020CAF7                 db    0
.data.rel.ro:000000000020CAF8                 db  7Eh ; ~
.data.rel.ro:000000000020CAF9                 db 0FFh
.data.rel.ro:000000000020CAFA                 db 0FFh
.data.rel.ro:000000000020CAFB                 db 0FFh
.data.rel.ro:000000000020CAFC                 db    0
.data.rel.ro:000000000020CAFD                 db    0
.data.rel.ro:000000000020CAFE                 db    0
.data.rel.ro:000000000020CAFF                 db    0
.data.rel.ro:000000000020CB00                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020CB08                 db    0
.data.rel.ro:000000000020CB09                 db    0
.data.rel.ro:000000000020CB0A                 db    0
.data.rel.ro:000000000020CB0B                 db    0
.data.rel.ro:000000000020CB0C                 db    0
.data.rel.ro:000000000020CB0D                 db    0
.data.rel.ro:000000000020CB0E                 db    0
.data.rel.ro:000000000020CB0F                 db    0
.data.rel.ro:000000000020CB10                 db    0
.data.rel.ro:000000000020CB11                 db    0
.data.rel.ro:000000000020CB12                 db    0
.data.rel.ro:000000000020CB13                 db    0
.data.rel.ro:000000000020CB14                 db    0
.data.rel.ro:000000000020CB15                 db    0
.data.rel.ro:000000000020CB16                 db    0
.data.rel.ro:000000000020CB17                 db    0
.data.rel.ro:000000000020CB18                 db  7Dh ; }
.data.rel.ro:000000000020CB19                 db 0FFh
.data.rel.ro:000000000020CB1A                 db 0FFh
.data.rel.ro:000000000020CB1B                 db 0FFh
.data.rel.ro:000000000020CB1C                 db    0
.data.rel.ro:000000000020CB1D                 db    0
.data.rel.ro:000000000020CB1E                 db    0
.data.rel.ro:000000000020CB1F                 db    0
.data.rel.ro:000000000020CB20                 db    0
.data.rel.ro:000000000020CB21                 db    0
.data.rel.ro:000000000020CB22                 db    0
.data.rel.ro:000000000020CB23                 db    0
.data.rel.ro:000000000020CB24                 db    0
.data.rel.ro:000000000020CB25                 db    0
.data.rel.ro:000000000020CB26                 db    0
.data.rel.ro:000000000020CB27                 db    0
.data.rel.ro:000000000020CB28                 db    0
.data.rel.ro:000000000020CB29                 db    0
.data.rel.ro:000000000020CB2A                 db    0
.data.rel.ro:000000000020CB2B                 db    0
.data.rel.ro:000000000020CB2C                 db    0
.data.rel.ro:000000000020CB2D                 db    0
.data.rel.ro:000000000020CB2E                 db    0
.data.rel.ro:000000000020CB2F                 db    0
.data.rel.ro:000000000020CB30                 db    0
.data.rel.ro:000000000020CB31                 db    0
.data.rel.ro:000000000020CB32                 db    0
.data.rel.ro:000000000020CB33                 db    0
.data.rel.ro:000000000020CB34                 db    0
.data.rel.ro:000000000020CB35                 db    0
.data.rel.ro:000000000020CB36                 db    0
.data.rel.ro:000000000020CB37                 db    0
.data.rel.ro:000000000020CB38                 db    0
.data.rel.ro:000000000020CB39                 db    0
.data.rel.ro:000000000020CB3A                 db    0
.data.rel.ro:000000000020CB3B                 db    0
.data.rel.ro:000000000020CB3C                 db    0
.data.rel.ro:000000000020CB3D                 db    0
.data.rel.ro:000000000020CB3E                 db    0
.data.rel.ro:000000000020CB3F                 db    0
.data.rel.ro:000000000020CB40                 public quoting_style_args
.data.rel.ro:000000000020CB40 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020CB48                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020CB50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020CB58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020CB60                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020CB68                 dq offset aLuC+4        ; "c"
.data.rel.ro:000000000020CB70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020CB78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020CB80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020CB88                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020CB90                 db    0
.data.rel.ro:000000000020CB91                 db    0
.data.rel.ro:000000000020CB92                 db    0
.data.rel.ro:000000000020CB93                 db    0
.data.rel.ro:000000000020CB94                 db    0
.data.rel.ro:000000000020CB95                 db    0
.data.rel.ro:000000000020CB96                 db    0
.data.rel.ro:000000000020CB97                 db    0
.data.rel.ro:000000000020CB97 _data_rel_ro    ends
.data.rel.ro:000000000020CB97
LOAD:000000000020CB98 ; ELF Dynamic Information
LOAD:000000000020CB98 ; ===========================================================================
LOAD:000000000020CB98
LOAD:000000000020CB98 ; Segment type: Pure data
LOAD:000000000020CB98 ; Segment permissions: Read/Write
LOAD:000000000020CB98 LOAD            segment byte public 'DATA' use64
LOAD:000000000020CB98                 assume cs:LOAD
LOAD:000000000020CB98                 ;org 20CB98h
LOAD:000000000020CB98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020CB98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020CB98                                         ; DT_NEEDED libc.so.6
LOAD:000000000020CBA8                 Elf64_Dyn <0Ch, 1960h>  ; DT_INIT
LOAD:000000000020CBB8                 Elf64_Dyn <0Dh, 90F0h>  ; DT_FINI
LOAD:000000000020CBC8                 Elf64_Dyn <19h, 20C9F0h> ; DT_INIT_ARRAY
LOAD:000000000020CBD8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020CBE8                 Elf64_Dyn <1Ah, 20C9F8h> ; DT_FINI_ARRAY
LOAD:000000000020CBF8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020CC08                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020CC18                 Elf64_Dyn <5, 0AC0h>    ; DT_STRTAB
LOAD:000000000020CC28                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020CC38                 Elf64_Dyn <0Ah, 393h>   ; DT_STRSZ
LOAD:000000000020CC48                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020CC58                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020CC68                 Elf64_Dyn <3, 20CD88h>  ; DT_PLTGOT
LOAD:000000000020CC78                 Elf64_Dyn <2, 660h>     ; DT_PLTRELSZ
LOAD:000000000020CC88                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020CC98                 Elf64_Dyn <17h, 1300h>  ; DT_JMPREL
LOAD:000000000020CCA8                 Elf64_Dyn <7, 0F70h>    ; DT_RELA
LOAD:000000000020CCB8                 Elf64_Dyn <8, 390h>     ; DT_RELASZ
LOAD:000000000020CCC8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020CCD8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020CCE8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020CCF8                 Elf64_Dyn <6FFFFFFEh, 0F00h> ; DT_VERNEED
LOAD:000000000020CD08                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020CD18                 Elf64_Dyn <6FFFFFF0h, 0E54h> ; DT_VERSYM
LOAD:000000000020CD28                 Elf64_Dyn <6FFFFFF9h, 19h> ; DT_RELACOUNT
LOAD:000000000020CD38                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020CD48                 db    0
LOAD:000000000020CD49                 db    0
LOAD:000000000020CD4A                 db    0
LOAD:000000000020CD4B                 db    0
LOAD:000000000020CD4C                 db    0
LOAD:000000000020CD4D                 db    0
LOAD:000000000020CD4E                 db    0
LOAD:000000000020CD4F                 db    0
LOAD:000000000020CD50                 db    0
LOAD:000000000020CD51                 db    0
LOAD:000000000020CD52                 db    0
LOAD:000000000020CD53                 db    0
LOAD:000000000020CD54                 db    0
LOAD:000000000020CD55                 db    0
LOAD:000000000020CD56                 db    0
LOAD:000000000020CD57                 db    0
LOAD:000000000020CD58                 db    0
LOAD:000000000020CD59                 db    0
LOAD:000000000020CD5A                 db    0
LOAD:000000000020CD5B                 db    0
LOAD:000000000020CD5C                 db    0
LOAD:000000000020CD5D                 db    0
LOAD:000000000020CD5E                 db    0
LOAD:000000000020CD5F                 db    0
LOAD:000000000020CD60                 db    0
LOAD:000000000020CD61                 db    0
LOAD:000000000020CD62                 db    0
LOAD:000000000020CD63                 db    0
LOAD:000000000020CD64                 db    0
LOAD:000000000020CD65                 db    0
LOAD:000000000020CD66                 db    0
LOAD:000000000020CD67                 db    0
LOAD:000000000020CD68                 db    0
LOAD:000000000020CD69                 db    0
LOAD:000000000020CD6A                 db    0
LOAD:000000000020CD6B                 db    0
LOAD:000000000020CD6C                 db    0
LOAD:000000000020CD6D                 db    0
LOAD:000000000020CD6E                 db    0
LOAD:000000000020CD6F                 db    0
LOAD:000000000020CD70                 db    0
LOAD:000000000020CD71                 db    0
LOAD:000000000020CD72                 db    0
LOAD:000000000020CD73                 db    0
LOAD:000000000020CD74                 db    0
LOAD:000000000020CD75                 db    0
LOAD:000000000020CD76                 db    0
LOAD:000000000020CD77                 db    0
LOAD:000000000020CD78                 db    0
LOAD:000000000020CD79                 db    0
LOAD:000000000020CD7A                 db    0
LOAD:000000000020CD7B                 db    0
LOAD:000000000020CD7C                 db    0
LOAD:000000000020CD7D                 db    0
LOAD:000000000020CD7E                 db    0
LOAD:000000000020CD7F                 db    0
LOAD:000000000020CD80                 db    0
LOAD:000000000020CD81                 db    0
LOAD:000000000020CD82                 db    0
LOAD:000000000020CD83                 db    0
LOAD:000000000020CD84                 db    0
LOAD:000000000020CD85                 db    0
LOAD:000000000020CD86                 db    0
LOAD:000000000020CD87                 db    0
LOAD:000000000020CD87 LOAD            ends
LOAD:000000000020CD87
.got:000000000020CD88 ; ===========================================================================
.got:000000000020CD88
.got:000000000020CD88 ; Segment type: Pure data
.got:000000000020CD88 ; Segment permissions: Read/Write
.got:000000000020CD88 _got            segment qword public 'DATA' use64
.got:000000000020CD88                 assume cs:_got
.got:000000000020CD88                 ;org 20CD88h
.got:000000000020CD88 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020CD90 qword_20CD90    dq 0                    ; DATA XREF: sub_1980↑r
.got:000000000020CD98 qword_20CD98    dq 0                    ; DATA XREF: sub_1980+6↑r
.got:000000000020CDA0 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:000000000020CDA8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020CDB0 __errno_location_ptr dq offset __errno_location
.got:000000000020CDB0                                         ; DATA XREF: ___errno_location↑r
.got:000000000020CDB8 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020CDC0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020CDC8 ftello_ptr      dq offset ftello        ; DATA XREF: _ftello↑r
.got:000000000020CDD0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020CDD8 __read_chk_ptr  dq offset __read_chk    ; DATA XREF: ___read_chk↑r
.got:000000000020CDE0 ferror_ptr      dq offset ferror        ; DATA XREF: _ferror↑r
.got:000000000020CDE8 fread_ptr       dq offset fread         ; DATA XREF: _fread↑r
.got:000000000020CDF0 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020CDF8 getpid_ptr      dq offset getpid        ; DATA XREF: _getpid↑r
.got:000000000020CE00 fread_unlocked_ptr dq offset fread_unlocked
.got:000000000020CE00                                         ; DATA XREF: _fread_unlocked↑r
.got:000000000020CE08 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020CE10 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020CE18 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020CE18                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020CE20 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:000000000020CE28 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020CE30 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020CE30                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020CE38 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020CE40 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020CE40                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020CE48 getuid_ptr      dq offset getuid        ; DATA XREF: _getuid↑r
.got:000000000020CE50 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020CE58 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020CE60 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:000000000020CE68 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020CE70 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020CE78 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020CE80 gettimeofday_ptr dq offset gettimeofday ; DATA XREF: _gettimeofday↑r
.got:000000000020CE88 __assert_fail_ptr dq offset __assert_fail
.got:000000000020CE88                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020CE90 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000020CE90                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000020CE98 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020CEA0 freopen_ptr     dq offset freopen       ; DATA XREF: _freopen↑r
.got:000000000020CEA8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020CEB0 posix_fadvise_ptr dq offset posix_fadvise
.got:000000000020CEB0                                         ; DATA XREF: _posix_fadvise↑r
.got:000000000020CEB8 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:000000000020CEC0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020CEC8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020CEC8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020CED0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020CED8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020CEE0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020CEE8 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020CEF0 getgid_ptr      dq offset getgid        ; DATA XREF: _getgid↑r
.got:000000000020CEF8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020CF00 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020CF08 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020CF10 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020CF18 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020CF20 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000020CF20                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000020CF28 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020CF30 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:000000000020CF38 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020CF40 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020CF48 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:000000000020CF50 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020CF58 __explicit_bzero_chk_ptr dq offset __explicit_bzero_chk
.got:000000000020CF58                                         ; DATA XREF: ___explicit_bzero_chk↑r
.got:000000000020CF60 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020CF68 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020CF70 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:000000000020CF78 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:000000000020CF80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020CF88 getppid_ptr     dq offset getppid       ; DATA XREF: _getppid↑r
.got:000000000020CF90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020CF98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020CFA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020CFA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020CFA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020CFB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020CFB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020CFB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020CFC0 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:000000000020CFC0                                         ; randperm_new+97↑r
.got:000000000020CFC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020CFC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020CFD0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020CFD0                                         ; DATA XREF: start+24↑r
.got:000000000020CFD8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020CFD8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020CFE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020CFE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020CFE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020CFE8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020CFE8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020CFE8 _got            ends
.got:000000000020CFE8
LOAD:000000000020CFF0 ; ===========================================================================
LOAD:000000000020CFF0
LOAD:000000000020CFF0 ; Segment type: Pure data
LOAD:000000000020CFF0 ; Segment permissions: Read/Write
LOAD:000000000020CFF0 LOAD            segment byte public 'DATA' use64
LOAD:000000000020CFF0                 assume cs:LOAD
LOAD:000000000020CFF0                 ;org 20CFF0h
LOAD:000000000020CFF0                 align 20h
LOAD:000000000020CFF0 LOAD            ends
LOAD:000000000020CFF0
.data:000000000020D000 ; ===========================================================================
.data:000000000020D000
.data:000000000020D000 ; Segment type: Pure data
.data:000000000020D000 ; Segment permissions: Read/Write
.data:000000000020D000 _data           segment align_32 public 'DATA' use64
.data:000000000020D000                 assume cs:_data
.data:000000000020D000                 ;org 20D000h
.data:000000000020D000                 public __data_start ; weak
.data:000000000020D000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020D000                                         ; data_start
.data:000000000020D001                 db    0
.data:000000000020D002                 db    0
.data:000000000020D003                 db    0
.data:000000000020D004                 db    0
.data:000000000020D005                 db    0
.data:000000000020D006                 db    0
.data:000000000020D007                 db    0
.data:000000000020D008                 public __dso_handle
.data:000000000020D008 ; void *_dso_handle
.data:000000000020D008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020D008                                         ; atexit↑r ...
.data:000000000020D010                 public Version
.data:000000000020D010 Version         dq offset a831          ; DATA XREF: main+2DA↑r
.data:000000000020D010                                         ; "8.31"
.data:000000000020D018                 public exit_failure
.data:000000000020D018 ; int exit_failure
.data:000000000020D018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_31D2↑r
.data:000000000020D018                                         ; randread_error:loc_58A3↑r ...
.data:000000000020D01C                 align 20h
.data:000000000020D020                 public quote_quoting_options
.data:000000000020D020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020D020                                         ; quote_mem↑o ...
.data:000000000020D021                 db    0
.data:000000000020D022                 db    0
.data:000000000020D023                 db    0
.data:000000000020D024                 db    0
.data:000000000020D025                 db    0
.data:000000000020D026                 db    0
.data:000000000020D027                 db    0
.data:000000000020D028                 db    0
.data:000000000020D029                 db    0
.data:000000000020D02A                 db    0
.data:000000000020D02B                 db    0
.data:000000000020D02C                 db    0
.data:000000000020D02D                 db    0
.data:000000000020D02E                 db    0
.data:000000000020D02F                 db    0
.data:000000000020D030                 db    0
.data:000000000020D031                 db    0
.data:000000000020D032                 db    0
.data:000000000020D033                 db    0
.data:000000000020D034                 db    0
.data:000000000020D035                 db    0
.data:000000000020D036                 db    0
.data:000000000020D037                 db    0
.data:000000000020D038                 db    0
.data:000000000020D039                 db    0
.data:000000000020D03A                 db    0
.data:000000000020D03B                 db    0
.data:000000000020D03C                 db    0
.data:000000000020D03D                 db    0
.data:000000000020D03E                 db    0
.data:000000000020D03F                 db    0
.data:000000000020D040                 db    0
.data:000000000020D041                 db    0
.data:000000000020D042                 db    0
.data:000000000020D043                 db    0
.data:000000000020D044                 db    0
.data:000000000020D045                 db    0
.data:000000000020D046                 db    0
.data:000000000020D047                 db    0
.data:000000000020D048                 db    0
.data:000000000020D049                 db    0
.data:000000000020D04A                 db    0
.data:000000000020D04B                 db    0
.data:000000000020D04C                 db    0
.data:000000000020D04D                 db    0
.data:000000000020D04E                 db    0
.data:000000000020D04F                 db    0
.data:000000000020D050                 db    0
.data:000000000020D051                 db    0
.data:000000000020D052                 db    0
.data:000000000020D053                 db    0
.data:000000000020D054                 db    0
.data:000000000020D055                 db    0
.data:000000000020D056                 db    0
.data:000000000020D057                 db    0
.data:000000000020D058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020D058                                         ; quotearg_n_options:loc_49CD↑r ...
.data:000000000020D05C                 align 20h
.data:000000000020D060 ; void *slotvec
.data:000000000020D060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020D060                                         ; quotearg_n_options+76↑w ...
.data:000000000020D068                 align 10h
.data:000000000020D070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020D070                                         ; quotearg_n_options+187↑r ...
.data:000000000020D078 off_20D078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020D078 _data           ends
.data:000000000020D078
.bss:000000000020D080 ; ===========================================================================
.bss:000000000020D080
.bss:000000000020D080 ; Segment type: Uninitialized
.bss:000000000020D080 ; Segment permissions: Read/Write
.bss:000000000020D080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020D080                 assume cs:_bss
.bss:000000000020D080                 ;org 20D080h
.bss:000000000020D080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020D080                 public __bss_start ; weak
.bss:000000000020D080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000A00↑o
.bss:000000000020D080                                         ; LOAD:0000000000000A60↑o ...
.bss:000000000020D080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020D080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020D080                                         ; _edata
.bss:000000000020D080                                         ; Copy of shared data
.bss:000000000020D088                 public stdout@@GLIBC_2_2_5
.bss:000000000020D088 ; FILE *stdout
.bss:000000000020D088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009E8↑o
.bss:000000000020D088                                         ; main+2D3↑r ...
.bss:000000000020D088                                         ; Alternative name is 'stdout'
.bss:000000000020D088                                         ; Copy of shared data
.bss:000000000020D090                 public stdin@@GLIBC_2_2_5
.bss:000000000020D090 ; FILE *stdin
.bss:000000000020D090 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000A18↑o
.bss:000000000020D090                                         ; main+403↑r ...
.bss:000000000020D090                                         ; Alternative name is 'stdin'
.bss:000000000020D090                                         ; Copy of shared data
.bss:000000000020D098                 public optind@@GLIBC_2_2_5
.bss:000000000020D098 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A90↑o
.bss:000000000020D098                                         ; main:loc_2199↑r
.bss:000000000020D098                                         ; Alternative name is 'optind'
.bss:000000000020D098                                         ; Copy of shared data
.bss:000000000020D09C                 align 20h
.bss:000000000020D0A0                 public optarg@@GLIBC_2_2_5
.bss:000000000020D0A0 ; char *optarg
.bss:000000000020D0A0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000AA8↑o
.bss:000000000020D0A0                                         ; main+FB↑r ...
.bss:000000000020D0A0                                         ; Alternative name is 'optarg'
.bss:000000000020D0A0                                         ; Copy of shared data
.bss:000000000020D0A8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020D0A8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020D0A8                                         ; DATA XREF: LOAD:0000000000000A30↑o
.bss:000000000020D0A8                                         ; LOAD:0000000000000A48↑o ...
.bss:000000000020D0A8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020D0A8                                         ; Copy of shared data
.bss:000000000020D0B0                 align 20h
.bss:000000000020D0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020D0C0 ; FILE *stderr
.bss:000000000020D0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A78↑o
.bss:000000000020D0C0                                         ; usage+3D↑r ...
.bss:000000000020D0C0                                         ; Alternative name is 'stderr'
.bss:000000000020D0C0                                         ; Copy of shared data
.bss:000000000020D0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020D0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020D0C9                 align 10h
.bss:000000000020D0D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020D0D0                                         ; close_stdout+1B↑r
.bss:000000000020D0D1                 align 8
.bss:000000000020D0D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020D0D8                                         ; close_stdout+56↑r
.bss:000000000020D0E0                 public program_name
.bss:000000000020D0E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020D0E0                                         ; set_program_name:loc_35ED↑w
.bss:000000000020D0E8                 align 20h
.bss:000000000020D100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020D100                                         ; quotearg_free+46↑o ...
.bss:000000000020D101                 db    ? ;
.bss:000000000020D102                 db    ? ;
.bss:000000000020D103                 db    ? ;
.bss:000000000020D104                 db    ? ;
.bss:000000000020D105                 db    ? ;
.bss:000000000020D106                 db    ? ;
.bss:000000000020D107                 db    ? ;
.bss:000000000020D108                 db    ? ;
.bss:000000000020D109                 db    ? ;
.bss:000000000020D10A                 db    ? ;
.bss:000000000020D10B                 db    ? ;
.bss:000000000020D10C                 db    ? ;
.bss:000000000020D10D                 db    ? ;
.bss:000000000020D10E                 db    ? ;
.bss:000000000020D10F                 db    ? ;
.bss:000000000020D110                 db    ? ;
.bss:000000000020D111                 db    ? ;
.bss:000000000020D112                 db    ? ;
.bss:000000000020D113                 db    ? ;
.bss:000000000020D114                 db    ? ;
.bss:000000000020D115                 db    ? ;
.bss:000000000020D116                 db    ? ;
.bss:000000000020D117                 db    ? ;
.bss:000000000020D118                 db    ? ;
.bss:000000000020D119                 db    ? ;
.bss:000000000020D11A                 db    ? ;
.bss:000000000020D11B                 db    ? ;
.bss:000000000020D11C                 db    ? ;
.bss:000000000020D11D                 db    ? ;
.bss:000000000020D11E                 db    ? ;
.bss:000000000020D11F                 db    ? ;
.bss:000000000020D120                 db    ? ;
.bss:000000000020D121                 db    ? ;
.bss:000000000020D122                 db    ? ;
.bss:000000000020D123                 db    ? ;
.bss:000000000020D124                 db    ? ;
.bss:000000000020D125                 db    ? ;
.bss:000000000020D126                 db    ? ;
.bss:000000000020D127                 db    ? ;
.bss:000000000020D128                 db    ? ;
.bss:000000000020D129                 db    ? ;
.bss:000000000020D12A                 db    ? ;
.bss:000000000020D12B                 db    ? ;
.bss:000000000020D12C                 db    ? ;
.bss:000000000020D12D                 db    ? ;
.bss:000000000020D12E                 db    ? ;
.bss:000000000020D12F                 db    ? ;
.bss:000000000020D130                 db    ? ;
.bss:000000000020D131                 db    ? ;
.bss:000000000020D132                 db    ? ;
.bss:000000000020D133                 db    ? ;
.bss:000000000020D134                 db    ? ;
.bss:000000000020D135                 db    ? ;
.bss:000000000020D136                 db    ? ;
.bss:000000000020D137                 db    ? ;
.bss:000000000020D138                 db    ? ;
.bss:000000000020D139                 db    ? ;
.bss:000000000020D13A                 db    ? ;
.bss:000000000020D13B                 db    ? ;
.bss:000000000020D13C                 db    ? ;
.bss:000000000020D13D                 db    ? ;
.bss:000000000020D13E                 db    ? ;
.bss:000000000020D13F                 db    ? ;
.bss:000000000020D140                 db    ? ;
.bss:000000000020D141                 db    ? ;
.bss:000000000020D142                 db    ? ;
.bss:000000000020D143                 db    ? ;
.bss:000000000020D144                 db    ? ;
.bss:000000000020D145                 db    ? ;
.bss:000000000020D146                 db    ? ;
.bss:000000000020D147                 db    ? ;
.bss:000000000020D148                 db    ? ;
.bss:000000000020D149                 db    ? ;
.bss:000000000020D14A                 db    ? ;
.bss:000000000020D14B                 db    ? ;
.bss:000000000020D14C                 db    ? ;
.bss:000000000020D14D                 db    ? ;
.bss:000000000020D14E                 db    ? ;
.bss:000000000020D14F                 db    ? ;
.bss:000000000020D150                 db    ? ;
.bss:000000000020D151                 db    ? ;
.bss:000000000020D152                 db    ? ;
.bss:000000000020D153                 db    ? ;
.bss:000000000020D154                 db    ? ;
.bss:000000000020D155                 db    ? ;
.bss:000000000020D156                 db    ? ;
.bss:000000000020D157                 db    ? ;
.bss:000000000020D158                 db    ? ;
.bss:000000000020D159                 db    ? ;
.bss:000000000020D15A                 db    ? ;
.bss:000000000020D15B                 db    ? ;
.bss:000000000020D15C                 db    ? ;
.bss:000000000020D15D                 db    ? ;
.bss:000000000020D15E                 db    ? ;
.bss:000000000020D15F                 db    ? ;
.bss:000000000020D160                 db    ? ;
.bss:000000000020D161                 db    ? ;
.bss:000000000020D162                 db    ? ;
.bss:000000000020D163                 db    ? ;
.bss:000000000020D164                 db    ? ;
.bss:000000000020D165                 db    ? ;
.bss:000000000020D166                 db    ? ;
.bss:000000000020D167                 db    ? ;
.bss:000000000020D168                 db    ? ;
.bss:000000000020D169                 db    ? ;
.bss:000000000020D16A                 db    ? ;
.bss:000000000020D16B                 db    ? ;
.bss:000000000020D16C                 db    ? ;
.bss:000000000020D16D                 db    ? ;
.bss:000000000020D16E                 db    ? ;
.bss:000000000020D16F                 db    ? ;
.bss:000000000020D170                 db    ? ;
.bss:000000000020D171                 db    ? ;
.bss:000000000020D172                 db    ? ;
.bss:000000000020D173                 db    ? ;
.bss:000000000020D174                 db    ? ;
.bss:000000000020D175                 db    ? ;
.bss:000000000020D176                 db    ? ;
.bss:000000000020D177                 db    ? ;
.bss:000000000020D178                 db    ? ;
.bss:000000000020D179                 db    ? ;
.bss:000000000020D17A                 db    ? ;
.bss:000000000020D17B                 db    ? ;
.bss:000000000020D17C                 db    ? ;
.bss:000000000020D17D                 db    ? ;
.bss:000000000020D17E                 db    ? ;
.bss:000000000020D17F                 db    ? ;
.bss:000000000020D180                 db    ? ;
.bss:000000000020D181                 db    ? ;
.bss:000000000020D182                 db    ? ;
.bss:000000000020D183                 db    ? ;
.bss:000000000020D184                 db    ? ;
.bss:000000000020D185                 db    ? ;
.bss:000000000020D186                 db    ? ;
.bss:000000000020D187                 db    ? ;
.bss:000000000020D188                 db    ? ;
.bss:000000000020D189                 db    ? ;
.bss:000000000020D18A                 db    ? ;
.bss:000000000020D18B                 db    ? ;
.bss:000000000020D18C                 db    ? ;
.bss:000000000020D18D                 db    ? ;
.bss:000000000020D18E                 db    ? ;
.bss:000000000020D18F                 db    ? ;
.bss:000000000020D190                 db    ? ;
.bss:000000000020D191                 db    ? ;
.bss:000000000020D192                 db    ? ;
.bss:000000000020D193                 db    ? ;
.bss:000000000020D194                 db    ? ;
.bss:000000000020D195                 db    ? ;
.bss:000000000020D196                 db    ? ;
.bss:000000000020D197                 db    ? ;
.bss:000000000020D198                 db    ? ;
.bss:000000000020D199                 db    ? ;
.bss:000000000020D19A                 db    ? ;
.bss:000000000020D19B                 db    ? ;
.bss:000000000020D19C                 db    ? ;
.bss:000000000020D19D                 db    ? ;
.bss:000000000020D19E                 db    ? ;
.bss:000000000020D19F                 db    ? ;
.bss:000000000020D1A0                 db    ? ;
.bss:000000000020D1A1                 db    ? ;
.bss:000000000020D1A2                 db    ? ;
.bss:000000000020D1A3                 db    ? ;
.bss:000000000020D1A4                 db    ? ;
.bss:000000000020D1A5                 db    ? ;
.bss:000000000020D1A6                 db    ? ;
.bss:000000000020D1A7                 db    ? ;
.bss:000000000020D1A8                 db    ? ;
.bss:000000000020D1A9                 db    ? ;
.bss:000000000020D1AA                 db    ? ;
.bss:000000000020D1AB                 db    ? ;
.bss:000000000020D1AC                 db    ? ;
.bss:000000000020D1AD                 db    ? ;
.bss:000000000020D1AE                 db    ? ;
.bss:000000000020D1AF                 db    ? ;
.bss:000000000020D1B0                 db    ? ;
.bss:000000000020D1B1                 db    ? ;
.bss:000000000020D1B2                 db    ? ;
.bss:000000000020D1B3                 db    ? ;
.bss:000000000020D1B4                 db    ? ;
.bss:000000000020D1B5                 db    ? ;
.bss:000000000020D1B6                 db    ? ;
.bss:000000000020D1B7                 db    ? ;
.bss:000000000020D1B8                 db    ? ;
.bss:000000000020D1B9                 db    ? ;
.bss:000000000020D1BA                 db    ? ;
.bss:000000000020D1BB                 db    ? ;
.bss:000000000020D1BC                 db    ? ;
.bss:000000000020D1BD                 db    ? ;
.bss:000000000020D1BE                 db    ? ;
.bss:000000000020D1BF                 db    ? ;
.bss:000000000020D1C0                 db    ? ;
.bss:000000000020D1C1                 db    ? ;
.bss:000000000020D1C2                 db    ? ;
.bss:000000000020D1C3                 db    ? ;
.bss:000000000020D1C4                 db    ? ;
.bss:000000000020D1C5                 db    ? ;
.bss:000000000020D1C6                 db    ? ;
.bss:000000000020D1C7                 db    ? ;
.bss:000000000020D1C8                 db    ? ;
.bss:000000000020D1C9                 db    ? ;
.bss:000000000020D1CA                 db    ? ;
.bss:000000000020D1CB                 db    ? ;
.bss:000000000020D1CC                 db    ? ;
.bss:000000000020D1CD                 db    ? ;
.bss:000000000020D1CE                 db    ? ;
.bss:000000000020D1CF                 db    ? ;
.bss:000000000020D1D0                 db    ? ;
.bss:000000000020D1D1                 db    ? ;
.bss:000000000020D1D2                 db    ? ;
.bss:000000000020D1D3                 db    ? ;
.bss:000000000020D1D4                 db    ? ;
.bss:000000000020D1D5                 db    ? ;
.bss:000000000020D1D6                 db    ? ;
.bss:000000000020D1D7                 db    ? ;
.bss:000000000020D1D8                 db    ? ;
.bss:000000000020D1D9                 db    ? ;
.bss:000000000020D1DA                 db    ? ;
.bss:000000000020D1DB                 db    ? ;
.bss:000000000020D1DC                 db    ? ;
.bss:000000000020D1DD                 db    ? ;
.bss:000000000020D1DE                 db    ? ;
.bss:000000000020D1DF                 db    ? ;
.bss:000000000020D1E0                 db    ? ;
.bss:000000000020D1E1                 db    ? ;
.bss:000000000020D1E2                 db    ? ;
.bss:000000000020D1E3                 db    ? ;
.bss:000000000020D1E4                 db    ? ;
.bss:000000000020D1E5                 db    ? ;
.bss:000000000020D1E6                 db    ? ;
.bss:000000000020D1E7                 db    ? ;
.bss:000000000020D1E8                 db    ? ;
.bss:000000000020D1E9                 db    ? ;
.bss:000000000020D1EA                 db    ? ;
.bss:000000000020D1EB                 db    ? ;
.bss:000000000020D1EC                 db    ? ;
.bss:000000000020D1ED                 db    ? ;
.bss:000000000020D1EE                 db    ? ;
.bss:000000000020D1EF                 db    ? ;
.bss:000000000020D1F0                 db    ? ;
.bss:000000000020D1F1                 db    ? ;
.bss:000000000020D1F2                 db    ? ;
.bss:000000000020D1F3                 db    ? ;
.bss:000000000020D1F4                 db    ? ;
.bss:000000000020D1F5                 db    ? ;
.bss:000000000020D1F6                 db    ? ;
.bss:000000000020D1F7                 db    ? ;
.bss:000000000020D1F8                 db    ? ;
.bss:000000000020D1F9                 db    ? ;
.bss:000000000020D1FA                 db    ? ;
.bss:000000000020D1FB                 db    ? ;
.bss:000000000020D1FC                 db    ? ;
.bss:000000000020D1FD                 db    ? ;
.bss:000000000020D1FE                 db    ? ;
.bss:000000000020D1FF                 db    ? ;
.bss:000000000020D200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020D200                                         ; get_quoting_style↑o ...
.bss:000000000020D210 xmmword_20D210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020D210                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020D220 xmmword_20D220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020D220                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020D230 qword_20D230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020D230                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020D238 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020D238                                         ; rpl_fcntl:loc_8E6F↑w ...
.bss:000000000020D23C                 align 20h
.bss:000000000020D23C _bss            ends
.bss:000000000020D23C
.prgend:000000000020D240 ; ===========================================================================
.prgend:000000000020D240
.prgend:000000000020D240 ; Segment type: Zero-length
.prgend:000000000020D240 _prgend         segment byte public '' use64
.prgend:000000000020D240 _end            label byte
.prgend:000000000020D240 _prgend         ends
.prgend:000000000020D240
extern:000000000020D248 ; ===========================================================================
extern:000000000020D248
extern:000000000020D248 ; Segment type: Externs
extern:000000000020D248 ; extern
extern:000000000020D248 ; int _uflow(_IO_FILE *)
extern:000000000020D248                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:000000000020D248                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:000000000020D250 ; void free(void *ptr)
extern:000000000020D250                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000020D250                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020D258 ; void __noreturn abort(void)
extern:000000000020D258                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020D258                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020D260 ; int *_errno_location(void)
extern:000000000020D260                 extrn __errno_location:near
extern:000000000020D260                                         ; CODE XREF: ___errno_location↑j
extern:000000000020D260                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020D268 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020D268                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020D268                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020D270 ; void __noreturn exit(int status)
extern:000000000020D270                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020D270                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020D278 ; __off_t ftello(FILE *stream)
extern:000000000020D278                 extrn ftello:near       ; CODE XREF: _ftello↑j
extern:000000000020D278                                         ; DATA XREF: .got:ftello_ptr↑o
extern:000000000020D280 ; size_t _fpending(FILE *fp)
extern:000000000020D280                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020D280                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020D288                 extrn __read_chk:near   ; CODE XREF: ___read_chk↑j
extern:000000000020D288                                         ; DATA XREF: .got:__read_chk_ptr↑o
extern:000000000020D290 ; int ferror(FILE *stream)
extern:000000000020D290                 extrn ferror:near       ; CODE XREF: _ferror↑j
extern:000000000020D290                                         ; DATA XREF: .got:ferror_ptr↑o
extern:000000000020D298 ; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020D298                 extrn fread:near        ; CODE XREF: _fread↑j
extern:000000000020D298                                         ; DATA XREF: .got:fread_ptr↑o
extern:000000000020D2A0 ; int fcntl(int fd, int cmd, ...)
extern:000000000020D2A0                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020D2A0                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020D2A8 ; __pid_t getpid(void)
extern:000000000020D2A8                 extrn getpid:near       ; CODE XREF: _getpid↑j
extern:000000000020D2A8                                         ; DATA XREF: .got:getpid_ptr↑o
extern:000000000020D2B0 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020D2B0                 extrn fread_unlocked:near
extern:000000000020D2B0                                         ; CODE XREF: _fread_unlocked↑j
extern:000000000020D2B0                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:000000000020D2B8 ; char *textdomain(const char *domainname)
extern:000000000020D2B8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020D2B8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020D2C0 ; int fclose(FILE *stream)
extern:000000000020D2C0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020D2C0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020D2C8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020D2C8                 extrn bindtextdomain:near
extern:000000000020D2C8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020D2C8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020D2D0 ; char *stpcpy(char *dest, const char *src)
extern:000000000020D2D0                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:000000000020D2D0                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:000000000020D2D8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020D2D8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020D2D8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020D2E0 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020D2E0                 extrn __ctype_get_mb_cur_max:near
extern:000000000020D2E0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020D2E0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020D2E8 ; size_t strlen(const char *s)
extern:000000000020D2E8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020D2E8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020D2F0                 extrn __stack_chk_fail:near
extern:000000000020D2F0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020D2F0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020D2F8 ; __uid_t getuid(void)
extern:000000000020D2F8                 extrn getuid:near       ; CODE XREF: _getuid↑j
extern:000000000020D2F8                                         ; DATA XREF: .got:getuid_ptr↑o
extern:000000000020D300 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020D300                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020D300                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020D308 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020D308                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020D308                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020D310 ; int dup2(int fd, int fd2)
extern:000000000020D310                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:000000000020D310                                         ; DATA XREF: .got:dup2_ptr↑o
extern:000000000020D318 ; char *strchr(const char *s, int c)
extern:000000000020D318                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020D318                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020D320 ; char *strrchr(const char *s, int c)
extern:000000000020D320                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020D320                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020D328 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020D328                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020D328                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020D330 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
extern:000000000020D330                 extrn gettimeofday:near ; CODE XREF: _gettimeofday↑j
extern:000000000020D330                                         ; DATA XREF: .got:gettimeofday_ptr↑o
extern:000000000020D338 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020D338                 extrn __assert_fail:near
extern:000000000020D338                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020D338                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020D340 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000020D340                 extrn __strtoul_internal:near
extern:000000000020D340                                         ; CODE XREF: ___strtoul_internal↑j
extern:000000000020D340                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:000000000020D348 ; void *memset(void *s, int c, size_t n)
extern:000000000020D348                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020D348                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020D350 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
extern:000000000020D350                 extrn freopen:near      ; CODE XREF: _freopen↑j
extern:000000000020D350                                         ; DATA XREF: .got:freopen_ptr↑o
extern:000000000020D358 ; int close(int fd)
extern:000000000020D358                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020D358                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020D360 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:000000000020D360                 extrn posix_fadvise:near
extern:000000000020D360                                         ; CODE XREF: _posix_fadvise↑j
extern:000000000020D360                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:000000000020D368 ; void *memchr(const void *s, int c, size_t n)
extern:000000000020D368                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:000000000020D368                                         ; DATA XREF: .got:memchr_ptr↑o
extern:000000000020D370 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020D370                 extrn __libc_start_main:near
extern:000000000020D370                                         ; CODE XREF: start+24↑p
extern:000000000020D370                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020D378 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020D378                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020D378                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020D380 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020D380                 extrn fputs_unlocked:near
extern:000000000020D380                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020D380                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020D388 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020D388                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020D388                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020D390 ; int strcmp(const char *s1, const char *s2)
extern:000000000020D390                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020D390                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020D398 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020D398                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020D398                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020D3A0 ; int fileno(FILE *stream)
extern:000000000020D3A0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020D3A0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020D3A8 ; __gid_t getgid(void)
extern:000000000020D3A8                 extrn getgid:near       ; CODE XREF: _getgid↑j
extern:000000000020D3A8                                         ; DATA XREF: .got:getgid_ptr↑o
extern:000000000020D3B0 ; void *malloc(size_t size)
extern:000000000020D3B0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020D3B0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020D3B8 ; int fflush(FILE *stream)
extern:000000000020D3B8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020D3B8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020D3C0 ; char *nl_langinfo(nl_item item)
extern:000000000020D3C0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020D3C0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020D3C8 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020D3C8                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020D3C8                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020D3D0 ; int _freading(FILE *fp)
extern:000000000020D3D0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020D3D0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020D3D8 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020D3D8                 extrn fwrite_unlocked:near
extern:000000000020D3D8                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020D3D8                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020D3E0 ; void *realloc(void *ptr, size_t size)
extern:000000000020D3E0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020D3E0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020D3E8 ; FILE *fdopen(int fd, const char *modes)
extern:000000000020D3E8                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000020D3E8                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000020D3F0 ; char *setlocale(int category, const char *locale)
extern:000000000020D3F0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020D3F0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020D3F8                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020D3F8                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020D400 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:000000000020D400                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:000000000020D400                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:000000000020D408 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020D408                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020D408                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020D410                 extrn __explicit_bzero_chk:near
extern:000000000020D410                                         ; CODE XREF: ___explicit_bzero_chk↑j
extern:000000000020D410                                         ; DATA XREF: .got:__explicit_bzero_chk_ptr↑o
extern:000000000020D418 ; int open(const char *file, int oflag, ...)
extern:000000000020D418                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020D418                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020D420 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020D420                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020D420                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020D428 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000020D428                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000020D428                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000020D430 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:000000000020D430                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:000000000020D430                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:000000000020D438 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020D438                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020D438                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020D440 ; __pid_t getppid(void)
extern:000000000020D440                 extrn getppid:near      ; CODE XREF: _getppid↑j
extern:000000000020D440                                         ; DATA XREF: .got:getppid_ptr↑o
extern:000000000020D448 ; void __noreturn exit(int status)
extern:000000000020D448                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020D448                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020D450 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020D450                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020D450                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020D458                 extrn __fprintf_chk:near
extern:000000000020D458                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020D458                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020D460 ; int mbsinit(const mbstate_t *ps)
extern:000000000020D460                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020D460                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020D468 ; int iswprint(wint_t wc)
extern:000000000020D468                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020D468                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020D470 ; int __fastcall __cxa_finalize(void *)
extern:000000000020D470                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020D470                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020D470                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020D478 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020D478                 extrn __ctype_b_loc:near
extern:000000000020D478                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020D478                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020D480                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020D480                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020D488                 extrn __gmon_start__:near ; weak
extern:000000000020D488                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020D488                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020D490                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020D490                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020D490
extern:000000000020D490
extern:000000000020D490                 end start
