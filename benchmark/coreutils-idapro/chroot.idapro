LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : A442AB60B1543E516B0C2621E68DCE3C0B4830C632D3ACE2A0932A5B946A6C68
LOAD:0000000000000000 ; Input MD5    : 14C767F460537D7C7B91F308BAB6CE52
LOAD:0000000000000000 ; Input CRC32  : 77908433
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/chroot
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'chroot.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'userspec.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xgetgroups.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'mgetgroups.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2BB90h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7DF0h                ; Size in file image
LOAD:00000000000000D8                 dq 7DF0h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 8AB0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 208AB0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 5D0h                 ; Size in file image
LOAD:0000000000000110                 dq 788h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 8BD8h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 208BD8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 6ED8h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 6ED8h                ; Physical address
LOAD:00000000000001B0                 dq 27Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 27Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 8AB0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 208AB0h              ; Physical address
LOAD:0000000000000220                 dq 550h                 ; Size in file image
LOAD:0000000000000228                 dq 550h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0B8h, 2Eh, 83h, 0E4h, 0B1h, 0EBh, 0FDh, 9Fh, 0D5h, 0E8h ; Desc
LOAD:0000000000000284                 db 8Fh, 0D4h, 0BBh, 1Ch, 26h, 0DEh, 60h, 0FEh, 94h, 6Bh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 42h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 42h, 43h, 48h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aEndgrent - offset byte_9D0, 12h, 0, 0, \ ; "endgrent"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aGetenv - offset byte_9D0, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_9D0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_9D0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aStrncmp - offset byte_9D0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aItmDeregistert - offset byte_9D0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aExit - offset byte_9D0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aChroot - offset byte_9D0, 12h, 0, 0, \ ; "chroot"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFpending - offset byte_9D0, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_9D0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFclose - offset byte_9D0, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aGetpwuid - offset byte_9D0, 12h, 0, 0, \ ; "getpwuid"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aBindtextdomain - offset byte_9D0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aDcgettext - offset byte_9D0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_9D0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrlen - offset byte_9D0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aChdir - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "chdir"
LOAD:0000000000000490                            0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStackChkFail - offset byte_9D0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aGetoptLong - offset byte_9D0, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aMbrtowc - offset byte_9D0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrchr - offset byte_9D0, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aGetgrgid - offset byte_9D0, 12h, 0, 0, \ ; "getgrgid"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrrchr - offset byte_9D0, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aLseek - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000538                            0>
LOAD:0000000000000550                 Elf64_Sym <offset aAssertFail - offset byte_9D0, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMemset - offset byte_9D0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aCanonicalizeFi - offset byte_9D0, 12h, 0, 0, \ ; "canonicalize_file_name"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aSetgroups - offset byte_9D0, 12h, 0, 0, \ ; "setgroups"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aLibcStartMain - offset byte_9D0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMemcmp - offset byte_9D0, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFputsUnlocked - offset byte_9D0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aCalloc - offset byte_9D0, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aStrcmp - offset byte_9D0, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aGetpwnam - offset byte_9D0, 12h, 0, 0, \ ; "getpwnam"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aGmonStart - offset byte_9D0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aMemcpy - offset byte_9D0, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aGetgrnam - offset byte_9D0, 12h, 0, 0, \ ; "getgrnam"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFileno - offset byte_9D0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aGetgroups - offset byte_9D0, 12h, 0, 0, \ ; "getgroups"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMalloc - offset byte_9D0, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFflush - offset byte_9D0, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aNlLanginfo - offset byte_9D0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aEndpwent - offset byte_9D0, 12h, 0, 0, \ ; "endpwent"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aFreading - offset byte_9D0, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aRealloc - offset byte_9D0, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aSetlocale - offset byte_9D0, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aPrintfChk - offset byte_9D0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aError - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000778                            0>
LOAD:0000000000000790                 Elf64_Sym <offset aSetgid - offset byte_9D0, 12h, 0, 0, \ ; "setgid"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aGetgrouplist - offset byte_9D0, 12h, 0, 0, \ ; "getgrouplist"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFseeko - offset byte_9D0, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aStrtok - offset byte_9D0, 12h, 0, 0, \ ; "strtok"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aStrtoul - offset byte_9D0, 12h, 0, 0, \ ; "strtoul"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aExecvp - offset byte_9D0, 12h, 0, 0, \ ; "execvp"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aCxaAtexit - offset byte_9D0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aExit+1 - offset byte_9D0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aFwrite - offset byte_9D0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aFprintfChk - offset byte_9D0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aItmRegistertmc - offset byte_9D0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aSetuid - offset byte_9D0, 12h, 0, 0, \ ; "setuid"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aMbsinit - offset byte_9D0, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aIswprint - offset byte_9D0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aCxaFinalize - offset byte_9D0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aCtypeBLoc - offset byte_9D0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aStdout - offset byte_9D0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000910                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000928                 Elf64_Sym <offset aProgname - offset byte_9D0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000928                            offset __bss_start, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aProgramInvocat - offset byte_9D0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000940                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000958                 Elf64_Sym <offset aPrognameFull - offset byte_9D0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000958                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000970                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_9D0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000970                            offset __bss_start, 8>
LOAD:0000000000000988                 Elf64_Sym <offset aStderr - offset byte_9D0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000988                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000009A0                 Elf64_Sym <offset aOptind - offset byte_9D0, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000009A0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009B8                 Elf64_Sym <offset aOptarg - offset byte_9D0, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000009B8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000009D0 ; ELF String Table
LOAD:00000000000009D0 byte_9D0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009D0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000009D1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000DA8↓o
LOAD:00000000000009DB aSetuid         db 'setuid',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:00000000000009E2 aChroot         db 'chroot',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:00000000000009E9 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:00000000000009F0 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009FD aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A07 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000A0F aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000A17 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000A1E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A26 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000A30 aGetpwuid       db 'getpwuid',0         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000A39 aGetgrgid       db 'getgrgid',0         ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000A42 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A48 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000A59 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000A62 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000A6A aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000A70 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A70                                         ; LOAD:0000000000000838↑o
LOAD:0000000000000A76 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A76                                         ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000A8E aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A9C aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A9C                                         ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000AB3 aStrtok         db 'strtok',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000ABA aEndpwent       db 'endpwent',0         ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000AC3 aGetpwnam       db 'getpwnam',0         ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000ACC aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000AD3 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000ADA aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000AE1 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000AF2 aChdir          db 'chdir',0            ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000AF8 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000AFF aEndgrent       db 'endgrent',0         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B08 aSetgroups      db 'setgroups',0        ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B12 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B20 aGetgrnam       db 'getgrnam',0         ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B29 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000B30 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000B36 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000B3D aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000B44 aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000B4C aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000B53 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000B5B aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B67 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000B75 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000B7C aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000B83 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B8E aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000B95 aGetgroups      db 'getgroups',0        ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000B9F aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000BAB aExecvp         db 'execvp',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000BB2 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000BB9 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000BC0 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000BCB aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000BD2 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000BD2                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000BF0 aCanonicalizeFi db 'canonicalize_file_name',0
LOAD:0000000000000BF0                                         ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000C07 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000C16 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000C16                                         ; LOAD:00000000000003E8↑o
LOAD:0000000000000C25 aGetgrouplist   db 'getgrouplist',0     ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000C32 aSetgid         db 'setgid',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000C39 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C40 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C40                                         ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000C52 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000C59 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000C68 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000C6D aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000C78 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C88 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000C95 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000DB8↓o
LOAD:0000000000000C9F aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000DC8↓o
LOAD:0000000000000CAB aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000DD8↓o
LOAD:0000000000000CB6 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000DE8↓o
LOAD:0000000000000CC0 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000DF8↓o
LOAD:0000000000000CCC aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000CCC                                         ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000CE8 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000CF7 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000CF7                                         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000D11                 align 2
LOAD:0000000000000D12 ; ELF GNU Symbol Version Table
LOAD:0000000000000D12                 dw 0
LOAD:0000000000000D14                 dw 2                    ; endgrent@@GLIBC_2.2.5
LOAD:0000000000000D16                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000D18                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000D1A                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000D1C                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000D1E                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D20                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D22                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D24                 dw 2                    ; chroot@@GLIBC_2.2.5
LOAD:0000000000000D26                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D28                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D2A                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D2C                 dw 2                    ; getpwuid@@GLIBC_2.2.5
LOAD:0000000000000D2E                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D30                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D32                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D34                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D36                 dw 2                    ; chdir@@GLIBC_2.2.5
LOAD:0000000000000D38                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D3A                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D3C                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D3E                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000D40                 dw 2                    ; getgrgid@@GLIBC_2.2.5
LOAD:0000000000000D42                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000D44                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D46                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000D48                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D4A                 dw 2                    ; canonicalize_file_name@@GLIBC_2.2.5
LOAD:0000000000000D4C                 dw 2                    ; setgroups@@GLIBC_2.2.5
LOAD:0000000000000D4E                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D50                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D52                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D54                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 2                    ; getpwnam@@GLIBC_2.2.5
LOAD:0000000000000D5A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D5C                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D5E                 dw 2                    ; getgrnam@@GLIBC_2.2.5
LOAD:0000000000000D60                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000D62                 dw 2                    ; getgroups@@GLIBC_2.2.5
LOAD:0000000000000D64                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000D66                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000D68                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000D6A                 dw 2                    ; endpwent@@GLIBC_2.2.5
LOAD:0000000000000D6C                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000D6E                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000D70                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000D72                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000D74                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000D76                 dw 2                    ; setgid@@GLIBC_2.2.5
LOAD:0000000000000D78                 dw 2                    ; getgrouplist@@GLIBC_2.2.5
LOAD:0000000000000D7A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000D7C                 dw 2                    ; strtok@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 2                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 2                    ; execvp@@GLIBC_2.2.5
LOAD:0000000000000D82                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000D84                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000D86                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000D88                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D8A                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000D8C                 dw 2                    ; setuid@@GLIBC_2.2.5
LOAD:0000000000000D8E                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000D90                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000D92                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D94                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D96                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D98                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D9A                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D9C                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D9E                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000DA0                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000DA2                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000DA4                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000DA6                 dw 0
LOAD:0000000000000DA8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000DA8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_9D0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000DB8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_9D0, \ ; "GLIBC_2.3"
LOAD:0000000000000DB8                                10h>
LOAD:0000000000000DC8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_9D0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000DC8                                10h>
LOAD:0000000000000DD8                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_9D0, \ ; "GLIBC_2.14"
LOAD:0000000000000DD8                                10h>
LOAD:0000000000000DE8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_9D0, \ ; "GLIBC_2.4"
LOAD:0000000000000DE8                                10h>
LOAD:0000000000000DF8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_9D0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000E08 ; ELF RELA Relocation Table
LOAD:0000000000000E08                 Elf64_Rela <208AB0h, 8, 2320h> ; R_X86_64_RELATIVE +2320h
LOAD:0000000000000E20                 Elf64_Rela <208AB8h, 8, 22E0h> ; R_X86_64_RELATIVE +22E0h
LOAD:0000000000000E38                 Elf64_Rela <208AC0h, 8, 60E7h> ; R_X86_64_RELATIVE +60E7h
LOAD:0000000000000E50                 Elf64_Rela <208AE0h, 8, 60EEh> ; R_X86_64_RELATIVE +60EEh
LOAD:0000000000000E68                 Elf64_Rela <208B00h, 8, 60F7h> ; R_X86_64_RELATIVE +60F7h
LOAD:0000000000000E80                 Elf64_Rela <208B20h, 8, 6102h> ; R_X86_64_RELATIVE +6102h
LOAD:0000000000000E98                 Elf64_Rela <208B40h, 8, 6107h> ; R_X86_64_RELATIVE +6107h
LOAD:0000000000000EB0                 Elf64_Rela <208B80h, 8, 6541h> ; R_X86_64_RELATIVE +6541h
LOAD:0000000000000EC8                 Elf64_Rela <208B88h, 8, 6549h> ; R_X86_64_RELATIVE +6549h
LOAD:0000000000000EE0                 Elf64_Rela <208B90h, 8, 654Fh> ; R_X86_64_RELATIVE +654Fh
LOAD:0000000000000EF8                 Elf64_Rela <208B98h, 8, 655Ch> ; R_X86_64_RELATIVE +655Ch
LOAD:0000000000000F10                 Elf64_Rela <208BA0h, 8, 6569h> ; R_X86_64_RELATIVE +6569h
LOAD:0000000000000F28                 Elf64_Rela <208BA8h, 8, 6A20h> ; R_X86_64_RELATIVE +6A20h
LOAD:0000000000000F40                 Elf64_Rela <208BB0h, 8, 657Dh> ; R_X86_64_RELATIVE +657Dh
LOAD:0000000000000F58                 Elf64_Rela <208BB8h, 8, 6562h> ; R_X86_64_RELATIVE +6562h
LOAD:0000000000000F70                 Elf64_Rela <208BC0h, 8, 6070h> ; R_X86_64_RELATIVE +6070h
LOAD:0000000000000F88                 Elf64_Rela <208BC8h, 8, 6585h> ; R_X86_64_RELATIVE +6585h
LOAD:0000000000000FA0                 Elf64_Rela <209008h, 8, 209008h> ; R_X86_64_RELATIVE +209008h
LOAD:0000000000000FB8                 Elf64_Rela <209010h, 8, 64CAh> ; R_X86_64_RELATIVE +64CAh
LOAD:0000000000000FD0                 Elf64_Rela <209060h, 8, 209070h> ; R_X86_64_RELATIVE +209070h
LOAD:0000000000000FE8                 Elf64_Rela <209078h, 8, 209100h> ; R_X86_64_RELATIVE +209100h
LOAD:0000000000001000                 Elf64_Rela <208FC0h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001018                 Elf64_Rela <208FC8h, 1E00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001030                 Elf64_Rela <208FD0h, 2400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001048                 Elf64_Rela <208FD8h, 3C00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001060                 Elf64_Rela <208FE0h, 4000000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001078                 Elf64_Rela <209080h, 4300000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001090                 Elf64_Rela <209088h, 4200000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000010A8                 Elf64_Rela <209090h, 4800000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000010C0                 Elf64_Rela <209098h, 4900000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000010D8                 Elf64_Rela <2090A0h, 4500000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000010F0                 Elf64_Rela <2090C0h, 4700000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001108 ; ELF JMPREL Relocation Table
LOAD:0000000000001108                 Elf64_Rela <208DE0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT endgrent
LOAD:0000000000001120                 Elf64_Rela <208DE8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001138                 Elf64_Rela <208DF0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001150                 Elf64_Rela <208DF8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001168                 Elf64_Rela <208E00h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001180                 Elf64_Rela <208E08h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001198                 Elf64_Rela <208E10h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000011B0                 Elf64_Rela <208E18h, 900000007h, 0> ; R_X86_64_JUMP_SLOT chroot
LOAD:00000000000011C8                 Elf64_Rela <208E20h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000011E0                 Elf64_Rela <208E28h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000011F8                 Elf64_Rela <208E30h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001210                 Elf64_Rela <208E38h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT getpwuid
LOAD:0000000000001228                 Elf64_Rela <208E40h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001240                 Elf64_Rela <208E48h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001258                 Elf64_Rela <208E50h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001270                 Elf64_Rela <208E58h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001288                 Elf64_Rela <208E60h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT chdir
LOAD:00000000000012A0                 Elf64_Rela <208E68h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000012B8                 Elf64_Rela <208E70h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000012D0                 Elf64_Rela <208E78h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000012E8                 Elf64_Rela <208E80h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001300                 Elf64_Rela <208E88h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT getgrgid
LOAD:0000000000001318                 Elf64_Rela <208E90h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001330                 Elf64_Rela <208E98h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001348                 Elf64_Rela <208EA0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001360                 Elf64_Rela <208EA8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001378                 Elf64_Rela <208EB0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT canonicalize_file_name
LOAD:0000000000001390                 Elf64_Rela <208EB8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT setgroups
LOAD:00000000000013A8                 Elf64_Rela <208EC0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000013C0                 Elf64_Rela <208EC8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000013D8                 Elf64_Rela <208ED0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000013F0                 Elf64_Rela <208ED8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001408                 Elf64_Rela <208EE0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT getpwnam
LOAD:0000000000001420                 Elf64_Rela <208EE8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001438                 Elf64_Rela <208EF0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT getgrnam
LOAD:0000000000001450                 Elf64_Rela <208EF8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001468                 Elf64_Rela <208F00h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT getgroups
LOAD:0000000000001480                 Elf64_Rela <208F08h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001498                 Elf64_Rela <208F10h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000014B0                 Elf64_Rela <208F18h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000014C8                 Elf64_Rela <208F20h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT endpwent
LOAD:00000000000014E0                 Elf64_Rela <208F28h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000014F8                 Elf64_Rela <208F30h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001510                 Elf64_Rela <208F38h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001528                 Elf64_Rela <208F40h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001540                 Elf64_Rela <208F48h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001558                 Elf64_Rela <208F50h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT setgid
LOAD:0000000000001570                 Elf64_Rela <208F58h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT getgrouplist
LOAD:0000000000001588                 Elf64_Rela <208F60h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000015A0                 Elf64_Rela <208F68h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT strtok
LOAD:00000000000015B8                 Elf64_Rela <208F70h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:00000000000015D0                 Elf64_Rela <208F78h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT execvp
LOAD:00000000000015E8                 Elf64_Rela <208F80h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001600                 Elf64_Rela <208F88h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001618                 Elf64_Rela <208F90h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001630                 Elf64_Rela <208F98h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001648                 Elf64_Rela <208FA0h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT setuid
LOAD:0000000000001660                 Elf64_Rela <208FA8h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001678                 Elf64_Rela <208FB0h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001690                 Elf64_Rela <208FB8h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001690 LOAD            ends
LOAD:0000000000001690
.init:00000000000016A8 ; ===========================================================================
.init:00000000000016A8
.init:00000000000016A8 ; Segment type: Pure code
.init:00000000000016A8 ; Segment permissions: Read/Execute
.init:00000000000016A8 _init           segment dword public 'CODE' use64
.init:00000000000016A8                 assume cs:_init
.init:00000000000016A8                 ;org 16A8h
.init:00000000000016A8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000016A8
.init:00000000000016A8 ; =============== S U B R O U T I N E =======================================
.init:00000000000016A8
.init:00000000000016A8
.init:00000000000016A8                 public _init_proc
.init:00000000000016A8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000016A8                 sub     rsp, 8          ; _init
.init:00000000000016AC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000016B3                 test    rax, rax
.init:00000000000016B6                 jz      short loc_16BA
.init:00000000000016B8                 call    rax ; __gmon_start__
.init:00000000000016BA
.init:00000000000016BA loc_16BA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000016BA                 add     rsp, 8
.init:00000000000016BE                 retn
.init:00000000000016BE _init_proc      endp
.init:00000000000016BE
.init:00000000000016BE _init           ends
.init:00000000000016BE
LOAD:00000000000016BF ; ===========================================================================
LOAD:00000000000016BF
LOAD:00000000000016BF ; Segment type: Pure code
LOAD:00000000000016BF ; Segment permissions: Read/Execute
LOAD:00000000000016BF LOAD            segment byte public 'CODE' use64
LOAD:00000000000016BF                 assume cs:LOAD
LOAD:00000000000016BF                 ;org 16BFh
LOAD:00000000000016BF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016BF                 align 20h
LOAD:00000000000016BF LOAD            ends
LOAD:00000000000016BF
.plt:00000000000016C0 ; ===========================================================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Segment type: Pure code
.plt:00000000000016C0 ; Segment permissions: Read/Execute
.plt:00000000000016C0 _plt            segment para public 'CODE' use64
.plt:00000000000016C0                 assume cs:_plt
.plt:00000000000016C0                 ;org 16C0h
.plt:00000000000016C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0
.plt:00000000000016C0 sub_16C0        proc near               ; CODE XREF: .plt:00000000000016DB↓j
.plt:00000000000016C0                                         ; .plt:00000000000016EB↓j ...
.plt:00000000000016C0 ; __unwind {
.plt:00000000000016C0                 push    cs:qword_208DD0
.plt:00000000000016C6                 jmp     cs:qword_208DD8
.plt:00000000000016C6 sub_16C0        endp
.plt:00000000000016C6
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016CC                 align 10h
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; void endgrent(void)
.plt:00000000000016D0 _endgrent       proc near               ; CODE XREF: parse_with_separator:loc_4857↓p
.plt:00000000000016D0                                         ; parse_with_separator:loc_49D1↓p ...
.plt:00000000000016D0                 jmp     cs:endgrent_ptr
.plt:00000000000016D0 _endgrent       endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    0
.plt:00000000000016DB                 jmp     sub_16C0
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; char *getenv(const char *name)
.plt:00000000000016E0 _getenv         proc near               ; CODE XREF: main+510↓p
.plt:00000000000016E0                 jmp     cs:getenv_ptr
.plt:00000000000016E0 _getenv         endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    1
.plt:00000000000016EB                 jmp     sub_16C0
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; void free(void *ptr)
.plt:00000000000016F0 _free           proc near               ; CODE XREF: main+1B5↓p
.plt:00000000000016F0                                         ; main+263↓p ...
.plt:00000000000016F0                 jmp     cs:free_ptr
.plt:00000000000016F0 _free           endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    2
.plt:00000000000016FB                 jmp     sub_16C0
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: noreturn thunk
.plt:0000000000001700
.plt:0000000000001700 ; void __noreturn abort(void)
.plt:0000000000001700 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001700                                         ; quotearg_buffer_restyled:def_2C81↓p ...
.plt:0000000000001700                 jmp     cs:abort_ptr
.plt:0000000000001700 _abort          endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    3
.plt:000000000000170B                 jmp     sub_16C0
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int *__errno_location(void)
.plt:0000000000001710 ___errno_location proc near             ; CODE XREF: main+24A↓p
.plt:0000000000001710                                         ; main+312↓p ...
.plt:0000000000001710                 jmp     cs:__errno_location_ptr
.plt:0000000000001710 ___errno_location endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    4
.plt:000000000000171B                 jmp     sub_16C0
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001720 _strncmp        proc near               ; CODE XREF: usage+2AC↓p
.plt:0000000000001720                                         ; usage+36D↓p
.plt:0000000000001720                 jmp     cs:strncmp_ptr
.plt:0000000000001720 _strncmp        endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    5
.plt:000000000000172B                 jmp     sub_16C0
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: noreturn thunk
.plt:0000000000001730
.plt:0000000000001730 ; void __noreturn _exit(int status)
.plt:0000000000001730 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001730                 jmp     cs:_exit_ptr
.plt:0000000000001730 __exit          endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    6
.plt:000000000000173B                 jmp     sub_16C0
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; int chroot(const char *path)
.plt:0000000000001740 _chroot         proc near               ; CODE XREF: main+217↓p
.plt:0000000000001740                                         ; main+26B↓p
.plt:0000000000001740                 jmp     cs:chroot_ptr
.plt:0000000000001740 _chroot         endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    7
.plt:000000000000174B                 jmp     sub_16C0
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; size_t __fpending(FILE *fp)
.plt:0000000000001750 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001750                 jmp     cs:__fpending_ptr
.plt:0000000000001750 ___fpending     endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    8
.plt:000000000000175B                 jmp     sub_16C0
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; char *textdomain(const char *domainname)
.plt:0000000000001760 _textdomain     proc near               ; CODE XREF: main+81↓p
.plt:0000000000001760                 jmp     cs:textdomain_ptr
.plt:0000000000001760 _textdomain     endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    9
.plt:000000000000176B                 jmp     sub_16C0
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; int fclose(FILE *stream)
.plt:0000000000001770 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001770                                         ; rpl_fclose+6B↓j
.plt:0000000000001770                 jmp     cs:fclose_ptr
.plt:0000000000001770 _fclose         endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    0Ah
.plt:000000000000177B                 jmp     sub_16C0
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; struct passwd *getpwuid(__uid_t uid)
.plt:0000000000001780 _getpwuid       proc near               ; CODE XREF: main:loc_1ED9↓p
.plt:0000000000001780                                         ; main:loc_2067↓p ...
.plt:0000000000001780                 jmp     cs:getpwuid_ptr
.plt:0000000000001780 _getpwuid       endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    0Bh
.plt:000000000000178B                 jmp     sub_16C0
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001790 _bindtextdomain proc near               ; CODE XREF: main+75↓p
.plt:0000000000001790                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001790 _bindtextdomain endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    0Ch
.plt:000000000000179B                 jmp     sub_16C0
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000017A0 _dcgettext      proc near               ; CODE XREF: main+242↓p
.plt:00000000000017A0                                         ; main+39E↓p ...
.plt:00000000000017A0                 jmp     cs:dcgettext_ptr
.plt:00000000000017A0 _dcgettext      endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    0Dh
.plt:00000000000017AB                 jmp     sub_16C0
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000017B0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000017B0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000017B0 ___ctype_get_mb_cur_max endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    0Eh
.plt:00000000000017BB                 jmp     sub_16C0
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; size_t strlen(const char *s)
.plt:00000000000017C0 _strlen         proc near               ; CODE XREF: main+14A↓p
.plt:00000000000017C0                                         ; quotearg_buffer_restyled+157↓p ...
.plt:00000000000017C0                 jmp     cs:strlen_ptr
.plt:00000000000017C0 _strlen         endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    0Fh
.plt:00000000000017CB                 jmp     sub_16C0
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; int chdir(const char *path)
.plt:00000000000017D0 _chdir          proc near               ; CODE XREF: main+22B↓p
.plt:00000000000017D0                 jmp     cs:chdir_ptr
.plt:00000000000017D0 _chdir          endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    10h
.plt:00000000000017DB                 jmp     sub_16C0
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: noreturn thunk
.plt:00000000000017E0
.plt:00000000000017E0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_215B↓p
.plt:00000000000017E0                                         ; parse_additional_groups:loc_259B↓p ...
.plt:00000000000017E0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000017E0 ___stack_chk_fail endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    11h
.plt:00000000000017EB                 jmp     sub_16C0
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000017F0 _getopt_long    proc near               ; CODE XREF: main+B2↓p
.plt:00000000000017F0                 jmp     cs:getopt_long_ptr
.plt:00000000000017F0 _getopt_long    endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    12h
.plt:00000000000017FB                 jmp     sub_16C0
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001800 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001800                 jmp     cs:mbrtowc_ptr
.plt:0000000000001800 _mbrtowc        endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    13h
.plt:000000000000180B                 jmp     sub_16C0
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; char *strchr(const char *s, int c)
.plt:0000000000001810 _strchr         proc near               ; CODE XREF: parse_user_spec+2B↓p
.plt:0000000000001810                                         ; parse_user_spec+64↓p ...
.plt:0000000000001810                 jmp     cs:strchr_ptr
.plt:0000000000001810 _strchr         endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    14h
.plt:000000000000181B                 jmp     sub_16C0
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; struct group *getgrgid(__gid_t gid)
.plt:0000000000001820 _getgrgid       proc near               ; CODE XREF: parse_with_separator+2DF↓p
.plt:0000000000001820                 jmp     cs:getgrgid_ptr
.plt:0000000000001820 _getgrgid       endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    15h
.plt:000000000000182B                 jmp     sub_16C0
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; char *strrchr(const char *s, int c)
.plt:0000000000001830 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001830                 jmp     cs:strrchr_ptr
.plt:0000000000001830 _strrchr        endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    16h
.plt:000000000000183B                 jmp     sub_16C0
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001840 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001840                                         ; rpl_fseeko+3B↓p
.plt:0000000000001840                 jmp     cs:lseek_ptr
.plt:0000000000001840 _lseek          endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    17h
.plt:000000000000184B                 jmp     sub_16C0
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: noreturn thunk
.plt:0000000000001850
.plt:0000000000001850 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001850 ___assert_fail  proc near               ; CODE XREF: xstrtoul+39F↓p
.plt:0000000000001850                 jmp     cs:__assert_fail_ptr
.plt:0000000000001850 ___assert_fail  endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    18h
.plt:000000000000185B                 jmp     sub_16C0
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001860 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001860                                         ; xzalloc+12↓j
.plt:0000000000001860                 jmp     cs:memset_ptr
.plt:0000000000001860 _memset         endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    19h
.plt:000000000000186B                 jmp     sub_16C0
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; char *canonicalize_file_name(const char *name)
.plt:0000000000001870 _canonicalize_file_name proc near       ; CODE XREF: main+184↓p
.plt:0000000000001870                 jmp     cs:canonicalize_file_name_ptr
.plt:0000000000001870 _canonicalize_file_name endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    1Ah
.plt:000000000000187B                 jmp     sub_16C0
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; int setgroups(size_t n, const __gid_t *groups)
.plt:0000000000001880 _setgroups      proc near               ; CODE XREF: main+30B↓p
.plt:0000000000001880                 jmp     cs:setgroups_ptr
.plt:0000000000001880 _setgroups      endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    1Bh
.plt:000000000000188B                 jmp     sub_16C0
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001890 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001890                 jmp     cs:memcmp_ptr
.plt:0000000000001890 _memcmp         endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    1Ch
.plt:000000000000189B                 jmp     sub_16C0
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000018A0 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:00000000000018A0                                         ; usage+C5↓p ...
.plt:00000000000018A0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000018A0 _fputs_unlocked endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    1Dh
.plt:00000000000018AB                 jmp     sub_16C0
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000018B0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000018B0                 jmp     cs:calloc_ptr
.plt:00000000000018B0 _calloc         endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    1Eh
.plt:00000000000018BB                 jmp     sub_16C0
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; int strcmp(const char *s1, const char *s2)
.plt:00000000000018C0 _strcmp         proc near               ; CODE XREF: main+1A0↓p
.plt:00000000000018C0                 jmp     cs:strcmp_ptr
.plt:00000000000018C0 _strcmp         endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    1Fh
.plt:00000000000018CB                 jmp     sub_16C0
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; struct passwd *getpwnam(const char *name)
.plt:00000000000018D0 _getpwnam       proc near               ; CODE XREF: parse_with_separator+196↓p
.plt:00000000000018D0                 jmp     cs:getpwnam_ptr
.plt:00000000000018D0 _getpwnam       endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    20h ; ' '
.plt:00000000000018DB                 jmp     sub_16C0
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000018E0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000018E0                 jmp     cs:memcpy_ptr
.plt:00000000000018E0 _memcpy         endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    21h ; '!'
.plt:00000000000018EB                 jmp     sub_16C0
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; struct group *getgrnam(const char *name)
.plt:00000000000018F0 _getgrnam       proc near               ; CODE XREF: parse_additional_groups+B2↓p
.plt:00000000000018F0                                         ; parse_additional_groups+19B↓p ...
.plt:00000000000018F0                 jmp     cs:getgrnam_ptr
.plt:00000000000018F0 _getgrnam       endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    22h ; '"'
.plt:00000000000018FB                 jmp     sub_16C0
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; int fileno(FILE *stream)
.plt:0000000000001900 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001900                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001900                 jmp     cs:fileno_ptr
.plt:0000000000001900 _fileno         endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    23h ; '#'
.plt:000000000000190B                 jmp     sub_16C0
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; int getgroups(int size, __gid_t list[])
.plt:0000000000001910 _getgroups      proc near               ; CODE XREF: mgetgroups+FC↓p
.plt:0000000000001910                                         ; mgetgroups+157↓p ...
.plt:0000000000001910                 jmp     cs:getgroups_ptr
.plt:0000000000001910 _getgroups      endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    24h ; '$'
.plt:000000000000191B                 jmp     sub_16C0
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; void *malloc(size_t size)
.plt:0000000000001920 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001920                 jmp     cs:malloc_ptr
.plt:0000000000001920 _malloc         endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    25h ; '%'
.plt:000000000000192B                 jmp     sub_16C0
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; int fflush(FILE *stream)
.plt:0000000000001930 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001930                                         ; rpl_fflush+3B↓j
.plt:0000000000001930                 jmp     cs:fflush_ptr
.plt:0000000000001930 _fflush         endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    26h ; '&'
.plt:000000000000193B                 jmp     sub_16C0
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; char *nl_langinfo(nl_item item)
.plt:0000000000001940 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001940                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001940 _nl_langinfo    endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    27h ; '''
.plt:000000000000194B                 jmp     sub_16C0
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; void endpwent(void)
.plt:0000000000001950 _endpwent       proc near               ; CODE XREF: parse_with_separator:loc_494F↓p
.plt:0000000000001950                                         ; parse_with_separator+1EB↓p ...
.plt:0000000000001950                 jmp     cs:endpwent_ptr
.plt:0000000000001950 _endpwent       endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    28h ; '('
.plt:000000000000195B                 jmp     sub_16C0
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; int __freading(FILE *fp)
.plt:0000000000001960 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001960                                         ; rpl_fflush+9↓p
.plt:0000000000001960                 jmp     cs:__freading_ptr
.plt:0000000000001960 ___freading     endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    29h ; ')'
.plt:000000000000196B                 jmp     sub_16C0
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001970 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001970                                         ; realloc_groupbuf+1D↓j ...
.plt:0000000000001970                 jmp     cs:realloc_ptr
.plt:0000000000001970 _realloc        endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    2Ah ; '*'
.plt:000000000000197B                 jmp     sub_16C0
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; char *setlocale(int category, const char *locale)
.plt:0000000000001980 _setlocale      proc near               ; CODE XREF: main+62↓p
.plt:0000000000001980                                         ; usage+293↓p ...
.plt:0000000000001980                 jmp     cs:setlocale_ptr
.plt:0000000000001980 _setlocale      endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    2Bh ; '+'
.plt:000000000000198B                 jmp     sub_16C0
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000001990                                         ; usage+123↓p ...
.plt:0000000000001990                 jmp     cs:__printf_chk_ptr
.plt:0000000000001990 ___printf_chk   endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    2Ch ; ','
.plt:000000000000199B                 jmp     sub_16C0
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000019A0 _error          proc near               ; CODE XREF: main+25B↓p
.plt:00000000000019A0                                         ; main+3B1↓p ...
.plt:00000000000019A0                 jmp     cs:error_ptr
.plt:00000000000019A0 _error          endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    2Dh ; '-'
.plt:00000000000019AB                 jmp     sub_16C0
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int setgid(__gid_t gid)
.plt:00000000000019B0 _setgid         proc near               ; CODE XREF: main+349↓p
.plt:00000000000019B0                 jmp     cs:setgid_ptr
.plt:00000000000019B0 _setgid         endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    2Eh ; '.'
.plt:00000000000019BB                 jmp     sub_16C0
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; int getgrouplist(const char *user, __gid_t group, __gid_t *groups, int *ngroups)
.plt:00000000000019C0 _getgrouplist   proc near               ; CODE XREF: mgetgroups+66↓p
.plt:00000000000019C0                 jmp     cs:getgrouplist_ptr
.plt:00000000000019C0 _getgrouplist   endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    2Fh ; '/'
.plt:00000000000019CB                 jmp     sub_16C0
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000019D0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_5E8A↓j
.plt:00000000000019D0                 jmp     cs:fseeko_ptr
.plt:00000000000019D0 _fseeko         endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    30h ; '0'
.plt:00000000000019DB                 jmp     sub_16C0
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; char *strtok(char *s, const char *delim)
.plt:00000000000019E0 _strtok         proc near               ; CODE XREF: parse_additional_groups+52↓p
.plt:00000000000019E0                                         ; parse_additional_groups+E5↓p
.plt:00000000000019E0                 jmp     cs:strtok_ptr
.plt:00000000000019E0 _strtok         endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    31h ; '1'
.plt:00000000000019EB                 jmp     sub_16C0
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:00000000000019F0 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:00000000000019F0                 jmp     cs:strtoul_ptr
.plt:00000000000019F0 _strtoul        endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    32h ; '2'
.plt:00000000000019FB                 jmp     sub_16C0
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; int execvp(const char *file, char *const argv[])
.plt:0000000000001A00 _execvp         proc near               ; CODE XREF: main+374↓p
.plt:0000000000001A00                 jmp     cs:execvp_ptr
.plt:0000000000001A00 _execvp         endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    33h ; '3'
.plt:0000000000001A0B                 jmp     sub_16C0
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001A10 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001A10                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001A10 ___cxa_atexit   endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    34h ; '4'
.plt:0000000000001A1B                 jmp     sub_16C0
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: noreturn thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; void __noreturn exit(int status)
.plt:0000000000001A20 _exit           proc near               ; CODE XREF: main+122↓p
.plt:0000000000001A20                                         ; usage+58↓p
.plt:0000000000001A20                 jmp     cs:exit_ptr
.plt:0000000000001A20 _exit           endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    35h ; '5'
.plt:0000000000001A2B                 jmp     sub_16C0
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001A30 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001A30                 jmp     cs:fwrite_ptr
.plt:0000000000001A30 _fwrite         endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    36h ; '6'
.plt:0000000000001A3B                 jmp     sub_16C0
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001A40                                         ; version_etc_arn+37↓p ...
.plt:0000000000001A40                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001A40 ___fprintf_chk  endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    37h ; '7'
.plt:0000000000001A4B                 jmp     sub_16C0
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; int setuid(__uid_t uid)
.plt:0000000000001A50 _setuid         proc near               ; CODE XREF: main+35F↓p
.plt:0000000000001A50                 jmp     cs:setuid_ptr
.plt:0000000000001A50 _setuid         endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    38h ; '8'
.plt:0000000000001A5B                 jmp     sub_16C0
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001A60 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001A60                 jmp     cs:mbsinit_ptr
.plt:0000000000001A60 _mbsinit        endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    39h ; '9'
.plt:0000000000001A6B                 jmp     sub_16C0
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; int iswprint(wint_t wc)
.plt:0000000000001A70 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001A70                 jmp     cs:iswprint_ptr
.plt:0000000000001A70 _iswprint       endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    3Ah ; ':'
.plt:0000000000001A7B                 jmp     sub_16C0
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001A80 ___ctype_b_loc  proc near               ; CODE XREF: parse_additional_groups:loc_24A0↓p
.plt:0000000000001A80                                         ; quotearg_buffer_restyled+513↓p ...
.plt:0000000000001A80                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001A80 ___ctype_b_loc  endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    3Bh ; ';'
.plt:0000000000001A8B                 jmp     sub_16C0
.plt:0000000000001A8B ; } // starts at 16C0
.plt:0000000000001A8B _plt            ends
.plt:0000000000001A8B
.plt.got:0000000000001A90 ; ===========================================================================
.plt.got:0000000000001A90
.plt.got:0000000000001A90 ; Segment type: Pure code
.plt.got:0000000000001A90 ; Segment permissions: Read/Execute
.plt.got:0000000000001A90 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001A90                 assume cs:_plt_got
.plt.got:0000000000001A90                 ;org 1A90h
.plt.got:0000000000001A90                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001A90
.plt.got:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001A90
.plt.got:0000000000001A90 ; Attributes: thunk
.plt.got:0000000000001A90
.plt.got:0000000000001A90 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001A90 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001A90 ; __unwind {
.plt.got:0000000000001A90                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001A90 __cxa_finalize  endp
.plt.got:0000000000001A90
.plt.got:0000000000001A90 ; ---------------------------------------------------------------------------
.plt.got:0000000000001A96                 align 8
.plt.got:0000000000001A96 ; } // starts at 1A90
.plt.got:0000000000001A96 _plt_got        ends
.plt.got:0000000000001A96
LOAD:0000000000001A98 ; ===========================================================================
LOAD:0000000000001A98
LOAD:0000000000001A98 ; Segment type: Pure code
LOAD:0000000000001A98 ; Segment permissions: Read/Execute
LOAD:0000000000001A98 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001A98                 assume cs:LOAD
LOAD:0000000000001A98                 ;org 1A98h
LOAD:0000000000001A98                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001A98                 align 20h
LOAD:0000000000001A98 LOAD            ends
LOAD:0000000000001A98
.text:0000000000001AA0 ; ===========================================================================
.text:0000000000001AA0
.text:0000000000001AA0 ; Segment type: Pure code
.text:0000000000001AA0 ; Segment permissions: Read/Execute
.text:0000000000001AA0 _text           segment para public 'CODE' use64
.text:0000000000001AA0                 assume cs:_text
.text:0000000000001AA0                 ;org 1AA0h
.text:0000000000001AA0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001AA0
.text:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AA0
.text:0000000000001AA0
.text:0000000000001AA0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001AA0                 public main
.text:0000000000001AA0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001AA0
.text:0000000000001AA0 ptr             = qword ptr -70h
.text:0000000000001AA0 uid             = dword ptr -60h
.text:0000000000001AA0 gid             = dword ptr -5Ch
.text:0000000000001AA0 groups          = qword ptr -58h
.text:0000000000001AA0 n               = qword ptr -50h
.text:0000000000001AA0 var_48          = qword ptr -48h
.text:0000000000001AA0 var_40          = qword ptr -40h
.text:0000000000001AA0
.text:0000000000001AA0 ; __unwind {
.text:0000000000001AA0                 push    r15
.text:0000000000001AA2                 push    r14
.text:0000000000001AA4                 xor     r14d, r14d
.text:0000000000001AA7                 push    r13
.text:0000000000001AA9                 push    r12
.text:0000000000001AAB                 xor     r13d, r13d
.text:0000000000001AAE                 push    rbp
.text:0000000000001AAF                 push    rbx
.text:0000000000001AB0                 mov     ebp, edi
.text:0000000000001AB2                 mov     rbx, rsi
.text:0000000000001AB5                 xor     r12d, r12d
.text:0000000000001AB8                 sub     rsp, 48h
.text:0000000000001ABC                 mov     rdi, [rsi]
.text:0000000000001ABF                 mov     rax, fs:28h
.text:0000000000001AC8                 mov     [rsp+78h+var_40], rax
.text:0000000000001ACD                 xor     eax, eax
.text:0000000000001ACF                 mov     [rsp+78h+uid], 0FFFFFFFFh
.text:0000000000001AD7                 mov     [rsp+78h+gid], 0FFFFFFFFh
.text:0000000000001ADF                 mov     [rsp+78h+groups], 0
.text:0000000000001AE8                 mov     [rsp+78h+n], 0
.text:0000000000001AF1                 call    set_program_name
.text:0000000000001AF6                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001AFD                 mov     edi, 6          ; category
.text:0000000000001B02                 call    _setlocale
.text:0000000000001B07                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001B0E                 lea     rdi, domainname ; "coreutils"
.text:0000000000001B15                 call    _bindtextdomain
.text:0000000000001B1A                 lea     rdi, domainname ; "coreutils"
.text:0000000000001B21                 call    _textdomain
.text:0000000000001B26                 lea     rdi, close_stdout
.text:0000000000001B2D                 mov     cs:exit_failure, 7Dh ; '}'
.text:0000000000001B37                 call    atexit
.text:0000000000001B3C
.text:0000000000001B3C loc_1B3C:                               ; CODE XREF: main+E1↓j
.text:0000000000001B3C                                         ; main+137↓j ...
.text:0000000000001B3C                 lea     rcx, long_opts  ; longopts
.text:0000000000001B43                 lea     rdx, shortopts  ; "+"
.text:0000000000001B4A                 xor     r8d, r8d        ; longind
.text:0000000000001B4D                 mov     rsi, rbx        ; argv
.text:0000000000001B50                 mov     edi, ebp        ; argc
.text:0000000000001B52                 call    _getopt_long
.text:0000000000001B57                 cmp     eax, 0FFFFFFFFh
.text:0000000000001B5A                 jz      loc_1C0E
.text:0000000000001B60                 cmp     eax, 100h
.text:0000000000001B65                 jz      short loc_1BD0
.text:0000000000001B67                 jle     short loc_1B88
.text:0000000000001B69                 cmp     eax, 101h
.text:0000000000001B6E                 jz      short loc_1BE0
.text:0000000000001B70                 cmp     eax, 102h
.text:0000000000001B75                 jnz     loc_2151
.text:0000000000001B7B                 mov     r14d, 1
.text:0000000000001B81                 jmp     short loc_1B3C
.text:0000000000001B81 ; ---------------------------------------------------------------------------
.text:0000000000001B83                 align 8
.text:0000000000001B88
.text:0000000000001B88 loc_1B88:                               ; CODE XREF: main+C7↑j
.text:0000000000001B88                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001B8D                 jnz     loc_2122
.text:0000000000001B93                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B9A                 mov     rcx, cs:Version
.text:0000000000001BA1                 lea     r8, aRolandMcgrath ; "Roland McGrath"
.text:0000000000001BA8                 lea     rdx, unk_602A
.text:0000000000001BAF                 lea     rsi, aChroot_0  ; "chroot"
.text:0000000000001BB6                 xor     r9d, r9d
.text:0000000000001BB9                 xor     eax, eax
.text:0000000000001BBB                 call    version_etc
.text:0000000000001BC0                 xor     edi, edi        ; status
.text:0000000000001BC2                 call    _exit
.text:0000000000001BC2 ; ---------------------------------------------------------------------------
.text:0000000000001BC7                 align 10h
.text:0000000000001BD0
.text:0000000000001BD0 loc_1BD0:                               ; CODE XREF: main+C5↑j
.text:0000000000001BD0                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:0000000000001BD7                 jmp     loc_1B3C
.text:0000000000001BD7 ; ---------------------------------------------------------------------------
.text:0000000000001BDC                 align 20h
.text:0000000000001BE0
.text:0000000000001BE0 loc_1BE0:                               ; CODE XREF: main+CE↑j
.text:0000000000001BE0                 mov     r12, cs:optarg@@GLIBC_2_2_5
.text:0000000000001BE7                 mov     rdi, r12        ; s
.text:0000000000001BEA                 call    _strlen
.text:0000000000001BEF                 test    rax, rax
.text:0000000000001BF2                 jz      loc_1B3C
.text:0000000000001BF8                 lea     rax, [r12+rax-1]
.text:0000000000001BFD                 cmp     byte ptr [rax], 3Ah ; ':'
.text:0000000000001C00                 jnz     loc_1B3C
.text:0000000000001C06                 mov     byte ptr [rax], 0
.text:0000000000001C09                 jmp     loc_1B3C
.text:0000000000001C0E ; ---------------------------------------------------------------------------
.text:0000000000001C0E
.text:0000000000001C0E loc_1C0E:                               ; CODE XREF: main+BA↑j
.text:0000000000001C0E                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001C15                 cmp     eax, ebp
.text:0000000000001C17                 jge     loc_2130
.text:0000000000001C1D                 mov     r15, [rbx+rax*8]
.text:0000000000001C21                 mov     rdi, r15        ; name
.text:0000000000001C24                 call    _canonicalize_file_name
.text:0000000000001C29                 test    rax, rax
.text:0000000000001C2C                 mov     rdx, rax
.text:0000000000001C2F                 jz      short loc_1C52
.text:0000000000001C31                 lea     rdi, aLibs+6    ; s1
.text:0000000000001C38                 mov     rsi, rax        ; s2
.text:0000000000001C3B                 mov     [rsp+78h+ptr], rax
.text:0000000000001C40                 call    _strcmp
.text:0000000000001C45                 test    eax, eax
.text:0000000000001C47                 mov     rdx, [rsp+78h+ptr]
.text:0000000000001C4C                 jz      loc_1D00
.text:0000000000001C52
.text:0000000000001C52 loc_1C52:                               ; CODE XREF: main+18F↑j
.text:0000000000001C52                 mov     rdi, rdx        ; ptr
.text:0000000000001C55                 call    _free
.text:0000000000001C5A                 test    r14b, r14b
.text:0000000000001C5D                 jnz     loc_21D2
.text:0000000000001C63                 test    r12, r12
.text:0000000000001C66                 jz      short loc_1C7F
.text:0000000000001C68                 lea     rdx, [rsp+78h+gid]
.text:0000000000001C6D                 lea     rsi, [rsp+78h+uid]
.text:0000000000001C72                 xor     r8d, r8d
.text:0000000000001C75                 xor     ecx, ecx
.text:0000000000001C77                 mov     rdi, r12        ; s
.text:0000000000001C7A                 call    parse_user_spec
.text:0000000000001C7F
.text:0000000000001C7F loc_1C7F:                               ; CODE XREF: main+1C6↑j
.text:0000000000001C7F                 mov     edi, [rsp+78h+uid] ; uid
.text:0000000000001C83                 cmp     edi, 0FFFFFFFFh
.text:0000000000001C86                 jz      loc_1EFF
.text:0000000000001C8C                 test    r13, r13
.text:0000000000001C8F                 jz      loc_20D9
.text:0000000000001C95                 cmp     [rsp+78h+gid], 0FFFFFFFFh
.text:0000000000001C9A                 jz      loc_2067
.text:0000000000001CA0
.text:0000000000001CA0 loc_1CA0:                               ; CODE XREF: main+5CF↓j
.text:0000000000001CA0                 mov     [rsp+78h+ptr], 0
.text:0000000000001CA9
.text:0000000000001CA9 loc_1CA9:                               ; CODE XREF: main+46B↓j
.text:0000000000001CA9                 cmp     byte ptr [r13+0], 0
.text:0000000000001CAE                 jnz     loc_204E
.text:0000000000001CB4
.text:0000000000001CB4 loc_1CB4:                               ; CODE XREF: main+478↓j
.text:0000000000001CB4                                         ; main+486↓j ...
.text:0000000000001CB4                 mov     rdi, r15        ; path
.text:0000000000001CB7                 call    _chroot
.text:0000000000001CBC                 test    eax, eax
.text:0000000000001CBE                 jnz     loc_200F
.text:0000000000001CC4
.text:0000000000001CC4 loc_1CC4:                               ; CODE XREF: main+284↓j
.text:0000000000001CC4                 lea     rdi, aLibs+6    ; path
.text:0000000000001CCB                 call    _chdir
.text:0000000000001CD0                 test    eax, eax
.text:0000000000001CD2                 jz      short loc_1D26
.text:0000000000001CD4                 lea     rsi, msgid      ; "cannot chdir to root directory"
.text:0000000000001CDB                 mov     edx, 5          ; category
.text:0000000000001CE0                 xor     edi, edi        ; domainname
.text:0000000000001CE2                 call    _dcgettext
.text:0000000000001CE7                 mov     rbx, rax
.text:0000000000001CEA                 call    ___errno_location
.text:0000000000001CEF                 mov     esi, [rax]      ; errnum
.text:0000000000001CF1                 mov     rdx, rbx        ; format
.text:0000000000001CF4                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001CF9                 xor     eax, eax
.text:0000000000001CFB                 call    _error
.text:0000000000001D00
.text:0000000000001D00 loc_1D00:                               ; CODE XREF: main+1AC↑j
.text:0000000000001D00                 mov     rdi, rdx        ; ptr
.text:0000000000001D03                 call    _free
.text:0000000000001D08                 mov     rdi, r15        ; path
.text:0000000000001D0B                 call    _chroot
.text:0000000000001D10                 test    eax, eax
.text:0000000000001D12                 jnz     loc_200F
.text:0000000000001D18                 test    r14b, r14b
.text:0000000000001D1B                 mov     [rsp+78h+ptr], 0
.text:0000000000001D24                 jz      short loc_1CC4
.text:0000000000001D26
.text:0000000000001D26 loc_1D26:                               ; CODE XREF: main+232↑j
.text:0000000000001D26                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001D2D                 lea     edx, [rax+1]
.text:0000000000001D30                 cmp     edx, ebp
.text:0000000000001D32                 jz      loc_1FA9
.text:0000000000001D38                 lea     rbx, [rbx+rax*8+8]
.text:0000000000001D3D
.text:0000000000001D3D loc_1D3D:                               ; CODE XREF: main+534↓j
.text:0000000000001D3D                 test    r12, r12
.text:0000000000001D40                 jz      loc_1E7B
.text:0000000000001D46                 lea     rdx, [rsp+78h+gid]
.text:0000000000001D4B                 lea     rsi, [rsp+78h+uid]
.text:0000000000001D50                 xor     r8d, r8d
.text:0000000000001D53                 xor     ecx, ecx
.text:0000000000001D55                 mov     rdi, r12        ; s
.text:0000000000001D58                 call    parse_user_spec
.text:0000000000001D5D                 test    rax, rax
.text:0000000000001D60                 mov     rbp, rax
.text:0000000000001D63                 jz      loc_1E7B
.text:0000000000001D69                 mov     edi, [rsp+78h+uid] ; uid
.text:0000000000001D6D                 cmp     edi, 0FFFFFFFFh
.text:0000000000001D70                 jz      loc_1F4A
.text:0000000000001D76
.text:0000000000001D76 loc_1D76:                               ; CODE XREF: main+3E2↓j
.text:0000000000001D76                 test    r13, r13
.text:0000000000001D79                 jz      loc_1ED9
.text:0000000000001D7F                 cmp     [rsp+78h+gid], 0FFFFFFFFh
.text:0000000000001D84                 jz      loc_1ED9
.text:0000000000001D8A                 mov     rbp, [rsp+78h+groups]
.text:0000000000001D8F                 mov     [rsp+78h+var_48], 0
.text:0000000000001D98
.text:0000000000001D98 loc_1D98:                               ; CODE XREF: main+3F9↓j
.text:0000000000001D98                 cmp     byte ptr [r13+0], 0
.text:0000000000001D9D                 jnz     loc_1F72
.text:0000000000001DA3
.text:0000000000001DA3 loc_1DA3:                               ; CODE XREF: main+434↓j
.text:0000000000001DA3                                         ; main+4F9↓j ...
.text:0000000000001DA3                 mov     rdi, [rsp+78h+n] ; n
.text:0000000000001DA8                 mov     rsi, rbp        ; groups
.text:0000000000001DAB                 call    _setgroups
.text:0000000000001DB0                 mov     ebp, eax
.text:0000000000001DB2                 call    ___errno_location
.text:0000000000001DB7                 test    ebp, ebp
.text:0000000000001DB9                 mov     r12, rax
.text:0000000000001DBC                 jnz     loc_21AC
.text:0000000000001DC2
.text:0000000000001DC2 loc_1DC2:                               ; CODE XREF: main+42E↓j
.text:0000000000001DC2                                         ; main+55F↓j
.text:0000000000001DC2                 mov     rdi, [rsp+78h+var_48] ; ptr
.text:0000000000001DC7                 call    _free
.text:0000000000001DCC                 mov     rdi, [rsp+78h+groups] ; ptr
.text:0000000000001DD1                 call    _free
.text:0000000000001DD6                 mov     ebp, [rsp+78h+gid]
.text:0000000000001DDA                 call    ___errno_location
.text:0000000000001DDF                 mov     r12, rax
.text:0000000000001DE2                 cmp     ebp, 0FFFFFFFFh
.text:0000000000001DE5                 jz      short loc_1DF6
.text:0000000000001DE7                 mov     edi, ebp        ; gid
.text:0000000000001DE9                 call    _setgid
.text:0000000000001DEE                 test    eax, eax
.text:0000000000001DF0                 jnz     loc_2186
.text:0000000000001DF6
.text:0000000000001DF6 loc_1DF6:                               ; CODE XREF: main+345↑j
.text:0000000000001DF6                 mov     edi, [rsp+78h+uid] ; uid
.text:0000000000001DFA                 cmp     edi, 0FFFFFFFFh
.text:0000000000001DFD                 jz      short loc_1E0C
.text:0000000000001DFF                 call    _setuid
.text:0000000000001E04                 test    eax, eax
.text:0000000000001E06                 jnz     loc_2160
.text:0000000000001E0C
.text:0000000000001E0C loc_1E0C:                               ; CODE XREF: main+35D↑j
.text:0000000000001E0C                 mov     rdi, [rbx]      ; file
.text:0000000000001E0F                 mov     rsi, rbx        ; argv
.text:0000000000001E12                 xor     ebp, ebp
.text:0000000000001E14                 call    _execvp
.text:0000000000001E19                 cmp     dword ptr [r12], 2
.text:0000000000001E1E                 mov     rdi, [rbx]
.text:0000000000001E21                 setz    bpl
.text:0000000000001E25                 call    quote
.text:0000000000001E2A                 lea     rsi, aFailedToRunCom ; "failed to run command %s"
.text:0000000000001E31                 mov     edx, 5          ; category
.text:0000000000001E36                 xor     edi, edi        ; domainname
.text:0000000000001E38                 mov     rbx, rax
.text:0000000000001E3B                 add     ebp, 7Eh ; '~'
.text:0000000000001E3E                 call    _dcgettext
.text:0000000000001E43                 mov     esi, [r12]      ; errnum
.text:0000000000001E47                 mov     rdx, rax        ; format
.text:0000000000001E4A                 mov     rcx, rbx
.text:0000000000001E4D                 xor     edi, edi        ; status
.text:0000000000001E4F                 xor     eax, eax
.text:0000000000001E51                 call    _error
.text:0000000000001E56
.text:0000000000001E56 loc_1E56:                               ; CODE XREF: main+504↓j
.text:0000000000001E56                 mov     rcx, [rsp+78h+var_40]
.text:0000000000001E5B                 xor     rcx, fs:28h
.text:0000000000001E64                 mov     eax, ebp
.text:0000000000001E66                 jnz     loc_215B
.text:0000000000001E6C                 add     rsp, 48h
.text:0000000000001E70                 pop     rbx
.text:0000000000001E71                 pop     rbp
.text:0000000000001E72                 pop     r12
.text:0000000000001E74                 pop     r13
.text:0000000000001E76                 pop     r14
.text:0000000000001E78                 pop     r15
.text:0000000000001E7A                 retn
.text:0000000000001E7B ; ---------------------------------------------------------------------------
.text:0000000000001E7B
.text:0000000000001E7B loc_1E7B:                               ; CODE XREF: main+2A0↑j
.text:0000000000001E7B                                         ; main+2C3↑j
.text:0000000000001E7B                 mov     edi, [rsp+78h+uid]
.text:0000000000001E7F                 cmp     edi, 0FFFFFFFFh
.text:0000000000001E82                 jnz     loc_1D76
.text:0000000000001E88
.text:0000000000001E88 loc_1E88:                               ; CODE XREF: main+45D↓j
.text:0000000000001E88                                         ; main+4AF↓j ...
.text:0000000000001E88                 test    r13, r13
.text:0000000000001E8B                 mov     rbp, [rsp+78h+groups]
.text:0000000000001E90                 mov     [rsp+78h+var_48], 0
.text:0000000000001E99                 jnz     loc_1D98
.text:0000000000001E9F                 cmp     [rsp+78h+ptr], 0
.text:0000000000001EA5                 mov     r13d, [rsp+78h+gid]
.text:0000000000001EAA                 setnz   r12b
.text:0000000000001EAE                 cmp     r13d, 0FFFFFFFFh
.text:0000000000001EB2                 setnz   al
.text:0000000000001EB5                 and     r12d, eax
.text:0000000000001EB8                 call    ___errno_location
.text:0000000000001EBD                 test    r12b, r12b
.text:0000000000001EC0                 mov     r14, rax
.text:0000000000001EC3                 jnz     loc_1FD9
.text:0000000000001EC9
.text:0000000000001EC9 loc_1EC9:                               ; CODE XREF: main+657↓j
.text:0000000000001EC9                 cmp     [rsp+78h+uid], 0FFFFFFFFh
.text:0000000000001ECE                 jz      loc_1DC2
.text:0000000000001ED4                 jmp     loc_1DA3
.text:0000000000001ED9 ; ---------------------------------------------------------------------------
.text:0000000000001ED9
.text:0000000000001ED9 loc_1ED9:                               ; CODE XREF: main+2D9↑j
.text:0000000000001ED9                                         ; main+2E4↑j
.text:0000000000001ED9                 call    _getpwuid
.text:0000000000001EDE                 test    rax, rax
.text:0000000000001EE1                 jz      loc_2090
.text:0000000000001EE7                 cmp     [rsp+78h+gid], 0FFFFFFFFh
.text:0000000000001EEC                 jnz     short loc_1EF5
.text:0000000000001EEE                 mov     edx, [rax+14h]
.text:0000000000001EF1                 mov     [rsp+78h+gid], edx
.text:0000000000001EF5
.text:0000000000001EF5 loc_1EF5:                               ; CODE XREF: main+44C↑j
.text:0000000000001EF5                 mov     rax, [rax]
.text:0000000000001EF8                 mov     [rsp+78h+ptr], rax
.text:0000000000001EFD                 jmp     short loc_1E88
.text:0000000000001EFF ; ---------------------------------------------------------------------------
.text:0000000000001EFF
.text:0000000000001EFF loc_1EFF:                               ; CODE XREF: main+1E6↑j
.text:0000000000001EFF                 mov     [rsp+78h+ptr], 0
.text:0000000000001F08
.text:0000000000001F08 loc_1F08:                               ; CODE XREF: main+5EB↓j
.text:0000000000001F08                 test    r13, r13
.text:0000000000001F0B                 jnz     loc_1CA9
.text:0000000000001F11                 mov     esi, [rsp+78h+gid]
.text:0000000000001F15                 cmp     esi, 0FFFFFFFFh
.text:0000000000001F18                 jz      loc_1CB4
.text:0000000000001F1E                 mov     rdi, [rsp+78h+ptr]
.text:0000000000001F23                 test    rdi, rdi
.text:0000000000001F26                 jz      loc_1CB4
.text:0000000000001F2C                 lea     rdx, [rsp+78h+groups]
.text:0000000000001F31                 call    xgetgroups
.text:0000000000001F36                 test    eax, eax
.text:0000000000001F38                 jle     loc_1CB4
.text:0000000000001F3E                 cdqe
.text:0000000000001F40                 mov     [rsp+78h+n], rax
.text:0000000000001F45                 jmp     loc_1CB4
.text:0000000000001F4A ; ---------------------------------------------------------------------------
.text:0000000000001F4A
.text:0000000000001F4A loc_1F4A:                               ; CODE XREF: main+2D0↑j
.text:0000000000001F4A                 cmp     [rsp+78h+gid], 0FFFFFFFFh
.text:0000000000001F4F                 jnz     loc_1E88
.text:0000000000001F55                 call    ___errno_location
.text:0000000000001F5A                 mov     esi, [rax]      ; errnum
.text:0000000000001F5C                 lea     rdx, format     ; format
.text:0000000000001F63                 mov     rcx, rbp
.text:0000000000001F66                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001F6B                 xor     eax, eax
.text:0000000000001F6D                 call    _error
.text:0000000000001F72
.text:0000000000001F72 loc_1F72:                               ; CODE XREF: main+2FD↑j
.text:0000000000001F72                 xor     ecx, ecx
.text:0000000000001F74                 cmp     [rsp+78h+n], 0
.text:0000000000001F7A                 lea     rdx, [rsp+78h+n]
.text:0000000000001F7F                 lea     rsi, [rsp+78h+var_48]
.text:0000000000001F84                 mov     rdi, r13
.text:0000000000001F87                 setz    cl
.text:0000000000001F8A                 call    parse_additional_groups
.text:0000000000001F8F                 test    eax, eax
.text:0000000000001F91                 jz      short loc_2005
.text:0000000000001F93                 cmp     [rsp+78h+n], 0
.text:0000000000001F99                 jnz     loc_1DA3
.text:0000000000001F9F                 mov     ebp, 7Dh ; '}'
.text:0000000000001FA4                 jmp     loc_1E56
.text:0000000000001FA9 ; ---------------------------------------------------------------------------
.text:0000000000001FA9
.text:0000000000001FA9 loc_1FA9:                               ; CODE XREF: main+292↑j
.text:0000000000001FA9                 lea     rdi, name       ; "SHELL"
.text:0000000000001FB0                 call    _getenv
.text:0000000000001FB5                 test    rax, rax
.text:0000000000001FB8                 jz      loc_20CD
.text:0000000000001FBE
.text:0000000000001FBE loc_1FBE:                               ; CODE XREF: main+634↓j
.text:0000000000001FBE                 mov     [rbx], rax
.text:0000000000001FC1                 lea     rax, aI         ; "-i"
.text:0000000000001FC8                 mov     qword ptr [rbx+10h], 0
.text:0000000000001FD0                 mov     [rbx+8], rax
.text:0000000000001FD4                 jmp     loc_1D3D
.text:0000000000001FD9 ; ---------------------------------------------------------------------------
.text:0000000000001FD9
.text:0000000000001FD9 loc_1FD9:                               ; CODE XREF: main+423↑j
.text:0000000000001FD9                 mov     rdi, [rsp+78h+ptr]
.text:0000000000001FDE                 lea     rdx, [rsp+78h+var_48]
.text:0000000000001FE3                 mov     esi, r13d
.text:0000000000001FE6                 call    xgetgroups
.text:0000000000001FEB                 test    eax, eax
.text:0000000000001FED                 jle     loc_20F1
.text:0000000000001FF3                 cmp     [rsp+78h+uid], 0FFFFFFFFh
.text:0000000000001FF8                 cdqe
.text:0000000000001FFA                 mov     [rsp+78h+n], rax
.text:0000000000001FFF                 jz      loc_1DC2
.text:0000000000002005
.text:0000000000002005 loc_2005:                               ; CODE XREF: main+4F1↑j
.text:0000000000002005                 mov     rbp, [rsp+78h+var_48]
.text:000000000000200A                 jmp     loc_1DA3
.text:000000000000200F ; ---------------------------------------------------------------------------
.text:000000000000200F
.text:000000000000200F loc_200F:                               ; CODE XREF: main+21E↑j
.text:000000000000200F                                         ; main+272↑j
.text:000000000000200F                 mov     rsi, r15
.text:0000000000002012                 mov     edi, 4
.text:0000000000002017                 call    quotearg_style
.text:000000000000201C                 lea     rsi, aCannotChangeRo ; "cannot change root directory to %s"
.text:0000000000002023                 mov     edx, 5          ; category
.text:0000000000002028                 xor     edi, edi        ; domainname
.text:000000000000202A                 mov     rbp, rax
.text:000000000000202D                 call    _dcgettext
.text:0000000000002032                 mov     rbx, rax
.text:0000000000002035                 call    ___errno_location
.text:000000000000203A                 mov     esi, [rax]      ; errnum
.text:000000000000203C                 mov     rcx, rbp
.text:000000000000203F                 mov     rdx, rbx        ; format
.text:0000000000002042                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002047                 xor     eax, eax
.text:0000000000002049                 call    _error
.text:000000000000204E
.text:000000000000204E loc_204E:                               ; CODE XREF: main+20E↑j
.text:000000000000204E                 lea     rdx, [rsp+78h+n]
.text:0000000000002053                 lea     rsi, [rsp+78h+groups]
.text:0000000000002058                 xor     ecx, ecx
.text:000000000000205A                 mov     rdi, r13
.text:000000000000205D                 call    parse_additional_groups
.text:0000000000002062                 jmp     loc_1CB4
.text:0000000000002067 ; ---------------------------------------------------------------------------
.text:0000000000002067
.text:0000000000002067 loc_2067:                               ; CODE XREF: main+1FA↑j
.text:0000000000002067                 call    _getpwuid
.text:000000000000206C                 test    rax, rax
.text:000000000000206F                 jz      loc_1CA0
.text:0000000000002075
.text:0000000000002075 loc_2075:                               ; CODE XREF: main+641↓j
.text:0000000000002075                 cmp     [rsp+78h+gid], 0FFFFFFFFh
.text:000000000000207A                 jnz     short loc_2083
.text:000000000000207C                 mov     edx, [rax+14h]
.text:000000000000207F                 mov     [rsp+78h+gid], edx
.text:0000000000002083
.text:0000000000002083 loc_2083:                               ; CODE XREF: main+5DA↑j
.text:0000000000002083                 mov     rax, [rax]
.text:0000000000002086                 mov     [rsp+78h+ptr], rax
.text:000000000000208B                 jmp     loc_1F08
.text:0000000000002090 ; ---------------------------------------------------------------------------
.text:0000000000002090
.text:0000000000002090 loc_2090:                               ; CODE XREF: main+441↑j
.text:0000000000002090                 cmp     [rsp+78h+gid], 0FFFFFFFFh
.text:0000000000002095                 jnz     loc_1E88
.text:000000000000209B                 lea     rsi, aNoGroupSpecifi ; "no group specified for unknown uid: %d"
.text:00000000000020A2                 mov     edx, 5          ; category
.text:00000000000020A7                 xor     edi, edi        ; domainname
.text:00000000000020A9                 mov     ebp, [rsp+78h+uid]
.text:00000000000020AD                 call    _dcgettext
.text:00000000000020B2                 mov     rbx, rax
.text:00000000000020B5                 call    ___errno_location
.text:00000000000020BA                 mov     esi, [rax]      ; errnum
.text:00000000000020BC                 mov     ecx, ebp
.text:00000000000020BE                 mov     rdx, rbx        ; format
.text:00000000000020C1                 mov     edi, 7Dh ; '}'  ; status
.text:00000000000020C6                 xor     eax, eax
.text:00000000000020C8                 call    _error
.text:00000000000020CD
.text:00000000000020CD loc_20CD:                               ; CODE XREF: main+518↑j
.text:00000000000020CD                 lea     rax, aBinSh     ; "/bin/sh"
.text:00000000000020D4                 jmp     loc_1FBE
.text:00000000000020D9 ; ---------------------------------------------------------------------------
.text:00000000000020D9
.text:00000000000020D9 loc_20D9:                               ; CODE XREF: main+1EF↑j
.text:00000000000020D9                 call    _getpwuid
.text:00000000000020DE                 test    rax, rax
.text:00000000000020E1                 jnz     short loc_2075
.text:00000000000020E3                 mov     [rsp+78h+ptr], 0
.text:00000000000020EC                 jmp     loc_1CB4
.text:00000000000020F1 ; ---------------------------------------------------------------------------
.text:00000000000020F1
.text:00000000000020F1 loc_20F1:                               ; CODE XREF: main+54D↑j
.text:00000000000020F1                 cmp     [rsp+78h+n], 0
.text:00000000000020F7                 jnz     loc_1EC9
.text:00000000000020FD                 lea     rsi, aFailedToGetSup ; "failed to get supplemental groups"
.text:0000000000002104                 mov     edx, 5          ; category
.text:0000000000002109                 xor     edi, edi        ; domainname
.text:000000000000210B                 call    _dcgettext
.text:0000000000002110                 mov     esi, [r14]      ; errnum
.text:0000000000002113                 mov     rdx, rax        ; format
.text:0000000000002116                 mov     edi, 7Dh ; '}'  ; status
.text:000000000000211B                 xor     eax, eax
.text:000000000000211D                 call    _error
.text:0000000000002122
.text:0000000000002122 loc_2122:                               ; CODE XREF: main+ED↑j
.text:0000000000002122                 cmp     eax, 0FFFFFF7Eh
.text:0000000000002127                 jnz     short loc_2151
.text:0000000000002129                 xor     edi, edi        ; status
.text:000000000000212B                 call    usage
.text:0000000000002130 ; ---------------------------------------------------------------------------
.text:0000000000002130
.text:0000000000002130 loc_2130:                               ; CODE XREF: main+177↑j
.text:0000000000002130                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000002137                 mov     edx, 5          ; category
.text:000000000000213C                 xor     edi, edi        ; domainname
.text:000000000000213E                 call    _dcgettext
.text:0000000000002143                 xor     esi, esi        ; errnum
.text:0000000000002145                 mov     rdx, rax        ; format
.text:0000000000002148                 xor     edi, edi        ; status
.text:000000000000214A                 xor     eax, eax
.text:000000000000214C                 call    _error
.text:0000000000002151
.text:0000000000002151 loc_2151:                               ; CODE XREF: main+D5↑j
.text:0000000000002151                                         ; main+687↑j
.text:0000000000002151                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002156                 call    usage
.text:000000000000215B ; ---------------------------------------------------------------------------
.text:000000000000215B
.text:000000000000215B loc_215B:                               ; CODE XREF: main+3C6↑j
.text:000000000000215B                 call    ___stack_chk_fail
.text:0000000000002160 ; ---------------------------------------------------------------------------
.text:0000000000002160
.text:0000000000002160 loc_2160:                               ; CODE XREF: main+366↑j
.text:0000000000002160                 lea     rsi, aFailedToSetUse ; "failed to set user-ID"
.text:0000000000002167                 mov     edx, 5          ; category
.text:000000000000216C                 xor     edi, edi        ; domainname
.text:000000000000216E                 call    _dcgettext
.text:0000000000002173                 mov     esi, [r12]      ; errnum
.text:0000000000002177                 mov     rdx, rax        ; format
.text:000000000000217A                 mov     edi, 7Dh ; '}'  ; status
.text:000000000000217F                 xor     eax, eax
.text:0000000000002181                 call    _error
.text:0000000000002186
.text:0000000000002186 loc_2186:                               ; CODE XREF: main+350↑j
.text:0000000000002186                 lea     rsi, aFailedToSetGro ; "failed to set group-ID"
.text:000000000000218D                 mov     edx, 5          ; category
.text:0000000000002192                 xor     edi, edi        ; domainname
.text:0000000000002194                 call    _dcgettext
.text:0000000000002199                 mov     esi, [r12]      ; errnum
.text:000000000000219D                 mov     rdx, rax        ; format
.text:00000000000021A0                 mov     edi, 7Dh ; '}'  ; status
.text:00000000000021A5                 xor     eax, eax
.text:00000000000021A7                 call    _error
.text:00000000000021AC
.text:00000000000021AC loc_21AC:                               ; CODE XREF: main+31C↑j
.text:00000000000021AC                 lea     rsi, aFailedToSetSup ; "failed to set supplemental groups"
.text:00000000000021B3                 mov     edx, 5          ; category
.text:00000000000021B8                 xor     edi, edi        ; domainname
.text:00000000000021BA                 call    _dcgettext
.text:00000000000021BF                 mov     esi, [r12]      ; errnum
.text:00000000000021C3                 mov     rdx, rax        ; format
.text:00000000000021C6                 mov     edi, 7Dh ; '}'  ; status
.text:00000000000021CB                 xor     eax, eax
.text:00000000000021CD                 call    _error
.text:00000000000021D2
.text:00000000000021D2 loc_21D2:                               ; CODE XREF: main+1BD↑j
.text:00000000000021D2                 lea     rsi, aLibs+6    ; "/"
.text:00000000000021D9                 mov     edi, 4
.text:00000000000021DE                 call    quotearg_style
.text:00000000000021E3                 lea     rsi, aOptionSkipChdi ; "option --skip-chdir only permitted if N"...
.text:00000000000021EA                 mov     rbx, rax
.text:00000000000021ED                 mov     edx, 5          ; category
.text:00000000000021F2                 xor     edi, edi        ; domainname
.text:00000000000021F4                 call    _dcgettext
.text:00000000000021F9                 xor     edi, edi        ; status
.text:00000000000021FB                 mov     rdx, rax        ; format
.text:00000000000021FE                 mov     rcx, rbx
.text:0000000000002201                 xor     esi, esi        ; errnum
.text:0000000000002203                 xor     eax, eax
.text:0000000000002205                 call    _error
.text:000000000000220A                 mov     edi, 7Dh ; '}'  ; status
.text:000000000000220F                 call    usage
.text:000000000000220F ; } // starts at 1AA0
.text:000000000000220F main            endp
.text:000000000000220F
.text:000000000000220F ; ---------------------------------------------------------------------------
.text:0000000000002214                 align 20h
.text:0000000000002220
.text:0000000000002220 ; =============== S U B R O U T I N E =======================================
.text:0000000000002220
.text:0000000000002220 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002220
.text:0000000000002220 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002220                 public start
.text:0000000000002220 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002220 ; __unwind {
.text:0000000000002220                 xor     ebp, ebp
.text:0000000000002222                 mov     r9, rdx         ; rtld_fini
.text:0000000000002225                 pop     rsi             ; argc
.text:0000000000002226                 mov     rdx, rsp        ; ubp_av
.text:0000000000002229                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000222D                 push    rax
.text:000000000000222E                 push    rsp             ; stack_end
.text:000000000000222F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002236                 lea     rcx, __libc_csu_init ; init
.text:000000000000223D                 lea     rdi, main       ; main
.text:0000000000002244                 call    cs:__libc_start_main_ptr
.text:000000000000224A                 hlt
.text:000000000000224A ; } // starts at 2220
.text:000000000000224A start           endp
.text:000000000000224A
.text:000000000000224A ; ---------------------------------------------------------------------------
.text:000000000000224B                 align 10h
.text:0000000000002250
.text:0000000000002250 ; =============== S U B R O U T I N E =======================================
.text:0000000000002250
.text:0000000000002250 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002250
.text:0000000000002250 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2303↓p
.text:0000000000002250                 lea     rdi, __bss_start
.text:0000000000002257                 push    rbp
.text:0000000000002258                 lea     rax, __bss_start
.text:000000000000225F                 cmp     rax, rdi
.text:0000000000002262                 mov     rbp, rsp
.text:0000000000002265                 jz      short loc_2280
.text:0000000000002267                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000226E                 test    rax, rax
.text:0000000000002271                 jz      short loc_2280
.text:0000000000002273                 pop     rbp
.text:0000000000002274                 jmp     rax
.text:0000000000002274 ; ---------------------------------------------------------------------------
.text:0000000000002276                 align 20h
.text:0000000000002280
.text:0000000000002280 loc_2280:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002280                                         ; deregister_tm_clones+21↑j
.text:0000000000002280                 pop     rbp
.text:0000000000002281                 retn
.text:0000000000002281 deregister_tm_clones endp
.text:0000000000002281
.text:0000000000002281 ; ---------------------------------------------------------------------------
.text:0000000000002282                 align 10h
.text:0000000000002290
.text:0000000000002290 ; =============== S U B R O U T I N E =======================================
.text:0000000000002290
.text:0000000000002290 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002290
.text:0000000000002290 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002290                 lea     rdi, __bss_start
.text:0000000000002297                 lea     rsi, __bss_start
.text:000000000000229E                 push    rbp
.text:000000000000229F                 sub     rsi, rdi
.text:00000000000022A2                 mov     rbp, rsp
.text:00000000000022A5                 sar     rsi, 3
.text:00000000000022A9                 mov     rax, rsi
.text:00000000000022AC                 shr     rax, 3Fh
.text:00000000000022B0                 add     rsi, rax
.text:00000000000022B3                 sar     rsi, 1
.text:00000000000022B6                 jz      short loc_22D0
.text:00000000000022B8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000022BF                 test    rax, rax
.text:00000000000022C2                 jz      short loc_22D0
.text:00000000000022C4                 pop     rbp
.text:00000000000022C5                 jmp     rax
.text:00000000000022C5 ; ---------------------------------------------------------------------------
.text:00000000000022C7                 align 10h
.text:00000000000022D0
.text:00000000000022D0 loc_22D0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000022D0                                         ; register_tm_clones+32↑j
.text:00000000000022D0                 pop     rbp
.text:00000000000022D1                 retn
.text:00000000000022D1 register_tm_clones endp
.text:00000000000022D1
.text:00000000000022D1 ; ---------------------------------------------------------------------------
.text:00000000000022D2                 align 20h
.text:00000000000022E0
.text:00000000000022E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022E0
.text:00000000000022E0 ; Attributes: info_from_lumina
.text:00000000000022E0
.text:00000000000022E0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000022E0                 cmp     cs:completed_7697, 0
.text:00000000000022E7                 jnz     short locret_2318
.text:00000000000022E9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000022F1                 push    rbp
.text:00000000000022F2                 mov     rbp, rsp
.text:00000000000022F5                 jz      short loc_2303
.text:00000000000022F7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000022FE                 call    __cxa_finalize
.text:0000000000002303
.text:0000000000002303 loc_2303:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002303                 call    deregister_tm_clones
.text:0000000000002308                 mov     cs:completed_7697, 1
.text:000000000000230F                 pop     rbp
.text:0000000000002310                 retn
.text:0000000000002310 ; ---------------------------------------------------------------------------
.text:0000000000002311                 align 8
.text:0000000000002318
.text:0000000000002318 locret_2318:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002318                 rep retn
.text:0000000000002318 __do_global_dtors_aux endp
.text:0000000000002318
.text:0000000000002318 ; ---------------------------------------------------------------------------
.text:000000000000231A                 align 20h
.text:0000000000002320
.text:0000000000002320 ; =============== S U B R O U T I N E =======================================
.text:0000000000002320
.text:0000000000002320 ; Attributes: bp-based frame
.text:0000000000002320
.text:0000000000002320 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002320                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002320                 push    rbp
.text:0000000000002321                 mov     rbp, rsp
.text:0000000000002324                 pop     rbp
.text:0000000000002325                 jmp     register_tm_clones
.text:0000000000002325 frame_dummy     endp
.text:0000000000002325
.text:0000000000002325 ; ---------------------------------------------------------------------------
.text:000000000000232A                 align 10h
.text:0000000000002330
.text:0000000000002330 ; =============== S U B R O U T I N E =======================================
.text:0000000000002330
.text:0000000000002330
.text:0000000000002330 parse_additional_groups proc near       ; CODE XREF: main+4EA↑p
.text:0000000000002330                                         ; main+5BD↑p
.text:0000000000002330
.text:0000000000002330 var_90          = qword ptr -90h
.text:0000000000002330 var_88          = qword ptr -88h
.text:0000000000002330 ptr             = qword ptr -80h
.text:0000000000002330 var_78          = qword ptr -78h
.text:0000000000002330 var_70          = qword ptr -70h
.text:0000000000002330 var_68          = qword ptr -68h
.text:0000000000002330 var_5D          = byte ptr -5Dh
.text:0000000000002330 var_5C          = dword ptr -5Ch
.text:0000000000002330 var_50          = qword ptr -50h
.text:0000000000002330 var_48          = qword ptr -48h
.text:0000000000002330 var_40          = qword ptr -40h
.text:0000000000002330
.text:0000000000002330 ; __unwind {
.text:0000000000002330                 push    r15
.text:0000000000002332                 push    r14
.text:0000000000002334                 push    r13
.text:0000000000002336                 push    r12
.text:0000000000002338                 push    rbp
.text:0000000000002339                 push    rbx
.text:000000000000233A                 sub     rsp, 68h
.text:000000000000233E                 mov     [rsp+98h+var_68], rdi
.text:0000000000002343                 mov     [rsp+98h+var_88], rsi
.text:0000000000002348                 mov     [rsp+98h+var_78], rdx
.text:000000000000234D                 mov     [rsp+98h+var_5C], ecx
.text:0000000000002351                 mov     [rsp+98h+var_5D], cl
.text:0000000000002355                 mov     [rsp+98h+var_50], 0
.text:000000000000235E                 mov     rax, fs:28h
.text:0000000000002367                 mov     [rsp+98h+var_40], rax
.text:000000000000236C                 xor     eax, eax
.text:000000000000236E                 call    xstrdup
.text:0000000000002373                 lea     rsi, delim      ; ","
.text:000000000000237A                 mov     rdi, rax        ; s
.text:000000000000237D                 mov     [rsp+98h+ptr], rax
.text:0000000000002382                 call    _strtok
.text:0000000000002387                 test    rax, rax
.text:000000000000238A                 jz      loc_254B
.text:0000000000002390                 mov     r15, rax
.text:0000000000002393                 lea     rax, [rsp+98h+var_50]
.text:0000000000002398                 lea     r13, [rsp+98h+var_48]
.text:000000000000239D                 lea     r12, aWrittenBySSAnd+1Bh ; ""
.text:00000000000023A4                 mov     dword ptr [rsp+98h+var_90], 0
.text:00000000000023AC                 xor     ebx, ebx
.text:00000000000023AE                 xor     ebp, ebp
.text:00000000000023B0                 mov     [rsp+98h+var_70], rax
.text:00000000000023B5                 mov     r14d, 0FFFFFFFFh
.text:00000000000023BB
.text:00000000000023BB loc_23BB:                               ; CODE XREF: parse_additional_groups+F0↓j
.text:00000000000023BB                 xor     esi, esi
.text:00000000000023BD                 mov     r8, r12
.text:00000000000023C0                 mov     rcx, r13
.text:00000000000023C3                 mov     edx, 0Ah
.text:00000000000023C8                 mov     rdi, r15        ; nptr
.text:00000000000023CB                 call    xstrtoul
.text:00000000000023D0                 test    eax, eax
.text:00000000000023D2                 jnz     short loc_23DF
.text:00000000000023D4                 cmp     [rsp+98h+var_48], r14
.text:00000000000023D9                 jbe     loc_24A0
.text:00000000000023DF
.text:00000000000023DF loc_23DF:                               ; CODE XREF: parse_additional_groups+A2↑j
.text:00000000000023DF                 mov     rdi, r15        ; name
.text:00000000000023E2                 call    _getgrnam
.text:00000000000023E7                 test    rax, rax
.text:00000000000023EA                 jz      short loc_2450
.text:00000000000023EC
.text:00000000000023EC loc_23EC:                               ; CODE XREF: parse_additional_groups+1A3↓j
.text:00000000000023EC                 mov     eax, [rax+10h]
.text:00000000000023EF                 mov     [rsp+98h+var_48], rax
.text:00000000000023F4
.text:00000000000023F4 loc_23F4:                               ; CODE XREF: parse_additional_groups+192↓j
.text:00000000000023F4                                         ; parse_additional_groups+1A9↓j
.text:00000000000023F4                 cmp     [rsp+98h+var_50], rbx
.text:00000000000023F9                 jz      loc_24DE
.text:00000000000023FF
.text:00000000000023FF loc_23FF:                               ; CODE XREF: parse_additional_groups+1C3↓j
.text:00000000000023FF                 mov     rax, [rsp+98h+var_48]
.text:0000000000002404                 mov     [rbp+rbx*4+0], eax
.text:0000000000002408                 add     rbx, 1
.text:000000000000240C
.text:000000000000240C loc_240C:                               ; CODE XREF: parse_additional_groups+216↓j
.text:000000000000240C                 lea     rsi, delim      ; ","
.text:0000000000002413                 xor     edi, edi        ; s
.text:0000000000002415                 call    _strtok
.text:000000000000241A                 test    rax, rax
.text:000000000000241D                 mov     r15, rax
.text:0000000000002420                 jnz     short loc_23BB
.text:0000000000002422                 cmp     dword ptr [rsp+98h+var_90], 0
.text:0000000000002427                 jz      loc_24F8
.text:000000000000242D
.text:000000000000242D loc_242D:                               ; CODE XREF: parse_additional_groups+1CB↓j
.text:000000000000242D                 cmp     dword ptr [rsp+98h+var_90], 0
.text:0000000000002432                 mov     rax, [rsp+98h+var_88]
.text:0000000000002437                 mov     [rax], rbp
.text:000000000000243A                 jnz     loc_258E
.text:0000000000002440                 mov     rax, [rsp+98h+var_78]
.text:0000000000002445                 mov     [rax], rbx
.text:0000000000002448                 jmp     short loc_246B
.text:0000000000002448 ; ---------------------------------------------------------------------------
.text:000000000000244A                 align 10h
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: parse_additional_groups+BA↑j
.text:0000000000002450                 cmp     [rsp+98h+var_5D], 0
.text:0000000000002455                 jnz     loc_2503
.text:000000000000245B
.text:000000000000245B loc_245B:                               ; CODE XREF: parse_additional_groups+222↓j
.text:000000000000245B                                         ; parse_additional_groups+259↓j
.text:000000000000245B                 mov     rax, [rsp+98h+var_88]
.text:0000000000002460                 mov     dword ptr [rsp+98h+var_90], 0FFFFFFFFh
.text:0000000000002468                 mov     [rax], rbp
.text:000000000000246B
.text:000000000000246B loc_246B:                               ; CODE XREF: parse_additional_groups+118↑j
.text:000000000000246B                                         ; parse_additional_groups+266↓j
.text:000000000000246B                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:0000000000002470                 call    _free
.text:0000000000002475                 mov     rsi, [rsp+98h+var_40]
.text:000000000000247A                 xor     rsi, fs:28h
.text:0000000000002483                 mov     eax, dword ptr [rsp+98h+var_90]
.text:0000000000002487                 jnz     loc_259B
.text:000000000000248D                 add     rsp, 68h
.text:0000000000002491                 pop     rbx
.text:0000000000002492                 pop     rbp
.text:0000000000002493                 pop     r12
.text:0000000000002495                 pop     r13
.text:0000000000002497                 pop     r14
.text:0000000000002499                 pop     r15
.text:000000000000249B                 retn
.text:000000000000249B ; ---------------------------------------------------------------------------
.text:000000000000249C                 align 20h
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: parse_additional_groups+A9↑j
.text:00000000000024A0                 call    ___ctype_b_loc
.text:00000000000024A5                 mov     rcx, [rax]
.text:00000000000024A8                 jmp     short loc_24B4
.text:00000000000024A8 ; ---------------------------------------------------------------------------
.text:00000000000024AA                 align 10h
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: parse_additional_groups+18D↓j
.text:00000000000024B0                 add     r15, 1
.text:00000000000024B4
.text:00000000000024B4 loc_24B4:                               ; CODE XREF: parse_additional_groups+178↑j
.text:00000000000024B4                 movzx   edx, byte ptr [r15]
.text:00000000000024B8                 test    byte ptr [rcx+rdx*2+1], 20h
.text:00000000000024BD                 jnz     short loc_24B0
.text:00000000000024BF                 cmp     dl, 2Bh ; '+'
.text:00000000000024C2                 jz      loc_23F4
.text:00000000000024C8                 mov     rdi, r15        ; name
.text:00000000000024CB                 call    _getgrnam
.text:00000000000024D0                 test    rax, rax
.text:00000000000024D3                 jnz     loc_23EC
.text:00000000000024D9                 jmp     loc_23F4
.text:00000000000024DE ; ---------------------------------------------------------------------------
.text:00000000000024DE
.text:00000000000024DE loc_24DE:                               ; CODE XREF: parse_additional_groups+C9↑j
.text:00000000000024DE                 mov     rsi, [rsp+98h+var_70]
.text:00000000000024E3                 mov     rdi, rbp
.text:00000000000024E6                 mov     edx, 4
.text:00000000000024EB                 call    x2nrealloc
.text:00000000000024F0                 mov     rbp, rax
.text:00000000000024F3                 jmp     loc_23FF
.text:00000000000024F8 ; ---------------------------------------------------------------------------
.text:00000000000024F8
.text:00000000000024F8 loc_24F8:                               ; CODE XREF: parse_additional_groups+F7↑j
.text:00000000000024F8                 test    rbx, rbx
.text:00000000000024FB                 jnz     loc_242D
.text:0000000000002501                 jmp     short loc_254D
.text:0000000000002503 ; ---------------------------------------------------------------------------
.text:0000000000002503
.text:0000000000002503 loc_2503:                               ; CODE XREF: parse_additional_groups+125↑j
.text:0000000000002503                 mov     rdi, r15
.text:0000000000002506                 call    quote
.text:000000000000250B                 lea     rsi, aInvalidGroupS ; "invalid group %s"
.text:0000000000002512                 mov     edx, 5          ; category
.text:0000000000002517                 xor     edi, edi        ; domainname
.text:0000000000002519                 mov     [rsp+98h+var_90], rax
.text:000000000000251E                 call    _dcgettext
.text:0000000000002523                 mov     r15, rax
.text:0000000000002526                 call    ___errno_location
.text:000000000000252B                 mov     rcx, [rsp+98h+var_90]
.text:0000000000002530                 mov     esi, [rax]      ; errnum
.text:0000000000002532                 mov     rdx, r15        ; format
.text:0000000000002535                 xor     edi, edi        ; status
.text:0000000000002537                 xor     eax, eax
.text:0000000000002539                 call    _error
.text:000000000000253E                 mov     dword ptr [rsp+98h+var_90], 0FFFFFFFFh
.text:0000000000002546                 jmp     loc_240C
.text:000000000000254B ; ---------------------------------------------------------------------------
.text:000000000000254B
.text:000000000000254B loc_254B:                               ; CODE XREF: parse_additional_groups+5A↑j
.text:000000000000254B                 xor     ebp, ebp
.text:000000000000254D
.text:000000000000254D loc_254D:                               ; CODE XREF: parse_additional_groups+1D1↑j
.text:000000000000254D                 cmp     byte ptr [rsp+98h+var_5C], 0
.text:0000000000002552                 jz      loc_245B
.text:0000000000002558                 mov     rdi, [rsp+98h+var_68]
.text:000000000000255D                 call    quote
.text:0000000000002562                 lea     rsi, aInvalidGroupLi ; "invalid group list %s"
.text:0000000000002569                 mov     rbx, rax
.text:000000000000256C                 xor     edi, edi        ; domainname
.text:000000000000256E                 mov     edx, 5          ; category
.text:0000000000002573                 call    _dcgettext
.text:0000000000002578                 mov     rcx, rbx
.text:000000000000257B                 mov     rdx, rax        ; format
.text:000000000000257E                 xor     esi, esi        ; errnum
.text:0000000000002580                 xor     edi, edi        ; status
.text:0000000000002582                 xor     eax, eax
.text:0000000000002584                 call    _error
.text:0000000000002589                 jmp     loc_245B
.text:000000000000258E ; ---------------------------------------------------------------------------
.text:000000000000258E
.text:000000000000258E loc_258E:                               ; CODE XREF: parse_additional_groups+10A↑j
.text:000000000000258E                 mov     dword ptr [rsp+98h+var_90], 0FFFFFFFFh
.text:0000000000002596                 jmp     loc_246B
.text:000000000000259B ; ---------------------------------------------------------------------------
.text:000000000000259B
.text:000000000000259B loc_259B:                               ; CODE XREF: parse_additional_groups+157↑j
.text:000000000000259B                 call    ___stack_chk_fail
.text:000000000000259B ; } // starts at 2330
.text:000000000000259B parse_additional_groups endp
.text:000000000000259B
.text:00000000000025A0
.text:00000000000025A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025A0
.text:00000000000025A0 ; Attributes: noreturn
.text:00000000000025A0
.text:00000000000025A0 ; void __fastcall __noreturn usage(int status)
.text:00000000000025A0                 public usage
.text:00000000000025A0 usage           proc near               ; CODE XREF: main+68B↑p
.text:00000000000025A0                                         ; main+6B6↑p ...
.text:00000000000025A0
.text:00000000000025A0 var_A8          = qword ptr -0A8h
.text:00000000000025A0 var_A0          = qword ptr -0A0h
.text:00000000000025A0 var_98          = qword ptr -98h
.text:00000000000025A0 var_90          = qword ptr -90h
.text:00000000000025A0 var_88          = qword ptr -88h
.text:00000000000025A0 var_80          = qword ptr -80h
.text:00000000000025A0 var_78          = qword ptr -78h
.text:00000000000025A0 var_70          = qword ptr -70h
.text:00000000000025A0 var_68          = qword ptr -68h
.text:00000000000025A0 var_60          = qword ptr -60h
.text:00000000000025A0 var_58          = qword ptr -58h
.text:00000000000025A0 var_50          = qword ptr -50h
.text:00000000000025A0 var_48          = qword ptr -48h
.text:00000000000025A0 var_40          = qword ptr -40h
.text:00000000000025A0 var_30          = qword ptr -30h
.text:00000000000025A0
.text:00000000000025A0 ; __unwind {
.text:00000000000025A0                 push    r13
.text:00000000000025A2                 push    r12
.text:00000000000025A4                 mov     edx, 5          ; category
.text:00000000000025A9                 push    rbp
.text:00000000000025AA                 push    rbx
.text:00000000000025AB                 mov     ebp, edi
.text:00000000000025AD                 sub     rsp, 88h
.text:00000000000025B4                 mov     rbx, cs:program_name
.text:00000000000025BB                 mov     rax, fs:28h
.text:00000000000025C4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000025C9                 xor     eax, eax
.text:00000000000025CB                 test    edi, edi
.text:00000000000025CD                 jz      short loc_25FD
.text:00000000000025CF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000025D6                 xor     edi, edi        ; domainname
.text:00000000000025D8                 call    _dcgettext
.text:00000000000025DD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000025E4                 mov     rdx, rax
.text:00000000000025E7                 mov     rcx, rbx
.text:00000000000025EA                 mov     esi, 1
.text:00000000000025EF                 xor     eax, eax
.text:00000000000025F1                 call    ___fprintf_chk
.text:00000000000025F6
.text:00000000000025F6 loc_25F6:                               ; CODE XREF: usage+326↓j
.text:00000000000025F6                 mov     edi, ebp        ; status
.text:00000000000025F8                 call    _exit
.text:00000000000025FD ; ---------------------------------------------------------------------------
.text:00000000000025FD
.text:00000000000025FD loc_25FD:                               ; CODE XREF: usage+2D↑j
.text:00000000000025FD                 lea     rsi, aUsageSOptionNe ; "Usage: %s [OPTION] NEWROOT [COMMAND [AR"...
.text:0000000000002604                 xor     edi, edi        ; domainname
.text:0000000000002606                 call    _dcgettext
.text:000000000000260B                 mov     rcx, rbx
.text:000000000000260E                 mov     rdx, rbx
.text:0000000000002611                 mov     rsi, rax
.text:0000000000002614                 mov     edi, 1
.text:0000000000002619                 xor     eax, eax
.text:000000000000261B                 call    ___printf_chk
.text:0000000000002620                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002627                 lea     rsi, aRunCommandWith ; "Run COMMAND with root directory set to "...
.text:000000000000262E                 mov     edx, 5          ; category
.text:0000000000002633                 xor     edi, edi        ; domainname
.text:0000000000002635                 call    _dcgettext
.text:000000000000263A                 mov     rsi, rbx        ; stream
.text:000000000000263D                 mov     rdi, rax        ; s
.text:0000000000002640                 call    _fputs_unlocked
.text:0000000000002645                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000264C                 lea     rsi, aGroupsGListSpe ; "  --groups=G_LIST        specify supple"...
.text:0000000000002653                 mov     edx, 5          ; category
.text:0000000000002658                 xor     edi, edi        ; domainname
.text:000000000000265A                 call    _dcgettext
.text:000000000000265F                 mov     rsi, rbx        ; stream
.text:0000000000002662                 mov     rdi, rax        ; s
.text:0000000000002665                 call    _fputs_unlocked
.text:000000000000266A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002671                 lea     rsi, aUserspecUserGr ; "  --userspec=USER:GROUP  specify user a"...
.text:0000000000002678                 mov     edx, 5          ; category
.text:000000000000267D                 xor     edi, edi        ; domainname
.text:000000000000267F                 call    _dcgettext
.text:0000000000002684                 mov     rsi, rbx        ; stream
.text:0000000000002687                 mov     rdi, rax        ; s
.text:000000000000268A                 call    _fputs_unlocked
.text:000000000000268F                 lea     rsi, aLibs+6    ; "/"
.text:0000000000002696                 mov     edi, 4
.text:000000000000269B                 call    quotearg_style
.text:00000000000026A0                 lea     rsi, aSkipChdirDoNot ; "  --skip-chdir           do not change "...
.text:00000000000026A7                 mov     rbx, rax
.text:00000000000026AA                 mov     edx, 5          ; category
.text:00000000000026AF                 xor     edi, edi        ; domainname
.text:00000000000026B1                 call    _dcgettext
.text:00000000000026B6                 mov     rdx, rbx
.text:00000000000026B9                 mov     rsi, rax
.text:00000000000026BC                 mov     edi, 1
.text:00000000000026C1                 xor     eax, eax
.text:00000000000026C3                 call    ___printf_chk
.text:00000000000026C8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000026CF                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000026D6                 mov     edx, 5          ; category
.text:00000000000026DB                 xor     edi, edi        ; domainname
.text:00000000000026DD                 call    _dcgettext
.text:00000000000026E2                 mov     rsi, rbx        ; stream
.text:00000000000026E5                 mov     rdi, rax        ; s
.text:00000000000026E8                 call    _fputs_unlocked
.text:00000000000026ED                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000026F4                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000026FB                 mov     edx, 5          ; category
.text:0000000000002700                 xor     edi, edi        ; domainname
.text:0000000000002702                 call    _dcgettext
.text:0000000000002707                 mov     rsi, rbx        ; stream
.text:000000000000270A                 mov     rdi, rax        ; s
.text:000000000000270D                 call    _fputs_unlocked
.text:0000000000002712                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002719                 lea     rsi, aIfNoCommandIsG ; "\nIf no command is given, run '\"$SHELL"...
.text:0000000000002720                 mov     edx, 5          ; category
.text:0000000000002725                 xor     edi, edi        ; domainname
.text:0000000000002727                 call    _dcgettext
.text:000000000000272C                 mov     rsi, rbx        ; stream
.text:000000000000272F                 mov     rdi, rax        ; s
.text:0000000000002732                 lea     rbx, aChroot_0  ; "chroot"
.text:0000000000002739                 call    _fputs_unlocked
.text:000000000000273E                 lea     rax, asc_5FB4   ; "["
.text:0000000000002745                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000274C                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002755                 mov     [rsp+0A8h+var_40], 0
.text:000000000000275E                 mov     rdx, rsp
.text:0000000000002761                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002765                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000276C                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002771                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002778                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000277D                 lea     rax, domainname ; "coreutils"
.text:0000000000002784                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002789                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002790                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002795                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000279C                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000027A1                 mov     [rsp+0A8h+var_90], rax
.text:00000000000027A6                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000027AD                 mov     [rsp+0A8h+var_88], rax
.text:00000000000027B2                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000027B9                 mov     [rsp+0A8h+var_80], rax
.text:00000000000027BE                 mov     [rsp+0A8h+var_70], rax
.text:00000000000027C3                 mov     [rsp+0A8h+var_60], rax
.text:00000000000027C8                 mov     [rsp+0A8h+var_50], rax
.text:00000000000027CD                 nop     dword ptr [rax]
.text:00000000000027D0
.text:00000000000027D0 loc_27D0:                               ; CODE XREF: usage+24D↓j
.text:00000000000027D0                 add     rdx, 10h
.text:00000000000027D4                 mov     rdi, [rdx]
.text:00000000000027D7                 test    rdi, rdi
.text:00000000000027DA                 jz      short loc_27EF
.text:00000000000027DC                 mov     ecx, 7
.text:00000000000027E1                 mov     rsi, rbx
.text:00000000000027E4                 repe cmpsb
.text:00000000000027E6                 setnbe  al
.text:00000000000027E9                 sbb     al, 0
.text:00000000000027EB                 test    al, al
.text:00000000000027ED                 jnz     short loc_27D0
.text:00000000000027EF
.text:00000000000027EF loc_27EF:                               ; CODE XREF: usage+23A↑j
.text:00000000000027EF                 mov     r12, [rdx+8]
.text:00000000000027F3                 xor     edi, edi        ; domainname
.text:00000000000027F5                 mov     edx, 5          ; category
.text:00000000000027FA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002801                 test    r12, r12
.text:0000000000002804                 jz      loc_28CB
.text:000000000000280A                 call    _dcgettext
.text:000000000000280F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002816                 lea     rdx, unk_602A
.text:000000000000281D                 mov     rsi, rax
.text:0000000000002820                 mov     edi, 1
.text:0000000000002825                 xor     eax, eax
.text:0000000000002827                 call    ___printf_chk
.text:000000000000282C                 xor     esi, esi        ; locale
.text:000000000000282E                 mov     edi, 5          ; category
.text:0000000000002833                 call    _setlocale
.text:0000000000002838                 test    rax, rax
.text:000000000000283B                 jz      short loc_2859
.text:000000000000283D                 lea     rsi, s2         ; "en_"
.text:0000000000002844                 mov     edx, 3          ; n
.text:0000000000002849                 mov     rdi, rax        ; s1
.text:000000000000284C                 call    _strncmp
.text:0000000000002851                 test    eax, eax
.text:0000000000002853                 jnz     loc_2960
.text:0000000000002859
.text:0000000000002859 loc_2859:                               ; CODE XREF: usage+29B↑j
.text:0000000000002859                                         ; usage+3E5↓j
.text:0000000000002859                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002860                 xor     edi, edi        ; domainname
.text:0000000000002862                 mov     edx, 5          ; category
.text:0000000000002867                 call    _dcgettext
.text:000000000000286C                 lea     rcx, aChroot_0  ; "chroot"
.text:0000000000002873                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000287A                 mov     rsi, rax
.text:000000000000287D                 mov     edi, 1
.text:0000000000002882                 xor     eax, eax
.text:0000000000002884                 call    ___printf_chk
.text:0000000000002889                 cmp     r12, rbx
.text:000000000000288C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002893                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000289A                 cmovz   rbx, rcx
.text:000000000000289E
.text:000000000000289E loc_289E:                               ; CODE XREF: usage+3B4↓j
.text:000000000000289E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000028A5                 xor     edi, edi        ; domainname
.text:00000000000028A7                 mov     edx, 5          ; category
.text:00000000000028AC                 call    _dcgettext
.text:00000000000028B1                 mov     rcx, rbx
.text:00000000000028B4                 mov     rsi, rax
.text:00000000000028B7                 mov     rdx, r12
.text:00000000000028BA                 mov     edi, 1
.text:00000000000028BF                 xor     eax, eax
.text:00000000000028C1                 call    ___printf_chk
.text:00000000000028C6                 jmp     loc_25F6
.text:00000000000028CB ; ---------------------------------------------------------------------------
.text:00000000000028CB
.text:00000000000028CB loc_28CB:                               ; CODE XREF: usage+264↑j
.text:00000000000028CB                 call    _dcgettext
.text:00000000000028D0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000028D7                 lea     rdx, unk_602A
.text:00000000000028DE                 mov     rsi, rax
.text:00000000000028E1                 mov     edi, 1
.text:00000000000028E6                 xor     eax, eax
.text:00000000000028E8                 call    ___printf_chk
.text:00000000000028ED                 xor     esi, esi        ; locale
.text:00000000000028EF                 mov     edi, 5          ; category
.text:00000000000028F4                 call    _setlocale
.text:00000000000028F9                 test    rax, rax
.text:00000000000028FC                 jz      short loc_2916
.text:00000000000028FE                 lea     rsi, s2         ; "en_"
.text:0000000000002905                 mov     edx, 3          ; n
.text:000000000000290A                 mov     rdi, rax        ; s1
.text:000000000000290D                 call    _strncmp
.text:0000000000002912                 test    eax, eax
.text:0000000000002914                 jnz     short loc_2959
.text:0000000000002916
.text:0000000000002916 loc_2916:                               ; CODE XREF: usage+35C↑j
.text:0000000000002916                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000291D                 mov     edx, 5          ; category
.text:0000000000002922                 xor     edi, edi        ; domainname
.text:0000000000002924                 lea     r12, aChroot_0  ; "chroot"
.text:000000000000292B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002932                 call    _dcgettext
.text:0000000000002937                 lea     rcx, aChroot_0  ; "chroot"
.text:000000000000293E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002945                 mov     rsi, rax
.text:0000000000002948                 mov     edi, 1
.text:000000000000294D                 xor     eax, eax
.text:000000000000294F                 call    ___printf_chk
.text:0000000000002954                 jmp     loc_289E
.text:0000000000002959 ; ---------------------------------------------------------------------------
.text:0000000000002959
.text:0000000000002959 loc_2959:                               ; CODE XREF: usage+374↑j
.text:0000000000002959                 lea     r12, aChroot_0  ; "chroot"
.text:0000000000002960
.text:0000000000002960 loc_2960:                               ; CODE XREF: usage+2B3↑j
.text:0000000000002960                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002967                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000296E                 xor     edi, edi        ; domainname
.text:0000000000002970                 mov     edx, 5          ; category
.text:0000000000002975                 call    _dcgettext
.text:000000000000297A                 mov     rsi, r13        ; stream
.text:000000000000297D                 mov     rdi, rax        ; s
.text:0000000000002980                 call    _fputs_unlocked
.text:0000000000002985                 jmp     loc_2859
.text:0000000000002985 ; } // starts at 25A0
.text:0000000000002985 usage           endp
.text:0000000000002985
.text:0000000000002985 ; ---------------------------------------------------------------------------
.text:000000000000298A                 align 10h
.text:0000000000002990
.text:0000000000002990 ; =============== S U B R O U T I N E =======================================
.text:0000000000002990
.text:0000000000002990
.text:0000000000002990                 public close_stdout_set_file_name
.text:0000000000002990 close_stdout_set_file_name proc near
.text:0000000000002990 ; __unwind {
.text:0000000000002990                 mov     cs:file_name, rdi
.text:0000000000002997                 retn
.text:0000000000002997 ; } // starts at 2990
.text:0000000000002997 close_stdout_set_file_name endp
.text:0000000000002997
.text:0000000000002997 ; ---------------------------------------------------------------------------
.text:0000000000002998                 align 20h
.text:00000000000029A0
.text:00000000000029A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029A0
.text:00000000000029A0
.text:00000000000029A0                 public close_stdout_set_ignore_EPIPE
.text:00000000000029A0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000029A0 ; __unwind {
.text:00000000000029A0                 mov     cs:ignore_EPIPE, dil
.text:00000000000029A7                 retn
.text:00000000000029A7 ; } // starts at 29A0
.text:00000000000029A7 close_stdout_set_ignore_EPIPE endp
.text:00000000000029A7
.text:00000000000029A7 ; ---------------------------------------------------------------------------
.text:00000000000029A8                 align 10h
.text:00000000000029B0
.text:00000000000029B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029B0
.text:00000000000029B0 ; Attributes: info_from_lumina
.text:00000000000029B0
.text:00000000000029B0 ; void __cdecl close_stdout()
.text:00000000000029B0                 public close_stdout
.text:00000000000029B0 close_stdout    proc near               ; DATA XREF: main+86↑o
.text:00000000000029B0 ; __unwind {
.text:00000000000029B0                 push    rbp
.text:00000000000029B1                 push    rbx
.text:00000000000029B2                 sub     rsp, 8
.text:00000000000029B6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000029BD                 call    close_stream
.text:00000000000029C2                 test    eax, eax
.text:00000000000029C4                 jz      short loc_29DC
.text:00000000000029C6                 call    ___errno_location
.text:00000000000029CB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000029D2                 mov     rbx, rax
.text:00000000000029D5                 jz      short loc_29F3
.text:00000000000029D7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000029DA                 jnz     short loc_29F3
.text:00000000000029DC
.text:00000000000029DC loc_29DC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000029DC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000029E3                 call    close_stream
.text:00000000000029E8                 test    eax, eax
.text:00000000000029EA                 jnz     short loc_2A32
.text:00000000000029EC                 add     rsp, 8
.text:00000000000029F0                 pop     rbx
.text:00000000000029F1                 pop     rbp
.text:00000000000029F2                 retn
.text:00000000000029F3 ; ---------------------------------------------------------------------------
.text:00000000000029F3
.text:00000000000029F3 loc_29F3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000029F3                                         ; close_stdout+2A↑j
.text:00000000000029F3                 lea     rsi, aWriteError ; "write error"
.text:00000000000029FA                 xor     edi, edi        ; domainname
.text:00000000000029FC                 mov     edx, 5          ; category
.text:0000000000002A01                 call    _dcgettext
.text:0000000000002A06                 mov     rdi, cs:file_name
.text:0000000000002A0D                 mov     rbp, rax
.text:0000000000002A10                 test    rdi, rdi
.text:0000000000002A13                 jz      short loc_2A3D
.text:0000000000002A15                 call    quotearg_colon
.text:0000000000002A1A                 mov     esi, [rbx]      ; errnum
.text:0000000000002A1C                 lea     rdx, aS         ; "%s: "
.text:0000000000002A23                 mov     rcx, rax
.text:0000000000002A26                 mov     r8, rbp
.text:0000000000002A29                 xor     edi, edi        ; status
.text:0000000000002A2B                 xor     eax, eax
.text:0000000000002A2D                 call    _error
.text:0000000000002A32
.text:0000000000002A32 loc_2A32:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002A32                                         ; close_stdout+A2↓j
.text:0000000000002A32                 mov     edi, cs:exit_failure ; status
.text:0000000000002A38                 call    __exit
.text:0000000000002A3D ; ---------------------------------------------------------------------------
.text:0000000000002A3D
.text:0000000000002A3D loc_2A3D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000002A3D                 mov     esi, [rbx]      ; errnum
.text:0000000000002A3F                 lea     rdx, format     ; format
.text:0000000000002A46                 mov     rcx, rax
.text:0000000000002A49                 xor     edi, edi        ; status
.text:0000000000002A4B                 xor     eax, eax
.text:0000000000002A4D                 call    _error
.text:0000000000002A52                 jmp     short loc_2A32
.text:0000000000002A52 ; } // starts at 29B0
.text:0000000000002A52 close_stdout    endp
.text:0000000000002A52
.text:0000000000002A52 ; ---------------------------------------------------------------------------
.text:0000000000002A54                 align 20h
.text:0000000000002A60
.text:0000000000002A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A60
.text:0000000000002A60
.text:0000000000002A60                 public set_program_name
.text:0000000000002A60 set_program_name proc near              ; CODE XREF: main+51↑p
.text:0000000000002A60 ; __unwind {
.text:0000000000002A60                 test    rdi, rdi
.text:0000000000002A63                 push    rbx
.text:0000000000002A64                 jz      short loc_2ADD
.text:0000000000002A66                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002A6B                 mov     rbx, rdi
.text:0000000000002A6E                 call    _strrchr
.text:0000000000002A73                 test    rax, rax
.text:0000000000002A76                 jz      short loc_2ACD
.text:0000000000002A78                 lea     r8, [rax+1]
.text:0000000000002A7C                 mov     rdx, r8
.text:0000000000002A7F                 sub     rdx, rbx
.text:0000000000002A82                 cmp     rdx, 6
.text:0000000000002A86                 jle     short loc_2ACD
.text:0000000000002A88                 lea     rsi, [rax-6]
.text:0000000000002A8C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002A93                 mov     ecx, 7
.text:0000000000002A98                 repe cmpsb
.text:0000000000002A9A                 setnbe  dl
.text:0000000000002A9D                 sbb     dl, 0
.text:0000000000002AA0                 test    dl, dl
.text:0000000000002AA2                 jnz     short loc_2ACD
.text:0000000000002AA4                 lea     rdi, aLt        ; "lt-"
.text:0000000000002AAB                 mov     ecx, 3
.text:0000000000002AB0                 mov     rsi, r8
.text:0000000000002AB3                 mov     rbx, r8
.text:0000000000002AB6                 repe cmpsb
.text:0000000000002AB8                 setnbe  dl
.text:0000000000002ABB                 sbb     dl, 0
.text:0000000000002ABE                 test    dl, dl
.text:0000000000002AC0                 jnz     short loc_2ACD
.text:0000000000002AC2                 lea     rbx, [rax+4]
.text:0000000000002AC6                 mov     cs:__bss_start, rbx
.text:0000000000002ACD
.text:0000000000002ACD loc_2ACD:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002ACD                                         ; set_program_name+26↑j ...
.text:0000000000002ACD                 mov     cs:program_name, rbx
.text:0000000000002AD4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002ADB                 pop     rbx
.text:0000000000002ADC                 retn
.text:0000000000002ADD ; ---------------------------------------------------------------------------
.text:0000000000002ADD
.text:0000000000002ADD loc_2ADD:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002ADD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002AE4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002AEB                 mov     edx, 37h ; '7'  ; n
.text:0000000000002AF0                 mov     esi, 1          ; size
.text:0000000000002AF5                 call    _fwrite
.text:0000000000002AFA                 call    _abort
.text:0000000000002AFA ; } // starts at 2A60
.text:0000000000002AFA set_program_name endp
.text:0000000000002AFA
.text:0000000000002AFA ; ---------------------------------------------------------------------------
.text:0000000000002AFF                 align 20h
.text:0000000000002B00
.text:0000000000002B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B00
.text:0000000000002B00 ; Attributes: info_from_lumina
.text:0000000000002B00
.text:0000000000002B00 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002B00 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002B00                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002B00 ; __unwind {
.text:0000000000002B00                 push    rbp
.text:0000000000002B01                 push    rbx
.text:0000000000002B02                 mov     rbp, rdi
.text:0000000000002B05                 mov     ebx, esi
.text:0000000000002B07                 sub     rsp, 8
.text:0000000000002B0B                 call    locale_charset
.text:0000000000002B10                 movzx   edx, byte ptr [rax]
.text:0000000000002B13                 and     edx, 0FFFFFFDFh
.text:0000000000002B16                 cmp     dl, 55h ; 'U'
.text:0000000000002B19                 jz      short loc_2B90
.text:0000000000002B1B                 cmp     dl, 47h ; 'G'
.text:0000000000002B1E                 jz      short loc_2B40
.text:0000000000002B20
.text:0000000000002B20 loc_2B20:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002B20                                         ; gettext_quote+50↓j ...
.text:0000000000002B20                 lea     rax, unk_653B
.text:0000000000002B27                 lea     rdx, asc_653D   ; "'"
.text:0000000000002B2E                 cmp     ebx, 9
.text:0000000000002B31                 cmovnz  rax, rdx
.text:0000000000002B35                 add     rsp, 8
.text:0000000000002B39                 pop     rbx
.text:0000000000002B3A                 pop     rbp
.text:0000000000002B3B                 retn
.text:0000000000002B3B ; ---------------------------------------------------------------------------
.text:0000000000002B3C                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002B40                 movzx   edx, byte ptr [rax+1]
.text:0000000000002B44                 and     edx, 0FFFFFFDFh
.text:0000000000002B47                 cmp     dl, 42h ; 'B'
.text:0000000000002B4A                 jnz     short loc_2B20
.text:0000000000002B4C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002B50                 jnz     short loc_2B20
.text:0000000000002B52                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002B56                 jnz     short loc_2B20
.text:0000000000002B58                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002B5C                 jnz     short loc_2B20
.text:0000000000002B5E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002B62                 jnz     short loc_2B20
.text:0000000000002B64                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002B68                 jnz     short loc_2B20
.text:0000000000002B6A                 cmp     byte ptr [rax+7], 0
.text:0000000000002B6E                 jnz     short loc_2B20
.text:0000000000002B70                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002B74                 lea     rax, unk_6534
.text:0000000000002B7B                 lea     rdx, unk_6538
.text:0000000000002B82                 cmovnz  rax, rdx
.text:0000000000002B86                 add     rsp, 8
.text:0000000000002B8A                 pop     rbx
.text:0000000000002B8B                 pop     rbp
.text:0000000000002B8C                 retn
.text:0000000000002B8C ; ---------------------------------------------------------------------------
.text:0000000000002B8D                 align 10h
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002B90                 movzx   edx, byte ptr [rax+1]
.text:0000000000002B94                 and     edx, 0FFFFFFDFh
.text:0000000000002B97                 cmp     dl, 54h ; 'T'
.text:0000000000002B9A                 jnz     short loc_2B20
.text:0000000000002B9C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002BA0                 and     edx, 0FFFFFFDFh
.text:0000000000002BA3                 cmp     dl, 46h ; 'F'
.text:0000000000002BA6                 jnz     loc_2B20
.text:0000000000002BAC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002BB0                 jnz     loc_2B20
.text:0000000000002BB6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002BBA                 jnz     loc_2B20
.text:0000000000002BC0                 cmp     byte ptr [rax+5], 0
.text:0000000000002BC4                 jnz     loc_2B20
.text:0000000000002BCA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002BCE                 lea     rax, unk_652C
.text:0000000000002BD5                 lea     rdx, unk_6530
.text:0000000000002BDC                 cmovnz  rax, rdx
.text:0000000000002BE0                 add     rsp, 8
.text:0000000000002BE4                 pop     rbx
.text:0000000000002BE5                 pop     rbp
.text:0000000000002BE6                 retn
.text:0000000000002BE6 ; } // starts at 2B00
.text:0000000000002BE6 gettext_quote   endp
.text:0000000000002BE6
.text:0000000000002BE6 ; ---------------------------------------------------------------------------
.text:0000000000002BE7                 align 10h
.text:0000000000002BF0
.text:0000000000002BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BF0
.text:0000000000002BF0 ; Attributes: info_from_lumina
.text:0000000000002BF0
.text:0000000000002BF0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002BF0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002BF0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002BF0
.text:0000000000002BF0 var_E0          = dword ptr -0E0h
.text:0000000000002BF0 var_DB          = byte ptr -0DBh
.text:0000000000002BF0 var_DA          = byte ptr -0DAh
.text:0000000000002BF0 var_D9          = byte ptr -0D9h
.text:0000000000002BF0 s               = qword ptr -0D8h
.text:0000000000002BF0 n               = qword ptr -0D0h
.text:0000000000002BF0 var_C8          = qword ptr -0C8h
.text:0000000000002BF0 ps              = qword ptr -0C0h
.text:0000000000002BF0 var_B8          = qword ptr -0B8h
.text:0000000000002BF0 var_B0          = qword ptr -0B0h
.text:0000000000002BF0 var_A8          = qword ptr -0A8h
.text:0000000000002BF0 s2              = qword ptr -0A0h
.text:0000000000002BF0 var_98          = qword ptr -98h
.text:0000000000002BF0 var_90          = qword ptr -90h
.text:0000000000002BF0 var_88          = qword ptr -88h
.text:0000000000002BF0 var_80          = qword ptr -80h
.text:0000000000002BF0 var_78          = qword ptr -78h
.text:0000000000002BF0 var_70          = dword ptr -70h
.text:0000000000002BF0 var_6C          = byte ptr -6Ch
.text:0000000000002BF0 var_6B          = byte ptr -6Bh
.text:0000000000002BF0 var_6A          = byte ptr -6Ah
.text:0000000000002BF0 var_69          = byte ptr -69h
.text:0000000000002BF0 var_68          = qword ptr -68h
.text:0000000000002BF0 var_60          = qword ptr -60h
.text:0000000000002BF0 wc              = dword ptr -4Ch
.text:0000000000002BF0 var_48          = qword ptr -48h
.text:0000000000002BF0 var_40          = qword ptr -40h
.text:0000000000002BF0 arg_0           = qword ptr  8
.text:0000000000002BF0 arg_8           = qword ptr  10h
.text:0000000000002BF0 arg_10          = qword ptr  18h
.text:0000000000002BF0
.text:0000000000002BF0 ; __unwind {
.text:0000000000002BF0                 push    r15
.text:0000000000002BF2                 push    r14
.text:0000000000002BF4                 mov     r15d, r8d
.text:0000000000002BF7                 push    r13
.text:0000000000002BF9                 push    r12
.text:0000000000002BFB                 mov     r14, rdi
.text:0000000000002BFE                 push    rbp
.text:0000000000002BFF                 push    rbx
.text:0000000000002C00                 mov     ebx, r9d
.text:0000000000002C03                 mov     r13, rsi
.text:0000000000002C06                 mov     rbp, rcx
.text:0000000000002C09                 and     ebx, 2
.text:0000000000002C0C                 sub     rsp, 0B8h
.text:0000000000002C13                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002C1B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002C20                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002C25                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002C2A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002C2F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002C37                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002C3C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002C44                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002C49                 mov     rax, fs:28h
.text:0000000000002C52                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002C5A                 xor     eax, eax
.text:0000000000002C5C                 call    ___ctype_get_mb_cur_max
.text:0000000000002C61                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002C65                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002C6A                 ja      def_2C81        ; jumptable 00000000000121F1 default case
.text:0000000000002C70                 lea     rcx, jpt_2C81
.text:0000000000002C77                 mov     edx, r15d
.text:0000000000002C7A                 movsxd  rax, ds:(jpt_2C81 - 65A0h)[rcx+rdx*4]
.text:0000000000002C7E                 add     rax, rcx
.text:0000000000002C81                 jmp     rax             ; switch jump
.text:0000000000002C83 ; ---------------------------------------------------------------------------
.text:0000000000002C83
.text:0000000000002C83 loc_2C83:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C83                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002C83                                         ; DATA XREF: ...
.text:0000000000002C83                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002C88                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C8D                 xor     r12d, r12d
.text:0000000000002C90                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C99                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002C9E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002CA3
.text:0000000000002CA3 loc_2CA3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002CA3                 lea     rax, asc_653D   ; "'"
.text:0000000000002CAA                 mov     [rsp+0E8h+n], 1
.text:0000000000002CB3                 xor     r15d, r15d
.text:0000000000002CB6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002CBE                 mov     [rsp+0E8h+s2], rax
.text:0000000000002CC3
.text:0000000000002CC3 loc_2CC3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002CC3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002CC3                 xor     r11d, r11d
.text:0000000000002CC6                 mov     rax, rbp
.text:0000000000002CC9                 mov     r8d, r12d
.text:0000000000002CCC                 mov     rbp, r11
.text:0000000000002CCF                 mov     r11, rax
.text:0000000000002CD2                 nop     word ptr [rax+rax+00h]
.text:0000000000002CD8
.text:0000000000002CD8 loc_2CD8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002CD8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002CD8                 cmp     r11, rbp
.text:0000000000002CDB                 setnz   r12b
.text:0000000000002CDF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002CE3                 jnz     short loc_2CF2
.text:0000000000002CE5                 mov     rax, [rsp+0E8h+s]
.text:0000000000002CEA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002CEE                 setnz   r12b
.text:0000000000002CF2
.text:0000000000002CF2 loc_2CF2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002CF2                 test    r12b, r12b
.text:0000000000002CF5                 jz      loc_3350
.text:0000000000002CFB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D00                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002D05                 lea     r9, [rdi+rbp]
.text:0000000000002D09                 setnz   al
.text:0000000000002D0C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002D10                 mov     r10d, eax
.text:0000000000002D13                 jz      loc_2DC0
.text:0000000000002D19                 mov     rax, [rsp+0E8h+n]
.text:0000000000002D1E                 test    rax, rax
.text:0000000000002D21                 jz      loc_3150
.text:0000000000002D27                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D2B                 lea     rbx, [rbp+rax+0]
.text:0000000000002D30                 jnz     short loc_2D60
.text:0000000000002D32                 cmp     rax, 1
.text:0000000000002D36                 jbe     short loc_2D60
.text:0000000000002D38                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002D3D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002D42                 mov     [rsp+0E8h+ps], r9
.text:0000000000002D47                 call    _strlen
.text:0000000000002D4C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002D52                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002D58                 mov     r11, rax
.text:0000000000002D5B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002D60                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002D60                 cmp     rbx, r11
.text:0000000000002D63                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002D68                 ja      loc_3320
.text:0000000000002D6E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002D73                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002D78                 mov     rdi, r9         ; s1
.text:0000000000002D7B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002D80                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002D85                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002D8A                 call    _memcmp
.text:0000000000002D8F                 test    eax, eax
.text:0000000000002D91                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002D96                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002D9C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002DA1                 jnz     loc_3320
.text:0000000000002DA7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DAC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002DB2                 jnz     loc_3D35
.text:0000000000002DB8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002DC0
.text:0000000000002DC0 loc_2DC0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002DC0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002DC0                 movzx   ebx, byte ptr [r9]
.text:0000000000002DC4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002DC7                 ja      def_2DDE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002DCD                 lea     rcx, jpt_2DDE
.text:0000000000002DD4                 movzx   edx, bl
.text:0000000000002DD7                 movsxd  rax, ds:(jpt_2DDE - 65CCh)[rcx+rdx*4]
.text:0000000000002DDB                 add     rax, rcx
.text:0000000000002DDE                 jmp     rax             ; switch jump
.text:0000000000002DE0 ; ---------------------------------------------------------------------------
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002DE0                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:0000000000002DE0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002DE3
.text:0000000000002DE3 loc_2DE3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002DE3                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000002DE3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002DE7                 setnz   al
.text:0000000000002DEA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002DEE                 jnz     short loc_2DFC
.text:0000000000002DF0                 mov     rax, [rsp+0E8h+s]
.text:0000000000002DF5                 cmp     byte ptr [rax+1], 0
.text:0000000000002DF9                 setnz   al
.text:0000000000002DFC
.text:0000000000002DFC loc_2DFC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002DFC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E01                 setz    dl
.text:0000000000002E04                 test    al, al
.text:0000000000002E06                 jz      loc_3058
.text:0000000000002E0C
.text:0000000000002E0C loc_2E0C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002E0C                 xor     r12d, r12d
.text:0000000000002E0F                 xor     eax, eax
.text:0000000000002E11                 nop     dword ptr [rax+00000000h]
.text:0000000000002E18
.text:0000000000002E18 loc_2E18:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002E18                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002E18                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002E1D                 jnz     loc_2F32
.text:0000000000002E23                 test    dl, dl
.text:0000000000002E25                 jnz     loc_2F32
.text:0000000000002E2B
.text:0000000000002E2B loc_2E2B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002E2B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002E30                 test    rsi, rsi
.text:0000000000002E33                 jz      short loc_2E49
.text:0000000000002E35                 mov     edx, ebx
.text:0000000000002E37                 shr     dl, 5
.text:0000000000002E3A                 movzx   edx, dl
.text:0000000000002E3D                 mov     edx, [rsi+rdx*4]
.text:0000000000002E40                 bt      edx, ebx
.text:0000000000002E43                 jb      loc_2F93
.text:0000000000002E49
.text:0000000000002E49 loc_2E49:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002E49                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002E49                 test    r10b, r10b
.text:0000000000002E4C                 jnz     loc_2F93
.text:0000000000002E52                 xor     eax, 1
.text:0000000000002E55                 add     rbp, 1
.text:0000000000002E59                 and     eax, r8d
.text:0000000000002E5C
.text:0000000000002E5C loc_2E5C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002E5C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002E5C                 test    al, al
.text:0000000000002E5E                 jz      short loc_2E80
.text:0000000000002E60                 cmp     r13, r15
.text:0000000000002E63                 jbe     short loc_2E6A
.text:0000000000002E65                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002E6A
.text:0000000000002E6A loc_2E6A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002E6A                 lea     rax, [r15+1]
.text:0000000000002E6E                 cmp     r13, rax
.text:0000000000002E71                 jbe     short loc_2E79
.text:0000000000002E73                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002E79
.text:0000000000002E79 loc_2E79:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002E79                 add     r15, 2
.text:0000000000002E7D                 xor     r8d, r8d
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002E80                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002E80                 cmp     r15, r13
.text:0000000000002E83                 jnb     short loc_2E89
.text:0000000000002E85                 mov     [r14+r15], bl
.text:0000000000002E89
.text:0000000000002E89 loc_2E89:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002E89                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002E8E                 add     r15, 1
.text:0000000000002E92                 mov     eax, 0
.text:0000000000002E97                 test    r12b, r12b
.text:0000000000002E9A                 cmovz   edi, eax
.text:0000000000002E9D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002EA2                 jmp     loc_2CD8
.text:0000000000002EA2 ; ---------------------------------------------------------------------------
.text:0000000000002EA7                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002EB0                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:0000000000002EB0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002EB3
.text:0000000000002EB3 loc_2EB3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EB3                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000002EB3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002EB7                 cmp     eax, 2
.text:0000000000002EBA                 jz      loc_3478
.text:0000000000002EC0                 cmp     eax, 5
.text:0000000000002EC3                 jz      loc_3438
.text:0000000000002EC9                 cmp     eax, 2
.text:0000000000002ECC                 mov     ebx, 3Fh ; '?'
.text:0000000000002ED1                 setz    dl
.text:0000000000002ED4                 xor     r12d, r12d
.text:0000000000002ED7                 xor     eax, eax
.text:0000000000002ED9                 jmp     loc_2E18
.text:0000000000002ED9 ; ---------------------------------------------------------------------------
.text:0000000000002EDE                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002EE0                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:0000000000002EE0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002EE3
.text:0000000000002EE3 loc_2EE3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EE3                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000002EE3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002EE8                 jz      loc_33F0
.text:0000000000002EEE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002EF3                 xor     edx, edx
.text:0000000000002EF5                 xor     eax, eax
.text:0000000000002EF7                 mov     ebx, 27h ; '''
.text:0000000000002EFC                 jmp     loc_2E18
.text:0000000000002EFC ; ---------------------------------------------------------------------------
.text:0000000000002F01                 align 8
.text:0000000000002F08
.text:0000000000002F08 loc_2F08:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F08                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000002F08                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002F0D                 mov     ebx, 74h ; 't'
.text:0000000000002F12
.text:0000000000002F12 loc_2F12:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002F12                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002F12                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F17                 setz    al
.text:0000000000002F1A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002F1E                 jnz     loc_306E
.text:0000000000002F24
.text:0000000000002F24 loc_2F24:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002F24                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002F24                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002F29                 jnz     short loc_2F90
.text:0000000000002F2B
.text:0000000000002F2B loc_2F2B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002F2B                 mov     ebx, edx
.text:0000000000002F2D                 xor     r12d, r12d
.text:0000000000002F30                 xor     eax, eax
.text:0000000000002F32
.text:0000000000002F32 loc_2F32:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002F32                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002F32                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F37                 jnz     loc_2E2B
.text:0000000000002F3D                 jmp     loc_2E49
.text:0000000000002F3D ; ---------------------------------------------------------------------------
.text:0000000000002F42                 align 8
.text:0000000000002F48
.text:0000000000002F48 loc_2F48:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F48                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000002F48                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002F4D                 mov     ebx, 62h ; 'b'
.text:0000000000002F52                 jmp     short loc_2F24
.text:0000000000002F52 ; ---------------------------------------------------------------------------
.text:0000000000002F54                 align 8
.text:0000000000002F58
.text:0000000000002F58 loc_2F58:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F58                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000002F58                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002F5D                 jz      loc_3330
.text:0000000000002F63                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002F68                 jz      loc_3180
.text:0000000000002F6E
.text:0000000000002F6E loc_2F6E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002F6E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F73                 jz      loc_3180
.text:0000000000002F79                 cmp     [rsp+0E8h+n], 0
.text:0000000000002F7F                 jnz     loc_333B
.text:0000000000002F85                 mov     ebx, 5Ch ; '\'
.text:0000000000002F8A                 nop     word ptr [rax+rax+00h]
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002F90                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002F90                 xor     r12d, r12d
.text:0000000000002F93
.text:0000000000002F93 loc_2F93:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002F93                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002F93                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F98                 setz    dl
.text:0000000000002F9B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FA0                 mov     eax, edx
.text:0000000000002FA2                 jnz     loc_37F8
.text:0000000000002FA8                 mov     eax, r8d
.text:0000000000002FAB                 xor     eax, 1
.text:0000000000002FAE                 and     al, dl
.text:0000000000002FB0                 jz      short loc_2FE1
.text:0000000000002FB2                 cmp     r13, r15
.text:0000000000002FB5                 jbe     short loc_2FBC
.text:0000000000002FB7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002FBC
.text:0000000000002FBC loc_2FBC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000002FBC                 lea     rdx, [r15+1]
.text:0000000000002FC0                 cmp     r13, rdx
.text:0000000000002FC3                 jbe     short loc_2FCB
.text:0000000000002FC5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002FCB
.text:0000000000002FCB loc_2FCB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000002FCB                 lea     rdx, [r15+2]
.text:0000000000002FCF                 cmp     r13, rdx
.text:0000000000002FD2                 jbe     short loc_2FDA
.text:0000000000002FD4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002FDA
.text:0000000000002FDA loc_2FDA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000002FDA                 add     r15, 3
.text:0000000000002FDE                 mov     r8d, eax
.text:0000000000002FE1
.text:0000000000002FE1 loc_2FE1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002FE1                 cmp     r13, r15
.text:0000000000002FE4                 jbe     short loc_2FEB
.text:0000000000002FE6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002FEB
.text:0000000000002FEB loc_2FEB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000002FEB                 add     r15, 1
.text:0000000000002FEF                 add     rbp, 1
.text:0000000000002FF3                 jmp     loc_2E80
.text:0000000000002FF3 ; ---------------------------------------------------------------------------
.text:0000000000002FF8                 align 20h
.text:0000000000003000
.text:0000000000003000 loc_3000:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003000                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000003000                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003005                 jnz     loc_31D3
.text:000000000000300B                 xor     edx, edx
.text:000000000000300D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003012                 jz      loc_2F2B
.text:0000000000003018                 add     rbp, 1
.text:000000000000301C                 jmp     loc_2CD8
.text:000000000000301C ; ---------------------------------------------------------------------------
.text:0000000000003021                 align 8
.text:0000000000003028
.text:0000000000003028 loc_3028:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003028                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000003028                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000302D                 setz    dl
.text:0000000000003030                 xor     eax, eax
.text:0000000000003032                 jmp     loc_2E18
.text:0000000000003032 ; ---------------------------------------------------------------------------
.text:0000000000003037                 align 20h
.text:0000000000003040
.text:0000000000003040 loc_3040:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003040                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000003040                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003045                 mov     ebx, 61h ; 'a'
.text:000000000000304A                 jmp     loc_2F24
.text:000000000000304A ; ---------------------------------------------------------------------------
.text:000000000000304F                 align 10h
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003050                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000003050                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003055                 setz    dl
.text:0000000000003058
.text:0000000000003058 loc_3058:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003058                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003058                 test    rbp, rbp
.text:000000000000305B                 jnz     loc_2E0C
.text:0000000000003061
.text:0000000000003061 loc_3061:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003061                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003061                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003066                 and     al, dl
.text:0000000000003068                 jz      loc_2E18
.text:000000000000306E
.text:000000000000306E loc_306E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000306E                 mov     rbp, r11
.text:0000000000003071                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003079                 jmp     loc_3779
.text:0000000000003079 ; ---------------------------------------------------------------------------
.text:000000000000307E                 align 20h
.text:0000000000003080
.text:0000000000003080 loc_3080:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003080                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000003080                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003085                 setz    dl
.text:0000000000003088                 xor     r12d, r12d
.text:000000000000308B                 jmp     short loc_3061
.text:000000000000308B ; ---------------------------------------------------------------------------
.text:000000000000308D                 align 10h
.text:0000000000003090
.text:0000000000003090 loc_3090:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003090                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:0000000000003090                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003095                 mov     ebx, 20h ; ' '
.text:000000000000309A                 setz    dl
.text:000000000000309D                 jmp     short loc_3061
.text:000000000000309D ; ---------------------------------------------------------------------------
.text:000000000000309F                 align 20h
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030A0                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:00000000000030A0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000030A5                 mov     ebx, 72h ; 'r'
.text:00000000000030AA                 jmp     loc_2F12
.text:00000000000030AA ; ---------------------------------------------------------------------------
.text:00000000000030AF                 align 10h
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030B0                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:00000000000030B0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000030B5                 mov     ebx, 66h ; 'f'
.text:00000000000030BA                 jmp     loc_2F24
.text:00000000000030BA ; ---------------------------------------------------------------------------
.text:00000000000030BF                 align 20h
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030C0                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:00000000000030C0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000030C5                 mov     ebx, 76h ; 'v'
.text:00000000000030CA                 jmp     loc_2F24
.text:00000000000030CA ; ---------------------------------------------------------------------------
.text:00000000000030CF                 align 10h
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030D0                                         ; DATA XREF: .rodata:jpt_2DDE↓o
.text:00000000000030D0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000030D5                 mov     ebx, 6Eh ; 'n'
.text:00000000000030DA                 jmp     loc_2F12
.text:00000000000030DA ; ---------------------------------------------------------------------------
.text:00000000000030DF                 align 20h
.text:00000000000030E0
.text:00000000000030E0 def_316A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000030E0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000030E0                                         ; DATA XREF: ...
.text:00000000000030E0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000030E3                 nop     dword ptr [rax+rax+00h]
.text:00000000000030E8
.text:00000000000030E8 def_2DDE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000030E8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000030E8                                         ; DATA XREF: ...
.text:00000000000030E8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000030EE                 jnz     loc_3498
.text:00000000000030F4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000030F9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000030FE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003103                 call    ___ctype_b_loc
.text:0000000000003108                 mov     rcx, [rax]
.text:000000000000310B                 movzx   edx, bl
.text:000000000000310E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003114                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000311A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000311F                 mov     edi, 1
.text:0000000000003124                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003128                 and     ax, 4000h
.text:000000000000312C                 setnz   r12b
.text:0000000000003130                 setz    al
.text:0000000000003133                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003137
.text:0000000000003137 loc_3137:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003137                 test    al, al
.text:0000000000003139                 jnz     loc_3AD1
.text:000000000000313F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003144                 setz    dl
.text:0000000000003147                 jmp     loc_2E18
.text:0000000000003147 ; ---------------------------------------------------------------------------
.text:000000000000314C                 align 10h
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003150                 movzx   ebx, byte ptr [r9]
.text:0000000000003154                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003157                 ja      short def_316A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003159                 lea     rcx, jpt_316A
.text:0000000000003160                 movzx   edx, bl
.text:0000000000003163                 movsxd  rax, ds:(jpt_316A - 67C8h)[rcx+rdx*4]
.text:0000000000003167                 add     rax, rcx
.text:000000000000316A                 jmp     rax             ; switch jump
.text:000000000000316A ; ---------------------------------------------------------------------------
.text:000000000000316C                 align 10h
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003170                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:0000000000003170                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003173                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003178                 jnz     loc_2F6E
.text:000000000000317E                 xchg    ax, ax
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003180                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003180                 mov     edx, 5Ch ; '\'
.text:0000000000003185                 mov     ebx, 5Ch ; '\'
.text:000000000000318A                 jmp     loc_2F24
.text:000000000000318A ; ---------------------------------------------------------------------------
.text:000000000000318F                 align 10h
.text:0000000000003190
.text:0000000000003190 loc_3190:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003190                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:0000000000003190                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003195                 xor     r10d, r10d
.text:0000000000003198                 mov     ebx, 66h ; 'f'
.text:000000000000319D                 jmp     loc_2F24
.text:000000000000319D ; ---------------------------------------------------------------------------
.text:00000000000031A2                 align 8
.text:00000000000031A8
.text:00000000000031A8 loc_31A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031A8                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:00000000000031A8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000031AD                 xor     r10d, r10d
.text:00000000000031B0                 mov     ebx, 6Eh ; 'n'
.text:00000000000031B5                 jmp     loc_2F12
.text:00000000000031B5 ; ---------------------------------------------------------------------------
.text:00000000000031BA                 align 20h
.text:00000000000031C0
.text:00000000000031C0 loc_31C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031C0                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:00000000000031C0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000031C5                 jmp     loc_2F90
.text:00000000000031C5 ; ---------------------------------------------------------------------------
.text:00000000000031CA                 align 10h
.text:00000000000031D0
.text:00000000000031D0 loc_31D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031D0                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:00000000000031D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000031D3
.text:00000000000031D3 loc_31D3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000031D3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031D8                 setz    dl
.text:00000000000031DB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000031E0                 jnz     loc_3D7A
.text:00000000000031E6                 mov     eax, r8d
.text:00000000000031E9                 mov     rcx, r15
.text:00000000000031EC                 xor     eax, 1
.text:00000000000031EF                 and     al, dl
.text:00000000000031F1                 jz      short loc_3220
.text:00000000000031F3                 cmp     r13, r15
.text:00000000000031F6                 jbe     short loc_31FD
.text:00000000000031F8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000031FD
.text:00000000000031FD loc_31FD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000031FD                 lea     rcx, [r15+1]
.text:0000000000003201                 cmp     r13, rcx
.text:0000000000003204                 jbe     short loc_320C
.text:0000000000003206                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000320C
.text:000000000000320C loc_320C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000320C                 lea     rcx, [r15+2]
.text:0000000000003210                 cmp     r13, rcx
.text:0000000000003213                 ja      loc_3849
.text:0000000000003219
.text:0000000000003219 loc_3219:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003219                 lea     rcx, [r15+3]
.text:000000000000321D                 mov     r8d, eax
.text:0000000000003220
.text:0000000000003220 loc_3220:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003220                 cmp     r13, rcx
.text:0000000000003223                 jbe     short loc_322A
.text:0000000000003225                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000322A
.text:000000000000322A loc_322A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000322A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000322F                 lea     r15, [rcx+1]
.text:0000000000003233                 jz      loc_3839
.text:0000000000003239                 lea     rax, [rbp+1]
.text:000000000000323D                 cmp     rax, r11
.text:0000000000003240                 jnb     short loc_325B
.text:0000000000003242                 mov     rax, [rsp+0E8h+s]
.text:0000000000003247                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000324C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003250                 sub     eax, 30h ; '0'
.text:0000000000003253                 cmp     al, 9
.text:0000000000003255                 jbe     loc_3A89
.text:000000000000325B
.text:000000000000325B loc_325B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000325B                 mov     eax, r12d
.text:000000000000325E                 mov     ebx, 30h ; '0'
.text:0000000000003263                 xor     r12d, r12d
.text:0000000000003266                 jmp     loc_2E18
.text:0000000000003266 ; ---------------------------------------------------------------------------
.text:000000000000326B                 align 10h
.text:0000000000003270
.text:0000000000003270 loc_3270:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003270                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:0000000000003270                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003275                 mov     r12d, r10d
.text:0000000000003278                 setz    dl
.text:000000000000327B                 xor     r10d, r10d
.text:000000000000327E                 xor     eax, eax
.text:0000000000003280                 jmp     loc_2E18
.text:0000000000003280 ; ---------------------------------------------------------------------------
.text:0000000000003285                 align 8
.text:0000000000003288
.text:0000000000003288 loc_3288:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003288                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:0000000000003288                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000328D                 setz    dl
.text:0000000000003290                 xor     r10d, r10d
.text:0000000000003293                 jmp     loc_3058
.text:0000000000003293 ; ---------------------------------------------------------------------------
.text:0000000000003298                 align 20h
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032A0                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:00000000000032A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000032A5                 setz    dl
.text:00000000000032A8                 xor     r10d, r10d
.text:00000000000032AB                 xor     r12d, r12d
.text:00000000000032AE                 jmp     loc_3061
.text:00000000000032AE ; ---------------------------------------------------------------------------
.text:00000000000032B3                 align 8
.text:00000000000032B8
.text:00000000000032B8 loc_32B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032B8                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:00000000000032B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000032BD                 mov     r12d, r10d
.text:00000000000032C0                 mov     ebx, 20h ; ' '
.text:00000000000032C5                 setz    dl
.text:00000000000032C8                 xor     r10d, r10d
.text:00000000000032CB                 jmp     loc_3061
.text:00000000000032D0 ; ---------------------------------------------------------------------------
.text:00000000000032D0
.text:00000000000032D0 loc_32D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032D0                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:00000000000032D0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000032D5                 xor     r10d, r10d
.text:00000000000032D8                 mov     ebx, 72h ; 'r'
.text:00000000000032DD                 jmp     loc_2F12
.text:00000000000032DD ; ---------------------------------------------------------------------------
.text:00000000000032E2                 align 8
.text:00000000000032E8
.text:00000000000032E8 loc_32E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032E8                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:00000000000032E8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000032ED                 jmp     loc_2F90
.text:00000000000032ED ; ---------------------------------------------------------------------------
.text:00000000000032F2                 align 8
.text:00000000000032F8
.text:00000000000032F8 loc_32F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032F8                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:00000000000032F8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000032FD                 xor     r10d, r10d
.text:0000000000003300                 mov     ebx, 74h ; 't'
.text:0000000000003305                 jmp     loc_2F12
.text:0000000000003305 ; ---------------------------------------------------------------------------
.text:000000000000330A                 align 10h
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003310                                         ; DATA XREF: .rodata:jpt_316A↓o
.text:0000000000003310                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003315                 jmp     loc_2F90
.text:0000000000003315 ; ---------------------------------------------------------------------------
.text:000000000000331A                 align 20h
.text:0000000000003320
.text:0000000000003320 loc_3320:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003320                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003320                 xor     r10d, r10d
.text:0000000000003323                 jmp     loc_2DC0
.text:0000000000003323 ; ---------------------------------------------------------------------------
.text:0000000000003328                 align 10h
.text:0000000000003330
.text:0000000000003330 loc_3330:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003330                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003335                 jnz     loc_3CA0
.text:000000000000333B
.text:000000000000333B loc_333B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000333B                 add     rbp, 1
.text:000000000000333F                 mov     eax, r8d
.text:0000000000003342                 xor     r12d, r12d
.text:0000000000003345                 mov     ebx, 5Ch ; '\'
.text:000000000000334A                 jmp     loc_2E5C
.text:000000000000334A ; ---------------------------------------------------------------------------
.text:000000000000334F                 align 10h
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003350                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003355                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000335A                 mov     r12d, r8d
.text:000000000000335D                 mov     rbp, r11
.text:0000000000003360                 setz    dl
.text:0000000000003363                 mov     eax, ebx
.text:0000000000003365                 test    r15, r15
.text:0000000000003368                 setz    cl
.text:000000000000336B                 and     eax, edx
.text:000000000000336D                 and     al, cl
.text:000000000000336F                 jnz     loc_3DD6
.text:0000000000003375                 mov     eax, ebx
.text:0000000000003377                 xor     eax, 1
.text:000000000000337A                 and     dl, al
.text:000000000000337C                 jz      loc_3CEC
.text:0000000000003382                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003387                 jz      loc_3CEA
.text:000000000000338D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003392                 jnz     loc_3D8D
.text:0000000000003398                 test    r13, r13
.text:000000000000339B                 setz    al
.text:000000000000339E                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000033A4                 setnz   dl
.text:00000000000033A7                 and     al, dl
.text:00000000000033A9                 jz      loc_3DCC
.text:00000000000033AF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000033B4
.text:00000000000033B4 loc_33B4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000033B4                 lea     rbx, asc_653D   ; "'"
.text:00000000000033BB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000033BF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033C7                 mov     r15d, 1
.text:00000000000033CD                 mov     [rsp+0E8h+n], 1
.text:00000000000033D6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000033DB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000033E0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000033E4                 jmp     loc_2CC3
.text:00000000000033E4 ; ---------------------------------------------------------------------------
.text:00000000000033E9                 align 10h
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000033F0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000033F5                 jnz     loc_3CA0
.text:00000000000033FB                 test    r13, r13
.text:00000000000033FE                 jz      loc_3800
.text:0000000000003404                 xor     edx, edx
.text:0000000000003406                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000340C                 jnz     loc_3800
.text:0000000000003412
.text:0000000000003412 loc_3412:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003412                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003412                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003417                 add     r15, 3
.text:000000000000341B                 xor     eax, eax
.text:000000000000341D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003422                 xor     r8d, r8d
.text:0000000000003425                 mov     r13, rdx
.text:0000000000003428                 mov     ebx, 27h ; '''
.text:000000000000342D                 jmp     loc_2E49
.text:000000000000342D ; ---------------------------------------------------------------------------
.text:0000000000003432                 align 8
.text:0000000000003438
.text:0000000000003438 loc_3438:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003438                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000343D                 jz      short loc_3460
.text:000000000000343F                 lea     rcx, [rbp+2]
.text:0000000000003443                 cmp     rcx, r11
.text:0000000000003446                 jnb     short loc_3460
.text:0000000000003448                 mov     rax, [rsp+0E8h+s]
.text:000000000000344D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003452                 jz      loc_3BE2
.text:0000000000003458                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003460                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003460                 xor     edx, edx
.text:0000000000003462                 xor     r12d, r12d
.text:0000000000003465                 xor     eax, eax
.text:0000000000003467                 mov     ebx, 3Fh ; '?'
.text:000000000000346C                 jmp     loc_2E18
.text:000000000000346C ; ---------------------------------------------------------------------------
.text:0000000000003471                 align 8
.text:0000000000003478
.text:0000000000003478 loc_3478:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003478                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000347D                 jnz     loc_3CA0
.text:0000000000003483                 xor     r12d, r12d
.text:0000000000003486                 xor     eax, eax
.text:0000000000003488                 mov     ebx, 3Fh ; '?'
.text:000000000000348D                 jmp     loc_2E49
.text:000000000000348D ; ---------------------------------------------------------------------------
.text:0000000000003492                 align 8
.text:0000000000003498
.text:0000000000003498 loc_3498:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003498                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000034A0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000034A4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000034B0                 mov     [rsp+0E8h+ps], rax
.text:00000000000034B5                 jnz     short loc_34E4
.text:00000000000034B7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000034BC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000034C1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000034C6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000034CB                 call    _strlen
.text:00000000000034D0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000034D6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000034DC                 mov     r11, rax
.text:00000000000034DF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000034E4
.text:00000000000034E4 loc_34E4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000034E4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000034EC                 xor     ecx, ecx
.text:00000000000034EE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000034F2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000034F7                 mov     rbx, rcx
.text:00000000000034FA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003502                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003507                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000350C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003514                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003519                 mov     [rsp+0E8h+var_78], r13
.text:000000000000351E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003523
.text:0000000000003523 loc_3523:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003523                 mov     rax, [rsp+0E8h+s]
.text:0000000000003528                 lea     r14, [rbp+rbx+0]
.text:000000000000352D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003532                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003537                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000353C                 lea     r13, [rax+r14]
.text:0000000000003540                 sub     rdx, r14
.text:0000000000003543                 mov     rsi, r13
.text:0000000000003546                 call    rpl_mbrtowc
.text:000000000000354B                 test    rax, rax
.text:000000000000354E                 mov     r15, rax
.text:0000000000003551                 jz      short loc_35A1
.text:0000000000003553                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003557                 jz      loc_3B75
.text:000000000000355D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003561                 jz      loc_3B01
.text:0000000000003567                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000356C                 setz    al
.text:000000000000356F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003573                 jnz     loc_3710
.text:0000000000003579
.text:0000000000003579 loc_3579:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003579                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003579                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003580                 call    _iswprint
.text:0000000000003585                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000358A                 test    eax, eax
.text:000000000000358C                 mov     eax, 0
.text:0000000000003591                 cmovz   r12d, eax
.text:0000000000003595                 add     rbx, r15
.text:0000000000003598                 call    _mbsinit
.text:000000000000359D                 test    eax, eax
.text:000000000000359F                 jz      short loc_3523
.text:00000000000035A1
.text:00000000000035A1 loc_35A1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000035A1                 mov     edx, r12d
.text:00000000000035A4                 mov     rdi, rbx
.text:00000000000035A7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000035AD                 xor     edx, 1
.text:00000000000035B0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000035B5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000035BB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000035BF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000035C7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000035CC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000035D1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000035D6
.text:00000000000035D6 loc_35D6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000035D6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000035D6                 cmp     rdi, 1
.text:00000000000035DA                 jbe     loc_3BDB
.text:00000000000035E0
.text:00000000000035E0 loc_35E0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000035E0                 mov     rcx, rdi
.text:00000000000035E3                 xor     esi, esi
.text:00000000000035E5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000035EB                 add     rcx, rbp
.text:00000000000035EE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000035F3                 jmp     loc_36AE
.text:00000000000035F3 ; ---------------------------------------------------------------------------
.text:00000000000035F8                 align 20h
.text:0000000000003600
.text:0000000000003600 loc_3600:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003600                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003605                 setz    al
.text:0000000000003608                 test    r9b, r9b
.text:000000000000360B                 jnz     loc_3AC0
.text:0000000000003611                 mov     esi, r8d
.text:0000000000003614                 xor     esi, 1
.text:0000000000003617                 and     al, sil
.text:000000000000361A                 jz      short loc_364B
.text:000000000000361C                 cmp     r13, r15
.text:000000000000361F                 jbe     short loc_3626
.text:0000000000003621                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003626
.text:0000000000003626 loc_3626:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003626                 lea     rsi, [r15+1]
.text:000000000000362A                 cmp     r13, rsi
.text:000000000000362D                 jbe     short loc_3635
.text:000000000000362F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003635
.text:0000000000003635 loc_3635:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003635                 lea     rsi, [r15+2]
.text:0000000000003639                 cmp     r13, rsi
.text:000000000000363C                 jbe     short loc_3644
.text:000000000000363E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003644
.text:0000000000003644 loc_3644:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003644                 add     r15, 3
.text:0000000000003648                 mov     r8d, eax
.text:000000000000364B
.text:000000000000364B loc_364B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000364B                 cmp     r13, r15
.text:000000000000364E                 jbe     short loc_3655
.text:0000000000003650                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003655
.text:0000000000003655 loc_3655:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003655                 lea     rax, [r15+1]
.text:0000000000003659                 cmp     r13, rax
.text:000000000000365C                 jbe     short loc_366B
.text:000000000000365E                 mov     eax, ebx
.text:0000000000003660                 shr     al, 6
.text:0000000000003663                 add     eax, 30h ; '0'
.text:0000000000003666                 mov     [r14+r15+1], al
.text:000000000000366B
.text:000000000000366B loc_366B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000366B                 lea     rax, [r15+2]
.text:000000000000366F                 cmp     r13, rax
.text:0000000000003672                 jbe     short loc_3684
.text:0000000000003674                 mov     eax, ebx
.text:0000000000003676                 shr     al, 3
.text:0000000000003679                 and     eax, 7
.text:000000000000367C                 add     eax, 30h ; '0'
.text:000000000000367F                 mov     [r14+r15+2], al
.text:0000000000003684
.text:0000000000003684 loc_3684:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003684                 and     ebx, 7
.text:0000000000003687                 add     rbp, 1
.text:000000000000368B                 add     r15, 3
.text:000000000000368F                 add     ebx, 30h ; '0'
.text:0000000000003692                 cmp     rbp, rcx
.text:0000000000003695                 jnb     loc_2E80
.text:000000000000369B                 mov     esi, edx
.text:000000000000369D
.text:000000000000369D loc_369D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000369D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000369D                 cmp     r13, r15
.text:00000000000036A0                 jbe     short loc_36A6
.text:00000000000036A2                 mov     [r14+r15], bl
.text:00000000000036A6
.text:00000000000036A6 loc_36A6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000036A6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000036AA                 add     r15, 1
.text:00000000000036AE
.text:00000000000036AE loc_36AE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000036AE                 test    dl, dl
.text:00000000000036B0                 jnz     loc_3600
.text:00000000000036B6                 mov     eax, esi
.text:00000000000036B8                 xor     eax, 1
.text:00000000000036BB                 and     eax, r8d
.text:00000000000036BE                 test    r10b, r10b
.text:00000000000036C1                 jz      short loc_36D1
.text:00000000000036C3                 cmp     r13, r15
.text:00000000000036C6                 jbe     short loc_36CD
.text:00000000000036C8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000036CD
.text:00000000000036CD loc_36CD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000036CD                 add     r15, 1
.text:00000000000036D1
.text:00000000000036D1 loc_36D1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000036D1                 add     rbp, 1
.text:00000000000036D5                 cmp     rbp, rcx
.text:00000000000036D8                 jnb     loc_2E5C
.text:00000000000036DE                 test    al, al
.text:00000000000036E0                 jz      loc_3ADE
.text:00000000000036E6                 cmp     r13, r15
.text:00000000000036E9                 jbe     short loc_36F0
.text:00000000000036EB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000036F0
.text:00000000000036F0 loc_36F0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000036F0                 lea     rax, [r15+1]
.text:00000000000036F4                 cmp     r13, rax
.text:00000000000036F7                 jbe     short loc_36FF
.text:00000000000036F9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000036FF
.text:00000000000036FF loc_36FF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000036FF                 add     r15, 2
.text:0000000000003703                 xor     r10d, r10d
.text:0000000000003706                 xor     r8d, r8d
.text:0000000000003709                 jmp     short loc_369D
.text:0000000000003709 ; ---------------------------------------------------------------------------
.text:000000000000370B                 align 10h
.text:0000000000003710
.text:0000000000003710 loc_3710:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003710                 cmp     r15, 1
.text:0000000000003714                 jz      loc_3579
.text:000000000000371A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000371F                 lea     rcx, [rdi+r15]
.text:0000000000003723                 lea     rdx, [rdi+r14+1]
.text:0000000000003728                 lea     r8, [rcx+r14]
.text:000000000000372C                 jmp     short loc_373D
.text:000000000000372C ; ---------------------------------------------------------------------------
.text:000000000000372E                 align 10h
.text:0000000000003730
.text:0000000000003730 loc_3730:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003730                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003730                 add     rdx, 1
.text:0000000000003734                 cmp     r8, rdx
.text:0000000000003737                 jz      loc_3579
.text:000000000000373D
.text:000000000000373D loc_373D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000373D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003740                 sub     ecx, 5Bh ; '['
.text:0000000000003743                 cmp     cl, 21h ; '!'
.text:0000000000003746                 ja      short loc_3730
.text:0000000000003748                 mov     esi, 1
.text:000000000000374D                 shl     rsi, cl
.text:0000000000003750                 mov     rcx, rsi
.text:0000000000003753                 mov     rsi, 20000002Bh
.text:000000000000375D                 test    rcx, rsi
.text:0000000000003760                 jz      short loc_3730
.text:0000000000003762                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003767                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000376C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003771                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003779
.text:0000000000003779 loc_3779:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003779                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003779                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000377E                 jz      short loc_3790
.text:0000000000003780                 test    al, al
.text:0000000000003782                 mov     eax, 4
.text:0000000000003787                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000378C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003790
.text:0000000000003790 loc_3790:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003790                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003790                 sub     rsp, 8
.text:0000000000003794                 mov     rcx, rbp
.text:0000000000003797                 mov     rsi, r13
.text:000000000000379A                 push    [rsp+0F0h+var_88]
.text:000000000000379E                 push    [rsp+0F8h+var_80]
.text:00000000000037A2                 mov     rdi, r14
.text:00000000000037A5                 push    0
.text:00000000000037A7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000037AF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000037B4                 mov     rdx, [rsp+108h+s]
.text:00000000000037B9                 and     r9d, 0FFFFFFFDh
.text:00000000000037BD                 call    quotearg_buffer_restyled
.text:00000000000037C2                 add     rsp, 20h
.text:00000000000037C6                 mov     r15, rax
.text:00000000000037C9
.text:00000000000037C9 loc_37C9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000037C9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000037C9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000037D1                 xor     rbx, fs:28h
.text:00000000000037DA                 mov     rax, r15
.text:00000000000037DD                 jnz     loc_3DE3
.text:00000000000037E3                 add     rsp, 0B8h
.text:00000000000037EA                 pop     rbx
.text:00000000000037EB                 pop     rbp
.text:00000000000037EC                 pop     r12
.text:00000000000037EE                 pop     r13
.text:00000000000037F0                 pop     r14
.text:00000000000037F2                 pop     r15
.text:00000000000037F4                 retn
.text:00000000000037F4 ; ---------------------------------------------------------------------------
.text:00000000000037F5                 align 8
.text:00000000000037F8
.text:00000000000037F8 loc_37F8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000037F8                 mov     rbp, r11
.text:00000000000037FB                 jmp     loc_3779
.text:0000000000003800 ; ---------------------------------------------------------------------------
.text:0000000000003800
.text:0000000000003800 loc_3800:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003800                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003800                 cmp     r13, r15
.text:0000000000003803                 jbe     short loc_380A
.text:0000000000003805                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000380A
.text:000000000000380A loc_380A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000380A                 lea     rax, [r15+1]
.text:000000000000380E                 cmp     r13, rax
.text:0000000000003811                 jbe     short loc_3819
.text:0000000000003813                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003819
.text:0000000000003819 loc_3819:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003819                 lea     rax, [r15+2]
.text:000000000000381D                 cmp     r13, rax
.text:0000000000003820                 jbe     loc_3E12
.text:0000000000003826                 mov     rdx, r13
.text:0000000000003829                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000382F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003834                 jmp     loc_3412
.text:0000000000003839 ; ---------------------------------------------------------------------------
.text:0000000000003839
.text:0000000000003839 loc_3839:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003839                 mov     eax, r12d
.text:000000000000383C                 mov     ebx, 30h ; '0'
.text:0000000000003841                 xor     r12d, r12d
.text:0000000000003844                 jmp     loc_2E49
.text:0000000000003849 ; ---------------------------------------------------------------------------
.text:0000000000003849
.text:0000000000003849 loc_3849:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003849                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000384F                 jmp     loc_3219
.text:0000000000003854 ; ---------------------------------------------------------------------------
.text:0000000000003854
.text:0000000000003854 loc_3854:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003854                                         ; DATA XREF: .rodata:jpt_2C81↓o
.text:0000000000003854                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003856                 jnz     loc_2C83        ; jumptable 00000000000121F1 case 1
.text:000000000000385C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003861
.text:0000000000003861 loc_3861:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003861                 test    r13, r13
.text:0000000000003864                 jnz     loc_3DFA
.text:000000000000386A                 lea     rax, asc_653D   ; "'"
.text:0000000000003871                 mov     [rsp+0E8h+var_98], 0
.text:000000000000387A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000387F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003884                 xor     r12d, r12d
.text:0000000000003887                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000388C                 mov     [rsp+0E8h+n], 1
.text:0000000000003895                 mov     [rsp+0E8h+s2], rax
.text:000000000000389A                 mov     r15d, 1
.text:00000000000038A0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000038A8                 jmp     loc_2CC3
.text:00000000000038A8 ; ---------------------------------------------------------------------------
.text:00000000000038AD                 align 10h
.text:00000000000038B0
.text:00000000000038B0 loc_38B0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000038B0                                         ; DATA XREF: .rodata:jpt_2C81↓o
.text:00000000000038B0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000038B2                 jnz     loc_3CAD
.text:00000000000038B8                 test    r13, r13
.text:00000000000038BB                 jz      loc_3AE6
.text:00000000000038C1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000038C5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038CA                 xor     r12d, r12d
.text:00000000000038CD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000038D2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038DB
.text:00000000000038DB loc_38DB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000038DB                 lea     rax, unk_653B
.text:00000000000038E2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000038E7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000038EC                 mov     [rsp+0E8h+n], 1
.text:00000000000038F5                 mov     r15d, 1
.text:00000000000038FB                 mov     [rsp+0E8h+s2], rax
.text:0000000000003900                 jmp     loc_2CC3
.text:0000000000003905 ; ---------------------------------------------------------------------------
.text:0000000000003905
.text:0000000000003905 loc_3905:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003905                                         ; DATA XREF: .rodata:jpt_2C81↓o
.text:0000000000003905                 lea     rax, unk_653B   ; jumptable 00000000000121F1 case 6
.text:000000000000390C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003911                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003916                 xor     r12d, r12d
.text:0000000000003919                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003922                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003927                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000392C                 mov     [rsp+0E8h+n], 1
.text:0000000000003935                 xor     r15d, r15d
.text:0000000000003938                 mov     [rsp+0E8h+s2], rax
.text:000000000000393D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003945                 jmp     loc_2CC3
.text:000000000000394A ; ---------------------------------------------------------------------------
.text:000000000000394A
.text:000000000000394A loc_394A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000394A                                         ; DATA XREF: .rodata:jpt_2C81↓o
.text:000000000000394A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000394F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003954                 xor     r12d, r12d
.text:0000000000003957                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003960                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003965                 xor     r15d, r15d
.text:0000000000003968                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000396D                 mov     [rsp+0E8h+n], 0
.text:0000000000003976                 mov     [rsp+0E8h+s2], 0
.text:000000000000397F                 jmp     loc_2CC3
.text:0000000000003984 ; ---------------------------------------------------------------------------
.text:0000000000003984
.text:0000000000003984 loc_3984:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003984                                         ; DATA XREF: .rodata:jpt_2C81↓o
.text:0000000000003984                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003989                 jz      short loc_39E1
.text:000000000000398B                 lea     rsi, asc_653F   ; "`"
.text:0000000000003992                 xor     edi, edi        ; domainname
.text:0000000000003994                 mov     edx, 5          ; category
.text:0000000000003999                 call    _dcgettext
.text:000000000000399E                 mov     rcx, rax
.text:00000000000039A1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000039A6                 lea     rax, asc_653F   ; "`"
.text:00000000000039AD                 cmp     rcx, rax
.text:00000000000039B0                 jz      loc_3D4E
.text:00000000000039B6
.text:00000000000039B6 loc_39B6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000039B6                 lea     rsi, asc_653D   ; "'"
.text:00000000000039BD                 xor     edi, edi        ; domainname
.text:00000000000039BF                 mov     edx, 5          ; category
.text:00000000000039C4                 call    _dcgettext
.text:00000000000039C9                 mov     rcx, rax
.text:00000000000039CC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000039D1                 lea     rax, asc_653D   ; "'"
.text:00000000000039D8                 cmp     rcx, rax
.text:00000000000039DB                 jz      loc_3D64
.text:00000000000039E1
.text:00000000000039E1 loc_39E1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000039E1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000039E1                 xor     r15d, r15d
.text:00000000000039E4                 test    ebx, ebx
.text:00000000000039E6                 jz      loc_3BAD
.text:00000000000039EC
.text:00000000000039EC loc_39EC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000039EC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000039EC                 test    ebx, ebx
.text:00000000000039EE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000039F3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000039F8                 xor     r12d, r12d
.text:00000000000039FB                 mov     rdi, rbx        ; s
.text:00000000000039FE                 call    _strlen
.text:0000000000003A03                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003A08                 mov     [rsp+0E8h+n], rax
.text:0000000000003A0D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A12                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A17                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A20                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003A25                 jmp     loc_2CC3
.text:0000000000003A2A ; ---------------------------------------------------------------------------
.text:0000000000003A2A
.text:0000000000003A2A loc_3A2A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A2A                                         ; DATA XREF: .rodata:jpt_2C81↓o
.text:0000000000003A2A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003A2F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A34                 xor     r12d, r12d
.text:0000000000003A37                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A40                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003A45                 xor     r15d, r15d
.text:0000000000003A48                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003A4D                 mov     [rsp+0E8h+n], 0
.text:0000000000003A56                 mov     [rsp+0E8h+s2], 0
.text:0000000000003A5F                 jmp     loc_2CC3
.text:0000000000003A64 ; ---------------------------------------------------------------------------
.text:0000000000003A64
.text:0000000000003A64 loc_3A64:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A64                                         ; DATA XREF: .rodata:jpt_2C81↓o
.text:0000000000003A64                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003A69                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A6E                 xor     r12d, r12d
.text:0000000000003A71                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A7A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003A7F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003A84                 jmp     loc_2CA3
.text:0000000000003A89 ; ---------------------------------------------------------------------------
.text:0000000000003A89
.text:0000000000003A89 loc_3A89:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003A89                 cmp     r13, r15
.text:0000000000003A8C                 jbe     short loc_3A93
.text:0000000000003A8E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003A93
.text:0000000000003A93 loc_3A93:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003A93                 lea     rax, [rcx+2]
.text:0000000000003A97                 cmp     r13, rax
.text:0000000000003A9A                 jbe     short loc_3AA2
.text:0000000000003A9C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003AA2
.text:0000000000003AA2 loc_3AA2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003AA2                 mov     eax, r12d
.text:0000000000003AA5                 lea     r15, [rcx+3]
.text:0000000000003AA9                 xor     r12d, r12d
.text:0000000000003AAC                 mov     ebx, 30h ; '0'
.text:0000000000003AB1                 jmp     loc_2E18
.text:0000000000003AB1 ; ---------------------------------------------------------------------------
.text:0000000000003AB6                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 loc_3AC0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003AC0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003AC5                 mov     rbp, r11
.text:0000000000003AC8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003ACC                 jmp     loc_3779
.text:0000000000003AD1 ; ---------------------------------------------------------------------------
.text:0000000000003AD1
.text:0000000000003AD1 loc_3AD1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003AD1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003AD6                 xor     r12d, r12d
.text:0000000000003AD9                 jmp     loc_35E0
.text:0000000000003ADE ; ---------------------------------------------------------------------------
.text:0000000000003ADE
.text:0000000000003ADE loc_3ADE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003ADE                 xor     r10d, r10d
.text:0000000000003AE1                 jmp     loc_369D
.text:0000000000003AE6 ; ---------------------------------------------------------------------------
.text:0000000000003AE6
.text:0000000000003AE6 loc_3AE6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003AE6                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AEF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003AF4                 xor     r12d, r12d
.text:0000000000003AF7                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003AFC                 jmp     loc_38DB
.text:0000000000003B01 ; ---------------------------------------------------------------------------
.text:0000000000003B01
.text:0000000000003B01 loc_3B01:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003B01                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003B06                 mov     rsi, r14
.text:0000000000003B09                 mov     rcx, r13
.text:0000000000003B0C                 mov     rax, rbx
.text:0000000000003B0F                 mov     rdi, rbx
.text:0000000000003B12                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003B18                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003B1D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003B25                 cmp     rsi, r11
.text:0000000000003B28                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003B2E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003B36                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003B3B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003B40                 jnb     short loc_3B68
.text:0000000000003B42                 cmp     byte ptr [rcx], 0
.text:0000000000003B45                 jnz     short loc_3B57
.text:0000000000003B47                 jmp     short loc_3B68
.text:0000000000003B47 ; ---------------------------------------------------------------------------
.text:0000000000003B49                 align 10h
.text:0000000000003B50
.text:0000000000003B50 loc_3B50:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003B50                 cmp     byte ptr [r9+rax], 0
.text:0000000000003B55                 jz      short loc_3B65
.text:0000000000003B57
.text:0000000000003B57 loc_3B57:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003B57                 add     rax, 1
.text:0000000000003B5B                 lea     rdx, [rbp+rax+0]
.text:0000000000003B60                 cmp     r11, rdx
.text:0000000000003B63                 ja      short loc_3B50
.text:0000000000003B65
.text:0000000000003B65 loc_3B65:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003B65                 mov     rdi, rax
.text:0000000000003B68
.text:0000000000003B68 loc_3B68:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003B68                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003B68                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003B6D                 xor     r12d, r12d
.text:0000000000003B70                 jmp     loc_35D6
.text:0000000000003B75 ; ---------------------------------------------------------------------------
.text:0000000000003B75
.text:0000000000003B75 loc_3B75:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003B75                 mov     rdi, rbx
.text:0000000000003B78                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003B7E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003B83                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003B89                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003B91                 xor     r12d, r12d
.text:0000000000003B94                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003B99                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003B9E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003BA3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003BA8                 jmp     loc_35D6
.text:0000000000003BAD ; ---------------------------------------------------------------------------
.text:0000000000003BAD
.text:0000000000003BAD loc_3BAD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003BAD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003BB2                 movzx   eax, byte ptr [rdx]
.text:0000000000003BB5                 test    al, al
.text:0000000000003BB7                 jz      loc_39EC
.text:0000000000003BBD                 nop     dword ptr [rax]
.text:0000000000003BC0
.text:0000000000003BC0 loc_3BC0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003BC0                 cmp     r13, r15
.text:0000000000003BC3                 jbe     short loc_3BC9
.text:0000000000003BC5                 mov     [r14+r15], al
.text:0000000000003BC9
.text:0000000000003BC9 loc_3BC9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003BC9                 add     r15, 1
.text:0000000000003BCD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003BD2                 test    al, al
.text:0000000000003BD4                 jnz     short loc_3BC0
.text:0000000000003BD6                 jmp     loc_39EC
.text:0000000000003BDB ; ---------------------------------------------------------------------------
.text:0000000000003BDB
.text:0000000000003BDB loc_3BDB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003BDB                 mov     eax, edx
.text:0000000000003BDD                 jmp     loc_3137
.text:0000000000003BE2 ; ---------------------------------------------------------------------------
.text:0000000000003BE2
.text:0000000000003BE2 loc_3BE2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003BE2                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003BE6                 cmp     bl, 3Eh ; '>'
.text:0000000000003BE9                 ja      loc_3460
.text:0000000000003BEF                 mov     rax, 7000A38200000000h
.text:0000000000003BF9                 bt      rax, rbx
.text:0000000000003BFD                 jnb     loc_3460
.text:0000000000003C03                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C08                 jnz     loc_3DF2
.text:0000000000003C0E                 cmp     r13, r15
.text:0000000000003C11                 jbe     short loc_3C18
.text:0000000000003C13                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003C18
.text:0000000000003C18 loc_3C18:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003C18                 lea     rax, [r15+1]
.text:0000000000003C1C                 cmp     r13, rax
.text:0000000000003C1F                 jbe     short loc_3C27
.text:0000000000003C21                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003C27
.text:0000000000003C27 loc_3C27:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003C27                 lea     rax, [r15+2]
.text:0000000000003C2B                 cmp     r13, rax
.text:0000000000003C2E                 jbe     short loc_3C36
.text:0000000000003C30                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003C36
.text:0000000000003C36 loc_3C36:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003C36                 lea     rax, [r15+3]
.text:0000000000003C3A                 cmp     r13, rax
.text:0000000000003C3D                 jbe     short loc_3C45
.text:0000000000003C3F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003C45
.text:0000000000003C45 loc_3C45:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003C45                 add     r15, 4
.text:0000000000003C49                 xor     edx, edx
.text:0000000000003C4B                 xor     r12d, r12d
.text:0000000000003C4E                 xor     eax, eax
.text:0000000000003C50                 mov     rbp, rcx
.text:0000000000003C53                 jmp     loc_2E18
.text:0000000000003C58 ; ---------------------------------------------------------------------------
.text:0000000000003C58
.text:0000000000003C58 loc_3C58:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C58                                         ; DATA XREF: .rodata:jpt_2C81↓o
.text:0000000000003C58                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003C5A                 jz      loc_3DE8
.text:0000000000003C60                 lea     rax, asc_653D   ; "'"
.text:0000000000003C67                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C6C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C71                 xor     r12d, r12d
.text:0000000000003C74                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C7D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003C82                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003C87                 mov     [rsp+0E8h+n], 1
.text:0000000000003C90                 xor     r15d, r15d
.text:0000000000003C93                 mov     [rsp+0E8h+s2], rax
.text:0000000000003C98                 jmp     loc_2CC3
.text:0000000000003C98 ; ---------------------------------------------------------------------------
.text:0000000000003C9D                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 loc_3CA0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003CA0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003CA0                 mov     rbp, r11
.text:0000000000003CA3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003CA8                 jmp     loc_3779
.text:0000000000003CAD ; ---------------------------------------------------------------------------
.text:0000000000003CAD
.text:0000000000003CAD loc_3CAD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003CAD                 lea     rax, unk_653B
.text:0000000000003CB4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003CB9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CBE                 xor     r12d, r12d
.text:0000000000003CC1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CCA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003CCF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003CD4                 mov     [rsp+0E8h+n], 1
.text:0000000000003CDD                 xor     r15d, r15d
.text:0000000000003CE0                 mov     [rsp+0E8h+s2], rax
.text:0000000000003CE5                 jmp     loc_2CC3
.text:0000000000003CEA ; ---------------------------------------------------------------------------
.text:0000000000003CEA
.text:0000000000003CEA loc_3CEA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003CEA                 mov     eax, edx
.text:0000000000003CEC
.text:0000000000003CEC loc_3CEC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003CEC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003CEC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003CF1                 test    rbx, rbx
.text:0000000000003CF4                 jz      short loc_3D22
.text:0000000000003CF6                 test    al, al
.text:0000000000003CF8                 jz      short loc_3D22
.text:0000000000003CFA                 movzx   ecx, byte ptr [rbx]
.text:0000000000003CFD                 mov     rax, rbx
.text:0000000000003D00                 test    cl, cl
.text:0000000000003D02                 jz      short loc_3D22
.text:0000000000003D04                 mov     rdx, r15
.text:0000000000003D07                 sub     rax, r15
.text:0000000000003D0A
.text:0000000000003D0A loc_3D0A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003D0A                 cmp     r13, rdx
.text:0000000000003D0D                 jbe     short loc_3D13
.text:0000000000003D0F                 mov     [r14+rdx], cl
.text:0000000000003D13
.text:0000000000003D13 loc_3D13:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003D13                 add     rdx, 1
.text:0000000000003D17                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003D1B                 test    cl, cl
.text:0000000000003D1D                 jnz     short loc_3D0A
.text:0000000000003D1F                 mov     r15, rdx
.text:0000000000003D22
.text:0000000000003D22 loc_3D22:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003D22                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003D22                 cmp     r13, r15
.text:0000000000003D25                 jbe     loc_37C9
.text:0000000000003D2B                 mov     byte ptr [r14+r15], 0
.text:0000000000003D30                 jmp     loc_37C9
.text:0000000000003D35 ; ---------------------------------------------------------------------------
.text:0000000000003D35
.text:0000000000003D35 loc_3D35:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003D35                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D3A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003D3F                 mov     rbp, r11
.text:0000000000003D42                 setz    al
.text:0000000000003D45                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003D49                 jmp     loc_3779
.text:0000000000003D4E ; ---------------------------------------------------------------------------
.text:0000000000003D4E
.text:0000000000003D4E loc_3D4E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003D4E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003D52                 mov     rdi, rcx
.text:0000000000003D55                 call    gettext_quote
.text:0000000000003D5A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003D5F                 jmp     loc_39B6
.text:0000000000003D64 ; ---------------------------------------------------------------------------
.text:0000000000003D64
.text:0000000000003D64 loc_3D64:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003D64                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003D68                 mov     rdi, rcx
.text:0000000000003D6B                 call    gettext_quote
.text:0000000000003D70                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003D75                 jmp     loc_39E1
.text:0000000000003D7A ; ---------------------------------------------------------------------------
.text:0000000000003D7A
.text:0000000000003D7A loc_3D7A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003D7A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003D7F                 mov     rbp, r11
.text:0000000000003D82                 mov     eax, edx
.text:0000000000003D84                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003D88                 jmp     loc_3779
.text:0000000000003D8D ; ---------------------------------------------------------------------------
.text:0000000000003D8D
.text:0000000000003D8D loc_3D8D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003D8D                 sub     rsp, 8
.text:0000000000003D91                 mov     r8d, 5
.text:0000000000003D97                 mov     rcx, r11
.text:0000000000003D9A                 push    [rsp+0F0h+var_88]
.text:0000000000003D9E                 push    [rsp+0F8h+var_80]
.text:0000000000003DA2                 mov     rdi, r14
.text:0000000000003DA5                 push    [rsp+100h+var_C8]
.text:0000000000003DA9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003DB1                 mov     rdx, [rsp+108h+s]
.text:0000000000003DB6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003DBB                 call    quotearg_buffer_restyled
.text:0000000000003DC0                 add     rsp, 20h
.text:0000000000003DC4                 mov     r15, rax
.text:0000000000003DC7                 jmp     loc_37C9
.text:0000000000003DCC ; ---------------------------------------------------------------------------
.text:0000000000003DCC
.text:0000000000003DCC loc_3DCC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003DCC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003DD1                 jmp     loc_3CEC
.text:0000000000003DD6 ; ---------------------------------------------------------------------------
.text:0000000000003DD6
.text:0000000000003DD6 loc_3DD6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003DD6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003DDE                 jmp     loc_3779
.text:0000000000003DE3 ; ---------------------------------------------------------------------------
.text:0000000000003DE3
.text:0000000000003DE3 loc_3DE3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003DE3                 call    ___stack_chk_fail
.text:0000000000003DE8 ; ---------------------------------------------------------------------------
.text:0000000000003DE8
.text:0000000000003DE8 loc_3DE8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003DE8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003DED                 jmp     loc_3861
.text:0000000000003DF2 ; ---------------------------------------------------------------------------
.text:0000000000003DF2
.text:0000000000003DF2 loc_3DF2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003DF2                 mov     rbp, r11
.text:0000000000003DF5                 jmp     loc_3790
.text:0000000000003DFA ; ---------------------------------------------------------------------------
.text:0000000000003DFA
.text:0000000000003DFA loc_3DFA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003DFA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003DFF                 xor     eax, eax
.text:0000000000003E01                 xor     r12d, r12d
.text:0000000000003E04                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E0D                 jmp     loc_33B4
.text:0000000000003E12 ; ---------------------------------------------------------------------------
.text:0000000000003E12
.text:0000000000003E12 loc_3E12:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003E12                 mov     rdx, r13
.text:0000000000003E15                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003E1A                 jmp     loc_3412
.text:0000000000003E1F ; ---------------------------------------------------------------------------
.text:0000000000003E1F
.text:0000000000003E1F def_2C81:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003E1F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003E1F ; } // starts at 2BF0
.text:0000000000003E1F quotearg_buffer_restyled endp
.text:0000000000003E1F
.text:0000000000003E1F ; ---------------------------------------------------------------------------
.text:0000000000003E24                 align 10h
.text:0000000000003E30
.text:0000000000003E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E30
.text:0000000000003E30
.text:0000000000003E30 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003E30                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003E30
.text:0000000000003E30 var_50          = qword ptr -50h
.text:0000000000003E30 var_48          = qword ptr -48h
.text:0000000000003E30 var_40          = dword ptr -40h
.text:0000000000003E30 var_3C          = dword ptr -3Ch
.text:0000000000003E30
.text:0000000000003E30 ; __unwind {
.text:0000000000003E30                 push    r15
.text:0000000000003E32                 push    r14
.text:0000000000003E34                 movsxd  r15, edi
.text:0000000000003E37                 push    r13
.text:0000000000003E39                 push    r12
.text:0000000000003E3B                 mov     r14, rdx
.text:0000000000003E3E                 push    rbp
.text:0000000000003E3F                 push    rbx
.text:0000000000003E40                 mov     rbp, rcx
.text:0000000000003E43                 sub     rsp, 28h
.text:0000000000003E47                 mov     [rsp+58h+var_50], rsi
.text:0000000000003E4C                 call    ___errno_location
.text:0000000000003E51                 mov     r13, rax
.text:0000000000003E54                 mov     eax, [rax]
.text:0000000000003E56                 test    r15d, r15d
.text:0000000000003E59                 mov     rbx, cs:slotvec
.text:0000000000003E60                 mov     [rsp+58h+var_40], eax
.text:0000000000003E64                 js      loc_3FD1
.text:0000000000003E6A                 cmp     cs:nslots, r15d
.text:0000000000003E71                 jg      short loc_3ED5
.text:0000000000003E73                 cmp     r15d, 7FFFFFFFh
.text:0000000000003E7A                 jz      loc_3FD6
.text:0000000000003E80                 lea     r12d, [r15+1]
.text:0000000000003E84                 lea     rax, slotvec0
.text:0000000000003E8B                 movsxd  rsi, r12d
.text:0000000000003E8E                 shl     rsi, 4
.text:0000000000003E92                 cmp     rbx, rax
.text:0000000000003E95                 jz      loc_3FB0
.text:0000000000003E9B                 mov     rdi, rbx
.text:0000000000003E9E                 call    xrealloc
.text:0000000000003EA3                 mov     rbx, rax
.text:0000000000003EA6                 mov     cs:slotvec, rax
.text:0000000000003EAD
.text:0000000000003EAD loc_3EAD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003EAD                 movsxd  rdi, cs:nslots
.text:0000000000003EB4                 mov     edx, r12d
.text:0000000000003EB7                 xor     esi, esi        ; c
.text:0000000000003EB9                 sub     edx, edi
.text:0000000000003EBB                 shl     rdi, 4
.text:0000000000003EBF                 movsxd  rdx, edx
.text:0000000000003EC2                 add     rdi, rbx        ; s
.text:0000000000003EC5                 shl     rdx, 4          ; n
.text:0000000000003EC9                 call    _memset
.text:0000000000003ECE                 mov     cs:nslots, r12d
.text:0000000000003ED5
.text:0000000000003ED5 loc_3ED5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003ED5                 mov     eax, [rbp+4]
.text:0000000000003ED8                 shl     r15, 4
.text:0000000000003EDC                 sub     rsp, 8
.text:0000000000003EE0                 add     rbx, r15
.text:0000000000003EE3                 lea     r15, [rbp+8]
.text:0000000000003EE7                 mov     r8d, [rbp+0]
.text:0000000000003EEB                 mov     r11, [rbx]
.text:0000000000003EEE                 mov     r12, [rbx+8]
.text:0000000000003EF2                 mov     rcx, r14
.text:0000000000003EF5                 or      eax, 1
.text:0000000000003EF8                 mov     [rsp+60h+var_3C], eax
.text:0000000000003EFC                 push    qword ptr [rbp+30h]
.text:0000000000003EFF                 mov     r9d, eax
.text:0000000000003F02                 push    qword ptr [rbp+28h]
.text:0000000000003F05                 push    r15
.text:0000000000003F07                 mov     rsi, r11
.text:0000000000003F0A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003F0F                 mov     rdi, r12
.text:0000000000003F12                 mov     [rsp+78h+var_48], r11
.text:0000000000003F17                 call    quotearg_buffer_restyled
.text:0000000000003F1C                 add     rsp, 20h
.text:0000000000003F20                 mov     r11, [rsp+58h+var_48]
.text:0000000000003F25                 cmp     r11, rax
.text:0000000000003F28                 ja      short loc_3F91
.text:0000000000003F2A                 lea     rsi, [rax+1]
.text:0000000000003F2E                 lea     rax, slot0
.text:0000000000003F35                 cmp     r12, rax
.text:0000000000003F38                 mov     [rbx], rsi
.text:0000000000003F3B                 jz      short loc_3F4F
.text:0000000000003F3D                 mov     rdi, r12        ; ptr
.text:0000000000003F40                 mov     [rsp+58h+var_48], rsi
.text:0000000000003F45                 call    _free
.text:0000000000003F4A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003F4F
.text:0000000000003F4F loc_3F4F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003F4F                 mov     rdi, rsi
.text:0000000000003F52                 mov     [rsp+58h+var_48], rsi
.text:0000000000003F57                 call    xmalloc
.text:0000000000003F5C                 sub     rsp, 8
.text:0000000000003F60                 mov     [rbx+8], rax
.text:0000000000003F64                 mov     r8d, [rbp+0]
.text:0000000000003F68                 push    qword ptr [rbp+30h]
.text:0000000000003F6B                 push    qword ptr [rbp+28h]
.text:0000000000003F6E                 mov     rcx, r14
.text:0000000000003F71                 push    r15
.text:0000000000003F73                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003F78                 mov     rdi, rax
.text:0000000000003F7B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003F80                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003F85                 mov     r12, rax
.text:0000000000003F88                 call    quotearg_buffer_restyled
.text:0000000000003F8D                 add     rsp, 20h
.text:0000000000003F91
.text:0000000000003F91 loc_3F91:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003F91                 mov     eax, [rsp+58h+var_40]
.text:0000000000003F95                 mov     [r13+0], eax
.text:0000000000003F99                 add     rsp, 28h
.text:0000000000003F9D                 mov     rax, r12
.text:0000000000003FA0                 pop     rbx
.text:0000000000003FA1                 pop     rbp
.text:0000000000003FA2                 pop     r12
.text:0000000000003FA4                 pop     r13
.text:0000000000003FA6                 pop     r14
.text:0000000000003FA8                 pop     r15
.text:0000000000003FAA                 retn
.text:0000000000003FAA ; ---------------------------------------------------------------------------
.text:0000000000003FAB                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 loc_3FB0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003FB0                 xor     edi, edi
.text:0000000000003FB2                 call    xrealloc
.text:0000000000003FB7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000003FBF                 mov     rbx, rax
.text:0000000000003FC2                 mov     cs:slotvec, rax
.text:0000000000003FC9                 movups  xmmword ptr [rax], xmm0
.text:0000000000003FCC                 jmp     loc_3EAD
.text:0000000000003FD1 ; ---------------------------------------------------------------------------
.text:0000000000003FD1
.text:0000000000003FD1 loc_3FD1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003FD1                 call    _abort
.text:0000000000003FD6 ; ---------------------------------------------------------------------------
.text:0000000000003FD6
.text:0000000000003FD6 loc_3FD6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003FD6                 call    xalloc_die
.text:0000000000003FD6 ; } // starts at 3E30
.text:0000000000003FD6 quotearg_n_options endp
.text:0000000000003FD6
.text:0000000000003FD6 ; ---------------------------------------------------------------------------
.text:0000000000003FDB                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FE0
.text:0000000000003FE0 ; Attributes: info_from_lumina
.text:0000000000003FE0
.text:0000000000003FE0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003FE0                 public clone_quoting_options
.text:0000000000003FE0 clone_quoting_options proc near
.text:0000000000003FE0 ; __unwind {
.text:0000000000003FE0                 push    r12
.text:0000000000003FE2                 push    rbp
.text:0000000000003FE3                 push    rbx
.text:0000000000003FE4                 mov     rbx, rdi
.text:0000000000003FE7                 call    ___errno_location
.text:0000000000003FEC                 mov     r12d, [rax]
.text:0000000000003FEF                 mov     rbp, rax
.text:0000000000003FF2                 lea     rax, default_quoting_options
.text:0000000000003FF9                 test    rbx, rbx
.text:0000000000003FFC                 mov     esi, 38h ; '8'  ; n
.text:0000000000004001                 cmovz   rbx, rax
.text:0000000000004005                 mov     rdi, rbx        ; src
.text:0000000000004008                 call    xmemdup
.text:000000000000400D                 mov     [rbp+0], r12d
.text:0000000000004011                 pop     rbx
.text:0000000000004012                 pop     rbp
.text:0000000000004013                 pop     r12
.text:0000000000004015                 retn
.text:0000000000004015 ; } // starts at 3FE0
.text:0000000000004015 clone_quoting_options endp
.text:0000000000004015
.text:0000000000004015 ; ---------------------------------------------------------------------------
.text:0000000000004016                 align 20h
.text:0000000000004020
.text:0000000000004020 ; =============== S U B R O U T I N E =======================================
.text:0000000000004020
.text:0000000000004020
.text:0000000000004020                 public get_quoting_style
.text:0000000000004020 get_quoting_style proc near
.text:0000000000004020 ; __unwind {
.text:0000000000004020                 lea     rax, default_quoting_options
.text:0000000000004027                 test    rdi, rdi
.text:000000000000402A                 cmovz   rdi, rax
.text:000000000000402E                 mov     eax, [rdi]
.text:0000000000004030                 retn
.text:0000000000004030 ; } // starts at 4020
.text:0000000000004030 get_quoting_style endp
.text:0000000000004030
.text:0000000000004030 ; ---------------------------------------------------------------------------
.text:0000000000004031                 align 20h
.text:0000000000004040
.text:0000000000004040 ; =============== S U B R O U T I N E =======================================
.text:0000000000004040
.text:0000000000004040
.text:0000000000004040                 public set_quoting_style
.text:0000000000004040 set_quoting_style proc near
.text:0000000000004040 ; __unwind {
.text:0000000000004040                 lea     rax, default_quoting_options
.text:0000000000004047                 test    rdi, rdi
.text:000000000000404A                 cmovz   rdi, rax
.text:000000000000404E                 mov     [rdi], esi
.text:0000000000004050                 retn
.text:0000000000004050 ; } // starts at 4040
.text:0000000000004050 set_quoting_style endp
.text:0000000000004050
.text:0000000000004050 ; ---------------------------------------------------------------------------
.text:0000000000004051                 align 20h
.text:0000000000004060
.text:0000000000004060 ; =============== S U B R O U T I N E =======================================
.text:0000000000004060
.text:0000000000004060 ; Attributes: info_from_lumina
.text:0000000000004060
.text:0000000000004060 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004060                 public set_char_quoting
.text:0000000000004060 set_char_quoting proc near
.text:0000000000004060 ; __unwind {
.text:0000000000004060                 lea     rax, default_quoting_options
.text:0000000000004067                 test    rdi, rdi
.text:000000000000406A                 mov     ecx, esi
.text:000000000000406C                 cmovz   rdi, rax
.text:0000000000004070                 mov     eax, esi
.text:0000000000004072                 and     ecx, 1Fh
.text:0000000000004075                 shr     al, 5
.text:0000000000004078                 movzx   eax, al
.text:000000000000407B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004080                 mov     esi, [rdi]
.text:0000000000004082                 mov     eax, esi
.text:0000000000004084                 shr     eax, cl
.text:0000000000004086                 xor     edx, eax
.text:0000000000004088                 and     eax, 1
.text:000000000000408B                 and     edx, 1
.text:000000000000408E                 shl     edx, cl
.text:0000000000004090                 xor     edx, esi
.text:0000000000004092                 mov     [rdi], edx
.text:0000000000004094                 retn
.text:0000000000004094 ; } // starts at 4060
.text:0000000000004094 set_char_quoting endp
.text:0000000000004094
.text:0000000000004094 ; ---------------------------------------------------------------------------
.text:0000000000004095                 align 20h
.text:00000000000040A0
.text:00000000000040A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040A0
.text:00000000000040A0
.text:00000000000040A0                 public set_quoting_flags
.text:00000000000040A0 set_quoting_flags proc near
.text:00000000000040A0 ; __unwind {
.text:00000000000040A0                 lea     rax, default_quoting_options
.text:00000000000040A7                 test    rdi, rdi
.text:00000000000040AA                 cmovz   rdi, rax
.text:00000000000040AE                 mov     eax, [rdi+4]
.text:00000000000040B1                 mov     [rdi+4], esi
.text:00000000000040B4                 retn
.text:00000000000040B4 ; } // starts at 40A0
.text:00000000000040B4 set_quoting_flags endp
.text:00000000000040B4
.text:00000000000040B4 ; ---------------------------------------------------------------------------
.text:00000000000040B5                 align 20h
.text:00000000000040C0
.text:00000000000040C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040C0
.text:00000000000040C0 ; Attributes: info_from_lumina
.text:00000000000040C0
.text:00000000000040C0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000040C0                 public set_custom_quoting
.text:00000000000040C0 set_custom_quoting proc near
.text:00000000000040C0 ; __unwind {
.text:00000000000040C0                 lea     rax, default_quoting_options
.text:00000000000040C7                 test    rdi, rdi
.text:00000000000040CA                 cmovz   rdi, rax
.text:00000000000040CE                 test    rsi, rsi
.text:00000000000040D1                 mov     dword ptr [rdi], 0Ah
.text:00000000000040D7                 jz      short loc_40E7
.text:00000000000040D9                 test    rdx, rdx
.text:00000000000040DC                 jz      short loc_40E7
.text:00000000000040DE                 mov     [rdi+28h], rsi
.text:00000000000040E2                 mov     [rdi+30h], rdx
.text:00000000000040E6                 retn
.text:00000000000040E7 ; ---------------------------------------------------------------------------
.text:00000000000040E7
.text:00000000000040E7 loc_40E7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000040E7                                         ; set_custom_quoting+1C↑j
.text:00000000000040E7                 sub     rsp, 8
.text:00000000000040EB                 call    _abort
.text:00000000000040EB ; } // starts at 40C0
.text:00000000000040EB set_custom_quoting endp
.text:00000000000040EB
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0 ; Attributes: info_from_lumina
.text:00000000000040F0
.text:00000000000040F0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000040F0                 public quotearg_buffer
.text:00000000000040F0 quotearg_buffer proc near
.text:00000000000040F0
.text:00000000000040F0 var_40          = qword ptr -40h
.text:00000000000040F0
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 push    r15
.text:00000000000040F2                 push    r14
.text:00000000000040F4                 lea     rax, default_quoting_options
.text:00000000000040FB                 push    r13
.text:00000000000040FD                 push    r12
.text:00000000000040FF                 mov     r13, rdi
.text:0000000000004102                 push    rbp
.text:0000000000004103                 push    rbx
.text:0000000000004104                 mov     rbx, r8
.text:0000000000004107                 mov     r14, rsi
.text:000000000000410A                 mov     r15, rdx
.text:000000000000410D                 sub     rsp, 18h
.text:0000000000004111                 test    r8, r8
.text:0000000000004114                 cmovz   rbx, rax
.text:0000000000004118                 mov     [rsp+48h+var_40], rcx
.text:000000000000411D                 call    ___errno_location
.text:0000000000004122                 mov     r12d, [rax]
.text:0000000000004125                 mov     rbp, rax
.text:0000000000004128                 lea     rax, [rbx+8]
.text:000000000000412C                 sub     rsp, 8
.text:0000000000004130                 mov     r9d, [rbx+4]
.text:0000000000004134                 push    qword ptr [rbx+30h]
.text:0000000000004137                 mov     r8d, [rbx]
.text:000000000000413A                 push    qword ptr [rbx+28h]
.text:000000000000413D                 mov     rdx, r15
.text:0000000000004140                 push    rax
.text:0000000000004141                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004146                 mov     rsi, r14
.text:0000000000004149                 mov     rdi, r13
.text:000000000000414C                 call    quotearg_buffer_restyled
.text:0000000000004151                 mov     [rbp+0], r12d
.text:0000000000004155                 add     rsp, 38h
.text:0000000000004159                 pop     rbx
.text:000000000000415A                 pop     rbp
.text:000000000000415B                 pop     r12
.text:000000000000415D                 pop     r13
.text:000000000000415F                 pop     r14
.text:0000000000004161                 pop     r15
.text:0000000000004163                 retn
.text:0000000000004163 ; } // starts at 40F0
.text:0000000000004163 quotearg_buffer endp
.text:0000000000004163
.text:0000000000004163 ; ---------------------------------------------------------------------------
.text:0000000000004164                 align 10h
.text:0000000000004170
.text:0000000000004170 ; =============== S U B R O U T I N E =======================================
.text:0000000000004170
.text:0000000000004170 ; Attributes: info_from_lumina
.text:0000000000004170
.text:0000000000004170 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004170                 public quotearg_alloc_mem
.text:0000000000004170 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004170
.text:0000000000004170 var_5C          = dword ptr -5Ch
.text:0000000000004170 var_58          = qword ptr -58h
.text:0000000000004170 var_50          = qword ptr -50h
.text:0000000000004170 var_48          = qword ptr -48h
.text:0000000000004170 var_40          = qword ptr -40h
.text:0000000000004170
.text:0000000000004170 ; __unwind {
.text:0000000000004170                 push    r15
.text:0000000000004172                 push    r14
.text:0000000000004174                 lea     rax, default_quoting_options
.text:000000000000417B                 push    r13
.text:000000000000417D                 push    r12
.text:000000000000417F                 mov     r12, rdx
.text:0000000000004182                 push    rbp
.text:0000000000004183                 push    rbx
.text:0000000000004184                 mov     rbx, rcx
.text:0000000000004187                 mov     r14, rdi
.text:000000000000418A                 mov     r15, rsi
.text:000000000000418D                 sub     rsp, 38h
.text:0000000000004191                 test    rcx, rcx
.text:0000000000004194                 cmovz   rbx, rax
.text:0000000000004198                 xor     ebp, ebp
.text:000000000000419A                 call    ___errno_location
.text:000000000000419F                 test    r12, r12
.text:00000000000041A2                 mov     r13, rax
.text:00000000000041A5                 mov     eax, [rax]
.text:00000000000041A7                 setz    bpl
.text:00000000000041AB                 or      ebp, [rbx+4]
.text:00000000000041AE                 lea     r10, [rbx+8]
.text:00000000000041B2                 sub     rsp, 8
.text:00000000000041B6                 mov     r8d, [rbx]
.text:00000000000041B9                 mov     rcx, r15
.text:00000000000041BC                 mov     [rsp+70h+var_5C], eax
.text:00000000000041C0                 push    qword ptr [rbx+30h]
.text:00000000000041C3                 mov     rdx, r14
.text:00000000000041C6                 push    qword ptr [rbx+28h]
.text:00000000000041C9                 push    r10
.text:00000000000041CB                 xor     esi, esi
.text:00000000000041CD                 mov     r9d, ebp
.text:00000000000041D0                 xor     edi, edi
.text:00000000000041D2                 mov     [rsp+88h+var_48], r10
.text:00000000000041D7                 call    quotearg_buffer_restyled
.text:00000000000041DC                 lea     rsi, [rax+1]
.text:00000000000041E0                 mov     [rsp+88h+var_40], rax
.text:00000000000041E5                 add     rsp, 20h
.text:00000000000041E9                 mov     rdi, rsi
.text:00000000000041EC                 mov     [rsp+68h+var_50], rsi
.text:00000000000041F1                 call    xmalloc
.text:00000000000041F6                 mov     [rsp+68h+var_58], rax
.text:00000000000041FB                 sub     rsp, 8
.text:00000000000041FF                 push    qword ptr [rbx+30h]
.text:0000000000004202                 push    qword ptr [rbx+28h]
.text:0000000000004205                 mov     r10, [rsp+80h+var_48]
.text:000000000000420A                 mov     r9d, ebp
.text:000000000000420D                 mov     r8d, [rbx]
.text:0000000000004210                 mov     rcx, r15
.text:0000000000004213                 mov     rdx, r14
.text:0000000000004216                 mov     rdi, rax
.text:0000000000004219                 push    r10
.text:000000000000421B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004220                 call    quotearg_buffer_restyled
.text:0000000000004225                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004229                 add     rsp, 20h
.text:000000000000422D                 test    r12, r12
.text:0000000000004230                 mov     [r13+0], eax
.text:0000000000004234                 jz      short loc_423F
.text:0000000000004236                 mov     r11, [rsp+68h+var_40]
.text:000000000000423B                 mov     [r12], r11
.text:000000000000423F
.text:000000000000423F loc_423F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000423F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004244                 add     rsp, 38h
.text:0000000000004248                 pop     rbx
.text:0000000000004249                 pop     rbp
.text:000000000000424A                 pop     r12
.text:000000000000424C                 pop     r13
.text:000000000000424E                 pop     r14
.text:0000000000004250                 pop     r15
.text:0000000000004252                 retn
.text:0000000000004252 ; } // starts at 4170
.text:0000000000004252 quotearg_alloc_mem endp
.text:0000000000004252
.text:0000000000004252 ; ---------------------------------------------------------------------------
.text:0000000000004253                 align 20h
.text:0000000000004260
.text:0000000000004260 ; =============== S U B R O U T I N E =======================================
.text:0000000000004260
.text:0000000000004260
.text:0000000000004260                 public quotearg_alloc
.text:0000000000004260 quotearg_alloc  proc near
.text:0000000000004260 ; __unwind {
.text:0000000000004260                 mov     rcx, rdx
.text:0000000000004263                 xor     edx, edx
.text:0000000000004265                 jmp     quotearg_alloc_mem
.text:0000000000004265 ; } // starts at 4260
.text:0000000000004265 quotearg_alloc  endp
.text:0000000000004265
.text:0000000000004265 ; ---------------------------------------------------------------------------
.text:000000000000426A                 align 10h
.text:0000000000004270
.text:0000000000004270 ; =============== S U B R O U T I N E =======================================
.text:0000000000004270
.text:0000000000004270 ; Attributes: info_from_lumina
.text:0000000000004270
.text:0000000000004270 ; void __cdecl quotearg_free()
.text:0000000000004270                 public quotearg_free
.text:0000000000004270 quotearg_free   proc near
.text:0000000000004270 ; __unwind {
.text:0000000000004270                 mov     eax, cs:nslots
.text:0000000000004276                 push    r12
.text:0000000000004278                 mov     r12, cs:slotvec
.text:000000000000427F                 push    rbp
.text:0000000000004280                 push    rbx
.text:0000000000004281                 cmp     eax, 1
.text:0000000000004284                 jle     short loc_42B1
.text:0000000000004286                 sub     eax, 2
.text:0000000000004289                 lea     rbx, [r12+18h]
.text:000000000000428E                 shl     rax, 4
.text:0000000000004292                 lea     rbp, [r12+rax+28h]
.text:0000000000004297                 nop     word ptr [rax+rax+00000000h]
.text:00000000000042A0
.text:00000000000042A0 loc_42A0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000042A0                 mov     rdi, [rbx]      ; ptr
.text:00000000000042A3                 add     rbx, 10h
.text:00000000000042A7                 call    _free
.text:00000000000042AC                 cmp     rbx, rbp
.text:00000000000042AF                 jnz     short loc_42A0
.text:00000000000042B1
.text:00000000000042B1 loc_42B1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000042B1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000042B6                 lea     rbx, slot0
.text:00000000000042BD                 cmp     rdi, rbx
.text:00000000000042C0                 jz      short loc_42D9
.text:00000000000042C2                 call    _free
.text:00000000000042C7                 mov     cs:slotvec0, 100h
.text:00000000000042D2                 mov     cs:off_209078, rbx
.text:00000000000042D9
.text:00000000000042D9 loc_42D9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000042D9                 lea     rbx, slotvec0
.text:00000000000042E0                 cmp     r12, rbx
.text:00000000000042E3                 jz      short loc_42F4
.text:00000000000042E5                 mov     rdi, r12        ; ptr
.text:00000000000042E8                 call    _free
.text:00000000000042ED                 mov     cs:slotvec, rbx
.text:00000000000042F4
.text:00000000000042F4 loc_42F4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000042F4                 pop     rbx
.text:00000000000042F5                 mov     cs:nslots, 1
.text:00000000000042FF                 pop     rbp
.text:0000000000004300                 pop     r12
.text:0000000000004302                 retn
.text:0000000000004302 ; } // starts at 4270
.text:0000000000004302 quotearg_free   endp
.text:0000000000004302
.text:0000000000004302 ; ---------------------------------------------------------------------------
.text:0000000000004303                 align 10h
.text:0000000000004310
.text:0000000000004310 ; =============== S U B R O U T I N E =======================================
.text:0000000000004310
.text:0000000000004310
.text:0000000000004310                 public quotearg_n
.text:0000000000004310 quotearg_n      proc near
.text:0000000000004310 ; __unwind {
.text:0000000000004310                 lea     rcx, default_quoting_options
.text:0000000000004317                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000431E                 jmp     quotearg_n_options
.text:000000000000431E ; } // starts at 4310
.text:000000000000431E quotearg_n      endp
.text:000000000000431E
.text:000000000000431E ; ---------------------------------------------------------------------------
.text:0000000000004323                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330
.text:0000000000004330                 public quotearg_n_mem
.text:0000000000004330 quotearg_n_mem  proc near
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 lea     rcx, default_quoting_options
.text:0000000000004337                 jmp     quotearg_n_options
.text:0000000000004337 ; } // starts at 4330
.text:0000000000004337 quotearg_n_mem  endp
.text:0000000000004337
.text:0000000000004337 ; ---------------------------------------------------------------------------
.text:000000000000433C                 align 20h
.text:0000000000004340
.text:0000000000004340 ; =============== S U B R O U T I N E =======================================
.text:0000000000004340
.text:0000000000004340
.text:0000000000004340                 public quotearg
.text:0000000000004340 quotearg        proc near
.text:0000000000004340 ; __unwind {
.text:0000000000004340                 lea     rcx, default_quoting_options
.text:0000000000004347                 mov     rsi, rdi
.text:000000000000434A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004351                 xor     edi, edi
.text:0000000000004353                 jmp     quotearg_n_options
.text:0000000000004353 ; } // starts at 4340
.text:0000000000004353 quotearg        endp
.text:0000000000004353
.text:0000000000004353 ; ---------------------------------------------------------------------------
.text:0000000000004358                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360
.text:0000000000004360                 public quotearg_mem
.text:0000000000004360 quotearg_mem    proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 lea     rcx, default_quoting_options
.text:0000000000004367                 mov     rdx, rsi
.text:000000000000436A                 mov     rsi, rdi
.text:000000000000436D                 xor     edi, edi
.text:000000000000436F                 jmp     quotearg_n_options
.text:000000000000436F ; } // starts at 4360
.text:000000000000436F quotearg_mem    endp
.text:000000000000436F
.text:000000000000436F ; ---------------------------------------------------------------------------
.text:0000000000004374                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380 ; Attributes: info_from_lumina
.text:0000000000004380
.text:0000000000004380 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004380                 public quotearg_n_style
.text:0000000000004380 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004380
.text:0000000000004380 var_48          = dword ptr -48h
.text:0000000000004380 var_44          = qword ptr -44h
.text:0000000000004380 var_3C          = qword ptr -3Ch
.text:0000000000004380 var_34          = qword ptr -34h
.text:0000000000004380 var_2C          = qword ptr -2Ch
.text:0000000000004380 var_24          = qword ptr -24h
.text:0000000000004380 var_1C          = qword ptr -1Ch
.text:0000000000004380 var_14          = dword ptr -14h
.text:0000000000004380 var_10          = qword ptr -10h
.text:0000000000004380
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 sub     rsp, 48h
.text:0000000000004384                 mov     rax, rdx
.text:0000000000004387                 mov     rdx, fs:28h
.text:0000000000004390                 mov     [rsp+48h+var_10], rdx
.text:0000000000004395                 xor     edx, edx
.text:0000000000004397                 cmp     esi, 0Ah
.text:000000000000439A                 jz      short loc_4404
.text:000000000000439C                 mov     [rsp+48h+var_48], esi
.text:000000000000439F                 mov     rcx, rsp
.text:00000000000043A2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043A9                 mov     rsi, rax
.text:00000000000043AC                 mov     [rsp+48h+var_44], 0
.text:00000000000043B5                 mov     [rsp+48h+var_3C], 0
.text:00000000000043BE                 mov     [rsp+48h+var_34], 0
.text:00000000000043C7                 mov     [rsp+48h+var_2C], 0
.text:00000000000043D0                 mov     [rsp+48h+var_24], 0
.text:00000000000043D9                 mov     [rsp+48h+var_1C], 0
.text:00000000000043E2                 mov     [rsp+48h+var_14], 0
.text:00000000000043EA                 call    quotearg_n_options
.text:00000000000043EF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000043F4                 xor     rcx, fs:28h
.text:00000000000043FD                 jnz     short loc_4409
.text:00000000000043FF                 add     rsp, 48h
.text:0000000000004403                 retn
.text:0000000000004404 ; ---------------------------------------------------------------------------
.text:0000000000004404
.text:0000000000004404 loc_4404:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004404                 call    _abort
.text:0000000000004409 ; ---------------------------------------------------------------------------
.text:0000000000004409
.text:0000000000004409 loc_4409:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004409                 call    ___stack_chk_fail
.text:0000000000004409 ; } // starts at 4380
.text:0000000000004409 quotearg_n_style endp
.text:0000000000004409
.text:0000000000004409 ; ---------------------------------------------------------------------------
.text:000000000000440E                 align 10h
.text:0000000000004410
.text:0000000000004410 ; =============== S U B R O U T I N E =======================================
.text:0000000000004410
.text:0000000000004410 ; Attributes: info_from_lumina
.text:0000000000004410
.text:0000000000004410 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004410                 public quotearg_n_style_mem
.text:0000000000004410 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004410
.text:0000000000004410 var_48          = dword ptr -48h
.text:0000000000004410 var_44          = qword ptr -44h
.text:0000000000004410 var_3C          = qword ptr -3Ch
.text:0000000000004410 var_34          = qword ptr -34h
.text:0000000000004410 var_2C          = qword ptr -2Ch
.text:0000000000004410 var_24          = qword ptr -24h
.text:0000000000004410 var_1C          = qword ptr -1Ch
.text:0000000000004410 var_14          = dword ptr -14h
.text:0000000000004410 var_10          = qword ptr -10h
.text:0000000000004410
.text:0000000000004410 ; __unwind {
.text:0000000000004410                 sub     rsp, 48h
.text:0000000000004414                 mov     rax, rdx
.text:0000000000004417                 mov     rdx, rcx
.text:000000000000441A                 mov     rcx, fs:28h
.text:0000000000004423                 mov     [rsp+48h+var_10], rcx
.text:0000000000004428                 xor     ecx, ecx
.text:000000000000442A                 cmp     esi, 0Ah
.text:000000000000442D                 jz      short loc_4490
.text:000000000000442F                 mov     [rsp+48h+var_48], esi
.text:0000000000004432                 mov     rcx, rsp
.text:0000000000004435                 mov     rsi, rax
.text:0000000000004438                 mov     [rsp+48h+var_44], 0
.text:0000000000004441                 mov     [rsp+48h+var_3C], 0
.text:000000000000444A                 mov     [rsp+48h+var_34], 0
.text:0000000000004453                 mov     [rsp+48h+var_2C], 0
.text:000000000000445C                 mov     [rsp+48h+var_24], 0
.text:0000000000004465                 mov     [rsp+48h+var_1C], 0
.text:000000000000446E                 mov     [rsp+48h+var_14], 0
.text:0000000000004476                 call    quotearg_n_options
.text:000000000000447B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004480                 xor     rdx, fs:28h
.text:0000000000004489                 jnz     short loc_4495
.text:000000000000448B                 add     rsp, 48h
.text:000000000000448F                 retn
.text:0000000000004490 ; ---------------------------------------------------------------------------
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004490                 call    _abort
.text:0000000000004495 ; ---------------------------------------------------------------------------
.text:0000000000004495
.text:0000000000004495 loc_4495:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004495                 call    ___stack_chk_fail
.text:0000000000004495 ; } // starts at 4410
.text:0000000000004495 quotearg_n_style_mem endp
.text:0000000000004495
.text:0000000000004495 ; ---------------------------------------------------------------------------
.text:000000000000449A                 align 20h
.text:00000000000044A0
.text:00000000000044A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044A0
.text:00000000000044A0
.text:00000000000044A0                 public quotearg_style
.text:00000000000044A0 quotearg_style  proc near               ; CODE XREF: main+577↑p
.text:00000000000044A0                                         ; main+73E↑p ...
.text:00000000000044A0 ; __unwind {
.text:00000000000044A0                 mov     rdx, rsi
.text:00000000000044A3                 mov     esi, edi
.text:00000000000044A5                 xor     edi, edi
.text:00000000000044A7                 jmp     quotearg_n_style
.text:00000000000044A7 ; } // starts at 44A0
.text:00000000000044A7 quotearg_style  endp
.text:00000000000044A7
.text:00000000000044A7 ; ---------------------------------------------------------------------------
.text:00000000000044AC                 align 10h
.text:00000000000044B0
.text:00000000000044B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044B0
.text:00000000000044B0
.text:00000000000044B0                 public quotearg_style_mem
.text:00000000000044B0 quotearg_style_mem proc near
.text:00000000000044B0 ; __unwind {
.text:00000000000044B0                 mov     rcx, rdx
.text:00000000000044B3                 mov     rdx, rsi
.text:00000000000044B6                 mov     esi, edi
.text:00000000000044B8                 xor     edi, edi
.text:00000000000044BA                 jmp     quotearg_n_style_mem
.text:00000000000044BA ; } // starts at 44B0
.text:00000000000044BA quotearg_style_mem endp
.text:00000000000044BA
.text:00000000000044BA ; ---------------------------------------------------------------------------
.text:00000000000044BF                 align 20h
.text:00000000000044C0
.text:00000000000044C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044C0
.text:00000000000044C0 ; Attributes: info_from_lumina
.text:00000000000044C0
.text:00000000000044C0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000044C0                 public quotearg_char_mem
.text:00000000000044C0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000044C0                                         ; quotearg_colon+C↓j ...
.text:00000000000044C0
.text:00000000000044C0 var_48          = xmmword ptr -48h
.text:00000000000044C0 var_38          = xmmword ptr -38h
.text:00000000000044C0 var_28          = xmmword ptr -28h
.text:00000000000044C0 var_18          = qword ptr -18h
.text:00000000000044C0 var_10          = qword ptr -10h
.text:00000000000044C0
.text:00000000000044C0 ; __unwind {
.text:00000000000044C0                 sub     rsp, 48h
.text:00000000000044C4                 mov     ecx, edx
.text:00000000000044C6                 mov     rax, fs:28h
.text:00000000000044CF                 mov     [rsp+48h+var_10], rax
.text:00000000000044D4                 xor     eax, eax
.text:00000000000044D6                 mov     rax, cs:qword_209230
.text:00000000000044DD                 mov     r8, rsp
.text:00000000000044E0                 and     ecx, 1Fh
.text:00000000000044E3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000044EB                 mov     [rsp+48h+var_18], rax
.text:00000000000044F0                 mov     eax, edx
.text:00000000000044F2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000044F6                 shr     al, 5
.text:00000000000044F9                 movzx   eax, al
.text:00000000000044FC                 lea     r9, [r8+rax*4+8]
.text:0000000000004501                 movdqa  xmm0, cs:xmmword_209210
.text:0000000000004509                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000450E                 movdqa  xmm0, cs:xmmword_209220
.text:0000000000004516                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000451B                 mov     edx, [r9]
.text:000000000000451E                 mov     eax, edx
.text:0000000000004520                 shr     eax, cl
.text:0000000000004522                 not     eax
.text:0000000000004524                 and     eax, 1
.text:0000000000004527                 shl     eax, cl
.text:0000000000004529                 mov     rcx, r8
.text:000000000000452C                 xor     eax, edx
.text:000000000000452E                 mov     rdx, rsi
.text:0000000000004531                 mov     rsi, rdi
.text:0000000000004534                 mov     [r9], eax
.text:0000000000004537                 xor     edi, edi
.text:0000000000004539                 call    quotearg_n_options
.text:000000000000453E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004543                 xor     rsi, fs:28h
.text:000000000000454C                 jnz     short loc_4553
.text:000000000000454E                 add     rsp, 48h
.text:0000000000004552                 retn
.text:0000000000004553 ; ---------------------------------------------------------------------------
.text:0000000000004553
.text:0000000000004553 loc_4553:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004553                 call    ___stack_chk_fail
.text:0000000000004553 ; } // starts at 44C0
.text:0000000000004553 quotearg_char_mem endp
.text:0000000000004553
.text:0000000000004553 ; ---------------------------------------------------------------------------
.text:0000000000004558                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560
.text:0000000000004560                 public quotearg_char
.text:0000000000004560 quotearg_char   proc near
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 movsx   edx, sil
.text:0000000000004564                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000456B                 jmp     quotearg_char_mem
.text:000000000000456B ; } // starts at 4560
.text:000000000000456B quotearg_char   endp
.text:000000000000456B
.text:0000000000004570
.text:0000000000004570 ; =============== S U B R O U T I N E =======================================
.text:0000000000004570
.text:0000000000004570
.text:0000000000004570                 public quotearg_colon
.text:0000000000004570 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004570 ; __unwind {
.text:0000000000004570                 mov     edx, 3Ah ; ':'
.text:0000000000004575                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000457C                 jmp     quotearg_char_mem
.text:000000000000457C ; } // starts at 4570
.text:000000000000457C quotearg_colon  endp
.text:000000000000457C
.text:000000000000457C ; ---------------------------------------------------------------------------
.text:0000000000004581                 align 10h
.text:0000000000004590
.text:0000000000004590 ; =============== S U B R O U T I N E =======================================
.text:0000000000004590
.text:0000000000004590
.text:0000000000004590                 public quotearg_colon_mem
.text:0000000000004590 quotearg_colon_mem proc near
.text:0000000000004590 ; __unwind {
.text:0000000000004590                 mov     edx, 3Ah ; ':'
.text:0000000000004595                 jmp     quotearg_char_mem
.text:0000000000004595 ; } // starts at 4590
.text:0000000000004595 quotearg_colon_mem endp
.text:0000000000004595
.text:0000000000004595 ; ---------------------------------------------------------------------------
.text:000000000000459A                 align 20h
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0 ; Attributes: info_from_lumina
.text:00000000000045A0
.text:00000000000045A0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000045A0                 public quotearg_n_style_colon
.text:00000000000045A0 quotearg_n_style_colon proc near
.text:00000000000045A0
.text:00000000000045A0 var_48          = dword ptr -48h
.text:00000000000045A0 var_44          = qword ptr -44h
.text:00000000000045A0 var_3C          = qword ptr -3Ch
.text:00000000000045A0 var_34          = qword ptr -34h
.text:00000000000045A0 var_2C          = qword ptr -2Ch
.text:00000000000045A0 var_24          = qword ptr -24h
.text:00000000000045A0 var_1C          = qword ptr -1Ch
.text:00000000000045A0 var_14          = dword ptr -14h
.text:00000000000045A0 var_10          = qword ptr -10h
.text:00000000000045A0
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 sub     rsp, 48h
.text:00000000000045A4                 mov     rax, rdx
.text:00000000000045A7                 mov     rdx, fs:28h
.text:00000000000045B0                 mov     [rsp+48h+var_10], rdx
.text:00000000000045B5                 xor     edx, edx
.text:00000000000045B7                 cmp     esi, 0Ah
.text:00000000000045BA                 jz      short loc_4624
.text:00000000000045BC                 mov     [rsp+48h+var_48], esi
.text:00000000000045BF                 mov     rcx, rsp
.text:00000000000045C2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000045C9                 mov     rsi, rax
.text:00000000000045CC                 mov     [rsp+48h+var_44], 0
.text:00000000000045D5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000045DE                 mov     [rsp+48h+var_34], 0
.text:00000000000045E7                 mov     [rsp+48h+var_2C], 0
.text:00000000000045F0                 mov     [rsp+48h+var_24], 0
.text:00000000000045F9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004602                 mov     [rsp+48h+var_14], 0
.text:000000000000460A                 call    quotearg_n_options
.text:000000000000460F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004614                 xor     rcx, fs:28h
.text:000000000000461D                 jnz     short loc_4629
.text:000000000000461F                 add     rsp, 48h
.text:0000000000004623                 retn
.text:0000000000004624 ; ---------------------------------------------------------------------------
.text:0000000000004624
.text:0000000000004624 loc_4624:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004624                 call    _abort
.text:0000000000004629 ; ---------------------------------------------------------------------------
.text:0000000000004629
.text:0000000000004629 loc_4629:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004629                 call    ___stack_chk_fail
.text:0000000000004629 ; } // starts at 45A0
.text:0000000000004629 quotearg_n_style_colon endp
.text:0000000000004629
.text:0000000000004629 ; ---------------------------------------------------------------------------
.text:000000000000462E                 align 10h
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630 ; Attributes: info_from_lumina
.text:0000000000004630
.text:0000000000004630 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004630                 public quotearg_n_custom_mem
.text:0000000000004630 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004630                                         ; quotearg_custom+12↓j ...
.text:0000000000004630
.text:0000000000004630 var_48          = xmmword ptr -48h
.text:0000000000004630 var_38          = xmmword ptr -38h
.text:0000000000004630 var_28          = xmmword ptr -28h
.text:0000000000004630 var_18          = qword ptr -18h
.text:0000000000004630 var_10          = qword ptr -10h
.text:0000000000004630
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 sub     rsp, 48h
.text:0000000000004634                 mov     r9, rcx
.text:0000000000004637                 mov     rcx, cs:qword_209230
.text:000000000000463E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004646                 mov     rax, fs:28h
.text:000000000000464F                 mov     [rsp+48h+var_10], rax
.text:0000000000004654                 xor     eax, eax
.text:0000000000004656                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000465A                 test    rsi, rsi
.text:000000000000465D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004662                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004669                 movdqa  xmm0, cs:xmmword_209210
.text:0000000000004671                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004676                 movdqa  xmm0, cs:xmmword_209220
.text:000000000000467E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004683                 jz      short loc_46B7
.text:0000000000004685                 test    rdx, rdx
.text:0000000000004688                 jz      short loc_46B7
.text:000000000000468A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000468F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004694                 mov     rcx, rsp
.text:0000000000004697                 mov     rdx, r8
.text:000000000000469A                 mov     rsi, r9
.text:000000000000469D                 call    quotearg_n_options
.text:00000000000046A2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000046A7                 xor     rdi, fs:28h
.text:00000000000046B0                 jnz     short loc_46BC
.text:00000000000046B2                 add     rsp, 48h
.text:00000000000046B6                 retn
.text:00000000000046B7 ; ---------------------------------------------------------------------------
.text:00000000000046B7
.text:00000000000046B7 loc_46B7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000046B7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000046B7                 call    _abort
.text:00000000000046BC ; ---------------------------------------------------------------------------
.text:00000000000046BC
.text:00000000000046BC loc_46BC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000046BC                 call    ___stack_chk_fail
.text:00000000000046BC ; } // starts at 4630
.text:00000000000046BC quotearg_n_custom_mem endp
.text:00000000000046BC
.text:00000000000046BC ; ---------------------------------------------------------------------------
.text:00000000000046C1                 align 10h
.text:00000000000046D0
.text:00000000000046D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046D0
.text:00000000000046D0
.text:00000000000046D0                 public quotearg_n_custom
.text:00000000000046D0 quotearg_n_custom proc near
.text:00000000000046D0 ; __unwind {
.text:00000000000046D0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000046D7                 jmp     quotearg_n_custom_mem
.text:00000000000046D7 ; } // starts at 46D0
.text:00000000000046D7 quotearg_n_custom endp
.text:00000000000046D7
.text:00000000000046D7 ; ---------------------------------------------------------------------------
.text:00000000000046DC                 align 20h
.text:00000000000046E0
.text:00000000000046E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046E0
.text:00000000000046E0
.text:00000000000046E0                 public quotearg_custom
.text:00000000000046E0 quotearg_custom proc near
.text:00000000000046E0 ; __unwind {
.text:00000000000046E0                 mov     rcx, rdx
.text:00000000000046E3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000046EA                 mov     rdx, rsi
.text:00000000000046ED                 mov     rsi, rdi
.text:00000000000046F0                 xor     edi, edi
.text:00000000000046F2                 jmp     quotearg_n_custom_mem
.text:00000000000046F2 ; } // starts at 46E0
.text:00000000000046F2 quotearg_custom endp
.text:00000000000046F2
.text:00000000000046F2 ; ---------------------------------------------------------------------------
.text:00000000000046F7                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700
.text:0000000000004700                 public quotearg_custom_mem
.text:0000000000004700 quotearg_custom_mem proc near
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 mov     r8, rcx
.text:0000000000004703                 mov     rcx, rdx
.text:0000000000004706                 mov     rdx, rsi
.text:0000000000004709                 mov     rsi, rdi
.text:000000000000470C                 xor     edi, edi
.text:000000000000470E                 jmp     quotearg_n_custom_mem
.text:000000000000470E ; } // starts at 4700
.text:000000000000470E quotearg_custom_mem endp
.text:000000000000470E
.text:000000000000470E ; ---------------------------------------------------------------------------
.text:0000000000004713                 align 20h
.text:0000000000004720
.text:0000000000004720 ; =============== S U B R O U T I N E =======================================
.text:0000000000004720
.text:0000000000004720
.text:0000000000004720                 public quote_n_mem
.text:0000000000004720 quote_n_mem     proc near
.text:0000000000004720 ; __unwind {
.text:0000000000004720                 lea     rcx, quote_quoting_options
.text:0000000000004727                 jmp     quotearg_n_options
.text:0000000000004727 ; } // starts at 4720
.text:0000000000004727 quote_n_mem     endp
.text:0000000000004727
.text:0000000000004727 ; ---------------------------------------------------------------------------
.text:000000000000472C                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730
.text:0000000000004730                 public quote_mem
.text:0000000000004730 quote_mem       proc near
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 lea     rcx, quote_quoting_options
.text:0000000000004737                 mov     rdx, rsi
.text:000000000000473A                 mov     rsi, rdi
.text:000000000000473D                 xor     edi, edi
.text:000000000000473F                 jmp     quotearg_n_options
.text:000000000000473F ; } // starts at 4730
.text:000000000000473F quote_mem       endp
.text:000000000000473F
.text:000000000000473F ; ---------------------------------------------------------------------------
.text:0000000000004744                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750
.text:0000000000004750                 public quote_n
.text:0000000000004750 quote_n         proc near
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 lea     rcx, quote_quoting_options
.text:0000000000004757                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000475E                 jmp     quotearg_n_options
.text:000000000000475E ; } // starts at 4750
.text:000000000000475E quote_n         endp
.text:000000000000475E
.text:000000000000475E ; ---------------------------------------------------------------------------
.text:0000000000004763                 align 10h
.text:0000000000004770
.text:0000000000004770 ; =============== S U B R O U T I N E =======================================
.text:0000000000004770
.text:0000000000004770
.text:0000000000004770                 public quote
.text:0000000000004770 quote           proc near               ; CODE XREF: main+385↑p
.text:0000000000004770                                         ; parse_additional_groups+1D6↑p ...
.text:0000000000004770 ; __unwind {
.text:0000000000004770                 lea     rcx, quote_quoting_options
.text:0000000000004777                 mov     rsi, rdi
.text:000000000000477A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004781                 xor     edi, edi
.text:0000000000004783                 jmp     quotearg_n_options
.text:0000000000004783 ; } // starts at 4770
.text:0000000000004783 quote           endp
.text:0000000000004783
.text:0000000000004783 ; ---------------------------------------------------------------------------
.text:0000000000004788                 align 10h
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790
.text:0000000000004790 parse_with_separator proc near          ; CODE XREF: parse_user_spec+45↓p
.text:0000000000004790                                         ; parse_user_spec+85↓p ...
.text:0000000000004790
.text:0000000000004790 msgid           = qword ptr -88h
.text:0000000000004790 name            = qword ptr -80h
.text:0000000000004790 var_78          = qword ptr -78h
.text:0000000000004790 var_70          = dword ptr -70h
.text:0000000000004790 var_6A          = byte ptr -6Ah
.text:0000000000004790 var_69          = byte ptr -69h
.text:0000000000004790 var_60          = qword ptr -60h
.text:0000000000004790 var_58          = byte ptr -58h
.text:0000000000004790 var_40          = qword ptr -40h
.text:0000000000004790
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 push    r15
.text:0000000000004792                 push    r14
.text:0000000000004794                 mov     r10, rsi
.text:0000000000004797                 push    r13
.text:0000000000004799                 push    r12
.text:000000000000479B                 mov     r12, rcx
.text:000000000000479E                 push    rbp
.text:000000000000479F                 push    rbx
.text:00000000000047A0                 mov     r13, r8
.text:00000000000047A3                 mov     r14, r9
.text:00000000000047A6                 mov     r15d, 0FFFFFFFFh
.text:00000000000047AC                 sub     rsp, 58h
.text:00000000000047B0                 mov     eax, [rdx]
.text:00000000000047B2                 mov     rcx, fs:28h
.text:00000000000047BB                 mov     [rsp+88h+var_40], rcx
.text:00000000000047C0                 xor     ecx, ecx
.text:00000000000047C2                 test    r12, r12
.text:00000000000047C5                 mov     [rsp+88h+var_78], rdx
.text:00000000000047CA                 mov     [rsp+88h+var_70], eax
.text:00000000000047CE                 jz      short loc_47D4
.text:00000000000047D0                 mov     r15d, [r12]
.text:00000000000047D4
.text:00000000000047D4 loc_47D4:                               ; CODE XREF: parse_with_separator+3E↑j
.text:00000000000047D4                 test    r13, r13
.text:00000000000047D7                 jz      short loc_47E1
.text:00000000000047D9                 mov     qword ptr [r13+0], 0
.text:00000000000047E1
.text:00000000000047E1 loc_47E1:                               ; CODE XREF: parse_with_separator+47↑j
.text:00000000000047E1                 test    r14, r14
.text:00000000000047E4                 jz      short loc_47ED
.text:00000000000047E6                 mov     qword ptr [r14], 0
.text:00000000000047ED
.text:00000000000047ED loc_47ED:                               ; CODE XREF: parse_with_separator+54↑j
.text:00000000000047ED                 test    r10, r10
.text:00000000000047F0                 jz      loc_4988
.text:00000000000047F6                 mov     rbx, r10
.text:00000000000047F9                 sub     rbx, rdi
.text:00000000000047FC                 jnz     loc_48D0
.text:0000000000004802                 cmp     byte ptr [r10+1], 0
.text:0000000000004807                 jz      loc_4A18
.text:000000000000480D                 add     r10, 1
.text:0000000000004811                 mov     [rsp+88h+msgid], 0
.text:0000000000004819                 setnz   [rsp+88h+var_6A]
.text:000000000000481E                 mov     [rsp+88h+name], r10
.text:0000000000004823                 xor     ebp, ebp
.text:0000000000004825                 xor     ebx, ebx
.text:0000000000004827
.text:0000000000004827 loc_4827:                               ; CODE XREF: parse_with_separator+1C4↓j
.text:0000000000004827                                         ; parse_with_separator+1F0↓j ...
.text:0000000000004827                 cmp     [rsp+88h+var_6A], 0
.text:000000000000482C                 jz      loc_4B20
.text:0000000000004832                 mov     rax, [rsp+88h+name]
.text:0000000000004837                 cmp     byte ptr [rax], 2Bh ; '+'
.text:000000000000483A                 jz      loc_49B0
.text:0000000000004840                 mov     rdi, [rsp+88h+name] ; name
.text:0000000000004845                 call    _getgrnam
.text:000000000000484A                 test    rax, rax
.text:000000000000484D                 jz      loc_49B0
.text:0000000000004853                 mov     r15d, [rax+10h]
.text:0000000000004857
.text:0000000000004857 loc_4857:                               ; CODE XREF: parse_with_separator+2A8↓j
.text:0000000000004857                 call    _endgrent
.text:000000000000485C                 mov     rdi, [rsp+88h+name] ; src
.text:0000000000004861                 call    xstrdup
.text:0000000000004866                 mov     rbx, rax
.text:0000000000004869
.text:0000000000004869 loc_4869:                               ; CODE XREF: parse_with_separator+39B↓j
.text:0000000000004869                 mov     r10, rbp
.text:000000000000486C
.text:000000000000486C loc_486C:                               ; CODE XREF: parse_with_separator+1FD↓j
.text:000000000000486C                                         ; parse_with_separator+28D↓j
.text:000000000000486C                 mov     rax, [rsp+88h+var_78]
.text:0000000000004871                 mov     esi, [rsp+88h+var_70]
.text:0000000000004875                 test    r12, r12
.text:0000000000004878                 mov     [rax], esi
.text:000000000000487A                 jz      short loc_4880
.text:000000000000487C                 mov     [r12], r15d
.text:0000000000004880
.text:0000000000004880 loc_4880:                               ; CODE XREF: parse_with_separator+EA↑j
.text:0000000000004880                 test    r13, r13
.text:0000000000004883                 jz      short loc_488C
.text:0000000000004885                 mov     [r13+0], r10
.text:0000000000004889                 xor     r10d, r10d
.text:000000000000488C
.text:000000000000488C loc_488C:                               ; CODE XREF: parse_with_separator+F3↑j
.text:000000000000488C                 test    r14, r14
.text:000000000000488F                 jz      short loc_4896
.text:0000000000004891                 mov     [r14], rbx
.text:0000000000004894                 xor     ebx, ebx
.text:0000000000004896
.text:0000000000004896 loc_4896:                               ; CODE XREF: parse_with_separator+FF↑j
.text:0000000000004896                 mov     rdi, r10        ; ptr
.text:0000000000004899                 call    _free
.text:000000000000489E                 mov     rdi, rbx        ; src
.text:00000000000048A1                 call    _free
.text:00000000000048A6                 xor     eax, eax
.text:00000000000048A8
.text:00000000000048A8 loc_48A8:                               ; CODE XREF: parse_with_separator+27E↓j
.text:00000000000048A8                 mov     rdx, [rsp+88h+var_40]
.text:00000000000048AD                 xor     rdx, fs:28h
.text:00000000000048B6                 jnz     loc_4B45
.text:00000000000048BC                 add     rsp, 58h
.text:00000000000048C0                 pop     rbx
.text:00000000000048C1                 pop     rbp
.text:00000000000048C2                 pop     r12
.text:00000000000048C4                 pop     r13
.text:00000000000048C6                 pop     r14
.text:00000000000048C8                 pop     r15
.text:00000000000048CA                 retn
.text:00000000000048CA ; ---------------------------------------------------------------------------
.text:00000000000048CB                 align 10h
.text:00000000000048D0
.text:00000000000048D0 loc_48D0:                               ; CODE XREF: parse_with_separator+6C↑j
.text:00000000000048D0                 lea     rsi, [rbx+1]    ; n
.text:00000000000048D4                 mov     [rsp+88h+msgid], r10
.text:00000000000048D8                 call    xmemdup
.text:00000000000048DD                 mov     r10, [rsp+88h+msgid]
.text:00000000000048E1                 mov     byte ptr [rax+rbx], 0
.text:00000000000048E5                 mov     rbp, rax
.text:00000000000048E8                 cmp     byte ptr [r10+1], 0
.text:00000000000048ED                 jnz     loc_4A40
.text:00000000000048F3
.text:00000000000048F3 loc_48F3:                               ; CODE XREF: parse_with_separator+213↓j
.text:00000000000048F3                 test    rbp, rbp
.text:00000000000048F6                 jz      loc_4A18
.text:00000000000048FC                 mov     [rsp+88h+var_6A], 0
.text:0000000000004901                 mov     eax, 1
.text:0000000000004906                 mov     [rsp+88h+name], 0
.text:000000000000490F
.text:000000000000490F loc_490F:                               ; CODE XREF: parse_with_separator+2D0↓j
.text:000000000000490F                 test    r10, r10
.text:0000000000004912                 setnz   r9b
.text:0000000000004916                 and     r9d, eax
.text:0000000000004919                 cmp     byte ptr [rbp+0], 2Bh ; '+'
.text:000000000000491D                 jz      short loc_4960
.text:000000000000491F                 mov     rdi, rbp        ; src
.text:0000000000004922                 mov     byte ptr [rsp+88h+msgid], r9b
.text:0000000000004926                 call    _getpwnam
.text:000000000000492B                 test    rax, rax
.text:000000000000492E                 movzx   r9d, byte ptr [rsp+88h+msgid]
.text:0000000000004933                 jz      short loc_4960
.text:0000000000004935                 mov     ecx, [rax+10h]
.text:0000000000004938                 xor     ebx, ebx
.text:000000000000493A                 test    r9b, r9b
.text:000000000000493D                 mov     [rsp+88h+msgid], 0
.text:0000000000004945                 mov     [rsp+88h+var_70], ecx
.text:0000000000004949                 jnz     loc_4A68
.text:000000000000494F
.text:000000000000494F loc_494F:                               ; CODE XREF: parse_with_separator+305↓j
.text:000000000000494F                 call    _endpwent
.text:0000000000004954                 jmp     loc_4827
.text:0000000000004954 ; ---------------------------------------------------------------------------
.text:0000000000004959                 align 20h
.text:0000000000004960
.text:0000000000004960 loc_4960:                               ; CODE XREF: parse_with_separator+18D↑j
.text:0000000000004960                                         ; parse_with_separator+1A3↑j
.text:0000000000004960                 test    r9b, r9b
.text:0000000000004963                 jz      loc_4AA0
.text:0000000000004969                 lea     rax, aInvalidSpec ; "invalid spec"
.text:0000000000004970                 mov     [rsp+88h+var_6A], 0
.text:0000000000004975                 xor     ebx, ebx
.text:0000000000004977                 mov     [rsp+88h+msgid], rax
.text:000000000000497B                 call    _endpwent
.text:0000000000004980                 jmp     loc_4827
.text:0000000000004980 ; ---------------------------------------------------------------------------
.text:0000000000004985                 align 8
.text:0000000000004988
.text:0000000000004988 loc_4988:                               ; CODE XREF: parse_with_separator+60↑j
.text:0000000000004988                 xor     ebx, ebx
.text:000000000000498A                 cmp     byte ptr [rdi], 0
.text:000000000000498D                 jz      loc_486C
.text:0000000000004993                 mov     [rsp+88h+msgid], r10
.text:0000000000004997                 call    xstrdup
.text:000000000000499C                 mov     r10, [rsp+88h+msgid]
.text:00000000000049A0                 mov     rbp, rax
.text:00000000000049A3                 jmp     loc_48F3
.text:00000000000049A3 ; ---------------------------------------------------------------------------
.text:00000000000049A8                 align 10h
.text:00000000000049B0
.text:00000000000049B0 loc_49B0:                               ; CODE XREF: parse_with_separator+AA↑j
.text:00000000000049B0                                         ; parse_with_separator+BD↑j
.text:00000000000049B0                 mov     rdi, [rsp+88h+name] ; nptr
.text:00000000000049B5                 lea     rcx, [rsp+88h+var_60]
.text:00000000000049BA                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:00000000000049C1                 xor     esi, esi
.text:00000000000049C3                 mov     edx, 0Ah
.text:00000000000049C8                 call    xstrtoul
.text:00000000000049CD                 test    eax, eax
.text:00000000000049CF                 jz      short loc_4A28
.text:00000000000049D1
.text:00000000000049D1 loc_49D1:                               ; CODE XREF: parse_with_separator+2AE↓j
.text:00000000000049D1                 call    _endgrent
.text:00000000000049D6                 mov     rdi, [rsp+88h+name] ; src
.text:00000000000049DB                 call    xstrdup
.text:00000000000049E0                 mov     rbx, rax
.text:00000000000049E3                 lea     rax, aInvalidGroup ; "invalid group"
.text:00000000000049EA                 mov     [rsp+88h+msgid], rax
.text:00000000000049EE
.text:00000000000049EE loc_49EE:                               ; CODE XREF: parse_with_separator+395↓j
.text:00000000000049EE                 mov     rdi, rbp        ; ptr
.text:00000000000049F1                 call    _free
.text:00000000000049F6                 mov     rdi, rbx        ; ptr
.text:00000000000049F9                 call    _free
.text:00000000000049FE                 mov     rsi, [rsp+88h+msgid] ; msgid
.text:0000000000004A02                 mov     edx, 5          ; category
.text:0000000000004A07                 xor     edi, edi        ; domainname
.text:0000000000004A09                 call    _dcgettext
.text:0000000000004A0E                 jmp     loc_48A8
.text:0000000000004A0E ; ---------------------------------------------------------------------------
.text:0000000000004A13                 align 8
.text:0000000000004A18
.text:0000000000004A18 loc_4A18:                               ; CODE XREF: parse_with_separator+77↑j
.text:0000000000004A18                                         ; parse_with_separator+166↑j
.text:0000000000004A18                 xor     r10d, r10d
.text:0000000000004A1B                 xor     ebx, ebx
.text:0000000000004A1D                 jmp     loc_486C
.text:0000000000004A1D ; ---------------------------------------------------------------------------
.text:0000000000004A22                 align 8
.text:0000000000004A28
.text:0000000000004A28 loc_4A28:                               ; CODE XREF: parse_with_separator+23F↑j
.text:0000000000004A28                 mov     rax, [rsp+88h+var_60]
.text:0000000000004A2D                 mov     edx, 0FFFFFFFEh
.text:0000000000004A32                 cmp     rax, rdx
.text:0000000000004A35                 mov     r15d, eax
.text:0000000000004A38                 jbe     loc_4857
.text:0000000000004A3E                 jmp     short loc_49D1
.text:0000000000004A40 ; ---------------------------------------------------------------------------
.text:0000000000004A40
.text:0000000000004A40 loc_4A40:                               ; CODE XREF: parse_with_separator+15D↑j
.text:0000000000004A40                 mov     rax, r10
.text:0000000000004A43                 add     rax, 1
.text:0000000000004A47                 setnz   [rsp+88h+var_6A]
.text:0000000000004A4C                 test    rbp, rbp
.text:0000000000004A4F                 mov     [rsp+88h+name], rax
.text:0000000000004A54                 jz      loc_4B4A
.text:0000000000004A5A                 test    rax, rax
.text:0000000000004A5D                 setz    al
.text:0000000000004A60                 jmp     loc_490F
.text:0000000000004A60 ; ---------------------------------------------------------------------------
.text:0000000000004A65                 align 8
.text:0000000000004A68
.text:0000000000004A68 loc_4A68:                               ; CODE XREF: parse_with_separator+1B9↑j
.text:0000000000004A68                 mov     r15d, [rax+14h]
.text:0000000000004A6C                 mov     edi, r15d       ; gid
.text:0000000000004A6F                 call    _getgrgid
.text:0000000000004A74                 test    rax, rax
.text:0000000000004A77                 jz      loc_4B30
.text:0000000000004A7D                 mov     rdi, [rax]      ; src
.text:0000000000004A80
.text:0000000000004A80 loc_4A80:                               ; CODE XREF: parse_with_separator+3B0↓j
.text:0000000000004A80                 call    xstrdup
.text:0000000000004A85                 mov     rbx, rax
.text:0000000000004A88                 call    _endgrent
.text:0000000000004A8D                 mov     [rsp+88h+msgid], 0
.text:0000000000004A95                 jmp     loc_494F
.text:0000000000004A95 ; ---------------------------------------------------------------------------
.text:0000000000004A9A                 align 20h
.text:0000000000004AA0
.text:0000000000004AA0 loc_4AA0:                               ; CODE XREF: parse_with_separator+1D3↑j
.text:0000000000004AA0                 lea     rcx, [rsp+88h+var_60]
.text:0000000000004AA5                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000004AAC                 xor     esi, esi
.text:0000000000004AAE                 mov     edx, 0Ah
.text:0000000000004AB3                 mov     rdi, rbp        ; nptr
.text:0000000000004AB6                 mov     [rsp+88h+var_69], r9b
.text:0000000000004ABB                 call    xstrtoul
.text:0000000000004AC0                 lea     rsi, aInvalidUser ; "invalid user"
.text:0000000000004AC7                 test    eax, eax
.text:0000000000004AC9                 movzx   r9d, [rsp+88h+var_69]
.text:0000000000004ACF                 mov     [rsp+88h+msgid], rsi
.text:0000000000004AD3                 jnz     short loc_4B06
.text:0000000000004AD5                 mov     rax, [rsp+88h+var_60]
.text:0000000000004ADA                 movzx   ecx, [rsp+88h+var_6A]
.text:0000000000004ADF                 mov     edx, 0FFFFFFFEh
.text:0000000000004AE4                 cmp     rax, rdx
.text:0000000000004AE7                 cmova   ecx, r9d
.text:0000000000004AEB                 mov     r9d, ecx
.text:0000000000004AEE                 mov     ecx, [rsp+88h+var_70]
.text:0000000000004AF2                 cmovbe  ecx, eax
.text:0000000000004AF5                 mov     eax, 0
.text:0000000000004AFA                 cmova   rax, rsi
.text:0000000000004AFE                 mov     [rsp+88h+var_70], ecx
.text:0000000000004B02                 mov     [rsp+88h+msgid], rax
.text:0000000000004B06
.text:0000000000004B06 loc_4B06:                               ; CODE XREF: parse_with_separator+343↑j
.text:0000000000004B06                 mov     [rsp+88h+var_6A], r9b
.text:0000000000004B0B                 xor     ebx, ebx
.text:0000000000004B0D                 call    _endpwent
.text:0000000000004B12                 jmp     loc_4827
.text:0000000000004B12 ; ---------------------------------------------------------------------------
.text:0000000000004B17                 align 20h
.text:0000000000004B20
.text:0000000000004B20 loc_4B20:                               ; CODE XREF: parse_with_separator+9C↑j
.text:0000000000004B20                 cmp     [rsp+88h+msgid], 0
.text:0000000000004B25                 jnz     loc_49EE
.text:0000000000004B2B                 jmp     loc_4869
.text:0000000000004B30 ; ---------------------------------------------------------------------------
.text:0000000000004B30
.text:0000000000004B30 loc_4B30:                               ; CODE XREF: parse_with_separator+2E7↑j
.text:0000000000004B30                 lea     rsi, [rsp+88h+var_58]
.text:0000000000004B35                 mov     edi, r15d
.text:0000000000004B38                 call    umaxtostr
.text:0000000000004B3D                 mov     rdi, rax
.text:0000000000004B40                 jmp     loc_4A80
.text:0000000000004B45 ; ---------------------------------------------------------------------------
.text:0000000000004B45
.text:0000000000004B45 loc_4B45:                               ; CODE XREF: parse_with_separator+126↑j
.text:0000000000004B45                 call    ___stack_chk_fail
.text:0000000000004B4A ; ---------------------------------------------------------------------------
.text:0000000000004B4A
.text:0000000000004B4A loc_4B4A:                               ; CODE XREF: parse_with_separator+2C4↑j
.text:0000000000004B4A                 xor     ebx, ebx
.text:0000000000004B4C                 mov     [rsp+88h+msgid], 0
.text:0000000000004B54                 jmp     loc_4827
.text:0000000000004B54 ; } // starts at 4790
.text:0000000000004B54 parse_with_separator endp
.text:0000000000004B54
.text:0000000000004B54 ; ---------------------------------------------------------------------------
.text:0000000000004B59                 align 20h
.text:0000000000004B60
.text:0000000000004B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B60
.text:0000000000004B60
.text:0000000000004B60 ; __int64 __fastcall parse_user_spec(char *s)
.text:0000000000004B60                 public parse_user_spec
.text:0000000000004B60 parse_user_spec proc near               ; CODE XREF: main+1DA↑p
.text:0000000000004B60                                         ; main+2B8↑p
.text:0000000000004B60
.text:0000000000004B60 var_40          = qword ptr -40h
.text:0000000000004B60
.text:0000000000004B60 ; __unwind {
.text:0000000000004B60                 test    rdx, rdx
.text:0000000000004B63                 jz      loc_4C10
.text:0000000000004B69                 push    r15
.text:0000000000004B6B                 push    r14
.text:0000000000004B6D                 mov     r14, rsi
.text:0000000000004B70                 push    r13
.text:0000000000004B72                 push    r12
.text:0000000000004B74                 mov     r13, r8
.text:0000000000004B77                 push    rbp
.text:0000000000004B78                 push    rbx
.text:0000000000004B79                 mov     r12, rcx
.text:0000000000004B7C                 mov     rbp, rdx
.text:0000000000004B7F                 mov     rbx, rdi
.text:0000000000004B82                 mov     esi, 3Ah ; ':'  ; c
.text:0000000000004B87                 sub     rsp, 18h
.text:0000000000004B8B                 call    _strchr
.text:0000000000004B90                 mov     r9, r13
.text:0000000000004B93                 mov     r15, rax
.text:0000000000004B96                 mov     r8, r12
.text:0000000000004B99                 mov     rcx, rbp
.text:0000000000004B9C                 mov     rdx, r14
.text:0000000000004B9F                 mov     rsi, rax
.text:0000000000004BA2                 mov     rdi, rbx
.text:0000000000004BA5                 call    parse_with_separator
.text:0000000000004BAA                 test    r15, r15
.text:0000000000004BAD                 mov     r10, rax
.text:0000000000004BB0                 jnz     short loc_4BF4
.text:0000000000004BB2                 test    rax, rax
.text:0000000000004BB5                 mov     [rsp+48h+var_40], rax
.text:0000000000004BBA                 jz      short loc_4C28
.text:0000000000004BBC                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000004BC1                 mov     rdi, rbx        ; s
.text:0000000000004BC4                 call    _strchr
.text:0000000000004BC9                 test    rax, rax
.text:0000000000004BCC                 mov     r10, [rsp+48h+var_40]
.text:0000000000004BD1                 jz      short loc_4BF4
.text:0000000000004BD3                 mov     r9, r13
.text:0000000000004BD6                 mov     r8, r12
.text:0000000000004BD9                 mov     rcx, rbp
.text:0000000000004BDC                 mov     rdx, r14
.text:0000000000004BDF                 mov     rsi, rax
.text:0000000000004BE2                 mov     rdi, rbx
.text:0000000000004BE5                 call    parse_with_separator
.text:0000000000004BEA                 test    rax, rax
.text:0000000000004BED                 mov     r10, [rsp+48h+var_40]
.text:0000000000004BF2                 jz      short loc_4C28
.text:0000000000004BF4
.text:0000000000004BF4 loc_4BF4:                               ; CODE XREF: parse_user_spec+50↑j
.text:0000000000004BF4                                         ; parse_user_spec+71↑j ...
.text:0000000000004BF4                 add     rsp, 18h
.text:0000000000004BF8                 mov     rax, r10
.text:0000000000004BFB                 pop     rbx
.text:0000000000004BFC                 pop     rbp
.text:0000000000004BFD                 pop     r12
.text:0000000000004BFF                 pop     r13
.text:0000000000004C01                 pop     r14
.text:0000000000004C03                 pop     r15
.text:0000000000004C05                 retn
.text:0000000000004C05 ; ---------------------------------------------------------------------------
.text:0000000000004C06                 align 10h
.text:0000000000004C10
.text:0000000000004C10 loc_4C10:                               ; CODE XREF: parse_user_spec+3↑j
.text:0000000000004C10                 mov     r9, r8
.text:0000000000004C13                 mov     rdx, rsi
.text:0000000000004C16                 mov     r8, rcx
.text:0000000000004C19                 xor     esi, esi
.text:0000000000004C1B                 xor     ecx, ecx
.text:0000000000004C1D                 jmp     parse_with_separator
.text:0000000000004C1D ; ---------------------------------------------------------------------------
.text:0000000000004C22                 align 8
.text:0000000000004C28
.text:0000000000004C28 loc_4C28:                               ; CODE XREF: parse_user_spec+5A↑j
.text:0000000000004C28                                         ; parse_user_spec+92↑j
.text:0000000000004C28                 xor     r10d, r10d
.text:0000000000004C2B                 jmp     short loc_4BF4
.text:0000000000004C2B ; } // starts at 4B60
.text:0000000000004C2B parse_user_spec endp
.text:0000000000004C2B
.text:0000000000004C2B ; ---------------------------------------------------------------------------
.text:0000000000004C2D                 align 10h
.text:0000000000004C30
.text:0000000000004C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C30
.text:0000000000004C30
.text:0000000000004C30 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004C30                 public version_etc_arn
.text:0000000000004C30 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_506B↓j
.text:0000000000004C30                                         ; version_etc_va:loc_50BB↓p ...
.text:0000000000004C30
.text:0000000000004C30 var_58          = qword ptr -58h
.text:0000000000004C30 var_50          = qword ptr -50h
.text:0000000000004C30 var_48          = qword ptr -48h
.text:0000000000004C30 var_40          = qword ptr -40h
.text:0000000000004C30
.text:0000000000004C30 ; __unwind {
.text:0000000000004C30                 push    r15
.text:0000000000004C32                 push    r14
.text:0000000000004C34                 push    r13
.text:0000000000004C36                 push    r12
.text:0000000000004C38                 mov     r12, r9
.text:0000000000004C3B                 push    rbp
.text:0000000000004C3C                 push    rbx
.text:0000000000004C3D                 mov     rbp, rdi
.text:0000000000004C40                 mov     rbx, r8
.text:0000000000004C43                 sub     rsp, 28h
.text:0000000000004C47                 test    rsi, rsi
.text:0000000000004C4A                 jz      loc_4D68
.text:0000000000004C50                 mov     r8, rdx
.text:0000000000004C53                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004C5A                 mov     r9, rcx
.text:0000000000004C5D                 xor     eax, eax
.text:0000000000004C5F                 mov     rcx, rsi
.text:0000000000004C62                 mov     esi, 1
.text:0000000000004C67                 call    ___fprintf_chk
.text:0000000000004C6C
.text:0000000000004C6C loc_4C6C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004C6C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004C73                 xor     edi, edi        ; domainname
.text:0000000000004C75                 mov     edx, 5          ; category
.text:0000000000004C7A                 call    _dcgettext
.text:0000000000004C7F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004C86                 mov     rcx, rax
.text:0000000000004C89                 mov     r8d, 7E3h
.text:0000000000004C8F                 mov     esi, 1
.text:0000000000004C94                 mov     rdi, rbp
.text:0000000000004C97                 xor     eax, eax
.text:0000000000004C99                 call    ___fprintf_chk
.text:0000000000004C9E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004CA5                 xor     edi, edi        ; domainname
.text:0000000000004CA7                 mov     edx, 5          ; category
.text:0000000000004CAC                 call    _dcgettext
.text:0000000000004CB1                 mov     rsi, rbp        ; stream
.text:0000000000004CB4                 mov     rdi, rax        ; s
.text:0000000000004CB7                 call    _fputs_unlocked
.text:0000000000004CBC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004CC0                 ja      def_4CD4        ; jumptable 0000000000004CD4 default case
.text:0000000000004CC6                 lea     rdx, jpt_4CD4
.text:0000000000004CCD                 movsxd  rax, ds:(jpt_4CD4 - 6D2Ch)[rdx+r12*4]
.text:0000000000004CD1                 add     rax, rdx
.text:0000000000004CD4                 jmp     rax             ; switch jump
.text:0000000000004CD4 ; ---------------------------------------------------------------------------
.text:0000000000004CD6                 align 20h
.text:0000000000004CE0
.text:0000000000004CE0 loc_4CE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004CE0                                         ; DATA XREF: .rodata:jpt_4CD4↓o
.text:0000000000004CE0                 mov     r9, [rbx+38h]   ; jumptable 0000000000004CD4 case 8
.text:0000000000004CE4                 mov     rax, [rbx+10h]
.text:0000000000004CE8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004CEF                 mov     r8, [rbx+8]
.text:0000000000004CF3                 mov     edx, 5          ; category
.text:0000000000004CF8                 xor     edi, edi        ; domainname
.text:0000000000004CFA                 mov     r13, [rbx+30h]
.text:0000000000004CFE                 mov     r12, [rbx+28h]
.text:0000000000004D02                 mov     [rsp+58h+var_48], r9
.text:0000000000004D07                 mov     r15, [rbx+20h]
.text:0000000000004D0B                 mov     r14, [rbx+18h]
.text:0000000000004D0F                 mov     [rsp+58h+var_58], rax
.text:0000000000004D13                 mov     [rsp+58h+var_50], r8
.text:0000000000004D18                 mov     rbx, [rbx]
.text:0000000000004D1B                 call    _dcgettext
.text:0000000000004D20                 sub     rsp, 8
.text:0000000000004D24
.text:0000000000004D24 loc_4D24:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004D24                 mov     r9, [rsp+60h+var_48]
.text:0000000000004D29                 mov     rdx, rax
.text:0000000000004D2C                 mov     rcx, rbx
.text:0000000000004D2F                 mov     esi, 1
.text:0000000000004D34                 mov     rdi, rbp
.text:0000000000004D37                 xor     eax, eax
.text:0000000000004D39                 push    r9
.text:0000000000004D3B                 push    r13
.text:0000000000004D3D                 push    r12
.text:0000000000004D3F                 push    r15
.text:0000000000004D41                 push    r14
.text:0000000000004D43                 mov     r9, [rsp+88h+var_58]
.text:0000000000004D48                 mov     r8, [rsp+88h+var_50]
.text:0000000000004D4D                 call    ___fprintf_chk
.text:0000000000004D52                 add     rsp, 30h
.text:0000000000004D56
.text:0000000000004D56 loc_4D56:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D56                                         ; DATA XREF: .rodata:jpt_4CD4↓o
.text:0000000000004D56                 add     rsp, 28h        ; jumptable 0000000000004CD4 case 0
.text:0000000000004D5A                 pop     rbx
.text:0000000000004D5B                 pop     rbp
.text:0000000000004D5C                 pop     r12
.text:0000000000004D5E                 pop     r13
.text:0000000000004D60                 pop     r14
.text:0000000000004D62                 pop     r15
.text:0000000000004D64                 retn
.text:0000000000004D64 ; ---------------------------------------------------------------------------
.text:0000000000004D65                 align 8
.text:0000000000004D68
.text:0000000000004D68 loc_4D68:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004D68                 mov     r8, rcx
.text:0000000000004D6B                 mov     rcx, rdx
.text:0000000000004D6E                 lea     rdx, aSS        ; "%s %s\n"
.text:0000000000004D75                 mov     esi, 1
.text:0000000000004D7A                 xor     eax, eax
.text:0000000000004D7C                 call    ___fprintf_chk
.text:0000000000004D81                 jmp     loc_4C6C
.text:0000000000004D81 ; ---------------------------------------------------------------------------
.text:0000000000004D86                 align 10h
.text:0000000000004D90
.text:0000000000004D90 loc_4D90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D90                                         ; DATA XREF: .rodata:jpt_4CD4↓o
.text:0000000000004D90                 mov     r10, [rbx+40h]  ; jumptable 0000000000004CD4 case 9
.text:0000000000004D94                 mov     r9, [rbx+38h]
.text:0000000000004D98                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004D9F                 mov     rax, [rbx+10h]
.text:0000000000004DA3                 mov     r8, [rbx+8]
.text:0000000000004DA7                 mov     edx, 5          ; category
.text:0000000000004DAC                 mov     r13, [rbx+30h]
.text:0000000000004DB0                 mov     r12, [rbx+28h]
.text:0000000000004DB4                 mov     r15, [rbx+20h]
.text:0000000000004DB8                 mov     r14, [rbx+18h]
.text:0000000000004DBC                 mov     rbx, [rbx]
.text:0000000000004DBF                 mov     [rsp+58h+var_40], r10
.text:0000000000004DC4                 mov     [rsp+58h+var_48], r9
.text:0000000000004DC9                 mov     [rsp+58h+var_58], rax
.text:0000000000004DCD                 mov     [rsp+58h+var_50], r8
.text:0000000000004DD2
.text:0000000000004DD2 loc_4DD2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004DD2                 xor     edi, edi        ; domainname
.text:0000000000004DD4                 call    _dcgettext
.text:0000000000004DD9                 mov     r10, [rsp+58h+var_40]
.text:0000000000004DDE                 push    r10
.text:0000000000004DE0                 jmp     loc_4D24
.text:0000000000004DE0 ; ---------------------------------------------------------------------------
.text:0000000000004DE5                 align 8
.text:0000000000004DE8
.text:0000000000004DE8 loc_4DE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004DE8                                         ; DATA XREF: .rodata:jpt_4CD4↓o
.text:0000000000004DE8                 mov     rbx, [rbx]      ; jumptable 0000000000004CD4 case 1
.text:0000000000004DEB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004DF2                 mov     edx, 5          ; category
.text:0000000000004DF7                 xor     edi, edi        ; domainname
.text:0000000000004DF9                 call    _dcgettext
.text:0000000000004DFE                 add     rsp, 28h
.text:0000000000004E02                 mov     rcx, rbx
.text:0000000000004E05                 mov     rdi, rbp
.text:0000000000004E08                 pop     rbx
.text:0000000000004E09                 pop     rbp
.text:0000000000004E0A                 pop     r12
.text:0000000000004E0C                 pop     r13
.text:0000000000004E0E                 pop     r14
.text:0000000000004E10                 pop     r15
.text:0000000000004E12                 mov     rdx, rax
.text:0000000000004E15                 mov     esi, 1
.text:0000000000004E1A                 xor     eax, eax
.text:0000000000004E1C                 jmp     ___fprintf_chk
.text:0000000000004E1C ; ---------------------------------------------------------------------------
.text:0000000000004E21                 align 8
.text:0000000000004E28
.text:0000000000004E28 loc_4E28:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E28                                         ; DATA XREF: .rodata:jpt_4CD4↓o
.text:0000000000004E28                 mov     r12, [rbx+8]    ; jumptable 0000000000004CD4 case 2
.text:0000000000004E2C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004E33                 mov     rbx, [rbx]
.text:0000000000004E36                 mov     edx, 5          ; category
.text:0000000000004E3B                 xor     edi, edi        ; domainname
.text:0000000000004E3D                 call    _dcgettext
.text:0000000000004E42                 add     rsp, 28h
.text:0000000000004E46                 mov     r8, r12
.text:0000000000004E49                 mov     rcx, rbx
.text:0000000000004E4C                 mov     rdi, rbp
.text:0000000000004E4F                 mov     rdx, rax
.text:0000000000004E52                 mov     esi, 1
.text:0000000000004E57                 pop     rbx
.text:0000000000004E58                 pop     rbp
.text:0000000000004E59                 pop     r12
.text:0000000000004E5B                 pop     r13
.text:0000000000004E5D                 pop     r14
.text:0000000000004E5F                 pop     r15
.text:0000000000004E61                 xor     eax, eax
.text:0000000000004E63                 jmp     ___fprintf_chk
.text:0000000000004E63 ; ---------------------------------------------------------------------------
.text:0000000000004E68                 align 10h
.text:0000000000004E70
.text:0000000000004E70 loc_4E70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E70                                         ; DATA XREF: .rodata:jpt_4CD4↓o
.text:0000000000004E70                 mov     r13, [rbx+10h]  ; jumptable 0000000000004CD4 case 3
.text:0000000000004E74                 mov     r12, [rbx+8]
.text:0000000000004E78                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004E7F                 mov     rbx, [rbx]
.text:0000000000004E82                 mov     edx, 5          ; category
.text:0000000000004E87                 xor     edi, edi        ; domainname
.text:0000000000004E89                 call    _dcgettext
.text:0000000000004E8E                 add     rsp, 28h
.text:0000000000004E92                 mov     r9, r13
.text:0000000000004E95                 mov     r8, r12
.text:0000000000004E98                 mov     rcx, rbx
.text:0000000000004E9B                 mov     rdi, rbp
.text:0000000000004E9E                 mov     rdx, rax
.text:0000000000004EA1                 pop     rbx
.text:0000000000004EA2                 pop     rbp
.text:0000000000004EA3                 pop     r12
.text:0000000000004EA5                 pop     r13
.text:0000000000004EA7                 pop     r14
.text:0000000000004EA9                 pop     r15
.text:0000000000004EAB                 mov     esi, 1
.text:0000000000004EB0                 xor     eax, eax
.text:0000000000004EB2                 jmp     ___fprintf_chk
.text:0000000000004EB2 ; ---------------------------------------------------------------------------
.text:0000000000004EB7                 align 20h
.text:0000000000004EC0
.text:0000000000004EC0 loc_4EC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004EC0                                         ; DATA XREF: .rodata:jpt_4CD4↓o
.text:0000000000004EC0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004CD4 case 4
.text:0000000000004EC7                 mov     edx, 5          ; category
.text:0000000000004ECC                 xor     edi, edi        ; domainname
.text:0000000000004ECE                 mov     r14, [rbx+18h]
.text:0000000000004ED2                 mov     r13, [rbx+10h]
.text:0000000000004ED6                 mov     r12, [rbx+8]
.text:0000000000004EDA                 mov     rbx, [rbx]
.text:0000000000004EDD                 call    _dcgettext
.text:0000000000004EE2                 sub     rsp, 8
.text:0000000000004EE6
.text:0000000000004EE6 loc_4EE6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004EE6                 push    r14
.text:0000000000004EE8                 mov     rdx, rax
.text:0000000000004EEB                 mov     r9, r13
.text:0000000000004EEE                 mov     r8, r12
.text:0000000000004EF1                 mov     rcx, rbx
.text:0000000000004EF4                 mov     rdi, rbp
.text:0000000000004EF7                 mov     esi, 1
.text:0000000000004EFC                 xor     eax, eax
.text:0000000000004EFE                 call    ___fprintf_chk
.text:0000000000004F03                 pop     rax
.text:0000000000004F04                 pop     rdx
.text:0000000000004F05                 add     rsp, 28h
.text:0000000000004F09                 pop     rbx
.text:0000000000004F0A                 pop     rbp
.text:0000000000004F0B                 pop     r12
.text:0000000000004F0D                 pop     r13
.text:0000000000004F0F                 pop     r14
.text:0000000000004F11                 pop     r15
.text:0000000000004F13                 retn
.text:0000000000004F13 ; ---------------------------------------------------------------------------
.text:0000000000004F14                 align 8
.text:0000000000004F18
.text:0000000000004F18 loc_4F18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004F18                                         ; DATA XREF: .rodata:jpt_4CD4↓o
.text:0000000000004F18                 mov     r15, [rbx+20h]  ; jumptable 0000000000004CD4 case 5
.text:0000000000004F1C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004F23                 mov     edx, 5          ; category
.text:0000000000004F28                 xor     edi, edi        ; domainname
.text:0000000000004F2A                 mov     r14, [rbx+18h]
.text:0000000000004F2E                 mov     r13, [rbx+10h]
.text:0000000000004F32                 mov     r12, [rbx+8]
.text:0000000000004F36                 mov     rbx, [rbx]
.text:0000000000004F39                 call    _dcgettext
.text:0000000000004F3E                 push    r15
.text:0000000000004F40                 jmp     short loc_4EE6
.text:0000000000004F40 ; ---------------------------------------------------------------------------
.text:0000000000004F42                 align 8
.text:0000000000004F48
.text:0000000000004F48 loc_4F48:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004F48                                         ; DATA XREF: .rodata:jpt_4CD4↓o
.text:0000000000004F48                 mov     r8, [rbx+8]     ; jumptable 0000000000004CD4 case 6
.text:0000000000004F4C                 mov     r12, [rbx+28h]
.text:0000000000004F50                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004F57                 mov     r15, [rbx+20h]
.text:0000000000004F5B                 mov     r14, [rbx+18h]
.text:0000000000004F5F                 mov     edx, 5          ; category
.text:0000000000004F64                 mov     r13, [rbx+10h]
.text:0000000000004F68                 xor     edi, edi        ; domainname
.text:0000000000004F6A                 mov     rbx, [rbx]
.text:0000000000004F6D                 mov     [rsp+58h+var_58], r8
.text:0000000000004F71                 call    _dcgettext
.text:0000000000004F76                 sub     rsp, 8
.text:0000000000004F7A                 mov     r9, r13
.text:0000000000004F7D                 push    r12
.text:0000000000004F7F                 push    r15
.text:0000000000004F81                 push    r14
.text:0000000000004F83
.text:0000000000004F83 loc_4F83:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004F83                 mov     r8, [rsp+78h+var_58]
.text:0000000000004F88                 mov     rcx, rbx
.text:0000000000004F8B                 mov     rdx, rax
.text:0000000000004F8E                 mov     rdi, rbp
.text:0000000000004F91                 mov     esi, 1
.text:0000000000004F96                 xor     eax, eax
.text:0000000000004F98                 call    ___fprintf_chk
.text:0000000000004F9D                 add     rsp, 20h
.text:0000000000004FA1                 add     rsp, 28h
.text:0000000000004FA5                 pop     rbx
.text:0000000000004FA6                 pop     rbp
.text:0000000000004FA7                 pop     r12
.text:0000000000004FA9                 pop     r13
.text:0000000000004FAB                 pop     r14
.text:0000000000004FAD                 pop     r15
.text:0000000000004FAF                 retn
.text:0000000000004FB0 ; ---------------------------------------------------------------------------
.text:0000000000004FB0
.text:0000000000004FB0 loc_4FB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004FB0                                         ; DATA XREF: .rodata:jpt_4CD4↓o
.text:0000000000004FB0                 mov     r9, [rbx+10h]   ; jumptable 0000000000004CD4 case 7
.text:0000000000004FB4                 mov     r13, [rbx+30h]
.text:0000000000004FB8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004FBF                 mov     r12, [rbx+28h]
.text:0000000000004FC3                 mov     r15, [rbx+20h]
.text:0000000000004FC7                 mov     edx, 5          ; category
.text:0000000000004FCC                 mov     r14, [rbx+18h]
.text:0000000000004FD0                 mov     r8, [rbx+8]
.text:0000000000004FD4                 xor     edi, edi        ; domainname
.text:0000000000004FD6                 mov     [rsp+58h+var_50], r9
.text:0000000000004FDB                 mov     rbx, [rbx]
.text:0000000000004FDE                 mov     [rsp+58h+var_58], r8
.text:0000000000004FE2                 call    _dcgettext
.text:0000000000004FE7                 push    r13
.text:0000000000004FE9                 push    r12
.text:0000000000004FEB                 push    r15
.text:0000000000004FED                 push    r14
.text:0000000000004FEF                 mov     r9, [rsp+78h+var_50]
.text:0000000000004FF4                 jmp     short loc_4F83
.text:0000000000004FF4 ; ---------------------------------------------------------------------------
.text:0000000000004FF6                 align 20h
.text:0000000000005000
.text:0000000000005000 def_4CD4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005000                 mov     r10, [rbx+40h]  ; jumptable 0000000000004CD4 default case
.text:0000000000005004                 mov     r9, [rbx+38h]
.text:0000000000005008                 mov     edx, 5
.text:000000000000500D                 mov     rax, [rbx+10h]
.text:0000000000005011                 mov     r8, [rbx+8]
.text:0000000000005015                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000501C                 mov     r13, [rbx+30h]
.text:0000000000005020                 mov     r12, [rbx+28h]
.text:0000000000005024                 mov     r15, [rbx+20h]
.text:0000000000005028                 mov     r14, [rbx+18h]
.text:000000000000502C                 mov     [rsp+58h+var_40], r10
.text:0000000000005031                 mov     [rsp+58h+var_48], r9
.text:0000000000005036                 mov     [rsp+58h+var_58], rax
.text:000000000000503A                 mov     [rsp+58h+var_50], r8
.text:000000000000503F                 mov     rbx, [rbx]
.text:0000000000005042                 jmp     loc_4DD2
.text:0000000000005042 ; } // starts at 4C30
.text:0000000000005042 version_etc_arn endp
.text:0000000000005042
.text:0000000000005042 ; ---------------------------------------------------------------------------
.text:0000000000005047                 align 10h
.text:0000000000005050
.text:0000000000005050 ; =============== S U B R O U T I N E =======================================
.text:0000000000005050
.text:0000000000005050 ; Attributes: info_from_lumina
.text:0000000000005050
.text:0000000000005050 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005050                 public version_etc_ar
.text:0000000000005050 version_etc_ar  proc near
.text:0000000000005050 ; __unwind {
.text:0000000000005050                 xor     r9d, r9d
.text:0000000000005053                 cmp     qword ptr [r8], 0
.text:0000000000005057                 jz      short loc_506B
.text:0000000000005059                 nop     dword ptr [rax+00000000h]
.text:0000000000005060
.text:0000000000005060 loc_5060:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005060                 add     r9, 1
.text:0000000000005064                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005069                 jnz     short loc_5060
.text:000000000000506B
.text:000000000000506B loc_506B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000506B                 jmp     version_etc_arn
.text:000000000000506B ; } // starts at 5050
.text:000000000000506B version_etc_ar  endp
.text:000000000000506B
.text:0000000000005070
.text:0000000000005070 ; =============== S U B R O U T I N E =======================================
.text:0000000000005070
.text:0000000000005070 ; Attributes: info_from_lumina
.text:0000000000005070
.text:0000000000005070 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005070                 public version_etc_va
.text:0000000000005070 version_etc_va  proc near
.text:0000000000005070
.text:0000000000005070 authtab         = qword ptr -68h
.text:0000000000005070 var_10          = qword ptr -10h
.text:0000000000005070
.text:0000000000005070 ; __unwind {
.text:0000000000005070                 sub     rsp, 68h
.text:0000000000005074                 mov     r10, r8
.text:0000000000005077                 xor     r9d, r9d
.text:000000000000507A                 mov     rax, fs:28h
.text:0000000000005083                 mov     [rsp+68h+var_10], rax
.text:0000000000005088                 xor     eax, eax
.text:000000000000508A                 mov     r8, rsp
.text:000000000000508D                 nop     dword ptr [rax]
.text:0000000000005090
.text:0000000000005090 loc_5090:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005090                 mov     eax, [r10]
.text:0000000000005093                 cmp     eax, 2Fh ; '/'
.text:0000000000005096                 ja      short loc_50DA
.text:0000000000005098                 mov     r11d, eax
.text:000000000000509B                 add     r11, [r10+10h]
.text:000000000000509F                 add     eax, 8
.text:00000000000050A2                 mov     [r10], eax
.text:00000000000050A5
.text:00000000000050A5 loc_50A5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000050A5                 mov     rax, [r11]
.text:00000000000050A8                 test    rax, rax
.text:00000000000050AB                 mov     [r8+r9*8], rax
.text:00000000000050AF                 jz      short loc_50BB
.text:00000000000050B1                 add     r9, 1
.text:00000000000050B5                 cmp     r9, 0Ah
.text:00000000000050B9                 jnz     short loc_5090
.text:00000000000050BB
.text:00000000000050BB loc_50BB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000050BB                 call    version_etc_arn
.text:00000000000050C0                 mov     rax, [rsp+68h+var_10]
.text:00000000000050C5                 xor     rax, fs:28h
.text:00000000000050CE                 jnz     short loc_50D5
.text:00000000000050D0                 add     rsp, 68h
.text:00000000000050D4                 retn
.text:00000000000050D5 ; ---------------------------------------------------------------------------
.text:00000000000050D5
.text:00000000000050D5 loc_50D5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000050D5                 call    ___stack_chk_fail
.text:00000000000050DA ; ---------------------------------------------------------------------------
.text:00000000000050DA
.text:00000000000050DA loc_50DA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000050DA                 mov     r11, [r10+8]
.text:00000000000050DE                 lea     rax, [r11+8]
.text:00000000000050E2                 mov     [r10+8], rax
.text:00000000000050E6                 jmp     short loc_50A5
.text:00000000000050E6 ; } // starts at 5070
.text:00000000000050E6 version_etc_va  endp
.text:00000000000050E6
.text:00000000000050E6 ; ---------------------------------------------------------------------------
.text:00000000000050E8                 align 10h
.text:00000000000050F0
.text:00000000000050F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050F0
.text:00000000000050F0 ; Attributes: info_from_lumina
.text:00000000000050F0
.text:00000000000050F0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000050F0                 public version_etc
.text:00000000000050F0 version_etc     proc near               ; CODE XREF: main+11B↑p
.text:00000000000050F0
.text:00000000000050F0 var_C0          = dword ptr -0C0h
.text:00000000000050F0 var_B8          = qword ptr -0B8h
.text:00000000000050F0 var_B0          = qword ptr -0B0h
.text:00000000000050F0 var_A8          = byte ptr -0A8h
.text:00000000000050F0 var_50          = qword ptr -50h
.text:00000000000050F0 var_48          = byte ptr -48h
.text:00000000000050F0 var_28          = qword ptr -28h
.text:00000000000050F0 var_20          = qword ptr -20h
.text:00000000000050F0 arg_0           = byte ptr  8
.text:00000000000050F0
.text:00000000000050F0 ; __unwind {
.text:00000000000050F0                 push    rbp
.text:00000000000050F1                 push    rbx
.text:00000000000050F2                 mov     r10d, 20h ; ' '
.text:00000000000050F8                 xor     r11d, r11d
.text:00000000000050FB                 sub     rsp, 0B8h
.text:0000000000005102                 mov     rax, fs:28h
.text:000000000000510B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005110                 xor     eax, eax
.text:0000000000005112                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000511A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005122                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000512A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000512F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005137                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000513F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005144                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000514C                 xor     r9d, r9d
.text:000000000000514F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005154                 mov     rbp, rax
.text:0000000000005157                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005160
.text:0000000000005160 loc_5160:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005160                 cmp     r10d, 2Fh ; '/'
.text:0000000000005164                 ja      short loc_51BC
.text:0000000000005166                 mov     eax, r10d
.text:0000000000005169                 mov     r11d, 1
.text:000000000000516F                 add     r10d, 8
.text:0000000000005173                 add     rax, rbp
.text:0000000000005176
.text:0000000000005176 loc_5176:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005176                 mov     rax, [rax]
.text:0000000000005179                 test    rax, rax
.text:000000000000517C                 mov     [r8+r9*8], rax
.text:0000000000005180                 jz      short loc_518C
.text:0000000000005182                 add     r9, 1
.text:0000000000005186                 cmp     r9, 0Ah
.text:000000000000518A                 jnz     short loc_5160
.text:000000000000518C
.text:000000000000518C loc_518C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000518C                 test    r11b, r11b
.text:000000000000518F                 jnz     short loc_51B5
.text:0000000000005191
.text:0000000000005191 loc_5191:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005191                 call    version_etc_arn
.text:0000000000005196                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000519B                 xor     rax, fs:28h
.text:00000000000051A4                 jnz     short loc_51B0
.text:00000000000051A6                 add     rsp, 0B8h
.text:00000000000051AD                 pop     rbx
.text:00000000000051AE                 pop     rbp
.text:00000000000051AF                 retn
.text:00000000000051B0 ; ---------------------------------------------------------------------------
.text:00000000000051B0
.text:00000000000051B0 loc_51B0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000051B0                 call    ___stack_chk_fail
.text:00000000000051B5 ; ---------------------------------------------------------------------------
.text:00000000000051B5
.text:00000000000051B5 loc_51B5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000051B5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000051BA                 jmp     short loc_5191
.text:00000000000051BC ; ---------------------------------------------------------------------------
.text:00000000000051BC
.text:00000000000051BC loc_51BC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000051BC                 mov     rax, rbx
.text:00000000000051BF                 add     rbx, 8
.text:00000000000051C3                 jmp     short loc_5176
.text:00000000000051C3 ; } // starts at 50F0
.text:00000000000051C3 version_etc     endp
.text:00000000000051C3
.text:00000000000051C3 ; ---------------------------------------------------------------------------
.text:00000000000051C5                 align 10h
.text:00000000000051D0
.text:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051D0
.text:00000000000051D0 ; Attributes: info_from_lumina
.text:00000000000051D0
.text:00000000000051D0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000051D0                 public emit_bug_reporting_address
.text:00000000000051D0 emit_bug_reporting_address proc near
.text:00000000000051D0 ; __unwind {
.text:00000000000051D0                 push    rbx
.text:00000000000051D1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000051D8                 mov     edx, 5          ; category
.text:00000000000051DD                 xor     edi, edi        ; domainname
.text:00000000000051DF                 call    _dcgettext
.text:00000000000051E4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000051EB                 mov     rsi, rax
.text:00000000000051EE                 mov     edi, 1
.text:00000000000051F3                 xor     eax, eax
.text:00000000000051F5                 call    ___printf_chk
.text:00000000000051FA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005201                 mov     edx, 5          ; category
.text:0000000000005206                 xor     edi, edi        ; domainname
.text:0000000000005208                 call    _dcgettext
.text:000000000000520D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005214                 lea     rdx, unk_602A
.text:000000000000521B                 mov     rsi, rax
.text:000000000000521E                 mov     edi, 1
.text:0000000000005223                 xor     eax, eax
.text:0000000000005225                 call    ___printf_chk
.text:000000000000522A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005231                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005238                 xor     edi, edi        ; domainname
.text:000000000000523A                 mov     edx, 5          ; category
.text:000000000000523F                 call    _dcgettext
.text:0000000000005244                 mov     rsi, rbx        ; stream
.text:0000000000005247                 mov     rdi, rax        ; s
.text:000000000000524A                 pop     rbx
.text:000000000000524B                 jmp     _fputs_unlocked
.text:000000000000524B ; } // starts at 51D0
.text:000000000000524B emit_bug_reporting_address endp
.text:000000000000524B
.text:0000000000005250
.text:0000000000005250 ; =============== S U B R O U T I N E =======================================
.text:0000000000005250
.text:0000000000005250
.text:0000000000005250                 public xmalloc
.text:0000000000005250 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000005250                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000005250 ; __unwind {
.text:0000000000005250                 push    rbx
.text:0000000000005251                 mov     rbx, rdi
.text:0000000000005254                 call    _malloc
.text:0000000000005259                 test    rax, rax
.text:000000000000525C                 jnz     short loc_5263
.text:000000000000525E                 test    rbx, rbx
.text:0000000000005261                 jnz     short loc_5265
.text:0000000000005263
.text:0000000000005263 loc_5263:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005263                 pop     rbx
.text:0000000000005264                 retn
.text:0000000000005265 ; ---------------------------------------------------------------------------
.text:0000000000005265
.text:0000000000005265 loc_5265:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005265                 call    xalloc_die
.text:0000000000005265 ; } // starts at 5250
.text:0000000000005265 xmalloc         endp
.text:0000000000005265
.text:0000000000005265 ; ---------------------------------------------------------------------------
.text:000000000000526A                 align 10h
.text:0000000000005270
.text:0000000000005270 ; =============== S U B R O U T I N E =======================================
.text:0000000000005270
.text:0000000000005270 ; Attributes: info_from_lumina
.text:0000000000005270
.text:0000000000005270 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005270                 public xnmalloc
.text:0000000000005270 xnmalloc        proc near
.text:0000000000005270 ; __unwind {
.text:0000000000005270                 mov     rax, rdi
.text:0000000000005273                 mul     rsi
.text:0000000000005276                 mov     rdi, rax
.text:0000000000005279                 seto    al
.text:000000000000527C                 test    rdi, rdi
.text:000000000000527F                 js      short loc_528B
.text:0000000000005281                 movzx   eax, al
.text:0000000000005284                 test    rax, rax
.text:0000000000005287                 jnz     short loc_528B
.text:0000000000005289                 jmp     short xmalloc
.text:000000000000528B ; ---------------------------------------------------------------------------
.text:000000000000528B
.text:000000000000528B loc_528B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000528B                                         ; xnmalloc+17↑j
.text:000000000000528B                 sub     rsp, 8
.text:000000000000528F                 call    xalloc_die
.text:000000000000528F ; } // starts at 5270
.text:000000000000528F xnmalloc        endp
.text:000000000000528F
.text:000000000000528F ; ---------------------------------------------------------------------------
.text:0000000000005294                 align 20h
.text:00000000000052A0
.text:00000000000052A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052A0
.text:00000000000052A0
.text:00000000000052A0                 public xcharalloc
.text:00000000000052A0 xcharalloc      proc near
.text:00000000000052A0 ; __unwind {
.text:00000000000052A0                 jmp     short xmalloc
.text:00000000000052A0 ; } // starts at 52A0
.text:00000000000052A0 xcharalloc      endp
.text:00000000000052A0
.text:00000000000052A0 ; ---------------------------------------------------------------------------
.text:00000000000052A2                 align 10h
.text:00000000000052B0
.text:00000000000052B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052B0
.text:00000000000052B0 ; Attributes: info_from_lumina
.text:00000000000052B0
.text:00000000000052B0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000052B0                 public xrealloc
.text:00000000000052B0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000052B0                                         ; quotearg_n_options+182↑p ...
.text:00000000000052B0 ; __unwind {
.text:00000000000052B0                 test    rsi, rsi
.text:00000000000052B3                 push    rbx
.text:00000000000052B4                 mov     rbx, rsi
.text:00000000000052B7                 jnz     short loc_52BE
.text:00000000000052B9                 test    rdi, rdi
.text:00000000000052BC                 jnz     short loc_52D8
.text:00000000000052BE
.text:00000000000052BE loc_52BE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000052BE                 mov     rsi, rbx        ; size
.text:00000000000052C1                 call    _realloc
.text:00000000000052C6                 test    rax, rax
.text:00000000000052C9                 jnz     short loc_52D0
.text:00000000000052CB                 test    rbx, rbx
.text:00000000000052CE                 jnz     short loc_52E1
.text:00000000000052D0
.text:00000000000052D0 loc_52D0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000052D0                 pop     rbx
.text:00000000000052D1                 retn
.text:00000000000052D1 ; ---------------------------------------------------------------------------
.text:00000000000052D2                 align 8
.text:00000000000052D8
.text:00000000000052D8 loc_52D8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000052D8                 call    _free
.text:00000000000052DD                 xor     eax, eax
.text:00000000000052DF                 pop     rbx
.text:00000000000052E0                 retn
.text:00000000000052E1 ; ---------------------------------------------------------------------------
.text:00000000000052E1
.text:00000000000052E1 loc_52E1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000052E1                 call    xalloc_die
.text:00000000000052E1 ; } // starts at 52B0
.text:00000000000052E1 xrealloc        endp
.text:00000000000052E1
.text:00000000000052E1 ; ---------------------------------------------------------------------------
.text:00000000000052E6                 align 10h
.text:00000000000052F0
.text:00000000000052F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052F0
.text:00000000000052F0 ; Attributes: info_from_lumina
.text:00000000000052F0
.text:00000000000052F0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000052F0                 public xnrealloc
.text:00000000000052F0 xnrealloc       proc near
.text:00000000000052F0 ; __unwind {
.text:00000000000052F0                 mov     rax, rsi
.text:00000000000052F3                 mul     rdx
.text:00000000000052F6                 mov     rsi, rax
.text:00000000000052F9                 seto    al
.text:00000000000052FC                 test    rsi, rsi
.text:00000000000052FF                 js      short loc_530B
.text:0000000000005301                 movzx   eax, al
.text:0000000000005304                 test    rax, rax
.text:0000000000005307                 jnz     short loc_530B
.text:0000000000005309                 jmp     short xrealloc
.text:000000000000530B ; ---------------------------------------------------------------------------
.text:000000000000530B
.text:000000000000530B loc_530B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000530B                                         ; xnrealloc+17↑j
.text:000000000000530B                 sub     rsp, 8
.text:000000000000530F                 call    xalloc_die
.text:000000000000530F ; } // starts at 52F0
.text:000000000000530F xnrealloc       endp
.text:000000000000530F
.text:000000000000530F ; ---------------------------------------------------------------------------
.text:0000000000005314                 align 20h
.text:0000000000005320
.text:0000000000005320 ; =============== S U B R O U T I N E =======================================
.text:0000000000005320
.text:0000000000005320 ; Attributes: info_from_lumina
.text:0000000000005320
.text:0000000000005320 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005320                 public x2nrealloc
.text:0000000000005320 x2nrealloc      proc near               ; CODE XREF: parse_additional_groups+1BB↑p
.text:0000000000005320 ; __unwind {
.text:0000000000005320                 test    rdi, rdi
.text:0000000000005323                 mov     r9, rdx
.text:0000000000005326                 mov     rcx, [rsi]
.text:0000000000005329                 jz      short loc_5360
.text:000000000000532B                 xor     edx, edx
.text:000000000000532D                 mov     rax, 5555555555555554h
.text:0000000000005337                 div     r9
.text:000000000000533A                 cmp     rax, rcx
.text:000000000000533D                 jbe     short loc_537B
.text:000000000000533F                 mov     rax, rcx
.text:0000000000005342                 shr     rax, 1
.text:0000000000005345                 lea     rcx, [rax+rcx+1]
.text:000000000000534A
.text:000000000000534A loc_534A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000534A                 mov     [rsi], rcx
.text:000000000000534D                 imul    rcx, r9
.text:0000000000005351                 mov     rsi, rcx
.text:0000000000005354                 jmp     xrealloc
.text:0000000000005354 ; ---------------------------------------------------------------------------
.text:0000000000005359                 align 20h
.text:0000000000005360
.text:0000000000005360 loc_5360:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005360                 test    rcx, rcx
.text:0000000000005363                 jz      short loc_5388
.text:0000000000005365
.text:0000000000005365 loc_5365:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005365                 mov     rax, rcx
.text:0000000000005368                 mul     r9
.text:000000000000536B                 seto    dl
.text:000000000000536E                 test    rax, rax
.text:0000000000005371                 movzx   edx, dl
.text:0000000000005374                 js      short loc_537B
.text:0000000000005376                 test    rdx, rdx
.text:0000000000005379                 jz      short loc_534A
.text:000000000000537B
.text:000000000000537B loc_537B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000537B                                         ; x2nrealloc+54↑j
.text:000000000000537B                 sub     rsp, 8
.text:000000000000537F                 call    xalloc_die
.text:000000000000537F ; ---------------------------------------------------------------------------
.text:0000000000005384                 align 8
.text:0000000000005388
.text:0000000000005388 loc_5388:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005388                 xor     edx, edx
.text:000000000000538A                 mov     eax, 80h
.text:000000000000538F                 xor     r8d, r8d
.text:0000000000005392                 div     r9
.text:0000000000005395                 test    rax, rax
.text:0000000000005398                 setz    r8b
.text:000000000000539C                 lea     rcx, [r8+rax]
.text:00000000000053A0                 jmp     short loc_5365
.text:00000000000053A0 ; } // starts at 5320
.text:00000000000053A0 x2nrealloc      endp
.text:00000000000053A0
.text:00000000000053A0 ; ---------------------------------------------------------------------------
.text:00000000000053A2                 align 10h
.text:00000000000053B0
.text:00000000000053B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053B0
.text:00000000000053B0 ; Attributes: info_from_lumina
.text:00000000000053B0
.text:00000000000053B0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000053B0                 public x2realloc
.text:00000000000053B0 x2realloc       proc near
.text:00000000000053B0 ; __unwind {
.text:00000000000053B0                 test    rdi, rdi
.text:00000000000053B3                 mov     rax, [rsi]
.text:00000000000053B6                 jz      short loc_53E0
.text:00000000000053B8                 mov     rdx, 5555555555555553h
.text:00000000000053C2                 cmp     rax, rdx
.text:00000000000053C5                 ja      short loc_53F1
.text:00000000000053C7                 mov     rdx, rax
.text:00000000000053CA                 shr     rdx, 1
.text:00000000000053CD                 lea     rax, [rdx+rax+1]
.text:00000000000053D2
.text:00000000000053D2 loc_53D2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000053D2                 mov     [rsi], rax
.text:00000000000053D5                 mov     rsi, rax
.text:00000000000053D8                 jmp     xrealloc
.text:00000000000053D8 ; ---------------------------------------------------------------------------
.text:00000000000053DD                 align 20h
.text:00000000000053E0
.text:00000000000053E0 loc_53E0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000053E0                 test    rax, rax
.text:00000000000053E3                 mov     edx, 80h
.text:00000000000053E8                 cmovz   rax, rdx
.text:00000000000053EC                 test    rax, rax
.text:00000000000053EF                 jns     short loc_53D2
.text:00000000000053F1
.text:00000000000053F1 loc_53F1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000053F1                 sub     rsp, 8
.text:00000000000053F5                 call    xalloc_die
.text:00000000000053F5 ; } // starts at 53B0
.text:00000000000053F5 x2realloc       endp
.text:00000000000053F5
.text:00000000000053F5 ; ---------------------------------------------------------------------------
.text:00000000000053FA                 align 20h
.text:0000000000005400
.text:0000000000005400 ; =============== S U B R O U T I N E =======================================
.text:0000000000005400
.text:0000000000005400
.text:0000000000005400 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005400                 public xzalloc
.text:0000000000005400 xzalloc         proc near
.text:0000000000005400 ; __unwind {
.text:0000000000005400                 push    rbx
.text:0000000000005401                 mov     rbx, rdi
.text:0000000000005404                 call    xmalloc
.text:0000000000005409                 mov     rdx, rbx        ; n
.text:000000000000540C                 xor     esi, esi        ; c
.text:000000000000540E                 mov     rdi, rax        ; s
.text:0000000000005411                 pop     rbx
.text:0000000000005412                 jmp     _memset
.text:0000000000005412 ; } // starts at 5400
.text:0000000000005412 xzalloc         endp
.text:0000000000005412
.text:0000000000005412 ; ---------------------------------------------------------------------------
.text:0000000000005417                 align 20h
.text:0000000000005420
.text:0000000000005420 ; =============== S U B R O U T I N E =======================================
.text:0000000000005420
.text:0000000000005420 ; Attributes: info_from_lumina
.text:0000000000005420
.text:0000000000005420 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005420                 public xcalloc
.text:0000000000005420 xcalloc         proc near
.text:0000000000005420 ; __unwind {
.text:0000000000005420                 mov     rax, rdi
.text:0000000000005423                 sub     rsp, 8
.text:0000000000005427                 mul     rsi
.text:000000000000542A                 seto    dl
.text:000000000000542D                 test    rax, rax
.text:0000000000005430                 js      short loc_5449
.text:0000000000005432                 movzx   edx, dl
.text:0000000000005435                 test    rdx, rdx
.text:0000000000005438                 jnz     short loc_5449
.text:000000000000543A                 call    _calloc
.text:000000000000543F                 test    rax, rax
.text:0000000000005442                 jz      short loc_5449
.text:0000000000005444                 add     rsp, 8
.text:0000000000005448                 retn
.text:0000000000005449 ; ---------------------------------------------------------------------------
.text:0000000000005449
.text:0000000000005449 loc_5449:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005449                                         ; xcalloc+18↑j ...
.text:0000000000005449                 call    xalloc_die
.text:0000000000005449 ; } // starts at 5420
.text:0000000000005449 xcalloc         endp
.text:0000000000005449
.text:0000000000005449 ; ---------------------------------------------------------------------------
.text:000000000000544E                 align 10h
.text:0000000000005450
.text:0000000000005450 ; =============== S U B R O U T I N E =======================================
.text:0000000000005450
.text:0000000000005450 ; Attributes: info_from_lumina
.text:0000000000005450
.text:0000000000005450 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005450                 public xmemdup
.text:0000000000005450 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005450                                         ; parse_with_separator+148↑p ...
.text:0000000000005450 ; __unwind {
.text:0000000000005450                 push    rbp
.text:0000000000005451                 push    rbx
.text:0000000000005452                 mov     rbp, rdi
.text:0000000000005455                 mov     rdi, rsi
.text:0000000000005458                 mov     rbx, rsi
.text:000000000000545B                 sub     rsp, 8
.text:000000000000545F                 call    xmalloc
.text:0000000000005464                 add     rsp, 8
.text:0000000000005468                 mov     rdx, rbx        ; n
.text:000000000000546B                 mov     rsi, rbp        ; src
.text:000000000000546E                 pop     rbx
.text:000000000000546F                 pop     rbp
.text:0000000000005470                 mov     rdi, rax        ; dest
.text:0000000000005473                 jmp     _memcpy
.text:0000000000005473 ; } // starts at 5450
.text:0000000000005473 xmemdup         endp
.text:0000000000005473
.text:0000000000005473 ; ---------------------------------------------------------------------------
.text:0000000000005478                 align 20h
.text:0000000000005480
.text:0000000000005480 ; =============== S U B R O U T I N E =======================================
.text:0000000000005480
.text:0000000000005480
.text:0000000000005480 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005480                 public xstrdup
.text:0000000000005480 xstrdup         proc near               ; CODE XREF: parse_additional_groups+3E↑p
.text:0000000000005480                                         ; parse_with_separator+D1↑p ...
.text:0000000000005480 ; __unwind {
.text:0000000000005480                 push    rbx
.text:0000000000005481                 mov     rbx, rdi
.text:0000000000005484                 call    _strlen
.text:0000000000005489                 mov     rdi, rbx        ; src
.text:000000000000548C                 lea     rsi, [rax+1]    ; n
.text:0000000000005490                 pop     rbx
.text:0000000000005491                 jmp     short xmemdup
.text:0000000000005491 ; } // starts at 5480
.text:0000000000005491 xstrdup         endp
.text:0000000000005491
.text:0000000000005491 ; ---------------------------------------------------------------------------
.text:0000000000005493                 align 20h
.text:00000000000054A0
.text:00000000000054A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054A0
.text:00000000000054A0 ; Attributes: noreturn info_from_lumina
.text:00000000000054A0
.text:00000000000054A0 ; void __cdecl xalloc_die()
.text:00000000000054A0                 public xalloc_die
.text:00000000000054A0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3FD6↑p
.text:00000000000054A0                                         ; xmalloc:loc_5265↑p ...
.text:00000000000054A0 ; __unwind {
.text:00000000000054A0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000054A7                 sub     rsp, 8
.text:00000000000054AB                 mov     edx, 5          ; category
.text:00000000000054B0                 xor     edi, edi        ; domainname
.text:00000000000054B2                 call    _dcgettext
.text:00000000000054B7                 mov     edi, cs:exit_failure ; status
.text:00000000000054BD                 lea     rdx, format     ; format
.text:00000000000054C4                 mov     rcx, rax
.text:00000000000054C7                 xor     esi, esi        ; errnum
.text:00000000000054C9                 xor     eax, eax
.text:00000000000054CB                 call    _error
.text:00000000000054D0                 call    _abort
.text:00000000000054D0 ; } // starts at 54A0
.text:00000000000054D0 xalloc_die      endp
.text:00000000000054D0
.text:00000000000054D0 ; ---------------------------------------------------------------------------
.text:00000000000054D5                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0
.text:00000000000054E0                 public xgetgroups
.text:00000000000054E0 xgetgroups      proc near               ; CODE XREF: main+491↑p
.text:00000000000054E0                                         ; main+546↑p
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 push    rbx
.text:00000000000054E1                 call    mgetgroups
.text:00000000000054E6                 cmp     eax, 0FFFFFFFFh
.text:00000000000054E9                 mov     ebx, eax
.text:00000000000054EB                 jz      short loc_54F8
.text:00000000000054ED
.text:00000000000054ED loc_54ED:                               ; CODE XREF: xgetgroups+20↓j
.text:00000000000054ED                 mov     eax, ebx
.text:00000000000054EF                 pop     rbx
.text:00000000000054F0                 retn
.text:00000000000054F0 ; ---------------------------------------------------------------------------
.text:00000000000054F1                 align 8
.text:00000000000054F8
.text:00000000000054F8 loc_54F8:                               ; CODE XREF: xgetgroups+B↑j
.text:00000000000054F8                 call    ___errno_location
.text:00000000000054FD                 cmp     dword ptr [rax], 0Ch
.text:0000000000005500                 jnz     short loc_54ED
.text:0000000000005502                 call    xalloc_die
.text:0000000000005502 ; } // starts at 54E0
.text:0000000000005502 xgetgroups      endp
.text:0000000000005502
.text:0000000000005502 ; ---------------------------------------------------------------------------
.text:0000000000005507                 align 10h
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510
.text:0000000000005510 ; __int64 __fastcall xstrtoul(char *nptr)
.text:0000000000005510                 public xstrtoul
.text:0000000000005510 xstrtoul        proc near               ; CODE XREF: parse_additional_groups+9B↑p
.text:0000000000005510                                         ; parse_with_separator+238↑p ...
.text:0000000000005510
.text:0000000000005510 base            = dword ptr -50h
.text:0000000000005510 endptr          = qword ptr -48h
.text:0000000000005510 var_40          = qword ptr -40h
.text:0000000000005510
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 push    r15
.text:0000000000005512                 push    r14
.text:0000000000005514                 push    r13
.text:0000000000005516                 push    r12
.text:0000000000005518                 push    rbp
.text:0000000000005519                 push    rbx
.text:000000000000551A                 sub     rsp, 28h
.text:000000000000551E                 mov     rax, fs:28h
.text:0000000000005527                 mov     [rsp+58h+var_40], rax
.text:000000000000552C                 xor     eax, eax
.text:000000000000552E                 cmp     edx, 24h ; '$'
.text:0000000000005531                 ja      loc_5895
.text:0000000000005537                 lea     rax, [rsp+58h+endptr]
.text:000000000000553C                 mov     r15, rsi
.text:000000000000553F                 test    rsi, rsi
.text:0000000000005542                 mov     rbp, rdi
.text:0000000000005545                 mov     [rsp+58h+base], edx
.text:0000000000005549                 mov     r14, rcx
.text:000000000000554C                 mov     r13, r8
.text:000000000000554F                 cmovz   r15, rax
.text:0000000000005553                 call    ___errno_location
.text:0000000000005558                 mov     dword ptr [rax], 0
.text:000000000000555E                 mov     r12, rax
.text:0000000000005561                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000005565                 call    ___ctype_b_loc
.text:000000000000556A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000556E                 mov     rsi, [rax]
.text:0000000000005571                 mov     rax, rbp
.text:0000000000005574                 jmp     short loc_5587
.text:0000000000005574 ; ---------------------------------------------------------------------------
.text:0000000000005576                 align 20h
.text:0000000000005580
.text:0000000000005580 loc_5580:                               ; CODE XREF: xstrtoul+7F↓j
.text:0000000000005580                 add     rax, 1
.text:0000000000005584                 movzx   ebx, byte ptr [rax]
.text:0000000000005587
.text:0000000000005587 loc_5587:                               ; CODE XREF: xstrtoul+64↑j
.text:0000000000005587                 movzx   ecx, bl
.text:000000000000558A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000558F                 jnz     short loc_5580
.text:0000000000005591                 cmp     bl, 2Dh ; '-'
.text:0000000000005594                 jz      short loc_55E8
.text:0000000000005596                 mov     rsi, r15        ; endptr
.text:0000000000005599                 mov     rdi, rbp        ; nptr
.text:000000000000559C                 call    _strtoul
.text:00000000000055A1                 mov     rcx, [r15]
.text:00000000000055A4                 mov     rbx, rax
.text:00000000000055A7                 cmp     rcx, rbp
.text:00000000000055AA                 jz      short loc_55D8
.text:00000000000055AC                 mov     eax, [r12]
.text:00000000000055B0                 test    eax, eax
.text:00000000000055B2                 jz      short loc_5618
.text:00000000000055B4                 cmp     eax, 22h ; '"'
.text:00000000000055B7                 mov     ebp, 1
.text:00000000000055BC                 jnz     short loc_55E8
.text:00000000000055BE
.text:00000000000055BE loc_55BE:                               ; CODE XREF: xstrtoul+10A↓j
.text:00000000000055BE                 test    r13, r13
.text:00000000000055C1                 jz      short loc_55CC
.text:00000000000055C3                 movzx   r12d, byte ptr [rcx]
.text:00000000000055C7                 test    r12b, r12b
.text:00000000000055CA                 jnz     short loc_5647
.text:00000000000055CC
.text:00000000000055CC loc_55CC:                               ; CODE XREF: xstrtoul+B1↑j
.text:00000000000055CC                 mov     [r14], rbx
.text:00000000000055CF                 jmp     short loc_55ED
.text:00000000000055CF ; ---------------------------------------------------------------------------
.text:00000000000055D1                 align 8
.text:00000000000055D8
.text:00000000000055D8 loc_55D8:                               ; CODE XREF: xstrtoul+9A↑j
.text:00000000000055D8                 test    r13, r13
.text:00000000000055DB                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000055E0                 jnz     short loc_5620
.text:00000000000055E2                 nop     word ptr [rax+rax+00h]
.text:00000000000055E8
.text:00000000000055E8 loc_55E8:                               ; CODE XREF: xstrtoul+84↑j
.text:00000000000055E8                                         ; xstrtoul+AC↑j ...
.text:00000000000055E8                 mov     ebp, 4
.text:00000000000055ED
.text:00000000000055ED loc_55ED:                               ; CODE XREF: xstrtoul+BF↑j
.text:00000000000055ED                                         ; xstrtoul+217↓j ...
.text:00000000000055ED                 mov     rdi, [rsp+58h+var_40]
.text:00000000000055F2                 xor     rdi, fs:28h
.text:00000000000055FB                 mov     eax, ebp
.text:00000000000055FD                 jnz     loc_5890
.text:0000000000005603                 add     rsp, 28h
.text:0000000000005607                 pop     rbx
.text:0000000000005608                 pop     rbp
.text:0000000000005609                 pop     r12
.text:000000000000560B                 pop     r13
.text:000000000000560D                 pop     r14
.text:000000000000560F                 pop     r15
.text:0000000000005611                 retn
.text:0000000000005611 ; ---------------------------------------------------------------------------
.text:0000000000005612                 align 8
.text:0000000000005618
.text:0000000000005618 loc_5618:                               ; CODE XREF: xstrtoul+A2↑j
.text:0000000000005618                 xor     ebp, ebp
.text:000000000000561A                 jmp     short loc_55BE
.text:000000000000561A ; ---------------------------------------------------------------------------
.text:000000000000561C                 align 20h
.text:0000000000005620
.text:0000000000005620 loc_5620:                               ; CODE XREF: xstrtoul+D0↑j
.text:0000000000005620                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000005625                 test    r12b, r12b
.text:0000000000005628                 jz      short loc_55E8
.text:000000000000562A                 movsx   esi, r12b       ; c
.text:000000000000562E                 mov     rdi, r13        ; s
.text:0000000000005631                 xor     ebp, ebp
.text:0000000000005633                 call    _strchr
.text:0000000000005638                 test    rax, rax
.text:000000000000563B                 mov     ebx, 1
.text:0000000000005640                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005645                 jz      short loc_55E8
.text:0000000000005647
.text:0000000000005647 loc_5647:                               ; CODE XREF: xstrtoul+BA↑j
.text:0000000000005647                 movsx   esi, r12b       ; c
.text:000000000000564B                 mov     rdi, r13        ; s
.text:000000000000564E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000005653                 call    _strchr
.text:0000000000005658                 test    rax, rax
.text:000000000000565B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005660                 jz      def_56E6        ; jumptable 00000000000056E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000005666                 lea     eax, [r12-45h]
.text:000000000000566B                 cmp     al, 2Fh ; '/'
.text:000000000000566D                 ja      short loc_56C0
.text:000000000000566F                 mov     rdx, 814400308945h
.text:0000000000005679                 bt      rdx, rax
.text:000000000000567D                 jnb     short loc_56C0
.text:000000000000567F                 mov     esi, 30h ; '0'  ; c
.text:0000000000005684                 mov     rdi, r13        ; s
.text:0000000000005687                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000568C                 call    _strchr
.text:0000000000005691                 test    rax, rax
.text:0000000000005694                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005699                 jz      short loc_56C0
.text:000000000000569B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000569F                 cmp     al, 44h ; 'D'
.text:00000000000056A1                 jz      short loc_56AF
.text:00000000000056A3                 cmp     al, 69h ; 'i'
.text:00000000000056A5                 jz      loc_5878
.text:00000000000056AB                 cmp     al, 42h ; 'B'
.text:00000000000056AD                 jnz     short loc_56C0
.text:00000000000056AF
.text:00000000000056AF loc_56AF:                               ; CODE XREF: xstrtoul+191↑j
.text:00000000000056AF                 mov     edi, 2
.text:00000000000056B4                 mov     esi, 3E8h
.text:00000000000056B9                 jmp     short loc_56CA
.text:00000000000056B9 ; ---------------------------------------------------------------------------
.text:00000000000056BB                 align 20h
.text:00000000000056C0
.text:00000000000056C0 loc_56C0:                               ; CODE XREF: xstrtoul+15D↑j
.text:00000000000056C0                                         ; xstrtoul+16D↑j ...
.text:00000000000056C0                 mov     edi, 1
.text:00000000000056C5                 mov     esi, 400h
.text:00000000000056CA
.text:00000000000056CA loc_56CA:                               ; CODE XREF: xstrtoul+1A9↑j
.text:00000000000056CA                                         ; xstrtoul+37B↓j
.text:00000000000056CA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:00000000000056CE                 cmp     r12b, 35h
.text:00000000000056D2                 ja      short def_56E6  ; jumptable 00000000000056E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000056D4                 lea     rdx, jpt_56E6
.text:00000000000056DB                 movzx   r12d, r12b
.text:00000000000056DF                 movsxd  rax, ds:(jpt_56E6 - 6DE8h)[rdx+r12*4]
.text:00000000000056E3                 add     rax, rdx
.text:00000000000056E6                 jmp     rax             ; switch jump
.text:00000000000056E8 ; ---------------------------------------------------------------------------
.text:00000000000056E8
.text:00000000000056E8 loc_56E8:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000056E8                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:00000000000056E8                 mov     rax, rbx        ; jumptable 00000000000056E6 cases 77,109
.text:00000000000056EB                 mul     rsi
.text:00000000000056EE                 jo      loc_58E1
.text:00000000000056F4                 xor     r8d, r8d
.text:00000000000056F7
.text:00000000000056F7 loc_56F7:                               ; CODE XREF: xstrtoul+34E↓j
.text:00000000000056F7                                         ; xstrtoul+35E↓j ...
.text:00000000000056F7                 mul     rsi
.text:00000000000056FA                 jo      loc_58D2
.text:0000000000005700                 mov     rbx, rax
.text:0000000000005703
.text:0000000000005703 loc_5703:                               ; CODE XREF: xstrtoul+3CC↓j
.text:0000000000005703                 or      ebp, r8d
.text:0000000000005706                 db      2Eh
.text:0000000000005706                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005710
.text:0000000000005710 loc_5710:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005710                                         ; xstrtoul+23B↓j ...
.text:0000000000005710                 movsxd  rdi, edi        ; jumptable 00000000000056E6 case 99
.text:0000000000005713                 mov     eax, ebp
.text:0000000000005715                 add     rcx, rdi
.text:0000000000005718                 or      eax, 2
.text:000000000000571B                 mov     [r15], rcx
.text:000000000000571E                 cmp     byte ptr [rcx], 0
.text:0000000000005721                 mov     [r14], rbx
.text:0000000000005724                 cmovnz  ebp, eax
.text:0000000000005727                 jmp     loc_55ED
.text:000000000000572C ; ---------------------------------------------------------------------------
.text:000000000000572C
.text:000000000000572C def_56E6:                               ; CODE XREF: xstrtoul+150↑j
.text:000000000000572C                                         ; xstrtoul+1C2↑j ...
.text:000000000000572C                 mov     [r14], rbx      ; jumptable 00000000000056E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000572F                 or      ebp, 2
.text:0000000000005732                 jmp     loc_55ED
.text:0000000000005737 ; ---------------------------------------------------------------------------
.text:0000000000005737
.text:0000000000005737 loc_5737:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005737                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:0000000000005737                 mov     edx, 2          ; jumptable 00000000000056E6 case 119
.text:000000000000573C                 mov     rax, rdx
.text:000000000000573F                 mul     rbx
.text:0000000000005742                 jo      loc_57DE
.text:0000000000005748                 add     rbx, rbx
.text:000000000000574B                 jmp     short loc_5710  ; jumptable 00000000000056E6 case 99
.text:000000000000574D ; ---------------------------------------------------------------------------
.text:000000000000574D
.text:000000000000574D loc_574D:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000574D                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:000000000000574D                 mov     edx, 200h       ; jumptable 00000000000056E6 case 98
.text:0000000000005752                 mov     rax, rdx
.text:0000000000005755                 mul     rbx
.text:0000000000005758                 jo      loc_57DE
.text:000000000000575E                 shl     rbx, 9
.text:0000000000005762                 jmp     short loc_5710  ; jumptable 00000000000056E6 case 99
.text:0000000000005764 ; ---------------------------------------------------------------------------
.text:0000000000005764
.text:0000000000005764 loc_5764:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005764                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:0000000000005764                 mov     r8d, 7          ; jumptable 00000000000056E6 case 90
.text:000000000000576A                 xor     r9d, r9d
.text:000000000000576D                 nop     dword ptr [rax]
.text:0000000000005770
.text:0000000000005770 loc_5770:                               ; CODE XREF: xstrtoul+273↓j
.text:0000000000005770                 mov     rax, rbx
.text:0000000000005773                 mul     rsi
.text:0000000000005776                 mov     rbx, rax
.text:0000000000005779                 jo      loc_590E
.text:000000000000577F
.text:000000000000577F loc_577F:                               ; CODE XREF: xstrtoul+408↓j
.text:000000000000577F                 sub     r8d, 1
.text:0000000000005783                 jnz     short loc_5770
.text:0000000000005785
.text:0000000000005785 loc_5785:                               ; CODE XREF: xstrtoul+29D↓j
.text:0000000000005785                                         ; xstrtoul+2BD↓j ...
.text:0000000000005785                 or      ebp, r9d
.text:0000000000005788                 jmp     short loc_5710  ; jumptable 00000000000056E6 case 99
.text:000000000000578A ; ---------------------------------------------------------------------------
.text:000000000000578A
.text:000000000000578A loc_578A:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000578A                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:000000000000578A                 mov     r8d, 8          ; jumptable 00000000000056E6 case 89
.text:0000000000005790                 xor     r9d, r9d
.text:0000000000005793                 nop     dword ptr [rax+rax+00h]
.text:0000000000005798
.text:0000000000005798 loc_5798:                               ; CODE XREF: xstrtoul+29B↓j
.text:0000000000005798                 mov     rax, rbx
.text:000000000000579B                 mul     rsi
.text:000000000000579E                 mov     rbx, rax
.text:00000000000057A1                 jo      loc_58F0
.text:00000000000057A7
.text:00000000000057A7 loc_57A7:                               ; CODE XREF: xstrtoul+3EA↓j
.text:00000000000057A7                 sub     r8d, 1
.text:00000000000057AB                 jnz     short loc_5798
.text:00000000000057AD                 jmp     short loc_5785
.text:00000000000057AF ; ---------------------------------------------------------------------------
.text:00000000000057AF
.text:00000000000057AF loc_57AF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000057AF                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:00000000000057AF                 mov     r8d, 4          ; jumptable 00000000000056E6 cases 84,116
.text:00000000000057B5                 xor     r9d, r9d
.text:00000000000057B8
.text:00000000000057B8 loc_57B8:                               ; CODE XREF: xstrtoul+2BB↓j
.text:00000000000057B8                 mov     rax, rbx
.text:00000000000057BB                 mul     rsi
.text:00000000000057BE                 mov     rbx, rax
.text:00000000000057C1                 jo      loc_58C3
.text:00000000000057C7
.text:00000000000057C7 loc_57C7:                               ; CODE XREF: xstrtoul+3BD↓j
.text:00000000000057C7                 sub     r8d, 1
.text:00000000000057CB                 jnz     short loc_57B8
.text:00000000000057CD                 jmp     short loc_5785
.text:00000000000057CF ; ---------------------------------------------------------------------------
.text:00000000000057CF
.text:00000000000057CF loc_57CF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000057CF                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:00000000000057CF                 mov     rax, rbx        ; jumptable 00000000000056E6 cases 75,107
.text:00000000000057D2                 mul     rsi
.text:00000000000057D5                 mov     rbx, rax
.text:00000000000057D8                 jno     loc_5710        ; jumptable 00000000000056E6 case 99
.text:00000000000057DE
.text:00000000000057DE loc_57DE:                               ; CODE XREF: xstrtoul+232↑j
.text:00000000000057DE                                         ; xstrtoul+248↑j ...
.text:00000000000057DE                 mov     ebp, 1
.text:00000000000057E3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000057E7                 jmp     loc_5710        ; jumptable 00000000000056E6 case 99
.text:00000000000057E7 ; ---------------------------------------------------------------------------
.text:00000000000057EC                 align 10h
.text:00000000000057F0
.text:00000000000057F0 loc_57F0:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000057F0                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:00000000000057F0                 mov     r8d, 5          ; jumptable 00000000000056E6 case 80
.text:00000000000057F6                 xor     r9d, r9d
.text:00000000000057F9
.text:00000000000057F9 loc_57F9:                               ; CODE XREF: xstrtoul+2FC↓j
.text:00000000000057F9                 mov     rax, rbx
.text:00000000000057FC                 mul     rsi
.text:00000000000057FF                 mov     rbx, rax
.text:0000000000005802                 jo      loc_58FF
.text:0000000000005808
.text:0000000000005808 loc_5808:                               ; CODE XREF: xstrtoul+3F9↓j
.text:0000000000005808                 sub     r8d, 1
.text:000000000000580C                 jnz     short loc_57F9
.text:000000000000580E                 jmp     loc_5785
.text:0000000000005813 ; ---------------------------------------------------------------------------
.text:0000000000005813
.text:0000000000005813 loc_5813:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005813                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:0000000000005813                 mov     r8d, 6          ; jumptable 00000000000056E6 case 69
.text:0000000000005819                 xor     r9d, r9d
.text:000000000000581C
.text:000000000000581C loc_581C:                               ; CODE XREF: xstrtoul+31F↓j
.text:000000000000581C                 mov     rax, rbx
.text:000000000000581F                 mul     rsi
.text:0000000000005822                 mov     rbx, rax
.text:0000000000005825                 jo      loc_58B4
.text:000000000000582B
.text:000000000000582B loc_582B:                               ; CODE XREF: xstrtoul+3AE↓j
.text:000000000000582B                 sub     r8d, 1
.text:000000000000582F                 jnz     short loc_581C
.text:0000000000005831                 jmp     loc_5785
.text:0000000000005836 ; ---------------------------------------------------------------------------
.text:0000000000005836
.text:0000000000005836 loc_5836:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005836                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:0000000000005836                 mov     edx, 400h       ; jumptable 00000000000056E6 case 66
.text:000000000000583B                 mov     rax, rdx
.text:000000000000583E                 mul     rbx
.text:0000000000005841                 jo      short loc_57DE
.text:0000000000005843                 shl     rbx, 0Ah
.text:0000000000005847                 jmp     loc_5710        ; jumptable 00000000000056E6 case 99
.text:000000000000584C ; ---------------------------------------------------------------------------
.text:000000000000584C
.text:000000000000584C loc_584C:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000584C                                         ; DATA XREF: .rodata:jpt_56E6↓o
.text:000000000000584C                 mov     rax, rbx        ; jumptable 00000000000056E6 cases 71,103
.text:000000000000584F                 mul     rsi
.text:0000000000005852                 jo      loc_591D
.text:0000000000005858                 xor     r8d, r8d
.text:000000000000585B
.text:000000000000585B loc_585B:                               ; CODE XREF: xstrtoul+417↓j
.text:000000000000585B                 mul     rsi
.text:000000000000585E                 jno     loc_56F7
.text:0000000000005864                 mov     r8d, 1
.text:000000000000586A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000586E                 jmp     loc_56F7
.text:000000000000586E ; ---------------------------------------------------------------------------
.text:0000000000005873                 align 8
.text:0000000000005878
.text:0000000000005878 loc_5878:                               ; CODE XREF: xstrtoul+195↑j
.text:0000000000005878                 xor     edi, edi
.text:000000000000587A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000587E                 mov     esi, 400h
.text:0000000000005883                 setz    dil
.text:0000000000005887                 lea     edi, [rdi+rdi+1]
.text:000000000000588B                 jmp     loc_56CA
.text:0000000000005890 ; ---------------------------------------------------------------------------
.text:0000000000005890
.text:0000000000005890 loc_5890:                               ; CODE XREF: xstrtoul+ED↑j
.text:0000000000005890                 call    ___stack_chk_fail
.text:0000000000005895 ; ---------------------------------------------------------------------------
.text:0000000000005895
.text:0000000000005895 loc_5895:                               ; CODE XREF: xstrtoul+21↑j
.text:0000000000005895                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoul"
.text:000000000000589C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000058A3                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000058AA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000058AF                 call    ___assert_fail
.text:00000000000058B4 ; ---------------------------------------------------------------------------
.text:00000000000058B4
.text:00000000000058B4 loc_58B4:                               ; CODE XREF: xstrtoul+315↑j
.text:00000000000058B4                 mov     r9d, 1
.text:00000000000058BA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058BE                 jmp     loc_582B
.text:00000000000058C3 ; ---------------------------------------------------------------------------
.text:00000000000058C3
.text:00000000000058C3 loc_58C3:                               ; CODE XREF: xstrtoul+2B1↑j
.text:00000000000058C3                 mov     r9d, 1
.text:00000000000058C9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058CD                 jmp     loc_57C7
.text:00000000000058D2 ; ---------------------------------------------------------------------------
.text:00000000000058D2
.text:00000000000058D2 loc_58D2:                               ; CODE XREF: xstrtoul+1EA↑j
.text:00000000000058D2                 mov     r8d, 1
.text:00000000000058D8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058DC                 jmp     loc_5703
.text:00000000000058E1 ; ---------------------------------------------------------------------------
.text:00000000000058E1
.text:00000000000058E1 loc_58E1:                               ; CODE XREF: xstrtoul+1DE↑j
.text:00000000000058E1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000058E5                 mov     r8d, 1
.text:00000000000058EB                 jmp     loc_56F7
.text:00000000000058F0 ; ---------------------------------------------------------------------------
.text:00000000000058F0
.text:00000000000058F0 loc_58F0:                               ; CODE XREF: xstrtoul+291↑j
.text:00000000000058F0                 mov     r9d, 1
.text:00000000000058F6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058FA                 jmp     loc_57A7
.text:00000000000058FF ; ---------------------------------------------------------------------------
.text:00000000000058FF
.text:00000000000058FF loc_58FF:                               ; CODE XREF: xstrtoul+2F2↑j
.text:00000000000058FF                 mov     r9d, 1
.text:0000000000005905                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005909                 jmp     loc_5808
.text:000000000000590E ; ---------------------------------------------------------------------------
.text:000000000000590E
.text:000000000000590E loc_590E:                               ; CODE XREF: xstrtoul+269↑j
.text:000000000000590E                 mov     r9d, 1
.text:0000000000005914                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005918                 jmp     loc_577F
.text:000000000000591D ; ---------------------------------------------------------------------------
.text:000000000000591D
.text:000000000000591D loc_591D:                               ; CODE XREF: xstrtoul+342↑j
.text:000000000000591D                 mov     r8d, 1
.text:0000000000005923                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005927                 jmp     loc_585B
.text:0000000000005927 ; } // starts at 5510
.text:0000000000005927 xstrtoul        endp
.text:0000000000005927
.text:0000000000005927 ; ---------------------------------------------------------------------------
.text:000000000000592C                 align 10h
.text:0000000000005930
.text:0000000000005930 ; =============== S U B R O U T I N E =======================================
.text:0000000000005930
.text:0000000000005930 ; Attributes: info_from_lumina
.text:0000000000005930
.text:0000000000005930 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005930                 public rpl_mbrtowc
.text:0000000000005930 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005930
.text:0000000000005930 pwc             = dword ptr -34h
.text:0000000000005930 var_30          = qword ptr -30h
.text:0000000000005930
.text:0000000000005930 ; __unwind {
.text:0000000000005930                 push    r13
.text:0000000000005932                 push    r12
.text:0000000000005934                 mov     r13, rsi
.text:0000000000005937                 push    rbp
.text:0000000000005938                 push    rbx
.text:0000000000005939                 mov     rbx, rdi
.text:000000000000593C                 mov     r12, rdx
.text:000000000000593F                 sub     rsp, 18h
.text:0000000000005943                 mov     rax, fs:28h
.text:000000000000594C                 mov     [rsp+38h+var_30], rax
.text:0000000000005951                 xor     eax, eax
.text:0000000000005953                 lea     rax, [rsp+38h+pwc]
.text:0000000000005958                 test    rdi, rdi
.text:000000000000595B                 cmovz   rbx, rax
.text:000000000000595F                 mov     rdi, rbx        ; pwc
.text:0000000000005962                 call    _mbrtowc
.text:0000000000005967                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000596B                 mov     rbp, rax
.text:000000000000596E                 jbe     short loc_5990
.text:0000000000005970                 test    r12, r12
.text:0000000000005973                 jz      short loc_5990
.text:0000000000005975                 xor     edi, edi
.text:0000000000005977                 call    hard_locale
.text:000000000000597C                 test    al, al
.text:000000000000597E                 jnz     short loc_5990
.text:0000000000005980                 movzx   eax, byte ptr [r13+0]
.text:0000000000005985                 mov     ebp, 1
.text:000000000000598A                 mov     [rbx], eax
.text:000000000000598C                 nop     dword ptr [rax+00h]
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005990                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005990                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005995                 xor     rdx, fs:28h
.text:000000000000599E                 mov     rax, rbp
.text:00000000000059A1                 jnz     short loc_59AE
.text:00000000000059A3                 add     rsp, 18h
.text:00000000000059A7                 pop     rbx
.text:00000000000059A8                 pop     rbp
.text:00000000000059A9                 pop     r12
.text:00000000000059AB                 pop     r13
.text:00000000000059AD                 retn
.text:00000000000059AE ; ---------------------------------------------------------------------------
.text:00000000000059AE
.text:00000000000059AE loc_59AE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000059AE                 call    ___stack_chk_fail
.text:00000000000059AE ; } // starts at 5930
.text:00000000000059AE rpl_mbrtowc     endp
.text:00000000000059AE
.text:00000000000059AE ; ---------------------------------------------------------------------------
.text:00000000000059B3                 align 20h
.text:00000000000059C0
.text:00000000000059C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059C0
.text:00000000000059C0 ; Attributes: info_from_lumina
.text:00000000000059C0
.text:00000000000059C0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000059C0                 public close_stream
.text:00000000000059C0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000059C0                                         ; close_stdout+33↑p
.text:00000000000059C0 ; __unwind {
.text:00000000000059C0                 push    r12
.text:00000000000059C2                 push    rbp
.text:00000000000059C3                 mov     rbp, rdi
.text:00000000000059C6                 push    rbx
.text:00000000000059C7                 call    ___fpending
.text:00000000000059CC                 mov     ebx, [rbp+0]
.text:00000000000059CF                 mov     rdi, rbp        ; stream
.text:00000000000059D2                 mov     r12, rax
.text:00000000000059D5                 call    rpl_fclose
.text:00000000000059DA                 and     ebx, 20h
.text:00000000000059DD                 test    ebx, ebx
.text:00000000000059DF                 jnz     short loc_59F8
.text:00000000000059E1                 test    eax, eax
.text:00000000000059E3                 jz      short loc_59EF
.text:00000000000059E5                 test    r12, r12
.text:00000000000059E8                 mov     eax, 0FFFFFFFFh
.text:00000000000059ED                 jz      short loc_5A28
.text:00000000000059EF
.text:00000000000059EF loc_59EF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000059EF                 pop     rbx
.text:00000000000059F0                 pop     rbp
.text:00000000000059F1                 pop     r12
.text:00000000000059F3                 retn
.text:00000000000059F3 ; ---------------------------------------------------------------------------
.text:00000000000059F4                 align 8
.text:00000000000059F8
.text:00000000000059F8 loc_59F8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000059F8                 test    eax, eax
.text:00000000000059FA                 jnz     short loc_5A18
.text:00000000000059FC                 call    ___errno_location
.text:0000000000005A01                 mov     dword ptr [rax], 0
.text:0000000000005A07                 mov     eax, 0FFFFFFFFh
.text:0000000000005A0C                 pop     rbx
.text:0000000000005A0D                 pop     rbp
.text:0000000000005A0E                 pop     r12
.text:0000000000005A10                 retn
.text:0000000000005A10 ; ---------------------------------------------------------------------------
.text:0000000000005A11                 align 8
.text:0000000000005A18
.text:0000000000005A18 loc_5A18:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005A18                 pop     rbx
.text:0000000000005A19                 mov     eax, 0FFFFFFFFh
.text:0000000000005A1E                 pop     rbp
.text:0000000000005A1F                 pop     r12
.text:0000000000005A21                 retn
.text:0000000000005A21 ; ---------------------------------------------------------------------------
.text:0000000000005A22                 align 8
.text:0000000000005A28
.text:0000000000005A28 loc_5A28:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005A28                 call    ___errno_location
.text:0000000000005A2D                 cmp     dword ptr [rax], 9
.text:0000000000005A30                 pop     rbx
.text:0000000000005A31                 pop     rbp
.text:0000000000005A32                 pop     r12
.text:0000000000005A34                 setnz   al
.text:0000000000005A37                 movzx   eax, al
.text:0000000000005A3A                 neg     eax
.text:0000000000005A3C                 retn
.text:0000000000005A3C ; } // starts at 59C0
.text:0000000000005A3C close_stream    endp
.text:0000000000005A3C
.text:0000000000005A3C ; ---------------------------------------------------------------------------
.text:0000000000005A3D                 align 20h
.text:0000000000005A40
.text:0000000000005A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A40
.text:0000000000005A40
.text:0000000000005A40                 public hard_locale
.text:0000000000005A40 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005A40 ; __unwind {
.text:0000000000005A40                 sub     rsp, 8
.text:0000000000005A44                 xor     esi, esi        ; locale
.text:0000000000005A46                 call    _setlocale
.text:0000000000005A4B                 mov     rdx, rax
.text:0000000000005A4E                 mov     eax, 1
.text:0000000000005A53                 test    rdx, rdx
.text:0000000000005A56                 jz      short loc_5A75
.text:0000000000005A58                 lea     rdi, aC         ; "C"
.text:0000000000005A5F                 mov     ecx, 2
.text:0000000000005A64                 mov     rsi, rdx
.text:0000000000005A67                 repe cmpsb
.text:0000000000005A69                 setnbe  cl
.text:0000000000005A6C                 sbb     cl, 0
.text:0000000000005A6F                 xor     eax, eax
.text:0000000000005A71                 test    cl, cl
.text:0000000000005A73                 jnz     short loc_5A80
.text:0000000000005A75
.text:0000000000005A75 loc_5A75:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005A75                 add     rsp, 8
.text:0000000000005A79                 retn
.text:0000000000005A79 ; ---------------------------------------------------------------------------
.text:0000000000005A7A                 align 20h
.text:0000000000005A80
.text:0000000000005A80 loc_5A80:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005A80                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005A87                 mov     ecx, 6
.text:0000000000005A8C                 mov     rsi, rdx
.text:0000000000005A8F                 repe cmpsb
.text:0000000000005A91                 setnbe  al
.text:0000000000005A94                 sbb     al, 0
.text:0000000000005A96                 test    al, al
.text:0000000000005A98                 setnz   al
.text:0000000000005A9B                 add     rsp, 8
.text:0000000000005A9F                 retn
.text:0000000000005A9F ; } // starts at 5A40
.text:0000000000005A9F hard_locale     endp
.text:0000000000005A9F
.text:0000000000005AA0
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0
.text:0000000000005AA0 ; Attributes: info_from_lumina
.text:0000000000005AA0
.text:0000000000005AA0 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:0000000000005AA0                 public umaxtostr
.text:0000000000005AA0 umaxtostr       proc near               ; CODE XREF: parse_with_separator+3A8↑p
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 lea     rcx, [rsi+14h]
.text:0000000000005AA4                 mov     byte ptr [rsi+14h], 0
.text:0000000000005AA8                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000005AB2                 nop     word ptr [rax+rax+00h]
.text:0000000000005AB8
.text:0000000000005AB8 loc_5AB8:                               ; CODE XREF: umaxtostr+3C↓j
.text:0000000000005AB8                 mov     rax, rdi
.text:0000000000005ABB                 sub     rcx, 1
.text:0000000000005ABF                 mul     rsi
.text:0000000000005AC2                 shr     rdx, 3
.text:0000000000005AC6                 lea     rax, [rdx+rdx*4]
.text:0000000000005ACA                 add     rax, rax
.text:0000000000005ACD                 sub     rdi, rax
.text:0000000000005AD0                 add     edi, 30h ; '0'
.text:0000000000005AD3                 test    rdx, rdx
.text:0000000000005AD6                 mov     [rcx], dil
.text:0000000000005AD9                 mov     rdi, rdx
.text:0000000000005ADC                 jnz     short loc_5AB8
.text:0000000000005ADE                 mov     rax, rcx
.text:0000000000005AE1                 retn
.text:0000000000005AE1 ; } // starts at 5AA0
.text:0000000000005AE1 umaxtostr       endp
.text:0000000000005AE1
.text:0000000000005AE1 ; ---------------------------------------------------------------------------
.text:0000000000005AE2                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0
.text:0000000000005AF0
.text:0000000000005AF0                 public locale_charset
.text:0000000000005AF0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 sub     rsp, 8
.text:0000000000005AF4                 mov     edi, 0Eh        ; item
.text:0000000000005AF9                 call    _nl_langinfo
.text:0000000000005AFE                 test    rax, rax
.text:0000000000005B01                 jz      short loc_5B20
.text:0000000000005B03                 cmp     byte ptr [rax], 0
.text:0000000000005B06                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000005B0D                 cmovz   rax, rdx
.text:0000000000005B11                 add     rsp, 8
.text:0000000000005B15                 retn
.text:0000000000005B15 ; ---------------------------------------------------------------------------
.text:0000000000005B16                 align 20h
.text:0000000000005B20
.text:0000000000005B20 loc_5B20:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005B20                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005B27                 add     rsp, 8
.text:0000000000005B2B                 retn
.text:0000000000005B2B ; } // starts at 5AF0
.text:0000000000005B2B locale_charset  endp
.text:0000000000005B2B
.text:0000000000005B2B ; ---------------------------------------------------------------------------
.text:0000000000005B2C                 align 10h
.text:0000000000005B30
.text:0000000000005B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B30
.text:0000000000005B30
.text:0000000000005B30 realloc_groupbuf proc near              ; CODE XREF: mgetgroups+3F↓p
.text:0000000000005B30                                         ; mgetgroups+77↓p ...
.text:0000000000005B30 ; __unwind {
.text:0000000000005B30                 mov     edx, 4
.text:0000000000005B35                 mov     rax, rdx
.text:0000000000005B38                 mul     rsi
.text:0000000000005B3B                 jo      short loc_5B6E
.text:0000000000005B3D                 xor     ecx, ecx
.text:0000000000005B3F
.text:0000000000005B3F loc_5B3F:                               ; CODE XREF: realloc_groupbuf+43↓j
.text:0000000000005B3F                 test    rax, rax
.text:0000000000005B42                 js      short loc_5B58
.text:0000000000005B44                 test    rcx, rcx
.text:0000000000005B47                 jnz     short loc_5B58
.text:0000000000005B49                 shl     rsi, 2          ; size
.text:0000000000005B4D                 jmp     _realloc
.text:0000000000005B4D ; ---------------------------------------------------------------------------
.text:0000000000005B52                 align 8
.text:0000000000005B58
.text:0000000000005B58 loc_5B58:                               ; CODE XREF: realloc_groupbuf+12↑j
.text:0000000000005B58                                         ; realloc_groupbuf+17↑j
.text:0000000000005B58                 sub     rsp, 8
.text:0000000000005B5C                 call    ___errno_location
.text:0000000000005B61                 mov     dword ptr [rax], 0Ch
.text:0000000000005B67                 xor     eax, eax
.text:0000000000005B69                 add     rsp, 8
.text:0000000000005B6D                 retn
.text:0000000000005B6E ; ---------------------------------------------------------------------------
.text:0000000000005B6E
.text:0000000000005B6E loc_5B6E:                               ; CODE XREF: realloc_groupbuf+B↑j
.text:0000000000005B6E                 mov     ecx, 1
.text:0000000000005B73                 jmp     short loc_5B3F
.text:0000000000005B73 ; } // starts at 5B30
.text:0000000000005B73 realloc_groupbuf endp
.text:0000000000005B73
.text:0000000000005B73 ; ---------------------------------------------------------------------------
.text:0000000000005B75                 align 20h
.text:0000000000005B80
.text:0000000000005B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B80
.text:0000000000005B80 ; Attributes: info_from_lumina
.text:0000000000005B80
.text:0000000000005B80 ; __int64 __fastcall mgetgroups(char *user, __gid_t group)
.text:0000000000005B80                 public mgetgroups
.text:0000000000005B80 mgetgroups      proc near               ; CODE XREF: xgetgroups+1↑p
.text:0000000000005B80
.text:0000000000005B80 ngroups         = dword ptr -44h
.text:0000000000005B80 var_40          = qword ptr -40h
.text:0000000000005B80
.text:0000000000005B80 ; __unwind {
.text:0000000000005B80                 push    r15
.text:0000000000005B82                 push    r14
.text:0000000000005B84                 mov     r15, rdx
.text:0000000000005B87                 push    r13
.text:0000000000005B89                 push    r12
.text:0000000000005B8B                 mov     r13d, esi
.text:0000000000005B8E                 push    rbp
.text:0000000000005B8F                 push    rbx
.text:0000000000005B90                 sub     rsp, 18h
.text:0000000000005B94                 mov     rax, fs:28h
.text:0000000000005B9D                 mov     [rsp+48h+var_40], rax
.text:0000000000005BA2                 xor     eax, eax
.text:0000000000005BA4                 test    rdi, rdi
.text:0000000000005BA7                 jz      loc_5C78
.text:0000000000005BAD                 mov     rbp, rdi
.text:0000000000005BB0                 mov     esi, 0Ah
.text:0000000000005BB5                 xor     edi, edi
.text:0000000000005BB7                 mov     [rsp+48h+ngroups], 0Ah
.text:0000000000005BBF                 call    realloc_groupbuf
.text:0000000000005BC4                 test    rax, rax
.text:0000000000005BC7                 mov     rbx, rax
.text:0000000000005BCA                 jz      loc_5D98
.text:0000000000005BD0                 lea     r14, [rsp+48h+ngroups]
.text:0000000000005BD5
.text:0000000000005BD5 loc_5BD5:                               ; CODE XREF: mgetgroups+DE↓j
.text:0000000000005BD5                 mov     esi, r13d       ; group
.text:0000000000005BD8                 mov     rcx, r14        ; ngroups
.text:0000000000005BDB                 mov     rdx, rbx        ; groups
.text:0000000000005BDE                 mov     rdi, rbp        ; user
.text:0000000000005BE1                 mov     r12d, [rsp+48h+ngroups]
.text:0000000000005BE6                 call    _getgrouplist
.text:0000000000005BEB                 test    eax, eax
.text:0000000000005BED                 movsxd  rsi, [rsp+48h+ngroups]
.text:0000000000005BF2                 js      short loc_5C40
.text:0000000000005BF4                 mov     rdi, rbx
.text:0000000000005BF7                 call    realloc_groupbuf
.text:0000000000005BFC                 test    rax, rax
.text:0000000000005BFF                 jnz     short loc_5C68
.text:0000000000005C01
.text:0000000000005C01 loc_5C01:                               ; CODE XREF: mgetgroups+D9↓j
.text:0000000000005C01                                         ; mgetgroups+15E↓j ...
.text:0000000000005C01                 call    ___errno_location
.text:0000000000005C06                 mov     r12d, [rax]
.text:0000000000005C09                 mov     rbp, rax
.text:0000000000005C0C                 mov     rdi, rbx        ; ptr
.text:0000000000005C0F                 call    _free
.text:0000000000005C14                 mov     eax, 0FFFFFFFFh
.text:0000000000005C19                 mov     [rbp+0], r12d
.text:0000000000005C1D
.text:0000000000005C1D loc_5C1D:                               ; CODE XREF: mgetgroups+EF↓j
.text:0000000000005C1D                                         ; mgetgroups+170↓j ...
.text:0000000000005C1D                 mov     rcx, [rsp+48h+var_40]
.text:0000000000005C22                 xor     rcx, fs:28h
.text:0000000000005C2B                 jnz     loc_5DB7
.text:0000000000005C31                 add     rsp, 18h
.text:0000000000005C35                 pop     rbx
.text:0000000000005C36                 pop     rbp
.text:0000000000005C37                 pop     r12
.text:0000000000005C39                 pop     r13
.text:0000000000005C3B                 pop     r14
.text:0000000000005C3D                 pop     r15
.text:0000000000005C3F                 retn
.text:0000000000005C40 ; ---------------------------------------------------------------------------
.text:0000000000005C40
.text:0000000000005C40 loc_5C40:                               ; CODE XREF: mgetgroups+72↑j
.text:0000000000005C40                 cmp     esi, r12d
.text:0000000000005C43                 jnz     short loc_5C4E
.text:0000000000005C45                 add     esi, esi
.text:0000000000005C47                 mov     [rsp+48h+ngroups], esi
.text:0000000000005C4B                 movsxd  rsi, esi
.text:0000000000005C4E
.text:0000000000005C4E loc_5C4E:                               ; CODE XREF: mgetgroups+C3↑j
.text:0000000000005C4E                 mov     rdi, rbx
.text:0000000000005C51                 call    realloc_groupbuf
.text:0000000000005C56                 test    rax, rax
.text:0000000000005C59                 jz      short loc_5C01
.text:0000000000005C5B                 mov     rbx, rax
.text:0000000000005C5E                 jmp     loc_5BD5
.text:0000000000005C5E ; ---------------------------------------------------------------------------
.text:0000000000005C63                 align 8
.text:0000000000005C68
.text:0000000000005C68 loc_5C68:                               ; CODE XREF: mgetgroups+7F↑j
.text:0000000000005C68                 mov     [r15], rax
.text:0000000000005C6B                 mov     eax, [rsp+48h+ngroups]
.text:0000000000005C6F                 jmp     short loc_5C1D
.text:0000000000005C6F ; ---------------------------------------------------------------------------
.text:0000000000005C71                 align 8
.text:0000000000005C78
.text:0000000000005C78 loc_5C78:                               ; CODE XREF: mgetgroups+27↑j
.text:0000000000005C78                 xor     esi, esi        ; list
.text:0000000000005C7A                 xor     edi, edi        ; size
.text:0000000000005C7C                 call    _getgroups
.text:0000000000005C81                 test    eax, eax
.text:0000000000005C83                 mov     [rsp+48h+ngroups], eax
.text:0000000000005C87                 js      loc_5D38
.text:0000000000005C8D                 cmp     r13d, 0FFFFFFFFh
.text:0000000000005C91                 setnz   bpl
.text:0000000000005C95                 test    eax, eax
.text:0000000000005C97                 jz      short loc_5CA2
.text:0000000000005C99                 test    bpl, bpl
.text:0000000000005C9C                 jz      loc_5D67
.text:0000000000005CA2
.text:0000000000005CA2 loc_5CA2:                               ; CODE XREF: mgetgroups+117↑j
.text:0000000000005CA2                 add     eax, 1
.text:0000000000005CA5                 xor     edi, edi
.text:0000000000005CA7                 movsxd  rsi, eax
.text:0000000000005CAA                 mov     [rsp+48h+ngroups], eax
.text:0000000000005CAE                 call    realloc_groupbuf
.text:0000000000005CB3                 test    rax, rax
.text:0000000000005CB6                 mov     rbx, rax
.text:0000000000005CB9                 jz      loc_5D98
.text:0000000000005CBF                 mov     edi, [rsp+48h+ngroups]
.text:0000000000005CC3                 movzx   ebp, bpl
.text:0000000000005CC7                 sub     edi, ebp        ; size
.text:0000000000005CC9                 cmp     r13d, 0FFFFFFFFh
.text:0000000000005CCD                 jz      loc_5DA2
.text:0000000000005CD3                 lea     rsi, [rax+4]    ; list
.text:0000000000005CD7                 call    _getgroups
.text:0000000000005CDC                 test    eax, eax
.text:0000000000005CDE                 js      loc_5C01
.text:0000000000005CE4                 mov     [rbx], r13d
.text:0000000000005CE7                 add     eax, 1
.text:0000000000005CEA
.text:0000000000005CEA loc_5CEA:                               ; CODE XREF: mgetgroups+207↓j
.text:0000000000005CEA                                         ; mgetgroups+22C↓j
.text:0000000000005CEA                 cmp     eax, 1
.text:0000000000005CED                 mov     [r15], rbx
.text:0000000000005CF0                 jle     loc_5C1D
.text:0000000000005CF6                 movsxd  rdx, eax
.text:0000000000005CF9                 mov     edi, [rbx]
.text:0000000000005CFB                 lea     rsi, [rbx+rdx*4]
.text:0000000000005CFF                 lea     rdx, [rbx+4]
.text:0000000000005D03                 cmp     rsi, rdx
.text:0000000000005D06                 ja      short loc_5D28
.text:0000000000005D08                 jmp     loc_5C1D
.text:0000000000005D08 ; ---------------------------------------------------------------------------
.text:0000000000005D0D                 align 10h
.text:0000000000005D10
.text:0000000000005D10 loc_5D10:                               ; CODE XREF: mgetgroups+1AC↓j
.text:0000000000005D10                 cmp     ecx, [rbx]
.text:0000000000005D12                 jz      short loc_5D2E
.text:0000000000005D14                 mov     [rbx+4], ecx
.text:0000000000005D17                 add     rbx, 4
.text:0000000000005D1B
.text:0000000000005D1B loc_5D1B:                               ; CODE XREF: mgetgroups+1B1↓j
.text:0000000000005D1B                 add     rdx, 4
.text:0000000000005D1F                 cmp     rsi, rdx
.text:0000000000005D22                 jbe     loc_5C1D
.text:0000000000005D28
.text:0000000000005D28 loc_5D28:                               ; CODE XREF: mgetgroups+186↑j
.text:0000000000005D28                 mov     ecx, [rdx]
.text:0000000000005D2A                 cmp     ecx, edi
.text:0000000000005D2C                 jnz     short loc_5D10
.text:0000000000005D2E
.text:0000000000005D2E loc_5D2E:                               ; CODE XREF: mgetgroups+192↑j
.text:0000000000005D2E                 sub     eax, 1
.text:0000000000005D31                 jmp     short loc_5D1B
.text:0000000000005D31 ; ---------------------------------------------------------------------------
.text:0000000000005D33                 align 8
.text:0000000000005D38
.text:0000000000005D38 loc_5D38:                               ; CODE XREF: mgetgroups+107↑j
.text:0000000000005D38                 call    ___errno_location
.text:0000000000005D3D                 cmp     dword ptr [rax], 26h ; '&'
.text:0000000000005D40                 jnz     short loc_5D98
.text:0000000000005D42                 xor     edi, edi        ; ptr
.text:0000000000005D44                 mov     esi, 4          ; size
.text:0000000000005D49                 call    _realloc
.text:0000000000005D4E                 test    rax, rax
.text:0000000000005D51                 jz      short loc_5D98
.text:0000000000005D53                 mov     [r15], rax
.text:0000000000005D56                 mov     [rax], r13d
.text:0000000000005D59                 xor     eax, eax
.text:0000000000005D5B                 cmp     r13d, 0FFFFFFFFh
.text:0000000000005D5F                 setnz   al
.text:0000000000005D62                 jmp     loc_5C1D
.text:0000000000005D67 ; ---------------------------------------------------------------------------
.text:0000000000005D67
.text:0000000000005D67 loc_5D67:                               ; CODE XREF: mgetgroups+11C↑j
.text:0000000000005D67                 xor     edi, edi
.text:0000000000005D69                 movsxd  rsi, eax
.text:0000000000005D6C                 call    realloc_groupbuf
.text:0000000000005D71                 test    rax, rax
.text:0000000000005D74                 mov     rbx, rax
.text:0000000000005D77                 jz      short loc_5D98
.text:0000000000005D79                 mov     edi, [rsp+48h+ngroups] ; size
.text:0000000000005D7D                 mov     rsi, rbx        ; list
.text:0000000000005D80                 call    _getgroups
.text:0000000000005D85                 test    eax, eax
.text:0000000000005D87                 jns     loc_5CEA
.text:0000000000005D8D                 jmp     loc_5C01
.text:0000000000005D8D ; ---------------------------------------------------------------------------
.text:0000000000005D92                 align 8
.text:0000000000005D98
.text:0000000000005D98 loc_5D98:                               ; CODE XREF: mgetgroups+4A↑j
.text:0000000000005D98                                         ; mgetgroups+139↑j ...
.text:0000000000005D98                 mov     eax, 0FFFFFFFFh
.text:0000000000005D9D                 jmp     loc_5C1D
.text:0000000000005DA2 ; ---------------------------------------------------------------------------
.text:0000000000005DA2
.text:0000000000005DA2 loc_5DA2:                               ; CODE XREF: mgetgroups+14D↑j
.text:0000000000005DA2                 mov     rsi, rax        ; list
.text:0000000000005DA5                 call    _getgroups
.text:0000000000005DAA                 test    eax, eax
.text:0000000000005DAC                 jns     loc_5CEA
.text:0000000000005DB2                 jmp     loc_5C01
.text:0000000000005DB7 ; ---------------------------------------------------------------------------
.text:0000000000005DB7
.text:0000000000005DB7 loc_5DB7:                               ; CODE XREF: mgetgroups+AB↑j
.text:0000000000005DB7                 call    ___stack_chk_fail
.text:0000000000005DB7 ; } // starts at 5B80
.text:0000000000005DB7 mgetgroups      endp
.text:0000000000005DB7
.text:0000000000005DB7 ; ---------------------------------------------------------------------------
.text:0000000000005DBC                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DC0
.text:0000000000005DC0 ; Attributes: info_from_lumina
.text:0000000000005DC0
.text:0000000000005DC0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005DC0                 public rpl_fclose
.text:0000000000005DC0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000005DC0 ; __unwind {
.text:0000000000005DC0                 push    r12
.text:0000000000005DC2                 push    rbp
.text:0000000000005DC3                 push    rbx
.text:0000000000005DC4                 mov     rbx, rdi
.text:0000000000005DC7                 call    _fileno
.text:0000000000005DCC                 test    eax, eax
.text:0000000000005DCE                 mov     rdi, rbx        ; fp
.text:0000000000005DD1                 js      short loc_5E27
.text:0000000000005DD3                 call    ___freading
.text:0000000000005DD8                 test    eax, eax
.text:0000000000005DDA                 jnz     short loc_5E08
.text:0000000000005DDC
.text:0000000000005DDC loc_5DDC:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000005DDC                 mov     rdi, rbx        ; stream
.text:0000000000005DDF                 call    rpl_fflush
.text:0000000000005DE4                 test    eax, eax
.text:0000000000005DE6                 jz      short loc_5E24
.text:0000000000005DE8                 call    ___errno_location
.text:0000000000005DED                 mov     r12d, [rax]
.text:0000000000005DF0                 mov     rdi, rbx        ; stream
.text:0000000000005DF3                 mov     rbp, rax
.text:0000000000005DF6                 call    _fclose
.text:0000000000005DFB                 test    r12d, r12d
.text:0000000000005DFE                 jnz     short loc_5E30
.text:0000000000005E00
.text:0000000000005E00 loc_5E00:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005E00                 pop     rbx
.text:0000000000005E01                 pop     rbp
.text:0000000000005E02                 pop     r12
.text:0000000000005E04                 retn
.text:0000000000005E04 ; ---------------------------------------------------------------------------
.text:0000000000005E05                 align 8
.text:0000000000005E08
.text:0000000000005E08 loc_5E08:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005E08                 mov     rdi, rbx        ; stream
.text:0000000000005E0B                 call    _fileno
.text:0000000000005E10                 xor     esi, esi        ; offset
.text:0000000000005E12                 mov     edx, 1          ; whence
.text:0000000000005E17                 mov     edi, eax        ; fd
.text:0000000000005E19                 call    _lseek
.text:0000000000005E1E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E22                 jnz     short loc_5DDC
.text:0000000000005E24
.text:0000000000005E24 loc_5E24:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005E24                 mov     rdi, rbx        ; stream
.text:0000000000005E27
.text:0000000000005E27 loc_5E27:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005E27                 pop     rbx
.text:0000000000005E28                 pop     rbp
.text:0000000000005E29                 pop     r12
.text:0000000000005E2B                 jmp     _fclose
.text:0000000000005E30 ; ---------------------------------------------------------------------------
.text:0000000000005E30
.text:0000000000005E30 loc_5E30:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005E30                 mov     [rbp+0], r12d
.text:0000000000005E34                 mov     eax, 0FFFFFFFFh
.text:0000000000005E39                 jmp     short loc_5E00
.text:0000000000005E39 ; } // starts at 5DC0
.text:0000000000005E39 rpl_fclose      endp
.text:0000000000005E39
.text:0000000000005E39 ; ---------------------------------------------------------------------------
.text:0000000000005E3B                 align 20h
.text:0000000000005E40
.text:0000000000005E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E40
.text:0000000000005E40 ; Attributes: info_from_lumina
.text:0000000000005E40
.text:0000000000005E40 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005E40                 public rpl_fflush
.text:0000000000005E40 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005E40 ; __unwind {
.text:0000000000005E40                 test    rdi, rdi
.text:0000000000005E43                 push    rbx
.text:0000000000005E44                 mov     rbx, rdi
.text:0000000000005E47                 jz      short loc_5E5A
.text:0000000000005E49                 call    ___freading
.text:0000000000005E4E                 test    eax, eax
.text:0000000000005E50                 jz      short loc_5E5A
.text:0000000000005E52                 test    dword ptr [rbx], 100h
.text:0000000000005E58                 jnz     short loc_5E68
.text:0000000000005E5A
.text:0000000000005E5A loc_5E5A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000005E5A                                         ; rpl_fflush+10↑j
.text:0000000000005E5A                 mov     rdi, rbx        ; stream
.text:0000000000005E5D                 pop     rbx
.text:0000000000005E5E                 jmp     _fflush
.text:0000000000005E5E ; ---------------------------------------------------------------------------
.text:0000000000005E63                 align 8
.text:0000000000005E68
.text:0000000000005E68 loc_5E68:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005E68                 mov     rdi, rbx
.text:0000000000005E6B                 mov     edx, 1
.text:0000000000005E70                 xor     esi, esi
.text:0000000000005E72                 call    rpl_fseeko
.text:0000000000005E77                 mov     rdi, rbx        ; stream
.text:0000000000005E7A                 pop     rbx
.text:0000000000005E7B                 jmp     _fflush
.text:0000000000005E7B ; } // starts at 5E40
.text:0000000000005E7B rpl_fflush      endp
.text:0000000000005E7B
.text:0000000000005E80
.text:0000000000005E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E80
.text:0000000000005E80 ; Attributes: info_from_lumina
.text:0000000000005E80
.text:0000000000005E80 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005E80                 public rpl_fseeko
.text:0000000000005E80 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005E80 ; __unwind {
.text:0000000000005E80                 mov     rax, [rdi+8]
.text:0000000000005E84                 cmp     [rdi+10h], rax
.text:0000000000005E88                 jz      short loc_5E90
.text:0000000000005E8A
.text:0000000000005E8A loc_5E8A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000005E8A                                         ; rpl_fseeko+1F↓j
.text:0000000000005E8A                 jmp     _fseeko
.text:0000000000005E8A ; ---------------------------------------------------------------------------
.text:0000000000005E8F                 align 10h
.text:0000000000005E90
.text:0000000000005E90 loc_5E90:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005E90                 mov     rax, [rdi+20h]
.text:0000000000005E94                 cmp     [rdi+28h], rax
.text:0000000000005E98                 jnz     short loc_5E8A
.text:0000000000005E9A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000005E9F                 jnz     short loc_5E8A
.text:0000000000005EA1                 push    r12
.text:0000000000005EA3                 push    rbp
.text:0000000000005EA4                 mov     r12d, edx
.text:0000000000005EA7                 push    rbx
.text:0000000000005EA8                 mov     rbp, rsi
.text:0000000000005EAB                 mov     rbx, rdi
.text:0000000000005EAE                 call    _fileno
.text:0000000000005EB3                 mov     edx, r12d       ; whence
.text:0000000000005EB6                 mov     rsi, rbp        ; offset
.text:0000000000005EB9                 mov     edi, eax        ; fd
.text:0000000000005EBB                 call    _lseek
.text:0000000000005EC0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005EC4                 jz      short loc_5ED2
.text:0000000000005EC6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005EC9                 mov     [rbx+90h], rax
.text:0000000000005ED0                 xor     eax, eax
.text:0000000000005ED2
.text:0000000000005ED2 loc_5ED2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005ED2                 pop     rbx
.text:0000000000005ED3                 pop     rbp
.text:0000000000005ED4                 pop     r12
.text:0000000000005ED6                 retn
.text:0000000000005ED6 ; } // starts at 5E80
.text:0000000000005ED6 rpl_fseeko      endp
.text:0000000000005ED6
.text:0000000000005ED6 ; ---------------------------------------------------------------------------
.text:0000000000005ED7                 align 20h
.text:0000000000005EE0
.text:0000000000005EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EE0
.text:0000000000005EE0 ; Attributes: info_from_lumina
.text:0000000000005EE0
.text:0000000000005EE0 ; void _libc_csu_init(void)
.text:0000000000005EE0                 public __libc_csu_init
.text:0000000000005EE0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005EE0 ; __unwind {
.text:0000000000005EE0                 push    r15
.text:0000000000005EE2                 push    r14
.text:0000000000005EE4                 mov     r15, rdx
.text:0000000000005EE7                 push    r13
.text:0000000000005EE9                 push    r12
.text:0000000000005EEB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005EF2                 push    rbp
.text:0000000000005EF3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000005EFA                 push    rbx
.text:0000000000005EFB                 mov     r13d, edi
.text:0000000000005EFE                 mov     r14, rsi
.text:0000000000005F01                 sub     rbp, r12
.text:0000000000005F04                 sub     rsp, 8
.text:0000000000005F08                 sar     rbp, 3
.text:0000000000005F0C                 call    _init_proc
.text:0000000000005F11                 test    rbp, rbp
.text:0000000000005F14                 jz      short loc_5F36
.text:0000000000005F16                 xor     ebx, ebx
.text:0000000000005F18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005F20
.text:0000000000005F20 loc_5F20:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005F20                 mov     rdx, r15
.text:0000000000005F23                 mov     rsi, r14
.text:0000000000005F26                 mov     edi, r13d
.text:0000000000005F29                 call    ds:(__frame_dummy_init_array_entry - 208AB0h)[r12+rbx*8]
.text:0000000000005F2D                 add     rbx, 1
.text:0000000000005F31                 cmp     rbp, rbx
.text:0000000000005F34                 jnz     short loc_5F20
.text:0000000000005F36
.text:0000000000005F36 loc_5F36:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005F36                 add     rsp, 8
.text:0000000000005F3A                 pop     rbx
.text:0000000000005F3B                 pop     rbp
.text:0000000000005F3C                 pop     r12
.text:0000000000005F3E                 pop     r13
.text:0000000000005F40                 pop     r14
.text:0000000000005F42                 pop     r15
.text:0000000000005F44                 retn
.text:0000000000005F44 ; } // starts at 5EE0
.text:0000000000005F44 __libc_csu_init endp
.text:0000000000005F44
.text:0000000000005F44 ; ---------------------------------------------------------------------------
.text:0000000000005F45                 align 10h
.text:0000000000005F50
.text:0000000000005F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F50
.text:0000000000005F50
.text:0000000000005F50 ; void _libc_csu_fini(void)
.text:0000000000005F50                 public __libc_csu_fini
.text:0000000000005F50 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005F50 ; __unwind {
.text:0000000000005F50                 rep retn
.text:0000000000005F50 ; } // starts at 5F50
.text:0000000000005F50 __libc_csu_fini endp
.text:0000000000005F50
.text:0000000000005F50 ; ---------------------------------------------------------------------------
.text:0000000000005F52                 align 20h
.text:0000000000005F60
.text:0000000000005F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F60
.text:0000000000005F60
.text:0000000000005F60 atexit          proc near               ; CODE XREF: main+97↑p
.text:0000000000005F60 ; __unwind {
.text:0000000000005F60                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005F67                 xor     esi, esi        ; obj
.text:0000000000005F69                 jmp     ___cxa_atexit
.text:0000000000005F69 ; } // starts at 5F60
.text:0000000000005F69 atexit          endp
.text:0000000000005F69
.text:0000000000005F69 _text           ends
.text:0000000000005F69
LOAD:0000000000005F6E ; ===========================================================================
LOAD:0000000000005F6E
LOAD:0000000000005F6E ; Segment type: Pure code
LOAD:0000000000005F6E ; Segment permissions: Read/Execute
LOAD:0000000000005F6E LOAD            segment byte public 'CODE' use64
LOAD:0000000000005F6E                 assume cs:LOAD
LOAD:0000000000005F6E                 ;org 5F6Eh
LOAD:0000000000005F6E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005F6E                 align 10h
LOAD:0000000000005F6E LOAD            ends
LOAD:0000000000005F6E
.fini:0000000000005F70 ; ===========================================================================
.fini:0000000000005F70
.fini:0000000000005F70 ; Segment type: Pure code
.fini:0000000000005F70 ; Segment permissions: Read/Execute
.fini:0000000000005F70 _fini           segment dword public 'CODE' use64
.fini:0000000000005F70                 assume cs:_fini
.fini:0000000000005F70                 ;org 5F70h
.fini:0000000000005F70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005F70
.fini:0000000000005F70 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005F70
.fini:0000000000005F70
.fini:0000000000005F70                 public _term_proc
.fini:0000000000005F70 _term_proc      proc near
.fini:0000000000005F70                 sub     rsp, 8          ; _fini
.fini:0000000000005F74                 add     rsp, 8
.fini:0000000000005F78                 retn
.fini:0000000000005F78 _term_proc      endp
.fini:0000000000005F78
.fini:0000000000005F78 _fini           ends
.fini:0000000000005F78
LOAD:0000000000005F79 ; ===========================================================================
LOAD:0000000000005F79
LOAD:0000000000005F79 ; Segment type: Pure code
LOAD:0000000000005F79 ; Segment permissions: Read/Execute
LOAD:0000000000005F79 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005F79                 assume cs:LOAD
LOAD:0000000000005F79                 ;org 5F79h
LOAD:0000000000005F79                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005F79                 align 20h
LOAD:0000000000005F79 LOAD            ends
LOAD:0000000000005F79
.rodata:0000000000005F80 ; ===========================================================================
.rodata:0000000000005F80
.rodata:0000000000005F80 ; Segment type: Pure data
.rodata:0000000000005F80 ; Segment permissions: Read
.rodata:0000000000005F80 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005F80                 assume cs:_rodata
.rodata:0000000000005F80                 ;org 5F80h
.rodata:0000000000005F80                 public _IO_stdin_used
.rodata:0000000000005F80 _IO_stdin_used  db    1
.rodata:0000000000005F81                 db    0
.rodata:0000000000005F82                 db    2
.rodata:0000000000005F83                 db    0
.rodata:0000000000005F84 ; const char delim[2]
.rodata:0000000000005F84 delim           db ',',0                ; DATA XREF: parse_additional_groups+43↑o
.rodata:0000000000005F84                                         ; parse_additional_groups:loc_240C↑o
.rodata:0000000000005F86 ; const char aInvalidGroupS[]
.rodata:0000000000005F86 aInvalidGroupS  db 'invalid group %s',0 ; DATA XREF: parse_additional_groups+1DB↑o
.rodata:0000000000005F97 ; const char aInvalidGroupLi[]
.rodata:0000000000005F97 aInvalidGroupLi db 'invalid group list %s',0
.rodata:0000000000005F97                                         ; DATA XREF: parse_additional_groups+232↑o
.rodata:0000000000005FAD aChroot_0       db 'chroot',0           ; DATA XREF: main+10F↑o
.rodata:0000000000005FAD                                         ; usage+192↑o ...
.rodata:0000000000005FB4 asc_5FB4        db '[',0                ; DATA XREF: usage+19E↑o
.rodata:0000000000005FB6 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1C5↑o
.rodata:0000000000005FC6 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000005FC6                                         ; DATA XREF: usage+1F5↑o
.rodata:0000000000005FC6                                         ; usage+2EC↑o ...
.rodata:0000000000005FDC aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+206↑o
.rodata:0000000000005FE6 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+212↑o
.rodata:0000000000005FF5 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1A5↑o
.rodata:0000000000005FFF aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1D1↑o
.rodata:0000000000006009 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1E9↑o
.rodata:0000000000006013 ; const char aSOnlineHelpS[]
.rodata:0000000000006013 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+25A↑o
.rodata:0000000000006013                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000602A unk_602A        db  47h ; G             ; DATA XREF: main+108↑o
.rodata:000000000000602A                                         ; usage+276↑o ...
.rodata:000000000000602B                 db  4Eh ; N
.rodata:000000000000602C                 db  55h ; U
.rodata:000000000000602D                 db  20h
.rodata:000000000000602E ; const char domainname[]
.rodata:000000000000602E domainname      db 'coreutils',0        ; DATA XREF: main+6E↑o
.rodata:000000000000602E                                         ; main+7A↑o ...
.rodata:0000000000006038 ; const char s2[]
.rodata:0000000000006038 s2              db 'en_',0              ; DATA XREF: usage+29D↑o
.rodata:0000000000006038                                         ; usage+35E↑o
.rodata:000000000000603C ; const char aFullDocumentat[]
.rodata:000000000000603C aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000603C                                         ; DATA XREF: usage:loc_2859↑o
.rodata:000000000000603C                                         ; usage:loc_2916↑o
.rodata:0000000000006057 aBinSh          db '/bin/sh',0          ; DATA XREF: main:loc_20CD↑o
.rodata:000000000000605F ; const char dirname[]
.rodata:000000000000605F dirname         db '/usr/local/share/locale',0
.rodata:000000000000605F                                         ; DATA XREF: main+67↑o
.rodata:0000000000006077 aRolandMcgrath  db 'Roland McGrath',0   ; DATA XREF: main+101↑o
.rodata:0000000000006086 ; const char shortopts[]
.rodata:0000000000006086 shortopts       db '+',0                ; DATA XREF: main+A3↑o
.rodata:0000000000006088 ; const char aMissingOperand[]
.rodata:0000000000006088 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_2130↑o
.rodata:0000000000006098 ; const char name[]
.rodata:0000000000006098 name            db 'SHELL',0            ; DATA XREF: main:loc_1FA9↑o
.rodata:000000000000609E aI              db '-i',0               ; DATA XREF: main+521↑o
.rodata:00000000000060A1 ; const char aFailedToSetGro[]
.rodata:00000000000060A1 aFailedToSetGro db 'failed to set group-ID',0
.rodata:00000000000060A1                                         ; DATA XREF: main:loc_2186↑o
.rodata:00000000000060B8 ; const char aFailedToSetUse[]
.rodata:00000000000060B8 aFailedToSetUse db 'failed to set user-ID',0
.rodata:00000000000060B8                                         ; DATA XREF: main:loc_2160↑o
.rodata:00000000000060CE ; const char aFailedToRunCom[]
.rodata:00000000000060CE aFailedToRunCom db 'failed to run command %s',0
.rodata:00000000000060CE                                         ; DATA XREF: main+38A↑o
.rodata:00000000000060E7 aGroups         db 'groups',0           ; DATA XREF: .data.rel.ro:long_opts↓o
.rodata:00000000000060EE aUserspec       db 'userspec',0         ; DATA XREF: .data.rel.ro:0000000000208AE0↓o
.rodata:00000000000060F7 aSkipChdir      db 'skip-chdir',0       ; DATA XREF: .data.rel.ro:0000000000208B00↓o
.rodata:0000000000006102 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000208B20↓o
.rodata:0000000000006107 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000208B40↓o
.rodata:000000000000610F                 align 10h
.rodata:0000000000006110 ; const char aTrySHelpForMor[]
.rodata:0000000000006110 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006110                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000006137                 align 8
.rodata:0000000000006138 ; const char aUsageSOptionNe[]
.rodata:0000000000006138 aUsageSOptionNe db 'Usage: %s [OPTION] NEWROOT [COMMAND [ARG]...]',0Ah
.rodata:0000000000006138                                         ; DATA XREF: usage:loc_25FD↑o
.rodata:0000000000006138                 db '  or:  %s OPTION',0Ah,0
.rodata:0000000000006178 ; const char aRunCommandWith[]
.rodata:0000000000006178 aRunCommandWith db 'Run COMMAND with root directory set to NEWROOT.',0Ah
.rodata:0000000000006178                                         ; DATA XREF: usage+87↑o
.rodata:0000000000006178                 db 0Ah,0
.rodata:00000000000061AA                 align 10h
.rodata:00000000000061B0 ; const char aGroupsGListSpe[]
.rodata:00000000000061B0 aGroupsGListSpe db '  --groups=G_LIST        specify supplementary groups as g1,g2,..'
.rodata:00000000000061B0                                         ; DATA XREF: usage+AC↑o
.rodata:00000000000061B0                 db ',gN',0Ah,0
.rodata:00000000000061F6                 align 8
.rodata:00000000000061F8 ; const char aUserspecUserGr[]
.rodata:00000000000061F8 aUserspecUserGr db '  --userspec=USER:GROUP  specify user and group (ID or name) to u'
.rodata:00000000000061F8                                         ; DATA XREF: usage+D1↑o
.rodata:00000000000061F8                 db 'se',0Ah,0
.rodata:000000000000623D                 align 20h
.rodata:0000000000006240 ; const char aSkipChdirDoNot[]
.rodata:0000000000006240 aSkipChdirDoNot db '  --skip-chdir           do not change working directory to %s',0Ah
.rodata:0000000000006240                                         ; DATA XREF: usage+100↑o
.rodata:0000000000006240                 db 0
.rodata:0000000000006280 ; const char aHelpDisplayThi[]
.rodata:0000000000006280 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006280                                         ; DATA XREF: usage+12F↑o
.rodata:00000000000062AD                 align 10h
.rodata:00000000000062B0 ; const char aVersionOutputV[]
.rodata:00000000000062B0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000062B0                                         ; DATA XREF: usage+154↑o
.rodata:00000000000062E6                 align 8
.rodata:00000000000062E8 ; const char aIfNoCommandIsG[]
.rodata:00000000000062E8 aIfNoCommandIsG db 0Ah                  ; DATA XREF: usage+179↑o
.rodata:00000000000062E8                 db 'If no command is given, run ',27h,'"$SHELL" -i',27h,' (default: ',27h
.rodata:00000000000062E8                 db '/bin/sh -i',27h,').',0Ah,0
.rodata:000000000000632D                 align 10h
.rodata:0000000000006330 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006330                                         ; DATA XREF: usage+26F↑o
.rodata:0000000000006330                                         ; usage+2D3↑o ...
.rodata:0000000000006358 ; const char aReportAnyTrans[]
.rodata:0000000000006358 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006358                                         ; DATA XREF: usage+3C7↑o
.rodata:0000000000006358                 db 'am/>',0Ah,0
.rodata:000000000000639F                 align 20h
.rodata:00000000000063A0 ; const char aOrAvailableLoc[]
.rodata:00000000000063A0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000063A0                                         ; DATA XREF: usage:loc_289E↑o
.rodata:00000000000063D3                 align 8
.rodata:00000000000063D8 ; const char aOptionSkipChdi[]
.rodata:00000000000063D8 aOptionSkipChdi db 'option --skip-chdir only permitted if NEWROOT is old %s',0
.rodata:00000000000063D8                                         ; DATA XREF: main+743↑o
.rodata:0000000000006410 ; const char aCannotChangeRo[]
.rodata:0000000000006410 aCannotChangeRo db 'cannot change root directory to %s',0
.rodata:0000000000006410                                         ; DATA XREF: main+57C↑o
.rodata:0000000000006433                 align 8
.rodata:0000000000006438 ; const char msgid[]
.rodata:0000000000006438 msgid           db 'cannot chdir to root directory',0
.rodata:0000000000006438                                         ; DATA XREF: main+234↑o
.rodata:0000000000006457                 align 8
.rodata:0000000000006458 ; const char aNoGroupSpecifi[]
.rodata:0000000000006458 aNoGroupSpecifi db 'no group specified for unknown uid: %d',0
.rodata:0000000000006458                                         ; DATA XREF: main+5FB↑o
.rodata:000000000000647F                 align 20h
.rodata:0000000000006480 ; const char aFailedToGetSup[]
.rodata:0000000000006480 aFailedToGetSup db 'failed to get supplemental groups',0
.rodata:0000000000006480                                         ; DATA XREF: main+65D↑o
.rodata:00000000000064A2                 align 8
.rodata:00000000000064A8 ; const char aFailedToSetSup[]
.rodata:00000000000064A8 aFailedToSetSup db 'failed to set supplemental groups',0
.rodata:00000000000064A8                                         ; DATA XREF: main:loc_21AC↑o
.rodata:00000000000064CA a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000064CF ; const char aWriteError[]
.rodata:00000000000064CF aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_29F3↑o
.rodata:00000000000064DB ; const char aS[4]
.rodata:00000000000064DB aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000064DF ; const char format[]
.rodata:00000000000064DF format          dd offset unk_7325      ; DATA XREF: main+4BC↑o
.rodata:00000000000064DF                                         ; close_stdout+8F↑o ...
.rodata:00000000000064E3                 align 8
.rodata:00000000000064E8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000064E8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000006520 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000006520                                         ; main+191↑o ...
.rodata:0000000000006528 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000652C unk_652C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000652D                 db  80h
.rodata:000000000000652E                 db  98h
.rodata:000000000000652F                 db    0
.rodata:0000000000006530 unk_6530        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000006531                 db  80h
.rodata:0000000000006532                 db  99h
.rodata:0000000000006533                 db    0
.rodata:0000000000006534 unk_6534        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000006535                 db    7
.rodata:0000000000006536                 db  65h ; e
.rodata:0000000000006537                 db    0
.rodata:0000000000006538 unk_6538        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000006539                 db 0AFh
.rodata:000000000000653A                 db    0
.rodata:000000000000653B unk_653B        db  22h ; "             ; DATA XREF: gettext_quote:loc_2B20↑o
.rodata:000000000000653B                                         ; quotearg_buffer_restyled:loc_38DB↑o ...
.rodata:000000000000653C                 db    0
.rodata:000000000000653D ; const char asc_653D[2]
.rodata:000000000000653D asc_653D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000653D                                         ; quotearg_buffer_restyled:loc_2CA3↑o ...
.rodata:000000000000653F ; const char asc_653F[2]
.rodata:000000000000653F asc_653F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000653F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000006541 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000006549 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000208B88↓o
.rodata:000000000000654F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000208B90↓o
.rodata:000000000000655C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000208B98↓o
.rodata:000000000000655C                                         ; .data.rel.ro:0000000000208BB8↓o
.rodata:0000000000006569 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000006569                                         ; DATA XREF: .data.rel.ro:0000000000208BA0↓o
.rodata:000000000000657D aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000208BB0↓o
.rodata:0000000000006585 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000208BC8↓o
.rodata:000000000000658D                 align 20h
.rodata:00000000000065A0 jpt_2C81        dd offset loc_3A2A - 65A0h
.rodata:00000000000065A0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000065A0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000065A0                 dd offset loc_2C83 - 65A0h ; jump table for switch statement
.rodata:00000000000065A0                 dd offset loc_3C58 - 65A0h
.rodata:00000000000065A0                 dd offset loc_3A64 - 65A0h
.rodata:00000000000065A0                 dd offset loc_3854 - 65A0h
.rodata:00000000000065A0                 dd offset loc_38B0 - 65A0h
.rodata:00000000000065A0                 dd offset loc_3905 - 65A0h
.rodata:00000000000065A0                 dd offset loc_394A - 65A0h
.rodata:00000000000065A0                 dd offset loc_3984 - 65A0h
.rodata:00000000000065A0                 dd offset loc_3984 - 65A0h
.rodata:00000000000065A0                 dd offset loc_3984 - 65A0h
.rodata:00000000000065CC jpt_2DDE        dd offset loc_3000 - 65CCh, offset def_2DDE - 65CCh, offset def_2DDE - 65CCh
.rodata:00000000000065CC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000065CC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000065CC                 dd offset def_2DDE - 65CCh, offset def_2DDE - 65CCh, offset def_2DDE - 65CCh ; jump table for switch statement
.rodata:00000000000065CC                 dd offset def_2DDE - 65CCh, offset loc_3040 - 65CCh, offset loc_2F48 - 65CCh
.rodata:00000000000065CC                 dd offset loc_2F08 - 65CCh, offset loc_30D0 - 65CCh, offset loc_30C0 - 65CCh
.rodata:00000000000065CC                 dd offset loc_30B0 - 65CCh, offset loc_30A0 - 65CCh, offset def_2DDE - 65CCh
.rodata:00000000000065CC                 dd offset def_2DDE - 65CCh, offset def_2DDE - 65CCh, offset def_2DDE - 65CCh
.rodata:00000000000065CC                 dd offset def_2DDE - 65CCh, offset def_2DDE - 65CCh, offset def_2DDE - 65CCh
.rodata:00000000000065CC                 dd offset def_2DDE - 65CCh, offset def_2DDE - 65CCh, offset def_2DDE - 65CCh
.rodata:00000000000065CC                 dd offset def_2DDE - 65CCh, offset def_2DDE - 65CCh, offset def_2DDE - 65CCh
.rodata:00000000000065CC                 dd offset def_2DDE - 65CCh, offset def_2DDE - 65CCh, offset def_2DDE - 65CCh
.rodata:00000000000065CC                 dd offset def_2DDE - 65CCh, offset def_2DDE - 65CCh, offset loc_3090 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3080 - 65CCh, offset loc_3080 - 65CCh, offset loc_3050 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3080 - 65CCh, offset loc_3028 - 65CCh, offset loc_3080 - 65CCh
.rodata:00000000000065CC                 dd offset loc_2EE3 - 65CCh, offset loc_3080 - 65CCh, offset loc_3080 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3080 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3080 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3080 - 65CCh, offset loc_3080 - 65CCh, offset loc_3080 - 65CCh
.rodata:00000000000065CC                 dd offset loc_2EB3 - 65CCh, offset def_2DDE - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3080 - 65CCh, offset loc_2F58 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3080 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3080 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3028 - 65CCh, offset loc_3028 - 65CCh, offset loc_3028 - 65CCh
.rodata:00000000000065CC                 dd offset loc_2DE3 - 65CCh, offset loc_3080 - 65CCh, offset loc_2DE3 - 65CCh
.rodata:00000000000065CC                 dd offset loc_3050 - 65CCh
.rodata:00000000000067C8 jpt_316A        dd offset loc_31D0 - 67C8h, offset def_316A - 67C8h, offset def_316A - 67C8h
.rodata:00000000000067C8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000067C8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000067C8                 dd offset def_316A - 67C8h, offset def_316A - 67C8h, offset def_316A - 67C8h ; jump table for switch statement
.rodata:00000000000067C8                 dd offset def_316A - 67C8h, offset loc_31C0 - 67C8h, offset loc_3310 - 67C8h
.rodata:00000000000067C8                 dd offset loc_32F8 - 67C8h, offset loc_31A8 - 67C8h, offset loc_32E8 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3190 - 67C8h, offset loc_32D0 - 67C8h, offset def_316A - 67C8h
.rodata:00000000000067C8                 dd offset def_316A - 67C8h, offset def_316A - 67C8h, offset def_316A - 67C8h
.rodata:00000000000067C8                 dd offset def_316A - 67C8h, offset def_316A - 67C8h, offset def_316A - 67C8h
.rodata:00000000000067C8                 dd offset def_316A - 67C8h, offset def_316A - 67C8h, offset def_316A - 67C8h
.rodata:00000000000067C8                 dd offset def_316A - 67C8h, offset def_316A - 67C8h, offset def_316A - 67C8h
.rodata:00000000000067C8                 dd offset def_316A - 67C8h, offset def_316A - 67C8h, offset def_316A - 67C8h
.rodata:00000000000067C8                 dd offset def_316A - 67C8h, offset def_316A - 67C8h, offset loc_32B8 - 67C8h
.rodata:00000000000067C8                 dd offset loc_32A0 - 67C8h, offset loc_32A0 - 67C8h, offset loc_3288 - 67C8h
.rodata:00000000000067C8                 dd offset loc_32A0 - 67C8h, offset loc_3270 - 67C8h, offset loc_32A0 - 67C8h
.rodata:00000000000067C8                 dd offset loc_2EE0 - 67C8h, offset loc_32A0 - 67C8h, offset loc_32A0 - 67C8h
.rodata:00000000000067C8                 dd offset loc_32A0 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_32A0 - 67C8h
.rodata:00000000000067C8                 dd offset loc_32A0 - 67C8h, offset loc_32A0 - 67C8h, offset loc_32A0 - 67C8h
.rodata:00000000000067C8                 dd offset loc_2EB0 - 67C8h, offset def_316A - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_32A0 - 67C8h, offset loc_3170 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_32A0 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_32A0 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3270 - 67C8h, offset loc_3270 - 67C8h, offset loc_3270 - 67C8h
.rodata:00000000000067C8                 dd offset loc_2DE0 - 67C8h, offset loc_32A0 - 67C8h, offset loc_2DE0 - 67C8h
.rodata:00000000000067C8                 dd offset loc_3288 - 67C8h
.rodata:00000000000069C4                 align 20h
.rodata:00000000000069E0                 public quoting_style_vals
.rodata:00000000000069E0 quoting_style_vals db    0
.rodata:00000000000069E1                 db    0
.rodata:00000000000069E2                 db    0
.rodata:00000000000069E3                 db    0
.rodata:00000000000069E4                 db    1
.rodata:00000000000069E5                 db    0
.rodata:00000000000069E6                 db    0
.rodata:00000000000069E7                 db    0
.rodata:00000000000069E8                 db    2
.rodata:00000000000069E9                 db    0
.rodata:00000000000069EA                 db    0
.rodata:00000000000069EB                 db    0
.rodata:00000000000069EC                 db    3
.rodata:00000000000069ED                 db    0
.rodata:00000000000069EE                 db    0
.rodata:00000000000069EF                 db    0
.rodata:00000000000069F0                 db    4
.rodata:00000000000069F1                 db    0
.rodata:00000000000069F2                 db    0
.rodata:00000000000069F3                 db    0
.rodata:00000000000069F4                 db    5
.rodata:00000000000069F5                 db    0
.rodata:00000000000069F6                 db    0
.rodata:00000000000069F7                 db    0
.rodata:00000000000069F8                 db    6
.rodata:00000000000069F9                 db    0
.rodata:00000000000069FA                 db    0
.rodata:00000000000069FB                 db    0
.rodata:00000000000069FC                 db    7
.rodata:00000000000069FD                 db    0
.rodata:00000000000069FE                 db    0
.rodata:00000000000069FF                 db    0
.rodata:0000000000006A00                 db    8
.rodata:0000000000006A01                 db    0
.rodata:0000000000006A02                 db    0
.rodata:0000000000006A03                 db    0
.rodata:0000000000006A04                 db    9
.rodata:0000000000006A05                 db    0
.rodata:0000000000006A06                 db    0
.rodata:0000000000006A07                 db    0
.rodata:0000000000006A08 aInvalidUser    db 'invalid user',0     ; DATA XREF: parse_with_separator+330↑o
.rodata:0000000000006A15 aInvalidSpec    db 'invalid spec',0     ; DATA XREF: parse_with_separator+1D9↑o
.rodata:0000000000006A15                                         ; .data.rel.ro:0000000000208BA8↓o
.rodata:0000000000006A22 aInvalidGroup   db 'invalid group',0    ; DATA XREF: parse_with_separator+253↑o
.rodata:0000000000006A30 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006A3C aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000006A43 ; const char aC_0[]
.rodata:0000000000006A43 aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4C6C↑o
.rodata:0000000000006A47 ; const char aWrittenByS[]
.rodata:0000000000006A47 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000006A47                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000006A57 ; const char aWrittenBySAndS[]
.rodata:0000000000006A57 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000006A57                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006A6E ; const char aWrittenBySSAnd[]
.rodata:0000000000006A6E aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006A6E                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006A8A ; const char aReportBugsToS[]
.rodata:0000000000006A8A aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006A8A                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006A9F aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006A9F                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000006AB5 ; const char aSHomePageS[]
.rodata:0000000000006AB5 aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000006AB5                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006AC9                 align 10h
.rodata:0000000000006AD0 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006AD0 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006AD0                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006AD0                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006AD0                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006AD0                 db '.',0Ah
.rodata:0000000000006AD0                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006AD0                 db 0Ah,0
.rodata:0000000000006B9C                 align 20h
.rodata:0000000000006BA0 ; const char aWrittenBySSSAn[]
.rodata:0000000000006BA0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006BA0                                         ; DATA XREF: version_etc_arn:loc_4EC0↑o
.rodata:0000000000006BA0                 db 'and %s.',0Ah,0
.rodata:0000000000006BC0 ; const char aWrittenBySSSSA[]
.rodata:0000000000006BC0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006BC0                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000006BC0                 db '%s, and %s.',0Ah,0
.rodata:0000000000006BE4                 align 8
.rodata:0000000000006BE8 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000006BE8 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006BE8                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000006BE8                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006C10 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006C10 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006C10                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006C10                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006C3C                 align 20h
.rodata:0000000000006C40 ; const char aWrittenBySSSSS[]
.rodata:0000000000006C40 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006C40                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006C40                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006C40                 db 'and %s.',0Ah,0
.rodata:0000000000006C70 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006C70 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006C70                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006C70                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006C70                 db '%s, and %s.',0Ah,0
.rodata:0000000000006CA4                 align 8
.rodata:0000000000006CA8 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006CA8                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000006CA8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006CA8                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000006CE4                 align 8
.rodata:0000000000006CE8 ; const char aGeneralHelpUsi[]
.rodata:0000000000006CE8 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000006CE8                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000006CE8                 db 0
.rodata:0000000000006D29                 align 4
.rodata:0000000000006D2C jpt_4CD4        dd offset loc_4D56 - 6D2Ch
.rodata:0000000000006D2C                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006D2C                                         ; version_etc_arn+9D↑r
.rodata:0000000000006D2C                 dd offset loc_4DE8 - 6D2Ch ; jump table for switch statement
.rodata:0000000000006D2C                 dd offset loc_4E28 - 6D2Ch
.rodata:0000000000006D2C                 dd offset loc_4E70 - 6D2Ch
.rodata:0000000000006D2C                 dd offset loc_4EC0 - 6D2Ch
.rodata:0000000000006D2C                 dd offset loc_4F18 - 6D2Ch
.rodata:0000000000006D2C                 dd offset loc_4F48 - 6D2Ch
.rodata:0000000000006D2C                 dd offset loc_4FB0 - 6D2Ch
.rodata:0000000000006D2C                 dd offset loc_4CE0 - 6D2Ch
.rodata:0000000000006D2C                 dd offset loc_4D90 - 6D2Ch
.rodata:0000000000006D54                 align 20h
.rodata:0000000000006D60                 public version_etc_copyright
.rodata:0000000000006D60 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006D60                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000006D8F ; const char aMemoryExhauste[]
.rodata:0000000000006D8F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000006DA0 ; const char file[]
.rodata:0000000000006DA0 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000006DA0                                         ; DATA XREF: xstrtoul+38C↑o
.rodata:0000000000006DC0 ; const char assertion[]
.rodata:0000000000006DC0 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000006DC0                                         ; DATA XREF: xstrtoul+393↑o
.rodata:0000000000006DE6                 align 8
.rodata:0000000000006DE8 jpt_56E6        dd offset loc_5836 - 6DE8h, offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h
.rodata:0000000000006DE8                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:0000000000006DE8                                         ; xstrtoul+1CF↑r
.rodata:0000000000006DE8                 dd offset loc_5813 - 6DE8h, offset def_56E6 - 6DE8h, offset loc_584C - 6DE8h ; jump table for switch statement
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h
.rodata:0000000000006DE8                 dd offset loc_57CF - 6DE8h, offset def_56E6 - 6DE8h, offset loc_56E8 - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h, offset loc_57F0 - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h
.rodata:0000000000006DE8                 dd offset loc_57AF - 6DE8h, offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h, offset loc_578A - 6DE8h
.rodata:0000000000006DE8                 dd offset loc_5764 - 6DE8h, offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h, offset loc_574D - 6DE8h
.rodata:0000000000006DE8                 dd offset loc_5710 - 6DE8h, offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset loc_584C - 6DE8h, offset def_56E6 - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h, offset loc_57CF - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset loc_56E8 - 6DE8h, offset def_56E6 - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h, offset loc_57AF - 6DE8h
.rodata:0000000000006DE8                 dd offset def_56E6 - 6DE8h, offset def_56E6 - 6DE8h, offset loc_5737 - 6DE8h
.rodata:0000000000006EC0 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000006EC0 __PRETTY_FUNCTION___4162 db 'xstrtoul',0
.rodata:0000000000006EC0                                         ; DATA XREF: xstrtoul:loc_5895↑o
.rodata:0000000000006EC9 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000006ECB aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5A80↑o
.rodata:0000000000006ED1 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000006ED1                                         ; locale_charset:loc_5B20↑o
.rodata:0000000000006ED1 _rodata         ends
.rodata:0000000000006ED1
LOAD:0000000000006ED7 ; ===========================================================================
LOAD:0000000000006ED7
LOAD:0000000000006ED7 ; Segment type: Pure code
LOAD:0000000000006ED7 ; Segment permissions: Read/Execute
LOAD:0000000000006ED7 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006ED7                 assume cs:LOAD
LOAD:0000000000006ED7                 ;org 6ED7h
LOAD:0000000000006ED7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006ED7                 align 8
LOAD:0000000000006ED7 LOAD            ends
LOAD:0000000000006ED7
.eh_frame_hdr:0000000000006ED8 ; ===========================================================================
.eh_frame_hdr:0000000000006ED8
.eh_frame_hdr:0000000000006ED8 ; Segment type: Pure data
.eh_frame_hdr:0000000000006ED8 ; Segment permissions: Read
.eh_frame_hdr:0000000000006ED8 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000006ED8                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000006ED8                 ;org 6ED8h
.eh_frame_hdr:0000000000006ED8 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000006ED9                 db  1Bh
.eh_frame_hdr:0000000000006EDA                 db    3
.eh_frame_hdr:0000000000006EDB                 db  3Bh ; ;
.eh_frame_hdr:0000000000006EDC                 db  7Ch ; |
.eh_frame_hdr:0000000000006EDD                 db    2
.eh_frame_hdr:0000000000006EDE                 db    0
.eh_frame_hdr:0000000000006EDF                 db    0
.eh_frame_hdr:0000000000006EE0                 db  4Eh ; N
.eh_frame_hdr:0000000000006EE1                 db    0
.eh_frame_hdr:0000000000006EE2                 db    0
.eh_frame_hdr:0000000000006EE3                 db    0
.eh_frame_hdr:0000000000006EE4                 db 0E8h
.eh_frame_hdr:0000000000006EE5                 db 0A7h
.eh_frame_hdr:0000000000006EE6                 db 0FFh
.eh_frame_hdr:0000000000006EE7                 db 0FFh
.eh_frame_hdr:0000000000006EE8                 db 0C8h
.eh_frame_hdr:0000000000006EE9                 db    2
.eh_frame_hdr:0000000000006EEA                 db    0
.eh_frame_hdr:0000000000006EEB                 db    0
.eh_frame_hdr:0000000000006EEC                 db 0B8h
.eh_frame_hdr:0000000000006EED                 db 0ABh
.eh_frame_hdr:0000000000006EEE                 db 0FFh
.eh_frame_hdr:0000000000006EEF                 db 0FFh
.eh_frame_hdr:0000000000006EF0                 db 0F0h
.eh_frame_hdr:0000000000006EF1                 db    2
.eh_frame_hdr:0000000000006EF2                 db    0
.eh_frame_hdr:0000000000006EF3                 db    0
.eh_frame_hdr:0000000000006EF4                 db 0C8h
.eh_frame_hdr:0000000000006EF5                 db 0ABh
.eh_frame_hdr:0000000000006EF6                 db 0FFh
.eh_frame_hdr:0000000000006EF7                 db 0FFh
.eh_frame_hdr:0000000000006EF8                 db  84h
.eh_frame_hdr:0000000000006EF9                 db    3
.eh_frame_hdr:0000000000006EFA                 db    0
.eh_frame_hdr:0000000000006EFB                 db    0
.eh_frame_hdr:0000000000006EFC                 db  48h ; H
.eh_frame_hdr:0000000000006EFD                 db 0B3h
.eh_frame_hdr:0000000000006EFE                 db 0FFh
.eh_frame_hdr:0000000000006EFF                 db 0FFh
.eh_frame_hdr:0000000000006F00                 db  98h
.eh_frame_hdr:0000000000006F01                 db    2
.eh_frame_hdr:0000000000006F02                 db    0
.eh_frame_hdr:0000000000006F03                 db    0
.eh_frame_hdr:0000000000006F04                 db  58h ; X
.eh_frame_hdr:0000000000006F05                 db 0B4h
.eh_frame_hdr:0000000000006F06                 db 0FFh
.eh_frame_hdr:0000000000006F07                 db 0FFh
.eh_frame_hdr:0000000000006F08                 db    8
.eh_frame_hdr:0000000000006F09                 db    3
.eh_frame_hdr:0000000000006F0A                 db    0
.eh_frame_hdr:0000000000006F0B                 db    0
.eh_frame_hdr:0000000000006F0C                 db 0C8h
.eh_frame_hdr:0000000000006F0D                 db 0B6h
.eh_frame_hdr:0000000000006F0E                 db 0FFh
.eh_frame_hdr:0000000000006F0F                 db 0FFh
.eh_frame_hdr:0000000000006F10                 db  58h ; X
.eh_frame_hdr:0000000000006F11                 db    3
.eh_frame_hdr:0000000000006F12                 db    0
.eh_frame_hdr:0000000000006F13                 db    0
.eh_frame_hdr:0000000000006F14                 db 0B8h
.eh_frame_hdr:0000000000006F15                 db 0BAh
.eh_frame_hdr:0000000000006F16                 db 0FFh
.eh_frame_hdr:0000000000006F17                 db 0FFh
.eh_frame_hdr:0000000000006F18                 db 0D8h
.eh_frame_hdr:0000000000006F19                 db    3
.eh_frame_hdr:0000000000006F1A                 db    0
.eh_frame_hdr:0000000000006F1B                 db    0
.eh_frame_hdr:0000000000006F1C                 db 0C8h
.eh_frame_hdr:0000000000006F1D                 db 0BAh
.eh_frame_hdr:0000000000006F1E                 db 0FFh
.eh_frame_hdr:0000000000006F1F                 db 0FFh
.eh_frame_hdr:0000000000006F20                 db 0ECh
.eh_frame_hdr:0000000000006F21                 db    3
.eh_frame_hdr:0000000000006F22                 db    0
.eh_frame_hdr:0000000000006F23                 db    0
.eh_frame_hdr:0000000000006F24                 db 0D8h
.eh_frame_hdr:0000000000006F25                 db 0BAh
.eh_frame_hdr:0000000000006F26                 db 0FFh
.eh_frame_hdr:0000000000006F27                 db 0FFh
.eh_frame_hdr:0000000000006F28                 db    0
.eh_frame_hdr:0000000000006F29                 db    4
.eh_frame_hdr:0000000000006F2A                 db    0
.eh_frame_hdr:0000000000006F2B                 db    0
.eh_frame_hdr:0000000000006F2C                 db  88h
.eh_frame_hdr:0000000000006F2D                 db 0BBh
.eh_frame_hdr:0000000000006F2E                 db 0FFh
.eh_frame_hdr:0000000000006F2F                 db 0FFh
.eh_frame_hdr:0000000000006F30                 db  30h ; 0
.eh_frame_hdr:0000000000006F31                 db    4
.eh_frame_hdr:0000000000006F32                 db    0
.eh_frame_hdr:0000000000006F33                 db    0
.eh_frame_hdr:0000000000006F34                 db  28h ; (
.eh_frame_hdr:0000000000006F35                 db 0BCh
.eh_frame_hdr:0000000000006F36                 db 0FFh
.eh_frame_hdr:0000000000006F37                 db 0FFh
.eh_frame_hdr:0000000000006F38                 db  50h ; P
.eh_frame_hdr:0000000000006F39                 db    4
.eh_frame_hdr:0000000000006F3A                 db    0
.eh_frame_hdr:0000000000006F3B                 db    0
.eh_frame_hdr:0000000000006F3C                 db  18h
.eh_frame_hdr:0000000000006F3D                 db 0BDh
.eh_frame_hdr:0000000000006F3E                 db 0FFh
.eh_frame_hdr:0000000000006F3F                 db 0FFh
.eh_frame_hdr:0000000000006F40                 db  94h
.eh_frame_hdr:0000000000006F41                 db    4
.eh_frame_hdr:0000000000006F42                 db    0
.eh_frame_hdr:0000000000006F43                 db    0
.eh_frame_hdr:0000000000006F44                 db  58h ; X
.eh_frame_hdr:0000000000006F45                 db 0CFh
.eh_frame_hdr:0000000000006F46                 db 0FFh
.eh_frame_hdr:0000000000006F47                 db 0FFh
.eh_frame_hdr:0000000000006F48                 db  0Ch
.eh_frame_hdr:0000000000006F49                 db    5
.eh_frame_hdr:0000000000006F4A                 db    0
.eh_frame_hdr:0000000000006F4B                 db    0
.eh_frame_hdr:0000000000006F4C                 db    8
.eh_frame_hdr:0000000000006F4D                 db 0D1h
.eh_frame_hdr:0000000000006F4E                 db 0FFh
.eh_frame_hdr:0000000000006F4F                 db 0FFh
.eh_frame_hdr:0000000000006F50                 db  78h ; x
.eh_frame_hdr:0000000000006F51                 db    5
.eh_frame_hdr:0000000000006F52                 db    0
.eh_frame_hdr:0000000000006F53                 db    0
.eh_frame_hdr:0000000000006F54                 db  48h ; H
.eh_frame_hdr:0000000000006F55                 db 0D1h
.eh_frame_hdr:0000000000006F56                 db 0FFh
.eh_frame_hdr:0000000000006F57                 db 0FFh
.eh_frame_hdr:0000000000006F58                 db 0A4h
.eh_frame_hdr:0000000000006F59                 db    5
.eh_frame_hdr:0000000000006F5A                 db    0
.eh_frame_hdr:0000000000006F5B                 db    0
.eh_frame_hdr:0000000000006F5C                 db  68h ; h
.eh_frame_hdr:0000000000006F5D                 db 0D1h
.eh_frame_hdr:0000000000006F5E                 db 0FFh
.eh_frame_hdr:0000000000006F5F                 db 0FFh
.eh_frame_hdr:0000000000006F60                 db 0B8h
.eh_frame_hdr:0000000000006F61                 db    5
.eh_frame_hdr:0000000000006F62                 db    0
.eh_frame_hdr:0000000000006F63                 db    0
.eh_frame_hdr:0000000000006F64                 db  88h
.eh_frame_hdr:0000000000006F65                 db 0D1h
.eh_frame_hdr:0000000000006F66                 db 0FFh
.eh_frame_hdr:0000000000006F67                 db 0FFh
.eh_frame_hdr:0000000000006F68                 db 0CCh
.eh_frame_hdr:0000000000006F69                 db    5
.eh_frame_hdr:0000000000006F6A                 db    0
.eh_frame_hdr:0000000000006F6B                 db    0
.eh_frame_hdr:0000000000006F6C                 db 0C8h
.eh_frame_hdr:0000000000006F6D                 db 0D1h
.eh_frame_hdr:0000000000006F6E                 db 0FFh
.eh_frame_hdr:0000000000006F6F                 db 0FFh
.eh_frame_hdr:0000000000006F70                 db 0E0h
.eh_frame_hdr:0000000000006F71                 db    5
.eh_frame_hdr:0000000000006F72                 db    0
.eh_frame_hdr:0000000000006F73                 db    0
.eh_frame_hdr:0000000000006F74                 db 0E8h
.eh_frame_hdr:0000000000006F75                 db 0D1h
.eh_frame_hdr:0000000000006F76                 db 0FFh
.eh_frame_hdr:0000000000006F77                 db 0FFh
.eh_frame_hdr:0000000000006F78                 db 0F4h
.eh_frame_hdr:0000000000006F79                 db    5
.eh_frame_hdr:0000000000006F7A                 db    0
.eh_frame_hdr:0000000000006F7B                 db    0
.eh_frame_hdr:0000000000006F7C                 db  18h
.eh_frame_hdr:0000000000006F7D                 db 0D2h
.eh_frame_hdr:0000000000006F7E                 db 0FFh
.eh_frame_hdr:0000000000006F7F                 db 0FFh
.eh_frame_hdr:0000000000006F80                 db    8
.eh_frame_hdr:0000000000006F81                 db    6
.eh_frame_hdr:0000000000006F82                 db    0
.eh_frame_hdr:0000000000006F83                 db    0
.eh_frame_hdr:0000000000006F84                 db  98h
.eh_frame_hdr:0000000000006F85                 db 0D2h
.eh_frame_hdr:0000000000006F86                 db 0FFh
.eh_frame_hdr:0000000000006F87                 db 0FFh
.eh_frame_hdr:0000000000006F88                 db  5Ch ; \
.eh_frame_hdr:0000000000006F89                 db    6
.eh_frame_hdr:0000000000006F8A                 db    0
.eh_frame_hdr:0000000000006F8B                 db    0
.eh_frame_hdr:0000000000006F8C                 db  88h
.eh_frame_hdr:0000000000006F8D                 db 0D3h
.eh_frame_hdr:0000000000006F8E                 db 0FFh
.eh_frame_hdr:0000000000006F8F                 db 0FFh
.eh_frame_hdr:0000000000006F90                 db 0C8h
.eh_frame_hdr:0000000000006F91                 db    6
.eh_frame_hdr:0000000000006F92                 db    0
.eh_frame_hdr:0000000000006F93                 db    0
.eh_frame_hdr:0000000000006F94                 db  98h
.eh_frame_hdr:0000000000006F95                 db 0D3h
.eh_frame_hdr:0000000000006F96                 db 0FFh
.eh_frame_hdr:0000000000006F97                 db 0FFh
.eh_frame_hdr:0000000000006F98                 db 0DCh
.eh_frame_hdr:0000000000006F99                 db    6
.eh_frame_hdr:0000000000006F9A                 db    0
.eh_frame_hdr:0000000000006F9B                 db    0
.eh_frame_hdr:0000000000006F9C                 db  38h ; 8
.eh_frame_hdr:0000000000006F9D                 db 0D4h
.eh_frame_hdr:0000000000006F9E                 db 0FFh
.eh_frame_hdr:0000000000006F9F                 db 0FFh
.eh_frame_hdr:0000000000006FA0                 db    8
.eh_frame_hdr:0000000000006FA1                 db    7
.eh_frame_hdr:0000000000006FA2                 db    0
.eh_frame_hdr:0000000000006FA3                 db    0
.eh_frame_hdr:0000000000006FA4                 db  58h ; X
.eh_frame_hdr:0000000000006FA5                 db 0D4h
.eh_frame_hdr:0000000000006FA6                 db 0FFh
.eh_frame_hdr:0000000000006FA7                 db 0FFh
.eh_frame_hdr:0000000000006FA8                 db  1Ch
.eh_frame_hdr:0000000000006FA9                 db    7
.eh_frame_hdr:0000000000006FAA                 db    0
.eh_frame_hdr:0000000000006FAB                 db    0
.eh_frame_hdr:0000000000006FAC                 db  68h ; h
.eh_frame_hdr:0000000000006FAD                 db 0D4h
.eh_frame_hdr:0000000000006FAE                 db 0FFh
.eh_frame_hdr:0000000000006FAF                 db 0FFh
.eh_frame_hdr:0000000000006FB0                 db  30h ; 0
.eh_frame_hdr:0000000000006FB1                 db    7
.eh_frame_hdr:0000000000006FB2                 db    0
.eh_frame_hdr:0000000000006FB3                 db    0
.eh_frame_hdr:0000000000006FB4                 db  88h
.eh_frame_hdr:0000000000006FB5                 db 0D4h
.eh_frame_hdr:0000000000006FB6                 db 0FFh
.eh_frame_hdr:0000000000006FB7                 db 0FFh
.eh_frame_hdr:0000000000006FB8                 db  44h ; D
.eh_frame_hdr:0000000000006FB9                 db    7
.eh_frame_hdr:0000000000006FBA                 db    0
.eh_frame_hdr:0000000000006FBB                 db    0
.eh_frame_hdr:0000000000006FBC                 db 0A8h
.eh_frame_hdr:0000000000006FBD                 db 0D4h
.eh_frame_hdr:0000000000006FBE                 db 0FFh
.eh_frame_hdr:0000000000006FBF                 db 0FFh
.eh_frame_hdr:0000000000006FC0                 db  58h ; X
.eh_frame_hdr:0000000000006FC1                 db    7
.eh_frame_hdr:0000000000006FC2                 db    0
.eh_frame_hdr:0000000000006FC3                 db    0
.eh_frame_hdr:0000000000006FC4                 db  38h ; 8
.eh_frame_hdr:0000000000006FC5                 db 0D5h
.eh_frame_hdr:0000000000006FC6                 db 0FFh
.eh_frame_hdr:0000000000006FC7                 db 0FFh
.eh_frame_hdr:0000000000006FC8                 db  74h ; t
.eh_frame_hdr:0000000000006FC9                 db    7
.eh_frame_hdr:0000000000006FCA                 db    0
.eh_frame_hdr:0000000000006FCB                 db    0
.eh_frame_hdr:0000000000006FCC                 db 0C8h
.eh_frame_hdr:0000000000006FCD                 db 0D5h
.eh_frame_hdr:0000000000006FCE                 db 0FFh
.eh_frame_hdr:0000000000006FCF                 db 0FFh
.eh_frame_hdr:0000000000006FD0                 db  90h
.eh_frame_hdr:0000000000006FD1                 db    7
.eh_frame_hdr:0000000000006FD2                 db    0
.eh_frame_hdr:0000000000006FD3                 db    0
.eh_frame_hdr:0000000000006FD4                 db 0D8h
.eh_frame_hdr:0000000000006FD5                 db 0D5h
.eh_frame_hdr:0000000000006FD6                 db 0FFh
.eh_frame_hdr:0000000000006FD7                 db 0FFh
.eh_frame_hdr:0000000000006FD8                 db 0A4h
.eh_frame_hdr:0000000000006FD9                 db    7
.eh_frame_hdr:0000000000006FDA                 db    0
.eh_frame_hdr:0000000000006FDB                 db    0
.eh_frame_hdr:0000000000006FDC                 db 0E8h
.eh_frame_hdr:0000000000006FDD                 db 0D5h
.eh_frame_hdr:0000000000006FDE                 db 0FFh
.eh_frame_hdr:0000000000006FDF                 db 0FFh
.eh_frame_hdr:0000000000006FE0                 db 0B8h
.eh_frame_hdr:0000000000006FE1                 db    7
.eh_frame_hdr:0000000000006FE2                 db    0
.eh_frame_hdr:0000000000006FE3                 db    0
.eh_frame_hdr:0000000000006FE4                 db  88h
.eh_frame_hdr:0000000000006FE5                 db 0D6h
.eh_frame_hdr:0000000000006FE6                 db 0FFh
.eh_frame_hdr:0000000000006FE7                 db 0FFh
.eh_frame_hdr:0000000000006FE8                 db 0D4h
.eh_frame_hdr:0000000000006FE9                 db    7
.eh_frame_hdr:0000000000006FEA                 db    0
.eh_frame_hdr:0000000000006FEB                 db    0
.eh_frame_hdr:0000000000006FEC                 db  98h
.eh_frame_hdr:0000000000006FED                 db 0D6h
.eh_frame_hdr:0000000000006FEE                 db 0FFh
.eh_frame_hdr:0000000000006FEF                 db 0FFh
.eh_frame_hdr:0000000000006FF0                 db 0E8h
.eh_frame_hdr:0000000000006FF1                 db    7
.eh_frame_hdr:0000000000006FF2                 db    0
.eh_frame_hdr:0000000000006FF3                 db    0
.eh_frame_hdr:0000000000006FF4                 db 0B8h
.eh_frame_hdr:0000000000006FF5                 db 0D6h
.eh_frame_hdr:0000000000006FF6                 db 0FFh
.eh_frame_hdr:0000000000006FF7                 db 0FFh
.eh_frame_hdr:0000000000006FF8                 db 0FCh
.eh_frame_hdr:0000000000006FF9                 db    7
.eh_frame_hdr:0000000000006FFA                 db    0
.eh_frame_hdr:0000000000006FFB                 db    0
.eh_frame_hdr:0000000000006FFC                 db 0C8h
.eh_frame_hdr:0000000000006FFD                 db 0D6h
.eh_frame_hdr:0000000000006FFE                 db 0FFh
.eh_frame_hdr:0000000000006FFF                 db 0FFh
.eh_frame_hdr:0000000000007000                 db  10h
.eh_frame_hdr:0000000000007001                 db    8
.eh_frame_hdr:0000000000007002                 db    0
.eh_frame_hdr:0000000000007003                 db    0
.eh_frame_hdr:0000000000007004                 db  58h ; X
.eh_frame_hdr:0000000000007005                 db 0D7h
.eh_frame_hdr:0000000000007006                 db 0FFh
.eh_frame_hdr:0000000000007007                 db 0FFh
.eh_frame_hdr:0000000000007008                 db  2Ch ; ,
.eh_frame_hdr:0000000000007009                 db    8
.eh_frame_hdr:000000000000700A                 db    0
.eh_frame_hdr:000000000000700B                 db    0
.eh_frame_hdr:000000000000700C                 db 0F8h
.eh_frame_hdr:000000000000700D                 db 0D7h
.eh_frame_hdr:000000000000700E                 db 0FFh
.eh_frame_hdr:000000000000700F                 db 0FFh
.eh_frame_hdr:0000000000007010                 db  48h ; H
.eh_frame_hdr:0000000000007011                 db    8
.eh_frame_hdr:0000000000007012                 db    0
.eh_frame_hdr:0000000000007013                 db    0
.eh_frame_hdr:0000000000007014                 db    8
.eh_frame_hdr:0000000000007015                 db 0D8h
.eh_frame_hdr:0000000000007016                 db 0FFh
.eh_frame_hdr:0000000000007017                 db 0FFh
.eh_frame_hdr:0000000000007018                 db  5Ch ; \
.eh_frame_hdr:0000000000007019                 db    8
.eh_frame_hdr:000000000000701A                 db    0
.eh_frame_hdr:000000000000701B                 db    0
.eh_frame_hdr:000000000000701C                 db  28h ; (
.eh_frame_hdr:000000000000701D                 db 0D8h
.eh_frame_hdr:000000000000701E                 db 0FFh
.eh_frame_hdr:000000000000701F                 db 0FFh
.eh_frame_hdr:0000000000007020                 db  70h ; p
.eh_frame_hdr:0000000000007021                 db    8
.eh_frame_hdr:0000000000007022                 db    0
.eh_frame_hdr:0000000000007023                 db    0
.eh_frame_hdr:0000000000007024                 db  48h ; H
.eh_frame_hdr:0000000000007025                 db 0D8h
.eh_frame_hdr:0000000000007026                 db 0FFh
.eh_frame_hdr:0000000000007027                 db 0FFh
.eh_frame_hdr:0000000000007028                 db  84h
.eh_frame_hdr:0000000000007029                 db    8
.eh_frame_hdr:000000000000702A                 db    0
.eh_frame_hdr:000000000000702B                 db    0
.eh_frame_hdr:000000000000702C                 db  58h ; X
.eh_frame_hdr:000000000000702D                 db 0D8h
.eh_frame_hdr:000000000000702E                 db 0FFh
.eh_frame_hdr:000000000000702F                 db 0FFh
.eh_frame_hdr:0000000000007030                 db  98h
.eh_frame_hdr:0000000000007031                 db    8
.eh_frame_hdr:0000000000007032                 db    0
.eh_frame_hdr:0000000000007033                 db    0
.eh_frame_hdr:0000000000007034                 db  78h ; x
.eh_frame_hdr:0000000000007035                 db 0D8h
.eh_frame_hdr:0000000000007036                 db 0FFh
.eh_frame_hdr:0000000000007037                 db 0FFh
.eh_frame_hdr:0000000000007038                 db 0ACh
.eh_frame_hdr:0000000000007039                 db    8
.eh_frame_hdr:000000000000703A                 db    0
.eh_frame_hdr:000000000000703B                 db    0
.eh_frame_hdr:000000000000703C                 db  98h
.eh_frame_hdr:000000000000703D                 db 0D8h
.eh_frame_hdr:000000000000703E                 db 0FFh
.eh_frame_hdr:000000000000703F                 db 0FFh
.eh_frame_hdr:0000000000007040                 db 0C0h
.eh_frame_hdr:0000000000007041                 db    8
.eh_frame_hdr:0000000000007042                 db    0
.eh_frame_hdr:0000000000007043                 db    0
.eh_frame_hdr:0000000000007044                 db 0B8h
.eh_frame_hdr:0000000000007045                 db 0D8h
.eh_frame_hdr:0000000000007046                 db 0FFh
.eh_frame_hdr:0000000000007047                 db 0FFh
.eh_frame_hdr:0000000000007048                 db 0D8h
.eh_frame_hdr:0000000000007049                 db    8
.eh_frame_hdr:000000000000704A                 db    0
.eh_frame_hdr:000000000000704B                 db    0
.eh_frame_hdr:000000000000704C                 db  88h
.eh_frame_hdr:000000000000704D                 db 0DCh
.eh_frame_hdr:000000000000704E                 db 0FFh
.eh_frame_hdr:000000000000704F                 db 0FFh
.eh_frame_hdr:0000000000007050                 db  28h ; (
.eh_frame_hdr:0000000000007051                 db    9
.eh_frame_hdr:0000000000007052                 db    0
.eh_frame_hdr:0000000000007053                 db    0
.eh_frame_hdr:0000000000007054                 db  58h ; X
.eh_frame_hdr:0000000000007055                 db 0DDh
.eh_frame_hdr:0000000000007056                 db 0FFh
.eh_frame_hdr:0000000000007057                 db 0FFh
.eh_frame_hdr:0000000000007058                 db  88h
.eh_frame_hdr:0000000000007059                 db    9
.eh_frame_hdr:000000000000705A                 db    0
.eh_frame_hdr:000000000000705B                 db    0
.eh_frame_hdr:000000000000705C                 db  78h ; x
.eh_frame_hdr:000000000000705D                 db 0E1h
.eh_frame_hdr:000000000000705E                 db 0FFh
.eh_frame_hdr:000000000000705F                 db 0FFh
.eh_frame_hdr:0000000000007060                 db  9Ch
.eh_frame_hdr:0000000000007061                 db  0Ah
.eh_frame_hdr:0000000000007062                 db    0
.eh_frame_hdr:0000000000007063                 db    0
.eh_frame_hdr:0000000000007064                 db  98h
.eh_frame_hdr:0000000000007065                 db 0E1h
.eh_frame_hdr:0000000000007066                 db 0FFh
.eh_frame_hdr:0000000000007067                 db 0FFh
.eh_frame_hdr:0000000000007068                 db 0B0h
.eh_frame_hdr:0000000000007069                 db  0Ah
.eh_frame_hdr:000000000000706A                 db    0
.eh_frame_hdr:000000000000706B                 db    0
.eh_frame_hdr:000000000000706C                 db  18h
.eh_frame_hdr:000000000000706D                 db 0E2h
.eh_frame_hdr:000000000000706E                 db 0FFh
.eh_frame_hdr:000000000000706F                 db 0FFh
.eh_frame_hdr:0000000000007070                 db 0CCh
.eh_frame_hdr:0000000000007071                 db  0Ah
.eh_frame_hdr:0000000000007072                 db    0
.eh_frame_hdr:0000000000007073                 db    0
.eh_frame_hdr:0000000000007074                 db 0F8h
.eh_frame_hdr:0000000000007075                 db 0E2h
.eh_frame_hdr:0000000000007076                 db 0FFh
.eh_frame_hdr:0000000000007077                 db 0FFh
.eh_frame_hdr:0000000000007078                 db 0F8h
.eh_frame_hdr:0000000000007079                 db  0Ah
.eh_frame_hdr:000000000000707A                 db    0
.eh_frame_hdr:000000000000707B                 db    0
.eh_frame_hdr:000000000000707C                 db  78h ; x
.eh_frame_hdr:000000000000707D                 db 0E3h
.eh_frame_hdr:000000000000707E                 db 0FFh
.eh_frame_hdr:000000000000707F                 db 0FFh
.eh_frame_hdr:0000000000007080                 db  18h
.eh_frame_hdr:0000000000007081                 db  0Bh
.eh_frame_hdr:0000000000007082                 db    0
.eh_frame_hdr:0000000000007083                 db    0
.eh_frame_hdr:0000000000007084                 db  98h
.eh_frame_hdr:0000000000007085                 db 0E3h
.eh_frame_hdr:0000000000007086                 db 0FFh
.eh_frame_hdr:0000000000007087                 db 0FFh
.eh_frame_hdr:0000000000007088                 db  34h ; 4
.eh_frame_hdr:0000000000007089                 db  0Bh
.eh_frame_hdr:000000000000708A                 db    0
.eh_frame_hdr:000000000000708B                 db    0
.eh_frame_hdr:000000000000708C                 db 0C8h
.eh_frame_hdr:000000000000708D                 db 0E3h
.eh_frame_hdr:000000000000708E                 db 0FFh
.eh_frame_hdr:000000000000708F                 db 0FFh
.eh_frame_hdr:0000000000007090                 db  48h ; H
.eh_frame_hdr:0000000000007091                 db  0Bh
.eh_frame_hdr:0000000000007092                 db    0
.eh_frame_hdr:0000000000007093                 db    0
.eh_frame_hdr:0000000000007094                 db 0D8h
.eh_frame_hdr:0000000000007095                 db 0E3h
.eh_frame_hdr:0000000000007096                 db 0FFh
.eh_frame_hdr:0000000000007097                 db 0FFh
.eh_frame_hdr:0000000000007098                 db  5Ch ; \
.eh_frame_hdr:0000000000007099                 db  0Bh
.eh_frame_hdr:000000000000709A                 db    0
.eh_frame_hdr:000000000000709B                 db    0
.eh_frame_hdr:000000000000709C                 db  18h
.eh_frame_hdr:000000000000709D                 db 0E4h
.eh_frame_hdr:000000000000709E                 db 0FFh
.eh_frame_hdr:000000000000709F                 db 0FFh
.eh_frame_hdr:00000000000070A0                 db  80h
.eh_frame_hdr:00000000000070A1                 db  0Bh
.eh_frame_hdr:00000000000070A2                 db    0
.eh_frame_hdr:00000000000070A3                 db    0
.eh_frame_hdr:00000000000070A4                 db  48h ; H
.eh_frame_hdr:00000000000070A5                 db 0E4h
.eh_frame_hdr:00000000000070A6                 db 0FFh
.eh_frame_hdr:00000000000070A7                 db 0FFh
.eh_frame_hdr:00000000000070A8                 db  94h
.eh_frame_hdr:00000000000070A9                 db  0Bh
.eh_frame_hdr:00000000000070AA                 db    0
.eh_frame_hdr:00000000000070AB                 db    0
.eh_frame_hdr:00000000000070AC                 db 0D8h
.eh_frame_hdr:00000000000070AD                 db 0E4h
.eh_frame_hdr:00000000000070AE                 db 0FFh
.eh_frame_hdr:00000000000070AF                 db 0FFh
.eh_frame_hdr:00000000000070B0                 db 0ACh
.eh_frame_hdr:00000000000070B1                 db  0Bh
.eh_frame_hdr:00000000000070B2                 db    0
.eh_frame_hdr:00000000000070B3                 db    0
.eh_frame_hdr:00000000000070B4                 db  28h ; (
.eh_frame_hdr:00000000000070B5                 db 0E5h
.eh_frame_hdr:00000000000070B6                 db 0FFh
.eh_frame_hdr:00000000000070B7                 db 0FFh
.eh_frame_hdr:00000000000070B8                 db 0C4h
.eh_frame_hdr:00000000000070B9                 db  0Bh
.eh_frame_hdr:00000000000070BA                 db    0
.eh_frame_hdr:00000000000070BB                 db    0
.eh_frame_hdr:00000000000070BC                 db  48h ; H
.eh_frame_hdr:00000000000070BD                 db 0E5h
.eh_frame_hdr:00000000000070BE                 db 0FFh
.eh_frame_hdr:00000000000070BF                 db 0FFh
.eh_frame_hdr:00000000000070C0                 db 0E0h
.eh_frame_hdr:00000000000070C1                 db  0Bh
.eh_frame_hdr:00000000000070C2                 db    0
.eh_frame_hdr:00000000000070C3                 db    0
.eh_frame_hdr:00000000000070C4                 db  78h ; x
.eh_frame_hdr:00000000000070C5                 db 0E5h
.eh_frame_hdr:00000000000070C6                 db 0FFh
.eh_frame_hdr:00000000000070C7                 db 0FFh
.eh_frame_hdr:00000000000070C8                 db 0FCh
.eh_frame_hdr:00000000000070C9                 db  0Bh
.eh_frame_hdr:00000000000070CA                 db    0
.eh_frame_hdr:00000000000070CB                 db    0
.eh_frame_hdr:00000000000070CC                 db 0A8h
.eh_frame_hdr:00000000000070CD                 db 0E5h
.eh_frame_hdr:00000000000070CE                 db 0FFh
.eh_frame_hdr:00000000000070CF                 db 0FFh
.eh_frame_hdr:00000000000070D0                 db  24h ; $
.eh_frame_hdr:00000000000070D1                 db  0Ch
.eh_frame_hdr:00000000000070D2                 db    0
.eh_frame_hdr:00000000000070D3                 db    0
.eh_frame_hdr:00000000000070D4                 db 0C8h
.eh_frame_hdr:00000000000070D5                 db 0E5h
.eh_frame_hdr:00000000000070D6                 db 0FFh
.eh_frame_hdr:00000000000070D7                 db 0FFh
.eh_frame_hdr:00000000000070D8                 db  40h ; @
.eh_frame_hdr:00000000000070D9                 db  0Ch
.eh_frame_hdr:00000000000070DA                 db    0
.eh_frame_hdr:00000000000070DB                 db    0
.eh_frame_hdr:00000000000070DC                 db    8
.eh_frame_hdr:00000000000070DD                 db 0E6h
.eh_frame_hdr:00000000000070DE                 db 0FFh
.eh_frame_hdr:00000000000070DF                 db 0FFh
.eh_frame_hdr:00000000000070E0                 db  58h ; X
.eh_frame_hdr:00000000000070E1                 db  0Ch
.eh_frame_hdr:00000000000070E2                 db    0
.eh_frame_hdr:00000000000070E3                 db    0
.eh_frame_hdr:00000000000070E4                 db  38h ; 8
.eh_frame_hdr:00000000000070E5                 db 0E6h
.eh_frame_hdr:00000000000070E6                 db 0FFh
.eh_frame_hdr:00000000000070E7                 db 0FFh
.eh_frame_hdr:00000000000070E8                 db  78h ; x
.eh_frame_hdr:00000000000070E9                 db  0Ch
.eh_frame_hdr:00000000000070EA                 db    0
.eh_frame_hdr:00000000000070EB                 db    0
.eh_frame_hdr:00000000000070EC                 db  58h ; X
.eh_frame_hdr:00000000000070ED                 db 0EAh
.eh_frame_hdr:00000000000070EE                 db 0FFh
.eh_frame_hdr:00000000000070EF                 db 0FFh
.eh_frame_hdr:00000000000070F0                 db 0C8h
.eh_frame_hdr:00000000000070F1                 db  0Ch
.eh_frame_hdr:00000000000070F2                 db    0
.eh_frame_hdr:00000000000070F3                 db    0
.eh_frame_hdr:00000000000070F4                 db 0E8h
.eh_frame_hdr:00000000000070F5                 db 0EAh
.eh_frame_hdr:00000000000070F6                 db 0FFh
.eh_frame_hdr:00000000000070F7                 db 0FFh
.eh_frame_hdr:00000000000070F8                 db    8
.eh_frame_hdr:00000000000070F9                 db  0Dh
.eh_frame_hdr:00000000000070FA                 db    0
.eh_frame_hdr:00000000000070FB                 db    0
.eh_frame_hdr:00000000000070FC                 db  68h ; h
.eh_frame_hdr:00000000000070FD                 db 0EBh
.eh_frame_hdr:00000000000070FE                 db 0FFh
.eh_frame_hdr:00000000000070FF                 db 0FFh
.eh_frame_hdr:0000000000007100                 db  58h ; X
.eh_frame_hdr:0000000000007101                 db  0Dh
.eh_frame_hdr:0000000000007102                 db    0
.eh_frame_hdr:0000000000007103                 db    0
.eh_frame_hdr:0000000000007104                 db 0C8h
.eh_frame_hdr:0000000000007105                 db 0EBh
.eh_frame_hdr:0000000000007106                 db 0FFh
.eh_frame_hdr:0000000000007107                 db 0FFh
.eh_frame_hdr:0000000000007108                 db  78h ; x
.eh_frame_hdr:0000000000007109                 db  0Dh
.eh_frame_hdr:000000000000710A                 db    0
.eh_frame_hdr:000000000000710B                 db    0
.eh_frame_hdr:000000000000710C                 db  18h
.eh_frame_hdr:000000000000710D                 db 0ECh
.eh_frame_hdr:000000000000710E                 db 0FFh
.eh_frame_hdr:000000000000710F                 db 0FFh
.eh_frame_hdr:0000000000007110                 db  90h
.eh_frame_hdr:0000000000007111                 db  0Dh
.eh_frame_hdr:0000000000007112                 db    0
.eh_frame_hdr:0000000000007113                 db    0
.eh_frame_hdr:0000000000007114                 db  58h ; X
.eh_frame_hdr:0000000000007115                 db 0ECh
.eh_frame_hdr:0000000000007116                 db 0FFh
.eh_frame_hdr:0000000000007117                 db 0FFh
.eh_frame_hdr:0000000000007118                 db 0B0h
.eh_frame_hdr:0000000000007119                 db  0Dh
.eh_frame_hdr:000000000000711A                 db    0
.eh_frame_hdr:000000000000711B                 db    0
.eh_frame_hdr:000000000000711C                 db 0A8h
.eh_frame_hdr:000000000000711D                 db 0ECh
.eh_frame_hdr:000000000000711E                 db 0FFh
.eh_frame_hdr:000000000000711F                 db 0FFh
.eh_frame_hdr:0000000000007120                 db 0C8h
.eh_frame_hdr:0000000000007121                 db  0Dh
.eh_frame_hdr:0000000000007122                 db    0
.eh_frame_hdr:0000000000007123                 db    0
.eh_frame_hdr:0000000000007124                 db 0E8h
.eh_frame_hdr:0000000000007125                 db 0EEh
.eh_frame_hdr:0000000000007126                 db 0FFh
.eh_frame_hdr:0000000000007127                 db 0FFh
.eh_frame_hdr:0000000000007128                 db  18h
.eh_frame_hdr:0000000000007129                 db  0Eh
.eh_frame_hdr:000000000000712A                 db    0
.eh_frame_hdr:000000000000712B                 db    0
.eh_frame_hdr:000000000000712C                 db  68h ; h
.eh_frame_hdr:000000000000712D                 db 0EFh
.eh_frame_hdr:000000000000712E                 db 0FFh
.eh_frame_hdr:000000000000712F                 db 0FFh
.eh_frame_hdr:0000000000007130                 db  50h ; P
.eh_frame_hdr:0000000000007131                 db  0Eh
.eh_frame_hdr:0000000000007132                 db    0
.eh_frame_hdr:0000000000007133                 db    0
.eh_frame_hdr:0000000000007134                 db 0A8h
.eh_frame_hdr:0000000000007135                 db 0EFh
.eh_frame_hdr:0000000000007136                 db 0FFh
.eh_frame_hdr:0000000000007137                 db 0FFh
.eh_frame_hdr:0000000000007138                 db  70h ; p
.eh_frame_hdr:0000000000007139                 db  0Eh
.eh_frame_hdr:000000000000713A                 db    0
.eh_frame_hdr:000000000000713B                 db    0
.eh_frame_hdr:000000000000713C                 db    8
.eh_frame_hdr:000000000000713D                 db 0F0h
.eh_frame_hdr:000000000000713E                 db 0FFh
.eh_frame_hdr:000000000000713F                 db 0FFh
.eh_frame_hdr:0000000000007140                 db 0A0h
.eh_frame_hdr:0000000000007141                 db  0Eh
.eh_frame_hdr:0000000000007142                 db    0
.eh_frame_hdr:0000000000007143                 db    0
.eh_frame_hdr:0000000000007144                 db  78h ; x
.eh_frame_hdr:0000000000007145                 db 0F0h
.eh_frame_hdr:0000000000007146                 db 0FFh
.eh_frame_hdr:0000000000007147                 db 0FFh
.eh_frame_hdr:0000000000007148                 db 0E8h
.eh_frame_hdr:0000000000007149                 db  0Eh
.eh_frame_hdr:000000000000714A                 db    0
.eh_frame_hdr:000000000000714B                 db    0
.eh_frame_hdr:000000000000714C                 db  88h
.eh_frame_hdr:000000000000714D                 db 0F0h
.eh_frame_hdr:000000000000714E                 db 0FFh
.eh_frame_hdr:000000000000714F                 db 0FFh
.eh_frame_hdr:0000000000007150                 db    0
.eh_frame_hdr:0000000000007151                 db  0Fh
.eh_frame_hdr:0000000000007152                 db    0
.eh_frame_hdr:0000000000007153                 db    0
.eh_frame_hdr:0000000000007153 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000007153
LOAD:0000000000007154 ; ===========================================================================
LOAD:0000000000007154
LOAD:0000000000007154 ; Segment type: Pure code
LOAD:0000000000007154 ; Segment permissions: Read/Execute
LOAD:0000000000007154 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007154                 assume cs:LOAD
LOAD:0000000000007154                 ;org 7154h
LOAD:0000000000007154                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007154                 align 8
LOAD:0000000000007154 LOAD            ends
LOAD:0000000000007154
.eh_frame:0000000000007158 ; ===========================================================================
.eh_frame:0000000000007158
.eh_frame:0000000000007158 ; Segment type: Pure data
.eh_frame:0000000000007158 ; Segment permissions: Read
.eh_frame:0000000000007158 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000007158                 assume cs:_eh_frame
.eh_frame:0000000000007158                 ;org 7158h
.eh_frame:0000000000007158                 db  14h
.eh_frame:0000000000007159                 db    0
.eh_frame:000000000000715A                 db    0
.eh_frame:000000000000715B                 db    0
.eh_frame:000000000000715C                 db    0
.eh_frame:000000000000715D                 db    0
.eh_frame:000000000000715E                 db    0
.eh_frame:000000000000715F                 db    0
.eh_frame:0000000000007160                 db    1
.eh_frame:0000000000007161                 db  7Ah ; z
.eh_frame:0000000000007162                 db  52h ; R
.eh_frame:0000000000007163                 db    0
.eh_frame:0000000000007164                 db    1
.eh_frame:0000000000007165                 db  78h ; x
.eh_frame:0000000000007166                 db  10h
.eh_frame:0000000000007167                 db    1
.eh_frame:0000000000007168                 db  1Bh
.eh_frame:0000000000007169                 db  0Ch
.eh_frame:000000000000716A                 db    7
.eh_frame:000000000000716B                 db    8
.eh_frame:000000000000716C                 db  90h
.eh_frame:000000000000716D                 db    1
.eh_frame:000000000000716E                 db    7
.eh_frame:000000000000716F                 db  10h
.eh_frame:0000000000007170                 db  14h
.eh_frame:0000000000007171                 db    0
.eh_frame:0000000000007172                 db    0
.eh_frame:0000000000007173                 db    0
.eh_frame:0000000000007174                 db  1Ch
.eh_frame:0000000000007175                 db    0
.eh_frame:0000000000007176                 db    0
.eh_frame:0000000000007177                 db    0
.eh_frame:0000000000007178                 db 0A8h
.eh_frame:0000000000007179                 db 0B0h
.eh_frame:000000000000717A                 db 0FFh
.eh_frame:000000000000717B                 db 0FFh
.eh_frame:000000000000717C                 db  2Bh ; +
.eh_frame:000000000000717D                 db    0
.eh_frame:000000000000717E                 db    0
.eh_frame:000000000000717F                 db    0
.eh_frame:0000000000007180                 db    0
.eh_frame:0000000000007181                 db    0
.eh_frame:0000000000007182                 db    0
.eh_frame:0000000000007183                 db    0
.eh_frame:0000000000007184                 db    0
.eh_frame:0000000000007185                 db    0
.eh_frame:0000000000007186                 db    0
.eh_frame:0000000000007187                 db    0
.eh_frame:0000000000007188                 db  14h
.eh_frame:0000000000007189                 db    0
.eh_frame:000000000000718A                 db    0
.eh_frame:000000000000718B                 db    0
.eh_frame:000000000000718C                 db    0
.eh_frame:000000000000718D                 db    0
.eh_frame:000000000000718E                 db    0
.eh_frame:000000000000718F                 db    0
.eh_frame:0000000000007190                 db    1
.eh_frame:0000000000007191                 db  7Ah ; z
.eh_frame:0000000000007192                 db  52h ; R
.eh_frame:0000000000007193                 db    0
.eh_frame:0000000000007194                 db    1
.eh_frame:0000000000007195                 db  78h ; x
.eh_frame:0000000000007196                 db  10h
.eh_frame:0000000000007197                 db    1
.eh_frame:0000000000007198                 db  1Bh
.eh_frame:0000000000007199                 db  0Ch
.eh_frame:000000000000719A                 db    7
.eh_frame:000000000000719B                 db    8
.eh_frame:000000000000719C                 db  90h
.eh_frame:000000000000719D                 db    1
.eh_frame:000000000000719E                 db    0
.eh_frame:000000000000719F                 db    0
.eh_frame:00000000000071A0                 db  24h ; $
.eh_frame:00000000000071A1                 db    0
.eh_frame:00000000000071A2                 db    0
.eh_frame:00000000000071A3                 db    0
.eh_frame:00000000000071A4                 db  1Ch
.eh_frame:00000000000071A5                 db    0
.eh_frame:00000000000071A6                 db    0
.eh_frame:00000000000071A7                 db    0
.eh_frame:00000000000071A8                 db  18h
.eh_frame:00000000000071A9                 db 0A5h
.eh_frame:00000000000071AA                 db 0FFh
.eh_frame:00000000000071AB                 db 0FFh
.eh_frame:00000000000071AC                 db 0D0h
.eh_frame:00000000000071AD                 db    3
.eh_frame:00000000000071AE                 db    0
.eh_frame:00000000000071AF                 db    0
.eh_frame:00000000000071B0                 db    0
.eh_frame:00000000000071B1                 db  0Eh
.eh_frame:00000000000071B2                 db  10h
.eh_frame:00000000000071B3                 db  46h ; F
.eh_frame:00000000000071B4                 db  0Eh
.eh_frame:00000000000071B5                 db  18h
.eh_frame:00000000000071B6                 db  4Ah ; J
.eh_frame:00000000000071B7                 db  0Fh
.eh_frame:00000000000071B8                 db  0Bh
.eh_frame:00000000000071B9                 db  77h ; w
.eh_frame:00000000000071BA                 db    8
.eh_frame:00000000000071BB                 db  80h
.eh_frame:00000000000071BC                 db    0
.eh_frame:00000000000071BD                 db  3Fh ; ?
.eh_frame:00000000000071BE                 db  1Ah
.eh_frame:00000000000071BF                 db  3Bh ; ;
.eh_frame:00000000000071C0                 db  2Ah ; *
.eh_frame:00000000000071C1                 db  33h ; 3
.eh_frame:00000000000071C2                 db  24h ; $
.eh_frame:00000000000071C3                 db  22h ; "
.eh_frame:00000000000071C4                 db    0
.eh_frame:00000000000071C5                 db    0
.eh_frame:00000000000071C6                 db    0
.eh_frame:00000000000071C7                 db    0
.eh_frame:00000000000071C8                 db  14h
.eh_frame:00000000000071C9                 db    0
.eh_frame:00000000000071CA                 db    0
.eh_frame:00000000000071CB                 db    0
.eh_frame:00000000000071CC                 db  44h ; D
.eh_frame:00000000000071CD                 db    0
.eh_frame:00000000000071CE                 db    0
.eh_frame:00000000000071CF                 db    0
.eh_frame:00000000000071D0                 db 0C0h
.eh_frame:00000000000071D1                 db 0A8h
.eh_frame:00000000000071D2                 db 0FFh
.eh_frame:00000000000071D3                 db 0FFh
.eh_frame:00000000000071D4                 db    8
.eh_frame:00000000000071D5                 db    0
.eh_frame:00000000000071D6                 db    0
.eh_frame:00000000000071D7                 db    0
.eh_frame:00000000000071D8                 db    0
.eh_frame:00000000000071D9                 db    0
.eh_frame:00000000000071DA                 db    0
.eh_frame:00000000000071DB                 db    0
.eh_frame:00000000000071DC                 db    0
.eh_frame:00000000000071DD                 db    0
.eh_frame:00000000000071DE                 db    0
.eh_frame:00000000000071DF                 db    0
.eh_frame:00000000000071E0                 db  4Ch ; L
.eh_frame:00000000000071E1                 db    0
.eh_frame:00000000000071E2                 db    0
.eh_frame:00000000000071E3                 db    0
.eh_frame:00000000000071E4                 db  5Ch ; \
.eh_frame:00000000000071E5                 db    0
.eh_frame:00000000000071E6                 db    0
.eh_frame:00000000000071E7                 db    0
.eh_frame:00000000000071E8                 db  48h ; H
.eh_frame:00000000000071E9                 db 0B1h
.eh_frame:00000000000071EA                 db 0FFh
.eh_frame:00000000000071EB                 db 0FFh
.eh_frame:00000000000071EC                 db  70h ; p
.eh_frame:00000000000071ED                 db    2
.eh_frame:00000000000071EE                 db    0
.eh_frame:00000000000071EF                 db    0
.eh_frame:00000000000071F0                 db    0
.eh_frame:00000000000071F1                 db  42h ; B
.eh_frame:00000000000071F2                 db  0Eh
.eh_frame:00000000000071F3                 db  10h
.eh_frame:00000000000071F4                 db  8Fh
.eh_frame:00000000000071F5                 db    2
.eh_frame:00000000000071F6                 db  42h ; B
.eh_frame:00000000000071F7                 db  0Eh
.eh_frame:00000000000071F8                 db  18h
.eh_frame:00000000000071F9                 db  8Eh
.eh_frame:00000000000071FA                 db    3
.eh_frame:00000000000071FB                 db  42h ; B
.eh_frame:00000000000071FC                 db  0Eh
.eh_frame:00000000000071FD                 db  20h
.eh_frame:00000000000071FE                 db  8Dh
.eh_frame:00000000000071FF                 db    4
.eh_frame:0000000000007200                 db  42h ; B
.eh_frame:0000000000007201                 db  0Eh
.eh_frame:0000000000007202                 db  28h ; (
.eh_frame:0000000000007203                 db  8Ch
.eh_frame:0000000000007204                 db    5
.eh_frame:0000000000007205                 db  41h ; A
.eh_frame:0000000000007206                 db  0Eh
.eh_frame:0000000000007207                 db  30h ; 0
.eh_frame:0000000000007208                 db  86h
.eh_frame:0000000000007209                 db    6
.eh_frame:000000000000720A                 db  41h ; A
.eh_frame:000000000000720B                 db  0Eh
.eh_frame:000000000000720C                 db  38h ; 8
.eh_frame:000000000000720D                 db  83h
.eh_frame:000000000000720E                 db    7
.eh_frame:000000000000720F                 db  44h ; D
.eh_frame:0000000000007210                 db  0Eh
.eh_frame:0000000000007211                 db 0A0h
.eh_frame:0000000000007212                 db    1
.eh_frame:0000000000007213                 db    3
.eh_frame:0000000000007214                 db  53h ; S
.eh_frame:0000000000007215                 db    1
.eh_frame:0000000000007216                 db  0Ah
.eh_frame:0000000000007217                 db  0Eh
.eh_frame:0000000000007218                 db  38h ; 8
.eh_frame:0000000000007219                 db  41h ; A
.eh_frame:000000000000721A                 db  0Eh
.eh_frame:000000000000721B                 db  30h ; 0
.eh_frame:000000000000721C                 db  41h ; A
.eh_frame:000000000000721D                 db  0Eh
.eh_frame:000000000000721E                 db  28h ; (
.eh_frame:000000000000721F                 db  42h ; B
.eh_frame:0000000000007220                 db  0Eh
.eh_frame:0000000000007221                 db  20h
.eh_frame:0000000000007222                 db  42h ; B
.eh_frame:0000000000007223                 db  0Eh
.eh_frame:0000000000007224                 db  18h
.eh_frame:0000000000007225                 db  42h ; B
.eh_frame:0000000000007226                 db  0Eh
.eh_frame:0000000000007227                 db  10h
.eh_frame:0000000000007228                 db  42h ; B
.eh_frame:0000000000007229                 db  0Eh
.eh_frame:000000000000722A                 db    8
.eh_frame:000000000000722B                 db  45h ; E
.eh_frame:000000000000722C                 db  0Bh
.eh_frame:000000000000722D                 db    0
.eh_frame:000000000000722E                 db    0
.eh_frame:000000000000722F                 db    0
.eh_frame:0000000000007230                 db  28h ; (
.eh_frame:0000000000007231                 db    0
.eh_frame:0000000000007232                 db    0
.eh_frame:0000000000007233                 db    0
.eh_frame:0000000000007234                 db 0ACh
.eh_frame:0000000000007235                 db    0
.eh_frame:0000000000007236                 db    0
.eh_frame:0000000000007237                 db    0
.eh_frame:0000000000007238                 db  68h ; h
.eh_frame:0000000000007239                 db 0B3h
.eh_frame:000000000000723A                 db 0FFh
.eh_frame:000000000000723B                 db 0FFh
.eh_frame:000000000000723C                 db 0EAh
.eh_frame:000000000000723D                 db    3
.eh_frame:000000000000723E                 db    0
.eh_frame:000000000000723F                 db    0
.eh_frame:0000000000007240                 db    0
.eh_frame:0000000000007241                 db  42h ; B
.eh_frame:0000000000007242                 db  0Eh
.eh_frame:0000000000007243                 db  10h
.eh_frame:0000000000007244                 db  8Dh
.eh_frame:0000000000007245                 db    2
.eh_frame:0000000000007246                 db  42h ; B
.eh_frame:0000000000007247                 db  0Eh
.eh_frame:0000000000007248                 db  18h
.eh_frame:0000000000007249                 db  8Ch
.eh_frame:000000000000724A                 db    3
.eh_frame:000000000000724B                 db  46h ; F
.eh_frame:000000000000724C                 db  0Eh
.eh_frame:000000000000724D                 db  20h
.eh_frame:000000000000724E                 db  86h
.eh_frame:000000000000724F                 db    4
.eh_frame:0000000000007250                 db  41h ; A
.eh_frame:0000000000007251                 db  0Eh
.eh_frame:0000000000007252                 db  28h ; (
.eh_frame:0000000000007253                 db  83h
.eh_frame:0000000000007254                 db    5
.eh_frame:0000000000007255                 db  49h ; I
.eh_frame:0000000000007256                 db  0Eh
.eh_frame:0000000000007257                 db 0B0h
.eh_frame:0000000000007258                 db    1
.eh_frame:0000000000007259                 db    0
.eh_frame:000000000000725A                 db    0
.eh_frame:000000000000725B                 db    0
.eh_frame:000000000000725C                 db  50h ; P
.eh_frame:000000000000725D                 db    0
.eh_frame:000000000000725E                 db    0
.eh_frame:000000000000725F                 db    0
.eh_frame:0000000000007260                 db 0D8h
.eh_frame:0000000000007261                 db    0
.eh_frame:0000000000007262                 db    0
.eh_frame:0000000000007263                 db    0
.eh_frame:0000000000007264                 db  3Ch ; <
.eh_frame:0000000000007265                 db 0A8h
.eh_frame:0000000000007266                 db 0FFh
.eh_frame:0000000000007267                 db 0FFh
.eh_frame:0000000000007268                 db  74h ; t
.eh_frame:0000000000007269                 db    7
.eh_frame:000000000000726A                 db    0
.eh_frame:000000000000726B                 db    0
.eh_frame:000000000000726C                 db    0
.eh_frame:000000000000726D                 db  42h ; B
.eh_frame:000000000000726E                 db  0Eh
.eh_frame:000000000000726F                 db  10h
.eh_frame:0000000000007270                 db  8Fh
.eh_frame:0000000000007271                 db    2
.eh_frame:0000000000007272                 db  42h ; B
.eh_frame:0000000000007273                 db  0Eh
.eh_frame:0000000000007274                 db  18h
.eh_frame:0000000000007275                 db  8Eh
.eh_frame:0000000000007276                 db    3
.eh_frame:0000000000007277                 db  45h ; E
.eh_frame:0000000000007278                 db  0Eh
.eh_frame:0000000000007279                 db  20h
.eh_frame:000000000000727A                 db  8Dh
.eh_frame:000000000000727B                 db    4
.eh_frame:000000000000727C                 db  42h ; B
.eh_frame:000000000000727D                 db  0Eh
.eh_frame:000000000000727E                 db  28h ; (
.eh_frame:000000000000727F                 db  8Ch
.eh_frame:0000000000007280                 db    5
.eh_frame:0000000000007281                 db  44h ; D
.eh_frame:0000000000007282                 db  0Eh
.eh_frame:0000000000007283                 db  30h ; 0
.eh_frame:0000000000007284                 db  86h
.eh_frame:0000000000007285                 db    6
.eh_frame:0000000000007286                 db  41h ; A
.eh_frame:0000000000007287                 db  0Eh
.eh_frame:0000000000007288                 db  38h ; 8
.eh_frame:0000000000007289                 db  83h
.eh_frame:000000000000728A                 db    7
.eh_frame:000000000000728B                 db  4Ch ; L
.eh_frame:000000000000728C                 db  0Eh
.eh_frame:000000000000728D                 db  80h
.eh_frame:000000000000728E                 db    1
.eh_frame:000000000000728F                 db    3
.eh_frame:0000000000007290                 db 0B4h
.eh_frame:0000000000007291                 db    3
.eh_frame:0000000000007292                 db  0Ah
.eh_frame:0000000000007293                 db  0Eh
.eh_frame:0000000000007294                 db  38h ; 8
.eh_frame:0000000000007295                 db  41h ; A
.eh_frame:0000000000007296                 db  0Eh
.eh_frame:0000000000007297                 db  30h ; 0
.eh_frame:0000000000007298                 db  41h ; A
.eh_frame:0000000000007299                 db  0Eh
.eh_frame:000000000000729A                 db  28h ; (
.eh_frame:000000000000729B                 db  42h ; B
.eh_frame:000000000000729C                 db  0Eh
.eh_frame:000000000000729D                 db  20h
.eh_frame:000000000000729E                 db  42h ; B
.eh_frame:000000000000729F                 db  0Eh
.eh_frame:00000000000072A0                 db  18h
.eh_frame:00000000000072A1                 db  42h ; B
.eh_frame:00000000000072A2                 db  0Eh
.eh_frame:00000000000072A3                 db  10h
.eh_frame:00000000000072A4                 db  42h ; B
.eh_frame:00000000000072A5                 db  0Eh
.eh_frame:00000000000072A6                 db    8
.eh_frame:00000000000072A7                 db  41h ; A
.eh_frame:00000000000072A8                 db  0Bh
.eh_frame:00000000000072A9                 db    0
.eh_frame:00000000000072AA                 db    0
.eh_frame:00000000000072AB                 db    0
.eh_frame:00000000000072AC                 db    0
.eh_frame:00000000000072AD                 db    0
.eh_frame:00000000000072AE                 db    0
.eh_frame:00000000000072AF                 db    0
.eh_frame:00000000000072B0                 db  10h
.eh_frame:00000000000072B1                 db    0
.eh_frame:00000000000072B2                 db    0
.eh_frame:00000000000072B3                 db    0
.eh_frame:00000000000072B4                 db  2Ch ; ,
.eh_frame:00000000000072B5                 db    1
.eh_frame:00000000000072B6                 db    0
.eh_frame:00000000000072B7                 db    0
.eh_frame:00000000000072B8                 db 0D8h
.eh_frame:00000000000072B9                 db 0B6h
.eh_frame:00000000000072BA                 db 0FFh
.eh_frame:00000000000072BB                 db 0FFh
.eh_frame:00000000000072BC                 db    8
.eh_frame:00000000000072BD                 db    0
.eh_frame:00000000000072BE                 db    0
.eh_frame:00000000000072BF                 db    0
.eh_frame:00000000000072C0                 db    0
.eh_frame:00000000000072C1                 db    0
.eh_frame:00000000000072C2                 db    0
.eh_frame:00000000000072C3                 db    0
.eh_frame:00000000000072C4                 db  10h
.eh_frame:00000000000072C5                 db    0
.eh_frame:00000000000072C6                 db    0
.eh_frame:00000000000072C7                 db    0
.eh_frame:00000000000072C8                 db  40h ; @
.eh_frame:00000000000072C9                 db    1
.eh_frame:00000000000072CA                 db    0
.eh_frame:00000000000072CB                 db    0
.eh_frame:00000000000072CC                 db 0D4h
.eh_frame:00000000000072CD                 db 0B6h
.eh_frame:00000000000072CE                 db 0FFh
.eh_frame:00000000000072CF                 db 0FFh
.eh_frame:00000000000072D0                 db    8
.eh_frame:00000000000072D1                 db    0
.eh_frame:00000000000072D2                 db    0
.eh_frame:00000000000072D3                 db    0
.eh_frame:00000000000072D4                 db    0
.eh_frame:00000000000072D5                 db    0
.eh_frame:00000000000072D6                 db    0
.eh_frame:00000000000072D7                 db    0
.eh_frame:00000000000072D8                 db  2Ch ; ,
.eh_frame:00000000000072D9                 db    0
.eh_frame:00000000000072DA                 db    0
.eh_frame:00000000000072DB                 db    0
.eh_frame:00000000000072DC                 db  54h ; T
.eh_frame:00000000000072DD                 db    1
.eh_frame:00000000000072DE                 db    0
.eh_frame:00000000000072DF                 db    0
.eh_frame:00000000000072E0                 db 0D0h
.eh_frame:00000000000072E1                 db 0B6h
.eh_frame:00000000000072E2                 db 0FFh
.eh_frame:00000000000072E3                 db 0FFh
.eh_frame:00000000000072E4                 db 0A4h
.eh_frame:00000000000072E5                 db    0
.eh_frame:00000000000072E6                 db    0
.eh_frame:00000000000072E7                 db    0
.eh_frame:00000000000072E8                 db    0
.eh_frame:00000000000072E9                 db  41h ; A
.eh_frame:00000000000072EA                 db  0Eh
.eh_frame:00000000000072EB                 db  10h
.eh_frame:00000000000072EC                 db  86h
.eh_frame:00000000000072ED                 db    2
.eh_frame:00000000000072EE                 db  41h ; A
.eh_frame:00000000000072EF                 db  0Eh
.eh_frame:00000000000072F0                 db  18h
.eh_frame:00000000000072F1                 db  83h
.eh_frame:00000000000072F2                 db    3
.eh_frame:00000000000072F3                 db  44h ; D
.eh_frame:00000000000072F4                 db  0Eh
.eh_frame:00000000000072F5                 db  20h
.eh_frame:00000000000072F6                 db  7Ah ; z
.eh_frame:00000000000072F7                 db  0Ah
.eh_frame:00000000000072F8                 db  0Eh
.eh_frame:00000000000072F9                 db  18h
.eh_frame:00000000000072FA                 db  41h ; A
.eh_frame:00000000000072FB                 db  0Eh
.eh_frame:00000000000072FC                 db  10h
.eh_frame:00000000000072FD                 db  41h ; A
.eh_frame:00000000000072FE                 db  0Eh
.eh_frame:00000000000072FF                 db    8
.eh_frame:0000000000007300                 db  41h ; A
.eh_frame:0000000000007301                 db  0Bh
.eh_frame:0000000000007302                 db    0
.eh_frame:0000000000007303                 db    0
.eh_frame:0000000000007304                 db    0
.eh_frame:0000000000007305                 db    0
.eh_frame:0000000000007306                 db    0
.eh_frame:0000000000007307                 db    0
.eh_frame:0000000000007308                 db  1Ch
.eh_frame:0000000000007309                 db    0
.eh_frame:000000000000730A                 db    0
.eh_frame:000000000000730B                 db    0
.eh_frame:000000000000730C                 db  84h
.eh_frame:000000000000730D                 db    1
.eh_frame:000000000000730E                 db    0
.eh_frame:000000000000730F                 db    0
.eh_frame:0000000000007310                 db  50h ; P
.eh_frame:0000000000007311                 db 0B7h
.eh_frame:0000000000007312                 db 0FFh
.eh_frame:0000000000007313                 db 0FFh
.eh_frame:0000000000007314                 db  9Fh
.eh_frame:0000000000007315                 db    0
.eh_frame:0000000000007316                 db    0
.eh_frame:0000000000007317                 db    0
.eh_frame:0000000000007318                 db    0
.eh_frame:0000000000007319                 db  44h ; D
.eh_frame:000000000000731A                 db  0Eh
.eh_frame:000000000000731B                 db  10h
.eh_frame:000000000000731C                 db  83h
.eh_frame:000000000000731D                 db    2
.eh_frame:000000000000731E                 db    2
.eh_frame:000000000000731F                 db  78h ; x
.eh_frame:0000000000007320                 db  0Ah
.eh_frame:0000000000007321                 db  0Eh
.eh_frame:0000000000007322                 db    8
.eh_frame:0000000000007323                 db  41h ; A
.eh_frame:0000000000007324                 db  0Bh
.eh_frame:0000000000007325 unk_7325        db    0                 ; DATA XREF: .rodata:format↑o
.eh_frame:0000000000007326                 db    0
.eh_frame:0000000000007327                 db    0
.eh_frame:0000000000007328                 db  40h ; @
.eh_frame:0000000000007329                 db    0
.eh_frame:000000000000732A                 db    0
.eh_frame:000000000000732B                 db    0
.eh_frame:000000000000732C                 db 0A4h
.eh_frame:000000000000732D                 db    1
.eh_frame:000000000000732E                 db    0
.eh_frame:000000000000732F                 db    0
.eh_frame:0000000000007330                 db 0D0h
.eh_frame:0000000000007331                 db 0B7h
.eh_frame:0000000000007332                 db 0FFh
.eh_frame:0000000000007333                 db 0FFh
.eh_frame:0000000000007334                 db 0E7h
.eh_frame:0000000000007335                 db    0
.eh_frame:0000000000007336                 db    0
.eh_frame:0000000000007337                 db    0
.eh_frame:0000000000007338                 db    0
.eh_frame:0000000000007339                 db  41h ; A
.eh_frame:000000000000733A                 db  0Eh
.eh_frame:000000000000733B                 db  10h
.eh_frame:000000000000733C                 db  86h
.eh_frame:000000000000733D                 db    2
.eh_frame:000000000000733E                 db  41h ; A
.eh_frame:000000000000733F                 db  0Eh
.eh_frame:0000000000007340                 db  18h
.eh_frame:0000000000007341                 db  83h
.eh_frame:0000000000007342                 db    3
.eh_frame:0000000000007343                 db  49h ; I
.eh_frame:0000000000007344                 db  0Eh
.eh_frame:0000000000007345                 db  20h
.eh_frame:0000000000007346                 db  6Eh ; n
.eh_frame:0000000000007347                 db  0Ah
.eh_frame:0000000000007348                 db  0Eh
.eh_frame:0000000000007349                 db  18h
.eh_frame:000000000000734A                 db  41h ; A
.eh_frame:000000000000734B                 db  0Eh
.eh_frame:000000000000734C                 db  10h
.eh_frame:000000000000734D                 db  41h ; A
.eh_frame:000000000000734E                 db  0Eh
.eh_frame:000000000000734F                 db    8
.eh_frame:0000000000007350                 db  45h ; E
.eh_frame:0000000000007351                 db  0Bh
.eh_frame:0000000000007352                 db    2
.eh_frame:0000000000007353                 db  4Ah ; J
.eh_frame:0000000000007354                 db  0Ah
.eh_frame:0000000000007355                 db  0Eh
.eh_frame:0000000000007356                 db  18h
.eh_frame:0000000000007357                 db  41h ; A
.eh_frame:0000000000007358                 db  0Eh
.eh_frame:0000000000007359                 db  10h
.eh_frame:000000000000735A                 db  41h ; A
.eh_frame:000000000000735B                 db  0Eh
.eh_frame:000000000000735C                 db    8
.eh_frame:000000000000735D                 db  44h ; D
.eh_frame:000000000000735E                 db  0Bh
.eh_frame:000000000000735F                 db    2
.eh_frame:0000000000007360                 db  54h ; T
.eh_frame:0000000000007361                 db  0Eh
.eh_frame:0000000000007362                 db  18h
.eh_frame:0000000000007363                 db  41h ; A
.eh_frame:0000000000007364                 db  0Eh
.eh_frame:0000000000007365                 db  10h
.eh_frame:0000000000007366                 db  41h ; A
.eh_frame:0000000000007367                 db  0Eh
.eh_frame:0000000000007368                 db    8
.eh_frame:0000000000007369                 db    0
.eh_frame:000000000000736A                 db    0
.eh_frame:000000000000736B                 db    0
.eh_frame:000000000000736C                 db  74h ; t
.eh_frame:000000000000736D                 db    0
.eh_frame:000000000000736E                 db    0
.eh_frame:000000000000736F                 db    0
.eh_frame:0000000000007370                 db 0E8h
.eh_frame:0000000000007371                 db    1
.eh_frame:0000000000007372                 db    0
.eh_frame:0000000000007373                 db    0
.eh_frame:0000000000007374                 db  7Ch ; |
.eh_frame:0000000000007375                 db 0B8h
.eh_frame:0000000000007376                 db 0FFh
.eh_frame:0000000000007377                 db 0FFh
.eh_frame:0000000000007378                 db  34h ; 4
.eh_frame:0000000000007379                 db  12h
.eh_frame:000000000000737A                 db    0
.eh_frame:000000000000737B                 db    0
.eh_frame:000000000000737C                 db    0
.eh_frame:000000000000737D                 db  42h ; B
.eh_frame:000000000000737E                 db  0Eh
.eh_frame:000000000000737F                 db  10h
.eh_frame:0000000000007380                 db  8Fh
.eh_frame:0000000000007381                 db    2
.eh_frame:0000000000007382                 db  42h ; B
.eh_frame:0000000000007383                 db  0Eh
.eh_frame:0000000000007384                 db  18h
.eh_frame:0000000000007385                 db  8Eh
.eh_frame:0000000000007386                 db    3
.eh_frame:0000000000007387                 db  45h ; E
.eh_frame:0000000000007388                 db  0Eh
.eh_frame:0000000000007389                 db  20h
.eh_frame:000000000000738A                 db  8Dh
.eh_frame:000000000000738B                 db    4
.eh_frame:000000000000738C                 db  42h ; B
.eh_frame:000000000000738D                 db  0Eh
.eh_frame:000000000000738E                 db  28h ; (
.eh_frame:000000000000738F                 db  8Ch
.eh_frame:0000000000007390                 db    5
.eh_frame:0000000000007391                 db  44h ; D
.eh_frame:0000000000007392                 db  0Eh
.eh_frame:0000000000007393                 db  30h ; 0
.eh_frame:0000000000007394                 db  86h
.eh_frame:0000000000007395                 db    6
.eh_frame:0000000000007396                 db  41h ; A
.eh_frame:0000000000007397                 db  0Eh
.eh_frame:0000000000007398                 db  38h ; 8
.eh_frame:0000000000007399                 db  83h
.eh_frame:000000000000739A                 db    7
.eh_frame:000000000000739B                 db  53h ; S
.eh_frame:000000000000739C                 db  0Eh
.eh_frame:000000000000739D                 db 0F0h
.eh_frame:000000000000739E                 db    1
.eh_frame:000000000000739F                 db    3
.eh_frame:00000000000073A0                 db  81h
.eh_frame:00000000000073A1                 db  0Bh
.eh_frame:00000000000073A2                 db  0Eh
.eh_frame:00000000000073A3                 db 0F8h
.eh_frame:00000000000073A4                 db    1
.eh_frame:00000000000073A5                 db  4Ah ; J
.eh_frame:00000000000073A6                 db  0Eh
.eh_frame:00000000000073A7                 db  80h
.eh_frame:00000000000073A8                 db    2
.eh_frame:00000000000073A9                 db  44h ; D
.eh_frame:00000000000073AA                 db  0Eh
.eh_frame:00000000000073AB                 db  88h
.eh_frame:00000000000073AC                 db    2
.eh_frame:00000000000073AD                 db  45h ; E
.eh_frame:00000000000073AE                 db  0Eh
.eh_frame:00000000000073AF                 db  90h
.eh_frame:00000000000073B0                 db    2
.eh_frame:00000000000073B1                 db  5Fh ; _
.eh_frame:00000000000073B2                 db  0Eh
.eh_frame:00000000000073B3                 db 0F0h
.eh_frame:00000000000073B4                 db    1
.eh_frame:00000000000073B5                 db  64h ; d
.eh_frame:00000000000073B6                 db  0Ah
.eh_frame:00000000000073B7                 db  0Eh
.eh_frame:00000000000073B8                 db  38h ; 8
.eh_frame:00000000000073B9                 db  41h ; A
.eh_frame:00000000000073BA                 db  0Eh
.eh_frame:00000000000073BB                 db  30h ; 0
.eh_frame:00000000000073BC                 db  41h ; A
.eh_frame:00000000000073BD                 db  0Eh
.eh_frame:00000000000073BE                 db  28h ; (
.eh_frame:00000000000073BF                 db  42h ; B
.eh_frame:00000000000073C0                 db  0Eh
.eh_frame:00000000000073C1                 db  20h
.eh_frame:00000000000073C2                 db  42h ; B
.eh_frame:00000000000073C3                 db  0Eh
.eh_frame:00000000000073C4                 db  18h
.eh_frame:00000000000073C5                 db  42h ; B
.eh_frame:00000000000073C6                 db  0Eh
.eh_frame:00000000000073C7                 db  10h
.eh_frame:00000000000073C8                 db  42h ; B
.eh_frame:00000000000073C9                 db  0Eh
.eh_frame:00000000000073CA                 db    8
.eh_frame:00000000000073CB                 db  44h ; D
.eh_frame:00000000000073CC                 db  0Bh
.eh_frame:00000000000073CD                 db    3
.eh_frame:00000000000073CE                 db  99h
.eh_frame:00000000000073CF                 db    5
.eh_frame:00000000000073D0                 db  0Eh
.eh_frame:00000000000073D1                 db 0F8h
.eh_frame:00000000000073D2                 db    1
.eh_frame:00000000000073D3                 db  4Dh ; M
.eh_frame:00000000000073D4                 db  0Eh
.eh_frame:00000000000073D5                 db  80h
.eh_frame:00000000000073D6                 db    2
.eh_frame:00000000000073D7                 db  44h ; D
.eh_frame:00000000000073D8                 db  0Eh
.eh_frame:00000000000073D9                 db  88h
.eh_frame:00000000000073DA                 db    2
.eh_frame:00000000000073DB                 db  47h ; G
.eh_frame:00000000000073DC                 db  0Eh
.eh_frame:00000000000073DD                 db  90h
.eh_frame:00000000000073DE                 db    2
.eh_frame:00000000000073DF                 db  5Bh ; [
.eh_frame:00000000000073E0                 db  0Eh
.eh_frame:00000000000073E1                 db 0F0h
.eh_frame:00000000000073E2                 db    1
.eh_frame:00000000000073E3                 db    0
.eh_frame:00000000000073E4                 db  68h ; h
.eh_frame:00000000000073E5                 db    0
.eh_frame:00000000000073E6                 db    0
.eh_frame:00000000000073E7                 db    0
.eh_frame:00000000000073E8                 db  60h ; `
.eh_frame:00000000000073E9                 db    2
.eh_frame:00000000000073EA                 db    0
.eh_frame:00000000000073EB                 db    0
.eh_frame:00000000000073EC                 db  44h ; D
.eh_frame:00000000000073ED                 db 0CAh
.eh_frame:00000000000073EE                 db 0FFh
.eh_frame:00000000000073EF                 db 0FFh
.eh_frame:00000000000073F0                 db 0ABh
.eh_frame:00000000000073F1                 db    1
.eh_frame:00000000000073F2                 db    0
.eh_frame:00000000000073F3                 db    0
.eh_frame:00000000000073F4                 db    0
.eh_frame:00000000000073F5                 db  42h ; B
.eh_frame:00000000000073F6                 db  0Eh
.eh_frame:00000000000073F7                 db  10h
.eh_frame:00000000000073F8                 db  8Fh
.eh_frame:00000000000073F9                 db    2
.eh_frame:00000000000073FA                 db  42h ; B
.eh_frame:00000000000073FB                 db  0Eh
.eh_frame:00000000000073FC                 db  18h
.eh_frame:00000000000073FD                 db  8Eh
.eh_frame:00000000000073FE                 db    3
.eh_frame:00000000000073FF                 db  45h ; E
.eh_frame:0000000000007400                 db  0Eh
.eh_frame:0000000000007401                 db  20h
.eh_frame:0000000000007402                 db  8Dh
.eh_frame:0000000000007403                 db    4
.eh_frame:0000000000007404                 db  42h ; B
.eh_frame:0000000000007405                 db  0Eh
.eh_frame:0000000000007406                 db  28h ; (
.eh_frame:0000000000007407                 db  8Ch
.eh_frame:0000000000007408                 db    5
.eh_frame:0000000000007409                 db  44h ; D
.eh_frame:000000000000740A                 db  0Eh
.eh_frame:000000000000740B                 db  30h ; 0
.eh_frame:000000000000740C                 db  86h
.eh_frame:000000000000740D                 db    6
.eh_frame:000000000000740E                 db  41h ; A
.eh_frame:000000000000740F                 db  0Eh
.eh_frame:0000000000007410                 db  38h ; 8
.eh_frame:0000000000007411                 db  83h
.eh_frame:0000000000007412                 db    7
.eh_frame:0000000000007413                 db  47h ; G
.eh_frame:0000000000007414                 db  0Eh
.eh_frame:0000000000007415                 db  60h ; `
.eh_frame:0000000000007416                 db    2
.eh_frame:0000000000007417                 db  99h
.eh_frame:0000000000007418                 db  0Eh
.eh_frame:0000000000007419                 db  68h ; h
.eh_frame:000000000000741A                 db  5Fh ; _
.eh_frame:000000000000741B                 db  0Eh
.eh_frame:000000000000741C                 db  70h ; p
.eh_frame:000000000000741D                 db  46h ; F
.eh_frame:000000000000741E                 db  0Eh
.eh_frame:000000000000741F                 db  78h ; x
.eh_frame:0000000000007420                 db  42h ; B
.eh_frame:0000000000007421                 db  0Eh
.eh_frame:0000000000007422                 db  80h
.eh_frame:0000000000007423                 db    1
.eh_frame:0000000000007424                 db  59h ; Y
.eh_frame:0000000000007425                 db  0Eh
.eh_frame:0000000000007426                 db  60h ; `
.eh_frame:0000000000007427                 db    2
.eh_frame:0000000000007428                 db  40h ; @
.eh_frame:0000000000007429                 db  0Eh
.eh_frame:000000000000742A                 db  68h ; h
.eh_frame:000000000000742B                 db  4Bh ; K
.eh_frame:000000000000742C                 db  0Eh
.eh_frame:000000000000742D                 db  70h ; p
.eh_frame:000000000000742E                 db  43h ; C
.eh_frame:000000000000742F                 db  0Eh
.eh_frame:0000000000007430                 db  78h ; x
.eh_frame:0000000000007431                 db  45h ; E
.eh_frame:0000000000007432                 db  0Eh
.eh_frame:0000000000007433                 db  80h
.eh_frame:0000000000007434                 db    1
.eh_frame:0000000000007435                 db  5Eh ; ^
.eh_frame:0000000000007436                 db  0Eh
.eh_frame:0000000000007437                 db  60h ; `
.eh_frame:0000000000007438                 db  4Ch ; L
.eh_frame:0000000000007439                 db  0Ah
.eh_frame:000000000000743A                 db  0Eh
.eh_frame:000000000000743B                 db  38h ; 8
.eh_frame:000000000000743C                 db  44h ; D
.eh_frame:000000000000743D                 db  0Eh
.eh_frame:000000000000743E                 db  30h ; 0
.eh_frame:000000000000743F                 db  41h ; A
.eh_frame:0000000000007440                 db  0Eh
.eh_frame:0000000000007441                 db  28h ; (
.eh_frame:0000000000007442                 db  42h ; B
.eh_frame:0000000000007443                 db  0Eh
.eh_frame:0000000000007444                 db  20h
.eh_frame:0000000000007445                 db  42h ; B
.eh_frame:0000000000007446                 db  0Eh
.eh_frame:0000000000007447                 db  18h
.eh_frame:0000000000007448                 db  42h ; B
.eh_frame:0000000000007449                 db  0Eh
.eh_frame:000000000000744A                 db  10h
.eh_frame:000000000000744B                 db  42h ; B
.eh_frame:000000000000744C                 db  0Eh
.eh_frame:000000000000744D                 db    8
.eh_frame:000000000000744E                 db  46h ; F
.eh_frame:000000000000744F                 db  0Bh
.eh_frame:0000000000007450                 db  28h ; (
.eh_frame:0000000000007451                 db    0
.eh_frame:0000000000007452                 db    0
.eh_frame:0000000000007453                 db    0
.eh_frame:0000000000007454                 db 0CCh
.eh_frame:0000000000007455                 db    2
.eh_frame:0000000000007456                 db    0
.eh_frame:0000000000007457                 db    0
.eh_frame:0000000000007458                 db  88h
.eh_frame:0000000000007459                 db 0CBh
.eh_frame:000000000000745A                 db 0FFh
.eh_frame:000000000000745B                 db 0FFh
.eh_frame:000000000000745C                 db  36h ; 6
.eh_frame:000000000000745D                 db    0
.eh_frame:000000000000745E                 db    0
.eh_frame:000000000000745F                 db    0
.eh_frame:0000000000007460                 db    0
.eh_frame:0000000000007461                 db  42h ; B
.eh_frame:0000000000007462                 db  0Eh
.eh_frame:0000000000007463                 db  10h
.eh_frame:0000000000007464                 db  8Ch
.eh_frame:0000000000007465                 db    2
.eh_frame:0000000000007466                 db  41h ; A
.eh_frame:0000000000007467                 db  0Eh
.eh_frame:0000000000007468                 db  18h
.eh_frame:0000000000007469                 db  86h
.eh_frame:000000000000746A                 db    3
.eh_frame:000000000000746B                 db  41h ; A
.eh_frame:000000000000746C                 db  0Eh
.eh_frame:000000000000746D                 db  20h
.eh_frame:000000000000746E                 db  83h
.eh_frame:000000000000746F                 db    4
.eh_frame:0000000000007470                 db  6Eh ; n
.eh_frame:0000000000007471                 db  0Eh
.eh_frame:0000000000007472                 db  18h
.eh_frame:0000000000007473                 db  41h ; A
.eh_frame:0000000000007474                 db  0Eh
.eh_frame:0000000000007475                 db  10h
.eh_frame:0000000000007476                 db  42h ; B
.eh_frame:0000000000007477                 db  0Eh
.eh_frame:0000000000007478                 db    8
.eh_frame:0000000000007479                 db    0
.eh_frame:000000000000747A                 db    0
.eh_frame:000000000000747B                 db    0
.eh_frame:000000000000747C                 db  10h
.eh_frame:000000000000747D                 db    0
.eh_frame:000000000000747E                 db    0
.eh_frame:000000000000747F                 db    0
.eh_frame:0000000000007480                 db 0F8h
.eh_frame:0000000000007481                 db    2
.eh_frame:0000000000007482                 db    0
.eh_frame:0000000000007483                 db    0
.eh_frame:0000000000007484                 db  9Ch
.eh_frame:0000000000007485                 db 0CBh
.eh_frame:0000000000007486                 db 0FFh
.eh_frame:0000000000007487                 db 0FFh
.eh_frame:0000000000007488                 db  11h
.eh_frame:0000000000007489                 db    0
.eh_frame:000000000000748A                 db    0
.eh_frame:000000000000748B                 db    0
.eh_frame:000000000000748C                 db    0
.eh_frame:000000000000748D                 db    0
.eh_frame:000000000000748E                 db    0
.eh_frame:000000000000748F                 db    0
.eh_frame:0000000000007490                 db  10h
.eh_frame:0000000000007491                 db    0
.eh_frame:0000000000007492                 db    0
.eh_frame:0000000000007493                 db    0
.eh_frame:0000000000007494                 db  0Ch
.eh_frame:0000000000007495                 db    3
.eh_frame:0000000000007496                 db    0
.eh_frame:0000000000007497                 db    0
.eh_frame:0000000000007498                 db 0A8h
.eh_frame:0000000000007499                 db 0CBh
.eh_frame:000000000000749A                 db 0FFh
.eh_frame:000000000000749B                 db 0FFh
.eh_frame:000000000000749C                 db  11h
.eh_frame:000000000000749D                 db    0
.eh_frame:000000000000749E                 db    0
.eh_frame:000000000000749F                 db    0
.eh_frame:00000000000074A0                 db    0
.eh_frame:00000000000074A1                 db    0
.eh_frame:00000000000074A2                 db    0
.eh_frame:00000000000074A3                 db    0
.eh_frame:00000000000074A4                 db  10h
.eh_frame:00000000000074A5                 db    0
.eh_frame:00000000000074A6                 db    0
.eh_frame:00000000000074A7                 db    0
.eh_frame:00000000000074A8                 db  20h
.eh_frame:00000000000074A9                 db    3
.eh_frame:00000000000074AA                 db    0
.eh_frame:00000000000074AB                 db    0
.eh_frame:00000000000074AC                 db 0B4h
.eh_frame:00000000000074AD                 db 0CBh
.eh_frame:00000000000074AE                 db 0FFh
.eh_frame:00000000000074AF                 db 0FFh
.eh_frame:00000000000074B0                 db  35h ; 5
.eh_frame:00000000000074B1                 db    0
.eh_frame:00000000000074B2                 db    0
.eh_frame:00000000000074B3                 db    0
.eh_frame:00000000000074B4                 db    0
.eh_frame:00000000000074B5                 db    0
.eh_frame:00000000000074B6                 db    0
.eh_frame:00000000000074B7                 db    0
.eh_frame:00000000000074B8                 db  10h
.eh_frame:00000000000074B9                 db    0
.eh_frame:00000000000074BA                 db    0
.eh_frame:00000000000074BB                 db    0
.eh_frame:00000000000074BC                 db  34h ; 4
.eh_frame:00000000000074BD                 db    3
.eh_frame:00000000000074BE                 db    0
.eh_frame:00000000000074BF                 db    0
.eh_frame:00000000000074C0                 db 0E0h
.eh_frame:00000000000074C1                 db 0CBh
.eh_frame:00000000000074C2                 db 0FFh
.eh_frame:00000000000074C3                 db 0FFh
.eh_frame:00000000000074C4                 db  15h
.eh_frame:00000000000074C5                 db    0
.eh_frame:00000000000074C6                 db    0
.eh_frame:00000000000074C7                 db    0
.eh_frame:00000000000074C8                 db    0
.eh_frame:00000000000074C9                 db    0
.eh_frame:00000000000074CA                 db    0
.eh_frame:00000000000074CB                 db    0
.eh_frame:00000000000074CC                 db  10h
.eh_frame:00000000000074CD                 db    0
.eh_frame:00000000000074CE                 db    0
.eh_frame:00000000000074CF                 db    0
.eh_frame:00000000000074D0                 db  48h ; H
.eh_frame:00000000000074D1                 db    3
.eh_frame:00000000000074D2                 db    0
.eh_frame:00000000000074D3                 db    0
.eh_frame:00000000000074D4                 db 0ECh
.eh_frame:00000000000074D5                 db 0CBh
.eh_frame:00000000000074D6                 db 0FFh
.eh_frame:00000000000074D7                 db 0FFh
.eh_frame:00000000000074D8                 db  30h ; 0
.eh_frame:00000000000074D9                 db    0
.eh_frame:00000000000074DA                 db    0
.eh_frame:00000000000074DB                 db    0
.eh_frame:00000000000074DC                 db    0
.eh_frame:00000000000074DD                 db  6Bh ; k
.eh_frame:00000000000074DE                 db  0Eh
.eh_frame:00000000000074DF                 db  10h
.eh_frame:00000000000074E0                 db  50h ; P
.eh_frame:00000000000074E1                 db    0
.eh_frame:00000000000074E2                 db    0
.eh_frame:00000000000074E3                 db    0
.eh_frame:00000000000074E4                 db  5Ch ; \
.eh_frame:00000000000074E5                 db    3
.eh_frame:00000000000074E6                 db    0
.eh_frame:00000000000074E7                 db    0
.eh_frame:00000000000074E8                 db    8
.eh_frame:00000000000074E9                 db 0CCh
.eh_frame:00000000000074EA                 db 0FFh
.eh_frame:00000000000074EB                 db 0FFh
.eh_frame:00000000000074EC                 db  74h ; t
.eh_frame:00000000000074ED                 db    0
.eh_frame:00000000000074EE                 db    0
.eh_frame:00000000000074EF                 db    0
.eh_frame:00000000000074F0                 db    0
.eh_frame:00000000000074F1                 db  42h ; B
.eh_frame:00000000000074F2                 db  0Eh
.eh_frame:00000000000074F3                 db  10h
.eh_frame:00000000000074F4                 db  8Fh
.eh_frame:00000000000074F5                 db    2
.eh_frame:00000000000074F6                 db  42h ; B
.eh_frame:00000000000074F7                 db  0Eh
.eh_frame:00000000000074F8                 db  18h
.eh_frame:00000000000074F9                 db  8Eh
.eh_frame:00000000000074FA                 db    3
.eh_frame:00000000000074FB                 db  49h ; I
.eh_frame:00000000000074FC                 db  0Eh
.eh_frame:00000000000074FD                 db  20h
.eh_frame:00000000000074FE                 db  8Dh
.eh_frame:00000000000074FF                 db    4
.eh_frame:0000000000007500                 db  42h ; B
.eh_frame:0000000000007501                 db  0Eh
.eh_frame:0000000000007502                 db  28h ; (
.eh_frame:0000000000007503                 db  8Ch
.eh_frame:0000000000007504                 db    5
.eh_frame:0000000000007505                 db  44h ; D
.eh_frame:0000000000007506                 db  0Eh
.eh_frame:0000000000007507                 db  30h ; 0
.eh_frame:0000000000007508                 db  86h
.eh_frame:0000000000007509                 db    6
.eh_frame:000000000000750A                 db  41h ; A
.eh_frame:000000000000750B                 db  0Eh
.eh_frame:000000000000750C                 db  38h ; 8
.eh_frame:000000000000750D                 db  83h
.eh_frame:000000000000750E                 db    7
.eh_frame:000000000000750F                 db  4Dh ; M
.eh_frame:0000000000007510                 db  0Eh
.eh_frame:0000000000007511                 db  50h ; P
.eh_frame:0000000000007512                 db  5Fh ; _
.eh_frame:0000000000007513                 db  0Eh
.eh_frame:0000000000007514                 db  58h ; X
.eh_frame:0000000000007515                 db  47h ; G
.eh_frame:0000000000007516                 db  0Eh
.eh_frame:0000000000007517                 db  60h ; `
.eh_frame:0000000000007518                 db  46h ; F
.eh_frame:0000000000007519                 db  0Eh
.eh_frame:000000000000751A                 db  68h ; h
.eh_frame:000000000000751B                 db  44h ; D
.eh_frame:000000000000751C                 db  0Eh
.eh_frame:000000000000751D                 db  70h ; p
.eh_frame:000000000000751E                 db  58h ; X
.eh_frame:000000000000751F                 db  0Eh
.eh_frame:0000000000007520                 db  38h ; 8
.eh_frame:0000000000007521                 db  41h ; A
.eh_frame:0000000000007522                 db  0Eh
.eh_frame:0000000000007523                 db  30h ; 0
.eh_frame:0000000000007524                 db  41h ; A
.eh_frame:0000000000007525                 db  0Eh
.eh_frame:0000000000007526                 db  28h ; (
.eh_frame:0000000000007527                 db  42h ; B
.eh_frame:0000000000007528                 db  0Eh
.eh_frame:0000000000007529                 db  20h
.eh_frame:000000000000752A                 db  42h ; B
.eh_frame:000000000000752B                 db  0Eh
.eh_frame:000000000000752C                 db  18h
.eh_frame:000000000000752D                 db  42h ; B
.eh_frame:000000000000752E                 db  0Eh
.eh_frame:000000000000752F                 db  10h
.eh_frame:0000000000007530                 db  42h ; B
.eh_frame:0000000000007531                 db  0Eh
.eh_frame:0000000000007532                 db    8
.eh_frame:0000000000007533                 db    0
.eh_frame:0000000000007534                 db  68h ; h
.eh_frame:0000000000007535                 db    0
.eh_frame:0000000000007536                 db    0
.eh_frame:0000000000007537                 db    0
.eh_frame:0000000000007538                 db 0B0h
.eh_frame:0000000000007539                 db    3
.eh_frame:000000000000753A                 db    0
.eh_frame:000000000000753B                 db    0
.eh_frame:000000000000753C                 db  34h ; 4
.eh_frame:000000000000753D                 db 0CCh
.eh_frame:000000000000753E                 db 0FFh
.eh_frame:000000000000753F                 db 0FFh
.eh_frame:0000000000007540                 db 0E3h
.eh_frame:0000000000007541                 db    0
.eh_frame:0000000000007542                 db    0
.eh_frame:0000000000007543                 db    0
.eh_frame:0000000000007544                 db    0
.eh_frame:0000000000007545                 db  42h ; B
.eh_frame:0000000000007546                 db  0Eh
.eh_frame:0000000000007547                 db  10h
.eh_frame:0000000000007548                 db  8Fh
.eh_frame:0000000000007549                 db    2
.eh_frame:000000000000754A                 db  42h ; B
.eh_frame:000000000000754B                 db  0Eh
.eh_frame:000000000000754C                 db  18h
.eh_frame:000000000000754D                 db  8Eh
.eh_frame:000000000000754E                 db    3
.eh_frame:000000000000754F                 db  49h ; I
.eh_frame:0000000000007550                 db  0Eh
.eh_frame:0000000000007551                 db  20h
.eh_frame:0000000000007552                 db  8Dh
.eh_frame:0000000000007553                 db    4
.eh_frame:0000000000007554                 db  42h ; B
.eh_frame:0000000000007555                 db  0Eh
.eh_frame:0000000000007556                 db  28h ; (
.eh_frame:0000000000007557                 db  8Ch
.eh_frame:0000000000007558                 db    5
.eh_frame:0000000000007559                 db  44h ; D
.eh_frame:000000000000755A                 db  0Eh
.eh_frame:000000000000755B                 db  30h ; 0
.eh_frame:000000000000755C                 db  86h
.eh_frame:000000000000755D                 db    6
.eh_frame:000000000000755E                 db  41h ; A
.eh_frame:000000000000755F                 db  0Eh
.eh_frame:0000000000007560                 db  38h ; 8
.eh_frame:0000000000007561                 db  83h
.eh_frame:0000000000007562                 db    7
.eh_frame:0000000000007563                 db  4Dh ; M
.eh_frame:0000000000007564                 db  0Eh
.eh_frame:0000000000007565                 db  70h ; p
.eh_frame:0000000000007566                 db  65h ; e
.eh_frame:0000000000007567                 db  0Eh
.eh_frame:0000000000007568                 db  78h ; x
.eh_frame:0000000000007569                 db  4Dh ; M
.eh_frame:000000000000756A                 db  0Eh
.eh_frame:000000000000756B                 db  80h
.eh_frame:000000000000756C                 db    1
.eh_frame:000000000000756D                 db  46h ; F
.eh_frame:000000000000756E                 db  0Eh
.eh_frame:000000000000756F                 db  88h
.eh_frame:0000000000007570                 db    1
.eh_frame:0000000000007571                 db  42h ; B
.eh_frame:0000000000007572                 db  0Eh
.eh_frame:0000000000007573                 db  90h
.eh_frame:0000000000007574                 db    1
.eh_frame:0000000000007575                 db  5Eh ; ^
.eh_frame:0000000000007576                 db  0Eh
.eh_frame:0000000000007577                 db  70h ; p
.eh_frame:0000000000007578                 db  56h ; V
.eh_frame:0000000000007579                 db  0Eh
.eh_frame:000000000000757A                 db  78h ; x
.eh_frame:000000000000757B                 db  43h ; C
.eh_frame:000000000000757C                 db  0Eh
.eh_frame:000000000000757D                 db  80h
.eh_frame:000000000000757E                 db    1
.eh_frame:000000000000757F                 db  43h ; C
.eh_frame:0000000000007580                 db  0Eh
.eh_frame:0000000000007581                 db  88h
.eh_frame:0000000000007582                 db    1
.eh_frame:0000000000007583                 db  56h ; V
.eh_frame:0000000000007584                 db  0Eh
.eh_frame:0000000000007585                 db  90h
.eh_frame:0000000000007586                 db    1
.eh_frame:0000000000007587                 db  52h ; R
.eh_frame:0000000000007588                 db  0Eh
.eh_frame:0000000000007589                 db  70h ; p
.eh_frame:000000000000758A                 db  5Bh ; [
.eh_frame:000000000000758B                 db  0Eh
.eh_frame:000000000000758C                 db  38h ; 8
.eh_frame:000000000000758D                 db  41h ; A
.eh_frame:000000000000758E                 db  0Eh
.eh_frame:000000000000758F                 db  30h ; 0
.eh_frame:0000000000007590                 db  41h ; A
.eh_frame:0000000000007591                 db  0Eh
.eh_frame:0000000000007592                 db  28h ; (
.eh_frame:0000000000007593                 db  42h ; B
.eh_frame:0000000000007594                 db  0Eh
.eh_frame:0000000000007595                 db  20h
.eh_frame:0000000000007596                 db  42h ; B
.eh_frame:0000000000007597                 db  0Eh
.eh_frame:0000000000007598                 db  18h
.eh_frame:0000000000007599                 db  42h ; B
.eh_frame:000000000000759A                 db  0Eh
.eh_frame:000000000000759B                 db  10h
.eh_frame:000000000000759C                 db  42h ; B
.eh_frame:000000000000759D                 db  0Eh
.eh_frame:000000000000759E                 db    8
.eh_frame:000000000000759F                 db    0
.eh_frame:00000000000075A0                 db  10h
.eh_frame:00000000000075A1                 db    0
.eh_frame:00000000000075A2                 db    0
.eh_frame:00000000000075A3                 db    0
.eh_frame:00000000000075A4                 db  1Ch
.eh_frame:00000000000075A5                 db    4
.eh_frame:00000000000075A6                 db    0
.eh_frame:00000000000075A7                 db    0
.eh_frame:00000000000075A8                 db 0B8h
.eh_frame:00000000000075A9                 db 0CCh
.eh_frame:00000000000075AA                 db 0FFh
.eh_frame:00000000000075AB                 db 0FFh
.eh_frame:00000000000075AC                 db  0Ah
.eh_frame:00000000000075AD                 db    0
.eh_frame:00000000000075AE                 db    0
.eh_frame:00000000000075AF                 db    0
.eh_frame:00000000000075B0                 db    0
.eh_frame:00000000000075B1                 db    0
.eh_frame:00000000000075B2                 db    0
.eh_frame:00000000000075B3                 db    0
.eh_frame:00000000000075B4                 db  28h ; (
.eh_frame:00000000000075B5                 db    0
.eh_frame:00000000000075B6                 db    0
.eh_frame:00000000000075B7                 db    0
.eh_frame:00000000000075B8                 db  30h ; 0
.eh_frame:00000000000075B9                 db    4
.eh_frame:00000000000075BA                 db    0
.eh_frame:00000000000075BB                 db    0
.eh_frame:00000000000075BC                 db 0B4h
.eh_frame:00000000000075BD                 db 0CCh
.eh_frame:00000000000075BE                 db 0FFh
.eh_frame:00000000000075BF                 db 0FFh
.eh_frame:00000000000075C0                 db  93h
.eh_frame:00000000000075C1                 db    0
.eh_frame:00000000000075C2                 db    0
.eh_frame:00000000000075C3                 db    0
.eh_frame:00000000000075C4                 db    0
.eh_frame:00000000000075C5                 db  48h ; H
.eh_frame:00000000000075C6                 db  0Eh
.eh_frame:00000000000075C7                 db  10h
.eh_frame:00000000000075C8                 db  8Ch
.eh_frame:00000000000075C9                 db    2
.eh_frame:00000000000075CA                 db  48h ; H
.eh_frame:00000000000075CB                 db  0Eh
.eh_frame:00000000000075CC                 db  18h
.eh_frame:00000000000075CD                 db  86h
.eh_frame:00000000000075CE                 db    3
.eh_frame:00000000000075CF                 db  41h ; A
.eh_frame:00000000000075D0                 db  0Eh
.eh_frame:00000000000075D1                 db  20h
.eh_frame:00000000000075D2                 db  83h
.eh_frame:00000000000075D3                 db    4
.eh_frame:00000000000075D4                 db    2
.eh_frame:00000000000075D5                 db  74h ; t
.eh_frame:00000000000075D6                 db  0Eh
.eh_frame:00000000000075D7                 db  18h
.eh_frame:00000000000075D8                 db  4Bh ; K
.eh_frame:00000000000075D9                 db  0Eh
.eh_frame:00000000000075DA                 db  10h
.eh_frame:00000000000075DB                 db  42h ; B
.eh_frame:00000000000075DC                 db  0Eh
.eh_frame:00000000000075DD                 db    8
.eh_frame:00000000000075DE                 db    0
.eh_frame:00000000000075DF                 db    0
.eh_frame:00000000000075E0                 db  10h
.eh_frame:00000000000075E1                 db    0
.eh_frame:00000000000075E2                 db    0
.eh_frame:00000000000075E3                 db    0
.eh_frame:00000000000075E4                 db  5Ch ; \
.eh_frame:00000000000075E5                 db    4
.eh_frame:00000000000075E6                 db    0
.eh_frame:00000000000075E7                 db    0
.eh_frame:00000000000075E8                 db  28h ; (
.eh_frame:00000000000075E9                 db 0CDh
.eh_frame:00000000000075EA                 db 0FFh
.eh_frame:00000000000075EB                 db 0FFh
.eh_frame:00000000000075EC                 db  13h
.eh_frame:00000000000075ED                 db    0
.eh_frame:00000000000075EE                 db    0
.eh_frame:00000000000075EF                 db    0
.eh_frame:00000000000075F0                 db    0
.eh_frame:00000000000075F1                 db    0
.eh_frame:00000000000075F2                 db    0
.eh_frame:00000000000075F3                 db    0
.eh_frame:00000000000075F4                 db  10h
.eh_frame:00000000000075F5                 db    0
.eh_frame:00000000000075F6                 db    0
.eh_frame:00000000000075F7                 db    0
.eh_frame:00000000000075F8                 db  70h ; p
.eh_frame:00000000000075F9                 db    4
.eh_frame:00000000000075FA                 db    0
.eh_frame:00000000000075FB                 db    0
.eh_frame:00000000000075FC                 db  34h ; 4
.eh_frame:00000000000075FD                 db 0CDh
.eh_frame:00000000000075FE                 db 0FFh
.eh_frame:00000000000075FF                 db 0FFh
.eh_frame:0000000000007600                 db  0Ch
.eh_frame:0000000000007601                 db    0
.eh_frame:0000000000007602                 db    0
.eh_frame:0000000000007603                 db    0
.eh_frame:0000000000007604                 db    0
.eh_frame:0000000000007605                 db    0
.eh_frame:0000000000007606                 db    0
.eh_frame:0000000000007607                 db    0
.eh_frame:0000000000007608                 db  10h
.eh_frame:0000000000007609                 db    0
.eh_frame:000000000000760A                 db    0
.eh_frame:000000000000760B                 db    0
.eh_frame:000000000000760C                 db  84h
.eh_frame:000000000000760D                 db    4
.eh_frame:000000000000760E                 db    0
.eh_frame:000000000000760F                 db    0
.eh_frame:0000000000007610                 db  30h ; 0
.eh_frame:0000000000007611                 db 0CDh
.eh_frame:0000000000007612                 db 0FFh
.eh_frame:0000000000007613                 db 0FFh
.eh_frame:0000000000007614                 db  18h
.eh_frame:0000000000007615                 db    0
.eh_frame:0000000000007616                 db    0
.eh_frame:0000000000007617                 db    0
.eh_frame:0000000000007618                 db    0
.eh_frame:0000000000007619                 db    0
.eh_frame:000000000000761A                 db    0
.eh_frame:000000000000761B                 db    0
.eh_frame:000000000000761C                 db  10h
.eh_frame:000000000000761D                 db    0
.eh_frame:000000000000761E                 db    0
.eh_frame:000000000000761F                 db    0
.eh_frame:0000000000007620                 db  98h
.eh_frame:0000000000007621                 db    4
.eh_frame:0000000000007622                 db    0
.eh_frame:0000000000007623                 db    0
.eh_frame:0000000000007624                 db  3Ch ; <
.eh_frame:0000000000007625                 db 0CDh
.eh_frame:0000000000007626                 db 0FFh
.eh_frame:0000000000007627                 db 0FFh
.eh_frame:0000000000007628                 db  14h
.eh_frame:0000000000007629                 db    0
.eh_frame:000000000000762A                 db    0
.eh_frame:000000000000762B                 db    0
.eh_frame:000000000000762C                 db    0
.eh_frame:000000000000762D                 db    0
.eh_frame:000000000000762E                 db    0
.eh_frame:000000000000762F                 db    0
.eh_frame:0000000000007630                 db  18h
.eh_frame:0000000000007631                 db    0
.eh_frame:0000000000007632                 db    0
.eh_frame:0000000000007633                 db    0
.eh_frame:0000000000007634                 db 0ACh
.eh_frame:0000000000007635                 db    4
.eh_frame:0000000000007636                 db    0
.eh_frame:0000000000007637                 db    0
.eh_frame:0000000000007638                 db  48h ; H
.eh_frame:0000000000007639                 db 0CDh
.eh_frame:000000000000763A                 db 0FFh
.eh_frame:000000000000763B                 db 0FFh
.eh_frame:000000000000763C                 db  8Eh
.eh_frame:000000000000763D                 db    0
.eh_frame:000000000000763E                 db    0
.eh_frame:000000000000763F                 db    0
.eh_frame:0000000000007640                 db    0
.eh_frame:0000000000007641                 db  44h ; D
.eh_frame:0000000000007642                 db  0Eh
.eh_frame:0000000000007643                 db  50h ; P
.eh_frame:0000000000007644                 db    2
.eh_frame:0000000000007645                 db  7Fh ; 
.eh_frame:0000000000007646                 db  0Ah
.eh_frame:0000000000007647                 db  0Eh
.eh_frame:0000000000007648                 db    8
.eh_frame:0000000000007649                 db  41h ; A
.eh_frame:000000000000764A                 db  0Bh
.eh_frame:000000000000764B                 db    0
.eh_frame:000000000000764C                 db  18h
.eh_frame:000000000000764D                 db    0
.eh_frame:000000000000764E                 db    0
.eh_frame:000000000000764F                 db    0
.eh_frame:0000000000007650                 db 0C8h
.eh_frame:0000000000007651                 db    4
.eh_frame:0000000000007652                 db    0
.eh_frame:0000000000007653                 db    0
.eh_frame:0000000000007654                 db 0BCh
.eh_frame:0000000000007655                 db 0CDh
.eh_frame:0000000000007656                 db 0FFh
.eh_frame:0000000000007657                 db 0FFh
.eh_frame:0000000000007658                 db  8Ah
.eh_frame:0000000000007659                 db    0
.eh_frame:000000000000765A                 db    0
.eh_frame:000000000000765B                 db    0
.eh_frame:000000000000765C                 db    0
.eh_frame:000000000000765D                 db  44h ; D
.eh_frame:000000000000765E                 db  0Eh
.eh_frame:000000000000765F                 db  50h ; P
.eh_frame:0000000000007660                 db    2
.eh_frame:0000000000007661                 db  7Bh ; {
.eh_frame:0000000000007662                 db  0Ah
.eh_frame:0000000000007663                 db  0Eh
.eh_frame:0000000000007664                 db    8
.eh_frame:0000000000007665                 db  41h ; A
.eh_frame:0000000000007666                 db  0Bh
.eh_frame:0000000000007667                 db    0
.eh_frame:0000000000007668                 db  10h
.eh_frame:0000000000007669                 db    0
.eh_frame:000000000000766A                 db    0
.eh_frame:000000000000766B                 db    0
.eh_frame:000000000000766C                 db 0E4h
.eh_frame:000000000000766D                 db    4
.eh_frame:000000000000766E                 db    0
.eh_frame:000000000000766F                 db    0
.eh_frame:0000000000007670                 db  30h ; 0
.eh_frame:0000000000007671                 db 0CEh
.eh_frame:0000000000007672                 db 0FFh
.eh_frame:0000000000007673                 db 0FFh
.eh_frame:0000000000007674                 db  0Ch
.eh_frame:0000000000007675                 db    0
.eh_frame:0000000000007676                 db    0
.eh_frame:0000000000007677                 db    0
.eh_frame:0000000000007678                 db    0
.eh_frame:0000000000007679                 db    0
.eh_frame:000000000000767A                 db    0
.eh_frame:000000000000767B                 db    0
.eh_frame:000000000000767C                 db  10h
.eh_frame:000000000000767D                 db    0
.eh_frame:000000000000767E                 db    0
.eh_frame:000000000000767F                 db    0
.eh_frame:0000000000007680                 db 0F8h
.eh_frame:0000000000007681                 db    4
.eh_frame:0000000000007682                 db    0
.eh_frame:0000000000007683                 db    0
.eh_frame:0000000000007684                 db  2Ch ; ,
.eh_frame:0000000000007685                 db 0CEh
.eh_frame:0000000000007686                 db 0FFh
.eh_frame:0000000000007687                 db 0FFh
.eh_frame:0000000000007688                 db  0Fh
.eh_frame:0000000000007689                 db    0
.eh_frame:000000000000768A                 db    0
.eh_frame:000000000000768B                 db    0
.eh_frame:000000000000768C                 db    0
.eh_frame:000000000000768D                 db    0
.eh_frame:000000000000768E                 db    0
.eh_frame:000000000000768F                 db    0
.eh_frame:0000000000007690                 db  18h
.eh_frame:0000000000007691                 db    0
.eh_frame:0000000000007692                 db    0
.eh_frame:0000000000007693                 db    0
.eh_frame:0000000000007694                 db  0Ch
.eh_frame:0000000000007695                 db    5
.eh_frame:0000000000007696                 db    0
.eh_frame:0000000000007697                 db    0
.eh_frame:0000000000007698                 db  28h ; (
.eh_frame:0000000000007699                 db 0CEh
.eh_frame:000000000000769A                 db 0FFh
.eh_frame:000000000000769B                 db 0FFh
.eh_frame:000000000000769C                 db  98h
.eh_frame:000000000000769D                 db    0
.eh_frame:000000000000769E                 db    0
.eh_frame:000000000000769F                 db    0
.eh_frame:00000000000076A0                 db    0
.eh_frame:00000000000076A1                 db  44h ; D
.eh_frame:00000000000076A2                 db  0Eh
.eh_frame:00000000000076A3                 db  50h ; P
.eh_frame:00000000000076A4                 db    2
.eh_frame:00000000000076A5                 db  8Eh
.eh_frame:00000000000076A6                 db  0Ah
.eh_frame:00000000000076A7                 db  0Eh
.eh_frame:00000000000076A8                 db    8
.eh_frame:00000000000076A9                 db  41h ; A
.eh_frame:00000000000076AA                 db  0Bh
.eh_frame:00000000000076AB                 db    0
.eh_frame:00000000000076AC                 db  10h
.eh_frame:00000000000076AD                 db    0
.eh_frame:00000000000076AE                 db    0
.eh_frame:00000000000076AF                 db    0
.eh_frame:00000000000076B0                 db  28h ; (
.eh_frame:00000000000076B1                 db    5
.eh_frame:00000000000076B2                 db    0
.eh_frame:00000000000076B3                 db    0
.eh_frame:00000000000076B4                 db 0ACh
.eh_frame:00000000000076B5                 db 0CEh
.eh_frame:00000000000076B6                 db 0FFh
.eh_frame:00000000000076B7                 db 0FFh
.eh_frame:00000000000076B8                 db  10h
.eh_frame:00000000000076B9                 db    0
.eh_frame:00000000000076BA                 db    0
.eh_frame:00000000000076BB                 db    0
.eh_frame:00000000000076BC                 db    0
.eh_frame:00000000000076BD                 db    0
.eh_frame:00000000000076BE                 db    0
.eh_frame:00000000000076BF                 db    0
.eh_frame:00000000000076C0                 db  10h
.eh_frame:00000000000076C1                 db    0
.eh_frame:00000000000076C2                 db    0
.eh_frame:00000000000076C3                 db    0
.eh_frame:00000000000076C4                 db  3Ch ; <
.eh_frame:00000000000076C5                 db    5
.eh_frame:00000000000076C6                 db    0
.eh_frame:00000000000076C7                 db    0
.eh_frame:00000000000076C8                 db 0A8h
.eh_frame:00000000000076C9                 db 0CEh
.eh_frame:00000000000076CA                 db 0FFh
.eh_frame:00000000000076CB                 db 0FFh
.eh_frame:00000000000076CC                 db  11h
.eh_frame:00000000000076CD                 db    0
.eh_frame:00000000000076CE                 db    0
.eh_frame:00000000000076CF                 db    0
.eh_frame:00000000000076D0                 db    0
.eh_frame:00000000000076D1                 db    0
.eh_frame:00000000000076D2                 db    0
.eh_frame:00000000000076D3                 db    0
.eh_frame:00000000000076D4                 db  10h
.eh_frame:00000000000076D5                 db    0
.eh_frame:00000000000076D6                 db    0
.eh_frame:00000000000076D7                 db    0
.eh_frame:00000000000076D8                 db  50h ; P
.eh_frame:00000000000076D9                 db    5
.eh_frame:00000000000076DA                 db    0
.eh_frame:00000000000076DB                 db    0
.eh_frame:00000000000076DC                 db 0B4h
.eh_frame:00000000000076DD                 db 0CEh
.eh_frame:00000000000076DE                 db 0FFh
.eh_frame:00000000000076DF                 db 0FFh
.eh_frame:00000000000076E0                 db  0Ah
.eh_frame:00000000000076E1                 db    0
.eh_frame:00000000000076E2                 db    0
.eh_frame:00000000000076E3                 db    0
.eh_frame:00000000000076E4                 db    0
.eh_frame:00000000000076E5                 db    0
.eh_frame:00000000000076E6                 db    0
.eh_frame:00000000000076E7                 db    0
.eh_frame:00000000000076E8                 db  18h
.eh_frame:00000000000076E9                 db    0
.eh_frame:00000000000076EA                 db    0
.eh_frame:00000000000076EB                 db    0
.eh_frame:00000000000076EC                 db  64h ; d
.eh_frame:00000000000076ED                 db    5
.eh_frame:00000000000076EE                 db    0
.eh_frame:00000000000076EF                 db    0
.eh_frame:00000000000076F0                 db 0B0h
.eh_frame:00000000000076F1                 db 0CEh
.eh_frame:00000000000076F2                 db 0FFh
.eh_frame:00000000000076F3                 db 0FFh
.eh_frame:00000000000076F4                 db  8Eh
.eh_frame:00000000000076F5                 db    0
.eh_frame:00000000000076F6                 db    0
.eh_frame:00000000000076F7                 db    0
.eh_frame:00000000000076F8                 db    0
.eh_frame:00000000000076F9                 db  44h ; D
.eh_frame:00000000000076FA                 db  0Eh
.eh_frame:00000000000076FB                 db  50h ; P
.eh_frame:00000000000076FC                 db    2
.eh_frame:00000000000076FD                 db  7Fh ; 
.eh_frame:00000000000076FE                 db  0Ah
.eh_frame:00000000000076FF                 db  0Eh
.eh_frame:0000000000007700                 db    8
.eh_frame:0000000000007701                 db  41h ; A
.eh_frame:0000000000007702                 db  0Bh
.eh_frame:0000000000007703                 db    0
.eh_frame:0000000000007704                 db  18h
.eh_frame:0000000000007705                 db    0
.eh_frame:0000000000007706                 db    0
.eh_frame:0000000000007707                 db    0
.eh_frame:0000000000007708                 db  80h
.eh_frame:0000000000007709                 db    5
.eh_frame:000000000000770A                 db    0
.eh_frame:000000000000770B                 db    0
.eh_frame:000000000000770C                 db  24h ; $
.eh_frame:000000000000770D                 db 0CFh
.eh_frame:000000000000770E                 db 0FFh
.eh_frame:000000000000770F                 db 0FFh
.eh_frame:0000000000007710                 db  91h
.eh_frame:0000000000007711                 db    0
.eh_frame:0000000000007712                 db    0
.eh_frame:0000000000007713                 db    0
.eh_frame:0000000000007714                 db    0
.eh_frame:0000000000007715                 db  44h ; D
.eh_frame:0000000000007716                 db  0Eh
.eh_frame:0000000000007717                 db  50h ; P
.eh_frame:0000000000007718                 db    2
.eh_frame:0000000000007719                 db  82h
.eh_frame:000000000000771A                 db  0Ah
.eh_frame:000000000000771B                 db  0Eh
.eh_frame:000000000000771C                 db    8
.eh_frame:000000000000771D                 db  41h ; A
.eh_frame:000000000000771E                 db  0Bh
.eh_frame:000000000000771F                 db    0
.eh_frame:0000000000007720                 db  10h
.eh_frame:0000000000007721                 db    0
.eh_frame:0000000000007722                 db    0
.eh_frame:0000000000007723                 db    0
.eh_frame:0000000000007724                 db  9Ch
.eh_frame:0000000000007725                 db    5
.eh_frame:0000000000007726                 db    0
.eh_frame:0000000000007727                 db    0
.eh_frame:0000000000007728                 db 0A8h
.eh_frame:0000000000007729                 db 0CFh
.eh_frame:000000000000772A                 db 0FFh
.eh_frame:000000000000772B                 db 0FFh
.eh_frame:000000000000772C                 db  0Ch
.eh_frame:000000000000772D                 db    0
.eh_frame:000000000000772E                 db    0
.eh_frame:000000000000772F                 db    0
.eh_frame:0000000000007730                 db    0
.eh_frame:0000000000007731                 db    0
.eh_frame:0000000000007732                 db    0
.eh_frame:0000000000007733                 db    0
.eh_frame:0000000000007734                 db  10h
.eh_frame:0000000000007735                 db    0
.eh_frame:0000000000007736                 db    0
.eh_frame:0000000000007737                 db    0
.eh_frame:0000000000007738                 db 0B0h
.eh_frame:0000000000007739                 db    5
.eh_frame:000000000000773A                 db    0
.eh_frame:000000000000773B                 db    0
.eh_frame:000000000000773C                 db 0A4h
.eh_frame:000000000000773D                 db 0CFh
.eh_frame:000000000000773E                 db 0FFh
.eh_frame:000000000000773F                 db 0FFh
.eh_frame:0000000000007740                 db  17h
.eh_frame:0000000000007741                 db    0
.eh_frame:0000000000007742                 db    0
.eh_frame:0000000000007743                 db    0
.eh_frame:0000000000007744                 db    0
.eh_frame:0000000000007745                 db    0
.eh_frame:0000000000007746                 db    0
.eh_frame:0000000000007747                 db    0
.eh_frame:0000000000007748                 db  10h
.eh_frame:0000000000007749                 db    0
.eh_frame:000000000000774A                 db    0
.eh_frame:000000000000774B                 db    0
.eh_frame:000000000000774C                 db 0C4h
.eh_frame:000000000000774D                 db    5
.eh_frame:000000000000774E                 db    0
.eh_frame:000000000000774F                 db    0
.eh_frame:0000000000007750                 db 0B0h
.eh_frame:0000000000007751                 db 0CFh
.eh_frame:0000000000007752                 db 0FFh
.eh_frame:0000000000007753                 db 0FFh
.eh_frame:0000000000007754                 db  13h
.eh_frame:0000000000007755                 db    0
.eh_frame:0000000000007756                 db    0
.eh_frame:0000000000007757                 db    0
.eh_frame:0000000000007758                 db    0
.eh_frame:0000000000007759                 db    0
.eh_frame:000000000000775A                 db    0
.eh_frame:000000000000775B                 db    0
.eh_frame:000000000000775C                 db  10h
.eh_frame:000000000000775D                 db    0
.eh_frame:000000000000775E                 db    0
.eh_frame:000000000000775F                 db    0
.eh_frame:0000000000007760                 db 0D8h
.eh_frame:0000000000007761                 db    5
.eh_frame:0000000000007762                 db    0
.eh_frame:0000000000007763                 db    0
.eh_frame:0000000000007764                 db 0BCh
.eh_frame:0000000000007765                 db 0CFh
.eh_frame:0000000000007766                 db 0FFh
.eh_frame:0000000000007767                 db 0FFh
.eh_frame:0000000000007768                 db  0Ch
.eh_frame:0000000000007769                 db    0
.eh_frame:000000000000776A                 db    0
.eh_frame:000000000000776B                 db    0
.eh_frame:000000000000776C                 db    0
.eh_frame:000000000000776D                 db    0
.eh_frame:000000000000776E                 db    0
.eh_frame:000000000000776F                 db    0
.eh_frame:0000000000007770                 db  10h
.eh_frame:0000000000007771                 db    0
.eh_frame:0000000000007772                 db    0
.eh_frame:0000000000007773                 db    0
.eh_frame:0000000000007774                 db 0ECh
.eh_frame:0000000000007775                 db    5
.eh_frame:0000000000007776                 db    0
.eh_frame:0000000000007777                 db    0
.eh_frame:0000000000007778                 db 0B8h
.eh_frame:0000000000007779                 db 0CFh
.eh_frame:000000000000777A                 db 0FFh
.eh_frame:000000000000777B                 db 0FFh
.eh_frame:000000000000777C                 db  14h
.eh_frame:000000000000777D                 db    0
.eh_frame:000000000000777E                 db    0
.eh_frame:000000000000777F                 db    0
.eh_frame:0000000000007780                 db    0
.eh_frame:0000000000007781                 db    0
.eh_frame:0000000000007782                 db    0
.eh_frame:0000000000007783                 db    0
.eh_frame:0000000000007784                 db  10h
.eh_frame:0000000000007785                 db    0
.eh_frame:0000000000007786                 db    0
.eh_frame:0000000000007787                 db    0
.eh_frame:0000000000007788                 db    0
.eh_frame:0000000000007789                 db    6
.eh_frame:000000000000778A                 db    0
.eh_frame:000000000000778B                 db    0
.eh_frame:000000000000778C                 db 0C4h
.eh_frame:000000000000778D                 db 0CFh
.eh_frame:000000000000778E                 db 0FFh
.eh_frame:000000000000778F                 db 0FFh
.eh_frame:0000000000007790                 db  13h
.eh_frame:0000000000007791                 db    0
.eh_frame:0000000000007792                 db    0
.eh_frame:0000000000007793                 db    0
.eh_frame:0000000000007794                 db    0
.eh_frame:0000000000007795                 db    0
.eh_frame:0000000000007796                 db    0
.eh_frame:0000000000007797                 db    0
.eh_frame:0000000000007798                 db  14h
.eh_frame:0000000000007799                 db    0
.eh_frame:000000000000779A                 db    0
.eh_frame:000000000000779B                 db    0
.eh_frame:000000000000779C                 db  14h
.eh_frame:000000000000779D                 db    6
.eh_frame:000000000000779E                 db    0
.eh_frame:000000000000779F                 db    0
.eh_frame:00000000000077A0                 db 0D0h
.eh_frame:00000000000077A1                 db 0CFh
.eh_frame:00000000000077A2                 db 0FFh
.eh_frame:00000000000077A3                 db 0FFh
.eh_frame:00000000000077A4                 db  18h
.eh_frame:00000000000077A5                 db    0
.eh_frame:00000000000077A6                 db    0
.eh_frame:00000000000077A7                 db    0
.eh_frame:00000000000077A8                 db    0
.eh_frame:00000000000077A9                 db    0
.eh_frame:00000000000077AA                 db    0
.eh_frame:00000000000077AB                 db    0
.eh_frame:00000000000077AC                 db    0
.eh_frame:00000000000077AD                 db    0
.eh_frame:00000000000077AE                 db    0
.eh_frame:00000000000077AF                 db    0
.eh_frame:00000000000077B0                 db  4Ch ; L
.eh_frame:00000000000077B1                 db    0
.eh_frame:00000000000077B2                 db    0
.eh_frame:00000000000077B3                 db    0
.eh_frame:00000000000077B4                 db  2Ch ; ,
.eh_frame:00000000000077B5                 db    6
.eh_frame:00000000000077B6                 db    0
.eh_frame:00000000000077B7                 db    0
.eh_frame:00000000000077B8                 db 0D8h
.eh_frame:00000000000077B9                 db 0CFh
.eh_frame:00000000000077BA                 db 0FFh
.eh_frame:00000000000077BB                 db 0FFh
.eh_frame:00000000000077BC                 db 0C9h
.eh_frame:00000000000077BD                 db    3
.eh_frame:00000000000077BE                 db    0
.eh_frame:00000000000077BF                 db    0
.eh_frame:00000000000077C0                 db    0
.eh_frame:00000000000077C1                 db  42h ; B
.eh_frame:00000000000077C2                 db  0Eh
.eh_frame:00000000000077C3                 db  10h
.eh_frame:00000000000077C4                 db  8Fh
.eh_frame:00000000000077C5                 db    2
.eh_frame:00000000000077C6                 db  42h ; B
.eh_frame:00000000000077C7                 db  0Eh
.eh_frame:00000000000077C8                 db  18h
.eh_frame:00000000000077C9                 db  8Eh
.eh_frame:00000000000077CA                 db    3
.eh_frame:00000000000077CB                 db  45h ; E
.eh_frame:00000000000077CC                 db  0Eh
.eh_frame:00000000000077CD                 db  20h
.eh_frame:00000000000077CE                 db  8Dh
.eh_frame:00000000000077CF                 db    4
.eh_frame:00000000000077D0                 db  42h ; B
.eh_frame:00000000000077D1                 db  0Eh
.eh_frame:00000000000077D2                 db  28h ; (
.eh_frame:00000000000077D3                 db  8Ch
.eh_frame:00000000000077D4                 db    5
.eh_frame:00000000000077D5                 db  44h ; D
.eh_frame:00000000000077D6                 db  0Eh
.eh_frame:00000000000077D7                 db  30h ; 0
.eh_frame:00000000000077D8                 db  86h
.eh_frame:00000000000077D9                 db    6
.eh_frame:00000000000077DA                 db  41h ; A
.eh_frame:00000000000077DB                 db  0Eh
.eh_frame:00000000000077DC                 db  38h ; 8
.eh_frame:00000000000077DD                 db  83h
.eh_frame:00000000000077DE                 db    7
.eh_frame:00000000000077DF                 db  50h ; P
.eh_frame:00000000000077E0                 db  0Eh
.eh_frame:00000000000077E1                 db  90h
.eh_frame:00000000000077E2                 db    1
.eh_frame:00000000000077E3                 db    3
.eh_frame:00000000000077E4                 db  10h
.eh_frame:00000000000077E5                 db    1
.eh_frame:00000000000077E6                 db  0Ah
.eh_frame:00000000000077E7                 db  0Eh
.eh_frame:00000000000077E8                 db  38h ; 8
.eh_frame:00000000000077E9                 db  41h ; A
.eh_frame:00000000000077EA                 db  0Eh
.eh_frame:00000000000077EB                 db  30h ; 0
.eh_frame:00000000000077EC                 db  41h ; A
.eh_frame:00000000000077ED                 db  0Eh
.eh_frame:00000000000077EE                 db  28h ; (
.eh_frame:00000000000077EF                 db  42h ; B
.eh_frame:00000000000077F0                 db  0Eh
.eh_frame:00000000000077F1                 db  20h
.eh_frame:00000000000077F2                 db  42h ; B
.eh_frame:00000000000077F3                 db  0Eh
.eh_frame:00000000000077F4                 db  18h
.eh_frame:00000000000077F5                 db  42h ; B
.eh_frame:00000000000077F6                 db  0Eh
.eh_frame:00000000000077F7                 db  10h
.eh_frame:00000000000077F8                 db  42h ; B
.eh_frame:00000000000077F9                 db  0Eh
.eh_frame:00000000000077FA                 db    8
.eh_frame:00000000000077FB                 db  46h ; F
.eh_frame:00000000000077FC                 db  0Bh
.eh_frame:00000000000077FD                 db    0
.eh_frame:00000000000077FE                 db    0
.eh_frame:00000000000077FF                 db    0
.eh_frame:0000000000007800                 db  5Ch ; \
.eh_frame:0000000000007801                 db    0
.eh_frame:0000000000007802                 db    0
.eh_frame:0000000000007803                 db    0
.eh_frame:0000000000007804                 db  7Ch ; |
.eh_frame:0000000000007805                 db    6
.eh_frame:0000000000007806                 db    0
.eh_frame:0000000000007807                 db    0
.eh_frame:0000000000007808                 db  58h ; X
.eh_frame:0000000000007809                 db 0D3h
.eh_frame:000000000000780A                 db 0FFh
.eh_frame:000000000000780B                 db 0FFh
.eh_frame:000000000000780C                 db 0CDh
.eh_frame:000000000000780D                 db    0
.eh_frame:000000000000780E                 db    0
.eh_frame:000000000000780F                 db    0
.eh_frame:0000000000007810                 db    0
.eh_frame:0000000000007811                 db  4Bh ; K
.eh_frame:0000000000007812                 db  0Eh
.eh_frame:0000000000007813                 db  10h
.eh_frame:0000000000007814                 db  8Fh
.eh_frame:0000000000007815                 db    2
.eh_frame:0000000000007816                 db  42h ; B
.eh_frame:0000000000007817                 db  0Eh
.eh_frame:0000000000007818                 db  18h
.eh_frame:0000000000007819                 db  8Eh
.eh_frame:000000000000781A                 db    3
.eh_frame:000000000000781B                 db  45h ; E
.eh_frame:000000000000781C                 db  0Eh
.eh_frame:000000000000781D                 db  20h
.eh_frame:000000000000781E                 db  8Dh
.eh_frame:000000000000781F                 db    4
.eh_frame:0000000000007820                 db  42h ; B
.eh_frame:0000000000007821                 db  0Eh
.eh_frame:0000000000007822                 db  28h ; (
.eh_frame:0000000000007823                 db  8Ch
.eh_frame:0000000000007824                 db    5
.eh_frame:0000000000007825                 db  44h ; D
.eh_frame:0000000000007826                 db  0Eh
.eh_frame:0000000000007827                 db  30h ; 0
.eh_frame:0000000000007828                 db  86h
.eh_frame:0000000000007829                 db    6
.eh_frame:000000000000782A                 db  41h ; A
.eh_frame:000000000000782B                 db  0Eh
.eh_frame:000000000000782C                 db  38h ; 8
.eh_frame:000000000000782D                 db  83h
.eh_frame:000000000000782E                 db    7
.eh_frame:000000000000782F                 db  52h ; R
.eh_frame:0000000000007830                 db  0Eh
.eh_frame:0000000000007831                 db  50h ; P
.eh_frame:0000000000007832                 db    2
.eh_frame:0000000000007833                 db  6Dh ; m
.eh_frame:0000000000007834                 db  0Eh
.eh_frame:0000000000007835                 db  38h ; 8
.eh_frame:0000000000007836                 db  44h ; D
.eh_frame:0000000000007837                 db  0Eh
.eh_frame:0000000000007838                 db  30h ; 0
.eh_frame:0000000000007839                 db  41h ; A
.eh_frame:000000000000783A                 db  0Eh
.eh_frame:000000000000783B                 db  28h ; (
.eh_frame:000000000000783C                 db  42h ; B
.eh_frame:000000000000783D                 db  0Eh
.eh_frame:000000000000783E                 db  20h
.eh_frame:000000000000783F                 db  42h ; B
.eh_frame:0000000000007840                 db  0Eh
.eh_frame:0000000000007841                 db  18h
.eh_frame:0000000000007842                 db  42h ; B
.eh_frame:0000000000007843                 db  0Eh
.eh_frame:0000000000007844                 db  10h
.eh_frame:0000000000007845                 db  42h ; B
.eh_frame:0000000000007846                 db  0Eh
.eh_frame:0000000000007847                 db    8
.eh_frame:0000000000007848                 db  4Bh ; K
.eh_frame:0000000000007849                 db 0C3h
.eh_frame:000000000000784A                 db 0C6h
.eh_frame:000000000000784B                 db 0CCh
.eh_frame:000000000000784C                 db 0CDh
.eh_frame:000000000000784D                 db 0CEh
.eh_frame:000000000000784E                 db 0CFh
.eh_frame:000000000000784F                 db  58h ; X
.eh_frame:0000000000007850                 db  0Eh
.eh_frame:0000000000007851                 db  50h ; P
.eh_frame:0000000000007852                 db  83h
.eh_frame:0000000000007853                 db    7
.eh_frame:0000000000007854                 db  86h
.eh_frame:0000000000007855                 db    6
.eh_frame:0000000000007856                 db  8Ch
.eh_frame:0000000000007857                 db    5
.eh_frame:0000000000007858                 db  8Dh
.eh_frame:0000000000007859                 db    4
.eh_frame:000000000000785A                 db  8Eh
.eh_frame:000000000000785B                 db    3
.eh_frame:000000000000785C                 db  8Fh
.eh_frame:000000000000785D                 db    2
.eh_frame:000000000000785E                 db    0
.eh_frame:000000000000785F                 db    0
.eh_frame:0000000000007860                 db  10h
.eh_frame:0000000000007861                 db    1
.eh_frame:0000000000007862                 db    0
.eh_frame:0000000000007863                 db    0
.eh_frame:0000000000007864                 db 0DCh
.eh_frame:0000000000007865                 db    6
.eh_frame:0000000000007866                 db    0
.eh_frame:0000000000007867                 db    0
.eh_frame:0000000000007868                 db 0C8h
.eh_frame:0000000000007869                 db 0D3h
.eh_frame:000000000000786A                 db 0FFh
.eh_frame:000000000000786B                 db 0FFh
.eh_frame:000000000000786C                 db  17h
.eh_frame:000000000000786D                 db    4
.eh_frame:000000000000786E                 db    0
.eh_frame:000000000000786F                 db    0
.eh_frame:0000000000007870                 db    0
.eh_frame:0000000000007871                 db  42h ; B
.eh_frame:0000000000007872                 db  0Eh
.eh_frame:0000000000007873                 db  10h
.eh_frame:0000000000007874                 db  8Fh
.eh_frame:0000000000007875                 db    2
.eh_frame:0000000000007876                 db  42h ; B
.eh_frame:0000000000007877                 db  0Eh
.eh_frame:0000000000007878                 db  18h
.eh_frame:0000000000007879                 db  8Eh
.eh_frame:000000000000787A                 db    3
.eh_frame:000000000000787B                 db  42h ; B
.eh_frame:000000000000787C                 db  0Eh
.eh_frame:000000000000787D                 db  20h
.eh_frame:000000000000787E                 db  8Dh
.eh_frame:000000000000787F                 db    4
.eh_frame:0000000000007880                 db  42h ; B
.eh_frame:0000000000007881                 db  0Eh
.eh_frame:0000000000007882                 db  28h ; (
.eh_frame:0000000000007883                 db  8Ch
.eh_frame:0000000000007884                 db    5
.eh_frame:0000000000007885                 db  44h ; D
.eh_frame:0000000000007886                 db  0Eh
.eh_frame:0000000000007887                 db  30h ; 0
.eh_frame:0000000000007888                 db  86h
.eh_frame:0000000000007889                 db    6
.eh_frame:000000000000788A                 db  41h ; A
.eh_frame:000000000000788B                 db  0Eh
.eh_frame:000000000000788C                 db  38h ; 8
.eh_frame:000000000000788D                 db  83h
.eh_frame:000000000000788E                 db    7
.eh_frame:000000000000788F                 db  4Ah ; J
.eh_frame:0000000000007890                 db  0Eh
.eh_frame:0000000000007891                 db  60h ; `
.eh_frame:0000000000007892                 db    2
.eh_frame:0000000000007893                 db 0DDh
.eh_frame:0000000000007894                 db  0Eh
.eh_frame:0000000000007895                 db  68h ; h
.eh_frame:0000000000007896                 db  57h ; W
.eh_frame:0000000000007897                 db  0Eh
.eh_frame:0000000000007898                 db  70h ; p
.eh_frame:0000000000007899                 db  42h ; B
.eh_frame:000000000000789A                 db  0Eh
.eh_frame:000000000000789B                 db  78h ; x
.eh_frame:000000000000789C                 db  42h ; B
.eh_frame:000000000000789D                 db  0Eh
.eh_frame:000000000000789E                 db  80h
.eh_frame:000000000000789F                 db    1
.eh_frame:00000000000078A0                 db  42h ; B
.eh_frame:00000000000078A1                 db  0Eh
.eh_frame:00000000000078A2                 db  88h
.eh_frame:00000000000078A3                 db    1
.eh_frame:00000000000078A4                 db  42h ; B
.eh_frame:00000000000078A5                 db  0Eh
.eh_frame:00000000000078A6                 db  90h
.eh_frame:00000000000078A7                 db    1
.eh_frame:00000000000078A8                 db  53h ; S
.eh_frame:00000000000078A9                 db  0Eh
.eh_frame:00000000000078AA                 db  60h ; `
.eh_frame:00000000000078AB                 db  44h ; D
.eh_frame:00000000000078AC                 db  0Ah
.eh_frame:00000000000078AD                 db  0Eh
.eh_frame:00000000000078AE                 db  38h ; 8
.eh_frame:00000000000078AF                 db  41h ; A
.eh_frame:00000000000078B0                 db  0Eh
.eh_frame:00000000000078B1                 db  30h ; 0
.eh_frame:00000000000078B2                 db  41h ; A
.eh_frame:00000000000078B3                 db  0Eh
.eh_frame:00000000000078B4                 db  28h ; (
.eh_frame:00000000000078B5                 db  42h ; B
.eh_frame:00000000000078B6                 db  0Eh
.eh_frame:00000000000078B7                 db  20h
.eh_frame:00000000000078B8                 db  42h ; B
.eh_frame:00000000000078B9                 db  0Eh
.eh_frame:00000000000078BA                 db  18h
.eh_frame:00000000000078BB                 db  42h ; B
.eh_frame:00000000000078BC                 db  0Eh
.eh_frame:00000000000078BD                 db  10h
.eh_frame:00000000000078BE                 db  42h ; B
.eh_frame:00000000000078BF                 db  0Eh
.eh_frame:00000000000078C0                 db    8
.eh_frame:00000000000078C1                 db  44h ; D
.eh_frame:00000000000078C2                 db  0Bh
.eh_frame:00000000000078C3                 db    2
.eh_frame:00000000000078C4                 db  78h ; x
.eh_frame:00000000000078C5                 db  0Ah
.eh_frame:00000000000078C6                 db  0Eh
.eh_frame:00000000000078C7                 db  68h ; h
.eh_frame:00000000000078C8                 db  48h ; H
.eh_frame:00000000000078C9                 db  0Bh
.eh_frame:00000000000078CA                 db  5Ah ; Z
.eh_frame:00000000000078CB                 db  0Ah
.eh_frame:00000000000078CC                 db  0Eh
.eh_frame:00000000000078CD                 db  38h ; 8
.eh_frame:00000000000078CE                 db  47h ; G
.eh_frame:00000000000078CF                 db  0Eh
.eh_frame:00000000000078D0                 db  30h ; 0
.eh_frame:00000000000078D1                 db  41h ; A
.eh_frame:00000000000078D2                 db  0Eh
.eh_frame:00000000000078D3                 db  28h ; (
.eh_frame:00000000000078D4                 db  42h ; B
.eh_frame:00000000000078D5                 db  0Eh
.eh_frame:00000000000078D6                 db  20h
.eh_frame:00000000000078D7                 db  42h ; B
.eh_frame:00000000000078D8                 db  0Eh
.eh_frame:00000000000078D9                 db  18h
.eh_frame:00000000000078DA                 db  42h ; B
.eh_frame:00000000000078DB                 db  0Eh
.eh_frame:00000000000078DC                 db  10h
.eh_frame:00000000000078DD                 db  42h ; B
.eh_frame:00000000000078DE                 db  0Eh
.eh_frame:00000000000078DF                 db    8
.eh_frame:00000000000078E0                 db  56h ; V
.eh_frame:00000000000078E1                 db  0Bh
.eh_frame:00000000000078E2                 db  5Eh ; ^
.eh_frame:00000000000078E3                 db  0Ah
.eh_frame:00000000000078E4                 db  0Eh
.eh_frame:00000000000078E5                 db  38h ; 8
.eh_frame:00000000000078E6                 db  52h ; R
.eh_frame:00000000000078E7                 db  0Eh
.eh_frame:00000000000078E8                 db  30h ; 0
.eh_frame:00000000000078E9                 db  41h ; A
.eh_frame:00000000000078EA                 db  0Eh
.eh_frame:00000000000078EB                 db  28h ; (
.eh_frame:00000000000078EC                 db  42h ; B
.eh_frame:00000000000078ED                 db  0Eh
.eh_frame:00000000000078EE                 db  20h
.eh_frame:00000000000078EF                 db  42h ; B
.eh_frame:00000000000078F0                 db  0Eh
.eh_frame:00000000000078F1                 db  18h
.eh_frame:00000000000078F2                 db  42h ; B
.eh_frame:00000000000078F3                 db  0Eh
.eh_frame:00000000000078F4                 db  10h
.eh_frame:00000000000078F5                 db  42h ; B
.eh_frame:00000000000078F6                 db  0Eh
.eh_frame:00000000000078F7                 db    8
.eh_frame:00000000000078F8                 db  4Fh ; O
.eh_frame:00000000000078F9                 db  0Bh
.eh_frame:00000000000078FA                 db  62h ; b
.eh_frame:00000000000078FB                 db  0Ah
.eh_frame:00000000000078FC                 db  0Eh
.eh_frame:00000000000078FD                 db  38h ; 8
.eh_frame:00000000000078FE                 db  50h ; P
.eh_frame:00000000000078FF                 db  0Eh
.eh_frame:0000000000007900                 db  30h ; 0
.eh_frame:0000000000007901                 db  41h ; A
.eh_frame:0000000000007902                 db  0Eh
.eh_frame:0000000000007903                 db  28h ; (
.eh_frame:0000000000007904                 db  42h ; B
.eh_frame:0000000000007905                 db  0Eh
.eh_frame:0000000000007906                 db  20h
.eh_frame:0000000000007907                 db  42h ; B
.eh_frame:0000000000007908                 db  0Eh
.eh_frame:0000000000007909                 db  18h
.eh_frame:000000000000790A                 db  42h ; B
.eh_frame:000000000000790B                 db  0Eh
.eh_frame:000000000000790C                 db  10h
.eh_frame:000000000000790D                 db  42h ; B
.eh_frame:000000000000790E                 db  0Eh
.eh_frame:000000000000790F                 db    8
.eh_frame:0000000000007910                 db  55h ; U
.eh_frame:0000000000007911                 db  0Bh
.eh_frame:0000000000007912                 db  66h ; f
.eh_frame:0000000000007913                 db  0Eh
.eh_frame:0000000000007914                 db  68h ; h
.eh_frame:0000000000007915                 db  42h ; B
.eh_frame:0000000000007916                 db  0Eh
.eh_frame:0000000000007917                 db  70h ; p
.eh_frame:0000000000007918                 db  5Ch ; \
.eh_frame:0000000000007919                 db  0Eh
.eh_frame:000000000000791A                 db  68h ; h
.eh_frame:000000000000791B                 db  41h ; A
.eh_frame:000000000000791C                 db  0Eh
.eh_frame:000000000000791D                 db  60h ; `
.eh_frame:000000000000791E                 db  44h ; D
.eh_frame:000000000000791F                 db  0Ah
.eh_frame:0000000000007920                 db  0Eh
.eh_frame:0000000000007921                 db  38h ; 8
.eh_frame:0000000000007922                 db  41h ; A
.eh_frame:0000000000007923                 db  0Eh
.eh_frame:0000000000007924                 db  30h ; 0
.eh_frame:0000000000007925                 db  41h ; A
.eh_frame:0000000000007926                 db  0Eh
.eh_frame:0000000000007927                 db  28h ; (
.eh_frame:0000000000007928                 db  42h ; B
.eh_frame:0000000000007929                 db  0Eh
.eh_frame:000000000000792A                 db  20h
.eh_frame:000000000000792B                 db  42h ; B
.eh_frame:000000000000792C                 db  0Eh
.eh_frame:000000000000792D                 db  18h
.eh_frame:000000000000792E                 db  42h ; B
.eh_frame:000000000000792F                 db  0Eh
.eh_frame:0000000000007930                 db  10h
.eh_frame:0000000000007931                 db  42h ; B
.eh_frame:0000000000007932                 db  0Eh
.eh_frame:0000000000007933                 db    8
.eh_frame:0000000000007934                 db  45h ; E
.eh_frame:0000000000007935                 db  0Bh
.eh_frame:0000000000007936                 db  68h ; h
.eh_frame:0000000000007937                 db  0Ah
.eh_frame:0000000000007938                 db  0Eh
.eh_frame:0000000000007939                 db  68h ; h
.eh_frame:000000000000793A                 db  48h ; H
.eh_frame:000000000000793B                 db  0Bh
.eh_frame:000000000000793C                 db  72h ; r
.eh_frame:000000000000793D                 db  0Eh
.eh_frame:000000000000793E                 db  68h ; h
.eh_frame:000000000000793F                 db  45h ; E
.eh_frame:0000000000007940                 db  0Eh
.eh_frame:0000000000007941                 db  70h ; p
.eh_frame:0000000000007942                 db  42h ; B
.eh_frame:0000000000007943                 db  0Eh
.eh_frame:0000000000007944                 db  78h ; x
.eh_frame:0000000000007945                 db  42h ; B
.eh_frame:0000000000007946                 db  0Eh
.eh_frame:0000000000007947                 db  80h
.eh_frame:0000000000007948                 db    1
.eh_frame:0000000000007949                 db  5Eh ; ^
.eh_frame:000000000000794A                 db  0Eh
.eh_frame:000000000000794B                 db  60h ; `
.eh_frame:000000000000794C                 db  44h ; D
.eh_frame:000000000000794D                 db  0Ah
.eh_frame:000000000000794E                 db  0Eh
.eh_frame:000000000000794F                 db  38h ; 8
.eh_frame:0000000000007950                 db  41h ; A
.eh_frame:0000000000007951                 db  0Eh
.eh_frame:0000000000007952                 db  30h ; 0
.eh_frame:0000000000007953                 db  41h ; A
.eh_frame:0000000000007954                 db  0Eh
.eh_frame:0000000000007955                 db  28h ; (
.eh_frame:0000000000007956                 db  42h ; B
.eh_frame:0000000000007957                 db  0Eh
.eh_frame:0000000000007958                 db  20h
.eh_frame:0000000000007959                 db  42h ; B
.eh_frame:000000000000795A                 db  0Eh
.eh_frame:000000000000795B                 db  18h
.eh_frame:000000000000795C                 db  42h ; B
.eh_frame:000000000000795D                 db  0Eh
.eh_frame:000000000000795E                 db  10h
.eh_frame:000000000000795F                 db  42h ; B
.eh_frame:0000000000007960                 db  0Eh
.eh_frame:0000000000007961                 db    8
.eh_frame:0000000000007962                 db  41h ; A
.eh_frame:0000000000007963                 db  0Bh
.eh_frame:0000000000007964                 db  79h ; y
.eh_frame:0000000000007965                 db  0Ah
.eh_frame:0000000000007966                 db  0Eh
.eh_frame:0000000000007967                 db  68h ; h
.eh_frame:0000000000007968                 db  42h ; B
.eh_frame:0000000000007969                 db  0Eh
.eh_frame:000000000000796A                 db  70h ; p
.eh_frame:000000000000796B                 db  42h ; B
.eh_frame:000000000000796C                 db  0Eh
.eh_frame:000000000000796D                 db  78h ; x
.eh_frame:000000000000796E                 db  42h ; B
.eh_frame:000000000000796F                 db  0Eh
.eh_frame:0000000000007970                 db  80h
.eh_frame:0000000000007971                 db    1
.eh_frame:0000000000007972                 db  51h ; Q
.eh_frame:0000000000007973                 db  0Bh
.eh_frame:0000000000007974                 db  10h
.eh_frame:0000000000007975                 db    0
.eh_frame:0000000000007976                 db    0
.eh_frame:0000000000007977                 db    0
.eh_frame:0000000000007978                 db 0F0h
.eh_frame:0000000000007979                 db    7
.eh_frame:000000000000797A                 db    0
.eh_frame:000000000000797B                 db    0
.eh_frame:000000000000797C                 db 0D4h
.eh_frame:000000000000797D                 db 0D6h
.eh_frame:000000000000797E                 db 0FFh
.eh_frame:000000000000797F                 db 0FFh
.eh_frame:0000000000007980                 db  20h
.eh_frame:0000000000007981                 db    0
.eh_frame:0000000000007982                 db    0
.eh_frame:0000000000007983                 db    0
.eh_frame:0000000000007984                 db    0
.eh_frame:0000000000007985                 db    0
.eh_frame:0000000000007986                 db    0
.eh_frame:0000000000007987                 db    0
.eh_frame:0000000000007988                 db  18h
.eh_frame:0000000000007989                 db    0
.eh_frame:000000000000798A                 db    0
.eh_frame:000000000000798B                 db    0
.eh_frame:000000000000798C                 db    4
.eh_frame:000000000000798D                 db    8
.eh_frame:000000000000798E                 db    0
.eh_frame:000000000000798F                 db    0
.eh_frame:0000000000007990                 db 0E0h
.eh_frame:0000000000007991                 db 0D6h
.eh_frame:0000000000007992                 db 0FFh
.eh_frame:0000000000007993                 db 0FFh
.eh_frame:0000000000007994                 db  78h ; x
.eh_frame:0000000000007995                 db    0
.eh_frame:0000000000007996                 db    0
.eh_frame:0000000000007997                 db    0
.eh_frame:0000000000007998                 db    0
.eh_frame:0000000000007999                 db  44h ; D
.eh_frame:000000000000799A                 db  0Eh
.eh_frame:000000000000799B                 db  70h ; p
.eh_frame:000000000000799C                 db    2
.eh_frame:000000000000799D                 db  60h ; `
.eh_frame:000000000000799E                 db  0Ah
.eh_frame:000000000000799F                 db  0Eh
.eh_frame:00000000000079A0                 db    8
.eh_frame:00000000000079A1                 db  41h ; A
.eh_frame:00000000000079A2                 db  0Bh
.eh_frame:00000000000079A3                 db    0
.eh_frame:00000000000079A4                 db  28h ; (
.eh_frame:00000000000079A5                 db    0
.eh_frame:00000000000079A6                 db    0
.eh_frame:00000000000079A7                 db    0
.eh_frame:00000000000079A8                 db  20h
.eh_frame:00000000000079A9                 db    8
.eh_frame:00000000000079AA                 db    0
.eh_frame:00000000000079AB                 db    0
.eh_frame:00000000000079AC                 db  44h ; D
.eh_frame:00000000000079AD                 db 0D7h
.eh_frame:00000000000079AE                 db 0FFh
.eh_frame:00000000000079AF                 db 0FFh
.eh_frame:00000000000079B0                 db 0D5h
.eh_frame:00000000000079B1                 db    0
.eh_frame:00000000000079B2                 db    0
.eh_frame:00000000000079B3                 db    0
.eh_frame:00000000000079B4                 db    0
.eh_frame:00000000000079B5                 db  41h ; A
.eh_frame:00000000000079B6                 db  0Eh
.eh_frame:00000000000079B7                 db  10h
.eh_frame:00000000000079B8                 db  86h
.eh_frame:00000000000079B9                 db    2
.eh_frame:00000000000079BA                 db  41h ; A
.eh_frame:00000000000079BB                 db  0Eh
.eh_frame:00000000000079BC                 db  18h
.eh_frame:00000000000079BD                 db  83h
.eh_frame:00000000000079BE                 db    3
.eh_frame:00000000000079BF                 db  50h ; P
.eh_frame:00000000000079C0                 db  0Eh
.eh_frame:00000000000079C1                 db 0D0h
.eh_frame:00000000000079C2                 db    1
.eh_frame:00000000000079C3                 db    2
.eh_frame:00000000000079C4                 db 0ABh
.eh_frame:00000000000079C5                 db  0Ah
.eh_frame:00000000000079C6                 db  0Eh
.eh_frame:00000000000079C7                 db  18h
.eh_frame:00000000000079C8                 db  41h ; A
.eh_frame:00000000000079C9                 db  0Eh
.eh_frame:00000000000079CA                 db  10h
.eh_frame:00000000000079CB                 db  41h ; A
.eh_frame:00000000000079CC                 db  0Eh
.eh_frame:00000000000079CD                 db    8
.eh_frame:00000000000079CE                 db  41h ; A
.eh_frame:00000000000079CF                 db  0Bh
.eh_frame:00000000000079D0                 db  1Ch
.eh_frame:00000000000079D1                 db    0
.eh_frame:00000000000079D2                 db    0
.eh_frame:00000000000079D3                 db    0
.eh_frame:00000000000079D4                 db  4Ch ; L
.eh_frame:00000000000079D5                 db    8
.eh_frame:00000000000079D6                 db    0
.eh_frame:00000000000079D7                 db    0
.eh_frame:00000000000079D8                 db 0F8h
.eh_frame:00000000000079D9                 db 0D7h
.eh_frame:00000000000079DA                 db 0FFh
.eh_frame:00000000000079DB                 db 0FFh
.eh_frame:00000000000079DC                 db  80h
.eh_frame:00000000000079DD                 db    0
.eh_frame:00000000000079DE                 db    0
.eh_frame:00000000000079DF                 db    0
.eh_frame:00000000000079E0                 db    0
.eh_frame:00000000000079E1                 db  41h ; A
.eh_frame:00000000000079E2                 db  0Eh
.eh_frame:00000000000079E3                 db  10h
.eh_frame:00000000000079E4                 db  83h
.eh_frame:00000000000079E5                 db    2
.eh_frame:00000000000079E6                 db    2
.eh_frame:00000000000079E7                 db  7Ah ; z
.eh_frame:00000000000079E8                 db  0Eh
.eh_frame:00000000000079E9                 db    8
.eh_frame:00000000000079EA                 db    0
.eh_frame:00000000000079EB                 db    0
.eh_frame:00000000000079EC                 db    0
.eh_frame:00000000000079ED                 db    0
.eh_frame:00000000000079EE                 db    0
.eh_frame:00000000000079EF                 db    0
.eh_frame:00000000000079F0                 db  18h
.eh_frame:00000000000079F1                 db    0
.eh_frame:00000000000079F2                 db    0
.eh_frame:00000000000079F3                 db    0
.eh_frame:00000000000079F4                 db  6Ch ; l
.eh_frame:00000000000079F5                 db    8
.eh_frame:00000000000079F6                 db    0
.eh_frame:00000000000079F7                 db    0
.eh_frame:00000000000079F8                 db  58h ; X
.eh_frame:00000000000079F9                 db 0D8h
.eh_frame:00000000000079FA                 db 0FFh
.eh_frame:00000000000079FB                 db 0FFh
.eh_frame:00000000000079FC                 db  1Ah
.eh_frame:00000000000079FD                 db    0
.eh_frame:00000000000079FE                 db    0
.eh_frame:00000000000079FF                 db    0
.eh_frame:0000000000007A00                 db    0
.eh_frame:0000000000007A01                 db  41h ; A
.eh_frame:0000000000007A02                 db  0Eh
.eh_frame:0000000000007A03                 db  10h
.eh_frame:0000000000007A04                 db  83h
.eh_frame:0000000000007A05                 db    2
.eh_frame:0000000000007A06                 db  53h ; S
.eh_frame:0000000000007A07                 db  0Ah
.eh_frame:0000000000007A08                 db  0Eh
.eh_frame:0000000000007A09                 db    8
.eh_frame:0000000000007A0A                 db  41h ; A
.eh_frame:0000000000007A0B                 db  0Bh
.eh_frame:0000000000007A0C                 db  10h
.eh_frame:0000000000007A0D                 db    0
.eh_frame:0000000000007A0E                 db    0
.eh_frame:0000000000007A0F                 db    0
.eh_frame:0000000000007A10                 db  88h
.eh_frame:0000000000007A11                 db    8
.eh_frame:0000000000007A12                 db    0
.eh_frame:0000000000007A13                 db    0
.eh_frame:0000000000007A14                 db  5Ch ; \
.eh_frame:0000000000007A15                 db 0D8h
.eh_frame:0000000000007A16                 db 0FFh
.eh_frame:0000000000007A17                 db 0FFh
.eh_frame:0000000000007A18                 db  24h ; $
.eh_frame:0000000000007A19                 db    0
.eh_frame:0000000000007A1A                 db    0
.eh_frame:0000000000007A1B                 db    0
.eh_frame:0000000000007A1C                 db    0
.eh_frame:0000000000007A1D                 db  5Fh ; _
.eh_frame:0000000000007A1E                 db  0Eh
.eh_frame:0000000000007A1F                 db  10h
.eh_frame:0000000000007A20                 db  10h
.eh_frame:0000000000007A21                 db    0
.eh_frame:0000000000007A22                 db    0
.eh_frame:0000000000007A23                 db    0
.eh_frame:0000000000007A24                 db  9Ch
.eh_frame:0000000000007A25                 db    8
.eh_frame:0000000000007A26                 db    0
.eh_frame:0000000000007A27                 db    0
.eh_frame:0000000000007A28                 db  78h ; x
.eh_frame:0000000000007A29                 db 0D8h
.eh_frame:0000000000007A2A                 db 0FFh
.eh_frame:0000000000007A2B                 db 0FFh
.eh_frame:0000000000007A2C                 db    2
.eh_frame:0000000000007A2D                 db    0
.eh_frame:0000000000007A2E                 db    0
.eh_frame:0000000000007A2F                 db    0
.eh_frame:0000000000007A30                 db    0
.eh_frame:0000000000007A31                 db    0
.eh_frame:0000000000007A32                 db    0
.eh_frame:0000000000007A33                 db    0
.eh_frame:0000000000007A34                 db  20h
.eh_frame:0000000000007A35                 db    0
.eh_frame:0000000000007A36                 db    0
.eh_frame:0000000000007A37                 db    0
.eh_frame:0000000000007A38                 db 0B0h
.eh_frame:0000000000007A39                 db    8
.eh_frame:0000000000007A3A                 db    0
.eh_frame:0000000000007A3B                 db    0
.eh_frame:0000000000007A3C                 db  74h ; t
.eh_frame:0000000000007A3D                 db 0D8h
.eh_frame:0000000000007A3E                 db 0FFh
.eh_frame:0000000000007A3F                 db 0FFh
.eh_frame:0000000000007A40                 db  36h ; 6
.eh_frame:0000000000007A41                 db    0
.eh_frame:0000000000007A42                 db    0
.eh_frame:0000000000007A43                 db    0
.eh_frame:0000000000007A44                 db    0
.eh_frame:0000000000007A45                 db  44h ; D
.eh_frame:0000000000007A46                 db  0Eh
.eh_frame:0000000000007A47                 db  10h
.eh_frame:0000000000007A48                 db  83h
.eh_frame:0000000000007A49                 db    2
.eh_frame:0000000000007A4A                 db  5Dh ; ]
.eh_frame:0000000000007A4B                 db  0Ah
.eh_frame:0000000000007A4C                 db  0Eh
.eh_frame:0000000000007A4D                 db    8
.eh_frame:0000000000007A4E                 db  47h ; G
.eh_frame:0000000000007A4F                 db  0Bh
.eh_frame:0000000000007A50                 db  48h ; H
.eh_frame:0000000000007A51                 db  0Ah
.eh_frame:0000000000007A52                 db  0Eh
.eh_frame:0000000000007A53                 db    8
.eh_frame:0000000000007A54                 db  41h ; A
.eh_frame:0000000000007A55                 db  0Bh
.eh_frame:0000000000007A56                 db    0
.eh_frame:0000000000007A57                 db    0
.eh_frame:0000000000007A58                 db  10h
.eh_frame:0000000000007A59                 db    0
.eh_frame:0000000000007A5A                 db    0
.eh_frame:0000000000007A5B                 db    0
.eh_frame:0000000000007A5C                 db 0D4h
.eh_frame:0000000000007A5D                 db    8
.eh_frame:0000000000007A5E                 db    0
.eh_frame:0000000000007A5F                 db    0
.eh_frame:0000000000007A60                 db  90h
.eh_frame:0000000000007A61                 db 0D8h
.eh_frame:0000000000007A62                 db 0FFh
.eh_frame:0000000000007A63                 db 0FFh
.eh_frame:0000000000007A64                 db  24h ; $
.eh_frame:0000000000007A65                 db    0
.eh_frame:0000000000007A66                 db    0
.eh_frame:0000000000007A67                 db    0
.eh_frame:0000000000007A68                 db    0
.eh_frame:0000000000007A69                 db  5Fh ; _
.eh_frame:0000000000007A6A                 db  0Eh
.eh_frame:0000000000007A6B                 db  10h
.eh_frame:0000000000007A6C                 db  14h
.eh_frame:0000000000007A6D                 db    0
.eh_frame:0000000000007A6E                 db    0
.eh_frame:0000000000007A6F                 db    0
.eh_frame:0000000000007A70                 db 0E8h
.eh_frame:0000000000007A71                 db    8
.eh_frame:0000000000007A72                 db    0
.eh_frame:0000000000007A73                 db    0
.eh_frame:0000000000007A74                 db 0ACh
.eh_frame:0000000000007A75                 db 0D8h
.eh_frame:0000000000007A76                 db 0FFh
.eh_frame:0000000000007A77                 db 0FFh
.eh_frame:0000000000007A78                 db  82h
.eh_frame:0000000000007A79                 db    0
.eh_frame:0000000000007A7A                 db    0
.eh_frame:0000000000007A7B                 db    0
.eh_frame:0000000000007A7C                 db    0
.eh_frame:0000000000007A7D                 db    2
.eh_frame:0000000000007A7E                 db  5Fh ; _
.eh_frame:0000000000007A7F                 db  0Eh
.eh_frame:0000000000007A80                 db  10h
.eh_frame:0000000000007A81                 db  49h ; I
.eh_frame:0000000000007A82                 db  0Eh
.eh_frame:0000000000007A83                 db    8
.eh_frame:0000000000007A84                 db  14h
.eh_frame:0000000000007A85                 db    0
.eh_frame:0000000000007A86                 db    0
.eh_frame:0000000000007A87                 db    0
.eh_frame:0000000000007A88                 db    0
.eh_frame:0000000000007A89                 db    9
.eh_frame:0000000000007A8A                 db    0
.eh_frame:0000000000007A8B                 db    0
.eh_frame:0000000000007A8C                 db  24h ; $
.eh_frame:0000000000007A8D                 db 0D9h
.eh_frame:0000000000007A8E                 db 0FFh
.eh_frame:0000000000007A8F                 db 0FFh
.eh_frame:0000000000007A90                 db  4Ah ; J
.eh_frame:0000000000007A91                 db    0
.eh_frame:0000000000007A92                 db    0
.eh_frame:0000000000007A93                 db    0
.eh_frame:0000000000007A94                 db    0
.eh_frame:0000000000007A95                 db    2
.eh_frame:0000000000007A96                 db  45h ; E
.eh_frame:0000000000007A97                 db  0Eh
.eh_frame:0000000000007A98                 db  10h
.eh_frame:0000000000007A99                 db    0
.eh_frame:0000000000007A9A                 db    0
.eh_frame:0000000000007A9B                 db    0
.eh_frame:0000000000007A9C                 db  18h
.eh_frame:0000000000007A9D                 db    0
.eh_frame:0000000000007A9E                 db    0
.eh_frame:0000000000007A9F                 db    0
.eh_frame:0000000000007AA0                 db  18h
.eh_frame:0000000000007AA1                 db    9
.eh_frame:0000000000007AA2                 db    0
.eh_frame:0000000000007AA3                 db    0
.eh_frame:0000000000007AA4                 db  5Ch ; \
.eh_frame:0000000000007AA5                 db 0D9h
.eh_frame:0000000000007AA6                 db 0FFh
.eh_frame:0000000000007AA7                 db 0FFh
.eh_frame:0000000000007AA8                 db  17h
.eh_frame:0000000000007AA9                 db    0
.eh_frame:0000000000007AAA                 db    0
.eh_frame:0000000000007AAB                 db    0
.eh_frame:0000000000007AAC                 db    0
.eh_frame:0000000000007AAD                 db  41h ; A
.eh_frame:0000000000007AAE                 db  0Eh
.eh_frame:0000000000007AAF                 db  10h
.eh_frame:0000000000007AB0                 db  83h
.eh_frame:0000000000007AB1                 db    2
.eh_frame:0000000000007AB2                 db  51h ; Q
.eh_frame:0000000000007AB3                 db  0Eh
.eh_frame:0000000000007AB4                 db    8
.eh_frame:0000000000007AB5                 db    0
.eh_frame:0000000000007AB6                 db    0
.eh_frame:0000000000007AB7                 db    0
.eh_frame:0000000000007AB8                 db  18h
.eh_frame:0000000000007AB9                 db    0
.eh_frame:0000000000007ABA                 db    0
.eh_frame:0000000000007ABB                 db    0
.eh_frame:0000000000007ABC                 db  34h ; 4
.eh_frame:0000000000007ABD                 db    9
.eh_frame:0000000000007ABE                 db    0
.eh_frame:0000000000007ABF                 db    0
.eh_frame:0000000000007AC0                 db  60h ; `
.eh_frame:0000000000007AC1                 db 0D9h
.eh_frame:0000000000007AC2                 db 0FFh
.eh_frame:0000000000007AC3                 db 0FFh
.eh_frame:0000000000007AC4                 db  2Eh ; .
.eh_frame:0000000000007AC5                 db    0
.eh_frame:0000000000007AC6                 db    0
.eh_frame:0000000000007AC7                 db    0
.eh_frame:0000000000007AC8                 db    0
.eh_frame:0000000000007AC9                 db  47h ; G
.eh_frame:0000000000007ACA                 db  0Eh
.eh_frame:0000000000007ACB                 db  10h
.eh_frame:0000000000007ACC                 db  61h ; a
.eh_frame:0000000000007ACD                 db  0Ah
.eh_frame:0000000000007ACE                 db  0Eh
.eh_frame:0000000000007ACF                 db    8
.eh_frame:0000000000007AD0                 db  41h ; A
.eh_frame:0000000000007AD1                 db  0Bh
.eh_frame:0000000000007AD2                 db    0
.eh_frame:0000000000007AD3                 db    0
.eh_frame:0000000000007AD4                 db  24h ; $
.eh_frame:0000000000007AD5                 db    0
.eh_frame:0000000000007AD6                 db    0
.eh_frame:0000000000007AD7                 db    0
.eh_frame:0000000000007AD8                 db  50h ; P
.eh_frame:0000000000007AD9                 db    9
.eh_frame:0000000000007ADA                 db    0
.eh_frame:0000000000007ADB                 db    0
.eh_frame:0000000000007ADC                 db  74h ; t
.eh_frame:0000000000007ADD                 db 0D9h
.eh_frame:0000000000007ADE                 db 0FFh
.eh_frame:0000000000007ADF                 db 0FFh
.eh_frame:0000000000007AE0                 db  28h ; (
.eh_frame:0000000000007AE1                 db    0
.eh_frame:0000000000007AE2                 db    0
.eh_frame:0000000000007AE3                 db    0
.eh_frame:0000000000007AE4                 db    0
.eh_frame:0000000000007AE5                 db  41h ; A
.eh_frame:0000000000007AE6                 db  0Eh
.eh_frame:0000000000007AE7                 db  10h
.eh_frame:0000000000007AE8                 db  86h
.eh_frame:0000000000007AE9                 db    2
.eh_frame:0000000000007AEA                 db  41h ; A
.eh_frame:0000000000007AEB                 db  0Eh
.eh_frame:0000000000007AEC                 db  18h
.eh_frame:0000000000007AED                 db  83h
.eh_frame:0000000000007AEE                 db    3
.eh_frame:0000000000007AEF                 db  4Dh ; M
.eh_frame:0000000000007AF0                 db  0Eh
.eh_frame:0000000000007AF1                 db  20h
.eh_frame:0000000000007AF2                 db  49h ; I
.eh_frame:0000000000007AF3                 db  0Eh
.eh_frame:0000000000007AF4                 db  18h
.eh_frame:0000000000007AF5                 db  47h ; G
.eh_frame:0000000000007AF6                 db  0Eh
.eh_frame:0000000000007AF7                 db  10h
.eh_frame:0000000000007AF8                 db  41h ; A
.eh_frame:0000000000007AF9                 db  0Eh
.eh_frame:0000000000007AFA                 db    8
.eh_frame:0000000000007AFB                 db    0
.eh_frame:0000000000007AFC                 db  18h
.eh_frame:0000000000007AFD                 db    0
.eh_frame:0000000000007AFE                 db    0
.eh_frame:0000000000007AFF                 db    0
.eh_frame:0000000000007B00                 db  78h ; x
.eh_frame:0000000000007B01                 db    9
.eh_frame:0000000000007B02                 db    0
.eh_frame:0000000000007B03                 db    0
.eh_frame:0000000000007B04                 db  7Ch ; |
.eh_frame:0000000000007B05                 db 0D9h
.eh_frame:0000000000007B06                 db 0FFh
.eh_frame:0000000000007B07                 db 0FFh
.eh_frame:0000000000007B08                 db  13h
.eh_frame:0000000000007B09                 db    0
.eh_frame:0000000000007B0A                 db    0
.eh_frame:0000000000007B0B                 db    0
.eh_frame:0000000000007B0C                 db    0
.eh_frame:0000000000007B0D                 db  41h ; A
.eh_frame:0000000000007B0E                 db  0Eh
.eh_frame:0000000000007B0F                 db  10h
.eh_frame:0000000000007B10                 db  83h
.eh_frame:0000000000007B11                 db    2
.eh_frame:0000000000007B12                 db  50h ; P
.eh_frame:0000000000007B13                 db  0Eh
.eh_frame:0000000000007B14                 db    8
.eh_frame:0000000000007B15                 db    0
.eh_frame:0000000000007B16                 db    0
.eh_frame:0000000000007B17                 db    0
.eh_frame:0000000000007B18                 db  14h
.eh_frame:0000000000007B19                 db    0
.eh_frame:0000000000007B1A                 db    0
.eh_frame:0000000000007B1B                 db    0
.eh_frame:0000000000007B1C                 db  94h
.eh_frame:0000000000007B1D                 db    9
.eh_frame:0000000000007B1E                 db    0
.eh_frame:0000000000007B1F                 db    0
.eh_frame:0000000000007B20                 db  80h
.eh_frame:0000000000007B21                 db 0D9h
.eh_frame:0000000000007B22                 db 0FFh
.eh_frame:0000000000007B23                 db 0FFh
.eh_frame:0000000000007B24                 db  35h ; 5
.eh_frame:0000000000007B25                 db    0
.eh_frame:0000000000007B26                 db    0
.eh_frame:0000000000007B27                 db    0
.eh_frame:0000000000007B28                 db    0
.eh_frame:0000000000007B29                 db  4Bh ; K
.eh_frame:0000000000007B2A                 db  0Eh
.eh_frame:0000000000007B2B                 db  10h
.eh_frame:0000000000007B2C                 db    0
.eh_frame:0000000000007B2D                 db    0
.eh_frame:0000000000007B2E                 db    0
.eh_frame:0000000000007B2F                 db    0
.eh_frame:0000000000007B30                 db  1Ch
.eh_frame:0000000000007B31                 db    0
.eh_frame:0000000000007B32                 db    0
.eh_frame:0000000000007B33                 db    0
.eh_frame:0000000000007B34                 db 0ACh
.eh_frame:0000000000007B35                 db    9
.eh_frame:0000000000007B36                 db    0
.eh_frame:0000000000007B37                 db    0
.eh_frame:0000000000007B38                 db 0A8h
.eh_frame:0000000000007B39                 db 0D9h
.eh_frame:0000000000007B3A                 db 0FFh
.eh_frame:0000000000007B3B                 db 0FFh
.eh_frame:0000000000007B3C                 db  27h ; '
.eh_frame:0000000000007B3D                 db    0
.eh_frame:0000000000007B3E                 db    0
.eh_frame:0000000000007B3F                 db    0
.eh_frame:0000000000007B40                 db    0
.eh_frame:0000000000007B41                 db  41h ; A
.eh_frame:0000000000007B42                 db  0Eh
.eh_frame:0000000000007B43                 db  10h
.eh_frame:0000000000007B44                 db  83h
.eh_frame:0000000000007B45                 db    2
.eh_frame:0000000000007B46                 db  4Fh ; O
.eh_frame:0000000000007B47                 db  0Ah
.eh_frame:0000000000007B48                 db  0Eh
.eh_frame:0000000000007B49                 db    8
.eh_frame:0000000000007B4A                 db  48h ; H
.eh_frame:0000000000007B4B                 db  0Bh
.eh_frame:0000000000007B4C                 db    0
.eh_frame:0000000000007B4D                 db    0
.eh_frame:0000000000007B4E                 db    0
.eh_frame:0000000000007B4F                 db    0
.eh_frame:0000000000007B50                 db  4Ch ; L
.eh_frame:0000000000007B51                 db    0
.eh_frame:0000000000007B52                 db    0
.eh_frame:0000000000007B53                 db    0
.eh_frame:0000000000007B54                 db 0CCh
.eh_frame:0000000000007B55                 db    9
.eh_frame:0000000000007B56                 db    0
.eh_frame:0000000000007B57                 db    0
.eh_frame:0000000000007B58                 db 0B8h
.eh_frame:0000000000007B59                 db 0D9h
.eh_frame:0000000000007B5A                 db 0FFh
.eh_frame:0000000000007B5B                 db 0FFh
.eh_frame:0000000000007B5C                 db  1Ch
.eh_frame:0000000000007B5D                 db    4
.eh_frame:0000000000007B5E                 db    0
.eh_frame:0000000000007B5F                 db    0
.eh_frame:0000000000007B60                 db    0
.eh_frame:0000000000007B61                 db  42h ; B
.eh_frame:0000000000007B62                 db  0Eh
.eh_frame:0000000000007B63                 db  10h
.eh_frame:0000000000007B64                 db  8Fh
.eh_frame:0000000000007B65                 db    2
.eh_frame:0000000000007B66                 db  42h ; B
.eh_frame:0000000000007B67                 db  0Eh
.eh_frame:0000000000007B68                 db  18h
.eh_frame:0000000000007B69                 db  8Eh
.eh_frame:0000000000007B6A                 db    3
.eh_frame:0000000000007B6B                 db  42h ; B
.eh_frame:0000000000007B6C                 db  0Eh
.eh_frame:0000000000007B6D                 db  20h
.eh_frame:0000000000007B6E                 db  8Dh
.eh_frame:0000000000007B6F                 db    4
.eh_frame:0000000000007B70                 db  42h ; B
.eh_frame:0000000000007B71                 db  0Eh
.eh_frame:0000000000007B72                 db  28h ; (
.eh_frame:0000000000007B73                 db  8Ch
.eh_frame:0000000000007B74                 db    5
.eh_frame:0000000000007B75                 db  41h ; A
.eh_frame:0000000000007B76                 db  0Eh
.eh_frame:0000000000007B77                 db  30h ; 0
.eh_frame:0000000000007B78                 db  86h
.eh_frame:0000000000007B79                 db    6
.eh_frame:0000000000007B7A                 db  41h ; A
.eh_frame:0000000000007B7B                 db  0Eh
.eh_frame:0000000000007B7C                 db  38h ; 8
.eh_frame:0000000000007B7D                 db  83h
.eh_frame:0000000000007B7E                 db    7
.eh_frame:0000000000007B7F                 db  44h ; D
.eh_frame:0000000000007B80                 db  0Eh
.eh_frame:0000000000007B81                 db  60h ; `
.eh_frame:0000000000007B82                 db    2
.eh_frame:0000000000007B83                 db 0E9h
.eh_frame:0000000000007B84                 db  0Ah
.eh_frame:0000000000007B85                 db  0Eh
.eh_frame:0000000000007B86                 db  38h ; 8
.eh_frame:0000000000007B87                 db  41h ; A
.eh_frame:0000000000007B88                 db  0Eh
.eh_frame:0000000000007B89                 db  30h ; 0
.eh_frame:0000000000007B8A                 db  41h ; A
.eh_frame:0000000000007B8B                 db  0Eh
.eh_frame:0000000000007B8C                 db  28h ; (
.eh_frame:0000000000007B8D                 db  42h ; B
.eh_frame:0000000000007B8E                 db  0Eh
.eh_frame:0000000000007B8F                 db  20h
.eh_frame:0000000000007B90                 db  42h ; B
.eh_frame:0000000000007B91                 db  0Eh
.eh_frame:0000000000007B92                 db  18h
.eh_frame:0000000000007B93                 db  42h ; B
.eh_frame:0000000000007B94                 db  0Eh
.eh_frame:0000000000007B95                 db  10h
.eh_frame:0000000000007B96                 db  42h ; B
.eh_frame:0000000000007B97                 db  0Eh
.eh_frame:0000000000007B98                 db    8
.eh_frame:0000000000007B99                 db  47h ; G
.eh_frame:0000000000007B9A                 db  0Bh
.eh_frame:0000000000007B9B                 db    0
.eh_frame:0000000000007B9C                 db    0
.eh_frame:0000000000007B9D                 db    0
.eh_frame:0000000000007B9E                 db    0
.eh_frame:0000000000007B9F                 db    0
.eh_frame:0000000000007BA0                 db  3Ch ; <
.eh_frame:0000000000007BA1                 db    0
.eh_frame:0000000000007BA2                 db    0
.eh_frame:0000000000007BA3                 db    0
.eh_frame:0000000000007BA4                 db  1Ch
.eh_frame:0000000000007BA5                 db  0Ah
.eh_frame:0000000000007BA6                 db    0
.eh_frame:0000000000007BA7                 db    0
.eh_frame:0000000000007BA8                 db  88h
.eh_frame:0000000000007BA9                 db 0DDh
.eh_frame:0000000000007BAA                 db 0FFh
.eh_frame:0000000000007BAB                 db 0FFh
.eh_frame:0000000000007BAC                 db  83h
.eh_frame:0000000000007BAD                 db    0
.eh_frame:0000000000007BAE                 db    0
.eh_frame:0000000000007BAF                 db    0
.eh_frame:0000000000007BB0                 db    0
.eh_frame:0000000000007BB1                 db  42h ; B
.eh_frame:0000000000007BB2                 db  0Eh
.eh_frame:0000000000007BB3                 db  10h
.eh_frame:0000000000007BB4                 db  8Dh
.eh_frame:0000000000007BB5                 db    2
.eh_frame:0000000000007BB6                 db  42h ; B
.eh_frame:0000000000007BB7                 db  0Eh
.eh_frame:0000000000007BB8                 db  18h
.eh_frame:0000000000007BB9                 db  8Ch
.eh_frame:0000000000007BBA                 db    3
.eh_frame:0000000000007BBB                 db  44h ; D
.eh_frame:0000000000007BBC                 db  0Eh
.eh_frame:0000000000007BBD                 db  20h
.eh_frame:0000000000007BBE                 db  86h
.eh_frame:0000000000007BBF                 db    4
.eh_frame:0000000000007BC0                 db  41h ; A
.eh_frame:0000000000007BC1                 db  0Eh
.eh_frame:0000000000007BC2                 db  28h ; (
.eh_frame:0000000000007BC3                 db  83h
.eh_frame:0000000000007BC4                 db    5
.eh_frame:0000000000007BC5                 db  4Ah ; J
.eh_frame:0000000000007BC6                 db  0Eh
.eh_frame:0000000000007BC7                 db  40h ; @
.eh_frame:0000000000007BC8                 db    2
.eh_frame:0000000000007BC9                 db  64h ; d
.eh_frame:0000000000007BCA                 db  0Ah
.eh_frame:0000000000007BCB                 db  0Eh
.eh_frame:0000000000007BCC                 db  28h ; (
.eh_frame:0000000000007BCD                 db  41h ; A
.eh_frame:0000000000007BCE                 db  0Eh
.eh_frame:0000000000007BCF                 db  20h
.eh_frame:0000000000007BD0                 db  41h ; A
.eh_frame:0000000000007BD1                 db  0Eh
.eh_frame:0000000000007BD2                 db  18h
.eh_frame:0000000000007BD3                 db  42h ; B
.eh_frame:0000000000007BD4                 db  0Eh
.eh_frame:0000000000007BD5                 db  10h
.eh_frame:0000000000007BD6                 db  42h ; B
.eh_frame:0000000000007BD7                 db  0Eh
.eh_frame:0000000000007BD8                 db    8
.eh_frame:0000000000007BD9                 db  41h ; A
.eh_frame:0000000000007BDA                 db  0Bh
.eh_frame:0000000000007BDB                 db    0
.eh_frame:0000000000007BDC                 db    0
.eh_frame:0000000000007BDD                 db    0
.eh_frame:0000000000007BDE                 db    0
.eh_frame:0000000000007BDF                 db    0
.eh_frame:0000000000007BE0                 db  4Ch ; L
.eh_frame:0000000000007BE1                 db    0
.eh_frame:0000000000007BE2                 db    0
.eh_frame:0000000000007BE3                 db    0
.eh_frame:0000000000007BE4                 db  5Ch ; \
.eh_frame:0000000000007BE5                 db  0Ah
.eh_frame:0000000000007BE6                 db    0
.eh_frame:0000000000007BE7                 db    0
.eh_frame:0000000000007BE8                 db 0D8h
.eh_frame:0000000000007BE9                 db 0DDh
.eh_frame:0000000000007BEA                 db 0FFh
.eh_frame:0000000000007BEB                 db 0FFh
.eh_frame:0000000000007BEC                 db  7Dh ; }
.eh_frame:0000000000007BED                 db    0
.eh_frame:0000000000007BEE                 db    0
.eh_frame:0000000000007BEF                 db    0
.eh_frame:0000000000007BF0                 db    0
.eh_frame:0000000000007BF1                 db  42h ; B
.eh_frame:0000000000007BF2                 db  0Eh
.eh_frame:0000000000007BF3                 db  10h
.eh_frame:0000000000007BF4                 db  8Ch
.eh_frame:0000000000007BF5                 db    2
.eh_frame:0000000000007BF6                 db  41h ; A
.eh_frame:0000000000007BF7                 db  0Eh
.eh_frame:0000000000007BF8                 db  18h
.eh_frame:0000000000007BF9                 db  86h
.eh_frame:0000000000007BFA                 db    3
.eh_frame:0000000000007BFB                 db  44h ; D
.eh_frame:0000000000007BFC                 db  0Eh
.eh_frame:0000000000007BFD                 db  20h
.eh_frame:0000000000007BFE                 db  83h
.eh_frame:0000000000007BFF                 db    4
.eh_frame:0000000000007C00                 db  69h ; i
.eh_frame:0000000000007C01                 db  0Ah
.eh_frame:0000000000007C02                 db  0Eh
.eh_frame:0000000000007C03                 db  18h
.eh_frame:0000000000007C04                 db  41h ; A
.eh_frame:0000000000007C05                 db  0Eh
.eh_frame:0000000000007C06                 db  10h
.eh_frame:0000000000007C07                 db  42h ; B
.eh_frame:0000000000007C08                 db  0Eh
.eh_frame:0000000000007C09                 db    8
.eh_frame:0000000000007C0A                 db  45h ; E
.eh_frame:0000000000007C0B                 db  0Bh
.eh_frame:0000000000007C0C                 db  55h ; U
.eh_frame:0000000000007C0D                 db  0Ah
.eh_frame:0000000000007C0E                 db  0Eh
.eh_frame:0000000000007C0F                 db  18h
.eh_frame:0000000000007C10                 db  41h ; A
.eh_frame:0000000000007C11                 db  0Eh
.eh_frame:0000000000007C12                 db  10h
.eh_frame:0000000000007C13                 db  42h ; B
.eh_frame:0000000000007C14                 db  0Eh
.eh_frame:0000000000007C15                 db    8
.eh_frame:0000000000007C16                 db  48h ; H
.eh_frame:0000000000007C17                 db  0Bh
.eh_frame:0000000000007C18                 db  41h ; A
.eh_frame:0000000000007C19                 db  0Ah
.eh_frame:0000000000007C1A                 db  0Eh
.eh_frame:0000000000007C1B                 db  18h
.eh_frame:0000000000007C1C                 db  46h ; F
.eh_frame:0000000000007C1D                 db  0Eh
.eh_frame:0000000000007C1E                 db  10h
.eh_frame:0000000000007C1F                 db  42h ; B
.eh_frame:0000000000007C20                 db  0Eh
.eh_frame:0000000000007C21                 db    8
.eh_frame:0000000000007C22                 db  47h ; G
.eh_frame:0000000000007C23                 db  0Bh
.eh_frame:0000000000007C24                 db  49h ; I
.eh_frame:0000000000007C25                 db  0Eh
.eh_frame:0000000000007C26                 db  18h
.eh_frame:0000000000007C27                 db  41h ; A
.eh_frame:0000000000007C28                 db  0Eh
.eh_frame:0000000000007C29                 db  10h
.eh_frame:0000000000007C2A                 db  42h ; B
.eh_frame:0000000000007C2B                 db  0Eh
.eh_frame:0000000000007C2C                 db    8
.eh_frame:0000000000007C2D                 db    0
.eh_frame:0000000000007C2E                 db    0
.eh_frame:0000000000007C2F                 db    0
.eh_frame:0000000000007C30                 db  1Ch
.eh_frame:0000000000007C31                 db    0
.eh_frame:0000000000007C32                 db    0
.eh_frame:0000000000007C33                 db    0
.eh_frame:0000000000007C34                 db 0ACh
.eh_frame:0000000000007C35                 db  0Ah
.eh_frame:0000000000007C36                 db    0
.eh_frame:0000000000007C37                 db    0
.eh_frame:0000000000007C38                 db    8
.eh_frame:0000000000007C39                 db 0DEh
.eh_frame:0000000000007C3A                 db 0FFh
.eh_frame:0000000000007C3B                 db 0FFh
.eh_frame:0000000000007C3C                 db  60h ; `
.eh_frame:0000000000007C3D                 db    0
.eh_frame:0000000000007C3E                 db    0
.eh_frame:0000000000007C3F                 db    0
.eh_frame:0000000000007C40                 db    0
.eh_frame:0000000000007C41                 db  44h ; D
.eh_frame:0000000000007C42                 db  0Eh
.eh_frame:0000000000007C43                 db  10h
.eh_frame:0000000000007C44                 db  75h ; u
.eh_frame:0000000000007C45                 db  0Ah
.eh_frame:0000000000007C46                 db  0Eh
.eh_frame:0000000000007C47                 db    8
.eh_frame:0000000000007C48                 db  47h ; G
.eh_frame:0000000000007C49                 db  0Bh
.eh_frame:0000000000007C4A                 db  5Fh ; _
.eh_frame:0000000000007C4B                 db  0Eh
.eh_frame:0000000000007C4C                 db    8
.eh_frame:0000000000007C4D                 db    0
.eh_frame:0000000000007C4E                 db    0
.eh_frame:0000000000007C4F                 db    0
.eh_frame:0000000000007C50                 db  14h
.eh_frame:0000000000007C51                 db    0
.eh_frame:0000000000007C52                 db    0
.eh_frame:0000000000007C53                 db    0
.eh_frame:0000000000007C54                 db 0CCh
.eh_frame:0000000000007C55                 db  0Ah
.eh_frame:0000000000007C56                 db    0
.eh_frame:0000000000007C57                 db    0
.eh_frame:0000000000007C58                 db  48h ; H
.eh_frame:0000000000007C59                 db 0DEh
.eh_frame:0000000000007C5A                 db 0FFh
.eh_frame:0000000000007C5B                 db 0FFh
.eh_frame:0000000000007C5C                 db  42h ; B
.eh_frame:0000000000007C5D                 db    0
.eh_frame:0000000000007C5E                 db    0
.eh_frame:0000000000007C5F                 db    0
.eh_frame:0000000000007C60                 db    0
.eh_frame:0000000000007C61                 db    0
.eh_frame:0000000000007C62                 db    0
.eh_frame:0000000000007C63                 db    0
.eh_frame:0000000000007C64                 db    0
.eh_frame:0000000000007C65                 db    0
.eh_frame:0000000000007C66                 db    0
.eh_frame:0000000000007C67                 db    0
.eh_frame:0000000000007C68                 db  1Ch
.eh_frame:0000000000007C69                 db    0
.eh_frame:0000000000007C6A                 db    0
.eh_frame:0000000000007C6B                 db    0
.eh_frame:0000000000007C6C                 db 0E4h
.eh_frame:0000000000007C6D                 db  0Ah
.eh_frame:0000000000007C6E                 db    0
.eh_frame:0000000000007C6F                 db    0
.eh_frame:0000000000007C70                 db  80h
.eh_frame:0000000000007C71                 db 0DEh
.eh_frame:0000000000007C72                 db 0FFh
.eh_frame:0000000000007C73                 db 0FFh
.eh_frame:0000000000007C74                 db  3Ch ; <
.eh_frame:0000000000007C75                 db    0
.eh_frame:0000000000007C76                 db    0
.eh_frame:0000000000007C77                 db    0
.eh_frame:0000000000007C78                 db    0
.eh_frame:0000000000007C79                 db  44h ; D
.eh_frame:0000000000007C7A                 db  0Eh
.eh_frame:0000000000007C7B                 db  10h
.eh_frame:0000000000007C7C                 db  61h ; a
.eh_frame:0000000000007C7D                 db  0Ah
.eh_frame:0000000000007C7E                 db  0Eh
.eh_frame:0000000000007C7F                 db    8
.eh_frame:0000000000007C80                 db  4Bh ; K
.eh_frame:0000000000007C81                 db  0Bh
.eh_frame:0000000000007C82                 db  4Bh ; K
.eh_frame:0000000000007C83                 db  0Eh
.eh_frame:0000000000007C84                 db    8
.eh_frame:0000000000007C85                 db    0
.eh_frame:0000000000007C86                 db    0
.eh_frame:0000000000007C87                 db    0
.eh_frame:0000000000007C88                 db  14h
.eh_frame:0000000000007C89                 db    0
.eh_frame:0000000000007C8A                 db    0
.eh_frame:0000000000007C8B                 db    0
.eh_frame:0000000000007C8C                 db    4
.eh_frame:0000000000007C8D                 db  0Bh
.eh_frame:0000000000007C8E                 db    0
.eh_frame:0000000000007C8F                 db    0
.eh_frame:0000000000007C90                 db 0A0h
.eh_frame:0000000000007C91                 db 0DEh
.eh_frame:0000000000007C92                 db 0FFh
.eh_frame:0000000000007C93                 db 0FFh
.eh_frame:0000000000007C94                 db  45h ; E
.eh_frame:0000000000007C95                 db    0
.eh_frame:0000000000007C96                 db    0
.eh_frame:0000000000007C97                 db    0
.eh_frame:0000000000007C98                 db    0
.eh_frame:0000000000007C99                 db  6Ch ; l
.eh_frame:0000000000007C9A                 db  0Eh
.eh_frame:0000000000007C9B                 db  10h
.eh_frame:0000000000007C9C                 db  51h ; Q
.eh_frame:0000000000007C9D                 db  0Eh
.eh_frame:0000000000007C9E                 db    8
.eh_frame:0000000000007C9F                 db    0
.eh_frame:0000000000007CA0                 db  4Ch ; L
.eh_frame:0000000000007CA1                 db    0
.eh_frame:0000000000007CA2                 db    0
.eh_frame:0000000000007CA3                 db    0
.eh_frame:0000000000007CA4                 db  1Ch
.eh_frame:0000000000007CA5                 db  0Bh
.eh_frame:0000000000007CA6                 db    0
.eh_frame:0000000000007CA7                 db    0
.eh_frame:0000000000007CA8                 db 0D8h
.eh_frame:0000000000007CA9                 db 0DEh
.eh_frame:0000000000007CAA                 db 0FFh
.eh_frame:0000000000007CAB                 db 0FFh
.eh_frame:0000000000007CAC                 db  3Ch ; <
.eh_frame:0000000000007CAD                 db    2
.eh_frame:0000000000007CAE                 db    0
.eh_frame:0000000000007CAF                 db    0
.eh_frame:0000000000007CB0                 db    0
.eh_frame:0000000000007CB1                 db  42h ; B
.eh_frame:0000000000007CB2                 db  0Eh
.eh_frame:0000000000007CB3                 db  10h
.eh_frame:0000000000007CB4                 db  8Fh
.eh_frame:0000000000007CB5                 db    2
.eh_frame:0000000000007CB6                 db  42h ; B
.eh_frame:0000000000007CB7                 db  0Eh
.eh_frame:0000000000007CB8                 db  18h
.eh_frame:0000000000007CB9                 db  8Eh
.eh_frame:0000000000007CBA                 db    3
.eh_frame:0000000000007CBB                 db  45h ; E
.eh_frame:0000000000007CBC                 db  0Eh
.eh_frame:0000000000007CBD                 db  20h
.eh_frame:0000000000007CBE                 db  8Dh
.eh_frame:0000000000007CBF                 db    4
.eh_frame:0000000000007CC0                 db  42h ; B
.eh_frame:0000000000007CC1                 db  0Eh
.eh_frame:0000000000007CC2                 db  28h ; (
.eh_frame:0000000000007CC3                 db  8Ch
.eh_frame:0000000000007CC4                 db    5
.eh_frame:0000000000007CC5                 db  44h ; D
.eh_frame:0000000000007CC6                 db  0Eh
.eh_frame:0000000000007CC7                 db  30h ; 0
.eh_frame:0000000000007CC8                 db  86h
.eh_frame:0000000000007CC9                 db    6
.eh_frame:0000000000007CCA                 db  41h ; A
.eh_frame:0000000000007CCB                 db  0Eh
.eh_frame:0000000000007CCC                 db  38h ; 8
.eh_frame:0000000000007CCD                 db  83h
.eh_frame:0000000000007CCE                 db    7
.eh_frame:0000000000007CCF                 db  44h ; D
.eh_frame:0000000000007CD0                 db  0Eh
.eh_frame:0000000000007CD1                 db  50h ; P
.eh_frame:0000000000007CD2                 db    2
.eh_frame:0000000000007CD3                 db 0A1h
.eh_frame:0000000000007CD4                 db  0Ah
.eh_frame:0000000000007CD5                 db  0Eh
.eh_frame:0000000000007CD6                 db  38h ; 8
.eh_frame:0000000000007CD7                 db  41h ; A
.eh_frame:0000000000007CD8                 db  0Eh
.eh_frame:0000000000007CD9                 db  30h ; 0
.eh_frame:0000000000007CDA                 db  41h ; A
.eh_frame:0000000000007CDB                 db  0Eh
.eh_frame:0000000000007CDC                 db  28h ; (
.eh_frame:0000000000007CDD                 db  42h ; B
.eh_frame:0000000000007CDE                 db  0Eh
.eh_frame:0000000000007CDF                 db  20h
.eh_frame:0000000000007CE0                 db  42h ; B
.eh_frame:0000000000007CE1                 db  0Eh
.eh_frame:0000000000007CE2                 db  18h
.eh_frame:0000000000007CE3                 db  42h ; B
.eh_frame:0000000000007CE4                 db  0Eh
.eh_frame:0000000000007CE5                 db  10h
.eh_frame:0000000000007CE6                 db  42h ; B
.eh_frame:0000000000007CE7                 db  0Eh
.eh_frame:0000000000007CE8                 db    8
.eh_frame:0000000000007CE9                 db  41h ; A
.eh_frame:0000000000007CEA                 db  0Bh
.eh_frame:0000000000007CEB                 db    0
.eh_frame:0000000000007CEC                 db    0
.eh_frame:0000000000007CED                 db    0
.eh_frame:0000000000007CEE                 db    0
.eh_frame:0000000000007CEF                 db    0
.eh_frame:0000000000007CF0                 db  34h ; 4
.eh_frame:0000000000007CF1                 db    0
.eh_frame:0000000000007CF2                 db    0
.eh_frame:0000000000007CF3                 db    0
.eh_frame:0000000000007CF4                 db  6Ch ; l
.eh_frame:0000000000007CF5                 db  0Bh
.eh_frame:0000000000007CF6                 db    0
.eh_frame:0000000000007CF7                 db    0
.eh_frame:0000000000007CF8                 db 0C8h
.eh_frame:0000000000007CF9                 db 0E0h
.eh_frame:0000000000007CFA                 db 0FFh
.eh_frame:0000000000007CFB                 db 0FFh
.eh_frame:0000000000007CFC                 db  7Bh ; {
.eh_frame:0000000000007CFD                 db    0
.eh_frame:0000000000007CFE                 db    0
.eh_frame:0000000000007CFF                 db    0
.eh_frame:0000000000007D00                 db    0
.eh_frame:0000000000007D01                 db  42h ; B
.eh_frame:0000000000007D02                 db  0Eh
.eh_frame:0000000000007D03                 db  10h
.eh_frame:0000000000007D04                 db  8Ch
.eh_frame:0000000000007D05                 db    2
.eh_frame:0000000000007D06                 db  41h ; A
.eh_frame:0000000000007D07                 db  0Eh
.eh_frame:0000000000007D08                 db  18h
.eh_frame:0000000000007D09                 db  86h
.eh_frame:0000000000007D0A                 db    3
.eh_frame:0000000000007D0B                 db  41h ; A
.eh_frame:0000000000007D0C                 db  0Eh
.eh_frame:0000000000007D0D                 db  20h
.eh_frame:0000000000007D0E                 db  83h
.eh_frame:0000000000007D0F                 db    4
.eh_frame:0000000000007D10                 db  7Dh ; }
.eh_frame:0000000000007D11                 db  0Ah
.eh_frame:0000000000007D12                 db  0Eh
.eh_frame:0000000000007D13                 db  18h
.eh_frame:0000000000007D14                 db  41h ; A
.eh_frame:0000000000007D15                 db  0Eh
.eh_frame:0000000000007D16                 db  10h
.eh_frame:0000000000007D17                 db  42h ; B
.eh_frame:0000000000007D18                 db  0Eh
.eh_frame:0000000000007D19                 db    8
.eh_frame:0000000000007D1A                 db  44h ; D
.eh_frame:0000000000007D1B                 db  0Bh
.eh_frame:0000000000007D1C                 db  60h ; `
.eh_frame:0000000000007D1D                 db  0Ah
.eh_frame:0000000000007D1E                 db  0Eh
.eh_frame:0000000000007D1F                 db  18h
.eh_frame:0000000000007D20                 db  41h ; A
.eh_frame:0000000000007D21                 db  0Eh
.eh_frame:0000000000007D22                 db  10h
.eh_frame:0000000000007D23                 db  42h ; B
.eh_frame:0000000000007D24                 db  0Eh
.eh_frame:0000000000007D25                 db    8
.eh_frame:0000000000007D26                 db  45h ; E
.eh_frame:0000000000007D27                 db  0Bh
.eh_frame:0000000000007D28                 db  1Ch
.eh_frame:0000000000007D29                 db    0
.eh_frame:0000000000007D2A                 db    0
.eh_frame:0000000000007D2B                 db    0
.eh_frame:0000000000007D2C                 db 0A4h
.eh_frame:0000000000007D2D                 db  0Bh
.eh_frame:0000000000007D2E                 db    0
.eh_frame:0000000000007D2F                 db    0
.eh_frame:0000000000007D30                 db  10h
.eh_frame:0000000000007D31                 db 0E1h
.eh_frame:0000000000007D32                 db 0FFh
.eh_frame:0000000000007D33                 db 0FFh
.eh_frame:0000000000007D34                 db  40h ; @
.eh_frame:0000000000007D35                 db    0
.eh_frame:0000000000007D36                 db    0
.eh_frame:0000000000007D37                 db    0
.eh_frame:0000000000007D38                 db    0
.eh_frame:0000000000007D39                 db  44h ; D
.eh_frame:0000000000007D3A                 db  0Eh
.eh_frame:0000000000007D3B                 db  10h
.eh_frame:0000000000007D3C                 db  83h
.eh_frame:0000000000007D3D                 db    2
.eh_frame:0000000000007D3E                 db  5Ah ; Z
.eh_frame:0000000000007D3F                 db  0Ah
.eh_frame:0000000000007D40                 db  0Eh
.eh_frame:0000000000007D41                 db    8
.eh_frame:0000000000007D42                 db  4Ah ; J
.eh_frame:0000000000007D43                 db  0Bh
.eh_frame:0000000000007D44                 db  53h ; S
.eh_frame:0000000000007D45                 db  0Eh
.eh_frame:0000000000007D46                 db    8
.eh_frame:0000000000007D47                 db    0
.eh_frame:0000000000007D48                 db  2Ch ; ,
.eh_frame:0000000000007D49                 db    0
.eh_frame:0000000000007D4A                 db    0
.eh_frame:0000000000007D4B                 db    0
.eh_frame:0000000000007D4C                 db 0C4h
.eh_frame:0000000000007D4D                 db  0Bh
.eh_frame:0000000000007D4E                 db    0
.eh_frame:0000000000007D4F                 db    0
.eh_frame:0000000000007D50                 db  30h ; 0
.eh_frame:0000000000007D51                 db 0E1h
.eh_frame:0000000000007D52                 db 0FFh
.eh_frame:0000000000007D53                 db 0FFh
.eh_frame:0000000000007D54                 db  57h ; W
.eh_frame:0000000000007D55                 db    0
.eh_frame:0000000000007D56                 db    0
.eh_frame:0000000000007D57                 db    0
.eh_frame:0000000000007D58                 db    0
.eh_frame:0000000000007D59                 db  63h ; c
.eh_frame:0000000000007D5A                 db  0Eh
.eh_frame:0000000000007D5B                 db  10h
.eh_frame:0000000000007D5C                 db  8Ch
.eh_frame:0000000000007D5D                 db    2
.eh_frame:0000000000007D5E                 db  41h ; A
.eh_frame:0000000000007D5F                 db  0Eh
.eh_frame:0000000000007D60                 db  18h
.eh_frame:0000000000007D61                 db  86h
.eh_frame:0000000000007D62                 db    3
.eh_frame:0000000000007D63                 db  44h ; D
.eh_frame:0000000000007D64                 db  0Eh
.eh_frame:0000000000007D65                 db  20h
.eh_frame:0000000000007D66                 db  83h
.eh_frame:0000000000007D67                 db    4
.eh_frame:0000000000007D68                 db  6Bh ; k
.eh_frame:0000000000007D69                 db  0Eh
.eh_frame:0000000000007D6A                 db  18h
.eh_frame:0000000000007D6B                 db  41h ; A
.eh_frame:0000000000007D6C                 db  0Eh
.eh_frame:0000000000007D6D                 db  10h
.eh_frame:0000000000007D6E                 db  42h ; B
.eh_frame:0000000000007D6F                 db  0Eh
.eh_frame:0000000000007D70                 db    8
.eh_frame:0000000000007D71                 db    0
.eh_frame:0000000000007D72                 db    0
.eh_frame:0000000000007D73                 db    0
.eh_frame:0000000000007D74                 db    0
.eh_frame:0000000000007D75                 db    0
.eh_frame:0000000000007D76                 db    0
.eh_frame:0000000000007D77                 db    0
.eh_frame:0000000000007D78                 db  44h ; D
.eh_frame:0000000000007D79                 db    0
.eh_frame:0000000000007D7A                 db    0
.eh_frame:0000000000007D7B                 db    0
.eh_frame:0000000000007D7C                 db 0F4h
.eh_frame:0000000000007D7D                 db  0Bh
.eh_frame:0000000000007D7E                 db    0
.eh_frame:0000000000007D7F                 db    0
.eh_frame:0000000000007D80                 db  60h ; `
.eh_frame:0000000000007D81                 db 0E1h
.eh_frame:0000000000007D82                 db 0FFh
.eh_frame:0000000000007D83                 db 0FFh
.eh_frame:0000000000007D84                 db  65h ; e
.eh_frame:0000000000007D85                 db    0
.eh_frame:0000000000007D86                 db    0
.eh_frame:0000000000007D87                 db    0
.eh_frame:0000000000007D88                 db    0
.eh_frame:0000000000007D89                 db  42h ; B
.eh_frame:0000000000007D8A                 db  0Eh
.eh_frame:0000000000007D8B                 db  10h
.eh_frame:0000000000007D8C                 db  8Fh
.eh_frame:0000000000007D8D                 db    2
.eh_frame:0000000000007D8E                 db  42h ; B
.eh_frame:0000000000007D8F                 db  0Eh
.eh_frame:0000000000007D90                 db  18h
.eh_frame:0000000000007D91                 db  8Eh
.eh_frame:0000000000007D92                 db    3
.eh_frame:0000000000007D93                 db  45h ; E
.eh_frame:0000000000007D94                 db  0Eh
.eh_frame:0000000000007D95                 db  20h
.eh_frame:0000000000007D96                 db  8Dh
.eh_frame:0000000000007D97                 db    4
.eh_frame:0000000000007D98                 db  42h ; B
.eh_frame:0000000000007D99                 db  0Eh
.eh_frame:0000000000007D9A                 db  28h ; (
.eh_frame:0000000000007D9B                 db  8Ch
.eh_frame:0000000000007D9C                 db    5
.eh_frame:0000000000007D9D                 db  48h ; H
.eh_frame:0000000000007D9E                 db  0Eh
.eh_frame:0000000000007D9F                 db  30h ; 0
.eh_frame:0000000000007DA0                 db  86h
.eh_frame:0000000000007DA1                 db    6
.eh_frame:0000000000007DA2                 db  48h ; H
.eh_frame:0000000000007DA3                 db  0Eh
.eh_frame:0000000000007DA4                 db  38h ; 8
.eh_frame:0000000000007DA5                 db  83h
.eh_frame:0000000000007DA6                 db    7
.eh_frame:0000000000007DA7                 db  4Dh ; M
.eh_frame:0000000000007DA8                 db  0Eh
.eh_frame:0000000000007DA9                 db  40h ; @
.eh_frame:0000000000007DAA                 db  72h ; r
.eh_frame:0000000000007DAB                 db  0Eh
.eh_frame:0000000000007DAC                 db  38h ; 8
.eh_frame:0000000000007DAD                 db  41h ; A
.eh_frame:0000000000007DAE                 db  0Eh
.eh_frame:0000000000007DAF                 db  30h ; 0
.eh_frame:0000000000007DB0                 db  41h ; A
.eh_frame:0000000000007DB1                 db  0Eh
.eh_frame:0000000000007DB2                 db  28h ; (
.eh_frame:0000000000007DB3                 db  42h ; B
.eh_frame:0000000000007DB4                 db  0Eh
.eh_frame:0000000000007DB5                 db  20h
.eh_frame:0000000000007DB6                 db  42h ; B
.eh_frame:0000000000007DB7                 db  0Eh
.eh_frame:0000000000007DB8                 db  18h
.eh_frame:0000000000007DB9                 db  42h ; B
.eh_frame:0000000000007DBA                 db  0Eh
.eh_frame:0000000000007DBB                 db  10h
.eh_frame:0000000000007DBC                 db  42h ; B
.eh_frame:0000000000007DBD                 db  0Eh
.eh_frame:0000000000007DBE                 db    8
.eh_frame:0000000000007DBF                 db    0
.eh_frame:0000000000007DC0                 db  14h
.eh_frame:0000000000007DC1                 db    0
.eh_frame:0000000000007DC2                 db    0
.eh_frame:0000000000007DC3                 db    0
.eh_frame:0000000000007DC4                 db  3Ch ; <
.eh_frame:0000000000007DC5                 db  0Ch
.eh_frame:0000000000007DC6                 db    0
.eh_frame:0000000000007DC7                 db    0
.eh_frame:0000000000007DC8                 db  88h
.eh_frame:0000000000007DC9                 db 0E1h
.eh_frame:0000000000007DCA                 db 0FFh
.eh_frame:0000000000007DCB                 db 0FFh
.eh_frame:0000000000007DCC                 db    2
.eh_frame:0000000000007DCD                 db    0
.eh_frame:0000000000007DCE                 db    0
.eh_frame:0000000000007DCF                 db    0
.eh_frame:0000000000007DD0                 db    0
.eh_frame:0000000000007DD1                 db    0
.eh_frame:0000000000007DD2                 db    0
.eh_frame:0000000000007DD3                 db    0
.eh_frame:0000000000007DD4                 db    0
.eh_frame:0000000000007DD5                 db    0
.eh_frame:0000000000007DD6                 db    0
.eh_frame:0000000000007DD7                 db    0
.eh_frame:0000000000007DD8                 db  10h
.eh_frame:0000000000007DD9                 db    0
.eh_frame:0000000000007DDA                 db    0
.eh_frame:0000000000007DDB                 db    0
.eh_frame:0000000000007DDC                 db  54h ; T
.eh_frame:0000000000007DDD                 db  0Ch
.eh_frame:0000000000007DDE                 db    0
.eh_frame:0000000000007DDF                 db    0
.eh_frame:0000000000007DE0                 db  80h
.eh_frame:0000000000007DE1                 db 0E1h
.eh_frame:0000000000007DE2                 db 0FFh
.eh_frame:0000000000007DE3                 db 0FFh
.eh_frame:0000000000007DE4                 db  0Eh
.eh_frame:0000000000007DE5                 db    0
.eh_frame:0000000000007DE6                 db    0
.eh_frame:0000000000007DE7                 db    0
.eh_frame:0000000000007DE8                 db    0
.eh_frame:0000000000007DE9                 db    0
.eh_frame:0000000000007DEA                 db    0
.eh_frame:0000000000007DEB                 db    0
.eh_frame:0000000000007DEC __FRAME_END__   db    0
.eh_frame:0000000000007DED                 db    0
.eh_frame:0000000000007DEE                 db    0
.eh_frame:0000000000007DEF                 db    0
.eh_frame:0000000000007DEF _eh_frame       ends
.eh_frame:0000000000007DEF
.init_array:0000000000208AB0 ; ELF Initialization Function Table
.init_array:0000000000208AB0 ; ===========================================================================
.init_array:0000000000208AB0
.init_array:0000000000208AB0 ; Segment type: Pure data
.init_array:0000000000208AB0 ; Segment permissions: Read/Write
.init_array:0000000000208AB0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000208AB0                 assume cs:_init_array
.init_array:0000000000208AB0                 ;org 208AB0h
.init_array:0000000000208AB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000208AB0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000208AB0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000208AB0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000208AB0
.fini_array:0000000000208AB8 ; ELF Termination Function Table
.fini_array:0000000000208AB8 ; ===========================================================================
.fini_array:0000000000208AB8
.fini_array:0000000000208AB8 ; Segment type: Pure data
.fini_array:0000000000208AB8 ; Segment permissions: Read/Write
.fini_array:0000000000208AB8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000208AB8                 assume cs:_fini_array
.fini_array:0000000000208AB8                 ;org 208AB8h
.fini_array:0000000000208AB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000208AB8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000208AB8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000208AB8
.data.rel.ro:0000000000208AC0 ; ===========================================================================
.data.rel.ro:0000000000208AC0
.data.rel.ro:0000000000208AC0 ; Segment type: Pure data
.data.rel.ro:0000000000208AC0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000208AC0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000208AC0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000208AC0                 ;org 208AC0h
.data.rel.ro:0000000000208AC0 ; struct option long_opts
.data.rel.ro:0000000000208AC0 long_opts       dq offset aGroups       ; name
.data.rel.ro:0000000000208AC0                                         ; DATA XREF: main:loc_1B3C↑o
.data.rel.ro:0000000000208AC0                 dd 1                    ; has_arg ; "groups"
.data.rel.ro:0000000000208AC0                 db 4 dup(0)
.data.rel.ro:0000000000208AC0                 dq 0                    ; flag
.data.rel.ro:0000000000208AC0                 dd 100h                 ; val
.data.rel.ro:0000000000208AC0                 db 4 dup(0)
.data.rel.ro:0000000000208AE0                 dq offset aUserspec     ; "userspec"
.data.rel.ro:0000000000208AE8                 db    1
.data.rel.ro:0000000000208AE9                 db    0
.data.rel.ro:0000000000208AEA                 db    0
.data.rel.ro:0000000000208AEB                 db    0
.data.rel.ro:0000000000208AEC                 db    0
.data.rel.ro:0000000000208AED                 db    0
.data.rel.ro:0000000000208AEE                 db    0
.data.rel.ro:0000000000208AEF                 db    0
.data.rel.ro:0000000000208AF0                 db    0
.data.rel.ro:0000000000208AF1                 db    0
.data.rel.ro:0000000000208AF2                 db    0
.data.rel.ro:0000000000208AF3                 db    0
.data.rel.ro:0000000000208AF4                 db    0
.data.rel.ro:0000000000208AF5                 db    0
.data.rel.ro:0000000000208AF6                 db    0
.data.rel.ro:0000000000208AF7                 db    0
.data.rel.ro:0000000000208AF8                 db    1
.data.rel.ro:0000000000208AF9                 db    1
.data.rel.ro:0000000000208AFA                 db    0
.data.rel.ro:0000000000208AFB                 db    0
.data.rel.ro:0000000000208AFC                 db    0
.data.rel.ro:0000000000208AFD                 db    0
.data.rel.ro:0000000000208AFE                 db    0
.data.rel.ro:0000000000208AFF                 db    0
.data.rel.ro:0000000000208B00                 dq offset aSkipChdir    ; "skip-chdir"
.data.rel.ro:0000000000208B08                 db    0
.data.rel.ro:0000000000208B09                 db    0
.data.rel.ro:0000000000208B0A                 db    0
.data.rel.ro:0000000000208B0B                 db    0
.data.rel.ro:0000000000208B0C                 db    0
.data.rel.ro:0000000000208B0D                 db    0
.data.rel.ro:0000000000208B0E                 db    0
.data.rel.ro:0000000000208B0F                 db    0
.data.rel.ro:0000000000208B10                 db    0
.data.rel.ro:0000000000208B11                 db    0
.data.rel.ro:0000000000208B12                 db    0
.data.rel.ro:0000000000208B13                 db    0
.data.rel.ro:0000000000208B14                 db    0
.data.rel.ro:0000000000208B15                 db    0
.data.rel.ro:0000000000208B16                 db    0
.data.rel.ro:0000000000208B17                 db    0
.data.rel.ro:0000000000208B18                 db    2
.data.rel.ro:0000000000208B19                 db    1
.data.rel.ro:0000000000208B1A                 db    0
.data.rel.ro:0000000000208B1B                 db    0
.data.rel.ro:0000000000208B1C                 db    0
.data.rel.ro:0000000000208B1D                 db    0
.data.rel.ro:0000000000208B1E                 db    0
.data.rel.ro:0000000000208B1F                 db    0
.data.rel.ro:0000000000208B20                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000208B28                 db    0
.data.rel.ro:0000000000208B29                 db    0
.data.rel.ro:0000000000208B2A                 db    0
.data.rel.ro:0000000000208B2B                 db    0
.data.rel.ro:0000000000208B2C                 db    0
.data.rel.ro:0000000000208B2D                 db    0
.data.rel.ro:0000000000208B2E                 db    0
.data.rel.ro:0000000000208B2F                 db    0
.data.rel.ro:0000000000208B30                 db    0
.data.rel.ro:0000000000208B31                 db    0
.data.rel.ro:0000000000208B32                 db    0
.data.rel.ro:0000000000208B33                 db    0
.data.rel.ro:0000000000208B34                 db    0
.data.rel.ro:0000000000208B35                 db    0
.data.rel.ro:0000000000208B36                 db    0
.data.rel.ro:0000000000208B37                 db    0
.data.rel.ro:0000000000208B38                 db  7Eh ; ~
.data.rel.ro:0000000000208B39                 db 0FFh
.data.rel.ro:0000000000208B3A                 db 0FFh
.data.rel.ro:0000000000208B3B                 db 0FFh
.data.rel.ro:0000000000208B3C                 db    0
.data.rel.ro:0000000000208B3D                 db    0
.data.rel.ro:0000000000208B3E                 db    0
.data.rel.ro:0000000000208B3F                 db    0
.data.rel.ro:0000000000208B40                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000208B48                 db    0
.data.rel.ro:0000000000208B49                 db    0
.data.rel.ro:0000000000208B4A                 db    0
.data.rel.ro:0000000000208B4B                 db    0
.data.rel.ro:0000000000208B4C                 db    0
.data.rel.ro:0000000000208B4D                 db    0
.data.rel.ro:0000000000208B4E                 db    0
.data.rel.ro:0000000000208B4F                 db    0
.data.rel.ro:0000000000208B50                 db    0
.data.rel.ro:0000000000208B51                 db    0
.data.rel.ro:0000000000208B52                 db    0
.data.rel.ro:0000000000208B53                 db    0
.data.rel.ro:0000000000208B54                 db    0
.data.rel.ro:0000000000208B55                 db    0
.data.rel.ro:0000000000208B56                 db    0
.data.rel.ro:0000000000208B57                 db    0
.data.rel.ro:0000000000208B58                 db  7Dh ; }
.data.rel.ro:0000000000208B59                 db 0FFh
.data.rel.ro:0000000000208B5A                 db 0FFh
.data.rel.ro:0000000000208B5B                 db 0FFh
.data.rel.ro:0000000000208B5C                 db    0
.data.rel.ro:0000000000208B5D                 db    0
.data.rel.ro:0000000000208B5E                 db    0
.data.rel.ro:0000000000208B5F                 db    0
.data.rel.ro:0000000000208B60                 db    0
.data.rel.ro:0000000000208B61                 db    0
.data.rel.ro:0000000000208B62                 db    0
.data.rel.ro:0000000000208B63                 db    0
.data.rel.ro:0000000000208B64                 db    0
.data.rel.ro:0000000000208B65                 db    0
.data.rel.ro:0000000000208B66                 db    0
.data.rel.ro:0000000000208B67                 db    0
.data.rel.ro:0000000000208B68                 db    0
.data.rel.ro:0000000000208B69                 db    0
.data.rel.ro:0000000000208B6A                 db    0
.data.rel.ro:0000000000208B6B                 db    0
.data.rel.ro:0000000000208B6C                 db    0
.data.rel.ro:0000000000208B6D                 db    0
.data.rel.ro:0000000000208B6E                 db    0
.data.rel.ro:0000000000208B6F                 db    0
.data.rel.ro:0000000000208B70                 db    0
.data.rel.ro:0000000000208B71                 db    0
.data.rel.ro:0000000000208B72                 db    0
.data.rel.ro:0000000000208B73                 db    0
.data.rel.ro:0000000000208B74                 db    0
.data.rel.ro:0000000000208B75                 db    0
.data.rel.ro:0000000000208B76                 db    0
.data.rel.ro:0000000000208B77                 db    0
.data.rel.ro:0000000000208B78                 db    0
.data.rel.ro:0000000000208B79                 db    0
.data.rel.ro:0000000000208B7A                 db    0
.data.rel.ro:0000000000208B7B                 db    0
.data.rel.ro:0000000000208B7C                 db    0
.data.rel.ro:0000000000208B7D                 db    0
.data.rel.ro:0000000000208B7E                 db    0
.data.rel.ro:0000000000208B7F                 db    0
.data.rel.ro:0000000000208B80                 public quoting_style_args
.data.rel.ro:0000000000208B80 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000208B88                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000208B90                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000208B98                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000208BA0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000208BA8                 dq offset aInvalidSpec+0Bh ; "c"
.data.rel.ro:0000000000208BB0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000208BB8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000208BC0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000208BC8                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000208BD0                 db    0
.data.rel.ro:0000000000208BD1                 db    0
.data.rel.ro:0000000000208BD2                 db    0
.data.rel.ro:0000000000208BD3                 db    0
.data.rel.ro:0000000000208BD4                 db    0
.data.rel.ro:0000000000208BD5                 db    0
.data.rel.ro:0000000000208BD6                 db    0
.data.rel.ro:0000000000208BD7                 db    0
.data.rel.ro:0000000000208BD7 _data_rel_ro    ends
.data.rel.ro:0000000000208BD7
LOAD:0000000000208BD8 ; ELF Dynamic Information
LOAD:0000000000208BD8 ; ===========================================================================
LOAD:0000000000208BD8
LOAD:0000000000208BD8 ; Segment type: Pure data
LOAD:0000000000208BD8 ; Segment permissions: Read/Write
LOAD:0000000000208BD8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208BD8                 assume cs:LOAD
LOAD:0000000000208BD8                 ;org 208BD8h
LOAD:0000000000208BD8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000208BD8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000208BD8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000208BE8                 Elf64_Dyn <0Ch, 16A8h>  ; DT_INIT
LOAD:0000000000208BF8                 Elf64_Dyn <0Dh, 5F70h>  ; DT_FINI
LOAD:0000000000208C08                 Elf64_Dyn <19h, 208AB0h> ; DT_INIT_ARRAY
LOAD:0000000000208C18                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000208C28                 Elf64_Dyn <1Ah, 208AB8h> ; DT_FINI_ARRAY
LOAD:0000000000208C38                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000208C48                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000208C58                 Elf64_Dyn <5, 9D0h>     ; DT_STRTAB
LOAD:0000000000208C68                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000208C78                 Elf64_Dyn <0Ah, 341h>   ; DT_STRSZ
LOAD:0000000000208C88                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000208C98                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000208CA8                 Elf64_Dyn <3, 208DC8h>  ; DT_PLTGOT
LOAD:0000000000208CB8                 Elf64_Dyn <2, 5A0h>     ; DT_PLTRELSZ
LOAD:0000000000208CC8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000208CD8                 Elf64_Dyn <17h, 1108h>  ; DT_JMPREL
LOAD:0000000000208CE8                 Elf64_Dyn <7, 0E08h>    ; DT_RELA
LOAD:0000000000208CF8                 Elf64_Dyn <8, 300h>     ; DT_RELASZ
LOAD:0000000000208D08                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000208D18                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000208D28                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000208D38                 Elf64_Dyn <6FFFFFFEh, 0DA8h> ; DT_VERNEED
LOAD:0000000000208D48                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000208D58                 Elf64_Dyn <6FFFFFF0h, 0D12h> ; DT_VERSYM
LOAD:0000000000208D68                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:0000000000208D78                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000208D88                 db    0
LOAD:0000000000208D89                 db    0
LOAD:0000000000208D8A                 db    0
LOAD:0000000000208D8B                 db    0
LOAD:0000000000208D8C                 db    0
LOAD:0000000000208D8D                 db    0
LOAD:0000000000208D8E                 db    0
LOAD:0000000000208D8F                 db    0
LOAD:0000000000208D90                 db    0
LOAD:0000000000208D91                 db    0
LOAD:0000000000208D92                 db    0
LOAD:0000000000208D93                 db    0
LOAD:0000000000208D94                 db    0
LOAD:0000000000208D95                 db    0
LOAD:0000000000208D96                 db    0
LOAD:0000000000208D97                 db    0
LOAD:0000000000208D98                 db    0
LOAD:0000000000208D99                 db    0
LOAD:0000000000208D9A                 db    0
LOAD:0000000000208D9B                 db    0
LOAD:0000000000208D9C                 db    0
LOAD:0000000000208D9D                 db    0
LOAD:0000000000208D9E                 db    0
LOAD:0000000000208D9F                 db    0
LOAD:0000000000208DA0                 db    0
LOAD:0000000000208DA1                 db    0
LOAD:0000000000208DA2                 db    0
LOAD:0000000000208DA3                 db    0
LOAD:0000000000208DA4                 db    0
LOAD:0000000000208DA5                 db    0
LOAD:0000000000208DA6                 db    0
LOAD:0000000000208DA7                 db    0
LOAD:0000000000208DA8                 db    0
LOAD:0000000000208DA9                 db    0
LOAD:0000000000208DAA                 db    0
LOAD:0000000000208DAB                 db    0
LOAD:0000000000208DAC                 db    0
LOAD:0000000000208DAD                 db    0
LOAD:0000000000208DAE                 db    0
LOAD:0000000000208DAF                 db    0
LOAD:0000000000208DB0                 db    0
LOAD:0000000000208DB1                 db    0
LOAD:0000000000208DB2                 db    0
LOAD:0000000000208DB3                 db    0
LOAD:0000000000208DB4                 db    0
LOAD:0000000000208DB5                 db    0
LOAD:0000000000208DB6                 db    0
LOAD:0000000000208DB7                 db    0
LOAD:0000000000208DB8                 db    0
LOAD:0000000000208DB9                 db    0
LOAD:0000000000208DBA                 db    0
LOAD:0000000000208DBB                 db    0
LOAD:0000000000208DBC                 db    0
LOAD:0000000000208DBD                 db    0
LOAD:0000000000208DBE                 db    0
LOAD:0000000000208DBF                 db    0
LOAD:0000000000208DC0                 db    0
LOAD:0000000000208DC1                 db    0
LOAD:0000000000208DC2                 db    0
LOAD:0000000000208DC3                 db    0
LOAD:0000000000208DC4                 db    0
LOAD:0000000000208DC5                 db    0
LOAD:0000000000208DC6                 db    0
LOAD:0000000000208DC7                 db    0
LOAD:0000000000208DC7 LOAD            ends
LOAD:0000000000208DC7
.got:0000000000208DC8 ; ===========================================================================
.got:0000000000208DC8
.got:0000000000208DC8 ; Segment type: Pure data
.got:0000000000208DC8 ; Segment permissions: Read/Write
.got:0000000000208DC8 _got            segment qword public 'DATA' use64
.got:0000000000208DC8                 assume cs:_got
.got:0000000000208DC8                 ;org 208DC8h
.got:0000000000208DC8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000208DD0 qword_208DD0    dq 0                    ; DATA XREF: sub_16C0↑r
.got:0000000000208DD8 qword_208DD8    dq 0                    ; DATA XREF: sub_16C0+6↑r
.got:0000000000208DE0 endgrent_ptr    dq offset endgrent      ; DATA XREF: _endgrent↑r
.got:0000000000208DE8 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000208DF0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000208DF8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000208E00 __errno_location_ptr dq offset __errno_location
.got:0000000000208E00                                         ; DATA XREF: ___errno_location↑r
.got:0000000000208E08 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000208E10 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000208E18 chroot_ptr      dq offset chroot        ; DATA XREF: _chroot↑r
.got:0000000000208E20 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000208E28 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000208E30 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000208E38 getpwuid_ptr    dq offset getpwuid      ; DATA XREF: _getpwuid↑r
.got:0000000000208E40 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000208E40                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000208E48 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000208E50 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000208E50                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000208E58 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000208E60 chdir_ptr       dq offset chdir         ; DATA XREF: _chdir↑r
.got:0000000000208E68 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000208E68                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000208E70 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000208E78 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000208E80 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000208E88 getgrgid_ptr    dq offset getgrgid      ; DATA XREF: _getgrgid↑r
.got:0000000000208E90 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000208E98 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000208EA0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000208EA0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000208EA8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000208EB0 canonicalize_file_name_ptr dq offset canonicalize_file_name
.got:0000000000208EB0                                         ; DATA XREF: _canonicalize_file_name↑r
.got:0000000000208EB8 setgroups_ptr   dq offset setgroups     ; DATA XREF: _setgroups↑r
.got:0000000000208EC0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000208EC8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000208EC8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000208ED0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000208ED8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000208EE0 getpwnam_ptr    dq offset getpwnam      ; DATA XREF: _getpwnam↑r
.got:0000000000208EE8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000208EF0 getgrnam_ptr    dq offset getgrnam      ; DATA XREF: _getgrnam↑r
.got:0000000000208EF8 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000208F00 getgroups_ptr   dq offset getgroups     ; DATA XREF: _getgroups↑r
.got:0000000000208F08 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000208F10 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000208F18 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000208F20 endpwent_ptr    dq offset endpwent      ; DATA XREF: _endpwent↑r
.got:0000000000208F28 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000208F30 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000208F38 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000208F40 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000208F48 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000208F50 setgid_ptr      dq offset setgid        ; DATA XREF: _setgid↑r
.got:0000000000208F58 getgrouplist_ptr dq offset getgrouplist ; DATA XREF: _getgrouplist↑r
.got:0000000000208F60 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000208F68 strtok_ptr      dq offset strtok        ; DATA XREF: _strtok↑r
.got:0000000000208F70 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:0000000000208F78 execvp_ptr      dq offset execvp        ; DATA XREF: _execvp↑r
.got:0000000000208F80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000208F88 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000208F90 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000208F98 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000208F98                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000208FA0 setuid_ptr      dq offset setuid        ; DATA XREF: _setuid↑r
.got:0000000000208FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000208FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000208FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000208FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000208FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000208FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000208FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000208FC8                                         ; DATA XREF: start+24↑r
.got:0000000000208FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000208FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000208FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000208FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000208FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000208FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000208FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000208FE0 _got            ends
.got:0000000000208FE0
LOAD:0000000000208FE8 ; ===========================================================================
LOAD:0000000000208FE8
LOAD:0000000000208FE8 ; Segment type: Pure data
LOAD:0000000000208FE8 ; Segment permissions: Read/Write
LOAD:0000000000208FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208FE8                 assume cs:LOAD
LOAD:0000000000208FE8                 ;org 208FE8h
LOAD:0000000000208FE8                 align 20h
LOAD:0000000000208FE8 LOAD            ends
LOAD:0000000000208FE8
.data:0000000000209000 ; ===========================================================================
.data:0000000000209000
.data:0000000000209000 ; Segment type: Pure data
.data:0000000000209000 ; Segment permissions: Read/Write
.data:0000000000209000 _data           segment align_32 public 'DATA' use64
.data:0000000000209000                 assume cs:_data
.data:0000000000209000                 ;org 209000h
.data:0000000000209000                 public __data_start ; weak
.data:0000000000209000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000209000                                         ; data_start
.data:0000000000209001                 db    0
.data:0000000000209002                 db    0
.data:0000000000209003                 db    0
.data:0000000000209004                 db    0
.data:0000000000209005                 db    0
.data:0000000000209006                 db    0
.data:0000000000209007                 db    0
.data:0000000000209008                 public __dso_handle
.data:0000000000209008 ; void *_dso_handle
.data:0000000000209008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000209008                                         ; atexit↑r ...
.data:0000000000209010                 public Version
.data:0000000000209010 Version         dq offset a831          ; DATA XREF: main+FA↑r
.data:0000000000209010                                         ; "8.31"
.data:0000000000209018                 public exit_failure
.data:0000000000209018 ; int exit_failure
.data:0000000000209018 exit_failure    dd 1                    ; DATA XREF: main+8D↑w
.data:0000000000209018                                         ; close_stdout:loc_2A32↑r ...
.data:000000000020901C                 align 20h
.data:0000000000209020                 public quote_quoting_options
.data:0000000000209020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000209020                                         ; quote_mem↑o ...
.data:0000000000209021                 db    0
.data:0000000000209022                 db    0
.data:0000000000209023                 db    0
.data:0000000000209024                 db    0
.data:0000000000209025                 db    0
.data:0000000000209026                 db    0
.data:0000000000209027                 db    0
.data:0000000000209028                 db    0
.data:0000000000209029                 db    0
.data:000000000020902A                 db    0
.data:000000000020902B                 db    0
.data:000000000020902C                 db    0
.data:000000000020902D                 db    0
.data:000000000020902E                 db    0
.data:000000000020902F                 db    0
.data:0000000000209030                 db    0
.data:0000000000209031                 db    0
.data:0000000000209032                 db    0
.data:0000000000209033                 db    0
.data:0000000000209034                 db    0
.data:0000000000209035                 db    0
.data:0000000000209036                 db    0
.data:0000000000209037                 db    0
.data:0000000000209038                 db    0
.data:0000000000209039                 db    0
.data:000000000020903A                 db    0
.data:000000000020903B                 db    0
.data:000000000020903C                 db    0
.data:000000000020903D                 db    0
.data:000000000020903E                 db    0
.data:000000000020903F                 db    0
.data:0000000000209040                 db    0
.data:0000000000209041                 db    0
.data:0000000000209042                 db    0
.data:0000000000209043                 db    0
.data:0000000000209044                 db    0
.data:0000000000209045                 db    0
.data:0000000000209046                 db    0
.data:0000000000209047                 db    0
.data:0000000000209048                 db    0
.data:0000000000209049                 db    0
.data:000000000020904A                 db    0
.data:000000000020904B                 db    0
.data:000000000020904C                 db    0
.data:000000000020904D                 db    0
.data:000000000020904E                 db    0
.data:000000000020904F                 db    0
.data:0000000000209050                 db    0
.data:0000000000209051                 db    0
.data:0000000000209052                 db    0
.data:0000000000209053                 db    0
.data:0000000000209054                 db    0
.data:0000000000209055                 db    0
.data:0000000000209056                 db    0
.data:0000000000209057                 db    0
.data:0000000000209058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000209058                                         ; quotearg_n_options:loc_3EAD↑r ...
.data:000000000020905C                 align 20h
.data:0000000000209060 ; void *slotvec
.data:0000000000209060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000209060                                         ; quotearg_n_options+76↑w ...
.data:0000000000209068                 align 10h
.data:0000000000209070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000209070                                         ; quotearg_n_options+187↑r ...
.data:0000000000209078 off_209078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000209078 _data           ends
.data:0000000000209078
.bss:0000000000209080 ; ===========================================================================
.bss:0000000000209080
.bss:0000000000209080 ; Segment type: Uninitialized
.bss:0000000000209080 ; Segment permissions: Read/Write
.bss:0000000000209080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000209080                 assume cs:_bss
.bss:0000000000209080                 ;org 209080h
.bss:0000000000209080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000209080                 public __bss_start ; weak
.bss:0000000000209080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000928↑o
.bss:0000000000209080                                         ; LOAD:0000000000000970↑o ...
.bss:0000000000209080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000209080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000209080                                         ; _edata
.bss:0000000000209080                                         ; Copy of shared data
.bss:0000000000209088                 public stdout@@GLIBC_2_2_5
.bss:0000000000209088 ; FILE *stdout
.bss:0000000000209088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000910↑o
.bss:0000000000209088                                         ; main+F3↑r ...
.bss:0000000000209088                                         ; Alternative name is 'stdout'
.bss:0000000000209088                                         ; Copy of shared data
.bss:0000000000209090                 public optind@@GLIBC_2_2_5
.bss:0000000000209090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000009A0↑o
.bss:0000000000209090                                         ; main:loc_1C0E↑r ...
.bss:0000000000209090                                         ; Alternative name is 'optind'
.bss:0000000000209090                                         ; Copy of shared data
.bss:0000000000209094                 align 8
.bss:0000000000209098                 public optarg@@GLIBC_2_2_5
.bss:0000000000209098 ; char *optarg
.bss:0000000000209098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009B8↑o
.bss:0000000000209098                                         ; main:loc_1BD0↑r ...
.bss:0000000000209098                                         ; Alternative name is 'optarg'
.bss:0000000000209098                                         ; Copy of shared data
.bss:00000000002090A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002090A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002090A0                                         ; DATA XREF: LOAD:0000000000000940↑o
.bss:00000000002090A0                                         ; LOAD:0000000000000958↑o ...
.bss:00000000002090A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002090A0                                         ; Copy of shared data
.bss:00000000002090A8                 align 20h
.bss:00000000002090C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002090C0 ; FILE *stderr
.bss:00000000002090C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000988↑o
.bss:00000000002090C0                                         ; usage+3D↑r ...
.bss:00000000002090C0                                         ; Alternative name is 'stderr'
.bss:00000000002090C0                                         ; Copy of shared data
.bss:00000000002090C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002090C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002090C9                 align 10h
.bss:00000000002090D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002090D0                                         ; close_stdout+1B↑r
.bss:00000000002090D1                 align 8
.bss:00000000002090D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002090D8                                         ; close_stdout+56↑r
.bss:00000000002090E0                 public program_name
.bss:00000000002090E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002090E0                                         ; set_program_name:loc_2ACD↑w
.bss:00000000002090E8                 align 20h
.bss:0000000000209100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000209100                                         ; quotearg_free+46↑o ...
.bss:0000000000209101                 db    ? ;
.bss:0000000000209102                 db    ? ;
.bss:0000000000209103                 db    ? ;
.bss:0000000000209104                 db    ? ;
.bss:0000000000209105                 db    ? ;
.bss:0000000000209106                 db    ? ;
.bss:0000000000209107                 db    ? ;
.bss:0000000000209108                 db    ? ;
.bss:0000000000209109                 db    ? ;
.bss:000000000020910A                 db    ? ;
.bss:000000000020910B                 db    ? ;
.bss:000000000020910C                 db    ? ;
.bss:000000000020910D                 db    ? ;
.bss:000000000020910E                 db    ? ;
.bss:000000000020910F                 db    ? ;
.bss:0000000000209110                 db    ? ;
.bss:0000000000209111                 db    ? ;
.bss:0000000000209112                 db    ? ;
.bss:0000000000209113                 db    ? ;
.bss:0000000000209114                 db    ? ;
.bss:0000000000209115                 db    ? ;
.bss:0000000000209116                 db    ? ;
.bss:0000000000209117                 db    ? ;
.bss:0000000000209118                 db    ? ;
.bss:0000000000209119                 db    ? ;
.bss:000000000020911A                 db    ? ;
.bss:000000000020911B                 db    ? ;
.bss:000000000020911C                 db    ? ;
.bss:000000000020911D                 db    ? ;
.bss:000000000020911E                 db    ? ;
.bss:000000000020911F                 db    ? ;
.bss:0000000000209120                 db    ? ;
.bss:0000000000209121                 db    ? ;
.bss:0000000000209122                 db    ? ;
.bss:0000000000209123                 db    ? ;
.bss:0000000000209124                 db    ? ;
.bss:0000000000209125                 db    ? ;
.bss:0000000000209126                 db    ? ;
.bss:0000000000209127                 db    ? ;
.bss:0000000000209128                 db    ? ;
.bss:0000000000209129                 db    ? ;
.bss:000000000020912A                 db    ? ;
.bss:000000000020912B                 db    ? ;
.bss:000000000020912C                 db    ? ;
.bss:000000000020912D                 db    ? ;
.bss:000000000020912E                 db    ? ;
.bss:000000000020912F                 db    ? ;
.bss:0000000000209130                 db    ? ;
.bss:0000000000209131                 db    ? ;
.bss:0000000000209132                 db    ? ;
.bss:0000000000209133                 db    ? ;
.bss:0000000000209134                 db    ? ;
.bss:0000000000209135                 db    ? ;
.bss:0000000000209136                 db    ? ;
.bss:0000000000209137                 db    ? ;
.bss:0000000000209138                 db    ? ;
.bss:0000000000209139                 db    ? ;
.bss:000000000020913A                 db    ? ;
.bss:000000000020913B                 db    ? ;
.bss:000000000020913C                 db    ? ;
.bss:000000000020913D                 db    ? ;
.bss:000000000020913E                 db    ? ;
.bss:000000000020913F                 db    ? ;
.bss:0000000000209140                 db    ? ;
.bss:0000000000209141                 db    ? ;
.bss:0000000000209142                 db    ? ;
.bss:0000000000209143                 db    ? ;
.bss:0000000000209144                 db    ? ;
.bss:0000000000209145                 db    ? ;
.bss:0000000000209146                 db    ? ;
.bss:0000000000209147                 db    ? ;
.bss:0000000000209148                 db    ? ;
.bss:0000000000209149                 db    ? ;
.bss:000000000020914A                 db    ? ;
.bss:000000000020914B                 db    ? ;
.bss:000000000020914C                 db    ? ;
.bss:000000000020914D                 db    ? ;
.bss:000000000020914E                 db    ? ;
.bss:000000000020914F                 db    ? ;
.bss:0000000000209150                 db    ? ;
.bss:0000000000209151                 db    ? ;
.bss:0000000000209152                 db    ? ;
.bss:0000000000209153                 db    ? ;
.bss:0000000000209154                 db    ? ;
.bss:0000000000209155                 db    ? ;
.bss:0000000000209156                 db    ? ;
.bss:0000000000209157                 db    ? ;
.bss:0000000000209158                 db    ? ;
.bss:0000000000209159                 db    ? ;
.bss:000000000020915A                 db    ? ;
.bss:000000000020915B                 db    ? ;
.bss:000000000020915C                 db    ? ;
.bss:000000000020915D                 db    ? ;
.bss:000000000020915E                 db    ? ;
.bss:000000000020915F                 db    ? ;
.bss:0000000000209160                 db    ? ;
.bss:0000000000209161                 db    ? ;
.bss:0000000000209162                 db    ? ;
.bss:0000000000209163                 db    ? ;
.bss:0000000000209164                 db    ? ;
.bss:0000000000209165                 db    ? ;
.bss:0000000000209166                 db    ? ;
.bss:0000000000209167                 db    ? ;
.bss:0000000000209168                 db    ? ;
.bss:0000000000209169                 db    ? ;
.bss:000000000020916A                 db    ? ;
.bss:000000000020916B                 db    ? ;
.bss:000000000020916C                 db    ? ;
.bss:000000000020916D                 db    ? ;
.bss:000000000020916E                 db    ? ;
.bss:000000000020916F                 db    ? ;
.bss:0000000000209170                 db    ? ;
.bss:0000000000209171                 db    ? ;
.bss:0000000000209172                 db    ? ;
.bss:0000000000209173                 db    ? ;
.bss:0000000000209174                 db    ? ;
.bss:0000000000209175                 db    ? ;
.bss:0000000000209176                 db    ? ;
.bss:0000000000209177                 db    ? ;
.bss:0000000000209178                 db    ? ;
.bss:0000000000209179                 db    ? ;
.bss:000000000020917A                 db    ? ;
.bss:000000000020917B                 db    ? ;
.bss:000000000020917C                 db    ? ;
.bss:000000000020917D                 db    ? ;
.bss:000000000020917E                 db    ? ;
.bss:000000000020917F                 db    ? ;
.bss:0000000000209180                 db    ? ;
.bss:0000000000209181                 db    ? ;
.bss:0000000000209182                 db    ? ;
.bss:0000000000209183                 db    ? ;
.bss:0000000000209184                 db    ? ;
.bss:0000000000209185                 db    ? ;
.bss:0000000000209186                 db    ? ;
.bss:0000000000209187                 db    ? ;
.bss:0000000000209188                 db    ? ;
.bss:0000000000209189                 db    ? ;
.bss:000000000020918A                 db    ? ;
.bss:000000000020918B                 db    ? ;
.bss:000000000020918C                 db    ? ;
.bss:000000000020918D                 db    ? ;
.bss:000000000020918E                 db    ? ;
.bss:000000000020918F                 db    ? ;
.bss:0000000000209190                 db    ? ;
.bss:0000000000209191                 db    ? ;
.bss:0000000000209192                 db    ? ;
.bss:0000000000209193                 db    ? ;
.bss:0000000000209194                 db    ? ;
.bss:0000000000209195                 db    ? ;
.bss:0000000000209196                 db    ? ;
.bss:0000000000209197                 db    ? ;
.bss:0000000000209198                 db    ? ;
.bss:0000000000209199                 db    ? ;
.bss:000000000020919A                 db    ? ;
.bss:000000000020919B                 db    ? ;
.bss:000000000020919C                 db    ? ;
.bss:000000000020919D                 db    ? ;
.bss:000000000020919E                 db    ? ;
.bss:000000000020919F                 db    ? ;
.bss:00000000002091A0                 db    ? ;
.bss:00000000002091A1                 db    ? ;
.bss:00000000002091A2                 db    ? ;
.bss:00000000002091A3                 db    ? ;
.bss:00000000002091A4                 db    ? ;
.bss:00000000002091A5                 db    ? ;
.bss:00000000002091A6                 db    ? ;
.bss:00000000002091A7                 db    ? ;
.bss:00000000002091A8                 db    ? ;
.bss:00000000002091A9                 db    ? ;
.bss:00000000002091AA                 db    ? ;
.bss:00000000002091AB                 db    ? ;
.bss:00000000002091AC                 db    ? ;
.bss:00000000002091AD                 db    ? ;
.bss:00000000002091AE                 db    ? ;
.bss:00000000002091AF                 db    ? ;
.bss:00000000002091B0                 db    ? ;
.bss:00000000002091B1                 db    ? ;
.bss:00000000002091B2                 db    ? ;
.bss:00000000002091B3                 db    ? ;
.bss:00000000002091B4                 db    ? ;
.bss:00000000002091B5                 db    ? ;
.bss:00000000002091B6                 db    ? ;
.bss:00000000002091B7                 db    ? ;
.bss:00000000002091B8                 db    ? ;
.bss:00000000002091B9                 db    ? ;
.bss:00000000002091BA                 db    ? ;
.bss:00000000002091BB                 db    ? ;
.bss:00000000002091BC                 db    ? ;
.bss:00000000002091BD                 db    ? ;
.bss:00000000002091BE                 db    ? ;
.bss:00000000002091BF                 db    ? ;
.bss:00000000002091C0                 db    ? ;
.bss:00000000002091C1                 db    ? ;
.bss:00000000002091C2                 db    ? ;
.bss:00000000002091C3                 db    ? ;
.bss:00000000002091C4                 db    ? ;
.bss:00000000002091C5                 db    ? ;
.bss:00000000002091C6                 db    ? ;
.bss:00000000002091C7                 db    ? ;
.bss:00000000002091C8                 db    ? ;
.bss:00000000002091C9                 db    ? ;
.bss:00000000002091CA                 db    ? ;
.bss:00000000002091CB                 db    ? ;
.bss:00000000002091CC                 db    ? ;
.bss:00000000002091CD                 db    ? ;
.bss:00000000002091CE                 db    ? ;
.bss:00000000002091CF                 db    ? ;
.bss:00000000002091D0                 db    ? ;
.bss:00000000002091D1                 db    ? ;
.bss:00000000002091D2                 db    ? ;
.bss:00000000002091D3                 db    ? ;
.bss:00000000002091D4                 db    ? ;
.bss:00000000002091D5                 db    ? ;
.bss:00000000002091D6                 db    ? ;
.bss:00000000002091D7                 db    ? ;
.bss:00000000002091D8                 db    ? ;
.bss:00000000002091D9                 db    ? ;
.bss:00000000002091DA                 db    ? ;
.bss:00000000002091DB                 db    ? ;
.bss:00000000002091DC                 db    ? ;
.bss:00000000002091DD                 db    ? ;
.bss:00000000002091DE                 db    ? ;
.bss:00000000002091DF                 db    ? ;
.bss:00000000002091E0                 db    ? ;
.bss:00000000002091E1                 db    ? ;
.bss:00000000002091E2                 db    ? ;
.bss:00000000002091E3                 db    ? ;
.bss:00000000002091E4                 db    ? ;
.bss:00000000002091E5                 db    ? ;
.bss:00000000002091E6                 db    ? ;
.bss:00000000002091E7                 db    ? ;
.bss:00000000002091E8                 db    ? ;
.bss:00000000002091E9                 db    ? ;
.bss:00000000002091EA                 db    ? ;
.bss:00000000002091EB                 db    ? ;
.bss:00000000002091EC                 db    ? ;
.bss:00000000002091ED                 db    ? ;
.bss:00000000002091EE                 db    ? ;
.bss:00000000002091EF                 db    ? ;
.bss:00000000002091F0                 db    ? ;
.bss:00000000002091F1                 db    ? ;
.bss:00000000002091F2                 db    ? ;
.bss:00000000002091F3                 db    ? ;
.bss:00000000002091F4                 db    ? ;
.bss:00000000002091F5                 db    ? ;
.bss:00000000002091F6                 db    ? ;
.bss:00000000002091F7                 db    ? ;
.bss:00000000002091F8                 db    ? ;
.bss:00000000002091F9                 db    ? ;
.bss:00000000002091FA                 db    ? ;
.bss:00000000002091FB                 db    ? ;
.bss:00000000002091FC                 db    ? ;
.bss:00000000002091FD                 db    ? ;
.bss:00000000002091FE                 db    ? ;
.bss:00000000002091FF                 db    ? ;
.bss:0000000000209200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000209200                                         ; get_quoting_style↑o ...
.bss:0000000000209210 xmmword_209210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000209210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000209220 xmmword_209220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000209220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000209230 qword_209230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000209230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000209230 _bss            ends
.bss:0000000000209230
.prgend:0000000000209238 ; ===========================================================================
.prgend:0000000000209238
.prgend:0000000000209238 ; Segment type: Zero-length
.prgend:0000000000209238 _prgend         segment byte public '' use64
.prgend:0000000000209238 _end            label byte
.prgend:0000000000209238 _prgend         ends
.prgend:0000000000209238
extern:0000000000209240 ; ===========================================================================
extern:0000000000209240
extern:0000000000209240 ; Segment type: Externs
extern:0000000000209240 ; extern
extern:0000000000209240 ; void endgrent(void)
extern:0000000000209240                 extrn endgrent:near     ; CODE XREF: _endgrent↑j
extern:0000000000209240                                         ; DATA XREF: .got:endgrent_ptr↑o
extern:0000000000209248 ; char *getenv(const char *name)
extern:0000000000209248                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000209248                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000209250 ; void free(void *ptr)
extern:0000000000209250                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000209250                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000209258 ; void __noreturn abort(void)
extern:0000000000209258                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000209258                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000209260 ; int *_errno_location(void)
extern:0000000000209260                 extrn __errno_location:near
extern:0000000000209260                                         ; CODE XREF: ___errno_location↑j
extern:0000000000209260                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000209268 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000209268                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000209268                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000209270 ; void __noreturn exit(int status)
extern:0000000000209270                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000209270                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000209278 ; int chroot(const char *path)
extern:0000000000209278                 extrn chroot:near       ; CODE XREF: _chroot↑j
extern:0000000000209278                                         ; DATA XREF: .got:chroot_ptr↑o
extern:0000000000209280 ; size_t _fpending(FILE *fp)
extern:0000000000209280                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000209280                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000209288 ; char *textdomain(const char *domainname)
extern:0000000000209288                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000209288                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000209290 ; int fclose(FILE *stream)
extern:0000000000209290                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000209290                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000209298 ; struct passwd *getpwuid(__uid_t uid)
extern:0000000000209298                 extrn getpwuid:near     ; CODE XREF: _getpwuid↑j
extern:0000000000209298                                         ; DATA XREF: .got:getpwuid_ptr↑o
extern:00000000002092A0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002092A0                 extrn bindtextdomain:near
extern:00000000002092A0                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002092A0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002092A8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002092A8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002092A8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002092B0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002092B0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002092B0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002092B0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002092B8 ; size_t strlen(const char *s)
extern:00000000002092B8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002092B8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002092C0 ; int chdir(const char *path)
extern:00000000002092C0                 extrn chdir:near        ; CODE XREF: _chdir↑j
extern:00000000002092C0                                         ; DATA XREF: .got:chdir_ptr↑o
extern:00000000002092C8                 extrn __stack_chk_fail:near
extern:00000000002092C8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002092C8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002092D0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002092D0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002092D0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002092D8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002092D8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002092D8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002092E0 ; char *strchr(const char *s, int c)
extern:00000000002092E0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002092E0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002092E8 ; struct group *getgrgid(__gid_t gid)
extern:00000000002092E8                 extrn getgrgid:near     ; CODE XREF: _getgrgid↑j
extern:00000000002092E8                                         ; DATA XREF: .got:getgrgid_ptr↑o
extern:00000000002092F0 ; char *strrchr(const char *s, int c)
extern:00000000002092F0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002092F0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002092F8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002092F8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002092F8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000209300 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000209300                 extrn __assert_fail:near
extern:0000000000209300                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000209300                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000209308 ; void *memset(void *s, int c, size_t n)
extern:0000000000209308                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000209308                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000209310 ; char *canonicalize_file_name(const char *name)
extern:0000000000209310                 extrn canonicalize_file_name:near
extern:0000000000209310                                         ; CODE XREF: _canonicalize_file_name↑j
extern:0000000000209310                                         ; DATA XREF: .got:canonicalize_file_name_ptr↑o
extern:0000000000209318 ; int setgroups(size_t n, const __gid_t *groups)
extern:0000000000209318                 extrn setgroups:near    ; CODE XREF: _setgroups↑j
extern:0000000000209318                                         ; DATA XREF: .got:setgroups_ptr↑o
extern:0000000000209320 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000209320                 extrn __libc_start_main:near
extern:0000000000209320                                         ; CODE XREF: start+24↑p
extern:0000000000209320                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000209328 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000209328                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000209328                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000209330 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000209330                 extrn fputs_unlocked:near
extern:0000000000209330                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000209330                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000209338 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000209338                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000209338                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000209340 ; int strcmp(const char *s1, const char *s2)
extern:0000000000209340                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000209340                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000209348 ; struct passwd *getpwnam(const char *name)
extern:0000000000209348                 extrn getpwnam:near     ; CODE XREF: _getpwnam↑j
extern:0000000000209348                                         ; DATA XREF: .got:getpwnam_ptr↑o
extern:0000000000209350 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000209350                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000209350                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000209358 ; struct group *getgrnam(const char *name)
extern:0000000000209358                 extrn getgrnam:near     ; CODE XREF: _getgrnam↑j
extern:0000000000209358                                         ; DATA XREF: .got:getgrnam_ptr↑o
extern:0000000000209360 ; int fileno(FILE *stream)
extern:0000000000209360                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000209360                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000209368 ; int getgroups(int size, __gid_t list[])
extern:0000000000209368                 extrn getgroups:near    ; CODE XREF: _getgroups↑j
extern:0000000000209368                                         ; DATA XREF: .got:getgroups_ptr↑o
extern:0000000000209370 ; void *malloc(size_t size)
extern:0000000000209370                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000209370                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000209378 ; int fflush(FILE *stream)
extern:0000000000209378                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000209378                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000209380 ; char *nl_langinfo(nl_item item)
extern:0000000000209380                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000209380                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000209388 ; void endpwent(void)
extern:0000000000209388                 extrn endpwent:near     ; CODE XREF: _endpwent↑j
extern:0000000000209388                                         ; DATA XREF: .got:endpwent_ptr↑o
extern:0000000000209390 ; int _freading(FILE *fp)
extern:0000000000209390                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000209390                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000209398 ; void *realloc(void *ptr, size_t size)
extern:0000000000209398                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000209398                                         ; DATA XREF: .got:realloc_ptr↑o
extern:00000000002093A0 ; char *setlocale(int category, const char *locale)
extern:00000000002093A0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:00000000002093A0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002093A8                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002093A8                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002093B0 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002093B0                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002093B0                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002093B8 ; int setgid(__gid_t gid)
extern:00000000002093B8                 extrn setgid:near       ; CODE XREF: _setgid↑j
extern:00000000002093B8                                         ; DATA XREF: .got:setgid_ptr↑o
extern:00000000002093C0 ; int getgrouplist(const char *user, __gid_t group, __gid_t *groups, int *ngroups)
extern:00000000002093C0                 extrn getgrouplist:near ; CODE XREF: _getgrouplist↑j
extern:00000000002093C0                                         ; DATA XREF: .got:getgrouplist_ptr↑o
extern:00000000002093C8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002093C8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002093C8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002093D0 ; char *strtok(char *s, const char *delim)
extern:00000000002093D0                 extrn strtok:near       ; CODE XREF: _strtok↑j
extern:00000000002093D0                                         ; DATA XREF: .got:strtok_ptr↑o
extern:00000000002093D8 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:00000000002093D8                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:00000000002093D8                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:00000000002093E0 ; int execvp(const char *file, char *const argv[])
extern:00000000002093E0                 extrn execvp:near       ; CODE XREF: _execvp↑j
extern:00000000002093E0                                         ; DATA XREF: .got:execvp_ptr↑o
extern:00000000002093E8 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002093E8                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002093E8                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002093F0 ; void __noreturn exit(int status)
extern:00000000002093F0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002093F0                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002093F8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002093F8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002093F8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000209400                 extrn __fprintf_chk:near
extern:0000000000209400                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000209400                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000209408 ; int setuid(__uid_t uid)
extern:0000000000209408                 extrn setuid:near       ; CODE XREF: _setuid↑j
extern:0000000000209408                                         ; DATA XREF: .got:setuid_ptr↑o
extern:0000000000209410 ; int mbsinit(const mbstate_t *ps)
extern:0000000000209410                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000209410                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000209418 ; int iswprint(wint_t wc)
extern:0000000000209418                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000209418                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000209420 ; int __fastcall __cxa_finalize(void *)
extern:0000000000209420                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000209420                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000209420                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000209428 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000209428                 extrn __ctype_b_loc:near
extern:0000000000209428                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000209428                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000209430                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000209430                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000209438                 extrn __gmon_start__:near ; weak
extern:0000000000209438                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000209438                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000209440                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000209440                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000209440
extern:0000000000209440
extern:0000000000209440                 end start
