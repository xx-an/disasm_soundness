LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 7406453BDD212F38A236381E803DD337C90EFD00B0854E2F0443F5ADF5F221C7
LOAD:0000000000000000 ; Input MD5    : DD07B9C14E50320DE7981C7D02C52672
LOAD:0000000000000000 ; Input CRC32  : 81015BEC
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/basenc
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'basenc.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'base32.c'
LOAD:0000000000000000 ; Source File : 'base64.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 36C00h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 9F30h                ; Size in file image
LOAD:00000000000000D8                 dq 9F30h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0AA10h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20AA10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 670h                 ; Size in file image
LOAD:0000000000000110                 dq 848h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0AC38h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20AC38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 8A1Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 8A1Ch                ; Physical address
LOAD:00000000000001B0                 dq 3CCh                 ; Size in file image
LOAD:00000000000001B8                 dq 3CCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0AA10h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20AA10h              ; Physical address
LOAD:0000000000000220                 dq 5F0h                 ; Size in file image
LOAD:0000000000000228                 dq 5F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 87h, 0DAh, 3Dh, 0A1h, 12h, 11h, 9Fh, 34h, 11h, 70h ; Desc
LOAD:0000000000000284                 db 94h, 0DBh, 0A4h, 0FAh, 94h, 83h, 0B9h, 8Dh, 4Ah, 0ACh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 38h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 38h, 39h, 3Fh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_8F8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_8F8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_8F8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_8F8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_8F8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_8F8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFreadUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8F8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_8F8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_8F8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_8F8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8F8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_8F8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStackChkFail - offset byte_8F8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetoptLong - offset byte_8F8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aMbrtowc - offset byte_8F8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrchr - offset byte_8F8, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aOverflow - offset byte_8F8, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_8F8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aAssertFail - offset byte_8F8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrtoulInterna - offset byte_8F8, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMemset - offset byte_8F8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aPosixFadvise - offset byte_8F8, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemchr - offset byte_8F8, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLibcStartMain - offset byte_8F8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemcmp - offset byte_8F8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFputsUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aCalloc - offset byte_8F8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStrcmp - offset byte_8F8, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aGmonStart - offset byte_8F8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemcpy - offset byte_8F8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFileno - offset byte_8F8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aMalloc - offset byte_8F8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFflush - offset byte_8F8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aNlLanginfo - offset byte_8F8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFreading - offset byte_8F8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFwriteUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aRealloc - offset byte_8F8, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aSetlocale - offset byte_8F8, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aPrintfChk - offset byte_8F8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMemmove - offset byte_8F8, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aError - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aFseeko - offset byte_8F8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFopen - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000730                            0>
LOAD:0000000000000748                 Elf64_Sym <offset aCxaAtexit - offset byte_8F8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aExit+1 - offset byte_8F8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFwrite - offset byte_8F8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFprintfChk - offset byte_8F8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aItmRegistertmc - offset byte_8F8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aMbsinit - offset byte_8F8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aIswprint - offset byte_8F8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aCxaFinalize - offset byte_8F8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aCtypeBLoc - offset byte_8F8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aStdout - offset byte_8F8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000820                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgname - offset byte_8F8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000838                            offset __bss_start, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aStdin - offset byte_8F8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000850                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgramInvocat - offset byte_8F8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000868                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aPrognameFull - offset byte_8F8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000880                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8F8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000898                            offset __bss_start, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aStderr - offset byte_8F8, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000008B0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aOptind - offset byte_8F8, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008C8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008E0                 Elf64_Sym <offset aOptarg - offset byte_8F8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000008E0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8 ; ELF String Table
LOAD:00000000000008F8 byte_8F8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008F8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008F9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C80↓o
LOAD:0000000000000903 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:000000000000090A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000917 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000921 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000929 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000730↑o
LOAD:000000000000092F aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000937 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:000000000000093E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000946 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000950 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000956 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000967 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000970 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000978 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:000000000000097E aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000984 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000984                                         ; LOAD:0000000000000760↑o
LOAD:000000000000098A aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000991 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000991                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:00000000000009A9 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009B7 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000009B7                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000009CE aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000009DC aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009E3 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009EA aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:00000000000009F9 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A00 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000A11 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000A18 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A26 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000A2D aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000A33 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A3A aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A41 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000A48 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A50 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A5C aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A6A aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000A71 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A7C aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000A83 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A8F aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A96 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A9D aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000AA8 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000AAF aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000AAF                                         ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000ACD aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000ADC aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000AE4 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000AE4                                         ; LOAD:00000000000003B8↑o
LOAD:0000000000000AF3 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000B03 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B0A aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B0A                                         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B1C aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B23 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B2E aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000B2E                                         ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000B41 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B50 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B55 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B60 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B70 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000B7D aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C90↓o
LOAD:0000000000000B87 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000CA0↓o
LOAD:0000000000000B93 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000CB0↓o
LOAD:0000000000000B9E aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000CC0↓o
LOAD:0000000000000BA8 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000CD0↓o
LOAD:0000000000000BB4 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000BB4                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000BD0 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BDF aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000BDF                                         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000BF9                 align 2
LOAD:0000000000000BFA ; ELF GNU Symbol Version Table
LOAD:0000000000000BFA                 dw 0
LOAD:0000000000000BFC                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000C06                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000C08                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C0C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000C0E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000C12                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000C16                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000C18                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000C1A                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000C1E                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000C20                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000C22                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C32                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000C34                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C36                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C38                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000C3A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C3C                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C3E                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C40                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000C42                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000C44                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000C46                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C48                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C4A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C4C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C4E                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C50                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000C52                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C54                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C56                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000C58                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C5A                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C5C                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C5E                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C60                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C62                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C64                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C66                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C68                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C6A                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C6C                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C6E                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000C70                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C72                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C74                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C76                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C78                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C7A                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C7C                 dw 0
LOAD:0000000000000C7E                 dw 0
LOAD:0000000000000C80 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C80                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8F8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C90                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8F8, \ ; "GLIBC_2.3"
LOAD:0000000000000C90                                10h>
LOAD:0000000000000CA0                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8F8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000CA0                                10h>
LOAD:0000000000000CB0                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8F8, \ ; "GLIBC_2.14"
LOAD:0000000000000CB0                                10h>
LOAD:0000000000000CC0                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8F8, \ ; "GLIBC_2.4"
LOAD:0000000000000CC0                                10h>
LOAD:0000000000000CD0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8F8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000CE0 ; ELF RELA Relocation Table
LOAD:0000000000000CE0                 Elf64_Rela <20AA10h, 8, 24F0h> ; R_X86_64_RELATIVE +24F0h
LOAD:0000000000000CF8                 Elf64_Rela <20AA18h, 8, 24B0h> ; R_X86_64_RELATIVE +24B0h
LOAD:0000000000000D10                 Elf64_Rela <20AA20h, 8, 74CFh> ; R_X86_64_RELATIVE +74CFh
LOAD:0000000000000D28                 Elf64_Rela <20AA40h, 8, 74D6h> ; R_X86_64_RELATIVE +74D6h
LOAD:0000000000000D40                 Elf64_Rela <20AA60h, 8, 74DBh> ; R_X86_64_RELATIVE +74DBh
LOAD:0000000000000D58                 Elf64_Rela <20AA80h, 8, 74EAh> ; R_X86_64_RELATIVE +74EAh
LOAD:0000000000000D70                 Elf64_Rela <20AAA0h, 8, 74F1h> ; R_X86_64_RELATIVE +74F1h
LOAD:0000000000000D88                 Elf64_Rela <20AAC0h, 8, 74FBh> ; R_X86_64_RELATIVE +74FBh
LOAD:0000000000000DA0                 Elf64_Rela <20AAE0h, 8, 7502h> ; R_X86_64_RELATIVE +7502h
LOAD:0000000000000DB8                 Elf64_Rela <20AB00h, 8, 750Ch> ; R_X86_64_RELATIVE +750Ch
LOAD:0000000000000DD0                 Elf64_Rela <20AB20h, 8, 7513h> ; R_X86_64_RELATIVE +7513h
LOAD:0000000000000DE8                 Elf64_Rela <20AB40h, 8, 751Dh> ; R_X86_64_RELATIVE +751Dh
LOAD:0000000000000E00                 Elf64_Rela <20AB60h, 8, 7527h> ; R_X86_64_RELATIVE +7527h
LOAD:0000000000000E18                 Elf64_Rela <20AB80h, 8, 752Bh> ; R_X86_64_RELATIVE +752Bh
LOAD:0000000000000E30                 Elf64_Rela <20ABA0h, 8, 7530h> ; R_X86_64_RELATIVE +7530h
LOAD:0000000000000E48                 Elf64_Rela <20ABE0h, 8, 80A1h> ; R_X86_64_RELATIVE +80A1h
LOAD:0000000000000E60                 Elf64_Rela <20ABE8h, 8, 80A9h> ; R_X86_64_RELATIVE +80A9h
LOAD:0000000000000E78                 Elf64_Rela <20ABF0h, 8, 80AFh> ; R_X86_64_RELATIVE +80AFh
LOAD:0000000000000E90                 Elf64_Rela <20ABF8h, 8, 80BCh> ; R_X86_64_RELATIVE +80BCh
LOAD:0000000000000EA8                 Elf64_Rela <20AC00h, 8, 80C9h> ; R_X86_64_RELATIVE +80C9h
LOAD:0000000000000EC0                 Elf64_Rela <20AC08h, 8, 735Ah> ; R_X86_64_RELATIVE +735Ah
LOAD:0000000000000ED8                 Elf64_Rela <20AC10h, 8, 80DDh> ; R_X86_64_RELATIVE +80DDh
LOAD:0000000000000EF0                 Elf64_Rela <20AC18h, 8, 80C2h> ; R_X86_64_RELATIVE +80C2h
LOAD:0000000000000F08                 Elf64_Rela <20AC20h, 8, 742Eh> ; R_X86_64_RELATIVE +742Eh
LOAD:0000000000000F20                 Elf64_Rela <20AC28h, 8, 80E5h> ; R_X86_64_RELATIVE +80E5h
LOAD:0000000000000F38                 Elf64_Rela <20B008h, 8, 20B008h> ; R_X86_64_RELATIVE +20B008h
LOAD:0000000000000F50                 Elf64_Rela <20B010h, 8, 7DC9h> ; R_X86_64_RELATIVE +7DC9h
LOAD:0000000000000F68                 Elf64_Rela <20B060h, 8, 20B070h> ; R_X86_64_RELATIVE +20B070h
LOAD:0000000000000F80                 Elf64_Rela <20B078h, 8, 20B120h> ; R_X86_64_RELATIVE +20B120h
LOAD:0000000000000F98                 Elf64_Rela <20AFD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000FB0                 Elf64_Rela <20AFD8h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000FC8                 Elf64_Rela <20AFE0h, 2000000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000FE0                 Elf64_Rela <20AFE8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000FF8                 Elf64_Rela <20AFF0h, 3600000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001010                 Elf64_Rela <20B080h, 3900000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001028                 Elf64_Rela <20B088h, 3800000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001040                 Elf64_Rela <20B090h, 3A00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001058                 Elf64_Rela <20B098h, 3F00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001070                 Elf64_Rela <20B0A0h, 4000000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001088                 Elf64_Rela <20B0A8h, 3C00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000010A0                 Elf64_Rela <20B0C0h, 3E00000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000010B8 ; ELF JMPREL Relocation Table
LOAD:00000000000010B8                 Elf64_Rela <20AE40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000010D0                 Elf64_Rela <20AE48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000010E8                 Elf64_Rela <20AE50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001100                 Elf64_Rela <20AE58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001118                 Elf64_Rela <20AE60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001130                 Elf64_Rela <20AE68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001148                 Elf64_Rela <20AE70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:0000000000001160                 Elf64_Rela <20AE78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001178                 Elf64_Rela <20AE80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001190                 Elf64_Rela <20AE88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000011A8                 Elf64_Rela <20AE90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000011C0                 Elf64_Rela <20AE98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000011D8                 Elf64_Rela <20AEA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000011F0                 Elf64_Rela <20AEA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001208                 Elf64_Rela <20AEB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001220                 Elf64_Rela <20AEB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001238                 Elf64_Rela <20AEC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001250                 Elf64_Rela <20AEC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001268                 Elf64_Rela <20AED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001280                 Elf64_Rela <20AED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001298                 Elf64_Rela <20AEE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000012B0                 Elf64_Rela <20AEE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:00000000000012C8                 Elf64_Rela <20AEF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000012E0                 Elf64_Rela <20AEF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000012F8                 Elf64_Rela <20AF00h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001310                 Elf64_Rela <20AF08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001328                 Elf64_Rela <20AF10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001340                 Elf64_Rela <20AF18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001358                 Elf64_Rela <20AF20h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001370                 Elf64_Rela <20AF28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001388                 Elf64_Rela <20AF30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000013A0                 Elf64_Rela <20AF38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000013B8                 Elf64_Rela <20AF40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000013D0                 Elf64_Rela <20AF48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000013E8                 Elf64_Rela <20AF50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001400                 Elf64_Rela <20AF58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001418                 Elf64_Rela <20AF60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001430                 Elf64_Rela <20AF68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001448                 Elf64_Rela <20AF70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001460                 Elf64_Rela <20AF78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001478                 Elf64_Rela <20AF80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001490                 Elf64_Rela <20AF88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000014A8                 Elf64_Rela <20AF90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000014C0                 Elf64_Rela <20AF98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000014D8                 Elf64_Rela <20AFA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000014F0                 Elf64_Rela <20AFA8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001508                 Elf64_Rela <20AFB0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001520                 Elf64_Rela <20AFB8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001538                 Elf64_Rela <20AFC0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001550                 Elf64_Rela <20AFC8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001550 LOAD            ends
LOAD:0000000000001550
.init:0000000000001568 ; ===========================================================================
.init:0000000000001568
.init:0000000000001568 ; Segment type: Pure code
.init:0000000000001568 ; Segment permissions: Read/Execute
.init:0000000000001568 _init           segment dword public 'CODE' use64
.init:0000000000001568                 assume cs:_init
.init:0000000000001568                 ;org 1568h
.init:0000000000001568                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001568
.init:0000000000001568 ; =============== S U B R O U T I N E =======================================
.init:0000000000001568
.init:0000000000001568
.init:0000000000001568                 public _init_proc
.init:0000000000001568 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001568                 sub     rsp, 8          ; _init
.init:000000000000156C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001573                 test    rax, rax
.init:0000000000001576                 jz      short loc_157A
.init:0000000000001578                 call    rax ; __gmon_start__
.init:000000000000157A
.init:000000000000157A loc_157A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000157A                 add     rsp, 8
.init:000000000000157E                 retn
.init:000000000000157E _init_proc      endp
.init:000000000000157E
.init:000000000000157E _init           ends
.init:000000000000157E
LOAD:000000000000157F ; ===========================================================================
LOAD:000000000000157F
LOAD:000000000000157F ; Segment type: Pure code
LOAD:000000000000157F ; Segment permissions: Read/Execute
LOAD:000000000000157F LOAD            segment byte public 'CODE' use64
LOAD:000000000000157F                 assume cs:LOAD
LOAD:000000000000157F                 ;org 157Fh
LOAD:000000000000157F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000157F                 align 20h
LOAD:000000000000157F LOAD            ends
LOAD:000000000000157F
.plt:0000000000001580 ; ===========================================================================
.plt:0000000000001580
.plt:0000000000001580 ; Segment type: Pure code
.plt:0000000000001580 ; Segment permissions: Read/Execute
.plt:0000000000001580 _plt            segment para public 'CODE' use64
.plt:0000000000001580                 assume cs:_plt
.plt:0000000000001580                 ;org 1580h
.plt:0000000000001580                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580
.plt:0000000000001580 sub_1580        proc near               ; CODE XREF: .plt:000000000000159B↓j
.plt:0000000000001580                                         ; .plt:00000000000015AB↓j ...
.plt:0000000000001580 ; __unwind {
.plt:0000000000001580                 push    cs:qword_20AE30
.plt:0000000000001586                 jmp     cs:qword_20AE38
.plt:0000000000001586 sub_1580        endp
.plt:0000000000001586
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:000000000000158C                 align 10h
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; void free(void *ptr)
.plt:0000000000001590 _free           proc near               ; CODE XREF: base32_decode_alloc_ctx+A7↓p
.plt:0000000000001590                                         ; base64_decode_alloc_ctx+A7↓p ...
.plt:0000000000001590                 jmp     cs:free_ptr
.plt:0000000000001590 _free           endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    0
.plt:000000000000159B                 jmp     sub_1580
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: noreturn thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void __noreturn abort(void)
.plt:00000000000015A0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000015A0                                         ; quotearg_buffer_restyled:def_4691↓p ...
.plt:00000000000015A0                 jmp     cs:abort_ptr
.plt:00000000000015A0 _abort          endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    1
.plt:00000000000015AB                 jmp     sub_1580
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; int *__errno_location(void)
.plt:00000000000015B0 ___errno_location proc near             ; CODE XREF: main+831↓p
.plt:00000000000015B0                                         ; main+8B9↓p ...
.plt:00000000000015B0                 jmp     cs:__errno_location_ptr
.plt:00000000000015B0 ___errno_location endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    2
.plt:00000000000015BB                 jmp     sub_1580
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000015C0 _strncmp        proc near               ; CODE XREF: usage+3BC↓p
.plt:00000000000015C0                                         ; usage+47D↓p
.plt:00000000000015C0                 jmp     cs:strncmp_ptr
.plt:00000000000015C0 _strncmp        endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    3
.plt:00000000000015CB                 jmp     sub_1580
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: noreturn thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; void __noreturn _exit(int status)
.plt:00000000000015D0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000015D0                 jmp     cs:_exit_ptr
.plt:00000000000015D0 __exit          endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    4
.plt:00000000000015DB                 jmp     sub_1580
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; size_t __fpending(FILE *fp)
.plt:00000000000015E0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000015E0                 jmp     cs:__fpending_ptr
.plt:00000000000015E0 ___fpending     endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    5
.plt:00000000000015EB                 jmp     sub_1580
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000015F0 _fread_unlocked proc near               ; CODE XREF: main+325↓p
.plt:00000000000015F0                                         ; main+72E↓p
.plt:00000000000015F0                 jmp     cs:fread_unlocked_ptr
.plt:00000000000015F0 _fread_unlocked endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    6
.plt:00000000000015FB                 jmp     sub_1580
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; char *textdomain(const char *domainname)
.plt:0000000000001600 _textdomain     proc near               ; CODE XREF: main+65↓p
.plt:0000000000001600                 jmp     cs:textdomain_ptr
.plt:0000000000001600 _textdomain     endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    7
.plt:000000000000160B                 jmp     sub_1580
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int fclose(FILE *stream)
.plt:0000000000001610 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001610                                         ; rpl_fclose+6B↓j
.plt:0000000000001610                 jmp     cs:fclose_ptr
.plt:0000000000001610 _fclose         endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    8
.plt:000000000000161B                 jmp     sub_1580
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001620 _bindtextdomain proc near               ; CODE XREF: main+59↓p
.plt:0000000000001620                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001620 _bindtextdomain endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    9
.plt:000000000000162B                 jmp     sub_1580
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001630 _dcgettext      proc near               ; CODE XREF: main+15E↓p
.plt:0000000000001630                                         ; main+829↓p ...
.plt:0000000000001630                 jmp     cs:dcgettext_ptr
.plt:0000000000001630 _dcgettext      endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    0Ah
.plt:000000000000163B                 jmp     sub_1580
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001640 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001640                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001640 ___ctype_get_mb_cur_max endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    0Bh
.plt:000000000000164B                 jmp     sub_1580
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; size_t strlen(const char *s)
.plt:0000000000001650 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001650                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001650                 jmp     cs:strlen_ptr
.plt:0000000000001650 _strlen         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    0Ch
.plt:000000000000165B                 jmp     sub_1580
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: noreturn thunk
.plt:0000000000001660
.plt:0000000000001660 ___stack_chk_fail proc near             ; CODE XREF: main:loc_23A2↓p
.plt:0000000000001660                                         ; z85_encode:loc_2D03↓p ...
.plt:0000000000001660                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001660 ___stack_chk_fail endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    0Dh
.plt:000000000000166B                 jmp     sub_1580
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001670 _getopt_long    proc near               ; CODE XREF: main+91↓p
.plt:0000000000001670                 jmp     cs:getopt_long_ptr
.plt:0000000000001670 _getopt_long    endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    0Eh
.plt:000000000000167B                 jmp     sub_1580
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001680 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001680                 jmp     cs:mbrtowc_ptr
.plt:0000000000001680 _mbrtowc        endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    0Fh
.plt:000000000000168B                 jmp     sub_1580
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; char *strchr(const char *s, int c)
.plt:0000000000001690 _strchr         proc near               ; CODE XREF: isz85+22↓p
.plt:0000000000001690                                         ; xstrtoumax+123↓p ...
.plt:0000000000001690                 jmp     cs:strchr_ptr
.plt:0000000000001690 _strchr         endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    10h
.plt:000000000000169B                 jmp     sub_1580
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000016A0 ___overflow     proc near               ; CODE XREF: main+8D7↓p
.plt:00000000000016A0                                         ; main+AEF↓p
.plt:00000000000016A0                 jmp     cs:__overflow_ptr
.plt:00000000000016A0 ___overflow     endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    11h
.plt:00000000000016AB                 jmp     sub_1580
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; char *strrchr(const char *s, int c)
.plt:00000000000016B0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000016B0                 jmp     cs:strrchr_ptr
.plt:00000000000016B0 _strrchr        endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    12h
.plt:00000000000016BB                 jmp     sub_1580
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000016C0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000016C0                                         ; rpl_fseeko+3B↓p
.plt:00000000000016C0                 jmp     cs:lseek_ptr
.plt:00000000000016C0 _lseek          endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    13h
.plt:00000000000016CB                 jmp     sub_1580
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: noreturn thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000016D0 ___assert_fail  proc near               ; CODE XREF: base32hex_encode+71↓p
.plt:00000000000016D0                                         ; xstrtoumax+39F↓p
.plt:00000000000016D0                 jmp     cs:__assert_fail_ptr
.plt:00000000000016D0 ___assert_fail  endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    14h
.plt:00000000000016DB                 jmp     sub_1580
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:00000000000016E0 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:00000000000016E0                 jmp     cs:__strtoul_internal_ptr
.plt:00000000000016E0 ___strtoul_internal endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    15h
.plt:00000000000016EB                 jmp     sub_1580
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000016F0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000016F0                                         ; xzalloc+12↓j
.plt:00000000000016F0                 jmp     cs:memset_ptr
.plt:00000000000016F0 _memset         endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    16h
.plt:00000000000016FB                 jmp     sub_1580
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001700 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001700                                         ; fadvise+16↓j
.plt:0000000000001700                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001700 _posix_fadvise  endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    17h
.plt:000000000000170B                 jmp     sub_1580
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001710 _memchr         proc near               ; CODE XREF: base32_decode_ctx+20A↓p
.plt:0000000000001710                                         ; base64_decode_ctx+20A↓p
.plt:0000000000001710                 jmp     cs:memchr_ptr
.plt:0000000000001710 _memchr         endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    18h
.plt:000000000000171B                 jmp     sub_1580
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001720 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001720                 jmp     cs:memcmp_ptr
.plt:0000000000001720 _memcmp         endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    19h
.plt:000000000000172B                 jmp     sub_1580
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001730 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001730                                         ; usage+C2↓p ...
.plt:0000000000001730                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001730 _fputs_unlocked endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    1Ah
.plt:000000000000173B                 jmp     sub_1580
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001740 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001740                 jmp     cs:calloc_ptr
.plt:0000000000001740 _calloc         endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    1Bh
.plt:000000000000174B                 jmp     sub_1580
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001750 _strcmp         proc near               ; CODE XREF: main+220↓p
.plt:0000000000001750                                         ; main+91D↓p
.plt:0000000000001750                 jmp     cs:strcmp_ptr
.plt:0000000000001750 _strcmp         endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    1Ch
.plt:000000000000175B                 jmp     sub_1580
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001760 _memcpy         proc near               ; CODE XREF: base64url_decode_ctx_wrapper+2B↓p
.plt:0000000000001760                                         ; xmemdup+23↓j
.plt:0000000000001760                 jmp     cs:memcpy_ptr
.plt:0000000000001760 _memcpy         endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    1Dh
.plt:000000000000176B                 jmp     sub_1580
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; int fileno(FILE *stream)
.plt:0000000000001770 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001770                                         ; rpl_fclose+7↓p ...
.plt:0000000000001770                 jmp     cs:fileno_ptr
.plt:0000000000001770 _fileno         endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    1Eh
.plt:000000000000177B                 jmp     sub_1580
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; void *malloc(size_t size)
.plt:0000000000001780 _malloc         proc near               ; CODE XREF: base32_encode_alloc+59↓p
.plt:0000000000001780                                         ; base32_decode_alloc_ctx+3C↓p ...
.plt:0000000000001780                 jmp     cs:malloc_ptr
.plt:0000000000001780 _malloc         endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    1Fh
.plt:000000000000178B                 jmp     sub_1580
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; int fflush(FILE *stream)
.plt:0000000000001790 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001790                                         ; rpl_fflush+3B↓j
.plt:0000000000001790                 jmp     cs:fflush_ptr
.plt:0000000000001790 _fflush         endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    20h ; ' '
.plt:000000000000179B                 jmp     sub_1580
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; char *nl_langinfo(nl_item item)
.plt:00000000000017A0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000017A0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000017A0 _nl_langinfo    endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    21h ; '!'
.plt:00000000000017AB                 jmp     sub_1580
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; int __freading(FILE *fp)
.plt:00000000000017B0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000017B0                                         ; rpl_fflush+9↓p
.plt:00000000000017B0                 jmp     cs:__freading_ptr
.plt:00000000000017B0 ___freading     endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    22h ; '"'
.plt:00000000000017BB                 jmp     sub_1580
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000017C0 _fwrite_unlocked proc near              ; CODE XREF: main+622↓p
.plt:00000000000017C0                                         ; main+868↓p ...
.plt:00000000000017C0                 jmp     cs:fwrite_unlocked_ptr
.plt:00000000000017C0 _fwrite_unlocked endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    23h ; '#'
.plt:00000000000017CB                 jmp     sub_1580
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000017D0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000017D0                 jmp     cs:realloc_ptr
.plt:00000000000017D0 _realloc        endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    24h ; '$'
.plt:00000000000017DB                 jmp     sub_1580
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; char *setlocale(int category, const char *locale)
.plt:00000000000017E0 _setlocale      proc near               ; CODE XREF: main+46↓p
.plt:00000000000017E0                                         ; usage+3A3↓p ...
.plt:00000000000017E0                 jmp     cs:setlocale_ptr
.plt:00000000000017E0 _setlocale      endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    25h ; '%'
.plt:00000000000017EB                 jmp     sub_1580
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:00000000000017F0                                         ; usage+397↓p ...
.plt:00000000000017F0                 jmp     cs:__printf_chk_ptr
.plt:00000000000017F0 ___printf_chk   endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    26h ; '&'
.plt:00000000000017FB                 jmp     sub_1580
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001800 _memmove        proc near               ; CODE XREF: main+38A↓p
.plt:0000000000001800                 jmp     cs:memmove_ptr
.plt:0000000000001800 _memmove        endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    27h ; '''
.plt:000000000000180B                 jmp     sub_1580
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001810 _error          proc near               ; CODE XREF: main+842↓p
.plt:0000000000001810                                         ; main+8CA↓p ...
.plt:0000000000001810                 jmp     cs:error_ptr
.plt:0000000000001810 _error          endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    28h ; '('
.plt:000000000000181B                 jmp     sub_1580
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001820 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_706A↓j
.plt:0000000000001820                 jmp     cs:fseeko_ptr
.plt:0000000000001820 _fseeko         endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    29h ; ')'
.plt:000000000000182B                 jmp     sub_1580
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001830 _fopen          proc near               ; CODE XREF: main+239↓p
.plt:0000000000001830                 jmp     cs:fopen_ptr
.plt:0000000000001830 _fopen          endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    2Ah ; '*'
.plt:000000000000183B                 jmp     sub_1580
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001840 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001840                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001840 ___cxa_atexit   endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    2Bh ; '+'
.plt:000000000000184B                 jmp     sub_1580
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: noreturn thunk
.plt:0000000000001850
.plt:0000000000001850 ; void __noreturn exit(int status)
.plt:0000000000001850 _exit           proc near               ; CODE XREF: main+109↓p
.plt:0000000000001850                                         ; usage+58↓p
.plt:0000000000001850                 jmp     cs:exit_ptr
.plt:0000000000001850 _exit           endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    2Ch ; ','
.plt:000000000000185B                 jmp     sub_1580
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001860 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001860                 jmp     cs:fwrite_ptr
.plt:0000000000001860 _fwrite         endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    2Dh ; '-'
.plt:000000000000186B                 jmp     sub_1580
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001870                                         ; version_etc_arn+37↓p ...
.plt:0000000000001870                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001870 ___fprintf_chk  endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    2Eh ; '.'
.plt:000000000000187B                 jmp     sub_1580
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001880 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001880                 jmp     cs:mbsinit_ptr
.plt:0000000000001880 _mbsinit        endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    2Fh ; '/'
.plt:000000000000188B                 jmp     sub_1580
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; int iswprint(wint_t wc)
.plt:0000000000001890 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001890                 jmp     cs:iswprint_ptr
.plt:0000000000001890 _iswprint       endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    30h ; '0'
.plt:000000000000189B                 jmp     sub_1580
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000018A0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000018A0                                         ; xstrtoumax+55↓p
.plt:00000000000018A0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000018A0 ___ctype_b_loc  endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    31h ; '1'
.plt:00000000000018AB                 jmp     sub_1580
.plt:00000000000018AB ; } // starts at 1580
.plt:00000000000018AB _plt            ends
.plt:00000000000018AB
.plt.got:00000000000018B0 ; ===========================================================================
.plt.got:00000000000018B0
.plt.got:00000000000018B0 ; Segment type: Pure code
.plt.got:00000000000018B0 ; Segment permissions: Read/Execute
.plt.got:00000000000018B0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000018B0                 assume cs:_plt_got
.plt.got:00000000000018B0                 ;org 18B0h
.plt.got:00000000000018B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000018B0
.plt.got:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000018B0
.plt.got:00000000000018B0 ; Attributes: thunk
.plt.got:00000000000018B0
.plt.got:00000000000018B0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000018B0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000018B0 ; __unwind {
.plt.got:00000000000018B0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000018B0 __cxa_finalize  endp
.plt.got:00000000000018B0
.plt.got:00000000000018B0 ; ---------------------------------------------------------------------------
.plt.got:00000000000018B6                 align 8
.plt.got:00000000000018B6 ; } // starts at 18B0
.plt.got:00000000000018B6 _plt_got        ends
.plt.got:00000000000018B6
LOAD:00000000000018B8 ; ===========================================================================
LOAD:00000000000018B8
LOAD:00000000000018B8 ; Segment type: Pure code
LOAD:00000000000018B8 ; Segment permissions: Read/Execute
LOAD:00000000000018B8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000018B8                 assume cs:LOAD
LOAD:00000000000018B8                 ;org 18B8h
LOAD:00000000000018B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000018B8                 align 20h
LOAD:00000000000018B8 LOAD            ends
LOAD:00000000000018B8
.text:00000000000018C0 ; ===========================================================================
.text:00000000000018C0
.text:00000000000018C0 ; Segment type: Pure code
.text:00000000000018C0 ; Segment permissions: Read/Execute
.text:00000000000018C0 _text           segment para public 'CODE' use64
.text:00000000000018C0                 assume cs:_text
.text:00000000000018C0                 ;org 18C0h
.text:00000000000018C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000018C0
.text:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018C0
.text:00000000000018C0
.text:00000000000018C0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000018C0                 public main
.text:00000000000018C0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000018C0
.text:00000000000018C0 stream          = qword ptr -0B0h
.text:00000000000018C0 var_A8          = qword ptr -0A8h
.text:00000000000018C0 var_A0          = qword ptr -0A0h
.text:00000000000018C0 var_98          = qword ptr -98h
.text:00000000000018C0 var_90          = qword ptr -90h
.text:00000000000018C0 ptr             = qword ptr -88h
.text:00000000000018C0 filename        = qword ptr -80h
.text:00000000000018C0 n               = qword ptr -70h
.text:00000000000018C0 var_68          = dword ptr -68h
.text:00000000000018C0 var_58          = qword ptr -58h
.text:00000000000018C0 var_40          = qword ptr -40h
.text:00000000000018C0
.text:00000000000018C0 ; __unwind {
.text:00000000000018C0                 push    r15
.text:00000000000018C2                 push    r14
.text:00000000000018C4                 xor     r14d, r14d
.text:00000000000018C7                 push    r13
.text:00000000000018C9                 push    r12
.text:00000000000018CB                 mov     r13d, 4Ch ; 'L'
.text:00000000000018D1                 push    rbp
.text:00000000000018D2                 push    rbx
.text:00000000000018D3                 mov     ebp, edi
.text:00000000000018D5                 mov     rbx, rsi
.text:00000000000018D8                 xor     r12d, r12d
.text:00000000000018DB                 sub     rsp, 88h
.text:00000000000018E2                 mov     rdi, [rsi]
.text:00000000000018E5                 mov     rax, fs:28h
.text:00000000000018EE                 mov     [rsp+0B8h+var_40], rax
.text:00000000000018F3                 xor     eax, eax
.text:00000000000018F5                 call    set_program_name
.text:00000000000018FA                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001901                 mov     edi, 6          ; category
.text:0000000000001906                 call    _setlocale
.text:000000000000190B                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001912                 lea     rdi, domainname ; "coreutils"
.text:0000000000001919                 call    _bindtextdomain
.text:000000000000191E                 lea     rdi, domainname ; "coreutils"
.text:0000000000001925                 call    _textdomain
.text:000000000000192A                 lea     rdi, close_stdout
.text:0000000000001931                 call    atexit
.text:0000000000001936                 mov     byte ptr [rsp+0B8h+var_98], 0
.text:000000000000193B
.text:000000000000193B loc_193B:                               ; CODE XREF: main+122↓j
.text:000000000000193B                                         ; main+136↓j ...
.text:000000000000193B                 lea     rcx, long_options ; longopts
.text:0000000000001942                 lea     rdx, shortopts  ; "diw:"
.text:0000000000001949                 xor     r8d, r8d        ; longind
.text:000000000000194C                 mov     rsi, rbx        ; argv
.text:000000000000194F                 mov     edi, ebp        ; argc
.text:0000000000001951                 call    _getopt_long
.text:0000000000001956                 cmp     eax, 0FFFFFFFFh
.text:0000000000001959                 jz      loc_1A4D
.text:000000000000195F                 cmp     eax, 69h ; 'i'
.text:0000000000001962                 jz      loc_1A00
.text:0000000000001968                 jg      short loc_19D0
.text:000000000000196A                 cmp     eax, 0FFFFFF7Eh
.text:000000000000196F                 jz      loc_22DD
.text:0000000000001975                 cmp     eax, 64h ; 'd'
.text:0000000000001978                 jz      short loc_19F0
.text:000000000000197A                 cmp     eax, 0FFFFFF7Dh
.text:000000000000197F                 jz      short loc_1990
.text:0000000000001981
.text:0000000000001981 loc_1981:                               ; CODE XREF: main+115↓j
.text:0000000000001981                                         ; main+11D↓j ...
.text:0000000000001981                 mov     edi, 1          ; status
.text:0000000000001986                 call    usage
.text:0000000000001986 ; ---------------------------------------------------------------------------
.text:000000000000198B                 align 10h
.text:0000000000001990
.text:0000000000001990 loc_1990:                               ; CODE XREF: main+BF↑j
.text:0000000000001990                 sub     rsp, 8
.text:0000000000001994                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000199B                 mov     rcx, cs:Version
.text:00000000000019A2                 push    0
.text:00000000000019A4                 lea     r9, aAssafGordon ; "Assaf Gordon"
.text:00000000000019AB                 lea     r8, aSimonJosefsson ; "Simon Josefsson"
.text:00000000000019B2                 lea     rdx, unk_73F0
.text:00000000000019B9                 lea     rsi, aBasenc    ; "basenc"
.text:00000000000019C0                 xor     eax, eax
.text:00000000000019C2                 call    version_etc
.text:00000000000019C7                 xor     edi, edi        ; status
.text:00000000000019C9                 call    _exit
.text:00000000000019C9 ; ---------------------------------------------------------------------------
.text:00000000000019CE                 align 10h
.text:00000000000019D0
.text:00000000000019D0 loc_19D0:                               ; CODE XREF: main+A8↑j
.text:00000000000019D0                 cmp     eax, 77h ; 'w'
.text:00000000000019D3                 jz      short loc_1A10
.text:00000000000019D5                 jl      short loc_1981
.text:00000000000019D7                 lea     edx, [rax-80h]
.text:00000000000019DA                 cmp     edx, 7
.text:00000000000019DD                 ja      short loc_1981
.text:00000000000019DF                 mov     r14d, eax
.text:00000000000019E2                 jmp     loc_193B
.text:00000000000019E2 ; ---------------------------------------------------------------------------
.text:00000000000019E7                 align 10h
.text:00000000000019F0
.text:00000000000019F0 loc_19F0:                               ; CODE XREF: main+B8↑j
.text:00000000000019F0                 mov     r12d, 1
.text:00000000000019F6                 jmp     loc_193B
.text:00000000000019F6 ; ---------------------------------------------------------------------------
.text:00000000000019FB                 align 20h
.text:0000000000001A00
.text:0000000000001A00 loc_1A00:                               ; CODE XREF: main+A2↑j
.text:0000000000001A00                 mov     byte ptr [rsp+0B8h+var_98], 1
.text:0000000000001A05                 jmp     loc_193B
.text:0000000000001A05 ; ---------------------------------------------------------------------------
.text:0000000000001A0A                 align 10h
.text:0000000000001A10
.text:0000000000001A10 loc_1A10:                               ; CODE XREF: main+113↑j
.text:0000000000001A10                 lea     rsi, msgid      ; "invalid wrap size"
.text:0000000000001A17                 mov     edx, 5          ; category
.text:0000000000001A1C                 xor     edi, edi        ; domainname
.text:0000000000001A1E                 call    _dcgettext
.text:0000000000001A23                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001A2A                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001A31                 mov     r8, rax
.text:0000000000001A34                 xor     r9d, r9d
.text:0000000000001A37                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000001A3E                 xor     esi, esi
.text:0000000000001A40                 call    xdectoumax
.text:0000000000001A45                 mov     r13, rax
.text:0000000000001A48                 jmp     loc_193B
.text:0000000000001A4D ; ---------------------------------------------------------------------------
.text:0000000000001A4D
.text:0000000000001A4D loc_1A4D:                               ; CODE XREF: main+99↑j
.text:0000000000001A4D                 add     r14d, 0FFFFFF80h ; switch 8 cases
.text:0000000000001A51                 cmp     r14d, 7
.text:0000000000001A55                 ja      def_1A69        ; jumptable 0000000000001A69 default case
.text:0000000000001A5B                 lea     rdx, jpt_1A69
.text:0000000000001A62                 movsxd  rax, ds:(jpt_1A69 - 7C40h)[rdx+r14*4]
.text:0000000000001A66                 add     rax, rdx
.text:0000000000001A69                 jmp     rax             ; switch jump
.text:0000000000001A6B ; ---------------------------------------------------------------------------
.text:0000000000001A6B
.text:0000000000001A6B loc_1A6B:                               ; CODE XREF: main+1A9↑j
.text:0000000000001A6B                                         ; DATA XREF: .rodata:jpt_1A69↓o
.text:0000000000001A6B                 lea     rax, base2_length ; jumptable 0000000000001A69 case 134
.text:0000000000001A72                 mov     cs:base_length, rax
.text:0000000000001A79                 lea     rax, isbase2
.text:0000000000001A80                 mov     cs:isbase, rax
.text:0000000000001A87                 lea     rax, base2lsbf_encode
.text:0000000000001A8E                 mov     cs:base_encode, rax
.text:0000000000001A95                 lea     rax, base2_decode_ctx_init
.text:0000000000001A9C                 mov     cs:base_decode_ctx_init, rax
.text:0000000000001AA3                 lea     rax, base2lsbf_decode_ctx
.text:0000000000001AAA                 mov     cs:base_decode_ctx, rax
.text:0000000000001AB1
.text:0000000000001AB1 loc_1AB1:                               ; CODE XREF: main+3DF↓j
.text:0000000000001AB1                                         ; main+42A↓j ...
.text:0000000000001AB1                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001AB8                 mov     edx, ebp
.text:0000000000001ABA                 sub     edx, eax
.text:0000000000001ABC                 sub     edx, 1
.text:0000000000001ABF                 jg      loc_2367
.text:0000000000001AC5                 cmp     eax, ebp
.text:0000000000001AC7                 jge     loc_1F73
.text:0000000000001ACD                 mov     rax, [rbx+rax*8]
.text:0000000000001AD1                 lea     rsi, aLt+2      ; s2
.text:0000000000001AD8                 mov     rdi, rax        ; s1
.text:0000000000001ADB                 mov     [rsp+0B8h+filename], rax
.text:0000000000001AE0                 call    _strcmp
.text:0000000000001AE5                 test    eax, eax
.text:0000000000001AE7                 jz      loc_1F7F
.text:0000000000001AED                 mov     rdi, [rsp+0B8h+filename] ; filename
.text:0000000000001AF2                 lea     rsi, modes      ; "rb"
.text:0000000000001AF9                 call    _fopen
.text:0000000000001AFE                 test    rax, rax
.text:0000000000001B01                 mov     rbp, rax
.text:0000000000001B04                 jz      loc_2336
.text:0000000000001B0A
.text:0000000000001B0A loc_1B0A:                               ; CODE XREF: main+6C6↓j
.text:0000000000001B0A                 mov     esi, 2
.text:0000000000001B0F                 mov     rdi, rbp
.text:0000000000001B12                 call    fadvise
.text:0000000000001B17                 test    r12b, r12b
.text:0000000000001B1A                 jz      loc_1F8B
.text:0000000000001B20                 mov     rax, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B27                 mov     edi, 1400h
.text:0000000000001B2C                 mov     [rsp+0B8h+var_90], rax
.text:0000000000001B31                 call    cs:base_length
.text:0000000000001B37                 movsxd  rdi, eax
.text:0000000000001B3A                 call    xmalloc
.text:0000000000001B3F                 mov     edi, 1400h
.text:0000000000001B44                 mov     r12, rax
.text:0000000000001B47                 call    xmalloc
.text:0000000000001B4C                 mov     [rsp+0B8h+ptr], rax
.text:0000000000001B51                 lea     rax, [rsp+0B8h+var_68]
.text:0000000000001B56                 mov     [rsp+0B8h+var_58], 0
.text:0000000000001B5F                 mov     [rsp+0B8h+var_A8], rax
.text:0000000000001B64                 mov     rdi, rax
.text:0000000000001B67                 call    cs:base_decode_ctx_init
.text:0000000000001B6D                 lea     rax, [rsp+0B8h+n]
.text:0000000000001B72                 mov     [rsp+0B8h+var_A0], rax
.text:0000000000001B77                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001B80
.text:0000000000001B80 loc_1B80:                               ; CODE XREF: main+5E2↓j
.text:0000000000001B80                 xor     ebx, ebx
.text:0000000000001B82                 mov     [rsp+0B8h+stream], rbp
.text:0000000000001B87                 jmp     short loc_1BC6
.text:0000000000001B87 ; ---------------------------------------------------------------------------
.text:0000000000001B89                 align 10h
.text:0000000000001B90
.text:0000000000001B90 loc_1B90:                               ; CODE XREF: main+337↓j
.text:0000000000001B90                                         ; main+343↓j ...
.text:0000000000001B90                 mov     rax, [rsp+0B8h+stream]
.text:0000000000001B95                 add     rbx, r13
.text:0000000000001B98                 test    byte ptr [rax], 20h
.text:0000000000001B9B                 jnz     loc_22B1
.text:0000000000001BA1                 mov     edi, 1400h
.text:0000000000001BA6                 call    cs:base_length
.text:0000000000001BAC                 cdqe
.text:0000000000001BAE                 cmp     rbx, rax
.text:0000000000001BB1                 jnb     loc_1E80
.text:0000000000001BB7                 mov     rax, [rsp+0B8h+stream]
.text:0000000000001BBC                 mov     eax, [rax]
.text:0000000000001BBE                 test    al, 10h
.text:0000000000001BC0                 jnz     loc_1F30
.text:0000000000001BC6
.text:0000000000001BC6 loc_1BC6:                               ; CODE XREF: main+2C7↑j
.text:0000000000001BC6                 mov     edi, 1400h
.text:0000000000001BCB                 call    cs:base_length
.text:0000000000001BD1                 mov     rcx, [rsp+0B8h+stream] ; stream
.text:0000000000001BD6                 movsxd  rdx, eax
.text:0000000000001BD9                 lea     rdi, [r12+rbx]  ; ptr
.text:0000000000001BDD                 sub     rdx, rbx        ; n
.text:0000000000001BE0                 mov     esi, 1          ; size
.text:0000000000001BE5                 call    _fread_unlocked
.text:0000000000001BEA                 cmp     byte ptr [rsp+0B8h+var_98], 0
.text:0000000000001BEF                 mov     r13, rax
.text:0000000000001BF2                 mov     [rsp+0B8h+n], rax
.text:0000000000001BF7                 jz      short loc_1B90
.text:0000000000001BF9                 xor     r14d, r14d
.text:0000000000001BFC                 nop     dword ptr [rax+00h]
.text:0000000000001C00
.text:0000000000001C00 loc_1C00:                               ; CODE XREF: main+5B4↓j
.text:0000000000001C00                 test    r13, r13
.text:0000000000001C03                 jz      short loc_1B90
.text:0000000000001C05
.text:0000000000001C05 loc_1C05:                               ; CODE XREF: main+392↓j
.text:0000000000001C05                 cmp     r14, r13
.text:0000000000001C08                 jnb     short loc_1B90
.text:0000000000001C0A                 lea     rbp, [rbx+r14]
.text:0000000000001C0E                 lea     r15, [r12+rbp]
.text:0000000000001C12                 movsx   edi, byte ptr [r15]
.text:0000000000001C16                 call    cs:isbase
.text:0000000000001C1C                 test    al, al
.text:0000000000001C1E                 mov     r13, [rsp+0B8h+n]
.text:0000000000001C23                 jnz     loc_1E70
.text:0000000000001C29                 cmp     byte ptr [r15], 3Dh ; '='
.text:0000000000001C2D                 jz      loc_1E70
.text:0000000000001C33                 sub     r13, 1
.text:0000000000001C37                 lea     rsi, [r12+rbp+1] ; src
.text:0000000000001C3C                 mov     rdi, r15        ; dest
.text:0000000000001C3F                 mov     rdx, r13
.text:0000000000001C42                 mov     [rsp+0B8h+n], r13
.text:0000000000001C47                 sub     rdx, r14        ; n
.text:0000000000001C4A                 call    _memmove
.text:0000000000001C4F                 test    r13, r13
.text:0000000000001C52                 jnz     short loc_1C05
.text:0000000000001C54                 jmp     loc_1B90
.text:0000000000001C59 ; ---------------------------------------------------------------------------
.text:0000000000001C59
.text:0000000000001C59 loc_1C59:                               ; CODE XREF: main+1A9↑j
.text:0000000000001C59                                         ; DATA XREF: .rodata:jpt_1A69↓o
.text:0000000000001C59                 lea     rax, base2_length ; jumptable 0000000000001A69 case 133
.text:0000000000001C60                 mov     cs:base_length, rax
.text:0000000000001C67                 lea     rax, isbase2
.text:0000000000001C6E                 mov     cs:isbase, rax
.text:0000000000001C75                 lea     rax, base2msbf_encode
.text:0000000000001C7C                 mov     cs:base_encode, rax
.text:0000000000001C83                 lea     rax, base2_decode_ctx_init
.text:0000000000001C8A                 mov     cs:base_decode_ctx_init, rax
.text:0000000000001C91                 lea     rax, base2msbf_decode_ctx
.text:0000000000001C98                 mov     cs:base_decode_ctx, rax
.text:0000000000001C9F                 jmp     loc_1AB1
.text:0000000000001CA4 ; ---------------------------------------------------------------------------
.text:0000000000001CA4
.text:0000000000001CA4 loc_1CA4:                               ; CODE XREF: main+1A9↑j
.text:0000000000001CA4                                         ; DATA XREF: .rodata:jpt_1A69↓o
.text:0000000000001CA4                 lea     rax, base64_length_wrapper ; jumptable 0000000000001A69 case 129
.text:0000000000001CAB                 mov     cs:base_length, rax
.text:0000000000001CB2                 lea     rax, isbase64url
.text:0000000000001CB9                 mov     cs:isbase, rax
.text:0000000000001CC0                 lea     rax, base64url_encode
.text:0000000000001CC7                 mov     cs:base_encode, rax
.text:0000000000001CCE                 lea     rax, base64url_decode_ctx_init_wrapper
.text:0000000000001CD5                 mov     cs:base_decode_ctx_init, rax
.text:0000000000001CDC                 lea     rax, base64url_decode_ctx_wrapper
.text:0000000000001CE3                 mov     cs:base_decode_ctx, rax
.text:0000000000001CEA                 jmp     loc_1AB1
.text:0000000000001CEF ; ---------------------------------------------------------------------------
.text:0000000000001CEF
.text:0000000000001CEF loc_1CEF:                               ; CODE XREF: main+1A9↑j
.text:0000000000001CEF                                         ; DATA XREF: .rodata:jpt_1A69↓o
.text:0000000000001CEF                 lea     rax, base64_length_wrapper ; jumptable 0000000000001A69 case 128
.text:0000000000001CF6                 mov     cs:base_length, rax
.text:0000000000001CFD                 lea     rax, isbase64
.text:0000000000001D04                 mov     cs:isbase, rax
.text:0000000000001D0B                 lea     rax, base64_encode
.text:0000000000001D12                 mov     cs:base_encode, rax
.text:0000000000001D19                 lea     rax, base64_decode_ctx_init_wrapper
.text:0000000000001D20                 mov     cs:base_decode_ctx_init, rax
.text:0000000000001D27                 lea     rax, base64_decode_ctx_wrapper
.text:0000000000001D2E                 mov     cs:base_decode_ctx, rax
.text:0000000000001D35                 jmp     loc_1AB1
.text:0000000000001D3A ; ---------------------------------------------------------------------------
.text:0000000000001D3A
.text:0000000000001D3A loc_1D3A:                               ; CODE XREF: main+1A9↑j
.text:0000000000001D3A                                         ; DATA XREF: .rodata:jpt_1A69↓o
.text:0000000000001D3A                 lea     rax, z85_length ; jumptable 0000000000001A69 case 135
.text:0000000000001D41                 mov     cs:base_length, rax
.text:0000000000001D48                 lea     rax, isz85
.text:0000000000001D4F                 mov     cs:isbase, rax
.text:0000000000001D56                 lea     rax, z85_encode
.text:0000000000001D5D                 mov     cs:base_encode, rax
.text:0000000000001D64                 lea     rax, z85_decode_ctx_init
.text:0000000000001D6B                 mov     cs:base_decode_ctx_init, rax
.text:0000000000001D72                 lea     rax, z85_decode_ctx
.text:0000000000001D79                 mov     cs:base_decode_ctx, rax
.text:0000000000001D80                 jmp     loc_1AB1
.text:0000000000001D85 ; ---------------------------------------------------------------------------
.text:0000000000001D85
.text:0000000000001D85 loc_1D85:                               ; CODE XREF: main+1A9↑j
.text:0000000000001D85                                         ; DATA XREF: .rodata:jpt_1A69↓o
.text:0000000000001D85                 lea     rax, base32_length_wrapper ; jumptable 0000000000001A69 case 131
.text:0000000000001D8C                 mov     cs:base_length, rax
.text:0000000000001D93                 lea     rax, isbase32hex
.text:0000000000001D9A                 mov     cs:isbase, rax
.text:0000000000001DA1                 lea     rax, base32hex_encode
.text:0000000000001DA8                 mov     cs:base_encode, rax
.text:0000000000001DAF                 lea     rax, base32hex_decode_ctx_init_wrapper
.text:0000000000001DB6                 mov     cs:base_decode_ctx_init, rax
.text:0000000000001DBD                 lea     rax, base32hex_decode_ctx_wrapper
.text:0000000000001DC4                 mov     cs:base_decode_ctx, rax
.text:0000000000001DCB                 jmp     loc_1AB1
.text:0000000000001DD0 ; ---------------------------------------------------------------------------
.text:0000000000001DD0
.text:0000000000001DD0 loc_1DD0:                               ; CODE XREF: main+1A9↑j
.text:0000000000001DD0                                         ; DATA XREF: .rodata:jpt_1A69↓o
.text:0000000000001DD0                 lea     rax, base32_length_wrapper ; jumptable 0000000000001A69 case 130
.text:0000000000001DD7                 mov     cs:base_length, rax
.text:0000000000001DDE                 lea     rax, isbase32
.text:0000000000001DE5                 mov     cs:isbase, rax
.text:0000000000001DEC                 lea     rax, base32_encode
.text:0000000000001DF3                 mov     cs:base_encode, rax
.text:0000000000001DFA                 lea     rax, base32_decode_ctx_init_wrapper
.text:0000000000001E01                 mov     cs:base_decode_ctx_init, rax
.text:0000000000001E08                 lea     rax, base32_decode_ctx_wrapper
.text:0000000000001E0F                 mov     cs:base_decode_ctx, rax
.text:0000000000001E16                 jmp     loc_1AB1
.text:0000000000001E1B ; ---------------------------------------------------------------------------
.text:0000000000001E1B
.text:0000000000001E1B loc_1E1B:                               ; CODE XREF: main+1A9↑j
.text:0000000000001E1B                                         ; DATA XREF: .rodata:jpt_1A69↓o
.text:0000000000001E1B                 lea     rax, base16_length ; jumptable 0000000000001A69 case 132
.text:0000000000001E22                 mov     cs:base_length, rax
.text:0000000000001E29                 lea     rax, isbase16
.text:0000000000001E30                 mov     cs:isbase, rax
.text:0000000000001E37                 lea     rax, base16_encode
.text:0000000000001E3E                 mov     cs:base_encode, rax
.text:0000000000001E45                 lea     rax, base16_decode_ctx_init
.text:0000000000001E4C                 mov     cs:base_decode_ctx_init, rax
.text:0000000000001E53                 lea     rax, base16_decode_ctx
.text:0000000000001E5A                 mov     cs:base_decode_ctx, rax
.text:0000000000001E61                 jmp     loc_1AB1
.text:0000000000001E61 ; ---------------------------------------------------------------------------
.text:0000000000001E66                 align 10h
.text:0000000000001E70
.text:0000000000001E70 loc_1E70:                               ; CODE XREF: main+363↑j
.text:0000000000001E70                                         ; main+36D↑j
.text:0000000000001E70                 add     r14, 1
.text:0000000000001E74                 jmp     loc_1C00
.text:0000000000001E74 ; ---------------------------------------------------------------------------
.text:0000000000001E79                 align 20h
.text:0000000000001E80
.text:0000000000001E80 loc_1E80:                               ; CODE XREF: main+2F1↑j
.text:0000000000001E80                 mov     rbp, [rsp+0B8h+stream]
.text:0000000000001E85                 mov     eax, [rbp+0]
.text:0000000000001E88
.text:0000000000001E88 loc_1E88:                               ; CODE XREF: main+675↓j
.text:0000000000001E88                 xor     r15d, r15d
.text:0000000000001E8B                 mov     [rsp+0B8h+stream], rbx
.text:0000000000001E90                 mov     r13, [rsp+0B8h+ptr]
.text:0000000000001E95                 mov     ebx, r15d
.text:0000000000001E98                 mov     r15, [rsp+0B8h+var_90]
.text:0000000000001E9D                 jmp     short loc_1F01
.text:0000000000001E9D ; ---------------------------------------------------------------------------
.text:0000000000001E9F                 align 20h
.text:0000000000001EA0
.text:0000000000001EA0 loc_1EA0:                               ; CODE XREF: main+643↓j
.text:0000000000001EA0                 test    ebx, ebx
.text:0000000000001EA2                 jnz     loc_1B80
.text:0000000000001EA8
.text:0000000000001EA8 loc_1EA8:                               ; CODE XREF: main+64A↓j
.text:0000000000001EA8                 mov     rax, cs:base_decode_ctx
.text:0000000000001EAF                 mov     rdx, [rsp+0B8h+stream]
.text:0000000000001EB4                 mov     [rsp+0B8h+n], 1400h
.text:0000000000001EBD
.text:0000000000001EBD loc_1EBD:                               ; CODE XREF: main+666↓j
.text:0000000000001EBD                 mov     r8, [rsp+0B8h+var_A0]
.text:0000000000001EC2                 mov     rcx, r13
.text:0000000000001EC5                 mov     rsi, r12
.text:0000000000001EC8                 mov     rdi, [rsp+0B8h+var_A8]
.text:0000000000001ECD                 call    rax ; base_decode_ctx
.text:0000000000001ECF                 mov     rdx, [rsp+0B8h+n] ; n
.text:0000000000001ED4                 mov     rcx, r15        ; stream
.text:0000000000001ED7                 mov     esi, 1          ; size
.text:0000000000001EDC                 mov     rdi, r13        ; ptr
.text:0000000000001EDF                 mov     r14d, eax
.text:0000000000001EE2                 call    _fwrite_unlocked
.text:0000000000001EE7                 cmp     rax, [rsp+0B8h+n]
.text:0000000000001EEC                 jb      loc_2285
.text:0000000000001EF2                 test    r14b, r14b
.text:0000000000001EF5                 jz      loc_2261
.text:0000000000001EFB                 mov     eax, [rbp+0]
.text:0000000000001EFE                 add     ebx, 1
.text:0000000000001F01
.text:0000000000001F01 loc_1F01:                               ; CODE XREF: main+5DD↑j
.text:0000000000001F01                 test    al, 10h
.text:0000000000001F03                 jz      short loc_1EA0
.text:0000000000001F05                 cmp     ebx, 1
.text:0000000000001F08                 ja      short loc_1F3A
.text:0000000000001F0A                 jnz     short loc_1EA8
.text:0000000000001F0C                 mov     eax, [rsp+0B8h+var_68]
.text:0000000000001F10                 test    eax, eax
.text:0000000000001F12                 jz      short loc_1F3A
.text:0000000000001F14                 mov     [rsp+0B8h+n], 1400h
.text:0000000000001F1D                 mov     rax, cs:base_decode_ctx
.text:0000000000001F24                 xor     edx, edx
.text:0000000000001F26                 jmp     short loc_1EBD
.text:0000000000001F26 ; ---------------------------------------------------------------------------
.text:0000000000001F28                 align 10h
.text:0000000000001F30
.text:0000000000001F30 loc_1F30:                               ; CODE XREF: main+300↑j
.text:0000000000001F30                 mov     rbp, [rsp+0B8h+stream]
.text:0000000000001F35                 jmp     loc_1E88
.text:0000000000001F3A ; ---------------------------------------------------------------------------
.text:0000000000001F3A
.text:0000000000001F3A loc_1F3A:                               ; CODE XREF: main+648↑j
.text:0000000000001F3A                                         ; main+652↑j ...
.text:0000000000001F3A                 mov     rdi, rbp        ; stream
.text:0000000000001F3D                 call    rpl_fclose
.text:0000000000001F42                 add     eax, 1
.text:0000000000001F45                 jz      loc_21D1
.text:0000000000001F4B                 xor     eax, eax
.text:0000000000001F4D                 mov     rcx, [rsp+0B8h+var_40]
.text:0000000000001F52                 xor     rcx, fs:28h
.text:0000000000001F5B                 jnz     loc_23A2
.text:0000000000001F61                 add     rsp, 88h
.text:0000000000001F68                 pop     rbx
.text:0000000000001F69                 pop     rbp
.text:0000000000001F6A                 pop     r12
.text:0000000000001F6C                 pop     r13
.text:0000000000001F6E                 pop     r14
.text:0000000000001F70                 pop     r15
.text:0000000000001F72                 retn
.text:0000000000001F73 ; ---------------------------------------------------------------------------
.text:0000000000001F73
.text:0000000000001F73 loc_1F73:                               ; CODE XREF: main+207↑j
.text:0000000000001F73                 lea     rax, aLt+2      ; "-"
.text:0000000000001F7A                 mov     [rsp+0B8h+filename], rax
.text:0000000000001F7F
.text:0000000000001F7F loc_1F7F:                               ; CODE XREF: main+227↑j
.text:0000000000001F7F                 mov     rbp, cs:stdin@@GLIBC_2_2_5
.text:0000000000001F86                 jmp     loc_1B0A
.text:0000000000001F8B ; ---------------------------------------------------------------------------
.text:0000000000001F8B
.text:0000000000001F8B loc_1F8B:                               ; CODE XREF: main+25A↑j
.text:0000000000001F8B                 mov     edi, 7800h
.text:0000000000001F90                 mov     r12, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F97                 xor     ebx, ebx
.text:0000000000001F99                 call    xmalloc
.text:0000000000001F9E                 mov     edi, 7800h
.text:0000000000001FA3                 mov     [rsp+0B8h+var_A8], rax
.text:0000000000001FA8                 call    cs:base_length
.text:0000000000001FAE                 movsxd  rdi, eax
.text:0000000000001FB1                 call    xmalloc
.text:0000000000001FB6                 mov     [rsp+0B8h+var_A0], r13
.text:0000000000001FBB                 mov     [rsp+0B8h+stream], rax
.text:0000000000001FC0
.text:0000000000001FC0 loc_1FC0:                               ; CODE XREF: main+7FA↓j
.text:0000000000001FC0                 xor     r15d, r15d
.text:0000000000001FC3                 mov     r13, [rsp+0B8h+var_A8]
.text:0000000000001FC8                 jmp     short loc_1FD9
.text:0000000000001FC8 ; ---------------------------------------------------------------------------
.text:0000000000001FCA                 align 10h
.text:0000000000001FD0
.text:0000000000001FD0 loc_1FD0:                               ; CODE XREF: main+73B↓j
.text:0000000000001FD0                 cmp     r15, 77FFh
.text:0000000000001FD7                 ja      short loc_2006
.text:0000000000001FD9
.text:0000000000001FD9 loc_1FD9:                               ; CODE XREF: main+708↑j
.text:0000000000001FD9                 lea     rdi, [r13+r15+0] ; ptr
.text:0000000000001FDE                 mov     edx, 7800h
.text:0000000000001FE3                 mov     rcx, rbp        ; stream
.text:0000000000001FE6                 sub     rdx, r15        ; n
.text:0000000000001FE9                 mov     esi, 1          ; size
.text:0000000000001FEE                 call    _fread_unlocked
.text:0000000000001FF3                 add     r15, rax
.text:0000000000001FF6                 mov     eax, [rbp+0]
.text:0000000000001FF9                 test    al, 30h
.text:0000000000001FFB                 jz      short loc_1FD0
.text:0000000000001FFD                 test    r15, r15
.text:0000000000002000                 jz      loc_20C0
.text:0000000000002006
.text:0000000000002006 loc_2006:                               ; CODE XREF: main+717↑j
.text:0000000000002006                 mov     r13, cs:base_encode
.text:000000000000200D                 mov     edi, r15d
.text:0000000000002010                 call    cs:base_length
.text:0000000000002016                 mov     rdx, [rsp+0B8h+stream]
.text:000000000000201B                 movsxd  rcx, eax
.text:000000000000201E                 mov     rsi, r15
.text:0000000000002021                 mov     rdi, [rsp+0B8h+var_A8]
.text:0000000000002026                 call    r13 ; base_encode
.text:0000000000002029                 mov     edi, r15d
.text:000000000000202C                 call    cs:base_length
.text:0000000000002032                 cmp     [rsp+0B8h+var_A0], 0
.text:0000000000002038                 movsxd  r13, eax
.text:000000000000203B                 jz      loc_2141
.text:0000000000002041                 xor     r14d, r14d
.text:0000000000002044                 test    r13, r13
.text:0000000000002047                 jz      short loc_20AC
.text:0000000000002049                 mov     [rsp+0B8h+var_98], rbp
.text:000000000000204E                 mov     rbp, rbx
.text:0000000000002051                 mov     rbx, [rsp+0B8h+var_A0]
.text:0000000000002056                 mov     [rsp+0B8h+var_90], r15
.text:000000000000205B                 mov     r15, r13
.text:000000000000205E                 xchg    ax, ax
.text:0000000000002060
.text:0000000000002060 loc_2060:                               ; CODE XREF: main+7DD↓j
.text:0000000000002060                 mov     r13, rbx
.text:0000000000002063                 mov     rax, r15
.text:0000000000002066                 sub     r13, rbp
.text:0000000000002069                 sub     rax, r14
.text:000000000000206C                 cmp     r13, rax
.text:000000000000206F                 cmova   r13, rax
.text:0000000000002073                 test    r13, r13
.text:0000000000002076                 jnz     loc_2110
.text:000000000000207C                 mov     rax, [r12+28h]
.text:0000000000002081                 cmp     rax, [r12+30h]
.text:0000000000002086                 jnb     loc_218F
.text:000000000000208C                 lea     rdx, [rax+1]
.text:0000000000002090                 mov     [r12+28h], rdx
.text:0000000000002095                 mov     byte ptr [rax], 0Ah
.text:0000000000002098
.text:0000000000002098 loc_2098:                               ; CODE XREF: main+8DF↓j
.text:0000000000002098                 xor     ebp, ebp
.text:000000000000209A
.text:000000000000209A loc_209A:                               ; CODE XREF: main+87C↓j
.text:000000000000209A                 cmp     r15, r14
.text:000000000000209D                 ja      short loc_2060
.text:000000000000209F                 mov     rbx, rbp
.text:00000000000020A2                 mov     r15, [rsp+0B8h+var_90]
.text:00000000000020A7                 mov     rbp, [rsp+0B8h+var_98]
.text:00000000000020AC
.text:00000000000020AC loc_20AC:                               ; CODE XREF: main+787↑j
.text:00000000000020AC                                         ; main+89D↓j
.text:00000000000020AC                 mov     eax, [rbp+0]
.text:00000000000020AF                 test    al, 30h
.text:00000000000020B1                 jnz     short loc_20C0
.text:00000000000020B3                 cmp     r15, 7800h
.text:00000000000020BA                 jz      loc_1FC0
.text:00000000000020C0
.text:00000000000020C0 loc_20C0:                               ; CODE XREF: main+740↑j
.text:00000000000020C0                                         ; main+7F1↑j
.text:00000000000020C0                 mov     r13, [rsp+0B8h+var_A0]
.text:00000000000020C5                 test    r13, r13
.text:00000000000020C8                 jz      short loc_20D3
.text:00000000000020CA                 test    rbx, rbx
.text:00000000000020CD                 jnz     loc_2214
.text:00000000000020D3
.text:00000000000020D3 loc_20D3:                               ; CODE XREF: main+808↑j
.text:00000000000020D3                                         ; main+973↓j
.text:00000000000020D3                 test    al, 20h
.text:00000000000020D5                 jz      loc_1F3A
.text:00000000000020DB                 lea     rsi, aReadError ; "read error"
.text:00000000000020E2                 mov     edx, 5          ; category
.text:00000000000020E7                 xor     edi, edi        ; domainname
.text:00000000000020E9                 call    _dcgettext
.text:00000000000020EE                 mov     rbx, rax
.text:00000000000020F1                 call    ___errno_location
.text:00000000000020F6                 mov     esi, [rax]      ; errnum
.text:00000000000020F8                 mov     rdx, rbx        ; format
.text:00000000000020FB                 mov     edi, 1          ; status
.text:0000000000002100                 xor     eax, eax
.text:0000000000002102                 call    _error
.text:0000000000002107                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002110
.text:0000000000002110 loc_2110:                               ; CODE XREF: main+7B6↑j
.text:0000000000002110                 mov     rax, [rsp+0B8h+stream]
.text:0000000000002115                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000211C                 mov     rdx, r13        ; n
.text:000000000000211F                 mov     esi, 1          ; size
.text:0000000000002124                 lea     rdi, [rax+r14]  ; ptr
.text:0000000000002128                 call    _fwrite_unlocked
.text:000000000000212D                 cmp     r13, rax
.text:0000000000002130                 ja      loc_230A
.text:0000000000002136                 add     rbp, r13
.text:0000000000002139                 add     r14, r13
.text:000000000000213C                 jmp     loc_209A
.text:0000000000002141 ; ---------------------------------------------------------------------------
.text:0000000000002141
.text:0000000000002141 loc_2141:                               ; CODE XREF: main+77B↑j
.text:0000000000002141                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002148                 mov     rdi, [rsp+0B8h+stream] ; ptr
.text:000000000000214D                 mov     rdx, r13        ; n
.text:0000000000002150                 mov     esi, 1          ; size
.text:0000000000002155                 call    _fwrite_unlocked
.text:000000000000215A                 cmp     r13, rax
.text:000000000000215D                 jbe     loc_20AC
.text:0000000000002163                 lea     rsi, aWriteError ; "write error"
.text:000000000000216A                 mov     edx, 5          ; category
.text:000000000000216F                 xor     edi, edi        ; domainname
.text:0000000000002171                 call    _dcgettext
.text:0000000000002176                 mov     rbx, rax
.text:0000000000002179                 call    ___errno_location
.text:000000000000217E                 mov     esi, [rax]      ; errnum
.text:0000000000002180                 mov     rdx, rbx        ; format
.text:0000000000002183                 mov     edi, 1          ; status
.text:0000000000002188                 xor     eax, eax
.text:000000000000218A                 call    _error
.text:000000000000218F
.text:000000000000218F loc_218F:                               ; CODE XREF: main+7C6↑j
.text:000000000000218F                 mov     esi, 0Ah        ; int
.text:0000000000002194                 mov     rdi, r12        ; _IO_FILE *
.text:0000000000002197                 call    ___overflow
.text:000000000000219C                 add     eax, 1
.text:000000000000219F                 jnz     loc_2098
.text:00000000000021A5                 lea     rsi, aWriteError ; "write error"
.text:00000000000021AC                 mov     edx, 5          ; category
.text:00000000000021B1                 xor     edi, edi        ; domainname
.text:00000000000021B3                 call    _dcgettext
.text:00000000000021B8                 mov     rbx, rax
.text:00000000000021BB                 call    ___errno_location
.text:00000000000021C0                 mov     esi, [rax]      ; errnum
.text:00000000000021C2                 mov     rdx, rbx        ; format
.text:00000000000021C5                 mov     edi, 1          ; status
.text:00000000000021CA                 xor     eax, eax
.text:00000000000021CC                 call    _error
.text:00000000000021D1
.text:00000000000021D1 loc_21D1:                               ; CODE XREF: main+685↑j
.text:00000000000021D1                 mov     rdi, [rsp+0B8h+filename] ; s1
.text:00000000000021D6                 lea     rsi, aLt+2      ; s2
.text:00000000000021DD                 call    _strcmp
.text:00000000000021E2                 mov     ebp, eax
.text:00000000000021E4                 call    ___errno_location
.text:00000000000021E9                 test    ebp, ebp
.text:00000000000021EB                 mov     rbx, rax
.text:00000000000021EE                 jnz     short loc_2238
.text:00000000000021F0                 lea     rsi, aClosingStandar ; "closing standard input"
.text:00000000000021F7                 mov     edx, 5          ; category
.text:00000000000021FC                 xor     edi, edi        ; domainname
.text:00000000000021FE                 call    _dcgettext
.text:0000000000002203                 mov     esi, [rbx]      ; errnum
.text:0000000000002205                 mov     rdx, rax        ; format
.text:0000000000002208                 mov     edi, 1          ; status
.text:000000000000220D                 xor     eax, eax
.text:000000000000220F                 call    _error
.text:0000000000002214
.text:0000000000002214 loc_2214:                               ; CODE XREF: main+80D↑j
.text:0000000000002214                 mov     rax, [r12+28h]
.text:0000000000002219                 cmp     rax, [r12+30h]
.text:000000000000221E                 jnb     loc_23A7
.text:0000000000002224                 lea     rdx, [rax+1]
.text:0000000000002228                 mov     [r12+28h], rdx
.text:000000000000222D                 mov     byte ptr [rax], 0Ah
.text:0000000000002230
.text:0000000000002230 loc_2230:                               ; CODE XREF: main+AF7↓j
.text:0000000000002230                 mov     eax, [rbp+0]
.text:0000000000002233                 jmp     loc_20D3
.text:0000000000002238 ; ---------------------------------------------------------------------------
.text:0000000000002238
.text:0000000000002238 loc_2238:                               ; CODE XREF: main+92E↑j
.text:0000000000002238                 mov     rdx, [rsp+0B8h+filename]
.text:000000000000223D                 mov     esi, 3
.text:0000000000002242                 xor     edi, edi
.text:0000000000002244                 call    quotearg_n_style_colon
.text:0000000000002249                 mov     esi, [rbx]      ; errnum
.text:000000000000224B                 lea     rdx, format     ; format
.text:0000000000002252                 mov     rcx, rax
.text:0000000000002255                 mov     edi, 1          ; status
.text:000000000000225A                 xor     eax, eax
.text:000000000000225C                 call    _error
.text:0000000000002261
.text:0000000000002261 loc_2261:                               ; CODE XREF: main+635↑j
.text:0000000000002261                 lea     rsi, aInvalidInput ; "invalid input"
.text:0000000000002268                 mov     edx, 5          ; category
.text:000000000000226D                 xor     edi, edi        ; domainname
.text:000000000000226F                 call    _dcgettext
.text:0000000000002274                 xor     esi, esi        ; errnum
.text:0000000000002276                 mov     rdx, rax        ; format
.text:0000000000002279                 mov     edi, 1          ; status
.text:000000000000227E                 xor     eax, eax
.text:0000000000002280                 call    _error
.text:0000000000002285
.text:0000000000002285 loc_2285:                               ; CODE XREF: main+62C↑j
.text:0000000000002285                 lea     rsi, aWriteError ; "write error"
.text:000000000000228C                 mov     edx, 5          ; category
.text:0000000000002291                 xor     edi, edi        ; domainname
.text:0000000000002293                 call    _dcgettext
.text:0000000000002298                 mov     rbx, rax
.text:000000000000229B                 call    ___errno_location
.text:00000000000022A0                 mov     esi, [rax]      ; errnum
.text:00000000000022A2                 mov     rdx, rbx        ; format
.text:00000000000022A5                 mov     edi, 1          ; status
.text:00000000000022AA                 xor     eax, eax
.text:00000000000022AC                 call    _error
.text:00000000000022B1
.text:00000000000022B1 loc_22B1:                               ; CODE XREF: main+2DB↑j
.text:00000000000022B1                 lea     rsi, aReadError ; "read error"
.text:00000000000022B8                 mov     edx, 5          ; category
.text:00000000000022BD                 xor     edi, edi        ; domainname
.text:00000000000022BF                 call    _dcgettext
.text:00000000000022C4                 mov     rbx, rax
.text:00000000000022C7                 call    ___errno_location
.text:00000000000022CC                 mov     esi, [rax]      ; errnum
.text:00000000000022CE                 mov     rdx, rbx        ; format
.text:00000000000022D1                 mov     edi, 1          ; status
.text:00000000000022D6                 xor     eax, eax
.text:00000000000022D8                 call    _error
.text:00000000000022DD
.text:00000000000022DD loc_22DD:                               ; CODE XREF: main+AF↑j
.text:00000000000022DD                 xor     edi, edi        ; status
.text:00000000000022DF                 call    usage
.text:00000000000022E4 ; ---------------------------------------------------------------------------
.text:00000000000022E4
.text:00000000000022E4 def_1A69:                               ; CODE XREF: main+195↑j
.text:00000000000022E4                 lea     rsi, aMissingEncodin ; jumptable 0000000000001A69 default case
.text:00000000000022EB                 xor     edi, edi        ; domainname
.text:00000000000022ED                 mov     edx, 5          ; category
.text:00000000000022F2                 call    _dcgettext
.text:00000000000022F7                 xor     esi, esi        ; errnum
.text:00000000000022F9                 mov     rdx, rax        ; format
.text:00000000000022FC                 xor     edi, edi        ; status
.text:00000000000022FE                 xor     eax, eax
.text:0000000000002300                 call    _error
.text:0000000000002305                 jmp     loc_1981
.text:000000000000230A ; ---------------------------------------------------------------------------
.text:000000000000230A
.text:000000000000230A loc_230A:                               ; CODE XREF: main+870↑j
.text:000000000000230A                 lea     rsi, aWriteError ; "write error"
.text:0000000000002311                 mov     edx, 5          ; category
.text:0000000000002316                 xor     edi, edi        ; domainname
.text:0000000000002318                 call    _dcgettext
.text:000000000000231D                 mov     rbx, rax
.text:0000000000002320                 call    ___errno_location
.text:0000000000002325                 mov     esi, [rax]      ; errnum
.text:0000000000002327                 mov     rdx, rbx        ; format
.text:000000000000232A                 mov     edi, 1          ; status
.text:000000000000232F                 xor     eax, eax
.text:0000000000002331                 call    _error
.text:0000000000002336
.text:0000000000002336 loc_2336:                               ; CODE XREF: main+244↑j
.text:0000000000002336                 mov     rdx, [rsp+0B8h+filename]
.text:000000000000233B                 mov     esi, 3
.text:0000000000002340                 xor     edi, edi
.text:0000000000002342                 call    quotearg_n_style_colon
.text:0000000000002347                 mov     rbx, rax
.text:000000000000234A                 call    ___errno_location
.text:000000000000234F                 mov     esi, [rax]      ; errnum
.text:0000000000002351                 lea     rdx, format     ; format
.text:0000000000002358                 mov     rcx, rbx
.text:000000000000235B                 mov     edi, 1          ; status
.text:0000000000002360                 xor     eax, eax
.text:0000000000002362                 call    _error
.text:0000000000002367
.text:0000000000002367 loc_2367:                               ; CODE XREF: main+1FF↑j
.text:0000000000002367                 mov     rdi, [rbx+rax*8+8]
.text:000000000000236C                 call    quote
.text:0000000000002371                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000002378                 mov     rbx, rax
.text:000000000000237B                 mov     edx, 5          ; category
.text:0000000000002380                 xor     edi, edi        ; domainname
.text:0000000000002382                 call    _dcgettext
.text:0000000000002387                 xor     edi, edi        ; status
.text:0000000000002389                 mov     rdx, rax        ; format
.text:000000000000238C                 mov     rcx, rbx
.text:000000000000238F                 xor     esi, esi        ; errnum
.text:0000000000002391                 xor     eax, eax
.text:0000000000002393                 call    _error
.text:0000000000002398                 mov     edi, 1          ; status
.text:000000000000239D                 call    usage
.text:00000000000023A2 ; ---------------------------------------------------------------------------
.text:00000000000023A2
.text:00000000000023A2 loc_23A2:                               ; CODE XREF: main+69B↑j
.text:00000000000023A2                 call    ___stack_chk_fail
.text:00000000000023A7 ; ---------------------------------------------------------------------------
.text:00000000000023A7
.text:00000000000023A7 loc_23A7:                               ; CODE XREF: main+95E↑j
.text:00000000000023A7                 mov     esi, 0Ah        ; int
.text:00000000000023AC                 mov     rdi, r12        ; _IO_FILE *
.text:00000000000023AF                 call    ___overflow
.text:00000000000023B4                 add     eax, 1
.text:00000000000023B7                 jnz     loc_2230
.text:00000000000023BD                 lea     rsi, aWriteError ; "write error"
.text:00000000000023C4                 mov     edx, 5          ; category
.text:00000000000023C9                 xor     edi, edi        ; domainname
.text:00000000000023CB                 call    _dcgettext
.text:00000000000023D0                 mov     rbx, rax
.text:00000000000023D3                 call    ___errno_location
.text:00000000000023D8                 mov     esi, [rax]      ; errnum
.text:00000000000023DA                 mov     rdx, rbx        ; format
.text:00000000000023DD                 mov     edi, 1          ; status
.text:00000000000023E2                 xor     eax, eax
.text:00000000000023E4                 call    _error
.text:00000000000023E4 ; } // starts at 18C0
.text:00000000000023E9                 nop     dword ptr [rax+00000000h]
.text:00000000000023E9 main            endp ; sp-analysis failed
.text:00000000000023E9
.text:00000000000023F0
.text:00000000000023F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023F0
.text:00000000000023F0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000023F0
.text:00000000000023F0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000023F0                 public start
.text:00000000000023F0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000023F0 ; __unwind {
.text:00000000000023F0                 xor     ebp, ebp
.text:00000000000023F2                 mov     r9, rdx         ; rtld_fini
.text:00000000000023F5                 pop     rsi             ; argc
.text:00000000000023F6                 mov     rdx, rsp        ; ubp_av
.text:00000000000023F9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000023FD                 push    rax
.text:00000000000023FE                 push    rsp             ; stack_end
.text:00000000000023FF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002406                 lea     rcx, __libc_csu_init ; init
.text:000000000000240D                 lea     rdi, main       ; main
.text:0000000000002414                 call    cs:__libc_start_main_ptr
.text:000000000000241A                 hlt
.text:000000000000241A ; } // starts at 23F0
.text:000000000000241A start           endp
.text:000000000000241A
.text:000000000000241A ; ---------------------------------------------------------------------------
.text:000000000000241B                 align 20h
.text:0000000000002420
.text:0000000000002420 ; =============== S U B R O U T I N E =======================================
.text:0000000000002420
.text:0000000000002420 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002420
.text:0000000000002420 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_24D3↓p
.text:0000000000002420                 lea     rdi, __bss_start
.text:0000000000002427                 push    rbp
.text:0000000000002428                 lea     rax, __bss_start
.text:000000000000242F                 cmp     rax, rdi
.text:0000000000002432                 mov     rbp, rsp
.text:0000000000002435                 jz      short loc_2450
.text:0000000000002437                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000243E                 test    rax, rax
.text:0000000000002441                 jz      short loc_2450
.text:0000000000002443                 pop     rbp
.text:0000000000002444                 jmp     rax
.text:0000000000002444 ; ---------------------------------------------------------------------------
.text:0000000000002446                 align 10h
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002450                                         ; deregister_tm_clones+21↑j
.text:0000000000002450                 pop     rbp
.text:0000000000002451                 retn
.text:0000000000002451 deregister_tm_clones endp
.text:0000000000002451
.text:0000000000002451 ; ---------------------------------------------------------------------------
.text:0000000000002452                 align 20h
.text:0000000000002460
.text:0000000000002460 ; =============== S U B R O U T I N E =======================================
.text:0000000000002460
.text:0000000000002460 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002460
.text:0000000000002460 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002460                 lea     rdi, __bss_start
.text:0000000000002467                 lea     rsi, __bss_start
.text:000000000000246E                 push    rbp
.text:000000000000246F                 sub     rsi, rdi
.text:0000000000002472                 mov     rbp, rsp
.text:0000000000002475                 sar     rsi, 3
.text:0000000000002479                 mov     rax, rsi
.text:000000000000247C                 shr     rax, 3Fh
.text:0000000000002480                 add     rsi, rax
.text:0000000000002483                 sar     rsi, 1
.text:0000000000002486                 jz      short loc_24A0
.text:0000000000002488                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000248F                 test    rax, rax
.text:0000000000002492                 jz      short loc_24A0
.text:0000000000002494                 pop     rbp
.text:0000000000002495                 jmp     rax
.text:0000000000002495 ; ---------------------------------------------------------------------------
.text:0000000000002497                 align 20h
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000024A0                                         ; register_tm_clones+32↑j
.text:00000000000024A0                 pop     rbp
.text:00000000000024A1                 retn
.text:00000000000024A1 register_tm_clones endp
.text:00000000000024A1
.text:00000000000024A1 ; ---------------------------------------------------------------------------
.text:00000000000024A2                 align 10h
.text:00000000000024B0
.text:00000000000024B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024B0
.text:00000000000024B0 ; Attributes: info_from_lumina
.text:00000000000024B0
.text:00000000000024B0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000024B0                 cmp     cs:completed_7697, 0
.text:00000000000024B7                 jnz     short locret_24E8
.text:00000000000024B9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000024C1                 push    rbp
.text:00000000000024C2                 mov     rbp, rsp
.text:00000000000024C5                 jz      short loc_24D3
.text:00000000000024C7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000024CE                 call    __cxa_finalize
.text:00000000000024D3
.text:00000000000024D3 loc_24D3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000024D3                 call    deregister_tm_clones
.text:00000000000024D8                 mov     cs:completed_7697, 1
.text:00000000000024DF                 pop     rbp
.text:00000000000024E0                 retn
.text:00000000000024E0 ; ---------------------------------------------------------------------------
.text:00000000000024E1                 align 8
.text:00000000000024E8
.text:00000000000024E8 locret_24E8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000024E8                 rep retn
.text:00000000000024E8 __do_global_dtors_aux endp
.text:00000000000024E8
.text:00000000000024E8 ; ---------------------------------------------------------------------------
.text:00000000000024EA                 align 10h
.text:00000000000024F0
.text:00000000000024F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024F0
.text:00000000000024F0 ; Attributes: bp-based frame
.text:00000000000024F0
.text:00000000000024F0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000024F0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000024F0                 push    rbp
.text:00000000000024F1                 mov     rbp, rsp
.text:00000000000024F4                 pop     rbp
.text:00000000000024F5                 jmp     register_tm_clones
.text:00000000000024F5 frame_dummy     endp
.text:00000000000024F5
.text:00000000000024F5 ; ---------------------------------------------------------------------------
.text:00000000000024FA                 align 20h
.text:0000000000002500
.text:0000000000002500 ; =============== S U B R O U T I N E =======================================
.text:0000000000002500
.text:0000000000002500
.text:0000000000002500 base64_length_wrapper proc near         ; DATA XREF: main:loc_1CA4↑o
.text:0000000000002500                                         ; main:loc_1CEF↑o
.text:0000000000002500 ; __unwind {
.text:0000000000002500                 add     edi, 2
.text:0000000000002503                 mov     edx, 55555556h
.text:0000000000002508                 mov     eax, edi
.text:000000000000250A                 sar     edi, 1Fh
.text:000000000000250D                 imul    edx
.text:000000000000250F                 sub     edx, edi
.text:0000000000002511                 lea     eax, ds:0[rdx*4]
.text:0000000000002518                 retn
.text:0000000000002518 ; } // starts at 2500
.text:0000000000002518 base64_length_wrapper endp
.text:0000000000002518
.text:0000000000002518 ; ---------------------------------------------------------------------------
.text:0000000000002519                 align 20h
.text:0000000000002520
.text:0000000000002520 ; =============== S U B R O U T I N E =======================================
.text:0000000000002520
.text:0000000000002520
.text:0000000000002520 base32_length_wrapper proc near         ; DATA XREF: main:loc_1D85↑o
.text:0000000000002520                                         ; main:loc_1DD0↑o
.text:0000000000002520 ; __unwind {
.text:0000000000002520                 add     edi, 4
.text:0000000000002523                 mov     edx, 66666667h
.text:0000000000002528                 mov     eax, edi
.text:000000000000252A                 sar     edi, 1Fh
.text:000000000000252D                 imul    edx
.text:000000000000252F                 sar     edx, 1
.text:0000000000002531                 sub     edx, edi
.text:0000000000002533                 lea     eax, ds:0[rdx*8]
.text:000000000000253A                 retn
.text:000000000000253A ; } // starts at 2520
.text:000000000000253A base32_length_wrapper endp
.text:000000000000253A
.text:000000000000253A ; ---------------------------------------------------------------------------
.text:000000000000253B                 align 20h
.text:0000000000002540
.text:0000000000002540 ; =============== S U B R O U T I N E =======================================
.text:0000000000002540
.text:0000000000002540
.text:0000000000002540 isbase32hex     proc near               ; DATA XREF: main+4D3↑o
.text:0000000000002540 ; __unwind {
.text:0000000000002540                 lea     eax, [rdi-30h]
.text:0000000000002543                 cmp     al, 9
.text:0000000000002545                 setbe   al
.text:0000000000002548                 sub     edi, 41h ; 'A'
.text:000000000000254B                 cmp     dil, 15h
.text:000000000000254F                 setbe   dl
.text:0000000000002552                 or      eax, edx
.text:0000000000002554                 retn
.text:0000000000002554 ; } // starts at 2540
.text:0000000000002554 isbase32hex     endp
.text:0000000000002554
.text:0000000000002554 ; ---------------------------------------------------------------------------
.text:0000000000002555                 align 20h
.text:0000000000002560
.text:0000000000002560 ; =============== S U B R O U T I N E =======================================
.text:0000000000002560
.text:0000000000002560
.text:0000000000002560 isbase16        proc near               ; DATA XREF: main+569↑o
.text:0000000000002560 ; __unwind {
.text:0000000000002560                 lea     eax, [rdi-30h]
.text:0000000000002563                 cmp     al, 9
.text:0000000000002565                 setbe   al
.text:0000000000002568                 sub     edi, 41h ; 'A'
.text:000000000000256B                 cmp     dil, 5
.text:000000000000256F                 setbe   dl
.text:0000000000002572                 or      eax, edx
.text:0000000000002574                 retn
.text:0000000000002574 ; } // starts at 2560
.text:0000000000002574 isbase16        endp
.text:0000000000002574
.text:0000000000002574 ; ---------------------------------------------------------------------------
.text:0000000000002575                 align 20h
.text:0000000000002580
.text:0000000000002580 ; =============== S U B R O U T I N E =======================================
.text:0000000000002580
.text:0000000000002580
.text:0000000000002580 base16_length   proc near               ; DATA XREF: main:loc_1E1B↑o
.text:0000000000002580 ; __unwind {
.text:0000000000002580                 lea     eax, [rdi+rdi]
.text:0000000000002583                 retn
.text:0000000000002583 ; } // starts at 2580
.text:0000000000002583 base16_length   endp
.text:0000000000002583
.text:0000000000002583 ; ---------------------------------------------------------------------------
.text:0000000000002584                 align 10h
.text:0000000000002590
.text:0000000000002590 ; =============== S U B R O U T I N E =======================================
.text:0000000000002590
.text:0000000000002590
.text:0000000000002590 base16_encode   proc near               ; DATA XREF: main+577↑o
.text:0000000000002590 ; __unwind {
.text:0000000000002590                 test    rsi, rsi
.text:0000000000002593                 jz      short locret_25CB
.text:0000000000002595                 lea     r8, base16      ; "0123456789ABCDEF"
.text:000000000000259C                 add     rsi, rdi
.text:000000000000259F                 nop
.text:00000000000025A0
.text:00000000000025A0 loc_25A0:                               ; CODE XREF: base16_encode+39↓j
.text:00000000000025A0                 movzx   eax, byte ptr [rdi]
.text:00000000000025A3                 add     rdi, 1
.text:00000000000025A7                 add     rdx, 2
.text:00000000000025AB                 mov     ecx, eax
.text:00000000000025AD                 and     eax, 0Fh
.text:00000000000025B0                 shr     cl, 4
.text:00000000000025B3                 movzx   eax, byte ptr [r8+rax]
.text:00000000000025B8                 and     ecx, 0Fh
.text:00000000000025BB                 movzx   ecx, byte ptr [r8+rcx]
.text:00000000000025C0                 mov     [rdx-2], cl
.text:00000000000025C3                 cmp     rdi, rsi
.text:00000000000025C6                 mov     [rdx-1], al
.text:00000000000025C9                 jnz     short loc_25A0
.text:00000000000025CB
.text:00000000000025CB locret_25CB:                            ; CODE XREF: base16_encode+3↑j
.text:00000000000025CB                 rep retn
.text:00000000000025CB ; } // starts at 2590
.text:00000000000025CB base16_encode   endp
.text:00000000000025CB
.text:00000000000025CB ; ---------------------------------------------------------------------------
.text:00000000000025CD                 align 10h
.text:00000000000025D0
.text:00000000000025D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025D0
.text:00000000000025D0
.text:00000000000025D0 z85_length      proc near               ; DATA XREF: main:loc_1D3A↑o
.text:00000000000025D0 ; __unwind {
.text:00000000000025D0                 lea     edx, [rdi+rdi*4]
.text:00000000000025D3                 lea     eax, [rdx+3]
.text:00000000000025D6                 test    edx, edx
.text:00000000000025D8                 cmovns  eax, edx
.text:00000000000025DB                 sar     eax, 2
.text:00000000000025DE                 retn
.text:00000000000025DE ; } // starts at 25D0
.text:00000000000025DE z85_length      endp
.text:00000000000025DE
.text:00000000000025DE ; ---------------------------------------------------------------------------
.text:00000000000025DF                 align 20h
.text:00000000000025E0
.text:00000000000025E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025E0
.text:00000000000025E0
.text:00000000000025E0 isbase2         proc near               ; DATA XREF: main+1B9↑o
.text:00000000000025E0                                         ; main+3A7↑o
.text:00000000000025E0 ; __unwind {
.text:00000000000025E0                 sub     edi, 30h ; '0'
.text:00000000000025E3                 cmp     dil, 1
.text:00000000000025E7                 setbe   al
.text:00000000000025EA                 retn
.text:00000000000025EA ; } // starts at 25E0
.text:00000000000025EA isbase2         endp
.text:00000000000025EA
.text:00000000000025EA ; ---------------------------------------------------------------------------
.text:00000000000025EB                 align 10h
.text:00000000000025F0
.text:00000000000025F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025F0
.text:00000000000025F0
.text:00000000000025F0 base2_length    proc near               ; DATA XREF: main:loc_1A6B↑o
.text:00000000000025F0                                         ; main:loc_1C59↑o
.text:00000000000025F0 ; __unwind {
.text:00000000000025F0                 lea     eax, ds:0[rdi*8]
.text:00000000000025F7                 retn
.text:00000000000025F7 ; } // starts at 25F0
.text:00000000000025F7 base2_length    endp
.text:00000000000025F7
.text:00000000000025F7 ; ---------------------------------------------------------------------------
.text:00000000000025F8                 align 20h
.text:0000000000002600
.text:0000000000002600 ; =============== S U B R O U T I N E =======================================
.text:0000000000002600
.text:0000000000002600
.text:0000000000002600 base2msbf_encode proc near              ; DATA XREF: main+3B5↑o
.text:0000000000002600 ; __unwind {
.text:0000000000002600                 test    rsi, rsi
.text:0000000000002603                 jz      short locret_2642
.text:0000000000002605                 lea     r8, [rdi+rsi]
.text:0000000000002609                 nop     dword ptr [rax+00000000h]
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: base2msbf_encode+40↓j
.text:0000000000002610                 movzx   ecx, byte ptr [rdi]
.text:0000000000002613                 lea     rsi, [rdx+8]
.text:0000000000002617                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: base2msbf_encode+34↓j
.text:0000000000002620                 mov     eax, ecx
.text:0000000000002622                 add     rdx, 1
.text:0000000000002626                 add     ecx, ecx
.text:0000000000002628                 shr     al, 7
.text:000000000000262B                 add     eax, 30h ; '0'
.text:000000000000262E                 cmp     rsi, rdx
.text:0000000000002631                 mov     [rdx-1], al
.text:0000000000002634                 jnz     short loc_2620
.text:0000000000002636                 add     rdi, 1
.text:000000000000263A                 mov     rdx, rsi
.text:000000000000263D                 cmp     r8, rdi
.text:0000000000002640                 jnz     short loc_2610
.text:0000000000002642
.text:0000000000002642 locret_2642:                            ; CODE XREF: base2msbf_encode+3↑j
.text:0000000000002642                 rep retn
.text:0000000000002642 ; } // starts at 2600
.text:0000000000002642 base2msbf_encode endp
.text:0000000000002642
.text:0000000000002642 ; ---------------------------------------------------------------------------
.text:0000000000002644                 align 10h
.text:0000000000002650
.text:0000000000002650 ; =============== S U B R O U T I N E =======================================
.text:0000000000002650
.text:0000000000002650
.text:0000000000002650 base2lsbf_encode proc near              ; DATA XREF: main+1C7↑o
.text:0000000000002650 ; __unwind {
.text:0000000000002650                 test    rsi, rsi
.text:0000000000002653                 jz      short locret_2692
.text:0000000000002655                 lea     r8, [rdi+rsi]
.text:0000000000002659                 nop     dword ptr [rax+00000000h]
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: base2lsbf_encode+40↓j
.text:0000000000002660                 movzx   ecx, byte ptr [rdi]
.text:0000000000002663                 lea     rsi, [rdx+8]
.text:0000000000002667                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002670
.text:0000000000002670 loc_2670:                               ; CODE XREF: base2lsbf_encode+34↓j
.text:0000000000002670                 mov     eax, ecx
.text:0000000000002672                 add     rdx, 1
.text:0000000000002676                 shr     cl, 1
.text:0000000000002678                 and     eax, 1
.text:000000000000267B                 add     eax, 30h ; '0'
.text:000000000000267E                 cmp     rsi, rdx
.text:0000000000002681                 mov     [rdx-1], al
.text:0000000000002684                 jnz     short loc_2670
.text:0000000000002686                 add     rdi, 1
.text:000000000000268A                 mov     rdx, rsi
.text:000000000000268D                 cmp     r8, rdi
.text:0000000000002690                 jnz     short loc_2660
.text:0000000000002692
.text:0000000000002692 locret_2692:                            ; CODE XREF: base2lsbf_encode+3↑j
.text:0000000000002692                 rep retn
.text:0000000000002692 ; } // starts at 2650
.text:0000000000002692 base2lsbf_encode endp
.text:0000000000002692
.text:0000000000002692 ; ---------------------------------------------------------------------------
.text:0000000000002694                 align 20h
.text:00000000000026A0
.text:00000000000026A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026A0
.text:00000000000026A0
.text:00000000000026A0 isbase64url     proc near               ; DATA XREF: main+3F2↑o
.text:00000000000026A0 ; __unwind {
.text:00000000000026A0                 cmp     dil, 2Dh ; '-'
.text:00000000000026A4                 setz    al
.text:00000000000026A7                 cmp     dil, 5Fh ; '_'
.text:00000000000026AB                 setz    dl
.text:00000000000026AE                 or      al, dl
.text:00000000000026B0                 jnz     short locret_26C8
.text:00000000000026B2                 mov     edx, edi
.text:00000000000026B4                 and     edx, 0FFFFFFFBh
.text:00000000000026B7                 cmp     dl, 2Bh ; '+'
.text:00000000000026BA                 jz      short locret_26C8
.text:00000000000026BC                 movsx   edi, dil
.text:00000000000026C0                 jmp     isbase64
.text:00000000000026C0 ; ---------------------------------------------------------------------------
.text:00000000000026C5                 align 8
.text:00000000000026C8
.text:00000000000026C8 locret_26C8:                            ; CODE XREF: isbase64url+10↑j
.text:00000000000026C8                                         ; isbase64url+1A↑j
.text:00000000000026C8                 rep retn
.text:00000000000026C8 ; } // starts at 26A0
.text:00000000000026C8 isbase64url     endp
.text:00000000000026C8
.text:00000000000026C8 ; ---------------------------------------------------------------------------
.text:00000000000026CA                 align 10h
.text:00000000000026D0
.text:00000000000026D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026D0
.text:00000000000026D0
.text:00000000000026D0 base64url_encode proc near              ; DATA XREF: main+400↑o
.text:00000000000026D0 ; __unwind {
.text:00000000000026D0                 push    rbp
.text:00000000000026D1                 push    rbx
.text:00000000000026D2                 mov     rbp, rcx
.text:00000000000026D5                 mov     rbx, rdx
.text:00000000000026D8                 sub     rsp, 8
.text:00000000000026DC                 call    base64_encode
.text:00000000000026E1                 test    rbp, rbp
.text:00000000000026E4                 jz      short loc_2713
.text:00000000000026E6                 lea     rcx, [rbx+rbp]
.text:00000000000026EA                 jmp     short loc_2700
.text:00000000000026EA ; ---------------------------------------------------------------------------
.text:00000000000026EC                 align 10h
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: base64url_encode+35↓j
.text:00000000000026F0                 cmp     al, 2Fh ; '/'
.text:00000000000026F2                 jnz     short loc_26F7
.text:00000000000026F4                 mov     byte ptr [rbx], 5Fh ; '_'
.text:00000000000026F7
.text:00000000000026F7 loc_26F7:                               ; CODE XREF: base64url_encode+22↑j
.text:00000000000026F7                 add     rbx, 1
.text:00000000000026FB                 cmp     rbx, rcx
.text:00000000000026FE                 jz      short loc_2713
.text:0000000000002700
.text:0000000000002700 loc_2700:                               ; CODE XREF: base64url_encode+1A↑j
.text:0000000000002700                                         ; base64url_encode+41↓j
.text:0000000000002700                 movzx   eax, byte ptr [rbx]
.text:0000000000002703                 cmp     al, 2Bh ; '+'
.text:0000000000002705                 jnz     short loc_26F0
.text:0000000000002707                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000000270A                 add     rbx, 1
.text:000000000000270E                 cmp     rbx, rcx
.text:0000000000002711                 jnz     short loc_2700
.text:0000000000002713
.text:0000000000002713 loc_2713:                               ; CODE XREF: base64url_encode+14↑j
.text:0000000000002713                                         ; base64url_encode+2E↑j
.text:0000000000002713                 add     rsp, 8
.text:0000000000002717                 pop     rbx
.text:0000000000002718                 pop     rbp
.text:0000000000002719                 retn
.text:0000000000002719 ; } // starts at 26D0
.text:0000000000002719 base64url_encode endp
.text:0000000000002719
.text:0000000000002719 ; ---------------------------------------------------------------------------
.text:000000000000271A                 align 20h
.text:0000000000002720
.text:0000000000002720 ; =============== S U B R O U T I N E =======================================
.text:0000000000002720
.text:0000000000002720
.text:0000000000002720 z85_decode_ctx_init proc near           ; DATA XREF: main+4A4↑o
.text:0000000000002720 ; __unwind {
.text:0000000000002720                 push    rbx
.text:0000000000002721                 mov     rbx, rdi
.text:0000000000002724                 mov     qword ptr [rdi+18h], 1400h
.text:000000000000272C                 mov     edi, 1400h
.text:0000000000002731                 call    xmalloc
.text:0000000000002736                 mov     qword ptr [rbx], 1
.text:000000000000273D                 mov     [rbx+10h], rax
.text:0000000000002741                 pop     rbx
.text:0000000000002742                 retn
.text:0000000000002742 ; } // starts at 2720
.text:0000000000002742 z85_decode_ctx_init endp
.text:0000000000002742
.text:0000000000002742 ; ---------------------------------------------------------------------------
.text:0000000000002743                 align 10h
.text:0000000000002750
.text:0000000000002750 ; =============== S U B R O U T I N E =======================================
.text:0000000000002750
.text:0000000000002750
.text:0000000000002750 base2_decode_ctx_init proc near         ; DATA XREF: main+1D5↑o
.text:0000000000002750                                         ; main+3C3↑o
.text:0000000000002750 ; __unwind {
.text:0000000000002750                 push    rbx
.text:0000000000002751                 mov     rbx, rdi
.text:0000000000002754                 mov     qword ptr [rdi+18h], 1400h
.text:000000000000275C                 mov     edi, 1400h
.text:0000000000002761                 call    xmalloc
.text:0000000000002766                 mov     qword ptr [rbx], 0
.text:000000000000276D                 mov     [rbx+10h], rax
.text:0000000000002771                 pop     rbx
.text:0000000000002772                 retn
.text:0000000000002772 ; } // starts at 2750
.text:0000000000002772 base2_decode_ctx_init endp
.text:0000000000002772
.text:0000000000002772 ; ---------------------------------------------------------------------------
.text:0000000000002773                 align 20h
.text:0000000000002780
.text:0000000000002780 ; =============== S U B R O U T I N E =======================================
.text:0000000000002780
.text:0000000000002780
.text:0000000000002780 base16_decode_ctx_init proc near        ; DATA XREF: main+585↑o
.text:0000000000002780 ; __unwind {
.text:0000000000002780                 push    rbx
.text:0000000000002781                 mov     rbx, rdi
.text:0000000000002784                 mov     qword ptr [rdi+18h], 1400h
.text:000000000000278C                 mov     edi, 1400h
.text:0000000000002791                 call    xmalloc
.text:0000000000002796                 mov     byte ptr [rbx+5], 0
.text:000000000000279A                 mov     [rbx+10h], rax
.text:000000000000279E                 mov     dword ptr [rbx], 1
.text:00000000000027A4                 pop     rbx
.text:00000000000027A5                 retn
.text:00000000000027A5 ; } // starts at 2780
.text:00000000000027A5 base16_decode_ctx_init endp
.text:00000000000027A5
.text:00000000000027A5 ; ---------------------------------------------------------------------------
.text:00000000000027A6                 align 10h
.text:00000000000027B0
.text:00000000000027B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027B0
.text:00000000000027B0
.text:00000000000027B0 isz85           proc near               ; DATA XREF: main+488↑o
.text:00000000000027B0 ; __unwind {
.text:00000000000027B0                 cmp     dil, 5Ah ; 'Z'
.text:00000000000027B4                 jg      short loc_27E8
.text:00000000000027B6                 cmp     dil, 41h ; 'A'
.text:00000000000027BA                 jge     short loc_27EF
.text:00000000000027BC                 lea     eax, [rdi-30h]
.text:00000000000027BF                 cmp     al, 9
.text:00000000000027C1                 jbe     short loc_27EF
.text:00000000000027C3
.text:00000000000027C3 loc_27C3:                               ; CODE XREF: isz85+3D↓j
.text:00000000000027C3                 movsx   esi, dil        ; c
.text:00000000000027C7                 lea     rdi, s          ; ".-:+=^!/*?&<>()[]{}@%$#"
.text:00000000000027CE                 sub     rsp, 8
.text:00000000000027D2                 call    _strchr
.text:00000000000027D7                 test    rax, rax
.text:00000000000027DA                 setnz   al
.text:00000000000027DD                 add     rsp, 8
.text:00000000000027E1                 retn
.text:00000000000027E1 ; ---------------------------------------------------------------------------
.text:00000000000027E2                 align 8
.text:00000000000027E8
.text:00000000000027E8 loc_27E8:                               ; CODE XREF: isz85+4↑j
.text:00000000000027E8                 lea     eax, [rdi-61h]
.text:00000000000027EB                 cmp     al, 19h
.text:00000000000027ED                 ja      short loc_27C3
.text:00000000000027EF
.text:00000000000027EF loc_27EF:                               ; CODE XREF: isz85+A↑j
.text:00000000000027EF                                         ; isz85+11↑j
.text:00000000000027EF                 mov     eax, 1
.text:00000000000027F4                 retn
.text:00000000000027F4 ; } // starts at 27B0
.text:00000000000027F4 isz85           endp
.text:00000000000027F4
.text:00000000000027F4 ; ---------------------------------------------------------------------------
.text:00000000000027F5                 align 20h
.text:0000000000002800
.text:0000000000002800 ; =============== S U B R O U T I N E =======================================
.text:0000000000002800
.text:0000000000002800
.text:0000000000002800 base32_decode_ctx_wrapper proc near     ; DATA XREF: main+548↑o
.text:0000000000002800 ; __unwind {
.text:0000000000002800                 push    rbx
.text:0000000000002801                 mov     rbx, rdi
.text:0000000000002804                 lea     rdi, [rdi+4]
.text:0000000000002808                 call    base32_decode_ctx
.text:000000000000280D                 mov     edx, [rbx+4]
.text:0000000000002810                 mov     [rbx], edx
.text:0000000000002812                 pop     rbx
.text:0000000000002813                 retn
.text:0000000000002813 ; } // starts at 2800
.text:0000000000002813 base32_decode_ctx_wrapper endp
.text:0000000000002813
.text:0000000000002813 ; ---------------------------------------------------------------------------
.text:0000000000002814                 align 20h
.text:0000000000002820
.text:0000000000002820 ; =============== S U B R O U T I N E =======================================
.text:0000000000002820
.text:0000000000002820
.text:0000000000002820 base32hex_decode_ctx_init_wrapper proc near
.text:0000000000002820                                         ; DATA XREF: main+4EF↑o
.text:0000000000002820 ; __unwind {
.text:0000000000002820                 push    rbx
.text:0000000000002821                 mov     rbx, rdi
.text:0000000000002824                 lea     rdi, [rdi+4]
.text:0000000000002828                 call    base32_decode_ctx_init
.text:000000000000282D                 mov     qword ptr [rbx+18h], 1400h
.text:0000000000002835                 mov     edi, 1400h
.text:000000000000283A                 call    xmalloc
.text:000000000000283F                 mov     [rbx+10h], rax
.text:0000000000002843                 pop     rbx
.text:0000000000002844                 retn
.text:0000000000002844 ; } // starts at 2820
.text:0000000000002844 base32hex_decode_ctx_init_wrapper endp
.text:0000000000002844
.text:0000000000002844 ; ---------------------------------------------------------------------------
.text:0000000000002845                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850
.text:0000000000002850 base32_decode_ctx_init_wrapper proc near
.text:0000000000002850                                         ; DATA XREF: main+53A↑o
.text:0000000000002850 ; __unwind {
.text:0000000000002850                 add     rdi, 4
.text:0000000000002854                 jmp     base32_decode_ctx_init
.text:0000000000002854 ; } // starts at 2850
.text:0000000000002854 base32_decode_ctx_init_wrapper endp
.text:0000000000002854
.text:0000000000002854 ; ---------------------------------------------------------------------------
.text:0000000000002859                 align 20h
.text:0000000000002860
.text:0000000000002860 ; =============== S U B R O U T I N E =======================================
.text:0000000000002860
.text:0000000000002860
.text:0000000000002860 base64_decode_ctx_wrapper proc near     ; DATA XREF: main+467↑o
.text:0000000000002860 ; __unwind {
.text:0000000000002860                 push    rbx
.text:0000000000002861                 mov     rbx, rdi
.text:0000000000002864                 lea     rdi, [rdi+4]
.text:0000000000002868                 call    base64_decode_ctx
.text:000000000000286D                 mov     edx, [rbx+4]
.text:0000000000002870                 mov     [rbx], edx
.text:0000000000002872                 pop     rbx
.text:0000000000002873                 retn
.text:0000000000002873 ; } // starts at 2860
.text:0000000000002873 base64_decode_ctx_wrapper endp
.text:0000000000002873
.text:0000000000002873 ; ---------------------------------------------------------------------------
.text:0000000000002874                 align 20h
.text:0000000000002880
.text:0000000000002880 ; =============== S U B R O U T I N E =======================================
.text:0000000000002880
.text:0000000000002880
.text:0000000000002880 base64url_decode_ctx_init_wrapper proc near
.text:0000000000002880                                         ; DATA XREF: main+40E↑o
.text:0000000000002880 ; __unwind {
.text:0000000000002880                 push    rbx
.text:0000000000002881                 mov     rbx, rdi
.text:0000000000002884                 lea     rdi, [rdi+4]
.text:0000000000002888                 call    base64_decode_ctx_init
.text:000000000000288D                 mov     qword ptr [rbx+18h], 1400h
.text:0000000000002895                 mov     edi, 1400h
.text:000000000000289A                 call    xmalloc
.text:000000000000289F                 mov     [rbx+10h], rax
.text:00000000000028A3                 pop     rbx
.text:00000000000028A4                 retn
.text:00000000000028A4 ; } // starts at 2880
.text:00000000000028A4 base64url_decode_ctx_init_wrapper endp
.text:00000000000028A4
.text:00000000000028A4 ; ---------------------------------------------------------------------------
.text:00000000000028A5                 align 10h
.text:00000000000028B0
.text:00000000000028B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028B0
.text:00000000000028B0
.text:00000000000028B0 base64_decode_ctx_init_wrapper proc near
.text:00000000000028B0                                         ; DATA XREF: main+459↑o
.text:00000000000028B0 ; __unwind {
.text:00000000000028B0                 add     rdi, 4
.text:00000000000028B4                 jmp     base64_decode_ctx_init
.text:00000000000028B4 ; } // starts at 28B0
.text:00000000000028B4 base64_decode_ctx_init_wrapper endp
.text:00000000000028B4
.text:00000000000028B4 ; ---------------------------------------------------------------------------
.text:00000000000028B9                 align 20h
.text:00000000000028C0
.text:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028C0
.text:00000000000028C0
.text:00000000000028C0 base16_decode_ctx proc near             ; DATA XREF: main+593↑o
.text:00000000000028C0 ; __unwind {
.text:00000000000028C0                 test    rdx, rdx
.text:00000000000028C3                 mov     qword ptr [r8], 0
.text:00000000000028CA                 jz      short loc_2940
.text:00000000000028CC                 lea     r9, [rsi+1]
.text:00000000000028D0                 lea     r10, [rsi+rdx+1]
.text:00000000000028D5                 jmp     short loc_290E
.text:00000000000028D5 ; ---------------------------------------------------------------------------
.text:00000000000028D7                 align 20h
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: base16_decode_ctx+5D↓j
.text:00000000000028E0                 movzx   edx, byte ptr [rdi+5]
.text:00000000000028E4                 sub     eax, 37h ; '7'
.text:00000000000028E7                 test    dl, dl
.text:00000000000028E9                 jz      short loc_2932
.text:00000000000028EB
.text:00000000000028EB loc_28EB:                               ; CODE XREF: base16_decode_ctx+70↓j
.text:00000000000028EB                 movzx   esi, byte ptr [rdi+4]
.text:00000000000028EF                 add     qword ptr [r8], 1
.text:00000000000028F3                 add     rcx, 1
.text:00000000000028F7                 shl     esi, 4
.text:00000000000028FA                 add     eax, esi
.text:00000000000028FC                 mov     [rcx-1], al
.text:00000000000028FF
.text:00000000000028FF loc_28FF:                               ; CODE XREF: base16_decode_ctx+75↓j
.text:00000000000028FF                 xor     edx, 1
.text:0000000000002902                 mov     [rdi+5], dl
.text:0000000000002905
.text:0000000000002905 loc_2905:                               ; CODE XREF: base16_decode_ctx+55↓j
.text:0000000000002905                 add     r9, 1
.text:0000000000002909                 cmp     r10, r9
.text:000000000000290C                 jz      short loc_2950
.text:000000000000290E
.text:000000000000290E loc_290E:                               ; CODE XREF: base16_decode_ctx+15↑j
.text:000000000000290E                 movsx   eax, byte ptr [r9-1]
.text:0000000000002913                 cmp     al, 0Ah
.text:0000000000002915                 jz      short loc_2905
.text:0000000000002917                 lea     edx, [rax-41h]
.text:000000000000291A                 cmp     dl, 5
.text:000000000000291D                 jbe     short loc_28E0
.text:000000000000291F                 lea     edx, [rax-30h]
.text:0000000000002922                 cmp     dl, 9
.text:0000000000002925                 ja      short loc_2960
.text:0000000000002927                 movzx   edx, byte ptr [rdi+5]
.text:000000000000292B                 sub     eax, 30h ; '0'
.text:000000000000292E                 test    dl, dl
.text:0000000000002930                 jnz     short loc_28EB
.text:0000000000002932
.text:0000000000002932 loc_2932:                               ; CODE XREF: base16_decode_ctx+29↑j
.text:0000000000002932                 mov     [rdi+4], al
.text:0000000000002935                 jmp     short loc_28FF
.text:0000000000002935 ; ---------------------------------------------------------------------------
.text:0000000000002937                 align 20h
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: base16_decode_ctx+A↑j
.text:0000000000002940                 movzx   eax, byte ptr [rdi+5]
.text:0000000000002944                 xor     eax, 1
.text:0000000000002947                 retn
.text:0000000000002947 ; ---------------------------------------------------------------------------
.text:0000000000002948                 align 10h
.text:0000000000002950
.text:0000000000002950 loc_2950:                               ; CODE XREF: base16_decode_ctx+4C↑j
.text:0000000000002950                 mov     eax, 1
.text:0000000000002955                 retn
.text:0000000000002955 ; ---------------------------------------------------------------------------
.text:0000000000002956                 align 20h
.text:0000000000002960
.text:0000000000002960 loc_2960:                               ; CODE XREF: base16_decode_ctx+65↑j
.text:0000000000002960                 xor     eax, eax
.text:0000000000002962                 retn
.text:0000000000002962 ; } // starts at 28C0
.text:0000000000002962 base16_decode_ctx endp
.text:0000000000002962
.text:0000000000002962 ; ---------------------------------------------------------------------------
.text:0000000000002963                 align 10h
.text:0000000000002970
.text:0000000000002970 ; =============== S U B R O U T I N E =======================================
.text:0000000000002970
.text:0000000000002970
.text:0000000000002970 z85_decode_ctx  proc near               ; DATA XREF: main+4B2↑o
.text:0000000000002970 ; __unwind {
.text:0000000000002970                 test    rdx, rdx
.text:0000000000002973                 mov     qword ptr [r8], 0
.text:000000000000297A                 jnz     short loc_2988
.text:000000000000297C                 mov     eax, [rdi+4]
.text:000000000000297F                 test    eax, eax
.text:0000000000002981                 setle   al
.text:0000000000002984                 retn
.text:0000000000002984 ; ---------------------------------------------------------------------------
.text:0000000000002985                 align 8
.text:0000000000002988
.text:0000000000002988 loc_2988:                               ; CODE XREF: z85_decode_ctx+A↑j
.text:0000000000002988                 lea     r9, [rsi+1]
.text:000000000000298C                 lea     r10, z85_decoding
.text:0000000000002993                 lea     rsi, [rsi+rdx+1]
.text:0000000000002998                 jmp     short loc_29AD
.text:0000000000002998 ; ---------------------------------------------------------------------------
.text:000000000000299A                 align 20h
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: z85_decode_ctx+44↓j
.text:00000000000029A0                                         ; z85_decode_ctx+79↓j
.text:00000000000029A0                 add     r9, 1
.text:00000000000029A4                 cmp     r9, rsi
.text:00000000000029A7                 jz      loc_2A6F
.text:00000000000029AD
.text:00000000000029AD loc_29AD:                               ; CODE XREF: z85_decode_ctx+28↑j
.text:00000000000029AD                                         ; z85_decode_ctx+F9↓j
.text:00000000000029AD                 movzx   eax, byte ptr [r9-1]
.text:00000000000029B2                 cmp     al, 0Ah
.text:00000000000029B4                 jz      short loc_29A0
.text:00000000000029B6                 lea     edx, [rax-21h]
.text:00000000000029B9                 cmp     dl, 5Ch ; '\'
.text:00000000000029BC                 ja      loc_2A80
.text:00000000000029C2                 sub     eax, 21h ; '!'
.text:00000000000029C5                 cdqe
.text:00000000000029C7                 movzx   edx, byte ptr [r10+rax]
.text:00000000000029CC                 cmp     dl, 0FFh
.text:00000000000029CF                 jz      loc_2A80
.text:00000000000029D5                 movsxd  rax, dword ptr [rdi+4]
.text:00000000000029D9                 lea     r11d, [rax+1]
.text:00000000000029DD                 cmp     r11d, 5
.text:00000000000029E1                 mov     [rdi+4], r11d
.text:00000000000029E5                 mov     [rdi+rax+8], dl
.text:00000000000029E9                 jnz     short loc_29A0
.text:00000000000029EB                 movzx   eax, byte ptr [rdi+9]
.text:00000000000029EF                 movzx   r11d, byte ptr [rdi+0Ah]
.text:00000000000029F4                 movzx   edx, byte ptr [rdi+8]
.text:00000000000029F8                 imul    r11d, 1C39h
.text:00000000000029FF                 imul    eax, 95EEDh
.text:0000000000002A05                 add     eax, r11d
.text:0000000000002A08                 movzx   r11d, byte ptr [rdi+0Bh]
.text:0000000000002A0D                 imul    r11d, 55h ; 'U'
.text:0000000000002A11                 add     eax, r11d
.text:0000000000002A14                 movzx   r11d, byte ptr [rdi+0Ch]
.text:0000000000002A19                 add     r11d, eax
.text:0000000000002A1C                 lea     eax, [rdx-53h]
.text:0000000000002A1F                 cmp     al, 1
.text:0000000000002A21                 jbe     short loc_2A80
.text:0000000000002A23                 cmp     dl, 52h ; 'R'
.text:0000000000002A26                 jnz     short loc_2A31
.text:0000000000002A28                 cmp     r11d, 0DD7F4Dh
.text:0000000000002A2F                 jg      short loc_2A80
.text:0000000000002A31
.text:0000000000002A31 loc_2A31:                               ; CODE XREF: z85_decode_ctx+B6↑j
.text:0000000000002A31                 movzx   eax, dl
.text:0000000000002A34                 add     r9, 1
.text:0000000000002A38                 add     qword ptr [r8], 4
.text:0000000000002A3C                 imul    eax, 31C84B1h
.text:0000000000002A42                 add     rcx, 4
.text:0000000000002A46                 mov     dword ptr [rdi+4], 0
.text:0000000000002A4D                 add     eax, r11d
.text:0000000000002A50                 mov     edx, eax
.text:0000000000002A52                 mov     [rcx-2], ah
.text:0000000000002A55                 mov     [rcx-1], al
.text:0000000000002A58                 shr     edx, 18h
.text:0000000000002A5B                 mov     [rcx-4], dl
.text:0000000000002A5E                 mov     edx, eax
.text:0000000000002A60                 shr     edx, 10h
.text:0000000000002A63                 mov     [rcx-3], dl
.text:0000000000002A66                 cmp     r9, rsi
.text:0000000000002A69                 jnz     loc_29AD
.text:0000000000002A6F
.text:0000000000002A6F loc_2A6F:                               ; CODE XREF: z85_decode_ctx+37↑j
.text:0000000000002A6F                 mov     eax, [rdi+4]
.text:0000000000002A72                 mov     [rdi], eax
.text:0000000000002A74                 mov     eax, 1
.text:0000000000002A79                 retn
.text:0000000000002A79 ; ---------------------------------------------------------------------------
.text:0000000000002A7A                 align 20h
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: z85_decode_ctx+4C↑j
.text:0000000000002A80                                         ; z85_decode_ctx+5F↑j ...
.text:0000000000002A80                 xor     eax, eax
.text:0000000000002A82                 retn
.text:0000000000002A82 ; } // starts at 2970
.text:0000000000002A82 z85_decode_ctx  endp
.text:0000000000002A82
.text:0000000000002A82 ; ---------------------------------------------------------------------------
.text:0000000000002A83                 align 10h
.text:0000000000002A90
.text:0000000000002A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A90
.text:0000000000002A90
.text:0000000000002A90 base2lsbf_decode_ctx proc near          ; DATA XREF: main+1E3↑o
.text:0000000000002A90 ; __unwind {
.text:0000000000002A90                 test    rdx, rdx
.text:0000000000002A93                 mov     r10, rcx
.text:0000000000002A96                 mov     qword ptr [r8], 0
.text:0000000000002A9D                 jz      short loc_2B08
.text:0000000000002A9F                 lea     r9, [rsi+1]
.text:0000000000002AA3                 lea     rsi, [rsi+rdx+1]
.text:0000000000002AA8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: base2lsbf_decode_ctx+6C↓j
.text:0000000000002AB0                 movzx   eax, byte ptr [r9-1]
.text:0000000000002AB5                 cmp     al, 0Ah
.text:0000000000002AB7                 jz      short loc_2AF5
.text:0000000000002AB9                 lea     edx, [rax-30h]
.text:0000000000002ABC                 cmp     dl, 1
.text:0000000000002ABF                 ja      short loc_2B10
.text:0000000000002AC1                 cmp     al, 31h ; '1'
.text:0000000000002AC3                 mov     ecx, [rdi]
.text:0000000000002AC5                 setz    al
.text:0000000000002AC8                 movzx   eax, al
.text:0000000000002ACB                 shl     eax, cl
.text:0000000000002ACD                 or      eax, [rdi+4]
.text:0000000000002AD0                 add     ecx, 1
.text:0000000000002AD3                 cmp     ecx, 8
.text:0000000000002AD6                 mov     [rdi], ecx
.text:0000000000002AD8                 mov     [rdi+4], eax
.text:0000000000002ADB                 jnz     short loc_2AF5
.text:0000000000002ADD                 mov     [r10], al
.text:0000000000002AE0                 mov     dword ptr [rdi+4], 0
.text:0000000000002AE7                 add     r10, 1
.text:0000000000002AEB                 add     qword ptr [r8], 1
.text:0000000000002AEF                 mov     dword ptr [rdi], 0
.text:0000000000002AF5
.text:0000000000002AF5 loc_2AF5:                               ; CODE XREF: base2lsbf_decode_ctx+27↑j
.text:0000000000002AF5                                         ; base2lsbf_decode_ctx+4B↑j
.text:0000000000002AF5                 add     r9, 1
.text:0000000000002AF9                 cmp     rsi, r9
.text:0000000000002AFC                 jnz     short loc_2AB0
.text:0000000000002AFE                 mov     eax, 1
.text:0000000000002B03                 retn
.text:0000000000002B03 ; ---------------------------------------------------------------------------
.text:0000000000002B04                 align 8
.text:0000000000002B08
.text:0000000000002B08 loc_2B08:                               ; CODE XREF: base2lsbf_decode_ctx+D↑j
.text:0000000000002B08                 mov     eax, [rdi]
.text:0000000000002B0A                 test    eax, eax
.text:0000000000002B0C                 setz    al
.text:0000000000002B0F                 retn
.text:0000000000002B10 ; ---------------------------------------------------------------------------
.text:0000000000002B10
.text:0000000000002B10 loc_2B10:                               ; CODE XREF: base2lsbf_decode_ctx+2F↑j
.text:0000000000002B10                 xor     eax, eax
.text:0000000000002B12                 retn
.text:0000000000002B12 ; } // starts at 2A90
.text:0000000000002B12 base2lsbf_decode_ctx endp
.text:0000000000002B12
.text:0000000000002B12 ; ---------------------------------------------------------------------------
.text:0000000000002B13                 align 20h
.text:0000000000002B20
.text:0000000000002B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B20
.text:0000000000002B20
.text:0000000000002B20 base2msbf_decode_ctx proc near          ; DATA XREF: main+3D1↑o
.text:0000000000002B20 ; __unwind {
.text:0000000000002B20                 test    rdx, rdx
.text:0000000000002B23                 mov     r10, rcx
.text:0000000000002B26                 mov     qword ptr [r8], 0
.text:0000000000002B2D                 jz      loc_2BB8
.text:0000000000002B33                 lea     r9, [rsi+1]
.text:0000000000002B37                 lea     rsi, [rsi+rdx+1]
.text:0000000000002B3C                 jmp     short loc_2B58
.text:0000000000002B3C ; ---------------------------------------------------------------------------
.text:0000000000002B3E                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: base2msbf_decode_ctx+59↓j
.text:0000000000002B40                 shl     eax, 7
.text:0000000000002B43                 mov     dword ptr [rdi], 7
.text:0000000000002B49                 or      eax, r11d
.text:0000000000002B4C                 mov     [rdi+4], eax
.text:0000000000002B4F
.text:0000000000002B4F loc_2B4F:                               ; CODE XREF: base2msbf_decode_ctx+40↓j
.text:0000000000002B4F                                         ; base2msbf_decode_ctx+6A↓j
.text:0000000000002B4F                 add     r9, 1
.text:0000000000002B53                 cmp     r9, rsi
.text:0000000000002B56                 jz      short loc_2BAD
.text:0000000000002B58
.text:0000000000002B58 loc_2B58:                               ; CODE XREF: base2msbf_decode_ctx+1C↑j
.text:0000000000002B58                                         ; base2msbf_decode_ctx+8B↓j
.text:0000000000002B58                 movzx   edx, byte ptr [r9-1]
.text:0000000000002B5D                 cmp     dl, 0Ah
.text:0000000000002B60                 jz      short loc_2B4F
.text:0000000000002B62                 lea     eax, [rdx-30h]
.text:0000000000002B65                 cmp     al, 1
.text:0000000000002B67                 ja      short loc_2BC0
.text:0000000000002B69                 mov     ecx, [rdi]
.text:0000000000002B6B                 xor     eax, eax
.text:0000000000002B6D                 cmp     dl, 31h ; '1'
.text:0000000000002B70                 setz    al
.text:0000000000002B73                 mov     r11d, [rdi+4]
.text:0000000000002B77                 test    ecx, ecx
.text:0000000000002B79                 jz      short loc_2B40
.text:0000000000002B7B                 sub     ecx, 1
.text:0000000000002B7E                 shl     eax, cl
.text:0000000000002B80                 mov     [rdi], ecx
.text:0000000000002B82                 or      eax, r11d
.text:0000000000002B85                 test    ecx, ecx
.text:0000000000002B87                 mov     [rdi+4], eax
.text:0000000000002B8A                 jnz     short loc_2B4F
.text:0000000000002B8C                 add     r9, 1
.text:0000000000002B90                 mov     [r10], al
.text:0000000000002B93                 mov     dword ptr [rdi+4], 0
.text:0000000000002B9A                 add     r10, 1
.text:0000000000002B9E                 add     qword ptr [r8], 1
.text:0000000000002BA2                 cmp     r9, rsi
.text:0000000000002BA5                 mov     dword ptr [rdi], 0
.text:0000000000002BAB                 jnz     short loc_2B58
.text:0000000000002BAD
.text:0000000000002BAD loc_2BAD:                               ; CODE XREF: base2msbf_decode_ctx+36↑j
.text:0000000000002BAD                 mov     eax, 1
.text:0000000000002BB2                 retn
.text:0000000000002BB2 ; ---------------------------------------------------------------------------
.text:0000000000002BB3                 align 8
.text:0000000000002BB8
.text:0000000000002BB8 loc_2BB8:                               ; CODE XREF: base2msbf_decode_ctx+D↑j
.text:0000000000002BB8                 mov     eax, [rdi]
.text:0000000000002BBA                 test    eax, eax
.text:0000000000002BBC                 setz    al
.text:0000000000002BBF                 retn
.text:0000000000002BC0 ; ---------------------------------------------------------------------------
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: base2msbf_decode_ctx+47↑j
.text:0000000000002BC0                 xor     eax, eax
.text:0000000000002BC2                 retn
.text:0000000000002BC2 ; } // starts at 2B20
.text:0000000000002BC2 base2msbf_decode_ctx endp
.text:0000000000002BC2
.text:0000000000002BC2 ; ---------------------------------------------------------------------------
.text:0000000000002BC3                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BD0
.text:0000000000002BD0
.text:0000000000002BD0 z85_encode      proc near               ; DATA XREF: main+496↑o
.text:0000000000002BD0
.text:0000000000002BD0 var_34          = byte ptr -34h
.text:0000000000002BD0 var_33          = byte ptr -33h
.text:0000000000002BD0 var_32          = byte ptr -32h
.text:0000000000002BD0 var_31          = byte ptr -31h
.text:0000000000002BD0 var_30          = qword ptr -30h
.text:0000000000002BD0
.text:0000000000002BD0 ; __unwind {
.text:0000000000002BD0                 push    r13
.text:0000000000002BD2                 push    r12
.text:0000000000002BD4                 push    rbp
.text:0000000000002BD5                 push    rbx
.text:0000000000002BD6                 sub     rsp, 18h
.text:0000000000002BDA                 mov     rax, fs:28h
.text:0000000000002BE3                 mov     [rsp+38h+var_30], rax
.text:0000000000002BE8                 xor     eax, eax
.text:0000000000002BEA                 test    rsi, rsi
.text:0000000000002BED                 jz      loc_2CC4
.text:0000000000002BF3                 movzx   eax, byte ptr [rdi]
.text:0000000000002BF6                 lea     r9, [rdi+1]
.text:0000000000002BFA                 add     rsi, rdi
.text:0000000000002BFD                 mov     r11, rdx
.text:0000000000002C00                 xor     r10d, r10d
.text:0000000000002C03                 mov     edi, 0C0C0C0C1h
.text:0000000000002C08                 lea     rbx, z85_encoding ; "0123456789abcdefghijklmnopqrstuvwxyzABC"...
.text:0000000000002C0F                 mov     [rsp+38h+var_34], al
.text:0000000000002C13                 mov     eax, 1
.text:0000000000002C18                 jmp     short loc_2C23
.text:0000000000002C18 ; ---------------------------------------------------------------------------
.text:0000000000002C1A                 align 20h
.text:0000000000002C20
.text:0000000000002C20 loc_2C20:                               ; CODE XREF: z85_encode+70↓j
.text:0000000000002C20                                         ; z85_encode+E1↓j
.text:0000000000002C20                 movsxd  rax, edx
.text:0000000000002C23
.text:0000000000002C23 loc_2C23:                               ; CODE XREF: z85_encode+48↑j
.text:0000000000002C23                 cmp     rsi, r9
.text:0000000000002C26                 jz      loc_2CC0
.text:0000000000002C2C                 add     r9, 1
.text:0000000000002C30                 movzx   r8d, byte ptr [r9-1]
.text:0000000000002C35                 lea     edx, [rax+1]
.text:0000000000002C38                 cmp     edx, 4
.text:0000000000002C3B                 mov     [rsp+rax+38h+var_34], r8b
.text:0000000000002C40                 jnz     short loc_2C20
.text:0000000000002C42                 movzx   eax, [rsp+38h+var_34]
.text:0000000000002C47                 movzx   r8d, [rsp+38h+var_33]
.text:0000000000002C4D                 mov     r13, r11
.text:0000000000002C50                 lea     rbp, [r10+4]
.text:0000000000002C54                 lea     r12, [r10-1]
.text:0000000000002C58                 sub     r13, r10
.text:0000000000002C5B                 shl     r8d, 10h
.text:0000000000002C5F                 shl     eax, 18h
.text:0000000000002C62                 lea     eax, [rax+r8]
.text:0000000000002C66                 movzx   r8d, [rsp+38h+var_32]
.text:0000000000002C6C                 shl     r8d, 8
.text:0000000000002C70                 add     r8d, eax
.text:0000000000002C73                 movzx   eax, [rsp+38h+var_31]
.text:0000000000002C78                 add     r8d, eax
.text:0000000000002C7B
.text:0000000000002C7B loc_2C7B:                               ; CODE XREF: z85_encode+D5↓j
.text:0000000000002C7B                 mov     eax, r8d
.text:0000000000002C7E                 mul     edi
.text:0000000000002C80                 shr     edx, 6
.text:0000000000002C83                 cmp     rbp, rcx
.text:0000000000002C86                 jnb     short loc_2C9B
.text:0000000000002C88                 imul    eax, edx, 55h ; 'U'
.text:0000000000002C8B                 sub     r8d, eax
.text:0000000000002C8E                 movsxd  r8, r8d
.text:0000000000002C91                 movzx   eax, byte ptr [rbx+r8]
.text:0000000000002C96                 mov     [r13+rbp+0], al
.text:0000000000002C9B
.text:0000000000002C9B loc_2C9B:                               ; CODE XREF: z85_encode+B6↑j
.text:0000000000002C9B                 sub     rbp, 1
.text:0000000000002C9F                 mov     r8d, edx
.text:0000000000002CA2                 cmp     rbp, r12
.text:0000000000002CA5                 jnz     short loc_2C7B
.text:0000000000002CA7                 add     r11, 5
.text:0000000000002CAB                 add     r10, 5
.text:0000000000002CAF                 xor     edx, edx
.text:0000000000002CB1                 jmp     loc_2C20
.text:0000000000002CB1 ; ---------------------------------------------------------------------------
.text:0000000000002CB6                 align 20h
.text:0000000000002CC0
.text:0000000000002CC0 loc_2CC0:                               ; CODE XREF: z85_encode+56↑j
.text:0000000000002CC0                 test    eax, eax
.text:0000000000002CC2                 jnz     short loc_2CDF
.text:0000000000002CC4
.text:0000000000002CC4 loc_2CC4:                               ; CODE XREF: z85_encode+1D↑j
.text:0000000000002CC4                 mov     rax, [rsp+38h+var_30]
.text:0000000000002CC9                 xor     rax, fs:28h
.text:0000000000002CD2                 jnz     short loc_2D03
.text:0000000000002CD4                 add     rsp, 18h
.text:0000000000002CD8                 pop     rbx
.text:0000000000002CD9                 pop     rbp
.text:0000000000002CDA                 pop     r12
.text:0000000000002CDC                 pop     r13
.text:0000000000002CDE                 retn
.text:0000000000002CDF ; ---------------------------------------------------------------------------
.text:0000000000002CDF
.text:0000000000002CDF loc_2CDF:                               ; CODE XREF: z85_encode+F2↑j
.text:0000000000002CDF                 lea     rsi, aInvalidInputLe ; "invalid input (length must be multiple "...
.text:0000000000002CE6                 mov     edx, 5          ; category
.text:0000000000002CEB                 xor     edi, edi        ; domainname
.text:0000000000002CED                 call    _dcgettext
.text:0000000000002CF2                 xor     esi, esi        ; errnum
.text:0000000000002CF4                 mov     rdx, rax        ; format
.text:0000000000002CF7                 mov     edi, 1          ; status
.text:0000000000002CFC                 xor     eax, eax
.text:0000000000002CFE                 call    _error
.text:0000000000002D03
.text:0000000000002D03 loc_2D03:                               ; CODE XREF: z85_encode+102↑j
.text:0000000000002D03                 call    ___stack_chk_fail
.text:0000000000002D03 ; } // starts at 2BD0
.text:0000000000002D03 z85_encode      endp
.text:0000000000002D03
.text:0000000000002D03 ; ---------------------------------------------------------------------------
.text:0000000000002D08                 align 10h
.text:0000000000002D10
.text:0000000000002D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D10
.text:0000000000002D10
.text:0000000000002D10 base32hex_encode proc near              ; DATA XREF: main+4E1↑o
.text:0000000000002D10 ; __unwind {
.text:0000000000002D10                 push    rbp
.text:0000000000002D11                 push    rbx
.text:0000000000002D12                 mov     rbp, rcx
.text:0000000000002D15                 mov     rbx, rdx
.text:0000000000002D18                 sub     rsp, 8
.text:0000000000002D1C                 call    base32_encode
.text:0000000000002D21                 test    rbp, rbp
.text:0000000000002D24                 jz      short loc_2D60
.text:0000000000002D26                 movsx   eax, byte ptr [rbx]
.text:0000000000002D29                 lea     edx, [rax-32h]
.text:0000000000002D2C                 cmp     dl, 28h ; '('
.text:0000000000002D2F                 ja      short loc_2D67
.text:0000000000002D31                 lea     rcx, [rbx+rbp]
.text:0000000000002D35                 lea     rsi, base32_norm_to_hex ; "QRSTUV89:;<=>?@0123456789ABCDEFGHIJKLMN"...
.text:0000000000002D3C                 jmp     short loc_2D4B
.text:0000000000002D3C ; ---------------------------------------------------------------------------
.text:0000000000002D3E                 align 20h
.text:0000000000002D40
.text:0000000000002D40 loc_2D40:                               ; CODE XREF: base32hex_encode+4E↓j
.text:0000000000002D40                 movsx   eax, byte ptr [rbx]
.text:0000000000002D43                 lea     edx, [rax-32h]
.text:0000000000002D46                 cmp     dl, 28h ; '('
.text:0000000000002D49                 ja      short loc_2D67
.text:0000000000002D4B
.text:0000000000002D4B loc_2D4B:                               ; CODE XREF: base32hex_encode+2C↑j
.text:0000000000002D4B                 sub     eax, 32h ; '2'
.text:0000000000002D4E                 add     rbx, 1
.text:0000000000002D52                 cdqe
.text:0000000000002D54                 movzx   eax, byte ptr [rsi+rax]
.text:0000000000002D58                 mov     [rbx-1], al
.text:0000000000002D5B                 cmp     rbx, rcx
.text:0000000000002D5E                 jnz     short loc_2D40
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: base32hex_encode+14↑j
.text:0000000000002D60                 add     rsp, 8
.text:0000000000002D64                 pop     rbx
.text:0000000000002D65                 pop     rbp
.text:0000000000002D66                 retn
.text:0000000000002D67 ; ---------------------------------------------------------------------------
.text:0000000000002D67
.text:0000000000002D67 loc_2D67:                               ; CODE XREF: base32hex_encode+1F↑j
.text:0000000000002D67                                         ; base32hex_encode+39↑j
.text:0000000000002D67                 lea     rcx, __PRETTY_FUNCTION___7847 ; "base32hex_encode"
.text:0000000000002D6E                 lea     rsi, file       ; "../coreutils-8.31/src/basenc.c"
.text:0000000000002D75                 lea     rdi, assertion  ; "*p >= 0x32 && *p <= 0x5a"
.text:0000000000002D7C                 mov     edx, 1C2h       ; line
.text:0000000000002D81                 call    ___assert_fail
.text:0000000000002D81 ; } // starts at 2D10
.text:0000000000002D81 base32hex_encode endp
.text:0000000000002D81
.text:0000000000002D81 ; ---------------------------------------------------------------------------
.text:0000000000002D86                 align 10h
.text:0000000000002D90
.text:0000000000002D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D90
.text:0000000000002D90
.text:0000000000002D90 base64url_decode_ctx_wrapper proc near  ; DATA XREF: main+41C↑o
.text:0000000000002D90 ; __unwind {
.text:0000000000002D90                 push    r14
.text:0000000000002D92                 push    r13
.text:0000000000002D94                 mov     r14, rsi
.text:0000000000002D97                 push    r12
.text:0000000000002D99                 push    rbp
.text:0000000000002D9A                 mov     r13, rdx
.text:0000000000002D9D                 push    rbx
.text:0000000000002D9E                 mov     rbx, rdi
.text:0000000000002DA1                 mov     rbp, rcx
.text:0000000000002DA4                 cmp     rdx, [rbx+18h]
.text:0000000000002DA8                 mov     r12, r8
.text:0000000000002DAB                 mov     rdi, [rdi+10h]  ; dest
.text:0000000000002DAF                 ja      loc_2E50
.text:0000000000002DB5
.text:0000000000002DB5 loc_2DB5:                               ; CODE XREF: base64url_decode_ctx_wrapper+D9↓j
.text:0000000000002DB5                 mov     rsi, r14        ; src
.text:0000000000002DB8                 mov     rdx, r13        ; n
.text:0000000000002DBB                 call    _memcpy
.text:0000000000002DC0                 test    r13, r13
.text:0000000000002DC3                 mov     rsi, [rbx+10h]
.text:0000000000002DC7                 jz      short loc_2E11
.text:0000000000002DC9                 movzx   eax, byte ptr [rsi]
.text:0000000000002DCC                 lea     rcx, [rsi+r13]
.text:0000000000002DD0                 mov     edx, eax
.text:0000000000002DD2                 and     edx, 0FFFFFFFBh
.text:0000000000002DD5                 cmp     dl, 2Bh ; '+'
.text:0000000000002DD8                 jnz     short loc_2DFD
.text:0000000000002DDA                 jmp     short loc_2E38
.text:0000000000002DDA ; ---------------------------------------------------------------------------
.text:0000000000002DDC                 align 20h
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: base64url_decode_ctx_wrapper+6F↓j
.text:0000000000002DE0                 cmp     al, 5Fh ; '_'
.text:0000000000002DE2                 jnz     short loc_2DE7
.text:0000000000002DE4                 mov     byte ptr [rsi], 2Fh ; '/'
.text:0000000000002DE7
.text:0000000000002DE7 loc_2DE7:                               ; CODE XREF: base64url_decode_ctx_wrapper+52↑j
.text:0000000000002DE7                 add     rsi, 1
.text:0000000000002DEB                 cmp     rsi, rcx
.text:0000000000002DEE                 jz      short loc_2E0D
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: base64url_decode_ctx_wrapper+7B↓j
.text:0000000000002DF0                 movzx   eax, byte ptr [rsi]
.text:0000000000002DF3                 mov     edx, eax
.text:0000000000002DF5                 and     edx, 0FFFFFFFBh
.text:0000000000002DF8                 cmp     dl, 2Bh ; '+'
.text:0000000000002DFB                 jz      short loc_2E38
.text:0000000000002DFD
.text:0000000000002DFD loc_2DFD:                               ; CODE XREF: base64url_decode_ctx_wrapper+48↑j
.text:0000000000002DFD                 cmp     al, 2Dh ; '-'
.text:0000000000002DFF                 jnz     short loc_2DE0
.text:0000000000002E01                 mov     byte ptr [rsi], 2Bh ; '+'
.text:0000000000002E04                 add     rsi, 1
.text:0000000000002E08                 cmp     rsi, rcx
.text:0000000000002E0B                 jnz     short loc_2DF0
.text:0000000000002E0D
.text:0000000000002E0D loc_2E0D:                               ; CODE XREF: base64url_decode_ctx_wrapper+5E↑j
.text:0000000000002E0D                 mov     rsi, [rbx+10h]
.text:0000000000002E11
.text:0000000000002E11 loc_2E11:                               ; CODE XREF: base64url_decode_ctx_wrapper+37↑j
.text:0000000000002E11                 lea     rdi, [rbx+4]
.text:0000000000002E15                 mov     rdx, r13
.text:0000000000002E18                 mov     r8, r12
.text:0000000000002E1B                 mov     rcx, rbp
.text:0000000000002E1E                 call    base64_decode_ctx
.text:0000000000002E23                 mov     edx, [rbx+4]
.text:0000000000002E26                 mov     [rbx], edx
.text:0000000000002E28                 pop     rbx
.text:0000000000002E29                 pop     rbp
.text:0000000000002E2A                 pop     r12
.text:0000000000002E2C                 pop     r13
.text:0000000000002E2E                 pop     r14
.text:0000000000002E30                 retn
.text:0000000000002E30 ; ---------------------------------------------------------------------------
.text:0000000000002E31                 align 8
.text:0000000000002E38
.text:0000000000002E38 loc_2E38:                               ; CODE XREF: base64url_decode_ctx_wrapper+4A↑j
.text:0000000000002E38                                         ; base64url_decode_ctx_wrapper+6B↑j
.text:0000000000002E38                 pop     rbx
.text:0000000000002E39                 mov     qword ptr [r12], 0
.text:0000000000002E41                 xor     eax, eax
.text:0000000000002E43                 pop     rbp
.text:0000000000002E44                 pop     r12
.text:0000000000002E46                 pop     r13
.text:0000000000002E48                 pop     r14
.text:0000000000002E4A                 retn
.text:0000000000002E4A ; ---------------------------------------------------------------------------
.text:0000000000002E4B                 align 10h
.text:0000000000002E50
.text:0000000000002E50 loc_2E50:                               ; CODE XREF: base64url_decode_ctx_wrapper+1F↑j
.text:0000000000002E50                 lea     rsi, [rdx+rdx]
.text:0000000000002E54                 test    rsi, rsi
.text:0000000000002E57                 mov     [rbx+18h], rsi
.text:0000000000002E5B                 js      short loc_2E6E
.text:0000000000002E5D                 call    xrealloc
.text:0000000000002E62                 mov     rdi, rax
.text:0000000000002E65                 mov     [rbx+10h], rax
.text:0000000000002E69                 jmp     loc_2DB5
.text:0000000000002E6E ; ---------------------------------------------------------------------------
.text:0000000000002E6E
.text:0000000000002E6E loc_2E6E:                               ; CODE XREF: base64url_decode_ctx_wrapper+CB↑j
.text:0000000000002E6E                 call    xalloc_die
.text:0000000000002E6E ; } // starts at 2D90
.text:0000000000002E6E base64url_decode_ctx_wrapper endp
.text:0000000000002E6E
.text:0000000000002E6E ; ---------------------------------------------------------------------------
.text:0000000000002E73                 align 20h
.text:0000000000002E80
.text:0000000000002E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E80
.text:0000000000002E80
.text:0000000000002E80 base32hex_decode_ctx_wrapper proc near  ; DATA XREF: main+4FD↑o
.text:0000000000002E80
.text:0000000000002E80 var_30          = qword ptr -30h
.text:0000000000002E80 var_28          = qword ptr -28h
.text:0000000000002E80 var_20          = qword ptr -20h
.text:0000000000002E80
.text:0000000000002E80 ; __unwind {
.text:0000000000002E80                 push    rbp
.text:0000000000002E81                 push    rbx
.text:0000000000002E82                 mov     rbp, rsi
.text:0000000000002E85                 mov     rbx, rdi
.text:0000000000002E88                 sub     rsp, 28h
.text:0000000000002E8C                 cmp     rdx, [rdi+18h]
.text:0000000000002E90                 mov     rax, [rdi+10h]
.text:0000000000002E94                 ja      short loc_2F10
.text:0000000000002E96
.text:0000000000002E96 loc_2E96:                               ; CODE XREF: base32hex_decode_ctx_wrapper+C7↓j
.text:0000000000002E96                 test    rdx, rdx
.text:0000000000002E99                 jz      short loc_2EF2
.text:0000000000002E9B                 xor     r9d, r9d
.text:0000000000002E9E                 lea     r11, base32_hex_to_norm ; "ABCDEFGHIJ:;<=>?@KLMNOPQRSTUVWXYZ234567"
.text:0000000000002EA5                 jmp     short loc_2EC6
.text:0000000000002EA5 ; ---------------------------------------------------------------------------
.text:0000000000002EA7                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: base32hex_decode_ctx_wrapper+54↓j
.text:0000000000002EB0                 lea     edi, [rsi-41h]
.text:0000000000002EB3                 cmp     dil, 15h
.text:0000000000002EB7                 jbe     short loc_2ED6
.text:0000000000002EB9                 mov     [rax+r9], sil
.text:0000000000002EBD                 add     r9, 1
.text:0000000000002EC1                 cmp     rdx, r9
.text:0000000000002EC4                 jz      short loc_2EEE
.text:0000000000002EC6
.text:0000000000002EC6 loc_2EC6:                               ; CODE XREF: base32hex_decode_ctx_wrapper+25↑j
.text:0000000000002EC6                                         ; base32hex_decode_ctx_wrapper+6C↓j
.text:0000000000002EC6                 movsx   esi, byte ptr [rbp+r9+0]
.text:0000000000002ECC                 lea     r10d, [rsi-30h]
.text:0000000000002ED0                 cmp     r10b, 9
.text:0000000000002ED4                 ja      short loc_2EB0
.text:0000000000002ED6
.text:0000000000002ED6 loc_2ED6:                               ; CODE XREF: base32hex_decode_ctx_wrapper+37↑j
.text:0000000000002ED6                 sub     esi, 30h ; '0'
.text:0000000000002ED9                 movsxd  rsi, esi
.text:0000000000002EDC                 movzx   esi, byte ptr [r11+rsi]
.text:0000000000002EE1                 mov     [rax+r9], sil
.text:0000000000002EE5                 add     r9, 1
.text:0000000000002EE9                 cmp     rdx, r9
.text:0000000000002EEC                 jnz     short loc_2EC6
.text:0000000000002EEE
.text:0000000000002EEE loc_2EEE:                               ; CODE XREF: base32hex_decode_ctx_wrapper+44↑j
.text:0000000000002EEE                 mov     rax, [rbx+10h]
.text:0000000000002EF2
.text:0000000000002EF2 loc_2EF2:                               ; CODE XREF: base32hex_decode_ctx_wrapper+19↑j
.text:0000000000002EF2                 lea     rdi, [rbx+4]
.text:0000000000002EF6                 mov     rsi, rax
.text:0000000000002EF9                 call    base32_decode_ctx
.text:0000000000002EFE                 mov     edx, [rbx+4]
.text:0000000000002F01                 mov     [rbx], edx
.text:0000000000002F03                 add     rsp, 28h
.text:0000000000002F07                 pop     rbx
.text:0000000000002F08                 pop     rbp
.text:0000000000002F09                 retn
.text:0000000000002F09 ; ---------------------------------------------------------------------------
.text:0000000000002F0A                 align 10h
.text:0000000000002F10
.text:0000000000002F10 loc_2F10:                               ; CODE XREF: base32hex_decode_ctx_wrapper+14↑j
.text:0000000000002F10                 lea     rsi, [rdx+rdx]
.text:0000000000002F14                 mov     [rsp+38h+var_20], r8
.text:0000000000002F19                 mov     [rsp+38h+var_28], rcx
.text:0000000000002F1E                 mov     [rsp+38h+var_30], rdx
.text:0000000000002F23                 test    rsi, rsi
.text:0000000000002F26                 mov     [rdi+18h], rsi
.text:0000000000002F2A                 js      short loc_2F4C
.text:0000000000002F2C                 mov     rdi, rax
.text:0000000000002F2F                 call    xrealloc
.text:0000000000002F34                 mov     rdx, [rsp+38h+var_30]
.text:0000000000002F39                 mov     [rbx+10h], rax
.text:0000000000002F3D                 mov     rcx, [rsp+38h+var_28]
.text:0000000000002F42                 mov     r8, [rsp+38h+var_20]
.text:0000000000002F47                 jmp     loc_2E96
.text:0000000000002F4C ; ---------------------------------------------------------------------------
.text:0000000000002F4C
.text:0000000000002F4C loc_2F4C:                               ; CODE XREF: base32hex_decode_ctx_wrapper+AA↑j
.text:0000000000002F4C                 call    xalloc_die
.text:0000000000002F4C ; } // starts at 2E80
.text:0000000000002F4C base32hex_decode_ctx_wrapper endp
.text:0000000000002F4C
.text:0000000000002F4C ; ---------------------------------------------------------------------------
.text:0000000000002F51                 align 20h
.text:0000000000002F60
.text:0000000000002F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F60
.text:0000000000002F60 ; Attributes: noreturn
.text:0000000000002F60
.text:0000000000002F60 ; void __fastcall __noreturn usage(int status)
.text:0000000000002F60                 public usage
.text:0000000000002F60 usage           proc near               ; CODE XREF: main+C6↑p
.text:0000000000002F60                                         ; main+A1F↑p ...
.text:0000000000002F60
.text:0000000000002F60 var_A8          = qword ptr -0A8h
.text:0000000000002F60 var_A0          = qword ptr -0A0h
.text:0000000000002F60 var_98          = qword ptr -98h
.text:0000000000002F60 var_90          = qword ptr -90h
.text:0000000000002F60 var_88          = qword ptr -88h
.text:0000000000002F60 var_80          = qword ptr -80h
.text:0000000000002F60 var_78          = qword ptr -78h
.text:0000000000002F60 var_70          = qword ptr -70h
.text:0000000000002F60 var_68          = qword ptr -68h
.text:0000000000002F60 var_60          = qword ptr -60h
.text:0000000000002F60 var_58          = qword ptr -58h
.text:0000000000002F60 var_50          = qword ptr -50h
.text:0000000000002F60 var_48          = qword ptr -48h
.text:0000000000002F60 var_40          = qword ptr -40h
.text:0000000000002F60 var_30          = qword ptr -30h
.text:0000000000002F60
.text:0000000000002F60 ; __unwind {
.text:0000000000002F60                 push    r13
.text:0000000000002F62                 push    r12
.text:0000000000002F64                 mov     edx, 5          ; category
.text:0000000000002F69                 push    rbp
.text:0000000000002F6A                 push    rbx
.text:0000000000002F6B                 mov     ebp, edi
.text:0000000000002F6D                 sub     rsp, 88h
.text:0000000000002F74                 mov     rbx, cs:program_name
.text:0000000000002F7B                 mov     rax, fs:28h
.text:0000000000002F84                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002F89                 xor     eax, eax
.text:0000000000002F8B                 test    edi, edi
.text:0000000000002F8D                 jz      short loc_2FBD
.text:0000000000002F8F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002F96                 xor     edi, edi        ; domainname
.text:0000000000002F98                 call    _dcgettext
.text:0000000000002F9D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002FA4                 mov     rdx, rax
.text:0000000000002FA7                 mov     rcx, rbx
.text:0000000000002FAA                 mov     esi, 1
.text:0000000000002FAF                 xor     eax, eax
.text:0000000000002FB1                 call    ___fprintf_chk
.text:0000000000002FB6
.text:0000000000002FB6 loc_2FB6:                               ; CODE XREF: usage+436↓j
.text:0000000000002FB6                 mov     edi, ebp        ; status
.text:0000000000002FB8                 call    _exit
.text:0000000000002FBD ; ---------------------------------------------------------------------------
.text:0000000000002FBD
.text:0000000000002FBD loc_2FBD:                               ; CODE XREF: usage+2D↑j
.text:0000000000002FBD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]\n"
.text:0000000000002FC4                 xor     edi, edi        ; domainname
.text:0000000000002FC6                 call    _dcgettext
.text:0000000000002FCB                 mov     rdx, rbx
.text:0000000000002FCE                 mov     rsi, rax
.text:0000000000002FD1                 mov     edi, 1
.text:0000000000002FD6                 xor     eax, eax
.text:0000000000002FD8                 call    ___printf_chk
.text:0000000000002FDD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002FE4                 lea     rsi, aBasencEncodeOr ; "basenc encode or decode FILE, or standa"...
.text:0000000000002FEB                 mov     edx, 5          ; category
.text:0000000000002FF0                 xor     edi, edi        ; domainname
.text:0000000000002FF2                 call    _dcgettext
.text:0000000000002FF7                 mov     rsi, rbx        ; stream
.text:0000000000002FFA                 mov     rdi, rax        ; s
.text:0000000000002FFD                 call    _fputs_unlocked
.text:0000000000003002                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003009                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000003010                 mov     edx, 5          ; category
.text:0000000000003015                 xor     edi, edi        ; domainname
.text:0000000000003017                 call    _dcgettext
.text:000000000000301C                 mov     rsi, rbx        ; stream
.text:000000000000301F                 mov     rdi, rax        ; s
.text:0000000000003022                 call    _fputs_unlocked
.text:0000000000003027                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000302E                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000003035                 mov     edx, 5          ; category
.text:000000000000303A                 xor     edi, edi        ; domainname
.text:000000000000303C                 call    _dcgettext
.text:0000000000003041                 mov     rsi, rbx        ; stream
.text:0000000000003044                 mov     rdi, rax        ; s
.text:0000000000003047                 call    _fputs_unlocked
.text:000000000000304C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003053                 lea     rsi, aBase64SameAsBa ; "      --base64          same as 'base64"...
.text:000000000000305A                 mov     edx, 5          ; category
.text:000000000000305F                 xor     edi, edi        ; domainname
.text:0000000000003061                 call    _dcgettext
.text:0000000000003066                 mov     rsi, rbx        ; stream
.text:0000000000003069                 mov     rdi, rax        ; s
.text:000000000000306C                 call    _fputs_unlocked
.text:0000000000003071                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003078                 lea     rsi, aBase64urlFileA ; "      --base64url       file- and url-s"...
.text:000000000000307F                 mov     edx, 5          ; category
.text:0000000000003084                 xor     edi, edi        ; domainname
.text:0000000000003086                 call    _dcgettext
.text:000000000000308B                 mov     rsi, rbx        ; stream
.text:000000000000308E                 mov     rdi, rax        ; s
.text:0000000000003091                 call    _fputs_unlocked
.text:0000000000003096                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000309D                 lea     rsi, aBase32SameAsBa ; "      --base32          same as 'base32"...
.text:00000000000030A4                 mov     edx, 5          ; category
.text:00000000000030A9                 xor     edi, edi        ; domainname
.text:00000000000030AB                 call    _dcgettext
.text:00000000000030B0                 mov     rsi, rbx        ; stream
.text:00000000000030B3                 mov     rdi, rax        ; s
.text:00000000000030B6                 call    _fputs_unlocked
.text:00000000000030BB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000030C2                 lea     rsi, aBase32hexExten ; "      --base32hex       extended hex al"...
.text:00000000000030C9                 mov     edx, 5          ; category
.text:00000000000030CE                 xor     edi, edi        ; domainname
.text:00000000000030D0                 call    _dcgettext
.text:00000000000030D5                 mov     rsi, rbx        ; stream
.text:00000000000030D8                 mov     rdi, rax        ; s
.text:00000000000030DB                 call    _fputs_unlocked
.text:00000000000030E0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000030E7                 lea     rsi, aBase16HexEncod ; "      --base16          hex encoding (R"...
.text:00000000000030EE                 mov     edx, 5          ; category
.text:00000000000030F3                 xor     edi, edi        ; domainname
.text:00000000000030F5                 call    _dcgettext
.text:00000000000030FA                 mov     rsi, rbx        ; stream
.text:00000000000030FD                 mov     rdi, rax        ; s
.text:0000000000003100                 call    _fputs_unlocked
.text:0000000000003105                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000310C                 lea     rsi, aBase2msbfBitSt ; "      --base2msbf       bit string with"...
.text:0000000000003113                 mov     edx, 5          ; category
.text:0000000000003118                 xor     edi, edi        ; domainname
.text:000000000000311A                 call    _dcgettext
.text:000000000000311F                 mov     rsi, rbx        ; stream
.text:0000000000003122                 mov     rdi, rax        ; s
.text:0000000000003125                 call    _fputs_unlocked
.text:000000000000312A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003131                 lea     rsi, aBase2lsbfBitSt ; "      --base2lsbf       bit string with"...
.text:0000000000003138                 mov     edx, 5          ; category
.text:000000000000313D                 xor     edi, edi        ; domainname
.text:000000000000313F                 call    _dcgettext
.text:0000000000003144                 mov     rsi, rbx        ; stream
.text:0000000000003147                 mov     rdi, rax        ; s
.text:000000000000314A                 call    _fputs_unlocked
.text:000000000000314F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003156                 lea     rsi, aDDecodeDecodeD ; "  -d, --decode          decode data\n  "...
.text:000000000000315D                 mov     edx, 5          ; category
.text:0000000000003162                 xor     edi, edi        ; domainname
.text:0000000000003164                 call    _dcgettext
.text:0000000000003169                 mov     rsi, rbx        ; stream
.text:000000000000316C                 mov     rdi, rax        ; s
.text:000000000000316F                 call    _fputs_unlocked
.text:0000000000003174                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000317B                 lea     rsi, aZ85Ascii85Like ; "      --z85             ascii85-like en"...
.text:0000000000003182                 mov     edx, 5          ; category
.text:0000000000003187                 xor     edi, edi        ; domainname
.text:0000000000003189                 call    _dcgettext
.text:000000000000318E                 mov     rsi, rbx        ; stream
.text:0000000000003191                 mov     rdi, rax        ; s
.text:0000000000003194                 call    _fputs_unlocked
.text:0000000000003199                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000031A0                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000031A7                 mov     edx, 5          ; category
.text:00000000000031AC                 xor     edi, edi        ; domainname
.text:00000000000031AE                 call    _dcgettext
.text:00000000000031B3                 mov     rsi, rbx        ; stream
.text:00000000000031B6                 mov     rdi, rax        ; s
.text:00000000000031B9                 call    _fputs_unlocked
.text:00000000000031BE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000031C5                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000031CC                 mov     edx, 5          ; category
.text:00000000000031D1                 xor     edi, edi        ; domainname
.text:00000000000031D3                 call    _dcgettext
.text:00000000000031D8                 mov     rsi, rbx        ; stream
.text:00000000000031DB                 mov     rdi, rax        ; s
.text:00000000000031DE                 call    _fputs_unlocked
.text:00000000000031E3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000031EA                 lea     rsi, aWhenDecodingTh ; "\nWhen decoding, the input may contain "...
.text:00000000000031F1                 mov     edx, 5          ; category
.text:00000000000031F6                 xor     edi, edi        ; domainname
.text:00000000000031F8                 call    _dcgettext
.text:00000000000031FD                 mov     rsi, rbx        ; stream
.text:0000000000003200                 mov     rdi, rax        ; s
.text:0000000000003203                 lea     rbx, aBasenc    ; "basenc"
.text:000000000000320A                 call    _fputs_unlocked
.text:000000000000320F                 lea     rax, asc_737A   ; "["
.text:0000000000003216                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000321D                 mov     [rsp+0A8h+var_48], 0
.text:0000000000003226                 mov     [rsp+0A8h+var_40], 0
.text:000000000000322F                 mov     rdx, rsp
.text:0000000000003232                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000003236                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000323D                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000003242                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000003249                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000324E                 lea     rax, domainname ; "coreutils"
.text:0000000000003255                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000325A                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000003261                 mov     [rsp+0A8h+var_98], rax
.text:0000000000003266                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000326D                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000003272                 mov     [rsp+0A8h+var_90], rax
.text:0000000000003277                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000327E                 mov     [rsp+0A8h+var_88], rax
.text:0000000000003283                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000328A                 mov     [rsp+0A8h+var_80], rax
.text:000000000000328F                 mov     [rsp+0A8h+var_70], rax
.text:0000000000003294                 mov     [rsp+0A8h+var_60], rax
.text:0000000000003299                 mov     [rsp+0A8h+var_50], rax
.text:000000000000329E                 xchg    ax, ax
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: usage+35D↓j
.text:00000000000032A0                 add     rdx, 10h
.text:00000000000032A4                 mov     rdi, [rdx]
.text:00000000000032A7                 test    rdi, rdi
.text:00000000000032AA                 jz      short loc_32BF
.text:00000000000032AC                 mov     ecx, 7
.text:00000000000032B1                 mov     rsi, rbx
.text:00000000000032B4                 repe cmpsb
.text:00000000000032B6                 setnbe  al
.text:00000000000032B9                 sbb     al, 0
.text:00000000000032BB                 test    al, al
.text:00000000000032BD                 jnz     short loc_32A0
.text:00000000000032BF
.text:00000000000032BF loc_32BF:                               ; CODE XREF: usage+34A↑j
.text:00000000000032BF                 mov     r12, [rdx+8]
.text:00000000000032C3                 xor     edi, edi        ; domainname
.text:00000000000032C5                 mov     edx, 5          ; category
.text:00000000000032CA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000032D1                 test    r12, r12
.text:00000000000032D4                 jz      loc_339B
.text:00000000000032DA                 call    _dcgettext
.text:00000000000032DF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000032E6                 lea     rdx, unk_73F0
.text:00000000000032ED                 mov     rsi, rax
.text:00000000000032F0                 mov     edi, 1
.text:00000000000032F5                 xor     eax, eax
.text:00000000000032F7                 call    ___printf_chk
.text:00000000000032FC                 xor     esi, esi        ; locale
.text:00000000000032FE                 mov     edi, 5          ; category
.text:0000000000003303                 call    _setlocale
.text:0000000000003308                 test    rax, rax
.text:000000000000330B                 jz      short loc_3329
.text:000000000000330D                 lea     rsi, s2         ; "en_"
.text:0000000000003314                 mov     edx, 3          ; n
.text:0000000000003319                 mov     rdi, rax        ; s1
.text:000000000000331C                 call    _strncmp
.text:0000000000003321                 test    eax, eax
.text:0000000000003323                 jnz     loc_3430
.text:0000000000003329
.text:0000000000003329 loc_3329:                               ; CODE XREF: usage+3AB↑j
.text:0000000000003329                                         ; usage+4F5↓j
.text:0000000000003329                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003330                 xor     edi, edi        ; domainname
.text:0000000000003332                 mov     edx, 5          ; category
.text:0000000000003337                 call    _dcgettext
.text:000000000000333C                 lea     rcx, aBasenc    ; "basenc"
.text:0000000000003343                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000334A                 mov     rsi, rax
.text:000000000000334D                 mov     edi, 1
.text:0000000000003352                 xor     eax, eax
.text:0000000000003354                 call    ___printf_chk
.text:0000000000003359                 cmp     r12, rbx
.text:000000000000335C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003363                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000336A                 cmovz   rbx, rcx
.text:000000000000336E
.text:000000000000336E loc_336E:                               ; CODE XREF: usage+4C4↓j
.text:000000000000336E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003375                 xor     edi, edi        ; domainname
.text:0000000000003377                 mov     edx, 5          ; category
.text:000000000000337C                 call    _dcgettext
.text:0000000000003381                 mov     rcx, rbx
.text:0000000000003384                 mov     rsi, rax
.text:0000000000003387                 mov     rdx, r12
.text:000000000000338A                 mov     edi, 1
.text:000000000000338F                 xor     eax, eax
.text:0000000000003391                 call    ___printf_chk
.text:0000000000003396                 jmp     loc_2FB6
.text:000000000000339B ; ---------------------------------------------------------------------------
.text:000000000000339B
.text:000000000000339B loc_339B:                               ; CODE XREF: usage+374↑j
.text:000000000000339B                 call    _dcgettext
.text:00000000000033A0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000033A7                 lea     rdx, unk_73F0
.text:00000000000033AE                 mov     rsi, rax
.text:00000000000033B1                 mov     edi, 1
.text:00000000000033B6                 xor     eax, eax
.text:00000000000033B8                 call    ___printf_chk
.text:00000000000033BD                 xor     esi, esi        ; locale
.text:00000000000033BF                 mov     edi, 5          ; category
.text:00000000000033C4                 call    _setlocale
.text:00000000000033C9                 test    rax, rax
.text:00000000000033CC                 jz      short loc_33E6
.text:00000000000033CE                 lea     rsi, s2         ; "en_"
.text:00000000000033D5                 mov     edx, 3          ; n
.text:00000000000033DA                 mov     rdi, rax        ; s1
.text:00000000000033DD                 call    _strncmp
.text:00000000000033E2                 test    eax, eax
.text:00000000000033E4                 jnz     short loc_3429
.text:00000000000033E6
.text:00000000000033E6 loc_33E6:                               ; CODE XREF: usage+46C↑j
.text:00000000000033E6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000033ED                 mov     edx, 5          ; category
.text:00000000000033F2                 xor     edi, edi        ; domainname
.text:00000000000033F4                 lea     r12, aBasenc    ; "basenc"
.text:00000000000033FB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003402                 call    _dcgettext
.text:0000000000003407                 lea     rcx, aBasenc    ; "basenc"
.text:000000000000340E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003415                 mov     rsi, rax
.text:0000000000003418                 mov     edi, 1
.text:000000000000341D                 xor     eax, eax
.text:000000000000341F                 call    ___printf_chk
.text:0000000000003424                 jmp     loc_336E
.text:0000000000003429 ; ---------------------------------------------------------------------------
.text:0000000000003429
.text:0000000000003429 loc_3429:                               ; CODE XREF: usage+484↑j
.text:0000000000003429                 lea     r12, aBasenc    ; "basenc"
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: usage+3C3↑j
.text:0000000000003430                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000003437                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000343E                 xor     edi, edi        ; domainname
.text:0000000000003440                 mov     edx, 5          ; category
.text:0000000000003445                 call    _dcgettext
.text:000000000000344A                 mov     rsi, r13        ; stream
.text:000000000000344D                 mov     rdi, rax        ; s
.text:0000000000003450                 call    _fputs_unlocked
.text:0000000000003455                 jmp     loc_3329
.text:0000000000003455 ; } // starts at 2F60
.text:0000000000003455 usage           endp
.text:0000000000003455
.text:0000000000003455 ; ---------------------------------------------------------------------------
.text:000000000000345A                 align 20h
.text:0000000000003460
.text:0000000000003460 ; =============== S U B R O U T I N E =======================================
.text:0000000000003460
.text:0000000000003460
.text:0000000000003460 decode_8        proc near               ; CODE XREF: base32_decode_ctx+E0↓p
.text:0000000000003460                                         ; base32_decode_ctx+159↓p
.text:0000000000003460 ; __unwind {
.text:0000000000003460                 xor     eax, eax
.text:0000000000003462                 cmp     rsi, 7
.text:0000000000003466                 jbe     locret_35D8
.text:000000000000346C                 movzx   r8d, byte ptr [rdi]
.text:0000000000003470                 lea     rsi, b32
.text:0000000000003477                 movzx   r8d, byte ptr [rsi+r8]
.text:000000000000347C                 test    r8b, r8b
.text:000000000000347F                 js      locret_35D8
.text:0000000000003485                 movzx   r9d, byte ptr [rdi+1]
.text:000000000000348A                 movzx   r9d, byte ptr [rsi+r9]
.text:000000000000348F                 test    r9b, r9b
.text:0000000000003492                 js      locret_35D8
.text:0000000000003498                 cmp     qword ptr [rcx], 0
.text:000000000000349C                 mov     rax, [rdx]
.text:000000000000349F                 jz      short loc_34BB
.text:00000000000034A1                 mov     r10d, r9d
.text:00000000000034A4                 shl     r8d, 3
.text:00000000000034A8                 add     rax, 1
.text:00000000000034AC                 sar     r10b, 2
.text:00000000000034B0                 or      r8d, r10d
.text:00000000000034B3                 mov     [rax-1], r8b
.text:00000000000034B7                 sub     qword ptr [rcx], 1
.text:00000000000034BB
.text:00000000000034BB loc_34BB:                               ; CODE XREF: decode_8+3F↑j
.text:00000000000034BB                 movzx   r8d, byte ptr [rdi+2]
.text:00000000000034C0                 cmp     r8b, 3Dh ; '='
.text:00000000000034C4                 jz      loc_35E0
.text:00000000000034CA                 movzx   r8d, byte ptr [rsi+r8]
.text:00000000000034CF                 test    r8b, r8b
.text:00000000000034D2                 js      loc_35E6
.text:00000000000034D8                 movzx   r10d, byte ptr [rdi+3]
.text:00000000000034DD                 movzx   r10d, byte ptr [rsi+r10]
.text:00000000000034E2                 test    r10b, r10b
.text:00000000000034E5                 js      loc_35E6
.text:00000000000034EB                 cmp     qword ptr [rcx], 0
.text:00000000000034EF                 jz      short loc_3511
.text:00000000000034F1                 add     r8d, r8d
.text:00000000000034F4                 shl     r9d, 6
.text:00000000000034F8                 add     rax, 1
.text:00000000000034FC                 or      r9d, r8d
.text:00000000000034FF                 mov     r8d, r10d
.text:0000000000003502                 sar     r8b, 4
.text:0000000000003506                 or      r9d, r8d
.text:0000000000003509                 mov     [rax-1], r9b
.text:000000000000350D                 sub     qword ptr [rcx], 1
.text:0000000000003511
.text:0000000000003511 loc_3511:                               ; CODE XREF: decode_8+8F↑j
.text:0000000000003511                 movzx   r8d, byte ptr [rdi+4]
.text:0000000000003516                 cmp     r8b, 3Dh ; '='
.text:000000000000351A                 jz      loc_35F6
.text:0000000000003520                 movzx   r8d, byte ptr [rsi+r8]
.text:0000000000003525                 test    r8b, r8b
.text:0000000000003528                 js      loc_35E6
.text:000000000000352E                 cmp     qword ptr [rcx], 0
.text:0000000000003532                 jz      short loc_354D
.text:0000000000003534                 mov     r9d, r8d
.text:0000000000003537                 shl     r10d, 4
.text:000000000000353B                 add     rax, 1
.text:000000000000353F                 sar     r9b, 1
.text:0000000000003542                 or      r10d, r9d
.text:0000000000003545                 mov     [rax-1], r10b
.text:0000000000003549                 sub     qword ptr [rcx], 1
.text:000000000000354D
.text:000000000000354D loc_354D:                               ; CODE XREF: decode_8+D2↑j
.text:000000000000354D                 movzx   r9d, byte ptr [rdi+5]
.text:0000000000003552                 cmp     r9b, 3Dh ; '='
.text:0000000000003556                 jz      loc_35FC
.text:000000000000355C                 movzx   r9d, byte ptr [rsi+r9]
.text:0000000000003561                 test    r9b, r9b
.text:0000000000003564                 js      loc_35E6
.text:000000000000356A                 movzx   r10d, byte ptr [rdi+6]
.text:000000000000356F                 movzx   r10d, byte ptr [rsi+r10]
.text:0000000000003574                 test    r10b, r10b
.text:0000000000003577                 js      short loc_35E6
.text:0000000000003579                 cmp     qword ptr [rcx], 0
.text:000000000000357D                 jz      short loc_35A0
.text:000000000000357F                 shl     r9d, 2
.text:0000000000003583                 shl     r8d, 7
.text:0000000000003587                 add     rax, 1
.text:000000000000358B                 or      r8d, r9d
.text:000000000000358E                 mov     r9d, r10d
.text:0000000000003591                 sar     r9b, 3
.text:0000000000003595                 or      r8d, r9d
.text:0000000000003598                 mov     [rax-1], r8b
.text:000000000000359C                 sub     qword ptr [rcx], 1
.text:00000000000035A0
.text:00000000000035A0 loc_35A0:                               ; CODE XREF: decode_8+11D↑j
.text:00000000000035A0                 movzx   edi, byte ptr [rdi+7]
.text:00000000000035A4                 cmp     dil, 3Dh ; '='
.text:00000000000035A8                 jz      short loc_35D0
.text:00000000000035AA                 movzx   esi, byte ptr [rsi+rdi]
.text:00000000000035AE                 test    sil, sil
.text:00000000000035B1                 js      short loc_35E6
.text:00000000000035B3                 cmp     qword ptr [rcx], 0
.text:00000000000035B7                 jz      short loc_35D0
.text:00000000000035B9                 shl     r10d, 5
.text:00000000000035BD                 add     rax, 1
.text:00000000000035C1                 or      r10d, esi
.text:00000000000035C4                 mov     [rax-1], r10b
.text:00000000000035C8                 sub     qword ptr [rcx], 1
.text:00000000000035CC                 nop     dword ptr [rax+00h]
.text:00000000000035D0
.text:00000000000035D0 loc_35D0:                               ; CODE XREF: decode_8+148↑j
.text:00000000000035D0                                         ; decode_8+157↑j ...
.text:00000000000035D0                 mov     [rdx], rax
.text:00000000000035D3                 mov     eax, 1
.text:00000000000035D8
.text:00000000000035D8 locret_35D8:                            ; CODE XREF: decode_8+6↑j
.text:00000000000035D8                                         ; decode_8+1F↑j ...
.text:00000000000035D8                 rep retn
.text:00000000000035D8 ; ---------------------------------------------------------------------------
.text:00000000000035DA                 align 20h
.text:00000000000035E0
.text:00000000000035E0 loc_35E0:                               ; CODE XREF: decode_8+64↑j
.text:00000000000035E0                 cmp     byte ptr [rdi+3], 3Dh ; '='
.text:00000000000035E4                 jz      short loc_35F0
.text:00000000000035E6
.text:00000000000035E6 loc_35E6:                               ; CODE XREF: decode_8+72↑j
.text:00000000000035E6                                         ; decode_8+85↑j ...
.text:00000000000035E6                 mov     [rdx], rax
.text:00000000000035E9                 xor     eax, eax
.text:00000000000035EB                 retn
.text:00000000000035EB ; ---------------------------------------------------------------------------
.text:00000000000035EC                 align 10h
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: decode_8+184↑j
.text:00000000000035F0                 cmp     byte ptr [rdi+4], 3Dh ; '='
.text:00000000000035F4                 jnz     short loc_35E6
.text:00000000000035F6
.text:00000000000035F6 loc_35F6:                               ; CODE XREF: decode_8+BA↑j
.text:00000000000035F6                 cmp     byte ptr [rdi+5], 3Dh ; '='
.text:00000000000035FA                 jnz     short loc_35E6
.text:00000000000035FC
.text:00000000000035FC loc_35FC:                               ; CODE XREF: decode_8+F6↑j
.text:00000000000035FC                 cmp     byte ptr [rdi+6], 3Dh ; '='
.text:0000000000003600                 jnz     short loc_35E6
.text:0000000000003602                 cmp     byte ptr [rdi+7], 3Dh ; '='
.text:0000000000003606                 jnz     short loc_35E6
.text:0000000000003608                 jmp     short loc_35D0
.text:0000000000003608 ; } // starts at 3460
.text:0000000000003608 decode_8        endp
.text:0000000000003608
.text:0000000000003608 ; ---------------------------------------------------------------------------
.text:000000000000360A                 align 10h
.text:0000000000003610
.text:0000000000003610 ; =============== S U B R O U T I N E =======================================
.text:0000000000003610
.text:0000000000003610
.text:0000000000003610                 public base32_encode
.text:0000000000003610 base32_encode   proc near               ; CODE XREF: base32hex_encode+C↑p
.text:0000000000003610                                         ; base32_encode_alloc+76↓p
.text:0000000000003610                                         ; DATA XREF: ...
.text:0000000000003610 ; __unwind {
.text:0000000000003610                 lea     r8, b32str_3066
.text:0000000000003617                 jmp     loc_373B
.text:0000000000003617 ; ---------------------------------------------------------------------------
.text:000000000000361C                 align 20h
.text:0000000000003620
.text:0000000000003620 loc_3620:                               ; CODE XREF: base32_encode+160↓j
.text:0000000000003620                 movzx   r9d, byte ptr [rdi+1]
.text:0000000000003625                 mov     r10d, r9d
.text:0000000000003628                 shr     r10b, 6
.text:000000000000362C                 add     eax, r10d
.text:000000000000362F                 and     eax, 1Fh
.text:0000000000003632                 cmp     rcx, 2
.text:0000000000003636                 movzx   eax, byte ptr [r8+rax]
.text:000000000000363B                 mov     [rdx+1], al
.text:000000000000363E                 jz      locret_37E5
.text:0000000000003644                 mov     eax, r9d
.text:0000000000003647                 shr     al, 1
.text:0000000000003649                 and     eax, 1Fh
.text:000000000000364C                 cmp     rcx, 3
.text:0000000000003650                 movzx   eax, byte ptr [r8+rax]
.text:0000000000003655                 mov     [rdx+2], al
.text:0000000000003658                 jz      locret_37E5
.text:000000000000365E                 shl     r9d, 4
.text:0000000000003662                 cmp     rsi, 2
.text:0000000000003666                 jz      loc_37D0
.text:000000000000366C                 movzx   eax, byte ptr [rdi+2]
.text:0000000000003670                 mov     r10d, eax
.text:0000000000003673                 shr     r10b, 4
.text:0000000000003677                 add     r9d, r10d
.text:000000000000367A                 and     r9d, 1Fh
.text:000000000000367E                 cmp     rcx, 4
.text:0000000000003682                 movzx   r9d, byte ptr [r8+r9]
.text:0000000000003687                 mov     [rdx+3], r9b
.text:000000000000368B                 jz      locret_37E5
.text:0000000000003691                 cmp     rsi, 3
.text:0000000000003695                 lea     r9d, [rax+rax]
.text:0000000000003699                 jz      loc_37F0
.text:000000000000369F                 movzx   eax, byte ptr [rdi+3]
.text:00000000000036A3                 mov     r10d, eax
.text:00000000000036A6                 shr     r10b, 7
.text:00000000000036AA                 add     r9d, r10d
.text:00000000000036AD                 and     r9d, 1Fh
.text:00000000000036B1                 cmp     rcx, 5
.text:00000000000036B5                 movzx   r9d, byte ptr [r8+r9]
.text:00000000000036BA                 mov     [rdx+4], r9b
.text:00000000000036BE                 jz      locret_37E5
.text:00000000000036C4                 mov     r9d, eax
.text:00000000000036C7                 shr     r9b, 2
.text:00000000000036CB                 and     r9d, 1Fh
.text:00000000000036CF                 cmp     rcx, 6
.text:00000000000036D3                 movzx   r9d, byte ptr [r8+r9]
.text:00000000000036D8                 mov     [rdx+5], r9b
.text:00000000000036DC                 jz      locret_37E5
.text:00000000000036E2                 shl     eax, 3
.text:00000000000036E5                 cmp     rsi, 4
.text:00000000000036E9                 jz      loc_3808
.text:00000000000036EF                 movzx   r9d, byte ptr [rdi+4]
.text:00000000000036F4                 mov     r10d, r9d
.text:00000000000036F7                 shr     r10b, 5
.text:00000000000036FB                 add     eax, r10d
.text:00000000000036FE                 and     eax, 1Fh
.text:0000000000003701                 cmp     rcx, 7
.text:0000000000003705                 movzx   eax, byte ptr [r8+rax]
.text:000000000000370A                 mov     [rdx+6], al
.text:000000000000370D                 jz      locret_37E5
.text:0000000000003713                 and     r9d, 1Fh
.text:0000000000003717                 cmp     rcx, 8
.text:000000000000371B                 movzx   eax, byte ptr [r8+r9]
.text:0000000000003720                 mov     [rdx+7], al
.text:0000000000003723                 jz      locret_37E5
.text:0000000000003729                 sub     rsi, 5
.text:000000000000372D                 jz      short loc_3733
.text:000000000000372F                 add     rdi, 5
.text:0000000000003733
.text:0000000000003733 loc_3733:                               ; CODE XREF: base32_encode+11D↑j
.text:0000000000003733                                         ; base32_encode+1B5↓j
.text:0000000000003733                 add     rdx, 8
.text:0000000000003737                 sub     rcx, 8
.text:000000000000373B
.text:000000000000373B loc_373B:                               ; CODE XREF: base32_encode+7↑j
.text:000000000000373B                 test    rsi, rsi
.text:000000000000373E                 jz      loc_3820
.text:0000000000003744                 test    rcx, rcx
.text:0000000000003747                 jz      loc_3820
.text:000000000000374D                 movzx   eax, byte ptr [rdi]
.text:0000000000003750                 mov     r9d, eax
.text:0000000000003753                 shr     r9b, 3
.text:0000000000003757                 and     r9d, 1Fh
.text:000000000000375B                 cmp     rcx, 1
.text:000000000000375F                 movzx   r9d, byte ptr [r8+r9]
.text:0000000000003764                 mov     [rdx], r9b
.text:0000000000003767                 jz      short locret_37E5
.text:0000000000003769                 shl     eax, 2
.text:000000000000376C                 cmp     rsi, 1
.text:0000000000003770                 jnz     loc_3620
.text:0000000000003776                 and     eax, 1Ch
.text:0000000000003779                 cmp     rcx, 2
.text:000000000000377D                 movzx   eax, byte ptr [r8+rax]
.text:0000000000003782                 mov     [rdx+1], al
.text:0000000000003785                 jz      short locret_37E5
.text:0000000000003787                 cmp     rcx, 3
.text:000000000000378B                 mov     byte ptr [rdx+2], 3Dh ; '='
.text:000000000000378F                 jz      short locret_37E5
.text:0000000000003791                 cmp     rcx, 4
.text:0000000000003795                 mov     byte ptr [rdx+3], 3Dh ; '='
.text:0000000000003799                 jz      short locret_37E5
.text:000000000000379B
.text:000000000000379B loc_379B:                               ; CODE XREF: base32_encode+1D3↓j
.text:000000000000379B                 cmp     rcx, 5
.text:000000000000379F                 mov     byte ptr [rdx+4], 3Dh ; '='
.text:00000000000037A3                 jz      short locret_37E5
.text:00000000000037A5
.text:00000000000037A5 loc_37A5:                               ; CODE XREF: base32_encode+1F0↓j
.text:00000000000037A5                 cmp     rcx, 6
.text:00000000000037A9                 mov     byte ptr [rdx+5], 3Dh ; '='
.text:00000000000037AD                 jz      short locret_37E5
.text:00000000000037AF                 cmp     rcx, 7
.text:00000000000037B3                 mov     byte ptr [rdx+6], 3Dh ; '='
.text:00000000000037B7                 jz      short locret_37E5
.text:00000000000037B9
.text:00000000000037B9 loc_37B9:                               ; CODE XREF: base32_encode+209↓j
.text:00000000000037B9                 cmp     rcx, 8
.text:00000000000037BD                 mov     byte ptr [rdx+7], 3Dh ; '='
.text:00000000000037C1                 jz      short locret_37E5
.text:00000000000037C3                 xor     esi, esi
.text:00000000000037C5                 jmp     loc_3733
.text:00000000000037C5 ; ---------------------------------------------------------------------------
.text:00000000000037CA                 align 10h
.text:00000000000037D0
.text:00000000000037D0 loc_37D0:                               ; CODE XREF: base32_encode+56↑j
.text:00000000000037D0                 and     r9d, 1Fh
.text:00000000000037D4                 cmp     rcx, 4
.text:00000000000037D8                 movsxd  r9, r9d
.text:00000000000037DB                 movzx   eax, byte ptr [r8+r9]
.text:00000000000037E0                 mov     [rdx+3], al
.text:00000000000037E3                 jnz     short loc_379B
.text:00000000000037E5
.text:00000000000037E5 locret_37E5:                            ; CODE XREF: base32_encode+2E↑j
.text:00000000000037E5                                         ; base32_encode+48↑j ...
.text:00000000000037E5                 retn
.text:00000000000037E5 ; ---------------------------------------------------------------------------
.text:00000000000037E6                 align 10h
.text:00000000000037F0
.text:00000000000037F0 loc_37F0:                               ; CODE XREF: base32_encode+89↑j
.text:00000000000037F0                 and     r9d, 1Eh
.text:00000000000037F4                 cmp     rcx, 5
.text:00000000000037F8                 movzx   eax, byte ptr [r8+r9]
.text:00000000000037FD                 mov     [rdx+4], al
.text:0000000000003800                 jnz     short loc_37A5
.text:0000000000003802                 rep retn
.text:0000000000003802 ; ---------------------------------------------------------------------------
.text:0000000000003804                 align 8
.text:0000000000003808
.text:0000000000003808 loc_3808:                               ; CODE XREF: base32_encode+D9↑j
.text:0000000000003808                 and     eax, 18h
.text:000000000000380B                 cmp     rcx, 7
.text:000000000000380F                 movzx   eax, byte ptr [r8+rax]
.text:0000000000003814                 mov     [rdx+6], al
.text:0000000000003817                 jz      short locret_37E5
.text:0000000000003819                 jmp     short loc_37B9
.text:0000000000003819 ; ---------------------------------------------------------------------------
.text:000000000000381B                 align 20h
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: base32_encode+12E↑j
.text:0000000000003820                                         ; base32_encode+137↑j
.text:0000000000003820                 test    rcx, rcx
.text:0000000000003823                 jz      short locret_37E5
.text:0000000000003825                 mov     byte ptr [rdx], 0
.text:0000000000003828                 retn
.text:0000000000003828 ; } // starts at 3610
.text:0000000000003828 base32_encode   endp
.text:0000000000003828
.text:0000000000003828 ; ---------------------------------------------------------------------------
.text:0000000000003829                 align 10h
.text:0000000000003830
.text:0000000000003830 ; =============== S U B R O U T I N E =======================================
.text:0000000000003830
.text:0000000000003830
.text:0000000000003830                 public base32_encode_alloc
.text:0000000000003830 base32_encode_alloc proc near
.text:0000000000003830 ; __unwind {
.text:0000000000003830                 push    r14
.text:0000000000003832                 push    r13
.text:0000000000003834                 mov     r13, rdx
.text:0000000000003837                 lea     rdx, [rsi+4]
.text:000000000000383B                 push    r12
.text:000000000000383D                 push    rbp
.text:000000000000383E                 push    rbx
.text:000000000000383F                 mov     rbx, 0CCCCCCCCCCCCCCCDh
.text:0000000000003849                 mov     rax, rdx
.text:000000000000384C                 mul     rbx
.text:000000000000384F                 shr     rdx, 2
.text:0000000000003853                 lea     rbx, ds:0[rdx*8]
.text:000000000000385B                 lea     rbp, [rbx+1]
.text:000000000000385F                 cmp     rsi, rbp
.text:0000000000003862                 jbe     short loc_3880
.text:0000000000003864                 mov     qword ptr [r13+0], 0
.text:000000000000386C                 xor     ebp, ebp
.text:000000000000386E
.text:000000000000386E loc_386E:                               ; CODE XREF: base32_encode_alloc+65↓j
.text:000000000000386E                 pop     rbx
.text:000000000000386F                 mov     rax, rbp
.text:0000000000003872                 pop     rbp
.text:0000000000003873                 pop     r12
.text:0000000000003875                 pop     r13
.text:0000000000003877                 pop     r14
.text:0000000000003879                 retn
.text:0000000000003879 ; ---------------------------------------------------------------------------
.text:000000000000387A                 align 20h
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: base32_encode_alloc+32↑j
.text:0000000000003880                 mov     r14, rdi
.text:0000000000003883                 mov     rdi, rbp        ; size
.text:0000000000003886                 mov     r12, rsi
.text:0000000000003889                 call    _malloc
.text:000000000000388E                 test    rax, rax
.text:0000000000003891                 mov     [r13+0], rax
.text:0000000000003895                 jz      short loc_386E
.text:0000000000003897                 mov     rcx, rbp
.text:000000000000389A                 mov     rdx, rax
.text:000000000000389D                 mov     rbp, rbx
.text:00000000000038A0                 mov     rsi, r12
.text:00000000000038A3                 mov     rdi, r14
.text:00000000000038A6                 call    base32_encode
.text:00000000000038AB                 pop     rbx
.text:00000000000038AC                 mov     rax, rbp
.text:00000000000038AF                 pop     rbp
.text:00000000000038B0                 pop     r12
.text:00000000000038B2                 pop     r13
.text:00000000000038B4                 pop     r14
.text:00000000000038B6                 retn
.text:00000000000038B6 ; } // starts at 3830
.text:00000000000038B6 base32_encode_alloc endp
.text:00000000000038B6
.text:00000000000038B6 ; ---------------------------------------------------------------------------
.text:00000000000038B7                 align 20h
.text:00000000000038C0
.text:00000000000038C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038C0
.text:00000000000038C0
.text:00000000000038C0                 public isbase32
.text:00000000000038C0 isbase32        proc near               ; DATA XREF: main+51E↑o
.text:00000000000038C0 ; __unwind {
.text:00000000000038C0                 lea     rax, b32
.text:00000000000038C7                 movzx   edi, dil
.text:00000000000038CB                 movzx   eax, byte ptr [rax+rdi]
.text:00000000000038CF                 not     eax
.text:00000000000038D1                 shr     al, 7
.text:00000000000038D4                 retn
.text:00000000000038D4 ; } // starts at 38C0
.text:00000000000038D4 isbase32        endp
.text:00000000000038D4
.text:00000000000038D4 ; ---------------------------------------------------------------------------
.text:00000000000038D5                 align 20h
.text:00000000000038E0
.text:00000000000038E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038E0
.text:00000000000038E0
.text:00000000000038E0                 public base32_decode_ctx_init
.text:00000000000038E0 base32_decode_ctx_init proc near        ; CODE XREF: base32hex_decode_ctx_init_wrapper+8↑p
.text:00000000000038E0                                         ; base32_decode_ctx_init_wrapper+4↑j
.text:00000000000038E0 ; __unwind {
.text:00000000000038E0                 mov     dword ptr [rdi], 0
.text:00000000000038E6                 retn
.text:00000000000038E6 ; } // starts at 38E0
.text:00000000000038E6 base32_decode_ctx_init endp
.text:00000000000038E6
.text:00000000000038E6 ; ---------------------------------------------------------------------------
.text:00000000000038E7                 align 10h
.text:00000000000038F0
.text:00000000000038F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038F0
.text:00000000000038F0
.text:00000000000038F0                 public base32_decode_ctx
.text:00000000000038F0 base32_decode_ctx proc near             ; CODE XREF: base32_decode_ctx_wrapper+8↑p
.text:00000000000038F0                                         ; base32hex_decode_ctx_wrapper+79↑p ...
.text:00000000000038F0
.text:00000000000038F0 var_62          = byte ptr -62h
.text:00000000000038F0 var_61          = byte ptr -61h
.text:00000000000038F0 var_60          = qword ptr -60h
.text:00000000000038F0 var_58          = qword ptr -58h
.text:00000000000038F0 var_50          = qword ptr -50h
.text:00000000000038F0 var_48          = qword ptr -48h
.text:00000000000038F0 var_40          = qword ptr -40h
.text:00000000000038F0
.text:00000000000038F0 ; __unwind {
.text:00000000000038F0                 push    r15
.text:00000000000038F2                 push    r14
.text:00000000000038F4                 mov     r11, rdx
.text:00000000000038F7                 push    r13
.text:00000000000038F9                 push    r12
.text:00000000000038FB                 mov     r14, rdi
.text:00000000000038FE                 push    rbp
.text:00000000000038FF                 push    rbx
.text:0000000000003900                 mov     r12, rsi
.text:0000000000003903                 sub     rsp, 38h
.text:0000000000003907                 mov     r15, [r8]
.text:000000000000390A                 mov     rbx, fs:28h
.text:0000000000003913                 mov     [rsp+68h+var_40], rbx
.text:0000000000003918                 xor     ebx, ebx
.text:000000000000391A                 test    rdi, rdi
.text:000000000000391D                 mov     [rsp+68h+var_50], rcx
.text:0000000000003922                 mov     [rsp+68h+var_58], r8
.text:0000000000003927                 mov     [rsp+68h+var_48], r15
.text:000000000000392C                 setnz   [rsp+68h+var_61]
.text:0000000000003931                 jz      loc_3B60
.text:0000000000003937                 test    rdx, rdx
.text:000000000000393A                 mov     edx, [rdi]
.text:000000000000393C                 setnz   [rsp+68h+var_62]
.text:0000000000003941                 movzx   eax, [rsp+68h+var_62]
.text:0000000000003946                 test    edx, edx
.text:0000000000003948                 setz    r13b
.text:000000000000394C                 and     r13d, eax
.text:000000000000394F
.text:000000000000394F loc_394F:                               ; CODE XREF: base32_decode_ctx+27B↓j
.text:000000000000394F                 lea     rax, [r14+4]
.text:0000000000003953                 lea     rbp, [rsp+68h+var_48]
.text:0000000000003958                 lea     rbx, [rsp+68h+var_50]
.text:000000000000395D                 mov     [rsp+68h+var_60], rax
.text:0000000000003962
.text:0000000000003962 loc_3962:                               ; CODE XREF: base32_decode_ctx+250↓j
.text:0000000000003962                 test    r13b, r13b
.text:0000000000003965                 mov     rdx, r15
.text:0000000000003968                 jnz     loc_3A3D
.text:000000000000396E
.text:000000000000396E loc_396E:                               ; CODE XREF: base32_decode_ctx+167↓j
.text:000000000000396E                 test    r11, r11
.text:0000000000003971                 setz    al
.text:0000000000003974                 and     al, [rsp+68h+var_62]
.text:0000000000003978                 jnz     loc_3A00
.text:000000000000397E
.text:000000000000397E loc_397E:                               ; CODE XREF: base32_decode_ctx+10A↓j
.text:000000000000397E                 test    r11, r11
.text:0000000000003981                 jz      loc_3A60
.text:0000000000003987                 cmp     byte ptr [r12], 0Ah
.text:000000000000398C                 jz      loc_3B30
.text:0000000000003992                 sub     rdx, r15
.text:0000000000003995                 add     [rsp+68h+var_50], rdx
.text:000000000000399A                 test    r14, r14
.text:000000000000399D                 mov     [rsp+68h+var_48], r15
.text:00000000000039A2                 lea     r15, [r12+r11]
.text:00000000000039A6                 jnz     loc_3A79
.text:00000000000039AC
.text:00000000000039AC loc_39AC:                               ; CODE XREF: base32_decode_ctx+269↓j
.text:00000000000039AC                 mov     rdi, r12
.text:00000000000039AF
.text:00000000000039AF loc_39AF:                               ; CODE XREF: base32_decode_ctx+1D1↓j
.text:00000000000039AF                                         ; base32_decode_ctx+230↓j
.text:00000000000039AF                 cmp     r11, 7
.text:00000000000039B3                 ja      short loc_39C7
.text:00000000000039B5                 cmp     [rsp+68h+var_61], 0
.text:00000000000039BA                 jz      short loc_39C7
.text:00000000000039BC                 cmp     [rsp+68h+var_62], 0
.text:00000000000039C1                 jnz     loc_3AC7
.text:00000000000039C7
.text:00000000000039C7 loc_39C7:                               ; CODE XREF: base32_decode_ctx+C3↑j
.text:00000000000039C7                                         ; base32_decode_ctx+CA↑j ...
.text:00000000000039C7                 mov     rcx, rbp
.text:00000000000039CA                 mov     rdx, rbx
.text:00000000000039CD                 mov     rsi, r11
.text:00000000000039D0                 call    decode_8
.text:00000000000039D5                 test    al, al
.text:00000000000039D7                 jz      loc_3B8F
.text:00000000000039DD                 mov     r11, r15
.text:00000000000039E0                 mov     r15, [rsp+68h+var_48]
.text:00000000000039E5                 sub     r11, r12
.text:00000000000039E8                 test    r13b, r13b
.text:00000000000039EB                 mov     rdx, r15
.text:00000000000039EE                 jnz     short loc_3A3D
.text:00000000000039F0                 test    r11, r11
.text:00000000000039F3                 setz    al
.text:00000000000039F6                 and     al, [rsp+68h+var_62]
.text:00000000000039FA                 jz      short loc_397E
.text:00000000000039FC                 nop     dword ptr [rax+00h]
.text:0000000000003A00
.text:0000000000003A00 loc_3A00:                               ; CODE XREF: base32_decode_ctx+88↑j
.text:0000000000003A00                                         ; base32_decode_ctx+1E1↓j ...
.text:0000000000003A00                 mov     rbx, [rsp+68h+var_58]
.text:0000000000003A05                 sub     [rbx], rdx
.text:0000000000003A08                 mov     rbx, [rsp+68h+var_40]
.text:0000000000003A0D                 xor     rbx, fs:28h
.text:0000000000003A16                 jnz     loc_3B99
.text:0000000000003A1C                 add     rsp, 38h
.text:0000000000003A20                 pop     rbx
.text:0000000000003A21                 pop     rbp
.text:0000000000003A22                 pop     r12
.text:0000000000003A24                 pop     r13
.text:0000000000003A26                 pop     r14
.text:0000000000003A28                 pop     r15
.text:0000000000003A2A                 retn
.text:0000000000003A2A ; ---------------------------------------------------------------------------
.text:0000000000003A2B                 align 10h
.text:0000000000003A30
.text:0000000000003A30 loc_3A30:                               ; CODE XREF: base32_decode_ctx+160↓j
.text:0000000000003A30                 mov     r15, [rsp+68h+var_48]
.text:0000000000003A35                 add     r12, 8
.text:0000000000003A39                 sub     r11, 8
.text:0000000000003A3D
.text:0000000000003A3D loc_3A3D:                               ; CODE XREF: base32_decode_ctx+78↑j
.text:0000000000003A3D                                         ; base32_decode_ctx+FE↑j
.text:0000000000003A3D                 mov     rcx, rbp
.text:0000000000003A40                 mov     rdx, rbx
.text:0000000000003A43                 mov     rsi, r11
.text:0000000000003A46                 mov     rdi, r12
.text:0000000000003A49                 call    decode_8
.text:0000000000003A4E                 test    al, al
.text:0000000000003A50                 jnz     short loc_3A30
.text:0000000000003A52                 mov     rdx, [rsp+68h+var_48]
.text:0000000000003A57                 jmp     loc_396E
.text:0000000000003A57 ; ---------------------------------------------------------------------------
.text:0000000000003A5C                 align 20h
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: base32_decode_ctx+91↑j
.text:0000000000003A60                 sub     rdx, r15
.text:0000000000003A63                 add     [rsp+68h+var_50], rdx
.text:0000000000003A68                 test    r14, r14
.text:0000000000003A6B                 mov     [rsp+68h+var_48], r15
.text:0000000000003A70                 jz      loc_3B70
.text:0000000000003A76                 mov     r15, r12
.text:0000000000003A79
.text:0000000000003A79 loc_3A79:                               ; CODE XREF: base32_decode_ctx+B6↑j
.text:0000000000003A79                 mov     eax, [r14]
.text:0000000000003A7C                 cmp     eax, 8
.text:0000000000003A7F                 jz      short loc_3AE0
.text:0000000000003A81                 test    eax, eax
.text:0000000000003A83                 jz      short loc_3AE7
.text:0000000000003A85
.text:0000000000003A85 loc_3A85:                               ; CODE XREF: base32_decode_ctx+217↓j
.text:0000000000003A85                 cmp     r12, r15
.text:0000000000003A88                 jnb     short loc_3AB6
.text:0000000000003A8A                 nop     word ptr [rax+rax+00h]
.text:0000000000003A90
.text:0000000000003A90 loc_3A90:                               ; CODE XREF: base32_decode_ctx+1C4↓j
.text:0000000000003A90                 add     r12, 1
.text:0000000000003A94                 movzx   edx, byte ptr [r12-1]
.text:0000000000003A9A                 cmp     dl, 0Ah
.text:0000000000003A9D                 jz      short loc_3AB1
.text:0000000000003A9F                 lea     ecx, [rax+1]
.text:0000000000003AA2                 cmp     ecx, 8
.text:0000000000003AA5                 mov     [r14], ecx
.text:0000000000003AA8                 mov     [r14+rax+4], dl
.text:0000000000003AAD                 jz      short loc_3B10
.text:0000000000003AAF                 mov     eax, ecx
.text:0000000000003AB1
.text:0000000000003AB1 loc_3AB1:                               ; CODE XREF: base32_decode_ctx+1AD↑j
.text:0000000000003AB1                 cmp     r12, r15
.text:0000000000003AB4                 jnz     short loc_3A90
.text:0000000000003AB6
.text:0000000000003AB6 loc_3AB6:                               ; CODE XREF: base32_decode_ctx+198↑j
.text:0000000000003AB6                 mov     r11d, eax
.text:0000000000003AB9                 mov     rdi, [rsp+68h+var_60]
.text:0000000000003ABE                 test    r11, r11
.text:0000000000003AC1                 jnz     loc_39AF
.text:0000000000003AC7
.text:0000000000003AC7 loc_3AC7:                               ; CODE XREF: base32_decode_ctx+D1↑j
.text:0000000000003AC7                                         ; base32_decode_ctx+236↓j
.text:0000000000003AC7                 mov     rdx, [rsp+68h+var_48]
.text:0000000000003ACC                 mov     eax, 1
.text:0000000000003AD1                 jmp     loc_3A00
.text:0000000000003AD1 ; ---------------------------------------------------------------------------
.text:0000000000003AD6                 align 20h
.text:0000000000003AE0
.text:0000000000003AE0 loc_3AE0:                               ; CODE XREF: base32_decode_ctx+18F↑j
.text:0000000000003AE0                 mov     dword ptr [r14], 0
.text:0000000000003AE7
.text:0000000000003AE7 loc_3AE7:                               ; CODE XREF: base32_decode_ctx+193↑j
.text:0000000000003AE7                 cmp     r11, 7
.text:0000000000003AEB                 jle     short loc_3B04
.text:0000000000003AED                 mov     edx, 8          ; n
.text:0000000000003AF2                 mov     esi, 0Ah        ; c
.text:0000000000003AF7                 mov     rdi, r12        ; s
.text:0000000000003AFA                 call    _memchr
.text:0000000000003AFF                 test    rax, rax
.text:0000000000003B02                 jz      short loc_3B7D
.text:0000000000003B04
.text:0000000000003B04 loc_3B04:                               ; CODE XREF: base32_decode_ctx+1FB↑j
.text:0000000000003B04                 mov     eax, [r14]
.text:0000000000003B07                 jmp     loc_3A85
.text:0000000000003B07 ; ---------------------------------------------------------------------------
.text:0000000000003B0C                 align 10h
.text:0000000000003B10
.text:0000000000003B10 loc_3B10:                               ; CODE XREF: base32_decode_ctx+1BD↑j
.text:0000000000003B10                 mov     eax, 8
.text:0000000000003B15                 mov     rdi, [rsp+68h+var_60]
.text:0000000000003B1A                 mov     r11d, eax
.text:0000000000003B1D                 test    r11, r11
.text:0000000000003B20                 jnz     loc_39AF
.text:0000000000003B26                 jmp     short loc_3AC7
.text:0000000000003B26 ; ---------------------------------------------------------------------------
.text:0000000000003B28                 align 10h
.text:0000000000003B30
.text:0000000000003B30 loc_3B30:                               ; CODE XREF: base32_decode_ctx+9C↑j
.text:0000000000003B30                 test    r14, r14
.text:0000000000003B33                 jz      short loc_3B48
.text:0000000000003B35                 add     r12, 1
.text:0000000000003B39                 sub     r11, 1
.text:0000000000003B3D                 mov     r15, rdx
.text:0000000000003B40                 jmp     loc_3962
.text:0000000000003B40 ; ---------------------------------------------------------------------------
.text:0000000000003B45                 align 8
.text:0000000000003B48
.text:0000000000003B48 loc_3B48:                               ; CODE XREF: base32_decode_ctx+243↑j
.text:0000000000003B48                 sub     rdx, r15
.text:0000000000003B4B                 mov     [rsp+68h+var_48], r15
.text:0000000000003B50                 add     [rsp+68h+var_50], rdx
.text:0000000000003B55                 lea     r15, [r12+r11]
.text:0000000000003B59                 jmp     loc_39AC
.text:0000000000003B59 ; ---------------------------------------------------------------------------
.text:0000000000003B5E                 align 20h
.text:0000000000003B60
.text:0000000000003B60 loc_3B60:                               ; CODE XREF: base32_decode_ctx+41↑j
.text:0000000000003B60                 mov     r13d, 1
.text:0000000000003B66                 mov     [rsp+68h+var_62], 1
.text:0000000000003B6B                 jmp     loc_394F
.text:0000000000003B70 ; ---------------------------------------------------------------------------
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: base32_decode_ctx+180↑j
.text:0000000000003B70                 mov     rdx, r15
.text:0000000000003B73                 mov     eax, 1
.text:0000000000003B78                 jmp     loc_3A00
.text:0000000000003B7D ; ---------------------------------------------------------------------------
.text:0000000000003B7D
.text:0000000000003B7D loc_3B7D:                               ; CODE XREF: base32_decode_ctx+212↑j
.text:0000000000003B7D                 mov     rdi, r12
.text:0000000000003B80                 mov     r11d, 8
.text:0000000000003B86                 add     r12, 8
.text:0000000000003B8A                 jmp     loc_39C7
.text:0000000000003B8F ; ---------------------------------------------------------------------------
.text:0000000000003B8F
.text:0000000000003B8F loc_3B8F:                               ; CODE XREF: base32_decode_ctx+E7↑j
.text:0000000000003B8F                 mov     rdx, [rsp+68h+var_48]
.text:0000000000003B94                 jmp     loc_3A00
.text:0000000000003B99 ; ---------------------------------------------------------------------------
.text:0000000000003B99
.text:0000000000003B99 loc_3B99:                               ; CODE XREF: base32_decode_ctx+126↑j
.text:0000000000003B99                 call    ___stack_chk_fail
.text:0000000000003B99 ; } // starts at 38F0
.text:0000000000003B99 base32_decode_ctx endp
.text:0000000000003B99
.text:0000000000003B99 ; ---------------------------------------------------------------------------
.text:0000000000003B9E                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BA0
.text:0000000000003BA0
.text:0000000000003BA0                 public base32_decode_alloc_ctx
.text:0000000000003BA0 base32_decode_alloc_ctx proc near
.text:0000000000003BA0
.text:0000000000003BA0 var_39          = byte ptr -39h
.text:0000000000003BA0 var_38          = qword ptr -38h
.text:0000000000003BA0 var_30          = qword ptr -30h
.text:0000000000003BA0
.text:0000000000003BA0 ; __unwind {
.text:0000000000003BA0                 push    r14
.text:0000000000003BA2                 push    r13
.text:0000000000003BA4                 mov     r14, rdx
.text:0000000000003BA7                 push    r12
.text:0000000000003BA9                 push    rbp
.text:0000000000003BAA                 mov     r12, rdi
.text:0000000000003BAD                 push    rbx
.text:0000000000003BAE                 mov     r13, rsi
.text:0000000000003BB1                 mov     rbx, rcx
.text:0000000000003BB4                 mov     rbp, r8
.text:0000000000003BB7                 sub     rsp, 20h
.text:0000000000003BBB                 mov     rax, fs:28h
.text:0000000000003BC4                 mov     [rsp+48h+var_30], rax
.text:0000000000003BC9                 xor     eax, eax
.text:0000000000003BCB                 mov     rax, rdx
.text:0000000000003BCE                 shr     rax, 3
.text:0000000000003BD2                 lea     rdi, [rax+rax*4+5] ; size
.text:0000000000003BD7                 mov     [rsp+48h+var_38], rdi
.text:0000000000003BDC                 call    _malloc
.text:0000000000003BE1                 test    rax, rax
.text:0000000000003BE4                 mov     [rbx], rax
.text:0000000000003BE7                 jz      short loc_3C18
.text:0000000000003BE9                 lea     r8, [rsp+48h+var_38]
.text:0000000000003BEE                 mov     rcx, rax
.text:0000000000003BF1                 mov     rdx, r14
.text:0000000000003BF4                 mov     rsi, r13
.text:0000000000003BF7                 mov     rdi, r12
.text:0000000000003BFA                 call    base32_decode_ctx
.text:0000000000003BFF                 test    al, al
.text:0000000000003C01                 jz      short loc_3C40
.text:0000000000003C03                 test    rbp, rbp
.text:0000000000003C06                 jz      short loc_3C18
.text:0000000000003C08                 mov     rdx, [rsp+48h+var_38]
.text:0000000000003C0D                 mov     [rbp+0], rdx
.text:0000000000003C11                 jmp     short loc_3C1D
.text:0000000000003C11 ; ---------------------------------------------------------------------------
.text:0000000000003C13                 align 8
.text:0000000000003C18
.text:0000000000003C18 loc_3C18:                               ; CODE XREF: base32_decode_alloc_ctx+47↑j
.text:0000000000003C18                                         ; base32_decode_alloc_ctx+66↑j
.text:0000000000003C18                 mov     eax, 1
.text:0000000000003C1D
.text:0000000000003C1D loc_3C1D:                               ; CODE XREF: base32_decode_alloc_ctx+71↑j
.text:0000000000003C1D                                         ; base32_decode_alloc_ctx+B8↓j
.text:0000000000003C1D                 mov     rcx, [rsp+48h+var_30]
.text:0000000000003C22                 xor     rcx, fs:28h
.text:0000000000003C2B                 jnz     short loc_3C5A
.text:0000000000003C2D                 add     rsp, 20h
.text:0000000000003C31                 pop     rbx
.text:0000000000003C32                 pop     rbp
.text:0000000000003C33                 pop     r12
.text:0000000000003C35                 pop     r13
.text:0000000000003C37                 pop     r14
.text:0000000000003C39                 retn
.text:0000000000003C39 ; ---------------------------------------------------------------------------
.text:0000000000003C3A                 align 20h
.text:0000000000003C40
.text:0000000000003C40 loc_3C40:                               ; CODE XREF: base32_decode_alloc_ctx+61↑j
.text:0000000000003C40                 mov     rdi, [rbx]      ; ptr
.text:0000000000003C43                 mov     [rsp+48h+var_39], al
.text:0000000000003C47                 call    _free
.text:0000000000003C4C                 mov     qword ptr [rbx], 0
.text:0000000000003C53                 movzx   eax, [rsp+48h+var_39]
.text:0000000000003C58                 jmp     short loc_3C1D
.text:0000000000003C5A ; ---------------------------------------------------------------------------
.text:0000000000003C5A
.text:0000000000003C5A loc_3C5A:                               ; CODE XREF: base32_decode_alloc_ctx+8B↑j
.text:0000000000003C5A                 call    ___stack_chk_fail
.text:0000000000003C5A ; } // starts at 3BA0
.text:0000000000003C5A base32_decode_alloc_ctx endp
.text:0000000000003C5A
.text:0000000000003C5A ; ---------------------------------------------------------------------------
.text:0000000000003C5F                 align 20h
.text:0000000000003C60
.text:0000000000003C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C60
.text:0000000000003C60
.text:0000000000003C60 decode_4        proc near               ; CODE XREF: base64_decode_ctx+E4↓p
.text:0000000000003C60                                         ; base64_decode_ctx+161↓p
.text:0000000000003C60 ; __unwind {
.text:0000000000003C60                 xor     eax, eax
.text:0000000000003C62                 cmp     rsi, 1
.text:0000000000003C66                 jbe     locret_3CF9
.text:0000000000003C6C                 movzx   r8d, byte ptr [rdi]
.text:0000000000003C70                 lea     r9, b64
.text:0000000000003C77                 movzx   r8d, byte ptr [r9+r8]
.text:0000000000003C7C                 test    r8b, r8b
.text:0000000000003C7F                 js      short locret_3CF9
.text:0000000000003C81                 movzx   r10d, byte ptr [rdi+1]
.text:0000000000003C86                 movzx   r10d, byte ptr [r9+r10]
.text:0000000000003C8B                 test    r10b, r10b
.text:0000000000003C8E                 js      short locret_3CF9
.text:0000000000003C90                 cmp     qword ptr [rcx], 0
.text:0000000000003C94                 mov     rax, [rdx]
.text:0000000000003C97                 jnz     short loc_3D10
.text:0000000000003C99
.text:0000000000003C99 loc_3C99:                               ; CODE XREF: decode_4+CA↓j
.text:0000000000003C99                 cmp     rsi, 2
.text:0000000000003C9D                 jz      short loc_3D06
.text:0000000000003C9F                 movzx   r8d, byte ptr [rdi+2]
.text:0000000000003CA4                 cmp     r8b, 3Dh ; '='
.text:0000000000003CA8                 jz      short loc_3D00
.text:0000000000003CAA                 movzx   r8d, byte ptr [r9+r8]
.text:0000000000003CAF                 test    r8b, r8b
.text:0000000000003CB2                 js      short loc_3D06
.text:0000000000003CB4                 cmp     qword ptr [rcx], 0
.text:0000000000003CB8                 jnz     short loc_3D30
.text:0000000000003CBA
.text:0000000000003CBA loc_3CBA:                               ; CODE XREF: decode_4+EA↓j
.text:0000000000003CBA                 cmp     rsi, 3
.text:0000000000003CBE                 jz      short loc_3D06
.text:0000000000003CC0                 movzx   edi, byte ptr [rdi+3]
.text:0000000000003CC4                 cmp     dil, 3Dh ; '='
.text:0000000000003CC8                 jz      loc_3D60
.text:0000000000003CCE                 movzx   esi, byte ptr [r9+rdi]
.text:0000000000003CD3                 test    sil, sil
.text:0000000000003CD6                 js      short loc_3D06
.text:0000000000003CD8                 cmp     qword ptr [rcx], 0
.text:0000000000003CDC                 jz      short loc_3CF1
.text:0000000000003CDE                 shl     r8d, 6
.text:0000000000003CE2                 add     rax, 1
.text:0000000000003CE6                 or      r8d, esi
.text:0000000000003CE9                 mov     [rax-1], r8b
.text:0000000000003CED                 sub     qword ptr [rcx], 1
.text:0000000000003CF1
.text:0000000000003CF1 loc_3CF1:                               ; CODE XREF: decode_4+7C↑j
.text:0000000000003CF1                                         ; decode_4+F6↓j ...
.text:0000000000003CF1                 mov     [rdx], rax
.text:0000000000003CF4                 mov     eax, 1
.text:0000000000003CF9
.text:0000000000003CF9 locret_3CF9:                            ; CODE XREF: decode_4+6↑j
.text:0000000000003CF9                                         ; decode_4+1F↑j ...
.text:0000000000003CF9                 rep retn
.text:0000000000003CF9 ; ---------------------------------------------------------------------------
.text:0000000000003CFB                 align 20h
.text:0000000000003D00
.text:0000000000003D00 loc_3D00:                               ; CODE XREF: decode_4+48↑j
.text:0000000000003D00                 cmp     rsi, 4
.text:0000000000003D04                 jz      short loc_3D50
.text:0000000000003D06
.text:0000000000003D06 loc_3D06:                               ; CODE XREF: decode_4+3D↑j
.text:0000000000003D06                                         ; decode_4+52↑j ...
.text:0000000000003D06                 mov     [rdx], rax
.text:0000000000003D09                 xor     eax, eax
.text:0000000000003D0B                 retn
.text:0000000000003D0B ; ---------------------------------------------------------------------------
.text:0000000000003D0C                 align 10h
.text:0000000000003D10
.text:0000000000003D10 loc_3D10:                               ; CODE XREF: decode_4+37↑j
.text:0000000000003D10                 mov     r11d, r10d
.text:0000000000003D13                 shl     r8d, 2
.text:0000000000003D17                 add     rax, 1
.text:0000000000003D1B                 sar     r11b, 4
.text:0000000000003D1F                 or      r8d, r11d
.text:0000000000003D22                 mov     [rax-1], r8b
.text:0000000000003D26                 sub     qword ptr [rcx], 1
.text:0000000000003D2A                 jmp     loc_3C99
.text:0000000000003D2A ; ---------------------------------------------------------------------------
.text:0000000000003D2F                 align 10h
.text:0000000000003D30
.text:0000000000003D30 loc_3D30:                               ; CODE XREF: decode_4+58↑j
.text:0000000000003D30                 mov     r11d, r8d
.text:0000000000003D33                 shl     r10d, 4
.text:0000000000003D37                 add     rax, 1
.text:0000000000003D3B                 sar     r11b, 2
.text:0000000000003D3F                 or      r10d, r11d
.text:0000000000003D42                 mov     [rax-1], r10b
.text:0000000000003D46                 sub     qword ptr [rcx], 1
.text:0000000000003D4A                 jmp     loc_3CBA
.text:0000000000003D4A ; ---------------------------------------------------------------------------
.text:0000000000003D4F                 align 10h
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: decode_4+A4↑j
.text:0000000000003D50                 cmp     byte ptr [rdi+3], 3Dh ; '='
.text:0000000000003D54                 jnz     short loc_3D06
.text:0000000000003D56                 jmp     short loc_3CF1
.text:0000000000003D56 ; ---------------------------------------------------------------------------
.text:0000000000003D58                 align 20h
.text:0000000000003D60
.text:0000000000003D60 loc_3D60:                               ; CODE XREF: decode_4+68↑j
.text:0000000000003D60                 cmp     rsi, 4
.text:0000000000003D64                 jnz     short loc_3D06
.text:0000000000003D66                 jmp     short loc_3CF1
.text:0000000000003D66 ; } // starts at 3C60
.text:0000000000003D66 decode_4        endp
.text:0000000000003D66
.text:0000000000003D66 ; ---------------------------------------------------------------------------
.text:0000000000003D68                 align 10h
.text:0000000000003D70
.text:0000000000003D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D70
.text:0000000000003D70
.text:0000000000003D70                 public base64_encode
.text:0000000000003D70 base64_encode   proc near               ; CODE XREF: base64url_encode+C↑p
.text:0000000000003D70                                         ; base64_encode_alloc+76↓p
.text:0000000000003D70                                         ; DATA XREF: ...
.text:0000000000003D70 ; __unwind {
.text:0000000000003D70                 test    cl, 3
.text:0000000000003D73                 jnz     short loc_3D89
.text:0000000000003D75                 mov     rax, rcx
.text:0000000000003D78                 shr     rax, 2
.text:0000000000003D7C                 lea     rax, [rax+rax*2]
.text:0000000000003D80                 cmp     rax, rsi
.text:0000000000003D83                 jz      loc_3E98
.text:0000000000003D89
.text:0000000000003D89 loc_3D89:                               ; CODE XREF: base64_encode+3↑j
.text:0000000000003D89                 lea     r9, b64c
.text:0000000000003D90                 jmp     loc_3E16
.text:0000000000003D90 ; ---------------------------------------------------------------------------
.text:0000000000003D95                 align 8
.text:0000000000003D98
.text:0000000000003D98 loc_3D98:                               ; CODE XREF: base64_encode+DB↓j
.text:0000000000003D98                 movzx   r8d, byte ptr [rdi+1]
.text:0000000000003D9D                 mov     r10d, r8d
.text:0000000000003DA0                 shr     r10b, 4
.text:0000000000003DA4                 add     eax, r10d
.text:0000000000003DA7                 and     eax, 3Fh
.text:0000000000003DAA                 cmp     rcx, 2
.text:0000000000003DAE                 movzx   eax, byte ptr [r9+rax]
.text:0000000000003DB3                 mov     [rdx+1], al
.text:0000000000003DB6                 jz      locret_3E92
.text:0000000000003DBC                 shl     r8d, 2
.text:0000000000003DC0                 cmp     rsi, 2
.text:0000000000003DC4                 jz      loc_3E80
.text:0000000000003DCA                 movzx   eax, byte ptr [rdi+2]
.text:0000000000003DCE                 mov     r10d, eax
.text:0000000000003DD1                 shr     r10b, 6
.text:0000000000003DD5                 add     r8d, r10d
.text:0000000000003DD8                 and     r8d, 3Fh
.text:0000000000003DDC                 cmp     rcx, 3
.text:0000000000003DE0                 movzx   r8d, byte ptr [r9+r8]
.text:0000000000003DE5                 mov     [rdx+2], r8b
.text:0000000000003DE9                 jz      locret_3E92
.text:0000000000003DEF                 and     eax, 3Fh
.text:0000000000003DF2                 cmp     rcx, 4
.text:0000000000003DF6                 movzx   eax, byte ptr [r9+rax]
.text:0000000000003DFB                 mov     [rdx+3], al
.text:0000000000003DFE                 jz      locret_3E92
.text:0000000000003E04                 sub     rsi, 3
.text:0000000000003E08                 jz      short loc_3E0E
.text:0000000000003E0A                 add     rdi, 3
.text:0000000000003E0E
.text:0000000000003E0E loc_3E0E:                               ; CODE XREF: base64_encode+98↑j
.text:0000000000003E0E                                         ; base64_encode+108↓j
.text:0000000000003E0E                 add     rdx, 4
.text:0000000000003E12                 sub     rcx, 4
.text:0000000000003E16
.text:0000000000003E16 loc_3E16:                               ; CODE XREF: base64_encode+20↑j
.text:0000000000003E16                 test    rsi, rsi
.text:0000000000003E19                 jz      loc_3F18
.text:0000000000003E1F                 test    rcx, rcx
.text:0000000000003E22                 jz      loc_3F18
.text:0000000000003E28                 movzx   eax, byte ptr [rdi]
.text:0000000000003E2B                 mov     r8d, eax
.text:0000000000003E2E                 shr     r8b, 2
.text:0000000000003E32                 and     r8d, 3Fh
.text:0000000000003E36                 cmp     rcx, 1
.text:0000000000003E3A                 movzx   r8d, byte ptr [r9+r8]
.text:0000000000003E3F                 mov     [rdx], r8b
.text:0000000000003E42                 jz      short locret_3E92
.text:0000000000003E44                 shl     eax, 4
.text:0000000000003E47                 cmp     rsi, 1
.text:0000000000003E4B                 jnz     loc_3D98
.text:0000000000003E51                 and     eax, 30h
.text:0000000000003E54                 cmp     rcx, 2
.text:0000000000003E58                 movzx   eax, byte ptr [r9+rax]
.text:0000000000003E5D                 mov     [rdx+1], al
.text:0000000000003E60                 jz      short locret_3E92
.text:0000000000003E62                 cmp     rcx, 3
.text:0000000000003E66                 mov     byte ptr [rdx+2], 3Dh ; '='
.text:0000000000003E6A                 jz      short locret_3E92
.text:0000000000003E6C
.text:0000000000003E6C loc_3E6C:                               ; CODE XREF: base64_encode+120↓j
.text:0000000000003E6C                 cmp     rcx, 4
.text:0000000000003E70                 mov     byte ptr [rdx+3], 3Dh ; '='
.text:0000000000003E74                 jz      short locret_3E92
.text:0000000000003E76                 xor     esi, esi
.text:0000000000003E78                 jmp     short loc_3E0E
.text:0000000000003E78 ; ---------------------------------------------------------------------------
.text:0000000000003E7A                 align 20h
.text:0000000000003E80
.text:0000000000003E80 loc_3E80:                               ; CODE XREF: base64_encode+54↑j
.text:0000000000003E80                 and     r8d, 3Ch
.text:0000000000003E84                 cmp     rcx, 3
.text:0000000000003E88                 movzx   eax, byte ptr [r9+r8]
.text:0000000000003E8D                 mov     [rdx+2], al
.text:0000000000003E90                 jnz     short loc_3E6C
.text:0000000000003E92
.text:0000000000003E92 locret_3E92:                            ; CODE XREF: base64_encode+46↑j
.text:0000000000003E92                                         ; base64_encode+79↑j ...
.text:0000000000003E92                 rep retn
.text:0000000000003E92 ; ---------------------------------------------------------------------------
.text:0000000000003E94                 align 8
.text:0000000000003E98
.text:0000000000003E98 loc_3E98:                               ; CODE XREF: base64_encode+13↑j
.text:0000000000003E98                 test    rax, rax
.text:0000000000003E9B                 lea     r8, [rdi+rax]
.text:0000000000003E9F                 lea     rcx, b64c
.text:0000000000003EA6                 jz      short locret_3E92
.text:0000000000003EA8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: base64_encode+19E↓j
.text:0000000000003EB0                 movzx   eax, byte ptr [rdi]
.text:0000000000003EB3                 add     rdi, 3
.text:0000000000003EB7                 add     rdx, 4
.text:0000000000003EBB                 mov     esi, eax
.text:0000000000003EBD                 shl     eax, 4
.text:0000000000003EC0                 shr     sil, 2
.text:0000000000003EC4                 and     esi, 3Fh
.text:0000000000003EC7                 movzx   esi, byte ptr [rcx+rsi]
.text:0000000000003ECB                 mov     [rdx-4], sil
.text:0000000000003ECF                 movzx   esi, byte ptr [rdi-2]
.text:0000000000003ED3                 mov     r9d, esi
.text:0000000000003ED6                 shr     r9b, 4
.text:0000000000003EDA                 add     eax, r9d
.text:0000000000003EDD                 and     eax, 3Fh
.text:0000000000003EE0                 movzx   eax, byte ptr [rcx+rax]
.text:0000000000003EE4                 mov     [rdx-3], al
.text:0000000000003EE7                 movzx   eax, byte ptr [rdi-1]
.text:0000000000003EEB                 mov     r9d, eax
.text:0000000000003EEE                 and     eax, 3Fh
.text:0000000000003EF1                 shr     r9b, 6
.text:0000000000003EF5                 movzx   eax, byte ptr [rcx+rax]
.text:0000000000003EF9                 lea     esi, [r9+rsi*4]
.text:0000000000003EFD                 and     esi, 3Fh
.text:0000000000003F00                 movzx   esi, byte ptr [rcx+rsi]
.text:0000000000003F04                 mov     [rdx-2], sil
.text:0000000000003F08                 cmp     r8, rdi
.text:0000000000003F0B                 mov     [rdx-1], al
.text:0000000000003F0E                 jnz     short loc_3EB0
.text:0000000000003F10                 rep retn
.text:0000000000003F10 ; ---------------------------------------------------------------------------
.text:0000000000003F12                 align 8
.text:0000000000003F18
.text:0000000000003F18 loc_3F18:                               ; CODE XREF: base64_encode+A9↑j
.text:0000000000003F18                                         ; base64_encode+B2↑j
.text:0000000000003F18                 test    rcx, rcx
.text:0000000000003F1B                 jz      locret_3E92
.text:0000000000003F21                 mov     byte ptr [rdx], 0
.text:0000000000003F24                 retn
.text:0000000000003F24 ; } // starts at 3D70
.text:0000000000003F24 base64_encode   endp
.text:0000000000003F24
.text:0000000000003F24 ; ---------------------------------------------------------------------------
.text:0000000000003F25                 align 10h
.text:0000000000003F30
.text:0000000000003F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F30
.text:0000000000003F30
.text:0000000000003F30                 public base64_encode_alloc
.text:0000000000003F30 base64_encode_alloc proc near
.text:0000000000003F30 ; __unwind {
.text:0000000000003F30                 push    r14
.text:0000000000003F32                 push    r13
.text:0000000000003F34                 mov     r13, rdx
.text:0000000000003F37                 lea     rdx, [rsi+2]
.text:0000000000003F3B                 push    r12
.text:0000000000003F3D                 push    rbp
.text:0000000000003F3E                 push    rbx
.text:0000000000003F3F                 mov     rbx, 0AAAAAAAAAAAAAAABh
.text:0000000000003F49                 mov     rax, rdx
.text:0000000000003F4C                 mul     rbx
.text:0000000000003F4F                 shr     rdx, 1
.text:0000000000003F52                 lea     rbx, ds:0[rdx*4]
.text:0000000000003F5A                 lea     rbp, [rbx+1]
.text:0000000000003F5E                 cmp     rsi, rbp
.text:0000000000003F61                 jbe     short loc_3F80
.text:0000000000003F63                 mov     qword ptr [r13+0], 0
.text:0000000000003F6B                 xor     ebp, ebp
.text:0000000000003F6D
.text:0000000000003F6D loc_3F6D:                               ; CODE XREF: base64_encode_alloc+65↓j
.text:0000000000003F6D                 pop     rbx
.text:0000000000003F6E                 mov     rax, rbp
.text:0000000000003F71                 pop     rbp
.text:0000000000003F72                 pop     r12
.text:0000000000003F74                 pop     r13
.text:0000000000003F76                 pop     r14
.text:0000000000003F78                 retn
.text:0000000000003F78 ; ---------------------------------------------------------------------------
.text:0000000000003F79                 align 20h
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: base64_encode_alloc+31↑j
.text:0000000000003F80                 mov     r14, rdi
.text:0000000000003F83                 mov     rdi, rbp        ; size
.text:0000000000003F86                 mov     r12, rsi
.text:0000000000003F89                 call    _malloc
.text:0000000000003F8E                 test    rax, rax
.text:0000000000003F91                 mov     [r13+0], rax
.text:0000000000003F95                 jz      short loc_3F6D
.text:0000000000003F97                 mov     rcx, rbp
.text:0000000000003F9A                 mov     rdx, rax
.text:0000000000003F9D                 mov     rbp, rbx
.text:0000000000003FA0                 mov     rsi, r12
.text:0000000000003FA3                 mov     rdi, r14
.text:0000000000003FA6                 call    base64_encode
.text:0000000000003FAB                 pop     rbx
.text:0000000000003FAC                 mov     rax, rbp
.text:0000000000003FAF                 pop     rbp
.text:0000000000003FB0                 pop     r12
.text:0000000000003FB2                 pop     r13
.text:0000000000003FB4                 pop     r14
.text:0000000000003FB6                 retn
.text:0000000000003FB6 ; } // starts at 3F30
.text:0000000000003FB6 base64_encode_alloc endp
.text:0000000000003FB6
.text:0000000000003FB6 ; ---------------------------------------------------------------------------
.text:0000000000003FB7                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FC0
.text:0000000000003FC0
.text:0000000000003FC0                 public isbase64
.text:0000000000003FC0 isbase64        proc near               ; CODE XREF: isbase64url+20↑j
.text:0000000000003FC0                                         ; DATA XREF: main+43D↑o
.text:0000000000003FC0 ; __unwind {
.text:0000000000003FC0                 lea     rax, b64
.text:0000000000003FC7                 movzx   edi, dil
.text:0000000000003FCB                 movzx   eax, byte ptr [rax+rdi]
.text:0000000000003FCF                 not     eax
.text:0000000000003FD1                 shr     al, 7
.text:0000000000003FD4                 retn
.text:0000000000003FD4 ; } // starts at 3FC0
.text:0000000000003FD4 isbase64        endp
.text:0000000000003FD4
.text:0000000000003FD4 ; ---------------------------------------------------------------------------
.text:0000000000003FD5                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FE0
.text:0000000000003FE0
.text:0000000000003FE0                 public base64_decode_ctx_init
.text:0000000000003FE0 base64_decode_ctx_init proc near        ; CODE XREF: base64url_decode_ctx_init_wrapper+8↑p
.text:0000000000003FE0                                         ; base64_decode_ctx_init_wrapper+4↑j
.text:0000000000003FE0 ; __unwind {
.text:0000000000003FE0                 mov     dword ptr [rdi], 0
.text:0000000000003FE6                 retn
.text:0000000000003FE6 ; } // starts at 3FE0
.text:0000000000003FE6 base64_decode_ctx_init endp
.text:0000000000003FE6
.text:0000000000003FE6 ; ---------------------------------------------------------------------------
.text:0000000000003FE7                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FF0
.text:0000000000003FF0 ; Attributes: info_from_lumina
.text:0000000000003FF0
.text:0000000000003FF0                 public base64_decode_ctx
.text:0000000000003FF0 base64_decode_ctx proc near             ; CODE XREF: base64_decode_ctx_wrapper+8↑p
.text:0000000000003FF0                                         ; base64url_decode_ctx_wrapper+8E↑p ...
.text:0000000000003FF0
.text:0000000000003FF0 var_63          = byte ptr -63h
.text:0000000000003FF0 var_62          = byte ptr -62h
.text:0000000000003FF0 var_61          = byte ptr -61h
.text:0000000000003FF0 var_60          = qword ptr -60h
.text:0000000000003FF0 var_58          = qword ptr -58h
.text:0000000000003FF0 var_50          = qword ptr -50h
.text:0000000000003FF0 var_48          = qword ptr -48h
.text:0000000000003FF0 var_40          = qword ptr -40h
.text:0000000000003FF0
.text:0000000000003FF0 ; __unwind {
.text:0000000000003FF0                 push    r15
.text:0000000000003FF2                 push    r14
.text:0000000000003FF4                 mov     r14, rdi
.text:0000000000003FF7                 push    r13
.text:0000000000003FF9                 push    r12
.text:0000000000003FFB                 mov     r13, rdx
.text:0000000000003FFE                 push    rbp
.text:0000000000003FFF                 push    rbx
.text:0000000000004000                 mov     r12, rsi
.text:0000000000004003                 sub     rsp, 38h
.text:0000000000004007                 mov     r15, [r8]
.text:000000000000400A                 mov     rbx, fs:28h
.text:0000000000004013                 mov     [rsp+68h+var_40], rbx
.text:0000000000004018                 xor     ebx, ebx
.text:000000000000401A                 test    rdi, rdi
.text:000000000000401D                 mov     [rsp+68h+var_50], rcx
.text:0000000000004022                 mov     [rsp+68h+var_58], r8
.text:0000000000004027                 mov     [rsp+68h+var_48], r15
.text:000000000000402C                 setnz   [rsp+68h+var_61]
.text:0000000000004031                 jz      loc_4260
.text:0000000000004037                 test    rdx, rdx
.text:000000000000403A                 mov     eax, [rdi]
.text:000000000000403C                 setnz   [rsp+68h+var_63]
.text:0000000000004041                 movzx   ebx, [rsp+68h+var_63]
.text:0000000000004046                 test    eax, eax
.text:0000000000004048                 setz    al
.text:000000000000404B                 and     eax, ebx
.text:000000000000404D                 mov     [rsp+68h+var_62], al
.text:0000000000004051
.text:0000000000004051 loc_4051:                               ; CODE XREF: base64_decode_ctx+27A↓j
.text:0000000000004051                 lea     rax, [r14+4]
.text:0000000000004055                 lea     rbp, [rsp+68h+var_48]
.text:000000000000405A                 lea     rbx, [rsp+68h+var_50]
.text:000000000000405F                 mov     [rsp+68h+var_60], rax
.text:0000000000004064
.text:0000000000004064 loc_4064:                               ; CODE XREF: base64_decode_ctx+250↓j
.text:0000000000004064                 cmp     [rsp+68h+var_62], 0
.text:0000000000004069                 mov     rdx, r15
.text:000000000000406C                 jnz     loc_4145
.text:0000000000004072
.text:0000000000004072 loc_4072:                               ; CODE XREF: base64_decode_ctx+16F↓j
.text:0000000000004072                 test    r13, r13
.text:0000000000004075                 setz    al
.text:0000000000004078                 and     al, [rsp+68h+var_63]
.text:000000000000407C                 jnz     loc_4108
.text:0000000000004082
.text:0000000000004082 loc_4082:                               ; CODE XREF: base64_decode_ctx+110↓j
.text:0000000000004082                 test    r13, r13
.text:0000000000004085                 jz      loc_4168
.text:000000000000408B                 cmp     byte ptr [r12], 0Ah
.text:0000000000004090                 jz      loc_4230
.text:0000000000004096                 sub     rdx, r15
.text:0000000000004099                 add     [rsp+68h+var_50], rdx
.text:000000000000409E                 test    r14, r14
.text:00000000000040A1                 mov     [rsp+68h+var_48], r15
.text:00000000000040A6                 lea     r15, [r12+r13]
.text:00000000000040AA                 jnz     loc_4181
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: base64_decode_ctx+269↓j
.text:00000000000040B0                 mov     rdi, r12
.text:00000000000040B3
.text:00000000000040B3 loc_40B3:                               ; CODE XREF: base64_decode_ctx+1D9↓j
.text:00000000000040B3                                         ; base64_decode_ctx+230↓j
.text:00000000000040B3                 cmp     r13, 3
.text:00000000000040B7                 ja      short loc_40CB
.text:00000000000040B9                 cmp     [rsp+68h+var_61], 0
.text:00000000000040BE                 jz      short loc_40CB
.text:00000000000040C0                 cmp     [rsp+68h+var_63], 0
.text:00000000000040C5                 jnz     loc_41CF
.text:00000000000040CB
.text:00000000000040CB loc_40CB:                               ; CODE XREF: base64_decode_ctx+C7↑j
.text:00000000000040CB                                         ; base64_decode_ctx+CE↑j ...
.text:00000000000040CB                 mov     rcx, rbp
.text:00000000000040CE                 mov     rdx, rbx
.text:00000000000040D1                 mov     rsi, r13
.text:00000000000040D4                 call    decode_4
.text:00000000000040D9                 test    al, al
.text:00000000000040DB                 jz      loc_428E
.text:00000000000040E1                 sub     r15, r12
.text:00000000000040E4                 cmp     [rsp+68h+var_62], 0
.text:00000000000040E9                 mov     r13, r15
.text:00000000000040EC                 mov     r15, [rsp+68h+var_48]
.text:00000000000040F1                 mov     rdx, r15
.text:00000000000040F4                 jnz     short loc_4145
.text:00000000000040F6                 test    r13, r13
.text:00000000000040F9                 setz    al
.text:00000000000040FC                 and     al, [rsp+68h+var_63]
.text:0000000000004100                 jz      short loc_4082
.text:0000000000004102                 nop     word ptr [rax+rax+00h]
.text:0000000000004108
.text:0000000000004108 loc_4108:                               ; CODE XREF: base64_decode_ctx+8C↑j
.text:0000000000004108                                         ; base64_decode_ctx+1E9↓j ...
.text:0000000000004108                 mov     rbx, [rsp+68h+var_58]
.text:000000000000410D                 sub     [rbx], rdx
.text:0000000000004110                 mov     rbx, [rsp+68h+var_40]
.text:0000000000004115                 xor     rbx, fs:28h
.text:000000000000411E                 jnz     loc_4298
.text:0000000000004124                 add     rsp, 38h
.text:0000000000004128                 pop     rbx
.text:0000000000004129                 pop     rbp
.text:000000000000412A                 pop     r12
.text:000000000000412C                 pop     r13
.text:000000000000412E                 pop     r14
.text:0000000000004130                 pop     r15
.text:0000000000004132                 retn
.text:0000000000004132 ; ---------------------------------------------------------------------------
.text:0000000000004133                 align 8
.text:0000000000004138
.text:0000000000004138 loc_4138:                               ; CODE XREF: base64_decode_ctx+168↓j
.text:0000000000004138                 mov     r15, [rsp+68h+var_48]
.text:000000000000413D                 add     r12, 4
.text:0000000000004141                 sub     r13, 4
.text:0000000000004145
.text:0000000000004145 loc_4145:                               ; CODE XREF: base64_decode_ctx+7C↑j
.text:0000000000004145                                         ; base64_decode_ctx+104↑j
.text:0000000000004145                 mov     rcx, rbp
.text:0000000000004148                 mov     rdx, rbx
.text:000000000000414B                 mov     rsi, r13
.text:000000000000414E                 mov     rdi, r12
.text:0000000000004151                 call    decode_4
.text:0000000000004156                 test    al, al
.text:0000000000004158                 jnz     short loc_4138
.text:000000000000415A                 mov     rdx, [rsp+68h+var_48]
.text:000000000000415F                 jmp     loc_4072
.text:000000000000415F ; ---------------------------------------------------------------------------
.text:0000000000004164                 align 8
.text:0000000000004168
.text:0000000000004168 loc_4168:                               ; CODE XREF: base64_decode_ctx+95↑j
.text:0000000000004168                 sub     rdx, r15
.text:000000000000416B                 add     [rsp+68h+var_50], rdx
.text:0000000000004170                 test    r14, r14
.text:0000000000004173                 mov     [rsp+68h+var_48], r15
.text:0000000000004178                 jz      loc_426F
.text:000000000000417E                 mov     r15, r12
.text:0000000000004181
.text:0000000000004181 loc_4181:                               ; CODE XREF: base64_decode_ctx+BA↑j
.text:0000000000004181                 mov     eax, [r14]
.text:0000000000004184                 cmp     eax, 4
.text:0000000000004187                 jz      short loc_41E0
.text:0000000000004189                 test    eax, eax
.text:000000000000418B                 jz      short loc_41E7
.text:000000000000418D
.text:000000000000418D loc_418D:                               ; CODE XREF: base64_decode_ctx+217↓j
.text:000000000000418D                 cmp     r12, r15
.text:0000000000004190                 jnb     short loc_41BE
.text:0000000000004192                 nop     word ptr [rax+rax+00h]
.text:0000000000004198
.text:0000000000004198 loc_4198:                               ; CODE XREF: base64_decode_ctx+1CC↓j
.text:0000000000004198                 add     r12, 1
.text:000000000000419C                 movzx   edx, byte ptr [r12-1]
.text:00000000000041A2                 cmp     dl, 0Ah
.text:00000000000041A5                 jz      short loc_41B9
.text:00000000000041A7                 lea     ecx, [rax+1]
.text:00000000000041AA                 cmp     ecx, 4
.text:00000000000041AD                 mov     [r14], ecx
.text:00000000000041B0                 mov     [r14+rax+4], dl
.text:00000000000041B5                 jz      short loc_4210
.text:00000000000041B7                 mov     eax, ecx
.text:00000000000041B9
.text:00000000000041B9 loc_41B9:                               ; CODE XREF: base64_decode_ctx+1B5↑j
.text:00000000000041B9                 cmp     r12, r15
.text:00000000000041BC                 jnz     short loc_4198
.text:00000000000041BE
.text:00000000000041BE loc_41BE:                               ; CODE XREF: base64_decode_ctx+1A0↑j
.text:00000000000041BE                 mov     r13d, eax
.text:00000000000041C1                 mov     rdi, [rsp+68h+var_60]
.text:00000000000041C6                 test    r13, r13
.text:00000000000041C9                 jnz     loc_40B3
.text:00000000000041CF
.text:00000000000041CF loc_41CF:                               ; CODE XREF: base64_decode_ctx+D5↑j
.text:00000000000041CF                                         ; base64_decode_ctx+236↓j
.text:00000000000041CF                 mov     rdx, [rsp+68h+var_48]
.text:00000000000041D4                 mov     eax, 1
.text:00000000000041D9                 jmp     loc_4108
.text:00000000000041D9 ; ---------------------------------------------------------------------------
.text:00000000000041DE                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: base64_decode_ctx+197↑j
.text:00000000000041E0                 mov     dword ptr [r14], 0
.text:00000000000041E7
.text:00000000000041E7 loc_41E7:                               ; CODE XREF: base64_decode_ctx+19B↑j
.text:00000000000041E7                 cmp     r13, 3
.text:00000000000041EB                 jle     short loc_4204
.text:00000000000041ED                 mov     edx, 4          ; n
.text:00000000000041F2                 mov     esi, 0Ah        ; c
.text:00000000000041F7                 mov     rdi, r12        ; s
.text:00000000000041FA                 call    _memchr         ; PIC mode
.text:00000000000041FF                 test    rax, rax
.text:0000000000004202                 jz      short loc_427C
.text:0000000000004204
.text:0000000000004204 loc_4204:                               ; CODE XREF: base64_decode_ctx+1FB↑j
.text:0000000000004204                 mov     eax, [r14]
.text:0000000000004207                 jmp     loc_418D
.text:0000000000004207 ; ---------------------------------------------------------------------------
.text:000000000000420C                 align 10h
.text:0000000000004210
.text:0000000000004210 loc_4210:                               ; CODE XREF: base64_decode_ctx+1C5↑j
.text:0000000000004210                 mov     eax, 4
.text:0000000000004215                 mov     rdi, [rsp+68h+var_60]
.text:000000000000421A                 mov     r13d, eax
.text:000000000000421D                 test    r13, r13
.text:0000000000004220                 jnz     loc_40B3
.text:0000000000004226                 jmp     short loc_41CF
.text:0000000000004226 ; ---------------------------------------------------------------------------
.text:0000000000004228                 align 10h
.text:0000000000004230
.text:0000000000004230 loc_4230:                               ; CODE XREF: base64_decode_ctx+A0↑j
.text:0000000000004230                 test    r14, r14
.text:0000000000004233                 jz      short loc_4248
.text:0000000000004235                 add     r12, 1
.text:0000000000004239                 sub     r13, 1
.text:000000000000423D                 mov     r15, rdx
.text:0000000000004240                 jmp     loc_4064
.text:0000000000004240 ; ---------------------------------------------------------------------------
.text:0000000000004245                 align 8
.text:0000000000004248
.text:0000000000004248 loc_4248:                               ; CODE XREF: base64_decode_ctx+243↑j
.text:0000000000004248                 sub     rdx, r15
.text:000000000000424B                 mov     [rsp+68h+var_48], r15
.text:0000000000004250                 add     [rsp+68h+var_50], rdx
.text:0000000000004255                 lea     r15, [r12+r13]
.text:0000000000004259                 jmp     loc_40B0
.text:0000000000004259 ; ---------------------------------------------------------------------------
.text:000000000000425E                 align 20h
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: base64_decode_ctx+41↑j
.text:0000000000004260                 mov     [rsp+68h+var_62], 1
.text:0000000000004265                 mov     [rsp+68h+var_63], 1
.text:000000000000426A                 jmp     loc_4051
.text:000000000000426F ; ---------------------------------------------------------------------------
.text:000000000000426F
.text:000000000000426F loc_426F:                               ; CODE XREF: base64_decode_ctx+188↑j
.text:000000000000426F                 mov     rdx, r15
.text:0000000000004272                 mov     eax, 1
.text:0000000000004277                 jmp     loc_4108
.text:000000000000427C ; ---------------------------------------------------------------------------
.text:000000000000427C
.text:000000000000427C loc_427C:                               ; CODE XREF: base64_decode_ctx+212↑j
.text:000000000000427C                 mov     rdi, r12
.text:000000000000427F                 mov     r13d, 4
.text:0000000000004285                 add     r12, 4
.text:0000000000004289                 jmp     loc_40CB
.text:000000000000428E ; ---------------------------------------------------------------------------
.text:000000000000428E
.text:000000000000428E loc_428E:                               ; CODE XREF: base64_decode_ctx+EB↑j
.text:000000000000428E                 mov     rdx, [rsp+68h+var_48]
.text:0000000000004293                 jmp     loc_4108
.text:0000000000004298 ; ---------------------------------------------------------------------------
.text:0000000000004298
.text:0000000000004298 loc_4298:                               ; CODE XREF: base64_decode_ctx+12E↑j
.text:0000000000004298                 call    ___stack_chk_fail ; PIC mode
.text:0000000000004298 ; } // starts at 3FF0
.text:0000000000004298 base64_decode_ctx endp
.text:0000000000004298
.text:0000000000004298 ; ---------------------------------------------------------------------------
.text:000000000000429D                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0
.text:00000000000042A0                 public base64_decode_alloc_ctx
.text:00000000000042A0 base64_decode_alloc_ctx proc near
.text:00000000000042A0
.text:00000000000042A0 var_39          = byte ptr -39h
.text:00000000000042A0 var_38          = qword ptr -38h
.text:00000000000042A0 var_30          = qword ptr -30h
.text:00000000000042A0
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 push    r14
.text:00000000000042A2                 push    r13
.text:00000000000042A4                 mov     r14, rdx
.text:00000000000042A7                 push    r12
.text:00000000000042A9                 push    rbp
.text:00000000000042AA                 mov     r12, rdi
.text:00000000000042AD                 push    rbx
.text:00000000000042AE                 mov     r13, rsi
.text:00000000000042B1                 mov     rbx, rcx
.text:00000000000042B4                 mov     rbp, r8
.text:00000000000042B7                 sub     rsp, 20h
.text:00000000000042BB                 mov     rax, fs:28h
.text:00000000000042C4                 mov     [rsp+48h+var_30], rax
.text:00000000000042C9                 xor     eax, eax
.text:00000000000042CB                 mov     rax, rdx
.text:00000000000042CE                 shr     rax, 2
.text:00000000000042D2                 lea     rdi, [rax+rax*2+3] ; size
.text:00000000000042D7                 mov     [rsp+48h+var_38], rdi
.text:00000000000042DC                 call    _malloc
.text:00000000000042E1                 test    rax, rax
.text:00000000000042E4                 mov     [rbx], rax
.text:00000000000042E7                 jz      short loc_4318
.text:00000000000042E9                 lea     r8, [rsp+48h+var_38]
.text:00000000000042EE                 mov     rcx, rax
.text:00000000000042F1                 mov     rdx, r14
.text:00000000000042F4                 mov     rsi, r13
.text:00000000000042F7                 mov     rdi, r12
.text:00000000000042FA                 call    base64_decode_ctx
.text:00000000000042FF                 test    al, al
.text:0000000000004301                 jz      short loc_4340
.text:0000000000004303                 test    rbp, rbp
.text:0000000000004306                 jz      short loc_4318
.text:0000000000004308                 mov     rdx, [rsp+48h+var_38]
.text:000000000000430D                 mov     [rbp+0], rdx
.text:0000000000004311                 jmp     short loc_431D
.text:0000000000004311 ; ---------------------------------------------------------------------------
.text:0000000000004313                 align 8
.text:0000000000004318
.text:0000000000004318 loc_4318:                               ; CODE XREF: base64_decode_alloc_ctx+47↑j
.text:0000000000004318                                         ; base64_decode_alloc_ctx+66↑j
.text:0000000000004318                 mov     eax, 1
.text:000000000000431D
.text:000000000000431D loc_431D:                               ; CODE XREF: base64_decode_alloc_ctx+71↑j
.text:000000000000431D                                         ; base64_decode_alloc_ctx+B8↓j
.text:000000000000431D                 mov     rcx, [rsp+48h+var_30]
.text:0000000000004322                 xor     rcx, fs:28h
.text:000000000000432B                 jnz     short loc_435A
.text:000000000000432D                 add     rsp, 20h
.text:0000000000004331                 pop     rbx
.text:0000000000004332                 pop     rbp
.text:0000000000004333                 pop     r12
.text:0000000000004335                 pop     r13
.text:0000000000004337                 pop     r14
.text:0000000000004339                 retn
.text:0000000000004339 ; ---------------------------------------------------------------------------
.text:000000000000433A                 align 20h
.text:0000000000004340
.text:0000000000004340 loc_4340:                               ; CODE XREF: base64_decode_alloc_ctx+61↑j
.text:0000000000004340                 mov     rdi, [rbx]      ; ptr
.text:0000000000004343                 mov     [rsp+48h+var_39], al
.text:0000000000004347                 call    _free
.text:000000000000434C                 mov     qword ptr [rbx], 0
.text:0000000000004353                 movzx   eax, [rsp+48h+var_39]
.text:0000000000004358                 jmp     short loc_431D
.text:000000000000435A ; ---------------------------------------------------------------------------
.text:000000000000435A
.text:000000000000435A loc_435A:                               ; CODE XREF: base64_decode_alloc_ctx+8B↑j
.text:000000000000435A                 call    ___stack_chk_fail
.text:000000000000435A ; } // starts at 42A0
.text:000000000000435A base64_decode_alloc_ctx endp
.text:000000000000435A
.text:000000000000435A ; ---------------------------------------------------------------------------
.text:000000000000435F                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360
.text:0000000000004360                 public close_stdout_set_file_name
.text:0000000000004360 close_stdout_set_file_name proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 mov     cs:file_name, rdi
.text:0000000000004367                 retn
.text:0000000000004367 ; } // starts at 4360
.text:0000000000004367 close_stdout_set_file_name endp
.text:0000000000004367
.text:0000000000004367 ; ---------------------------------------------------------------------------
.text:0000000000004368                 align 10h
.text:0000000000004370
.text:0000000000004370 ; =============== S U B R O U T I N E =======================================
.text:0000000000004370
.text:0000000000004370
.text:0000000000004370                 public close_stdout_set_ignore_EPIPE
.text:0000000000004370 close_stdout_set_ignore_EPIPE proc near
.text:0000000000004370 ; __unwind {
.text:0000000000004370                 mov     cs:ignore_EPIPE, dil
.text:0000000000004377                 retn
.text:0000000000004377 ; } // starts at 4370
.text:0000000000004377 close_stdout_set_ignore_EPIPE endp
.text:0000000000004377
.text:0000000000004377 ; ---------------------------------------------------------------------------
.text:0000000000004378                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380 ; Attributes: info_from_lumina
.text:0000000000004380
.text:0000000000004380 ; void __cdecl close_stdout()
.text:0000000000004380                 public close_stdout
.text:0000000000004380 close_stdout    proc near               ; DATA XREF: main+6A↑o
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 push    rbp
.text:0000000000004381                 push    rbx
.text:0000000000004382                 sub     rsp, 8
.text:0000000000004386                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000438D                 call    close_stream
.text:0000000000004392                 test    eax, eax
.text:0000000000004394                 jz      short loc_43AC
.text:0000000000004396                 call    ___errno_location
.text:000000000000439B                 cmp     cs:ignore_EPIPE, 0
.text:00000000000043A2                 mov     rbx, rax
.text:00000000000043A5                 jz      short loc_43C3
.text:00000000000043A7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000043AA                 jnz     short loc_43C3
.text:00000000000043AC
.text:00000000000043AC loc_43AC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000043AC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000043B3                 call    close_stream
.text:00000000000043B8                 test    eax, eax
.text:00000000000043BA                 jnz     short loc_4402
.text:00000000000043BC                 add     rsp, 8
.text:00000000000043C0                 pop     rbx
.text:00000000000043C1                 pop     rbp
.text:00000000000043C2                 retn
.text:00000000000043C3 ; ---------------------------------------------------------------------------
.text:00000000000043C3
.text:00000000000043C3 loc_43C3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000043C3                                         ; close_stdout+2A↑j
.text:00000000000043C3                 lea     rsi, aWriteError ; "write error"
.text:00000000000043CA                 xor     edi, edi        ; domainname
.text:00000000000043CC                 mov     edx, 5          ; category
.text:00000000000043D1                 call    _dcgettext
.text:00000000000043D6                 mov     rdi, cs:file_name
.text:00000000000043DD                 mov     rbp, rax
.text:00000000000043E0                 test    rdi, rdi
.text:00000000000043E3                 jz      short loc_440D
.text:00000000000043E5                 call    quotearg_colon
.text:00000000000043EA                 mov     esi, [rbx]      ; errnum
.text:00000000000043EC                 lea     rdx, aS         ; "%s: "
.text:00000000000043F3                 mov     rcx, rax
.text:00000000000043F6                 mov     r8, rbp
.text:00000000000043F9                 xor     edi, edi        ; status
.text:00000000000043FB                 xor     eax, eax
.text:00000000000043FD                 call    _error
.text:0000000000004402
.text:0000000000004402 loc_4402:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000004402                                         ; close_stdout+A2↓j
.text:0000000000004402                 mov     edi, cs:exit_failure ; status
.text:0000000000004408                 call    __exit
.text:000000000000440D ; ---------------------------------------------------------------------------
.text:000000000000440D
.text:000000000000440D loc_440D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000440D                 mov     esi, [rbx]      ; errnum
.text:000000000000440F                 lea     rdx, format     ; format
.text:0000000000004416                 mov     rcx, rax
.text:0000000000004419                 xor     edi, edi        ; status
.text:000000000000441B                 xor     eax, eax
.text:000000000000441D                 call    _error
.text:0000000000004422                 jmp     short loc_4402
.text:0000000000004422 ; } // starts at 4380
.text:0000000000004422 close_stdout    endp
.text:0000000000004422
.text:0000000000004422 ; ---------------------------------------------------------------------------
.text:0000000000004424                 align 10h
.text:0000000000004430
.text:0000000000004430 ; =============== S U B R O U T I N E =======================================
.text:0000000000004430
.text:0000000000004430
.text:0000000000004430 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000004430                 public fdadvise
.text:0000000000004430 fdadvise        proc near
.text:0000000000004430 ; __unwind {
.text:0000000000004430                 jmp     _posix_fadvise
.text:0000000000004430 ; } // starts at 4430
.text:0000000000004430 fdadvise        endp
.text:0000000000004430
.text:0000000000004430 ; ---------------------------------------------------------------------------
.text:0000000000004435                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440
.text:0000000000004440                 public fadvise
.text:0000000000004440 fadvise         proc near               ; CODE XREF: main+252↑p
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 test    rdi, rdi
.text:0000000000004443                 jz      short locret_4460
.text:0000000000004445                 push    rbx
.text:0000000000004446                 mov     ebx, esi
.text:0000000000004448                 call    _fileno
.text:000000000000444D                 mov     ecx, ebx        ; advise
.text:000000000000444F                 xor     edx, edx        ; len
.text:0000000000004451                 xor     esi, esi        ; offset
.text:0000000000004453                 pop     rbx
.text:0000000000004454                 mov     edi, eax        ; fd
.text:0000000000004456                 jmp     _posix_fadvise
.text:0000000000004456 ; ---------------------------------------------------------------------------
.text:000000000000445B                 align 20h
.text:0000000000004460
.text:0000000000004460 locret_4460:                            ; CODE XREF: fadvise+3↑j
.text:0000000000004460                 rep retn
.text:0000000000004460 ; } // starts at 4440
.text:0000000000004460 fadvise         endp
.text:0000000000004460
.text:0000000000004460 ; ---------------------------------------------------------------------------
.text:0000000000004462                 align 10h
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470
.text:0000000000004470                 public set_program_name
.text:0000000000004470 set_program_name proc near              ; CODE XREF: main+35↑p
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 test    rdi, rdi
.text:0000000000004473                 push    rbx
.text:0000000000004474                 jz      short loc_44ED
.text:0000000000004476                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000447B                 mov     rbx, rdi
.text:000000000000447E                 call    _strrchr
.text:0000000000004483                 test    rax, rax
.text:0000000000004486                 jz      short loc_44DD
.text:0000000000004488                 lea     r8, [rax+1]
.text:000000000000448C                 mov     rdx, r8
.text:000000000000448F                 sub     rdx, rbx
.text:0000000000004492                 cmp     rdx, 6
.text:0000000000004496                 jle     short loc_44DD
.text:0000000000004498                 lea     rsi, [rax-6]
.text:000000000000449C                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000044A3                 mov     ecx, 7
.text:00000000000044A8                 repe cmpsb
.text:00000000000044AA                 setnbe  dl
.text:00000000000044AD                 sbb     dl, 0
.text:00000000000044B0                 test    dl, dl
.text:00000000000044B2                 jnz     short loc_44DD
.text:00000000000044B4                 lea     rdi, aLt        ; "lt-"
.text:00000000000044BB                 mov     ecx, 3
.text:00000000000044C0                 mov     rsi, r8
.text:00000000000044C3                 mov     rbx, r8
.text:00000000000044C6                 repe cmpsb
.text:00000000000044C8                 setnbe  dl
.text:00000000000044CB                 sbb     dl, 0
.text:00000000000044CE                 test    dl, dl
.text:00000000000044D0                 jnz     short loc_44DD
.text:00000000000044D2                 lea     rbx, [rax+4]
.text:00000000000044D6                 mov     cs:__bss_start, rbx
.text:00000000000044DD
.text:00000000000044DD loc_44DD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000044DD                                         ; set_program_name+26↑j ...
.text:00000000000044DD                 mov     cs:program_name, rbx
.text:00000000000044E4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000044EB                 pop     rbx
.text:00000000000044EC                 retn
.text:00000000000044ED ; ---------------------------------------------------------------------------
.text:00000000000044ED
.text:00000000000044ED loc_44ED:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000044ED                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000044F4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000044FB                 mov     edx, 37h ; '7'  ; n
.text:0000000000004500                 mov     esi, 1          ; size
.text:0000000000004505                 call    _fwrite
.text:000000000000450A                 call    _abort
.text:000000000000450A ; } // starts at 4470
.text:000000000000450A set_program_name endp
.text:000000000000450A
.text:000000000000450A ; ---------------------------------------------------------------------------
.text:000000000000450F                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000004510 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000004510                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 push    rbp
.text:0000000000004511                 push    rbx
.text:0000000000004512                 mov     rbp, rdi
.text:0000000000004515                 mov     ebx, esi
.text:0000000000004517                 sub     rsp, 8
.text:000000000000451B                 call    locale_charset
.text:0000000000004520                 movzx   edx, byte ptr [rax]
.text:0000000000004523                 and     edx, 0FFFFFFDFh
.text:0000000000004526                 cmp     dl, 55h ; 'U'
.text:0000000000004529                 jz      short loc_45A0
.text:000000000000452B                 cmp     dl, 47h ; 'G'
.text:000000000000452E                 jz      short loc_4550
.text:0000000000004530
.text:0000000000004530 loc_4530:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000004530                                         ; gettext_quote+50↓j ...
.text:0000000000004530                 lea     rax, unk_809B
.text:0000000000004537                 lea     rdx, asc_809D   ; "'"
.text:000000000000453E                 cmp     ebx, 9
.text:0000000000004541                 cmovnz  rax, rdx
.text:0000000000004545                 add     rsp, 8
.text:0000000000004549                 pop     rbx
.text:000000000000454A                 pop     rbp
.text:000000000000454B                 retn
.text:000000000000454B ; ---------------------------------------------------------------------------
.text:000000000000454C                 align 10h
.text:0000000000004550
.text:0000000000004550 loc_4550:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000004550                 movzx   edx, byte ptr [rax+1]
.text:0000000000004554                 and     edx, 0FFFFFFDFh
.text:0000000000004557                 cmp     dl, 42h ; 'B'
.text:000000000000455A                 jnz     short loc_4530
.text:000000000000455C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000004560                 jnz     short loc_4530
.text:0000000000004562                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000004566                 jnz     short loc_4530
.text:0000000000004568                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000456C                 jnz     short loc_4530
.text:000000000000456E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000004572                 jnz     short loc_4530
.text:0000000000004574                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000004578                 jnz     short loc_4530
.text:000000000000457A                 cmp     byte ptr [rax+7], 0
.text:000000000000457E                 jnz     short loc_4530
.text:0000000000004580                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000004584                 lea     rax, unk_8094
.text:000000000000458B                 lea     rdx, unk_8098
.text:0000000000004592                 cmovnz  rax, rdx
.text:0000000000004596                 add     rsp, 8
.text:000000000000459A                 pop     rbx
.text:000000000000459B                 pop     rbp
.text:000000000000459C                 retn
.text:000000000000459C ; ---------------------------------------------------------------------------
.text:000000000000459D                 align 20h
.text:00000000000045A0
.text:00000000000045A0 loc_45A0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000045A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000045A4                 and     edx, 0FFFFFFDFh
.text:00000000000045A7                 cmp     dl, 54h ; 'T'
.text:00000000000045AA                 jnz     short loc_4530
.text:00000000000045AC                 movzx   edx, byte ptr [rax+2]
.text:00000000000045B0                 and     edx, 0FFFFFFDFh
.text:00000000000045B3                 cmp     dl, 46h ; 'F'
.text:00000000000045B6                 jnz     loc_4530
.text:00000000000045BC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000045C0                 jnz     loc_4530
.text:00000000000045C6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000045CA                 jnz     loc_4530
.text:00000000000045D0                 cmp     byte ptr [rax+5], 0
.text:00000000000045D4                 jnz     loc_4530
.text:00000000000045DA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000045DE                 lea     rax, unk_808C
.text:00000000000045E5                 lea     rdx, unk_8090
.text:00000000000045EC                 cmovnz  rax, rdx
.text:00000000000045F0                 add     rsp, 8
.text:00000000000045F4                 pop     rbx
.text:00000000000045F5                 pop     rbp
.text:00000000000045F6                 retn
.text:00000000000045F6 ; } // starts at 4510
.text:00000000000045F6 gettext_quote   endp
.text:00000000000045F6
.text:00000000000045F6 ; ---------------------------------------------------------------------------
.text:00000000000045F7                 align 20h
.text:0000000000004600
.text:0000000000004600 ; =============== S U B R O U T I N E =======================================
.text:0000000000004600
.text:0000000000004600 ; Attributes: info_from_lumina
.text:0000000000004600
.text:0000000000004600 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000004600 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000004600                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000004600
.text:0000000000004600 var_E0          = dword ptr -0E0h
.text:0000000000004600 var_DB          = byte ptr -0DBh
.text:0000000000004600 var_DA          = byte ptr -0DAh
.text:0000000000004600 var_D9          = byte ptr -0D9h
.text:0000000000004600 s               = qword ptr -0D8h
.text:0000000000004600 n               = qword ptr -0D0h
.text:0000000000004600 var_C8          = qword ptr -0C8h
.text:0000000000004600 ps              = qword ptr -0C0h
.text:0000000000004600 var_B8          = qword ptr -0B8h
.text:0000000000004600 var_B0          = qword ptr -0B0h
.text:0000000000004600 var_A8          = qword ptr -0A8h
.text:0000000000004600 s2              = qword ptr -0A0h
.text:0000000000004600 var_98          = qword ptr -98h
.text:0000000000004600 var_90          = qword ptr -90h
.text:0000000000004600 var_88          = qword ptr -88h
.text:0000000000004600 var_80          = qword ptr -80h
.text:0000000000004600 var_78          = qword ptr -78h
.text:0000000000004600 var_70          = dword ptr -70h
.text:0000000000004600 var_6C          = byte ptr -6Ch
.text:0000000000004600 var_6B          = byte ptr -6Bh
.text:0000000000004600 var_6A          = byte ptr -6Ah
.text:0000000000004600 var_69          = byte ptr -69h
.text:0000000000004600 var_68          = qword ptr -68h
.text:0000000000004600 var_60          = qword ptr -60h
.text:0000000000004600 wc              = dword ptr -4Ch
.text:0000000000004600 var_48          = qword ptr -48h
.text:0000000000004600 var_40          = qword ptr -40h
.text:0000000000004600 arg_0           = qword ptr  8
.text:0000000000004600 arg_8           = qword ptr  10h
.text:0000000000004600 arg_10          = qword ptr  18h
.text:0000000000004600
.text:0000000000004600 ; __unwind {
.text:0000000000004600                 push    r15
.text:0000000000004602                 push    r14
.text:0000000000004604                 mov     r15d, r8d
.text:0000000000004607                 push    r13
.text:0000000000004609                 push    r12
.text:000000000000460B                 mov     r14, rdi
.text:000000000000460E                 push    rbp
.text:000000000000460F                 push    rbx
.text:0000000000004610                 mov     ebx, r9d
.text:0000000000004613                 mov     r13, rsi
.text:0000000000004616                 mov     rbp, rcx
.text:0000000000004619                 and     ebx, 2
.text:000000000000461C                 sub     rsp, 0B8h
.text:0000000000004623                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000462B                 mov     [rsp+0E8h+s], rdx
.text:0000000000004630                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000004635                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000463A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000463F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000004647                 mov     [rsp+0E8h+var_80], rax
.text:000000000000464C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000004654                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004659                 mov     rax, fs:28h
.text:0000000000004662                 mov     [rsp+0E8h+var_40], rax
.text:000000000000466A                 xor     eax, eax
.text:000000000000466C                 call    ___ctype_get_mb_cur_max
.text:0000000000004671                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000004675                 mov     [rsp+0E8h+var_90], rax
.text:000000000000467A                 ja      def_4691        ; jumptable 00000000000121F1 default case
.text:0000000000004680                 lea     rcx, jpt_4691
.text:0000000000004687                 mov     edx, r15d
.text:000000000000468A                 movsxd  rax, ds:(jpt_4691 - 8100h)[rcx+rdx*4]
.text:000000000000468E                 add     rax, rcx
.text:0000000000004691                 jmp     rax             ; switch jump
.text:0000000000004693 ; ---------------------------------------------------------------------------
.text:0000000000004693
.text:0000000000004693 loc_4693:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004693                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000004693                                         ; DATA XREF: ...
.text:0000000000004693                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000004698                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000469D                 xor     r12d, r12d
.text:00000000000046A0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000046A9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000046AE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000046B3
.text:00000000000046B3 loc_46B3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000046B3                 lea     rax, asc_809D   ; "'"
.text:00000000000046BA                 mov     [rsp+0E8h+n], 1
.text:00000000000046C3                 xor     r15d, r15d
.text:00000000000046C6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000046CE                 mov     [rsp+0E8h+s2], rax
.text:00000000000046D3
.text:00000000000046D3 loc_46D3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000046D3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000046D3                 xor     r11d, r11d
.text:00000000000046D6                 mov     rax, rbp
.text:00000000000046D9                 mov     r8d, r12d
.text:00000000000046DC                 mov     rbp, r11
.text:00000000000046DF                 mov     r11, rax
.text:00000000000046E2                 nop     word ptr [rax+rax+00h]
.text:00000000000046E8
.text:00000000000046E8 loc_46E8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000046E8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000046E8                 cmp     r11, rbp
.text:00000000000046EB                 setnz   r12b
.text:00000000000046EF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000046F3                 jnz     short loc_4702
.text:00000000000046F5                 mov     rax, [rsp+0E8h+s]
.text:00000000000046FA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000046FE                 setnz   r12b
.text:0000000000004702
.text:0000000000004702 loc_4702:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000004702                 test    r12b, r12b
.text:0000000000004705                 jz      loc_4D60
.text:000000000000470B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004710                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004715                 lea     r9, [rdi+rbp]
.text:0000000000004719                 setnz   al
.text:000000000000471C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004720                 mov     r10d, eax
.text:0000000000004723                 jz      loc_47D0
.text:0000000000004729                 mov     rax, [rsp+0E8h+n]
.text:000000000000472E                 test    rax, rax
.text:0000000000004731                 jz      loc_4B60
.text:0000000000004737                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000473B                 lea     rbx, [rbp+rax+0]
.text:0000000000004740                 jnz     short loc_4770
.text:0000000000004742                 cmp     rax, 1
.text:0000000000004746                 jbe     short loc_4770
.text:0000000000004748                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000474D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000004752                 mov     [rsp+0E8h+ps], r9
.text:0000000000004757                 call    _strlen
.text:000000000000475C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004762                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004768                 mov     r11, rax
.text:000000000000476B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000004770                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000004770                 cmp     rbx, r11
.text:0000000000004773                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004778                 ja      loc_4D30
.text:000000000000477E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000004783                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000004788                 mov     rdi, r9         ; s1
.text:000000000000478B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000004790                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004795                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000479A                 call    _memcmp
.text:000000000000479F                 test    eax, eax
.text:00000000000047A1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000047A6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000047AC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000047B1                 jnz     loc_4D30
.text:00000000000047B7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000047BC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000047C2                 jnz     loc_5745
.text:00000000000047C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000047D0
.text:00000000000047D0 loc_47D0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000047D0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000047D0                 movzx   ebx, byte ptr [r9]
.text:00000000000047D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000047D7                 ja      def_47EE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000047DD                 lea     rcx, jpt_47EE
.text:00000000000047E4                 movzx   edx, bl
.text:00000000000047E7                 movsxd  rax, ds:(jpt_47EE - 812Ch)[rcx+rdx*4]
.text:00000000000047EB                 add     rax, rcx
.text:00000000000047EE                 jmp     rax             ; switch jump
.text:00000000000047F0 ; ---------------------------------------------------------------------------
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000047F0                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:00000000000047F0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000047F3
.text:00000000000047F3 loc_47F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000047F3                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:00000000000047F3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000047F7                 setnz   al
.text:00000000000047FA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000047FE                 jnz     short loc_480C
.text:0000000000004800                 mov     rax, [rsp+0E8h+s]
.text:0000000000004805                 cmp     byte ptr [rax+1], 0
.text:0000000000004809                 setnz   al
.text:000000000000480C
.text:000000000000480C loc_480C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000480C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004811                 setz    dl
.text:0000000000004814                 test    al, al
.text:0000000000004816                 jz      loc_4A68
.text:000000000000481C
.text:000000000000481C loc_481C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000481C                 xor     r12d, r12d
.text:000000000000481F                 xor     eax, eax
.text:0000000000004821                 nop     dword ptr [rax+00000000h]
.text:0000000000004828
.text:0000000000004828 loc_4828:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000004828                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000004828                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000482D                 jnz     loc_4942
.text:0000000000004833                 test    dl, dl
.text:0000000000004835                 jnz     loc_4942
.text:000000000000483B
.text:000000000000483B loc_483B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000483B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000004840                 test    rsi, rsi
.text:0000000000004843                 jz      short loc_4859
.text:0000000000004845                 mov     edx, ebx
.text:0000000000004847                 shr     dl, 5
.text:000000000000484A                 movzx   edx, dl
.text:000000000000484D                 mov     edx, [rsi+rdx*4]
.text:0000000000004850                 bt      edx, ebx
.text:0000000000004853                 jb      loc_49A3
.text:0000000000004859
.text:0000000000004859 loc_4859:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000004859                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000004859                 test    r10b, r10b
.text:000000000000485C                 jnz     loc_49A3
.text:0000000000004862                 xor     eax, 1
.text:0000000000004865                 add     rbp, 1
.text:0000000000004869                 and     eax, r8d
.text:000000000000486C
.text:000000000000486C loc_486C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000486C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000486C                 test    al, al
.text:000000000000486E                 jz      short loc_4890
.text:0000000000004870                 cmp     r13, r15
.text:0000000000004873                 jbe     short loc_487A
.text:0000000000004875                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000487A
.text:000000000000487A loc_487A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000487A                 lea     rax, [r15+1]
.text:000000000000487E                 cmp     r13, rax
.text:0000000000004881                 jbe     short loc_4889
.text:0000000000004883                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004889
.text:0000000000004889 loc_4889:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000004889                 add     r15, 2
.text:000000000000488D                 xor     r8d, r8d
.text:0000000000004890
.text:0000000000004890 loc_4890:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000004890                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000004890                 cmp     r15, r13
.text:0000000000004893                 jnb     short loc_4899
.text:0000000000004895                 mov     [r14+r15], bl
.text:0000000000004899
.text:0000000000004899 loc_4899:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000004899                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000489E                 add     r15, 1
.text:00000000000048A2                 mov     eax, 0
.text:00000000000048A7                 test    r12b, r12b
.text:00000000000048AA                 cmovz   edi, eax
.text:00000000000048AD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000048B2                 jmp     loc_46E8
.text:00000000000048B2 ; ---------------------------------------------------------------------------
.text:00000000000048B7                 align 20h
.text:00000000000048C0
.text:00000000000048C0 loc_48C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000048C0                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:00000000000048C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000048C3
.text:00000000000048C3 loc_48C3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000048C3                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:00000000000048C3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000048C7                 cmp     eax, 2
.text:00000000000048CA                 jz      loc_4E88
.text:00000000000048D0                 cmp     eax, 5
.text:00000000000048D3                 jz      loc_4E48
.text:00000000000048D9                 cmp     eax, 2
.text:00000000000048DC                 mov     ebx, 3Fh ; '?'
.text:00000000000048E1                 setz    dl
.text:00000000000048E4                 xor     r12d, r12d
.text:00000000000048E7                 xor     eax, eax
.text:00000000000048E9                 jmp     loc_4828
.text:00000000000048E9 ; ---------------------------------------------------------------------------
.text:00000000000048EE                 align 10h
.text:00000000000048F0
.text:00000000000048F0 loc_48F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000048F0                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:00000000000048F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000048F3
.text:00000000000048F3 loc_48F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000048F3                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:00000000000048F3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000048F8                 jz      loc_4E00
.text:00000000000048FE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004903                 xor     edx, edx
.text:0000000000004905                 xor     eax, eax
.text:0000000000004907                 mov     ebx, 27h ; '''
.text:000000000000490C                 jmp     loc_4828
.text:000000000000490C ; ---------------------------------------------------------------------------
.text:0000000000004911                 align 8
.text:0000000000004918
.text:0000000000004918 loc_4918:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004918                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004918                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000491D                 mov     ebx, 74h ; 't'
.text:0000000000004922
.text:0000000000004922 loc_4922:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000004922                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000004922                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004927                 setz    al
.text:000000000000492A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000492E                 jnz     loc_4A7E
.text:0000000000004934
.text:0000000000004934 loc_4934:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000004934                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000004934                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004939                 jnz     short loc_49A0
.text:000000000000493B
.text:000000000000493B loc_493B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000493B                 mov     ebx, edx
.text:000000000000493D                 xor     r12d, r12d
.text:0000000000004940                 xor     eax, eax
.text:0000000000004942
.text:0000000000004942 loc_4942:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000004942                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000004942                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004947                 jnz     loc_483B
.text:000000000000494D                 jmp     loc_4859
.text:000000000000494D ; ---------------------------------------------------------------------------
.text:0000000000004952                 align 8
.text:0000000000004958
.text:0000000000004958 loc_4958:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004958                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004958                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000495D                 mov     ebx, 62h ; 'b'
.text:0000000000004962                 jmp     short loc_4934
.text:0000000000004962 ; ---------------------------------------------------------------------------
.text:0000000000004964                 align 8
.text:0000000000004968
.text:0000000000004968 loc_4968:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004968                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004968                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000496D                 jz      loc_4D40
.text:0000000000004973                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004978                 jz      loc_4B90
.text:000000000000497E
.text:000000000000497E loc_497E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000497E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004983                 jz      loc_4B90
.text:0000000000004989                 cmp     [rsp+0E8h+n], 0
.text:000000000000498F                 jnz     loc_4D4B
.text:0000000000004995                 mov     ebx, 5Ch ; '\'
.text:000000000000499A                 nop     word ptr [rax+rax+00h]
.text:00000000000049A0
.text:00000000000049A0 loc_49A0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000049A0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000049A0                 xor     r12d, r12d
.text:00000000000049A3
.text:00000000000049A3 loc_49A3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000049A3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000049A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000049A8                 setz    dl
.text:00000000000049AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000049B0                 mov     eax, edx
.text:00000000000049B2                 jnz     loc_5208
.text:00000000000049B8                 mov     eax, r8d
.text:00000000000049BB                 xor     eax, 1
.text:00000000000049BE                 and     al, dl
.text:00000000000049C0                 jz      short loc_49F1
.text:00000000000049C2                 cmp     r13, r15
.text:00000000000049C5                 jbe     short loc_49CC
.text:00000000000049C7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000049CC
.text:00000000000049CC loc_49CC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000049CC                 lea     rdx, [r15+1]
.text:00000000000049D0                 cmp     r13, rdx
.text:00000000000049D3                 jbe     short loc_49DB
.text:00000000000049D5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000049DB
.text:00000000000049DB loc_49DB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000049DB                 lea     rdx, [r15+2]
.text:00000000000049DF                 cmp     r13, rdx
.text:00000000000049E2                 jbe     short loc_49EA
.text:00000000000049E4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000049EA
.text:00000000000049EA loc_49EA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000049EA                 add     r15, 3
.text:00000000000049EE                 mov     r8d, eax
.text:00000000000049F1
.text:00000000000049F1 loc_49F1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000049F1                 cmp     r13, r15
.text:00000000000049F4                 jbe     short loc_49FB
.text:00000000000049F6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000049FB
.text:00000000000049FB loc_49FB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000049FB                 add     r15, 1
.text:00000000000049FF                 add     rbp, 1
.text:0000000000004A03                 jmp     loc_4890
.text:0000000000004A03 ; ---------------------------------------------------------------------------
.text:0000000000004A08                 align 10h
.text:0000000000004A10
.text:0000000000004A10 loc_4A10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004A10                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004A10                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000004A15                 jnz     loc_4BE3
.text:0000000000004A1B                 xor     edx, edx
.text:0000000000004A1D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000004A22                 jz      loc_493B
.text:0000000000004A28                 add     rbp, 1
.text:0000000000004A2C                 jmp     loc_46E8
.text:0000000000004A2C ; ---------------------------------------------------------------------------
.text:0000000000004A31                 align 8
.text:0000000000004A38
.text:0000000000004A38 loc_4A38:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004A38                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004A38                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000004A3D                 setz    dl
.text:0000000000004A40                 xor     eax, eax
.text:0000000000004A42                 jmp     loc_4828
.text:0000000000004A42 ; ---------------------------------------------------------------------------
.text:0000000000004A47                 align 10h
.text:0000000000004A50
.text:0000000000004A50 loc_4A50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004A50                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004A50                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000004A55                 mov     ebx, 61h ; 'a'
.text:0000000000004A5A                 jmp     loc_4934
.text:0000000000004A5A ; ---------------------------------------------------------------------------
.text:0000000000004A5F                 align 20h
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004A60                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004A60                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004A65                 setz    dl
.text:0000000000004A68
.text:0000000000004A68 loc_4A68:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004A68                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004A68                 test    rbp, rbp
.text:0000000000004A6B                 jnz     loc_481C
.text:0000000000004A71
.text:0000000000004A71 loc_4A71:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000004A71                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000004A71                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004A76                 and     al, dl
.text:0000000000004A78                 jz      loc_4828
.text:0000000000004A7E
.text:0000000000004A7E loc_4A7E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000004A7E                 mov     rbp, r11
.text:0000000000004A81                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004A89                 jmp     loc_5189
.text:0000000000004A89 ; ---------------------------------------------------------------------------
.text:0000000000004A8E                 align 10h
.text:0000000000004A90
.text:0000000000004A90 loc_4A90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004A90                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004A90                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004A95                 setz    dl
.text:0000000000004A98                 xor     r12d, r12d
.text:0000000000004A9B                 jmp     short loc_4A71
.text:0000000000004A9B ; ---------------------------------------------------------------------------
.text:0000000000004A9D                 align 20h
.text:0000000000004AA0
.text:0000000000004AA0 loc_4AA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004AA0                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004AA0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000004AA5                 mov     ebx, 20h ; ' '
.text:0000000000004AAA                 setz    dl
.text:0000000000004AAD                 jmp     short loc_4A71
.text:0000000000004AAD ; ---------------------------------------------------------------------------
.text:0000000000004AAF                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 loc_4AB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004AB0                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004AB0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000004AB5                 mov     ebx, 72h ; 'r'
.text:0000000000004ABA                 jmp     loc_4922
.text:0000000000004ABA ; ---------------------------------------------------------------------------
.text:0000000000004ABF                 align 20h
.text:0000000000004AC0
.text:0000000000004AC0 loc_4AC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004AC0                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004AC0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000004AC5                 mov     ebx, 66h ; 'f'
.text:0000000000004ACA                 jmp     loc_4934
.text:0000000000004ACA ; ---------------------------------------------------------------------------
.text:0000000000004ACF                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 loc_4AD0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004AD0                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004AD0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000004AD5                 mov     ebx, 76h ; 'v'
.text:0000000000004ADA                 jmp     loc_4934
.text:0000000000004ADA ; ---------------------------------------------------------------------------
.text:0000000000004ADF                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 loc_4AE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004AE0                                         ; DATA XREF: .rodata:jpt_47EE↓o
.text:0000000000004AE0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000004AE5                 mov     ebx, 6Eh ; 'n'
.text:0000000000004AEA                 jmp     loc_4922
.text:0000000000004AEA ; ---------------------------------------------------------------------------
.text:0000000000004AEF                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 def_4B7A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000004AF0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000004AF0                                         ; DATA XREF: ...
.text:0000000000004AF0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004AF3                 nop     dword ptr [rax+rax+00h]
.text:0000000000004AF8
.text:0000000000004AF8 def_47EE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000004AF8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000004AF8                                         ; DATA XREF: ...
.text:0000000000004AF8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000004AFE                 jnz     loc_4EA8
.text:0000000000004B04                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000004B09                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000004B0E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004B13                 call    ___ctype_b_loc
.text:0000000000004B18                 mov     rcx, [rax]
.text:0000000000004B1B                 movzx   edx, bl
.text:0000000000004B1E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004B24                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004B2A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000004B2F                 mov     edi, 1
.text:0000000000004B34                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000004B38                 and     ax, 4000h
.text:0000000000004B3C                 setnz   r12b
.text:0000000000004B40                 setz    al
.text:0000000000004B43                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004B47
.text:0000000000004B47 loc_4B47:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004B47                 test    al, al
.text:0000000000004B49                 jnz     loc_54E1
.text:0000000000004B4F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004B54                 setz    dl
.text:0000000000004B57                 jmp     loc_4828
.text:0000000000004B57 ; ---------------------------------------------------------------------------
.text:0000000000004B5C                 align 20h
.text:0000000000004B60
.text:0000000000004B60 loc_4B60:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004B60                 movzx   ebx, byte ptr [r9]
.text:0000000000004B64                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004B67                 ja      short def_4B7A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004B69                 lea     rcx, jpt_4B7A
.text:0000000000004B70                 movzx   edx, bl
.text:0000000000004B73                 movsxd  rax, ds:(jpt_4B7A - 8328h)[rcx+rdx*4]
.text:0000000000004B77                 add     rax, rcx
.text:0000000000004B7A                 jmp     rax             ; switch jump
.text:0000000000004B7A ; ---------------------------------------------------------------------------
.text:0000000000004B7C                 align 20h
.text:0000000000004B80
.text:0000000000004B80 loc_4B80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004B80                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004B80                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004B83                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004B88                 jnz     loc_497E
.text:0000000000004B8E                 xchg    ax, ax
.text:0000000000004B90
.text:0000000000004B90 loc_4B90:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004B90                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004B90                 mov     edx, 5Ch ; '\'
.text:0000000000004B95                 mov     ebx, 5Ch ; '\'
.text:0000000000004B9A                 jmp     loc_4934
.text:0000000000004B9A ; ---------------------------------------------------------------------------
.text:0000000000004B9F                 align 20h
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004BA0                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004BA0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004BA5                 xor     r10d, r10d
.text:0000000000004BA8                 mov     ebx, 66h ; 'f'
.text:0000000000004BAD                 jmp     loc_4934
.text:0000000000004BAD ; ---------------------------------------------------------------------------
.text:0000000000004BB2                 align 8
.text:0000000000004BB8
.text:0000000000004BB8 loc_4BB8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004BB8                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004BB8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000004BBD                 xor     r10d, r10d
.text:0000000000004BC0                 mov     ebx, 6Eh ; 'n'
.text:0000000000004BC5                 jmp     loc_4922
.text:0000000000004BC5 ; ---------------------------------------------------------------------------
.text:0000000000004BCA                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 loc_4BD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004BD0                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004BD0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004BD5                 jmp     loc_49A0
.text:0000000000004BD5 ; ---------------------------------------------------------------------------
.text:0000000000004BDA                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 loc_4BE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004BE0                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004BE0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000004BE3
.text:0000000000004BE3 loc_4BE3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000004BE3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004BE8                 setz    dl
.text:0000000000004BEB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004BF0                 jnz     loc_578A
.text:0000000000004BF6                 mov     eax, r8d
.text:0000000000004BF9                 mov     rcx, r15
.text:0000000000004BFC                 xor     eax, 1
.text:0000000000004BFF                 and     al, dl
.text:0000000000004C01                 jz      short loc_4C30
.text:0000000000004C03                 cmp     r13, r15
.text:0000000000004C06                 jbe     short loc_4C0D
.text:0000000000004C08                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004C0D
.text:0000000000004C0D loc_4C0D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000004C0D                 lea     rcx, [r15+1]
.text:0000000000004C11                 cmp     r13, rcx
.text:0000000000004C14                 jbe     short loc_4C1C
.text:0000000000004C16                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004C1C
.text:0000000000004C1C loc_4C1C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000004C1C                 lea     rcx, [r15+2]
.text:0000000000004C20                 cmp     r13, rcx
.text:0000000000004C23                 ja      loc_5259
.text:0000000000004C29
.text:0000000000004C29 loc_4C29:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000004C29                 lea     rcx, [r15+3]
.text:0000000000004C2D                 mov     r8d, eax
.text:0000000000004C30
.text:0000000000004C30 loc_4C30:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000004C30                 cmp     r13, rcx
.text:0000000000004C33                 jbe     short loc_4C3A
.text:0000000000004C35                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000004C3A
.text:0000000000004C3A loc_4C3A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000004C3A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004C3F                 lea     r15, [rcx+1]
.text:0000000000004C43                 jz      loc_5249
.text:0000000000004C49                 lea     rax, [rbp+1]
.text:0000000000004C4D                 cmp     rax, r11
.text:0000000000004C50                 jnb     short loc_4C6B
.text:0000000000004C52                 mov     rax, [rsp+0E8h+s]
.text:0000000000004C57                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000004C5C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004C60                 sub     eax, 30h ; '0'
.text:0000000000004C63                 cmp     al, 9
.text:0000000000004C65                 jbe     loc_5499
.text:0000000000004C6B
.text:0000000000004C6B loc_4C6B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000004C6B                 mov     eax, r12d
.text:0000000000004C6E                 mov     ebx, 30h ; '0'
.text:0000000000004C73                 xor     r12d, r12d
.text:0000000000004C76                 jmp     loc_4828
.text:0000000000004C76 ; ---------------------------------------------------------------------------
.text:0000000000004C7B                 align 20h
.text:0000000000004C80
.text:0000000000004C80 loc_4C80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004C80                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004C80                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004C85                 mov     r12d, r10d
.text:0000000000004C88                 setz    dl
.text:0000000000004C8B                 xor     r10d, r10d
.text:0000000000004C8E                 xor     eax, eax
.text:0000000000004C90                 jmp     loc_4828
.text:0000000000004C90 ; ---------------------------------------------------------------------------
.text:0000000000004C95                 align 8
.text:0000000000004C98
.text:0000000000004C98 loc_4C98:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004C98                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004C98                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000004C9D                 setz    dl
.text:0000000000004CA0                 xor     r10d, r10d
.text:0000000000004CA3                 jmp     loc_4A68
.text:0000000000004CA3 ; ---------------------------------------------------------------------------
.text:0000000000004CA8                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 loc_4CB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004CB0                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004CB0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004CB5                 setz    dl
.text:0000000000004CB8                 xor     r10d, r10d
.text:0000000000004CBB                 xor     r12d, r12d
.text:0000000000004CBE                 jmp     loc_4A71
.text:0000000000004CBE ; ---------------------------------------------------------------------------
.text:0000000000004CC3                 align 8
.text:0000000000004CC8
.text:0000000000004CC8 loc_4CC8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004CC8                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004CC8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000004CCD                 mov     r12d, r10d
.text:0000000000004CD0                 mov     ebx, 20h ; ' '
.text:0000000000004CD5                 setz    dl
.text:0000000000004CD8                 xor     r10d, r10d
.text:0000000000004CDB                 jmp     loc_4A71
.text:0000000000004CE0 ; ---------------------------------------------------------------------------
.text:0000000000004CE0
.text:0000000000004CE0 loc_4CE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004CE0                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004CE0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000004CE5                 xor     r10d, r10d
.text:0000000000004CE8                 mov     ebx, 72h ; 'r'
.text:0000000000004CED                 jmp     loc_4922
.text:0000000000004CED ; ---------------------------------------------------------------------------
.text:0000000000004CF2                 align 8
.text:0000000000004CF8
.text:0000000000004CF8 loc_4CF8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004CF8                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004CF8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000004CFD                 jmp     loc_49A0
.text:0000000000004CFD ; ---------------------------------------------------------------------------
.text:0000000000004D02                 align 8
.text:0000000000004D08
.text:0000000000004D08 loc_4D08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004D08                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004D08                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000004D0D                 xor     r10d, r10d
.text:0000000000004D10                 mov     ebx, 74h ; 't'
.text:0000000000004D15                 jmp     loc_4922
.text:0000000000004D15 ; ---------------------------------------------------------------------------
.text:0000000000004D1A                 align 20h
.text:0000000000004D20
.text:0000000000004D20 loc_4D20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004D20                                         ; DATA XREF: .rodata:jpt_4B7A↓o
.text:0000000000004D20                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000004D25                 jmp     loc_49A0
.text:0000000000004D25 ; ---------------------------------------------------------------------------
.text:0000000000004D2A                 align 10h
.text:0000000000004D30
.text:0000000000004D30 loc_4D30:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000004D30                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000004D30                 xor     r10d, r10d
.text:0000000000004D33                 jmp     loc_47D0
.text:0000000000004D33 ; ---------------------------------------------------------------------------
.text:0000000000004D38                 align 20h
.text:0000000000004D40
.text:0000000000004D40 loc_4D40:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004D40                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004D45                 jnz     loc_56B0
.text:0000000000004D4B
.text:0000000000004D4B loc_4D4B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000004D4B                 add     rbp, 1
.text:0000000000004D4F                 mov     eax, r8d
.text:0000000000004D52                 xor     r12d, r12d
.text:0000000000004D55                 mov     ebx, 5Ch ; '\'
.text:0000000000004D5A                 jmp     loc_486C
.text:0000000000004D5A ; ---------------------------------------------------------------------------
.text:0000000000004D5F                 align 20h
.text:0000000000004D60
.text:0000000000004D60 loc_4D60:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004D60                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004D65                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004D6A                 mov     r12d, r8d
.text:0000000000004D6D                 mov     rbp, r11
.text:0000000000004D70                 setz    dl
.text:0000000000004D73                 mov     eax, ebx
.text:0000000000004D75                 test    r15, r15
.text:0000000000004D78                 setz    cl
.text:0000000000004D7B                 and     eax, edx
.text:0000000000004D7D                 and     al, cl
.text:0000000000004D7F                 jnz     loc_57E6
.text:0000000000004D85                 mov     eax, ebx
.text:0000000000004D87                 xor     eax, 1
.text:0000000000004D8A                 and     dl, al
.text:0000000000004D8C                 jz      loc_56FC
.text:0000000000004D92                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004D97                 jz      loc_56FA
.text:0000000000004D9D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004DA2                 jnz     loc_579D
.text:0000000000004DA8                 test    r13, r13
.text:0000000000004DAB                 setz    al
.text:0000000000004DAE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004DB4                 setnz   dl
.text:0000000000004DB7                 and     al, dl
.text:0000000000004DB9                 jz      loc_57DC
.text:0000000000004DBF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004DC4
.text:0000000000004DC4 loc_4DC4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004DC4                 lea     rbx, asc_809D   ; "'"
.text:0000000000004DCB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000004DCF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004DD7                 mov     r15d, 1
.text:0000000000004DDD                 mov     [rsp+0E8h+n], 1
.text:0000000000004DE6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004DEB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004DF0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000004DF4                 jmp     loc_46D3
.text:0000000000004DF4 ; ---------------------------------------------------------------------------
.text:0000000000004DF9                 align 20h
.text:0000000000004E00
.text:0000000000004E00 loc_4E00:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000004E00                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004E05                 jnz     loc_56B0
.text:0000000000004E0B                 test    r13, r13
.text:0000000000004E0E                 jz      loc_5210
.text:0000000000004E14                 xor     edx, edx
.text:0000000000004E16                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004E1C                 jnz     loc_5210
.text:0000000000004E22
.text:0000000000004E22 loc_4E22:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000004E22                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000004E22                 mov     [rsp+0E8h+var_98], r13
.text:0000000000004E27                 add     r15, 3
.text:0000000000004E2B                 xor     eax, eax
.text:0000000000004E2D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004E32                 xor     r8d, r8d
.text:0000000000004E35                 mov     r13, rdx
.text:0000000000004E38                 mov     ebx, 27h ; '''
.text:0000000000004E3D                 jmp     loc_4859
.text:0000000000004E3D ; ---------------------------------------------------------------------------
.text:0000000000004E42                 align 8
.text:0000000000004E48
.text:0000000000004E48 loc_4E48:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004E48                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000004E4D                 jz      short loc_4E70
.text:0000000000004E4F                 lea     rcx, [rbp+2]
.text:0000000000004E53                 cmp     rcx, r11
.text:0000000000004E56                 jnb     short loc_4E70
.text:0000000000004E58                 mov     rax, [rsp+0E8h+s]
.text:0000000000004E5D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004E62                 jz      loc_55F2
.text:0000000000004E68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004E70
.text:0000000000004E70 loc_4E70:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004E70                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004E70                 xor     edx, edx
.text:0000000000004E72                 xor     r12d, r12d
.text:0000000000004E75                 xor     eax, eax
.text:0000000000004E77                 mov     ebx, 3Fh ; '?'
.text:0000000000004E7C                 jmp     loc_4828
.text:0000000000004E7C ; ---------------------------------------------------------------------------
.text:0000000000004E81                 align 8
.text:0000000000004E88
.text:0000000000004E88 loc_4E88:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004E88                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004E8D                 jnz     loc_56B0
.text:0000000000004E93                 xor     r12d, r12d
.text:0000000000004E96                 xor     eax, eax
.text:0000000000004E98                 mov     ebx, 3Fh ; '?'
.text:0000000000004E9D                 jmp     loc_4859
.text:0000000000004E9D ; ---------------------------------------------------------------------------
.text:0000000000004EA2                 align 8
.text:0000000000004EA8
.text:0000000000004EA8 loc_4EA8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004EA8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004EB0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EB4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004EC0                 mov     [rsp+0E8h+ps], rax
.text:0000000000004EC5                 jnz     short loc_4EF4
.text:0000000000004EC7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004ECC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004ED1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004ED6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000004EDB                 call    _strlen
.text:0000000000004EE0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004EE6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004EEC                 mov     r11, rax
.text:0000000000004EEF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004EF4
.text:0000000000004EF4 loc_4EF4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004EF4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000004EFC                 xor     ecx, ecx
.text:0000000000004EFE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004F02                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004F07                 mov     rbx, rcx
.text:0000000000004F0A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004F12                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004F17                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000004F1C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000004F24                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000004F29                 mov     [rsp+0E8h+var_78], r13
.text:0000000000004F2E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000004F33
.text:0000000000004F33 loc_4F33:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000004F33                 mov     rax, [rsp+0E8h+s]
.text:0000000000004F38                 lea     r14, [rbp+rbx+0]
.text:0000000000004F3D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004F42                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004F47                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000004F4C                 lea     r13, [rax+r14]
.text:0000000000004F50                 sub     rdx, r14
.text:0000000000004F53                 mov     rsi, r13
.text:0000000000004F56                 call    rpl_mbrtowc
.text:0000000000004F5B                 test    rax, rax
.text:0000000000004F5E                 mov     r15, rax
.text:0000000000004F61                 jz      short loc_4FB1
.text:0000000000004F63                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F67                 jz      loc_5585
.text:0000000000004F6D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004F71                 jz      loc_5511
.text:0000000000004F77                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004F7C                 setz    al
.text:0000000000004F7F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004F83                 jnz     loc_5120
.text:0000000000004F89
.text:0000000000004F89 loc_4F89:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004F89                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004F89                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004F90                 call    _iswprint
.text:0000000000004F95                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000004F9A                 test    eax, eax
.text:0000000000004F9C                 mov     eax, 0
.text:0000000000004FA1                 cmovz   r12d, eax
.text:0000000000004FA5                 add     rbx, r15
.text:0000000000004FA8                 call    _mbsinit
.text:0000000000004FAD                 test    eax, eax
.text:0000000000004FAF                 jz      short loc_4F33
.text:0000000000004FB1
.text:0000000000004FB1 loc_4FB1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004FB1                 mov     edx, r12d
.text:0000000000004FB4                 mov     rdi, rbx
.text:0000000000004FB7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004FBD                 xor     edx, 1
.text:0000000000004FC0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004FC5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004FCB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000004FCF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004FD7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004FDC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004FE1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004FE6
.text:0000000000004FE6 loc_4FE6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004FE6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004FE6                 cmp     rdi, 1
.text:0000000000004FEA                 jbe     loc_55EB
.text:0000000000004FF0
.text:0000000000004FF0 loc_4FF0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004FF0                 mov     rcx, rdi
.text:0000000000004FF3                 xor     esi, esi
.text:0000000000004FF5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000004FFB                 add     rcx, rbp
.text:0000000000004FFE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000005003                 jmp     loc_50BE
.text:0000000000005003 ; ---------------------------------------------------------------------------
.text:0000000000005008                 align 10h
.text:0000000000005010
.text:0000000000005010 loc_5010:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000005010                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005015                 setz    al
.text:0000000000005018                 test    r9b, r9b
.text:000000000000501B                 jnz     loc_54D0
.text:0000000000005021                 mov     esi, r8d
.text:0000000000005024                 xor     esi, 1
.text:0000000000005027                 and     al, sil
.text:000000000000502A                 jz      short loc_505B
.text:000000000000502C                 cmp     r13, r15
.text:000000000000502F                 jbe     short loc_5036
.text:0000000000005031                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005036
.text:0000000000005036 loc_5036:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000005036                 lea     rsi, [r15+1]
.text:000000000000503A                 cmp     r13, rsi
.text:000000000000503D                 jbe     short loc_5045
.text:000000000000503F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000005045
.text:0000000000005045 loc_5045:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000005045                 lea     rsi, [r15+2]
.text:0000000000005049                 cmp     r13, rsi
.text:000000000000504C                 jbe     short loc_5054
.text:000000000000504E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000005054
.text:0000000000005054 loc_5054:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000005054                 add     r15, 3
.text:0000000000005058                 mov     r8d, eax
.text:000000000000505B
.text:000000000000505B loc_505B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000505B                 cmp     r13, r15
.text:000000000000505E                 jbe     short loc_5065
.text:0000000000005060                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000005065
.text:0000000000005065 loc_5065:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000005065                 lea     rax, [r15+1]
.text:0000000000005069                 cmp     r13, rax
.text:000000000000506C                 jbe     short loc_507B
.text:000000000000506E                 mov     eax, ebx
.text:0000000000005070                 shr     al, 6
.text:0000000000005073                 add     eax, 30h ; '0'
.text:0000000000005076                 mov     [r14+r15+1], al
.text:000000000000507B
.text:000000000000507B loc_507B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000507B                 lea     rax, [r15+2]
.text:000000000000507F                 cmp     r13, rax
.text:0000000000005082                 jbe     short loc_5094
.text:0000000000005084                 mov     eax, ebx
.text:0000000000005086                 shr     al, 3
.text:0000000000005089                 and     eax, 7
.text:000000000000508C                 add     eax, 30h ; '0'
.text:000000000000508F                 mov     [r14+r15+2], al
.text:0000000000005094
.text:0000000000005094 loc_5094:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000005094                 and     ebx, 7
.text:0000000000005097                 add     rbp, 1
.text:000000000000509B                 add     r15, 3
.text:000000000000509F                 add     ebx, 30h ; '0'
.text:00000000000050A2                 cmp     rbp, rcx
.text:00000000000050A5                 jnb     loc_4890
.text:00000000000050AB                 mov     esi, edx
.text:00000000000050AD
.text:00000000000050AD loc_50AD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000050AD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000050AD                 cmp     r13, r15
.text:00000000000050B0                 jbe     short loc_50B6
.text:00000000000050B2                 mov     [r14+r15], bl
.text:00000000000050B6
.text:00000000000050B6 loc_50B6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000050B6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000050BA                 add     r15, 1
.text:00000000000050BE
.text:00000000000050BE loc_50BE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000050BE                 test    dl, dl
.text:00000000000050C0                 jnz     loc_5010
.text:00000000000050C6                 mov     eax, esi
.text:00000000000050C8                 xor     eax, 1
.text:00000000000050CB                 and     eax, r8d
.text:00000000000050CE                 test    r10b, r10b
.text:00000000000050D1                 jz      short loc_50E1
.text:00000000000050D3                 cmp     r13, r15
.text:00000000000050D6                 jbe     short loc_50DD
.text:00000000000050D8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000050DD
.text:00000000000050DD loc_50DD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000050DD                 add     r15, 1
.text:00000000000050E1
.text:00000000000050E1 loc_50E1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000050E1                 add     rbp, 1
.text:00000000000050E5                 cmp     rbp, rcx
.text:00000000000050E8                 jnb     loc_486C
.text:00000000000050EE                 test    al, al
.text:00000000000050F0                 jz      loc_54EE
.text:00000000000050F6                 cmp     r13, r15
.text:00000000000050F9                 jbe     short loc_5100
.text:00000000000050FB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005100
.text:0000000000005100 loc_5100:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000005100                 lea     rax, [r15+1]
.text:0000000000005104                 cmp     r13, rax
.text:0000000000005107                 jbe     short loc_510F
.text:0000000000005109                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000510F
.text:000000000000510F loc_510F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000510F                 add     r15, 2
.text:0000000000005113                 xor     r10d, r10d
.text:0000000000005116                 xor     r8d, r8d
.text:0000000000005119                 jmp     short loc_50AD
.text:0000000000005119 ; ---------------------------------------------------------------------------
.text:000000000000511B                 align 20h
.text:0000000000005120
.text:0000000000005120 loc_5120:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000005120                 cmp     r15, 1
.text:0000000000005124                 jz      loc_4F89
.text:000000000000512A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000512F                 lea     rcx, [rdi+r15]
.text:0000000000005133                 lea     rdx, [rdi+r14+1]
.text:0000000000005138                 lea     r8, [rcx+r14]
.text:000000000000513C                 jmp     short loc_514D
.text:000000000000513C ; ---------------------------------------------------------------------------
.text:000000000000513E                 align 20h
.text:0000000000005140
.text:0000000000005140 loc_5140:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000005140                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000005140                 add     rdx, 1
.text:0000000000005144                 cmp     r8, rdx
.text:0000000000005147                 jz      loc_4F89
.text:000000000000514D
.text:000000000000514D loc_514D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000514D                 movzx   ecx, byte ptr [rdx]
.text:0000000000005150                 sub     ecx, 5Bh ; '['
.text:0000000000005153                 cmp     cl, 21h ; '!'
.text:0000000000005156                 ja      short loc_5140
.text:0000000000005158                 mov     esi, 1
.text:000000000000515D                 shl     rsi, cl
.text:0000000000005160                 mov     rcx, rsi
.text:0000000000005163                 mov     rsi, 20000002Bh
.text:000000000000516D                 test    rcx, rsi
.text:0000000000005170                 jz      short loc_5140
.text:0000000000005172                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005177                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000517C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000005181                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005189
.text:0000000000005189 loc_5189:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000005189                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000005189                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000518E                 jz      short loc_51A0
.text:0000000000005190                 test    al, al
.text:0000000000005192                 mov     eax, 4
.text:0000000000005197                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000519C                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000051A0
.text:00000000000051A0 loc_51A0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000051A0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000051A0                 sub     rsp, 8
.text:00000000000051A4                 mov     rcx, rbp
.text:00000000000051A7                 mov     rsi, r13
.text:00000000000051AA                 push    [rsp+0F0h+var_88]
.text:00000000000051AE                 push    [rsp+0F8h+var_80]
.text:00000000000051B2                 mov     rdi, r14
.text:00000000000051B5                 push    0
.text:00000000000051B7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000051BF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000051C4                 mov     rdx, [rsp+108h+s]
.text:00000000000051C9                 and     r9d, 0FFFFFFFDh
.text:00000000000051CD                 call    quotearg_buffer_restyled
.text:00000000000051D2                 add     rsp, 20h
.text:00000000000051D6                 mov     r15, rax
.text:00000000000051D9
.text:00000000000051D9 loc_51D9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000051D9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000051D9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000051E1                 xor     rbx, fs:28h
.text:00000000000051EA                 mov     rax, r15
.text:00000000000051ED                 jnz     loc_57F3
.text:00000000000051F3                 add     rsp, 0B8h
.text:00000000000051FA                 pop     rbx
.text:00000000000051FB                 pop     rbp
.text:00000000000051FC                 pop     r12
.text:00000000000051FE                 pop     r13
.text:0000000000005200                 pop     r14
.text:0000000000005202                 pop     r15
.text:0000000000005204                 retn
.text:0000000000005204 ; ---------------------------------------------------------------------------
.text:0000000000005205                 align 8
.text:0000000000005208
.text:0000000000005208 loc_5208:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000005208                 mov     rbp, r11
.text:000000000000520B                 jmp     loc_5189
.text:0000000000005210 ; ---------------------------------------------------------------------------
.text:0000000000005210
.text:0000000000005210 loc_5210:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000005210                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000005210                 cmp     r13, r15
.text:0000000000005213                 jbe     short loc_521A
.text:0000000000005215                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000521A
.text:000000000000521A loc_521A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000521A                 lea     rax, [r15+1]
.text:000000000000521E                 cmp     r13, rax
.text:0000000000005221                 jbe     short loc_5229
.text:0000000000005223                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000005229
.text:0000000000005229 loc_5229:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000005229                 lea     rax, [r15+2]
.text:000000000000522D                 cmp     r13, rax
.text:0000000000005230                 jbe     loc_5822
.text:0000000000005236                 mov     rdx, r13
.text:0000000000005239                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000523F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000005244                 jmp     loc_4E22
.text:0000000000005249 ; ---------------------------------------------------------------------------
.text:0000000000005249
.text:0000000000005249 loc_5249:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000005249                 mov     eax, r12d
.text:000000000000524C                 mov     ebx, 30h ; '0'
.text:0000000000005251                 xor     r12d, r12d
.text:0000000000005254                 jmp     loc_4859
.text:0000000000005259 ; ---------------------------------------------------------------------------
.text:0000000000005259
.text:0000000000005259 loc_5259:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000005259                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000525F                 jmp     loc_4C29
.text:0000000000005264 ; ---------------------------------------------------------------------------
.text:0000000000005264
.text:0000000000005264 loc_5264:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005264                                         ; DATA XREF: .rodata:jpt_4691↓o
.text:0000000000005264                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000005266                 jnz     loc_4693        ; jumptable 00000000000121F1 case 1
.text:000000000000526C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005271
.text:0000000000005271 loc_5271:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000005271                 test    r13, r13
.text:0000000000005274                 jnz     loc_580A
.text:000000000000527A                 lea     rax, asc_809D   ; "'"
.text:0000000000005281                 mov     [rsp+0E8h+var_98], 0
.text:000000000000528A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000528F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005294                 xor     r12d, r12d
.text:0000000000005297                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000529C                 mov     [rsp+0E8h+n], 1
.text:00000000000052A5                 mov     [rsp+0E8h+s2], rax
.text:00000000000052AA                 mov     r15d, 1
.text:00000000000052B0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000052B8                 jmp     loc_46D3
.text:00000000000052B8 ; ---------------------------------------------------------------------------
.text:00000000000052BD                 align 20h
.text:00000000000052C0
.text:00000000000052C0 loc_52C0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000052C0                                         ; DATA XREF: .rodata:jpt_4691↓o
.text:00000000000052C0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000052C2                 jnz     loc_56BD
.text:00000000000052C8                 test    r13, r13
.text:00000000000052CB                 jz      loc_54F6
.text:00000000000052D1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000052D5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000052DA                 xor     r12d, r12d
.text:00000000000052DD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000052E2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000052EB
.text:00000000000052EB loc_52EB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000052EB                 lea     rax, unk_809B
.text:00000000000052F2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000052F7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000052FC                 mov     [rsp+0E8h+n], 1
.text:0000000000005305                 mov     r15d, 1
.text:000000000000530B                 mov     [rsp+0E8h+s2], rax
.text:0000000000005310                 jmp     loc_46D3
.text:0000000000005315 ; ---------------------------------------------------------------------------
.text:0000000000005315
.text:0000000000005315 loc_5315:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005315                                         ; DATA XREF: .rodata:jpt_4691↓o
.text:0000000000005315                 lea     rax, unk_809B   ; jumptable 00000000000121F1 case 6
.text:000000000000531C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005321                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005326                 xor     r12d, r12d
.text:0000000000005329                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005332                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005337                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000533C                 mov     [rsp+0E8h+n], 1
.text:0000000000005345                 xor     r15d, r15d
.text:0000000000005348                 mov     [rsp+0E8h+s2], rax
.text:000000000000534D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000005355                 jmp     loc_46D3
.text:000000000000535A ; ---------------------------------------------------------------------------
.text:000000000000535A
.text:000000000000535A loc_535A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000535A                                         ; DATA XREF: .rodata:jpt_4691↓o
.text:000000000000535A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000535F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005364                 xor     r12d, r12d
.text:0000000000005367                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005370                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005375                 xor     r15d, r15d
.text:0000000000005378                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000537D                 mov     [rsp+0E8h+n], 0
.text:0000000000005386                 mov     [rsp+0E8h+s2], 0
.text:000000000000538F                 jmp     loc_46D3
.text:0000000000005394 ; ---------------------------------------------------------------------------
.text:0000000000005394
.text:0000000000005394 loc_5394:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005394                                         ; DATA XREF: .rodata:jpt_4691↓o
.text:0000000000005394                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000005399                 jz      short loc_53F1
.text:000000000000539B                 lea     rsi, asc_809F   ; "`"
.text:00000000000053A2                 xor     edi, edi        ; domainname
.text:00000000000053A4                 mov     edx, 5          ; category
.text:00000000000053A9                 call    _dcgettext
.text:00000000000053AE                 mov     rcx, rax
.text:00000000000053B1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000053B6                 lea     rax, asc_809F   ; "`"
.text:00000000000053BD                 cmp     rcx, rax
.text:00000000000053C0                 jz      loc_575E
.text:00000000000053C6
.text:00000000000053C6 loc_53C6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000053C6                 lea     rsi, asc_809D   ; "'"
.text:00000000000053CD                 xor     edi, edi        ; domainname
.text:00000000000053CF                 mov     edx, 5          ; category
.text:00000000000053D4                 call    _dcgettext
.text:00000000000053D9                 mov     rcx, rax
.text:00000000000053DC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000053E1                 lea     rax, asc_809D   ; "'"
.text:00000000000053E8                 cmp     rcx, rax
.text:00000000000053EB                 jz      loc_5774
.text:00000000000053F1
.text:00000000000053F1 loc_53F1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000053F1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000053F1                 xor     r15d, r15d
.text:00000000000053F4                 test    ebx, ebx
.text:00000000000053F6                 jz      loc_55BD
.text:00000000000053FC
.text:00000000000053FC loc_53FC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000053FC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000053FC                 test    ebx, ebx
.text:00000000000053FE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000005403                 setnz   [rsp+0E8h+var_D9]
.text:0000000000005408                 xor     r12d, r12d
.text:000000000000540B                 mov     rdi, rbx        ; s
.text:000000000000540E                 call    _strlen
.text:0000000000005413                 mov     [rsp+0E8h+s2], rbx
.text:0000000000005418                 mov     [rsp+0E8h+n], rax
.text:000000000000541D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005422                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005427                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005430                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005435                 jmp     loc_46D3
.text:000000000000543A ; ---------------------------------------------------------------------------
.text:000000000000543A
.text:000000000000543A loc_543A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000543A                                         ; DATA XREF: .rodata:jpt_4691↓o
.text:000000000000543A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000543F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005444                 xor     r12d, r12d
.text:0000000000005447                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005450                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005455                 xor     r15d, r15d
.text:0000000000005458                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000545D                 mov     [rsp+0E8h+n], 0
.text:0000000000005466                 mov     [rsp+0E8h+s2], 0
.text:000000000000546F                 jmp     loc_46D3
.text:0000000000005474 ; ---------------------------------------------------------------------------
.text:0000000000005474
.text:0000000000005474 loc_5474:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005474                                         ; DATA XREF: .rodata:jpt_4691↓o
.text:0000000000005474                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000005479                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000547E                 xor     r12d, r12d
.text:0000000000005481                 mov     [rsp+0E8h+var_98], 0
.text:000000000000548A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000548F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005494                 jmp     loc_46B3
.text:0000000000005499 ; ---------------------------------------------------------------------------
.text:0000000000005499
.text:0000000000005499 loc_5499:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000005499                 cmp     r13, r15
.text:000000000000549C                 jbe     short loc_54A3
.text:000000000000549E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000054A3
.text:00000000000054A3 loc_54A3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000054A3                 lea     rax, [rcx+2]
.text:00000000000054A7                 cmp     r13, rax
.text:00000000000054AA                 jbe     short loc_54B2
.text:00000000000054AC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000054B2
.text:00000000000054B2 loc_54B2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000054B2                 mov     eax, r12d
.text:00000000000054B5                 lea     r15, [rcx+3]
.text:00000000000054B9                 xor     r12d, r12d
.text:00000000000054BC                 mov     ebx, 30h ; '0'
.text:00000000000054C1                 jmp     loc_4828
.text:00000000000054C1 ; ---------------------------------------------------------------------------
.text:00000000000054C6                 align 10h
.text:00000000000054D0
.text:00000000000054D0 loc_54D0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000054D0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000054D5                 mov     rbp, r11
.text:00000000000054D8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000054DC                 jmp     loc_5189
.text:00000000000054E1 ; ---------------------------------------------------------------------------
.text:00000000000054E1
.text:00000000000054E1 loc_54E1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000054E1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000054E6                 xor     r12d, r12d
.text:00000000000054E9                 jmp     loc_4FF0
.text:00000000000054EE ; ---------------------------------------------------------------------------
.text:00000000000054EE
.text:00000000000054EE loc_54EE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000054EE                 xor     r10d, r10d
.text:00000000000054F1                 jmp     loc_50AD
.text:00000000000054F6 ; ---------------------------------------------------------------------------
.text:00000000000054F6
.text:00000000000054F6 loc_54F6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000054F6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000054FF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005504                 xor     r12d, r12d
.text:0000000000005507                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000550C                 jmp     loc_52EB
.text:0000000000005511 ; ---------------------------------------------------------------------------
.text:0000000000005511
.text:0000000000005511 loc_5511:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000005511                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005516                 mov     rsi, r14
.text:0000000000005519                 mov     rcx, r13
.text:000000000000551C                 mov     rax, rbx
.text:000000000000551F                 mov     rdi, rbx
.text:0000000000005522                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000005528                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000552D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000005535                 cmp     rsi, r11
.text:0000000000005538                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000553E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005546                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000554B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000005550                 jnb     short loc_5578
.text:0000000000005552                 cmp     byte ptr [rcx], 0
.text:0000000000005555                 jnz     short loc_5567
.text:0000000000005557                 jmp     short loc_5578
.text:0000000000005557 ; ---------------------------------------------------------------------------
.text:0000000000005559                 align 20h
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000005560                 cmp     byte ptr [r9+rax], 0
.text:0000000000005565                 jz      short loc_5575
.text:0000000000005567
.text:0000000000005567 loc_5567:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000005567                 add     rax, 1
.text:000000000000556B                 lea     rdx, [rbp+rax+0]
.text:0000000000005570                 cmp     r11, rdx
.text:0000000000005573                 ja      short loc_5560
.text:0000000000005575
.text:0000000000005575 loc_5575:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000005575                 mov     rdi, rax
.text:0000000000005578
.text:0000000000005578 loc_5578:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000005578                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000005578                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000557D                 xor     r12d, r12d
.text:0000000000005580                 jmp     loc_4FE6
.text:0000000000005585 ; ---------------------------------------------------------------------------
.text:0000000000005585
.text:0000000000005585 loc_5585:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000005585                 mov     rdi, rbx
.text:0000000000005588                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000558E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000005593                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000005599                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000055A1                 xor     r12d, r12d
.text:00000000000055A4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000055A9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000055AE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000055B3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000055B8                 jmp     loc_4FE6
.text:00000000000055BD ; ---------------------------------------------------------------------------
.text:00000000000055BD
.text:00000000000055BD loc_55BD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000055BD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000055C2                 movzx   eax, byte ptr [rdx]
.text:00000000000055C5                 test    al, al
.text:00000000000055C7                 jz      loc_53FC
.text:00000000000055CD                 nop     dword ptr [rax]
.text:00000000000055D0
.text:00000000000055D0 loc_55D0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000055D0                 cmp     r13, r15
.text:00000000000055D3                 jbe     short loc_55D9
.text:00000000000055D5                 mov     [r14+r15], al
.text:00000000000055D9
.text:00000000000055D9 loc_55D9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000055D9                 add     r15, 1
.text:00000000000055DD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000055E2                 test    al, al
.text:00000000000055E4                 jnz     short loc_55D0
.text:00000000000055E6                 jmp     loc_53FC
.text:00000000000055EB ; ---------------------------------------------------------------------------
.text:00000000000055EB
.text:00000000000055EB loc_55EB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000055EB                 mov     eax, edx
.text:00000000000055ED                 jmp     loc_4B47
.text:00000000000055F2 ; ---------------------------------------------------------------------------
.text:00000000000055F2
.text:00000000000055F2 loc_55F2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000055F2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000055F6                 cmp     bl, 3Eh ; '>'
.text:00000000000055F9                 ja      loc_4E70
.text:00000000000055FF                 mov     rax, 7000A38200000000h
.text:0000000000005609                 bt      rax, rbx
.text:000000000000560D                 jnb     loc_4E70
.text:0000000000005613                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005618                 jnz     loc_5802
.text:000000000000561E                 cmp     r13, r15
.text:0000000000005621                 jbe     short loc_5628
.text:0000000000005623                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000005628
.text:0000000000005628 loc_5628:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000005628                 lea     rax, [r15+1]
.text:000000000000562C                 cmp     r13, rax
.text:000000000000562F                 jbe     short loc_5637
.text:0000000000005631                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000005637
.text:0000000000005637 loc_5637:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000005637                 lea     rax, [r15+2]
.text:000000000000563B                 cmp     r13, rax
.text:000000000000563E                 jbe     short loc_5646
.text:0000000000005640                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000005646
.text:0000000000005646 loc_5646:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000005646                 lea     rax, [r15+3]
.text:000000000000564A                 cmp     r13, rax
.text:000000000000564D                 jbe     short loc_5655
.text:000000000000564F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000005655
.text:0000000000005655 loc_5655:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000005655                 add     r15, 4
.text:0000000000005659                 xor     edx, edx
.text:000000000000565B                 xor     r12d, r12d
.text:000000000000565E                 xor     eax, eax
.text:0000000000005660                 mov     rbp, rcx
.text:0000000000005663                 jmp     loc_4828
.text:0000000000005668 ; ---------------------------------------------------------------------------
.text:0000000000005668
.text:0000000000005668 loc_5668:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005668                                         ; DATA XREF: .rodata:jpt_4691↓o
.text:0000000000005668                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000566A                 jz      loc_57F8
.text:0000000000005670                 lea     rax, asc_809D   ; "'"
.text:0000000000005677                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000567C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005681                 xor     r12d, r12d
.text:0000000000005684                 mov     [rsp+0E8h+var_98], 0
.text:000000000000568D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005692                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005697                 mov     [rsp+0E8h+n], 1
.text:00000000000056A0                 xor     r15d, r15d
.text:00000000000056A3                 mov     [rsp+0E8h+s2], rax
.text:00000000000056A8                 jmp     loc_46D3
.text:00000000000056A8 ; ---------------------------------------------------------------------------
.text:00000000000056AD                 align 10h
.text:00000000000056B0
.text:00000000000056B0 loc_56B0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000056B0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000056B0                 mov     rbp, r11
.text:00000000000056B3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000056B8                 jmp     loc_5189
.text:00000000000056BD ; ---------------------------------------------------------------------------
.text:00000000000056BD
.text:00000000000056BD loc_56BD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000056BD                 lea     rax, unk_809B
.text:00000000000056C4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000056C9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000056CE                 xor     r12d, r12d
.text:00000000000056D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000056DA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000056DF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000056E4                 mov     [rsp+0E8h+n], 1
.text:00000000000056ED                 xor     r15d, r15d
.text:00000000000056F0                 mov     [rsp+0E8h+s2], rax
.text:00000000000056F5                 jmp     loc_46D3
.text:00000000000056FA ; ---------------------------------------------------------------------------
.text:00000000000056FA
.text:00000000000056FA loc_56FA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000056FA                 mov     eax, edx
.text:00000000000056FC
.text:00000000000056FC loc_56FC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000056FC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000056FC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000005701                 test    rbx, rbx
.text:0000000000005704                 jz      short loc_5732
.text:0000000000005706                 test    al, al
.text:0000000000005708                 jz      short loc_5732
.text:000000000000570A                 movzx   ecx, byte ptr [rbx]
.text:000000000000570D                 mov     rax, rbx
.text:0000000000005710                 test    cl, cl
.text:0000000000005712                 jz      short loc_5732
.text:0000000000005714                 mov     rdx, r15
.text:0000000000005717                 sub     rax, r15
.text:000000000000571A
.text:000000000000571A loc_571A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000571A                 cmp     r13, rdx
.text:000000000000571D                 jbe     short loc_5723
.text:000000000000571F                 mov     [r14+rdx], cl
.text:0000000000005723
.text:0000000000005723 loc_5723:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000005723                 add     rdx, 1
.text:0000000000005727                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000572B                 test    cl, cl
.text:000000000000572D                 jnz     short loc_571A
.text:000000000000572F                 mov     r15, rdx
.text:0000000000005732
.text:0000000000005732 loc_5732:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000005732                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000005732                 cmp     r13, r15
.text:0000000000005735                 jbe     loc_51D9
.text:000000000000573B                 mov     byte ptr [r14+r15], 0
.text:0000000000005740                 jmp     loc_51D9
.text:0000000000005745 ; ---------------------------------------------------------------------------
.text:0000000000005745
.text:0000000000005745 loc_5745:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000005745                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000574A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000574F                 mov     rbp, r11
.text:0000000000005752                 setz    al
.text:0000000000005755                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005759                 jmp     loc_5189
.text:000000000000575E ; ---------------------------------------------------------------------------
.text:000000000000575E
.text:000000000000575E loc_575E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000575E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005762                 mov     rdi, rcx
.text:0000000000005765                 call    gettext_quote
.text:000000000000576A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000576F                 jmp     loc_53C6
.text:0000000000005774 ; ---------------------------------------------------------------------------
.text:0000000000005774
.text:0000000000005774 loc_5774:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000005774                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005778                 mov     rdi, rcx
.text:000000000000577B                 call    gettext_quote
.text:0000000000005780                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005785                 jmp     loc_53F1
.text:000000000000578A ; ---------------------------------------------------------------------------
.text:000000000000578A
.text:000000000000578A loc_578A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000578A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000578F                 mov     rbp, r11
.text:0000000000005792                 mov     eax, edx
.text:0000000000005794                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005798                 jmp     loc_5189
.text:000000000000579D ; ---------------------------------------------------------------------------
.text:000000000000579D
.text:000000000000579D loc_579D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000579D                 sub     rsp, 8
.text:00000000000057A1                 mov     r8d, 5
.text:00000000000057A7                 mov     rcx, r11
.text:00000000000057AA                 push    [rsp+0F0h+var_88]
.text:00000000000057AE                 push    [rsp+0F8h+var_80]
.text:00000000000057B2                 mov     rdi, r14
.text:00000000000057B5                 push    [rsp+100h+var_C8]
.text:00000000000057B9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000057C1                 mov     rdx, [rsp+108h+s]
.text:00000000000057C6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000057CB                 call    quotearg_buffer_restyled
.text:00000000000057D0                 add     rsp, 20h
.text:00000000000057D4                 mov     r15, rax
.text:00000000000057D7                 jmp     loc_51D9
.text:00000000000057DC ; ---------------------------------------------------------------------------
.text:00000000000057DC
.text:00000000000057DC loc_57DC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000057DC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000057E1                 jmp     loc_56FC
.text:00000000000057E6 ; ---------------------------------------------------------------------------
.text:00000000000057E6
.text:00000000000057E6 loc_57E6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000057E6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000057EE                 jmp     loc_5189
.text:00000000000057F3 ; ---------------------------------------------------------------------------
.text:00000000000057F3
.text:00000000000057F3 loc_57F3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000057F3                 call    ___stack_chk_fail
.text:00000000000057F8 ; ---------------------------------------------------------------------------
.text:00000000000057F8
.text:00000000000057F8 loc_57F8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000057F8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000057FD                 jmp     loc_5271
.text:0000000000005802 ; ---------------------------------------------------------------------------
.text:0000000000005802
.text:0000000000005802 loc_5802:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000005802                 mov     rbp, r11
.text:0000000000005805                 jmp     loc_51A0
.text:000000000000580A ; ---------------------------------------------------------------------------
.text:000000000000580A
.text:000000000000580A loc_580A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000580A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000580F                 xor     eax, eax
.text:0000000000005811                 xor     r12d, r12d
.text:0000000000005814                 mov     [rsp+0E8h+var_98], 0
.text:000000000000581D                 jmp     loc_4DC4
.text:0000000000005822 ; ---------------------------------------------------------------------------
.text:0000000000005822
.text:0000000000005822 loc_5822:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000005822                 mov     rdx, r13
.text:0000000000005825                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000582A                 jmp     loc_4E22
.text:000000000000582F ; ---------------------------------------------------------------------------
.text:000000000000582F
.text:000000000000582F def_4691:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000582F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000582F ; } // starts at 4600
.text:000000000000582F quotearg_buffer_restyled endp
.text:000000000000582F
.text:000000000000582F ; ---------------------------------------------------------------------------
.text:0000000000005834                 align 20h
.text:0000000000005840
.text:0000000000005840 ; =============== S U B R O U T I N E =======================================
.text:0000000000005840
.text:0000000000005840
.text:0000000000005840 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000005840                                         ; quotearg_n_mem+7↓j ...
.text:0000000000005840
.text:0000000000005840 var_50          = qword ptr -50h
.text:0000000000005840 var_48          = qword ptr -48h
.text:0000000000005840 var_40          = dword ptr -40h
.text:0000000000005840 var_3C          = dword ptr -3Ch
.text:0000000000005840
.text:0000000000005840 ; __unwind {
.text:0000000000005840                 push    r15
.text:0000000000005842                 push    r14
.text:0000000000005844                 movsxd  r15, edi
.text:0000000000005847                 push    r13
.text:0000000000005849                 push    r12
.text:000000000000584B                 mov     r14, rdx
.text:000000000000584E                 push    rbp
.text:000000000000584F                 push    rbx
.text:0000000000005850                 mov     rbp, rcx
.text:0000000000005853                 sub     rsp, 28h
.text:0000000000005857                 mov     [rsp+58h+var_50], rsi
.text:000000000000585C                 call    ___errno_location
.text:0000000000005861                 mov     r13, rax
.text:0000000000005864                 mov     eax, [rax]
.text:0000000000005866                 test    r15d, r15d
.text:0000000000005869                 mov     rbx, cs:slotvec
.text:0000000000005870                 mov     [rsp+58h+var_40], eax
.text:0000000000005874                 js      loc_59E1
.text:000000000000587A                 cmp     cs:nslots, r15d
.text:0000000000005881                 jg      short loc_58E5
.text:0000000000005883                 cmp     r15d, 7FFFFFFFh
.text:000000000000588A                 jz      loc_59E6
.text:0000000000005890                 lea     r12d, [r15+1]
.text:0000000000005894                 lea     rax, slotvec0
.text:000000000000589B                 movsxd  rsi, r12d
.text:000000000000589E                 shl     rsi, 4
.text:00000000000058A2                 cmp     rbx, rax
.text:00000000000058A5                 jz      loc_59C0
.text:00000000000058AB                 mov     rdi, rbx
.text:00000000000058AE                 call    xrealloc
.text:00000000000058B3                 mov     rbx, rax
.text:00000000000058B6                 mov     cs:slotvec, rax
.text:00000000000058BD
.text:00000000000058BD loc_58BD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000058BD                 movsxd  rdi, cs:nslots
.text:00000000000058C4                 mov     edx, r12d
.text:00000000000058C7                 xor     esi, esi        ; c
.text:00000000000058C9                 sub     edx, edi
.text:00000000000058CB                 shl     rdi, 4
.text:00000000000058CF                 movsxd  rdx, edx
.text:00000000000058D2                 add     rdi, rbx        ; s
.text:00000000000058D5                 shl     rdx, 4          ; n
.text:00000000000058D9                 call    _memset
.text:00000000000058DE                 mov     cs:nslots, r12d
.text:00000000000058E5
.text:00000000000058E5 loc_58E5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000058E5                 mov     eax, [rbp+4]
.text:00000000000058E8                 shl     r15, 4
.text:00000000000058EC                 sub     rsp, 8
.text:00000000000058F0                 add     rbx, r15
.text:00000000000058F3                 lea     r15, [rbp+8]
.text:00000000000058F7                 mov     r8d, [rbp+0]
.text:00000000000058FB                 mov     r11, [rbx]
.text:00000000000058FE                 mov     r12, [rbx+8]
.text:0000000000005902                 mov     rcx, r14
.text:0000000000005905                 or      eax, 1
.text:0000000000005908                 mov     [rsp+60h+var_3C], eax
.text:000000000000590C                 push    qword ptr [rbp+30h]
.text:000000000000590F                 mov     r9d, eax
.text:0000000000005912                 push    qword ptr [rbp+28h]
.text:0000000000005915                 push    r15
.text:0000000000005917                 mov     rsi, r11
.text:000000000000591A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000591F                 mov     rdi, r12
.text:0000000000005922                 mov     [rsp+78h+var_48], r11
.text:0000000000005927                 call    quotearg_buffer_restyled
.text:000000000000592C                 add     rsp, 20h
.text:0000000000005930                 mov     r11, [rsp+58h+var_48]
.text:0000000000005935                 cmp     r11, rax
.text:0000000000005938                 ja      short loc_59A1
.text:000000000000593A                 lea     rsi, [rax+1]
.text:000000000000593E                 lea     rax, slot0
.text:0000000000005945                 cmp     r12, rax
.text:0000000000005948                 mov     [rbx], rsi
.text:000000000000594B                 jz      short loc_595F
.text:000000000000594D                 mov     rdi, r12        ; ptr
.text:0000000000005950                 mov     [rsp+58h+var_48], rsi
.text:0000000000005955                 call    _free
.text:000000000000595A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000595F
.text:000000000000595F loc_595F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000595F                 mov     rdi, rsi
.text:0000000000005962                 mov     [rsp+58h+var_48], rsi
.text:0000000000005967                 call    xmalloc
.text:000000000000596C                 sub     rsp, 8
.text:0000000000005970                 mov     [rbx+8], rax
.text:0000000000005974                 mov     r8d, [rbp+0]
.text:0000000000005978                 push    qword ptr [rbp+30h]
.text:000000000000597B                 push    qword ptr [rbp+28h]
.text:000000000000597E                 mov     rcx, r14
.text:0000000000005981                 push    r15
.text:0000000000005983                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000005988                 mov     rdi, rax
.text:000000000000598B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005990                 mov     rsi, [rsp+78h+var_48]
.text:0000000000005995                 mov     r12, rax
.text:0000000000005998                 call    quotearg_buffer_restyled
.text:000000000000599D                 add     rsp, 20h
.text:00000000000059A1
.text:00000000000059A1 loc_59A1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000059A1                 mov     eax, [rsp+58h+var_40]
.text:00000000000059A5                 mov     [r13+0], eax
.text:00000000000059A9                 add     rsp, 28h
.text:00000000000059AD                 mov     rax, r12
.text:00000000000059B0                 pop     rbx
.text:00000000000059B1                 pop     rbp
.text:00000000000059B2                 pop     r12
.text:00000000000059B4                 pop     r13
.text:00000000000059B6                 pop     r14
.text:00000000000059B8                 pop     r15
.text:00000000000059BA                 retn
.text:00000000000059BA ; ---------------------------------------------------------------------------
.text:00000000000059BB                 align 20h
.text:00000000000059C0
.text:00000000000059C0 loc_59C0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000059C0                 xor     edi, edi
.text:00000000000059C2                 call    xrealloc
.text:00000000000059C7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000059CF                 mov     rbx, rax
.text:00000000000059D2                 mov     cs:slotvec, rax
.text:00000000000059D9                 movups  xmmword ptr [rax], xmm0
.text:00000000000059DC                 jmp     loc_58BD
.text:00000000000059E1 ; ---------------------------------------------------------------------------
.text:00000000000059E1
.text:00000000000059E1 loc_59E1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000059E1                 call    _abort
.text:00000000000059E6 ; ---------------------------------------------------------------------------
.text:00000000000059E6
.text:00000000000059E6 loc_59E6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000059E6                 call    xalloc_die
.text:00000000000059E6 ; } // starts at 5840
.text:00000000000059E6 quotearg_n_options endp
.text:00000000000059E6
.text:00000000000059E6 ; ---------------------------------------------------------------------------
.text:00000000000059EB                 align 10h
.text:00000000000059F0
.text:00000000000059F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059F0
.text:00000000000059F0 ; Attributes: info_from_lumina
.text:00000000000059F0
.text:00000000000059F0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000059F0                 public clone_quoting_options
.text:00000000000059F0 clone_quoting_options proc near
.text:00000000000059F0 ; __unwind {
.text:00000000000059F0                 push    r12
.text:00000000000059F2                 push    rbp
.text:00000000000059F3                 push    rbx
.text:00000000000059F4                 mov     rbx, rdi
.text:00000000000059F7                 call    ___errno_location
.text:00000000000059FC                 mov     r12d, [rax]
.text:00000000000059FF                 mov     rbp, rax
.text:0000000000005A02                 lea     rax, default_quoting_options
.text:0000000000005A09                 test    rbx, rbx
.text:0000000000005A0C                 mov     esi, 38h ; '8'  ; n
.text:0000000000005A11                 cmovz   rbx, rax
.text:0000000000005A15                 mov     rdi, rbx        ; src
.text:0000000000005A18                 call    xmemdup
.text:0000000000005A1D                 mov     [rbp+0], r12d
.text:0000000000005A21                 pop     rbx
.text:0000000000005A22                 pop     rbp
.text:0000000000005A23                 pop     r12
.text:0000000000005A25                 retn
.text:0000000000005A25 ; } // starts at 59F0
.text:0000000000005A25 clone_quoting_options endp
.text:0000000000005A25
.text:0000000000005A25 ; ---------------------------------------------------------------------------
.text:0000000000005A26                 align 10h
.text:0000000000005A30
.text:0000000000005A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A30
.text:0000000000005A30
.text:0000000000005A30                 public get_quoting_style
.text:0000000000005A30 get_quoting_style proc near
.text:0000000000005A30 ; __unwind {
.text:0000000000005A30                 lea     rax, default_quoting_options
.text:0000000000005A37                 test    rdi, rdi
.text:0000000000005A3A                 cmovz   rdi, rax
.text:0000000000005A3E                 mov     eax, [rdi]
.text:0000000000005A40                 retn
.text:0000000000005A40 ; } // starts at 5A30
.text:0000000000005A40 get_quoting_style endp
.text:0000000000005A40
.text:0000000000005A40 ; ---------------------------------------------------------------------------
.text:0000000000005A41                 align 10h
.text:0000000000005A50
.text:0000000000005A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A50
.text:0000000000005A50
.text:0000000000005A50                 public set_quoting_style
.text:0000000000005A50 set_quoting_style proc near
.text:0000000000005A50 ; __unwind {
.text:0000000000005A50                 lea     rax, default_quoting_options
.text:0000000000005A57                 test    rdi, rdi
.text:0000000000005A5A                 cmovz   rdi, rax
.text:0000000000005A5E                 mov     [rdi], esi
.text:0000000000005A60                 retn
.text:0000000000005A60 ; } // starts at 5A50
.text:0000000000005A60 set_quoting_style endp
.text:0000000000005A60
.text:0000000000005A60 ; ---------------------------------------------------------------------------
.text:0000000000005A61                 align 10h
.text:0000000000005A70
.text:0000000000005A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A70
.text:0000000000005A70 ; Attributes: info_from_lumina
.text:0000000000005A70
.text:0000000000005A70 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000005A70                 public set_char_quoting
.text:0000000000005A70 set_char_quoting proc near
.text:0000000000005A70 ; __unwind {
.text:0000000000005A70                 lea     rax, default_quoting_options
.text:0000000000005A77                 test    rdi, rdi
.text:0000000000005A7A                 mov     ecx, esi
.text:0000000000005A7C                 cmovz   rdi, rax
.text:0000000000005A80                 mov     eax, esi
.text:0000000000005A82                 and     ecx, 1Fh
.text:0000000000005A85                 shr     al, 5
.text:0000000000005A88                 movzx   eax, al
.text:0000000000005A8B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000005A90                 mov     esi, [rdi]
.text:0000000000005A92                 mov     eax, esi
.text:0000000000005A94                 shr     eax, cl
.text:0000000000005A96                 xor     edx, eax
.text:0000000000005A98                 and     eax, 1
.text:0000000000005A9B                 and     edx, 1
.text:0000000000005A9E                 shl     edx, cl
.text:0000000000005AA0                 xor     edx, esi
.text:0000000000005AA2                 mov     [rdi], edx
.text:0000000000005AA4                 retn
.text:0000000000005AA4 ; } // starts at 5A70
.text:0000000000005AA4 set_char_quoting endp
.text:0000000000005AA4
.text:0000000000005AA4 ; ---------------------------------------------------------------------------
.text:0000000000005AA5                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AB0
.text:0000000000005AB0
.text:0000000000005AB0                 public set_quoting_flags
.text:0000000000005AB0 set_quoting_flags proc near
.text:0000000000005AB0 ; __unwind {
.text:0000000000005AB0                 lea     rax, default_quoting_options
.text:0000000000005AB7                 test    rdi, rdi
.text:0000000000005ABA                 cmovz   rdi, rax
.text:0000000000005ABE                 mov     eax, [rdi+4]
.text:0000000000005AC1                 mov     [rdi+4], esi
.text:0000000000005AC4                 retn
.text:0000000000005AC4 ; } // starts at 5AB0
.text:0000000000005AC4 set_quoting_flags endp
.text:0000000000005AC4
.text:0000000000005AC4 ; ---------------------------------------------------------------------------
.text:0000000000005AC5                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AD0
.text:0000000000005AD0 ; Attributes: info_from_lumina
.text:0000000000005AD0
.text:0000000000005AD0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000005AD0                 public set_custom_quoting
.text:0000000000005AD0 set_custom_quoting proc near
.text:0000000000005AD0 ; __unwind {
.text:0000000000005AD0                 lea     rax, default_quoting_options
.text:0000000000005AD7                 test    rdi, rdi
.text:0000000000005ADA                 cmovz   rdi, rax
.text:0000000000005ADE                 test    rsi, rsi
.text:0000000000005AE1                 mov     dword ptr [rdi], 0Ah
.text:0000000000005AE7                 jz      short loc_5AF7
.text:0000000000005AE9                 test    rdx, rdx
.text:0000000000005AEC                 jz      short loc_5AF7
.text:0000000000005AEE                 mov     [rdi+28h], rsi
.text:0000000000005AF2                 mov     [rdi+30h], rdx
.text:0000000000005AF6                 retn
.text:0000000000005AF7 ; ---------------------------------------------------------------------------
.text:0000000000005AF7
.text:0000000000005AF7 loc_5AF7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000005AF7                                         ; set_custom_quoting+1C↑j
.text:0000000000005AF7                 sub     rsp, 8
.text:0000000000005AFB                 call    _abort
.text:0000000000005AFB ; } // starts at 5AD0
.text:0000000000005AFB set_custom_quoting endp
.text:0000000000005AFB
.text:0000000000005B00
.text:0000000000005B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B00
.text:0000000000005B00 ; Attributes: info_from_lumina
.text:0000000000005B00
.text:0000000000005B00 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000005B00                 public quotearg_buffer
.text:0000000000005B00 quotearg_buffer proc near
.text:0000000000005B00
.text:0000000000005B00 var_40          = qword ptr -40h
.text:0000000000005B00
.text:0000000000005B00 ; __unwind {
.text:0000000000005B00                 push    r15
.text:0000000000005B02                 push    r14
.text:0000000000005B04                 lea     rax, default_quoting_options
.text:0000000000005B0B                 push    r13
.text:0000000000005B0D                 push    r12
.text:0000000000005B0F                 mov     r13, rdi
.text:0000000000005B12                 push    rbp
.text:0000000000005B13                 push    rbx
.text:0000000000005B14                 mov     rbx, r8
.text:0000000000005B17                 mov     r14, rsi
.text:0000000000005B1A                 mov     r15, rdx
.text:0000000000005B1D                 sub     rsp, 18h
.text:0000000000005B21                 test    r8, r8
.text:0000000000005B24                 cmovz   rbx, rax
.text:0000000000005B28                 mov     [rsp+48h+var_40], rcx
.text:0000000000005B2D                 call    ___errno_location
.text:0000000000005B32                 mov     r12d, [rax]
.text:0000000000005B35                 mov     rbp, rax
.text:0000000000005B38                 lea     rax, [rbx+8]
.text:0000000000005B3C                 sub     rsp, 8
.text:0000000000005B40                 mov     r9d, [rbx+4]
.text:0000000000005B44                 push    qword ptr [rbx+30h]
.text:0000000000005B47                 mov     r8d, [rbx]
.text:0000000000005B4A                 push    qword ptr [rbx+28h]
.text:0000000000005B4D                 mov     rdx, r15
.text:0000000000005B50                 push    rax
.text:0000000000005B51                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005B56                 mov     rsi, r14
.text:0000000000005B59                 mov     rdi, r13
.text:0000000000005B5C                 call    quotearg_buffer_restyled
.text:0000000000005B61                 mov     [rbp+0], r12d
.text:0000000000005B65                 add     rsp, 38h
.text:0000000000005B69                 pop     rbx
.text:0000000000005B6A                 pop     rbp
.text:0000000000005B6B                 pop     r12
.text:0000000000005B6D                 pop     r13
.text:0000000000005B6F                 pop     r14
.text:0000000000005B71                 pop     r15
.text:0000000000005B73                 retn
.text:0000000000005B73 ; } // starts at 5B00
.text:0000000000005B73 quotearg_buffer endp
.text:0000000000005B73
.text:0000000000005B73 ; ---------------------------------------------------------------------------
.text:0000000000005B74                 align 20h
.text:0000000000005B80
.text:0000000000005B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B80
.text:0000000000005B80 ; Attributes: info_from_lumina
.text:0000000000005B80
.text:0000000000005B80 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005B80                 public quotearg_alloc_mem
.text:0000000000005B80 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005B80
.text:0000000000005B80 var_5C          = dword ptr -5Ch
.text:0000000000005B80 var_58          = qword ptr -58h
.text:0000000000005B80 var_50          = qword ptr -50h
.text:0000000000005B80 var_48          = qword ptr -48h
.text:0000000000005B80 var_40          = qword ptr -40h
.text:0000000000005B80
.text:0000000000005B80 ; __unwind {
.text:0000000000005B80                 push    r15
.text:0000000000005B82                 push    r14
.text:0000000000005B84                 lea     rax, default_quoting_options
.text:0000000000005B8B                 push    r13
.text:0000000000005B8D                 push    r12
.text:0000000000005B8F                 mov     r12, rdx
.text:0000000000005B92                 push    rbp
.text:0000000000005B93                 push    rbx
.text:0000000000005B94                 mov     rbx, rcx
.text:0000000000005B97                 mov     r14, rdi
.text:0000000000005B9A                 mov     r15, rsi
.text:0000000000005B9D                 sub     rsp, 38h
.text:0000000000005BA1                 test    rcx, rcx
.text:0000000000005BA4                 cmovz   rbx, rax
.text:0000000000005BA8                 xor     ebp, ebp
.text:0000000000005BAA                 call    ___errno_location
.text:0000000000005BAF                 test    r12, r12
.text:0000000000005BB2                 mov     r13, rax
.text:0000000000005BB5                 mov     eax, [rax]
.text:0000000000005BB7                 setz    bpl
.text:0000000000005BBB                 or      ebp, [rbx+4]
.text:0000000000005BBE                 lea     r10, [rbx+8]
.text:0000000000005BC2                 sub     rsp, 8
.text:0000000000005BC6                 mov     r8d, [rbx]
.text:0000000000005BC9                 mov     rcx, r15
.text:0000000000005BCC                 mov     [rsp+70h+var_5C], eax
.text:0000000000005BD0                 push    qword ptr [rbx+30h]
.text:0000000000005BD3                 mov     rdx, r14
.text:0000000000005BD6                 push    qword ptr [rbx+28h]
.text:0000000000005BD9                 push    r10
.text:0000000000005BDB                 xor     esi, esi
.text:0000000000005BDD                 mov     r9d, ebp
.text:0000000000005BE0                 xor     edi, edi
.text:0000000000005BE2                 mov     [rsp+88h+var_48], r10
.text:0000000000005BE7                 call    quotearg_buffer_restyled
.text:0000000000005BEC                 lea     rsi, [rax+1]
.text:0000000000005BF0                 mov     [rsp+88h+var_40], rax
.text:0000000000005BF5                 add     rsp, 20h
.text:0000000000005BF9                 mov     rdi, rsi
.text:0000000000005BFC                 mov     [rsp+68h+var_50], rsi
.text:0000000000005C01                 call    xmalloc
.text:0000000000005C06                 mov     [rsp+68h+var_58], rax
.text:0000000000005C0B                 sub     rsp, 8
.text:0000000000005C0F                 push    qword ptr [rbx+30h]
.text:0000000000005C12                 push    qword ptr [rbx+28h]
.text:0000000000005C15                 mov     r10, [rsp+80h+var_48]
.text:0000000000005C1A                 mov     r9d, ebp
.text:0000000000005C1D                 mov     r8d, [rbx]
.text:0000000000005C20                 mov     rcx, r15
.text:0000000000005C23                 mov     rdx, r14
.text:0000000000005C26                 mov     rdi, rax
.text:0000000000005C29                 push    r10
.text:0000000000005C2B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000005C30                 call    quotearg_buffer_restyled
.text:0000000000005C35                 mov     eax, [rsp+88h+var_5C]
.text:0000000000005C39                 add     rsp, 20h
.text:0000000000005C3D                 test    r12, r12
.text:0000000000005C40                 mov     [r13+0], eax
.text:0000000000005C44                 jz      short loc_5C4F
.text:0000000000005C46                 mov     r11, [rsp+68h+var_40]
.text:0000000000005C4B                 mov     [r12], r11
.text:0000000000005C4F
.text:0000000000005C4F loc_5C4F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000005C4F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005C54                 add     rsp, 38h
.text:0000000000005C58                 pop     rbx
.text:0000000000005C59                 pop     rbp
.text:0000000000005C5A                 pop     r12
.text:0000000000005C5C                 pop     r13
.text:0000000000005C5E                 pop     r14
.text:0000000000005C60                 pop     r15
.text:0000000000005C62                 retn
.text:0000000000005C62 ; } // starts at 5B80
.text:0000000000005C62 quotearg_alloc_mem endp
.text:0000000000005C62
.text:0000000000005C62 ; ---------------------------------------------------------------------------
.text:0000000000005C63                 align 10h
.text:0000000000005C70
.text:0000000000005C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C70
.text:0000000000005C70
.text:0000000000005C70                 public quotearg_alloc
.text:0000000000005C70 quotearg_alloc  proc near
.text:0000000000005C70 ; __unwind {
.text:0000000000005C70                 mov     rcx, rdx
.text:0000000000005C73                 xor     edx, edx
.text:0000000000005C75                 jmp     quotearg_alloc_mem
.text:0000000000005C75 ; } // starts at 5C70
.text:0000000000005C75 quotearg_alloc  endp
.text:0000000000005C75
.text:0000000000005C75 ; ---------------------------------------------------------------------------
.text:0000000000005C7A                 align 20h
.text:0000000000005C80
.text:0000000000005C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C80
.text:0000000000005C80 ; Attributes: info_from_lumina
.text:0000000000005C80
.text:0000000000005C80 ; void __cdecl quotearg_free()
.text:0000000000005C80                 public quotearg_free
.text:0000000000005C80 quotearg_free   proc near
.text:0000000000005C80 ; __unwind {
.text:0000000000005C80                 mov     eax, cs:nslots
.text:0000000000005C86                 push    r12
.text:0000000000005C88                 mov     r12, cs:slotvec
.text:0000000000005C8F                 push    rbp
.text:0000000000005C90                 push    rbx
.text:0000000000005C91                 cmp     eax, 1
.text:0000000000005C94                 jle     short loc_5CC1
.text:0000000000005C96                 sub     eax, 2
.text:0000000000005C99                 lea     rbx, [r12+18h]
.text:0000000000005C9E                 shl     rax, 4
.text:0000000000005CA2                 lea     rbp, [r12+rax+28h]
.text:0000000000005CA7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005CB0
.text:0000000000005CB0 loc_5CB0:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005CB0                 mov     rdi, [rbx]      ; ptr
.text:0000000000005CB3                 add     rbx, 10h
.text:0000000000005CB7                 call    _free
.text:0000000000005CBC                 cmp     rbx, rbp
.text:0000000000005CBF                 jnz     short loc_5CB0
.text:0000000000005CC1
.text:0000000000005CC1 loc_5CC1:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005CC1                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005CC6                 lea     rbx, slot0
.text:0000000000005CCD                 cmp     rdi, rbx
.text:0000000000005CD0                 jz      short loc_5CE9
.text:0000000000005CD2                 call    _free
.text:0000000000005CD7                 mov     cs:slotvec0, 100h
.text:0000000000005CE2                 mov     cs:off_20B078, rbx
.text:0000000000005CE9
.text:0000000000005CE9 loc_5CE9:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000005CE9                 lea     rbx, slotvec0
.text:0000000000005CF0                 cmp     r12, rbx
.text:0000000000005CF3                 jz      short loc_5D04
.text:0000000000005CF5                 mov     rdi, r12        ; ptr
.text:0000000000005CF8                 call    _free
.text:0000000000005CFD                 mov     cs:slotvec, rbx
.text:0000000000005D04
.text:0000000000005D04 loc_5D04:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000005D04                 pop     rbx
.text:0000000000005D05                 mov     cs:nslots, 1
.text:0000000000005D0F                 pop     rbp
.text:0000000000005D10                 pop     r12
.text:0000000000005D12                 retn
.text:0000000000005D12 ; } // starts at 5C80
.text:0000000000005D12 quotearg_free   endp
.text:0000000000005D12
.text:0000000000005D12 ; ---------------------------------------------------------------------------
.text:0000000000005D13                 align 20h
.text:0000000000005D20
.text:0000000000005D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D20
.text:0000000000005D20
.text:0000000000005D20                 public quotearg_n
.text:0000000000005D20 quotearg_n      proc near
.text:0000000000005D20 ; __unwind {
.text:0000000000005D20                 lea     rcx, default_quoting_options
.text:0000000000005D27                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D2E                 jmp     quotearg_n_options
.text:0000000000005D2E ; } // starts at 5D20
.text:0000000000005D2E quotearg_n      endp
.text:0000000000005D2E
.text:0000000000005D2E ; ---------------------------------------------------------------------------
.text:0000000000005D33                 align 20h
.text:0000000000005D40
.text:0000000000005D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D40
.text:0000000000005D40
.text:0000000000005D40                 public quotearg_n_mem
.text:0000000000005D40 quotearg_n_mem  proc near
.text:0000000000005D40 ; __unwind {
.text:0000000000005D40                 lea     rcx, default_quoting_options
.text:0000000000005D47                 jmp     quotearg_n_options
.text:0000000000005D47 ; } // starts at 5D40
.text:0000000000005D47 quotearg_n_mem  endp
.text:0000000000005D47
.text:0000000000005D47 ; ---------------------------------------------------------------------------
.text:0000000000005D4C                 align 10h
.text:0000000000005D50
.text:0000000000005D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D50
.text:0000000000005D50
.text:0000000000005D50                 public quotearg
.text:0000000000005D50 quotearg        proc near
.text:0000000000005D50 ; __unwind {
.text:0000000000005D50                 lea     rcx, default_quoting_options
.text:0000000000005D57                 mov     rsi, rdi
.text:0000000000005D5A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D61                 xor     edi, edi
.text:0000000000005D63                 jmp     quotearg_n_options
.text:0000000000005D63 ; } // starts at 5D50
.text:0000000000005D63 quotearg        endp
.text:0000000000005D63
.text:0000000000005D63 ; ---------------------------------------------------------------------------
.text:0000000000005D68                 align 10h
.text:0000000000005D70
.text:0000000000005D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D70
.text:0000000000005D70
.text:0000000000005D70                 public quotearg_mem
.text:0000000000005D70 quotearg_mem    proc near
.text:0000000000005D70 ; __unwind {
.text:0000000000005D70                 lea     rcx, default_quoting_options
.text:0000000000005D77                 mov     rdx, rsi
.text:0000000000005D7A                 mov     rsi, rdi
.text:0000000000005D7D                 xor     edi, edi
.text:0000000000005D7F                 jmp     quotearg_n_options
.text:0000000000005D7F ; } // starts at 5D70
.text:0000000000005D7F quotearg_mem    endp
.text:0000000000005D7F
.text:0000000000005D7F ; ---------------------------------------------------------------------------
.text:0000000000005D84                 align 10h
.text:0000000000005D90
.text:0000000000005D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D90
.text:0000000000005D90 ; Attributes: info_from_lumina
.text:0000000000005D90
.text:0000000000005D90 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005D90                 public quotearg_n_style
.text:0000000000005D90 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000005D90
.text:0000000000005D90 var_48          = dword ptr -48h
.text:0000000000005D90 var_44          = qword ptr -44h
.text:0000000000005D90 var_3C          = qword ptr -3Ch
.text:0000000000005D90 var_34          = qword ptr -34h
.text:0000000000005D90 var_2C          = qword ptr -2Ch
.text:0000000000005D90 var_24          = qword ptr -24h
.text:0000000000005D90 var_1C          = qword ptr -1Ch
.text:0000000000005D90 var_14          = dword ptr -14h
.text:0000000000005D90 var_10          = qword ptr -10h
.text:0000000000005D90
.text:0000000000005D90 ; __unwind {
.text:0000000000005D90                 sub     rsp, 48h
.text:0000000000005D94                 mov     rax, rdx
.text:0000000000005D97                 mov     rdx, fs:28h
.text:0000000000005DA0                 mov     [rsp+48h+var_10], rdx
.text:0000000000005DA5                 xor     edx, edx
.text:0000000000005DA7                 cmp     esi, 0Ah
.text:0000000000005DAA                 jz      short loc_5E14
.text:0000000000005DAC                 mov     [rsp+48h+var_48], esi
.text:0000000000005DAF                 mov     rcx, rsp
.text:0000000000005DB2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DB9                 mov     rsi, rax
.text:0000000000005DBC                 mov     [rsp+48h+var_44], 0
.text:0000000000005DC5                 mov     [rsp+48h+var_3C], 0
.text:0000000000005DCE                 mov     [rsp+48h+var_34], 0
.text:0000000000005DD7                 mov     [rsp+48h+var_2C], 0
.text:0000000000005DE0                 mov     [rsp+48h+var_24], 0
.text:0000000000005DE9                 mov     [rsp+48h+var_1C], 0
.text:0000000000005DF2                 mov     [rsp+48h+var_14], 0
.text:0000000000005DFA                 call    quotearg_n_options
.text:0000000000005DFF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005E04                 xor     rcx, fs:28h
.text:0000000000005E0D                 jnz     short loc_5E19
.text:0000000000005E0F                 add     rsp, 48h
.text:0000000000005E13                 retn
.text:0000000000005E14 ; ---------------------------------------------------------------------------
.text:0000000000005E14
.text:0000000000005E14 loc_5E14:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000005E14                 call    _abort
.text:0000000000005E19 ; ---------------------------------------------------------------------------
.text:0000000000005E19
.text:0000000000005E19 loc_5E19:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000005E19                 call    ___stack_chk_fail
.text:0000000000005E19 ; } // starts at 5D90
.text:0000000000005E19 quotearg_n_style endp
.text:0000000000005E19
.text:0000000000005E19 ; ---------------------------------------------------------------------------
.text:0000000000005E1E                 align 20h
.text:0000000000005E20
.text:0000000000005E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E20
.text:0000000000005E20 ; Attributes: info_from_lumina
.text:0000000000005E20
.text:0000000000005E20 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000005E20                 public quotearg_n_style_mem
.text:0000000000005E20 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000005E20
.text:0000000000005E20 var_48          = dword ptr -48h
.text:0000000000005E20 var_44          = qword ptr -44h
.text:0000000000005E20 var_3C          = qword ptr -3Ch
.text:0000000000005E20 var_34          = qword ptr -34h
.text:0000000000005E20 var_2C          = qword ptr -2Ch
.text:0000000000005E20 var_24          = qword ptr -24h
.text:0000000000005E20 var_1C          = qword ptr -1Ch
.text:0000000000005E20 var_14          = dword ptr -14h
.text:0000000000005E20 var_10          = qword ptr -10h
.text:0000000000005E20
.text:0000000000005E20 ; __unwind {
.text:0000000000005E20                 sub     rsp, 48h
.text:0000000000005E24                 mov     rax, rdx
.text:0000000000005E27                 mov     rdx, rcx
.text:0000000000005E2A                 mov     rcx, fs:28h
.text:0000000000005E33                 mov     [rsp+48h+var_10], rcx
.text:0000000000005E38                 xor     ecx, ecx
.text:0000000000005E3A                 cmp     esi, 0Ah
.text:0000000000005E3D                 jz      short loc_5EA0
.text:0000000000005E3F                 mov     [rsp+48h+var_48], esi
.text:0000000000005E42                 mov     rcx, rsp
.text:0000000000005E45                 mov     rsi, rax
.text:0000000000005E48                 mov     [rsp+48h+var_44], 0
.text:0000000000005E51                 mov     [rsp+48h+var_3C], 0
.text:0000000000005E5A                 mov     [rsp+48h+var_34], 0
.text:0000000000005E63                 mov     [rsp+48h+var_2C], 0
.text:0000000000005E6C                 mov     [rsp+48h+var_24], 0
.text:0000000000005E75                 mov     [rsp+48h+var_1C], 0
.text:0000000000005E7E                 mov     [rsp+48h+var_14], 0
.text:0000000000005E86                 call    quotearg_n_options
.text:0000000000005E8B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005E90                 xor     rdx, fs:28h
.text:0000000000005E99                 jnz     short loc_5EA5
.text:0000000000005E9B                 add     rsp, 48h
.text:0000000000005E9F                 retn
.text:0000000000005EA0 ; ---------------------------------------------------------------------------
.text:0000000000005EA0
.text:0000000000005EA0 loc_5EA0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005EA0                 call    _abort
.text:0000000000005EA5 ; ---------------------------------------------------------------------------
.text:0000000000005EA5
.text:0000000000005EA5 loc_5EA5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005EA5                 call    ___stack_chk_fail
.text:0000000000005EA5 ; } // starts at 5E20
.text:0000000000005EA5 quotearg_n_style_mem endp
.text:0000000000005EA5
.text:0000000000005EA5 ; ---------------------------------------------------------------------------
.text:0000000000005EAA                 align 10h
.text:0000000000005EB0
.text:0000000000005EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EB0
.text:0000000000005EB0
.text:0000000000005EB0                 public quotearg_style
.text:0000000000005EB0 quotearg_style  proc near
.text:0000000000005EB0 ; __unwind {
.text:0000000000005EB0                 mov     rdx, rsi
.text:0000000000005EB3                 mov     esi, edi
.text:0000000000005EB5                 xor     edi, edi
.text:0000000000005EB7                 jmp     quotearg_n_style
.text:0000000000005EB7 ; } // starts at 5EB0
.text:0000000000005EB7 quotearg_style  endp
.text:0000000000005EB7
.text:0000000000005EB7 ; ---------------------------------------------------------------------------
.text:0000000000005EBC                 align 20h
.text:0000000000005EC0
.text:0000000000005EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EC0
.text:0000000000005EC0
.text:0000000000005EC0                 public quotearg_style_mem
.text:0000000000005EC0 quotearg_style_mem proc near
.text:0000000000005EC0 ; __unwind {
.text:0000000000005EC0                 mov     rcx, rdx
.text:0000000000005EC3                 mov     rdx, rsi
.text:0000000000005EC6                 mov     esi, edi
.text:0000000000005EC8                 xor     edi, edi
.text:0000000000005ECA                 jmp     quotearg_n_style_mem
.text:0000000000005ECA ; } // starts at 5EC0
.text:0000000000005ECA quotearg_style_mem endp
.text:0000000000005ECA
.text:0000000000005ECA ; ---------------------------------------------------------------------------
.text:0000000000005ECF                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005ED0
.text:0000000000005ED0 ; Attributes: info_from_lumina
.text:0000000000005ED0
.text:0000000000005ED0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005ED0                 public quotearg_char_mem
.text:0000000000005ED0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005ED0                                         ; quotearg_colon+C↓j ...
.text:0000000000005ED0
.text:0000000000005ED0 var_48          = xmmword ptr -48h
.text:0000000000005ED0 var_38          = xmmword ptr -38h
.text:0000000000005ED0 var_28          = xmmword ptr -28h
.text:0000000000005ED0 var_18          = qword ptr -18h
.text:0000000000005ED0 var_10          = qword ptr -10h
.text:0000000000005ED0
.text:0000000000005ED0 ; __unwind {
.text:0000000000005ED0                 sub     rsp, 48h
.text:0000000000005ED4                 mov     ecx, edx
.text:0000000000005ED6                 mov     rax, fs:28h
.text:0000000000005EDF                 mov     [rsp+48h+var_10], rax
.text:0000000000005EE4                 xor     eax, eax
.text:0000000000005EE6                 mov     rax, cs:qword_20B250
.text:0000000000005EED                 mov     r8, rsp
.text:0000000000005EF0                 and     ecx, 1Fh
.text:0000000000005EF3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005EFB                 mov     [rsp+48h+var_18], rax
.text:0000000000005F00                 mov     eax, edx
.text:0000000000005F02                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005F06                 shr     al, 5
.text:0000000000005F09                 movzx   eax, al
.text:0000000000005F0C                 lea     r9, [r8+rax*4+8]
.text:0000000000005F11                 movdqa  xmm0, cs:xmmword_20B230
.text:0000000000005F19                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005F1E                 movdqa  xmm0, cs:xmmword_20B240
.text:0000000000005F26                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005F2B                 mov     edx, [r9]
.text:0000000000005F2E                 mov     eax, edx
.text:0000000000005F30                 shr     eax, cl
.text:0000000000005F32                 not     eax
.text:0000000000005F34                 and     eax, 1
.text:0000000000005F37                 shl     eax, cl
.text:0000000000005F39                 mov     rcx, r8
.text:0000000000005F3C                 xor     eax, edx
.text:0000000000005F3E                 mov     rdx, rsi
.text:0000000000005F41                 mov     rsi, rdi
.text:0000000000005F44                 mov     [r9], eax
.text:0000000000005F47                 xor     edi, edi
.text:0000000000005F49                 call    quotearg_n_options
.text:0000000000005F4E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005F53                 xor     rsi, fs:28h
.text:0000000000005F5C                 jnz     short loc_5F63
.text:0000000000005F5E                 add     rsp, 48h
.text:0000000000005F62                 retn
.text:0000000000005F63 ; ---------------------------------------------------------------------------
.text:0000000000005F63
.text:0000000000005F63 loc_5F63:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005F63                 call    ___stack_chk_fail
.text:0000000000005F63 ; } // starts at 5ED0
.text:0000000000005F63 quotearg_char_mem endp
.text:0000000000005F63
.text:0000000000005F63 ; ---------------------------------------------------------------------------
.text:0000000000005F68                 align 10h
.text:0000000000005F70
.text:0000000000005F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F70
.text:0000000000005F70
.text:0000000000005F70                 public quotearg_char
.text:0000000000005F70 quotearg_char   proc near
.text:0000000000005F70 ; __unwind {
.text:0000000000005F70                 movsx   edx, sil
.text:0000000000005F74                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F7B                 jmp     quotearg_char_mem
.text:0000000000005F7B ; } // starts at 5F70
.text:0000000000005F7B quotearg_char   endp
.text:0000000000005F7B
.text:0000000000005F80
.text:0000000000005F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F80
.text:0000000000005F80
.text:0000000000005F80                 public quotearg_colon
.text:0000000000005F80 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005F80 ; __unwind {
.text:0000000000005F80                 mov     edx, 3Ah ; ':'
.text:0000000000005F85                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F8C                 jmp     quotearg_char_mem
.text:0000000000005F8C ; } // starts at 5F80
.text:0000000000005F8C quotearg_colon  endp
.text:0000000000005F8C
.text:0000000000005F8C ; ---------------------------------------------------------------------------
.text:0000000000005F91                 align 20h
.text:0000000000005FA0
.text:0000000000005FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FA0
.text:0000000000005FA0
.text:0000000000005FA0                 public quotearg_colon_mem
.text:0000000000005FA0 quotearg_colon_mem proc near
.text:0000000000005FA0 ; __unwind {
.text:0000000000005FA0                 mov     edx, 3Ah ; ':'
.text:0000000000005FA5                 jmp     quotearg_char_mem
.text:0000000000005FA5 ; } // starts at 5FA0
.text:0000000000005FA5 quotearg_colon_mem endp
.text:0000000000005FA5
.text:0000000000005FA5 ; ---------------------------------------------------------------------------
.text:0000000000005FAA                 align 10h
.text:0000000000005FB0
.text:0000000000005FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FB0
.text:0000000000005FB0 ; Attributes: info_from_lumina
.text:0000000000005FB0
.text:0000000000005FB0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005FB0                 public quotearg_n_style_colon
.text:0000000000005FB0 quotearg_n_style_colon proc near        ; CODE XREF: main+984↑p
.text:0000000000005FB0                                         ; main+A82↑p
.text:0000000000005FB0
.text:0000000000005FB0 var_48          = dword ptr -48h
.text:0000000000005FB0 var_44          = qword ptr -44h
.text:0000000000005FB0 var_3C          = qword ptr -3Ch
.text:0000000000005FB0 var_34          = qword ptr -34h
.text:0000000000005FB0 var_2C          = qword ptr -2Ch
.text:0000000000005FB0 var_24          = qword ptr -24h
.text:0000000000005FB0 var_1C          = qword ptr -1Ch
.text:0000000000005FB0 var_14          = dword ptr -14h
.text:0000000000005FB0 var_10          = qword ptr -10h
.text:0000000000005FB0
.text:0000000000005FB0 ; __unwind {
.text:0000000000005FB0                 sub     rsp, 48h
.text:0000000000005FB4                 mov     rax, rdx
.text:0000000000005FB7                 mov     rdx, fs:28h
.text:0000000000005FC0                 mov     [rsp+48h+var_10], rdx
.text:0000000000005FC5                 xor     edx, edx
.text:0000000000005FC7                 cmp     esi, 0Ah
.text:0000000000005FCA                 jz      short loc_6034
.text:0000000000005FCC                 mov     [rsp+48h+var_48], esi
.text:0000000000005FCF                 mov     rcx, rsp
.text:0000000000005FD2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005FD9                 mov     rsi, rax
.text:0000000000005FDC                 mov     [rsp+48h+var_44], 0
.text:0000000000005FE5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000005FEE                 mov     [rsp+48h+var_34], 0
.text:0000000000005FF7                 mov     [rsp+48h+var_2C], 0
.text:0000000000006000                 mov     [rsp+48h+var_24], 0
.text:0000000000006009                 mov     [rsp+48h+var_1C], 0
.text:0000000000006012                 mov     [rsp+48h+var_14], 0
.text:000000000000601A                 call    quotearg_n_options
.text:000000000000601F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000006024                 xor     rcx, fs:28h
.text:000000000000602D                 jnz     short loc_6039
.text:000000000000602F                 add     rsp, 48h
.text:0000000000006033                 retn
.text:0000000000006034 ; ---------------------------------------------------------------------------
.text:0000000000006034
.text:0000000000006034 loc_6034:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000006034                 call    _abort
.text:0000000000006039 ; ---------------------------------------------------------------------------
.text:0000000000006039
.text:0000000000006039 loc_6039:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000006039                 call    ___stack_chk_fail
.text:0000000000006039 ; } // starts at 5FB0
.text:0000000000006039 quotearg_n_style_colon endp
.text:0000000000006039
.text:0000000000006039 ; ---------------------------------------------------------------------------
.text:000000000000603E                 align 20h
.text:0000000000006040
.text:0000000000006040 ; =============== S U B R O U T I N E =======================================
.text:0000000000006040
.text:0000000000006040 ; Attributes: info_from_lumina
.text:0000000000006040
.text:0000000000006040 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000006040                 public quotearg_n_custom_mem
.text:0000000000006040 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000006040                                         ; quotearg_custom+12↓j ...
.text:0000000000006040
.text:0000000000006040 var_48          = xmmword ptr -48h
.text:0000000000006040 var_38          = xmmword ptr -38h
.text:0000000000006040 var_28          = xmmword ptr -28h
.text:0000000000006040 var_18          = qword ptr -18h
.text:0000000000006040 var_10          = qword ptr -10h
.text:0000000000006040
.text:0000000000006040 ; __unwind {
.text:0000000000006040                 sub     rsp, 48h
.text:0000000000006044                 mov     r9, rcx
.text:0000000000006047                 mov     rcx, cs:qword_20B250
.text:000000000000604E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000006056                 mov     rax, fs:28h
.text:000000000000605F                 mov     [rsp+48h+var_10], rax
.text:0000000000006064                 xor     eax, eax
.text:0000000000006066                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000606A                 test    rsi, rsi
.text:000000000000606D                 mov     [rsp+48h+var_18], rcx
.text:0000000000006072                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000006079                 movdqa  xmm0, cs:xmmword_20B230
.text:0000000000006081                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000006086                 movdqa  xmm0, cs:xmmword_20B240
.text:000000000000608E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000006093                 jz      short loc_60C7
.text:0000000000006095                 test    rdx, rdx
.text:0000000000006098                 jz      short loc_60C7
.text:000000000000609A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000609F                 mov     [rsp+48h+var_18], rdx
.text:00000000000060A4                 mov     rcx, rsp
.text:00000000000060A7                 mov     rdx, r8
.text:00000000000060AA                 mov     rsi, r9
.text:00000000000060AD                 call    quotearg_n_options
.text:00000000000060B2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000060B7                 xor     rdi, fs:28h
.text:00000000000060C0                 jnz     short loc_60CC
.text:00000000000060C2                 add     rsp, 48h
.text:00000000000060C6                 retn
.text:00000000000060C7 ; ---------------------------------------------------------------------------
.text:00000000000060C7
.text:00000000000060C7 loc_60C7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000060C7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000060C7                 call    _abort
.text:00000000000060CC ; ---------------------------------------------------------------------------
.text:00000000000060CC
.text:00000000000060CC loc_60CC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000060CC                 call    ___stack_chk_fail
.text:00000000000060CC ; } // starts at 6040
.text:00000000000060CC quotearg_n_custom_mem endp
.text:00000000000060CC
.text:00000000000060CC ; ---------------------------------------------------------------------------
.text:00000000000060D1                 align 20h
.text:00000000000060E0
.text:00000000000060E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060E0
.text:00000000000060E0
.text:00000000000060E0                 public quotearg_n_custom
.text:00000000000060E0 quotearg_n_custom proc near
.text:00000000000060E0 ; __unwind {
.text:00000000000060E0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000060E7                 jmp     quotearg_n_custom_mem
.text:00000000000060E7 ; } // starts at 60E0
.text:00000000000060E7 quotearg_n_custom endp
.text:00000000000060E7
.text:00000000000060E7 ; ---------------------------------------------------------------------------
.text:00000000000060EC                 align 10h
.text:00000000000060F0
.text:00000000000060F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060F0
.text:00000000000060F0
.text:00000000000060F0                 public quotearg_custom
.text:00000000000060F0 quotearg_custom proc near
.text:00000000000060F0 ; __unwind {
.text:00000000000060F0                 mov     rcx, rdx
.text:00000000000060F3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000060FA                 mov     rdx, rsi
.text:00000000000060FD                 mov     rsi, rdi
.text:0000000000006100                 xor     edi, edi
.text:0000000000006102                 jmp     quotearg_n_custom_mem
.text:0000000000006102 ; } // starts at 60F0
.text:0000000000006102 quotearg_custom endp
.text:0000000000006102
.text:0000000000006102 ; ---------------------------------------------------------------------------
.text:0000000000006107                 align 10h
.text:0000000000006110
.text:0000000000006110 ; =============== S U B R O U T I N E =======================================
.text:0000000000006110
.text:0000000000006110
.text:0000000000006110                 public quotearg_custom_mem
.text:0000000000006110 quotearg_custom_mem proc near
.text:0000000000006110 ; __unwind {
.text:0000000000006110                 mov     r8, rcx
.text:0000000000006113                 mov     rcx, rdx
.text:0000000000006116                 mov     rdx, rsi
.text:0000000000006119                 mov     rsi, rdi
.text:000000000000611C                 xor     edi, edi
.text:000000000000611E                 jmp     quotearg_n_custom_mem
.text:000000000000611E ; } // starts at 6110
.text:000000000000611E quotearg_custom_mem endp
.text:000000000000611E
.text:000000000000611E ; ---------------------------------------------------------------------------
.text:0000000000006123                 align 10h
.text:0000000000006130
.text:0000000000006130 ; =============== S U B R O U T I N E =======================================
.text:0000000000006130
.text:0000000000006130
.text:0000000000006130                 public quote_n_mem
.text:0000000000006130 quote_n_mem     proc near
.text:0000000000006130 ; __unwind {
.text:0000000000006130                 lea     rcx, quote_quoting_options
.text:0000000000006137                 jmp     quotearg_n_options
.text:0000000000006137 ; } // starts at 6130
.text:0000000000006137 quote_n_mem     endp
.text:0000000000006137
.text:0000000000006137 ; ---------------------------------------------------------------------------
.text:000000000000613C                 align 20h
.text:0000000000006140
.text:0000000000006140 ; =============== S U B R O U T I N E =======================================
.text:0000000000006140
.text:0000000000006140
.text:0000000000006140                 public quote_mem
.text:0000000000006140 quote_mem       proc near
.text:0000000000006140 ; __unwind {
.text:0000000000006140                 lea     rcx, quote_quoting_options
.text:0000000000006147                 mov     rdx, rsi
.text:000000000000614A                 mov     rsi, rdi
.text:000000000000614D                 xor     edi, edi
.text:000000000000614F                 jmp     quotearg_n_options
.text:000000000000614F ; } // starts at 6140
.text:000000000000614F quote_mem       endp
.text:000000000000614F
.text:000000000000614F ; ---------------------------------------------------------------------------
.text:0000000000006154                 align 20h
.text:0000000000006160
.text:0000000000006160 ; =============== S U B R O U T I N E =======================================
.text:0000000000006160
.text:0000000000006160
.text:0000000000006160                 public quote_n
.text:0000000000006160 quote_n         proc near
.text:0000000000006160 ; __unwind {
.text:0000000000006160                 lea     rcx, quote_quoting_options
.text:0000000000006167                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000616E                 jmp     quotearg_n_options
.text:000000000000616E ; } // starts at 6160
.text:000000000000616E quote_n         endp
.text:000000000000616E
.text:000000000000616E ; ---------------------------------------------------------------------------
.text:0000000000006173                 align 20h
.text:0000000000006180
.text:0000000000006180 ; =============== S U B R O U T I N E =======================================
.text:0000000000006180
.text:0000000000006180
.text:0000000000006180                 public quote
.text:0000000000006180 quote           proc near               ; CODE XREF: main+AAC↑p
.text:0000000000006180                                         ; xnumtoumax+6D↓p
.text:0000000000006180 ; __unwind {
.text:0000000000006180                 lea     rcx, quote_quoting_options
.text:0000000000006187                 mov     rsi, rdi
.text:000000000000618A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006191                 xor     edi, edi
.text:0000000000006193                 jmp     quotearg_n_options
.text:0000000000006193 ; } // starts at 6180
.text:0000000000006193 quote           endp
.text:0000000000006193
.text:0000000000006193 ; ---------------------------------------------------------------------------
.text:0000000000006198                 align 20h
.text:00000000000061A0
.text:00000000000061A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061A0
.text:00000000000061A0
.text:00000000000061A0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000061A0                 public version_etc_arn
.text:00000000000061A0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_65DB↓j
.text:00000000000061A0                                         ; version_etc_va:loc_662B↓p ...
.text:00000000000061A0
.text:00000000000061A0 var_58          = qword ptr -58h
.text:00000000000061A0 var_50          = qword ptr -50h
.text:00000000000061A0 var_48          = qword ptr -48h
.text:00000000000061A0 var_40          = qword ptr -40h
.text:00000000000061A0
.text:00000000000061A0 ; __unwind {
.text:00000000000061A0                 push    r15
.text:00000000000061A2                 push    r14
.text:00000000000061A4                 push    r13
.text:00000000000061A6                 push    r12
.text:00000000000061A8                 mov     r12, r9
.text:00000000000061AB                 push    rbp
.text:00000000000061AC                 push    rbx
.text:00000000000061AD                 mov     rbp, rdi
.text:00000000000061B0                 mov     rbx, r8
.text:00000000000061B3                 sub     rsp, 28h
.text:00000000000061B7                 test    rsi, rsi
.text:00000000000061BA                 jz      loc_62D8
.text:00000000000061C0                 mov     r8, rdx
.text:00000000000061C3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000061CA                 mov     r9, rcx
.text:00000000000061CD                 xor     eax, eax
.text:00000000000061CF                 mov     rcx, rsi
.text:00000000000061D2                 mov     esi, 1
.text:00000000000061D7                 call    ___fprintf_chk
.text:00000000000061DC
.text:00000000000061DC loc_61DC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000061DC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000061E3                 xor     edi, edi        ; domainname
.text:00000000000061E5                 mov     edx, 5          ; category
.text:00000000000061EA                 call    _dcgettext
.text:00000000000061EF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000061F6                 mov     rcx, rax
.text:00000000000061F9                 mov     r8d, 7E3h
.text:00000000000061FF                 mov     esi, 1
.text:0000000000006204                 mov     rdi, rbp
.text:0000000000006207                 xor     eax, eax
.text:0000000000006209                 call    ___fprintf_chk
.text:000000000000620E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000006215                 xor     edi, edi        ; domainname
.text:0000000000006217                 mov     edx, 5          ; category
.text:000000000000621C                 call    _dcgettext
.text:0000000000006221                 mov     rsi, rbp        ; stream
.text:0000000000006224                 mov     rdi, rax        ; s
.text:0000000000006227                 call    _fputs_unlocked
.text:000000000000622C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000006230                 ja      def_6244        ; jumptable 0000000000006244 default case
.text:0000000000006236                 lea     rdx, jpt_6244
.text:000000000000623D                 movsxd  rax, ds:(jpt_6244 - 8864h)[rdx+r12*4]
.text:0000000000006241                 add     rax, rdx
.text:0000000000006244                 jmp     rax             ; switch jump
.text:0000000000006244 ; ---------------------------------------------------------------------------
.text:0000000000006246                 align 10h
.text:0000000000006250
.text:0000000000006250 loc_6250:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006250                                         ; DATA XREF: .rodata:jpt_6244↓o
.text:0000000000006250                 mov     r9, [rbx+38h]   ; jumptable 0000000000006244 case 8
.text:0000000000006254                 mov     rax, [rbx+10h]
.text:0000000000006258                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000625F                 mov     r8, [rbx+8]
.text:0000000000006263                 mov     edx, 5          ; category
.text:0000000000006268                 xor     edi, edi        ; domainname
.text:000000000000626A                 mov     r13, [rbx+30h]
.text:000000000000626E                 mov     r12, [rbx+28h]
.text:0000000000006272                 mov     [rsp+58h+var_48], r9
.text:0000000000006277                 mov     r15, [rbx+20h]
.text:000000000000627B                 mov     r14, [rbx+18h]
.text:000000000000627F                 mov     [rsp+58h+var_58], rax
.text:0000000000006283                 mov     [rsp+58h+var_50], r8
.text:0000000000006288                 mov     rbx, [rbx]
.text:000000000000628B                 call    _dcgettext
.text:0000000000006290                 sub     rsp, 8
.text:0000000000006294
.text:0000000000006294 loc_6294:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000006294                 mov     r9, [rsp+60h+var_48]
.text:0000000000006299                 mov     rdx, rax
.text:000000000000629C                 mov     rcx, rbx
.text:000000000000629F                 mov     esi, 1
.text:00000000000062A4                 mov     rdi, rbp
.text:00000000000062A7                 xor     eax, eax
.text:00000000000062A9                 push    r9
.text:00000000000062AB                 push    r13
.text:00000000000062AD                 push    r12
.text:00000000000062AF                 push    r15
.text:00000000000062B1                 push    r14
.text:00000000000062B3                 mov     r9, [rsp+88h+var_58]
.text:00000000000062B8                 mov     r8, [rsp+88h+var_50]
.text:00000000000062BD                 call    ___fprintf_chk
.text:00000000000062C2                 add     rsp, 30h
.text:00000000000062C6
.text:00000000000062C6 loc_62C6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000062C6                                         ; DATA XREF: .rodata:jpt_6244↓o
.text:00000000000062C6                 add     rsp, 28h        ; jumptable 0000000000006244 case 0
.text:00000000000062CA                 pop     rbx
.text:00000000000062CB                 pop     rbp
.text:00000000000062CC                 pop     r12
.text:00000000000062CE                 pop     r13
.text:00000000000062D0                 pop     r14
.text:00000000000062D2                 pop     r15
.text:00000000000062D4                 retn
.text:00000000000062D4 ; ---------------------------------------------------------------------------
.text:00000000000062D5                 align 8
.text:00000000000062D8
.text:00000000000062D8 loc_62D8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000062D8                 mov     r8, rcx
.text:00000000000062DB                 mov     rcx, rdx
.text:00000000000062DE                 lea     rdx, aSS        ; "%s %s\n"
.text:00000000000062E5                 mov     esi, 1
.text:00000000000062EA                 xor     eax, eax
.text:00000000000062EC                 call    ___fprintf_chk
.text:00000000000062F1                 jmp     loc_61DC
.text:00000000000062F1 ; ---------------------------------------------------------------------------
.text:00000000000062F6                 align 20h
.text:0000000000006300
.text:0000000000006300 loc_6300:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006300                                         ; DATA XREF: .rodata:jpt_6244↓o
.text:0000000000006300                 mov     r10, [rbx+40h]  ; jumptable 0000000000006244 case 9
.text:0000000000006304                 mov     r9, [rbx+38h]
.text:0000000000006308                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000630F                 mov     rax, [rbx+10h]
.text:0000000000006313                 mov     r8, [rbx+8]
.text:0000000000006317                 mov     edx, 5          ; category
.text:000000000000631C                 mov     r13, [rbx+30h]
.text:0000000000006320                 mov     r12, [rbx+28h]
.text:0000000000006324                 mov     r15, [rbx+20h]
.text:0000000000006328                 mov     r14, [rbx+18h]
.text:000000000000632C                 mov     rbx, [rbx]
.text:000000000000632F                 mov     [rsp+58h+var_40], r10
.text:0000000000006334                 mov     [rsp+58h+var_48], r9
.text:0000000000006339                 mov     [rsp+58h+var_58], rax
.text:000000000000633D                 mov     [rsp+58h+var_50], r8
.text:0000000000006342
.text:0000000000006342 loc_6342:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000006342                 xor     edi, edi        ; domainname
.text:0000000000006344                 call    _dcgettext
.text:0000000000006349                 mov     r10, [rsp+58h+var_40]
.text:000000000000634E                 push    r10
.text:0000000000006350                 jmp     loc_6294
.text:0000000000006350 ; ---------------------------------------------------------------------------
.text:0000000000006355                 align 8
.text:0000000000006358
.text:0000000000006358 loc_6358:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006358                                         ; DATA XREF: .rodata:jpt_6244↓o
.text:0000000000006358                 mov     rbx, [rbx]      ; jumptable 0000000000006244 case 1
.text:000000000000635B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000006362                 mov     edx, 5          ; category
.text:0000000000006367                 xor     edi, edi        ; domainname
.text:0000000000006369                 call    _dcgettext
.text:000000000000636E                 add     rsp, 28h
.text:0000000000006372                 mov     rcx, rbx
.text:0000000000006375                 mov     rdi, rbp
.text:0000000000006378                 pop     rbx
.text:0000000000006379                 pop     rbp
.text:000000000000637A                 pop     r12
.text:000000000000637C                 pop     r13
.text:000000000000637E                 pop     r14
.text:0000000000006380                 pop     r15
.text:0000000000006382                 mov     rdx, rax
.text:0000000000006385                 mov     esi, 1
.text:000000000000638A                 xor     eax, eax
.text:000000000000638C                 jmp     ___fprintf_chk
.text:000000000000638C ; ---------------------------------------------------------------------------
.text:0000000000006391                 align 8
.text:0000000000006398
.text:0000000000006398 loc_6398:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006398                                         ; DATA XREF: .rodata:jpt_6244↓o
.text:0000000000006398                 mov     r12, [rbx+8]    ; jumptable 0000000000006244 case 2
.text:000000000000639C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000063A3                 mov     rbx, [rbx]
.text:00000000000063A6                 mov     edx, 5          ; category
.text:00000000000063AB                 xor     edi, edi        ; domainname
.text:00000000000063AD                 call    _dcgettext
.text:00000000000063B2                 add     rsp, 28h
.text:00000000000063B6                 mov     r8, r12
.text:00000000000063B9                 mov     rcx, rbx
.text:00000000000063BC                 mov     rdi, rbp
.text:00000000000063BF                 mov     rdx, rax
.text:00000000000063C2                 mov     esi, 1
.text:00000000000063C7                 pop     rbx
.text:00000000000063C8                 pop     rbp
.text:00000000000063C9                 pop     r12
.text:00000000000063CB                 pop     r13
.text:00000000000063CD                 pop     r14
.text:00000000000063CF                 pop     r15
.text:00000000000063D1                 xor     eax, eax
.text:00000000000063D3                 jmp     ___fprintf_chk
.text:00000000000063D3 ; ---------------------------------------------------------------------------
.text:00000000000063D8                 align 20h
.text:00000000000063E0
.text:00000000000063E0 loc_63E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000063E0                                         ; DATA XREF: .rodata:jpt_6244↓o
.text:00000000000063E0                 mov     r13, [rbx+10h]  ; jumptable 0000000000006244 case 3
.text:00000000000063E4                 mov     r12, [rbx+8]
.text:00000000000063E8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000063EF                 mov     rbx, [rbx]
.text:00000000000063F2                 mov     edx, 5          ; category
.text:00000000000063F7                 xor     edi, edi        ; domainname
.text:00000000000063F9                 call    _dcgettext
.text:00000000000063FE                 add     rsp, 28h
.text:0000000000006402                 mov     r9, r13
.text:0000000000006405                 mov     r8, r12
.text:0000000000006408                 mov     rcx, rbx
.text:000000000000640B                 mov     rdi, rbp
.text:000000000000640E                 mov     rdx, rax
.text:0000000000006411                 pop     rbx
.text:0000000000006412                 pop     rbp
.text:0000000000006413                 pop     r12
.text:0000000000006415                 pop     r13
.text:0000000000006417                 pop     r14
.text:0000000000006419                 pop     r15
.text:000000000000641B                 mov     esi, 1
.text:0000000000006420                 xor     eax, eax
.text:0000000000006422                 jmp     ___fprintf_chk
.text:0000000000006422 ; ---------------------------------------------------------------------------
.text:0000000000006427                 align 10h
.text:0000000000006430
.text:0000000000006430 loc_6430:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006430                                         ; DATA XREF: .rodata:jpt_6244↓o
.text:0000000000006430                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000006244 case 4
.text:0000000000006437                 mov     edx, 5          ; category
.text:000000000000643C                 xor     edi, edi        ; domainname
.text:000000000000643E                 mov     r14, [rbx+18h]
.text:0000000000006442                 mov     r13, [rbx+10h]
.text:0000000000006446                 mov     r12, [rbx+8]
.text:000000000000644A                 mov     rbx, [rbx]
.text:000000000000644D                 call    _dcgettext
.text:0000000000006452                 sub     rsp, 8
.text:0000000000006456
.text:0000000000006456 loc_6456:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000006456                 push    r14
.text:0000000000006458                 mov     rdx, rax
.text:000000000000645B                 mov     r9, r13
.text:000000000000645E                 mov     r8, r12
.text:0000000000006461                 mov     rcx, rbx
.text:0000000000006464                 mov     rdi, rbp
.text:0000000000006467                 mov     esi, 1
.text:000000000000646C                 xor     eax, eax
.text:000000000000646E                 call    ___fprintf_chk
.text:0000000000006473                 pop     rax
.text:0000000000006474                 pop     rdx
.text:0000000000006475                 add     rsp, 28h
.text:0000000000006479                 pop     rbx
.text:000000000000647A                 pop     rbp
.text:000000000000647B                 pop     r12
.text:000000000000647D                 pop     r13
.text:000000000000647F                 pop     r14
.text:0000000000006481                 pop     r15
.text:0000000000006483                 retn
.text:0000000000006483 ; ---------------------------------------------------------------------------
.text:0000000000006484                 align 8
.text:0000000000006488
.text:0000000000006488 loc_6488:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006488                                         ; DATA XREF: .rodata:jpt_6244↓o
.text:0000000000006488                 mov     r15, [rbx+20h]  ; jumptable 0000000000006244 case 5
.text:000000000000648C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000006493                 mov     edx, 5          ; category
.text:0000000000006498                 xor     edi, edi        ; domainname
.text:000000000000649A                 mov     r14, [rbx+18h]
.text:000000000000649E                 mov     r13, [rbx+10h]
.text:00000000000064A2                 mov     r12, [rbx+8]
.text:00000000000064A6                 mov     rbx, [rbx]
.text:00000000000064A9                 call    _dcgettext
.text:00000000000064AE                 push    r15
.text:00000000000064B0                 jmp     short loc_6456
.text:00000000000064B0 ; ---------------------------------------------------------------------------
.text:00000000000064B2                 align 8
.text:00000000000064B8
.text:00000000000064B8 loc_64B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000064B8                                         ; DATA XREF: .rodata:jpt_6244↓o
.text:00000000000064B8                 mov     r8, [rbx+8]     ; jumptable 0000000000006244 case 6
.text:00000000000064BC                 mov     r12, [rbx+28h]
.text:00000000000064C0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000064C7                 mov     r15, [rbx+20h]
.text:00000000000064CB                 mov     r14, [rbx+18h]
.text:00000000000064CF                 mov     edx, 5          ; category
.text:00000000000064D4                 mov     r13, [rbx+10h]
.text:00000000000064D8                 xor     edi, edi        ; domainname
.text:00000000000064DA                 mov     rbx, [rbx]
.text:00000000000064DD                 mov     [rsp+58h+var_58], r8
.text:00000000000064E1                 call    _dcgettext
.text:00000000000064E6                 sub     rsp, 8
.text:00000000000064EA                 mov     r9, r13
.text:00000000000064ED                 push    r12
.text:00000000000064EF                 push    r15
.text:00000000000064F1                 push    r14
.text:00000000000064F3
.text:00000000000064F3 loc_64F3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000064F3                 mov     r8, [rsp+78h+var_58]
.text:00000000000064F8                 mov     rcx, rbx
.text:00000000000064FB                 mov     rdx, rax
.text:00000000000064FE                 mov     rdi, rbp
.text:0000000000006501                 mov     esi, 1
.text:0000000000006506                 xor     eax, eax
.text:0000000000006508                 call    ___fprintf_chk
.text:000000000000650D                 add     rsp, 20h
.text:0000000000006511                 add     rsp, 28h
.text:0000000000006515                 pop     rbx
.text:0000000000006516                 pop     rbp
.text:0000000000006517                 pop     r12
.text:0000000000006519                 pop     r13
.text:000000000000651B                 pop     r14
.text:000000000000651D                 pop     r15
.text:000000000000651F                 retn
.text:0000000000006520 ; ---------------------------------------------------------------------------
.text:0000000000006520
.text:0000000000006520 loc_6520:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006520                                         ; DATA XREF: .rodata:jpt_6244↓o
.text:0000000000006520                 mov     r9, [rbx+10h]   ; jumptable 0000000000006244 case 7
.text:0000000000006524                 mov     r13, [rbx+30h]
.text:0000000000006528                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000652F                 mov     r12, [rbx+28h]
.text:0000000000006533                 mov     r15, [rbx+20h]
.text:0000000000006537                 mov     edx, 5          ; category
.text:000000000000653C                 mov     r14, [rbx+18h]
.text:0000000000006540                 mov     r8, [rbx+8]
.text:0000000000006544                 xor     edi, edi        ; domainname
.text:0000000000006546                 mov     [rsp+58h+var_50], r9
.text:000000000000654B                 mov     rbx, [rbx]
.text:000000000000654E                 mov     [rsp+58h+var_58], r8
.text:0000000000006552                 call    _dcgettext
.text:0000000000006557                 push    r13
.text:0000000000006559                 push    r12
.text:000000000000655B                 push    r15
.text:000000000000655D                 push    r14
.text:000000000000655F                 mov     r9, [rsp+78h+var_50]
.text:0000000000006564                 jmp     short loc_64F3
.text:0000000000006564 ; ---------------------------------------------------------------------------
.text:0000000000006566                 align 10h
.text:0000000000006570
.text:0000000000006570 def_6244:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000006570                 mov     r10, [rbx+40h]  ; jumptable 0000000000006244 default case
.text:0000000000006574                 mov     r9, [rbx+38h]
.text:0000000000006578                 mov     edx, 5
.text:000000000000657D                 mov     rax, [rbx+10h]
.text:0000000000006581                 mov     r8, [rbx+8]
.text:0000000000006585                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000658C                 mov     r13, [rbx+30h]
.text:0000000000006590                 mov     r12, [rbx+28h]
.text:0000000000006594                 mov     r15, [rbx+20h]
.text:0000000000006598                 mov     r14, [rbx+18h]
.text:000000000000659C                 mov     [rsp+58h+var_40], r10
.text:00000000000065A1                 mov     [rsp+58h+var_48], r9
.text:00000000000065A6                 mov     [rsp+58h+var_58], rax
.text:00000000000065AA                 mov     [rsp+58h+var_50], r8
.text:00000000000065AF                 mov     rbx, [rbx]
.text:00000000000065B2                 jmp     loc_6342
.text:00000000000065B2 ; } // starts at 61A0
.text:00000000000065B2 version_etc_arn endp
.text:00000000000065B2
.text:00000000000065B2 ; ---------------------------------------------------------------------------
.text:00000000000065B7                 align 20h
.text:00000000000065C0
.text:00000000000065C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065C0
.text:00000000000065C0 ; Attributes: info_from_lumina
.text:00000000000065C0
.text:00000000000065C0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000065C0                 public version_etc_ar
.text:00000000000065C0 version_etc_ar  proc near
.text:00000000000065C0 ; __unwind {
.text:00000000000065C0                 xor     r9d, r9d
.text:00000000000065C3                 cmp     qword ptr [r8], 0
.text:00000000000065C7                 jz      short loc_65DB
.text:00000000000065C9                 nop     dword ptr [rax+00000000h]
.text:00000000000065D0
.text:00000000000065D0 loc_65D0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000065D0                 add     r9, 1
.text:00000000000065D4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000065D9                 jnz     short loc_65D0
.text:00000000000065DB
.text:00000000000065DB loc_65DB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000065DB                 jmp     version_etc_arn
.text:00000000000065DB ; } // starts at 65C0
.text:00000000000065DB version_etc_ar  endp
.text:00000000000065DB
.text:00000000000065E0
.text:00000000000065E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065E0
.text:00000000000065E0 ; Attributes: info_from_lumina
.text:00000000000065E0
.text:00000000000065E0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000065E0                 public version_etc_va
.text:00000000000065E0 version_etc_va  proc near
.text:00000000000065E0
.text:00000000000065E0 authtab         = qword ptr -68h
.text:00000000000065E0 var_10          = qword ptr -10h
.text:00000000000065E0
.text:00000000000065E0 ; __unwind {
.text:00000000000065E0                 sub     rsp, 68h
.text:00000000000065E4                 mov     r10, r8
.text:00000000000065E7                 xor     r9d, r9d
.text:00000000000065EA                 mov     rax, fs:28h
.text:00000000000065F3                 mov     [rsp+68h+var_10], rax
.text:00000000000065F8                 xor     eax, eax
.text:00000000000065FA                 mov     r8, rsp
.text:00000000000065FD                 nop     dword ptr [rax]
.text:0000000000006600
.text:0000000000006600 loc_6600:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000006600                 mov     eax, [r10]
.text:0000000000006603                 cmp     eax, 2Fh ; '/'
.text:0000000000006606                 ja      short loc_664A
.text:0000000000006608                 mov     r11d, eax
.text:000000000000660B                 add     r11, [r10+10h]
.text:000000000000660F                 add     eax, 8
.text:0000000000006612                 mov     [r10], eax
.text:0000000000006615
.text:0000000000006615 loc_6615:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000006615                 mov     rax, [r11]
.text:0000000000006618                 test    rax, rax
.text:000000000000661B                 mov     [r8+r9*8], rax
.text:000000000000661F                 jz      short loc_662B
.text:0000000000006621                 add     r9, 1
.text:0000000000006625                 cmp     r9, 0Ah
.text:0000000000006629                 jnz     short loc_6600
.text:000000000000662B
.text:000000000000662B loc_662B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000662B                 call    version_etc_arn
.text:0000000000006630                 mov     rax, [rsp+68h+var_10]
.text:0000000000006635                 xor     rax, fs:28h
.text:000000000000663E                 jnz     short loc_6645
.text:0000000000006640                 add     rsp, 68h
.text:0000000000006644                 retn
.text:0000000000006645 ; ---------------------------------------------------------------------------
.text:0000000000006645
.text:0000000000006645 loc_6645:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000006645                 call    ___stack_chk_fail
.text:000000000000664A ; ---------------------------------------------------------------------------
.text:000000000000664A
.text:000000000000664A loc_664A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000664A                 mov     r11, [r10+8]
.text:000000000000664E                 lea     rax, [r11+8]
.text:0000000000006652                 mov     [r10+8], rax
.text:0000000000006656                 jmp     short loc_6615
.text:0000000000006656 ; } // starts at 65E0
.text:0000000000006656 version_etc_va  endp
.text:0000000000006656
.text:0000000000006656 ; ---------------------------------------------------------------------------
.text:0000000000006658                 align 20h
.text:0000000000006660
.text:0000000000006660 ; =============== S U B R O U T I N E =======================================
.text:0000000000006660
.text:0000000000006660 ; Attributes: info_from_lumina
.text:0000000000006660
.text:0000000000006660 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000006660                 public version_etc
.text:0000000000006660 version_etc     proc near               ; CODE XREF: main+102↑p
.text:0000000000006660
.text:0000000000006660 var_C0          = dword ptr -0C0h
.text:0000000000006660 var_B8          = qword ptr -0B8h
.text:0000000000006660 var_B0          = qword ptr -0B0h
.text:0000000000006660 var_A8          = byte ptr -0A8h
.text:0000000000006660 var_50          = qword ptr -50h
.text:0000000000006660 var_48          = byte ptr -48h
.text:0000000000006660 var_28          = qword ptr -28h
.text:0000000000006660 var_20          = qword ptr -20h
.text:0000000000006660 arg_0           = byte ptr  8
.text:0000000000006660
.text:0000000000006660 ; __unwind {
.text:0000000000006660                 push    rbp
.text:0000000000006661                 push    rbx
.text:0000000000006662                 mov     r10d, 20h ; ' '
.text:0000000000006668                 xor     r11d, r11d
.text:000000000000666B                 sub     rsp, 0B8h
.text:0000000000006672                 mov     rax, fs:28h
.text:000000000000667B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000006680                 xor     eax, eax
.text:0000000000006682                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000668A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000006692                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000669A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000669F                 mov     [rsp+0C8h+var_20], r9
.text:00000000000066A7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000066AF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000066B4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000066BC                 xor     r9d, r9d
.text:00000000000066BF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000066C4                 mov     rbp, rax
.text:00000000000066C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000066D0
.text:00000000000066D0 loc_66D0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000066D0                 cmp     r10d, 2Fh ; '/'
.text:00000000000066D4                 ja      short loc_672C
.text:00000000000066D6                 mov     eax, r10d
.text:00000000000066D9                 mov     r11d, 1
.text:00000000000066DF                 add     r10d, 8
.text:00000000000066E3                 add     rax, rbp
.text:00000000000066E6
.text:00000000000066E6 loc_66E6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000066E6                 mov     rax, [rax]
.text:00000000000066E9                 test    rax, rax
.text:00000000000066EC                 mov     [r8+r9*8], rax
.text:00000000000066F0                 jz      short loc_66FC
.text:00000000000066F2                 add     r9, 1
.text:00000000000066F6                 cmp     r9, 0Ah
.text:00000000000066FA                 jnz     short loc_66D0
.text:00000000000066FC
.text:00000000000066FC loc_66FC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000066FC                 test    r11b, r11b
.text:00000000000066FF                 jnz     short loc_6725
.text:0000000000006701
.text:0000000000006701 loc_6701:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000006701                 call    version_etc_arn
.text:0000000000006706                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000670B                 xor     rax, fs:28h
.text:0000000000006714                 jnz     short loc_6720
.text:0000000000006716                 add     rsp, 0B8h
.text:000000000000671D                 pop     rbx
.text:000000000000671E                 pop     rbp
.text:000000000000671F                 retn
.text:0000000000006720 ; ---------------------------------------------------------------------------
.text:0000000000006720
.text:0000000000006720 loc_6720:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006720                 call    ___stack_chk_fail
.text:0000000000006725 ; ---------------------------------------------------------------------------
.text:0000000000006725
.text:0000000000006725 loc_6725:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006725                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000672A                 jmp     short loc_6701
.text:000000000000672C ; ---------------------------------------------------------------------------
.text:000000000000672C
.text:000000000000672C loc_672C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000672C                 mov     rax, rbx
.text:000000000000672F                 add     rbx, 8
.text:0000000000006733                 jmp     short loc_66E6
.text:0000000000006733 ; } // starts at 6660
.text:0000000000006733 version_etc     endp
.text:0000000000006733
.text:0000000000006733 ; ---------------------------------------------------------------------------
.text:0000000000006735                 align 20h
.text:0000000000006740
.text:0000000000006740 ; =============== S U B R O U T I N E =======================================
.text:0000000000006740
.text:0000000000006740 ; Attributes: info_from_lumina
.text:0000000000006740
.text:0000000000006740 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006740                 public emit_bug_reporting_address
.text:0000000000006740 emit_bug_reporting_address proc near
.text:0000000000006740 ; __unwind {
.text:0000000000006740                 push    rbx
.text:0000000000006741                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000006748                 mov     edx, 5          ; category
.text:000000000000674D                 xor     edi, edi        ; domainname
.text:000000000000674F                 call    _dcgettext
.text:0000000000006754                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000675B                 mov     rsi, rax
.text:000000000000675E                 mov     edi, 1
.text:0000000000006763                 xor     eax, eax
.text:0000000000006765                 call    ___printf_chk
.text:000000000000676A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000006771                 mov     edx, 5          ; category
.text:0000000000006776                 xor     edi, edi        ; domainname
.text:0000000000006778                 call    _dcgettext
.text:000000000000677D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006784                 lea     rdx, unk_73F0
.text:000000000000678B                 mov     rsi, rax
.text:000000000000678E                 mov     edi, 1
.text:0000000000006793                 xor     eax, eax
.text:0000000000006795                 call    ___printf_chk
.text:000000000000679A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000067A1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000067A8                 xor     edi, edi        ; domainname
.text:00000000000067AA                 mov     edx, 5          ; category
.text:00000000000067AF                 call    _dcgettext
.text:00000000000067B4                 mov     rsi, rbx        ; stream
.text:00000000000067B7                 mov     rdi, rax        ; s
.text:00000000000067BA                 pop     rbx
.text:00000000000067BB                 jmp     _fputs_unlocked
.text:00000000000067BB ; } // starts at 6740
.text:00000000000067BB emit_bug_reporting_address endp
.text:00000000000067BB
.text:00000000000067C0
.text:00000000000067C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067C0
.text:00000000000067C0
.text:00000000000067C0                 public xmalloc
.text:00000000000067C0 xmalloc         proc near               ; CODE XREF: main+27A↑p
.text:00000000000067C0                                         ; main+287↑p ...
.text:00000000000067C0 ; __unwind {
.text:00000000000067C0                 push    rbx
.text:00000000000067C1                 mov     rbx, rdi
.text:00000000000067C4                 call    _malloc
.text:00000000000067C9                 test    rax, rax
.text:00000000000067CC                 jnz     short loc_67D3
.text:00000000000067CE                 test    rbx, rbx
.text:00000000000067D1                 jnz     short loc_67D5
.text:00000000000067D3
.text:00000000000067D3 loc_67D3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000067D3                 pop     rbx
.text:00000000000067D4                 retn
.text:00000000000067D5 ; ---------------------------------------------------------------------------
.text:00000000000067D5
.text:00000000000067D5 loc_67D5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000067D5                 call    xalloc_die
.text:00000000000067D5 ; } // starts at 67C0
.text:00000000000067D5 xmalloc         endp
.text:00000000000067D5
.text:00000000000067D5 ; ---------------------------------------------------------------------------
.text:00000000000067DA                 align 20h
.text:00000000000067E0
.text:00000000000067E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067E0
.text:00000000000067E0 ; Attributes: info_from_lumina
.text:00000000000067E0
.text:00000000000067E0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000067E0                 public xnmalloc
.text:00000000000067E0 xnmalloc        proc near
.text:00000000000067E0 ; __unwind {
.text:00000000000067E0                 mov     rax, rdi
.text:00000000000067E3                 mul     rsi
.text:00000000000067E6                 mov     rdi, rax
.text:00000000000067E9                 seto    al
.text:00000000000067EC                 test    rdi, rdi
.text:00000000000067EF                 js      short loc_67FB
.text:00000000000067F1                 movzx   eax, al
.text:00000000000067F4                 test    rax, rax
.text:00000000000067F7                 jnz     short loc_67FB
.text:00000000000067F9                 jmp     short xmalloc
.text:00000000000067FB ; ---------------------------------------------------------------------------
.text:00000000000067FB
.text:00000000000067FB loc_67FB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000067FB                                         ; xnmalloc+17↑j
.text:00000000000067FB                 sub     rsp, 8
.text:00000000000067FF                 call    xalloc_die
.text:00000000000067FF ; } // starts at 67E0
.text:00000000000067FF xnmalloc        endp
.text:00000000000067FF
.text:00000000000067FF ; ---------------------------------------------------------------------------
.text:0000000000006804                 align 10h
.text:0000000000006810
.text:0000000000006810 ; =============== S U B R O U T I N E =======================================
.text:0000000000006810
.text:0000000000006810
.text:0000000000006810                 public xcharalloc
.text:0000000000006810 xcharalloc      proc near
.text:0000000000006810 ; __unwind {
.text:0000000000006810                 jmp     short xmalloc
.text:0000000000006810 ; } // starts at 6810
.text:0000000000006810 xcharalloc      endp
.text:0000000000006810
.text:0000000000006810 ; ---------------------------------------------------------------------------
.text:0000000000006812                 align 20h
.text:0000000000006820
.text:0000000000006820 ; =============== S U B R O U T I N E =======================================
.text:0000000000006820
.text:0000000000006820 ; Attributes: info_from_lumina
.text:0000000000006820
.text:0000000000006820 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006820                 public xrealloc
.text:0000000000006820 xrealloc        proc near               ; CODE XREF: base64url_decode_ctx_wrapper+CD↑p
.text:0000000000006820                                         ; base32hex_decode_ctx_wrapper+AF↑p ...
.text:0000000000006820 ; __unwind {
.text:0000000000006820                 test    rsi, rsi
.text:0000000000006823                 push    rbx
.text:0000000000006824                 mov     rbx, rsi
.text:0000000000006827                 jnz     short loc_682E
.text:0000000000006829                 test    rdi, rdi
.text:000000000000682C                 jnz     short loc_6848
.text:000000000000682E
.text:000000000000682E loc_682E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000682E                 mov     rsi, rbx        ; size
.text:0000000000006831                 call    _realloc
.text:0000000000006836                 test    rax, rax
.text:0000000000006839                 jnz     short loc_6840
.text:000000000000683B                 test    rbx, rbx
.text:000000000000683E                 jnz     short loc_6851
.text:0000000000006840
.text:0000000000006840 loc_6840:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000006840                 pop     rbx
.text:0000000000006841                 retn
.text:0000000000006841 ; ---------------------------------------------------------------------------
.text:0000000000006842                 align 8
.text:0000000000006848
.text:0000000000006848 loc_6848:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000006848                 call    _free
.text:000000000000684D                 xor     eax, eax
.text:000000000000684F                 pop     rbx
.text:0000000000006850                 retn
.text:0000000000006851 ; ---------------------------------------------------------------------------
.text:0000000000006851
.text:0000000000006851 loc_6851:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000006851                 call    xalloc_die
.text:0000000000006851 ; } // starts at 6820
.text:0000000000006851 xrealloc        endp
.text:0000000000006851
.text:0000000000006851 ; ---------------------------------------------------------------------------
.text:0000000000006856                 align 20h
.text:0000000000006860
.text:0000000000006860 ; =============== S U B R O U T I N E =======================================
.text:0000000000006860
.text:0000000000006860 ; Attributes: info_from_lumina
.text:0000000000006860
.text:0000000000006860 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000006860                 public xnrealloc
.text:0000000000006860 xnrealloc       proc near
.text:0000000000006860 ; __unwind {
.text:0000000000006860                 mov     rax, rsi
.text:0000000000006863                 mul     rdx
.text:0000000000006866                 mov     rsi, rax
.text:0000000000006869                 seto    al
.text:000000000000686C                 test    rsi, rsi
.text:000000000000686F                 js      short loc_687B
.text:0000000000006871                 movzx   eax, al
.text:0000000000006874                 test    rax, rax
.text:0000000000006877                 jnz     short loc_687B
.text:0000000000006879                 jmp     short xrealloc
.text:000000000000687B ; ---------------------------------------------------------------------------
.text:000000000000687B
.text:000000000000687B loc_687B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000687B                                         ; xnrealloc+17↑j
.text:000000000000687B                 sub     rsp, 8
.text:000000000000687F                 call    xalloc_die
.text:000000000000687F ; } // starts at 6860
.text:000000000000687F xnrealloc       endp
.text:000000000000687F
.text:000000000000687F ; ---------------------------------------------------------------------------
.text:0000000000006884                 align 10h
.text:0000000000006890
.text:0000000000006890 ; =============== S U B R O U T I N E =======================================
.text:0000000000006890
.text:0000000000006890 ; Attributes: info_from_lumina
.text:0000000000006890
.text:0000000000006890 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000006890                 public x2nrealloc
.text:0000000000006890 x2nrealloc      proc near
.text:0000000000006890 ; __unwind {
.text:0000000000006890                 test    rdi, rdi
.text:0000000000006893                 mov     r9, rdx
.text:0000000000006896                 mov     rcx, [rsi]
.text:0000000000006899                 jz      short loc_68D0
.text:000000000000689B                 xor     edx, edx
.text:000000000000689D                 mov     rax, 5555555555555554h
.text:00000000000068A7                 div     r9
.text:00000000000068AA                 cmp     rax, rcx
.text:00000000000068AD                 jbe     short loc_68EB
.text:00000000000068AF                 mov     rax, rcx
.text:00000000000068B2                 shr     rax, 1
.text:00000000000068B5                 lea     rcx, [rax+rcx+1]
.text:00000000000068BA
.text:00000000000068BA loc_68BA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000068BA                 mov     [rsi], rcx
.text:00000000000068BD                 imul    rcx, r9
.text:00000000000068C1                 mov     rsi, rcx
.text:00000000000068C4                 jmp     xrealloc
.text:00000000000068C4 ; ---------------------------------------------------------------------------
.text:00000000000068C9                 align 10h
.text:00000000000068D0
.text:00000000000068D0 loc_68D0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000068D0                 test    rcx, rcx
.text:00000000000068D3                 jz      short loc_68F8
.text:00000000000068D5
.text:00000000000068D5 loc_68D5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000068D5                 mov     rax, rcx
.text:00000000000068D8                 mul     r9
.text:00000000000068DB                 seto    dl
.text:00000000000068DE                 test    rax, rax
.text:00000000000068E1                 movzx   edx, dl
.text:00000000000068E4                 js      short loc_68EB
.text:00000000000068E6                 test    rdx, rdx
.text:00000000000068E9                 jz      short loc_68BA
.text:00000000000068EB
.text:00000000000068EB loc_68EB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000068EB                                         ; x2nrealloc+54↑j
.text:00000000000068EB                 sub     rsp, 8
.text:00000000000068EF                 call    xalloc_die
.text:00000000000068EF ; ---------------------------------------------------------------------------
.text:00000000000068F4                 align 8
.text:00000000000068F8
.text:00000000000068F8 loc_68F8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000068F8                 xor     edx, edx
.text:00000000000068FA                 mov     eax, 80h
.text:00000000000068FF                 xor     r8d, r8d
.text:0000000000006902                 div     r9
.text:0000000000006905                 test    rax, rax
.text:0000000000006908                 setz    r8b
.text:000000000000690C                 lea     rcx, [r8+rax]
.text:0000000000006910                 jmp     short loc_68D5
.text:0000000000006910 ; } // starts at 6890
.text:0000000000006910 x2nrealloc      endp
.text:0000000000006910
.text:0000000000006910 ; ---------------------------------------------------------------------------
.text:0000000000006912                 align 20h
.text:0000000000006920
.text:0000000000006920 ; =============== S U B R O U T I N E =======================================
.text:0000000000006920
.text:0000000000006920 ; Attributes: info_from_lumina
.text:0000000000006920
.text:0000000000006920 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006920                 public x2realloc
.text:0000000000006920 x2realloc       proc near
.text:0000000000006920 ; __unwind {
.text:0000000000006920                 test    rdi, rdi
.text:0000000000006923                 mov     rax, [rsi]
.text:0000000000006926                 jz      short loc_6950
.text:0000000000006928                 mov     rdx, 5555555555555553h
.text:0000000000006932                 cmp     rax, rdx
.text:0000000000006935                 ja      short loc_6961
.text:0000000000006937                 mov     rdx, rax
.text:000000000000693A                 shr     rdx, 1
.text:000000000000693D                 lea     rax, [rdx+rax+1]
.text:0000000000006942
.text:0000000000006942 loc_6942:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000006942                 mov     [rsi], rax
.text:0000000000006945                 mov     rsi, rax
.text:0000000000006948                 jmp     xrealloc
.text:0000000000006948 ; ---------------------------------------------------------------------------
.text:000000000000694D                 align 10h
.text:0000000000006950
.text:0000000000006950 loc_6950:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000006950                 test    rax, rax
.text:0000000000006953                 mov     edx, 80h
.text:0000000000006958                 cmovz   rax, rdx
.text:000000000000695C                 test    rax, rax
.text:000000000000695F                 jns     short loc_6942
.text:0000000000006961
.text:0000000000006961 loc_6961:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000006961                 sub     rsp, 8
.text:0000000000006965                 call    xalloc_die
.text:0000000000006965 ; } // starts at 6920
.text:0000000000006965 x2realloc       endp
.text:0000000000006965
.text:0000000000006965 ; ---------------------------------------------------------------------------
.text:000000000000696A                 align 10h
.text:0000000000006970
.text:0000000000006970 ; =============== S U B R O U T I N E =======================================
.text:0000000000006970
.text:0000000000006970
.text:0000000000006970 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006970                 public xzalloc
.text:0000000000006970 xzalloc         proc near
.text:0000000000006970 ; __unwind {
.text:0000000000006970                 push    rbx
.text:0000000000006971                 mov     rbx, rdi
.text:0000000000006974                 call    xmalloc
.text:0000000000006979                 mov     rdx, rbx        ; n
.text:000000000000697C                 xor     esi, esi        ; c
.text:000000000000697E                 mov     rdi, rax        ; s
.text:0000000000006981                 pop     rbx
.text:0000000000006982                 jmp     _memset
.text:0000000000006982 ; } // starts at 6970
.text:0000000000006982 xzalloc         endp
.text:0000000000006982
.text:0000000000006982 ; ---------------------------------------------------------------------------
.text:0000000000006987                 align 10h
.text:0000000000006990
.text:0000000000006990 ; =============== S U B R O U T I N E =======================================
.text:0000000000006990
.text:0000000000006990 ; Attributes: info_from_lumina
.text:0000000000006990
.text:0000000000006990 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006990                 public xcalloc
.text:0000000000006990 xcalloc         proc near
.text:0000000000006990 ; __unwind {
.text:0000000000006990                 mov     rax, rdi
.text:0000000000006993                 sub     rsp, 8
.text:0000000000006997                 mul     rsi
.text:000000000000699A                 seto    dl
.text:000000000000699D                 test    rax, rax
.text:00000000000069A0                 js      short loc_69B9
.text:00000000000069A2                 movzx   edx, dl
.text:00000000000069A5                 test    rdx, rdx
.text:00000000000069A8                 jnz     short loc_69B9
.text:00000000000069AA                 call    _calloc
.text:00000000000069AF                 test    rax, rax
.text:00000000000069B2                 jz      short loc_69B9
.text:00000000000069B4                 add     rsp, 8
.text:00000000000069B8                 retn
.text:00000000000069B9 ; ---------------------------------------------------------------------------
.text:00000000000069B9
.text:00000000000069B9 loc_69B9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000069B9                                         ; xcalloc+18↑j ...
.text:00000000000069B9                 call    xalloc_die
.text:00000000000069B9 ; } // starts at 6990
.text:00000000000069B9 xcalloc         endp
.text:00000000000069B9
.text:00000000000069B9 ; ---------------------------------------------------------------------------
.text:00000000000069BE                 align 20h
.text:00000000000069C0
.text:00000000000069C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069C0
.text:00000000000069C0 ; Attributes: info_from_lumina
.text:00000000000069C0
.text:00000000000069C0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000069C0                 public xmemdup
.text:00000000000069C0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000069C0                                         ; xstrdup+11↓j
.text:00000000000069C0 ; __unwind {
.text:00000000000069C0                 push    rbp
.text:00000000000069C1                 push    rbx
.text:00000000000069C2                 mov     rbp, rdi
.text:00000000000069C5                 mov     rdi, rsi
.text:00000000000069C8                 mov     rbx, rsi
.text:00000000000069CB                 sub     rsp, 8
.text:00000000000069CF                 call    xmalloc
.text:00000000000069D4                 add     rsp, 8
.text:00000000000069D8                 mov     rdx, rbx        ; n
.text:00000000000069DB                 mov     rsi, rbp        ; src
.text:00000000000069DE                 pop     rbx
.text:00000000000069DF                 pop     rbp
.text:00000000000069E0                 mov     rdi, rax        ; dest
.text:00000000000069E3                 jmp     _memcpy
.text:00000000000069E3 ; } // starts at 69C0
.text:00000000000069E3 xmemdup         endp
.text:00000000000069E3
.text:00000000000069E3 ; ---------------------------------------------------------------------------
.text:00000000000069E8                 align 10h
.text:00000000000069F0
.text:00000000000069F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069F0
.text:00000000000069F0
.text:00000000000069F0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000069F0                 public xstrdup
.text:00000000000069F0 xstrdup         proc near
.text:00000000000069F0 ; __unwind {
.text:00000000000069F0                 push    rbx
.text:00000000000069F1                 mov     rbx, rdi
.text:00000000000069F4                 call    _strlen
.text:00000000000069F9                 mov     rdi, rbx        ; src
.text:00000000000069FC                 lea     rsi, [rax+1]    ; n
.text:0000000000006A00                 pop     rbx
.text:0000000000006A01                 jmp     short xmemdup
.text:0000000000006A01 ; } // starts at 69F0
.text:0000000000006A01 xstrdup         endp
.text:0000000000006A01
.text:0000000000006A01 ; ---------------------------------------------------------------------------
.text:0000000000006A03                 align 10h
.text:0000000000006A10
.text:0000000000006A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A10
.text:0000000000006A10 ; Attributes: noreturn info_from_lumina
.text:0000000000006A10
.text:0000000000006A10 ; void __cdecl xalloc_die()
.text:0000000000006A10                 public xalloc_die
.text:0000000000006A10 xalloc_die      proc near               ; CODE XREF: base64url_decode_ctx_wrapper:loc_2E6E↑p
.text:0000000000006A10                                         ; base32hex_decode_ctx_wrapper:loc_2F4C↑p ...
.text:0000000000006A10 ; __unwind {
.text:0000000000006A10                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000006A17                 sub     rsp, 8
.text:0000000000006A1B                 mov     edx, 5          ; category
.text:0000000000006A20                 xor     edi, edi        ; domainname
.text:0000000000006A22                 call    _dcgettext
.text:0000000000006A27                 mov     edi, cs:exit_failure ; status
.text:0000000000006A2D                 lea     rdx, format     ; format
.text:0000000000006A34                 mov     rcx, rax
.text:0000000000006A37                 xor     esi, esi        ; errnum
.text:0000000000006A39                 xor     eax, eax
.text:0000000000006A3B                 call    _error
.text:0000000000006A40                 call    _abort
.text:0000000000006A40 ; } // starts at 6A10
.text:0000000000006A40 xalloc_die      endp
.text:0000000000006A40
.text:0000000000006A40 ; ---------------------------------------------------------------------------
.text:0000000000006A45                 align 10h
.text:0000000000006A50
.text:0000000000006A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A50
.text:0000000000006A50 ; Attributes: info_from_lumina
.text:0000000000006A50
.text:0000000000006A50 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000006A50                 public xnumtoumax
.text:0000000000006A50 xnumtoumax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:0000000000006A50
.text:0000000000006A50 var_48          = qword ptr -48h
.text:0000000000006A50 var_40          = qword ptr -40h
.text:0000000000006A50 arg_0           = dword ptr  8
.text:0000000000006A50
.text:0000000000006A50 ; __unwind {
.text:0000000000006A50                 push    r15
.text:0000000000006A52                 push    r14
.text:0000000000006A54                 mov     r15, rcx
.text:0000000000006A57                 push    r13
.text:0000000000006A59                 push    r12
.text:0000000000006A5B                 mov     r14, rdx
.text:0000000000006A5E                 push    rbp
.text:0000000000006A5F                 push    rbx
.text:0000000000006A60                 mov     edx, esi
.text:0000000000006A62                 xor     esi, esi
.text:0000000000006A64                 mov     r12, rdi
.text:0000000000006A67                 mov     r13, r9
.text:0000000000006A6A                 sub     rsp, 18h
.text:0000000000006A6E                 mov     rcx, rsp
.text:0000000000006A71                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000006A75                 mov     rax, fs:28h
.text:0000000000006A7E                 mov     [rsp+48h+var_40], rax
.text:0000000000006A83                 xor     eax, eax
.text:0000000000006A85                 call    xstrtoumax
.text:0000000000006A8A                 test    eax, eax
.text:0000000000006A8C                 jnz     loc_6B20
.text:0000000000006A92                 mov     rbp, [rsp+48h+var_48]
.text:0000000000006A96                 cmp     rbp, r14
.text:0000000000006A99                 jb      short loc_6AA0
.text:0000000000006A9B                 cmp     rbp, r15
.text:0000000000006A9E                 jbe     short loc_6AF4
.text:0000000000006AA0
.text:0000000000006AA0 loc_6AA0:                               ; CODE XREF: xnumtoumax+49↑j
.text:0000000000006AA0                 call    ___errno_location
.text:0000000000006AA5                 cmp     rbp, 40000000h
.text:0000000000006AAC                 mov     r14, rax
.text:0000000000006AAF                 sbb     eax, eax
.text:0000000000006AB1                 and     eax, 0FFFFFFD7h
.text:0000000000006AB4                 add     eax, 4Bh ; 'K'
.text:0000000000006AB7                 mov     [r14], eax
.text:0000000000006ABA
.text:0000000000006ABA loc_6ABA:                               ; CODE XREF: xnumtoumax+E2↓j
.text:0000000000006ABA                                         ; xnumtoumax+EA↓j ...
.text:0000000000006ABA                 mov     rdi, r12
.text:0000000000006ABD                 call    quote
.text:0000000000006AC2                 mov     esi, [r14]
.text:0000000000006AC5                 mov     r8, rax
.text:0000000000006AC8                 mov     eax, 0
.text:0000000000006ACD                 lea     rdx, aS         ; "%s: "
.text:0000000000006AD4                 mov     rcx, r13
.text:0000000000006AD7                 cmp     esi, 16h
.text:0000000000006ADA                 cmovz   esi, eax        ; errnum
.text:0000000000006ADD                 test    ebx, ebx
.text:0000000000006ADF                 mov     eax, 1
.text:0000000000006AE4                 cmovz   ebx, eax
.text:0000000000006AE7                 xor     eax, eax
.text:0000000000006AE9                 mov     edi, ebx        ; status
.text:0000000000006AEB                 call    _error
.text:0000000000006AF0                 mov     rbp, [rsp+48h+var_48]
.text:0000000000006AF4
.text:0000000000006AF4 loc_6AF4:                               ; CODE XREF: xnumtoumax+4E↑j
.text:0000000000006AF4                 mov     rdx, [rsp+48h+var_40]
.text:0000000000006AF9                 xor     rdx, fs:28h
.text:0000000000006B02                 mov     rax, rbp
.text:0000000000006B05                 jnz     short loc_6B4B
.text:0000000000006B07                 add     rsp, 18h
.text:0000000000006B0B                 pop     rbx
.text:0000000000006B0C                 pop     rbp
.text:0000000000006B0D                 pop     r12
.text:0000000000006B0F                 pop     r13
.text:0000000000006B11                 pop     r14
.text:0000000000006B13                 pop     r15
.text:0000000000006B15                 retn
.text:0000000000006B15 ; ---------------------------------------------------------------------------
.text:0000000000006B16                 align 20h
.text:0000000000006B20
.text:0000000000006B20 loc_6B20:                               ; CODE XREF: xnumtoumax+3C↑j
.text:0000000000006B20                 mov     ebp, eax
.text:0000000000006B22                 call    ___errno_location
.text:0000000000006B27                 cmp     ebp, 1
.text:0000000000006B2A                 mov     r14, rax
.text:0000000000006B2D                 jz      short loc_6B40
.text:0000000000006B2F                 cmp     ebp, 3
.text:0000000000006B32                 jnz     short loc_6ABA
.text:0000000000006B34                 mov     dword ptr [rax], 0
.text:0000000000006B3A                 jmp     loc_6ABA
.text:0000000000006B3A ; ---------------------------------------------------------------------------
.text:0000000000006B3F                 align 20h
.text:0000000000006B40
.text:0000000000006B40 loc_6B40:                               ; CODE XREF: xnumtoumax+DD↑j
.text:0000000000006B40                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000006B46                 jmp     loc_6ABA
.text:0000000000006B4B ; ---------------------------------------------------------------------------
.text:0000000000006B4B
.text:0000000000006B4B loc_6B4B:                               ; CODE XREF: xnumtoumax+B5↑j
.text:0000000000006B4B                 call    ___stack_chk_fail
.text:0000000000006B4B ; } // starts at 6A50
.text:0000000000006B4B xnumtoumax      endp
.text:0000000000006B4B
.text:0000000000006B50
.text:0000000000006B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B50
.text:0000000000006B50 ; Attributes: info_from_lumina
.text:0000000000006B50
.text:0000000000006B50 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000006B50                 public xdectoumax
.text:0000000000006B50 xdectoumax      proc near               ; CODE XREF: main+180↑p
.text:0000000000006B50 ; __unwind {
.text:0000000000006B50                 sub     rsp, 10h
.text:0000000000006B54                 push    r9
.text:0000000000006B56                 mov     r9, r8
.text:0000000000006B59                 mov     r8, rcx
.text:0000000000006B5C                 mov     rcx, rdx
.text:0000000000006B5F                 mov     rdx, rsi
.text:0000000000006B62                 mov     esi, 0Ah
.text:0000000000006B67                 call    xnumtoumax
.text:0000000000006B6C                 add     rsp, 18h
.text:0000000000006B70                 retn
.text:0000000000006B70 ; } // starts at 6B50
.text:0000000000006B70 xdectoumax      endp
.text:0000000000006B70
.text:0000000000006B70 ; ---------------------------------------------------------------------------
.text:0000000000006B71                 align 20h
.text:0000000000006B80
.text:0000000000006B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B80
.text:0000000000006B80
.text:0000000000006B80 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000006B80                 public xstrtoumax
.text:0000000000006B80 xstrtoumax      proc near               ; CODE XREF: xnumtoumax+35↑p
.text:0000000000006B80
.text:0000000000006B80 base            = dword ptr -50h
.text:0000000000006B80 endptr          = qword ptr -48h
.text:0000000000006B80 var_40          = qword ptr -40h
.text:0000000000006B80
.text:0000000000006B80 ; __unwind {
.text:0000000000006B80                 push    r15
.text:0000000000006B82                 push    r14
.text:0000000000006B84                 push    r13
.text:0000000000006B86                 push    r12
.text:0000000000006B88                 push    rbp
.text:0000000000006B89                 push    rbx
.text:0000000000006B8A                 sub     rsp, 28h
.text:0000000000006B8E                 mov     rax, fs:28h
.text:0000000000006B97                 mov     [rsp+58h+var_40], rax
.text:0000000000006B9C                 xor     eax, eax
.text:0000000000006B9E                 cmp     edx, 24h ; '$'
.text:0000000000006BA1                 ja      loc_6F05
.text:0000000000006BA7                 lea     rax, [rsp+58h+endptr]
.text:0000000000006BAC                 mov     r15, rsi
.text:0000000000006BAF                 test    rsi, rsi
.text:0000000000006BB2                 mov     rbp, rdi
.text:0000000000006BB5                 mov     [rsp+58h+base], edx
.text:0000000000006BB9                 mov     r14, rcx
.text:0000000000006BBC                 mov     r13, r8
.text:0000000000006BBF                 cmovz   r15, rax
.text:0000000000006BC3                 call    ___errno_location
.text:0000000000006BC8                 mov     dword ptr [rax], 0
.text:0000000000006BCE                 mov     r12, rax
.text:0000000000006BD1                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000006BD5                 call    ___ctype_b_loc
.text:0000000000006BDA                 mov     edx, [rsp+58h+base] ; base
.text:0000000000006BDE                 mov     rsi, [rax]
.text:0000000000006BE1                 mov     rax, rbp
.text:0000000000006BE4                 jmp     short loc_6BF7
.text:0000000000006BE4 ; ---------------------------------------------------------------------------
.text:0000000000006BE6                 align 10h
.text:0000000000006BF0
.text:0000000000006BF0 loc_6BF0:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000006BF0                 add     rax, 1
.text:0000000000006BF4                 movzx   ebx, byte ptr [rax]
.text:0000000000006BF7
.text:0000000000006BF7 loc_6BF7:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000006BF7                 movzx   ecx, bl
.text:0000000000006BFA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000006BFF                 jnz     short loc_6BF0
.text:0000000000006C01                 cmp     bl, 2Dh ; '-'
.text:0000000000006C04                 jz      short loc_6C58
.text:0000000000006C06                 xor     ecx, ecx        ; group
.text:0000000000006C08                 mov     rsi, r15        ; endptr
.text:0000000000006C0B                 mov     rdi, rbp        ; nptr
.text:0000000000006C0E                 call    ___strtoul_internal
.text:0000000000006C13                 mov     rcx, [r15]
.text:0000000000006C16                 mov     rbx, rax
.text:0000000000006C19                 cmp     rcx, rbp
.text:0000000000006C1C                 jz      short loc_6C48
.text:0000000000006C1E                 mov     eax, [r12]
.text:0000000000006C22                 test    eax, eax
.text:0000000000006C24                 jz      short loc_6C88
.text:0000000000006C26                 cmp     eax, 22h ; '"'
.text:0000000000006C29                 mov     ebp, 1
.text:0000000000006C2E                 jnz     short loc_6C58
.text:0000000000006C30
.text:0000000000006C30 loc_6C30:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000006C30                 test    r13, r13
.text:0000000000006C33                 jz      short loc_6C3E
.text:0000000000006C35                 movzx   r12d, byte ptr [rcx]
.text:0000000000006C39                 test    r12b, r12b
.text:0000000000006C3C                 jnz     short loc_6CB7
.text:0000000000006C3E
.text:0000000000006C3E loc_6C3E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:0000000000006C3E                 mov     [r14], rbx
.text:0000000000006C41                 jmp     short loc_6C5D
.text:0000000000006C41 ; ---------------------------------------------------------------------------
.text:0000000000006C43                 align 8
.text:0000000000006C48
.text:0000000000006C48 loc_6C48:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000006C48                 test    r13, r13
.text:0000000000006C4B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000006C50                 jnz     short loc_6C90
.text:0000000000006C52                 nop     word ptr [rax+rax+00h]
.text:0000000000006C58
.text:0000000000006C58 loc_6C58:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000006C58                                         ; xstrtoumax+AE↑j ...
.text:0000000000006C58                 mov     ebp, 4
.text:0000000000006C5D
.text:0000000000006C5D loc_6C5D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:0000000000006C5D                                         ; xstrtoumax+217↓j ...
.text:0000000000006C5D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000006C62                 xor     rdi, fs:28h
.text:0000000000006C6B                 mov     eax, ebp
.text:0000000000006C6D                 jnz     loc_6F00
.text:0000000000006C73                 add     rsp, 28h
.text:0000000000006C77                 pop     rbx
.text:0000000000006C78                 pop     rbp
.text:0000000000006C79                 pop     r12
.text:0000000000006C7B                 pop     r13
.text:0000000000006C7D                 pop     r14
.text:0000000000006C7F                 pop     r15
.text:0000000000006C81                 retn
.text:0000000000006C81 ; ---------------------------------------------------------------------------
.text:0000000000006C82                 align 8
.text:0000000000006C88
.text:0000000000006C88 loc_6C88:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000006C88                 xor     ebp, ebp
.text:0000000000006C8A                 jmp     short loc_6C30
.text:0000000000006C8A ; ---------------------------------------------------------------------------
.text:0000000000006C8C                 align 10h
.text:0000000000006C90
.text:0000000000006C90 loc_6C90:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000006C90                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000006C95                 test    r12b, r12b
.text:0000000000006C98                 jz      short loc_6C58
.text:0000000000006C9A                 movsx   esi, r12b       ; c
.text:0000000000006C9E                 mov     rdi, r13        ; s
.text:0000000000006CA1                 xor     ebp, ebp
.text:0000000000006CA3                 call    _strchr
.text:0000000000006CA8                 test    rax, rax
.text:0000000000006CAB                 mov     ebx, 1
.text:0000000000006CB0                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000006CB5                 jz      short loc_6C58
.text:0000000000006CB7
.text:0000000000006CB7 loc_6CB7:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000006CB7                 movsx   esi, r12b       ; c
.text:0000000000006CBB                 mov     rdi, r13        ; s
.text:0000000000006CBE                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000006CC3                 call    _strchr
.text:0000000000006CC8                 test    rax, rax
.text:0000000000006CCB                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000006CD0                 jz      def_6D56        ; jumptable 0000000000006D56 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006CD6                 lea     eax, [r12-45h]
.text:0000000000006CDB                 cmp     al, 2Fh ; '/'
.text:0000000000006CDD                 ja      short loc_6D30
.text:0000000000006CDF                 mov     rdx, 814400308945h
.text:0000000000006CE9                 bt      rdx, rax
.text:0000000000006CED                 jnb     short loc_6D30
.text:0000000000006CEF                 mov     esi, 30h ; '0'  ; c
.text:0000000000006CF4                 mov     rdi, r13        ; s
.text:0000000000006CF7                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000006CFC                 call    _strchr
.text:0000000000006D01                 test    rax, rax
.text:0000000000006D04                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000006D09                 jz      short loc_6D30
.text:0000000000006D0B                 movzx   eax, byte ptr [rcx+1]
.text:0000000000006D0F                 cmp     al, 44h ; 'D'
.text:0000000000006D11                 jz      short loc_6D1F
.text:0000000000006D13                 cmp     al, 69h ; 'i'
.text:0000000000006D15                 jz      loc_6EE8
.text:0000000000006D1B                 cmp     al, 42h ; 'B'
.text:0000000000006D1D                 jnz     short loc_6D30
.text:0000000000006D1F
.text:0000000000006D1F loc_6D1F:                               ; CODE XREF: xstrtoumax+191↑j
.text:0000000000006D1F                 mov     edi, 2
.text:0000000000006D24                 mov     esi, 3E8h
.text:0000000000006D29                 jmp     short loc_6D3A
.text:0000000000006D29 ; ---------------------------------------------------------------------------
.text:0000000000006D2B                 align 10h
.text:0000000000006D30
.text:0000000000006D30 loc_6D30:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000006D30                                         ; xstrtoumax+16D↑j ...
.text:0000000000006D30                 mov     edi, 1
.text:0000000000006D35                 mov     esi, 400h
.text:0000000000006D3A
.text:0000000000006D3A loc_6D3A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:0000000000006D3A                                         ; xstrtoumax+37B↓j
.text:0000000000006D3A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:0000000000006D3E                 cmp     r12b, 35h
.text:0000000000006D42                 ja      short def_6D56  ; jumptable 0000000000006D56 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006D44                 lea     rdx, jpt_6D56
.text:0000000000006D4B                 movzx   r12d, r12b
.text:0000000000006D4F                 movsxd  rax, ds:(jpt_6D56 - 8928h)[rdx+r12*4]
.text:0000000000006D53                 add     rax, rdx
.text:0000000000006D56                 jmp     rax             ; switch jump
.text:0000000000006D58 ; ---------------------------------------------------------------------------
.text:0000000000006D58
.text:0000000000006D58 loc_6D58:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006D58                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006D58                 mov     rax, rbx        ; jumptable 0000000000006D56 cases 77,109
.text:0000000000006D5B                 mul     rsi
.text:0000000000006D5E                 jo      loc_6F51
.text:0000000000006D64                 xor     r8d, r8d
.text:0000000000006D67
.text:0000000000006D67 loc_6D67:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000006D67                                         ; xstrtoumax+35E↓j ...
.text:0000000000006D67                 mul     rsi
.text:0000000000006D6A                 jo      loc_6F42
.text:0000000000006D70                 mov     rbx, rax
.text:0000000000006D73
.text:0000000000006D73 loc_6D73:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000006D73                 or      ebp, r8d
.text:0000000000006D76                 db      2Eh
.text:0000000000006D76                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006D80
.text:0000000000006D80 loc_6D80:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006D80                                         ; xstrtoumax+23B↓j ...
.text:0000000000006D80                 movsxd  rdi, edi        ; jumptable 0000000000006D56 case 99
.text:0000000000006D83                 mov     eax, ebp
.text:0000000000006D85                 add     rcx, rdi
.text:0000000000006D88                 or      eax, 2
.text:0000000000006D8B                 mov     [r15], rcx
.text:0000000000006D8E                 cmp     byte ptr [rcx], 0
.text:0000000000006D91                 mov     [r14], rbx
.text:0000000000006D94                 cmovnz  ebp, eax
.text:0000000000006D97                 jmp     loc_6C5D
.text:0000000000006D9C ; ---------------------------------------------------------------------------
.text:0000000000006D9C
.text:0000000000006D9C def_6D56:                               ; CODE XREF: xstrtoumax+150↑j
.text:0000000000006D9C                                         ; xstrtoumax+1C2↑j ...
.text:0000000000006D9C                 mov     [r14], rbx      ; jumptable 0000000000006D56 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006D9F                 or      ebp, 2
.text:0000000000006DA2                 jmp     loc_6C5D
.text:0000000000006DA7 ; ---------------------------------------------------------------------------
.text:0000000000006DA7
.text:0000000000006DA7 loc_6DA7:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006DA7                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006DA7                 mov     edx, 2          ; jumptable 0000000000006D56 case 119
.text:0000000000006DAC                 mov     rax, rdx
.text:0000000000006DAF                 mul     rbx
.text:0000000000006DB2                 jo      loc_6E4E
.text:0000000000006DB8                 add     rbx, rbx
.text:0000000000006DBB                 jmp     short loc_6D80  ; jumptable 0000000000006D56 case 99
.text:0000000000006DBD ; ---------------------------------------------------------------------------
.text:0000000000006DBD
.text:0000000000006DBD loc_6DBD:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006DBD                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006DBD                 mov     edx, 200h       ; jumptable 0000000000006D56 case 98
.text:0000000000006DC2                 mov     rax, rdx
.text:0000000000006DC5                 mul     rbx
.text:0000000000006DC8                 jo      loc_6E4E
.text:0000000000006DCE                 shl     rbx, 9
.text:0000000000006DD2                 jmp     short loc_6D80  ; jumptable 0000000000006D56 case 99
.text:0000000000006DD4 ; ---------------------------------------------------------------------------
.text:0000000000006DD4
.text:0000000000006DD4 loc_6DD4:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006DD4                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006DD4                 mov     r8d, 7          ; jumptable 0000000000006D56 case 90
.text:0000000000006DDA                 xor     r9d, r9d
.text:0000000000006DDD                 nop     dword ptr [rax]
.text:0000000000006DE0
.text:0000000000006DE0 loc_6DE0:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000006DE0                 mov     rax, rbx
.text:0000000000006DE3                 mul     rsi
.text:0000000000006DE6                 mov     rbx, rax
.text:0000000000006DE9                 jo      loc_6F7E
.text:0000000000006DEF
.text:0000000000006DEF loc_6DEF:                               ; CODE XREF: xstrtoumax+408↓j
.text:0000000000006DEF                 sub     r8d, 1
.text:0000000000006DF3                 jnz     short loc_6DE0
.text:0000000000006DF5
.text:0000000000006DF5 loc_6DF5:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000006DF5                                         ; xstrtoumax+2BD↓j ...
.text:0000000000006DF5                 or      ebp, r9d
.text:0000000000006DF8                 jmp     short loc_6D80  ; jumptable 0000000000006D56 case 99
.text:0000000000006DFA ; ---------------------------------------------------------------------------
.text:0000000000006DFA
.text:0000000000006DFA loc_6DFA:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006DFA                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006DFA                 mov     r8d, 8          ; jumptable 0000000000006D56 case 89
.text:0000000000006E00                 xor     r9d, r9d
.text:0000000000006E03                 nop     dword ptr [rax+rax+00h]
.text:0000000000006E08
.text:0000000000006E08 loc_6E08:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000006E08                 mov     rax, rbx
.text:0000000000006E0B                 mul     rsi
.text:0000000000006E0E                 mov     rbx, rax
.text:0000000000006E11                 jo      loc_6F60
.text:0000000000006E17
.text:0000000000006E17 loc_6E17:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000006E17                 sub     r8d, 1
.text:0000000000006E1B                 jnz     short loc_6E08
.text:0000000000006E1D                 jmp     short loc_6DF5
.text:0000000000006E1F ; ---------------------------------------------------------------------------
.text:0000000000006E1F
.text:0000000000006E1F loc_6E1F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006E1F                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006E1F                 mov     r8d, 4          ; jumptable 0000000000006D56 cases 84,116
.text:0000000000006E25                 xor     r9d, r9d
.text:0000000000006E28
.text:0000000000006E28 loc_6E28:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000006E28                 mov     rax, rbx
.text:0000000000006E2B                 mul     rsi
.text:0000000000006E2E                 mov     rbx, rax
.text:0000000000006E31                 jo      loc_6F33
.text:0000000000006E37
.text:0000000000006E37 loc_6E37:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000006E37                 sub     r8d, 1
.text:0000000000006E3B                 jnz     short loc_6E28
.text:0000000000006E3D                 jmp     short loc_6DF5
.text:0000000000006E3F ; ---------------------------------------------------------------------------
.text:0000000000006E3F
.text:0000000000006E3F loc_6E3F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006E3F                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006E3F                 mov     rax, rbx        ; jumptable 0000000000006D56 cases 75,107
.text:0000000000006E42                 mul     rsi
.text:0000000000006E45                 mov     rbx, rax
.text:0000000000006E48                 jno     loc_6D80        ; jumptable 0000000000006D56 case 99
.text:0000000000006E4E
.text:0000000000006E4E loc_6E4E:                               ; CODE XREF: xstrtoumax+232↑j
.text:0000000000006E4E                                         ; xstrtoumax+248↑j ...
.text:0000000000006E4E                 mov     ebp, 1
.text:0000000000006E53                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006E57                 jmp     loc_6D80        ; jumptable 0000000000006D56 case 99
.text:0000000000006E57 ; ---------------------------------------------------------------------------
.text:0000000000006E5C                 align 20h
.text:0000000000006E60
.text:0000000000006E60 loc_6E60:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006E60                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006E60                 mov     r8d, 5          ; jumptable 0000000000006D56 case 80
.text:0000000000006E66                 xor     r9d, r9d
.text:0000000000006E69
.text:0000000000006E69 loc_6E69:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000006E69                 mov     rax, rbx
.text:0000000000006E6C                 mul     rsi
.text:0000000000006E6F                 mov     rbx, rax
.text:0000000000006E72                 jo      loc_6F6F
.text:0000000000006E78
.text:0000000000006E78 loc_6E78:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000006E78                 sub     r8d, 1
.text:0000000000006E7C                 jnz     short loc_6E69
.text:0000000000006E7E                 jmp     loc_6DF5
.text:0000000000006E83 ; ---------------------------------------------------------------------------
.text:0000000000006E83
.text:0000000000006E83 loc_6E83:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006E83                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006E83                 mov     r8d, 6          ; jumptable 0000000000006D56 case 69
.text:0000000000006E89                 xor     r9d, r9d
.text:0000000000006E8C
.text:0000000000006E8C loc_6E8C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:0000000000006E8C                 mov     rax, rbx
.text:0000000000006E8F                 mul     rsi
.text:0000000000006E92                 mov     rbx, rax
.text:0000000000006E95                 jo      loc_6F24
.text:0000000000006E9B
.text:0000000000006E9B loc_6E9B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:0000000000006E9B                 sub     r8d, 1
.text:0000000000006E9F                 jnz     short loc_6E8C
.text:0000000000006EA1                 jmp     loc_6DF5
.text:0000000000006EA6 ; ---------------------------------------------------------------------------
.text:0000000000006EA6
.text:0000000000006EA6 loc_6EA6:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006EA6                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006EA6                 mov     edx, 400h       ; jumptable 0000000000006D56 case 66
.text:0000000000006EAB                 mov     rax, rdx
.text:0000000000006EAE                 mul     rbx
.text:0000000000006EB1                 jo      short loc_6E4E
.text:0000000000006EB3                 shl     rbx, 0Ah
.text:0000000000006EB7                 jmp     loc_6D80        ; jumptable 0000000000006D56 case 99
.text:0000000000006EBC ; ---------------------------------------------------------------------------
.text:0000000000006EBC
.text:0000000000006EBC loc_6EBC:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006EBC                                         ; DATA XREF: .rodata:jpt_6D56↓o
.text:0000000000006EBC                 mov     rax, rbx        ; jumptable 0000000000006D56 cases 71,103
.text:0000000000006EBF                 mul     rsi
.text:0000000000006EC2                 jo      loc_6F8D
.text:0000000000006EC8                 xor     r8d, r8d
.text:0000000000006ECB
.text:0000000000006ECB loc_6ECB:                               ; CODE XREF: xstrtoumax+417↓j
.text:0000000000006ECB                 mul     rsi
.text:0000000000006ECE                 jno     loc_6D67
.text:0000000000006ED4                 mov     r8d, 1
.text:0000000000006EDA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006EDE                 jmp     loc_6D67
.text:0000000000006EDE ; ---------------------------------------------------------------------------
.text:0000000000006EE3                 align 8
.text:0000000000006EE8
.text:0000000000006EE8 loc_6EE8:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000006EE8                 xor     edi, edi
.text:0000000000006EEA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000006EEE                 mov     esi, 400h
.text:0000000000006EF3                 setz    dil
.text:0000000000006EF7                 lea     edi, [rdi+rdi+1]
.text:0000000000006EFB                 jmp     loc_6D3A
.text:0000000000006F00 ; ---------------------------------------------------------------------------
.text:0000000000006F00
.text:0000000000006F00 loc_6F00:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000006F00                 call    ___stack_chk_fail
.text:0000000000006F05 ; ---------------------------------------------------------------------------
.text:0000000000006F05
.text:0000000000006F05 loc_6F05:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000006F05                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:0000000000006F0C                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000006F13                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000006F1A                 mov     edx, 54h ; 'T'  ; line
.text:0000000000006F1F                 call    ___assert_fail
.text:0000000000006F24 ; ---------------------------------------------------------------------------
.text:0000000000006F24
.text:0000000000006F24 loc_6F24:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000006F24                 mov     r9d, 1
.text:0000000000006F2A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F2E                 jmp     loc_6E9B
.text:0000000000006F33 ; ---------------------------------------------------------------------------
.text:0000000000006F33
.text:0000000000006F33 loc_6F33:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000006F33                 mov     r9d, 1
.text:0000000000006F39                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F3D                 jmp     loc_6E37
.text:0000000000006F42 ; ---------------------------------------------------------------------------
.text:0000000000006F42
.text:0000000000006F42 loc_6F42:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000006F42                 mov     r8d, 1
.text:0000000000006F48                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F4C                 jmp     loc_6D73
.text:0000000000006F51 ; ---------------------------------------------------------------------------
.text:0000000000006F51
.text:0000000000006F51 loc_6F51:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000006F51                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F55                 mov     r8d, 1
.text:0000000000006F5B                 jmp     loc_6D67
.text:0000000000006F60 ; ---------------------------------------------------------------------------
.text:0000000000006F60
.text:0000000000006F60 loc_6F60:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000006F60                 mov     r9d, 1
.text:0000000000006F66                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F6A                 jmp     loc_6E17
.text:0000000000006F6F ; ---------------------------------------------------------------------------
.text:0000000000006F6F
.text:0000000000006F6F loc_6F6F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:0000000000006F6F                 mov     r9d, 1
.text:0000000000006F75                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F79                 jmp     loc_6E78
.text:0000000000006F7E ; ---------------------------------------------------------------------------
.text:0000000000006F7E
.text:0000000000006F7E loc_6F7E:                               ; CODE XREF: xstrtoumax+269↑j
.text:0000000000006F7E                 mov     r9d, 1
.text:0000000000006F84                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F88                 jmp     loc_6DEF
.text:0000000000006F8D ; ---------------------------------------------------------------------------
.text:0000000000006F8D
.text:0000000000006F8D loc_6F8D:                               ; CODE XREF: xstrtoumax+342↑j
.text:0000000000006F8D                 mov     r8d, 1
.text:0000000000006F93                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F97                 jmp     loc_6ECB
.text:0000000000006F97 ; } // starts at 6B80
.text:0000000000006F97 xstrtoumax      endp
.text:0000000000006F97
.text:0000000000006F97 ; ---------------------------------------------------------------------------
.text:0000000000006F9C                 align 20h
.text:0000000000006FA0
.text:0000000000006FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FA0
.text:0000000000006FA0 ; Attributes: info_from_lumina
.text:0000000000006FA0
.text:0000000000006FA0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006FA0                 public rpl_fclose
.text:0000000000006FA0 rpl_fclose      proc near               ; CODE XREF: main+67D↑p
.text:0000000000006FA0                                         ; close_stream+15↓p
.text:0000000000006FA0 ; __unwind {
.text:0000000000006FA0                 push    r12
.text:0000000000006FA2                 push    rbp
.text:0000000000006FA3                 push    rbx
.text:0000000000006FA4                 mov     rbx, rdi
.text:0000000000006FA7                 call    _fileno
.text:0000000000006FAC                 test    eax, eax
.text:0000000000006FAE                 mov     rdi, rbx        ; fp
.text:0000000000006FB1                 js      short loc_7007
.text:0000000000006FB3                 call    ___freading
.text:0000000000006FB8                 test    eax, eax
.text:0000000000006FBA                 jnz     short loc_6FE8
.text:0000000000006FBC
.text:0000000000006FBC loc_6FBC:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000006FBC                 mov     rdi, rbx        ; stream
.text:0000000000006FBF                 call    rpl_fflush
.text:0000000000006FC4                 test    eax, eax
.text:0000000000006FC6                 jz      short loc_7004
.text:0000000000006FC8                 call    ___errno_location
.text:0000000000006FCD                 mov     r12d, [rax]
.text:0000000000006FD0                 mov     rdi, rbx        ; stream
.text:0000000000006FD3                 mov     rbp, rax
.text:0000000000006FD6                 call    _fclose
.text:0000000000006FDB                 test    r12d, r12d
.text:0000000000006FDE                 jnz     short loc_7010
.text:0000000000006FE0
.text:0000000000006FE0 loc_6FE0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006FE0                 pop     rbx
.text:0000000000006FE1                 pop     rbp
.text:0000000000006FE2                 pop     r12
.text:0000000000006FE4                 retn
.text:0000000000006FE4 ; ---------------------------------------------------------------------------
.text:0000000000006FE5                 align 8
.text:0000000000006FE8
.text:0000000000006FE8 loc_6FE8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006FE8                 mov     rdi, rbx        ; stream
.text:0000000000006FEB                 call    _fileno
.text:0000000000006FF0                 xor     esi, esi        ; offset
.text:0000000000006FF2                 mov     edx, 1          ; whence
.text:0000000000006FF7                 mov     edi, eax        ; fd
.text:0000000000006FF9                 call    _lseek
.text:0000000000006FFE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007002                 jnz     short loc_6FBC
.text:0000000000007004
.text:0000000000007004 loc_7004:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000007004                 mov     rdi, rbx        ; stream
.text:0000000000007007
.text:0000000000007007 loc_7007:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000007007                 pop     rbx
.text:0000000000007008                 pop     rbp
.text:0000000000007009                 pop     r12
.text:000000000000700B                 jmp     _fclose
.text:0000000000007010 ; ---------------------------------------------------------------------------
.text:0000000000007010
.text:0000000000007010 loc_7010:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000007010                 mov     [rbp+0], r12d
.text:0000000000007014                 mov     eax, 0FFFFFFFFh
.text:0000000000007019                 jmp     short loc_6FE0
.text:0000000000007019 ; } // starts at 6FA0
.text:0000000000007019 rpl_fclose      endp
.text:0000000000007019
.text:0000000000007019 ; ---------------------------------------------------------------------------
.text:000000000000701B                 align 20h
.text:0000000000007020
.text:0000000000007020 ; =============== S U B R O U T I N E =======================================
.text:0000000000007020
.text:0000000000007020 ; Attributes: info_from_lumina
.text:0000000000007020
.text:0000000000007020 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000007020                 public rpl_fflush
.text:0000000000007020 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000007020 ; __unwind {
.text:0000000000007020                 test    rdi, rdi
.text:0000000000007023                 push    rbx
.text:0000000000007024                 mov     rbx, rdi
.text:0000000000007027                 jz      short loc_703A
.text:0000000000007029                 call    ___freading
.text:000000000000702E                 test    eax, eax
.text:0000000000007030                 jz      short loc_703A
.text:0000000000007032                 test    dword ptr [rbx], 100h
.text:0000000000007038                 jnz     short loc_7048
.text:000000000000703A
.text:000000000000703A loc_703A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000703A                                         ; rpl_fflush+10↑j
.text:000000000000703A                 mov     rdi, rbx        ; stream
.text:000000000000703D                 pop     rbx
.text:000000000000703E                 jmp     _fflush
.text:000000000000703E ; ---------------------------------------------------------------------------
.text:0000000000007043                 align 8
.text:0000000000007048
.text:0000000000007048 loc_7048:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000007048                 mov     rdi, rbx
.text:000000000000704B                 mov     edx, 1
.text:0000000000007050                 xor     esi, esi
.text:0000000000007052                 call    rpl_fseeko
.text:0000000000007057                 mov     rdi, rbx        ; stream
.text:000000000000705A                 pop     rbx
.text:000000000000705B                 jmp     _fflush
.text:000000000000705B ; } // starts at 7020
.text:000000000000705B rpl_fflush      endp
.text:000000000000705B
.text:0000000000007060
.text:0000000000007060 ; =============== S U B R O U T I N E =======================================
.text:0000000000007060
.text:0000000000007060 ; Attributes: info_from_lumina
.text:0000000000007060
.text:0000000000007060 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000007060                 public rpl_fseeko
.text:0000000000007060 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000007060 ; __unwind {
.text:0000000000007060                 mov     rax, [rdi+8]
.text:0000000000007064                 cmp     [rdi+10h], rax
.text:0000000000007068                 jz      short loc_7070
.text:000000000000706A
.text:000000000000706A loc_706A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000706A                                         ; rpl_fseeko+1F↓j
.text:000000000000706A                 jmp     _fseeko
.text:000000000000706A ; ---------------------------------------------------------------------------
.text:000000000000706F                 align 10h
.text:0000000000007070
.text:0000000000007070 loc_7070:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000007070                 mov     rax, [rdi+20h]
.text:0000000000007074                 cmp     [rdi+28h], rax
.text:0000000000007078                 jnz     short loc_706A
.text:000000000000707A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000707F                 jnz     short loc_706A
.text:0000000000007081                 push    r12
.text:0000000000007083                 push    rbp
.text:0000000000007084                 mov     r12d, edx
.text:0000000000007087                 push    rbx
.text:0000000000007088                 mov     rbp, rsi
.text:000000000000708B                 mov     rbx, rdi
.text:000000000000708E                 call    _fileno
.text:0000000000007093                 mov     edx, r12d       ; whence
.text:0000000000007096                 mov     rsi, rbp        ; offset
.text:0000000000007099                 mov     edi, eax        ; fd
.text:000000000000709B                 call    _lseek
.text:00000000000070A0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000070A4                 jz      short loc_70B2
.text:00000000000070A6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000070A9                 mov     [rbx+90h], rax
.text:00000000000070B0                 xor     eax, eax
.text:00000000000070B2
.text:00000000000070B2 loc_70B2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000070B2                 pop     rbx
.text:00000000000070B3                 pop     rbp
.text:00000000000070B4                 pop     r12
.text:00000000000070B6                 retn
.text:00000000000070B6 ; } // starts at 7060
.text:00000000000070B6 rpl_fseeko      endp
.text:00000000000070B6
.text:00000000000070B6 ; ---------------------------------------------------------------------------
.text:00000000000070B7                 align 20h
.text:00000000000070C0
.text:00000000000070C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070C0
.text:00000000000070C0 ; Attributes: info_from_lumina
.text:00000000000070C0
.text:00000000000070C0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000070C0                 public rpl_mbrtowc
.text:00000000000070C0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000070C0
.text:00000000000070C0 pwc             = dword ptr -34h
.text:00000000000070C0 var_30          = qword ptr -30h
.text:00000000000070C0
.text:00000000000070C0 ; __unwind {
.text:00000000000070C0                 push    r13
.text:00000000000070C2                 push    r12
.text:00000000000070C4                 mov     r13, rsi
.text:00000000000070C7                 push    rbp
.text:00000000000070C8                 push    rbx
.text:00000000000070C9                 mov     rbx, rdi
.text:00000000000070CC                 mov     r12, rdx
.text:00000000000070CF                 sub     rsp, 18h
.text:00000000000070D3                 mov     rax, fs:28h
.text:00000000000070DC                 mov     [rsp+38h+var_30], rax
.text:00000000000070E1                 xor     eax, eax
.text:00000000000070E3                 lea     rax, [rsp+38h+pwc]
.text:00000000000070E8                 test    rdi, rdi
.text:00000000000070EB                 cmovz   rbx, rax
.text:00000000000070EF                 mov     rdi, rbx        ; pwc
.text:00000000000070F2                 call    _mbrtowc
.text:00000000000070F7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000070FB                 mov     rbp, rax
.text:00000000000070FE                 jbe     short loc_7120
.text:0000000000007100                 test    r12, r12
.text:0000000000007103                 jz      short loc_7120
.text:0000000000007105                 xor     edi, edi
.text:0000000000007107                 call    hard_locale
.text:000000000000710C                 test    al, al
.text:000000000000710E                 jnz     short loc_7120
.text:0000000000007110                 movzx   eax, byte ptr [r13+0]
.text:0000000000007115                 mov     ebp, 1
.text:000000000000711A                 mov     [rbx], eax
.text:000000000000711C                 nop     dword ptr [rax+00h]
.text:0000000000007120
.text:0000000000007120 loc_7120:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000007120                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000007120                 mov     rdx, [rsp+38h+var_30]
.text:0000000000007125                 xor     rdx, fs:28h
.text:000000000000712E                 mov     rax, rbp
.text:0000000000007131                 jnz     short loc_713E
.text:0000000000007133                 add     rsp, 18h
.text:0000000000007137                 pop     rbx
.text:0000000000007138                 pop     rbp
.text:0000000000007139                 pop     r12
.text:000000000000713B                 pop     r13
.text:000000000000713D                 retn
.text:000000000000713E ; ---------------------------------------------------------------------------
.text:000000000000713E
.text:000000000000713E loc_713E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000713E                 call    ___stack_chk_fail
.text:000000000000713E ; } // starts at 70C0
.text:000000000000713E rpl_mbrtowc     endp
.text:000000000000713E
.text:000000000000713E ; ---------------------------------------------------------------------------
.text:0000000000007143                 align 10h
.text:0000000000007150
.text:0000000000007150 ; =============== S U B R O U T I N E =======================================
.text:0000000000007150
.text:0000000000007150 ; Attributes: info_from_lumina
.text:0000000000007150
.text:0000000000007150 ; int __fastcall close_stream(FILE *stream)
.text:0000000000007150                 public close_stream
.text:0000000000007150 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000007150                                         ; close_stdout+33↑p
.text:0000000000007150 ; __unwind {
.text:0000000000007150                 push    r12
.text:0000000000007152                 push    rbp
.text:0000000000007153                 mov     rbp, rdi
.text:0000000000007156                 push    rbx
.text:0000000000007157                 call    ___fpending
.text:000000000000715C                 mov     ebx, [rbp+0]
.text:000000000000715F                 mov     rdi, rbp        ; stream
.text:0000000000007162                 mov     r12, rax
.text:0000000000007165                 call    rpl_fclose
.text:000000000000716A                 and     ebx, 20h
.text:000000000000716D                 test    ebx, ebx
.text:000000000000716F                 jnz     short loc_7188
.text:0000000000007171                 test    eax, eax
.text:0000000000007173                 jz      short loc_717F
.text:0000000000007175                 test    r12, r12
.text:0000000000007178                 mov     eax, 0FFFFFFFFh
.text:000000000000717D                 jz      short loc_71B8
.text:000000000000717F
.text:000000000000717F loc_717F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000717F                 pop     rbx
.text:0000000000007180                 pop     rbp
.text:0000000000007181                 pop     r12
.text:0000000000007183                 retn
.text:0000000000007183 ; ---------------------------------------------------------------------------
.text:0000000000007184                 align 8
.text:0000000000007188
.text:0000000000007188 loc_7188:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000007188                 test    eax, eax
.text:000000000000718A                 jnz     short loc_71A8
.text:000000000000718C                 call    ___errno_location
.text:0000000000007191                 mov     dword ptr [rax], 0
.text:0000000000007197                 mov     eax, 0FFFFFFFFh
.text:000000000000719C                 pop     rbx
.text:000000000000719D                 pop     rbp
.text:000000000000719E                 pop     r12
.text:00000000000071A0                 retn
.text:00000000000071A0 ; ---------------------------------------------------------------------------
.text:00000000000071A1                 align 8
.text:00000000000071A8
.text:00000000000071A8 loc_71A8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000071A8                 pop     rbx
.text:00000000000071A9                 mov     eax, 0FFFFFFFFh
.text:00000000000071AE                 pop     rbp
.text:00000000000071AF                 pop     r12
.text:00000000000071B1                 retn
.text:00000000000071B1 ; ---------------------------------------------------------------------------
.text:00000000000071B2                 align 8
.text:00000000000071B8
.text:00000000000071B8 loc_71B8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000071B8                 call    ___errno_location
.text:00000000000071BD                 cmp     dword ptr [rax], 9
.text:00000000000071C0                 pop     rbx
.text:00000000000071C1                 pop     rbp
.text:00000000000071C2                 pop     r12
.text:00000000000071C4                 setnz   al
.text:00000000000071C7                 movzx   eax, al
.text:00000000000071CA                 neg     eax
.text:00000000000071CC                 retn
.text:00000000000071CC ; } // starts at 7150
.text:00000000000071CC close_stream    endp
.text:00000000000071CC
.text:00000000000071CC ; ---------------------------------------------------------------------------
.text:00000000000071CD                 align 10h
.text:00000000000071D0
.text:00000000000071D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071D0
.text:00000000000071D0
.text:00000000000071D0                 public hard_locale
.text:00000000000071D0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000071D0 ; __unwind {
.text:00000000000071D0                 sub     rsp, 8
.text:00000000000071D4                 xor     esi, esi        ; locale
.text:00000000000071D6                 call    _setlocale
.text:00000000000071DB                 mov     rdx, rax
.text:00000000000071DE                 mov     eax, 1
.text:00000000000071E3                 test    rdx, rdx
.text:00000000000071E6                 jz      short loc_7205
.text:00000000000071E8                 lea     rdi, aC         ; "C"
.text:00000000000071EF                 mov     ecx, 2
.text:00000000000071F4                 mov     rsi, rdx
.text:00000000000071F7                 repe cmpsb
.text:00000000000071F9                 setnbe  cl
.text:00000000000071FC                 sbb     cl, 0
.text:00000000000071FF                 xor     eax, eax
.text:0000000000007201                 test    cl, cl
.text:0000000000007203                 jnz     short loc_7210
.text:0000000000007205
.text:0000000000007205 loc_7205:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000007205                 add     rsp, 8
.text:0000000000007209                 retn
.text:0000000000007209 ; ---------------------------------------------------------------------------
.text:000000000000720A                 align 10h
.text:0000000000007210
.text:0000000000007210 loc_7210:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000007210                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000007217                 mov     ecx, 6
.text:000000000000721C                 mov     rsi, rdx
.text:000000000000721F                 repe cmpsb
.text:0000000000007221                 setnbe  al
.text:0000000000007224                 sbb     al, 0
.text:0000000000007226                 test    al, al
.text:0000000000007228                 setnz   al
.text:000000000000722B                 add     rsp, 8
.text:000000000000722F                 retn
.text:000000000000722F ; } // starts at 71D0
.text:000000000000722F hard_locale     endp
.text:000000000000722F
.text:0000000000007230
.text:0000000000007230 ; =============== S U B R O U T I N E =======================================
.text:0000000000007230
.text:0000000000007230
.text:0000000000007230                 public locale_charset
.text:0000000000007230 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000007230 ; __unwind {
.text:0000000000007230                 sub     rsp, 8
.text:0000000000007234                 mov     edi, 0Eh        ; item
.text:0000000000007239                 call    _nl_langinfo
.text:000000000000723E                 test    rax, rax
.text:0000000000007241                 jz      short loc_7260
.text:0000000000007243                 cmp     byte ptr [rax], 0
.text:0000000000007246                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000724D                 cmovz   rax, rdx
.text:0000000000007251                 add     rsp, 8
.text:0000000000007255                 retn
.text:0000000000007255 ; ---------------------------------------------------------------------------
.text:0000000000007256                 align 20h
.text:0000000000007260
.text:0000000000007260 loc_7260:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000007260                 lea     rax, aAscii     ; "ASCII"
.text:0000000000007267                 add     rsp, 8
.text:000000000000726B                 retn
.text:000000000000726B ; } // starts at 7230
.text:000000000000726B locale_charset  endp
.text:000000000000726B
.text:000000000000726B ; ---------------------------------------------------------------------------
.text:000000000000726C                 align 10h
.text:0000000000007270
.text:0000000000007270 ; =============== S U B R O U T I N E =======================================
.text:0000000000007270
.text:0000000000007270 ; Attributes: info_from_lumina
.text:0000000000007270
.text:0000000000007270 ; void _libc_csu_init(void)
.text:0000000000007270                 public __libc_csu_init
.text:0000000000007270 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000007270 ; __unwind {
.text:0000000000007270                 push    r15
.text:0000000000007272                 push    r14
.text:0000000000007274                 mov     r15, rdx
.text:0000000000007277                 push    r13
.text:0000000000007279                 push    r12
.text:000000000000727B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000007282                 push    rbp
.text:0000000000007283                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000728A                 push    rbx
.text:000000000000728B                 mov     r13d, edi
.text:000000000000728E                 mov     r14, rsi
.text:0000000000007291                 sub     rbp, r12
.text:0000000000007294                 sub     rsp, 8
.text:0000000000007298                 sar     rbp, 3
.text:000000000000729C                 call    _init_proc
.text:00000000000072A1                 test    rbp, rbp
.text:00000000000072A4                 jz      short loc_72C6
.text:00000000000072A6                 xor     ebx, ebx
.text:00000000000072A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000072B0
.text:00000000000072B0 loc_72B0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000072B0                 mov     rdx, r15
.text:00000000000072B3                 mov     rsi, r14
.text:00000000000072B6                 mov     edi, r13d
.text:00000000000072B9                 call    ds:(__frame_dummy_init_array_entry - 20AA10h)[r12+rbx*8]
.text:00000000000072BD                 add     rbx, 1
.text:00000000000072C1                 cmp     rbp, rbx
.text:00000000000072C4                 jnz     short loc_72B0
.text:00000000000072C6
.text:00000000000072C6 loc_72C6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000072C6                 add     rsp, 8
.text:00000000000072CA                 pop     rbx
.text:00000000000072CB                 pop     rbp
.text:00000000000072CC                 pop     r12
.text:00000000000072CE                 pop     r13
.text:00000000000072D0                 pop     r14
.text:00000000000072D2                 pop     r15
.text:00000000000072D4                 retn
.text:00000000000072D4 ; } // starts at 7270
.text:00000000000072D4 __libc_csu_init endp
.text:00000000000072D4
.text:00000000000072D4 ; ---------------------------------------------------------------------------
.text:00000000000072D5                 align 20h
.text:00000000000072E0
.text:00000000000072E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072E0
.text:00000000000072E0
.text:00000000000072E0 ; void _libc_csu_fini(void)
.text:00000000000072E0                 public __libc_csu_fini
.text:00000000000072E0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000072E0 ; __unwind {
.text:00000000000072E0                 rep retn
.text:00000000000072E0 ; } // starts at 72E0
.text:00000000000072E0 __libc_csu_fini endp
.text:00000000000072E0
.text:00000000000072E0 ; ---------------------------------------------------------------------------
.text:00000000000072E2                 align 10h
.text:00000000000072F0
.text:00000000000072F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072F0
.text:00000000000072F0
.text:00000000000072F0 atexit          proc near               ; CODE XREF: main+71↑p
.text:00000000000072F0 ; __unwind {
.text:00000000000072F0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000072F7                 xor     esi, esi        ; obj
.text:00000000000072F9                 jmp     ___cxa_atexit
.text:00000000000072F9 ; } // starts at 72F0
.text:00000000000072F9 atexit          endp
.text:00000000000072F9
.text:00000000000072F9 _text           ends
.text:00000000000072F9
LOAD:00000000000072FE ; ===========================================================================
LOAD:00000000000072FE
LOAD:00000000000072FE ; Segment type: Pure code
LOAD:00000000000072FE ; Segment permissions: Read/Execute
LOAD:00000000000072FE LOAD            segment byte public 'CODE' use64
LOAD:00000000000072FE                 assume cs:LOAD
LOAD:00000000000072FE                 ;org 72FEh
LOAD:00000000000072FE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000072FE                 align 20h
LOAD:00000000000072FE LOAD            ends
LOAD:00000000000072FE
.fini:0000000000007300 ; ===========================================================================
.fini:0000000000007300
.fini:0000000000007300 ; Segment type: Pure code
.fini:0000000000007300 ; Segment permissions: Read/Execute
.fini:0000000000007300 _fini           segment dword public 'CODE' use64
.fini:0000000000007300                 assume cs:_fini
.fini:0000000000007300                 ;org 7300h
.fini:0000000000007300                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000007300
.fini:0000000000007300 ; =============== S U B R O U T I N E =======================================
.fini:0000000000007300
.fini:0000000000007300
.fini:0000000000007300                 public _term_proc
.fini:0000000000007300 _term_proc      proc near
.fini:0000000000007300                 sub     rsp, 8          ; _fini
.fini:0000000000007304                 add     rsp, 8
.fini:0000000000007308                 retn
.fini:0000000000007308 _term_proc      endp
.fini:0000000000007308
.fini:0000000000007308 _fini           ends
.fini:0000000000007308
LOAD:0000000000007309 ; ===========================================================================
LOAD:0000000000007309
LOAD:0000000000007309 ; Segment type: Pure code
LOAD:0000000000007309 ; Segment permissions: Read/Execute
LOAD:0000000000007309 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007309                 assume cs:LOAD
LOAD:0000000000007309                 ;org 7309h
LOAD:0000000000007309                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007309                 align 20h
LOAD:0000000000007309 LOAD            ends
LOAD:0000000000007309
.rodata:0000000000007320 ; ===========================================================================
.rodata:0000000000007320
.rodata:0000000000007320 ; Segment type: Pure data
.rodata:0000000000007320 ; Segment permissions: Read
.rodata:0000000000007320 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000007320                 assume cs:_rodata
.rodata:0000000000007320                 ;org 7320h
.rodata:0000000000007320                 public _IO_stdin_used
.rodata:0000000000007320 _IO_stdin_used  db    1
.rodata:0000000000007321                 db    0
.rodata:0000000000007322                 db    2
.rodata:0000000000007323                 db    0
.rodata:0000000000007324 ; const char s[]
.rodata:0000000000007324 s               db '.-:+=^!/*?&<>()[]{}@%$#',0
.rodata:0000000000007324                                         ; DATA XREF: isz85+17↑o
.rodata:0000000000007324                                         ; .rodata:format↓o
.rodata:000000000000733C ; const char assertion[]
.rodata:000000000000733C assertion       db '*p >= 0x32 && *p <= 0x5a',0
.rodata:000000000000733C                                         ; DATA XREF: base32hex_encode+65↑o
.rodata:0000000000007355 aBasenc         db 'basenc',0           ; DATA XREF: main+F9↑o
.rodata:0000000000007355                                         ; usage+2A3↑o ...
.rodata:000000000000735C ; const char aUsageSOptionFi[]
.rodata:000000000000735C aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]',0Ah,0
.rodata:000000000000735C                                         ; DATA XREF: usage:loc_2FBD↑o
.rodata:000000000000737A asc_737A        db '[',0                ; DATA XREF: usage+2AF↑o
.rodata:000000000000737C aTestInvocation db 'test invocation',0  ; DATA XREF: usage+2D6↑o
.rodata:000000000000738C aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000738C                                         ; DATA XREF: usage+306↑o
.rodata:000000000000738C                                         ; usage+3FC↑o ...
.rodata:00000000000073A2 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+317↑o
.rodata:00000000000073AC aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+323↑o
.rodata:00000000000073BB aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+2B6↑o
.rodata:00000000000073C5 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+2E2↑o
.rodata:00000000000073CF aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+2FA↑o
.rodata:00000000000073D9 ; const char aSOnlineHelpS[]
.rodata:00000000000073D9 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+36A↑o
.rodata:00000000000073D9                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000073F0 unk_73F0        db  47h ; G             ; DATA XREF: main+F2↑o
.rodata:00000000000073F0                                         ; usage+386↑o ...
.rodata:00000000000073F1                 db  4Eh ; N
.rodata:00000000000073F2                 db  55h ; U
.rodata:00000000000073F3                 db  20h
.rodata:00000000000073F4 ; const char domainname[]
.rodata:00000000000073F4 domainname      db 'coreutils',0        ; DATA XREF: main+52↑o
.rodata:00000000000073F4                                         ; main+5E↑o ...
.rodata:00000000000073FE ; const char s2[]
.rodata:00000000000073FE s2              db 'en_',0              ; DATA XREF: usage+3AD↑o
.rodata:00000000000073FE                                         ; usage+46E↑o
.rodata:0000000000007402 ; const char aFullDocumentat[]
.rodata:0000000000007402 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000007402                                         ; DATA XREF: usage:loc_3329↑o
.rodata:0000000000007402                                         ; usage:loc_33E6↑o
.rodata:000000000000741D ; const char dirname[]
.rodata:000000000000741D dirname         db '/usr/local/share/locale',0
.rodata:000000000000741D                                         ; DATA XREF: main+4B↑o
.rodata:0000000000007435 ; const char msgid[]
.rodata:0000000000007435 msgid           db 'invalid wrap size',0
.rodata:0000000000007435                                         ; DATA XREF: main:loc_1A10↑o
.rodata:0000000000007447 aAssafGordon    db 'Assaf Gordon',0     ; DATA XREF: main+E4↑o
.rodata:0000000000007454 aSimonJosefsson db 'Simon Josefsson',0  ; DATA XREF: main+EB↑o
.rodata:0000000000007464 ; const char shortopts[]
.rodata:0000000000007464 shortopts       db 'diw:',0             ; DATA XREF: main+82↑o
.rodata:0000000000007469 ; const char aMissingEncodin[]
.rodata:0000000000007469 aMissingEncodin db 'missing encoding type',0
.rodata:0000000000007469                                         ; DATA XREF: main:def_1A69↑o
.rodata:000000000000747F ; const char aExtraOperandS[]
.rodata:000000000000747F aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+AB1↑o
.rodata:0000000000007490 ; const char modes[]
.rodata:0000000000007490 modes           db 'rb',0               ; DATA XREF: main+232↑o
.rodata:0000000000007493 ; const char aReadError[]
.rodata:0000000000007493 aReadError      db 'read error',0       ; DATA XREF: main+81B↑o
.rodata:0000000000007493                                         ; main:loc_22B1↑o
.rodata:000000000000749E ; const char aWriteError[]
.rodata:000000000000749E aWriteError     db 'write error',0      ; DATA XREF: main+8A3↑o
.rodata:000000000000749E                                         ; main+8E5↑o ...
.rodata:00000000000074AA ; const char aInvalidInput[]
.rodata:00000000000074AA aInvalidInput   db 'invalid input',0    ; DATA XREF: main:loc_2261↑o
.rodata:00000000000074B8 ; const char aClosingStandar[]
.rodata:00000000000074B8 aClosingStandar db 'closing standard input',0
.rodata:00000000000074B8                                         ; DATA XREF: main+930↑o
.rodata:00000000000074CF aDecode         db 'decode',0           ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:00000000000074D6 aWrap           db 'wrap',0             ; DATA XREF: .data.rel.ro:000000000020AA40↓o
.rodata:00000000000074DB aIgnoreGarbage  db 'ignore-garbage',0   ; DATA XREF: .data.rel.ro:000000000020AA60↓o
.rodata:00000000000074EA aBase64         db 'base64',0           ; DATA XREF: .data.rel.ro:000000000020AA80↓o
.rodata:00000000000074F1 aBase64url      db 'base64url',0        ; DATA XREF: .data.rel.ro:000000000020AAA0↓o
.rodata:00000000000074FB aBase32         db 'base32',0           ; DATA XREF: .data.rel.ro:000000000020AAC0↓o
.rodata:0000000000007502 aBase32hex      db 'base32hex',0        ; DATA XREF: .data.rel.ro:000000000020AAE0↓o
.rodata:000000000000750C aBase16         db 'base16',0           ; DATA XREF: .data.rel.ro:000000000020AB00↓o
.rodata:0000000000007513 aBase2msbf      db 'base2msbf',0        ; DATA XREF: .data.rel.ro:000000000020AB20↓o
.rodata:000000000000751D aBase2lsbf      db 'base2lsbf',0        ; DATA XREF: .data.rel.ro:000000000020AB40↓o
.rodata:0000000000007527 aZ85            db 'z85',0              ; DATA XREF: .data.rel.ro:000000000020AB60↓o
.rodata:000000000000752B aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020AB80↓o
.rodata:0000000000007530 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020ABA0↓o
.rodata:0000000000007538 ; const char aInvalidInputLe[]
.rodata:0000000000007538 aInvalidInputLe db 'invalid input (length must be multiple of 4 characters)',0
.rodata:0000000000007538                                         ; DATA XREF: z85_encode:loc_2CDF↑o
.rodata:0000000000007570 ; const char file[]
.rodata:0000000000007570 file            db '../coreutils-8.31/src/basenc.c',0
.rodata:0000000000007570                                         ; DATA XREF: base32hex_encode+5E↑o
.rodata:000000000000758F                 align 10h
.rodata:0000000000007590 ; const char aTrySHelpForMor[]
.rodata:0000000000007590 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000007590                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000075B7                 align 8
.rodata:00000000000075B8 ; const char aBasencEncodeOr[]
.rodata:00000000000075B8 aBasencEncodeOr db 'basenc encode or decode FILE, or standard input, to standard outp'
.rodata:00000000000075B8                                         ; DATA XREF: usage+84↑o
.rodata:00000000000075B8                 db 'ut.',0Ah,0
.rodata:00000000000075FE                 align 20h
.rodata:0000000000007600 ; const char aWithNoFileOrWh[]
.rodata:0000000000007600 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000007600                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000007638 ; const char aMandatoryArgum[]
.rodata:0000000000007638 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:0000000000007638                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000007638                 db 'ns too.',0Ah,0
.rodata:0000000000007683                 align 8
.rodata:0000000000007688 ; const char aBase64SameAsBa[]
.rodata:0000000000007688 aBase64SameAsBa db '      --base64          same as ',27h,'base64',27h,' program (RFC'
.rodata:0000000000007688                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000007688                 db '4648 section 4)',0Ah,0
.rodata:00000000000076CE                 align 10h
.rodata:00000000000076D0 ; const char aBase64urlFileA[]
.rodata:00000000000076D0 aBase64urlFileA db '      --base64url       file- and url-safe base64 (RFC4648 sectio'
.rodata:00000000000076D0                                         ; DATA XREF: usage+118↑o
.rodata:00000000000076D0                 db 'n 5)',0Ah,0
.rodata:0000000000007717                 align 8
.rodata:0000000000007718 ; const char aBase32SameAsBa[]
.rodata:0000000000007718 aBase32SameAsBa db '      --base32          same as ',27h,'base32',27h,' program (RFC'
.rodata:0000000000007718                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000007718                 db '4648 section 6)',0Ah,0
.rodata:000000000000775E                 align 20h
.rodata:0000000000007760 ; const char aBase32hexExten[]
.rodata:0000000000007760 aBase32hexExten db '      --base32hex       extended hex alphabet base32 (RFC4648 sec'
.rodata:0000000000007760                                         ; DATA XREF: usage+162↑o
.rodata:0000000000007760                 db 'tion 7)',0Ah,0
.rodata:00000000000077AA                 align 10h
.rodata:00000000000077B0 ; const char aBase16HexEncod[]
.rodata:00000000000077B0 aBase16HexEncod db '      --base16          hex encoding (RFC4648 section 8)',0Ah,0
.rodata:00000000000077B0                                         ; DATA XREF: usage+187↑o
.rodata:00000000000077EA                 align 10h
.rodata:00000000000077F0 ; const char aBase2msbfBitSt[]
.rodata:00000000000077F0 aBase2msbfBitSt db '      --base2msbf       bit string with most significant bit (msb'
.rodata:00000000000077F0                                         ; DATA XREF: usage+1AC↑o
.rodata:00000000000077F0                 db ') first',0Ah,0
.rodata:000000000000783A                 align 20h
.rodata:0000000000007840 ; const char aBase2lsbfBitSt[]
.rodata:0000000000007840 aBase2lsbfBitSt db '      --base2lsbf       bit string with least significant bit (ls'
.rodata:0000000000007840                                         ; DATA XREF: usage+1D1↑o
.rodata:0000000000007840                 db 'b) first',0Ah,0
.rodata:000000000000788B                 align 10h
.rodata:0000000000007890 ; const char aDDecodeDecodeD[]
.rodata:0000000000007890 aDDecodeDecodeD db '  -d, --decode          decode data',0Ah
.rodata:0000000000007890                                         ; DATA XREF: usage+1F6↑o
.rodata:0000000000007890                 db '  -i, --ignore-garbage  when decoding, ignore non-alphabet charac'
.rodata:0000000000007890                 db 'ters',0Ah
.rodata:0000000000007890                 db '  -w, --wrap=COLS       wrap encoded lines after COLS character ('
.rodata:0000000000007890                 db 'default 76).',0Ah
.rodata:0000000000007890                 db '                          Use 0 to disable line wrapping',0Ah
.rodata:0000000000007890                 db 0Ah,0
.rodata:0000000000007983                 align 8
.rodata:0000000000007988 ; const char aZ85Ascii85Like[]
.rodata:0000000000007988 aZ85Ascii85Like db '      --z85             ascii85-like encoding (ZeroMQ spec:32/Z85'
.rodata:0000000000007988                                         ; DATA XREF: usage+21B↑o
.rodata:0000000000007988                 db ');',0Ah
.rodata:0000000000007988                 db '                        when encoding, input length must be a mul'
.rodata:0000000000007988                 db 'tiple of 4;',0Ah
.rodata:0000000000007988                 db '                        when decoding, input length must be a mul'
.rodata:0000000000007988                 db 'tiple of 5',0Ah,0
.rodata:0000000000007A66                 align 8
.rodata:0000000000007A68 ; const char aHelpDisplayThi[]
.rodata:0000000000007A68 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000007A68                                         ; DATA XREF: usage+240↑o
.rodata:0000000000007A95                 align 8
.rodata:0000000000007A98 ; const char aVersionOutputV[]
.rodata:0000000000007A98 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000007A98                                         ; DATA XREF: usage+265↑o
.rodata:0000000000007ACE                 align 10h
.rodata:0000000000007AD0 ; const char aWhenDecodingTh[]
.rodata:0000000000007AD0 aWhenDecodingTh db 0Ah                  ; DATA XREF: usage+28A↑o
.rodata:0000000000007AD0                 db 'When decoding, the input may contain newlines in addition to the '
.rodata:0000000000007AD0                 db 'bytes of',0Ah
.rodata:0000000000007AD0                 db 'the formal alphabet.  Use --ignore-garbage to attempt to recover',0Ah
.rodata:0000000000007AD0                 db 'from any other non-alphabet bytes in the encoded stream.',0Ah,0
.rodata:0000000000007B96                 align 8
.rodata:0000000000007B98 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000007B98                                         ; DATA XREF: usage+37F↑o
.rodata:0000000000007B98                                         ; usage+3E3↑o ...
.rodata:0000000000007BC0 ; const char aReportAnyTrans[]
.rodata:0000000000007BC0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000007BC0                                         ; DATA XREF: usage+4D7↑o
.rodata:0000000000007BC0                 db 'am/>',0Ah,0
.rodata:0000000000007C07                 align 8
.rodata:0000000000007C08 ; const char aOrAvailableLoc[]
.rodata:0000000000007C08 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000007C08                                         ; DATA XREF: usage:loc_336E↑o
.rodata:0000000000007C3B                 align 20h
.rodata:0000000000007C40 jpt_1A69        dd offset loc_1CEF - 7C40h
.rodata:0000000000007C40                                         ; DATA XREF: main+19B↑o
.rodata:0000000000007C40                                         ; main+1A2↑r
.rodata:0000000000007C40                 dd offset loc_1CA4 - 7C40h ; jump table for switch statement
.rodata:0000000000007C40                 dd offset loc_1DD0 - 7C40h
.rodata:0000000000007C40                 dd offset loc_1D85 - 7C40h
.rodata:0000000000007C40                 dd offset loc_1E1B - 7C40h
.rodata:0000000000007C40                 dd offset loc_1C59 - 7C40h
.rodata:0000000000007C40                 dd offset loc_1A6B - 7C40h
.rodata:0000000000007C40                 dd offset loc_1D3A - 7C40h
.rodata:0000000000007C60 ; const char _PRETTY_FUNCTION___7847[]
.rodata:0000000000007C60 __PRETTY_FUNCTION___7847 db 'base32hex_encode',0
.rodata:0000000000007C60                                         ; DATA XREF: base32hex_encode:loc_2D67↑o
.rodata:0000000000007C71                 align 20h
.rodata:0000000000007C80 z85_decoding    db  44h ; D             ; DATA XREF: z85_decode_ctx+1C↑o
.rodata:0000000000007C81                 db 0FFh
.rodata:0000000000007C82                 db  54h ; T
.rodata:0000000000007C83                 db  53h ; S
.rodata:0000000000007C84                 db  52h ; R
.rodata:0000000000007C85                 db  48h ; H
.rodata:0000000000007C86                 db 0FFh
.rodata:0000000000007C87                 db  4Bh ; K
.rodata:0000000000007C88                 db  4Ch ; L
.rodata:0000000000007C89                 db  46h ; F
.rodata:0000000000007C8A                 db  41h ; A
.rodata:0000000000007C8B                 db 0FFh
.rodata:0000000000007C8C                 db  3Fh ; ?
.rodata:0000000000007C8D                 db  3Eh ; >
.rodata:0000000000007C8E                 db  45h ; E
.rodata:0000000000007C8F                 db    0
.rodata:0000000000007C90                 db    1
.rodata:0000000000007C91                 db    2
.rodata:0000000000007C92                 db    3
.rodata:0000000000007C93                 db    4
.rodata:0000000000007C94                 db    5
.rodata:0000000000007C95                 db    6
.rodata:0000000000007C96                 db    7
.rodata:0000000000007C97                 db    8
.rodata:0000000000007C98                 db    9
.rodata:0000000000007C99                 db  40h ; @
.rodata:0000000000007C9A                 db 0FFh
.rodata:0000000000007C9B                 db  49h ; I
.rodata:0000000000007C9C                 db  42h ; B
.rodata:0000000000007C9D                 db  4Ah ; J
.rodata:0000000000007C9E                 db  47h ; G
.rodata:0000000000007C9F                 db  51h ; Q
.rodata:0000000000007CA0                 db  24h ; $
.rodata:0000000000007CA1                 db  25h ; %
.rodata:0000000000007CA2                 db  26h ; &
.rodata:0000000000007CA3                 db  27h ; '
.rodata:0000000000007CA4                 db  28h ; (
.rodata:0000000000007CA5                 db  29h ; )
.rodata:0000000000007CA6                 db  2Ah ; *
.rodata:0000000000007CA7                 db  2Bh ; +
.rodata:0000000000007CA8                 db  2Ch ; ,
.rodata:0000000000007CA9                 db  2Dh ; -
.rodata:0000000000007CAA                 db  2Eh ; .
.rodata:0000000000007CAB                 db  2Fh ; /
.rodata:0000000000007CAC                 db  30h ; 0
.rodata:0000000000007CAD                 db  31h ; 1
.rodata:0000000000007CAE                 db  32h ; 2
.rodata:0000000000007CAF                 db  33h ; 3
.rodata:0000000000007CB0                 db  34h ; 4
.rodata:0000000000007CB1                 db  35h ; 5
.rodata:0000000000007CB2                 db  36h ; 6
.rodata:0000000000007CB3                 db  37h ; 7
.rodata:0000000000007CB4                 db  38h ; 8
.rodata:0000000000007CB5                 db  39h ; 9
.rodata:0000000000007CB6                 db  3Ah ; :
.rodata:0000000000007CB7                 db  3Bh ; ;
.rodata:0000000000007CB8                 db  3Ch ; <
.rodata:0000000000007CB9                 db  3Dh ; =
.rodata:0000000000007CBA                 db  4Dh ; M
.rodata:0000000000007CBB                 db 0FFh
.rodata:0000000000007CBC                 db  4Eh ; N
.rodata:0000000000007CBD                 db  43h ; C
.rodata:0000000000007CBE                 db 0FFh
.rodata:0000000000007CBF                 db 0FFh
.rodata:0000000000007CC0                 db  0Ah
.rodata:0000000000007CC1                 db  0Bh
.rodata:0000000000007CC2                 db  0Ch
.rodata:0000000000007CC3                 db  0Dh
.rodata:0000000000007CC4                 db  0Eh
.rodata:0000000000007CC5                 db  0Fh
.rodata:0000000000007CC6                 db  10h
.rodata:0000000000007CC7                 db  11h
.rodata:0000000000007CC8                 db  12h
.rodata:0000000000007CC9                 db  13h
.rodata:0000000000007CCA                 db  14h
.rodata:0000000000007CCB                 db  15h
.rodata:0000000000007CCC                 db  16h
.rodata:0000000000007CCD                 db  17h
.rodata:0000000000007CCE                 db  18h
.rodata:0000000000007CCF                 db  19h
.rodata:0000000000007CD0                 db  1Ah
.rodata:0000000000007CD1                 db  1Bh
.rodata:0000000000007CD2                 db  1Ch
.rodata:0000000000007CD3                 db  1Dh
.rodata:0000000000007CD4                 db  1Eh
.rodata:0000000000007CD5                 db  1Fh
.rodata:0000000000007CD6                 db  20h
.rodata:0000000000007CD7                 db  21h ; !
.rodata:0000000000007CD8                 db  22h ; "
.rodata:0000000000007CD9                 db  23h ; #
.rodata:0000000000007CDA                 db  4Fh ; O
.rodata:0000000000007CDB                 db 0FFh
.rodata:0000000000007CDC                 db  50h ; P
.rodata:0000000000007CDD                 db    0
.rodata:0000000000007CDE                 db    0
.rodata:0000000000007CDF                 db    0
.rodata:0000000000007CE0 z85_encoding    db '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:'
.rodata:0000000000007CE0                                         ; DATA XREF: z85_encode+38↑o
.rodata:0000000000007CE0                 db '+=^!/*?&<>()[]{}@%$#',0
.rodata:0000000000007D36                 align 20h
.rodata:0000000000007D40 base16          db '0123456789ABCDEF',0 ; DATA XREF: base16_encode+5↑o
.rodata:0000000000007D51                 align 20h
.rodata:0000000000007D60 base32_hex_to_norm db 'ABCDEFGHIJ:;<=>?@KLMNOPQRSTUVWXYZ234567',0
.rodata:0000000000007D60                                         ; DATA XREF: base32hex_decode_ctx_wrapper+1E↑o
.rodata:0000000000007D88                 align 20h
.rodata:0000000000007DA0 base32_norm_to_hex db 'QRSTUV89:;<=>?@0123456789ABCDEFGHIJKLMNOP8.31',0
.rodata:0000000000007DA0                                         ; DATA XREF: base32hex_encode+25↑o
.rodata:0000000000007DCE                 align 20h
.rodata:0000000000007DE0 b32str_3066     db  41h ; A             ; DATA XREF: base32_encode↑o
.rodata:0000000000007DE1                 db  42h ; B
.rodata:0000000000007DE2                 db  43h ; C
.rodata:0000000000007DE3                 db  44h ; D
.rodata:0000000000007DE4                 db  45h ; E
.rodata:0000000000007DE5                 db  46h ; F
.rodata:0000000000007DE6                 db  47h ; G
.rodata:0000000000007DE7                 db  48h ; H
.rodata:0000000000007DE8                 db  49h ; I
.rodata:0000000000007DE9                 db  4Ah ; J
.rodata:0000000000007DEA                 db  4Bh ; K
.rodata:0000000000007DEB                 db  4Ch ; L
.rodata:0000000000007DEC                 db  4Dh ; M
.rodata:0000000000007DED                 db  4Eh ; N
.rodata:0000000000007DEE                 db  4Fh ; O
.rodata:0000000000007DEF                 db  50h ; P
.rodata:0000000000007DF0                 db  51h ; Q
.rodata:0000000000007DF1                 db  52h ; R
.rodata:0000000000007DF2                 db  53h ; S
.rodata:0000000000007DF3                 db  54h ; T
.rodata:0000000000007DF4                 db  55h ; U
.rodata:0000000000007DF5                 db  56h ; V
.rodata:0000000000007DF6                 db  57h ; W
.rodata:0000000000007DF7                 db  58h ; X
.rodata:0000000000007DF8                 db  59h ; Y
.rodata:0000000000007DF9                 db  5Ah ; Z
.rodata:0000000000007DFA                 db  32h ; 2
.rodata:0000000000007DFB                 db  33h ; 3
.rodata:0000000000007DFC                 db  34h ; 4
.rodata:0000000000007DFD                 db  35h ; 5
.rodata:0000000000007DFE                 db  36h ; 6
.rodata:0000000000007DFF                 db  37h ; 7
.rodata:0000000000007E00 b32             db 0FFh                 ; DATA XREF: decode_8+10↑o
.rodata:0000000000007E00                                         ; isbase32↑o
.rodata:0000000000007E01                 db 0FFh
.rodata:0000000000007E02                 db 0FFh
.rodata:0000000000007E03                 db 0FFh
.rodata:0000000000007E04                 db 0FFh
.rodata:0000000000007E05                 db 0FFh
.rodata:0000000000007E06                 db 0FFh
.rodata:0000000000007E07                 db 0FFh
.rodata:0000000000007E08                 db 0FFh
.rodata:0000000000007E09                 db 0FFh
.rodata:0000000000007E0A                 db 0FFh
.rodata:0000000000007E0B                 db 0FFh
.rodata:0000000000007E0C                 db 0FFh
.rodata:0000000000007E0D                 db 0FFh
.rodata:0000000000007E0E                 db 0FFh
.rodata:0000000000007E0F                 db 0FFh
.rodata:0000000000007E10                 db 0FFh
.rodata:0000000000007E11                 db 0FFh
.rodata:0000000000007E12                 db 0FFh
.rodata:0000000000007E13                 db 0FFh
.rodata:0000000000007E14                 db 0FFh
.rodata:0000000000007E15                 db 0FFh
.rodata:0000000000007E16                 db 0FFh
.rodata:0000000000007E17                 db 0FFh
.rodata:0000000000007E18                 db 0FFh
.rodata:0000000000007E19                 db 0FFh
.rodata:0000000000007E1A                 db 0FFh
.rodata:0000000000007E1B                 db 0FFh
.rodata:0000000000007E1C                 db 0FFh
.rodata:0000000000007E1D                 db 0FFh
.rodata:0000000000007E1E                 db 0FFh
.rodata:0000000000007E1F                 db 0FFh
.rodata:0000000000007E20                 db 0FFh
.rodata:0000000000007E21                 db 0FFh
.rodata:0000000000007E22                 db 0FFh
.rodata:0000000000007E23                 db 0FFh
.rodata:0000000000007E24                 db 0FFh
.rodata:0000000000007E25                 db 0FFh
.rodata:0000000000007E26                 db 0FFh
.rodata:0000000000007E27                 db 0FFh
.rodata:0000000000007E28                 db 0FFh
.rodata:0000000000007E29                 db 0FFh
.rodata:0000000000007E2A                 db 0FFh
.rodata:0000000000007E2B                 db 0FFh
.rodata:0000000000007E2C                 db 0FFh
.rodata:0000000000007E2D                 db 0FFh
.rodata:0000000000007E2E                 db 0FFh
.rodata:0000000000007E2F                 db 0FFh
.rodata:0000000000007E30                 db 0FFh
.rodata:0000000000007E31                 db 0FFh
.rodata:0000000000007E32                 db  1Ah
.rodata:0000000000007E33                 db  1Bh
.rodata:0000000000007E34                 db  1Ch
.rodata:0000000000007E35                 db  1Dh
.rodata:0000000000007E36                 db  1Eh
.rodata:0000000000007E37                 db  1Fh
.rodata:0000000000007E38                 db 0FFh
.rodata:0000000000007E39                 db 0FFh
.rodata:0000000000007E3A                 db 0FFh
.rodata:0000000000007E3B                 db 0FFh
.rodata:0000000000007E3C                 db 0FFh
.rodata:0000000000007E3D                 db 0FFh
.rodata:0000000000007E3E                 db 0FFh
.rodata:0000000000007E3F                 db 0FFh
.rodata:0000000000007E40                 db 0FFh
.rodata:0000000000007E41                 db    0
.rodata:0000000000007E42                 db    1
.rodata:0000000000007E43                 db    2
.rodata:0000000000007E44                 db    3
.rodata:0000000000007E45                 db    4
.rodata:0000000000007E46                 db    5
.rodata:0000000000007E47                 db    6
.rodata:0000000000007E48                 db    7
.rodata:0000000000007E49                 db    8
.rodata:0000000000007E4A                 db    9
.rodata:0000000000007E4B                 db  0Ah
.rodata:0000000000007E4C                 db  0Bh
.rodata:0000000000007E4D                 db  0Ch
.rodata:0000000000007E4E                 db  0Dh
.rodata:0000000000007E4F                 db  0Eh
.rodata:0000000000007E50                 db  0Fh
.rodata:0000000000007E51                 db  10h
.rodata:0000000000007E52                 db  11h
.rodata:0000000000007E53                 db  12h
.rodata:0000000000007E54                 db  13h
.rodata:0000000000007E55                 db  14h
.rodata:0000000000007E56                 db  15h
.rodata:0000000000007E57                 db  16h
.rodata:0000000000007E58                 db  17h
.rodata:0000000000007E59                 db  18h
.rodata:0000000000007E5A                 db  19h
.rodata:0000000000007E5B                 db 0FFh
.rodata:0000000000007E5C                 db 0FFh
.rodata:0000000000007E5D                 db 0FFh
.rodata:0000000000007E5E                 db 0FFh
.rodata:0000000000007E5F                 db 0FFh
.rodata:0000000000007E60                 db 0FFh
.rodata:0000000000007E61                 db 0FFh
.rodata:0000000000007E62                 db 0FFh
.rodata:0000000000007E63                 db 0FFh
.rodata:0000000000007E64                 db 0FFh
.rodata:0000000000007E65                 db 0FFh
.rodata:0000000000007E66                 db 0FFh
.rodata:0000000000007E67                 db 0FFh
.rodata:0000000000007E68                 db 0FFh
.rodata:0000000000007E69                 db 0FFh
.rodata:0000000000007E6A                 db 0FFh
.rodata:0000000000007E6B                 db 0FFh
.rodata:0000000000007E6C                 db 0FFh
.rodata:0000000000007E6D                 db 0FFh
.rodata:0000000000007E6E                 db 0FFh
.rodata:0000000000007E6F                 db 0FFh
.rodata:0000000000007E70                 db 0FFh
.rodata:0000000000007E71                 db 0FFh
.rodata:0000000000007E72                 db 0FFh
.rodata:0000000000007E73                 db 0FFh
.rodata:0000000000007E74                 db 0FFh
.rodata:0000000000007E75                 db 0FFh
.rodata:0000000000007E76                 db 0FFh
.rodata:0000000000007E77                 db 0FFh
.rodata:0000000000007E78                 db 0FFh
.rodata:0000000000007E79                 db 0FFh
.rodata:0000000000007E7A                 db 0FFh
.rodata:0000000000007E7B                 db 0FFh
.rodata:0000000000007E7C                 db 0FFh
.rodata:0000000000007E7D                 db 0FFh
.rodata:0000000000007E7E                 db 0FFh
.rodata:0000000000007E7F                 db 0FFh
.rodata:0000000000007E80                 db 0FFh
.rodata:0000000000007E81                 db 0FFh
.rodata:0000000000007E82                 db 0FFh
.rodata:0000000000007E83                 db 0FFh
.rodata:0000000000007E84                 db 0FFh
.rodata:0000000000007E85                 db 0FFh
.rodata:0000000000007E86                 db 0FFh
.rodata:0000000000007E87                 db 0FFh
.rodata:0000000000007E88                 db 0FFh
.rodata:0000000000007E89                 db 0FFh
.rodata:0000000000007E8A                 db 0FFh
.rodata:0000000000007E8B                 db 0FFh
.rodata:0000000000007E8C                 db 0FFh
.rodata:0000000000007E8D                 db 0FFh
.rodata:0000000000007E8E                 db 0FFh
.rodata:0000000000007E8F                 db 0FFh
.rodata:0000000000007E90                 db 0FFh
.rodata:0000000000007E91                 db 0FFh
.rodata:0000000000007E92                 db 0FFh
.rodata:0000000000007E93                 db 0FFh
.rodata:0000000000007E94                 db 0FFh
.rodata:0000000000007E95                 db 0FFh
.rodata:0000000000007E96                 db 0FFh
.rodata:0000000000007E97                 db 0FFh
.rodata:0000000000007E98                 db 0FFh
.rodata:0000000000007E99                 db 0FFh
.rodata:0000000000007E9A                 db 0FFh
.rodata:0000000000007E9B                 db 0FFh
.rodata:0000000000007E9C                 db 0FFh
.rodata:0000000000007E9D                 db 0FFh
.rodata:0000000000007E9E                 db 0FFh
.rodata:0000000000007E9F                 db 0FFh
.rodata:0000000000007EA0                 db 0FFh
.rodata:0000000000007EA1                 db 0FFh
.rodata:0000000000007EA2                 db 0FFh
.rodata:0000000000007EA3                 db 0FFh
.rodata:0000000000007EA4                 db 0FFh
.rodata:0000000000007EA5                 db 0FFh
.rodata:0000000000007EA6                 db 0FFh
.rodata:0000000000007EA7                 db 0FFh
.rodata:0000000000007EA8                 db 0FFh
.rodata:0000000000007EA9                 db 0FFh
.rodata:0000000000007EAA                 db 0FFh
.rodata:0000000000007EAB                 db 0FFh
.rodata:0000000000007EAC                 db 0FFh
.rodata:0000000000007EAD                 db 0FFh
.rodata:0000000000007EAE                 db 0FFh
.rodata:0000000000007EAF                 db 0FFh
.rodata:0000000000007EB0                 db 0FFh
.rodata:0000000000007EB1                 db 0FFh
.rodata:0000000000007EB2                 db 0FFh
.rodata:0000000000007EB3                 db 0FFh
.rodata:0000000000007EB4                 db 0FFh
.rodata:0000000000007EB5                 db 0FFh
.rodata:0000000000007EB6                 db 0FFh
.rodata:0000000000007EB7                 db 0FFh
.rodata:0000000000007EB8                 db 0FFh
.rodata:0000000000007EB9                 db 0FFh
.rodata:0000000000007EBA                 db 0FFh
.rodata:0000000000007EBB                 db 0FFh
.rodata:0000000000007EBC                 db 0FFh
.rodata:0000000000007EBD                 db 0FFh
.rodata:0000000000007EBE                 db 0FFh
.rodata:0000000000007EBF                 db 0FFh
.rodata:0000000000007EC0                 db 0FFh
.rodata:0000000000007EC1                 db 0FFh
.rodata:0000000000007EC2                 db 0FFh
.rodata:0000000000007EC3                 db 0FFh
.rodata:0000000000007EC4                 db 0FFh
.rodata:0000000000007EC5                 db 0FFh
.rodata:0000000000007EC6                 db 0FFh
.rodata:0000000000007EC7                 db 0FFh
.rodata:0000000000007EC8                 db 0FFh
.rodata:0000000000007EC9                 db 0FFh
.rodata:0000000000007ECA                 db 0FFh
.rodata:0000000000007ECB                 db 0FFh
.rodata:0000000000007ECC                 db 0FFh
.rodata:0000000000007ECD                 db 0FFh
.rodata:0000000000007ECE                 db 0FFh
.rodata:0000000000007ECF                 db 0FFh
.rodata:0000000000007ED0                 db 0FFh
.rodata:0000000000007ED1                 db 0FFh
.rodata:0000000000007ED2                 db 0FFh
.rodata:0000000000007ED3                 db 0FFh
.rodata:0000000000007ED4                 db 0FFh
.rodata:0000000000007ED5                 db 0FFh
.rodata:0000000000007ED6                 db 0FFh
.rodata:0000000000007ED7                 db 0FFh
.rodata:0000000000007ED8                 db 0FFh
.rodata:0000000000007ED9                 db 0FFh
.rodata:0000000000007EDA                 db 0FFh
.rodata:0000000000007EDB                 db 0FFh
.rodata:0000000000007EDC                 db 0FFh
.rodata:0000000000007EDD                 db 0FFh
.rodata:0000000000007EDE                 db 0FFh
.rodata:0000000000007EDF                 db 0FFh
.rodata:0000000000007EE0                 db 0FFh
.rodata:0000000000007EE1                 db 0FFh
.rodata:0000000000007EE2                 db 0FFh
.rodata:0000000000007EE3                 db 0FFh
.rodata:0000000000007EE4                 db 0FFh
.rodata:0000000000007EE5                 db 0FFh
.rodata:0000000000007EE6                 db 0FFh
.rodata:0000000000007EE7                 db 0FFh
.rodata:0000000000007EE8                 db 0FFh
.rodata:0000000000007EE9                 db 0FFh
.rodata:0000000000007EEA                 db 0FFh
.rodata:0000000000007EEB                 db 0FFh
.rodata:0000000000007EEC                 db 0FFh
.rodata:0000000000007EED                 db 0FFh
.rodata:0000000000007EEE                 db 0FFh
.rodata:0000000000007EEF                 db 0FFh
.rodata:0000000000007EF0                 db 0FFh
.rodata:0000000000007EF1                 db 0FFh
.rodata:0000000000007EF2                 db 0FFh
.rodata:0000000000007EF3                 db 0FFh
.rodata:0000000000007EF4                 db 0FFh
.rodata:0000000000007EF5                 db 0FFh
.rodata:0000000000007EF6                 db 0FFh
.rodata:0000000000007EF7                 db 0FFh
.rodata:0000000000007EF8                 db 0FFh
.rodata:0000000000007EF9                 db 0FFh
.rodata:0000000000007EFA                 db 0FFh
.rodata:0000000000007EFB                 db 0FFh
.rodata:0000000000007EFC                 db 0FFh
.rodata:0000000000007EFD                 db 0FFh
.rodata:0000000000007EFE                 db 0FFh
.rodata:0000000000007EFF                 db 0FFh
.rodata:0000000000007F00 b64             db 0FFh                 ; DATA XREF: decode_4+10↑o
.rodata:0000000000007F00                                         ; isbase64↑o
.rodata:0000000000007F01                 db 0FFh
.rodata:0000000000007F02                 db 0FFh
.rodata:0000000000007F03                 db 0FFh
.rodata:0000000000007F04                 db 0FFh
.rodata:0000000000007F05                 db 0FFh
.rodata:0000000000007F06                 db 0FFh
.rodata:0000000000007F07                 db 0FFh
.rodata:0000000000007F08                 db 0FFh
.rodata:0000000000007F09                 db 0FFh
.rodata:0000000000007F0A                 db 0FFh
.rodata:0000000000007F0B                 db 0FFh
.rodata:0000000000007F0C                 db 0FFh
.rodata:0000000000007F0D                 db 0FFh
.rodata:0000000000007F0E                 db 0FFh
.rodata:0000000000007F0F                 db 0FFh
.rodata:0000000000007F10                 db 0FFh
.rodata:0000000000007F11                 db 0FFh
.rodata:0000000000007F12                 db 0FFh
.rodata:0000000000007F13                 db 0FFh
.rodata:0000000000007F14                 db 0FFh
.rodata:0000000000007F15                 db 0FFh
.rodata:0000000000007F16                 db 0FFh
.rodata:0000000000007F17                 db 0FFh
.rodata:0000000000007F18                 db 0FFh
.rodata:0000000000007F19                 db 0FFh
.rodata:0000000000007F1A                 db 0FFh
.rodata:0000000000007F1B                 db 0FFh
.rodata:0000000000007F1C                 db 0FFh
.rodata:0000000000007F1D                 db 0FFh
.rodata:0000000000007F1E                 db 0FFh
.rodata:0000000000007F1F                 db 0FFh
.rodata:0000000000007F20                 db 0FFh
.rodata:0000000000007F21                 db 0FFh
.rodata:0000000000007F22                 db 0FFh
.rodata:0000000000007F23                 db 0FFh
.rodata:0000000000007F24                 db 0FFh
.rodata:0000000000007F25                 db 0FFh
.rodata:0000000000007F26                 db 0FFh
.rodata:0000000000007F27                 db 0FFh
.rodata:0000000000007F28                 db 0FFh
.rodata:0000000000007F29                 db 0FFh
.rodata:0000000000007F2A                 db 0FFh
.rodata:0000000000007F2B                 db  3Eh ; >
.rodata:0000000000007F2C                 db 0FFh
.rodata:0000000000007F2D                 db 0FFh
.rodata:0000000000007F2E                 db 0FFh
.rodata:0000000000007F2F                 db  3Fh ; ?
.rodata:0000000000007F30                 db  34h ; 4
.rodata:0000000000007F31                 db  35h ; 5
.rodata:0000000000007F32                 db  36h ; 6
.rodata:0000000000007F33                 db  37h ; 7
.rodata:0000000000007F34                 db  38h ; 8
.rodata:0000000000007F35                 db  39h ; 9
.rodata:0000000000007F36                 db  3Ah ; :
.rodata:0000000000007F37                 db  3Bh ; ;
.rodata:0000000000007F38                 db  3Ch ; <
.rodata:0000000000007F39                 db  3Dh ; =
.rodata:0000000000007F3A                 db 0FFh
.rodata:0000000000007F3B                 db 0FFh
.rodata:0000000000007F3C                 db 0FFh
.rodata:0000000000007F3D                 db 0FFh
.rodata:0000000000007F3E                 db 0FFh
.rodata:0000000000007F3F                 db 0FFh
.rodata:0000000000007F40                 db 0FFh
.rodata:0000000000007F41                 db    0
.rodata:0000000000007F42                 db    1
.rodata:0000000000007F43                 db    2
.rodata:0000000000007F44                 db    3
.rodata:0000000000007F45                 db    4
.rodata:0000000000007F46                 db    5
.rodata:0000000000007F47                 db    6
.rodata:0000000000007F48                 db    7
.rodata:0000000000007F49                 db    8
.rodata:0000000000007F4A                 db    9
.rodata:0000000000007F4B                 db  0Ah
.rodata:0000000000007F4C                 db  0Bh
.rodata:0000000000007F4D                 db  0Ch
.rodata:0000000000007F4E                 db  0Dh
.rodata:0000000000007F4F                 db  0Eh
.rodata:0000000000007F50                 db  0Fh
.rodata:0000000000007F51                 db  10h
.rodata:0000000000007F52                 db  11h
.rodata:0000000000007F53                 db  12h
.rodata:0000000000007F54                 db  13h
.rodata:0000000000007F55                 db  14h
.rodata:0000000000007F56                 db  15h
.rodata:0000000000007F57                 db  16h
.rodata:0000000000007F58                 db  17h
.rodata:0000000000007F59                 db  18h
.rodata:0000000000007F5A                 db  19h
.rodata:0000000000007F5B                 db 0FFh
.rodata:0000000000007F5C                 db 0FFh
.rodata:0000000000007F5D                 db 0FFh
.rodata:0000000000007F5E                 db 0FFh
.rodata:0000000000007F5F                 db 0FFh
.rodata:0000000000007F60                 db 0FFh
.rodata:0000000000007F61                 db  1Ah
.rodata:0000000000007F62                 db  1Bh
.rodata:0000000000007F63                 db  1Ch
.rodata:0000000000007F64                 db  1Dh
.rodata:0000000000007F65                 db  1Eh
.rodata:0000000000007F66                 db  1Fh
.rodata:0000000000007F67                 db  20h
.rodata:0000000000007F68                 db  21h ; !
.rodata:0000000000007F69                 db  22h ; "
.rodata:0000000000007F6A                 db  23h ; #
.rodata:0000000000007F6B                 db  24h ; $
.rodata:0000000000007F6C                 db  25h ; %
.rodata:0000000000007F6D                 db  26h ; &
.rodata:0000000000007F6E                 db  27h ; '
.rodata:0000000000007F6F                 db  28h ; (
.rodata:0000000000007F70                 db  29h ; )
.rodata:0000000000007F71                 db  2Ah ; *
.rodata:0000000000007F72                 db  2Bh ; +
.rodata:0000000000007F73                 db  2Ch ; ,
.rodata:0000000000007F74                 db  2Dh ; -
.rodata:0000000000007F75                 db  2Eh ; .
.rodata:0000000000007F76                 db  2Fh ; /
.rodata:0000000000007F77                 db  30h ; 0
.rodata:0000000000007F78                 db  31h ; 1
.rodata:0000000000007F79                 db  32h ; 2
.rodata:0000000000007F7A                 db  33h ; 3
.rodata:0000000000007F7B                 db 0FFh
.rodata:0000000000007F7C                 db 0FFh
.rodata:0000000000007F7D                 db 0FFh
.rodata:0000000000007F7E                 db 0FFh
.rodata:0000000000007F7F                 db 0FFh
.rodata:0000000000007F80                 db 0FFh
.rodata:0000000000007F81                 db 0FFh
.rodata:0000000000007F82                 db 0FFh
.rodata:0000000000007F83                 db 0FFh
.rodata:0000000000007F84                 db 0FFh
.rodata:0000000000007F85                 db 0FFh
.rodata:0000000000007F86                 db 0FFh
.rodata:0000000000007F87                 db 0FFh
.rodata:0000000000007F88                 db 0FFh
.rodata:0000000000007F89                 db 0FFh
.rodata:0000000000007F8A                 db 0FFh
.rodata:0000000000007F8B                 db 0FFh
.rodata:0000000000007F8C                 db 0FFh
.rodata:0000000000007F8D                 db 0FFh
.rodata:0000000000007F8E                 db 0FFh
.rodata:0000000000007F8F                 db 0FFh
.rodata:0000000000007F90                 db 0FFh
.rodata:0000000000007F91                 db 0FFh
.rodata:0000000000007F92                 db 0FFh
.rodata:0000000000007F93                 db 0FFh
.rodata:0000000000007F94                 db 0FFh
.rodata:0000000000007F95                 db 0FFh
.rodata:0000000000007F96                 db 0FFh
.rodata:0000000000007F97                 db 0FFh
.rodata:0000000000007F98                 db 0FFh
.rodata:0000000000007F99                 db 0FFh
.rodata:0000000000007F9A                 db 0FFh
.rodata:0000000000007F9B                 db 0FFh
.rodata:0000000000007F9C                 db 0FFh
.rodata:0000000000007F9D                 db 0FFh
.rodata:0000000000007F9E                 db 0FFh
.rodata:0000000000007F9F                 db 0FFh
.rodata:0000000000007FA0                 db 0FFh
.rodata:0000000000007FA1                 db 0FFh
.rodata:0000000000007FA2                 db 0FFh
.rodata:0000000000007FA3                 db 0FFh
.rodata:0000000000007FA4                 db 0FFh
.rodata:0000000000007FA5                 db 0FFh
.rodata:0000000000007FA6                 db 0FFh
.rodata:0000000000007FA7                 db 0FFh
.rodata:0000000000007FA8                 db 0FFh
.rodata:0000000000007FA9                 db 0FFh
.rodata:0000000000007FAA                 db 0FFh
.rodata:0000000000007FAB                 db 0FFh
.rodata:0000000000007FAC                 db 0FFh
.rodata:0000000000007FAD                 db 0FFh
.rodata:0000000000007FAE                 db 0FFh
.rodata:0000000000007FAF                 db 0FFh
.rodata:0000000000007FB0                 db 0FFh
.rodata:0000000000007FB1                 db 0FFh
.rodata:0000000000007FB2                 db 0FFh
.rodata:0000000000007FB3                 db 0FFh
.rodata:0000000000007FB4                 db 0FFh
.rodata:0000000000007FB5                 db 0FFh
.rodata:0000000000007FB6                 db 0FFh
.rodata:0000000000007FB7                 db 0FFh
.rodata:0000000000007FB8                 db 0FFh
.rodata:0000000000007FB9                 db 0FFh
.rodata:0000000000007FBA                 db 0FFh
.rodata:0000000000007FBB                 db 0FFh
.rodata:0000000000007FBC                 db 0FFh
.rodata:0000000000007FBD                 db 0FFh
.rodata:0000000000007FBE                 db 0FFh
.rodata:0000000000007FBF                 db 0FFh
.rodata:0000000000007FC0                 db 0FFh
.rodata:0000000000007FC1                 db 0FFh
.rodata:0000000000007FC2                 db 0FFh
.rodata:0000000000007FC3                 db 0FFh
.rodata:0000000000007FC4                 db 0FFh
.rodata:0000000000007FC5                 db 0FFh
.rodata:0000000000007FC6                 db 0FFh
.rodata:0000000000007FC7                 db 0FFh
.rodata:0000000000007FC8                 db 0FFh
.rodata:0000000000007FC9                 db 0FFh
.rodata:0000000000007FCA                 db 0FFh
.rodata:0000000000007FCB                 db 0FFh
.rodata:0000000000007FCC                 db 0FFh
.rodata:0000000000007FCD                 db 0FFh
.rodata:0000000000007FCE                 db 0FFh
.rodata:0000000000007FCF                 db 0FFh
.rodata:0000000000007FD0                 db 0FFh
.rodata:0000000000007FD1                 db 0FFh
.rodata:0000000000007FD2                 db 0FFh
.rodata:0000000000007FD3                 db 0FFh
.rodata:0000000000007FD4                 db 0FFh
.rodata:0000000000007FD5                 db 0FFh
.rodata:0000000000007FD6                 db 0FFh
.rodata:0000000000007FD7                 db 0FFh
.rodata:0000000000007FD8                 db 0FFh
.rodata:0000000000007FD9                 db 0FFh
.rodata:0000000000007FDA                 db 0FFh
.rodata:0000000000007FDB                 db 0FFh
.rodata:0000000000007FDC                 db 0FFh
.rodata:0000000000007FDD                 db 0FFh
.rodata:0000000000007FDE                 db 0FFh
.rodata:0000000000007FDF                 db 0FFh
.rodata:0000000000007FE0                 db 0FFh
.rodata:0000000000007FE1                 db 0FFh
.rodata:0000000000007FE2                 db 0FFh
.rodata:0000000000007FE3                 db 0FFh
.rodata:0000000000007FE4                 db 0FFh
.rodata:0000000000007FE5                 db 0FFh
.rodata:0000000000007FE6                 db 0FFh
.rodata:0000000000007FE7                 db 0FFh
.rodata:0000000000007FE8                 db 0FFh
.rodata:0000000000007FE9                 db 0FFh
.rodata:0000000000007FEA                 db 0FFh
.rodata:0000000000007FEB                 db 0FFh
.rodata:0000000000007FEC                 db 0FFh
.rodata:0000000000007FED                 db 0FFh
.rodata:0000000000007FEE                 db 0FFh
.rodata:0000000000007FEF                 db 0FFh
.rodata:0000000000007FF0                 db 0FFh
.rodata:0000000000007FF1                 db 0FFh
.rodata:0000000000007FF2                 db 0FFh
.rodata:0000000000007FF3                 db 0FFh
.rodata:0000000000007FF4                 db 0FFh
.rodata:0000000000007FF5                 db 0FFh
.rodata:0000000000007FF6                 db 0FFh
.rodata:0000000000007FF7                 db 0FFh
.rodata:0000000000007FF8                 db 0FFh
.rodata:0000000000007FF9                 db 0FFh
.rodata:0000000000007FFA                 db 0FFh
.rodata:0000000000007FFB                 db 0FFh
.rodata:0000000000007FFC                 db 0FFh
.rodata:0000000000007FFD                 db 0FFh
.rodata:0000000000007FFE                 db 0FFh
.rodata:0000000000007FFF                 db 0FFh
.rodata:0000000000008000 b64c            db  41h ; A             ; DATA XREF: base64_encode:loc_3D89↑o
.rodata:0000000000008000                                         ; base64_encode+12F↑o
.rodata:0000000000008001                 db  42h ; B
.rodata:0000000000008002                 db  43h ; C
.rodata:0000000000008003                 db  44h ; D
.rodata:0000000000008004                 db  45h ; E
.rodata:0000000000008005                 db  46h ; F
.rodata:0000000000008006                 db  47h ; G
.rodata:0000000000008007                 db  48h ; H
.rodata:0000000000008008                 db  49h ; I
.rodata:0000000000008009                 db  4Ah ; J
.rodata:000000000000800A                 db  4Bh ; K
.rodata:000000000000800B                 db  4Ch ; L
.rodata:000000000000800C                 db  4Dh ; M
.rodata:000000000000800D                 db  4Eh ; N
.rodata:000000000000800E                 db  4Fh ; O
.rodata:000000000000800F                 db  50h ; P
.rodata:0000000000008010                 db  51h ; Q
.rodata:0000000000008011                 db  52h ; R
.rodata:0000000000008012                 db  53h ; S
.rodata:0000000000008013                 db  54h ; T
.rodata:0000000000008014                 db  55h ; U
.rodata:0000000000008015                 db  56h ; V
.rodata:0000000000008016                 db  57h ; W
.rodata:0000000000008017                 db  58h ; X
.rodata:0000000000008018                 db  59h ; Y
.rodata:0000000000008019                 db  5Ah ; Z
.rodata:000000000000801A                 db  61h ; a
.rodata:000000000000801B                 db  62h ; b
.rodata:000000000000801C                 db  63h ; c
.rodata:000000000000801D                 db  64h ; d
.rodata:000000000000801E                 db  65h ; e
.rodata:000000000000801F                 db  66h ; f
.rodata:0000000000008020                 db  67h ; g
.rodata:0000000000008021                 db  68h ; h
.rodata:0000000000008022                 db  69h ; i
.rodata:0000000000008023                 db  6Ah ; j
.rodata:0000000000008024                 db  6Bh ; k
.rodata:0000000000008025                 db  6Ch ; l
.rodata:0000000000008026                 db  6Dh ; m
.rodata:0000000000008027                 db  6Eh ; n
.rodata:0000000000008028                 db  6Fh ; o
.rodata:0000000000008029                 db  70h ; p
.rodata:000000000000802A                 db  71h ; q
.rodata:000000000000802B                 db  72h ; r
.rodata:000000000000802C                 db  73h ; s
.rodata:000000000000802D                 db  74h ; t
.rodata:000000000000802E                 db  75h ; u
.rodata:000000000000802F                 db  76h ; v
.rodata:0000000000008030                 db  77h ; w
.rodata:0000000000008031                 db  78h ; x
.rodata:0000000000008032                 db  79h ; y
.rodata:0000000000008033                 db  7Ah ; z
.rodata:0000000000008034                 db  30h ; 0
.rodata:0000000000008035                 db  31h ; 1
.rodata:0000000000008036                 db  32h ; 2
.rodata:0000000000008037                 db  33h ; 3
.rodata:0000000000008038                 db  34h ; 4
.rodata:0000000000008039                 db  35h ; 5
.rodata:000000000000803A                 db  36h ; 6
.rodata:000000000000803B                 db  37h ; 7
.rodata:000000000000803C                 db  38h ; 8
.rodata:000000000000803D                 db  39h ; 9
.rodata:000000000000803E                 db  2Bh ; +
.rodata:000000000000803F                 db  2Fh ; /
.rodata:0000000000008040 ; const char aS[4]
.rodata:0000000000008040 aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000008040                                         ; xnumtoumax+7D↑o
.rodata:0000000000008044 ; const char format[]
.rodata:0000000000008044 format          dd offset s+1           ; DATA XREF: main+98B↑o
.rodata:0000000000008044                                         ; main+A91↑o ...
.rodata:0000000000008044                                         ; "-:+=^!/*?&<>()[]{}@%$#"
.rodata:0000000000008048 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000008048                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000008080 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000008088 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000008088                                         ; main+211↑o ...
.rodata:000000000000808C unk_808C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000808D                 db  80h
.rodata:000000000000808E                 db  98h
.rodata:000000000000808F                 db    0
.rodata:0000000000008090 unk_8090        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000008091                 db  80h
.rodata:0000000000008092                 db  99h
.rodata:0000000000008093                 db    0
.rodata:0000000000008094 unk_8094        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000008095                 db    7
.rodata:0000000000008096                 db  65h ; e
.rodata:0000000000008097                 db    0
.rodata:0000000000008098 unk_8098        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000008099                 db 0AFh
.rodata:000000000000809A                 db    0
.rodata:000000000000809B unk_809B        db  22h ; "             ; DATA XREF: gettext_quote:loc_4530↑o
.rodata:000000000000809B                                         ; quotearg_buffer_restyled:loc_52EB↑o ...
.rodata:000000000000809C                 db    0
.rodata:000000000000809D ; const char asc_809D[2]
.rodata:000000000000809D asc_809D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000809D                                         ; quotearg_buffer_restyled:loc_46B3↑o ...
.rodata:000000000000809F ; const char asc_809F[2]
.rodata:000000000000809F asc_809F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000809F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000080A1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000080A9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020ABE8↓o
.rodata:00000000000080AF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020ABF0↓o
.rodata:00000000000080BC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020ABF8↓o
.rodata:00000000000080BC                                         ; .data.rel.ro:000000000020AC18↓o
.rodata:00000000000080C9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000080C9                                         ; DATA XREF: .data.rel.ro:000000000020AC00↓o
.rodata:00000000000080DD aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020AC10↓o
.rodata:00000000000080E5 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020AC28↓o
.rodata:00000000000080ED                 align 20h
.rodata:0000000000008100 jpt_4691        dd offset loc_543A - 8100h
.rodata:0000000000008100                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000008100                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000008100                 dd offset loc_4693 - 8100h ; jump table for switch statement
.rodata:0000000000008100                 dd offset loc_5668 - 8100h
.rodata:0000000000008100                 dd offset loc_5474 - 8100h
.rodata:0000000000008100                 dd offset loc_5264 - 8100h
.rodata:0000000000008100                 dd offset loc_52C0 - 8100h
.rodata:0000000000008100                 dd offset loc_5315 - 8100h
.rodata:0000000000008100                 dd offset loc_535A - 8100h
.rodata:0000000000008100                 dd offset loc_5394 - 8100h
.rodata:0000000000008100                 dd offset loc_5394 - 8100h
.rodata:0000000000008100                 dd offset loc_5394 - 8100h
.rodata:000000000000812C jpt_47EE        dd offset loc_4A10 - 812Ch, offset def_47EE - 812Ch, offset def_47EE - 812Ch
.rodata:000000000000812C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000812C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000812C                 dd offset def_47EE - 812Ch, offset def_47EE - 812Ch, offset def_47EE - 812Ch ; jump table for switch statement
.rodata:000000000000812C                 dd offset def_47EE - 812Ch, offset loc_4A50 - 812Ch, offset loc_4958 - 812Ch
.rodata:000000000000812C                 dd offset loc_4918 - 812Ch, offset loc_4AE0 - 812Ch, offset loc_4AD0 - 812Ch
.rodata:000000000000812C                 dd offset loc_4AC0 - 812Ch, offset loc_4AB0 - 812Ch, offset def_47EE - 812Ch
.rodata:000000000000812C                 dd offset def_47EE - 812Ch, offset def_47EE - 812Ch, offset def_47EE - 812Ch
.rodata:000000000000812C                 dd offset def_47EE - 812Ch, offset def_47EE - 812Ch, offset def_47EE - 812Ch
.rodata:000000000000812C                 dd offset def_47EE - 812Ch, offset def_47EE - 812Ch, offset def_47EE - 812Ch
.rodata:000000000000812C                 dd offset def_47EE - 812Ch, offset def_47EE - 812Ch, offset def_47EE - 812Ch
.rodata:000000000000812C                 dd offset def_47EE - 812Ch, offset def_47EE - 812Ch, offset def_47EE - 812Ch
.rodata:000000000000812C                 dd offset def_47EE - 812Ch, offset def_47EE - 812Ch, offset loc_4AA0 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A90 - 812Ch, offset loc_4A90 - 812Ch, offset loc_4A60 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A90 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A90 - 812Ch
.rodata:000000000000812C                 dd offset loc_48F3 - 812Ch, offset loc_4A90 - 812Ch, offset loc_4A90 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A90 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A90 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A90 - 812Ch, offset loc_4A90 - 812Ch, offset loc_4A90 - 812Ch
.rodata:000000000000812C                 dd offset loc_48C3 - 812Ch, offset def_47EE - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A90 - 812Ch, offset loc_4968 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A90 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A90 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch, offset loc_4A38 - 812Ch
.rodata:000000000000812C                 dd offset loc_47F3 - 812Ch, offset loc_4A90 - 812Ch, offset loc_47F3 - 812Ch
.rodata:000000000000812C                 dd offset loc_4A60 - 812Ch
.rodata:0000000000008328 jpt_4B7A        dd offset loc_4BE0 - 8328h, offset def_4B7A - 8328h, offset def_4B7A - 8328h
.rodata:0000000000008328                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000008328                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000008328                 dd offset def_4B7A - 8328h, offset def_4B7A - 8328h, offset def_4B7A - 8328h ; jump table for switch statement
.rodata:0000000000008328                 dd offset def_4B7A - 8328h, offset loc_4BD0 - 8328h, offset loc_4D20 - 8328h
.rodata:0000000000008328                 dd offset loc_4D08 - 8328h, offset loc_4BB8 - 8328h, offset loc_4CF8 - 8328h
.rodata:0000000000008328                 dd offset loc_4BA0 - 8328h, offset loc_4CE0 - 8328h, offset def_4B7A - 8328h
.rodata:0000000000008328                 dd offset def_4B7A - 8328h, offset def_4B7A - 8328h, offset def_4B7A - 8328h
.rodata:0000000000008328                 dd offset def_4B7A - 8328h, offset def_4B7A - 8328h, offset def_4B7A - 8328h
.rodata:0000000000008328                 dd offset def_4B7A - 8328h, offset def_4B7A - 8328h, offset def_4B7A - 8328h
.rodata:0000000000008328                 dd offset def_4B7A - 8328h, offset def_4B7A - 8328h, offset def_4B7A - 8328h
.rodata:0000000000008328                 dd offset def_4B7A - 8328h, offset def_4B7A - 8328h, offset def_4B7A - 8328h
.rodata:0000000000008328                 dd offset def_4B7A - 8328h, offset def_4B7A - 8328h, offset loc_4CC8 - 8328h
.rodata:0000000000008328                 dd offset loc_4CB0 - 8328h, offset loc_4CB0 - 8328h, offset loc_4C98 - 8328h
.rodata:0000000000008328                 dd offset loc_4CB0 - 8328h, offset loc_4C80 - 8328h, offset loc_4CB0 - 8328h
.rodata:0000000000008328                 dd offset loc_48F0 - 8328h, offset loc_4CB0 - 8328h, offset loc_4CB0 - 8328h
.rodata:0000000000008328                 dd offset loc_4CB0 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4CB0 - 8328h
.rodata:0000000000008328                 dd offset loc_4CB0 - 8328h, offset loc_4CB0 - 8328h, offset loc_4CB0 - 8328h
.rodata:0000000000008328                 dd offset loc_48C0 - 8328h, offset def_4B7A - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4CB0 - 8328h, offset loc_4B80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4CB0 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4CB0 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_4C80 - 8328h, offset loc_4C80 - 8328h, offset loc_4C80 - 8328h
.rodata:0000000000008328                 dd offset loc_47F0 - 8328h, offset loc_4CB0 - 8328h, offset loc_47F0 - 8328h
.rodata:0000000000008328                 dd offset loc_4C98 - 8328h
.rodata:0000000000008524                 align 20h
.rodata:0000000000008540                 public quoting_style_vals
.rodata:0000000000008540 quoting_style_vals db    0
.rodata:0000000000008541                 db    0
.rodata:0000000000008542                 db    0
.rodata:0000000000008543                 db    0
.rodata:0000000000008544                 db    1
.rodata:0000000000008545                 db    0
.rodata:0000000000008546                 db    0
.rodata:0000000000008547                 db    0
.rodata:0000000000008548                 db    2
.rodata:0000000000008549                 db    0
.rodata:000000000000854A                 db    0
.rodata:000000000000854B                 db    0
.rodata:000000000000854C                 db    3
.rodata:000000000000854D                 db    0
.rodata:000000000000854E                 db    0
.rodata:000000000000854F                 db    0
.rodata:0000000000008550                 db    4
.rodata:0000000000008551                 db    0
.rodata:0000000000008552                 db    0
.rodata:0000000000008553                 db    0
.rodata:0000000000008554                 db    5
.rodata:0000000000008555                 db    0
.rodata:0000000000008556                 db    0
.rodata:0000000000008557                 db    0
.rodata:0000000000008558                 db    6
.rodata:0000000000008559                 db    0
.rodata:000000000000855A                 db    0
.rodata:000000000000855B                 db    0
.rodata:000000000000855C                 db    7
.rodata:000000000000855D                 db    0
.rodata:000000000000855E                 db    0
.rodata:000000000000855F                 db    0
.rodata:0000000000008560                 db    8
.rodata:0000000000008561                 db    0
.rodata:0000000000008562                 db    0
.rodata:0000000000008563                 db    0
.rodata:0000000000008564                 db    9
.rodata:0000000000008565                 db    0
.rodata:0000000000008566                 db    0
.rodata:0000000000008567                 db    0
.rodata:0000000000008568 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000008574 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000857B ; const char aC_0[]
.rodata:000000000000857B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_61DC↑o
.rodata:000000000000857F ; const char aWrittenByS[]
.rodata:000000000000857F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000857F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000858F ; const char aWrittenBySAndS[]
.rodata:000000000000858F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000858F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000085A6 ; const char aWrittenBySSAnd[]
.rodata:00000000000085A6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000085A6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000085C2 ; const char aReportBugsToS[]
.rodata:00000000000085C2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000085C2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000085D7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000085D7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000085ED ; const char aSHomePageS[]
.rodata:00000000000085ED aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000085ED                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000008601                 align 8
.rodata:0000000000008608 ; const char aLicenseGplv3Gn[]
.rodata:0000000000008608 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000008608                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000008608                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000008608                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000008608                 db '.',0Ah
.rodata:0000000000008608                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000008608                 db 0Ah,0
.rodata:00000000000086D4                 align 8
.rodata:00000000000086D8 ; const char aWrittenBySSSAn[]
.rodata:00000000000086D8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000086D8                                         ; DATA XREF: version_etc_arn:loc_6430↑o
.rodata:00000000000086D8                 db 'and %s.',0Ah,0
.rodata:00000000000086F8 ; const char aWrittenBySSSSA[]
.rodata:00000000000086F8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000086F8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000086F8                 db '%s, and %s.',0Ah,0
.rodata:000000000000871C                 align 20h
.rodata:0000000000008720 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000008720 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008720                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000008720                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000008748 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000008748 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008748                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000008748                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000008774                 align 8
.rodata:0000000000008778 ; const char aWrittenBySSSSS[]
.rodata:0000000000008778 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008778                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000008778                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008778                 db 'and %s.',0Ah,0
.rodata:00000000000087A8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000087A8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000087A8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000087A8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000087A8                 db '%s, and %s.',0Ah,0
.rodata:00000000000087DC                 align 20h
.rodata:00000000000087E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000087E0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000087E0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000087E0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000881C                 align 20h
.rodata:0000000000008820 ; const char aGeneralHelpUsi[]
.rodata:0000000000008820 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000008820                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000008820                 db 0
.rodata:0000000000008861                 align 4
.rodata:0000000000008864 jpt_6244        dd offset loc_62C6 - 8864h
.rodata:0000000000008864                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000008864                                         ; version_etc_arn+9D↑r
.rodata:0000000000008864                 dd offset loc_6358 - 8864h ; jump table for switch statement
.rodata:0000000000008864                 dd offset loc_6398 - 8864h
.rodata:0000000000008864                 dd offset loc_63E0 - 8864h
.rodata:0000000000008864                 dd offset loc_6430 - 8864h
.rodata:0000000000008864                 dd offset loc_6488 - 8864h
.rodata:0000000000008864                 dd offset loc_64B8 - 8864h
.rodata:0000000000008864                 dd offset loc_6520 - 8864h
.rodata:0000000000008864                 dd offset loc_6250 - 8864h
.rodata:0000000000008864                 dd offset loc_6300 - 8864h
.rodata:000000000000888C                 align 20h
.rodata:00000000000088A0                 public version_etc_copyright
.rodata:00000000000088A0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000088A0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000088CF ; const char aMemoryExhauste[]
.rodata:00000000000088CF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000088E0 ; const char aCoreutils831Li[]
.rodata:00000000000088E0 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:00000000000088E0                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:0000000000008900 ; const char a0StrtolBaseStr[]
.rodata:0000000000008900 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000008900                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:0000000000008926                 align 8
.rodata:0000000000008928 jpt_6D56        dd offset loc_6EA6 - 8928h, offset def_6D56 - 8928h, offset def_6D56 - 8928h
.rodata:0000000000008928                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:0000000000008928                                         ; xstrtoumax+1CF↑r
.rodata:0000000000008928                 dd offset loc_6E83 - 8928h, offset def_6D56 - 8928h, offset loc_6EBC - 8928h ; jump table for switch statement
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset def_6D56 - 8928h, offset def_6D56 - 8928h
.rodata:0000000000008928                 dd offset loc_6E3F - 8928h, offset def_6D56 - 8928h, offset loc_6D58 - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset def_6D56 - 8928h, offset loc_6E60 - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset def_6D56 - 8928h, offset def_6D56 - 8928h
.rodata:0000000000008928                 dd offset loc_6E1F - 8928h, offset def_6D56 - 8928h, offset def_6D56 - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset def_6D56 - 8928h, offset loc_6DFA - 8928h
.rodata:0000000000008928                 dd offset loc_6DD4 - 8928h, offset def_6D56 - 8928h, offset def_6D56 - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset def_6D56 - 8928h, offset def_6D56 - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset def_6D56 - 8928h, offset loc_6DBD - 8928h
.rodata:0000000000008928                 dd offset loc_6D80 - 8928h, offset def_6D56 - 8928h, offset def_6D56 - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset loc_6EBC - 8928h, offset def_6D56 - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset def_6D56 - 8928h, offset loc_6E3F - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset loc_6D58 - 8928h, offset def_6D56 - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset def_6D56 - 8928h, offset def_6D56 - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset def_6D56 - 8928h, offset loc_6E1F - 8928h
.rodata:0000000000008928                 dd offset def_6D56 - 8928h, offset def_6D56 - 8928h, offset loc_6DA7 - 8928h
.rodata:0000000000008A00 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000008A00 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:0000000000008A00                                         ; DATA XREF: xstrtoumax:loc_6F05↑o
.rodata:0000000000008A0B aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000008A0D aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_7210↑o
.rodata:0000000000008A13 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000008A13                                         ; locale_charset:loc_7260↑o
.rodata:0000000000008A13 _rodata         ends
.rodata:0000000000008A13
LOAD:0000000000008A19 ; ===========================================================================
LOAD:0000000000008A19
LOAD:0000000000008A19 ; Segment type: Pure code
LOAD:0000000000008A19 ; Segment permissions: Read/Execute
LOAD:0000000000008A19 LOAD            segment byte public 'CODE' use64
LOAD:0000000000008A19                 assume cs:LOAD
LOAD:0000000000008A19                 ;org 8A19h
LOAD:0000000000008A19                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000008A19                 align 4
LOAD:0000000000008A19 LOAD            ends
LOAD:0000000000008A19
.eh_frame_hdr:0000000000008A1C ; ===========================================================================
.eh_frame_hdr:0000000000008A1C
.eh_frame_hdr:0000000000008A1C ; Segment type: Pure data
.eh_frame_hdr:0000000000008A1C ; Segment permissions: Read
.eh_frame_hdr:0000000000008A1C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000008A1C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000008A1C                 ;org 8A1Ch
.eh_frame_hdr:0000000000008A1C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000008A1D                 db  1Bh
.eh_frame_hdr:0000000000008A1E                 db    3
.eh_frame_hdr:0000000000008A1F                 db  3Bh ; ;
.eh_frame_hdr:0000000000008A20                 db 0C8h
.eh_frame_hdr:0000000000008A21                 db    3
.eh_frame_hdr:0000000000008A22                 db    0
.eh_frame_hdr:0000000000008A23                 db    0
.eh_frame_hdr:0000000000008A24                 db  78h ; x
.eh_frame_hdr:0000000000008A25                 db    0
.eh_frame_hdr:0000000000008A26                 db    0
.eh_frame_hdr:0000000000008A27                 db    0
.eh_frame_hdr:0000000000008A28                 db  64h ; d
.eh_frame_hdr:0000000000008A29                 db  8Bh
.eh_frame_hdr:0000000000008A2A                 db 0FFh
.eh_frame_hdr:0000000000008A2B                 db 0FFh
.eh_frame_hdr:0000000000008A2C                 db  14h
.eh_frame_hdr:0000000000008A2D                 db    4
.eh_frame_hdr:0000000000008A2E                 db    0
.eh_frame_hdr:0000000000008A2F                 db    0
.eh_frame_hdr:0000000000008A30                 db  94h
.eh_frame_hdr:0000000000008A31                 db  8Eh
.eh_frame_hdr:0000000000008A32                 db 0FFh
.eh_frame_hdr:0000000000008A33                 db 0FFh
.eh_frame_hdr:0000000000008A34                 db  3Ch ; <
.eh_frame_hdr:0000000000008A35                 db    4
.eh_frame_hdr:0000000000008A36                 db    0
.eh_frame_hdr:0000000000008A37                 db    0
.eh_frame_hdr:0000000000008A38                 db 0A4h
.eh_frame_hdr:0000000000008A39                 db  8Eh
.eh_frame_hdr:0000000000008A3A                 db 0FFh
.eh_frame_hdr:0000000000008A3B                 db 0FFh
.eh_frame_hdr:0000000000008A3C                 db 0D0h
.eh_frame_hdr:0000000000008A3D                 db    7
.eh_frame_hdr:0000000000008A3E                 db    0
.eh_frame_hdr:0000000000008A3F                 db    0
.eh_frame_hdr:0000000000008A40                 db 0D4h
.eh_frame_hdr:0000000000008A41                 db  99h
.eh_frame_hdr:0000000000008A42                 db 0FFh
.eh_frame_hdr:0000000000008A43                 db 0FFh
.eh_frame_hdr:0000000000008A44                 db 0E4h
.eh_frame_hdr:0000000000008A45                 db    3
.eh_frame_hdr:0000000000008A46                 db    0
.eh_frame_hdr:0000000000008A47                 db    0
.eh_frame_hdr:0000000000008A48                 db 0E4h
.eh_frame_hdr:0000000000008A49                 db  9Ah
.eh_frame_hdr:0000000000008A4A                 db 0FFh
.eh_frame_hdr:0000000000008A4B                 db 0FFh
.eh_frame_hdr:0000000000008A4C                 db  54h ; T
.eh_frame_hdr:0000000000008A4D                 db    4
.eh_frame_hdr:0000000000008A4E                 db    0
.eh_frame_hdr:0000000000008A4F                 db    0
.eh_frame_hdr:0000000000008A50                 db    4
.eh_frame_hdr:0000000000008A51                 db  9Bh
.eh_frame_hdr:0000000000008A52                 db 0FFh
.eh_frame_hdr:0000000000008A53                 db 0FFh
.eh_frame_hdr:0000000000008A54                 db  68h ; h
.eh_frame_hdr:0000000000008A55                 db    4
.eh_frame_hdr:0000000000008A56                 db    0
.eh_frame_hdr:0000000000008A57                 db    0
.eh_frame_hdr:0000000000008A58                 db  24h ; $
.eh_frame_hdr:0000000000008A59                 db  9Bh
.eh_frame_hdr:0000000000008A5A                 db 0FFh
.eh_frame_hdr:0000000000008A5B                 db 0FFh
.eh_frame_hdr:0000000000008A5C                 db  7Ch ; |
.eh_frame_hdr:0000000000008A5D                 db    4
.eh_frame_hdr:0000000000008A5E                 db    0
.eh_frame_hdr:0000000000008A5F                 db    0
.eh_frame_hdr:0000000000008A60                 db  44h ; D
.eh_frame_hdr:0000000000008A61                 db  9Bh
.eh_frame_hdr:0000000000008A62                 db 0FFh
.eh_frame_hdr:0000000000008A63                 db 0FFh
.eh_frame_hdr:0000000000008A64                 db  90h
.eh_frame_hdr:0000000000008A65                 db    4
.eh_frame_hdr:0000000000008A66                 db    0
.eh_frame_hdr:0000000000008A67                 db    0
.eh_frame_hdr:0000000000008A68                 db  64h ; d
.eh_frame_hdr:0000000000008A69                 db  9Bh
.eh_frame_hdr:0000000000008A6A                 db 0FFh
.eh_frame_hdr:0000000000008A6B                 db 0FFh
.eh_frame_hdr:0000000000008A6C                 db 0A4h
.eh_frame_hdr:0000000000008A6D                 db    4
.eh_frame_hdr:0000000000008A6E                 db    0
.eh_frame_hdr:0000000000008A6F                 db    0
.eh_frame_hdr:0000000000008A70                 db  74h ; t
.eh_frame_hdr:0000000000008A71                 db  9Bh
.eh_frame_hdr:0000000000008A72                 db 0FFh
.eh_frame_hdr:0000000000008A73                 db 0FFh
.eh_frame_hdr:0000000000008A74                 db 0B8h
.eh_frame_hdr:0000000000008A75                 db    4
.eh_frame_hdr:0000000000008A76                 db    0
.eh_frame_hdr:0000000000008A77                 db    0
.eh_frame_hdr:0000000000008A78                 db 0B4h
.eh_frame_hdr:0000000000008A79                 db  9Bh
.eh_frame_hdr:0000000000008A7A                 db 0FFh
.eh_frame_hdr:0000000000008A7B                 db 0FFh
.eh_frame_hdr:0000000000008A7C                 db 0CCh
.eh_frame_hdr:0000000000008A7D                 db    4
.eh_frame_hdr:0000000000008A7E                 db    0
.eh_frame_hdr:0000000000008A7F                 db    0
.eh_frame_hdr:0000000000008A80                 db 0C4h
.eh_frame_hdr:0000000000008A81                 db  9Bh
.eh_frame_hdr:0000000000008A82                 db 0FFh
.eh_frame_hdr:0000000000008A83                 db 0FFh
.eh_frame_hdr:0000000000008A84                 db 0E0h
.eh_frame_hdr:0000000000008A85                 db    4
.eh_frame_hdr:0000000000008A86                 db    0
.eh_frame_hdr:0000000000008A87                 db    0
.eh_frame_hdr:0000000000008A88                 db 0D4h
.eh_frame_hdr:0000000000008A89                 db  9Bh
.eh_frame_hdr:0000000000008A8A                 db 0FFh
.eh_frame_hdr:0000000000008A8B                 db 0FFh
.eh_frame_hdr:0000000000008A8C                 db 0F4h
.eh_frame_hdr:0000000000008A8D                 db    4
.eh_frame_hdr:0000000000008A8E                 db    0
.eh_frame_hdr:0000000000008A8F                 db    0
.eh_frame_hdr:0000000000008A90                 db 0E4h
.eh_frame_hdr:0000000000008A91                 db  9Bh
.eh_frame_hdr:0000000000008A92                 db 0FFh
.eh_frame_hdr:0000000000008A93                 db 0FFh
.eh_frame_hdr:0000000000008A94                 db    8
.eh_frame_hdr:0000000000008A95                 db    5
.eh_frame_hdr:0000000000008A96                 db    0
.eh_frame_hdr:0000000000008A97                 db    0
.eh_frame_hdr:0000000000008A98                 db  34h ; 4
.eh_frame_hdr:0000000000008A99                 db  9Ch
.eh_frame_hdr:0000000000008A9A                 db 0FFh
.eh_frame_hdr:0000000000008A9B                 db 0FFh
.eh_frame_hdr:0000000000008A9C                 db  1Ch
.eh_frame_hdr:0000000000008A9D                 db    5
.eh_frame_hdr:0000000000008A9E                 db    0
.eh_frame_hdr:0000000000008A9F                 db    0
.eh_frame_hdr:0000000000008AA0                 db  84h
.eh_frame_hdr:0000000000008AA1                 db  9Ch
.eh_frame_hdr:0000000000008AA2                 db 0FFh
.eh_frame_hdr:0000000000008AA3                 db 0FFh
.eh_frame_hdr:0000000000008AA4                 db  30h ; 0
.eh_frame_hdr:0000000000008AA5                 db    5
.eh_frame_hdr:0000000000008AA6                 db    0
.eh_frame_hdr:0000000000008AA7                 db    0
.eh_frame_hdr:0000000000008AA8                 db 0B4h
.eh_frame_hdr:0000000000008AA9                 db  9Ch
.eh_frame_hdr:0000000000008AAA                 db 0FFh
.eh_frame_hdr:0000000000008AAB                 db 0FFh
.eh_frame_hdr:0000000000008AAC                 db  44h ; D
.eh_frame_hdr:0000000000008AAD                 db    5
.eh_frame_hdr:0000000000008AAE                 db    0
.eh_frame_hdr:0000000000008AAF                 db    0
.eh_frame_hdr:0000000000008AB0                 db    4
.eh_frame_hdr:0000000000008AB1                 db  9Dh
.eh_frame_hdr:0000000000008AB2                 db 0FFh
.eh_frame_hdr:0000000000008AB3                 db 0FFh
.eh_frame_hdr:0000000000008AB4                 db  6Ch ; l
.eh_frame_hdr:0000000000008AB5                 db    5
.eh_frame_hdr:0000000000008AB6                 db    0
.eh_frame_hdr:0000000000008AB7                 db    0
.eh_frame_hdr:0000000000008AB8                 db  34h ; 4
.eh_frame_hdr:0000000000008AB9                 db  9Dh
.eh_frame_hdr:0000000000008ABA                 db 0FFh
.eh_frame_hdr:0000000000008ABB                 db 0FFh
.eh_frame_hdr:0000000000008ABC                 db  88h
.eh_frame_hdr:0000000000008ABD                 db    5
.eh_frame_hdr:0000000000008ABE                 db    0
.eh_frame_hdr:0000000000008ABF                 db    0
.eh_frame_hdr:0000000000008AC0                 db  64h ; d
.eh_frame_hdr:0000000000008AC1                 db  9Dh
.eh_frame_hdr:0000000000008AC2                 db 0FFh
.eh_frame_hdr:0000000000008AC3                 db 0FFh
.eh_frame_hdr:0000000000008AC4                 db 0A4h
.eh_frame_hdr:0000000000008AC5                 db    5
.eh_frame_hdr:0000000000008AC6                 db    0
.eh_frame_hdr:0000000000008AC7                 db    0
.eh_frame_hdr:0000000000008AC8                 db  94h
.eh_frame_hdr:0000000000008AC9                 db  9Dh
.eh_frame_hdr:0000000000008ACA                 db 0FFh
.eh_frame_hdr:0000000000008ACB                 db 0FFh
.eh_frame_hdr:0000000000008ACC                 db 0C0h
.eh_frame_hdr:0000000000008ACD                 db    5
.eh_frame_hdr:0000000000008ACE                 db    0
.eh_frame_hdr:0000000000008ACF                 db    0
.eh_frame_hdr:0000000000008AD0                 db 0E4h
.eh_frame_hdr:0000000000008AD1                 db  9Dh
.eh_frame_hdr:0000000000008AD2                 db 0FFh
.eh_frame_hdr:0000000000008AD3                 db 0FFh
.eh_frame_hdr:0000000000008AD4                 db 0D8h
.eh_frame_hdr:0000000000008AD5                 db    5
.eh_frame_hdr:0000000000008AD6                 db    0
.eh_frame_hdr:0000000000008AD7                 db    0
.eh_frame_hdr:0000000000008AD8                 db    4
.eh_frame_hdr:0000000000008AD9                 db  9Eh
.eh_frame_hdr:0000000000008ADA                 db 0FFh
.eh_frame_hdr:0000000000008ADB                 db 0FFh
.eh_frame_hdr:0000000000008ADC                 db 0F4h
.eh_frame_hdr:0000000000008ADD                 db    5
.eh_frame_hdr:0000000000008ADE                 db    0
.eh_frame_hdr:0000000000008ADF                 db    0
.eh_frame_hdr:0000000000008AE0                 db  34h ; 4
.eh_frame_hdr:0000000000008AE1                 db  9Eh
.eh_frame_hdr:0000000000008AE2                 db 0FFh
.eh_frame_hdr:0000000000008AE3                 db 0FFh
.eh_frame_hdr:0000000000008AE4                 db  10h
.eh_frame_hdr:0000000000008AE5                 db    6
.eh_frame_hdr:0000000000008AE6                 db    0
.eh_frame_hdr:0000000000008AE7                 db    0
.eh_frame_hdr:0000000000008AE8                 db  44h ; D
.eh_frame_hdr:0000000000008AE9                 db  9Eh
.eh_frame_hdr:0000000000008AEA                 db 0FFh
.eh_frame_hdr:0000000000008AEB                 db 0FFh
.eh_frame_hdr:0000000000008AEC                 db  24h ; $
.eh_frame_hdr:0000000000008AED                 db    6
.eh_frame_hdr:0000000000008AEE                 db    0
.eh_frame_hdr:0000000000008AEF                 db    0
.eh_frame_hdr:0000000000008AF0                 db  64h ; d
.eh_frame_hdr:0000000000008AF1                 db  9Eh
.eh_frame_hdr:0000000000008AF2                 db 0FFh
.eh_frame_hdr:0000000000008AF3                 db 0FFh
.eh_frame_hdr:0000000000008AF4                 db  40h ; @
.eh_frame_hdr:0000000000008AF5                 db    6
.eh_frame_hdr:0000000000008AF6                 db    0
.eh_frame_hdr:0000000000008AF7                 db    0
.eh_frame_hdr:0000000000008AF8                 db  94h
.eh_frame_hdr:0000000000008AF9                 db  9Eh
.eh_frame_hdr:0000000000008AFA                 db 0FFh
.eh_frame_hdr:0000000000008AFB                 db 0FFh
.eh_frame_hdr:0000000000008AFC                 db  5Ch ; \
.eh_frame_hdr:0000000000008AFD                 db    6
.eh_frame_hdr:0000000000008AFE                 db    0
.eh_frame_hdr:0000000000008AFF                 db    0
.eh_frame_hdr:0000000000008B00                 db 0A4h
.eh_frame_hdr:0000000000008B01                 db  9Eh
.eh_frame_hdr:0000000000008B02                 db 0FFh
.eh_frame_hdr:0000000000008B03                 db 0FFh
.eh_frame_hdr:0000000000008B04                 db  70h ; p
.eh_frame_hdr:0000000000008B05                 db    6
.eh_frame_hdr:0000000000008B06                 db    0
.eh_frame_hdr:0000000000008B07                 db    0
.eh_frame_hdr:0000000000008B08                 db  54h ; T
.eh_frame_hdr:0000000000008B09                 db  9Fh
.eh_frame_hdr:0000000000008B0A                 db 0FFh
.eh_frame_hdr:0000000000008B0B                 db 0FFh
.eh_frame_hdr:0000000000008B0C                 db  84h
.eh_frame_hdr:0000000000008B0D                 db    6
.eh_frame_hdr:0000000000008B0E                 db    0
.eh_frame_hdr:0000000000008B0F                 db    0
.eh_frame_hdr:0000000000008B10                 db  74h ; t
.eh_frame_hdr:0000000000008B11                 db 0A0h
.eh_frame_hdr:0000000000008B12                 db 0FFh
.eh_frame_hdr:0000000000008B13                 db 0FFh
.eh_frame_hdr:0000000000008B14                 db  98h
.eh_frame_hdr:0000000000008B15                 db    6
.eh_frame_hdr:0000000000008B16                 db    0
.eh_frame_hdr:0000000000008B17                 db    0
.eh_frame_hdr:0000000000008B18                 db    4
.eh_frame_hdr:0000000000008B19                 db 0A1h
.eh_frame_hdr:0000000000008B1A                 db 0FFh
.eh_frame_hdr:0000000000008B1B                 db 0FFh
.eh_frame_hdr:0000000000008B1C                 db 0ACh
.eh_frame_hdr:0000000000008B1D                 db    6
.eh_frame_hdr:0000000000008B1E                 db    0
.eh_frame_hdr:0000000000008B1F                 db    0
.eh_frame_hdr:0000000000008B20                 db 0B4h
.eh_frame_hdr:0000000000008B21                 db 0A1h
.eh_frame_hdr:0000000000008B22                 db 0FFh
.eh_frame_hdr:0000000000008B23                 db 0FFh
.eh_frame_hdr:0000000000008B24                 db 0C0h
.eh_frame_hdr:0000000000008B25                 db    6
.eh_frame_hdr:0000000000008B26                 db    0
.eh_frame_hdr:0000000000008B27                 db    0
.eh_frame_hdr:0000000000008B28                 db 0F4h
.eh_frame_hdr:0000000000008B29                 db 0A2h
.eh_frame_hdr:0000000000008B2A                 db 0FFh
.eh_frame_hdr:0000000000008B2B                 db 0FFh
.eh_frame_hdr:0000000000008B2C                 db 0FCh
.eh_frame_hdr:0000000000008B2D                 db    6
.eh_frame_hdr:0000000000008B2E                 db    0
.eh_frame_hdr:0000000000008B2F                 db    0
.eh_frame_hdr:0000000000008B30                 db  74h ; t
.eh_frame_hdr:0000000000008B31                 db 0A3h
.eh_frame_hdr:0000000000008B32                 db 0FFh
.eh_frame_hdr:0000000000008B33                 db 0FFh
.eh_frame_hdr:0000000000008B34                 db  28h ; (
.eh_frame_hdr:0000000000008B35                 db    7
.eh_frame_hdr:0000000000008B36                 db    0
.eh_frame_hdr:0000000000008B37                 db    0
.eh_frame_hdr:0000000000008B38                 db  64h ; d
.eh_frame_hdr:0000000000008B39                 db 0A4h
.eh_frame_hdr:0000000000008B3A                 db 0FFh
.eh_frame_hdr:0000000000008B3B                 db 0FFh
.eh_frame_hdr:0000000000008B3C                 db  78h ; x
.eh_frame_hdr:0000000000008B3D                 db    7
.eh_frame_hdr:0000000000008B3E                 db    0
.eh_frame_hdr:0000000000008B3F                 db    0
.eh_frame_hdr:0000000000008B40                 db  44h ; D
.eh_frame_hdr:0000000000008B41                 db 0A5h
.eh_frame_hdr:0000000000008B42                 db 0FFh
.eh_frame_hdr:0000000000008B43                 db 0FFh
.eh_frame_hdr:0000000000008B44                 db 0A4h
.eh_frame_hdr:0000000000008B45                 db    7
.eh_frame_hdr:0000000000008B46                 db    0
.eh_frame_hdr:0000000000008B47                 db    0
.eh_frame_hdr:0000000000008B48                 db  44h ; D
.eh_frame_hdr:0000000000008B49                 db 0AAh
.eh_frame_hdr:0000000000008B4A                 db 0FFh
.eh_frame_hdr:0000000000008B4B                 db 0FFh
.eh_frame_hdr:0000000000008B4C                 db  2Ch ; ,
.eh_frame_hdr:0000000000008B4D                 db    8
.eh_frame_hdr:0000000000008B4E                 db    0
.eh_frame_hdr:0000000000008B4F                 db    0
.eh_frame_hdr:0000000000008B50                 db 0F4h
.eh_frame_hdr:0000000000008B51                 db 0ABh
.eh_frame_hdr:0000000000008B52                 db 0FFh
.eh_frame_hdr:0000000000008B53                 db 0FFh
.eh_frame_hdr:0000000000008B54                 db  40h ; @
.eh_frame_hdr:0000000000008B55                 db    8
.eh_frame_hdr:0000000000008B56                 db    0
.eh_frame_hdr:0000000000008B57                 db    0
.eh_frame_hdr:0000000000008B58                 db  14h
.eh_frame_hdr:0000000000008B59                 db 0AEh
.eh_frame_hdr:0000000000008B5A                 db 0FFh
.eh_frame_hdr:0000000000008B5B                 db 0FFh
.eh_frame_hdr:0000000000008B5C                 db  54h ; T
.eh_frame_hdr:0000000000008B5D                 db    8
.eh_frame_hdr:0000000000008B5E                 db    0
.eh_frame_hdr:0000000000008B5F                 db    0
.eh_frame_hdr:0000000000008B60                 db 0A4h
.eh_frame_hdr:0000000000008B61                 db 0AEh
.eh_frame_hdr:0000000000008B62                 db 0FFh
.eh_frame_hdr:0000000000008B63                 db 0FFh
.eh_frame_hdr:0000000000008B64                 db 0A0h
.eh_frame_hdr:0000000000008B65                 db    8
.eh_frame_hdr:0000000000008B66                 db    0
.eh_frame_hdr:0000000000008B67                 db    0
.eh_frame_hdr:0000000000008B68                 db 0C4h
.eh_frame_hdr:0000000000008B69                 db 0AEh
.eh_frame_hdr:0000000000008B6A                 db 0FFh
.eh_frame_hdr:0000000000008B6B                 db 0FFh
.eh_frame_hdr:0000000000008B6C                 db 0B4h
.eh_frame_hdr:0000000000008B6D                 db    8
.eh_frame_hdr:0000000000008B6E                 db    0
.eh_frame_hdr:0000000000008B6F                 db    0
.eh_frame_hdr:0000000000008B70                 db 0D4h
.eh_frame_hdr:0000000000008B71                 db 0AEh
.eh_frame_hdr:0000000000008B72                 db 0FFh
.eh_frame_hdr:0000000000008B73                 db 0FFh
.eh_frame_hdr:0000000000008B74                 db 0C8h
.eh_frame_hdr:0000000000008B75                 db    8
.eh_frame_hdr:0000000000008B76                 db    0
.eh_frame_hdr:0000000000008B77                 db    0
.eh_frame_hdr:0000000000008B78                 db  84h
.eh_frame_hdr:0000000000008B79                 db 0B1h
.eh_frame_hdr:0000000000008B7A                 db 0FFh
.eh_frame_hdr:0000000000008B7B                 db 0FFh
.eh_frame_hdr:0000000000008B7C                 db  14h
.eh_frame_hdr:0000000000008B7D                 db    9
.eh_frame_hdr:0000000000008B7E                 db    0
.eh_frame_hdr:0000000000008B7F                 db    0
.eh_frame_hdr:0000000000008B80                 db  44h ; D
.eh_frame_hdr:0000000000008B81                 db 0B2h
.eh_frame_hdr:0000000000008B82                 db 0FFh
.eh_frame_hdr:0000000000008B83                 db 0FFh
.eh_frame_hdr:0000000000008B84                 db  5Ch ; \
.eh_frame_hdr:0000000000008B85                 db    9
.eh_frame_hdr:0000000000008B86                 db    0
.eh_frame_hdr:0000000000008B87                 db    0
.eh_frame_hdr:0000000000008B88                 db  54h ; T
.eh_frame_hdr:0000000000008B89                 db 0B3h
.eh_frame_hdr:0000000000008B8A                 db 0FFh
.eh_frame_hdr:0000000000008B8B                 db 0FFh
.eh_frame_hdr:0000000000008B8C                 db  70h ; p
.eh_frame_hdr:0000000000008B8D                 db    9
.eh_frame_hdr:0000000000008B8E                 db    0
.eh_frame_hdr:0000000000008B8F                 db    0
.eh_frame_hdr:0000000000008B90                 db  14h
.eh_frame_hdr:0000000000008B91                 db 0B5h
.eh_frame_hdr:0000000000008B92                 db 0FFh
.eh_frame_hdr:0000000000008B93                 db 0FFh
.eh_frame_hdr:0000000000008B94                 db  84h
.eh_frame_hdr:0000000000008B95                 db    9
.eh_frame_hdr:0000000000008B96                 db    0
.eh_frame_hdr:0000000000008B97                 db    0
.eh_frame_hdr:0000000000008B98                 db 0A4h
.eh_frame_hdr:0000000000008B99                 db 0B5h
.eh_frame_hdr:0000000000008B9A                 db 0FFh
.eh_frame_hdr:0000000000008B9B                 db 0FFh
.eh_frame_hdr:0000000000008B9C                 db 0D0h
.eh_frame_hdr:0000000000008B9D                 db    9
.eh_frame_hdr:0000000000008B9E                 db    0
.eh_frame_hdr:0000000000008B9F                 db    0
.eh_frame_hdr:0000000000008BA0                 db 0C4h
.eh_frame_hdr:0000000000008BA1                 db 0B5h
.eh_frame_hdr:0000000000008BA2                 db 0FFh
.eh_frame_hdr:0000000000008BA3                 db 0FFh
.eh_frame_hdr:0000000000008BA4                 db 0E4h
.eh_frame_hdr:0000000000008BA5                 db    9
.eh_frame_hdr:0000000000008BA6                 db    0
.eh_frame_hdr:0000000000008BA7                 db    0
.eh_frame_hdr:0000000000008BA8                 db 0D4h
.eh_frame_hdr:0000000000008BA9                 db 0B5h
.eh_frame_hdr:0000000000008BAA                 db 0FFh
.eh_frame_hdr:0000000000008BAB                 db 0FFh
.eh_frame_hdr:0000000000008BAC                 db 0F8h
.eh_frame_hdr:0000000000008BAD                 db    9
.eh_frame_hdr:0000000000008BAE                 db    0
.eh_frame_hdr:0000000000008BAF                 db    0
.eh_frame_hdr:0000000000008BB0                 db  84h
.eh_frame_hdr:0000000000008BB1                 db 0B8h
.eh_frame_hdr:0000000000008BB2                 db 0FFh
.eh_frame_hdr:0000000000008BB3                 db 0FFh
.eh_frame_hdr:0000000000008BB4                 db  44h ; D
.eh_frame_hdr:0000000000008BB5                 db  0Ah
.eh_frame_hdr:0000000000008BB6                 db    0
.eh_frame_hdr:0000000000008BB7                 db    0
.eh_frame_hdr:0000000000008BB8                 db  44h ; D
.eh_frame_hdr:0000000000008BB9                 db 0B9h
.eh_frame_hdr:0000000000008BBA                 db 0FFh
.eh_frame_hdr:0000000000008BBB                 db 0FFh
.eh_frame_hdr:0000000000008BBC                 db  8Ch
.eh_frame_hdr:0000000000008BBD                 db  0Ah
.eh_frame_hdr:0000000000008BBE                 db    0
.eh_frame_hdr:0000000000008BBF                 db    0
.eh_frame_hdr:0000000000008BC0                 db  54h ; T
.eh_frame_hdr:0000000000008BC1                 db 0B9h
.eh_frame_hdr:0000000000008BC2                 db 0FFh
.eh_frame_hdr:0000000000008BC3                 db 0FFh
.eh_frame_hdr:0000000000008BC4                 db 0A0h
.eh_frame_hdr:0000000000008BC5                 db  0Ah
.eh_frame_hdr:0000000000008BC6                 db    0
.eh_frame_hdr:0000000000008BC7                 db    0
.eh_frame_hdr:0000000000008BC8                 db  64h ; d
.eh_frame_hdr:0000000000008BC9                 db 0B9h
.eh_frame_hdr:0000000000008BCA                 db 0FFh
.eh_frame_hdr:0000000000008BCB                 db 0FFh
.eh_frame_hdr:0000000000008BCC                 db 0B4h
.eh_frame_hdr:0000000000008BCD                 db  0Ah
.eh_frame_hdr:0000000000008BCE                 db    0
.eh_frame_hdr:0000000000008BCF                 db    0
.eh_frame_hdr:0000000000008BD0                 db  14h
.eh_frame_hdr:0000000000008BD1                 db 0BAh
.eh_frame_hdr:0000000000008BD2                 db 0FFh
.eh_frame_hdr:0000000000008BD3                 db 0FFh
.eh_frame_hdr:0000000000008BD4                 db 0E4h
.eh_frame_hdr:0000000000008BD5                 db  0Ah
.eh_frame_hdr:0000000000008BD6                 db    0
.eh_frame_hdr:0000000000008BD7                 db    0
.eh_frame_hdr:0000000000008BD8                 db  24h ; $
.eh_frame_hdr:0000000000008BD9                 db 0BAh
.eh_frame_hdr:0000000000008BDA                 db 0FFh
.eh_frame_hdr:0000000000008BDB                 db 0FFh
.eh_frame_hdr:0000000000008BDC                 db 0F8h
.eh_frame_hdr:0000000000008BDD                 db  0Ah
.eh_frame_hdr:0000000000008BDE                 db    0
.eh_frame_hdr:0000000000008BDF                 db    0
.eh_frame_hdr:0000000000008BE0                 db  54h ; T
.eh_frame_hdr:0000000000008BE1                 db 0BAh
.eh_frame_hdr:0000000000008BE2                 db 0FFh
.eh_frame_hdr:0000000000008BE3                 db 0FFh
.eh_frame_hdr:0000000000008BE4                 db  14h
.eh_frame_hdr:0000000000008BE5                 db  0Bh
.eh_frame_hdr:0000000000008BE6                 db    0
.eh_frame_hdr:0000000000008BE7                 db    0
.eh_frame_hdr:0000000000008BE8                 db 0F4h
.eh_frame_hdr:0000000000008BE9                 db 0BAh
.eh_frame_hdr:0000000000008BEA                 db 0FFh
.eh_frame_hdr:0000000000008BEB                 db 0FFh
.eh_frame_hdr:0000000000008BEC                 db  34h ; 4
.eh_frame_hdr:0000000000008BED                 db  0Bh
.eh_frame_hdr:0000000000008BEE                 db    0
.eh_frame_hdr:0000000000008BEF                 db    0
.eh_frame_hdr:0000000000008BF0                 db 0E4h
.eh_frame_hdr:0000000000008BF1                 db 0BBh
.eh_frame_hdr:0000000000008BF2                 db 0FFh
.eh_frame_hdr:0000000000008BF3                 db 0FFh
.eh_frame_hdr:0000000000008BF4                 db  78h ; x
.eh_frame_hdr:0000000000008BF5                 db  0Bh
.eh_frame_hdr:0000000000008BF6                 db    0
.eh_frame_hdr:0000000000008BF7                 db    0
.eh_frame_hdr:0000000000008BF8                 db  24h ; $
.eh_frame_hdr:0000000000008BF9                 db 0CEh
.eh_frame_hdr:0000000000008BFA                 db 0FFh
.eh_frame_hdr:0000000000008BFB                 db 0FFh
.eh_frame_hdr:0000000000008BFC                 db 0F0h
.eh_frame_hdr:0000000000008BFD                 db  0Bh
.eh_frame_hdr:0000000000008BFE                 db    0
.eh_frame_hdr:0000000000008BFF                 db    0
.eh_frame_hdr:0000000000008C00                 db 0D4h
.eh_frame_hdr:0000000000008C01                 db 0CFh
.eh_frame_hdr:0000000000008C02                 db 0FFh
.eh_frame_hdr:0000000000008C03                 db 0FFh
.eh_frame_hdr:0000000000008C04                 db  5Ch ; \
.eh_frame_hdr:0000000000008C05                 db  0Ch
.eh_frame_hdr:0000000000008C06                 db    0
.eh_frame_hdr:0000000000008C07                 db    0
.eh_frame_hdr:0000000000008C08                 db  14h
.eh_frame_hdr:0000000000008C09                 db 0D0h
.eh_frame_hdr:0000000000008C0A                 db 0FFh
.eh_frame_hdr:0000000000008C0B                 db 0FFh
.eh_frame_hdr:0000000000008C0C                 db  88h
.eh_frame_hdr:0000000000008C0D                 db  0Ch
.eh_frame_hdr:0000000000008C0E                 db    0
.eh_frame_hdr:0000000000008C0F                 db    0
.eh_frame_hdr:0000000000008C10                 db  34h ; 4
.eh_frame_hdr:0000000000008C11                 db 0D0h
.eh_frame_hdr:0000000000008C12                 db 0FFh
.eh_frame_hdr:0000000000008C13                 db 0FFh
.eh_frame_hdr:0000000000008C14                 db  9Ch
.eh_frame_hdr:0000000000008C15                 db  0Ch
.eh_frame_hdr:0000000000008C16                 db    0
.eh_frame_hdr:0000000000008C17                 db    0
.eh_frame_hdr:0000000000008C18                 db  54h ; T
.eh_frame_hdr:0000000000008C19                 db 0D0h
.eh_frame_hdr:0000000000008C1A                 db 0FFh
.eh_frame_hdr:0000000000008C1B                 db 0FFh
.eh_frame_hdr:0000000000008C1C                 db 0B0h
.eh_frame_hdr:0000000000008C1D                 db  0Ch
.eh_frame_hdr:0000000000008C1E                 db    0
.eh_frame_hdr:0000000000008C1F                 db    0
.eh_frame_hdr:0000000000008C20                 db  94h
.eh_frame_hdr:0000000000008C21                 db 0D0h
.eh_frame_hdr:0000000000008C22                 db 0FFh
.eh_frame_hdr:0000000000008C23                 db 0FFh
.eh_frame_hdr:0000000000008C24                 db 0C4h
.eh_frame_hdr:0000000000008C25                 db  0Ch
.eh_frame_hdr:0000000000008C26                 db    0
.eh_frame_hdr:0000000000008C27                 db    0
.eh_frame_hdr:0000000000008C28                 db 0B4h
.eh_frame_hdr:0000000000008C29                 db 0D0h
.eh_frame_hdr:0000000000008C2A                 db 0FFh
.eh_frame_hdr:0000000000008C2B                 db 0FFh
.eh_frame_hdr:0000000000008C2C                 db 0D8h
.eh_frame_hdr:0000000000008C2D                 db  0Ch
.eh_frame_hdr:0000000000008C2E                 db    0
.eh_frame_hdr:0000000000008C2F                 db    0
.eh_frame_hdr:0000000000008C30                 db 0E4h
.eh_frame_hdr:0000000000008C31                 db 0D0h
.eh_frame_hdr:0000000000008C32                 db 0FFh
.eh_frame_hdr:0000000000008C33                 db 0FFh
.eh_frame_hdr:0000000000008C34                 db 0ECh
.eh_frame_hdr:0000000000008C35                 db  0Ch
.eh_frame_hdr:0000000000008C36                 db    0
.eh_frame_hdr:0000000000008C37                 db    0
.eh_frame_hdr:0000000000008C38                 db  64h ; d
.eh_frame_hdr:0000000000008C39                 db 0D1h
.eh_frame_hdr:0000000000008C3A                 db 0FFh
.eh_frame_hdr:0000000000008C3B                 db 0FFh
.eh_frame_hdr:0000000000008C3C                 db  40h ; @
.eh_frame_hdr:0000000000008C3D                 db  0Dh
.eh_frame_hdr:0000000000008C3E                 db    0
.eh_frame_hdr:0000000000008C3F                 db    0
.eh_frame_hdr:0000000000008C40                 db  54h ; T
.eh_frame_hdr:0000000000008C41                 db 0D2h
.eh_frame_hdr:0000000000008C42                 db 0FFh
.eh_frame_hdr:0000000000008C43                 db 0FFh
.eh_frame_hdr:0000000000008C44                 db 0ACh
.eh_frame_hdr:0000000000008C45                 db  0Dh
.eh_frame_hdr:0000000000008C46                 db    0
.eh_frame_hdr:0000000000008C47                 db    0
.eh_frame_hdr:0000000000008C48                 db  64h ; d
.eh_frame_hdr:0000000000008C49                 db 0D2h
.eh_frame_hdr:0000000000008C4A                 db 0FFh
.eh_frame_hdr:0000000000008C4B                 db 0FFh
.eh_frame_hdr:0000000000008C4C                 db 0C0h
.eh_frame_hdr:0000000000008C4D                 db  0Dh
.eh_frame_hdr:0000000000008C4E                 db    0
.eh_frame_hdr:0000000000008C4F                 db    0
.eh_frame_hdr:0000000000008C50                 db    4
.eh_frame_hdr:0000000000008C51                 db 0D3h
.eh_frame_hdr:0000000000008C52                 db 0FFh
.eh_frame_hdr:0000000000008C53                 db 0FFh
.eh_frame_hdr:0000000000008C54                 db 0ECh
.eh_frame_hdr:0000000000008C55                 db  0Dh
.eh_frame_hdr:0000000000008C56                 db    0
.eh_frame_hdr:0000000000008C57                 db    0
.eh_frame_hdr:0000000000008C58                 db  24h ; $
.eh_frame_hdr:0000000000008C59                 db 0D3h
.eh_frame_hdr:0000000000008C5A                 db 0FFh
.eh_frame_hdr:0000000000008C5B                 db 0FFh
.eh_frame_hdr:0000000000008C5C                 db    0
.eh_frame_hdr:0000000000008C5D                 db  0Eh
.eh_frame_hdr:0000000000008C5E                 db    0
.eh_frame_hdr:0000000000008C5F                 db    0
.eh_frame_hdr:0000000000008C60                 db  34h ; 4
.eh_frame_hdr:0000000000008C61                 db 0D3h
.eh_frame_hdr:0000000000008C62                 db 0FFh
.eh_frame_hdr:0000000000008C63                 db 0FFh
.eh_frame_hdr:0000000000008C64                 db  14h
.eh_frame_hdr:0000000000008C65                 db  0Eh
.eh_frame_hdr:0000000000008C66                 db    0
.eh_frame_hdr:0000000000008C67                 db    0
.eh_frame_hdr:0000000000008C68                 db  54h ; T
.eh_frame_hdr:0000000000008C69                 db 0D3h
.eh_frame_hdr:0000000000008C6A                 db 0FFh
.eh_frame_hdr:0000000000008C6B                 db 0FFh
.eh_frame_hdr:0000000000008C6C                 db  28h ; (
.eh_frame_hdr:0000000000008C6D                 db  0Eh
.eh_frame_hdr:0000000000008C6E                 db    0
.eh_frame_hdr:0000000000008C6F                 db    0
.eh_frame_hdr:0000000000008C70                 db  74h ; t
.eh_frame_hdr:0000000000008C71                 db 0D3h
.eh_frame_hdr:0000000000008C72                 db 0FFh
.eh_frame_hdr:0000000000008C73                 db 0FFh
.eh_frame_hdr:0000000000008C74                 db  3Ch ; <
.eh_frame_hdr:0000000000008C75                 db  0Eh
.eh_frame_hdr:0000000000008C76                 db    0
.eh_frame_hdr:0000000000008C77                 db    0
.eh_frame_hdr:0000000000008C78                 db    4
.eh_frame_hdr:0000000000008C79                 db 0D4h
.eh_frame_hdr:0000000000008C7A                 db 0FFh
.eh_frame_hdr:0000000000008C7B                 db 0FFh
.eh_frame_hdr:0000000000008C7C                 db  58h ; X
.eh_frame_hdr:0000000000008C7D                 db  0Eh
.eh_frame_hdr:0000000000008C7E                 db    0
.eh_frame_hdr:0000000000008C7F                 db    0
.eh_frame_hdr:0000000000008C80                 db  94h
.eh_frame_hdr:0000000000008C81                 db 0D4h
.eh_frame_hdr:0000000000008C82                 db 0FFh
.eh_frame_hdr:0000000000008C83                 db 0FFh
.eh_frame_hdr:0000000000008C84                 db  74h ; t
.eh_frame_hdr:0000000000008C85                 db  0Eh
.eh_frame_hdr:0000000000008C86                 db    0
.eh_frame_hdr:0000000000008C87                 db    0
.eh_frame_hdr:0000000000008C88                 db 0A4h
.eh_frame_hdr:0000000000008C89                 db 0D4h
.eh_frame_hdr:0000000000008C8A                 db 0FFh
.eh_frame_hdr:0000000000008C8B                 db 0FFh
.eh_frame_hdr:0000000000008C8C                 db  88h
.eh_frame_hdr:0000000000008C8D                 db  0Eh
.eh_frame_hdr:0000000000008C8E                 db    0
.eh_frame_hdr:0000000000008C8F                 db    0
.eh_frame_hdr:0000000000008C90                 db 0B4h
.eh_frame_hdr:0000000000008C91                 db 0D4h
.eh_frame_hdr:0000000000008C92                 db 0FFh
.eh_frame_hdr:0000000000008C93                 db 0FFh
.eh_frame_hdr:0000000000008C94                 db  9Ch
.eh_frame_hdr:0000000000008C95                 db  0Eh
.eh_frame_hdr:0000000000008C96                 db    0
.eh_frame_hdr:0000000000008C97                 db    0
.eh_frame_hdr:0000000000008C98                 db  54h ; T
.eh_frame_hdr:0000000000008C99                 db 0D5h
.eh_frame_hdr:0000000000008C9A                 db 0FFh
.eh_frame_hdr:0000000000008C9B                 db 0FFh
.eh_frame_hdr:0000000000008C9C                 db 0B8h
.eh_frame_hdr:0000000000008C9D                 db  0Eh
.eh_frame_hdr:0000000000008C9E                 db    0
.eh_frame_hdr:0000000000008C9F                 db    0
.eh_frame_hdr:0000000000008CA0                 db  64h ; d
.eh_frame_hdr:0000000000008CA1                 db 0D5h
.eh_frame_hdr:0000000000008CA2                 db 0FFh
.eh_frame_hdr:0000000000008CA3                 db 0FFh
.eh_frame_hdr:0000000000008CA4                 db 0CCh
.eh_frame_hdr:0000000000008CA5                 db  0Eh
.eh_frame_hdr:0000000000008CA6                 db    0
.eh_frame_hdr:0000000000008CA7                 db    0
.eh_frame_hdr:0000000000008CA8                 db  84h
.eh_frame_hdr:0000000000008CA9                 db 0D5h
.eh_frame_hdr:0000000000008CAA                 db 0FFh
.eh_frame_hdr:0000000000008CAB                 db 0FFh
.eh_frame_hdr:0000000000008CAC                 db 0E0h
.eh_frame_hdr:0000000000008CAD                 db  0Eh
.eh_frame_hdr:0000000000008CAE                 db    0
.eh_frame_hdr:0000000000008CAF                 db    0
.eh_frame_hdr:0000000000008CB0                 db  94h
.eh_frame_hdr:0000000000008CB1                 db 0D5h
.eh_frame_hdr:0000000000008CB2                 db 0FFh
.eh_frame_hdr:0000000000008CB3                 db 0FFh
.eh_frame_hdr:0000000000008CB4                 db 0F4h
.eh_frame_hdr:0000000000008CB5                 db  0Eh
.eh_frame_hdr:0000000000008CB6                 db    0
.eh_frame_hdr:0000000000008CB7                 db    0
.eh_frame_hdr:0000000000008CB8                 db  24h ; $
.eh_frame_hdr:0000000000008CB9                 db 0D6h
.eh_frame_hdr:0000000000008CBA                 db 0FFh
.eh_frame_hdr:0000000000008CBB                 db 0FFh
.eh_frame_hdr:0000000000008CBC                 db  10h
.eh_frame_hdr:0000000000008CBD                 db  0Fh
.eh_frame_hdr:0000000000008CBE                 db    0
.eh_frame_hdr:0000000000008CBF                 db    0
.eh_frame_hdr:0000000000008CC0                 db 0C4h
.eh_frame_hdr:0000000000008CC1                 db 0D6h
.eh_frame_hdr:0000000000008CC2                 db 0FFh
.eh_frame_hdr:0000000000008CC3                 db 0FFh
.eh_frame_hdr:0000000000008CC4                 db  2Ch ; ,
.eh_frame_hdr:0000000000008CC5                 db  0Fh
.eh_frame_hdr:0000000000008CC6                 db    0
.eh_frame_hdr:0000000000008CC7                 db    0
.eh_frame_hdr:0000000000008CC8                 db 0D4h
.eh_frame_hdr:0000000000008CC9                 db 0D6h
.eh_frame_hdr:0000000000008CCA                 db 0FFh
.eh_frame_hdr:0000000000008CCB                 db 0FFh
.eh_frame_hdr:0000000000008CCC                 db  40h ; @
.eh_frame_hdr:0000000000008CCD                 db  0Fh
.eh_frame_hdr:0000000000008CCE                 db    0
.eh_frame_hdr:0000000000008CCF                 db    0
.eh_frame_hdr:0000000000008CD0                 db 0F4h
.eh_frame_hdr:0000000000008CD1                 db 0D6h
.eh_frame_hdr:0000000000008CD2                 db 0FFh
.eh_frame_hdr:0000000000008CD3                 db 0FFh
.eh_frame_hdr:0000000000008CD4                 db  54h ; T
.eh_frame_hdr:0000000000008CD5                 db  0Fh
.eh_frame_hdr:0000000000008CD6                 db    0
.eh_frame_hdr:0000000000008CD7                 db    0
.eh_frame_hdr:0000000000008CD8                 db  14h
.eh_frame_hdr:0000000000008CD9                 db 0D7h
.eh_frame_hdr:0000000000008CDA                 db 0FFh
.eh_frame_hdr:0000000000008CDB                 db 0FFh
.eh_frame_hdr:0000000000008CDC                 db  68h ; h
.eh_frame_hdr:0000000000008CDD                 db  0Fh
.eh_frame_hdr:0000000000008CDE                 db    0
.eh_frame_hdr:0000000000008CDF                 db    0
.eh_frame_hdr:0000000000008CE0                 db  24h ; $
.eh_frame_hdr:0000000000008CE1                 db 0D7h
.eh_frame_hdr:0000000000008CE2                 db 0FFh
.eh_frame_hdr:0000000000008CE3                 db 0FFh
.eh_frame_hdr:0000000000008CE4                 db  7Ch ; |
.eh_frame_hdr:0000000000008CE5                 db  0Fh
.eh_frame_hdr:0000000000008CE6                 db    0
.eh_frame_hdr:0000000000008CE7                 db    0
.eh_frame_hdr:0000000000008CE8                 db  44h ; D
.eh_frame_hdr:0000000000008CE9                 db 0D7h
.eh_frame_hdr:0000000000008CEA                 db 0FFh
.eh_frame_hdr:0000000000008CEB                 db 0FFh
.eh_frame_hdr:0000000000008CEC                 db  90h
.eh_frame_hdr:0000000000008CED                 db  0Fh
.eh_frame_hdr:0000000000008CEE                 db    0
.eh_frame_hdr:0000000000008CEF                 db    0
.eh_frame_hdr:0000000000008CF0                 db  64h ; d
.eh_frame_hdr:0000000000008CF1                 db 0D7h
.eh_frame_hdr:0000000000008CF2                 db 0FFh
.eh_frame_hdr:0000000000008CF3                 db 0FFh
.eh_frame_hdr:0000000000008CF4                 db 0A4h
.eh_frame_hdr:0000000000008CF5                 db  0Fh
.eh_frame_hdr:0000000000008CF6                 db    0
.eh_frame_hdr:0000000000008CF7                 db    0
.eh_frame_hdr:0000000000008CF8                 db  84h
.eh_frame_hdr:0000000000008CF9                 db 0D7h
.eh_frame_hdr:0000000000008CFA                 db 0FFh
.eh_frame_hdr:0000000000008CFB                 db 0FFh
.eh_frame_hdr:0000000000008CFC                 db 0BCh
.eh_frame_hdr:0000000000008CFD                 db  0Fh
.eh_frame_hdr:0000000000008CFE                 db    0
.eh_frame_hdr:0000000000008CFF                 db    0
.eh_frame_hdr:0000000000008D00                 db 0A4h
.eh_frame_hdr:0000000000008D01                 db 0DBh
.eh_frame_hdr:0000000000008D02                 db 0FFh
.eh_frame_hdr:0000000000008D03                 db 0FFh
.eh_frame_hdr:0000000000008D04                 db 0D0h
.eh_frame_hdr:0000000000008D05                 db  10h
.eh_frame_hdr:0000000000008D06                 db    0
.eh_frame_hdr:0000000000008D07                 db    0
.eh_frame_hdr:0000000000008D08                 db 0C4h
.eh_frame_hdr:0000000000008D09                 db 0DBh
.eh_frame_hdr:0000000000008D0A                 db 0FFh
.eh_frame_hdr:0000000000008D0B                 db 0FFh
.eh_frame_hdr:0000000000008D0C                 db 0E4h
.eh_frame_hdr:0000000000008D0D                 db  10h
.eh_frame_hdr:0000000000008D0E                 db    0
.eh_frame_hdr:0000000000008D0F                 db    0
.eh_frame_hdr:0000000000008D10                 db  44h ; D
.eh_frame_hdr:0000000000008D11                 db 0DCh
.eh_frame_hdr:0000000000008D12                 db 0FFh
.eh_frame_hdr:0000000000008D13                 db 0FFh
.eh_frame_hdr:0000000000008D14                 db    0
.eh_frame_hdr:0000000000008D15                 db  11h
.eh_frame_hdr:0000000000008D16                 db    0
.eh_frame_hdr:0000000000008D17                 db    0
.eh_frame_hdr:0000000000008D18                 db  24h ; $
.eh_frame_hdr:0000000000008D19                 db 0DDh
.eh_frame_hdr:0000000000008D1A                 db 0FFh
.eh_frame_hdr:0000000000008D1B                 db 0FFh
.eh_frame_hdr:0000000000008D1C                 db  2Ch ; ,
.eh_frame_hdr:0000000000008D1D                 db  11h
.eh_frame_hdr:0000000000008D1E                 db    0
.eh_frame_hdr:0000000000008D1F                 db    0
.eh_frame_hdr:0000000000008D20                 db 0A4h
.eh_frame_hdr:0000000000008D21                 db 0DDh
.eh_frame_hdr:0000000000008D22                 db 0FFh
.eh_frame_hdr:0000000000008D23                 db 0FFh
.eh_frame_hdr:0000000000008D24                 db  4Ch ; L
.eh_frame_hdr:0000000000008D25                 db  11h
.eh_frame_hdr:0000000000008D26                 db    0
.eh_frame_hdr:0000000000008D27                 db    0
.eh_frame_hdr:0000000000008D28                 db 0C4h
.eh_frame_hdr:0000000000008D29                 db 0DDh
.eh_frame_hdr:0000000000008D2A                 db 0FFh
.eh_frame_hdr:0000000000008D2B                 db 0FFh
.eh_frame_hdr:0000000000008D2C                 db  68h ; h
.eh_frame_hdr:0000000000008D2D                 db  11h
.eh_frame_hdr:0000000000008D2E                 db    0
.eh_frame_hdr:0000000000008D2F                 db    0
.eh_frame_hdr:0000000000008D30                 db 0F4h
.eh_frame_hdr:0000000000008D31                 db 0DDh
.eh_frame_hdr:0000000000008D32                 db 0FFh
.eh_frame_hdr:0000000000008D33                 db 0FFh
.eh_frame_hdr:0000000000008D34                 db  7Ch ; |
.eh_frame_hdr:0000000000008D35                 db  11h
.eh_frame_hdr:0000000000008D36                 db    0
.eh_frame_hdr:0000000000008D37                 db    0
.eh_frame_hdr:0000000000008D38                 db    4
.eh_frame_hdr:0000000000008D39                 db 0DEh
.eh_frame_hdr:0000000000008D3A                 db 0FFh
.eh_frame_hdr:0000000000008D3B                 db 0FFh
.eh_frame_hdr:0000000000008D3C                 db  90h
.eh_frame_hdr:0000000000008D3D                 db  11h
.eh_frame_hdr:0000000000008D3E                 db    0
.eh_frame_hdr:0000000000008D3F                 db    0
.eh_frame_hdr:0000000000008D40                 db  44h ; D
.eh_frame_hdr:0000000000008D41                 db 0DEh
.eh_frame_hdr:0000000000008D42                 db 0FFh
.eh_frame_hdr:0000000000008D43                 db 0FFh
.eh_frame_hdr:0000000000008D44                 db 0B4h
.eh_frame_hdr:0000000000008D45                 db  11h
.eh_frame_hdr:0000000000008D46                 db    0
.eh_frame_hdr:0000000000008D47                 db    0
.eh_frame_hdr:0000000000008D48                 db  74h ; t
.eh_frame_hdr:0000000000008D49                 db 0DEh
.eh_frame_hdr:0000000000008D4A                 db 0FFh
.eh_frame_hdr:0000000000008D4B                 db 0FFh
.eh_frame_hdr:0000000000008D4C                 db 0C8h
.eh_frame_hdr:0000000000008D4D                 db  11h
.eh_frame_hdr:0000000000008D4E                 db    0
.eh_frame_hdr:0000000000008D4F                 db    0
.eh_frame_hdr:0000000000008D50                 db    4
.eh_frame_hdr:0000000000008D51                 db 0DFh
.eh_frame_hdr:0000000000008D52                 db 0FFh
.eh_frame_hdr:0000000000008D53                 db 0FFh
.eh_frame_hdr:0000000000008D54                 db 0E0h
.eh_frame_hdr:0000000000008D55                 db  11h
.eh_frame_hdr:0000000000008D56                 db    0
.eh_frame_hdr:0000000000008D57                 db    0
.eh_frame_hdr:0000000000008D58                 db  54h ; T
.eh_frame_hdr:0000000000008D59                 db 0DFh
.eh_frame_hdr:0000000000008D5A                 db 0FFh
.eh_frame_hdr:0000000000008D5B                 db 0FFh
.eh_frame_hdr:0000000000008D5C                 db 0F8h
.eh_frame_hdr:0000000000008D5D                 db  11h
.eh_frame_hdr:0000000000008D5E                 db    0
.eh_frame_hdr:0000000000008D5F                 db    0
.eh_frame_hdr:0000000000008D60                 db  74h ; t
.eh_frame_hdr:0000000000008D61                 db 0DFh
.eh_frame_hdr:0000000000008D62                 db 0FFh
.eh_frame_hdr:0000000000008D63                 db 0FFh
.eh_frame_hdr:0000000000008D64                 db  14h
.eh_frame_hdr:0000000000008D65                 db  12h
.eh_frame_hdr:0000000000008D66                 db    0
.eh_frame_hdr:0000000000008D67                 db    0
.eh_frame_hdr:0000000000008D68                 db 0A4h
.eh_frame_hdr:0000000000008D69                 db 0DFh
.eh_frame_hdr:0000000000008D6A                 db 0FFh
.eh_frame_hdr:0000000000008D6B                 db 0FFh
.eh_frame_hdr:0000000000008D6C                 db  30h ; 0
.eh_frame_hdr:0000000000008D6D                 db  12h
.eh_frame_hdr:0000000000008D6E                 db    0
.eh_frame_hdr:0000000000008D6F                 db    0
.eh_frame_hdr:0000000000008D70                 db 0D4h
.eh_frame_hdr:0000000000008D71                 db 0DFh
.eh_frame_hdr:0000000000008D72                 db 0FFh
.eh_frame_hdr:0000000000008D73                 db 0FFh
.eh_frame_hdr:0000000000008D74                 db  58h ; X
.eh_frame_hdr:0000000000008D75                 db  12h
.eh_frame_hdr:0000000000008D76                 db    0
.eh_frame_hdr:0000000000008D77                 db    0
.eh_frame_hdr:0000000000008D78                 db 0F4h
.eh_frame_hdr:0000000000008D79                 db 0DFh
.eh_frame_hdr:0000000000008D7A                 db 0FFh
.eh_frame_hdr:0000000000008D7B                 db 0FFh
.eh_frame_hdr:0000000000008D7C                 db  74h ; t
.eh_frame_hdr:0000000000008D7D                 db  12h
.eh_frame_hdr:0000000000008D7E                 db    0
.eh_frame_hdr:0000000000008D7F                 db    0
.eh_frame_hdr:0000000000008D80                 db  34h ; 4
.eh_frame_hdr:0000000000008D81                 db 0E0h
.eh_frame_hdr:0000000000008D82                 db 0FFh
.eh_frame_hdr:0000000000008D83                 db 0FFh
.eh_frame_hdr:0000000000008D84                 db  8Ch
.eh_frame_hdr:0000000000008D85                 db  12h
.eh_frame_hdr:0000000000008D86                 db    0
.eh_frame_hdr:0000000000008D87                 db    0
.eh_frame_hdr:0000000000008D88                 db  34h ; 4
.eh_frame_hdr:0000000000008D89                 db 0E1h
.eh_frame_hdr:0000000000008D8A                 db 0FFh
.eh_frame_hdr:0000000000008D8B                 db 0FFh
.eh_frame_hdr:0000000000008D8C                 db 0D8h
.eh_frame_hdr:0000000000008D8D                 db  12h
.eh_frame_hdr:0000000000008D8E                 db    0
.eh_frame_hdr:0000000000008D8F                 db    0
.eh_frame_hdr:0000000000008D90                 db  64h ; d
.eh_frame_hdr:0000000000008D91                 db 0E1h
.eh_frame_hdr:0000000000008D92                 db 0FFh
.eh_frame_hdr:0000000000008D93                 db 0FFh
.eh_frame_hdr:0000000000008D94                 db 0F4h
.eh_frame_hdr:0000000000008D95                 db  12h
.eh_frame_hdr:0000000000008D96                 db    0
.eh_frame_hdr:0000000000008D97                 db    0
.eh_frame_hdr:0000000000008D98                 db  84h
.eh_frame_hdr:0000000000008D99                 db 0E5h
.eh_frame_hdr:0000000000008D9A                 db 0FFh
.eh_frame_hdr:0000000000008D9B                 db 0FFh
.eh_frame_hdr:0000000000008D9C                 db  44h ; D
.eh_frame_hdr:0000000000008D9D                 db  13h
.eh_frame_hdr:0000000000008D9E                 db    0
.eh_frame_hdr:0000000000008D9F                 db    0
.eh_frame_hdr:0000000000008DA0                 db    4
.eh_frame_hdr:0000000000008DA1                 db 0E6h
.eh_frame_hdr:0000000000008DA2                 db 0FFh
.eh_frame_hdr:0000000000008DA3                 db 0FFh
.eh_frame_hdr:0000000000008DA4                 db  7Ch ; |
.eh_frame_hdr:0000000000008DA5                 db  13h
.eh_frame_hdr:0000000000008DA6                 db    0
.eh_frame_hdr:0000000000008DA7                 db    0
.eh_frame_hdr:0000000000008DA8                 db  44h ; D
.eh_frame_hdr:0000000000008DA9                 db 0E6h
.eh_frame_hdr:0000000000008DAA                 db 0FFh
.eh_frame_hdr:0000000000008DAB                 db 0FFh
.eh_frame_hdr:0000000000008DAC                 db  9Ch
.eh_frame_hdr:0000000000008DAD                 db  13h
.eh_frame_hdr:0000000000008DAE                 db    0
.eh_frame_hdr:0000000000008DAF                 db    0
.eh_frame_hdr:0000000000008DB0                 db 0A4h
.eh_frame_hdr:0000000000008DB1                 db 0E6h
.eh_frame_hdr:0000000000008DB2                 db 0FFh
.eh_frame_hdr:0000000000008DB3                 db 0FFh
.eh_frame_hdr:0000000000008DB4                 db 0CCh
.eh_frame_hdr:0000000000008DB5                 db  13h
.eh_frame_hdr:0000000000008DB6                 db    0
.eh_frame_hdr:0000000000008DB7                 db    0
.eh_frame_hdr:0000000000008DB8                 db  34h ; 4
.eh_frame_hdr:0000000000008DB9                 db 0E7h
.eh_frame_hdr:0000000000008DBA                 db 0FFh
.eh_frame_hdr:0000000000008DBB                 db 0FFh
.eh_frame_hdr:0000000000008DBC                 db  0Ch
.eh_frame_hdr:0000000000008DBD                 db  14h
.eh_frame_hdr:0000000000008DBE                 db    0
.eh_frame_hdr:0000000000008DBF                 db    0
.eh_frame_hdr:0000000000008DC0                 db 0B4h
.eh_frame_hdr:0000000000008DC1                 db 0E7h
.eh_frame_hdr:0000000000008DC2                 db 0FFh
.eh_frame_hdr:0000000000008DC3                 db 0FFh
.eh_frame_hdr:0000000000008DC4                 db  5Ch ; \
.eh_frame_hdr:0000000000008DC5                 db  14h
.eh_frame_hdr:0000000000008DC6                 db    0
.eh_frame_hdr:0000000000008DC7                 db    0
.eh_frame_hdr:0000000000008DC8                 db  14h
.eh_frame_hdr:0000000000008DC9                 db 0E8h
.eh_frame_hdr:0000000000008DCA                 db 0FFh
.eh_frame_hdr:0000000000008DCB                 db 0FFh
.eh_frame_hdr:0000000000008DCC                 db  7Ch ; |
.eh_frame_hdr:0000000000008DCD                 db  14h
.eh_frame_hdr:0000000000008DCE                 db    0
.eh_frame_hdr:0000000000008DCF                 db    0
.eh_frame_hdr:0000000000008DD0                 db  54h ; T
.eh_frame_hdr:0000000000008DD1                 db 0E8h
.eh_frame_hdr:0000000000008DD2                 db 0FFh
.eh_frame_hdr:0000000000008DD3                 db 0FFh
.eh_frame_hdr:0000000000008DD4                 db  9Ch
.eh_frame_hdr:0000000000008DD5                 db  14h
.eh_frame_hdr:0000000000008DD6                 db    0
.eh_frame_hdr:0000000000008DD7                 db    0
.eh_frame_hdr:0000000000008DD8                 db 0C4h
.eh_frame_hdr:0000000000008DD9                 db 0E8h
.eh_frame_hdr:0000000000008DDA                 db 0FFh
.eh_frame_hdr:0000000000008DDB                 db 0FFh
.eh_frame_hdr:0000000000008DDC                 db 0E4h
.eh_frame_hdr:0000000000008DDD                 db  14h
.eh_frame_hdr:0000000000008DDE                 db    0
.eh_frame_hdr:0000000000008DDF                 db    0
.eh_frame_hdr:0000000000008DE0                 db 0D4h
.eh_frame_hdr:0000000000008DE1                 db 0E8h
.eh_frame_hdr:0000000000008DE2                 db 0FFh
.eh_frame_hdr:0000000000008DE3                 db 0FFh
.eh_frame_hdr:0000000000008DE4                 db 0FCh
.eh_frame_hdr:0000000000008DE5                 db  14h
.eh_frame_hdr:0000000000008DE6                 db    0
.eh_frame_hdr:0000000000008DE7                 db    0
.eh_frame_hdr:0000000000008DE7 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000008DE7
.eh_frame:0000000000008DE8 ; ===========================================================================
.eh_frame:0000000000008DE8
.eh_frame:0000000000008DE8 ; Segment type: Pure data
.eh_frame:0000000000008DE8 ; Segment permissions: Read
.eh_frame:0000000000008DE8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000008DE8                 assume cs:_eh_frame
.eh_frame:0000000000008DE8                 ;org 8DE8h
.eh_frame:0000000000008DE8                 db  14h
.eh_frame:0000000000008DE9                 db    0
.eh_frame:0000000000008DEA                 db    0
.eh_frame:0000000000008DEB                 db    0
.eh_frame:0000000000008DEC                 db    0
.eh_frame:0000000000008DED                 db    0
.eh_frame:0000000000008DEE                 db    0
.eh_frame:0000000000008DEF                 db    0
.eh_frame:0000000000008DF0                 db    1
.eh_frame:0000000000008DF1                 db  7Ah ; z
.eh_frame:0000000000008DF2                 db  52h ; R
.eh_frame:0000000000008DF3                 db    0
.eh_frame:0000000000008DF4                 db    1
.eh_frame:0000000000008DF5                 db  78h ; x
.eh_frame:0000000000008DF6                 db  10h
.eh_frame:0000000000008DF7                 db    1
.eh_frame:0000000000008DF8                 db  1Bh
.eh_frame:0000000000008DF9                 db  0Ch
.eh_frame:0000000000008DFA                 db    7
.eh_frame:0000000000008DFB                 db    8
.eh_frame:0000000000008DFC                 db  90h
.eh_frame:0000000000008DFD                 db    1
.eh_frame:0000000000008DFE                 db    7
.eh_frame:0000000000008DFF                 db  10h
.eh_frame:0000000000008E00                 db  14h
.eh_frame:0000000000008E01                 db    0
.eh_frame:0000000000008E02                 db    0
.eh_frame:0000000000008E03                 db    0
.eh_frame:0000000000008E04                 db  1Ch
.eh_frame:0000000000008E05                 db    0
.eh_frame:0000000000008E06                 db    0
.eh_frame:0000000000008E07                 db    0
.eh_frame:0000000000008E08                 db 0E8h
.eh_frame:0000000000008E09                 db  95h
.eh_frame:0000000000008E0A                 db 0FFh
.eh_frame:0000000000008E0B                 db 0FFh
.eh_frame:0000000000008E0C                 db  2Bh ; +
.eh_frame:0000000000008E0D                 db    0
.eh_frame:0000000000008E0E                 db    0
.eh_frame:0000000000008E0F                 db    0
.eh_frame:0000000000008E10                 db    0
.eh_frame:0000000000008E11                 db    0
.eh_frame:0000000000008E12                 db    0
.eh_frame:0000000000008E13                 db    0
.eh_frame:0000000000008E14                 db    0
.eh_frame:0000000000008E15                 db    0
.eh_frame:0000000000008E16                 db    0
.eh_frame:0000000000008E17                 db    0
.eh_frame:0000000000008E18                 db  14h
.eh_frame:0000000000008E19                 db    0
.eh_frame:0000000000008E1A                 db    0
.eh_frame:0000000000008E1B                 db    0
.eh_frame:0000000000008E1C                 db    0
.eh_frame:0000000000008E1D                 db    0
.eh_frame:0000000000008E1E                 db    0
.eh_frame:0000000000008E1F                 db    0
.eh_frame:0000000000008E20                 db    1
.eh_frame:0000000000008E21                 db  7Ah ; z
.eh_frame:0000000000008E22                 db  52h ; R
.eh_frame:0000000000008E23                 db    0
.eh_frame:0000000000008E24                 db    1
.eh_frame:0000000000008E25                 db  78h ; x
.eh_frame:0000000000008E26                 db  10h
.eh_frame:0000000000008E27                 db    1
.eh_frame:0000000000008E28                 db  1Bh
.eh_frame:0000000000008E29                 db  0Ch
.eh_frame:0000000000008E2A                 db    7
.eh_frame:0000000000008E2B                 db    8
.eh_frame:0000000000008E2C                 db  90h
.eh_frame:0000000000008E2D                 db    1
.eh_frame:0000000000008E2E                 db    0
.eh_frame:0000000000008E2F                 db    0
.eh_frame:0000000000008E30                 db  24h ; $
.eh_frame:0000000000008E31                 db    0
.eh_frame:0000000000008E32                 db    0
.eh_frame:0000000000008E33                 db    0
.eh_frame:0000000000008E34                 db  1Ch
.eh_frame:0000000000008E35                 db    0
.eh_frame:0000000000008E36                 db    0
.eh_frame:0000000000008E37                 db    0
.eh_frame:0000000000008E38                 db  48h ; H
.eh_frame:0000000000008E39                 db  87h
.eh_frame:0000000000008E3A                 db 0FFh
.eh_frame:0000000000008E3B                 db 0FFh
.eh_frame:0000000000008E3C                 db  30h ; 0
.eh_frame:0000000000008E3D                 db    3
.eh_frame:0000000000008E3E                 db    0
.eh_frame:0000000000008E3F                 db    0
.eh_frame:0000000000008E40                 db    0
.eh_frame:0000000000008E41                 db  0Eh
.eh_frame:0000000000008E42                 db  10h
.eh_frame:0000000000008E43                 db  46h ; F
.eh_frame:0000000000008E44                 db  0Eh
.eh_frame:0000000000008E45                 db  18h
.eh_frame:0000000000008E46                 db  4Ah ; J
.eh_frame:0000000000008E47                 db  0Fh
.eh_frame:0000000000008E48                 db  0Bh
.eh_frame:0000000000008E49                 db  77h ; w
.eh_frame:0000000000008E4A                 db    8
.eh_frame:0000000000008E4B                 db  80h
.eh_frame:0000000000008E4C                 db    0
.eh_frame:0000000000008E4D                 db  3Fh ; ?
.eh_frame:0000000000008E4E                 db  1Ah
.eh_frame:0000000000008E4F                 db  3Bh ; ;
.eh_frame:0000000000008E50                 db  2Ah ; *
.eh_frame:0000000000008E51                 db  33h ; 3
.eh_frame:0000000000008E52                 db  24h ; $
.eh_frame:0000000000008E53                 db  22h ; "
.eh_frame:0000000000008E54                 db    0
.eh_frame:0000000000008E55                 db    0
.eh_frame:0000000000008E56                 db    0
.eh_frame:0000000000008E57                 db    0
.eh_frame:0000000000008E58                 db  14h
.eh_frame:0000000000008E59                 db    0
.eh_frame:0000000000008E5A                 db    0
.eh_frame:0000000000008E5B                 db    0
.eh_frame:0000000000008E5C                 db  44h ; D
.eh_frame:0000000000008E5D                 db    0
.eh_frame:0000000000008E5E                 db    0
.eh_frame:0000000000008E5F                 db    0
.eh_frame:0000000000008E60                 db  50h ; P
.eh_frame:0000000000008E61                 db  8Ah
.eh_frame:0000000000008E62                 db 0FFh
.eh_frame:0000000000008E63                 db 0FFh
.eh_frame:0000000000008E64                 db    8
.eh_frame:0000000000008E65                 db    0
.eh_frame:0000000000008E66                 db    0
.eh_frame:0000000000008E67                 db    0
.eh_frame:0000000000008E68                 db    0
.eh_frame:0000000000008E69                 db    0
.eh_frame:0000000000008E6A                 db    0
.eh_frame:0000000000008E6B                 db    0
.eh_frame:0000000000008E6C                 db    0
.eh_frame:0000000000008E6D                 db    0
.eh_frame:0000000000008E6E                 db    0
.eh_frame:0000000000008E6F                 db    0
.eh_frame:0000000000008E70                 db  10h
.eh_frame:0000000000008E71                 db    0
.eh_frame:0000000000008E72                 db    0
.eh_frame:0000000000008E73                 db    0
.eh_frame:0000000000008E74                 db  5Ch ; \
.eh_frame:0000000000008E75                 db    0
.eh_frame:0000000000008E76                 db    0
.eh_frame:0000000000008E77                 db    0
.eh_frame:0000000000008E78                 db  88h
.eh_frame:0000000000008E79                 db  96h
.eh_frame:0000000000008E7A                 db 0FFh
.eh_frame:0000000000008E7B                 db 0FFh
.eh_frame:0000000000008E7C                 db  19h
.eh_frame:0000000000008E7D                 db    0
.eh_frame:0000000000008E7E                 db    0
.eh_frame:0000000000008E7F                 db    0
.eh_frame:0000000000008E80                 db    0
.eh_frame:0000000000008E81                 db    0
.eh_frame:0000000000008E82                 db    0
.eh_frame:0000000000008E83                 db    0
.eh_frame:0000000000008E84                 db  10h
.eh_frame:0000000000008E85                 db    0
.eh_frame:0000000000008E86                 db    0
.eh_frame:0000000000008E87                 db    0
.eh_frame:0000000000008E88                 db  70h ; p
.eh_frame:0000000000008E89                 db    0
.eh_frame:0000000000008E8A                 db    0
.eh_frame:0000000000008E8B                 db    0
.eh_frame:0000000000008E8C                 db  94h
.eh_frame:0000000000008E8D                 db  96h
.eh_frame:0000000000008E8E                 db 0FFh
.eh_frame:0000000000008E8F                 db 0FFh
.eh_frame:0000000000008E90                 db  1Bh
.eh_frame:0000000000008E91                 db    0
.eh_frame:0000000000008E92                 db    0
.eh_frame:0000000000008E93                 db    0
.eh_frame:0000000000008E94                 db    0
.eh_frame:0000000000008E95                 db    0
.eh_frame:0000000000008E96                 db    0
.eh_frame:0000000000008E97                 db    0
.eh_frame:0000000000008E98                 db  10h
.eh_frame:0000000000008E99                 db    0
.eh_frame:0000000000008E9A                 db    0
.eh_frame:0000000000008E9B                 db    0
.eh_frame:0000000000008E9C                 db  84h
.eh_frame:0000000000008E9D                 db    0
.eh_frame:0000000000008E9E                 db    0
.eh_frame:0000000000008E9F                 db    0
.eh_frame:0000000000008EA0                 db 0A0h
.eh_frame:0000000000008EA1                 db  96h
.eh_frame:0000000000008EA2                 db 0FFh
.eh_frame:0000000000008EA3                 db 0FFh
.eh_frame:0000000000008EA4                 db  15h
.eh_frame:0000000000008EA5                 db    0
.eh_frame:0000000000008EA6                 db    0
.eh_frame:0000000000008EA7                 db    0
.eh_frame:0000000000008EA8                 db    0
.eh_frame:0000000000008EA9                 db    0
.eh_frame:0000000000008EAA                 db    0
.eh_frame:0000000000008EAB                 db    0
.eh_frame:0000000000008EAC                 db  10h
.eh_frame:0000000000008EAD                 db    0
.eh_frame:0000000000008EAE                 db    0
.eh_frame:0000000000008EAF                 db    0
.eh_frame:0000000000008EB0                 db  98h
.eh_frame:0000000000008EB1                 db    0
.eh_frame:0000000000008EB2                 db    0
.eh_frame:0000000000008EB3                 db    0
.eh_frame:0000000000008EB4                 db 0ACh
.eh_frame:0000000000008EB5                 db  96h
.eh_frame:0000000000008EB6                 db 0FFh
.eh_frame:0000000000008EB7                 db 0FFh
.eh_frame:0000000000008EB8                 db  15h
.eh_frame:0000000000008EB9                 db    0
.eh_frame:0000000000008EBA                 db    0
.eh_frame:0000000000008EBB                 db    0
.eh_frame:0000000000008EBC                 db    0
.eh_frame:0000000000008EBD                 db    0
.eh_frame:0000000000008EBE                 db    0
.eh_frame:0000000000008EBF                 db    0
.eh_frame:0000000000008EC0                 db  10h
.eh_frame:0000000000008EC1                 db    0
.eh_frame:0000000000008EC2                 db    0
.eh_frame:0000000000008EC3                 db    0
.eh_frame:0000000000008EC4                 db 0ACh
.eh_frame:0000000000008EC5                 db    0
.eh_frame:0000000000008EC6                 db    0
.eh_frame:0000000000008EC7                 db    0
.eh_frame:0000000000008EC8                 db 0B8h
.eh_frame:0000000000008EC9                 db  96h
.eh_frame:0000000000008ECA                 db 0FFh
.eh_frame:0000000000008ECB                 db 0FFh
.eh_frame:0000000000008ECC                 db    4
.eh_frame:0000000000008ECD                 db    0
.eh_frame:0000000000008ECE                 db    0
.eh_frame:0000000000008ECF                 db    0
.eh_frame:0000000000008ED0                 db    0
.eh_frame:0000000000008ED1                 db    0
.eh_frame:0000000000008ED2                 db    0
.eh_frame:0000000000008ED3                 db    0
.eh_frame:0000000000008ED4                 db  10h
.eh_frame:0000000000008ED5                 db    0
.eh_frame:0000000000008ED6                 db    0
.eh_frame:0000000000008ED7                 db    0
.eh_frame:0000000000008ED8                 db 0C0h
.eh_frame:0000000000008ED9                 db    0
.eh_frame:0000000000008EDA                 db    0
.eh_frame:0000000000008EDB                 db    0
.eh_frame:0000000000008EDC                 db 0B4h
.eh_frame:0000000000008EDD                 db  96h
.eh_frame:0000000000008EDE                 db 0FFh
.eh_frame:0000000000008EDF                 db 0FFh
.eh_frame:0000000000008EE0                 db  3Dh ; =
.eh_frame:0000000000008EE1                 db    0
.eh_frame:0000000000008EE2                 db    0
.eh_frame:0000000000008EE3                 db    0
.eh_frame:0000000000008EE4                 db    0
.eh_frame:0000000000008EE5                 db    0
.eh_frame:0000000000008EE6                 db    0
.eh_frame:0000000000008EE7                 db    0
.eh_frame:0000000000008EE8                 db  10h
.eh_frame:0000000000008EE9                 db    0
.eh_frame:0000000000008EEA                 db    0
.eh_frame:0000000000008EEB                 db    0
.eh_frame:0000000000008EEC                 db 0D4h
.eh_frame:0000000000008EED                 db    0
.eh_frame:0000000000008EEE                 db    0
.eh_frame:0000000000008EEF                 db    0
.eh_frame:0000000000008EF0                 db 0E0h
.eh_frame:0000000000008EF1                 db  96h
.eh_frame:0000000000008EF2                 db 0FFh
.eh_frame:0000000000008EF3                 db 0FFh
.eh_frame:0000000000008EF4                 db  0Fh
.eh_frame:0000000000008EF5                 db    0
.eh_frame:0000000000008EF6                 db    0
.eh_frame:0000000000008EF7                 db    0
.eh_frame:0000000000008EF8                 db    0
.eh_frame:0000000000008EF9                 db    0
.eh_frame:0000000000008EFA                 db    0
.eh_frame:0000000000008EFB                 db    0
.eh_frame:0000000000008EFC                 db  10h
.eh_frame:0000000000008EFD                 db    0
.eh_frame:0000000000008EFE                 db    0
.eh_frame:0000000000008EFF                 db    0
.eh_frame:0000000000008F00                 db 0E8h
.eh_frame:0000000000008F01                 db    0
.eh_frame:0000000000008F02                 db    0
.eh_frame:0000000000008F03                 db    0
.eh_frame:0000000000008F04                 db 0DCh
.eh_frame:0000000000008F05                 db  96h
.eh_frame:0000000000008F06                 db 0FFh
.eh_frame:0000000000008F07                 db 0FFh
.eh_frame:0000000000008F08                 db  0Bh
.eh_frame:0000000000008F09                 db    0
.eh_frame:0000000000008F0A                 db    0
.eh_frame:0000000000008F0B                 db    0
.eh_frame:0000000000008F0C                 db    0
.eh_frame:0000000000008F0D                 db    0
.eh_frame:0000000000008F0E                 db    0
.eh_frame:0000000000008F0F                 db    0
.eh_frame:0000000000008F10                 db  10h
.eh_frame:0000000000008F11                 db    0
.eh_frame:0000000000008F12                 db    0
.eh_frame:0000000000008F13                 db    0
.eh_frame:0000000000008F14                 db 0FCh
.eh_frame:0000000000008F15                 db    0
.eh_frame:0000000000008F16                 db    0
.eh_frame:0000000000008F17                 db    0
.eh_frame:0000000000008F18                 db 0D8h
.eh_frame:0000000000008F19                 db  96h
.eh_frame:0000000000008F1A                 db 0FFh
.eh_frame:0000000000008F1B                 db 0FFh
.eh_frame:0000000000008F1C                 db    8
.eh_frame:0000000000008F1D                 db    0
.eh_frame:0000000000008F1E                 db    0
.eh_frame:0000000000008F1F                 db    0
.eh_frame:0000000000008F20                 db    0
.eh_frame:0000000000008F21                 db    0
.eh_frame:0000000000008F22                 db    0
.eh_frame:0000000000008F23                 db    0
.eh_frame:0000000000008F24                 db  10h
.eh_frame:0000000000008F25                 db    0
.eh_frame:0000000000008F26                 db    0
.eh_frame:0000000000008F27                 db    0
.eh_frame:0000000000008F28                 db  10h
.eh_frame:0000000000008F29                 db    1
.eh_frame:0000000000008F2A                 db    0
.eh_frame:0000000000008F2B                 db    0
.eh_frame:0000000000008F2C                 db 0D4h
.eh_frame:0000000000008F2D                 db  96h
.eh_frame:0000000000008F2E                 db 0FFh
.eh_frame:0000000000008F2F                 db 0FFh
.eh_frame:0000000000008F30                 db  44h ; D
.eh_frame:0000000000008F31                 db    0
.eh_frame:0000000000008F32                 db    0
.eh_frame:0000000000008F33                 db    0
.eh_frame:0000000000008F34                 db    0
.eh_frame:0000000000008F35                 db    0
.eh_frame:0000000000008F36                 db    0
.eh_frame:0000000000008F37                 db    0
.eh_frame:0000000000008F38                 db  10h
.eh_frame:0000000000008F39                 db    0
.eh_frame:0000000000008F3A                 db    0
.eh_frame:0000000000008F3B                 db    0
.eh_frame:0000000000008F3C                 db  24h ; $
.eh_frame:0000000000008F3D                 db    1
.eh_frame:0000000000008F3E                 db    0
.eh_frame:0000000000008F3F                 db    0
.eh_frame:0000000000008F40                 db  10h
.eh_frame:0000000000008F41                 db  97h
.eh_frame:0000000000008F42                 db 0FFh
.eh_frame:0000000000008F43                 db 0FFh
.eh_frame:0000000000008F44                 db  44h ; D
.eh_frame:0000000000008F45                 db    0
.eh_frame:0000000000008F46                 db    0
.eh_frame:0000000000008F47                 db    0
.eh_frame:0000000000008F48                 db    0
.eh_frame:0000000000008F49                 db    0
.eh_frame:0000000000008F4A                 db    0
.eh_frame:0000000000008F4B                 db    0
.eh_frame:0000000000008F4C                 db  10h
.eh_frame:0000000000008F4D                 db    0
.eh_frame:0000000000008F4E                 db    0
.eh_frame:0000000000008F4F                 db    0
.eh_frame:0000000000008F50                 db  38h ; 8
.eh_frame:0000000000008F51                 db    1
.eh_frame:0000000000008F52                 db    0
.eh_frame:0000000000008F53                 db    0
.eh_frame:0000000000008F54                 db  4Ch ; L
.eh_frame:0000000000008F55                 db  97h
.eh_frame:0000000000008F56                 db 0FFh
.eh_frame:0000000000008F57                 db 0FFh
.eh_frame:0000000000008F58                 db  2Ah ; *
.eh_frame:0000000000008F59                 db    0
.eh_frame:0000000000008F5A                 db    0
.eh_frame:0000000000008F5B                 db    0
.eh_frame:0000000000008F5C                 db    0
.eh_frame:0000000000008F5D                 db    0
.eh_frame:0000000000008F5E                 db    0
.eh_frame:0000000000008F5F                 db    0
.eh_frame:0000000000008F60                 db  24h ; $
.eh_frame:0000000000008F61                 db    0
.eh_frame:0000000000008F62                 db    0
.eh_frame:0000000000008F63                 db    0
.eh_frame:0000000000008F64                 db  4Ch ; L
.eh_frame:0000000000008F65                 db    1
.eh_frame:0000000000008F66                 db    0
.eh_frame:0000000000008F67                 db    0
.eh_frame:0000000000008F68                 db  68h ; h
.eh_frame:0000000000008F69                 db  97h
.eh_frame:0000000000008F6A                 db 0FFh
.eh_frame:0000000000008F6B                 db 0FFh
.eh_frame:0000000000008F6C                 db  4Ah ; J
.eh_frame:0000000000008F6D                 db    0
.eh_frame:0000000000008F6E                 db    0
.eh_frame:0000000000008F6F                 db    0
.eh_frame:0000000000008F70                 db    0
.eh_frame:0000000000008F71                 db  41h ; A
.eh_frame:0000000000008F72                 db  0Eh
.eh_frame:0000000000008F73                 db  10h
.eh_frame:0000000000008F74                 db  86h
.eh_frame:0000000000008F75                 db    2
.eh_frame:0000000000008F76                 db  41h ; A
.eh_frame:0000000000008F77                 db  0Eh
.eh_frame:0000000000008F78                 db  18h
.eh_frame:0000000000008F79                 db  83h
.eh_frame:0000000000008F7A                 db    3
.eh_frame:0000000000008F7B                 db  4Ah ; J
.eh_frame:0000000000008F7C                 db  0Eh
.eh_frame:0000000000008F7D                 db  20h
.eh_frame:0000000000008F7E                 db  7Bh ; {
.eh_frame:0000000000008F7F                 db  0Eh
.eh_frame:0000000000008F80                 db  18h
.eh_frame:0000000000008F81                 db  41h ; A
.eh_frame:0000000000008F82                 db  0Eh
.eh_frame:0000000000008F83                 db  10h
.eh_frame:0000000000008F84                 db  41h ; A
.eh_frame:0000000000008F85                 db  0Eh
.eh_frame:0000000000008F86                 db    8
.eh_frame:0000000000008F87                 db    0
.eh_frame:0000000000008F88                 db  18h
.eh_frame:0000000000008F89                 db    0
.eh_frame:0000000000008F8A                 db    0
.eh_frame:0000000000008F8B                 db    0
.eh_frame:0000000000008F8C                 db  74h ; t
.eh_frame:0000000000008F8D                 db    1
.eh_frame:0000000000008F8E                 db    0
.eh_frame:0000000000008F8F                 db    0
.eh_frame:0000000000008F90                 db  90h
.eh_frame:0000000000008F91                 db  97h
.eh_frame:0000000000008F92                 db 0FFh
.eh_frame:0000000000008F93                 db 0FFh
.eh_frame:0000000000008F94                 db  23h ; #
.eh_frame:0000000000008F95                 db    0
.eh_frame:0000000000008F96                 db    0
.eh_frame:0000000000008F97                 db    0
.eh_frame:0000000000008F98                 db    0
.eh_frame:0000000000008F99                 db  41h ; A
.eh_frame:0000000000008F9A                 db  0Eh
.eh_frame:0000000000008F9B                 db  10h
.eh_frame:0000000000008F9C                 db  83h
.eh_frame:0000000000008F9D                 db    2
.eh_frame:0000000000008F9E                 db  61h ; a
.eh_frame:0000000000008F9F                 db  0Eh
.eh_frame:0000000000008FA0                 db    8
.eh_frame:0000000000008FA1                 db    0
.eh_frame:0000000000008FA2                 db    0
.eh_frame:0000000000008FA3                 db    0
.eh_frame:0000000000008FA4                 db  18h
.eh_frame:0000000000008FA5                 db    0
.eh_frame:0000000000008FA6                 db    0
.eh_frame:0000000000008FA7                 db    0
.eh_frame:0000000000008FA8                 db  90h
.eh_frame:0000000000008FA9                 db    1
.eh_frame:0000000000008FAA                 db    0
.eh_frame:0000000000008FAB                 db    0
.eh_frame:0000000000008FAC                 db 0A4h
.eh_frame:0000000000008FAD                 db  97h
.eh_frame:0000000000008FAE                 db 0FFh
.eh_frame:0000000000008FAF                 db 0FFh
.eh_frame:0000000000008FB0                 db  23h ; #
.eh_frame:0000000000008FB1                 db    0
.eh_frame:0000000000008FB2                 db    0
.eh_frame:0000000000008FB3                 db    0
.eh_frame:0000000000008FB4                 db    0
.eh_frame:0000000000008FB5                 db  41h ; A
.eh_frame:0000000000008FB6                 db  0Eh
.eh_frame:0000000000008FB7                 db  10h
.eh_frame:0000000000008FB8                 db  83h
.eh_frame:0000000000008FB9                 db    2
.eh_frame:0000000000008FBA                 db  61h ; a
.eh_frame:0000000000008FBB                 db  0Eh
.eh_frame:0000000000008FBC                 db    8
.eh_frame:0000000000008FBD                 db    0
.eh_frame:0000000000008FBE                 db    0
.eh_frame:0000000000008FBF                 db    0
.eh_frame:0000000000008FC0                 db  18h
.eh_frame:0000000000008FC1                 db    0
.eh_frame:0000000000008FC2                 db    0
.eh_frame:0000000000008FC3                 db    0
.eh_frame:0000000000008FC4                 db 0ACh
.eh_frame:0000000000008FC5                 db    1
.eh_frame:0000000000008FC6                 db    0
.eh_frame:0000000000008FC7                 db    0
.eh_frame:0000000000008FC8                 db 0B8h
.eh_frame:0000000000008FC9                 db  97h
.eh_frame:0000000000008FCA                 db 0FFh
.eh_frame:0000000000008FCB                 db 0FFh
.eh_frame:0000000000008FCC                 db  26h ; &
.eh_frame:0000000000008FCD                 db    0
.eh_frame:0000000000008FCE                 db    0
.eh_frame:0000000000008FCF                 db    0
.eh_frame:0000000000008FD0                 db    0
.eh_frame:0000000000008FD1                 db  41h ; A
.eh_frame:0000000000008FD2                 db  0Eh
.eh_frame:0000000000008FD3                 db  10h
.eh_frame:0000000000008FD4                 db  83h
.eh_frame:0000000000008FD5                 db    2
.eh_frame:0000000000008FD6                 db  64h ; d
.eh_frame:0000000000008FD7                 db  0Eh
.eh_frame:0000000000008FD8                 db    8
.eh_frame:0000000000008FD9                 db    0
.eh_frame:0000000000008FDA                 db    0
.eh_frame:0000000000008FDB                 db    0
.eh_frame:0000000000008FDC                 db  14h
.eh_frame:0000000000008FDD                 db    0
.eh_frame:0000000000008FDE                 db    0
.eh_frame:0000000000008FDF                 db    0
.eh_frame:0000000000008FE0                 db 0C8h
.eh_frame:0000000000008FE1                 db    1
.eh_frame:0000000000008FE2                 db    0
.eh_frame:0000000000008FE3                 db    0
.eh_frame:0000000000008FE4                 db 0CCh
.eh_frame:0000000000008FE5                 db  97h
.eh_frame:0000000000008FE6                 db 0FFh
.eh_frame:0000000000008FE7                 db 0FFh
.eh_frame:0000000000008FE8                 db  45h ; E
.eh_frame:0000000000008FE9                 db    0
.eh_frame:0000000000008FEA                 db    0
.eh_frame:0000000000008FEB                 db    0
.eh_frame:0000000000008FEC                 db    0
.eh_frame:0000000000008FED                 db  62h ; b
.eh_frame:0000000000008FEE                 db  0Eh
.eh_frame:0000000000008FEF                 db  10h
.eh_frame:0000000000008FF0                 db  4Fh ; O
.eh_frame:0000000000008FF1                 db  0Eh
.eh_frame:0000000000008FF2                 db    8
.eh_frame:0000000000008FF3                 db    0
.eh_frame:0000000000008FF4                 db  18h
.eh_frame:0000000000008FF5                 db    0
.eh_frame:0000000000008FF6                 db    0
.eh_frame:0000000000008FF7                 db    0
.eh_frame:0000000000008FF8                 db 0E0h
.eh_frame:0000000000008FF9                 db    1
.eh_frame:0000000000008FFA                 db    0
.eh_frame:0000000000008FFB                 db    0
.eh_frame:0000000000008FFC                 db    4
.eh_frame:0000000000008FFD                 db  98h
.eh_frame:0000000000008FFE                 db 0FFh
.eh_frame:0000000000008FFF                 db 0FFh
.eh_frame:0000000000009000                 db  14h
.eh_frame:0000000000009001                 db    0
.eh_frame:0000000000009002                 db    0
.eh_frame:0000000000009003                 db    0
.eh_frame:0000000000009004                 db    0
.eh_frame:0000000000009005                 db  41h ; A
.eh_frame:0000000000009006                 db  0Eh
.eh_frame:0000000000009007                 db  10h
.eh_frame:0000000000009008                 db  83h
.eh_frame:0000000000009009                 db    2
.eh_frame:000000000000900A                 db  52h ; R
.eh_frame:000000000000900B                 db  0Eh
.eh_frame:000000000000900C                 db    8
.eh_frame:000000000000900D                 db    0
.eh_frame:000000000000900E                 db    0
.eh_frame:000000000000900F                 db    0
.eh_frame:0000000000009010                 db  18h
.eh_frame:0000000000009011                 db    0
.eh_frame:0000000000009012                 db    0
.eh_frame:0000000000009013                 db    0
.eh_frame:0000000000009014                 db 0FCh
.eh_frame:0000000000009015                 db    1
.eh_frame:0000000000009016                 db    0
.eh_frame:0000000000009017                 db    0
.eh_frame:0000000000009018                 db    8
.eh_frame:0000000000009019                 db  98h
.eh_frame:000000000000901A                 db 0FFh
.eh_frame:000000000000901B                 db 0FFh
.eh_frame:000000000000901C                 db  25h ; %
.eh_frame:000000000000901D                 db    0
.eh_frame:000000000000901E                 db    0
.eh_frame:000000000000901F                 db    0
.eh_frame:0000000000009020                 db    0
.eh_frame:0000000000009021                 db  41h ; A
.eh_frame:0000000000009022                 db  0Eh
.eh_frame:0000000000009023                 db  10h
.eh_frame:0000000000009024                 db  83h
.eh_frame:0000000000009025                 db    2
.eh_frame:0000000000009026                 db  63h ; c
.eh_frame:0000000000009027                 db  0Eh
.eh_frame:0000000000009028                 db    8
.eh_frame:0000000000009029                 db    0
.eh_frame:000000000000902A                 db    0
.eh_frame:000000000000902B                 db    0
.eh_frame:000000000000902C                 db  10h
.eh_frame:000000000000902D                 db    0
.eh_frame:000000000000902E                 db    0
.eh_frame:000000000000902F                 db    0
.eh_frame:0000000000009030                 db  18h
.eh_frame:0000000000009031                 db    2
.eh_frame:0000000000009032                 db    0
.eh_frame:0000000000009033                 db    0
.eh_frame:0000000000009034                 db  1Ch
.eh_frame:0000000000009035                 db  98h
.eh_frame:0000000000009036                 db 0FFh
.eh_frame:0000000000009037                 db 0FFh
.eh_frame:0000000000009038                 db    9
.eh_frame:0000000000009039                 db    0
.eh_frame:000000000000903A                 db    0
.eh_frame:000000000000903B                 db    0
.eh_frame:000000000000903C                 db    0
.eh_frame:000000000000903D                 db    0
.eh_frame:000000000000903E                 db    0
.eh_frame:000000000000903F                 db    0
.eh_frame:0000000000009040                 db  18h
.eh_frame:0000000000009041                 db    0
.eh_frame:0000000000009042                 db    0
.eh_frame:0000000000009043                 db    0
.eh_frame:0000000000009044                 db  2Ch ; ,
.eh_frame:0000000000009045                 db    2
.eh_frame:0000000000009046                 db    0
.eh_frame:0000000000009047                 db    0
.eh_frame:0000000000009048                 db  18h
.eh_frame:0000000000009049                 db  98h
.eh_frame:000000000000904A                 db 0FFh
.eh_frame:000000000000904B                 db 0FFh
.eh_frame:000000000000904C                 db  14h
.eh_frame:000000000000904D                 db    0
.eh_frame:000000000000904E                 db    0
.eh_frame:000000000000904F                 db    0
.eh_frame:0000000000009050                 db    0
.eh_frame:0000000000009051                 db  41h ; A
.eh_frame:0000000000009052                 db  0Eh
.eh_frame:0000000000009053                 db  10h
.eh_frame:0000000000009054                 db  83h
.eh_frame:0000000000009055                 db    2
.eh_frame:0000000000009056                 db  52h ; R
.eh_frame:0000000000009057                 db  0Eh
.eh_frame:0000000000009058                 db    8
.eh_frame:0000000000009059                 db    0
.eh_frame:000000000000905A                 db    0
.eh_frame:000000000000905B                 db    0
.eh_frame:000000000000905C                 db  18h
.eh_frame:000000000000905D                 db    0
.eh_frame:000000000000905E                 db    0
.eh_frame:000000000000905F                 db    0
.eh_frame:0000000000009060                 db  48h ; H
.eh_frame:0000000000009061                 db    2
.eh_frame:0000000000009062                 db    0
.eh_frame:0000000000009063                 db    0
.eh_frame:0000000000009064                 db  1Ch
.eh_frame:0000000000009065                 db  98h
.eh_frame:0000000000009066                 db 0FFh
.eh_frame:0000000000009067                 db 0FFh
.eh_frame:0000000000009068                 db  25h ; %
.eh_frame:0000000000009069                 db    0
.eh_frame:000000000000906A                 db    0
.eh_frame:000000000000906B                 db    0
.eh_frame:000000000000906C                 db    0
.eh_frame:000000000000906D                 db  41h ; A
.eh_frame:000000000000906E                 db  0Eh
.eh_frame:000000000000906F                 db  10h
.eh_frame:0000000000009070                 db  83h
.eh_frame:0000000000009071                 db    2
.eh_frame:0000000000009072                 db  63h ; c
.eh_frame:0000000000009073                 db  0Eh
.eh_frame:0000000000009074                 db    8
.eh_frame:0000000000009075                 db    0
.eh_frame:0000000000009076                 db    0
.eh_frame:0000000000009077                 db    0
.eh_frame:0000000000009078                 db  10h
.eh_frame:0000000000009079                 db    0
.eh_frame:000000000000907A                 db    0
.eh_frame:000000000000907B                 db    0
.eh_frame:000000000000907C                 db  64h ; d
.eh_frame:000000000000907D                 db    2
.eh_frame:000000000000907E                 db    0
.eh_frame:000000000000907F                 db    0
.eh_frame:0000000000009080                 db  30h ; 0
.eh_frame:0000000000009081                 db  98h
.eh_frame:0000000000009082                 db 0FFh
.eh_frame:0000000000009083                 db 0FFh
.eh_frame:0000000000009084                 db    9
.eh_frame:0000000000009085                 db    0
.eh_frame:0000000000009086                 db    0
.eh_frame:0000000000009087                 db    0
.eh_frame:0000000000009088                 db    0
.eh_frame:0000000000009089                 db    0
.eh_frame:000000000000908A                 db    0
.eh_frame:000000000000908B                 db    0
.eh_frame:000000000000908C                 db  10h
.eh_frame:000000000000908D                 db    0
.eh_frame:000000000000908E                 db    0
.eh_frame:000000000000908F                 db    0
.eh_frame:0000000000009090                 db  78h ; x
.eh_frame:0000000000009091                 db    2
.eh_frame:0000000000009092                 db    0
.eh_frame:0000000000009093                 db    0
.eh_frame:0000000000009094                 db  2Ch ; ,
.eh_frame:0000000000009095                 db  98h
.eh_frame:0000000000009096                 db 0FFh
.eh_frame:0000000000009097                 db 0FFh
.eh_frame:0000000000009098                 db 0A3h
.eh_frame:0000000000009099                 db    0
.eh_frame:000000000000909A                 db    0
.eh_frame:000000000000909B                 db    0
.eh_frame:000000000000909C                 db    0
.eh_frame:000000000000909D                 db    0
.eh_frame:000000000000909E                 db    0
.eh_frame:000000000000909F                 db    0
.eh_frame:00000000000090A0                 db  10h
.eh_frame:00000000000090A1                 db    0
.eh_frame:00000000000090A2                 db    0
.eh_frame:00000000000090A3                 db    0
.eh_frame:00000000000090A4                 db  8Ch
.eh_frame:00000000000090A5                 db    2
.eh_frame:00000000000090A6                 db    0
.eh_frame:00000000000090A7                 db    0
.eh_frame:00000000000090A8                 db 0C8h
.eh_frame:00000000000090A9                 db  98h
.eh_frame:00000000000090AA                 db 0FFh
.eh_frame:00000000000090AB                 db 0FFh
.eh_frame:00000000000090AC                 db  13h
.eh_frame:00000000000090AD                 db    1
.eh_frame:00000000000090AE                 db    0
.eh_frame:00000000000090AF                 db    0
.eh_frame:00000000000090B0                 db    0
.eh_frame:00000000000090B1                 db    0
.eh_frame:00000000000090B2                 db    0
.eh_frame:00000000000090B3                 db    0
.eh_frame:00000000000090B4                 db  10h
.eh_frame:00000000000090B5                 db    0
.eh_frame:00000000000090B6                 db    0
.eh_frame:00000000000090B7                 db    0
.eh_frame:00000000000090B8                 db 0A0h
.eh_frame:00000000000090B9                 db    2
.eh_frame:00000000000090BA                 db    0
.eh_frame:00000000000090BB                 db    0
.eh_frame:00000000000090BC                 db 0D4h
.eh_frame:00000000000090BD                 db  99h
.eh_frame:00000000000090BE                 db 0FFh
.eh_frame:00000000000090BF                 db 0FFh
.eh_frame:00000000000090C0                 db  83h
.eh_frame:00000000000090C1                 db    0
.eh_frame:00000000000090C2                 db    0
.eh_frame:00000000000090C3                 db    0
.eh_frame:00000000000090C4                 db    0
.eh_frame:00000000000090C5                 db    0
.eh_frame:00000000000090C6                 db    0
.eh_frame:00000000000090C7                 db    0
.eh_frame:00000000000090C8                 db  10h
.eh_frame:00000000000090C9                 db    0
.eh_frame:00000000000090CA                 db    0
.eh_frame:00000000000090CB                 db    0
.eh_frame:00000000000090CC                 db 0B4h
.eh_frame:00000000000090CD                 db    2
.eh_frame:00000000000090CE                 db    0
.eh_frame:00000000000090CF                 db    0
.eh_frame:00000000000090D0                 db  50h ; P
.eh_frame:00000000000090D1                 db  9Ah
.eh_frame:00000000000090D2                 db 0FFh
.eh_frame:00000000000090D3                 db 0FFh
.eh_frame:00000000000090D4                 db 0A3h
.eh_frame:00000000000090D5                 db    0
.eh_frame:00000000000090D6                 db    0
.eh_frame:00000000000090D7                 db    0
.eh_frame:00000000000090D8                 db    0
.eh_frame:00000000000090D9                 db    0
.eh_frame:00000000000090DA                 db    0
.eh_frame:00000000000090DB                 db    0
.eh_frame:00000000000090DC                 db  38h ; 8
.eh_frame:00000000000090DD                 db    0
.eh_frame:00000000000090DE                 db    0
.eh_frame:00000000000090DF                 db    0
.eh_frame:00000000000090E0                 db 0C8h
.eh_frame:00000000000090E1                 db    2
.eh_frame:00000000000090E2                 db    0
.eh_frame:00000000000090E3                 db    0
.eh_frame:00000000000090E4                 db 0ECh
.eh_frame:00000000000090E5                 db  9Ah
.eh_frame:00000000000090E6                 db 0FFh
.eh_frame:00000000000090E7                 db 0FFh
.eh_frame:00000000000090E8                 db  38h ; 8
.eh_frame:00000000000090E9                 db    1
.eh_frame:00000000000090EA                 db    0
.eh_frame:00000000000090EB                 db    0
.eh_frame:00000000000090EC                 db    0
.eh_frame:00000000000090ED                 db  42h ; B
.eh_frame:00000000000090EE                 db  0Eh
.eh_frame:00000000000090EF                 db  10h
.eh_frame:00000000000090F0                 db  8Dh
.eh_frame:00000000000090F1                 db    2
.eh_frame:00000000000090F2                 db  42h ; B
.eh_frame:00000000000090F3                 db  0Eh
.eh_frame:00000000000090F4                 db  18h
.eh_frame:00000000000090F5                 db  8Ch
.eh_frame:00000000000090F6                 db    3
.eh_frame:00000000000090F7                 db  41h ; A
.eh_frame:00000000000090F8                 db  0Eh
.eh_frame:00000000000090F9                 db  20h
.eh_frame:00000000000090FA                 db  86h
.eh_frame:00000000000090FB                 db    4
.eh_frame:00000000000090FC                 db  41h ; A
.eh_frame:00000000000090FD                 db  0Eh
.eh_frame:00000000000090FE                 db  28h ; (
.eh_frame:00000000000090FF                 db  83h
.eh_frame:0000000000009100                 db    5
.eh_frame:0000000000009101                 db  44h ; D
.eh_frame:0000000000009102                 db  0Eh
.eh_frame:0000000000009103                 db  40h ; @
.eh_frame:0000000000009104                 db    2
.eh_frame:0000000000009105                 db 0FEh
.eh_frame:0000000000009106                 db  0Ah
.eh_frame:0000000000009107                 db  0Eh
.eh_frame:0000000000009108                 db  28h ; (
.eh_frame:0000000000009109                 db  41h ; A
.eh_frame:000000000000910A                 db  0Eh
.eh_frame:000000000000910B                 db  20h
.eh_frame:000000000000910C                 db  41h ; A
.eh_frame:000000000000910D                 db  0Eh
.eh_frame:000000000000910E                 db  18h
.eh_frame:000000000000910F                 db  42h ; B
.eh_frame:0000000000009110                 db  0Eh
.eh_frame:0000000000009111                 db  10h
.eh_frame:0000000000009112                 db  42h ; B
.eh_frame:0000000000009113                 db  0Eh
.eh_frame:0000000000009114                 db    8
.eh_frame:0000000000009115                 db  41h ; A
.eh_frame:0000000000009116                 db  0Bh
.eh_frame:0000000000009117                 db    0
.eh_frame:0000000000009118                 db  28h ; (
.eh_frame:0000000000009119                 db    0
.eh_frame:000000000000911A                 db    0
.eh_frame:000000000000911B                 db    0
.eh_frame:000000000000911C                 db    4
.eh_frame:000000000000911D                 db    3
.eh_frame:000000000000911E                 db    0
.eh_frame:000000000000911F                 db    0
.eh_frame:0000000000009120                 db 0F0h
.eh_frame:0000000000009121                 db  9Bh
.eh_frame:0000000000009122                 db 0FFh
.eh_frame:0000000000009123                 db 0FFh
.eh_frame:0000000000009124                 db  76h ; v
.eh_frame:0000000000009125                 db    0
.eh_frame:0000000000009126                 db    0
.eh_frame:0000000000009127                 db    0
.eh_frame:0000000000009128                 db    0
.eh_frame:0000000000009129                 db  41h ; A
.eh_frame:000000000000912A                 db  0Eh
.eh_frame:000000000000912B                 db  10h
.eh_frame:000000000000912C                 db  86h
.eh_frame:000000000000912D                 db    2
.eh_frame:000000000000912E                 db  41h ; A
.eh_frame:000000000000912F                 db  0Eh
.eh_frame:0000000000009130                 db  18h
.eh_frame:0000000000009131                 db  83h
.eh_frame:0000000000009132                 db    3
.eh_frame:0000000000009133                 db  4Ah ; J
.eh_frame:0000000000009134                 db  0Eh
.eh_frame:0000000000009135                 db  20h
.eh_frame:0000000000009136                 db    2
.eh_frame:0000000000009137                 db  48h ; H
.eh_frame:0000000000009138                 db  0Ah
.eh_frame:0000000000009139                 db  0Eh
.eh_frame:000000000000913A                 db  18h
.eh_frame:000000000000913B                 db  41h ; A
.eh_frame:000000000000913C                 db  0Eh
.eh_frame:000000000000913D                 db  10h
.eh_frame:000000000000913E                 db  41h ; A
.eh_frame:000000000000913F                 db  0Eh
.eh_frame:0000000000009140                 db    8
.eh_frame:0000000000009141                 db  41h ; A
.eh_frame:0000000000009142                 db  0Bh
.eh_frame:0000000000009143                 db    0
.eh_frame:0000000000009144                 db  4Ch ; L
.eh_frame:0000000000009145                 db    0
.eh_frame:0000000000009146                 db    0
.eh_frame:0000000000009147                 db    0
.eh_frame:0000000000009148                 db  30h ; 0
.eh_frame:0000000000009149                 db    3
.eh_frame:000000000000914A                 db    0
.eh_frame:000000000000914B                 db    0
.eh_frame:000000000000914C                 db  44h ; D
.eh_frame:000000000000914D                 db  9Ch
.eh_frame:000000000000914E                 db 0FFh
.eh_frame:000000000000914F                 db 0FFh
.eh_frame:0000000000009150                 db 0E3h
.eh_frame:0000000000009151                 db    0
.eh_frame:0000000000009152                 db    0
.eh_frame:0000000000009153                 db    0
.eh_frame:0000000000009154                 db    0
.eh_frame:0000000000009155                 db  42h ; B
.eh_frame:0000000000009156                 db  0Eh
.eh_frame:0000000000009157                 db  10h
.eh_frame:0000000000009158                 db  8Eh
.eh_frame:0000000000009159                 db    2
.eh_frame:000000000000915A                 db  42h ; B
.eh_frame:000000000000915B                 db  0Eh
.eh_frame:000000000000915C                 db  18h
.eh_frame:000000000000915D                 db  8Dh
.eh_frame:000000000000915E                 db    3
.eh_frame:000000000000915F                 db  45h ; E
.eh_frame:0000000000009160                 db  0Eh
.eh_frame:0000000000009161                 db  20h
.eh_frame:0000000000009162                 db  8Ch
.eh_frame:0000000000009163                 db    4
.eh_frame:0000000000009164                 db  41h ; A
.eh_frame:0000000000009165                 db  0Eh
.eh_frame:0000000000009166                 db  28h ; (
.eh_frame:0000000000009167                 db  86h
.eh_frame:0000000000009168                 db    5
.eh_frame:0000000000009169                 db  44h ; D
.eh_frame:000000000000916A                 db  0Eh
.eh_frame:000000000000916B                 db  30h ; 0
.eh_frame:000000000000916C                 db  83h
.eh_frame:000000000000916D                 db    6
.eh_frame:000000000000916E                 db    2
.eh_frame:000000000000916F                 db  8Bh
.eh_frame:0000000000009170                 db  0Ah
.eh_frame:0000000000009171                 db  0Eh
.eh_frame:0000000000009172                 db  28h ; (
.eh_frame:0000000000009173                 db  41h ; A
.eh_frame:0000000000009174                 db  0Eh
.eh_frame:0000000000009175                 db  20h
.eh_frame:0000000000009176                 db  42h ; B
.eh_frame:0000000000009177                 db  0Eh
.eh_frame:0000000000009178                 db  18h
.eh_frame:0000000000009179                 db  42h ; B
.eh_frame:000000000000917A                 db  0Eh
.eh_frame:000000000000917B                 db  10h
.eh_frame:000000000000917C                 db  42h ; B
.eh_frame:000000000000917D                 db  0Eh
.eh_frame:000000000000917E                 db    8
.eh_frame:000000000000917F                 db  48h ; H
.eh_frame:0000000000009180                 db  0Bh
.eh_frame:0000000000009181                 db  41h ; A
.eh_frame:0000000000009182                 db  0Ah
.eh_frame:0000000000009183                 db  0Eh
.eh_frame:0000000000009184                 db  28h ; (
.eh_frame:0000000000009185                 db  4Bh ; K
.eh_frame:0000000000009186                 db  0Eh
.eh_frame:0000000000009187                 db  20h
.eh_frame:0000000000009188                 db  42h ; B
.eh_frame:0000000000009189                 db  0Eh
.eh_frame:000000000000918A                 db  18h
.eh_frame:000000000000918B                 db  42h ; B
.eh_frame:000000000000918C                 db  0Eh
.eh_frame:000000000000918D                 db  10h
.eh_frame:000000000000918E                 db  42h ; B
.eh_frame:000000000000918F                 db  0Eh
.eh_frame:0000000000009190                 db    8
.eh_frame:0000000000009191                 db  46h ; F
.eh_frame:0000000000009192                 db  0Bh
.eh_frame:0000000000009193                 db    0
.eh_frame:0000000000009194                 db  28h ; (
.eh_frame:0000000000009195                 db    0
.eh_frame:0000000000009196                 db    0
.eh_frame:0000000000009197                 db    0
.eh_frame:0000000000009198                 db  80h
.eh_frame:0000000000009199                 db    3
.eh_frame:000000000000919A                 db    0
.eh_frame:000000000000919B                 db    0
.eh_frame:000000000000919C                 db 0E4h
.eh_frame:000000000000919D                 db  9Ch
.eh_frame:000000000000919E                 db 0FFh
.eh_frame:000000000000919F                 db 0FFh
.eh_frame:00000000000091A0                 db 0D1h
.eh_frame:00000000000091A1                 db    0
.eh_frame:00000000000091A2                 db    0
.eh_frame:00000000000091A3                 db    0
.eh_frame:00000000000091A4                 db    0
.eh_frame:00000000000091A5                 db  41h ; A
.eh_frame:00000000000091A6                 db  0Eh
.eh_frame:00000000000091A7                 db  10h
.eh_frame:00000000000091A8                 db  86h
.eh_frame:00000000000091A9                 db    2
.eh_frame:00000000000091AA                 db  41h ; A
.eh_frame:00000000000091AB                 db  0Eh
.eh_frame:00000000000091AC                 db  18h
.eh_frame:00000000000091AD                 db  83h
.eh_frame:00000000000091AE                 db    3
.eh_frame:00000000000091AF                 db  4Ah ; J
.eh_frame:00000000000091B0                 db  0Eh
.eh_frame:00000000000091B1                 db  40h ; @
.eh_frame:00000000000091B2                 db    2
.eh_frame:00000000000091B3                 db  7Bh ; {
.eh_frame:00000000000091B4                 db  0Ah
.eh_frame:00000000000091B5                 db  0Eh
.eh_frame:00000000000091B6                 db  18h
.eh_frame:00000000000091B7                 db  41h ; A
.eh_frame:00000000000091B8                 db  0Eh
.eh_frame:00000000000091B9                 db  10h
.eh_frame:00000000000091BA                 db  41h ; A
.eh_frame:00000000000091BB                 db  0Eh
.eh_frame:00000000000091BC                 db    8
.eh_frame:00000000000091BD                 db  47h ; G
.eh_frame:00000000000091BE                 db  0Bh
.eh_frame:00000000000091BF                 db    0
.eh_frame:00000000000091C0                 db  28h ; (
.eh_frame:00000000000091C1                 db    0
.eh_frame:00000000000091C2                 db    0
.eh_frame:00000000000091C3                 db    0
.eh_frame:00000000000091C4                 db 0ACh
.eh_frame:00000000000091C5                 db    3
.eh_frame:00000000000091C6                 db    0
.eh_frame:00000000000091C7                 db    0
.eh_frame:00000000000091C8                 db  98h
.eh_frame:00000000000091C9                 db  9Dh
.eh_frame:00000000000091CA                 db 0FFh
.eh_frame:00000000000091CB                 db 0FFh
.eh_frame:00000000000091CC                 db 0FAh
.eh_frame:00000000000091CD                 db    4
.eh_frame:00000000000091CE                 db    0
.eh_frame:00000000000091CF                 db    0
.eh_frame:00000000000091D0                 db    0
.eh_frame:00000000000091D1                 db  42h ; B
.eh_frame:00000000000091D2                 db  0Eh
.eh_frame:00000000000091D3                 db  10h
.eh_frame:00000000000091D4                 db  8Dh
.eh_frame:00000000000091D5                 db    2
.eh_frame:00000000000091D6                 db  42h ; B
.eh_frame:00000000000091D7                 db  0Eh
.eh_frame:00000000000091D8                 db  18h
.eh_frame:00000000000091D9                 db  8Ch
.eh_frame:00000000000091DA                 db    3
.eh_frame:00000000000091DB                 db  46h ; F
.eh_frame:00000000000091DC                 db  0Eh
.eh_frame:00000000000091DD                 db  20h
.eh_frame:00000000000091DE                 db  86h
.eh_frame:00000000000091DF                 db    4
.eh_frame:00000000000091E0                 db  41h ; A
.eh_frame:00000000000091E1                 db  0Eh
.eh_frame:00000000000091E2                 db  28h ; (
.eh_frame:00000000000091E3                 db  83h
.eh_frame:00000000000091E4                 db    5
.eh_frame:00000000000091E5                 db  49h ; I
.eh_frame:00000000000091E6                 db  0Eh
.eh_frame:00000000000091E7                 db 0B0h
.eh_frame:00000000000091E8                 db    1
.eh_frame:00000000000091E9                 db    0
.eh_frame:00000000000091EA                 db    0
.eh_frame:00000000000091EB                 db    0
.eh_frame:00000000000091EC                 db  58h ; X
.eh_frame:00000000000091ED                 db    0
.eh_frame:00000000000091EE                 db    0
.eh_frame:00000000000091EF                 db    0
.eh_frame:00000000000091F0                 db 0D8h
.eh_frame:00000000000091F1                 db    3
.eh_frame:00000000000091F2                 db    0
.eh_frame:00000000000091F3                 db    0
.eh_frame:00000000000091F4                 db 0CCh
.eh_frame:00000000000091F5                 db  86h
.eh_frame:00000000000091F6                 db 0FFh
.eh_frame:00000000000091F7                 db 0FFh
.eh_frame:00000000000091F8                 db  29h ; )
.eh_frame:00000000000091F9                 db  0Bh
.eh_frame:00000000000091FA                 db    0
.eh_frame:00000000000091FB                 db    0
.eh_frame:00000000000091FC                 db    0
.eh_frame:00000000000091FD                 db  42h ; B
.eh_frame:00000000000091FE                 db  0Eh
.eh_frame:00000000000091FF                 db  10h
.eh_frame:0000000000009200                 db  8Fh
.eh_frame:0000000000009201                 db    2
.eh_frame:0000000000009202                 db  42h ; B
.eh_frame:0000000000009203                 db  0Eh
.eh_frame:0000000000009204                 db  18h
.eh_frame:0000000000009205                 db  8Eh
.eh_frame:0000000000009206                 db    3
.eh_frame:0000000000009207                 db  45h ; E
.eh_frame:0000000000009208                 db  0Eh
.eh_frame:0000000000009209                 db  20h
.eh_frame:000000000000920A                 db  8Dh
.eh_frame:000000000000920B                 db    4
.eh_frame:000000000000920C                 db  42h ; B
.eh_frame:000000000000920D                 db  0Eh
.eh_frame:000000000000920E                 db  28h ; (
.eh_frame:000000000000920F                 db  8Ch
.eh_frame:0000000000009210                 db    5
.eh_frame:0000000000009211                 db  47h ; G
.eh_frame:0000000000009212                 db  0Eh
.eh_frame:0000000000009213                 db  30h ; 0
.eh_frame:0000000000009214                 db  86h
.eh_frame:0000000000009215                 db    6
.eh_frame:0000000000009216                 db  41h ; A
.eh_frame:0000000000009217                 db  0Eh
.eh_frame:0000000000009218                 db  38h ; 8
.eh_frame:0000000000009219                 db  83h
.eh_frame:000000000000921A                 db    7
.eh_frame:000000000000921B                 db  4Fh ; O
.eh_frame:000000000000921C                 db  0Eh
.eh_frame:000000000000921D                 db 0C0h
.eh_frame:000000000000921E                 db    1
.eh_frame:000000000000921F                 db    2
.eh_frame:0000000000009220                 db 0B2h
.eh_frame:0000000000009221                 db  0Ah
.eh_frame:0000000000009222                 db  0Eh
.eh_frame:0000000000009223                 db 0C8h
.eh_frame:0000000000009224                 db    1
.eh_frame:0000000000009225                 db  50h ; P
.eh_frame:0000000000009226                 db  0Eh
.eh_frame:0000000000009227                 db 0D0h
.eh_frame:0000000000009228                 db    1
.eh_frame:0000000000009229                 db  6Ch ; l
.eh_frame:000000000000922A                 db  0Bh
.eh_frame:000000000000922B                 db    3
.eh_frame:000000000000922C                 db  98h
.eh_frame:000000000000922D                 db    5
.eh_frame:000000000000922E                 db  0Ah
.eh_frame:000000000000922F                 db  0Eh
.eh_frame:0000000000009230                 db  38h ; 8
.eh_frame:0000000000009231                 db  41h ; A
.eh_frame:0000000000009232                 db  0Eh
.eh_frame:0000000000009233                 db  30h ; 0
.eh_frame:0000000000009234                 db  41h ; A
.eh_frame:0000000000009235                 db  0Eh
.eh_frame:0000000000009236                 db  28h ; (
.eh_frame:0000000000009237                 db  42h ; B
.eh_frame:0000000000009238                 db  0Eh
.eh_frame:0000000000009239                 db  20h
.eh_frame:000000000000923A                 db  42h ; B
.eh_frame:000000000000923B                 db  0Eh
.eh_frame:000000000000923C                 db  18h
.eh_frame:000000000000923D                 db  42h ; B
.eh_frame:000000000000923E                 db  0Eh
.eh_frame:000000000000923F                 db  10h
.eh_frame:0000000000009240                 db  42h ; B
.eh_frame:0000000000009241                 db  0Eh
.eh_frame:0000000000009242                 db    8
.eh_frame:0000000000009243                 db  41h ; A
.eh_frame:0000000000009244                 db  0Bh
.eh_frame:0000000000009245                 db    0
.eh_frame:0000000000009246                 db    0
.eh_frame:0000000000009247                 db    0
.eh_frame:0000000000009248                 db  10h
.eh_frame:0000000000009249                 db    0
.eh_frame:000000000000924A                 db    0
.eh_frame:000000000000924B                 db    0
.eh_frame:000000000000924C                 db  34h ; 4
.eh_frame:000000000000924D                 db    4
.eh_frame:000000000000924E                 db    0
.eh_frame:000000000000924F                 db    0
.eh_frame:0000000000009250                 db  10h
.eh_frame:0000000000009251                 db 0A2h
.eh_frame:0000000000009252                 db 0FFh
.eh_frame:0000000000009253                 db 0FFh
.eh_frame:0000000000009254                 db 0AAh
.eh_frame:0000000000009255                 db    1
.eh_frame:0000000000009256                 db    0
.eh_frame:0000000000009257                 db    0
.eh_frame:0000000000009258                 db    0
.eh_frame:0000000000009259                 db    0
.eh_frame:000000000000925A                 db    0
.eh_frame:000000000000925B                 db    0
.eh_frame:000000000000925C                 db  10h
.eh_frame:000000000000925D                 db    0
.eh_frame:000000000000925E                 db    0
.eh_frame:000000000000925F                 db    0
.eh_frame:0000000000009260                 db  48h ; H
.eh_frame:0000000000009261                 db    4
.eh_frame:0000000000009262                 db    0
.eh_frame:0000000000009263                 db    0
.eh_frame:0000000000009264                 db 0ACh
.eh_frame:0000000000009265                 db 0A3h
.eh_frame:0000000000009266                 db 0FFh
.eh_frame:0000000000009267                 db 0FFh
.eh_frame:0000000000009268                 db  19h
.eh_frame:0000000000009269                 db    2
.eh_frame:000000000000926A                 db    0
.eh_frame:000000000000926B                 db    0
.eh_frame:000000000000926C                 db    0
.eh_frame:000000000000926D                 db    0
.eh_frame:000000000000926E                 db    0
.eh_frame:000000000000926F                 db    0
.eh_frame:0000000000009270                 db  48h ; H
.eh_frame:0000000000009271                 db    0
.eh_frame:0000000000009272                 db    0
.eh_frame:0000000000009273                 db    0
.eh_frame:0000000000009274                 db  5Ch ; \
.eh_frame:0000000000009275                 db    4
.eh_frame:0000000000009276                 db    0
.eh_frame:0000000000009277                 db    0
.eh_frame:0000000000009278                 db 0B8h
.eh_frame:0000000000009279                 db 0A5h
.eh_frame:000000000000927A                 db 0FFh
.eh_frame:000000000000927B                 db 0FFh
.eh_frame:000000000000927C                 db  87h
.eh_frame:000000000000927D                 db    0
.eh_frame:000000000000927E                 db    0
.eh_frame:000000000000927F                 db    0
.eh_frame:0000000000009280                 db    0
.eh_frame:0000000000009281                 db  42h ; B
.eh_frame:0000000000009282                 db  0Eh
.eh_frame:0000000000009283                 db  10h
.eh_frame:0000000000009284                 db  8Eh
.eh_frame:0000000000009285                 db    2
.eh_frame:0000000000009286                 db  42h ; B
.eh_frame:0000000000009287                 db  0Eh
.eh_frame:0000000000009288                 db  18h
.eh_frame:0000000000009289                 db  8Dh
.eh_frame:000000000000928A                 db    3
.eh_frame:000000000000928B                 db  49h ; I
.eh_frame:000000000000928C                 db  0Eh
.eh_frame:000000000000928D                 db  20h
.eh_frame:000000000000928E                 db  8Ch
.eh_frame:000000000000928F                 db    4
.eh_frame:0000000000009290                 db  41h ; A
.eh_frame:0000000000009291                 db  0Eh
.eh_frame:0000000000009292                 db  28h ; (
.eh_frame:0000000000009293                 db  86h
.eh_frame:0000000000009294                 db    5
.eh_frame:0000000000009295                 db  41h ; A
.eh_frame:0000000000009296                 db  0Eh
.eh_frame:0000000000009297                 db  30h ; 0
.eh_frame:0000000000009298                 db  83h
.eh_frame:0000000000009299                 db    6
.eh_frame:000000000000929A                 db  70h ; p
.eh_frame:000000000000929B                 db  0Ah
.eh_frame:000000000000929C                 db  0Eh
.eh_frame:000000000000929D                 db  28h ; (
.eh_frame:000000000000929E                 db  44h ; D
.eh_frame:000000000000929F                 db  0Eh
.eh_frame:00000000000092A0                 db  20h
.eh_frame:00000000000092A1                 db  42h ; B
.eh_frame:00000000000092A2                 db  0Eh
.eh_frame:00000000000092A3                 db  18h
.eh_frame:00000000000092A4                 db  42h ; B
.eh_frame:00000000000092A5                 db  0Eh
.eh_frame:00000000000092A6                 db  10h
.eh_frame:00000000000092A7                 db  42h ; B
.eh_frame:00000000000092A8                 db  0Eh
.eh_frame:00000000000092A9                 db    8
.eh_frame:00000000000092AA                 db  47h ; G
.eh_frame:00000000000092AB                 db  0Bh
.eh_frame:00000000000092AC                 db  6Ch ; l
.eh_frame:00000000000092AD                 db  0Eh
.eh_frame:00000000000092AE                 db  28h ; (
.eh_frame:00000000000092AF                 db  44h ; D
.eh_frame:00000000000092B0                 db  0Eh
.eh_frame:00000000000092B1                 db  20h
.eh_frame:00000000000092B2                 db  42h ; B
.eh_frame:00000000000092B3                 db  0Eh
.eh_frame:00000000000092B4                 db  18h
.eh_frame:00000000000092B5                 db  42h ; B
.eh_frame:00000000000092B6                 db  0Eh
.eh_frame:00000000000092B7                 db  10h
.eh_frame:00000000000092B8                 db  42h ; B
.eh_frame:00000000000092B9                 db  0Eh
.eh_frame:00000000000092BA                 db    8
.eh_frame:00000000000092BB                 db    0
.eh_frame:00000000000092BC                 db  10h
.eh_frame:00000000000092BD                 db    0
.eh_frame:00000000000092BE                 db    0
.eh_frame:00000000000092BF                 db    0
.eh_frame:00000000000092C0                 db 0A8h
.eh_frame:00000000000092C1                 db    4
.eh_frame:00000000000092C2                 db    0
.eh_frame:00000000000092C3                 db    0
.eh_frame:00000000000092C4                 db 0FCh
.eh_frame:00000000000092C5                 db 0A5h
.eh_frame:00000000000092C6                 db 0FFh
.eh_frame:00000000000092C7                 db 0FFh
.eh_frame:00000000000092C8                 db  15h
.eh_frame:00000000000092C9                 db    0
.eh_frame:00000000000092CA                 db    0
.eh_frame:00000000000092CB                 db    0
.eh_frame:00000000000092CC                 db    0
.eh_frame:00000000000092CD                 db    0
.eh_frame:00000000000092CE                 db    0
.eh_frame:00000000000092CF                 db    0
.eh_frame:00000000000092D0                 db  10h
.eh_frame:00000000000092D1                 db    0
.eh_frame:00000000000092D2                 db    0
.eh_frame:00000000000092D3                 db    0
.eh_frame:00000000000092D4                 db 0BCh
.eh_frame:00000000000092D5                 db    4
.eh_frame:00000000000092D6                 db    0
.eh_frame:00000000000092D7                 db    0
.eh_frame:00000000000092D8                 db    8
.eh_frame:00000000000092D9                 db 0A6h
.eh_frame:00000000000092DA                 db 0FFh
.eh_frame:00000000000092DB                 db 0FFh
.eh_frame:00000000000092DC                 db    7
.eh_frame:00000000000092DD                 db    0
.eh_frame:00000000000092DE                 db    0
.eh_frame:00000000000092DF                 db    0
.eh_frame:00000000000092E0                 db    0
.eh_frame:00000000000092E1                 db    0
.eh_frame:00000000000092E2                 db    0
.eh_frame:00000000000092E3                 db    0
.eh_frame:00000000000092E4                 db  48h ; H
.eh_frame:00000000000092E5                 db    0
.eh_frame:00000000000092E6                 db    0
.eh_frame:00000000000092E7                 db    0
.eh_frame:00000000000092E8                 db 0D0h
.eh_frame:00000000000092E9                 db    4
.eh_frame:00000000000092EA                 db    0
.eh_frame:00000000000092EB                 db    0
.eh_frame:00000000000092EC                 db    4
.eh_frame:00000000000092ED                 db 0A6h
.eh_frame:00000000000092EE                 db 0FFh
.eh_frame:00000000000092EF                 db 0FFh
.eh_frame:00000000000092F0                 db 0AEh
.eh_frame:00000000000092F1                 db    2
.eh_frame:00000000000092F2                 db    0
.eh_frame:00000000000092F3                 db    0
.eh_frame:00000000000092F4                 db    0
.eh_frame:00000000000092F5                 db  42h ; B
.eh_frame:00000000000092F6                 db  0Eh
.eh_frame:00000000000092F7                 db  10h
.eh_frame:00000000000092F8                 db  8Fh
.eh_frame:00000000000092F9                 db    2
.eh_frame:00000000000092FA                 db  42h ; B
.eh_frame:00000000000092FB                 db  0Eh
.eh_frame:00000000000092FC                 db  18h
.eh_frame:00000000000092FD                 db  8Eh
.eh_frame:00000000000092FE                 db    3
.eh_frame:00000000000092FF                 db  45h ; E
.eh_frame:0000000000009300                 db  0Eh
.eh_frame:0000000000009301                 db  20h
.eh_frame:0000000000009302                 db  8Dh
.eh_frame:0000000000009303                 db    4
.eh_frame:0000000000009304                 db  42h ; B
.eh_frame:0000000000009305                 db  0Eh
.eh_frame:0000000000009306                 db  28h ; (
.eh_frame:0000000000009307                 db  8Ch
.eh_frame:0000000000009308                 db    5
.eh_frame:0000000000009309                 db  44h ; D
.eh_frame:000000000000930A                 db  0Eh
.eh_frame:000000000000930B                 db  30h ; 0
.eh_frame:000000000000930C                 db  86h
.eh_frame:000000000000930D                 db    6
.eh_frame:000000000000930E                 db  41h ; A
.eh_frame:000000000000930F                 db  0Eh
.eh_frame:0000000000009310                 db  38h ; 8
.eh_frame:0000000000009311                 db  83h
.eh_frame:0000000000009312                 db    7
.eh_frame:0000000000009313                 db  47h ; G
.eh_frame:0000000000009314                 db  0Eh
.eh_frame:0000000000009315                 db  70h ; p
.eh_frame:0000000000009316                 db    3
.eh_frame:0000000000009317                 db  19h
.eh_frame:0000000000009318                 db    1
.eh_frame:0000000000009319                 db  0Ah
.eh_frame:000000000000931A                 db  0Eh
.eh_frame:000000000000931B                 db  38h ; 8
.eh_frame:000000000000931C                 db  41h ; A
.eh_frame:000000000000931D                 db  0Eh
.eh_frame:000000000000931E                 db  30h ; 0
.eh_frame:000000000000931F                 db  41h ; A
.eh_frame:0000000000009320                 db  0Eh
.eh_frame:0000000000009321                 db  28h ; (
.eh_frame:0000000000009322                 db  42h ; B
.eh_frame:0000000000009323                 db  0Eh
.eh_frame:0000000000009324                 db  20h
.eh_frame:0000000000009325                 db  42h ; B
.eh_frame:0000000000009326                 db  0Eh
.eh_frame:0000000000009327                 db  18h
.eh_frame:0000000000009328                 db  42h ; B
.eh_frame:0000000000009329                 db  0Eh
.eh_frame:000000000000932A                 db  10h
.eh_frame:000000000000932B                 db  42h ; B
.eh_frame:000000000000932C                 db  0Eh
.eh_frame:000000000000932D                 db    8
.eh_frame:000000000000932E                 db  46h ; F
.eh_frame:000000000000932F                 db  0Bh
.eh_frame:0000000000009330                 db  44h ; D
.eh_frame:0000000000009331                 db    0
.eh_frame:0000000000009332                 db    0
.eh_frame:0000000000009333                 db    0
.eh_frame:0000000000009334                 db  1Ch
.eh_frame:0000000000009335                 db    5
.eh_frame:0000000000009336                 db    0
.eh_frame:0000000000009337                 db    0
.eh_frame:0000000000009338                 db  68h ; h
.eh_frame:0000000000009339                 db 0A8h
.eh_frame:000000000000933A                 db 0FFh
.eh_frame:000000000000933B                 db 0FFh
.eh_frame:000000000000933C                 db 0BFh
.eh_frame:000000000000933D                 db    0
.eh_frame:000000000000933E                 db    0
.eh_frame:000000000000933F                 db    0
.eh_frame:0000000000009340                 db    0
.eh_frame:0000000000009341                 db  42h ; B
.eh_frame:0000000000009342                 db  0Eh
.eh_frame:0000000000009343                 db  10h
.eh_frame:0000000000009344                 db  8Eh
.eh_frame:0000000000009345                 db    2
.eh_frame:0000000000009346                 db  42h ; B
.eh_frame:0000000000009347                 db  0Eh
.eh_frame:0000000000009348                 db  18h
.eh_frame:0000000000009349                 db  8Dh
.eh_frame:000000000000934A                 db    3
.eh_frame:000000000000934B                 db  45h ; E
.eh_frame:000000000000934C                 db  0Eh
.eh_frame:000000000000934D                 db  20h
.eh_frame:000000000000934E                 db  8Ch
.eh_frame:000000000000934F                 db    4
.eh_frame:0000000000009350                 db  41h ; A
.eh_frame:0000000000009351                 db  0Eh
.eh_frame:0000000000009352                 db  28h ; (
.eh_frame:0000000000009353                 db  86h
.eh_frame:0000000000009354                 db    5
.eh_frame:0000000000009355                 db  44h ; D
.eh_frame:0000000000009356                 db  0Eh
.eh_frame:0000000000009357                 db  30h ; 0
.eh_frame:0000000000009358                 db  83h
.eh_frame:0000000000009359                 db    6
.eh_frame:000000000000935A                 db  4Dh ; M
.eh_frame:000000000000935B                 db  0Eh
.eh_frame:000000000000935C                 db  50h ; P
.eh_frame:000000000000935D                 db    2
.eh_frame:000000000000935E                 db  76h ; v
.eh_frame:000000000000935F                 db  0Ah
.eh_frame:0000000000009360                 db  0Eh
.eh_frame:0000000000009361                 db  30h ; 0
.eh_frame:0000000000009362                 db  41h ; A
.eh_frame:0000000000009363                 db  0Eh
.eh_frame:0000000000009364                 db  28h ; (
.eh_frame:0000000000009365                 db  41h ; A
.eh_frame:0000000000009366                 db  0Eh
.eh_frame:0000000000009367                 db  20h
.eh_frame:0000000000009368                 db  42h ; B
.eh_frame:0000000000009369                 db  0Eh
.eh_frame:000000000000936A                 db  18h
.eh_frame:000000000000936B                 db  42h ; B
.eh_frame:000000000000936C                 db  0Eh
.eh_frame:000000000000936D                 db  10h
.eh_frame:000000000000936E                 db  42h ; B
.eh_frame:000000000000936F                 db  0Eh
.eh_frame:0000000000009370                 db    8
.eh_frame:0000000000009371                 db  47h ; G
.eh_frame:0000000000009372                 db  0Bh
.eh_frame:0000000000009373                 db    0
.eh_frame:0000000000009374                 db    0
.eh_frame:0000000000009375                 db    0
.eh_frame:0000000000009376                 db    0
.eh_frame:0000000000009377                 db    0
.eh_frame:0000000000009378                 db  10h
.eh_frame:0000000000009379                 db    0
.eh_frame:000000000000937A                 db    0
.eh_frame:000000000000937B                 db    0
.eh_frame:000000000000937C                 db  64h ; d
.eh_frame:000000000000937D                 db    5
.eh_frame:000000000000937E                 db    0
.eh_frame:000000000000937F                 db    0
.eh_frame:0000000000009380                 db 0E0h
.eh_frame:0000000000009381                 db 0A8h
.eh_frame:0000000000009382                 db 0FFh
.eh_frame:0000000000009383                 db 0FFh
.eh_frame:0000000000009384                 db    8
.eh_frame:0000000000009385                 db    1
.eh_frame:0000000000009386                 db    0
.eh_frame:0000000000009387                 db    0
.eh_frame:0000000000009388                 db    0
.eh_frame:0000000000009389                 db    0
.eh_frame:000000000000938A                 db    0
.eh_frame:000000000000938B                 db    0
.eh_frame:000000000000938C                 db  10h
.eh_frame:000000000000938D                 db    0
.eh_frame:000000000000938E                 db    0
.eh_frame:000000000000938F                 db    0
.eh_frame:0000000000009390                 db  78h ; x
.eh_frame:0000000000009391                 db    5
.eh_frame:0000000000009392                 db    0
.eh_frame:0000000000009393                 db    0
.eh_frame:0000000000009394                 db 0DCh
.eh_frame:0000000000009395                 db 0A9h
.eh_frame:0000000000009396                 db 0FFh
.eh_frame:0000000000009397                 db 0FFh
.eh_frame:0000000000009398                 db 0B5h
.eh_frame:0000000000009399                 db    1
.eh_frame:000000000000939A                 db    0
.eh_frame:000000000000939B                 db    0
.eh_frame:000000000000939C                 db    0
.eh_frame:000000000000939D                 db    0
.eh_frame:000000000000939E                 db    0
.eh_frame:000000000000939F                 db    0
.eh_frame:00000000000093A0                 db  48h ; H
.eh_frame:00000000000093A1                 db    0
.eh_frame:00000000000093A2                 db    0
.eh_frame:00000000000093A3                 db    0
.eh_frame:00000000000093A4                 db  8Ch
.eh_frame:00000000000093A5                 db    5
.eh_frame:00000000000093A6                 db    0
.eh_frame:00000000000093A7                 db    0
.eh_frame:00000000000093A8                 db  88h
.eh_frame:00000000000093A9                 db 0ABh
.eh_frame:00000000000093AA                 db 0FFh
.eh_frame:00000000000093AB                 db 0FFh
.eh_frame:00000000000093AC                 db  87h
.eh_frame:00000000000093AD                 db    0
.eh_frame:00000000000093AE                 db    0
.eh_frame:00000000000093AF                 db    0
.eh_frame:00000000000093B0                 db    0
.eh_frame:00000000000093B1                 db  42h ; B
.eh_frame:00000000000093B2                 db  0Eh
.eh_frame:00000000000093B3                 db  10h
.eh_frame:00000000000093B4                 db  8Eh
.eh_frame:00000000000093B5                 db    2
.eh_frame:00000000000093B6                 db  42h ; B
.eh_frame:00000000000093B7                 db  0Eh
.eh_frame:00000000000093B8                 db  18h
.eh_frame:00000000000093B9                 db  8Dh
.eh_frame:00000000000093BA                 db    3
.eh_frame:00000000000093BB                 db  49h ; I
.eh_frame:00000000000093BC                 db  0Eh
.eh_frame:00000000000093BD                 db  20h
.eh_frame:00000000000093BE                 db  8Ch
.eh_frame:00000000000093BF                 db    4
.eh_frame:00000000000093C0                 db  41h ; A
.eh_frame:00000000000093C1                 db  0Eh
.eh_frame:00000000000093C2                 db  28h ; (
.eh_frame:00000000000093C3                 db  86h
.eh_frame:00000000000093C4                 db    5
.eh_frame:00000000000093C5                 db  41h ; A
.eh_frame:00000000000093C6                 db  0Eh
.eh_frame:00000000000093C7                 db  30h ; 0
.eh_frame:00000000000093C8                 db  83h
.eh_frame:00000000000093C9                 db    6
.eh_frame:00000000000093CA                 db  6Fh ; o
.eh_frame:00000000000093CB                 db  0Ah
.eh_frame:00000000000093CC                 db  0Eh
.eh_frame:00000000000093CD                 db  28h ; (
.eh_frame:00000000000093CE                 db  44h ; D
.eh_frame:00000000000093CF                 db  0Eh
.eh_frame:00000000000093D0                 db  20h
.eh_frame:00000000000093D1                 db  42h ; B
.eh_frame:00000000000093D2                 db  0Eh
.eh_frame:00000000000093D3                 db  18h
.eh_frame:00000000000093D4                 db  42h ; B
.eh_frame:00000000000093D5                 db  0Eh
.eh_frame:00000000000093D6                 db  10h
.eh_frame:00000000000093D7                 db  42h ; B
.eh_frame:00000000000093D8                 db  0Eh
.eh_frame:00000000000093D9                 db    8
.eh_frame:00000000000093DA                 db  48h ; H
.eh_frame:00000000000093DB                 db  0Bh
.eh_frame:00000000000093DC                 db  6Ch ; l
.eh_frame:00000000000093DD                 db  0Eh
.eh_frame:00000000000093DE                 db  28h ; (
.eh_frame:00000000000093DF                 db  44h ; D
.eh_frame:00000000000093E0                 db  0Eh
.eh_frame:00000000000093E1                 db  20h
.eh_frame:00000000000093E2                 db  42h ; B
.eh_frame:00000000000093E3                 db  0Eh
.eh_frame:00000000000093E4                 db  18h
.eh_frame:00000000000093E5                 db  42h ; B
.eh_frame:00000000000093E6                 db  0Eh
.eh_frame:00000000000093E7                 db  10h
.eh_frame:00000000000093E8                 db  42h ; B
.eh_frame:00000000000093E9                 db  0Eh
.eh_frame:00000000000093EA                 db    8
.eh_frame:00000000000093EB                 db    0
.eh_frame:00000000000093EC                 db  10h
.eh_frame:00000000000093ED                 db    0
.eh_frame:00000000000093EE                 db    0
.eh_frame:00000000000093EF                 db    0
.eh_frame:00000000000093F0                 db 0D8h
.eh_frame:00000000000093F1                 db    5
.eh_frame:00000000000093F2                 db    0
.eh_frame:00000000000093F3                 db    0
.eh_frame:00000000000093F4                 db 0CCh
.eh_frame:00000000000093F5                 db 0ABh
.eh_frame:00000000000093F6                 db 0FFh
.eh_frame:00000000000093F7                 db 0FFh
.eh_frame:00000000000093F8                 db  15h
.eh_frame:00000000000093F9                 db    0
.eh_frame:00000000000093FA                 db    0
.eh_frame:00000000000093FB                 db    0
.eh_frame:00000000000093FC                 db    0
.eh_frame:00000000000093FD                 db    0
.eh_frame:00000000000093FE                 db    0
.eh_frame:00000000000093FF                 db    0
.eh_frame:0000000000009400                 db  10h
.eh_frame:0000000000009401                 db    0
.eh_frame:0000000000009402                 db    0
.eh_frame:0000000000009403                 db    0
.eh_frame:0000000000009404                 db 0ECh
.eh_frame:0000000000009405                 db    5
.eh_frame:0000000000009406                 db    0
.eh_frame:0000000000009407                 db    0
.eh_frame:0000000000009408                 db 0D8h
.eh_frame:0000000000009409                 db 0ABh
.eh_frame:000000000000940A                 db 0FFh
.eh_frame:000000000000940B                 db 0FFh
.eh_frame:000000000000940C                 db    7
.eh_frame:000000000000940D                 db    0
.eh_frame:000000000000940E                 db    0
.eh_frame:000000000000940F                 db    0
.eh_frame:0000000000009410                 db    0
.eh_frame:0000000000009411                 db    0
.eh_frame:0000000000009412                 db    0
.eh_frame:0000000000009413                 db    0
.eh_frame:0000000000009414                 db  48h ; H
.eh_frame:0000000000009415                 db    0
.eh_frame:0000000000009416                 db    0
.eh_frame:0000000000009417                 db    0
.eh_frame:0000000000009418                 db    0
.eh_frame:0000000000009419                 db    6
.eh_frame:000000000000941A                 db    0
.eh_frame:000000000000941B                 db    0
.eh_frame:000000000000941C                 db 0D4h
.eh_frame:000000000000941D                 db 0ABh
.eh_frame:000000000000941E                 db 0FFh
.eh_frame:000000000000941F                 db 0FFh
.eh_frame:0000000000009420                 db 0ADh
.eh_frame:0000000000009421                 db    2
.eh_frame:0000000000009422                 db    0
.eh_frame:0000000000009423                 db    0
.eh_frame:0000000000009424                 db    0
.eh_frame:0000000000009425                 db  42h ; B
.eh_frame:0000000000009426                 db  0Eh
.eh_frame:0000000000009427                 db  10h
.eh_frame:0000000000009428                 db  8Fh
.eh_frame:0000000000009429                 db    2
.eh_frame:000000000000942A                 db  42h ; B
.eh_frame:000000000000942B                 db  0Eh
.eh_frame:000000000000942C                 db  18h
.eh_frame:000000000000942D                 db  8Eh
.eh_frame:000000000000942E                 db    3
.eh_frame:000000000000942F                 db  45h ; E
.eh_frame:0000000000009430                 db  0Eh
.eh_frame:0000000000009431                 db  20h
.eh_frame:0000000000009432                 db  8Dh
.eh_frame:0000000000009433                 db    4
.eh_frame:0000000000009434                 db  42h ; B
.eh_frame:0000000000009435                 db  0Eh
.eh_frame:0000000000009436                 db  28h ; (
.eh_frame:0000000000009437                 db  8Ch
.eh_frame:0000000000009438                 db    5
.eh_frame:0000000000009439                 db  44h ; D
.eh_frame:000000000000943A                 db  0Eh
.eh_frame:000000000000943B                 db  30h ; 0
.eh_frame:000000000000943C                 db  86h
.eh_frame:000000000000943D                 db    6
.eh_frame:000000000000943E                 db  41h ; A
.eh_frame:000000000000943F                 db  0Eh
.eh_frame:0000000000009440                 db  38h ; 8
.eh_frame:0000000000009441                 db  83h
.eh_frame:0000000000009442                 db    7
.eh_frame:0000000000009443                 db  47h ; G
.eh_frame:0000000000009444                 db  0Eh
.eh_frame:0000000000009445                 db  70h ; p
.eh_frame:0000000000009446                 db    3
.eh_frame:0000000000009447                 db  21h ; !
.eh_frame:0000000000009448                 db    1
.eh_frame:0000000000009449                 db  0Ah
.eh_frame:000000000000944A                 db  0Eh
.eh_frame:000000000000944B                 db  38h ; 8
.eh_frame:000000000000944C                 db  41h ; A
.eh_frame:000000000000944D                 db  0Eh
.eh_frame:000000000000944E                 db  30h ; 0
.eh_frame:000000000000944F                 db  41h ; A
.eh_frame:0000000000009450                 db  0Eh
.eh_frame:0000000000009451                 db  28h ; (
.eh_frame:0000000000009452                 db  42h ; B
.eh_frame:0000000000009453                 db  0Eh
.eh_frame:0000000000009454                 db  20h
.eh_frame:0000000000009455                 db  42h ; B
.eh_frame:0000000000009456                 db  0Eh
.eh_frame:0000000000009457                 db  18h
.eh_frame:0000000000009458                 db  42h ; B
.eh_frame:0000000000009459                 db  0Eh
.eh_frame:000000000000945A                 db  10h
.eh_frame:000000000000945B                 db  42h ; B
.eh_frame:000000000000945C                 db  0Eh
.eh_frame:000000000000945D                 db    8
.eh_frame:000000000000945E                 db  46h ; F
.eh_frame:000000000000945F                 db  0Bh
.eh_frame:0000000000009460                 db  44h ; D
.eh_frame:0000000000009461                 db    0
.eh_frame:0000000000009462                 db    0
.eh_frame:0000000000009463                 db    0
.eh_frame:0000000000009464                 db  4Ch ; L
.eh_frame:0000000000009465                 db    6
.eh_frame:0000000000009466                 db    0
.eh_frame:0000000000009467                 db    0
.eh_frame:0000000000009468                 db  38h ; 8
.eh_frame:0000000000009469                 db 0AEh
.eh_frame:000000000000946A                 db 0FFh
.eh_frame:000000000000946B                 db 0FFh
.eh_frame:000000000000946C                 db 0BFh
.eh_frame:000000000000946D                 db    0
.eh_frame:000000000000946E                 db    0
.eh_frame:000000000000946F                 db    0
.eh_frame:0000000000009470                 db    0
.eh_frame:0000000000009471                 db  42h ; B
.eh_frame:0000000000009472                 db  0Eh
.eh_frame:0000000000009473                 db  10h
.eh_frame:0000000000009474                 db  8Eh
.eh_frame:0000000000009475                 db    2
.eh_frame:0000000000009476                 db  42h ; B
.eh_frame:0000000000009477                 db  0Eh
.eh_frame:0000000000009478                 db  18h
.eh_frame:0000000000009479                 db  8Dh
.eh_frame:000000000000947A                 db    3
.eh_frame:000000000000947B                 db  45h ; E
.eh_frame:000000000000947C                 db  0Eh
.eh_frame:000000000000947D                 db  20h
.eh_frame:000000000000947E                 db  8Ch
.eh_frame:000000000000947F                 db    4
.eh_frame:0000000000009480                 db  41h ; A
.eh_frame:0000000000009481                 db  0Eh
.eh_frame:0000000000009482                 db  28h ; (
.eh_frame:0000000000009483                 db  86h
.eh_frame:0000000000009484                 db    5
.eh_frame:0000000000009485                 db  44h ; D
.eh_frame:0000000000009486                 db  0Eh
.eh_frame:0000000000009487                 db  30h ; 0
.eh_frame:0000000000009488                 db  83h
.eh_frame:0000000000009489                 db    6
.eh_frame:000000000000948A                 db  4Dh ; M
.eh_frame:000000000000948B                 db  0Eh
.eh_frame:000000000000948C                 db  50h ; P
.eh_frame:000000000000948D                 db    2
.eh_frame:000000000000948E                 db  76h ; v
.eh_frame:000000000000948F                 db  0Ah
.eh_frame:0000000000009490                 db  0Eh
.eh_frame:0000000000009491                 db  30h ; 0
.eh_frame:0000000000009492                 db  41h ; A
.eh_frame:0000000000009493                 db  0Eh
.eh_frame:0000000000009494                 db  28h ; (
.eh_frame:0000000000009495                 db  41h ; A
.eh_frame:0000000000009496                 db  0Eh
.eh_frame:0000000000009497                 db  20h
.eh_frame:0000000000009498                 db  42h ; B
.eh_frame:0000000000009499                 db  0Eh
.eh_frame:000000000000949A                 db  18h
.eh_frame:000000000000949B                 db  42h ; B
.eh_frame:000000000000949C                 db  0Eh
.eh_frame:000000000000949D                 db  10h
.eh_frame:000000000000949E                 db  42h ; B
.eh_frame:000000000000949F                 db  0Eh
.eh_frame:00000000000094A0                 db    8
.eh_frame:00000000000094A1                 db  47h ; G
.eh_frame:00000000000094A2                 db  0Bh
.eh_frame:00000000000094A3                 db    0
.eh_frame:00000000000094A4                 db    0
.eh_frame:00000000000094A5                 db    0
.eh_frame:00000000000094A6                 db    0
.eh_frame:00000000000094A7                 db    0
.eh_frame:00000000000094A8                 db  10h
.eh_frame:00000000000094A9                 db    0
.eh_frame:00000000000094AA                 db    0
.eh_frame:00000000000094AB                 db    0
.eh_frame:00000000000094AC                 db  94h
.eh_frame:00000000000094AD                 db    6
.eh_frame:00000000000094AE                 db    0
.eh_frame:00000000000094AF                 db    0
.eh_frame:00000000000094B0                 db 0B0h
.eh_frame:00000000000094B1                 db 0AEh
.eh_frame:00000000000094B2                 db 0FFh
.eh_frame:00000000000094B3                 db 0FFh
.eh_frame:00000000000094B4                 db    8
.eh_frame:00000000000094B5                 db    0
.eh_frame:00000000000094B6                 db    0
.eh_frame:00000000000094B7                 db    0
.eh_frame:00000000000094B8                 db    0
.eh_frame:00000000000094B9                 db    0
.eh_frame:00000000000094BA                 db    0
.eh_frame:00000000000094BB                 db    0
.eh_frame:00000000000094BC                 db  10h
.eh_frame:00000000000094BD                 db    0
.eh_frame:00000000000094BE                 db    0
.eh_frame:00000000000094BF                 db    0
.eh_frame:00000000000094C0                 db 0A8h
.eh_frame:00000000000094C1                 db    6
.eh_frame:00000000000094C2                 db    0
.eh_frame:00000000000094C3                 db    0
.eh_frame:00000000000094C4                 db 0ACh
.eh_frame:00000000000094C5                 db 0AEh
.eh_frame:00000000000094C6                 db 0FFh
.eh_frame:00000000000094C7                 db 0FFh
.eh_frame:00000000000094C8                 db    8
.eh_frame:00000000000094C9                 db    0
.eh_frame:00000000000094CA                 db    0
.eh_frame:00000000000094CB                 db    0
.eh_frame:00000000000094CC                 db    0
.eh_frame:00000000000094CD                 db    0
.eh_frame:00000000000094CE                 db    0
.eh_frame:00000000000094CF                 db    0
.eh_frame:00000000000094D0                 db  2Ch ; ,
.eh_frame:00000000000094D1                 db    0
.eh_frame:00000000000094D2                 db    0
.eh_frame:00000000000094D3                 db    0
.eh_frame:00000000000094D4                 db 0BCh
.eh_frame:00000000000094D5                 db    6
.eh_frame:00000000000094D6                 db    0
.eh_frame:00000000000094D7                 db    0
.eh_frame:00000000000094D8                 db 0A8h
.eh_frame:00000000000094D9                 db 0AEh
.eh_frame:00000000000094DA                 db 0FFh
.eh_frame:00000000000094DB                 db 0FFh
.eh_frame:00000000000094DC                 db 0A4h
.eh_frame:00000000000094DD                 db    0
.eh_frame:00000000000094DE                 db    0
.eh_frame:00000000000094DF                 db    0
.eh_frame:00000000000094E0                 db    0
.eh_frame:00000000000094E1                 db  41h ; A
.eh_frame:00000000000094E2                 db  0Eh
.eh_frame:00000000000094E3                 db  10h
.eh_frame:00000000000094E4                 db  86h
.eh_frame:00000000000094E5                 db    2
.eh_frame:00000000000094E6                 db  41h ; A
.eh_frame:00000000000094E7                 db  0Eh
.eh_frame:00000000000094E8                 db  18h
.eh_frame:00000000000094E9                 db  83h
.eh_frame:00000000000094EA                 db    3
.eh_frame:00000000000094EB                 db  44h ; D
.eh_frame:00000000000094EC                 db  0Eh
.eh_frame:00000000000094ED                 db  20h
.eh_frame:00000000000094EE                 db  7Ah ; z
.eh_frame:00000000000094EF                 db  0Ah
.eh_frame:00000000000094F0                 db  0Eh
.eh_frame:00000000000094F1                 db  18h
.eh_frame:00000000000094F2                 db  41h ; A
.eh_frame:00000000000094F3                 db  0Eh
.eh_frame:00000000000094F4                 db  10h
.eh_frame:00000000000094F5                 db  41h ; A
.eh_frame:00000000000094F6                 db  0Eh
.eh_frame:00000000000094F7                 db    8
.eh_frame:00000000000094F8                 db  41h ; A
.eh_frame:00000000000094F9                 db  0Bh
.eh_frame:00000000000094FA                 db    0
.eh_frame:00000000000094FB                 db    0
.eh_frame:00000000000094FC                 db    0
.eh_frame:00000000000094FD                 db    0
.eh_frame:00000000000094FE                 db    0
.eh_frame:00000000000094FF                 db    0
.eh_frame:0000000000009500                 db  10h
.eh_frame:0000000000009501                 db    0
.eh_frame:0000000000009502                 db    0
.eh_frame:0000000000009503                 db    0
.eh_frame:0000000000009504                 db 0ECh
.eh_frame:0000000000009505                 db    6
.eh_frame:0000000000009506                 db    0
.eh_frame:0000000000009507                 db    0
.eh_frame:0000000000009508                 db  28h ; (
.eh_frame:0000000000009509                 db 0AFh
.eh_frame:000000000000950A                 db 0FFh
.eh_frame:000000000000950B                 db 0FFh
.eh_frame:000000000000950C                 db    5
.eh_frame:000000000000950D                 db    0
.eh_frame:000000000000950E                 db    0
.eh_frame:000000000000950F                 db    0
.eh_frame:0000000000009510                 db    0
.eh_frame:0000000000009511                 db    0
.eh_frame:0000000000009512                 db    0
.eh_frame:0000000000009513                 db    0
.eh_frame:0000000000009514                 db  18h
.eh_frame:0000000000009515                 db    0
.eh_frame:0000000000009516                 db    0
.eh_frame:0000000000009517                 db    0
.eh_frame:0000000000009518                 db    0
.eh_frame:0000000000009519                 db    7
.eh_frame:000000000000951A                 db    0
.eh_frame:000000000000951B                 db    0
.eh_frame:000000000000951C                 db  24h ; $
.eh_frame:000000000000951D                 db 0AFh
.eh_frame:000000000000951E                 db 0FFh
.eh_frame:000000000000951F                 db 0FFh
.eh_frame:0000000000009520                 db  22h ; "
.eh_frame:0000000000009521                 db    0
.eh_frame:0000000000009522                 db    0
.eh_frame:0000000000009523                 db    0
.eh_frame:0000000000009524                 db    0
.eh_frame:0000000000009525                 db  46h ; F
.eh_frame:0000000000009526                 db  0Eh
.eh_frame:0000000000009527                 db  10h
.eh_frame:0000000000009528                 db  83h
.eh_frame:0000000000009529                 db    2
.eh_frame:000000000000952A                 db  4Eh ; N
.eh_frame:000000000000952B                 db 0C3h
.eh_frame:000000000000952C                 db  0Eh
.eh_frame:000000000000952D                 db    8
.eh_frame:000000000000952E                 db    0
.eh_frame:000000000000952F                 db    0
.eh_frame:0000000000009530                 db  1Ch
.eh_frame:0000000000009531                 db    0
.eh_frame:0000000000009532                 db    0
.eh_frame:0000000000009533                 db    0
.eh_frame:0000000000009534                 db  1Ch
.eh_frame:0000000000009535                 db    7
.eh_frame:0000000000009536                 db    0
.eh_frame:0000000000009537                 db    0
.eh_frame:0000000000009538                 db  38h ; 8
.eh_frame:0000000000009539                 db 0AFh
.eh_frame:000000000000953A                 db 0FFh
.eh_frame:000000000000953B                 db 0FFh
.eh_frame:000000000000953C                 db  9Fh
.eh_frame:000000000000953D                 db    0
.eh_frame:000000000000953E                 db    0
.eh_frame:000000000000953F                 db    0
.eh_frame:0000000000009540                 db    0
.eh_frame:0000000000009541                 db  44h ; D
.eh_frame:0000000000009542                 db  0Eh
.eh_frame:0000000000009543                 db  10h
.eh_frame:0000000000009544                 db  83h
.eh_frame:0000000000009545                 db    2
.eh_frame:0000000000009546                 db    2
.eh_frame:0000000000009547                 db  78h ; x
.eh_frame:0000000000009548                 db  0Ah
.eh_frame:0000000000009549                 db  0Eh
.eh_frame:000000000000954A                 db    8
.eh_frame:000000000000954B                 db  41h ; A
.eh_frame:000000000000954C                 db  0Bh
.eh_frame:000000000000954D                 db    0
.eh_frame:000000000000954E                 db    0
.eh_frame:000000000000954F                 db    0
.eh_frame:0000000000009550                 db  40h ; @
.eh_frame:0000000000009551                 db    0
.eh_frame:0000000000009552                 db    0
.eh_frame:0000000000009553                 db    0
.eh_frame:0000000000009554                 db  3Ch ; <
.eh_frame:0000000000009555                 db    7
.eh_frame:0000000000009556                 db    0
.eh_frame:0000000000009557                 db    0
.eh_frame:0000000000009558                 db 0B8h
.eh_frame:0000000000009559                 db 0AFh
.eh_frame:000000000000955A                 db 0FFh
.eh_frame:000000000000955B                 db 0FFh
.eh_frame:000000000000955C                 db 0E7h
.eh_frame:000000000000955D                 db    0
.eh_frame:000000000000955E                 db    0
.eh_frame:000000000000955F                 db    0
.eh_frame:0000000000009560                 db    0
.eh_frame:0000000000009561                 db  41h ; A
.eh_frame:0000000000009562                 db  0Eh
.eh_frame:0000000000009563                 db  10h
.eh_frame:0000000000009564                 db  86h
.eh_frame:0000000000009565                 db    2
.eh_frame:0000000000009566                 db  41h ; A
.eh_frame:0000000000009567                 db  0Eh
.eh_frame:0000000000009568                 db  18h
.eh_frame:0000000000009569                 db  83h
.eh_frame:000000000000956A                 db    3
.eh_frame:000000000000956B                 db  49h ; I
.eh_frame:000000000000956C                 db  0Eh
.eh_frame:000000000000956D                 db  20h
.eh_frame:000000000000956E                 db  6Eh ; n
.eh_frame:000000000000956F                 db  0Ah
.eh_frame:0000000000009570                 db  0Eh
.eh_frame:0000000000009571                 db  18h
.eh_frame:0000000000009572                 db  41h ; A
.eh_frame:0000000000009573                 db  0Eh
.eh_frame:0000000000009574                 db  10h
.eh_frame:0000000000009575                 db  41h ; A
.eh_frame:0000000000009576                 db  0Eh
.eh_frame:0000000000009577                 db    8
.eh_frame:0000000000009578                 db  45h ; E
.eh_frame:0000000000009579                 db  0Bh
.eh_frame:000000000000957A                 db    2
.eh_frame:000000000000957B                 db  4Ah ; J
.eh_frame:000000000000957C                 db  0Ah
.eh_frame:000000000000957D                 db  0Eh
.eh_frame:000000000000957E                 db  18h
.eh_frame:000000000000957F                 db  41h ; A
.eh_frame:0000000000009580                 db  0Eh
.eh_frame:0000000000009581                 db  10h
.eh_frame:0000000000009582                 db  41h ; A
.eh_frame:0000000000009583                 db  0Eh
.eh_frame:0000000000009584                 db    8
.eh_frame:0000000000009585                 db  44h ; D
.eh_frame:0000000000009586                 db  0Bh
.eh_frame:0000000000009587                 db    2
.eh_frame:0000000000009588                 db  54h ; T
.eh_frame:0000000000009589                 db  0Eh
.eh_frame:000000000000958A                 db  18h
.eh_frame:000000000000958B                 db  41h ; A
.eh_frame:000000000000958C                 db  0Eh
.eh_frame:000000000000958D                 db  10h
.eh_frame:000000000000958E                 db  41h ; A
.eh_frame:000000000000958F                 db  0Eh
.eh_frame:0000000000009590                 db    8
.eh_frame:0000000000009591                 db    0
.eh_frame:0000000000009592                 db    0
.eh_frame:0000000000009593                 db    0
.eh_frame:0000000000009594                 db  74h ; t
.eh_frame:0000000000009595                 db    0
.eh_frame:0000000000009596                 db    0
.eh_frame:0000000000009597                 db    0
.eh_frame:0000000000009598                 db  80h
.eh_frame:0000000000009599                 db    7
.eh_frame:000000000000959A                 db    0
.eh_frame:000000000000959B                 db    0
.eh_frame:000000000000959C                 db  64h ; d
.eh_frame:000000000000959D                 db 0B0h
.eh_frame:000000000000959E                 db 0FFh
.eh_frame:000000000000959F                 db 0FFh
.eh_frame:00000000000095A0                 db  34h ; 4
.eh_frame:00000000000095A1                 db  12h
.eh_frame:00000000000095A2                 db    0
.eh_frame:00000000000095A3                 db    0
.eh_frame:00000000000095A4                 db    0
.eh_frame:00000000000095A5                 db  42h ; B
.eh_frame:00000000000095A6                 db  0Eh
.eh_frame:00000000000095A7                 db  10h
.eh_frame:00000000000095A8                 db  8Fh
.eh_frame:00000000000095A9                 db    2
.eh_frame:00000000000095AA                 db  42h ; B
.eh_frame:00000000000095AB                 db  0Eh
.eh_frame:00000000000095AC                 db  18h
.eh_frame:00000000000095AD                 db  8Eh
.eh_frame:00000000000095AE                 db    3
.eh_frame:00000000000095AF                 db  45h ; E
.eh_frame:00000000000095B0                 db  0Eh
.eh_frame:00000000000095B1                 db  20h
.eh_frame:00000000000095B2                 db  8Dh
.eh_frame:00000000000095B3                 db    4
.eh_frame:00000000000095B4                 db  42h ; B
.eh_frame:00000000000095B5                 db  0Eh
.eh_frame:00000000000095B6                 db  28h ; (
.eh_frame:00000000000095B7                 db  8Ch
.eh_frame:00000000000095B8                 db    5
.eh_frame:00000000000095B9                 db  44h ; D
.eh_frame:00000000000095BA                 db  0Eh
.eh_frame:00000000000095BB                 db  30h ; 0
.eh_frame:00000000000095BC                 db  86h
.eh_frame:00000000000095BD                 db    6
.eh_frame:00000000000095BE                 db  41h ; A
.eh_frame:00000000000095BF                 db  0Eh
.eh_frame:00000000000095C0                 db  38h ; 8
.eh_frame:00000000000095C1                 db  83h
.eh_frame:00000000000095C2                 db    7
.eh_frame:00000000000095C3                 db  53h ; S
.eh_frame:00000000000095C4                 db  0Eh
.eh_frame:00000000000095C5                 db 0F0h
.eh_frame:00000000000095C6                 db    1
.eh_frame:00000000000095C7                 db    3
.eh_frame:00000000000095C8                 db  81h
.eh_frame:00000000000095C9                 db  0Bh
.eh_frame:00000000000095CA                 db  0Eh
.eh_frame:00000000000095CB                 db 0F8h
.eh_frame:00000000000095CC                 db    1
.eh_frame:00000000000095CD                 db  4Ah ; J
.eh_frame:00000000000095CE                 db  0Eh
.eh_frame:00000000000095CF                 db  80h
.eh_frame:00000000000095D0                 db    2
.eh_frame:00000000000095D1                 db  44h ; D
.eh_frame:00000000000095D2                 db  0Eh
.eh_frame:00000000000095D3                 db  88h
.eh_frame:00000000000095D4                 db    2
.eh_frame:00000000000095D5                 db  45h ; E
.eh_frame:00000000000095D6                 db  0Eh
.eh_frame:00000000000095D7                 db  90h
.eh_frame:00000000000095D8                 db    2
.eh_frame:00000000000095D9                 db  5Fh ; _
.eh_frame:00000000000095DA                 db  0Eh
.eh_frame:00000000000095DB                 db 0F0h
.eh_frame:00000000000095DC                 db    1
.eh_frame:00000000000095DD                 db  64h ; d
.eh_frame:00000000000095DE                 db  0Ah
.eh_frame:00000000000095DF                 db  0Eh
.eh_frame:00000000000095E0                 db  38h ; 8
.eh_frame:00000000000095E1                 db  41h ; A
.eh_frame:00000000000095E2                 db  0Eh
.eh_frame:00000000000095E3                 db  30h ; 0
.eh_frame:00000000000095E4                 db  41h ; A
.eh_frame:00000000000095E5                 db  0Eh
.eh_frame:00000000000095E6                 db  28h ; (
.eh_frame:00000000000095E7                 db  42h ; B
.eh_frame:00000000000095E8                 db  0Eh
.eh_frame:00000000000095E9                 db  20h
.eh_frame:00000000000095EA                 db  42h ; B
.eh_frame:00000000000095EB                 db  0Eh
.eh_frame:00000000000095EC                 db  18h
.eh_frame:00000000000095ED                 db  42h ; B
.eh_frame:00000000000095EE                 db  0Eh
.eh_frame:00000000000095EF                 db  10h
.eh_frame:00000000000095F0                 db  42h ; B
.eh_frame:00000000000095F1                 db  0Eh
.eh_frame:00000000000095F2                 db    8
.eh_frame:00000000000095F3                 db  44h ; D
.eh_frame:00000000000095F4                 db  0Bh
.eh_frame:00000000000095F5                 db    3
.eh_frame:00000000000095F6                 db  99h
.eh_frame:00000000000095F7                 db    5
.eh_frame:00000000000095F8                 db  0Eh
.eh_frame:00000000000095F9                 db 0F8h
.eh_frame:00000000000095FA                 db    1
.eh_frame:00000000000095FB                 db  4Dh ; M
.eh_frame:00000000000095FC                 db  0Eh
.eh_frame:00000000000095FD                 db  80h
.eh_frame:00000000000095FE                 db    2
.eh_frame:00000000000095FF                 db  44h ; D
.eh_frame:0000000000009600                 db  0Eh
.eh_frame:0000000000009601                 db  88h
.eh_frame:0000000000009602                 db    2
.eh_frame:0000000000009603                 db  47h ; G
.eh_frame:0000000000009604                 db  0Eh
.eh_frame:0000000000009605                 db  90h
.eh_frame:0000000000009606                 db    2
.eh_frame:0000000000009607                 db  5Bh ; [
.eh_frame:0000000000009608                 db  0Eh
.eh_frame:0000000000009609                 db 0F0h
.eh_frame:000000000000960A                 db    1
.eh_frame:000000000000960B                 db    0
.eh_frame:000000000000960C                 db  68h ; h
.eh_frame:000000000000960D                 db    0
.eh_frame:000000000000960E                 db    0
.eh_frame:000000000000960F                 db    0
.eh_frame:0000000000009610                 db 0F8h
.eh_frame:0000000000009611                 db    7
.eh_frame:0000000000009612                 db    0
.eh_frame:0000000000009613                 db    0
.eh_frame:0000000000009614                 db  2Ch ; ,
.eh_frame:0000000000009615                 db 0C2h
.eh_frame:0000000000009616                 db 0FFh
.eh_frame:0000000000009617                 db 0FFh
.eh_frame:0000000000009618                 db 0ABh
.eh_frame:0000000000009619                 db    1
.eh_frame:000000000000961A                 db    0
.eh_frame:000000000000961B                 db    0
.eh_frame:000000000000961C                 db    0
.eh_frame:000000000000961D                 db  42h ; B
.eh_frame:000000000000961E                 db  0Eh
.eh_frame:000000000000961F                 db  10h
.eh_frame:0000000000009620                 db  8Fh
.eh_frame:0000000000009621                 db    2
.eh_frame:0000000000009622                 db  42h ; B
.eh_frame:0000000000009623                 db  0Eh
.eh_frame:0000000000009624                 db  18h
.eh_frame:0000000000009625                 db  8Eh
.eh_frame:0000000000009626                 db    3
.eh_frame:0000000000009627                 db  45h ; E
.eh_frame:0000000000009628                 db  0Eh
.eh_frame:0000000000009629                 db  20h
.eh_frame:000000000000962A                 db  8Dh
.eh_frame:000000000000962B                 db    4
.eh_frame:000000000000962C                 db  42h ; B
.eh_frame:000000000000962D                 db  0Eh
.eh_frame:000000000000962E                 db  28h ; (
.eh_frame:000000000000962F                 db  8Ch
.eh_frame:0000000000009630                 db    5
.eh_frame:0000000000009631                 db  44h ; D
.eh_frame:0000000000009632                 db  0Eh
.eh_frame:0000000000009633                 db  30h ; 0
.eh_frame:0000000000009634                 db  86h
.eh_frame:0000000000009635                 db    6
.eh_frame:0000000000009636                 db  41h ; A
.eh_frame:0000000000009637                 db  0Eh
.eh_frame:0000000000009638                 db  38h ; 8
.eh_frame:0000000000009639                 db  83h
.eh_frame:000000000000963A                 db    7
.eh_frame:000000000000963B                 db  47h ; G
.eh_frame:000000000000963C                 db  0Eh
.eh_frame:000000000000963D                 db  60h ; `
.eh_frame:000000000000963E                 db    2
.eh_frame:000000000000963F                 db  99h
.eh_frame:0000000000009640                 db  0Eh
.eh_frame:0000000000009641                 db  68h ; h
.eh_frame:0000000000009642                 db  5Fh ; _
.eh_frame:0000000000009643                 db  0Eh
.eh_frame:0000000000009644                 db  70h ; p
.eh_frame:0000000000009645                 db  46h ; F
.eh_frame:0000000000009646                 db  0Eh
.eh_frame:0000000000009647                 db  78h ; x
.eh_frame:0000000000009648                 db  42h ; B
.eh_frame:0000000000009649                 db  0Eh
.eh_frame:000000000000964A                 db  80h
.eh_frame:000000000000964B                 db    1
.eh_frame:000000000000964C                 db  59h ; Y
.eh_frame:000000000000964D                 db  0Eh
.eh_frame:000000000000964E                 db  60h ; `
.eh_frame:000000000000964F                 db    2
.eh_frame:0000000000009650                 db  40h ; @
.eh_frame:0000000000009651                 db  0Eh
.eh_frame:0000000000009652                 db  68h ; h
.eh_frame:0000000000009653                 db  4Bh ; K
.eh_frame:0000000000009654                 db  0Eh
.eh_frame:0000000000009655                 db  70h ; p
.eh_frame:0000000000009656                 db  43h ; C
.eh_frame:0000000000009657                 db  0Eh
.eh_frame:0000000000009658                 db  78h ; x
.eh_frame:0000000000009659                 db  45h ; E
.eh_frame:000000000000965A                 db  0Eh
.eh_frame:000000000000965B                 db  80h
.eh_frame:000000000000965C                 db    1
.eh_frame:000000000000965D                 db  5Eh ; ^
.eh_frame:000000000000965E                 db  0Eh
.eh_frame:000000000000965F                 db  60h ; `
.eh_frame:0000000000009660                 db  4Ch ; L
.eh_frame:0000000000009661                 db  0Ah
.eh_frame:0000000000009662                 db  0Eh
.eh_frame:0000000000009663                 db  38h ; 8
.eh_frame:0000000000009664                 db  44h ; D
.eh_frame:0000000000009665                 db  0Eh
.eh_frame:0000000000009666                 db  30h ; 0
.eh_frame:0000000000009667                 db  41h ; A
.eh_frame:0000000000009668                 db  0Eh
.eh_frame:0000000000009669                 db  28h ; (
.eh_frame:000000000000966A                 db  42h ; B
.eh_frame:000000000000966B                 db  0Eh
.eh_frame:000000000000966C                 db  20h
.eh_frame:000000000000966D                 db  42h ; B
.eh_frame:000000000000966E                 db  0Eh
.eh_frame:000000000000966F                 db  18h
.eh_frame:0000000000009670                 db  42h ; B
.eh_frame:0000000000009671                 db  0Eh
.eh_frame:0000000000009672                 db  10h
.eh_frame:0000000000009673                 db  42h ; B
.eh_frame:0000000000009674                 db  0Eh
.eh_frame:0000000000009675                 db    8
.eh_frame:0000000000009676                 db  46h ; F
.eh_frame:0000000000009677                 db  0Bh
.eh_frame:0000000000009678                 db  28h ; (
.eh_frame:0000000000009679                 db    0
.eh_frame:000000000000967A                 db    0
.eh_frame:000000000000967B                 db    0
.eh_frame:000000000000967C                 db  64h ; d
.eh_frame:000000000000967D                 db    8
.eh_frame:000000000000967E                 db    0
.eh_frame:000000000000967F                 db    0
.eh_frame:0000000000009680                 db  70h ; p
.eh_frame:0000000000009681                 db 0C3h
.eh_frame:0000000000009682                 db 0FFh
.eh_frame:0000000000009683                 db 0FFh
.eh_frame:0000000000009684                 db  36h ; 6
.eh_frame:0000000000009685                 db    0
.eh_frame:0000000000009686                 db    0
.eh_frame:0000000000009687                 db    0
.eh_frame:0000000000009688                 db    0
.eh_frame:0000000000009689                 db  42h ; B
.eh_frame:000000000000968A                 db  0Eh
.eh_frame:000000000000968B                 db  10h
.eh_frame:000000000000968C                 db  8Ch
.eh_frame:000000000000968D                 db    2
.eh_frame:000000000000968E                 db  41h ; A
.eh_frame:000000000000968F                 db  0Eh
.eh_frame:0000000000009690                 db  18h
.eh_frame:0000000000009691                 db  86h
.eh_frame:0000000000009692                 db    3
.eh_frame:0000000000009693                 db  41h ; A
.eh_frame:0000000000009694                 db  0Eh
.eh_frame:0000000000009695                 db  20h
.eh_frame:0000000000009696                 db  83h
.eh_frame:0000000000009697                 db    4
.eh_frame:0000000000009698                 db  6Eh ; n
.eh_frame:0000000000009699                 db  0Eh
.eh_frame:000000000000969A                 db  18h
.eh_frame:000000000000969B                 db  41h ; A
.eh_frame:000000000000969C                 db  0Eh
.eh_frame:000000000000969D                 db  10h
.eh_frame:000000000000969E                 db  42h ; B
.eh_frame:000000000000969F                 db  0Eh
.eh_frame:00000000000096A0                 db    8
.eh_frame:00000000000096A1                 db    0
.eh_frame:00000000000096A2                 db    0
.eh_frame:00000000000096A3                 db    0
.eh_frame:00000000000096A4                 db  10h
.eh_frame:00000000000096A5                 db    0
.eh_frame:00000000000096A6                 db    0
.eh_frame:00000000000096A7                 db    0
.eh_frame:00000000000096A8                 db  90h
.eh_frame:00000000000096A9                 db    8
.eh_frame:00000000000096AA                 db    0
.eh_frame:00000000000096AB                 db    0
.eh_frame:00000000000096AC                 db  84h
.eh_frame:00000000000096AD                 db 0C3h
.eh_frame:00000000000096AE                 db 0FFh
.eh_frame:00000000000096AF                 db 0FFh
.eh_frame:00000000000096B0                 db  11h
.eh_frame:00000000000096B1                 db    0
.eh_frame:00000000000096B2                 db    0
.eh_frame:00000000000096B3                 db    0
.eh_frame:00000000000096B4                 db    0
.eh_frame:00000000000096B5                 db    0
.eh_frame:00000000000096B6                 db    0
.eh_frame:00000000000096B7                 db    0
.eh_frame:00000000000096B8                 db  10h
.eh_frame:00000000000096B9                 db    0
.eh_frame:00000000000096BA                 db    0
.eh_frame:00000000000096BB                 db    0
.eh_frame:00000000000096BC                 db 0A4h
.eh_frame:00000000000096BD                 db    8
.eh_frame:00000000000096BE                 db    0
.eh_frame:00000000000096BF                 db    0
.eh_frame:00000000000096C0                 db  90h
.eh_frame:00000000000096C1                 db 0C3h
.eh_frame:00000000000096C2                 db 0FFh
.eh_frame:00000000000096C3                 db 0FFh
.eh_frame:00000000000096C4                 db  11h
.eh_frame:00000000000096C5                 db    0
.eh_frame:00000000000096C6                 db    0
.eh_frame:00000000000096C7                 db    0
.eh_frame:00000000000096C8                 db    0
.eh_frame:00000000000096C9                 db    0
.eh_frame:00000000000096CA                 db    0
.eh_frame:00000000000096CB                 db    0
.eh_frame:00000000000096CC                 db  10h
.eh_frame:00000000000096CD                 db    0
.eh_frame:00000000000096CE                 db    0
.eh_frame:00000000000096CF                 db    0
.eh_frame:00000000000096D0                 db 0B8h
.eh_frame:00000000000096D1                 db    8
.eh_frame:00000000000096D2                 db    0
.eh_frame:00000000000096D3                 db    0
.eh_frame:00000000000096D4                 db  9Ch
.eh_frame:00000000000096D5                 db 0C3h
.eh_frame:00000000000096D6                 db 0FFh
.eh_frame:00000000000096D7                 db 0FFh
.eh_frame:00000000000096D8                 db  35h ; 5
.eh_frame:00000000000096D9                 db    0
.eh_frame:00000000000096DA                 db    0
.eh_frame:00000000000096DB                 db    0
.eh_frame:00000000000096DC                 db    0
.eh_frame:00000000000096DD                 db    0
.eh_frame:00000000000096DE                 db    0
.eh_frame:00000000000096DF                 db    0
.eh_frame:00000000000096E0                 db  10h
.eh_frame:00000000000096E1                 db    0
.eh_frame:00000000000096E2                 db    0
.eh_frame:00000000000096E3                 db    0
.eh_frame:00000000000096E4                 db 0CCh
.eh_frame:00000000000096E5                 db    8
.eh_frame:00000000000096E6                 db    0
.eh_frame:00000000000096E7                 db    0
.eh_frame:00000000000096E8                 db 0C8h
.eh_frame:00000000000096E9                 db 0C3h
.eh_frame:00000000000096EA                 db 0FFh
.eh_frame:00000000000096EB                 db 0FFh
.eh_frame:00000000000096EC                 db  15h
.eh_frame:00000000000096ED                 db    0
.eh_frame:00000000000096EE                 db    0
.eh_frame:00000000000096EF                 db    0
.eh_frame:00000000000096F0                 db    0
.eh_frame:00000000000096F1                 db    0
.eh_frame:00000000000096F2                 db    0
.eh_frame:00000000000096F3                 db    0
.eh_frame:00000000000096F4                 db  10h
.eh_frame:00000000000096F5                 db    0
.eh_frame:00000000000096F6                 db    0
.eh_frame:00000000000096F7                 db    0
.eh_frame:00000000000096F8                 db 0E0h
.eh_frame:00000000000096F9                 db    8
.eh_frame:00000000000096FA                 db    0
.eh_frame:00000000000096FB                 db    0
.eh_frame:00000000000096FC                 db 0D4h
.eh_frame:00000000000096FD                 db 0C3h
.eh_frame:00000000000096FE                 db 0FFh
.eh_frame:00000000000096FF                 db 0FFh
.eh_frame:0000000000009700                 db  30h ; 0
.eh_frame:0000000000009701                 db    0
.eh_frame:0000000000009702                 db    0
.eh_frame:0000000000009703                 db    0
.eh_frame:0000000000009704                 db    0
.eh_frame:0000000000009705                 db  6Bh ; k
.eh_frame:0000000000009706                 db  0Eh
.eh_frame:0000000000009707                 db  10h
.eh_frame:0000000000009708                 db  50h ; P
.eh_frame:0000000000009709                 db    0
.eh_frame:000000000000970A                 db    0
.eh_frame:000000000000970B                 db    0
.eh_frame:000000000000970C                 db 0F4h
.eh_frame:000000000000970D                 db    8
.eh_frame:000000000000970E                 db    0
.eh_frame:000000000000970F                 db    0
.eh_frame:0000000000009710                 db 0F0h
.eh_frame:0000000000009711                 db 0C3h
.eh_frame:0000000000009712                 db 0FFh
.eh_frame:0000000000009713                 db 0FFh
.eh_frame:0000000000009714                 db  74h ; t
.eh_frame:0000000000009715                 db    0
.eh_frame:0000000000009716                 db    0
.eh_frame:0000000000009717                 db    0
.eh_frame:0000000000009718                 db    0
.eh_frame:0000000000009719                 db  42h ; B
.eh_frame:000000000000971A                 db  0Eh
.eh_frame:000000000000971B                 db  10h
.eh_frame:000000000000971C                 db  8Fh
.eh_frame:000000000000971D                 db    2
.eh_frame:000000000000971E                 db  42h ; B
.eh_frame:000000000000971F                 db  0Eh
.eh_frame:0000000000009720                 db  18h
.eh_frame:0000000000009721                 db  8Eh
.eh_frame:0000000000009722                 db    3
.eh_frame:0000000000009723                 db  49h ; I
.eh_frame:0000000000009724                 db  0Eh
.eh_frame:0000000000009725                 db  20h
.eh_frame:0000000000009726                 db  8Dh
.eh_frame:0000000000009727                 db    4
.eh_frame:0000000000009728                 db  42h ; B
.eh_frame:0000000000009729                 db  0Eh
.eh_frame:000000000000972A                 db  28h ; (
.eh_frame:000000000000972B                 db  8Ch
.eh_frame:000000000000972C                 db    5
.eh_frame:000000000000972D                 db  44h ; D
.eh_frame:000000000000972E                 db  0Eh
.eh_frame:000000000000972F                 db  30h ; 0
.eh_frame:0000000000009730                 db  86h
.eh_frame:0000000000009731                 db    6
.eh_frame:0000000000009732                 db  41h ; A
.eh_frame:0000000000009733                 db  0Eh
.eh_frame:0000000000009734                 db  38h ; 8
.eh_frame:0000000000009735                 db  83h
.eh_frame:0000000000009736                 db    7
.eh_frame:0000000000009737                 db  4Dh ; M
.eh_frame:0000000000009738                 db  0Eh
.eh_frame:0000000000009739                 db  50h ; P
.eh_frame:000000000000973A                 db  5Fh ; _
.eh_frame:000000000000973B                 db  0Eh
.eh_frame:000000000000973C                 db  58h ; X
.eh_frame:000000000000973D                 db  47h ; G
.eh_frame:000000000000973E                 db  0Eh
.eh_frame:000000000000973F                 db  60h ; `
.eh_frame:0000000000009740                 db  46h ; F
.eh_frame:0000000000009741                 db  0Eh
.eh_frame:0000000000009742                 db  68h ; h
.eh_frame:0000000000009743                 db  44h ; D
.eh_frame:0000000000009744                 db  0Eh
.eh_frame:0000000000009745                 db  70h ; p
.eh_frame:0000000000009746                 db  58h ; X
.eh_frame:0000000000009747                 db  0Eh
.eh_frame:0000000000009748                 db  38h ; 8
.eh_frame:0000000000009749                 db  41h ; A
.eh_frame:000000000000974A                 db  0Eh
.eh_frame:000000000000974B                 db  30h ; 0
.eh_frame:000000000000974C                 db  41h ; A
.eh_frame:000000000000974D                 db  0Eh
.eh_frame:000000000000974E                 db  28h ; (
.eh_frame:000000000000974F                 db  42h ; B
.eh_frame:0000000000009750                 db  0Eh
.eh_frame:0000000000009751                 db  20h
.eh_frame:0000000000009752                 db  42h ; B
.eh_frame:0000000000009753                 db  0Eh
.eh_frame:0000000000009754                 db  18h
.eh_frame:0000000000009755                 db  42h ; B
.eh_frame:0000000000009756                 db  0Eh
.eh_frame:0000000000009757                 db  10h
.eh_frame:0000000000009758                 db  42h ; B
.eh_frame:0000000000009759                 db  0Eh
.eh_frame:000000000000975A                 db    8
.eh_frame:000000000000975B                 db    0
.eh_frame:000000000000975C                 db  68h ; h
.eh_frame:000000000000975D                 db    0
.eh_frame:000000000000975E                 db    0
.eh_frame:000000000000975F                 db    0
.eh_frame:0000000000009760                 db  48h ; H
.eh_frame:0000000000009761                 db    9
.eh_frame:0000000000009762                 db    0
.eh_frame:0000000000009763                 db    0
.eh_frame:0000000000009764                 db  1Ch
.eh_frame:0000000000009765                 db 0C4h
.eh_frame:0000000000009766                 db 0FFh
.eh_frame:0000000000009767                 db 0FFh
.eh_frame:0000000000009768                 db 0E3h
.eh_frame:0000000000009769                 db    0
.eh_frame:000000000000976A                 db    0
.eh_frame:000000000000976B                 db    0
.eh_frame:000000000000976C                 db    0
.eh_frame:000000000000976D                 db  42h ; B
.eh_frame:000000000000976E                 db  0Eh
.eh_frame:000000000000976F                 db  10h
.eh_frame:0000000000009770                 db  8Fh
.eh_frame:0000000000009771                 db    2
.eh_frame:0000000000009772                 db  42h ; B
.eh_frame:0000000000009773                 db  0Eh
.eh_frame:0000000000009774                 db  18h
.eh_frame:0000000000009775                 db  8Eh
.eh_frame:0000000000009776                 db    3
.eh_frame:0000000000009777                 db  49h ; I
.eh_frame:0000000000009778                 db  0Eh
.eh_frame:0000000000009779                 db  20h
.eh_frame:000000000000977A                 db  8Dh
.eh_frame:000000000000977B                 db    4
.eh_frame:000000000000977C                 db  42h ; B
.eh_frame:000000000000977D                 db  0Eh
.eh_frame:000000000000977E                 db  28h ; (
.eh_frame:000000000000977F                 db  8Ch
.eh_frame:0000000000009780                 db    5
.eh_frame:0000000000009781                 db  44h ; D
.eh_frame:0000000000009782                 db  0Eh
.eh_frame:0000000000009783                 db  30h ; 0
.eh_frame:0000000000009784                 db  86h
.eh_frame:0000000000009785                 db    6
.eh_frame:0000000000009786                 db  41h ; A
.eh_frame:0000000000009787                 db  0Eh
.eh_frame:0000000000009788                 db  38h ; 8
.eh_frame:0000000000009789                 db  83h
.eh_frame:000000000000978A                 db    7
.eh_frame:000000000000978B                 db  4Dh ; M
.eh_frame:000000000000978C                 db  0Eh
.eh_frame:000000000000978D                 db  70h ; p
.eh_frame:000000000000978E                 db  65h ; e
.eh_frame:000000000000978F                 db  0Eh
.eh_frame:0000000000009790                 db  78h ; x
.eh_frame:0000000000009791                 db  4Dh ; M
.eh_frame:0000000000009792                 db  0Eh
.eh_frame:0000000000009793                 db  80h
.eh_frame:0000000000009794                 db    1
.eh_frame:0000000000009795                 db  46h ; F
.eh_frame:0000000000009796                 db  0Eh
.eh_frame:0000000000009797                 db  88h
.eh_frame:0000000000009798                 db    1
.eh_frame:0000000000009799                 db  42h ; B
.eh_frame:000000000000979A                 db  0Eh
.eh_frame:000000000000979B                 db  90h
.eh_frame:000000000000979C                 db    1
.eh_frame:000000000000979D                 db  5Eh ; ^
.eh_frame:000000000000979E                 db  0Eh
.eh_frame:000000000000979F                 db  70h ; p
.eh_frame:00000000000097A0                 db  56h ; V
.eh_frame:00000000000097A1                 db  0Eh
.eh_frame:00000000000097A2                 db  78h ; x
.eh_frame:00000000000097A3                 db  43h ; C
.eh_frame:00000000000097A4                 db  0Eh
.eh_frame:00000000000097A5                 db  80h
.eh_frame:00000000000097A6                 db    1
.eh_frame:00000000000097A7                 db  43h ; C
.eh_frame:00000000000097A8                 db  0Eh
.eh_frame:00000000000097A9                 db  88h
.eh_frame:00000000000097AA                 db    1
.eh_frame:00000000000097AB                 db  56h ; V
.eh_frame:00000000000097AC                 db  0Eh
.eh_frame:00000000000097AD                 db  90h
.eh_frame:00000000000097AE                 db    1
.eh_frame:00000000000097AF                 db  52h ; R
.eh_frame:00000000000097B0                 db  0Eh
.eh_frame:00000000000097B1                 db  70h ; p
.eh_frame:00000000000097B2                 db  5Bh ; [
.eh_frame:00000000000097B3                 db  0Eh
.eh_frame:00000000000097B4                 db  38h ; 8
.eh_frame:00000000000097B5                 db  41h ; A
.eh_frame:00000000000097B6                 db  0Eh
.eh_frame:00000000000097B7                 db  30h ; 0
.eh_frame:00000000000097B8                 db  41h ; A
.eh_frame:00000000000097B9                 db  0Eh
.eh_frame:00000000000097BA                 db  28h ; (
.eh_frame:00000000000097BB                 db  42h ; B
.eh_frame:00000000000097BC                 db  0Eh
.eh_frame:00000000000097BD                 db  20h
.eh_frame:00000000000097BE                 db  42h ; B
.eh_frame:00000000000097BF                 db  0Eh
.eh_frame:00000000000097C0                 db  18h
.eh_frame:00000000000097C1                 db  42h ; B
.eh_frame:00000000000097C2                 db  0Eh
.eh_frame:00000000000097C3                 db  10h
.eh_frame:00000000000097C4                 db  42h ; B
.eh_frame:00000000000097C5                 db  0Eh
.eh_frame:00000000000097C6                 db    8
.eh_frame:00000000000097C7                 db    0
.eh_frame:00000000000097C8                 db  10h
.eh_frame:00000000000097C9                 db    0
.eh_frame:00000000000097CA                 db    0
.eh_frame:00000000000097CB                 db    0
.eh_frame:00000000000097CC                 db 0B4h
.eh_frame:00000000000097CD                 db    9
.eh_frame:00000000000097CE                 db    0
.eh_frame:00000000000097CF                 db    0
.eh_frame:00000000000097D0                 db 0A0h
.eh_frame:00000000000097D1                 db 0C4h
.eh_frame:00000000000097D2                 db 0FFh
.eh_frame:00000000000097D3                 db 0FFh
.eh_frame:00000000000097D4                 db  0Ah
.eh_frame:00000000000097D5                 db    0
.eh_frame:00000000000097D6                 db    0
.eh_frame:00000000000097D7                 db    0
.eh_frame:00000000000097D8                 db    0
.eh_frame:00000000000097D9                 db    0
.eh_frame:00000000000097DA                 db    0
.eh_frame:00000000000097DB                 db    0
.eh_frame:00000000000097DC                 db  28h ; (
.eh_frame:00000000000097DD                 db    0
.eh_frame:00000000000097DE                 db    0
.eh_frame:00000000000097DF                 db    0
.eh_frame:00000000000097E0                 db 0C8h
.eh_frame:00000000000097E1                 db    9
.eh_frame:00000000000097E2                 db    0
.eh_frame:00000000000097E3                 db    0
.eh_frame:00000000000097E4                 db  9Ch
.eh_frame:00000000000097E5                 db 0C4h
.eh_frame:00000000000097E6                 db 0FFh
.eh_frame:00000000000097E7                 db 0FFh
.eh_frame:00000000000097E8                 db  93h
.eh_frame:00000000000097E9                 db    0
.eh_frame:00000000000097EA                 db    0
.eh_frame:00000000000097EB                 db    0
.eh_frame:00000000000097EC                 db    0
.eh_frame:00000000000097ED                 db  48h ; H
.eh_frame:00000000000097EE                 db  0Eh
.eh_frame:00000000000097EF                 db  10h
.eh_frame:00000000000097F0                 db  8Ch
.eh_frame:00000000000097F1                 db    2
.eh_frame:00000000000097F2                 db  48h ; H
.eh_frame:00000000000097F3                 db  0Eh
.eh_frame:00000000000097F4                 db  18h
.eh_frame:00000000000097F5                 db  86h
.eh_frame:00000000000097F6                 db    3
.eh_frame:00000000000097F7                 db  41h ; A
.eh_frame:00000000000097F8                 db  0Eh
.eh_frame:00000000000097F9                 db  20h
.eh_frame:00000000000097FA                 db  83h
.eh_frame:00000000000097FB                 db    4
.eh_frame:00000000000097FC                 db    2
.eh_frame:00000000000097FD                 db  74h ; t
.eh_frame:00000000000097FE                 db  0Eh
.eh_frame:00000000000097FF                 db  18h
.eh_frame:0000000000009800                 db  4Bh ; K
.eh_frame:0000000000009801                 db  0Eh
.eh_frame:0000000000009802                 db  10h
.eh_frame:0000000000009803                 db  42h ; B
.eh_frame:0000000000009804                 db  0Eh
.eh_frame:0000000000009805                 db    8
.eh_frame:0000000000009806                 db    0
.eh_frame:0000000000009807                 db    0
.eh_frame:0000000000009808                 db  10h
.eh_frame:0000000000009809                 db    0
.eh_frame:000000000000980A                 db    0
.eh_frame:000000000000980B                 db    0
.eh_frame:000000000000980C                 db 0F4h
.eh_frame:000000000000980D                 db    9
.eh_frame:000000000000980E                 db    0
.eh_frame:000000000000980F                 db    0
.eh_frame:0000000000009810                 db  10h
.eh_frame:0000000000009811                 db 0C5h
.eh_frame:0000000000009812                 db 0FFh
.eh_frame:0000000000009813                 db 0FFh
.eh_frame:0000000000009814                 db  13h
.eh_frame:0000000000009815                 db    0
.eh_frame:0000000000009816                 db    0
.eh_frame:0000000000009817                 db    0
.eh_frame:0000000000009818                 db    0
.eh_frame:0000000000009819                 db    0
.eh_frame:000000000000981A                 db    0
.eh_frame:000000000000981B                 db    0
.eh_frame:000000000000981C                 db  10h
.eh_frame:000000000000981D                 db    0
.eh_frame:000000000000981E                 db    0
.eh_frame:000000000000981F                 db    0
.eh_frame:0000000000009820                 db    8
.eh_frame:0000000000009821                 db  0Ah
.eh_frame:0000000000009822                 db    0
.eh_frame:0000000000009823                 db    0
.eh_frame:0000000000009824                 db  1Ch
.eh_frame:0000000000009825                 db 0C5h
.eh_frame:0000000000009826                 db 0FFh
.eh_frame:0000000000009827                 db 0FFh
.eh_frame:0000000000009828                 db  0Ch
.eh_frame:0000000000009829                 db    0
.eh_frame:000000000000982A                 db    0
.eh_frame:000000000000982B                 db    0
.eh_frame:000000000000982C                 db    0
.eh_frame:000000000000982D                 db    0
.eh_frame:000000000000982E                 db    0
.eh_frame:000000000000982F                 db    0
.eh_frame:0000000000009830                 db  10h
.eh_frame:0000000000009831                 db    0
.eh_frame:0000000000009832                 db    0
.eh_frame:0000000000009833                 db    0
.eh_frame:0000000000009834                 db  1Ch
.eh_frame:0000000000009835                 db  0Ah
.eh_frame:0000000000009836                 db    0
.eh_frame:0000000000009837                 db    0
.eh_frame:0000000000009838                 db  18h
.eh_frame:0000000000009839                 db 0C5h
.eh_frame:000000000000983A                 db 0FFh
.eh_frame:000000000000983B                 db 0FFh
.eh_frame:000000000000983C                 db  18h
.eh_frame:000000000000983D                 db    0
.eh_frame:000000000000983E                 db    0
.eh_frame:000000000000983F                 db    0
.eh_frame:0000000000009840                 db    0
.eh_frame:0000000000009841                 db    0
.eh_frame:0000000000009842                 db    0
.eh_frame:0000000000009843                 db    0
.eh_frame:0000000000009844                 db  10h
.eh_frame:0000000000009845                 db    0
.eh_frame:0000000000009846                 db    0
.eh_frame:0000000000009847                 db    0
.eh_frame:0000000000009848                 db  30h ; 0
.eh_frame:0000000000009849                 db  0Ah
.eh_frame:000000000000984A                 db    0
.eh_frame:000000000000984B                 db    0
.eh_frame:000000000000984C                 db  24h ; $
.eh_frame:000000000000984D                 db 0C5h
.eh_frame:000000000000984E                 db 0FFh
.eh_frame:000000000000984F                 db 0FFh
.eh_frame:0000000000009850                 db  14h
.eh_frame:0000000000009851                 db    0
.eh_frame:0000000000009852                 db    0
.eh_frame:0000000000009853                 db    0
.eh_frame:0000000000009854                 db    0
.eh_frame:0000000000009855                 db    0
.eh_frame:0000000000009856                 db    0
.eh_frame:0000000000009857                 db    0
.eh_frame:0000000000009858                 db  18h
.eh_frame:0000000000009859                 db    0
.eh_frame:000000000000985A                 db    0
.eh_frame:000000000000985B                 db    0
.eh_frame:000000000000985C                 db  44h ; D
.eh_frame:000000000000985D                 db  0Ah
.eh_frame:000000000000985E                 db    0
.eh_frame:000000000000985F                 db    0
.eh_frame:0000000000009860                 db  30h ; 0
.eh_frame:0000000000009861                 db 0C5h
.eh_frame:0000000000009862                 db 0FFh
.eh_frame:0000000000009863                 db 0FFh
.eh_frame:0000000000009864                 db  8Eh
.eh_frame:0000000000009865                 db    0
.eh_frame:0000000000009866                 db    0
.eh_frame:0000000000009867                 db    0
.eh_frame:0000000000009868                 db    0
.eh_frame:0000000000009869                 db  44h ; D
.eh_frame:000000000000986A                 db  0Eh
.eh_frame:000000000000986B                 db  50h ; P
.eh_frame:000000000000986C                 db    2
.eh_frame:000000000000986D                 db  7Fh ; 
.eh_frame:000000000000986E                 db  0Ah
.eh_frame:000000000000986F                 db  0Eh
.eh_frame:0000000000009870                 db    8
.eh_frame:0000000000009871                 db  41h ; A
.eh_frame:0000000000009872                 db  0Bh
.eh_frame:0000000000009873                 db    0
.eh_frame:0000000000009874                 db  18h
.eh_frame:0000000000009875                 db    0
.eh_frame:0000000000009876                 db    0
.eh_frame:0000000000009877                 db    0
.eh_frame:0000000000009878                 db  60h ; `
.eh_frame:0000000000009879                 db  0Ah
.eh_frame:000000000000987A                 db    0
.eh_frame:000000000000987B                 db    0
.eh_frame:000000000000987C                 db 0A4h
.eh_frame:000000000000987D                 db 0C5h
.eh_frame:000000000000987E                 db 0FFh
.eh_frame:000000000000987F                 db 0FFh
.eh_frame:0000000000009880                 db  8Ah
.eh_frame:0000000000009881                 db    0
.eh_frame:0000000000009882                 db    0
.eh_frame:0000000000009883                 db    0
.eh_frame:0000000000009884                 db    0
.eh_frame:0000000000009885                 db  44h ; D
.eh_frame:0000000000009886                 db  0Eh
.eh_frame:0000000000009887                 db  50h ; P
.eh_frame:0000000000009888                 db    2
.eh_frame:0000000000009889                 db  7Bh ; {
.eh_frame:000000000000988A                 db  0Ah
.eh_frame:000000000000988B                 db  0Eh
.eh_frame:000000000000988C                 db    8
.eh_frame:000000000000988D                 db  41h ; A
.eh_frame:000000000000988E                 db  0Bh
.eh_frame:000000000000988F                 db    0
.eh_frame:0000000000009890                 db  10h
.eh_frame:0000000000009891                 db    0
.eh_frame:0000000000009892                 db    0
.eh_frame:0000000000009893                 db    0
.eh_frame:0000000000009894                 db  7Ch ; |
.eh_frame:0000000000009895                 db  0Ah
.eh_frame:0000000000009896                 db    0
.eh_frame:0000000000009897                 db    0
.eh_frame:0000000000009898                 db  18h
.eh_frame:0000000000009899                 db 0C6h
.eh_frame:000000000000989A                 db 0FFh
.eh_frame:000000000000989B                 db 0FFh
.eh_frame:000000000000989C                 db  0Ch
.eh_frame:000000000000989D                 db    0
.eh_frame:000000000000989E                 db    0
.eh_frame:000000000000989F                 db    0
.eh_frame:00000000000098A0                 db    0
.eh_frame:00000000000098A1                 db    0
.eh_frame:00000000000098A2                 db    0
.eh_frame:00000000000098A3                 db    0
.eh_frame:00000000000098A4                 db  10h
.eh_frame:00000000000098A5                 db    0
.eh_frame:00000000000098A6                 db    0
.eh_frame:00000000000098A7                 db    0
.eh_frame:00000000000098A8                 db  90h
.eh_frame:00000000000098A9                 db  0Ah
.eh_frame:00000000000098AA                 db    0
.eh_frame:00000000000098AB                 db    0
.eh_frame:00000000000098AC                 db  14h
.eh_frame:00000000000098AD                 db 0C6h
.eh_frame:00000000000098AE                 db 0FFh
.eh_frame:00000000000098AF                 db 0FFh
.eh_frame:00000000000098B0                 db  0Fh
.eh_frame:00000000000098B1                 db    0
.eh_frame:00000000000098B2                 db    0
.eh_frame:00000000000098B3                 db    0
.eh_frame:00000000000098B4                 db    0
.eh_frame:00000000000098B5                 db    0
.eh_frame:00000000000098B6                 db    0
.eh_frame:00000000000098B7                 db    0
.eh_frame:00000000000098B8                 db  18h
.eh_frame:00000000000098B9                 db    0
.eh_frame:00000000000098BA                 db    0
.eh_frame:00000000000098BB                 db    0
.eh_frame:00000000000098BC                 db 0A4h
.eh_frame:00000000000098BD                 db  0Ah
.eh_frame:00000000000098BE                 db    0
.eh_frame:00000000000098BF                 db    0
.eh_frame:00000000000098C0                 db  10h
.eh_frame:00000000000098C1                 db 0C6h
.eh_frame:00000000000098C2                 db 0FFh
.eh_frame:00000000000098C3                 db 0FFh
.eh_frame:00000000000098C4                 db  98h
.eh_frame:00000000000098C5                 db    0
.eh_frame:00000000000098C6                 db    0
.eh_frame:00000000000098C7                 db    0
.eh_frame:00000000000098C8                 db    0
.eh_frame:00000000000098C9                 db  44h ; D
.eh_frame:00000000000098CA                 db  0Eh
.eh_frame:00000000000098CB                 db  50h ; P
.eh_frame:00000000000098CC                 db    2
.eh_frame:00000000000098CD                 db  8Eh
.eh_frame:00000000000098CE                 db  0Ah
.eh_frame:00000000000098CF                 db  0Eh
.eh_frame:00000000000098D0                 db    8
.eh_frame:00000000000098D1                 db  41h ; A
.eh_frame:00000000000098D2                 db  0Bh
.eh_frame:00000000000098D3                 db    0
.eh_frame:00000000000098D4                 db  10h
.eh_frame:00000000000098D5                 db    0
.eh_frame:00000000000098D6                 db    0
.eh_frame:00000000000098D7                 db    0
.eh_frame:00000000000098D8                 db 0C0h
.eh_frame:00000000000098D9                 db  0Ah
.eh_frame:00000000000098DA                 db    0
.eh_frame:00000000000098DB                 db    0
.eh_frame:00000000000098DC                 db  94h
.eh_frame:00000000000098DD                 db 0C6h
.eh_frame:00000000000098DE                 db 0FFh
.eh_frame:00000000000098DF                 db 0FFh
.eh_frame:00000000000098E0                 db  10h
.eh_frame:00000000000098E1                 db    0
.eh_frame:00000000000098E2                 db    0
.eh_frame:00000000000098E3                 db    0
.eh_frame:00000000000098E4                 db    0
.eh_frame:00000000000098E5                 db    0
.eh_frame:00000000000098E6                 db    0
.eh_frame:00000000000098E7                 db    0
.eh_frame:00000000000098E8                 db  10h
.eh_frame:00000000000098E9                 db    0
.eh_frame:00000000000098EA                 db    0
.eh_frame:00000000000098EB                 db    0
.eh_frame:00000000000098EC                 db 0D4h
.eh_frame:00000000000098ED                 db  0Ah
.eh_frame:00000000000098EE                 db    0
.eh_frame:00000000000098EF                 db    0
.eh_frame:00000000000098F0                 db  90h
.eh_frame:00000000000098F1                 db 0C6h
.eh_frame:00000000000098F2                 db 0FFh
.eh_frame:00000000000098F3                 db 0FFh
.eh_frame:00000000000098F4                 db  11h
.eh_frame:00000000000098F5                 db    0
.eh_frame:00000000000098F6                 db    0
.eh_frame:00000000000098F7                 db    0
.eh_frame:00000000000098F8                 db    0
.eh_frame:00000000000098F9                 db    0
.eh_frame:00000000000098FA                 db    0
.eh_frame:00000000000098FB                 db    0
.eh_frame:00000000000098FC                 db  10h
.eh_frame:00000000000098FD                 db    0
.eh_frame:00000000000098FE                 db    0
.eh_frame:00000000000098FF                 db    0
.eh_frame:0000000000009900                 db 0E8h
.eh_frame:0000000000009901                 db  0Ah
.eh_frame:0000000000009902                 db    0
.eh_frame:0000000000009903                 db    0
.eh_frame:0000000000009904                 db  9Ch
.eh_frame:0000000000009905                 db 0C6h
.eh_frame:0000000000009906                 db 0FFh
.eh_frame:0000000000009907                 db 0FFh
.eh_frame:0000000000009908                 db  0Ah
.eh_frame:0000000000009909                 db    0
.eh_frame:000000000000990A                 db    0
.eh_frame:000000000000990B                 db    0
.eh_frame:000000000000990C                 db    0
.eh_frame:000000000000990D                 db    0
.eh_frame:000000000000990E                 db    0
.eh_frame:000000000000990F                 db    0
.eh_frame:0000000000009910                 db  18h
.eh_frame:0000000000009911                 db    0
.eh_frame:0000000000009912                 db    0
.eh_frame:0000000000009913                 db    0
.eh_frame:0000000000009914                 db 0FCh
.eh_frame:0000000000009915                 db  0Ah
.eh_frame:0000000000009916                 db    0
.eh_frame:0000000000009917                 db    0
.eh_frame:0000000000009918                 db  98h
.eh_frame:0000000000009919                 db 0C6h
.eh_frame:000000000000991A                 db 0FFh
.eh_frame:000000000000991B                 db 0FFh
.eh_frame:000000000000991C                 db  8Eh
.eh_frame:000000000000991D                 db    0
.eh_frame:000000000000991E                 db    0
.eh_frame:000000000000991F                 db    0
.eh_frame:0000000000009920                 db    0
.eh_frame:0000000000009921                 db  44h ; D
.eh_frame:0000000000009922                 db  0Eh
.eh_frame:0000000000009923                 db  50h ; P
.eh_frame:0000000000009924                 db    2
.eh_frame:0000000000009925                 db  7Fh ; 
.eh_frame:0000000000009926                 db  0Ah
.eh_frame:0000000000009927                 db  0Eh
.eh_frame:0000000000009928                 db    8
.eh_frame:0000000000009929                 db  41h ; A
.eh_frame:000000000000992A                 db  0Bh
.eh_frame:000000000000992B                 db    0
.eh_frame:000000000000992C                 db  18h
.eh_frame:000000000000992D                 db    0
.eh_frame:000000000000992E                 db    0
.eh_frame:000000000000992F                 db    0
.eh_frame:0000000000009930                 db  18h
.eh_frame:0000000000009931                 db  0Bh
.eh_frame:0000000000009932                 db    0
.eh_frame:0000000000009933                 db    0
.eh_frame:0000000000009934                 db  0Ch
.eh_frame:0000000000009935                 db 0C7h
.eh_frame:0000000000009936                 db 0FFh
.eh_frame:0000000000009937                 db 0FFh
.eh_frame:0000000000009938                 db  91h
.eh_frame:0000000000009939                 db    0
.eh_frame:000000000000993A                 db    0
.eh_frame:000000000000993B                 db    0
.eh_frame:000000000000993C                 db    0
.eh_frame:000000000000993D                 db  44h ; D
.eh_frame:000000000000993E                 db  0Eh
.eh_frame:000000000000993F                 db  50h ; P
.eh_frame:0000000000009940                 db    2
.eh_frame:0000000000009941                 db  82h
.eh_frame:0000000000009942                 db  0Ah
.eh_frame:0000000000009943                 db  0Eh
.eh_frame:0000000000009944                 db    8
.eh_frame:0000000000009945                 db  41h ; A
.eh_frame:0000000000009946                 db  0Bh
.eh_frame:0000000000009947                 db    0
.eh_frame:0000000000009948                 db  10h
.eh_frame:0000000000009949                 db    0
.eh_frame:000000000000994A                 db    0
.eh_frame:000000000000994B                 db    0
.eh_frame:000000000000994C                 db  34h ; 4
.eh_frame:000000000000994D                 db  0Bh
.eh_frame:000000000000994E                 db    0
.eh_frame:000000000000994F                 db    0
.eh_frame:0000000000009950                 db  90h
.eh_frame:0000000000009951                 db 0C7h
.eh_frame:0000000000009952                 db 0FFh
.eh_frame:0000000000009953                 db 0FFh
.eh_frame:0000000000009954                 db  0Ch
.eh_frame:0000000000009955                 db    0
.eh_frame:0000000000009956                 db    0
.eh_frame:0000000000009957                 db    0
.eh_frame:0000000000009958                 db    0
.eh_frame:0000000000009959                 db    0
.eh_frame:000000000000995A                 db    0
.eh_frame:000000000000995B                 db    0
.eh_frame:000000000000995C                 db  10h
.eh_frame:000000000000995D                 db    0
.eh_frame:000000000000995E                 db    0
.eh_frame:000000000000995F                 db    0
.eh_frame:0000000000009960                 db  48h ; H
.eh_frame:0000000000009961                 db  0Bh
.eh_frame:0000000000009962                 db    0
.eh_frame:0000000000009963                 db    0
.eh_frame:0000000000009964                 db  8Ch
.eh_frame:0000000000009965                 db 0C7h
.eh_frame:0000000000009966                 db 0FFh
.eh_frame:0000000000009967                 db 0FFh
.eh_frame:0000000000009968                 db  17h
.eh_frame:0000000000009969                 db    0
.eh_frame:000000000000996A                 db    0
.eh_frame:000000000000996B                 db    0
.eh_frame:000000000000996C                 db    0
.eh_frame:000000000000996D                 db    0
.eh_frame:000000000000996E                 db    0
.eh_frame:000000000000996F                 db    0
.eh_frame:0000000000009970                 db  10h
.eh_frame:0000000000009971                 db    0
.eh_frame:0000000000009972                 db    0
.eh_frame:0000000000009973                 db    0
.eh_frame:0000000000009974                 db  5Ch ; \
.eh_frame:0000000000009975                 db  0Bh
.eh_frame:0000000000009976                 db    0
.eh_frame:0000000000009977                 db    0
.eh_frame:0000000000009978                 db  98h
.eh_frame:0000000000009979                 db 0C7h
.eh_frame:000000000000997A                 db 0FFh
.eh_frame:000000000000997B                 db 0FFh
.eh_frame:000000000000997C                 db  13h
.eh_frame:000000000000997D                 db    0
.eh_frame:000000000000997E                 db    0
.eh_frame:000000000000997F                 db    0
.eh_frame:0000000000009980                 db    0
.eh_frame:0000000000009981                 db    0
.eh_frame:0000000000009982                 db    0
.eh_frame:0000000000009983                 db    0
.eh_frame:0000000000009984                 db  10h
.eh_frame:0000000000009985                 db    0
.eh_frame:0000000000009986                 db    0
.eh_frame:0000000000009987                 db    0
.eh_frame:0000000000009988                 db  70h ; p
.eh_frame:0000000000009989                 db  0Bh
.eh_frame:000000000000998A                 db    0
.eh_frame:000000000000998B                 db    0
.eh_frame:000000000000998C                 db 0A4h
.eh_frame:000000000000998D                 db 0C7h
.eh_frame:000000000000998E                 db 0FFh
.eh_frame:000000000000998F                 db 0FFh
.eh_frame:0000000000009990                 db  0Ch
.eh_frame:0000000000009991                 db    0
.eh_frame:0000000000009992                 db    0
.eh_frame:0000000000009993                 db    0
.eh_frame:0000000000009994                 db    0
.eh_frame:0000000000009995                 db    0
.eh_frame:0000000000009996                 db    0
.eh_frame:0000000000009997                 db    0
.eh_frame:0000000000009998                 db  10h
.eh_frame:0000000000009999                 db    0
.eh_frame:000000000000999A                 db    0
.eh_frame:000000000000999B                 db    0
.eh_frame:000000000000999C                 db  84h
.eh_frame:000000000000999D                 db  0Bh
.eh_frame:000000000000999E                 db    0
.eh_frame:000000000000999F                 db    0
.eh_frame:00000000000099A0                 db 0A0h
.eh_frame:00000000000099A1                 db 0C7h
.eh_frame:00000000000099A2                 db 0FFh
.eh_frame:00000000000099A3                 db 0FFh
.eh_frame:00000000000099A4                 db  14h
.eh_frame:00000000000099A5                 db    0
.eh_frame:00000000000099A6                 db    0
.eh_frame:00000000000099A7                 db    0
.eh_frame:00000000000099A8                 db    0
.eh_frame:00000000000099A9                 db    0
.eh_frame:00000000000099AA                 db    0
.eh_frame:00000000000099AB                 db    0
.eh_frame:00000000000099AC                 db  10h
.eh_frame:00000000000099AD                 db    0
.eh_frame:00000000000099AE                 db    0
.eh_frame:00000000000099AF                 db    0
.eh_frame:00000000000099B0                 db  98h
.eh_frame:00000000000099B1                 db  0Bh
.eh_frame:00000000000099B2                 db    0
.eh_frame:00000000000099B3                 db    0
.eh_frame:00000000000099B4                 db 0ACh
.eh_frame:00000000000099B5                 db 0C7h
.eh_frame:00000000000099B6                 db 0FFh
.eh_frame:00000000000099B7                 db 0FFh
.eh_frame:00000000000099B8                 db  13h
.eh_frame:00000000000099B9                 db    0
.eh_frame:00000000000099BA                 db    0
.eh_frame:00000000000099BB                 db    0
.eh_frame:00000000000099BC                 db    0
.eh_frame:00000000000099BD                 db    0
.eh_frame:00000000000099BE                 db    0
.eh_frame:00000000000099BF                 db    0
.eh_frame:00000000000099C0                 db  14h
.eh_frame:00000000000099C1                 db    0
.eh_frame:00000000000099C2                 db    0
.eh_frame:00000000000099C3                 db    0
.eh_frame:00000000000099C4                 db 0ACh
.eh_frame:00000000000099C5                 db  0Bh
.eh_frame:00000000000099C6                 db    0
.eh_frame:00000000000099C7                 db    0
.eh_frame:00000000000099C8                 db 0B8h
.eh_frame:00000000000099C9                 db 0C7h
.eh_frame:00000000000099CA                 db 0FFh
.eh_frame:00000000000099CB                 db 0FFh
.eh_frame:00000000000099CC                 db  18h
.eh_frame:00000000000099CD                 db    0
.eh_frame:00000000000099CE                 db    0
.eh_frame:00000000000099CF                 db    0
.eh_frame:00000000000099D0                 db    0
.eh_frame:00000000000099D1                 db    0
.eh_frame:00000000000099D2                 db    0
.eh_frame:00000000000099D3                 db    0
.eh_frame:00000000000099D4                 db    0
.eh_frame:00000000000099D5                 db    0
.eh_frame:00000000000099D6                 db    0
.eh_frame:00000000000099D7                 db    0
.eh_frame:00000000000099D8                 db  10h
.eh_frame:00000000000099D9                 db    1
.eh_frame:00000000000099DA                 db    0
.eh_frame:00000000000099DB                 db    0
.eh_frame:00000000000099DC                 db 0C4h
.eh_frame:00000000000099DD                 db  0Bh
.eh_frame:00000000000099DE                 db    0
.eh_frame:00000000000099DF                 db    0
.eh_frame:00000000000099E0                 db 0C0h
.eh_frame:00000000000099E1                 db 0C7h
.eh_frame:00000000000099E2                 db 0FFh
.eh_frame:00000000000099E3                 db 0FFh
.eh_frame:00000000000099E4                 db  17h
.eh_frame:00000000000099E5                 db    4
.eh_frame:00000000000099E6                 db    0
.eh_frame:00000000000099E7                 db    0
.eh_frame:00000000000099E8                 db    0
.eh_frame:00000000000099E9                 db  42h ; B
.eh_frame:00000000000099EA                 db  0Eh
.eh_frame:00000000000099EB                 db  10h
.eh_frame:00000000000099EC                 db  8Fh
.eh_frame:00000000000099ED                 db    2
.eh_frame:00000000000099EE                 db  42h ; B
.eh_frame:00000000000099EF                 db  0Eh
.eh_frame:00000000000099F0                 db  18h
.eh_frame:00000000000099F1                 db  8Eh
.eh_frame:00000000000099F2                 db    3
.eh_frame:00000000000099F3                 db  42h ; B
.eh_frame:00000000000099F4                 db  0Eh
.eh_frame:00000000000099F5                 db  20h
.eh_frame:00000000000099F6                 db  8Dh
.eh_frame:00000000000099F7                 db    4
.eh_frame:00000000000099F8                 db  42h ; B
.eh_frame:00000000000099F9                 db  0Eh
.eh_frame:00000000000099FA                 db  28h ; (
.eh_frame:00000000000099FB                 db  8Ch
.eh_frame:00000000000099FC                 db    5
.eh_frame:00000000000099FD                 db  44h ; D
.eh_frame:00000000000099FE                 db  0Eh
.eh_frame:00000000000099FF                 db  30h ; 0
.eh_frame:0000000000009A00                 db  86h
.eh_frame:0000000000009A01                 db    6
.eh_frame:0000000000009A02                 db  41h ; A
.eh_frame:0000000000009A03                 db  0Eh
.eh_frame:0000000000009A04                 db  38h ; 8
.eh_frame:0000000000009A05                 db  83h
.eh_frame:0000000000009A06                 db    7
.eh_frame:0000000000009A07                 db  4Ah ; J
.eh_frame:0000000000009A08                 db  0Eh
.eh_frame:0000000000009A09                 db  60h ; `
.eh_frame:0000000000009A0A                 db    2
.eh_frame:0000000000009A0B                 db 0DDh
.eh_frame:0000000000009A0C                 db  0Eh
.eh_frame:0000000000009A0D                 db  68h ; h
.eh_frame:0000000000009A0E                 db  57h ; W
.eh_frame:0000000000009A0F                 db  0Eh
.eh_frame:0000000000009A10                 db  70h ; p
.eh_frame:0000000000009A11                 db  42h ; B
.eh_frame:0000000000009A12                 db  0Eh
.eh_frame:0000000000009A13                 db  78h ; x
.eh_frame:0000000000009A14                 db  42h ; B
.eh_frame:0000000000009A15                 db  0Eh
.eh_frame:0000000000009A16                 db  80h
.eh_frame:0000000000009A17                 db    1
.eh_frame:0000000000009A18                 db  42h ; B
.eh_frame:0000000000009A19                 db  0Eh
.eh_frame:0000000000009A1A                 db  88h
.eh_frame:0000000000009A1B                 db    1
.eh_frame:0000000000009A1C                 db  42h ; B
.eh_frame:0000000000009A1D                 db  0Eh
.eh_frame:0000000000009A1E                 db  90h
.eh_frame:0000000000009A1F                 db    1
.eh_frame:0000000000009A20                 db  53h ; S
.eh_frame:0000000000009A21                 db  0Eh
.eh_frame:0000000000009A22                 db  60h ; `
.eh_frame:0000000000009A23                 db  44h ; D
.eh_frame:0000000000009A24                 db  0Ah
.eh_frame:0000000000009A25                 db  0Eh
.eh_frame:0000000000009A26                 db  38h ; 8
.eh_frame:0000000000009A27                 db  41h ; A
.eh_frame:0000000000009A28                 db  0Eh
.eh_frame:0000000000009A29                 db  30h ; 0
.eh_frame:0000000000009A2A                 db  41h ; A
.eh_frame:0000000000009A2B                 db  0Eh
.eh_frame:0000000000009A2C                 db  28h ; (
.eh_frame:0000000000009A2D                 db  42h ; B
.eh_frame:0000000000009A2E                 db  0Eh
.eh_frame:0000000000009A2F                 db  20h
.eh_frame:0000000000009A30                 db  42h ; B
.eh_frame:0000000000009A31                 db  0Eh
.eh_frame:0000000000009A32                 db  18h
.eh_frame:0000000000009A33                 db  42h ; B
.eh_frame:0000000000009A34                 db  0Eh
.eh_frame:0000000000009A35                 db  10h
.eh_frame:0000000000009A36                 db  42h ; B
.eh_frame:0000000000009A37                 db  0Eh
.eh_frame:0000000000009A38                 db    8
.eh_frame:0000000000009A39                 db  44h ; D
.eh_frame:0000000000009A3A                 db  0Bh
.eh_frame:0000000000009A3B                 db    2
.eh_frame:0000000000009A3C                 db  78h ; x
.eh_frame:0000000000009A3D                 db  0Ah
.eh_frame:0000000000009A3E                 db  0Eh
.eh_frame:0000000000009A3F                 db  68h ; h
.eh_frame:0000000000009A40                 db  48h ; H
.eh_frame:0000000000009A41                 db  0Bh
.eh_frame:0000000000009A42                 db  5Ah ; Z
.eh_frame:0000000000009A43                 db  0Ah
.eh_frame:0000000000009A44                 db  0Eh
.eh_frame:0000000000009A45                 db  38h ; 8
.eh_frame:0000000000009A46                 db  47h ; G
.eh_frame:0000000000009A47                 db  0Eh
.eh_frame:0000000000009A48                 db  30h ; 0
.eh_frame:0000000000009A49                 db  41h ; A
.eh_frame:0000000000009A4A                 db  0Eh
.eh_frame:0000000000009A4B                 db  28h ; (
.eh_frame:0000000000009A4C                 db  42h ; B
.eh_frame:0000000000009A4D                 db  0Eh
.eh_frame:0000000000009A4E                 db  20h
.eh_frame:0000000000009A4F                 db  42h ; B
.eh_frame:0000000000009A50                 db  0Eh
.eh_frame:0000000000009A51                 db  18h
.eh_frame:0000000000009A52                 db  42h ; B
.eh_frame:0000000000009A53                 db  0Eh
.eh_frame:0000000000009A54                 db  10h
.eh_frame:0000000000009A55                 db  42h ; B
.eh_frame:0000000000009A56                 db  0Eh
.eh_frame:0000000000009A57                 db    8
.eh_frame:0000000000009A58                 db  56h ; V
.eh_frame:0000000000009A59                 db  0Bh
.eh_frame:0000000000009A5A                 db  5Eh ; ^
.eh_frame:0000000000009A5B                 db  0Ah
.eh_frame:0000000000009A5C                 db  0Eh
.eh_frame:0000000000009A5D                 db  38h ; 8
.eh_frame:0000000000009A5E                 db  52h ; R
.eh_frame:0000000000009A5F                 db  0Eh
.eh_frame:0000000000009A60                 db  30h ; 0
.eh_frame:0000000000009A61                 db  41h ; A
.eh_frame:0000000000009A62                 db  0Eh
.eh_frame:0000000000009A63                 db  28h ; (
.eh_frame:0000000000009A64                 db  42h ; B
.eh_frame:0000000000009A65                 db  0Eh
.eh_frame:0000000000009A66                 db  20h
.eh_frame:0000000000009A67                 db  42h ; B
.eh_frame:0000000000009A68                 db  0Eh
.eh_frame:0000000000009A69                 db  18h
.eh_frame:0000000000009A6A                 db  42h ; B
.eh_frame:0000000000009A6B                 db  0Eh
.eh_frame:0000000000009A6C                 db  10h
.eh_frame:0000000000009A6D                 db  42h ; B
.eh_frame:0000000000009A6E                 db  0Eh
.eh_frame:0000000000009A6F                 db    8
.eh_frame:0000000000009A70                 db  4Fh ; O
.eh_frame:0000000000009A71                 db  0Bh
.eh_frame:0000000000009A72                 db  62h ; b
.eh_frame:0000000000009A73                 db  0Ah
.eh_frame:0000000000009A74                 db  0Eh
.eh_frame:0000000000009A75                 db  38h ; 8
.eh_frame:0000000000009A76                 db  50h ; P
.eh_frame:0000000000009A77                 db  0Eh
.eh_frame:0000000000009A78                 db  30h ; 0
.eh_frame:0000000000009A79                 db  41h ; A
.eh_frame:0000000000009A7A                 db  0Eh
.eh_frame:0000000000009A7B                 db  28h ; (
.eh_frame:0000000000009A7C                 db  42h ; B
.eh_frame:0000000000009A7D                 db  0Eh
.eh_frame:0000000000009A7E                 db  20h
.eh_frame:0000000000009A7F                 db  42h ; B
.eh_frame:0000000000009A80                 db  0Eh
.eh_frame:0000000000009A81                 db  18h
.eh_frame:0000000000009A82                 db  42h ; B
.eh_frame:0000000000009A83                 db  0Eh
.eh_frame:0000000000009A84                 db  10h
.eh_frame:0000000000009A85                 db  42h ; B
.eh_frame:0000000000009A86                 db  0Eh
.eh_frame:0000000000009A87                 db    8
.eh_frame:0000000000009A88                 db  55h ; U
.eh_frame:0000000000009A89                 db  0Bh
.eh_frame:0000000000009A8A                 db  66h ; f
.eh_frame:0000000000009A8B                 db  0Eh
.eh_frame:0000000000009A8C                 db  68h ; h
.eh_frame:0000000000009A8D                 db  42h ; B
.eh_frame:0000000000009A8E                 db  0Eh
.eh_frame:0000000000009A8F                 db  70h ; p
.eh_frame:0000000000009A90                 db  5Ch ; \
.eh_frame:0000000000009A91                 db  0Eh
.eh_frame:0000000000009A92                 db  68h ; h
.eh_frame:0000000000009A93                 db  41h ; A
.eh_frame:0000000000009A94                 db  0Eh
.eh_frame:0000000000009A95                 db  60h ; `
.eh_frame:0000000000009A96                 db  44h ; D
.eh_frame:0000000000009A97                 db  0Ah
.eh_frame:0000000000009A98                 db  0Eh
.eh_frame:0000000000009A99                 db  38h ; 8
.eh_frame:0000000000009A9A                 db  41h ; A
.eh_frame:0000000000009A9B                 db  0Eh
.eh_frame:0000000000009A9C                 db  30h ; 0
.eh_frame:0000000000009A9D                 db  41h ; A
.eh_frame:0000000000009A9E                 db  0Eh
.eh_frame:0000000000009A9F                 db  28h ; (
.eh_frame:0000000000009AA0                 db  42h ; B
.eh_frame:0000000000009AA1                 db  0Eh
.eh_frame:0000000000009AA2                 db  20h
.eh_frame:0000000000009AA3                 db  42h ; B
.eh_frame:0000000000009AA4                 db  0Eh
.eh_frame:0000000000009AA5                 db  18h
.eh_frame:0000000000009AA6                 db  42h ; B
.eh_frame:0000000000009AA7                 db  0Eh
.eh_frame:0000000000009AA8                 db  10h
.eh_frame:0000000000009AA9                 db  42h ; B
.eh_frame:0000000000009AAA                 db  0Eh
.eh_frame:0000000000009AAB                 db    8
.eh_frame:0000000000009AAC                 db  45h ; E
.eh_frame:0000000000009AAD                 db  0Bh
.eh_frame:0000000000009AAE                 db  68h ; h
.eh_frame:0000000000009AAF                 db  0Ah
.eh_frame:0000000000009AB0                 db  0Eh
.eh_frame:0000000000009AB1                 db  68h ; h
.eh_frame:0000000000009AB2                 db  48h ; H
.eh_frame:0000000000009AB3                 db  0Bh
.eh_frame:0000000000009AB4                 db  72h ; r
.eh_frame:0000000000009AB5                 db  0Eh
.eh_frame:0000000000009AB6                 db  68h ; h
.eh_frame:0000000000009AB7                 db  45h ; E
.eh_frame:0000000000009AB8                 db  0Eh
.eh_frame:0000000000009AB9                 db  70h ; p
.eh_frame:0000000000009ABA                 db  42h ; B
.eh_frame:0000000000009ABB                 db  0Eh
.eh_frame:0000000000009ABC                 db  78h ; x
.eh_frame:0000000000009ABD                 db  42h ; B
.eh_frame:0000000000009ABE                 db  0Eh
.eh_frame:0000000000009ABF                 db  80h
.eh_frame:0000000000009AC0                 db    1
.eh_frame:0000000000009AC1                 db  5Eh ; ^
.eh_frame:0000000000009AC2                 db  0Eh
.eh_frame:0000000000009AC3                 db  60h ; `
.eh_frame:0000000000009AC4                 db  44h ; D
.eh_frame:0000000000009AC5                 db  0Ah
.eh_frame:0000000000009AC6                 db  0Eh
.eh_frame:0000000000009AC7                 db  38h ; 8
.eh_frame:0000000000009AC8                 db  41h ; A
.eh_frame:0000000000009AC9                 db  0Eh
.eh_frame:0000000000009ACA                 db  30h ; 0
.eh_frame:0000000000009ACB                 db  41h ; A
.eh_frame:0000000000009ACC                 db  0Eh
.eh_frame:0000000000009ACD                 db  28h ; (
.eh_frame:0000000000009ACE                 db  42h ; B
.eh_frame:0000000000009ACF                 db  0Eh
.eh_frame:0000000000009AD0                 db  20h
.eh_frame:0000000000009AD1                 db  42h ; B
.eh_frame:0000000000009AD2                 db  0Eh
.eh_frame:0000000000009AD3                 db  18h
.eh_frame:0000000000009AD4                 db  42h ; B
.eh_frame:0000000000009AD5                 db  0Eh
.eh_frame:0000000000009AD6                 db  10h
.eh_frame:0000000000009AD7                 db  42h ; B
.eh_frame:0000000000009AD8                 db  0Eh
.eh_frame:0000000000009AD9                 db    8
.eh_frame:0000000000009ADA                 db  41h ; A
.eh_frame:0000000000009ADB                 db  0Bh
.eh_frame:0000000000009ADC                 db  79h ; y
.eh_frame:0000000000009ADD                 db  0Ah
.eh_frame:0000000000009ADE                 db  0Eh
.eh_frame:0000000000009ADF                 db  68h ; h
.eh_frame:0000000000009AE0                 db  42h ; B
.eh_frame:0000000000009AE1                 db  0Eh
.eh_frame:0000000000009AE2                 db  70h ; p
.eh_frame:0000000000009AE3                 db  42h ; B
.eh_frame:0000000000009AE4                 db  0Eh
.eh_frame:0000000000009AE5                 db  78h ; x
.eh_frame:0000000000009AE6                 db  42h ; B
.eh_frame:0000000000009AE7                 db  0Eh
.eh_frame:0000000000009AE8                 db  80h
.eh_frame:0000000000009AE9                 db    1
.eh_frame:0000000000009AEA                 db  51h ; Q
.eh_frame:0000000000009AEB                 db  0Bh
.eh_frame:0000000000009AEC                 db  10h
.eh_frame:0000000000009AED                 db    0
.eh_frame:0000000000009AEE                 db    0
.eh_frame:0000000000009AEF                 db    0
.eh_frame:0000000000009AF0                 db 0D8h
.eh_frame:0000000000009AF1                 db  0Ch
.eh_frame:0000000000009AF2                 db    0
.eh_frame:0000000000009AF3                 db    0
.eh_frame:0000000000009AF4                 db 0CCh
.eh_frame:0000000000009AF5                 db 0CAh
.eh_frame:0000000000009AF6                 db 0FFh
.eh_frame:0000000000009AF7                 db 0FFh
.eh_frame:0000000000009AF8                 db  20h
.eh_frame:0000000000009AF9                 db    0
.eh_frame:0000000000009AFA                 db    0
.eh_frame:0000000000009AFB                 db    0
.eh_frame:0000000000009AFC                 db    0
.eh_frame:0000000000009AFD                 db    0
.eh_frame:0000000000009AFE                 db    0
.eh_frame:0000000000009AFF                 db    0
.eh_frame:0000000000009B00                 db  18h
.eh_frame:0000000000009B01                 db    0
.eh_frame:0000000000009B02                 db    0
.eh_frame:0000000000009B03                 db    0
.eh_frame:0000000000009B04                 db 0ECh
.eh_frame:0000000000009B05                 db  0Ch
.eh_frame:0000000000009B06                 db    0
.eh_frame:0000000000009B07                 db    0
.eh_frame:0000000000009B08                 db 0D8h
.eh_frame:0000000000009B09                 db 0CAh
.eh_frame:0000000000009B0A                 db 0FFh
.eh_frame:0000000000009B0B                 db 0FFh
.eh_frame:0000000000009B0C                 db  78h ; x
.eh_frame:0000000000009B0D                 db    0
.eh_frame:0000000000009B0E                 db    0
.eh_frame:0000000000009B0F                 db    0
.eh_frame:0000000000009B10                 db    0
.eh_frame:0000000000009B11                 db  44h ; D
.eh_frame:0000000000009B12                 db  0Eh
.eh_frame:0000000000009B13                 db  70h ; p
.eh_frame:0000000000009B14                 db    2
.eh_frame:0000000000009B15                 db  60h ; `
.eh_frame:0000000000009B16                 db  0Ah
.eh_frame:0000000000009B17                 db  0Eh
.eh_frame:0000000000009B18                 db    8
.eh_frame:0000000000009B19                 db  41h ; A
.eh_frame:0000000000009B1A                 db  0Bh
.eh_frame:0000000000009B1B                 db    0
.eh_frame:0000000000009B1C                 db  28h ; (
.eh_frame:0000000000009B1D                 db    0
.eh_frame:0000000000009B1E                 db    0
.eh_frame:0000000000009B1F                 db    0
.eh_frame:0000000000009B20                 db    8
.eh_frame:0000000000009B21                 db  0Dh
.eh_frame:0000000000009B22                 db    0
.eh_frame:0000000000009B23                 db    0
.eh_frame:0000000000009B24                 db  3Ch ; <
.eh_frame:0000000000009B25                 db 0CBh
.eh_frame:0000000000009B26                 db 0FFh
.eh_frame:0000000000009B27                 db 0FFh
.eh_frame:0000000000009B28                 db 0D5h
.eh_frame:0000000000009B29                 db    0
.eh_frame:0000000000009B2A                 db    0
.eh_frame:0000000000009B2B                 db    0
.eh_frame:0000000000009B2C                 db    0
.eh_frame:0000000000009B2D                 db  41h ; A
.eh_frame:0000000000009B2E                 db  0Eh
.eh_frame:0000000000009B2F                 db  10h
.eh_frame:0000000000009B30                 db  86h
.eh_frame:0000000000009B31                 db    2
.eh_frame:0000000000009B32                 db  41h ; A
.eh_frame:0000000000009B33                 db  0Eh
.eh_frame:0000000000009B34                 db  18h
.eh_frame:0000000000009B35                 db  83h
.eh_frame:0000000000009B36                 db    3
.eh_frame:0000000000009B37                 db  50h ; P
.eh_frame:0000000000009B38                 db  0Eh
.eh_frame:0000000000009B39                 db 0D0h
.eh_frame:0000000000009B3A                 db    1
.eh_frame:0000000000009B3B                 db    2
.eh_frame:0000000000009B3C                 db 0ABh
.eh_frame:0000000000009B3D                 db  0Ah
.eh_frame:0000000000009B3E                 db  0Eh
.eh_frame:0000000000009B3F                 db  18h
.eh_frame:0000000000009B40                 db  41h ; A
.eh_frame:0000000000009B41                 db  0Eh
.eh_frame:0000000000009B42                 db  10h
.eh_frame:0000000000009B43                 db  41h ; A
.eh_frame:0000000000009B44                 db  0Eh
.eh_frame:0000000000009B45                 db    8
.eh_frame:0000000000009B46                 db  41h ; A
.eh_frame:0000000000009B47                 db  0Bh
.eh_frame:0000000000009B48                 db  1Ch
.eh_frame:0000000000009B49                 db    0
.eh_frame:0000000000009B4A                 db    0
.eh_frame:0000000000009B4B                 db    0
.eh_frame:0000000000009B4C                 db  34h ; 4
.eh_frame:0000000000009B4D                 db  0Dh
.eh_frame:0000000000009B4E                 db    0
.eh_frame:0000000000009B4F                 db    0
.eh_frame:0000000000009B50                 db 0F0h
.eh_frame:0000000000009B51                 db 0CBh
.eh_frame:0000000000009B52                 db 0FFh
.eh_frame:0000000000009B53                 db 0FFh
.eh_frame:0000000000009B54                 db  80h
.eh_frame:0000000000009B55                 db    0
.eh_frame:0000000000009B56                 db    0
.eh_frame:0000000000009B57                 db    0
.eh_frame:0000000000009B58                 db    0
.eh_frame:0000000000009B59                 db  41h ; A
.eh_frame:0000000000009B5A                 db  0Eh
.eh_frame:0000000000009B5B                 db  10h
.eh_frame:0000000000009B5C                 db  83h
.eh_frame:0000000000009B5D                 db    2
.eh_frame:0000000000009B5E                 db    2
.eh_frame:0000000000009B5F                 db  7Ah ; z
.eh_frame:0000000000009B60                 db  0Eh
.eh_frame:0000000000009B61                 db    8
.eh_frame:0000000000009B62                 db    0
.eh_frame:0000000000009B63                 db    0
.eh_frame:0000000000009B64                 db    0
.eh_frame:0000000000009B65                 db    0
.eh_frame:0000000000009B66                 db    0
.eh_frame:0000000000009B67                 db    0
.eh_frame:0000000000009B68                 db  18h
.eh_frame:0000000000009B69                 db    0
.eh_frame:0000000000009B6A                 db    0
.eh_frame:0000000000009B6B                 db    0
.eh_frame:0000000000009B6C                 db  54h ; T
.eh_frame:0000000000009B6D                 db  0Dh
.eh_frame:0000000000009B6E                 db    0
.eh_frame:0000000000009B6F                 db    0
.eh_frame:0000000000009B70                 db  50h ; P
.eh_frame:0000000000009B71                 db 0CCh
.eh_frame:0000000000009B72                 db 0FFh
.eh_frame:0000000000009B73                 db 0FFh
.eh_frame:0000000000009B74                 db  1Ah
.eh_frame:0000000000009B75                 db    0
.eh_frame:0000000000009B76                 db    0
.eh_frame:0000000000009B77                 db    0
.eh_frame:0000000000009B78                 db    0
.eh_frame:0000000000009B79                 db  41h ; A
.eh_frame:0000000000009B7A                 db  0Eh
.eh_frame:0000000000009B7B                 db  10h
.eh_frame:0000000000009B7C                 db  83h
.eh_frame:0000000000009B7D                 db    2
.eh_frame:0000000000009B7E                 db  53h ; S
.eh_frame:0000000000009B7F                 db  0Ah
.eh_frame:0000000000009B80                 db  0Eh
.eh_frame:0000000000009B81                 db    8
.eh_frame:0000000000009B82                 db  41h ; A
.eh_frame:0000000000009B83                 db  0Bh
.eh_frame:0000000000009B84                 db  10h
.eh_frame:0000000000009B85                 db    0
.eh_frame:0000000000009B86                 db    0
.eh_frame:0000000000009B87                 db    0
.eh_frame:0000000000009B88                 db  70h ; p
.eh_frame:0000000000009B89                 db  0Dh
.eh_frame:0000000000009B8A                 db    0
.eh_frame:0000000000009B8B                 db    0
.eh_frame:0000000000009B8C                 db  54h ; T
.eh_frame:0000000000009B8D                 db 0CCh
.eh_frame:0000000000009B8E                 db 0FFh
.eh_frame:0000000000009B8F                 db 0FFh
.eh_frame:0000000000009B90                 db  24h ; $
.eh_frame:0000000000009B91                 db    0
.eh_frame:0000000000009B92                 db    0
.eh_frame:0000000000009B93                 db    0
.eh_frame:0000000000009B94                 db    0
.eh_frame:0000000000009B95                 db  5Fh ; _
.eh_frame:0000000000009B96                 db  0Eh
.eh_frame:0000000000009B97                 db  10h
.eh_frame:0000000000009B98                 db  10h
.eh_frame:0000000000009B99                 db    0
.eh_frame:0000000000009B9A                 db    0
.eh_frame:0000000000009B9B                 db    0
.eh_frame:0000000000009B9C                 db  84h
.eh_frame:0000000000009B9D                 db  0Dh
.eh_frame:0000000000009B9E                 db    0
.eh_frame:0000000000009B9F                 db    0
.eh_frame:0000000000009BA0                 db  70h ; p
.eh_frame:0000000000009BA1                 db 0CCh
.eh_frame:0000000000009BA2                 db 0FFh
.eh_frame:0000000000009BA3                 db 0FFh
.eh_frame:0000000000009BA4                 db    2
.eh_frame:0000000000009BA5                 db    0
.eh_frame:0000000000009BA6                 db    0
.eh_frame:0000000000009BA7                 db    0
.eh_frame:0000000000009BA8                 db    0
.eh_frame:0000000000009BA9                 db    0
.eh_frame:0000000000009BAA                 db    0
.eh_frame:0000000000009BAB                 db    0
.eh_frame:0000000000009BAC                 db  20h
.eh_frame:0000000000009BAD                 db    0
.eh_frame:0000000000009BAE                 db    0
.eh_frame:0000000000009BAF                 db    0
.eh_frame:0000000000009BB0                 db  98h
.eh_frame:0000000000009BB1                 db  0Dh
.eh_frame:0000000000009BB2                 db    0
.eh_frame:0000000000009BB3                 db    0
.eh_frame:0000000000009BB4                 db  6Ch ; l
.eh_frame:0000000000009BB5                 db 0CCh
.eh_frame:0000000000009BB6                 db 0FFh
.eh_frame:0000000000009BB7                 db 0FFh
.eh_frame:0000000000009BB8                 db  36h ; 6
.eh_frame:0000000000009BB9                 db    0
.eh_frame:0000000000009BBA                 db    0
.eh_frame:0000000000009BBB                 db    0
.eh_frame:0000000000009BBC                 db    0
.eh_frame:0000000000009BBD                 db  44h ; D
.eh_frame:0000000000009BBE                 db  0Eh
.eh_frame:0000000000009BBF                 db  10h
.eh_frame:0000000000009BC0                 db  83h
.eh_frame:0000000000009BC1                 db    2
.eh_frame:0000000000009BC2                 db  5Dh ; ]
.eh_frame:0000000000009BC3                 db  0Ah
.eh_frame:0000000000009BC4                 db  0Eh
.eh_frame:0000000000009BC5                 db    8
.eh_frame:0000000000009BC6                 db  47h ; G
.eh_frame:0000000000009BC7                 db  0Bh
.eh_frame:0000000000009BC8                 db  48h ; H
.eh_frame:0000000000009BC9                 db  0Ah
.eh_frame:0000000000009BCA                 db  0Eh
.eh_frame:0000000000009BCB                 db    8
.eh_frame:0000000000009BCC                 db  41h ; A
.eh_frame:0000000000009BCD                 db  0Bh
.eh_frame:0000000000009BCE                 db    0
.eh_frame:0000000000009BCF                 db    0
.eh_frame:0000000000009BD0                 db  10h
.eh_frame:0000000000009BD1                 db    0
.eh_frame:0000000000009BD2                 db    0
.eh_frame:0000000000009BD3                 db    0
.eh_frame:0000000000009BD4                 db 0BCh
.eh_frame:0000000000009BD5                 db  0Dh
.eh_frame:0000000000009BD6                 db    0
.eh_frame:0000000000009BD7                 db    0
.eh_frame:0000000000009BD8                 db  88h
.eh_frame:0000000000009BD9                 db 0CCh
.eh_frame:0000000000009BDA                 db 0FFh
.eh_frame:0000000000009BDB                 db 0FFh
.eh_frame:0000000000009BDC                 db  24h ; $
.eh_frame:0000000000009BDD                 db    0
.eh_frame:0000000000009BDE                 db    0
.eh_frame:0000000000009BDF                 db    0
.eh_frame:0000000000009BE0                 db    0
.eh_frame:0000000000009BE1                 db  5Fh ; _
.eh_frame:0000000000009BE2                 db  0Eh
.eh_frame:0000000000009BE3                 db  10h
.eh_frame:0000000000009BE4                 db  14h
.eh_frame:0000000000009BE5                 db    0
.eh_frame:0000000000009BE6                 db    0
.eh_frame:0000000000009BE7                 db    0
.eh_frame:0000000000009BE8                 db 0D0h
.eh_frame:0000000000009BE9                 db  0Dh
.eh_frame:0000000000009BEA                 db    0
.eh_frame:0000000000009BEB                 db    0
.eh_frame:0000000000009BEC                 db 0A4h
.eh_frame:0000000000009BED                 db 0CCh
.eh_frame:0000000000009BEE                 db 0FFh
.eh_frame:0000000000009BEF                 db 0FFh
.eh_frame:0000000000009BF0                 db  82h
.eh_frame:0000000000009BF1                 db    0
.eh_frame:0000000000009BF2                 db    0
.eh_frame:0000000000009BF3                 db    0
.eh_frame:0000000000009BF4                 db    0
.eh_frame:0000000000009BF5                 db    2
.eh_frame:0000000000009BF6                 db  5Fh ; _
.eh_frame:0000000000009BF7                 db  0Eh
.eh_frame:0000000000009BF8                 db  10h
.eh_frame:0000000000009BF9                 db  49h ; I
.eh_frame:0000000000009BFA                 db  0Eh
.eh_frame:0000000000009BFB                 db    8
.eh_frame:0000000000009BFC                 db  14h
.eh_frame:0000000000009BFD                 db    0
.eh_frame:0000000000009BFE                 db    0
.eh_frame:0000000000009BFF                 db    0
.eh_frame:0000000000009C00                 db 0E8h
.eh_frame:0000000000009C01                 db  0Dh
.eh_frame:0000000000009C02                 db    0
.eh_frame:0000000000009C03                 db    0
.eh_frame:0000000000009C04                 db  1Ch
.eh_frame:0000000000009C05                 db 0CDh
.eh_frame:0000000000009C06                 db 0FFh
.eh_frame:0000000000009C07                 db 0FFh
.eh_frame:0000000000009C08                 db  4Ah ; J
.eh_frame:0000000000009C09                 db    0
.eh_frame:0000000000009C0A                 db    0
.eh_frame:0000000000009C0B                 db    0
.eh_frame:0000000000009C0C                 db    0
.eh_frame:0000000000009C0D                 db    2
.eh_frame:0000000000009C0E                 db  45h ; E
.eh_frame:0000000000009C0F                 db  0Eh
.eh_frame:0000000000009C10                 db  10h
.eh_frame:0000000000009C11                 db    0
.eh_frame:0000000000009C12                 db    0
.eh_frame:0000000000009C13                 db    0
.eh_frame:0000000000009C14                 db  18h
.eh_frame:0000000000009C15                 db    0
.eh_frame:0000000000009C16                 db    0
.eh_frame:0000000000009C17                 db    0
.eh_frame:0000000000009C18                 db    0
.eh_frame:0000000000009C19                 db  0Eh
.eh_frame:0000000000009C1A                 db    0
.eh_frame:0000000000009C1B                 db    0
.eh_frame:0000000000009C1C                 db  54h ; T
.eh_frame:0000000000009C1D                 db 0CDh
.eh_frame:0000000000009C1E                 db 0FFh
.eh_frame:0000000000009C1F                 db 0FFh
.eh_frame:0000000000009C20                 db  17h
.eh_frame:0000000000009C21                 db    0
.eh_frame:0000000000009C22                 db    0
.eh_frame:0000000000009C23                 db    0
.eh_frame:0000000000009C24                 db    0
.eh_frame:0000000000009C25                 db  41h ; A
.eh_frame:0000000000009C26                 db  0Eh
.eh_frame:0000000000009C27                 db  10h
.eh_frame:0000000000009C28                 db  83h
.eh_frame:0000000000009C29                 db    2
.eh_frame:0000000000009C2A                 db  51h ; Q
.eh_frame:0000000000009C2B                 db  0Eh
.eh_frame:0000000000009C2C                 db    8
.eh_frame:0000000000009C2D                 db    0
.eh_frame:0000000000009C2E                 db    0
.eh_frame:0000000000009C2F                 db    0
.eh_frame:0000000000009C30                 db  18h
.eh_frame:0000000000009C31                 db    0
.eh_frame:0000000000009C32                 db    0
.eh_frame:0000000000009C33                 db    0
.eh_frame:0000000000009C34                 db  1Ch
.eh_frame:0000000000009C35                 db  0Eh
.eh_frame:0000000000009C36                 db    0
.eh_frame:0000000000009C37                 db    0
.eh_frame:0000000000009C38                 db  58h ; X
.eh_frame:0000000000009C39                 db 0CDh
.eh_frame:0000000000009C3A                 db 0FFh
.eh_frame:0000000000009C3B                 db 0FFh
.eh_frame:0000000000009C3C                 db  2Eh ; .
.eh_frame:0000000000009C3D                 db    0
.eh_frame:0000000000009C3E                 db    0
.eh_frame:0000000000009C3F                 db    0
.eh_frame:0000000000009C40                 db    0
.eh_frame:0000000000009C41                 db  47h ; G
.eh_frame:0000000000009C42                 db  0Eh
.eh_frame:0000000000009C43                 db  10h
.eh_frame:0000000000009C44                 db  61h ; a
.eh_frame:0000000000009C45                 db  0Ah
.eh_frame:0000000000009C46                 db  0Eh
.eh_frame:0000000000009C47                 db    8
.eh_frame:0000000000009C48                 db  41h ; A
.eh_frame:0000000000009C49                 db  0Bh
.eh_frame:0000000000009C4A                 db    0
.eh_frame:0000000000009C4B                 db    0
.eh_frame:0000000000009C4C                 db  24h ; $
.eh_frame:0000000000009C4D                 db    0
.eh_frame:0000000000009C4E                 db    0
.eh_frame:0000000000009C4F                 db    0
.eh_frame:0000000000009C50                 db  38h ; 8
.eh_frame:0000000000009C51                 db  0Eh
.eh_frame:0000000000009C52                 db    0
.eh_frame:0000000000009C53                 db    0
.eh_frame:0000000000009C54                 db  6Ch ; l
.eh_frame:0000000000009C55                 db 0CDh
.eh_frame:0000000000009C56                 db 0FFh
.eh_frame:0000000000009C57                 db 0FFh
.eh_frame:0000000000009C58                 db  28h ; (
.eh_frame:0000000000009C59                 db    0
.eh_frame:0000000000009C5A                 db    0
.eh_frame:0000000000009C5B                 db    0
.eh_frame:0000000000009C5C                 db    0
.eh_frame:0000000000009C5D                 db  41h ; A
.eh_frame:0000000000009C5E                 db  0Eh
.eh_frame:0000000000009C5F                 db  10h
.eh_frame:0000000000009C60                 db  86h
.eh_frame:0000000000009C61                 db    2
.eh_frame:0000000000009C62                 db  41h ; A
.eh_frame:0000000000009C63                 db  0Eh
.eh_frame:0000000000009C64                 db  18h
.eh_frame:0000000000009C65                 db  83h
.eh_frame:0000000000009C66                 db    3
.eh_frame:0000000000009C67                 db  4Dh ; M
.eh_frame:0000000000009C68                 db  0Eh
.eh_frame:0000000000009C69                 db  20h
.eh_frame:0000000000009C6A                 db  49h ; I
.eh_frame:0000000000009C6B                 db  0Eh
.eh_frame:0000000000009C6C                 db  18h
.eh_frame:0000000000009C6D                 db  47h ; G
.eh_frame:0000000000009C6E                 db  0Eh
.eh_frame:0000000000009C6F                 db  10h
.eh_frame:0000000000009C70                 db  41h ; A
.eh_frame:0000000000009C71                 db  0Eh
.eh_frame:0000000000009C72                 db    8
.eh_frame:0000000000009C73                 db    0
.eh_frame:0000000000009C74                 db  18h
.eh_frame:0000000000009C75                 db    0
.eh_frame:0000000000009C76                 db    0
.eh_frame:0000000000009C77                 db    0
.eh_frame:0000000000009C78                 db  60h ; `
.eh_frame:0000000000009C79                 db  0Eh
.eh_frame:0000000000009C7A                 db    0
.eh_frame:0000000000009C7B                 db    0
.eh_frame:0000000000009C7C                 db  74h ; t
.eh_frame:0000000000009C7D                 db 0CDh
.eh_frame:0000000000009C7E                 db 0FFh
.eh_frame:0000000000009C7F                 db 0FFh
.eh_frame:0000000000009C80                 db  13h
.eh_frame:0000000000009C81                 db    0
.eh_frame:0000000000009C82                 db    0
.eh_frame:0000000000009C83                 db    0
.eh_frame:0000000000009C84                 db    0
.eh_frame:0000000000009C85                 db  41h ; A
.eh_frame:0000000000009C86                 db  0Eh
.eh_frame:0000000000009C87                 db  10h
.eh_frame:0000000000009C88                 db  83h
.eh_frame:0000000000009C89                 db    2
.eh_frame:0000000000009C8A                 db  50h ; P
.eh_frame:0000000000009C8B                 db  0Eh
.eh_frame:0000000000009C8C                 db    8
.eh_frame:0000000000009C8D                 db    0
.eh_frame:0000000000009C8E                 db    0
.eh_frame:0000000000009C8F                 db    0
.eh_frame:0000000000009C90                 db  14h
.eh_frame:0000000000009C91                 db    0
.eh_frame:0000000000009C92                 db    0
.eh_frame:0000000000009C93                 db    0
.eh_frame:0000000000009C94                 db  7Ch ; |
.eh_frame:0000000000009C95                 db  0Eh
.eh_frame:0000000000009C96                 db    0
.eh_frame:0000000000009C97                 db    0
.eh_frame:0000000000009C98                 db  78h ; x
.eh_frame:0000000000009C99                 db 0CDh
.eh_frame:0000000000009C9A                 db 0FFh
.eh_frame:0000000000009C9B                 db 0FFh
.eh_frame:0000000000009C9C                 db  35h ; 5
.eh_frame:0000000000009C9D                 db    0
.eh_frame:0000000000009C9E                 db    0
.eh_frame:0000000000009C9F                 db    0
.eh_frame:0000000000009CA0                 db    0
.eh_frame:0000000000009CA1                 db  4Bh ; K
.eh_frame:0000000000009CA2                 db  0Eh
.eh_frame:0000000000009CA3                 db  10h
.eh_frame:0000000000009CA4                 db    0
.eh_frame:0000000000009CA5                 db    0
.eh_frame:0000000000009CA6                 db    0
.eh_frame:0000000000009CA7                 db    0
.eh_frame:0000000000009CA8                 db  48h ; H
.eh_frame:0000000000009CA9                 db    0
.eh_frame:0000000000009CAA                 db    0
.eh_frame:0000000000009CAB                 db    0
.eh_frame:0000000000009CAC                 db  94h
.eh_frame:0000000000009CAD                 db  0Eh
.eh_frame:0000000000009CAE                 db    0
.eh_frame:0000000000009CAF                 db    0
.eh_frame:0000000000009CB0                 db 0A0h
.eh_frame:0000000000009CB1                 db 0CDh
.eh_frame:0000000000009CB2                 db 0FFh
.eh_frame:0000000000009CB3                 db 0FFh
.eh_frame:0000000000009CB4                 db    0
.eh_frame:0000000000009CB5                 db    1
.eh_frame:0000000000009CB6                 db    0
.eh_frame:0000000000009CB7                 db    0
.eh_frame:0000000000009CB8                 db    0
.eh_frame:0000000000009CB9                 db  42h ; B
.eh_frame:0000000000009CBA                 db  0Eh
.eh_frame:0000000000009CBB                 db  10h
.eh_frame:0000000000009CBC                 db  8Fh
.eh_frame:0000000000009CBD                 db    2
.eh_frame:0000000000009CBE                 db  42h ; B
.eh_frame:0000000000009CBF                 db  0Eh
.eh_frame:0000000000009CC0                 db  18h
.eh_frame:0000000000009CC1                 db  8Eh
.eh_frame:0000000000009CC2                 db    3
.eh_frame:0000000000009CC3                 db  45h ; E
.eh_frame:0000000000009CC4                 db  0Eh
.eh_frame:0000000000009CC5                 db  20h
.eh_frame:0000000000009CC6                 db  8Dh
.eh_frame:0000000000009CC7                 db    4
.eh_frame:0000000000009CC8                 db  42h ; B
.eh_frame:0000000000009CC9                 db  0Eh
.eh_frame:0000000000009CCA                 db  28h ; (
.eh_frame:0000000000009CCB                 db  8Ch
.eh_frame:0000000000009CCC                 db    5
.eh_frame:0000000000009CCD                 db  44h ; D
.eh_frame:0000000000009CCE                 db  0Eh
.eh_frame:0000000000009CCF                 db  30h ; 0
.eh_frame:0000000000009CD0                 db  86h
.eh_frame:0000000000009CD1                 db    6
.eh_frame:0000000000009CD2                 db  41h ; A
.eh_frame:0000000000009CD3                 db  0Eh
.eh_frame:0000000000009CD4                 db  38h ; 8
.eh_frame:0000000000009CD5                 db  83h
.eh_frame:0000000000009CD6                 db    7
.eh_frame:0000000000009CD7                 db  4Eh ; N
.eh_frame:0000000000009CD8                 db  0Eh
.eh_frame:0000000000009CD9                 db  50h ; P
.eh_frame:0000000000009CDA                 db    2
.eh_frame:0000000000009CDB                 db  9Dh
.eh_frame:0000000000009CDC                 db  0Ah
.eh_frame:0000000000009CDD                 db  0Eh
.eh_frame:0000000000009CDE                 db  38h ; 8
.eh_frame:0000000000009CDF                 db  41h ; A
.eh_frame:0000000000009CE0                 db  0Eh
.eh_frame:0000000000009CE1                 db  30h ; 0
.eh_frame:0000000000009CE2                 db  41h ; A
.eh_frame:0000000000009CE3                 db  0Eh
.eh_frame:0000000000009CE4                 db  28h ; (
.eh_frame:0000000000009CE5                 db  42h ; B
.eh_frame:0000000000009CE6                 db  0Eh
.eh_frame:0000000000009CE7                 db  20h
.eh_frame:0000000000009CE8                 db  42h ; B
.eh_frame:0000000000009CE9                 db  0Eh
.eh_frame:0000000000009CEA                 db  18h
.eh_frame:0000000000009CEB                 db  42h ; B
.eh_frame:0000000000009CEC                 db  0Eh
.eh_frame:0000000000009CED                 db  10h
.eh_frame:0000000000009CEE                 db  42h ; B
.eh_frame:0000000000009CEF                 db  0Eh
.eh_frame:0000000000009CF0                 db    8
.eh_frame:0000000000009CF1                 db  4Bh ; K
.eh_frame:0000000000009CF2                 db  0Bh
.eh_frame:0000000000009CF3                 db    0
.eh_frame:0000000000009CF4                 db  18h
.eh_frame:0000000000009CF5                 db    0
.eh_frame:0000000000009CF6                 db    0
.eh_frame:0000000000009CF7                 db    0
.eh_frame:0000000000009CF8                 db 0E0h
.eh_frame:0000000000009CF9                 db  0Eh
.eh_frame:0000000000009CFA                 db    0
.eh_frame:0000000000009CFB                 db    0
.eh_frame:0000000000009CFC                 db  54h ; T
.eh_frame:0000000000009CFD                 db 0CEh
.eh_frame:0000000000009CFE                 db 0FFh
.eh_frame:0000000000009CFF                 db 0FFh
.eh_frame:0000000000009D00                 db  21h ; !
.eh_frame:0000000000009D01                 db    0
.eh_frame:0000000000009D02                 db    0
.eh_frame:0000000000009D03                 db    0
.eh_frame:0000000000009D04                 db    0
.eh_frame:0000000000009D05                 db  44h ; D
.eh_frame:0000000000009D06                 db  0Eh
.eh_frame:0000000000009D07                 db  18h
.eh_frame:0000000000009D08                 db  42h ; B
.eh_frame:0000000000009D09                 db  0Eh
.eh_frame:0000000000009D0A                 db  20h
.eh_frame:0000000000009D0B                 db  5Ah ; Z
.eh_frame:0000000000009D0C                 db  0Eh
.eh_frame:0000000000009D0D                 db    8
.eh_frame:0000000000009D0E                 db    0
.eh_frame:0000000000009D0F                 db    0
.eh_frame:0000000000009D10                 db  4Ch ; L
.eh_frame:0000000000009D11                 db    0
.eh_frame:0000000000009D12                 db    0
.eh_frame:0000000000009D13                 db    0
.eh_frame:0000000000009D14                 db 0FCh
.eh_frame:0000000000009D15                 db  0Eh
.eh_frame:0000000000009D16                 db    0
.eh_frame:0000000000009D17                 db    0
.eh_frame:0000000000009D18                 db  68h ; h
.eh_frame:0000000000009D19                 db 0CEh
.eh_frame:0000000000009D1A                 db 0FFh
.eh_frame:0000000000009D1B                 db 0FFh
.eh_frame:0000000000009D1C                 db  1Ch
.eh_frame:0000000000009D1D                 db    4
.eh_frame:0000000000009D1E                 db    0
.eh_frame:0000000000009D1F                 db    0
.eh_frame:0000000000009D20                 db    0
.eh_frame:0000000000009D21                 db  42h ; B
.eh_frame:0000000000009D22                 db  0Eh
.eh_frame:0000000000009D23                 db  10h
.eh_frame:0000000000009D24                 db  8Fh
.eh_frame:0000000000009D25                 db    2
.eh_frame:0000000000009D26                 db  42h ; B
.eh_frame:0000000000009D27                 db  0Eh
.eh_frame:0000000000009D28                 db  18h
.eh_frame:0000000000009D29                 db  8Eh
.eh_frame:0000000000009D2A                 db    3
.eh_frame:0000000000009D2B                 db  42h ; B
.eh_frame:0000000000009D2C                 db  0Eh
.eh_frame:0000000000009D2D                 db  20h
.eh_frame:0000000000009D2E                 db  8Dh
.eh_frame:0000000000009D2F                 db    4
.eh_frame:0000000000009D30                 db  42h ; B
.eh_frame:0000000000009D31                 db  0Eh
.eh_frame:0000000000009D32                 db  28h ; (
.eh_frame:0000000000009D33                 db  8Ch
.eh_frame:0000000000009D34                 db    5
.eh_frame:0000000000009D35                 db  41h ; A
.eh_frame:0000000000009D36                 db  0Eh
.eh_frame:0000000000009D37                 db  30h ; 0
.eh_frame:0000000000009D38                 db  86h
.eh_frame:0000000000009D39                 db    6
.eh_frame:0000000000009D3A                 db  41h ; A
.eh_frame:0000000000009D3B                 db  0Eh
.eh_frame:0000000000009D3C                 db  38h ; 8
.eh_frame:0000000000009D3D                 db  83h
.eh_frame:0000000000009D3E                 db    7
.eh_frame:0000000000009D3F                 db  44h ; D
.eh_frame:0000000000009D40                 db  0Eh
.eh_frame:0000000000009D41                 db  60h ; `
.eh_frame:0000000000009D42                 db    2
.eh_frame:0000000000009D43                 db 0E9h
.eh_frame:0000000000009D44                 db  0Ah
.eh_frame:0000000000009D45                 db  0Eh
.eh_frame:0000000000009D46                 db  38h ; 8
.eh_frame:0000000000009D47                 db  41h ; A
.eh_frame:0000000000009D48                 db  0Eh
.eh_frame:0000000000009D49                 db  30h ; 0
.eh_frame:0000000000009D4A                 db  41h ; A
.eh_frame:0000000000009D4B                 db  0Eh
.eh_frame:0000000000009D4C                 db  28h ; (
.eh_frame:0000000000009D4D                 db  42h ; B
.eh_frame:0000000000009D4E                 db  0Eh
.eh_frame:0000000000009D4F                 db  20h
.eh_frame:0000000000009D50                 db  42h ; B
.eh_frame:0000000000009D51                 db  0Eh
.eh_frame:0000000000009D52                 db  18h
.eh_frame:0000000000009D53                 db  42h ; B
.eh_frame:0000000000009D54                 db  0Eh
.eh_frame:0000000000009D55                 db  10h
.eh_frame:0000000000009D56                 db  42h ; B
.eh_frame:0000000000009D57                 db  0Eh
.eh_frame:0000000000009D58                 db    8
.eh_frame:0000000000009D59                 db  47h ; G
.eh_frame:0000000000009D5A                 db  0Bh
.eh_frame:0000000000009D5B                 db    0
.eh_frame:0000000000009D5C                 db    0
.eh_frame:0000000000009D5D                 db    0
.eh_frame:0000000000009D5E                 db    0
.eh_frame:0000000000009D5F                 db    0
.eh_frame:0000000000009D60                 db  34h ; 4
.eh_frame:0000000000009D61                 db    0
.eh_frame:0000000000009D62                 db    0
.eh_frame:0000000000009D63                 db    0
.eh_frame:0000000000009D64                 db  4Ch ; L
.eh_frame:0000000000009D65                 db  0Fh
.eh_frame:0000000000009D66                 db    0
.eh_frame:0000000000009D67                 db    0
.eh_frame:0000000000009D68                 db  38h ; 8
.eh_frame:0000000000009D69                 db 0D2h
.eh_frame:0000000000009D6A                 db 0FFh
.eh_frame:0000000000009D6B                 db 0FFh
.eh_frame:0000000000009D6C                 db  7Bh ; {
.eh_frame:0000000000009D6D                 db    0
.eh_frame:0000000000009D6E                 db    0
.eh_frame:0000000000009D6F                 db    0
.eh_frame:0000000000009D70                 db    0
.eh_frame:0000000000009D71                 db  42h ; B
.eh_frame:0000000000009D72                 db  0Eh
.eh_frame:0000000000009D73                 db  10h
.eh_frame:0000000000009D74                 db  8Ch
.eh_frame:0000000000009D75                 db    2
.eh_frame:0000000000009D76                 db  41h ; A
.eh_frame:0000000000009D77                 db  0Eh
.eh_frame:0000000000009D78                 db  18h
.eh_frame:0000000000009D79                 db  86h
.eh_frame:0000000000009D7A                 db    3
.eh_frame:0000000000009D7B                 db  41h ; A
.eh_frame:0000000000009D7C                 db  0Eh
.eh_frame:0000000000009D7D                 db  20h
.eh_frame:0000000000009D7E                 db  83h
.eh_frame:0000000000009D7F                 db    4
.eh_frame:0000000000009D80                 db  7Dh ; }
.eh_frame:0000000000009D81                 db  0Ah
.eh_frame:0000000000009D82                 db  0Eh
.eh_frame:0000000000009D83                 db  18h
.eh_frame:0000000000009D84                 db  41h ; A
.eh_frame:0000000000009D85                 db  0Eh
.eh_frame:0000000000009D86                 db  10h
.eh_frame:0000000000009D87                 db  42h ; B
.eh_frame:0000000000009D88                 db  0Eh
.eh_frame:0000000000009D89                 db    8
.eh_frame:0000000000009D8A                 db  44h ; D
.eh_frame:0000000000009D8B                 db  0Bh
.eh_frame:0000000000009D8C                 db  60h ; `
.eh_frame:0000000000009D8D                 db  0Ah
.eh_frame:0000000000009D8E                 db  0Eh
.eh_frame:0000000000009D8F                 db  18h
.eh_frame:0000000000009D90                 db  41h ; A
.eh_frame:0000000000009D91                 db  0Eh
.eh_frame:0000000000009D92                 db  10h
.eh_frame:0000000000009D93                 db  42h ; B
.eh_frame:0000000000009D94                 db  0Eh
.eh_frame:0000000000009D95                 db    8
.eh_frame:0000000000009D96                 db  45h ; E
.eh_frame:0000000000009D97                 db  0Bh
.eh_frame:0000000000009D98                 db  1Ch
.eh_frame:0000000000009D99                 db    0
.eh_frame:0000000000009D9A                 db    0
.eh_frame:0000000000009D9B                 db    0
.eh_frame:0000000000009D9C                 db  84h
.eh_frame:0000000000009D9D                 db  0Fh
.eh_frame:0000000000009D9E                 db    0
.eh_frame:0000000000009D9F                 db    0
.eh_frame:0000000000009DA0                 db  80h
.eh_frame:0000000000009DA1                 db 0D2h
.eh_frame:0000000000009DA2                 db 0FFh
.eh_frame:0000000000009DA3                 db 0FFh
.eh_frame:0000000000009DA4                 db  40h ; @
.eh_frame:0000000000009DA5                 db    0
.eh_frame:0000000000009DA6                 db    0
.eh_frame:0000000000009DA7                 db    0
.eh_frame:0000000000009DA8                 db    0
.eh_frame:0000000000009DA9                 db  44h ; D
.eh_frame:0000000000009DAA                 db  0Eh
.eh_frame:0000000000009DAB                 db  10h
.eh_frame:0000000000009DAC                 db  83h
.eh_frame:0000000000009DAD                 db    2
.eh_frame:0000000000009DAE                 db  5Ah ; Z
.eh_frame:0000000000009DAF                 db  0Ah
.eh_frame:0000000000009DB0                 db  0Eh
.eh_frame:0000000000009DB1                 db    8
.eh_frame:0000000000009DB2                 db  4Ah ; J
.eh_frame:0000000000009DB3                 db  0Bh
.eh_frame:0000000000009DB4                 db  53h ; S
.eh_frame:0000000000009DB5                 db  0Eh
.eh_frame:0000000000009DB6                 db    8
.eh_frame:0000000000009DB7                 db    0
.eh_frame:0000000000009DB8                 db  2Ch ; ,
.eh_frame:0000000000009DB9                 db    0
.eh_frame:0000000000009DBA                 db    0
.eh_frame:0000000000009DBB                 db    0
.eh_frame:0000000000009DBC                 db 0A4h
.eh_frame:0000000000009DBD                 db  0Fh
.eh_frame:0000000000009DBE                 db    0
.eh_frame:0000000000009DBF                 db    0
.eh_frame:0000000000009DC0                 db 0A0h
.eh_frame:0000000000009DC1                 db 0D2h
.eh_frame:0000000000009DC2                 db 0FFh
.eh_frame:0000000000009DC3                 db 0FFh
.eh_frame:0000000000009DC4                 db  57h ; W
.eh_frame:0000000000009DC5                 db    0
.eh_frame:0000000000009DC6                 db    0
.eh_frame:0000000000009DC7                 db    0
.eh_frame:0000000000009DC8                 db    0
.eh_frame:0000000000009DC9                 db  63h ; c
.eh_frame:0000000000009DCA                 db  0Eh
.eh_frame:0000000000009DCB                 db  10h
.eh_frame:0000000000009DCC                 db  8Ch
.eh_frame:0000000000009DCD                 db    2
.eh_frame:0000000000009DCE                 db  41h ; A
.eh_frame:0000000000009DCF                 db  0Eh
.eh_frame:0000000000009DD0                 db  18h
.eh_frame:0000000000009DD1                 db  86h
.eh_frame:0000000000009DD2                 db    3
.eh_frame:0000000000009DD3                 db  44h ; D
.eh_frame:0000000000009DD4                 db  0Eh
.eh_frame:0000000000009DD5                 db  20h
.eh_frame:0000000000009DD6                 db  83h
.eh_frame:0000000000009DD7                 db    4
.eh_frame:0000000000009DD8                 db  6Bh ; k
.eh_frame:0000000000009DD9                 db  0Eh
.eh_frame:0000000000009DDA                 db  18h
.eh_frame:0000000000009DDB                 db  41h ; A
.eh_frame:0000000000009DDC                 db  0Eh
.eh_frame:0000000000009DDD                 db  10h
.eh_frame:0000000000009DDE                 db  42h ; B
.eh_frame:0000000000009DDF                 db  0Eh
.eh_frame:0000000000009DE0                 db    8
.eh_frame:0000000000009DE1                 db    0
.eh_frame:0000000000009DE2                 db    0
.eh_frame:0000000000009DE3                 db    0
.eh_frame:0000000000009DE4                 db    0
.eh_frame:0000000000009DE5                 db    0
.eh_frame:0000000000009DE6                 db    0
.eh_frame:0000000000009DE7                 db    0
.eh_frame:0000000000009DE8                 db  3Ch ; <
.eh_frame:0000000000009DE9                 db    0
.eh_frame:0000000000009DEA                 db    0
.eh_frame:0000000000009DEB                 db    0
.eh_frame:0000000000009DEC                 db 0D4h
.eh_frame:0000000000009DED                 db  0Fh
.eh_frame:0000000000009DEE                 db    0
.eh_frame:0000000000009DEF                 db    0
.eh_frame:0000000000009DF0                 db 0D0h
.eh_frame:0000000000009DF1                 db 0D2h
.eh_frame:0000000000009DF2                 db 0FFh
.eh_frame:0000000000009DF3                 db 0FFh
.eh_frame:0000000000009DF4                 db  83h
.eh_frame:0000000000009DF5                 db    0
.eh_frame:0000000000009DF6                 db    0
.eh_frame:0000000000009DF7                 db    0
.eh_frame:0000000000009DF8                 db    0
.eh_frame:0000000000009DF9                 db  42h ; B
.eh_frame:0000000000009DFA                 db  0Eh
.eh_frame:0000000000009DFB                 db  10h
.eh_frame:0000000000009DFC                 db  8Dh
.eh_frame:0000000000009DFD                 db    2
.eh_frame:0000000000009DFE                 db  42h ; B
.eh_frame:0000000000009DFF                 db  0Eh
.eh_frame:0000000000009E00                 db  18h
.eh_frame:0000000000009E01                 db  8Ch
.eh_frame:0000000000009E02                 db    3
.eh_frame:0000000000009E03                 db  44h ; D
.eh_frame:0000000000009E04                 db  0Eh
.eh_frame:0000000000009E05                 db  20h
.eh_frame:0000000000009E06                 db  86h
.eh_frame:0000000000009E07                 db    4
.eh_frame:0000000000009E08                 db  41h ; A
.eh_frame:0000000000009E09                 db  0Eh
.eh_frame:0000000000009E0A                 db  28h ; (
.eh_frame:0000000000009E0B                 db  83h
.eh_frame:0000000000009E0C                 db    5
.eh_frame:0000000000009E0D                 db  4Ah ; J
.eh_frame:0000000000009E0E                 db  0Eh
.eh_frame:0000000000009E0F                 db  40h ; @
.eh_frame:0000000000009E10                 db    2
.eh_frame:0000000000009E11                 db  64h ; d
.eh_frame:0000000000009E12                 db  0Ah
.eh_frame:0000000000009E13                 db  0Eh
.eh_frame:0000000000009E14                 db  28h ; (
.eh_frame:0000000000009E15                 db  41h ; A
.eh_frame:0000000000009E16                 db  0Eh
.eh_frame:0000000000009E17                 db  20h
.eh_frame:0000000000009E18                 db  41h ; A
.eh_frame:0000000000009E19                 db  0Eh
.eh_frame:0000000000009E1A                 db  18h
.eh_frame:0000000000009E1B                 db  42h ; B
.eh_frame:0000000000009E1C                 db  0Eh
.eh_frame:0000000000009E1D                 db  10h
.eh_frame:0000000000009E1E                 db  42h ; B
.eh_frame:0000000000009E1F                 db  0Eh
.eh_frame:0000000000009E20                 db    8
.eh_frame:0000000000009E21                 db  41h ; A
.eh_frame:0000000000009E22                 db  0Bh
.eh_frame:0000000000009E23                 db    0
.eh_frame:0000000000009E24                 db    0
.eh_frame:0000000000009E25                 db    0
.eh_frame:0000000000009E26                 db    0
.eh_frame:0000000000009E27                 db    0
.eh_frame:0000000000009E28                 db  4Ch ; L
.eh_frame:0000000000009E29                 db    0
.eh_frame:0000000000009E2A                 db    0
.eh_frame:0000000000009E2B                 db    0
.eh_frame:0000000000009E2C                 db  14h
.eh_frame:0000000000009E2D                 db  10h
.eh_frame:0000000000009E2E                 db    0
.eh_frame:0000000000009E2F                 db    0
.eh_frame:0000000000009E30                 db  20h
.eh_frame:0000000000009E31                 db 0D3h
.eh_frame:0000000000009E32                 db 0FFh
.eh_frame:0000000000009E33                 db 0FFh
.eh_frame:0000000000009E34                 db  7Dh ; }
.eh_frame:0000000000009E35                 db    0
.eh_frame:0000000000009E36                 db    0
.eh_frame:0000000000009E37                 db    0
.eh_frame:0000000000009E38                 db    0
.eh_frame:0000000000009E39                 db  42h ; B
.eh_frame:0000000000009E3A                 db  0Eh
.eh_frame:0000000000009E3B                 db  10h
.eh_frame:0000000000009E3C                 db  8Ch
.eh_frame:0000000000009E3D                 db    2
.eh_frame:0000000000009E3E                 db  41h ; A
.eh_frame:0000000000009E3F                 db  0Eh
.eh_frame:0000000000009E40                 db  18h
.eh_frame:0000000000009E41                 db  86h
.eh_frame:0000000000009E42                 db    3
.eh_frame:0000000000009E43                 db  44h ; D
.eh_frame:0000000000009E44                 db  0Eh
.eh_frame:0000000000009E45                 db  20h
.eh_frame:0000000000009E46                 db  83h
.eh_frame:0000000000009E47                 db    4
.eh_frame:0000000000009E48                 db  69h ; i
.eh_frame:0000000000009E49                 db  0Ah
.eh_frame:0000000000009E4A                 db  0Eh
.eh_frame:0000000000009E4B                 db  18h
.eh_frame:0000000000009E4C                 db  41h ; A
.eh_frame:0000000000009E4D                 db  0Eh
.eh_frame:0000000000009E4E                 db  10h
.eh_frame:0000000000009E4F                 db  42h ; B
.eh_frame:0000000000009E50                 db  0Eh
.eh_frame:0000000000009E51                 db    8
.eh_frame:0000000000009E52                 db  45h ; E
.eh_frame:0000000000009E53                 db  0Bh
.eh_frame:0000000000009E54                 db  55h ; U
.eh_frame:0000000000009E55                 db  0Ah
.eh_frame:0000000000009E56                 db  0Eh
.eh_frame:0000000000009E57                 db  18h
.eh_frame:0000000000009E58                 db  41h ; A
.eh_frame:0000000000009E59                 db  0Eh
.eh_frame:0000000000009E5A                 db  10h
.eh_frame:0000000000009E5B                 db  42h ; B
.eh_frame:0000000000009E5C                 db  0Eh
.eh_frame:0000000000009E5D                 db    8
.eh_frame:0000000000009E5E                 db  48h ; H
.eh_frame:0000000000009E5F                 db  0Bh
.eh_frame:0000000000009E60                 db  41h ; A
.eh_frame:0000000000009E61                 db  0Ah
.eh_frame:0000000000009E62                 db  0Eh
.eh_frame:0000000000009E63                 db  18h
.eh_frame:0000000000009E64                 db  46h ; F
.eh_frame:0000000000009E65                 db  0Eh
.eh_frame:0000000000009E66                 db  10h
.eh_frame:0000000000009E67                 db  42h ; B
.eh_frame:0000000000009E68                 db  0Eh
.eh_frame:0000000000009E69                 db    8
.eh_frame:0000000000009E6A                 db  47h ; G
.eh_frame:0000000000009E6B                 db  0Bh
.eh_frame:0000000000009E6C                 db  49h ; I
.eh_frame:0000000000009E6D                 db  0Eh
.eh_frame:0000000000009E6E                 db  18h
.eh_frame:0000000000009E6F                 db  41h ; A
.eh_frame:0000000000009E70                 db  0Eh
.eh_frame:0000000000009E71                 db  10h
.eh_frame:0000000000009E72                 db  42h ; B
.eh_frame:0000000000009E73                 db  0Eh
.eh_frame:0000000000009E74                 db    8
.eh_frame:0000000000009E75                 db    0
.eh_frame:0000000000009E76                 db    0
.eh_frame:0000000000009E77                 db    0
.eh_frame:0000000000009E78                 db  1Ch
.eh_frame:0000000000009E79                 db    0
.eh_frame:0000000000009E7A                 db    0
.eh_frame:0000000000009E7B                 db    0
.eh_frame:0000000000009E7C                 db  64h ; d
.eh_frame:0000000000009E7D                 db  10h
.eh_frame:0000000000009E7E                 db    0
.eh_frame:0000000000009E7F                 db    0
.eh_frame:0000000000009E80                 db  50h ; P
.eh_frame:0000000000009E81                 db 0D3h
.eh_frame:0000000000009E82                 db 0FFh
.eh_frame:0000000000009E83                 db 0FFh
.eh_frame:0000000000009E84                 db  60h ; `
.eh_frame:0000000000009E85                 db    0
.eh_frame:0000000000009E86                 db    0
.eh_frame:0000000000009E87                 db    0
.eh_frame:0000000000009E88                 db    0
.eh_frame:0000000000009E89                 db  44h ; D
.eh_frame:0000000000009E8A                 db  0Eh
.eh_frame:0000000000009E8B                 db  10h
.eh_frame:0000000000009E8C                 db  75h ; u
.eh_frame:0000000000009E8D                 db  0Ah
.eh_frame:0000000000009E8E                 db  0Eh
.eh_frame:0000000000009E8F                 db    8
.eh_frame:0000000000009E90                 db  47h ; G
.eh_frame:0000000000009E91                 db  0Bh
.eh_frame:0000000000009E92                 db  5Fh ; _
.eh_frame:0000000000009E93                 db  0Eh
.eh_frame:0000000000009E94                 db    8
.eh_frame:0000000000009E95                 db    0
.eh_frame:0000000000009E96                 db    0
.eh_frame:0000000000009E97                 db    0
.eh_frame:0000000000009E98                 db  1Ch
.eh_frame:0000000000009E99                 db    0
.eh_frame:0000000000009E9A                 db    0
.eh_frame:0000000000009E9B                 db    0
.eh_frame:0000000000009E9C                 db  84h
.eh_frame:0000000000009E9D                 db  10h
.eh_frame:0000000000009E9E                 db    0
.eh_frame:0000000000009E9F                 db    0
.eh_frame:0000000000009EA0                 db  90h
.eh_frame:0000000000009EA1                 db 0D3h
.eh_frame:0000000000009EA2                 db 0FFh
.eh_frame:0000000000009EA3                 db 0FFh
.eh_frame:0000000000009EA4                 db  3Ch ; <
.eh_frame:0000000000009EA5                 db    0
.eh_frame:0000000000009EA6                 db    0
.eh_frame:0000000000009EA7                 db    0
.eh_frame:0000000000009EA8                 db    0
.eh_frame:0000000000009EA9                 db  44h ; D
.eh_frame:0000000000009EAA                 db  0Eh
.eh_frame:0000000000009EAB                 db  10h
.eh_frame:0000000000009EAC                 db  61h ; a
.eh_frame:0000000000009EAD                 db  0Ah
.eh_frame:0000000000009EAE                 db  0Eh
.eh_frame:0000000000009EAF                 db    8
.eh_frame:0000000000009EB0                 db  4Bh ; K
.eh_frame:0000000000009EB1                 db  0Bh
.eh_frame:0000000000009EB2                 db  4Bh ; K
.eh_frame:0000000000009EB3                 db  0Eh
.eh_frame:0000000000009EB4                 db    8
.eh_frame:0000000000009EB5                 db    0
.eh_frame:0000000000009EB6                 db    0
.eh_frame:0000000000009EB7                 db    0
.eh_frame:0000000000009EB8                 db  44h ; D
.eh_frame:0000000000009EB9                 db    0
.eh_frame:0000000000009EBA                 db    0
.eh_frame:0000000000009EBB                 db    0
.eh_frame:0000000000009EBC                 db 0A4h
.eh_frame:0000000000009EBD                 db  10h
.eh_frame:0000000000009EBE                 db    0
.eh_frame:0000000000009EBF                 db    0
.eh_frame:0000000000009EC0                 db 0B0h
.eh_frame:0000000000009EC1                 db 0D3h
.eh_frame:0000000000009EC2                 db 0FFh
.eh_frame:0000000000009EC3                 db 0FFh
.eh_frame:0000000000009EC4                 db  65h ; e
.eh_frame:0000000000009EC5                 db    0
.eh_frame:0000000000009EC6                 db    0
.eh_frame:0000000000009EC7                 db    0
.eh_frame:0000000000009EC8                 db    0
.eh_frame:0000000000009EC9                 db  42h ; B
.eh_frame:0000000000009ECA                 db  0Eh
.eh_frame:0000000000009ECB                 db  10h
.eh_frame:0000000000009ECC                 db  8Fh
.eh_frame:0000000000009ECD                 db    2
.eh_frame:0000000000009ECE                 db  42h ; B
.eh_frame:0000000000009ECF                 db  0Eh
.eh_frame:0000000000009ED0                 db  18h
.eh_frame:0000000000009ED1                 db  8Eh
.eh_frame:0000000000009ED2                 db    3
.eh_frame:0000000000009ED3                 db  45h ; E
.eh_frame:0000000000009ED4                 db  0Eh
.eh_frame:0000000000009ED5                 db  20h
.eh_frame:0000000000009ED6                 db  8Dh
.eh_frame:0000000000009ED7                 db    4
.eh_frame:0000000000009ED8                 db  42h ; B
.eh_frame:0000000000009ED9                 db  0Eh
.eh_frame:0000000000009EDA                 db  28h ; (
.eh_frame:0000000000009EDB                 db  8Ch
.eh_frame:0000000000009EDC                 db    5
.eh_frame:0000000000009EDD                 db  48h ; H
.eh_frame:0000000000009EDE                 db  0Eh
.eh_frame:0000000000009EDF                 db  30h ; 0
.eh_frame:0000000000009EE0                 db  86h
.eh_frame:0000000000009EE1                 db    6
.eh_frame:0000000000009EE2                 db  48h ; H
.eh_frame:0000000000009EE3                 db  0Eh
.eh_frame:0000000000009EE4                 db  38h ; 8
.eh_frame:0000000000009EE5                 db  83h
.eh_frame:0000000000009EE6                 db    7
.eh_frame:0000000000009EE7                 db  4Dh ; M
.eh_frame:0000000000009EE8                 db  0Eh
.eh_frame:0000000000009EE9                 db  40h ; @
.eh_frame:0000000000009EEA                 db  72h ; r
.eh_frame:0000000000009EEB                 db  0Eh
.eh_frame:0000000000009EEC                 db  38h ; 8
.eh_frame:0000000000009EED                 db  41h ; A
.eh_frame:0000000000009EEE                 db  0Eh
.eh_frame:0000000000009EEF                 db  30h ; 0
.eh_frame:0000000000009EF0                 db  41h ; A
.eh_frame:0000000000009EF1                 db  0Eh
.eh_frame:0000000000009EF2                 db  28h ; (
.eh_frame:0000000000009EF3                 db  42h ; B
.eh_frame:0000000000009EF4                 db  0Eh
.eh_frame:0000000000009EF5                 db  20h
.eh_frame:0000000000009EF6                 db  42h ; B
.eh_frame:0000000000009EF7                 db  0Eh
.eh_frame:0000000000009EF8                 db  18h
.eh_frame:0000000000009EF9                 db  42h ; B
.eh_frame:0000000000009EFA                 db  0Eh
.eh_frame:0000000000009EFB                 db  10h
.eh_frame:0000000000009EFC                 db  42h ; B
.eh_frame:0000000000009EFD                 db  0Eh
.eh_frame:0000000000009EFE                 db    8
.eh_frame:0000000000009EFF                 db    0
.eh_frame:0000000000009F00                 db  14h
.eh_frame:0000000000009F01                 db    0
.eh_frame:0000000000009F02                 db    0
.eh_frame:0000000000009F03                 db    0
.eh_frame:0000000000009F04                 db 0ECh
.eh_frame:0000000000009F05                 db  10h
.eh_frame:0000000000009F06                 db    0
.eh_frame:0000000000009F07                 db    0
.eh_frame:0000000000009F08                 db 0D8h
.eh_frame:0000000000009F09                 db 0D3h
.eh_frame:0000000000009F0A                 db 0FFh
.eh_frame:0000000000009F0B                 db 0FFh
.eh_frame:0000000000009F0C                 db    2
.eh_frame:0000000000009F0D                 db    0
.eh_frame:0000000000009F0E                 db    0
.eh_frame:0000000000009F0F                 db    0
.eh_frame:0000000000009F10                 db    0
.eh_frame:0000000000009F11                 db    0
.eh_frame:0000000000009F12                 db    0
.eh_frame:0000000000009F13                 db    0
.eh_frame:0000000000009F14                 db    0
.eh_frame:0000000000009F15                 db    0
.eh_frame:0000000000009F16                 db    0
.eh_frame:0000000000009F17                 db    0
.eh_frame:0000000000009F18                 db  10h
.eh_frame:0000000000009F19                 db    0
.eh_frame:0000000000009F1A                 db    0
.eh_frame:0000000000009F1B                 db    0
.eh_frame:0000000000009F1C                 db    4
.eh_frame:0000000000009F1D                 db  11h
.eh_frame:0000000000009F1E                 db    0
.eh_frame:0000000000009F1F                 db    0
.eh_frame:0000000000009F20                 db 0D0h
.eh_frame:0000000000009F21                 db 0D3h
.eh_frame:0000000000009F22                 db 0FFh
.eh_frame:0000000000009F23                 db 0FFh
.eh_frame:0000000000009F24                 db  0Eh
.eh_frame:0000000000009F25                 db    0
.eh_frame:0000000000009F26                 db    0
.eh_frame:0000000000009F27                 db    0
.eh_frame:0000000000009F28                 db    0
.eh_frame:0000000000009F29                 db    0
.eh_frame:0000000000009F2A                 db    0
.eh_frame:0000000000009F2B                 db    0
.eh_frame:0000000000009F2C __FRAME_END__   db    0
.eh_frame:0000000000009F2D                 db    0
.eh_frame:0000000000009F2E                 db    0
.eh_frame:0000000000009F2F                 db    0
.eh_frame:0000000000009F2F _eh_frame       ends
.eh_frame:0000000000009F2F
.init_array:000000000020AA10 ; ELF Initialization Function Table
.init_array:000000000020AA10 ; ===========================================================================
.init_array:000000000020AA10
.init_array:000000000020AA10 ; Segment type: Pure data
.init_array:000000000020AA10 ; Segment permissions: Read/Write
.init_array:000000000020AA10 _init_array     segment qword public 'DATA' use64
.init_array:000000000020AA10                 assume cs:_init_array
.init_array:000000000020AA10                 ;org 20AA10h
.init_array:000000000020AA10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020AA10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020AA10                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020AA10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020AA10
.fini_array:000000000020AA18 ; ELF Termination Function Table
.fini_array:000000000020AA18 ; ===========================================================================
.fini_array:000000000020AA18
.fini_array:000000000020AA18 ; Segment type: Pure data
.fini_array:000000000020AA18 ; Segment permissions: Read/Write
.fini_array:000000000020AA18 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020AA18                 assume cs:_fini_array
.fini_array:000000000020AA18                 ;org 20AA18h
.fini_array:000000000020AA18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020AA18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020AA18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020AA18
.data.rel.ro:000000000020AA20 ; ===========================================================================
.data.rel.ro:000000000020AA20
.data.rel.ro:000000000020AA20 ; Segment type: Pure data
.data.rel.ro:000000000020AA20 ; Segment permissions: Read/Write
.data.rel.ro:000000000020AA20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020AA20                 assume cs:_data_rel_ro
.data.rel.ro:000000000020AA20                 ;org 20AA20h
.data.rel.ro:000000000020AA20 ; struct option long_options
.data.rel.ro:000000000020AA20 long_options    dq offset aDecode       ; name
.data.rel.ro:000000000020AA20                                         ; DATA XREF: main:loc_193B↑o
.data.rel.ro:000000000020AA20                 dd 0                    ; has_arg ; "decode"
.data.rel.ro:000000000020AA20                 db 4 dup(0)
.data.rel.ro:000000000020AA20                 dq 0                    ; flag
.data.rel.ro:000000000020AA20                 dd 64h                  ; val
.data.rel.ro:000000000020AA20                 db 4 dup(0)
.data.rel.ro:000000000020AA40                 dq offset aWrap         ; "wrap"
.data.rel.ro:000000000020AA48                 db    1
.data.rel.ro:000000000020AA49                 db    0
.data.rel.ro:000000000020AA4A                 db    0
.data.rel.ro:000000000020AA4B                 db    0
.data.rel.ro:000000000020AA4C                 db    0
.data.rel.ro:000000000020AA4D                 db    0
.data.rel.ro:000000000020AA4E                 db    0
.data.rel.ro:000000000020AA4F                 db    0
.data.rel.ro:000000000020AA50                 db    0
.data.rel.ro:000000000020AA51                 db    0
.data.rel.ro:000000000020AA52                 db    0
.data.rel.ro:000000000020AA53                 db    0
.data.rel.ro:000000000020AA54                 db    0
.data.rel.ro:000000000020AA55                 db    0
.data.rel.ro:000000000020AA56                 db    0
.data.rel.ro:000000000020AA57                 db    0
.data.rel.ro:000000000020AA58                 db  77h ; w
.data.rel.ro:000000000020AA59                 db    0
.data.rel.ro:000000000020AA5A                 db    0
.data.rel.ro:000000000020AA5B                 db    0
.data.rel.ro:000000000020AA5C                 db    0
.data.rel.ro:000000000020AA5D                 db    0
.data.rel.ro:000000000020AA5E                 db    0
.data.rel.ro:000000000020AA5F                 db    0
.data.rel.ro:000000000020AA60                 dq offset aIgnoreGarbage ; "ignore-garbage"
.data.rel.ro:000000000020AA68                 db    0
.data.rel.ro:000000000020AA69                 db    0
.data.rel.ro:000000000020AA6A                 db    0
.data.rel.ro:000000000020AA6B                 db    0
.data.rel.ro:000000000020AA6C                 db    0
.data.rel.ro:000000000020AA6D                 db    0
.data.rel.ro:000000000020AA6E                 db    0
.data.rel.ro:000000000020AA6F                 db    0
.data.rel.ro:000000000020AA70                 db    0
.data.rel.ro:000000000020AA71                 db    0
.data.rel.ro:000000000020AA72                 db    0
.data.rel.ro:000000000020AA73                 db    0
.data.rel.ro:000000000020AA74                 db    0
.data.rel.ro:000000000020AA75                 db    0
.data.rel.ro:000000000020AA76                 db    0
.data.rel.ro:000000000020AA77                 db    0
.data.rel.ro:000000000020AA78                 db  69h ; i
.data.rel.ro:000000000020AA79                 db    0
.data.rel.ro:000000000020AA7A                 db    0
.data.rel.ro:000000000020AA7B                 db    0
.data.rel.ro:000000000020AA7C                 db    0
.data.rel.ro:000000000020AA7D                 db    0
.data.rel.ro:000000000020AA7E                 db    0
.data.rel.ro:000000000020AA7F                 db    0
.data.rel.ro:000000000020AA80                 dq offset aBase64       ; "base64"
.data.rel.ro:000000000020AA88                 db    0
.data.rel.ro:000000000020AA89                 db    0
.data.rel.ro:000000000020AA8A                 db    0
.data.rel.ro:000000000020AA8B                 db    0
.data.rel.ro:000000000020AA8C                 db    0
.data.rel.ro:000000000020AA8D                 db    0
.data.rel.ro:000000000020AA8E                 db    0
.data.rel.ro:000000000020AA8F                 db    0
.data.rel.ro:000000000020AA90                 db    0
.data.rel.ro:000000000020AA91                 db    0
.data.rel.ro:000000000020AA92                 db    0
.data.rel.ro:000000000020AA93                 db    0
.data.rel.ro:000000000020AA94                 db    0
.data.rel.ro:000000000020AA95                 db    0
.data.rel.ro:000000000020AA96                 db    0
.data.rel.ro:000000000020AA97                 db    0
.data.rel.ro:000000000020AA98                 db  80h
.data.rel.ro:000000000020AA99                 db    0
.data.rel.ro:000000000020AA9A                 db    0
.data.rel.ro:000000000020AA9B                 db    0
.data.rel.ro:000000000020AA9C                 db    0
.data.rel.ro:000000000020AA9D                 db    0
.data.rel.ro:000000000020AA9E                 db    0
.data.rel.ro:000000000020AA9F                 db    0
.data.rel.ro:000000000020AAA0                 dq offset aBase64url    ; "base64url"
.data.rel.ro:000000000020AAA8                 db    0
.data.rel.ro:000000000020AAA9                 db    0
.data.rel.ro:000000000020AAAA                 db    0
.data.rel.ro:000000000020AAAB                 db    0
.data.rel.ro:000000000020AAAC                 db    0
.data.rel.ro:000000000020AAAD                 db    0
.data.rel.ro:000000000020AAAE                 db    0
.data.rel.ro:000000000020AAAF                 db    0
.data.rel.ro:000000000020AAB0                 db    0
.data.rel.ro:000000000020AAB1                 db    0
.data.rel.ro:000000000020AAB2                 db    0
.data.rel.ro:000000000020AAB3                 db    0
.data.rel.ro:000000000020AAB4                 db    0
.data.rel.ro:000000000020AAB5                 db    0
.data.rel.ro:000000000020AAB6                 db    0
.data.rel.ro:000000000020AAB7                 db    0
.data.rel.ro:000000000020AAB8                 db  81h
.data.rel.ro:000000000020AAB9                 db    0
.data.rel.ro:000000000020AABA                 db    0
.data.rel.ro:000000000020AABB                 db    0
.data.rel.ro:000000000020AABC                 db    0
.data.rel.ro:000000000020AABD                 db    0
.data.rel.ro:000000000020AABE                 db    0
.data.rel.ro:000000000020AABF                 db    0
.data.rel.ro:000000000020AAC0                 dq offset aBase32       ; "base32"
.data.rel.ro:000000000020AAC8                 db    0
.data.rel.ro:000000000020AAC9                 db    0
.data.rel.ro:000000000020AACA                 db    0
.data.rel.ro:000000000020AACB                 db    0
.data.rel.ro:000000000020AACC                 db    0
.data.rel.ro:000000000020AACD                 db    0
.data.rel.ro:000000000020AACE                 db    0
.data.rel.ro:000000000020AACF                 db    0
.data.rel.ro:000000000020AAD0                 db    0
.data.rel.ro:000000000020AAD1                 db    0
.data.rel.ro:000000000020AAD2                 db    0
.data.rel.ro:000000000020AAD3                 db    0
.data.rel.ro:000000000020AAD4                 db    0
.data.rel.ro:000000000020AAD5                 db    0
.data.rel.ro:000000000020AAD6                 db    0
.data.rel.ro:000000000020AAD7                 db    0
.data.rel.ro:000000000020AAD8                 db  82h
.data.rel.ro:000000000020AAD9                 db    0
.data.rel.ro:000000000020AADA                 db    0
.data.rel.ro:000000000020AADB                 db    0
.data.rel.ro:000000000020AADC                 db    0
.data.rel.ro:000000000020AADD                 db    0
.data.rel.ro:000000000020AADE                 db    0
.data.rel.ro:000000000020AADF                 db    0
.data.rel.ro:000000000020AAE0                 dq offset aBase32hex    ; "base32hex"
.data.rel.ro:000000000020AAE8                 db    0
.data.rel.ro:000000000020AAE9                 db    0
.data.rel.ro:000000000020AAEA                 db    0
.data.rel.ro:000000000020AAEB                 db    0
.data.rel.ro:000000000020AAEC                 db    0
.data.rel.ro:000000000020AAED                 db    0
.data.rel.ro:000000000020AAEE                 db    0
.data.rel.ro:000000000020AAEF                 db    0
.data.rel.ro:000000000020AAF0                 db    0
.data.rel.ro:000000000020AAF1                 db    0
.data.rel.ro:000000000020AAF2                 db    0
.data.rel.ro:000000000020AAF3                 db    0
.data.rel.ro:000000000020AAF4                 db    0
.data.rel.ro:000000000020AAF5                 db    0
.data.rel.ro:000000000020AAF6                 db    0
.data.rel.ro:000000000020AAF7                 db    0
.data.rel.ro:000000000020AAF8                 db  83h
.data.rel.ro:000000000020AAF9                 db    0
.data.rel.ro:000000000020AAFA                 db    0
.data.rel.ro:000000000020AAFB                 db    0
.data.rel.ro:000000000020AAFC                 db    0
.data.rel.ro:000000000020AAFD                 db    0
.data.rel.ro:000000000020AAFE                 db    0
.data.rel.ro:000000000020AAFF                 db    0
.data.rel.ro:000000000020AB00                 dq offset aBase16       ; "base16"
.data.rel.ro:000000000020AB08                 db    0
.data.rel.ro:000000000020AB09                 db    0
.data.rel.ro:000000000020AB0A                 db    0
.data.rel.ro:000000000020AB0B                 db    0
.data.rel.ro:000000000020AB0C                 db    0
.data.rel.ro:000000000020AB0D                 db    0
.data.rel.ro:000000000020AB0E                 db    0
.data.rel.ro:000000000020AB0F                 db    0
.data.rel.ro:000000000020AB10                 db    0
.data.rel.ro:000000000020AB11                 db    0
.data.rel.ro:000000000020AB12                 db    0
.data.rel.ro:000000000020AB13                 db    0
.data.rel.ro:000000000020AB14                 db    0
.data.rel.ro:000000000020AB15                 db    0
.data.rel.ro:000000000020AB16                 db    0
.data.rel.ro:000000000020AB17                 db    0
.data.rel.ro:000000000020AB18                 db  84h
.data.rel.ro:000000000020AB19                 db    0
.data.rel.ro:000000000020AB1A                 db    0
.data.rel.ro:000000000020AB1B                 db    0
.data.rel.ro:000000000020AB1C                 db    0
.data.rel.ro:000000000020AB1D                 db    0
.data.rel.ro:000000000020AB1E                 db    0
.data.rel.ro:000000000020AB1F                 db    0
.data.rel.ro:000000000020AB20                 dq offset aBase2msbf    ; "base2msbf"
.data.rel.ro:000000000020AB28                 db    0
.data.rel.ro:000000000020AB29                 db    0
.data.rel.ro:000000000020AB2A                 db    0
.data.rel.ro:000000000020AB2B                 db    0
.data.rel.ro:000000000020AB2C                 db    0
.data.rel.ro:000000000020AB2D                 db    0
.data.rel.ro:000000000020AB2E                 db    0
.data.rel.ro:000000000020AB2F                 db    0
.data.rel.ro:000000000020AB30                 db    0
.data.rel.ro:000000000020AB31                 db    0
.data.rel.ro:000000000020AB32                 db    0
.data.rel.ro:000000000020AB33                 db    0
.data.rel.ro:000000000020AB34                 db    0
.data.rel.ro:000000000020AB35                 db    0
.data.rel.ro:000000000020AB36                 db    0
.data.rel.ro:000000000020AB37                 db    0
.data.rel.ro:000000000020AB38                 db  85h
.data.rel.ro:000000000020AB39                 db    0
.data.rel.ro:000000000020AB3A                 db    0
.data.rel.ro:000000000020AB3B                 db    0
.data.rel.ro:000000000020AB3C                 db    0
.data.rel.ro:000000000020AB3D                 db    0
.data.rel.ro:000000000020AB3E                 db    0
.data.rel.ro:000000000020AB3F                 db    0
.data.rel.ro:000000000020AB40                 dq offset aBase2lsbf    ; "base2lsbf"
.data.rel.ro:000000000020AB48                 db    0
.data.rel.ro:000000000020AB49                 db    0
.data.rel.ro:000000000020AB4A                 db    0
.data.rel.ro:000000000020AB4B                 db    0
.data.rel.ro:000000000020AB4C                 db    0
.data.rel.ro:000000000020AB4D                 db    0
.data.rel.ro:000000000020AB4E                 db    0
.data.rel.ro:000000000020AB4F                 db    0
.data.rel.ro:000000000020AB50                 db    0
.data.rel.ro:000000000020AB51                 db    0
.data.rel.ro:000000000020AB52                 db    0
.data.rel.ro:000000000020AB53                 db    0
.data.rel.ro:000000000020AB54                 db    0
.data.rel.ro:000000000020AB55                 db    0
.data.rel.ro:000000000020AB56                 db    0
.data.rel.ro:000000000020AB57                 db    0
.data.rel.ro:000000000020AB58                 db  86h
.data.rel.ro:000000000020AB59                 db    0
.data.rel.ro:000000000020AB5A                 db    0
.data.rel.ro:000000000020AB5B                 db    0
.data.rel.ro:000000000020AB5C                 db    0
.data.rel.ro:000000000020AB5D                 db    0
.data.rel.ro:000000000020AB5E                 db    0
.data.rel.ro:000000000020AB5F                 db    0
.data.rel.ro:000000000020AB60                 dq offset aZ85          ; "z85"
.data.rel.ro:000000000020AB68                 db    0
.data.rel.ro:000000000020AB69                 db    0
.data.rel.ro:000000000020AB6A                 db    0
.data.rel.ro:000000000020AB6B                 db    0
.data.rel.ro:000000000020AB6C                 db    0
.data.rel.ro:000000000020AB6D                 db    0
.data.rel.ro:000000000020AB6E                 db    0
.data.rel.ro:000000000020AB6F                 db    0
.data.rel.ro:000000000020AB70                 db    0
.data.rel.ro:000000000020AB71                 db    0
.data.rel.ro:000000000020AB72                 db    0
.data.rel.ro:000000000020AB73                 db    0
.data.rel.ro:000000000020AB74                 db    0
.data.rel.ro:000000000020AB75                 db    0
.data.rel.ro:000000000020AB76                 db    0
.data.rel.ro:000000000020AB77                 db    0
.data.rel.ro:000000000020AB78                 db  87h
.data.rel.ro:000000000020AB79                 db    0
.data.rel.ro:000000000020AB7A                 db    0
.data.rel.ro:000000000020AB7B                 db    0
.data.rel.ro:000000000020AB7C                 db    0
.data.rel.ro:000000000020AB7D                 db    0
.data.rel.ro:000000000020AB7E                 db    0
.data.rel.ro:000000000020AB7F                 db    0
.data.rel.ro:000000000020AB80                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020AB88                 db    0
.data.rel.ro:000000000020AB89                 db    0
.data.rel.ro:000000000020AB8A                 db    0
.data.rel.ro:000000000020AB8B                 db    0
.data.rel.ro:000000000020AB8C                 db    0
.data.rel.ro:000000000020AB8D                 db    0
.data.rel.ro:000000000020AB8E                 db    0
.data.rel.ro:000000000020AB8F                 db    0
.data.rel.ro:000000000020AB90                 db    0
.data.rel.ro:000000000020AB91                 db    0
.data.rel.ro:000000000020AB92                 db    0
.data.rel.ro:000000000020AB93                 db    0
.data.rel.ro:000000000020AB94                 db    0
.data.rel.ro:000000000020AB95                 db    0
.data.rel.ro:000000000020AB96                 db    0
.data.rel.ro:000000000020AB97                 db    0
.data.rel.ro:000000000020AB98                 db  7Eh ; ~
.data.rel.ro:000000000020AB99                 db 0FFh
.data.rel.ro:000000000020AB9A                 db 0FFh
.data.rel.ro:000000000020AB9B                 db 0FFh
.data.rel.ro:000000000020AB9C                 db    0
.data.rel.ro:000000000020AB9D                 db    0
.data.rel.ro:000000000020AB9E                 db    0
.data.rel.ro:000000000020AB9F                 db    0
.data.rel.ro:000000000020ABA0                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020ABA8                 db    0
.data.rel.ro:000000000020ABA9                 db    0
.data.rel.ro:000000000020ABAA                 db    0
.data.rel.ro:000000000020ABAB                 db    0
.data.rel.ro:000000000020ABAC                 db    0
.data.rel.ro:000000000020ABAD                 db    0
.data.rel.ro:000000000020ABAE                 db    0
.data.rel.ro:000000000020ABAF                 db    0
.data.rel.ro:000000000020ABB0                 db    0
.data.rel.ro:000000000020ABB1                 db    0
.data.rel.ro:000000000020ABB2                 db    0
.data.rel.ro:000000000020ABB3                 db    0
.data.rel.ro:000000000020ABB4                 db    0
.data.rel.ro:000000000020ABB5                 db    0
.data.rel.ro:000000000020ABB6                 db    0
.data.rel.ro:000000000020ABB7                 db    0
.data.rel.ro:000000000020ABB8                 db  7Dh ; }
.data.rel.ro:000000000020ABB9                 db 0FFh
.data.rel.ro:000000000020ABBA                 db 0FFh
.data.rel.ro:000000000020ABBB                 db 0FFh
.data.rel.ro:000000000020ABBC                 db    0
.data.rel.ro:000000000020ABBD                 db    0
.data.rel.ro:000000000020ABBE                 db    0
.data.rel.ro:000000000020ABBF                 db    0
.data.rel.ro:000000000020ABC0                 db    0
.data.rel.ro:000000000020ABC1                 db    0
.data.rel.ro:000000000020ABC2                 db    0
.data.rel.ro:000000000020ABC3                 db    0
.data.rel.ro:000000000020ABC4                 db    0
.data.rel.ro:000000000020ABC5                 db    0
.data.rel.ro:000000000020ABC6                 db    0
.data.rel.ro:000000000020ABC7                 db    0
.data.rel.ro:000000000020ABC8                 db    0
.data.rel.ro:000000000020ABC9                 db    0
.data.rel.ro:000000000020ABCA                 db    0
.data.rel.ro:000000000020ABCB                 db    0
.data.rel.ro:000000000020ABCC                 db    0
.data.rel.ro:000000000020ABCD                 db    0
.data.rel.ro:000000000020ABCE                 db    0
.data.rel.ro:000000000020ABCF                 db    0
.data.rel.ro:000000000020ABD0                 db    0
.data.rel.ro:000000000020ABD1                 db    0
.data.rel.ro:000000000020ABD2                 db    0
.data.rel.ro:000000000020ABD3                 db    0
.data.rel.ro:000000000020ABD4                 db    0
.data.rel.ro:000000000020ABD5                 db    0
.data.rel.ro:000000000020ABD6                 db    0
.data.rel.ro:000000000020ABD7                 db    0
.data.rel.ro:000000000020ABD8                 db    0
.data.rel.ro:000000000020ABD9                 db    0
.data.rel.ro:000000000020ABDA                 db    0
.data.rel.ro:000000000020ABDB                 db    0
.data.rel.ro:000000000020ABDC                 db    0
.data.rel.ro:000000000020ABDD                 db    0
.data.rel.ro:000000000020ABDE                 db    0
.data.rel.ro:000000000020ABDF                 db    0
.data.rel.ro:000000000020ABE0                 public quoting_style_args
.data.rel.ro:000000000020ABE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020ABE8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020ABF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020ABF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020AC00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020AC08                 dq offset aBasenc+5     ; "c"
.data.rel.ro:000000000020AC10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020AC18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020AC20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020AC28                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020AC30                 db    0
.data.rel.ro:000000000020AC31                 db    0
.data.rel.ro:000000000020AC32                 db    0
.data.rel.ro:000000000020AC33                 db    0
.data.rel.ro:000000000020AC34                 db    0
.data.rel.ro:000000000020AC35                 db    0
.data.rel.ro:000000000020AC36                 db    0
.data.rel.ro:000000000020AC37                 db    0
.data.rel.ro:000000000020AC37 _data_rel_ro    ends
.data.rel.ro:000000000020AC37
LOAD:000000000020AC38 ; ELF Dynamic Information
LOAD:000000000020AC38 ; ===========================================================================
LOAD:000000000020AC38
LOAD:000000000020AC38 ; Segment type: Pure data
LOAD:000000000020AC38 ; Segment permissions: Read/Write
LOAD:000000000020AC38 LOAD            segment byte public 'DATA' use64
LOAD:000000000020AC38                 assume cs:LOAD
LOAD:000000000020AC38                 ;org 20AC38h
LOAD:000000000020AC38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020AC38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020AC38                                         ; DT_NEEDED libc.so.6
LOAD:000000000020AC48                 Elf64_Dyn <0Ch, 1568h>  ; DT_INIT
LOAD:000000000020AC58                 Elf64_Dyn <0Dh, 7300h>  ; DT_FINI
LOAD:000000000020AC68                 Elf64_Dyn <19h, 20AA10h> ; DT_INIT_ARRAY
LOAD:000000000020AC78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020AC88                 Elf64_Dyn <1Ah, 20AA18h> ; DT_FINI_ARRAY
LOAD:000000000020AC98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020ACA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020ACB8                 Elf64_Dyn <5, 8F8h>     ; DT_STRTAB
LOAD:000000000020ACC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020ACD8                 Elf64_Dyn <0Ah, 301h>   ; DT_STRSZ
LOAD:000000000020ACE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020ACF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020AD08                 Elf64_Dyn <3, 20AE28h>  ; DT_PLTGOT
LOAD:000000000020AD18                 Elf64_Dyn <2, 4B0h>     ; DT_PLTRELSZ
LOAD:000000000020AD28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020AD38                 Elf64_Dyn <17h, 10B8h>  ; DT_JMPREL
LOAD:000000000020AD48                 Elf64_Dyn <7, 0CE0h>    ; DT_RELA
LOAD:000000000020AD58                 Elf64_Dyn <8, 3D8h>     ; DT_RELASZ
LOAD:000000000020AD68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020AD78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020AD88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020AD98                 Elf64_Dyn <6FFFFFFEh, 0C80h> ; DT_VERNEED
LOAD:000000000020ADA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020ADB8                 Elf64_Dyn <6FFFFFF0h, 0BFAh> ; DT_VERSYM
LOAD:000000000020ADC8                 Elf64_Dyn <6FFFFFF9h, 1Dh> ; DT_RELACOUNT
LOAD:000000000020ADD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020ADE8                 db    0
LOAD:000000000020ADE9                 db    0
LOAD:000000000020ADEA                 db    0
LOAD:000000000020ADEB                 db    0
LOAD:000000000020ADEC                 db    0
LOAD:000000000020ADED                 db    0
LOAD:000000000020ADEE                 db    0
LOAD:000000000020ADEF                 db    0
LOAD:000000000020ADF0                 db    0
LOAD:000000000020ADF1                 db    0
LOAD:000000000020ADF2                 db    0
LOAD:000000000020ADF3                 db    0
LOAD:000000000020ADF4                 db    0
LOAD:000000000020ADF5                 db    0
LOAD:000000000020ADF6                 db    0
LOAD:000000000020ADF7                 db    0
LOAD:000000000020ADF8                 db    0
LOAD:000000000020ADF9                 db    0
LOAD:000000000020ADFA                 db    0
LOAD:000000000020ADFB                 db    0
LOAD:000000000020ADFC                 db    0
LOAD:000000000020ADFD                 db    0
LOAD:000000000020ADFE                 db    0
LOAD:000000000020ADFF                 db    0
LOAD:000000000020AE00                 db    0
LOAD:000000000020AE01                 db    0
LOAD:000000000020AE02                 db    0
LOAD:000000000020AE03                 db    0
LOAD:000000000020AE04                 db    0
LOAD:000000000020AE05                 db    0
LOAD:000000000020AE06                 db    0
LOAD:000000000020AE07                 db    0
LOAD:000000000020AE08                 db    0
LOAD:000000000020AE09                 db    0
LOAD:000000000020AE0A                 db    0
LOAD:000000000020AE0B                 db    0
LOAD:000000000020AE0C                 db    0
LOAD:000000000020AE0D                 db    0
LOAD:000000000020AE0E                 db    0
LOAD:000000000020AE0F                 db    0
LOAD:000000000020AE10                 db    0
LOAD:000000000020AE11                 db    0
LOAD:000000000020AE12                 db    0
LOAD:000000000020AE13                 db    0
LOAD:000000000020AE14                 db    0
LOAD:000000000020AE15                 db    0
LOAD:000000000020AE16                 db    0
LOAD:000000000020AE17                 db    0
LOAD:000000000020AE18                 db    0
LOAD:000000000020AE19                 db    0
LOAD:000000000020AE1A                 db    0
LOAD:000000000020AE1B                 db    0
LOAD:000000000020AE1C                 db    0
LOAD:000000000020AE1D                 db    0
LOAD:000000000020AE1E                 db    0
LOAD:000000000020AE1F                 db    0
LOAD:000000000020AE20                 db    0
LOAD:000000000020AE21                 db    0
LOAD:000000000020AE22                 db    0
LOAD:000000000020AE23                 db    0
LOAD:000000000020AE24                 db    0
LOAD:000000000020AE25                 db    0
LOAD:000000000020AE26                 db    0
LOAD:000000000020AE27                 db    0
LOAD:000000000020AE27 LOAD            ends
LOAD:000000000020AE27
.got:000000000020AE28 ; ===========================================================================
.got:000000000020AE28
.got:000000000020AE28 ; Segment type: Pure data
.got:000000000020AE28 ; Segment permissions: Read/Write
.got:000000000020AE28 _got            segment qword public 'DATA' use64
.got:000000000020AE28                 assume cs:_got
.got:000000000020AE28                 ;org 20AE28h
.got:000000000020AE28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020AE30 qword_20AE30    dq 0                    ; DATA XREF: sub_1580↑r
.got:000000000020AE38 qword_20AE38    dq 0                    ; DATA XREF: sub_1580+6↑r
.got:000000000020AE40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020AE48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020AE50 __errno_location_ptr dq offset __errno_location
.got:000000000020AE50                                         ; DATA XREF: ___errno_location↑r
.got:000000000020AE58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020AE60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020AE68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020AE70 fread_unlocked_ptr dq offset fread_unlocked
.got:000000000020AE70                                         ; DATA XREF: _fread_unlocked↑r
.got:000000000020AE78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020AE80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020AE88 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020AE88                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020AE90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020AE98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020AE98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020AEA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020AEA8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020AEA8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020AEB0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020AEB8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020AEC0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020AEC8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020AED0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020AED8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020AEE0 __assert_fail_ptr dq offset __assert_fail
.got:000000000020AEE0                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020AEE8 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000020AEE8                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000020AEF0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020AEF8 posix_fadvise_ptr dq offset posix_fadvise
.got:000000000020AEF8                                         ; DATA XREF: _posix_fadvise↑r
.got:000000000020AF00 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:000000000020AF08 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020AF10 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020AF10                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020AF18 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020AF20 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020AF28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020AF30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020AF38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020AF40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020AF48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020AF50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020AF58 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000020AF58                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000020AF60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020AF68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020AF70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020AF78 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020AF80 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020AF88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020AF90 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:000000000020AF98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020AFA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020AFA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020AFB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020AFB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020AFB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020AFC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020AFC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020AFC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020AFD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020AFD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020AFD8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020AFD8                                         ; DATA XREF: start+24↑r
.got:000000000020AFE0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020AFE0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020AFE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020AFE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020AFF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020AFF0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020AFF0                                         ; __do_global_dtors_aux+9↑r
.got:000000000020AFF0 _got            ends
.got:000000000020AFF0
LOAD:000000000020AFF8 ; ===========================================================================
LOAD:000000000020AFF8
LOAD:000000000020AFF8 ; Segment type: Pure data
LOAD:000000000020AFF8 ; Segment permissions: Read/Write
LOAD:000000000020AFF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020AFF8                 assume cs:LOAD
LOAD:000000000020AFF8                 ;org 20AFF8h
LOAD:000000000020AFF8                 align 20h
LOAD:000000000020AFF8 LOAD            ends
LOAD:000000000020AFF8
.data:000000000020B000 ; ===========================================================================
.data:000000000020B000
.data:000000000020B000 ; Segment type: Pure data
.data:000000000020B000 ; Segment permissions: Read/Write
.data:000000000020B000 _data           segment align_32 public 'DATA' use64
.data:000000000020B000                 assume cs:_data
.data:000000000020B000                 ;org 20B000h
.data:000000000020B000                 public __data_start ; weak
.data:000000000020B000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020B000                                         ; data_start
.data:000000000020B001                 db    0
.data:000000000020B002                 db    0
.data:000000000020B003                 db    0
.data:000000000020B004                 db    0
.data:000000000020B005                 db    0
.data:000000000020B006                 db    0
.data:000000000020B007                 db    0
.data:000000000020B008                 public __dso_handle
.data:000000000020B008 ; void *_dso_handle
.data:000000000020B008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020B008                                         ; atexit↑r ...
.data:000000000020B010                 public Version
.data:000000000020B010 Version         dq offset base32_norm_to_hex+29h
.data:000000000020B010                                         ; DATA XREF: main+DB↑r
.data:000000000020B010                                         ; "8.31"
.data:000000000020B018                 public exit_failure
.data:000000000020B018 ; int exit_failure
.data:000000000020B018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_4402↑r
.data:000000000020B018                                         ; xalloc_die+17↑r
.data:000000000020B01C                 align 20h
.data:000000000020B020                 public quote_quoting_options
.data:000000000020B020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020B020                                         ; quote_mem↑o ...
.data:000000000020B021                 db    0
.data:000000000020B022                 db    0
.data:000000000020B023                 db    0
.data:000000000020B024                 db    0
.data:000000000020B025                 db    0
.data:000000000020B026                 db    0
.data:000000000020B027                 db    0
.data:000000000020B028                 db    0
.data:000000000020B029                 db    0
.data:000000000020B02A                 db    0
.data:000000000020B02B                 db    0
.data:000000000020B02C                 db    0
.data:000000000020B02D                 db    0
.data:000000000020B02E                 db    0
.data:000000000020B02F                 db    0
.data:000000000020B030                 db    0
.data:000000000020B031                 db    0
.data:000000000020B032                 db    0
.data:000000000020B033                 db    0
.data:000000000020B034                 db    0
.data:000000000020B035                 db    0
.data:000000000020B036                 db    0
.data:000000000020B037                 db    0
.data:000000000020B038                 db    0
.data:000000000020B039                 db    0
.data:000000000020B03A                 db    0
.data:000000000020B03B                 db    0
.data:000000000020B03C                 db    0
.data:000000000020B03D                 db    0
.data:000000000020B03E                 db    0
.data:000000000020B03F                 db    0
.data:000000000020B040                 db    0
.data:000000000020B041                 db    0
.data:000000000020B042                 db    0
.data:000000000020B043                 db    0
.data:000000000020B044                 db    0
.data:000000000020B045                 db    0
.data:000000000020B046                 db    0
.data:000000000020B047                 db    0
.data:000000000020B048                 db    0
.data:000000000020B049                 db    0
.data:000000000020B04A                 db    0
.data:000000000020B04B                 db    0
.data:000000000020B04C                 db    0
.data:000000000020B04D                 db    0
.data:000000000020B04E                 db    0
.data:000000000020B04F                 db    0
.data:000000000020B050                 db    0
.data:000000000020B051                 db    0
.data:000000000020B052                 db    0
.data:000000000020B053                 db    0
.data:000000000020B054                 db    0
.data:000000000020B055                 db    0
.data:000000000020B056                 db    0
.data:000000000020B057                 db    0
.data:000000000020B058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020B058                                         ; quotearg_n_options:loc_58BD↑r ...
.data:000000000020B05C                 align 20h
.data:000000000020B060 ; void *slotvec
.data:000000000020B060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020B060                                         ; quotearg_n_options+76↑w ...
.data:000000000020B068                 align 10h
.data:000000000020B070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020B070                                         ; quotearg_n_options+187↑r ...
.data:000000000020B078 off_20B078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020B078 _data           ends
.data:000000000020B078
.bss:000000000020B080 ; ===========================================================================
.bss:000000000020B080
.bss:000000000020B080 ; Segment type: Uninitialized
.bss:000000000020B080 ; Segment permissions: Read/Write
.bss:000000000020B080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020B080                 assume cs:_bss
.bss:000000000020B080                 ;org 20B080h
.bss:000000000020B080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020B080                 public __bss_start ; weak
.bss:000000000020B080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000838↑o
.bss:000000000020B080                                         ; LOAD:0000000000000898↑o ...
.bss:000000000020B080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020B080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020B080                                         ; _edata
.bss:000000000020B080                                         ; Copy of shared data
.bss:000000000020B088                 public stdout@@GLIBC_2_2_5
.bss:000000000020B088 ; FILE *stdout
.bss:000000000020B088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000820↑o
.bss:000000000020B088                                         ; main+D4↑r ...
.bss:000000000020B088                                         ; Alternative name is 'stdout'
.bss:000000000020B088                                         ; Copy of shared data
.bss:000000000020B090                 public stdin@@GLIBC_2_2_5
.bss:000000000020B090 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000850↑o
.bss:000000000020B090                                         ; main:loc_1F7F↑r
.bss:000000000020B090                                         ; Alternative name is 'stdin'
.bss:000000000020B090                                         ; Copy of shared data
.bss:000000000020B098                 public optind@@GLIBC_2_2_5
.bss:000000000020B098 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008C8↑o
.bss:000000000020B098                                         ; main:loc_1AB1↑r
.bss:000000000020B098                                         ; Alternative name is 'optind'
.bss:000000000020B098                                         ; Copy of shared data
.bss:000000000020B09C                 align 20h
.bss:000000000020B0A0                 public optarg@@GLIBC_2_2_5
.bss:000000000020B0A0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008E0↑o
.bss:000000000020B0A0                                         ; main+163↑r
.bss:000000000020B0A0                                         ; Alternative name is 'optarg'
.bss:000000000020B0A0                                         ; Copy of shared data
.bss:000000000020B0A8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020B0A8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020B0A8                                         ; DATA XREF: LOAD:0000000000000868↑o
.bss:000000000020B0A8                                         ; LOAD:0000000000000880↑o ...
.bss:000000000020B0A8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020B0A8                                         ; Copy of shared data
.bss:000000000020B0B0                 align 20h
.bss:000000000020B0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020B0C0 ; FILE *stderr
.bss:000000000020B0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:000000000020B0C0                                         ; usage+3D↑r ...
.bss:000000000020B0C0                                         ; Alternative name is 'stderr'
.bss:000000000020B0C0                                         ; Copy of shared data
.bss:000000000020B0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020B0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020B0C9                 align 10h
.bss:000000000020B0D0 base_decode_ctx dq ?                    ; DATA XREF: main+1EA↑w
.bss:000000000020B0D0                                         ; main+3D8↑w ...
.bss:000000000020B0D8 base_decode_ctx_init dq ?               ; DATA XREF: main+1DC↑w
.bss:000000000020B0D8                                         ; main+2A7↑r ...
.bss:000000000020B0E0 base_encode     dq ?                    ; DATA XREF: main+1CE↑w
.bss:000000000020B0E0                                         ; main+3BC↑w ...
.bss:000000000020B0E8 isbase          dq ?                    ; DATA XREF: main+1C0↑w
.bss:000000000020B0E8                                         ; main+356↑r ...
.bss:000000000020B0F0 base_length     dq ?                    ; DATA XREF: main+1B2↑w
.bss:000000000020B0F0                                         ; main+271↑r ...
.bss:000000000020B0F8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020B0F8                                         ; close_stdout+1B↑r
.bss:000000000020B0F9                 align 20h
.bss:000000000020B100 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020B100                                         ; close_stdout+56↑r
.bss:000000000020B108                 public program_name
.bss:000000000020B108 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020B108                                         ; set_program_name:loc_44DD↑w
.bss:000000000020B110                 align 20h
.bss:000000000020B120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020B120                                         ; quotearg_free+46↑o ...
.bss:000000000020B121                 db    ? ;
.bss:000000000020B122                 db    ? ;
.bss:000000000020B123                 db    ? ;
.bss:000000000020B124                 db    ? ;
.bss:000000000020B125                 db    ? ;
.bss:000000000020B126                 db    ? ;
.bss:000000000020B127                 db    ? ;
.bss:000000000020B128                 db    ? ;
.bss:000000000020B129                 db    ? ;
.bss:000000000020B12A                 db    ? ;
.bss:000000000020B12B                 db    ? ;
.bss:000000000020B12C                 db    ? ;
.bss:000000000020B12D                 db    ? ;
.bss:000000000020B12E                 db    ? ;
.bss:000000000020B12F                 db    ? ;
.bss:000000000020B130                 db    ? ;
.bss:000000000020B131                 db    ? ;
.bss:000000000020B132                 db    ? ;
.bss:000000000020B133                 db    ? ;
.bss:000000000020B134                 db    ? ;
.bss:000000000020B135                 db    ? ;
.bss:000000000020B136                 db    ? ;
.bss:000000000020B137                 db    ? ;
.bss:000000000020B138                 db    ? ;
.bss:000000000020B139                 db    ? ;
.bss:000000000020B13A                 db    ? ;
.bss:000000000020B13B                 db    ? ;
.bss:000000000020B13C                 db    ? ;
.bss:000000000020B13D                 db    ? ;
.bss:000000000020B13E                 db    ? ;
.bss:000000000020B13F                 db    ? ;
.bss:000000000020B140                 db    ? ;
.bss:000000000020B141                 db    ? ;
.bss:000000000020B142                 db    ? ;
.bss:000000000020B143                 db    ? ;
.bss:000000000020B144                 db    ? ;
.bss:000000000020B145                 db    ? ;
.bss:000000000020B146                 db    ? ;
.bss:000000000020B147                 db    ? ;
.bss:000000000020B148                 db    ? ;
.bss:000000000020B149                 db    ? ;
.bss:000000000020B14A                 db    ? ;
.bss:000000000020B14B                 db    ? ;
.bss:000000000020B14C                 db    ? ;
.bss:000000000020B14D                 db    ? ;
.bss:000000000020B14E                 db    ? ;
.bss:000000000020B14F                 db    ? ;
.bss:000000000020B150                 db    ? ;
.bss:000000000020B151                 db    ? ;
.bss:000000000020B152                 db    ? ;
.bss:000000000020B153                 db    ? ;
.bss:000000000020B154                 db    ? ;
.bss:000000000020B155                 db    ? ;
.bss:000000000020B156                 db    ? ;
.bss:000000000020B157                 db    ? ;
.bss:000000000020B158                 db    ? ;
.bss:000000000020B159                 db    ? ;
.bss:000000000020B15A                 db    ? ;
.bss:000000000020B15B                 db    ? ;
.bss:000000000020B15C                 db    ? ;
.bss:000000000020B15D                 db    ? ;
.bss:000000000020B15E                 db    ? ;
.bss:000000000020B15F                 db    ? ;
.bss:000000000020B160                 db    ? ;
.bss:000000000020B161                 db    ? ;
.bss:000000000020B162                 db    ? ;
.bss:000000000020B163                 db    ? ;
.bss:000000000020B164                 db    ? ;
.bss:000000000020B165                 db    ? ;
.bss:000000000020B166                 db    ? ;
.bss:000000000020B167                 db    ? ;
.bss:000000000020B168                 db    ? ;
.bss:000000000020B169                 db    ? ;
.bss:000000000020B16A                 db    ? ;
.bss:000000000020B16B                 db    ? ;
.bss:000000000020B16C                 db    ? ;
.bss:000000000020B16D                 db    ? ;
.bss:000000000020B16E                 db    ? ;
.bss:000000000020B16F                 db    ? ;
.bss:000000000020B170                 db    ? ;
.bss:000000000020B171                 db    ? ;
.bss:000000000020B172                 db    ? ;
.bss:000000000020B173                 db    ? ;
.bss:000000000020B174                 db    ? ;
.bss:000000000020B175                 db    ? ;
.bss:000000000020B176                 db    ? ;
.bss:000000000020B177                 db    ? ;
.bss:000000000020B178                 db    ? ;
.bss:000000000020B179                 db    ? ;
.bss:000000000020B17A                 db    ? ;
.bss:000000000020B17B                 db    ? ;
.bss:000000000020B17C                 db    ? ;
.bss:000000000020B17D                 db    ? ;
.bss:000000000020B17E                 db    ? ;
.bss:000000000020B17F                 db    ? ;
.bss:000000000020B180                 db    ? ;
.bss:000000000020B181                 db    ? ;
.bss:000000000020B182                 db    ? ;
.bss:000000000020B183                 db    ? ;
.bss:000000000020B184                 db    ? ;
.bss:000000000020B185                 db    ? ;
.bss:000000000020B186                 db    ? ;
.bss:000000000020B187                 db    ? ;
.bss:000000000020B188                 db    ? ;
.bss:000000000020B189                 db    ? ;
.bss:000000000020B18A                 db    ? ;
.bss:000000000020B18B                 db    ? ;
.bss:000000000020B18C                 db    ? ;
.bss:000000000020B18D                 db    ? ;
.bss:000000000020B18E                 db    ? ;
.bss:000000000020B18F                 db    ? ;
.bss:000000000020B190                 db    ? ;
.bss:000000000020B191                 db    ? ;
.bss:000000000020B192                 db    ? ;
.bss:000000000020B193                 db    ? ;
.bss:000000000020B194                 db    ? ;
.bss:000000000020B195                 db    ? ;
.bss:000000000020B196                 db    ? ;
.bss:000000000020B197                 db    ? ;
.bss:000000000020B198                 db    ? ;
.bss:000000000020B199                 db    ? ;
.bss:000000000020B19A                 db    ? ;
.bss:000000000020B19B                 db    ? ;
.bss:000000000020B19C                 db    ? ;
.bss:000000000020B19D                 db    ? ;
.bss:000000000020B19E                 db    ? ;
.bss:000000000020B19F                 db    ? ;
.bss:000000000020B1A0                 db    ? ;
.bss:000000000020B1A1                 db    ? ;
.bss:000000000020B1A2                 db    ? ;
.bss:000000000020B1A3                 db    ? ;
.bss:000000000020B1A4                 db    ? ;
.bss:000000000020B1A5                 db    ? ;
.bss:000000000020B1A6                 db    ? ;
.bss:000000000020B1A7                 db    ? ;
.bss:000000000020B1A8                 db    ? ;
.bss:000000000020B1A9                 db    ? ;
.bss:000000000020B1AA                 db    ? ;
.bss:000000000020B1AB                 db    ? ;
.bss:000000000020B1AC                 db    ? ;
.bss:000000000020B1AD                 db    ? ;
.bss:000000000020B1AE                 db    ? ;
.bss:000000000020B1AF                 db    ? ;
.bss:000000000020B1B0                 db    ? ;
.bss:000000000020B1B1                 db    ? ;
.bss:000000000020B1B2                 db    ? ;
.bss:000000000020B1B3                 db    ? ;
.bss:000000000020B1B4                 db    ? ;
.bss:000000000020B1B5                 db    ? ;
.bss:000000000020B1B6                 db    ? ;
.bss:000000000020B1B7                 db    ? ;
.bss:000000000020B1B8                 db    ? ;
.bss:000000000020B1B9                 db    ? ;
.bss:000000000020B1BA                 db    ? ;
.bss:000000000020B1BB                 db    ? ;
.bss:000000000020B1BC                 db    ? ;
.bss:000000000020B1BD                 db    ? ;
.bss:000000000020B1BE                 db    ? ;
.bss:000000000020B1BF                 db    ? ;
.bss:000000000020B1C0                 db    ? ;
.bss:000000000020B1C1                 db    ? ;
.bss:000000000020B1C2                 db    ? ;
.bss:000000000020B1C3                 db    ? ;
.bss:000000000020B1C4                 db    ? ;
.bss:000000000020B1C5                 db    ? ;
.bss:000000000020B1C6                 db    ? ;
.bss:000000000020B1C7                 db    ? ;
.bss:000000000020B1C8                 db    ? ;
.bss:000000000020B1C9                 db    ? ;
.bss:000000000020B1CA                 db    ? ;
.bss:000000000020B1CB                 db    ? ;
.bss:000000000020B1CC                 db    ? ;
.bss:000000000020B1CD                 db    ? ;
.bss:000000000020B1CE                 db    ? ;
.bss:000000000020B1CF                 db    ? ;
.bss:000000000020B1D0                 db    ? ;
.bss:000000000020B1D1                 db    ? ;
.bss:000000000020B1D2                 db    ? ;
.bss:000000000020B1D3                 db    ? ;
.bss:000000000020B1D4                 db    ? ;
.bss:000000000020B1D5                 db    ? ;
.bss:000000000020B1D6                 db    ? ;
.bss:000000000020B1D7                 db    ? ;
.bss:000000000020B1D8                 db    ? ;
.bss:000000000020B1D9                 db    ? ;
.bss:000000000020B1DA                 db    ? ;
.bss:000000000020B1DB                 db    ? ;
.bss:000000000020B1DC                 db    ? ;
.bss:000000000020B1DD                 db    ? ;
.bss:000000000020B1DE                 db    ? ;
.bss:000000000020B1DF                 db    ? ;
.bss:000000000020B1E0                 db    ? ;
.bss:000000000020B1E1                 db    ? ;
.bss:000000000020B1E2                 db    ? ;
.bss:000000000020B1E3                 db    ? ;
.bss:000000000020B1E4                 db    ? ;
.bss:000000000020B1E5                 db    ? ;
.bss:000000000020B1E6                 db    ? ;
.bss:000000000020B1E7                 db    ? ;
.bss:000000000020B1E8                 db    ? ;
.bss:000000000020B1E9                 db    ? ;
.bss:000000000020B1EA                 db    ? ;
.bss:000000000020B1EB                 db    ? ;
.bss:000000000020B1EC                 db    ? ;
.bss:000000000020B1ED                 db    ? ;
.bss:000000000020B1EE                 db    ? ;
.bss:000000000020B1EF                 db    ? ;
.bss:000000000020B1F0                 db    ? ;
.bss:000000000020B1F1                 db    ? ;
.bss:000000000020B1F2                 db    ? ;
.bss:000000000020B1F3                 db    ? ;
.bss:000000000020B1F4                 db    ? ;
.bss:000000000020B1F5                 db    ? ;
.bss:000000000020B1F6                 db    ? ;
.bss:000000000020B1F7                 db    ? ;
.bss:000000000020B1F8                 db    ? ;
.bss:000000000020B1F9                 db    ? ;
.bss:000000000020B1FA                 db    ? ;
.bss:000000000020B1FB                 db    ? ;
.bss:000000000020B1FC                 db    ? ;
.bss:000000000020B1FD                 db    ? ;
.bss:000000000020B1FE                 db    ? ;
.bss:000000000020B1FF                 db    ? ;
.bss:000000000020B200                 db    ? ;
.bss:000000000020B201                 db    ? ;
.bss:000000000020B202                 db    ? ;
.bss:000000000020B203                 db    ? ;
.bss:000000000020B204                 db    ? ;
.bss:000000000020B205                 db    ? ;
.bss:000000000020B206                 db    ? ;
.bss:000000000020B207                 db    ? ;
.bss:000000000020B208                 db    ? ;
.bss:000000000020B209                 db    ? ;
.bss:000000000020B20A                 db    ? ;
.bss:000000000020B20B                 db    ? ;
.bss:000000000020B20C                 db    ? ;
.bss:000000000020B20D                 db    ? ;
.bss:000000000020B20E                 db    ? ;
.bss:000000000020B20F                 db    ? ;
.bss:000000000020B210                 db    ? ;
.bss:000000000020B211                 db    ? ;
.bss:000000000020B212                 db    ? ;
.bss:000000000020B213                 db    ? ;
.bss:000000000020B214                 db    ? ;
.bss:000000000020B215                 db    ? ;
.bss:000000000020B216                 db    ? ;
.bss:000000000020B217                 db    ? ;
.bss:000000000020B218                 db    ? ;
.bss:000000000020B219                 db    ? ;
.bss:000000000020B21A                 db    ? ;
.bss:000000000020B21B                 db    ? ;
.bss:000000000020B21C                 db    ? ;
.bss:000000000020B21D                 db    ? ;
.bss:000000000020B21E                 db    ? ;
.bss:000000000020B21F                 db    ? ;
.bss:000000000020B220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020B220                                         ; get_quoting_style↑o ...
.bss:000000000020B230 xmmword_20B230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020B230                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020B240 xmmword_20B240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020B240                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020B250 qword_20B250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020B250                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020B250 _bss            ends
.bss:000000000020B250
.prgend:000000000020B258 ; ===========================================================================
.prgend:000000000020B258
.prgend:000000000020B258 ; Segment type: Zero-length
.prgend:000000000020B258 _prgend         segment byte public '' use64
.prgend:000000000020B258 _end            label byte
.prgend:000000000020B258 _prgend         ends
.prgend:000000000020B258
extern:000000000020B260 ; ===========================================================================
extern:000000000020B260
extern:000000000020B260 ; Segment type: Externs
extern:000000000020B260 ; extern
extern:000000000020B260 ; void free(void *ptr)
extern:000000000020B260                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020B260                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020B268 ; void __noreturn abort(void)
extern:000000000020B268                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020B268                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020B270 ; int *_errno_location(void)
extern:000000000020B270                 extrn __errno_location:near
extern:000000000020B270                                         ; CODE XREF: ___errno_location↑j
extern:000000000020B270                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020B278 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020B278                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020B278                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020B280 ; void __noreturn exit(int status)
extern:000000000020B280                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020B280                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020B288 ; size_t _fpending(FILE *fp)
extern:000000000020B288                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020B288                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020B290 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020B290                 extrn fread_unlocked:near
extern:000000000020B290                                         ; CODE XREF: _fread_unlocked↑j
extern:000000000020B290                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:000000000020B298 ; char *textdomain(const char *domainname)
extern:000000000020B298                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020B298                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020B2A0 ; int fclose(FILE *stream)
extern:000000000020B2A0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020B2A0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020B2A8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020B2A8                 extrn bindtextdomain:near
extern:000000000020B2A8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020B2A8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020B2B0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020B2B0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020B2B0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020B2B8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020B2B8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020B2B8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020B2B8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020B2C0 ; size_t strlen(const char *s)
extern:000000000020B2C0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020B2C0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020B2C8                 extrn __stack_chk_fail:near
extern:000000000020B2C8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020B2C8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020B2D0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020B2D0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020B2D0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020B2D8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020B2D8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020B2D8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020B2E0 ; char *strchr(const char *s, int c)
extern:000000000020B2E0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020B2E0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020B2E8 ; int _overflow(_IO_FILE *, int)
extern:000000000020B2E8                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020B2E8                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020B2F0 ; char *strrchr(const char *s, int c)
extern:000000000020B2F0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020B2F0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020B2F8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020B2F8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020B2F8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020B300 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020B300                 extrn __assert_fail:near
extern:000000000020B300                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020B300                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020B308 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000020B308                 extrn __strtoul_internal:near
extern:000000000020B308                                         ; CODE XREF: ___strtoul_internal↑j
extern:000000000020B308                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:000000000020B310 ; void *memset(void *s, int c, size_t n)
extern:000000000020B310                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020B310                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020B318 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:000000000020B318                 extrn posix_fadvise:near
extern:000000000020B318                                         ; CODE XREF: _posix_fadvise↑j
extern:000000000020B318                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:000000000020B320 ; void *memchr(const void *s, int c, size_t n)
extern:000000000020B320                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:000000000020B320                                         ; DATA XREF: .got:memchr_ptr↑o
extern:000000000020B328 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020B328                 extrn __libc_start_main:near
extern:000000000020B328                                         ; CODE XREF: start+24↑p
extern:000000000020B328                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020B330 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020B330                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020B330                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020B338 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020B338                 extrn fputs_unlocked:near
extern:000000000020B338                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020B338                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020B340 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020B340                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020B340                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020B348 ; int strcmp(const char *s1, const char *s2)
extern:000000000020B348                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020B348                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020B350 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020B350                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020B350                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020B358 ; int fileno(FILE *stream)
extern:000000000020B358                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020B358                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020B360 ; void *malloc(size_t size)
extern:000000000020B360                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020B360                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020B368 ; int fflush(FILE *stream)
extern:000000000020B368                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020B368                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020B370 ; char *nl_langinfo(nl_item item)
extern:000000000020B370                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020B370                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020B378 ; int _freading(FILE *fp)
extern:000000000020B378                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020B378                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020B380 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020B380                 extrn fwrite_unlocked:near
extern:000000000020B380                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020B380                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020B388 ; void *realloc(void *ptr, size_t size)
extern:000000000020B388                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020B388                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020B390 ; char *setlocale(int category, const char *locale)
extern:000000000020B390                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020B390                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020B398                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020B398                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020B3A0 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020B3A0                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020B3A0                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020B3A8 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020B3A8                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020B3A8                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020B3B0 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020B3B0                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020B3B0                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020B3B8 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000020B3B8                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000020B3B8                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000020B3C0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020B3C0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020B3C0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020B3C8 ; void __noreturn exit(int status)
extern:000000000020B3C8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020B3C8                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020B3D0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020B3D0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020B3D0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020B3D8                 extrn __fprintf_chk:near
extern:000000000020B3D8                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020B3D8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020B3E0 ; int mbsinit(const mbstate_t *ps)
extern:000000000020B3E0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020B3E0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020B3E8 ; int iswprint(wint_t wc)
extern:000000000020B3E8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020B3E8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020B3F0 ; int __fastcall __cxa_finalize(void *)
extern:000000000020B3F0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020B3F0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020B3F0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020B3F8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020B3F8                 extrn __ctype_b_loc:near
extern:000000000020B3F8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020B3F8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020B400                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020B400                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020B408                 extrn __gmon_start__:near ; weak
extern:000000000020B408                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020B408                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020B410                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020B410                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020B410
extern:000000000020B410
extern:000000000020B410                 end start
