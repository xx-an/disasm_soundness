LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 23E7B412558BC4DF3646A2C2A43BEFBBB91452BF04EA2F0C978C19D96AE3D5AE
LOAD:0000000000000000 ; Input MD5    : E0E5B1E6260D50396C806993C5BFCB37
LOAD:0000000000000000 ; Input CRC32  : AB96F8CA
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/dd
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'dd.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fd-reopen.c'
LOAD:0000000000000000 ; Source File : 'gethrxtime.c'
LOAD:0000000000000000 ; Source File : 'gettime.c'
LOAD:0000000000000000 ; Source File : 'human.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'verror.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'xvasprintf.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vasprintf.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 51FE8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 10850h               ; Size in file image
LOAD:00000000000000D8                 dq 10850h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 10A90h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 210A90h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 618h                 ; Size in file image
LOAD:0000000000000110                 dq 0AD0h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 10B78h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 210B78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0EE8Ch               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0EE8Ch               ; Physical address
LOAD:00000000000001B0                 dq 3D4h                 ; Size in file image
LOAD:00000000000001B8                 dq 3D4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 10A90h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 210A90h              ; Physical address
LOAD:0000000000000220                 dq 570h                 ; Size in file image
LOAD:0000000000000228                 dq 570h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 62h, 0A4h, 0EBh, 6Fh, 51h, 0BAh, 57h, 0B1h, 8Bh, 0B2h ; Desc
LOAD:0000000000000284                 db 66h, 88h, 0A8h, 32h, 3Bh, 55h, 0D7h, 0C6h, 0DCh, 4Ch
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 4Fh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 4Fh, 50h, 56h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_B08, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aGetenv - offset byte_B08, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aSigprocmask - offset byte_B08, 12h, 0, 0, \ ; "sigprocmask"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aSnprintfChk - offset byte_B08, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aRaise - offset byte_B08, 12h, 0, 0, offset dword_0,\ ; "raise"
LOAD:0000000000000358                            0>
LOAD:0000000000000370                 Elf64_Sym <offset aFree - offset byte_B08, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aAbort - offset byte_B08, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aErrnoLocation - offset byte_B08, 12h, 0, 0, \ ; "__errno_location"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFdatasync - offset byte_B08, 12h, 0, 0, \ ; "fdatasync"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aErrorAtLine - offset byte_B08, 12h, 0, 0, \ ; "error_at_line"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aStrncmp - offset byte_B08, 12h, 0, 0, \ ; "strncmp"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aItmDeregistert - offset byte_B08, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aExit - offset byte_B08, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000418                            0>
LOAD:0000000000000430                 Elf64_Sym <offset aFpending - offset byte_B08, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aSigaction - offset byte_B08, 12h, 0, 0, \ ; "sigaction"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aLocaleconv - offset byte_B08, 12h, 0, 0, \ ; "localeconv"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aFcntl - offset byte_B08, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000478                            0>
LOAD:0000000000000490                 Elf64_Sym <offset aClockGettime - offset byte_B08, 12h, 0, 0, \ ; "clock_gettime"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aFwrite+1 - offset byte_B08, 12h, 0, 0, \ ; "write"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_B08, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aFclose - offset byte_B08, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aBindtextdomain - offset byte_B08, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aDcgettext - offset byte_B08, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_B08, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrlen - offset byte_B08, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aStackChkFail - offset byte_B08, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aGetoptLong - offset byte_B08, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMbrtowc - offset byte_B08, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aDup2 - offset byte_B08, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:0000000000000598                            0>
LOAD:00000000000005B0                 Elf64_Sym <offset aStrchr - offset byte_B08, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aOverflow - offset byte_B08, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aStrrchr - offset byte_B08, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFtruncate - offset byte_B08, 12h, 0, 0, \ ; "ftruncate"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aLseek - offset byte_B08, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000610                            0>
LOAD:0000000000000628                 Elf64_Sym <offset aAssertFail - offset byte_B08, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aStrtoulInterna - offset byte_B08, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aMemset - offset byte_B08, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aIoctl - offset byte_B08, 12h, 0, 0, offset dword_0,\ ; "ioctl"
LOAD:0000000000000670                            0>
LOAD:0000000000000688                 Elf64_Sym <offset aFclose+1 - offset byte_B08, 12h, 0, 0, \ ; "close"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aPosixFadvise - offset byte_B08, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aRead - offset byte_B08, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:00000000000006B8                            0>
LOAD:00000000000006D0                 Elf64_Sym <offset aLibcStartMain - offset byte_B08, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMemcmp - offset byte_B08, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFputsUnlocked - offset byte_B08, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aCalloc - offset byte_B08, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aMemcpyChk - offset byte_B08, 12h, 0, 0, \ ; "__memcpy_chk"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aSigemptyset - offset byte_B08, 12h, 0, 0, \ ; "sigemptyset"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aGmonStart - offset byte_B08, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aMemcpy - offset byte_B08, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFileno - offset byte_B08, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aMalloc - offset byte_B08, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFflush - offset byte_B08, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aNlLanginfo - offset byte_B08, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFxstat - offset byte_B08, 12h, 0, 0, \ ; "__fxstat"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFreading - offset byte_B08, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aRealloc - offset byte_B08, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aSetlocale - offset byte_B08, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aPrintfChk - offset byte_B08, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aMemmove - offset byte_B08, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aError - offset byte_B08, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000880                            0>
LOAD:0000000000000898                 Elf64_Sym <offset aFsync - offset byte_B08, 12h, 0, 0, offset dword_0,\ ; "fsync"
LOAD:0000000000000898                            0>
LOAD:00000000000008B0                 Elf64_Sym <offset aOpen - offset byte_B08, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:00000000000008B0                            0>
LOAD:00000000000008C8                 Elf64_Sym <offset aFseeko - offset byte_B08, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aDcngettext - offset byte_B08, 12h, 0, 0, \ ; "dcngettext"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aCxaAtexit - offset byte_B08, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aGetpagesize - offset byte_B08, 12h, 0, 0, \ ; "getpagesize"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aSigismember - offset byte_B08, 12h, 0, 0, \ ; "sigismember"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aExit+1 - offset byte_B08, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aFwrite - offset byte_B08, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aFprintfChk - offset byte_B08, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aItmRegistertmc - offset byte_B08, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aMbsinit - offset byte_B08, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aIswprint - offset byte_B08, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aCxaFinalize - offset byte_B08, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aSigaddset - offset byte_B08, 12h, 0, 0, \ ; "sigaddset"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_B08, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aCtypeBLoc - offset byte_B08, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000A18                            offset dword_0, 0>
LOAD:0000000000000A30                 Elf64_Sym <offset aSprintfChk - offset byte_B08, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aStdout - offset byte_B08, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000A48                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000A60                 Elf64_Sym <offset aProgname - offset byte_B08, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000A60                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A78                 Elf64_Sym <offset aProgramInvocat - offset byte_B08, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000A78                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A90                 Elf64_Sym <offset aPrognameFull - offset byte_B08, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A90                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AA8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_B08, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000AA8                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AC0                 Elf64_Sym <offset aOpterr - offset byte_B08, 11h, 0, 19h, \ ; "opterr"
LOAD:0000000000000AC0                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:0000000000000AD8                 Elf64_Sym <offset aStderr - offset byte_B08, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000AD8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000AF0                 Elf64_Sym <offset aOptind - offset byte_B08, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000AF0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000B08 ; ELF String Table
LOAD:0000000000000B08 byte_B08        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B08                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000B09 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000FA0↓o
LOAD:0000000000000B13 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000B1A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B27 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B31 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B39 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000B41 aFtruncate      db 'ftruncate',0        ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000B4B aDcngettext     db 'dcngettext',0       ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B56 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000000B5D aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000B65 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000B6F aError          db 'error',0            ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B75 aSigprocmask    db 'sigprocmask',0      ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000B81 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B92 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000B9B aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000BA3 aFsync          db 'fsync',0            ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000BA9 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000BAF aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000BAF                                         ; LOAD:0000000000000940↑o
LOAD:0000000000000BB5 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000BB5                                         ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000BCD aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000BDB aErrorAtLine    db 'error_at_line',0    ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000BE9 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000BE9                                         ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000C00 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000C0E aFdatasync      db 'fdatasync',0        ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000C18 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000C1F aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000C26 aSigemptyset    db 'sigemptyset',0      ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000C32 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000C39 aLocaleconv     db 'localeconv',0       ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000C44 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000C55 aRead           db 'read',0             ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000C5A aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000C61 aGetpagesize    db 'getpagesize',0      ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000C6D aDup2           db 'dup2',0             ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000C72 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000C80 aSigaddset      db 'sigaddset',0        ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000C8A aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000C91 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C97 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000C9E aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000C9E                                         ; LOAD:0000000000000688↑o
LOAD:0000000000000CA5 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000CAC aRaise          db 'raise',0            ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000CB2 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000CBA aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000CC6 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000CD4 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000CDB aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000CE6 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:0000000000000CED aIoctl          db 'ioctl',0            ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000CF3 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000D02 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000D0E aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000D17 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000D1E aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000D1E                                         ; LOAD:00000000000004A8↑o
LOAD:0000000000000D25 aSigaction      db 'sigaction',0        ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000D2F aMemcpyChk      db '__memcpy_chk',0     ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000D3C aSigismember    db 'sigismember',0      ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000D48 aClockGettime   db 'clock_gettime',0    ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000D56 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000D61 aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000D66 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000D6D aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000D6D                                         ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000D8B aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000D8B                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000D9F aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000D9F                                         ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000DB3 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000DC2 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000DC8 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000DD6 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000DDE aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000DDE                                         ; LOAD:00000000000004C0↑o
LOAD:0000000000000DED aOpterr         db 'opterr',0           ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000DF4 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000DF4                                         ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000E06 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000E0D aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000E18 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000E18                                         ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000E2B aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000E3A aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000E3F aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000E4A aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000E5A aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000E67 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000FB0↓o
LOAD:0000000000000E72 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000FC0↓o
LOAD:0000000000000E7C aGlibc217       db 'GLIBC_2.17',0       ; DATA XREF: LOAD:0000000000000FD0↓o
LOAD:0000000000000E87 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000FE0↓o
LOAD:0000000000000E93 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000FF0↓o
LOAD:0000000000000E9F aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001000↓o
LOAD:0000000000000EA9 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000EA9                                         ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000EC5 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000ED4 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000ED4                                         ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000EEE ; ELF GNU Symbol Version Table
LOAD:0000000000000EEE                 dw 0
LOAD:0000000000000EF0                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000EF2                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000EF4                 dw 3                    ; sigprocmask@@GLIBC_2.2.5
LOAD:0000000000000EF6                 dw 4                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000EF8                 dw 3                    ; raise@@GLIBC_2.2.5
LOAD:0000000000000EFA                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000EFC                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000EFE                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000F00                 dw 3                    ; fdatasync@@GLIBC_2.2.5
LOAD:0000000000000F02                 dw 3                    ; error_at_line@@GLIBC_2.2.5
LOAD:0000000000000F04                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000F06                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000F08                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000F0A                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000F0C                 dw 3                    ; sigaction@@GLIBC_2.2.5
LOAD:0000000000000F0E                 dw 3                    ; localeconv@@GLIBC_2.2.5
LOAD:0000000000000F10                 dw 3                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000F12                 dw 5                    ; clock_gettime@@GLIBC_2.17
LOAD:0000000000000F14                 dw 3                    ; write@@GLIBC_2.2.5
LOAD:0000000000000F16                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000F18                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000F1A                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000F1C                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000F1E                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000F20                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000F22                 dw 6                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000F24                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000F26                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000F28                 dw 3                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000F2A                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000F2C                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000F2E                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000F30                 dw 3                    ; ftruncate@@GLIBC_2.2.5
LOAD:0000000000000F32                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000F34                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000F36                 dw 3                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000F38                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000F3A                 dw 3                    ; ioctl@@GLIBC_2.2.5
LOAD:0000000000000F3C                 dw 3                    ; close@@GLIBC_2.2.5
LOAD:0000000000000F3E                 dw 3                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000F40                 dw 3                    ; read@@GLIBC_2.2.5
LOAD:0000000000000F42                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000F44                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000F46                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F48                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000F4A                 dw 4                    ; __memcpy_chk@@GLIBC_2.3.4
LOAD:0000000000000F4C                 dw 3                    ; sigemptyset@@GLIBC_2.2.5
LOAD:0000000000000F4E                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000F50                 dw 7                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000F52                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000F54                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000F56                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000F58                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000F5A                 dw 3                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000F5C                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000F5E                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000F60                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000F62                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000F64                 dw 3                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000F66                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000F68                 dw 3                    ; fsync@@GLIBC_2.2.5
LOAD:0000000000000F6A                 dw 3                    ; open@@GLIBC_2.2.5
LOAD:0000000000000F6C                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000F6E                 dw 3                    ; dcngettext@@GLIBC_2.2.5
LOAD:0000000000000F70                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000F72                 dw 3                    ; getpagesize@@GLIBC_2.2.5
LOAD:0000000000000F74                 dw 3                    ; sigismember@@GLIBC_2.2.5
LOAD:0000000000000F76                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000F78                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000F7A                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F7C                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000F7E                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000F80                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000F82                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000F84                 dw 3                    ; sigaddset@@GLIBC_2.2.5
LOAD:0000000000000F86                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000F88                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000F8A                 dw 4                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F8C                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000F8E                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000F90                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000F92                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000F94                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000F96                 dw 3                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000F98                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000F9A                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000F9C                 dw 0
LOAD:0000000000000F9E                 dw 0
LOAD:0000000000000FA0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000FA0                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_B08, 10h, 0> ; "libc.so.6"
LOAD:0000000000000FB0                 Elf64_Vernaux <6969194h, 0, 7, offset aGlibc214 - offset byte_B08, \ ; "GLIBC_2.14"
LOAD:0000000000000FB0                                10h>
LOAD:0000000000000FC0                 Elf64_Vernaux <0D696914h, 0, 6, offset aGlibc24 - offset byte_B08, \ ; "GLIBC_2.4"
LOAD:0000000000000FC0                                10h>
LOAD:0000000000000FD0                 Elf64_Vernaux <6969197h, 0, 5, offset aGlibc217 - offset byte_B08, \ ; "GLIBC_2.17"
LOAD:0000000000000FD0                                10h>
LOAD:0000000000000FE0                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_B08, \ ; "GLIBC_2.3.4"
LOAD:0000000000000FE0                                10h>
LOAD:0000000000000FF0                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_B08, \ ; "GLIBC_2.2.5"
LOAD:0000000000000FF0                                10h>
LOAD:0000000000001000                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_B08, 0> ; "GLIBC_2.3"
LOAD:0000000000001010 ; ELF RELA Relocation Table
LOAD:0000000000001010                 Elf64_Rela <210A90h, 8, 3D80h> ; R_X86_64_RELATIVE +3D80h
LOAD:0000000000001028                 Elf64_Rela <210A98h, 8, 3D40h> ; R_X86_64_RELATIVE +3D40h
LOAD:0000000000001040                 Elf64_Rela <210AA0h, 8, 0E1BEh> ; R_X86_64_RELATIVE +0E1BEh
LOAD:0000000000001058                 Elf64_Rela <210AA8h, 8, 0E1CDh> ; R_X86_64_RELATIVE +0E1CDh
LOAD:0000000000001070                 Elf64_Rela <210AC0h, 8, 0E202h> ; R_X86_64_RELATIVE +0E202h
LOAD:0000000000001088                 Elf64_Rela <210AE0h, 8, 0C8AEh> ; R_X86_64_RELATIVE +0C8AEh
LOAD:00000000000010A0                 Elf64_Rela <210B20h, 8, 0E261h> ; R_X86_64_RELATIVE +0E261h
LOAD:00000000000010B8                 Elf64_Rela <210B28h, 8, 0E269h> ; R_X86_64_RELATIVE +0E269h
LOAD:00000000000010D0                 Elf64_Rela <210B30h, 8, 0E26Fh> ; R_X86_64_RELATIVE +0E26Fh
LOAD:00000000000010E8                 Elf64_Rela <210B38h, 8, 0E27Ch> ; R_X86_64_RELATIVE +0E27Ch
LOAD:0000000000001100                 Elf64_Rela <210B40h, 8, 0E289h> ; R_X86_64_RELATIVE +0E289h
LOAD:0000000000001118                 Elf64_Rela <210B48h, 8, 0E29Dh> ; R_X86_64_RELATIVE +0E29Dh
LOAD:0000000000001130                 Elf64_Rela <210B50h, 8, 0E29Fh> ; R_X86_64_RELATIVE +0E29Fh
LOAD:0000000000001148                 Elf64_Rela <210B58h, 8, 0E282h> ; R_X86_64_RELATIVE +0E282h
LOAD:0000000000001160                 Elf64_Rela <210B60h, 8, 0C85Dh> ; R_X86_64_RELATIVE +0C85Dh
LOAD:0000000000001178                 Elf64_Rela <210B68h, 8, 0E2A7h> ; R_X86_64_RELATIVE +0E2A7h
LOAD:0000000000001190                 Elf64_Rela <211008h, 8, 211008h> ; R_X86_64_RELATIVE +211008h
LOAD:00000000000011A8                 Elf64_Rela <211028h, 8, 0E178h> ; R_X86_64_RELATIVE +0E178h
LOAD:00000000000011C0                 Elf64_Rela <211080h, 8, 211090h> ; R_X86_64_RELATIVE +211090h
LOAD:00000000000011D8                 Elf64_Rela <211098h, 8, 211420h> ; R_X86_64_RELATIVE +211420h
LOAD:00000000000011F0                 Elf64_Rela <2110A0h, 8, 0A120h> ; R_X86_64_RELATIVE +0A120h
LOAD:0000000000001208                 Elf64_Rela <210FC8h, 0C00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001220                 Elf64_Rela <210FD0h, 2A00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001238                 Elf64_Rela <210FD8h, 3000000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001250                 Elf64_Rela <210FE0h, 4700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001268                 Elf64_Rela <210FE8h, 4A00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001280                 Elf64_Rela <2110C0h, 5000000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001298                 Elf64_Rela <2110C8h, 4F00000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000012B0                 Elf64_Rela <2110D0h, 5600000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000012C8                 Elf64_Rela <2110D8h, 5200000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000012E0                 Elf64_Rela <2110E0h, 5400000005h, 0> ; R_X86_64_COPY opterr
LOAD:00000000000012F8                 Elf64_Rela <211100h, 5500000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001310 ; ELF JMPREL Relocation Table
LOAD:0000000000001310                 Elf64_Rela <210D80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:0000000000001328                 Elf64_Rela <210D88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001340                 Elf64_Rela <210D90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT sigprocmask
LOAD:0000000000001358                 Elf64_Rela <210D98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001370                 Elf64_Rela <210DA0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT raise
LOAD:0000000000001388                 Elf64_Rela <210DA8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000013A0                 Elf64_Rela <210DB0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000013B8                 Elf64_Rela <210DB8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000013D0                 Elf64_Rela <210DC0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fdatasync
LOAD:00000000000013E8                 Elf64_Rela <210DC8h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT error_at_line
LOAD:0000000000001400                 Elf64_Rela <210DD0h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001418                 Elf64_Rela <210DD8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001430                 Elf64_Rela <210DE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001448                 Elf64_Rela <210DE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT sigaction
LOAD:0000000000001460                 Elf64_Rela <210DF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT localeconv
LOAD:0000000000001478                 Elf64_Rela <210DF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001490                 Elf64_Rela <210E00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT clock_gettime
LOAD:00000000000014A8                 Elf64_Rela <210E08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT write
LOAD:00000000000014C0                 Elf64_Rela <210E10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000014D8                 Elf64_Rela <210E18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000014F0                 Elf64_Rela <210E20h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001508                 Elf64_Rela <210E28h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001520                 Elf64_Rela <210E30h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001538                 Elf64_Rela <210E38h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001550                 Elf64_Rela <210E40h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001568                 Elf64_Rela <210E48h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001580                 Elf64_Rela <210E50h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001598                 Elf64_Rela <210E58h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:00000000000015B0                 Elf64_Rela <210E60h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000015C8                 Elf64_Rela <210E68h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000015E0                 Elf64_Rela <210E70h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000015F8                 Elf64_Rela <210E78h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT ftruncate
LOAD:0000000000001610                 Elf64_Rela <210E80h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001628                 Elf64_Rela <210E88h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001640                 Elf64_Rela <210E90h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001658                 Elf64_Rela <210E98h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001670                 Elf64_Rela <210EA0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT ioctl
LOAD:0000000000001688                 Elf64_Rela <210EA8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000016A0                 Elf64_Rela <210EB0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000016B8                 Elf64_Rela <210EB8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:00000000000016D0                 Elf64_Rela <210EC0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000016E8                 Elf64_Rela <210EC8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001700                 Elf64_Rela <210ED0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001718                 Elf64_Rela <210ED8h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __memcpy_chk
LOAD:0000000000001730                 Elf64_Rela <210EE0h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT sigemptyset
LOAD:0000000000001748                 Elf64_Rela <210EE8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001760                 Elf64_Rela <210EF0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001778                 Elf64_Rela <210EF8h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001790                 Elf64_Rela <210F00h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000017A8                 Elf64_Rela <210F08h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000017C0                 Elf64_Rela <210F10h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000017D8                 Elf64_Rela <210F18h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000017F0                 Elf64_Rela <210F20h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001808                 Elf64_Rela <210F28h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001820                 Elf64_Rela <210F30h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001838                 Elf64_Rela <210F38h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001850                 Elf64_Rela <210F40h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001868                 Elf64_Rela <210F48h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT fsync
LOAD:0000000000001880                 Elf64_Rela <210F50h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001898                 Elf64_Rela <210F58h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000018B0                 Elf64_Rela <210F60h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT dcngettext
LOAD:00000000000018C8                 Elf64_Rela <210F68h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000018E0                 Elf64_Rela <210F70h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT getpagesize
LOAD:00000000000018F8                 Elf64_Rela <210F78h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT sigismember
LOAD:0000000000001910                 Elf64_Rela <210F80h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001928                 Elf64_Rela <210F88h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001940                 Elf64_Rela <210F90h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001958                 Elf64_Rela <210F98h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001970                 Elf64_Rela <210FA0h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001988                 Elf64_Rela <210FA8h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT sigaddset
LOAD:00000000000019A0                 Elf64_Rela <210FB0h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:00000000000019B8                 Elf64_Rela <210FB8h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000019D0                 Elf64_Rela <210FC0h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:00000000000019D0 LOAD            ends
LOAD:00000000000019D0
.init:00000000000019E8 ; ===========================================================================
.init:00000000000019E8
.init:00000000000019E8 ; Segment type: Pure code
.init:00000000000019E8 ; Segment permissions: Read/Execute
.init:00000000000019E8 _init           segment dword public 'CODE' use64
.init:00000000000019E8                 assume cs:_init
.init:00000000000019E8                 ;org 19E8h
.init:00000000000019E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000019E8
.init:00000000000019E8 ; =============== S U B R O U T I N E =======================================
.init:00000000000019E8
.init:00000000000019E8
.init:00000000000019E8                 public _init_proc
.init:00000000000019E8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000019E8                 sub     rsp, 8          ; _init
.init:00000000000019EC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000019F3                 test    rax, rax
.init:00000000000019F6                 jz      short loc_19FA
.init:00000000000019F8                 call    rax ; __gmon_start__
.init:00000000000019FA
.init:00000000000019FA loc_19FA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000019FA                 add     rsp, 8
.init:00000000000019FE                 retn
.init:00000000000019FE _init_proc      endp
.init:00000000000019FE
.init:00000000000019FE _init           ends
.init:00000000000019FE
LOAD:00000000000019FF ; ===========================================================================
LOAD:00000000000019FF
LOAD:00000000000019FF ; Segment type: Pure code
LOAD:00000000000019FF ; Segment permissions: Read/Execute
LOAD:00000000000019FF LOAD            segment byte public 'CODE' use64
LOAD:00000000000019FF                 assume cs:LOAD
LOAD:00000000000019FF                 ;org 19FFh
LOAD:00000000000019FF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000019FF                 align 20h
LOAD:00000000000019FF LOAD            ends
LOAD:00000000000019FF
.plt:0000000000001A00 ; ===========================================================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Segment type: Pure code
.plt:0000000000001A00 ; Segment permissions: Read/Execute
.plt:0000000000001A00 _plt            segment para public 'CODE' use64
.plt:0000000000001A00                 assume cs:_plt
.plt:0000000000001A00                 ;org 1A00h
.plt:0000000000001A00                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00
.plt:0000000000001A00 sub_1A00        proc near               ; CODE XREF: .plt:0000000000001A1B↓j
.plt:0000000000001A00                                         ; .plt:0000000000001A2B↓j ...
.plt:0000000000001A00 ; __unwind {
.plt:0000000000001A00                 push    cs:qword_210D70
.plt:0000000000001A06                 jmp     cs:qword_210D78
.plt:0000000000001A06 sub_1A00        endp
.plt:0000000000001A06
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A0C                 align 10h
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000001A10 ___ctype_toupper_loc proc near          ; CODE XREF: main+50C↓p
.plt:0000000000001A10                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000001A10 ___ctype_toupper_loc endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    0
.plt:0000000000001A1B                 jmp     sub_1A00
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; char *getenv(const char *name)
.plt:0000000000001A20 _getenv         proc near               ; CODE XREF: main+31↓p
.plt:0000000000001A20                                         ; human_options+114↓p ...
.plt:0000000000001A20                 jmp     cs:getenv_ptr
.plt:0000000000001A20 _getenv         endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    1
.plt:0000000000001A2B                 jmp     sub_1A00
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
.plt:0000000000001A30 _sigprocmask    proc near               ; CODE XREF: process_signals+40↓p
.plt:0000000000001A30                                         ; process_signals+68↓p
.plt:0000000000001A30                 jmp     cs:sigprocmask_ptr
.plt:0000000000001A30 _sigprocmask    endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    2
.plt:0000000000001A3B                 jmp     sub_1A00
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ___snprintf_chk proc near               ; CODE XREF: print_xfer_stats+11E↓p
.plt:0000000000001A40                                         ; print_xfer_stats+210↓p ...
.plt:0000000000001A40                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001A40 ___snprintf_chk endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    3
.plt:0000000000001A4B                 jmp     sub_1A00
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; int raise(int sig)
.plt:0000000000001A50 _raise          proc near               ; CODE XREF: process_signals+9D↓p
.plt:0000000000001A50                 jmp     cs:raise_ptr
.plt:0000000000001A50 _raise          endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    4
.plt:0000000000001A5B                 jmp     sub_1A00
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; void free(void *ptr)
.plt:0000000000001A60 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001A60                                         ; quotearg_free+37↓p ...
.plt:0000000000001A60                 jmp     cs:free_ptr
.plt:0000000000001A60 _free           endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    5
.plt:0000000000001A6B                 jmp     sub_1A00
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: noreturn thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; void __noreturn abort(void)
.plt:0000000000001A70 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001A70                                         ; quotearg_buffer_restyled:def_71C1↓p ...
.plt:0000000000001A70                 jmp     cs:abort_ptr
.plt:0000000000001A70 _abort          endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    6
.plt:0000000000001A7B                 jmp     sub_1A00
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; int *__errno_location(void)
.plt:0000000000001A80 ___errno_location proc near             ; CODE XREF: main+596↓p
.plt:0000000000001A80                                         ; set_fd_flags+AD↓p ...
.plt:0000000000001A80                 jmp     cs:__errno_location_ptr
.plt:0000000000001A80 ___errno_location endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    7
.plt:0000000000001A8B                 jmp     sub_1A00
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; int fdatasync(int fildes)
.plt:0000000000001A90 _fdatasync      proc near               ; CODE XREF: main+17D5↓p
.plt:0000000000001A90                 jmp     cs:fdatasync_ptr
.plt:0000000000001A90 _fdatasync      endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    8
.plt:0000000000001A9B                 jmp     sub_1A00
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; void error_at_line(int status, int errnum, const char *fname, unsigned int lineno, const char *format, ...)
.plt:0000000000001AA0 _error_at_line  proc near               ; CODE XREF: verror_at_line+44↓p
.plt:0000000000001AA0                 jmp     cs:error_at_line_ptr
.plt:0000000000001AA0 _error_at_line  endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    9
.plt:0000000000001AAB                 jmp     sub_1A00
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001AB0 _strncmp        proc near               ; CODE XREF: usage+4CC↓p
.plt:0000000000001AB0                                         ; usage+58D↓p ...
.plt:0000000000001AB0                 jmp     cs:strncmp_ptr
.plt:0000000000001AB0 _strncmp        endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    0Ah
.plt:0000000000001ABB                 jmp     sub_1A00
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: noreturn thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; void __noreturn _exit(int status)
.plt:0000000000001AC0 __exit          proc near               ; CODE XREF: maybe_close_stdout+32↓p
.plt:0000000000001AC0                                         ; close_stdout+88↓p
.plt:0000000000001AC0                 jmp     cs:_exit_ptr
.plt:0000000000001AC0 __exit          endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    0Bh
.plt:0000000000001ACB                 jmp     sub_1A00
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; size_t __fpending(FILE *fp)
.plt:0000000000001AD0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001AD0                 jmp     cs:__fpending_ptr
.plt:0000000000001AD0 ___fpending     endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    0Ch
.plt:0000000000001ADB                 jmp     sub_1A00
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
.plt:0000000000001AE0 _sigaction      proc near               ; CODE XREF: main+62↓p
.plt:0000000000001AE0                                         ; main+12C↓p ...
.plt:0000000000001AE0                 jmp     cs:sigaction_ptr
.plt:0000000000001AE0 _sigaction      endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    0Dh
.plt:0000000000001AEB                 jmp     sub_1A00
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; struct lconv *localeconv(void)
.plt:0000000000001AF0 _localeconv     proc near               ; CODE XREF: human_readable+59↓p
.plt:0000000000001AF0                 jmp     cs:localeconv_ptr
.plt:0000000000001AF0 _localeconv     endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    0Eh
.plt:0000000000001AFB                 jmp     sub_1A00
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001B00 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001B00                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001B00                 jmp     cs:fcntl_ptr
.plt:0000000000001B00 _fcntl          endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    0Fh
.plt:0000000000001B0B                 jmp     sub_1A00
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
.plt:0000000000001B10 _clock_gettime  proc near               ; CODE XREF: gethrxtime+20↓p
.plt:0000000000001B10                                         ; gettime+5↓j ...
.plt:0000000000001B10                 jmp     cs:clock_gettime_ptr
.plt:0000000000001B10 _clock_gettime  endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    10h
.plt:0000000000001B1B                 jmp     sub_1A00
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; ssize_t write(int fd, const void *buf, size_t n)
.plt:0000000000001B20 _write          proc near               ; CODE XREF: iwrite_constprop_7+97↓p
.plt:0000000000001B20                 jmp     cs:write_ptr
.plt:0000000000001B20 _write          endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    11h
.plt:0000000000001B2B                 jmp     sub_1A00
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; char *textdomain(const char *domainname)
.plt:0000000000001B30 _textdomain     proc near               ; CODE XREF: main+1A9↓p
.plt:0000000000001B30                 jmp     cs:textdomain_ptr
.plt:0000000000001B30 _textdomain     endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    12h
.plt:0000000000001B3B                 jmp     sub_1A00
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; int fclose(FILE *stream)
.plt:0000000000001B40 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001B40                                         ; rpl_fclose+6B↓j
.plt:0000000000001B40                 jmp     cs:fclose_ptr
.plt:0000000000001B40 _fclose         endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    13h
.plt:0000000000001B4B                 jmp     sub_1A00
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001B50 _bindtextdomain proc near               ; CODE XREF: main+19D↓p
.plt:0000000000001B50                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001B50 _bindtextdomain endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    14h
.plt:0000000000001B5B                 jmp     sub_1A00
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001B60 _dcgettext      proc near               ; CODE XREF: main+C8A↓p
.plt:0000000000001B60                                         ; main+DB7↓p ...
.plt:0000000000001B60                 jmp     cs:dcgettext_ptr
.plt:0000000000001B60 _dcgettext      endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    15h
.plt:0000000000001B6B                 jmp     sub_1A00
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001B70 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001B70                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001B70 ___ctype_get_mb_cur_max endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    16h
.plt:0000000000001B7B                 jmp     sub_1A00
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; size_t strlen(const char *s)
.plt:0000000000001B80 _strlen         proc near               ; CODE XREF: print_xfer_stats+D6↓p
.plt:0000000000001B80                                         ; print_xfer_stats+126↓p ...
.plt:0000000000001B80                 jmp     cs:strlen_ptr
.plt:0000000000001B80 _strlen         endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    17h
.plt:0000000000001B8B                 jmp     sub_1A00
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: noreturn thunk
.plt:0000000000001B90
.plt:0000000000001B90 ___stack_chk_fail proc near             ; CODE XREF: main:loc_3BC7↓p
.plt:0000000000001B90                                         ; print_xfer_stats:loc_4132↓p ...
.plt:0000000000001B90                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001B90 ___stack_chk_fail endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    18h
.plt:0000000000001B9B                 jmp     sub_1A00
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001BA0 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:0000000000001BA0                                         ; parse_gnu_standard_options_only+9A↓p
.plt:0000000000001BA0                 jmp     cs:getopt_long_ptr
.plt:0000000000001BA0 _getopt_long    endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    19h
.plt:0000000000001BAB                 jmp     sub_1A00
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001BB0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001BB0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001BB0 _mbrtowc        endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    1Ah
.plt:0000000000001BBB                 jmp     sub_1A00
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int dup2(int fd, int fd2)
.plt:0000000000001BC0 _dup2           proc near               ; CODE XREF: fd_reopen+28↓p
.plt:0000000000001BC0                 jmp     cs:dup2_ptr
.plt:0000000000001BC0 _dup2           endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    1Bh
.plt:0000000000001BCB                 jmp     sub_1A00
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; char *strchr(const char *s, int c)
.plt:0000000000001BD0 _strchr         proc near               ; CODE XREF: main+28B↓p
.plt:0000000000001BD0                                         ; parse_symbols+1D↓p ...
.plt:0000000000001BD0                 jmp     cs:strchr_ptr
.plt:0000000000001BD0 _strchr         endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    1Ch
.plt:0000000000001BDB                 jmp     sub_1A00
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001BE0 ___overflow     proc near               ; CODE XREF: print_xfer_stats+355↓p
.plt:0000000000001BE0                                         ; print_xfer_stats+36B↓p ...
.plt:0000000000001BE0                 jmp     cs:__overflow_ptr
.plt:0000000000001BE0 ___overflow     endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    1Dh
.plt:0000000000001BEB                 jmp     sub_1A00
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; char *strrchr(const char *s, int c)
.plt:0000000000001BF0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001BF0                 jmp     cs:strrchr_ptr
.plt:0000000000001BF0 _strrchr        endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    1Eh
.plt:0000000000001BFB                 jmp     sub_1A00
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int ftruncate(int fd, __off_t length)
.plt:0000000000001C00 _ftruncate      proc near               ; CODE XREF: iftruncate_constprop_6+27↓p
.plt:0000000000001C00                 jmp     cs:ftruncate_ptr
.plt:0000000000001C00 _ftruncate      endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    1Fh
.plt:0000000000001C0B                 jmp     sub_1A00
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001C10 _lseek          proc near               ; CODE XREF: main+5C9↓p
.plt:0000000000001C10                                         ; main+1190↓p ...
.plt:0000000000001C10                 jmp     cs:lseek_ptr
.plt:0000000000001C10 _lseek          endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    20h ; ' '
.plt:0000000000001C1B                 jmp     sub_1A00
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: noreturn thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001C20 ___assert_fail  proc near               ; CODE XREF: xstrtoumax+39F↓p
.plt:0000000000001C20                 jmp     cs:__assert_fail_ptr
.plt:0000000000001C20 ___assert_fail  endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    21h ; '!'
.plt:0000000000001C2B                 jmp     sub_1A00
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001C30 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001C30                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001C30 ___strtoul_internal endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    22h ; '"'
.plt:0000000000001C3B                 jmp     sub_1A00
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001C40 _memset         proc near               ; CODE XREF: main+7A8↓p
.plt:0000000000001C40                                         ; main+8AD↓p ...
.plt:0000000000001C40                 jmp     cs:memset_ptr
.plt:0000000000001C40 _memset         endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    23h ; '#'
.plt:0000000000001C4B                 jmp     sub_1A00
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int ioctl(int fd, unsigned __int64 request, ...)
.plt:0000000000001C50 _ioctl          proc near               ; CODE XREF: skip_via_lseek+31↓p
.plt:0000000000001C50                                         ; skip_via_lseek+61↓p
.plt:0000000000001C50                 jmp     cs:ioctl_ptr
.plt:0000000000001C50 _ioctl          endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    24h ; '$'
.plt:0000000000001C5B                 jmp     sub_1A00
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; int close(int fd)
.plt:0000000000001C60 _close          proc near               ; CODE XREF: cleanup+8↓p
.plt:0000000000001C60                                         ; cleanup+16↓p ...
.plt:0000000000001C60                 jmp     cs:close_ptr
.plt:0000000000001C60 _close          endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    25h ; '%'
.plt:0000000000001C6B                 jmp     sub_1A00
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001C70 _posix_fadvise  proc near               ; CODE XREF: invalidate_cache+126↓p
.plt:0000000000001C70                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001C70 _posix_fadvise  endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    26h ; '&'
.plt:0000000000001C7B                 jmp     sub_1A00
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:0000000000001C80 _read           proc near               ; CODE XREF: iread+3C↓p
.plt:0000000000001C80                 jmp     cs:read_ptr
.plt:0000000000001C80 _read           endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    27h ; '''
.plt:0000000000001C8B                 jmp     sub_1A00
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001C90 _memcmp         proc near               ; CODE XREF: iwrite_constprop_7+7F↓p
.plt:0000000000001C90                                         ; quotearg_buffer_restyled+19A↓p ...
.plt:0000000000001C90                 jmp     cs:memcmp_ptr
.plt:0000000000001C90 _memcmp         endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    28h ; '('
.plt:0000000000001C9B                 jmp     sub_1A00
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001CA0 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000001CA0                                         ; usage+C5↓p ...
.plt:0000000000001CA0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001CA0 _fputs_unlocked endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    29h ; ')'
.plt:0000000000001CAB                 jmp     sub_1A00
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001CB0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001CB0                 jmp     cs:calloc_ptr
.plt:0000000000001CB0 _calloc         endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    2Ah ; '*'
.plt:0000000000001CBB                 jmp     sub_1A00
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ___memcpy_chk   proc near               ; CODE XREF: human_readable+49C↓p
.plt:0000000000001CC0                 jmp     cs:__memcpy_chk_ptr
.plt:0000000000001CC0 ___memcpy_chk   endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    2Bh ; '+'
.plt:0000000000001CCB                 jmp     sub_1A00
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; int sigemptyset(sigset_t *set)
.plt:0000000000001CD0 _sigemptyset    proc near               ; CODE XREF: main+40↓p
.plt:0000000000001CD0                 jmp     cs:sigemptyset_ptr
.plt:0000000000001CD0 _sigemptyset    endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    2Ch ; ','
.plt:0000000000001CDB                 jmp     sub_1A00
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001CE0 _memcpy         proc near               ; CODE XREF: main+D4A↓p
.plt:0000000000001CE0                                         ; human_readable+4DD↓p ...
.plt:0000000000001CE0                 jmp     cs:memcpy_ptr
.plt:0000000000001CE0 _memcpy         endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    2Dh ; '-'
.plt:0000000000001CEB                 jmp     sub_1A00
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; int fileno(FILE *stream)
.plt:0000000000001CF0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001CF0                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001CF0                 jmp     cs:fileno_ptr
.plt:0000000000001CF0 _fileno         endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    2Eh ; '.'
.plt:0000000000001CFB                 jmp     sub_1A00
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; void *malloc(size_t size)
.plt:0000000000001D00 _malloc         proc near               ; CODE XREF: alloc_ibuf_part_4+2F↓p
.plt:0000000000001D00                                         ; alloc_obuf_part_5+2F↓p ...
.plt:0000000000001D00                 jmp     cs:malloc_ptr
.plt:0000000000001D00 _malloc         endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    2Fh ; '/'
.plt:0000000000001D0B                 jmp     sub_1A00
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; int fflush(FILE *stream)
.plt:0000000000001D10 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001D10                                         ; rpl_fflush+3B↓j
.plt:0000000000001D10                 jmp     cs:fflush_ptr
.plt:0000000000001D10 _fflush         endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    30h ; '0'
.plt:0000000000001D1B                 jmp     sub_1A00
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; char *nl_langinfo(nl_item item)
.plt:0000000000001D20 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001D20                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001D20 _nl_langinfo    endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    31h ; '1'
.plt:0000000000001D2B                 jmp     sub_1A00
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001D30 ___fxstat       proc near               ; CODE XREF: main+1633↓p
.plt:0000000000001D30                                         ; main+1819↓p ...
.plt:0000000000001D30                 jmp     cs:__fxstat_ptr
.plt:0000000000001D30 ___fxstat       endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    32h ; '2'
.plt:0000000000001D3B                 jmp     sub_1A00
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; int __freading(FILE *fp)
.plt:0000000000001D40 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001D40                                         ; rpl_fflush+9↓p
.plt:0000000000001D40                 jmp     cs:__freading_ptr
.plt:0000000000001D40 ___freading     endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    33h ; '3'
.plt:0000000000001D4B                 jmp     sub_1A00
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001D50 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001D50                                         ; vasnprintf+285↓p ...
.plt:0000000000001D50                 jmp     cs:realloc_ptr
.plt:0000000000001D50 _realloc        endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    34h ; '4'
.plt:0000000000001D5B                 jmp     sub_1A00
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; char *setlocale(int category, const char *locale)
.plt:0000000000001D60 _setlocale      proc near               ; CODE XREF: main+18A↓p
.plt:0000000000001D60                                         ; usage+4B3↓p ...
.plt:0000000000001D60                 jmp     cs:setlocale_ptr
.plt:0000000000001D60 _setlocale      endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    35h ; '5'
.plt:0000000000001D6B                 jmp     sub_1A00
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000001D70                                         ; usage+363↓p ...
.plt:0000000000001D70                 jmp     cs:__printf_chk_ptr
.plt:0000000000001D70 ___printf_chk   endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    36h ; '6'
.plt:0000000000001D7B                 jmp     sub_1A00
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001D80 _memmove        proc near               ; CODE XREF: human_readable+375↓p
.plt:0000000000001D80                 jmp     cs:memmove_ptr
.plt:0000000000001D80 _memmove        endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    37h ; '7'
.plt:0000000000001D8B                 jmp     sub_1A00
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001D90 _error          proc near               ; CODE XREF: close_stdout+7D↓p
.plt:0000000000001D90                                         ; close_stdout+9D↓p ...
.plt:0000000000001D90                 jmp     cs:error_ptr
.plt:0000000000001D90 _error          endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    38h ; '8'
.plt:0000000000001D9B                 jmp     sub_1A00
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; int fsync(int fd)
.plt:0000000000001DA0 _fsync          proc near               ; CODE XREF: main+131D↓p
.plt:0000000000001DA0                 jmp     cs:fsync_ptr
.plt:0000000000001DA0 _fsync          endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    39h ; '9'
.plt:0000000000001DAB                 jmp     sub_1A00
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; int open(const char *file, int oflag, ...)
.plt:0000000000001DB0 _open           proc near               ; CODE XREF: fd_reopen+15↓p
.plt:0000000000001DB0                 jmp     cs:open_ptr
.plt:0000000000001DB0 _open           endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    3Ah ; ':'
.plt:0000000000001DBB                 jmp     sub_1A00
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001DC0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_9FBA↓j
.plt:0000000000001DC0                 jmp     cs:fseeko_ptr
.plt:0000000000001DC0 _fseeko         endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    3Bh ; ';'
.plt:0000000000001DCB                 jmp     sub_1A00
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ; char *dcngettext(const char *domainname, const char *msgid1, const char *msgid2, unsigned __int64 n, int category)
.plt:0000000000001DD0 _dcngettext     proc near               ; CODE XREF: print_xfer_stats+2D0↓p
.plt:0000000000001DD0                                         ; print_stats_part_2+E9↓p ...
.plt:0000000000001DD0                 jmp     cs:dcngettext_ptr
.plt:0000000000001DD0 _dcngettext     endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    3Ch ; '<'
.plt:0000000000001DDB                 jmp     sub_1A00
.plt:0000000000001DE0
.plt:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DE0
.plt:0000000000001DE0 ; Attributes: thunk
.plt:0000000000001DE0
.plt:0000000000001DE0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001DE0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001DE0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001DE0 ___cxa_atexit   endp
.plt:0000000000001DE0
.plt:0000000000001DE6 ; ---------------------------------------------------------------------------
.plt:0000000000001DE6                 push    3Dh ; '='
.plt:0000000000001DEB                 jmp     sub_1A00
.plt:0000000000001DF0
.plt:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DF0
.plt:0000000000001DF0 ; Attributes: thunk
.plt:0000000000001DF0
.plt:0000000000001DF0 ; int getpagesize(void)
.plt:0000000000001DF0 _getpagesize    proc near               ; CODE XREF: main+1BA↓p
.plt:0000000000001DF0                 jmp     cs:getpagesize_ptr
.plt:0000000000001DF0 _getpagesize    endp
.plt:0000000000001DF0
.plt:0000000000001DF6 ; ---------------------------------------------------------------------------
.plt:0000000000001DF6                 push    3Eh ; '>'
.plt:0000000000001DFB                 jmp     sub_1A00
.plt:0000000000001E00
.plt:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E00
.plt:0000000000001E00 ; Attributes: thunk
.plt:0000000000001E00
.plt:0000000000001E00 ; int sigismember(const sigset_t *set, int signo)
.plt:0000000000001E00 _sigismember    proc near               ; CODE XREF: main+100↓p
.plt:0000000000001E00                                         ; main+13D↓p
.plt:0000000000001E00                 jmp     cs:sigismember_ptr
.plt:0000000000001E00 _sigismember    endp
.plt:0000000000001E00
.plt:0000000000001E06 ; ---------------------------------------------------------------------------
.plt:0000000000001E06                 push    3Fh ; '?'
.plt:0000000000001E0B                 jmp     sub_1A00
.plt:0000000000001E10
.plt:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E10
.plt:0000000000001E10 ; Attributes: noreturn thunk
.plt:0000000000001E10
.plt:0000000000001E10 ; void __noreturn exit(int status)
.plt:0000000000001E10 _exit           proc near               ; CODE XREF: main+1AF1↓p
.plt:0000000000001E10                                         ; usage+58↓p ...
.plt:0000000000001E10                 jmp     cs:exit_ptr
.plt:0000000000001E10 _exit           endp
.plt:0000000000001E10
.plt:0000000000001E16 ; ---------------------------------------------------------------------------
.plt:0000000000001E16                 push    40h ; '@'
.plt:0000000000001E1B                 jmp     sub_1A00
.plt:0000000000001E20
.plt:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E20
.plt:0000000000001E20 ; Attributes: thunk
.plt:0000000000001E20
.plt:0000000000001E20 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001E20 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001E20                 jmp     cs:fwrite_ptr
.plt:0000000000001E20 _fwrite         endp
.plt:0000000000001E20
.plt:0000000000001E26 ; ---------------------------------------------------------------------------
.plt:0000000000001E26                 push    41h ; 'A'
.plt:0000000000001E2B                 jmp     sub_1A00
.plt:0000000000001E30
.plt:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E30
.plt:0000000000001E30 ; Attributes: thunk
.plt:0000000000001E30
.plt:0000000000001E30 ___fprintf_chk  proc near               ; CODE XREF: print_xfer_stats+182↓p
.plt:0000000000001E30                                         ; print_xfer_stats+2EF↓p ...
.plt:0000000000001E30                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001E30 ___fprintf_chk  endp
.plt:0000000000001E30
.plt:0000000000001E36 ; ---------------------------------------------------------------------------
.plt:0000000000001E36                 push    42h ; 'B'
.plt:0000000000001E3B                 jmp     sub_1A00
.plt:0000000000001E40
.plt:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E40
.plt:0000000000001E40 ; Attributes: thunk
.plt:0000000000001E40
.plt:0000000000001E40 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001E40 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001E40                 jmp     cs:mbsinit_ptr
.plt:0000000000001E40 _mbsinit        endp
.plt:0000000000001E40
.plt:0000000000001E46 ; ---------------------------------------------------------------------------
.plt:0000000000001E46                 push    43h ; 'C'
.plt:0000000000001E4B                 jmp     sub_1A00
.plt:0000000000001E50
.plt:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E50
.plt:0000000000001E50 ; Attributes: thunk
.plt:0000000000001E50
.plt:0000000000001E50 ; int iswprint(wint_t wc)
.plt:0000000000001E50 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001E50                 jmp     cs:iswprint_ptr
.plt:0000000000001E50 _iswprint       endp
.plt:0000000000001E50
.plt:0000000000001E56 ; ---------------------------------------------------------------------------
.plt:0000000000001E56                 push    44h ; 'D'
.plt:0000000000001E5B                 jmp     sub_1A00
.plt:0000000000001E60
.plt:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E60
.plt:0000000000001E60 ; Attributes: thunk
.plt:0000000000001E60
.plt:0000000000001E60 ; int sigaddset(sigset_t *set, int signo)
.plt:0000000000001E60 _sigaddset      proc near               ; CODE XREF: main+7B↓p
.plt:0000000000001E60                                         ; main+16D6↓p
.plt:0000000000001E60                 jmp     cs:sigaddset_ptr
.plt:0000000000001E60 _sigaddset      endp
.plt:0000000000001E60
.plt:0000000000001E66 ; ---------------------------------------------------------------------------
.plt:0000000000001E66                 push    45h ; 'E'
.plt:0000000000001E6B                 jmp     sub_1A00
.plt:0000000000001E70
.plt:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E70
.plt:0000000000001E70 ; Attributes: thunk
.plt:0000000000001E70
.plt:0000000000001E70 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000001E70 ___ctype_tolower_loc proc near          ; CODE XREF: main+1112↓p
.plt:0000000000001E70                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000001E70 ___ctype_tolower_loc endp
.plt:0000000000001E70
.plt:0000000000001E76 ; ---------------------------------------------------------------------------
.plt:0000000000001E76                 push    46h ; 'F'
.plt:0000000000001E7B                 jmp     sub_1A00
.plt:0000000000001E80
.plt:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E80
.plt:0000000000001E80 ; Attributes: thunk
.plt:0000000000001E80
.plt:0000000000001E80 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001E80 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001E80                                         ; xstrtoumax+55↓p
.plt:0000000000001E80                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001E80 ___ctype_b_loc  endp
.plt:0000000000001E80
.plt:0000000000001E86 ; ---------------------------------------------------------------------------
.plt:0000000000001E86                 push    47h ; 'G'
.plt:0000000000001E8B                 jmp     sub_1A00
.plt:0000000000001E90
.plt:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E90
.plt:0000000000001E90 ; Attributes: thunk
.plt:0000000000001E90
.plt:0000000000001E90 ___sprintf_chk  proc near               ; CODE XREF: human_readable+1C1↓p
.plt:0000000000001E90                                         ; human_readable+332↓p ...
.plt:0000000000001E90                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001E90 ___sprintf_chk  endp
.plt:0000000000001E90
.plt:0000000000001E96 ; ---------------------------------------------------------------------------
.plt:0000000000001E96                 push    48h ; 'H'
.plt:0000000000001E9B                 jmp     sub_1A00
.plt:0000000000001E9B ; } // starts at 1A00
.plt:0000000000001E9B _plt            ends
.plt:0000000000001E9B
.plt.got:0000000000001EA0 ; ===========================================================================
.plt.got:0000000000001EA0
.plt.got:0000000000001EA0 ; Segment type: Pure code
.plt.got:0000000000001EA0 ; Segment permissions: Read/Execute
.plt.got:0000000000001EA0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001EA0                 assume cs:_plt_got
.plt.got:0000000000001EA0                 ;org 1EA0h
.plt.got:0000000000001EA0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001EA0
.plt.got:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001EA0
.plt.got:0000000000001EA0 ; Attributes: thunk
.plt.got:0000000000001EA0
.plt.got:0000000000001EA0 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001EA0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001EA0 ; __unwind {
.plt.got:0000000000001EA0                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001EA0 __cxa_finalize  endp
.plt.got:0000000000001EA0
.plt.got:0000000000001EA0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001EA6                 align 8
.plt.got:0000000000001EA6 ; } // starts at 1EA0
.plt.got:0000000000001EA6 _plt_got        ends
.plt.got:0000000000001EA6
LOAD:0000000000001EA8 ; ===========================================================================
LOAD:0000000000001EA8
LOAD:0000000000001EA8 ; Segment type: Pure code
LOAD:0000000000001EA8 ; Segment permissions: Read/Execute
LOAD:0000000000001EA8 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001EA8                 assume cs:LOAD
LOAD:0000000000001EA8                 ;org 1EA8h
LOAD:0000000000001EA8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001EA8                 align 10h
LOAD:0000000000001EA8 LOAD            ends
LOAD:0000000000001EA8
.text:0000000000001EB0 ; ===========================================================================
.text:0000000000001EB0
.text:0000000000001EB0 ; Segment type: Pure code
.text:0000000000001EB0 ; Segment permissions: Read/Execute
.text:0000000000001EB0 _text           segment para public 'CODE' use64
.text:0000000000001EB0                 assume cs:_text
.text:0000000000001EB0                 ;org 1EB0h
.text:0000000000001EB0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001EB0
.text:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EB0
.text:0000000000001EB0
.text:0000000000001EB0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001EB0                 public main
.text:0000000000001EB0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001EB0
.text:0000000000001EB0 var_110         = qword ptr -110h
.text:0000000000001EB0 var_108         = qword ptr -108h
.text:0000000000001EB0 var_100         = qword ptr -100h
.text:0000000000001EB0 act             = qword ptr -0F8h
.text:0000000000001EB0 var_F0          = qword ptr -0F0h
.text:0000000000001EB0 n               = qword ptr -0E0h
.text:0000000000001EB0 var_D8          = qword ptr -0D8h
.text:0000000000001EB0 var_D0          = xmmword ptr -0D0h
.text:0000000000001EB0 var_C0          = xmmword ptr -0C0h
.text:0000000000001EB0 var_B0          = xmmword ptr -0B0h
.text:0000000000001EB0 var_A0          = xmmword ptr -0A0h
.text:0000000000001EB0 var_90          = xmmword ptr -90h
.text:0000000000001EB0 var_80          = xmmword ptr -80h
.text:0000000000001EB0 var_70          = xmmword ptr -70h
.text:0000000000001EB0 var_60          = xmmword ptr -60h
.text:0000000000001EB0 var_50          = dword ptr -50h
.text:0000000000001EB0 var_40          = qword ptr -40h
.text:0000000000001EB0
.text:0000000000001EB0 ; __unwind {
.text:0000000000001EB0                 push    r15
.text:0000000000001EB2                 push    r14
.text:0000000000001EB4                 push    r13
.text:0000000000001EB6                 push    r12
.text:0000000000001EB8                 mov     r12d, edi
.text:0000000000001EBB                 push    rbp
.text:0000000000001EBC                 push    rbx
.text:0000000000001EBD                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000001EC4                 mov     rbp, rsi
.text:0000000000001EC7                 sub     rsp, 0E8h
.text:0000000000001ECE                 mov     rax, fs:28h
.text:0000000000001ED7                 mov     [rsp+118h+var_40], rax
.text:0000000000001EDF                 xor     eax, eax
.text:0000000000001EE1                 call    _getenv
.text:0000000000001EE6                 lea     rdi, caught_signals ; set
.text:0000000000001EED                 mov     rbx, rax
.text:0000000000001EF0                 call    _sigemptyset
.text:0000000000001EF5                 test    rbx, rbx
.text:0000000000001EF8                 jz      loc_357A
.text:0000000000001EFE
.text:0000000000001EFE loc_1EFE:                               ; CODE XREF: main+16DB↓j
.text:0000000000001EFE                 lea     rax, [rsp+118h+var_D8]
.text:0000000000001F03                 xor     esi, esi        ; act
.text:0000000000001F05                 mov     edi, 2          ; sig
.text:0000000000001F0A                 mov     rdx, rax        ; oact
.text:0000000000001F0D                 mov     [rsp+118h+act], rax
.text:0000000000001F12                 call    _sigaction
.text:0000000000001F17                 cmp     [rsp+118h+var_D8], 1
.text:0000000000001F1D                 jz      short loc_1F30
.text:0000000000001F1F                 lea     rdi, caught_signals ; set
.text:0000000000001F26                 mov     esi, 2          ; signo
.text:0000000000001F2B                 call    _sigaddset
.text:0000000000001F30
.text:0000000000001F30 loc_1F30:                               ; CODE XREF: main+6D↑j
.text:0000000000001F30                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val
.text:0000000000001F38                 lea     rdi, caught_signals ; set
.text:0000000000001F3F                 mov     esi, 0Ah        ; signo
.text:0000000000001F44                 movups  [rsp+118h+var_D0], xmm0
.text:0000000000001F49                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+10h
.text:0000000000001F51                 movups  [rsp+118h+var_C0], xmm0
.text:0000000000001F56                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+20h
.text:0000000000001F5E                 movups  [rsp+118h+var_B0], xmm0
.text:0000000000001F63                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+30h
.text:0000000000001F6B                 movups  [rsp+118h+var_A0], xmm0
.text:0000000000001F70                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+40h
.text:0000000000001F78                 movups  [rsp+118h+var_90], xmm0
.text:0000000000001F80                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+50h
.text:0000000000001F88                 movups  [rsp+118h+var_80], xmm0
.text:0000000000001F90                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+60h
.text:0000000000001F98                 movups  [rsp+118h+var_70], xmm0
.text:0000000000001FA0                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+70h
.text:0000000000001FA8                 movups  [rsp+118h+var_60], xmm0
.text:0000000000001FB0                 call    _sigismember
.text:0000000000001FB5                 test    eax, eax
.text:0000000000001FB7                 jz      short loc_1FE1
.text:0000000000001FB9                 mov     rsi, [rsp+118h+act] ; act
.text:0000000000001FBE                 lea     rax, siginfo_handler
.text:0000000000001FC5                 xor     edx, edx        ; oact
.text:0000000000001FC7                 mov     edi, 0Ah        ; sig
.text:0000000000001FCC                 mov     [rsp+118h+var_50], 0
.text:0000000000001FD7                 mov     [rsp+118h+var_D8], rax
.text:0000000000001FDC                 call    _sigaction
.text:0000000000001FE1
.text:0000000000001FE1 loc_1FE1:                               ; CODE XREF: main+107↑j
.text:0000000000001FE1                 lea     rdi, caught_signals ; set
.text:0000000000001FE8                 mov     esi, 2          ; signo
.text:0000000000001FED                 call    _sigismember
.text:0000000000001FF2                 test    eax, eax
.text:0000000000001FF4                 jz      short loc_201E
.text:0000000000001FF6                 mov     rsi, [rsp+118h+act] ; act
.text:0000000000001FFB                 lea     rax, interrupt_handler
.text:0000000000002002                 xor     edx, edx        ; oact
.text:0000000000002004                 mov     edi, 2          ; sig
.text:0000000000002009                 mov     [rsp+118h+var_50], 0C0000000h
.text:0000000000002014                 mov     [rsp+118h+var_D8], rax
.text:0000000000002019                 call    _sigaction
.text:000000000000201E
.text:000000000000201E loc_201E:                               ; CODE XREF: main+144↑j
.text:000000000000201E                 mov     rdi, [rbp+0]
.text:0000000000002022                 lea     rbx, trans_table
.text:0000000000002029                 call    set_program_name
.text:000000000000202E                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000002035                 mov     edi, 6          ; category
.text:000000000000203A                 call    _setlocale
.text:000000000000203F                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000002046                 lea     rdi, domainname ; "coreutils"
.text:000000000000204D                 call    _bindtextdomain
.text:0000000000002052                 lea     rdi, domainname ; "coreutils"
.text:0000000000002059                 call    _textdomain
.text:000000000000205E                 lea     rdi, maybe_close_stdout
.text:0000000000002065                 call    atexit
.text:000000000000206A                 call    _getpagesize
.text:000000000000206F                 cdqe
.text:0000000000002071                 sub     rsp, 8
.text:0000000000002075                 mov     r8, cs:Version
.text:000000000000207C                 mov     cs:page_size, rax
.text:0000000000002083                 lea     rax, aStuartKemp ; "Stuart Kemp"
.text:000000000000208A                 push    0
.text:000000000000208C                 lea     rcx, domainname ; "coreutils"
.text:0000000000002093                 lea     rdx, aDd        ; "dd"
.text:000000000000209A                 mov     r9d, 1
.text:00000000000020A0                 push    rax
.text:00000000000020A1                 lea     rax, aDavidMackenzie ; "David MacKenzie"
.text:00000000000020A8                 mov     rsi, rbp
.text:00000000000020AB                 mov     edi, r12d
.text:00000000000020AE                 push    rax
.text:00000000000020AF                 lea     rax, aPaulRubin ; "Paul Rubin"
.text:00000000000020B6                 push    rax
.text:00000000000020B7                 lea     rax, usage
.text:00000000000020BE                 push    rax
.text:00000000000020BF                 xor     eax, eax
.text:00000000000020C1                 call    parse_gnu_standard_options_only
.text:00000000000020C6                 mov     cs:close_stdout_required, 0
.text:00000000000020CD                 add     rsp, 30h
.text:00000000000020D1                 xor     eax, eax
.text:00000000000020D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000020D8
.text:00000000000020D8 loc_20D8:                               ; CODE XREF: main+235↓j
.text:00000000000020D8                 mov     [rbx+rax], al
.text:00000000000020DB                 add     rax, 1
.text:00000000000020DF                 cmp     rax, 100h
.text:00000000000020E5                 jnz     short loc_20D8
.text:00000000000020E7                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000020ED                 cmp     r12d, eax
.text:00000000000020F0                 jle     loc_2A32
.text:00000000000020F6                 movsxd  rdx, eax
.text:00000000000020F9                 not     eax
.text:00000000000020FB                 mov     [rsp+118h+var_110], 0
.text:0000000000002104                 add     eax, r12d
.text:0000000000002107                 lea     r14, [rbp+rdx*8+0]
.text:000000000000210C                 xor     r12d, r12d
.text:000000000000210F                 add     rax, rdx
.text:0000000000002112                 mov     [rsp+118h+var_108], 0FFFFFFFFFFFFFFFFh
.text:000000000000211B                 xor     r15d, r15d
.text:000000000000211E                 lea     rbp, [rbp+rax*8+8]
.text:0000000000002123                 lea     rax, [rsp+118h+n]
.text:0000000000002128                 mov     [rsp+118h+var_100], rax
.text:000000000000212D                 nop     dword ptr [rax]
.text:0000000000002130
.text:0000000000002130 loc_2130:                               ; CODE XREF: main+2E7↓j
.text:0000000000002130                 mov     r13, [r14]
.text:0000000000002133                 mov     esi, 3Dh ; '='  ; c
.text:0000000000002138                 mov     rdi, r13        ; s
.text:000000000000213B                 call    _strchr
.text:0000000000002140                 test    rax, rax
.text:0000000000002143                 jz      loc_3921
.text:0000000000002149                 lea     r8, [rax+1]
.text:000000000000214D                 lea     rcx, aIf        ; "if"
.text:0000000000002154                 mov     rdx, r13
.text:0000000000002157                 mov     esi, 69h ; 'i'
.text:000000000000215C                 nop     dword ptr [rax+00h]
.text:0000000000002160
.text:0000000000002160 loc_2160:                               ; CODE XREF: main+2C8↓j
.text:0000000000002160                 add     rdx, 1
.text:0000000000002164                 add     rcx, 1
.text:0000000000002168                 cmp     [rdx-1], sil
.text:000000000000216C                 jnz     loc_28B0
.text:0000000000002172                 movzx   esi, byte ptr [rcx]
.text:0000000000002175                 test    sil, sil
.text:0000000000002178                 jnz     short loc_2160
.text:000000000000217A                 movzx   eax, byte ptr [rdx]
.text:000000000000217D                 cmp     al, 3Dh ; '='
.text:000000000000217F                 jz      short loc_2189
.text:0000000000002181                 test    al, al
.text:0000000000002183                 jnz     loc_28B0
.text:0000000000002189
.text:0000000000002189 loc_2189:                               ; CODE XREF: main+2CF↑j
.text:0000000000002189                 mov     cs:input_file, r8
.text:0000000000002190
.text:0000000000002190 loc_2190:                               ; CODE XREF: main+A35↓j
.text:0000000000002190                                         ; main+A8C↓j ...
.text:0000000000002190                 add     r14, 8
.text:0000000000002194                 cmp     rbp, r14
.text:0000000000002197                 jnz     short loc_2130
.text:0000000000002199                 test    r15, r15
.text:000000000000219C                 jz      loc_2A47
.text:00000000000021A2                 mov     cs:output_blocksize, r15
.text:00000000000021A9                 mov     cs:input_blocksize, r15
.text:00000000000021B0
.text:00000000000021B0 loc_21B0:                               ; CODE XREF: main+BBE↓j
.text:00000000000021B0                                         ; main+BCF↓j
.text:00000000000021B0                 cmp     cs:conversion_blocksize, 0
.text:00000000000021B8                 jnz     short loc_21C1
.text:00000000000021BA                 and     cs:conversions_mask, 0FFFFFFE7h
.text:00000000000021C1
.text:00000000000021C1 loc_21C1:                               ; CODE XREF: main+308↑j
.text:00000000000021C1                 mov     eax, cs:input_flags
.text:00000000000021C7                 test    eax, 101000h
.text:00000000000021CC                 jz      short loc_21D9
.text:00000000000021CE                 or      eax, 101000h
.text:00000000000021D3                 mov     cs:input_flags, eax
.text:00000000000021D9
.text:00000000000021D9 loc_21D9:                               ; CODE XREF: main+31C↑j
.text:00000000000021D9                 mov     esi, cs:output_flags
.text:00000000000021DF                 test    sil, 1
.text:00000000000021E3                 jnz     loc_3B83
.text:00000000000021E9                 mov     ecx, cs:input_flags
.text:00000000000021EF                 test    cl, 10h
.text:00000000000021F2                 jnz     loc_3C5F
.text:00000000000021F8                 test    sil, 0Ch
.text:00000000000021FC                 jnz     loc_3C30
.text:0000000000002202                 test    cl, 8
.text:0000000000002205                 mov     rax, [rsp+118h+var_110]
.text:000000000000220A                 jz      loc_2A1D
.text:0000000000002210                 test    rax, rax
.text:0000000000002213                 jnz     loc_2A84
.text:0000000000002219
.text:0000000000002219 loc_2219:                               ; CODE XREF: main+B70↓j
.text:0000000000002219                                         ; main+B7D↓j ...
.text:0000000000002219                 test    cl, 4
.text:000000000000221C                 mov     rax, [rsp+118h+var_108]
.text:0000000000002221                 jz      loc_2A07
.text:0000000000002227                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000222B                 jz      short loc_2244
.text:000000000000222D                 xor     edx, edx
.text:000000000000222F                 div     cs:input_blocksize
.text:0000000000002236                 mov     cs:max_records, rax
.text:000000000000223D                 mov     cs:max_bytes, rdx
.text:0000000000002244
.text:0000000000002244 loc_2244:                               ; CODE XREF: main+37B↑j
.text:0000000000002244                                         ; main+B5B↓j ...
.text:0000000000002244                 test    sil, 10h
.text:0000000000002248                 jz      loc_29F2
.text:000000000000224E                 test    r12, r12
.text:0000000000002251                 jnz     loc_2AD7
.text:0000000000002257
.text:0000000000002257 loc_2257:                               ; CODE XREF: main+B45↓j
.text:0000000000002257                                         ; main+B52↓j ...
.text:0000000000002257                 mov     ebp, cs:conversions_mask
.text:000000000000225D                 mov     eax, ecx
.text:000000000000225F                 and     eax, 1
.text:0000000000002262                 test    ebp, 800h
.text:0000000000002268                 jnz     loc_3004
.text:000000000000226E                 test    eax, eax
.text:0000000000002270                 jz      loc_2AA0
.text:0000000000002276                 lea     rax, iread_fullblock
.text:000000000000227D                 mov     cs:warn_partial_read, 0
.text:0000000000002284
.text:0000000000002284 loc_2284:                               ; CODE XREF: main+C22↓j
.text:0000000000002284                                         ; main+C54↓j ...
.text:0000000000002284                 mov     cs:iread_fnc, rax
.text:000000000000228B                 mov     eax, ecx
.text:000000000000228D                 and     eax, 0FFFFFFFEh
.text:0000000000002290                 mov     cs:input_flags, eax
.text:0000000000002296                 mov     eax, ebp
.text:0000000000002298                 and     eax, 7
.text:000000000000229B                 lea     edx, [rax-1]
.text:000000000000229E                 test    edx, eax
.text:00000000000022A0                 jnz     loc_3C0C
.text:00000000000022A6                 mov     eax, ebp
.text:00000000000022A8                 and     eax, 18h
.text:00000000000022AB                 lea     edx, [rax-1]
.text:00000000000022AE                 test    edx, eax
.text:00000000000022B0                 jnz     loc_3A37
.text:00000000000022B6                 mov     eax, ebp
.text:00000000000022B8                 and     eax, 60h
.text:00000000000022BB                 lea     edx, [rax-1]
.text:00000000000022BE                 test    edx, eax
.text:00000000000022C0                 jnz     loc_3A5B
.text:00000000000022C6                 mov     eax, ebp
.text:00000000000022C8                 and     eax, 3000h
.text:00000000000022CD                 lea     edx, [rax-1]
.text:00000000000022D0                 test    edx, eax
.text:00000000000022D2                 jnz     loc_3A91
.text:00000000000022D8                 mov     eax, ecx
.text:00000000000022DA                 and     eax, 4002h
.text:00000000000022DF                 lea     edx, [rax-1]
.text:00000000000022E2                 test    edx, eax
.text:00000000000022E4                 jnz     loc_3AB5
.text:00000000000022EA                 mov     eax, esi
.text:00000000000022EC                 and     eax, 4002h
.text:00000000000022F1                 lea     edx, [rax-1]
.text:00000000000022F4                 and     edx, eax
.text:00000000000022F6                 mov     dword ptr [rsp+118h+var_F0], edx
.text:00000000000022FA                 jnz     loc_3AB5
.text:0000000000002300                 test    cl, 2
.text:0000000000002303                 jz      short loc_233B
.text:0000000000002305                 xor     eax, eax
.text:0000000000002307                 cmp     cs:max_records, 0
.text:000000000000230F                 mov     cs:i_nocache, 1
.text:0000000000002316                 jnz     short loc_2325
.text:0000000000002318                 xor     eax, eax
.text:000000000000231A                 cmp     cs:max_bytes, 0
.text:0000000000002322                 setz    al
.text:0000000000002325
.text:0000000000002325 loc_2325:                               ; CODE XREF: main+466↑j
.text:0000000000002325                 mov     cs:i_nocache_eof, al
.text:000000000000232B                 and     cs:i_nocache_eof, 1
.text:0000000000002332                 and     ecx, 0FFFFFFFCh
.text:0000000000002335                 mov     cs:input_flags, ecx
.text:000000000000233B
.text:000000000000233B loc_233B:                               ; CODE XREF: main+453↑j
.text:000000000000233B                 test    sil, 2
.text:000000000000233F                 jz      short loc_2377
.text:0000000000002341                 xor     eax, eax
.text:0000000000002343                 cmp     cs:max_records, 0
.text:000000000000234B                 mov     cs:o_nocache, 1
.text:0000000000002352                 jnz     short loc_2361
.text:0000000000002354                 xor     eax, eax
.text:0000000000002356                 cmp     cs:max_bytes, 0
.text:000000000000235E                 setz    al
.text:0000000000002361
.text:0000000000002361 loc_2361:                               ; CODE XREF: main+4A2↑j
.text:0000000000002361                 mov     cs:o_nocache_eof, al
.text:0000000000002367                 and     cs:o_nocache_eof, 1
.text:000000000000236E                 and     esi, 0FFFFFFFDh
.text:0000000000002371                 mov     cs:output_flags, esi
.text:0000000000002377
.text:0000000000002377 loc_2377:                               ; CODE XREF: main+48F↑j
.text:0000000000002377                 test    bpl, 1
.text:000000000000237B                 jz      short loc_23B2
.text:000000000000237D                 lea     rax, trans_table
.text:0000000000002384                 lea     rcx, ebcdic_to_ascii
.text:000000000000238B                 lea     rsi, [rax+100h]
.text:0000000000002392                 nop     word ptr [rax+rax+00h]
.text:0000000000002398
.text:0000000000002398 loc_2398:                               ; CODE XREF: main+4F9↓j
.text:0000000000002398                 movzx   edx, byte ptr [rax]
.text:000000000000239B                 add     rax, 1
.text:000000000000239F                 movzx   edx, byte ptr [rcx+rdx]
.text:00000000000023A3                 mov     [rax-1], dl
.text:00000000000023A6                 cmp     rsi, rax
.text:00000000000023A9                 jnz     short loc_2398
.text:00000000000023AB                 mov     cs:translation_needed, 1
.text:00000000000023B2
.text:00000000000023B2 loc_23B2:                               ; CODE XREF: main+4CB↑j
.text:00000000000023B2                 test    bpl, 40h
.text:00000000000023B6                 jz      loc_2FB8
.text:00000000000023BC                 call    ___ctype_toupper_loc
.text:00000000000023C1                 mov     rsi, [rax]
.text:00000000000023C4                 lea     rax, trans_table
.text:00000000000023CB                 lea     rcx, [rax+100h]
.text:00000000000023D2                 nop     word ptr [rax+rax+00h]
.text:00000000000023D8
.text:00000000000023D8 loc_23D8:                               ; CODE XREF: main+538↓j
.text:00000000000023D8                 movzx   edx, byte ptr [rax]
.text:00000000000023DB                 add     rax, 1
.text:00000000000023DF                 mov     edx, [rsi+rdx*4]
.text:00000000000023E2                 mov     [rax-1], dl
.text:00000000000023E5                 cmp     rcx, rax
.text:00000000000023E8                 jnz     short loc_23D8
.text:00000000000023EA
.text:00000000000023EA loc_23EA:                               ; CODE XREF: main+1142↓j
.text:00000000000023EA                 mov     cs:translation_needed, 1
.text:00000000000023F1
.text:00000000000023F1 loc_23F1:                               ; CODE XREF: main+110C↓j
.text:00000000000023F1                 test    bpl, 2
.text:00000000000023F5                 jz      loc_2F80
.text:00000000000023FB                 lea     rax, trans_table
.text:0000000000002402                 lea     rcx, ascii_to_ebcdic
.text:0000000000002409                 lea     rsi, [rax+100h]
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: main+571↓j
.text:0000000000002410                 movzx   edx, byte ptr [rax]
.text:0000000000002413                 add     rax, 1
.text:0000000000002417                 movzx   edx, byte ptr [rcx+rdx]
.text:000000000000241B                 mov     [rax-1], dl
.text:000000000000241E                 cmp     rsi, rax
.text:0000000000002421                 jnz     short loc_2410
.text:0000000000002423
.text:0000000000002423 loc_2423:                               ; CODE XREF: main+1103↓j
.text:0000000000002423                 mov     cs:translation_needed, 1
.text:000000000000242A                 mov     cs:newline_character, 25h ; '%'
.text:0000000000002431                 mov     cs:space_character, 40h ; '@'
.text:0000000000002438
.text:0000000000002438 loc_2438:                               ; CODE XREF: main+10D4↓j
.text:0000000000002438                 mov     rbp, cs:input_file
.text:000000000000243F                 mov     r12d, cs:input_flags
.text:0000000000002446                 call    ___errno_location
.text:000000000000244B                 mov     [rsp+118h+var_108], rax
.text:0000000000002450                 test    rbp, rbp
.text:0000000000002453                 jz      loc_3235
.text:0000000000002459                 xor     ecx, ecx
.text:000000000000245B                 xor     edi, edi        ; fd2
.text:000000000000245D                 mov     edx, r12d       ; oflag
.text:0000000000002460                 mov     rsi, rbp        ; file
.text:0000000000002463                 call    ifd_reopen
.text:0000000000002468                 test    eax, eax
.text:000000000000246A                 js      loc_3BCC
.text:0000000000002470
.text:0000000000002470 loc_2470:                               ; CODE XREF: main+13AC↓j
.text:0000000000002470                 xor     esi, esi        ; offset
.text:0000000000002472                 mov     edx, 1          ; whence
.text:0000000000002477                 xor     edi, edi        ; fd
.text:0000000000002479                 call    _lseek
.text:000000000000247E                 mov     rdx, rax
.text:0000000000002481                 mov     rsi, cs:output_file ; file
.text:0000000000002488                 mov     r12d, cs:output_flags
.text:000000000000248F                 not     rdx
.text:0000000000002492                 shr     rdx, 3Fh
.text:0000000000002496                 test    rax, rax
.text:0000000000002499                 mov     cs:input_seekable, dl
.text:000000000000249F                 mov     edx, 0
.text:00000000000024A4                 cmovs   rax, rdx
.text:00000000000024A8                 test    rsi, rsi
.text:00000000000024AB                 mov     cs:input_offset, rax
.text:00000000000024B2                 mov     rax, [rsp+118h+var_108]
.text:00000000000024B7                 mov     eax, [rax]
.text:00000000000024B9                 mov     cs:input_seek_errno, eax
.text:00000000000024BF                 jz      loc_3590
.text:00000000000024C5                 mov     eax, cs:conversions_mask
.text:00000000000024CB                 xor     edx, edx
.text:00000000000024CD                 mov     ebp, eax
.text:00000000000024CF                 test    ah, 10h
.text:00000000000024D2                 setz    dl
.text:00000000000024D5                 sar     ebp, 6
.text:00000000000024D8                 and     ebp, 80h
.text:00000000000024DE                 shl     edx, 6
.text:00000000000024E1                 or      ebp, r12d
.text:00000000000024E4                 or      ebp, edx
.text:00000000000024E6                 cmp     cs:seek_records, 0
.text:00000000000024EE                 jnz     loc_30BC
.text:00000000000024F4                 and     eax, 200h
.text:00000000000024F9                 cmp     eax, 1
.text:00000000000024FC                 sbb     eax, eax
.text:00000000000024FE                 and     eax, 200h
.text:0000000000002503                 or      ebp, eax
.text:0000000000002505
.text:0000000000002505 loc_2505:                               ; CODE XREF: main+122F↓j
.text:0000000000002505                 mov     edx, ebp
.text:0000000000002507                 mov     ecx, 1B6h
.text:000000000000250C                 mov     edi, 1          ; fd2
.text:0000000000002511                 or      edx, 1          ; oflag
.text:0000000000002514                 call    ifd_reopen
.text:0000000000002519                 test    eax, eax
.text:000000000000251B                 js      loc_3AD9
.text:0000000000002521
.text:0000000000002521 loc_2521:                               ; CODE XREF: main+1222↓j
.text:0000000000002521                 mov     rbp, cs:seek_records
.text:0000000000002528                 test    rbp, rbp
.text:000000000000252B                 jz      short loc_2573
.text:000000000000252D                 test    byte ptr cs:conversions_mask+1, 2
.text:0000000000002534                 jnz     short loc_2573
.text:0000000000002536                 mov     r14, cs:output_blocksize
.text:000000000000253D                 xor     edx, edx
.text:000000000000253F                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000002549                 mov     r12, rbp
.text:000000000000254C                 div     r14
.text:000000000000254F                 imul    r12, r14
.text:0000000000002553                 add     r12, cs:seek_bytes
.text:000000000000255A                 cmp     rbp, rax
.text:000000000000255D                 ja      loc_3B19
.text:0000000000002563                 mov     rdi, r12        ; length
.text:0000000000002566                 call    iftruncate_constprop_6
.text:000000000000256B                 test    eax, eax
.text:000000000000256D                 jnz     loc_34CD
.text:0000000000002573
.text:0000000000002573 loc_2573:                               ; CODE XREF: main+67B↑j
.text:0000000000002573                                         ; main+684↑j ...
.text:0000000000002573                 call    gethrxtime
.text:0000000000002578                 mov     r14, cs:skip_records
.text:000000000000257F                 mov     cs:start_time, rax
.text:0000000000002586                 add     rax, 3B9ACA00h
.text:000000000000258C                 mov     cs:next_time, rax
.text:0000000000002593                 test    r14, r14
.text:0000000000002596                 jnz     short loc_25A2
.text:0000000000002598                 cmp     cs:skip_bytes, 0
.text:00000000000025A0                 jz      short loc_25FE
.text:00000000000025A2
.text:00000000000025A2 loc_25A2:                               ; CODE XREF: main+6E6↑j
.text:00000000000025A2                 mov     r15, cs:input_blocksize
.text:00000000000025A9                 mov     rsi, cs:input_file
.text:00000000000025B0                 lea     r8, skip_bytes
.text:00000000000025B7                 xor     edi, edi
.text:00000000000025B9                 mov     rdx, r14
.text:00000000000025BC                 mov     rbp, cs:input_offset
.text:00000000000025C3                 mov     r12, cs:skip_bytes
.text:00000000000025CA                 mov     rcx, r15
.text:00000000000025CD                 call    skip
.text:00000000000025D2                 test    rax, rax
.text:00000000000025D5                 jnz     loc_2B09
.text:00000000000025DB                 mov     rax, r14
.text:00000000000025DE                 add     rbp, r12
.text:00000000000025E1                 imul    rax, r15
.text:00000000000025E5                 add     rax, rbp
.text:00000000000025E8                 cmp     rax, cs:input_offset
.text:00000000000025EF                 jz      short loc_25FE
.text:00000000000025F1                 cmp     cs:input_offset_overflow, 1
.text:00000000000025F8                 jnz     loc_2B09
.text:00000000000025FE
.text:00000000000025FE loc_25FE:                               ; CODE XREF: main+6F0↑j
.text:00000000000025FE                                         ; main+73F↑j ...
.text:00000000000025FE                 mov     rdx, cs:seek_records
.text:0000000000002605                 mov     rax, cs:seek_bytes
.text:000000000000260C                 test    rdx, rdx
.text:000000000000260F                 jnz     short loc_261A
.text:0000000000002611                 test    rax, rax
.text:0000000000002614                 jz      loc_26AA
.text:000000000000261A
.text:000000000000261A loc_261A:                               ; CODE XREF: main+75F↑j
.text:000000000000261A                 mov     rcx, cs:output_blocksize
.text:0000000000002621                 mov     rsi, cs:output_file
.text:0000000000002628                 lea     r8, [rsp+118h+n]
.text:000000000000262D                 mov     edi, 1
.text:0000000000002632                 mov     [rsp+118h+n], rax
.text:0000000000002637                 call    skip
.text:000000000000263C                 test    rax, rax
.text:000000000000263F                 mov     r12, rax
.text:0000000000002642                 jz      loc_30E4
.text:0000000000002648                 mov     rdx, cs:output_blocksize ; n
.text:000000000000264F                 mov     rdi, cs:obuf    ; s
.text:0000000000002656                 xor     esi, esi        ; c
.text:0000000000002658                 call    _memset
.text:000000000000265D                 nop     dword ptr [rax]
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: main+7D3↓j
.text:0000000000002660                 mov     rbp, cs:output_blocksize
.text:0000000000002667                 mov     rdi, cs:obuf    ; s1
.text:000000000000266E                 mov     rsi, rbp        ; offset
.text:0000000000002671                 call    iwrite_constprop_7
.text:0000000000002676                 cmp     rbp, rax
.text:0000000000002679                 jnz     loc_395A
.text:000000000000267F                 sub     r12, 1
.text:0000000000002683                 jnz     short loc_2660
.text:0000000000002685                 cmp     [rsp+118h+n], 0
.text:000000000000268B                 jz      short loc_26AA
.text:000000000000268D
.text:000000000000268D loc_268D:                               ; CODE XREF: main+1250↓j
.text:000000000000268D                 mov     rbp, [rsp+118h+n]
.text:0000000000002692                 mov     rdi, cs:obuf    ; s1
.text:0000000000002699                 mov     rsi, rbp        ; offset
.text:000000000000269C                 call    iwrite_constprop_7
.text:00000000000026A1                 cmp     rbp, rax
.text:00000000000026A4                 jnz     loc_395A
.text:00000000000026AA
.text:00000000000026AA loc_26AA:                               ; CODE XREF: main+764↑j
.text:00000000000026AA                                         ; main+7DB↑j ...
.text:00000000000026AA                 cmp     cs:max_records, 0
.text:00000000000026B2                 jnz     short loc_26C2
.text:00000000000026B4                 cmp     cs:max_bytes, 0
.text:00000000000026BC                 jz      loc_3303
.text:00000000000026C2
.text:00000000000026C2 loc_26C2:                               ; CODE XREF: main+802↑j
.text:00000000000026C2                 cmp     cs:ibuf, 0
.text:00000000000026CA                 jz      loc_3644
.text:00000000000026D0
.text:00000000000026D0 loc_26D0:                               ; CODE XREF: main+1799↓j
.text:00000000000026D0                 call    alloc_obuf
.text:00000000000026D5                 mov     dword ptr [rsp+118h+var_100], 0
.text:00000000000026DD                 mov     [rsp+118h+var_110], 0
.text:00000000000026E6                 db      2Eh
.text:00000000000026E6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: main+D10↓j
.text:00000000000026F0                                         ; main+E86↓j ...
.text:00000000000026F0                 cmp     cs:status_level, 4
.text:00000000000026F7                 jz      loc_287D
.text:00000000000026FD
.text:00000000000026FD loc_26FD:                               ; CODE XREF: main+9C7↓j
.text:00000000000026FD                                         ; main+9D9↓j ...
.text:00000000000026FD                 mov     r13, cs:max_bytes
.text:0000000000002704                 mov     rbp, cs:r_full
.text:000000000000270B                 xor     eax, eax
.text:000000000000270D                 add     rbp, cs:r_partial
.text:0000000000002714                 mov     r12, cs:max_records
.text:000000000000271B                 mov     esi, cs:conversions_mask
.text:0000000000002721                 test    r13, r13
.text:0000000000002724                 setnz   al
.text:0000000000002727                 add     rax, r12
.text:000000000000272A                 cmp     rbp, rax
.text:000000000000272D                 jnb     loc_3142
.text:0000000000002733                 mov     eax, esi
.text:0000000000002735                 mov     rcx, cs:ibuf
.text:000000000000273C                 and     eax, 500h
.text:0000000000002741                 cmp     eax, 500h
.text:0000000000002746                 jnz     short loc_2765
.text:0000000000002748                 mov     rdx, cs:input_blocksize ; n
.text:000000000000274F                 and     esi, 18h
.text:0000000000002752                 mov     eax, 20h ; ' '
.text:0000000000002757                 mov     rdi, rcx        ; s
.text:000000000000275A                 cmovnz  esi, eax        ; c
.text:000000000000275D                 call    _memset
.text:0000000000002762                 mov     rcx, rax
.text:0000000000002765
.text:0000000000002765 loc_2765:                               ; CODE XREF: main+896↑j
.text:0000000000002765                 cmp     rbp, r12
.text:0000000000002768                 mov     rax, cs:iread_fnc
.text:000000000000276F                 jb      loc_2C10
.text:0000000000002775                 xor     edi, edi
.text:0000000000002777                 mov     rdx, r13
.text:000000000000277A                 mov     rsi, rcx
.text:000000000000277D                 call    rax ; iread_fnc
.text:000000000000277F                 cmp     rax, 0
.text:0000000000002783                 jle     loc_2C28
.text:0000000000002789
.text:0000000000002789 loc_2789:                               ; CODE XREF: main+D72↓j
.text:0000000000002789                 xor     edx, edx
.text:000000000000278B                 mov     rcx, rax
.text:000000000000278E                 add     rcx, cs:input_offset
.text:0000000000002795                 mov     rbp, rax
.text:0000000000002798                 setb    dl
.text:000000000000279B                 mov     cs:input_offset, rcx
.text:00000000000027A2                 test    rdx, rdx
.text:00000000000027A5                 jz      short loc_27AE
.text:00000000000027A7                 mov     cs:input_offset_overflow, 1
.text:00000000000027AE
.text:00000000000027AE loc_27AE:                               ; CODE XREF: main+8F5↑j
.text:00000000000027AE                 cmp     cs:i_nocache, 0
.text:00000000000027B5                 jnz     loc_2E35
.text:00000000000027BB
.text:00000000000027BB loc_27BB:                               ; CODE XREF: main+F8F↓j
.text:00000000000027BB                 mov     r12, cs:input_blocksize
.text:00000000000027C2                 cmp     r12, rbp
.text:00000000000027C5                 jbe     loc_2D60
.text:00000000000027CB
.text:00000000000027CB loc_27CB:                               ; CODE XREF: main+EA4↓j
.text:00000000000027CB                 mov     esi, cs:conversions_mask
.text:00000000000027D1                 add     cs:r_partial, 1
.text:00000000000027D9                 mov     [rsp+118h+var_110], rbp
.text:00000000000027DE                 test    esi, 400h
.text:00000000000027E4                 jz      short loc_2820
.text:00000000000027E6                 test    esi, 100h
.text:00000000000027EC                 jnz     loc_2FF7
.text:00000000000027F2                 mov     rdx, r12
.text:00000000000027F5                 sub     rdx, rbp        ; n
.text:00000000000027F8                 and     esi, 18h
.text:00000000000027FB                 jz      short loc_2802
.text:00000000000027FD                 mov     esi, 20h ; ' '  ; c
.text:0000000000002802
.text:0000000000002802 loc_2802:                               ; CODE XREF: main+94B↑j
.text:0000000000002802                 mov     rdi, cs:ibuf
.text:0000000000002809                 add     rdi, rbp        ; s
.text:000000000000280C                 call    _memset
.text:0000000000002811                 mov     [rsp+118h+var_110], rbp
.text:0000000000002816                 mov     rbp, r12
.text:0000000000002819                 nop     dword ptr [rax+00000000h]
.text:0000000000002820
.text:0000000000002820 loc_2820:                               ; CODE XREF: main+934↑j
.text:0000000000002820                                         ; main+EC1↓j ...
.text:0000000000002820                 mov     r15, cs:ibuf
.text:0000000000002827                 mov     rdi, cs:obuf
.text:000000000000282E                 cmp     r15, rdi
.text:0000000000002831                 jz      loc_2EA7
.text:0000000000002837                 cmp     cs:translation_needed, 0
.text:000000000000283E                 jnz     loc_2D76
.text:0000000000002844
.text:0000000000002844 loc_2844:                               ; CODE XREF: main+EC9↓j
.text:0000000000002844                 mov     ecx, cs:conversions_mask
.text:000000000000284A                 test    cl, 80h
.text:000000000000284D                 jnz     loc_2DB2
.text:0000000000002853
.text:0000000000002853 loc_2853:                               ; CODE XREF: main+EFC↓j
.text:0000000000002853                 test    cl, 8
.text:0000000000002856                 jnz     loc_2E25
.text:000000000000285C
.text:000000000000285C loc_285C:                               ; CODE XREF: main+F6F↓j
.text:000000000000285C                 and     ecx, 10h
.text:000000000000285F                 jz      loc_2BCD
.text:0000000000002865                 mov     rsi, rbp
.text:0000000000002868                 mov     rdi, r15
.text:000000000000286B                 call    copy_with_unblock
.text:0000000000002870                 cmp     cs:status_level, 4
.text:0000000000002877                 jnz     loc_26FD
.text:000000000000287D
.text:000000000000287D loc_287D:                               ; CODE XREF: main+847↑j
.text:000000000000287D                 call    gethrxtime
.text:0000000000002882                 cmp     rax, cs:next_time
.text:0000000000002889                 jl      loc_26FD
.text:000000000000288F                 mov     rdi, rax
.text:0000000000002892                 call    print_xfer_stats
.text:0000000000002897                 add     cs:next_time, 3B9ACA00h
.text:00000000000028A2                 jmp     loc_26FD
.text:00000000000028A2 ; ---------------------------------------------------------------------------
.text:00000000000028A7                 align 10h
.text:00000000000028B0
.text:00000000000028B0 loc_28B0:                               ; CODE XREF: main+2BC↑j
.text:00000000000028B0                                         ; main+2D3↑j
.text:00000000000028B0                 lea     rax, aOf        ; "of"
.text:00000000000028B7                 mov     rdx, r13
.text:00000000000028BA                 mov     ecx, 6Fh ; 'o'
.text:00000000000028BF
.text:00000000000028BF loc_28BF:                               ; CODE XREF: main+A21↓j
.text:00000000000028BF                 add     rdx, 1
.text:00000000000028C3                 add     rax, 1
.text:00000000000028C7                 cmp     [rdx-1], cl
.text:00000000000028CA                 jnz     short loc_28F0
.text:00000000000028CC                 movzx   ecx, byte ptr [rax]
.text:00000000000028CF                 test    cl, cl
.text:00000000000028D1                 jnz     short loc_28BF
.text:00000000000028D3                 movzx   eax, byte ptr [rdx]
.text:00000000000028D6                 cmp     al, 3Dh ; '='
.text:00000000000028D8                 jz      short loc_28DE
.text:00000000000028DA                 test    al, al
.text:00000000000028DC                 jnz     short loc_28F0
.text:00000000000028DE
.text:00000000000028DE loc_28DE:                               ; CODE XREF: main+A28↑j
.text:00000000000028DE                 mov     cs:output_file, r8
.text:00000000000028E5                 jmp     loc_2190
.text:00000000000028E5 ; ---------------------------------------------------------------------------
.text:00000000000028EA                 align 10h
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: main+A1A↑j
.text:00000000000028F0                                         ; main+A2C↑j
.text:00000000000028F0                 lea     rdx, aConv      ; "conv"
.text:00000000000028F7                 mov     rax, r13
.text:00000000000028FA                 mov     ecx, 63h ; 'c'
.text:00000000000028FF
.text:00000000000028FF loc_28FF:                               ; CODE XREF: main+A61↓j
.text:00000000000028FF                 add     rax, 1
.text:0000000000002903                 add     rdx, 1
.text:0000000000002907                 cmp     [rax-1], cl
.text:000000000000290A                 jnz     short loc_2941
.text:000000000000290C                 movzx   ecx, byte ptr [rdx]
.text:000000000000290F                 test    cl, cl
.text:0000000000002911                 jnz     short loc_28FF
.text:0000000000002913                 movzx   eax, byte ptr [rax]
.text:0000000000002916                 test    al, al
.text:0000000000002918                 jz      short loc_291E
.text:000000000000291A                 cmp     al, 3Dh ; '='
.text:000000000000291C                 jnz     short loc_2941
.text:000000000000291E
.text:000000000000291E loc_291E:                               ; CODE XREF: main+A68↑j
.text:000000000000291E                 lea     rcx, aInvalidConvers ; "invalid conversion"
.text:0000000000002925                 lea     rsi, conversions ; "ascii"
.text:000000000000292C                 xor     edx, edx
.text:000000000000292E                 mov     rdi, r8         ; s
.text:0000000000002931                 call    parse_symbols
.text:0000000000002936                 or      cs:conversions_mask, eax
.text:000000000000293C                 jmp     loc_2190
.text:0000000000002941 ; ---------------------------------------------------------------------------
.text:0000000000002941
.text:0000000000002941 loc_2941:                               ; CODE XREF: main+A5A↑j
.text:0000000000002941                                         ; main+A6C↑j
.text:0000000000002941                 lea     rdx, aIflag     ; "iflag"
.text:0000000000002948                 mov     rax, r13
.text:000000000000294B                 mov     ecx, 69h ; 'i'
.text:0000000000002950
.text:0000000000002950 loc_2950:                               ; CODE XREF: main+AB2↓j
.text:0000000000002950                 add     rax, 1
.text:0000000000002954                 add     rdx, 1
.text:0000000000002958                 cmp     [rax-1], cl
.text:000000000000295B                 jnz     short loc_2992
.text:000000000000295D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002960                 test    cl, cl
.text:0000000000002962                 jnz     short loc_2950
.text:0000000000002964                 movzx   eax, byte ptr [rax]
.text:0000000000002967                 cmp     al, 3Dh ; '='
.text:0000000000002969                 jz      short loc_296F
.text:000000000000296B                 test    al, al
.text:000000000000296D                 jnz     short loc_2992
.text:000000000000296F
.text:000000000000296F loc_296F:                               ; CODE XREF: main+AB9↑j
.text:000000000000296F                 lea     rcx, aInvalidInputFl ; "invalid input flag"
.text:0000000000002976                 lea     rsi, flags      ; "append"
.text:000000000000297D                 xor     edx, edx
.text:000000000000297F                 mov     rdi, r8         ; s
.text:0000000000002982                 call    parse_symbols
.text:0000000000002987                 or      cs:input_flags, eax
.text:000000000000298D                 jmp     loc_2190
.text:0000000000002992 ; ---------------------------------------------------------------------------
.text:0000000000002992
.text:0000000000002992 loc_2992:                               ; CODE XREF: main+AAB↑j
.text:0000000000002992                                         ; main+ABD↑j
.text:0000000000002992                 lea     rdx, aOflag     ; "oflag"
.text:0000000000002999                 mov     rax, r13
.text:000000000000299C                 mov     ecx, 6Fh ; 'o'
.text:00000000000029A1                 nop     dword ptr [rax+00000000h]
.text:00000000000029A8
.text:00000000000029A8 loc_29A8:                               ; CODE XREF: main+B0E↓j
.text:00000000000029A8                 add     rax, 1
.text:00000000000029AC                 add     rdx, 1
.text:00000000000029B0                 cmp     [rax-1], cl
.text:00000000000029B3                 jnz     loc_2B55
.text:00000000000029B9                 movzx   ecx, byte ptr [rdx]
.text:00000000000029BC                 test    cl, cl
.text:00000000000029BE                 jnz     short loc_29A8
.text:00000000000029C0                 movzx   eax, byte ptr [rax]
.text:00000000000029C3                 cmp     al, 3Dh ; '='
.text:00000000000029C5                 jz      short loc_29CF
.text:00000000000029C7                 test    al, al
.text:00000000000029C9                 jnz     loc_2B55
.text:00000000000029CF
.text:00000000000029CF loc_29CF:                               ; CODE XREF: main+B15↑j
.text:00000000000029CF                 lea     rcx, aInvalidOutputF ; "invalid output flag"
.text:00000000000029D6                 lea     rsi, flags      ; "append"
.text:00000000000029DD                 xor     edx, edx
.text:00000000000029DF                 mov     rdi, r8         ; s
.text:00000000000029E2                 call    parse_symbols
.text:00000000000029E7                 or      cs:output_flags, eax
.text:00000000000029ED                 jmp     loc_2190
.text:00000000000029F2 ; ---------------------------------------------------------------------------
.text:00000000000029F2
.text:00000000000029F2 loc_29F2:                               ; CODE XREF: main+398↑j
.text:00000000000029F2                 test    r12, r12
.text:00000000000029F5                 jz      loc_2257
.text:00000000000029FB                 mov     cs:seek_records, r12
.text:0000000000002A02                 jmp     loc_2257
.text:0000000000002A07 ; ---------------------------------------------------------------------------
.text:0000000000002A07
.text:0000000000002A07 loc_2A07:                               ; CODE XREF: main+371↑j
.text:0000000000002A07                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A0B                 jz      loc_2244
.text:0000000000002A11                 mov     cs:max_records, rax
.text:0000000000002A18                 jmp     loc_2244
.text:0000000000002A1D ; ---------------------------------------------------------------------------
.text:0000000000002A1D
.text:0000000000002A1D loc_2A1D:                               ; CODE XREF: main+35A↑j
.text:0000000000002A1D                 test    rax, rax
.text:0000000000002A20                 jz      loc_2219
.text:0000000000002A26                 mov     cs:skip_records, rax
.text:0000000000002A2D                 jmp     loc_2219
.text:0000000000002A32 ; ---------------------------------------------------------------------------
.text:0000000000002A32
.text:0000000000002A32 loc_2A32:                               ; CODE XREF: main+240↑j
.text:0000000000002A32                 mov     [rsp+118h+var_108], 0FFFFFFFFFFFFFFFFh
.text:0000000000002A3B                 mov     [rsp+118h+var_110], 0
.text:0000000000002A44                 xor     r12d, r12d
.text:0000000000002A47
.text:0000000000002A47 loc_2A47:                               ; CODE XREF: main+2EC↑j
.text:0000000000002A47                 or      cs:conversions_mask, 800h
.text:0000000000002A51                 cmp     cs:input_blocksize, 0
.text:0000000000002A59                 jnz     short loc_2A66
.text:0000000000002A5B                 mov     cs:input_blocksize, 200h
.text:0000000000002A66
.text:0000000000002A66 loc_2A66:                               ; CODE XREF: main+BA9↑j
.text:0000000000002A66                 cmp     cs:output_blocksize, 0
.text:0000000000002A6E                 jnz     loc_21B0
.text:0000000000002A74                 mov     cs:output_blocksize, 200h
.text:0000000000002A7F                 jmp     loc_21B0
.text:0000000000002A84 ; ---------------------------------------------------------------------------
.text:0000000000002A84
.text:0000000000002A84 loc_2A84:                               ; CODE XREF: main+363↑j
.text:0000000000002A84                 xor     edx, edx
.text:0000000000002A86                 div     cs:input_blocksize
.text:0000000000002A8D                 mov     cs:skip_records, rax
.text:0000000000002A94                 mov     cs:skip_bytes, rdx
.text:0000000000002A9B                 jmp     loc_2219
.text:0000000000002AA0 ; ---------------------------------------------------------------------------
.text:0000000000002AA0
.text:0000000000002AA0 loc_2AA0:                               ; CODE XREF: main+3C0↑j
.text:0000000000002AA0                 cmp     cs:skip_records, 0
.text:0000000000002AA8                 jnz     short loc_2AF6
.text:0000000000002AAA                 mov     rax, cs:max_records
.text:0000000000002AB1                 sub     rax, 1
.text:0000000000002AB5                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000002AB9                 jbe     short loc_2AF6
.text:0000000000002ABB                 mov     eax, esi
.text:0000000000002ABD                 or      eax, ecx
.text:0000000000002ABF                 test    ah, 40h
.text:0000000000002AC2                 jnz     short loc_2AF6
.text:0000000000002AC4                 mov     cs:warn_partial_read, 0
.text:0000000000002ACB                 lea     rax, iread
.text:0000000000002AD2                 jmp     loc_2284
.text:0000000000002AD7 ; ---------------------------------------------------------------------------
.text:0000000000002AD7
.text:0000000000002AD7 loc_2AD7:                               ; CODE XREF: main+3A1↑j
.text:0000000000002AD7                 mov     rax, r12
.text:0000000000002ADA                 xor     edx, edx
.text:0000000000002ADC                 div     cs:output_blocksize
.text:0000000000002AE3                 mov     cs:seek_records, rax
.text:0000000000002AEA                 mov     cs:seek_bytes, rdx
.text:0000000000002AF1                 jmp     loc_2257
.text:0000000000002AF6 ; ---------------------------------------------------------------------------
.text:0000000000002AF6
.text:0000000000002AF6 loc_2AF6:                               ; CODE XREF: main+BF8↑j
.text:0000000000002AF6                                         ; main+C09↑j ...
.text:0000000000002AF6                 mov     cs:warn_partial_read, 1
.text:0000000000002AFD                 lea     rax, iread
.text:0000000000002B04                 jmp     loc_2284
.text:0000000000002B09 ; ---------------------------------------------------------------------------
.text:0000000000002B09
.text:0000000000002B09 loc_2B09:                               ; CODE XREF: main+725↑j
.text:0000000000002B09                                         ; main+748↑j
.text:0000000000002B09                 cmp     cs:status_level, 1
.text:0000000000002B10                 jz      loc_25FE
.text:0000000000002B16                 mov     rdx, cs:input_file
.text:0000000000002B1D                 xor     edi, edi
.text:0000000000002B1F                 mov     esi, 3
.text:0000000000002B24                 call    quotearg_n_style_colon
.text:0000000000002B29                 lea     rsi, msgid      ; "%s: cannot skip to specified offset"
.text:0000000000002B30                 mov     rbp, rax
.text:0000000000002B33                 xor     edi, edi        ; domainname
.text:0000000000002B35                 mov     edx, 5          ; category
.text:0000000000002B3A                 call    _dcgettext
.text:0000000000002B3F                 mov     rcx, rbp
.text:0000000000002B42                 mov     rdx, rax
.text:0000000000002B45                 xor     esi, esi
.text:0000000000002B47                 xor     edi, edi
.text:0000000000002B49                 xor     eax, eax
.text:0000000000002B4B                 call    nl_error
.text:0000000000002B50                 jmp     loc_25FE
.text:0000000000002B55 ; ---------------------------------------------------------------------------
.text:0000000000002B55
.text:0000000000002B55 loc_2B55:                               ; CODE XREF: main+B03↑j
.text:0000000000002B55                                         ; main+B19↑j
.text:0000000000002B55                 lea     rdx, aStatus    ; "status"
.text:0000000000002B5C                 mov     rax, r13
.text:0000000000002B5F                 mov     ecx, 73h ; 's'
.text:0000000000002B64                 nop     dword ptr [rax+00h]
.text:0000000000002B68
.text:0000000000002B68 loc_2B68:                               ; CODE XREF: main+CCE↓j
.text:0000000000002B68                 add     rax, 1
.text:0000000000002B6C                 add     rdx, 1
.text:0000000000002B70                 cmp     [rax-1], cl
.text:0000000000002B73                 jnz     loc_33B0
.text:0000000000002B79                 movzx   ecx, byte ptr [rdx]
.text:0000000000002B7C                 test    cl, cl
.text:0000000000002B7E                 jnz     short loc_2B68
.text:0000000000002B80                 movzx   eax, byte ptr [rax]
.text:0000000000002B83                 test    al, al
.text:0000000000002B85                 jnz     loc_33A8
.text:0000000000002B8B
.text:0000000000002B8B loc_2B8B:                               ; CODE XREF: main+14FA↓j
.text:0000000000002B8B                 lea     rcx, aInvalidStatusL ; "invalid status level"
.text:0000000000002B92                 lea     rsi, statuses   ; "none"
.text:0000000000002B99                 mov     edx, 1
.text:0000000000002B9E                 mov     rdi, r8         ; s
.text:0000000000002BA1                 call    parse_symbols
.text:0000000000002BA6                 mov     cs:status_level, eax
.text:0000000000002BAC                 jmp     loc_2190
.text:0000000000002BAC ; ---------------------------------------------------------------------------
.text:0000000000002BB1                 align 8
.text:0000000000002BB8
.text:0000000000002BB8 loc_2BB8:                               ; CODE XREF: main+D5B↓j
.text:0000000000002BB8                 call    write_output
.text:0000000000002BBD
.text:0000000000002BBD loc_2BBD:                               ; CODE XREF: main+D59↓j
.text:0000000000002BBD                 test    rbp, rbp
.text:0000000000002BC0                 jz      loc_26F0
.text:0000000000002BC6                 mov     rdi, cs:obuf
.text:0000000000002BCD
.text:0000000000002BCD loc_2BCD:                               ; CODE XREF: main+9AF↑j
.text:0000000000002BCD                 mov     r14, cs:output_blocksize
.text:0000000000002BD4                 mov     r13, cs:oc
.text:0000000000002BDB                 mov     rsi, r15        ; src
.text:0000000000002BDE                 mov     r12, r14
.text:0000000000002BE1                 sub     r12, r13
.text:0000000000002BE4                 cmp     r12, rbp
.text:0000000000002BE7                 cmova   r12, rbp
.text:0000000000002BEB                 add     rdi, r13        ; dest
.text:0000000000002BEE                 mov     rdx, r12        ; n
.text:0000000000002BF1                 sub     rbp, r12
.text:0000000000002BF4                 add     r15, r12
.text:0000000000002BF7                 add     r12, r13
.text:0000000000002BFA                 call    _memcpy
.text:0000000000002BFF                 cmp     r14, r12
.text:0000000000002C02                 mov     cs:oc, r12
.text:0000000000002C09                 ja      short loc_2BBD
.text:0000000000002C0B                 jmp     short loc_2BB8
.text:0000000000002C0B ; ---------------------------------------------------------------------------
.text:0000000000002C0D                 align 10h
.text:0000000000002C10
.text:0000000000002C10 loc_2C10:                               ; CODE XREF: main+8BF↑j
.text:0000000000002C10                 xor     edi, edi
.text:0000000000002C12                 mov     rdx, cs:input_blocksize
.text:0000000000002C19                 mov     rsi, rcx
.text:0000000000002C1C                 call    rax ; iread_fnc
.text:0000000000002C1E                 cmp     rax, 0
.text:0000000000002C22                 jg      loc_2789
.text:0000000000002C28
.text:0000000000002C28 loc_2C28:                               ; CODE XREF: main+8D3↑j
.text:0000000000002C28                 mov     esi, cs:conversions_mask
.text:0000000000002C2E                 jz      loc_3105
.text:0000000000002C34                 and     esi, 100h
.text:0000000000002C3A                 jz      short loc_2C45
.text:0000000000002C3C                 cmp     cs:status_level, 1
.text:0000000000002C43                 jz      short loc_2CA2
.text:0000000000002C45
.text:0000000000002C45 loc_2C45:                               ; CODE XREF: main+D8A↑j
.text:0000000000002C45                 mov     rsi, cs:input_file
.text:0000000000002C4C                 mov     edi, 4
.text:0000000000002C51                 call    quotearg_style
.text:0000000000002C56                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000002C5D                 xor     edi, edi        ; domainname
.text:0000000000002C5F                 mov     edx, 5          ; category
.text:0000000000002C64                 mov     rbp, rax
.text:0000000000002C67                 call    _dcgettext
.text:0000000000002C6C                 mov     rdx, rax
.text:0000000000002C6F                 mov     rax, [rsp+118h+var_108]
.text:0000000000002C74                 xor     edi, edi
.text:0000000000002C76                 mov     rcx, rbp
.text:0000000000002C79                 mov     esi, [rax]
.text:0000000000002C7B                 xor     eax, eax
.text:0000000000002C7D                 call    nl_error
.text:0000000000002C82                 mov     esi, cs:conversions_mask
.text:0000000000002C88                 test    esi, 100h
.text:0000000000002C8E                 jz      loc_37A5
.text:0000000000002C94                 cmp     cs:status_level, 1
.text:0000000000002C9B                 jz      short loc_2CA2
.text:0000000000002C9D                 call    print_stats_part_2
.text:0000000000002CA2
.text:0000000000002CA2 loc_2CA2:                               ; CODE XREF: main+D93↑j
.text:0000000000002CA2                                         ; main+DEB↑j
.text:0000000000002CA2                 mov     rbp, cs:input_blocksize
.text:0000000000002CA9                 sub     rbp, [rsp+118h+var_110]
.text:0000000000002CAE                 xor     edi, edi        ; fd
.text:0000000000002CB0                 mov     rsi, rbp
.text:0000000000002CB3                 call    invalidate_cache
.text:0000000000002CB8                 cmp     cs:input_seekable, 0
.text:0000000000002CBF                 jnz     loc_2E44
.text:0000000000002CC5                 mov     eax, cs:input_seek_errno
.text:0000000000002CCB                 cmp     eax, 1Dh
.text:0000000000002CCE                 jz      short loc_2D2F
.text:0000000000002CD0                 mov     rdi, [rsp+118h+var_108]
.text:0000000000002CD5                 mov     [rdi], eax
.text:0000000000002CD7
.text:0000000000002CD7 loc_2CD7:                               ; CODE XREF: main+1198↓j
.text:0000000000002CD7                                         ; main+11E0↓j ...
.text:0000000000002CD7                 mov     rdx, cs:input_file
.text:0000000000002CDE                 mov     esi, 3
.text:0000000000002CE3                 xor     edi, edi
.text:0000000000002CE5                 call    quotearg_n_style_colon
.text:0000000000002CEA                 lea     rsi, aSCannotSeek ; "%s: cannot seek"
.text:0000000000002CF1                 mov     edx, 5          ; category
.text:0000000000002CF6                 xor     edi, edi        ; domainname
.text:0000000000002CF8                 mov     rbp, rax
.text:0000000000002CFB                 call    _dcgettext
.text:0000000000002D00                 mov     rdx, rax
.text:0000000000002D03                 mov     rax, [rsp+118h+var_108]
.text:0000000000002D08                 mov     rcx, rbp
.text:0000000000002D0B                 xor     edi, edi
.text:0000000000002D0D                 mov     esi, [rax]
.text:0000000000002D0F                 xor     eax, eax
.text:0000000000002D11                 call    nl_error
.text:0000000000002D16
.text:0000000000002D16 loc_2D16:                               ; CODE XREF: main+FF2↓j
.text:0000000000002D16                 mov     cs:input_seekable, 0
.text:0000000000002D1D                 mov     cs:input_seek_errno, 1Dh
.text:0000000000002D27                 mov     dword ptr [rsp+118h+var_100], 1
.text:0000000000002D2F
.text:0000000000002D2F loc_2D2F:                               ; CODE XREF: main+E1E↑j
.text:0000000000002D2F                                         ; main+11A1↓j ...
.text:0000000000002D2F                 test    byte ptr cs:conversions_mask+1, 4
.text:0000000000002D36                 jz      loc_26F0
.text:0000000000002D3C                 cmp     [rsp+118h+var_110], 0
.text:0000000000002D42                 jnz     loc_26F0
.text:0000000000002D48                 mov     r12, cs:input_blocksize
.text:0000000000002D4F                 xor     ebp, ebp
.text:0000000000002D51                 cmp     r12, rbp
.text:0000000000002D54                 ja      loc_27CB
.text:0000000000002D5A                 nop     word ptr [rax+rax+00h]
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: main+915↑j
.text:0000000000002D60                 add     cs:r_full, 1
.text:0000000000002D68                 mov     [rsp+118h+var_110], 0
.text:0000000000002D71                 jmp     loc_2820
.text:0000000000002D76 ; ---------------------------------------------------------------------------
.text:0000000000002D76
.text:0000000000002D76 loc_2D76:                               ; CODE XREF: main+98E↑j
.text:0000000000002D76                 test    rbp, rbp
.text:0000000000002D79                 jz      loc_2844
.text:0000000000002D7F                 lea     rcx, [r15+rbp]
.text:0000000000002D83                 mov     rax, r15
.text:0000000000002D86                 db      2Eh
.text:0000000000002D86                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002D90
.text:0000000000002D90 loc_2D90:                               ; CODE XREF: main+EF1↓j
.text:0000000000002D90                 movzx   edx, byte ptr [rax]
.text:0000000000002D93                 add     rax, 1
.text:0000000000002D97                 movzx   edx, byte ptr [rbx+rdx]
.text:0000000000002D9B                 mov     [rax-1], dl
.text:0000000000002D9E                 cmp     rax, rcx
.text:0000000000002DA1                 jnz     short loc_2D90
.text:0000000000002DA3                 mov     ecx, cs:conversions_mask
.text:0000000000002DA9                 test    cl, 80h
.text:0000000000002DAC                 jz      loc_2853
.text:0000000000002DB2
.text:0000000000002DB2 loc_2DB2:                               ; CODE XREF: main+99D↑j
.text:0000000000002DB2                 cmp     cs:char_is_saved, 0
.text:0000000000002DB9                 jz      short loc_2DD4
.text:0000000000002DBB                 movzx   eax, cs:saved_char
.text:0000000000002DC2                 add     rbp, 1
.text:0000000000002DC6                 mov     cs:char_is_saved, 0
.text:0000000000002DCD                 sub     r15, 1
.text:0000000000002DD1                 mov     [r15], al
.text:0000000000002DD4
.text:0000000000002DD4 loc_2DD4:                               ; CODE XREF: main+F09↑j
.text:0000000000002DD4                 test    bpl, 1
.text:0000000000002DD8                 jz      short loc_2DF0
.text:0000000000002DDA                 sub     rbp, 1
.text:0000000000002DDE                 mov     cs:char_is_saved, 1
.text:0000000000002DE5                 movzx   eax, byte ptr [r15+rbp]
.text:0000000000002DEA                 mov     cs:saved_char, al
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: main+F28↑j
.text:0000000000002DF0                 mov     rdx, rbp
.text:0000000000002DF3                 lea     rax, [r15+rbp]
.text:0000000000002DF7                 shr     rdx, 1
.text:0000000000002DFA                 jz      short loc_2E18
.text:0000000000002DFC                 neg     rdx
.text:0000000000002DFF                 lea     rsi, [rax+rdx*2]
.text:0000000000002E03                 nop     dword ptr [rax+rax+00h]
.text:0000000000002E08
.text:0000000000002E08 loc_2E08:                               ; CODE XREF: main+F66↓j
.text:0000000000002E08                 movzx   edx, byte ptr [rax-2]
.text:0000000000002E0C                 sub     rax, 2
.text:0000000000002E10                 mov     [rax+2], dl
.text:0000000000002E13                 cmp     rax, rsi
.text:0000000000002E16                 jnz     short loc_2E08
.text:0000000000002E18
.text:0000000000002E18 loc_2E18:                               ; CODE XREF: main+F4A↑j
.text:0000000000002E18                 add     r15, 1
.text:0000000000002E1C                 test    cl, 8
.text:0000000000002E1F                 jz      loc_285C
.text:0000000000002E25
.text:0000000000002E25 loc_2E25:                               ; CODE XREF: main+9A6↑j
.text:0000000000002E25                 mov     rsi, rbp
.text:0000000000002E28                 mov     rdi, r15
.text:0000000000002E2B                 call    copy_with_block
.text:0000000000002E30                 jmp     loc_26F0
.text:0000000000002E35 ; ---------------------------------------------------------------------------
.text:0000000000002E35
.text:0000000000002E35 loc_2E35:                               ; CODE XREF: main+905↑j
.text:0000000000002E35                 mov     rsi, rax
.text:0000000000002E38                 xor     edi, edi        ; fd
.text:0000000000002E3A                 call    invalidate_cache
.text:0000000000002E3F                 jmp     loc_27BB
.text:0000000000002E44 ; ---------------------------------------------------------------------------
.text:0000000000002E44
.text:0000000000002E44 loc_2E44:                               ; CODE XREF: main+E0F↑j
.text:0000000000002E44                 xor     eax, eax
.text:0000000000002E46                 mov     r12, rbp
.text:0000000000002E49                 add     r12, cs:input_offset
.text:0000000000002E50                 setb    al
.text:0000000000002E53                 mov     cs:input_offset, r12
.text:0000000000002E5A                 test    rax, rax
.text:0000000000002E5D                 jz      loc_3024
.text:0000000000002E63                 mov     cs:input_offset_overflow, 1
.text:0000000000002E6A
.text:0000000000002E6A loc_2E6A:                               ; CODE XREF: main+1181↓j
.text:0000000000002E6A                 mov     rsi, cs:input_file
.text:0000000000002E71                 mov     edi, 4
.text:0000000000002E76                 call    quotearg_style
.text:0000000000002E7B                 lea     rsi, aOffsetOverflow ; "offset overflow while reading file %s"
.text:0000000000002E82                 mov     rbp, rax
.text:0000000000002E85                 xor     edi, edi        ; domainname
.text:0000000000002E87                 mov     edx, 5          ; category
.text:0000000000002E8C                 call    _dcgettext
.text:0000000000002E91                 mov     rcx, rbp
.text:0000000000002E94                 mov     rdx, rax
.text:0000000000002E97                 xor     esi, esi
.text:0000000000002E99                 xor     edi, edi
.text:0000000000002E9B                 xor     eax, eax
.text:0000000000002E9D                 call    nl_error
.text:0000000000002EA2                 jmp     loc_2D16
.text:0000000000002EA7 ; ---------------------------------------------------------------------------
.text:0000000000002EA7
.text:0000000000002EA7 loc_2EA7:                               ; CODE XREF: main+981↑j
.text:0000000000002EA7                 mov     rsi, rbp        ; offset
.text:0000000000002EAA                 mov     rdi, r15        ; s1
.text:0000000000002EAD                 call    iwrite_constprop_7
.text:0000000000002EB2                 add     cs:w_bytes, rax
.text:0000000000002EB9                 cmp     rax, rbp
.text:0000000000002EBC                 jz      loc_32E9
.text:0000000000002EC2
.text:0000000000002EC2 loc_2EC2:                               ; CODE XREF: main+17CB↓j
.text:0000000000002EC2                 mov     rsi, cs:output_file
.text:0000000000002EC9                 mov     edi, 4
.text:0000000000002ECE                 call    quotearg_style
.text:0000000000002ED3                 lea     rsi, aErrorWritingS ; "error writing %s"
.text:0000000000002EDA                 mov     rbx, rax
.text:0000000000002EDD                 mov     edx, 5          ; category
.text:0000000000002EE2
.text:0000000000002EE2 loc_2EE2:                               ; CODE XREF: main+134F↓j
.text:0000000000002EE2                                         ; main+1A22↓j
.text:0000000000002EE2                 xor     edi, edi        ; domainname
.text:0000000000002EE4                 call    _dcgettext
.text:0000000000002EE9                 mov     rdx, rax
.text:0000000000002EEC                 mov     rax, [rsp+118h+var_108]
.text:0000000000002EF1                 mov     rcx, rbx
.text:0000000000002EF4                 xor     edi, edi
.text:0000000000002EF6                 mov     esi, [rax]
.text:0000000000002EF8                 xor     eax, eax
.text:0000000000002EFA                 call    nl_error
.text:0000000000002EFF
.text:0000000000002EFF loc_2EFF:                               ; CODE XREF: main+18B2↓j
.text:0000000000002EFF                 mov     dword ptr [rsp+118h+var_100], 1
.text:0000000000002F07
.text:0000000000002F07 loc_2F07:                               ; CODE XREF: main+130D↓j
.text:0000000000002F07                                         ; main+1324↓j
.text:0000000000002F07                 cmp     cs:max_records, 0
.text:0000000000002F0F                 jz      loc_3261
.text:0000000000002F15
.text:0000000000002F15 loc_2F15:                               ; CODE XREF: main+13B9↓j
.text:0000000000002F15                 cmp     cs:i_nocache, 0
.text:0000000000002F1C                 jnz     short loc_2F27
.text:0000000000002F1E                 cmp     cs:i_nocache_eof, 0
.text:0000000000002F25                 jz      short loc_2F30
.text:0000000000002F27
.text:0000000000002F27 loc_2F27:                               ; CODE XREF: main+106C↑j
.text:0000000000002F27                 xor     esi, esi
.text:0000000000002F29                 xor     edi, edi        ; fd
.text:0000000000002F2B                 call    invalidate_cache
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: main+1075↑j
.text:0000000000002F30                 cmp     cs:o_nocache, 0
.text:0000000000002F37                 jnz     short loc_2F42
.text:0000000000002F39                 cmp     cs:o_nocache_eof, 0
.text:0000000000002F40                 jz      short loc_2F4E
.text:0000000000002F42
.text:0000000000002F42 loc_2F42:                               ; CODE XREF: main+1087↑j
.text:0000000000002F42                 xor     esi, esi
.text:0000000000002F44                 mov     edi, 1          ; fd
.text:0000000000002F49                 call    invalidate_cache
.text:0000000000002F4E
.text:0000000000002F4E loc_2F4E:                               ; CODE XREF: main+1090↑j
.text:0000000000002F4E                                         ; main+13D3↓j ...
.text:0000000000002F4E                 call    finish_up
.text:0000000000002F53                 mov     rbx, [rsp+118h+var_40]
.text:0000000000002F5B                 xor     rbx, fs:28h
.text:0000000000002F64                 mov     eax, dword ptr [rsp+118h+var_100]
.text:0000000000002F68                 jnz     loc_3BC7
.text:0000000000002F6E                 add     rsp, 0E8h
.text:0000000000002F75                 pop     rbx
.text:0000000000002F76                 pop     rbp
.text:0000000000002F77                 pop     r12
.text:0000000000002F79                 pop     r13
.text:0000000000002F7B                 pop     r14
.text:0000000000002F7D                 pop     r15
.text:0000000000002F7F                 retn
.text:0000000000002F80 ; ---------------------------------------------------------------------------
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: main+545↑j
.text:0000000000002F80                 and     bpl, 4
.text:0000000000002F84                 jz      loc_2438
.text:0000000000002F8A                 lea     rax, trans_table
.text:0000000000002F91                 lea     rcx, ascii_to_ibm
.text:0000000000002F98                 lea     rsi, [rax+100h]
.text:0000000000002F9F                 nop
.text:0000000000002FA0
.text:0000000000002FA0 loc_2FA0:                               ; CODE XREF: main+1101↓j
.text:0000000000002FA0                 movzx   edx, byte ptr [rax]
.text:0000000000002FA3                 add     rax, 1
.text:0000000000002FA7                 movzx   edx, byte ptr [rcx+rdx]
.text:0000000000002FAB                 mov     [rax-1], dl
.text:0000000000002FAE                 cmp     rsi, rax
.text:0000000000002FB1                 jnz     short loc_2FA0
.text:0000000000002FB3                 jmp     loc_2423
.text:0000000000002FB8 ; ---------------------------------------------------------------------------
.text:0000000000002FB8
.text:0000000000002FB8 loc_2FB8:                               ; CODE XREF: main+506↑j
.text:0000000000002FB8                 test    bpl, 20h
.text:0000000000002FBC                 jz      loc_23F1
.text:0000000000002FC2                 call    ___ctype_tolower_loc
.text:0000000000002FC7                 mov     rsi, [rax]
.text:0000000000002FCA                 lea     rax, trans_table
.text:0000000000002FD1                 lea     rcx, [rax+100h]
.text:0000000000002FD8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: main+1140↓j
.text:0000000000002FE0                 movzx   edx, byte ptr [rax]
.text:0000000000002FE3                 add     rax, 1
.text:0000000000002FE7                 mov     edx, [rsi+rdx*4]
.text:0000000000002FEA                 mov     [rax-1], dl
.text:0000000000002FED                 cmp     rcx, rax
.text:0000000000002FF0                 jnz     short loc_2FE0
.text:0000000000002FF2                 jmp     loc_23EA
.text:0000000000002FF7 ; ---------------------------------------------------------------------------
.text:0000000000002FF7
.text:0000000000002FF7 loc_2FF7:                               ; CODE XREF: main+93C↑j
.text:0000000000002FF7                 mov     [rsp+118h+var_110], rbp
.text:0000000000002FFC                 mov     rbp, r12
.text:0000000000002FFF                 jmp     loc_2820
.text:0000000000003004 ; ---------------------------------------------------------------------------
.text:0000000000003004
.text:0000000000003004 loc_3004:                               ; CODE XREF: main+3B8↑j
.text:0000000000003004                 test    eax, eax
.text:0000000000003006                 lea     rdx, iread_fullblock
.text:000000000000300D                 lea     rax, iread
.text:0000000000003014                 mov     cs:warn_partial_read, 0
.text:000000000000301B                 cmovnz  rax, rdx
.text:000000000000301F                 jmp     loc_2284
.text:0000000000003024 ; ---------------------------------------------------------------------------
.text:0000000000003024
.text:0000000000003024 loc_3024:                               ; CODE XREF: main+FAD↑j
.text:0000000000003024                 mov     rax, r12
.text:0000000000003027                 shr     rax, 3Fh
.text:000000000000302B                 or      cs:input_offset_overflow, al
.text:0000000000003031                 jnz     loc_2E6A
.text:0000000000003037                 xor     esi, esi        ; offset
.text:0000000000003039                 xor     edi, edi        ; fd
.text:000000000000303B                 mov     edx, 1          ; whence
.text:0000000000003040                 call    _lseek
.text:0000000000003045                 test    rax, rax
.text:0000000000003048                 js      loc_2CD7
.text:000000000000304E                 cmp     r12, rax
.text:0000000000003051                 jz      loc_2D2F
.text:0000000000003057                 sub     r12, rax
.text:000000000000305A                 js      loc_3547
.text:0000000000003060                 cmp     rbp, r12
.text:0000000000003063                 jb      loc_3547
.text:0000000000003069
.text:0000000000003069 loc_3069:                               ; CODE XREF: main+169E↓j
.text:0000000000003069                                         ; main+16C5↓j
.text:0000000000003069                 mov     rdi, cs:input_file
.text:0000000000003070                 xor     esi, esi
.text:0000000000003072                 mov     ecx, 1
.text:0000000000003077                 mov     rdx, r12
.text:000000000000307A                 call    skip_via_lseek
.text:000000000000307F                 test    rax, rax
.text:0000000000003082                 jns     loc_2D2F
.text:0000000000003088                 mov     rax, [rsp+118h+var_108]
.text:000000000000308D                 cmp     dword ptr [rax], 0
.text:0000000000003090                 jnz     loc_2CD7
.text:0000000000003096                 lea     rsi, aCannotWorkArou ; "cannot work around kernel bug after all"
.text:000000000000309D                 xor     edi, edi        ; domainname
.text:000000000000309F                 mov     edx, 5          ; category
.text:00000000000030A4                 call    _dcgettext
.text:00000000000030A9                 xor     esi, esi
.text:00000000000030AB                 mov     rdx, rax
.text:00000000000030AE                 xor     edi, edi
.text:00000000000030B0                 xor     eax, eax
.text:00000000000030B2                 call    nl_error
.text:00000000000030B7                 jmp     loc_2CD7
.text:00000000000030BC ; ---------------------------------------------------------------------------
.text:00000000000030BC
.text:00000000000030BC loc_30BC:                               ; CODE XREF: main+63E↑j
.text:00000000000030BC                 mov     edx, ebp
.text:00000000000030BE                 mov     ecx, 1B6h
.text:00000000000030C3                 mov     edi, 1          ; fd2
.text:00000000000030C8                 or      edx, 2          ; oflag
.text:00000000000030CB                 call    ifd_reopen
.text:00000000000030D0                 test    eax, eax
.text:00000000000030D2                 jns     loc_2521
.text:00000000000030D8                 mov     rsi, cs:output_file
.text:00000000000030DF                 jmp     loc_2505
.text:00000000000030E4 ; ---------------------------------------------------------------------------
.text:00000000000030E4
.text:00000000000030E4 loc_30E4:                               ; CODE XREF: main+792↑j
.text:00000000000030E4                 mov     rdx, [rsp+118h+n] ; n
.text:00000000000030E9                 test    rdx, rdx
.text:00000000000030EC                 jz      loc_26AA
.text:00000000000030F2                 mov     rdi, cs:obuf    ; s
.text:00000000000030F9                 xor     esi, esi        ; c
.text:00000000000030FB                 call    _memset
.text:0000000000003100                 jmp     loc_268D
.text:0000000000003105 ; ---------------------------------------------------------------------------
.text:0000000000003105
.text:0000000000003105 loc_3105:                               ; CODE XREF: main+D7E↑j
.text:0000000000003105                 movzx   eax, cs:i_nocache
.text:000000000000310C                 or      cs:i_nocache_eof, al
.text:0000000000003112                 cmp     cs:o_nocache, 0
.text:0000000000003119                 movzx   eax, cs:o_nocache_eof
.text:0000000000003120                 jz      short loc_3131
.text:0000000000003122                 xor     ebx, ebx
.text:0000000000003124                 test    esi, 200h
.text:000000000000312A                 setz    bl
.text:000000000000312D                 mov     dword ptr [rsp+118h+var_F0], ebx
.text:0000000000003131
.text:0000000000003131 loc_3131:                               ; CODE XREF: main+1270↑j
.text:0000000000003131                 or      eax, dword ptr [rsp+118h+var_F0]
.text:0000000000003135                 mov     cs:o_nocache_eof, al
.text:000000000000313B                 and     cs:o_nocache_eof, 1
.text:0000000000003142
.text:0000000000003142 loc_3142:                               ; CODE XREF: main+87D↑j
.text:0000000000003142                                         ; main+18FD↓j
.text:0000000000003142                 cmp     cs:char_is_saved, 0
.text:0000000000003149                 jz      loc_320F
.text:000000000000314F                 test    sil, 8
.text:0000000000003153                 jnz     loc_37DF
.text:0000000000003159                 and     sil, 10h
.text:000000000000315D                 jnz     loc_37FB
.text:0000000000003163                 mov     rax, cs:oc
.text:000000000000316A                 movzx   ecx, cs:saved_char
.text:0000000000003171                 mov     rdx, cs:obuf
.text:0000000000003178                 lea     rsi, [rax+1]    ; offset
.text:000000000000317C                 cmp     rsi, cs:output_blocksize
.text:0000000000003183                 mov     [rdx+rax], cl
.text:0000000000003186                 mov     cs:oc, rsi
.text:000000000000318D                 jnb     short loc_3204
.text:000000000000318F
.text:000000000000318F loc_318F:                               ; CODE XREF: main+1380↓j
.text:000000000000318F                                         ; main+14AF↓j ...
.text:000000000000318F                 test    rsi, rsi
.text:0000000000003192                 jnz     loc_364E
.text:0000000000003198
.text:0000000000003198 loc_3198:                               ; CODE XREF: main+17C5↓j
.text:0000000000003198                 cmp     cs:final_op_was_seek, 0
.text:000000000000319F                 jnz     loc_36BA
.text:00000000000031A5
.text:00000000000031A5 loc_31A5:                               ; CODE XREF: main+1834↓j
.text:00000000000031A5                                         ; main+1851↓j ...
.text:00000000000031A5                 mov     esi, cs:conversions_mask
.text:00000000000031AB                 test    esi, 4000h
.text:00000000000031B1                 jnz     loc_3680
.text:00000000000031B7
.text:00000000000031B7 loc_31B7:                               ; CODE XREF: main+1805↓j
.text:00000000000031B7                 and     esi, 8000h
.text:00000000000031BD                 jz      loc_2F07
.text:00000000000031C3                 mov     rbx, [rsp+118h+var_108]
.text:00000000000031C8
.text:00000000000031C8 loc_31C8:                               ; CODE XREF: main+132D↓j
.text:00000000000031C8                 mov     edi, 1          ; fd
.text:00000000000031CD                 call    _fsync
.text:00000000000031D2                 test    eax, eax
.text:00000000000031D4                 jz      loc_2F07
.text:00000000000031DA                 cmp     dword ptr [rbx], 4
.text:00000000000031DD                 jz      short loc_31C8
.text:00000000000031DF                 mov     rsi, cs:output_file
.text:00000000000031E6                 mov     edi, 4
.text:00000000000031EB                 call    quotearg_style
.text:00000000000031F0                 mov     edx, 5
.text:00000000000031F5                 mov     rbx, rax
.text:00000000000031F8                 lea     rsi, aFsyncFailedFor ; "fsync failed for %s"
.text:00000000000031FF                 jmp     loc_2EE2
.text:0000000000003204 ; ---------------------------------------------------------------------------
.text:0000000000003204
.text:0000000000003204 loc_3204:                               ; CODE XREF: main+12DD↑j
.text:0000000000003204                 call    write_output
.text:0000000000003209                 mov     esi, cs:conversions_mask
.text:000000000000320F
.text:000000000000320F loc_320F:                               ; CODE XREF: main+1299↑j
.text:000000000000320F                                         ; main+1946↓j ...
.text:000000000000320F                 and     sil, 8
.text:0000000000003213                 jz      loc_3350
.text:0000000000003219                 mov     rbx, cs:col
.text:0000000000003220                 test    rbx, rbx
.text:0000000000003223                 jnz     loc_333E
.text:0000000000003229
.text:0000000000003229 loc_3229:                               ; CODE XREF: main+14F3↓j
.text:0000000000003229                 mov     rsi, cs:oc
.text:0000000000003230                 jmp     loc_318F
.text:0000000000003235 ; ---------------------------------------------------------------------------
.text:0000000000003235
.text:0000000000003235 loc_3235:                               ; CODE XREF: main+5A3↑j
.text:0000000000003235                 lea     rsi, aStandardInput ; "standard input"
.text:000000000000323C                 xor     edi, edi        ; domainname
.text:000000000000323E                 mov     edx, 5          ; category
.text:0000000000003243                 call    _dcgettext
.text:0000000000003248                 mov     esi, r12d
.text:000000000000324B                 mov     rdx, rax
.text:000000000000324E                 xor     edi, edi        ; fd
.text:0000000000003250                 mov     cs:input_file, rax
.text:0000000000003257                 call    set_fd_flags
.text:000000000000325C                 jmp     loc_2470
.text:0000000000003261 ; ---------------------------------------------------------------------------
.text:0000000000003261
.text:0000000000003261 loc_3261:                               ; CODE XREF: main+105F↑j
.text:0000000000003261                 cmp     cs:max_bytes, 0
.text:0000000000003269                 jnz     loc_2F15
.text:000000000000326F
.text:000000000000326F loc_326F:                               ; CODE XREF: main+145B↓j
.text:000000000000326F                 cmp     cs:i_nocache, 0
.text:0000000000003276                 jnz     loc_3463
.text:000000000000327C
.text:000000000000327C loc_327C:                               ; CODE XREF: main+15BE↓j
.text:000000000000327C                                         ; main+160B↓j
.text:000000000000327C                 cmp     cs:o_nocache, 0
.text:0000000000003283                 jz      loc_2F4E
.text:0000000000003289                 xor     esi, esi
.text:000000000000328B                 mov     edi, 1          ; fd
.text:0000000000003290                 call    invalidate_cache
.text:0000000000003295                 test    al, al
.text:0000000000003297                 jnz     loc_2F4E
.text:000000000000329D                 mov     rdx, cs:output_file
.text:00000000000032A4                 mov     esi, 3
.text:00000000000032A9                 xor     edi, edi
.text:00000000000032AB                 call    quotearg_n_style_colon
.text:00000000000032B0                 lea     rsi, aFailedToDiscar ; "failed to discard cache for: %s"
.text:00000000000032B7                 mov     edx, 5          ; category
.text:00000000000032BC                 xor     edi, edi        ; domainname
.text:00000000000032BE                 mov     rbx, rax
.text:00000000000032C1                 call    _dcgettext
.text:00000000000032C6                 mov     rdx, rax
.text:00000000000032C9                 mov     rax, [rsp+118h+var_108]
.text:00000000000032CE                 mov     rcx, rbx
.text:00000000000032D1                 xor     edi, edi
.text:00000000000032D3                 mov     esi, [rax]
.text:00000000000032D5                 xor     eax, eax
.text:00000000000032D7                 call    nl_error
.text:00000000000032DC                 mov     dword ptr [rsp+118h+var_100], 1
.text:00000000000032E4                 jmp     loc_2F4E
.text:00000000000032E9 ; ---------------------------------------------------------------------------
.text:00000000000032E9
.text:00000000000032E9 loc_32E9:                               ; CODE XREF: main+100C↑j
.text:00000000000032E9                 cmp     cs:input_blocksize, rbp
.text:00000000000032F0                 jz      loc_34C0
.text:00000000000032F6                 add     cs:w_partial, 1
.text:00000000000032FE                 jmp     loc_26F0
.text:0000000000003303 ; ---------------------------------------------------------------------------
.text:0000000000003303
.text:0000000000003303 loc_3303:                               ; CODE XREF: main+80C↑j
.text:0000000000003303                 mov     dword ptr [rsp+118h+var_100], 0
.text:000000000000330B                 jmp     loc_326F
.text:0000000000003310 ; ---------------------------------------------------------------------------
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: main+149C↓j
.text:0000000000003310                 lea     rax, [rsi+1]
.text:0000000000003314                 movzx   ecx, cs:space_character
.text:000000000000331B                 cmp     rax, cs:output_blocksize
.text:0000000000003322                 mov     rdx, cs:obuf
.text:0000000000003329                 mov     cs:oc, rax
.text:0000000000003330                 mov     [rdx+rsi], cl
.text:0000000000003333                 jb      short loc_333A
.text:0000000000003335                 call    write_output
.text:000000000000333A
.text:000000000000333A loc_333A:                               ; CODE XREF: main+1483↑j
.text:000000000000333A                 add     rbx, 1
.text:000000000000333E
.text:000000000000333E loc_333E:                               ; CODE XREF: main+1373↑j
.text:000000000000333E                 cmp     rbx, cs:conversion_blocksize
.text:0000000000003345                 mov     rsi, cs:oc
.text:000000000000334C                 jb      short loc_3310
.text:000000000000334E                 jmp     short loc_3357
.text:0000000000003350 ; ---------------------------------------------------------------------------
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: main+1363↑j
.text:0000000000003350                 mov     rsi, cs:oc
.text:0000000000003357
.text:0000000000003357 loc_3357:                               ; CODE XREF: main+149E↑j
.text:0000000000003357                 cmp     cs:col, 0
.text:000000000000335F                 jz      loc_318F
.text:0000000000003365                 test    byte ptr cs:conversions_mask, 10h
.text:000000000000336C                 jz      loc_318F
.text:0000000000003372                 lea     rax, [rsi+1]
.text:0000000000003376                 movzx   ecx, cs:newline_character
.text:000000000000337D                 cmp     rax, cs:output_blocksize
.text:0000000000003384                 mov     rdx, cs:obuf
.text:000000000000338B                 mov     cs:oc, rax
.text:0000000000003392                 mov     [rdx+rsi], cl
.text:0000000000003395                 mov     rsi, rax
.text:0000000000003398                 jb      loc_318F
.text:000000000000339E                 call    write_output
.text:00000000000033A3                 jmp     loc_3229
.text:00000000000033A8 ; ---------------------------------------------------------------------------
.text:00000000000033A8
.text:00000000000033A8 loc_33A8:                               ; CODE XREF: main+CD5↑j
.text:00000000000033A8                 cmp     al, 3Dh ; '='
.text:00000000000033AA                 jz      loc_2B8B
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: main+CC3↑j
.text:00000000000033B0                 mov     rsi, [rsp+118h+var_100]
.text:00000000000033B5                 mov     rdi, r8
.text:00000000000033B8                 mov     [rsp+118h+var_F0], r8
.text:00000000000033BD                 mov     dword ptr [rsp+118h+n], 0
.text:00000000000033C5                 call    parse_integer
.text:00000000000033CA                 mov     rdx, r13
.text:00000000000033CD                 mov     esi, 69h ; 'i'
.text:00000000000033D2                 lea     rcx, aIbs       ; "ibs"
.text:00000000000033D9                 mov     r8, [rsp+118h+var_F0]
.text:00000000000033DE                 jmp     short loc_33EC
.text:00000000000033E0 ; ---------------------------------------------------------------------------
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: main+1548↓j
.text:00000000000033E0                 movzx   esi, byte ptr [rcx]
.text:00000000000033E3                 test    sil, sil
.text:00000000000033E6                 jz      loc_3767
.text:00000000000033EC
.text:00000000000033EC loc_33EC:                               ; CODE XREF: main+152E↑j
.text:00000000000033EC                 add     rdx, 1
.text:00000000000033F0                 add     rcx, 1
.text:00000000000033F4                 cmp     [rdx-1], sil
.text:00000000000033F8                 jz      short loc_33E0
.text:00000000000033FA
.text:00000000000033FA loc_33FA:                               ; CODE XREF: main+18C1↓j
.text:00000000000033FA                 lea     rcx, aObs       ; "obs"
.text:0000000000003401                 mov     rdx, r13
.text:0000000000003404                 mov     esi, 6Fh ; 'o'
.text:0000000000003409
.text:0000000000003409 loc_3409:                               ; CODE XREF: main+156D↓j
.text:0000000000003409                 add     rdx, 1
.text:000000000000340D                 add     rcx, 1
.text:0000000000003411                 cmp     [rdx-1], sil
.text:0000000000003415                 jnz     short loc_3433
.text:0000000000003417                 movzx   esi, byte ptr [rcx]
.text:000000000000341A                 test    sil, sil
.text:000000000000341D                 jnz     short loc_3409
.text:000000000000341F                 movzx   edx, byte ptr [rdx]
.text:0000000000003422                 test    dl, dl
.text:0000000000003424                 jz      loc_35BF
.text:000000000000342A                 cmp     dl, 3Dh ; '='
.text:000000000000342D                 jz      loc_35BF
.text:0000000000003433
.text:0000000000003433 loc_3433:                               ; CODE XREF: main+1565↑j
.text:0000000000003433                 mov     rdx, r13
.text:0000000000003436                 mov     esi, 62h ; 'b'
.text:000000000000343B                 lea     rcx, aCbs+1     ; "bs"
.text:0000000000003442                 jmp     short loc_3450
.text:0000000000003444 ; ---------------------------------------------------------------------------
.text:0000000000003444
.text:0000000000003444 loc_3444:                               ; CODE XREF: main+15AC↓j
.text:0000000000003444                 movzx   esi, byte ptr [rcx]
.text:0000000000003447                 test    sil, sil
.text:000000000000344A                 jz      loc_39A6
.text:0000000000003450
.text:0000000000003450 loc_3450:                               ; CODE XREF: main+1592↑j
.text:0000000000003450                 add     rdx, 1
.text:0000000000003454                 add     rcx, 1
.text:0000000000003458                 cmp     [rdx-1], sil
.text:000000000000345C                 jz      short loc_3444
.text:000000000000345E                 jmp     loc_39B2
.text:0000000000003463 ; ---------------------------------------------------------------------------
.text:0000000000003463
.text:0000000000003463 loc_3463:                               ; CODE XREF: main+13C6↑j
.text:0000000000003463                 xor     esi, esi
.text:0000000000003465                 xor     edi, edi        ; fd
.text:0000000000003467                 call    invalidate_cache
.text:000000000000346C                 test    al, al
.text:000000000000346E                 jnz     loc_327C
.text:0000000000003474                 mov     rdx, cs:input_file
.text:000000000000347B                 mov     esi, 3
.text:0000000000003480                 xor     edi, edi
.text:0000000000003482                 call    quotearg_n_style_colon
.text:0000000000003487                 lea     rsi, aFailedToDiscar ; "failed to discard cache for: %s"
.text:000000000000348E                 mov     edx, 5          ; category
.text:0000000000003493                 xor     edi, edi        ; domainname
.text:0000000000003495                 mov     rbx, rax
.text:0000000000003498                 call    _dcgettext
.text:000000000000349D                 mov     rdx, rax
.text:00000000000034A0                 mov     rax, [rsp+118h+var_108]
.text:00000000000034A5                 mov     rcx, rbx
.text:00000000000034A8                 xor     edi, edi
.text:00000000000034AA                 mov     esi, [rax]
.text:00000000000034AC                 xor     eax, eax
.text:00000000000034AE                 call    nl_error
.text:00000000000034B3                 mov     dword ptr [rsp+118h+var_100], 1
.text:00000000000034BB                 jmp     loc_327C
.text:00000000000034C0 ; ---------------------------------------------------------------------------
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: main+1440↑j
.text:00000000000034C0                 add     cs:w_full, 1
.text:00000000000034C8                 jmp     loc_26F0
.text:00000000000034CD ; ---------------------------------------------------------------------------
.text:00000000000034CD
.text:00000000000034CD loc_34CD:                               ; CODE XREF: main+6BD↑j
.text:00000000000034CD                 mov     rax, [rsp+118h+var_108]
.text:00000000000034D2                 mov     rdx, [rsp+118h+act] ; stat_buf
.text:00000000000034D7                 mov     esi, 1          ; fildes
.text:00000000000034DC                 mov     edi, 1          ; ver
.text:00000000000034E1                 mov     ebp, [rax]
.text:00000000000034E3                 call    ___fxstat
.text:00000000000034E8                 test    eax, eax
.text:00000000000034EA                 jnz     loc_3B43
.text:00000000000034F0                 mov     eax, dword ptr [rsp+118h+var_C0]
.text:00000000000034F4                 and     eax, 0F000h
.text:00000000000034F9                 sub     eax, 4000h
.text:00000000000034FE                 test    eax, 0FFFFB000h
.text:0000000000003503                 jnz     loc_2573
.text:0000000000003509                 mov     rsi, cs:output_file
.text:0000000000003510                 mov     edi, 4
.text:0000000000003515                 call    quotearg_style
.text:000000000000351A                 lea     rsi, aFailedToTrunca ; "failed to truncate to %lu bytes in outp"...
.text:0000000000003521                 mov     rbx, rax
.text:0000000000003524                 mov     edx, 5          ; category
.text:0000000000003529                 xor     edi, edi        ; domainname
.text:000000000000352B                 call    _dcgettext
.text:0000000000003530                 mov     r8, rbx
.text:0000000000003533                 mov     rdx, rax
.text:0000000000003536                 mov     rcx, r12
.text:0000000000003539                 mov     esi, ebp
.text:000000000000353B                 mov     edi, 1
.text:0000000000003540                 xor     eax, eax
.text:0000000000003542                 call    nl_error
.text:0000000000003547
.text:0000000000003547 loc_3547:                               ; CODE XREF: main+11AA↑j
.text:0000000000003547                                         ; main+11B3↑j
.text:0000000000003547                 cmp     cs:status_level, 1
.text:000000000000354E                 jz      loc_3069
.text:0000000000003554                 lea     rsi, aWarningInvalid ; "warning: invalid file offset after fail"...
.text:000000000000355B                 xor     edi, edi        ; domainname
.text:000000000000355D                 mov     edx, 5          ; category
.text:0000000000003562                 call    _dcgettext
.text:0000000000003567                 xor     esi, esi
.text:0000000000003569                 mov     rdx, rax
.text:000000000000356C                 xor     edi, edi
.text:000000000000356E                 xor     eax, eax
.text:0000000000003570                 call    nl_error
.text:0000000000003575                 jmp     loc_3069
.text:000000000000357A ; ---------------------------------------------------------------------------
.text:000000000000357A
.text:000000000000357A loc_357A:                               ; CODE XREF: main+48↑j
.text:000000000000357A                 lea     rdi, caught_signals ; set
.text:0000000000003581                 mov     esi, 0Ah        ; signo
.text:0000000000003586                 call    _sigaddset
.text:000000000000358B                 jmp     loc_1EFE
.text:0000000000003590 ; ---------------------------------------------------------------------------
.text:0000000000003590
.text:0000000000003590 loc_3590:                               ; CODE XREF: main+60F↑j
.text:0000000000003590                 lea     rsi, aStandardOutput ; "standard output"
.text:0000000000003597                 xor     edi, edi        ; domainname
.text:0000000000003599                 mov     edx, 5          ; category
.text:000000000000359E                 call    _dcgettext
.text:00000000000035A3                 mov     esi, r12d
.text:00000000000035A6                 mov     rdx, rax
.text:00000000000035A9                 mov     edi, 1          ; fd
.text:00000000000035AE                 mov     cs:output_file, rax
.text:00000000000035B5                 call    set_fd_flags
.text:00000000000035BA                 jmp     loc_2573
.text:00000000000035BF ; ---------------------------------------------------------------------------
.text:00000000000035BF
.text:00000000000035BF loc_35BF:                               ; CODE XREF: main+1574↑j
.text:00000000000035BF                                         ; main+157D↑j
.text:00000000000035BF                 mov     rdx, cs:page_size
.text:00000000000035C6                 mov     rdi, 7FFFFFFFFFFFFFFFh
.text:00000000000035D0                 mov     cs:output_blocksize, rax
.text:00000000000035D7                 neg     rdx
.text:00000000000035DA                 cmp     rdx, rdi
.text:00000000000035DD                 cmova   rdx, rdi
.text:00000000000035E1
.text:00000000000035E1 loc_35E1:                               ; CODE XREF: main+18F0↓j
.text:00000000000035E1                                         ; main+1B82↓j
.text:00000000000035E1                 test    rax, rax
.text:00000000000035E4                 jz      loc_37D2
.text:00000000000035EA                 cmp     rax, rdx
.text:00000000000035ED                 jbe     loc_38A2
.text:00000000000035F3                 mov     dword ptr [rsp+118h+n], 1
.text:00000000000035FB
.text:00000000000035FB loc_35FB:                               ; CODE XREF: main+192A↓j
.text:00000000000035FB                                         ; main+19FD↓j
.text:00000000000035FB                 mov     rdi, r8
.text:00000000000035FE                 call    quote
.text:0000000000003603                 lea     rsi, aInvalidNumber ; "invalid number"
.text:000000000000360A                 xor     edi, edi        ; domainname
.text:000000000000360C                 mov     edx, 5          ; category
.text:0000000000003611                 mov     rbx, rax
.text:0000000000003614                 call    _dcgettext
.text:0000000000003619                 cmp     dword ptr [rsp+118h+n], 1
.text:000000000000361E                 mov     edx, 0
.text:0000000000003623                 mov     esi, 4Bh ; 'K'
.text:0000000000003628                 mov     rcx, rax
.text:000000000000362B                 mov     r8, rbx
.text:000000000000362E                 mov     edi, 1
.text:0000000000003633                 cmovnz  esi, edx
.text:0000000000003636                 lea     rdx, format     ; "%s: %s"
.text:000000000000363D                 xor     eax, eax
.text:000000000000363F                 call    nl_error
.text:0000000000003644
.text:0000000000003644 loc_3644:                               ; CODE XREF: main+81A↑j
.text:0000000000003644                 call    alloc_ibuf_part_4
.text:0000000000003649                 jmp     loc_26D0
.text:000000000000364E ; ---------------------------------------------------------------------------
.text:000000000000364E
.text:000000000000364E loc_364E:                               ; CODE XREF: main+12E2↑j
.text:000000000000364E                 mov     rdi, cs:obuf    ; s1
.text:0000000000003655                 call    iwrite_constprop_7
.text:000000000000365A                 add     cs:w_bytes, rax
.text:0000000000003661                 test    rax, rax
.text:0000000000003664                 jz      short loc_366E
.text:0000000000003666                 add     cs:w_partial, 1
.text:000000000000366E
.text:000000000000366E loc_366E:                               ; CODE XREF: main+17B4↑j
.text:000000000000366E                 cmp     rax, cs:oc
.text:0000000000003675                 jz      loc_3198
.text:000000000000367B                 jmp     loc_2EC2
.text:0000000000003680 ; ---------------------------------------------------------------------------
.text:0000000000003680
.text:0000000000003680 loc_3680:                               ; CODE XREF: main+1301↑j
.text:0000000000003680                 mov     edi, 1          ; fildes
.text:0000000000003685                 call    _fdatasync
.text:000000000000368A                 test    eax, eax
.text:000000000000368C                 jz      short loc_36AF
.text:000000000000368E                 mov     rax, [rsp+118h+var_108]
.text:0000000000003693                 mov     eax, [rax]
.text:0000000000003695                 mov     dword ptr [rsp+118h+var_110], eax
.text:0000000000003699                 sub     eax, 16h
.text:000000000000369C                 and     eax, 0FFFFFFEFh
.text:000000000000369F                 jnz     loc_38D7
.text:00000000000036A5
.text:00000000000036A5 loc_36A5:                               ; CODE XREF: main+1A6C↓j
.text:00000000000036A5                 or      cs:conversions_mask, 8000h
.text:00000000000036AF
.text:00000000000036AF loc_36AF:                               ; CODE XREF: main+17DC↑j
.text:00000000000036AF                 mov     esi, cs:conversions_mask
.text:00000000000036B5                 jmp     loc_31B7
.text:00000000000036BA ; ---------------------------------------------------------------------------
.text:00000000000036BA
.text:00000000000036BA loc_36BA:                               ; CODE XREF: main+12EF↑j
.text:00000000000036BA                 mov     rdx, [rsp+118h+act] ; stat_buf
.text:00000000000036BF                 mov     esi, 1          ; fildes
.text:00000000000036C4                 mov     edi, 1          ; ver
.text:00000000000036C9                 call    ___fxstat
.text:00000000000036CE                 test    eax, eax
.text:00000000000036D0                 jnz     loc_38B2
.text:00000000000036D6                 mov     eax, dword ptr [rsp+118h+var_C0]
.text:00000000000036DA                 and     eax, 0F000h
.text:00000000000036DF                 cmp     eax, 8000h
.text:00000000000036E4                 jnz     loc_31A5
.text:00000000000036EA                 xor     esi, esi        ; offset
.text:00000000000036EC                 mov     edx, 1          ; whence
.text:00000000000036F1                 mov     edi, 1          ; fd
.text:00000000000036F6                 call    _lseek
.text:00000000000036FB                 test    rax, rax
.text:00000000000036FE                 mov     rbx, rax
.text:0000000000003701                 js      loc_31A5
.text:0000000000003707                 cmp     rax, qword ptr [rsp+118h+var_B0+8]
.text:000000000000370C                 jle     loc_31A5
.text:0000000000003712                 mov     rdi, rax        ; length
.text:0000000000003715                 call    iftruncate_constprop_6
.text:000000000000371A                 test    eax, eax
.text:000000000000371C                 jz      loc_31A5
.text:0000000000003722                 mov     rsi, cs:output_file
.text:0000000000003729                 mov     edi, 4
.text:000000000000372E                 call    quotearg_style
.text:0000000000003733                 lea     rsi, aFailedToTrunca_0 ; "failed to truncate to %ld bytes in outp"...
.text:000000000000373A                 xor     edi, edi        ; domainname
.text:000000000000373C                 mov     edx, 5          ; category
.text:0000000000003741                 mov     rbp, rax
.text:0000000000003744                 call    _dcgettext
.text:0000000000003749                 mov     rdx, rax
.text:000000000000374C                 mov     rax, [rsp+118h+var_108]
.text:0000000000003751                 mov     r8, rbp
.text:0000000000003754                 mov     rcx, rbx
.text:0000000000003757                 xor     edi, edi
.text:0000000000003759                 mov     esi, [rax]
.text:000000000000375B                 xor     eax, eax
.text:000000000000375D                 call    nl_error
.text:0000000000003762                 jmp     loc_2EFF
.text:0000000000003767 ; ---------------------------------------------------------------------------
.text:0000000000003767
.text:0000000000003767 loc_3767:                               ; CODE XREF: main+1536↑j
.text:0000000000003767                 movzx   edx, byte ptr [rdx]
.text:000000000000376A                 test    dl, dl
.text:000000000000376C                 jz      short loc_3777
.text:000000000000376E                 cmp     dl, 3Dh ; '='
.text:0000000000003771                 jnz     loc_33FA
.text:0000000000003777
.text:0000000000003777 loc_3777:                               ; CODE XREF: main+18BC↑j
.text:0000000000003777                 mov     rdi, cs:page_size
.text:000000000000377E                 mov     cs:input_blocksize, rax
.text:0000000000003785                 lea     rdx, [rdi+2]
.text:0000000000003789                 mov     rdi, 7FFFFFFFFFFFFFFFh
.text:0000000000003793                 add     rdx, rdx
.text:0000000000003796                 neg     rdx
.text:0000000000003799                 cmp     rdx, rdi
.text:000000000000379C                 cmova   rdx, rdi
.text:00000000000037A0                 jmp     loc_35E1
.text:00000000000037A5 ; ---------------------------------------------------------------------------
.text:00000000000037A5
.text:00000000000037A5 loc_37A5:                               ; CODE XREF: main+DDE↑j
.text:00000000000037A5                 mov     dword ptr [rsp+118h+var_100], 1
.text:00000000000037AD                 jmp     loc_3142
.text:00000000000037B2 ; ---------------------------------------------------------------------------
.text:00000000000037B2
.text:00000000000037B2 loc_37B2:                               ; CODE XREF: main+1B19↓j
.text:00000000000037B2                 movzx   edx, byte ptr [rdx]
.text:00000000000037B5                 test    dl, dl
.text:00000000000037B7                 jz      short loc_37C2
.text:00000000000037B9                 cmp     dl, 3Dh ; '='
.text:00000000000037BC                 jnz     loc_39DD
.text:00000000000037C2
.text:00000000000037C2 loc_37C2:                               ; CODE XREF: main+1907↑j
.text:00000000000037C2                 test    rax, rax
.text:00000000000037C5                 mov     cs:conversion_blocksize, rax
.text:00000000000037CC                 jnz     loc_38A2
.text:00000000000037D2
.text:00000000000037D2 loc_37D2:                               ; CODE XREF: main+1734↑j
.text:00000000000037D2                 mov     dword ptr [rsp+118h+n], 4
.text:00000000000037DA                 jmp     loc_35FB
.text:00000000000037DF ; ---------------------------------------------------------------------------
.text:00000000000037DF
.text:00000000000037DF loc_37DF:                               ; CODE XREF: main+12A3↑j
.text:00000000000037DF                 lea     rdi, saved_char
.text:00000000000037E6                 mov     esi, 1
.text:00000000000037EB                 call    copy_with_block
.text:00000000000037F0                 mov     esi, cs:conversions_mask
.text:00000000000037F6                 jmp     loc_320F
.text:00000000000037FB ; ---------------------------------------------------------------------------
.text:00000000000037FB
.text:00000000000037FB loc_37FB:                               ; CODE XREF: main+12AD↑j
.text:00000000000037FB                 lea     rdi, saved_char
.text:0000000000003802                 mov     esi, 1
.text:0000000000003807                 call    copy_with_unblock
.text:000000000000380C                 mov     esi, cs:conversions_mask
.text:0000000000003812                 jmp     loc_320F
.text:0000000000003817 ; ---------------------------------------------------------------------------
.text:0000000000003817
.text:0000000000003817 loc_3817:                               ; CODE XREF: main+1B44↓j
.text:0000000000003817                 movzx   edx, byte ptr [rdx]
.text:000000000000381A                 cmp     dl, 3Dh ; '='
.text:000000000000381D                 jz      loc_3A7F
.text:0000000000003823                 test    dl, dl
.text:0000000000003825                 jz      loc_3A7F
.text:000000000000382B
.text:000000000000382B loc_382B:                               ; CODE XREF: main+1B58↓j
.text:000000000000382B                 lea     rcx, aSCannotSeek+0Bh ; "seek"
.text:0000000000003832                 mov     rdx, r13
.text:0000000000003835                 mov     esi, 73h ; 's'
.text:000000000000383A
.text:000000000000383A loc_383A:                               ; CODE XREF: main+199E↓j
.text:000000000000383A                 add     rdx, 1
.text:000000000000383E                 add     rcx, 1
.text:0000000000003842                 cmp     [rdx-1], sil
.text:0000000000003846                 jnz     short loc_3864
.text:0000000000003848                 movzx   esi, byte ptr [rcx]
.text:000000000000384B                 test    sil, sil
.text:000000000000384E                 jnz     short loc_383A
.text:0000000000003850                 movzx   edx, byte ptr [rdx]
.text:0000000000003853                 cmp     dl, 3Dh ; '='
.text:0000000000003856                 jz      loc_3A89
.text:000000000000385C                 test    dl, dl
.text:000000000000385E                 jz      loc_3A89
.text:0000000000003864
.text:0000000000003864 loc_3864:                               ; CODE XREF: main+1996↑j
.text:0000000000003864                 lea     rcx, aCount     ; "count"
.text:000000000000386B                 mov     rdx, r13
.text:000000000000386E                 mov     esi, 63h ; 'c'
.text:0000000000003873
.text:0000000000003873 loc_3873:                               ; CODE XREF: main+19DB↓j
.text:0000000000003873                 add     rdx, 1
.text:0000000000003877                 add     rcx, 1
.text:000000000000387B                 cmp     [rdx-1], sil
.text:000000000000387F                 jnz     loc_3921
.text:0000000000003885                 movzx   esi, byte ptr [rcx]
.text:0000000000003888                 test    sil, sil
.text:000000000000388B                 jnz     short loc_3873
.text:000000000000388D                 movzx   edx, byte ptr [rdx]
.text:0000000000003890                 cmp     dl, 3Dh ; '='
.text:0000000000003893                 jz      short loc_389D
.text:0000000000003895                 test    dl, dl
.text:0000000000003897                 jnz     loc_3921
.text:000000000000389D
.text:000000000000389D loc_389D:                               ; CODE XREF: main+19E3↑j
.text:000000000000389D                 mov     [rsp+118h+var_108], rax
.text:00000000000038A2
.text:00000000000038A2 loc_38A2:                               ; CODE XREF: main+173D↑j
.text:00000000000038A2                                         ; main+191C↑j ...
.text:00000000000038A2                 cmp     dword ptr [rsp+118h+n], 0
.text:00000000000038A7                 jz      loc_2190
.text:00000000000038AD                 jmp     loc_35FB
.text:00000000000038B2 ; ---------------------------------------------------------------------------
.text:00000000000038B2
.text:00000000000038B2 loc_38B2:                               ; CODE XREF: main+1820↑j
.text:00000000000038B2                 mov     rsi, cs:output_file
.text:00000000000038B9                 mov     edi, 4
.text:00000000000038BE                 call    quotearg_style
.text:00000000000038C3                 mov     edx, 5
.text:00000000000038C8                 mov     rbx, rax
.text:00000000000038CB                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:00000000000038D2                 jmp     loc_2EE2
.text:00000000000038D7 ; ---------------------------------------------------------------------------
.text:00000000000038D7
.text:00000000000038D7 loc_38D7:                               ; CODE XREF: main+17EF↑j
.text:00000000000038D7                 mov     rsi, cs:output_file
.text:00000000000038DE                 mov     edi, 4
.text:00000000000038E3                 call    quotearg_style
.text:00000000000038E8                 lea     rsi, aFdatasyncFaile ; "fdatasync failed for %s"
.text:00000000000038EF                 mov     edx, 5          ; category
.text:00000000000038F4                 xor     edi, edi        ; domainname
.text:00000000000038F6                 mov     rbx, rax
.text:00000000000038F9                 call    _dcgettext
.text:00000000000038FE                 mov     rdx, rax
.text:0000000000003901                 mov     rax, [rsp+118h+var_108]
.text:0000000000003906                 mov     rcx, rbx
.text:0000000000003909                 xor     edi, edi
.text:000000000000390B                 mov     esi, [rax]
.text:000000000000390D                 xor     eax, eax
.text:000000000000390F                 call    nl_error
.text:0000000000003914                 mov     dword ptr [rsp+118h+var_100], 1
.text:000000000000391C                 jmp     loc_36A5
.text:0000000000003921 ; ---------------------------------------------------------------------------
.text:0000000000003921
.text:0000000000003921 loc_3921:                               ; CODE XREF: main+293↑j
.text:0000000000003921                                         ; main+19CF↑j ...
.text:0000000000003921                 mov     rdi, r13
.text:0000000000003924                 call    quote
.text:0000000000003929                 lea     rsi, aUnrecognizedOp ; "unrecognized operand %s"
.text:0000000000003930                 mov     rbx, rax
.text:0000000000003933                 mov     edx, 5          ; category
.text:0000000000003938                 xor     edi, edi        ; domainname
.text:000000000000393A                 call    _dcgettext
.text:000000000000393F                 xor     edi, edi
.text:0000000000003941                 mov     rdx, rax
.text:0000000000003944                 mov     rcx, rbx
.text:0000000000003947                 xor     esi, esi
.text:0000000000003949                 xor     eax, eax
.text:000000000000394B                 call    nl_error
.text:0000000000003950                 mov     edi, 1          ; status
.text:0000000000003955                 call    usage
.text:000000000000395A ; ---------------------------------------------------------------------------
.text:000000000000395A
.text:000000000000395A loc_395A:                               ; CODE XREF: main+7C9↑j
.text:000000000000395A                                         ; main+7F4↑j
.text:000000000000395A                 mov     rsi, cs:output_file
.text:0000000000003961                 mov     edi, 4
.text:0000000000003966                 call    quotearg_style
.text:000000000000396B                 lea     rsi, aWritingToS ; "writing to %s"
.text:0000000000003972                 mov     edx, 5          ; category
.text:0000000000003977                 xor     edi, edi        ; domainname
.text:0000000000003979                 mov     rbx, rax
.text:000000000000397C                 call    _dcgettext
.text:0000000000003981                 mov     rdx, rax
.text:0000000000003984                 mov     rax, [rsp+118h+var_108]
.text:0000000000003989                 xor     edi, edi
.text:000000000000398B                 mov     rcx, rbx
.text:000000000000398E                 mov     esi, [rax]
.text:0000000000003990                 xor     eax, eax
.text:0000000000003992                 call    nl_error
.text:0000000000003997                 call    finish_up
.text:000000000000399C                 mov     edi, 1          ; status
.text:00000000000039A1                 call    _exit
.text:00000000000039A6 ; ---------------------------------------------------------------------------
.text:00000000000039A6
.text:00000000000039A6 loc_39A6:                               ; CODE XREF: main+159A↑j
.text:00000000000039A6                 movzx   edx, byte ptr [rdx]
.text:00000000000039A9                 test    dl, dl
.text:00000000000039AB                 jz      short loc_3A0D
.text:00000000000039AD                 cmp     dl, 3Dh ; '='
.text:00000000000039B0                 jz      short loc_3A0D
.text:00000000000039B2
.text:00000000000039B2 loc_39B2:                               ; CODE XREF: main+15AE↑j
.text:00000000000039B2                 mov     rdx, r13
.text:00000000000039B5                 mov     esi, 63h ; 'c'
.text:00000000000039BA                 lea     rcx, aCbs       ; "cbs"
.text:00000000000039C1                 jmp     short loc_39CF
.text:00000000000039C3 ; ---------------------------------------------------------------------------
.text:00000000000039C3
.text:00000000000039C3 loc_39C3:                               ; CODE XREF: main+1B2B↓j
.text:00000000000039C3                 movzx   esi, byte ptr [rcx]
.text:00000000000039C6                 test    sil, sil
.text:00000000000039C9                 jz      loc_37B2
.text:00000000000039CF
.text:00000000000039CF loc_39CF:                               ; CODE XREF: main+1B11↑j
.text:00000000000039CF                 add     rdx, 1
.text:00000000000039D3                 add     rcx, 1
.text:00000000000039D7                 cmp     [rdx-1], sil
.text:00000000000039DB                 jz      short loc_39C3
.text:00000000000039DD
.text:00000000000039DD loc_39DD:                               ; CODE XREF: main+190C↑j
.text:00000000000039DD                 mov     rdx, r13
.text:00000000000039E0                 mov     esi, 73h ; 's'
.text:00000000000039E5                 lea     rcx, aSkip      ; "skip"
.text:00000000000039EC                 jmp     short loc_39FA
.text:00000000000039EE ; ---------------------------------------------------------------------------
.text:00000000000039EE
.text:00000000000039EE loc_39EE:                               ; CODE XREF: main+1B56↓j
.text:00000000000039EE                 movzx   esi, byte ptr [rcx]
.text:00000000000039F1                 test    sil, sil
.text:00000000000039F4                 jz      loc_3817
.text:00000000000039FA
.text:00000000000039FA loc_39FA:                               ; CODE XREF: main+1B3C↑j
.text:00000000000039FA                 add     rdx, 1
.text:00000000000039FE                 add     rcx, 1
.text:0000000000003A02                 cmp     [rdx-1], sil
.text:0000000000003A06                 jz      short loc_39EE
.text:0000000000003A08                 jmp     loc_382B
.text:0000000000003A0D ; ---------------------------------------------------------------------------
.text:0000000000003A0D
.text:0000000000003A0D loc_3A0D:                               ; CODE XREF: main+1AFB↑j
.text:0000000000003A0D                                         ; main+1B00↑j
.text:0000000000003A0D                 mov     rdi, cs:page_size
.text:0000000000003A14                 mov     r15, rax
.text:0000000000003A17                 lea     rdx, [rdi+2]
.text:0000000000003A1B                 mov     rdi, 7FFFFFFFFFFFFFFFh
.text:0000000000003A25                 add     rdx, rdx
.text:0000000000003A28                 neg     rdx
.text:0000000000003A2B                 cmp     rdx, rdi
.text:0000000000003A2E                 cmova   rdx, rdi
.text:0000000000003A32                 jmp     loc_35E1
.text:0000000000003A37 ; ---------------------------------------------------------------------------
.text:0000000000003A37
.text:0000000000003A37 loc_3A37:                               ; CODE XREF: main+400↑j
.text:0000000000003A37                 lea     rsi, aCannotCombineB ; "cannot combine block and unblock"
.text:0000000000003A3E                 mov     edx, 5          ; category
.text:0000000000003A43                 xor     edi, edi        ; domainname
.text:0000000000003A45                 call    _dcgettext
.text:0000000000003A4A                 xor     esi, esi
.text:0000000000003A4C                 mov     rdx, rax
.text:0000000000003A4F                 mov     edi, 1
.text:0000000000003A54                 xor     eax, eax
.text:0000000000003A56                 call    nl_error
.text:0000000000003A5B
.text:0000000000003A5B loc_3A5B:                               ; CODE XREF: main+410↑j
.text:0000000000003A5B                 lea     rsi, aCannotCombineL ; "cannot combine lcase and ucase"
.text:0000000000003A62                 mov     edx, 5          ; category
.text:0000000000003A67                 xor     edi, edi        ; domainname
.text:0000000000003A69                 call    _dcgettext
.text:0000000000003A6E                 xor     esi, esi
.text:0000000000003A70                 mov     rdx, rax
.text:0000000000003A73                 mov     edi, 1
.text:0000000000003A78                 xor     eax, eax
.text:0000000000003A7A                 call    nl_error
.text:0000000000003A7F
.text:0000000000003A7F loc_3A7F:                               ; CODE XREF: main+196D↑j
.text:0000000000003A7F                                         ; main+1975↑j
.text:0000000000003A7F                 mov     [rsp+118h+var_110], rax
.text:0000000000003A84                 jmp     loc_38A2
.text:0000000000003A89 ; ---------------------------------------------------------------------------
.text:0000000000003A89
.text:0000000000003A89 loc_3A89:                               ; CODE XREF: main+19A6↑j
.text:0000000000003A89                                         ; main+19AE↑j
.text:0000000000003A89                 mov     r12, rax
.text:0000000000003A8C                 jmp     loc_38A2
.text:0000000000003A91 ; ---------------------------------------------------------------------------
.text:0000000000003A91
.text:0000000000003A91 loc_3A91:                               ; CODE XREF: main+422↑j
.text:0000000000003A91                 lea     rsi, aCannotCombineE ; "cannot combine excl and nocreat"
.text:0000000000003A98                 mov     edx, 5          ; category
.text:0000000000003A9D                 xor     edi, edi        ; domainname
.text:0000000000003A9F                 call    _dcgettext
.text:0000000000003AA4                 xor     esi, esi
.text:0000000000003AA6                 mov     rdx, rax
.text:0000000000003AA9                 mov     edi, 1
.text:0000000000003AAE                 xor     eax, eax
.text:0000000000003AB0                 call    nl_error
.text:0000000000003AB5
.text:0000000000003AB5 loc_3AB5:                               ; CODE XREF: main+434↑j
.text:0000000000003AB5                                         ; main+44A↑j
.text:0000000000003AB5                 lea     rsi, aCannotCombineD ; "cannot combine direct and nocache"
.text:0000000000003ABC                 mov     edx, 5          ; category
.text:0000000000003AC1                 xor     edi, edi        ; domainname
.text:0000000000003AC3                 call    _dcgettext
.text:0000000000003AC8                 xor     esi, esi
.text:0000000000003ACA                 mov     rdx, rax
.text:0000000000003ACD                 mov     edi, 1
.text:0000000000003AD2                 xor     eax, eax
.text:0000000000003AD4                 call    nl_error
.text:0000000000003AD9
.text:0000000000003AD9 loc_3AD9:                               ; CODE XREF: main+66B↑j
.text:0000000000003AD9                 mov     rsi, cs:output_file
.text:0000000000003AE0                 mov     edi, 4
.text:0000000000003AE5                 call    quotearg_style
.text:0000000000003AEA                 lea     rsi, aFailedToOpenS ; "failed to open %s"
.text:0000000000003AF1                 mov     edx, 5          ; category
.text:0000000000003AF6                 xor     edi, edi        ; domainname
.text:0000000000003AF8                 mov     rbx, rax
.text:0000000000003AFB                 call    _dcgettext
.text:0000000000003B00                 mov     rdx, rax
.text:0000000000003B03                 mov     rax, [rsp+118h+var_108]
.text:0000000000003B08                 mov     rcx, rbx
.text:0000000000003B0B                 mov     edi, 1
.text:0000000000003B10                 mov     esi, [rax]
.text:0000000000003B12                 xor     eax, eax
.text:0000000000003B14                 call    nl_error
.text:0000000000003B19
.text:0000000000003B19 loc_3B19:                               ; CODE XREF: main+6AD↑j
.text:0000000000003B19                 lea     rsi, aOffsetTooLarge ; "offset too large: cannot truncate to a "...
.text:0000000000003B20                 mov     edx, 5          ; category
.text:0000000000003B25                 xor     edi, edi        ; domainname
.text:0000000000003B27                 call    _dcgettext
.text:0000000000003B2C                 mov     r8, r14
.text:0000000000003B2F                 mov     rdx, rax
.text:0000000000003B32                 mov     rcx, rbp
.text:0000000000003B35                 xor     esi, esi
.text:0000000000003B37                 mov     edi, 1
.text:0000000000003B3C                 xor     eax, eax
.text:0000000000003B3E                 call    nl_error
.text:0000000000003B43
.text:0000000000003B43 loc_3B43:                               ; CODE XREF: main+163A↑j
.text:0000000000003B43                 mov     rsi, cs:output_file
.text:0000000000003B4A                 mov     edi, 4
.text:0000000000003B4F                 call    quotearg_style
.text:0000000000003B54                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:0000000000003B5B                 mov     edx, 5          ; category
.text:0000000000003B60                 xor     edi, edi        ; domainname
.text:0000000000003B62                 mov     rbx, rax
.text:0000000000003B65                 call    _dcgettext
.text:0000000000003B6A                 mov     rdx, rax
.text:0000000000003B6D                 mov     rax, [rsp+118h+var_108]
.text:0000000000003B72                 mov     rcx, rbx
.text:0000000000003B75                 mov     edi, 1
.text:0000000000003B7A                 mov     esi, [rax]
.text:0000000000003B7C                 xor     eax, eax
.text:0000000000003B7E                 call    nl_error
.text:0000000000003B83
.text:0000000000003B83 loc_3B83:                               ; CODE XREF: main+333↑j
.text:0000000000003B83                 lea     rdi, aFullblock ; "fullblock"
.text:0000000000003B8A                 call    quote
.text:0000000000003B8F                 lea     rsi, aInvalidOutputF ; "invalid output flag"
.text:0000000000003B96                 mov     rbx, rax
.text:0000000000003B99                 mov     edx, 5          ; category
.text:0000000000003B9E
.text:0000000000003B9E loc_3B9E:                               ; CODE XREF: main+1DAA↓j
.text:0000000000003B9E                                         ; main+1DCA↓j
.text:0000000000003B9E                 xor     edi, edi        ; domainname
.text:0000000000003BA0                 call    _dcgettext
.text:0000000000003BA5                 lea     rdx, format     ; "%s: %s"
.text:0000000000003BAC                 mov     rcx, rax
.text:0000000000003BAF                 xor     edi, edi
.text:0000000000003BB1                 mov     r8, rbx
.text:0000000000003BB4                 xor     esi, esi
.text:0000000000003BB6                 xor     eax, eax
.text:0000000000003BB8                 call    nl_error
.text:0000000000003BBD                 mov     edi, 1          ; status
.text:0000000000003BC2                 call    usage
.text:0000000000003BC7 ; ---------------------------------------------------------------------------
.text:0000000000003BC7
.text:0000000000003BC7 loc_3BC7:                               ; CODE XREF: main+10B8↑j
.text:0000000000003BC7                 call    ___stack_chk_fail
.text:0000000000003BCC ; ---------------------------------------------------------------------------
.text:0000000000003BCC
.text:0000000000003BCC loc_3BCC:                               ; CODE XREF: main+5BA↑j
.text:0000000000003BCC                 mov     rsi, cs:input_file
.text:0000000000003BD3                 mov     edi, 4
.text:0000000000003BD8                 call    quotearg_style
.text:0000000000003BDD                 lea     rsi, aFailedToOpenS ; "failed to open %s"
.text:0000000000003BE4                 mov     edx, 5          ; category
.text:0000000000003BE9                 xor     edi, edi        ; domainname
.text:0000000000003BEB                 mov     rbx, rax
.text:0000000000003BEE                 call    _dcgettext
.text:0000000000003BF3                 mov     rdx, rax
.text:0000000000003BF6                 mov     rax, [rsp+118h+var_108]
.text:0000000000003BFB                 mov     rcx, rbx
.text:0000000000003BFE                 mov     edi, 1
.text:0000000000003C03                 mov     esi, [rax]
.text:0000000000003C05                 xor     eax, eax
.text:0000000000003C07                 call    nl_error
.text:0000000000003C0C
.text:0000000000003C0C loc_3C0C:                               ; CODE XREF: main+3F0↑j
.text:0000000000003C0C                 lea     rsi, aCannotCombineA ; "cannot combine any two of {ascii,ebcdic"...
.text:0000000000003C13                 mov     edx, 5          ; category
.text:0000000000003C18                 xor     edi, edi        ; domainname
.text:0000000000003C1A                 call    _dcgettext
.text:0000000000003C1F                 xor     esi, esi
.text:0000000000003C21                 mov     rdx, rax
.text:0000000000003C24                 mov     edi, 1
.text:0000000000003C29                 xor     eax, eax
.text:0000000000003C2B                 call    nl_error
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: main+34C↑j
.text:0000000000003C30                 lea     rax, aCountBytes ; "count_bytes"
.text:0000000000003C37                 lea     rdi, aSkipBytes ; "skip_bytes"
.text:0000000000003C3E                 and     sil, 4
.text:0000000000003C42                 cmovnz  rdi, rax
.text:0000000000003C46                 call    quote
.text:0000000000003C4B                 mov     edx, 5
.text:0000000000003C50                 mov     rbx, rax
.text:0000000000003C53                 lea     rsi, aInvalidOutputF ; "invalid output flag"
.text:0000000000003C5A                 jmp     loc_3B9E
.text:0000000000003C5F ; ---------------------------------------------------------------------------
.text:0000000000003C5F
.text:0000000000003C5F loc_3C5F:                               ; CODE XREF: main+342↑j
.text:0000000000003C5F                 lea     rdi, aSeekBytes ; "seek_bytes"
.text:0000000000003C66                 call    quote
.text:0000000000003C6B                 mov     edx, 5
.text:0000000000003C70                 mov     rbx, rax
.text:0000000000003C73                 lea     rsi, aInvalidInputFl ; "invalid input flag"
.text:0000000000003C7A                 jmp     loc_3B9E
.text:0000000000003C7A ; } // starts at 1EB0
.text:0000000000003C7A main            endp
.text:0000000000003C7A
.text:0000000000003C7A ; ---------------------------------------------------------------------------
.text:0000000000003C7F                 align 20h
.text:0000000000003C80
.text:0000000000003C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C80
.text:0000000000003C80 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000003C80
.text:0000000000003C80 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000003C80                 public start
.text:0000000000003C80 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000003C80 ; __unwind {
.text:0000000000003C80                 xor     ebp, ebp
.text:0000000000003C82                 mov     r9, rdx         ; rtld_fini
.text:0000000000003C85                 pop     rsi             ; argc
.text:0000000000003C86                 mov     rdx, rsp        ; ubp_av
.text:0000000000003C89                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000003C8D                 push    rax
.text:0000000000003C8E                 push    rsp             ; stack_end
.text:0000000000003C8F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000003C96                 lea     rcx, __libc_csu_init ; init
.text:0000000000003C9D                 lea     rdi, main       ; main
.text:0000000000003CA4                 call    cs:__libc_start_main_ptr
.text:0000000000003CAA                 hlt
.text:0000000000003CAA ; } // starts at 3C80
.text:0000000000003CAA start           endp
.text:0000000000003CAA
.text:0000000000003CAA ; ---------------------------------------------------------------------------
.text:0000000000003CAB                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CB0
.text:0000000000003CB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003CB0
.text:0000000000003CB0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_3D63↓p
.text:0000000000003CB0                 lea     rdi, __bss_start
.text:0000000000003CB7                 push    rbp
.text:0000000000003CB8                 lea     rax, __bss_start
.text:0000000000003CBF                 cmp     rax, rdi
.text:0000000000003CC2                 mov     rbp, rsp
.text:0000000000003CC5                 jz      short loc_3CE0
.text:0000000000003CC7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000003CCE                 test    rax, rax
.text:0000000000003CD1                 jz      short loc_3CE0
.text:0000000000003CD3                 pop     rbp
.text:0000000000003CD4                 jmp     rax
.text:0000000000003CD4 ; ---------------------------------------------------------------------------
.text:0000000000003CD6                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 loc_3CE0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000003CE0                                         ; deregister_tm_clones+21↑j
.text:0000000000003CE0                 pop     rbp
.text:0000000000003CE1                 retn
.text:0000000000003CE1 deregister_tm_clones endp
.text:0000000000003CE1
.text:0000000000003CE1 ; ---------------------------------------------------------------------------
.text:0000000000003CE2                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CF0
.text:0000000000003CF0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003CF0
.text:0000000000003CF0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000003CF0                 lea     rdi, __bss_start
.text:0000000000003CF7                 lea     rsi, __bss_start
.text:0000000000003CFE                 push    rbp
.text:0000000000003CFF                 sub     rsi, rdi
.text:0000000000003D02                 mov     rbp, rsp
.text:0000000000003D05                 sar     rsi, 3
.text:0000000000003D09                 mov     rax, rsi
.text:0000000000003D0C                 shr     rax, 3Fh
.text:0000000000003D10                 add     rsi, rax
.text:0000000000003D13                 sar     rsi, 1
.text:0000000000003D16                 jz      short loc_3D30
.text:0000000000003D18                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000003D1F                 test    rax, rax
.text:0000000000003D22                 jz      short loc_3D30
.text:0000000000003D24                 pop     rbp
.text:0000000000003D25                 jmp     rax
.text:0000000000003D25 ; ---------------------------------------------------------------------------
.text:0000000000003D27                 align 10h
.text:0000000000003D30
.text:0000000000003D30 loc_3D30:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003D30                                         ; register_tm_clones+32↑j
.text:0000000000003D30                 pop     rbp
.text:0000000000003D31                 retn
.text:0000000000003D31 register_tm_clones endp
.text:0000000000003D31
.text:0000000000003D31 ; ---------------------------------------------------------------------------
.text:0000000000003D32                 align 20h
.text:0000000000003D40
.text:0000000000003D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D40
.text:0000000000003D40 ; Attributes: info_from_lumina
.text:0000000000003D40
.text:0000000000003D40 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000003D40                 cmp     cs:completed_7697, 0
.text:0000000000003D47                 jnz     short locret_3D78
.text:0000000000003D49                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000003D51                 push    rbp
.text:0000000000003D52                 mov     rbp, rsp
.text:0000000000003D55                 jz      short loc_3D63
.text:0000000000003D57                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000003D5E                 call    __cxa_finalize
.text:0000000000003D63
.text:0000000000003D63 loc_3D63:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000003D63                 call    deregister_tm_clones
.text:0000000000003D68                 mov     cs:completed_7697, 1
.text:0000000000003D6F                 pop     rbp
.text:0000000000003D70                 retn
.text:0000000000003D70 ; ---------------------------------------------------------------------------
.text:0000000000003D71                 align 8
.text:0000000000003D78
.text:0000000000003D78 locret_3D78:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000003D78                 rep retn
.text:0000000000003D78 __do_global_dtors_aux endp
.text:0000000000003D78
.text:0000000000003D78 ; ---------------------------------------------------------------------------
.text:0000000000003D7A                 align 20h
.text:0000000000003D80
.text:0000000000003D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D80
.text:0000000000003D80 ; Attributes: bp-based frame
.text:0000000000003D80
.text:0000000000003D80 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000003D80                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000003D80                 push    rbp
.text:0000000000003D81                 mov     rbp, rsp
.text:0000000000003D84                 pop     rbp
.text:0000000000003D85                 jmp     register_tm_clones
.text:0000000000003D85 frame_dummy     endp
.text:0000000000003D85
.text:0000000000003D85 ; ---------------------------------------------------------------------------
.text:0000000000003D8A                 align 10h
.text:0000000000003D90
.text:0000000000003D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D90
.text:0000000000003D90
.text:0000000000003D90 interrupt_handler proc near             ; DATA XREF: main+14B↑o
.text:0000000000003D90 ; __unwind {
.text:0000000000003D90                 mov     cs:interrupt_signal, edi
.text:0000000000003D96                 retn
.text:0000000000003D96 ; } // starts at 3D90
.text:0000000000003D96 interrupt_handler endp
.text:0000000000003D96
.text:0000000000003D96 ; ---------------------------------------------------------------------------
.text:0000000000003D97                 align 20h
.text:0000000000003DA0
.text:0000000000003DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DA0
.text:0000000000003DA0
.text:0000000000003DA0 siginfo_handler proc near               ; DATA XREF: main+10E↑o
.text:0000000000003DA0 ; __unwind {
.text:0000000000003DA0                 mov     eax, cs:info_signal_count
.text:0000000000003DA6                 add     eax, 1
.text:0000000000003DA9                 mov     cs:info_signal_count, eax
.text:0000000000003DAF                 retn
.text:0000000000003DAF ; } // starts at 3DA0
.text:0000000000003DAF siginfo_handler endp
.text:0000000000003DAF
.text:0000000000003DB0
.text:0000000000003DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DB0
.text:0000000000003DB0
.text:0000000000003DB0 print_xfer_stats proc near              ; CODE XREF: main+9E2↑p
.text:0000000000003DB0                                         ; print_stats_part_2+B5↓j
.text:0000000000003DB0
.text:0000000000003DB0 var_810         = qword ptr -810h
.text:0000000000003DB0 var_808         = byte ptr -808h
.text:0000000000003DB0 var_58          = byte ptr -58h
.text:0000000000003DB0 var_40          = qword ptr -40h
.text:0000000000003DB0
.text:0000000000003DB0 ; __unwind {
.text:0000000000003DB0                 push    r15
.text:0000000000003DB2                 push    r14
.text:0000000000003DB4                 mov     r14, rdi
.text:0000000000003DB7                 push    r13
.text:0000000000003DB9                 push    r12
.text:0000000000003DBB                 push    rbp
.text:0000000000003DBC                 push    rbx
.text:0000000000003DBD                 mov     rbp, rdi
.text:0000000000003DC0                 sub     rsp, 7E8h
.text:0000000000003DC7                 mov     rax, fs:28h
.text:0000000000003DD0                 mov     [rsp+818h+var_40], rax
.text:0000000000003DD8                 xor     eax, eax
.text:0000000000003DDA                 test    rdi, rdi
.text:0000000000003DDD                 jz      loc_4030
.text:0000000000003DE3
.text:0000000000003DE3 loc_3DE3:                               ; CODE XREF: print_xfer_stats+288↓j
.text:0000000000003DE3                 lea     rbx, [rsp+818h+var_808]
.text:0000000000003DE8                 mov     rdi, cs:w_bytes
.text:0000000000003DEF                 mov     r8d, 1
.text:0000000000003DF5                 mov     ecx, 1
.text:0000000000003DFA                 mov     edx, 1D1h
.text:0000000000003DFF                 mov     rsi, rbx
.text:0000000000003E02                 call    human_readable
.text:0000000000003E07                 mov     rdi, cs:w_bytes
.text:0000000000003E0E                 lea     rsi, [rbx+28Eh]
.text:0000000000003E15                 mov     r8d, 1
.text:0000000000003E1B                 mov     ecx, 1
.text:0000000000003E20                 mov     edx, 1F1h
.text:0000000000003E25                 mov     r12, rax
.text:0000000000003E28                 call    human_readable
.text:0000000000003E2D                 mov     r13, rax
.text:0000000000003E30                 mov     rax, cs:start_time
.text:0000000000003E37                 cmp     rax, r14
.text:0000000000003E3A                 jge     loc_3F88
.text:0000000000003E40                 sub     r14, rax
.text:0000000000003E43                 mov     r8, r14
.text:0000000000003E46                 js      loc_40B0
.text:0000000000003E4C                 pxor    xmm0, xmm0
.text:0000000000003E50                 cvtsi2sd xmm0, r14
.text:0000000000003E55
.text:0000000000003E55 loc_3E55:                               ; CODE XREF: print_xfer_stats+31C↓j
.text:0000000000003E55                 divsd   xmm0, cs:qword_E170
.text:0000000000003E5D                 mov     rdi, cs:w_bytes
.text:0000000000003E64                 lea     rsi, [rbx+51Ch]
.text:0000000000003E6B                 mov     ecx, 3B9ACA00h
.text:0000000000003E70                 mov     edx, 1D1h
.text:0000000000003E75                 movsd   [rsp+818h+var_810], xmm0
.text:0000000000003E7B                 call    human_readable
.text:0000000000003E80                 mov     rdi, rax        ; s
.text:0000000000003E83                 mov     rbx, rax
.text:0000000000003E86                 call    _strlen
.text:0000000000003E8B                 mov     ecx, 732Fh
.text:0000000000003E90                 test    rbp, rbp
.text:0000000000003E93                 mov     byte ptr [rbx+rax+2], 0
.text:0000000000003E98                 mov     [rbx+rax], cx
.text:0000000000003E9C                 movsd   xmm0, [rsp+818h+var_810]
.text:0000000000003EA2                 lea     r8, aGS         ; "%g s"
.text:0000000000003EA9                 jnz     loc_3FD9
.text:0000000000003EAF
.text:0000000000003EAF loc_3EAF:                               ; CODE XREF: print_xfer_stats+223↓j
.text:0000000000003EAF                                         ; print_xfer_stats+250↓j ...
.text:0000000000003EAF                 lea     r14, [rsp+818h+var_58]
.text:0000000000003EB7                 mov     ecx, 18h
.text:0000000000003EBC                 mov     edx, 1
.text:0000000000003EC1                 mov     esi, 18h
.text:0000000000003EC6                 mov     eax, 1
.text:0000000000003ECB                 mov     rdi, r14
.text:0000000000003ECE                 call    ___snprintf_chk
.text:0000000000003ED3                 mov     rdi, r12        ; s
.text:0000000000003ED6                 call    _strlen
.text:0000000000003EDB                 cmp     byte ptr [r12+rax-2], 20h ; ' '
.text:0000000000003EE1                 jz      loc_4060
.text:0000000000003EE7                 mov     rdi, r13        ; s
.text:0000000000003EEA                 call    _strlen
.text:0000000000003EEF                 cmp     byte ptr [r13+rax-2], 20h ; ' '
.text:0000000000003EF5                 mov     r15, cs:w_bytes
.text:0000000000003EFC                 mov     edx, 5          ; category
.text:0000000000003F01                 jz      loc_4040
.text:0000000000003F07                 lea     rsi, aLuBytesSSCopie ; "%lu bytes (%s, %s) copied, %s, %s"
.text:0000000000003F0E                 xor     edi, edi        ; domainname
.text:0000000000003F10                 call    _dcgettext
.text:0000000000003F15                 push    rbx
.text:0000000000003F16                 push    r14
.text:0000000000003F18                 mov     r9, r13
.text:0000000000003F1B
.text:0000000000003F1B loc_3F1B:                               ; CODE XREF: print_xfer_stats+2A6↓j
.text:0000000000003F1B                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003F22                 mov     rdx, rax
.text:0000000000003F25                 mov     r8, r12
.text:0000000000003F28                 mov     rcx, r15
.text:0000000000003F2B                 mov     esi, 1
.text:0000000000003F30                 xor     eax, eax
.text:0000000000003F32                 call    ___fprintf_chk
.text:0000000000003F37                 mov     ebx, eax
.text:0000000000003F39                 pop     rax
.text:0000000000003F3A                 pop     rdx
.text:0000000000003F3B
.text:0000000000003F3B loc_3F3B:                               ; CODE XREF: print_xfer_stats+2F6↓j
.text:0000000000003F3B                 test    rbp, rbp
.text:0000000000003F3E                 jz      loc_4008
.text:0000000000003F44                 test    ebx, ebx
.text:0000000000003F46                 js      short loc_3F56
.text:0000000000003F48                 mov     ecx, cs:progress_len
.text:0000000000003F4E                 cmp     ecx, ebx
.text:0000000000003F50                 jg      loc_40D8
.text:0000000000003F56
.text:0000000000003F56 loc_3F56:                               ; CODE XREF: print_xfer_stats+196↑j
.text:0000000000003F56                                         ; print_xfer_stats+34B↓j
.text:0000000000003F56                 mov     cs:progress_len, ebx
.text:0000000000003F5C
.text:0000000000003F5C loc_3F5C:                               ; CODE XREF: print_xfer_stats+278↓j
.text:0000000000003F5C                                         ; print_xfer_stats+35A↓j
.text:0000000000003F5C                 mov     rax, [rsp+818h+var_40]
.text:0000000000003F64                 xor     rax, fs:28h
.text:0000000000003F6D                 jnz     loc_4132
.text:0000000000003F73                 add     rsp, 7E8h
.text:0000000000003F7A                 pop     rbx
.text:0000000000003F7B                 pop     rbp
.text:0000000000003F7C                 pop     r12
.text:0000000000003F7E                 pop     r13
.text:0000000000003F80                 pop     r14
.text:0000000000003F82                 pop     r15
.text:0000000000003F84                 retn
.text:0000000000003F84 ; ---------------------------------------------------------------------------
.text:0000000000003F85                 align 8
.text:0000000000003F88
.text:0000000000003F88 loc_3F88:                               ; CODE XREF: print_xfer_stats+8A↑j
.text:0000000000003F88                 lea     rsi, aInfinity  ; "Infinity"
.text:0000000000003F8F                 xor     edi, edi        ; domainname
.text:0000000000003F91                 mov     edx, 5          ; category
.text:0000000000003F96                 add     rbx, 51Ch
.text:0000000000003F9D                 call    _dcgettext
.text:0000000000003FA2                 lea     r8, aSBS        ; "%s B/s"
.text:0000000000003FA9                 mov     r9, rax
.text:0000000000003FAC                 mov     ecx, 28Eh
.text:0000000000003FB1                 xor     eax, eax
.text:0000000000003FB3                 mov     edx, 1
.text:0000000000003FB8                 mov     esi, 28Eh
.text:0000000000003FBD                 mov     rdi, rbx
.text:0000000000003FC0                 call    ___snprintf_chk
.text:0000000000003FC5                 test    rbp, rbp
.text:0000000000003FC8                 pxor    xmm0, xmm0
.text:0000000000003FCC                 lea     r8, aGS         ; "%g s"
.text:0000000000003FD3                 jz      loc_3EAF
.text:0000000000003FD9
.text:0000000000003FD9 loc_3FD9:                               ; CODE XREF: print_xfer_stats+F9↑j
.text:0000000000003FD9                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003FE0                 mov     rax, [rdi+28h]
.text:0000000000003FE4                 cmp     rax, [rdi+30h]
.text:0000000000003FE8                 jnb     loc_4110
.text:0000000000003FEE                 lea     rdx, [rax+1]
.text:0000000000003FF2                 lea     r8, a0fS        ; "%.0f s"
.text:0000000000003FF9                 mov     [rdi+28h], rdx
.text:0000000000003FFD                 mov     byte ptr [rax], 0Dh
.text:0000000000004000                 jmp     loc_3EAF
.text:0000000000004000 ; ---------------------------------------------------------------------------
.text:0000000000004005                 align 8
.text:0000000000004008
.text:0000000000004008 loc_4008:                               ; CODE XREF: print_xfer_stats+18E↑j
.text:0000000000004008                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000400F                 mov     rax, [rdi+28h]
.text:0000000000004013                 cmp     rax, [rdi+30h]
.text:0000000000004017                 jnb     loc_4100
.text:000000000000401D                 lea     rdx, [rax+1]
.text:0000000000004021                 mov     [rdi+28h], rdx
.text:0000000000004025                 mov     byte ptr [rax], 0Ah
.text:0000000000004028                 jmp     loc_3F5C
.text:0000000000004028 ; ---------------------------------------------------------------------------
.text:000000000000402D                 align 10h
.text:0000000000004030
.text:0000000000004030 loc_4030:                               ; CODE XREF: print_xfer_stats+2D↑j
.text:0000000000004030                 call    gethrxtime
.text:0000000000004035                 mov     r14, rax
.text:0000000000004038                 jmp     loc_3DE3
.text:0000000000004038 ; ---------------------------------------------------------------------------
.text:000000000000403D                 align 20h
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: print_xfer_stats+151↑j
.text:0000000000004040                 lea     rsi, aLuBytesSCopied ; "%lu bytes (%s) copied, %s, %s"
.text:0000000000004047                 xor     edi, edi        ; domainname
.text:0000000000004049                 call    _dcgettext
.text:000000000000404E                 sub     rsp, 8
.text:0000000000004052                 mov     r9, r14
.text:0000000000004055                 push    rbx
.text:0000000000004056                 jmp     loc_3F1B
.text:0000000000004056 ; ---------------------------------------------------------------------------
.text:000000000000405B                 align 20h
.text:0000000000004060
.text:0000000000004060 loc_4060:                               ; CODE XREF: print_xfer_stats+131↑j
.text:0000000000004060                 mov     r12, cs:w_bytes
.text:0000000000004067                 lea     rdx, msgid2     ; "%lu bytes copied, %s, %s"
.text:000000000000406E                 lea     rsi, msgid1     ; "%lu byte copied, %s, %s"
.text:0000000000004075                 mov     r8d, 5          ; category
.text:000000000000407B                 xor     edi, edi        ; domainname
.text:000000000000407D                 mov     rcx, r12        ; n
.text:0000000000004080                 call    _dcngettext
.text:0000000000004085                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000408C                 mov     r9, rbx
.text:000000000000408F                 mov     rdx, rax
.text:0000000000004092                 mov     r8, r14
.text:0000000000004095                 mov     rcx, r12
.text:0000000000004098                 mov     esi, 1
.text:000000000000409D                 xor     eax, eax
.text:000000000000409F                 call    ___fprintf_chk
.text:00000000000040A4                 mov     ebx, eax
.text:00000000000040A6                 jmp     loc_3F3B
.text:00000000000040A6 ; ---------------------------------------------------------------------------
.text:00000000000040AB                 align 10h
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: print_xfer_stats+96↑j
.text:00000000000040B0                 mov     rax, r14
.text:00000000000040B3                 mov     rdx, r14
.text:00000000000040B6                 pxor    xmm0, xmm0
.text:00000000000040BA                 shr     rax, 1
.text:00000000000040BD                 and     edx, 1
.text:00000000000040C0                 or      rax, rdx
.text:00000000000040C3                 cvtsi2sd xmm0, rax
.text:00000000000040C8                 addsd   xmm0, xmm0
.text:00000000000040CC                 jmp     loc_3E55
.text:00000000000040CC ; ---------------------------------------------------------------------------
.text:00000000000040D1                 align 8
.text:00000000000040D8
.text:00000000000040D8 loc_40D8:                               ; CODE XREF: print_xfer_stats+1A0↑j
.text:00000000000040D8                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000040DF                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:00000000000040E6                 lea     rdx, aS         ; "%*s"
.text:00000000000040ED                 sub     ecx, ebx
.text:00000000000040EF                 mov     esi, 1
.text:00000000000040F4                 xor     eax, eax
.text:00000000000040F6                 call    ___fprintf_chk
.text:00000000000040FB                 jmp     loc_3F56
.text:0000000000004100 ; ---------------------------------------------------------------------------
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: print_xfer_stats+267↑j
.text:0000000000004100                 mov     esi, 0Ah        ; int
.text:0000000000004105                 call    ___overflow
.text:000000000000410A                 jmp     loc_3F5C
.text:000000000000410A ; ---------------------------------------------------------------------------
.text:000000000000410F                 align 10h
.text:0000000000004110
.text:0000000000004110 loc_4110:                               ; CODE XREF: print_xfer_stats+238↑j
.text:0000000000004110                 mov     esi, 0Dh        ; int
.text:0000000000004115                 movsd   [rsp+818h+var_810], xmm0
.text:000000000000411B                 call    ___overflow
.text:0000000000004120                 lea     r8, a0fS        ; "%.0f s"
.text:0000000000004127                 movsd   xmm0, [rsp+818h+var_810]
.text:000000000000412D                 jmp     loc_3EAF
.text:0000000000004132 ; ---------------------------------------------------------------------------
.text:0000000000004132
.text:0000000000004132 loc_4132:                               ; CODE XREF: print_xfer_stats+1BD↑j
.text:0000000000004132                 call    ___stack_chk_fail
.text:0000000000004132 ; } // starts at 3DB0
.text:0000000000004132 print_xfer_stats endp
.text:0000000000004132
.text:0000000000004132 ; ---------------------------------------------------------------------------
.text:0000000000004137                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140
.text:0000000000004140 nl_error        proc near               ; CODE XREF: main+C9B↑p
.text:0000000000004140                                         ; main+DCD↑p ...
.text:0000000000004140
.text:0000000000004140 var_F0          = qword ptr -0F0h
.text:0000000000004140 var_E8          = dword ptr -0E8h
.text:0000000000004140 var_E4          = dword ptr -0E4h
.text:0000000000004140 var_E0          = qword ptr -0E0h
.text:0000000000004140 var_D8          = qword ptr -0D8h
.text:0000000000004140 var_D0          = qword ptr -0D0h
.text:0000000000004140 var_C8          = byte ptr -0C8h
.text:0000000000004140 var_B0          = qword ptr -0B0h
.text:0000000000004140 var_A8          = qword ptr -0A8h
.text:0000000000004140 var_A0          = qword ptr -0A0h
.text:0000000000004140 var_98          = xmmword ptr -98h
.text:0000000000004140 var_88          = xmmword ptr -88h
.text:0000000000004140 var_78          = xmmword ptr -78h
.text:0000000000004140 var_68          = xmmword ptr -68h
.text:0000000000004140 var_58          = xmmword ptr -58h
.text:0000000000004140 var_48          = xmmword ptr -48h
.text:0000000000004140 var_38          = xmmword ptr -38h
.text:0000000000004140 var_28          = xmmword ptr -28h
.text:0000000000004140 arg_0           = byte ptr  8
.text:0000000000004140
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 push    rbp
.text:0000000000004141                 push    rbx
.text:0000000000004142                 mov     ebp, esi
.text:0000000000004144                 mov     ebx, edi
.text:0000000000004146                 sub     rsp, 0E8h
.text:000000000000414D                 test    al, al
.text:000000000000414F                 mov     [rsp+0F8h+var_B0], rcx
.text:0000000000004154                 mov     [rsp+0F8h+var_A8], r8
.text:0000000000004159                 mov     [rsp+0F8h+var_A0], r9
.text:000000000000415E                 jz      short loc_419A
.text:0000000000004160                 movaps  [rsp+0F8h+var_98], xmm0
.text:0000000000004165                 movaps  [rsp+0F8h+var_88], xmm1
.text:000000000000416A                 movaps  [rsp+0F8h+var_78], xmm2
.text:0000000000004172                 movaps  [rsp+0F8h+var_68], xmm3
.text:000000000000417A                 movaps  [rsp+0F8h+var_58], xmm4
.text:0000000000004182                 movaps  [rsp+0F8h+var_48], xmm5
.text:000000000000418A                 movaps  [rsp+0F8h+var_38], xmm6
.text:0000000000004192                 movaps  [rsp+0F8h+var_28], xmm7
.text:000000000000419A
.text:000000000000419A loc_419A:                               ; CODE XREF: nl_error+1E↑j
.text:000000000000419A                 mov     rax, fs:28h
.text:00000000000041A3                 mov     [rsp+0F8h+var_D0], rax
.text:00000000000041A8                 xor     eax, eax
.text:00000000000041AA                 mov     eax, cs:progress_len
.text:00000000000041B0                 test    eax, eax
.text:00000000000041B2                 jle     short loc_41DA
.text:00000000000041B4                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000041BB                 mov     rax, [rdi+28h]
.text:00000000000041BF                 cmp     rax, [rdi+30h]
.text:00000000000041C3                 jnb     short loc_4230
.text:00000000000041C5                 lea     rcx, [rax+1]
.text:00000000000041C9                 mov     [rdi+28h], rcx
.text:00000000000041CD                 mov     byte ptr [rax], 0Ah
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: nl_error+104↓j
.text:00000000000041D0                 mov     cs:progress_len, 0
.text:00000000000041DA
.text:00000000000041DA loc_41DA:                               ; CODE XREF: nl_error+72↑j
.text:00000000000041DA                 lea     rax, [rsp+0F8h+arg_0]
.text:00000000000041E2                 lea     rcx, [rsp+0F8h+var_E8]
.text:00000000000041E7                 mov     esi, ebp
.text:00000000000041E9                 mov     edi, ebx
.text:00000000000041EB                 mov     [rsp+0F8h+var_E8], 18h
.text:00000000000041F3                 mov     [rsp+0F8h+var_E4], 30h ; '0'
.text:00000000000041FB                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000004200                 lea     rax, [rsp+0F8h+var_C8]
.text:0000000000004205                 mov     [rsp+0F8h+var_D8], rax
.text:000000000000420A                 call    verror
.text:000000000000420F                 mov     rax, [rsp+0F8h+var_D0]
.text:0000000000004214                 xor     rax, fs:28h
.text:000000000000421D                 jnz     short loc_4246
.text:000000000000421F                 add     rsp, 0E8h
.text:0000000000004226                 pop     rbx
.text:0000000000004227                 pop     rbp
.text:0000000000004228                 retn
.text:0000000000004228 ; ---------------------------------------------------------------------------
.text:0000000000004229                 align 10h
.text:0000000000004230
.text:0000000000004230 loc_4230:                               ; CODE XREF: nl_error+83↑j
.text:0000000000004230                 mov     esi, 0Ah        ; int
.text:0000000000004235                 mov     [rsp+0F8h+var_F0], rdx
.text:000000000000423A                 call    ___overflow
.text:000000000000423F                 mov     rdx, [rsp+0F8h+var_F0]
.text:0000000000004244                 jmp     short loc_41D0
.text:0000000000004246 ; ---------------------------------------------------------------------------
.text:0000000000004246
.text:0000000000004246 loc_4246:                               ; CODE XREF: nl_error+DD↑j
.text:0000000000004246                 call    ___stack_chk_fail
.text:0000000000004246 ; } // starts at 4140
.text:0000000000004246 nl_error        endp
.text:0000000000004246
.text:0000000000004246 ; ---------------------------------------------------------------------------
.text:000000000000424B                 align 10h
.text:0000000000004250
.text:0000000000004250 ; =============== S U B R O U T I N E =======================================
.text:0000000000004250
.text:0000000000004250
.text:0000000000004250 parse_integer   proc near               ; CODE XREF: main+1515↑p
.text:0000000000004250                                         ; parse_integer+8F↓p
.text:0000000000004250
.text:0000000000004250 var_40          = qword ptr -40h
.text:0000000000004250 var_38          = qword ptr -38h
.text:0000000000004250 var_30          = qword ptr -30h
.text:0000000000004250
.text:0000000000004250 ; __unwind {
.text:0000000000004250                 push    r13
.text:0000000000004252                 push    r12
.text:0000000000004254                 lea     r8, aBcegkkmptwyz0 ; "bcEGkKMPTwYZ0"
.text:000000000000425B                 push    rbp
.text:000000000000425C                 push    rbx
.text:000000000000425D                 mov     r12, rsi
.text:0000000000004260                 mov     edx, 0Ah
.text:0000000000004265                 mov     rbp, rdi
.text:0000000000004268                 sub     rsp, 28h
.text:000000000000426C                 lea     rcx, [rsp+48h+var_40]
.text:0000000000004271                 lea     rsi, [rsp+48h+var_38]
.text:0000000000004276                 mov     rax, fs:28h
.text:000000000000427F                 mov     [rsp+48h+var_30], rax
.text:0000000000004284                 xor     eax, eax
.text:0000000000004286                 call    xstrtoumax
.text:000000000000428B                 cmp     eax, 2
.text:000000000000428E                 mov     edx, eax
.text:0000000000004290                 jz      short loc_42C0
.text:0000000000004292                 test    edx, edx
.text:0000000000004294                 mov     rax, [rsp+48h+var_40]
.text:0000000000004299                 jnz     short loc_42CA
.text:000000000000429B
.text:000000000000429B loc_429B:                               ; CODE XREF: parse_integer+80↓j
.text:000000000000429B                                         ; parse_integer+BC↓j ...
.text:000000000000429B                 mov     rbx, [rsp+48h+var_30]
.text:00000000000042A0                 xor     rbx, fs:28h
.text:00000000000042A9                 jnz     loc_4390
.text:00000000000042AF                 add     rsp, 28h
.text:00000000000042B3                 pop     rbx
.text:00000000000042B4                 pop     rbp
.text:00000000000042B5                 pop     r12
.text:00000000000042B7                 pop     r13
.text:00000000000042B9                 retn
.text:00000000000042B9 ; ---------------------------------------------------------------------------
.text:00000000000042BA                 align 20h
.text:00000000000042C0
.text:00000000000042C0 loc_42C0:                               ; CODE XREF: parse_integer+40↑j
.text:00000000000042C0                 mov     rdi, [rsp+48h+var_38]
.text:00000000000042C5                 cmp     byte ptr [rdi], 78h ; 'x'
.text:00000000000042C8                 jz      short loc_42D8
.text:00000000000042CA
.text:00000000000042CA loc_42CA:                               ; CODE XREF: parse_integer+49↑j
.text:00000000000042CA                 mov     [r12], edx
.text:00000000000042CE                 xor     eax, eax
.text:00000000000042D0                 jmp     short loc_429B
.text:00000000000042D0 ; ---------------------------------------------------------------------------
.text:00000000000042D2                 align 8
.text:00000000000042D8
.text:00000000000042D8 loc_42D8:                               ; CODE XREF: parse_integer+78↑j
.text:00000000000042D8                 add     rdi, 1          ; nptr
.text:00000000000042DC                 mov     rsi, r12
.text:00000000000042DF                 call    parse_integer
.text:00000000000042E4                 test    rax, rax
.text:00000000000042E7                 mov     rbx, rax
.text:00000000000042EA                 jz      short loc_4310
.text:00000000000042EC                 mov     rcx, [rsp+48h+var_40]
.text:00000000000042F1                 xor     edx, edx
.text:00000000000042F3                 mov     rax, rcx
.text:00000000000042F6                 imul    rax, rbx
.text:00000000000042FA                 div     rbx
.text:00000000000042FD                 cmp     rcx, rax
.text:0000000000004300                 jz      short loc_4315
.text:0000000000004302                 mov     dword ptr [r12], 1
.text:000000000000430A                 xor     eax, eax
.text:000000000000430C                 jmp     short loc_429B
.text:000000000000430C ; ---------------------------------------------------------------------------
.text:000000000000430E                 align 10h
.text:0000000000004310
.text:0000000000004310 loc_4310:                               ; CODE XREF: parse_integer+9A↑j
.text:0000000000004310                 mov     rax, [rsp+48h+var_40]
.text:0000000000004315
.text:0000000000004315 loc_4315:                               ; CODE XREF: parse_integer+B0↑j
.text:0000000000004315                 test    rax, rax
.text:0000000000004318                 jnz     short loc_4338
.text:000000000000431A                 lea     r12, a00x+1     ; "0x"
.text:0000000000004321                 mov     ecx, 2
.text:0000000000004326                 mov     rsi, rbp
.text:0000000000004329                 mov     rdi, r12
.text:000000000000432C                 repe cmpsb
.text:000000000000432E                 setnbe  dl
.text:0000000000004331                 sbb     dl, 0
.text:0000000000004334                 test    dl, dl
.text:0000000000004336                 jz      short loc_4341
.text:0000000000004338
.text:0000000000004338 loc_4338:                               ; CODE XREF: parse_integer+C8↑j
.text:0000000000004338                                         ; parse_integer+13E↓j
.text:0000000000004338                 imul    rax, rbx
.text:000000000000433C                 jmp     loc_429B
.text:0000000000004341 ; ---------------------------------------------------------------------------
.text:0000000000004341
.text:0000000000004341 loc_4341:                               ; CODE XREF: parse_integer+E6↑j
.text:0000000000004341                 lea     rsi, a00x       ; "00x"
.text:0000000000004348                 mov     edi, 1
.text:000000000000434D                 call    quote_n
.text:0000000000004352                 mov     rsi, r12
.text:0000000000004355                 xor     edi, edi
.text:0000000000004357                 mov     r13, rax
.text:000000000000435A                 call    quote_n
.text:000000000000435F                 lea     rsi, aWarningSIsAZer ; "warning: %s is a zero multiplier; use %"...
.text:0000000000004366                 mov     rbp, rax
.text:0000000000004369                 mov     edx, 5          ; category
.text:000000000000436E                 xor     edi, edi        ; domainname
.text:0000000000004370                 call    _dcgettext
.text:0000000000004375                 mov     r8, r13
.text:0000000000004378                 mov     rdx, rax
.text:000000000000437B                 mov     rcx, rbp
.text:000000000000437E                 xor     eax, eax
.text:0000000000004380                 xor     esi, esi
.text:0000000000004382                 xor     edi, edi
.text:0000000000004384                 call    nl_error
.text:0000000000004389                 mov     rax, [rsp+48h+var_40]
.text:000000000000438E                 jmp     short loc_4338
.text:0000000000004390 ; ---------------------------------------------------------------------------
.text:0000000000004390
.text:0000000000004390 loc_4390:                               ; CODE XREF: parse_integer+59↑j
.text:0000000000004390                 call    ___stack_chk_fail
.text:0000000000004390 ; } // starts at 4250
.text:0000000000004390 parse_integer   endp
.text:0000000000004390
.text:0000000000004390 ; ---------------------------------------------------------------------------
.text:0000000000004395                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0
.text:00000000000043A0 ; __int64 __fastcall set_fd_flags(int fd)
.text:00000000000043A0 set_fd_flags    proc near               ; CODE XREF: main+13A7↑p
.text:00000000000043A0                                         ; main+1705↑p
.text:00000000000043A0
.text:00000000000043A0 var_B0          = dword ptr -0B0h
.text:00000000000043A0 var_30          = qword ptr -30h
.text:00000000000043A0
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 push    r13
.text:00000000000043A2                 push    r12
.text:00000000000043A4                 push    rbp
.text:00000000000043A5                 push    rbx
.text:00000000000043A6                 mov     ebx, esi
.text:00000000000043A8                 sub     rsp, 0A8h
.text:00000000000043AF                 mov     rax, fs:28h
.text:00000000000043B8                 mov     [rsp+0C8h+var_30], rax
.text:00000000000043C0                 xor     eax, eax
.text:00000000000043C2                 and     ebx, 0FFFDFEFFh
.text:00000000000043C8                 jnz     short loc_43EF
.text:00000000000043CA
.text:00000000000043CA loc_43CA:                               ; CODE XREF: set_fd_flags+69↓j
.text:00000000000043CA                                         ; set_fd_flags+86↓j ...
.text:00000000000043CA                 mov     rax, [rsp+0C8h+var_30]
.text:00000000000043D2                 xor     rax, fs:28h
.text:00000000000043DB                 jnz     loc_44AB
.text:00000000000043E1                 add     rsp, 0A8h
.text:00000000000043E8                 pop     rbx
.text:00000000000043E9                 pop     rbp
.text:00000000000043EA                 pop     r12
.text:00000000000043EC                 pop     r13
.text:00000000000043EE                 retn
.text:00000000000043EF ; ---------------------------------------------------------------------------
.text:00000000000043EF
.text:00000000000043EF loc_43EF:                               ; CODE XREF: set_fd_flags+28↑j
.text:00000000000043EF                 mov     esi, 3
.text:00000000000043F4                 mov     ebp, edi
.text:00000000000043F6                 mov     r13, rdx
.text:00000000000043F9                 call    rpl_fcntl
.text:00000000000043FE                 or      ebx, eax
.text:0000000000004400                 test    eax, eax
.text:0000000000004402                 mov     r12d, eax
.text:0000000000004405                 js      short loc_4458
.text:0000000000004407                 cmp     eax, ebx
.text:0000000000004409                 jz      short loc_43CA
.text:000000000000440B                 test    ebx, 10000h
.text:0000000000004411                 jnz     short loc_442A
.text:0000000000004413
.text:0000000000004413 loc_4413:                               ; CODE XREF: set_fd_flags+100↓j
.text:0000000000004413                 xor     eax, eax
.text:0000000000004415                 mov     edx, ebx
.text:0000000000004417                 mov     esi, 4
.text:000000000000441C                 mov     edi, ebp        ; fd
.text:000000000000441E                 call    rpl_fcntl
.text:0000000000004423                 add     eax, 1
.text:0000000000004426                 jnz     short loc_43CA
.text:0000000000004428                 jmp     short loc_4458
.text:000000000000442A ; ---------------------------------------------------------------------------
.text:000000000000442A
.text:000000000000442A loc_442A:                               ; CODE XREF: set_fd_flags+71↑j
.text:000000000000442A                 mov     rdx, rsp        ; stat_buf
.text:000000000000442D                 mov     esi, ebp        ; fildes
.text:000000000000442F                 mov     edi, 1          ; ver
.text:0000000000004434                 call    ___fxstat
.text:0000000000004439                 test    eax, eax
.text:000000000000443B                 jnz     short loc_4458
.text:000000000000443D                 mov     eax, [rsp+0C8h+var_B0]
.text:0000000000004441                 and     eax, 0F000h
.text:0000000000004446                 cmp     eax, 4000h
.text:000000000000444B                 jz      short loc_4497
.text:000000000000444D                 call    ___errno_location
.text:0000000000004452                 mov     dword ptr [rax], 14h
.text:0000000000004458
.text:0000000000004458 loc_4458:                               ; CODE XREF: set_fd_flags+65↑j
.text:0000000000004458                                         ; set_fd_flags+88↑j ...
.text:0000000000004458                 mov     rsi, r13
.text:000000000000445B                 mov     edi, 4
.text:0000000000004460                 call    quotearg_style
.text:0000000000004465                 lea     rsi, aSettingFlagsFo ; "setting flags for %s"
.text:000000000000446C                 mov     edx, 5          ; category
.text:0000000000004471                 xor     edi, edi        ; domainname
.text:0000000000004473                 mov     rbp, rax
.text:0000000000004476                 call    _dcgettext
.text:000000000000447B                 mov     rbx, rax
.text:000000000000447E                 call    ___errno_location
.text:0000000000004483                 mov     esi, [rax]
.text:0000000000004485                 mov     rcx, rbp
.text:0000000000004488                 mov     rdx, rbx
.text:000000000000448B                 mov     edi, 1
.text:0000000000004490                 xor     eax, eax
.text:0000000000004492                 call    nl_error
.text:0000000000004497
.text:0000000000004497 loc_4497:                               ; CODE XREF: set_fd_flags+AB↑j
.text:0000000000004497                 and     ebx, 0FFFEFFFFh
.text:000000000000449D                 cmp     ebx, r12d
.text:00000000000044A0                 jnz     loc_4413
.text:00000000000044A6                 jmp     loc_43CA
.text:00000000000044AB ; ---------------------------------------------------------------------------
.text:00000000000044AB
.text:00000000000044AB loc_44AB:                               ; CODE XREF: set_fd_flags+3B↑j
.text:00000000000044AB                 call    ___stack_chk_fail
.text:00000000000044AB ; } // starts at 43A0
.text:00000000000044AB set_fd_flags    endp
.text:00000000000044AB
.text:00000000000044B0
.text:00000000000044B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044B0
.text:00000000000044B0
.text:00000000000044B0 skip_via_lseek  proc near               ; CODE XREF: main+11CA↑p
.text:00000000000044B0                                         ; skip+70↓p ...
.text:00000000000044B0
.text:00000000000044B0 var_90          = qword ptr -90h
.text:00000000000044B0 var_70          = qword ptr -70h
.text:00000000000044B0 var_68          = qword ptr -68h
.text:00000000000044B0 var_60          = qword ptr -60h
.text:00000000000044B0 var_40          = qword ptr -40h
.text:00000000000044B0 var_30          = qword ptr -30h
.text:00000000000044B0
.text:00000000000044B0 ; __unwind {
.text:00000000000044B0                 push    r14
.text:00000000000044B2                 push    r13
.text:00000000000044B4                 mov     r13, rdi
.text:00000000000044B7                 push    r12
.text:00000000000044B9                 push    rbp
.text:00000000000044BA                 mov     r12d, ecx
.text:00000000000044BD                 push    rbx
.text:00000000000044BE                 mov     ebx, esi
.text:00000000000044C0                 mov     rbp, rdx
.text:00000000000044C3                 mov     esi, 80306D02h  ; request
.text:00000000000044C8                 mov     edi, ebx        ; fd
.text:00000000000044CA                 sub     rsp, 70h
.text:00000000000044CE                 mov     rax, fs:28h
.text:00000000000044D7                 mov     [rsp+98h+var_30], rax
.text:00000000000044DC                 xor     eax, eax
.text:00000000000044DE                 mov     rdx, rsp
.text:00000000000044E1                 call    _ioctl
.text:00000000000044E6                 mov     rsi, rbp        ; offset
.text:00000000000044E9                 mov     edx, r12d       ; whence
.text:00000000000044EC                 mov     edi, ebx        ; fd
.text:00000000000044EE                 mov     r14d, eax
.text:00000000000044F1                 call    _lseek
.text:00000000000044F6                 test    rax, rax
.text:00000000000044F9                 mov     rbp, rax
.text:00000000000044FC                 js      short loc_4538
.text:00000000000044FE                 test    r14d, r14d
.text:0000000000004501                 jnz     short loc_4538
.text:0000000000004503                 lea     rdx, [rsp+98h+var_68]
.text:0000000000004508                 xor     eax, eax
.text:000000000000450A                 mov     esi, 80306D02h  ; request
.text:000000000000450F                 mov     edi, ebx        ; fd
.text:0000000000004511                 call    _ioctl
.text:0000000000004516                 test    eax, eax
.text:0000000000004518                 jnz     short loc_4538
.text:000000000000451A                 mov     rax, [rsp+98h+var_60]
.text:000000000000451F                 cmp     [rsp+98h+var_90], rax
.text:0000000000004524                 jnz     short loc_4538
.text:0000000000004526                 mov     rax, [rsp+98h+var_40]
.text:000000000000452B                 cmp     [rsp+98h+var_70], rax
.text:0000000000004530                 jz      short loc_4558
.text:0000000000004532                 nop     word ptr [rax+rax+00h]
.text:0000000000004538
.text:0000000000004538 loc_4538:                               ; CODE XREF: skip_via_lseek+4C↑j
.text:0000000000004538                                         ; skip_via_lseek+51↑j ...
.text:0000000000004538                 mov     rcx, [rsp+98h+var_30]
.text:000000000000453D                 xor     rcx, fs:28h
.text:0000000000004546                 mov     rax, rbp
.text:0000000000004549                 jnz     short loc_459E
.text:000000000000454B                 add     rsp, 70h
.text:000000000000454F                 pop     rbx
.text:0000000000004550                 pop     rbp
.text:0000000000004551                 pop     r12
.text:0000000000004553                 pop     r13
.text:0000000000004555                 pop     r14
.text:0000000000004557                 retn
.text:0000000000004558 ; ---------------------------------------------------------------------------
.text:0000000000004558
.text:0000000000004558 loc_4558:                               ; CODE XREF: skip_via_lseek+80↑j
.text:0000000000004558                 cmp     cs:status_level, 1
.text:000000000000455F                 jz      short loc_458D
.text:0000000000004561                 mov     rbx, [rsp+98h+var_68]
.text:0000000000004566                 lea     rsi, aWarningWorking ; "warning: working around lseek kernel bu"...
.text:000000000000456D                 mov     edx, 5          ; category
.text:0000000000004572                 xor     edi, edi        ; domainname
.text:0000000000004574                 call    _dcgettext
.text:0000000000004579                 mov     r8, rbx
.text:000000000000457C                 mov     rdx, rax
.text:000000000000457F                 mov     rcx, r13
.text:0000000000004582                 xor     esi, esi
.text:0000000000004584                 xor     edi, edi
.text:0000000000004586                 xor     eax, eax
.text:0000000000004588                 call    nl_error
.text:000000000000458D
.text:000000000000458D loc_458D:                               ; CODE XREF: skip_via_lseek+AF↑j
.text:000000000000458D                 call    ___errno_location
.text:0000000000004592                 or      rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000004596                 mov     dword ptr [rax], 0
.text:000000000000459C                 jmp     short loc_4538
.text:000000000000459E ; ---------------------------------------------------------------------------
.text:000000000000459E
.text:000000000000459E loc_459E:                               ; CODE XREF: skip_via_lseek+99↑j
.text:000000000000459E                 call    ___stack_chk_fail
.text:000000000000459E ; } // starts at 44B0
.text:000000000000459E skip_via_lseek  endp
.text:000000000000459E
.text:000000000000459E ; ---------------------------------------------------------------------------
.text:00000000000045A3                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0
.text:00000000000045B0 ; __int64 __fastcall invalidate_cache(int fd)
.text:00000000000045B0 invalidate_cache proc near              ; CODE XREF: main+E03↑p
.text:00000000000045B0                                         ; main+F8A↑p ...
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 push    r15
.text:00000000000045B2                 push    r14
.text:00000000000045B4                 push    r13
.text:00000000000045B6                 push    r12
.text:00000000000045B8                 push    rbp
.text:00000000000045B9                 push    rbx
.text:00000000000045BA                 sub     rsp, 8
.text:00000000000045BE                 test    edi, edi
.text:00000000000045C0                 jnz     loc_4650
.text:00000000000045C6                 movzx   r15d, cs:i_nocache_eof
.text:00000000000045CE                 lea     rax, i_pending_7166
.text:00000000000045D5
.text:00000000000045D5 loc_45D5:                               ; CODE XREF: invalidate_cache+AF↓j
.text:00000000000045D5                 test    rsi, rsi
.text:00000000000045D8                 mov     rbx, [rax]
.text:00000000000045DB                 jz      short loc_4610
.text:00000000000045DD                 add     rbx, rsi
.text:00000000000045E0                 mov     r14, rbx
.text:00000000000045E3                 and     r14d, 1FFFFh
.text:00000000000045EA                 cmp     rbx, r14
.text:00000000000045ED                 mov     [rax], r14
.text:00000000000045F0                 ja      short loc_4668
.text:00000000000045F2
.text:00000000000045F2 loc_45F2:                               ; CODE XREF: invalidate_cache+68↓j
.text:00000000000045F2                                         ; invalidate_cache+BB↓j
.text:00000000000045F2                 mov     r12d, 1
.text:00000000000045F8
.text:00000000000045F8 loc_45F8:                               ; CODE XREF: invalidate_cache+96↓j
.text:00000000000045F8                                         ; invalidate_cache+CE↓j ...
.text:00000000000045F8                 add     rsp, 8
.text:00000000000045FC                 mov     eax, r12d
.text:00000000000045FF                 pop     rbx
.text:0000000000004600                 pop     rbp
.text:0000000000004601                 pop     r12
.text:0000000000004603                 pop     r13
.text:0000000000004605                 pop     r14
.text:0000000000004607                 pop     r15
.text:0000000000004609                 retn
.text:0000000000004609 ; ---------------------------------------------------------------------------
.text:000000000000460A                 align 10h
.text:0000000000004610
.text:0000000000004610 loc_4610:                               ; CODE XREF: invalidate_cache+2B↑j
.text:0000000000004610                 test    rbx, rbx
.text:0000000000004613                 jnz     short loc_461A
.text:0000000000004615                 test    r15b, r15b
.text:0000000000004618                 jz      short loc_45F2
.text:000000000000461A
.text:000000000000461A loc_461A:                               ; CODE XREF: invalidate_cache+63↑j
.text:000000000000461A                 xor     r14d, r14d
.text:000000000000461D
.text:000000000000461D loc_461D:                               ; CODE XREF: invalidate_cache+BD↓j
.text:000000000000461D                 test    edi, edi
.text:000000000000461F                 mov     rbp, rsi
.text:0000000000004622                 mov     r13d, edi
.text:0000000000004625                 jnz     short loc_4670
.text:0000000000004627                 movzx   r12d, cs:input_seekable
.text:000000000000462F                 mov     rsi, cs:input_offset
.text:0000000000004636                 test    r12b, r12b
.text:0000000000004639                 jnz     short loc_469C
.text:000000000000463B                 call    ___errno_location
.text:0000000000004640                 mov     dword ptr [rax], 1Dh
.text:0000000000004646                 jmp     short loc_45F8
.text:0000000000004646 ; ---------------------------------------------------------------------------
.text:0000000000004648                 align 10h
.text:0000000000004650
.text:0000000000004650 loc_4650:                               ; CODE XREF: invalidate_cache+10↑j
.text:0000000000004650                 movzx   r15d, cs:o_nocache_eof
.text:0000000000004658                 lea     rax, o_pending_7167
.text:000000000000465F                 jmp     loc_45D5
.text:000000000000465F ; ---------------------------------------------------------------------------
.text:0000000000004664                 align 8
.text:0000000000004668
.text:0000000000004668 loc_4668:                               ; CODE XREF: invalidate_cache+40↑j
.text:0000000000004668                 sub     rbx, r14
.text:000000000000466B                 jz      short loc_45F2
.text:000000000000466D                 jmp     short loc_461D
.text:000000000000466D ; ---------------------------------------------------------------------------
.text:000000000000466F                 align 10h
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: invalidate_cache+75↑j
.text:0000000000004670                 mov     rsi, cs:output_offset_7179
.text:0000000000004677                 xor     r12d, r12d
.text:000000000000467A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000467E                 jz      loc_45F8
.text:0000000000004684                 test    rsi, rsi
.text:0000000000004687                 js      short loc_4708
.text:0000000000004689                 test    rbp, rbp
.text:000000000000468C                 jz      short loc_46A8
.text:000000000000468E                 lea     rax, [r14+rbx]
.text:0000000000004692                 add     rsi, rax
.text:0000000000004695                 mov     cs:output_offset_7179, rsi
.text:000000000000469C
.text:000000000000469C loc_469C:                               ; CODE XREF: invalidate_cache+89↑j
.text:000000000000469C                                         ; invalidate_cache+173↓j
.text:000000000000469C                 xor     r12d, r12d
.text:000000000000469F                 test    rsi, rsi
.text:00000000000046A2                 js      loc_45F8
.text:00000000000046A8
.text:00000000000046A8 loc_46A8:                               ; CODE XREF: invalidate_cache+DC↑j
.text:00000000000046A8                 sub     rsi, rbx
.text:00000000000046AB                 test    rbp, rbp
.text:00000000000046AE                 jnz     short loc_46F0
.text:00000000000046B0                 test    rbx, rbx
.text:00000000000046B3                 jz      short loc_46F0
.text:00000000000046B5                 test    r15b, r15b
.text:00000000000046B8                 jz      short loc_4700
.text:00000000000046BA
.text:00000000000046BA loc_46BA:                               ; CODE XREF: invalidate_cache+148↓j
.text:00000000000046BA                 mov     rax, rsi
.text:00000000000046BD                 xor     edx, edx
.text:00000000000046BF                 xor     ebx, ebx
.text:00000000000046C1                 div     cs:page_size
.text:00000000000046C8                 sub     rsi, rdx        ; offset
.text:00000000000046CB
.text:00000000000046CB loc_46CB:                               ; CODE XREF: invalidate_cache+146↓j
.text:00000000000046CB                                         ; invalidate_cache+153↓j
.text:00000000000046CB                 mov     ecx, 4          ; advise
.text:00000000000046D0                 mov     rdx, rbx        ; len
.text:00000000000046D3                 mov     edi, r13d       ; fd
.text:00000000000046D6                 call    _posix_fadvise
.text:00000000000046DB                 cmp     eax, 0FFFFFFFFh
.text:00000000000046DE                 setnz   r12b
.text:00000000000046E2                 jmp     loc_45F8
.text:00000000000046E2 ; ---------------------------------------------------------------------------
.text:00000000000046E7                 align 10h
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: invalidate_cache+FE↑j
.text:00000000000046F0                                         ; invalidate_cache+103↑j
.text:00000000000046F0                 sub     rsi, r14
.text:00000000000046F3                 test    rbx, rbx
.text:00000000000046F6                 jnz     short loc_46CB
.text:00000000000046F8                 jmp     short loc_46BA
.text:00000000000046F8 ; ---------------------------------------------------------------------------
.text:00000000000046FA                 align 20h
.text:0000000000004700
.text:0000000000004700 loc_4700:                               ; CODE XREF: invalidate_cache+108↑j
.text:0000000000004700                 sub     rsi, r14
.text:0000000000004703                 jmp     short loc_46CB
.text:0000000000004703 ; ---------------------------------------------------------------------------
.text:0000000000004705                 align 8
.text:0000000000004708
.text:0000000000004708 loc_4708:                               ; CODE XREF: invalidate_cache+D7↑j
.text:0000000000004708                 xor     esi, esi        ; offset
.text:000000000000470A                 mov     edx, 1          ; whence
.text:000000000000470F                 mov     edi, 1          ; fd
.text:0000000000004714                 call    _lseek
.text:0000000000004719                 mov     rsi, rax
.text:000000000000471C                 mov     cs:output_offset_7179, rax
.text:0000000000004723                 jmp     loc_469C
.text:0000000000004723 ; } // starts at 45B0
.text:0000000000004723 invalidate_cache endp
.text:0000000000004723
.text:0000000000004723 ; ---------------------------------------------------------------------------
.text:0000000000004728                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730
.text:0000000000004730 maybe_close_stdout proc near            ; DATA XREF: main+1AE↑o
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 cmp     cs:close_stdout_required, 0
.text:0000000000004737                 jnz     short loc_4758
.text:0000000000004739                 sub     rsp, 8
.text:000000000000473D                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000004744                 call    close_stream
.text:0000000000004749                 test    eax, eax
.text:000000000000474B                 jnz     short loc_475D
.text:000000000000474D                 add     rsp, 8
.text:0000000000004751                 retn
.text:0000000000004751 ; ---------------------------------------------------------------------------
.text:0000000000004752                 align 8
.text:0000000000004758
.text:0000000000004758 loc_4758:                               ; CODE XREF: maybe_close_stdout+7↑j
.text:0000000000004758                 jmp     close_stdout
.text:000000000000475D ; ---------------------------------------------------------------------------
.text:000000000000475D
.text:000000000000475D loc_475D:                               ; CODE XREF: maybe_close_stdout+1B↑j
.text:000000000000475D                 mov     edi, 1          ; status
.text:0000000000004762                 call    __exit
.text:0000000000004762 ; } // starts at 4730
.text:0000000000004762 maybe_close_stdout endp
.text:0000000000004762
.text:0000000000004762 ; ---------------------------------------------------------------------------
.text:0000000000004767                 align 10h
.text:0000000000004770
.text:0000000000004770 ; =============== S U B R O U T I N E =======================================
.text:0000000000004770
.text:0000000000004770
.text:0000000000004770 print_stats_part_2 proc near            ; CODE XREF: main+DED↑p
.text:0000000000004770                                         ; process_signals+7A↓p ...
.text:0000000000004770 ; __unwind {
.text:0000000000004770                 push    r13
.text:0000000000004772                 push    r12
.text:0000000000004774                 push    rbp
.text:0000000000004775                 push    rbx
.text:0000000000004776                 sub     rsp, 8
.text:000000000000477A                 mov     ecx, cs:progress_len
.text:0000000000004780                 test    ecx, ecx
.text:0000000000004782                 jle     short loc_47AE
.text:0000000000004784                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000478B                 mov     rax, [rdi+28h]
.text:000000000000478F                 cmp     rax, [rdi+30h]
.text:0000000000004793                 jnb     loc_4880
.text:0000000000004799                 lea     rdx, [rax+1]
.text:000000000000479D                 mov     [rdi+28h], rdx
.text:00000000000047A1                 mov     byte ptr [rax], 0Ah
.text:00000000000047A4
.text:00000000000047A4 loc_47A4:                               ; CODE XREF: print_stats_part_2+11A↓j
.text:00000000000047A4                 mov     cs:progress_len, 0
.text:00000000000047AE
.text:00000000000047AE loc_47AE:                               ; CODE XREF: print_stats_part_2+12↑j
.text:00000000000047AE                 mov     r13, cs:w_partial
.text:00000000000047B5                 lea     rsi, aLuLuRecordsInL ; "%lu+%lu records in\n%lu+%lu records out"...
.text:00000000000047BC                 mov     rbx, cs:r_full
.text:00000000000047C3                 xor     edi, edi        ; domainname
.text:00000000000047C5                 mov     r12, cs:w_full
.text:00000000000047CC                 mov     rbp, cs:r_partial
.text:00000000000047D3                 mov     edx, 5          ; category
.text:00000000000047D8                 call    _dcgettext
.text:00000000000047DD                 sub     rsp, 8
.text:00000000000047E1                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000047E8                 mov     rdx, rax
.text:00000000000047EB                 push    r13
.text:00000000000047ED                 mov     rcx, rbx
.text:00000000000047F0                 xor     eax, eax
.text:00000000000047F2                 mov     r9, r12
.text:00000000000047F5                 mov     r8, rbp
.text:00000000000047F8                 mov     esi, 1
.text:00000000000047FD                 call    ___fprintf_chk
.text:0000000000004802                 mov     rbx, cs:r_truncate
.text:0000000000004809                 pop     rax
.text:000000000000480A                 pop     rdx
.text:000000000000480B                 test    rbx, rbx
.text:000000000000480E                 jnz     short loc_4840
.text:0000000000004810
.text:0000000000004810 loc_4810:                               ; CODE XREF: print_stats_part_2+107↓j
.text:0000000000004810                 cmp     cs:status_level, 2
.text:0000000000004817                 jz      short loc_4830
.text:0000000000004819                 add     rsp, 8
.text:000000000000481D                 xor     edi, edi
.text:000000000000481F                 pop     rbx
.text:0000000000004820                 pop     rbp
.text:0000000000004821                 pop     r12
.text:0000000000004823                 pop     r13
.text:0000000000004825                 jmp     print_xfer_stats
.text:0000000000004825 ; ---------------------------------------------------------------------------
.text:000000000000482A                 align 10h
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: print_stats_part_2+A7↑j
.text:0000000000004830                 add     rsp, 8
.text:0000000000004834                 pop     rbx
.text:0000000000004835                 pop     rbp
.text:0000000000004836                 pop     r12
.text:0000000000004838                 pop     r13
.text:000000000000483A                 retn
.text:000000000000483A ; ---------------------------------------------------------------------------
.text:000000000000483B                 align 20h
.text:0000000000004840
.text:0000000000004840 loc_4840:                               ; CODE XREF: print_stats_part_2+9E↑j
.text:0000000000004840                 lea     rdx, aLuTruncatedRec ; "%lu truncated records\n"
.text:0000000000004847                 lea     rsi, aLuTruncatedRec_0 ; "%lu truncated record\n"
.text:000000000000484E                 mov     rcx, rbx        ; n
.text:0000000000004851                 xor     edi, edi        ; domainname
.text:0000000000004853                 mov     r8d, 5          ; category
.text:0000000000004859                 call    _dcngettext
.text:000000000000485E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004865                 mov     rdx, rax
.text:0000000000004868                 mov     rcx, rbx
.text:000000000000486B                 mov     esi, 1
.text:0000000000004870                 xor     eax, eax
.text:0000000000004872                 call    ___fprintf_chk
.text:0000000000004877                 jmp     short loc_4810
.text:0000000000004877 ; ---------------------------------------------------------------------------
.text:0000000000004879                 align 20h
.text:0000000000004880
.text:0000000000004880 loc_4880:                               ; CODE XREF: print_stats_part_2+23↑j
.text:0000000000004880                 mov     esi, 0Ah        ; int
.text:0000000000004885                 call    ___overflow
.text:000000000000488A                 jmp     loc_47A4
.text:000000000000488A ; } // starts at 4770
.text:000000000000488A print_stats_part_2 endp
.text:000000000000488A
.text:000000000000488A ; ---------------------------------------------------------------------------
.text:000000000000488F                 align 10h
.text:0000000000004890
.text:0000000000004890 ; =============== S U B R O U T I N E =======================================
.text:0000000000004890
.text:0000000000004890
.text:0000000000004890 cleanup         proc near               ; CODE XREF: process_signals:loc_49C8↓p
.text:0000000000004890                                         ; finish_up+4↓p
.text:0000000000004890 ; __unwind {
.text:0000000000004890                 push    rbp
.text:0000000000004891                 push    rbx
.text:0000000000004892                 xor     edi, edi        ; fd
.text:0000000000004894                 sub     rsp, 8
.text:0000000000004898                 call    _close
.text:000000000000489D                 test    eax, eax
.text:000000000000489F                 js      short loc_48B6
.text:00000000000048A1                 mov     edi, 1          ; fd
.text:00000000000048A6                 call    _close
.text:00000000000048AB                 test    eax, eax
.text:00000000000048AD                 js      short loc_48F9
.text:00000000000048AF                 add     rsp, 8
.text:00000000000048B3                 pop     rbx
.text:00000000000048B4                 pop     rbp
.text:00000000000048B5                 retn
.text:00000000000048B6 ; ---------------------------------------------------------------------------
.text:00000000000048B6
.text:00000000000048B6 loc_48B6:                               ; CODE XREF: cleanup+F↑j
.text:00000000000048B6                 mov     rsi, cs:input_file
.text:00000000000048BD                 mov     edi, 4
.text:00000000000048C2                 call    quotearg_style
.text:00000000000048C7                 lea     rsi, aClosingInputFi ; "closing input file %s"
.text:00000000000048CE                 mov     edx, 5          ; category
.text:00000000000048D3                 xor     edi, edi        ; domainname
.text:00000000000048D5                 mov     rbp, rax
.text:00000000000048D8                 call    _dcgettext
.text:00000000000048DD                 mov     rbx, rax
.text:00000000000048E0                 call    ___errno_location
.text:00000000000048E5                 mov     esi, [rax]
.text:00000000000048E7                 mov     rcx, rbp
.text:00000000000048EA                 mov     rdx, rbx
.text:00000000000048ED                 mov     edi, 1
.text:00000000000048F2                 xor     eax, eax
.text:00000000000048F4                 call    nl_error
.text:00000000000048F9
.text:00000000000048F9 loc_48F9:                               ; CODE XREF: cleanup+1D↑j
.text:00000000000048F9                 mov     rsi, cs:output_file
.text:0000000000004900                 mov     edi, 4
.text:0000000000004905                 call    quotearg_style
.text:000000000000490A                 lea     rsi, aClosingOutputF ; "closing output file %s"
.text:0000000000004911                 mov     edx, 5          ; category
.text:0000000000004916                 xor     edi, edi        ; domainname
.text:0000000000004918                 mov     rbp, rax
.text:000000000000491B                 call    _dcgettext
.text:0000000000004920                 mov     rbx, rax
.text:0000000000004923                 call    ___errno_location
.text:0000000000004928                 mov     esi, [rax]
.text:000000000000492A                 mov     rcx, rbp
.text:000000000000492D                 mov     rdx, rbx
.text:0000000000004930                 mov     edi, 1
.text:0000000000004935                 xor     eax, eax
.text:0000000000004937                 call    nl_error
.text:0000000000004937 ; } // starts at 4890
.text:000000000000493C                 nop     dword ptr [rax+00h]
.text:000000000000493C cleanup         endp ; sp-analysis failed
.text:000000000000493C
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940 ; Attributes: bp-based frame
.text:0000000000004940
.text:0000000000004940 process_signals proc near               ; CODE XREF: ifd_reopen:loc_4A42↓p
.text:0000000000004940                                         ; iread:loc_4A9E↓p ...
.text:0000000000004940
.text:0000000000004940 var_s88         = qword ptr  88h
.text:0000000000004940
.text:0000000000004940 ; __unwind {
.text:0000000000004940                 push    rbp
.text:0000000000004941                 push    rbx
.text:0000000000004942                 sub     rsp, 98h
.text:0000000000004949                 mov     rax, fs:28h
.text:0000000000004952                 mov     [rsp+var_s88], rax
.text:000000000000495A                 xor     eax, eax
.text:000000000000495C                 mov     rbp, rsp
.text:000000000000495F                 nop
.text:0000000000004960
.text:0000000000004960 loc_4960:                               ; CODE XREF: process_signals+78↓j
.text:0000000000004960                                         ; process_signals+7F↓j ...
.text:0000000000004960                 mov     eax, cs:interrupt_signal
.text:0000000000004966                 test    eax, eax
.text:0000000000004968                 jnz     short loc_4974
.text:000000000000496A                 mov     eax, cs:info_signal_count
.text:0000000000004970                 test    eax, eax
.text:0000000000004972                 jz      short loc_49F0
.text:0000000000004974
.text:0000000000004974 loc_4974:                               ; CODE XREF: process_signals+28↑j
.text:0000000000004974                 lea     rsi, caught_signals ; set
.text:000000000000497B                 xor     edi, edi        ; how
.text:000000000000497D                 mov     rdx, rbp        ; oset
.text:0000000000004980                 call    _sigprocmask
.text:0000000000004985                 mov     ebx, cs:interrupt_signal
.text:000000000000498B                 mov     eax, cs:info_signal_count
.text:0000000000004991                 test    eax, eax
.text:0000000000004993                 jz      short loc_499E
.text:0000000000004995                 sub     eax, 1
.text:0000000000004998                 mov     cs:info_signal_count, eax
.text:000000000000499E
.text:000000000000499E loc_499E:                               ; CODE XREF: process_signals+53↑j
.text:000000000000499E                 xor     edx, edx        ; oset
.text:00000000000049A0                 mov     rsi, rbp        ; set
.text:00000000000049A3                 mov     edi, 2          ; how
.text:00000000000049A8                 call    _sigprocmask
.text:00000000000049AD                 test    ebx, ebx
.text:00000000000049AF                 jnz     short loc_49C8
.text:00000000000049B1                 cmp     cs:status_level, 1
.text:00000000000049B8                 jz      short loc_4960
.text:00000000000049BA                 call    print_stats_part_2
.text:00000000000049BF                 jmp     short loc_4960
.text:00000000000049BF ; ---------------------------------------------------------------------------
.text:00000000000049C1                 align 8
.text:00000000000049C8
.text:00000000000049C8 loc_49C8:                               ; CODE XREF: process_signals+6F↑j
.text:00000000000049C8                 call    cleanup
.text:00000000000049CD                 cmp     cs:status_level, 1
.text:00000000000049D4                 jz      short loc_49DB
.text:00000000000049D6                 call    print_stats_part_2
.text:00000000000049DB
.text:00000000000049DB loc_49DB:                               ; CODE XREF: process_signals+94↑j
.text:00000000000049DB                 mov     edi, ebx        ; sig
.text:00000000000049DD                 call    _raise
.text:00000000000049E2                 jmp     loc_4960
.text:00000000000049E2 ; ---------------------------------------------------------------------------
.text:00000000000049E7                 align 10h
.text:00000000000049F0
.text:00000000000049F0 loc_49F0:                               ; CODE XREF: process_signals+32↑j
.text:00000000000049F0                 mov     rax, [rsp+var_s88]
.text:00000000000049F8                 xor     rax, fs:28h
.text:0000000000004A01                 jnz     short loc_4A0D
.text:0000000000004A03                 add     rsp, 98h
.text:0000000000004A0A                 pop     rbx
.text:0000000000004A0B                 pop     rbp
.text:0000000000004A0C                 retn
.text:0000000000004A0D ; ---------------------------------------------------------------------------
.text:0000000000004A0D
.text:0000000000004A0D loc_4A0D:                               ; CODE XREF: process_signals+C1↑j
.text:0000000000004A0D                 call    ___stack_chk_fail
.text:0000000000004A0D ; } // starts at 4940
.text:0000000000004A0D process_signals endp
.text:0000000000004A0D
.text:0000000000004A0D ; ---------------------------------------------------------------------------
.text:0000000000004A12                 align 20h
.text:0000000000004A20
.text:0000000000004A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A20
.text:0000000000004A20
.text:0000000000004A20 ; __int64 __fastcall ifd_reopen(int fd2, char *file, int oflag)
.text:0000000000004A20 ifd_reopen      proc near               ; CODE XREF: main+5B3↑p
.text:0000000000004A20                                         ; main+664↑p ...
.text:0000000000004A20 ; __unwind {
.text:0000000000004A20                 push    r14
.text:0000000000004A22                 mov     r14d, edi
.text:0000000000004A25                 push    r13
.text:0000000000004A27                 mov     r13, rsi
.text:0000000000004A2A                 push    r12
.text:0000000000004A2C                 mov     r12d, edx
.text:0000000000004A2F                 push    rbp
.text:0000000000004A30                 mov     ebp, ecx
.text:0000000000004A32                 push    rbx
.text:0000000000004A33                 jmp     short loc_4A42
.text:0000000000004A33 ; ---------------------------------------------------------------------------
.text:0000000000004A35                 align 8
.text:0000000000004A38
.text:0000000000004A38 loc_4A38:                               ; CODE XREF: ifd_reopen+3B↓j
.text:0000000000004A38                 call    ___errno_location
.text:0000000000004A3D                 cmp     dword ptr [rax], 4
.text:0000000000004A40                 jnz     short loc_4A5D
.text:0000000000004A42
.text:0000000000004A42 loc_4A42:                               ; CODE XREF: ifd_reopen+13↑j
.text:0000000000004A42                 call    process_signals
.text:0000000000004A47                 mov     ecx, ebp
.text:0000000000004A49                 mov     edx, r12d       ; oflag
.text:0000000000004A4C                 mov     rsi, r13        ; file
.text:0000000000004A4F                 mov     edi, r14d       ; fd2
.text:0000000000004A52                 call    fd_reopen
.text:0000000000004A57                 test    eax, eax
.text:0000000000004A59                 mov     ebx, eax
.text:0000000000004A5B                 js      short loc_4A38
.text:0000000000004A5D
.text:0000000000004A5D loc_4A5D:                               ; CODE XREF: ifd_reopen+20↑j
.text:0000000000004A5D                 mov     eax, ebx
.text:0000000000004A5F                 pop     rbx
.text:0000000000004A60                 pop     rbp
.text:0000000000004A61                 pop     r12
.text:0000000000004A63                 pop     r13
.text:0000000000004A65                 pop     r14
.text:0000000000004A67                 retn
.text:0000000000004A67 ; } // starts at 4A20
.text:0000000000004A67 ifd_reopen      endp
.text:0000000000004A67
.text:0000000000004A67 ; ---------------------------------------------------------------------------
.text:0000000000004A68                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70
.text:0000000000004A70 ; __int64 __fastcall iread(int fd, void *buf, size_t nbytes)
.text:0000000000004A70 iread           proc near               ; CODE XREF: iread_fullblock+36↓p
.text:0000000000004A70                                         ; DATA XREF: main+C1B↑o ...
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 push    r13
.text:0000000000004A72                 push    r12
.text:0000000000004A74                 mov     r13d, edi
.text:0000000000004A77                 push    rbp
.text:0000000000004A78                 push    rbx
.text:0000000000004A79                 mov     r12, rsi
.text:0000000000004A7C                 mov     rbp, rdx
.text:0000000000004A7F                 sub     rsp, 8
.text:0000000000004A83                 jmp     short loc_4A9E
.text:0000000000004A83 ; ---------------------------------------------------------------------------
.text:0000000000004A85                 align 8
.text:0000000000004A88
.text:0000000000004A88 loc_4A88:                               ; CODE XREF: iread+48↓j
.text:0000000000004A88                 cmp     rax, 0
.text:0000000000004A8C                 jge     short loc_4B00
.text:0000000000004A8E                 call    ___errno_location
.text:0000000000004A93                 mov     edx, [rax]
.text:0000000000004A95
.text:0000000000004A95 loc_4A95:                               ; CODE XREF: iread+54↓j
.text:0000000000004A95                 cmp     edx, 4
.text:0000000000004A98                 jnz     loc_4B6A
.text:0000000000004A9E
.text:0000000000004A9E loc_4A9E:                               ; CODE XREF: iread+13↑j
.text:0000000000004A9E                 call    process_signals
.text:0000000000004AA3                 mov     rdx, rbp        ; nbytes
.text:0000000000004AA6                 mov     rsi, r12        ; buf
.text:0000000000004AA9                 mov     edi, r13d       ; fd
.text:0000000000004AAC                 call    _read
.text:0000000000004AB1                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004AB5                 mov     rbx, rax
.text:0000000000004AB8                 jnz     short loc_4A88
.text:0000000000004ABA                 call    ___errno_location
.text:0000000000004ABF                 mov     edx, [rax]
.text:0000000000004AC1                 cmp     edx, 16h
.text:0000000000004AC4                 jnz     short loc_4A95
.text:0000000000004AC6                 mov     rdx, cs:prev_nread_7186
.text:0000000000004ACD                 test    rdx, rdx
.text:0000000000004AD0                 jle     short loc_4AE4
.text:0000000000004AD2                 cmp     rdx, rbp
.text:0000000000004AD5                 jnb     short loc_4AE4
.text:0000000000004AD7                 test    byte ptr cs:input_flags+1, 40h
.text:0000000000004ADE                 jnz     loc_4B78
.text:0000000000004AE4
.text:0000000000004AE4 loc_4AE4:                               ; CODE XREF: iread+60↑j
.text:0000000000004AE4                                         ; iread+65↑j ...
.text:0000000000004AE4                 mov     cs:prev_nread_7186, rbx
.text:0000000000004AEB                 add     rsp, 8
.text:0000000000004AEF                 mov     rax, rbx
.text:0000000000004AF2                 pop     rbx
.text:0000000000004AF3                 pop     rbp
.text:0000000000004AF4                 pop     r12
.text:0000000000004AF6                 pop     r13
.text:0000000000004AF8                 retn
.text:0000000000004AF8 ; ---------------------------------------------------------------------------
.text:0000000000004AF9                 align 20h
.text:0000000000004B00
.text:0000000000004B00 loc_4B00:                               ; CODE XREF: iread+1C↑j
.text:0000000000004B00                 jle     short loc_4B6A
.text:0000000000004B02                 cmp     rax, rbp
.text:0000000000004B05                 jnb     short loc_4B6A
.text:0000000000004B07                 call    process_signals
.text:0000000000004B0C
.text:0000000000004B0C loc_4B0C:                               ; CODE XREF: iread+FD↓j
.text:0000000000004B0C                 cmp     cs:warn_partial_read, 0
.text:0000000000004B13                 jz      short loc_4AE4
.text:0000000000004B15                 mov     r12, cs:prev_nread_7186
.text:0000000000004B1C                 test    r12, r12
.text:0000000000004B1F                 jle     short loc_4AE4
.text:0000000000004B21                 cmp     r12, rbp
.text:0000000000004B24                 jnb     short loc_4AE4
.text:0000000000004B26                 cmp     cs:status_level, 1
.text:0000000000004B2D                 jz      short loc_4B5E
.text:0000000000004B2F                 lea     rdx, aWarningPartial ; "warning: partial read (%lu bytes); sugg"...
.text:0000000000004B36                 lea     rsi, aWarningPartial_0 ; "warning: partial read (%lu byte); sugge"...
.text:0000000000004B3D                 mov     rcx, r12        ; n
.text:0000000000004B40                 xor     edi, edi        ; domainname
.text:0000000000004B42                 mov     r8d, 5          ; category
.text:0000000000004B48                 call    _dcngettext
.text:0000000000004B4D                 mov     rcx, r12
.text:0000000000004B50                 mov     rdx, rax
.text:0000000000004B53                 xor     esi, esi
.text:0000000000004B55                 xor     edi, edi
.text:0000000000004B57                 xor     eax, eax
.text:0000000000004B59                 call    nl_error
.text:0000000000004B5E
.text:0000000000004B5E loc_4B5E:                               ; CODE XREF: iread+BD↑j
.text:0000000000004B5E                 mov     cs:warn_partial_read, 0
.text:0000000000004B65                 jmp     loc_4AE4
.text:0000000000004B6A ; ---------------------------------------------------------------------------
.text:0000000000004B6A
.text:0000000000004B6A loc_4B6A:                               ; CODE XREF: iread+28↑j
.text:0000000000004B6A                                         ; iread:loc_4B00↑j ...
.text:0000000000004B6A                 test    rbx, rbx
.text:0000000000004B6D                 jg      short loc_4B0C
.text:0000000000004B6F                 jmp     loc_4AE4
.text:0000000000004B6F ; ---------------------------------------------------------------------------
.text:0000000000004B74                 align 8
.text:0000000000004B78
.text:0000000000004B78 loc_4B78:                               ; CODE XREF: iread+6E↑j
.text:0000000000004B78                 mov     dword ptr [rax], 0
.text:0000000000004B7E                 xor     ebx, ebx
.text:0000000000004B80                 jmp     loc_4AE4
.text:0000000000004B80 ; } // starts at 4A70
.text:0000000000004B80 iread           endp
.text:0000000000004B80
.text:0000000000004B80 ; ---------------------------------------------------------------------------
.text:0000000000004B85                 align 10h
.text:0000000000004B90
.text:0000000000004B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B90
.text:0000000000004B90
.text:0000000000004B90 ; __int64 __fastcall iread_fullblock(int fd, void *buf, size_t nbytes)
.text:0000000000004B90 iread_fullblock proc near               ; DATA XREF: main+3C6↑o
.text:0000000000004B90                                         ; main+1156↑o
.text:0000000000004B90 ; __unwind {
.text:0000000000004B90                 test    rdx, rdx
.text:0000000000004B93                 jz      short loc_4BEE
.text:0000000000004B95                 push    r13
.text:0000000000004B97                 push    r12
.text:0000000000004B99                 mov     r13d, edi
.text:0000000000004B9C                 push    rbp
.text:0000000000004B9D                 push    rbx
.text:0000000000004B9E                 mov     rbp, rsi
.text:0000000000004BA1                 mov     rbx, rdx
.text:0000000000004BA4                 xor     r12d, r12d
.text:0000000000004BA7                 sub     rsp, 8
.text:0000000000004BAB                 jmp     short loc_4BBD
.text:0000000000004BAB ; ---------------------------------------------------------------------------
.text:0000000000004BAD                 align 10h
.text:0000000000004BB0
.text:0000000000004BB0 loc_4BB0:                               ; CODE XREF: iread_fullblock+3E↓j
.text:0000000000004BB0                 jz      short loc_4BE0
.text:0000000000004BB2                 add     r12, rax
.text:0000000000004BB5                 add     rbp, rax
.text:0000000000004BB8                 sub     rbx, rax
.text:0000000000004BBB                 jz      short loc_4BE0
.text:0000000000004BBD
.text:0000000000004BBD loc_4BBD:                               ; CODE XREF: iread_fullblock+1B↑j
.text:0000000000004BBD                 mov     rdx, rbx        ; nbytes
.text:0000000000004BC0                 mov     rsi, rbp        ; buf
.text:0000000000004BC3                 mov     edi, r13d       ; fd
.text:0000000000004BC6                 call    iread
.text:0000000000004BCB                 test    rax, rax
.text:0000000000004BCE                 jns     short loc_4BB0
.text:0000000000004BD0                 add     rsp, 8
.text:0000000000004BD4                 pop     rbx
.text:0000000000004BD5                 pop     rbp
.text:0000000000004BD6                 pop     r12
.text:0000000000004BD8                 pop     r13
.text:0000000000004BDA                 retn
.text:0000000000004BDA ; ---------------------------------------------------------------------------
.text:0000000000004BDB                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 loc_4BE0:                               ; CODE XREF: iread_fullblock:loc_4BB0↑j
.text:0000000000004BE0                                         ; iread_fullblock+2B↑j
.text:0000000000004BE0                 add     rsp, 8
.text:0000000000004BE4                 mov     rax, r12
.text:0000000000004BE7                 pop     rbx
.text:0000000000004BE8                 pop     rbp
.text:0000000000004BE9                 pop     r12
.text:0000000000004BEB                 pop     r13
.text:0000000000004BED                 retn
.text:0000000000004BEE ; ---------------------------------------------------------------------------
.text:0000000000004BEE
.text:0000000000004BEE loc_4BEE:                               ; CODE XREF: iread_fullblock+3↑j
.text:0000000000004BEE                 xor     eax, eax
.text:0000000000004BF0                 retn
.text:0000000000004BF0 ; } // starts at 4B90
.text:0000000000004BF0 iread_fullblock endp
.text:0000000000004BF0
.text:0000000000004BF0 ; ---------------------------------------------------------------------------
.text:0000000000004BF1                 align 20h
.text:0000000000004C00
.text:0000000000004C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C00
.text:0000000000004C00
.text:0000000000004C00 finish_up       proc near               ; CODE XREF: main:loc_2F4E↑p
.text:0000000000004C00                                         ; main+1AE7↑p ...
.text:0000000000004C00 ; __unwind {
.text:0000000000004C00                 sub     rsp, 8
.text:0000000000004C04                 call    cleanup
.text:0000000000004C09                 cmp     cs:status_level, 1
.text:0000000000004C10                 jz      short loc_4C17
.text:0000000000004C12                 call    print_stats_part_2
.text:0000000000004C17
.text:0000000000004C17 loc_4C17:                               ; CODE XREF: finish_up+10↑j
.text:0000000000004C17                 add     rsp, 8
.text:0000000000004C1B                 jmp     process_signals
.text:0000000000004C1B ; } // starts at 4C00
.text:0000000000004C1B finish_up       endp
.text:0000000000004C1B
.text:0000000000004C20
.text:0000000000004C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C20
.text:0000000000004C20
.text:0000000000004C20 alloc_ibuf_part_4 proc near             ; CODE XREF: main:loc_3644↑p
.text:0000000000004C20                                         ; alloc_obuf+37↓p ...
.text:0000000000004C20
.text:0000000000004C20 var_20          = qword ptr -20h
.text:0000000000004C20
.text:0000000000004C20 ; __unwind {
.text:0000000000004C20                 push    rbp
.text:0000000000004C21                 push    rbx
.text:0000000000004C22                 sub     rsp, 2A8h
.text:0000000000004C29                 mov     rbx, cs:page_size
.text:0000000000004C30                 mov     rbp, cs:input_blocksize
.text:0000000000004C37                 mov     rax, fs:28h
.text:0000000000004C40                 mov     [rsp+2B8h+var_20], rax
.text:0000000000004C48                 xor     eax, eax
.text:0000000000004C4A                 lea     rdi, [rbp+rbx*2+3] ; size
.text:0000000000004C4F                 call    _malloc
.text:0000000000004C54                 test    rax, rax
.text:0000000000004C57                 jz      short loc_4C8D
.text:0000000000004C59                 lea     rcx, [rax+rbx+1]
.text:0000000000004C5E                 xor     edx, edx
.text:0000000000004C60                 mov     rax, rcx
.text:0000000000004C63                 div     rbx
.text:0000000000004C66                 sub     rcx, rdx
.text:0000000000004C69                 mov     rax, [rsp+2B8h+var_20]
.text:0000000000004C71                 xor     rax, fs:28h
.text:0000000000004C7A                 mov     cs:ibuf, rcx
.text:0000000000004C81                 jnz     short loc_4CD5
.text:0000000000004C83                 add     rsp, 2A8h
.text:0000000000004C8A                 pop     rbx
.text:0000000000004C8B                 pop     rbp
.text:0000000000004C8C                 retn
.text:0000000000004C8D ; ---------------------------------------------------------------------------
.text:0000000000004C8D
.text:0000000000004C8D loc_4C8D:                               ; CODE XREF: alloc_ibuf_part_4+37↑j
.text:0000000000004C8D                 mov     r8d, 1
.text:0000000000004C93                 mov     ecx, 1
.text:0000000000004C98                 mov     rsi, rsp
.text:0000000000004C9B                 mov     edx, 1F1h
.text:0000000000004CA0                 mov     rdi, rbp
.text:0000000000004CA3                 call    human_readable
.text:0000000000004CA8                 lea     rsi, aMemoryExhauste ; "memory exhausted by input buffer of siz"...
.text:0000000000004CAF                 mov     rbx, rax
.text:0000000000004CB2                 mov     edx, 5          ; category
.text:0000000000004CB7                 xor     edi, edi        ; domainname
.text:0000000000004CB9                 call    _dcgettext
.text:0000000000004CBE                 mov     r8, rbx
.text:0000000000004CC1                 mov     rdx, rax
.text:0000000000004CC4                 mov     rcx, rbp
.text:0000000000004CC7                 xor     esi, esi
.text:0000000000004CC9                 mov     edi, 1
.text:0000000000004CCE                 xor     eax, eax
.text:0000000000004CD0                 call    nl_error
.text:0000000000004CD5
.text:0000000000004CD5 loc_4CD5:                               ; CODE XREF: alloc_ibuf_part_4+61↑j
.text:0000000000004CD5                 call    ___stack_chk_fail
.text:0000000000004CD5 ; } // starts at 4C20
.text:0000000000004CD5 alloc_ibuf_part_4 endp
.text:0000000000004CD5
.text:0000000000004CD5 ; ---------------------------------------------------------------------------
.text:0000000000004CDA                 align 20h
.text:0000000000004CE0
.text:0000000000004CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CE0
.text:0000000000004CE0
.text:0000000000004CE0 alloc_obuf_part_5 proc near             ; CODE XREF: alloc_obuf:loc_4DCE↓j
.text:0000000000004CE0
.text:0000000000004CE0 var_20          = qword ptr -20h
.text:0000000000004CE0
.text:0000000000004CE0 ; __unwind {
.text:0000000000004CE0                 push    rbp
.text:0000000000004CE1                 push    rbx
.text:0000000000004CE2                 sub     rsp, 2A8h
.text:0000000000004CE9                 mov     rbx, cs:page_size
.text:0000000000004CF0                 mov     rbp, cs:output_blocksize
.text:0000000000004CF7                 mov     rax, fs:28h
.text:0000000000004D00                 mov     [rsp+2B8h+var_20], rax
.text:0000000000004D08                 xor     eax, eax
.text:0000000000004D0A                 lea     rdi, [rbx+rbp-1] ; size
.text:0000000000004D0F                 call    _malloc
.text:0000000000004D14                 test    rax, rax
.text:0000000000004D17                 jz      short loc_4D4D
.text:0000000000004D19                 lea     rcx, [rax+rbx-1]
.text:0000000000004D1E                 xor     edx, edx
.text:0000000000004D20                 mov     rax, rcx
.text:0000000000004D23                 div     rbx
.text:0000000000004D26                 sub     rcx, rdx
.text:0000000000004D29                 mov     rax, [rsp+2B8h+var_20]
.text:0000000000004D31                 xor     rax, fs:28h
.text:0000000000004D3A                 mov     cs:obuf, rcx
.text:0000000000004D41                 jnz     short loc_4D95
.text:0000000000004D43                 add     rsp, 2A8h
.text:0000000000004D4A                 pop     rbx
.text:0000000000004D4B                 pop     rbp
.text:0000000000004D4C                 retn
.text:0000000000004D4D ; ---------------------------------------------------------------------------
.text:0000000000004D4D
.text:0000000000004D4D loc_4D4D:                               ; CODE XREF: alloc_obuf_part_5+37↑j
.text:0000000000004D4D                 mov     r8d, 1
.text:0000000000004D53                 mov     ecx, 1
.text:0000000000004D58                 mov     rsi, rsp
.text:0000000000004D5B                 mov     edx, 1F1h
.text:0000000000004D60                 mov     rdi, rbp
.text:0000000000004D63                 call    human_readable
.text:0000000000004D68                 lea     rsi, aMemoryExhauste_0 ; "memory exhausted by output buffer of si"...
.text:0000000000004D6F                 mov     rbx, rax
.text:0000000000004D72                 mov     edx, 5          ; category
.text:0000000000004D77                 xor     edi, edi        ; domainname
.text:0000000000004D79                 call    _dcgettext
.text:0000000000004D7E                 mov     r8, rbx
.text:0000000000004D81                 mov     rdx, rax
.text:0000000000004D84                 mov     rcx, rbp
.text:0000000000004D87                 xor     esi, esi
.text:0000000000004D89                 mov     edi, 1
.text:0000000000004D8E                 xor     eax, eax
.text:0000000000004D90                 call    nl_error
.text:0000000000004D95
.text:0000000000004D95 loc_4D95:                               ; CODE XREF: alloc_obuf_part_5+61↑j
.text:0000000000004D95                 call    ___stack_chk_fail
.text:0000000000004D95 ; } // starts at 4CE0
.text:0000000000004D95 alloc_obuf_part_5 endp
.text:0000000000004D95
.text:0000000000004D95 ; ---------------------------------------------------------------------------
.text:0000000000004D9A                 align 20h
.text:0000000000004DA0
.text:0000000000004DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DA0
.text:0000000000004DA0
.text:0000000000004DA0 alloc_obuf      proc near               ; CODE XREF: main:loc_26D0↑p
.text:0000000000004DA0                                         ; skip:loc_5899↓p
.text:0000000000004DA0 ; __unwind {
.text:0000000000004DA0                 cmp     cs:obuf, 0
.text:0000000000004DA8                 jz      short loc_4DAC
.text:0000000000004DAA                 rep retn
.text:0000000000004DAC ; ---------------------------------------------------------------------------
.text:0000000000004DAC
.text:0000000000004DAC loc_4DAC:                               ; CODE XREF: alloc_obuf+8↑j
.text:0000000000004DAC                 test    byte ptr cs:conversions_mask+1, 8
.text:0000000000004DB3                 jnz     short loc_4DCE
.text:0000000000004DB5                 cmp     cs:ibuf, 0
.text:0000000000004DBD                 jz      short loc_4DD3
.text:0000000000004DBF                 mov     rax, cs:ibuf
.text:0000000000004DC6                 mov     cs:obuf, rax
.text:0000000000004DCD                 retn
.text:0000000000004DCE ; ---------------------------------------------------------------------------
.text:0000000000004DCE
.text:0000000000004DCE loc_4DCE:                               ; CODE XREF: alloc_obuf+13↑j
.text:0000000000004DCE                 jmp     alloc_obuf_part_5
.text:0000000000004DD3 ; ---------------------------------------------------------------------------
.text:0000000000004DD3
.text:0000000000004DD3 loc_4DD3:                               ; CODE XREF: alloc_obuf+1D↑j
.text:0000000000004DD3                 sub     rsp, 8
.text:0000000000004DD7                 call    alloc_ibuf_part_4
.text:0000000000004DDC                 mov     rax, cs:ibuf
.text:0000000000004DE3                 mov     cs:obuf, rax
.text:0000000000004DEA                 pop     rax
.text:0000000000004DEB                 retn
.text:0000000000004DEB ; } // starts at 4DA0
.text:0000000000004DEB alloc_obuf      endp
.text:0000000000004DEB
.text:0000000000004DEB ; ---------------------------------------------------------------------------
.text:0000000000004DEC                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DF0
.text:0000000000004DF0
.text:0000000000004DF0 ; __int64 __fastcall iftruncate_constprop_6(__off_t length)
.text:0000000000004DF0 iftruncate_constprop_6 proc near        ; CODE XREF: main+6B6↑p
.text:0000000000004DF0                                         ; main+1865↑p
.text:0000000000004DF0 ; __unwind {
.text:0000000000004DF0                 push    rbp
.text:0000000000004DF1                 push    rbx
.text:0000000000004DF2                 mov     rbp, rdi
.text:0000000000004DF5                 sub     rsp, 8
.text:0000000000004DF9                 jmp     short loc_4E0A
.text:0000000000004DF9 ; ---------------------------------------------------------------------------
.text:0000000000004DFB                 align 20h
.text:0000000000004E00
.text:0000000000004E00 loc_4E00:                               ; CODE XREF: iftruncate_constprop_6+30↓j
.text:0000000000004E00                 call    ___errno_location
.text:0000000000004E05                 cmp     dword ptr [rax], 4
.text:0000000000004E08                 jnz     short loc_4E22
.text:0000000000004E0A
.text:0000000000004E0A loc_4E0A:                               ; CODE XREF: iftruncate_constprop_6+9↑j
.text:0000000000004E0A                 call    process_signals
.text:0000000000004E0F                 mov     rsi, rbp        ; length
.text:0000000000004E12                 mov     edi, 1          ; fd
.text:0000000000004E17                 call    _ftruncate
.text:0000000000004E1C                 test    eax, eax
.text:0000000000004E1E                 mov     ebx, eax
.text:0000000000004E20                 js      short loc_4E00
.text:0000000000004E22
.text:0000000000004E22 loc_4E22:                               ; CODE XREF: iftruncate_constprop_6+18↑j
.text:0000000000004E22                 add     rsp, 8
.text:0000000000004E26                 mov     eax, ebx
.text:0000000000004E28                 pop     rbx
.text:0000000000004E29                 pop     rbp
.text:0000000000004E2A                 retn
.text:0000000000004E2A ; } // starts at 4DF0
.text:0000000000004E2A iftruncate_constprop_6 endp
.text:0000000000004E2A
.text:0000000000004E2A ; ---------------------------------------------------------------------------
.text:0000000000004E2B                 align 10h
.text:0000000000004E30
.text:0000000000004E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E30
.text:0000000000004E30
.text:0000000000004E30 ; __int64 __fastcall iwrite_constprop_7(void *s1, __off_t offset)
.text:0000000000004E30 iwrite_constprop_7 proc near            ; CODE XREF: main+7C1↑p
.text:0000000000004E30                                         ; main+7EC↑p ...
.text:0000000000004E30 ; __unwind {
.text:0000000000004E30                 push    r13
.text:0000000000004E32                 push    r12
.text:0000000000004E34                 mov     r12, rdi
.text:0000000000004E37                 push    rbp
.text:0000000000004E38                 push    rbx
.text:0000000000004E39                 mov     rbp, rsi
.text:0000000000004E3C                 sub     rsp, 8
.text:0000000000004E40                 test    byte ptr cs:output_flags+1, 40h
.text:0000000000004E47                 jz      short loc_4E56
.text:0000000000004E49                 cmp     cs:output_blocksize, rsi
.text:0000000000004E50                 ja      loc_4F90
.text:0000000000004E56
.text:0000000000004E56 loc_4E56:                               ; CODE XREF: iwrite_constprop_7+17↑j
.text:0000000000004E56                                         ; iwrite_constprop_7+1B1↓j
.text:0000000000004E56                 xor     ebx, ebx
.text:0000000000004E58                 test    rbp, rbp
.text:0000000000004E5B                 jnz     short loc_4E76
.text:0000000000004E5D                 jmp     loc_4EF2
.text:0000000000004E5D ; ---------------------------------------------------------------------------
.text:0000000000004E62                 align 8
.text:0000000000004E68
.text:0000000000004E68 loc_4E68:                               ; CODE XREF: iwrite_constprop_7+9F↓j
.text:0000000000004E68                 jz      loc_4F58
.text:0000000000004E6E
.text:0000000000004E6E loc_4E6E:                               ; CODE XREF: iwrite_constprop_7+F4↓j
.text:0000000000004E6E                 add     rbx, rax
.text:0000000000004E71
.text:0000000000004E71 loc_4E71:                               ; CODE XREF: iwrite_constprop_7+A9↓j
.text:0000000000004E71                                         ; iwrite_constprop_7+102↓j
.text:0000000000004E71                 cmp     rbp, rbx
.text:0000000000004E74                 jbe     short loc_4EE0
.text:0000000000004E76
.text:0000000000004E76 loc_4E76:                               ; CODE XREF: iwrite_constprop_7+2B↑j
.text:0000000000004E76                 call    process_signals
.text:0000000000004E7B                 mov     r13d, cs:conversions_mask
.text:0000000000004E82                 mov     cs:final_op_was_seek, 0
.text:0000000000004E89                 test    r13d, 10000h
.text:0000000000004E90                 jz      short loc_4EB8
.text:0000000000004E92                 mov     rsi, r12
.text:0000000000004E95                 mov     rdx, rbp
.text:0000000000004E98
.text:0000000000004E98 loc_4E98:                               ; CODE XREF: iwrite_constprop_7+7A↓j
.text:0000000000004E98                 cmp     byte ptr [rsi], 0
.text:0000000000004E9B                 jnz     short loc_4EB8
.text:0000000000004E9D                 add     rsi, 1          ; s2
.text:0000000000004EA1                 sub     rdx, 1          ; n
.text:0000000000004EA5                 jz      short loc_4F00
.text:0000000000004EA7                 test    dl, 0Fh
.text:0000000000004EAA                 jnz     short loc_4E98
.text:0000000000004EAC                 mov     rdi, r12        ; s1
.text:0000000000004EAF                 call    _memcmp
.text:0000000000004EB4                 test    eax, eax
.text:0000000000004EB6                 jz      short loc_4F00
.text:0000000000004EB8
.text:0000000000004EB8 loc_4EB8:                               ; CODE XREF: iwrite_constprop_7+60↑j
.text:0000000000004EB8                                         ; iwrite_constprop_7+6B↑j ...
.text:0000000000004EB8                 mov     rdx, rbp
.text:0000000000004EBB                 lea     rsi, [r12+rbx]  ; buf
.text:0000000000004EBF                 mov     edi, 1          ; fd
.text:0000000000004EC4                 sub     rdx, rbx        ; n
.text:0000000000004EC7                 call    _write
.text:0000000000004ECC                 test    rax, rax
.text:0000000000004ECF                 jns     short loc_4E68
.text:0000000000004ED1                 call    ___errno_location
.text:0000000000004ED6                 cmp     dword ptr [rax], 4
.text:0000000000004ED9                 jz      short loc_4E71
.text:0000000000004EDB                 nop     dword ptr [rax+rax+00h]
.text:0000000000004EE0
.text:0000000000004EE0 loc_4EE0:                               ; CODE XREF: iwrite_constprop_7+44↑j
.text:0000000000004EE0                                         ; iwrite_constprop_7+108↓j ...
.text:0000000000004EE0                 cmp     cs:o_nocache, 0
.text:0000000000004EE7                 jz      short loc_4EF2
.text:0000000000004EE9                 test    rbx, rbx
.text:0000000000004EEC                 jnz     loc_4F70
.text:0000000000004EF2
.text:0000000000004EF2 loc_4EF2:                               ; CODE XREF: iwrite_constprop_7+2D↑j
.text:0000000000004EF2                                         ; iwrite_constprop_7+B7↑j
.text:0000000000004EF2                 add     rsp, 8
.text:0000000000004EF6                 mov     rax, rbx
.text:0000000000004EF9                 pop     rbx
.text:0000000000004EFA                 pop     rbp
.text:0000000000004EFB                 pop     r12
.text:0000000000004EFD                 pop     r13
.text:0000000000004EFF                 retn
.text:0000000000004F00 ; ---------------------------------------------------------------------------
.text:0000000000004F00
.text:0000000000004F00 loc_4F00:                               ; CODE XREF: iwrite_constprop_7+75↑j
.text:0000000000004F00                                         ; iwrite_constprop_7+86↑j
.text:0000000000004F00                 mov     edx, 1          ; whence
.text:0000000000004F05                 mov     rsi, rbp        ; offset
.text:0000000000004F08                 mov     edi, 1          ; fd
.text:0000000000004F0D                 call    _lseek
.text:0000000000004F12                 test    rax, rax
.text:0000000000004F15                 js      short loc_4F40
.text:0000000000004F17                 test    rbp, rbp
.text:0000000000004F1A                 mov     cs:final_op_was_seek, 1
.text:0000000000004F21                 mov     rax, rbp
.text:0000000000004F24                 jns     loc_4E6E
.text:0000000000004F2A                 call    ___errno_location
.text:0000000000004F2F                 cmp     dword ptr [rax], 4
.text:0000000000004F32                 jz      loc_4E71
.text:0000000000004F38                 jmp     short loc_4EE0
.text:0000000000004F38 ; ---------------------------------------------------------------------------
.text:0000000000004F3A                 align 20h
.text:0000000000004F40
.text:0000000000004F40 loc_4F40:                               ; CODE XREF: iwrite_constprop_7+E5↑j
.text:0000000000004F40                 and     r13d, 0FFFEFFFFh
.text:0000000000004F47                 mov     cs:conversions_mask, r13d
.text:0000000000004F4E                 jmp     loc_4EB8
.text:0000000000004F4E ; ---------------------------------------------------------------------------
.text:0000000000004F53                 align 8
.text:0000000000004F58
.text:0000000000004F58 loc_4F58:                               ; CODE XREF: iwrite_constprop_7:loc_4E68↑j
.text:0000000000004F58                 call    ___errno_location
.text:0000000000004F5D                 mov     dword ptr [rax], 1Ch
.text:0000000000004F63                 jmp     loc_4EE0
.text:0000000000004F63 ; ---------------------------------------------------------------------------
.text:0000000000004F68                 align 10h
.text:0000000000004F70
.text:0000000000004F70 loc_4F70:                               ; CODE XREF: iwrite_constprop_7+BC↑j
.text:0000000000004F70                 mov     rsi, rbx
.text:0000000000004F73                 mov     edi, 1          ; fd
.text:0000000000004F78                 call    invalidate_cache
.text:0000000000004F7D                 add     rsp, 8
.text:0000000000004F81                 mov     rax, rbx
.text:0000000000004F84                 pop     rbx
.text:0000000000004F85                 pop     rbp
.text:0000000000004F86                 pop     r12
.text:0000000000004F88                 pop     r13
.text:0000000000004F8A                 retn
.text:0000000000004F8A ; ---------------------------------------------------------------------------
.text:0000000000004F8B                 align 10h
.text:0000000000004F90
.text:0000000000004F90 loc_4F90:                               ; CODE XREF: iwrite_constprop_7+20↑j
.text:0000000000004F90                 mov     esi, 3
.text:0000000000004F95                 mov     edi, 1          ; fd
.text:0000000000004F9A                 xor     eax, eax
.text:0000000000004F9C                 call    rpl_fcntl
.text:0000000000004FA1                 and     ah, 0BFh
.text:0000000000004FA4                 mov     esi, 4
.text:0000000000004FA9                 mov     edi, 1          ; fd
.text:0000000000004FAE                 mov     edx, eax
.text:0000000000004FB0                 xor     eax, eax
.text:0000000000004FB2                 call    rpl_fcntl
.text:0000000000004FB7                 test    eax, eax
.text:0000000000004FB9                 jz      short loc_4FC4
.text:0000000000004FBB                 cmp     cs:status_level, 1
.text:0000000000004FC2                 jnz     short loc_4FE6
.text:0000000000004FC4
.text:0000000000004FC4 loc_4FC4:                               ; CODE XREF: iwrite_constprop_7+189↑j
.text:0000000000004FC4                                         ; iwrite_constprop_7+1F8↓j
.text:0000000000004FC4                 xor     esi, esi
.text:0000000000004FC6                 mov     edi, 1          ; fd
.text:0000000000004FCB                 mov     cs:o_nocache_eof, 1
.text:0000000000004FD2                 call    invalidate_cache
.text:0000000000004FD7                 or      cs:conversions_mask, 8000h
.text:0000000000004FE1                 jmp     loc_4E56
.text:0000000000004FE6 ; ---------------------------------------------------------------------------
.text:0000000000004FE6
.text:0000000000004FE6 loc_4FE6:                               ; CODE XREF: iwrite_constprop_7+192↑j
.text:0000000000004FE6                 mov     rdx, cs:output_file
.text:0000000000004FED                 xor     edi, edi
.text:0000000000004FEF                 mov     esi, 3
.text:0000000000004FF4                 call    quotearg_n_style_colon
.text:0000000000004FF9                 lea     rsi, aFailedToTurnOf ; "failed to turn off O_DIRECT: %s"
.text:0000000000005000                 xor     edi, edi        ; domainname
.text:0000000000005002                 mov     edx, 5          ; category
.text:0000000000005007                 mov     r13, rax
.text:000000000000500A                 call    _dcgettext
.text:000000000000500F                 mov     rbx, rax
.text:0000000000005012                 call    ___errno_location
.text:0000000000005017                 mov     esi, [rax]
.text:0000000000005019                 mov     rcx, r13
.text:000000000000501C                 mov     rdx, rbx
.text:000000000000501F                 xor     edi, edi
.text:0000000000005021                 xor     eax, eax
.text:0000000000005023                 call    nl_error
.text:0000000000005028                 jmp     short loc_4FC4
.text:0000000000005028 ; } // starts at 4E30
.text:0000000000005028 iwrite_constprop_7 endp
.text:0000000000005028
.text:0000000000005028 ; ---------------------------------------------------------------------------
.text:000000000000502A                 align 10h
.text:0000000000005030
.text:0000000000005030 ; =============== S U B R O U T I N E =======================================
.text:0000000000005030
.text:0000000000005030 ; Attributes: noreturn
.text:0000000000005030
.text:0000000000005030 ; void __fastcall __noreturn usage(int status)
.text:0000000000005030                 public usage
.text:0000000000005030 usage           proc near               ; CODE XREF: main+1AA5↑p
.text:0000000000005030                                         ; main+1D12↑p ...
.text:0000000000005030
.text:0000000000005030 var_A8          = qword ptr -0A8h
.text:0000000000005030 var_A0          = qword ptr -0A0h
.text:0000000000005030 var_98          = qword ptr -98h
.text:0000000000005030 var_90          = qword ptr -90h
.text:0000000000005030 var_88          = qword ptr -88h
.text:0000000000005030 var_80          = qword ptr -80h
.text:0000000000005030 var_78          = qword ptr -78h
.text:0000000000005030 var_70          = qword ptr -70h
.text:0000000000005030 var_68          = qword ptr -68h
.text:0000000000005030 var_60          = qword ptr -60h
.text:0000000000005030 var_58          = qword ptr -58h
.text:0000000000005030 var_50          = qword ptr -50h
.text:0000000000005030 var_48          = qword ptr -48h
.text:0000000000005030 var_40          = qword ptr -40h
.text:0000000000005030 var_30          = qword ptr -30h
.text:0000000000005030
.text:0000000000005030 ; __unwind {
.text:0000000000005030                 push    r13
.text:0000000000005032                 push    r12
.text:0000000000005034                 mov     edx, 5          ; category
.text:0000000000005039                 push    rbp
.text:000000000000503A                 push    rbx
.text:000000000000503B                 mov     ebp, edi
.text:000000000000503D                 sub     rsp, 88h
.text:0000000000005044                 mov     rbx, cs:program_name
.text:000000000000504B                 mov     rax, fs:28h
.text:0000000000005054                 mov     [rsp+0A8h+var_30], rax
.text:0000000000005059                 xor     eax, eax
.text:000000000000505B                 test    edi, edi
.text:000000000000505D                 jz      short loc_508D
.text:000000000000505F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000005066                 xor     edi, edi        ; domainname
.text:0000000000005068                 call    _dcgettext
.text:000000000000506D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005074                 mov     rdx, rax
.text:0000000000005077                 mov     rcx, rbx
.text:000000000000507A                 mov     esi, 1
.text:000000000000507F                 xor     eax, eax
.text:0000000000005081                 call    ___fprintf_chk
.text:0000000000005086
.text:0000000000005086 loc_5086:                               ; CODE XREF: usage+546↓j
.text:0000000000005086                 mov     edi, ebp        ; status
.text:0000000000005088                 call    _exit
.text:000000000000508D ; ---------------------------------------------------------------------------
.text:000000000000508D
.text:000000000000508D loc_508D:                               ; CODE XREF: usage+2D↑j
.text:000000000000508D                 lea     rsi, aUsageSOperandO ; "Usage: %s [OPERAND]...\n  or:  %s OPTIO"...
.text:0000000000005094                 xor     edi, edi        ; domainname
.text:0000000000005096                 call    _dcgettext
.text:000000000000509B                 mov     rcx, rbx
.text:000000000000509E                 mov     rdx, rbx
.text:00000000000050A1                 mov     rsi, rax
.text:00000000000050A4                 mov     edi, 1
.text:00000000000050A9                 xor     eax, eax
.text:00000000000050AB                 call    ___printf_chk
.text:00000000000050B0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000050B7                 lea     rsi, aCopyAFileConve ; "Copy a file, converting and formatting "...
.text:00000000000050BE                 mov     edx, 5          ; category
.text:00000000000050C3                 xor     edi, edi        ; domainname
.text:00000000000050C5                 call    _dcgettext
.text:00000000000050CA                 mov     rsi, rbx        ; stream
.text:00000000000050CD                 mov     rdi, rax        ; s
.text:00000000000050D0                 call    _fputs_unlocked
.text:00000000000050D5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000050DC                 lea     rsi, aIfFileReadFrom ; "  if=FILE         read from FILE instea"...
.text:00000000000050E3                 mov     edx, 5          ; category
.text:00000000000050E8                 xor     edi, edi        ; domainname
.text:00000000000050EA                 call    _dcgettext
.text:00000000000050EF                 mov     rsi, rbx        ; stream
.text:00000000000050F2                 mov     rdi, rax        ; s
.text:00000000000050F5                 call    _fputs_unlocked
.text:00000000000050FA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005101                 lea     rsi, aNAndBytesMayBe ; "\nN and BYTES may be followed by the fo"...
.text:0000000000005108                 mov     edx, 5          ; category
.text:000000000000510D                 xor     edi, edi        ; domainname
.text:000000000000510F                 call    _dcgettext
.text:0000000000005114                 mov     rsi, rbx        ; stream
.text:0000000000005117                 mov     rdi, rax        ; s
.text:000000000000511A                 call    _fputs_unlocked
.text:000000000000511F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005126                 lea     rsi, aAsciiFromEbcdi ; "  ascii     from EBCDIC to ASCII\n  ebc"...
.text:000000000000512D                 mov     edx, 5          ; category
.text:0000000000005132                 xor     edi, edi        ; domainname
.text:0000000000005134                 call    _dcgettext
.text:0000000000005139                 mov     rsi, rbx        ; stream
.text:000000000000513C                 mov     rdi, rax        ; s
.text:000000000000513F                 call    _fputs_unlocked
.text:0000000000005144                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000514B                 lea     rsi, aExclFailIfTheO ; "  excl      fail if the output file alr"...
.text:0000000000005152                 mov     edx, 5          ; category
.text:0000000000005157                 xor     edi, edi        ; domainname
.text:0000000000005159                 call    _dcgettext
.text:000000000000515E                 mov     rsi, rbx        ; stream
.text:0000000000005161                 mov     rdi, rax        ; s
.text:0000000000005164                 call    _fputs_unlocked
.text:0000000000005169                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005170                 lea     rsi, aEachFlagSymbol ; "\nEach FLAG symbol may be:\n\n  append "...
.text:0000000000005177                 mov     edx, 5          ; category
.text:000000000000517C                 xor     edi, edi        ; domainname
.text:000000000000517E                 call    _dcgettext
.text:0000000000005183                 mov     rsi, rbx        ; stream
.text:0000000000005186                 mov     rdi, rax        ; s
.text:0000000000005189                 call    _fputs_unlocked
.text:000000000000518E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005195                 lea     rsi, aDirectUseDirec ; "  direct    use direct I/O for data\n"
.text:000000000000519C                 mov     edx, 5          ; category
.text:00000000000051A1                 xor     edi, edi        ; domainname
.text:00000000000051A3                 call    _dcgettext
.text:00000000000051A8                 mov     rsi, rbx        ; stream
.text:00000000000051AB                 mov     rdi, rax        ; s
.text:00000000000051AE                 call    _fputs_unlocked
.text:00000000000051B3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000051BA                 lea     rsi, aDirectoryFailU ; "  directory  fail unless a directory\n"
.text:00000000000051C1                 mov     edx, 5          ; category
.text:00000000000051C6                 xor     edi, edi        ; domainname
.text:00000000000051C8                 call    _dcgettext
.text:00000000000051CD                 mov     rsi, rbx        ; stream
.text:00000000000051D0                 mov     rdi, rax        ; s
.text:00000000000051D3                 call    _fputs_unlocked
.text:00000000000051D8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000051DF                 lea     rsi, aDsyncUseSynchr ; "  dsync     use synchronized I/O for da"...
.text:00000000000051E6                 mov     edx, 5          ; category
.text:00000000000051EB                 xor     edi, edi        ; domainname
.text:00000000000051ED                 call    _dcgettext
.text:00000000000051F2                 mov     rsi, rbx        ; stream
.text:00000000000051F5                 mov     rdi, rax        ; s
.text:00000000000051F8                 call    _fputs_unlocked
.text:00000000000051FD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005204                 lea     rsi, aSyncLikewiseBu ; "  sync      likewise, but also for meta"...
.text:000000000000520B                 mov     edx, 5          ; category
.text:0000000000005210                 xor     edi, edi        ; domainname
.text:0000000000005212                 call    _dcgettext
.text:0000000000005217                 mov     rsi, rbx        ; stream
.text:000000000000521A                 mov     rdi, rax        ; s
.text:000000000000521D                 call    _fputs_unlocked
.text:0000000000005222                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005229                 lea     rsi, aFullblockAccum ; "  fullblock  accumulate full blocks of "...
.text:0000000000005230                 mov     edx, 5          ; category
.text:0000000000005235                 xor     edi, edi        ; domainname
.text:0000000000005237                 call    _dcgettext
.text:000000000000523C                 mov     rsi, rbx        ; stream
.text:000000000000523F                 mov     rdi, rax        ; s
.text:0000000000005242                 call    _fputs_unlocked
.text:0000000000005247                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000524E                 lea     rsi, aNonblockUseNon ; "  nonblock  use non-blocking I/O\n"
.text:0000000000005255                 mov     edx, 5          ; category
.text:000000000000525A                 xor     edi, edi        ; domainname
.text:000000000000525C                 call    _dcgettext
.text:0000000000005261                 mov     rsi, rbx        ; stream
.text:0000000000005264                 mov     rdi, rax        ; s
.text:0000000000005267                 call    _fputs_unlocked
.text:000000000000526C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005273                 lea     rsi, aNoatimeDoNotUp ; "  noatime   do not update access time\n"
.text:000000000000527A                 mov     edx, 5          ; category
.text:000000000000527F                 xor     edi, edi        ; domainname
.text:0000000000005281                 call    _dcgettext
.text:0000000000005286                 mov     rsi, rbx        ; stream
.text:0000000000005289                 mov     rdi, rax        ; s
.text:000000000000528C                 call    _fputs_unlocked
.text:0000000000005291                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005298                 lea     rsi, aNocacheRequest ; "  nocache   Request to drop cache.  See"...
.text:000000000000529F                 mov     edx, 5          ; category
.text:00000000000052A4                 xor     edi, edi        ; domainname
.text:00000000000052A6                 call    _dcgettext
.text:00000000000052AB                 mov     rsi, rbx        ; stream
.text:00000000000052AE                 mov     rdi, rax        ; s
.text:00000000000052B1                 call    _fputs_unlocked
.text:00000000000052B6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000052BD                 lea     rsi, aNocttyDoNotAss ; "  noctty    do not assign controlling t"...
.text:00000000000052C4                 mov     edx, 5          ; category
.text:00000000000052C9                 xor     edi, edi        ; domainname
.text:00000000000052CB                 call    _dcgettext
.text:00000000000052D0                 mov     rsi, rbx        ; stream
.text:00000000000052D3                 mov     rdi, rax        ; s
.text:00000000000052D6                 call    _fputs_unlocked
.text:00000000000052DB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000052E2                 lea     rsi, aNofollowDoNotF ; "  nofollow  do not follow symlinks\n"
.text:00000000000052E9                 mov     edx, 5          ; category
.text:00000000000052EE                 xor     edi, edi        ; domainname
.text:00000000000052F0                 call    _dcgettext
.text:00000000000052F5                 mov     rsi, rbx        ; stream
.text:00000000000052F8                 mov     rdi, rax        ; s
.text:00000000000052FB                 call    _fputs_unlocked
.text:0000000000005300                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005307                 lea     rsi, aCountBytesTrea ; "  count_bytes  treat 'count=N' as a byt"...
.text:000000000000530E                 mov     edx, 5          ; category
.text:0000000000005313                 xor     edi, edi        ; domainname
.text:0000000000005315                 call    _dcgettext
.text:000000000000531A                 mov     rsi, rbx        ; stream
.text:000000000000531D                 mov     rdi, rax        ; s
.text:0000000000005320                 call    _fputs_unlocked
.text:0000000000005325                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000532C                 lea     rsi, aSkipBytesTreat ; "  skip_bytes  treat 'skip=N' as a byte "...
.text:0000000000005333                 mov     edx, 5          ; category
.text:0000000000005338                 xor     edi, edi        ; domainname
.text:000000000000533A                 call    _dcgettext
.text:000000000000533F                 mov     rsi, rbx        ; stream
.text:0000000000005342                 mov     rdi, rax        ; s
.text:0000000000005345                 call    _fputs_unlocked
.text:000000000000534A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005351                 lea     rsi, aSeekBytesTreat ; "  seek_bytes  treat 'seek=N' as a byte "...
.text:0000000000005358                 mov     edx, 5          ; category
.text:000000000000535D                 xor     edi, edi        ; domainname
.text:000000000000535F                 call    _dcgettext
.text:0000000000005364                 mov     rsi, rbx        ; stream
.text:0000000000005367                 mov     rdi, rax        ; s
.text:000000000000536A                 call    _fputs_unlocked
.text:000000000000536F                 lea     rsi, aSendingASSigna ; "\nSending a %s signal to a running 'dd'"...
.text:0000000000005376                 xor     edi, edi        ; domainname
.text:0000000000005378                 mov     edx, 5          ; category
.text:000000000000537D                 call    _dcgettext
.text:0000000000005382                 lea     rdx, aUsr1      ; "USR1"
.text:0000000000005389                 mov     rsi, rax
.text:000000000000538C                 mov     edi, 1
.text:0000000000005391                 xor     eax, eax
.text:0000000000005393                 call    ___printf_chk
.text:0000000000005398                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000539F                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000053A6                 mov     edx, 5          ; category
.text:00000000000053AB                 xor     edi, edi        ; domainname
.text:00000000000053AD                 call    _dcgettext
.text:00000000000053B2                 mov     rsi, rbx        ; stream
.text:00000000000053B5                 mov     rdi, rax        ; s
.text:00000000000053B8                 call    _fputs_unlocked
.text:00000000000053BD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000053C4                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000053CB                 mov     edx, 5          ; category
.text:00000000000053D0                 xor     edi, edi        ; domainname
.text:00000000000053D2                 call    _dcgettext
.text:00000000000053D7                 mov     rsi, rbx        ; stream
.text:00000000000053DA                 mov     rdi, rax        ; s
.text:00000000000053DD                 lea     rbx, aDd        ; "dd"
.text:00000000000053E4                 call    _fputs_unlocked
.text:00000000000053E9                 lea     rax, asc_C6FC   ; "["
.text:00000000000053F0                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000053F7                 mov     [rsp+0A8h+var_48], 0
.text:0000000000005400                 mov     [rsp+0A8h+var_40], 0
.text:0000000000005409                 mov     rdx, rsp
.text:000000000000540C                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000005410                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000005417                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000541C                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000005423                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000005428                 lea     rax, domainname ; "coreutils"
.text:000000000000542F                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000005434                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000543B                 mov     [rsp+0A8h+var_98], rax
.text:0000000000005440                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000005447                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000544C                 mov     [rsp+0A8h+var_90], rax
.text:0000000000005451                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000005458                 mov     [rsp+0A8h+var_88], rax
.text:000000000000545D                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000005464                 mov     [rsp+0A8h+var_80], rax
.text:0000000000005469                 mov     [rsp+0A8h+var_70], rax
.text:000000000000546E                 mov     [rsp+0A8h+var_60], rax
.text:0000000000005473                 mov     [rsp+0A8h+var_50], rax
.text:0000000000005478                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005480
.text:0000000000005480 loc_5480:                               ; CODE XREF: usage+46D↓j
.text:0000000000005480                 add     rdx, 10h
.text:0000000000005484                 mov     rdi, [rdx]
.text:0000000000005487                 test    rdi, rdi
.text:000000000000548A                 jz      short loc_549F
.text:000000000000548C                 mov     ecx, 3
.text:0000000000005491                 mov     rsi, rbx
.text:0000000000005494                 repe cmpsb
.text:0000000000005496                 setnbe  al
.text:0000000000005499                 sbb     al, 0
.text:000000000000549B                 test    al, al
.text:000000000000549D                 jnz     short loc_5480
.text:000000000000549F
.text:000000000000549F loc_549F:                               ; CODE XREF: usage+45A↑j
.text:000000000000549F                 mov     r12, [rdx+8]
.text:00000000000054A3                 xor     edi, edi        ; domainname
.text:00000000000054A5                 mov     edx, 5          ; category
.text:00000000000054AA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000054B1                 test    r12, r12
.text:00000000000054B4                 jz      loc_557B
.text:00000000000054BA                 call    _dcgettext
.text:00000000000054BF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000054C6                 lea     rdx, unk_C772
.text:00000000000054CD                 mov     rsi, rax
.text:00000000000054D0                 mov     edi, 1
.text:00000000000054D5                 xor     eax, eax
.text:00000000000054D7                 call    ___printf_chk
.text:00000000000054DC                 xor     esi, esi        ; locale
.text:00000000000054DE                 mov     edi, 5          ; category
.text:00000000000054E3                 call    _setlocale
.text:00000000000054E8                 test    rax, rax
.text:00000000000054EB                 jz      short loc_5509
.text:00000000000054ED                 lea     rsi, s2         ; "en_"
.text:00000000000054F4                 mov     edx, 3          ; n
.text:00000000000054F9                 mov     rdi, rax        ; s1
.text:00000000000054FC                 call    _strncmp
.text:0000000000005501                 test    eax, eax
.text:0000000000005503                 jnz     loc_5610
.text:0000000000005509
.text:0000000000005509 loc_5509:                               ; CODE XREF: usage+4BB↑j
.text:0000000000005509                                         ; usage+605↓j
.text:0000000000005509                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000005510                 xor     edi, edi        ; domainname
.text:0000000000005512                 mov     edx, 5          ; category
.text:0000000000005517                 call    _dcgettext
.text:000000000000551C                 lea     rcx, aDd        ; "dd"
.text:0000000000005523                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000552A                 mov     rsi, rax
.text:000000000000552D                 mov     edi, 1
.text:0000000000005532                 xor     eax, eax
.text:0000000000005534                 call    ___printf_chk
.text:0000000000005539                 cmp     r12, rbx
.text:000000000000553C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000005543                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000554A                 cmovz   rbx, rcx
.text:000000000000554E
.text:000000000000554E loc_554E:                               ; CODE XREF: usage+5D4↓j
.text:000000000000554E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000005555                 xor     edi, edi        ; domainname
.text:0000000000005557                 mov     edx, 5          ; category
.text:000000000000555C                 call    _dcgettext
.text:0000000000005561                 mov     rcx, rbx
.text:0000000000005564                 mov     rsi, rax
.text:0000000000005567                 mov     rdx, r12
.text:000000000000556A                 mov     edi, 1
.text:000000000000556F                 xor     eax, eax
.text:0000000000005571                 call    ___printf_chk
.text:0000000000005576                 jmp     loc_5086
.text:000000000000557B ; ---------------------------------------------------------------------------
.text:000000000000557B
.text:000000000000557B loc_557B:                               ; CODE XREF: usage+484↑j
.text:000000000000557B                 call    _dcgettext
.text:0000000000005580                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005587                 lea     rdx, unk_C772
.text:000000000000558E                 mov     rsi, rax
.text:0000000000005591                 mov     edi, 1
.text:0000000000005596                 xor     eax, eax
.text:0000000000005598                 call    ___printf_chk
.text:000000000000559D                 xor     esi, esi        ; locale
.text:000000000000559F                 mov     edi, 5          ; category
.text:00000000000055A4                 call    _setlocale
.text:00000000000055A9                 test    rax, rax
.text:00000000000055AC                 jz      short loc_55C6
.text:00000000000055AE                 lea     rsi, s2         ; "en_"
.text:00000000000055B5                 mov     edx, 3          ; n
.text:00000000000055BA                 mov     rdi, rax        ; s1
.text:00000000000055BD                 call    _strncmp
.text:00000000000055C2                 test    eax, eax
.text:00000000000055C4                 jnz     short loc_5609
.text:00000000000055C6
.text:00000000000055C6 loc_55C6:                               ; CODE XREF: usage+57C↑j
.text:00000000000055C6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000055CD                 mov     edx, 5          ; category
.text:00000000000055D2                 xor     edi, edi        ; domainname
.text:00000000000055D4                 lea     r12, aDd        ; "dd"
.text:00000000000055DB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000055E2                 call    _dcgettext
.text:00000000000055E7                 lea     rcx, aDd        ; "dd"
.text:00000000000055EE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000055F5                 mov     rsi, rax
.text:00000000000055F8                 mov     edi, 1
.text:00000000000055FD                 xor     eax, eax
.text:00000000000055FF                 call    ___printf_chk
.text:0000000000005604                 jmp     loc_554E
.text:0000000000005609 ; ---------------------------------------------------------------------------
.text:0000000000005609
.text:0000000000005609 loc_5609:                               ; CODE XREF: usage+594↑j
.text:0000000000005609                 lea     r12, aDd        ; "dd"
.text:0000000000005610
.text:0000000000005610 loc_5610:                               ; CODE XREF: usage+4D3↑j
.text:0000000000005610                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000005617                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000561E                 xor     edi, edi        ; domainname
.text:0000000000005620                 mov     edx, 5          ; category
.text:0000000000005625                 call    _dcgettext
.text:000000000000562A                 mov     rsi, r13        ; stream
.text:000000000000562D                 mov     rdi, rax        ; s
.text:0000000000005630                 call    _fputs_unlocked
.text:0000000000005635                 jmp     loc_5509
.text:0000000000005635 ; } // starts at 5030
.text:0000000000005635 usage           endp
.text:0000000000005635
.text:0000000000005635 ; ---------------------------------------------------------------------------
.text:000000000000563A                 align 20h
.text:0000000000005640
.text:0000000000005640 ; =============== S U B R O U T I N E =======================================
.text:0000000000005640
.text:0000000000005640
.text:0000000000005640 ; __int64 __fastcall parse_symbols(char *s)
.text:0000000000005640 parse_symbols   proc near               ; CODE XREF: main+A81↑p
.text:0000000000005640                                         ; main+AD2↑p ...
.text:0000000000005640 ; __unwind {
.text:0000000000005640                 push    r14
.text:0000000000005642                 mov     r14, rdi
.text:0000000000005645                 push    r13
.text:0000000000005647                 mov     r13, rcx
.text:000000000000564A                 push    r12
.text:000000000000564C                 mov     r12, rsi
.text:000000000000564F                 push    rbp
.text:0000000000005650                 mov     ebp, edx
.text:0000000000005652                 push    rbx
.text:0000000000005653                 xor     ebx, ebx
.text:0000000000005655
.text:0000000000005655 loc_5655:                               ; CODE XREF: parse_symbols+7A↓j
.text:0000000000005655                 mov     esi, 2Ch ; ','  ; c
.text:000000000000565A                 mov     rdi, r14        ; s
.text:000000000000565D                 call    _strchr
.text:0000000000005662                 mov     r8, r12
.text:0000000000005665                 nop     dword ptr [rax]
.text:0000000000005668
.text:0000000000005668 loc_5668:                               ; CODE XREF: parse_symbols+65↓j
.text:0000000000005668                 mov     rcx, r8
.text:000000000000566B                 mov     rdx, r14
.text:000000000000566E                 jmp     short loc_567D
.text:0000000000005670 ; ---------------------------------------------------------------------------
.text:0000000000005670
.text:0000000000005670 loc_5670:                               ; CODE XREF: parse_symbols+46↓j
.text:0000000000005670                 add     rdx, 1
.text:0000000000005674                 add     rcx, 1
.text:0000000000005678                 cmp     sil, dil
.text:000000000000567B                 jnz     short loc_569B
.text:000000000000567D
.text:000000000000567D loc_567D:                               ; CODE XREF: parse_symbols+2E↑j
.text:000000000000567D                 movzx   esi, byte ptr [rcx]
.text:0000000000005680                 movzx   edi, byte ptr [rdx]
.text:0000000000005683                 test    sil, sil
.text:0000000000005686                 jnz     short loc_5670
.text:0000000000005688                 cmp     dil, 2Ch ; ','
.text:000000000000568C                 jz      short loc_5693
.text:000000000000568E                 test    dil, dil
.text:0000000000005691                 jnz     short loc_569B
.text:0000000000005693
.text:0000000000005693 loc_5693:                               ; CODE XREF: parse_symbols+4C↑j
.text:0000000000005693                 mov     edx, [r8+0Ch]
.text:0000000000005697                 test    edx, edx
.text:0000000000005699                 jnz     short loc_56A7
.text:000000000000569B
.text:000000000000569B loc_569B:                               ; CODE XREF: parse_symbols+3B↑j
.text:000000000000569B                                         ; parse_symbols+51↑j
.text:000000000000569B                 cmp     byte ptr [r8], 0
.text:000000000000569F                 jz      short loc_56C7
.text:00000000000056A1                 add     r8, 10h
.text:00000000000056A5                 jmp     short loc_5668
.text:00000000000056A7 ; ---------------------------------------------------------------------------
.text:00000000000056A7
.text:00000000000056A7 loc_56A7:                               ; CODE XREF: parse_symbols+59↑j
.text:00000000000056A7                 or      ebx, edx
.text:00000000000056A9                 test    bpl, bpl
.text:00000000000056AC                 cmovz   edx, ebx
.text:00000000000056AF                 test    rax, rax
.text:00000000000056B2                 jz      short loc_56BC
.text:00000000000056B4                 lea     r14, [rax+1]
.text:00000000000056B8                 mov     ebx, edx
.text:00000000000056BA                 jmp     short loc_5655
.text:00000000000056BC ; ---------------------------------------------------------------------------
.text:00000000000056BC
.text:00000000000056BC loc_56BC:                               ; CODE XREF: parse_symbols+72↑j
.text:00000000000056BC                 pop     rbx
.text:00000000000056BD                 mov     eax, edx
.text:00000000000056BF                 pop     rbp
.text:00000000000056C0                 pop     r12
.text:00000000000056C2                 pop     r13
.text:00000000000056C4                 pop     r14
.text:00000000000056C6                 retn
.text:00000000000056C7 ; ---------------------------------------------------------------------------
.text:00000000000056C7
.text:00000000000056C7 loc_56C7:                               ; CODE XREF: parse_symbols+5F↑j
.text:00000000000056C7                 test    rax, rax
.text:00000000000056CA                 jz      short loc_5715
.text:00000000000056CC                 sub     rax, r14
.text:00000000000056CF
.text:00000000000056CF loc_56CF:                               ; CODE XREF: parse_symbols+EA↓j
.text:00000000000056CF                 mov     rcx, rax
.text:00000000000056D2                 mov     rdx, r14
.text:00000000000056D5                 mov     esi, 8
.text:00000000000056DA                 xor     edi, edi
.text:00000000000056DC                 call    quotearg_n_style_mem
.text:00000000000056E1                 mov     edx, 5          ; category
.text:00000000000056E6                 mov     rsi, r13        ; msgid
.text:00000000000056E9                 xor     edi, edi        ; domainname
.text:00000000000056EB                 mov     rbx, rax
.text:00000000000056EE                 call    _dcgettext
.text:00000000000056F3                 lea     rdx, format     ; "%s: %s"
.text:00000000000056FA                 mov     rcx, rax
.text:00000000000056FD                 xor     edi, edi
.text:00000000000056FF                 mov     r8, rbx
.text:0000000000005702                 xor     esi, esi
.text:0000000000005704                 xor     eax, eax
.text:0000000000005706                 call    nl_error
.text:000000000000570B                 mov     edi, 1          ; status
.text:0000000000005710                 call    usage
.text:0000000000005715 ; ---------------------------------------------------------------------------
.text:0000000000005715
.text:0000000000005715 loc_5715:                               ; CODE XREF: parse_symbols+8A↑j
.text:0000000000005715                 xor     eax, eax
.text:0000000000005717                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000571B                 mov     rdi, r14
.text:000000000000571E                 repne scasb
.text:0000000000005720                 mov     rax, rcx
.text:0000000000005723                 not     rax
.text:0000000000005726                 sub     rax, 1
.text:000000000000572A                 jmp     short loc_56CF
.text:000000000000572A ; } // starts at 5640
.text:000000000000572A parse_symbols   endp
.text:000000000000572A
.text:000000000000572A ; ---------------------------------------------------------------------------
.text:000000000000572C                 align 10h
.text:0000000000005730
.text:0000000000005730 ; =============== S U B R O U T I N E =======================================
.text:0000000000005730
.text:0000000000005730
.text:0000000000005730 skip            proc near               ; CODE XREF: main+71D↑p
.text:0000000000005730                                         ; main+787↑p
.text:0000000000005730
.text:0000000000005730 var_E8          = qword ptr -0E8h
.text:0000000000005730 var_DC          = dword ptr -0DCh
.text:0000000000005730 stat_buf        = stat ptr -0D8h
.text:0000000000005730 var_40          = qword ptr -40h
.text:0000000000005730
.text:0000000000005730 ; __unwind {
.text:0000000000005730                 push    r15
.text:0000000000005732                 push    r14
.text:0000000000005734                 mov     r14, rdx
.text:0000000000005737                 push    r13
.text:0000000000005739                 push    r12
.text:000000000000573B                 mov     r13, r8
.text:000000000000573E                 push    rbp
.text:000000000000573F                 push    rbx
.text:0000000000005740                 mov     r12, rcx
.text:0000000000005743                 mov     ebx, edi
.text:0000000000005745                 sub     rsp, 0B8h
.text:000000000000574C                 mov     rbp, [r8]
.text:000000000000574F                 mov     rax, fs:28h
.text:0000000000005758                 mov     [rsp+0E8h+var_40], rax
.text:0000000000005760                 xor     eax, eax
.text:0000000000005762                 mov     [rsp+0E8h+var_E8], rsi
.text:0000000000005766                 call    ___errno_location
.text:000000000000576B                 xor     edx, edx
.text:000000000000576D                 mov     r15, rax
.text:0000000000005770                 mov     dword ptr [rax], 0
.text:0000000000005776                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000005780                 div     r12
.text:0000000000005783                 cmp     rax, r14
.text:0000000000005786                 jb      short loc_57F3
.text:0000000000005788                 mov     rax, r14
.text:000000000000578B                 mov     rdi, [rsp+0E8h+var_E8]
.text:000000000000578F                 mov     ecx, 1
.text:0000000000005794                 imul    rax, r12
.text:0000000000005798                 mov     esi, ebx
.text:000000000000579A                 add     rbp, rax
.text:000000000000579D                 mov     rdx, rbp
.text:00000000000057A0                 call    skip_via_lseek
.text:00000000000057A5                 test    rax, rax
.text:00000000000057A8                 js      loc_58C5
.text:00000000000057AE                 test    ebx, ebx
.text:00000000000057B0                 jz      loc_5922
.text:00000000000057B6                 db      2Eh
.text:00000000000057B6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000057C0
.text:00000000000057C0 loc_57C0:                               ; CODE XREF: skip+147↓j
.text:00000000000057C0                 mov     qword ptr [r13+0], 0
.text:00000000000057C8                 xor     eax, eax
.text:00000000000057CA
.text:00000000000057CA loc_57CA:                               ; CODE XREF: skip+190↓j
.text:00000000000057CA                                         ; skip+23F↓j ...
.text:00000000000057CA                 mov     rcx, [rsp+0E8h+var_40]
.text:00000000000057D2                 xor     rcx, fs:28h
.text:00000000000057DB                 jnz     loc_5A40
.text:00000000000057E1                 add     rsp, 0B8h
.text:00000000000057E8                 pop     rbx
.text:00000000000057E9                 pop     rbp
.text:00000000000057EA                 pop     r12
.text:00000000000057EC                 pop     r13
.text:00000000000057EE                 pop     r14
.text:00000000000057F0                 pop     r15
.text:00000000000057F2                 retn
.text:00000000000057F3 ; ---------------------------------------------------------------------------
.text:00000000000057F3
.text:00000000000057F3 loc_57F3:                               ; CODE XREF: skip+56↑j
.text:00000000000057F3                 mov     rdi, [rsp+0E8h+var_E8]
.text:00000000000057F7                 xor     edx, edx
.text:00000000000057F9                 mov     ecx, 2
.text:00000000000057FE                 mov     esi, ebx
.text:0000000000005800                 call    skip_via_lseek
.text:0000000000005805                 test    rax, rax
.text:0000000000005808                 jns     loc_58EE
.text:000000000000580E                 mov     [rsp+0E8h+var_DC], 0
.text:0000000000005816
.text:0000000000005816 loc_5816:                               ; CODE XREF: skip+1B1↓j
.text:0000000000005816                 test    ebx, ebx
.text:0000000000005818                 jnz     short loc_5899
.text:000000000000581A                 cmp     cs:ibuf, 0
.text:0000000000005822                 jz      loc_5981
.text:0000000000005828
.text:0000000000005828 loc_5828:                               ; CODE XREF: skip+256↓j
.text:0000000000005828                 mov     rbp, cs:ibuf
.text:000000000000582F                 nop
.text:0000000000005830
.text:0000000000005830 loc_5830:                               ; CODE XREF: skip+151↓j
.text:0000000000005830                                         ; skip+175↓j
.text:0000000000005830                 test    r14, r14
.text:0000000000005833                 mov     rax, cs:iread_fnc
.text:000000000000583A                 mov     rdx, r12
.text:000000000000583D                 jz      short loc_58B0
.text:000000000000583F
.text:000000000000583F loc_583F:                               ; CODE XREF: skip+18B↓j
.text:000000000000583F                 mov     rsi, rbp
.text:0000000000005842                 mov     edi, ebx
.text:0000000000005844                 call    rax ; iread_fnc
.text:0000000000005846                 test    rax, rax
.text:0000000000005849                 js      loc_599E
.text:000000000000584F                 jz      short loc_58BD
.text:0000000000005851                 test    ebx, ebx
.text:0000000000005853                 jnz     short loc_5874
.text:0000000000005855                 xor     edx, edx
.text:0000000000005857                 add     rax, cs:input_offset
.text:000000000000585E                 setb    dl
.text:0000000000005861                 mov     cs:input_offset, rax
.text:0000000000005868                 test    rdx, rdx
.text:000000000000586B                 jz      short loc_5874
.text:000000000000586D                 mov     cs:input_offset_overflow, 1
.text:0000000000005874
.text:0000000000005874 loc_5874:                               ; CODE XREF: skip+123↑j
.text:0000000000005874                                         ; skip+13B↑j
.text:0000000000005874                 test    r14, r14
.text:0000000000005877                 jz      loc_57C0
.text:000000000000587D                 sub     r14, 1
.text:0000000000005881                 jnz     short loc_5830
.text:0000000000005883                 mov     rdx, [r13+0]
.text:0000000000005887                 test    rdx, rdx
.text:000000000000588A                 jz      loc_5A39
.text:0000000000005890                 mov     rax, cs:iread_fnc
.text:0000000000005897                 jmp     short loc_58B8
.text:0000000000005899 ; ---------------------------------------------------------------------------
.text:0000000000005899
.text:0000000000005899 loc_5899:                               ; CODE XREF: skip+E8↑j
.text:0000000000005899                 call    alloc_obuf
.text:000000000000589E                 mov     rbp, cs:obuf
.text:00000000000058A5                 jmp     short loc_5830
.text:00000000000058A5 ; ---------------------------------------------------------------------------
.text:00000000000058A7                 align 10h
.text:00000000000058B0
.text:00000000000058B0 loc_58B0:                               ; CODE XREF: skip+10D↑j
.text:00000000000058B0                 mov     rdx, [r13+0]
.text:00000000000058B4                 nop     dword ptr [rax+00h]
.text:00000000000058B8
.text:00000000000058B8 loc_58B8:                               ; CODE XREF: skip+167↑j
.text:00000000000058B8                 xor     r14d, r14d
.text:00000000000058BB                 jmp     short loc_583F
.text:00000000000058BD ; ---------------------------------------------------------------------------
.text:00000000000058BD
.text:00000000000058BD loc_58BD:                               ; CODE XREF: skip+11F↑j
.text:00000000000058BD                 mov     rax, r14
.text:00000000000058C0                 jmp     loc_57CA
.text:00000000000058C5 ; ---------------------------------------------------------------------------
.text:00000000000058C5
.text:00000000000058C5 loc_58C5:                               ; CODE XREF: skip+78↑j
.text:00000000000058C5                 mov     eax, [r15]
.text:00000000000058C8                 mov     rdi, [rsp+0E8h+var_E8]
.text:00000000000058CC                 xor     edx, edx
.text:00000000000058CE                 mov     ecx, 2
.text:00000000000058D3                 mov     esi, ebx
.text:00000000000058D5                 mov     [rsp+0E8h+var_DC], eax
.text:00000000000058D9                 call    skip_via_lseek
.text:00000000000058DE                 test    rax, rax
.text:00000000000058E1                 js      loc_5816
.text:00000000000058E7                 cmp     [rsp+0E8h+var_DC], 0
.text:00000000000058EC                 jnz     short loc_58F6
.text:00000000000058EE
.text:00000000000058EE loc_58EE:                               ; CODE XREF: skip+D8↑j
.text:00000000000058EE                 mov     [rsp+0E8h+var_DC], 4Bh ; 'K'
.text:00000000000058F6
.text:00000000000058F6 loc_58F6:                               ; CODE XREF: skip+1BC↑j
.text:00000000000058F6                 xor     edi, edi
.text:00000000000058F8                 test    ebx, ebx
.text:00000000000058FA                 mov     rdx, [rsp+0E8h+var_E8]
.text:00000000000058FE                 mov     esi, 3
.text:0000000000005903                 jnz     loc_5A09
.text:0000000000005909                 call    quotearg_n_style_colon
.text:000000000000590E                 mov     edx, 5
.text:0000000000005913                 mov     rbx, rax
.text:0000000000005916                 lea     rsi, unk_C7B6
.text:000000000000591D                 jmp     loc_5A1D
.text:0000000000005922 ; ---------------------------------------------------------------------------
.text:0000000000005922
.text:0000000000005922 loc_5922:                               ; CODE XREF: skip+80↑j
.text:0000000000005922                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:0000000000005927                 xor     esi, esi        ; fildes
.text:0000000000005929                 mov     edi, 1          ; ver
.text:000000000000592E                 call    ___fxstat
.text:0000000000005933                 test    eax, eax
.text:0000000000005935                 jnz     loc_5A45
.text:000000000000593B                 mov     edx, [rsp+0E8h+stat_buf.st_mode]
.text:000000000000593F                 xor     eax, eax
.text:0000000000005941                 mov     rcx, cs:input_offset
.text:0000000000005948                 and     edx, 0D000h
.text:000000000000594E                 cmp     edx, 8000h
.text:0000000000005954                 jnz     short loc_5965
.text:0000000000005956                 mov     rsi, [rsp+0E8h+stat_buf.st_size]
.text:000000000000595B                 lea     rdx, [rbp+rcx+0]
.text:0000000000005960                 cmp     rsi, rdx
.text:0000000000005963                 jb      short loc_598B
.text:0000000000005965
.text:0000000000005965 loc_5965:                               ; CODE XREF: skip+224↑j
.text:0000000000005965                                         ; skip+26C↓j
.text:0000000000005965                 add     rbp, rcx
.text:0000000000005968                 mov     cs:input_offset, rbp
.text:000000000000596F                 jnb     loc_57CA
.text:0000000000005975                 mov     cs:input_offset_overflow, 1
.text:000000000000597C                 jmp     loc_57CA
.text:0000000000005981 ; ---------------------------------------------------------------------------
.text:0000000000005981
.text:0000000000005981 loc_5981:                               ; CODE XREF: skip+F2↑j
.text:0000000000005981                 call    alloc_ibuf_part_4
.text:0000000000005986                 jmp     loc_5828
.text:000000000000598B ; ---------------------------------------------------------------------------
.text:000000000000598B
.text:000000000000598B loc_598B:                               ; CODE XREF: skip+233↑j
.text:000000000000598B                 mov     rax, rbp
.text:000000000000598E                 xor     edx, edx
.text:0000000000005990                 sub     rax, rsi
.text:0000000000005993                 sub     rsi, rcx
.text:0000000000005996                 div     r12
.text:0000000000005999                 mov     rbp, rsi
.text:000000000000599C                 jmp     short loc_5965
.text:000000000000599E ; ---------------------------------------------------------------------------
.text:000000000000599E
.text:000000000000599E loc_599E:                               ; CODE XREF: skip+119↑j
.text:000000000000599E                 test    ebx, ebx
.text:00000000000059A0                 jnz     short loc_59FE
.text:00000000000059A2                 mov     rsi, [rsp+0E8h+var_E8]
.text:00000000000059A6                 mov     edi, 4
.text:00000000000059AB                 call    quotearg_style
.text:00000000000059B0                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:00000000000059B7                 xor     edi, edi        ; domainname
.text:00000000000059B9                 mov     edx, 5          ; category
.text:00000000000059BE                 mov     rbx, rax
.text:00000000000059C1                 call    _dcgettext
.text:00000000000059C6                 mov     esi, [r15]
.text:00000000000059C9                 mov     rdx, rax
.text:00000000000059CC                 xor     edi, edi
.text:00000000000059CE                 xor     eax, eax
.text:00000000000059D0                 mov     rcx, rbx
.text:00000000000059D3                 call    nl_error
.text:00000000000059D8                 test    byte ptr cs:conversions_mask+1, 1
.text:00000000000059DF                 jz      short loc_59EF
.text:00000000000059E1                 cmp     cs:status_level, 1
.text:00000000000059E8                 jz      short loc_59EF
.text:00000000000059EA                 call    print_stats_part_2
.text:00000000000059EF
.text:00000000000059EF loc_59EF:                               ; CODE XREF: skip+2AF↑j
.text:00000000000059EF                                         ; skip+2B8↑j ...
.text:00000000000059EF                 call    finish_up
.text:00000000000059F4                 mov     edi, 1          ; status
.text:00000000000059F9                 call    _exit
.text:00000000000059FE ; ---------------------------------------------------------------------------
.text:00000000000059FE
.text:00000000000059FE loc_59FE:                               ; CODE XREF: skip+270↑j
.text:00000000000059FE                 mov     rdx, [rsp+0E8h+var_E8]
.text:0000000000005A02                 mov     esi, 3
.text:0000000000005A07                 xor     edi, edi
.text:0000000000005A09
.text:0000000000005A09 loc_5A09:                               ; CODE XREF: skip+1D3↑j
.text:0000000000005A09                 call    quotearg_n_style_colon
.text:0000000000005A0E                 lea     rsi, aSCannotSeek ; "%s: cannot seek"
.text:0000000000005A15                 mov     rbx, rax
.text:0000000000005A18                 mov     edx, 5          ; category
.text:0000000000005A1D
.text:0000000000005A1D loc_5A1D:                               ; CODE XREF: skip+1ED↑j
.text:0000000000005A1D                 xor     edi, edi        ; domainname
.text:0000000000005A1F                 call    _dcgettext
.text:0000000000005A24                 mov     esi, [rsp+0E8h+var_DC]
.text:0000000000005A28                 mov     rdx, rax
.text:0000000000005A2B                 mov     rcx, rbx
.text:0000000000005A2E                 xor     edi, edi
.text:0000000000005A30                 xor     eax, eax
.text:0000000000005A32                 call    nl_error
.text:0000000000005A37                 jmp     short loc_59EF
.text:0000000000005A39 ; ---------------------------------------------------------------------------
.text:0000000000005A39
.text:0000000000005A39 loc_5A39:                               ; CODE XREF: skip+15A↑j
.text:0000000000005A39                 xor     eax, eax
.text:0000000000005A3B                 jmp     loc_57CA
.text:0000000000005A40 ; ---------------------------------------------------------------------------
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: skip+AB↑j
.text:0000000000005A40                 call    ___stack_chk_fail
.text:0000000000005A45 ; ---------------------------------------------------------------------------
.text:0000000000005A45
.text:0000000000005A45 loc_5A45:                               ; CODE XREF: skip+205↑j
.text:0000000000005A45                 mov     rsi, [rsp+0E8h+var_E8]
.text:0000000000005A49                 mov     edi, 4
.text:0000000000005A4E                 call    quotearg_style
.text:0000000000005A53                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:0000000000005A5A                 mov     edx, 5          ; category
.text:0000000000005A5F                 xor     edi, edi        ; domainname
.text:0000000000005A61                 mov     rbx, rax
.text:0000000000005A64                 call    _dcgettext
.text:0000000000005A69                 mov     esi, [r15]
.text:0000000000005A6C                 mov     rdx, rax
.text:0000000000005A6F                 mov     rcx, rbx
.text:0000000000005A72                 mov     edi, 1
.text:0000000000005A77                 xor     eax, eax
.text:0000000000005A79                 call    nl_error
.text:0000000000005A79 ; } // starts at 5730
.text:0000000000005A7E                 xchg    ax, ax
.text:0000000000005A7E skip            endp ; sp-analysis failed
.text:0000000000005A7E
.text:0000000000005A80
.text:0000000000005A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A80
.text:0000000000005A80
.text:0000000000005A80 write_output    proc near               ; CODE XREF: main:loc_2BB8↑p
.text:0000000000005A80                                         ; main:loc_3204↑p ...
.text:0000000000005A80 ; __unwind {
.text:0000000000005A80                 mov     rsi, cs:output_blocksize ; offset
.text:0000000000005A87                 mov     rdi, cs:obuf    ; s1
.text:0000000000005A8E                 push    r12
.text:0000000000005A90                 push    rbp
.text:0000000000005A91                 push    rbx
.text:0000000000005A92                 call    iwrite_constprop_7
.text:0000000000005A97                 add     cs:w_bytes, rax
.text:0000000000005A9E                 cmp     cs:output_blocksize, rax
.text:0000000000005AA5                 jnz     short loc_5ABF
.text:0000000000005AA7                 pop     rbx
.text:0000000000005AA8                 add     cs:w_full, 1
.text:0000000000005AB0                 mov     cs:oc, 0
.text:0000000000005ABB                 pop     rbp
.text:0000000000005ABC                 pop     r12
.text:0000000000005ABE                 retn
.text:0000000000005ABF ; ---------------------------------------------------------------------------
.text:0000000000005ABF
.text:0000000000005ABF loc_5ABF:                               ; CODE XREF: write_output+25↑j
.text:0000000000005ABF                 mov     rsi, cs:output_file
.text:0000000000005AC6                 mov     edi, 4
.text:0000000000005ACB                 mov     rbx, rax
.text:0000000000005ACE                 call    quotearg_style
.text:0000000000005AD3                 lea     rsi, aWritingToS ; "writing to %s"
.text:0000000000005ADA                 xor     edi, edi        ; domainname
.text:0000000000005ADC                 mov     edx, 5          ; category
.text:0000000000005AE1                 mov     r12, rax
.text:0000000000005AE4                 call    _dcgettext
.text:0000000000005AE9                 mov     rbp, rax
.text:0000000000005AEC                 call    ___errno_location
.text:0000000000005AF1                 mov     esi, [rax]
.text:0000000000005AF3                 xor     edi, edi
.text:0000000000005AF5                 xor     eax, eax
.text:0000000000005AF7                 mov     rcx, r12
.text:0000000000005AFA                 mov     rdx, rbp
.text:0000000000005AFD                 call    nl_error
.text:0000000000005B02                 test    rbx, rbx
.text:0000000000005B05                 jz      short loc_5B0F
.text:0000000000005B07                 add     cs:w_partial, 1
.text:0000000000005B0F
.text:0000000000005B0F loc_5B0F:                               ; CODE XREF: write_output+85↑j
.text:0000000000005B0F                 call    finish_up
.text:0000000000005B14                 mov     edi, 1          ; status
.text:0000000000005B19                 call    _exit
.text:0000000000005B19 ; } // starts at 5A80
.text:0000000000005B19 write_output    endp
.text:0000000000005B19
.text:0000000000005B19 ; ---------------------------------------------------------------------------
.text:0000000000005B1E                 align 20h
.text:0000000000005B20
.text:0000000000005B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B20
.text:0000000000005B20
.text:0000000000005B20 copy_with_block proc near               ; CODE XREF: main+F7B↑p
.text:0000000000005B20                                         ; main+193B↑p
.text:0000000000005B20 ; __unwind {
.text:0000000000005B20                 test    rsi, rsi
.text:0000000000005B23                 jz      locret_5C30
.text:0000000000005B29                 push    r12
.text:0000000000005B2B                 lea     r12, [rdi+rsi]
.text:0000000000005B2F                 push    rbp
.text:0000000000005B30                 mov     rbp, rdi
.text:0000000000005B33                 push    rbx
.text:0000000000005B34                 jmp     short loc_5B88
.text:0000000000005B34 ; ---------------------------------------------------------------------------
.text:0000000000005B36                 align 20h
.text:0000000000005B40
.text:0000000000005B40 loc_5B40:                               ; CODE XREF: copy_with_block+80↓j
.text:0000000000005B40                 cmp     rdx, rbx
.text:0000000000005B43                 jz      loc_5C08
.text:0000000000005B49                 jbe     short loc_5B74
.text:0000000000005B4B                 mov     rcx, cs:oc
.text:0000000000005B52                 mov     rsi, cs:obuf
.text:0000000000005B59                 lea     rdx, [rcx+1]
.text:0000000000005B5D                 cmp     rdx, cs:output_blocksize
.text:0000000000005B64                 mov     [rsi+rcx], al
.text:0000000000005B67                 mov     cs:oc, rdx
.text:0000000000005B6E                 jnb     loc_5C18
.text:0000000000005B74
.text:0000000000005B74 loc_5B74:                               ; CODE XREF: copy_with_block+29↑j
.text:0000000000005B74                                         ; copy_with_block+F0↓j ...
.text:0000000000005B74                 add     rbp, 1
.text:0000000000005B78                 add     rbx, 1
.text:0000000000005B7C                 cmp     r12, rbp
.text:0000000000005B7F                 mov     cs:col, rbx
.text:0000000000005B86                 jz      short loc_5BBB
.text:0000000000005B88
.text:0000000000005B88 loc_5B88:                               ; CODE XREF: copy_with_block+14↑j
.text:0000000000005B88                                         ; copy_with_block+99↓j
.text:0000000000005B88                 movzx   eax, byte ptr [rbp+0]
.text:0000000000005B8C                 mov     rbx, cs:col
.text:0000000000005B93                 cmp     al, cs:newline_character
.text:0000000000005B99                 mov     rdx, cs:conversion_blocksize
.text:0000000000005BA0                 jnz     short loc_5B40
.text:0000000000005BA2                 cmp     rdx, rbx
.text:0000000000005BA5                 ja      short loc_5BD2
.text:0000000000005BA7
.text:0000000000005BA7 loc_5BA7:                               ; CODE XREF: copy_with_block+B0↓j
.text:0000000000005BA7                 add     rbp, 1
.text:0000000000005BAB                 mov     cs:col, 0
.text:0000000000005BB6                 cmp     r12, rbp
.text:0000000000005BB9                 jnz     short loc_5B88
.text:0000000000005BBB
.text:0000000000005BBB loc_5BBB:                               ; CODE XREF: copy_with_block+66↑j
.text:0000000000005BBB                 pop     rbx
.text:0000000000005BBC                 pop     rbp
.text:0000000000005BBD                 pop     r12
.text:0000000000005BBF                 retn
.text:0000000000005BC0 ; ---------------------------------------------------------------------------
.text:0000000000005BC0
.text:0000000000005BC0 loc_5BC0:                               ; CODE XREF: copy_with_block+DF↓j
.text:0000000000005BC0                 call    write_output
.text:0000000000005BC5
.text:0000000000005BC5 loc_5BC5:                               ; CODE XREF: copy_with_block+DD↓j
.text:0000000000005BC5                 add     rbx, 1
.text:0000000000005BC9                 cmp     cs:conversion_blocksize, rbx
.text:0000000000005BD0                 jbe     short loc_5BA7
.text:0000000000005BD2
.text:0000000000005BD2 loc_5BD2:                               ; CODE XREF: copy_with_block+85↑j
.text:0000000000005BD2                 mov     rdx, cs:oc
.text:0000000000005BD9                 movzx   esi, cs:space_character
.text:0000000000005BE0                 mov     rcx, cs:obuf
.text:0000000000005BE7                 lea     rax, [rdx+1]
.text:0000000000005BEB                 cmp     rax, cs:output_blocksize
.text:0000000000005BF2                 mov     [rcx+rdx], sil
.text:0000000000005BF6                 mov     cs:oc, rax
.text:0000000000005BFD                 jb      short loc_5BC5
.text:0000000000005BFF                 jmp     short loc_5BC0
.text:0000000000005BFF ; ---------------------------------------------------------------------------
.text:0000000000005C01                 align 8
.text:0000000000005C08
.text:0000000000005C08 loc_5C08:                               ; CODE XREF: copy_with_block+23↑j
.text:0000000000005C08                 add     cs:r_truncate, 1
.text:0000000000005C10                 jmp     loc_5B74
.text:0000000000005C10 ; ---------------------------------------------------------------------------
.text:0000000000005C15                 align 8
.text:0000000000005C18
.text:0000000000005C18 loc_5C18:                               ; CODE XREF: copy_with_block+4E↑j
.text:0000000000005C18                 call    write_output
.text:0000000000005C1D                 mov     rbx, cs:col
.text:0000000000005C24                 jmp     loc_5B74
.text:0000000000005C24 ; ---------------------------------------------------------------------------
.text:0000000000005C29                 align 10h
.text:0000000000005C30
.text:0000000000005C30 locret_5C30:                            ; CODE XREF: copy_with_block+3↑j
.text:0000000000005C30                 rep retn
.text:0000000000005C30 ; } // starts at 5B20
.text:0000000000005C30 copy_with_block endp
.text:0000000000005C30
.text:0000000000005C30 ; ---------------------------------------------------------------------------
.text:0000000000005C32                 align 20h
.text:0000000000005C40
.text:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C40
.text:0000000000005C40
.text:0000000000005C40 copy_with_unblock proc near             ; CODE XREF: main+9BB↑p
.text:0000000000005C40                                         ; main+1957↑p
.text:0000000000005C40 ; __unwind {
.text:0000000000005C40                 test    rsi, rsi
.text:0000000000005C43                 jz      locret_5DA8
.text:0000000000005C49                 push    r13
.text:0000000000005C4B                 push    r12
.text:0000000000005C4D                 mov     r12, rdi
.text:0000000000005C50                 push    rbp
.text:0000000000005C51                 push    rbx
.text:0000000000005C52                 mov     rbp, rsi
.text:0000000000005C55                 xor     ebx, ebx
.text:0000000000005C57                 sub     rsp, 8
.text:0000000000005C5B                 jmp     short loc_5CB8
.text:0000000000005C5B ; ---------------------------------------------------------------------------
.text:0000000000005C5D                 align 20h
.text:0000000000005C60
.text:0000000000005C60 loc_5C60:                               ; CODE XREF: copy_with_unblock+96↓j
.text:0000000000005C60                 mov     rdx, cs:oc
.text:0000000000005C67                 sub     rbx, 1
.text:0000000000005C6B                 movzx   esi, cs:newline_character
.text:0000000000005C72                 mov     rcx, cs:obuf
.text:0000000000005C79                 mov     cs:pending_spaces_7443, 0
.text:0000000000005C84                 mov     cs:col, 0
.text:0000000000005C8F                 lea     rax, [rdx+1]
.text:0000000000005C93                 cmp     rax, cs:output_blocksize
.text:0000000000005C9A                 mov     [rcx+rdx], sil
.text:0000000000005C9E                 mov     cs:oc, rax
.text:0000000000005CA5                 jnb     loc_5D73
.text:0000000000005CAB
.text:0000000000005CAB loc_5CAB:                               ; CODE XREF: copy_with_unblock+12D↓j
.text:0000000000005CAB                                         ; copy_with_unblock+15B↓j
.text:0000000000005CAB                 add     rbx, 1
.text:0000000000005CAF                 cmp     rbp, rbx
.text:0000000000005CB2                 jbe     loc_5D85
.text:0000000000005CB8
.text:0000000000005CB8 loc_5CB8:                               ; CODE XREF: copy_with_unblock+1B↑j
.text:0000000000005CB8                                         ; copy_with_unblock+13F↓j
.text:0000000000005CB8                 mov     rax, cs:col
.text:0000000000005CBF                 cmp     rax, cs:conversion_blocksize
.text:0000000000005CC6                 movzx   r13d, byte ptr [r12+rbx]
.text:0000000000005CCB                 lea     rdx, [rax+1]
.text:0000000000005CCF                 mov     cs:col, rdx
.text:0000000000005CD6                 jnb     short loc_5C60
.text:0000000000005CD8                 movzx   ecx, cs:space_character
.text:0000000000005CDF                 mov     rdx, cs:pending_spaces_7443
.text:0000000000005CE6                 cmp     cl, r13b
.text:0000000000005CE9                 jz      loc_5D90
.text:0000000000005CEF                 test    rdx, rdx
.text:0000000000005CF2                 mov     rdi, cs:obuf
.text:0000000000005CF9                 mov     rax, cs:oc
.text:0000000000005D00                 mov     rsi, cs:output_blocksize
.text:0000000000005D07                 jnz     short loc_5D24
.text:0000000000005D09                 jmp     loc_5DA0
.text:0000000000005D09 ; ---------------------------------------------------------------------------
.text:0000000000005D0E                 align 10h
.text:0000000000005D10
.text:0000000000005D10 loc_5D10:                               ; CODE XREF: copy_with_unblock+F5↓j
.text:0000000000005D10                 sub     cs:pending_spaces_7443, 1
.text:0000000000005D18                 jz      short loc_5D5B
.text:0000000000005D1A
.text:0000000000005D1A loc_5D1A:                               ; CODE XREF: copy_with_unblock+119↓j
.text:0000000000005D1A                 movzx   ecx, cs:space_character
.text:0000000000005D21                 mov     rax, rdx
.text:0000000000005D24
.text:0000000000005D24 loc_5D24:                               ; CODE XREF: copy_with_unblock+C7↑j
.text:0000000000005D24                 lea     rdx, [rax+1]
.text:0000000000005D28                 mov     [rdi+rax], cl
.text:0000000000005D2B                 cmp     rdx, rsi
.text:0000000000005D2E                 mov     cs:oc, rdx
.text:0000000000005D35                 jb      short loc_5D10
.text:0000000000005D37                 call    write_output
.text:0000000000005D3C                 sub     cs:pending_spaces_7443, 1
.text:0000000000005D44                 mov     rdi, cs:obuf
.text:0000000000005D4B                 mov     rdx, cs:oc
.text:0000000000005D52                 mov     rsi, cs:output_blocksize
.text:0000000000005D59                 jnz     short loc_5D1A
.text:0000000000005D5B
.text:0000000000005D5B loc_5D5B:                               ; CODE XREF: copy_with_unblock+D8↑j
.text:0000000000005D5B                                         ; copy_with_unblock+163↓j
.text:0000000000005D5B                 lea     rax, [rdx+1]
.text:0000000000005D5F                 mov     [rdi+rdx], r13b
.text:0000000000005D63                 cmp     rax, rsi
.text:0000000000005D66                 mov     cs:oc, rax
.text:0000000000005D6D                 jb      loc_5CAB
.text:0000000000005D73
.text:0000000000005D73 loc_5D73:                               ; CODE XREF: copy_with_unblock+65↑j
.text:0000000000005D73                 add     rbx, 1
.text:0000000000005D77                 call    write_output
.text:0000000000005D7C                 cmp     rbp, rbx
.text:0000000000005D7F                 ja      loc_5CB8
.text:0000000000005D85
.text:0000000000005D85 loc_5D85:                               ; CODE XREF: copy_with_unblock+72↑j
.text:0000000000005D85                 add     rsp, 8
.text:0000000000005D89                 pop     rbx
.text:0000000000005D8A                 pop     rbp
.text:0000000000005D8B                 pop     r12
.text:0000000000005D8D                 pop     r13
.text:0000000000005D8F                 retn
.text:0000000000005D90 ; ---------------------------------------------------------------------------
.text:0000000000005D90
.text:0000000000005D90 loc_5D90:                               ; CODE XREF: copy_with_unblock+A9↑j
.text:0000000000005D90                 add     rdx, 1
.text:0000000000005D94                 mov     cs:pending_spaces_7443, rdx
.text:0000000000005D9B                 jmp     loc_5CAB
.text:0000000000005DA0 ; ---------------------------------------------------------------------------
.text:0000000000005DA0
.text:0000000000005DA0 loc_5DA0:                               ; CODE XREF: copy_with_unblock+C9↑j
.text:0000000000005DA0                 mov     rdx, rax
.text:0000000000005DA3                 jmp     short loc_5D5B
.text:0000000000005DA3 ; ---------------------------------------------------------------------------
.text:0000000000005DA5                 align 8
.text:0000000000005DA8
.text:0000000000005DA8 locret_5DA8:                            ; CODE XREF: copy_with_unblock+3↑j
.text:0000000000005DA8                 rep retn
.text:0000000000005DA8 ; } // starts at 5C40
.text:0000000000005DA8 copy_with_unblock endp
.text:0000000000005DA8
.text:0000000000005DA8 ; ---------------------------------------------------------------------------
.text:0000000000005DAA                 align 10h
.text:0000000000005DB0
.text:0000000000005DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DB0
.text:0000000000005DB0 ; Attributes: info_from_lumina
.text:0000000000005DB0
.text:0000000000005DB0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005DB0                 public close_stream
.text:0000000000005DB0 close_stream    proc near               ; CODE XREF: maybe_close_stdout+14↑p
.text:0000000000005DB0                                         ; close_stdout+D↓p ...
.text:0000000000005DB0 ; __unwind {
.text:0000000000005DB0                 push    r12
.text:0000000000005DB2                 push    rbp
.text:0000000000005DB3                 mov     rbp, rdi
.text:0000000000005DB6                 push    rbx
.text:0000000000005DB7                 call    ___fpending
.text:0000000000005DBC                 mov     ebx, [rbp+0]
.text:0000000000005DBF                 mov     rdi, rbp        ; stream
.text:0000000000005DC2                 mov     r12, rax
.text:0000000000005DC5                 call    rpl_fclose
.text:0000000000005DCA                 and     ebx, 20h
.text:0000000000005DCD                 test    ebx, ebx
.text:0000000000005DCF                 jnz     short loc_5DE8
.text:0000000000005DD1                 test    eax, eax
.text:0000000000005DD3                 jz      short loc_5DDF
.text:0000000000005DD5                 test    r12, r12
.text:0000000000005DD8                 mov     eax, 0FFFFFFFFh
.text:0000000000005DDD                 jz      short loc_5E18
.text:0000000000005DDF
.text:0000000000005DDF loc_5DDF:                               ; CODE XREF: close_stream+23↑j
.text:0000000000005DDF                 pop     rbx
.text:0000000000005DE0                 pop     rbp
.text:0000000000005DE1                 pop     r12
.text:0000000000005DE3                 retn
.text:0000000000005DE3 ; ---------------------------------------------------------------------------
.text:0000000000005DE4                 align 8
.text:0000000000005DE8
.text:0000000000005DE8 loc_5DE8:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005DE8                 test    eax, eax
.text:0000000000005DEA                 jnz     short loc_5E08
.text:0000000000005DEC                 call    ___errno_location
.text:0000000000005DF1                 mov     dword ptr [rax], 0
.text:0000000000005DF7                 mov     eax, 0FFFFFFFFh
.text:0000000000005DFC                 pop     rbx
.text:0000000000005DFD                 pop     rbp
.text:0000000000005DFE                 pop     r12
.text:0000000000005E00                 retn
.text:0000000000005E00 ; ---------------------------------------------------------------------------
.text:0000000000005E01                 align 8
.text:0000000000005E08
.text:0000000000005E08 loc_5E08:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005E08                 pop     rbx
.text:0000000000005E09                 mov     eax, 0FFFFFFFFh
.text:0000000000005E0E                 pop     rbp
.text:0000000000005E0F                 pop     r12
.text:0000000000005E11                 retn
.text:0000000000005E11 ; ---------------------------------------------------------------------------
.text:0000000000005E12                 align 8
.text:0000000000005E18
.text:0000000000005E18 loc_5E18:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005E18                 call    ___errno_location
.text:0000000000005E1D                 cmp     dword ptr [rax], 9
.text:0000000000005E20                 pop     rbx
.text:0000000000005E21                 pop     rbp
.text:0000000000005E22                 pop     r12
.text:0000000000005E24                 setnz   al
.text:0000000000005E27                 movzx   eax, al
.text:0000000000005E2A                 neg     eax
.text:0000000000005E2C                 retn
.text:0000000000005E2C ; } // starts at 5DB0
.text:0000000000005E2C close_stream    endp
.text:0000000000005E2C
.text:0000000000005E2C ; ---------------------------------------------------------------------------
.text:0000000000005E2D                 align 10h
.text:0000000000005E30
.text:0000000000005E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E30
.text:0000000000005E30
.text:0000000000005E30                 public close_stdout_set_file_name
.text:0000000000005E30 close_stdout_set_file_name proc near
.text:0000000000005E30 ; __unwind {
.text:0000000000005E30                 mov     cs:file_name, rdi
.text:0000000000005E37                 retn
.text:0000000000005E37 ; } // starts at 5E30
.text:0000000000005E37 close_stdout_set_file_name endp
.text:0000000000005E37
.text:0000000000005E37 ; ---------------------------------------------------------------------------
.text:0000000000005E38                 align 20h
.text:0000000000005E40
.text:0000000000005E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E40
.text:0000000000005E40
.text:0000000000005E40                 public close_stdout_set_ignore_EPIPE
.text:0000000000005E40 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005E40 ; __unwind {
.text:0000000000005E40                 mov     cs:ignore_EPIPE, dil
.text:0000000000005E47                 retn
.text:0000000000005E47 ; } // starts at 5E40
.text:0000000000005E47 close_stdout_set_ignore_EPIPE endp
.text:0000000000005E47
.text:0000000000005E47 ; ---------------------------------------------------------------------------
.text:0000000000005E48                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50 ; Attributes: info_from_lumina
.text:0000000000005E50
.text:0000000000005E50 ; void __cdecl close_stdout()
.text:0000000000005E50                 public close_stdout
.text:0000000000005E50 close_stdout    proc near               ; CODE XREF: maybe_close_stdout:loc_4758↑j
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 push    rbp
.text:0000000000005E51                 push    rbx
.text:0000000000005E52                 sub     rsp, 8
.text:0000000000005E56                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000005E5D                 call    close_stream
.text:0000000000005E62                 test    eax, eax
.text:0000000000005E64                 jz      short loc_5E7C
.text:0000000000005E66                 call    ___errno_location
.text:0000000000005E6B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000005E72                 mov     rbx, rax
.text:0000000000005E75                 jz      short loc_5E93
.text:0000000000005E77                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000005E7A                 jnz     short loc_5E93
.text:0000000000005E7C
.text:0000000000005E7C loc_5E7C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000005E7C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000005E83                 call    close_stream
.text:0000000000005E88                 test    eax, eax
.text:0000000000005E8A                 jnz     short loc_5ED2
.text:0000000000005E8C                 add     rsp, 8
.text:0000000000005E90                 pop     rbx
.text:0000000000005E91                 pop     rbp
.text:0000000000005E92                 retn
.text:0000000000005E93 ; ---------------------------------------------------------------------------
.text:0000000000005E93
.text:0000000000005E93 loc_5E93:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000005E93                                         ; close_stdout+2A↑j
.text:0000000000005E93                 lea     rsi, aWriteError ; "write error"
.text:0000000000005E9A                 xor     edi, edi        ; domainname
.text:0000000000005E9C                 mov     edx, 5          ; category
.text:0000000000005EA1                 call    _dcgettext
.text:0000000000005EA6                 mov     rdi, cs:file_name
.text:0000000000005EAD                 mov     rbp, rax
.text:0000000000005EB0                 test    rdi, rdi
.text:0000000000005EB3                 jz      short loc_5EDD
.text:0000000000005EB5                 call    quotearg_colon
.text:0000000000005EBA                 mov     esi, [rbx]      ; errnum
.text:0000000000005EBC                 lea     rdx, format     ; "%s: %s"
.text:0000000000005EC3                 mov     rcx, rax
.text:0000000000005EC6                 mov     r8, rbp
.text:0000000000005EC9                 xor     edi, edi        ; status
.text:0000000000005ECB                 xor     eax, eax
.text:0000000000005ECD                 call    _error
.text:0000000000005ED2
.text:0000000000005ED2 loc_5ED2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000005ED2                                         ; close_stdout+A2↓j
.text:0000000000005ED2                 mov     edi, cs:exit_failure ; status
.text:0000000000005ED8                 call    __exit
.text:0000000000005EDD ; ---------------------------------------------------------------------------
.text:0000000000005EDD
.text:0000000000005EDD loc_5EDD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000005EDD                 mov     esi, [rbx]      ; errnum
.text:0000000000005EDF                 lea     rdx, aLuBytesSCopied+1Bh ; format
.text:0000000000005EE6                 mov     rcx, rax
.text:0000000000005EE9                 xor     edi, edi        ; status
.text:0000000000005EEB                 xor     eax, eax
.text:0000000000005EED                 call    _error
.text:0000000000005EF2                 jmp     short loc_5ED2
.text:0000000000005EF2 ; } // starts at 5E50
.text:0000000000005EF2 close_stdout    endp
.text:0000000000005EF2
.text:0000000000005EF2 ; ---------------------------------------------------------------------------
.text:0000000000005EF4                 align 20h
.text:0000000000005F00
.text:0000000000005F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F00
.text:0000000000005F00
.text:0000000000005F00 ; __int64 __fastcall fd_reopen(int fd2, char *file, int oflag)
.text:0000000000005F00                 public fd_reopen
.text:0000000000005F00 fd_reopen       proc near               ; CODE XREF: ifd_reopen+32↑p
.text:0000000000005F00 ; __unwind {
.text:0000000000005F00                 push    r13
.text:0000000000005F02                 push    r12
.text:0000000000005F04                 xor     eax, eax
.text:0000000000005F06                 push    rbp
.text:0000000000005F07                 push    rbx
.text:0000000000005F08                 mov     ebp, edi
.text:0000000000005F0A                 mov     rdi, rsi        ; file
.text:0000000000005F0D                 mov     esi, edx        ; oflag
.text:0000000000005F0F                 mov     edx, ecx
.text:0000000000005F11                 sub     rsp, 8
.text:0000000000005F15                 call    _open
.text:0000000000005F1A                 cmp     ebp, eax
.text:0000000000005F1C                 mov     ebx, eax
.text:0000000000005F1E                 jz      short loc_5F49
.text:0000000000005F20                 test    eax, eax
.text:0000000000005F22                 js      short loc_5F49
.text:0000000000005F24                 mov     esi, ebp        ; fd2
.text:0000000000005F26                 mov     edi, eax        ; fd
.text:0000000000005F28                 call    _dup2
.text:0000000000005F2D                 mov     r12d, eax
.text:0000000000005F30                 call    ___errno_location
.text:0000000000005F35                 mov     r13d, [rax]
.text:0000000000005F38                 mov     rbp, rax
.text:0000000000005F3B                 mov     edi, ebx        ; fd
.text:0000000000005F3D                 call    _close
.text:0000000000005F42                 mov     ebx, r12d
.text:0000000000005F45                 mov     [rbp+0], r13d
.text:0000000000005F49
.text:0000000000005F49 loc_5F49:                               ; CODE XREF: fd_reopen+1E↑j
.text:0000000000005F49                                         ; fd_reopen+22↑j
.text:0000000000005F49                 add     rsp, 8
.text:0000000000005F4D                 mov     eax, ebx
.text:0000000000005F4F                 pop     rbx
.text:0000000000005F50                 pop     rbp
.text:0000000000005F51                 pop     r12
.text:0000000000005F53                 pop     r13
.text:0000000000005F55                 retn
.text:0000000000005F55 ; } // starts at 5F00
.text:0000000000005F55 fd_reopen       endp
.text:0000000000005F55
.text:0000000000005F55 ; ---------------------------------------------------------------------------
.text:0000000000005F56                 align 20h
.text:0000000000005F60
.text:0000000000005F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F60
.text:0000000000005F60
.text:0000000000005F60                 public gethrxtime
.text:0000000000005F60 gethrxtime      proc near               ; CODE XREF: main:loc_2573↑p
.text:0000000000005F60                                         ; main:loc_287D↑p ...
.text:0000000000005F60
.text:0000000000005F60 var_28          = qword ptr -28h
.text:0000000000005F60 var_20          = qword ptr -20h
.text:0000000000005F60 var_10          = qword ptr -10h
.text:0000000000005F60
.text:0000000000005F60 ; __unwind {
.text:0000000000005F60                 push    rbx
.text:0000000000005F61                 mov     edi, 1          ; clock_id
.text:0000000000005F66                 sub     rsp, 20h
.text:0000000000005F6A                 mov     rbx, rsp
.text:0000000000005F6D                 mov     rsi, rbx        ; tp
.text:0000000000005F70                 mov     rax, fs:28h
.text:0000000000005F79                 mov     [rsp+28h+var_10], rax
.text:0000000000005F7E                 xor     eax, eax
.text:0000000000005F80                 call    _clock_gettime
.text:0000000000005F85                 test    eax, eax
.text:0000000000005F87                 jz      short loc_5F91
.text:0000000000005F89                 mov     rdi, rbx        ; tp
.text:0000000000005F8C                 call    gettime
.text:0000000000005F91
.text:0000000000005F91 loc_5F91:                               ; CODE XREF: gethrxtime+27↑j
.text:0000000000005F91                 mov     rcx, [rsp+28h+var_20]
.text:0000000000005F96                 mov     rdx, 112E0BE826D694B3h
.text:0000000000005FA0                 mov     rax, rcx
.text:0000000000005FA3                 imul    rdx
.text:0000000000005FA6                 mov     rax, rcx
.text:0000000000005FA9                 sar     rax, 3Fh
.text:0000000000005FAD                 sar     rdx, 1Ah
.text:0000000000005FB1                 sub     rdx, rax
.text:0000000000005FB4                 mov     rax, [rsp+28h+var_28]
.text:0000000000005FB8                 add     rax, rdx
.text:0000000000005FBB                 imul    rdx, 3B9ACA00h
.text:0000000000005FC2                 imul    rax, 3B9ACA00h
.text:0000000000005FC9                 sub     rcx, rdx
.text:0000000000005FCC                 add     rax, rcx
.text:0000000000005FCF                 mov     rsi, [rsp+28h+var_10]
.text:0000000000005FD4                 xor     rsi, fs:28h
.text:0000000000005FDD                 jnz     short loc_5FE5
.text:0000000000005FDF                 add     rsp, 20h
.text:0000000000005FE3                 pop     rbx
.text:0000000000005FE4                 retn
.text:0000000000005FE5 ; ---------------------------------------------------------------------------
.text:0000000000005FE5
.text:0000000000005FE5 loc_5FE5:                               ; CODE XREF: gethrxtime+7D↑j
.text:0000000000005FE5                 call    ___stack_chk_fail
.text:0000000000005FE5 ; } // starts at 5F60
.text:0000000000005FE5 gethrxtime      endp
.text:0000000000005FE5
.text:0000000000005FE5 ; ---------------------------------------------------------------------------
.text:0000000000005FEA                 align 10h
.text:0000000000005FF0
.text:0000000000005FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FF0
.text:0000000000005FF0
.text:0000000000005FF0 ; __int64 __fastcall gettime(struct timespec *tp)
.text:0000000000005FF0                 public gettime
.text:0000000000005FF0 gettime         proc near               ; CODE XREF: gethrxtime+2C↑p
.text:0000000000005FF0 ; __unwind {
.text:0000000000005FF0                 mov     rsi, rdi        ; tp
.text:0000000000005FF3                 xor     edi, edi        ; clock_id
.text:0000000000005FF5                 jmp     _clock_gettime
.text:0000000000005FF5 ; } // starts at 5FF0
.text:0000000000005FF5 gettime         endp
.text:0000000000005FF5
.text:0000000000005FF5 ; ---------------------------------------------------------------------------
.text:0000000000005FFA                 align 20h
.text:0000000000006000
.text:0000000000006000 ; =============== S U B R O U T I N E =======================================
.text:0000000000006000
.text:0000000000006000
.text:0000000000006000                 public current_timespec
.text:0000000000006000 current_timespec proc near
.text:0000000000006000
.text:0000000000006000 var_28          = qword ptr -28h
.text:0000000000006000 var_20          = qword ptr -20h
.text:0000000000006000 var_10          = qword ptr -10h
.text:0000000000006000
.text:0000000000006000 ; __unwind {
.text:0000000000006000                 sub     rsp, 28h
.text:0000000000006004                 xor     edi, edi        ; clock_id
.text:0000000000006006                 mov     rsi, rsp        ; tp
.text:0000000000006009                 mov     rax, fs:28h
.text:0000000000006012                 mov     [rsp+28h+var_10], rax
.text:0000000000006017                 xor     eax, eax
.text:0000000000006019                 call    _clock_gettime
.text:000000000000601E                 mov     rcx, [rsp+28h+var_10]
.text:0000000000006023                 xor     rcx, fs:28h
.text:000000000000602C                 mov     rax, [rsp+28h+var_28]
.text:0000000000006030                 mov     rdx, [rsp+28h+var_20]
.text:0000000000006035                 jnz     short loc_603C
.text:0000000000006037                 add     rsp, 28h
.text:000000000000603B                 retn
.text:000000000000603C ; ---------------------------------------------------------------------------
.text:000000000000603C
.text:000000000000603C loc_603C:                               ; CODE XREF: current_timespec+35↑j
.text:000000000000603C                 call    ___stack_chk_fail
.text:000000000000603C ; } // starts at 6000
.text:000000000000603C current_timespec endp
.text:000000000000603C
.text:000000000000603C ; ---------------------------------------------------------------------------
.text:0000000000006041                 align 10h
.text:0000000000006050
.text:0000000000006050 ; =============== S U B R O U T I N E =======================================
.text:0000000000006050
.text:0000000000006050 ; Attributes: info_from_lumina
.text:0000000000006050
.text:0000000000006050 ; long double __usercall adjust_value@<st0>(int inexact_style@<edi>, long double value)
.text:0000000000006050 adjust_value    proc near               ; CODE XREF: human_readable+578↓p
.text:0000000000006050                                         ; human_readable+59A↓p ...
.text:0000000000006050
.text:0000000000006050 var_20          = qword ptr -20h
.text:0000000000006050 var_18          = qword ptr -18h
.text:0000000000006050 var_C           = word ptr -0Ch
.text:0000000000006050 var_A           = word ptr -0Ah
.text:0000000000006050 arg_0           = tbyte ptr  8
.text:0000000000006050
.text:0000000000006050 ; __unwind {
.text:0000000000006050                 fld     cs:flt_E1E4
.text:0000000000006056                 fld     [rsp+arg_0]
.text:000000000000605A                 fucomi  st, st(1)
.text:000000000000605C                 jnb     short loc_60D0
.text:000000000000605E                 fstp    st(1)
.text:0000000000006060                 fnstcw  [rsp+var_A]
.text:0000000000006064                 movzx   eax, [rsp+var_A]
.text:0000000000006069                 or      ah, 0Ch
.text:000000000000606C                 mov     [rsp+var_C], ax
.text:0000000000006071                 fld     st
.text:0000000000006073                 fldcw   [rsp+var_C]
.text:0000000000006077                 fistp   [rsp+var_18]
.text:000000000000607B                 fldcw   [rsp+var_A]
.text:000000000000607F                 mov     rax, [rsp+var_18]
.text:0000000000006084
.text:0000000000006084 loc_6084:                               ; CODE XREF: adjust_value+B3↓j
.text:0000000000006084                 mov     [rsp+var_20], rax
.text:0000000000006089                 test    rax, rax
.text:000000000000608C                 fild    [rsp+var_20]
.text:0000000000006090                 jns     short loc_6098
.text:0000000000006092                 fadd    cs:flt_E1E8
.text:0000000000006098
.text:0000000000006098 loc_6098:                               ; CODE XREF: adjust_value+40↑j
.text:0000000000006098                 test    edi, edi
.text:000000000000609A                 jnz     short loc_60C8
.text:000000000000609C                 fxch    st(1)
.text:000000000000609E                 fucomip st, st(1)
.text:00000000000060A0                 jp      short loc_60A8
.text:00000000000060A2                 jz      short locret_60CA
.text:00000000000060A4                 fstp    st
.text:00000000000060A6                 jmp     short loc_60B0
.text:00000000000060A8 ; ---------------------------------------------------------------------------
.text:00000000000060A8
.text:00000000000060A8 loc_60A8:                               ; CODE XREF: adjust_value+50↑j
.text:00000000000060A8                 fstp    st
.text:00000000000060AA                 nop     word ptr [rax+rax+00h]
.text:00000000000060B0
.text:00000000000060B0 loc_60B0:                               ; CODE XREF: adjust_value+56↑j
.text:00000000000060B0                 add     rax, 1
.text:00000000000060B4                 mov     [rsp+var_20], rax
.text:00000000000060B9                 test    rax, rax
.text:00000000000060BC                 fild    [rsp+var_20]
.text:00000000000060C0                 js      short loc_6110
.text:00000000000060C2                 jmp     short locret_60CA
.text:00000000000060C2 ; ---------------------------------------------------------------------------
.text:00000000000060C4                 align 8
.text:00000000000060C8
.text:00000000000060C8 loc_60C8:                               ; CODE XREF: adjust_value+4A↑j
.text:00000000000060C8                 fstp    st(1)
.text:00000000000060CA
.text:00000000000060CA locret_60CA:                            ; CODE XREF: adjust_value+52↑j
.text:00000000000060CA                                         ; adjust_value+72↑j
.text:00000000000060CA                 rep retn
.text:00000000000060CA ; ---------------------------------------------------------------------------
.text:00000000000060CC                 align 10h
.text:00000000000060D0
.text:00000000000060D0 loc_60D0:                               ; CODE XREF: adjust_value+C↑j
.text:00000000000060D0                 fnstcw  [rsp+var_A]
.text:00000000000060D4                 movzx   eax, [rsp+var_A]
.text:00000000000060D9                 fsubr   st(1), st
.text:00000000000060DB                 fxch    st(1)
.text:00000000000060DD                 mov     rdx, 8000000000000000h
.text:00000000000060E7                 or      ah, 0Ch
.text:00000000000060EA                 mov     [rsp+var_C], ax
.text:00000000000060EF                 fldcw   [rsp+var_C]
.text:00000000000060F3                 fistp   [rsp+var_18]
.text:00000000000060F7                 fldcw   [rsp+var_A]
.text:00000000000060FB                 mov     rax, [rsp+var_18]
.text:0000000000006100                 xor     rax, rdx
.text:0000000000006103                 jmp     loc_6084
.text:0000000000006103 ; ---------------------------------------------------------------------------
.text:0000000000006108                 align 10h
.text:0000000000006110
.text:0000000000006110 loc_6110:                               ; CODE XREF: adjust_value+70↑j
.text:0000000000006110                 fadd    cs:flt_E1E8
.text:0000000000006116                 retn
.text:0000000000006116 ; } // starts at 6050
.text:0000000000006116 adjust_value    endp
.text:0000000000006116
.text:0000000000006116 ; ---------------------------------------------------------------------------
.text:0000000000006117                 align 20h
.text:0000000000006120
.text:0000000000006120 ; =============== S U B R O U T I N E =======================================
.text:0000000000006120
.text:0000000000006120 ; Attributes: info_from_lumina
.text:0000000000006120
.text:0000000000006120 ; char *__fastcall human_readable(uintmax_t n, char *buf, int opts, uintmax_t from_block_size, uintmax_t to_block_size)
.text:0000000000006120                 public human_readable
.text:0000000000006120 human_readable  proc near               ; CODE XREF: print_xfer_stats+52↑p
.text:0000000000006120                                         ; print_xfer_stats+78↑p ...
.text:0000000000006120
.text:0000000000006120 var_D8          = tbyte ptr -0D8h
.text:0000000000006120 s               = qword ptr -0C8h
.text:0000000000006120 var_C0          = qword ptr -0C0h
.text:0000000000006120 var_B8          = qword ptr -0B8h
.text:0000000000006120 src             = qword ptr -0B0h
.text:0000000000006120 var_A8          = tbyte ptr -0A8h
.text:0000000000006120 var_98          = dword ptr -98h
.text:0000000000006120 var_94          = dword ptr -94h
.text:0000000000006120 var_90          = qword ptr -90h
.text:0000000000006120 n               = qword ptr -88h
.text:0000000000006120 var_80          = qword ptr -80h
.text:0000000000006120 var_78          = byte ptr -78h
.text:0000000000006120 var_40          = qword ptr -40h
.text:0000000000006120
.text:0000000000006120 ; __unwind {
.text:0000000000006120                 push    r15
.text:0000000000006122                 push    r14
.text:0000000000006124                 mov     eax, edx
.text:0000000000006126                 push    r13
.text:0000000000006128                 push    r12
.text:000000000000612A                 mov     r15d, edx
.text:000000000000612D                 push    rbp
.text:000000000000612E                 push    rbx
.text:000000000000612F                 and     eax, 20h
.text:0000000000006132                 and     r15d, 3
.text:0000000000006136                 mov     r12d, edx
.text:0000000000006139                 mov     rbx, rdi
.text:000000000000613C                 sub     rsp, 98h
.text:0000000000006143                 mov     [rsp+0C8h+src], rcx
.text:0000000000006148                 mov     [rsp+0C8h+var_98], eax
.text:000000000000614C                 mov     rcx, fs:28h
.text:0000000000006155                 mov     [rsp+0C8h+var_40], rcx
.text:000000000000615D                 xor     ecx, ecx
.text:000000000000615F                 cmp     eax, 1
.text:0000000000006162                 mov     [rsp+0C8h+s], rsi
.text:0000000000006166                 mov     [rsp+0C8h+var_B8], r8
.text:000000000000616B                 sbb     eax, eax
.text:000000000000616D                 and     eax, 0FFFFFFE8h
.text:0000000000006170                 add     eax, 400h
.text:0000000000006175                 mov     [rsp+0C8h+var_94], eax
.text:0000000000006179                 call    _localeconv
.text:000000000000617E                 mov     r14, [rax]
.text:0000000000006181                 mov     r13, rax
.text:0000000000006184                 mov     rdi, r14        ; s
.text:0000000000006187                 call    _strlen
.text:000000000000618C                 mov     rcx, [r13+10h]
.text:0000000000006190                 mov     r13, [r13+8]
.text:0000000000006194                 mov     rbp, rax
.text:0000000000006197                 sub     rax, 1
.text:000000000000619B                 mov     edx, 1
.text:00000000000061A0                 cmp     rax, 10h
.text:00000000000061A4                 lea     rax, asc_E189   ; "."
.text:00000000000061AB                 mov     rdi, r13        ; s
.text:00000000000061AE                 cmovnb  rbp, rdx
.text:00000000000061B2                 mov     [rsp+0C8h+var_90], rcx
.text:00000000000061B7                 cmovnb  r14, rax
.text:00000000000061BB                 call    _strlen
.text:00000000000061C0                 cmp     rax, 11h
.text:00000000000061C4                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:00000000000061CB                 mov     rdi, [rsp+0C8h+var_B8]
.text:00000000000061D0                 mov     rcx, [rsp+0C8h+src]
.text:00000000000061D5                 cmovnb  r13, rax
.text:00000000000061D9                 mov     rax, [rsp+0C8h+s]
.text:00000000000061DD                 add     rax, 287h
.text:00000000000061E3                 cmp     rdi, rcx
.text:00000000000061E6                 mov     [rsp+0C8h+var_C0], rax
.text:00000000000061EB                 ja      loc_6338
.text:00000000000061F1                 xor     edx, edx
.text:00000000000061F3                 mov     rax, rcx
.text:00000000000061F6                 div     rdi
.text:00000000000061F9                 test    rdx, rdx
.text:00000000000061FC                 mov     rdi, rax
.text:00000000000061FF                 jz      loc_6560
.text:0000000000006205
.text:0000000000006205 loc_6205:                               ; CODE XREF: human_readable+21B↓j
.text:0000000000006205                                         ; human_readable+231↓j ...
.text:0000000000006205                 mov     [rsp+0C8h+src], rcx
.text:000000000000620A                 test    rcx, rcx
.text:000000000000620D                 fild    [rsp+0C8h+src]
.text:0000000000006211                 jns     short loc_6219
.text:0000000000006213                 fadd    cs:flt_E1E8
.text:0000000000006219
.text:0000000000006219 loc_6219:                               ; CODE XREF: human_readable+F1↑j
.text:0000000000006219                 mov     rax, [rsp+0C8h+var_B8]
.text:000000000000621E                 mov     [rsp+0C8h+src], rax
.text:0000000000006223                 test    rax, rax
.text:0000000000006226                 fild    [rsp+0C8h+src]
.text:000000000000622A                 jns     short loc_6232
.text:000000000000622C                 fadd    cs:flt_E1E8
.text:0000000000006232
.text:0000000000006232 loc_6232:                               ; CODE XREF: human_readable+10A↑j
.text:0000000000006232                 fdivp   st(1), st
.text:0000000000006234                 mov     [rsp+0C8h+src], rbx
.text:0000000000006239                 test    rbx, rbx
.text:000000000000623C                 fild    [rsp+0C8h+src]
.text:0000000000006240                 jns     short loc_6248
.text:0000000000006242                 fadd    cs:flt_E1E8
.text:0000000000006248
.text:0000000000006248 loc_6248:                               ; CODE XREF: human_readable+120↑j
.text:0000000000006248                 test    r12b, 10h
.text:000000000000624C                 fmulp   st(1), st
.text:000000000000624E                 jz      loc_6418
.text:0000000000006254                 fild    [rsp+0C8h+var_94]
.text:0000000000006258                 xor     ebx, ebx
.text:000000000000625A                 fld     st
.text:000000000000625C                 jmp     short loc_6264
.text:000000000000625C ; ---------------------------------------------------------------------------
.text:000000000000625E                 align 20h
.text:0000000000006260
.text:0000000000006260 loc_6260:                               ; CODE XREF: human_readable+154↓j
.text:0000000000006260                 fstp    st(1)
.text:0000000000006262                 fxch    st(2)
.text:0000000000006264
.text:0000000000006264 loc_6264:                               ; CODE XREF: human_readable+13C↑j
.text:0000000000006264                 fld     st
.text:0000000000006266                 add     ebx, 1
.text:0000000000006269                 fmul    st, st(2)
.text:000000000000626B                 fxch    st(3)
.text:000000000000626D                 fucomi  st, st(3)
.text:000000000000626F                 jb      short loc_6280
.text:0000000000006271                 cmp     ebx, 8
.text:0000000000006274                 jnz     short loc_6260
.text:0000000000006276                 fstp    st(2)
.text:0000000000006278                 fstp    st(2)
.text:000000000000627A                 jmp     short loc_6284
.text:000000000000627A ; ---------------------------------------------------------------------------
.text:000000000000627C                 align 20h
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: human_readable+14F↑j
.text:0000000000006280                 fstp    st(2)
.text:0000000000006282                 fstp    st(2)
.text:0000000000006284
.text:0000000000006284 loc_6284:                               ; CODE XREF: human_readable+15A↑j
.text:0000000000006284                 mov     ecx, [rsp+0C8h+var_98]
.text:0000000000006288                 add     rbp, 1
.text:000000000000628C                 xor     eax, eax
.text:000000000000628E                 fdivrp  st(1), st
.text:0000000000006290                 test    ecx, ecx
.text:0000000000006292                 setz    al
.text:0000000000006295                 cmp     r15d, 1
.text:0000000000006299                 lea     rax, [rbp+rax+1]
.text:000000000000629E                 mov     [rsp+0C8h+src], rax
.text:00000000000062A3                 jz      loc_6810
.text:00000000000062A9                 fld     cs:tbyte_E1F0
.text:00000000000062AF                 fucomip st, st(1)
.text:00000000000062B1                 ja      loc_6688
.text:00000000000062B7                 fld     st
.text:00000000000062B9
.text:00000000000062B9 loc_62B9:                               ; CODE XREF: human_readable+583↓j
.text:00000000000062B9                 fstp    [rsp+0C8h+var_A8]
.text:00000000000062BD                 sub     rsp, 10h
.text:00000000000062C1                 lea     rcx, a1lf       ; "%.1Lf"
.text:00000000000062C8                 mov     esi, 1
.text:00000000000062CD                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000062D4                 xor     eax, eax
.text:00000000000062D6                 mov     r14, [rsp+0D8h+s]
.text:00000000000062DB                 mov     rdi, r14
.text:00000000000062DE                 fstp    [rsp+0D8h+var_D8]
.text:00000000000062E1                 call    ___sprintf_chk
.text:00000000000062E6                 mov     rdi, r14        ; s
.text:00000000000062E9                 call    _strlen
.text:00000000000062EE                 pop     rcx
.text:00000000000062EF                 pop     rsi
.text:00000000000062F0                 cmp     rax, [rsp+0C8h+src]
.text:00000000000062F5                 mov     r14, rax
.text:00000000000062F8                 fld     [rsp+0C8h+var_A8]
.text:00000000000062FC                 ja      loc_68A8
.text:0000000000006302
.text:0000000000006302 loc_6302:                               ; CODE XREF: human_readable+735↓j
.text:0000000000006302                 test    r12b, 8
.text:0000000000006306                 jz      loc_6470
.text:000000000000630C                 mov     rax, [rsp+0C8h+s]
.text:0000000000006310                 cmp     byte ptr [rax+r14-1], 30h ; '0'
.text:0000000000006316                 jnz     loc_6478
.text:000000000000631C                 fld     cs:flt_E1EC
.text:0000000000006322                 cmp     r15d, 1
.text:0000000000006326                 fmul    st(1), st
.text:0000000000006328                 jnz     loc_68B0
.text:000000000000632E                 jmp     loc_6863
.text:000000000000632E ; ---------------------------------------------------------------------------
.text:0000000000006333                 align 8
.text:0000000000006338
.text:0000000000006338 loc_6338:                               ; CODE XREF: human_readable+CB↑j
.text:0000000000006338                 test    rcx, rcx
.text:000000000000633B                 jz      loc_6205
.text:0000000000006341                 mov     rax, [rsp+0C8h+var_B8]
.text:0000000000006346                 xor     edx, edx
.text:0000000000006348                 div     rcx
.text:000000000000634B                 test    rdx, rdx
.text:000000000000634E                 mov     r8, rax
.text:0000000000006351                 jnz     loc_6205
.text:0000000000006357                 mov     rax, rbx
.text:000000000000635A                 xor     edx, edx
.text:000000000000635C                 div     r8
.text:000000000000635F                 mov     rbx, rax
.text:0000000000006362                 lea     rax, [rdx+rdx*4]
.text:0000000000006366                 xor     edx, edx
.text:0000000000006368                 mov     rsi, rbx
.text:000000000000636B                 add     rax, rax
.text:000000000000636E                 div     r8
.text:0000000000006371                 add     rdx, rdx
.text:0000000000006374                 mov     r9d, eax
.text:0000000000006377                 cmp     r8, rdx
.text:000000000000637A                 jbe     loc_6908
.text:0000000000006380                 xor     edi, edi
.text:0000000000006382                 test    rdx, rdx
.text:0000000000006385                 setnz   dil
.text:0000000000006389
.text:0000000000006389 loc_6389:                               ; CODE XREF: human_readable+45D↓j
.text:0000000000006389                                         ; human_readable+7F3↓j
.text:0000000000006389                 mov     ecx, r12d
.text:000000000000638C                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000006391                 mov     ebx, 0FFFFFFFFh
.text:0000000000006396                 and     ecx, 10h
.text:0000000000006399                 jz      loc_6760
.text:000000000000639F                 mov     r8d, [rsp+0C8h+var_94]
.text:00000000000063A4                 cmp     r8, rsi
.text:00000000000063A7                 mov     r11, r8
.text:00000000000063AA                 ja      loc_6920
.text:00000000000063B0                 xor     ebx, ebx
.text:00000000000063B2                 jmp     short loc_63D7
.text:00000000000063B2 ; ---------------------------------------------------------------------------
.text:00000000000063B4                 align 8
.text:00000000000063B8
.text:00000000000063B8 loc_63B8:                               ; CODE XREF: human_readable+2E0↓j
.text:00000000000063B8                 test    edi, edi
.text:00000000000063BA                 setnz   dil
.text:00000000000063BE                 movzx   edi, dil
.text:00000000000063C2
.text:00000000000063C2 loc_63C2:                               ; CODE XREF: human_readable+2F0↓j
.text:00000000000063C2                 add     ebx, 1
.text:00000000000063C5                 cmp     r8, r10
.text:00000000000063C8                 ja      loc_66DD
.text:00000000000063CE                 cmp     ebx, 8
.text:00000000000063D1                 jz      loc_6978
.text:00000000000063D7
.text:00000000000063D7 loc_63D7:                               ; CODE XREF: human_readable+292↑j
.text:00000000000063D7                 mov     rax, rsi
.text:00000000000063DA                 xor     edx, edx
.text:00000000000063DC                 mov     esi, edi
.text:00000000000063DE                 div     r8
.text:00000000000063E1                 sar     esi, 1
.text:00000000000063E3                 mov     r10, rax
.text:00000000000063E6                 lea     eax, [rdx+rdx*4]
.text:00000000000063E9                 xor     edx, edx
.text:00000000000063EB                 lea     eax, [r9+rax*2]
.text:00000000000063EF                 div     r11d
.text:00000000000063F2                 lea     edx, [rsi+rdx*2]
.text:00000000000063F5                 mov     r9d, eax
.text:00000000000063F8                 mov     rsi, r10
.text:00000000000063FB                 add     edi, edx
.text:00000000000063FD                 cmp     r11d, edx
.text:0000000000006400                 ja      short loc_63B8
.text:0000000000006402                 cmp     r11d, edi
.text:0000000000006405                 setb    dil
.text:0000000000006409                 movzx   edi, dil
.text:000000000000640D                 add     edi, 2
.text:0000000000006410                 jmp     short loc_63C2
.text:0000000000006410 ; ---------------------------------------------------------------------------
.text:0000000000006412                 align 8
.text:0000000000006418
.text:0000000000006418 loc_6418:                               ; CODE XREF: human_readable+12E↑j
.text:0000000000006418                 cmp     r15d, 1
.text:000000000000641C                 jz      short loc_642C
.text:000000000000641E                 fld     cs:tbyte_E1F0
.text:0000000000006424                 fucomip st, st(1)
.text:0000000000006426                 ja      loc_66B0
.text:000000000000642C
.text:000000000000642C loc_642C:                               ; CODE XREF: human_readable+2FC↑j
.text:000000000000642C                                         ; human_readable+5A3↓j
.text:000000000000642C                 sub     rsp, 10h
.text:0000000000006430                 lea     rcx, a0lf       ; "%.0Lf"
.text:0000000000006437                 mov     esi, 1
.text:000000000000643C                 mov     rbx, [rsp+0D8h+s]
.text:0000000000006441                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006448                 xor     eax, eax
.text:000000000000644A                 fstp    [rsp+0D8h+var_D8]
.text:000000000000644D                 xor     ebp, ebp
.text:000000000000644F                 mov     rdi, rbx
.text:0000000000006452                 call    ___sprintf_chk
.text:0000000000006457                 mov     rdi, rbx        ; s
.text:000000000000645A                 mov     ebx, 0FFFFFFFFh
.text:000000000000645F                 call    _strlen
.text:0000000000006464                 pop     rsi
.text:0000000000006465                 pop     rdi
.text:0000000000006466                 mov     r14, rax
.text:0000000000006469                 jmp     short loc_6480
.text:0000000000006469 ; ---------------------------------------------------------------------------
.text:000000000000646B                 align 10h
.text:0000000000006470
.text:0000000000006470 loc_6470:                               ; CODE XREF: human_readable+1E6↑j
.text:0000000000006470                 fstp    st
.text:0000000000006472                 jmp     short loc_6480
.text:0000000000006472 ; ---------------------------------------------------------------------------
.text:0000000000006474                 align 8
.text:0000000000006478
.text:0000000000006478 loc_6478:                               ; CODE XREF: human_readable+1F6↑j
.text:0000000000006478                 fstp    st
.text:000000000000647A                 nop     word ptr [rax+rax+00h]
.text:0000000000006480
.text:0000000000006480 loc_6480:                               ; CODE XREF: human_readable+349↑j
.text:0000000000006480                                         ; human_readable+352↑j ...
.text:0000000000006480                 mov     r15, [rsp+0C8h+var_C0]
.text:0000000000006485                 mov     rsi, [rsp+0C8h+s] ; src
.text:0000000000006489                 mov     rdx, r14        ; n
.text:000000000000648C                 sub     r15, r14
.text:000000000000648F                 sub     r14, rbp
.text:0000000000006492                 mov     rdi, r15        ; dest
.text:0000000000006495                 call    _memmove
.text:000000000000649A                 mov     r8, r14
.text:000000000000649D                 add     r8, r15
.text:00000000000064A0
.text:00000000000064A0 loc_64A0:                               ; CODE XREF: human_readable+6A6↓j
.text:00000000000064A0                                         ; human_readable+84F↓j
.text:00000000000064A0                 test    r12b, 4
.text:00000000000064A4                 jnz     loc_6588
.text:00000000000064AA
.text:00000000000064AA loc_64AA:                               ; CODE XREF: human_readable+53F↓j
.text:00000000000064AA                                         ; human_readable+A02↓j
.text:00000000000064AA                 test    r12b, 80h
.text:00000000000064AE                 jz      short loc_6527
.text:00000000000064B0                 cmp     ebx, 0FFFFFFFFh
.text:00000000000064B3                 jz      loc_67D0
.text:00000000000064B9
.text:00000000000064B9 loc_64B9:                               ; CODE XREF: human_readable+6D4↓j
.text:00000000000064B9                                         ; human_readable+6E2↓j ...
.text:00000000000064B9                 mov     eax, r12d
.text:00000000000064BC                 and     eax, 100h
.text:00000000000064C1                 mov     ecx, eax
.text:00000000000064C3                 or      ecx, ebx
.text:00000000000064C5                 jz      short loc_6527
.text:00000000000064C7                 and     r12d, 40h
.text:00000000000064CB                 jnz     loc_6668
.text:00000000000064D1
.text:00000000000064D1 loc_64D1:                               ; CODE XREF: human_readable+55F↓j
.text:00000000000064D1                 test    ebx, ebx
.text:00000000000064D3                 jz      loc_6B06
.text:00000000000064D9                 cmp     ebx, 1
.text:00000000000064DC                 jnz     short loc_64EC
.text:00000000000064DE                 mov     r9d, [rsp+0C8h+var_98]
.text:00000000000064E3                 test    r9d, r9d
.text:00000000000064E6                 jz      loc_6930
.text:00000000000064EC
.text:00000000000064EC loc_64EC:                               ; CODE XREF: human_readable+3BC↑j
.text:00000000000064EC                 lea     rcx, power_letter
.text:00000000000064F3                 movsxd  rbx, ebx
.text:00000000000064F6                 mov     rdi, [rsp+0C8h+var_C0]
.text:00000000000064FB                 test    eax, eax
.text:00000000000064FD                 movzx   ecx, byte ptr [rcx+rbx]
.text:0000000000006501                 lea     rdx, [rdi+1]
.text:0000000000006505                 mov     [rdi], cl
.text:0000000000006507                 jz      loc_6944
.text:000000000000650D                 mov     r8d, [rsp+0C8h+var_98]
.text:0000000000006512                 test    r8d, r8d
.text:0000000000006515                 jnz     loc_66D0
.text:000000000000651B
.text:000000000000651B loc_651B:                               ; CODE XREF: human_readable+5B8↓j
.text:000000000000651B                                         ; human_readable+81E↓j ...
.text:000000000000651B                 lea     rax, [rdx+1]
.text:000000000000651F                 mov     byte ptr [rdx], 42h ; 'B'
.text:0000000000006522                 mov     [rsp+0C8h+var_C0], rax
.text:0000000000006527
.text:0000000000006527 loc_6527:                               ; CODE XREF: human_readable+38E↑j
.text:0000000000006527                                         ; human_readable+3A5↑j ...
.text:0000000000006527                 mov     rax, [rsp+0C8h+var_C0]
.text:000000000000652C                 mov     rcx, [rsp+0C8h+var_40]
.text:0000000000006534                 xor     rcx, fs:28h
.text:000000000000653D                 mov     byte ptr [rax], 0
.text:0000000000006540                 mov     rax, r15
.text:0000000000006543                 jnz     loc_6ADB
.text:0000000000006549                 add     rsp, 98h
.text:0000000000006550                 pop     rbx
.text:0000000000006551                 pop     rbp
.text:0000000000006552                 pop     r12
.text:0000000000006554                 pop     r13
.text:0000000000006556                 pop     r14
.text:0000000000006558                 pop     r15
.text:000000000000655A                 retn
.text:000000000000655A ; ---------------------------------------------------------------------------
.text:000000000000655B                 align 20h
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: human_readable+DF↑j
.text:0000000000006560                 mov     rsi, rbx
.text:0000000000006563                 xor     edx, edx
.text:0000000000006565                 imul    rsi, rax
.text:0000000000006569                 mov     rax, rsi
.text:000000000000656C                 div     rdi
.text:000000000000656F                 cmp     rax, rbx
.text:0000000000006572                 jnz     loc_6205
.text:0000000000006578                 xor     edi, edi
.text:000000000000657A                 xor     r9d, r9d
.text:000000000000657D                 jmp     loc_6389
.text:000000000000657D ; ---------------------------------------------------------------------------
.text:0000000000006582                 align 8
.text:0000000000006588
.text:0000000000006588 loc_6588:                               ; CODE XREF: human_readable+384↑j
.text:0000000000006588                 mov     r14, r8
.text:000000000000658B                 mov     rdi, r13        ; s
.text:000000000000658E                 mov     [rsp+0C8h+var_80], r8
.text:0000000000006593                 sub     r14, r15
.text:0000000000006596                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000659D                 call    _strlen
.text:00000000000065A2                 lea     rdi, [rsp+0C8h+var_78]
.text:00000000000065A7                 mov     ecx, 29h ; ')'
.text:00000000000065AC                 mov     rdx, r14
.text:00000000000065AF                 mov     rsi, r15
.text:00000000000065B2                 mov     [rsp+0C8h+n], rax
.text:00000000000065B7                 mov     [rsp+0C8h+src], rdi
.text:00000000000065BC                 call    ___memcpy_chk
.text:00000000000065C1                 mov     ecx, r12d
.text:00000000000065C4                 mov     dword ptr [rsp+0C8h+var_A8], ebx
.text:00000000000065C8                 mov     r12, r14
.text:00000000000065CB                 mov     rbx, r13
.text:00000000000065CE                 mov     r8, [rsp+0C8h+var_80]
.text:00000000000065D3                 mov     r15, [rsp+0C8h+var_90]
.text:00000000000065D8                 mov     r13, [rsp+0C8h+n]
.text:00000000000065DD                 mov     r14d, ecx
.text:00000000000065E0                 jmp     short loc_6622
.text:00000000000065E0 ; ---------------------------------------------------------------------------
.text:00000000000065E2                 align 8
.text:00000000000065E8
.text:00000000000065E8 loc_65E8:                               ; CODE XREF: human_readable+51A↓j
.text:00000000000065E8                 mov     rax, [rsp+0C8h+src]
.text:00000000000065ED                 sub     r12, rbp
.text:00000000000065F0                 sub     r8, rbp
.text:00000000000065F3                 mov     rdi, r8         ; dest
.text:00000000000065F6                 mov     rdx, rbp        ; n
.text:00000000000065F9                 lea     rsi, [rax+r12]  ; src
.text:00000000000065FD                 call    _memcpy
.text:0000000000006602                 test    r12, r12
.text:0000000000006605                 mov     r8, rax
.text:0000000000006608                 jz      loc_6B18
.text:000000000000660E                 sub     r8, r13
.text:0000000000006611                 mov     rdx, r13        ; n
.text:0000000000006614                 mov     rsi, rbx        ; src
.text:0000000000006617                 mov     rdi, r8         ; dest
.text:000000000000661A                 call    _memcpy
.text:000000000000661F                 mov     r8, rax
.text:0000000000006622
.text:0000000000006622 loc_6622:                               ; CODE XREF: human_readable+4C0↑j
.text:0000000000006622                 movzx   eax, byte ptr [r15]
.text:0000000000006626                 test    al, al
.text:0000000000006628                 jz      short loc_6637
.text:000000000000662A                 cmp     al, 7Fh
.text:000000000000662C                 movzx   ebp, al
.text:000000000000662F                 cmovnb  rbp, r12
.text:0000000000006633                 add     r15, 1
.text:0000000000006637
.text:0000000000006637 loc_6637:                               ; CODE XREF: human_readable+508↑j
.text:0000000000006637                 cmp     rbp, r12
.text:000000000000663A                 jbe     short loc_65E8
.text:000000000000663C                 mov     eax, r14d
.text:000000000000663F                 mov     r15, r8
.text:0000000000006642                 mov     r14, r12
.text:0000000000006645                 mov     rsi, [rsp+0C8h+src] ; src
.text:000000000000664A                 sub     r15, r14
.text:000000000000664D                 mov     rdx, r14        ; n
.text:0000000000006650                 mov     rdi, r15        ; dest
.text:0000000000006653                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:0000000000006657                 mov     r12d, eax
.text:000000000000665A                 call    _memcpy
.text:000000000000665F                 jmp     loc_64AA
.text:000000000000665F ; ---------------------------------------------------------------------------
.text:0000000000006664                 align 8
.text:0000000000006668
.text:0000000000006668 loc_6668:                               ; CODE XREF: human_readable+3AB↑j
.text:0000000000006668                 mov     rcx, [rsp+0C8h+s]
.text:000000000000666C                 lea     rdi, [rcx+288h]
.text:0000000000006673                 mov     byte ptr [rcx+287h], 20h ; ' '
.text:000000000000667A                 mov     [rsp+0C8h+var_C0], rdi
.text:000000000000667F                 jmp     loc_64D1
.text:000000000000667F ; ---------------------------------------------------------------------------
.text:0000000000006684                 align 8
.text:0000000000006688
.text:0000000000006688 loc_6688:                               ; CODE XREF: human_readable+191↑j
.text:0000000000006688                 sub     rsp, 10h
.text:000000000000668C                 mov     edi, r15d
.text:000000000000668F                 fld     st
.text:0000000000006691                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000006694                 fstp    [rsp+0D8h+var_A8]
.text:0000000000006698                 call    adjust_value
.text:000000000000669D                 pop     rax
.text:000000000000669E                 pop     rdx
.text:000000000000669F                 fld     [rsp+0C8h+var_A8]
.text:00000000000066A3                 jmp     loc_62B9
.text:00000000000066A3 ; ---------------------------------------------------------------------------
.text:00000000000066A8                 align 10h
.text:00000000000066B0
.text:00000000000066B0 loc_66B0:                               ; CODE XREF: human_readable+306↑j
.text:00000000000066B0                 sub     rsp, 10h
.text:00000000000066B4                 mov     edi, r15d
.text:00000000000066B7                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:00000000000066BA                 call    adjust_value
.text:00000000000066BF                 pop     r8
.text:00000000000066C1                 pop     r9
.text:00000000000066C3                 jmp     loc_642C
.text:00000000000066C3 ; ---------------------------------------------------------------------------
.text:00000000000066C8                 align 10h
.text:00000000000066D0
.text:00000000000066D0 loc_66D0:                               ; CODE XREF: human_readable+3F5↑j
.text:00000000000066D0                 lea     rdx, [rdi+2]
.text:00000000000066D4                 mov     byte ptr [rdi+1], 69h ; 'i'
.text:00000000000066D8                 jmp     loc_651B
.text:00000000000066DD ; ---------------------------------------------------------------------------
.text:00000000000066DD
.text:00000000000066DD loc_66DD:                               ; CODE XREF: human_readable+2A8↑j
.text:00000000000066DD                 cmp     r10, 9
.text:00000000000066E1                 ja      loc_6978
.text:00000000000066E7                 cmp     r15d, 1
.text:00000000000066EB                 jz      loc_69A2
.text:00000000000066F1                 test    r15d, r15d
.text:00000000000066F4                 setz    dl
.text:00000000000066F7                 test    edi, edi
.text:00000000000066F9                 setnle  r8b
.text:00000000000066FD                 and     edx, r8d
.text:0000000000006700
.text:0000000000006700 loc_6700:                               ; CODE XREF: human_readable+88F↓j
.text:0000000000006700                 test    dl, dl
.text:0000000000006702                 jz      loc_6989
.text:0000000000006708                 lea     r9d, [rax+1]
.text:000000000000670C                 cmp     r9d, 0Ah
.text:0000000000006710                 jz      loc_6A11
.text:0000000000006716
.text:0000000000006716 loc_6716:                               ; CODE XREF: human_readable+86B↓j
.text:0000000000006716                 add     r9d, 30h ; '0'
.text:000000000000671A
.text:000000000000671A loc_671A:                               ; CODE XREF: human_readable+87D↓j
.text:000000000000671A                 mov     rax, [rsp+0C8h+s]
.text:000000000000671E                 lea     r8, [rax+286h]
.text:0000000000006725                 mov     [rax+286h], r9b
.text:000000000000672C                 mov     eax, ebp
.text:000000000000672E                 sub     r8, rbp
.text:0000000000006731                 cmp     ebp, 8
.text:0000000000006734                 jnb     loc_69C1
.text:000000000000673A                 test    bpl, 4
.text:000000000000673E                 jnz     loc_6AC6
.text:0000000000006744                 test    eax, eax
.text:0000000000006746                 jz      short loc_6757
.text:0000000000006748                 movzx   edx, byte ptr [r14]
.text:000000000000674C                 test    al, 2
.text:000000000000674E                 mov     [r8], dl
.text:0000000000006751                 jnz     loc_6AE0
.text:0000000000006757
.text:0000000000006757 loc_6757:                               ; CODE XREF: human_readable+626↑j
.text:0000000000006757                                         ; human_readable+8CF↓j ...
.text:0000000000006757                 xor     edi, edi
.text:0000000000006759                 xor     r9d, r9d
.text:000000000000675C                 nop     dword ptr [rax+00h]
.text:0000000000006760
.text:0000000000006760 loc_6760:                               ; CODE XREF: human_readable+279↑j
.text:0000000000006760                                         ; human_readable+807↓j ...
.text:0000000000006760                 cmp     r15d, 1
.text:0000000000006764                 jz      loc_68E0
.text:000000000000676A                 test    r15d, r15d
.text:000000000000676D                 jnz     short loc_6790
.text:000000000000676F                 add     edi, r9d
.text:0000000000006772                 test    edi, edi
.text:0000000000006774                 jle     short loc_6790
.text:0000000000006776
.text:0000000000006776 loc_6776:                               ; CODE XREF: human_readable+7D9↓j
.text:0000000000006776                 add     rsi, 1
.text:000000000000677A                 test    ecx, ecx
.text:000000000000677C                 jz      short loc_6790
.text:000000000000677E                 mov     eax, [rsp+0C8h+var_94]
.text:0000000000006782                 cmp     rax, rsi
.text:0000000000006785                 jz      loc_6950
.text:000000000000678B                 nop     dword ptr [rax+rax+00h]
.text:0000000000006790
.text:0000000000006790 loc_6790:                               ; CODE XREF: human_readable+64D↑j
.text:0000000000006790                                         ; human_readable+654↑j ...
.text:0000000000006790                 mov     r15, r8
.text:0000000000006793                 mov     rcx, 0CCCCCCCCCCCCCCCDh
.text:000000000000679D                 nop     dword ptr [rax]
.text:00000000000067A0
.text:00000000000067A0 loc_67A0:                               ; CODE XREF: human_readable+6A4↓j
.text:00000000000067A0                 mov     rax, rsi
.text:00000000000067A3                 sub     r15, 1
.text:00000000000067A7                 mul     rcx
.text:00000000000067AA                 shr     rdx, 3
.text:00000000000067AE                 lea     rax, [rdx+rdx*4]
.text:00000000000067B2                 add     rax, rax
.text:00000000000067B5                 sub     rsi, rax
.text:00000000000067B8                 add     esi, 30h ; '0'
.text:00000000000067BB                 test    rdx, rdx
.text:00000000000067BE                 mov     [r15], sil
.text:00000000000067C1                 mov     rsi, rdx
.text:00000000000067C4                 jnz     short loc_67A0
.text:00000000000067C6                 jmp     loc_64A0
.text:00000000000067C6 ; ---------------------------------------------------------------------------
.text:00000000000067CB                 align 10h
.text:00000000000067D0
.text:00000000000067D0 loc_67D0:                               ; CODE XREF: human_readable+393↑j
.text:00000000000067D0                 mov     rcx, [rsp+0C8h+var_B8]
.text:00000000000067D5                 cmp     rcx, 1
.text:00000000000067D9                 jbe     loc_6982
.text:00000000000067DF                 mov     edx, [rsp+0C8h+var_94]
.text:00000000000067E3                 mov     ebx, 1
.text:00000000000067E8                 mov     eax, 1
.text:00000000000067ED
.text:00000000000067ED loc_67ED:                               ; CODE XREF: human_readable+6E0↓j
.text:00000000000067ED                 imul    rax, rdx
.text:00000000000067F1                 cmp     rcx, rax
.text:00000000000067F4                 jbe     loc_64B9
.text:00000000000067FA                 add     ebx, 1
.text:00000000000067FD                 cmp     ebx, 8
.text:0000000000006800                 jnz     short loc_67ED
.text:0000000000006802                 jmp     loc_64B9
.text:0000000000006802 ; ---------------------------------------------------------------------------
.text:0000000000006807                 align 10h
.text:0000000000006810
.text:0000000000006810 loc_6810:                               ; CODE XREF: human_readable+183↑j
.text:0000000000006810                 sub     rsp, 10h
.text:0000000000006814                 lea     rcx, a1lf       ; "%.1Lf"
.text:000000000000681B                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006822                 fld     st
.text:0000000000006824                 fstp    [rsp+0D8h+var_D8]
.text:0000000000006827                 mov     r14, [rsp+0D8h+s]
.text:000000000000682C                 mov     esi, 1
.text:0000000000006831                 xor     eax, eax
.text:0000000000006833                 mov     rdi, r14
.text:0000000000006836                 fstp    [rsp+0D8h+var_A8]
.text:000000000000683A                 call    ___sprintf_chk
.text:000000000000683F                 mov     rdi, r14        ; s
.text:0000000000006842                 call    _strlen
.text:0000000000006847                 mov     r14, rax
.text:000000000000684A                 pop     rax
.text:000000000000684B                 pop     rdx
.text:000000000000684C                 cmp     r14, [rsp+0C8h+src]
.text:0000000000006851                 fld     [rsp+0C8h+var_A8]
.text:0000000000006855                 jbe     loc_6302
.text:000000000000685B                 fld     cs:flt_E1EC
.text:0000000000006861                 fmul    st(1), st
.text:0000000000006863
.text:0000000000006863 loc_6863:                               ; CODE XREF: human_readable+20E↑j
.text:0000000000006863                                         ; human_readable+798↓j ...
.text:0000000000006863                 fdivp   st(1), st
.text:0000000000006865                 sub     rsp, 10h
.text:0000000000006869                 lea     rcx, a0lf       ; "%.0Lf"
.text:0000000000006870                 mov     r14, [rsp+0D8h+s]
.text:0000000000006875                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000687C                 mov     esi, 1
.text:0000000000006881                 xor     eax, eax
.text:0000000000006883                 xor     ebp, ebp
.text:0000000000006885                 mov     rdi, r14
.text:0000000000006888                 fstp    [rsp+0D8h+var_D8]
.text:000000000000688B                 call    ___sprintf_chk
.text:0000000000006890                 mov     rdi, r14        ; s
.text:0000000000006893                 call    _strlen
.text:0000000000006898                 pop     r10
.text:000000000000689A                 mov     r14, rax
.text:000000000000689D                 pop     r11
.text:000000000000689F                 jmp     loc_6480
.text:000000000000689F ; ---------------------------------------------------------------------------
.text:00000000000068A4                 align 8
.text:00000000000068A8
.text:00000000000068A8 loc_68A8:                               ; CODE XREF: human_readable+1DC↑j
.text:00000000000068A8                 fld     cs:flt_E1EC
.text:00000000000068AE                 fmul    st(1), st
.text:00000000000068B0
.text:00000000000068B0 loc_68B0:                               ; CODE XREF: human_readable+208↑j
.text:00000000000068B0                 fld     cs:tbyte_E1F0
.text:00000000000068B6                 fucomip st, st(2)
.text:00000000000068B8                 jbe     short loc_6863
.text:00000000000068BA                 fstp    dword ptr [rsp+0C8h+src]
.text:00000000000068BE                 sub     rsp, 10h
.text:00000000000068C2                 mov     edi, r15d
.text:00000000000068C5                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:00000000000068C8                 call    adjust_value
.text:00000000000068CD                 pop     rbp
.text:00000000000068CE                 pop     r14
.text:00000000000068D0                 fld     dword ptr [rsp+0C8h+src]
.text:00000000000068D4                 jmp     short loc_6863
.text:00000000000068D4 ; ---------------------------------------------------------------------------
.text:00000000000068D6                 align 20h
.text:00000000000068E0
.text:00000000000068E0 loc_68E0:                               ; CODE XREF: human_readable+644↑j
.text:00000000000068E0                 mov     rax, rsi
.text:00000000000068E3                 movsxd  rdi, edi
.text:00000000000068E6                 and     eax, 1
.text:00000000000068E9                 add     rax, rdi
.text:00000000000068EC                 setnz   al
.text:00000000000068EF                 movzx   eax, al
.text:00000000000068F2                 add     r9d, eax
.text:00000000000068F5                 cmp     r9d, 5
.text:00000000000068F9                 jg      loc_6776
.text:00000000000068FF                 jmp     loc_6790
.text:00000000000068FF ; ---------------------------------------------------------------------------
.text:0000000000006904                 align 8
.text:0000000000006908
.text:0000000000006908 loc_6908:                               ; CODE XREF: human_readable+25A↑j
.text:0000000000006908                 setb    dil
.text:000000000000690C                 movzx   edi, dil
.text:0000000000006910                 add     edi, 2
.text:0000000000006913                 jmp     loc_6389
.text:0000000000006913 ; ---------------------------------------------------------------------------
.text:0000000000006918                 align 20h
.text:0000000000006920
.text:0000000000006920 loc_6920:                               ; CODE XREF: human_readable+28A↑j
.text:0000000000006920                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000006925                 xor     ebx, ebx
.text:0000000000006927                 jmp     loc_6760
.text:0000000000006927 ; ---------------------------------------------------------------------------
.text:000000000000692C                 align 10h
.text:0000000000006930
.text:0000000000006930 loc_6930:                               ; CODE XREF: human_readable+3C6↑j
.text:0000000000006930                 mov     rbx, [rsp+0C8h+var_C0]
.text:0000000000006935                 test    eax, eax
.text:0000000000006937                 lea     rdx, [rbx+1]
.text:000000000000693B                 mov     byte ptr [rbx], 6Bh ; 'k'
.text:000000000000693E                 jnz     loc_651B
.text:0000000000006944
.text:0000000000006944 loc_6944:                               ; CODE XREF: human_readable+3E7↑j
.text:0000000000006944                 mov     [rsp+0C8h+var_C0], rdx
.text:0000000000006949                 jmp     loc_6527
.text:0000000000006949 ; ---------------------------------------------------------------------------
.text:000000000000694E                 align 10h
.text:0000000000006950
.text:0000000000006950 loc_6950:                               ; CODE XREF: human_readable+665↑j
.text:0000000000006950                 cmp     ebx, 8
.text:0000000000006953                 jz      loc_6790
.text:0000000000006959                 add     ebx, 1
.text:000000000000695C                 test    r12b, 8
.text:0000000000006960                 jz      loc_6A22
.text:0000000000006966
.text:0000000000006966 loc_6966:                               ; CODE XREF: human_readable+922↓j
.text:0000000000006966                                         ; human_readable+931↓j ...
.text:0000000000006966                 lea     r15, [r8-1]
.text:000000000000696A                 mov     byte ptr [r8-1], 31h ; '1'
.text:000000000000696F                 jmp     loc_64A0
.text:000000000000696F ; ---------------------------------------------------------------------------
.text:0000000000006974                 align 8
.text:0000000000006978
.text:0000000000006978 loc_6978:                               ; CODE XREF: human_readable+2B1↑j
.text:0000000000006978                                         ; human_readable+5C1↑j
.text:0000000000006978                 mov     r8, [rsp+0C8h+var_C0]
.text:000000000000697D                 jmp     loc_6760
.text:0000000000006982 ; ---------------------------------------------------------------------------
.text:0000000000006982
.text:0000000000006982 loc_6982:                               ; CODE XREF: human_readable+6B9↑j
.text:0000000000006982                 xor     ebx, ebx
.text:0000000000006984                 jmp     loc_64B9
.text:0000000000006989 ; ---------------------------------------------------------------------------
.text:0000000000006989
.text:0000000000006989 loc_6989:                               ; CODE XREF: human_readable+5E2↑j
.text:0000000000006989                 test    eax, eax
.text:000000000000698B                 jnz     loc_6716
.text:0000000000006991
.text:0000000000006991 loc_6991:                               ; CODE XREF: human_readable+8FD↓j
.text:0000000000006991                 test    r12b, 8
.text:0000000000006995                 jnz     short loc_69B4
.text:0000000000006997                 mov     r9d, 30h ; '0'
.text:000000000000699D                 jmp     loc_671A
.text:00000000000069A2 ; ---------------------------------------------------------------------------
.text:00000000000069A2
.text:00000000000069A2 loc_69A2:                               ; CODE XREF: human_readable+5CB↑j
.text:00000000000069A2                 mov     edx, eax
.text:00000000000069A4                 and     edx, 1
.text:00000000000069A7                 add     edx, edi
.text:00000000000069A9                 cmp     edx, 2
.text:00000000000069AC                 setnle  dl
.text:00000000000069AF                 jmp     loc_6700
.text:00000000000069B4 ; ---------------------------------------------------------------------------
.text:00000000000069B4
.text:00000000000069B4 loc_69B4:                               ; CODE XREF: human_readable+875↑j
.text:00000000000069B4                 mov     r8, [rsp+0C8h+var_C0]
.text:00000000000069B9                 xor     r9d, r9d
.text:00000000000069BC                 jmp     loc_6760
.text:00000000000069C1 ; ---------------------------------------------------------------------------
.text:00000000000069C1
.text:00000000000069C1 loc_69C1:                               ; CODE XREF: human_readable+614↑j
.text:00000000000069C1                 mov     rax, [r14]
.text:00000000000069C4                 mov     r9, r14
.text:00000000000069C7                 mov     [r8], rax
.text:00000000000069CA                 mov     eax, ebp
.text:00000000000069CC                 mov     rdx, [r14+rax-8]
.text:00000000000069D1                 mov     [r8+rax-8], rdx
.text:00000000000069D6                 lea     rdx, [r8+8]
.text:00000000000069DA                 mov     rax, r8
.text:00000000000069DD                 and     rdx, 0FFFFFFFFFFFFFFF8h
.text:00000000000069E1                 sub     rax, rdx
.text:00000000000069E4                 sub     r9, rax
.text:00000000000069E7                 add     eax, ebp
.text:00000000000069E9                 and     eax, 0FFFFFFF8h
.text:00000000000069EC                 cmp     eax, 8
.text:00000000000069EF                 jb      loc_6757
.text:00000000000069F5                 and     eax, 0FFFFFFF8h
.text:00000000000069F8                 xor     edi, edi
.text:00000000000069FA
.text:00000000000069FA loc_69FA:                               ; CODE XREF: human_readable+8EA↓j
.text:00000000000069FA                 mov     r10d, edi
.text:00000000000069FD                 add     edi, 8
.text:0000000000006A00                 mov     r11, [r9+r10]
.text:0000000000006A04                 cmp     edi, eax
.text:0000000000006A06                 mov     [rdx+r10], r11
.text:0000000000006A0A                 jb      short loc_69FA
.text:0000000000006A0C                 jmp     loc_6757
.text:0000000000006A11 ; ---------------------------------------------------------------------------
.text:0000000000006A11
.text:0000000000006A11 loc_6A11:                               ; CODE XREF: human_readable+5F0↑j
.text:0000000000006A11                 lea     rsi, [r10+1]
.text:0000000000006A15                 cmp     rsi, 0Ah
.text:0000000000006A19                 jz      short loc_6A70
.text:0000000000006A1B                 xor     edi, edi
.text:0000000000006A1D                 jmp     loc_6991
.text:0000000000006A22 ; ---------------------------------------------------------------------------
.text:0000000000006A22
.text:0000000000006A22 loc_6A22:                               ; CODE XREF: human_readable+840↑j
.text:0000000000006A22                 mov     rax, rbp
.text:0000000000006A25                 mov     byte ptr [r8-1], 30h ; '0'
.text:0000000000006A2A                 not     rax
.text:0000000000006A2D                 add     r8, rax
.text:0000000000006A30                 cmp     ebp, 8
.text:0000000000006A33                 mov     eax, ebp
.text:0000000000006A35                 jnb     short loc_6A7A
.text:0000000000006A37                 and     ebp, 4
.text:0000000000006A3A                 jnz     loc_6AF1
.text:0000000000006A40                 test    eax, eax
.text:0000000000006A42                 jz      loc_6966
.text:0000000000006A48                 movzx   edx, byte ptr [r14]
.text:0000000000006A4C                 test    al, 2
.text:0000000000006A4E                 mov     [r8], dl
.text:0000000000006A51                 jz      loc_6966
.text:0000000000006A57                 movzx   edx, word ptr [r14+rax-2]
.text:0000000000006A5D                 mov     [r8+rax-2], dx
.text:0000000000006A63                 jmp     loc_6966
.text:0000000000006A63 ; ---------------------------------------------------------------------------
.text:0000000000006A68                 align 10h
.text:0000000000006A70
.text:0000000000006A70 loc_6A70:                               ; CODE XREF: human_readable+8F9↑j
.text:0000000000006A70                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000006A75                 jmp     loc_6757
.text:0000000000006A7A ; ---------------------------------------------------------------------------
.text:0000000000006A7A
.text:0000000000006A7A loc_6A7A:                               ; CODE XREF: human_readable+915↑j
.text:0000000000006A7A                 mov     rax, [r14]
.text:0000000000006A7D                 lea     rcx, [r8+8]
.text:0000000000006A81                 and     rcx, 0FFFFFFFFFFFFFFF8h
.text:0000000000006A85                 mov     [r8], rax
.text:0000000000006A88                 mov     eax, ebp
.text:0000000000006A8A                 mov     rdx, [r14+rax-8]
.text:0000000000006A8F                 mov     [r8+rax-8], rdx
.text:0000000000006A94                 mov     rax, r8
.text:0000000000006A97                 sub     rax, rcx
.text:0000000000006A9A                 sub     r14, rax
.text:0000000000006A9D                 add     eax, ebp
.text:0000000000006A9F                 and     eax, 0FFFFFFF8h
.text:0000000000006AA2                 cmp     eax, 8
.text:0000000000006AA5                 jb      loc_6966
.text:0000000000006AAB                 and     eax, 0FFFFFFF8h
.text:0000000000006AAE                 xor     edx, edx
.text:0000000000006AB0
.text:0000000000006AB0 loc_6AB0:                               ; CODE XREF: human_readable+99F↓j
.text:0000000000006AB0                 mov     esi, edx
.text:0000000000006AB2                 add     edx, 8
.text:0000000000006AB5                 mov     rdi, [r14+rsi]
.text:0000000000006AB9                 cmp     edx, eax
.text:0000000000006ABB                 mov     [rcx+rsi], rdi
.text:0000000000006ABF                 jb      short loc_6AB0
.text:0000000000006AC1                 jmp     loc_6966
.text:0000000000006AC6 ; ---------------------------------------------------------------------------
.text:0000000000006AC6
.text:0000000000006AC6 loc_6AC6:                               ; CODE XREF: human_readable+61E↑j
.text:0000000000006AC6                 mov     edx, [r14]
.text:0000000000006AC9                 mov     [r8], edx
.text:0000000000006ACC                 mov     edx, [r14+rax-4]
.text:0000000000006AD1                 mov     [r8+rax-4], edx
.text:0000000000006AD6                 jmp     loc_6757
.text:0000000000006ADB ; ---------------------------------------------------------------------------
.text:0000000000006ADB
.text:0000000000006ADB loc_6ADB:                               ; CODE XREF: human_readable+423↑j
.text:0000000000006ADB                 call    ___stack_chk_fail
.text:0000000000006AE0 ; ---------------------------------------------------------------------------
.text:0000000000006AE0
.text:0000000000006AE0 loc_6AE0:                               ; CODE XREF: human_readable+631↑j
.text:0000000000006AE0                 movzx   edx, word ptr [r14+rax-2]
.text:0000000000006AE6                 mov     [r8+rax-2], dx
.text:0000000000006AEC                 jmp     loc_6757
.text:0000000000006AF1 ; ---------------------------------------------------------------------------
.text:0000000000006AF1
.text:0000000000006AF1 loc_6AF1:                               ; CODE XREF: human_readable+91A↑j
.text:0000000000006AF1                 mov     edx, [r14]
.text:0000000000006AF4                 mov     [r8], edx
.text:0000000000006AF7                 mov     edx, [r14+rax-4]
.text:0000000000006AFC                 mov     [r8+rax-4], edx
.text:0000000000006B01                 jmp     loc_6966
.text:0000000000006B06 ; ---------------------------------------------------------------------------
.text:0000000000006B06
.text:0000000000006B06 loc_6B06:                               ; CODE XREF: human_readable+3B3↑j
.text:0000000000006B06                 test    eax, eax
.text:0000000000006B08                 mov     rdx, [rsp+0C8h+var_C0]
.text:0000000000006B0D                 jnz     loc_651B
.text:0000000000006B13                 jmp     loc_6527
.text:0000000000006B18 ; ---------------------------------------------------------------------------
.text:0000000000006B18
.text:0000000000006B18 loc_6B18:                               ; CODE XREF: human_readable+4E8↑j
.text:0000000000006B18                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:0000000000006B1C                 mov     r15, rax
.text:0000000000006B1F                 mov     r12d, r14d
.text:0000000000006B22                 jmp     loc_64AA
.text:0000000000006B22 ; } // starts at 6120
.text:0000000000006B22 human_readable  endp
.text:0000000000006B22
.text:0000000000006B22 ; ---------------------------------------------------------------------------
.text:0000000000006B27                 align 10h
.text:0000000000006B30
.text:0000000000006B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B30
.text:0000000000006B30 ; Attributes: info_from_lumina
.text:0000000000006B30
.text:0000000000006B30 ; strtol_error __fastcall human_options(const char *spec, int *opts, uintmax_t *block_size)
.text:0000000000006B30                 public human_options
.text:0000000000006B30 human_options   proc near
.text:0000000000006B30
.text:0000000000006B30 var_38          = qword ptr -38h
.text:0000000000006B30 var_30          = qword ptr -30h
.text:0000000000006B30
.text:0000000000006B30 ; __unwind {
.text:0000000000006B30                 push    r13
.text:0000000000006B32                 push    r12
.text:0000000000006B34                 mov     r13, rsi
.text:0000000000006B37                 push    rbp
.text:0000000000006B38                 push    rbx
.text:0000000000006B39                 mov     r12, rdx
.text:0000000000006B3C                 mov     rbx, rdi
.text:0000000000006B3F                 sub     rsp, 18h
.text:0000000000006B43                 mov     rax, fs:28h
.text:0000000000006B4C                 mov     [rsp+38h+var_30], rax
.text:0000000000006B51                 xor     eax, eax
.text:0000000000006B53                 test    rdi, rdi
.text:0000000000006B56                 jz      loc_6C70
.text:0000000000006B5C
.text:0000000000006B5C loc_6B5C:                               ; CODE XREF: human_options+152↓j
.text:0000000000006B5C                                         ; human_options+16A↓j
.text:0000000000006B5C                 xor     ebp, ebp
.text:0000000000006B5E                 cmp     byte ptr [rbx], 27h ; '''
.text:0000000000006B61                 jnz     short loc_6B6C
.text:0000000000006B63                 add     rbx, 1
.text:0000000000006B67                 mov     ebp, 4
.text:0000000000006B6C
.text:0000000000006B6C loc_6B6C:                               ; CODE XREF: human_options+31↑j
.text:0000000000006B6C                 lea     rdx, block_size_opts
.text:0000000000006B73                 lea     rsi, block_size_args
.text:0000000000006B7A                 mov     ecx, 4
.text:0000000000006B7F                 mov     rdi, rbx
.text:0000000000006B82                 call    argmatch
.text:0000000000006B87                 test    eax, eax
.text:0000000000006B89                 js      short loc_6BC8
.text:0000000000006B8B                 lea     rdx, block_size_opts
.text:0000000000006B92                 cdqe
.text:0000000000006B94                 mov     qword ptr [r12], 1
.text:0000000000006B9C                 or      ebp, [rdx+rax*4]
.text:0000000000006B9F                 xor     eax, eax
.text:0000000000006BA1                 mov     [r13+0], ebp
.text:0000000000006BA5
.text:0000000000006BA5 loc_6BA5:                               ; CODE XREF: human_options+107↓j
.text:0000000000006BA5                                         ; human_options+134↓j ...
.text:0000000000006BA5                 mov     rcx, [rsp+38h+var_30]
.text:0000000000006BAA                 xor     rcx, fs:28h
.text:0000000000006BB3                 jnz     loc_6D11
.text:0000000000006BB9                 add     rsp, 18h
.text:0000000000006BBD                 pop     rbx
.text:0000000000006BBE                 pop     rbp
.text:0000000000006BBF                 pop     r12
.text:0000000000006BC1                 pop     r13
.text:0000000000006BC3                 retn
.text:0000000000006BC3 ; ---------------------------------------------------------------------------
.text:0000000000006BC4                 align 8
.text:0000000000006BC8
.text:0000000000006BC8 loc_6BC8:                               ; CODE XREF: human_options+59↑j
.text:0000000000006BC8                 lea     r8, aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:0000000000006BCF                 xor     edx, edx
.text:0000000000006BD1                 mov     rsi, rsp
.text:0000000000006BD4                 mov     rcx, r12
.text:0000000000006BD7                 mov     rdi, rbx        ; nptr
.text:0000000000006BDA                 call    xstrtoumax
.text:0000000000006BDF                 test    eax, eax
.text:0000000000006BE1                 jnz     short loc_6C28
.text:0000000000006BE3                 movzx   esi, byte ptr [rbx]
.text:0000000000006BE6                 lea     edx, [rsi-30h]
.text:0000000000006BE9                 cmp     dl, 9
.text:0000000000006BEC                 jbe     short loc_6C18
.text:0000000000006BEE                 mov     rcx, [rsp+38h+var_38]
.text:0000000000006BF2                 cmp     rbx, rcx
.text:0000000000006BF5                 jnz     short loc_6C09
.text:0000000000006BF7                 jmp     loc_6CD0
.text:0000000000006BF7 ; ---------------------------------------------------------------------------
.text:0000000000006BFC                 align 20h
.text:0000000000006C00
.text:0000000000006C00 loc_6C00:                               ; CODE XREF: human_options+E6↓j
.text:0000000000006C00                 cmp     rbx, rcx
.text:0000000000006C03                 jz      loc_6CD0
.text:0000000000006C09
.text:0000000000006C09 loc_6C09:                               ; CODE XREF: human_options+C5↑j
.text:0000000000006C09                 add     rbx, 1
.text:0000000000006C0D                 movzx   edi, byte ptr [rbx]
.text:0000000000006C10                 lea     edx, [rdi-30h]
.text:0000000000006C13                 cmp     dl, 9
.text:0000000000006C16                 ja      short loc_6C00
.text:0000000000006C18
.text:0000000000006C18 loc_6C18:                               ; CODE XREF: human_options+BC↑j
.text:0000000000006C18                                         ; human_options+1AD↓j ...
.text:0000000000006C18                 mov     rdx, [r12]
.text:0000000000006C1C                 mov     [r13+0], ebp
.text:0000000000006C20                 jmp     short loc_6C34
.text:0000000000006C20 ; ---------------------------------------------------------------------------
.text:0000000000006C22                 align 8
.text:0000000000006C28
.text:0000000000006C28 loc_6C28:                               ; CODE XREF: human_options+B1↑j
.text:0000000000006C28                 mov     rdx, [r12]
.text:0000000000006C2C                 mov     dword ptr [r13+0], 0
.text:0000000000006C34
.text:0000000000006C34 loc_6C34:                               ; CODE XREF: human_options+F0↑j
.text:0000000000006C34                 test    rdx, rdx
.text:0000000000006C37                 jnz     loc_6BA5
.text:0000000000006C3D                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000006C44                 call    _getenv
.text:0000000000006C49                 cmp     rax, 1
.text:0000000000006C4D                 sbb     rax, rax
.text:0000000000006C50                 and     eax, 200h
.text:0000000000006C55                 add     rax, 200h
.text:0000000000006C5B                 mov     [r12], rax
.text:0000000000006C5F                 mov     eax, 4
.text:0000000000006C64                 jmp     loc_6BA5
.text:0000000000006C64 ; ---------------------------------------------------------------------------
.text:0000000000006C69                 align 10h
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: human_options+26↑j
.text:0000000000006C70                 lea     rdi, aBlockSize ; "BLOCK_SIZE"
.text:0000000000006C77                 call    _getenv
.text:0000000000006C7C                 test    rax, rax
.text:0000000000006C7F                 mov     rbx, rax
.text:0000000000006C82                 jnz     loc_6B5C
.text:0000000000006C88                 lea     rdi, aBlocksize ; "BLOCKSIZE"
.text:0000000000006C8F                 call    _getenv
.text:0000000000006C94                 test    rax, rax
.text:0000000000006C97                 mov     rbx, rax
.text:0000000000006C9A                 jnz     loc_6B5C
.text:0000000000006CA0                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000006CA7                 call    _getenv
.text:0000000000006CAC                 test    rax, rax
.text:0000000000006CAF                 jz      short loc_6CFA
.text:0000000000006CB1                 mov     qword ptr [r12], 200h
.text:0000000000006CB9                 xor     eax, eax
.text:0000000000006CBB                 mov     dword ptr [r13+0], 0
.text:0000000000006CC3                 jmp     loc_6BA5
.text:0000000000006CC3 ; ---------------------------------------------------------------------------
.text:0000000000006CC8                 align 10h
.text:0000000000006CD0
.text:0000000000006CD0 loc_6CD0:                               ; CODE XREF: human_options+C7↑j
.text:0000000000006CD0                                         ; human_options+D3↑j
.text:0000000000006CD0                 cmp     byte ptr [rcx-1], 42h ; 'B'
.text:0000000000006CD4                 jz      short loc_6CE8
.text:0000000000006CD6                 or      bpl, 80h
.text:0000000000006CDA
.text:0000000000006CDA loc_6CDA:                               ; CODE XREF: human_options+1C8↓j
.text:0000000000006CDA                 or      ebp, 20h
.text:0000000000006CDD                 jmp     loc_6C18
.text:0000000000006CDD ; ---------------------------------------------------------------------------
.text:0000000000006CE2                 align 8
.text:0000000000006CE8
.text:0000000000006CE8 loc_6CE8:                               ; CODE XREF: human_options+1A4↑j
.text:0000000000006CE8                 or      ebp, 180h
.text:0000000000006CEE                 cmp     byte ptr [rcx-2], 69h ; 'i'
.text:0000000000006CF2                 jnz     loc_6C18
.text:0000000000006CF8                 jmp     short loc_6CDA
.text:0000000000006CFA ; ---------------------------------------------------------------------------
.text:0000000000006CFA
.text:0000000000006CFA loc_6CFA:                               ; CODE XREF: human_options+17F↑j
.text:0000000000006CFA                 mov     qword ptr [r12], 400h
.text:0000000000006D02                 xor     eax, eax
.text:0000000000006D04                 mov     dword ptr [r13+0], 0
.text:0000000000006D0C                 jmp     loc_6BA5
.text:0000000000006D11 ; ---------------------------------------------------------------------------
.text:0000000000006D11
.text:0000000000006D11 loc_6D11:                               ; CODE XREF: human_options+83↑j
.text:0000000000006D11                 call    ___stack_chk_fail
.text:0000000000006D11 ; } // starts at 6B30
.text:0000000000006D11 human_options   endp
.text:0000000000006D11
.text:0000000000006D11 ; ---------------------------------------------------------------------------
.text:0000000000006D16                 align 20h
.text:0000000000006D20
.text:0000000000006D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D20
.text:0000000000006D20
.text:0000000000006D20                 public parse_long_options
.text:0000000000006D20 parse_long_options proc near
.text:0000000000006D20
.text:0000000000006D20 var_100         = qword ptr -100h
.text:0000000000006D20 var_F8          = dword ptr -0F8h
.text:0000000000006D20 var_F4          = dword ptr -0F4h
.text:0000000000006D20 var_F0          = qword ptr -0F0h
.text:0000000000006D20 var_E8          = qword ptr -0E8h
.text:0000000000006D20 var_E0          = qword ptr -0E0h
.text:0000000000006D20 var_D8          = byte ptr -0D8h
.text:0000000000006D20 var_A8          = xmmword ptr -0A8h
.text:0000000000006D20 var_98          = xmmword ptr -98h
.text:0000000000006D20 var_88          = xmmword ptr -88h
.text:0000000000006D20 var_78          = xmmword ptr -78h
.text:0000000000006D20 var_68          = xmmword ptr -68h
.text:0000000000006D20 var_58          = xmmword ptr -58h
.text:0000000000006D20 var_48          = xmmword ptr -48h
.text:0000000000006D20 var_38          = xmmword ptr -38h
.text:0000000000006D20 arg_0           = byte ptr  8
.text:0000000000006D20
.text:0000000000006D20 ; __unwind {
.text:0000000000006D20                 push    r13
.text:0000000000006D22                 push    r12
.text:0000000000006D24                 mov     r13, r8
.text:0000000000006D27                 push    rbp
.text:0000000000006D28                 push    rbx
.text:0000000000006D29                 mov     rbp, rdx
.text:0000000000006D2C                 mov     r12, rcx
.text:0000000000006D2F                 sub     rsp, 0E8h
.text:0000000000006D36                 test    al, al
.text:0000000000006D38                 jz      short loc_6D74
.text:0000000000006D3A                 movaps  [rsp+108h+var_A8], xmm0
.text:0000000000006D3F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000006D44                 movaps  [rsp+108h+var_88], xmm2
.text:0000000000006D4C                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000006D54                 movaps  [rsp+108h+var_68], xmm4
.text:0000000000006D5C                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000006D64                 movaps  [rsp+108h+var_48], xmm6
.text:0000000000006D6C                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000006D74
.text:0000000000006D74 loc_6D74:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000006D74                 mov     rax, fs:28h
.text:0000000000006D7D                 mov     [rsp+108h+var_E0], rax
.text:0000000000006D82                 xor     eax, eax
.text:0000000000006D84                 cmp     edi, 2
.text:0000000000006D87                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000006D8D                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000006D97                 jz      short loc_6DD0
.text:0000000000006D99
.text:0000000000006D99 loc_6D99:                               ; CODE XREF: parse_long_options+CE↓j
.text:0000000000006D99                                         ; parse_long_options+DD↓j ...
.text:0000000000006D99                 mov     rax, [rsp+108h+var_E0]
.text:0000000000006D9E                 xor     rax, fs:28h
.text:0000000000006DA7                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000006DAD                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000006DB7                 jnz     loc_6E5A
.text:0000000000006DBD                 add     rsp, 0E8h
.text:0000000000006DC4                 pop     rbx
.text:0000000000006DC5                 pop     rbp
.text:0000000000006DC6                 pop     r12
.text:0000000000006DC8                 pop     r13
.text:0000000000006DCA                 retn
.text:0000000000006DCA ; ---------------------------------------------------------------------------
.text:0000000000006DCB                 align 10h
.text:0000000000006DD0
.text:0000000000006DD0 loc_6DD0:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000006DD0                 lea     rcx, long_options ; longopts
.text:0000000000006DD7                 lea     rdx, shortopts  ; "+"
.text:0000000000006DDE                 xor     r8d, r8d        ; longind
.text:0000000000006DE1                 mov     [rsp+108h+var_100], r9
.text:0000000000006DE6                 call    _getopt_long
.text:0000000000006DEB                 cmp     eax, 0FFFFFFFFh
.text:0000000000006DEE                 jz      short loc_6D99
.text:0000000000006DF0                 cmp     eax, 68h ; 'h'
.text:0000000000006DF3                 mov     r9, [rsp+108h+var_100]
.text:0000000000006DF8                 jz      short loc_6E50
.text:0000000000006DFA                 cmp     eax, 76h ; 'v'
.text:0000000000006DFD                 jnz     short loc_6D99
.text:0000000000006DFF                 lea     rax, [rsp+108h+arg_0]
.text:0000000000006E07                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000006E0E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000006E13                 mov     rcx, r13
.text:0000000000006E16                 mov     rdx, r12
.text:0000000000006E19                 mov     rsi, rbp
.text:0000000000006E1C                 mov     [rsp+108h+var_F0], rax
.text:0000000000006E21                 lea     rax, [rsp+108h+var_D8]
.text:0000000000006E26                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:0000000000006E2E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000006E36                 mov     [rsp+108h+var_E8], rax
.text:0000000000006E3B                 call    version_etc_va
.text:0000000000006E40                 xor     edi, edi        ; status
.text:0000000000006E42                 call    _exit
.text:0000000000006E42 ; ---------------------------------------------------------------------------
.text:0000000000006E47                 align 10h
.text:0000000000006E50
.text:0000000000006E50 loc_6E50:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000006E50                 xor     edi, edi
.text:0000000000006E52                 call    r9
.text:0000000000006E55                 jmp     loc_6D99
.text:0000000000006E5A ; ---------------------------------------------------------------------------
.text:0000000000006E5A
.text:0000000000006E5A loc_6E5A:                               ; CODE XREF: parse_long_options+97↑j
.text:0000000000006E5A                 call    ___stack_chk_fail
.text:0000000000006E5A ; } // starts at 6D20
.text:0000000000006E5A parse_long_options endp
.text:0000000000006E5A
.text:0000000000006E5A ; ---------------------------------------------------------------------------
.text:0000000000006E5F                 align 20h
.text:0000000000006E60
.text:0000000000006E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E60
.text:0000000000006E60
.text:0000000000006E60                 public parse_gnu_standard_options_only
.text:0000000000006E60 parse_gnu_standard_options_only proc near
.text:0000000000006E60                                         ; CODE XREF: main+211↑p
.text:0000000000006E60
.text:0000000000006E60 var_F8          = dword ptr -0F8h
.text:0000000000006E60 var_F4          = dword ptr -0F4h
.text:0000000000006E60 var_F0          = qword ptr -0F0h
.text:0000000000006E60 var_E8          = qword ptr -0E8h
.text:0000000000006E60 var_E0          = qword ptr -0E0h
.text:0000000000006E60 var_D8          = byte ptr -0D8h
.text:0000000000006E60 var_A8          = xmmword ptr -0A8h
.text:0000000000006E60 var_98          = xmmword ptr -98h
.text:0000000000006E60 var_88          = xmmword ptr -88h
.text:0000000000006E60 var_78          = xmmword ptr -78h
.text:0000000000006E60 var_68          = xmmword ptr -68h
.text:0000000000006E60 var_58          = xmmword ptr -58h
.text:0000000000006E60 var_48          = xmmword ptr -48h
.text:0000000000006E60 var_38          = xmmword ptr -38h
.text:0000000000006E60 arg_0           = qword ptr  8
.text:0000000000006E60 arg_8           = byte ptr  10h
.text:0000000000006E60
.text:0000000000006E60 ; __unwind {
.text:0000000000006E60                 push    r14
.text:0000000000006E62                 push    r13
.text:0000000000006E64                 mov     r14, r8
.text:0000000000006E67                 push    r12
.text:0000000000006E69                 push    rbp
.text:0000000000006E6A                 mov     r12, rdx
.text:0000000000006E6D                 push    rbx
.text:0000000000006E6E                 mov     r13, rcx
.text:0000000000006E71                 sub     rsp, 0D0h
.text:0000000000006E78                 test    al, al
.text:0000000000006E7A                 mov     rbp, [rsp+0F8h+arg_0]
.text:0000000000006E82                 jz      short loc_6EBB
.text:0000000000006E84                 movaps  [rsp+0F8h+var_A8], xmm0
.text:0000000000006E89                 movaps  [rsp+0F8h+var_98], xmm1
.text:0000000000006E8E                 movaps  [rsp+0F8h+var_88], xmm2
.text:0000000000006E93                 movaps  [rsp+0F8h+var_78], xmm3
.text:0000000000006E9B                 movaps  [rsp+0F8h+var_68], xmm4
.text:0000000000006EA3                 movaps  [rsp+0F8h+var_58], xmm5
.text:0000000000006EAB                 movaps  [rsp+0F8h+var_48], xmm6
.text:0000000000006EB3                 movaps  [rsp+0F8h+var_38], xmm7
.text:0000000000006EBB
.text:0000000000006EBB loc_6EBB:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:0000000000006EBB                 mov     rax, fs:28h
.text:0000000000006EC4                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000006EC9                 xor     eax, eax
.text:0000000000006ECB                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000006ED2                 lea     rax, shortopts  ; "+"
.text:0000000000006ED9                 test    r9b, r9b
.text:0000000000006EDC                 lea     rcx, long_options ; longopts
.text:0000000000006EE3                 cmovz   rdx, rax        ; shortopts
.text:0000000000006EE7                 xor     r8d, r8d        ; longind
.text:0000000000006EEA                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000006EF0                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:0000000000006EFA                 call    _getopt_long
.text:0000000000006EFF                 cmp     eax, 0FFFFFFFFh
.text:0000000000006F02                 jz      short loc_6F68
.text:0000000000006F04                 cmp     eax, 68h ; 'h'
.text:0000000000006F07                 jz      loc_6F90
.text:0000000000006F0D                 cmp     eax, 76h ; 'v'
.text:0000000000006F10                 jnz     short loc_6F60
.text:0000000000006F12                 lea     rax, [rsp+0F8h+arg_8]
.text:0000000000006F1A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000006F21                 mov     r8, rsp
.text:0000000000006F24                 mov     rcx, r14
.text:0000000000006F27                 mov     rdx, r13
.text:0000000000006F2A                 mov     rsi, r12
.text:0000000000006F2D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000006F32                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000006F37                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:0000000000006F3E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000006F46                 mov     [rsp+0F8h+var_E8], rax
.text:0000000000006F4B                 call    version_etc_va
.text:0000000000006F50                 xor     edi, edi        ; status
.text:0000000000006F52                 call    _exit
.text:0000000000006F52 ; ---------------------------------------------------------------------------
.text:0000000000006F57                 align 20h
.text:0000000000006F60
.text:0000000000006F60 loc_6F60:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000006F60                 mov     edi, cs:exit_failure
.text:0000000000006F66                 call    rbp
.text:0000000000006F68
.text:0000000000006F68 loc_6F68:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000006F68                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000006F68                 mov     rax, [rsp+0F8h+var_E0]
.text:0000000000006F6D                 xor     rax, fs:28h
.text:0000000000006F76                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000006F7C                 jnz     short loc_6F96
.text:0000000000006F7E                 add     rsp, 0D0h
.text:0000000000006F85                 pop     rbx
.text:0000000000006F86                 pop     rbp
.text:0000000000006F87                 pop     r12
.text:0000000000006F89                 pop     r13
.text:0000000000006F8B                 pop     r14
.text:0000000000006F8D                 retn
.text:0000000000006F8D ; ---------------------------------------------------------------------------
.text:0000000000006F8E                 align 10h
.text:0000000000006F90
.text:0000000000006F90 loc_6F90:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:0000000000006F90                 xor     edi, edi
.text:0000000000006F92                 call    rbp
.text:0000000000006F94                 jmp     short loc_6F68
.text:0000000000006F96 ; ---------------------------------------------------------------------------
.text:0000000000006F96
.text:0000000000006F96 loc_6F96:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:0000000000006F96                 call    ___stack_chk_fail
.text:0000000000006F96 ; } // starts at 6E60
.text:0000000000006F96 parse_gnu_standard_options_only endp
.text:0000000000006F96
.text:0000000000006F96 ; ---------------------------------------------------------------------------
.text:0000000000006F9B                 align 20h
.text:0000000000006FA0
.text:0000000000006FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FA0
.text:0000000000006FA0
.text:0000000000006FA0                 public set_program_name
.text:0000000000006FA0 set_program_name proc near              ; CODE XREF: main+179↑p
.text:0000000000006FA0 ; __unwind {
.text:0000000000006FA0                 test    rdi, rdi
.text:0000000000006FA3                 push    rbx
.text:0000000000006FA4                 jz      short loc_701D
.text:0000000000006FA6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000006FAB                 mov     rbx, rdi
.text:0000000000006FAE                 call    _strrchr
.text:0000000000006FB3                 test    rax, rax
.text:0000000000006FB6                 jz      short loc_700D
.text:0000000000006FB8                 lea     r8, [rax+1]
.text:0000000000006FBC                 mov     rdx, r8
.text:0000000000006FBF                 sub     rdx, rbx
.text:0000000000006FC2                 cmp     rdx, 6
.text:0000000000006FC6                 jle     short loc_700D
.text:0000000000006FC8                 lea     rsi, [rax-6]
.text:0000000000006FCC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000006FD3                 mov     ecx, 7
.text:0000000000006FD8                 repe cmpsb
.text:0000000000006FDA                 setnbe  dl
.text:0000000000006FDD                 sbb     dl, 0
.text:0000000000006FE0                 test    dl, dl
.text:0000000000006FE2                 jnz     short loc_700D
.text:0000000000006FE4                 lea     rdi, aLt        ; "lt-"
.text:0000000000006FEB                 mov     ecx, 3
.text:0000000000006FF0                 mov     rsi, r8
.text:0000000000006FF3                 mov     rbx, r8
.text:0000000000006FF6                 repe cmpsb
.text:0000000000006FF8                 setnbe  dl
.text:0000000000006FFB                 sbb     dl, 0
.text:0000000000006FFE                 test    dl, dl
.text:0000000000007000                 jnz     short loc_700D
.text:0000000000007002                 lea     rbx, [rax+4]
.text:0000000000007006                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:000000000000700D
.text:000000000000700D loc_700D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000700D                                         ; set_program_name+26↑j ...
.text:000000000000700D                 mov     cs:program_name, rbx
.text:0000000000007014                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000701B                 pop     rbx
.text:000000000000701C                 retn
.text:000000000000701D ; ---------------------------------------------------------------------------
.text:000000000000701D
.text:000000000000701D loc_701D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000701D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000007024                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000702B                 mov     edx, 37h ; '7'  ; n
.text:0000000000007030                 mov     esi, 1          ; size
.text:0000000000007035                 call    _fwrite
.text:000000000000703A                 call    _abort
.text:000000000000703A ; } // starts at 6FA0
.text:000000000000703A set_program_name endp
.text:000000000000703A
.text:000000000000703A ; ---------------------------------------------------------------------------
.text:000000000000703F                 align 20h
.text:0000000000007040
.text:0000000000007040 ; =============== S U B R O U T I N E =======================================
.text:0000000000007040
.text:0000000000007040 ; Attributes: info_from_lumina
.text:0000000000007040
.text:0000000000007040 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000007040 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000007040                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000007040 ; __unwind {
.text:0000000000007040                 push    rbp
.text:0000000000007041                 push    rbx
.text:0000000000007042                 mov     rbp, rdi
.text:0000000000007045                 mov     ebx, esi
.text:0000000000007047                 sub     rsp, 8
.text:000000000000704B                 call    locale_charset
.text:0000000000007050                 movzx   edx, byte ptr [rax]
.text:0000000000007053                 and     edx, 0FFFFFFDFh
.text:0000000000007056                 cmp     dl, 55h ; 'U'
.text:0000000000007059                 jz      short loc_70D0
.text:000000000000705B                 cmp     dl, 47h ; 'G'
.text:000000000000705E                 jz      short loc_7080
.text:0000000000007060
.text:0000000000007060 loc_7060:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000007060                                         ; gettext_quote+50↓j ...
.text:0000000000007060                 lea     rax, unk_E25B
.text:0000000000007067                 lea     rdx, asc_E25D   ; "'"
.text:000000000000706E                 cmp     ebx, 9
.text:0000000000007071                 cmovnz  rax, rdx
.text:0000000000007075                 add     rsp, 8
.text:0000000000007079                 pop     rbx
.text:000000000000707A                 pop     rbp
.text:000000000000707B                 retn
.text:000000000000707B ; ---------------------------------------------------------------------------
.text:000000000000707C                 align 20h
.text:0000000000007080
.text:0000000000007080 loc_7080:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000007080                 movzx   edx, byte ptr [rax+1]
.text:0000000000007084                 and     edx, 0FFFFFFDFh
.text:0000000000007087                 cmp     dl, 42h ; 'B'
.text:000000000000708A                 jnz     short loc_7060
.text:000000000000708C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000007090                 jnz     short loc_7060
.text:0000000000007092                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000007096                 jnz     short loc_7060
.text:0000000000007098                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000709C                 jnz     short loc_7060
.text:000000000000709E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000070A2                 jnz     short loc_7060
.text:00000000000070A4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000070A8                 jnz     short loc_7060
.text:00000000000070AA                 cmp     byte ptr [rax+7], 0
.text:00000000000070AE                 jnz     short loc_7060
.text:00000000000070B0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000070B4                 lea     rax, unk_E254
.text:00000000000070BB                 lea     rdx, unk_E258
.text:00000000000070C2                 cmovnz  rax, rdx
.text:00000000000070C6                 add     rsp, 8
.text:00000000000070CA                 pop     rbx
.text:00000000000070CB                 pop     rbp
.text:00000000000070CC                 retn
.text:00000000000070CC ; ---------------------------------------------------------------------------
.text:00000000000070CD                 align 10h
.text:00000000000070D0
.text:00000000000070D0 loc_70D0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000070D0                 movzx   edx, byte ptr [rax+1]
.text:00000000000070D4                 and     edx, 0FFFFFFDFh
.text:00000000000070D7                 cmp     dl, 54h ; 'T'
.text:00000000000070DA                 jnz     short loc_7060
.text:00000000000070DC                 movzx   edx, byte ptr [rax+2]
.text:00000000000070E0                 and     edx, 0FFFFFFDFh
.text:00000000000070E3                 cmp     dl, 46h ; 'F'
.text:00000000000070E6                 jnz     loc_7060
.text:00000000000070EC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000070F0                 jnz     loc_7060
.text:00000000000070F6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000070FA                 jnz     loc_7060
.text:0000000000007100                 cmp     byte ptr [rax+5], 0
.text:0000000000007104                 jnz     loc_7060
.text:000000000000710A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000710E                 lea     rax, unk_E24C
.text:0000000000007115                 lea     rdx, unk_E250
.text:000000000000711C                 cmovnz  rax, rdx
.text:0000000000007120                 add     rsp, 8
.text:0000000000007124                 pop     rbx
.text:0000000000007125                 pop     rbp
.text:0000000000007126                 retn
.text:0000000000007126 ; } // starts at 7040
.text:0000000000007126 gettext_quote   endp
.text:0000000000007126
.text:0000000000007126 ; ---------------------------------------------------------------------------
.text:0000000000007127                 align 10h
.text:0000000000007130
.text:0000000000007130 ; =============== S U B R O U T I N E =======================================
.text:0000000000007130
.text:0000000000007130 ; Attributes: info_from_lumina
.text:0000000000007130
.text:0000000000007130 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000007130 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000007130                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000007130
.text:0000000000007130 var_E0          = dword ptr -0E0h
.text:0000000000007130 var_DB          = byte ptr -0DBh
.text:0000000000007130 var_DA          = byte ptr -0DAh
.text:0000000000007130 var_D9          = byte ptr -0D9h
.text:0000000000007130 s               = qword ptr -0D8h
.text:0000000000007130 n               = qword ptr -0D0h
.text:0000000000007130 var_C8          = qword ptr -0C8h
.text:0000000000007130 ps              = qword ptr -0C0h
.text:0000000000007130 var_B8          = qword ptr -0B8h
.text:0000000000007130 var_B0          = qword ptr -0B0h
.text:0000000000007130 var_A8          = qword ptr -0A8h
.text:0000000000007130 s2              = qword ptr -0A0h
.text:0000000000007130 var_98          = qword ptr -98h
.text:0000000000007130 var_90          = qword ptr -90h
.text:0000000000007130 var_88          = qword ptr -88h
.text:0000000000007130 var_80          = qword ptr -80h
.text:0000000000007130 var_78          = qword ptr -78h
.text:0000000000007130 var_70          = dword ptr -70h
.text:0000000000007130 var_6C          = byte ptr -6Ch
.text:0000000000007130 var_6B          = byte ptr -6Bh
.text:0000000000007130 var_6A          = byte ptr -6Ah
.text:0000000000007130 var_69          = byte ptr -69h
.text:0000000000007130 var_68          = qword ptr -68h
.text:0000000000007130 var_60          = qword ptr -60h
.text:0000000000007130 wc              = dword ptr -4Ch
.text:0000000000007130 var_48          = qword ptr -48h
.text:0000000000007130 var_40          = qword ptr -40h
.text:0000000000007130 arg_0           = qword ptr  8
.text:0000000000007130 arg_8           = qword ptr  10h
.text:0000000000007130 arg_10          = qword ptr  18h
.text:0000000000007130
.text:0000000000007130 ; __unwind {
.text:0000000000007130                 push    r15
.text:0000000000007132                 push    r14
.text:0000000000007134                 mov     r15d, r8d
.text:0000000000007137                 push    r13
.text:0000000000007139                 push    r12
.text:000000000000713B                 mov     r14, rdi
.text:000000000000713E                 push    rbp
.text:000000000000713F                 push    rbx
.text:0000000000007140                 mov     ebx, r9d
.text:0000000000007143                 mov     r13, rsi
.text:0000000000007146                 mov     rbp, rcx
.text:0000000000007149                 and     ebx, 2
.text:000000000000714C                 sub     rsp, 0B8h
.text:0000000000007153                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000715B                 mov     [rsp+0E8h+s], rdx
.text:0000000000007160                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000007165                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000716A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000716F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000007177                 mov     [rsp+0E8h+var_80], rax
.text:000000000000717C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000007184                 mov     [rsp+0E8h+var_88], rax
.text:0000000000007189                 mov     rax, fs:28h
.text:0000000000007192                 mov     [rsp+0E8h+var_40], rax
.text:000000000000719A                 xor     eax, eax
.text:000000000000719C                 call    ___ctype_get_mb_cur_max
.text:00000000000071A1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000071A5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000071AA                 ja      def_71C1        ; jumptable 00000000000121F1 default case
.text:00000000000071B0                 lea     rcx, jpt_71C1
.text:00000000000071B7                 mov     edx, r15d
.text:00000000000071BA                 movsxd  rax, ds:(jpt_71C1 - 0E2C0h)[rcx+rdx*4]
.text:00000000000071BE                 add     rax, rcx
.text:00000000000071C1                 jmp     rax             ; switch jump
.text:00000000000071C3 ; ---------------------------------------------------------------------------
.text:00000000000071C3
.text:00000000000071C3 loc_71C3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000071C3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000071C3                                         ; DATA XREF: ...
.text:00000000000071C3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000071C8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000071CD                 xor     r12d, r12d
.text:00000000000071D0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000071D9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000071DE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000071E3
.text:00000000000071E3 loc_71E3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000071E3                 lea     rax, asc_E25D   ; "'"
.text:00000000000071EA                 mov     [rsp+0E8h+n], 1
.text:00000000000071F3                 xor     r15d, r15d
.text:00000000000071F6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000071FE                 mov     [rsp+0E8h+s2], rax
.text:0000000000007203
.text:0000000000007203 loc_7203:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000007203                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000007203                 xor     r11d, r11d
.text:0000000000007206                 mov     rax, rbp
.text:0000000000007209                 mov     r8d, r12d
.text:000000000000720C                 mov     rbp, r11
.text:000000000000720F                 mov     r11, rax
.text:0000000000007212                 nop     word ptr [rax+rax+00h]
.text:0000000000007218
.text:0000000000007218 loc_7218:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000007218                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000007218                 cmp     r11, rbp
.text:000000000000721B                 setnz   r12b
.text:000000000000721F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000007223                 jnz     short loc_7232
.text:0000000000007225                 mov     rax, [rsp+0E8h+s]
.text:000000000000722A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000722E                 setnz   r12b
.text:0000000000007232
.text:0000000000007232 loc_7232:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000007232                 test    r12b, r12b
.text:0000000000007235                 jz      loc_7890
.text:000000000000723B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007240                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000007245                 lea     r9, [rdi+rbp]
.text:0000000000007249                 setnz   al
.text:000000000000724C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000007250                 mov     r10d, eax
.text:0000000000007253                 jz      loc_7300
.text:0000000000007259                 mov     rax, [rsp+0E8h+n]
.text:000000000000725E                 test    rax, rax
.text:0000000000007261                 jz      loc_7690
.text:0000000000007267                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000726B                 lea     rbx, [rbp+rax+0]
.text:0000000000007270                 jnz     short loc_72A0
.text:0000000000007272                 cmp     rax, 1
.text:0000000000007276                 jbe     short loc_72A0
.text:0000000000007278                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000727D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000007282                 mov     [rsp+0E8h+ps], r9
.text:0000000000007287                 call    _strlen
.text:000000000000728C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000007292                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000007298                 mov     r11, rax
.text:000000000000729B                 mov     r9, [rsp+0E8h+ps]
.text:00000000000072A0
.text:00000000000072A0 loc_72A0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000072A0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000072A0                 cmp     rbx, r11
.text:00000000000072A3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000072A8                 ja      loc_7860
.text:00000000000072AE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000072B3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000072B8                 mov     rdi, r9         ; s1
.text:00000000000072BB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000072C0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000072C5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000072CA                 call    _memcmp
.text:00000000000072CF                 test    eax, eax
.text:00000000000072D1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000072D6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000072DC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000072E1                 jnz     loc_7860
.text:00000000000072E7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000072EC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000072F2                 jnz     loc_8275
.text:00000000000072F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007300
.text:0000000000007300 loc_7300:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000007300                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000007300                 movzx   ebx, byte ptr [r9]
.text:0000000000007304                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000007307                 ja      def_731E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000730D                 lea     rcx, jpt_731E
.text:0000000000007314                 movzx   edx, bl
.text:0000000000007317                 movsxd  rax, ds:(jpt_731E - 0E2ECh)[rcx+rdx*4]
.text:000000000000731B                 add     rax, rcx
.text:000000000000731E                 jmp     rax             ; switch jump
.text:0000000000007320 ; ---------------------------------------------------------------------------
.text:0000000000007320
.text:0000000000007320 loc_7320:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000007320                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:0000000000007320                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000007323
.text:0000000000007323 loc_7323:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007323                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007323                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000007327                 setnz   al
.text:000000000000732A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000732E                 jnz     short loc_733C
.text:0000000000007330                 mov     rax, [rsp+0E8h+s]
.text:0000000000007335                 cmp     byte ptr [rax+1], 0
.text:0000000000007339                 setnz   al
.text:000000000000733C
.text:000000000000733C loc_733C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000733C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007341                 setz    dl
.text:0000000000007344                 test    al, al
.text:0000000000007346                 jz      loc_7598
.text:000000000000734C
.text:000000000000734C loc_734C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000734C                 xor     r12d, r12d
.text:000000000000734F                 xor     eax, eax
.text:0000000000007351                 nop     dword ptr [rax+00000000h]
.text:0000000000007358
.text:0000000000007358 loc_7358:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000007358                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000007358                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000735D                 jnz     loc_7472
.text:0000000000007363                 test    dl, dl
.text:0000000000007365                 jnz     loc_7472
.text:000000000000736B
.text:000000000000736B loc_736B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000736B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000007370                 test    rsi, rsi
.text:0000000000007373                 jz      short loc_7389
.text:0000000000007375                 mov     edx, ebx
.text:0000000000007377                 shr     dl, 5
.text:000000000000737A                 movzx   edx, dl
.text:000000000000737D                 mov     edx, [rsi+rdx*4]
.text:0000000000007380                 bt      edx, ebx
.text:0000000000007383                 jb      loc_74D3
.text:0000000000007389
.text:0000000000007389 loc_7389:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000007389                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000007389                 test    r10b, r10b
.text:000000000000738C                 jnz     loc_74D3
.text:0000000000007392                 xor     eax, 1
.text:0000000000007395                 add     rbp, 1
.text:0000000000007399                 and     eax, r8d
.text:000000000000739C
.text:000000000000739C loc_739C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000739C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000739C                 test    al, al
.text:000000000000739E                 jz      short loc_73C0
.text:00000000000073A0                 cmp     r13, r15
.text:00000000000073A3                 jbe     short loc_73AA
.text:00000000000073A5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000073AA
.text:00000000000073AA loc_73AA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000073AA                 lea     rax, [r15+1]
.text:00000000000073AE                 cmp     r13, rax
.text:00000000000073B1                 jbe     short loc_73B9
.text:00000000000073B3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000073B9
.text:00000000000073B9 loc_73B9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000073B9                 add     r15, 2
.text:00000000000073BD                 xor     r8d, r8d
.text:00000000000073C0
.text:00000000000073C0 loc_73C0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000073C0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000073C0                 cmp     r15, r13
.text:00000000000073C3                 jnb     short loc_73C9
.text:00000000000073C5                 mov     [r14+r15], bl
.text:00000000000073C9
.text:00000000000073C9 loc_73C9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000073C9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000073CE                 add     r15, 1
.text:00000000000073D2                 mov     eax, 0
.text:00000000000073D7                 test    r12b, r12b
.text:00000000000073DA                 cmovz   edi, eax
.text:00000000000073DD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000073E2                 jmp     loc_7218
.text:00000000000073E2 ; ---------------------------------------------------------------------------
.text:00000000000073E7                 align 10h
.text:00000000000073F0
.text:00000000000073F0 loc_73F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000073F0                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:00000000000073F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000073F3
.text:00000000000073F3 loc_73F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000073F3                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:00000000000073F3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000073F7                 cmp     eax, 2
.text:00000000000073FA                 jz      loc_79B8
.text:0000000000007400                 cmp     eax, 5
.text:0000000000007403                 jz      loc_7978
.text:0000000000007409                 cmp     eax, 2
.text:000000000000740C                 mov     ebx, 3Fh ; '?'
.text:0000000000007411                 setz    dl
.text:0000000000007414                 xor     r12d, r12d
.text:0000000000007417                 xor     eax, eax
.text:0000000000007419                 jmp     loc_7358
.text:0000000000007419 ; ---------------------------------------------------------------------------
.text:000000000000741E                 align 20h
.text:0000000000007420
.text:0000000000007420 loc_7420:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000007420                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:0000000000007420                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000007423
.text:0000000000007423 loc_7423:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007423                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007423                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000007428                 jz      loc_7930
.text:000000000000742E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000007433                 xor     edx, edx
.text:0000000000007435                 xor     eax, eax
.text:0000000000007437                 mov     ebx, 27h ; '''
.text:000000000000743C                 jmp     loc_7358
.text:000000000000743C ; ---------------------------------------------------------------------------
.text:0000000000007441                 align 8
.text:0000000000007448
.text:0000000000007448 loc_7448:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007448                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007448                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000744D                 mov     ebx, 74h ; 't'
.text:0000000000007452
.text:0000000000007452 loc_7452:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000007452                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000007452                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007457                 setz    al
.text:000000000000745A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000745E                 jnz     loc_75AE
.text:0000000000007464
.text:0000000000007464 loc_7464:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000007464                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000007464                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007469                 jnz     short loc_74D0
.text:000000000000746B
.text:000000000000746B loc_746B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000746B                 mov     ebx, edx
.text:000000000000746D                 xor     r12d, r12d
.text:0000000000007470                 xor     eax, eax
.text:0000000000007472
.text:0000000000007472 loc_7472:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000007472                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000007472                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007477                 jnz     loc_736B
.text:000000000000747D                 jmp     loc_7389
.text:000000000000747D ; ---------------------------------------------------------------------------
.text:0000000000007482                 align 8
.text:0000000000007488
.text:0000000000007488 loc_7488:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007488                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007488                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000748D                 mov     ebx, 62h ; 'b'
.text:0000000000007492                 jmp     short loc_7464
.text:0000000000007492 ; ---------------------------------------------------------------------------
.text:0000000000007494                 align 8
.text:0000000000007498
.text:0000000000007498 loc_7498:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007498                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007498                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000749D                 jz      loc_7870
.text:00000000000074A3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000074A8                 jz      loc_76C0
.text:00000000000074AE
.text:00000000000074AE loc_74AE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000074AE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000074B3                 jz      loc_76C0
.text:00000000000074B9                 cmp     [rsp+0E8h+n], 0
.text:00000000000074BF                 jnz     loc_787B
.text:00000000000074C5                 mov     ebx, 5Ch ; '\'
.text:00000000000074CA                 nop     word ptr [rax+rax+00h]
.text:00000000000074D0
.text:00000000000074D0 loc_74D0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000074D0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000074D0                 xor     r12d, r12d
.text:00000000000074D3
.text:00000000000074D3 loc_74D3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000074D3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000074D3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000074D8                 setz    dl
.text:00000000000074DB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000074E0                 mov     eax, edx
.text:00000000000074E2                 jnz     loc_7D38
.text:00000000000074E8                 mov     eax, r8d
.text:00000000000074EB                 xor     eax, 1
.text:00000000000074EE                 and     al, dl
.text:00000000000074F0                 jz      short loc_7521
.text:00000000000074F2                 cmp     r13, r15
.text:00000000000074F5                 jbe     short loc_74FC
.text:00000000000074F7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000074FC
.text:00000000000074FC loc_74FC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000074FC                 lea     rdx, [r15+1]
.text:0000000000007500                 cmp     r13, rdx
.text:0000000000007503                 jbe     short loc_750B
.text:0000000000007505                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000750B
.text:000000000000750B loc_750B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000750B                 lea     rdx, [r15+2]
.text:000000000000750F                 cmp     r13, rdx
.text:0000000000007512                 jbe     short loc_751A
.text:0000000000007514                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000751A
.text:000000000000751A loc_751A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000751A                 add     r15, 3
.text:000000000000751E                 mov     r8d, eax
.text:0000000000007521
.text:0000000000007521 loc_7521:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000007521                 cmp     r13, r15
.text:0000000000007524                 jbe     short loc_752B
.text:0000000000007526                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000752B
.text:000000000000752B loc_752B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000752B                 add     r15, 1
.text:000000000000752F                 add     rbp, 1
.text:0000000000007533                 jmp     loc_73C0
.text:0000000000007533 ; ---------------------------------------------------------------------------
.text:0000000000007538                 align 20h
.text:0000000000007540
.text:0000000000007540 loc_7540:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007540                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007540                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000007545                 jnz     loc_7713
.text:000000000000754B                 xor     edx, edx
.text:000000000000754D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000007552                 jz      loc_746B
.text:0000000000007558                 add     rbp, 1
.text:000000000000755C                 jmp     loc_7218
.text:000000000000755C ; ---------------------------------------------------------------------------
.text:0000000000007561                 align 8
.text:0000000000007568
.text:0000000000007568 loc_7568:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007568                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007568                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000756D                 setz    dl
.text:0000000000007570                 xor     eax, eax
.text:0000000000007572                 jmp     loc_7358
.text:0000000000007572 ; ---------------------------------------------------------------------------
.text:0000000000007577                 align 20h
.text:0000000000007580
.text:0000000000007580 loc_7580:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007580                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007580                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000007585                 mov     ebx, 61h ; 'a'
.text:000000000000758A                 jmp     loc_7464
.text:000000000000758A ; ---------------------------------------------------------------------------
.text:000000000000758F                 align 10h
.text:0000000000007590
.text:0000000000007590 loc_7590:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007590                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007590                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000007595                 setz    dl
.text:0000000000007598
.text:0000000000007598 loc_7598:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000007598                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000007598                 test    rbp, rbp
.text:000000000000759B                 jnz     loc_734C
.text:00000000000075A1
.text:00000000000075A1 loc_75A1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000075A1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000075A1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000075A6                 and     al, dl
.text:00000000000075A8                 jz      loc_7358
.text:00000000000075AE
.text:00000000000075AE loc_75AE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000075AE                 mov     rbp, r11
.text:00000000000075B1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000075B9                 jmp     loc_7CB9
.text:00000000000075B9 ; ---------------------------------------------------------------------------
.text:00000000000075BE                 align 20h
.text:00000000000075C0
.text:00000000000075C0 loc_75C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000075C0                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:00000000000075C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000075C5                 setz    dl
.text:00000000000075C8                 xor     r12d, r12d
.text:00000000000075CB                 jmp     short loc_75A1
.text:00000000000075CB ; ---------------------------------------------------------------------------
.text:00000000000075CD                 align 10h
.text:00000000000075D0
.text:00000000000075D0 loc_75D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000075D0                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:00000000000075D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000075D5                 mov     ebx, 20h ; ' '
.text:00000000000075DA                 setz    dl
.text:00000000000075DD                 jmp     short loc_75A1
.text:00000000000075DD ; ---------------------------------------------------------------------------
.text:00000000000075DF                 align 20h
.text:00000000000075E0
.text:00000000000075E0 loc_75E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000075E0                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:00000000000075E0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000075E5                 mov     ebx, 72h ; 'r'
.text:00000000000075EA                 jmp     loc_7452
.text:00000000000075EA ; ---------------------------------------------------------------------------
.text:00000000000075EF                 align 10h
.text:00000000000075F0
.text:00000000000075F0 loc_75F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000075F0                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:00000000000075F0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000075F5                 mov     ebx, 66h ; 'f'
.text:00000000000075FA                 jmp     loc_7464
.text:00000000000075FA ; ---------------------------------------------------------------------------
.text:00000000000075FF                 align 20h
.text:0000000000007600
.text:0000000000007600 loc_7600:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007600                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007600                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000007605                 mov     ebx, 76h ; 'v'
.text:000000000000760A                 jmp     loc_7464
.text:000000000000760A ; ---------------------------------------------------------------------------
.text:000000000000760F                 align 10h
.text:0000000000007610
.text:0000000000007610 loc_7610:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007610                                         ; DATA XREF: .rodata:jpt_731E↓o
.text:0000000000007610                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000007615                 mov     ebx, 6Eh ; 'n'
.text:000000000000761A                 jmp     loc_7452
.text:000000000000761A ; ---------------------------------------------------------------------------
.text:000000000000761F                 align 20h
.text:0000000000007620
.text:0000000000007620 def_76AA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000007620                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000007620                                         ; DATA XREF: ...
.text:0000000000007620                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000007623                 nop     dword ptr [rax+rax+00h]
.text:0000000000007628
.text:0000000000007628 def_731E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000007628                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000007628                                         ; DATA XREF: ...
.text:0000000000007628                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000762E                 jnz     loc_79D8
.text:0000000000007634                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000007639                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000763E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000007643                 call    ___ctype_b_loc
.text:0000000000007648                 mov     rcx, [rax]
.text:000000000000764B                 movzx   edx, bl
.text:000000000000764E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000007654                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000765A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000765F                 mov     edi, 1
.text:0000000000007664                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000007668                 and     ax, 4000h
.text:000000000000766C                 setnz   r12b
.text:0000000000007670                 setz    al
.text:0000000000007673                 and     al, [rsp+0E8h+var_DB]
.text:0000000000007677
.text:0000000000007677 loc_7677:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000007677                 test    al, al
.text:0000000000007679                 jnz     loc_8011
.text:000000000000767F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007684                 setz    dl
.text:0000000000007687                 jmp     loc_7358
.text:0000000000007687 ; ---------------------------------------------------------------------------
.text:000000000000768C                 align 10h
.text:0000000000007690
.text:0000000000007690 loc_7690:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000007690                 movzx   ebx, byte ptr [r9]
.text:0000000000007694                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000007697                 ja      short def_76AA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000007699                 lea     rcx, jpt_76AA
.text:00000000000076A0                 movzx   edx, bl
.text:00000000000076A3                 movsxd  rax, ds:(jpt_76AA - 0E4E8h)[rcx+rdx*4]
.text:00000000000076A7                 add     rax, rcx
.text:00000000000076AA                 jmp     rax             ; switch jump
.text:00000000000076AA ; ---------------------------------------------------------------------------
.text:00000000000076AC                 align 10h
.text:00000000000076B0
.text:00000000000076B0 loc_76B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000076B0                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:00000000000076B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000076B3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000076B8                 jnz     loc_74AE
.text:00000000000076BE                 xchg    ax, ax
.text:00000000000076C0
.text:00000000000076C0 loc_76C0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000076C0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000076C0                 mov     edx, 5Ch ; '\'
.text:00000000000076C5                 mov     ebx, 5Ch ; '\'
.text:00000000000076CA                 jmp     loc_7464
.text:00000000000076CA ; ---------------------------------------------------------------------------
.text:00000000000076CF                 align 10h
.text:00000000000076D0
.text:00000000000076D0 loc_76D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000076D0                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:00000000000076D0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000076D5                 xor     r10d, r10d
.text:00000000000076D8                 mov     ebx, 66h ; 'f'
.text:00000000000076DD                 jmp     loc_7464
.text:00000000000076DD ; ---------------------------------------------------------------------------
.text:00000000000076E2                 align 8
.text:00000000000076E8
.text:00000000000076E8 loc_76E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000076E8                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:00000000000076E8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000076ED                 xor     r10d, r10d
.text:00000000000076F0                 mov     ebx, 6Eh ; 'n'
.text:00000000000076F5                 jmp     loc_7452
.text:00000000000076F5 ; ---------------------------------------------------------------------------
.text:00000000000076FA                 align 20h
.text:0000000000007700
.text:0000000000007700 loc_7700:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007700                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:0000000000007700                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000007705                 jmp     loc_74D0
.text:0000000000007705 ; ---------------------------------------------------------------------------
.text:000000000000770A                 align 10h
.text:0000000000007710
.text:0000000000007710 loc_7710:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007710                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:0000000000007710                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000007713
.text:0000000000007713 loc_7713:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000007713                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007718                 setz    dl
.text:000000000000771B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007720                 jnz     loc_82BA
.text:0000000000007726                 mov     eax, r8d
.text:0000000000007729                 mov     rcx, r15
.text:000000000000772C                 xor     eax, 1
.text:000000000000772F                 and     al, dl
.text:0000000000007731                 jz      short loc_7760
.text:0000000000007733                 cmp     r13, r15
.text:0000000000007736                 jbe     short loc_773D
.text:0000000000007738                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000773D
.text:000000000000773D loc_773D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000773D                 lea     rcx, [r15+1]
.text:0000000000007741                 cmp     r13, rcx
.text:0000000000007744                 jbe     short loc_774C
.text:0000000000007746                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000774C
.text:000000000000774C loc_774C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000774C                 lea     rcx, [r15+2]
.text:0000000000007750                 cmp     r13, rcx
.text:0000000000007753                 ja      loc_7D89
.text:0000000000007759
.text:0000000000007759 loc_7759:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000007759                 lea     rcx, [r15+3]
.text:000000000000775D                 mov     r8d, eax
.text:0000000000007760
.text:0000000000007760 loc_7760:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000007760                 cmp     r13, rcx
.text:0000000000007763                 jbe     short loc_776A
.text:0000000000007765                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000776A
.text:000000000000776A loc_776A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000776A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000776F                 lea     r15, [rcx+1]
.text:0000000000007773                 jz      loc_7D79
.text:0000000000007779                 lea     rax, [rbp+1]
.text:000000000000777D                 cmp     rax, r11
.text:0000000000007780                 jnb     short loc_779B
.text:0000000000007782                 mov     rax, [rsp+0E8h+s]
.text:0000000000007787                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000778C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000007790                 sub     eax, 30h ; '0'
.text:0000000000007793                 cmp     al, 9
.text:0000000000007795                 jbe     loc_7FC9
.text:000000000000779B
.text:000000000000779B loc_779B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000779B                 mov     eax, r12d
.text:000000000000779E                 mov     ebx, 30h ; '0'
.text:00000000000077A3                 xor     r12d, r12d
.text:00000000000077A6                 jmp     loc_7358
.text:00000000000077A6 ; ---------------------------------------------------------------------------
.text:00000000000077AB                 align 10h
.text:00000000000077B0
.text:00000000000077B0 loc_77B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000077B0                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:00000000000077B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000077B5                 mov     r12d, r10d
.text:00000000000077B8                 setz    dl
.text:00000000000077BB                 xor     r10d, r10d
.text:00000000000077BE                 xor     eax, eax
.text:00000000000077C0                 jmp     loc_7358
.text:00000000000077C0 ; ---------------------------------------------------------------------------
.text:00000000000077C5                 align 8
.text:00000000000077C8
.text:00000000000077C8 loc_77C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000077C8                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:00000000000077C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000077CD                 setz    dl
.text:00000000000077D0                 xor     r10d, r10d
.text:00000000000077D3                 jmp     loc_7598
.text:00000000000077D3 ; ---------------------------------------------------------------------------
.text:00000000000077D8                 align 20h
.text:00000000000077E0
.text:00000000000077E0 loc_77E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000077E0                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:00000000000077E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000077E5                 setz    dl
.text:00000000000077E8                 xor     r10d, r10d
.text:00000000000077EB                 xor     r12d, r12d
.text:00000000000077EE                 jmp     loc_75A1
.text:00000000000077EE ; ---------------------------------------------------------------------------
.text:00000000000077F3                 align 8
.text:00000000000077F8
.text:00000000000077F8 loc_77F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000077F8                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:00000000000077F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000077FD                 mov     r12d, r10d
.text:0000000000007800                 mov     ebx, 20h ; ' '
.text:0000000000007805                 setz    dl
.text:0000000000007808                 xor     r10d, r10d
.text:000000000000780B                 jmp     loc_75A1
.text:0000000000007810 ; ---------------------------------------------------------------------------
.text:0000000000007810
.text:0000000000007810 loc_7810:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007810                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:0000000000007810                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000007815                 xor     r10d, r10d
.text:0000000000007818                 mov     ebx, 72h ; 'r'
.text:000000000000781D                 jmp     loc_7452
.text:000000000000781D ; ---------------------------------------------------------------------------
.text:0000000000007822                 align 8
.text:0000000000007828
.text:0000000000007828 loc_7828:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007828                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:0000000000007828                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000782D                 jmp     loc_74D0
.text:000000000000782D ; ---------------------------------------------------------------------------
.text:0000000000007832                 align 8
.text:0000000000007838
.text:0000000000007838 loc_7838:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007838                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:0000000000007838                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000783D                 xor     r10d, r10d
.text:0000000000007840                 mov     ebx, 74h ; 't'
.text:0000000000007845                 jmp     loc_7452
.text:0000000000007845 ; ---------------------------------------------------------------------------
.text:000000000000784A                 align 10h
.text:0000000000007850
.text:0000000000007850 loc_7850:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007850                                         ; DATA XREF: .rodata:jpt_76AA↓o
.text:0000000000007850                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000007855                 jmp     loc_74D0
.text:0000000000007855 ; ---------------------------------------------------------------------------
.text:000000000000785A                 align 20h
.text:0000000000007860
.text:0000000000007860 loc_7860:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000007860                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000007860                 xor     r10d, r10d
.text:0000000000007863                 jmp     loc_7300
.text:0000000000007863 ; ---------------------------------------------------------------------------
.text:0000000000007868                 align 10h
.text:0000000000007870
.text:0000000000007870 loc_7870:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000007870                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007875                 jnz     loc_81E0
.text:000000000000787B
.text:000000000000787B loc_787B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000787B                 add     rbp, 1
.text:000000000000787F                 mov     eax, r8d
.text:0000000000007882                 xor     r12d, r12d
.text:0000000000007885                 mov     ebx, 5Ch ; '\'
.text:000000000000788A                 jmp     loc_739C
.text:000000000000788A ; ---------------------------------------------------------------------------
.text:000000000000788F                 align 10h
.text:0000000000007890
.text:0000000000007890 loc_7890:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000007890                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007895                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000789A                 mov     r12d, r8d
.text:000000000000789D                 mov     rbp, r11
.text:00000000000078A0                 setz    dl
.text:00000000000078A3                 mov     eax, ebx
.text:00000000000078A5                 test    r15, r15
.text:00000000000078A8                 setz    cl
.text:00000000000078AB                 and     eax, edx
.text:00000000000078AD                 and     al, cl
.text:00000000000078AF                 jnz     loc_8316
.text:00000000000078B5                 mov     eax, ebx
.text:00000000000078B7                 xor     eax, 1
.text:00000000000078BA                 and     dl, al
.text:00000000000078BC                 jz      loc_822C
.text:00000000000078C2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000078C7                 jz      loc_822A
.text:00000000000078CD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000078D2                 jnz     loc_82CD
.text:00000000000078D8                 test    r13, r13
.text:00000000000078DB                 setz    al
.text:00000000000078DE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000078E4                 setnz   dl
.text:00000000000078E7                 and     al, dl
.text:00000000000078E9                 jz      loc_830C
.text:00000000000078EF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000078F4
.text:00000000000078F4 loc_78F4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000078F4                 lea     rbx, asc_E25D   ; "'"
.text:00000000000078FB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000078FF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007907                 mov     r15d, 1
.text:000000000000790D                 mov     [rsp+0E8h+n], 1
.text:0000000000007916                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000791B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000007920                 mov     [rsp+0E8h+var_6C], al
.text:0000000000007924                 jmp     loc_7203
.text:0000000000007924 ; ---------------------------------------------------------------------------
.text:0000000000007929                 align 10h
.text:0000000000007930
.text:0000000000007930 loc_7930:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000007930                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007935                 jnz     loc_81E0
.text:000000000000793B                 test    r13, r13
.text:000000000000793E                 jz      loc_7D40
.text:0000000000007944                 xor     edx, edx
.text:0000000000007946                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000794C                 jnz     loc_7D40
.text:0000000000007952
.text:0000000000007952 loc_7952:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000007952                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000007952                 mov     [rsp+0E8h+var_98], r13
.text:0000000000007957                 add     r15, 3
.text:000000000000795B                 xor     eax, eax
.text:000000000000795D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000007962                 xor     r8d, r8d
.text:0000000000007965                 mov     r13, rdx
.text:0000000000007968                 mov     ebx, 27h ; '''
.text:000000000000796D                 jmp     loc_7389
.text:000000000000796D ; ---------------------------------------------------------------------------
.text:0000000000007972                 align 8
.text:0000000000007978
.text:0000000000007978 loc_7978:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000007978                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000797D                 jz      short loc_79A0
.text:000000000000797F                 lea     rcx, [rbp+2]
.text:0000000000007983                 cmp     rcx, r11
.text:0000000000007986                 jnb     short loc_79A0
.text:0000000000007988                 mov     rax, [rsp+0E8h+s]
.text:000000000000798D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000007992                 jz      loc_8122
.text:0000000000007998                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000079A0
.text:00000000000079A0 loc_79A0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000079A0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000079A0                 xor     edx, edx
.text:00000000000079A2                 xor     r12d, r12d
.text:00000000000079A5                 xor     eax, eax
.text:00000000000079A7                 mov     ebx, 3Fh ; '?'
.text:00000000000079AC                 jmp     loc_7358
.text:00000000000079AC ; ---------------------------------------------------------------------------
.text:00000000000079B1                 align 8
.text:00000000000079B8
.text:00000000000079B8 loc_79B8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000079B8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000079BD                 jnz     loc_81E0
.text:00000000000079C3                 xor     r12d, r12d
.text:00000000000079C6                 xor     eax, eax
.text:00000000000079C8                 mov     ebx, 3Fh ; '?'
.text:00000000000079CD                 jmp     loc_7389
.text:00000000000079CD ; ---------------------------------------------------------------------------
.text:00000000000079D2                 align 8
.text:00000000000079D8
.text:00000000000079D8 loc_79D8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000079D8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000079E0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000079E4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000079F0                 mov     [rsp+0E8h+ps], rax
.text:00000000000079F5                 jnz     short loc_7A24
.text:00000000000079F7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000079FC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000007A01                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000007A06                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000007A0B                 call    _strlen
.text:0000000000007A10                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000007A16                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000007A1C                 mov     r11, rax
.text:0000000000007A1F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000007A24
.text:0000000000007A24 loc_7A24:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000007A24                 lea     rax, [rsp+0E8h+wc]
.text:0000000000007A2C                 xor     ecx, ecx
.text:0000000000007A2E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000007A32                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000007A37                 mov     rbx, rcx
.text:0000000000007A3A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000007A42                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000007A47                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000007A4C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000007A54                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000007A59                 mov     [rsp+0E8h+var_78], r13
.text:0000000000007A5E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000007A63
.text:0000000000007A63 loc_7A63:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000007A63                 mov     rax, [rsp+0E8h+s]
.text:0000000000007A68                 lea     r14, [rbp+rbx+0]
.text:0000000000007A6D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000007A72                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000007A77                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000007A7C                 lea     r13, [rax+r14]
.text:0000000000007A80                 sub     rdx, r14
.text:0000000000007A83                 mov     rsi, r13
.text:0000000000007A86                 call    rpl_mbrtowc
.text:0000000000007A8B                 test    rax, rax
.text:0000000000007A8E                 mov     r15, rax
.text:0000000000007A91                 jz      short loc_7AE1
.text:0000000000007A93                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007A97                 jz      loc_80B5
.text:0000000000007A9D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000007AA1                 jz      loc_8041
.text:0000000000007AA7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007AAC                 setz    al
.text:0000000000007AAF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000007AB3                 jnz     loc_7C50
.text:0000000000007AB9
.text:0000000000007AB9 loc_7AB9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000007AB9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000007AB9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000007AC0                 call    _iswprint
.text:0000000000007AC5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000007ACA                 test    eax, eax
.text:0000000000007ACC                 mov     eax, 0
.text:0000000000007AD1                 cmovz   r12d, eax
.text:0000000000007AD5                 add     rbx, r15
.text:0000000000007AD8                 call    _mbsinit
.text:0000000000007ADD                 test    eax, eax
.text:0000000000007ADF                 jz      short loc_7A63
.text:0000000000007AE1
.text:0000000000007AE1 loc_7AE1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000007AE1                 mov     edx, r12d
.text:0000000000007AE4                 mov     rdi, rbx
.text:0000000000007AE7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000007AED                 xor     edx, 1
.text:0000000000007AF0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000007AF5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000007AFB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000007AFF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000007B07                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000007B0C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000007B11                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000007B16
.text:0000000000007B16 loc_7B16:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000007B16                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000007B16                 cmp     rdi, 1
.text:0000000000007B1A                 jbe     loc_811B
.text:0000000000007B20
.text:0000000000007B20 loc_7B20:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000007B20                 mov     rcx, rdi
.text:0000000000007B23                 xor     esi, esi
.text:0000000000007B25                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000007B2B                 add     rcx, rbp
.text:0000000000007B2E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000007B33                 jmp     loc_7BEE
.text:0000000000007B33 ; ---------------------------------------------------------------------------
.text:0000000000007B38                 align 20h
.text:0000000000007B40
.text:0000000000007B40 loc_7B40:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000007B40                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007B45                 setz    al
.text:0000000000007B48                 test    r9b, r9b
.text:0000000000007B4B                 jnz     loc_8000
.text:0000000000007B51                 mov     esi, r8d
.text:0000000000007B54                 xor     esi, 1
.text:0000000000007B57                 and     al, sil
.text:0000000000007B5A                 jz      short loc_7B8B
.text:0000000000007B5C                 cmp     r13, r15
.text:0000000000007B5F                 jbe     short loc_7B66
.text:0000000000007B61                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007B66
.text:0000000000007B66 loc_7B66:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000007B66                 lea     rsi, [r15+1]
.text:0000000000007B6A                 cmp     r13, rsi
.text:0000000000007B6D                 jbe     short loc_7B75
.text:0000000000007B6F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000007B75
.text:0000000000007B75 loc_7B75:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000007B75                 lea     rsi, [r15+2]
.text:0000000000007B79                 cmp     r13, rsi
.text:0000000000007B7C                 jbe     short loc_7B84
.text:0000000000007B7E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000007B84
.text:0000000000007B84 loc_7B84:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000007B84                 add     r15, 3
.text:0000000000007B88                 mov     r8d, eax
.text:0000000000007B8B
.text:0000000000007B8B loc_7B8B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000007B8B                 cmp     r13, r15
.text:0000000000007B8E                 jbe     short loc_7B95
.text:0000000000007B90                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000007B95
.text:0000000000007B95 loc_7B95:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000007B95                 lea     rax, [r15+1]
.text:0000000000007B99                 cmp     r13, rax
.text:0000000000007B9C                 jbe     short loc_7BAB
.text:0000000000007B9E                 mov     eax, ebx
.text:0000000000007BA0                 shr     al, 6
.text:0000000000007BA3                 add     eax, 30h ; '0'
.text:0000000000007BA6                 mov     [r14+r15+1], al
.text:0000000000007BAB
.text:0000000000007BAB loc_7BAB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000007BAB                 lea     rax, [r15+2]
.text:0000000000007BAF                 cmp     r13, rax
.text:0000000000007BB2                 jbe     short loc_7BC4
.text:0000000000007BB4                 mov     eax, ebx
.text:0000000000007BB6                 shr     al, 3
.text:0000000000007BB9                 and     eax, 7
.text:0000000000007BBC                 add     eax, 30h ; '0'
.text:0000000000007BBF                 mov     [r14+r15+2], al
.text:0000000000007BC4
.text:0000000000007BC4 loc_7BC4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000007BC4                 and     ebx, 7
.text:0000000000007BC7                 add     rbp, 1
.text:0000000000007BCB                 add     r15, 3
.text:0000000000007BCF                 add     ebx, 30h ; '0'
.text:0000000000007BD2                 cmp     rbp, rcx
.text:0000000000007BD5                 jnb     loc_73C0
.text:0000000000007BDB                 mov     esi, edx
.text:0000000000007BDD
.text:0000000000007BDD loc_7BDD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000007BDD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000007BDD                 cmp     r13, r15
.text:0000000000007BE0                 jbe     short loc_7BE6
.text:0000000000007BE2                 mov     [r14+r15], bl
.text:0000000000007BE6
.text:0000000000007BE6 loc_7BE6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000007BE6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000007BEA                 add     r15, 1
.text:0000000000007BEE
.text:0000000000007BEE loc_7BEE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000007BEE                 test    dl, dl
.text:0000000000007BF0                 jnz     loc_7B40
.text:0000000000007BF6                 mov     eax, esi
.text:0000000000007BF8                 xor     eax, 1
.text:0000000000007BFB                 and     eax, r8d
.text:0000000000007BFE                 test    r10b, r10b
.text:0000000000007C01                 jz      short loc_7C11
.text:0000000000007C03                 cmp     r13, r15
.text:0000000000007C06                 jbe     short loc_7C0D
.text:0000000000007C08                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000007C0D
.text:0000000000007C0D loc_7C0D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000007C0D                 add     r15, 1
.text:0000000000007C11
.text:0000000000007C11 loc_7C11:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000007C11                 add     rbp, 1
.text:0000000000007C15                 cmp     rbp, rcx
.text:0000000000007C18                 jnb     loc_739C
.text:0000000000007C1E                 test    al, al
.text:0000000000007C20                 jz      loc_801E
.text:0000000000007C26                 cmp     r13, r15
.text:0000000000007C29                 jbe     short loc_7C30
.text:0000000000007C2B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007C30
.text:0000000000007C30 loc_7C30:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000007C30                 lea     rax, [r15+1]
.text:0000000000007C34                 cmp     r13, rax
.text:0000000000007C37                 jbe     short loc_7C3F
.text:0000000000007C39                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000007C3F
.text:0000000000007C3F loc_7C3F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000007C3F                 add     r15, 2
.text:0000000000007C43                 xor     r10d, r10d
.text:0000000000007C46                 xor     r8d, r8d
.text:0000000000007C49                 jmp     short loc_7BDD
.text:0000000000007C49 ; ---------------------------------------------------------------------------
.text:0000000000007C4B                 align 10h
.text:0000000000007C50
.text:0000000000007C50 loc_7C50:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000007C50                 cmp     r15, 1
.text:0000000000007C54                 jz      loc_7AB9
.text:0000000000007C5A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000007C5F                 lea     rcx, [rdi+r15]
.text:0000000000007C63                 lea     rdx, [rdi+r14+1]
.text:0000000000007C68                 lea     r8, [rcx+r14]
.text:0000000000007C6C                 jmp     short loc_7C7D
.text:0000000000007C6C ; ---------------------------------------------------------------------------
.text:0000000000007C6E                 align 10h
.text:0000000000007C70
.text:0000000000007C70 loc_7C70:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000007C70                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000007C70                 add     rdx, 1
.text:0000000000007C74                 cmp     r8, rdx
.text:0000000000007C77                 jz      loc_7AB9
.text:0000000000007C7D
.text:0000000000007C7D loc_7C7D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000007C7D                 movzx   ecx, byte ptr [rdx]
.text:0000000000007C80                 sub     ecx, 5Bh ; '['
.text:0000000000007C83                 cmp     cl, 21h ; '!'
.text:0000000000007C86                 ja      short loc_7C70
.text:0000000000007C88                 mov     esi, 1
.text:0000000000007C8D                 shl     rsi, cl
.text:0000000000007C90                 mov     rcx, rsi
.text:0000000000007C93                 mov     rsi, 20000002Bh
.text:0000000000007C9D                 test    rcx, rsi
.text:0000000000007CA0                 jz      short loc_7C70
.text:0000000000007CA2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000007CA7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000007CAC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000007CB1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007CB9
.text:0000000000007CB9 loc_7CB9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000007CB9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000007CB9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007CBE                 jz      short loc_7CD0
.text:0000000000007CC0                 test    al, al
.text:0000000000007CC2                 mov     eax, 4
.text:0000000000007CC7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000007CCC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000007CD0
.text:0000000000007CD0 loc_7CD0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000007CD0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000007CD0                 sub     rsp, 8
.text:0000000000007CD4                 mov     rcx, rbp
.text:0000000000007CD7                 mov     rsi, r13
.text:0000000000007CDA                 push    [rsp+0F0h+var_88]
.text:0000000000007CDE                 push    [rsp+0F8h+var_80]
.text:0000000000007CE2                 mov     rdi, r14
.text:0000000000007CE5                 push    0
.text:0000000000007CE7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000007CEF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000007CF4                 mov     rdx, [rsp+108h+s]
.text:0000000000007CF9                 and     r9d, 0FFFFFFFDh
.text:0000000000007CFD                 call    quotearg_buffer_restyled
.text:0000000000007D02                 add     rsp, 20h
.text:0000000000007D06                 mov     r15, rax
.text:0000000000007D09
.text:0000000000007D09 loc_7D09:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000007D09                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000007D09                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000007D11                 xor     rbx, fs:28h
.text:0000000000007D1A                 mov     rax, r15
.text:0000000000007D1D                 jnz     loc_8323
.text:0000000000007D23                 add     rsp, 0B8h
.text:0000000000007D2A                 pop     rbx
.text:0000000000007D2B                 pop     rbp
.text:0000000000007D2C                 pop     r12
.text:0000000000007D2E                 pop     r13
.text:0000000000007D30                 pop     r14
.text:0000000000007D32                 pop     r15
.text:0000000000007D34                 retn
.text:0000000000007D34 ; ---------------------------------------------------------------------------
.text:0000000000007D35                 align 8
.text:0000000000007D38
.text:0000000000007D38 loc_7D38:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000007D38                 mov     rbp, r11
.text:0000000000007D3B                 jmp     loc_7CB9
.text:0000000000007D40 ; ---------------------------------------------------------------------------
.text:0000000000007D40
.text:0000000000007D40 loc_7D40:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000007D40                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000007D40                 cmp     r13, r15
.text:0000000000007D43                 jbe     short loc_7D4A
.text:0000000000007D45                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007D4A
.text:0000000000007D4A loc_7D4A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000007D4A                 lea     rax, [r15+1]
.text:0000000000007D4E                 cmp     r13, rax
.text:0000000000007D51                 jbe     short loc_7D59
.text:0000000000007D53                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000007D59
.text:0000000000007D59 loc_7D59:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000007D59                 lea     rax, [r15+2]
.text:0000000000007D5D                 cmp     r13, rax
.text:0000000000007D60                 jbe     loc_8352
.text:0000000000007D66                 mov     rdx, r13
.text:0000000000007D69                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000007D6F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000007D74                 jmp     loc_7952
.text:0000000000007D79 ; ---------------------------------------------------------------------------
.text:0000000000007D79
.text:0000000000007D79 loc_7D79:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000007D79                 mov     eax, r12d
.text:0000000000007D7C                 mov     ebx, 30h ; '0'
.text:0000000000007D81                 xor     r12d, r12d
.text:0000000000007D84                 jmp     loc_7389
.text:0000000000007D89 ; ---------------------------------------------------------------------------
.text:0000000000007D89
.text:0000000000007D89 loc_7D89:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000007D89                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000007D8F                 jmp     loc_7759
.text:0000000000007D94 ; ---------------------------------------------------------------------------
.text:0000000000007D94
.text:0000000000007D94 loc_7D94:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007D94                                         ; DATA XREF: .rodata:jpt_71C1↓o
.text:0000000000007D94                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000007D96                 jnz     loc_71C3        ; jumptable 00000000000121F1 case 1
.text:0000000000007D9C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007DA1
.text:0000000000007DA1 loc_7DA1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000007DA1                 test    r13, r13
.text:0000000000007DA4                 jnz     loc_833A
.text:0000000000007DAA                 lea     rax, asc_E25D   ; "'"
.text:0000000000007DB1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007DBA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007DBF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007DC4                 xor     r12d, r12d
.text:0000000000007DC7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007DCC                 mov     [rsp+0E8h+n], 1
.text:0000000000007DD5                 mov     [rsp+0E8h+s2], rax
.text:0000000000007DDA                 mov     r15d, 1
.text:0000000000007DE0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007DE8                 jmp     loc_7203
.text:0000000000007DE8 ; ---------------------------------------------------------------------------
.text:0000000000007DED                 align 10h
.text:0000000000007DF0
.text:0000000000007DF0 loc_7DF0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007DF0                                         ; DATA XREF: .rodata:jpt_71C1↓o
.text:0000000000007DF0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000007DF2                 jnz     loc_81ED
.text:0000000000007DF8                 test    r13, r13
.text:0000000000007DFB                 jz      loc_8026
.text:0000000000007E01                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000007E05                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007E0A                 xor     r12d, r12d
.text:0000000000007E0D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007E12                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007E1B
.text:0000000000007E1B loc_7E1B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000007E1B                 lea     rax, unk_E25B
.text:0000000000007E22                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007E27                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007E2C                 mov     [rsp+0E8h+n], 1
.text:0000000000007E35                 mov     r15d, 1
.text:0000000000007E3B                 mov     [rsp+0E8h+s2], rax
.text:0000000000007E40                 jmp     loc_7203
.text:0000000000007E45 ; ---------------------------------------------------------------------------
.text:0000000000007E45
.text:0000000000007E45 loc_7E45:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007E45                                         ; DATA XREF: .rodata:jpt_71C1↓o
.text:0000000000007E45                 lea     rax, unk_E25B   ; jumptable 00000000000121F1 case 6
.text:0000000000007E4C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007E51                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007E56                 xor     r12d, r12d
.text:0000000000007E59                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007E62                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007E67                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007E6C                 mov     [rsp+0E8h+n], 1
.text:0000000000007E75                 xor     r15d, r15d
.text:0000000000007E78                 mov     [rsp+0E8h+s2], rax
.text:0000000000007E7D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000007E85                 jmp     loc_7203
.text:0000000000007E8A ; ---------------------------------------------------------------------------
.text:0000000000007E8A
.text:0000000000007E8A loc_7E8A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007E8A                                         ; DATA XREF: .rodata:jpt_71C1↓o
.text:0000000000007E8A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000007E8F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007E94                 xor     r12d, r12d
.text:0000000000007E97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007EA0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007EA5                 xor     r15d, r15d
.text:0000000000007EA8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007EAD                 mov     [rsp+0E8h+n], 0
.text:0000000000007EB6                 mov     [rsp+0E8h+s2], 0
.text:0000000000007EBF                 jmp     loc_7203
.text:0000000000007EC4 ; ---------------------------------------------------------------------------
.text:0000000000007EC4
.text:0000000000007EC4 loc_7EC4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007EC4                                         ; DATA XREF: .rodata:jpt_71C1↓o
.text:0000000000007EC4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000007EC9                 jz      short loc_7F21
.text:0000000000007ECB                 lea     rsi, asc_E25F   ; "`"
.text:0000000000007ED2                 xor     edi, edi        ; domainname
.text:0000000000007ED4                 mov     edx, 5          ; category
.text:0000000000007ED9                 call    _dcgettext
.text:0000000000007EDE                 mov     rcx, rax
.text:0000000000007EE1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000007EE6                 lea     rax, asc_E25F   ; "`"
.text:0000000000007EED                 cmp     rcx, rax
.text:0000000000007EF0                 jz      loc_828E
.text:0000000000007EF6
.text:0000000000007EF6 loc_7EF6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000007EF6                 lea     rsi, asc_E25D   ; "'"
.text:0000000000007EFD                 xor     edi, edi        ; domainname
.text:0000000000007EFF                 mov     edx, 5          ; category
.text:0000000000007F04                 call    _dcgettext
.text:0000000000007F09                 mov     rcx, rax
.text:0000000000007F0C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000007F11                 lea     rax, asc_E25D   ; "'"
.text:0000000000007F18                 cmp     rcx, rax
.text:0000000000007F1B                 jz      loc_82A4
.text:0000000000007F21
.text:0000000000007F21 loc_7F21:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000007F21                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000007F21                 xor     r15d, r15d
.text:0000000000007F24                 test    ebx, ebx
.text:0000000000007F26                 jz      loc_80ED
.text:0000000000007F2C
.text:0000000000007F2C loc_7F2C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000007F2C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000007F2C                 test    ebx, ebx
.text:0000000000007F2E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000007F33                 setnz   [rsp+0E8h+var_D9]
.text:0000000000007F38                 xor     r12d, r12d
.text:0000000000007F3B                 mov     rdi, rbx        ; s
.text:0000000000007F3E                 call    _strlen
.text:0000000000007F43                 mov     [rsp+0E8h+s2], rbx
.text:0000000000007F48                 mov     [rsp+0E8h+n], rax
.text:0000000000007F4D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007F52                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007F57                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007F60                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007F65                 jmp     loc_7203
.text:0000000000007F6A ; ---------------------------------------------------------------------------
.text:0000000000007F6A
.text:0000000000007F6A loc_7F6A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007F6A                                         ; DATA XREF: .rodata:jpt_71C1↓o
.text:0000000000007F6A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000007F6F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007F74                 xor     r12d, r12d
.text:0000000000007F77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007F80                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007F85                 xor     r15d, r15d
.text:0000000000007F88                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000007F8D                 mov     [rsp+0E8h+n], 0
.text:0000000000007F96                 mov     [rsp+0E8h+s2], 0
.text:0000000000007F9F                 jmp     loc_7203
.text:0000000000007FA4 ; ---------------------------------------------------------------------------
.text:0000000000007FA4
.text:0000000000007FA4 loc_7FA4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007FA4                                         ; DATA XREF: .rodata:jpt_71C1↓o
.text:0000000000007FA4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000007FA9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007FAE                 xor     r12d, r12d
.text:0000000000007FB1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007FBA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007FBF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007FC4                 jmp     loc_71E3
.text:0000000000007FC9 ; ---------------------------------------------------------------------------
.text:0000000000007FC9
.text:0000000000007FC9 loc_7FC9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000007FC9                 cmp     r13, r15
.text:0000000000007FCC                 jbe     short loc_7FD3
.text:0000000000007FCE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000007FD3
.text:0000000000007FD3 loc_7FD3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000007FD3                 lea     rax, [rcx+2]
.text:0000000000007FD7                 cmp     r13, rax
.text:0000000000007FDA                 jbe     short loc_7FE2
.text:0000000000007FDC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000007FE2
.text:0000000000007FE2 loc_7FE2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000007FE2                 mov     eax, r12d
.text:0000000000007FE5                 lea     r15, [rcx+3]
.text:0000000000007FE9                 xor     r12d, r12d
.text:0000000000007FEC                 mov     ebx, 30h ; '0'
.text:0000000000007FF1                 jmp     loc_7358
.text:0000000000007FF1 ; ---------------------------------------------------------------------------
.text:0000000000007FF6                 align 20h
.text:0000000000008000
.text:0000000000008000 loc_8000:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000008000                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000008005                 mov     rbp, r11
.text:0000000000008008                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000800C                 jmp     loc_7CB9
.text:0000000000008011 ; ---------------------------------------------------------------------------
.text:0000000000008011
.text:0000000000008011 loc_8011:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000008011                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000008016                 xor     r12d, r12d
.text:0000000000008019                 jmp     loc_7B20
.text:000000000000801E ; ---------------------------------------------------------------------------
.text:000000000000801E
.text:000000000000801E loc_801E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000801E                 xor     r10d, r10d
.text:0000000000008021                 jmp     loc_7BDD
.text:0000000000008026 ; ---------------------------------------------------------------------------
.text:0000000000008026
.text:0000000000008026 loc_8026:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000008026                 mov     [rsp+0E8h+var_98], 0
.text:000000000000802F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008034                 xor     r12d, r12d
.text:0000000000008037                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000803C                 jmp     loc_7E1B
.text:0000000000008041 ; ---------------------------------------------------------------------------
.text:0000000000008041
.text:0000000000008041 loc_8041:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000008041                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000008046                 mov     rsi, r14
.text:0000000000008049                 mov     rcx, r13
.text:000000000000804C                 mov     rax, rbx
.text:000000000000804F                 mov     rdi, rbx
.text:0000000000008052                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000008058                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000805D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000008065                 cmp     rsi, r11
.text:0000000000008068                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000806E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000008076                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000807B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000008080                 jnb     short loc_80A8
.text:0000000000008082                 cmp     byte ptr [rcx], 0
.text:0000000000008085                 jnz     short loc_8097
.text:0000000000008087                 jmp     short loc_80A8
.text:0000000000008087 ; ---------------------------------------------------------------------------
.text:0000000000008089                 align 10h
.text:0000000000008090
.text:0000000000008090 loc_8090:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000008090                 cmp     byte ptr [r9+rax], 0
.text:0000000000008095                 jz      short loc_80A5
.text:0000000000008097
.text:0000000000008097 loc_8097:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000008097                 add     rax, 1
.text:000000000000809B                 lea     rdx, [rbp+rax+0]
.text:00000000000080A0                 cmp     r11, rdx
.text:00000000000080A3                 ja      short loc_8090
.text:00000000000080A5
.text:00000000000080A5 loc_80A5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000080A5                 mov     rdi, rax
.text:00000000000080A8
.text:00000000000080A8 loc_80A8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000080A8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000080A8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000080AD                 xor     r12d, r12d
.text:00000000000080B0                 jmp     loc_7B16
.text:00000000000080B5 ; ---------------------------------------------------------------------------
.text:00000000000080B5
.text:00000000000080B5 loc_80B5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000080B5                 mov     rdi, rbx
.text:00000000000080B8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000080BE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000080C3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000080C9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000080D1                 xor     r12d, r12d
.text:00000000000080D4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000080D9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000080DE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000080E3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000080E8                 jmp     loc_7B16
.text:00000000000080ED ; ---------------------------------------------------------------------------
.text:00000000000080ED
.text:00000000000080ED loc_80ED:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000080ED                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000080F2                 movzx   eax, byte ptr [rdx]
.text:00000000000080F5                 test    al, al
.text:00000000000080F7                 jz      loc_7F2C
.text:00000000000080FD                 nop     dword ptr [rax]
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000008100                 cmp     r13, r15
.text:0000000000008103                 jbe     short loc_8109
.text:0000000000008105                 mov     [r14+r15], al
.text:0000000000008109
.text:0000000000008109 loc_8109:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000008109                 add     r15, 1
.text:000000000000810D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000008112                 test    al, al
.text:0000000000008114                 jnz     short loc_8100
.text:0000000000008116                 jmp     loc_7F2C
.text:000000000000811B ; ---------------------------------------------------------------------------
.text:000000000000811B
.text:000000000000811B loc_811B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000811B                 mov     eax, edx
.text:000000000000811D                 jmp     loc_7677
.text:0000000000008122 ; ---------------------------------------------------------------------------
.text:0000000000008122
.text:0000000000008122 loc_8122:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000008122                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000008126                 cmp     bl, 3Eh ; '>'
.text:0000000000008129                 ja      loc_79A0
.text:000000000000812F                 mov     rax, 7000A38200000000h
.text:0000000000008139                 bt      rax, rbx
.text:000000000000813D                 jnb     loc_79A0
.text:0000000000008143                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008148                 jnz     loc_8332
.text:000000000000814E                 cmp     r13, r15
.text:0000000000008151                 jbe     short loc_8158
.text:0000000000008153                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000008158
.text:0000000000008158 loc_8158:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000008158                 lea     rax, [r15+1]
.text:000000000000815C                 cmp     r13, rax
.text:000000000000815F                 jbe     short loc_8167
.text:0000000000008161                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000008167
.text:0000000000008167 loc_8167:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000008167                 lea     rax, [r15+2]
.text:000000000000816B                 cmp     r13, rax
.text:000000000000816E                 jbe     short loc_8176
.text:0000000000008170                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000008176
.text:0000000000008176 loc_8176:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000008176                 lea     rax, [r15+3]
.text:000000000000817A                 cmp     r13, rax
.text:000000000000817D                 jbe     short loc_8185
.text:000000000000817F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000008185
.text:0000000000008185 loc_8185:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000008185                 add     r15, 4
.text:0000000000008189                 xor     edx, edx
.text:000000000000818B                 xor     r12d, r12d
.text:000000000000818E                 xor     eax, eax
.text:0000000000008190                 mov     rbp, rcx
.text:0000000000008193                 jmp     loc_7358
.text:0000000000008198 ; ---------------------------------------------------------------------------
.text:0000000000008198
.text:0000000000008198 loc_8198:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008198                                         ; DATA XREF: .rodata:jpt_71C1↓o
.text:0000000000008198                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000819A                 jz      loc_8328
.text:00000000000081A0                 lea     rax, asc_E25D   ; "'"
.text:00000000000081A7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000081AC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000081B1                 xor     r12d, r12d
.text:00000000000081B4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000081BD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000081C2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000081C7                 mov     [rsp+0E8h+n], 1
.text:00000000000081D0                 xor     r15d, r15d
.text:00000000000081D3                 mov     [rsp+0E8h+s2], rax
.text:00000000000081D8                 jmp     loc_7203
.text:00000000000081D8 ; ---------------------------------------------------------------------------
.text:00000000000081DD                 align 20h
.text:00000000000081E0
.text:00000000000081E0 loc_81E0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000081E0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000081E0                 mov     rbp, r11
.text:00000000000081E3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000081E8                 jmp     loc_7CB9
.text:00000000000081ED ; ---------------------------------------------------------------------------
.text:00000000000081ED
.text:00000000000081ED loc_81ED:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000081ED                 lea     rax, unk_E25B
.text:00000000000081F4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000081F9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000081FE                 xor     r12d, r12d
.text:0000000000008201                 mov     [rsp+0E8h+var_98], 0
.text:000000000000820A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000820F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000008214                 mov     [rsp+0E8h+n], 1
.text:000000000000821D                 xor     r15d, r15d
.text:0000000000008220                 mov     [rsp+0E8h+s2], rax
.text:0000000000008225                 jmp     loc_7203
.text:000000000000822A ; ---------------------------------------------------------------------------
.text:000000000000822A
.text:000000000000822A loc_822A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000822A                 mov     eax, edx
.text:000000000000822C
.text:000000000000822C loc_822C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000822C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000822C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000008231                 test    rbx, rbx
.text:0000000000008234                 jz      short loc_8262
.text:0000000000008236                 test    al, al
.text:0000000000008238                 jz      short loc_8262
.text:000000000000823A                 movzx   ecx, byte ptr [rbx]
.text:000000000000823D                 mov     rax, rbx
.text:0000000000008240                 test    cl, cl
.text:0000000000008242                 jz      short loc_8262
.text:0000000000008244                 mov     rdx, r15
.text:0000000000008247                 sub     rax, r15
.text:000000000000824A
.text:000000000000824A loc_824A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000824A                 cmp     r13, rdx
.text:000000000000824D                 jbe     short loc_8253
.text:000000000000824F                 mov     [r14+rdx], cl
.text:0000000000008253
.text:0000000000008253 loc_8253:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000008253                 add     rdx, 1
.text:0000000000008257                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000825B                 test    cl, cl
.text:000000000000825D                 jnz     short loc_824A
.text:000000000000825F                 mov     r15, rdx
.text:0000000000008262
.text:0000000000008262 loc_8262:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000008262                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000008262                 cmp     r13, r15
.text:0000000000008265                 jbe     loc_7D09
.text:000000000000826B                 mov     byte ptr [r14+r15], 0
.text:0000000000008270                 jmp     loc_7D09
.text:0000000000008275 ; ---------------------------------------------------------------------------
.text:0000000000008275
.text:0000000000008275 loc_8275:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000008275                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000827A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000827F                 mov     rbp, r11
.text:0000000000008282                 setz    al
.text:0000000000008285                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000008289                 jmp     loc_7CB9
.text:000000000000828E ; ---------------------------------------------------------------------------
.text:000000000000828E
.text:000000000000828E loc_828E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000828E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000008292                 mov     rdi, rcx
.text:0000000000008295                 call    gettext_quote
.text:000000000000829A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000829F                 jmp     loc_7EF6
.text:00000000000082A4 ; ---------------------------------------------------------------------------
.text:00000000000082A4
.text:00000000000082A4 loc_82A4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000082A4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000082A8                 mov     rdi, rcx
.text:00000000000082AB                 call    gettext_quote
.text:00000000000082B0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000082B5                 jmp     loc_7F21
.text:00000000000082BA ; ---------------------------------------------------------------------------
.text:00000000000082BA
.text:00000000000082BA loc_82BA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000082BA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000082BF                 mov     rbp, r11
.text:00000000000082C2                 mov     eax, edx
.text:00000000000082C4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000082C8                 jmp     loc_7CB9
.text:00000000000082CD ; ---------------------------------------------------------------------------
.text:00000000000082CD
.text:00000000000082CD loc_82CD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000082CD                 sub     rsp, 8
.text:00000000000082D1                 mov     r8d, 5
.text:00000000000082D7                 mov     rcx, r11
.text:00000000000082DA                 push    [rsp+0F0h+var_88]
.text:00000000000082DE                 push    [rsp+0F8h+var_80]
.text:00000000000082E2                 mov     rdi, r14
.text:00000000000082E5                 push    [rsp+100h+var_C8]
.text:00000000000082E9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000082F1                 mov     rdx, [rsp+108h+s]
.text:00000000000082F6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000082FB                 call    quotearg_buffer_restyled
.text:0000000000008300                 add     rsp, 20h
.text:0000000000008304                 mov     r15, rax
.text:0000000000008307                 jmp     loc_7D09
.text:000000000000830C ; ---------------------------------------------------------------------------
.text:000000000000830C
.text:000000000000830C loc_830C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000830C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000008311                 jmp     loc_822C
.text:0000000000008316 ; ---------------------------------------------------------------------------
.text:0000000000008316
.text:0000000000008316 loc_8316:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000008316                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000831E                 jmp     loc_7CB9
.text:0000000000008323 ; ---------------------------------------------------------------------------
.text:0000000000008323
.text:0000000000008323 loc_8323:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000008323                 call    ___stack_chk_fail
.text:0000000000008328 ; ---------------------------------------------------------------------------
.text:0000000000008328
.text:0000000000008328 loc_8328:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000008328                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000832D                 jmp     loc_7DA1
.text:0000000000008332 ; ---------------------------------------------------------------------------
.text:0000000000008332
.text:0000000000008332 loc_8332:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000008332                 mov     rbp, r11
.text:0000000000008335                 jmp     loc_7CD0
.text:000000000000833A ; ---------------------------------------------------------------------------
.text:000000000000833A
.text:000000000000833A loc_833A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000833A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000833F                 xor     eax, eax
.text:0000000000008341                 xor     r12d, r12d
.text:0000000000008344                 mov     [rsp+0E8h+var_98], 0
.text:000000000000834D                 jmp     loc_78F4
.text:0000000000008352 ; ---------------------------------------------------------------------------
.text:0000000000008352
.text:0000000000008352 loc_8352:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000008352                 mov     rdx, r13
.text:0000000000008355                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000835A                 jmp     loc_7952
.text:000000000000835F ; ---------------------------------------------------------------------------
.text:000000000000835F
.text:000000000000835F def_71C1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000835F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000835F ; } // starts at 7130
.text:000000000000835F quotearg_buffer_restyled endp
.text:000000000000835F
.text:000000000000835F ; ---------------------------------------------------------------------------
.text:0000000000008364                 align 10h
.text:0000000000008370
.text:0000000000008370 ; =============== S U B R O U T I N E =======================================
.text:0000000000008370
.text:0000000000008370
.text:0000000000008370 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000008370                                         ; quotearg_n_mem+7↓j ...
.text:0000000000008370
.text:0000000000008370 var_50          = qword ptr -50h
.text:0000000000008370 var_48          = qword ptr -48h
.text:0000000000008370 var_40          = dword ptr -40h
.text:0000000000008370 var_3C          = dword ptr -3Ch
.text:0000000000008370
.text:0000000000008370 ; __unwind {
.text:0000000000008370                 push    r15
.text:0000000000008372                 push    r14
.text:0000000000008374                 movsxd  r15, edi
.text:0000000000008377                 push    r13
.text:0000000000008379                 push    r12
.text:000000000000837B                 mov     r14, rdx
.text:000000000000837E                 push    rbp
.text:000000000000837F                 push    rbx
.text:0000000000008380                 mov     rbp, rcx
.text:0000000000008383                 sub     rsp, 28h
.text:0000000000008387                 mov     [rsp+58h+var_50], rsi
.text:000000000000838C                 call    ___errno_location
.text:0000000000008391                 mov     r13, rax
.text:0000000000008394                 mov     eax, [rax]
.text:0000000000008396                 test    r15d, r15d
.text:0000000000008399                 mov     rbx, cs:slotvec
.text:00000000000083A0                 mov     [rsp+58h+var_40], eax
.text:00000000000083A4                 js      loc_8511
.text:00000000000083AA                 cmp     cs:nslots, r15d
.text:00000000000083B1                 jg      short loc_8415
.text:00000000000083B3                 cmp     r15d, 7FFFFFFFh
.text:00000000000083BA                 jz      loc_8516
.text:00000000000083C0                 lea     r12d, [r15+1]
.text:00000000000083C4                 lea     rax, slotvec0
.text:00000000000083CB                 movsxd  rsi, r12d
.text:00000000000083CE                 shl     rsi, 4
.text:00000000000083D2                 cmp     rbx, rax
.text:00000000000083D5                 jz      loc_84F0
.text:00000000000083DB                 mov     rdi, rbx
.text:00000000000083DE                 call    xrealloc
.text:00000000000083E3                 mov     rbx, rax
.text:00000000000083E6                 mov     cs:slotvec, rax
.text:00000000000083ED
.text:00000000000083ED loc_83ED:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000083ED                 movsxd  rdi, cs:nslots
.text:00000000000083F4                 mov     edx, r12d
.text:00000000000083F7                 xor     esi, esi        ; c
.text:00000000000083F9                 sub     edx, edi
.text:00000000000083FB                 shl     rdi, 4
.text:00000000000083FF                 movsxd  rdx, edx
.text:0000000000008402                 add     rdi, rbx        ; s
.text:0000000000008405                 shl     rdx, 4          ; n
.text:0000000000008409                 call    _memset
.text:000000000000840E                 mov     cs:nslots, r12d
.text:0000000000008415
.text:0000000000008415 loc_8415:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000008415                 mov     eax, [rbp+4]
.text:0000000000008418                 shl     r15, 4
.text:000000000000841C                 sub     rsp, 8
.text:0000000000008420                 add     rbx, r15
.text:0000000000008423                 lea     r15, [rbp+8]
.text:0000000000008427                 mov     r8d, [rbp+0]
.text:000000000000842B                 mov     r11, [rbx]
.text:000000000000842E                 mov     r12, [rbx+8]
.text:0000000000008432                 mov     rcx, r14
.text:0000000000008435                 or      eax, 1
.text:0000000000008438                 mov     [rsp+60h+var_3C], eax
.text:000000000000843C                 push    qword ptr [rbp+30h]
.text:000000000000843F                 mov     r9d, eax
.text:0000000000008442                 push    qword ptr [rbp+28h]
.text:0000000000008445                 push    r15
.text:0000000000008447                 mov     rsi, r11
.text:000000000000844A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000844F                 mov     rdi, r12
.text:0000000000008452                 mov     [rsp+78h+var_48], r11
.text:0000000000008457                 call    quotearg_buffer_restyled
.text:000000000000845C                 add     rsp, 20h
.text:0000000000008460                 mov     r11, [rsp+58h+var_48]
.text:0000000000008465                 cmp     r11, rax
.text:0000000000008468                 ja      short loc_84D1
.text:000000000000846A                 lea     rsi, [rax+1]
.text:000000000000846E                 lea     rax, slot0
.text:0000000000008475                 cmp     r12, rax
.text:0000000000008478                 mov     [rbx], rsi
.text:000000000000847B                 jz      short loc_848F
.text:000000000000847D                 mov     rdi, r12        ; ptr
.text:0000000000008480                 mov     [rsp+58h+var_48], rsi
.text:0000000000008485                 call    _free
.text:000000000000848A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000848F
.text:000000000000848F loc_848F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000848F                 mov     rdi, rsi
.text:0000000000008492                 mov     [rsp+58h+var_48], rsi
.text:0000000000008497                 call    xmalloc
.text:000000000000849C                 sub     rsp, 8
.text:00000000000084A0                 mov     [rbx+8], rax
.text:00000000000084A4                 mov     r8d, [rbp+0]
.text:00000000000084A8                 push    qword ptr [rbp+30h]
.text:00000000000084AB                 push    qword ptr [rbp+28h]
.text:00000000000084AE                 mov     rcx, r14
.text:00000000000084B1                 push    r15
.text:00000000000084B3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000084B8                 mov     rdi, rax
.text:00000000000084BB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000084C0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000084C5                 mov     r12, rax
.text:00000000000084C8                 call    quotearg_buffer_restyled
.text:00000000000084CD                 add     rsp, 20h
.text:00000000000084D1
.text:00000000000084D1 loc_84D1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000084D1                 mov     eax, [rsp+58h+var_40]
.text:00000000000084D5                 mov     [r13+0], eax
.text:00000000000084D9                 add     rsp, 28h
.text:00000000000084DD                 mov     rax, r12
.text:00000000000084E0                 pop     rbx
.text:00000000000084E1                 pop     rbp
.text:00000000000084E2                 pop     r12
.text:00000000000084E4                 pop     r13
.text:00000000000084E6                 pop     r14
.text:00000000000084E8                 pop     r15
.text:00000000000084EA                 retn
.text:00000000000084EA ; ---------------------------------------------------------------------------
.text:00000000000084EB                 align 10h
.text:00000000000084F0
.text:00000000000084F0 loc_84F0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000084F0                 xor     edi, edi
.text:00000000000084F2                 call    xrealloc
.text:00000000000084F7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000084FF                 mov     rbx, rax
.text:0000000000008502                 mov     cs:slotvec, rax
.text:0000000000008509                 movups  xmmword ptr [rax], xmm0
.text:000000000000850C                 jmp     loc_83ED
.text:0000000000008511 ; ---------------------------------------------------------------------------
.text:0000000000008511
.text:0000000000008511 loc_8511:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000008511                 call    _abort
.text:0000000000008516 ; ---------------------------------------------------------------------------
.text:0000000000008516
.text:0000000000008516 loc_8516:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000008516                 call    xalloc_die
.text:0000000000008516 ; } // starts at 8370
.text:0000000000008516 quotearg_n_options endp
.text:0000000000008516
.text:0000000000008516 ; ---------------------------------------------------------------------------
.text:000000000000851B                 align 20h
.text:0000000000008520
.text:0000000000008520 ; =============== S U B R O U T I N E =======================================
.text:0000000000008520
.text:0000000000008520 ; Attributes: info_from_lumina
.text:0000000000008520
.text:0000000000008520 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000008520                 public clone_quoting_options
.text:0000000000008520 clone_quoting_options proc near
.text:0000000000008520 ; __unwind {
.text:0000000000008520                 push    r12
.text:0000000000008522                 push    rbp
.text:0000000000008523                 push    rbx
.text:0000000000008524                 mov     rbx, rdi
.text:0000000000008527                 call    ___errno_location
.text:000000000000852C                 mov     r12d, [rax]
.text:000000000000852F                 mov     rbp, rax
.text:0000000000008532                 lea     rax, default_quoting_options
.text:0000000000008539                 test    rbx, rbx
.text:000000000000853C                 mov     esi, 38h ; '8'  ; n
.text:0000000000008541                 cmovz   rbx, rax
.text:0000000000008545                 mov     rdi, rbx        ; src
.text:0000000000008548                 call    xmemdup
.text:000000000000854D                 mov     [rbp+0], r12d
.text:0000000000008551                 pop     rbx
.text:0000000000008552                 pop     rbp
.text:0000000000008553                 pop     r12
.text:0000000000008555                 retn
.text:0000000000008555 ; } // starts at 8520
.text:0000000000008555 clone_quoting_options endp
.text:0000000000008555
.text:0000000000008555 ; ---------------------------------------------------------------------------
.text:0000000000008556                 align 20h
.text:0000000000008560
.text:0000000000008560 ; =============== S U B R O U T I N E =======================================
.text:0000000000008560
.text:0000000000008560
.text:0000000000008560                 public get_quoting_style
.text:0000000000008560 get_quoting_style proc near
.text:0000000000008560 ; __unwind {
.text:0000000000008560                 lea     rax, default_quoting_options
.text:0000000000008567                 test    rdi, rdi
.text:000000000000856A                 cmovz   rdi, rax
.text:000000000000856E                 mov     eax, [rdi]
.text:0000000000008570                 retn
.text:0000000000008570 ; } // starts at 8560
.text:0000000000008570 get_quoting_style endp
.text:0000000000008570
.text:0000000000008570 ; ---------------------------------------------------------------------------
.text:0000000000008571                 align 20h
.text:0000000000008580
.text:0000000000008580 ; =============== S U B R O U T I N E =======================================
.text:0000000000008580
.text:0000000000008580
.text:0000000000008580                 public set_quoting_style
.text:0000000000008580 set_quoting_style proc near
.text:0000000000008580 ; __unwind {
.text:0000000000008580                 lea     rax, default_quoting_options
.text:0000000000008587                 test    rdi, rdi
.text:000000000000858A                 cmovz   rdi, rax
.text:000000000000858E                 mov     [rdi], esi
.text:0000000000008590                 retn
.text:0000000000008590 ; } // starts at 8580
.text:0000000000008590 set_quoting_style endp
.text:0000000000008590
.text:0000000000008590 ; ---------------------------------------------------------------------------
.text:0000000000008591                 align 20h
.text:00000000000085A0
.text:00000000000085A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000085A0
.text:00000000000085A0 ; Attributes: info_from_lumina
.text:00000000000085A0
.text:00000000000085A0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000085A0                 public set_char_quoting
.text:00000000000085A0 set_char_quoting proc near
.text:00000000000085A0 ; __unwind {
.text:00000000000085A0                 lea     rax, default_quoting_options
.text:00000000000085A7                 test    rdi, rdi
.text:00000000000085AA                 mov     ecx, esi
.text:00000000000085AC                 cmovz   rdi, rax
.text:00000000000085B0                 mov     eax, esi
.text:00000000000085B2                 and     ecx, 1Fh
.text:00000000000085B5                 shr     al, 5
.text:00000000000085B8                 movzx   eax, al
.text:00000000000085BB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000085C0                 mov     esi, [rdi]
.text:00000000000085C2                 mov     eax, esi
.text:00000000000085C4                 shr     eax, cl
.text:00000000000085C6                 xor     edx, eax
.text:00000000000085C8                 and     eax, 1
.text:00000000000085CB                 and     edx, 1
.text:00000000000085CE                 shl     edx, cl
.text:00000000000085D0                 xor     edx, esi
.text:00000000000085D2                 mov     [rdi], edx
.text:00000000000085D4                 retn
.text:00000000000085D4 ; } // starts at 85A0
.text:00000000000085D4 set_char_quoting endp
.text:00000000000085D4
.text:00000000000085D4 ; ---------------------------------------------------------------------------
.text:00000000000085D5                 align 20h
.text:00000000000085E0
.text:00000000000085E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000085E0
.text:00000000000085E0
.text:00000000000085E0                 public set_quoting_flags
.text:00000000000085E0 set_quoting_flags proc near
.text:00000000000085E0 ; __unwind {
.text:00000000000085E0                 lea     rax, default_quoting_options
.text:00000000000085E7                 test    rdi, rdi
.text:00000000000085EA                 cmovz   rdi, rax
.text:00000000000085EE                 mov     eax, [rdi+4]
.text:00000000000085F1                 mov     [rdi+4], esi
.text:00000000000085F4                 retn
.text:00000000000085F4 ; } // starts at 85E0
.text:00000000000085F4 set_quoting_flags endp
.text:00000000000085F4
.text:00000000000085F4 ; ---------------------------------------------------------------------------
.text:00000000000085F5                 align 20h
.text:0000000000008600
.text:0000000000008600 ; =============== S U B R O U T I N E =======================================
.text:0000000000008600
.text:0000000000008600 ; Attributes: info_from_lumina
.text:0000000000008600
.text:0000000000008600 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000008600                 public set_custom_quoting
.text:0000000000008600 set_custom_quoting proc near
.text:0000000000008600 ; __unwind {
.text:0000000000008600                 lea     rax, default_quoting_options
.text:0000000000008607                 test    rdi, rdi
.text:000000000000860A                 cmovz   rdi, rax
.text:000000000000860E                 test    rsi, rsi
.text:0000000000008611                 mov     dword ptr [rdi], 0Ah
.text:0000000000008617                 jz      short loc_8627
.text:0000000000008619                 test    rdx, rdx
.text:000000000000861C                 jz      short loc_8627
.text:000000000000861E                 mov     [rdi+28h], rsi
.text:0000000000008622                 mov     [rdi+30h], rdx
.text:0000000000008626                 retn
.text:0000000000008627 ; ---------------------------------------------------------------------------
.text:0000000000008627
.text:0000000000008627 loc_8627:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000008627                                         ; set_custom_quoting+1C↑j
.text:0000000000008627                 sub     rsp, 8
.text:000000000000862B                 call    _abort
.text:000000000000862B ; } // starts at 8600
.text:000000000000862B set_custom_quoting endp
.text:000000000000862B
.text:0000000000008630
.text:0000000000008630 ; =============== S U B R O U T I N E =======================================
.text:0000000000008630
.text:0000000000008630 ; Attributes: info_from_lumina
.text:0000000000008630
.text:0000000000008630 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000008630                 public quotearg_buffer
.text:0000000000008630 quotearg_buffer proc near
.text:0000000000008630
.text:0000000000008630 var_40          = qword ptr -40h
.text:0000000000008630
.text:0000000000008630 ; __unwind {
.text:0000000000008630                 push    r15
.text:0000000000008632                 push    r14
.text:0000000000008634                 lea     rax, default_quoting_options
.text:000000000000863B                 push    r13
.text:000000000000863D                 push    r12
.text:000000000000863F                 mov     r13, rdi
.text:0000000000008642                 push    rbp
.text:0000000000008643                 push    rbx
.text:0000000000008644                 mov     rbx, r8
.text:0000000000008647                 mov     r14, rsi
.text:000000000000864A                 mov     r15, rdx
.text:000000000000864D                 sub     rsp, 18h
.text:0000000000008651                 test    r8, r8
.text:0000000000008654                 cmovz   rbx, rax
.text:0000000000008658                 mov     [rsp+48h+var_40], rcx
.text:000000000000865D                 call    ___errno_location
.text:0000000000008662                 mov     r12d, [rax]
.text:0000000000008665                 mov     rbp, rax
.text:0000000000008668                 lea     rax, [rbx+8]
.text:000000000000866C                 sub     rsp, 8
.text:0000000000008670                 mov     r9d, [rbx+4]
.text:0000000000008674                 push    qword ptr [rbx+30h]
.text:0000000000008677                 mov     r8d, [rbx]
.text:000000000000867A                 push    qword ptr [rbx+28h]
.text:000000000000867D                 mov     rdx, r15
.text:0000000000008680                 push    rax
.text:0000000000008681                 mov     rcx, [rsp+68h+var_40]
.text:0000000000008686                 mov     rsi, r14
.text:0000000000008689                 mov     rdi, r13
.text:000000000000868C                 call    quotearg_buffer_restyled
.text:0000000000008691                 mov     [rbp+0], r12d
.text:0000000000008695                 add     rsp, 38h
.text:0000000000008699                 pop     rbx
.text:000000000000869A                 pop     rbp
.text:000000000000869B                 pop     r12
.text:000000000000869D                 pop     r13
.text:000000000000869F                 pop     r14
.text:00000000000086A1                 pop     r15
.text:00000000000086A3                 retn
.text:00000000000086A3 ; } // starts at 8630
.text:00000000000086A3 quotearg_buffer endp
.text:00000000000086A3
.text:00000000000086A3 ; ---------------------------------------------------------------------------
.text:00000000000086A4                 align 10h
.text:00000000000086B0
.text:00000000000086B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086B0
.text:00000000000086B0 ; Attributes: info_from_lumina
.text:00000000000086B0
.text:00000000000086B0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000086B0                 public quotearg_alloc_mem
.text:00000000000086B0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000086B0
.text:00000000000086B0 var_5C          = dword ptr -5Ch
.text:00000000000086B0 var_58          = qword ptr -58h
.text:00000000000086B0 var_50          = qword ptr -50h
.text:00000000000086B0 var_48          = qword ptr -48h
.text:00000000000086B0 var_40          = qword ptr -40h
.text:00000000000086B0
.text:00000000000086B0 ; __unwind {
.text:00000000000086B0                 push    r15
.text:00000000000086B2                 push    r14
.text:00000000000086B4                 lea     rax, default_quoting_options
.text:00000000000086BB                 push    r13
.text:00000000000086BD                 push    r12
.text:00000000000086BF                 mov     r12, rdx
.text:00000000000086C2                 push    rbp
.text:00000000000086C3                 push    rbx
.text:00000000000086C4                 mov     rbx, rcx
.text:00000000000086C7                 mov     r14, rdi
.text:00000000000086CA                 mov     r15, rsi
.text:00000000000086CD                 sub     rsp, 38h
.text:00000000000086D1                 test    rcx, rcx
.text:00000000000086D4                 cmovz   rbx, rax
.text:00000000000086D8                 xor     ebp, ebp
.text:00000000000086DA                 call    ___errno_location
.text:00000000000086DF                 test    r12, r12
.text:00000000000086E2                 mov     r13, rax
.text:00000000000086E5                 mov     eax, [rax]
.text:00000000000086E7                 setz    bpl
.text:00000000000086EB                 or      ebp, [rbx+4]
.text:00000000000086EE                 lea     r10, [rbx+8]
.text:00000000000086F2                 sub     rsp, 8
.text:00000000000086F6                 mov     r8d, [rbx]
.text:00000000000086F9                 mov     rcx, r15
.text:00000000000086FC                 mov     [rsp+70h+var_5C], eax
.text:0000000000008700                 push    qword ptr [rbx+30h]
.text:0000000000008703                 mov     rdx, r14
.text:0000000000008706                 push    qword ptr [rbx+28h]
.text:0000000000008709                 push    r10
.text:000000000000870B                 xor     esi, esi
.text:000000000000870D                 mov     r9d, ebp
.text:0000000000008710                 xor     edi, edi
.text:0000000000008712                 mov     [rsp+88h+var_48], r10
.text:0000000000008717                 call    quotearg_buffer_restyled
.text:000000000000871C                 lea     rsi, [rax+1]
.text:0000000000008720                 mov     [rsp+88h+var_40], rax
.text:0000000000008725                 add     rsp, 20h
.text:0000000000008729                 mov     rdi, rsi
.text:000000000000872C                 mov     [rsp+68h+var_50], rsi
.text:0000000000008731                 call    xmalloc
.text:0000000000008736                 mov     [rsp+68h+var_58], rax
.text:000000000000873B                 sub     rsp, 8
.text:000000000000873F                 push    qword ptr [rbx+30h]
.text:0000000000008742                 push    qword ptr [rbx+28h]
.text:0000000000008745                 mov     r10, [rsp+80h+var_48]
.text:000000000000874A                 mov     r9d, ebp
.text:000000000000874D                 mov     r8d, [rbx]
.text:0000000000008750                 mov     rcx, r15
.text:0000000000008753                 mov     rdx, r14
.text:0000000000008756                 mov     rdi, rax
.text:0000000000008759                 push    r10
.text:000000000000875B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000008760                 call    quotearg_buffer_restyled
.text:0000000000008765                 mov     eax, [rsp+88h+var_5C]
.text:0000000000008769                 add     rsp, 20h
.text:000000000000876D                 test    r12, r12
.text:0000000000008770                 mov     [r13+0], eax
.text:0000000000008774                 jz      short loc_877F
.text:0000000000008776                 mov     r11, [rsp+68h+var_40]
.text:000000000000877B                 mov     [r12], r11
.text:000000000000877F
.text:000000000000877F loc_877F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000877F                 mov     rax, [rsp+68h+var_58]
.text:0000000000008784                 add     rsp, 38h
.text:0000000000008788                 pop     rbx
.text:0000000000008789                 pop     rbp
.text:000000000000878A                 pop     r12
.text:000000000000878C                 pop     r13
.text:000000000000878E                 pop     r14
.text:0000000000008790                 pop     r15
.text:0000000000008792                 retn
.text:0000000000008792 ; } // starts at 86B0
.text:0000000000008792 quotearg_alloc_mem endp
.text:0000000000008792
.text:0000000000008792 ; ---------------------------------------------------------------------------
.text:0000000000008793                 align 20h
.text:00000000000087A0
.text:00000000000087A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000087A0
.text:00000000000087A0
.text:00000000000087A0                 public quotearg_alloc
.text:00000000000087A0 quotearg_alloc  proc near
.text:00000000000087A0 ; __unwind {
.text:00000000000087A0                 mov     rcx, rdx
.text:00000000000087A3                 xor     edx, edx
.text:00000000000087A5                 jmp     quotearg_alloc_mem
.text:00000000000087A5 ; } // starts at 87A0
.text:00000000000087A5 quotearg_alloc  endp
.text:00000000000087A5
.text:00000000000087A5 ; ---------------------------------------------------------------------------
.text:00000000000087AA                 align 10h
.text:00000000000087B0
.text:00000000000087B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000087B0
.text:00000000000087B0 ; Attributes: info_from_lumina
.text:00000000000087B0
.text:00000000000087B0 ; void __cdecl quotearg_free()
.text:00000000000087B0                 public quotearg_free
.text:00000000000087B0 quotearg_free   proc near
.text:00000000000087B0 ; __unwind {
.text:00000000000087B0                 mov     eax, cs:nslots
.text:00000000000087B6                 push    r12
.text:00000000000087B8                 mov     r12, cs:slotvec
.text:00000000000087BF                 push    rbp
.text:00000000000087C0                 push    rbx
.text:00000000000087C1                 cmp     eax, 1
.text:00000000000087C4                 jle     short loc_87F1
.text:00000000000087C6                 sub     eax, 2
.text:00000000000087C9                 lea     rbx, [r12+18h]
.text:00000000000087CE                 shl     rax, 4
.text:00000000000087D2                 lea     rbp, [r12+rax+28h]
.text:00000000000087D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000087E0
.text:00000000000087E0 loc_87E0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000087E0                 mov     rdi, [rbx]      ; ptr
.text:00000000000087E3                 add     rbx, 10h
.text:00000000000087E7                 call    _free
.text:00000000000087EC                 cmp     rbx, rbp
.text:00000000000087EF                 jnz     short loc_87E0
.text:00000000000087F1
.text:00000000000087F1 loc_87F1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000087F1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000087F6                 lea     rbx, slot0
.text:00000000000087FD                 cmp     rdi, rbx
.text:0000000000008800                 jz      short loc_8819
.text:0000000000008802                 call    _free
.text:0000000000008807                 mov     cs:slotvec0, 100h
.text:0000000000008812                 mov     cs:off_211098, rbx
.text:0000000000008819
.text:0000000000008819 loc_8819:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000008819                 lea     rbx, slotvec0
.text:0000000000008820                 cmp     r12, rbx
.text:0000000000008823                 jz      short loc_8834
.text:0000000000008825                 mov     rdi, r12        ; ptr
.text:0000000000008828                 call    _free
.text:000000000000882D                 mov     cs:slotvec, rbx
.text:0000000000008834
.text:0000000000008834 loc_8834:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000008834                 pop     rbx
.text:0000000000008835                 mov     cs:nslots, 1
.text:000000000000883F                 pop     rbp
.text:0000000000008840                 pop     r12
.text:0000000000008842                 retn
.text:0000000000008842 ; } // starts at 87B0
.text:0000000000008842 quotearg_free   endp
.text:0000000000008842
.text:0000000000008842 ; ---------------------------------------------------------------------------
.text:0000000000008843                 align 10h
.text:0000000000008850
.text:0000000000008850 ; =============== S U B R O U T I N E =======================================
.text:0000000000008850
.text:0000000000008850
.text:0000000000008850                 public quotearg_n
.text:0000000000008850 quotearg_n      proc near
.text:0000000000008850 ; __unwind {
.text:0000000000008850                 lea     rcx, default_quoting_options
.text:0000000000008857                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000885E                 jmp     quotearg_n_options
.text:000000000000885E ; } // starts at 8850
.text:000000000000885E quotearg_n      endp
.text:000000000000885E
.text:000000000000885E ; ---------------------------------------------------------------------------
.text:0000000000008863                 align 10h
.text:0000000000008870
.text:0000000000008870 ; =============== S U B R O U T I N E =======================================
.text:0000000000008870
.text:0000000000008870
.text:0000000000008870                 public quotearg_n_mem
.text:0000000000008870 quotearg_n_mem  proc near
.text:0000000000008870 ; __unwind {
.text:0000000000008870                 lea     rcx, default_quoting_options
.text:0000000000008877                 jmp     quotearg_n_options
.text:0000000000008877 ; } // starts at 8870
.text:0000000000008877 quotearg_n_mem  endp
.text:0000000000008877
.text:0000000000008877 ; ---------------------------------------------------------------------------
.text:000000000000887C                 align 20h
.text:0000000000008880
.text:0000000000008880 ; =============== S U B R O U T I N E =======================================
.text:0000000000008880
.text:0000000000008880
.text:0000000000008880                 public quotearg
.text:0000000000008880 quotearg        proc near
.text:0000000000008880 ; __unwind {
.text:0000000000008880                 lea     rcx, default_quoting_options
.text:0000000000008887                 mov     rsi, rdi
.text:000000000000888A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008891                 xor     edi, edi
.text:0000000000008893                 jmp     quotearg_n_options
.text:0000000000008893 ; } // starts at 8880
.text:0000000000008893 quotearg        endp
.text:0000000000008893
.text:0000000000008893 ; ---------------------------------------------------------------------------
.text:0000000000008898                 align 20h
.text:00000000000088A0
.text:00000000000088A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088A0
.text:00000000000088A0
.text:00000000000088A0                 public quotearg_mem
.text:00000000000088A0 quotearg_mem    proc near
.text:00000000000088A0 ; __unwind {
.text:00000000000088A0                 lea     rcx, default_quoting_options
.text:00000000000088A7                 mov     rdx, rsi
.text:00000000000088AA                 mov     rsi, rdi
.text:00000000000088AD                 xor     edi, edi
.text:00000000000088AF                 jmp     quotearg_n_options
.text:00000000000088AF ; } // starts at 88A0
.text:00000000000088AF quotearg_mem    endp
.text:00000000000088AF
.text:00000000000088AF ; ---------------------------------------------------------------------------
.text:00000000000088B4                 align 20h
.text:00000000000088C0
.text:00000000000088C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088C0
.text:00000000000088C0 ; Attributes: info_from_lumina
.text:00000000000088C0
.text:00000000000088C0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000088C0                 public quotearg_n_style
.text:00000000000088C0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000088C0                                         ; argmatch_invalid+40↓p
.text:00000000000088C0
.text:00000000000088C0 var_48          = dword ptr -48h
.text:00000000000088C0 var_44          = qword ptr -44h
.text:00000000000088C0 var_3C          = qword ptr -3Ch
.text:00000000000088C0 var_34          = qword ptr -34h
.text:00000000000088C0 var_2C          = qword ptr -2Ch
.text:00000000000088C0 var_24          = qword ptr -24h
.text:00000000000088C0 var_1C          = qword ptr -1Ch
.text:00000000000088C0 var_14          = dword ptr -14h
.text:00000000000088C0 var_10          = qword ptr -10h
.text:00000000000088C0
.text:00000000000088C0 ; __unwind {
.text:00000000000088C0                 sub     rsp, 48h
.text:00000000000088C4                 mov     rax, rdx
.text:00000000000088C7                 mov     rdx, fs:28h
.text:00000000000088D0                 mov     [rsp+48h+var_10], rdx
.text:00000000000088D5                 xor     edx, edx
.text:00000000000088D7                 cmp     esi, 0Ah
.text:00000000000088DA                 jz      short loc_8944
.text:00000000000088DC                 mov     [rsp+48h+var_48], esi
.text:00000000000088DF                 mov     rcx, rsp
.text:00000000000088E2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000088E9                 mov     rsi, rax
.text:00000000000088EC                 mov     [rsp+48h+var_44], 0
.text:00000000000088F5                 mov     [rsp+48h+var_3C], 0
.text:00000000000088FE                 mov     [rsp+48h+var_34], 0
.text:0000000000008907                 mov     [rsp+48h+var_2C], 0
.text:0000000000008910                 mov     [rsp+48h+var_24], 0
.text:0000000000008919                 mov     [rsp+48h+var_1C], 0
.text:0000000000008922                 mov     [rsp+48h+var_14], 0
.text:000000000000892A                 call    quotearg_n_options
.text:000000000000892F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000008934                 xor     rcx, fs:28h
.text:000000000000893D                 jnz     short loc_8949
.text:000000000000893F                 add     rsp, 48h
.text:0000000000008943                 retn
.text:0000000000008944 ; ---------------------------------------------------------------------------
.text:0000000000008944
.text:0000000000008944 loc_8944:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000008944                 call    _abort
.text:0000000000008949 ; ---------------------------------------------------------------------------
.text:0000000000008949
.text:0000000000008949 loc_8949:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000008949                 call    ___stack_chk_fail
.text:0000000000008949 ; } // starts at 88C0
.text:0000000000008949 quotearg_n_style endp
.text:0000000000008949
.text:0000000000008949 ; ---------------------------------------------------------------------------
.text:000000000000894E                 align 10h
.text:0000000000008950
.text:0000000000008950 ; =============== S U B R O U T I N E =======================================
.text:0000000000008950
.text:0000000000008950 ; Attributes: info_from_lumina
.text:0000000000008950
.text:0000000000008950 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000008950                 public quotearg_n_style_mem
.text:0000000000008950 quotearg_n_style_mem proc near          ; CODE XREF: parse_symbols+9C↑p
.text:0000000000008950                                         ; quotearg_style_mem+A↓j
.text:0000000000008950
.text:0000000000008950 var_48          = dword ptr -48h
.text:0000000000008950 var_44          = qword ptr -44h
.text:0000000000008950 var_3C          = qword ptr -3Ch
.text:0000000000008950 var_34          = qword ptr -34h
.text:0000000000008950 var_2C          = qword ptr -2Ch
.text:0000000000008950 var_24          = qword ptr -24h
.text:0000000000008950 var_1C          = qword ptr -1Ch
.text:0000000000008950 var_14          = dword ptr -14h
.text:0000000000008950 var_10          = qword ptr -10h
.text:0000000000008950
.text:0000000000008950 ; __unwind {
.text:0000000000008950                 sub     rsp, 48h
.text:0000000000008954                 mov     rax, rdx
.text:0000000000008957                 mov     rdx, rcx
.text:000000000000895A                 mov     rcx, fs:28h
.text:0000000000008963                 mov     [rsp+48h+var_10], rcx
.text:0000000000008968                 xor     ecx, ecx
.text:000000000000896A                 cmp     esi, 0Ah
.text:000000000000896D                 jz      short loc_89D0
.text:000000000000896F                 mov     [rsp+48h+var_48], esi
.text:0000000000008972                 mov     rcx, rsp
.text:0000000000008975                 mov     rsi, rax
.text:0000000000008978                 mov     [rsp+48h+var_44], 0
.text:0000000000008981                 mov     [rsp+48h+var_3C], 0
.text:000000000000898A                 mov     [rsp+48h+var_34], 0
.text:0000000000008993                 mov     [rsp+48h+var_2C], 0
.text:000000000000899C                 mov     [rsp+48h+var_24], 0
.text:00000000000089A5                 mov     [rsp+48h+var_1C], 0
.text:00000000000089AE                 mov     [rsp+48h+var_14], 0
.text:00000000000089B6                 call    quotearg_n_options
.text:00000000000089BB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000089C0                 xor     rdx, fs:28h
.text:00000000000089C9                 jnz     short loc_89D5
.text:00000000000089CB                 add     rsp, 48h
.text:00000000000089CF                 retn
.text:00000000000089D0 ; ---------------------------------------------------------------------------
.text:00000000000089D0
.text:00000000000089D0 loc_89D0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000089D0                 call    _abort
.text:00000000000089D5 ; ---------------------------------------------------------------------------
.text:00000000000089D5
.text:00000000000089D5 loc_89D5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000089D5                 call    ___stack_chk_fail
.text:00000000000089D5 ; } // starts at 8950
.text:00000000000089D5 quotearg_n_style_mem endp
.text:00000000000089D5
.text:00000000000089D5 ; ---------------------------------------------------------------------------
.text:00000000000089DA                 align 20h
.text:00000000000089E0
.text:00000000000089E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000089E0
.text:00000000000089E0
.text:00000000000089E0                 public quotearg_style
.text:00000000000089E0 quotearg_style  proc near               ; CODE XREF: main+DA1↑p
.text:00000000000089E0                                         ; main+FC6↑p ...
.text:00000000000089E0 ; __unwind {
.text:00000000000089E0                 mov     rdx, rsi
.text:00000000000089E3                 mov     esi, edi
.text:00000000000089E5                 xor     edi, edi
.text:00000000000089E7                 jmp     quotearg_n_style
.text:00000000000089E7 ; } // starts at 89E0
.text:00000000000089E7 quotearg_style  endp
.text:00000000000089E7
.text:00000000000089E7 ; ---------------------------------------------------------------------------
.text:00000000000089EC                 align 10h
.text:00000000000089F0
.text:00000000000089F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000089F0
.text:00000000000089F0
.text:00000000000089F0                 public quotearg_style_mem
.text:00000000000089F0 quotearg_style_mem proc near
.text:00000000000089F0 ; __unwind {
.text:00000000000089F0                 mov     rcx, rdx
.text:00000000000089F3                 mov     rdx, rsi
.text:00000000000089F6                 mov     esi, edi
.text:00000000000089F8                 xor     edi, edi
.text:00000000000089FA                 jmp     quotearg_n_style_mem
.text:00000000000089FA ; } // starts at 89F0
.text:00000000000089FA quotearg_style_mem endp
.text:00000000000089FA
.text:00000000000089FA ; ---------------------------------------------------------------------------
.text:00000000000089FF                 align 20h
.text:0000000000008A00
.text:0000000000008A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A00
.text:0000000000008A00 ; Attributes: info_from_lumina
.text:0000000000008A00
.text:0000000000008A00 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000008A00                 public quotearg_char_mem
.text:0000000000008A00 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000008A00                                         ; quotearg_colon+C↓j ...
.text:0000000000008A00
.text:0000000000008A00 var_48          = xmmword ptr -48h
.text:0000000000008A00 var_38          = xmmword ptr -38h
.text:0000000000008A00 var_28          = xmmword ptr -28h
.text:0000000000008A00 var_18          = qword ptr -18h
.text:0000000000008A00 var_10          = qword ptr -10h
.text:0000000000008A00
.text:0000000000008A00 ; __unwind {
.text:0000000000008A00                 sub     rsp, 48h
.text:0000000000008A04                 mov     ecx, edx
.text:0000000000008A06                 mov     rax, fs:28h
.text:0000000000008A0F                 mov     [rsp+48h+var_10], rax
.text:0000000000008A14                 xor     eax, eax
.text:0000000000008A16                 mov     rax, cs:qword_211550
.text:0000000000008A1D                 mov     r8, rsp
.text:0000000000008A20                 and     ecx, 1Fh
.text:0000000000008A23                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000008A2B                 mov     [rsp+48h+var_18], rax
.text:0000000000008A30                 mov     eax, edx
.text:0000000000008A32                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000008A36                 shr     al, 5
.text:0000000000008A39                 movzx   eax, al
.text:0000000000008A3C                 lea     r9, [r8+rax*4+8]
.text:0000000000008A41                 movdqa  xmm0, cs:xmmword_211530
.text:0000000000008A49                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000008A4E                 movdqa  xmm0, cs:xmmword_211540
.text:0000000000008A56                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000008A5B                 mov     edx, [r9]
.text:0000000000008A5E                 mov     eax, edx
.text:0000000000008A60                 shr     eax, cl
.text:0000000000008A62                 not     eax
.text:0000000000008A64                 and     eax, 1
.text:0000000000008A67                 shl     eax, cl
.text:0000000000008A69                 mov     rcx, r8
.text:0000000000008A6C                 xor     eax, edx
.text:0000000000008A6E                 mov     rdx, rsi
.text:0000000000008A71                 mov     rsi, rdi
.text:0000000000008A74                 mov     [r9], eax
.text:0000000000008A77                 xor     edi, edi
.text:0000000000008A79                 call    quotearg_n_options
.text:0000000000008A7E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000008A83                 xor     rsi, fs:28h
.text:0000000000008A8C                 jnz     short loc_8A93
.text:0000000000008A8E                 add     rsp, 48h
.text:0000000000008A92                 retn
.text:0000000000008A93 ; ---------------------------------------------------------------------------
.text:0000000000008A93
.text:0000000000008A93 loc_8A93:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000008A93                 call    ___stack_chk_fail
.text:0000000000008A93 ; } // starts at 8A00
.text:0000000000008A93 quotearg_char_mem endp
.text:0000000000008A93
.text:0000000000008A93 ; ---------------------------------------------------------------------------
.text:0000000000008A98                 align 20h
.text:0000000000008AA0
.text:0000000000008AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AA0
.text:0000000000008AA0
.text:0000000000008AA0                 public quotearg_char
.text:0000000000008AA0 quotearg_char   proc near
.text:0000000000008AA0 ; __unwind {
.text:0000000000008AA0                 movsx   edx, sil
.text:0000000000008AA4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000008AAB                 jmp     quotearg_char_mem
.text:0000000000008AAB ; } // starts at 8AA0
.text:0000000000008AAB quotearg_char   endp
.text:0000000000008AAB
.text:0000000000008AB0
.text:0000000000008AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AB0
.text:0000000000008AB0
.text:0000000000008AB0                 public quotearg_colon
.text:0000000000008AB0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000008AB0 ; __unwind {
.text:0000000000008AB0                 mov     edx, 3Ah ; ':'
.text:0000000000008AB5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000008ABC                 jmp     quotearg_char_mem
.text:0000000000008ABC ; } // starts at 8AB0
.text:0000000000008ABC quotearg_colon  endp
.text:0000000000008ABC
.text:0000000000008ABC ; ---------------------------------------------------------------------------
.text:0000000000008AC1                 align 10h
.text:0000000000008AD0
.text:0000000000008AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AD0
.text:0000000000008AD0
.text:0000000000008AD0                 public quotearg_colon_mem
.text:0000000000008AD0 quotearg_colon_mem proc near
.text:0000000000008AD0 ; __unwind {
.text:0000000000008AD0                 mov     edx, 3Ah ; ':'
.text:0000000000008AD5                 jmp     quotearg_char_mem
.text:0000000000008AD5 ; } // starts at 8AD0
.text:0000000000008AD5 quotearg_colon_mem endp
.text:0000000000008AD5
.text:0000000000008AD5 ; ---------------------------------------------------------------------------
.text:0000000000008ADA                 align 20h
.text:0000000000008AE0
.text:0000000000008AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AE0
.text:0000000000008AE0 ; Attributes: info_from_lumina
.text:0000000000008AE0
.text:0000000000008AE0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000008AE0                 public quotearg_n_style_colon
.text:0000000000008AE0 quotearg_n_style_colon proc near        ; CODE XREF: main+C74↑p
.text:0000000000008AE0                                         ; main+E35↑p ...
.text:0000000000008AE0
.text:0000000000008AE0 var_48          = dword ptr -48h
.text:0000000000008AE0 var_44          = qword ptr -44h
.text:0000000000008AE0 var_3C          = qword ptr -3Ch
.text:0000000000008AE0 var_34          = qword ptr -34h
.text:0000000000008AE0 var_2C          = qword ptr -2Ch
.text:0000000000008AE0 var_24          = qword ptr -24h
.text:0000000000008AE0 var_1C          = qword ptr -1Ch
.text:0000000000008AE0 var_14          = dword ptr -14h
.text:0000000000008AE0 var_10          = qword ptr -10h
.text:0000000000008AE0
.text:0000000000008AE0 ; __unwind {
.text:0000000000008AE0                 sub     rsp, 48h
.text:0000000000008AE4                 mov     rax, rdx
.text:0000000000008AE7                 mov     rdx, fs:28h
.text:0000000000008AF0                 mov     [rsp+48h+var_10], rdx
.text:0000000000008AF5                 xor     edx, edx
.text:0000000000008AF7                 cmp     esi, 0Ah
.text:0000000000008AFA                 jz      short loc_8B64
.text:0000000000008AFC                 mov     [rsp+48h+var_48], esi
.text:0000000000008AFF                 mov     rcx, rsp
.text:0000000000008B02                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008B09                 mov     rsi, rax
.text:0000000000008B0C                 mov     [rsp+48h+var_44], 0
.text:0000000000008B15                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000008B1E                 mov     [rsp+48h+var_34], 0
.text:0000000000008B27                 mov     [rsp+48h+var_2C], 0
.text:0000000000008B30                 mov     [rsp+48h+var_24], 0
.text:0000000000008B39                 mov     [rsp+48h+var_1C], 0
.text:0000000000008B42                 mov     [rsp+48h+var_14], 0
.text:0000000000008B4A                 call    quotearg_n_options
.text:0000000000008B4F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000008B54                 xor     rcx, fs:28h
.text:0000000000008B5D                 jnz     short loc_8B69
.text:0000000000008B5F                 add     rsp, 48h
.text:0000000000008B63                 retn
.text:0000000000008B64 ; ---------------------------------------------------------------------------
.text:0000000000008B64
.text:0000000000008B64 loc_8B64:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000008B64                 call    _abort
.text:0000000000008B69 ; ---------------------------------------------------------------------------
.text:0000000000008B69
.text:0000000000008B69 loc_8B69:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000008B69                 call    ___stack_chk_fail
.text:0000000000008B69 ; } // starts at 8AE0
.text:0000000000008B69 quotearg_n_style_colon endp
.text:0000000000008B69
.text:0000000000008B69 ; ---------------------------------------------------------------------------
.text:0000000000008B6E                 align 10h
.text:0000000000008B70
.text:0000000000008B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B70
.text:0000000000008B70 ; Attributes: info_from_lumina
.text:0000000000008B70
.text:0000000000008B70 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000008B70                 public quotearg_n_custom_mem
.text:0000000000008B70 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000008B70                                         ; quotearg_custom+12↓j ...
.text:0000000000008B70
.text:0000000000008B70 var_48          = xmmword ptr -48h
.text:0000000000008B70 var_38          = xmmword ptr -38h
.text:0000000000008B70 var_28          = xmmword ptr -28h
.text:0000000000008B70 var_18          = qword ptr -18h
.text:0000000000008B70 var_10          = qword ptr -10h
.text:0000000000008B70
.text:0000000000008B70 ; __unwind {
.text:0000000000008B70                 sub     rsp, 48h
.text:0000000000008B74                 mov     r9, rcx
.text:0000000000008B77                 mov     rcx, cs:qword_211550
.text:0000000000008B7E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000008B86                 mov     rax, fs:28h
.text:0000000000008B8F                 mov     [rsp+48h+var_10], rax
.text:0000000000008B94                 xor     eax, eax
.text:0000000000008B96                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000008B9A                 test    rsi, rsi
.text:0000000000008B9D                 mov     [rsp+48h+var_18], rcx
.text:0000000000008BA2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000008BA9                 movdqa  xmm0, cs:xmmword_211530
.text:0000000000008BB1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000008BB6                 movdqa  xmm0, cs:xmmword_211540
.text:0000000000008BBE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000008BC3                 jz      short loc_8BF7
.text:0000000000008BC5                 test    rdx, rdx
.text:0000000000008BC8                 jz      short loc_8BF7
.text:0000000000008BCA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000008BCF                 mov     [rsp+48h+var_18], rdx
.text:0000000000008BD4                 mov     rcx, rsp
.text:0000000000008BD7                 mov     rdx, r8
.text:0000000000008BDA                 mov     rsi, r9
.text:0000000000008BDD                 call    quotearg_n_options
.text:0000000000008BE2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000008BE7                 xor     rdi, fs:28h
.text:0000000000008BF0                 jnz     short loc_8BFC
.text:0000000000008BF2                 add     rsp, 48h
.text:0000000000008BF6                 retn
.text:0000000000008BF7 ; ---------------------------------------------------------------------------
.text:0000000000008BF7
.text:0000000000008BF7 loc_8BF7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000008BF7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000008BF7                 call    _abort
.text:0000000000008BFC ; ---------------------------------------------------------------------------
.text:0000000000008BFC
.text:0000000000008BFC loc_8BFC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000008BFC                 call    ___stack_chk_fail
.text:0000000000008BFC ; } // starts at 8B70
.text:0000000000008BFC quotearg_n_custom_mem endp
.text:0000000000008BFC
.text:0000000000008BFC ; ---------------------------------------------------------------------------
.text:0000000000008C01                 align 10h
.text:0000000000008C10
.text:0000000000008C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C10
.text:0000000000008C10
.text:0000000000008C10                 public quotearg_n_custom
.text:0000000000008C10 quotearg_n_custom proc near
.text:0000000000008C10 ; __unwind {
.text:0000000000008C10                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C17                 jmp     quotearg_n_custom_mem
.text:0000000000008C17 ; } // starts at 8C10
.text:0000000000008C17 quotearg_n_custom endp
.text:0000000000008C17
.text:0000000000008C17 ; ---------------------------------------------------------------------------
.text:0000000000008C1C                 align 20h
.text:0000000000008C20
.text:0000000000008C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C20
.text:0000000000008C20
.text:0000000000008C20                 public quotearg_custom
.text:0000000000008C20 quotearg_custom proc near
.text:0000000000008C20 ; __unwind {
.text:0000000000008C20                 mov     rcx, rdx
.text:0000000000008C23                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C2A                 mov     rdx, rsi
.text:0000000000008C2D                 mov     rsi, rdi
.text:0000000000008C30                 xor     edi, edi
.text:0000000000008C32                 jmp     quotearg_n_custom_mem
.text:0000000000008C32 ; } // starts at 8C20
.text:0000000000008C32 quotearg_custom endp
.text:0000000000008C32
.text:0000000000008C32 ; ---------------------------------------------------------------------------
.text:0000000000008C37                 align 20h
.text:0000000000008C40
.text:0000000000008C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C40
.text:0000000000008C40
.text:0000000000008C40                 public quotearg_custom_mem
.text:0000000000008C40 quotearg_custom_mem proc near
.text:0000000000008C40 ; __unwind {
.text:0000000000008C40                 mov     r8, rcx
.text:0000000000008C43                 mov     rcx, rdx
.text:0000000000008C46                 mov     rdx, rsi
.text:0000000000008C49                 mov     rsi, rdi
.text:0000000000008C4C                 xor     edi, edi
.text:0000000000008C4E                 jmp     quotearg_n_custom_mem
.text:0000000000008C4E ; } // starts at 8C40
.text:0000000000008C4E quotearg_custom_mem endp
.text:0000000000008C4E
.text:0000000000008C4E ; ---------------------------------------------------------------------------
.text:0000000000008C53                 align 20h
.text:0000000000008C60
.text:0000000000008C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C60
.text:0000000000008C60
.text:0000000000008C60                 public quote_n_mem
.text:0000000000008C60 quote_n_mem     proc near
.text:0000000000008C60 ; __unwind {
.text:0000000000008C60                 lea     rcx, quote_quoting_options
.text:0000000000008C67                 jmp     quotearg_n_options
.text:0000000000008C67 ; } // starts at 8C60
.text:0000000000008C67 quote_n_mem     endp
.text:0000000000008C67
.text:0000000000008C67 ; ---------------------------------------------------------------------------
.text:0000000000008C6C                 align 10h
.text:0000000000008C70
.text:0000000000008C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C70
.text:0000000000008C70
.text:0000000000008C70                 public quote_mem
.text:0000000000008C70 quote_mem       proc near
.text:0000000000008C70 ; __unwind {
.text:0000000000008C70                 lea     rcx, quote_quoting_options
.text:0000000000008C77                 mov     rdx, rsi
.text:0000000000008C7A                 mov     rsi, rdi
.text:0000000000008C7D                 xor     edi, edi
.text:0000000000008C7F                 jmp     quotearg_n_options
.text:0000000000008C7F ; } // starts at 8C70
.text:0000000000008C7F quote_mem       endp
.text:0000000000008C7F
.text:0000000000008C7F ; ---------------------------------------------------------------------------
.text:0000000000008C84                 align 10h
.text:0000000000008C90
.text:0000000000008C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C90
.text:0000000000008C90
.text:0000000000008C90                 public quote_n
.text:0000000000008C90 quote_n         proc near               ; CODE XREF: parse_integer+FD↑p
.text:0000000000008C90                                         ; parse_integer+10A↑p ...
.text:0000000000008C90 ; __unwind {
.text:0000000000008C90                 lea     rcx, quote_quoting_options
.text:0000000000008C97                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C9E                 jmp     quotearg_n_options
.text:0000000000008C9E ; } // starts at 8C90
.text:0000000000008C9E quote_n         endp
.text:0000000000008C9E
.text:0000000000008C9E ; ---------------------------------------------------------------------------
.text:0000000000008CA3                 align 10h
.text:0000000000008CB0
.text:0000000000008CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008CB0
.text:0000000000008CB0
.text:0000000000008CB0                 public quote
.text:0000000000008CB0 quote           proc near               ; CODE XREF: main+174E↑p
.text:0000000000008CB0                                         ; main+1A74↑p ...
.text:0000000000008CB0 ; __unwind {
.text:0000000000008CB0                 lea     rcx, quote_quoting_options
.text:0000000000008CB7                 mov     rsi, rdi
.text:0000000000008CBA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008CC1                 xor     edi, edi
.text:0000000000008CC3                 jmp     quotearg_n_options
.text:0000000000008CC3 ; } // starts at 8CB0
.text:0000000000008CC3 quote           endp
.text:0000000000008CC3
.text:0000000000008CC3 ; ---------------------------------------------------------------------------
.text:0000000000008CC8                 align 10h
.text:0000000000008CD0
.text:0000000000008CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008CD0
.text:0000000000008CD0
.text:0000000000008CD0 ; __int64 __fastcall verror_at_line(int status, int errnum, char *fname, unsigned int lineno)
.text:0000000000008CD0                 public verror_at_line
.text:0000000000008CD0 verror_at_line  proc near               ; CODE XREF: verror+A↓j
.text:0000000000008CD0 ; __unwind {
.text:0000000000008CD0                 push    r14
.text:0000000000008CD2                 push    r13
.text:0000000000008CD4                 mov     r13d, esi
.text:0000000000008CD7                 push    r12
.text:0000000000008CD9                 push    rbp
.text:0000000000008CDA                 mov     r12d, edi
.text:0000000000008CDD                 push    rbx
.text:0000000000008CDE                 mov     rsi, r9
.text:0000000000008CE1                 mov     rdi, r8
.text:0000000000008CE4                 mov     rbp, rdx
.text:0000000000008CE7                 mov     r14d, ecx
.text:0000000000008CEA                 call    xvasprintf
.text:0000000000008CEF                 test    rax, rax
.text:0000000000008CF2                 jz      short loc_8D57
.text:0000000000008CF4                 test    rbp, rbp
.text:0000000000008CF7                 mov     rbx, rax
.text:0000000000008CFA                 jz      short loc_8D30
.text:0000000000008CFC                 lea     r8, aLuBytesSCopied+1Bh ; format
.text:0000000000008D03                 mov     edi, r12d       ; status
.text:0000000000008D06                 mov     r9, rax
.text:0000000000008D09                 mov     ecx, r14d       ; lineno
.text:0000000000008D0C                 mov     rdx, rbp        ; fname
.text:0000000000008D0F                 mov     esi, r13d       ; errnum
.text:0000000000008D12                 xor     eax, eax
.text:0000000000008D14                 call    _error_at_line
.text:0000000000008D19                 mov     rdi, rbx        ; ptr
.text:0000000000008D1C                 pop     rbx
.text:0000000000008D1D                 pop     rbp
.text:0000000000008D1E                 pop     r12
.text:0000000000008D20                 pop     r13
.text:0000000000008D22                 pop     r14
.text:0000000000008D24                 jmp     _free
.text:0000000000008D24 ; ---------------------------------------------------------------------------
.text:0000000000008D29                 align 10h
.text:0000000000008D30
.text:0000000000008D30 loc_8D30:                               ; CODE XREF: verror_at_line+2A↑j
.text:0000000000008D30                 lea     rdx, aLuBytesSCopied+1Bh ; format
.text:0000000000008D37                 mov     edi, r12d       ; status
.text:0000000000008D3A                 mov     rcx, rax
.text:0000000000008D3D                 mov     esi, r13d       ; errnum
.text:0000000000008D40                 xor     eax, eax
.text:0000000000008D42                 call    _error
.text:0000000000008D47                 mov     rdi, rbx        ; ptr
.text:0000000000008D4A                 pop     rbx
.text:0000000000008D4B                 pop     rbp
.text:0000000000008D4C                 pop     r12
.text:0000000000008D4E                 pop     r13
.text:0000000000008D50                 pop     r14
.text:0000000000008D52                 jmp     _free
.text:0000000000008D57 ; ---------------------------------------------------------------------------
.text:0000000000008D57
.text:0000000000008D57 loc_8D57:                               ; CODE XREF: verror_at_line+22↑j
.text:0000000000008D57                 lea     rsi, aUnableToDispla ; "unable to display error message"
.text:0000000000008D5E                 mov     edx, 5          ; category
.text:0000000000008D63                 xor     edi, edi        ; domainname
.text:0000000000008D65                 call    _dcgettext
.text:0000000000008D6A                 mov     rbx, rax
.text:0000000000008D6D                 call    ___errno_location
.text:0000000000008D72                 mov     esi, [rax]      ; errnum
.text:0000000000008D74                 mov     rdx, rbx        ; format
.text:0000000000008D77                 xor     edi, edi        ; status
.text:0000000000008D79                 xor     eax, eax
.text:0000000000008D7B                 call    _error
.text:0000000000008D80                 call    _abort
.text:0000000000008D80 ; } // starts at 8CD0
.text:0000000000008D80 verror_at_line  endp
.text:0000000000008D80
.text:0000000000008D80 ; ---------------------------------------------------------------------------
.text:0000000000008D85                 align 10h
.text:0000000000008D90
.text:0000000000008D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D90
.text:0000000000008D90
.text:0000000000008D90                 public verror
.text:0000000000008D90 verror          proc near               ; CODE XREF: nl_error+CA↑p
.text:0000000000008D90 ; __unwind {
.text:0000000000008D90                 mov     r8, rdx
.text:0000000000008D93                 mov     r9, rcx
.text:0000000000008D96                 xor     edx, edx        ; fname
.text:0000000000008D98                 xor     ecx, ecx        ; lineno
.text:0000000000008D9A                 jmp     verror_at_line
.text:0000000000008D9A ; } // starts at 8D90
.text:0000000000008D9A verror          endp
.text:0000000000008D9A
.text:0000000000008D9A ; ---------------------------------------------------------------------------
.text:0000000000008D9F                 align 20h
.text:0000000000008DA0
.text:0000000000008DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DA0
.text:0000000000008DA0
.text:0000000000008DA0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000008DA0                 public version_etc_arn
.text:0000000000008DA0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_91DB↓j
.text:0000000000008DA0                                         ; version_etc_va:loc_922B↓p ...
.text:0000000000008DA0
.text:0000000000008DA0 var_58          = qword ptr -58h
.text:0000000000008DA0 var_50          = qword ptr -50h
.text:0000000000008DA0 var_48          = qword ptr -48h
.text:0000000000008DA0 var_40          = qword ptr -40h
.text:0000000000008DA0
.text:0000000000008DA0 ; __unwind {
.text:0000000000008DA0                 push    r15
.text:0000000000008DA2                 push    r14
.text:0000000000008DA4                 push    r13
.text:0000000000008DA6                 push    r12
.text:0000000000008DA8                 mov     r12, r9
.text:0000000000008DAB                 push    rbp
.text:0000000000008DAC                 push    rbx
.text:0000000000008DAD                 mov     rbp, rdi
.text:0000000000008DB0                 mov     rbx, r8
.text:0000000000008DB3                 sub     rsp, 28h
.text:0000000000008DB7                 test    rsi, rsi
.text:0000000000008DBA                 jz      loc_8ED8
.text:0000000000008DC0                 mov     r8, rdx
.text:0000000000008DC3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000008DCA                 mov     r9, rcx
.text:0000000000008DCD                 xor     eax, eax
.text:0000000000008DCF                 mov     rcx, rsi
.text:0000000000008DD2                 mov     esi, 1
.text:0000000000008DD7                 call    ___fprintf_chk
.text:0000000000008DDC
.text:0000000000008DDC loc_8DDC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000008DDC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000008DE3                 xor     edi, edi        ; domainname
.text:0000000000008DE5                 mov     edx, 5          ; category
.text:0000000000008DEA                 call    _dcgettext
.text:0000000000008DEF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000008DF6                 mov     rcx, rax
.text:0000000000008DF9                 mov     r8d, 7E3h
.text:0000000000008DFF                 mov     esi, 1
.text:0000000000008E04                 mov     rdi, rbp
.text:0000000000008E07                 xor     eax, eax
.text:0000000000008E09                 call    ___fprintf_chk
.text:0000000000008E0E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000008E15                 xor     edi, edi        ; domainname
.text:0000000000008E17                 mov     edx, 5          ; category
.text:0000000000008E1C                 call    _dcgettext
.text:0000000000008E21                 mov     rsi, rbp        ; stream
.text:0000000000008E24                 mov     rdi, rax        ; s
.text:0000000000008E27                 call    _fputs_unlocked
.text:0000000000008E2C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000008E30                 ja      def_8E44        ; jumptable 0000000000008E44 default case
.text:0000000000008E36                 lea     rdx, jpt_8E44
.text:0000000000008E3D                 movsxd  rax, ds:(jpt_8E44 - 0EA44h)[rdx+r12*4]
.text:0000000000008E41                 add     rax, rdx
.text:0000000000008E44                 jmp     rax             ; switch jump
.text:0000000000008E44 ; ---------------------------------------------------------------------------
.text:0000000000008E46                 align 10h
.text:0000000000008E50
.text:0000000000008E50 loc_8E50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008E50                                         ; DATA XREF: .rodata:jpt_8E44↓o
.text:0000000000008E50                 mov     r9, [rbx+38h]   ; jumptable 0000000000008E44 case 8
.text:0000000000008E54                 mov     rax, [rbx+10h]
.text:0000000000008E58                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000008E5F                 mov     r8, [rbx+8]
.text:0000000000008E63                 mov     edx, 5          ; category
.text:0000000000008E68                 xor     edi, edi        ; domainname
.text:0000000000008E6A                 mov     r13, [rbx+30h]
.text:0000000000008E6E                 mov     r12, [rbx+28h]
.text:0000000000008E72                 mov     [rsp+58h+var_48], r9
.text:0000000000008E77                 mov     r15, [rbx+20h]
.text:0000000000008E7B                 mov     r14, [rbx+18h]
.text:0000000000008E7F                 mov     [rsp+58h+var_58], rax
.text:0000000000008E83                 mov     [rsp+58h+var_50], r8
.text:0000000000008E88                 mov     rbx, [rbx]
.text:0000000000008E8B                 call    _dcgettext
.text:0000000000008E90                 sub     rsp, 8
.text:0000000000008E94
.text:0000000000008E94 loc_8E94:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000008E94                 mov     r9, [rsp+60h+var_48]
.text:0000000000008E99                 mov     rdx, rax
.text:0000000000008E9C                 mov     rcx, rbx
.text:0000000000008E9F                 mov     esi, 1
.text:0000000000008EA4                 mov     rdi, rbp
.text:0000000000008EA7                 xor     eax, eax
.text:0000000000008EA9                 push    r9
.text:0000000000008EAB                 push    r13
.text:0000000000008EAD                 push    r12
.text:0000000000008EAF                 push    r15
.text:0000000000008EB1                 push    r14
.text:0000000000008EB3                 mov     r9, [rsp+88h+var_58]
.text:0000000000008EB8                 mov     r8, [rsp+88h+var_50]
.text:0000000000008EBD                 call    ___fprintf_chk
.text:0000000000008EC2                 add     rsp, 30h
.text:0000000000008EC6
.text:0000000000008EC6 loc_8EC6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008EC6                                         ; DATA XREF: .rodata:jpt_8E44↓o
.text:0000000000008EC6                 add     rsp, 28h        ; jumptable 0000000000008E44 case 0
.text:0000000000008ECA                 pop     rbx
.text:0000000000008ECB                 pop     rbp
.text:0000000000008ECC                 pop     r12
.text:0000000000008ECE                 pop     r13
.text:0000000000008ED0                 pop     r14
.text:0000000000008ED2                 pop     r15
.text:0000000000008ED4                 retn
.text:0000000000008ED4 ; ---------------------------------------------------------------------------
.text:0000000000008ED5                 align 8
.text:0000000000008ED8
.text:0000000000008ED8 loc_8ED8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000008ED8                 mov     r8, rcx
.text:0000000000008EDB                 mov     rcx, rdx
.text:0000000000008EDE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000008EE5                 mov     esi, 1
.text:0000000000008EEA                 xor     eax, eax
.text:0000000000008EEC                 call    ___fprintf_chk
.text:0000000000008EF1                 jmp     loc_8DDC
.text:0000000000008EF1 ; ---------------------------------------------------------------------------
.text:0000000000008EF6                 align 20h
.text:0000000000008F00
.text:0000000000008F00 loc_8F00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008F00                                         ; DATA XREF: .rodata:jpt_8E44↓o
.text:0000000000008F00                 mov     r10, [rbx+40h]  ; jumptable 0000000000008E44 case 9
.text:0000000000008F04                 mov     r9, [rbx+38h]
.text:0000000000008F08                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000008F0F                 mov     rax, [rbx+10h]
.text:0000000000008F13                 mov     r8, [rbx+8]
.text:0000000000008F17                 mov     edx, 5          ; category
.text:0000000000008F1C                 mov     r13, [rbx+30h]
.text:0000000000008F20                 mov     r12, [rbx+28h]
.text:0000000000008F24                 mov     r15, [rbx+20h]
.text:0000000000008F28                 mov     r14, [rbx+18h]
.text:0000000000008F2C                 mov     rbx, [rbx]
.text:0000000000008F2F                 mov     [rsp+58h+var_40], r10
.text:0000000000008F34                 mov     [rsp+58h+var_48], r9
.text:0000000000008F39                 mov     [rsp+58h+var_58], rax
.text:0000000000008F3D                 mov     [rsp+58h+var_50], r8
.text:0000000000008F42
.text:0000000000008F42 loc_8F42:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000008F42                 xor     edi, edi        ; domainname
.text:0000000000008F44                 call    _dcgettext
.text:0000000000008F49                 mov     r10, [rsp+58h+var_40]
.text:0000000000008F4E                 push    r10
.text:0000000000008F50                 jmp     loc_8E94
.text:0000000000008F50 ; ---------------------------------------------------------------------------
.text:0000000000008F55                 align 8
.text:0000000000008F58
.text:0000000000008F58 loc_8F58:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008F58                                         ; DATA XREF: .rodata:jpt_8E44↓o
.text:0000000000008F58                 mov     rbx, [rbx]      ; jumptable 0000000000008E44 case 1
.text:0000000000008F5B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000008F62                 mov     edx, 5          ; category
.text:0000000000008F67                 xor     edi, edi        ; domainname
.text:0000000000008F69                 call    _dcgettext
.text:0000000000008F6E                 add     rsp, 28h
.text:0000000000008F72                 mov     rcx, rbx
.text:0000000000008F75                 mov     rdi, rbp
.text:0000000000008F78                 pop     rbx
.text:0000000000008F79                 pop     rbp
.text:0000000000008F7A                 pop     r12
.text:0000000000008F7C                 pop     r13
.text:0000000000008F7E                 pop     r14
.text:0000000000008F80                 pop     r15
.text:0000000000008F82                 mov     rdx, rax
.text:0000000000008F85                 mov     esi, 1
.text:0000000000008F8A                 xor     eax, eax
.text:0000000000008F8C                 jmp     ___fprintf_chk
.text:0000000000008F8C ; ---------------------------------------------------------------------------
.text:0000000000008F91                 align 8
.text:0000000000008F98
.text:0000000000008F98 loc_8F98:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008F98                                         ; DATA XREF: .rodata:jpt_8E44↓o
.text:0000000000008F98                 mov     r12, [rbx+8]    ; jumptable 0000000000008E44 case 2
.text:0000000000008F9C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000008FA3                 mov     rbx, [rbx]
.text:0000000000008FA6                 mov     edx, 5          ; category
.text:0000000000008FAB                 xor     edi, edi        ; domainname
.text:0000000000008FAD                 call    _dcgettext
.text:0000000000008FB2                 add     rsp, 28h
.text:0000000000008FB6                 mov     r8, r12
.text:0000000000008FB9                 mov     rcx, rbx
.text:0000000000008FBC                 mov     rdi, rbp
.text:0000000000008FBF                 mov     rdx, rax
.text:0000000000008FC2                 mov     esi, 1
.text:0000000000008FC7                 pop     rbx
.text:0000000000008FC8                 pop     rbp
.text:0000000000008FC9                 pop     r12
.text:0000000000008FCB                 pop     r13
.text:0000000000008FCD                 pop     r14
.text:0000000000008FCF                 pop     r15
.text:0000000000008FD1                 xor     eax, eax
.text:0000000000008FD3                 jmp     ___fprintf_chk
.text:0000000000008FD3 ; ---------------------------------------------------------------------------
.text:0000000000008FD8                 align 20h
.text:0000000000008FE0
.text:0000000000008FE0 loc_8FE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008FE0                                         ; DATA XREF: .rodata:jpt_8E44↓o
.text:0000000000008FE0                 mov     r13, [rbx+10h]  ; jumptable 0000000000008E44 case 3
.text:0000000000008FE4                 mov     r12, [rbx+8]
.text:0000000000008FE8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000008FEF                 mov     rbx, [rbx]
.text:0000000000008FF2                 mov     edx, 5          ; category
.text:0000000000008FF7                 xor     edi, edi        ; domainname
.text:0000000000008FF9                 call    _dcgettext
.text:0000000000008FFE                 add     rsp, 28h
.text:0000000000009002                 mov     r9, r13
.text:0000000000009005                 mov     r8, r12
.text:0000000000009008                 mov     rcx, rbx
.text:000000000000900B                 mov     rdi, rbp
.text:000000000000900E                 mov     rdx, rax
.text:0000000000009011                 pop     rbx
.text:0000000000009012                 pop     rbp
.text:0000000000009013                 pop     r12
.text:0000000000009015                 pop     r13
.text:0000000000009017                 pop     r14
.text:0000000000009019                 pop     r15
.text:000000000000901B                 mov     esi, 1
.text:0000000000009020                 xor     eax, eax
.text:0000000000009022                 jmp     ___fprintf_chk
.text:0000000000009022 ; ---------------------------------------------------------------------------
.text:0000000000009027                 align 10h
.text:0000000000009030
.text:0000000000009030 loc_9030:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009030                                         ; DATA XREF: .rodata:jpt_8E44↓o
.text:0000000000009030                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000008E44 case 4
.text:0000000000009037                 mov     edx, 5          ; category
.text:000000000000903C                 xor     edi, edi        ; domainname
.text:000000000000903E                 mov     r14, [rbx+18h]
.text:0000000000009042                 mov     r13, [rbx+10h]
.text:0000000000009046                 mov     r12, [rbx+8]
.text:000000000000904A                 mov     rbx, [rbx]
.text:000000000000904D                 call    _dcgettext
.text:0000000000009052                 sub     rsp, 8
.text:0000000000009056
.text:0000000000009056 loc_9056:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000009056                 push    r14
.text:0000000000009058                 mov     rdx, rax
.text:000000000000905B                 mov     r9, r13
.text:000000000000905E                 mov     r8, r12
.text:0000000000009061                 mov     rcx, rbx
.text:0000000000009064                 mov     rdi, rbp
.text:0000000000009067                 mov     esi, 1
.text:000000000000906C                 xor     eax, eax
.text:000000000000906E                 call    ___fprintf_chk
.text:0000000000009073                 pop     rax
.text:0000000000009074                 pop     rdx
.text:0000000000009075                 add     rsp, 28h
.text:0000000000009079                 pop     rbx
.text:000000000000907A                 pop     rbp
.text:000000000000907B                 pop     r12
.text:000000000000907D                 pop     r13
.text:000000000000907F                 pop     r14
.text:0000000000009081                 pop     r15
.text:0000000000009083                 retn
.text:0000000000009083 ; ---------------------------------------------------------------------------
.text:0000000000009084                 align 8
.text:0000000000009088
.text:0000000000009088 loc_9088:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009088                                         ; DATA XREF: .rodata:jpt_8E44↓o
.text:0000000000009088                 mov     r15, [rbx+20h]  ; jumptable 0000000000008E44 case 5
.text:000000000000908C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000009093                 mov     edx, 5          ; category
.text:0000000000009098                 xor     edi, edi        ; domainname
.text:000000000000909A                 mov     r14, [rbx+18h]
.text:000000000000909E                 mov     r13, [rbx+10h]
.text:00000000000090A2                 mov     r12, [rbx+8]
.text:00000000000090A6                 mov     rbx, [rbx]
.text:00000000000090A9                 call    _dcgettext
.text:00000000000090AE                 push    r15
.text:00000000000090B0                 jmp     short loc_9056
.text:00000000000090B0 ; ---------------------------------------------------------------------------
.text:00000000000090B2                 align 8
.text:00000000000090B8
.text:00000000000090B8 loc_90B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000090B8                                         ; DATA XREF: .rodata:jpt_8E44↓o
.text:00000000000090B8                 mov     r8, [rbx+8]     ; jumptable 0000000000008E44 case 6
.text:00000000000090BC                 mov     r12, [rbx+28h]
.text:00000000000090C0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000090C7                 mov     r15, [rbx+20h]
.text:00000000000090CB                 mov     r14, [rbx+18h]
.text:00000000000090CF                 mov     edx, 5          ; category
.text:00000000000090D4                 mov     r13, [rbx+10h]
.text:00000000000090D8                 xor     edi, edi        ; domainname
.text:00000000000090DA                 mov     rbx, [rbx]
.text:00000000000090DD                 mov     [rsp+58h+var_58], r8
.text:00000000000090E1                 call    _dcgettext
.text:00000000000090E6                 sub     rsp, 8
.text:00000000000090EA                 mov     r9, r13
.text:00000000000090ED                 push    r12
.text:00000000000090EF                 push    r15
.text:00000000000090F1                 push    r14
.text:00000000000090F3
.text:00000000000090F3 loc_90F3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000090F3                 mov     r8, [rsp+78h+var_58]
.text:00000000000090F8                 mov     rcx, rbx
.text:00000000000090FB                 mov     rdx, rax
.text:00000000000090FE                 mov     rdi, rbp
.text:0000000000009101                 mov     esi, 1
.text:0000000000009106                 xor     eax, eax
.text:0000000000009108                 call    ___fprintf_chk
.text:000000000000910D                 add     rsp, 20h
.text:0000000000009111                 add     rsp, 28h
.text:0000000000009115                 pop     rbx
.text:0000000000009116                 pop     rbp
.text:0000000000009117                 pop     r12
.text:0000000000009119                 pop     r13
.text:000000000000911B                 pop     r14
.text:000000000000911D                 pop     r15
.text:000000000000911F                 retn
.text:0000000000009120 ; ---------------------------------------------------------------------------
.text:0000000000009120
.text:0000000000009120 loc_9120:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009120                                         ; DATA XREF: .rodata:jpt_8E44↓o
.text:0000000000009120                 mov     r9, [rbx+10h]   ; jumptable 0000000000008E44 case 7
.text:0000000000009124                 mov     r13, [rbx+30h]
.text:0000000000009128                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000912F                 mov     r12, [rbx+28h]
.text:0000000000009133                 mov     r15, [rbx+20h]
.text:0000000000009137                 mov     edx, 5          ; category
.text:000000000000913C                 mov     r14, [rbx+18h]
.text:0000000000009140                 mov     r8, [rbx+8]
.text:0000000000009144                 xor     edi, edi        ; domainname
.text:0000000000009146                 mov     [rsp+58h+var_50], r9
.text:000000000000914B                 mov     rbx, [rbx]
.text:000000000000914E                 mov     [rsp+58h+var_58], r8
.text:0000000000009152                 call    _dcgettext
.text:0000000000009157                 push    r13
.text:0000000000009159                 push    r12
.text:000000000000915B                 push    r15
.text:000000000000915D                 push    r14
.text:000000000000915F                 mov     r9, [rsp+78h+var_50]
.text:0000000000009164                 jmp     short loc_90F3
.text:0000000000009164 ; ---------------------------------------------------------------------------
.text:0000000000009166                 align 10h
.text:0000000000009170
.text:0000000000009170 def_8E44:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000009170                 mov     r10, [rbx+40h]  ; jumptable 0000000000008E44 default case
.text:0000000000009174                 mov     r9, [rbx+38h]
.text:0000000000009178                 mov     edx, 5
.text:000000000000917D                 mov     rax, [rbx+10h]
.text:0000000000009181                 mov     r8, [rbx+8]
.text:0000000000009185                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000918C                 mov     r13, [rbx+30h]
.text:0000000000009190                 mov     r12, [rbx+28h]
.text:0000000000009194                 mov     r15, [rbx+20h]
.text:0000000000009198                 mov     r14, [rbx+18h]
.text:000000000000919C                 mov     [rsp+58h+var_40], r10
.text:00000000000091A1                 mov     [rsp+58h+var_48], r9
.text:00000000000091A6                 mov     [rsp+58h+var_58], rax
.text:00000000000091AA                 mov     [rsp+58h+var_50], r8
.text:00000000000091AF                 mov     rbx, [rbx]
.text:00000000000091B2                 jmp     loc_8F42
.text:00000000000091B2 ; } // starts at 8DA0
.text:00000000000091B2 version_etc_arn endp
.text:00000000000091B2
.text:00000000000091B2 ; ---------------------------------------------------------------------------
.text:00000000000091B7                 align 20h
.text:00000000000091C0
.text:00000000000091C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091C0
.text:00000000000091C0 ; Attributes: info_from_lumina
.text:00000000000091C0
.text:00000000000091C0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000091C0                 public version_etc_ar
.text:00000000000091C0 version_etc_ar  proc near
.text:00000000000091C0 ; __unwind {
.text:00000000000091C0                 xor     r9d, r9d
.text:00000000000091C3                 cmp     qword ptr [r8], 0
.text:00000000000091C7                 jz      short loc_91DB
.text:00000000000091C9                 nop     dword ptr [rax+00000000h]
.text:00000000000091D0
.text:00000000000091D0 loc_91D0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000091D0                 add     r9, 1
.text:00000000000091D4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000091D9                 jnz     short loc_91D0
.text:00000000000091DB
.text:00000000000091DB loc_91DB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000091DB                 jmp     version_etc_arn
.text:00000000000091DB ; } // starts at 91C0
.text:00000000000091DB version_etc_ar  endp
.text:00000000000091DB
.text:00000000000091E0
.text:00000000000091E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091E0
.text:00000000000091E0 ; Attributes: info_from_lumina
.text:00000000000091E0
.text:00000000000091E0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000091E0                 public version_etc_va
.text:00000000000091E0 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:00000000000091E0                                         ; parse_gnu_standard_options_only+EB↑p
.text:00000000000091E0
.text:00000000000091E0 authtab         = qword ptr -68h
.text:00000000000091E0 var_10          = qword ptr -10h
.text:00000000000091E0
.text:00000000000091E0 ; __unwind {
.text:00000000000091E0                 sub     rsp, 68h
.text:00000000000091E4                 mov     r10, r8
.text:00000000000091E7                 xor     r9d, r9d
.text:00000000000091EA                 mov     rax, fs:28h
.text:00000000000091F3                 mov     [rsp+68h+var_10], rax
.text:00000000000091F8                 xor     eax, eax
.text:00000000000091FA                 mov     r8, rsp
.text:00000000000091FD                 nop     dword ptr [rax]
.text:0000000000009200
.text:0000000000009200 loc_9200:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000009200                 mov     eax, [r10]
.text:0000000000009203                 cmp     eax, 2Fh ; '/'
.text:0000000000009206                 ja      short loc_924A
.text:0000000000009208                 mov     r11d, eax
.text:000000000000920B                 add     r11, [r10+10h]
.text:000000000000920F                 add     eax, 8
.text:0000000000009212                 mov     [r10], eax
.text:0000000000009215
.text:0000000000009215 loc_9215:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000009215                 mov     rax, [r11]
.text:0000000000009218                 test    rax, rax
.text:000000000000921B                 mov     [r8+r9*8], rax
.text:000000000000921F                 jz      short loc_922B
.text:0000000000009221                 add     r9, 1
.text:0000000000009225                 cmp     r9, 0Ah
.text:0000000000009229                 jnz     short loc_9200
.text:000000000000922B
.text:000000000000922B loc_922B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000922B                 call    version_etc_arn
.text:0000000000009230                 mov     rax, [rsp+68h+var_10]
.text:0000000000009235                 xor     rax, fs:28h
.text:000000000000923E                 jnz     short loc_9245
.text:0000000000009240                 add     rsp, 68h
.text:0000000000009244                 retn
.text:0000000000009245 ; ---------------------------------------------------------------------------
.text:0000000000009245
.text:0000000000009245 loc_9245:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000009245                 call    ___stack_chk_fail
.text:000000000000924A ; ---------------------------------------------------------------------------
.text:000000000000924A
.text:000000000000924A loc_924A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000924A                 mov     r11, [r10+8]
.text:000000000000924E                 lea     rax, [r11+8]
.text:0000000000009252                 mov     [r10+8], rax
.text:0000000000009256                 jmp     short loc_9215
.text:0000000000009256 ; } // starts at 91E0
.text:0000000000009256 version_etc_va  endp
.text:0000000000009256
.text:0000000000009256 ; ---------------------------------------------------------------------------
.text:0000000000009258                 align 20h
.text:0000000000009260
.text:0000000000009260 ; =============== S U B R O U T I N E =======================================
.text:0000000000009260
.text:0000000000009260 ; Attributes: info_from_lumina
.text:0000000000009260
.text:0000000000009260 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000009260                 public version_etc
.text:0000000000009260 version_etc     proc near
.text:0000000000009260
.text:0000000000009260 var_C0          = dword ptr -0C0h
.text:0000000000009260 var_B8          = qword ptr -0B8h
.text:0000000000009260 var_B0          = qword ptr -0B0h
.text:0000000000009260 var_A8          = byte ptr -0A8h
.text:0000000000009260 var_50          = qword ptr -50h
.text:0000000000009260 var_48          = byte ptr -48h
.text:0000000000009260 var_28          = qword ptr -28h
.text:0000000000009260 var_20          = qword ptr -20h
.text:0000000000009260 arg_0           = byte ptr  8
.text:0000000000009260
.text:0000000000009260 ; __unwind {
.text:0000000000009260                 push    rbp
.text:0000000000009261                 push    rbx
.text:0000000000009262                 mov     r10d, 20h ; ' '
.text:0000000000009268                 xor     r11d, r11d
.text:000000000000926B                 sub     rsp, 0B8h
.text:0000000000009272                 mov     rax, fs:28h
.text:000000000000927B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000009280                 xor     eax, eax
.text:0000000000009282                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000928A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000009292                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000929A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000929F                 mov     [rsp+0C8h+var_20], r9
.text:00000000000092A7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000092AF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000092B4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000092BC                 xor     r9d, r9d
.text:00000000000092BF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000092C4                 mov     rbp, rax
.text:00000000000092C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000092D0
.text:00000000000092D0 loc_92D0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000092D0                 cmp     r10d, 2Fh ; '/'
.text:00000000000092D4                 ja      short loc_932C
.text:00000000000092D6                 mov     eax, r10d
.text:00000000000092D9                 mov     r11d, 1
.text:00000000000092DF                 add     r10d, 8
.text:00000000000092E3                 add     rax, rbp
.text:00000000000092E6
.text:00000000000092E6 loc_92E6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000092E6                 mov     rax, [rax]
.text:00000000000092E9                 test    rax, rax
.text:00000000000092EC                 mov     [r8+r9*8], rax
.text:00000000000092F0                 jz      short loc_92FC
.text:00000000000092F2                 add     r9, 1
.text:00000000000092F6                 cmp     r9, 0Ah
.text:00000000000092FA                 jnz     short loc_92D0
.text:00000000000092FC
.text:00000000000092FC loc_92FC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000092FC                 test    r11b, r11b
.text:00000000000092FF                 jnz     short loc_9325
.text:0000000000009301
.text:0000000000009301 loc_9301:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000009301                 call    version_etc_arn
.text:0000000000009306                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000930B                 xor     rax, fs:28h
.text:0000000000009314                 jnz     short loc_9320
.text:0000000000009316                 add     rsp, 0B8h
.text:000000000000931D                 pop     rbx
.text:000000000000931E                 pop     rbp
.text:000000000000931F                 retn
.text:0000000000009320 ; ---------------------------------------------------------------------------
.text:0000000000009320
.text:0000000000009320 loc_9320:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000009320                 call    ___stack_chk_fail
.text:0000000000009325 ; ---------------------------------------------------------------------------
.text:0000000000009325
.text:0000000000009325 loc_9325:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000009325                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000932A                 jmp     short loc_9301
.text:000000000000932C ; ---------------------------------------------------------------------------
.text:000000000000932C
.text:000000000000932C loc_932C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000932C                 mov     rax, rbx
.text:000000000000932F                 add     rbx, 8
.text:0000000000009333                 jmp     short loc_92E6
.text:0000000000009333 ; } // starts at 9260
.text:0000000000009333 version_etc     endp
.text:0000000000009333
.text:0000000000009333 ; ---------------------------------------------------------------------------
.text:0000000000009335                 align 20h
.text:0000000000009340
.text:0000000000009340 ; =============== S U B R O U T I N E =======================================
.text:0000000000009340
.text:0000000000009340 ; Attributes: info_from_lumina
.text:0000000000009340
.text:0000000000009340 ; void __cdecl emit_bug_reporting_address()
.text:0000000000009340                 public emit_bug_reporting_address
.text:0000000000009340 emit_bug_reporting_address proc near
.text:0000000000009340 ; __unwind {
.text:0000000000009340                 push    rbx
.text:0000000000009341                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000009348                 mov     edx, 5          ; category
.text:000000000000934D                 xor     edi, edi        ; domainname
.text:000000000000934F                 call    _dcgettext
.text:0000000000009354                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000935B                 mov     rsi, rax
.text:000000000000935E                 mov     edi, 1
.text:0000000000009363                 xor     eax, eax
.text:0000000000009365                 call    ___printf_chk
.text:000000000000936A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000009371                 mov     edx, 5          ; category
.text:0000000000009376                 xor     edi, edi        ; domainname
.text:0000000000009378                 call    _dcgettext
.text:000000000000937D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000009384                 lea     rdx, unk_C772
.text:000000000000938B                 mov     rsi, rax
.text:000000000000938E                 mov     edi, 1
.text:0000000000009393                 xor     eax, eax
.text:0000000000009395                 call    ___printf_chk
.text:000000000000939A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000093A1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000093A8                 xor     edi, edi        ; domainname
.text:00000000000093AA                 mov     edx, 5          ; category
.text:00000000000093AF                 call    _dcgettext
.text:00000000000093B4                 mov     rsi, rbx        ; stream
.text:00000000000093B7                 mov     rdi, rax        ; s
.text:00000000000093BA                 pop     rbx
.text:00000000000093BB                 jmp     _fputs_unlocked
.text:00000000000093BB ; } // starts at 9340
.text:00000000000093BB emit_bug_reporting_address endp
.text:00000000000093BB
.text:00000000000093C0
.text:00000000000093C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000093C0
.text:00000000000093C0
.text:00000000000093C0                 public xmalloc
.text:00000000000093C0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:00000000000093C0                                         ; quotearg_alloc_mem+81↑p ...
.text:00000000000093C0 ; __unwind {
.text:00000000000093C0                 push    rbx
.text:00000000000093C1                 mov     rbx, rdi
.text:00000000000093C4                 call    _malloc
.text:00000000000093C9                 test    rax, rax
.text:00000000000093CC                 jnz     short loc_93D3
.text:00000000000093CE                 test    rbx, rbx
.text:00000000000093D1                 jnz     short loc_93D5
.text:00000000000093D3
.text:00000000000093D3 loc_93D3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000093D3                 pop     rbx
.text:00000000000093D4                 retn
.text:00000000000093D5 ; ---------------------------------------------------------------------------
.text:00000000000093D5
.text:00000000000093D5 loc_93D5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000093D5                 call    xalloc_die
.text:00000000000093D5 ; } // starts at 93C0
.text:00000000000093D5 xmalloc         endp
.text:00000000000093D5
.text:00000000000093D5 ; ---------------------------------------------------------------------------
.text:00000000000093DA                 align 20h
.text:00000000000093E0
.text:00000000000093E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000093E0
.text:00000000000093E0 ; Attributes: info_from_lumina
.text:00000000000093E0
.text:00000000000093E0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000093E0                 public xnmalloc
.text:00000000000093E0 xnmalloc        proc near
.text:00000000000093E0 ; __unwind {
.text:00000000000093E0                 mov     rax, rdi
.text:00000000000093E3                 mul     rsi
.text:00000000000093E6                 mov     rdi, rax
.text:00000000000093E9                 seto    al
.text:00000000000093EC                 test    rdi, rdi
.text:00000000000093EF                 js      short loc_93FB
.text:00000000000093F1                 movzx   eax, al
.text:00000000000093F4                 test    rax, rax
.text:00000000000093F7                 jnz     short loc_93FB
.text:00000000000093F9                 jmp     short xmalloc
.text:00000000000093FB ; ---------------------------------------------------------------------------
.text:00000000000093FB
.text:00000000000093FB loc_93FB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000093FB                                         ; xnmalloc+17↑j
.text:00000000000093FB                 sub     rsp, 8
.text:00000000000093FF                 call    xalloc_die
.text:00000000000093FF ; } // starts at 93E0
.text:00000000000093FF xnmalloc        endp
.text:00000000000093FF
.text:00000000000093FF ; ---------------------------------------------------------------------------
.text:0000000000009404                 align 10h
.text:0000000000009410
.text:0000000000009410 ; =============== S U B R O U T I N E =======================================
.text:0000000000009410
.text:0000000000009410
.text:0000000000009410                 public xcharalloc
.text:0000000000009410 xcharalloc      proc near
.text:0000000000009410 ; __unwind {
.text:0000000000009410                 jmp     short xmalloc
.text:0000000000009410 ; } // starts at 9410
.text:0000000000009410 xcharalloc      endp
.text:0000000000009410
.text:0000000000009410 ; ---------------------------------------------------------------------------
.text:0000000000009412                 align 20h
.text:0000000000009420
.text:0000000000009420 ; =============== S U B R O U T I N E =======================================
.text:0000000000009420
.text:0000000000009420 ; Attributes: info_from_lumina
.text:0000000000009420
.text:0000000000009420 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000009420                 public xrealloc
.text:0000000000009420 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000009420                                         ; quotearg_n_options+182↑p ...
.text:0000000000009420 ; __unwind {
.text:0000000000009420                 test    rsi, rsi
.text:0000000000009423                 push    rbx
.text:0000000000009424                 mov     rbx, rsi
.text:0000000000009427                 jnz     short loc_942E
.text:0000000000009429                 test    rdi, rdi
.text:000000000000942C                 jnz     short loc_9448
.text:000000000000942E
.text:000000000000942E loc_942E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000942E                 mov     rsi, rbx        ; size
.text:0000000000009431                 call    _realloc
.text:0000000000009436                 test    rax, rax
.text:0000000000009439                 jnz     short loc_9440
.text:000000000000943B                 test    rbx, rbx
.text:000000000000943E                 jnz     short loc_9451
.text:0000000000009440
.text:0000000000009440 loc_9440:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000009440                 pop     rbx
.text:0000000000009441                 retn
.text:0000000000009441 ; ---------------------------------------------------------------------------
.text:0000000000009442                 align 8
.text:0000000000009448
.text:0000000000009448 loc_9448:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000009448                 call    _free
.text:000000000000944D                 xor     eax, eax
.text:000000000000944F                 pop     rbx
.text:0000000000009450                 retn
.text:0000000000009451 ; ---------------------------------------------------------------------------
.text:0000000000009451
.text:0000000000009451 loc_9451:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000009451                 call    xalloc_die
.text:0000000000009451 ; } // starts at 9420
.text:0000000000009451 xrealloc        endp
.text:0000000000009451
.text:0000000000009451 ; ---------------------------------------------------------------------------
.text:0000000000009456                 align 20h
.text:0000000000009460
.text:0000000000009460 ; =============== S U B R O U T I N E =======================================
.text:0000000000009460
.text:0000000000009460 ; Attributes: info_from_lumina
.text:0000000000009460
.text:0000000000009460 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000009460                 public xnrealloc
.text:0000000000009460 xnrealloc       proc near
.text:0000000000009460 ; __unwind {
.text:0000000000009460                 mov     rax, rsi
.text:0000000000009463                 mul     rdx
.text:0000000000009466                 mov     rsi, rax
.text:0000000000009469                 seto    al
.text:000000000000946C                 test    rsi, rsi
.text:000000000000946F                 js      short loc_947B
.text:0000000000009471                 movzx   eax, al
.text:0000000000009474                 test    rax, rax
.text:0000000000009477                 jnz     short loc_947B
.text:0000000000009479                 jmp     short xrealloc
.text:000000000000947B ; ---------------------------------------------------------------------------
.text:000000000000947B
.text:000000000000947B loc_947B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000947B                                         ; xnrealloc+17↑j
.text:000000000000947B                 sub     rsp, 8
.text:000000000000947F                 call    xalloc_die
.text:000000000000947F ; } // starts at 9460
.text:000000000000947F xnrealloc       endp
.text:000000000000947F
.text:000000000000947F ; ---------------------------------------------------------------------------
.text:0000000000009484                 align 10h
.text:0000000000009490
.text:0000000000009490 ; =============== S U B R O U T I N E =======================================
.text:0000000000009490
.text:0000000000009490 ; Attributes: info_from_lumina
.text:0000000000009490
.text:0000000000009490 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000009490                 public x2nrealloc
.text:0000000000009490 x2nrealloc      proc near
.text:0000000000009490 ; __unwind {
.text:0000000000009490                 test    rdi, rdi
.text:0000000000009493                 mov     r9, rdx
.text:0000000000009496                 mov     rcx, [rsi]
.text:0000000000009499                 jz      short loc_94D0
.text:000000000000949B                 xor     edx, edx
.text:000000000000949D                 mov     rax, 5555555555555554h
.text:00000000000094A7                 div     r9
.text:00000000000094AA                 cmp     rax, rcx
.text:00000000000094AD                 jbe     short loc_94EB
.text:00000000000094AF                 mov     rax, rcx
.text:00000000000094B2                 shr     rax, 1
.text:00000000000094B5                 lea     rcx, [rax+rcx+1]
.text:00000000000094BA
.text:00000000000094BA loc_94BA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000094BA                 mov     [rsi], rcx
.text:00000000000094BD                 imul    rcx, r9
.text:00000000000094C1                 mov     rsi, rcx
.text:00000000000094C4                 jmp     xrealloc
.text:00000000000094C4 ; ---------------------------------------------------------------------------
.text:00000000000094C9                 align 10h
.text:00000000000094D0
.text:00000000000094D0 loc_94D0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000094D0                 test    rcx, rcx
.text:00000000000094D3                 jz      short loc_94F8
.text:00000000000094D5
.text:00000000000094D5 loc_94D5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000094D5                 mov     rax, rcx
.text:00000000000094D8                 mul     r9
.text:00000000000094DB                 seto    dl
.text:00000000000094DE                 test    rax, rax
.text:00000000000094E1                 movzx   edx, dl
.text:00000000000094E4                 js      short loc_94EB
.text:00000000000094E6                 test    rdx, rdx
.text:00000000000094E9                 jz      short loc_94BA
.text:00000000000094EB
.text:00000000000094EB loc_94EB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000094EB                                         ; x2nrealloc+54↑j
.text:00000000000094EB                 sub     rsp, 8
.text:00000000000094EF                 call    xalloc_die
.text:00000000000094EF ; ---------------------------------------------------------------------------
.text:00000000000094F4                 align 8
.text:00000000000094F8
.text:00000000000094F8 loc_94F8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000094F8                 xor     edx, edx
.text:00000000000094FA                 mov     eax, 80h
.text:00000000000094FF                 xor     r8d, r8d
.text:0000000000009502                 div     r9
.text:0000000000009505                 test    rax, rax
.text:0000000000009508                 setz    r8b
.text:000000000000950C                 lea     rcx, [r8+rax]
.text:0000000000009510                 jmp     short loc_94D5
.text:0000000000009510 ; } // starts at 9490
.text:0000000000009510 x2nrealloc      endp
.text:0000000000009510
.text:0000000000009510 ; ---------------------------------------------------------------------------
.text:0000000000009512                 align 20h
.text:0000000000009520
.text:0000000000009520 ; =============== S U B R O U T I N E =======================================
.text:0000000000009520
.text:0000000000009520 ; Attributes: info_from_lumina
.text:0000000000009520
.text:0000000000009520 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000009520                 public x2realloc
.text:0000000000009520 x2realloc       proc near
.text:0000000000009520 ; __unwind {
.text:0000000000009520                 test    rdi, rdi
.text:0000000000009523                 mov     rax, [rsi]
.text:0000000000009526                 jz      short loc_9550
.text:0000000000009528                 mov     rdx, 5555555555555553h
.text:0000000000009532                 cmp     rax, rdx
.text:0000000000009535                 ja      short loc_9561
.text:0000000000009537                 mov     rdx, rax
.text:000000000000953A                 shr     rdx, 1
.text:000000000000953D                 lea     rax, [rdx+rax+1]
.text:0000000000009542
.text:0000000000009542 loc_9542:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000009542                 mov     [rsi], rax
.text:0000000000009545                 mov     rsi, rax
.text:0000000000009548                 jmp     xrealloc
.text:0000000000009548 ; ---------------------------------------------------------------------------
.text:000000000000954D                 align 10h
.text:0000000000009550
.text:0000000000009550 loc_9550:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000009550                 test    rax, rax
.text:0000000000009553                 mov     edx, 80h
.text:0000000000009558                 cmovz   rax, rdx
.text:000000000000955C                 test    rax, rax
.text:000000000000955F                 jns     short loc_9542
.text:0000000000009561
.text:0000000000009561 loc_9561:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000009561                 sub     rsp, 8
.text:0000000000009565                 call    xalloc_die
.text:0000000000009565 ; } // starts at 9520
.text:0000000000009565 x2realloc       endp
.text:0000000000009565
.text:0000000000009565 ; ---------------------------------------------------------------------------
.text:000000000000956A                 align 10h
.text:0000000000009570
.text:0000000000009570 ; =============== S U B R O U T I N E =======================================
.text:0000000000009570
.text:0000000000009570
.text:0000000000009570 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000009570                 public xzalloc
.text:0000000000009570 xzalloc         proc near
.text:0000000000009570 ; __unwind {
.text:0000000000009570                 push    rbx
.text:0000000000009571                 mov     rbx, rdi
.text:0000000000009574                 call    xmalloc
.text:0000000000009579                 mov     rdx, rbx        ; n
.text:000000000000957C                 xor     esi, esi        ; c
.text:000000000000957E                 mov     rdi, rax        ; s
.text:0000000000009581                 pop     rbx
.text:0000000000009582                 jmp     _memset
.text:0000000000009582 ; } // starts at 9570
.text:0000000000009582 xzalloc         endp
.text:0000000000009582
.text:0000000000009582 ; ---------------------------------------------------------------------------
.text:0000000000009587                 align 10h
.text:0000000000009590
.text:0000000000009590 ; =============== S U B R O U T I N E =======================================
.text:0000000000009590
.text:0000000000009590 ; Attributes: info_from_lumina
.text:0000000000009590
.text:0000000000009590 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000009590                 public xcalloc
.text:0000000000009590 xcalloc         proc near
.text:0000000000009590 ; __unwind {
.text:0000000000009590                 mov     rax, rdi
.text:0000000000009593                 sub     rsp, 8
.text:0000000000009597                 mul     rsi
.text:000000000000959A                 seto    dl
.text:000000000000959D                 test    rax, rax
.text:00000000000095A0                 js      short loc_95B9
.text:00000000000095A2                 movzx   edx, dl
.text:00000000000095A5                 test    rdx, rdx
.text:00000000000095A8                 jnz     short loc_95B9
.text:00000000000095AA                 call    _calloc
.text:00000000000095AF                 test    rax, rax
.text:00000000000095B2                 jz      short loc_95B9
.text:00000000000095B4                 add     rsp, 8
.text:00000000000095B8                 retn
.text:00000000000095B9 ; ---------------------------------------------------------------------------
.text:00000000000095B9
.text:00000000000095B9 loc_95B9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000095B9                                         ; xcalloc+18↑j ...
.text:00000000000095B9                 call    xalloc_die
.text:00000000000095B9 ; } // starts at 9590
.text:00000000000095B9 xcalloc         endp
.text:00000000000095B9
.text:00000000000095B9 ; ---------------------------------------------------------------------------
.text:00000000000095BE                 align 20h
.text:00000000000095C0
.text:00000000000095C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000095C0
.text:00000000000095C0 ; Attributes: info_from_lumina
.text:00000000000095C0
.text:00000000000095C0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000095C0                 public xmemdup
.text:00000000000095C0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000095C0                                         ; xstrdup+11↓j
.text:00000000000095C0 ; __unwind {
.text:00000000000095C0                 push    rbp
.text:00000000000095C1                 push    rbx
.text:00000000000095C2                 mov     rbp, rdi
.text:00000000000095C5                 mov     rdi, rsi
.text:00000000000095C8                 mov     rbx, rsi
.text:00000000000095CB                 sub     rsp, 8
.text:00000000000095CF                 call    xmalloc
.text:00000000000095D4                 add     rsp, 8
.text:00000000000095D8                 mov     rdx, rbx        ; n
.text:00000000000095DB                 mov     rsi, rbp        ; src
.text:00000000000095DE                 pop     rbx
.text:00000000000095DF                 pop     rbp
.text:00000000000095E0                 mov     rdi, rax        ; dest
.text:00000000000095E3                 jmp     _memcpy
.text:00000000000095E3 ; } // starts at 95C0
.text:00000000000095E3 xmemdup         endp
.text:00000000000095E3
.text:00000000000095E3 ; ---------------------------------------------------------------------------
.text:00000000000095E8                 align 10h
.text:00000000000095F0
.text:00000000000095F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000095F0
.text:00000000000095F0
.text:00000000000095F0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000095F0                 public xstrdup
.text:00000000000095F0 xstrdup         proc near
.text:00000000000095F0 ; __unwind {
.text:00000000000095F0                 push    rbx
.text:00000000000095F1                 mov     rbx, rdi
.text:00000000000095F4                 call    _strlen
.text:00000000000095F9                 mov     rdi, rbx        ; src
.text:00000000000095FC                 lea     rsi, [rax+1]    ; n
.text:0000000000009600                 pop     rbx
.text:0000000000009601                 jmp     short xmemdup
.text:0000000000009601 ; } // starts at 95F0
.text:0000000000009601 xstrdup         endp
.text:0000000000009601
.text:0000000000009601 ; ---------------------------------------------------------------------------
.text:0000000000009603                 align 10h
.text:0000000000009610
.text:0000000000009610 ; =============== S U B R O U T I N E =======================================
.text:0000000000009610
.text:0000000000009610 ; Attributes: noreturn info_from_lumina
.text:0000000000009610
.text:0000000000009610 ; void __cdecl xalloc_die()
.text:0000000000009610                 public xalloc_die
.text:0000000000009610 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_8516↑p
.text:0000000000009610                                         ; xmalloc:loc_93D5↑p ...
.text:0000000000009610 ; __unwind {
.text:0000000000009610                 lea     rsi, aMemoryExhauste_1 ; "memory exhausted"
.text:0000000000009617                 sub     rsp, 8
.text:000000000000961B                 mov     edx, 5          ; category
.text:0000000000009620                 xor     edi, edi        ; domainname
.text:0000000000009622                 call    _dcgettext
.text:0000000000009627                 mov     edi, cs:exit_failure ; status
.text:000000000000962D                 lea     rdx, aLuBytesSCopied+1Bh ; format
.text:0000000000009634                 mov     rcx, rax
.text:0000000000009637                 xor     esi, esi        ; errnum
.text:0000000000009639                 xor     eax, eax
.text:000000000000963B                 call    _error
.text:0000000000009640                 call    _abort
.text:0000000000009640 ; } // starts at 9610
.text:0000000000009640 xalloc_die      endp
.text:0000000000009640
.text:0000000000009640 ; ---------------------------------------------------------------------------
.text:0000000000009645                 align 10h
.text:0000000000009650
.text:0000000000009650 ; =============== S U B R O U T I N E =======================================
.text:0000000000009650
.text:0000000000009650
.text:0000000000009650 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000009650                 public xstrtoumax
.text:0000000000009650 xstrtoumax      proc near               ; CODE XREF: parse_integer+36↑p
.text:0000000000009650                                         ; human_options+AA↑p
.text:0000000000009650
.text:0000000000009650 base            = dword ptr -50h
.text:0000000000009650 endptr          = qword ptr -48h
.text:0000000000009650 var_40          = qword ptr -40h
.text:0000000000009650
.text:0000000000009650 ; __unwind {
.text:0000000000009650                 push    r15
.text:0000000000009652                 push    r14
.text:0000000000009654                 push    r13
.text:0000000000009656                 push    r12
.text:0000000000009658                 push    rbp
.text:0000000000009659                 push    rbx
.text:000000000000965A                 sub     rsp, 28h
.text:000000000000965E                 mov     rax, fs:28h
.text:0000000000009667                 mov     [rsp+58h+var_40], rax
.text:000000000000966C                 xor     eax, eax
.text:000000000000966E                 cmp     edx, 24h ; '$'
.text:0000000000009671                 ja      loc_99D5
.text:0000000000009677                 lea     rax, [rsp+58h+endptr]
.text:000000000000967C                 mov     r15, rsi
.text:000000000000967F                 test    rsi, rsi
.text:0000000000009682                 mov     rbp, rdi
.text:0000000000009685                 mov     [rsp+58h+base], edx
.text:0000000000009689                 mov     r14, rcx
.text:000000000000968C                 mov     r13, r8
.text:000000000000968F                 cmovz   r15, rax
.text:0000000000009693                 call    ___errno_location
.text:0000000000009698                 mov     dword ptr [rax], 0
.text:000000000000969E                 mov     r12, rax
.text:00000000000096A1                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000096A5                 call    ___ctype_b_loc
.text:00000000000096AA                 mov     edx, [rsp+58h+base] ; base
.text:00000000000096AE                 mov     rsi, [rax]
.text:00000000000096B1                 mov     rax, rbp
.text:00000000000096B4                 jmp     short loc_96C7
.text:00000000000096B4 ; ---------------------------------------------------------------------------
.text:00000000000096B6                 align 20h
.text:00000000000096C0
.text:00000000000096C0 loc_96C0:                               ; CODE XREF: xstrtoumax+7F↓j
.text:00000000000096C0                 add     rax, 1
.text:00000000000096C4                 movzx   ebx, byte ptr [rax]
.text:00000000000096C7
.text:00000000000096C7 loc_96C7:                               ; CODE XREF: xstrtoumax+64↑j
.text:00000000000096C7                 movzx   ecx, bl
.text:00000000000096CA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:00000000000096CF                 jnz     short loc_96C0
.text:00000000000096D1                 cmp     bl, 2Dh ; '-'
.text:00000000000096D4                 jz      short loc_9728
.text:00000000000096D6                 xor     ecx, ecx        ; group
.text:00000000000096D8                 mov     rsi, r15        ; endptr
.text:00000000000096DB                 mov     rdi, rbp        ; nptr
.text:00000000000096DE                 call    ___strtoul_internal
.text:00000000000096E3                 mov     rcx, [r15]
.text:00000000000096E6                 mov     rbx, rax
.text:00000000000096E9                 cmp     rcx, rbp
.text:00000000000096EC                 jz      short loc_9718
.text:00000000000096EE                 mov     eax, [r12]
.text:00000000000096F2                 test    eax, eax
.text:00000000000096F4                 jz      short loc_9758
.text:00000000000096F6                 cmp     eax, 22h ; '"'
.text:00000000000096F9                 mov     ebp, 1
.text:00000000000096FE                 jnz     short loc_9728
.text:0000000000009700
.text:0000000000009700 loc_9700:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000009700                 test    r13, r13
.text:0000000000009703                 jz      short loc_970E
.text:0000000000009705                 movzx   r12d, byte ptr [rcx]
.text:0000000000009709                 test    r12b, r12b
.text:000000000000970C                 jnz     short loc_9787
.text:000000000000970E
.text:000000000000970E loc_970E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000970E                 mov     [r14], rbx
.text:0000000000009711                 jmp     short loc_972D
.text:0000000000009711 ; ---------------------------------------------------------------------------
.text:0000000000009713                 align 8
.text:0000000000009718
.text:0000000000009718 loc_9718:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000009718                 test    r13, r13
.text:000000000000971B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000009720                 jnz     short loc_9760
.text:0000000000009722                 nop     word ptr [rax+rax+00h]
.text:0000000000009728
.text:0000000000009728 loc_9728:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000009728                                         ; xstrtoumax+AE↑j ...
.text:0000000000009728                 mov     ebp, 4
.text:000000000000972D
.text:000000000000972D loc_972D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:000000000000972D                                         ; xstrtoumax+217↓j ...
.text:000000000000972D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000009732                 xor     rdi, fs:28h
.text:000000000000973B                 mov     eax, ebp
.text:000000000000973D                 jnz     loc_99D0
.text:0000000000009743                 add     rsp, 28h
.text:0000000000009747                 pop     rbx
.text:0000000000009748                 pop     rbp
.text:0000000000009749                 pop     r12
.text:000000000000974B                 pop     r13
.text:000000000000974D                 pop     r14
.text:000000000000974F                 pop     r15
.text:0000000000009751                 retn
.text:0000000000009751 ; ---------------------------------------------------------------------------
.text:0000000000009752                 align 8
.text:0000000000009758
.text:0000000000009758 loc_9758:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000009758                 xor     ebp, ebp
.text:000000000000975A                 jmp     short loc_9700
.text:000000000000975A ; ---------------------------------------------------------------------------
.text:000000000000975C                 align 20h
.text:0000000000009760
.text:0000000000009760 loc_9760:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000009760                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000009765                 test    r12b, r12b
.text:0000000000009768                 jz      short loc_9728
.text:000000000000976A                 movsx   esi, r12b       ; c
.text:000000000000976E                 mov     rdi, r13        ; s
.text:0000000000009771                 xor     ebp, ebp
.text:0000000000009773                 call    _strchr
.text:0000000000009778                 test    rax, rax
.text:000000000000977B                 mov     ebx, 1
.text:0000000000009780                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000009785                 jz      short loc_9728
.text:0000000000009787
.text:0000000000009787 loc_9787:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000009787                 movsx   esi, r12b       ; c
.text:000000000000978B                 mov     rdi, r13        ; s
.text:000000000000978E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000009793                 call    _strchr
.text:0000000000009798                 test    rax, rax
.text:000000000000979B                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000097A0                 jz      def_9826        ; jumptable 0000000000009826 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000097A6                 lea     eax, [r12-45h]
.text:00000000000097AB                 cmp     al, 2Fh ; '/'
.text:00000000000097AD                 ja      short loc_9800
.text:00000000000097AF                 mov     rdx, 814400308945h
.text:00000000000097B9                 bt      rdx, rax
.text:00000000000097BD                 jnb     short loc_9800
.text:00000000000097BF                 mov     esi, 30h ; '0'  ; c
.text:00000000000097C4                 mov     rdi, r13        ; s
.text:00000000000097C7                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000097CC                 call    _strchr
.text:00000000000097D1                 test    rax, rax
.text:00000000000097D4                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000097D9                 jz      short loc_9800
.text:00000000000097DB                 movzx   eax, byte ptr [rcx+1]
.text:00000000000097DF                 cmp     al, 44h ; 'D'
.text:00000000000097E1                 jz      short loc_97EF
.text:00000000000097E3                 cmp     al, 69h ; 'i'
.text:00000000000097E5                 jz      loc_99B8
.text:00000000000097EB                 cmp     al, 42h ; 'B'
.text:00000000000097ED                 jnz     short loc_9800
.text:00000000000097EF
.text:00000000000097EF loc_97EF:                               ; CODE XREF: xstrtoumax+191↑j
.text:00000000000097EF                 mov     edi, 2
.text:00000000000097F4                 mov     esi, 3E8h
.text:00000000000097F9                 jmp     short loc_980A
.text:00000000000097F9 ; ---------------------------------------------------------------------------
.text:00000000000097FB                 align 20h
.text:0000000000009800
.text:0000000000009800 loc_9800:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000009800                                         ; xstrtoumax+16D↑j ...
.text:0000000000009800                 mov     edi, 1
.text:0000000000009805                 mov     esi, 400h
.text:000000000000980A
.text:000000000000980A loc_980A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000980A                                         ; xstrtoumax+37B↓j
.text:000000000000980A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000980E                 cmp     r12b, 35h
.text:0000000000009812                 ja      short def_9826  ; jumptable 0000000000009826 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000009814                 lea     rdx, jpt_9826
.text:000000000000981B                 movzx   r12d, r12b
.text:000000000000981F                 movsxd  rax, ds:(jpt_9826 - 0EB08h)[rdx+r12*4]
.text:0000000000009823                 add     rax, rdx
.text:0000000000009826                 jmp     rax             ; switch jump
.text:0000000000009828 ; ---------------------------------------------------------------------------
.text:0000000000009828
.text:0000000000009828 loc_9828:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000009828                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:0000000000009828                 mov     rax, rbx        ; jumptable 0000000000009826 cases 77,109
.text:000000000000982B                 mul     rsi
.text:000000000000982E                 jo      loc_9A21
.text:0000000000009834                 xor     r8d, r8d
.text:0000000000009837
.text:0000000000009837 loc_9837:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000009837                                         ; xstrtoumax+35E↓j ...
.text:0000000000009837                 mul     rsi
.text:000000000000983A                 jo      loc_9A12
.text:0000000000009840                 mov     rbx, rax
.text:0000000000009843
.text:0000000000009843 loc_9843:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000009843                 or      ebp, r8d
.text:0000000000009846                 db      2Eh
.text:0000000000009846                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009850
.text:0000000000009850 loc_9850:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000009850                                         ; xstrtoumax+23B↓j ...
.text:0000000000009850                 movsxd  rdi, edi        ; jumptable 0000000000009826 case 99
.text:0000000000009853                 mov     eax, ebp
.text:0000000000009855                 add     rcx, rdi
.text:0000000000009858                 or      eax, 2
.text:000000000000985B                 mov     [r15], rcx
.text:000000000000985E                 cmp     byte ptr [rcx], 0
.text:0000000000009861                 mov     [r14], rbx
.text:0000000000009864                 cmovnz  ebp, eax
.text:0000000000009867                 jmp     loc_972D
.text:000000000000986C ; ---------------------------------------------------------------------------
.text:000000000000986C
.text:000000000000986C def_9826:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000986C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000986C                 mov     [r14], rbx      ; jumptable 0000000000009826 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000986F                 or      ebp, 2
.text:0000000000009872                 jmp     loc_972D
.text:0000000000009877 ; ---------------------------------------------------------------------------
.text:0000000000009877
.text:0000000000009877 loc_9877:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000009877                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:0000000000009877                 mov     edx, 2          ; jumptable 0000000000009826 case 119
.text:000000000000987C                 mov     rax, rdx
.text:000000000000987F                 mul     rbx
.text:0000000000009882                 jo      loc_991E
.text:0000000000009888                 add     rbx, rbx
.text:000000000000988B                 jmp     short loc_9850  ; jumptable 0000000000009826 case 99
.text:000000000000988D ; ---------------------------------------------------------------------------
.text:000000000000988D
.text:000000000000988D loc_988D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000988D                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:000000000000988D                 mov     edx, 200h       ; jumptable 0000000000009826 case 98
.text:0000000000009892                 mov     rax, rdx
.text:0000000000009895                 mul     rbx
.text:0000000000009898                 jo      loc_991E
.text:000000000000989E                 shl     rbx, 9
.text:00000000000098A2                 jmp     short loc_9850  ; jumptable 0000000000009826 case 99
.text:00000000000098A4 ; ---------------------------------------------------------------------------
.text:00000000000098A4
.text:00000000000098A4 loc_98A4:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000098A4                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:00000000000098A4                 mov     r8d, 7          ; jumptable 0000000000009826 case 90
.text:00000000000098AA                 xor     r9d, r9d
.text:00000000000098AD                 nop     dword ptr [rax]
.text:00000000000098B0
.text:00000000000098B0 loc_98B0:                               ; CODE XREF: xstrtoumax+273↓j
.text:00000000000098B0                 mov     rax, rbx
.text:00000000000098B3                 mul     rsi
.text:00000000000098B6                 mov     rbx, rax
.text:00000000000098B9                 jo      loc_9A4E
.text:00000000000098BF
.text:00000000000098BF loc_98BF:                               ; CODE XREF: xstrtoumax+408↓j
.text:00000000000098BF                 sub     r8d, 1
.text:00000000000098C3                 jnz     short loc_98B0
.text:00000000000098C5
.text:00000000000098C5 loc_98C5:                               ; CODE XREF: xstrtoumax+29D↓j
.text:00000000000098C5                                         ; xstrtoumax+2BD↓j ...
.text:00000000000098C5                 or      ebp, r9d
.text:00000000000098C8                 jmp     short loc_9850  ; jumptable 0000000000009826 case 99
.text:00000000000098CA ; ---------------------------------------------------------------------------
.text:00000000000098CA
.text:00000000000098CA loc_98CA:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000098CA                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:00000000000098CA                 mov     r8d, 8          ; jumptable 0000000000009826 case 89
.text:00000000000098D0                 xor     r9d, r9d
.text:00000000000098D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000098D8
.text:00000000000098D8 loc_98D8:                               ; CODE XREF: xstrtoumax+29B↓j
.text:00000000000098D8                 mov     rax, rbx
.text:00000000000098DB                 mul     rsi
.text:00000000000098DE                 mov     rbx, rax
.text:00000000000098E1                 jo      loc_9A30
.text:00000000000098E7
.text:00000000000098E7 loc_98E7:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:00000000000098E7                 sub     r8d, 1
.text:00000000000098EB                 jnz     short loc_98D8
.text:00000000000098ED                 jmp     short loc_98C5
.text:00000000000098EF ; ---------------------------------------------------------------------------
.text:00000000000098EF
.text:00000000000098EF loc_98EF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000098EF                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:00000000000098EF                 mov     r8d, 4          ; jumptable 0000000000009826 cases 84,116
.text:00000000000098F5                 xor     r9d, r9d
.text:00000000000098F8
.text:00000000000098F8 loc_98F8:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:00000000000098F8                 mov     rax, rbx
.text:00000000000098FB                 mul     rsi
.text:00000000000098FE                 mov     rbx, rax
.text:0000000000009901                 jo      loc_9A03
.text:0000000000009907
.text:0000000000009907 loc_9907:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000009907                 sub     r8d, 1
.text:000000000000990B                 jnz     short loc_98F8
.text:000000000000990D                 jmp     short loc_98C5
.text:000000000000990F ; ---------------------------------------------------------------------------
.text:000000000000990F
.text:000000000000990F loc_990F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000990F                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:000000000000990F                 mov     rax, rbx        ; jumptable 0000000000009826 cases 75,107
.text:0000000000009912                 mul     rsi
.text:0000000000009915                 mov     rbx, rax
.text:0000000000009918                 jno     loc_9850        ; jumptable 0000000000009826 case 99
.text:000000000000991E
.text:000000000000991E loc_991E:                               ; CODE XREF: xstrtoumax+232↑j
.text:000000000000991E                                         ; xstrtoumax+248↑j ...
.text:000000000000991E                 mov     ebp, 1
.text:0000000000009923                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009927                 jmp     loc_9850        ; jumptable 0000000000009826 case 99
.text:0000000000009927 ; ---------------------------------------------------------------------------
.text:000000000000992C                 align 10h
.text:0000000000009930
.text:0000000000009930 loc_9930:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000009930                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:0000000000009930                 mov     r8d, 5          ; jumptable 0000000000009826 case 80
.text:0000000000009936                 xor     r9d, r9d
.text:0000000000009939
.text:0000000000009939 loc_9939:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000009939                 mov     rax, rbx
.text:000000000000993C                 mul     rsi
.text:000000000000993F                 mov     rbx, rax
.text:0000000000009942                 jo      loc_9A3F
.text:0000000000009948
.text:0000000000009948 loc_9948:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000009948                 sub     r8d, 1
.text:000000000000994C                 jnz     short loc_9939
.text:000000000000994E                 jmp     loc_98C5
.text:0000000000009953 ; ---------------------------------------------------------------------------
.text:0000000000009953
.text:0000000000009953 loc_9953:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000009953                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:0000000000009953                 mov     r8d, 6          ; jumptable 0000000000009826 case 69
.text:0000000000009959                 xor     r9d, r9d
.text:000000000000995C
.text:000000000000995C loc_995C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000995C                 mov     rax, rbx
.text:000000000000995F                 mul     rsi
.text:0000000000009962                 mov     rbx, rax
.text:0000000000009965                 jo      loc_99F4
.text:000000000000996B
.text:000000000000996B loc_996B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000996B                 sub     r8d, 1
.text:000000000000996F                 jnz     short loc_995C
.text:0000000000009971                 jmp     loc_98C5
.text:0000000000009976 ; ---------------------------------------------------------------------------
.text:0000000000009976
.text:0000000000009976 loc_9976:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000009976                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:0000000000009976                 mov     edx, 400h       ; jumptable 0000000000009826 case 66
.text:000000000000997B                 mov     rax, rdx
.text:000000000000997E                 mul     rbx
.text:0000000000009981                 jo      short loc_991E
.text:0000000000009983                 shl     rbx, 0Ah
.text:0000000000009987                 jmp     loc_9850        ; jumptable 0000000000009826 case 99
.text:000000000000998C ; ---------------------------------------------------------------------------
.text:000000000000998C
.text:000000000000998C loc_998C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000998C                                         ; DATA XREF: .rodata:jpt_9826↓o
.text:000000000000998C                 mov     rax, rbx        ; jumptable 0000000000009826 cases 71,103
.text:000000000000998F                 mul     rsi
.text:0000000000009992                 jo      loc_9A5D
.text:0000000000009998                 xor     r8d, r8d
.text:000000000000999B
.text:000000000000999B loc_999B:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000999B                 mul     rsi
.text:000000000000999E                 jno     loc_9837
.text:00000000000099A4                 mov     r8d, 1
.text:00000000000099AA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000099AE                 jmp     loc_9837
.text:00000000000099AE ; ---------------------------------------------------------------------------
.text:00000000000099B3                 align 8
.text:00000000000099B8
.text:00000000000099B8 loc_99B8:                               ; CODE XREF: xstrtoumax+195↑j
.text:00000000000099B8                 xor     edi, edi
.text:00000000000099BA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:00000000000099BE                 mov     esi, 400h
.text:00000000000099C3                 setz    dil
.text:00000000000099C7                 lea     edi, [rdi+rdi+1]
.text:00000000000099CB                 jmp     loc_980A
.text:00000000000099D0 ; ---------------------------------------------------------------------------
.text:00000000000099D0
.text:00000000000099D0 loc_99D0:                               ; CODE XREF: xstrtoumax+ED↑j
.text:00000000000099D0                 call    ___stack_chk_fail
.text:00000000000099D5 ; ---------------------------------------------------------------------------
.text:00000000000099D5
.text:00000000000099D5 loc_99D5:                               ; CODE XREF: xstrtoumax+21↑j
.text:00000000000099D5                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:00000000000099DC                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000099E3                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000099EA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000099EF                 call    ___assert_fail
.text:00000000000099F4 ; ---------------------------------------------------------------------------
.text:00000000000099F4
.text:00000000000099F4 loc_99F4:                               ; CODE XREF: xstrtoumax+315↑j
.text:00000000000099F4                 mov     r9d, 1
.text:00000000000099FA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000099FE                 jmp     loc_996B
.text:0000000000009A03 ; ---------------------------------------------------------------------------
.text:0000000000009A03
.text:0000000000009A03 loc_9A03:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000009A03                 mov     r9d, 1
.text:0000000000009A09                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A0D                 jmp     loc_9907
.text:0000000000009A12 ; ---------------------------------------------------------------------------
.text:0000000000009A12
.text:0000000000009A12 loc_9A12:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000009A12                 mov     r8d, 1
.text:0000000000009A18                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A1C                 jmp     loc_9843
.text:0000000000009A21 ; ---------------------------------------------------------------------------
.text:0000000000009A21
.text:0000000000009A21 loc_9A21:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000009A21                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A25                 mov     r8d, 1
.text:0000000000009A2B                 jmp     loc_9837
.text:0000000000009A30 ; ---------------------------------------------------------------------------
.text:0000000000009A30
.text:0000000000009A30 loc_9A30:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000009A30                 mov     r9d, 1
.text:0000000000009A36                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A3A                 jmp     loc_98E7
.text:0000000000009A3F ; ---------------------------------------------------------------------------
.text:0000000000009A3F
.text:0000000000009A3F loc_9A3F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:0000000000009A3F                 mov     r9d, 1
.text:0000000000009A45                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A49                 jmp     loc_9948
.text:0000000000009A4E ; ---------------------------------------------------------------------------
.text:0000000000009A4E
.text:0000000000009A4E loc_9A4E:                               ; CODE XREF: xstrtoumax+269↑j
.text:0000000000009A4E                 mov     r9d, 1
.text:0000000000009A54                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A58                 jmp     loc_98BF
.text:0000000000009A5D ; ---------------------------------------------------------------------------
.text:0000000000009A5D
.text:0000000000009A5D loc_9A5D:                               ; CODE XREF: xstrtoumax+342↑j
.text:0000000000009A5D                 mov     r8d, 1
.text:0000000000009A63                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A67                 jmp     loc_999B
.text:0000000000009A67 ; } // starts at 9650
.text:0000000000009A67 xstrtoumax      endp
.text:0000000000009A67
.text:0000000000009A67 ; ---------------------------------------------------------------------------
.text:0000000000009A6C                 align 10h
.text:0000000000009A70
.text:0000000000009A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A70
.text:0000000000009A70
.text:0000000000009A70 xstrcat         proc near               ; CODE XREF: xvasprintf:loc_9C0A↓p
.text:0000000000009A70
.text:0000000000009A70 var_58          = xmmword ptr -58h
.text:0000000000009A70 var_48          = qword ptr -48h
.text:0000000000009A70 var_40          = qword ptr -40h
.text:0000000000009A70
.text:0000000000009A70 ; __unwind {
.text:0000000000009A70                 push    r15
.text:0000000000009A72                 push    r14
.text:0000000000009A74                 push    r13
.text:0000000000009A76                 push    r12
.text:0000000000009A78                 push    rbp
.text:0000000000009A79                 push    rbx
.text:0000000000009A7A                 sub     rsp, 28h
.text:0000000000009A7E                 mov     rax, fs:28h
.text:0000000000009A87                 mov     [rsp+58h+var_40], rax
.text:0000000000009A8C                 xor     eax, eax
.text:0000000000009A8E                 test    rdi, rdi
.text:0000000000009A91                 movdqu  xmm0, xmmword ptr [rsi]
.text:0000000000009A95                 movups  [rsp+58h+var_58], xmm0
.text:0000000000009A99                 mov     r14, [rsi+10h]
.text:0000000000009A9D                 mov     [rsp+58h+var_48], r14
.text:0000000000009AA2                 jz      loc_9B50
.text:0000000000009AA8                 mov     r12, rdi
.text:0000000000009AAB                 mov     r15, rsi
.text:0000000000009AAE                 mov     rbp, rdi
.text:0000000000009AB1                 xor     ebx, ebx
.text:0000000000009AB3                 mov     r13, 0FFFFFFFFFFFFFFFFh
.text:0000000000009ABA
.text:0000000000009ABA loc_9ABA:                               ; CODE XREF: xstrcat+74↓j
.text:0000000000009ABA                 mov     edx, dword ptr [rsp+58h+var_58]
.text:0000000000009ABD                 cmp     edx, 2Fh ; '/'
.text:0000000000009AC0                 ja      loc_9BA0
.text:0000000000009AC6                 mov     eax, edx
.text:0000000000009AC8                 add     edx, 8
.text:0000000000009ACB                 add     rax, r14
.text:0000000000009ACE                 mov     dword ptr [rsp+58h+var_58], edx
.text:0000000000009AD1
.text:0000000000009AD1 loc_9AD1:                               ; CODE XREF: xstrcat+13E↓j
.text:0000000000009AD1                 mov     rdi, [rax]      ; s
.text:0000000000009AD4                 call    _strlen
.text:0000000000009AD9                 add     rbx, rax
.text:0000000000009ADC                 cmovb   rbx, r13
.text:0000000000009AE0                 sub     rbp, 1
.text:0000000000009AE4                 jnz     short loc_9ABA
.text:0000000000009AE6                 cmp     rbx, 7FFFFFFFh
.text:0000000000009AED                 ja      loc_9B90
.text:0000000000009AF3                 lea     rdi, [rbx+1]
.text:0000000000009AF7                 call    xmalloc
.text:0000000000009AFC                 mov     r14, rax
.text:0000000000009AFF                 mov     rbx, rax
.text:0000000000009B02                 jmp     short loc_9B35
.text:0000000000009B04 ; ---------------------------------------------------------------------------
.text:0000000000009B04
.text:0000000000009B04 loc_9B04:                               ; CODE XREF: xstrcat+CB↓j
.text:0000000000009B04                 mov     eax, edx
.text:0000000000009B06                 add     rax, [r15+10h]
.text:0000000000009B0A                 add     edx, 8
.text:0000000000009B0D                 mov     [r15], edx
.text:0000000000009B10
.text:0000000000009B10 loc_9B10:                               ; CODE XREF: xstrcat+D9↓j
.text:0000000000009B10                 mov     r13, [rax]
.text:0000000000009B13                 mov     rdi, r13        ; s
.text:0000000000009B16                 call    _strlen
.text:0000000000009B1B                 mov     rdi, rbx        ; dest
.text:0000000000009B1E                 mov     rbp, rax
.text:0000000000009B21                 mov     rdx, rax        ; n
.text:0000000000009B24                 mov     rsi, r13        ; src
.text:0000000000009B27                 add     rbx, rbp
.text:0000000000009B2A                 call    _memcpy
.text:0000000000009B2F                 sub     r12, 1
.text:0000000000009B33                 jz      short loc_9B60
.text:0000000000009B35
.text:0000000000009B35 loc_9B35:                               ; CODE XREF: xstrcat+92↑j
.text:0000000000009B35                 mov     edx, [r15]
.text:0000000000009B38                 cmp     edx, 2Fh ; '/'
.text:0000000000009B3B                 jbe     short loc_9B04
.text:0000000000009B3D                 mov     rax, [r15+8]
.text:0000000000009B41                 lea     rdx, [rax+8]
.text:0000000000009B45                 mov     [r15+8], rdx
.text:0000000000009B49                 jmp     short loc_9B10
.text:0000000000009B49 ; ---------------------------------------------------------------------------
.text:0000000000009B4B                 align 10h
.text:0000000000009B50
.text:0000000000009B50 loc_9B50:                               ; CODE XREF: xstrcat+32↑j
.text:0000000000009B50                 mov     edi, 1
.text:0000000000009B55                 call    xmalloc
.text:0000000000009B5A                 mov     rbx, rax
.text:0000000000009B5D                 mov     r14, rax
.text:0000000000009B60
.text:0000000000009B60 loc_9B60:                               ; CODE XREF: xstrcat+C3↑j
.text:0000000000009B60                 mov     byte ptr [rbx], 0
.text:0000000000009B63
.text:0000000000009B63 loc_9B63:                               ; CODE XREF: xstrcat+12E↓j
.text:0000000000009B63                 mov     rcx, [rsp+58h+var_40]
.text:0000000000009B68                 xor     rcx, fs:28h
.text:0000000000009B71                 mov     rax, r14
.text:0000000000009B74                 jnz     short loc_9B85
.text:0000000000009B76                 add     rsp, 28h
.text:0000000000009B7A                 pop     rbx
.text:0000000000009B7B                 pop     rbp
.text:0000000000009B7C                 pop     r12
.text:0000000000009B7E                 pop     r13
.text:0000000000009B80                 pop     r14
.text:0000000000009B82                 pop     r15
.text:0000000000009B84                 retn
.text:0000000000009B85 ; ---------------------------------------------------------------------------
.text:0000000000009B85
.text:0000000000009B85 loc_9B85:                               ; CODE XREF: xstrcat+104↑j
.text:0000000000009B85                 call    ___stack_chk_fail
.text:0000000000009B85 ; ---------------------------------------------------------------------------
.text:0000000000009B8A                 align 10h
.text:0000000000009B90
.text:0000000000009B90 loc_9B90:                               ; CODE XREF: xstrcat+7D↑j
.text:0000000000009B90                 call    ___errno_location
.text:0000000000009B95                 xor     r14d, r14d
.text:0000000000009B98                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000009B9E                 jmp     short loc_9B63
.text:0000000000009BA0 ; ---------------------------------------------------------------------------
.text:0000000000009BA0
.text:0000000000009BA0 loc_9BA0:                               ; CODE XREF: xstrcat+50↑j
.text:0000000000009BA0                 mov     rax, qword ptr [rsp+58h+var_58+8]
.text:0000000000009BA5                 lea     rdx, [rax+8]
.text:0000000000009BA9                 mov     qword ptr [rsp+58h+var_58+8], rdx
.text:0000000000009BAE                 jmp     loc_9AD1
.text:0000000000009BAE ; } // starts at 9A70
.text:0000000000009BAE xstrcat         endp
.text:0000000000009BAE
.text:0000000000009BAE ; ---------------------------------------------------------------------------
.text:0000000000009BB3                 align 20h
.text:0000000000009BC0
.text:0000000000009BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BC0
.text:0000000000009BC0
.text:0000000000009BC0                 public xvasprintf
.text:0000000000009BC0 xvasprintf      proc near               ; CODE XREF: verror_at_line+1A↑p
.text:0000000000009BC0
.text:0000000000009BC0 var_18          = qword ptr -18h
.text:0000000000009BC0 var_10          = qword ptr -10h
.text:0000000000009BC0
.text:0000000000009BC0 ; __unwind {
.text:0000000000009BC0                 sub     rsp, 18h
.text:0000000000009BC4                 mov     rax, fs:28h
.text:0000000000009BCD                 mov     [rsp+18h+var_10], rax
.text:0000000000009BD2                 xor     eax, eax
.text:0000000000009BD4                 movzx   eax, byte ptr [rdi]
.text:0000000000009BD7                 test    al, al
.text:0000000000009BD9                 jz      short loc_9C56
.text:0000000000009BDB                 cmp     al, 25h ; '%'
.text:0000000000009BDD                 mov     r8, rdi
.text:0000000000009BE0                 jnz     short loc_9C18
.text:0000000000009BE2                 cmp     byte ptr [rdi+1], 73h ; 's'
.text:0000000000009BE6                 jnz     short loc_9C18
.text:0000000000009BE8                 xor     edi, edi
.text:0000000000009BEA                 jmp     short loc_9BFD
.text:0000000000009BEA ; ---------------------------------------------------------------------------
.text:0000000000009BEC                 align 10h
.text:0000000000009BF0
.text:0000000000009BF0 loc_9BF0:                               ; CODE XREF: xvasprintf+48↓j
.text:0000000000009BF0                 cmp     cl, 25h ; '%'
.text:0000000000009BF3                 jnz     short loc_9C18
.text:0000000000009BF5                 cmp     byte ptr [r8+rdi*2+1], 73h ; 's'
.text:0000000000009BFB                 jnz     short loc_9C18
.text:0000000000009BFD
.text:0000000000009BFD loc_9BFD:                               ; CODE XREF: xvasprintf+2A↑j
.text:0000000000009BFD                 add     rdi, 1
.text:0000000000009C01                 movzx   ecx, byte ptr [r8+rdi*2]
.text:0000000000009C06                 test    cl, cl
.text:0000000000009C08                 jnz     short loc_9BF0
.text:0000000000009C0A
.text:0000000000009C0A loc_9C0A:                               ; CODE XREF: xvasprintf+98↓j
.text:0000000000009C0A                 call    xstrcat
.text:0000000000009C0F                 jmp     short loc_9C2E
.text:0000000000009C0F ; ---------------------------------------------------------------------------
.text:0000000000009C11                 align 8
.text:0000000000009C18
.text:0000000000009C18 loc_9C18:                               ; CODE XREF: xvasprintf+20↑j
.text:0000000000009C18                                         ; xvasprintf+26↑j ...
.text:0000000000009C18                 mov     rdx, rsi
.text:0000000000009C1B                 mov     rdi, rsp
.text:0000000000009C1E                 mov     rsi, r8
.text:0000000000009C21                 call    u16_u16_vasprintf
.text:0000000000009C26                 test    eax, eax
.text:0000000000009C28                 js      short loc_9C48
.text:0000000000009C2A                 mov     rax, [rsp+18h+var_18]
.text:0000000000009C2E
.text:0000000000009C2E loc_9C2E:                               ; CODE XREF: xvasprintf+4F↑j
.text:0000000000009C2E                                         ; xvasprintf+94↓j
.text:0000000000009C2E                 mov     rdx, [rsp+18h+var_10]
.text:0000000000009C33                 xor     rdx, fs:28h
.text:0000000000009C3C                 jnz     short loc_9C5A
.text:0000000000009C3E                 add     rsp, 18h
.text:0000000000009C42                 retn
.text:0000000000009C42 ; ---------------------------------------------------------------------------
.text:0000000000009C43                 align 8
.text:0000000000009C48
.text:0000000000009C48 loc_9C48:                               ; CODE XREF: xvasprintf+68↑j
.text:0000000000009C48                 call    ___errno_location
.text:0000000000009C4D                 cmp     dword ptr [rax], 0Ch
.text:0000000000009C50                 jz      short loc_9C5F
.text:0000000000009C52                 xor     eax, eax
.text:0000000000009C54                 jmp     short loc_9C2E
.text:0000000000009C56 ; ---------------------------------------------------------------------------
.text:0000000000009C56
.text:0000000000009C56 loc_9C56:                               ; CODE XREF: xvasprintf+19↑j
.text:0000000000009C56                 xor     edi, edi
.text:0000000000009C58                 jmp     short loc_9C0A
.text:0000000000009C5A ; ---------------------------------------------------------------------------
.text:0000000000009C5A
.text:0000000000009C5A loc_9C5A:                               ; CODE XREF: xvasprintf+7C↑j
.text:0000000000009C5A                 call    ___stack_chk_fail
.text:0000000000009C5F ; ---------------------------------------------------------------------------
.text:0000000000009C5F
.text:0000000000009C5F loc_9C5F:                               ; CODE XREF: xvasprintf+90↑j
.text:0000000000009C5F                 call    xalloc_die
.text:0000000000009C5F ; } // starts at 9BC0
.text:0000000000009C5F xvasprintf      endp
.text:0000000000009C5F
.text:0000000000009C5F ; ---------------------------------------------------------------------------
.text:0000000000009C64                 align 10h
.text:0000000000009C70
.text:0000000000009C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C70
.text:0000000000009C70 ; Attributes: info_from_lumina
.text:0000000000009C70
.text:0000000000009C70 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000009C70                 public rpl_fclose
.text:0000000000009C70 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000009C70 ; __unwind {
.text:0000000000009C70                 push    r12
.text:0000000000009C72                 push    rbp
.text:0000000000009C73                 push    rbx
.text:0000000000009C74                 mov     rbx, rdi
.text:0000000000009C77                 call    _fileno
.text:0000000000009C7C                 test    eax, eax
.text:0000000000009C7E                 mov     rdi, rbx        ; fp
.text:0000000000009C81                 js      short loc_9CD7
.text:0000000000009C83                 call    ___freading
.text:0000000000009C88                 test    eax, eax
.text:0000000000009C8A                 jnz     short loc_9CB8
.text:0000000000009C8C
.text:0000000000009C8C loc_9C8C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000009C8C                 mov     rdi, rbx        ; stream
.text:0000000000009C8F                 call    rpl_fflush
.text:0000000000009C94                 test    eax, eax
.text:0000000000009C96                 jz      short loc_9CD4
.text:0000000000009C98                 call    ___errno_location
.text:0000000000009C9D                 mov     r12d, [rax]
.text:0000000000009CA0                 mov     rdi, rbx        ; stream
.text:0000000000009CA3                 mov     rbp, rax
.text:0000000000009CA6                 call    _fclose
.text:0000000000009CAB                 test    r12d, r12d
.text:0000000000009CAE                 jnz     short loc_9CE0
.text:0000000000009CB0
.text:0000000000009CB0 loc_9CB0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000009CB0                 pop     rbx
.text:0000000000009CB1                 pop     rbp
.text:0000000000009CB2                 pop     r12
.text:0000000000009CB4                 retn
.text:0000000000009CB4 ; ---------------------------------------------------------------------------
.text:0000000000009CB5                 align 8
.text:0000000000009CB8
.text:0000000000009CB8 loc_9CB8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000009CB8                 mov     rdi, rbx        ; stream
.text:0000000000009CBB                 call    _fileno
.text:0000000000009CC0                 xor     esi, esi        ; offset
.text:0000000000009CC2                 mov     edx, 1          ; whence
.text:0000000000009CC7                 mov     edi, eax        ; fd
.text:0000000000009CC9                 call    _lseek
.text:0000000000009CCE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009CD2                 jnz     short loc_9C8C
.text:0000000000009CD4
.text:0000000000009CD4 loc_9CD4:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000009CD4                 mov     rdi, rbx        ; stream
.text:0000000000009CD7
.text:0000000000009CD7 loc_9CD7:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000009CD7                 pop     rbx
.text:0000000000009CD8                 pop     rbp
.text:0000000000009CD9                 pop     r12
.text:0000000000009CDB                 jmp     _fclose
.text:0000000000009CE0 ; ---------------------------------------------------------------------------
.text:0000000000009CE0
.text:0000000000009CE0 loc_9CE0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000009CE0                 mov     [rbp+0], r12d
.text:0000000000009CE4                 mov     eax, 0FFFFFFFFh
.text:0000000000009CE9                 jmp     short loc_9CB0
.text:0000000000009CE9 ; } // starts at 9C70
.text:0000000000009CE9 rpl_fclose      endp
.text:0000000000009CE9
.text:0000000000009CE9 ; ---------------------------------------------------------------------------
.text:0000000000009CEB                 align 10h
.text:0000000000009CF0
.text:0000000000009CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009CF0
.text:0000000000009CF0
.text:0000000000009CF0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000009CF0                 public rpl_fcntl
.text:0000000000009CF0 rpl_fcntl       proc near               ; CODE XREF: set_fd_flags+59↑p
.text:0000000000009CF0                                         ; set_fd_flags+7E↑p ...
.text:0000000000009CF0
.text:0000000000009CF0 var_68          = dword ptr -68h
.text:0000000000009CF0 var_60          = qword ptr -60h
.text:0000000000009CF0 var_58          = qword ptr -58h
.text:0000000000009CF0 var_50          = qword ptr -50h
.text:0000000000009CF0 var_48          = byte ptr -48h
.text:0000000000009CF0 var_38          = qword ptr -38h
.text:0000000000009CF0 var_30          = qword ptr -30h
.text:0000000000009CF0 var_28          = qword ptr -28h
.text:0000000000009CF0 var_20          = qword ptr -20h
.text:0000000000009CF0 arg_0           = byte ptr  8
.text:0000000000009CF0
.text:0000000000009CF0 ; __unwind {
.text:0000000000009CF0                 push    r12
.text:0000000000009CF2                 push    rbp
.text:0000000000009CF3                 mov     ebp, edi
.text:0000000000009CF5                 push    rbx
.text:0000000000009CF6                 sub     rsp, 50h
.text:0000000000009CFA                 mov     rax, fs:28h
.text:0000000000009D03                 mov     [rsp+68h+var_50], rax
.text:0000000000009D08                 xor     eax, eax
.text:0000000000009D0A                 lea     rax, [rsp+68h+arg_0]
.text:0000000000009D0F                 test    esi, esi
.text:0000000000009D11                 mov     [rsp+68h+var_38], rdx
.text:0000000000009D16                 mov     [rsp+68h+var_30], rcx
.text:0000000000009D1B                 mov     [rsp+68h+var_28], r8
.text:0000000000009D20                 mov     [rsp+68h+var_60], rax
.text:0000000000009D25                 lea     rax, [rsp+68h+var_48]
.text:0000000000009D2A                 mov     [rsp+68h+var_20], r9
.text:0000000000009D2F                 mov     [rsp+68h+var_68], 10h
.text:0000000000009D36                 mov     [rsp+68h+var_58], rax
.text:0000000000009D3B                 jz      loc_9F42
.text:0000000000009D41                 cmp     esi, 406h
.text:0000000000009D47                 jnz     short loc_9D90
.text:0000000000009D49                 mov     rax, [rsp+68h+var_58]
.text:0000000000009D4E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000009D55                 mov     [rsp+68h+var_68], 18h
.text:0000000000009D5C                 mov     r12d, [rax+10h]
.text:0000000000009D60                 mov     edx, r12d
.text:0000000000009D63                 js      loc_9E93
.text:0000000000009D69                 xor     eax, eax
.text:0000000000009D6B                 mov     esi, 406h       ; cmd
.text:0000000000009D70                 call    _fcntl
.text:0000000000009D75                 test    eax, eax
.text:0000000000009D77                 mov     ebx, eax
.text:0000000000009D79                 js      loc_9F08
.text:0000000000009D7F
.text:0000000000009D7F loc_9D7F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:0000000000009D7F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000009D89                 jmp     short loc_9DD0
.text:0000000000009D89 ; ---------------------------------------------------------------------------
.text:0000000000009D8B                 align 10h
.text:0000000000009D90
.text:0000000000009D90 loc_9D90:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000009D90                 cmp     esi, 0Bh
.text:0000000000009D93                 jz      short loc_9DC0
.text:0000000000009D95                 jg      short loc_9DF0
.text:0000000000009D97                 cmp     esi, 4
.text:0000000000009D9A                 jz      loc_9E70
.text:0000000000009DA0                 jg      loc_9E60
.text:0000000000009DA6                 cmp     esi, 2
.text:0000000000009DA9                 jz      loc_9E70
.text:0000000000009DAF                 jg      short loc_9DC0
.text:0000000000009DB1                 cmp     esi, 1
.text:0000000000009DB4                 jnz     short loc_9E18
.text:0000000000009DB6                 db      2Eh
.text:0000000000009DB6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009DC0
.text:0000000000009DC0 loc_9DC0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000009DC0                                         ; rpl_fcntl+BF↑j ...
.text:0000000000009DC0                 mov     edi, ebp        ; fd
.text:0000000000009DC2                 xor     eax, eax
.text:0000000000009DC4                 call    _fcntl
.text:0000000000009DC9                 mov     ebx, eax
.text:0000000000009DCB                 nop     dword ptr [rax+rax+00h]
.text:0000000000009DD0
.text:0000000000009DD0 loc_9DD0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000009DD0                                         ; rpl_fcntl+147↓j ...
.text:0000000000009DD0                 mov     rcx, [rsp+68h+var_50]
.text:0000000000009DD5                 xor     rcx, fs:28h
.text:0000000000009DDE                 mov     eax, ebx
.text:0000000000009DE0                 jnz     loc_9F3D
.text:0000000000009DE6                 add     rsp, 50h
.text:0000000000009DEA                 pop     rbx
.text:0000000000009DEB                 pop     rbp
.text:0000000000009DEC                 pop     r12
.text:0000000000009DEE                 retn
.text:0000000000009DEE ; ---------------------------------------------------------------------------
.text:0000000000009DEF                 align 10h
.text:0000000000009DF0
.text:0000000000009DF0 loc_9DF0:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000009DF0                 cmp     esi, 407h
.text:0000000000009DF6                 jg      short loc_9E40
.text:0000000000009DF8                 cmp     esi, 406h
.text:0000000000009DFE                 jge     short loc_9E70
.text:0000000000009E00                 cmp     esi, 401h
.text:0000000000009E06                 jz      short loc_9DC0
.text:0000000000009E08                 cmp     esi, 402h
.text:0000000000009E0E                 jz      short loc_9E70
.text:0000000000009E10                 cmp     esi, 400h
.text:0000000000009E16                 jz      short loc_9E70
.text:0000000000009E18
.text:0000000000009E18 loc_9E18:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000009E18                                         ; rpl_fcntl+164↓j ...
.text:0000000000009E18                 mov     eax, [rsp+68h+var_68]
.text:0000000000009E1B                 cmp     eax, 2Fh ; '/'
.text:0000000000009E1E                 ja      loc_9F5A
.text:0000000000009E24                 add     rax, [rsp+68h+var_58]
.text:0000000000009E29
.text:0000000000009E29 loc_9E29:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000009E29                 mov     rdx, [rax]
.text:0000000000009E2C                 mov     edi, ebp        ; fd
.text:0000000000009E2E                 xor     eax, eax
.text:0000000000009E30                 call    _fcntl
.text:0000000000009E35                 mov     ebx, eax
.text:0000000000009E37                 jmp     short loc_9DD0
.text:0000000000009E37 ; ---------------------------------------------------------------------------
.text:0000000000009E39                 align 20h
.text:0000000000009E40
.text:0000000000009E40 loc_9E40:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000009E40                 cmp     esi, 409h
.text:0000000000009E46                 jz      short loc_9E70
.text:0000000000009E48                 jl      loc_9DC0
.text:0000000000009E4E                 cmp     esi, 40Ah
.text:0000000000009E54                 jnz     short loc_9E18
.text:0000000000009E56                 jmp     loc_9DC0
.text:0000000000009E56 ; ---------------------------------------------------------------------------
.text:0000000000009E5B                 align 20h
.text:0000000000009E60
.text:0000000000009E60 loc_9E60:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000009E60                 cmp     esi, 9
.text:0000000000009E63                 jz      loc_9DC0
.text:0000000000009E69                 jg      short loc_9E70
.text:0000000000009E6B                 cmp     esi, 8
.text:0000000000009E6E                 jnz     short loc_9E18
.text:0000000000009E70
.text:0000000000009E70 loc_9E70:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000009E70                                         ; rpl_fcntl+B9↑j ...
.text:0000000000009E70                 mov     eax, [rsp+68h+var_68]
.text:0000000000009E73                 cmp     eax, 2Fh ; '/'
.text:0000000000009E76                 ja      loc_9F64
.text:0000000000009E7C                 add     rax, [rsp+68h+var_58]
.text:0000000000009E81
.text:0000000000009E81 loc_9E81:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000009E81                 mov     edx, [rax]
.text:0000000000009E83                 mov     edi, ebp        ; fd
.text:0000000000009E85                 xor     eax, eax
.text:0000000000009E87                 call    _fcntl
.text:0000000000009E8C                 mov     ebx, eax
.text:0000000000009E8E                 jmp     loc_9DD0
.text:0000000000009E93 ; ---------------------------------------------------------------------------
.text:0000000000009E93
.text:0000000000009E93 loc_9E93:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000009E93                 xor     esi, esi        ; cmd
.text:0000000000009E95                 xor     eax, eax
.text:0000000000009E97                 call    _fcntl
.text:0000000000009E9C                 test    eax, eax
.text:0000000000009E9E                 mov     ebx, eax
.text:0000000000009EA0                 js      loc_9DD0
.text:0000000000009EA6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000009EAD                 jnz     loc_9DD0
.text:0000000000009EB3
.text:0000000000009EB3 loc_9EB3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000009EB3                 xor     eax, eax
.text:0000000000009EB5                 mov     esi, 1          ; cmd
.text:0000000000009EBA                 mov     edi, ebx        ; fd
.text:0000000000009EBC                 call    _fcntl
.text:0000000000009EC1                 test    eax, eax
.text:0000000000009EC3                 js      short loc_9EE1
.text:0000000000009EC5                 or      eax, 1
.text:0000000000009EC8                 mov     esi, 2          ; cmd
.text:0000000000009ECD                 mov     edi, ebx        ; fd
.text:0000000000009ECF                 mov     edx, eax
.text:0000000000009ED1                 xor     eax, eax
.text:0000000000009ED3                 call    _fcntl
.text:0000000000009ED8                 cmp     eax, 0FFFFFFFFh
.text:0000000000009EDB                 jnz     loc_9DD0
.text:0000000000009EE1
.text:0000000000009EE1 loc_9EE1:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000009EE1                 call    ___errno_location
.text:0000000000009EE6                 mov     r12d, [rax]
.text:0000000000009EE9                 mov     rbp, rax
.text:0000000000009EEC                 mov     edi, ebx        ; fd
.text:0000000000009EEE                 call    _close
.text:0000000000009EF3                 mov     ebx, 0FFFFFFFFh
.text:0000000000009EF8                 mov     [rbp+0], r12d
.text:0000000000009EFC                 jmp     loc_9DD0
.text:0000000000009EFC ; ---------------------------------------------------------------------------
.text:0000000000009F01                 align 8
.text:0000000000009F08
.text:0000000000009F08 loc_9F08:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000009F08                 call    ___errno_location
.text:0000000000009F0D                 cmp     dword ptr [rax], 16h
.text:0000000000009F10                 jnz     loc_9D7F
.text:0000000000009F16                 xor     esi, esi        ; cmd
.text:0000000000009F18                 xor     eax, eax
.text:0000000000009F1A                 mov     edx, r12d
.text:0000000000009F1D                 mov     edi, ebp        ; fd
.text:0000000000009F1F                 call    _fcntl
.text:0000000000009F24                 test    eax, eax
.text:0000000000009F26                 mov     ebx, eax
.text:0000000000009F28                 js      loc_9DD0
.text:0000000000009F2E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000009F38                 jmp     loc_9EB3
.text:0000000000009F3D ; ---------------------------------------------------------------------------
.text:0000000000009F3D
.text:0000000000009F3D loc_9F3D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:0000000000009F3D                 call    ___stack_chk_fail
.text:0000000000009F42 ; ---------------------------------------------------------------------------
.text:0000000000009F42
.text:0000000000009F42 loc_9F42:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000009F42                 mov     rax, [rsp+68h+var_58]
.text:0000000000009F47                 xor     esi, esi        ; cmd
.text:0000000000009F49                 mov     edx, [rax+10h]
.text:0000000000009F4C                 xor     eax, eax
.text:0000000000009F4E                 call    _fcntl
.text:0000000000009F53                 mov     ebx, eax
.text:0000000000009F55                 jmp     loc_9DD0
.text:0000000000009F5A ; ---------------------------------------------------------------------------
.text:0000000000009F5A
.text:0000000000009F5A loc_9F5A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:0000000000009F5A                 mov     rax, [rsp+68h+var_60]
.text:0000000000009F5F                 jmp     loc_9E29
.text:0000000000009F64 ; ---------------------------------------------------------------------------
.text:0000000000009F64
.text:0000000000009F64 loc_9F64:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000009F64                 mov     rax, [rsp+68h+var_60]
.text:0000000000009F69                 jmp     loc_9E81
.text:0000000000009F69 ; } // starts at 9CF0
.text:0000000000009F69 rpl_fcntl       endp
.text:0000000000009F69
.text:0000000000009F69 ; ---------------------------------------------------------------------------
.text:0000000000009F6E                 align 10h
.text:0000000000009F70
.text:0000000000009F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F70
.text:0000000000009F70 ; Attributes: info_from_lumina
.text:0000000000009F70
.text:0000000000009F70 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000009F70                 public rpl_fflush
.text:0000000000009F70 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000009F70 ; __unwind {
.text:0000000000009F70                 test    rdi, rdi
.text:0000000000009F73                 push    rbx
.text:0000000000009F74                 mov     rbx, rdi
.text:0000000000009F77                 jz      short loc_9F8A
.text:0000000000009F79                 call    ___freading
.text:0000000000009F7E                 test    eax, eax
.text:0000000000009F80                 jz      short loc_9F8A
.text:0000000000009F82                 test    dword ptr [rbx], 100h
.text:0000000000009F88                 jnz     short loc_9F98
.text:0000000000009F8A
.text:0000000000009F8A loc_9F8A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000009F8A                                         ; rpl_fflush+10↑j
.text:0000000000009F8A                 mov     rdi, rbx        ; stream
.text:0000000000009F8D                 pop     rbx
.text:0000000000009F8E                 jmp     _fflush
.text:0000000000009F8E ; ---------------------------------------------------------------------------
.text:0000000000009F93                 align 8
.text:0000000000009F98
.text:0000000000009F98 loc_9F98:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000009F98                 mov     rdi, rbx
.text:0000000000009F9B                 mov     edx, 1
.text:0000000000009FA0                 xor     esi, esi
.text:0000000000009FA2                 call    rpl_fseeko
.text:0000000000009FA7                 mov     rdi, rbx        ; stream
.text:0000000000009FAA                 pop     rbx
.text:0000000000009FAB                 jmp     _fflush
.text:0000000000009FAB ; } // starts at 9F70
.text:0000000000009FAB rpl_fflush      endp
.text:0000000000009FAB
.text:0000000000009FB0
.text:0000000000009FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009FB0
.text:0000000000009FB0 ; Attributes: info_from_lumina
.text:0000000000009FB0
.text:0000000000009FB0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000009FB0                 public rpl_fseeko
.text:0000000000009FB0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000009FB0 ; __unwind {
.text:0000000000009FB0                 mov     rax, [rdi+8]
.text:0000000000009FB4                 cmp     [rdi+10h], rax
.text:0000000000009FB8                 jz      short loc_9FC0
.text:0000000000009FBA
.text:0000000000009FBA loc_9FBA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000009FBA                                         ; rpl_fseeko+1F↓j
.text:0000000000009FBA                 jmp     _fseeko
.text:0000000000009FBA ; ---------------------------------------------------------------------------
.text:0000000000009FBF                 align 20h
.text:0000000000009FC0
.text:0000000000009FC0 loc_9FC0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000009FC0                 mov     rax, [rdi+20h]
.text:0000000000009FC4                 cmp     [rdi+28h], rax
.text:0000000000009FC8                 jnz     short loc_9FBA
.text:0000000000009FCA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000009FCF                 jnz     short loc_9FBA
.text:0000000000009FD1                 push    r12
.text:0000000000009FD3                 push    rbp
.text:0000000000009FD4                 mov     r12d, edx
.text:0000000000009FD7                 push    rbx
.text:0000000000009FD8                 mov     rbp, rsi
.text:0000000000009FDB                 mov     rbx, rdi
.text:0000000000009FDE                 call    _fileno
.text:0000000000009FE3                 mov     edx, r12d       ; whence
.text:0000000000009FE6                 mov     rsi, rbp        ; offset
.text:0000000000009FE9                 mov     edi, eax        ; fd
.text:0000000000009FEB                 call    _lseek
.text:0000000000009FF0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009FF4                 jz      short loc_A002
.text:0000000000009FF6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000009FF9                 mov     [rbx+90h], rax
.text:000000000000A000                 xor     eax, eax
.text:000000000000A002
.text:000000000000A002 loc_A002:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000A002                 pop     rbx
.text:000000000000A003                 pop     rbp
.text:000000000000A004                 pop     r12
.text:000000000000A006                 retn
.text:000000000000A006 ; } // starts at 9FB0
.text:000000000000A006 rpl_fseeko      endp
.text:000000000000A006
.text:000000000000A006 ; ---------------------------------------------------------------------------
.text:000000000000A007                 align 10h
.text:000000000000A010
.text:000000000000A010 ; =============== S U B R O U T I N E =======================================
.text:000000000000A010
.text:000000000000A010 ; Attributes: info_from_lumina
.text:000000000000A010
.text:000000000000A010 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:000000000000A010                 public rpl_mbrtowc
.text:000000000000A010 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:000000000000A010
.text:000000000000A010 pwc             = dword ptr -34h
.text:000000000000A010 var_30          = qword ptr -30h
.text:000000000000A010
.text:000000000000A010 ; __unwind {
.text:000000000000A010                 push    r13
.text:000000000000A012                 push    r12
.text:000000000000A014                 mov     r13, rsi
.text:000000000000A017                 push    rbp
.text:000000000000A018                 push    rbx
.text:000000000000A019                 mov     rbx, rdi
.text:000000000000A01C                 mov     r12, rdx
.text:000000000000A01F                 sub     rsp, 18h
.text:000000000000A023                 mov     rax, fs:28h
.text:000000000000A02C                 mov     [rsp+38h+var_30], rax
.text:000000000000A031                 xor     eax, eax
.text:000000000000A033                 lea     rax, [rsp+38h+pwc]
.text:000000000000A038                 test    rdi, rdi
.text:000000000000A03B                 cmovz   rbx, rax
.text:000000000000A03F                 mov     rdi, rbx        ; pwc
.text:000000000000A042                 call    _mbrtowc
.text:000000000000A047                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000A04B                 mov     rbp, rax
.text:000000000000A04E                 jbe     short loc_A070
.text:000000000000A050                 test    r12, r12
.text:000000000000A053                 jz      short loc_A070
.text:000000000000A055                 xor     edi, edi
.text:000000000000A057                 call    hard_locale
.text:000000000000A05C                 test    al, al
.text:000000000000A05E                 jnz     short loc_A070
.text:000000000000A060                 movzx   eax, byte ptr [r13+0]
.text:000000000000A065                 mov     ebp, 1
.text:000000000000A06A                 mov     [rbx], eax
.text:000000000000A06C                 nop     dword ptr [rax+00h]
.text:000000000000A070
.text:000000000000A070 loc_A070:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:000000000000A070                                         ; rpl_mbrtowc+43↑j ...
.text:000000000000A070                 mov     rdx, [rsp+38h+var_30]
.text:000000000000A075                 xor     rdx, fs:28h
.text:000000000000A07E                 mov     rax, rbp
.text:000000000000A081                 jnz     short loc_A08E
.text:000000000000A083                 add     rsp, 18h
.text:000000000000A087                 pop     rbx
.text:000000000000A088                 pop     rbp
.text:000000000000A089                 pop     r12
.text:000000000000A08B                 pop     r13
.text:000000000000A08D                 retn
.text:000000000000A08E ; ---------------------------------------------------------------------------
.text:000000000000A08E
.text:000000000000A08E loc_A08E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000A08E                 call    ___stack_chk_fail
.text:000000000000A08E ; } // starts at A010
.text:000000000000A08E rpl_mbrtowc     endp
.text:000000000000A08E
.text:000000000000A08E ; ---------------------------------------------------------------------------
.text:000000000000A093                 align 20h
.text:000000000000A0A0
.text:000000000000A0A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A0A0
.text:000000000000A0A0 ; Attributes: info_from_lumina
.text:000000000000A0A0
.text:000000000000A0A0                 public u16_u16_vasprintf
.text:000000000000A0A0 u16_u16_vasprintf proc near             ; CODE XREF: xvasprintf+61↑p
.text:000000000000A0A0
.text:000000000000A0A0 var_18          = qword ptr -18h
.text:000000000000A0A0 var_10          = qword ptr -10h
.text:000000000000A0A0
.text:000000000000A0A0 ; __unwind {
.text:000000000000A0A0                 push    rbx
.text:000000000000A0A1                 mov     rax, rsi
.text:000000000000A0A4                 mov     rbx, rdi
.text:000000000000A0A7                 xor     edi, edi
.text:000000000000A0A9                 sub     rsp, 10h
.text:000000000000A0AD                 mov     rcx, fs:28h
.text:000000000000A0B6                 mov     [rsp+18h+var_10], rcx
.text:000000000000A0BB                 xor     ecx, ecx
.text:000000000000A0BD                 mov     rsi, rsp
.text:000000000000A0C0                 mov     rcx, rdx
.text:000000000000A0C3                 mov     rdx, rax
.text:000000000000A0C6                 call    vasnprintf
.text:000000000000A0CB                 test    rax, rax
.text:000000000000A0CE                 jz      short loc_A112
.text:000000000000A0D0                 mov     rdx, [rsp+18h+var_18]
.text:000000000000A0D4                 cmp     rdx, 7FFFFFFFh
.text:000000000000A0DB                 ja      short loc_A0F8
.text:000000000000A0DD                 mov     [rbx], rax
.text:000000000000A0E0                 mov     eax, edx
.text:000000000000A0E2
.text:000000000000A0E2 loc_A0E2:                               ; CODE XREF: u16_u16_vasprintf+70↓j
.text:000000000000A0E2                                         ; u16_u16_vasprintf+77↓j
.text:000000000000A0E2                 mov     rbx, [rsp+18h+var_10]
.text:000000000000A0E7                 xor     rbx, fs:28h
.text:000000000000A0F0                 jnz     short loc_A119
.text:000000000000A0F2                 add     rsp, 10h
.text:000000000000A0F6                 pop     rbx
.text:000000000000A0F7                 retn
.text:000000000000A0F8 ; ---------------------------------------------------------------------------
.text:000000000000A0F8
.text:000000000000A0F8 loc_A0F8:                               ; CODE XREF: u16_u16_vasprintf+3B↑j
.text:000000000000A0F8                 mov     rdi, rax        ; ptr
.text:000000000000A0FB                 call    _free
.text:000000000000A100                 call    ___errno_location
.text:000000000000A105                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000A10B                 mov     eax, 0FFFFFFFFh
.text:000000000000A110                 jmp     short loc_A0E2
.text:000000000000A112 ; ---------------------------------------------------------------------------
.text:000000000000A112
.text:000000000000A112 loc_A112:                               ; CODE XREF: u16_u16_vasprintf+2E↑j
.text:000000000000A112                 mov     eax, 0FFFFFFFFh
.text:000000000000A117                 jmp     short loc_A0E2
.text:000000000000A119 ; ---------------------------------------------------------------------------
.text:000000000000A119
.text:000000000000A119 loc_A119:                               ; CODE XREF: u16_u16_vasprintf+50↑j
.text:000000000000A119                 call    ___stack_chk_fail
.text:000000000000A119 ; } // starts at A0A0
.text:000000000000A119 u16_u16_vasprintf endp
.text:000000000000A119
.text:000000000000A119 ; ---------------------------------------------------------------------------
.text:000000000000A11E                 align 20h
.text:000000000000A120
.text:000000000000A120 ; =============== S U B R O U T I N E =======================================
.text:000000000000A120
.text:000000000000A120 ; Attributes: noreturn
.text:000000000000A120
.text:000000000000A120 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:000000000000A120 ; __unwind {
.text:000000000000A120                 mov     edi, 1          ; status
.text:000000000000A125                 jmp     usage
.text:000000000000A125 ; } // starts at A120
.text:000000000000A125 __argmatch_die  endp
.text:000000000000A125
.text:000000000000A125 ; ---------------------------------------------------------------------------
.text:000000000000A12A                 align 10h
.text:000000000000A130
.text:000000000000A130 ; =============== S U B R O U T I N E =======================================
.text:000000000000A130
.text:000000000000A130 ; Attributes: info_from_lumina
.text:000000000000A130
.text:000000000000A130 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000A130                 public argmatch
.text:000000000000A130 argmatch        proc near               ; CODE XREF: human_options+52↑p
.text:000000000000A130                                         ; __xargmatch_internal+2C↓p
.text:000000000000A130
.text:000000000000A130 var_58          = qword ptr -58h
.text:000000000000A130 s2              = qword ptr -50h
.text:000000000000A130 var_41          = byte ptr -41h
.text:000000000000A130 var_40          = qword ptr -40h
.text:000000000000A130
.text:000000000000A130 ; __unwind {
.text:000000000000A130                 push    r15
.text:000000000000A132                 push    r14
.text:000000000000A134                 mov     r15, rsi
.text:000000000000A137                 push    r13
.text:000000000000A139                 push    r12
.text:000000000000A13B                 mov     r13, rcx
.text:000000000000A13E                 push    rbp
.text:000000000000A13F                 push    rbx
.text:000000000000A140                 mov     rbp, rdx
.text:000000000000A143                 sub     rsp, 28h
.text:000000000000A147                 mov     [rsp+58h+s2], rdi
.text:000000000000A14C                 mov     [rsp+58h+var_40], rdx
.text:000000000000A151                 call    _strlen
.text:000000000000A156                 mov     r14, [r15]
.text:000000000000A159                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000A161                 test    r14, r14
.text:000000000000A164                 jz      loc_A21D
.text:000000000000A16A                 mov     r12, rax
.text:000000000000A16D                 mov     [rsp+58h+var_41], 0
.text:000000000000A172                 xor     ebx, ebx
.text:000000000000A174                 jmp     short loc_A1C7
.text:000000000000A174 ; ---------------------------------------------------------------------------
.text:000000000000A176                 align 20h
.text:000000000000A180
.text:000000000000A180 loc_A180:                               ; CODE XREF: argmatch+BD↓j
.text:000000000000A180                 mov     rax, [rsp+58h+var_40]
.text:000000000000A185                 test    rax, rax
.text:000000000000A188                 jz      loc_A230
.text:000000000000A18E                 mov     rdi, [rsp+58h+var_58]
.text:000000000000A192                 mov     rdx, r13        ; n
.text:000000000000A195                 mov     rsi, rbp        ; s2
.text:000000000000A198                 imul    rdi, r13
.text:000000000000A19C                 add     rdi, rax        ; s1
.text:000000000000A19F                 call    _memcmp
.text:000000000000A1A4                 test    eax, eax
.text:000000000000A1A6                 movzx   eax, [rsp+58h+var_41]
.text:000000000000A1AB                 mov     ecx, 1
.text:000000000000A1B0                 cmovnz  eax, ecx
.text:000000000000A1B3                 mov     [rsp+58h+var_41], al
.text:000000000000A1B7
.text:000000000000A1B7 loc_A1B7:                               ; CODE XREF: argmatch+A9↓j
.text:000000000000A1B7                                         ; argmatch+105↓j
.text:000000000000A1B7                 add     rbx, 1
.text:000000000000A1BB                 add     rbp, r13
.text:000000000000A1BE                 mov     r14, [r15+rbx*8]
.text:000000000000A1C2                 test    r14, r14
.text:000000000000A1C5                 jz      short loc_A208
.text:000000000000A1C7
.text:000000000000A1C7 loc_A1C7:                               ; CODE XREF: argmatch+44↑j
.text:000000000000A1C7                                         ; argmatch+D1↓j
.text:000000000000A1C7                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000000A1CC                 mov     rdx, r12        ; n
.text:000000000000A1CF                 mov     rdi, r14        ; s1
.text:000000000000A1D2                 call    _strncmp
.text:000000000000A1D7                 test    eax, eax
.text:000000000000A1D9                 jnz     short loc_A1B7
.text:000000000000A1DB                 mov     rdi, r14        ; s
.text:000000000000A1DE                 call    _strlen
.text:000000000000A1E3                 cmp     rax, r12
.text:000000000000A1E6                 jz      short loc_A240
.text:000000000000A1E8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000A1ED                 jnz     short loc_A180
.text:000000000000A1EF                 mov     [rsp+58h+var_58], rbx
.text:000000000000A1F3                 add     rbx, 1
.text:000000000000A1F7                 add     rbp, r13
.text:000000000000A1FA                 mov     r14, [r15+rbx*8]
.text:000000000000A1FE                 test    r14, r14
.text:000000000000A201                 jnz     short loc_A1C7
.text:000000000000A203                 nop     dword ptr [rax+rax+00h]
.text:000000000000A208
.text:000000000000A208 loc_A208:                               ; CODE XREF: argmatch+95↑j
.text:000000000000A208                 cmp     [rsp+58h+var_41], 0
.text:000000000000A20D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000A214                 cmovz   rax, [rsp+58h+var_58]
.text:000000000000A219                 mov     [rsp+58h+var_58], rax
.text:000000000000A21D
.text:000000000000A21D loc_A21D:                               ; CODE XREF: argmatch+34↑j
.text:000000000000A21D                                         ; argmatch+114↓j
.text:000000000000A21D                 mov     rax, [rsp+58h+var_58]
.text:000000000000A221                 add     rsp, 28h
.text:000000000000A225                 pop     rbx
.text:000000000000A226                 pop     rbp
.text:000000000000A227                 pop     r12
.text:000000000000A229                 pop     r13
.text:000000000000A22B                 pop     r14
.text:000000000000A22D                 pop     r15
.text:000000000000A22F                 retn
.text:000000000000A230 ; ---------------------------------------------------------------------------
.text:000000000000A230
.text:000000000000A230 loc_A230:                               ; CODE XREF: argmatch+58↑j
.text:000000000000A230                 mov     [rsp+58h+var_41], 1
.text:000000000000A235                 jmp     short loc_A1B7
.text:000000000000A235 ; ---------------------------------------------------------------------------
.text:000000000000A237                 align 20h
.text:000000000000A240
.text:000000000000A240 loc_A240:                               ; CODE XREF: argmatch+B6↑j
.text:000000000000A240                 mov     [rsp+58h+var_58], rbx
.text:000000000000A244                 jmp     short loc_A21D
.text:000000000000A244 ; } // starts at A130
.text:000000000000A244 argmatch        endp
.text:000000000000A244
.text:000000000000A244 ; ---------------------------------------------------------------------------
.text:000000000000A246                 align 10h
.text:000000000000A250
.text:000000000000A250 ; =============== S U B R O U T I N E =======================================
.text:000000000000A250
.text:000000000000A250 ; Attributes: info_from_lumina
.text:000000000000A250
.text:000000000000A250 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:000000000000A250                 public argmatch_invalid
.text:000000000000A250 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:000000000000A250 ; __unwind {
.text:000000000000A250                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A254                 push    r12
.text:000000000000A256                 mov     edx, 5          ; category
.text:000000000000A25B                 push    rbp
.text:000000000000A25C                 mov     r12, rsi
.text:000000000000A25F                 push    rbx
.text:000000000000A260                 mov     rbp, rdi
.text:000000000000A263                 jz      short loc_A2B0
.text:000000000000A265                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:000000000000A26C                 xor     edi, edi        ; domainname
.text:000000000000A26E                 call    _dcgettext
.text:000000000000A273                 mov     rbx, rax
.text:000000000000A276
.text:000000000000A276 loc_A276:                               ; CODE XREF: argmatch_invalid+71↓j
.text:000000000000A276                 mov     rsi, rbp
.text:000000000000A279                 mov     edi, 1
.text:000000000000A27E                 call    quote_n
.text:000000000000A283                 mov     rdx, r12
.text:000000000000A286                 mov     rbp, rax
.text:000000000000A289                 mov     esi, 8
.text:000000000000A28E                 xor     edi, edi
.text:000000000000A290                 call    quotearg_n_style
.text:000000000000A295                 mov     r8, rbp
.text:000000000000A298                 mov     rdx, rbx        ; format
.text:000000000000A29B                 mov     rcx, rax
.text:000000000000A29E                 pop     rbx
.text:000000000000A29F                 pop     rbp
.text:000000000000A2A0                 pop     r12
.text:000000000000A2A2                 xor     esi, esi        ; errnum
.text:000000000000A2A4                 xor     edi, edi        ; status
.text:000000000000A2A6                 xor     eax, eax
.text:000000000000A2A8                 jmp     _error
.text:000000000000A2A8 ; ---------------------------------------------------------------------------
.text:000000000000A2AD                 align 10h
.text:000000000000A2B0
.text:000000000000A2B0 loc_A2B0:                               ; CODE XREF: argmatch_invalid+13↑j
.text:000000000000A2B0                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:000000000000A2B7                 xor     edi, edi        ; domainname
.text:000000000000A2B9                 call    _dcgettext
.text:000000000000A2BE                 mov     rbx, rax
.text:000000000000A2C1                 jmp     short loc_A276
.text:000000000000A2C1 ; } // starts at A250
.text:000000000000A2C1 argmatch_invalid endp
.text:000000000000A2C1
.text:000000000000A2C1 ; ---------------------------------------------------------------------------
.text:000000000000A2C3                 align 10h
.text:000000000000A2D0
.text:000000000000A2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A2D0
.text:000000000000A2D0 ; Attributes: info_from_lumina
.text:000000000000A2D0
.text:000000000000A2D0 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000A2D0                 public argmatch_valid
.text:000000000000A2D0 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:000000000000A2D0 ; __unwind {
.text:000000000000A2D0                 push    r15
.text:000000000000A2D2                 push    r14
.text:000000000000A2D4                 mov     r14, rdi
.text:000000000000A2D7                 push    r13
.text:000000000000A2D9                 push    r12
.text:000000000000A2DB                 xor     edi, edi        ; domainname
.text:000000000000A2DD                 push    rbp
.text:000000000000A2DE                 push    rbx
.text:000000000000A2DF                 mov     rbp, rsi
.text:000000000000A2E2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:000000000000A2E9                 mov     r12, rdx
.text:000000000000A2EC                 mov     edx, 5          ; category
.text:000000000000A2F1                 sub     rsp, 8
.text:000000000000A2F5                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:000000000000A2FC                 call    _dcgettext
.text:000000000000A301                 mov     rdi, rax        ; s
.text:000000000000A304                 mov     rsi, rbx        ; stream
.text:000000000000A307                 call    _fputs_unlocked
.text:000000000000A30C                 mov     r15, [r14]
.text:000000000000A30F                 test    r15, r15
.text:000000000000A312                 jz      loc_A3A8
.text:000000000000A318                 xor     r13d, r13d
.text:000000000000A31B                 xor     ebx, ebx
.text:000000000000A31D                 jmp     short loc_A358
.text:000000000000A31D ; ---------------------------------------------------------------------------
.text:000000000000A31F                 align 20h
.text:000000000000A320
.text:000000000000A320 loc_A320:                               ; CODE XREF: argmatch_valid+8B↓j
.text:000000000000A320                                         ; argmatch_valid+9D↓j
.text:000000000000A320                 mov     rdi, r15
.text:000000000000A323                 add     rbx, 1
.text:000000000000A327                 mov     r13, rbp
.text:000000000000A32A                 call    quote
.text:000000000000A32F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000A336                 lea     rdx, aS_0       ; "\n  - %s"
.text:000000000000A33D                 mov     rcx, rax
.text:000000000000A340                 mov     esi, 1
.text:000000000000A345                 xor     eax, eax
.text:000000000000A347                 add     rbp, r12
.text:000000000000A34A                 call    ___fprintf_chk
.text:000000000000A34F                 mov     r15, [r14+rbx*8]
.text:000000000000A353                 test    r15, r15
.text:000000000000A356                 jz      short loc_A3A8
.text:000000000000A358
.text:000000000000A358 loc_A358:                               ; CODE XREF: argmatch_valid+4D↑j
.text:000000000000A358                                         ; argmatch_valid+D2↓j
.text:000000000000A358                 test    rbx, rbx
.text:000000000000A35B                 jz      short loc_A320
.text:000000000000A35D                 mov     rdx, r12        ; n
.text:000000000000A360                 mov     rsi, rbp        ; s2
.text:000000000000A363                 mov     rdi, r13        ; s1
.text:000000000000A366                 call    _memcmp
.text:000000000000A36B                 test    eax, eax
.text:000000000000A36D                 jnz     short loc_A320
.text:000000000000A36F                 mov     rdi, r15
.text:000000000000A372                 add     rbx, 1
.text:000000000000A376                 add     rbp, r12
.text:000000000000A379                 call    quote
.text:000000000000A37E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000A385                 lea     rdx, aLuBytesSCopied+19h ; ", %s"
.text:000000000000A38C                 mov     rcx, rax
.text:000000000000A38F                 mov     esi, 1
.text:000000000000A394                 xor     eax, eax
.text:000000000000A396                 call    ___fprintf_chk
.text:000000000000A39B                 mov     r15, [r14+rbx*8]
.text:000000000000A39F                 test    r15, r15
.text:000000000000A3A2                 jnz     short loc_A358
.text:000000000000A3A4                 nop     dword ptr [rax+00h]
.text:000000000000A3A8
.text:000000000000A3A8 loc_A3A8:                               ; CODE XREF: argmatch_valid+42↑j
.text:000000000000A3A8                                         ; argmatch_valid+86↑j
.text:000000000000A3A8                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000A3AF                 mov     rax, [rdi+28h]
.text:000000000000A3B3                 cmp     rax, [rdi+30h]
.text:000000000000A3B7                 jnb     short loc_A3D8
.text:000000000000A3B9                 lea     rdx, [rax+1]
.text:000000000000A3BD                 mov     [rdi+28h], rdx
.text:000000000000A3C1                 mov     byte ptr [rax], 0Ah
.text:000000000000A3C4                 add     rsp, 8
.text:000000000000A3C8                 pop     rbx
.text:000000000000A3C9                 pop     rbp
.text:000000000000A3CA                 pop     r12
.text:000000000000A3CC                 pop     r13
.text:000000000000A3CE                 pop     r14
.text:000000000000A3D0                 pop     r15
.text:000000000000A3D2                 retn
.text:000000000000A3D2 ; ---------------------------------------------------------------------------
.text:000000000000A3D3                 align 8
.text:000000000000A3D8
.text:000000000000A3D8 loc_A3D8:                               ; CODE XREF: argmatch_valid+E7↑j
.text:000000000000A3D8                 add     rsp, 8
.text:000000000000A3DC                 mov     esi, 0Ah        ; int
.text:000000000000A3E1                 pop     rbx
.text:000000000000A3E2                 pop     rbp
.text:000000000000A3E3                 pop     r12
.text:000000000000A3E5                 pop     r13
.text:000000000000A3E7                 pop     r14
.text:000000000000A3E9                 pop     r15
.text:000000000000A3EB                 jmp     ___overflow
.text:000000000000A3EB ; } // starts at A2D0
.text:000000000000A3EB argmatch_valid  endp
.text:000000000000A3EB
.text:000000000000A3F0
.text:000000000000A3F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3F0
.text:000000000000A3F0 ; Attributes: info_from_lumina
.text:000000000000A3F0
.text:000000000000A3F0 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:000000000000A3F0                 public __xargmatch_internal
.text:000000000000A3F0 __xargmatch_internal proc near
.text:000000000000A3F0 ; __unwind {
.text:000000000000A3F0                 push    r15
.text:000000000000A3F2                 push    r14
.text:000000000000A3F4                 mov     r14, rdi
.text:000000000000A3F7                 push    r13
.text:000000000000A3F9                 push    r12
.text:000000000000A3FB                 mov     r12, rsi
.text:000000000000A3FE                 push    rbp
.text:000000000000A3FF                 push    rbx
.text:000000000000A400                 mov     rbp, rcx
.text:000000000000A403                 mov     rbx, rdx
.text:000000000000A406                 mov     rcx, r8
.text:000000000000A409                 mov     rdx, rbp
.text:000000000000A40C                 sub     rsp, 8
.text:000000000000A410                 mov     rsi, rbx
.text:000000000000A413                 mov     rdi, r12
.text:000000000000A416                 mov     r15, r8
.text:000000000000A419                 mov     r13, r9
.text:000000000000A41C                 call    argmatch
.text:000000000000A421                 test    rax, rax
.text:000000000000A424                 js      short loc_A435
.text:000000000000A426
.text:000000000000A426 loc_A426:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:000000000000A426                 add     rsp, 8
.text:000000000000A42A                 pop     rbx
.text:000000000000A42B                 pop     rbp
.text:000000000000A42C                 pop     r12
.text:000000000000A42E                 pop     r13
.text:000000000000A430                 pop     r14
.text:000000000000A432                 pop     r15
.text:000000000000A434                 retn
.text:000000000000A435 ; ---------------------------------------------------------------------------
.text:000000000000A435
.text:000000000000A435 loc_A435:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:000000000000A435                 mov     rdx, rax
.text:000000000000A438                 mov     rsi, r12
.text:000000000000A43B                 mov     rdi, r14
.text:000000000000A43E                 call    argmatch_invalid
.text:000000000000A443                 mov     rdx, r15
.text:000000000000A446                 mov     rsi, rbp
.text:000000000000A449                 mov     rdi, rbx
.text:000000000000A44C                 call    argmatch_valid
.text:000000000000A451                 call    r13
.text:000000000000A454                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A45B                 jmp     short loc_A426
.text:000000000000A45B ; } // starts at A3F0
.text:000000000000A45B __xargmatch_internal endp
.text:000000000000A45B
.text:000000000000A45B ; ---------------------------------------------------------------------------
.text:000000000000A45D                 align 20h
.text:000000000000A460
.text:000000000000A460 ; =============== S U B R O U T I N E =======================================
.text:000000000000A460
.text:000000000000A460 ; Attributes: info_from_lumina
.text:000000000000A460
.text:000000000000A460 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000A460                 public argmatch_to_argument
.text:000000000000A460 argmatch_to_argument proc near
.text:000000000000A460 ; __unwind {
.text:000000000000A460                 push    r14
.text:000000000000A462                 push    r13
.text:000000000000A464                 push    r12
.text:000000000000A466                 push    rbp
.text:000000000000A467                 push    rbx
.text:000000000000A468                 mov     r14, [rsi]
.text:000000000000A46B                 test    r14, r14
.text:000000000000A46E                 jz      short loc_A4A1
.text:000000000000A470                 mov     r12, rcx
.text:000000000000A473                 mov     r13, rdi
.text:000000000000A476                 mov     rbp, rdx
.text:000000000000A479                 lea     rbx, [rsi+8]
.text:000000000000A47D                 jmp     short loc_A48F
.text:000000000000A47D ; ---------------------------------------------------------------------------
.text:000000000000A47F                 align 20h
.text:000000000000A480
.text:000000000000A480 loc_A480:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:000000000000A480                 mov     r14, [rbx]
.text:000000000000A483                 add     rbp, r12
.text:000000000000A486                 add     rbx, 8
.text:000000000000A48A                 test    r14, r14
.text:000000000000A48D                 jz      short loc_A4A1
.text:000000000000A48F
.text:000000000000A48F loc_A48F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000A48F                 mov     rdx, r12        ; n
.text:000000000000A492                 mov     rsi, rbp        ; s2
.text:000000000000A495                 mov     rdi, r13        ; s1
.text:000000000000A498                 call    _memcmp
.text:000000000000A49D                 test    eax, eax
.text:000000000000A49F                 jnz     short loc_A480
.text:000000000000A4A1
.text:000000000000A4A1 loc_A4A1:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:000000000000A4A1                                         ; argmatch_to_argument+2D↑j
.text:000000000000A4A1                 pop     rbx
.text:000000000000A4A2                 mov     rax, r14
.text:000000000000A4A5                 pop     rbp
.text:000000000000A4A6                 pop     r12
.text:000000000000A4A8                 pop     r13
.text:000000000000A4AA                 pop     r14
.text:000000000000A4AC                 retn
.text:000000000000A4AC ; } // starts at A460
.text:000000000000A4AC argmatch_to_argument endp
.text:000000000000A4AC
.text:000000000000A4AC ; ---------------------------------------------------------------------------
.text:000000000000A4AD                 align 10h
.text:000000000000A4B0
.text:000000000000A4B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4B0
.text:000000000000A4B0
.text:000000000000A4B0                 public hard_locale
.text:000000000000A4B0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:000000000000A4B0 ; __unwind {
.text:000000000000A4B0                 sub     rsp, 8
.text:000000000000A4B4                 xor     esi, esi        ; locale
.text:000000000000A4B6                 call    _setlocale
.text:000000000000A4BB                 mov     rdx, rax
.text:000000000000A4BE                 mov     eax, 1
.text:000000000000A4C3                 test    rdx, rdx
.text:000000000000A4C6                 jz      short loc_A4E5
.text:000000000000A4C8                 lea     rdi, aC         ; "C"
.text:000000000000A4CF                 mov     ecx, 2
.text:000000000000A4D4                 mov     rsi, rdx
.text:000000000000A4D7                 repe cmpsb
.text:000000000000A4D9                 setnbe  cl
.text:000000000000A4DC                 sbb     cl, 0
.text:000000000000A4DF                 xor     eax, eax
.text:000000000000A4E1                 test    cl, cl
.text:000000000000A4E3                 jnz     short loc_A4F0
.text:000000000000A4E5
.text:000000000000A4E5 loc_A4E5:                               ; CODE XREF: hard_locale+16↑j
.text:000000000000A4E5                 add     rsp, 8
.text:000000000000A4E9                 retn
.text:000000000000A4E9 ; ---------------------------------------------------------------------------
.text:000000000000A4EA                 align 10h
.text:000000000000A4F0
.text:000000000000A4F0 loc_A4F0:                               ; CODE XREF: hard_locale+33↑j
.text:000000000000A4F0                 lea     rdi, aPosix     ; "POSIX"
.text:000000000000A4F7                 mov     ecx, 6
.text:000000000000A4FC                 mov     rsi, rdx
.text:000000000000A4FF                 repe cmpsb
.text:000000000000A501                 setnbe  al
.text:000000000000A504                 sbb     al, 0
.text:000000000000A506                 test    al, al
.text:000000000000A508                 setnz   al
.text:000000000000A50B                 add     rsp, 8
.text:000000000000A50F                 retn
.text:000000000000A50F ; } // starts at A4B0
.text:000000000000A50F hard_locale     endp
.text:000000000000A50F
.text:000000000000A510
.text:000000000000A510 ; =============== S U B R O U T I N E =======================================
.text:000000000000A510
.text:000000000000A510
.text:000000000000A510                 public locale_charset
.text:000000000000A510 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:000000000000A510 ; __unwind {
.text:000000000000A510                 sub     rsp, 8
.text:000000000000A514                 mov     edi, 0Eh        ; item
.text:000000000000A519                 call    _nl_langinfo
.text:000000000000A51E                 test    rax, rax
.text:000000000000A521                 jz      short loc_A540
.text:000000000000A523                 cmp     byte ptr [rax], 0
.text:000000000000A526                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000A52D                 cmovz   rax, rdx
.text:000000000000A531                 add     rsp, 8
.text:000000000000A535                 retn
.text:000000000000A535 ; ---------------------------------------------------------------------------
.text:000000000000A536                 align 20h
.text:000000000000A540
.text:000000000000A540 loc_A540:                               ; CODE XREF: locale_charset+11↑j
.text:000000000000A540                 lea     rax, aAscii     ; "ASCII"
.text:000000000000A547                 add     rsp, 8
.text:000000000000A54B                 retn
.text:000000000000A54B ; } // starts at A510
.text:000000000000A54B locale_charset  endp
.text:000000000000A54B
.text:000000000000A54B ; ---------------------------------------------------------------------------
.text:000000000000A54C                 align 10h
.text:000000000000A550
.text:000000000000A550 ; =============== S U B R O U T I N E =======================================
.text:000000000000A550
.text:000000000000A550 ; Attributes: bp-based frame
.text:000000000000A550
.text:000000000000A550                 public vasnprintf
.text:000000000000A550 vasnprintf      proc near               ; CODE XREF: u16_u16_vasprintf+26↑p
.text:000000000000A550
.text:000000000000A550 var_450         = tbyte ptr -450h
.text:000000000000A550 var_440         = tbyte ptr -440h
.text:000000000000A550 var_430         = qword ptr -430h
.text:000000000000A550 var_421         = byte ptr -421h
.text:000000000000A550 ptr             = qword ptr -420h
.text:000000000000A550 var_418         = qword ptr -418h
.text:000000000000A550 var_410         = qword ptr -410h
.text:000000000000A550 var_408         = qword ptr -408h
.text:000000000000A550 var_400         = qword ptr -400h
.text:000000000000A550 var_3F8         = qword ptr -3F8h
.text:000000000000A550 var_3F0         = qword ptr -3F0h
.text:000000000000A550 src             = qword ptr -3E8h
.text:000000000000A550 var_3E0         = qword ptr -3E0h
.text:000000000000A550 var_3D8         = qword ptr -3D8h
.text:000000000000A550 var_3D0         = qword ptr -3D0h
.text:000000000000A550 n               = qword ptr -3C8h
.text:000000000000A550 var_3BC         = dword ptr -3BCh
.text:000000000000A550 var_3B8         = dword ptr -3B8h
.text:000000000000A550 var_3B4         = dword ptr -3B4h
.text:000000000000A550 var_3B0         = byte ptr -3B0h
.text:000000000000A550 var_3A8         = qword ptr -3A8h
.text:000000000000A550 var_2C0         = qword ptr -2C0h
.text:000000000000A550 var_2B8         = qword ptr -2B8h
.text:000000000000A550 var_2B0         = qword ptr -2B0h
.text:000000000000A550 var_2A8         = qword ptr -2A8h
.text:000000000000A550 var_38          = qword ptr -38h
.text:000000000000A550
.text:000000000000A550 ; __unwind {
.text:000000000000A550                 push    rbp
.text:000000000000A551                 mov     rbp, rsp
.text:000000000000A554                 push    r15
.text:000000000000A556                 push    r14
.text:000000000000A558                 push    r13
.text:000000000000A55A                 push    r12
.text:000000000000A55C                 lea     r14, [rbp+var_3B0]
.text:000000000000A563                 push    rbx
.text:000000000000A564                 mov     rbx, rdx
.text:000000000000A567                 mov     r12, rcx
.text:000000000000A56A                 mov     rdx, r14
.text:000000000000A56D                 sub     rsp, 408h
.text:000000000000A574                 mov     [rbp+var_418], rsi
.text:000000000000A57B                 lea     rsi, [rbp+var_2C0]
.text:000000000000A582                 mov     [rbp+src], rdi
.text:000000000000A589                 mov     rdi, rbx
.text:000000000000A58C                 mov     [rbp+var_410], r14
.text:000000000000A593                 mov     rax, fs:28h
.text:000000000000A59C                 mov     [rbp+var_38], rax
.text:000000000000A5A0                 xor     eax, eax
.text:000000000000A5A2                 mov     [rbp+var_408], rsi
.text:000000000000A5A9                 call    printf_parse
.text:000000000000A5AE                 test    eax, eax
.text:000000000000A5B0                 js      loc_B418
.text:000000000000A5B6                 mov     rsi, r14
.text:000000000000A5B9                 mov     rdi, r12
.text:000000000000A5BC                 call    printf_fetchargs
.text:000000000000A5C1                 test    eax, eax
.text:000000000000A5C3                 js      loc_B480
.text:000000000000A5C9                 mov     rax, [rbp+var_2B0]
.text:000000000000A5D0                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A5D7                 add     rax, 7
.text:000000000000A5DB                 cmp     rax, 6
.text:000000000000A5DF                 cmovbe  rax, rdx
.text:000000000000A5E3                 add     rax, [rbp+var_2A8]
.text:000000000000A5EA                 jb      loc_B018
.text:000000000000A5F0                 mov     rdi, rax
.text:000000000000A5F3                 xor     r8d, r8d
.text:000000000000A5F6                 add     rdi, 6          ; size
.text:000000000000A5FA                 setb    r8b
.text:000000000000A5FE                 jb      loc_B018
.text:000000000000A604                 cmp     rdi, 0F9Fh
.text:000000000000A60B                 jbe     loc_A758
.text:000000000000A611                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000A615                 mov     [rbp+n], r8
.text:000000000000A61C                 jz      loc_B018
.text:000000000000A622                 call    _malloc
.text:000000000000A627                 test    rax, rax
.text:000000000000A62A                 mov     [rbp+var_3D8], rax
.text:000000000000A631                 jz      loc_B018
.text:000000000000A637                 mov     r8, [rbp+n]
.text:000000000000A63E                 mov     [rbp+ptr], rax
.text:000000000000A645
.text:000000000000A645 loc_A645:                               ; CODE XREF: vasnprintf+22E↓j
.text:000000000000A645                 xor     r12d, r12d
.text:000000000000A648                 cmp     [rbp+src], 0
.text:000000000000A650                 jz      short loc_A65C
.text:000000000000A652                 mov     rax, [rbp+var_418]
.text:000000000000A659                 mov     r12, [rax]
.text:000000000000A65C
.text:000000000000A65C loc_A65C:                               ; CODE XREF: vasnprintf+100↑j
.text:000000000000A65C                 mov     r13, [rbp+var_2B8]
.text:000000000000A663                 lea     rax, [rbp+var_3BC]
.text:000000000000A66A                 mov     r15, [rbp+src]
.text:000000000000A671                 mov     [rbp+var_400], 0
.text:000000000000A67C                 mov     [rbp+var_3F0], rax
.text:000000000000A683                 mov     rax, rbx
.text:000000000000A686                 mov     rbx, r8
.text:000000000000A689                 mov     rcx, [r13+0]
.text:000000000000A68D                 mov     r8, rax
.text:000000000000A690                 cmp     rcx, r8
.text:000000000000A693                 jz      loc_B001
.text:000000000000A699
.text:000000000000A699 loc_A699:                               ; CODE XREF: vasnprintf+AAB↓j
.text:000000000000A699                 sub     rcx, r8
.text:000000000000A69C                 mov     rax, rbx
.text:000000000000A69F                 add     rax, rcx
.text:000000000000A6A2                 mov     r14, rax
.text:000000000000A6A5                 jnb     loc_A788
.text:000000000000A6AB                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000A6AF                 jz      loc_B180
.text:000000000000A6B5
.text:000000000000A6B5 loc_A6B5:                               ; CODE XREF: vasnprintf+4E2↓j
.text:000000000000A6B5                                         ; vasnprintf+A86↓j ...
.text:000000000000A6B5                 call    ___errno_location
.text:000000000000A6BA                 mov     [rbp+n], rax
.text:000000000000A6C1
.text:000000000000A6C1 loc_A6C1:                               ; CODE XREF: vasnprintf+640↓j
.text:000000000000A6C1                                         ; vasnprintf+652↓j ...
.text:000000000000A6C1                 cmp     r15, [rbp+src]
.text:000000000000A6C8                 jz      short loc_A6D3
.text:000000000000A6CA                 test    r15, r15
.text:000000000000A6CD                 jnz     loc_B1B0
.text:000000000000A6D3
.text:000000000000A6D3 loc_A6D3:                               ; CODE XREF: vasnprintf+178↑j
.text:000000000000A6D3                                         ; vasnprintf+C68↓j
.text:000000000000A6D3                 mov     rax, [rbp+ptr]
.text:000000000000A6DA                 test    rax, rax
.text:000000000000A6DD                 jz      short loc_A6E7
.text:000000000000A6DF                 mov     rdi, rax        ; ptr
.text:000000000000A6E2                 call    _free
.text:000000000000A6E7
.text:000000000000A6E7 loc_A6E7:                               ; CODE XREF: vasnprintf+18D↑j
.text:000000000000A6E7                                         ; vasnprintf+AD4↓j
.text:000000000000A6E7                 mov     rax, [rbp+var_408]
.text:000000000000A6EE                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000A6F5                 add     rax, 20h ; ' '
.text:000000000000A6F9                 cmp     rdi, rax
.text:000000000000A6FC                 jz      short loc_A703
.text:000000000000A6FE                 call    _free
.text:000000000000A703
.text:000000000000A703 loc_A703:                               ; CODE XREF: vasnprintf+1AC↑j
.text:000000000000A703                 mov     rax, [rbp+var_410]
.text:000000000000A70A                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000A711                 add     rax, 10h
.text:000000000000A715                 cmp     rdi, rax
.text:000000000000A718                 jz      short loc_A71F
.text:000000000000A71A                 call    _free
.text:000000000000A71F
.text:000000000000A71F loc_A71F:                               ; CODE XREF: vasnprintf+1C8↑j
.text:000000000000A71F                 mov     rax, [rbp+n]
.text:000000000000A726                 xor     r15d, r15d
.text:000000000000A729                 mov     dword ptr [rax], 0Ch
.text:000000000000A72F
.text:000000000000A72F loc_A72F:                               ; CODE XREF: vasnprintf+7BA↓j
.text:000000000000A72F                                         ; vasnprintf+EBE↓j ...
.text:000000000000A72F                 mov     rdi, [rbp+var_38]
.text:000000000000A733                 xor     rdi, fs:28h
.text:000000000000A73C                 mov     rax, r15
.text:000000000000A73F                 jnz     loc_B647
.text:000000000000A745                 lea     rsp, [rbp-28h]
.text:000000000000A749                 pop     rbx
.text:000000000000A74A                 pop     r12
.text:000000000000A74C                 pop     r13
.text:000000000000A74E                 pop     r14
.text:000000000000A750                 pop     r15
.text:000000000000A752                 pop     rbp
.text:000000000000A753                 retn
.text:000000000000A753 ; ---------------------------------------------------------------------------
.text:000000000000A754                 align 8
.text:000000000000A758
.text:000000000000A758 loc_A758:                               ; CODE XREF: vasnprintf+BB↑j
.text:000000000000A758                 add     rax, 24h ; '$'
.text:000000000000A75C                 mov     [rbp+ptr], 0
.text:000000000000A767                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000A76B                 sub     rsp, rax
.text:000000000000A76E                 lea     rax, [rsp+430h+var_421]
.text:000000000000A773                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000A777                 mov     [rbp+var_3D8], rax
.text:000000000000A77E                 jmp     loc_A645
.text:000000000000A77E ; ---------------------------------------------------------------------------
.text:000000000000A783                 align 8
.text:000000000000A788
.text:000000000000A788 loc_A788:                               ; CODE XREF: vasnprintf+155↑j
.text:000000000000A788                 cmp     r12, rax
.text:000000000000A78B                 jnb     short loc_A7F4
.text:000000000000A78D                 test    r12, r12
.text:000000000000A790                 jnz     loc_B0C0
.text:000000000000A796                 cmp     rax, 0Ch
.text:000000000000A79A                 ja      loc_B0D2
.text:000000000000A7A0                 mov     r12d, 0Ch
.text:000000000000A7A6
.text:000000000000A7A6 loc_A7A6:                               ; CODE XREF: vasnprintf+B7C↓j
.text:000000000000A7A6                 cmp     r15, [rbp+src]
.text:000000000000A7AD                 setz    dl
.text:000000000000A7B0                 test    r15, r15
.text:000000000000A7B3                 jz      loc_B0F8
.text:000000000000A7B9
.text:000000000000A7B9 loc_A7B9:                               ; CODE XREF: vasnprintf+B9C↓j
.text:000000000000A7B9                 test    dl, dl
.text:000000000000A7BB                 jnz     loc_B0F8
.text:000000000000A7C1                 mov     rsi, r12        ; size
.text:000000000000A7C4                 mov     rdi, r15        ; ptr
.text:000000000000A7C7                 mov     [rbp+var_3D0], r8
.text:000000000000A7CE                 mov     [rbp+n], rcx
.text:000000000000A7D5                 call    _realloc
.text:000000000000A7DA                 test    rax, rax
.text:000000000000A7DD                 mov     rcx, [rbp+n]
.text:000000000000A7E4                 mov     r8, [rbp+var_3D0]
.text:000000000000A7EB                 jz      loc_B19B
.text:000000000000A7F1                 mov     r15, rax
.text:000000000000A7F4
.text:000000000000A7F4 loc_A7F4:                               ; CODE XREF: vasnprintf+23B↑j
.text:000000000000A7F4                                         ; vasnprintf+C23↓j ...
.text:000000000000A7F4                 lea     rdi, [r15+rbx]  ; dest
.text:000000000000A7F8                 mov     rdx, rcx        ; n
.text:000000000000A7FB                 mov     rsi, r8         ; src
.text:000000000000A7FE                 call    _memcpy
.text:000000000000A803
.text:000000000000A803 loc_A803:                               ; CODE XREF: vasnprintf+AB4↓j
.text:000000000000A803                 mov     rax, [rbp+var_400]
.text:000000000000A80A                 cmp     [rbp+var_2C0], rax
.text:000000000000A811                 jz      loc_B4CB
.text:000000000000A817                 movzx   edx, byte ptr [r13+48h]
.text:000000000000A81C                 mov     rax, [r13+50h]
.text:000000000000A820                 cmp     dl, 25h ; '%'
.text:000000000000A823                 jz      loc_AFB8
.text:000000000000A829                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A82D                 jz      def_AAAB        ; jumptable 000000000000AAAB default case, case 0
.text:000000000000A82D                                         ; jumptable 000000000000B050 default case
.text:000000000000A833                 mov     r8, [rbp+var_3A8]
.text:000000000000A83A                 shl     rax, 5
.text:000000000000A83E                 add     rax, r8
.text:000000000000A841                 cmp     dl, 6Eh ; 'n'
.text:000000000000A844                 mov     edi, [rax]
.text:000000000000A846                 mov     dword ptr [rbp+var_3D0], edi
.text:000000000000A84C                 jz      loc_B030
.text:000000000000A852                 mov     eax, [r13+10h]
.text:000000000000A856                 mov     rdi, [rbp+var_3D8]
.text:000000000000A85D                 test    al, 1
.text:000000000000A85F                 mov     byte ptr [rdi], 25h ; '%'
.text:000000000000A862                 lea     rbx, [rdi+1]
.text:000000000000A866                 jz      short loc_A877
.text:000000000000A868                 mov     rdi, [rbp+var_3D8]
.text:000000000000A86F                 lea     rbx, [rdi+2]
.text:000000000000A873                 mov     byte ptr [rdi+1], 27h ; '''
.text:000000000000A877
.text:000000000000A877 loc_A877:                               ; CODE XREF: vasnprintf+316↑j
.text:000000000000A877                 test    al, 2
.text:000000000000A879                 jz      short loc_A882
.text:000000000000A87B                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000000A87E                 add     rbx, 1
.text:000000000000A882
.text:000000000000A882 loc_A882:                               ; CODE XREF: vasnprintf+329↑j
.text:000000000000A882                 test    al, 4
.text:000000000000A884                 jz      short loc_A88D
.text:000000000000A886                 mov     byte ptr [rbx], 2Bh ; '+'
.text:000000000000A889                 add     rbx, 1
.text:000000000000A88D
.text:000000000000A88D loc_A88D:                               ; CODE XREF: vasnprintf+334↑j
.text:000000000000A88D                 test    al, 8
.text:000000000000A88F                 jz      short loc_A898
.text:000000000000A891                 mov     byte ptr [rbx], 20h ; ' '
.text:000000000000A894                 add     rbx, 1
.text:000000000000A898
.text:000000000000A898 loc_A898:                               ; CODE XREF: vasnprintf+33F↑j
.text:000000000000A898                 test    al, 10h
.text:000000000000A89A                 jz      short loc_A8A3
.text:000000000000A89C                 mov     byte ptr [rbx], 23h ; '#'
.text:000000000000A89F                 add     rbx, 1
.text:000000000000A8A3
.text:000000000000A8A3 loc_A8A3:                               ; CODE XREF: vasnprintf+34A↑j
.text:000000000000A8A3                 test    al, 40h
.text:000000000000A8A5                 jz      short loc_A8AE
.text:000000000000A8A7                 mov     byte ptr [rbx], 49h ; 'I'
.text:000000000000A8AA                 add     rbx, 1
.text:000000000000A8AE
.text:000000000000A8AE loc_A8AE:                               ; CODE XREF: vasnprintf+355↑j
.text:000000000000A8AE                 test    al, 20h
.text:000000000000A8B0                 jz      short loc_A8B9
.text:000000000000A8B2                 mov     byte ptr [rbx], 30h ; '0'
.text:000000000000A8B5                 add     rbx, 1
.text:000000000000A8B9
.text:000000000000A8B9 loc_A8B9:                               ; CODE XREF: vasnprintf+360↑j
.text:000000000000A8B9                 mov     rsi, [r13+18h]  ; src
.text:000000000000A8BD                 mov     rdx, [r13+20h]
.text:000000000000A8C1                 cmp     rsi, rdx
.text:000000000000A8C4                 jz      short loc_A8F6
.text:000000000000A8C6                 mov     rcx, rdx
.text:000000000000A8C9                 mov     rdi, rbx        ; dest
.text:000000000000A8CC                 mov     [rbp+var_3E0], r8
.text:000000000000A8D3                 sub     rcx, rsi
.text:000000000000A8D6                 mov     rdx, rcx        ; n
.text:000000000000A8D9                 mov     [rbp+n], rcx
.text:000000000000A8E0                 call    _memcpy
.text:000000000000A8E5                 mov     rcx, [rbp+n]
.text:000000000000A8EC                 mov     r8, [rbp+var_3E0]
.text:000000000000A8F3                 add     rbx, rcx
.text:000000000000A8F6
.text:000000000000A8F6 loc_A8F6:                               ; CODE XREF: vasnprintf+374↑j
.text:000000000000A8F6                 mov     rsi, [r13+30h]  ; src
.text:000000000000A8FA                 mov     rdx, [r13+38h]
.text:000000000000A8FE                 cmp     rsi, rdx
.text:000000000000A901                 jz      short loc_A933
.text:000000000000A903                 mov     rcx, rdx
.text:000000000000A906                 mov     rdi, rbx        ; dest
.text:000000000000A909                 mov     [rbp+var_3E0], r8
.text:000000000000A910                 sub     rcx, rsi
.text:000000000000A913                 mov     rdx, rcx        ; n
.text:000000000000A916                 mov     [rbp+n], rcx
.text:000000000000A91D                 call    _memcpy
.text:000000000000A922                 mov     rcx, [rbp+n]
.text:000000000000A929                 mov     r8, [rbp+var_3E0]
.text:000000000000A930                 add     rbx, rcx
.text:000000000000A933
.text:000000000000A933 loc_A933:                               ; CODE XREF: vasnprintf+3B1↑j
.text:000000000000A933                 mov     edi, dword ptr [rbp+var_3D0]
.text:000000000000A939                 cmp     edi, 10h
.text:000000000000A93C                 ja      short loc_A96B
.text:000000000000A93E                 mov     eax, 1
.text:000000000000A943                 mov     ecx, edi
.text:000000000000A945                 shl     rax, cl
.text:000000000000A948                 test    eax, 14180h
.text:000000000000A94D                 jnz     short loc_A964
.text:000000000000A94F                 test    ah, 10h
.text:000000000000A952                 jnz     loc_B2B0
.text:000000000000A958                 test    ah, 6
.text:000000000000A95B                 jz      short loc_A96B
.text:000000000000A95D                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:000000000000A960                 add     rbx, 1
.text:000000000000A964
.text:000000000000A964 loc_A964:                               ; CODE XREF: vasnprintf+3FD↑j
.text:000000000000A964                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:000000000000A967                 add     rbx, 1
.text:000000000000A96B
.text:000000000000A96B loc_A96B:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000A96B                                         ; vasnprintf+40B↑j ...
.text:000000000000A96B                 movzx   eax, byte ptr [r13+48h]
.text:000000000000A970                 mov     byte ptr [rbx+1], 0
.text:000000000000A974                 mov     [rbx], al
.text:000000000000A976                 mov     rax, [r13+28h]
.text:000000000000A97A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A97E                 jz      loc_B0B0
.text:000000000000A984                 shl     rax, 5
.text:000000000000A988                 add     rax, r8
.text:000000000000A98B                 cmp     dword ptr [rax], 5
.text:000000000000A98E                 jnz     def_AAAB        ; jumptable 000000000000AAAB default case, case 0
.text:000000000000A98E                                         ; jumptable 000000000000B050 default case
.text:000000000000A994                 mov     eax, [rax+10h]
.text:000000000000A997                 mov     dword ptr [rbp+var_3E0], 1
.text:000000000000A9A1                 mov     [rbp+var_3B8], eax
.text:000000000000A9A7
.text:000000000000A9A7 loc_A9A7:                               ; CODE XREF: vasnprintf+B6A↓j
.text:000000000000A9A7                 mov     rax, [r13+40h]
.text:000000000000A9AB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A9AF                 jz      short loc_A9DC
.text:000000000000A9B1                 shl     rax, 5
.text:000000000000A9B5                 add     r8, rax
.text:000000000000A9B8                 cmp     dword ptr [r8], 5
.text:000000000000A9BC                 jnz     def_AAAB        ; jumptable 000000000000AAAB default case, case 0
.text:000000000000A9BC                                         ; jumptable 000000000000B050 default case
.text:000000000000A9C2                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000A9C8                 mov     edx, [r8+10h]
.text:000000000000A9CC                 mov     [rbp+rax*4+var_3B8], edx
.text:000000000000A9D3                 lea     eax, [rax+1]
.text:000000000000A9D6                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000A9DC
.text:000000000000A9DC loc_A9DC:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000A9DC                 mov     rax, r14
.text:000000000000A9DF                 xor     edx, edx
.text:000000000000A9E1                 add     rax, 2
.text:000000000000A9E5                 jb      loc_B64C
.text:000000000000A9EB                 cmp     r12, rax
.text:000000000000A9EE                 jnb     short loc_AA3B
.text:000000000000A9F0                 test    r12, r12
.text:000000000000A9F3                 jnz     loc_B218
.text:000000000000A9F9                 cmp     rax, 0Ch
.text:000000000000A9FD                 ja      loc_B230
.text:000000000000AA03                 mov     r12d, 0Ch
.text:000000000000AA09
.text:000000000000AA09 loc_AA09:                               ; CODE XREF: vasnprintf+CD4↓j
.text:000000000000AA09                 cmp     r15, [rbp+src]
.text:000000000000AA10                 setz    dl
.text:000000000000AA13                 test    r15, r15
.text:000000000000AA16                 jz      loc_B260
.text:000000000000AA1C
.text:000000000000AA1C loc_AA1C:                               ; CODE XREF: vasnprintf+D03↓j
.text:000000000000AA1C                 test    dl, dl
.text:000000000000AA1E                 jnz     loc_B260
.text:000000000000AA24                 mov     rsi, r12        ; size
.text:000000000000AA27                 mov     rdi, r15        ; ptr
.text:000000000000AA2A                 call    _realloc
.text:000000000000AA2F                 test    rax, rax
.text:000000000000AA32                 jz      loc_A6B5
.text:000000000000AA38                 mov     r15, rax
.text:000000000000AA3B
.text:000000000000AA3B loc_AA3B:                               ; CODE XREF: vasnprintf+49E↑j
.text:000000000000AA3B                                         ; vasnprintf+D53↓j ...
.text:000000000000AA3B                 mov     byte ptr [r15+r14], 0
.text:000000000000AA40                 call    ___errno_location
.text:000000000000AA45                 mov     [rbp+n], rax
.text:000000000000AA4C                 mov     eax, [rax]
.text:000000000000AA4E                 mov     [rbp+var_3F8], rbx
.text:000000000000AA55                 mov     [rbp-424h], eax
.text:000000000000AA5B                 nop     dword ptr [rax+rax+00h]
.text:000000000000AA60
.text:000000000000AA60 loc_AA60:                               ; CODE XREF: vasnprintf+637↓j
.text:000000000000AA60                                         ; vasnprintf+68D↓j ...
.text:000000000000AA60                 mov     rax, [rbp+n]
.text:000000000000AA67                 mov     rbx, r12
.text:000000000000AA6A                 mov     r10d, 7FFFFFFFh
.text:000000000000AA70                 sub     rbx, r14
.text:000000000000AA73                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000AA7D                 cmp     rbx, 7FFFFFFFh
.text:000000000000AA84                 mov     dword ptr [rax], 0
.text:000000000000AA8A                 mov     eax, dword ptr [rbp+var_3D0]
.text:000000000000AA90                 cmovbe  r10, rbx
.text:000000000000AA94                 cmp     eax, 11h        ; switch 18 cases
.text:000000000000AA97                 ja      def_AAAB        ; jumptable 000000000000AAAB default case, case 0
.text:000000000000AA97                                         ; jumptable 000000000000B050 default case
.text:000000000000AA9D                 lea     rsi, jpt_AAAB
.text:000000000000AAA4                 movsxd  rax, ds:(jpt_AAAB - 0EC50h)[rsi+rax*4]
.text:000000000000AAA8                 add     rax, rsi
.text:000000000000AAAB                 jmp     rax             ; switch jump
.text:000000000000AAAB ; ---------------------------------------------------------------------------
.text:000000000000AAAD                 align 10h
.text:000000000000AAB0
.text:000000000000AAB0 loc_AAB0:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000AAB0                                         ; DATA XREF: .rodata:jpt_AAAB↓o
.text:000000000000AAB0                 mov     rax, [r13+50h]  ; jumptable 000000000000AAAB cases 7-10,15-17
.text:000000000000AAB4                 lea     rdi, [r15+r14]
.text:000000000000AAB8                 shl     rax, 5
.text:000000000000AABC                 add     rax, [rbp+var_3A8]
.text:000000000000AAC3                 mov     r9, [rax+10h]
.text:000000000000AAC7                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000AACD                 cmp     eax, 1
.text:000000000000AAD0                 jz      loc_AF98
.text:000000000000AAD6                 cmp     eax, 2
.text:000000000000AAD9                 jz      loc_AF80
.text:000000000000AADF                 sub     rsp, 8
.text:000000000000AAE3                 push    [rbp+var_3F0]
.text:000000000000AAE9
.text:000000000000AAE9 loc_AAE9:                               ; CODE XREF: vasnprintf+CBE↓j
.text:000000000000AAE9                 mov     r8, [rbp+var_3D8]
.text:000000000000AAF0                 mov     rsi, r10
.text:000000000000AAF3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000AAFA                 mov     edx, 1
.text:000000000000AAFF                 xor     eax, eax
.text:000000000000AB01                 mov     [rbp+var_430], r10
.text:000000000000AB08                 call    ___snprintf_chk
.text:000000000000AB0D                 pop     rsi
.text:000000000000AB0E                 pop     rdi
.text:000000000000AB0F                 mov     r10, [rbp+var_430]
.text:000000000000AB16
.text:000000000000AB16 loc_AB16:                               ; CODE XREF: vasnprintf+83D↓j
.text:000000000000AB16                                         ; vasnprintf+8BE↓j ...
.text:000000000000AB16                 mov     ecx, [rbp+var_3BC]
.text:000000000000AB1C                 test    ecx, ecx
.text:000000000000AB1E                 js      loc_AC5C
.text:000000000000AB24
.text:000000000000AB24 loc_AB24:                               ; CODE XREF: vasnprintf+706↓j
.text:000000000000AB24                 movsxd  rdx, ecx
.text:000000000000AB27                 cmp     rdx, r10
.text:000000000000AB2A                 jnb     short loc_AB3A
.text:000000000000AB2C                 add     rdx, r15
.text:000000000000AB2F                 cmp     byte ptr [rdx+r14], 0
.text:000000000000AB34                 jnz     def_AAAB        ; jumptable 000000000000AAAB default case, case 0
.text:000000000000AB34                                         ; jumptable 000000000000B050 default case
.text:000000000000AB3A
.text:000000000000AB3A loc_AB3A:                               ; CODE XREF: vasnprintf+5DA↑j
.text:000000000000AB3A                 cmp     ecx, eax
.text:000000000000AB3C                 jge     short loc_AB46
.text:000000000000AB3E
.text:000000000000AB3E loc_AB3E:                               ; CODE XREF: vasnprintf+71F↓j
.text:000000000000AB3E                 mov     [rbp+var_3BC], eax
.text:000000000000AB44                 mov     ecx, eax
.text:000000000000AB46
.text:000000000000AB46 loc_AB46:                               ; CODE XREF: vasnprintf+5EC↑j
.text:000000000000AB46                 lea     eax, [rcx+1]
.text:000000000000AB49                 cmp     rax, r10
.text:000000000000AB4C                 jb      loc_B380
.text:000000000000AB52                 cmp     rbx, 7FFFFFFEh
.text:000000000000AB59                 ja      loc_B3A0
.text:000000000000AB5F                 lea     rsi, [r12+r12]
.text:000000000000AB63                 lea     edx, [rcx+2]
.text:000000000000AB66                 test    r12, r12
.text:000000000000AB69                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000AB70                 cmovns  rax, rsi
.text:000000000000AB74                 add     rdx, r14
.text:000000000000AB77                 jb      loc_B638
.text:000000000000AB7D                 cmp     rax, rdx
.text:000000000000AB80                 cmovb   rax, rdx
.text:000000000000AB84                 cmp     r12, rax
.text:000000000000AB87                 jnb     loc_AA60
.text:000000000000AB8D                 test    r12, r12
.text:000000000000AB90                 js      loc_A6C1
.text:000000000000AB96                 cmp     rsi, rax
.text:000000000000AB99                 mov     r12, rsi
.text:000000000000AB9C                 jnb     short loc_ABAB
.text:000000000000AB9E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000ABA2                 jz      loc_A6C1
.text:000000000000ABA8                 mov     r12, rax
.text:000000000000ABAB
.text:000000000000ABAB loc_ABAB:                               ; CODE XREF: vasnprintf+64C↑j
.text:000000000000ABAB                 cmp     r15, [rbp+src]
.text:000000000000ABB2                 setz    bl
.text:000000000000ABB5                 test    r15, r15
.text:000000000000ABB8                 jz      loc_AF40
.text:000000000000ABBE                 test    bl, bl
.text:000000000000ABC0                 jnz     loc_AF40
.text:000000000000ABC6                 mov     rsi, r12        ; size
.text:000000000000ABC9                 mov     rdi, r15        ; ptr
.text:000000000000ABCC                 call    _realloc
.text:000000000000ABD1                 test    rax, rax
.text:000000000000ABD4                 jz      loc_A6C1
.text:000000000000ABDA                 mov     r15, rax
.text:000000000000ABDD                 jmp     loc_AA60
.text:000000000000ABDD ; ---------------------------------------------------------------------------
.text:000000000000ABE2                 align 8
.text:000000000000ABE8
.text:000000000000ABE8 loc_ABE8:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000ABE8                                         ; DATA XREF: .rodata:jpt_AAAB↓o
.text:000000000000ABE8                 mov     rax, [r13+50h]  ; jumptable 000000000000AAAB cases 5,6,13,14
.text:000000000000ABEC                 lea     rdi, [r15+r14]
.text:000000000000ABF0                 shl     rax, 5
.text:000000000000ABF4                 add     rax, [rbp+var_3A8]
.text:000000000000ABFB                 mov     r9d, [rax+10h]
.text:000000000000ABFF                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000AC05                 cmp     eax, 1
.text:000000000000AC08                 jz      loc_AE40
.text:000000000000AC0E
.text:000000000000AC0E loc_AC0E:                               ; CODE XREF: vasnprintf+8E9↓j
.text:000000000000AC0E                                         ; vasnprintf+9B1↓j ...
.text:000000000000AC0E                 cmp     eax, 2
.text:000000000000AC11                 jz      loc_AE88
.text:000000000000AC17
.text:000000000000AC17 loc_AC17:                               ; CODE XREF: vasnprintf+92E↓j
.text:000000000000AC17                 sub     rsp, 8
.text:000000000000AC1B                 push    [rbp+var_3F0]
.text:000000000000AC21
.text:000000000000AC21 loc_AC21:                               ; CODE XREF: vasnprintf+8FF↓j
.text:000000000000AC21                 mov     r8, [rbp+var_3D8]
.text:000000000000AC28                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000AC2F                 mov     edx, 1
.text:000000000000AC34                 mov     rsi, r10
.text:000000000000AC37                 xor     eax, eax
.text:000000000000AC39                 mov     [rbp+var_430], r10
.text:000000000000AC40                 call    ___snprintf_chk
.text:000000000000AC45                 pop     rdx
.text:000000000000AC46                 pop     rcx
.text:000000000000AC47                 mov     ecx, [rbp+var_3BC]
.text:000000000000AC4D                 mov     r10, [rbp+var_430]
.text:000000000000AC54                 test    ecx, ecx
.text:000000000000AC56                 jns     loc_AB24
.text:000000000000AC5C
.text:000000000000AC5C loc_AC5C:                               ; CODE XREF: vasnprintf+5CE↑j
.text:000000000000AC5C                 mov     rdi, [rbp+var_3F8]
.text:000000000000AC63                 cmp     byte ptr [rdi+1], 0
.text:000000000000AC67                 jnz     loc_AFA8
.text:000000000000AC6D                 test    eax, eax
.text:000000000000AC6F                 jns     loc_AB3E
.text:000000000000AC75                 mov     rax, [rbp+n]
.text:000000000000AC7C                 mov     ebx, [rax]
.text:000000000000AC7E                 test    ebx, ebx
.text:000000000000AC80                 jnz     short loc_ACA0
.text:000000000000AC82                 movzx   eax, byte ptr [r13+48h]
.text:000000000000AC87                 mov     ebx, 16h
.text:000000000000AC8C                 and     eax, 0FFFFFFEFh
.text:000000000000AC8F                 cmp     al, 63h ; 'c'
.text:000000000000AC91                 mov     eax, 54h ; 'T'
.text:000000000000AC96                 cmovz   ebx, eax
.text:000000000000AC99                 nop     dword ptr [rax+00000000h]
.text:000000000000ACA0
.text:000000000000ACA0 loc_ACA0:                               ; CODE XREF: vasnprintf+730↑j
.text:000000000000ACA0                 cmp     r15, [rbp+src]
.text:000000000000ACA7                 jz      short loc_ACB2
.text:000000000000ACA9                 test    r15, r15
.text:000000000000ACAC                 jnz     loc_B45C
.text:000000000000ACB2
.text:000000000000ACB2 loc_ACB2:                               ; CODE XREF: vasnprintf+757↑j
.text:000000000000ACB2                                         ; vasnprintf+F14↓j
.text:000000000000ACB2                 mov     rax, [rbp+ptr]
.text:000000000000ACB9                 test    rax, rax
.text:000000000000ACBC                 jz      short loc_ACC6
.text:000000000000ACBE                 mov     rdi, rax        ; ptr
.text:000000000000ACC1                 call    _free
.text:000000000000ACC6
.text:000000000000ACC6 loc_ACC6:                               ; CODE XREF: vasnprintf+76C↑j
.text:000000000000ACC6                 mov     rax, [rbp+var_408]
.text:000000000000ACCD                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000ACD4                 add     rax, 20h ; ' '
.text:000000000000ACD8                 cmp     rdi, rax
.text:000000000000ACDB                 jz      short loc_ACE2
.text:000000000000ACDD                 call    _free
.text:000000000000ACE2
.text:000000000000ACE2 loc_ACE2:                               ; CODE XREF: vasnprintf+78B↑j
.text:000000000000ACE2                 mov     rax, [rbp+var_410]
.text:000000000000ACE9                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000ACF0                 add     rax, 10h
.text:000000000000ACF4                 cmp     rdi, rax
.text:000000000000ACF7                 jz      short loc_ACFE
.text:000000000000ACF9                 call    _free
.text:000000000000ACFE
.text:000000000000ACFE loc_ACFE:                               ; CODE XREF: vasnprintf+7A7↑j
.text:000000000000ACFE                 mov     rax, [rbp+n]
.text:000000000000AD05                 xor     r15d, r15d
.text:000000000000AD08                 mov     [rax], ebx
.text:000000000000AD0A                 jmp     loc_A72F
.text:000000000000AD0A ; ---------------------------------------------------------------------------
.text:000000000000AD0F                 align 10h
.text:000000000000AD10
.text:000000000000AD10 loc_AD10:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000AD10                                         ; DATA XREF: .rodata:jpt_AAAB↓o
.text:000000000000AD10                 mov     rax, [r13+50h]  ; jumptable 000000000000AAAB case 12
.text:000000000000AD14                 lea     rdi, [r15+r14]
.text:000000000000AD18                 shl     rax, 5
.text:000000000000AD1C                 add     rax, [rbp+var_3A8]
.text:000000000000AD23                 fld     tbyte ptr [rax+10h]
.text:000000000000AD26                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000AD2C                 cmp     eax, 1
.text:000000000000AD2F                 jz      loc_B360
.text:000000000000AD35                 cmp     eax, 2
.text:000000000000AD38                 jnz     loc_B200
.text:000000000000AD3E                 mov     eax, [rbp+var_3B4]
.text:000000000000AD44                 sub     rsp, 8
.text:000000000000AD48                 push    [rbp+var_3F0]
.text:000000000000AD4E                 mov     r9d, [rbp+var_3B8]
.text:000000000000AD55                 mov     r8, [rbp+var_3D8]
.text:000000000000AD5C                 mov     rsi, r10
.text:000000000000AD5F                 sub     rsp, 18h
.text:000000000000AD63                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000AD6A                 mov     edx, 1
.text:000000000000AD6F                 fstp    [rsp+458h+var_450]
.text:000000000000AD73                 push    rax
.text:000000000000AD74                 xor     eax, eax
.text:000000000000AD76                 mov     [rbp+var_430], r10
.text:000000000000AD7D                 call    ___snprintf_chk
.text:000000000000AD82                 add     rsp, 30h
.text:000000000000AD86                 mov     r10, [rbp+var_430]
.text:000000000000AD8D                 jmp     loc_AB16
.text:000000000000AD8D ; ---------------------------------------------------------------------------
.text:000000000000AD92                 align 8
.text:000000000000AD98
.text:000000000000AD98 loc_AD98:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000AD98                                         ; DATA XREF: .rodata:jpt_AAAB↓o
.text:000000000000AD98                 mov     rax, [r13+50h]  ; jumptable 000000000000AAAB case 11
.text:000000000000AD9C                 lea     rdi, [r15+r14]
.text:000000000000ADA0                 shl     rax, 5
.text:000000000000ADA4                 add     rax, [rbp+var_3A8]
.text:000000000000ADAB                 movsd   xmm0, qword ptr [rax+10h]
.text:000000000000ADB0                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000ADB6                 cmp     eax, 1
.text:000000000000ADB9                 jz      loc_B350
.text:000000000000ADBF                 cmp     eax, 2
.text:000000000000ADC2                 jnz     loc_B1C0
.text:000000000000ADC8                 mov     eax, [rbp+var_3B4]
.text:000000000000ADCE                 push    [rbp+var_3F0]
.text:000000000000ADD4                 push    rax
.text:000000000000ADD5
.text:000000000000ADD5 loc_ADD5:                               ; CODE XREF: vasnprintf+E0A↓j
.text:000000000000ADD5                 mov     r9d, [rbp+var_3B8]
.text:000000000000ADDC                 mov     r8, [rbp+var_3D8]
.text:000000000000ADE3                 mov     rsi, r10
.text:000000000000ADE6                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000ADED                 mov     edx, 1
.text:000000000000ADF2                 mov     eax, 1
.text:000000000000ADF7                 mov     [rbp+var_430], r10
.text:000000000000ADFE                 call    ___snprintf_chk
.text:000000000000AE03                 pop     r8
.text:000000000000AE05                 mov     r10, [rbp+var_430]
.text:000000000000AE0C                 pop     r9
.text:000000000000AE0E                 jmp     loc_AB16
.text:000000000000AE0E ; ---------------------------------------------------------------------------
.text:000000000000AE13                 align 8
.text:000000000000AE18
.text:000000000000AE18 loc_AE18:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000AE18                                         ; DATA XREF: .rodata:jpt_AAAB↓o
.text:000000000000AE18                 mov     rax, [r13+50h]  ; jumptable 000000000000AAAB case 4
.text:000000000000AE1C                 lea     rdi, [r15+r14]
.text:000000000000AE20                 shl     rax, 5
.text:000000000000AE24                 add     rax, [rbp+var_3A8]
.text:000000000000AE2B                 movzx   r9d, word ptr [rax+10h]
.text:000000000000AE30                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000AE36                 cmp     eax, 1
.text:000000000000AE39                 jnz     loc_AC0E
.text:000000000000AE3F                 nop
.text:000000000000AE40
.text:000000000000AE40 loc_AE40:                               ; CODE XREF: vasnprintf+6B8↑j
.text:000000000000AE40                                         ; vasnprintf+929↓j ...
.text:000000000000AE40                 push    [rbp+var_3F0]
.text:000000000000AE46                 push    r9
.text:000000000000AE48
.text:000000000000AE48 loc_AE48:                               ; CODE XREF: vasnprintf+A50↓j
.text:000000000000AE48                 mov     r9d, [rbp+var_3B8]
.text:000000000000AE4F                 jmp     loc_AC21
.text:000000000000AE4F ; ---------------------------------------------------------------------------
.text:000000000000AE54                 align 8
.text:000000000000AE58
.text:000000000000AE58 loc_AE58:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000AE58                                         ; DATA XREF: .rodata:jpt_AAAB↓o
.text:000000000000AE58                 mov     rax, [r13+50h]  ; jumptable 000000000000AAAB case 3
.text:000000000000AE5C                 lea     rdi, [r15+r14]
.text:000000000000AE60                 shl     rax, 5
.text:000000000000AE64                 add     rax, [rbp+var_3A8]
.text:000000000000AE6B                 movsx   r9d, word ptr [rax+10h]
.text:000000000000AE70                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000AE76                 cmp     eax, 1
.text:000000000000AE79                 jz      short loc_AE40
.text:000000000000AE7B                 cmp     eax, 2
.text:000000000000AE7E                 jnz     loc_AC17
.text:000000000000AE84                 nop     dword ptr [rax+00h]
.text:000000000000AE88
.text:000000000000AE88 loc_AE88:                               ; CODE XREF: vasnprintf+6C1↑j
.text:000000000000AE88                 sub     rsp, 8
.text:000000000000AE8C                 push    [rbp+var_3F0]
.text:000000000000AE92                 push    r9
.text:000000000000AE94
.text:000000000000AE94 loc_AE94:                               ; CODE XREF: vasnprintf+A3C↓j
.text:000000000000AE94                 mov     eax, [rbp+var_3B4]
.text:000000000000AE9A                 push    rax
.text:000000000000AE9B
.text:000000000000AE9B loc_AE9B:                               ; CODE XREF: vasnprintf+E21↓j
.text:000000000000AE9B                 mov     r9d, [rbp+var_3B8]
.text:000000000000AEA2                 mov     r8, [rbp+var_3D8]
.text:000000000000AEA9                 mov     rsi, r10
.text:000000000000AEAC                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000AEB3                 mov     edx, 1
.text:000000000000AEB8                 xor     eax, eax
.text:000000000000AEBA                 mov     [rbp+var_430], r10
.text:000000000000AEC1                 call    ___snprintf_chk
.text:000000000000AEC6                 add     rsp, 20h
.text:000000000000AECA                 mov     r10, [rbp+var_430]
.text:000000000000AED1                 jmp     loc_AB16
.text:000000000000AED1 ; ---------------------------------------------------------------------------
.text:000000000000AED6                 align 20h
.text:000000000000AEE0
.text:000000000000AEE0 loc_AEE0:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000AEE0                                         ; DATA XREF: .rodata:jpt_AAAB↓o
.text:000000000000AEE0                 mov     rax, [r13+50h]  ; jumptable 000000000000AAAB case 2
.text:000000000000AEE4                 lea     rdi, [r15+r14]
.text:000000000000AEE8                 shl     rax, 5
.text:000000000000AEEC                 add     rax, [rbp+var_3A8]
.text:000000000000AEF3                 movzx   r9d, byte ptr [rax+10h]
.text:000000000000AEF8                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000AEFE                 cmp     eax, 1
.text:000000000000AF01                 jnz     loc_AC0E
.text:000000000000AF07                 jmp     loc_AE40
.text:000000000000AF07 ; ---------------------------------------------------------------------------
.text:000000000000AF0C                 align 10h
.text:000000000000AF10
.text:000000000000AF10 loc_AF10:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000AF10                                         ; DATA XREF: .rodata:jpt_AAAB↓o
.text:000000000000AF10                 mov     rax, [r13+50h]  ; jumptable 000000000000AAAB case 1
.text:000000000000AF14                 lea     rdi, [r15+r14]
.text:000000000000AF18                 shl     rax, 5
.text:000000000000AF1C                 add     rax, [rbp+var_3A8]
.text:000000000000AF23                 movsx   r9d, byte ptr [rax+10h]
.text:000000000000AF28                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000AF2E                 cmp     eax, 1
.text:000000000000AF31                 jnz     loc_AC0E
.text:000000000000AF37                 jmp     loc_AE40
.text:000000000000AF37 ; ---------------------------------------------------------------------------
.text:000000000000AF3C                 align 20h
.text:000000000000AF40
.text:000000000000AF40 loc_AF40:                               ; CODE XREF: vasnprintf+668↑j
.text:000000000000AF40                                         ; vasnprintf+670↑j
.text:000000000000AF40                 mov     rdi, r12        ; size
.text:000000000000AF43                 call    _malloc
.text:000000000000AF48                 test    rax, rax
.text:000000000000AF4B                 mov     rcx, rax
.text:000000000000AF4E                 jz      loc_A6C1
.text:000000000000AF54                 test    r14, r14
.text:000000000000AF57                 jz      loc_B010
.text:000000000000AF5D                 test    bl, bl
.text:000000000000AF5F                 jz      loc_B010
.text:000000000000AF65                 mov     rsi, r15        ; src
.text:000000000000AF68                 mov     rdx, r14        ; n
.text:000000000000AF6B                 mov     rdi, rax        ; dest
.text:000000000000AF6E                 call    _memcpy
.text:000000000000AF73                 mov     r15, rax
.text:000000000000AF76                 jmp     loc_AA60
.text:000000000000AF76 ; ---------------------------------------------------------------------------
.text:000000000000AF7B                 align 20h
.text:000000000000AF80
.text:000000000000AF80 loc_AF80:                               ; CODE XREF: vasnprintf+589↑j
.text:000000000000AF80                 sub     rsp, 8
.text:000000000000AF84                 push    [rbp+var_3F0]
.text:000000000000AF8A                 push    r9
.text:000000000000AF8C                 jmp     loc_AE94
.text:000000000000AF8C ; ---------------------------------------------------------------------------
.text:000000000000AF91                 align 8
.text:000000000000AF98
.text:000000000000AF98 loc_AF98:                               ; CODE XREF: vasnprintf+580↑j
.text:000000000000AF98                 push    [rbp+var_3F0]
.text:000000000000AF9E                 push    r9
.text:000000000000AFA0                 jmp     loc_AE48
.text:000000000000AFA0 ; ---------------------------------------------------------------------------
.text:000000000000AFA5                 align 8
.text:000000000000AFA8
.text:000000000000AFA8 loc_AFA8:                               ; CODE XREF: vasnprintf+717↑j
.text:000000000000AFA8                 mov     byte ptr [rdi+1], 0
.text:000000000000AFAC                 jmp     loc_AA60
.text:000000000000AFAC ; ---------------------------------------------------------------------------
.text:000000000000AFB1                 align 8
.text:000000000000AFB8
.text:000000000000AFB8 loc_AFB8:                               ; CODE XREF: vasnprintf+2D3↑j
.text:000000000000AFB8                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000AFBC                 jnz     def_AAAB        ; jumptable 000000000000AAAB default case, case 0
.text:000000000000AFBC                                         ; jumptable 000000000000B050 default case
.text:000000000000AFC2                 mov     rax, r14
.text:000000000000AFC5                 add     rax, 1
.text:000000000000AFC9                 mov     rbx, rax
.text:000000000000AFCC                 jnb     loc_B058
.text:000000000000AFD2                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000AFD6                 jnz     loc_A6B5
.text:000000000000AFDC                 mov     rbx, r12
.text:000000000000AFDF
.text:000000000000AFDF loc_AFDF:                               ; CODE XREF: vasnprintf+B0B↓j
.text:000000000000AFDF                                         ; vasnprintf+B58↓j ...
.text:000000000000AFDF                 mov     byte ptr [r15+r14], 25h ; '%'
.text:000000000000AFE4
.text:000000000000AFE4 loc_AFE4:                               ; CODE XREF: vasnprintf+C46↓j
.text:000000000000AFE4                                         ; vasnprintf+D76↓j ...
.text:000000000000AFE4                 mov     r8, [r13+8]
.text:000000000000AFE8                 add     r13, 58h ; 'X'
.text:000000000000AFEC                 mov     rcx, [r13+0]
.text:000000000000AFF0                 add     [rbp+var_400], 1
.text:000000000000AFF8                 cmp     rcx, r8
.text:000000000000AFFB                 jnz     loc_A699
.text:000000000000B001
.text:000000000000B001 loc_B001:                               ; CODE XREF: vasnprintf+143↑j
.text:000000000000B001                 mov     r14, rbx
.text:000000000000B004                 jmp     loc_A803
.text:000000000000B004 ; ---------------------------------------------------------------------------
.text:000000000000B009                 align 10h
.text:000000000000B010
.text:000000000000B010 loc_B010:                               ; CODE XREF: vasnprintf+A07↑j
.text:000000000000B010                                         ; vasnprintf+A0F↑j
.text:000000000000B010                 mov     r15, rcx
.text:000000000000B013                 jmp     loc_AA60
.text:000000000000B018 ; ---------------------------------------------------------------------------
.text:000000000000B018
.text:000000000000B018 loc_B018:                               ; CODE XREF: vasnprintf+9A↑j
.text:000000000000B018                                         ; vasnprintf+AE↑j ...
.text:000000000000B018                 call    ___errno_location
.text:000000000000B01D                 mov     [rbp+n], rax
.text:000000000000B024                 jmp     loc_A6E7
.text:000000000000B024 ; ---------------------------------------------------------------------------
.text:000000000000B029                 align 10h
.text:000000000000B030
.text:000000000000B030 loc_B030:                               ; CODE XREF: vasnprintf+2FC↑j
.text:000000000000B030                 mov     edx, edi
.text:000000000000B032                 sub     edx, 12h        ; switch 5 cases
.text:000000000000B035                 cmp     edx, 4
.text:000000000000B038                 ja      def_AAAB        ; jumptable 000000000000AAAB default case, case 0
.text:000000000000B038                                         ; jumptable 000000000000B050 default case
.text:000000000000B03E                 lea     rdi, jpt_B050
.text:000000000000B045                 mov     rax, [rax+10h]
.text:000000000000B049                 movsxd  rdx, ds:(jpt_B050 - 0EC98h)[rdi+rdx*4]
.text:000000000000B04D                 add     rdx, rdi
.text:000000000000B050                 jmp     rdx             ; switch jump
.text:000000000000B050 ; ---------------------------------------------------------------------------
.text:000000000000B052                 align 8
.text:000000000000B058
.text:000000000000B058 loc_B058:                               ; CODE XREF: vasnprintf+A7C↑j
.text:000000000000B058                 cmp     r12, rax
.text:000000000000B05B                 jnb     short loc_AFDF
.text:000000000000B05D                 test    r12, r12
.text:000000000000B060                 jnz     loc_B430
.text:000000000000B066                 cmp     rax, 0Ch
.text:000000000000B06A                 ja      loc_B442
.text:000000000000B070                 mov     r12d, 0Ch
.text:000000000000B076
.text:000000000000B076 loc_B076:                               ; CODE XREF: vasnprintf+EEC↓j
.text:000000000000B076                                         ; vasnprintf+EFF↓j
.text:000000000000B076                 cmp     r15, [rbp+src]
.text:000000000000B07D                 setz    dl
.text:000000000000B080                 test    r15, r15
.text:000000000000B083                 jz      loc_B2F0
.text:000000000000B089                 test    dl, dl
.text:000000000000B08B                 jnz     loc_B2F0
.text:000000000000B091                 mov     rsi, r12        ; size
.text:000000000000B094                 mov     rdi, r15        ; ptr
.text:000000000000B097                 call    _realloc
.text:000000000000B09C                 test    rax, rax
.text:000000000000B09F                 jz      loc_B19B
.text:000000000000B0A5                 mov     r15, rax
.text:000000000000B0A8                 jmp     loc_AFDF
.text:000000000000B0A8 ; ---------------------------------------------------------------------------
.text:000000000000B0AD                 align 10h
.text:000000000000B0B0
.text:000000000000B0B0 loc_B0B0:                               ; CODE XREF: vasnprintf+42E↑j
.text:000000000000B0B0                 mov     dword ptr [rbp+var_3E0], 0
.text:000000000000B0BA                 jmp     loc_A9A7
.text:000000000000B0BA ; ---------------------------------------------------------------------------
.text:000000000000B0BF                 align 20h
.text:000000000000B0C0
.text:000000000000B0C0 loc_B0C0:                               ; CODE XREF: vasnprintf+240↑j
.text:000000000000B0C0                 js      loc_A6B5
.text:000000000000B0C6                 add     r12, r12
.text:000000000000B0C9                 cmp     r12, rax
.text:000000000000B0CC                 jnb     loc_A7A6
.text:000000000000B0D2
.text:000000000000B0D2 loc_B0D2:                               ; CODE XREF: vasnprintf+24A↑j
.text:000000000000B0D2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B0D6                 jz      loc_A6B5
.text:000000000000B0DC                 cmp     r15, [rbp+src]
.text:000000000000B0E3                 mov     r12, rax
.text:000000000000B0E6                 setz    dl
.text:000000000000B0E9                 test    r15, r15
.text:000000000000B0EC                 jnz     loc_A7B9
.text:000000000000B0F2                 nop     word ptr [rax+rax+00h]
.text:000000000000B0F8
.text:000000000000B0F8 loc_B0F8:                               ; CODE XREF: vasnprintf+263↑j
.text:000000000000B0F8                                         ; vasnprintf+26B↑j
.text:000000000000B0F8                 mov     rdi, r12        ; size
.text:000000000000B0FB                 mov     [rbp+var_3E0], r8
.text:000000000000B102                 mov     byte ptr [rbp+var_3D0], dl
.text:000000000000B108                 mov     [rbp+n], rcx
.text:000000000000B10F                 call    _malloc
.text:000000000000B114                 test    rax, rax
.text:000000000000B117                 mov     r9, rax
.text:000000000000B11A                 mov     rcx, [rbp+n]
.text:000000000000B121                 movzx   edx, byte ptr [rbp+var_3D0]
.text:000000000000B128                 mov     r8, [rbp+var_3E0]
.text:000000000000B12F                 jz      loc_A6B5
.text:000000000000B135                 test    rbx, rbx
.text:000000000000B138                 jz      loc_B340
.text:000000000000B13E                 test    dl, dl
.text:000000000000B140                 jz      loc_B340
.text:000000000000B146                 mov     rsi, r15        ; src
.text:000000000000B149                 mov     rdx, rbx        ; n
.text:000000000000B14C                 mov     rdi, rax        ; dest
.text:000000000000B14F                 mov     [rbp+var_3D0], r8
.text:000000000000B156                 mov     [rbp+n], rcx
.text:000000000000B15D                 call    _memcpy
.text:000000000000B162                 mov     rcx, [rbp+n]
.text:000000000000B169                 mov     r15, rax
.text:000000000000B16C                 mov     r8, [rbp+var_3D0]
.text:000000000000B173                 jmp     loc_A7F4
.text:000000000000B173 ; ---------------------------------------------------------------------------
.text:000000000000B178                 align 20h
.text:000000000000B180
.text:000000000000B180 loc_B180:                               ; CODE XREF: vasnprintf+15F↑j
.text:000000000000B180                 mov     r14, r12
.text:000000000000B183                 jmp     loc_A7F4
.text:000000000000B183 ; ---------------------------------------------------------------------------
.text:000000000000B188                 align 10h
.text:000000000000B190
.text:000000000000B190 loc_B190:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000B190                                         ; DATA XREF: .rodata:jpt_B050↓o
.text:000000000000B190                 mov     [rax], r14      ; jumptable 000000000000B050 cases 21,22
.text:000000000000B193                 mov     rbx, r14
.text:000000000000B196                 jmp     loc_AFE4
.text:000000000000B19B ; ---------------------------------------------------------------------------
.text:000000000000B19B
.text:000000000000B19B loc_B19B:                               ; CODE XREF: vasnprintf+29B↑j
.text:000000000000B19B                                         ; vasnprintf+B4F↑j ...
.text:000000000000B19B                 call    ___errno_location
.text:000000000000B1A0                 mov     [rbp+n], rax
.text:000000000000B1A7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B1B0
.text:000000000000B1B0 loc_B1B0:                               ; CODE XREF: vasnprintf+17D↑j
.text:000000000000B1B0                 mov     rdi, r15        ; ptr
.text:000000000000B1B3                 call    _free
.text:000000000000B1B8                 jmp     loc_A6D3
.text:000000000000B1B8 ; ---------------------------------------------------------------------------
.text:000000000000B1BD                 align 20h
.text:000000000000B1C0
.text:000000000000B1C0 loc_B1C0:                               ; CODE XREF: vasnprintf+872↑j
.text:000000000000B1C0                 mov     r9, [rbp+var_3F0]
.text:000000000000B1C7                 mov     r8, [rbp+var_3D8]
.text:000000000000B1CE                 mov     rsi, r10
.text:000000000000B1D1                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B1D8                 mov     edx, 1
.text:000000000000B1DD                 mov     eax, 1
.text:000000000000B1E2                 mov     [rbp+var_430], r10
.text:000000000000B1E9                 call    ___snprintf_chk
.text:000000000000B1EE                 mov     r10, [rbp+var_430]
.text:000000000000B1F5                 jmp     loc_AB16
.text:000000000000B1F5 ; ---------------------------------------------------------------------------
.text:000000000000B1FA                 align 20h
.text:000000000000B200
.text:000000000000B200 loc_B200:                               ; CODE XREF: vasnprintf+7E8↑j
.text:000000000000B200                 sub     rsp, 10h
.text:000000000000B204                 mov     r9, [rbp+var_3F0]
.text:000000000000B20B                 fstp    [rsp+440h+var_440]
.text:000000000000B20E                 jmp     loc_AAE9
.text:000000000000B20E ; ---------------------------------------------------------------------------
.text:000000000000B213                 align 8
.text:000000000000B218
.text:000000000000B218 loc_B218:                               ; CODE XREF: vasnprintf+4A3↑j
.text:000000000000B218                 js      loc_A6B5
.text:000000000000B21E                 add     r12, r12
.text:000000000000B221                 cmp     r12, rax
.text:000000000000B224                 jnb     loc_AA09
.text:000000000000B22A                 nop     word ptr [rax+rax+00h]
.text:000000000000B230
.text:000000000000B230 loc_B230:                               ; CODE XREF: vasnprintf+4AD↑j
.text:000000000000B230                                         ; vasnprintf+1114↓j
.text:000000000000B230                 test    rdx, rdx
.text:000000000000B233                 jnz     loc_A6B5
.text:000000000000B239                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B23D                 jz      loc_A6B5
.text:000000000000B243                 cmp     r15, [rbp+src]
.text:000000000000B24A                 mov     r12, rax
.text:000000000000B24D                 setz    dl
.text:000000000000B250                 test    r15, r15
.text:000000000000B253                 jnz     loc_AA1C
.text:000000000000B259                 nop     dword ptr [rax+00000000h]
.text:000000000000B260
.text:000000000000B260 loc_B260:                               ; CODE XREF: vasnprintf+4C6↑j
.text:000000000000B260                                         ; vasnprintf+4CE↑j
.text:000000000000B260                 mov     rdi, r12        ; size
.text:000000000000B263                 mov     byte ptr [rbp+n], dl
.text:000000000000B269                 call    _malloc
.text:000000000000B26E                 test    rax, rax
.text:000000000000B271                 mov     rcx, rax
.text:000000000000B274                 movzx   edx, byte ptr [rbp+n]
.text:000000000000B27B                 jz      loc_A6B5
.text:000000000000B281                 test    r14, r14
.text:000000000000B284                 jz      loc_B420
.text:000000000000B28A                 test    dl, dl
.text:000000000000B28C                 jz      loc_B420
.text:000000000000B292                 mov     rsi, r15        ; src
.text:000000000000B295                 mov     rdx, r14        ; n
.text:000000000000B298                 mov     rdi, rax        ; dest
.text:000000000000B29B                 call    _memcpy
.text:000000000000B2A0                 mov     r15, rax
.text:000000000000B2A3                 jmp     loc_AA3B
.text:000000000000B2A3 ; ---------------------------------------------------------------------------
.text:000000000000B2A8                 align 10h
.text:000000000000B2B0
.text:000000000000B2B0 loc_B2B0:                               ; CODE XREF: vasnprintf+402↑j
.text:000000000000B2B0                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:000000000000B2B3                 add     rbx, 1
.text:000000000000B2B7                 jmp     loc_A96B
.text:000000000000B2B7 ; ---------------------------------------------------------------------------
.text:000000000000B2BC                 align 20h
.text:000000000000B2C0
.text:000000000000B2C0 loc_B2C0:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000B2C0                                         ; DATA XREF: .rodata:jpt_B050↓o
.text:000000000000B2C0                 mov     [rax], r14b     ; jumptable 000000000000B050 case 18
.text:000000000000B2C3                 mov     rbx, r14
.text:000000000000B2C6                 jmp     loc_AFE4
.text:000000000000B2C6 ; ---------------------------------------------------------------------------
.text:000000000000B2CB                 align 10h
.text:000000000000B2D0
.text:000000000000B2D0 loc_B2D0:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000B2D0                                         ; DATA XREF: .rodata:jpt_B050↓o
.text:000000000000B2D0                 mov     [rax], r14d     ; jumptable 000000000000B050 case 20
.text:000000000000B2D3                 mov     rbx, r14
.text:000000000000B2D6                 jmp     loc_AFE4
.text:000000000000B2D6 ; ---------------------------------------------------------------------------
.text:000000000000B2DB                 align 20h
.text:000000000000B2E0
.text:000000000000B2E0 loc_B2E0:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000B2E0                                         ; DATA XREF: .rodata:jpt_B050↓o
.text:000000000000B2E0                 mov     [rax], r14w     ; jumptable 000000000000B050 case 19
.text:000000000000B2E4                 mov     rbx, r14
.text:000000000000B2E7                 jmp     loc_AFE4
.text:000000000000B2E7 ; ---------------------------------------------------------------------------
.text:000000000000B2EC                 align 10h
.text:000000000000B2F0
.text:000000000000B2F0 loc_B2F0:                               ; CODE XREF: vasnprintf+B33↑j
.text:000000000000B2F0                                         ; vasnprintf+B3B↑j
.text:000000000000B2F0                 mov     rdi, r12        ; size
.text:000000000000B2F3                 mov     byte ptr [rbp+n], dl
.text:000000000000B2F9                 call    _malloc
.text:000000000000B2FE                 test    rax, rax
.text:000000000000B301                 mov     rcx, rax
.text:000000000000B304                 movzx   edx, byte ptr [rbp+n]
.text:000000000000B30B                 jz      loc_A6B5
.text:000000000000B311                 test    r14, r14
.text:000000000000B314                 jz      loc_B454
.text:000000000000B31A                 test    dl, dl
.text:000000000000B31C                 jz      loc_B454
.text:000000000000B322                 mov     rsi, r15        ; src
.text:000000000000B325                 mov     rdx, r14        ; n
.text:000000000000B328                 mov     rdi, rax        ; dest
.text:000000000000B32B                 call    _memcpy
.text:000000000000B330                 mov     r15, rax
.text:000000000000B333                 jmp     loc_AFDF
.text:000000000000B333 ; ---------------------------------------------------------------------------
.text:000000000000B338                 align 20h
.text:000000000000B340
.text:000000000000B340 loc_B340:                               ; CODE XREF: vasnprintf+BE8↑j
.text:000000000000B340                                         ; vasnprintf+BF0↑j
.text:000000000000B340                 mov     r15, r9
.text:000000000000B343                 jmp     loc_A7F4
.text:000000000000B343 ; ---------------------------------------------------------------------------
.text:000000000000B348                 align 10h
.text:000000000000B350
.text:000000000000B350 loc_B350:                               ; CODE XREF: vasnprintf+869↑j
.text:000000000000B350                 sub     rsp, 8
.text:000000000000B354                 push    [rbp+var_3F0]
.text:000000000000B35A                 jmp     loc_ADD5
.text:000000000000B35A ; ---------------------------------------------------------------------------
.text:000000000000B35F                 align 20h
.text:000000000000B360
.text:000000000000B360 loc_B360:                               ; CODE XREF: vasnprintf+7DF↑j
.text:000000000000B360                 sub     rsp, 8
.text:000000000000B364                 push    [rbp+var_3F0]
.text:000000000000B36A                 sub     rsp, 10h
.text:000000000000B36E                 fstp    [rsp+450h+var_450]
.text:000000000000B371                 jmp     loc_AE9B
.text:000000000000B371 ; ---------------------------------------------------------------------------
.text:000000000000B376                 align 20h
.text:000000000000B380
.text:000000000000B380 loc_B380:                               ; CODE XREF: vasnprintf+5FC↑j
.text:000000000000B380                 mov     rax, [rbp+n]
.text:000000000000B387                 mov     edi, [rbp-424h]
.text:000000000000B38D                 movsxd  rbx, ecx
.text:000000000000B390                 add     rbx, r14
.text:000000000000B393                 mov     [rax], edi
.text:000000000000B395                 jmp     loc_AFE4
.text:000000000000B395 ; ---------------------------------------------------------------------------
.text:000000000000B39A                 align 20h
.text:000000000000B3A0
.text:000000000000B3A0 loc_B3A0:                               ; CODE XREF: vasnprintf+609↑j
.text:000000000000B3A0                 cmp     r15, [rbp+src]
.text:000000000000B3A7                 jz      short loc_B3B2
.text:000000000000B3A9                 test    r15, r15
.text:000000000000B3AC                 jnz     loc_B469
.text:000000000000B3B2
.text:000000000000B3B2 loc_B3B2:                               ; CODE XREF: vasnprintf+E57↑j
.text:000000000000B3B2                                         ; vasnprintf+F21↓j
.text:000000000000B3B2                 mov     rax, [rbp+ptr]
.text:000000000000B3B9                 test    rax, rax
.text:000000000000B3BC                 jz      short loc_B3C6
.text:000000000000B3BE                 mov     rdi, rax        ; ptr
.text:000000000000B3C1                 call    _free
.text:000000000000B3C6
.text:000000000000B3C6 loc_B3C6:                               ; CODE XREF: vasnprintf+E6C↑j
.text:000000000000B3C6                 mov     rax, [rbp+var_408]
.text:000000000000B3CD                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000B3D4                 add     rax, 20h ; ' '
.text:000000000000B3D8                 cmp     rdi, rax
.text:000000000000B3DB                 jz      short loc_B3E2
.text:000000000000B3DD                 call    _free
.text:000000000000B3E2
.text:000000000000B3E2 loc_B3E2:                               ; CODE XREF: vasnprintf+E8B↑j
.text:000000000000B3E2                 mov     rax, [rbp+var_410]
.text:000000000000B3E9                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000B3F0                 add     rax, 10h
.text:000000000000B3F4                 cmp     rdi, rax
.text:000000000000B3F7                 jz      short loc_B3FE
.text:000000000000B3F9                 call    _free
.text:000000000000B3FE
.text:000000000000B3FE loc_B3FE:                               ; CODE XREF: vasnprintf+EA7↑j
.text:000000000000B3FE                 mov     rax, [rbp+n]
.text:000000000000B405                 xor     r15d, r15d
.text:000000000000B408                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000B40E                 jmp     loc_A72F
.text:000000000000B40E ; ---------------------------------------------------------------------------
.text:000000000000B413                 align 8
.text:000000000000B418
.text:000000000000B418 loc_B418:                               ; CODE XREF: vasnprintf+60↑j
.text:000000000000B418                 xor     r15d, r15d
.text:000000000000B41B                 jmp     loc_A72F
.text:000000000000B420 ; ---------------------------------------------------------------------------
.text:000000000000B420
.text:000000000000B420 loc_B420:                               ; CODE XREF: vasnprintf+D34↑j
.text:000000000000B420                                         ; vasnprintf+D3C↑j
.text:000000000000B420                 mov     r15, rcx
.text:000000000000B423                 jmp     loc_AA3B
.text:000000000000B423 ; ---------------------------------------------------------------------------
.text:000000000000B428                 align 10h
.text:000000000000B430
.text:000000000000B430 loc_B430:                               ; CODE XREF: vasnprintf+B10↑j
.text:000000000000B430                 js      loc_A6B5
.text:000000000000B436                 add     r12, r12
.text:000000000000B439                 cmp     r12, rax
.text:000000000000B43C                 jnb     loc_B076
.text:000000000000B442
.text:000000000000B442 loc_B442:                               ; CODE XREF: vasnprintf+B1A↑j
.text:000000000000B442                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B446                 jz      loc_A6B5
.text:000000000000B44C                 mov     r12, rax
.text:000000000000B44F                 jmp     loc_B076
.text:000000000000B454 ; ---------------------------------------------------------------------------
.text:000000000000B454
.text:000000000000B454 loc_B454:                               ; CODE XREF: vasnprintf+DC4↑j
.text:000000000000B454                                         ; vasnprintf+DCC↑j
.text:000000000000B454                 mov     r15, rcx
.text:000000000000B457                 jmp     loc_AFDF
.text:000000000000B45C ; ---------------------------------------------------------------------------
.text:000000000000B45C
.text:000000000000B45C loc_B45C:                               ; CODE XREF: vasnprintf+75C↑j
.text:000000000000B45C                 mov     rdi, r15        ; ptr
.text:000000000000B45F                 call    _free
.text:000000000000B464                 jmp     loc_ACB2
.text:000000000000B469 ; ---------------------------------------------------------------------------
.text:000000000000B469
.text:000000000000B469 loc_B469:                               ; CODE XREF: vasnprintf+E5C↑j
.text:000000000000B469                 mov     rdi, r15        ; ptr
.text:000000000000B46C                 call    _free
.text:000000000000B471                 jmp     loc_B3B2
.text:000000000000B476 ; ---------------------------------------------------------------------------
.text:000000000000B476
.text:000000000000B476 def_AAAB:                               ; CODE XREF: vasnprintf+2DD↑j
.text:000000000000B476                                         ; vasnprintf+43E↑j ...
.text:000000000000B476                 call    _abort          ; jumptable 000000000000AAAB default case, case 0
.text:000000000000B476                                         ; jumptable 000000000000B050 default case
.text:000000000000B476 ; ---------------------------------------------------------------------------
.text:000000000000B47B                 align 20h
.text:000000000000B480
.text:000000000000B480 loc_B480:                               ; CODE XREF: vasnprintf+73↑j
.text:000000000000B480                 mov     rax, [rbp+var_408]
.text:000000000000B487                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000B48E                 add     rax, 20h ; ' '
.text:000000000000B492                 cmp     rdi, rax
.text:000000000000B495                 jz      short loc_B49C
.text:000000000000B497                 call    _free
.text:000000000000B49C
.text:000000000000B49C loc_B49C:                               ; CODE XREF: vasnprintf+F45↑j
.text:000000000000B49C                 mov     rax, [rbp+var_410]
.text:000000000000B4A3                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000B4AA                 add     rax, 10h
.text:000000000000B4AE                 cmp     rdi, rax
.text:000000000000B4B1                 jz      short loc_B4B8
.text:000000000000B4B3                 call    _free
.text:000000000000B4B8
.text:000000000000B4B8 loc_B4B8:                               ; CODE XREF: vasnprintf+F61↑j
.text:000000000000B4B8                 call    ___errno_location
.text:000000000000B4BD                 xor     r15d, r15d
.text:000000000000B4C0                 mov     dword ptr [rax], 16h
.text:000000000000B4C6                 jmp     loc_A72F
.text:000000000000B4CB ; ---------------------------------------------------------------------------
.text:000000000000B4CB
.text:000000000000B4CB loc_B4CB:                               ; CODE XREF: vasnprintf+2C1↑j
.text:000000000000B4CB                 mov     rbx, r14
.text:000000000000B4CE                 xor     eax, eax
.text:000000000000B4D0                 add     rbx, 1
.text:000000000000B4D4                 jb      loc_B5E0
.text:000000000000B4DA                 cmp     r12, rbx
.text:000000000000B4DD                 jnb     short loc_B52C
.text:000000000000B4DF                 test    r12, r12
.text:000000000000B4E2                 jnz     loc_B619
.text:000000000000B4E8                 cmp     rbx, 0Ch
.text:000000000000B4EC                 ja      loc_B5FE
.text:000000000000B4F2                 mov     r12d, 0Ch
.text:000000000000B4F8
.text:000000000000B4F8 loc_B4F8:                               ; CODE XREF: vasnprintf+10C4↓j
.text:000000000000B4F8                                         ; vasnprintf+10D5↓j
.text:000000000000B4F8                 cmp     r15, [rbp+src]
.text:000000000000B4FF                 setz    r13b
.text:000000000000B503                 test    r15, r15
.text:000000000000B506                 jz      loc_B5AC
.text:000000000000B50C                 test    r13b, r13b
.text:000000000000B50F                 jnz     loc_B5AC
.text:000000000000B515                 mov     rsi, r12        ; size
.text:000000000000B518                 mov     rdi, r15        ; ptr
.text:000000000000B51B                 call    _realloc
.text:000000000000B520                 test    rax, rax
.text:000000000000B523                 jz      loc_B19B
.text:000000000000B529                 mov     r15, rax
.text:000000000000B52C
.text:000000000000B52C loc_B52C:                               ; CODE XREF: vasnprintf+F8D↑j
.text:000000000000B52C                                         ; vasnprintf+108B↓j ...
.text:000000000000B52C                 cmp     r15, [rbp+src]
.text:000000000000B533                 mov     byte ptr [r15+r14], 0
.text:000000000000B538                 jz      short loc_B551
.text:000000000000B53A                 cmp     r12, rbx
.text:000000000000B53D                 jbe     short loc_B551
.text:000000000000B53F                 mov     rdi, r15        ; ptr
.text:000000000000B542                 mov     rsi, rbx        ; size
.text:000000000000B545                 call    _realloc
.text:000000000000B54A                 test    rax, rax
.text:000000000000B54D                 cmovnz  r15, rax
.text:000000000000B551
.text:000000000000B551 loc_B551:                               ; CODE XREF: vasnprintf+FE8↑j
.text:000000000000B551                                         ; vasnprintf+FED↑j
.text:000000000000B551                 mov     rax, [rbp+ptr]
.text:000000000000B558                 test    rax, rax
.text:000000000000B55B                 jz      short loc_B565
.text:000000000000B55D                 mov     rdi, rax        ; ptr
.text:000000000000B560                 call    _free
.text:000000000000B565
.text:000000000000B565 loc_B565:                               ; CODE XREF: vasnprintf+100B↑j
.text:000000000000B565                 mov     rax, [rbp+var_408]
.text:000000000000B56C                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000B573                 add     rax, 20h ; ' '
.text:000000000000B577                 cmp     rdi, rax
.text:000000000000B57A                 jz      short loc_B581
.text:000000000000B57C                 call    _free
.text:000000000000B581
.text:000000000000B581 loc_B581:                               ; CODE XREF: vasnprintf+102A↑j
.text:000000000000B581                 mov     rax, [rbp+var_410]
.text:000000000000B588                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000B58F                 add     rax, 10h
.text:000000000000B593                 cmp     rdi, rax
.text:000000000000B596                 jz      short loc_B59D
.text:000000000000B598                 call    _free
.text:000000000000B59D
.text:000000000000B59D loc_B59D:                               ; CODE XREF: vasnprintf+1046↑j
.text:000000000000B59D                 mov     rax, [rbp+var_418]
.text:000000000000B5A4                 mov     [rax], r14
.text:000000000000B5A7                 jmp     loc_A72F
.text:000000000000B5AC ; ---------------------------------------------------------------------------
.text:000000000000B5AC
.text:000000000000B5AC loc_B5AC:                               ; CODE XREF: vasnprintf+FB6↑j
.text:000000000000B5AC                                         ; vasnprintf+FBF↑j
.text:000000000000B5AC                 mov     rdi, r12        ; size
.text:000000000000B5AF                 call    _malloc
.text:000000000000B5B4                 test    rax, rax
.text:000000000000B5B7                 mov     rcx, rax
.text:000000000000B5BA                 jz      loc_A6B5
.text:000000000000B5C0                 test    r14, r14
.text:000000000000B5C3                 jz      short loc_B630
.text:000000000000B5C5                 test    r13b, r13b
.text:000000000000B5C8                 jz      short loc_B630
.text:000000000000B5CA                 mov     rsi, r15        ; src
.text:000000000000B5CD                 mov     rdx, r14        ; n
.text:000000000000B5D0                 mov     rdi, rax        ; dest
.text:000000000000B5D3                 call    _memcpy
.text:000000000000B5D8                 mov     r15, rax
.text:000000000000B5DB                 jmp     loc_B52C
.text:000000000000B5E0 ; ---------------------------------------------------------------------------
.text:000000000000B5E0
.text:000000000000B5E0 loc_B5E0:                               ; CODE XREF: vasnprintf+F84↑j
.text:000000000000B5E0                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000B5E4                 mov     eax, 1
.text:000000000000B5E9                 jz      loc_B52C
.text:000000000000B5EF                 test    r12, r12
.text:000000000000B5F2                 jz      loc_A6B5
.text:000000000000B5F8                 js      loc_A6B5
.text:000000000000B5FE
.text:000000000000B5FE loc_B5FE:                               ; CODE XREF: vasnprintf+F9C↑j
.text:000000000000B5FE                                         ; vasnprintf+10DB↓j
.text:000000000000B5FE                 test    rax, rax
.text:000000000000B601                 jnz     loc_A6B5
.text:000000000000B607                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B60B                 jz      loc_A6B5
.text:000000000000B611                 mov     r12, rbx
.text:000000000000B614                 jmp     loc_B4F8
.text:000000000000B619 ; ---------------------------------------------------------------------------
.text:000000000000B619
.text:000000000000B619 loc_B619:                               ; CODE XREF: vasnprintf+F92↑j
.text:000000000000B619                 js      loc_A6B5
.text:000000000000B61F                 add     r12, r12
.text:000000000000B622                 cmp     r12, rbx
.text:000000000000B625                 jnb     loc_B4F8
.text:000000000000B62B                 jmp     short loc_B5FE
.text:000000000000B62B ; ---------------------------------------------------------------------------
.text:000000000000B62D                 align 10h
.text:000000000000B630
.text:000000000000B630 loc_B630:                               ; CODE XREF: vasnprintf+1073↑j
.text:000000000000B630                                         ; vasnprintf+1078↑j
.text:000000000000B630                 mov     r15, rcx
.text:000000000000B633                 jmp     loc_B52C
.text:000000000000B638 ; ---------------------------------------------------------------------------
.text:000000000000B638
.text:000000000000B638 loc_B638:                               ; CODE XREF: vasnprintf+627↑j
.text:000000000000B638                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000B63C                 jz      loc_AA60
.text:000000000000B642                 jmp     loc_A6C1
.text:000000000000B647 ; ---------------------------------------------------------------------------
.text:000000000000B647
.text:000000000000B647 loc_B647:                               ; CODE XREF: vasnprintf+1EF↑j
.text:000000000000B647                 call    ___stack_chk_fail
.text:000000000000B64C ; ---------------------------------------------------------------------------
.text:000000000000B64C
.text:000000000000B64C loc_B64C:                               ; CODE XREF: vasnprintf+495↑j
.text:000000000000B64C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000B650                 mov     edx, 1
.text:000000000000B655                 jz      loc_AA3B
.text:000000000000B65B                 test    r12, r12
.text:000000000000B65E                 jz      loc_A6B5
.text:000000000000B664                 jns     loc_B230
.text:000000000000B66A                 jmp     loc_A6B5
.text:000000000000B66A ; } // starts at A550
.text:000000000000B66A vasnprintf      endp
.text:000000000000B66A
.text:000000000000B66A ; ---------------------------------------------------------------------------
.text:000000000000B66F                 align 10h
.text:000000000000B670
.text:000000000000B670 ; =============== S U B R O U T I N E =======================================
.text:000000000000B670
.text:000000000000B670
.text:000000000000B670                 public printf_fetchargs
.text:000000000000B670 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:000000000000B670 ; __unwind {
.text:000000000000B670                 cmp     qword ptr [rsi], 0
.text:000000000000B674                 mov     rax, [rsi+8]
.text:000000000000B678                 jz      short loc_B6DD
.text:000000000000B67A                 lea     r8, jpt_B6A6
.text:000000000000B681                 lea     r10, wide_null_string_2696
.text:000000000000B688                 lea     r9, aNull       ; "(NULL)"
.text:000000000000B68F                 xor     ecx, ecx
.text:000000000000B691                 nop     dword ptr [rax+00000000h]
.text:000000000000B698
.text:000000000000B698 loc_B698:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:000000000000B698                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:000000000000B69B                 ja      short def_B6A6  ; jumptable 000000000000B6A6 default case, case 0
.text:000000000000B69D                 mov     edx, [rax]
.text:000000000000B69F                 movsxd  rdx, ds:(jpt_B6A6 - 0ECC0h)[r8+rdx*4]
.text:000000000000B6A3                 add     rdx, r8
.text:000000000000B6A6                 jmp     rdx             ; switch jump
.text:000000000000B6A6 ; ---------------------------------------------------------------------------
.text:000000000000B6A8                 align 10h
.text:000000000000B6B0
.text:000000000000B6B0 loc_B6B0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000B6B0                                         ; DATA XREF: .rodata:jpt_B6A6↓o
.text:000000000000B6B0                 mov     rdx, [rdi+8]    ; jumptable 000000000000B6A6 case 12
.text:000000000000B6B4                 add     rdx, 0Fh
.text:000000000000B6B8                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000000B6BC                 lea     r11, [rdx+10h]
.text:000000000000B6C0                 mov     [rdi+8], r11
.text:000000000000B6C4                 fld     tbyte ptr [rdx]
.text:000000000000B6C6                 fstp    tbyte ptr [rax+10h]
.text:000000000000B6C9                 nop     dword ptr [rax+00000000h]
.text:000000000000B6D0
.text:000000000000B6D0 loc_B6D0:                               ; CODE XREF: printf_fetchargs+98↓j
.text:000000000000B6D0                                         ; printf_fetchargs+BA↓j ...
.text:000000000000B6D0                 add     rcx, 1
.text:000000000000B6D4                 add     rax, 20h ; ' '
.text:000000000000B6D8                 cmp     [rsi], rcx
.text:000000000000B6DB                 ja      short loc_B698
.text:000000000000B6DD
.text:000000000000B6DD loc_B6DD:                               ; CODE XREF: printf_fetchargs+8↑j
.text:000000000000B6DD                 xor     eax, eax
.text:000000000000B6DF                 retn
.text:000000000000B6E0 ; ---------------------------------------------------------------------------
.text:000000000000B6E0
.text:000000000000B6E0 def_B6A6:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:000000000000B6E0                                         ; printf_fetchargs+36↑j
.text:000000000000B6E0                                         ; DATA XREF: ...
.text:000000000000B6E0                 mov     eax, 0FFFFFFFFh ; jumptable 000000000000B6A6 default case, case 0
.text:000000000000B6E5                 retn
.text:000000000000B6E6 ; ---------------------------------------------------------------------------
.text:000000000000B6E6
.text:000000000000B6E6 loc_B6E6:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000B6E6                                         ; DATA XREF: .rodata:jpt_B6A6↓o
.text:000000000000B6E6                 mov     r11d, [rdi]     ; jumptable 000000000000B6A6 cases 7-10,17-22
.text:000000000000B6E9                 cmp     r11d, 2Fh ; '/'
.text:000000000000B6ED                 ja      loc_B82A
.text:000000000000B6F3                 mov     edx, r11d
.text:000000000000B6F6                 add     rdx, [rdi+10h]
.text:000000000000B6FA                 add     r11d, 8
.text:000000000000B6FE                 mov     [rdi], r11d
.text:000000000000B701
.text:000000000000B701 loc_B701:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:000000000000B701                 mov     rdx, [rdx]
.text:000000000000B704                 mov     [rax+10h], rdx
.text:000000000000B708                 jmp     short loc_B6D0
.text:000000000000B70A ; ---------------------------------------------------------------------------
.text:000000000000B70A
.text:000000000000B70A loc_B70A:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000B70A                                         ; DATA XREF: .rodata:jpt_B6A6↓o
.text:000000000000B70A                 mov     r11d, [rdi]     ; jumptable 000000000000B6A6 cases 5,6,13,14
.text:000000000000B70D                 cmp     r11d, 2Fh ; '/'
.text:000000000000B711                 ja      loc_B84C
.text:000000000000B717                 mov     edx, r11d
.text:000000000000B71A                 add     rdx, [rdi+10h]
.text:000000000000B71E                 add     r11d, 8
.text:000000000000B722                 mov     [rdi], r11d
.text:000000000000B725
.text:000000000000B725 loc_B725:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:000000000000B725                 mov     edx, [rdx]
.text:000000000000B727                 mov     [rax+10h], edx
.text:000000000000B72A                 jmp     short loc_B6D0
.text:000000000000B72C ; ---------------------------------------------------------------------------
.text:000000000000B72C
.text:000000000000B72C loc_B72C:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000B72C                                         ; DATA XREF: .rodata:jpt_B6A6↓o
.text:000000000000B72C                 mov     r11d, [rdi]     ; jumptable 000000000000B6A6 cases 1,2
.text:000000000000B72F                 cmp     r11d, 2Fh ; '/'
.text:000000000000B733                 ja      loc_B83B
.text:000000000000B739                 mov     edx, r11d
.text:000000000000B73C                 add     rdx, [rdi+10h]
.text:000000000000B740                 add     r11d, 8
.text:000000000000B744                 mov     [rdi], r11d
.text:000000000000B747
.text:000000000000B747 loc_B747:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:000000000000B747                 mov     edx, [rdx]
.text:000000000000B749                 mov     [rax+10h], dl
.text:000000000000B74C                 jmp     short loc_B6D0
.text:000000000000B74E ; ---------------------------------------------------------------------------
.text:000000000000B74E
.text:000000000000B74E loc_B74E:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000B74E                                         ; DATA XREF: .rodata:jpt_B6A6↓o
.text:000000000000B74E                 mov     r11d, [rdi]     ; jumptable 000000000000B6A6 cases 3,4
.text:000000000000B751                 cmp     r11d, 2Fh ; '/'
.text:000000000000B755                 ja      loc_B7FA
.text:000000000000B75B                 mov     edx, r11d
.text:000000000000B75E                 add     rdx, [rdi+10h]
.text:000000000000B762                 add     r11d, 8
.text:000000000000B766                 mov     [rdi], r11d
.text:000000000000B769
.text:000000000000B769 loc_B769:                               ; CODE XREF: printf_fetchargs+196↓j
.text:000000000000B769                 mov     edx, [rdx]
.text:000000000000B76B                 mov     [rax+10h], dx
.text:000000000000B76F                 jmp     loc_B6D0
.text:000000000000B774 ; ---------------------------------------------------------------------------
.text:000000000000B774
.text:000000000000B774 loc_B774:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000B774                                         ; DATA XREF: .rodata:jpt_B6A6↓o
.text:000000000000B774                 mov     r11d, [rdi]     ; jumptable 000000000000B6A6 case 15
.text:000000000000B777                 cmp     r11d, 2Fh ; '/'
.text:000000000000B77B                 ja      loc_B80B
.text:000000000000B781                 mov     edx, r11d
.text:000000000000B784                 add     rdx, [rdi+10h]
.text:000000000000B788                 add     r11d, 8
.text:000000000000B78C                 mov     [rdi], r11d
.text:000000000000B78F
.text:000000000000B78F loc_B78F:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:000000000000B78F                 mov     rdx, [rdx]
.text:000000000000B792                 test    rdx, rdx
.text:000000000000B795                 cmovz   rdx, r9
.text:000000000000B799                 mov     [rax+10h], rdx
.text:000000000000B79D                 jmp     loc_B6D0
.text:000000000000B7A2 ; ---------------------------------------------------------------------------
.text:000000000000B7A2
.text:000000000000B7A2 loc_B7A2:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000B7A2                                         ; DATA XREF: .rodata:jpt_B6A6↓o
.text:000000000000B7A2                 mov     r11d, [rdi+4]   ; jumptable 000000000000B6A6 case 11
.text:000000000000B7A6                 cmp     r11d, 0AFh
.text:000000000000B7AD                 ja      loc_B85D
.text:000000000000B7B3                 mov     edx, r11d
.text:000000000000B7B6                 add     rdx, [rdi+10h]
.text:000000000000B7BA                 add     r11d, 10h
.text:000000000000B7BE                 mov     [rdi+4], r11d
.text:000000000000B7C2
.text:000000000000B7C2 loc_B7C2:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:000000000000B7C2                 movsd   xmm0, qword ptr [rdx]
.text:000000000000B7C6                 movsd   qword ptr [rax+10h], xmm0
.text:000000000000B7CB                 jmp     loc_B6D0
.text:000000000000B7D0 ; ---------------------------------------------------------------------------
.text:000000000000B7D0
.text:000000000000B7D0 loc_B7D0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000B7D0                                         ; DATA XREF: .rodata:jpt_B6A6↓o
.text:000000000000B7D0                 mov     r11d, [rdi]     ; jumptable 000000000000B6A6 case 16
.text:000000000000B7D3                 cmp     r11d, 2Fh ; '/'
.text:000000000000B7D7                 ja      short loc_B81C
.text:000000000000B7D9                 mov     edx, r11d
.text:000000000000B7DC                 add     rdx, [rdi+10h]
.text:000000000000B7E0                 add     r11d, 8
.text:000000000000B7E4                 mov     [rdi], r11d
.text:000000000000B7E7
.text:000000000000B7E7 loc_B7E7:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:000000000000B7E7                 mov     rdx, [rdx]
.text:000000000000B7EA                 test    rdx, rdx
.text:000000000000B7ED                 cmovz   rdx, r10
.text:000000000000B7F1                 mov     [rax+10h], rdx
.text:000000000000B7F5                 jmp     loc_B6D0
.text:000000000000B7FA ; ---------------------------------------------------------------------------
.text:000000000000B7FA
.text:000000000000B7FA loc_B7FA:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:000000000000B7FA                 mov     rdx, [rdi+8]
.text:000000000000B7FE                 lea     r11, [rdx+8]
.text:000000000000B802                 mov     [rdi+8], r11
.text:000000000000B806                 jmp     loc_B769
.text:000000000000B80B ; ---------------------------------------------------------------------------
.text:000000000000B80B
.text:000000000000B80B loc_B80B:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:000000000000B80B                 mov     rdx, [rdi+8]
.text:000000000000B80F                 lea     r11, [rdx+8]
.text:000000000000B813                 mov     [rdi+8], r11
.text:000000000000B817                 jmp     loc_B78F
.text:000000000000B81C ; ---------------------------------------------------------------------------
.text:000000000000B81C
.text:000000000000B81C loc_B81C:                               ; CODE XREF: printf_fetchargs+167↑j
.text:000000000000B81C                 mov     rdx, [rdi+8]
.text:000000000000B820                 lea     r11, [rdx+8]
.text:000000000000B824                 mov     [rdi+8], r11
.text:000000000000B828                 jmp     short loc_B7E7
.text:000000000000B82A ; ---------------------------------------------------------------------------
.text:000000000000B82A
.text:000000000000B82A loc_B82A:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:000000000000B82A                 mov     rdx, [rdi+8]
.text:000000000000B82E                 lea     r11, [rdx+8]
.text:000000000000B832                 mov     [rdi+8], r11
.text:000000000000B836                 jmp     loc_B701
.text:000000000000B83B ; ---------------------------------------------------------------------------
.text:000000000000B83B
.text:000000000000B83B loc_B83B:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:000000000000B83B                 mov     rdx, [rdi+8]
.text:000000000000B83F                 lea     r11, [rdx+8]
.text:000000000000B843                 mov     [rdi+8], r11
.text:000000000000B847                 jmp     loc_B747
.text:000000000000B84C ; ---------------------------------------------------------------------------
.text:000000000000B84C
.text:000000000000B84C loc_B84C:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:000000000000B84C                 mov     rdx, [rdi+8]
.text:000000000000B850                 lea     r11, [rdx+8]
.text:000000000000B854                 mov     [rdi+8], r11
.text:000000000000B858                 jmp     loc_B725
.text:000000000000B85D ; ---------------------------------------------------------------------------
.text:000000000000B85D
.text:000000000000B85D loc_B85D:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:000000000000B85D                 mov     rdx, [rdi+8]
.text:000000000000B861                 lea     r11, [rdx+8]
.text:000000000000B865                 mov     [rdi+8], r11
.text:000000000000B869                 jmp     loc_B7C2
.text:000000000000B869 ; } // starts at B670
.text:000000000000B869 printf_fetchargs endp
.text:000000000000B869
.text:000000000000B869 ; ---------------------------------------------------------------------------
.text:000000000000B86E                 align 10h
.text:000000000000B870 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:000000000000B870 ; Format      : ELF64 for x86-64 (Relocatable)
.text:000000000000B870 ;
.text:000000000000B870 ; Source File : 'printf-parse.c'
.text:000000000000B870
.text:000000000000B870 ; =============== S U B R O U T I N E =======================================
.text:000000000000B870
.text:000000000000B870 ; Attributes: info_from_lumina
.text:000000000000B870
.text:000000000000B870 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:000000000000B870                 public printf_parse
.text:000000000000B870 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:000000000000B870
.text:000000000000B870 src             = qword ptr -80h
.text:000000000000B870 var_78          = qword ptr -78h
.text:000000000000B870 var_70          = qword ptr -70h
.text:000000000000B870 var_68          = qword ptr -68h
.text:000000000000B870 var_60          = qword ptr -60h
.text:000000000000B870 var_58          = qword ptr -58h
.text:000000000000B870 var_50          = qword ptr -50h
.text:000000000000B870 var_48          = qword ptr -48h
.text:000000000000B870 var_40          = qword ptr -40h
.text:000000000000B870
.text:000000000000B870 ; __unwind {
.text:000000000000B870                 push    r15
.text:000000000000B872                 push    r14
.text:000000000000B874                 lea     rcx, [rsi+20h]
.text:000000000000B878                 push    r13
.text:000000000000B87A                 push    r12
.text:000000000000B87C                 lea     rax, [rdx+10h]
.text:000000000000B880                 push    rbp
.text:000000000000B881                 push    rbx
.text:000000000000B882                 mov     r14, rsi
.text:000000000000B885                 mov     r15, rdx
.text:000000000000B888                 xor     ebx, ebx
.text:000000000000B88A                 mov     r9d, 7
.text:000000000000B890                 sub     rsp, 58h
.text:000000000000B894                 mov     r10d, 7
.text:000000000000B89A                 mov     qword ptr [rsi], 0
.text:000000000000B8A1                 mov     [rsi+8], rcx
.text:000000000000B8A5                 mov     [rsp+88h+var_60], rcx
.text:000000000000B8AA                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000B8B1                 mov     qword ptr [rdx], 0
.text:000000000000B8B8                 mov     [rsp+88h+src], rax
.text:000000000000B8BD                 mov     [rdx+8], rax
.text:000000000000B8C1                 mov     [rsp+88h+var_70], 0
.text:000000000000B8CA                 mov     [rsp+88h+var_78], 0
.text:000000000000B8D3                 mov     [rsp+88h+var_68], 0
.text:000000000000B8DC                 jmp     short loc_B8EB
.text:000000000000B8DC ; ---------------------------------------------------------------------------
.text:000000000000B8DE                 align 20h
.text:000000000000B8E0
.text:000000000000B8E0 loc_B8E0:                               ; CODE XREF: printf_parse+80↓j
.text:000000000000B8E0                 cmp     al, 25h ; '%'
.text:000000000000B8E2                 lea     rbp, [rdi+1]
.text:000000000000B8E6                 jz      short loc_B928
.text:000000000000B8E8
.text:000000000000B8E8 loc_B8E8:                               ; CODE XREF: printf_parse+35B↓j
.text:000000000000B8E8                                         ; printf_parse+364↓j
.text:000000000000B8E8                 mov     rdi, rbp
.text:000000000000B8EB
.text:000000000000B8EB loc_B8EB:                               ; CODE XREF: printf_parse+6C↑j
.text:000000000000B8EB                 movzx   eax, byte ptr [rdi]
.text:000000000000B8EE                 test    al, al
.text:000000000000B8F0                 jnz     short loc_B8E0
.text:000000000000B8F2                 lea     rax, [rbx+rbx*4]
.text:000000000000B8F6                 lea     rax, [rbx+rax*2]
.text:000000000000B8FA                 mov     [rcx+rax*8], rdi
.text:000000000000B8FE                 mov     rax, [rsp+88h+var_78]
.text:000000000000B903                 mov     [r14+10h], rax
.text:000000000000B907                 mov     rax, [rsp+88h+var_70]
.text:000000000000B90C                 mov     [r14+18h], rax
.text:000000000000B910                 xor     eax, eax
.text:000000000000B912
.text:000000000000B912 loc_B912:                               ; CODE XREF: printf_parse+87E↓j
.text:000000000000B912                                         ; printf_parse+B1C↓j
.text:000000000000B912                 add     rsp, 58h
.text:000000000000B916                 pop     rbx
.text:000000000000B917                 pop     rbp
.text:000000000000B918                 pop     r12
.text:000000000000B91A                 pop     r13
.text:000000000000B91C                 pop     r14
.text:000000000000B91E                 pop     r15
.text:000000000000B920                 retn
.text:000000000000B920 ; ---------------------------------------------------------------------------
.text:000000000000B921                 align 8
.text:000000000000B928
.text:000000000000B928 loc_B928:                               ; CODE XREF: printf_parse+76↑j
.text:000000000000B928                 lea     rax, [rbx+rbx*4]
.text:000000000000B92C                 mov     r13, r8
.text:000000000000B92F                 lea     rax, [rbx+rax*2]
.text:000000000000B933                 lea     r12, [rcx+rax*8]
.text:000000000000B937                 mov     [r12], rdi
.text:000000000000B93B                 mov     dword ptr [r12+10h], 0
.text:000000000000B944                 mov     qword ptr [r12+18h], 0
.text:000000000000B94D                 mov     qword ptr [r12+20h], 0
.text:000000000000B956                 mov     [r12+28h], r8
.text:000000000000B95B                 mov     qword ptr [r12+30h], 0
.text:000000000000B964                 mov     qword ptr [r12+38h], 0
.text:000000000000B96D                 mov     [r12+40h], r8
.text:000000000000B972                 mov     [r12+50h], r8
.text:000000000000B977                 movzx   ebx, byte ptr [rdi+1]
.text:000000000000B97B                 lea     eax, [rbx-30h]
.text:000000000000B97E                 cmp     al, 9
.text:000000000000B980                 ja      short loc_B9BE
.text:000000000000B982                 jmp     loc_BDBA
.text:000000000000B982 ; ---------------------------------------------------------------------------
.text:000000000000B987                 align 10h
.text:000000000000B990
.text:000000000000B990 loc_B990:                               ; CODE XREF: printf_parse+158↓j
.text:000000000000B990                 cmp     bl, 2Dh ; '-'
.text:000000000000B993                 jz      short loc_B9D8
.text:000000000000B995                 cmp     bl, 2Bh ; '+'
.text:000000000000B998                 jz      short loc_B9E0
.text:000000000000B99A                 cmp     bl, 20h ; ' '
.text:000000000000B99D                 jz      short loc_B9F0
.text:000000000000B99F                 cmp     bl, 23h ; '#'
.text:000000000000B9A2                 jz      short loc_BA00
.text:000000000000B9A4                 cmp     bl, 30h ; '0'
.text:000000000000B9A7                 jz      short loc_BA10
.text:000000000000B9A9                 cmp     bl, 49h ; 'I'
.text:000000000000B9AC                 jnz     short loc_BA20
.text:000000000000B9AE                 or      dword ptr [r12+10h], 40h
.text:000000000000B9B4                 nop     dword ptr [rax+00h]
.text:000000000000B9B8
.text:000000000000B9B8 loc_B9B8:                               ; CODE XREF: printf_parse+160↓j
.text:000000000000B9B8                                         ; printf_parse+16E↓j ...
.text:000000000000B9B8                 movzx   ebx, byte ptr [rax]
.text:000000000000B9BB                 mov     rbp, rax
.text:000000000000B9BE
.text:000000000000B9BE loc_B9BE:                               ; CODE XREF: printf_parse+110↑j
.text:000000000000B9BE                                         ; printf_parse+565↓j ...
.text:000000000000B9BE                 lea     rax, [rbp+1]
.text:000000000000B9C2                 cmp     bl, 27h ; '''
.text:000000000000B9C5                 mov     rdx, rax
.text:000000000000B9C8                 jnz     short loc_B990
.text:000000000000B9CA                 or      dword ptr [r12+10h], 1
.text:000000000000B9D0                 jmp     short loc_B9B8
.text:000000000000B9D0 ; ---------------------------------------------------------------------------
.text:000000000000B9D2                 align 8
.text:000000000000B9D8
.text:000000000000B9D8 loc_B9D8:                               ; CODE XREF: printf_parse+123↑j
.text:000000000000B9D8                 or      dword ptr [r12+10h], 2
.text:000000000000B9DE                 jmp     short loc_B9B8
.text:000000000000B9E0 ; ---------------------------------------------------------------------------
.text:000000000000B9E0
.text:000000000000B9E0 loc_B9E0:                               ; CODE XREF: printf_parse+128↑j
.text:000000000000B9E0                 or      dword ptr [r12+10h], 4
.text:000000000000B9E6                 jmp     short loc_B9B8
.text:000000000000B9E6 ; ---------------------------------------------------------------------------
.text:000000000000B9E8                 align 10h
.text:000000000000B9F0
.text:000000000000B9F0 loc_B9F0:                               ; CODE XREF: printf_parse+12D↑j
.text:000000000000B9F0                 or      dword ptr [r12+10h], 8
.text:000000000000B9F6                 jmp     short loc_B9B8
.text:000000000000B9F6 ; ---------------------------------------------------------------------------
.text:000000000000B9F8                 align 20h
.text:000000000000BA00
.text:000000000000BA00 loc_BA00:                               ; CODE XREF: printf_parse+132↑j
.text:000000000000BA00                 or      dword ptr [r12+10h], 10h
.text:000000000000BA06                 jmp     short loc_B9B8
.text:000000000000BA06 ; ---------------------------------------------------------------------------
.text:000000000000BA08                 align 10h
.text:000000000000BA10
.text:000000000000BA10 loc_BA10:                               ; CODE XREF: printf_parse+137↑j
.text:000000000000BA10                 or      dword ptr [r12+10h], 20h
.text:000000000000BA16                 jmp     short loc_B9B8
.text:000000000000BA16 ; ---------------------------------------------------------------------------
.text:000000000000BA18                 align 20h
.text:000000000000BA20
.text:000000000000BA20 loc_BA20:                               ; CODE XREF: printf_parse+13C↑j
.text:000000000000BA20                 cmp     bl, 2Ah ; '*'
.text:000000000000BA23                 jz      loc_BBD9
.text:000000000000BA29                 lea     ecx, [rbx-30h]
.text:000000000000BA2C                 cmp     cl, 9
.text:000000000000BA2F                 jbe     loc_BE47
.text:000000000000BA35
.text:000000000000BA35 loc_BA35:                               ; CODE XREF: printf_parse+629↓j
.text:000000000000BA35                                         ; printf_parse+96C↓j
.text:000000000000BA35                 cmp     bl, 2Eh ; '.'
.text:000000000000BA38                 jz      loc_BD0F
.text:000000000000BA3E
.text:000000000000BA3E loc_BA3E:                               ; CODE XREF: printf_parse+499↓j
.text:000000000000BA3E                                         ; printf_parse+545↓j ...
.text:000000000000BA3E                 xor     eax, eax
.text:000000000000BA40                 mov     esi, 1
.text:000000000000BA45                 jmp     short loc_BA77
.text:000000000000BA45 ; ---------------------------------------------------------------------------
.text:000000000000BA47                 align 10h
.text:000000000000BA50
.text:000000000000BA50 loc_BA50:                               ; CODE XREF: printf_parse+20E↓j
.text:000000000000BA50                 cmp     bl, 4Ch ; 'L'
.text:000000000000BA53                 jz      short loc_BA90
.text:000000000000BA55                 cmp     bl, 6Ch ; 'l'
.text:000000000000BA58                 jz      short loc_BA70
.text:000000000000BA5A                 cmp     bl, 6Ah ; 'j'
.text:000000000000BA5D                 jz      short loc_BA70
.text:000000000000BA5F                 mov     edx, ebx
.text:000000000000BA61                 and     edx, 0FFFFFFDFh
.text:000000000000BA64                 cmp     dl, 5Ah ; 'Z'
.text:000000000000BA67                 jz      short loc_BA70
.text:000000000000BA69                 cmp     bl, 74h ; 't'
.text:000000000000BA6C                 jnz     short loc_BA98
.text:000000000000BA6E                 xchg    ax, ax
.text:000000000000BA70
.text:000000000000BA70 loc_BA70:                               ; CODE XREF: printf_parse+1E8↑j
.text:000000000000BA70                                         ; printf_parse+1ED↑j ...
.text:000000000000BA70                 add     eax, 8
.text:000000000000BA73
.text:000000000000BA73 loc_BA73:                               ; CODE XREF: printf_parse+21B↓j
.text:000000000000BA73                                         ; printf_parse+223↓j
.text:000000000000BA73                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000BA77
.text:000000000000BA77 loc_BA77:                               ; CODE XREF: printf_parse+1D5↑j
.text:000000000000BA77                 add     rbp, 1
.text:000000000000BA7B                 cmp     bl, 68h ; 'h'
.text:000000000000BA7E                 jnz     short loc_BA50
.text:000000000000BA80                 mov     ecx, eax
.text:000000000000BA82                 mov     edx, esi
.text:000000000000BA84                 and     ecx, 1
.text:000000000000BA87                 shl     edx, cl
.text:000000000000BA89                 or      eax, edx
.text:000000000000BA8B                 jmp     short loc_BA73
.text:000000000000BA8B ; ---------------------------------------------------------------------------
.text:000000000000BA8D                 align 10h
.text:000000000000BA90
.text:000000000000BA90 loc_BA90:                               ; CODE XREF: printf_parse+1E3↑j
.text:000000000000BA90                 or      eax, 4
.text:000000000000BA93                 jmp     short loc_BA73
.text:000000000000BA93 ; ---------------------------------------------------------------------------
.text:000000000000BA95                 align 8
.text:000000000000BA98
.text:000000000000BA98 loc_BA98:                               ; CODE XREF: printf_parse+1FC↑j
.text:000000000000BA98                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000000BA9B                 cmp     dl, 53h
.text:000000000000BA9E                 ja      def_BAB5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000BAA4                 lea     rcx, jpt_BAB5
.text:000000000000BAAB                 movzx   edx, dl
.text:000000000000BAAE                 movsxd  rdx, ds:(jpt_BAB5 - 0ED3Ch)[rcx+rdx*4]
.text:000000000000BAB2                 add     rdx, rcx
.text:000000000000BAB5                 jmp     rdx             ; switch jump
.text:000000000000BAB7 ; ---------------------------------------------------------------------------
.text:000000000000BAB7
.text:000000000000BAB7 loc_BAB7:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000BAB7                                         ; DATA XREF: .rodata:jpt_BAB5↓o
.text:000000000000BAB7                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000000BABD                 mov     ebx, 73h ; 's'
.text:000000000000BAC2                 nop     word ptr [rax+rax+00h]
.text:000000000000BAC8
.text:000000000000BAC8 loc_BAC8:                               ; CODE XREF: printf_parse+705↓j
.text:000000000000BAC8                                         ; printf_parse+70D↓j ...
.text:000000000000BAC8                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000BACC                 jz      loc_C187
.text:000000000000BAD2                 mov     [r12+50h], r13
.text:000000000000BAD7
.text:000000000000BAD7 loc_BAD7:                               ; CODE XREF: printf_parse+939↓j
.text:000000000000BAD7                 cmp     r9, r13
.text:000000000000BADA                 mov     rcx, [r15+8]
.text:000000000000BADE                 jbe     loc_C100
.text:000000000000BAE4
.text:000000000000BAE4 loc_BAE4:                               ; CODE XREF: printf_parse+912↓j
.text:000000000000BAE4                 mov     rax, [r15]
.text:000000000000BAE7                 mov     rdx, rax
.text:000000000000BAEA                 shl     rdx, 5
.text:000000000000BAEE                 add     rdx, rcx
.text:000000000000BAF1                 cmp     rax, r13
.text:000000000000BAF4                 ja      short loc_BB16
.text:000000000000BAF6                 db      2Eh
.text:000000000000BAF6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000BB00
.text:000000000000BB00 loc_BB00:                               ; CODE XREF: printf_parse+2A1↓j
.text:000000000000BB00                 add     rax, 1
.text:000000000000BB04                 mov     dword ptr [rdx], 0
.text:000000000000BB0A                 add     rdx, 20h ; ' '
.text:000000000000BB0E                 cmp     rax, r13
.text:000000000000BB11                 jbe     short loc_BB00
.text:000000000000BB13                 mov     [r15], rax
.text:000000000000BB16
.text:000000000000BB16 loc_BB16:                               ; CODE XREF: printf_parse+284↑j
.text:000000000000BB16                 shl     r13, 5
.text:000000000000BB1A                 lea     rax, [rcx+r13]
.text:000000000000BB1E                 mov     edx, [rax]
.text:000000000000BB20                 test    edx, edx
.text:000000000000BB22                 jnz     loc_C0F3
.text:000000000000BB28                 mov     [rax], r11d
.text:000000000000BB2B
.text:000000000000BB2B loc_BB2B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000BB2B                                         ; printf_parse+886↓j
.text:000000000000BB2B                                         ; DATA XREF: ...
.text:000000000000BB2B                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:000000000000BB30                 mov     rax, [r14]
.text:000000000000BB33                 mov     [r12+8], rbp
.text:000000000000BB38                 lea     rbx, [rax+1]
.text:000000000000BB3C                 cmp     r10, rbx
.text:000000000000BB3F                 mov     [r14], rbx
.text:000000000000BB42                 ja      loc_BBD0
.text:000000000000BB48                 test    r10, r10
.text:000000000000BB4B                 js      loc_C4F7
.text:000000000000BB51                 add     r10, r10
.text:000000000000BB54                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000000BB5E                 cmp     r10, rax
.text:000000000000BB61                 ja      loc_C4F7
.text:000000000000BB67                 lea     rax, [r10+r10*4]
.text:000000000000BB6B                 mov     rdi, [r14+8]    ; ptr
.text:000000000000BB6F                 cmp     [rsp+88h+var_60], rdi
.text:000000000000BB74                 mov     [rsp+88h+var_48], r9
.text:000000000000BB79                 mov     [rsp+88h+var_50], r10
.text:000000000000BB7E                 lea     rax, [r10+rax*2]
.text:000000000000BB82                 mov     [rsp+88h+var_58], r8
.text:000000000000BB87                 lea     rsi, ds:0[rax*8] ; size
.text:000000000000BB8F                 jz      loc_C24D
.text:000000000000BB95                 call    _realloc        ; PIC mode
.text:000000000000BB9A                 test    rax, rax
.text:000000000000BB9D                 mov     rcx, rax
.text:000000000000BBA0                 mov     r8, [rsp+88h+var_58]
.text:000000000000BBA5                 mov     r10, [rsp+88h+var_50]
.text:000000000000BBAA                 mov     r9, [rsp+88h+var_48]
.text:000000000000BBAF                 jz      loc_C4F7
.text:000000000000BBB5                 mov     rax, [rsp+88h+var_60]
.text:000000000000BBBA                 cmp     rax, [r14+8]
.text:000000000000BBBE                 mov     rbx, [r14]
.text:000000000000BBC1                 jz      loc_C270
.text:000000000000BBC7
.text:000000000000BBC7 loc_BBC7:                               ; CODE XREF: printf_parse+A3D↓j
.text:000000000000BBC7                 mov     [r14+8], rcx
.text:000000000000BBCB                 jmp     loc_B8E8
.text:000000000000BBD0 ; ---------------------------------------------------------------------------
.text:000000000000BBD0
.text:000000000000BBD0 loc_BBD0:                               ; CODE XREF: printf_parse+2D2↑j
.text:000000000000BBD0                 mov     rcx, [r14+8]
.text:000000000000BBD4                 jmp     loc_B8E8
.text:000000000000BBD9 ; ---------------------------------------------------------------------------
.text:000000000000BBD9
.text:000000000000BBD9 loc_BBD9:                               ; CODE XREF: printf_parse+1B3↑j
.text:000000000000BBD9                 mov     rsi, [rsp+88h+var_78]
.text:000000000000BBDE                 mov     ecx, 1
.text:000000000000BBE3                 mov     [r12+18h], rbp
.text:000000000000BBE8                 mov     [r12+20h], rax
.text:000000000000BBED                 test    rsi, rsi
.text:000000000000BBF0                 cmovnz  rcx, rsi
.text:000000000000BBF4                 mov     [rsp+88h+var_78], rcx
.text:000000000000BBF9                 movzx   ecx, byte ptr [rbp+1]
.text:000000000000BBFD                 lea     esi, [rcx-30h]
.text:000000000000BC00                 cmp     sil, 9
.text:000000000000BC04                 jbe     loc_BEE5
.text:000000000000BC0A
.text:000000000000BC0A loc_BC0A:                               ; CODE XREF: printf_parse+68D↓j
.text:000000000000BC0A                 mov     rsi, [rsp+88h+var_68]
.text:000000000000BC0F                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000BC13                 lea     rdx, [rsi+1]
.text:000000000000BC17                 mov     [r12+28h], rsi
.text:000000000000BC1C                 jz      def_BAB5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000BC22                 mov     rbx, [rsp+88h+var_68]
.text:000000000000BC27                 mov     rbp, rax
.text:000000000000BC2A                 mov     [rsp+88h+var_68], rdx
.text:000000000000BC2F
.text:000000000000BC2F loc_BC2F:                               ; CODE XREF: printf_parse+6F7↓j
.text:000000000000BC2F                 cmp     r9, rbx
.text:000000000000BC32                 mov     rcx, [r15+8]
.text:000000000000BC36                 ja      loc_C2B2
.text:000000000000BC3C                 add     r9, r9
.text:000000000000BC3F                 lea     rax, [rbx+1]
.text:000000000000BC43                 cmp     r9, rbx
.text:000000000000BC46                 cmovbe  r9, rax
.text:000000000000BC4A                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000BC54                 cmp     r9, rax
.text:000000000000BC57                 ja      loc_C4FB
.text:000000000000BC5D                 mov     rsi, r9
.text:000000000000BC60                 mov     [rsp+88h+var_48], r9
.text:000000000000BC65                 mov     [rsp+88h+var_50], r10
.text:000000000000BC6A                 shl     rsi, 5          ; size
.text:000000000000BC6E                 cmp     [rsp+88h+src], rcx
.text:000000000000BC73                 mov     [rsp+88h+var_58], r8
.text:000000000000BC78                 jz      loc_C391
.text:000000000000BC7E                 mov     rdi, rcx        ; ptr
.text:000000000000BC81                 call    _realloc        ; PIC mode
.text:000000000000BC86                 mov     rdx, [r15+8]
.text:000000000000BC8A                 mov     r8, [rsp+88h+var_58]
.text:000000000000BC8F                 mov     rcx, rax
.text:000000000000BC92                 mov     r10, [rsp+88h+var_50]
.text:000000000000BC97                 mov     r9, [rsp+88h+var_48]
.text:000000000000BC9C
.text:000000000000BC9C loc_BC9C:                               ; CODE XREF: printf_parse+B40↓j
.text:000000000000BC9C                 test    rcx, rcx
.text:000000000000BC9F                 jz      loc_C557
.text:000000000000BCA5                 cmp     [rsp+88h+src], rdx
.text:000000000000BCAA                 mov     rax, [r15]
.text:000000000000BCAD                 jz      loc_C46B
.text:000000000000BCB3
.text:000000000000BCB3 loc_BCB3:                               ; CODE XREF: printf_parse+C33↓j
.text:000000000000BCB3                 mov     [r15+8], rcx
.text:000000000000BCB7
.text:000000000000BCB7 loc_BCB7:                               ; CODE XREF: printf_parse+A45↓j
.text:000000000000BCB7                 mov     rdx, rax
.text:000000000000BCBA                 shl     rdx, 5
.text:000000000000BCBE                 add     rdx, rcx
.text:000000000000BCC1                 cmp     rax, rbx
.text:000000000000BCC4                 ja      short loc_BCE6
.text:000000000000BCC6                 db      2Eh
.text:000000000000BCC6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000BCD0
.text:000000000000BCD0 loc_BCD0:                               ; CODE XREF: printf_parse+471↓j
.text:000000000000BCD0                 add     rax, 1
.text:000000000000BCD4                 mov     dword ptr [rdx], 0
.text:000000000000BCDA                 add     rdx, 20h ; ' '
.text:000000000000BCDE                 cmp     rax, rbx
.text:000000000000BCE1                 jbe     short loc_BCD0
.text:000000000000BCE3                 mov     [r15], rax
.text:000000000000BCE6
.text:000000000000BCE6 loc_BCE6:                               ; CODE XREF: printf_parse+454↑j
.text:000000000000BCE6                 shl     rbx, 5
.text:000000000000BCEA                 lea     rax, [rcx+rbx]
.text:000000000000BCEE                 mov     edx, [rax]
.text:000000000000BCF0                 test    edx, edx
.text:000000000000BCF2                 jnz     loc_C1CB
.text:000000000000BCF8                 mov     dword ptr [rax], 5
.text:000000000000BCFE                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000BD02                 lea     rdx, [rbp+1]
.text:000000000000BD06                 cmp     bl, 2Eh ; '.'
.text:000000000000BD09                 jnz     loc_BA3E
.text:000000000000BD0F
.text:000000000000BD0F loc_BD0F:                               ; CODE XREF: printf_parse+1C8↑j
.text:000000000000BD0F                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:000000000000BD13                 mov     [r12+30h], rbp
.text:000000000000BD18                 jnz     loc_BE9E
.text:000000000000BD1E                 mov     rsi, [rsp+88h+var_70]
.text:000000000000BD23                 lea     r11, [rbp+2]
.text:000000000000BD27                 mov     eax, 2
.text:000000000000BD2C                 mov     [r12+38h], r11
.text:000000000000BD31                 cmp     rsi, 2
.text:000000000000BD35                 cmovnb  rax, rsi
.text:000000000000BD39                 mov     [rsp+88h+var_70], rax
.text:000000000000BD3E                 movsx   eax, byte ptr [rbp+2]
.text:000000000000BD42                 lea     edx, [rax-30h]
.text:000000000000BD45                 cmp     dl, 9
.text:000000000000BD48                 jbe     loc_C3DC
.text:000000000000BD4E
.text:000000000000BD4E loc_BD4E:                               ; CODE XREF: printf_parse+B82↓j
.text:000000000000BD4E                 mov     rbx, [r12+40h]
.text:000000000000BD53                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000BD57                 jz      loc_C3B5
.text:000000000000BD5D
.text:000000000000BD5D loc_BD5D:                               ; CODE XREF: printf_parse+B67↓j
.text:000000000000BD5D                                         ; printf_parse+C59↓j
.text:000000000000BD5D                 cmp     r9, rbx
.text:000000000000BD60                 mov     rcx, [r15+8]
.text:000000000000BD64                 jbe     loc_C2CF
.text:000000000000BD6A                 mov     rax, [r15]
.text:000000000000BD6D
.text:000000000000BD6D loc_BD6D:                               ; CODE XREF: printf_parse+AE4↓j
.text:000000000000BD6D                 mov     rdx, rax
.text:000000000000BD70                 shl     rdx, 5
.text:000000000000BD74                 add     rdx, rcx
.text:000000000000BD77                 cmp     rax, rbx
.text:000000000000BD7A                 ja      short loc_BD96
.text:000000000000BD7C                 nop     dword ptr [rax+00h]
.text:000000000000BD80
.text:000000000000BD80 loc_BD80:                               ; CODE XREF: printf_parse+521↓j
.text:000000000000BD80                 add     rax, 1
.text:000000000000BD84                 mov     dword ptr [rdx], 0
.text:000000000000BD8A                 add     rdx, 20h ; ' '
.text:000000000000BD8E                 cmp     rax, rbx
.text:000000000000BD91                 jbe     short loc_BD80
.text:000000000000BD93                 mov     [r15], rax
.text:000000000000BD96
.text:000000000000BD96 loc_BD96:                               ; CODE XREF: printf_parse+50A↑j
.text:000000000000BD96                 shl     rbx, 5
.text:000000000000BD9A                 lea     rax, [rcx+rbx]
.text:000000000000BD9E                 mov     edx, [rax]
.text:000000000000BDA0                 test    edx, edx
.text:000000000000BDA2                 jnz     loc_C2BA
.text:000000000000BDA8                 mov     dword ptr [rax], 5
.text:000000000000BDAE                 mov     rbp, r11
.text:000000000000BDB1                 movzx   ebx, byte ptr [r11]
.text:000000000000BDB5                 jmp     loc_BA3E
.text:000000000000BDBA ; ---------------------------------------------------------------------------
.text:000000000000BDBA
.text:000000000000BDBA loc_BDBA:                               ; CODE XREF: printf_parse+112↑j
.text:000000000000BDBA                 mov     rax, rbp
.text:000000000000BDBD                 nop     dword ptr [rax]
.text:000000000000BDC0
.text:000000000000BDC0 loc_BDC0:                               ; CODE XREF: printf_parse+55D↓j
.text:000000000000BDC0                 add     rax, 1
.text:000000000000BDC4                 movzx   edx, byte ptr [rax]
.text:000000000000BDC7                 lea     ecx, [rdx-30h]
.text:000000000000BDCA                 cmp     cl, 9
.text:000000000000BDCD                 jbe     short loc_BDC0
.text:000000000000BDCF                 cmp     dl, 24h ; '$'
.text:000000000000BDD2                 mov     r13, r8
.text:000000000000BDD5                 jnz     loc_B9BE
.text:000000000000BDDB                 xor     edx, edx
.text:000000000000BDDD
.text:000000000000BDDD loc_BDDD:                               ; CODE XREF: printf_parse+5B7↓j
.text:000000000000BDDD                 movsx   eax, bl
.text:000000000000BDE0                 mov     rdi, 1999999999999999h
.text:000000000000BDEA                 mov     rsi, r8
.text:000000000000BDED                 sub     eax, 30h ; '0'
.text:000000000000BDF0                 cmp     rdx, rdi
.text:000000000000BDF3                 cdqe
.text:000000000000BDF5                 ja      short loc_BDFE
.text:000000000000BDF7                 lea     rsi, [rdx+rdx*4]
.text:000000000000BDFB                 add     rsi, rsi
.text:000000000000BDFE
.text:000000000000BDFE loc_BDFE:                               ; CODE XREF: printf_parse+585↑j
.text:000000000000BDFE                 mov     rcx, rbp
.text:000000000000BE01
.text:000000000000BE01 loc_BE01:                               ; CODE XREF: printf_parse+956↓j
.text:000000000000BE01                 add     rax, rsi
.text:000000000000BE04                 movzx   ebx, byte ptr [rbp+1]
.text:000000000000BE08                 setb    sil
.text:000000000000BE0C                 add     rbp, 1
.text:000000000000BE10                 mov     rdx, rax
.text:000000000000BE13                 movzx   esi, sil
.text:000000000000BE17                 test    rsi, rsi
.text:000000000000BE1A                 lea     edi, [rbx-30h]
.text:000000000000BE1D                 jnz     loc_C1AE
.text:000000000000BE23                 cmp     dil, 9
.text:000000000000BE27                 jbe     short loc_BDDD
.text:000000000000BE29                 mov     r13, rax
.text:000000000000BE2C                 sub     r13, 1
.text:000000000000BE30                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:000000000000BE34                 ja      def_BAB5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000BE3A                 lea     rbp, [rcx+2]
.text:000000000000BE3E                 movzx   ebx, byte ptr [rcx+2]
.text:000000000000BE42                 jmp     loc_B9BE
.text:000000000000BE47 ; ---------------------------------------------------------------------------
.text:000000000000BE47
.text:000000000000BE47 loc_BE47:                               ; CODE XREF: printf_parse+1BF↑j
.text:000000000000BE47                 mov     [r12+18h], rbp
.text:000000000000BE4C                 movzx   edi, byte ptr [rbp+0]
.text:000000000000BE50                 mov     rsi, rbp
.text:000000000000BE53                 lea     ecx, [rdi-30h]
.text:000000000000BE56                 cmp     cl, 9
.text:000000000000BE59                 jbe     short loc_BE67
.text:000000000000BE5B                 jmp     short loc_BE90
.text:000000000000BE5B ; ---------------------------------------------------------------------------
.text:000000000000BE5D                 align 20h
.text:000000000000BE60
.text:000000000000BE60 loc_BE60:                               ; CODE XREF: printf_parse+600↓j
.text:000000000000BE60                 mov     rbp, rax
.text:000000000000BE63                 add     rax, 1
.text:000000000000BE67
.text:000000000000BE67 loc_BE67:                               ; CODE XREF: printf_parse+5E9↑j
.text:000000000000BE67                 movzx   edi, byte ptr [rax]
.text:000000000000BE6A                 lea     edx, [rdi-30h]
.text:000000000000BE6D                 cmp     dl, 9
.text:000000000000BE70                 jbe     short loc_BE60
.text:000000000000BE72                 mov     rcx, rax
.text:000000000000BE75                 lea     rdx, [rbp+2]
.text:000000000000BE79                 mov     rbp, rax
.text:000000000000BE7C                 sub     rcx, rsi
.text:000000000000BE7F                 mov     rsi, [rsp+88h+var_78]
.text:000000000000BE84                 cmp     rsi, rcx
.text:000000000000BE87                 cmovnb  rcx, rsi
.text:000000000000BE8B                 mov     [rsp+88h+var_78], rcx
.text:000000000000BE90
.text:000000000000BE90 loc_BE90:                               ; CODE XREF: printf_parse+5EB↑j
.text:000000000000BE90                 mov     [r12+20h], rbp
.text:000000000000BE95                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000BE99                 jmp     loc_BA35
.text:000000000000BE9E ; ---------------------------------------------------------------------------
.text:000000000000BE9E
.text:000000000000BE9E loc_BE9E:                               ; CODE XREF: printf_parse+4A8↑j
.text:000000000000BE9E                 movzx   eax, byte ptr [rbp+1]
.text:000000000000BEA2                 sub     eax, 30h ; '0'
.text:000000000000BEA5                 cmp     al, 9
.text:000000000000BEA7                 ja      short loc_BEBE
.text:000000000000BEA9                 nop     dword ptr [rax+00000000h]
.text:000000000000BEB0
.text:000000000000BEB0 loc_BEB0:                               ; CODE XREF: printf_parse+64C↓j
.text:000000000000BEB0                 add     rdx, 1
.text:000000000000BEB4                 movzx   eax, byte ptr [rdx]
.text:000000000000BEB7                 sub     eax, 30h ; '0'
.text:000000000000BEBA                 cmp     al, 9
.text:000000000000BEBC                 jbe     short loc_BEB0
.text:000000000000BEBE
.text:000000000000BEBE loc_BEBE:                               ; CODE XREF: printf_parse+637↑j
.text:000000000000BEBE                 mov     rsi, [rsp+88h+var_70]
.text:000000000000BEC3                 mov     rax, rdx
.text:000000000000BEC6                 mov     [r12+38h], rdx
.text:000000000000BECB                 sub     rax, rbp
.text:000000000000BECE                 movzx   ebx, byte ptr [rdx]
.text:000000000000BED1                 mov     rbp, rdx
.text:000000000000BED4                 cmp     rsi, rax
.text:000000000000BED7                 cmovnb  rax, rsi
.text:000000000000BEDB                 mov     [rsp+88h+var_70], rax
.text:000000000000BEE0                 jmp     loc_BA3E
.text:000000000000BEE5 ; ---------------------------------------------------------------------------
.text:000000000000BEE5
.text:000000000000BEE5 loc_BEE5:                               ; CODE XREF: printf_parse+394↑j
.text:000000000000BEE5                 mov     rsi, rax
.text:000000000000BEE8
.text:000000000000BEE8 loc_BEE8:                               ; CODE XREF: printf_parse+687↓j
.text:000000000000BEE8                 add     rsi, 1
.text:000000000000BEEC                 movzx   edi, byte ptr [rsi]
.text:000000000000BEEF                 lea     r11d, [rdi-30h]
.text:000000000000BEF3                 cmp     r11b, 9
.text:000000000000BEF7                 jbe     short loc_BEE8
.text:000000000000BEF9                 cmp     dil, 24h ; '$'
.text:000000000000BEFD                 jnz     loc_BC0A
.text:000000000000BF03                 xor     esi, esi
.text:000000000000BF05
.text:000000000000BF05 loc_BF05:                               ; CODE XREF: printf_parse+6DE↓j
.text:000000000000BF05                 movsx   eax, cl
.text:000000000000BF08                 mov     rdi, 1999999999999999h
.text:000000000000BF12                 mov     rcx, r8
.text:000000000000BF15                 sub     eax, 30h ; '0'
.text:000000000000BF18                 cmp     rsi, rdi
.text:000000000000BF1B                 cdqe
.text:000000000000BF1D                 ja      short loc_BF26
.text:000000000000BF1F                 lea     rcx, [rsi+rsi*4]
.text:000000000000BF23                 add     rcx, rcx
.text:000000000000BF26
.text:000000000000BF26 loc_BF26:                               ; CODE XREF: printf_parse+6AD↑j
.text:000000000000BF26                 mov     rbp, rdx
.text:000000000000BF29
.text:000000000000BF29 loc_BF29:                               ; CODE XREF: printf_parse+BF6↓j
.text:000000000000BF29                 xor     r11d, r11d
.text:000000000000BF2C                 add     rax, rcx
.text:000000000000BF2F                 movzx   ecx, byte ptr [rdx+1]
.text:000000000000BF33                 setb    r11b
.text:000000000000BF37                 add     rdx, 1
.text:000000000000BF3B                 mov     rsi, rax
.text:000000000000BF3E                 test    r11, r11
.text:000000000000BF41                 lea     edi, [rcx-30h]
.text:000000000000BF44                 jnz     loc_C44E
.text:000000000000BF4A                 cmp     dil, 9
.text:000000000000BF4E                 jbe     short loc_BF05
.text:000000000000BF50                 lea     rbx, [rax-1]
.text:000000000000BF54                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000BF58                 ja      def_BAB5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000BF5E                 mov     [r12+28h], rbx
.text:000000000000BF63                 add     rbp, 2
.text:000000000000BF67                 jmp     loc_BC2F
.text:000000000000BF6C ; ---------------------------------------------------------------------------
.text:000000000000BF6C
.text:000000000000BF6C loc_BF6C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000BF6C                                         ; DATA XREF: .rodata:jpt_BAB5↓o
.text:000000000000BF6C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:000000000000BF6F                 mov     r11d, 16h
.text:000000000000BF75                 jg      loc_BAC8
.text:000000000000BF7B                 test    al, 4
.text:000000000000BF7D                 jnz     loc_BAC8
.text:000000000000BF83                 cmp     eax, 7
.text:000000000000BF86                 mov     r11d, 15h
.text:000000000000BF8C                 jg      loc_BAC8
.text:000000000000BF92                 test    al, 2
.text:000000000000BF94                 mov     r11d, 12h
.text:000000000000BF9A                 jnz     loc_BAC8
.text:000000000000BFA0                 xor     r11d, r11d
.text:000000000000BFA3                 test    al, 1
.text:000000000000BFA5                 setz    r11b
.text:000000000000BFA9                 add     r11d, 13h
.text:000000000000BFAD                 jmp     loc_BAC8
.text:000000000000BFAD ; ---------------------------------------------------------------------------
.text:000000000000BFB2                 align 8
.text:000000000000BFB8
.text:000000000000BFB8 loc_BFB8:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000BFB8                                         ; DATA XREF: .rodata:jpt_BAB5↓o
.text:000000000000BFB8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:000000000000BFBB                 cmp     eax, 7
.text:000000000000BFBE                 setnle  r11b
.text:000000000000BFC2                 add     r11d, 0Dh
.text:000000000000BFC6                 jmp     loc_BAC8
.text:000000000000BFCB ; ---------------------------------------------------------------------------
.text:000000000000BFCB
.text:000000000000BFCB loc_BFCB:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000BFCB                                         ; DATA XREF: .rodata:jpt_BAB5↓o
.text:000000000000BFCB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000000BFCE                 mov     r11d, 9
.text:000000000000BFD4                 jg      loc_BAC8
.text:000000000000BFDA                 test    al, 4
.text:000000000000BFDC                 jnz     loc_BAC8
.text:000000000000BFE2                 cmp     eax, 7
.text:000000000000BFE5                 mov     r11d, 7
.text:000000000000BFEB                 jg      loc_BAC8
.text:000000000000BFF1                 test    al, 2
.text:000000000000BFF3                 mov     r11d, 1
.text:000000000000BFF9                 jnz     loc_BAC8
.text:000000000000BFFF                 and     eax, 1
.text:000000000000C002                 cmp     eax, 1
.text:000000000000C005                 sbb     r11d, r11d
.text:000000000000C008                 and     r11d, 2
.text:000000000000C00C                 add     r11d, 3
.text:000000000000C010                 jmp     loc_BAC8
.text:000000000000C010 ; ---------------------------------------------------------------------------
.text:000000000000C015                 align 8
.text:000000000000C018
.text:000000000000C018 loc_C018:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000C018                                         ; DATA XREF: .rodata:jpt_BAB5↓o
.text:000000000000C018                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:000000000000C01B                 cmp     eax, 7
.text:000000000000C01E                 setnle  r11b
.text:000000000000C022                 add     r11d, 0Fh
.text:000000000000C026                 jmp     loc_BAC8
.text:000000000000C02B ; ---------------------------------------------------------------------------
.text:000000000000C02B
.text:000000000000C02B loc_C02B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000C02B                                         ; DATA XREF: .rodata:jpt_BAB5↓o
.text:000000000000C02B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:000000000000C02E                 mov     r11d, 0Ch
.text:000000000000C034                 jg      loc_BAC8
.text:000000000000C03A                 xor     r11d, r11d
.text:000000000000C03D                 test    al, 4
.text:000000000000C03F                 setnz   r11b
.text:000000000000C043                 add     r11d, 0Bh
.text:000000000000C047                 jmp     loc_BAC8
.text:000000000000C04C ; ---------------------------------------------------------------------------
.text:000000000000C04C
.text:000000000000C04C loc_C04C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000C04C                                         ; DATA XREF: .rodata:jpt_BAB5↓o
.text:000000000000C04C                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:000000000000C052                 mov     ebx, 63h ; 'c'
.text:000000000000C057                 jmp     loc_BAC8
.text:000000000000C05C ; ---------------------------------------------------------------------------
.text:000000000000C05C
.text:000000000000C05C loc_C05C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000C05C                                         ; DATA XREF: .rodata:jpt_BAB5↓o
.text:000000000000C05C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:000000000000C05F                 mov     r11d, 0Ah
.text:000000000000C065                 jg      loc_BAC8
.text:000000000000C06B                 test    al, 4
.text:000000000000C06D                 jnz     loc_BAC8
.text:000000000000C073                 cmp     eax, 7
.text:000000000000C076                 mov     r11d, 8
.text:000000000000C07C                 jg      loc_BAC8
.text:000000000000C082                 test    al, 2
.text:000000000000C084                 mov     r11d, 2
.text:000000000000C08A                 jnz     loc_BAC8
.text:000000000000C090                 and     eax, 1
.text:000000000000C093                 cmp     eax, 1
.text:000000000000C096                 sbb     r11d, r11d
.text:000000000000C099                 and     r11d, 2
.text:000000000000C09D                 add     r11d, 4
.text:000000000000C0A1                 jmp     loc_BAC8
.text:000000000000C0A1 ; ---------------------------------------------------------------------------
.text:000000000000C0A6                 align 10h
.text:000000000000C0B0
.text:000000000000C0B0 loc_C0B0:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000C0B0                                         ; DATA XREF: .rodata:jpt_BAB5↓o
.text:000000000000C0B0                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:000000000000C0B6                 jmp     loc_BAC8
.text:000000000000C0BB ; ---------------------------------------------------------------------------
.text:000000000000C0BB
.text:000000000000C0BB def_BAB5:                               ; CODE XREF: printf_parse+22E↑j
.text:000000000000C0BB                                         ; printf_parse+245↑j ...
.text:000000000000C0BB                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000C0BF
.text:000000000000C0BF loc_C0BF:                               ; CODE XREF: printf_parse+88C↓j
.text:000000000000C0BF                                         ; printf_parse+95E↓j ...
.text:000000000000C0BF                 cmp     [rsp+88h+src], rcx
.text:000000000000C0C4                 jz      short loc_C0CE
.text:000000000000C0C6                 mov     rdi, rcx        ; ptr
.text:000000000000C0C9                 call    _free           ; PIC mode
.text:000000000000C0CE
.text:000000000000C0CE loc_C0CE:                               ; CODE XREF: printf_parse+854↑j
.text:000000000000C0CE                 mov     rdi, [r14+8]    ; ptr
.text:000000000000C0D2                 cmp     [rsp+88h+var_60], rdi
.text:000000000000C0D7                 jz      short loc_C0DE
.text:000000000000C0D9                 call    _free           ; PIC mode
.text:000000000000C0DE
.text:000000000000C0DE loc_C0DE:                               ; CODE XREF: printf_parse+867↑j
.text:000000000000C0DE                 call    ___errno_location ; PIC mode
.text:000000000000C0E3                 mov     dword ptr [rax], 16h
.text:000000000000C0E9                 mov     eax, 0FFFFFFFFh
.text:000000000000C0EE                 jmp     loc_B912
.text:000000000000C0F3 ; ---------------------------------------------------------------------------
.text:000000000000C0F3
.text:000000000000C0F3 loc_C0F3:                               ; CODE XREF: printf_parse+2B2↑j
.text:000000000000C0F3                 cmp     edx, r11d
.text:000000000000C0F6                 jz      loc_BB2B        ; jumptable 0000000000000245 case 37
.text:000000000000C0FC                 jmp     short loc_C0BF
.text:000000000000C0FC ; ---------------------------------------------------------------------------
.text:000000000000C0FE                 align 20h
.text:000000000000C100
.text:000000000000C100 loc_C100:                               ; CODE XREF: printf_parse+26E↑j
.text:000000000000C100                 add     r9, r9
.text:000000000000C103                 lea     rax, [r13+1]
.text:000000000000C107                 cmp     r9, r13
.text:000000000000C10A                 cmovbe  r9, rax
.text:000000000000C10E                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000C118                 cmp     r9, rax
.text:000000000000C11B                 ja      loc_C4FB
.text:000000000000C121                 mov     rsi, r9
.text:000000000000C124                 mov     [rsp+88h+var_40], r9
.text:000000000000C129                 mov     [rsp+88h+var_48], r10
.text:000000000000C12E                 shl     rsi, 5          ; size
.text:000000000000C132                 cmp     [rsp+88h+src], rcx
.text:000000000000C137                 mov     [rsp+88h+var_50], r8
.text:000000000000C13C                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000C141                 jz      loc_C1E1
.text:000000000000C147                 mov     rdi, rcx        ; ptr
.text:000000000000C14A                 call    _realloc        ; PIC mode
.text:000000000000C14F                 test    rax, rax
.text:000000000000C152                 mov     rcx, rax
.text:000000000000C155                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000C15A                 mov     r8, [rsp+88h+var_50]
.text:000000000000C15F                 mov     r10, [rsp+88h+var_48]
.text:000000000000C164                 mov     r9, [rsp+88h+var_40]
.text:000000000000C169                 jz      loc_C4F7
.text:000000000000C16F                 mov     rax, [rsp+88h+src]
.text:000000000000C174                 cmp     rax, [r15+8]
.text:000000000000C178                 jz      loc_C209
.text:000000000000C17E
.text:000000000000C17E loc_C17E:                               ; CODE XREF: printf_parse+9D8↓j
.text:000000000000C17E                 mov     [r15+8], rcx
.text:000000000000C182                 jmp     loc_BAE4
.text:000000000000C187 ; ---------------------------------------------------------------------------
.text:000000000000C187
.text:000000000000C187 loc_C187:                               ; CODE XREF: printf_parse+25C↑j
.text:000000000000C187                 mov     rsi, [rsp+88h+var_68]
.text:000000000000C18C                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000C190                 lea     rax, [rsi+1]
.text:000000000000C194                 mov     [r12+50h], rsi
.text:000000000000C199                 jz      def_BAB5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000C19F                 mov     r13, [rsp+88h+var_68]
.text:000000000000C1A4                 mov     [rsp+88h+var_68], rax
.text:000000000000C1A9                 jmp     loc_BAD7
.text:000000000000C1AE ; ---------------------------------------------------------------------------
.text:000000000000C1AE
.text:000000000000C1AE loc_C1AE:                               ; CODE XREF: printf_parse+5AD↑j
.text:000000000000C1AE                 cmp     dil, 9
.text:000000000000C1B2                 ja      def_BAB5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000C1B8                 movsx   eax, bl
.text:000000000000C1BB                 mov     rsi, r8
.text:000000000000C1BE                 mov     rcx, rbp
.text:000000000000C1C1                 sub     eax, 30h ; '0'
.text:000000000000C1C4                 cdqe
.text:000000000000C1C6                 jmp     loc_BE01
.text:000000000000C1CB ; ---------------------------------------------------------------------------
.text:000000000000C1CB
.text:000000000000C1CB loc_C1CB:                               ; CODE XREF: printf_parse+482↑j
.text:000000000000C1CB                 cmp     edx, 5
.text:000000000000C1CE                 jnz     loc_C0BF
.text:000000000000C1D4                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000C1D8                 lea     rdx, [rbp+1]
.text:000000000000C1DC                 jmp     loc_BA35
.text:000000000000C1E1 ; ---------------------------------------------------------------------------
.text:000000000000C1E1
.text:000000000000C1E1 loc_C1E1:                               ; CODE XREF: printf_parse+8D1↑j
.text:000000000000C1E1                 mov     rdi, rsi        ; size
.text:000000000000C1E4                 call    _malloc         ; PIC mode
.text:000000000000C1E9                 test    rax, rax
.text:000000000000C1EC                 mov     rcx, rax
.text:000000000000C1EF                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000C1F4                 mov     r8, [rsp+88h+var_50]
.text:000000000000C1F9                 mov     r10, [rsp+88h+var_48]
.text:000000000000C1FE                 mov     r9, [rsp+88h+var_40]
.text:000000000000C203                 jz      loc_C36C
.text:000000000000C209
.text:000000000000C209 loc_C209:                               ; CODE XREF: printf_parse+908↑j
.text:000000000000C209                 mov     rdx, [r15]
.text:000000000000C20C                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000C211                 mov     rdi, rcx        ; dest
.text:000000000000C214                 mov     [rsp+88h+var_40], r9
.text:000000000000C219                 mov     [rsp+88h+var_48], r10
.text:000000000000C21E                 mov     [rsp+88h+var_50], r8
.text:000000000000C223                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000C228                 shl     rdx, 5          ; n
.text:000000000000C22C                 call    _memcpy         ; PIC mode
.text:000000000000C231                 mov     r9, [rsp+88h+var_40]
.text:000000000000C236                 mov     r10, [rsp+88h+var_48]
.text:000000000000C23B                 mov     rcx, rax
.text:000000000000C23E                 mov     r8, [rsp+88h+var_50]
.text:000000000000C243                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000C248                 jmp     loc_C17E
.text:000000000000C24D ; ---------------------------------------------------------------------------
.text:000000000000C24D
.text:000000000000C24D loc_C24D:                               ; CODE XREF: printf_parse+31F↑j
.text:000000000000C24D                 mov     rdi, rsi        ; size
.text:000000000000C250                 call    _malloc         ; PIC mode
.text:000000000000C255                 test    rax, rax
.text:000000000000C258                 mov     rcx, rax
.text:000000000000C25B                 mov     r8, [rsp+88h+var_58]
.text:000000000000C260                 mov     r10, [rsp+88h+var_50]
.text:000000000000C265                 mov     r9, [rsp+88h+var_48]
.text:000000000000C26A                 jz      loc_C359
.text:000000000000C270
.text:000000000000C270 loc_C270:                               ; CODE XREF: printf_parse+351↑j
.text:000000000000C270                 lea     rax, [rbx+rbx*4]
.text:000000000000C274                 mov     rsi, [rsp+88h+var_60] ; src
.text:000000000000C279                 mov     rdi, rcx        ; dest
.text:000000000000C27C                 mov     [rsp+88h+var_48], r9
.text:000000000000C281                 mov     [rsp+88h+var_50], r10
.text:000000000000C286                 lea     rdx, [rbx+rax*2]
.text:000000000000C28A                 mov     [rsp+88h+var_58], r8
.text:000000000000C28F                 shl     rdx, 3          ; n
.text:000000000000C293                 call    _memcpy         ; PIC mode
.text:000000000000C298                 mov     rbx, [r14]
.text:000000000000C29B                 mov     rcx, rax
.text:000000000000C29E                 mov     r9, [rsp+88h+var_48]
.text:000000000000C2A3                 mov     r10, [rsp+88h+var_50]
.text:000000000000C2A8                 mov     r8, [rsp+88h+var_58]
.text:000000000000C2AD                 jmp     loc_BBC7
.text:000000000000C2B2 ; ---------------------------------------------------------------------------
.text:000000000000C2B2
.text:000000000000C2B2 loc_C2B2:                               ; CODE XREF: printf_parse+3C6↑j
.text:000000000000C2B2                 mov     rax, [r15]
.text:000000000000C2B5                 jmp     loc_BCB7
.text:000000000000C2BA ; ---------------------------------------------------------------------------
.text:000000000000C2BA
.text:000000000000C2BA loc_C2BA:                               ; CODE XREF: printf_parse+532↑j
.text:000000000000C2BA                 cmp     edx, 5
.text:000000000000C2BD                 jnz     loc_C0BF
.text:000000000000C2C3                 movzx   ebx, byte ptr [r11]
.text:000000000000C2C7                 mov     rbp, r11
.text:000000000000C2CA                 jmp     loc_BA3E
.text:000000000000C2CF ; ---------------------------------------------------------------------------
.text:000000000000C2CF
.text:000000000000C2CF loc_C2CF:                               ; CODE XREF: printf_parse+4F4↑j
.text:000000000000C2CF                 add     r9, r9
.text:000000000000C2D2                 lea     rax, [rbx+1]
.text:000000000000C2D6                 cmp     r9, rbx
.text:000000000000C2D9                 cmovbe  r9, rax
.text:000000000000C2DD                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000C2E7                 cmp     r9, rax
.text:000000000000C2EA                 ja      loc_C4FB
.text:000000000000C2F0                 mov     rsi, r9
.text:000000000000C2F3                 mov     [rsp+88h+var_40], r9
.text:000000000000C2F8                 mov     [rsp+88h+var_48], r10
.text:000000000000C2FD                 shl     rsi, 5          ; size
.text:000000000000C301                 cmp     [rsp+88h+src], rcx
.text:000000000000C306                 mov     [rsp+88h+var_50], r8
.text:000000000000C30B                 mov     [rsp+88h+var_58], r11
.text:000000000000C310                 jz      loc_C4CE
.text:000000000000C316                 mov     rdi, rcx        ; ptr
.text:000000000000C319                 call    _realloc        ; PIC mode
.text:000000000000C31E                 mov     rdx, [r15+8]
.text:000000000000C322                 mov     r11, [rsp+88h+var_58]
.text:000000000000C327                 mov     rcx, rax
.text:000000000000C32A                 mov     r8, [rsp+88h+var_50]
.text:000000000000C32F                 mov     r10, [rsp+88h+var_48]
.text:000000000000C334                 mov     r9, [rsp+88h+var_40]
.text:000000000000C339
.text:000000000000C339 loc_C339:                               ; CODE XREF: printf_parse+C82↓j
.text:000000000000C339                 test    rcx, rcx
.text:000000000000C33C                 jz      loc_C557
.text:000000000000C342                 cmp     [rsp+88h+src], rdx
.text:000000000000C347                 mov     rax, [r15]
.text:000000000000C34A                 jz      loc_C510
.text:000000000000C350
.text:000000000000C350 loc_C350:                               ; CODE XREF: printf_parse+CE2↓j
.text:000000000000C350                 mov     [r15+8], rcx
.text:000000000000C354                 jmp     loc_BD6D
.text:000000000000C359 ; ---------------------------------------------------------------------------
.text:000000000000C359
.text:000000000000C359 loc_C359:                               ; CODE XREF: printf_parse+9FA↑j
.text:000000000000C359                 mov     rcx, [r15+8]
.text:000000000000C35D                 cmp     [rsp+88h+src], rcx
.text:000000000000C362                 jz      short loc_C37C
.text:000000000000C364
.text:000000000000C364 loc_C364:                               ; CODE XREF: printf_parse+C90↓j
.text:000000000000C364                 mov     rdi, rcx        ; ptr
.text:000000000000C367                 call    _free           ; PIC mode
.text:000000000000C36C
.text:000000000000C36C loc_C36C:                               ; CODE XREF: printf_parse+993↑j
.text:000000000000C36C                                         ; printf_parse+C96↓j
.text:000000000000C36C                 mov     rdi, [r14+8]    ; ptr
.text:000000000000C370                 cmp     [rsp+88h+var_60], rdi
.text:000000000000C375                 jz      short loc_C37C
.text:000000000000C377                 call    _free           ; PIC mode
.text:000000000000C37C
.text:000000000000C37C loc_C37C:                               ; CODE XREF: printf_parse+AF2↑j
.text:000000000000C37C                                         ; printf_parse+B05↑j
.text:000000000000C37C                 call    ___errno_location ; PIC mode
.text:000000000000C381                 mov     dword ptr [rax], 0Ch
.text:000000000000C387                 mov     eax, 0FFFFFFFFh
.text:000000000000C38C                 jmp     loc_B912
.text:000000000000C391 ; ---------------------------------------------------------------------------
.text:000000000000C391
.text:000000000000C391 loc_C391:                               ; CODE XREF: printf_parse+408↑j
.text:000000000000C391                 mov     rdi, rsi        ; size
.text:000000000000C394                 call    _malloc         ; PIC mode
.text:000000000000C399                 mov     rdx, [rsp+88h+src]
.text:000000000000C39E                 mov     rcx, rax
.text:000000000000C3A1                 mov     r9, [rsp+88h+var_48]
.text:000000000000C3A6                 mov     r10, [rsp+88h+var_50]
.text:000000000000C3AB                 mov     r8, [rsp+88h+var_58]
.text:000000000000C3B0                 jmp     loc_BC9C
.text:000000000000C3B5 ; ---------------------------------------------------------------------------
.text:000000000000C3B5
.text:000000000000C3B5 loc_C3B5:                               ; CODE XREF: printf_parse+4E7↑j
.text:000000000000C3B5                 mov     rsi, [rsp+88h+var_68]
.text:000000000000C3BA                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000C3BE                 lea     rax, [rsi+1]
.text:000000000000C3C2                 mov     [r12+40h], rsi
.text:000000000000C3C7                 jz      def_BAB5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000C3CD                 mov     rbx, [rsp+88h+var_68]
.text:000000000000C3D2                 mov     [rsp+88h+var_68], rax
.text:000000000000C3D7                 jmp     loc_BD5D
.text:000000000000C3DC ; ---------------------------------------------------------------------------
.text:000000000000C3DC
.text:000000000000C3DC loc_C3DC:                               ; CODE XREF: printf_parse+4D8↑j
.text:000000000000C3DC                 mov     rdx, r11
.text:000000000000C3DF
.text:000000000000C3DF loc_C3DF:                               ; CODE XREF: printf_parse+B7D↓j
.text:000000000000C3DF                 add     rdx, 1
.text:000000000000C3E3                 movzx   ecx, byte ptr [rdx]
.text:000000000000C3E6                 lea     esi, [rcx-30h]
.text:000000000000C3E9                 cmp     sil, 9
.text:000000000000C3ED                 jbe     short loc_C3DF
.text:000000000000C3EF                 cmp     cl, 24h ; '$'
.text:000000000000C3F2                 jnz     loc_BD4E
.text:000000000000C3F8                 xor     ecx, ecx
.text:000000000000C3FA
.text:000000000000C3FA loc_C3FA:                               ; CODE XREF: printf_parse+C3C↓j
.text:000000000000C3FA                 mov     rsi, 1999999999999999h
.text:000000000000C404                 sub     eax, 30h ; '0'
.text:000000000000C407                 mov     rdx, r8
.text:000000000000C40A                 cmp     rcx, rsi
.text:000000000000C40D                 cdqe
.text:000000000000C40F                 ja      short loc_C418
.text:000000000000C411                 lea     rdx, [rcx+rcx*4]
.text:000000000000C415                 add     rdx, rdx
.text:000000000000C418
.text:000000000000C418 loc_C418:                               ; CODE XREF: printf_parse+B9F↑j
.text:000000000000C418                 mov     rsi, r11
.text:000000000000C41B
.text:000000000000C41B loc_C41B:                               ; CODE XREF: printf_parse+BDC↓j
.text:000000000000C41B                 xor     ebx, ebx
.text:000000000000C41D                 add     rdx, rax
.text:000000000000C420                 movsx   eax, byte ptr [r11+1]
.text:000000000000C425                 setb    bl
.text:000000000000C428                 add     r11, 1
.text:000000000000C42C                 mov     rcx, rdx
.text:000000000000C42F                 test    rbx, rbx
.text:000000000000C432                 lea     edi, [rax-30h]
.text:000000000000C435                 jz      short loc_C4A8
.text:000000000000C437                 cmp     dil, 9
.text:000000000000C43B                 ja      def_BAB5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000C441                 sub     eax, 30h ; '0'
.text:000000000000C444                 mov     rdx, r8
.text:000000000000C447                 mov     rsi, r11
.text:000000000000C44A                 cdqe
.text:000000000000C44C                 jmp     short loc_C41B
.text:000000000000C44E ; ---------------------------------------------------------------------------
.text:000000000000C44E
.text:000000000000C44E loc_C44E:                               ; CODE XREF: printf_parse+6D4↑j
.text:000000000000C44E                 cmp     dil, 9
.text:000000000000C452                 ja      def_BAB5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000C458                 movsx   eax, cl
.text:000000000000C45B                 mov     rbp, rdx
.text:000000000000C45E                 mov     rcx, r8
.text:000000000000C461                 sub     eax, 30h ; '0'
.text:000000000000C464                 cdqe
.text:000000000000C466                 jmp     loc_BF29
.text:000000000000C46B ; ---------------------------------------------------------------------------
.text:000000000000C46B
.text:000000000000C46B loc_C46B:                               ; CODE XREF: printf_parse+43D↑j
.text:000000000000C46B                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000C470                 shl     rax, 5
.text:000000000000C474                 mov     rdi, rcx        ; dest
.text:000000000000C477                 mov     rdx, rax        ; n
.text:000000000000C47A                 mov     [rsp+88h+var_48], r9
.text:000000000000C47F                 mov     [rsp+88h+var_50], r10
.text:000000000000C484                 mov     [rsp+88h+var_58], r8
.text:000000000000C489                 call    _memcpy         ; PIC mode
.text:000000000000C48E                 mov     r9, [rsp+88h+var_48]
.text:000000000000C493                 mov     rcx, rax
.text:000000000000C496                 mov     r10, [rsp+88h+var_50]
.text:000000000000C49B                 mov     rax, [r15]
.text:000000000000C49E                 mov     r8, [rsp+88h+var_58]
.text:000000000000C4A3                 jmp     loc_BCB3
.text:000000000000C4A8 ; ---------------------------------------------------------------------------
.text:000000000000C4A8
.text:000000000000C4A8 loc_C4A8:                               ; CODE XREF: printf_parse+BC5↑j
.text:000000000000C4A8                 cmp     dil, 9
.text:000000000000C4AC                 jbe     loc_C3FA
.text:000000000000C4B2                 lea     rbx, [rdx-1]
.text:000000000000C4B6                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000C4BA                 ja      def_BAB5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000C4C0                 mov     [r12+40h], rbx
.text:000000000000C4C5                 lea     r11, [rsi+2]
.text:000000000000C4C9                 jmp     loc_BD5D
.text:000000000000C4CE ; ---------------------------------------------------------------------------
.text:000000000000C4CE
.text:000000000000C4CE loc_C4CE:                               ; CODE XREF: printf_parse+AA0↑j
.text:000000000000C4CE                 mov     rdi, rsi        ; size
.text:000000000000C4D1                 call    _malloc         ; PIC mode
.text:000000000000C4D6                 mov     rdx, [rsp+88h+src]
.text:000000000000C4DB                 mov     rcx, rax
.text:000000000000C4DE                 mov     r9, [rsp+88h+var_40]
.text:000000000000C4E3                 mov     r10, [rsp+88h+var_48]
.text:000000000000C4E8                 mov     r8, [rsp+88h+var_50]
.text:000000000000C4ED                 mov     r11, [rsp+88h+var_58]
.text:000000000000C4F2                 jmp     loc_C339
.text:000000000000C4F7 ; ---------------------------------------------------------------------------
.text:000000000000C4F7
.text:000000000000C4F7 loc_C4F7:                               ; CODE XREF: printf_parse+2DB↑j
.text:000000000000C4F7                                         ; printf_parse+2F1↑j ...
.text:000000000000C4F7                 mov     rcx, [r15+8]
.text:000000000000C4FB
.text:000000000000C4FB loc_C4FB:                               ; CODE XREF: printf_parse+3E7↑j
.text:000000000000C4FB                                         ; printf_parse+8AB↑j ...
.text:000000000000C4FB                 cmp     [rsp+88h+src], rcx
.text:000000000000C500                 jnz     loc_C364
.text:000000000000C506                 jmp     loc_C36C
.text:000000000000C506 ; ---------------------------------------------------------------------------
.text:000000000000C50B                 align 10h
.text:000000000000C510
.text:000000000000C510 loc_C510:                               ; CODE XREF: printf_parse+ADA↑j
.text:000000000000C510                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000C515                 shl     rax, 5
.text:000000000000C519                 mov     rdi, rcx        ; dest
.text:000000000000C51C                 mov     rdx, rax        ; n
.text:000000000000C51F                 mov     [rsp+88h+var_40], r9
.text:000000000000C524                 mov     [rsp+88h+var_48], r10
.text:000000000000C529                 mov     [rsp+88h+var_50], r8
.text:000000000000C52E                 mov     [rsp+88h+var_58], r11
.text:000000000000C533                 call    _memcpy         ; PIC mode
.text:000000000000C538                 mov     r9, [rsp+88h+var_40]
.text:000000000000C53D                 mov     rcx, rax
.text:000000000000C540                 mov     r10, [rsp+88h+var_48]
.text:000000000000C545                 mov     rax, [r15]
.text:000000000000C548                 mov     r8, [rsp+88h+var_50]
.text:000000000000C54D                 mov     r11, [rsp+88h+var_58]
.text:000000000000C552                 jmp     loc_C350
.text:000000000000C557 ; ---------------------------------------------------------------------------
.text:000000000000C557
.text:000000000000C557 loc_C557:                               ; CODE XREF: printf_parse+42F↑j
.text:000000000000C557                                         ; printf_parse+ACC↑j
.text:000000000000C557                 mov     rcx, rdx
.text:000000000000C55A                 jmp     short loc_C4FB
.text:000000000000C55A ; } // starts at B870
.text:000000000000C55A printf_parse    endp
.text:000000000000C55A
.text:000000000000C55A ; ---------------------------------------------------------------------------
.text:000000000000C55C                 align 20h
.text:000000000000C560
.text:000000000000C560 ; =============== S U B R O U T I N E =======================================
.text:000000000000C560
.text:000000000000C560 ; Attributes: info_from_lumina
.text:000000000000C560
.text:000000000000C560 ; void _libc_csu_init(void)
.text:000000000000C560                 public __libc_csu_init
.text:000000000000C560 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000C560 ; __unwind {
.text:000000000000C560                 push    r15
.text:000000000000C562                 push    r14
.text:000000000000C564                 mov     r15, rdx
.text:000000000000C567                 push    r13
.text:000000000000C569                 push    r12
.text:000000000000C56B                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000C572                 push    rbp
.text:000000000000C573                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000C57A                 push    rbx
.text:000000000000C57B                 mov     r13d, edi
.text:000000000000C57E                 mov     r14, rsi
.text:000000000000C581                 sub     rbp, r12
.text:000000000000C584                 sub     rsp, 8
.text:000000000000C588                 sar     rbp, 3
.text:000000000000C58C                 call    _init_proc
.text:000000000000C591                 test    rbp, rbp
.text:000000000000C594                 jz      short loc_C5B6
.text:000000000000C596                 xor     ebx, ebx
.text:000000000000C598                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000C5A0
.text:000000000000C5A0 loc_C5A0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000C5A0                 mov     rdx, r15
.text:000000000000C5A3                 mov     rsi, r14
.text:000000000000C5A6                 mov     edi, r13d
.text:000000000000C5A9                 call    ds:(__frame_dummy_init_array_entry - 210A90h)[r12+rbx*8]
.text:000000000000C5AD                 add     rbx, 1
.text:000000000000C5B1                 cmp     rbp, rbx
.text:000000000000C5B4                 jnz     short loc_C5A0
.text:000000000000C5B6
.text:000000000000C5B6 loc_C5B6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000C5B6                 add     rsp, 8
.text:000000000000C5BA                 pop     rbx
.text:000000000000C5BB                 pop     rbp
.text:000000000000C5BC                 pop     r12
.text:000000000000C5BE                 pop     r13
.text:000000000000C5C0                 pop     r14
.text:000000000000C5C2                 pop     r15
.text:000000000000C5C4                 retn
.text:000000000000C5C4 ; } // starts at C560
.text:000000000000C5C4 __libc_csu_init endp
.text:000000000000C5C4
.text:000000000000C5C4 ; ---------------------------------------------------------------------------
.text:000000000000C5C5                 align 10h
.text:000000000000C5D0
.text:000000000000C5D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C5D0
.text:000000000000C5D0
.text:000000000000C5D0 ; void _libc_csu_fini(void)
.text:000000000000C5D0                 public __libc_csu_fini
.text:000000000000C5D0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000C5D0 ; __unwind {
.text:000000000000C5D0                 rep retn
.text:000000000000C5D0 ; } // starts at C5D0
.text:000000000000C5D0 __libc_csu_fini endp
.text:000000000000C5D0
.text:000000000000C5D0 ; ---------------------------------------------------------------------------
.text:000000000000C5D2                 align 20h
.text:000000000000C5E0
.text:000000000000C5E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C5E0
.text:000000000000C5E0
.text:000000000000C5E0 atexit          proc near               ; CODE XREF: main+1B5↑p
.text:000000000000C5E0 ; __unwind {
.text:000000000000C5E0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000C5E7                 xor     esi, esi        ; obj
.text:000000000000C5E9                 jmp     ___cxa_atexit
.text:000000000000C5E9 ; } // starts at C5E0
.text:000000000000C5E9 atexit          endp
.text:000000000000C5E9
.text:000000000000C5E9 _text           ends
.text:000000000000C5E9
LOAD:000000000000C5EE ; ===========================================================================
LOAD:000000000000C5EE
LOAD:000000000000C5EE ; Segment type: Pure code
LOAD:000000000000C5EE ; Segment permissions: Read/Execute
LOAD:000000000000C5EE LOAD            segment byte public 'CODE' use64
LOAD:000000000000C5EE                 assume cs:LOAD
LOAD:000000000000C5EE                 ;org 0C5EEh
LOAD:000000000000C5EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000C5EE                 align 10h
LOAD:000000000000C5EE LOAD            ends
LOAD:000000000000C5EE
.fini:000000000000C5F0 ; ===========================================================================
.fini:000000000000C5F0
.fini:000000000000C5F0 ; Segment type: Pure code
.fini:000000000000C5F0 ; Segment permissions: Read/Execute
.fini:000000000000C5F0 _fini           segment dword public 'CODE' use64
.fini:000000000000C5F0                 assume cs:_fini
.fini:000000000000C5F0                 ;org 0C5F0h
.fini:000000000000C5F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000C5F0
.fini:000000000000C5F0 ; =============== S U B R O U T I N E =======================================
.fini:000000000000C5F0
.fini:000000000000C5F0
.fini:000000000000C5F0                 public _term_proc
.fini:000000000000C5F0 _term_proc      proc near
.fini:000000000000C5F0                 sub     rsp, 8          ; _fini
.fini:000000000000C5F4                 add     rsp, 8
.fini:000000000000C5F8                 retn
.fini:000000000000C5F8 _term_proc      endp
.fini:000000000000C5F8
.fini:000000000000C5F8 _fini           ends
.fini:000000000000C5F8
LOAD:000000000000C5F9 ; ===========================================================================
LOAD:000000000000C5F9
LOAD:000000000000C5F9 ; Segment type: Pure code
LOAD:000000000000C5F9 ; Segment permissions: Read/Execute
LOAD:000000000000C5F9 LOAD            segment byte public 'CODE' use64
LOAD:000000000000C5F9                 assume cs:LOAD
LOAD:000000000000C5F9                 ;org 0C5F9h
LOAD:000000000000C5F9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000C5F9                 align 20h
LOAD:000000000000C5F9 LOAD            ends
LOAD:000000000000C5F9
.rodata:000000000000C600 ; ===========================================================================
.rodata:000000000000C600
.rodata:000000000000C600 ; Segment type: Pure data
.rodata:000000000000C600 ; Segment permissions: Read
.rodata:000000000000C600 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000C600                 assume cs:_rodata
.rodata:000000000000C600                 ;org 0C600h
.rodata:000000000000C600                 public _IO_stdin_used
.rodata:000000000000C600 _IO_stdin_used  db    1
.rodata:000000000000C601                 db    0
.rodata:000000000000C602                 db    2
.rodata:000000000000C603                 db    0
.rodata:000000000000C604 a0fS            db '%.0f s',0           ; DATA XREF: print_xfer_stats+242↑o
.rodata:000000000000C604                                         ; print_xfer_stats+370↑o
.rodata:000000000000C60B aGS             db '%g s',0             ; DATA XREF: print_xfer_stats+F2↑o
.rodata:000000000000C60B                                         ; print_xfer_stats+21C↑o
.rodata:000000000000C610 ; const char aInfinity[]
.rodata:000000000000C610 aInfinity       db 'Infinity',0         ; DATA XREF: print_xfer_stats:loc_3F88↑o
.rodata:000000000000C619 aSBS            db '%s B/s',0           ; DATA XREF: print_xfer_stats+1F2↑o
.rodata:000000000000C620 ; const char msgid2[]
.rodata:000000000000C620 msgid2          db '%lu bytes copied, %s, %s',0
.rodata:000000000000C620                                         ; DATA XREF: print_xfer_stats+2B7↑o
.rodata:000000000000C639 ; const char msgid1[]
.rodata:000000000000C639 msgid1          db '%lu byte copied, %s, %s',0
.rodata:000000000000C639                                         ; DATA XREF: print_xfer_stats+2BE↑o
.rodata:000000000000C651 ; const char aLuBytesSCopied[]
.rodata:000000000000C651 aLuBytesSCopied db '%lu bytes (%s) copied, %s, %s',0
.rodata:000000000000C651                                         ; DATA XREF: print_xfer_stats:loc_4040↑o
.rodata:000000000000C66F aS              db '%*s',0              ; DATA XREF: print_xfer_stats+336↑o
.rodata:000000000000C673 aBcegkkmptwyz0  db 'bcEGkKMPTwYZ0',0    ; DATA XREF: parse_integer+4↑o
.rodata:000000000000C681 a00x            db '00x',0              ; DATA XREF: parse_integer:loc_4341↑o
.rodata:000000000000C681                                         ; parse_integer+CA↑o
.rodata:000000000000C685 ; const char aSettingFlagsFo[]
.rodata:000000000000C685 aSettingFlagsFo db 'setting flags for %s',0
.rodata:000000000000C685                                         ; DATA XREF: set_fd_flags+C5↑o
.rodata:000000000000C69A ; const char aLuTruncatedRec[]
.rodata:000000000000C69A aLuTruncatedRec db '%lu truncated records',0Ah,0
.rodata:000000000000C69A                                         ; DATA XREF: print_stats_part_2:loc_4840↑o
.rodata:000000000000C6B1 ; const char aLuTruncatedRec_0[]
.rodata:000000000000C6B1 aLuTruncatedRec_0 db '%lu truncated record',0Ah,0
.rodata:000000000000C6B1                                         ; DATA XREF: print_stats_part_2+D7↑o
.rodata:000000000000C6C7 ; const char aClosingInputFi[]
.rodata:000000000000C6C7 aClosingInputFi db 'closing input file %s',0
.rodata:000000000000C6C7                                         ; DATA XREF: cleanup+37↑o
.rodata:000000000000C6DD ; const char aClosingOutputF[]
.rodata:000000000000C6DD aClosingOutputF db 'closing output file %s',0
.rodata:000000000000C6DD                                         ; DATA XREF: cleanup+7A↑o
.rodata:000000000000C6F4 aDd             db 'dd',0               ; DATA XREF: main+1E3↑o
.rodata:000000000000C6F4                                         ; usage+3AD↑o ...
.rodata:000000000000C6F7 aUsr1           db 'USR1',0             ; DATA XREF: usage+352↑o
.rodata:000000000000C6FC asc_C6FC        db '[',0                ; DATA XREF: usage+3B9↑o
.rodata:000000000000C6FE aTestInvocation db 'test invocation',0  ; DATA XREF: usage+3E0↑o
.rodata:000000000000C70E aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000C70E                                         ; DATA XREF: usage+410↑o
.rodata:000000000000C70E                                         ; usage+50C↑o ...
.rodata:000000000000C724 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+421↑o
.rodata:000000000000C72E aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+42D↑o
.rodata:000000000000C73D aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+3C0↑o
.rodata:000000000000C747 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+3EC↑o
.rodata:000000000000C751 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+404↑o
.rodata:000000000000C75B ; const char aSOnlineHelpS[]
.rodata:000000000000C75B aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+47A↑o
.rodata:000000000000C75B                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000C772 unk_C772        db  47h ; G             ; DATA XREF: usage+496↑o
.rodata:000000000000C772                                         ; usage+557↑o ...
.rodata:000000000000C773                 db  4Eh ; N
.rodata:000000000000C774                 db  55h ; U
.rodata:000000000000C775                 db  20h
.rodata:000000000000C776 ; const char domainname[]
.rodata:000000000000C776 domainname      db 'coreutils',0        ; DATA XREF: main+196↑o
.rodata:000000000000C776                                         ; main+1A2↑o ...
.rodata:000000000000C780 ; const char s2[]
.rodata:000000000000C780 s2              db 'en_',0              ; DATA XREF: usage+4BD↑o
.rodata:000000000000C780                                         ; usage+57E↑o
.rodata:000000000000C784 ; const char aFullDocumentat[]
.rodata:000000000000C784 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000C784                                         ; DATA XREF: usage:loc_5509↑o
.rodata:000000000000C784                                         ; usage:loc_55C6↑o
.rodata:000000000000C79F ; const char format[]
.rodata:000000000000C79F format          db '%s: %s',0           ; DATA XREF: main+1786↑o
.rodata:000000000000C79F                                         ; main+1CF5↑o ...
.rodata:000000000000C7A6 ; const char aCannotFstatS[]
.rodata:000000000000C7A6 aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: main+1A1B↑o
.rodata:000000000000C7A6                                         ; main+1CA4↑o ...
.rodata:000000000000C7B6 unk_C7B6        db  25h ; %             ; DATA XREF: skip+1E6↑o
.rodata:000000000000C7B7                 db  73h ; s
.rodata:000000000000C7B8                 db  3Ah ; :
.rodata:000000000000C7B9                 db  20h
.rodata:000000000000C7BA                 db  63h ; c
.rodata:000000000000C7BB                 db  61h ; a
.rodata:000000000000C7BC                 db  6Eh ; n
.rodata:000000000000C7BD                 db  6Eh ; n
.rodata:000000000000C7BE                 db  6Fh ; o
.rodata:000000000000C7BF                 db  74h ; t
.rodata:000000000000C7C0                 db  20h
.rodata:000000000000C7C1 aSkip           db 'skip',0             ; DATA XREF: main+1B35↑o
.rodata:000000000000C7C6 ; const char aSCannotSeek[]
.rodata:000000000000C7C6 aSCannotSeek    db '%s: cannot seek',0  ; DATA XREF: main+E3A↑o
.rodata:000000000000C7C6                                         ; skip+2DE↑o ...
.rodata:000000000000C7D6 ; const char aErrorReadingS[]
.rodata:000000000000C7D6 aErrorReadingS  db 'error reading %s',0 ; DATA XREF: main+DA6↑o
.rodata:000000000000C7D6                                         ; skip+280↑o
.rodata:000000000000C7E7 ; const char aWritingToS[]
.rodata:000000000000C7E7 aWritingToS     db 'writing to %s',0    ; DATA XREF: main+1ABB↑o
.rodata:000000000000C7E7                                         ; write_output+53↑o
.rodata:000000000000C7F5 aIf             db 'if',0               ; DATA XREF: main+29D↑o
.rodata:000000000000C7F8 aOf             db 'of',0               ; DATA XREF: main:loc_28B0↑o
.rodata:000000000000C7FB aConv           db 'conv',0             ; DATA XREF: main:loc_28F0↑o
.rodata:000000000000C800 aIflag          db 'iflag',0            ; DATA XREF: main:loc_2941↑o
.rodata:000000000000C806 aOflag          db 'oflag',0            ; DATA XREF: main:loc_2992↑o
.rodata:000000000000C80C aStatus         db 'status',0           ; DATA XREF: main:loc_2B55↑o
.rodata:000000000000C813 aIbs            db 'ibs',0              ; DATA XREF: main+1522↑o
.rodata:000000000000C817 aObs            db 'obs',0              ; DATA XREF: main:loc_33FA↑o
.rodata:000000000000C81B aCbs            db 'cbs',0              ; DATA XREF: main+1B0A↑o
.rodata:000000000000C81B                                         ; main+158B↑o
.rodata:000000000000C81F aCount          db 'count',0            ; DATA XREF: main:loc_3864↑o
.rodata:000000000000C825 aCountBytes     db 'count_bytes',0      ; DATA XREF: main:loc_3C30↑o
.rodata:000000000000C831 aSkipBytes      db 'skip_bytes',0       ; DATA XREF: main+1D87↑o
.rodata:000000000000C83C ; const char name[]
.rodata:000000000000C83C name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+D↑o
.rodata:000000000000C83C                                         ; human_options+10D↑o ...
.rodata:000000000000C84C ; const char dirname[]
.rodata:000000000000C84C dirname         db '/usr/local/share/locale',0
.rodata:000000000000C84C                                         ; DATA XREF: main+18F↑o
.rodata:000000000000C864 aStuartKemp     db 'Stuart Kemp',0      ; DATA XREF: main+1D3↑o
.rodata:000000000000C870 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+1F1↑o
.rodata:000000000000C880 aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: main+1FF↑o
.rodata:000000000000C88B ; const char aUnrecognizedOp[]
.rodata:000000000000C88B aUnrecognizedOp db 'unrecognized operand %s',0
.rodata:000000000000C88B                                         ; DATA XREF: main+1A79↑o
.rodata:000000000000C8A3 aInvalidConvers db 'invalid conversion',0
.rodata:000000000000C8A3                                         ; DATA XREF: main:loc_291E↑o
.rodata:000000000000C8A3                                         ; .data.rel.ro:0000000000210AE0↓o
.rodata:000000000000C8B6 aInvalidInputFl db 'invalid input flag',0
.rodata:000000000000C8B6                                         ; DATA XREF: main:loc_296F↑o
.rodata:000000000000C8B6                                         ; main+1DC3↑o
.rodata:000000000000C8C9 ; const char aInvalidOutputF[]
.rodata:000000000000C8C9 aInvalidOutputF db 'invalid output flag',0
.rodata:000000000000C8C9                                         ; DATA XREF: main:loc_29CF↑o
.rodata:000000000000C8C9                                         ; main+1CDF↑o ...
.rodata:000000000000C8DD aInvalidStatusL db 'invalid status level',0
.rodata:000000000000C8DD                                         ; DATA XREF: main:loc_2B8B↑o
.rodata:000000000000C8F2 aFullblock      db 'fullblock',0        ; DATA XREF: main:loc_3B83↑o
.rodata:000000000000C8FC aSeekBytes      db 'seek_bytes',0       ; DATA XREF: main:loc_3C5F↑o
.rodata:000000000000C907 ; const char aStandardInput[]
.rodata:000000000000C907 aStandardInput  db 'standard input',0   ; DATA XREF: main:loc_3235↑o
.rodata:000000000000C916 ; const char aFailedToOpenS[]
.rodata:000000000000C916 aFailedToOpenS  db 'failed to open %s',0
.rodata:000000000000C916                                         ; DATA XREF: main+1C3A↑o
.rodata:000000000000C916                                         ; main+1D2D↑o
.rodata:000000000000C928 ; const char aStandardOutput[]
.rodata:000000000000C928 aStandardOutput db 'standard output',0  ; DATA XREF: main:loc_3590↑o
.rodata:000000000000C938 ; const char aErrorWritingS[]
.rodata:000000000000C938 aErrorWritingS  db 'error writing %s',0 ; DATA XREF: main+1023↑o
.rodata:000000000000C949 ; const char aFdatasyncFaile[]
.rodata:000000000000C949 aFdatasyncFaile db 'fdatasync failed for %s',0
.rodata:000000000000C949                                         ; DATA XREF: main+1A38↑o
.rodata:000000000000C961 aFsyncFailedFor db 'fsync failed for %s',0
.rodata:000000000000C961                                         ; DATA XREF: main+1348↑o
.rodata:000000000000C975 ; const char aInvalidNumber[]
.rodata:000000000000C975 aInvalidNumber  db 'invalid number',0   ; DATA XREF: main+1753↑o
.rodata:000000000000C984                 align 8
.rodata:000000000000C988 ; const char aLuBytesSSCopie[]
.rodata:000000000000C988 aLuBytesSSCopie db '%lu bytes (%s, %s) copied, %s, %s',0
.rodata:000000000000C988                                         ; DATA XREF: print_xfer_stats+157↑o
.rodata:000000000000C9AA                 align 10h
.rodata:000000000000C9B0 ; const char aWarningSIsAZer[]
.rodata:000000000000C9B0 aWarningSIsAZer db 'warning: %s is a zero multiplier; use %s if that is intended',0
.rodata:000000000000C9B0                                         ; DATA XREF: parse_integer+10F↑o
.rodata:000000000000C9ED                 align 10h
.rodata:000000000000C9F0 ; const char aWarningWorking[]
.rodata:000000000000C9F0 aWarningWorking db 'warning: working around lseek kernel bug for file (%s)',0Ah
.rodata:000000000000C9F0                                         ; DATA XREF: skip_via_lseek+B6↑o
.rodata:000000000000C9F0                 db '  of mt_type=0x%0lx -- see <sys/mtio.h> for the list of types',0
.rodata:000000000000CA65                 align 8
.rodata:000000000000CA68 ; const char aLuLuRecordsInL[]
.rodata:000000000000CA68 aLuLuRecordsInL db '%lu+%lu records in',0Ah
.rodata:000000000000CA68                                         ; DATA XREF: print_stats_part_2+45↑o
.rodata:000000000000CA68                 db '%lu+%lu records out',0Ah,0
.rodata:000000000000CA90 ; const char aWarningPartial[]
.rodata:000000000000CA90 aWarningPartial db 'warning: partial read (%lu bytes); suggest iflag=fullblock',0
.rodata:000000000000CA90                                         ; DATA XREF: iread+BF↑o
.rodata:000000000000CACB                 align 10h
.rodata:000000000000CAD0 ; const char aWarningPartial_0[]
.rodata:000000000000CAD0 aWarningPartial_0 db 'warning: partial read (%lu byte); suggest iflag=fullblock',0
.rodata:000000000000CAD0                                         ; DATA XREF: iread+C6↑o
.rodata:000000000000CB0A                 align 10h
.rodata:000000000000CB10 ; const char aMemoryExhauste[]
.rodata:000000000000CB10 aMemoryExhauste db 'memory exhausted by input buffer of size %lu bytes (%s)',0
.rodata:000000000000CB10                                         ; DATA XREF: alloc_ibuf_part_4+88↑o
.rodata:000000000000CB48 ; const char aMemoryExhauste_0[]
.rodata:000000000000CB48 aMemoryExhauste_0 db 'memory exhausted by output buffer of size %lu bytes (%s)',0
.rodata:000000000000CB48                                         ; DATA XREF: alloc_obuf_part_5+88↑o
.rodata:000000000000CB81                 align 8
.rodata:000000000000CB88 ; const char aFailedToTurnOf[]
.rodata:000000000000CB88 aFailedToTurnOf db 'failed to turn off O_DIRECT: %s',0
.rodata:000000000000CB88                                         ; DATA XREF: iwrite_constprop_7+1C9↑o
.rodata:000000000000CBA8 ; const char aTrySHelpForMor[]
.rodata:000000000000CBA8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000CBA8                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000CBCF                 align 10h
.rodata:000000000000CBD0 ; const char aUsageSOperandO[]
.rodata:000000000000CBD0 aUsageSOperandO db 'Usage: %s [OPERAND]...',0Ah
.rodata:000000000000CBD0                                         ; DATA XREF: usage:loc_508D↑o
.rodata:000000000000CBD0                 db '  or:  %s OPTION',0Ah,0
.rodata:000000000000CBF9                 align 20h
.rodata:000000000000CC00 ; const char aCopyAFileConve[]
.rodata:000000000000CC00 aCopyAFileConve db 'Copy a file, converting and formatting according to the operands.'
.rodata:000000000000CC00                                         ; DATA XREF: usage+87↑o
.rodata:000000000000CC00                 db 0Ah
.rodata:000000000000CC00                 db 0Ah
.rodata:000000000000CC00                 db '  bs=BYTES        read and write up to BYTES bytes at a time (def'
.rodata:000000000000CC00                 db 'ault: 512);',0Ah
.rodata:000000000000CC00                 db '                  overrides ibs and obs',0Ah
.rodata:000000000000CC00                 db '  cbs=BYTES       convert BYTES bytes at a time',0Ah
.rodata:000000000000CC00                 db '  conv=CONVS      convert the file as per the comma separated sym'
.rodata:000000000000CC00                 db 'bol list',0Ah
.rodata:000000000000CC00                 db '  count=N         copy only N input blocks',0Ah
.rodata:000000000000CC00                 db '  ibs=BYTES       read up to BYTES bytes at a time (default: 512)'
.rodata:000000000000CC00                 db 0Ah,0
.rodata:000000000000CDA0 ; const char aIfFileReadFrom[]
.rodata:000000000000CDA0 aIfFileReadFrom db '  if=FILE         read from FILE instead of stdin',0Ah
.rodata:000000000000CDA0                                         ; DATA XREF: usage+AC↑o
.rodata:000000000000CDA0                 db '  iflag=FLAGS     read as per the comma separated symbol list',0Ah
.rodata:000000000000CDA0                 db '  obs=BYTES       write BYTES bytes at a time (default: 512)',0Ah
.rodata:000000000000CDA0                 db '  of=FILE         write to FILE instead of stdout',0Ah
.rodata:000000000000CDA0                 db '  oflag=FLAGS     write as per the comma separated symbol list',0Ah
.rodata:000000000000CDA0                 db '  seek=N          skip N obs-sized blocks at start of output',0Ah
.rodata:000000000000CDA0                 db '  skip=N          skip N ibs-sized blocks at start of input',0Ah
.rodata:000000000000CDA0                 db '  status=LEVEL    The LEVEL of information to print to stderr;',0Ah
.rodata:000000000000CDA0                 db '                  ',27h,'none',27h,' suppresses everything but er'
.rodata:000000000000CDA0                 db 'ror messages,',0Ah
.rodata:000000000000CDA0                 db '                  ',27h,'noxfer',27h,' suppresses the final trans'
.rodata:000000000000CDA0                 db 'fer statistics,',0Ah
.rodata:000000000000CDA0                 db '                  ',27h,'progress',27h,' shows periodic transfer '
.rodata:000000000000CDA0                 db 'statistics',0Ah,0
.rodata:000000000000D03F                 align 20h
.rodata:000000000000D040 ; const char aNAndBytesMayBe[]
.rodata:000000000000D040 aNAndBytesMayBe db 0Ah                  ; DATA XREF: usage+D1↑o
.rodata:000000000000D040                 db 'N and BYTES may be followed by the following multiplicative suffi'
.rodata:000000000000D040                 db 'xes:',0Ah
.rodata:000000000000D040                 db 'c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, xM=M'
.rodata:000000000000D040                 db ',',0Ah
.rodata:000000000000D040                 db 'GB=1000*1000*1000, G=1024*1024*1024, and so on for T, P, E, Z, Y.'
.rodata:000000000000D040                 db 0Ah
.rodata:000000000000D040                 db 'Binary prefixes can be used, too: KiB=K, MiB=M, and so on.',0Ah
.rodata:000000000000D040                 db 0Ah
.rodata:000000000000D040                 db 'Each CONV symbol may be:',0Ah
.rodata:000000000000D040                 db 0Ah,0
.rodata:000000000000D163                 align 8
.rodata:000000000000D168 ; const char aAsciiFromEbcdi[]
.rodata:000000000000D168 aAsciiFromEbcdi db '  ascii     from EBCDIC to ASCII',0Ah
.rodata:000000000000D168                                         ; DATA XREF: usage+F6↑o
.rodata:000000000000D168                 db '  ebcdic    from ASCII to EBCDIC',0Ah
.rodata:000000000000D168                 db '  ibm       from ASCII to alternate EBCDIC',0Ah
.rodata:000000000000D168                 db '  block     pad newline-terminated records with spaces to cbs-siz'
.rodata:000000000000D168                 db 'e',0Ah
.rodata:000000000000D168                 db '  unblock   replace trailing spaces in cbs-size records with newl'
.rodata:000000000000D168                 db 'ine',0Ah
.rodata:000000000000D168                 db '  lcase     change upper case to lower case',0Ah
.rodata:000000000000D168                 db '  ucase     change lower case to upper case',0Ah
.rodata:000000000000D168                 db '  sparse    try to seek rather than write the output for NUL inpu'
.rodata:000000000000D168                 db 't blocks',0Ah
.rodata:000000000000D168                 db '  swab      swap every pair of input bytes',0Ah
.rodata:000000000000D168                 db '  sync      pad every input block with NULs to ibs-size; when use'
.rodata:000000000000D168                 db 'd',0Ah
.rodata:000000000000D168                 db '            with block or unblock, pad with spaces rather than NU'
.rodata:000000000000D168                 db 'Ls',0Ah,0
.rodata:000000000000D3B2                 align 8
.rodata:000000000000D3B8 ; const char aExclFailIfTheO[]
.rodata:000000000000D3B8 aExclFailIfTheO db '  excl      fail if the output file already exists',0Ah
.rodata:000000000000D3B8                                         ; DATA XREF: usage+11B↑o
.rodata:000000000000D3B8                 db '  nocreat   do not create the output file',0Ah
.rodata:000000000000D3B8                 db '  notrunc   do not truncate the output file',0Ah
.rodata:000000000000D3B8                 db '  noerror   continue after read errors',0Ah
.rodata:000000000000D3B8                 db '  fdatasync  physically write output file data before finishing',0Ah
.rodata:000000000000D3B8                 db '  fsync     likewise, but also write metadata',0Ah,0
.rodata:000000000000D4D7                 align 8
.rodata:000000000000D4D8 ; const char aEachFlagSymbol[]
.rodata:000000000000D4D8 aEachFlagSymbol db 0Ah                  ; DATA XREF: usage+140↑o
.rodata:000000000000D4D8                 db 'Each FLAG symbol may be:',0Ah
.rodata:000000000000D4D8                 db 0Ah
.rodata:000000000000D4D8                 db '  append    append mode (makes sense only for output; conv=notrun'
.rodata:000000000000D4D8                 db 'c suggested)',0Ah,0
.rodata:000000000000D542                 align 8
.rodata:000000000000D548 ; const char aDirectUseDirec[]
.rodata:000000000000D548 aDirectUseDirec db '  direct    use direct I/O for data',0Ah,0
.rodata:000000000000D548                                         ; DATA XREF: usage+165↑o
.rodata:000000000000D56D                 align 10h
.rodata:000000000000D570 ; const char aDirectoryFailU[]
.rodata:000000000000D570 aDirectoryFailU db '  directory  fail unless a directory',0Ah,0
.rodata:000000000000D570                                         ; DATA XREF: usage+18A↑o
.rodata:000000000000D596                 align 8
.rodata:000000000000D598 ; const char aDsyncUseSynchr[]
.rodata:000000000000D598 aDsyncUseSynchr db '  dsync     use synchronized I/O for data',0Ah,0
.rodata:000000000000D598                                         ; DATA XREF: usage+1AF↑o
.rodata:000000000000D5C3                 align 8
.rodata:000000000000D5C8 ; const char aSyncLikewiseBu[]
.rodata:000000000000D5C8 aSyncLikewiseBu db '  sync      likewise, but also for metadata',0Ah,0
.rodata:000000000000D5C8                                         ; DATA XREF: usage+1D4↑o
.rodata:000000000000D5F5                 align 8
.rodata:000000000000D5F8 ; const char aFullblockAccum[]
.rodata:000000000000D5F8 aFullblockAccum db '  fullblock  accumulate full blocks of input (iflag only)',0Ah,0
.rodata:000000000000D5F8                                         ; DATA XREF: usage+1F9↑o
.rodata:000000000000D633                 align 8
.rodata:000000000000D638 ; const char aNonblockUseNon[]
.rodata:000000000000D638 aNonblockUseNon db '  nonblock  use non-blocking I/O',0Ah,0
.rodata:000000000000D638                                         ; DATA XREF: usage+21E↑o
.rodata:000000000000D65A                 align 20h
.rodata:000000000000D660 ; const char aNoatimeDoNotUp[]
.rodata:000000000000D660 aNoatimeDoNotUp db '  noatime   do not update access time',0Ah,0
.rodata:000000000000D660                                         ; DATA XREF: usage+243↑o
.rodata:000000000000D687                 align 8
.rodata:000000000000D688 ; const char aNocacheRequest[]
.rodata:000000000000D688 aNocacheRequest db '  nocache   Request to drop cache.  See also oflag=sync',0Ah,0
.rodata:000000000000D688                                         ; DATA XREF: usage+268↑o
.rodata:000000000000D6C1                 align 8
.rodata:000000000000D6C8 ; const char aNocttyDoNotAss[]
.rodata:000000000000D6C8 aNocttyDoNotAss db '  noctty    do not assign controlling terminal from file',0Ah,0
.rodata:000000000000D6C8                                         ; DATA XREF: usage+28D↑o
.rodata:000000000000D702                 align 8
.rodata:000000000000D708 ; const char aNofollowDoNotF[]
.rodata:000000000000D708 aNofollowDoNotF db '  nofollow  do not follow symlinks',0Ah,0
.rodata:000000000000D708                                         ; DATA XREF: usage+2B2↑o
.rodata:000000000000D72C                 align 10h
.rodata:000000000000D730 ; const char aCountBytesTrea[]
.rodata:000000000000D730 aCountBytesTrea db '  count_bytes  treat ',27h,'count=N',27h,' as a byte count (iflag'
.rodata:000000000000D730                                         ; DATA XREF: usage+2D7↑o
.rodata:000000000000D730                 db ' only)',0Ah,0
.rodata:000000000000D76D                 align 10h
.rodata:000000000000D770 ; const char aSkipBytesTreat[]
.rodata:000000000000D770 aSkipBytesTreat db '  skip_bytes  treat ',27h,'skip=N',27h,' as a byte count (iflag o'
.rodata:000000000000D770                                         ; DATA XREF: usage+2FC↑o
.rodata:000000000000D770                 db 'nly)',0Ah,0
.rodata:000000000000D7AB                 align 10h
.rodata:000000000000D7B0 ; const char aSeekBytesTreat[]
.rodata:000000000000D7B0 aSeekBytesTreat db '  seek_bytes  treat ',27h,'seek=N',27h,' as a byte count (oflag o'
.rodata:000000000000D7B0                                         ; DATA XREF: usage+321↑o
.rodata:000000000000D7B0                 db 'nly)',0Ah,0
.rodata:000000000000D7EB                 align 10h
.rodata:000000000000D7F0 ; const char aSendingASSigna[]
.rodata:000000000000D7F0 aSendingASSigna db 0Ah                  ; DATA XREF: usage+33F↑o
.rodata:000000000000D7F0                 db 'Sending a %s signal to a running ',27h,'dd',27h,' process makes i'
.rodata:000000000000D7F0                 db 't',0Ah
.rodata:000000000000D7F0                 db 'print I/O statistics to standard error and then resume copying.',0Ah
.rodata:000000000000D7F0                 db 0Ah
.rodata:000000000000D7F0                 db 'Options are:',0Ah
.rodata:000000000000D7F0                 db 0Ah,0
.rodata:000000000000D878 ; const char aHelpDisplayThi[]
.rodata:000000000000D878 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000D878                                         ; DATA XREF: usage+36F↑o
.rodata:000000000000D8A5                 align 8
.rodata:000000000000D8A8 ; const char aVersionOutputV[]
.rodata:000000000000D8A8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000D8A8                                         ; DATA XREF: usage+394↑o
.rodata:000000000000D8DE                 align 20h
.rodata:000000000000D8E0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000D8E0                                         ; DATA XREF: usage+48F↑o
.rodata:000000000000D8E0                                         ; usage+4F3↑o ...
.rodata:000000000000D908 ; const char aReportAnyTrans[]
.rodata:000000000000D908 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000D908                                         ; DATA XREF: usage+5E7↑o
.rodata:000000000000D908                 db 'am/>',0Ah,0
.rodata:000000000000D94F                 align 10h
.rodata:000000000000D950 ; const char aOrAvailableLoc[]
.rodata:000000000000D950 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000D950                                         ; DATA XREF: usage:loc_554E↑o
.rodata:000000000000D983                 align 8
.rodata:000000000000D988 ; const char aCannotCombineA[]
.rodata:000000000000D988 aCannotCombineA db 'cannot combine any two of {ascii,ebcdic,ibm}',0
.rodata:000000000000D988                                         ; DATA XREF: main:loc_3C0C↑o
.rodata:000000000000D9B5                 align 8
.rodata:000000000000D9B8 ; const char aCannotCombineB[]
.rodata:000000000000D9B8 aCannotCombineB db 'cannot combine block and unblock',0
.rodata:000000000000D9B8                                         ; DATA XREF: main:loc_3A37↑o
.rodata:000000000000D9D9                 align 20h
.rodata:000000000000D9E0 ; const char aCannotCombineL[]
.rodata:000000000000D9E0 aCannotCombineL db 'cannot combine lcase and ucase',0
.rodata:000000000000D9E0                                         ; DATA XREF: main:loc_3A5B↑o
.rodata:000000000000D9FF                 align 20h
.rodata:000000000000DA00 ; const char aCannotCombineE[]
.rodata:000000000000DA00 aCannotCombineE db 'cannot combine excl and nocreat',0
.rodata:000000000000DA00                                         ; DATA XREF: main:loc_3A91↑o
.rodata:000000000000DA20 ; const char aCannotCombineD[]
.rodata:000000000000DA20 aCannotCombineD db 'cannot combine direct and nocache',0
.rodata:000000000000DA20                                         ; DATA XREF: main:loc_3AB5↑o
.rodata:000000000000DA42                 align 8
.rodata:000000000000DA48 ; const char aOffsetTooLarge[]
.rodata:000000000000DA48 aOffsetTooLarge db 'offset too large: cannot truncate to a length of seek=%lu (%lu-by'
.rodata:000000000000DA48                                         ; DATA XREF: main:loc_3B19↑o
.rodata:000000000000DA48                 db 'te) blocks',0
.rodata:000000000000DA94                 align 8
.rodata:000000000000DA98 ; const char aFailedToTrunca[]
.rodata:000000000000DA98 aFailedToTrunca db 'failed to truncate to %lu bytes in output file %s',0
.rodata:000000000000DA98                                         ; DATA XREF: main+166A↑o
.rodata:000000000000DACA                 align 10h
.rodata:000000000000DAD0 ; const char msgid[]
.rodata:000000000000DAD0 msgid           db '%s: cannot skip to specified offset',0
.rodata:000000000000DAD0                                         ; DATA XREF: main+C79↑o
.rodata:000000000000DAF4                 align 8
.rodata:000000000000DAF8 ; const char aOffsetOverflow[]
.rodata:000000000000DAF8 aOffsetOverflow db 'offset overflow while reading file %s',0
.rodata:000000000000DAF8                                         ; DATA XREF: main+FCB↑o
.rodata:000000000000DB1E                 align 20h
.rodata:000000000000DB20 ; const char aWarningInvalid[]
.rodata:000000000000DB20 aWarningInvalid db 'warning: invalid file offset after failed read',0
.rodata:000000000000DB20                                         ; DATA XREF: main+16A4↑o
.rodata:000000000000DB4F                 align 10h
.rodata:000000000000DB50 ; const char aCannotWorkArou[]
.rodata:000000000000DB50 aCannotWorkArou db 'cannot work around kernel bug after all',0
.rodata:000000000000DB50                                         ; DATA XREF: main+11E6↑o
.rodata:000000000000DB78 ; const char aFailedToTrunca_0[]
.rodata:000000000000DB78 aFailedToTrunca_0 db 'failed to truncate to %ld bytes in output file %s',0
.rodata:000000000000DB78                                         ; DATA XREF: main+1883↑o
.rodata:000000000000DBAA                 align 10h
.rodata:000000000000DBB0 ; const char aFailedToDiscar[]
.rodata:000000000000DBB0 aFailedToDiscar db 'failed to discard cache for: %s',0
.rodata:000000000000DBB0                                         ; DATA XREF: main+1400↑o
.rodata:000000000000DBB0                                         ; main+15D7↑o
.rodata:000000000000DBD0                 align 20h
.rodata:000000000000DBE0 ebcdic_to_ascii db    0                 ; DATA XREF: main+4D4↑o
.rodata:000000000000DBE1                 db    1
.rodata:000000000000DBE2                 db    2
.rodata:000000000000DBE3                 db    3
.rodata:000000000000DBE4                 db  9Ch
.rodata:000000000000DBE5                 db    9
.rodata:000000000000DBE6                 db  86h
.rodata:000000000000DBE7                 db  7Fh ; 
.rodata:000000000000DBE8                 db  97h
.rodata:000000000000DBE9                 db  8Dh
.rodata:000000000000DBEA                 db  8Eh
.rodata:000000000000DBEB                 db  0Bh
.rodata:000000000000DBEC                 db  0Ch
.rodata:000000000000DBED                 db  0Dh
.rodata:000000000000DBEE                 db  0Eh
.rodata:000000000000DBEF                 db  0Fh
.rodata:000000000000DBF0                 db  10h
.rodata:000000000000DBF1                 db  11h
.rodata:000000000000DBF2                 db  12h
.rodata:000000000000DBF3                 db  13h
.rodata:000000000000DBF4                 db  9Dh
.rodata:000000000000DBF5                 db  85h
.rodata:000000000000DBF6                 db    8
.rodata:000000000000DBF7                 db  87h
.rodata:000000000000DBF8                 db  18h
.rodata:000000000000DBF9                 db  19h
.rodata:000000000000DBFA                 db  92h
.rodata:000000000000DBFB                 db  8Fh
.rodata:000000000000DBFC                 db  1Ch
.rodata:000000000000DBFD                 db  1Dh
.rodata:000000000000DBFE                 db  1Eh
.rodata:000000000000DBFF                 db  1Fh
.rodata:000000000000DC00                 db  80h
.rodata:000000000000DC01                 db  81h
.rodata:000000000000DC02                 db  82h
.rodata:000000000000DC03                 db  83h
.rodata:000000000000DC04                 db  84h
.rodata:000000000000DC05                 db  0Ah
.rodata:000000000000DC06                 db  17h
.rodata:000000000000DC07                 db  1Bh
.rodata:000000000000DC08                 db  88h
.rodata:000000000000DC09                 db  89h
.rodata:000000000000DC0A                 db  8Ah
.rodata:000000000000DC0B                 db  8Bh
.rodata:000000000000DC0C                 db  8Ch
.rodata:000000000000DC0D                 db    5
.rodata:000000000000DC0E                 db    6
.rodata:000000000000DC0F                 db    7
.rodata:000000000000DC10                 db  90h
.rodata:000000000000DC11                 db  91h
.rodata:000000000000DC12                 db  16h
.rodata:000000000000DC13                 db  93h
.rodata:000000000000DC14                 db  94h
.rodata:000000000000DC15                 db  95h
.rodata:000000000000DC16                 db  96h
.rodata:000000000000DC17                 db    4
.rodata:000000000000DC18                 db  98h
.rodata:000000000000DC19                 db  99h
.rodata:000000000000DC1A                 db  9Ah
.rodata:000000000000DC1B                 db  9Bh
.rodata:000000000000DC1C                 db  14h
.rodata:000000000000DC1D                 db  15h
.rodata:000000000000DC1E                 db  9Eh
.rodata:000000000000DC1F                 db  1Ah
.rodata:000000000000DC20                 db  20h
.rodata:000000000000DC21                 db 0A0h
.rodata:000000000000DC22                 db 0A1h
.rodata:000000000000DC23                 db 0A2h
.rodata:000000000000DC24                 db 0A3h
.rodata:000000000000DC25                 db 0A4h
.rodata:000000000000DC26                 db 0A5h
.rodata:000000000000DC27                 db 0A6h
.rodata:000000000000DC28                 db 0A7h
.rodata:000000000000DC29                 db 0A8h
.rodata:000000000000DC2A                 db 0D5h
.rodata:000000000000DC2B                 db  2Eh ; .
.rodata:000000000000DC2C                 db  3Ch ; <
.rodata:000000000000DC2D                 db  28h ; (
.rodata:000000000000DC2E                 db  2Bh ; +
.rodata:000000000000DC2F                 db  7Ch ; |
.rodata:000000000000DC30                 db  26h ; &
.rodata:000000000000DC31                 db 0A9h
.rodata:000000000000DC32                 db 0AAh
.rodata:000000000000DC33                 db 0ABh
.rodata:000000000000DC34                 db 0ACh
.rodata:000000000000DC35                 db 0ADh
.rodata:000000000000DC36                 db 0AEh
.rodata:000000000000DC37                 db 0AFh
.rodata:000000000000DC38                 db 0B0h
.rodata:000000000000DC39                 db 0B1h
.rodata:000000000000DC3A                 db  21h ; !
.rodata:000000000000DC3B                 db  24h ; $
.rodata:000000000000DC3C                 db  2Ah ; *
.rodata:000000000000DC3D                 db  29h ; )
.rodata:000000000000DC3E                 db  3Bh ; ;
.rodata:000000000000DC3F                 db  7Eh ; ~
.rodata:000000000000DC40                 db  2Dh ; -
.rodata:000000000000DC41                 db  2Fh ; /
.rodata:000000000000DC42                 db 0B2h
.rodata:000000000000DC43                 db 0B3h
.rodata:000000000000DC44                 db 0B4h
.rodata:000000000000DC45                 db 0B5h
.rodata:000000000000DC46                 db 0B6h
.rodata:000000000000DC47                 db 0B7h
.rodata:000000000000DC48                 db 0B8h
.rodata:000000000000DC49                 db 0B9h
.rodata:000000000000DC4A                 db 0CBh
.rodata:000000000000DC4B                 db  2Ch ; ,
.rodata:000000000000DC4C                 db  25h ; %
.rodata:000000000000DC4D                 db  5Fh ; _
.rodata:000000000000DC4E                 db  3Eh ; >
.rodata:000000000000DC4F                 db  3Fh ; ?
.rodata:000000000000DC50                 db 0BAh
.rodata:000000000000DC51                 db 0BBh
.rodata:000000000000DC52                 db 0BCh
.rodata:000000000000DC53                 db 0BDh
.rodata:000000000000DC54                 db 0BEh
.rodata:000000000000DC55                 db 0BFh
.rodata:000000000000DC56                 db 0C0h
.rodata:000000000000DC57                 db 0C1h
.rodata:000000000000DC58                 db 0C2h
.rodata:000000000000DC59                 db  60h ; `
.rodata:000000000000DC5A                 db  3Ah ; :
.rodata:000000000000DC5B                 db  23h ; #
.rodata:000000000000DC5C                 db  40h ; @
.rodata:000000000000DC5D                 db  27h ; '
.rodata:000000000000DC5E                 db  3Dh ; =
.rodata:000000000000DC5F                 db  22h ; "
.rodata:000000000000DC60                 db 0C3h
.rodata:000000000000DC61                 db  61h ; a
.rodata:000000000000DC62                 db  62h ; b
.rodata:000000000000DC63                 db  63h ; c
.rodata:000000000000DC64                 db  64h ; d
.rodata:000000000000DC65                 db  65h ; e
.rodata:000000000000DC66                 db  66h ; f
.rodata:000000000000DC67                 db  67h ; g
.rodata:000000000000DC68                 db  68h ; h
.rodata:000000000000DC69                 db  69h ; i
.rodata:000000000000DC6A                 db 0C4h
.rodata:000000000000DC6B                 db 0C5h
.rodata:000000000000DC6C                 db 0C6h
.rodata:000000000000DC6D                 db 0C7h
.rodata:000000000000DC6E                 db 0C8h
.rodata:000000000000DC6F                 db 0C9h
.rodata:000000000000DC70                 db 0CAh
.rodata:000000000000DC71                 db  6Ah ; j
.rodata:000000000000DC72                 db  6Bh ; k
.rodata:000000000000DC73                 db  6Ch ; l
.rodata:000000000000DC74                 db  6Dh ; m
.rodata:000000000000DC75                 db  6Eh ; n
.rodata:000000000000DC76                 db  6Fh ; o
.rodata:000000000000DC77                 db  70h ; p
.rodata:000000000000DC78                 db  71h ; q
.rodata:000000000000DC79                 db  72h ; r
.rodata:000000000000DC7A                 db  5Eh ; ^
.rodata:000000000000DC7B                 db 0CCh
.rodata:000000000000DC7C                 db 0CDh
.rodata:000000000000DC7D                 db 0CEh
.rodata:000000000000DC7E                 db 0CFh
.rodata:000000000000DC7F                 db 0D0h
.rodata:000000000000DC80                 db 0D1h
.rodata:000000000000DC81                 db 0E5h
.rodata:000000000000DC82                 db  73h ; s
.rodata:000000000000DC83                 db  74h ; t
.rodata:000000000000DC84                 db  75h ; u
.rodata:000000000000DC85                 db  76h ; v
.rodata:000000000000DC86                 db  77h ; w
.rodata:000000000000DC87                 db  78h ; x
.rodata:000000000000DC88                 db  79h ; y
.rodata:000000000000DC89                 db  7Ah ; z
.rodata:000000000000DC8A                 db 0D2h
.rodata:000000000000DC8B                 db 0D3h
.rodata:000000000000DC8C                 db 0D4h
.rodata:000000000000DC8D                 db  5Bh ; [
.rodata:000000000000DC8E                 db 0D6h
.rodata:000000000000DC8F                 db 0D7h
.rodata:000000000000DC90                 db 0D8h
.rodata:000000000000DC91                 db 0D9h
.rodata:000000000000DC92                 db 0DAh
.rodata:000000000000DC93                 db 0DBh
.rodata:000000000000DC94                 db 0DCh
.rodata:000000000000DC95                 db 0DDh
.rodata:000000000000DC96                 db 0DEh
.rodata:000000000000DC97                 db 0DFh
.rodata:000000000000DC98                 db 0E0h
.rodata:000000000000DC99                 db 0E1h
.rodata:000000000000DC9A                 db 0E2h
.rodata:000000000000DC9B                 db 0E3h
.rodata:000000000000DC9C                 db 0E4h
.rodata:000000000000DC9D                 db  5Dh ; ]
.rodata:000000000000DC9E                 db 0E6h
.rodata:000000000000DC9F                 db 0E7h
.rodata:000000000000DCA0                 db  7Bh ; {
.rodata:000000000000DCA1                 db  41h ; A
.rodata:000000000000DCA2                 db  42h ; B
.rodata:000000000000DCA3                 db  43h ; C
.rodata:000000000000DCA4                 db  44h ; D
.rodata:000000000000DCA5                 db  45h ; E
.rodata:000000000000DCA6                 db  46h ; F
.rodata:000000000000DCA7                 db  47h ; G
.rodata:000000000000DCA8                 db  48h ; H
.rodata:000000000000DCA9                 db  49h ; I
.rodata:000000000000DCAA                 db 0E8h
.rodata:000000000000DCAB                 db 0E9h
.rodata:000000000000DCAC                 db 0EAh
.rodata:000000000000DCAD                 db 0EBh
.rodata:000000000000DCAE                 db 0ECh
.rodata:000000000000DCAF                 db 0EDh
.rodata:000000000000DCB0                 db  7Dh ; }
.rodata:000000000000DCB1                 db  4Ah ; J
.rodata:000000000000DCB2                 db  4Bh ; K
.rodata:000000000000DCB3                 db  4Ch ; L
.rodata:000000000000DCB4                 db  4Dh ; M
.rodata:000000000000DCB5                 db  4Eh ; N
.rodata:000000000000DCB6                 db  4Fh ; O
.rodata:000000000000DCB7                 db  50h ; P
.rodata:000000000000DCB8                 db  51h ; Q
.rodata:000000000000DCB9                 db  52h ; R
.rodata:000000000000DCBA                 db 0EEh
.rodata:000000000000DCBB                 db 0EFh
.rodata:000000000000DCBC                 db 0F0h
.rodata:000000000000DCBD                 db 0F1h
.rodata:000000000000DCBE                 db 0F2h
.rodata:000000000000DCBF                 db 0F3h
.rodata:000000000000DCC0                 db  5Ch ; \
.rodata:000000000000DCC1                 db  9Fh
.rodata:000000000000DCC2                 db  53h ; S
.rodata:000000000000DCC3                 db  54h ; T
.rodata:000000000000DCC4                 db  55h ; U
.rodata:000000000000DCC5                 db  56h ; V
.rodata:000000000000DCC6                 db  57h ; W
.rodata:000000000000DCC7                 db  58h ; X
.rodata:000000000000DCC8                 db  59h ; Y
.rodata:000000000000DCC9                 db  5Ah ; Z
.rodata:000000000000DCCA                 db 0F4h
.rodata:000000000000DCCB                 db 0F5h
.rodata:000000000000DCCC                 db 0F6h
.rodata:000000000000DCCD                 db 0F7h
.rodata:000000000000DCCE                 db 0F8h
.rodata:000000000000DCCF                 db 0F9h
.rodata:000000000000DCD0                 db  30h ; 0
.rodata:000000000000DCD1                 db  31h ; 1
.rodata:000000000000DCD2                 db  32h ; 2
.rodata:000000000000DCD3                 db  33h ; 3
.rodata:000000000000DCD4                 db  34h ; 4
.rodata:000000000000DCD5                 db  35h ; 5
.rodata:000000000000DCD6                 db  36h ; 6
.rodata:000000000000DCD7                 db  37h ; 7
.rodata:000000000000DCD8                 db  38h ; 8
.rodata:000000000000DCD9                 db  39h ; 9
.rodata:000000000000DCDA                 db 0FAh
.rodata:000000000000DCDB                 db 0FBh
.rodata:000000000000DCDC                 db 0FCh
.rodata:000000000000DCDD                 db 0FDh
.rodata:000000000000DCDE                 db 0FEh
.rodata:000000000000DCDF                 db 0FFh
.rodata:000000000000DCE0 ascii_to_ibm    db    0                 ; DATA XREF: main+10E1↑o
.rodata:000000000000DCE1                 db    1
.rodata:000000000000DCE2                 db    2
.rodata:000000000000DCE3                 db    3
.rodata:000000000000DCE4                 db  37h ; 7
.rodata:000000000000DCE5                 db  2Dh ; -
.rodata:000000000000DCE6                 db  2Eh ; .
.rodata:000000000000DCE7                 db  2Fh ; /
.rodata:000000000000DCE8                 db  16h
.rodata:000000000000DCE9                 db    5
.rodata:000000000000DCEA                 db  25h ; %
.rodata:000000000000DCEB                 db  0Bh
.rodata:000000000000DCEC                 db  0Ch
.rodata:000000000000DCED                 db  0Dh
.rodata:000000000000DCEE                 db  0Eh
.rodata:000000000000DCEF                 db  0Fh
.rodata:000000000000DCF0                 db  10h
.rodata:000000000000DCF1                 db  11h
.rodata:000000000000DCF2                 db  12h
.rodata:000000000000DCF3                 db  13h
.rodata:000000000000DCF4                 db  3Ch ; <
.rodata:000000000000DCF5                 db  3Dh ; =
.rodata:000000000000DCF6                 db  32h ; 2
.rodata:000000000000DCF7                 db  26h ; &
.rodata:000000000000DCF8                 db  18h
.rodata:000000000000DCF9                 db  19h
.rodata:000000000000DCFA                 db  3Fh ; ?
.rodata:000000000000DCFB                 db  27h ; '
.rodata:000000000000DCFC                 db  1Ch
.rodata:000000000000DCFD                 db  1Dh
.rodata:000000000000DCFE                 db  1Eh
.rodata:000000000000DCFF                 db  1Fh
.rodata:000000000000DD00                 db  40h ; @
.rodata:000000000000DD01                 db  5Ah ; Z
.rodata:000000000000DD02                 db  7Fh ; 
.rodata:000000000000DD03                 db  7Bh ; {
.rodata:000000000000DD04                 db  5Bh ; [
.rodata:000000000000DD05                 db  6Ch ; l
.rodata:000000000000DD06                 db  50h ; P
.rodata:000000000000DD07                 db  7Dh ; }
.rodata:000000000000DD08                 db  4Dh ; M
.rodata:000000000000DD09                 db  5Dh ; ]
.rodata:000000000000DD0A                 db  5Ch ; \
.rodata:000000000000DD0B                 db  4Eh ; N
.rodata:000000000000DD0C                 db  6Bh ; k
.rodata:000000000000DD0D                 db  60h ; `
.rodata:000000000000DD0E                 db  4Bh ; K
.rodata:000000000000DD0F                 db  61h ; a
.rodata:000000000000DD10                 db 0F0h
.rodata:000000000000DD11                 db 0F1h
.rodata:000000000000DD12                 db 0F2h
.rodata:000000000000DD13                 db 0F3h
.rodata:000000000000DD14                 db 0F4h
.rodata:000000000000DD15                 db 0F5h
.rodata:000000000000DD16                 db 0F6h
.rodata:000000000000DD17                 db 0F7h
.rodata:000000000000DD18                 db 0F8h
.rodata:000000000000DD19                 db 0F9h
.rodata:000000000000DD1A                 db  7Ah ; z
.rodata:000000000000DD1B                 db  5Eh ; ^
.rodata:000000000000DD1C                 db  4Ch ; L
.rodata:000000000000DD1D                 db  7Eh ; ~
.rodata:000000000000DD1E                 db  6Eh ; n
.rodata:000000000000DD1F                 db  6Fh ; o
.rodata:000000000000DD20                 db  7Ch ; |
.rodata:000000000000DD21                 db 0C1h
.rodata:000000000000DD22                 db 0C2h
.rodata:000000000000DD23                 db 0C3h
.rodata:000000000000DD24                 db 0C4h
.rodata:000000000000DD25                 db 0C5h
.rodata:000000000000DD26                 db 0C6h
.rodata:000000000000DD27                 db 0C7h
.rodata:000000000000DD28                 db 0C8h
.rodata:000000000000DD29                 db 0C9h
.rodata:000000000000DD2A                 db 0D1h
.rodata:000000000000DD2B                 db 0D2h
.rodata:000000000000DD2C                 db 0D3h
.rodata:000000000000DD2D                 db 0D4h
.rodata:000000000000DD2E                 db 0D5h
.rodata:000000000000DD2F                 db 0D6h
.rodata:000000000000DD30                 db 0D7h
.rodata:000000000000DD31                 db 0D8h
.rodata:000000000000DD32                 db 0D9h
.rodata:000000000000DD33                 db 0E2h
.rodata:000000000000DD34                 db 0E3h
.rodata:000000000000DD35                 db 0E4h
.rodata:000000000000DD36                 db 0E5h
.rodata:000000000000DD37                 db 0E6h
.rodata:000000000000DD38                 db 0E7h
.rodata:000000000000DD39                 db 0E8h
.rodata:000000000000DD3A                 db 0E9h
.rodata:000000000000DD3B                 db 0ADh
.rodata:000000000000DD3C                 db 0E0h
.rodata:000000000000DD3D                 db 0BDh
.rodata:000000000000DD3E                 db  5Fh ; _
.rodata:000000000000DD3F                 db  6Dh ; m
.rodata:000000000000DD40                 db  79h ; y
.rodata:000000000000DD41                 db  81h
.rodata:000000000000DD42                 db  82h
.rodata:000000000000DD43                 db  83h
.rodata:000000000000DD44                 db  84h
.rodata:000000000000DD45                 db  85h
.rodata:000000000000DD46                 db  86h
.rodata:000000000000DD47                 db  87h
.rodata:000000000000DD48                 db  88h
.rodata:000000000000DD49                 db  89h
.rodata:000000000000DD4A                 db  91h
.rodata:000000000000DD4B                 db  92h
.rodata:000000000000DD4C                 db  93h
.rodata:000000000000DD4D                 db  94h
.rodata:000000000000DD4E                 db  95h
.rodata:000000000000DD4F                 db  96h
.rodata:000000000000DD50                 db  97h
.rodata:000000000000DD51                 db  98h
.rodata:000000000000DD52                 db  99h
.rodata:000000000000DD53                 db 0A2h
.rodata:000000000000DD54                 db 0A3h
.rodata:000000000000DD55                 db 0A4h
.rodata:000000000000DD56                 db 0A5h
.rodata:000000000000DD57                 db 0A6h
.rodata:000000000000DD58                 db 0A7h
.rodata:000000000000DD59                 db 0A8h
.rodata:000000000000DD5A                 db 0A9h
.rodata:000000000000DD5B                 db 0C0h
.rodata:000000000000DD5C                 db  4Fh ; O
.rodata:000000000000DD5D                 db 0D0h
.rodata:000000000000DD5E                 db 0A1h
.rodata:000000000000DD5F                 db    7
.rodata:000000000000DD60                 db  20h
.rodata:000000000000DD61                 db  21h ; !
.rodata:000000000000DD62                 db  22h ; "
.rodata:000000000000DD63                 db  23h ; #
.rodata:000000000000DD64                 db  24h ; $
.rodata:000000000000DD65                 db  15h
.rodata:000000000000DD66                 db    6
.rodata:000000000000DD67                 db  17h
.rodata:000000000000DD68                 db  28h ; (
.rodata:000000000000DD69                 db  29h ; )
.rodata:000000000000DD6A                 db  2Ah ; *
.rodata:000000000000DD6B                 db  2Bh ; +
.rodata:000000000000DD6C                 db  2Ch ; ,
.rodata:000000000000DD6D                 db    9
.rodata:000000000000DD6E                 db  0Ah
.rodata:000000000000DD6F                 db  1Bh
.rodata:000000000000DD70                 db  30h ; 0
.rodata:000000000000DD71                 db  31h ; 1
.rodata:000000000000DD72                 db  1Ah
.rodata:000000000000DD73                 db  33h ; 3
.rodata:000000000000DD74                 db  34h ; 4
.rodata:000000000000DD75                 db  35h ; 5
.rodata:000000000000DD76                 db  36h ; 6
.rodata:000000000000DD77                 db    8
.rodata:000000000000DD78                 db  38h ; 8
.rodata:000000000000DD79                 db  39h ; 9
.rodata:000000000000DD7A                 db  3Ah ; :
.rodata:000000000000DD7B                 db  3Bh ; ;
.rodata:000000000000DD7C                 db    4
.rodata:000000000000DD7D                 db  14h
.rodata:000000000000DD7E                 db  3Eh ; >
.rodata:000000000000DD7F                 db 0E1h
.rodata:000000000000DD80                 db  41h ; A
.rodata:000000000000DD81                 db  42h ; B
.rodata:000000000000DD82                 db  43h ; C
.rodata:000000000000DD83                 db  44h ; D
.rodata:000000000000DD84                 db  45h ; E
.rodata:000000000000DD85                 db  46h ; F
.rodata:000000000000DD86                 db  47h ; G
.rodata:000000000000DD87                 db  48h ; H
.rodata:000000000000DD88                 db  49h ; I
.rodata:000000000000DD89                 db  51h ; Q
.rodata:000000000000DD8A                 db  52h ; R
.rodata:000000000000DD8B                 db  53h ; S
.rodata:000000000000DD8C                 db  54h ; T
.rodata:000000000000DD8D                 db  55h ; U
.rodata:000000000000DD8E                 db  56h ; V
.rodata:000000000000DD8F                 db  57h ; W
.rodata:000000000000DD90                 db  58h ; X
.rodata:000000000000DD91                 db  59h ; Y
.rodata:000000000000DD92                 db  62h ; b
.rodata:000000000000DD93                 db  63h ; c
.rodata:000000000000DD94                 db  64h ; d
.rodata:000000000000DD95                 db  65h ; e
.rodata:000000000000DD96                 db  66h ; f
.rodata:000000000000DD97                 db  67h ; g
.rodata:000000000000DD98                 db  68h ; h
.rodata:000000000000DD99                 db  69h ; i
.rodata:000000000000DD9A                 db  70h ; p
.rodata:000000000000DD9B                 db  71h ; q
.rodata:000000000000DD9C                 db  72h ; r
.rodata:000000000000DD9D                 db  73h ; s
.rodata:000000000000DD9E                 db  74h ; t
.rodata:000000000000DD9F                 db  75h ; u
.rodata:000000000000DDA0                 db  76h ; v
.rodata:000000000000DDA1                 db  77h ; w
.rodata:000000000000DDA2                 db  78h ; x
.rodata:000000000000DDA3                 db  80h
.rodata:000000000000DDA4                 db  8Ah
.rodata:000000000000DDA5                 db  8Bh
.rodata:000000000000DDA6                 db  8Ch
.rodata:000000000000DDA7                 db  8Dh
.rodata:000000000000DDA8                 db  8Eh
.rodata:000000000000DDA9                 db  8Fh
.rodata:000000000000DDAA                 db  90h
.rodata:000000000000DDAB                 db  9Ah
.rodata:000000000000DDAC                 db  9Bh
.rodata:000000000000DDAD                 db  9Ch
.rodata:000000000000DDAE                 db  9Dh
.rodata:000000000000DDAF                 db  9Eh
.rodata:000000000000DDB0                 db  9Fh
.rodata:000000000000DDB1                 db 0A0h
.rodata:000000000000DDB2                 db 0AAh
.rodata:000000000000DDB3                 db 0ABh
.rodata:000000000000DDB4                 db 0ACh
.rodata:000000000000DDB5                 db 0ADh
.rodata:000000000000DDB6                 db 0AEh
.rodata:000000000000DDB7                 db 0AFh
.rodata:000000000000DDB8                 db 0B0h
.rodata:000000000000DDB9                 db 0B1h
.rodata:000000000000DDBA                 db 0B2h
.rodata:000000000000DDBB                 db 0B3h
.rodata:000000000000DDBC                 db 0B4h
.rodata:000000000000DDBD                 db 0B5h
.rodata:000000000000DDBE                 db 0B6h
.rodata:000000000000DDBF                 db 0B7h
.rodata:000000000000DDC0                 db 0B8h
.rodata:000000000000DDC1                 db 0B9h
.rodata:000000000000DDC2                 db 0BAh
.rodata:000000000000DDC3                 db 0BBh
.rodata:000000000000DDC4                 db 0BCh
.rodata:000000000000DDC5                 db 0BDh
.rodata:000000000000DDC6                 db 0BEh
.rodata:000000000000DDC7                 db 0BFh
.rodata:000000000000DDC8                 db 0CAh
.rodata:000000000000DDC9                 db 0CBh
.rodata:000000000000DDCA                 db 0CCh
.rodata:000000000000DDCB                 db 0CDh
.rodata:000000000000DDCC                 db 0CEh
.rodata:000000000000DDCD                 db 0CFh
.rodata:000000000000DDCE                 db 0DAh
.rodata:000000000000DDCF                 db 0DBh
.rodata:000000000000DDD0                 db 0DCh
.rodata:000000000000DDD1                 db 0DDh
.rodata:000000000000DDD2                 db 0DEh
.rodata:000000000000DDD3                 db 0DFh
.rodata:000000000000DDD4                 db 0EAh
.rodata:000000000000DDD5                 db 0EBh
.rodata:000000000000DDD6                 db 0ECh
.rodata:000000000000DDD7                 db 0EDh
.rodata:000000000000DDD8                 db 0EEh
.rodata:000000000000DDD9                 db 0EFh
.rodata:000000000000DDDA                 db 0FAh
.rodata:000000000000DDDB                 db 0FBh
.rodata:000000000000DDDC                 db 0FCh
.rodata:000000000000DDDD                 db 0FDh
.rodata:000000000000DDDE                 db 0FEh
.rodata:000000000000DDDF                 db 0FFh
.rodata:000000000000DDE0 ascii_to_ebcdic db    0                 ; DATA XREF: main+552↑o
.rodata:000000000000DDE1                 db    1
.rodata:000000000000DDE2                 db    2
.rodata:000000000000DDE3                 db    3
.rodata:000000000000DDE4                 db  37h ; 7
.rodata:000000000000DDE5                 db  2Dh ; -
.rodata:000000000000DDE6                 db  2Eh ; .
.rodata:000000000000DDE7                 db  2Fh ; /
.rodata:000000000000DDE8                 db  16h
.rodata:000000000000DDE9                 db    5
.rodata:000000000000DDEA                 db  25h ; %
.rodata:000000000000DDEB                 db  0Bh
.rodata:000000000000DDEC                 db  0Ch
.rodata:000000000000DDED                 db  0Dh
.rodata:000000000000DDEE                 db  0Eh
.rodata:000000000000DDEF                 db  0Fh
.rodata:000000000000DDF0                 db  10h
.rodata:000000000000DDF1                 db  11h
.rodata:000000000000DDF2                 db  12h
.rodata:000000000000DDF3                 db  13h
.rodata:000000000000DDF4                 db  3Ch ; <
.rodata:000000000000DDF5                 db  3Dh ; =
.rodata:000000000000DDF6                 db  32h ; 2
.rodata:000000000000DDF7                 db  26h ; &
.rodata:000000000000DDF8                 db  18h
.rodata:000000000000DDF9                 db  19h
.rodata:000000000000DDFA                 db  3Fh ; ?
.rodata:000000000000DDFB                 db  27h ; '
.rodata:000000000000DDFC                 db  1Ch
.rodata:000000000000DDFD                 db  1Dh
.rodata:000000000000DDFE                 db  1Eh
.rodata:000000000000DDFF                 db  1Fh
.rodata:000000000000DE00                 db  40h ; @
.rodata:000000000000DE01                 db  5Ah ; Z
.rodata:000000000000DE02                 db  7Fh ; 
.rodata:000000000000DE03                 db  7Bh ; {
.rodata:000000000000DE04                 db  5Bh ; [
.rodata:000000000000DE05                 db  6Ch ; l
.rodata:000000000000DE06                 db  50h ; P
.rodata:000000000000DE07                 db  7Dh ; }
.rodata:000000000000DE08                 db  4Dh ; M
.rodata:000000000000DE09                 db  5Dh ; ]
.rodata:000000000000DE0A                 db  5Ch ; \
.rodata:000000000000DE0B                 db  4Eh ; N
.rodata:000000000000DE0C                 db  6Bh ; k
.rodata:000000000000DE0D                 db  60h ; `
.rodata:000000000000DE0E                 db  4Bh ; K
.rodata:000000000000DE0F                 db  61h ; a
.rodata:000000000000DE10                 db 0F0h
.rodata:000000000000DE11                 db 0F1h
.rodata:000000000000DE12                 db 0F2h
.rodata:000000000000DE13                 db 0F3h
.rodata:000000000000DE14                 db 0F4h
.rodata:000000000000DE15                 db 0F5h
.rodata:000000000000DE16                 db 0F6h
.rodata:000000000000DE17                 db 0F7h
.rodata:000000000000DE18                 db 0F8h
.rodata:000000000000DE19                 db 0F9h
.rodata:000000000000DE1A                 db  7Ah ; z
.rodata:000000000000DE1B                 db  5Eh ; ^
.rodata:000000000000DE1C                 db  4Ch ; L
.rodata:000000000000DE1D                 db  7Eh ; ~
.rodata:000000000000DE1E                 db  6Eh ; n
.rodata:000000000000DE1F                 db  6Fh ; o
.rodata:000000000000DE20                 db  7Ch ; |
.rodata:000000000000DE21                 db 0C1h
.rodata:000000000000DE22                 db 0C2h
.rodata:000000000000DE23                 db 0C3h
.rodata:000000000000DE24                 db 0C4h
.rodata:000000000000DE25                 db 0C5h
.rodata:000000000000DE26                 db 0C6h
.rodata:000000000000DE27                 db 0C7h
.rodata:000000000000DE28                 db 0C8h
.rodata:000000000000DE29                 db 0C9h
.rodata:000000000000DE2A                 db 0D1h
.rodata:000000000000DE2B                 db 0D2h
.rodata:000000000000DE2C                 db 0D3h
.rodata:000000000000DE2D                 db 0D4h
.rodata:000000000000DE2E                 db 0D5h
.rodata:000000000000DE2F                 db 0D6h
.rodata:000000000000DE30                 db 0D7h
.rodata:000000000000DE31                 db 0D8h
.rodata:000000000000DE32                 db 0D9h
.rodata:000000000000DE33                 db 0E2h
.rodata:000000000000DE34                 db 0E3h
.rodata:000000000000DE35                 db 0E4h
.rodata:000000000000DE36                 db 0E5h
.rodata:000000000000DE37                 db 0E6h
.rodata:000000000000DE38                 db 0E7h
.rodata:000000000000DE39                 db 0E8h
.rodata:000000000000DE3A                 db 0E9h
.rodata:000000000000DE3B                 db 0ADh
.rodata:000000000000DE3C                 db 0E0h
.rodata:000000000000DE3D                 db 0BDh
.rodata:000000000000DE3E                 db  9Ah
.rodata:000000000000DE3F                 db  6Dh ; m
.rodata:000000000000DE40                 db  79h ; y
.rodata:000000000000DE41                 db  81h
.rodata:000000000000DE42                 db  82h
.rodata:000000000000DE43                 db  83h
.rodata:000000000000DE44                 db  84h
.rodata:000000000000DE45                 db  85h
.rodata:000000000000DE46                 db  86h
.rodata:000000000000DE47                 db  87h
.rodata:000000000000DE48                 db  88h
.rodata:000000000000DE49                 db  89h
.rodata:000000000000DE4A                 db  91h
.rodata:000000000000DE4B                 db  92h
.rodata:000000000000DE4C                 db  93h
.rodata:000000000000DE4D                 db  94h
.rodata:000000000000DE4E                 db  95h
.rodata:000000000000DE4F                 db  96h
.rodata:000000000000DE50                 db  97h
.rodata:000000000000DE51                 db  98h
.rodata:000000000000DE52                 db  99h
.rodata:000000000000DE53                 db 0A2h
.rodata:000000000000DE54                 db 0A3h
.rodata:000000000000DE55                 db 0A4h
.rodata:000000000000DE56                 db 0A5h
.rodata:000000000000DE57                 db 0A6h
.rodata:000000000000DE58                 db 0A7h
.rodata:000000000000DE59                 db 0A8h
.rodata:000000000000DE5A                 db 0A9h
.rodata:000000000000DE5B                 db 0C0h
.rodata:000000000000DE5C                 db  4Fh ; O
.rodata:000000000000DE5D                 db 0D0h
.rodata:000000000000DE5E                 db  5Fh ; _
.rodata:000000000000DE5F                 db    7
.rodata:000000000000DE60                 db  20h
.rodata:000000000000DE61                 db  21h ; !
.rodata:000000000000DE62                 db  22h ; "
.rodata:000000000000DE63                 db  23h ; #
.rodata:000000000000DE64                 db  24h ; $
.rodata:000000000000DE65                 db  15h
.rodata:000000000000DE66                 db    6
.rodata:000000000000DE67                 db  17h
.rodata:000000000000DE68                 db  28h ; (
.rodata:000000000000DE69                 db  29h ; )
.rodata:000000000000DE6A                 db  2Ah ; *
.rodata:000000000000DE6B                 db  2Bh ; +
.rodata:000000000000DE6C                 db  2Ch ; ,
.rodata:000000000000DE6D                 db    9
.rodata:000000000000DE6E                 db  0Ah
.rodata:000000000000DE6F                 db  1Bh
.rodata:000000000000DE70                 db  30h ; 0
.rodata:000000000000DE71                 db  31h ; 1
.rodata:000000000000DE72                 db  1Ah
.rodata:000000000000DE73                 db  33h ; 3
.rodata:000000000000DE74                 db  34h ; 4
.rodata:000000000000DE75                 db  35h ; 5
.rodata:000000000000DE76                 db  36h ; 6
.rodata:000000000000DE77                 db    8
.rodata:000000000000DE78                 db  38h ; 8
.rodata:000000000000DE79                 db  39h ; 9
.rodata:000000000000DE7A                 db  3Ah ; :
.rodata:000000000000DE7B                 db  3Bh ; ;
.rodata:000000000000DE7C                 db    4
.rodata:000000000000DE7D                 db  14h
.rodata:000000000000DE7E                 db  3Eh ; >
.rodata:000000000000DE7F                 db 0E1h
.rodata:000000000000DE80                 db  41h ; A
.rodata:000000000000DE81                 db  42h ; B
.rodata:000000000000DE82                 db  43h ; C
.rodata:000000000000DE83                 db  44h ; D
.rodata:000000000000DE84                 db  45h ; E
.rodata:000000000000DE85                 db  46h ; F
.rodata:000000000000DE86                 db  47h ; G
.rodata:000000000000DE87                 db  48h ; H
.rodata:000000000000DE88                 db  49h ; I
.rodata:000000000000DE89                 db  51h ; Q
.rodata:000000000000DE8A                 db  52h ; R
.rodata:000000000000DE8B                 db  53h ; S
.rodata:000000000000DE8C                 db  54h ; T
.rodata:000000000000DE8D                 db  55h ; U
.rodata:000000000000DE8E                 db  56h ; V
.rodata:000000000000DE8F                 db  57h ; W
.rodata:000000000000DE90                 db  58h ; X
.rodata:000000000000DE91                 db  59h ; Y
.rodata:000000000000DE92                 db  62h ; b
.rodata:000000000000DE93                 db  63h ; c
.rodata:000000000000DE94                 db  64h ; d
.rodata:000000000000DE95                 db  65h ; e
.rodata:000000000000DE96                 db  66h ; f
.rodata:000000000000DE97                 db  67h ; g
.rodata:000000000000DE98                 db  68h ; h
.rodata:000000000000DE99                 db  69h ; i
.rodata:000000000000DE9A                 db  70h ; p
.rodata:000000000000DE9B                 db  71h ; q
.rodata:000000000000DE9C                 db  72h ; r
.rodata:000000000000DE9D                 db  73h ; s
.rodata:000000000000DE9E                 db  74h ; t
.rodata:000000000000DE9F                 db  75h ; u
.rodata:000000000000DEA0                 db  76h ; v
.rodata:000000000000DEA1                 db  77h ; w
.rodata:000000000000DEA2                 db  78h ; x
.rodata:000000000000DEA3                 db  80h
.rodata:000000000000DEA4                 db  8Ah
.rodata:000000000000DEA5                 db  8Bh
.rodata:000000000000DEA6                 db  8Ch
.rodata:000000000000DEA7                 db  8Dh
.rodata:000000000000DEA8                 db  8Eh
.rodata:000000000000DEA9                 db  8Fh
.rodata:000000000000DEAA                 db  90h
.rodata:000000000000DEAB                 db  6Ah ; j
.rodata:000000000000DEAC                 db  9Bh
.rodata:000000000000DEAD                 db  9Ch
.rodata:000000000000DEAE                 db  9Dh
.rodata:000000000000DEAF                 db  9Eh
.rodata:000000000000DEB0                 db  9Fh
.rodata:000000000000DEB1                 db 0A0h
.rodata:000000000000DEB2                 db 0AAh
.rodata:000000000000DEB3                 db 0ABh
.rodata:000000000000DEB4                 db 0ACh
.rodata:000000000000DEB5                 db  4Ah ; J
.rodata:000000000000DEB6                 db 0AEh
.rodata:000000000000DEB7                 db 0AFh
.rodata:000000000000DEB8                 db 0B0h
.rodata:000000000000DEB9                 db 0B1h
.rodata:000000000000DEBA                 db 0B2h
.rodata:000000000000DEBB                 db 0B3h
.rodata:000000000000DEBC                 db 0B4h
.rodata:000000000000DEBD                 db 0B5h
.rodata:000000000000DEBE                 db 0B6h
.rodata:000000000000DEBF                 db 0B7h
.rodata:000000000000DEC0                 db 0B8h
.rodata:000000000000DEC1                 db 0B9h
.rodata:000000000000DEC2                 db 0BAh
.rodata:000000000000DEC3                 db 0BBh
.rodata:000000000000DEC4                 db 0BCh
.rodata:000000000000DEC5                 db 0A1h
.rodata:000000000000DEC6                 db 0BEh
.rodata:000000000000DEC7                 db 0BFh
.rodata:000000000000DEC8                 db 0CAh
.rodata:000000000000DEC9                 db 0CBh
.rodata:000000000000DECA                 db 0CCh
.rodata:000000000000DECB                 db 0CDh
.rodata:000000000000DECC                 db 0CEh
.rodata:000000000000DECD                 db 0CFh
.rodata:000000000000DECE                 db 0DAh
.rodata:000000000000DECF                 db 0DBh
.rodata:000000000000DED0                 db 0DCh
.rodata:000000000000DED1                 db 0DDh
.rodata:000000000000DED2                 db 0DEh
.rodata:000000000000DED3                 db 0DFh
.rodata:000000000000DED4                 db 0EAh
.rodata:000000000000DED5                 db 0EBh
.rodata:000000000000DED6                 db 0ECh
.rodata:000000000000DED7                 db 0EDh
.rodata:000000000000DED8                 db 0EEh
.rodata:000000000000DED9                 db 0EFh
.rodata:000000000000DEDA                 db 0FAh
.rodata:000000000000DEDB                 db 0FBh
.rodata:000000000000DEDC                 db 0FCh
.rodata:000000000000DEDD                 db 0FDh
.rodata:000000000000DEDE                 db 0FEh
.rodata:000000000000DEDF                 db 0FFh
.rodata:000000000000DEE0 statuses        db 'none',0             ; DATA XREF: main+CE2↑o
.rodata:000000000000DEE5                 db    0
.rodata:000000000000DEE6                 db    0
.rodata:000000000000DEE7                 db    0
.rodata:000000000000DEE8                 db    0
.rodata:000000000000DEE9                 db    0
.rodata:000000000000DEEA                 db    0
.rodata:000000000000DEEB                 db    0
.rodata:000000000000DEEC                 db    1
.rodata:000000000000DEED                 db    0
.rodata:000000000000DEEE                 db    0
.rodata:000000000000DEEF                 db    0
.rodata:000000000000DEF0                 db  6Eh ; n
.rodata:000000000000DEF1                 db  6Fh ; o
.rodata:000000000000DEF2                 db  78h ; x
.rodata:000000000000DEF3                 db  66h ; f
.rodata:000000000000DEF4                 db  65h ; e
.rodata:000000000000DEF5                 db  72h ; r
.rodata:000000000000DEF6                 db    0
.rodata:000000000000DEF7                 db    0
.rodata:000000000000DEF8                 db    0
.rodata:000000000000DEF9                 db    0
.rodata:000000000000DEFA                 db    0
.rodata:000000000000DEFB                 db    0
.rodata:000000000000DEFC                 db    2
.rodata:000000000000DEFD                 db    0
.rodata:000000000000DEFE                 db    0
.rodata:000000000000DEFF                 db    0
.rodata:000000000000DF00                 db  70h ; p
.rodata:000000000000DF01                 db  72h ; r
.rodata:000000000000DF02                 db  6Fh ; o
.rodata:000000000000DF03                 db  67h ; g
.rodata:000000000000DF04                 db  72h ; r
.rodata:000000000000DF05                 db  65h ; e
.rodata:000000000000DF06                 db  73h ; s
.rodata:000000000000DF07                 db  73h ; s
.rodata:000000000000DF08                 db    0
.rodata:000000000000DF09                 db    0
.rodata:000000000000DF0A                 db    0
.rodata:000000000000DF0B                 db    0
.rodata:000000000000DF0C                 db    4
.rodata:000000000000DF0D                 db    0
.rodata:000000000000DF0E                 db    0
.rodata:000000000000DF0F                 db    0
.rodata:000000000000DF10                 db    0
.rodata:000000000000DF11                 db    0
.rodata:000000000000DF12                 db    0
.rodata:000000000000DF13                 db    0
.rodata:000000000000DF14                 db    0
.rodata:000000000000DF15                 db    0
.rodata:000000000000DF16                 db    0
.rodata:000000000000DF17                 db    0
.rodata:000000000000DF18                 db    0
.rodata:000000000000DF19                 db    0
.rodata:000000000000DF1A                 db    0
.rodata:000000000000DF1B                 db    0
.rodata:000000000000DF1C                 db    0
.rodata:000000000000DF1D                 db    0
.rodata:000000000000DF1E                 db    0
.rodata:000000000000DF1F                 db    0
.rodata:000000000000DF20 flags           db 'append',0           ; DATA XREF: main+AC6↑o
.rodata:000000000000DF20                                         ; main+B26↑o
.rodata:000000000000DF27                 db    0
.rodata:000000000000DF28                 db    0
.rodata:000000000000DF29                 db    0
.rodata:000000000000DF2A                 db    0
.rodata:000000000000DF2B                 db    0
.rodata:000000000000DF2C                 db    0
.rodata:000000000000DF2D                 db    4
.rodata:000000000000DF2E                 db    0
.rodata:000000000000DF2F                 db    0
.rodata:000000000000DF30                 db  62h ; b
.rodata:000000000000DF31                 db  69h ; i
.rodata:000000000000DF32                 db  6Eh ; n
.rodata:000000000000DF33                 db  61h ; a
.rodata:000000000000DF34                 db  72h ; r
.rodata:000000000000DF35                 db  79h ; y
.rodata:000000000000DF36                 db    0
.rodata:000000000000DF37                 db    0
.rodata:000000000000DF38                 db    0
.rodata:000000000000DF39                 db    0
.rodata:000000000000DF3A                 db    0
.rodata:000000000000DF3B                 db    0
.rodata:000000000000DF3C                 db    0
.rodata:000000000000DF3D                 db    0
.rodata:000000000000DF3E                 db    0
.rodata:000000000000DF3F                 db    0
.rodata:000000000000DF40                 db  63h ; c
.rodata:000000000000DF41                 db  69h ; i
.rodata:000000000000DF42                 db  6Fh ; o
.rodata:000000000000DF43                 db    0
.rodata:000000000000DF44                 db    0
.rodata:000000000000DF45                 db    0
.rodata:000000000000DF46                 db    0
.rodata:000000000000DF47                 db    0
.rodata:000000000000DF48                 db    0
.rodata:000000000000DF49                 db    0
.rodata:000000000000DF4A                 db    0
.rodata:000000000000DF4B                 db    0
.rodata:000000000000DF4C                 db    0
.rodata:000000000000DF4D                 db    0
.rodata:000000000000DF4E                 db    0
.rodata:000000000000DF4F                 db    0
.rodata:000000000000DF50                 db  64h ; d
.rodata:000000000000DF51                 db  69h ; i
.rodata:000000000000DF52                 db  72h ; r
.rodata:000000000000DF53                 db  65h ; e
.rodata:000000000000DF54                 db  63h ; c
.rodata:000000000000DF55                 db  74h ; t
.rodata:000000000000DF56                 db    0
.rodata:000000000000DF57                 db    0
.rodata:000000000000DF58                 db    0
.rodata:000000000000DF59                 db    0
.rodata:000000000000DF5A                 db    0
.rodata:000000000000DF5B                 db    0
.rodata:000000000000DF5C                 db    0
.rodata:000000000000DF5D                 db  40h ; @
.rodata:000000000000DF5E                 db    0
.rodata:000000000000DF5F                 db    0
.rodata:000000000000DF60                 db  64h ; d
.rodata:000000000000DF61                 db  69h ; i
.rodata:000000000000DF62                 db  72h ; r
.rodata:000000000000DF63                 db  65h ; e
.rodata:000000000000DF64                 db  63h ; c
.rodata:000000000000DF65                 db  74h ; t
.rodata:000000000000DF66                 db  6Fh ; o
.rodata:000000000000DF67                 db  72h ; r
.rodata:000000000000DF68                 db  79h ; y
.rodata:000000000000DF69                 db    0
.rodata:000000000000DF6A                 db    0
.rodata:000000000000DF6B                 db    0
.rodata:000000000000DF6C                 db    0
.rodata:000000000000DF6D                 db    0
.rodata:000000000000DF6E                 db    1
.rodata:000000000000DF6F                 db    0
.rodata:000000000000DF70                 db  64h ; d
.rodata:000000000000DF71                 db  73h ; s
.rodata:000000000000DF72                 db  79h ; y
.rodata:000000000000DF73                 db  6Eh ; n
.rodata:000000000000DF74                 db  63h ; c
.rodata:000000000000DF75                 db    0
.rodata:000000000000DF76                 db    0
.rodata:000000000000DF77                 db    0
.rodata:000000000000DF78                 db    0
.rodata:000000000000DF79                 db    0
.rodata:000000000000DF7A                 db    0
.rodata:000000000000DF7B                 db    0
.rodata:000000000000DF7C                 db    0
.rodata:000000000000DF7D                 db  10h
.rodata:000000000000DF7E                 db    0
.rodata:000000000000DF7F                 db    0
.rodata:000000000000DF80                 db  6Eh ; n
.rodata:000000000000DF81                 db  6Fh ; o
.rodata:000000000000DF82                 db  61h ; a
.rodata:000000000000DF83                 db  74h ; t
.rodata:000000000000DF84                 db  69h ; i
.rodata:000000000000DF85                 db  6Dh ; m
.rodata:000000000000DF86                 db  65h ; e
.rodata:000000000000DF87                 db    0
.rodata:000000000000DF88                 db    0
.rodata:000000000000DF89                 db    0
.rodata:000000000000DF8A                 db    0
.rodata:000000000000DF8B                 db    0
.rodata:000000000000DF8C                 db    0
.rodata:000000000000DF8D                 db    0
.rodata:000000000000DF8E                 db    4
.rodata:000000000000DF8F                 db    0
.rodata:000000000000DF90                 db  6Eh ; n
.rodata:000000000000DF91                 db  6Fh ; o
.rodata:000000000000DF92                 db  63h ; c
.rodata:000000000000DF93                 db  61h ; a
.rodata:000000000000DF94                 db  63h ; c
.rodata:000000000000DF95                 db  68h ; h
.rodata:000000000000DF96                 db  65h ; e
.rodata:000000000000DF97                 db    0
.rodata:000000000000DF98                 db    0
.rodata:000000000000DF99                 db    0
.rodata:000000000000DF9A                 db    0
.rodata:000000000000DF9B                 db    0
.rodata:000000000000DF9C                 db    2
.rodata:000000000000DF9D                 db    0
.rodata:000000000000DF9E                 db    0
.rodata:000000000000DF9F                 db    0
.rodata:000000000000DFA0                 db  6Eh ; n
.rodata:000000000000DFA1                 db  6Fh ; o
.rodata:000000000000DFA2                 db  63h ; c
.rodata:000000000000DFA3                 db  74h ; t
.rodata:000000000000DFA4                 db  74h ; t
.rodata:000000000000DFA5                 db  79h ; y
.rodata:000000000000DFA6                 db    0
.rodata:000000000000DFA7                 db    0
.rodata:000000000000DFA8                 db    0
.rodata:000000000000DFA9                 db    0
.rodata:000000000000DFAA                 db    0
.rodata:000000000000DFAB                 db    0
.rodata:000000000000DFAC                 db    0
.rodata:000000000000DFAD                 db    1
.rodata:000000000000DFAE                 db    0
.rodata:000000000000DFAF                 db    0
.rodata:000000000000DFB0                 db  6Eh ; n
.rodata:000000000000DFB1                 db  6Fh ; o
.rodata:000000000000DFB2                 db  66h ; f
.rodata:000000000000DFB3                 db  6Fh ; o
.rodata:000000000000DFB4                 db  6Ch ; l
.rodata:000000000000DFB5                 db  6Ch ; l
.rodata:000000000000DFB6                 db  6Fh ; o
.rodata:000000000000DFB7                 db  77h ; w
.rodata:000000000000DFB8                 db    0
.rodata:000000000000DFB9                 db    0
.rodata:000000000000DFBA                 db    0
.rodata:000000000000DFBB                 db    0
.rodata:000000000000DFBC                 db    0
.rodata:000000000000DFBD                 db    0
.rodata:000000000000DFBE                 db    2
.rodata:000000000000DFBF                 db    0
.rodata:000000000000DFC0                 db  6Eh ; n
.rodata:000000000000DFC1                 db  6Fh ; o
.rodata:000000000000DFC2                 db  6Ch ; l
.rodata:000000000000DFC3                 db  69h ; i
.rodata:000000000000DFC4                 db  6Eh ; n
.rodata:000000000000DFC5                 db  6Bh ; k
.rodata:000000000000DFC6                 db  73h ; s
.rodata:000000000000DFC7                 db    0
.rodata:000000000000DFC8                 db    0
.rodata:000000000000DFC9                 db    0
.rodata:000000000000DFCA                 db    0
.rodata:000000000000DFCB                 db    0
.rodata:000000000000DFCC                 db    0
.rodata:000000000000DFCD                 db    0
.rodata:000000000000DFCE                 db    0
.rodata:000000000000DFCF                 db    0
.rodata:000000000000DFD0                 db  6Eh ; n
.rodata:000000000000DFD1                 db  6Fh ; o
.rodata:000000000000DFD2                 db  6Eh ; n
.rodata:000000000000DFD3                 db  62h ; b
.rodata:000000000000DFD4                 db  6Ch ; l
.rodata:000000000000DFD5                 db  6Fh ; o
.rodata:000000000000DFD6                 db  63h ; c
.rodata:000000000000DFD7                 db  6Bh ; k
.rodata:000000000000DFD8                 db    0
.rodata:000000000000DFD9                 db    0
.rodata:000000000000DFDA                 db    0
.rodata:000000000000DFDB                 db    0
.rodata:000000000000DFDC                 db    0
.rodata:000000000000DFDD                 db    8
.rodata:000000000000DFDE                 db    0
.rodata:000000000000DFDF                 db    0
.rodata:000000000000DFE0                 db  73h ; s
.rodata:000000000000DFE1                 db  79h ; y
.rodata:000000000000DFE2                 db  6Eh ; n
.rodata:000000000000DFE3                 db  63h ; c
.rodata:000000000000DFE4                 db    0
.rodata:000000000000DFE5                 db    0
.rodata:000000000000DFE6                 db    0
.rodata:000000000000DFE7                 db    0
.rodata:000000000000DFE8                 db    0
.rodata:000000000000DFE9                 db    0
.rodata:000000000000DFEA                 db    0
.rodata:000000000000DFEB                 db    0
.rodata:000000000000DFEC                 db    0
.rodata:000000000000DFED                 db  10h
.rodata:000000000000DFEE                 db  10h
.rodata:000000000000DFEF                 db    0
.rodata:000000000000DFF0                 db  74h ; t
.rodata:000000000000DFF1                 db  65h ; e
.rodata:000000000000DFF2                 db  78h ; x
.rodata:000000000000DFF3                 db  74h ; t
.rodata:000000000000DFF4                 db    0
.rodata:000000000000DFF5                 db    0
.rodata:000000000000DFF6                 db    0
.rodata:000000000000DFF7                 db    0
.rodata:000000000000DFF8                 db    0
.rodata:000000000000DFF9                 db    0
.rodata:000000000000DFFA                 db    0
.rodata:000000000000DFFB                 db    0
.rodata:000000000000DFFC                 db    0
.rodata:000000000000DFFD                 db    0
.rodata:000000000000DFFE                 db    0
.rodata:000000000000DFFF                 db    0
.rodata:000000000000E000                 db  66h ; f
.rodata:000000000000E001                 db  75h ; u
.rodata:000000000000E002                 db  6Ch ; l
.rodata:000000000000E003                 db  6Ch ; l
.rodata:000000000000E004                 db  62h ; b
.rodata:000000000000E005                 db  6Ch ; l
.rodata:000000000000E006                 db  6Fh ; o
.rodata:000000000000E007                 db  63h ; c
.rodata:000000000000E008                 db  6Bh ; k
.rodata:000000000000E009                 db    0
.rodata:000000000000E00A                 db    0
.rodata:000000000000E00B                 db    0
.rodata:000000000000E00C                 db    1
.rodata:000000000000E00D                 db    0
.rodata:000000000000E00E                 db    0
.rodata:000000000000E00F                 db    0
.rodata:000000000000E010                 db  63h ; c
.rodata:000000000000E011                 db  6Fh ; o
.rodata:000000000000E012                 db  75h ; u
.rodata:000000000000E013                 db  6Eh ; n
.rodata:000000000000E014                 db  74h ; t
.rodata:000000000000E015                 db  5Fh ; _
.rodata:000000000000E016                 db  62h ; b
.rodata:000000000000E017                 db  79h ; y
.rodata:000000000000E018                 db  74h ; t
.rodata:000000000000E019                 db  65h ; e
.rodata:000000000000E01A                 db  73h ; s
.rodata:000000000000E01B                 db    0
.rodata:000000000000E01C                 db    4
.rodata:000000000000E01D                 db    0
.rodata:000000000000E01E                 db    0
.rodata:000000000000E01F                 db    0
.rodata:000000000000E020                 db  73h ; s
.rodata:000000000000E021                 db  6Bh ; k
.rodata:000000000000E022                 db  69h ; i
.rodata:000000000000E023                 db  70h ; p
.rodata:000000000000E024                 db  5Fh ; _
.rodata:000000000000E025                 db  62h ; b
.rodata:000000000000E026                 db  79h ; y
.rodata:000000000000E027                 db  74h ; t
.rodata:000000000000E028                 db  65h ; e
.rodata:000000000000E029                 db  73h ; s
.rodata:000000000000E02A                 db    0
.rodata:000000000000E02B                 db    0
.rodata:000000000000E02C                 db    8
.rodata:000000000000E02D                 db    0
.rodata:000000000000E02E                 db    0
.rodata:000000000000E02F                 db    0
.rodata:000000000000E030                 db  73h ; s
.rodata:000000000000E031                 db  65h ; e
.rodata:000000000000E032                 db  65h ; e
.rodata:000000000000E033                 db  6Bh ; k
.rodata:000000000000E034                 db  5Fh ; _
.rodata:000000000000E035                 db  62h ; b
.rodata:000000000000E036                 db  79h ; y
.rodata:000000000000E037                 db  74h ; t
.rodata:000000000000E038                 db  65h ; e
.rodata:000000000000E039                 db  73h ; s
.rodata:000000000000E03A                 db    0
.rodata:000000000000E03B                 db    0
.rodata:000000000000E03C                 db  10h
.rodata:000000000000E03D                 db    0
.rodata:000000000000E03E                 db    0
.rodata:000000000000E03F                 db    0
.rodata:000000000000E040                 db    0
.rodata:000000000000E041                 db    0
.rodata:000000000000E042                 db    0
.rodata:000000000000E043                 db    0
.rodata:000000000000E044                 db    0
.rodata:000000000000E045                 db    0
.rodata:000000000000E046                 db    0
.rodata:000000000000E047                 db    0
.rodata:000000000000E048                 db    0
.rodata:000000000000E049                 db    0
.rodata:000000000000E04A                 db    0
.rodata:000000000000E04B                 db    0
.rodata:000000000000E04C                 db    0
.rodata:000000000000E04D                 db    0
.rodata:000000000000E04E                 db    0
.rodata:000000000000E04F                 db    0
.rodata:000000000000E050                 db    0
.rodata:000000000000E051                 db    0
.rodata:000000000000E052                 db    0
.rodata:000000000000E053                 db    0
.rodata:000000000000E054                 db    0
.rodata:000000000000E055                 db    0
.rodata:000000000000E056                 db    0
.rodata:000000000000E057                 db    0
.rodata:000000000000E058                 db    0
.rodata:000000000000E059                 db    0
.rodata:000000000000E05A                 db    0
.rodata:000000000000E05B                 db    0
.rodata:000000000000E05C                 db    0
.rodata:000000000000E05D                 db    0
.rodata:000000000000E05E                 db    0
.rodata:000000000000E05F                 db    0
.rodata:000000000000E060 conversions     db 'ascii',0            ; DATA XREF: main+A75↑o
.rodata:000000000000E066                 db    0
.rodata:000000000000E067                 db    0
.rodata:000000000000E068                 db    0
.rodata:000000000000E069                 db    0
.rodata:000000000000E06A                 db    0
.rodata:000000000000E06B                 db    0
.rodata:000000000000E06C                 db  11h
.rodata:000000000000E06D                 db    8
.rodata:000000000000E06E                 db    0
.rodata:000000000000E06F                 db    0
.rodata:000000000000E070                 db  65h ; e
.rodata:000000000000E071                 db  62h ; b
.rodata:000000000000E072                 db  63h ; c
.rodata:000000000000E073                 db  64h ; d
.rodata:000000000000E074                 db  69h ; i
.rodata:000000000000E075                 db  63h ; c
.rodata:000000000000E076                 db    0
.rodata:000000000000E077                 db    0
.rodata:000000000000E078                 db    0
.rodata:000000000000E079                 db    0
.rodata:000000000000E07A                 db    0
.rodata:000000000000E07B                 db    0
.rodata:000000000000E07C                 db  0Ah
.rodata:000000000000E07D                 db    8
.rodata:000000000000E07E                 db    0
.rodata:000000000000E07F                 db    0
.rodata:000000000000E080                 db  69h ; i
.rodata:000000000000E081                 db  62h ; b
.rodata:000000000000E082                 db  6Dh ; m
.rodata:000000000000E083                 db    0
.rodata:000000000000E084                 db    0
.rodata:000000000000E085                 db    0
.rodata:000000000000E086                 db    0
.rodata:000000000000E087                 db    0
.rodata:000000000000E088                 db    0
.rodata:000000000000E089                 db    0
.rodata:000000000000E08A                 db    0
.rodata:000000000000E08B                 db    0
.rodata:000000000000E08C                 db  0Ch
.rodata:000000000000E08D                 db    8
.rodata:000000000000E08E                 db    0
.rodata:000000000000E08F                 db    0
.rodata:000000000000E090                 db  62h ; b
.rodata:000000000000E091                 db  6Ch ; l
.rodata:000000000000E092                 db  6Fh ; o
.rodata:000000000000E093                 db  63h ; c
.rodata:000000000000E094                 db  6Bh ; k
.rodata:000000000000E095                 db    0
.rodata:000000000000E096                 db    0
.rodata:000000000000E097                 db    0
.rodata:000000000000E098                 db    0
.rodata:000000000000E099                 db    0
.rodata:000000000000E09A                 db    0
.rodata:000000000000E09B                 db    0
.rodata:000000000000E09C                 db    8
.rodata:000000000000E09D                 db    8
.rodata:000000000000E09E                 db    0
.rodata:000000000000E09F                 db    0
.rodata:000000000000E0A0                 db  75h ; u
.rodata:000000000000E0A1                 db  6Eh ; n
.rodata:000000000000E0A2                 db  62h ; b
.rodata:000000000000E0A3                 db  6Ch ; l
.rodata:000000000000E0A4                 db  6Fh ; o
.rodata:000000000000E0A5                 db  63h ; c
.rodata:000000000000E0A6                 db  6Bh ; k
.rodata:000000000000E0A7                 db    0
.rodata:000000000000E0A8                 db    0
.rodata:000000000000E0A9                 db    0
.rodata:000000000000E0AA                 db    0
.rodata:000000000000E0AB                 db    0
.rodata:000000000000E0AC                 db  10h
.rodata:000000000000E0AD                 db    8
.rodata:000000000000E0AE                 db    0
.rodata:000000000000E0AF                 db    0
.rodata:000000000000E0B0                 db  6Ch ; l
.rodata:000000000000E0B1                 db  63h ; c
.rodata:000000000000E0B2                 db  61h ; a
.rodata:000000000000E0B3                 db  73h ; s
.rodata:000000000000E0B4                 db  65h ; e
.rodata:000000000000E0B5                 db    0
.rodata:000000000000E0B6                 db    0
.rodata:000000000000E0B7                 db    0
.rodata:000000000000E0B8                 db    0
.rodata:000000000000E0B9                 db    0
.rodata:000000000000E0BA                 db    0
.rodata:000000000000E0BB                 db    0
.rodata:000000000000E0BC                 db  20h
.rodata:000000000000E0BD                 db    8
.rodata:000000000000E0BE                 db    0
.rodata:000000000000E0BF                 db    0
.rodata:000000000000E0C0                 db  75h ; u
.rodata:000000000000E0C1                 db  63h ; c
.rodata:000000000000E0C2                 db  61h ; a
.rodata:000000000000E0C3                 db  73h ; s
.rodata:000000000000E0C4                 db  65h ; e
.rodata:000000000000E0C5                 db    0
.rodata:000000000000E0C6                 db    0
.rodata:000000000000E0C7                 db    0
.rodata:000000000000E0C8                 db    0
.rodata:000000000000E0C9                 db    0
.rodata:000000000000E0CA                 db    0
.rodata:000000000000E0CB                 db    0
.rodata:000000000000E0CC                 db  40h ; @
.rodata:000000000000E0CD                 db    8
.rodata:000000000000E0CE                 db    0
.rodata:000000000000E0CF                 db    0
.rodata:000000000000E0D0                 db  73h ; s
.rodata:000000000000E0D1                 db  70h ; p
.rodata:000000000000E0D2                 db  61h ; a
.rodata:000000000000E0D3                 db  72h ; r
.rodata:000000000000E0D4                 db  73h ; s
.rodata:000000000000E0D5                 db  65h ; e
.rodata:000000000000E0D6                 db    0
.rodata:000000000000E0D7                 db    0
.rodata:000000000000E0D8                 db    0
.rodata:000000000000E0D9                 db    0
.rodata:000000000000E0DA                 db    0
.rodata:000000000000E0DB                 db    0
.rodata:000000000000E0DC                 db    0
.rodata:000000000000E0DD                 db    0
.rodata:000000000000E0DE                 db    1
.rodata:000000000000E0DF                 db    0
.rodata:000000000000E0E0                 db  73h ; s
.rodata:000000000000E0E1                 db  77h ; w
.rodata:000000000000E0E2                 db  61h ; a
.rodata:000000000000E0E3                 db  62h ; b
.rodata:000000000000E0E4                 db    0
.rodata:000000000000E0E5                 db    0
.rodata:000000000000E0E6                 db    0
.rodata:000000000000E0E7                 db    0
.rodata:000000000000E0E8                 db    0
.rodata:000000000000E0E9                 db    0
.rodata:000000000000E0EA                 db    0
.rodata:000000000000E0EB                 db    0
.rodata:000000000000E0EC                 db  80h
.rodata:000000000000E0ED                 db    8
.rodata:000000000000E0EE                 db    0
.rodata:000000000000E0EF                 db    0
.rodata:000000000000E0F0                 db  6Eh ; n
.rodata:000000000000E0F1                 db  6Fh ; o
.rodata:000000000000E0F2                 db  65h ; e
.rodata:000000000000E0F3                 db  72h ; r
.rodata:000000000000E0F4                 db  72h ; r
.rodata:000000000000E0F5                 db  6Fh ; o
.rodata:000000000000E0F6                 db  72h ; r
.rodata:000000000000E0F7                 db    0
.rodata:000000000000E0F8                 db    0
.rodata:000000000000E0F9                 db    0
.rodata:000000000000E0FA                 db    0
.rodata:000000000000E0FB                 db    0
.rodata:000000000000E0FC                 db    0
.rodata:000000000000E0FD                 db    1
.rodata:000000000000E0FE                 db    0
.rodata:000000000000E0FF                 db    0
.rodata:000000000000E100                 db  6Eh ; n
.rodata:000000000000E101                 db  6Fh ; o
.rodata:000000000000E102                 db  63h ; c
.rodata:000000000000E103                 db  72h ; r
.rodata:000000000000E104                 db  65h ; e
.rodata:000000000000E105                 db  61h ; a
.rodata:000000000000E106                 db  74h ; t
.rodata:000000000000E107                 db    0
.rodata:000000000000E108                 db    0
.rodata:000000000000E109                 db    0
.rodata:000000000000E10A                 db    0
.rodata:000000000000E10B                 db    0
.rodata:000000000000E10C                 db    0
.rodata:000000000000E10D                 db  10h
.rodata:000000000000E10E                 db    0
.rodata:000000000000E10F                 db    0
.rodata:000000000000E110                 db  65h ; e
.rodata:000000000000E111                 db  78h ; x
.rodata:000000000000E112                 db  63h ; c
.rodata:000000000000E113                 db  6Ch ; l
.rodata:000000000000E114                 db    0
.rodata:000000000000E115                 db    0
.rodata:000000000000E116                 db    0
.rodata:000000000000E117                 db    0
.rodata:000000000000E118                 db    0
.rodata:000000000000E119                 db    0
.rodata:000000000000E11A                 db    0
.rodata:000000000000E11B                 db    0
.rodata:000000000000E11C                 db    0
.rodata:000000000000E11D                 db  20h
.rodata:000000000000E11E                 db    0
.rodata:000000000000E11F                 db    0
.rodata:000000000000E120                 db  6Eh ; n
.rodata:000000000000E121                 db  6Fh ; o
.rodata:000000000000E122                 db  74h ; t
.rodata:000000000000E123                 db  72h ; r
.rodata:000000000000E124                 db  75h ; u
.rodata:000000000000E125                 db  6Eh ; n
.rodata:000000000000E126                 db  63h ; c
.rodata:000000000000E127                 db    0
.rodata:000000000000E128                 db    0
.rodata:000000000000E129                 db    0
.rodata:000000000000E12A                 db    0
.rodata:000000000000E12B                 db    0
.rodata:000000000000E12C                 db    0
.rodata:000000000000E12D                 db    2
.rodata:000000000000E12E                 db    0
.rodata:000000000000E12F                 db    0
.rodata:000000000000E130                 db  73h ; s
.rodata:000000000000E131                 db  79h ; y
.rodata:000000000000E132                 db  6Eh ; n
.rodata:000000000000E133                 db  63h ; c
.rodata:000000000000E134                 db    0
.rodata:000000000000E135                 db    0
.rodata:000000000000E136                 db    0
.rodata:000000000000E137                 db    0
.rodata:000000000000E138                 db    0
.rodata:000000000000E139                 db    0
.rodata:000000000000E13A                 db    0
.rodata:000000000000E13B                 db    0
.rodata:000000000000E13C                 db    0
.rodata:000000000000E13D                 db    4
.rodata:000000000000E13E                 db    0
.rodata:000000000000E13F                 db    0
.rodata:000000000000E140                 db  66h ; f
.rodata:000000000000E141                 db  64h ; d
.rodata:000000000000E142                 db  61h ; a
.rodata:000000000000E143                 db  74h ; t
.rodata:000000000000E144                 db  61h ; a
.rodata:000000000000E145                 db  73h ; s
.rodata:000000000000E146                 db  79h ; y
.rodata:000000000000E147                 db  6Eh ; n
.rodata:000000000000E148                 db  63h ; c
.rodata:000000000000E149                 db    0
.rodata:000000000000E14A                 db    0
.rodata:000000000000E14B                 db    0
.rodata:000000000000E14C                 db    0
.rodata:000000000000E14D                 db  40h ; @
.rodata:000000000000E14E                 db    0
.rodata:000000000000E14F                 db    0
.rodata:000000000000E150                 db  66h ; f
.rodata:000000000000E151                 db  73h ; s
.rodata:000000000000E152                 db  79h ; y
.rodata:000000000000E153                 db  6Eh ; n
.rodata:000000000000E154                 db  63h ; c
.rodata:000000000000E155                 db    0
.rodata:000000000000E156                 db    0
.rodata:000000000000E157                 db    0
.rodata:000000000000E158                 db    0
.rodata:000000000000E159                 db    0
.rodata:000000000000E15A                 db    0
.rodata:000000000000E15B                 db    0
.rodata:000000000000E15C                 db    0
.rodata:000000000000E15D                 db  80h
.rodata:000000000000E15E                 db    0
.rodata:000000000000E15F                 db    0
.rodata:000000000000E160                 db    0
.rodata:000000000000E161                 db    0
.rodata:000000000000E162                 db    0
.rodata:000000000000E163                 db    0
.rodata:000000000000E164                 db    0
.rodata:000000000000E165                 db    0
.rodata:000000000000E166                 db    0
.rodata:000000000000E167                 db    0
.rodata:000000000000E168                 db    0
.rodata:000000000000E169                 db    0
.rodata:000000000000E16A                 db    0
.rodata:000000000000E16B                 db    0
.rodata:000000000000E16C                 db    0
.rodata:000000000000E16D                 db    0
.rodata:000000000000E16E                 db    0
.rodata:000000000000E16F                 db    0
.rodata:000000000000E170 qword_E170      dq 41CDCD6500000000h    ; DATA XREF: print_xfer_stats:loc_3E55↑r
.rodata:000000000000E178 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000E17D ; const char aWriteError[]
.rodata:000000000000E17D aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_5E93↑o
.rodata:000000000000E189 asc_E189        db '.',0                ; DATA XREF: human_readable+84↑o
.rodata:000000000000E18B a0lf            db '%.0Lf',0            ; DATA XREF: human_readable+310↑o
.rodata:000000000000E18B                                         ; human_readable+749↑o
.rodata:000000000000E191 a1lf            db '%.1Lf',0            ; DATA XREF: human_readable+1A1↑o
.rodata:000000000000E191                                         ; human_readable+6F4↑o
.rodata:000000000000E197 ; const char aBlockSize[]
.rodata:000000000000E197 aBlockSize      db 'BLOCK_SIZE',0       ; DATA XREF: human_options:loc_6C70↑o
.rodata:000000000000E1A2 ; const char aBlocksize[]
.rodata:000000000000E1A2 aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: human_options+158↑o
.rodata:000000000000E1AC aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.rodata:000000000000E1AC                                         ; DATA XREF: human_options:loc_6BC8↑o
.rodata:000000000000E1BE aHumanReadable  db 'human-readable',0   ; DATA XREF: .data.rel.ro:block_size_args↓o
.rodata:000000000000E1CD aSi             db 'si',0               ; DATA XREF: .data.rel.ro:0000000000210AA8↓o
.rodata:000000000000E1D0 block_size_opts db 0B0h                 ; DATA XREF: human_options:loc_6B6C↑o
.rodata:000000000000E1D0                                         ; human_options+5B↑o
.rodata:000000000000E1D1                 db    0
.rodata:000000000000E1D2                 db    0
.rodata:000000000000E1D3                 db    0
.rodata:000000000000E1D4                 db  90h
.rodata:000000000000E1D5                 db    0
.rodata:000000000000E1D6                 db    0
.rodata:000000000000E1D7                 db    0
.rodata:000000000000E1D8 power_letter    db    0                 ; DATA XREF: human_readable:loc_64EC↑o
.rodata:000000000000E1D9                 db  4Bh ; K
.rodata:000000000000E1DA                 db  4Dh ; M
.rodata:000000000000E1DB                 db  47h ; G
.rodata:000000000000E1DC                 db  54h ; T
.rodata:000000000000E1DD                 db  50h ; P
.rodata:000000000000E1DE                 db  45h ; E
.rodata:000000000000E1DF                 db  5Ah ; Z
.rodata:000000000000E1E0                 db  59h ; Y
.rodata:000000000000E1E1                 db    0
.rodata:000000000000E1E2                 db    0
.rodata:000000000000E1E3                 db    0
.rodata:000000000000E1E4 flt_E1E4        dd 9.223372e18          ; DATA XREF: adjust_value↑r
.rodata:000000000000E1E8 flt_E1E8        dd 1.8446744e19         ; DATA XREF: adjust_value+42↑r
.rodata:000000000000E1E8                                         ; adjust_value:loc_6110↑r ...
.rodata:000000000000E1EC flt_E1EC        dd 10.0                 ; DATA XREF: human_readable+1FC↑r
.rodata:000000000000E1EC                                         ; human_readable+73B↑r ...
.rodata:000000000000E1F0 tbyte_E1F0      dt 1.8446744073709551615e19
.rodata:000000000000E1F0                                         ; DATA XREF: human_readable+189↑r
.rodata:000000000000E1F0                                         ; human_readable+2FE↑r ...
.rodata:000000000000E1FA                 align 20h
.rodata:000000000000E200 ; const char shortopts[2]
.rodata:000000000000E200 shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:000000000000E200                                         ; parse_gnu_standard_options_only+72↑o
.rodata:000000000000E202 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000E207                 align 8
.rodata:000000000000E208 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000E208                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000E240 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000E248 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000E24C unk_E24C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000E24D                 db  80h
.rodata:000000000000E24E                 db  98h
.rodata:000000000000E24F                 db    0
.rodata:000000000000E250 unk_E250        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000E251                 db  80h
.rodata:000000000000E252                 db  99h
.rodata:000000000000E253                 db    0
.rodata:000000000000E254 unk_E254        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000E255                 db    7
.rodata:000000000000E256                 db  65h ; e
.rodata:000000000000E257                 db    0
.rodata:000000000000E258 unk_E258        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000E259                 db 0AFh
.rodata:000000000000E25A                 db    0
.rodata:000000000000E25B unk_E25B        db  22h ; "             ; DATA XREF: gettext_quote:loc_7060↑o
.rodata:000000000000E25B                                         ; quotearg_buffer_restyled:loc_7E1B↑o ...
.rodata:000000000000E25C                 db    0
.rodata:000000000000E25D ; const char asc_E25D[2]
.rodata:000000000000E25D asc_E25D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000E25D                                         ; quotearg_buffer_restyled:loc_71E3↑o ...
.rodata:000000000000E25F ; const char asc_E25F[2]
.rodata:000000000000E25F asc_E25F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000E25F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000E261 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000E269 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000210B28↓o
.rodata:000000000000E26F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000210B30↓o
.rodata:000000000000E27C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000210B38↓o
.rodata:000000000000E27C                                         ; .data.rel.ro:0000000000210B58↓o
.rodata:000000000000E289 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000E289                                         ; DATA XREF: .data.rel.ro:0000000000210B40↓o
.rodata:000000000000E29D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000210B48↓o
.rodata:000000000000E29F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000210B50↓o
.rodata:000000000000E2A7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000210B68↓o
.rodata:000000000000E2AF                 align 20h
.rodata:000000000000E2C0 jpt_71C1        dd offset loc_7F6A - 0E2C0h
.rodata:000000000000E2C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000E2C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000E2C0                 dd offset loc_71C3 - 0E2C0h ; jump table for switch statement
.rodata:000000000000E2C0                 dd offset loc_8198 - 0E2C0h
.rodata:000000000000E2C0                 dd offset loc_7FA4 - 0E2C0h
.rodata:000000000000E2C0                 dd offset loc_7D94 - 0E2C0h
.rodata:000000000000E2C0                 dd offset loc_7DF0 - 0E2C0h
.rodata:000000000000E2C0                 dd offset loc_7E45 - 0E2C0h
.rodata:000000000000E2C0                 dd offset loc_7E8A - 0E2C0h
.rodata:000000000000E2C0                 dd offset loc_7EC4 - 0E2C0h
.rodata:000000000000E2C0                 dd offset loc_7EC4 - 0E2C0h
.rodata:000000000000E2C0                 dd offset loc_7EC4 - 0E2C0h
.rodata:000000000000E2EC jpt_731E        dd offset loc_7540 - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000E2EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh ; jump table for switch statement
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset loc_7580 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7488 - 0E2ECh, offset loc_7448 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7610 - 0E2ECh, offset loc_7600 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75F0 - 0E2ECh, offset loc_75E0 - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset def_731E - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75D0 - 0E2ECh, offset loc_75C0 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75C0 - 0E2ECh, offset loc_7590 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75C0 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75C0 - 0E2ECh, offset loc_7423 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75C0 - 0E2ECh, offset loc_75C0 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75C0 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_75C0 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75C0 - 0E2ECh, offset loc_75C0 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75C0 - 0E2ECh, offset loc_73F3 - 0E2ECh
.rodata:000000000000E2EC                 dd offset def_731E - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_75C0 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7498 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75C0 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75C0 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7568 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7568 - 0E2ECh, offset loc_7323 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_75C0 - 0E2ECh, offset loc_7323 - 0E2ECh
.rodata:000000000000E2EC                 dd offset loc_7590 - 0E2ECh
.rodata:000000000000E4E8 jpt_76AA        dd offset loc_7710 - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000E4E8                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h ; jump table for switch statement
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset loc_7700 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_7850 - 0E4E8h, offset loc_7838 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_76E8 - 0E4E8h, offset loc_7828 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_76D0 - 0E4E8h, offset loc_7810 - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset def_76AA - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77F8 - 0E4E8h, offset loc_77E0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77E0 - 0E4E8h, offset loc_77C8 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77E0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77E0 - 0E4E8h, offset loc_7420 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77E0 - 0E4E8h, offset loc_77E0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77E0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77E0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77E0 - 0E4E8h, offset loc_77E0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77E0 - 0E4E8h, offset loc_73F0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset def_76AA - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77E0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_76B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77E0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77E0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_77B0 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77B0 - 0E4E8h, offset loc_7320 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77E0 - 0E4E8h, offset loc_7320 - 0E4E8h
.rodata:000000000000E4E8                 dd offset loc_77C8 - 0E4E8h
.rodata:000000000000E6E4                 align 20h
.rodata:000000000000E700                 public quoting_style_vals
.rodata:000000000000E700 quoting_style_vals db    0
.rodata:000000000000E701                 db    0
.rodata:000000000000E702                 db    0
.rodata:000000000000E703                 db    0
.rodata:000000000000E704                 db    1
.rodata:000000000000E705                 db    0
.rodata:000000000000E706                 db    0
.rodata:000000000000E707                 db    0
.rodata:000000000000E708                 db    2
.rodata:000000000000E709                 db    0
.rodata:000000000000E70A                 db    0
.rodata:000000000000E70B                 db    0
.rodata:000000000000E70C                 db    3
.rodata:000000000000E70D                 db    0
.rodata:000000000000E70E                 db    0
.rodata:000000000000E70F                 db    0
.rodata:000000000000E710                 db    4
.rodata:000000000000E711                 db    0
.rodata:000000000000E712                 db    0
.rodata:000000000000E713                 db    0
.rodata:000000000000E714                 db    5
.rodata:000000000000E715                 db    0
.rodata:000000000000E716                 db    0
.rodata:000000000000E717                 db    0
.rodata:000000000000E718                 db    6
.rodata:000000000000E719                 db    0
.rodata:000000000000E71A                 db    0
.rodata:000000000000E71B                 db    0
.rodata:000000000000E71C                 db    7
.rodata:000000000000E71D                 db    0
.rodata:000000000000E71E                 db    0
.rodata:000000000000E71F                 db    0
.rodata:000000000000E720                 db    8
.rodata:000000000000E721                 db    0
.rodata:000000000000E722                 db    0
.rodata:000000000000E723                 db    0
.rodata:000000000000E724                 db    9
.rodata:000000000000E725                 db    0
.rodata:000000000000E726                 db    0
.rodata:000000000000E727                 db    0
.rodata:000000000000E728 ; const char aUnableToDispla[]
.rodata:000000000000E728 aUnableToDispla db 'unable to display error message',0
.rodata:000000000000E728                                         ; DATA XREF: verror_at_line:loc_8D57↑o
.rodata:000000000000E748 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000E754 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000E75B ; const char aC_0[]
.rodata:000000000000E75B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_8DDC↑o
.rodata:000000000000E75F ; const char aWrittenByS[]
.rodata:000000000000E75F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000E75F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000E76F ; const char aWrittenBySAndS[]
.rodata:000000000000E76F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000E76F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000E786 ; const char aWrittenBySSAnd[]
.rodata:000000000000E786 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000E786                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000E7A2 ; const char aReportBugsToS[]
.rodata:000000000000E7A2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000E7A2                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000E7B7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000E7B7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000E7CD ; const char aSHomePageS[]
.rodata:000000000000E7CD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000E7CD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000E7E1                 align 8
.rodata:000000000000E7E8 ; const char aLicenseGplv3Gn[]
.rodata:000000000000E7E8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000E7E8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000E7E8                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000E7E8                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000E7E8                 db '.',0Ah
.rodata:000000000000E7E8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000E7E8                 db 0Ah,0
.rodata:000000000000E8B4                 align 8
.rodata:000000000000E8B8 ; const char aWrittenBySSSAn[]
.rodata:000000000000E8B8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E8B8                                         ; DATA XREF: version_etc_arn:loc_9030↑o
.rodata:000000000000E8B8                 db 'and %s.',0Ah,0
.rodata:000000000000E8D8 ; const char aWrittenBySSSSA[]
.rodata:000000000000E8D8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E8D8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000E8D8                 db '%s, and %s.',0Ah,0
.rodata:000000000000E8FC                 align 20h
.rodata:000000000000E900 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000E900 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E900                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000E900                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000E928 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000E928 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E928                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000E928                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000E954                 align 8
.rodata:000000000000E958 ; const char aWrittenBySSSSS[]
.rodata:000000000000E958 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E958                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000E958                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000E958                 db 'and %s.',0Ah,0
.rodata:000000000000E988 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000E988 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E988                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000E988                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000E988                 db '%s, and %s.',0Ah,0
.rodata:000000000000E9BC                 align 20h
.rodata:000000000000E9C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E9C0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000E9C0                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000E9C0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000E9FC                 align 20h
.rodata:000000000000EA00 ; const char aGeneralHelpUsi[]
.rodata:000000000000EA00 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000EA00                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000EA00                 db 0
.rodata:000000000000EA41                 align 4
.rodata:000000000000EA44 jpt_8E44        dd offset loc_8EC6 - 0EA44h
.rodata:000000000000EA44                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000EA44                                         ; version_etc_arn+9D↑r
.rodata:000000000000EA44                 dd offset loc_8F58 - 0EA44h ; jump table for switch statement
.rodata:000000000000EA44                 dd offset loc_8F98 - 0EA44h
.rodata:000000000000EA44                 dd offset loc_8FE0 - 0EA44h
.rodata:000000000000EA44                 dd offset loc_9030 - 0EA44h
.rodata:000000000000EA44                 dd offset loc_9088 - 0EA44h
.rodata:000000000000EA44                 dd offset loc_90B8 - 0EA44h
.rodata:000000000000EA44                 dd offset loc_9120 - 0EA44h
.rodata:000000000000EA44                 dd offset loc_8E50 - 0EA44h
.rodata:000000000000EA44                 dd offset loc_8F00 - 0EA44h
.rodata:000000000000EA6C                 align 20h
.rodata:000000000000EA80                 public version_etc_copyright
.rodata:000000000000EA80 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000EA80                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000EAAF ; const char aMemoryExhauste_1[]
.rodata:000000000000EAAF aMemoryExhauste_1 db 'memory exhausted',0
.rodata:000000000000EAAF                                         ; DATA XREF: xalloc_die↑o
.rodata:000000000000EAC0 ; const char file[]
.rodata:000000000000EAC0 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000EAC0                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:000000000000EAE0 ; const char assertion[]
.rodata:000000000000EAE0 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000EAE0                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:000000000000EB06                 align 8
.rodata:000000000000EB08 jpt_9826        dd offset loc_9976 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000000EB08                                         ; xstrtoumax+1CF↑r
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset loc_9953 - 0EB08h ; jump table for switch statement
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset loc_998C - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset loc_990F - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset loc_9828 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset loc_9930 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset loc_98EF - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset loc_98CA - 0EB08h
.rodata:000000000000EB08                 dd offset loc_98A4 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset loc_988D - 0EB08h, offset loc_9850 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset loc_998C - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset loc_990F - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset loc_9828 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset loc_98EF - 0EB08h, offset def_9826 - 0EB08h
.rodata:000000000000EB08                 dd offset def_9826 - 0EB08h, offset loc_9877 - 0EB08h
.rodata:000000000000EBE0 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000EBE0 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:000000000000EBE0                                         ; DATA XREF: xstrtoumax:loc_99D5↑o
.rodata:000000000000EBEB ; const char aInvalidArgumen[]
.rodata:000000000000EBEB aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:000000000000EBEB                                         ; DATA XREF: argmatch_invalid:loc_A2B0↑o
.rodata:000000000000EC06 ; const char aAmbiguousArgum[]
.rodata:000000000000EC06 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:000000000000EC06                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:000000000000EC23 ; const char aValidArguments[]
.rodata:000000000000EC23 aValidArguments db 'Valid arguments are:',0
.rodata:000000000000EC23                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:000000000000EC38 aS_0            db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:000000000000EC38                 db '  - %s',0
.rodata:000000000000EC40 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000EC42 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_A4F0↑o
.rodata:000000000000EC48 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000EC48                                         ; locale_charset:loc_A540↑o
.rodata:000000000000EC4E                 align 10h
.rodata:000000000000EC50 jpt_AAAB        dd offset def_AAAB - 0EC50h
.rodata:000000000000EC50                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:000000000000EC50                                         ; vasnprintf+554↑r
.rodata:000000000000EC50                 dd offset loc_AF10 - 0EC50h ; jump table for switch statement
.rodata:000000000000EC50                 dd offset loc_AEE0 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AE58 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AE18 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_ABE8 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_ABE8 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AAB0 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AAB0 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AAB0 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AAB0 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AD98 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AD10 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_ABE8 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_ABE8 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AAB0 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AAB0 - 0EC50h
.rodata:000000000000EC50                 dd offset loc_AAB0 - 0EC50h
.rodata:000000000000EC98 jpt_B050        dd offset loc_B2C0 - 0EC98h
.rodata:000000000000EC98                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:000000000000EC98                                         ; vasnprintf+AF9↑r
.rodata:000000000000EC98                 dd offset loc_B2E0 - 0EC98h ; jump table for switch statement
.rodata:000000000000EC98                 dd offset loc_B2D0 - 0EC98h
.rodata:000000000000EC98                 dd offset loc_B190 - 0EC98h
.rodata:000000000000EC98                 dd offset loc_B190 - 0EC98h
.rodata:000000000000ECAC aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:000000000000ECB3                 align 20h
.rodata:000000000000ECC0 jpt_B6A6        dd offset def_B6A6 - 0ECC0h
.rodata:000000000000ECC0                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:000000000000ECC0                                         ; printf_fetchargs+2F↑r
.rodata:000000000000ECC0                 dd offset loc_B72C - 0ECC0h ; jump table for switch statement
.rodata:000000000000ECC0                 dd offset loc_B72C - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B74E - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B74E - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B70A - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B70A - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6E6 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6E6 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6E6 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6E6 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B7A2 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6B0 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B70A - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B70A - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B774 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B7D0 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6E6 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6E6 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6E6 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6E6 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6E6 - 0ECC0h
.rodata:000000000000ECC0                 dd offset loc_B6E6 - 0ECC0h
.rodata:000000000000ED1C                 align 20h
.rodata:000000000000ED20 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:000000000000ED21                 db    0
.rodata:000000000000ED22                 db    0
.rodata:000000000000ED23                 db    0
.rodata:000000000000ED24                 db  4Eh ; N
.rodata:000000000000ED25                 db    0
.rodata:000000000000ED26                 db    0
.rodata:000000000000ED27                 db    0
.rodata:000000000000ED28                 db  55h ; U
.rodata:000000000000ED29                 db    0
.rodata:000000000000ED2A                 db    0
.rodata:000000000000ED2B                 db    0
.rodata:000000000000ED2C                 db  4Ch ; L
.rodata:000000000000ED2D                 db    0
.rodata:000000000000ED2E                 db    0
.rodata:000000000000ED2F                 db    0
.rodata:000000000000ED30                 db  4Ch ; L
.rodata:000000000000ED31                 db    0
.rodata:000000000000ED32                 db    0
.rodata:000000000000ED33                 db    0
.rodata:000000000000ED34                 db  29h ; )
.rodata:000000000000ED35                 db    0
.rodata:000000000000ED36                 db    0
.rodata:000000000000ED37                 db    0
.rodata:000000000000ED38                 db    0
.rodata:000000000000ED39                 db    0
.rodata:000000000000ED3A                 db    0
.rodata:000000000000ED3B                 db    0
.rodata:000000000000ED3C jpt_BAB5        dd offset loc_BB2B - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                                         ; DATA XREF: printf_parse+234↑o
.rodata:000000000000ED3C                                         ; printf_parse+23E↑r
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch ; jump table for switch statement
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_C02B - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_C04C - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_C02B - 0ED3Ch, offset loc_C02B - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_C02B - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_BAB7 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset loc_C05C - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_C02B - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_BFB8 - 0ED3Ch, offset loc_BFCB - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_C02B - 0ED3Ch, offset loc_C02B - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_C02B - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_BFCB - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset loc_BF6C - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_C05C - 0ED3Ch, offset loc_C0B0 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_C018 - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset loc_C05C - 0ED3Ch, offset def_BAB5 - 0ED3Ch
.rodata:000000000000ED3C                 dd offset def_BAB5 - 0ED3Ch, offset loc_C05C - 0ED3Ch
.rodata:000000000000ED3C _rodata         ends
.rodata:000000000000ED3C
.eh_frame_hdr:000000000000EE8C ; ===========================================================================
.eh_frame_hdr:000000000000EE8C
.eh_frame_hdr:000000000000EE8C ; Segment type: Pure data
.eh_frame_hdr:000000000000EE8C ; Segment permissions: Read
.eh_frame_hdr:000000000000EE8C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000EE8C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000EE8C                 ;org 0EE8Ch
.eh_frame_hdr:000000000000EE8C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000EE8D                 db  1Bh
.eh_frame_hdr:000000000000EE8E                 db    3
.eh_frame_hdr:000000000000EE8F                 db  3Bh ; ;
.eh_frame_hdr:000000000000EE90                 db 0D0h
.eh_frame_hdr:000000000000EE91                 db    3
.eh_frame_hdr:000000000000EE92                 db    0
.eh_frame_hdr:000000000000EE93                 db    0
.eh_frame_hdr:000000000000EE94                 db  79h ; y
.eh_frame_hdr:000000000000EE95                 db    0
.eh_frame_hdr:000000000000EE96                 db    0
.eh_frame_hdr:000000000000EE97                 db    0
.eh_frame_hdr:000000000000EE98                 db  74h ; t
.eh_frame_hdr:000000000000EE99                 db  2Bh ; +
.eh_frame_hdr:000000000000EE9A                 db 0FFh
.eh_frame_hdr:000000000000EE9B                 db 0FFh
.eh_frame_hdr:000000000000EE9C                 db  1Ch
.eh_frame_hdr:000000000000EE9D                 db    4
.eh_frame_hdr:000000000000EE9E                 db    0
.eh_frame_hdr:000000000000EE9F                 db    0
.eh_frame_hdr:000000000000EEA0                 db  14h
.eh_frame_hdr:000000000000EEA1                 db  30h ; 0
.eh_frame_hdr:000000000000EEA2                 db 0FFh
.eh_frame_hdr:000000000000EEA3                 db 0FFh
.eh_frame_hdr:000000000000EEA4                 db  44h ; D
.eh_frame_hdr:000000000000EEA5                 db    4
.eh_frame_hdr:000000000000EEA6                 db    0
.eh_frame_hdr:000000000000EEA7                 db    0
.eh_frame_hdr:000000000000EEA8                 db  24h ; $
.eh_frame_hdr:000000000000EEA9                 db  30h ; 0
.eh_frame_hdr:000000000000EEAA                 db 0FFh
.eh_frame_hdr:000000000000EEAB                 db 0FFh
.eh_frame_hdr:000000000000EEAC                 db  18h
.eh_frame_hdr:000000000000EEAD                 db  0Ah
.eh_frame_hdr:000000000000EEAE                 db    0
.eh_frame_hdr:000000000000EEAF                 db    0
.eh_frame_hdr:000000000000EEB0                 db 0F4h
.eh_frame_hdr:000000000000EEB1                 db  4Dh ; M
.eh_frame_hdr:000000000000EEB2                 db 0FFh
.eh_frame_hdr:000000000000EEB3                 db 0FFh
.eh_frame_hdr:000000000000EEB4                 db 0ECh
.eh_frame_hdr:000000000000EEB5                 db    3
.eh_frame_hdr:000000000000EEB6                 db    0
.eh_frame_hdr:000000000000EEB7                 db    0
.eh_frame_hdr:000000000000EEB8                 db    4
.eh_frame_hdr:000000000000EEB9                 db  4Fh ; O
.eh_frame_hdr:000000000000EEBA                 db 0FFh
.eh_frame_hdr:000000000000EEBB                 db 0FFh
.eh_frame_hdr:000000000000EEBC                 db  5Ch ; \
.eh_frame_hdr:000000000000EEBD                 db    4
.eh_frame_hdr:000000000000EEBE                 db    0
.eh_frame_hdr:000000000000EEBF                 db    0
.eh_frame_hdr:000000000000EEC0                 db  14h
.eh_frame_hdr:000000000000EEC1                 db  4Fh ; O
.eh_frame_hdr:000000000000EEC2                 db 0FFh
.eh_frame_hdr:000000000000EEC3                 db 0FFh
.eh_frame_hdr:000000000000EEC4                 db  70h ; p
.eh_frame_hdr:000000000000EEC5                 db    4
.eh_frame_hdr:000000000000EEC6                 db    0
.eh_frame_hdr:000000000000EEC7                 db    0
.eh_frame_hdr:000000000000EEC8                 db  24h ; $
.eh_frame_hdr:000000000000EEC9                 db  4Fh ; O
.eh_frame_hdr:000000000000EECA                 db 0FFh
.eh_frame_hdr:000000000000EECB                 db 0FFh
.eh_frame_hdr:000000000000EECC                 db  84h
.eh_frame_hdr:000000000000EECD                 db    4
.eh_frame_hdr:000000000000EECE                 db    0
.eh_frame_hdr:000000000000EECF                 db    0
.eh_frame_hdr:000000000000EED0                 db 0B4h
.eh_frame_hdr:000000000000EED1                 db  52h ; R
.eh_frame_hdr:000000000000EED2                 db 0FFh
.eh_frame_hdr:000000000000EED3                 db 0FFh
.eh_frame_hdr:000000000000EED4                 db 0F0h
.eh_frame_hdr:000000000000EED5                 db    4
.eh_frame_hdr:000000000000EED6                 db    0
.eh_frame_hdr:000000000000EED7                 db    0
.eh_frame_hdr:000000000000EED8                 db 0C4h
.eh_frame_hdr:000000000000EED9                 db  53h ; S
.eh_frame_hdr:000000000000EEDA                 db 0FFh
.eh_frame_hdr:000000000000EEDB                 db 0FFh
.eh_frame_hdr:000000000000EEDC                 db  1Ch
.eh_frame_hdr:000000000000EEDD                 db    5
.eh_frame_hdr:000000000000EEDE                 db    0
.eh_frame_hdr:000000000000EEDF                 db    0
.eh_frame_hdr:000000000000EEE0                 db  14h
.eh_frame_hdr:000000000000EEE1                 db  55h ; U
.eh_frame_hdr:000000000000EEE2                 db 0FFh
.eh_frame_hdr:000000000000EEE3                 db 0FFh
.eh_frame_hdr:000000000000EEE4                 db  58h ; X
.eh_frame_hdr:000000000000EEE5                 db    5
.eh_frame_hdr:000000000000EEE6                 db    0
.eh_frame_hdr:000000000000EEE7                 db    0
.eh_frame_hdr:000000000000EEE8                 db  24h ; $
.eh_frame_hdr:000000000000EEE9                 db  56h ; V
.eh_frame_hdr:000000000000EEEA                 db 0FFh
.eh_frame_hdr:000000000000EEEB                 db 0FFh
.eh_frame_hdr:000000000000EEEC                 db  94h
.eh_frame_hdr:000000000000EEED                 db    5
.eh_frame_hdr:000000000000EEEE                 db    0
.eh_frame_hdr:000000000000EEEF                 db    0
.eh_frame_hdr:000000000000EEF0                 db  24h ; $
.eh_frame_hdr:000000000000EEF1                 db  57h ; W
.eh_frame_hdr:000000000000EEF2                 db 0FFh
.eh_frame_hdr:000000000000EEF3                 db 0FFh
.eh_frame_hdr:000000000000EEF4                 db 0D8h
.eh_frame_hdr:000000000000EEF5                 db    5
.eh_frame_hdr:000000000000EEF6                 db    0
.eh_frame_hdr:000000000000EEF7                 db    0
.eh_frame_hdr:000000000000EEF8                 db 0A4h
.eh_frame_hdr:000000000000EEF9                 db  58h ; X
.eh_frame_hdr:000000000000EEFA                 db 0FFh
.eh_frame_hdr:000000000000EEFB                 db 0FFh
.eh_frame_hdr:000000000000EEFC                 db  24h ; $
.eh_frame_hdr:000000000000EEFD                 db    6
.eh_frame_hdr:000000000000EEFE                 db    0
.eh_frame_hdr:000000000000EEFF                 db    0
.eh_frame_hdr:000000000000EF00                 db 0E4h
.eh_frame_hdr:000000000000EF01                 db  58h ; X
.eh_frame_hdr:000000000000EF02                 db 0FFh
.eh_frame_hdr:000000000000EF03                 db 0FFh
.eh_frame_hdr:000000000000EF04                 db  40h ; @
.eh_frame_hdr:000000000000EF05                 db    6
.eh_frame_hdr:000000000000EF06                 db    0
.eh_frame_hdr:000000000000EF07                 db    0
.eh_frame_hdr:000000000000EF08                 db    4
.eh_frame_hdr:000000000000EF09                 db  5Ah ; Z
.eh_frame_hdr:000000000000EF0A                 db 0FFh
.eh_frame_hdr:000000000000EF0B                 db 0FFh
.eh_frame_hdr:000000000000EF0C                 db  9Ch
.eh_frame_hdr:000000000000EF0D                 db    6
.eh_frame_hdr:000000000000EF0E                 db    0
.eh_frame_hdr:000000000000EF0F                 db    0
.eh_frame_hdr:000000000000EF10                 db 0B4h
.eh_frame_hdr:000000000000EF11                 db  5Ah ; Z
.eh_frame_hdr:000000000000EF12                 db 0FFh
.eh_frame_hdr:000000000000EF13                 db 0FFh
.eh_frame_hdr:000000000000EF14                 db 0C8h
.eh_frame_hdr:000000000000EF15                 db    6
.eh_frame_hdr:000000000000EF16                 db    0
.eh_frame_hdr:000000000000EF17                 db    0
.eh_frame_hdr:000000000000EF18                 db  94h
.eh_frame_hdr:000000000000EF19                 db  5Bh ; [
.eh_frame_hdr:000000000000EF1A                 db 0FFh
.eh_frame_hdr:000000000000EF1B                 db 0FFh
.eh_frame_hdr:000000000000EF1C                 db 0F4h
.eh_frame_hdr:000000000000EF1D                 db    6
.eh_frame_hdr:000000000000EF1E                 db    0
.eh_frame_hdr:000000000000EF1F                 db    0
.eh_frame_hdr:000000000000EF20                 db 0E4h
.eh_frame_hdr:000000000000EF21                 db  5Bh ; [
.eh_frame_hdr:000000000000EF22                 db 0FFh
.eh_frame_hdr:000000000000EF23                 db 0FFh
.eh_frame_hdr:000000000000EF24                 db  30h ; 0
.eh_frame_hdr:000000000000EF25                 db    7
.eh_frame_hdr:000000000000EF26                 db    0
.eh_frame_hdr:000000000000EF27                 db    0
.eh_frame_hdr:000000000000EF28                 db    4
.eh_frame_hdr:000000000000EF29                 db  5Dh ; ]
.eh_frame_hdr:000000000000EF2A                 db 0FFh
.eh_frame_hdr:000000000000EF2B                 db 0FFh
.eh_frame_hdr:000000000000EF2C                 db  6Ch ; l
.eh_frame_hdr:000000000000EF2D                 db    7
.eh_frame_hdr:000000000000EF2E                 db    0
.eh_frame_hdr:000000000000EF2F                 db    0
.eh_frame_hdr:000000000000EF30                 db  74h ; t
.eh_frame_hdr:000000000000EF31                 db  5Dh ; ]
.eh_frame_hdr:000000000000EF32                 db 0FFh
.eh_frame_hdr:000000000000EF33                 db 0FFh
.eh_frame_hdr:000000000000EF34                 db 0BCh
.eh_frame_hdr:000000000000EF35                 db    7
.eh_frame_hdr:000000000000EF36                 db    0
.eh_frame_hdr:000000000000EF37                 db    0
.eh_frame_hdr:000000000000EF38                 db  94h
.eh_frame_hdr:000000000000EF39                 db  5Dh ; ]
.eh_frame_hdr:000000000000EF3A                 db 0FFh
.eh_frame_hdr:000000000000EF3B                 db 0FFh
.eh_frame_hdr:000000000000EF3C                 db 0D4h
.eh_frame_hdr:000000000000EF3D                 db    7
.eh_frame_hdr:000000000000EF3E                 db    0
.eh_frame_hdr:000000000000EF3F                 db    0
.eh_frame_hdr:000000000000EF40                 db  54h ; T
.eh_frame_hdr:000000000000EF41                 db  5Eh ; ^
.eh_frame_hdr:000000000000EF42                 db 0FFh
.eh_frame_hdr:000000000000EF43                 db 0FFh
.eh_frame_hdr:000000000000EF44                 db    0
.eh_frame_hdr:000000000000EF45                 db    8
.eh_frame_hdr:000000000000EF46                 db    0
.eh_frame_hdr:000000000000EF47                 db    0
.eh_frame_hdr:000000000000EF48                 db  14h
.eh_frame_hdr:000000000000EF49                 db  5Fh ; _
.eh_frame_hdr:000000000000EF4A                 db 0FFh
.eh_frame_hdr:000000000000EF4B                 db 0FFh
.eh_frame_hdr:000000000000EF4C                 db  2Ch ; ,
.eh_frame_hdr:000000000000EF4D                 db    8
.eh_frame_hdr:000000000000EF4E                 db    0
.eh_frame_hdr:000000000000EF4F                 db    0
.eh_frame_hdr:000000000000EF50                 db  64h ; d
.eh_frame_hdr:000000000000EF51                 db  5Fh ; _
.eh_frame_hdr:000000000000EF52                 db 0FFh
.eh_frame_hdr:000000000000EF53                 db 0FFh
.eh_frame_hdr:000000000000EF54                 db  44h ; D
.eh_frame_hdr:000000000000EF55                 db    8
.eh_frame_hdr:000000000000EF56                 db    0
.eh_frame_hdr:000000000000EF57                 db    0
.eh_frame_hdr:000000000000EF58                 db 0A4h
.eh_frame_hdr:000000000000EF59                 db  5Fh ; _
.eh_frame_hdr:000000000000EF5A                 db 0FFh
.eh_frame_hdr:000000000000EF5B                 db 0FFh
.eh_frame_hdr:000000000000EF5C                 db  6Ch ; l
.eh_frame_hdr:000000000000EF5D                 db    8
.eh_frame_hdr:000000000000EF5E                 db    0
.eh_frame_hdr:000000000000EF5F                 db    0
.eh_frame_hdr:000000000000EF60                 db 0A4h
.eh_frame_hdr:000000000000EF61                 db  61h ; a
.eh_frame_hdr:000000000000EF62                 db 0FFh
.eh_frame_hdr:000000000000EF63                 db 0FFh
.eh_frame_hdr:000000000000EF64                 db 0BCh
.eh_frame_hdr:000000000000EF65                 db    8
.eh_frame_hdr:000000000000EF66                 db    0
.eh_frame_hdr:000000000000EF67                 db    0
.eh_frame_hdr:000000000000EF68                 db 0B4h
.eh_frame_hdr:000000000000EF69                 db  67h ; g
.eh_frame_hdr:000000000000EF6A                 db 0FFh
.eh_frame_hdr:000000000000EF6B                 db 0FFh
.eh_frame_hdr:000000000000EF6C                 db 0E8h
.eh_frame_hdr:000000000000EF6D                 db    8
.eh_frame_hdr:000000000000EF6E                 db    0
.eh_frame_hdr:000000000000EF6F                 db    0
.eh_frame_hdr:000000000000EF70                 db 0A4h
.eh_frame_hdr:000000000000EF71                 db  68h ; h
.eh_frame_hdr:000000000000EF72                 db 0FFh
.eh_frame_hdr:000000000000EF73                 db 0FFh
.eh_frame_hdr:000000000000EF74                 db  28h ; (
.eh_frame_hdr:000000000000EF75                 db    9
.eh_frame_hdr:000000000000EF76                 db    0
.eh_frame_hdr:000000000000EF77                 db    0
.eh_frame_hdr:000000000000EF78                 db 0F4h
.eh_frame_hdr:000000000000EF79                 db  6Bh ; k
.eh_frame_hdr:000000000000EF7A                 db 0FFh
.eh_frame_hdr:000000000000EF7B                 db 0FFh
.eh_frame_hdr:000000000000EF7C                 db  74h ; t
.eh_frame_hdr:000000000000EF7D                 db    9
.eh_frame_hdr:000000000000EF7E                 db    0
.eh_frame_hdr:000000000000EF7F                 db    0
.eh_frame_hdr:000000000000EF80                 db  94h
.eh_frame_hdr:000000000000EF81                 db  6Ch ; l
.eh_frame_hdr:000000000000EF82                 db 0FFh
.eh_frame_hdr:000000000000EF83                 db 0FFh
.eh_frame_hdr:000000000000EF84                 db 0A0h
.eh_frame_hdr:000000000000EF85                 db    9
.eh_frame_hdr:000000000000EF86                 db    0
.eh_frame_hdr:000000000000EF87                 db    0
.eh_frame_hdr:000000000000EF88                 db 0B4h
.eh_frame_hdr:000000000000EF89                 db  6Dh ; m
.eh_frame_hdr:000000000000EF8A                 db 0FFh
.eh_frame_hdr:000000000000EF8B                 db 0FFh
.eh_frame_hdr:000000000000EF8C                 db 0D4h
.eh_frame_hdr:000000000000EF8D                 db    9
.eh_frame_hdr:000000000000EF8E                 db    0
.eh_frame_hdr:000000000000EF8F                 db    0
.eh_frame_hdr:000000000000EF90                 db  24h ; $
.eh_frame_hdr:000000000000EF91                 db  6Fh ; o
.eh_frame_hdr:000000000000EF92                 db 0FFh
.eh_frame_hdr:000000000000EF93                 db 0FFh
.eh_frame_hdr:000000000000EF94                 db  84h
.eh_frame_hdr:000000000000EF95                 db  0Ah
.eh_frame_hdr:000000000000EF96                 db    0
.eh_frame_hdr:000000000000EF97                 db    0
.eh_frame_hdr:000000000000EF98                 db 0A4h
.eh_frame_hdr:000000000000EF99                 db  6Fh ; o
.eh_frame_hdr:000000000000EF9A                 db 0FFh
.eh_frame_hdr:000000000000EF9B                 db 0FFh
.eh_frame_hdr:000000000000EF9C                 db 0D4h
.eh_frame_hdr:000000000000EF9D                 db  0Ah
.eh_frame_hdr:000000000000EF9E                 db    0
.eh_frame_hdr:000000000000EF9F                 db    0
.eh_frame_hdr:000000000000EFA0                 db 0B4h
.eh_frame_hdr:000000000000EFA1                 db  6Fh ; o
.eh_frame_hdr:000000000000EFA2                 db 0FFh
.eh_frame_hdr:000000000000EFA3                 db 0FFh
.eh_frame_hdr:000000000000EFA4                 db 0E8h
.eh_frame_hdr:000000000000EFA5                 db  0Ah
.eh_frame_hdr:000000000000EFA6                 db    0
.eh_frame_hdr:000000000000EFA7                 db    0
.eh_frame_hdr:000000000000EFA8                 db 0C4h
.eh_frame_hdr:000000000000EFA9                 db  6Fh ; o
.eh_frame_hdr:000000000000EFAA                 db 0FFh
.eh_frame_hdr:000000000000EFAB                 db 0FFh
.eh_frame_hdr:000000000000EFAC                 db 0FCh
.eh_frame_hdr:000000000000EFAD                 db  0Ah
.eh_frame_hdr:000000000000EFAE                 db    0
.eh_frame_hdr:000000000000EFAF                 db    0
.eh_frame_hdr:000000000000EFB0                 db  74h ; t
.eh_frame_hdr:000000000000EFB1                 db  70h ; p
.eh_frame_hdr:000000000000EFB2                 db 0FFh
.eh_frame_hdr:000000000000EFB3                 db 0FFh
.eh_frame_hdr:000000000000EFB4                 db  2Ch ; ,
.eh_frame_hdr:000000000000EFB5                 db  0Bh
.eh_frame_hdr:000000000000EFB6                 db    0
.eh_frame_hdr:000000000000EFB7                 db    0
.eh_frame_hdr:000000000000EFB8                 db 0D4h
.eh_frame_hdr:000000000000EFB9                 db  70h ; p
.eh_frame_hdr:000000000000EFBA                 db 0FFh
.eh_frame_hdr:000000000000EFBB                 db 0FFh
.eh_frame_hdr:000000000000EFBC                 db  64h ; d
.eh_frame_hdr:000000000000EFBD                 db  0Bh
.eh_frame_hdr:000000000000EFBE                 db    0
.eh_frame_hdr:000000000000EFBF                 db    0
.eh_frame_hdr:000000000000EFC0                 db  64h ; d
.eh_frame_hdr:000000000000EFC1                 db  71h ; q
.eh_frame_hdr:000000000000EFC2                 db 0FFh
.eh_frame_hdr:000000000000EFC3                 db 0FFh
.eh_frame_hdr:000000000000EFC4                 db  8Ch
.eh_frame_hdr:000000000000EFC5                 db  0Bh
.eh_frame_hdr:000000000000EFC6                 db    0
.eh_frame_hdr:000000000000EFC7                 db    0
.eh_frame_hdr:000000000000EFC8                 db  74h ; t
.eh_frame_hdr:000000000000EFC9                 db  71h ; q
.eh_frame_hdr:000000000000EFCA                 db 0FFh
.eh_frame_hdr:000000000000EFCB                 db 0FFh
.eh_frame_hdr:000000000000EFCC                 db 0A0h
.eh_frame_hdr:000000000000EFCD                 db  0Bh
.eh_frame_hdr:000000000000EFCE                 db    0
.eh_frame_hdr:000000000000EFCF                 db    0
.eh_frame_hdr:000000000000EFD0                 db 0C4h
.eh_frame_hdr:000000000000EFD1                 db  71h ; q
.eh_frame_hdr:000000000000EFD2                 db 0FFh
.eh_frame_hdr:000000000000EFD3                 db 0FFh
.eh_frame_hdr:000000000000EFD4                 db 0BCh
.eh_frame_hdr:000000000000EFD5                 db  0Bh
.eh_frame_hdr:000000000000EFD6                 db    0
.eh_frame_hdr:000000000000EFD7                 db    0
.eh_frame_hdr:000000000000EFD8                 db  94h
.eh_frame_hdr:000000000000EFD9                 db  72h ; r
.eh_frame_hdr:000000000000EFDA                 db 0FFh
.eh_frame_hdr:000000000000EFDB                 db 0FFh
.eh_frame_hdr:000000000000EFDC                 db 0D0h
.eh_frame_hdr:000000000000EFDD                 db  0Bh
.eh_frame_hdr:000000000000EFDE                 db    0
.eh_frame_hdr:000000000000EFDF                 db    0
.eh_frame_hdr:000000000000EFE0                 db 0A4h
.eh_frame_hdr:000000000000EFE1                 db  7Ch ; |
.eh_frame_hdr:000000000000EFE2                 db 0FFh
.eh_frame_hdr:000000000000EFE3                 db 0FFh
.eh_frame_hdr:000000000000EFE4                 db  78h ; x
.eh_frame_hdr:000000000000EFE5                 db  0Ch
.eh_frame_hdr:000000000000EFE6                 db    0
.eh_frame_hdr:000000000000EFE7                 db    0
.eh_frame_hdr:000000000000EFE8                 db  94h
.eh_frame_hdr:000000000000EFE9                 db  7Eh ; ~
.eh_frame_hdr:000000000000EFEA                 db 0FFh
.eh_frame_hdr:000000000000EFEB                 db 0FFh
.eh_frame_hdr:000000000000EFEC                 db 0B4h
.eh_frame_hdr:000000000000EFED                 db  0Ch
.eh_frame_hdr:000000000000EFEE                 db    0
.eh_frame_hdr:000000000000EFEF                 db    0
.eh_frame_hdr:000000000000EFF0                 db 0D4h
.eh_frame_hdr:000000000000EFF1                 db  7Fh ; 
.eh_frame_hdr:000000000000EFF2                 db 0FFh
.eh_frame_hdr:000000000000EFF3                 db 0FFh
.eh_frame_hdr:000000000000EFF4                 db 0F0h
.eh_frame_hdr:000000000000EFF5                 db  0Ch
.eh_frame_hdr:000000000000EFF6                 db    0
.eh_frame_hdr:000000000000EFF7                 db    0
.eh_frame_hdr:000000000000EFF8                 db  14h
.eh_frame_hdr:000000000000EFF9                 db  81h
.eh_frame_hdr:000000000000EFFA                 db 0FFh
.eh_frame_hdr:000000000000EFFB                 db 0FFh
.eh_frame_hdr:000000000000EFFC                 db  3Ch ; <
.eh_frame_hdr:000000000000EFFD                 db  0Dh
.eh_frame_hdr:000000000000EFFE                 db    0
.eh_frame_hdr:000000000000EFFF                 db    0
.eh_frame_hdr:000000000000F000                 db 0B4h
.eh_frame_hdr:000000000000F001                 db  81h
.eh_frame_hdr:000000000000F002                 db 0FFh
.eh_frame_hdr:000000000000F003                 db 0FFh
.eh_frame_hdr:000000000000F004                 db  5Ch ; \
.eh_frame_hdr:000000000000F005                 db  0Dh
.eh_frame_hdr:000000000000F006                 db    0
.eh_frame_hdr:000000000000F007                 db    0
.eh_frame_hdr:000000000000F008                 db 0A4h
.eh_frame_hdr:000000000000F009                 db  82h
.eh_frame_hdr:000000000000F00A                 db 0FFh
.eh_frame_hdr:000000000000F00B                 db 0FFh
.eh_frame_hdr:000000000000F00C                 db 0A0h
.eh_frame_hdr:000000000000F00D                 db  0Dh
.eh_frame_hdr:000000000000F00E                 db    0
.eh_frame_hdr:000000000000F00F                 db    0
.eh_frame_hdr:000000000000F010                 db 0E4h
.eh_frame_hdr:000000000000F011                 db  94h
.eh_frame_hdr:000000000000F012                 db 0FFh
.eh_frame_hdr:000000000000F013                 db 0FFh
.eh_frame_hdr:000000000000F014                 db  18h
.eh_frame_hdr:000000000000F015                 db  0Eh
.eh_frame_hdr:000000000000F016                 db    0
.eh_frame_hdr:000000000000F017                 db    0
.eh_frame_hdr:000000000000F018                 db  94h
.eh_frame_hdr:000000000000F019                 db  96h
.eh_frame_hdr:000000000000F01A                 db 0FFh
.eh_frame_hdr:000000000000F01B                 db 0FFh
.eh_frame_hdr:000000000000F01C                 db  84h
.eh_frame_hdr:000000000000F01D                 db  0Eh
.eh_frame_hdr:000000000000F01E                 db    0
.eh_frame_hdr:000000000000F01F                 db    0
.eh_frame_hdr:000000000000F020                 db 0D4h
.eh_frame_hdr:000000000000F021                 db  96h
.eh_frame_hdr:000000000000F022                 db 0FFh
.eh_frame_hdr:000000000000F023                 db 0FFh
.eh_frame_hdr:000000000000F024                 db 0B0h
.eh_frame_hdr:000000000000F025                 db  0Eh
.eh_frame_hdr:000000000000F026                 db    0
.eh_frame_hdr:000000000000F027                 db    0
.eh_frame_hdr:000000000000F028                 db 0F4h
.eh_frame_hdr:000000000000F029                 db  96h
.eh_frame_hdr:000000000000F02A                 db 0FFh
.eh_frame_hdr:000000000000F02B                 db 0FFh
.eh_frame_hdr:000000000000F02C                 db 0C4h
.eh_frame_hdr:000000000000F02D                 db  0Eh
.eh_frame_hdr:000000000000F02E                 db    0
.eh_frame_hdr:000000000000F02F                 db    0
.eh_frame_hdr:000000000000F030                 db  14h
.eh_frame_hdr:000000000000F031                 db  97h
.eh_frame_hdr:000000000000F032                 db 0FFh
.eh_frame_hdr:000000000000F033                 db 0FFh
.eh_frame_hdr:000000000000F034                 db 0D8h
.eh_frame_hdr:000000000000F035                 db  0Eh
.eh_frame_hdr:000000000000F036                 db    0
.eh_frame_hdr:000000000000F037                 db    0
.eh_frame_hdr:000000000000F038                 db  54h ; T
.eh_frame_hdr:000000000000F039                 db  97h
.eh_frame_hdr:000000000000F03A                 db 0FFh
.eh_frame_hdr:000000000000F03B                 db 0FFh
.eh_frame_hdr:000000000000F03C                 db 0ECh
.eh_frame_hdr:000000000000F03D                 db  0Eh
.eh_frame_hdr:000000000000F03E                 db    0
.eh_frame_hdr:000000000000F03F                 db    0
.eh_frame_hdr:000000000000F040                 db  74h ; t
.eh_frame_hdr:000000000000F041                 db  97h
.eh_frame_hdr:000000000000F042                 db 0FFh
.eh_frame_hdr:000000000000F043                 db 0FFh
.eh_frame_hdr:000000000000F044                 db    0
.eh_frame_hdr:000000000000F045                 db  0Fh
.eh_frame_hdr:000000000000F046                 db    0
.eh_frame_hdr:000000000000F047                 db    0
.eh_frame_hdr:000000000000F048                 db 0A4h
.eh_frame_hdr:000000000000F049                 db  97h
.eh_frame_hdr:000000000000F04A                 db 0FFh
.eh_frame_hdr:000000000000F04B                 db 0FFh
.eh_frame_hdr:000000000000F04C                 db  14h
.eh_frame_hdr:000000000000F04D                 db  0Fh
.eh_frame_hdr:000000000000F04E                 db    0
.eh_frame_hdr:000000000000F04F                 db    0
.eh_frame_hdr:000000000000F050                 db  24h ; $
.eh_frame_hdr:000000000000F051                 db  98h
.eh_frame_hdr:000000000000F052                 db 0FFh
.eh_frame_hdr:000000000000F053                 db 0FFh
.eh_frame_hdr:000000000000F054                 db  68h ; h
.eh_frame_hdr:000000000000F055                 db  0Fh
.eh_frame_hdr:000000000000F056                 db    0
.eh_frame_hdr:000000000000F057                 db    0
.eh_frame_hdr:000000000000F058                 db  14h
.eh_frame_hdr:000000000000F059                 db  99h
.eh_frame_hdr:000000000000F05A                 db 0FFh
.eh_frame_hdr:000000000000F05B                 db 0FFh
.eh_frame_hdr:000000000000F05C                 db 0D4h
.eh_frame_hdr:000000000000F05D                 db  0Fh
.eh_frame_hdr:000000000000F05E                 db    0
.eh_frame_hdr:000000000000F05F                 db    0
.eh_frame_hdr:000000000000F060                 db  24h ; $
.eh_frame_hdr:000000000000F061                 db  99h
.eh_frame_hdr:000000000000F062                 db 0FFh
.eh_frame_hdr:000000000000F063                 db 0FFh
.eh_frame_hdr:000000000000F064                 db 0E8h
.eh_frame_hdr:000000000000F065                 db  0Fh
.eh_frame_hdr:000000000000F066                 db    0
.eh_frame_hdr:000000000000F067                 db    0
.eh_frame_hdr:000000000000F068                 db 0C4h
.eh_frame_hdr:000000000000F069                 db  99h
.eh_frame_hdr:000000000000F06A                 db 0FFh
.eh_frame_hdr:000000000000F06B                 db 0FFh
.eh_frame_hdr:000000000000F06C                 db  14h
.eh_frame_hdr:000000000000F06D                 db  10h
.eh_frame_hdr:000000000000F06E                 db    0
.eh_frame_hdr:000000000000F06F                 db    0
.eh_frame_hdr:000000000000F070                 db 0E4h
.eh_frame_hdr:000000000000F071                 db  99h
.eh_frame_hdr:000000000000F072                 db 0FFh
.eh_frame_hdr:000000000000F073                 db 0FFh
.eh_frame_hdr:000000000000F074                 db  28h ; (
.eh_frame_hdr:000000000000F075                 db  10h
.eh_frame_hdr:000000000000F076                 db    0
.eh_frame_hdr:000000000000F077                 db    0
.eh_frame_hdr:000000000000F078                 db 0F4h
.eh_frame_hdr:000000000000F079                 db  99h
.eh_frame_hdr:000000000000F07A                 db 0FFh
.eh_frame_hdr:000000000000F07B                 db 0FFh
.eh_frame_hdr:000000000000F07C                 db  3Ch ; <
.eh_frame_hdr:000000000000F07D                 db  10h
.eh_frame_hdr:000000000000F07E                 db    0
.eh_frame_hdr:000000000000F07F                 db    0
.eh_frame_hdr:000000000000F080                 db  14h
.eh_frame_hdr:000000000000F081                 db  9Ah
.eh_frame_hdr:000000000000F082                 db 0FFh
.eh_frame_hdr:000000000000F083                 db 0FFh
.eh_frame_hdr:000000000000F084                 db  50h ; P
.eh_frame_hdr:000000000000F085                 db  10h
.eh_frame_hdr:000000000000F086                 db    0
.eh_frame_hdr:000000000000F087                 db    0
.eh_frame_hdr:000000000000F088                 db  34h ; 4
.eh_frame_hdr:000000000000F089                 db  9Ah
.eh_frame_hdr:000000000000F08A                 db 0FFh
.eh_frame_hdr:000000000000F08B                 db 0FFh
.eh_frame_hdr:000000000000F08C                 db  64h ; d
.eh_frame_hdr:000000000000F08D                 db  10h
.eh_frame_hdr:000000000000F08E                 db    0
.eh_frame_hdr:000000000000F08F                 db    0
.eh_frame_hdr:000000000000F090                 db 0C4h
.eh_frame_hdr:000000000000F091                 db  9Ah
.eh_frame_hdr:000000000000F092                 db 0FFh
.eh_frame_hdr:000000000000F093                 db 0FFh
.eh_frame_hdr:000000000000F094                 db  80h
.eh_frame_hdr:000000000000F095                 db  10h
.eh_frame_hdr:000000000000F096                 db    0
.eh_frame_hdr:000000000000F097                 db    0
.eh_frame_hdr:000000000000F098                 db  54h ; T
.eh_frame_hdr:000000000000F099                 db  9Bh
.eh_frame_hdr:000000000000F09A                 db 0FFh
.eh_frame_hdr:000000000000F09B                 db 0FFh
.eh_frame_hdr:000000000000F09C                 db  9Ch
.eh_frame_hdr:000000000000F09D                 db  10h
.eh_frame_hdr:000000000000F09E                 db    0
.eh_frame_hdr:000000000000F09F                 db    0
.eh_frame_hdr:000000000000F0A0                 db  64h ; d
.eh_frame_hdr:000000000000F0A1                 db  9Bh
.eh_frame_hdr:000000000000F0A2                 db 0FFh
.eh_frame_hdr:000000000000F0A3                 db 0FFh
.eh_frame_hdr:000000000000F0A4                 db 0B0h
.eh_frame_hdr:000000000000F0A5                 db  10h
.eh_frame_hdr:000000000000F0A6                 db    0
.eh_frame_hdr:000000000000F0A7                 db    0
.eh_frame_hdr:000000000000F0A8                 db  74h ; t
.eh_frame_hdr:000000000000F0A9                 db  9Bh
.eh_frame_hdr:000000000000F0AA                 db 0FFh
.eh_frame_hdr:000000000000F0AB                 db 0FFh
.eh_frame_hdr:000000000000F0AC                 db 0C4h
.eh_frame_hdr:000000000000F0AD                 db  10h
.eh_frame_hdr:000000000000F0AE                 db    0
.eh_frame_hdr:000000000000F0AF                 db    0
.eh_frame_hdr:000000000000F0B0                 db  14h
.eh_frame_hdr:000000000000F0B1                 db  9Ch
.eh_frame_hdr:000000000000F0B2                 db 0FFh
.eh_frame_hdr:000000000000F0B3                 db 0FFh
.eh_frame_hdr:000000000000F0B4                 db 0E0h
.eh_frame_hdr:000000000000F0B5                 db  10h
.eh_frame_hdr:000000000000F0B6                 db    0
.eh_frame_hdr:000000000000F0B7                 db    0
.eh_frame_hdr:000000000000F0B8                 db  24h ; $
.eh_frame_hdr:000000000000F0B9                 db  9Ch
.eh_frame_hdr:000000000000F0BA                 db 0FFh
.eh_frame_hdr:000000000000F0BB                 db 0FFh
.eh_frame_hdr:000000000000F0BC                 db 0F4h
.eh_frame_hdr:000000000000F0BD                 db  10h
.eh_frame_hdr:000000000000F0BE                 db    0
.eh_frame_hdr:000000000000F0BF                 db    0
.eh_frame_hdr:000000000000F0C0                 db  44h ; D
.eh_frame_hdr:000000000000F0C1                 db  9Ch
.eh_frame_hdr:000000000000F0C2                 db 0FFh
.eh_frame_hdr:000000000000F0C3                 db 0FFh
.eh_frame_hdr:000000000000F0C4                 db    8
.eh_frame_hdr:000000000000F0C5                 db  11h
.eh_frame_hdr:000000000000F0C6                 db    0
.eh_frame_hdr:000000000000F0C7                 db    0
.eh_frame_hdr:000000000000F0C8                 db  54h ; T
.eh_frame_hdr:000000000000F0C9                 db  9Ch
.eh_frame_hdr:000000000000F0CA                 db 0FFh
.eh_frame_hdr:000000000000F0CB                 db 0FFh
.eh_frame_hdr:000000000000F0CC                 db  1Ch
.eh_frame_hdr:000000000000F0CD                 db  11h
.eh_frame_hdr:000000000000F0CE                 db    0
.eh_frame_hdr:000000000000F0CF                 db    0
.eh_frame_hdr:000000000000F0D0                 db 0E4h
.eh_frame_hdr:000000000000F0D1                 db  9Ch
.eh_frame_hdr:000000000000F0D2                 db 0FFh
.eh_frame_hdr:000000000000F0D3                 db 0FFh
.eh_frame_hdr:000000000000F0D4                 db  38h ; 8
.eh_frame_hdr:000000000000F0D5                 db  11h
.eh_frame_hdr:000000000000F0D6                 db    0
.eh_frame_hdr:000000000000F0D7                 db    0
.eh_frame_hdr:000000000000F0D8                 db  84h
.eh_frame_hdr:000000000000F0D9                 db  9Dh
.eh_frame_hdr:000000000000F0DA                 db 0FFh
.eh_frame_hdr:000000000000F0DB                 db 0FFh
.eh_frame_hdr:000000000000F0DC                 db  54h ; T
.eh_frame_hdr:000000000000F0DD                 db  11h
.eh_frame_hdr:000000000000F0DE                 db    0
.eh_frame_hdr:000000000000F0DF                 db    0
.eh_frame_hdr:000000000000F0E0                 db  94h
.eh_frame_hdr:000000000000F0E1                 db  9Dh
.eh_frame_hdr:000000000000F0E2                 db 0FFh
.eh_frame_hdr:000000000000F0E3                 db 0FFh
.eh_frame_hdr:000000000000F0E4                 db  68h ; h
.eh_frame_hdr:000000000000F0E5                 db  11h
.eh_frame_hdr:000000000000F0E6                 db    0
.eh_frame_hdr:000000000000F0E7                 db    0
.eh_frame_hdr:000000000000F0E8                 db 0B4h
.eh_frame_hdr:000000000000F0E9                 db  9Dh
.eh_frame_hdr:000000000000F0EA                 db 0FFh
.eh_frame_hdr:000000000000F0EB                 db 0FFh
.eh_frame_hdr:000000000000F0EC                 db  7Ch ; |
.eh_frame_hdr:000000000000F0ED                 db  11h
.eh_frame_hdr:000000000000F0EE                 db    0
.eh_frame_hdr:000000000000F0EF                 db    0
.eh_frame_hdr:000000000000F0F0                 db 0D4h
.eh_frame_hdr:000000000000F0F1                 db  9Dh
.eh_frame_hdr:000000000000F0F2                 db 0FFh
.eh_frame_hdr:000000000000F0F3                 db 0FFh
.eh_frame_hdr:000000000000F0F4                 db  90h
.eh_frame_hdr:000000000000F0F5                 db  11h
.eh_frame_hdr:000000000000F0F6                 db    0
.eh_frame_hdr:000000000000F0F7                 db    0
.eh_frame_hdr:000000000000F0F8                 db 0E4h
.eh_frame_hdr:000000000000F0F9                 db  9Dh
.eh_frame_hdr:000000000000F0FA                 db 0FFh
.eh_frame_hdr:000000000000F0FB                 db 0FFh
.eh_frame_hdr:000000000000F0FC                 db 0A4h
.eh_frame_hdr:000000000000F0FD                 db  11h
.eh_frame_hdr:000000000000F0FE                 db    0
.eh_frame_hdr:000000000000F0FF                 db    0
.eh_frame_hdr:000000000000F100                 db    4
.eh_frame_hdr:000000000000F101                 db  9Eh
.eh_frame_hdr:000000000000F102                 db 0FFh
.eh_frame_hdr:000000000000F103                 db 0FFh
.eh_frame_hdr:000000000000F104                 db 0B8h
.eh_frame_hdr:000000000000F105                 db  11h
.eh_frame_hdr:000000000000F106                 db    0
.eh_frame_hdr:000000000000F107                 db    0
.eh_frame_hdr:000000000000F108                 db  24h ; $
.eh_frame_hdr:000000000000F109                 db  9Eh
.eh_frame_hdr:000000000000F10A                 db 0FFh
.eh_frame_hdr:000000000000F10B                 db 0FFh
.eh_frame_hdr:000000000000F10C                 db 0CCh
.eh_frame_hdr:000000000000F10D                 db  11h
.eh_frame_hdr:000000000000F10E                 db    0
.eh_frame_hdr:000000000000F10F                 db    0
.eh_frame_hdr:000000000000F110                 db  44h ; D
.eh_frame_hdr:000000000000F111                 db  9Eh
.eh_frame_hdr:000000000000F112                 db 0FFh
.eh_frame_hdr:000000000000F113                 db 0FFh
.eh_frame_hdr:000000000000F114                 db 0E4h
.eh_frame_hdr:000000000000F115                 db  11h
.eh_frame_hdr:000000000000F116                 db    0
.eh_frame_hdr:000000000000F117                 db    0
.eh_frame_hdr:000000000000F118                 db    4
.eh_frame_hdr:000000000000F119                 db  9Fh
.eh_frame_hdr:000000000000F11A                 db 0FFh
.eh_frame_hdr:000000000000F11B                 db 0FFh
.eh_frame_hdr:000000000000F11C                 db  34h ; 4
.eh_frame_hdr:000000000000F11D                 db  12h
.eh_frame_hdr:000000000000F11E                 db    0
.eh_frame_hdr:000000000000F11F                 db    0
.eh_frame_hdr:000000000000F120                 db  14h
.eh_frame_hdr:000000000000F121                 db  9Fh
.eh_frame_hdr:000000000000F122                 db 0FFh
.eh_frame_hdr:000000000000F123                 db 0FFh
.eh_frame_hdr:000000000000F124                 db  4Ch ; L
.eh_frame_hdr:000000000000F125                 db  12h
.eh_frame_hdr:000000000000F126                 db    0
.eh_frame_hdr:000000000000F127                 db    0
.eh_frame_hdr:000000000000F128                 db  34h ; 4
.eh_frame_hdr:000000000000F129                 db 0A3h
.eh_frame_hdr:000000000000F12A                 db 0FFh
.eh_frame_hdr:000000000000F12B                 db 0FFh
.eh_frame_hdr:000000000000F12C                 db  60h ; `
.eh_frame_hdr:000000000000F12D                 db  13h
.eh_frame_hdr:000000000000F12E                 db    0
.eh_frame_hdr:000000000000F12F                 db    0
.eh_frame_hdr:000000000000F130                 db  54h ; T
.eh_frame_hdr:000000000000F131                 db 0A3h
.eh_frame_hdr:000000000000F132                 db 0FFh
.eh_frame_hdr:000000000000F133                 db 0FFh
.eh_frame_hdr:000000000000F134                 db  74h ; t
.eh_frame_hdr:000000000000F135                 db  13h
.eh_frame_hdr:000000000000F136                 db    0
.eh_frame_hdr:000000000000F137                 db    0
.eh_frame_hdr:000000000000F138                 db 0D4h
.eh_frame_hdr:000000000000F139                 db 0A3h
.eh_frame_hdr:000000000000F13A                 db 0FFh
.eh_frame_hdr:000000000000F13B                 db 0FFh
.eh_frame_hdr:000000000000F13C                 db  90h
.eh_frame_hdr:000000000000F13D                 db  13h
.eh_frame_hdr:000000000000F13E                 db    0
.eh_frame_hdr:000000000000F13F                 db    0
.eh_frame_hdr:000000000000F140                 db 0B4h
.eh_frame_hdr:000000000000F141                 db 0A4h
.eh_frame_hdr:000000000000F142                 db 0FFh
.eh_frame_hdr:000000000000F143                 db 0FFh
.eh_frame_hdr:000000000000F144                 db 0BCh
.eh_frame_hdr:000000000000F145                 db  13h
.eh_frame_hdr:000000000000F146                 db    0
.eh_frame_hdr:000000000000F147                 db    0
.eh_frame_hdr:000000000000F148                 db  34h ; 4
.eh_frame_hdr:000000000000F149                 db 0A5h
.eh_frame_hdr:000000000000F14A                 db 0FFh
.eh_frame_hdr:000000000000F14B                 db 0FFh
.eh_frame_hdr:000000000000F14C                 db 0DCh
.eh_frame_hdr:000000000000F14D                 db  13h
.eh_frame_hdr:000000000000F14E                 db    0
.eh_frame_hdr:000000000000F14F                 db    0
.eh_frame_hdr:000000000000F150                 db  54h ; T
.eh_frame_hdr:000000000000F151                 db 0A5h
.eh_frame_hdr:000000000000F152                 db 0FFh
.eh_frame_hdr:000000000000F153                 db 0FFh
.eh_frame_hdr:000000000000F154                 db 0F8h
.eh_frame_hdr:000000000000F155                 db  13h
.eh_frame_hdr:000000000000F156                 db    0
.eh_frame_hdr:000000000000F157                 db    0
.eh_frame_hdr:000000000000F158                 db  84h
.eh_frame_hdr:000000000000F159                 db 0A5h
.eh_frame_hdr:000000000000F15A                 db 0FFh
.eh_frame_hdr:000000000000F15B                 db 0FFh
.eh_frame_hdr:000000000000F15C                 db  0Ch
.eh_frame_hdr:000000000000F15D                 db  14h
.eh_frame_hdr:000000000000F15E                 db    0
.eh_frame_hdr:000000000000F15F                 db    0
.eh_frame_hdr:000000000000F160                 db  94h
.eh_frame_hdr:000000000000F161                 db 0A5h
.eh_frame_hdr:000000000000F162                 db 0FFh
.eh_frame_hdr:000000000000F163                 db 0FFh
.eh_frame_hdr:000000000000F164                 db  20h
.eh_frame_hdr:000000000000F165                 db  14h
.eh_frame_hdr:000000000000F166                 db    0
.eh_frame_hdr:000000000000F167                 db    0
.eh_frame_hdr:000000000000F168                 db 0D4h
.eh_frame_hdr:000000000000F169                 db 0A5h
.eh_frame_hdr:000000000000F16A                 db 0FFh
.eh_frame_hdr:000000000000F16B                 db 0FFh
.eh_frame_hdr:000000000000F16C                 db  44h ; D
.eh_frame_hdr:000000000000F16D                 db  14h
.eh_frame_hdr:000000000000F16E                 db    0
.eh_frame_hdr:000000000000F16F                 db    0
.eh_frame_hdr:000000000000F170                 db    4
.eh_frame_hdr:000000000000F171                 db 0A6h
.eh_frame_hdr:000000000000F172                 db 0FFh
.eh_frame_hdr:000000000000F173                 db 0FFh
.eh_frame_hdr:000000000000F174                 db  58h ; X
.eh_frame_hdr:000000000000F175                 db  14h
.eh_frame_hdr:000000000000F176                 db    0
.eh_frame_hdr:000000000000F177                 db    0
.eh_frame_hdr:000000000000F178                 db  94h
.eh_frame_hdr:000000000000F179                 db 0A6h
.eh_frame_hdr:000000000000F17A                 db 0FFh
.eh_frame_hdr:000000000000F17B                 db 0FFh
.eh_frame_hdr:000000000000F17C                 db  70h ; p
.eh_frame_hdr:000000000000F17D                 db  14h
.eh_frame_hdr:000000000000F17E                 db    0
.eh_frame_hdr:000000000000F17F                 db    0
.eh_frame_hdr:000000000000F180                 db 0E4h
.eh_frame_hdr:000000000000F181                 db 0A6h
.eh_frame_hdr:000000000000F182                 db 0FFh
.eh_frame_hdr:000000000000F183                 db 0FFh
.eh_frame_hdr:000000000000F184                 db  88h
.eh_frame_hdr:000000000000F185                 db  14h
.eh_frame_hdr:000000000000F186                 db    0
.eh_frame_hdr:000000000000F187                 db    0
.eh_frame_hdr:000000000000F188                 db    4
.eh_frame_hdr:000000000000F189                 db 0A7h
.eh_frame_hdr:000000000000F18A                 db 0FFh
.eh_frame_hdr:000000000000F18B                 db 0FFh
.eh_frame_hdr:000000000000F18C                 db 0A4h
.eh_frame_hdr:000000000000F18D                 db  14h
.eh_frame_hdr:000000000000F18E                 db    0
.eh_frame_hdr:000000000000F18F                 db    0
.eh_frame_hdr:000000000000F190                 db  34h ; 4
.eh_frame_hdr:000000000000F191                 db 0A7h
.eh_frame_hdr:000000000000F192                 db 0FFh
.eh_frame_hdr:000000000000F193                 db 0FFh
.eh_frame_hdr:000000000000F194                 db 0C0h
.eh_frame_hdr:000000000000F195                 db  14h
.eh_frame_hdr:000000000000F196                 db    0
.eh_frame_hdr:000000000000F197                 db    0
.eh_frame_hdr:000000000000F198                 db  64h ; d
.eh_frame_hdr:000000000000F199                 db 0A7h
.eh_frame_hdr:000000000000F19A                 db 0FFh
.eh_frame_hdr:000000000000F19B                 db 0FFh
.eh_frame_hdr:000000000000F19C                 db 0E8h
.eh_frame_hdr:000000000000F19D                 db  14h
.eh_frame_hdr:000000000000F19E                 db    0
.eh_frame_hdr:000000000000F19F                 db    0
.eh_frame_hdr:000000000000F1A0                 db  84h
.eh_frame_hdr:000000000000F1A1                 db 0A7h
.eh_frame_hdr:000000000000F1A2                 db 0FFh
.eh_frame_hdr:000000000000F1A3                 db 0FFh
.eh_frame_hdr:000000000000F1A4                 db    4
.eh_frame_hdr:000000000000F1A5                 db  15h
.eh_frame_hdr:000000000000F1A6                 db    0
.eh_frame_hdr:000000000000F1A7                 db    0
.eh_frame_hdr:000000000000F1A8                 db 0C4h
.eh_frame_hdr:000000000000F1A9                 db 0A7h
.eh_frame_hdr:000000000000F1AA                 db 0FFh
.eh_frame_hdr:000000000000F1AB                 db 0FFh
.eh_frame_hdr:000000000000F1AC                 db  1Ch
.eh_frame_hdr:000000000000F1AD                 db  15h
.eh_frame_hdr:000000000000F1AE                 db    0
.eh_frame_hdr:000000000000F1AF                 db    0
.eh_frame_hdr:000000000000F1B0                 db 0E4h
.eh_frame_hdr:000000000000F1B1                 db 0ABh
.eh_frame_hdr:000000000000F1B2                 db 0FFh
.eh_frame_hdr:000000000000F1B3                 db 0FFh
.eh_frame_hdr:000000000000F1B4                 db  6Ch ; l
.eh_frame_hdr:000000000000F1B5                 db  15h
.eh_frame_hdr:000000000000F1B6                 db    0
.eh_frame_hdr:000000000000F1B7                 db    0
.eh_frame_hdr:000000000000F1B8                 db  34h ; 4
.eh_frame_hdr:000000000000F1B9                 db 0ADh
.eh_frame_hdr:000000000000F1BA                 db 0FFh
.eh_frame_hdr:000000000000F1BB                 db 0FFh
.eh_frame_hdr:000000000000F1BC                 db 0B8h
.eh_frame_hdr:000000000000F1BD                 db  15h
.eh_frame_hdr:000000000000F1BE                 db    0
.eh_frame_hdr:000000000000F1BF                 db    0
.eh_frame_hdr:000000000000F1C0                 db 0E4h
.eh_frame_hdr:000000000000F1C1                 db 0ADh
.eh_frame_hdr:000000000000F1C2                 db 0FFh
.eh_frame_hdr:000000000000F1C3                 db 0FFh
.eh_frame_hdr:000000000000F1C4                 db 0D4h
.eh_frame_hdr:000000000000F1C5                 db  15h
.eh_frame_hdr:000000000000F1C6                 db    0
.eh_frame_hdr:000000000000F1C7                 db    0
.eh_frame_hdr:000000000000F1C8                 db  64h ; d
.eh_frame_hdr:000000000000F1C9                 db 0AEh
.eh_frame_hdr:000000000000F1CA                 db 0FFh
.eh_frame_hdr:000000000000F1CB                 db 0FFh
.eh_frame_hdr:000000000000F1CC                 db  0Ch
.eh_frame_hdr:000000000000F1CD                 db  16h
.eh_frame_hdr:000000000000F1CE                 db    0
.eh_frame_hdr:000000000000F1CF                 db    0
.eh_frame_hdr:000000000000F1D0                 db 0E4h
.eh_frame_hdr:000000000000F1D1                 db 0B0h
.eh_frame_hdr:000000000000F1D2                 db 0FFh
.eh_frame_hdr:000000000000F1D3                 db 0FFh
.eh_frame_hdr:000000000000F1D4                 db  44h ; D
.eh_frame_hdr:000000000000F1D5                 db  16h
.eh_frame_hdr:000000000000F1D6                 db    0
.eh_frame_hdr:000000000000F1D7                 db    0
.eh_frame_hdr:000000000000F1D8                 db  24h ; $
.eh_frame_hdr:000000000000F1D9                 db 0B1h
.eh_frame_hdr:000000000000F1DA                 db 0FFh
.eh_frame_hdr:000000000000F1DB                 db 0FFh
.eh_frame_hdr:000000000000F1DC                 db  64h ; d
.eh_frame_hdr:000000000000F1DD                 db  16h
.eh_frame_hdr:000000000000F1DE                 db    0
.eh_frame_hdr:000000000000F1DF                 db    0
.eh_frame_hdr:000000000000F1E0                 db  84h
.eh_frame_hdr:000000000000F1E1                 db 0B1h
.eh_frame_hdr:000000000000F1E2                 db 0FFh
.eh_frame_hdr:000000000000F1E3                 db 0FFh
.eh_frame_hdr:000000000000F1E4                 db  94h
.eh_frame_hdr:000000000000F1E5                 db  16h
.eh_frame_hdr:000000000000F1E6                 db    0
.eh_frame_hdr:000000000000F1E7                 db    0
.eh_frame_hdr:000000000000F1E8                 db  14h
.eh_frame_hdr:000000000000F1E9                 db 0B2h
.eh_frame_hdr:000000000000F1EA                 db 0FFh
.eh_frame_hdr:000000000000F1EB                 db 0FFh
.eh_frame_hdr:000000000000F1EC                 db 0D4h
.eh_frame_hdr:000000000000F1ED                 db  16h
.eh_frame_hdr:000000000000F1EE                 db    0
.eh_frame_hdr:000000000000F1EF                 db    0
.eh_frame_hdr:000000000000F1F0                 db  94h
.eh_frame_hdr:000000000000F1F1                 db 0B2h
.eh_frame_hdr:000000000000F1F2                 db 0FFh
.eh_frame_hdr:000000000000F1F3                 db 0FFh
.eh_frame_hdr:000000000000F1F4                 db 0FCh
.eh_frame_hdr:000000000000F1F5                 db  16h
.eh_frame_hdr:000000000000F1F6                 db    0
.eh_frame_hdr:000000000000F1F7                 db    0
.eh_frame_hdr:000000000000F1F8                 db 0A4h
.eh_frame_hdr:000000000000F1F9                 db 0B2h
.eh_frame_hdr:000000000000F1FA                 db 0FFh
.eh_frame_hdr:000000000000F1FB                 db 0FFh
.eh_frame_hdr:000000000000F1FC                 db  10h
.eh_frame_hdr:000000000000F1FD                 db  17h
.eh_frame_hdr:000000000000F1FE                 db    0
.eh_frame_hdr:000000000000F1FF                 db    0
.eh_frame_hdr:000000000000F200                 db 0C4h
.eh_frame_hdr:000000000000F201                 db 0B3h
.eh_frame_hdr:000000000000F202                 db 0FFh
.eh_frame_hdr:000000000000F203                 db 0FFh
.eh_frame_hdr:000000000000F204                 db  5Ch ; \
.eh_frame_hdr:000000000000F205                 db  17h
.eh_frame_hdr:000000000000F206                 db    0
.eh_frame_hdr:000000000000F207                 db    0
.eh_frame_hdr:000000000000F208                 db  44h ; D
.eh_frame_hdr:000000000000F209                 db 0B4h
.eh_frame_hdr:000000000000F20A                 db 0FFh
.eh_frame_hdr:000000000000F20B                 db 0FFh
.eh_frame_hdr:000000000000F20C                 db  88h
.eh_frame_hdr:000000000000F20D                 db  17h
.eh_frame_hdr:000000000000F20E                 db    0
.eh_frame_hdr:000000000000F20F                 db    0
.eh_frame_hdr:000000000000F210                 db  64h ; d
.eh_frame_hdr:000000000000F211                 db 0B5h
.eh_frame_hdr:000000000000F212                 db 0FFh
.eh_frame_hdr:000000000000F213                 db 0FFh
.eh_frame_hdr:000000000000F214                 db 0E8h
.eh_frame_hdr:000000000000F215                 db  17h
.eh_frame_hdr:000000000000F216                 db    0
.eh_frame_hdr:000000000000F217                 db    0
.eh_frame_hdr:000000000000F218                 db 0D4h
.eh_frame_hdr:000000000000F219                 db 0B5h
.eh_frame_hdr:000000000000F21A                 db 0FFh
.eh_frame_hdr:000000000000F21B                 db 0FFh
.eh_frame_hdr:000000000000F21C                 db  34h ; 4
.eh_frame_hdr:000000000000F21D                 db  18h
.eh_frame_hdr:000000000000F21E                 db    0
.eh_frame_hdr:000000000000F21F                 db    0
.eh_frame_hdr:000000000000F220                 db  24h ; $
.eh_frame_hdr:000000000000F221                 db 0B6h
.eh_frame_hdr:000000000000F222                 db 0FFh
.eh_frame_hdr:000000000000F223                 db 0FFh
.eh_frame_hdr:000000000000F224                 db  74h ; t
.eh_frame_hdr:000000000000F225                 db  18h
.eh_frame_hdr:000000000000F226                 db    0
.eh_frame_hdr:000000000000F227                 db    0
.eh_frame_hdr:000000000000F228                 db  84h
.eh_frame_hdr:000000000000F229                 db 0B6h
.eh_frame_hdr:000000000000F22A                 db 0FFh
.eh_frame_hdr:000000000000F22B                 db 0FFh
.eh_frame_hdr:000000000000F22C                 db  94h
.eh_frame_hdr:000000000000F22D                 db  18h
.eh_frame_hdr:000000000000F22E                 db    0
.eh_frame_hdr:000000000000F22F                 db    0
.eh_frame_hdr:000000000000F230                 db 0C4h
.eh_frame_hdr:000000000000F231                 db 0B6h
.eh_frame_hdr:000000000000F232                 db 0FFh
.eh_frame_hdr:000000000000F233                 db 0FFh
.eh_frame_hdr:000000000000F234                 db 0B4h
.eh_frame_hdr:000000000000F235                 db  18h
.eh_frame_hdr:000000000000F236                 db    0
.eh_frame_hdr:000000000000F237                 db    0
.eh_frame_hdr:000000000000F238                 db 0E4h
.eh_frame_hdr:000000000000F239                 db 0C7h
.eh_frame_hdr:000000000000F23A                 db 0FFh
.eh_frame_hdr:000000000000F23B                 db 0FFh
.eh_frame_hdr:000000000000F23C                 db 0E4h
.eh_frame_hdr:000000000000F23D                 db  18h
.eh_frame_hdr:000000000000F23E                 db    0
.eh_frame_hdr:000000000000F23F                 db    0
.eh_frame_hdr:000000000000F240                 db 0E4h
.eh_frame_hdr:000000000000F241                 db 0C9h
.eh_frame_hdr:000000000000F242                 db 0FFh
.eh_frame_hdr:000000000000F243                 db 0FFh
.eh_frame_hdr:000000000000F244                 db 0FCh
.eh_frame_hdr:000000000000F245                 db  18h
.eh_frame_hdr:000000000000F246                 db    0
.eh_frame_hdr:000000000000F247                 db    0
.eh_frame_hdr:000000000000F248                 db 0D4h
.eh_frame_hdr:000000000000F249                 db 0D6h
.eh_frame_hdr:000000000000F24A                 db 0FFh
.eh_frame_hdr:000000000000F24B                 db 0FFh
.eh_frame_hdr:000000000000F24C                 db  4Ch ; L
.eh_frame_hdr:000000000000F24D                 db  19h
.eh_frame_hdr:000000000000F24E                 db    0
.eh_frame_hdr:000000000000F24F                 db    0
.eh_frame_hdr:000000000000F250                 db  44h ; D
.eh_frame_hdr:000000000000F251                 db 0D7h
.eh_frame_hdr:000000000000F252                 db 0FFh
.eh_frame_hdr:000000000000F253                 db 0FFh
.eh_frame_hdr:000000000000F254                 db  94h
.eh_frame_hdr:000000000000F255                 db  19h
.eh_frame_hdr:000000000000F256                 db    0
.eh_frame_hdr:000000000000F257                 db    0
.eh_frame_hdr:000000000000F258                 db  54h ; T
.eh_frame_hdr:000000000000F259                 db 0D7h
.eh_frame_hdr:000000000000F25A                 db 0FFh
.eh_frame_hdr:000000000000F25B                 db 0FFh
.eh_frame_hdr:000000000000F25C                 db 0ACh
.eh_frame_hdr:000000000000F25D                 db  19h
.eh_frame_hdr:000000000000F25E                 db    0
.eh_frame_hdr:000000000000F25F                 db    0
.eh_frame_hdr:000000000000F25F _eh_frame_hdr   ends
.eh_frame_hdr:000000000000F25F
.eh_frame:000000000000F260 ; ===========================================================================
.eh_frame:000000000000F260
.eh_frame:000000000000F260 ; Segment type: Pure data
.eh_frame:000000000000F260 ; Segment permissions: Read
.eh_frame:000000000000F260 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000F260                 assume cs:_eh_frame
.eh_frame:000000000000F260                 ;org 0F260h
.eh_frame:000000000000F260                 db  14h
.eh_frame:000000000000F261                 db    0
.eh_frame:000000000000F262                 db    0
.eh_frame:000000000000F263                 db    0
.eh_frame:000000000000F264                 db    0
.eh_frame:000000000000F265                 db    0
.eh_frame:000000000000F266                 db    0
.eh_frame:000000000000F267                 db    0
.eh_frame:000000000000F268                 db    1
.eh_frame:000000000000F269                 db  7Ah ; z
.eh_frame:000000000000F26A                 db  52h ; R
.eh_frame:000000000000F26B                 db    0
.eh_frame:000000000000F26C                 db    1
.eh_frame:000000000000F26D                 db  78h ; x
.eh_frame:000000000000F26E                 db  10h
.eh_frame:000000000000F26F                 db    1
.eh_frame:000000000000F270                 db  1Bh
.eh_frame:000000000000F271                 db  0Ch
.eh_frame:000000000000F272                 db    7
.eh_frame:000000000000F273                 db    8
.eh_frame:000000000000F274                 db  90h
.eh_frame:000000000000F275                 db    1
.eh_frame:000000000000F276                 db    7
.eh_frame:000000000000F277                 db  10h
.eh_frame:000000000000F278                 db  14h
.eh_frame:000000000000F279                 db    0
.eh_frame:000000000000F27A                 db    0
.eh_frame:000000000000F27B                 db    0
.eh_frame:000000000000F27C                 db  1Ch
.eh_frame:000000000000F27D                 db    0
.eh_frame:000000000000F27E                 db    0
.eh_frame:000000000000F27F                 db    0
.eh_frame:000000000000F280                 db    0
.eh_frame:000000000000F281                 db  4Ah ; J
.eh_frame:000000000000F282                 db 0FFh
.eh_frame:000000000000F283                 db 0FFh
.eh_frame:000000000000F284                 db  2Bh ; +
.eh_frame:000000000000F285                 db    0
.eh_frame:000000000000F286                 db    0
.eh_frame:000000000000F287                 db    0
.eh_frame:000000000000F288                 db    0
.eh_frame:000000000000F289                 db    0
.eh_frame:000000000000F28A                 db    0
.eh_frame:000000000000F28B                 db    0
.eh_frame:000000000000F28C                 db    0
.eh_frame:000000000000F28D                 db    0
.eh_frame:000000000000F28E                 db    0
.eh_frame:000000000000F28F                 db    0
.eh_frame:000000000000F290                 db  14h
.eh_frame:000000000000F291                 db    0
.eh_frame:000000000000F292                 db    0
.eh_frame:000000000000F293                 db    0
.eh_frame:000000000000F294                 db    0
.eh_frame:000000000000F295                 db    0
.eh_frame:000000000000F296                 db    0
.eh_frame:000000000000F297                 db    0
.eh_frame:000000000000F298                 db    1
.eh_frame:000000000000F299                 db  7Ah ; z
.eh_frame:000000000000F29A                 db  52h ; R
.eh_frame:000000000000F29B                 db    0
.eh_frame:000000000000F29C                 db    1
.eh_frame:000000000000F29D                 db  78h ; x
.eh_frame:000000000000F29E                 db  10h
.eh_frame:000000000000F29F                 db    1
.eh_frame:000000000000F2A0                 db  1Bh
.eh_frame:000000000000F2A1                 db  0Ch
.eh_frame:000000000000F2A2                 db    7
.eh_frame:000000000000F2A3                 db    8
.eh_frame:000000000000F2A4                 db  90h
.eh_frame:000000000000F2A5                 db    1
.eh_frame:000000000000F2A6                 db    0
.eh_frame:000000000000F2A7                 db    0
.eh_frame:000000000000F2A8                 db  24h ; $
.eh_frame:000000000000F2A9                 db    0
.eh_frame:000000000000F2AA                 db    0
.eh_frame:000000000000F2AB                 db    0
.eh_frame:000000000000F2AC                 db  1Ch
.eh_frame:000000000000F2AD                 db    0
.eh_frame:000000000000F2AE                 db    0
.eh_frame:000000000000F2AF                 db    0
.eh_frame:000000000000F2B0                 db  50h ; P
.eh_frame:000000000000F2B1                 db  27h ; '
.eh_frame:000000000000F2B2                 db 0FFh
.eh_frame:000000000000F2B3                 db 0FFh
.eh_frame:000000000000F2B4                 db 0A0h
.eh_frame:000000000000F2B5                 db    4
.eh_frame:000000000000F2B6                 db    0
.eh_frame:000000000000F2B7                 db    0
.eh_frame:000000000000F2B8                 db    0
.eh_frame:000000000000F2B9                 db  0Eh
.eh_frame:000000000000F2BA                 db  10h
.eh_frame:000000000000F2BB                 db  46h ; F
.eh_frame:000000000000F2BC                 db  0Eh
.eh_frame:000000000000F2BD                 db  18h
.eh_frame:000000000000F2BE                 db  4Ah ; J
.eh_frame:000000000000F2BF                 db  0Fh
.eh_frame:000000000000F2C0                 db  0Bh
.eh_frame:000000000000F2C1                 db  77h ; w
.eh_frame:000000000000F2C2                 db    8
.eh_frame:000000000000F2C3                 db  80h
.eh_frame:000000000000F2C4                 db    0
.eh_frame:000000000000F2C5                 db  3Fh ; ?
.eh_frame:000000000000F2C6                 db  1Ah
.eh_frame:000000000000F2C7                 db  3Bh ; ;
.eh_frame:000000000000F2C8                 db  2Ah ; *
.eh_frame:000000000000F2C9                 db  33h ; 3
.eh_frame:000000000000F2CA                 db  24h ; $
.eh_frame:000000000000F2CB                 db  22h ; "
.eh_frame:000000000000F2CC                 db    0
.eh_frame:000000000000F2CD                 db    0
.eh_frame:000000000000F2CE                 db    0
.eh_frame:000000000000F2CF                 db    0
.eh_frame:000000000000F2D0                 db  14h
.eh_frame:000000000000F2D1                 db    0
.eh_frame:000000000000F2D2                 db    0
.eh_frame:000000000000F2D3                 db    0
.eh_frame:000000000000F2D4                 db  44h ; D
.eh_frame:000000000000F2D5                 db    0
.eh_frame:000000000000F2D6                 db    0
.eh_frame:000000000000F2D7                 db    0
.eh_frame:000000000000F2D8                 db 0C8h
.eh_frame:000000000000F2D9                 db  2Bh ; +
.eh_frame:000000000000F2DA                 db 0FFh
.eh_frame:000000000000F2DB                 db 0FFh
.eh_frame:000000000000F2DC                 db    8
.eh_frame:000000000000F2DD                 db    0
.eh_frame:000000000000F2DE                 db    0
.eh_frame:000000000000F2DF                 db    0
.eh_frame:000000000000F2E0                 db    0
.eh_frame:000000000000F2E1                 db    0
.eh_frame:000000000000F2E2                 db    0
.eh_frame:000000000000F2E3                 db    0
.eh_frame:000000000000F2E4                 db    0
.eh_frame:000000000000F2E5                 db    0
.eh_frame:000000000000F2E6                 db    0
.eh_frame:000000000000F2E7                 db    0
.eh_frame:000000000000F2E8                 db  10h
.eh_frame:000000000000F2E9                 db    0
.eh_frame:000000000000F2EA                 db    0
.eh_frame:000000000000F2EB                 db    0
.eh_frame:000000000000F2EC                 db  5Ch ; \
.eh_frame:000000000000F2ED                 db    0
.eh_frame:000000000000F2EE                 db    0
.eh_frame:000000000000F2EF                 db    0
.eh_frame:000000000000F2F0                 db 0A0h
.eh_frame:000000000000F2F1                 db  4Ah ; J
.eh_frame:000000000000F2F2                 db 0FFh
.eh_frame:000000000000F2F3                 db 0FFh
.eh_frame:000000000000F2F4                 db    7
.eh_frame:000000000000F2F5                 db    0
.eh_frame:000000000000F2F6                 db    0
.eh_frame:000000000000F2F7                 db    0
.eh_frame:000000000000F2F8                 db    0
.eh_frame:000000000000F2F9                 db    0
.eh_frame:000000000000F2FA                 db    0
.eh_frame:000000000000F2FB                 db    0
.eh_frame:000000000000F2FC                 db  10h
.eh_frame:000000000000F2FD                 db    0
.eh_frame:000000000000F2FE                 db    0
.eh_frame:000000000000F2FF                 db    0
.eh_frame:000000000000F300                 db  70h ; p
.eh_frame:000000000000F301                 db    0
.eh_frame:000000000000F302                 db    0
.eh_frame:000000000000F303                 db    0
.eh_frame:000000000000F304                 db  9Ch
.eh_frame:000000000000F305                 db  4Ah ; J
.eh_frame:000000000000F306                 db 0FFh
.eh_frame:000000000000F307                 db 0FFh
.eh_frame:000000000000F308                 db  10h
.eh_frame:000000000000F309                 db    0
.eh_frame:000000000000F30A                 db    0
.eh_frame:000000000000F30B                 db    0
.eh_frame:000000000000F30C                 db    0
.eh_frame:000000000000F30D                 db    0
.eh_frame:000000000000F30E                 db    0
.eh_frame:000000000000F30F                 db    0
.eh_frame:000000000000F310                 db  68h ; h
.eh_frame:000000000000F311                 db    0
.eh_frame:000000000000F312                 db    0
.eh_frame:000000000000F313                 db    0
.eh_frame:000000000000F314                 db  84h
.eh_frame:000000000000F315                 db    0
.eh_frame:000000000000F316                 db    0
.eh_frame:000000000000F317                 db    0
.eh_frame:000000000000F318                 db  98h
.eh_frame:000000000000F319                 db  4Ah ; J
.eh_frame:000000000000F31A                 db 0FFh
.eh_frame:000000000000F31B                 db 0FFh
.eh_frame:000000000000F31C                 db  87h
.eh_frame:000000000000F31D                 db    3
.eh_frame:000000000000F31E                 db    0
.eh_frame:000000000000F31F                 db    0
.eh_frame:000000000000F320                 db    0
.eh_frame:000000000000F321                 db  42h ; B
.eh_frame:000000000000F322                 db  0Eh
.eh_frame:000000000000F323                 db  10h
.eh_frame:000000000000F324                 db  8Fh
.eh_frame:000000000000F325                 db    2
.eh_frame:000000000000F326                 db  42h ; B
.eh_frame:000000000000F327                 db  0Eh
.eh_frame:000000000000F328                 db  18h
.eh_frame:000000000000F329                 db  8Eh
.eh_frame:000000000000F32A                 db    3
.eh_frame:000000000000F32B                 db  45h ; E
.eh_frame:000000000000F32C                 db  0Eh
.eh_frame:000000000000F32D                 db  20h
.eh_frame:000000000000F32E                 db  8Dh
.eh_frame:000000000000F32F                 db    4
.eh_frame:000000000000F330                 db  42h ; B
.eh_frame:000000000000F331                 db  0Eh
.eh_frame:000000000000F332                 db  28h ; (
.eh_frame:000000000000F333                 db  8Ch
.eh_frame:000000000000F334                 db    5
.eh_frame:000000000000F335                 db  41h ; A
.eh_frame:000000000000F336                 db  0Eh
.eh_frame:000000000000F337                 db  30h ; 0
.eh_frame:000000000000F338                 db  86h
.eh_frame:000000000000F339                 db    6
.eh_frame:000000000000F33A                 db  41h ; A
.eh_frame:000000000000F33B                 db  0Eh
.eh_frame:000000000000F33C                 db  38h ; 8
.eh_frame:000000000000F33D                 db  83h
.eh_frame:000000000000F33E                 db    7
.eh_frame:000000000000F33F                 db  4Ah ; J
.eh_frame:000000000000F340                 db  0Eh
.eh_frame:000000000000F341                 db 0A0h
.eh_frame:000000000000F342                 db  10h
.eh_frame:000000000000F343                 db    3
.eh_frame:000000000000F344                 db  4Fh ; O
.eh_frame:000000000000F345                 db    1
.eh_frame:000000000000F346                 db  0Eh
.eh_frame:000000000000F347                 db 0A8h
.eh_frame:000000000000F348                 db  10h
.eh_frame:000000000000F349                 db  42h ; B
.eh_frame:000000000000F34A                 db  0Eh
.eh_frame:000000000000F34B                 db 0B0h
.eh_frame:000000000000F34C                 db  10h
.eh_frame:000000000000F34D                 db  62h ; b
.eh_frame:000000000000F34E                 db  0Eh
.eh_frame:000000000000F34F                 db 0A8h
.eh_frame:000000000000F350                 db  10h
.eh_frame:000000000000F351                 db  41h ; A
.eh_frame:000000000000F352                 db  0Eh
.eh_frame:000000000000F353                 db 0A0h
.eh_frame:000000000000F354                 db  10h
.eh_frame:000000000000F355                 db  7Fh ; 
.eh_frame:000000000000F356                 db  0Ah
.eh_frame:000000000000F357                 db  0Eh
.eh_frame:000000000000F358                 db  38h ; 8
.eh_frame:000000000000F359                 db  41h ; A
.eh_frame:000000000000F35A                 db  0Eh
.eh_frame:000000000000F35B                 db  30h ; 0
.eh_frame:000000000000F35C                 db  41h ; A
.eh_frame:000000000000F35D                 db  0Eh
.eh_frame:000000000000F35E                 db  28h ; (
.eh_frame:000000000000F35F                 db  42h ; B
.eh_frame:000000000000F360                 db  0Eh
.eh_frame:000000000000F361                 db  20h
.eh_frame:000000000000F362                 db  42h ; B
.eh_frame:000000000000F363                 db  0Eh
.eh_frame:000000000000F364                 db  18h
.eh_frame:000000000000F365                 db  42h ; B
.eh_frame:000000000000F366                 db  0Eh
.eh_frame:000000000000F367                 db  10h
.eh_frame:000000000000F368                 db  42h ; B
.eh_frame:000000000000F369                 db  0Eh
.eh_frame:000000000000F36A                 db    8
.eh_frame:000000000000F36B                 db  44h ; D
.eh_frame:000000000000F36C                 db  0Bh
.eh_frame:000000000000F36D                 db    2
.eh_frame:000000000000F36E                 db 0CAh
.eh_frame:000000000000F36F                 db  0Ah
.eh_frame:000000000000F370                 db  0Eh
.eh_frame:000000000000F371                 db 0A8h
.eh_frame:000000000000F372                 db  10h
.eh_frame:000000000000F373                 db  44h ; D
.eh_frame:000000000000F374                 db  0Eh
.eh_frame:000000000000F375                 db 0B0h
.eh_frame:000000000000F376                 db  10h
.eh_frame:000000000000F377                 db  4Ah ; J
.eh_frame:000000000000F378                 db  0Bh
.eh_frame:000000000000F379                 db    0
.eh_frame:000000000000F37A                 db    0
.eh_frame:000000000000F37B                 db    0
.eh_frame:000000000000F37C                 db  28h ; (
.eh_frame:000000000000F37D                 db    0
.eh_frame:000000000000F37E                 db    0
.eh_frame:000000000000F37F                 db    0
.eh_frame:000000000000F380                 db 0F0h
.eh_frame:000000000000F381                 db    0
.eh_frame:000000000000F382                 db    0
.eh_frame:000000000000F383                 db    0
.eh_frame:000000000000F384                 db 0BCh
.eh_frame:000000000000F385                 db  4Dh ; M
.eh_frame:000000000000F386                 db 0FFh
.eh_frame:000000000000F387                 db 0FFh
.eh_frame:000000000000F388                 db  0Bh
.eh_frame:000000000000F389                 db    1
.eh_frame:000000000000F38A                 db    0
.eh_frame:000000000000F38B                 db    0
.eh_frame:000000000000F38C                 db    0
.eh_frame:000000000000F38D                 db  41h ; A
.eh_frame:000000000000F38E                 db  0Eh
.eh_frame:000000000000F38F                 db  10h
.eh_frame:000000000000F390                 db  86h
.eh_frame:000000000000F391                 db    2
.eh_frame:000000000000F392                 db  41h ; A
.eh_frame:000000000000F393                 db  0Eh
.eh_frame:000000000000F394                 db  18h
.eh_frame:000000000000F395                 db  83h
.eh_frame:000000000000F396                 db    3
.eh_frame:000000000000F397                 db  4Bh ; K
.eh_frame:000000000000F398                 db  0Eh
.eh_frame:000000000000F399                 db  80h
.eh_frame:000000000000F39A                 db    2
.eh_frame:000000000000F39B                 db    2
.eh_frame:000000000000F39C                 db 0D9h
.eh_frame:000000000000F39D                 db  0Ah
.eh_frame:000000000000F39E                 db  0Eh
.eh_frame:000000000000F39F                 db  18h
.eh_frame:000000000000F3A0                 db  41h ; A
.eh_frame:000000000000F3A1                 db  0Eh
.eh_frame:000000000000F3A2                 db  10h
.eh_frame:000000000000F3A3                 db  41h ; A
.eh_frame:000000000000F3A4                 db  0Eh
.eh_frame:000000000000F3A5                 db    8
.eh_frame:000000000000F3A6                 db  48h ; H
.eh_frame:000000000000F3A7                 db  0Bh
.eh_frame:000000000000F3A8                 db  38h ; 8
.eh_frame:000000000000F3A9                 db    0
.eh_frame:000000000000F3AA                 db    0
.eh_frame:000000000000F3AB                 db    0
.eh_frame:000000000000F3AC                 db  1Ch
.eh_frame:000000000000F3AD                 db    1
.eh_frame:000000000000F3AE                 db    0
.eh_frame:000000000000F3AF                 db    0
.eh_frame:000000000000F3B0                 db 0A0h
.eh_frame:000000000000F3B1                 db  4Eh ; N
.eh_frame:000000000000F3B2                 db 0FFh
.eh_frame:000000000000F3B3                 db 0FFh
.eh_frame:000000000000F3B4                 db  45h ; E
.eh_frame:000000000000F3B5                 db    1
.eh_frame:000000000000F3B6                 db    0
.eh_frame:000000000000F3B7                 db    0
.eh_frame:000000000000F3B8                 db    0
.eh_frame:000000000000F3B9                 db  42h ; B
.eh_frame:000000000000F3BA                 db  0Eh
.eh_frame:000000000000F3BB                 db  10h
.eh_frame:000000000000F3BC                 db  8Dh
.eh_frame:000000000000F3BD                 db    2
.eh_frame:000000000000F3BE                 db  42h ; B
.eh_frame:000000000000F3BF                 db  0Eh
.eh_frame:000000000000F3C0                 db  18h
.eh_frame:000000000000F3C1                 db  8Ch
.eh_frame:000000000000F3C2                 db    3
.eh_frame:000000000000F3C3                 db  48h ; H
.eh_frame:000000000000F3C4                 db  0Eh
.eh_frame:000000000000F3C5                 db  20h
.eh_frame:000000000000F3C6                 db  86h
.eh_frame:000000000000F3C7                 db    4
.eh_frame:000000000000F3C8                 db  41h ; A
.eh_frame:000000000000F3C9                 db  0Eh
.eh_frame:000000000000F3CA                 db  28h ; (
.eh_frame:000000000000F3CB                 db  83h
.eh_frame:000000000000F3CC                 db    5
.eh_frame:000000000000F3CD                 db  4Fh ; O
.eh_frame:000000000000F3CE                 db  0Eh
.eh_frame:000000000000F3CF                 db  50h ; P
.eh_frame:000000000000F3D0                 db    2
.eh_frame:000000000000F3D1                 db  47h ; G
.eh_frame:000000000000F3D2                 db  0Ah
.eh_frame:000000000000F3D3                 db  0Eh
.eh_frame:000000000000F3D4                 db  28h ; (
.eh_frame:000000000000F3D5                 db  41h ; A
.eh_frame:000000000000F3D6                 db  0Eh
.eh_frame:000000000000F3D7                 db  20h
.eh_frame:000000000000F3D8                 db  41h ; A
.eh_frame:000000000000F3D9                 db  0Eh
.eh_frame:000000000000F3DA                 db  18h
.eh_frame:000000000000F3DB                 db  42h ; B
.eh_frame:000000000000F3DC                 db  0Eh
.eh_frame:000000000000F3DD                 db  10h
.eh_frame:000000000000F3DE                 db  42h ; B
.eh_frame:000000000000F3DF                 db  0Eh
.eh_frame:000000000000F3E0                 db    8
.eh_frame:000000000000F3E1                 db  47h ; G
.eh_frame:000000000000F3E2                 db  0Bh
.eh_frame:000000000000F3E3                 db    0
.eh_frame:000000000000F3E4                 db  38h ; 8
.eh_frame:000000000000F3E5                 db    0
.eh_frame:000000000000F3E6                 db    0
.eh_frame:000000000000F3E7                 db    0
.eh_frame:000000000000F3E8                 db  58h ; X
.eh_frame:000000000000F3E9                 db    1
.eh_frame:000000000000F3EA                 db    0
.eh_frame:000000000000F3EB                 db    0
.eh_frame:000000000000F3EC                 db 0B4h
.eh_frame:000000000000F3ED                 db  4Fh ; O
.eh_frame:000000000000F3EE                 db 0FFh
.eh_frame:000000000000F3EF                 db 0FFh
.eh_frame:000000000000F3F0                 db  10h
.eh_frame:000000000000F3F1                 db    1
.eh_frame:000000000000F3F2                 db    0
.eh_frame:000000000000F3F3                 db    0
.eh_frame:000000000000F3F4                 db    0
.eh_frame:000000000000F3F5                 db  42h ; B
.eh_frame:000000000000F3F6                 db  0Eh
.eh_frame:000000000000F3F7                 db  10h
.eh_frame:000000000000F3F8                 db  8Dh
.eh_frame:000000000000F3F9                 db    2
.eh_frame:000000000000F3FA                 db  42h ; B
.eh_frame:000000000000F3FB                 db  0Eh
.eh_frame:000000000000F3FC                 db  18h
.eh_frame:000000000000F3FD                 db  8Ch
.eh_frame:000000000000F3FE                 db    3
.eh_frame:000000000000F3FF                 db  41h ; A
.eh_frame:000000000000F400                 db  0Eh
.eh_frame:000000000000F401                 db  20h
.eh_frame:000000000000F402                 db  86h
.eh_frame:000000000000F403                 db    4
.eh_frame:000000000000F404                 db  41h ; A
.eh_frame:000000000000F405                 db  0Eh
.eh_frame:000000000000F406                 db  28h ; (
.eh_frame:000000000000F407                 db  83h
.eh_frame:000000000000F408                 db    5
.eh_frame:000000000000F409                 db  49h ; I
.eh_frame:000000000000F40A                 db  0Eh
.eh_frame:000000000000F40B                 db 0D0h
.eh_frame:000000000000F40C                 db    1
.eh_frame:000000000000F40D                 db  79h ; y
.eh_frame:000000000000F40E                 db  0Ah
.eh_frame:000000000000F40F                 db  0Eh
.eh_frame:000000000000F410                 db  28h ; (
.eh_frame:000000000000F411                 db  41h ; A
.eh_frame:000000000000F412                 db  0Eh
.eh_frame:000000000000F413                 db  20h
.eh_frame:000000000000F414                 db  41h ; A
.eh_frame:000000000000F415                 db  0Eh
.eh_frame:000000000000F416                 db  18h
.eh_frame:000000000000F417                 db  42h ; B
.eh_frame:000000000000F418                 db  0Eh
.eh_frame:000000000000F419                 db  10h
.eh_frame:000000000000F41A                 db  42h ; B
.eh_frame:000000000000F41B                 db  0Eh
.eh_frame:000000000000F41C                 db    8
.eh_frame:000000000000F41D                 db  41h ; A
.eh_frame:000000000000F41E                 db  0Bh
.eh_frame:000000000000F41F                 db    0
.eh_frame:000000000000F420                 db  40h ; @
.eh_frame:000000000000F421                 db    0
.eh_frame:000000000000F422                 db    0
.eh_frame:000000000000F423                 db    0
.eh_frame:000000000000F424                 db  94h
.eh_frame:000000000000F425                 db    1
.eh_frame:000000000000F426                 db    0
.eh_frame:000000000000F427                 db    0
.eh_frame:000000000000F428                 db  88h
.eh_frame:000000000000F429                 db  50h ; P
.eh_frame:000000000000F42A                 db 0FFh
.eh_frame:000000000000F42B                 db 0FFh
.eh_frame:000000000000F42C                 db 0F3h
.eh_frame:000000000000F42D                 db    0
.eh_frame:000000000000F42E                 db    0
.eh_frame:000000000000F42F                 db    0
.eh_frame:000000000000F430                 db    0
.eh_frame:000000000000F431                 db  42h ; B
.eh_frame:000000000000F432                 db  0Eh
.eh_frame:000000000000F433                 db  10h
.eh_frame:000000000000F434                 db  8Eh
.eh_frame:000000000000F435                 db    2
.eh_frame:000000000000F436                 db  42h ; B
.eh_frame:000000000000F437                 db  0Eh
.eh_frame:000000000000F438                 db  18h
.eh_frame:000000000000F439                 db  8Dh
.eh_frame:000000000000F43A                 db    3
.eh_frame:000000000000F43B                 db  45h ; E
.eh_frame:000000000000F43C                 db  0Eh
.eh_frame:000000000000F43D                 db  20h
.eh_frame:000000000000F43E                 db  8Ch
.eh_frame:000000000000F43F                 db    4
.eh_frame:000000000000F440                 db  41h ; A
.eh_frame:000000000000F441                 db  0Eh
.eh_frame:000000000000F442                 db  28h ; (
.eh_frame:000000000000F443                 db  86h
.eh_frame:000000000000F444                 db    5
.eh_frame:000000000000F445                 db  44h ; D
.eh_frame:000000000000F446                 db  0Eh
.eh_frame:000000000000F447                 db  30h ; 0
.eh_frame:000000000000F448                 db  83h
.eh_frame:000000000000F449                 db    6
.eh_frame:000000000000F44A                 db  50h ; P
.eh_frame:000000000000F44B                 db  0Eh
.eh_frame:000000000000F44C                 db 0A0h
.eh_frame:000000000000F44D                 db    1
.eh_frame:000000000000F44E                 db    2
.eh_frame:000000000000F44F                 db  81h
.eh_frame:000000000000F450                 db  0Ah
.eh_frame:000000000000F451                 db  0Eh
.eh_frame:000000000000F452                 db  30h ; 0
.eh_frame:000000000000F453                 db  41h ; A
.eh_frame:000000000000F454                 db  0Eh
.eh_frame:000000000000F455                 db  28h ; (
.eh_frame:000000000000F456                 db  41h ; A
.eh_frame:000000000000F457                 db  0Eh
.eh_frame:000000000000F458                 db  20h
.eh_frame:000000000000F459                 db  42h ; B
.eh_frame:000000000000F45A                 db  0Eh
.eh_frame:000000000000F45B                 db  18h
.eh_frame:000000000000F45C                 db  42h ; B
.eh_frame:000000000000F45D                 db  0Eh
.eh_frame:000000000000F45E                 db  10h
.eh_frame:000000000000F45F                 db  42h ; B
.eh_frame:000000000000F460                 db  0Eh
.eh_frame:000000000000F461                 db    8
.eh_frame:000000000000F462                 db  41h ; A
.eh_frame:000000000000F463                 db  0Bh
.eh_frame:000000000000F464                 db  48h ; H
.eh_frame:000000000000F465                 db    0
.eh_frame:000000000000F466                 db    0
.eh_frame:000000000000F467                 db    0
.eh_frame:000000000000F468                 db 0D8h
.eh_frame:000000000000F469                 db    1
.eh_frame:000000000000F46A                 db    0
.eh_frame:000000000000F46B                 db    0
.eh_frame:000000000000F46C                 db  44h ; D
.eh_frame:000000000000F46D                 db  51h ; Q
.eh_frame:000000000000F46E                 db 0FFh
.eh_frame:000000000000F46F                 db 0FFh
.eh_frame:000000000000F470                 db  78h ; x
.eh_frame:000000000000F471                 db    1
.eh_frame:000000000000F472                 db    0
.eh_frame:000000000000F473                 db    0
.eh_frame:000000000000F474                 db    0
.eh_frame:000000000000F475                 db  42h ; B
.eh_frame:000000000000F476                 db  0Eh
.eh_frame:000000000000F477                 db  10h
.eh_frame:000000000000F478                 db  8Fh
.eh_frame:000000000000F479                 db    2
.eh_frame:000000000000F47A                 db  42h ; B
.eh_frame:000000000000F47B                 db  0Eh
.eh_frame:000000000000F47C                 db  18h
.eh_frame:000000000000F47D                 db  8Eh
.eh_frame:000000000000F47E                 db    3
.eh_frame:000000000000F47F                 db  42h ; B
.eh_frame:000000000000F480                 db  0Eh
.eh_frame:000000000000F481                 db  20h
.eh_frame:000000000000F482                 db  8Dh
.eh_frame:000000000000F483                 db    4
.eh_frame:000000000000F484                 db  42h ; B
.eh_frame:000000000000F485                 db  0Eh
.eh_frame:000000000000F486                 db  28h ; (
.eh_frame:000000000000F487                 db  8Ch
.eh_frame:000000000000F488                 db    5
.eh_frame:000000000000F489                 db  41h ; A
.eh_frame:000000000000F48A                 db  0Eh
.eh_frame:000000000000F48B                 db  30h ; 0
.eh_frame:000000000000F48C                 db  86h
.eh_frame:000000000000F48D                 db    6
.eh_frame:000000000000F48E                 db  41h ; A
.eh_frame:000000000000F48F                 db  0Eh
.eh_frame:000000000000F490                 db  38h ; 8
.eh_frame:000000000000F491                 db  83h
.eh_frame:000000000000F492                 db    7
.eh_frame:000000000000F493                 db  44h ; D
.eh_frame:000000000000F494                 db  0Eh
.eh_frame:000000000000F495                 db  40h ; @
.eh_frame:000000000000F496                 db  7Eh ; ~
.eh_frame:000000000000F497                 db  0Ah
.eh_frame:000000000000F498                 db  0Eh
.eh_frame:000000000000F499                 db  38h ; 8
.eh_frame:000000000000F49A                 db  44h ; D
.eh_frame:000000000000F49B                 db  0Eh
.eh_frame:000000000000F49C                 db  30h ; 0
.eh_frame:000000000000F49D                 db  41h ; A
.eh_frame:000000000000F49E                 db  0Eh
.eh_frame:000000000000F49F                 db  28h ; (
.eh_frame:000000000000F4A0                 db  42h ; B
.eh_frame:000000000000F4A1                 db  0Eh
.eh_frame:000000000000F4A2                 db  20h
.eh_frame:000000000000F4A3                 db  42h ; B
.eh_frame:000000000000F4A4                 db  0Eh
.eh_frame:000000000000F4A5                 db  18h
.eh_frame:000000000000F4A6                 db  42h ; B
.eh_frame:000000000000F4A7                 db  0Eh
.eh_frame:000000000000F4A8                 db  10h
.eh_frame:000000000000F4A9                 db  42h ; B
.eh_frame:000000000000F4AA                 db  0Eh
.eh_frame:000000000000F4AB                 db    8
.eh_frame:000000000000F4AC                 db  47h ; G
.eh_frame:000000000000F4AD                 db  0Bh
.eh_frame:000000000000F4AE                 db    0
.eh_frame:000000000000F4AF                 db    0
.eh_frame:000000000000F4B0                 db  18h
.eh_frame:000000000000F4B1                 db    0
.eh_frame:000000000000F4B2                 db    0
.eh_frame:000000000000F4B3                 db    0
.eh_frame:000000000000F4B4                 db  24h ; $
.eh_frame:000000000000F4B5                 db    2
.eh_frame:000000000000F4B6                 db    0
.eh_frame:000000000000F4B7                 db    0
.eh_frame:000000000000F4B8                 db  78h ; x
.eh_frame:000000000000F4B9                 db  52h ; R
.eh_frame:000000000000F4BA                 db 0FFh
.eh_frame:000000000000F4BB                 db 0FFh
.eh_frame:000000000000F4BC                 db  37h ; 7
.eh_frame:000000000000F4BD                 db    0
.eh_frame:000000000000F4BE                 db    0
.eh_frame:000000000000F4BF                 db    0
.eh_frame:000000000000F4C0                 db    0
.eh_frame:000000000000F4C1                 db  4Dh ; M
.eh_frame:000000000000F4C2                 db  0Eh
.eh_frame:000000000000F4C3                 db  10h
.eh_frame:000000000000F4C4                 db  54h ; T
.eh_frame:000000000000F4C5                 db  0Eh
.eh_frame:000000000000F4C6                 db    8
.eh_frame:000000000000F4C7                 db  4Ch ; L
.eh_frame:000000000000F4C8                 db  0Eh
.eh_frame:000000000000F4C9                 db  10h
.eh_frame:000000000000F4CA                 db    0
.eh_frame:000000000000F4CB                 db    0
.eh_frame:000000000000F4CC                 db  58h ; X
.eh_frame:000000000000F4CD                 db    0
.eh_frame:000000000000F4CE                 db    0
.eh_frame:000000000000F4CF                 db    0
.eh_frame:000000000000F4D0                 db  40h ; @
.eh_frame:000000000000F4D1                 db    2
.eh_frame:000000000000F4D2                 db    0
.eh_frame:000000000000F4D3                 db    0
.eh_frame:000000000000F4D4                 db  9Ch
.eh_frame:000000000000F4D5                 db  52h ; R
.eh_frame:000000000000F4D6                 db 0FFh
.eh_frame:000000000000F4D7                 db 0FFh
.eh_frame:000000000000F4D8                 db  1Fh
.eh_frame:000000000000F4D9                 db    1
.eh_frame:000000000000F4DA                 db    0
.eh_frame:000000000000F4DB                 db    0
.eh_frame:000000000000F4DC                 db    0
.eh_frame:000000000000F4DD                 db  42h ; B
.eh_frame:000000000000F4DE                 db  0Eh
.eh_frame:000000000000F4DF                 db  10h
.eh_frame:000000000000F4E0                 db  8Dh
.eh_frame:000000000000F4E1                 db    2
.eh_frame:000000000000F4E2                 db  42h ; B
.eh_frame:000000000000F4E3                 db  0Eh
.eh_frame:000000000000F4E4                 db  18h
.eh_frame:000000000000F4E5                 db  8Ch
.eh_frame:000000000000F4E6                 db    3
.eh_frame:000000000000F4E7                 db  41h ; A
.eh_frame:000000000000F4E8                 db  0Eh
.eh_frame:000000000000F4E9                 db  20h
.eh_frame:000000000000F4EA                 db  86h
.eh_frame:000000000000F4EB                 db    4
.eh_frame:000000000000F4EC                 db  41h ; A
.eh_frame:000000000000F4ED                 db  0Eh
.eh_frame:000000000000F4EE                 db  28h ; (
.eh_frame:000000000000F4EF                 db  83h
.eh_frame:000000000000F4F0                 db    5
.eh_frame:000000000000F4F1                 db  44h ; D
.eh_frame:000000000000F4F2                 db  0Eh
.eh_frame:000000000000F4F3                 db  30h ; 0
.eh_frame:000000000000F4F4                 db    2
.eh_frame:000000000000F4F5                 db  67h ; g
.eh_frame:000000000000F4F6                 db  0Eh
.eh_frame:000000000000F4F7                 db  38h ; 8
.eh_frame:000000000000F4F8                 db  4Ch ; L
.eh_frame:000000000000F4F9                 db  0Eh
.eh_frame:000000000000F4FA                 db  40h ; @
.eh_frame:000000000000F4FB                 db  5Dh ; ]
.eh_frame:000000000000F4FC                 db  0Eh
.eh_frame:000000000000F4FD                 db  38h ; 8
.eh_frame:000000000000F4FE                 db  41h ; A
.eh_frame:000000000000F4FF                 db  0Eh
.eh_frame:000000000000F500                 db  30h ; 0
.eh_frame:000000000000F501                 db  52h ; R
.eh_frame:000000000000F502                 db  0Ah
.eh_frame:000000000000F503                 db  0Eh
.eh_frame:000000000000F504                 db  28h ; (
.eh_frame:000000000000F505                 db  43h ; C
.eh_frame:000000000000F506                 db  0Eh
.eh_frame:000000000000F507                 db  20h
.eh_frame:000000000000F508                 db  41h ; A
.eh_frame:000000000000F509                 db  0Eh
.eh_frame:000000000000F50A                 db  18h
.eh_frame:000000000000F50B                 db  42h ; B
.eh_frame:000000000000F50C                 db  0Eh
.eh_frame:000000000000F50D                 db  10h
.eh_frame:000000000000F50E                 db  42h ; B
.eh_frame:000000000000F50F                 db  0Eh
.eh_frame:000000000000F510                 db    8
.eh_frame:000000000000F511                 db  4Bh ; K
.eh_frame:000000000000F512                 db  0Bh
.eh_frame:000000000000F513                 db  44h ; D
.eh_frame:000000000000F514                 db  0Ah
.eh_frame:000000000000F515                 db  0Eh
.eh_frame:000000000000F516                 db  28h ; (
.eh_frame:000000000000F517                 db  41h ; A
.eh_frame:000000000000F518                 db  0Eh
.eh_frame:000000000000F519                 db  20h
.eh_frame:000000000000F51A                 db  41h ; A
.eh_frame:000000000000F51B                 db  0Eh
.eh_frame:000000000000F51C                 db  18h
.eh_frame:000000000000F51D                 db  42h ; B
.eh_frame:000000000000F51E                 db  0Eh
.eh_frame:000000000000F51F                 db  10h
.eh_frame:000000000000F520                 db  42h ; B
.eh_frame:000000000000F521                 db  0Eh
.eh_frame:000000000000F522                 db    8
.eh_frame:000000000000F523                 db  46h ; F
.eh_frame:000000000000F524                 db  0Bh
.eh_frame:000000000000F525                 db    0
.eh_frame:000000000000F526                 db    0
.eh_frame:000000000000F527                 db    0
.eh_frame:000000000000F528                 db  28h ; (
.eh_frame:000000000000F529                 db    0
.eh_frame:000000000000F52A                 db    0
.eh_frame:000000000000F52B                 db    0
.eh_frame:000000000000F52C                 db  9Ch
.eh_frame:000000000000F52D                 db    2
.eh_frame:000000000000F52E                 db    0
.eh_frame:000000000000F52F                 db    0
.eh_frame:000000000000F530                 db  60h ; `
.eh_frame:000000000000F531                 db  53h ; S
.eh_frame:000000000000F532                 db 0FFh
.eh_frame:000000000000F533                 db 0FFh
.eh_frame:000000000000F534                 db 0ACh
.eh_frame:000000000000F535                 db    0
.eh_frame:000000000000F536                 db    0
.eh_frame:000000000000F537                 db    0
.eh_frame:000000000000F538                 db    0
.eh_frame:000000000000F539                 db  41h ; A
.eh_frame:000000000000F53A                 db  0Eh
.eh_frame:000000000000F53B                 db  10h
.eh_frame:000000000000F53C                 db  86h
.eh_frame:000000000000F53D                 db    2
.eh_frame:000000000000F53E                 db  41h ; A
.eh_frame:000000000000F53F                 db  0Eh
.eh_frame:000000000000F540                 db  18h
.eh_frame:000000000000F541                 db  83h
.eh_frame:000000000000F542                 db    3
.eh_frame:000000000000F543                 db  46h ; F
.eh_frame:000000000000F544                 db  0Eh
.eh_frame:000000000000F545                 db  20h
.eh_frame:000000000000F546                 db  5Bh ; [
.eh_frame:000000000000F547                 db  0Ah
.eh_frame:000000000000F548                 db  0Eh
.eh_frame:000000000000F549                 db  18h
.eh_frame:000000000000F54A                 db  41h ; A
.eh_frame:000000000000F54B                 db  0Eh
.eh_frame:000000000000F54C                 db  10h
.eh_frame:000000000000F54D                 db  41h ; A
.eh_frame:000000000000F54E                 db  0Eh
.eh_frame:000000000000F54F                 db    8
.eh_frame:000000000000F550                 db  41h ; A
.eh_frame:000000000000F551                 db  0Bh
.eh_frame:000000000000F552                 db    0
.eh_frame:000000000000F553                 db    0
.eh_frame:000000000000F554                 db  28h ; (
.eh_frame:000000000000F555                 db    0
.eh_frame:000000000000F556                 db    0
.eh_frame:000000000000F557                 db    0
.eh_frame:000000000000F558                 db 0C8h
.eh_frame:000000000000F559                 db    2
.eh_frame:000000000000F55A                 db    0
.eh_frame:000000000000F55B                 db    0
.eh_frame:000000000000F55C                 db 0E4h
.eh_frame:000000000000F55D                 db  53h ; S
.eh_frame:000000000000F55E                 db 0FFh
.eh_frame:000000000000F55F                 db 0FFh
.eh_frame:000000000000F560                 db 0D2h
.eh_frame:000000000000F561                 db    0
.eh_frame:000000000000F562                 db    0
.eh_frame:000000000000F563                 db    0
.eh_frame:000000000000F564                 db    0
.eh_frame:000000000000F565                 db  41h ; A
.eh_frame:000000000000F566                 db  0Eh
.eh_frame:000000000000F567                 db  10h
.eh_frame:000000000000F568                 db  86h
.eh_frame:000000000000F569                 db    2
.eh_frame:000000000000F56A                 db  41h ; A
.eh_frame:000000000000F56B                 db  0Eh
.eh_frame:000000000000F56C                 db  18h
.eh_frame:000000000000F56D                 db  83h
.eh_frame:000000000000F56E                 db    3
.eh_frame:000000000000F56F                 db  47h ; G
.eh_frame:000000000000F570                 db  0Eh
.eh_frame:000000000000F571                 db 0B0h
.eh_frame:000000000000F572                 db    1
.eh_frame:000000000000F573                 db    2
.eh_frame:000000000000F574                 db 0C1h
.eh_frame:000000000000F575                 db  0Ah
.eh_frame:000000000000F576                 db  0Eh
.eh_frame:000000000000F577                 db  18h
.eh_frame:000000000000F578                 db  41h ; A
.eh_frame:000000000000F579                 db  0Eh
.eh_frame:000000000000F57A                 db  10h
.eh_frame:000000000000F57B                 db  41h ; A
.eh_frame:000000000000F57C                 db  0Eh
.eh_frame:000000000000F57D                 db    8
.eh_frame:000000000000F57E                 db  41h ; A
.eh_frame:000000000000F57F                 db  0Bh
.eh_frame:000000000000F580                 db  38h ; 8
.eh_frame:000000000000F581                 db    0
.eh_frame:000000000000F582                 db    0
.eh_frame:000000000000F583                 db    0
.eh_frame:000000000000F584                 db 0F4h
.eh_frame:000000000000F585                 db    2
.eh_frame:000000000000F586                 db    0
.eh_frame:000000000000F587                 db    0
.eh_frame:000000000000F588                 db  98h
.eh_frame:000000000000F589                 db  54h ; T
.eh_frame:000000000000F58A                 db 0FFh
.eh_frame:000000000000F58B                 db 0FFh
.eh_frame:000000000000F58C                 db  48h ; H
.eh_frame:000000000000F58D                 db    0
.eh_frame:000000000000F58E                 db    0
.eh_frame:000000000000F58F                 db    0
.eh_frame:000000000000F590                 db    0
.eh_frame:000000000000F591                 db  42h ; B
.eh_frame:000000000000F592                 db  0Eh
.eh_frame:000000000000F593                 db  10h
.eh_frame:000000000000F594                 db  8Eh
.eh_frame:000000000000F595                 db    2
.eh_frame:000000000000F596                 db  45h ; E
.eh_frame:000000000000F597                 db  0Eh
.eh_frame:000000000000F598                 db  18h
.eh_frame:000000000000F599                 db  8Dh
.eh_frame:000000000000F59A                 db    3
.eh_frame:000000000000F59B                 db  45h ; E
.eh_frame:000000000000F59C                 db  0Eh
.eh_frame:000000000000F59D                 db  20h
.eh_frame:000000000000F59E                 db  8Ch
.eh_frame:000000000000F59F                 db    4
.eh_frame:000000000000F5A0                 db  44h ; D
.eh_frame:000000000000F5A1                 db  0Eh
.eh_frame:000000000000F5A2                 db  28h ; (
.eh_frame:000000000000F5A3                 db  86h
.eh_frame:000000000000F5A4                 db    5
.eh_frame:000000000000F5A5                 db  43h ; C
.eh_frame:000000000000F5A6                 db  0Eh
.eh_frame:000000000000F5A7                 db  30h ; 0
.eh_frame:000000000000F5A8                 db  83h
.eh_frame:000000000000F5A9                 db    6
.eh_frame:000000000000F5AA                 db  6Dh ; m
.eh_frame:000000000000F5AB                 db  0Eh
.eh_frame:000000000000F5AC                 db  28h ; (
.eh_frame:000000000000F5AD                 db  41h ; A
.eh_frame:000000000000F5AE                 db  0Eh
.eh_frame:000000000000F5AF                 db  20h
.eh_frame:000000000000F5B0                 db  42h ; B
.eh_frame:000000000000F5B1                 db  0Eh
.eh_frame:000000000000F5B2                 db  18h
.eh_frame:000000000000F5B3                 db  42h ; B
.eh_frame:000000000000F5B4                 db  0Eh
.eh_frame:000000000000F5B5                 db  10h
.eh_frame:000000000000F5B6                 db  42h ; B
.eh_frame:000000000000F5B7                 db  0Eh
.eh_frame:000000000000F5B8                 db    8
.eh_frame:000000000000F5B9                 db    0
.eh_frame:000000000000F5BA                 db    0
.eh_frame:000000000000F5BB                 db    0
.eh_frame:000000000000F5BC                 db  38h ; 8
.eh_frame:000000000000F5BD                 db    0
.eh_frame:000000000000F5BE                 db    0
.eh_frame:000000000000F5BF                 db    0
.eh_frame:000000000000F5C0                 db  30h ; 0
.eh_frame:000000000000F5C1                 db    3
.eh_frame:000000000000F5C2                 db    0
.eh_frame:000000000000F5C3                 db    0
.eh_frame:000000000000F5C4                 db 0ACh
.eh_frame:000000000000F5C5                 db  54h ; T
.eh_frame:000000000000F5C6                 db 0FFh
.eh_frame:000000000000F5C7                 db 0FFh
.eh_frame:000000000000F5C8                 db  15h
.eh_frame:000000000000F5C9                 db    1
.eh_frame:000000000000F5CA                 db    0
.eh_frame:000000000000F5CB                 db    0
.eh_frame:000000000000F5CC                 db    0
.eh_frame:000000000000F5CD                 db  42h ; B
.eh_frame:000000000000F5CE                 db  0Eh
.eh_frame:000000000000F5CF                 db  10h
.eh_frame:000000000000F5D0                 db  8Dh
.eh_frame:000000000000F5D1                 db    2
.eh_frame:000000000000F5D2                 db  42h ; B
.eh_frame:000000000000F5D3                 db  0Eh
.eh_frame:000000000000F5D4                 db  18h
.eh_frame:000000000000F5D5                 db  8Ch
.eh_frame:000000000000F5D6                 db    3
.eh_frame:000000000000F5D7                 db  44h ; D
.eh_frame:000000000000F5D8                 db  0Eh
.eh_frame:000000000000F5D9                 db  20h
.eh_frame:000000000000F5DA                 db  86h
.eh_frame:000000000000F5DB                 db    4
.eh_frame:000000000000F5DC                 db  41h ; A
.eh_frame:000000000000F5DD                 db  0Eh
.eh_frame:000000000000F5DE                 db  28h ; (
.eh_frame:000000000000F5DF                 db  83h
.eh_frame:000000000000F5E0                 db    5
.eh_frame:000000000000F5E1                 db  4Ah ; J
.eh_frame:000000000000F5E2                 db  0Eh
.eh_frame:000000000000F5E3                 db  30h ; 0
.eh_frame:000000000000F5E4                 db    2
.eh_frame:000000000000F5E5                 db  6Ch ; l
.eh_frame:000000000000F5E6                 db  0Ah
.eh_frame:000000000000F5E7                 db  0Eh
.eh_frame:000000000000F5E8                 db  28h ; (
.eh_frame:000000000000F5E9                 db  44h ; D
.eh_frame:000000000000F5EA                 db  0Eh
.eh_frame:000000000000F5EB                 db  20h
.eh_frame:000000000000F5EC                 db  41h ; A
.eh_frame:000000000000F5ED                 db  0Eh
.eh_frame:000000000000F5EE                 db  18h
.eh_frame:000000000000F5EF                 db  42h ; B
.eh_frame:000000000000F5F0                 db  0Eh
.eh_frame:000000000000F5F1                 db  10h
.eh_frame:000000000000F5F2                 db  42h ; B
.eh_frame:000000000000F5F3                 db  0Eh
.eh_frame:000000000000F5F4                 db    8
.eh_frame:000000000000F5F5                 db  48h ; H
.eh_frame:000000000000F5F6                 db  0Bh
.eh_frame:000000000000F5F7                 db    0
.eh_frame:000000000000F5F8                 db  4Ch ; L
.eh_frame:000000000000F5F9                 db    0
.eh_frame:000000000000F5FA                 db    0
.eh_frame:000000000000F5FB                 db    0
.eh_frame:000000000000F5FC                 db  6Ch ; l
.eh_frame:000000000000F5FD                 db    3
.eh_frame:000000000000F5FE                 db    0
.eh_frame:000000000000F5FF                 db    0
.eh_frame:000000000000F600                 db  90h
.eh_frame:000000000000F601                 db  55h ; U
.eh_frame:000000000000F602                 db 0FFh
.eh_frame:000000000000F603                 db 0FFh
.eh_frame:000000000000F604                 db  61h ; a
.eh_frame:000000000000F605                 db    0
.eh_frame:000000000000F606                 db    0
.eh_frame:000000000000F607                 db    0
.eh_frame:000000000000F608                 db    0
.eh_frame:000000000000F609                 db  47h ; G
.eh_frame:000000000000F60A                 db  0Eh
.eh_frame:000000000000F60B                 db  10h
.eh_frame:000000000000F60C                 db  8Dh
.eh_frame:000000000000F60D                 db    2
.eh_frame:000000000000F60E                 db  42h ; B
.eh_frame:000000000000F60F                 db  0Eh
.eh_frame:000000000000F610                 db  18h
.eh_frame:000000000000F611                 db  8Ch
.eh_frame:000000000000F612                 db    3
.eh_frame:000000000000F613                 db  44h ; D
.eh_frame:000000000000F614                 db  0Eh
.eh_frame:000000000000F615                 db  20h
.eh_frame:000000000000F616                 db  86h
.eh_frame:000000000000F617                 db    4
.eh_frame:000000000000F618                 db  41h ; A
.eh_frame:000000000000F619                 db  0Eh
.eh_frame:000000000000F61A                 db  28h ; (
.eh_frame:000000000000F61B                 db  83h
.eh_frame:000000000000F61C                 db    5
.eh_frame:000000000000F61D                 db  4Dh ; M
.eh_frame:000000000000F61E                 db  0Eh
.eh_frame:000000000000F61F                 db  30h ; 0
.eh_frame:000000000000F620                 db  69h ; i
.eh_frame:000000000000F621                 db  0Ah
.eh_frame:000000000000F622                 db  0Eh
.eh_frame:000000000000F623                 db  28h ; (
.eh_frame:000000000000F624                 db  41h ; A
.eh_frame:000000000000F625                 db  0Eh
.eh_frame:000000000000F626                 db  20h
.eh_frame:000000000000F627                 db  41h ; A
.eh_frame:000000000000F628                 db  0Eh
.eh_frame:000000000000F629                 db  18h
.eh_frame:000000000000F62A                 db  42h ; B
.eh_frame:000000000000F62B                 db  0Eh
.eh_frame:000000000000F62C                 db  10h
.eh_frame:000000000000F62D                 db  42h ; B
.eh_frame:000000000000F62E                 db  0Eh
.eh_frame:000000000000F62F                 db    8
.eh_frame:000000000000F630                 db  46h ; F
.eh_frame:000000000000F631                 db  0Bh
.eh_frame:000000000000F632                 db  44h ; D
.eh_frame:000000000000F633                 db  0Eh
.eh_frame:000000000000F634                 db  28h ; (
.eh_frame:000000000000F635                 db  44h ; D
.eh_frame:000000000000F636                 db  0Eh
.eh_frame:000000000000F637                 db  20h
.eh_frame:000000000000F638                 db  41h ; A
.eh_frame:000000000000F639                 db  0Eh
.eh_frame:000000000000F63A                 db  18h
.eh_frame:000000000000F63B                 db  42h ; B
.eh_frame:000000000000F63C                 db  0Eh
.eh_frame:000000000000F63D                 db  10h
.eh_frame:000000000000F63E                 db  42h ; B
.eh_frame:000000000000F63F                 db  0Eh
.eh_frame:000000000000F640                 db    8
.eh_frame:000000000000F641                 db  41h ; A
.eh_frame:000000000000F642                 db 0C3h
.eh_frame:000000000000F643                 db 0C6h
.eh_frame:000000000000F644                 db 0CCh
.eh_frame:000000000000F645                 db 0CDh
.eh_frame:000000000000F646                 db    0
.eh_frame:000000000000F647                 db    0
.eh_frame:000000000000F648                 db  14h
.eh_frame:000000000000F649                 db    0
.eh_frame:000000000000F64A                 db    0
.eh_frame:000000000000F64B                 db    0
.eh_frame:000000000000F64C                 db 0BCh
.eh_frame:000000000000F64D                 db    3
.eh_frame:000000000000F64E                 db    0
.eh_frame:000000000000F64F                 db    0
.eh_frame:000000000000F650                 db 0B0h
.eh_frame:000000000000F651                 db  55h ; U
.eh_frame:000000000000F652                 db 0FFh
.eh_frame:000000000000F653                 db 0FFh
.eh_frame:000000000000F654                 db  20h
.eh_frame:000000000000F655                 db    0
.eh_frame:000000000000F656                 db    0
.eh_frame:000000000000F657                 db    0
.eh_frame:000000000000F658                 db    0
.eh_frame:000000000000F659                 db  44h ; D
.eh_frame:000000000000F65A                 db  0Eh
.eh_frame:000000000000F65B                 db  10h
.eh_frame:000000000000F65C                 db  57h ; W
.eh_frame:000000000000F65D                 db  0Eh
.eh_frame:000000000000F65E                 db    8
.eh_frame:000000000000F65F                 db    0
.eh_frame:000000000000F660                 db  28h ; (
.eh_frame:000000000000F661                 db    0
.eh_frame:000000000000F662                 db    0
.eh_frame:000000000000F663                 db    0
.eh_frame:000000000000F664                 db 0D4h
.eh_frame:000000000000F665                 db    3
.eh_frame:000000000000F666                 db    0
.eh_frame:000000000000F667                 db    0
.eh_frame:000000000000F668                 db 0B8h
.eh_frame:000000000000F669                 db  55h ; U
.eh_frame:000000000000F66A                 db 0FFh
.eh_frame:000000000000F66B                 db 0FFh
.eh_frame:000000000000F66C                 db 0BAh
.eh_frame:000000000000F66D                 db    0
.eh_frame:000000000000F66E                 db    0
.eh_frame:000000000000F66F                 db    0
.eh_frame:000000000000F670                 db    0
.eh_frame:000000000000F671                 db  41h ; A
.eh_frame:000000000000F672                 db  0Eh
.eh_frame:000000000000F673                 db  10h
.eh_frame:000000000000F674                 db  86h
.eh_frame:000000000000F675                 db    2
.eh_frame:000000000000F676                 db  41h ; A
.eh_frame:000000000000F677                 db  0Eh
.eh_frame:000000000000F678                 db  18h
.eh_frame:000000000000F679                 db  83h
.eh_frame:000000000000F67A                 db    3
.eh_frame:000000000000F67B                 db  47h ; G
.eh_frame:000000000000F67C                 db  0Eh
.eh_frame:000000000000F67D                 db 0C0h
.eh_frame:000000000000F67E                 db    5
.eh_frame:000000000000F67F                 db    2
.eh_frame:000000000000F680                 db  61h ; a
.eh_frame:000000000000F681                 db  0Ah
.eh_frame:000000000000F682                 db  0Eh
.eh_frame:000000000000F683                 db  18h
.eh_frame:000000000000F684                 db  41h ; A
.eh_frame:000000000000F685                 db  0Eh
.eh_frame:000000000000F686                 db  10h
.eh_frame:000000000000F687                 db  41h ; A
.eh_frame:000000000000F688                 db  0Eh
.eh_frame:000000000000F689                 db    8
.eh_frame:000000000000F68A                 db  41h ; A
.eh_frame:000000000000F68B                 db  0Bh
.eh_frame:000000000000F68C                 db  28h ; (
.eh_frame:000000000000F68D                 db    0
.eh_frame:000000000000F68E                 db    0
.eh_frame:000000000000F68F                 db    0
.eh_frame:000000000000F690                 db    0
.eh_frame:000000000000F691                 db    4
.eh_frame:000000000000F692                 db    0
.eh_frame:000000000000F693                 db    0
.eh_frame:000000000000F694                 db  4Ch ; L
.eh_frame:000000000000F695                 db  56h ; V
.eh_frame:000000000000F696                 db 0FFh
.eh_frame:000000000000F697                 db 0FFh
.eh_frame:000000000000F698                 db 0BAh
.eh_frame:000000000000F699                 db    0
.eh_frame:000000000000F69A                 db    0
.eh_frame:000000000000F69B                 db    0
.eh_frame:000000000000F69C                 db    0
.eh_frame:000000000000F69D                 db  41h ; A
.eh_frame:000000000000F69E                 db  0Eh
.eh_frame:000000000000F69F                 db  10h
.eh_frame:000000000000F6A0                 db  86h
.eh_frame:000000000000F6A1                 db    2
.eh_frame:000000000000F6A2                 db  41h ; A
.eh_frame:000000000000F6A3                 db  0Eh
.eh_frame:000000000000F6A4                 db  18h
.eh_frame:000000000000F6A5                 db  83h
.eh_frame:000000000000F6A6                 db    3
.eh_frame:000000000000F6A7                 db  47h ; G
.eh_frame:000000000000F6A8                 db  0Eh
.eh_frame:000000000000F6A9                 db 0C0h
.eh_frame:000000000000F6AA                 db    5
.eh_frame:000000000000F6AB                 db    2
.eh_frame:000000000000F6AC                 db  61h ; a
.eh_frame:000000000000F6AD                 db  0Ah
.eh_frame:000000000000F6AE                 db  0Eh
.eh_frame:000000000000F6AF                 db  18h
.eh_frame:000000000000F6B0                 db  41h ; A
.eh_frame:000000000000F6B1                 db  0Eh
.eh_frame:000000000000F6B2                 db  10h
.eh_frame:000000000000F6B3                 db  41h ; A
.eh_frame:000000000000F6B4                 db  0Eh
.eh_frame:000000000000F6B5                 db    8
.eh_frame:000000000000F6B6                 db  41h ; A
.eh_frame:000000000000F6B7                 db  0Bh
.eh_frame:000000000000F6B8                 db  14h
.eh_frame:000000000000F6B9                 db    0
.eh_frame:000000000000F6BA                 db    0
.eh_frame:000000000000F6BB                 db    0
.eh_frame:000000000000F6BC                 db  2Ch ; ,
.eh_frame:000000000000F6BD                 db    4
.eh_frame:000000000000F6BE                 db    0
.eh_frame:000000000000F6BF                 db    0
.eh_frame:000000000000F6C0                 db 0E0h
.eh_frame:000000000000F6C1                 db  56h ; V
.eh_frame:000000000000F6C2                 db 0FFh
.eh_frame:000000000000F6C3                 db 0FFh
.eh_frame:000000000000F6C4                 db  4Ch ; L
.eh_frame:000000000000F6C5                 db    0
.eh_frame:000000000000F6C6                 db    0
.eh_frame:000000000000F6C7                 db    0
.eh_frame:000000000000F6C8                 db    0
.eh_frame:000000000000F6C9                 db  77h ; w
.eh_frame:000000000000F6CA                 db  0Eh
.eh_frame:000000000000F6CB                 db  10h
.eh_frame:000000000000F6CC                 db  54h ; T
.eh_frame:000000000000F6CD                 db  0Eh
.eh_frame:000000000000F6CE                 db    8
.eh_frame:000000000000F6CF                 db    0
.eh_frame:000000000000F6D0                 db  24h ; $
.eh_frame:000000000000F6D1                 db    0
.eh_frame:000000000000F6D2                 db    0
.eh_frame:000000000000F6D3                 db    0
.eh_frame:000000000000F6D4                 db  44h ; D
.eh_frame:000000000000F6D5                 db    4
.eh_frame:000000000000F6D6                 db    0
.eh_frame:000000000000F6D7                 db    0
.eh_frame:000000000000F6D8                 db  18h
.eh_frame:000000000000F6D9                 db  57h ; W
.eh_frame:000000000000F6DA                 db 0FFh
.eh_frame:000000000000F6DB                 db 0FFh
.eh_frame:000000000000F6DC                 db  3Bh ; ;
.eh_frame:000000000000F6DD                 db    0
.eh_frame:000000000000F6DE                 db    0
.eh_frame:000000000000F6DF                 db    0
.eh_frame:000000000000F6E0                 db    0
.eh_frame:000000000000F6E1                 db  41h ; A
.eh_frame:000000000000F6E2                 db  0Eh
.eh_frame:000000000000F6E3                 db  10h
.eh_frame:000000000000F6E4                 db  86h
.eh_frame:000000000000F6E5                 db    2
.eh_frame:000000000000F6E6                 db  41h ; A
.eh_frame:000000000000F6E7                 db  0Eh
.eh_frame:000000000000F6E8                 db  18h
.eh_frame:000000000000F6E9                 db  83h
.eh_frame:000000000000F6EA                 db    3
.eh_frame:000000000000F6EB                 db  47h ; G
.eh_frame:000000000000F6EC                 db  0Eh
.eh_frame:000000000000F6ED                 db  20h
.eh_frame:000000000000F6EE                 db  6Dh ; m
.eh_frame:000000000000F6EF                 db  0Eh
.eh_frame:000000000000F6F0                 db  18h
.eh_frame:000000000000F6F1                 db  43h ; C
.eh_frame:000000000000F6F2                 db  0Eh
.eh_frame:000000000000F6F3                 db  10h
.eh_frame:000000000000F6F4                 db  41h ; A
.eh_frame:000000000000F6F5                 db  0Eh
.eh_frame:000000000000F6F6                 db    8
.eh_frame:000000000000F6F7                 db    0
.eh_frame:000000000000F6F8                 db  4Ch ; L
.eh_frame:000000000000F6F9                 db    0
.eh_frame:000000000000F6FA                 db    0
.eh_frame:000000000000F6FB                 db    0
.eh_frame:000000000000F6FC                 db  6Ch ; l
.eh_frame:000000000000F6FD                 db    4
.eh_frame:000000000000F6FE                 db    0
.eh_frame:000000000000F6FF                 db    0
.eh_frame:000000000000F700                 db  30h ; 0
.eh_frame:000000000000F701                 db  57h ; W
.eh_frame:000000000000F702                 db 0FFh
.eh_frame:000000000000F703                 db 0FFh
.eh_frame:000000000000F704                 db 0FAh
.eh_frame:000000000000F705                 db    1
.eh_frame:000000000000F706                 db    0
.eh_frame:000000000000F707                 db    0
.eh_frame:000000000000F708                 db    0
.eh_frame:000000000000F709                 db  42h ; B
.eh_frame:000000000000F70A                 db  0Eh
.eh_frame:000000000000F70B                 db  10h
.eh_frame:000000000000F70C                 db  8Dh
.eh_frame:000000000000F70D                 db    2
.eh_frame:000000000000F70E                 db  42h ; B
.eh_frame:000000000000F70F                 db  0Eh
.eh_frame:000000000000F710                 db  18h
.eh_frame:000000000000F711                 db  8Ch
.eh_frame:000000000000F712                 db    3
.eh_frame:000000000000F713                 db  44h ; D
.eh_frame:000000000000F714                 db  0Eh
.eh_frame:000000000000F715                 db  20h
.eh_frame:000000000000F716                 db  86h
.eh_frame:000000000000F717                 db    4
.eh_frame:000000000000F718                 db  41h ; A
.eh_frame:000000000000F719                 db  0Eh
.eh_frame:000000000000F71A                 db  28h ; (
.eh_frame:000000000000F71B                 db  83h
.eh_frame:000000000000F71C                 db    5
.eh_frame:000000000000F71D                 db  47h ; G
.eh_frame:000000000000F71E                 db  0Eh
.eh_frame:000000000000F71F                 db  30h ; 0
.eh_frame:000000000000F720                 db    2
.eh_frame:000000000000F721                 db 0B6h
.eh_frame:000000000000F722                 db  0Ah
.eh_frame:000000000000F723                 db  0Eh
.eh_frame:000000000000F724                 db  28h ; (
.eh_frame:000000000000F725                 db  44h ; D
.eh_frame:000000000000F726                 db  0Eh
.eh_frame:000000000000F727                 db  20h
.eh_frame:000000000000F728                 db  41h ; A
.eh_frame:000000000000F729                 db  0Eh
.eh_frame:000000000000F72A                 db  18h
.eh_frame:000000000000F72B                 db  42h ; B
.eh_frame:000000000000F72C                 db  0Eh
.eh_frame:000000000000F72D                 db  10h
.eh_frame:000000000000F72E                 db  42h ; B
.eh_frame:000000000000F72F                 db  0Eh
.eh_frame:000000000000F730                 db    8
.eh_frame:000000000000F731                 db  41h ; A
.eh_frame:000000000000F732                 db  0Bh
.eh_frame:000000000000F733                 db    2
.eh_frame:000000000000F734                 db  81h
.eh_frame:000000000000F735                 db  0Ah
.eh_frame:000000000000F736                 db  0Eh
.eh_frame:000000000000F737                 db  28h ; (
.eh_frame:000000000000F738                 db  44h ; D
.eh_frame:000000000000F739                 db  0Eh
.eh_frame:000000000000F73A                 db  20h
.eh_frame:000000000000F73B                 db  41h ; A
.eh_frame:000000000000F73C                 db  0Eh
.eh_frame:000000000000F73D                 db  18h
.eh_frame:000000000000F73E                 db  42h ; B
.eh_frame:000000000000F73F                 db  0Eh
.eh_frame:000000000000F740                 db  10h
.eh_frame:000000000000F741                 db  42h ; B
.eh_frame:000000000000F742                 db  0Eh
.eh_frame:000000000000F743                 db    8
.eh_frame:000000000000F744                 db  46h ; F
.eh_frame:000000000000F745                 db  0Bh
.eh_frame:000000000000F746                 db    0
.eh_frame:000000000000F747                 db    0
.eh_frame:000000000000F748                 db  28h ; (
.eh_frame:000000000000F749                 db    0
.eh_frame:000000000000F74A                 db    0
.eh_frame:000000000000F74B                 db    0
.eh_frame:000000000000F74C                 db 0BCh
.eh_frame:000000000000F74D                 db    4
.eh_frame:000000000000F74E                 db    0
.eh_frame:000000000000F74F                 db    0
.eh_frame:000000000000F750                 db 0E0h
.eh_frame:000000000000F751                 db  58h ; X
.eh_frame:000000000000F752                 db 0FFh
.eh_frame:000000000000F753                 db 0FFh
.eh_frame:000000000000F754                 db  0Ah
.eh_frame:000000000000F755                 db    6
.eh_frame:000000000000F756                 db    0
.eh_frame:000000000000F757                 db    0
.eh_frame:000000000000F758                 db    0
.eh_frame:000000000000F759                 db  42h ; B
.eh_frame:000000000000F75A                 db  0Eh
.eh_frame:000000000000F75B                 db  10h
.eh_frame:000000000000F75C                 db  8Dh
.eh_frame:000000000000F75D                 db    2
.eh_frame:000000000000F75E                 db  42h ; B
.eh_frame:000000000000F75F                 db  0Eh
.eh_frame:000000000000F760                 db  18h
.eh_frame:000000000000F761                 db  8Ch
.eh_frame:000000000000F762                 db    3
.eh_frame:000000000000F763                 db  46h ; F
.eh_frame:000000000000F764                 db  0Eh
.eh_frame:000000000000F765                 db  20h
.eh_frame:000000000000F766                 db  86h
.eh_frame:000000000000F767                 db    4
.eh_frame:000000000000F768                 db  41h ; A
.eh_frame:000000000000F769                 db  0Eh
.eh_frame:000000000000F76A                 db  28h ; (
.eh_frame:000000000000F76B                 db  83h
.eh_frame:000000000000F76C                 db    5
.eh_frame:000000000000F76D                 db  49h ; I
.eh_frame:000000000000F76E                 db  0Eh
.eh_frame:000000000000F76F                 db 0B0h
.eh_frame:000000000000F770                 db    1
.eh_frame:000000000000F771                 db    0
.eh_frame:000000000000F772                 db    0
.eh_frame:000000000000F773                 db    0
.eh_frame:000000000000F774                 db  3Ch ; <
.eh_frame:000000000000F775                 db    0
.eh_frame:000000000000F776                 db    0
.eh_frame:000000000000F777                 db    0
.eh_frame:000000000000F778                 db 0E8h
.eh_frame:000000000000F779                 db    4
.eh_frame:000000000000F77A                 db    0
.eh_frame:000000000000F77B                 db    0
.eh_frame:000000000000F77C                 db 0C4h
.eh_frame:000000000000F77D                 db  5Eh ; ^
.eh_frame:000000000000F77E                 db 0FFh
.eh_frame:000000000000F77F                 db 0FFh
.eh_frame:000000000000F780                 db 0ECh
.eh_frame:000000000000F781                 db    0
.eh_frame:000000000000F782                 db    0
.eh_frame:000000000000F783                 db    0
.eh_frame:000000000000F784                 db    0
.eh_frame:000000000000F785                 db  42h ; B
.eh_frame:000000000000F786                 db  0Eh
.eh_frame:000000000000F787                 db  10h
.eh_frame:000000000000F788                 db  8Eh
.eh_frame:000000000000F789                 db    2
.eh_frame:000000000000F78A                 db  45h ; E
.eh_frame:000000000000F78B                 db  0Eh
.eh_frame:000000000000F78C                 db  18h
.eh_frame:000000000000F78D                 db  8Dh
.eh_frame:000000000000F78E                 db    3
.eh_frame:000000000000F78F                 db  45h ; E
.eh_frame:000000000000F790                 db  0Eh
.eh_frame:000000000000F791                 db  20h
.eh_frame:000000000000F792                 db  8Ch
.eh_frame:000000000000F793                 db    4
.eh_frame:000000000000F794                 db  44h ; D
.eh_frame:000000000000F795                 db  0Eh
.eh_frame:000000000000F796                 db  28h ; (
.eh_frame:000000000000F797                 db  86h
.eh_frame:000000000000F798                 db    5
.eh_frame:000000000000F799                 db  43h ; C
.eh_frame:000000000000F79A                 db  0Eh
.eh_frame:000000000000F79B                 db  30h ; 0
.eh_frame:000000000000F79C                 db  83h
.eh_frame:000000000000F79D                 db    6
.eh_frame:000000000000F79E                 db    2
.eh_frame:000000000000F79F                 db  6Ah ; j
.eh_frame:000000000000F7A0                 db  0Ah
.eh_frame:000000000000F7A1                 db  0Eh
.eh_frame:000000000000F7A2                 db  28h ; (
.eh_frame:000000000000F7A3                 db  43h ; C
.eh_frame:000000000000F7A4                 db  0Eh
.eh_frame:000000000000F7A5                 db  20h
.eh_frame:000000000000F7A6                 db  42h ; B
.eh_frame:000000000000F7A7                 db  0Eh
.eh_frame:000000000000F7A8                 db  18h
.eh_frame:000000000000F7A9                 db  42h ; B
.eh_frame:000000000000F7AA                 db  0Eh
.eh_frame:000000000000F7AB                 db  10h
.eh_frame:000000000000F7AC                 db  42h ; B
.eh_frame:000000000000F7AD                 db  0Eh
.eh_frame:000000000000F7AE                 db    8
.eh_frame:000000000000F7AF                 db  41h ; A
.eh_frame:000000000000F7B0                 db  0Bh
.eh_frame:000000000000F7B1                 db    0
.eh_frame:000000000000F7B2                 db    0
.eh_frame:000000000000F7B3                 db    0
.eh_frame:000000000000F7B4                 db  48h ; H
.eh_frame:000000000000F7B5                 db    0
.eh_frame:000000000000F7B6                 db    0
.eh_frame:000000000000F7B7                 db    0
.eh_frame:000000000000F7B8                 db  28h ; (
.eh_frame:000000000000F7B9                 db    5
.eh_frame:000000000000F7BA                 db    0
.eh_frame:000000000000F7BB                 db    0
.eh_frame:000000000000F7BC                 db  74h ; t
.eh_frame:000000000000F7BD                 db  5Fh ; _
.eh_frame:000000000000F7BE                 db 0FFh
.eh_frame:000000000000F7BF                 db 0FFh
.eh_frame:000000000000F7C0                 db  4Eh ; N
.eh_frame:000000000000F7C1                 db    3
.eh_frame:000000000000F7C2                 db    0
.eh_frame:000000000000F7C3                 db    0
.eh_frame:000000000000F7C4                 db    0
.eh_frame:000000000000F7C5                 db  42h ; B
.eh_frame:000000000000F7C6                 db  0Eh
.eh_frame:000000000000F7C7                 db  10h
.eh_frame:000000000000F7C8                 db  8Fh
.eh_frame:000000000000F7C9                 db    2
.eh_frame:000000000000F7CA                 db  42h ; B
.eh_frame:000000000000F7CB                 db  0Eh
.eh_frame:000000000000F7CC                 db  18h
.eh_frame:000000000000F7CD                 db  8Eh
.eh_frame:000000000000F7CE                 db    3
.eh_frame:000000000000F7CF                 db  45h ; E
.eh_frame:000000000000F7D0                 db  0Eh
.eh_frame:000000000000F7D1                 db  20h
.eh_frame:000000000000F7D2                 db  8Dh
.eh_frame:000000000000F7D3                 db    4
.eh_frame:000000000000F7D4                 db  42h ; B
.eh_frame:000000000000F7D5                 db  0Eh
.eh_frame:000000000000F7D6                 db  28h ; (
.eh_frame:000000000000F7D7                 db  8Ch
.eh_frame:000000000000F7D8                 db    5
.eh_frame:000000000000F7D9                 db  44h ; D
.eh_frame:000000000000F7DA                 db  0Eh
.eh_frame:000000000000F7DB                 db  30h ; 0
.eh_frame:000000000000F7DC                 db  86h
.eh_frame:000000000000F7DD                 db    6
.eh_frame:000000000000F7DE                 db  41h ; A
.eh_frame:000000000000F7DF                 db  0Eh
.eh_frame:000000000000F7E0                 db  38h ; 8
.eh_frame:000000000000F7E1                 db  83h
.eh_frame:000000000000F7E2                 db    7
.eh_frame:000000000000F7E3                 db  4Ch ; L
.eh_frame:000000000000F7E4                 db  0Eh
.eh_frame:000000000000F7E5                 db 0F0h
.eh_frame:000000000000F7E6                 db    1
.eh_frame:000000000000F7E7                 db    2
.eh_frame:000000000000F7E8                 db  9Ch
.eh_frame:000000000000F7E9                 db  0Ah
.eh_frame:000000000000F7EA                 db  0Eh
.eh_frame:000000000000F7EB                 db  38h ; 8
.eh_frame:000000000000F7EC                 db  41h ; A
.eh_frame:000000000000F7ED                 db  0Eh
.eh_frame:000000000000F7EE                 db  30h ; 0
.eh_frame:000000000000F7EF                 db  41h ; A
.eh_frame:000000000000F7F0                 db  0Eh
.eh_frame:000000000000F7F1                 db  28h ; (
.eh_frame:000000000000F7F2                 db  42h ; B
.eh_frame:000000000000F7F3                 db  0Eh
.eh_frame:000000000000F7F4                 db  20h
.eh_frame:000000000000F7F5                 db  42h ; B
.eh_frame:000000000000F7F6                 db  0Eh
.eh_frame:000000000000F7F7                 db  18h
.eh_frame:000000000000F7F8                 db  42h ; B
.eh_frame:000000000000F7F9                 db  0Eh
.eh_frame:000000000000F7FA                 db  10h
.eh_frame:000000000000F7FB                 db  42h ; B
.eh_frame:000000000000F7FC                 db  0Eh
.eh_frame:000000000000F7FD                 db    8
.eh_frame:000000000000F7FE                 db  41h ; A
.eh_frame:000000000000F7FF                 db  0Bh
.eh_frame:000000000000F800                 db  28h ; (
.eh_frame:000000000000F801                 db    0
.eh_frame:000000000000F802                 db    0
.eh_frame:000000000000F803                 db    0
.eh_frame:000000000000F804                 db  74h ; t
.eh_frame:000000000000F805                 db    5
.eh_frame:000000000000F806                 db    0
.eh_frame:000000000000F807                 db    0
.eh_frame:000000000000F808                 db  78h ; x
.eh_frame:000000000000F809                 db  62h ; b
.eh_frame:000000000000F80A                 db 0FFh
.eh_frame:000000000000F80B                 db 0FFh
.eh_frame:000000000000F80C                 db  9Eh
.eh_frame:000000000000F80D                 db    0
.eh_frame:000000000000F80E                 db    0
.eh_frame:000000000000F80F                 db    0
.eh_frame:000000000000F810                 db    0
.eh_frame:000000000000F811                 db  50h ; P
.eh_frame:000000000000F812                 db  0Eh
.eh_frame:000000000000F813                 db  10h
.eh_frame:000000000000F814                 db  8Ch
.eh_frame:000000000000F815                 db    2
.eh_frame:000000000000F816                 db  41h ; A
.eh_frame:000000000000F817                 db  0Eh
.eh_frame:000000000000F818                 db  18h
.eh_frame:000000000000F819                 db  86h
.eh_frame:000000000000F81A                 db    3
.eh_frame:000000000000F81B                 db  41h ; A
.eh_frame:000000000000F81C                 db  0Eh
.eh_frame:000000000000F81D                 db  20h
.eh_frame:000000000000F81E                 db  83h
.eh_frame:000000000000F81F                 db    4
.eh_frame:000000000000F820                 db  56h ; V
.eh_frame:000000000000F821                 db  0Ah
.eh_frame:000000000000F822                 db  0Eh
.eh_frame:000000000000F823                 db  18h
.eh_frame:000000000000F824                 db  54h ; T
.eh_frame:000000000000F825                 db  0Eh
.eh_frame:000000000000F826                 db  10h
.eh_frame:000000000000F827                 db  42h ; B
.eh_frame:000000000000F828                 db  0Eh
.eh_frame:000000000000F829                 db    8
.eh_frame:000000000000F82A                 db  41h ; A
.eh_frame:000000000000F82B                 db  0Bh
.eh_frame:000000000000F82C                 db  30h ; 0
.eh_frame:000000000000F82D                 db    0
.eh_frame:000000000000F82E                 db    0
.eh_frame:000000000000F82F                 db    0
.eh_frame:000000000000F830                 db 0A0h
.eh_frame:000000000000F831                 db    5
.eh_frame:000000000000F832                 db    0
.eh_frame:000000000000F833                 db    0
.eh_frame:000000000000F834                 db 0ECh
.eh_frame:000000000000F835                 db  62h ; b
.eh_frame:000000000000F836                 db 0FFh
.eh_frame:000000000000F837                 db 0FFh
.eh_frame:000000000000F838                 db  12h
.eh_frame:000000000000F839                 db    1
.eh_frame:000000000000F83A                 db    0
.eh_frame:000000000000F83B                 db    0
.eh_frame:000000000000F83C                 db    0
.eh_frame:000000000000F83D                 db  4Bh ; K
.eh_frame:000000000000F83E                 db  0Eh
.eh_frame:000000000000F83F                 db  10h
.eh_frame:000000000000F840                 db  8Ch
.eh_frame:000000000000F841                 db    2
.eh_frame:000000000000F842                 db  45h ; E
.eh_frame:000000000000F843                 db  0Eh
.eh_frame:000000000000F844                 db  18h
.eh_frame:000000000000F845                 db  86h
.eh_frame:000000000000F846                 db    3
.eh_frame:000000000000F847                 db  44h ; D
.eh_frame:000000000000F848                 db  0Eh
.eh_frame:000000000000F849                 db  20h
.eh_frame:000000000000F84A                 db  83h
.eh_frame:000000000000F84B                 db    4
.eh_frame:000000000000F84C                 db    2
.eh_frame:000000000000F84D                 db  88h
.eh_frame:000000000000F84E                 db  0Ah
.eh_frame:000000000000F84F                 db  0Eh
.eh_frame:000000000000F850                 db  18h
.eh_frame:000000000000F851                 db  41h ; A
.eh_frame:000000000000F852                 db  0Eh
.eh_frame:000000000000F853                 db  10h
.eh_frame:000000000000F854                 db  42h ; B
.eh_frame:000000000000F855                 db  0Eh
.eh_frame:000000000000F856                 db    8
.eh_frame:000000000000F857                 db  41h ; A
.eh_frame:000000000000F858                 db  0Bh
.eh_frame:000000000000F859                 db    2
.eh_frame:000000000000F85A                 db  70h ; p
.eh_frame:000000000000F85B                 db  0Eh
.eh_frame:000000000000F85C                 db    8
.eh_frame:000000000000F85D                 db 0C3h
.eh_frame:000000000000F85E                 db 0C6h
.eh_frame:000000000000F85F                 db 0CCh
.eh_frame:000000000000F860                 db  40h ; @
.eh_frame:000000000000F861                 db    0
.eh_frame:000000000000F862                 db    0
.eh_frame:000000000000F863                 db    0
.eh_frame:000000000000F864                 db 0D4h
.eh_frame:000000000000F865                 db    5
.eh_frame:000000000000F866                 db    0
.eh_frame:000000000000F867                 db    0
.eh_frame:000000000000F868                 db 0D8h
.eh_frame:000000000000F869                 db  63h ; c
.eh_frame:000000000000F86A                 db 0FFh
.eh_frame:000000000000F86B                 db 0FFh
.eh_frame:000000000000F86C                 db  6Ah ; j
.eh_frame:000000000000F86D                 db    1
.eh_frame:000000000000F86E                 db    0
.eh_frame:000000000000F86F                 db    0
.eh_frame:000000000000F870                 db    0
.eh_frame:000000000000F871                 db  4Bh ; K
.eh_frame:000000000000F872                 db  0Eh
.eh_frame:000000000000F873                 db  10h
.eh_frame:000000000000F874                 db  8Dh
.eh_frame:000000000000F875                 db    2
.eh_frame:000000000000F876                 db  42h ; B
.eh_frame:000000000000F877                 db  0Eh
.eh_frame:000000000000F878                 db  18h
.eh_frame:000000000000F879                 db  8Ch
.eh_frame:000000000000F87A                 db    3
.eh_frame:000000000000F87B                 db  44h ; D
.eh_frame:000000000000F87C                 db  0Eh
.eh_frame:000000000000F87D                 db  20h
.eh_frame:000000000000F87E                 db  86h
.eh_frame:000000000000F87F                 db    4
.eh_frame:000000000000F880                 db  41h ; A
.eh_frame:000000000000F881                 db  0Eh
.eh_frame:000000000000F882                 db  28h ; (
.eh_frame:000000000000F883                 db  83h
.eh_frame:000000000000F884                 db    5
.eh_frame:000000000000F885                 db  49h ; I
.eh_frame:000000000000F886                 db  0Eh
.eh_frame:000000000000F887                 db  30h ; 0
.eh_frame:000000000000F888                 db    3
.eh_frame:000000000000F889                 db  2Eh ; .
.eh_frame:000000000000F88A                 db    1
.eh_frame:000000000000F88B                 db  0Ah
.eh_frame:000000000000F88C                 db  0Eh
.eh_frame:000000000000F88D                 db  28h ; (
.eh_frame:000000000000F88E                 db  41h ; A
.eh_frame:000000000000F88F                 db  0Eh
.eh_frame:000000000000F890                 db  20h
.eh_frame:000000000000F891                 db  41h ; A
.eh_frame:000000000000F892                 db  0Eh
.eh_frame:000000000000F893                 db  18h
.eh_frame:000000000000F894                 db  42h ; B
.eh_frame:000000000000F895                 db  0Eh
.eh_frame:000000000000F896                 db  10h
.eh_frame:000000000000F897                 db  42h ; B
.eh_frame:000000000000F898                 db  0Eh
.eh_frame:000000000000F899                 db    8
.eh_frame:000000000000F89A                 db  41h ; A
.eh_frame:000000000000F89B                 db  0Bh
.eh_frame:000000000000F89C                 db  58h ; X
.eh_frame:000000000000F89D                 db  0Eh
.eh_frame:000000000000F89E                 db    8
.eh_frame:000000000000F89F                 db 0C3h
.eh_frame:000000000000F8A0                 db 0C6h
.eh_frame:000000000000F8A1                 db 0CCh
.eh_frame:000000000000F8A2                 db 0CDh
.eh_frame:000000000000F8A3                 db    0
.eh_frame:000000000000F8A4                 db  68h ; h
.eh_frame:000000000000F8A5                 db    0
.eh_frame:000000000000F8A6                 db    0
.eh_frame:000000000000F8A7                 db    0
.eh_frame:000000000000F8A8                 db  18h
.eh_frame:000000000000F8A9                 db    6
.eh_frame:000000000000F8AA                 db    0
.eh_frame:000000000000F8AB                 db    0
.eh_frame:000000000000F8AC                 db    4
.eh_frame:000000000000F8AD                 db  26h ; &
.eh_frame:000000000000F8AE                 db 0FFh
.eh_frame:000000000000F8AF                 db 0FFh
.eh_frame:000000000000F8B0                 db 0CFh
.eh_frame:000000000000F8B1                 db  1Dh
.eh_frame:000000000000F8B2                 db    0
.eh_frame:000000000000F8B3                 db    0
.eh_frame:000000000000F8B4                 db    0
.eh_frame:000000000000F8B5                 db  42h ; B
.eh_frame:000000000000F8B6                 db  0Eh
.eh_frame:000000000000F8B7                 db  10h
.eh_frame:000000000000F8B8                 db  8Fh
.eh_frame:000000000000F8B9                 db    2
.eh_frame:000000000000F8BA                 db  42h ; B
.eh_frame:000000000000F8BB                 db  0Eh
.eh_frame:000000000000F8BC                 db  18h
.eh_frame:000000000000F8BD                 db  8Eh
.eh_frame:000000000000F8BE                 db    3
.eh_frame:000000000000F8BF                 db  42h ; B
.eh_frame:000000000000F8C0                 db  0Eh
.eh_frame:000000000000F8C1                 db  20h
.eh_frame:000000000000F8C2                 db  8Dh
.eh_frame:000000000000F8C3                 db    4
.eh_frame:000000000000F8C4                 db  42h ; B
.eh_frame:000000000000F8C5                 db  0Eh
.eh_frame:000000000000F8C6                 db  28h ; (
.eh_frame:000000000000F8C7                 db  8Ch
.eh_frame:000000000000F8C8                 db    5
.eh_frame:000000000000F8C9                 db  44h ; D
.eh_frame:000000000000F8CA                 db  0Eh
.eh_frame:000000000000F8CB                 db  30h ; 0
.eh_frame:000000000000F8CC                 db  86h
.eh_frame:000000000000F8CD                 db    6
.eh_frame:000000000000F8CE                 db  41h ; A
.eh_frame:000000000000F8CF                 db  0Eh
.eh_frame:000000000000F8D0                 db  38h ; 8
.eh_frame:000000000000F8D1                 db  83h
.eh_frame:000000000000F8D2                 db    7
.eh_frame:000000000000F8D3                 db  51h ; Q
.eh_frame:000000000000F8D4                 db  0Eh
.eh_frame:000000000000F8D5                 db 0A0h
.eh_frame:000000000000F8D6                 db    2
.eh_frame:000000000000F8D7                 db    3
.eh_frame:000000000000F8D8                 db 0A7h
.eh_frame:000000000000F8D9                 db    1
.eh_frame:000000000000F8DA                 db  0Eh
.eh_frame:000000000000F8DB                 db 0A8h
.eh_frame:000000000000F8DC                 db    2
.eh_frame:000000000000F8DD                 db  57h ; W
.eh_frame:000000000000F8DE                 db  0Eh
.eh_frame:000000000000F8DF                 db 0B0h
.eh_frame:000000000000F8E0                 db    2
.eh_frame:000000000000F8E1                 db  55h ; U
.eh_frame:000000000000F8E2                 db  0Eh
.eh_frame:000000000000F8E3                 db 0B8h
.eh_frame:000000000000F8E4                 db    2
.eh_frame:000000000000F8E5                 db  4Eh ; N
.eh_frame:000000000000F8E6                 db  0Eh
.eh_frame:000000000000F8E7                 db 0C0h
.eh_frame:000000000000F8E8                 db    2
.eh_frame:000000000000F8E9                 db  48h ; H
.eh_frame:000000000000F8EA                 db  0Eh
.eh_frame:000000000000F8EB                 db 0C8h
.eh_frame:000000000000F8EC                 db    2
.eh_frame:000000000000F8ED                 db  48h ; H
.eh_frame:000000000000F8EE                 db  0Eh
.eh_frame:000000000000F8EF                 db 0D0h
.eh_frame:000000000000F8F0                 db    2
.eh_frame:000000000000F8F1                 db  52h ; R
.eh_frame:000000000000F8F2                 db  0Eh
.eh_frame:000000000000F8F3                 db 0A0h
.eh_frame:000000000000F8F4                 db    2
.eh_frame:000000000000F8F5                 db    3
.eh_frame:000000000000F8F6                 db 0A4h
.eh_frame:000000000000F8F7                 db  0Eh
.eh_frame:000000000000F8F8                 db  0Ah
.eh_frame:000000000000F8F9                 db  0Eh
.eh_frame:000000000000F8FA                 db  38h ; 8
.eh_frame:000000000000F8FB                 db  41h ; A
.eh_frame:000000000000F8FC                 db  0Eh
.eh_frame:000000000000F8FD                 db  30h ; 0
.eh_frame:000000000000F8FE                 db  41h ; A
.eh_frame:000000000000F8FF                 db  0Eh
.eh_frame:000000000000F900                 db  28h ; (
.eh_frame:000000000000F901                 db  42h ; B
.eh_frame:000000000000F902                 db  0Eh
.eh_frame:000000000000F903                 db  20h
.eh_frame:000000000000F904                 db  42h ; B
.eh_frame:000000000000F905                 db  0Eh
.eh_frame:000000000000F906                 db  18h
.eh_frame:000000000000F907                 db  42h ; B
.eh_frame:000000000000F908                 db  0Eh
.eh_frame:000000000000F909                 db  10h
.eh_frame:000000000000F90A                 db  42h ; B
.eh_frame:000000000000F90B                 db  0Eh
.eh_frame:000000000000F90C                 db    8
.eh_frame:000000000000F90D                 db  41h ; A
.eh_frame:000000000000F90E                 db  0Bh
.eh_frame:000000000000F90F                 db    0
.eh_frame:000000000000F910                 db  4Ch ; L
.eh_frame:000000000000F911                 db    0
.eh_frame:000000000000F912                 db    0
.eh_frame:000000000000F913                 db    0
.eh_frame:000000000000F914                 db  84h
.eh_frame:000000000000F915                 db    6
.eh_frame:000000000000F916                 db    0
.eh_frame:000000000000F917                 db    0
.eh_frame:000000000000F918                 db  98h
.eh_frame:000000000000F919                 db  64h ; d
.eh_frame:000000000000F91A                 db 0FFh
.eh_frame:000000000000F91B                 db 0FFh
.eh_frame:000000000000F91C                 db  7Dh ; }
.eh_frame:000000000000F91D                 db    0
.eh_frame:000000000000F91E                 db    0
.eh_frame:000000000000F91F                 db    0
.eh_frame:000000000000F920                 db    0
.eh_frame:000000000000F921                 db  42h ; B
.eh_frame:000000000000F922                 db  0Eh
.eh_frame:000000000000F923                 db  10h
.eh_frame:000000000000F924                 db  8Ch
.eh_frame:000000000000F925                 db    2
.eh_frame:000000000000F926                 db  41h ; A
.eh_frame:000000000000F927                 db  0Eh
.eh_frame:000000000000F928                 db  18h
.eh_frame:000000000000F929                 db  86h
.eh_frame:000000000000F92A                 db    3
.eh_frame:000000000000F92B                 db  44h ; D
.eh_frame:000000000000F92C                 db  0Eh
.eh_frame:000000000000F92D                 db  20h
.eh_frame:000000000000F92E                 db  83h
.eh_frame:000000000000F92F                 db    4
.eh_frame:000000000000F930                 db  69h ; i
.eh_frame:000000000000F931                 db  0Ah
.eh_frame:000000000000F932                 db  0Eh
.eh_frame:000000000000F933                 db  18h
.eh_frame:000000000000F934                 db  41h ; A
.eh_frame:000000000000F935                 db  0Eh
.eh_frame:000000000000F936                 db  10h
.eh_frame:000000000000F937                 db  42h ; B
.eh_frame:000000000000F938                 db  0Eh
.eh_frame:000000000000F939                 db    8
.eh_frame:000000000000F93A                 db  45h ; E
.eh_frame:000000000000F93B                 db  0Bh
.eh_frame:000000000000F93C                 db  55h ; U
.eh_frame:000000000000F93D                 db  0Ah
.eh_frame:000000000000F93E                 db  0Eh
.eh_frame:000000000000F93F                 db  18h
.eh_frame:000000000000F940                 db  41h ; A
.eh_frame:000000000000F941                 db  0Eh
.eh_frame:000000000000F942                 db  10h
.eh_frame:000000000000F943                 db  42h ; B
.eh_frame:000000000000F944                 db  0Eh
.eh_frame:000000000000F945                 db    8
.eh_frame:000000000000F946                 db  48h ; H
.eh_frame:000000000000F947                 db  0Bh
.eh_frame:000000000000F948                 db  41h ; A
.eh_frame:000000000000F949                 db  0Ah
.eh_frame:000000000000F94A                 db  0Eh
.eh_frame:000000000000F94B                 db  18h
.eh_frame:000000000000F94C                 db  46h ; F
.eh_frame:000000000000F94D                 db  0Eh
.eh_frame:000000000000F94E                 db  10h
.eh_frame:000000000000F94F                 db  42h ; B
.eh_frame:000000000000F950                 db  0Eh
.eh_frame:000000000000F951                 db    8
.eh_frame:000000000000F952                 db  47h ; G
.eh_frame:000000000000F953                 db  0Bh
.eh_frame:000000000000F954                 db  49h ; I
.eh_frame:000000000000F955                 db  0Eh
.eh_frame:000000000000F956                 db  18h
.eh_frame:000000000000F957                 db  41h ; A
.eh_frame:000000000000F958                 db  0Eh
.eh_frame:000000000000F959                 db  10h
.eh_frame:000000000000F95A                 db  42h ; B
.eh_frame:000000000000F95B                 db  0Eh
.eh_frame:000000000000F95C                 db    8
.eh_frame:000000000000F95D                 db    0
.eh_frame:000000000000F95E                 db    0
.eh_frame:000000000000F95F                 db    0
.eh_frame:000000000000F960                 db  10h
.eh_frame:000000000000F961                 db    0
.eh_frame:000000000000F962                 db    0
.eh_frame:000000000000F963                 db    0
.eh_frame:000000000000F964                 db 0D4h
.eh_frame:000000000000F965                 db    6
.eh_frame:000000000000F966                 db    0
.eh_frame:000000000000F967                 db    0
.eh_frame:000000000000F968                 db 0C8h
.eh_frame:000000000000F969                 db  64h ; d
.eh_frame:000000000000F96A                 db 0FFh
.eh_frame:000000000000F96B                 db 0FFh
.eh_frame:000000000000F96C                 db    8
.eh_frame:000000000000F96D                 db    0
.eh_frame:000000000000F96E                 db    0
.eh_frame:000000000000F96F                 db    0
.eh_frame:000000000000F970                 db    0
.eh_frame:000000000000F971                 db    0
.eh_frame:000000000000F972                 db    0
.eh_frame:000000000000F973                 db    0
.eh_frame:000000000000F974                 db  10h
.eh_frame:000000000000F975                 db    0
.eh_frame:000000000000F976                 db    0
.eh_frame:000000000000F977                 db    0
.eh_frame:000000000000F978                 db 0E8h
.eh_frame:000000000000F979                 db    6
.eh_frame:000000000000F97A                 db    0
.eh_frame:000000000000F97B                 db    0
.eh_frame:000000000000F97C                 db 0C4h
.eh_frame:000000000000F97D                 db  64h ; d
.eh_frame:000000000000F97E                 db 0FFh
.eh_frame:000000000000F97F                 db 0FFh
.eh_frame:000000000000F980                 db    8
.eh_frame:000000000000F981                 db    0
.eh_frame:000000000000F982                 db    0
.eh_frame:000000000000F983                 db    0
.eh_frame:000000000000F984                 db    0
.eh_frame:000000000000F985                 db    0
.eh_frame:000000000000F986                 db    0
.eh_frame:000000000000F987                 db    0
.eh_frame:000000000000F988                 db  2Ch ; ,
.eh_frame:000000000000F989                 db    0
.eh_frame:000000000000F98A                 db    0
.eh_frame:000000000000F98B                 db    0
.eh_frame:000000000000F98C                 db 0FCh
.eh_frame:000000000000F98D                 db    6
.eh_frame:000000000000F98E                 db    0
.eh_frame:000000000000F98F                 db    0
.eh_frame:000000000000F990                 db 0C0h
.eh_frame:000000000000F991                 db  64h ; d
.eh_frame:000000000000F992                 db 0FFh
.eh_frame:000000000000F993                 db 0FFh
.eh_frame:000000000000F994                 db 0A4h
.eh_frame:000000000000F995                 db    0
.eh_frame:000000000000F996                 db    0
.eh_frame:000000000000F997                 db    0
.eh_frame:000000000000F998                 db    0
.eh_frame:000000000000F999                 db  41h ; A
.eh_frame:000000000000F99A                 db  0Eh
.eh_frame:000000000000F99B                 db  10h
.eh_frame:000000000000F99C                 db  86h
.eh_frame:000000000000F99D                 db    2
.eh_frame:000000000000F99E                 db  41h ; A
.eh_frame:000000000000F99F                 db  0Eh
.eh_frame:000000000000F9A0                 db  18h
.eh_frame:000000000000F9A1                 db  83h
.eh_frame:000000000000F9A2                 db    3
.eh_frame:000000000000F9A3                 db  44h ; D
.eh_frame:000000000000F9A4                 db  0Eh
.eh_frame:000000000000F9A5                 db  20h
.eh_frame:000000000000F9A6                 db  7Ah ; z
.eh_frame:000000000000F9A7                 db  0Ah
.eh_frame:000000000000F9A8                 db  0Eh
.eh_frame:000000000000F9A9                 db  18h
.eh_frame:000000000000F9AA                 db  41h ; A
.eh_frame:000000000000F9AB                 db  0Eh
.eh_frame:000000000000F9AC                 db  10h
.eh_frame:000000000000F9AD                 db  41h ; A
.eh_frame:000000000000F9AE                 db  0Eh
.eh_frame:000000000000F9AF                 db    8
.eh_frame:000000000000F9B0                 db  41h ; A
.eh_frame:000000000000F9B1                 db  0Bh
.eh_frame:000000000000F9B2                 db    0
.eh_frame:000000000000F9B3                 db    0
.eh_frame:000000000000F9B4                 db    0
.eh_frame:000000000000F9B5                 db    0
.eh_frame:000000000000F9B6                 db    0
.eh_frame:000000000000F9B7                 db    0
.eh_frame:000000000000F9B8                 db  34h ; 4
.eh_frame:000000000000F9B9                 db    0
.eh_frame:000000000000F9BA                 db    0
.eh_frame:000000000000F9BB                 db    0
.eh_frame:000000000000F9BC                 db  2Ch ; ,
.eh_frame:000000000000F9BD                 db    7
.eh_frame:000000000000F9BE                 db    0
.eh_frame:000000000000F9BF                 db    0
.eh_frame:000000000000F9C0                 db  40h ; @
.eh_frame:000000000000F9C1                 db  65h ; e
.eh_frame:000000000000F9C2                 db 0FFh
.eh_frame:000000000000F9C3                 db 0FFh
.eh_frame:000000000000F9C4                 db  56h ; V
.eh_frame:000000000000F9C5                 db    0
.eh_frame:000000000000F9C6                 db    0
.eh_frame:000000000000F9C7                 db    0
.eh_frame:000000000000F9C8                 db    0
.eh_frame:000000000000F9C9                 db  42h ; B
.eh_frame:000000000000F9CA                 db  0Eh
.eh_frame:000000000000F9CB                 db  10h
.eh_frame:000000000000F9CC                 db  8Dh
.eh_frame:000000000000F9CD                 db    2
.eh_frame:000000000000F9CE                 db  42h ; B
.eh_frame:000000000000F9CF                 db  0Eh
.eh_frame:000000000000F9D0                 db  18h
.eh_frame:000000000000F9D1                 db  8Ch
.eh_frame:000000000000F9D2                 db    3
.eh_frame:000000000000F9D3                 db  43h ; C
.eh_frame:000000000000F9D4                 db  0Eh
.eh_frame:000000000000F9D5                 db  20h
.eh_frame:000000000000F9D6                 db  86h
.eh_frame:000000000000F9D7                 db    4
.eh_frame:000000000000F9D8                 db  41h ; A
.eh_frame:000000000000F9D9                 db  0Eh
.eh_frame:000000000000F9DA                 db  28h ; (
.eh_frame:000000000000F9DB                 db  83h
.eh_frame:000000000000F9DC                 db    5
.eh_frame:000000000000F9DD                 db  4Dh ; M
.eh_frame:000000000000F9DE                 db  0Eh
.eh_frame:000000000000F9DF                 db  30h ; 0
.eh_frame:000000000000F9E0                 db  78h ; x
.eh_frame:000000000000F9E1                 db  0Eh
.eh_frame:000000000000F9E2                 db  28h ; (
.eh_frame:000000000000F9E3                 db  43h ; C
.eh_frame:000000000000F9E4                 db  0Eh
.eh_frame:000000000000F9E5                 db  20h
.eh_frame:000000000000F9E6                 db  41h ; A
.eh_frame:000000000000F9E7                 db  0Eh
.eh_frame:000000000000F9E8                 db  18h
.eh_frame:000000000000F9E9                 db  42h ; B
.eh_frame:000000000000F9EA                 db  0Eh
.eh_frame:000000000000F9EB                 db  10h
.eh_frame:000000000000F9EC                 db  42h ; B
.eh_frame:000000000000F9ED                 db  0Eh
.eh_frame:000000000000F9EE                 db    8
.eh_frame:000000000000F9EF                 db    0
.eh_frame:000000000000F9F0                 db  24h ; $
.eh_frame:000000000000F9F1                 db    0
.eh_frame:000000000000F9F2                 db    0
.eh_frame:000000000000F9F3                 db    0
.eh_frame:000000000000F9F4                 db  64h ; d
.eh_frame:000000000000F9F5                 db    7
.eh_frame:000000000000F9F6                 db    0
.eh_frame:000000000000F9F7                 db    0
.eh_frame:000000000000F9F8                 db  68h ; h
.eh_frame:000000000000F9F9                 db  65h ; e
.eh_frame:000000000000F9FA                 db 0FFh
.eh_frame:000000000000F9FB                 db 0FFh
.eh_frame:000000000000F9FC                 db  8Ah
.eh_frame:000000000000F9FD                 db    0
.eh_frame:000000000000F9FE                 db    0
.eh_frame:000000000000F9FF                 db    0
.eh_frame:000000000000FA00                 db    0
.eh_frame:000000000000FA01                 db  41h ; A
.eh_frame:000000000000FA02                 db  0Eh
.eh_frame:000000000000FA03                 db  10h
.eh_frame:000000000000FA04                 db  83h
.eh_frame:000000000000FA05                 db    2
.eh_frame:000000000000FA06                 db  49h ; I
.eh_frame:000000000000FA07                 db  0Eh
.eh_frame:000000000000FA08                 db  30h ; 0
.eh_frame:000000000000FA09                 db    2
.eh_frame:000000000000FA0A                 db  79h ; y
.eh_frame:000000000000FA0B                 db  0Ah
.eh_frame:000000000000FA0C                 db  0Eh
.eh_frame:000000000000FA0D                 db  10h
.eh_frame:000000000000FA0E                 db  41h ; A
.eh_frame:000000000000FA0F                 db  0Eh
.eh_frame:000000000000FA10                 db    8
.eh_frame:000000000000FA11                 db  41h ; A
.eh_frame:000000000000FA12                 db  0Bh
.eh_frame:000000000000FA13                 db    0
.eh_frame:000000000000FA14                 db    0
.eh_frame:000000000000FA15                 db    0
.eh_frame:000000000000FA16                 db    0
.eh_frame:000000000000FA17                 db    0
.eh_frame:000000000000FA18                 db  10h
.eh_frame:000000000000FA19                 db    0
.eh_frame:000000000000FA1A                 db    0
.eh_frame:000000000000FA1B                 db    0
.eh_frame:000000000000FA1C                 db  8Ch
.eh_frame:000000000000FA1D                 db    7
.eh_frame:000000000000FA1E                 db    0
.eh_frame:000000000000FA1F                 db    0
.eh_frame:000000000000FA20                 db 0D0h
.eh_frame:000000000000FA21                 db  65h ; e
.eh_frame:000000000000FA22                 db 0FFh
.eh_frame:000000000000FA23                 db 0FFh
.eh_frame:000000000000FA24                 db  0Ah
.eh_frame:000000000000FA25                 db    0
.eh_frame:000000000000FA26                 db    0
.eh_frame:000000000000FA27                 db    0
.eh_frame:000000000000FA28                 db    0
.eh_frame:000000000000FA29                 db    0
.eh_frame:000000000000FA2A                 db    0
.eh_frame:000000000000FA2B                 db    0
.eh_frame:000000000000FA2C                 db  18h
.eh_frame:000000000000FA2D                 db    0
.eh_frame:000000000000FA2E                 db    0
.eh_frame:000000000000FA2F                 db    0
.eh_frame:000000000000FA30                 db 0A0h
.eh_frame:000000000000FA31                 db    7
.eh_frame:000000000000FA32                 db    0
.eh_frame:000000000000FA33                 db    0
.eh_frame:000000000000FA34                 db 0CCh
.eh_frame:000000000000FA35                 db  65h ; e
.eh_frame:000000000000FA36                 db 0FFh
.eh_frame:000000000000FA37                 db 0FFh
.eh_frame:000000000000FA38                 db  41h ; A
.eh_frame:000000000000FA39                 db    0
.eh_frame:000000000000FA3A                 db    0
.eh_frame:000000000000FA3B                 db    0
.eh_frame:000000000000FA3C                 db    0
.eh_frame:000000000000FA3D                 db  44h ; D
.eh_frame:000000000000FA3E                 db  0Eh
.eh_frame:000000000000FA3F                 db  30h ; 0
.eh_frame:000000000000FA40                 db  77h ; w
.eh_frame:000000000000FA41                 db  0Ah
.eh_frame:000000000000FA42                 db  0Eh
.eh_frame:000000000000FA43                 db    8
.eh_frame:000000000000FA44                 db  41h ; A
.eh_frame:000000000000FA45                 db  0Bh
.eh_frame:000000000000FA46                 db    0
.eh_frame:000000000000FA47                 db    0
.eh_frame:000000000000FA48                 db  10h
.eh_frame:000000000000FA49                 db    0
.eh_frame:000000000000FA4A                 db    0
.eh_frame:000000000000FA4B                 db    0
.eh_frame:000000000000FA4C                 db 0BCh
.eh_frame:000000000000FA4D                 db    7
.eh_frame:000000000000FA4E                 db    0
.eh_frame:000000000000FA4F                 db    0
.eh_frame:000000000000FA50                 db    0
.eh_frame:000000000000FA51                 db  66h ; f
.eh_frame:000000000000FA52                 db 0FFh
.eh_frame:000000000000FA53                 db 0FFh
.eh_frame:000000000000FA54                 db 0C7h
.eh_frame:000000000000FA55                 db    0
.eh_frame:000000000000FA56                 db    0
.eh_frame:000000000000FA57                 db    0
.eh_frame:000000000000FA58                 db    0
.eh_frame:000000000000FA59                 db    0
.eh_frame:000000000000FA5A                 db    0
.eh_frame:000000000000FA5B                 db    0
.eh_frame:000000000000FA5C                 db 0A4h
.eh_frame:000000000000FA5D                 db    0
.eh_frame:000000000000FA5E                 db    0
.eh_frame:000000000000FA5F                 db    0
.eh_frame:000000000000FA60                 db 0D0h
.eh_frame:000000000000FA61                 db    7
.eh_frame:000000000000FA62                 db    0
.eh_frame:000000000000FA63                 db    0
.eh_frame:000000000000FA64                 db 0BCh
.eh_frame:000000000000FA65                 db  66h ; f
.eh_frame:000000000000FA66                 db 0FFh
.eh_frame:000000000000FA67                 db 0FFh
.eh_frame:000000000000FA68                 db    7
.eh_frame:000000000000FA69                 db  0Ah
.eh_frame:000000000000FA6A                 db    0
.eh_frame:000000000000FA6B                 db    0
.eh_frame:000000000000FA6C                 db    0
.eh_frame:000000000000FA6D                 db  42h ; B
.eh_frame:000000000000FA6E                 db  0Eh
.eh_frame:000000000000FA6F                 db  10h
.eh_frame:000000000000FA70                 db  8Fh
.eh_frame:000000000000FA71                 db    2
.eh_frame:000000000000FA72                 db  42h ; B
.eh_frame:000000000000FA73                 db  0Eh
.eh_frame:000000000000FA74                 db  18h
.eh_frame:000000000000FA75                 db  8Eh
.eh_frame:000000000000FA76                 db    3
.eh_frame:000000000000FA77                 db  44h ; D
.eh_frame:000000000000FA78                 db  0Eh
.eh_frame:000000000000FA79                 db  20h
.eh_frame:000000000000FA7A                 db  8Dh
.eh_frame:000000000000FA7B                 db    4
.eh_frame:000000000000FA7C                 db  42h ; B
.eh_frame:000000000000FA7D                 db  0Eh
.eh_frame:000000000000FA7E                 db  28h ; (
.eh_frame:000000000000FA7F                 db  8Ch
.eh_frame:000000000000FA80                 db    5
.eh_frame:000000000000FA81                 db  44h ; D
.eh_frame:000000000000FA82                 db  0Eh
.eh_frame:000000000000FA83                 db  30h ; 0
.eh_frame:000000000000FA84                 db  86h
.eh_frame:000000000000FA85                 db    6
.eh_frame:000000000000FA86                 db  41h ; A
.eh_frame:000000000000FA87                 db  0Eh
.eh_frame:000000000000FA88                 db  38h ; 8
.eh_frame:000000000000FA89                 db  83h
.eh_frame:000000000000FA8A                 db    7
.eh_frame:000000000000FA8B                 db  54h ; T
.eh_frame:000000000000FA8C                 db  0Eh
.eh_frame:000000000000FA8D                 db 0D0h
.eh_frame:000000000000FA8E                 db    1
.eh_frame:000000000000FA8F                 db    3
.eh_frame:000000000000FA90                 db  7Eh ; ~
.eh_frame:000000000000FA91                 db    1
.eh_frame:000000000000FA92                 db  0Eh
.eh_frame:000000000000FA93                 db 0E0h
.eh_frame:000000000000FA94                 db    1
.eh_frame:000000000000FA95                 db  6Eh ; n
.eh_frame:000000000000FA96                 db  0Eh
.eh_frame:000000000000FA97                 db 0D8h
.eh_frame:000000000000FA98                 db    1
.eh_frame:000000000000FA99                 db  41h ; A
.eh_frame:000000000000FA9A                 db  0Eh
.eh_frame:000000000000FA9B                 db 0D0h
.eh_frame:000000000000FA9C                 db    1
.eh_frame:000000000000FA9D                 db    3
.eh_frame:000000000000FA9E                 db  40h ; @
.eh_frame:000000000000FA9F                 db    1
.eh_frame:000000000000FAA0                 db  0Eh
.eh_frame:000000000000FAA1                 db 0E0h
.eh_frame:000000000000FAA2                 db    1
.eh_frame:000000000000FAA3                 db  75h ; u
.eh_frame:000000000000FAA4                 db  0Eh
.eh_frame:000000000000FAA5                 db 0D8h
.eh_frame:000000000000FAA6                 db    1
.eh_frame:000000000000FAA7                 db  41h ; A
.eh_frame:000000000000FAA8                 db  0Eh
.eh_frame:000000000000FAA9                 db 0D0h
.eh_frame:000000000000FAAA                 db    1
.eh_frame:000000000000FAAB                 db    2
.eh_frame:000000000000FAAC                 db 0EAh
.eh_frame:000000000000FAAD                 db  0Ah
.eh_frame:000000000000FAAE                 db  0Eh
.eh_frame:000000000000FAAF                 db  38h ; 8
.eh_frame:000000000000FAB0                 db  41h ; A
.eh_frame:000000000000FAB1                 db  0Eh
.eh_frame:000000000000FAB2                 db  30h ; 0
.eh_frame:000000000000FAB3                 db  41h ; A
.eh_frame:000000000000FAB4                 db  0Eh
.eh_frame:000000000000FAB5                 db  28h ; (
.eh_frame:000000000000FAB6                 db  42h ; B
.eh_frame:000000000000FAB7                 db  0Eh
.eh_frame:000000000000FAB8                 db  20h
.eh_frame:000000000000FAB9                 db  42h ; B
.eh_frame:000000000000FABA                 db  0Eh
.eh_frame:000000000000FABB                 db  18h
.eh_frame:000000000000FABC                 db  42h ; B
.eh_frame:000000000000FABD                 db  0Eh
.eh_frame:000000000000FABE                 db  10h
.eh_frame:000000000000FABF                 db  42h ; B
.eh_frame:000000000000FAC0                 db  0Eh
.eh_frame:000000000000FAC1                 db    8
.eh_frame:000000000000FAC2                 db  46h ; F
.eh_frame:000000000000FAC3                 db  0Bh
.eh_frame:000000000000FAC4                 db    3
.eh_frame:000000000000FAC5                 db  2Ch ; ,
.eh_frame:000000000000FAC6                 db    1
.eh_frame:000000000000FAC7                 db  0Eh
.eh_frame:000000000000FAC8                 db 0E0h
.eh_frame:000000000000FAC9                 db    1
.eh_frame:000000000000FACA                 db  52h ; R
.eh_frame:000000000000FACB                 db  0Eh
.eh_frame:000000000000FACC                 db 0D8h
.eh_frame:000000000000FACD                 db    1
.eh_frame:000000000000FACE                 db  41h ; A
.eh_frame:000000000000FACF                 db  0Eh
.eh_frame:000000000000FAD0                 db 0D0h
.eh_frame:000000000000FAD1                 db    1
.eh_frame:000000000000FAD2                 db  55h ; U
.eh_frame:000000000000FAD3                 db  0Eh
.eh_frame:000000000000FAD4                 db 0E0h
.eh_frame:000000000000FAD5                 db    1
.eh_frame:000000000000FAD6                 db  4Dh ; M
.eh_frame:000000000000FAD7                 db  0Eh
.eh_frame:000000000000FAD8                 db 0D8h
.eh_frame:000000000000FAD9                 db    1
.eh_frame:000000000000FADA                 db  42h ; B
.eh_frame:000000000000FADB                 db  0Eh
.eh_frame:000000000000FADC                 db 0D0h
.eh_frame:000000000000FADD                 db    1
.eh_frame:000000000000FADE                 db    3
.eh_frame:000000000000FADF                 db  51h ; Q
.eh_frame:000000000000FAE0                 db    1
.eh_frame:000000000000FAE1                 db  0Eh
.eh_frame:000000000000FAE2                 db 0E0h
.eh_frame:000000000000FAE3                 db    1
.eh_frame:000000000000FAE4                 db  77h ; w
.eh_frame:000000000000FAE5                 db  0Eh
.eh_frame:000000000000FAE6                 db 0D8h
.eh_frame:000000000000FAE7                 db    1
.eh_frame:000000000000FAE8                 db  41h ; A
.eh_frame:000000000000FAE9                 db  0Eh
.eh_frame:000000000000FAEA                 db 0D0h
.eh_frame:000000000000FAEB                 db    1
.eh_frame:000000000000FAEC                 db  5Dh ; ]
.eh_frame:000000000000FAED                 db  0Eh
.eh_frame:000000000000FAEE                 db 0E0h
.eh_frame:000000000000FAEF                 db    1
.eh_frame:000000000000FAF0                 db  71h ; q
.eh_frame:000000000000FAF1                 db  0Eh
.eh_frame:000000000000FAF2                 db 0D8h
.eh_frame:000000000000FAF3                 db    1
.eh_frame:000000000000FAF4                 db  45h ; E
.eh_frame:000000000000FAF5                 db  0Eh
.eh_frame:000000000000FAF6                 db 0D0h
.eh_frame:000000000000FAF7                 db    1
.eh_frame:000000000000FAF8                 db  63h ; c
.eh_frame:000000000000FAF9                 db  0Eh
.eh_frame:000000000000FAFA                 db 0E0h
.eh_frame:000000000000FAFB                 db    1
.eh_frame:000000000000FAFC                 db  4Ch ; L
.eh_frame:000000000000FAFD                 db  0Eh
.eh_frame:000000000000FAFE                 db 0D8h
.eh_frame:000000000000FAFF                 db    1
.eh_frame:000000000000FB00                 db  42h ; B
.eh_frame:000000000000FB01                 db  0Eh
.eh_frame:000000000000FB02                 db 0D0h
.eh_frame:000000000000FB03                 db    1
.eh_frame:000000000000FB04                 db  38h ; 8
.eh_frame:000000000000FB05                 db    0
.eh_frame:000000000000FB06                 db    0
.eh_frame:000000000000FB07                 db    0
.eh_frame:000000000000FB08                 db  78h ; x
.eh_frame:000000000000FB09                 db    8
.eh_frame:000000000000FB0A                 db    0
.eh_frame:000000000000FB0B                 db    0
.eh_frame:000000000000FB0C                 db  24h ; $
.eh_frame:000000000000FB0D                 db  70h ; p
.eh_frame:000000000000FB0E                 db 0FFh
.eh_frame:000000000000FB0F                 db 0FFh
.eh_frame:000000000000FB10                 db 0E6h
.eh_frame:000000000000FB11                 db    1
.eh_frame:000000000000FB12                 db    0
.eh_frame:000000000000FB13                 db    0
.eh_frame:000000000000FB14                 db    0
.eh_frame:000000000000FB15                 db  42h ; B
.eh_frame:000000000000FB16                 db  0Eh
.eh_frame:000000000000FB17                 db  10h
.eh_frame:000000000000FB18                 db  8Dh
.eh_frame:000000000000FB19                 db    2
.eh_frame:000000000000FB1A                 db  42h ; B
.eh_frame:000000000000FB1B                 db  0Eh
.eh_frame:000000000000FB1C                 db  18h
.eh_frame:000000000000FB1D                 db  8Ch
.eh_frame:000000000000FB1E                 db    3
.eh_frame:000000000000FB1F                 db  44h ; D
.eh_frame:000000000000FB20                 db  0Eh
.eh_frame:000000000000FB21                 db  20h
.eh_frame:000000000000FB22                 db  86h
.eh_frame:000000000000FB23                 db    4
.eh_frame:000000000000FB24                 db  41h ; A
.eh_frame:000000000000FB25                 db  0Eh
.eh_frame:000000000000FB26                 db  28h ; (
.eh_frame:000000000000FB27                 db  83h
.eh_frame:000000000000FB28                 db    5
.eh_frame:000000000000FB29                 db  4Ah ; J
.eh_frame:000000000000FB2A                 db  0Eh
.eh_frame:000000000000FB2B                 db  40h ; @
.eh_frame:000000000000FB2C                 db    2
.eh_frame:000000000000FB2D                 db  7Ah ; z
.eh_frame:000000000000FB2E                 db  0Ah
.eh_frame:000000000000FB2F                 db  0Eh
.eh_frame:000000000000FB30                 db  28h ; (
.eh_frame:000000000000FB31                 db  41h ; A
.eh_frame:000000000000FB32                 db  0Eh
.eh_frame:000000000000FB33                 db  20h
.eh_frame:000000000000FB34                 db  41h ; A
.eh_frame:000000000000FB35                 db  0Eh
.eh_frame:000000000000FB36                 db  18h
.eh_frame:000000000000FB37                 db  42h ; B
.eh_frame:000000000000FB38                 db  0Eh
.eh_frame:000000000000FB39                 db  10h
.eh_frame:000000000000FB3A                 db  42h ; B
.eh_frame:000000000000FB3B                 db  0Eh
.eh_frame:000000000000FB3C                 db    8
.eh_frame:000000000000FB3D                 db  45h ; E
.eh_frame:000000000000FB3E                 db  0Bh
.eh_frame:000000000000FB3F                 db    0
.eh_frame:000000000000FB40                 db  38h ; 8
.eh_frame:000000000000FB41                 db    0
.eh_frame:000000000000FB42                 db    0
.eh_frame:000000000000FB43                 db    0
.eh_frame:000000000000FB44                 db 0B4h
.eh_frame:000000000000FB45                 db    8
.eh_frame:000000000000FB46                 db    0
.eh_frame:000000000000FB47                 db    0
.eh_frame:000000000000FB48                 db 0D8h
.eh_frame:000000000000FB49                 db  71h ; q
.eh_frame:000000000000FB4A                 db 0FFh
.eh_frame:000000000000FB4B                 db 0FFh
.eh_frame:000000000000FB4C                 db  3Fh ; ?
.eh_frame:000000000000FB4D                 db    1
.eh_frame:000000000000FB4E                 db    0
.eh_frame:000000000000FB4F                 db    0
.eh_frame:000000000000FB50                 db    0
.eh_frame:000000000000FB51                 db  42h ; B
.eh_frame:000000000000FB52                 db  0Eh
.eh_frame:000000000000FB53                 db  10h
.eh_frame:000000000000FB54                 db  8Dh
.eh_frame:000000000000FB55                 db    2
.eh_frame:000000000000FB56                 db  42h ; B
.eh_frame:000000000000FB57                 db  0Eh
.eh_frame:000000000000FB58                 db  18h
.eh_frame:000000000000FB59                 db  8Ch
.eh_frame:000000000000FB5A                 db    3
.eh_frame:000000000000FB5B                 db  44h ; D
.eh_frame:000000000000FB5C                 db  0Eh
.eh_frame:000000000000FB5D                 db  20h
.eh_frame:000000000000FB5E                 db  86h
.eh_frame:000000000000FB5F                 db    4
.eh_frame:000000000000FB60                 db  41h ; A
.eh_frame:000000000000FB61                 db  0Eh
.eh_frame:000000000000FB62                 db  28h ; (
.eh_frame:000000000000FB63                 db  83h
.eh_frame:000000000000FB64                 db    5
.eh_frame:000000000000FB65                 db  4Dh ; M
.eh_frame:000000000000FB66                 db  0Eh
.eh_frame:000000000000FB67                 db  90h
.eh_frame:000000000000FB68                 db    2
.eh_frame:000000000000FB69                 db    2
.eh_frame:000000000000FB6A                 db  8Eh
.eh_frame:000000000000FB6B                 db  0Ah
.eh_frame:000000000000FB6C                 db  0Eh
.eh_frame:000000000000FB6D                 db  28h ; (
.eh_frame:000000000000FB6E                 db  41h ; A
.eh_frame:000000000000FB6F                 db  0Eh
.eh_frame:000000000000FB70                 db  20h
.eh_frame:000000000000FB71                 db  41h ; A
.eh_frame:000000000000FB72                 db  0Eh
.eh_frame:000000000000FB73                 db  18h
.eh_frame:000000000000FB74                 db  42h ; B
.eh_frame:000000000000FB75                 db  0Eh
.eh_frame:000000000000FB76                 db  10h
.eh_frame:000000000000FB77                 db  42h ; B
.eh_frame:000000000000FB78                 db  0Eh
.eh_frame:000000000000FB79                 db    8
.eh_frame:000000000000FB7A                 db  46h ; F
.eh_frame:000000000000FB7B                 db  0Bh
.eh_frame:000000000000FB7C                 db  48h ; H
.eh_frame:000000000000FB7D                 db    0
.eh_frame:000000000000FB7E                 db    0
.eh_frame:000000000000FB7F                 db    0
.eh_frame:000000000000FB80                 db 0F0h
.eh_frame:000000000000FB81                 db    8
.eh_frame:000000000000FB82                 db    0
.eh_frame:000000000000FB83                 db    0
.eh_frame:000000000000FB84                 db 0DCh
.eh_frame:000000000000FB85                 db  72h ; r
.eh_frame:000000000000FB86                 db 0FFh
.eh_frame:000000000000FB87                 db 0FFh
.eh_frame:000000000000FB88                 db  3Bh ; ;
.eh_frame:000000000000FB89                 db    1
.eh_frame:000000000000FB8A                 db    0
.eh_frame:000000000000FB8B                 db    0
.eh_frame:000000000000FB8C                 db    0
.eh_frame:000000000000FB8D                 db  42h ; B
.eh_frame:000000000000FB8E                 db  0Eh
.eh_frame:000000000000FB8F                 db  10h
.eh_frame:000000000000FB90                 db  8Eh
.eh_frame:000000000000FB91                 db    2
.eh_frame:000000000000FB92                 db  42h ; B
.eh_frame:000000000000FB93                 db  0Eh
.eh_frame:000000000000FB94                 db  18h
.eh_frame:000000000000FB95                 db  8Dh
.eh_frame:000000000000FB96                 db    3
.eh_frame:000000000000FB97                 db  45h ; E
.eh_frame:000000000000FB98                 db  0Eh
.eh_frame:000000000000FB99                 db  20h
.eh_frame:000000000000FB9A                 db  8Ch
.eh_frame:000000000000FB9B                 db    4
.eh_frame:000000000000FB9C                 db  41h ; A
.eh_frame:000000000000FB9D                 db  0Eh
.eh_frame:000000000000FB9E                 db  28h ; (
.eh_frame:000000000000FB9F                 db  86h
.eh_frame:000000000000FBA0                 db    5
.eh_frame:000000000000FBA1                 db  44h ; D
.eh_frame:000000000000FBA2                 db  0Eh
.eh_frame:000000000000FBA3                 db  30h ; 0
.eh_frame:000000000000FBA4                 db  83h
.eh_frame:000000000000FBA5                 db    6
.eh_frame:000000000000FBA6                 db  4Ah ; J
.eh_frame:000000000000FBA7                 db  0Eh
.eh_frame:000000000000FBA8                 db  80h
.eh_frame:000000000000FBA9                 db    2
.eh_frame:000000000000FBAA                 db    3
.eh_frame:000000000000FBAB                 db  0Dh
.eh_frame:000000000000FBAC                 db    1
.eh_frame:000000000000FBAD                 db  0Ah
.eh_frame:000000000000FBAE                 db  0Eh
.eh_frame:000000000000FBAF                 db  30h ; 0
.eh_frame:000000000000FBB0                 db  41h ; A
.eh_frame:000000000000FBB1                 db  0Eh
.eh_frame:000000000000FBB2                 db  28h ; (
.eh_frame:000000000000FBB3                 db  41h ; A
.eh_frame:000000000000FBB4                 db  0Eh
.eh_frame:000000000000FBB5                 db  20h
.eh_frame:000000000000FBB6                 db  42h ; B
.eh_frame:000000000000FBB7                 db  0Eh
.eh_frame:000000000000FBB8                 db  18h
.eh_frame:000000000000FBB9                 db  42h ; B
.eh_frame:000000000000FBBA                 db  0Eh
.eh_frame:000000000000FBBB                 db  10h
.eh_frame:000000000000FBBC                 db  42h ; B
.eh_frame:000000000000FBBD                 db  0Eh
.eh_frame:000000000000FBBE                 db    8
.eh_frame:000000000000FBBF                 db  43h ; C
.eh_frame:000000000000FBC0                 db  0Bh
.eh_frame:000000000000FBC1                 db    0
.eh_frame:000000000000FBC2                 db    0
.eh_frame:000000000000FBC3                 db    0
.eh_frame:000000000000FBC4                 db    0
.eh_frame:000000000000FBC5                 db    0
.eh_frame:000000000000FBC6                 db    0
.eh_frame:000000000000FBC7                 db    0
.eh_frame:000000000000FBC8                 db  1Ch
.eh_frame:000000000000FBC9                 db    0
.eh_frame:000000000000FBCA                 db    0
.eh_frame:000000000000FBCB                 db    0
.eh_frame:000000000000FBCC                 db  3Ch ; <
.eh_frame:000000000000FBCD                 db    9
.eh_frame:000000000000FBCE                 db    0
.eh_frame:000000000000FBCF                 db    0
.eh_frame:000000000000FBD0                 db 0D0h
.eh_frame:000000000000FBD1                 db  73h ; s
.eh_frame:000000000000FBD2                 db 0FFh
.eh_frame:000000000000FBD3                 db 0FFh
.eh_frame:000000000000FBD4                 db  9Fh
.eh_frame:000000000000FBD5                 db    0
.eh_frame:000000000000FBD6                 db    0
.eh_frame:000000000000FBD7                 db    0
.eh_frame:000000000000FBD8                 db    0
.eh_frame:000000000000FBD9                 db  44h ; D
.eh_frame:000000000000FBDA                 db  0Eh
.eh_frame:000000000000FBDB                 db  10h
.eh_frame:000000000000FBDC                 db  83h
.eh_frame:000000000000FBDD                 db    2
.eh_frame:000000000000FBDE                 db    2
.eh_frame:000000000000FBDF                 db  78h ; x
.eh_frame:000000000000FBE0                 db  0Ah
.eh_frame:000000000000FBE1                 db  0Eh
.eh_frame:000000000000FBE2                 db    8
.eh_frame:000000000000FBE3                 db  41h ; A
.eh_frame:000000000000FBE4                 db  0Bh
.eh_frame:000000000000FBE5                 db    0
.eh_frame:000000000000FBE6                 db    0
.eh_frame:000000000000FBE7                 db    0
.eh_frame:000000000000FBE8                 db  40h ; @
.eh_frame:000000000000FBE9                 db    0
.eh_frame:000000000000FBEA                 db    0
.eh_frame:000000000000FBEB                 db    0
.eh_frame:000000000000FBEC                 db  5Ch ; \
.eh_frame:000000000000FBED                 db    9
.eh_frame:000000000000FBEE                 db    0
.eh_frame:000000000000FBEF                 db    0
.eh_frame:000000000000FBF0                 db  50h ; P
.eh_frame:000000000000FBF1                 db  74h ; t
.eh_frame:000000000000FBF2                 db 0FFh
.eh_frame:000000000000FBF3                 db 0FFh
.eh_frame:000000000000FBF4                 db 0E7h
.eh_frame:000000000000FBF5                 db    0
.eh_frame:000000000000FBF6                 db    0
.eh_frame:000000000000FBF7                 db    0
.eh_frame:000000000000FBF8                 db    0
.eh_frame:000000000000FBF9                 db  41h ; A
.eh_frame:000000000000FBFA                 db  0Eh
.eh_frame:000000000000FBFB                 db  10h
.eh_frame:000000000000FBFC                 db  86h
.eh_frame:000000000000FBFD                 db    2
.eh_frame:000000000000FBFE                 db  41h ; A
.eh_frame:000000000000FBFF                 db  0Eh
.eh_frame:000000000000FC00                 db  18h
.eh_frame:000000000000FC01                 db  83h
.eh_frame:000000000000FC02                 db    3
.eh_frame:000000000000FC03                 db  49h ; I
.eh_frame:000000000000FC04                 db  0Eh
.eh_frame:000000000000FC05                 db  20h
.eh_frame:000000000000FC06                 db  6Eh ; n
.eh_frame:000000000000FC07                 db  0Ah
.eh_frame:000000000000FC08                 db  0Eh
.eh_frame:000000000000FC09                 db  18h
.eh_frame:000000000000FC0A                 db  41h ; A
.eh_frame:000000000000FC0B                 db  0Eh
.eh_frame:000000000000FC0C                 db  10h
.eh_frame:000000000000FC0D                 db  41h ; A
.eh_frame:000000000000FC0E                 db  0Eh
.eh_frame:000000000000FC0F                 db    8
.eh_frame:000000000000FC10                 db  45h ; E
.eh_frame:000000000000FC11                 db  0Bh
.eh_frame:000000000000FC12                 db    2
.eh_frame:000000000000FC13                 db  4Ah ; J
.eh_frame:000000000000FC14                 db  0Ah
.eh_frame:000000000000FC15                 db  0Eh
.eh_frame:000000000000FC16                 db  18h
.eh_frame:000000000000FC17                 db  41h ; A
.eh_frame:000000000000FC18                 db  0Eh
.eh_frame:000000000000FC19                 db  10h
.eh_frame:000000000000FC1A                 db  41h ; A
.eh_frame:000000000000FC1B                 db  0Eh
.eh_frame:000000000000FC1C                 db    8
.eh_frame:000000000000FC1D                 db  44h ; D
.eh_frame:000000000000FC1E                 db  0Bh
.eh_frame:000000000000FC1F                 db    2
.eh_frame:000000000000FC20                 db  54h ; T
.eh_frame:000000000000FC21                 db  0Eh
.eh_frame:000000000000FC22                 db  18h
.eh_frame:000000000000FC23                 db  41h ; A
.eh_frame:000000000000FC24                 db  0Eh
.eh_frame:000000000000FC25                 db  10h
.eh_frame:000000000000FC26                 db  41h ; A
.eh_frame:000000000000FC27                 db  0Eh
.eh_frame:000000000000FC28                 db    8
.eh_frame:000000000000FC29                 db    0
.eh_frame:000000000000FC2A                 db    0
.eh_frame:000000000000FC2B                 db    0
.eh_frame:000000000000FC2C                 db  74h ; t
.eh_frame:000000000000FC2D                 db    0
.eh_frame:000000000000FC2E                 db    0
.eh_frame:000000000000FC2F                 db    0
.eh_frame:000000000000FC30                 db 0A0h
.eh_frame:000000000000FC31                 db    9
.eh_frame:000000000000FC32                 db    0
.eh_frame:000000000000FC33                 db    0
.eh_frame:000000000000FC34                 db 0FCh
.eh_frame:000000000000FC35                 db  74h ; t
.eh_frame:000000000000FC36                 db 0FFh
.eh_frame:000000000000FC37                 db 0FFh
.eh_frame:000000000000FC38                 db  34h ; 4
.eh_frame:000000000000FC39                 db  12h
.eh_frame:000000000000FC3A                 db    0
.eh_frame:000000000000FC3B                 db    0
.eh_frame:000000000000FC3C                 db    0
.eh_frame:000000000000FC3D                 db  42h ; B
.eh_frame:000000000000FC3E                 db  0Eh
.eh_frame:000000000000FC3F                 db  10h
.eh_frame:000000000000FC40                 db  8Fh
.eh_frame:000000000000FC41                 db    2
.eh_frame:000000000000FC42                 db  42h ; B
.eh_frame:000000000000FC43                 db  0Eh
.eh_frame:000000000000FC44                 db  18h
.eh_frame:000000000000FC45                 db  8Eh
.eh_frame:000000000000FC46                 db    3
.eh_frame:000000000000FC47                 db  45h ; E
.eh_frame:000000000000FC48                 db  0Eh
.eh_frame:000000000000FC49                 db  20h
.eh_frame:000000000000FC4A                 db  8Dh
.eh_frame:000000000000FC4B                 db    4
.eh_frame:000000000000FC4C                 db  42h ; B
.eh_frame:000000000000FC4D                 db  0Eh
.eh_frame:000000000000FC4E                 db  28h ; (
.eh_frame:000000000000FC4F                 db  8Ch
.eh_frame:000000000000FC50                 db    5
.eh_frame:000000000000FC51                 db  44h ; D
.eh_frame:000000000000FC52                 db  0Eh
.eh_frame:000000000000FC53                 db  30h ; 0
.eh_frame:000000000000FC54                 db  86h
.eh_frame:000000000000FC55                 db    6
.eh_frame:000000000000FC56                 db  41h ; A
.eh_frame:000000000000FC57                 db  0Eh
.eh_frame:000000000000FC58                 db  38h ; 8
.eh_frame:000000000000FC59                 db  83h
.eh_frame:000000000000FC5A                 db    7
.eh_frame:000000000000FC5B                 db  53h ; S
.eh_frame:000000000000FC5C                 db  0Eh
.eh_frame:000000000000FC5D                 db 0F0h
.eh_frame:000000000000FC5E                 db    1
.eh_frame:000000000000FC5F                 db    3
.eh_frame:000000000000FC60                 db  81h
.eh_frame:000000000000FC61                 db  0Bh
.eh_frame:000000000000FC62                 db  0Eh
.eh_frame:000000000000FC63                 db 0F8h
.eh_frame:000000000000FC64                 db    1
.eh_frame:000000000000FC65                 db  4Ah ; J
.eh_frame:000000000000FC66                 db  0Eh
.eh_frame:000000000000FC67                 db  80h
.eh_frame:000000000000FC68                 db    2
.eh_frame:000000000000FC69                 db  44h ; D
.eh_frame:000000000000FC6A                 db  0Eh
.eh_frame:000000000000FC6B                 db  88h
.eh_frame:000000000000FC6C                 db    2
.eh_frame:000000000000FC6D                 db  45h ; E
.eh_frame:000000000000FC6E                 db  0Eh
.eh_frame:000000000000FC6F                 db  90h
.eh_frame:000000000000FC70                 db    2
.eh_frame:000000000000FC71                 db  5Fh ; _
.eh_frame:000000000000FC72                 db  0Eh
.eh_frame:000000000000FC73                 db 0F0h
.eh_frame:000000000000FC74                 db    1
.eh_frame:000000000000FC75                 db  64h ; d
.eh_frame:000000000000FC76                 db  0Ah
.eh_frame:000000000000FC77                 db  0Eh
.eh_frame:000000000000FC78                 db  38h ; 8
.eh_frame:000000000000FC79                 db  41h ; A
.eh_frame:000000000000FC7A                 db  0Eh
.eh_frame:000000000000FC7B                 db  30h ; 0
.eh_frame:000000000000FC7C                 db  41h ; A
.eh_frame:000000000000FC7D                 db  0Eh
.eh_frame:000000000000FC7E                 db  28h ; (
.eh_frame:000000000000FC7F                 db  42h ; B
.eh_frame:000000000000FC80                 db  0Eh
.eh_frame:000000000000FC81                 db  20h
.eh_frame:000000000000FC82                 db  42h ; B
.eh_frame:000000000000FC83                 db  0Eh
.eh_frame:000000000000FC84                 db  18h
.eh_frame:000000000000FC85                 db  42h ; B
.eh_frame:000000000000FC86                 db  0Eh
.eh_frame:000000000000FC87                 db  10h
.eh_frame:000000000000FC88                 db  42h ; B
.eh_frame:000000000000FC89                 db  0Eh
.eh_frame:000000000000FC8A                 db    8
.eh_frame:000000000000FC8B                 db  44h ; D
.eh_frame:000000000000FC8C                 db  0Bh
.eh_frame:000000000000FC8D                 db    3
.eh_frame:000000000000FC8E                 db  99h
.eh_frame:000000000000FC8F                 db    5
.eh_frame:000000000000FC90                 db  0Eh
.eh_frame:000000000000FC91                 db 0F8h
.eh_frame:000000000000FC92                 db    1
.eh_frame:000000000000FC93                 db  4Dh ; M
.eh_frame:000000000000FC94                 db  0Eh
.eh_frame:000000000000FC95                 db  80h
.eh_frame:000000000000FC96                 db    2
.eh_frame:000000000000FC97                 db  44h ; D
.eh_frame:000000000000FC98                 db  0Eh
.eh_frame:000000000000FC99                 db  88h
.eh_frame:000000000000FC9A                 db    2
.eh_frame:000000000000FC9B                 db  47h ; G
.eh_frame:000000000000FC9C                 db  0Eh
.eh_frame:000000000000FC9D                 db  90h
.eh_frame:000000000000FC9E                 db    2
.eh_frame:000000000000FC9F                 db  5Bh ; [
.eh_frame:000000000000FCA0                 db  0Eh
.eh_frame:000000000000FCA1                 db 0F0h
.eh_frame:000000000000FCA2                 db    1
.eh_frame:000000000000FCA3                 db    0
.eh_frame:000000000000FCA4                 db  68h ; h
.eh_frame:000000000000FCA5                 db    0
.eh_frame:000000000000FCA6                 db    0
.eh_frame:000000000000FCA7                 db    0
.eh_frame:000000000000FCA8                 db  18h
.eh_frame:000000000000FCA9                 db  0Ah
.eh_frame:000000000000FCAA                 db    0
.eh_frame:000000000000FCAB                 db    0
.eh_frame:000000000000FCAC                 db 0C4h
.eh_frame:000000000000FCAD                 db  86h
.eh_frame:000000000000FCAE                 db 0FFh
.eh_frame:000000000000FCAF                 db 0FFh
.eh_frame:000000000000FCB0                 db 0ABh
.eh_frame:000000000000FCB1                 db    1
.eh_frame:000000000000FCB2                 db    0
.eh_frame:000000000000FCB3                 db    0
.eh_frame:000000000000FCB4                 db    0
.eh_frame:000000000000FCB5                 db  42h ; B
.eh_frame:000000000000FCB6                 db  0Eh
.eh_frame:000000000000FCB7                 db  10h
.eh_frame:000000000000FCB8                 db  8Fh
.eh_frame:000000000000FCB9                 db    2
.eh_frame:000000000000FCBA                 db  42h ; B
.eh_frame:000000000000FCBB                 db  0Eh
.eh_frame:000000000000FCBC                 db  18h
.eh_frame:000000000000FCBD                 db  8Eh
.eh_frame:000000000000FCBE                 db    3
.eh_frame:000000000000FCBF                 db  45h ; E
.eh_frame:000000000000FCC0                 db  0Eh
.eh_frame:000000000000FCC1                 db  20h
.eh_frame:000000000000FCC2                 db  8Dh
.eh_frame:000000000000FCC3                 db    4
.eh_frame:000000000000FCC4                 db  42h ; B
.eh_frame:000000000000FCC5                 db  0Eh
.eh_frame:000000000000FCC6                 db  28h ; (
.eh_frame:000000000000FCC7                 db  8Ch
.eh_frame:000000000000FCC8                 db    5
.eh_frame:000000000000FCC9                 db  44h ; D
.eh_frame:000000000000FCCA                 db  0Eh
.eh_frame:000000000000FCCB                 db  30h ; 0
.eh_frame:000000000000FCCC                 db  86h
.eh_frame:000000000000FCCD                 db    6
.eh_frame:000000000000FCCE                 db  41h ; A
.eh_frame:000000000000FCCF                 db  0Eh
.eh_frame:000000000000FCD0                 db  38h ; 8
.eh_frame:000000000000FCD1                 db  83h
.eh_frame:000000000000FCD2                 db    7
.eh_frame:000000000000FCD3                 db  47h ; G
.eh_frame:000000000000FCD4                 db  0Eh
.eh_frame:000000000000FCD5                 db  60h ; `
.eh_frame:000000000000FCD6                 db    2
.eh_frame:000000000000FCD7                 db  99h
.eh_frame:000000000000FCD8                 db  0Eh
.eh_frame:000000000000FCD9                 db  68h ; h
.eh_frame:000000000000FCDA                 db  5Fh ; _
.eh_frame:000000000000FCDB                 db  0Eh
.eh_frame:000000000000FCDC                 db  70h ; p
.eh_frame:000000000000FCDD                 db  46h ; F
.eh_frame:000000000000FCDE                 db  0Eh
.eh_frame:000000000000FCDF                 db  78h ; x
.eh_frame:000000000000FCE0                 db  42h ; B
.eh_frame:000000000000FCE1                 db  0Eh
.eh_frame:000000000000FCE2                 db  80h
.eh_frame:000000000000FCE3                 db    1
.eh_frame:000000000000FCE4                 db  59h ; Y
.eh_frame:000000000000FCE5                 db  0Eh
.eh_frame:000000000000FCE6                 db  60h ; `
.eh_frame:000000000000FCE7                 db    2
.eh_frame:000000000000FCE8                 db  40h ; @
.eh_frame:000000000000FCE9                 db  0Eh
.eh_frame:000000000000FCEA                 db  68h ; h
.eh_frame:000000000000FCEB                 db  4Bh ; K
.eh_frame:000000000000FCEC                 db  0Eh
.eh_frame:000000000000FCED                 db  70h ; p
.eh_frame:000000000000FCEE                 db  43h ; C
.eh_frame:000000000000FCEF                 db  0Eh
.eh_frame:000000000000FCF0                 db  78h ; x
.eh_frame:000000000000FCF1                 db  45h ; E
.eh_frame:000000000000FCF2                 db  0Eh
.eh_frame:000000000000FCF3                 db  80h
.eh_frame:000000000000FCF4                 db    1
.eh_frame:000000000000FCF5                 db  5Eh ; ^
.eh_frame:000000000000FCF6                 db  0Eh
.eh_frame:000000000000FCF7                 db  60h ; `
.eh_frame:000000000000FCF8                 db  4Ch ; L
.eh_frame:000000000000FCF9                 db  0Ah
.eh_frame:000000000000FCFA                 db  0Eh
.eh_frame:000000000000FCFB                 db  38h ; 8
.eh_frame:000000000000FCFC                 db  44h ; D
.eh_frame:000000000000FCFD                 db  0Eh
.eh_frame:000000000000FCFE                 db  30h ; 0
.eh_frame:000000000000FCFF                 db  41h ; A
.eh_frame:000000000000FD00                 db  0Eh
.eh_frame:000000000000FD01                 db  28h ; (
.eh_frame:000000000000FD02                 db  42h ; B
.eh_frame:000000000000FD03                 db  0Eh
.eh_frame:000000000000FD04                 db  20h
.eh_frame:000000000000FD05                 db  42h ; B
.eh_frame:000000000000FD06                 db  0Eh
.eh_frame:000000000000FD07                 db  18h
.eh_frame:000000000000FD08                 db  42h ; B
.eh_frame:000000000000FD09                 db  0Eh
.eh_frame:000000000000FD0A                 db  10h
.eh_frame:000000000000FD0B                 db  42h ; B
.eh_frame:000000000000FD0C                 db  0Eh
.eh_frame:000000000000FD0D                 db    8
.eh_frame:000000000000FD0E                 db  46h ; F
.eh_frame:000000000000FD0F                 db  0Bh
.eh_frame:000000000000FD10                 db  28h ; (
.eh_frame:000000000000FD11                 db    0
.eh_frame:000000000000FD12                 db    0
.eh_frame:000000000000FD13                 db    0
.eh_frame:000000000000FD14                 db  84h
.eh_frame:000000000000FD15                 db  0Ah
.eh_frame:000000000000FD16                 db    0
.eh_frame:000000000000FD17                 db    0
.eh_frame:000000000000FD18                 db    8
.eh_frame:000000000000FD19                 db  88h
.eh_frame:000000000000FD1A                 db 0FFh
.eh_frame:000000000000FD1B                 db 0FFh
.eh_frame:000000000000FD1C                 db  36h ; 6
.eh_frame:000000000000FD1D                 db    0
.eh_frame:000000000000FD1E                 db    0
.eh_frame:000000000000FD1F                 db    0
.eh_frame:000000000000FD20                 db    0
.eh_frame:000000000000FD21                 db  42h ; B
.eh_frame:000000000000FD22                 db  0Eh
.eh_frame:000000000000FD23                 db  10h
.eh_frame:000000000000FD24                 db  8Ch
.eh_frame:000000000000FD25                 db    2
.eh_frame:000000000000FD26                 db  41h ; A
.eh_frame:000000000000FD27                 db  0Eh
.eh_frame:000000000000FD28                 db  18h
.eh_frame:000000000000FD29                 db  86h
.eh_frame:000000000000FD2A                 db    3
.eh_frame:000000000000FD2B                 db  41h ; A
.eh_frame:000000000000FD2C                 db  0Eh
.eh_frame:000000000000FD2D                 db  20h
.eh_frame:000000000000FD2E                 db  83h
.eh_frame:000000000000FD2F                 db    4
.eh_frame:000000000000FD30                 db  6Eh ; n
.eh_frame:000000000000FD31                 db  0Eh
.eh_frame:000000000000FD32                 db  18h
.eh_frame:000000000000FD33                 db  41h ; A
.eh_frame:000000000000FD34                 db  0Eh
.eh_frame:000000000000FD35                 db  10h
.eh_frame:000000000000FD36                 db  42h ; B
.eh_frame:000000000000FD37                 db  0Eh
.eh_frame:000000000000FD38                 db    8
.eh_frame:000000000000FD39                 db    0
.eh_frame:000000000000FD3A                 db    0
.eh_frame:000000000000FD3B                 db    0
.eh_frame:000000000000FD3C                 db  10h
.eh_frame:000000000000FD3D                 db    0
.eh_frame:000000000000FD3E                 db    0
.eh_frame:000000000000FD3F                 db    0
.eh_frame:000000000000FD40                 db 0B0h
.eh_frame:000000000000FD41                 db  0Ah
.eh_frame:000000000000FD42                 db    0
.eh_frame:000000000000FD43                 db    0
.eh_frame:000000000000FD44                 db  1Ch
.eh_frame:000000000000FD45                 db  88h
.eh_frame:000000000000FD46                 db 0FFh
.eh_frame:000000000000FD47                 db 0FFh
.eh_frame:000000000000FD48                 db  11h
.eh_frame:000000000000FD49                 db    0
.eh_frame:000000000000FD4A                 db    0
.eh_frame:000000000000FD4B                 db    0
.eh_frame:000000000000FD4C                 db    0
.eh_frame:000000000000FD4D                 db    0
.eh_frame:000000000000FD4E                 db    0
.eh_frame:000000000000FD4F                 db    0
.eh_frame:000000000000FD50                 db  10h
.eh_frame:000000000000FD51                 db    0
.eh_frame:000000000000FD52                 db    0
.eh_frame:000000000000FD53                 db    0
.eh_frame:000000000000FD54                 db 0C4h
.eh_frame:000000000000FD55                 db  0Ah
.eh_frame:000000000000FD56                 db    0
.eh_frame:000000000000FD57                 db    0
.eh_frame:000000000000FD58                 db  28h ; (
.eh_frame:000000000000FD59                 db  88h
.eh_frame:000000000000FD5A                 db 0FFh
.eh_frame:000000000000FD5B                 db 0FFh
.eh_frame:000000000000FD5C                 db  11h
.eh_frame:000000000000FD5D                 db    0
.eh_frame:000000000000FD5E                 db    0
.eh_frame:000000000000FD5F                 db    0
.eh_frame:000000000000FD60                 db    0
.eh_frame:000000000000FD61                 db    0
.eh_frame:000000000000FD62                 db    0
.eh_frame:000000000000FD63                 db    0
.eh_frame:000000000000FD64                 db  10h
.eh_frame:000000000000FD65                 db    0
.eh_frame:000000000000FD66                 db    0
.eh_frame:000000000000FD67                 db    0
.eh_frame:000000000000FD68                 db 0D8h
.eh_frame:000000000000FD69                 db  0Ah
.eh_frame:000000000000FD6A                 db    0
.eh_frame:000000000000FD6B                 db    0
.eh_frame:000000000000FD6C                 db  34h ; 4
.eh_frame:000000000000FD6D                 db  88h
.eh_frame:000000000000FD6E                 db 0FFh
.eh_frame:000000000000FD6F                 db 0FFh
.eh_frame:000000000000FD70                 db  35h ; 5
.eh_frame:000000000000FD71                 db    0
.eh_frame:000000000000FD72                 db    0
.eh_frame:000000000000FD73                 db    0
.eh_frame:000000000000FD74                 db    0
.eh_frame:000000000000FD75                 db    0
.eh_frame:000000000000FD76                 db    0
.eh_frame:000000000000FD77                 db    0
.eh_frame:000000000000FD78                 db  10h
.eh_frame:000000000000FD79                 db    0
.eh_frame:000000000000FD7A                 db    0
.eh_frame:000000000000FD7B                 db    0
.eh_frame:000000000000FD7C                 db 0ECh
.eh_frame:000000000000FD7D                 db  0Ah
.eh_frame:000000000000FD7E                 db    0
.eh_frame:000000000000FD7F                 db    0
.eh_frame:000000000000FD80                 db  60h ; `
.eh_frame:000000000000FD81                 db  88h
.eh_frame:000000000000FD82                 db 0FFh
.eh_frame:000000000000FD83                 db 0FFh
.eh_frame:000000000000FD84                 db  15h
.eh_frame:000000000000FD85                 db    0
.eh_frame:000000000000FD86                 db    0
.eh_frame:000000000000FD87                 db    0
.eh_frame:000000000000FD88                 db    0
.eh_frame:000000000000FD89                 db    0
.eh_frame:000000000000FD8A                 db    0
.eh_frame:000000000000FD8B                 db    0
.eh_frame:000000000000FD8C                 db  10h
.eh_frame:000000000000FD8D                 db    0
.eh_frame:000000000000FD8E                 db    0
.eh_frame:000000000000FD8F                 db    0
.eh_frame:000000000000FD90                 db    0
.eh_frame:000000000000FD91                 db  0Bh
.eh_frame:000000000000FD92                 db    0
.eh_frame:000000000000FD93                 db    0
.eh_frame:000000000000FD94                 db  6Ch ; l
.eh_frame:000000000000FD95                 db  88h
.eh_frame:000000000000FD96                 db 0FFh
.eh_frame:000000000000FD97                 db 0FFh
.eh_frame:000000000000FD98                 db  30h ; 0
.eh_frame:000000000000FD99                 db    0
.eh_frame:000000000000FD9A                 db    0
.eh_frame:000000000000FD9B                 db    0
.eh_frame:000000000000FD9C                 db    0
.eh_frame:000000000000FD9D                 db  6Bh ; k
.eh_frame:000000000000FD9E                 db  0Eh
.eh_frame:000000000000FD9F                 db  10h
.eh_frame:000000000000FDA0                 db  50h ; P
.eh_frame:000000000000FDA1                 db    0
.eh_frame:000000000000FDA2                 db    0
.eh_frame:000000000000FDA3                 db    0
.eh_frame:000000000000FDA4                 db  14h
.eh_frame:000000000000FDA5                 db  0Bh
.eh_frame:000000000000FDA6                 db    0
.eh_frame:000000000000FDA7                 db    0
.eh_frame:000000000000FDA8                 db  88h
.eh_frame:000000000000FDA9                 db  88h
.eh_frame:000000000000FDAA                 db 0FFh
.eh_frame:000000000000FDAB                 db 0FFh
.eh_frame:000000000000FDAC                 db  74h ; t
.eh_frame:000000000000FDAD                 db    0
.eh_frame:000000000000FDAE                 db    0
.eh_frame:000000000000FDAF                 db    0
.eh_frame:000000000000FDB0                 db    0
.eh_frame:000000000000FDB1                 db  42h ; B
.eh_frame:000000000000FDB2                 db  0Eh
.eh_frame:000000000000FDB3                 db  10h
.eh_frame:000000000000FDB4                 db  8Fh
.eh_frame:000000000000FDB5                 db    2
.eh_frame:000000000000FDB6                 db  42h ; B
.eh_frame:000000000000FDB7                 db  0Eh
.eh_frame:000000000000FDB8                 db  18h
.eh_frame:000000000000FDB9                 db  8Eh
.eh_frame:000000000000FDBA                 db    3
.eh_frame:000000000000FDBB                 db  49h ; I
.eh_frame:000000000000FDBC                 db  0Eh
.eh_frame:000000000000FDBD                 db  20h
.eh_frame:000000000000FDBE                 db  8Dh
.eh_frame:000000000000FDBF                 db    4
.eh_frame:000000000000FDC0                 db  42h ; B
.eh_frame:000000000000FDC1                 db  0Eh
.eh_frame:000000000000FDC2                 db  28h ; (
.eh_frame:000000000000FDC3                 db  8Ch
.eh_frame:000000000000FDC4                 db    5
.eh_frame:000000000000FDC5                 db  44h ; D
.eh_frame:000000000000FDC6                 db  0Eh
.eh_frame:000000000000FDC7                 db  30h ; 0
.eh_frame:000000000000FDC8                 db  86h
.eh_frame:000000000000FDC9                 db    6
.eh_frame:000000000000FDCA                 db  41h ; A
.eh_frame:000000000000FDCB                 db  0Eh
.eh_frame:000000000000FDCC                 db  38h ; 8
.eh_frame:000000000000FDCD                 db  83h
.eh_frame:000000000000FDCE                 db    7
.eh_frame:000000000000FDCF                 db  4Dh ; M
.eh_frame:000000000000FDD0                 db  0Eh
.eh_frame:000000000000FDD1                 db  50h ; P
.eh_frame:000000000000FDD2                 db  5Fh ; _
.eh_frame:000000000000FDD3                 db  0Eh
.eh_frame:000000000000FDD4                 db  58h ; X
.eh_frame:000000000000FDD5                 db  47h ; G
.eh_frame:000000000000FDD6                 db  0Eh
.eh_frame:000000000000FDD7                 db  60h ; `
.eh_frame:000000000000FDD8                 db  46h ; F
.eh_frame:000000000000FDD9                 db  0Eh
.eh_frame:000000000000FDDA                 db  68h ; h
.eh_frame:000000000000FDDB                 db  44h ; D
.eh_frame:000000000000FDDC                 db  0Eh
.eh_frame:000000000000FDDD                 db  70h ; p
.eh_frame:000000000000FDDE                 db  58h ; X
.eh_frame:000000000000FDDF                 db  0Eh
.eh_frame:000000000000FDE0                 db  38h ; 8
.eh_frame:000000000000FDE1                 db  41h ; A
.eh_frame:000000000000FDE2                 db  0Eh
.eh_frame:000000000000FDE3                 db  30h ; 0
.eh_frame:000000000000FDE4                 db  41h ; A
.eh_frame:000000000000FDE5                 db  0Eh
.eh_frame:000000000000FDE6                 db  28h ; (
.eh_frame:000000000000FDE7                 db  42h ; B
.eh_frame:000000000000FDE8                 db  0Eh
.eh_frame:000000000000FDE9                 db  20h
.eh_frame:000000000000FDEA                 db  42h ; B
.eh_frame:000000000000FDEB                 db  0Eh
.eh_frame:000000000000FDEC                 db  18h
.eh_frame:000000000000FDED                 db  42h ; B
.eh_frame:000000000000FDEE                 db  0Eh
.eh_frame:000000000000FDEF                 db  10h
.eh_frame:000000000000FDF0                 db  42h ; B
.eh_frame:000000000000FDF1                 db  0Eh
.eh_frame:000000000000FDF2                 db    8
.eh_frame:000000000000FDF3                 db    0
.eh_frame:000000000000FDF4                 db  68h ; h
.eh_frame:000000000000FDF5                 db    0
.eh_frame:000000000000FDF6                 db    0
.eh_frame:000000000000FDF7                 db    0
.eh_frame:000000000000FDF8                 db  68h ; h
.eh_frame:000000000000FDF9                 db  0Bh
.eh_frame:000000000000FDFA                 db    0
.eh_frame:000000000000FDFB                 db    0
.eh_frame:000000000000FDFC                 db 0B4h
.eh_frame:000000000000FDFD                 db  88h
.eh_frame:000000000000FDFE                 db 0FFh
.eh_frame:000000000000FDFF                 db 0FFh
.eh_frame:000000000000FE00                 db 0E3h
.eh_frame:000000000000FE01                 db    0
.eh_frame:000000000000FE02                 db    0
.eh_frame:000000000000FE03                 db    0
.eh_frame:000000000000FE04                 db    0
.eh_frame:000000000000FE05                 db  42h ; B
.eh_frame:000000000000FE06                 db  0Eh
.eh_frame:000000000000FE07                 db  10h
.eh_frame:000000000000FE08                 db  8Fh
.eh_frame:000000000000FE09                 db    2
.eh_frame:000000000000FE0A                 db  42h ; B
.eh_frame:000000000000FE0B                 db  0Eh
.eh_frame:000000000000FE0C                 db  18h
.eh_frame:000000000000FE0D                 db  8Eh
.eh_frame:000000000000FE0E                 db    3
.eh_frame:000000000000FE0F                 db  49h ; I
.eh_frame:000000000000FE10                 db  0Eh
.eh_frame:000000000000FE11                 db  20h
.eh_frame:000000000000FE12                 db  8Dh
.eh_frame:000000000000FE13                 db    4
.eh_frame:000000000000FE14                 db  42h ; B
.eh_frame:000000000000FE15                 db  0Eh
.eh_frame:000000000000FE16                 db  28h ; (
.eh_frame:000000000000FE17                 db  8Ch
.eh_frame:000000000000FE18                 db    5
.eh_frame:000000000000FE19                 db  44h ; D
.eh_frame:000000000000FE1A                 db  0Eh
.eh_frame:000000000000FE1B                 db  30h ; 0
.eh_frame:000000000000FE1C                 db  86h
.eh_frame:000000000000FE1D                 db    6
.eh_frame:000000000000FE1E                 db  41h ; A
.eh_frame:000000000000FE1F                 db  0Eh
.eh_frame:000000000000FE20                 db  38h ; 8
.eh_frame:000000000000FE21                 db  83h
.eh_frame:000000000000FE22                 db    7
.eh_frame:000000000000FE23                 db  4Dh ; M
.eh_frame:000000000000FE24                 db  0Eh
.eh_frame:000000000000FE25                 db  70h ; p
.eh_frame:000000000000FE26                 db  65h ; e
.eh_frame:000000000000FE27                 db  0Eh
.eh_frame:000000000000FE28                 db  78h ; x
.eh_frame:000000000000FE29                 db  4Dh ; M
.eh_frame:000000000000FE2A                 db  0Eh
.eh_frame:000000000000FE2B                 db  80h
.eh_frame:000000000000FE2C                 db    1
.eh_frame:000000000000FE2D                 db  46h ; F
.eh_frame:000000000000FE2E                 db  0Eh
.eh_frame:000000000000FE2F                 db  88h
.eh_frame:000000000000FE30                 db    1
.eh_frame:000000000000FE31                 db  42h ; B
.eh_frame:000000000000FE32                 db  0Eh
.eh_frame:000000000000FE33                 db  90h
.eh_frame:000000000000FE34                 db    1
.eh_frame:000000000000FE35                 db  5Eh ; ^
.eh_frame:000000000000FE36                 db  0Eh
.eh_frame:000000000000FE37                 db  70h ; p
.eh_frame:000000000000FE38                 db  56h ; V
.eh_frame:000000000000FE39                 db  0Eh
.eh_frame:000000000000FE3A                 db  78h ; x
.eh_frame:000000000000FE3B                 db  43h ; C
.eh_frame:000000000000FE3C                 db  0Eh
.eh_frame:000000000000FE3D                 db  80h
.eh_frame:000000000000FE3E                 db    1
.eh_frame:000000000000FE3F                 db  43h ; C
.eh_frame:000000000000FE40                 db  0Eh
.eh_frame:000000000000FE41                 db  88h
.eh_frame:000000000000FE42                 db    1
.eh_frame:000000000000FE43                 db  56h ; V
.eh_frame:000000000000FE44                 db  0Eh
.eh_frame:000000000000FE45                 db  90h
.eh_frame:000000000000FE46                 db    1
.eh_frame:000000000000FE47                 db  52h ; R
.eh_frame:000000000000FE48                 db  0Eh
.eh_frame:000000000000FE49                 db  70h ; p
.eh_frame:000000000000FE4A                 db  5Bh ; [
.eh_frame:000000000000FE4B                 db  0Eh
.eh_frame:000000000000FE4C                 db  38h ; 8
.eh_frame:000000000000FE4D                 db  41h ; A
.eh_frame:000000000000FE4E                 db  0Eh
.eh_frame:000000000000FE4F                 db  30h ; 0
.eh_frame:000000000000FE50                 db  41h ; A
.eh_frame:000000000000FE51                 db  0Eh
.eh_frame:000000000000FE52                 db  28h ; (
.eh_frame:000000000000FE53                 db  42h ; B
.eh_frame:000000000000FE54                 db  0Eh
.eh_frame:000000000000FE55                 db  20h
.eh_frame:000000000000FE56                 db  42h ; B
.eh_frame:000000000000FE57                 db  0Eh
.eh_frame:000000000000FE58                 db  18h
.eh_frame:000000000000FE59                 db  42h ; B
.eh_frame:000000000000FE5A                 db  0Eh
.eh_frame:000000000000FE5B                 db  10h
.eh_frame:000000000000FE5C                 db  42h ; B
.eh_frame:000000000000FE5D                 db  0Eh
.eh_frame:000000000000FE5E                 db    8
.eh_frame:000000000000FE5F                 db    0
.eh_frame:000000000000FE60                 db  10h
.eh_frame:000000000000FE61                 db    0
.eh_frame:000000000000FE62                 db    0
.eh_frame:000000000000FE63                 db    0
.eh_frame:000000000000FE64                 db 0D4h
.eh_frame:000000000000FE65                 db  0Bh
.eh_frame:000000000000FE66                 db    0
.eh_frame:000000000000FE67                 db    0
.eh_frame:000000000000FE68                 db  38h ; 8
.eh_frame:000000000000FE69                 db  89h
.eh_frame:000000000000FE6A                 db 0FFh
.eh_frame:000000000000FE6B                 db 0FFh
.eh_frame:000000000000FE6C                 db  0Ah
.eh_frame:000000000000FE6D                 db    0
.eh_frame:000000000000FE6E                 db    0
.eh_frame:000000000000FE6F                 db    0
.eh_frame:000000000000FE70                 db    0
.eh_frame:000000000000FE71                 db    0
.eh_frame:000000000000FE72                 db    0
.eh_frame:000000000000FE73                 db    0
.eh_frame:000000000000FE74                 db  28h ; (
.eh_frame:000000000000FE75                 db    0
.eh_frame:000000000000FE76                 db    0
.eh_frame:000000000000FE77                 db    0
.eh_frame:000000000000FE78                 db 0E8h
.eh_frame:000000000000FE79                 db  0Bh
.eh_frame:000000000000FE7A                 db    0
.eh_frame:000000000000FE7B                 db    0
.eh_frame:000000000000FE7C                 db  34h ; 4
.eh_frame:000000000000FE7D                 db  89h
.eh_frame:000000000000FE7E                 db 0FFh
.eh_frame:000000000000FE7F                 db 0FFh
.eh_frame:000000000000FE80                 db  93h
.eh_frame:000000000000FE81                 db    0
.eh_frame:000000000000FE82                 db    0
.eh_frame:000000000000FE83                 db    0
.eh_frame:000000000000FE84                 db    0
.eh_frame:000000000000FE85                 db  48h ; H
.eh_frame:000000000000FE86                 db  0Eh
.eh_frame:000000000000FE87                 db  10h
.eh_frame:000000000000FE88                 db  8Ch
.eh_frame:000000000000FE89                 db    2
.eh_frame:000000000000FE8A                 db  48h ; H
.eh_frame:000000000000FE8B                 db  0Eh
.eh_frame:000000000000FE8C                 db  18h
.eh_frame:000000000000FE8D                 db  86h
.eh_frame:000000000000FE8E                 db    3
.eh_frame:000000000000FE8F                 db  41h ; A
.eh_frame:000000000000FE90                 db  0Eh
.eh_frame:000000000000FE91                 db  20h
.eh_frame:000000000000FE92                 db  83h
.eh_frame:000000000000FE93                 db    4
.eh_frame:000000000000FE94                 db    2
.eh_frame:000000000000FE95                 db  74h ; t
.eh_frame:000000000000FE96                 db  0Eh
.eh_frame:000000000000FE97                 db  18h
.eh_frame:000000000000FE98                 db  4Bh ; K
.eh_frame:000000000000FE99                 db  0Eh
.eh_frame:000000000000FE9A                 db  10h
.eh_frame:000000000000FE9B                 db  42h ; B
.eh_frame:000000000000FE9C                 db  0Eh
.eh_frame:000000000000FE9D                 db    8
.eh_frame:000000000000FE9E                 db    0
.eh_frame:000000000000FE9F                 db    0
.eh_frame:000000000000FEA0                 db  10h
.eh_frame:000000000000FEA1                 db    0
.eh_frame:000000000000FEA2                 db    0
.eh_frame:000000000000FEA3                 db    0
.eh_frame:000000000000FEA4                 db  14h
.eh_frame:000000000000FEA5                 db  0Ch
.eh_frame:000000000000FEA6                 db    0
.eh_frame:000000000000FEA7                 db    0
.eh_frame:000000000000FEA8                 db 0A8h
.eh_frame:000000000000FEA9                 db  89h
.eh_frame:000000000000FEAA                 db 0FFh
.eh_frame:000000000000FEAB                 db 0FFh
.eh_frame:000000000000FEAC                 db  13h
.eh_frame:000000000000FEAD                 db    0
.eh_frame:000000000000FEAE                 db    0
.eh_frame:000000000000FEAF                 db    0
.eh_frame:000000000000FEB0                 db    0
.eh_frame:000000000000FEB1                 db    0
.eh_frame:000000000000FEB2                 db    0
.eh_frame:000000000000FEB3                 db    0
.eh_frame:000000000000FEB4                 db  10h
.eh_frame:000000000000FEB5                 db    0
.eh_frame:000000000000FEB6                 db    0
.eh_frame:000000000000FEB7                 db    0
.eh_frame:000000000000FEB8                 db  28h ; (
.eh_frame:000000000000FEB9                 db  0Ch
.eh_frame:000000000000FEBA                 db    0
.eh_frame:000000000000FEBB                 db    0
.eh_frame:000000000000FEBC                 db 0B4h
.eh_frame:000000000000FEBD                 db  89h
.eh_frame:000000000000FEBE                 db 0FFh
.eh_frame:000000000000FEBF                 db 0FFh
.eh_frame:000000000000FEC0                 db  0Ch
.eh_frame:000000000000FEC1                 db    0
.eh_frame:000000000000FEC2                 db    0
.eh_frame:000000000000FEC3                 db    0
.eh_frame:000000000000FEC4                 db    0
.eh_frame:000000000000FEC5                 db    0
.eh_frame:000000000000FEC6                 db    0
.eh_frame:000000000000FEC7                 db    0
.eh_frame:000000000000FEC8                 db  10h
.eh_frame:000000000000FEC9                 db    0
.eh_frame:000000000000FECA                 db    0
.eh_frame:000000000000FECB                 db    0
.eh_frame:000000000000FECC                 db  3Ch ; <
.eh_frame:000000000000FECD                 db  0Ch
.eh_frame:000000000000FECE                 db    0
.eh_frame:000000000000FECF                 db    0
.eh_frame:000000000000FED0                 db 0B0h
.eh_frame:000000000000FED1                 db  89h
.eh_frame:000000000000FED2                 db 0FFh
.eh_frame:000000000000FED3                 db 0FFh
.eh_frame:000000000000FED4                 db  18h
.eh_frame:000000000000FED5                 db    0
.eh_frame:000000000000FED6                 db    0
.eh_frame:000000000000FED7                 db    0
.eh_frame:000000000000FED8                 db    0
.eh_frame:000000000000FED9                 db    0
.eh_frame:000000000000FEDA                 db    0
.eh_frame:000000000000FEDB                 db    0
.eh_frame:000000000000FEDC                 db  10h
.eh_frame:000000000000FEDD                 db    0
.eh_frame:000000000000FEDE                 db    0
.eh_frame:000000000000FEDF                 db    0
.eh_frame:000000000000FEE0                 db  50h ; P
.eh_frame:000000000000FEE1                 db  0Ch
.eh_frame:000000000000FEE2                 db    0
.eh_frame:000000000000FEE3                 db    0
.eh_frame:000000000000FEE4                 db 0BCh
.eh_frame:000000000000FEE5                 db  89h
.eh_frame:000000000000FEE6                 db 0FFh
.eh_frame:000000000000FEE7                 db 0FFh
.eh_frame:000000000000FEE8                 db  14h
.eh_frame:000000000000FEE9                 db    0
.eh_frame:000000000000FEEA                 db    0
.eh_frame:000000000000FEEB                 db    0
.eh_frame:000000000000FEEC                 db    0
.eh_frame:000000000000FEED                 db    0
.eh_frame:000000000000FEEE                 db    0
.eh_frame:000000000000FEEF                 db    0
.eh_frame:000000000000FEF0                 db  18h
.eh_frame:000000000000FEF1                 db    0
.eh_frame:000000000000FEF2                 db    0
.eh_frame:000000000000FEF3                 db    0
.eh_frame:000000000000FEF4                 db  64h ; d
.eh_frame:000000000000FEF5                 db  0Ch
.eh_frame:000000000000FEF6                 db    0
.eh_frame:000000000000FEF7                 db    0
.eh_frame:000000000000FEF8                 db 0C8h
.eh_frame:000000000000FEF9                 db  89h
.eh_frame:000000000000FEFA                 db 0FFh
.eh_frame:000000000000FEFB                 db 0FFh
.eh_frame:000000000000FEFC                 db  8Eh
.eh_frame:000000000000FEFD                 db    0
.eh_frame:000000000000FEFE                 db    0
.eh_frame:000000000000FEFF                 db    0
.eh_frame:000000000000FF00                 db    0
.eh_frame:000000000000FF01                 db  44h ; D
.eh_frame:000000000000FF02                 db  0Eh
.eh_frame:000000000000FF03                 db  50h ; P
.eh_frame:000000000000FF04                 db    2
.eh_frame:000000000000FF05                 db  7Fh ; 
.eh_frame:000000000000FF06                 db  0Ah
.eh_frame:000000000000FF07                 db  0Eh
.eh_frame:000000000000FF08                 db    8
.eh_frame:000000000000FF09                 db  41h ; A
.eh_frame:000000000000FF0A                 db  0Bh
.eh_frame:000000000000FF0B                 db    0
.eh_frame:000000000000FF0C                 db  18h
.eh_frame:000000000000FF0D                 db    0
.eh_frame:000000000000FF0E                 db    0
.eh_frame:000000000000FF0F                 db    0
.eh_frame:000000000000FF10                 db  80h
.eh_frame:000000000000FF11                 db  0Ch
.eh_frame:000000000000FF12                 db    0
.eh_frame:000000000000FF13                 db    0
.eh_frame:000000000000FF14                 db  3Ch ; <
.eh_frame:000000000000FF15                 db  8Ah
.eh_frame:000000000000FF16                 db 0FFh
.eh_frame:000000000000FF17                 db 0FFh
.eh_frame:000000000000FF18                 db  8Ah
.eh_frame:000000000000FF19                 db    0
.eh_frame:000000000000FF1A                 db    0
.eh_frame:000000000000FF1B                 db    0
.eh_frame:000000000000FF1C                 db    0
.eh_frame:000000000000FF1D                 db  44h ; D
.eh_frame:000000000000FF1E                 db  0Eh
.eh_frame:000000000000FF1F                 db  50h ; P
.eh_frame:000000000000FF20                 db    2
.eh_frame:000000000000FF21                 db  7Bh ; {
.eh_frame:000000000000FF22                 db  0Ah
.eh_frame:000000000000FF23                 db  0Eh
.eh_frame:000000000000FF24                 db    8
.eh_frame:000000000000FF25                 db  41h ; A
.eh_frame:000000000000FF26                 db  0Bh
.eh_frame:000000000000FF27                 db    0
.eh_frame:000000000000FF28                 db  10h
.eh_frame:000000000000FF29                 db    0
.eh_frame:000000000000FF2A                 db    0
.eh_frame:000000000000FF2B                 db    0
.eh_frame:000000000000FF2C                 db  9Ch
.eh_frame:000000000000FF2D                 db  0Ch
.eh_frame:000000000000FF2E                 db    0
.eh_frame:000000000000FF2F                 db    0
.eh_frame:000000000000FF30                 db 0B0h
.eh_frame:000000000000FF31                 db  8Ah
.eh_frame:000000000000FF32                 db 0FFh
.eh_frame:000000000000FF33                 db 0FFh
.eh_frame:000000000000FF34                 db  0Ch
.eh_frame:000000000000FF35                 db    0
.eh_frame:000000000000FF36                 db    0
.eh_frame:000000000000FF37                 db    0
.eh_frame:000000000000FF38                 db    0
.eh_frame:000000000000FF39                 db    0
.eh_frame:000000000000FF3A                 db    0
.eh_frame:000000000000FF3B                 db    0
.eh_frame:000000000000FF3C                 db  10h
.eh_frame:000000000000FF3D                 db    0
.eh_frame:000000000000FF3E                 db    0
.eh_frame:000000000000FF3F                 db    0
.eh_frame:000000000000FF40                 db 0B0h
.eh_frame:000000000000FF41                 db  0Ch
.eh_frame:000000000000FF42                 db    0
.eh_frame:000000000000FF43                 db    0
.eh_frame:000000000000FF44                 db 0ACh
.eh_frame:000000000000FF45                 db  8Ah
.eh_frame:000000000000FF46                 db 0FFh
.eh_frame:000000000000FF47                 db 0FFh
.eh_frame:000000000000FF48                 db  0Fh
.eh_frame:000000000000FF49                 db    0
.eh_frame:000000000000FF4A                 db    0
.eh_frame:000000000000FF4B                 db    0
.eh_frame:000000000000FF4C                 db    0
.eh_frame:000000000000FF4D                 db    0
.eh_frame:000000000000FF4E                 db    0
.eh_frame:000000000000FF4F                 db    0
.eh_frame:000000000000FF50                 db  18h
.eh_frame:000000000000FF51                 db    0
.eh_frame:000000000000FF52                 db    0
.eh_frame:000000000000FF53                 db    0
.eh_frame:000000000000FF54                 db 0C4h
.eh_frame:000000000000FF55                 db  0Ch
.eh_frame:000000000000FF56                 db    0
.eh_frame:000000000000FF57                 db    0
.eh_frame:000000000000FF58                 db 0A8h
.eh_frame:000000000000FF59                 db  8Ah
.eh_frame:000000000000FF5A                 db 0FFh
.eh_frame:000000000000FF5B                 db 0FFh
.eh_frame:000000000000FF5C                 db  98h
.eh_frame:000000000000FF5D                 db    0
.eh_frame:000000000000FF5E                 db    0
.eh_frame:000000000000FF5F                 db    0
.eh_frame:000000000000FF60                 db    0
.eh_frame:000000000000FF61                 db  44h ; D
.eh_frame:000000000000FF62                 db  0Eh
.eh_frame:000000000000FF63                 db  50h ; P
.eh_frame:000000000000FF64                 db    2
.eh_frame:000000000000FF65                 db  8Eh
.eh_frame:000000000000FF66                 db  0Ah
.eh_frame:000000000000FF67                 db  0Eh
.eh_frame:000000000000FF68                 db    8
.eh_frame:000000000000FF69                 db  41h ; A
.eh_frame:000000000000FF6A                 db  0Bh
.eh_frame:000000000000FF6B                 db    0
.eh_frame:000000000000FF6C                 db  10h
.eh_frame:000000000000FF6D                 db    0
.eh_frame:000000000000FF6E                 db    0
.eh_frame:000000000000FF6F                 db    0
.eh_frame:000000000000FF70                 db 0E0h
.eh_frame:000000000000FF71                 db  0Ch
.eh_frame:000000000000FF72                 db    0
.eh_frame:000000000000FF73                 db    0
.eh_frame:000000000000FF74                 db  2Ch ; ,
.eh_frame:000000000000FF75                 db  8Bh
.eh_frame:000000000000FF76                 db 0FFh
.eh_frame:000000000000FF77                 db 0FFh
.eh_frame:000000000000FF78                 db  10h
.eh_frame:000000000000FF79                 db    0
.eh_frame:000000000000FF7A                 db    0
.eh_frame:000000000000FF7B                 db    0
.eh_frame:000000000000FF7C                 db    0
.eh_frame:000000000000FF7D                 db    0
.eh_frame:000000000000FF7E                 db    0
.eh_frame:000000000000FF7F                 db    0
.eh_frame:000000000000FF80                 db  10h
.eh_frame:000000000000FF81                 db    0
.eh_frame:000000000000FF82                 db    0
.eh_frame:000000000000FF83                 db    0
.eh_frame:000000000000FF84                 db 0F4h
.eh_frame:000000000000FF85                 db  0Ch
.eh_frame:000000000000FF86                 db    0
.eh_frame:000000000000FF87                 db    0
.eh_frame:000000000000FF88                 db  28h ; (
.eh_frame:000000000000FF89                 db  8Bh
.eh_frame:000000000000FF8A                 db 0FFh
.eh_frame:000000000000FF8B                 db 0FFh
.eh_frame:000000000000FF8C                 db  11h
.eh_frame:000000000000FF8D                 db    0
.eh_frame:000000000000FF8E                 db    0
.eh_frame:000000000000FF8F                 db    0
.eh_frame:000000000000FF90                 db    0
.eh_frame:000000000000FF91                 db    0
.eh_frame:000000000000FF92                 db    0
.eh_frame:000000000000FF93                 db    0
.eh_frame:000000000000FF94                 db  10h
.eh_frame:000000000000FF95                 db    0
.eh_frame:000000000000FF96                 db    0
.eh_frame:000000000000FF97                 db    0
.eh_frame:000000000000FF98                 db    8
.eh_frame:000000000000FF99                 db  0Dh
.eh_frame:000000000000FF9A                 db    0
.eh_frame:000000000000FF9B                 db    0
.eh_frame:000000000000FF9C                 db  34h ; 4
.eh_frame:000000000000FF9D                 db  8Bh
.eh_frame:000000000000FF9E                 db 0FFh
.eh_frame:000000000000FF9F                 db 0FFh
.eh_frame:000000000000FFA0                 db  0Ah
.eh_frame:000000000000FFA1                 db    0
.eh_frame:000000000000FFA2                 db    0
.eh_frame:000000000000FFA3                 db    0
.eh_frame:000000000000FFA4                 db    0
.eh_frame:000000000000FFA5                 db    0
.eh_frame:000000000000FFA6                 db    0
.eh_frame:000000000000FFA7                 db    0
.eh_frame:000000000000FFA8                 db  18h
.eh_frame:000000000000FFA9                 db    0
.eh_frame:000000000000FFAA                 db    0
.eh_frame:000000000000FFAB                 db    0
.eh_frame:000000000000FFAC                 db  1Ch
.eh_frame:000000000000FFAD                 db  0Dh
.eh_frame:000000000000FFAE                 db    0
.eh_frame:000000000000FFAF                 db    0
.eh_frame:000000000000FFB0                 db  30h ; 0
.eh_frame:000000000000FFB1                 db  8Bh
.eh_frame:000000000000FFB2                 db 0FFh
.eh_frame:000000000000FFB3                 db 0FFh
.eh_frame:000000000000FFB4                 db  8Eh
.eh_frame:000000000000FFB5                 db    0
.eh_frame:000000000000FFB6                 db    0
.eh_frame:000000000000FFB7                 db    0
.eh_frame:000000000000FFB8                 db    0
.eh_frame:000000000000FFB9                 db  44h ; D
.eh_frame:000000000000FFBA                 db  0Eh
.eh_frame:000000000000FFBB                 db  50h ; P
.eh_frame:000000000000FFBC                 db    2
.eh_frame:000000000000FFBD                 db  7Fh ; 
.eh_frame:000000000000FFBE                 db  0Ah
.eh_frame:000000000000FFBF                 db  0Eh
.eh_frame:000000000000FFC0                 db    8
.eh_frame:000000000000FFC1                 db  41h ; A
.eh_frame:000000000000FFC2                 db  0Bh
.eh_frame:000000000000FFC3                 db    0
.eh_frame:000000000000FFC4                 db  18h
.eh_frame:000000000000FFC5                 db    0
.eh_frame:000000000000FFC6                 db    0
.eh_frame:000000000000FFC7                 db    0
.eh_frame:000000000000FFC8                 db  38h ; 8
.eh_frame:000000000000FFC9                 db  0Dh
.eh_frame:000000000000FFCA                 db    0
.eh_frame:000000000000FFCB                 db    0
.eh_frame:000000000000FFCC                 db 0A4h
.eh_frame:000000000000FFCD                 db  8Bh
.eh_frame:000000000000FFCE                 db 0FFh
.eh_frame:000000000000FFCF                 db 0FFh
.eh_frame:000000000000FFD0                 db  91h
.eh_frame:000000000000FFD1                 db    0
.eh_frame:000000000000FFD2                 db    0
.eh_frame:000000000000FFD3                 db    0
.eh_frame:000000000000FFD4                 db    0
.eh_frame:000000000000FFD5                 db  44h ; D
.eh_frame:000000000000FFD6                 db  0Eh
.eh_frame:000000000000FFD7                 db  50h ; P
.eh_frame:000000000000FFD8                 db    2
.eh_frame:000000000000FFD9                 db  82h
.eh_frame:000000000000FFDA                 db  0Ah
.eh_frame:000000000000FFDB                 db  0Eh
.eh_frame:000000000000FFDC                 db    8
.eh_frame:000000000000FFDD                 db  41h ; A
.eh_frame:000000000000FFDE                 db  0Bh
.eh_frame:000000000000FFDF                 db    0
.eh_frame:000000000000FFE0                 db  10h
.eh_frame:000000000000FFE1                 db    0
.eh_frame:000000000000FFE2                 db    0
.eh_frame:000000000000FFE3                 db    0
.eh_frame:000000000000FFE4                 db  54h ; T
.eh_frame:000000000000FFE5                 db  0Dh
.eh_frame:000000000000FFE6                 db    0
.eh_frame:000000000000FFE7                 db    0
.eh_frame:000000000000FFE8                 db  28h ; (
.eh_frame:000000000000FFE9                 db  8Ch
.eh_frame:000000000000FFEA                 db 0FFh
.eh_frame:000000000000FFEB                 db 0FFh
.eh_frame:000000000000FFEC                 db  0Ch
.eh_frame:000000000000FFED                 db    0
.eh_frame:000000000000FFEE                 db    0
.eh_frame:000000000000FFEF                 db    0
.eh_frame:000000000000FFF0                 db    0
.eh_frame:000000000000FFF1                 db    0
.eh_frame:000000000000FFF2                 db    0
.eh_frame:000000000000FFF3                 db    0
.eh_frame:000000000000FFF4                 db  10h
.eh_frame:000000000000FFF5                 db    0
.eh_frame:000000000000FFF6                 db    0
.eh_frame:000000000000FFF7                 db    0
.eh_frame:000000000000FFF8                 db  68h ; h
.eh_frame:000000000000FFF9                 db  0Dh
.eh_frame:000000000000FFFA                 db    0
.eh_frame:000000000000FFFB                 db    0
.eh_frame:000000000000FFFC                 db  24h ; $
.eh_frame:000000000000FFFD                 db  8Ch
.eh_frame:000000000000FFFE                 db 0FFh
.eh_frame:000000000000FFFF                 db 0FFh
.eh_frame:0000000000010000                 db  17h
.eh_frame:0000000000010001                 db    0
.eh_frame:0000000000010002                 db    0
.eh_frame:0000000000010003                 db    0
.eh_frame:0000000000010004                 db    0
.eh_frame:0000000000010005                 db    0
.eh_frame:0000000000010006                 db    0
.eh_frame:0000000000010007                 db    0
.eh_frame:0000000000010008                 db  10h
.eh_frame:0000000000010009                 db    0
.eh_frame:000000000001000A                 db    0
.eh_frame:000000000001000B                 db    0
.eh_frame:000000000001000C                 db  7Ch ; |
.eh_frame:000000000001000D                 db  0Dh
.eh_frame:000000000001000E                 db    0
.eh_frame:000000000001000F                 db    0
.eh_frame:0000000000010010                 db  30h ; 0
.eh_frame:0000000000010011                 db  8Ch
.eh_frame:0000000000010012                 db 0FFh
.eh_frame:0000000000010013                 db 0FFh
.eh_frame:0000000000010014                 db  13h
.eh_frame:0000000000010015                 db    0
.eh_frame:0000000000010016                 db    0
.eh_frame:0000000000010017                 db    0
.eh_frame:0000000000010018                 db    0
.eh_frame:0000000000010019                 db    0
.eh_frame:000000000001001A                 db    0
.eh_frame:000000000001001B                 db    0
.eh_frame:000000000001001C                 db  10h
.eh_frame:000000000001001D                 db    0
.eh_frame:000000000001001E                 db    0
.eh_frame:000000000001001F                 db    0
.eh_frame:0000000000010020                 db  90h
.eh_frame:0000000000010021                 db  0Dh
.eh_frame:0000000000010022                 db    0
.eh_frame:0000000000010023                 db    0
.eh_frame:0000000000010024                 db  3Ch ; <
.eh_frame:0000000000010025                 db  8Ch
.eh_frame:0000000000010026                 db 0FFh
.eh_frame:0000000000010027                 db 0FFh
.eh_frame:0000000000010028                 db  0Ch
.eh_frame:0000000000010029                 db    0
.eh_frame:000000000001002A                 db    0
.eh_frame:000000000001002B                 db    0
.eh_frame:000000000001002C                 db    0
.eh_frame:000000000001002D                 db    0
.eh_frame:000000000001002E                 db    0
.eh_frame:000000000001002F                 db    0
.eh_frame:0000000000010030                 db  10h
.eh_frame:0000000000010031                 db    0
.eh_frame:0000000000010032                 db    0
.eh_frame:0000000000010033                 db    0
.eh_frame:0000000000010034                 db 0A4h
.eh_frame:0000000000010035                 db  0Dh
.eh_frame:0000000000010036                 db    0
.eh_frame:0000000000010037                 db    0
.eh_frame:0000000000010038                 db  38h ; 8
.eh_frame:0000000000010039                 db  8Ch
.eh_frame:000000000001003A                 db 0FFh
.eh_frame:000000000001003B                 db 0FFh
.eh_frame:000000000001003C                 db  14h
.eh_frame:000000000001003D                 db    0
.eh_frame:000000000001003E                 db    0
.eh_frame:000000000001003F                 db    0
.eh_frame:0000000000010040                 db    0
.eh_frame:0000000000010041                 db    0
.eh_frame:0000000000010042                 db    0
.eh_frame:0000000000010043                 db    0
.eh_frame:0000000000010044                 db  10h
.eh_frame:0000000000010045                 db    0
.eh_frame:0000000000010046                 db    0
.eh_frame:0000000000010047                 db    0
.eh_frame:0000000000010048                 db 0B8h
.eh_frame:0000000000010049                 db  0Dh
.eh_frame:000000000001004A                 db    0
.eh_frame:000000000001004B                 db    0
.eh_frame:000000000001004C                 db  44h ; D
.eh_frame:000000000001004D                 db  8Ch
.eh_frame:000000000001004E                 db 0FFh
.eh_frame:000000000001004F                 db 0FFh
.eh_frame:0000000000010050                 db  13h
.eh_frame:0000000000010051                 db    0
.eh_frame:0000000000010052                 db    0
.eh_frame:0000000000010053                 db    0
.eh_frame:0000000000010054                 db    0
.eh_frame:0000000000010055                 db    0
.eh_frame:0000000000010056                 db    0
.eh_frame:0000000000010057                 db    0
.eh_frame:0000000000010058                 db  14h
.eh_frame:0000000000010059                 db    0
.eh_frame:000000000001005A                 db    0
.eh_frame:000000000001005B                 db    0
.eh_frame:000000000001005C                 db 0CCh
.eh_frame:000000000001005D                 db  0Dh
.eh_frame:000000000001005E                 db    0
.eh_frame:000000000001005F                 db    0
.eh_frame:0000000000010060                 db  50h ; P
.eh_frame:0000000000010061                 db  8Ch
.eh_frame:0000000000010062                 db 0FFh
.eh_frame:0000000000010063                 db 0FFh
.eh_frame:0000000000010064                 db  18h
.eh_frame:0000000000010065                 db    0
.eh_frame:0000000000010066                 db    0
.eh_frame:0000000000010067                 db    0
.eh_frame:0000000000010068                 db    0
.eh_frame:0000000000010069                 db    0
.eh_frame:000000000001006A                 db    0
.eh_frame:000000000001006B                 db    0
.eh_frame:000000000001006C                 db    0
.eh_frame:000000000001006D                 db    0
.eh_frame:000000000001006E                 db    0
.eh_frame:000000000001006F                 db    0
.eh_frame:0000000000010070                 db  4Ch ; L
.eh_frame:0000000000010071                 db    0
.eh_frame:0000000000010072                 db    0
.eh_frame:0000000000010073                 db    0
.eh_frame:0000000000010074                 db 0E4h
.eh_frame:0000000000010075                 db  0Dh
.eh_frame:0000000000010076                 db    0
.eh_frame:0000000000010077                 db    0
.eh_frame:0000000000010078                 db  58h ; X
.eh_frame:0000000000010079                 db  8Ch
.eh_frame:000000000001007A                 db 0FFh
.eh_frame:000000000001007B                 db 0FFh
.eh_frame:000000000001007C                 db 0B5h
.eh_frame:000000000001007D                 db    0
.eh_frame:000000000001007E                 db    0
.eh_frame:000000000001007F                 db    0
.eh_frame:0000000000010080                 db    0
.eh_frame:0000000000010081                 db  42h ; B
.eh_frame:0000000000010082                 db  0Eh
.eh_frame:0000000000010083                 db  10h
.eh_frame:0000000000010084                 db  8Eh
.eh_frame:0000000000010085                 db    2
.eh_frame:0000000000010086                 db  42h ; B
.eh_frame:0000000000010087                 db  0Eh
.eh_frame:0000000000010088                 db  18h
.eh_frame:0000000000010089                 db  8Dh
.eh_frame:000000000001008A                 db    3
.eh_frame:000000000001008B                 db  45h ; E
.eh_frame:000000000001008C                 db  0Eh
.eh_frame:000000000001008D                 db  20h
.eh_frame:000000000001008E                 db  8Ch
.eh_frame:000000000001008F                 db    4
.eh_frame:0000000000010090                 db  41h ; A
.eh_frame:0000000000010091                 db  0Eh
.eh_frame:0000000000010092                 db  28h ; (
.eh_frame:0000000000010093                 db  86h
.eh_frame:0000000000010094                 db    5
.eh_frame:0000000000010095                 db  44h ; D
.eh_frame:0000000000010096                 db  0Eh
.eh_frame:0000000000010097                 db  30h ; 0
.eh_frame:0000000000010098                 db  83h
.eh_frame:0000000000010099                 db    6
.eh_frame:000000000001009A                 db  7Fh ; 
.eh_frame:000000000001009B                 db  0Ah
.eh_frame:000000000001009C                 db  0Eh
.eh_frame:000000000001009D                 db  28h ; (
.eh_frame:000000000001009E                 db  41h ; A
.eh_frame:000000000001009F                 db  0Eh
.eh_frame:00000000000100A0                 db  20h
.eh_frame:00000000000100A1                 db  42h ; B
.eh_frame:00000000000100A2                 db  0Eh
.eh_frame:00000000000100A3                 db  18h
.eh_frame:00000000000100A4                 db  42h ; B
.eh_frame:00000000000100A5                 db  0Eh
.eh_frame:00000000000100A6                 db  10h
.eh_frame:00000000000100A7                 db  42h ; B
.eh_frame:00000000000100A8                 db  0Eh
.eh_frame:00000000000100A9                 db    8
.eh_frame:00000000000100AA                 db  4Ch ; L
.eh_frame:00000000000100AB                 db  0Bh
.eh_frame:00000000000100AC                 db  5Bh ; [
.eh_frame:00000000000100AD                 db  0Ah
.eh_frame:00000000000100AE                 db  0Eh
.eh_frame:00000000000100AF                 db  28h ; (
.eh_frame:00000000000100B0                 db  41h ; A
.eh_frame:00000000000100B1                 db  0Eh
.eh_frame:00000000000100B2                 db  20h
.eh_frame:00000000000100B3                 db  42h ; B
.eh_frame:00000000000100B4                 db  0Eh
.eh_frame:00000000000100B5                 db  18h
.eh_frame:00000000000100B6                 db  42h ; B
.eh_frame:00000000000100B7                 db  0Eh
.eh_frame:00000000000100B8                 db  10h
.eh_frame:00000000000100B9                 db  42h ; B
.eh_frame:00000000000100BA                 db  0Eh
.eh_frame:00000000000100BB                 db    8
.eh_frame:00000000000100BC                 db  45h ; E
.eh_frame:00000000000100BD                 db  0Bh
.eh_frame:00000000000100BE                 db    0
.eh_frame:00000000000100BF                 db    0
.eh_frame:00000000000100C0                 db  14h
.eh_frame:00000000000100C1                 db    0
.eh_frame:00000000000100C2                 db    0
.eh_frame:00000000000100C3                 db    0
.eh_frame:00000000000100C4                 db  34h ; 4
.eh_frame:00000000000100C5                 db  0Eh
.eh_frame:00000000000100C6                 db    0
.eh_frame:00000000000100C7                 db    0
.eh_frame:00000000000100C8                 db 0C8h
.eh_frame:00000000000100C9                 db  8Ch
.eh_frame:00000000000100CA                 db 0FFh
.eh_frame:00000000000100CB                 db 0FFh
.eh_frame:00000000000100CC                 db  0Fh
.eh_frame:00000000000100CD                 db    0
.eh_frame:00000000000100CE                 db    0
.eh_frame:00000000000100CF                 db    0
.eh_frame:00000000000100D0                 db    0
.eh_frame:00000000000100D1                 db    0
.eh_frame:00000000000100D2                 db    0
.eh_frame:00000000000100D3                 db    0
.eh_frame:00000000000100D4                 db    0
.eh_frame:00000000000100D5                 db    0
.eh_frame:00000000000100D6                 db    0
.eh_frame:00000000000100D7                 db    0
.eh_frame:00000000000100D8                 db  10h
.eh_frame:00000000000100D9                 db    1
.eh_frame:00000000000100DA                 db    0
.eh_frame:00000000000100DB                 db    0
.eh_frame:00000000000100DC                 db  4Ch ; L
.eh_frame:00000000000100DD                 db  0Eh
.eh_frame:00000000000100DE                 db    0
.eh_frame:00000000000100DF                 db    0
.eh_frame:00000000000100E0                 db 0C0h
.eh_frame:00000000000100E1                 db  8Ch
.eh_frame:00000000000100E2                 db 0FFh
.eh_frame:00000000000100E3                 db 0FFh
.eh_frame:00000000000100E4                 db  17h
.eh_frame:00000000000100E5                 db    4
.eh_frame:00000000000100E6                 db    0
.eh_frame:00000000000100E7                 db    0
.eh_frame:00000000000100E8                 db    0
.eh_frame:00000000000100E9                 db  42h ; B
.eh_frame:00000000000100EA                 db  0Eh
.eh_frame:00000000000100EB                 db  10h
.eh_frame:00000000000100EC                 db  8Fh
.eh_frame:00000000000100ED                 db    2
.eh_frame:00000000000100EE                 db  42h ; B
.eh_frame:00000000000100EF                 db  0Eh
.eh_frame:00000000000100F0                 db  18h
.eh_frame:00000000000100F1                 db  8Eh
.eh_frame:00000000000100F2                 db    3
.eh_frame:00000000000100F3                 db  42h ; B
.eh_frame:00000000000100F4                 db  0Eh
.eh_frame:00000000000100F5                 db  20h
.eh_frame:00000000000100F6                 db  8Dh
.eh_frame:00000000000100F7                 db    4
.eh_frame:00000000000100F8                 db  42h ; B
.eh_frame:00000000000100F9                 db  0Eh
.eh_frame:00000000000100FA                 db  28h ; (
.eh_frame:00000000000100FB                 db  8Ch
.eh_frame:00000000000100FC                 db    5
.eh_frame:00000000000100FD                 db  44h ; D
.eh_frame:00000000000100FE                 db  0Eh
.eh_frame:00000000000100FF                 db  30h ; 0
.eh_frame:0000000000010100                 db  86h
.eh_frame:0000000000010101                 db    6
.eh_frame:0000000000010102                 db  41h ; A
.eh_frame:0000000000010103                 db  0Eh
.eh_frame:0000000000010104                 db  38h ; 8
.eh_frame:0000000000010105                 db  83h
.eh_frame:0000000000010106                 db    7
.eh_frame:0000000000010107                 db  4Ah ; J
.eh_frame:0000000000010108                 db  0Eh
.eh_frame:0000000000010109                 db  60h ; `
.eh_frame:000000000001010A                 db    2
.eh_frame:000000000001010B                 db 0DDh
.eh_frame:000000000001010C                 db  0Eh
.eh_frame:000000000001010D                 db  68h ; h
.eh_frame:000000000001010E                 db  57h ; W
.eh_frame:000000000001010F                 db  0Eh
.eh_frame:0000000000010110                 db  70h ; p
.eh_frame:0000000000010111                 db  42h ; B
.eh_frame:0000000000010112                 db  0Eh
.eh_frame:0000000000010113                 db  78h ; x
.eh_frame:0000000000010114                 db  42h ; B
.eh_frame:0000000000010115                 db  0Eh
.eh_frame:0000000000010116                 db  80h
.eh_frame:0000000000010117                 db    1
.eh_frame:0000000000010118                 db  42h ; B
.eh_frame:0000000000010119                 db  0Eh
.eh_frame:000000000001011A                 db  88h
.eh_frame:000000000001011B                 db    1
.eh_frame:000000000001011C                 db  42h ; B
.eh_frame:000000000001011D                 db  0Eh
.eh_frame:000000000001011E                 db  90h
.eh_frame:000000000001011F                 db    1
.eh_frame:0000000000010120                 db  53h ; S
.eh_frame:0000000000010121                 db  0Eh
.eh_frame:0000000000010122                 db  60h ; `
.eh_frame:0000000000010123                 db  44h ; D
.eh_frame:0000000000010124                 db  0Ah
.eh_frame:0000000000010125                 db  0Eh
.eh_frame:0000000000010126                 db  38h ; 8
.eh_frame:0000000000010127                 db  41h ; A
.eh_frame:0000000000010128                 db  0Eh
.eh_frame:0000000000010129                 db  30h ; 0
.eh_frame:000000000001012A                 db  41h ; A
.eh_frame:000000000001012B                 db  0Eh
.eh_frame:000000000001012C                 db  28h ; (
.eh_frame:000000000001012D                 db  42h ; B
.eh_frame:000000000001012E                 db  0Eh
.eh_frame:000000000001012F                 db  20h
.eh_frame:0000000000010130                 db  42h ; B
.eh_frame:0000000000010131                 db  0Eh
.eh_frame:0000000000010132                 db  18h
.eh_frame:0000000000010133                 db  42h ; B
.eh_frame:0000000000010134                 db  0Eh
.eh_frame:0000000000010135                 db  10h
.eh_frame:0000000000010136                 db  42h ; B
.eh_frame:0000000000010137                 db  0Eh
.eh_frame:0000000000010138                 db    8
.eh_frame:0000000000010139                 db  44h ; D
.eh_frame:000000000001013A                 db  0Bh
.eh_frame:000000000001013B                 db    2
.eh_frame:000000000001013C                 db  78h ; x
.eh_frame:000000000001013D                 db  0Ah
.eh_frame:000000000001013E                 db  0Eh
.eh_frame:000000000001013F                 db  68h ; h
.eh_frame:0000000000010140                 db  48h ; H
.eh_frame:0000000000010141                 db  0Bh
.eh_frame:0000000000010142                 db  5Ah ; Z
.eh_frame:0000000000010143                 db  0Ah
.eh_frame:0000000000010144                 db  0Eh
.eh_frame:0000000000010145                 db  38h ; 8
.eh_frame:0000000000010146                 db  47h ; G
.eh_frame:0000000000010147                 db  0Eh
.eh_frame:0000000000010148                 db  30h ; 0
.eh_frame:0000000000010149                 db  41h ; A
.eh_frame:000000000001014A                 db  0Eh
.eh_frame:000000000001014B                 db  28h ; (
.eh_frame:000000000001014C                 db  42h ; B
.eh_frame:000000000001014D                 db  0Eh
.eh_frame:000000000001014E                 db  20h
.eh_frame:000000000001014F                 db  42h ; B
.eh_frame:0000000000010150                 db  0Eh
.eh_frame:0000000000010151                 db  18h
.eh_frame:0000000000010152                 db  42h ; B
.eh_frame:0000000000010153                 db  0Eh
.eh_frame:0000000000010154                 db  10h
.eh_frame:0000000000010155                 db  42h ; B
.eh_frame:0000000000010156                 db  0Eh
.eh_frame:0000000000010157                 db    8
.eh_frame:0000000000010158                 db  56h ; V
.eh_frame:0000000000010159                 db  0Bh
.eh_frame:000000000001015A                 db  5Eh ; ^
.eh_frame:000000000001015B                 db  0Ah
.eh_frame:000000000001015C                 db  0Eh
.eh_frame:000000000001015D                 db  38h ; 8
.eh_frame:000000000001015E                 db  52h ; R
.eh_frame:000000000001015F                 db  0Eh
.eh_frame:0000000000010160                 db  30h ; 0
.eh_frame:0000000000010161                 db  41h ; A
.eh_frame:0000000000010162                 db  0Eh
.eh_frame:0000000000010163                 db  28h ; (
.eh_frame:0000000000010164                 db  42h ; B
.eh_frame:0000000000010165                 db  0Eh
.eh_frame:0000000000010166                 db  20h
.eh_frame:0000000000010167                 db  42h ; B
.eh_frame:0000000000010168                 db  0Eh
.eh_frame:0000000000010169                 db  18h
.eh_frame:000000000001016A                 db  42h ; B
.eh_frame:000000000001016B                 db  0Eh
.eh_frame:000000000001016C                 db  10h
.eh_frame:000000000001016D                 db  42h ; B
.eh_frame:000000000001016E                 db  0Eh
.eh_frame:000000000001016F                 db    8
.eh_frame:0000000000010170                 db  4Fh ; O
.eh_frame:0000000000010171                 db  0Bh
.eh_frame:0000000000010172                 db  62h ; b
.eh_frame:0000000000010173                 db  0Ah
.eh_frame:0000000000010174                 db  0Eh
.eh_frame:0000000000010175                 db  38h ; 8
.eh_frame:0000000000010176                 db  50h ; P
.eh_frame:0000000000010177                 db  0Eh
.eh_frame:0000000000010178                 db  30h ; 0
.eh_frame:0000000000010179                 db  41h ; A
.eh_frame:000000000001017A                 db  0Eh
.eh_frame:000000000001017B                 db  28h ; (
.eh_frame:000000000001017C                 db  42h ; B
.eh_frame:000000000001017D                 db  0Eh
.eh_frame:000000000001017E                 db  20h
.eh_frame:000000000001017F                 db  42h ; B
.eh_frame:0000000000010180                 db  0Eh
.eh_frame:0000000000010181                 db  18h
.eh_frame:0000000000010182                 db  42h ; B
.eh_frame:0000000000010183                 db  0Eh
.eh_frame:0000000000010184                 db  10h
.eh_frame:0000000000010185                 db  42h ; B
.eh_frame:0000000000010186                 db  0Eh
.eh_frame:0000000000010187                 db    8
.eh_frame:0000000000010188                 db  55h ; U
.eh_frame:0000000000010189                 db  0Bh
.eh_frame:000000000001018A                 db  66h ; f
.eh_frame:000000000001018B                 db  0Eh
.eh_frame:000000000001018C                 db  68h ; h
.eh_frame:000000000001018D                 db  42h ; B
.eh_frame:000000000001018E                 db  0Eh
.eh_frame:000000000001018F                 db  70h ; p
.eh_frame:0000000000010190                 db  5Ch ; \
.eh_frame:0000000000010191                 db  0Eh
.eh_frame:0000000000010192                 db  68h ; h
.eh_frame:0000000000010193                 db  41h ; A
.eh_frame:0000000000010194                 db  0Eh
.eh_frame:0000000000010195                 db  60h ; `
.eh_frame:0000000000010196                 db  44h ; D
.eh_frame:0000000000010197                 db  0Ah
.eh_frame:0000000000010198                 db  0Eh
.eh_frame:0000000000010199                 db  38h ; 8
.eh_frame:000000000001019A                 db  41h ; A
.eh_frame:000000000001019B                 db  0Eh
.eh_frame:000000000001019C                 db  30h ; 0
.eh_frame:000000000001019D                 db  41h ; A
.eh_frame:000000000001019E                 db  0Eh
.eh_frame:000000000001019F                 db  28h ; (
.eh_frame:00000000000101A0                 db  42h ; B
.eh_frame:00000000000101A1                 db  0Eh
.eh_frame:00000000000101A2                 db  20h
.eh_frame:00000000000101A3                 db  42h ; B
.eh_frame:00000000000101A4                 db  0Eh
.eh_frame:00000000000101A5                 db  18h
.eh_frame:00000000000101A6                 db  42h ; B
.eh_frame:00000000000101A7                 db  0Eh
.eh_frame:00000000000101A8                 db  10h
.eh_frame:00000000000101A9                 db  42h ; B
.eh_frame:00000000000101AA                 db  0Eh
.eh_frame:00000000000101AB                 db    8
.eh_frame:00000000000101AC                 db  45h ; E
.eh_frame:00000000000101AD                 db  0Bh
.eh_frame:00000000000101AE                 db  68h ; h
.eh_frame:00000000000101AF                 db  0Ah
.eh_frame:00000000000101B0                 db  0Eh
.eh_frame:00000000000101B1                 db  68h ; h
.eh_frame:00000000000101B2                 db  48h ; H
.eh_frame:00000000000101B3                 db  0Bh
.eh_frame:00000000000101B4                 db  72h ; r
.eh_frame:00000000000101B5                 db  0Eh
.eh_frame:00000000000101B6                 db  68h ; h
.eh_frame:00000000000101B7                 db  45h ; E
.eh_frame:00000000000101B8                 db  0Eh
.eh_frame:00000000000101B9                 db  70h ; p
.eh_frame:00000000000101BA                 db  42h ; B
.eh_frame:00000000000101BB                 db  0Eh
.eh_frame:00000000000101BC                 db  78h ; x
.eh_frame:00000000000101BD                 db  42h ; B
.eh_frame:00000000000101BE                 db  0Eh
.eh_frame:00000000000101BF                 db  80h
.eh_frame:00000000000101C0                 db    1
.eh_frame:00000000000101C1                 db  5Eh ; ^
.eh_frame:00000000000101C2                 db  0Eh
.eh_frame:00000000000101C3                 db  60h ; `
.eh_frame:00000000000101C4                 db  44h ; D
.eh_frame:00000000000101C5                 db  0Ah
.eh_frame:00000000000101C6                 db  0Eh
.eh_frame:00000000000101C7                 db  38h ; 8
.eh_frame:00000000000101C8                 db  41h ; A
.eh_frame:00000000000101C9                 db  0Eh
.eh_frame:00000000000101CA                 db  30h ; 0
.eh_frame:00000000000101CB                 db  41h ; A
.eh_frame:00000000000101CC                 db  0Eh
.eh_frame:00000000000101CD                 db  28h ; (
.eh_frame:00000000000101CE                 db  42h ; B
.eh_frame:00000000000101CF                 db  0Eh
.eh_frame:00000000000101D0                 db  20h
.eh_frame:00000000000101D1                 db  42h ; B
.eh_frame:00000000000101D2                 db  0Eh
.eh_frame:00000000000101D3                 db  18h
.eh_frame:00000000000101D4                 db  42h ; B
.eh_frame:00000000000101D5                 db  0Eh
.eh_frame:00000000000101D6                 db  10h
.eh_frame:00000000000101D7                 db  42h ; B
.eh_frame:00000000000101D8                 db  0Eh
.eh_frame:00000000000101D9                 db    8
.eh_frame:00000000000101DA                 db  41h ; A
.eh_frame:00000000000101DB                 db  0Bh
.eh_frame:00000000000101DC                 db  79h ; y
.eh_frame:00000000000101DD                 db  0Ah
.eh_frame:00000000000101DE                 db  0Eh
.eh_frame:00000000000101DF                 db  68h ; h
.eh_frame:00000000000101E0                 db  42h ; B
.eh_frame:00000000000101E1                 db  0Eh
.eh_frame:00000000000101E2                 db  70h ; p
.eh_frame:00000000000101E3                 db  42h ; B
.eh_frame:00000000000101E4                 db  0Eh
.eh_frame:00000000000101E5                 db  78h ; x
.eh_frame:00000000000101E6                 db  42h ; B
.eh_frame:00000000000101E7                 db  0Eh
.eh_frame:00000000000101E8                 db  80h
.eh_frame:00000000000101E9                 db    1
.eh_frame:00000000000101EA                 db  51h ; Q
.eh_frame:00000000000101EB                 db  0Bh
.eh_frame:00000000000101EC                 db  10h
.eh_frame:00000000000101ED                 db    0
.eh_frame:00000000000101EE                 db    0
.eh_frame:00000000000101EF                 db    0
.eh_frame:00000000000101F0                 db  60h ; `
.eh_frame:00000000000101F1                 db  0Fh
.eh_frame:00000000000101F2                 db    0
.eh_frame:00000000000101F3                 db    0
.eh_frame:00000000000101F4                 db 0CCh
.eh_frame:00000000000101F5                 db  8Fh
.eh_frame:00000000000101F6                 db 0FFh
.eh_frame:00000000000101F7                 db 0FFh
.eh_frame:00000000000101F8                 db  20h
.eh_frame:00000000000101F9                 db    0
.eh_frame:00000000000101FA                 db    0
.eh_frame:00000000000101FB                 db    0
.eh_frame:00000000000101FC                 db    0
.eh_frame:00000000000101FD                 db    0
.eh_frame:00000000000101FE                 db    0
.eh_frame:00000000000101FF                 db    0
.eh_frame:0000000000010200                 db  18h
.eh_frame:0000000000010201                 db    0
.eh_frame:0000000000010202                 db    0
.eh_frame:0000000000010203                 db    0
.eh_frame:0000000000010204                 db  74h ; t
.eh_frame:0000000000010205                 db  0Fh
.eh_frame:0000000000010206                 db    0
.eh_frame:0000000000010207                 db    0
.eh_frame:0000000000010208                 db 0D8h
.eh_frame:0000000000010209                 db  8Fh
.eh_frame:000000000001020A                 db 0FFh
.eh_frame:000000000001020B                 db 0FFh
.eh_frame:000000000001020C                 db  78h ; x
.eh_frame:000000000001020D                 db    0
.eh_frame:000000000001020E                 db    0
.eh_frame:000000000001020F                 db    0
.eh_frame:0000000000010210                 db    0
.eh_frame:0000000000010211                 db  44h ; D
.eh_frame:0000000000010212                 db  0Eh
.eh_frame:0000000000010213                 db  70h ; p
.eh_frame:0000000000010214                 db    2
.eh_frame:0000000000010215                 db  60h ; `
.eh_frame:0000000000010216                 db  0Ah
.eh_frame:0000000000010217                 db  0Eh
.eh_frame:0000000000010218                 db    8
.eh_frame:0000000000010219                 db  41h ; A
.eh_frame:000000000001021A                 db  0Bh
.eh_frame:000000000001021B                 db    0
.eh_frame:000000000001021C                 db  28h ; (
.eh_frame:000000000001021D                 db    0
.eh_frame:000000000001021E                 db    0
.eh_frame:000000000001021F                 db    0
.eh_frame:0000000000010220                 db  90h
.eh_frame:0000000000010221                 db  0Fh
.eh_frame:0000000000010222                 db    0
.eh_frame:0000000000010223                 db    0
.eh_frame:0000000000010224                 db  3Ch ; <
.eh_frame:0000000000010225                 db  90h
.eh_frame:0000000000010226                 db 0FFh
.eh_frame:0000000000010227                 db 0FFh
.eh_frame:0000000000010228                 db 0D5h
.eh_frame:0000000000010229                 db    0
.eh_frame:000000000001022A                 db    0
.eh_frame:000000000001022B                 db    0
.eh_frame:000000000001022C                 db    0
.eh_frame:000000000001022D                 db  41h ; A
.eh_frame:000000000001022E                 db  0Eh
.eh_frame:000000000001022F                 db  10h
.eh_frame:0000000000010230                 db  86h
.eh_frame:0000000000010231                 db    2
.eh_frame:0000000000010232                 db  41h ; A
.eh_frame:0000000000010233                 db  0Eh
.eh_frame:0000000000010234                 db  18h
.eh_frame:0000000000010235                 db  83h
.eh_frame:0000000000010236                 db    3
.eh_frame:0000000000010237                 db  50h ; P
.eh_frame:0000000000010238                 db  0Eh
.eh_frame:0000000000010239                 db 0D0h
.eh_frame:000000000001023A                 db    1
.eh_frame:000000000001023B                 db    2
.eh_frame:000000000001023C                 db 0ABh
.eh_frame:000000000001023D                 db  0Ah
.eh_frame:000000000001023E                 db  0Eh
.eh_frame:000000000001023F                 db  18h
.eh_frame:0000000000010240                 db  41h ; A
.eh_frame:0000000000010241                 db  0Eh
.eh_frame:0000000000010242                 db  10h
.eh_frame:0000000000010243                 db  41h ; A
.eh_frame:0000000000010244                 db  0Eh
.eh_frame:0000000000010245                 db    8
.eh_frame:0000000000010246                 db  41h ; A
.eh_frame:0000000000010247                 db  0Bh
.eh_frame:0000000000010248                 db  1Ch
.eh_frame:0000000000010249                 db    0
.eh_frame:000000000001024A                 db    0
.eh_frame:000000000001024B                 db    0
.eh_frame:000000000001024C                 db 0BCh
.eh_frame:000000000001024D                 db  0Fh
.eh_frame:000000000001024E                 db    0
.eh_frame:000000000001024F                 db    0
.eh_frame:0000000000010250                 db 0F0h
.eh_frame:0000000000010251                 db  90h
.eh_frame:0000000000010252                 db 0FFh
.eh_frame:0000000000010253                 db 0FFh
.eh_frame:0000000000010254                 db  80h
.eh_frame:0000000000010255                 db    0
.eh_frame:0000000000010256                 db    0
.eh_frame:0000000000010257                 db    0
.eh_frame:0000000000010258                 db    0
.eh_frame:0000000000010259                 db  41h ; A
.eh_frame:000000000001025A                 db  0Eh
.eh_frame:000000000001025B                 db  10h
.eh_frame:000000000001025C                 db  83h
.eh_frame:000000000001025D                 db    2
.eh_frame:000000000001025E                 db    2
.eh_frame:000000000001025F                 db  7Ah ; z
.eh_frame:0000000000010260                 db  0Eh
.eh_frame:0000000000010261                 db    8
.eh_frame:0000000000010262                 db    0
.eh_frame:0000000000010263                 db    0
.eh_frame:0000000000010264                 db    0
.eh_frame:0000000000010265                 db    0
.eh_frame:0000000000010266                 db    0
.eh_frame:0000000000010267                 db    0
.eh_frame:0000000000010268                 db  18h
.eh_frame:0000000000010269                 db    0
.eh_frame:000000000001026A                 db    0
.eh_frame:000000000001026B                 db    0
.eh_frame:000000000001026C                 db 0DCh
.eh_frame:000000000001026D                 db  0Fh
.eh_frame:000000000001026E                 db    0
.eh_frame:000000000001026F                 db    0
.eh_frame:0000000000010270                 db  50h ; P
.eh_frame:0000000000010271                 db  91h
.eh_frame:0000000000010272                 db 0FFh
.eh_frame:0000000000010273                 db 0FFh
.eh_frame:0000000000010274                 db  1Ah
.eh_frame:0000000000010275                 db    0
.eh_frame:0000000000010276                 db    0
.eh_frame:0000000000010277                 db    0
.eh_frame:0000000000010278                 db    0
.eh_frame:0000000000010279                 db  41h ; A
.eh_frame:000000000001027A                 db  0Eh
.eh_frame:000000000001027B                 db  10h
.eh_frame:000000000001027C                 db  83h
.eh_frame:000000000001027D                 db    2
.eh_frame:000000000001027E                 db  53h ; S
.eh_frame:000000000001027F                 db  0Ah
.eh_frame:0000000000010280                 db  0Eh
.eh_frame:0000000000010281                 db    8
.eh_frame:0000000000010282                 db  41h ; A
.eh_frame:0000000000010283                 db  0Bh
.eh_frame:0000000000010284                 db  10h
.eh_frame:0000000000010285                 db    0
.eh_frame:0000000000010286                 db    0
.eh_frame:0000000000010287                 db    0
.eh_frame:0000000000010288                 db 0F8h
.eh_frame:0000000000010289                 db  0Fh
.eh_frame:000000000001028A                 db    0
.eh_frame:000000000001028B                 db    0
.eh_frame:000000000001028C                 db  54h ; T
.eh_frame:000000000001028D                 db  91h
.eh_frame:000000000001028E                 db 0FFh
.eh_frame:000000000001028F                 db 0FFh
.eh_frame:0000000000010290                 db  24h ; $
.eh_frame:0000000000010291                 db    0
.eh_frame:0000000000010292                 db    0
.eh_frame:0000000000010293                 db    0
.eh_frame:0000000000010294                 db    0
.eh_frame:0000000000010295                 db  5Fh ; _
.eh_frame:0000000000010296                 db  0Eh
.eh_frame:0000000000010297                 db  10h
.eh_frame:0000000000010298                 db  10h
.eh_frame:0000000000010299                 db    0
.eh_frame:000000000001029A                 db    0
.eh_frame:000000000001029B                 db    0
.eh_frame:000000000001029C                 db  0Ch
.eh_frame:000000000001029D                 db  10h
.eh_frame:000000000001029E                 db    0
.eh_frame:000000000001029F                 db    0
.eh_frame:00000000000102A0                 db  70h ; p
.eh_frame:00000000000102A1                 db  91h
.eh_frame:00000000000102A2                 db 0FFh
.eh_frame:00000000000102A3                 db 0FFh
.eh_frame:00000000000102A4                 db    2
.eh_frame:00000000000102A5                 db    0
.eh_frame:00000000000102A6                 db    0
.eh_frame:00000000000102A7                 db    0
.eh_frame:00000000000102A8                 db    0
.eh_frame:00000000000102A9                 db    0
.eh_frame:00000000000102AA                 db    0
.eh_frame:00000000000102AB                 db    0
.eh_frame:00000000000102AC                 db  20h
.eh_frame:00000000000102AD                 db    0
.eh_frame:00000000000102AE                 db    0
.eh_frame:00000000000102AF                 db    0
.eh_frame:00000000000102B0                 db  20h
.eh_frame:00000000000102B1                 db  10h
.eh_frame:00000000000102B2                 db    0
.eh_frame:00000000000102B3                 db    0
.eh_frame:00000000000102B4                 db  6Ch ; l
.eh_frame:00000000000102B5                 db  91h
.eh_frame:00000000000102B6                 db 0FFh
.eh_frame:00000000000102B7                 db 0FFh
.eh_frame:00000000000102B8                 db  36h ; 6
.eh_frame:00000000000102B9                 db    0
.eh_frame:00000000000102BA                 db    0
.eh_frame:00000000000102BB                 db    0
.eh_frame:00000000000102BC                 db    0
.eh_frame:00000000000102BD                 db  44h ; D
.eh_frame:00000000000102BE                 db  0Eh
.eh_frame:00000000000102BF                 db  10h
.eh_frame:00000000000102C0                 db  83h
.eh_frame:00000000000102C1                 db    2
.eh_frame:00000000000102C2                 db  5Dh ; ]
.eh_frame:00000000000102C3                 db  0Ah
.eh_frame:00000000000102C4                 db  0Eh
.eh_frame:00000000000102C5                 db    8
.eh_frame:00000000000102C6                 db  47h ; G
.eh_frame:00000000000102C7                 db  0Bh
.eh_frame:00000000000102C8                 db  48h ; H
.eh_frame:00000000000102C9                 db  0Ah
.eh_frame:00000000000102CA                 db  0Eh
.eh_frame:00000000000102CB                 db    8
.eh_frame:00000000000102CC                 db  41h ; A
.eh_frame:00000000000102CD                 db  0Bh
.eh_frame:00000000000102CE                 db    0
.eh_frame:00000000000102CF                 db    0
.eh_frame:00000000000102D0                 db  10h
.eh_frame:00000000000102D1                 db    0
.eh_frame:00000000000102D2                 db    0
.eh_frame:00000000000102D3                 db    0
.eh_frame:00000000000102D4                 db  44h ; D
.eh_frame:00000000000102D5                 db  10h
.eh_frame:00000000000102D6                 db    0
.eh_frame:00000000000102D7                 db    0
.eh_frame:00000000000102D8                 db  88h
.eh_frame:00000000000102D9                 db  91h
.eh_frame:00000000000102DA                 db 0FFh
.eh_frame:00000000000102DB                 db 0FFh
.eh_frame:00000000000102DC                 db  24h ; $
.eh_frame:00000000000102DD                 db    0
.eh_frame:00000000000102DE                 db    0
.eh_frame:00000000000102DF                 db    0
.eh_frame:00000000000102E0                 db    0
.eh_frame:00000000000102E1                 db  5Fh ; _
.eh_frame:00000000000102E2                 db  0Eh
.eh_frame:00000000000102E3                 db  10h
.eh_frame:00000000000102E4                 db  14h
.eh_frame:00000000000102E5                 db    0
.eh_frame:00000000000102E6                 db    0
.eh_frame:00000000000102E7                 db    0
.eh_frame:00000000000102E8                 db  58h ; X
.eh_frame:00000000000102E9                 db  10h
.eh_frame:00000000000102EA                 db    0
.eh_frame:00000000000102EB                 db    0
.eh_frame:00000000000102EC                 db 0A4h
.eh_frame:00000000000102ED                 db  91h
.eh_frame:00000000000102EE                 db 0FFh
.eh_frame:00000000000102EF                 db 0FFh
.eh_frame:00000000000102F0                 db  82h
.eh_frame:00000000000102F1                 db    0
.eh_frame:00000000000102F2                 db    0
.eh_frame:00000000000102F3                 db    0
.eh_frame:00000000000102F4                 db    0
.eh_frame:00000000000102F5                 db    2
.eh_frame:00000000000102F6                 db  5Fh ; _
.eh_frame:00000000000102F7                 db  0Eh
.eh_frame:00000000000102F8                 db  10h
.eh_frame:00000000000102F9                 db  49h ; I
.eh_frame:00000000000102FA                 db  0Eh
.eh_frame:00000000000102FB                 db    8
.eh_frame:00000000000102FC                 db  14h
.eh_frame:00000000000102FD                 db    0
.eh_frame:00000000000102FE                 db    0
.eh_frame:00000000000102FF                 db    0
.eh_frame:0000000000010300                 db  70h ; p
.eh_frame:0000000000010301                 db  10h
.eh_frame:0000000000010302                 db    0
.eh_frame:0000000000010303                 db    0
.eh_frame:0000000000010304                 db  1Ch
.eh_frame:0000000000010305                 db  92h
.eh_frame:0000000000010306                 db 0FFh
.eh_frame:0000000000010307                 db 0FFh
.eh_frame:0000000000010308                 db  4Ah ; J
.eh_frame:0000000000010309                 db    0
.eh_frame:000000000001030A                 db    0
.eh_frame:000000000001030B                 db    0
.eh_frame:000000000001030C                 db    0
.eh_frame:000000000001030D                 db    2
.eh_frame:000000000001030E                 db  45h ; E
.eh_frame:000000000001030F                 db  0Eh
.eh_frame:0000000000010310                 db  10h
.eh_frame:0000000000010311                 db    0
.eh_frame:0000000000010312                 db    0
.eh_frame:0000000000010313                 db    0
.eh_frame:0000000000010314                 db  18h
.eh_frame:0000000000010315                 db    0
.eh_frame:0000000000010316                 db    0
.eh_frame:0000000000010317                 db    0
.eh_frame:0000000000010318                 db  88h
.eh_frame:0000000000010319                 db  10h
.eh_frame:000000000001031A                 db    0
.eh_frame:000000000001031B                 db    0
.eh_frame:000000000001031C                 db  54h ; T
.eh_frame:000000000001031D                 db  92h
.eh_frame:000000000001031E                 db 0FFh
.eh_frame:000000000001031F                 db 0FFh
.eh_frame:0000000000010320                 db  17h
.eh_frame:0000000000010321                 db    0
.eh_frame:0000000000010322                 db    0
.eh_frame:0000000000010323                 db    0
.eh_frame:0000000000010324                 db    0
.eh_frame:0000000000010325                 db  41h ; A
.eh_frame:0000000000010326                 db  0Eh
.eh_frame:0000000000010327                 db  10h
.eh_frame:0000000000010328                 db  83h
.eh_frame:0000000000010329                 db    2
.eh_frame:000000000001032A                 db  51h ; Q
.eh_frame:000000000001032B                 db  0Eh
.eh_frame:000000000001032C                 db    8
.eh_frame:000000000001032D                 db    0
.eh_frame:000000000001032E                 db    0
.eh_frame:000000000001032F                 db    0
.eh_frame:0000000000010330                 db  18h
.eh_frame:0000000000010331                 db    0
.eh_frame:0000000000010332                 db    0
.eh_frame:0000000000010333                 db    0
.eh_frame:0000000000010334                 db 0A4h
.eh_frame:0000000000010335                 db  10h
.eh_frame:0000000000010336                 db    0
.eh_frame:0000000000010337                 db    0
.eh_frame:0000000000010338                 db  58h ; X
.eh_frame:0000000000010339                 db  92h
.eh_frame:000000000001033A                 db 0FFh
.eh_frame:000000000001033B                 db 0FFh
.eh_frame:000000000001033C                 db  2Eh ; .
.eh_frame:000000000001033D                 db    0
.eh_frame:000000000001033E                 db    0
.eh_frame:000000000001033F                 db    0
.eh_frame:0000000000010340                 db    0
.eh_frame:0000000000010341                 db  47h ; G
.eh_frame:0000000000010342                 db  0Eh
.eh_frame:0000000000010343                 db  10h
.eh_frame:0000000000010344                 db  61h ; a
.eh_frame:0000000000010345                 db  0Ah
.eh_frame:0000000000010346                 db  0Eh
.eh_frame:0000000000010347                 db    8
.eh_frame:0000000000010348                 db  41h ; A
.eh_frame:0000000000010349                 db  0Bh
.eh_frame:000000000001034A                 db    0
.eh_frame:000000000001034B                 db    0
.eh_frame:000000000001034C                 db  24h ; $
.eh_frame:000000000001034D                 db    0
.eh_frame:000000000001034E                 db    0
.eh_frame:000000000001034F                 db    0
.eh_frame:0000000000010350                 db 0C0h
.eh_frame:0000000000010351                 db  10h
.eh_frame:0000000000010352                 db    0
.eh_frame:0000000000010353                 db    0
.eh_frame:0000000000010354                 db  6Ch ; l
.eh_frame:0000000000010355                 db  92h
.eh_frame:0000000000010356                 db 0FFh
.eh_frame:0000000000010357                 db 0FFh
.eh_frame:0000000000010358                 db  28h ; (
.eh_frame:0000000000010359                 db    0
.eh_frame:000000000001035A                 db    0
.eh_frame:000000000001035B                 db    0
.eh_frame:000000000001035C                 db    0
.eh_frame:000000000001035D                 db  41h ; A
.eh_frame:000000000001035E                 db  0Eh
.eh_frame:000000000001035F                 db  10h
.eh_frame:0000000000010360                 db  86h
.eh_frame:0000000000010361                 db    2
.eh_frame:0000000000010362                 db  41h ; A
.eh_frame:0000000000010363                 db  0Eh
.eh_frame:0000000000010364                 db  18h
.eh_frame:0000000000010365                 db  83h
.eh_frame:0000000000010366                 db    3
.eh_frame:0000000000010367                 db  4Dh ; M
.eh_frame:0000000000010368                 db  0Eh
.eh_frame:0000000000010369                 db  20h
.eh_frame:000000000001036A                 db  49h ; I
.eh_frame:000000000001036B                 db  0Eh
.eh_frame:000000000001036C                 db  18h
.eh_frame:000000000001036D                 db  47h ; G
.eh_frame:000000000001036E                 db  0Eh
.eh_frame:000000000001036F                 db  10h
.eh_frame:0000000000010370                 db  41h ; A
.eh_frame:0000000000010371                 db  0Eh
.eh_frame:0000000000010372                 db    8
.eh_frame:0000000000010373                 db    0
.eh_frame:0000000000010374                 db  18h
.eh_frame:0000000000010375                 db    0
.eh_frame:0000000000010376                 db    0
.eh_frame:0000000000010377                 db    0
.eh_frame:0000000000010378                 db 0E8h
.eh_frame:0000000000010379                 db  10h
.eh_frame:000000000001037A                 db    0
.eh_frame:000000000001037B                 db    0
.eh_frame:000000000001037C                 db  74h ; t
.eh_frame:000000000001037D                 db  92h
.eh_frame:000000000001037E                 db 0FFh
.eh_frame:000000000001037F                 db 0FFh
.eh_frame:0000000000010380                 db  13h
.eh_frame:0000000000010381                 db    0
.eh_frame:0000000000010382                 db    0
.eh_frame:0000000000010383                 db    0
.eh_frame:0000000000010384                 db    0
.eh_frame:0000000000010385                 db  41h ; A
.eh_frame:0000000000010386                 db  0Eh
.eh_frame:0000000000010387                 db  10h
.eh_frame:0000000000010388                 db  83h
.eh_frame:0000000000010389                 db    2
.eh_frame:000000000001038A                 db  50h ; P
.eh_frame:000000000001038B                 db  0Eh
.eh_frame:000000000001038C                 db    8
.eh_frame:000000000001038D                 db    0
.eh_frame:000000000001038E                 db    0
.eh_frame:000000000001038F                 db    0
.eh_frame:0000000000010390                 db  14h
.eh_frame:0000000000010391                 db    0
.eh_frame:0000000000010392                 db    0
.eh_frame:0000000000010393                 db    0
.eh_frame:0000000000010394                 db    4
.eh_frame:0000000000010395                 db  11h
.eh_frame:0000000000010396                 db    0
.eh_frame:0000000000010397                 db    0
.eh_frame:0000000000010398                 db  78h ; x
.eh_frame:0000000000010399                 db  92h
.eh_frame:000000000001039A                 db 0FFh
.eh_frame:000000000001039B                 db 0FFh
.eh_frame:000000000001039C                 db  35h ; 5
.eh_frame:000000000001039D                 db    0
.eh_frame:000000000001039E                 db    0
.eh_frame:000000000001039F                 db    0
.eh_frame:00000000000103A0                 db    0
.eh_frame:00000000000103A1                 db  4Bh ; K
.eh_frame:00000000000103A2                 db  0Eh
.eh_frame:00000000000103A3                 db  10h
.eh_frame:00000000000103A4                 db    0
.eh_frame:00000000000103A5                 db    0
.eh_frame:00000000000103A6                 db    0
.eh_frame:00000000000103A7                 db    0
.eh_frame:00000000000103A8                 db  4Ch ; L
.eh_frame:00000000000103A9                 db    0
.eh_frame:00000000000103AA                 db    0
.eh_frame:00000000000103AB                 db    0
.eh_frame:00000000000103AC                 db  1Ch
.eh_frame:00000000000103AD                 db  11h
.eh_frame:00000000000103AE                 db    0
.eh_frame:00000000000103AF                 db    0
.eh_frame:00000000000103B0                 db 0A0h
.eh_frame:00000000000103B1                 db  92h
.eh_frame:00000000000103B2                 db 0FFh
.eh_frame:00000000000103B3                 db 0FFh
.eh_frame:00000000000103B4                 db  1Ch
.eh_frame:00000000000103B5                 db    4
.eh_frame:00000000000103B6                 db    0
.eh_frame:00000000000103B7                 db    0
.eh_frame:00000000000103B8                 db    0
.eh_frame:00000000000103B9                 db  42h ; B
.eh_frame:00000000000103BA                 db  0Eh
.eh_frame:00000000000103BB                 db  10h
.eh_frame:00000000000103BC                 db  8Fh
.eh_frame:00000000000103BD                 db    2
.eh_frame:00000000000103BE                 db  42h ; B
.eh_frame:00000000000103BF                 db  0Eh
.eh_frame:00000000000103C0                 db  18h
.eh_frame:00000000000103C1                 db  8Eh
.eh_frame:00000000000103C2                 db    3
.eh_frame:00000000000103C3                 db  42h ; B
.eh_frame:00000000000103C4                 db  0Eh
.eh_frame:00000000000103C5                 db  20h
.eh_frame:00000000000103C6                 db  8Dh
.eh_frame:00000000000103C7                 db    4
.eh_frame:00000000000103C8                 db  42h ; B
.eh_frame:00000000000103C9                 db  0Eh
.eh_frame:00000000000103CA                 db  28h ; (
.eh_frame:00000000000103CB                 db  8Ch
.eh_frame:00000000000103CC                 db    5
.eh_frame:00000000000103CD                 db  41h ; A
.eh_frame:00000000000103CE                 db  0Eh
.eh_frame:00000000000103CF                 db  30h ; 0
.eh_frame:00000000000103D0                 db  86h
.eh_frame:00000000000103D1                 db    6
.eh_frame:00000000000103D2                 db  41h ; A
.eh_frame:00000000000103D3                 db  0Eh
.eh_frame:00000000000103D4                 db  38h ; 8
.eh_frame:00000000000103D5                 db  83h
.eh_frame:00000000000103D6                 db    7
.eh_frame:00000000000103D7                 db  44h ; D
.eh_frame:00000000000103D8                 db  0Eh
.eh_frame:00000000000103D9                 db  60h ; `
.eh_frame:00000000000103DA                 db    2
.eh_frame:00000000000103DB                 db 0E9h
.eh_frame:00000000000103DC                 db  0Ah
.eh_frame:00000000000103DD                 db  0Eh
.eh_frame:00000000000103DE                 db  38h ; 8
.eh_frame:00000000000103DF                 db  41h ; A
.eh_frame:00000000000103E0                 db  0Eh
.eh_frame:00000000000103E1                 db  30h ; 0
.eh_frame:00000000000103E2                 db  41h ; A
.eh_frame:00000000000103E3                 db  0Eh
.eh_frame:00000000000103E4                 db  28h ; (
.eh_frame:00000000000103E5                 db  42h ; B
.eh_frame:00000000000103E6                 db  0Eh
.eh_frame:00000000000103E7                 db  20h
.eh_frame:00000000000103E8                 db  42h ; B
.eh_frame:00000000000103E9                 db  0Eh
.eh_frame:00000000000103EA                 db  18h
.eh_frame:00000000000103EB                 db  42h ; B
.eh_frame:00000000000103EC                 db  0Eh
.eh_frame:00000000000103ED                 db  10h
.eh_frame:00000000000103EE                 db  42h ; B
.eh_frame:00000000000103EF                 db  0Eh
.eh_frame:00000000000103F0                 db    8
.eh_frame:00000000000103F1                 db  47h ; G
.eh_frame:00000000000103F2                 db  0Bh
.eh_frame:00000000000103F3                 db    0
.eh_frame:00000000000103F4                 db    0
.eh_frame:00000000000103F5                 db    0
.eh_frame:00000000000103F6                 db    0
.eh_frame:00000000000103F7                 db    0
.eh_frame:00000000000103F8                 db  48h ; H
.eh_frame:00000000000103F9                 db    0
.eh_frame:00000000000103FA                 db    0
.eh_frame:00000000000103FB                 db    0
.eh_frame:00000000000103FC                 db  6Ch ; l
.eh_frame:00000000000103FD                 db  11h
.eh_frame:00000000000103FE                 db    0
.eh_frame:00000000000103FF                 db    0
.eh_frame:0000000000010400                 db  70h ; p
.eh_frame:0000000000010401                 db  96h
.eh_frame:0000000000010402                 db 0FFh
.eh_frame:0000000000010403                 db 0FFh
.eh_frame:0000000000010404                 db  43h ; C
.eh_frame:0000000000010405                 db    1
.eh_frame:0000000000010406                 db    0
.eh_frame:0000000000010407                 db    0
.eh_frame:0000000000010408                 db    0
.eh_frame:0000000000010409                 db  42h ; B
.eh_frame:000000000001040A                 db  0Eh
.eh_frame:000000000001040B                 db  10h
.eh_frame:000000000001040C                 db  8Fh
.eh_frame:000000000001040D                 db    2
.eh_frame:000000000001040E                 db  42h ; B
.eh_frame:000000000001040F                 db  0Eh
.eh_frame:0000000000010410                 db  18h
.eh_frame:0000000000010411                 db  8Eh
.eh_frame:0000000000010412                 db    3
.eh_frame:0000000000010413                 db  42h ; B
.eh_frame:0000000000010414                 db  0Eh
.eh_frame:0000000000010415                 db  20h
.eh_frame:0000000000010416                 db  8Dh
.eh_frame:0000000000010417                 db    4
.eh_frame:0000000000010418                 db  42h ; B
.eh_frame:0000000000010419                 db  0Eh
.eh_frame:000000000001041A                 db  28h ; (
.eh_frame:000000000001041B                 db  8Ch
.eh_frame:000000000001041C                 db    5
.eh_frame:000000000001041D                 db  41h ; A
.eh_frame:000000000001041E                 db  0Eh
.eh_frame:000000000001041F                 db  30h ; 0
.eh_frame:0000000000010420                 db  86h
.eh_frame:0000000000010421                 db    6
.eh_frame:0000000000010422                 db  41h ; A
.eh_frame:0000000000010423                 db  0Eh
.eh_frame:0000000000010424                 db  38h ; 8
.eh_frame:0000000000010425                 db  83h
.eh_frame:0000000000010426                 db    7
.eh_frame:0000000000010427                 db  44h ; D
.eh_frame:0000000000010428                 db  0Eh
.eh_frame:0000000000010429                 db  60h ; `
.eh_frame:000000000001042A                 db    2
.eh_frame:000000000001042B                 db 0FCh
.eh_frame:000000000001042C                 db  0Ah
.eh_frame:000000000001042D                 db  0Eh
.eh_frame:000000000001042E                 db  38h ; 8
.eh_frame:000000000001042F                 db  41h ; A
.eh_frame:0000000000010430                 db  0Eh
.eh_frame:0000000000010431                 db  30h ; 0
.eh_frame:0000000000010432                 db  41h ; A
.eh_frame:0000000000010433                 db  0Eh
.eh_frame:0000000000010434                 db  28h ; (
.eh_frame:0000000000010435                 db  42h ; B
.eh_frame:0000000000010436                 db  0Eh
.eh_frame:0000000000010437                 db  20h
.eh_frame:0000000000010438                 db  42h ; B
.eh_frame:0000000000010439                 db  0Eh
.eh_frame:000000000001043A                 db  18h
.eh_frame:000000000001043B                 db  42h ; B
.eh_frame:000000000001043C                 db  0Eh
.eh_frame:000000000001043D                 db  10h
.eh_frame:000000000001043E                 db  42h ; B
.eh_frame:000000000001043F                 db  0Eh
.eh_frame:0000000000010440                 db    8
.eh_frame:0000000000010441                 db  41h ; A
.eh_frame:0000000000010442                 db  0Bh
.eh_frame:0000000000010443                 db    0
.eh_frame:0000000000010444                 db  18h
.eh_frame:0000000000010445                 db    0
.eh_frame:0000000000010446                 db    0
.eh_frame:0000000000010447                 db    0
.eh_frame:0000000000010448                 db 0B8h
.eh_frame:0000000000010449                 db  11h
.eh_frame:000000000001044A                 db    0
.eh_frame:000000000001044B                 db    0
.eh_frame:000000000001044C                 db  74h ; t
.eh_frame:000000000001044D                 db  97h
.eh_frame:000000000001044E                 db 0FFh
.eh_frame:000000000001044F                 db 0FFh
.eh_frame:0000000000010450                 db 0A4h
.eh_frame:0000000000010451                 db    0
.eh_frame:0000000000010452                 db    0
.eh_frame:0000000000010453                 db    0
.eh_frame:0000000000010454                 db    0
.eh_frame:0000000000010455                 db  44h ; D
.eh_frame:0000000000010456                 db  0Eh
.eh_frame:0000000000010457                 db  20h
.eh_frame:0000000000010458                 db    2
.eh_frame:0000000000010459                 db  7Eh ; ~
.eh_frame:000000000001045A                 db  0Ah
.eh_frame:000000000001045B                 db  0Eh
.eh_frame:000000000001045C                 db    8
.eh_frame:000000000001045D                 db  46h ; F
.eh_frame:000000000001045E                 db  0Bh
.eh_frame:000000000001045F                 db    0
.eh_frame:0000000000010460                 db  34h ; 4
.eh_frame:0000000000010461                 db    0
.eh_frame:0000000000010462                 db    0
.eh_frame:0000000000010463                 db    0
.eh_frame:0000000000010464                 db 0D4h
.eh_frame:0000000000010465                 db  11h
.eh_frame:0000000000010466                 db    0
.eh_frame:0000000000010467                 db    0
.eh_frame:0000000000010468                 db    8
.eh_frame:0000000000010469                 db  98h
.eh_frame:000000000001046A                 db 0FFh
.eh_frame:000000000001046B                 db 0FFh
.eh_frame:000000000001046C                 db  7Bh ; {
.eh_frame:000000000001046D                 db    0
.eh_frame:000000000001046E                 db    0
.eh_frame:000000000001046F                 db    0
.eh_frame:0000000000010470                 db    0
.eh_frame:0000000000010471                 db  42h ; B
.eh_frame:0000000000010472                 db  0Eh
.eh_frame:0000000000010473                 db  10h
.eh_frame:0000000000010474                 db  8Ch
.eh_frame:0000000000010475                 db    2
.eh_frame:0000000000010476                 db  41h ; A
.eh_frame:0000000000010477                 db  0Eh
.eh_frame:0000000000010478                 db  18h
.eh_frame:0000000000010479                 db  86h
.eh_frame:000000000001047A                 db    3
.eh_frame:000000000001047B                 db  41h ; A
.eh_frame:000000000001047C                 db  0Eh
.eh_frame:000000000001047D                 db  20h
.eh_frame:000000000001047E                 db  83h
.eh_frame:000000000001047F                 db    4
.eh_frame:0000000000010480                 db  7Dh ; }
.eh_frame:0000000000010481                 db  0Ah
.eh_frame:0000000000010482                 db  0Eh
.eh_frame:0000000000010483                 db  18h
.eh_frame:0000000000010484                 db  41h ; A
.eh_frame:0000000000010485                 db  0Eh
.eh_frame:0000000000010486                 db  10h
.eh_frame:0000000000010487                 db  42h ; B
.eh_frame:0000000000010488                 db  0Eh
.eh_frame:0000000000010489                 db    8
.eh_frame:000000000001048A                 db  44h ; D
.eh_frame:000000000001048B                 db  0Bh
.eh_frame:000000000001048C                 db  60h ; `
.eh_frame:000000000001048D                 db  0Ah
.eh_frame:000000000001048E                 db  0Eh
.eh_frame:000000000001048F                 db  18h
.eh_frame:0000000000010490                 db  41h ; A
.eh_frame:0000000000010491                 db  0Eh
.eh_frame:0000000000010492                 db  10h
.eh_frame:0000000000010493                 db  42h ; B
.eh_frame:0000000000010494                 db  0Eh
.eh_frame:0000000000010495                 db    8
.eh_frame:0000000000010496                 db  45h ; E
.eh_frame:0000000000010497                 db  0Bh
.eh_frame:0000000000010498                 db  34h ; 4
.eh_frame:0000000000010499                 db    0
.eh_frame:000000000001049A                 db    0
.eh_frame:000000000001049B                 db    0
.eh_frame:000000000001049C                 db  0Ch
.eh_frame:000000000001049D                 db  12h
.eh_frame:000000000001049E                 db    0
.eh_frame:000000000001049F                 db    0
.eh_frame:00000000000104A0                 db  50h ; P
.eh_frame:00000000000104A1                 db  98h
.eh_frame:00000000000104A2                 db 0FFh
.eh_frame:00000000000104A3                 db 0FFh
.eh_frame:00000000000104A4                 db  7Eh ; ~
.eh_frame:00000000000104A5                 db    2
.eh_frame:00000000000104A6                 db    0
.eh_frame:00000000000104A7                 db    0
.eh_frame:00000000000104A8                 db    0
.eh_frame:00000000000104A9                 db  42h ; B
.eh_frame:00000000000104AA                 db  0Eh
.eh_frame:00000000000104AB                 db  10h
.eh_frame:00000000000104AC                 db  8Ch
.eh_frame:00000000000104AD                 db    2
.eh_frame:00000000000104AE                 db  41h ; A
.eh_frame:00000000000104AF                 db  0Eh
.eh_frame:00000000000104B0                 db  18h
.eh_frame:00000000000104B1                 db  86h
.eh_frame:00000000000104B2                 db    3
.eh_frame:00000000000104B3                 db  43h ; C
.eh_frame:00000000000104B4                 db  0Eh
.eh_frame:00000000000104B5                 db  20h
.eh_frame:00000000000104B6                 db  83h
.eh_frame:00000000000104B7                 db    4
.eh_frame:00000000000104B8                 db  44h ; D
.eh_frame:00000000000104B9                 db  0Eh
.eh_frame:00000000000104BA                 db  70h ; p
.eh_frame:00000000000104BB                 db    2
.eh_frame:00000000000104BC                 db 0F0h
.eh_frame:00000000000104BD                 db  0Ah
.eh_frame:00000000000104BE                 db  0Eh
.eh_frame:00000000000104BF                 db  20h
.eh_frame:00000000000104C0                 db  41h ; A
.eh_frame:00000000000104C1                 db  0Eh
.eh_frame:00000000000104C2                 db  18h
.eh_frame:00000000000104C3                 db  41h ; A
.eh_frame:00000000000104C4                 db  0Eh
.eh_frame:00000000000104C5                 db  10h
.eh_frame:00000000000104C6                 db  42h ; B
.eh_frame:00000000000104C7                 db  0Eh
.eh_frame:00000000000104C8                 db    8
.eh_frame:00000000000104C9                 db  42h ; B
.eh_frame:00000000000104CA                 db  0Bh
.eh_frame:00000000000104CB                 db    0
.eh_frame:00000000000104CC                 db    0
.eh_frame:00000000000104CD                 db    0
.eh_frame:00000000000104CE                 db    0
.eh_frame:00000000000104CF                 db    0
.eh_frame:00000000000104D0                 db  1Ch
.eh_frame:00000000000104D1                 db    0
.eh_frame:00000000000104D2                 db    0
.eh_frame:00000000000104D3                 db    0
.eh_frame:00000000000104D4                 db  44h ; D
.eh_frame:00000000000104D5                 db  12h
.eh_frame:00000000000104D6                 db    0
.eh_frame:00000000000104D7                 db    0
.eh_frame:00000000000104D8                 db  98h
.eh_frame:00000000000104D9                 db  9Ah
.eh_frame:00000000000104DA                 db 0FFh
.eh_frame:00000000000104DB                 db 0FFh
.eh_frame:00000000000104DC                 db  40h ; @
.eh_frame:00000000000104DD                 db    0
.eh_frame:00000000000104DE                 db    0
.eh_frame:00000000000104DF                 db    0
.eh_frame:00000000000104E0                 db    0
.eh_frame:00000000000104E1                 db  44h ; D
.eh_frame:00000000000104E2                 db  0Eh
.eh_frame:00000000000104E3                 db  10h
.eh_frame:00000000000104E4                 db  83h
.eh_frame:00000000000104E5                 db    2
.eh_frame:00000000000104E6                 db  5Ah ; Z
.eh_frame:00000000000104E7                 db  0Ah
.eh_frame:00000000000104E8                 db  0Eh
.eh_frame:00000000000104E9                 db    8
.eh_frame:00000000000104EA                 db  4Ah ; J
.eh_frame:00000000000104EB                 db  0Bh
.eh_frame:00000000000104EC                 db  53h ; S
.eh_frame:00000000000104ED                 db  0Eh
.eh_frame:00000000000104EE                 db    8
.eh_frame:00000000000104EF                 db    0
.eh_frame:00000000000104F0                 db  2Ch ; ,
.eh_frame:00000000000104F1                 db    0
.eh_frame:00000000000104F2                 db    0
.eh_frame:00000000000104F3                 db    0
.eh_frame:00000000000104F4                 db  64h ; d
.eh_frame:00000000000104F5                 db  12h
.eh_frame:00000000000104F6                 db    0
.eh_frame:00000000000104F7                 db    0
.eh_frame:00000000000104F8                 db 0B8h
.eh_frame:00000000000104F9                 db  9Ah
.eh_frame:00000000000104FA                 db 0FFh
.eh_frame:00000000000104FB                 db 0FFh
.eh_frame:00000000000104FC                 db  57h ; W
.eh_frame:00000000000104FD                 db    0
.eh_frame:00000000000104FE                 db    0
.eh_frame:00000000000104FF                 db    0
.eh_frame:0000000000010500                 db    0
.eh_frame:0000000000010501                 db  63h ; c
.eh_frame:0000000000010502                 db  0Eh
.eh_frame:0000000000010503                 db  10h
.eh_frame:0000000000010504                 db  8Ch
.eh_frame:0000000000010505                 db    2
.eh_frame:0000000000010506                 db  41h ; A
.eh_frame:0000000000010507                 db  0Eh
.eh_frame:0000000000010508                 db  18h
.eh_frame:0000000000010509                 db  86h
.eh_frame:000000000001050A                 db    3
.eh_frame:000000000001050B                 db  44h ; D
.eh_frame:000000000001050C                 db  0Eh
.eh_frame:000000000001050D                 db  20h
.eh_frame:000000000001050E                 db  83h
.eh_frame:000000000001050F                 db    4
.eh_frame:0000000000010510                 db  6Bh ; k
.eh_frame:0000000000010511                 db  0Eh
.eh_frame:0000000000010512                 db  18h
.eh_frame:0000000000010513                 db  41h ; A
.eh_frame:0000000000010514                 db  0Eh
.eh_frame:0000000000010515                 db  10h
.eh_frame:0000000000010516                 db  42h ; B
.eh_frame:0000000000010517                 db  0Eh
.eh_frame:0000000000010518                 db    8
.eh_frame:0000000000010519                 db    0
.eh_frame:000000000001051A                 db    0
.eh_frame:000000000001051B                 db    0
.eh_frame:000000000001051C                 db    0
.eh_frame:000000000001051D                 db    0
.eh_frame:000000000001051E                 db    0
.eh_frame:000000000001051F                 db    0
.eh_frame:0000000000010520                 db  3Ch ; <
.eh_frame:0000000000010521                 db    0
.eh_frame:0000000000010522                 db    0
.eh_frame:0000000000010523                 db    0
.eh_frame:0000000000010524                 db  94h
.eh_frame:0000000000010525                 db  12h
.eh_frame:0000000000010526                 db    0
.eh_frame:0000000000010527                 db    0
.eh_frame:0000000000010528                 db 0E8h
.eh_frame:0000000000010529                 db  9Ah
.eh_frame:000000000001052A                 db 0FFh
.eh_frame:000000000001052B                 db 0FFh
.eh_frame:000000000001052C                 db  83h
.eh_frame:000000000001052D                 db    0
.eh_frame:000000000001052E                 db    0
.eh_frame:000000000001052F                 db    0
.eh_frame:0000000000010530                 db    0
.eh_frame:0000000000010531                 db  42h ; B
.eh_frame:0000000000010532                 db  0Eh
.eh_frame:0000000000010533                 db  10h
.eh_frame:0000000000010534                 db  8Dh
.eh_frame:0000000000010535                 db    2
.eh_frame:0000000000010536                 db  42h ; B
.eh_frame:0000000000010537                 db  0Eh
.eh_frame:0000000000010538                 db  18h
.eh_frame:0000000000010539                 db  8Ch
.eh_frame:000000000001053A                 db    3
.eh_frame:000000000001053B                 db  44h ; D
.eh_frame:000000000001053C                 db  0Eh
.eh_frame:000000000001053D                 db  20h
.eh_frame:000000000001053E                 db  86h
.eh_frame:000000000001053F                 db    4
.eh_frame:0000000000010540                 db  41h ; A
.eh_frame:0000000000010541                 db  0Eh
.eh_frame:0000000000010542                 db  28h ; (
.eh_frame:0000000000010543                 db  83h
.eh_frame:0000000000010544                 db    5
.eh_frame:0000000000010545                 db  4Ah ; J
.eh_frame:0000000000010546                 db  0Eh
.eh_frame:0000000000010547                 db  40h ; @
.eh_frame:0000000000010548                 db    2
.eh_frame:0000000000010549                 db  64h ; d
.eh_frame:000000000001054A                 db  0Ah
.eh_frame:000000000001054B                 db  0Eh
.eh_frame:000000000001054C                 db  28h ; (
.eh_frame:000000000001054D                 db  41h ; A
.eh_frame:000000000001054E                 db  0Eh
.eh_frame:000000000001054F                 db  20h
.eh_frame:0000000000010550                 db  41h ; A
.eh_frame:0000000000010551                 db  0Eh
.eh_frame:0000000000010552                 db  18h
.eh_frame:0000000000010553                 db  42h ; B
.eh_frame:0000000000010554                 db  0Eh
.eh_frame:0000000000010555                 db  10h
.eh_frame:0000000000010556                 db  42h ; B
.eh_frame:0000000000010557                 db  0Eh
.eh_frame:0000000000010558                 db    8
.eh_frame:0000000000010559                 db  41h ; A
.eh_frame:000000000001055A                 db  0Bh
.eh_frame:000000000001055B                 db    0
.eh_frame:000000000001055C                 db    0
.eh_frame:000000000001055D                 db    0
.eh_frame:000000000001055E                 db    0
.eh_frame:000000000001055F                 db    0
.eh_frame:0000000000010560                 db  24h ; $
.eh_frame:0000000000010561                 db    0
.eh_frame:0000000000010562                 db    0
.eh_frame:0000000000010563                 db    0
.eh_frame:0000000000010564                 db 0D4h
.eh_frame:0000000000010565                 db  12h
.eh_frame:0000000000010566                 db    0
.eh_frame:0000000000010567                 db    0
.eh_frame:0000000000010568                 db  38h ; 8
.eh_frame:0000000000010569                 db  9Bh
.eh_frame:000000000001056A                 db 0FFh
.eh_frame:000000000001056B                 db 0FFh
.eh_frame:000000000001056C                 db  7Eh ; ~
.eh_frame:000000000001056D                 db    0
.eh_frame:000000000001056E                 db    0
.eh_frame:000000000001056F                 db    0
.eh_frame:0000000000010570                 db    0
.eh_frame:0000000000010571                 db  41h ; A
.eh_frame:0000000000010572                 db  0Eh
.eh_frame:0000000000010573                 db  10h
.eh_frame:0000000000010574                 db  83h
.eh_frame:0000000000010575                 db    2
.eh_frame:0000000000010576                 db  4Ch ; L
.eh_frame:0000000000010577                 db  0Eh
.eh_frame:0000000000010578                 db  20h
.eh_frame:0000000000010579                 db    2
.eh_frame:000000000001057A                 db  49h ; I
.eh_frame:000000000001057B                 db  0Ah
.eh_frame:000000000001057C                 db  0Eh
.eh_frame:000000000001057D                 db  10h
.eh_frame:000000000001057E                 db  41h ; A
.eh_frame:000000000001057F                 db  0Eh
.eh_frame:0000000000010580                 db    8
.eh_frame:0000000000010581                 db  41h ; A
.eh_frame:0000000000010582                 db  0Bh
.eh_frame:0000000000010583                 db    0
.eh_frame:0000000000010584                 db    0
.eh_frame:0000000000010585                 db    0
.eh_frame:0000000000010586                 db    0
.eh_frame:0000000000010587                 db    0
.eh_frame:0000000000010588                 db  10h
.eh_frame:0000000000010589                 db    0
.eh_frame:000000000001058A                 db    0
.eh_frame:000000000001058B                 db    0
.eh_frame:000000000001058C                 db 0FCh
.eh_frame:000000000001058D                 db  12h
.eh_frame:000000000001058E                 db    0
.eh_frame:000000000001058F                 db    0
.eh_frame:0000000000010590                 db  90h
.eh_frame:0000000000010591                 db  9Bh
.eh_frame:0000000000010592                 db 0FFh
.eh_frame:0000000000010593                 db 0FFh
.eh_frame:0000000000010594                 db  0Ah
.eh_frame:0000000000010595                 db    0
.eh_frame:0000000000010596                 db    0
.eh_frame:0000000000010597                 db    0
.eh_frame:0000000000010598                 db    0
.eh_frame:0000000000010599                 db    0
.eh_frame:000000000001059A                 db    0
.eh_frame:000000000001059B                 db    0
.eh_frame:000000000001059C                 db  48h ; H
.eh_frame:000000000001059D                 db    0
.eh_frame:000000000001059E                 db    0
.eh_frame:000000000001059F                 db    0
.eh_frame:00000000000105A0                 db  10h
.eh_frame:00000000000105A1                 db  13h
.eh_frame:00000000000105A2                 db    0
.eh_frame:00000000000105A3                 db    0
.eh_frame:00000000000105A4                 db  8Ch
.eh_frame:00000000000105A5                 db  9Bh
.eh_frame:00000000000105A6                 db 0FFh
.eh_frame:00000000000105A7                 db 0FFh
.eh_frame:00000000000105A8                 db  16h
.eh_frame:00000000000105A9                 db    1
.eh_frame:00000000000105AA                 db    0
.eh_frame:00000000000105AB                 db    0
.eh_frame:00000000000105AC                 db    0
.eh_frame:00000000000105AD                 db  42h ; B
.eh_frame:00000000000105AE                 db  0Eh
.eh_frame:00000000000105AF                 db  10h
.eh_frame:00000000000105B0                 db  8Fh
.eh_frame:00000000000105B1                 db    2
.eh_frame:00000000000105B2                 db  42h ; B
.eh_frame:00000000000105B3                 db  0Eh
.eh_frame:00000000000105B4                 db  18h
.eh_frame:00000000000105B5                 db  8Eh
.eh_frame:00000000000105B6                 db    3
.eh_frame:00000000000105B7                 db  45h ; E
.eh_frame:00000000000105B8                 db  0Eh
.eh_frame:00000000000105B9                 db  20h
.eh_frame:00000000000105BA                 db  8Dh
.eh_frame:00000000000105BB                 db    4
.eh_frame:00000000000105BC                 db  42h ; B
.eh_frame:00000000000105BD                 db  0Eh
.eh_frame:00000000000105BE                 db  28h ; (
.eh_frame:00000000000105BF                 db  8Ch
.eh_frame:00000000000105C0                 db    5
.eh_frame:00000000000105C1                 db  44h ; D
.eh_frame:00000000000105C2                 db  0Eh
.eh_frame:00000000000105C3                 db  30h ; 0
.eh_frame:00000000000105C4                 db  86h
.eh_frame:00000000000105C5                 db    6
.eh_frame:00000000000105C6                 db  41h ; A
.eh_frame:00000000000105C7                 db  0Eh
.eh_frame:00000000000105C8                 db  38h ; 8
.eh_frame:00000000000105C9                 db  83h
.eh_frame:00000000000105CA                 db    7
.eh_frame:00000000000105CB                 db  47h ; G
.eh_frame:00000000000105CC                 db  0Eh
.eh_frame:00000000000105CD                 db  60h ; `
.eh_frame:00000000000105CE                 db    2
.eh_frame:00000000000105CF                 db 0DEh
.eh_frame:00000000000105D0                 db  0Ah
.eh_frame:00000000000105D1                 db  0Eh
.eh_frame:00000000000105D2                 db  38h ; 8
.eh_frame:00000000000105D3                 db  41h ; A
.eh_frame:00000000000105D4                 db  0Eh
.eh_frame:00000000000105D5                 db  30h ; 0
.eh_frame:00000000000105D6                 db  41h ; A
.eh_frame:00000000000105D7                 db  0Eh
.eh_frame:00000000000105D8                 db  28h ; (
.eh_frame:00000000000105D9                 db  42h ; B
.eh_frame:00000000000105DA                 db  0Eh
.eh_frame:00000000000105DB                 db  20h
.eh_frame:00000000000105DC                 db  42h ; B
.eh_frame:00000000000105DD                 db  0Eh
.eh_frame:00000000000105DE                 db  18h
.eh_frame:00000000000105DF                 db  42h ; B
.eh_frame:00000000000105E0                 db  0Eh
.eh_frame:00000000000105E1                 db  10h
.eh_frame:00000000000105E2                 db  42h ; B
.eh_frame:00000000000105E3                 db  0Eh
.eh_frame:00000000000105E4                 db    8
.eh_frame:00000000000105E5                 db  41h ; A
.eh_frame:00000000000105E6                 db  0Bh
.eh_frame:00000000000105E7                 db    0
.eh_frame:00000000000105E8                 db  28h ; (
.eh_frame:00000000000105E9                 db    0
.eh_frame:00000000000105EA                 db    0
.eh_frame:00000000000105EB                 db    0
.eh_frame:00000000000105EC                 db  5Ch ; \
.eh_frame:00000000000105ED                 db  13h
.eh_frame:00000000000105EE                 db    0
.eh_frame:00000000000105EF                 db    0
.eh_frame:00000000000105F0                 db  60h ; `
.eh_frame:00000000000105F1                 db  9Ch
.eh_frame:00000000000105F2                 db 0FFh
.eh_frame:00000000000105F3                 db 0FFh
.eh_frame:00000000000105F4                 db  73h ; s
.eh_frame:00000000000105F5                 db    0
.eh_frame:00000000000105F6                 db    0
.eh_frame:00000000000105F7                 db    0
.eh_frame:00000000000105F8                 db    0
.eh_frame:00000000000105F9                 db  46h ; F
.eh_frame:00000000000105FA                 db  0Eh
.eh_frame:00000000000105FB                 db  10h
.eh_frame:00000000000105FC                 db  8Ch
.eh_frame:00000000000105FD                 db    2
.eh_frame:00000000000105FE                 db  46h ; F
.eh_frame:00000000000105FF                 db  0Eh
.eh_frame:0000000000010600                 db  18h
.eh_frame:0000000000010601                 db  86h
.eh_frame:0000000000010602                 db    3
.eh_frame:0000000000010603                 db  44h ; D
.eh_frame:0000000000010604                 db  0Eh
.eh_frame:0000000000010605                 db  20h
.eh_frame:0000000000010606                 db  83h
.eh_frame:0000000000010607                 db    4
.eh_frame:0000000000010608                 db  7Fh ; 
.eh_frame:0000000000010609                 db  0Ah
.eh_frame:000000000001060A                 db  0Eh
.eh_frame:000000000001060B                 db  18h
.eh_frame:000000000001060C                 db  41h ; A
.eh_frame:000000000001060D                 db  0Eh
.eh_frame:000000000001060E                 db  10h
.eh_frame:000000000001060F                 db  42h ; B
.eh_frame:0000000000010610                 db  0Eh
.eh_frame:0000000000010611                 db    8
.eh_frame:0000000000010612                 db  4Eh ; N
.eh_frame:0000000000010613                 db  0Bh
.eh_frame:0000000000010614                 db  5Ch ; \
.eh_frame:0000000000010615                 db    0
.eh_frame:0000000000010616                 db    0
.eh_frame:0000000000010617                 db    0
.eh_frame:0000000000010618                 db  88h
.eh_frame:0000000000010619                 db  13h
.eh_frame:000000000001061A                 db    0
.eh_frame:000000000001061B                 db    0
.eh_frame:000000000001061C                 db 0B4h
.eh_frame:000000000001061D                 db  9Ch
.eh_frame:000000000001061E                 db 0FFh
.eh_frame:000000000001061F                 db 0FFh
.eh_frame:0000000000010620                 db  20h
.eh_frame:0000000000010621                 db    1
.eh_frame:0000000000010622                 db    0
.eh_frame:0000000000010623                 db    0
.eh_frame:0000000000010624                 db    0
.eh_frame:0000000000010625                 db  42h ; B
.eh_frame:0000000000010626                 db  0Eh
.eh_frame:0000000000010627                 db  10h
.eh_frame:0000000000010628                 db  8Fh
.eh_frame:0000000000010629                 db    2
.eh_frame:000000000001062A                 db  42h ; B
.eh_frame:000000000001062B                 db  0Eh
.eh_frame:000000000001062C                 db  18h
.eh_frame:000000000001062D                 db  8Eh
.eh_frame:000000000001062E                 db    3
.eh_frame:000000000001062F                 db  45h ; E
.eh_frame:0000000000010630                 db  0Eh
.eh_frame:0000000000010631                 db  20h
.eh_frame:0000000000010632                 db  8Dh
.eh_frame:0000000000010633                 db    4
.eh_frame:0000000000010634                 db  42h ; B
.eh_frame:0000000000010635                 db  0Eh
.eh_frame:0000000000010636                 db  28h ; (
.eh_frame:0000000000010637                 db  8Ch
.eh_frame:0000000000010638                 db    5
.eh_frame:0000000000010639                 db  43h ; C
.eh_frame:000000000001063A                 db  0Eh
.eh_frame:000000000001063B                 db  30h ; 0
.eh_frame:000000000001063C                 db  86h
.eh_frame:000000000001063D                 db    6
.eh_frame:000000000001063E                 db  41h ; A
.eh_frame:000000000001063F                 db  0Eh
.eh_frame:0000000000010640                 db  38h ; 8
.eh_frame:0000000000010641                 db  83h
.eh_frame:0000000000010642                 db    7
.eh_frame:0000000000010643                 db  56h ; V
.eh_frame:0000000000010644                 db  0Eh
.eh_frame:0000000000010645                 db  40h ; @
.eh_frame:0000000000010646                 db    2
.eh_frame:0000000000010647                 db 0D3h
.eh_frame:0000000000010648                 db  0Ah
.eh_frame:0000000000010649                 db  0Eh
.eh_frame:000000000001064A                 db  38h ; 8
.eh_frame:000000000001064B                 db  41h ; A
.eh_frame:000000000001064C                 db  0Eh
.eh_frame:000000000001064D                 db  30h ; 0
.eh_frame:000000000001064E                 db  41h ; A
.eh_frame:000000000001064F                 db  0Eh
.eh_frame:0000000000010650                 db  28h ; (
.eh_frame:0000000000010651                 db  42h ; B
.eh_frame:0000000000010652                 db  0Eh
.eh_frame:0000000000010653                 db  20h
.eh_frame:0000000000010654                 db  42h ; B
.eh_frame:0000000000010655                 db  0Eh
.eh_frame:0000000000010656                 db  18h
.eh_frame:0000000000010657                 db  42h ; B
.eh_frame:0000000000010658                 db  0Eh
.eh_frame:0000000000010659                 db  10h
.eh_frame:000000000001065A                 db  42h ; B
.eh_frame:000000000001065B                 db  0Eh
.eh_frame:000000000001065C                 db    8
.eh_frame:000000000001065D                 db  46h ; F
.eh_frame:000000000001065E                 db  0Bh
.eh_frame:000000000001065F                 db  44h ; D
.eh_frame:0000000000010660                 db  0Eh
.eh_frame:0000000000010661                 db  38h ; 8
.eh_frame:0000000000010662                 db  46h ; F
.eh_frame:0000000000010663                 db  0Eh
.eh_frame:0000000000010664                 db  30h ; 0
.eh_frame:0000000000010665                 db  41h ; A
.eh_frame:0000000000010666                 db  0Eh
.eh_frame:0000000000010667                 db  28h ; (
.eh_frame:0000000000010668                 db  42h ; B
.eh_frame:0000000000010669                 db  0Eh
.eh_frame:000000000001066A                 db  20h
.eh_frame:000000000001066B                 db  42h ; B
.eh_frame:000000000001066C                 db  0Eh
.eh_frame:000000000001066D                 db  18h
.eh_frame:000000000001066E                 db  42h ; B
.eh_frame:000000000001066F                 db  0Eh
.eh_frame:0000000000010670                 db  10h
.eh_frame:0000000000010671                 db  42h ; B
.eh_frame:0000000000010672                 db  0Eh
.eh_frame:0000000000010673                 db    8
.eh_frame:0000000000010674                 db  48h ; H
.eh_frame:0000000000010675                 db    0
.eh_frame:0000000000010676                 db    0
.eh_frame:0000000000010677                 db    0
.eh_frame:0000000000010678                 db 0E8h
.eh_frame:0000000000010679                 db  13h
.eh_frame:000000000001067A                 db    0
.eh_frame:000000000001067B                 db    0
.eh_frame:000000000001067C                 db  74h ; t
.eh_frame:000000000001067D                 db  9Dh
.eh_frame:000000000001067E                 db 0FFh
.eh_frame:000000000001067F                 db 0FFh
.eh_frame:0000000000010680                 db  6Dh ; m
.eh_frame:0000000000010681                 db    0
.eh_frame:0000000000010682                 db    0
.eh_frame:0000000000010683                 db    0
.eh_frame:0000000000010684                 db    0
.eh_frame:0000000000010685                 db  42h ; B
.eh_frame:0000000000010686                 db  0Eh
.eh_frame:0000000000010687                 db  10h
.eh_frame:0000000000010688                 db  8Fh
.eh_frame:0000000000010689                 db    2
.eh_frame:000000000001068A                 db  42h ; B
.eh_frame:000000000001068B                 db  0Eh
.eh_frame:000000000001068C                 db  18h
.eh_frame:000000000001068D                 db  8Eh
.eh_frame:000000000001068E                 db    3
.eh_frame:000000000001068F                 db  45h ; E
.eh_frame:0000000000010690                 db  0Eh
.eh_frame:0000000000010691                 db  20h
.eh_frame:0000000000010692                 db  8Dh
.eh_frame:0000000000010693                 db    4
.eh_frame:0000000000010694                 db  42h ; B
.eh_frame:0000000000010695                 db  0Eh
.eh_frame:0000000000010696                 db  28h ; (
.eh_frame:0000000000010697                 db  8Ch
.eh_frame:0000000000010698                 db    5
.eh_frame:0000000000010699                 db  44h ; D
.eh_frame:000000000001069A                 db  0Eh
.eh_frame:000000000001069B                 db  30h ; 0
.eh_frame:000000000001069C                 db  86h
.eh_frame:000000000001069D                 db    6
.eh_frame:000000000001069E                 db  41h ; A
.eh_frame:000000000001069F                 db  0Eh
.eh_frame:00000000000106A0                 db  38h ; 8
.eh_frame:00000000000106A1                 db  83h
.eh_frame:00000000000106A2                 db    7
.eh_frame:00000000000106A3                 db  50h ; P
.eh_frame:00000000000106A4                 db  0Eh
.eh_frame:00000000000106A5                 db  40h ; @
.eh_frame:00000000000106A6                 db  5Ah ; Z
.eh_frame:00000000000106A7                 db  0Ah
.eh_frame:00000000000106A8                 db  0Eh
.eh_frame:00000000000106A9                 db  38h ; 8
.eh_frame:00000000000106AA                 db  41h ; A
.eh_frame:00000000000106AB                 db  0Eh
.eh_frame:00000000000106AC                 db  30h ; 0
.eh_frame:00000000000106AD                 db  41h ; A
.eh_frame:00000000000106AE                 db  0Eh
.eh_frame:00000000000106AF                 db  28h ; (
.eh_frame:00000000000106B0                 db  42h ; B
.eh_frame:00000000000106B1                 db  0Eh
.eh_frame:00000000000106B2                 db  20h
.eh_frame:00000000000106B3                 db  42h ; B
.eh_frame:00000000000106B4                 db  0Eh
.eh_frame:00000000000106B5                 db  18h
.eh_frame:00000000000106B6                 db  42h ; B
.eh_frame:00000000000106B7                 db  0Eh
.eh_frame:00000000000106B8                 db  10h
.eh_frame:00000000000106B9                 db  42h ; B
.eh_frame:00000000000106BA                 db  0Eh
.eh_frame:00000000000106BB                 db    8
.eh_frame:00000000000106BC                 db  41h ; A
.eh_frame:00000000000106BD                 db  0Bh
.eh_frame:00000000000106BE                 db    0
.eh_frame:00000000000106BF                 db    0
.eh_frame:00000000000106C0                 db  3Ch ; <
.eh_frame:00000000000106C1                 db    0
.eh_frame:00000000000106C2                 db    0
.eh_frame:00000000000106C3                 db    0
.eh_frame:00000000000106C4                 db  34h ; 4
.eh_frame:00000000000106C5                 db  14h
.eh_frame:00000000000106C6                 db    0
.eh_frame:00000000000106C7                 db    0
.eh_frame:00000000000106C8                 db  98h
.eh_frame:00000000000106C9                 db  9Dh
.eh_frame:00000000000106CA                 db 0FFh
.eh_frame:00000000000106CB                 db 0FFh
.eh_frame:00000000000106CC                 db  4Dh ; M
.eh_frame:00000000000106CD                 db    0
.eh_frame:00000000000106CE                 db    0
.eh_frame:00000000000106CF                 db    0
.eh_frame:00000000000106D0                 db    0
.eh_frame:00000000000106D1                 db  42h ; B
.eh_frame:00000000000106D2                 db  0Eh
.eh_frame:00000000000106D3                 db  10h
.eh_frame:00000000000106D4                 db  8Eh
.eh_frame:00000000000106D5                 db    2
.eh_frame:00000000000106D6                 db  42h ; B
.eh_frame:00000000000106D7                 db  0Eh
.eh_frame:00000000000106D8                 db  18h
.eh_frame:00000000000106D9                 db  8Dh
.eh_frame:00000000000106DA                 db    3
.eh_frame:00000000000106DB                 db  42h ; B
.eh_frame:00000000000106DC                 db  0Eh
.eh_frame:00000000000106DD                 db  20h
.eh_frame:00000000000106DE                 db  8Ch
.eh_frame:00000000000106DF                 db    4
.eh_frame:00000000000106E0                 db  41h ; A
.eh_frame:00000000000106E1                 db  0Eh
.eh_frame:00000000000106E2                 db  28h ; (
.eh_frame:00000000000106E3                 db  86h
.eh_frame:00000000000106E4                 db    5
.eh_frame:00000000000106E5                 db  41h ; A
.eh_frame:00000000000106E6                 db  0Eh
.eh_frame:00000000000106E7                 db  30h ; 0
.eh_frame:00000000000106E8                 db  83h
.eh_frame:00000000000106E9                 db    6
.eh_frame:00000000000106EA                 db  7Ah ; z
.eh_frame:00000000000106EB                 db  0Eh
.eh_frame:00000000000106EC                 db  28h ; (
.eh_frame:00000000000106ED                 db  44h ; D
.eh_frame:00000000000106EE                 db  0Eh
.eh_frame:00000000000106EF                 db  20h
.eh_frame:00000000000106F0                 db  42h ; B
.eh_frame:00000000000106F1                 db  0Eh
.eh_frame:00000000000106F2                 db  18h
.eh_frame:00000000000106F3                 db  42h ; B
.eh_frame:00000000000106F4                 db  0Eh
.eh_frame:00000000000106F5                 db  10h
.eh_frame:00000000000106F6                 db  42h ; B
.eh_frame:00000000000106F7                 db  0Eh
.eh_frame:00000000000106F8                 db    8
.eh_frame:00000000000106F9                 db    0
.eh_frame:00000000000106FA                 db    0
.eh_frame:00000000000106FB                 db    0
.eh_frame:00000000000106FC                 db    0
.eh_frame:00000000000106FD                 db    0
.eh_frame:00000000000106FE                 db    0
.eh_frame:00000000000106FF                 db    0
.eh_frame:0000000000010700                 db  1Ch
.eh_frame:0000000000010701                 db    0
.eh_frame:0000000000010702                 db    0
.eh_frame:0000000000010703                 db    0
.eh_frame:0000000000010704                 db  74h ; t
.eh_frame:0000000000010705                 db  14h
.eh_frame:0000000000010706                 db    0
.eh_frame:0000000000010707                 db    0
.eh_frame:0000000000010708                 db 0A8h
.eh_frame:0000000000010709                 db  9Dh
.eh_frame:000000000001070A                 db 0FFh
.eh_frame:000000000001070B                 db 0FFh
.eh_frame:000000000001070C                 db  60h ; `
.eh_frame:000000000001070D                 db    0
.eh_frame:000000000001070E                 db    0
.eh_frame:000000000001070F                 db    0
.eh_frame:0000000000010710                 db    0
.eh_frame:0000000000010711                 db  44h ; D
.eh_frame:0000000000010712                 db  0Eh
.eh_frame:0000000000010713                 db  10h
.eh_frame:0000000000010714                 db  75h ; u
.eh_frame:0000000000010715                 db  0Ah
.eh_frame:0000000000010716                 db  0Eh
.eh_frame:0000000000010717                 db    8
.eh_frame:0000000000010718                 db  47h ; G
.eh_frame:0000000000010719                 db  0Bh
.eh_frame:000000000001071A                 db  5Fh ; _
.eh_frame:000000000001071B                 db  0Eh
.eh_frame:000000000001071C                 db    8
.eh_frame:000000000001071D                 db    0
.eh_frame:000000000001071E                 db    0
.eh_frame:000000000001071F                 db    0
.eh_frame:0000000000010720                 db  1Ch
.eh_frame:0000000000010721                 db    0
.eh_frame:0000000000010722                 db    0
.eh_frame:0000000000010723                 db    0
.eh_frame:0000000000010724                 db  94h
.eh_frame:0000000000010725                 db  14h
.eh_frame:0000000000010726                 db    0
.eh_frame:0000000000010727                 db    0
.eh_frame:0000000000010728                 db 0E8h
.eh_frame:0000000000010729                 db  9Dh
.eh_frame:000000000001072A                 db 0FFh
.eh_frame:000000000001072B                 db 0FFh
.eh_frame:000000000001072C                 db  3Ch ; <
.eh_frame:000000000001072D                 db    0
.eh_frame:000000000001072E                 db    0
.eh_frame:000000000001072F                 db    0
.eh_frame:0000000000010730                 db    0
.eh_frame:0000000000010731                 db  44h ; D
.eh_frame:0000000000010732                 db  0Eh
.eh_frame:0000000000010733                 db  10h
.eh_frame:0000000000010734                 db  61h ; a
.eh_frame:0000000000010735                 db  0Ah
.eh_frame:0000000000010736                 db  0Eh
.eh_frame:0000000000010737                 db    8
.eh_frame:0000000000010738                 db  4Bh ; K
.eh_frame:0000000000010739                 db  0Bh
.eh_frame:000000000001073A                 db  4Bh ; K
.eh_frame:000000000001073B                 db  0Eh
.eh_frame:000000000001073C                 db    8
.eh_frame:000000000001073D                 db    0
.eh_frame:000000000001073E                 db    0
.eh_frame:000000000001073F                 db    0
.eh_frame:0000000000010740                 db  2Ch ; ,
.eh_frame:0000000000010741                 db    0
.eh_frame:0000000000010742                 db    0
.eh_frame:0000000000010743                 db    0
.eh_frame:0000000000010744                 db 0B4h
.eh_frame:0000000000010745                 db  14h
.eh_frame:0000000000010746                 db    0
.eh_frame:0000000000010747                 db    0
.eh_frame:0000000000010748                 db    8
.eh_frame:0000000000010749                 db  9Eh
.eh_frame:000000000001074A                 db 0FFh
.eh_frame:000000000001074B                 db 0FFh
.eh_frame:000000000001074C                 db  1Fh
.eh_frame:000000000001074D                 db  11h
.eh_frame:000000000001074E                 db    0
.eh_frame:000000000001074F                 db    0
.eh_frame:0000000000010750                 db    0
.eh_frame:0000000000010751                 db  41h ; A
.eh_frame:0000000000010752                 db  0Eh
.eh_frame:0000000000010753                 db  10h
.eh_frame:0000000000010754                 db  86h
.eh_frame:0000000000010755                 db    2
.eh_frame:0000000000010756                 db  43h ; C
.eh_frame:0000000000010757                 db  0Dh
.eh_frame:0000000000010758                 db    6
.eh_frame:0000000000010759                 db  48h ; H
.eh_frame:000000000001075A                 db  8Fh
.eh_frame:000000000001075B                 db    3
.eh_frame:000000000001075C                 db  8Eh
.eh_frame:000000000001075D                 db    4
.eh_frame:000000000001075E                 db  8Dh
.eh_frame:000000000001075F                 db    5
.eh_frame:0000000000010760                 db  8Ch
.eh_frame:0000000000010761                 db    6
.eh_frame:0000000000010762                 db  48h ; H
.eh_frame:0000000000010763                 db  83h
.eh_frame:0000000000010764                 db    7
.eh_frame:0000000000010765                 db    3
.eh_frame:0000000000010766                 db 0EFh
.eh_frame:0000000000010767                 db    1
.eh_frame:0000000000010768                 db  0Ah
.eh_frame:0000000000010769                 db  0Ch
.eh_frame:000000000001076A                 db    7
.eh_frame:000000000001076B                 db    8
.eh_frame:000000000001076C                 db  45h ; E
.eh_frame:000000000001076D                 db  0Bh
.eh_frame:000000000001076E                 db    0
.eh_frame:000000000001076F                 db    0
.eh_frame:0000000000010770                 db  14h
.eh_frame:0000000000010771                 db    0
.eh_frame:0000000000010772                 db    0
.eh_frame:0000000000010773                 db    0
.eh_frame:0000000000010774                 db 0E4h
.eh_frame:0000000000010775                 db  14h
.eh_frame:0000000000010776                 db    0
.eh_frame:0000000000010777                 db    0
.eh_frame:0000000000010778                 db 0F8h
.eh_frame:0000000000010779                 db 0AEh
.eh_frame:000000000001077A                 db 0FFh
.eh_frame:000000000001077B                 db 0FFh
.eh_frame:000000000001077C                 db 0FEh
.eh_frame:000000000001077D                 db    1
.eh_frame:000000000001077E                 db    0
.eh_frame:000000000001077F                 db    0
.eh_frame:0000000000010780                 db    0
.eh_frame:0000000000010781                 db    0
.eh_frame:0000000000010782                 db    0
.eh_frame:0000000000010783                 db    0
.eh_frame:0000000000010784                 db    0
.eh_frame:0000000000010785                 db    0
.eh_frame:0000000000010786                 db    0
.eh_frame:0000000000010787                 db    0
.eh_frame:0000000000010788                 db  4Ch ; L
.eh_frame:0000000000010789                 db    0
.eh_frame:000000000001078A                 db    0
.eh_frame:000000000001078B                 db    0
.eh_frame:000000000001078C                 db 0FCh
.eh_frame:000000000001078D                 db  14h
.eh_frame:000000000001078E                 db    0
.eh_frame:000000000001078F                 db    0
.eh_frame:0000000000010790                 db 0E0h
.eh_frame:0000000000010791                 db 0B0h
.eh_frame:0000000000010792                 db 0FFh
.eh_frame:0000000000010793                 db 0FFh
.eh_frame:0000000000010794                 db 0ECh
.eh_frame:0000000000010795                 db  0Ch
.eh_frame:0000000000010796                 db    0
.eh_frame:0000000000010797                 db    0
.eh_frame:0000000000010798                 db    0
.eh_frame:0000000000010799                 db  42h ; B
.eh_frame:000000000001079A                 db  0Eh
.eh_frame:000000000001079B                 db  10h
.eh_frame:000000000001079C                 db  8Fh
.eh_frame:000000000001079D                 db    2
.eh_frame:000000000001079E                 db  42h ; B
.eh_frame:000000000001079F                 db  0Eh
.eh_frame:00000000000107A0                 db  18h
.eh_frame:00000000000107A1                 db  8Eh
.eh_frame:00000000000107A2                 db    3
.eh_frame:00000000000107A3                 db  46h ; F
.eh_frame:00000000000107A4                 db  0Eh
.eh_frame:00000000000107A5                 db  20h
.eh_frame:00000000000107A6                 db  8Dh
.eh_frame:00000000000107A7                 db    4
.eh_frame:00000000000107A8                 db  42h ; B
.eh_frame:00000000000107A9                 db  0Eh
.eh_frame:00000000000107AA                 db  28h ; (
.eh_frame:00000000000107AB                 db  8Ch
.eh_frame:00000000000107AC                 db    5
.eh_frame:00000000000107AD                 db  45h ; E
.eh_frame:00000000000107AE                 db  0Eh
.eh_frame:00000000000107AF                 db  30h ; 0
.eh_frame:00000000000107B0                 db  86h
.eh_frame:00000000000107B1                 db    6
.eh_frame:00000000000107B2                 db  41h ; A
.eh_frame:00000000000107B3                 db  0Eh
.eh_frame:00000000000107B4                 db  38h ; 8
.eh_frame:00000000000107B5                 db  83h
.eh_frame:00000000000107B6                 db    7
.eh_frame:00000000000107B7                 db  52h ; R
.eh_frame:00000000000107B8                 db  0Eh
.eh_frame:00000000000107B9                 db  90h
.eh_frame:00000000000107BA                 db    1
.eh_frame:00000000000107BB                 db    2
.eh_frame:00000000000107BC                 db  82h
.eh_frame:00000000000107BD                 db  0Ah
.eh_frame:00000000000107BE                 db  0Eh
.eh_frame:00000000000107BF                 db  38h ; 8
.eh_frame:00000000000107C0                 db  41h ; A
.eh_frame:00000000000107C1                 db  0Eh
.eh_frame:00000000000107C2                 db  30h ; 0
.eh_frame:00000000000107C3                 db  41h ; A
.eh_frame:00000000000107C4                 db  0Eh
.eh_frame:00000000000107C5                 db  28h ; (
.eh_frame:00000000000107C6                 db  42h ; B
.eh_frame:00000000000107C7                 db  0Eh
.eh_frame:00000000000107C8                 db  20h
.eh_frame:00000000000107C9                 db  42h ; B
.eh_frame:00000000000107CA                 db  0Eh
.eh_frame:00000000000107CB                 db  18h
.eh_frame:00000000000107CC                 db  42h ; B
.eh_frame:00000000000107CD                 db  0Eh
.eh_frame:00000000000107CE                 db  10h
.eh_frame:00000000000107CF                 db  42h ; B
.eh_frame:00000000000107D0                 db  0Eh
.eh_frame:00000000000107D1                 db    8
.eh_frame:00000000000107D2                 db  48h ; H
.eh_frame:00000000000107D3                 db  0Bh
.eh_frame:00000000000107D4                 db    0
.eh_frame:00000000000107D5                 db    0
.eh_frame:00000000000107D6                 db    0
.eh_frame:00000000000107D7                 db    0
.eh_frame:00000000000107D8                 db  44h ; D
.eh_frame:00000000000107D9                 db    0
.eh_frame:00000000000107DA                 db    0
.eh_frame:00000000000107DB                 db    0
.eh_frame:00000000000107DC                 db  4Ch ; L
.eh_frame:00000000000107DD                 db  15h
.eh_frame:00000000000107DE                 db    0
.eh_frame:00000000000107DF                 db    0
.eh_frame:00000000000107E0                 db  80h
.eh_frame:00000000000107E1                 db 0BDh
.eh_frame:00000000000107E2                 db 0FFh
.eh_frame:00000000000107E3                 db 0FFh
.eh_frame:00000000000107E4                 db  65h ; e
.eh_frame:00000000000107E5                 db    0
.eh_frame:00000000000107E6                 db    0
.eh_frame:00000000000107E7                 db    0
.eh_frame:00000000000107E8                 db    0
.eh_frame:00000000000107E9                 db  42h ; B
.eh_frame:00000000000107EA                 db  0Eh
.eh_frame:00000000000107EB                 db  10h
.eh_frame:00000000000107EC                 db  8Fh
.eh_frame:00000000000107ED                 db    2
.eh_frame:00000000000107EE                 db  42h ; B
.eh_frame:00000000000107EF                 db  0Eh
.eh_frame:00000000000107F0                 db  18h
.eh_frame:00000000000107F1                 db  8Eh
.eh_frame:00000000000107F2                 db    3
.eh_frame:00000000000107F3                 db  45h ; E
.eh_frame:00000000000107F4                 db  0Eh
.eh_frame:00000000000107F5                 db  20h
.eh_frame:00000000000107F6                 db  8Dh
.eh_frame:00000000000107F7                 db    4
.eh_frame:00000000000107F8                 db  42h ; B
.eh_frame:00000000000107F9                 db  0Eh
.eh_frame:00000000000107FA                 db  28h ; (
.eh_frame:00000000000107FB                 db  8Ch
.eh_frame:00000000000107FC                 db    5
.eh_frame:00000000000107FD                 db  48h ; H
.eh_frame:00000000000107FE                 db  0Eh
.eh_frame:00000000000107FF                 db  30h ; 0
.eh_frame:0000000000010800                 db  86h
.eh_frame:0000000000010801                 db    6
.eh_frame:0000000000010802                 db  48h ; H
.eh_frame:0000000000010803                 db  0Eh
.eh_frame:0000000000010804                 db  38h ; 8
.eh_frame:0000000000010805                 db  83h
.eh_frame:0000000000010806                 db    7
.eh_frame:0000000000010807                 db  4Dh ; M
.eh_frame:0000000000010808                 db  0Eh
.eh_frame:0000000000010809                 db  40h ; @
.eh_frame:000000000001080A                 db  72h ; r
.eh_frame:000000000001080B                 db  0Eh
.eh_frame:000000000001080C                 db  38h ; 8
.eh_frame:000000000001080D                 db  41h ; A
.eh_frame:000000000001080E                 db  0Eh
.eh_frame:000000000001080F                 db  30h ; 0
.eh_frame:0000000000010810                 db  41h ; A
.eh_frame:0000000000010811                 db  0Eh
.eh_frame:0000000000010812                 db  28h ; (
.eh_frame:0000000000010813                 db  42h ; B
.eh_frame:0000000000010814                 db  0Eh
.eh_frame:0000000000010815                 db  20h
.eh_frame:0000000000010816                 db  42h ; B
.eh_frame:0000000000010817                 db  0Eh
.eh_frame:0000000000010818                 db  18h
.eh_frame:0000000000010819                 db  42h ; B
.eh_frame:000000000001081A                 db  0Eh
.eh_frame:000000000001081B                 db  10h
.eh_frame:000000000001081C                 db  42h ; B
.eh_frame:000000000001081D                 db  0Eh
.eh_frame:000000000001081E                 db    8
.eh_frame:000000000001081F                 db    0
.eh_frame:0000000000010820                 db  14h
.eh_frame:0000000000010821                 db    0
.eh_frame:0000000000010822                 db    0
.eh_frame:0000000000010823                 db    0
.eh_frame:0000000000010824                 db  94h
.eh_frame:0000000000010825                 db  15h
.eh_frame:0000000000010826                 db    0
.eh_frame:0000000000010827                 db    0
.eh_frame:0000000000010828                 db 0A8h
.eh_frame:0000000000010829                 db 0BDh
.eh_frame:000000000001082A                 db 0FFh
.eh_frame:000000000001082B                 db 0FFh
.eh_frame:000000000001082C                 db    2
.eh_frame:000000000001082D                 db    0
.eh_frame:000000000001082E                 db    0
.eh_frame:000000000001082F                 db    0
.eh_frame:0000000000010830                 db    0
.eh_frame:0000000000010831                 db    0
.eh_frame:0000000000010832                 db    0
.eh_frame:0000000000010833                 db    0
.eh_frame:0000000000010834                 db    0
.eh_frame:0000000000010835                 db    0
.eh_frame:0000000000010836                 db    0
.eh_frame:0000000000010837                 db    0
.eh_frame:0000000000010838                 db  10h
.eh_frame:0000000000010839                 db    0
.eh_frame:000000000001083A                 db    0
.eh_frame:000000000001083B                 db    0
.eh_frame:000000000001083C                 db 0ACh
.eh_frame:000000000001083D                 db  15h
.eh_frame:000000000001083E                 db    0
.eh_frame:000000000001083F                 db    0
.eh_frame:0000000000010840                 db 0A0h
.eh_frame:0000000000010841                 db 0BDh
.eh_frame:0000000000010842                 db 0FFh
.eh_frame:0000000000010843                 db 0FFh
.eh_frame:0000000000010844                 db  0Eh
.eh_frame:0000000000010845                 db    0
.eh_frame:0000000000010846                 db    0
.eh_frame:0000000000010847                 db    0
.eh_frame:0000000000010848                 db    0
.eh_frame:0000000000010849                 db    0
.eh_frame:000000000001084A                 db    0
.eh_frame:000000000001084B                 db    0
.eh_frame:000000000001084C __FRAME_END__   db    0
.eh_frame:000000000001084D                 db    0
.eh_frame:000000000001084E                 db    0
.eh_frame:000000000001084F                 db    0
.eh_frame:000000000001084F _eh_frame       ends
.eh_frame:000000000001084F
.init_array:0000000000210A90 ; ELF Initialization Function Table
.init_array:0000000000210A90 ; ===========================================================================
.init_array:0000000000210A90
.init_array:0000000000210A90 ; Segment type: Pure data
.init_array:0000000000210A90 ; Segment permissions: Read/Write
.init_array:0000000000210A90 _init_array     segment qword public 'DATA' use64
.init_array:0000000000210A90                 assume cs:_init_array
.init_array:0000000000210A90                 ;org 210A90h
.init_array:0000000000210A90 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000210A90                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000210A90                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000210A90 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000210A90
.fini_array:0000000000210A98 ; ELF Termination Function Table
.fini_array:0000000000210A98 ; ===========================================================================
.fini_array:0000000000210A98
.fini_array:0000000000210A98 ; Segment type: Pure data
.fini_array:0000000000210A98 ; Segment permissions: Read/Write
.fini_array:0000000000210A98 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000210A98                 assume cs:_fini_array
.fini_array:0000000000210A98                 ;org 210A98h
.fini_array:0000000000210A98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000210A98                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000210A98 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000210A98
.data.rel.ro:0000000000210AA0 ; ===========================================================================
.data.rel.ro:0000000000210AA0
.data.rel.ro:0000000000210AA0 ; Segment type: Pure data
.data.rel.ro:0000000000210AA0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000210AA0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000210AA0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000210AA0                 ;org 210AA0h
.data.rel.ro:0000000000210AA0 block_size_args dq offset aHumanReadable
.data.rel.ro:0000000000210AA0                                         ; DATA XREF: human_options+43↑o
.data.rel.ro:0000000000210AA0                                         ; "human-readable"
.data.rel.ro:0000000000210AA8                 dq offset aSi           ; "si"
.data.rel.ro:0000000000210AB0                 align 20h
.data.rel.ro:0000000000210AC0 ; struct option long_options
.data.rel.ro:0000000000210AC0 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000210AC0                                         ; DATA XREF: parse_long_options:loc_6DD0↑o
.data.rel.ro:0000000000210AC0                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000210AC0                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000210AC0                 db 4 dup(0)
.data.rel.ro:0000000000210AC0                 dq 0                    ; flag
.data.rel.ro:0000000000210AC0                 dd 68h                  ; val
.data.rel.ro:0000000000210AC0                 db 4 dup(0)
.data.rel.ro:0000000000210AE0                 dq offset aInvalidConvers+0Bh ; "version"
.data.rel.ro:0000000000210AE8                 db    0
.data.rel.ro:0000000000210AE9                 db    0
.data.rel.ro:0000000000210AEA                 db    0
.data.rel.ro:0000000000210AEB                 db    0
.data.rel.ro:0000000000210AEC                 db    0
.data.rel.ro:0000000000210AED                 db    0
.data.rel.ro:0000000000210AEE                 db    0
.data.rel.ro:0000000000210AEF                 db    0
.data.rel.ro:0000000000210AF0                 db    0
.data.rel.ro:0000000000210AF1                 db    0
.data.rel.ro:0000000000210AF2                 db    0
.data.rel.ro:0000000000210AF3                 db    0
.data.rel.ro:0000000000210AF4                 db    0
.data.rel.ro:0000000000210AF5                 db    0
.data.rel.ro:0000000000210AF6                 db    0
.data.rel.ro:0000000000210AF7                 db    0
.data.rel.ro:0000000000210AF8                 db  76h ; v
.data.rel.ro:0000000000210AF9                 db    0
.data.rel.ro:0000000000210AFA                 db    0
.data.rel.ro:0000000000210AFB                 db    0
.data.rel.ro:0000000000210AFC                 db    0
.data.rel.ro:0000000000210AFD                 db    0
.data.rel.ro:0000000000210AFE                 db    0
.data.rel.ro:0000000000210AFF                 db    0
.data.rel.ro:0000000000210B00                 db    0
.data.rel.ro:0000000000210B01                 db    0
.data.rel.ro:0000000000210B02                 db    0
.data.rel.ro:0000000000210B03                 db    0
.data.rel.ro:0000000000210B04                 db    0
.data.rel.ro:0000000000210B05                 db    0
.data.rel.ro:0000000000210B06                 db    0
.data.rel.ro:0000000000210B07                 db    0
.data.rel.ro:0000000000210B08                 db    0
.data.rel.ro:0000000000210B09                 db    0
.data.rel.ro:0000000000210B0A                 db    0
.data.rel.ro:0000000000210B0B                 db    0
.data.rel.ro:0000000000210B0C                 db    0
.data.rel.ro:0000000000210B0D                 db    0
.data.rel.ro:0000000000210B0E                 db    0
.data.rel.ro:0000000000210B0F                 db    0
.data.rel.ro:0000000000210B10                 db    0
.data.rel.ro:0000000000210B11                 db    0
.data.rel.ro:0000000000210B12                 db    0
.data.rel.ro:0000000000210B13                 db    0
.data.rel.ro:0000000000210B14                 db    0
.data.rel.ro:0000000000210B15                 db    0
.data.rel.ro:0000000000210B16                 db    0
.data.rel.ro:0000000000210B17                 db    0
.data.rel.ro:0000000000210B18                 db    0
.data.rel.ro:0000000000210B19                 db    0
.data.rel.ro:0000000000210B1A                 db    0
.data.rel.ro:0000000000210B1B                 db    0
.data.rel.ro:0000000000210B1C                 db    0
.data.rel.ro:0000000000210B1D                 db    0
.data.rel.ro:0000000000210B1E                 db    0
.data.rel.ro:0000000000210B1F                 db    0
.data.rel.ro:0000000000210B20                 public quoting_style_args
.data.rel.ro:0000000000210B20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000210B28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000210B30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000210B38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000210B40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000210B48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000210B50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000210B58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000210B60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000210B68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000210B70                 db    0
.data.rel.ro:0000000000210B71                 db    0
.data.rel.ro:0000000000210B72                 db    0
.data.rel.ro:0000000000210B73                 db    0
.data.rel.ro:0000000000210B74                 db    0
.data.rel.ro:0000000000210B75                 db    0
.data.rel.ro:0000000000210B76                 db    0
.data.rel.ro:0000000000210B77                 db    0
.data.rel.ro:0000000000210B77 _data_rel_ro    ends
.data.rel.ro:0000000000210B77
LOAD:0000000000210B78 ; ELF Dynamic Information
LOAD:0000000000210B78 ; ===========================================================================
LOAD:0000000000210B78
LOAD:0000000000210B78 ; Segment type: Pure data
LOAD:0000000000210B78 ; Segment permissions: Read/Write
LOAD:0000000000210B78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000210B78                 assume cs:LOAD
LOAD:0000000000210B78                 ;org 210B78h
LOAD:0000000000210B78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000210B78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000210B78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000210B88                 Elf64_Dyn <0Ch, 19E8h>  ; DT_INIT
LOAD:0000000000210B98                 Elf64_Dyn <0Dh, 0C5F0h> ; DT_FINI
LOAD:0000000000210BA8                 Elf64_Dyn <19h, 210A90h> ; DT_INIT_ARRAY
LOAD:0000000000210BB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000210BC8                 Elf64_Dyn <1Ah, 210A98h> ; DT_FINI_ARRAY
LOAD:0000000000210BD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000210BE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000210BF8                 Elf64_Dyn <5, 0B08h>    ; DT_STRTAB
LOAD:0000000000210C08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000210C18                 Elf64_Dyn <0Ah, 3E6h>   ; DT_STRSZ
LOAD:0000000000210C28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000210C38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000210C48                 Elf64_Dyn <3, 210D68h>  ; DT_PLTGOT
LOAD:0000000000210C58                 Elf64_Dyn <2, 6D8h>     ; DT_PLTRELSZ
LOAD:0000000000210C68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000210C78                 Elf64_Dyn <17h, 1310h>  ; DT_JMPREL
LOAD:0000000000210C88                 Elf64_Dyn <7, 1010h>    ; DT_RELA
LOAD:0000000000210C98                 Elf64_Dyn <8, 300h>     ; DT_RELASZ
LOAD:0000000000210CA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000210CB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000210CC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000210CD8                 Elf64_Dyn <6FFFFFFEh, 0FA0h> ; DT_VERNEED
LOAD:0000000000210CE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000210CF8                 Elf64_Dyn <6FFFFFF0h, 0EEEh> ; DT_VERSYM
LOAD:0000000000210D08                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:0000000000210D18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000210D28                 db    0
LOAD:0000000000210D29                 db    0
LOAD:0000000000210D2A                 db    0
LOAD:0000000000210D2B                 db    0
LOAD:0000000000210D2C                 db    0
LOAD:0000000000210D2D                 db    0
LOAD:0000000000210D2E                 db    0
LOAD:0000000000210D2F                 db    0
LOAD:0000000000210D30                 db    0
LOAD:0000000000210D31                 db    0
LOAD:0000000000210D32                 db    0
LOAD:0000000000210D33                 db    0
LOAD:0000000000210D34                 db    0
LOAD:0000000000210D35                 db    0
LOAD:0000000000210D36                 db    0
LOAD:0000000000210D37                 db    0
LOAD:0000000000210D38                 db    0
LOAD:0000000000210D39                 db    0
LOAD:0000000000210D3A                 db    0
LOAD:0000000000210D3B                 db    0
LOAD:0000000000210D3C                 db    0
LOAD:0000000000210D3D                 db    0
LOAD:0000000000210D3E                 db    0
LOAD:0000000000210D3F                 db    0
LOAD:0000000000210D40                 db    0
LOAD:0000000000210D41                 db    0
LOAD:0000000000210D42                 db    0
LOAD:0000000000210D43                 db    0
LOAD:0000000000210D44                 db    0
LOAD:0000000000210D45                 db    0
LOAD:0000000000210D46                 db    0
LOAD:0000000000210D47                 db    0
LOAD:0000000000210D48                 db    0
LOAD:0000000000210D49                 db    0
LOAD:0000000000210D4A                 db    0
LOAD:0000000000210D4B                 db    0
LOAD:0000000000210D4C                 db    0
LOAD:0000000000210D4D                 db    0
LOAD:0000000000210D4E                 db    0
LOAD:0000000000210D4F                 db    0
LOAD:0000000000210D50                 db    0
LOAD:0000000000210D51                 db    0
LOAD:0000000000210D52                 db    0
LOAD:0000000000210D53                 db    0
LOAD:0000000000210D54                 db    0
LOAD:0000000000210D55                 db    0
LOAD:0000000000210D56                 db    0
LOAD:0000000000210D57                 db    0
LOAD:0000000000210D58                 db    0
LOAD:0000000000210D59                 db    0
LOAD:0000000000210D5A                 db    0
LOAD:0000000000210D5B                 db    0
LOAD:0000000000210D5C                 db    0
LOAD:0000000000210D5D                 db    0
LOAD:0000000000210D5E                 db    0
LOAD:0000000000210D5F                 db    0
LOAD:0000000000210D60                 db    0
LOAD:0000000000210D61                 db    0
LOAD:0000000000210D62                 db    0
LOAD:0000000000210D63                 db    0
LOAD:0000000000210D64                 db    0
LOAD:0000000000210D65                 db    0
LOAD:0000000000210D66                 db    0
LOAD:0000000000210D67                 db    0
LOAD:0000000000210D67 LOAD            ends
LOAD:0000000000210D67
.got:0000000000210D68 ; ===========================================================================
.got:0000000000210D68
.got:0000000000210D68 ; Segment type: Pure data
.got:0000000000210D68 ; Segment permissions: Read/Write
.got:0000000000210D68 _got            segment qword public 'DATA' use64
.got:0000000000210D68                 assume cs:_got
.got:0000000000210D68                 ;org 210D68h
.got:0000000000210D68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000210D70 qword_210D70    dq 0                    ; DATA XREF: sub_1A00↑r
.got:0000000000210D78 qword_210D78    dq 0                    ; DATA XREF: sub_1A00+6↑r
.got:0000000000210D80 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000210D80                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000210D88 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000210D90 sigprocmask_ptr dq offset sigprocmask   ; DATA XREF: _sigprocmask↑r
.got:0000000000210D98 __snprintf_chk_ptr dq offset __snprintf_chk
.got:0000000000210D98                                         ; DATA XREF: ___snprintf_chk↑r
.got:0000000000210DA0 raise_ptr       dq offset raise         ; DATA XREF: _raise↑r
.got:0000000000210DA8 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000210DB0 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000210DB8 __errno_location_ptr dq offset __errno_location
.got:0000000000210DB8                                         ; DATA XREF: ___errno_location↑r
.got:0000000000210DC0 fdatasync_ptr   dq offset fdatasync     ; DATA XREF: _fdatasync↑r
.got:0000000000210DC8 error_at_line_ptr dq offset error_at_line
.got:0000000000210DC8                                         ; DATA XREF: _error_at_line↑r
.got:0000000000210DD0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000210DD8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000210DE0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000210DE8 sigaction_ptr   dq offset sigaction     ; DATA XREF: _sigaction↑r
.got:0000000000210DF0 localeconv_ptr  dq offset localeconv    ; DATA XREF: _localeconv↑r
.got:0000000000210DF8 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000210E00 clock_gettime_ptr dq offset clock_gettime
.got:0000000000210E00                                         ; DATA XREF: _clock_gettime↑r
.got:0000000000210E08 write_ptr       dq offset write         ; DATA XREF: _write↑r
.got:0000000000210E10 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000210E18 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000210E20 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000210E20                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000210E28 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000210E30 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000210E30                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000210E38 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000210E40 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000210E40                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000210E48 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000210E50 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000210E58 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:0000000000210E60 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000210E68 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000210E70 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000210E78 ftruncate_ptr   dq offset ftruncate     ; DATA XREF: _ftruncate↑r
.got:0000000000210E80 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000210E88 __assert_fail_ptr dq offset __assert_fail
.got:0000000000210E88                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000210E90 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000210E90                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000210E98 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000210EA0 ioctl_ptr       dq offset ioctl         ; DATA XREF: _ioctl↑r
.got:0000000000210EA8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000210EB0 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000210EB0                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000210EB8 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:0000000000210EC0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000210EC8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000210EC8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000210ED0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000210ED8 __memcpy_chk_ptr dq offset __memcpy_chk ; DATA XREF: ___memcpy_chk↑r
.got:0000000000210EE0 sigemptyset_ptr dq offset sigemptyset   ; DATA XREF: _sigemptyset↑r
.got:0000000000210EE8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000210EF0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000210EF8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000210F00 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000210F08 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000210F10 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000210F18 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000210F20 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000210F28 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000210F30 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000210F38 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000210F40 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000210F48 fsync_ptr       dq offset fsync         ; DATA XREF: _fsync↑r
.got:0000000000210F50 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000210F58 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000210F60 dcngettext_ptr  dq offset dcngettext    ; DATA XREF: _dcngettext↑r
.got:0000000000210F68 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000210F70 getpagesize_ptr dq offset getpagesize   ; DATA XREF: _getpagesize↑r
.got:0000000000210F78 sigismember_ptr dq offset sigismember   ; DATA XREF: _sigismember↑r
.got:0000000000210F80 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000210F88 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000210F90 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000210F90                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000210F98 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000210FA0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000210FA8 sigaddset_ptr   dq offset sigaddset     ; DATA XREF: _sigaddset↑r
.got:0000000000210FB0 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000210FB0                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000210FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000210FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000210FC0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000210FC0                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000210FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000210FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000210FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000210FD0                                         ; DATA XREF: start+24↑r
.got:0000000000210FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000210FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000210FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000210FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000210FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000210FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000210FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000210FE8 _got            ends
.got:0000000000210FE8
LOAD:0000000000210FF0 ; ===========================================================================
LOAD:0000000000210FF0
LOAD:0000000000210FF0 ; Segment type: Pure data
LOAD:0000000000210FF0 ; Segment permissions: Read/Write
LOAD:0000000000210FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000210FF0                 assume cs:LOAD
LOAD:0000000000210FF0                 ;org 210FF0h
LOAD:0000000000210FF0                 align 20h
LOAD:0000000000210FF0 LOAD            ends
LOAD:0000000000210FF0
.data:0000000000211000 ; ===========================================================================
.data:0000000000211000
.data:0000000000211000 ; Segment type: Pure data
.data:0000000000211000 ; Segment permissions: Read/Write
.data:0000000000211000 _data           segment align_32 public 'DATA' use64
.data:0000000000211000                 assume cs:_data
.data:0000000000211000                 ;org 211000h
.data:0000000000211000                 public __data_start ; weak
.data:0000000000211000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000211000                                         ; data_start
.data:0000000000211001                 db    0
.data:0000000000211002                 db    0
.data:0000000000211003                 db    0
.data:0000000000211004                 db    0
.data:0000000000211005                 db    0
.data:0000000000211006                 db    0
.data:0000000000211007                 db    0
.data:0000000000211008                 public __dso_handle
.data:0000000000211008 ; void *_dso_handle
.data:0000000000211008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000211008                                         ; atexit↑r ...
.data:0000000000211010 output_offset_7179 dq 0FFFFFFFFFFFFFFFEh
.data:0000000000211010                                         ; DATA XREF: invalidate_cache:loc_4670↑r
.data:0000000000211010                                         ; invalidate_cache+E5↑w ...
.data:0000000000211018 close_stdout_required db 1              ; DATA XREF: main+216↑w
.data:0000000000211018                                         ; maybe_close_stdout↑r
.data:0000000000211019 space_character db 20h                  ; DATA XREF: main+581↑w
.data:0000000000211019                                         ; main+1464↑r ...
.data:000000000021101A newline_character db 0Ah                ; DATA XREF: main+57A↑w
.data:000000000021101A                                         ; main+14C6↑r ...
.data:000000000021101B                 align 4
.data:000000000021101C status_level    dd 3                    ; DATA XREF: main:loc_26F0↑r
.data:000000000021101C                                         ; main+9C0↑r ...
.data:0000000000211020 max_records     dq 0FFFFFFFFFFFFFFFFh   ; DATA XREF: main+386↑w
.data:0000000000211020                                         ; main+457↑r ...
.data:0000000000211028                 public Version
.data:0000000000211028 Version         dq offset a831          ; DATA XREF: main+1C5↑r
.data:0000000000211028                                         ; "8.31"
.data:0000000000211030                 public exit_failure
.data:0000000000211030 ; int exit_failure
.data:0000000000211030 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_5ED2↑r
.data:0000000000211030                                         ; parse_gnu_standard_options_only:loc_6F60↑r ...
.data:0000000000211034                 align 20h
.data:0000000000211040                 public quote_quoting_options
.data:0000000000211040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000211040                                         ; quote_mem↑o ...
.data:0000000000211041                 db    0
.data:0000000000211042                 db    0
.data:0000000000211043                 db    0
.data:0000000000211044                 db    0
.data:0000000000211045                 db    0
.data:0000000000211046                 db    0
.data:0000000000211047                 db    0
.data:0000000000211048                 db    0
.data:0000000000211049                 db    0
.data:000000000021104A                 db    0
.data:000000000021104B                 db    0
.data:000000000021104C                 db    0
.data:000000000021104D                 db    0
.data:000000000021104E                 db    0
.data:000000000021104F                 db    0
.data:0000000000211050                 db    0
.data:0000000000211051                 db    0
.data:0000000000211052                 db    0
.data:0000000000211053                 db    0
.data:0000000000211054                 db    0
.data:0000000000211055                 db    0
.data:0000000000211056                 db    0
.data:0000000000211057                 db    0
.data:0000000000211058                 db    0
.data:0000000000211059                 db    0
.data:000000000021105A                 db    0
.data:000000000021105B                 db    0
.data:000000000021105C                 db    0
.data:000000000021105D                 db    0
.data:000000000021105E                 db    0
.data:000000000021105F                 db    0
.data:0000000000211060                 db    0
.data:0000000000211061                 db    0
.data:0000000000211062                 db    0
.data:0000000000211063                 db    0
.data:0000000000211064                 db    0
.data:0000000000211065                 db    0
.data:0000000000211066                 db    0
.data:0000000000211067                 db    0
.data:0000000000211068                 db    0
.data:0000000000211069                 db    0
.data:000000000021106A                 db    0
.data:000000000021106B                 db    0
.data:000000000021106C                 db    0
.data:000000000021106D                 db    0
.data:000000000021106E                 db    0
.data:000000000021106F                 db    0
.data:0000000000211070                 db    0
.data:0000000000211071                 db    0
.data:0000000000211072                 db    0
.data:0000000000211073                 db    0
.data:0000000000211074                 db    0
.data:0000000000211075                 db    0
.data:0000000000211076                 db    0
.data:0000000000211077                 db    0
.data:0000000000211078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000211078                                         ; quotearg_n_options:loc_83ED↑r ...
.data:000000000021107C                 align 20h
.data:0000000000211080 ; void *slotvec
.data:0000000000211080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000211080                                         ; quotearg_n_options+76↑w ...
.data:0000000000211088                 align 10h
.data:0000000000211090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000211090                                         ; quotearg_n_options+187↑r ...
.data:0000000000211098 off_211098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:00000000002110A0                 public argmatch_die
.data:00000000002110A0 argmatch_die    dq offset __argmatch_die
.data:00000000002110A0 _data           ends
.data:00000000002110A0
LOAD:00000000002110A8 ; ===========================================================================
LOAD:00000000002110A8
LOAD:00000000002110A8 ; Segment type: Pure data
LOAD:00000000002110A8 ; Segment permissions: Read/Write
LOAD:00000000002110A8 LOAD            segment byte public 'DATA' use64
LOAD:00000000002110A8                 assume cs:LOAD
LOAD:00000000002110A8                 ;org 2110A8h
LOAD:00000000002110A8                 public __bss_start
LOAD:00000000002110A8 __bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:00000000002110A8                                         ; deregister_tm_clones+8↑o ...
LOAD:00000000002110A8                                         ; Alternative name is '_edata'
LOAD:00000000002110A8                                         ; __TMC_END__
LOAD:00000000002110A8                                         ; _edata
LOAD:00000000002110A9                 db    ? ;
LOAD:00000000002110AA                 db    ? ;
LOAD:00000000002110AB                 db    ? ;
LOAD:00000000002110AC                 db    ? ;
LOAD:00000000002110AD                 db    ? ;
LOAD:00000000002110AE                 db    ? ;
LOAD:00000000002110AF                 db    ? ;
LOAD:00000000002110B0                 db    ? ;
LOAD:00000000002110B1                 db    ? ;
LOAD:00000000002110B2                 db    ? ;
LOAD:00000000002110B3                 db    ? ;
LOAD:00000000002110B4                 db    ? ;
LOAD:00000000002110B5                 db    ? ;
LOAD:00000000002110B6                 db    ? ;
LOAD:00000000002110B7                 db    ? ;
LOAD:00000000002110B8                 db    ? ;
LOAD:00000000002110B9                 db    ? ;
LOAD:00000000002110BA                 db    ? ;
LOAD:00000000002110BB                 db    ? ;
LOAD:00000000002110BC                 db    ? ;
LOAD:00000000002110BD                 db    ? ;
LOAD:00000000002110BE                 db    ? ;
LOAD:00000000002110BF                 db    ? ;
LOAD:00000000002110BF LOAD            ends
LOAD:00000000002110BF
.bss:00000000002110C0 ; ===========================================================================
.bss:00000000002110C0
.bss:00000000002110C0 ; Segment type: Uninitialized
.bss:00000000002110C0 ; Segment permissions: Read/Write
.bss:00000000002110C0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002110C0                 assume cs:_bss
.bss:00000000002110C0                 ;org 2110C0h
.bss:00000000002110C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002110C0                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:00000000002110C0 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:00000000002110C0                                         ; DATA XREF: LOAD:0000000000000A60↑o
.bss:00000000002110C0                                         ; LOAD:0000000000000AA8↑o ...
.bss:00000000002110C0                                         ; Alternative name is '__progname'
.bss:00000000002110C0                                         ; Copy of shared data
.bss:00000000002110C8                 public stdout@@GLIBC_2_2_5
.bss:00000000002110C8 ; FILE *stdout
.bss:00000000002110C8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A48↑o
.bss:00000000002110C8                                         ; usage+80↑r ...
.bss:00000000002110C8                                         ; Alternative name is 'stdout'
.bss:00000000002110C8                                         ; Copy of shared data
.bss:00000000002110D0                 public optind@@GLIBC_2_2_5
.bss:00000000002110D0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000AF0↑o
.bss:00000000002110D0                                         ; main+237↑r ...
.bss:00000000002110D0                                         ; Alternative name is 'optind'
.bss:00000000002110D0                                         ; Copy of shared data
.bss:00000000002110D4                 align 8
.bss:00000000002110D8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002110D8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002110D8                                         ; DATA XREF: LOAD:0000000000000A78↑o
.bss:00000000002110D8                                         ; LOAD:0000000000000A90↑o ...
.bss:00000000002110D8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002110D8                                         ; Copy of shared data
.bss:00000000002110E0                 public opterr@@GLIBC_2_2_5
.bss:00000000002110E0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000AC0↑o
.bss:00000000002110E0                                         ; parse_long_options+67↑r ...
.bss:00000000002110E0                                         ; Alternative name is 'opterr'
.bss:00000000002110E0                                         ; Copy of shared data
.bss:00000000002110E4                 align 20h
.bss:0000000000211100                 public stderr@@GLIBC_2_2_5
.bss:0000000000211100 ; _IO_FILE *stderr
.bss:0000000000211100 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000AD8↑o
.bss:0000000000211100                                         ; print_xfer_stats:loc_3F1B↑r ...
.bss:0000000000211100                                         ; Alternative name is 'stderr'
.bss:0000000000211100                                         ; Copy of shared data
.bss:0000000000211108 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:0000000000211108                                         ; __do_global_dtors_aux+28↑w
.bss:0000000000211109                 align 20h
.bss:0000000000211120 o_pending_7167  db    ? ;               ; DATA XREF: invalidate_cache+A8↑o
.bss:0000000000211121                 db    ? ;
.bss:0000000000211122                 db    ? ;
.bss:0000000000211123                 db    ? ;
.bss:0000000000211124                 db    ? ;
.bss:0000000000211125                 db    ? ;
.bss:0000000000211126                 db    ? ;
.bss:0000000000211127                 db    ? ;
.bss:0000000000211128 i_pending_7166  db    ? ;               ; DATA XREF: invalidate_cache+1E↑o
.bss:0000000000211129                 db    ? ;
.bss:000000000021112A                 db    ? ;
.bss:000000000021112B                 db    ? ;
.bss:000000000021112C                 db    ? ;
.bss:000000000021112D                 db    ? ;
.bss:000000000021112E                 db    ? ;
.bss:000000000021112F                 db    ? ;
.bss:0000000000211130 pending_spaces_7443 dq ?                ; DATA XREF: copy_with_unblock+39↑w
.bss:0000000000211130                                         ; copy_with_unblock+9F↑r ...
.bss:0000000000211138 ; unsigned __int64 prev_nread_7186
.bss:0000000000211138 prev_nread_7186 dq ?                    ; DATA XREF: iread+56↑r
.bss:0000000000211138                                         ; iread:loc_4AE4↑w ...
.bss:0000000000211140 saved_char      db ?                    ; DATA XREF: main+F0B↑r
.bss:0000000000211140                                         ; main+F3A↑w ...
.bss:0000000000211141 char_is_saved   db ?                    ; DATA XREF: main:loc_2DB2↑r
.bss:0000000000211141                                         ; main+F16↑w ...
.bss:0000000000211142                 align 20h
.bss:0000000000211160 trans_table     db    ? ;               ; DATA XREF: main+172↑o
.bss:0000000000211160                                         ; main+4CD↑o ...
.bss:0000000000211161                 db    ? ;
.bss:0000000000211162                 db    ? ;
.bss:0000000000211163                 db    ? ;
.bss:0000000000211164                 db    ? ;
.bss:0000000000211165                 db    ? ;
.bss:0000000000211166                 db    ? ;
.bss:0000000000211167                 db    ? ;
.bss:0000000000211168                 db    ? ;
.bss:0000000000211169                 db    ? ;
.bss:000000000021116A                 db    ? ;
.bss:000000000021116B                 db    ? ;
.bss:000000000021116C                 db    ? ;
.bss:000000000021116D                 db    ? ;
.bss:000000000021116E                 db    ? ;
.bss:000000000021116F                 db    ? ;
.bss:0000000000211170                 db    ? ;
.bss:0000000000211171                 db    ? ;
.bss:0000000000211172                 db    ? ;
.bss:0000000000211173                 db    ? ;
.bss:0000000000211174                 db    ? ;
.bss:0000000000211175                 db    ? ;
.bss:0000000000211176                 db    ? ;
.bss:0000000000211177                 db    ? ;
.bss:0000000000211178                 db    ? ;
.bss:0000000000211179                 db    ? ;
.bss:000000000021117A                 db    ? ;
.bss:000000000021117B                 db    ? ;
.bss:000000000021117C                 db    ? ;
.bss:000000000021117D                 db    ? ;
.bss:000000000021117E                 db    ? ;
.bss:000000000021117F                 db    ? ;
.bss:0000000000211180                 db    ? ;
.bss:0000000000211181                 db    ? ;
.bss:0000000000211182                 db    ? ;
.bss:0000000000211183                 db    ? ;
.bss:0000000000211184                 db    ? ;
.bss:0000000000211185                 db    ? ;
.bss:0000000000211186                 db    ? ;
.bss:0000000000211187                 db    ? ;
.bss:0000000000211188                 db    ? ;
.bss:0000000000211189                 db    ? ;
.bss:000000000021118A                 db    ? ;
.bss:000000000021118B                 db    ? ;
.bss:000000000021118C                 db    ? ;
.bss:000000000021118D                 db    ? ;
.bss:000000000021118E                 db    ? ;
.bss:000000000021118F                 db    ? ;
.bss:0000000000211190                 db    ? ;
.bss:0000000000211191                 db    ? ;
.bss:0000000000211192                 db    ? ;
.bss:0000000000211193                 db    ? ;
.bss:0000000000211194                 db    ? ;
.bss:0000000000211195                 db    ? ;
.bss:0000000000211196                 db    ? ;
.bss:0000000000211197                 db    ? ;
.bss:0000000000211198                 db    ? ;
.bss:0000000000211199                 db    ? ;
.bss:000000000021119A                 db    ? ;
.bss:000000000021119B                 db    ? ;
.bss:000000000021119C                 db    ? ;
.bss:000000000021119D                 db    ? ;
.bss:000000000021119E                 db    ? ;
.bss:000000000021119F                 db    ? ;
.bss:00000000002111A0                 db    ? ;
.bss:00000000002111A1                 db    ? ;
.bss:00000000002111A2                 db    ? ;
.bss:00000000002111A3                 db    ? ;
.bss:00000000002111A4                 db    ? ;
.bss:00000000002111A5                 db    ? ;
.bss:00000000002111A6                 db    ? ;
.bss:00000000002111A7                 db    ? ;
.bss:00000000002111A8                 db    ? ;
.bss:00000000002111A9                 db    ? ;
.bss:00000000002111AA                 db    ? ;
.bss:00000000002111AB                 db    ? ;
.bss:00000000002111AC                 db    ? ;
.bss:00000000002111AD                 db    ? ;
.bss:00000000002111AE                 db    ? ;
.bss:00000000002111AF                 db    ? ;
.bss:00000000002111B0                 db    ? ;
.bss:00000000002111B1                 db    ? ;
.bss:00000000002111B2                 db    ? ;
.bss:00000000002111B3                 db    ? ;
.bss:00000000002111B4                 db    ? ;
.bss:00000000002111B5                 db    ? ;
.bss:00000000002111B6                 db    ? ;
.bss:00000000002111B7                 db    ? ;
.bss:00000000002111B8                 db    ? ;
.bss:00000000002111B9                 db    ? ;
.bss:00000000002111BA                 db    ? ;
.bss:00000000002111BB                 db    ? ;
.bss:00000000002111BC                 db    ? ;
.bss:00000000002111BD                 db    ? ;
.bss:00000000002111BE                 db    ? ;
.bss:00000000002111BF                 db    ? ;
.bss:00000000002111C0                 db    ? ;
.bss:00000000002111C1                 db    ? ;
.bss:00000000002111C2                 db    ? ;
.bss:00000000002111C3                 db    ? ;
.bss:00000000002111C4                 db    ? ;
.bss:00000000002111C5                 db    ? ;
.bss:00000000002111C6                 db    ? ;
.bss:00000000002111C7                 db    ? ;
.bss:00000000002111C8                 db    ? ;
.bss:00000000002111C9                 db    ? ;
.bss:00000000002111CA                 db    ? ;
.bss:00000000002111CB                 db    ? ;
.bss:00000000002111CC                 db    ? ;
.bss:00000000002111CD                 db    ? ;
.bss:00000000002111CE                 db    ? ;
.bss:00000000002111CF                 db    ? ;
.bss:00000000002111D0                 db    ? ;
.bss:00000000002111D1                 db    ? ;
.bss:00000000002111D2                 db    ? ;
.bss:00000000002111D3                 db    ? ;
.bss:00000000002111D4                 db    ? ;
.bss:00000000002111D5                 db    ? ;
.bss:00000000002111D6                 db    ? ;
.bss:00000000002111D7                 db    ? ;
.bss:00000000002111D8                 db    ? ;
.bss:00000000002111D9                 db    ? ;
.bss:00000000002111DA                 db    ? ;
.bss:00000000002111DB                 db    ? ;
.bss:00000000002111DC                 db    ? ;
.bss:00000000002111DD                 db    ? ;
.bss:00000000002111DE                 db    ? ;
.bss:00000000002111DF                 db    ? ;
.bss:00000000002111E0                 db    ? ;
.bss:00000000002111E1                 db    ? ;
.bss:00000000002111E2                 db    ? ;
.bss:00000000002111E3                 db    ? ;
.bss:00000000002111E4                 db    ? ;
.bss:00000000002111E5                 db    ? ;
.bss:00000000002111E6                 db    ? ;
.bss:00000000002111E7                 db    ? ;
.bss:00000000002111E8                 db    ? ;
.bss:00000000002111E9                 db    ? ;
.bss:00000000002111EA                 db    ? ;
.bss:00000000002111EB                 db    ? ;
.bss:00000000002111EC                 db    ? ;
.bss:00000000002111ED                 db    ? ;
.bss:00000000002111EE                 db    ? ;
.bss:00000000002111EF                 db    ? ;
.bss:00000000002111F0                 db    ? ;
.bss:00000000002111F1                 db    ? ;
.bss:00000000002111F2                 db    ? ;
.bss:00000000002111F3                 db    ? ;
.bss:00000000002111F4                 db    ? ;
.bss:00000000002111F5                 db    ? ;
.bss:00000000002111F6                 db    ? ;
.bss:00000000002111F7                 db    ? ;
.bss:00000000002111F8                 db    ? ;
.bss:00000000002111F9                 db    ? ;
.bss:00000000002111FA                 db    ? ;
.bss:00000000002111FB                 db    ? ;
.bss:00000000002111FC                 db    ? ;
.bss:00000000002111FD                 db    ? ;
.bss:00000000002111FE                 db    ? ;
.bss:00000000002111FF                 db    ? ;
.bss:0000000000211200                 db    ? ;
.bss:0000000000211201                 db    ? ;
.bss:0000000000211202                 db    ? ;
.bss:0000000000211203                 db    ? ;
.bss:0000000000211204                 db    ? ;
.bss:0000000000211205                 db    ? ;
.bss:0000000000211206                 db    ? ;
.bss:0000000000211207                 db    ? ;
.bss:0000000000211208                 db    ? ;
.bss:0000000000211209                 db    ? ;
.bss:000000000021120A                 db    ? ;
.bss:000000000021120B                 db    ? ;
.bss:000000000021120C                 db    ? ;
.bss:000000000021120D                 db    ? ;
.bss:000000000021120E                 db    ? ;
.bss:000000000021120F                 db    ? ;
.bss:0000000000211210                 db    ? ;
.bss:0000000000211211                 db    ? ;
.bss:0000000000211212                 db    ? ;
.bss:0000000000211213                 db    ? ;
.bss:0000000000211214                 db    ? ;
.bss:0000000000211215                 db    ? ;
.bss:0000000000211216                 db    ? ;
.bss:0000000000211217                 db    ? ;
.bss:0000000000211218                 db    ? ;
.bss:0000000000211219                 db    ? ;
.bss:000000000021121A                 db    ? ;
.bss:000000000021121B                 db    ? ;
.bss:000000000021121C                 db    ? ;
.bss:000000000021121D                 db    ? ;
.bss:000000000021121E                 db    ? ;
.bss:000000000021121F                 db    ? ;
.bss:0000000000211220                 db    ? ;
.bss:0000000000211221                 db    ? ;
.bss:0000000000211222                 db    ? ;
.bss:0000000000211223                 db    ? ;
.bss:0000000000211224                 db    ? ;
.bss:0000000000211225                 db    ? ;
.bss:0000000000211226                 db    ? ;
.bss:0000000000211227                 db    ? ;
.bss:0000000000211228                 db    ? ;
.bss:0000000000211229                 db    ? ;
.bss:000000000021122A                 db    ? ;
.bss:000000000021122B                 db    ? ;
.bss:000000000021122C                 db    ? ;
.bss:000000000021122D                 db    ? ;
.bss:000000000021122E                 db    ? ;
.bss:000000000021122F                 db    ? ;
.bss:0000000000211230                 db    ? ;
.bss:0000000000211231                 db    ? ;
.bss:0000000000211232                 db    ? ;
.bss:0000000000211233                 db    ? ;
.bss:0000000000211234                 db    ? ;
.bss:0000000000211235                 db    ? ;
.bss:0000000000211236                 db    ? ;
.bss:0000000000211237                 db    ? ;
.bss:0000000000211238                 db    ? ;
.bss:0000000000211239                 db    ? ;
.bss:000000000021123A                 db    ? ;
.bss:000000000021123B                 db    ? ;
.bss:000000000021123C                 db    ? ;
.bss:000000000021123D                 db    ? ;
.bss:000000000021123E                 db    ? ;
.bss:000000000021123F                 db    ? ;
.bss:0000000000211240                 db    ? ;
.bss:0000000000211241                 db    ? ;
.bss:0000000000211242                 db    ? ;
.bss:0000000000211243                 db    ? ;
.bss:0000000000211244                 db    ? ;
.bss:0000000000211245                 db    ? ;
.bss:0000000000211246                 db    ? ;
.bss:0000000000211247                 db    ? ;
.bss:0000000000211248                 db    ? ;
.bss:0000000000211249                 db    ? ;
.bss:000000000021124A                 db    ? ;
.bss:000000000021124B                 db    ? ;
.bss:000000000021124C                 db    ? ;
.bss:000000000021124D                 db    ? ;
.bss:000000000021124E                 db    ? ;
.bss:000000000021124F                 db    ? ;
.bss:0000000000211250                 db    ? ;
.bss:0000000000211251                 db    ? ;
.bss:0000000000211252                 db    ? ;
.bss:0000000000211253                 db    ? ;
.bss:0000000000211254                 db    ? ;
.bss:0000000000211255                 db    ? ;
.bss:0000000000211256                 db    ? ;
.bss:0000000000211257                 db    ? ;
.bss:0000000000211258                 db    ? ;
.bss:0000000000211259                 db    ? ;
.bss:000000000021125A                 db    ? ;
.bss:000000000021125B                 db    ? ;
.bss:000000000021125C                 db    ? ;
.bss:000000000021125D                 db    ? ;
.bss:000000000021125E                 db    ? ;
.bss:000000000021125F                 db    ? ;
.bss:0000000000211260 iread_fnc       dq ?                    ; DATA XREF: main:loc_2284↑w
.bss:0000000000211260                                         ; main+8B8↑r ...
.bss:0000000000211268 o_nocache_eof   db ?                    ; DATA XREF: main:loc_2361↑w
.bss:0000000000211268                                         ; main+4B7↑w ...
.bss:0000000000211269 i_nocache_eof   db ?                    ; DATA XREF: main:loc_2325↑w
.bss:0000000000211269                                         ; main+47B↑w ...
.bss:000000000021126A o_nocache       db ?                    ; DATA XREF: main+49B↑w
.bss:000000000021126A                                         ; main:loc_2F30↑r ...
.bss:000000000021126B i_nocache       db ?                    ; DATA XREF: main+45F↑w
.bss:000000000021126B                                         ; main:loc_27AE↑r ...
.bss:000000000021126C info_signal_count dd ?                  ; DATA XREF: siginfo_handler↑r
.bss:000000000021126C                                         ; siginfo_handler+9↑w ...
.bss:0000000000211270 ; int interrupt_signal
.bss:0000000000211270 interrupt_signal dd ?                   ; DATA XREF: interrupt_handler↑w
.bss:0000000000211270                                         ; process_signals:loc_4960↑r ...
.bss:0000000000211274                 align 20h
.bss:0000000000211280 ; sigset_t caught_signals
.bss:0000000000211280 caught_signals  sigset_t <?>            ; DATA XREF: main+36↑o
.bss:0000000000211280                                         ; main+6F↑o ...
.bss:0000000000211300 col             dq ?                    ; DATA XREF: main+1369↑r
.bss:0000000000211300                                         ; main:loc_3357↑r ...
.bss:0000000000211308 oc              dq ?                    ; DATA XREF: main+D24↑r
.bss:0000000000211308                                         ; main+D52↑w ...
.bss:0000000000211310 ; void *obuf
.bss:0000000000211310 obuf            dq ?                    ; DATA XREF: main+79F↑r
.bss:0000000000211310                                         ; main+7B7↑r ...
.bss:0000000000211318 ; void *ibuf
.bss:0000000000211318 ibuf            dq ?                    ; DATA XREF: main:loc_26C2↑r
.bss:0000000000211318                                         ; main+885↑r ...
.bss:0000000000211320 ; unsigned __int64 r_truncate
.bss:0000000000211320 r_truncate      dq ?                    ; DATA XREF: print_stats_part_2+92↑r
.bss:0000000000211320                                         ; copy_with_block:loc_5C08↑w
.bss:0000000000211328 warn_partial_read db ?                  ; DATA XREF: main+3CD↑w
.bss:0000000000211328                                         ; main+C14↑w ...
.bss:0000000000211329 input_offset_overflow db ?              ; DATA XREF: main+741↑r
.bss:0000000000211329                                         ; main+8F7↑w ...
.bss:000000000021132A                 align 10h
.bss:0000000000211330 input_offset    dq ?                    ; DATA XREF: main+5FB↑w
.bss:0000000000211330                                         ; main+70C↑r ...
.bss:0000000000211338 input_seek_errno dd ?                   ; DATA XREF: main+609↑w
.bss:0000000000211338                                         ; main+E15↑r ...
.bss:000000000021133C input_seekable  db ?                    ; DATA XREF: main+5E9↑w
.bss:000000000021133C                                         ; main+E08↑r ...
.bss:000000000021133D                 align 20h
.bss:0000000000211340 progress_len    dd ?                    ; DATA XREF: print_xfer_stats+198↑r
.bss:0000000000211340                                         ; print_xfer_stats:loc_3F56↑w ...
.bss:0000000000211344                 align 8
.bss:0000000000211348 next_time       dq ?                    ; DATA XREF: main+6DC↑w
.bss:0000000000211348                                         ; main+9D2↑r ...
.bss:0000000000211350 start_time      dq ?                    ; DATA XREF: main+6CF↑w
.bss:0000000000211350                                         ; print_xfer_stats+80↑r
.bss:0000000000211358 ; unsigned __int64 w_bytes
.bss:0000000000211358 w_bytes         dq ?                    ; DATA XREF: main+1002↑w
.bss:0000000000211358                                         ; main+17AA↑w ...
.bss:0000000000211360 r_full          dq ?                    ; DATA XREF: main+854↑r
.bss:0000000000211360                                         ; main:loc_2D60↑w ...
.bss:0000000000211368 r_partial       dq ?                    ; DATA XREF: main+85D↑r
.bss:0000000000211368                                         ; main+921↑w ...
.bss:0000000000211370 w_full          dq ?                    ; DATA XREF: main:loc_34C0↑w
.bss:0000000000211370                                         ; print_stats_part_2+55↑r ...
.bss:0000000000211378 w_partial       dq ?                    ; DATA XREF: main+1446↑w
.bss:0000000000211378                                         ; main+17B6↑w ...
.bss:0000000000211380 translation_needed db ?                 ; DATA XREF: main+4FB↑w
.bss:0000000000211380                                         ; main:loc_23EA↑w ...
.bss:0000000000211381                 align 4
.bss:0000000000211384 output_flags    dd ?                    ; DATA XREF: main:loc_21D9↑r
.bss:0000000000211384                                         ; main+4C1↑w ...
.bss:0000000000211388 ; int input_flags
.bss:0000000000211388 input_flags     dd ?                    ; DATA XREF: main:loc_21C1↑r
.bss:0000000000211388                                         ; main+323↑w ...
.bss:000000000021138C conversions_mask dd ?                   ; DATA XREF: main+30A↑w
.bss:000000000021138C                                         ; main:loc_2257↑r ...
.bss:0000000000211390 max_bytes       dq ?                    ; DATA XREF: main+38D↑w
.bss:0000000000211390                                         ; main+46A↑r ...
.bss:0000000000211398 final_op_was_seek db ?                  ; DATA XREF: main:loc_3198↑r
.bss:0000000000211398                                         ; iwrite_constprop_7+52↑w ...
.bss:0000000000211399                 align 20h
.bss:00000000002113A0 seek_bytes      dq ?                    ; DATA XREF: main+6A3↑r
.bss:00000000002113A0                                         ; main+755↑r ...
.bss:00000000002113A8 seek_records    dq ?                    ; DATA XREF: main+636↑r
.bss:00000000002113A8                                         ; main:loc_2521↑r ...
.bss:00000000002113B0 skip_bytes      dq ?                    ; DATA XREF: main+6E8↑r
.bss:00000000002113B0                                         ; main+700↑o ...
.bss:00000000002113B8 skip_records    dq ?                    ; DATA XREF: main+6C8↑r
.bss:00000000002113B8                                         ; main+B76↑w ...
.bss:00000000002113C0 conversion_blocksize dq ?               ; DATA XREF: main:loc_21B0↑r
.bss:00000000002113C0                                         ; main:loc_333E↑r ...
.bss:00000000002113C8 ; size_t output_blocksize
.bss:00000000002113C8 output_blocksize dq ?                   ; DATA XREF: main+2F2↑w
.bss:00000000002113C8                                         ; main+686↑r ...
.bss:00000000002113D0 ; size_t input_blocksize
.bss:00000000002113D0 input_blocksize dq ?                    ; DATA XREF: main+2F9↑w
.bss:00000000002113D0                                         ; main+37F↑r ...
.bss:00000000002113D8 page_size       dq ?                    ; DATA XREF: main+1CC↑w
.bss:00000000002113D8                                         ; main:loc_35BF↑r ...
.bss:00000000002113E0 ; char *output_file
.bss:00000000002113E0 output_file     dq ?                    ; DATA XREF: main+5D1↑r
.bss:00000000002113E0                                         ; main+771↑r ...
.bss:00000000002113E8 ; char *input_file
.bss:00000000002113E8 input_file      dq ?                    ; DATA XREF: main:loc_2189↑w
.bss:00000000002113E8                                         ; main:loc_2438↑r ...
.bss:00000000002113F0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002113F0                                         ; close_stdout+1B↑r
.bss:00000000002113F1                 align 8
.bss:00000000002113F8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002113F8                                         ; close_stdout+56↑r
.bss:0000000000211400                 public program_name
.bss:0000000000211400 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000211400                                         ; set_program_name:loc_700D↑w
.bss:0000000000211408                 align 20h
.bss:0000000000211420 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000211420                                         ; quotearg_free+46↑o ...
.bss:0000000000211421                 db    ? ;
.bss:0000000000211422                 db    ? ;
.bss:0000000000211423                 db    ? ;
.bss:0000000000211424                 db    ? ;
.bss:0000000000211425                 db    ? ;
.bss:0000000000211426                 db    ? ;
.bss:0000000000211427                 db    ? ;
.bss:0000000000211428                 db    ? ;
.bss:0000000000211429                 db    ? ;
.bss:000000000021142A                 db    ? ;
.bss:000000000021142B                 db    ? ;
.bss:000000000021142C                 db    ? ;
.bss:000000000021142D                 db    ? ;
.bss:000000000021142E                 db    ? ;
.bss:000000000021142F                 db    ? ;
.bss:0000000000211430                 db    ? ;
.bss:0000000000211431                 db    ? ;
.bss:0000000000211432                 db    ? ;
.bss:0000000000211433                 db    ? ;
.bss:0000000000211434                 db    ? ;
.bss:0000000000211435                 db    ? ;
.bss:0000000000211436                 db    ? ;
.bss:0000000000211437                 db    ? ;
.bss:0000000000211438                 db    ? ;
.bss:0000000000211439                 db    ? ;
.bss:000000000021143A                 db    ? ;
.bss:000000000021143B                 db    ? ;
.bss:000000000021143C                 db    ? ;
.bss:000000000021143D                 db    ? ;
.bss:000000000021143E                 db    ? ;
.bss:000000000021143F                 db    ? ;
.bss:0000000000211440                 db    ? ;
.bss:0000000000211441                 db    ? ;
.bss:0000000000211442                 db    ? ;
.bss:0000000000211443                 db    ? ;
.bss:0000000000211444                 db    ? ;
.bss:0000000000211445                 db    ? ;
.bss:0000000000211446                 db    ? ;
.bss:0000000000211447                 db    ? ;
.bss:0000000000211448                 db    ? ;
.bss:0000000000211449                 db    ? ;
.bss:000000000021144A                 db    ? ;
.bss:000000000021144B                 db    ? ;
.bss:000000000021144C                 db    ? ;
.bss:000000000021144D                 db    ? ;
.bss:000000000021144E                 db    ? ;
.bss:000000000021144F                 db    ? ;
.bss:0000000000211450                 db    ? ;
.bss:0000000000211451                 db    ? ;
.bss:0000000000211452                 db    ? ;
.bss:0000000000211453                 db    ? ;
.bss:0000000000211454                 db    ? ;
.bss:0000000000211455                 db    ? ;
.bss:0000000000211456                 db    ? ;
.bss:0000000000211457                 db    ? ;
.bss:0000000000211458                 db    ? ;
.bss:0000000000211459                 db    ? ;
.bss:000000000021145A                 db    ? ;
.bss:000000000021145B                 db    ? ;
.bss:000000000021145C                 db    ? ;
.bss:000000000021145D                 db    ? ;
.bss:000000000021145E                 db    ? ;
.bss:000000000021145F                 db    ? ;
.bss:0000000000211460                 db    ? ;
.bss:0000000000211461                 db    ? ;
.bss:0000000000211462                 db    ? ;
.bss:0000000000211463                 db    ? ;
.bss:0000000000211464                 db    ? ;
.bss:0000000000211465                 db    ? ;
.bss:0000000000211466                 db    ? ;
.bss:0000000000211467                 db    ? ;
.bss:0000000000211468                 db    ? ;
.bss:0000000000211469                 db    ? ;
.bss:000000000021146A                 db    ? ;
.bss:000000000021146B                 db    ? ;
.bss:000000000021146C                 db    ? ;
.bss:000000000021146D                 db    ? ;
.bss:000000000021146E                 db    ? ;
.bss:000000000021146F                 db    ? ;
.bss:0000000000211470                 db    ? ;
.bss:0000000000211471                 db    ? ;
.bss:0000000000211472                 db    ? ;
.bss:0000000000211473                 db    ? ;
.bss:0000000000211474                 db    ? ;
.bss:0000000000211475                 db    ? ;
.bss:0000000000211476                 db    ? ;
.bss:0000000000211477                 db    ? ;
.bss:0000000000211478                 db    ? ;
.bss:0000000000211479                 db    ? ;
.bss:000000000021147A                 db    ? ;
.bss:000000000021147B                 db    ? ;
.bss:000000000021147C                 db    ? ;
.bss:000000000021147D                 db    ? ;
.bss:000000000021147E                 db    ? ;
.bss:000000000021147F                 db    ? ;
.bss:0000000000211480                 db    ? ;
.bss:0000000000211481                 db    ? ;
.bss:0000000000211482                 db    ? ;
.bss:0000000000211483                 db    ? ;
.bss:0000000000211484                 db    ? ;
.bss:0000000000211485                 db    ? ;
.bss:0000000000211486                 db    ? ;
.bss:0000000000211487                 db    ? ;
.bss:0000000000211488                 db    ? ;
.bss:0000000000211489                 db    ? ;
.bss:000000000021148A                 db    ? ;
.bss:000000000021148B                 db    ? ;
.bss:000000000021148C                 db    ? ;
.bss:000000000021148D                 db    ? ;
.bss:000000000021148E                 db    ? ;
.bss:000000000021148F                 db    ? ;
.bss:0000000000211490                 db    ? ;
.bss:0000000000211491                 db    ? ;
.bss:0000000000211492                 db    ? ;
.bss:0000000000211493                 db    ? ;
.bss:0000000000211494                 db    ? ;
.bss:0000000000211495                 db    ? ;
.bss:0000000000211496                 db    ? ;
.bss:0000000000211497                 db    ? ;
.bss:0000000000211498                 db    ? ;
.bss:0000000000211499                 db    ? ;
.bss:000000000021149A                 db    ? ;
.bss:000000000021149B                 db    ? ;
.bss:000000000021149C                 db    ? ;
.bss:000000000021149D                 db    ? ;
.bss:000000000021149E                 db    ? ;
.bss:000000000021149F                 db    ? ;
.bss:00000000002114A0                 db    ? ;
.bss:00000000002114A1                 db    ? ;
.bss:00000000002114A2                 db    ? ;
.bss:00000000002114A3                 db    ? ;
.bss:00000000002114A4                 db    ? ;
.bss:00000000002114A5                 db    ? ;
.bss:00000000002114A6                 db    ? ;
.bss:00000000002114A7                 db    ? ;
.bss:00000000002114A8                 db    ? ;
.bss:00000000002114A9                 db    ? ;
.bss:00000000002114AA                 db    ? ;
.bss:00000000002114AB                 db    ? ;
.bss:00000000002114AC                 db    ? ;
.bss:00000000002114AD                 db    ? ;
.bss:00000000002114AE                 db    ? ;
.bss:00000000002114AF                 db    ? ;
.bss:00000000002114B0                 db    ? ;
.bss:00000000002114B1                 db    ? ;
.bss:00000000002114B2                 db    ? ;
.bss:00000000002114B3                 db    ? ;
.bss:00000000002114B4                 db    ? ;
.bss:00000000002114B5                 db    ? ;
.bss:00000000002114B6                 db    ? ;
.bss:00000000002114B7                 db    ? ;
.bss:00000000002114B8                 db    ? ;
.bss:00000000002114B9                 db    ? ;
.bss:00000000002114BA                 db    ? ;
.bss:00000000002114BB                 db    ? ;
.bss:00000000002114BC                 db    ? ;
.bss:00000000002114BD                 db    ? ;
.bss:00000000002114BE                 db    ? ;
.bss:00000000002114BF                 db    ? ;
.bss:00000000002114C0                 db    ? ;
.bss:00000000002114C1                 db    ? ;
.bss:00000000002114C2                 db    ? ;
.bss:00000000002114C3                 db    ? ;
.bss:00000000002114C4                 db    ? ;
.bss:00000000002114C5                 db    ? ;
.bss:00000000002114C6                 db    ? ;
.bss:00000000002114C7                 db    ? ;
.bss:00000000002114C8                 db    ? ;
.bss:00000000002114C9                 db    ? ;
.bss:00000000002114CA                 db    ? ;
.bss:00000000002114CB                 db    ? ;
.bss:00000000002114CC                 db    ? ;
.bss:00000000002114CD                 db    ? ;
.bss:00000000002114CE                 db    ? ;
.bss:00000000002114CF                 db    ? ;
.bss:00000000002114D0                 db    ? ;
.bss:00000000002114D1                 db    ? ;
.bss:00000000002114D2                 db    ? ;
.bss:00000000002114D3                 db    ? ;
.bss:00000000002114D4                 db    ? ;
.bss:00000000002114D5                 db    ? ;
.bss:00000000002114D6                 db    ? ;
.bss:00000000002114D7                 db    ? ;
.bss:00000000002114D8                 db    ? ;
.bss:00000000002114D9                 db    ? ;
.bss:00000000002114DA                 db    ? ;
.bss:00000000002114DB                 db    ? ;
.bss:00000000002114DC                 db    ? ;
.bss:00000000002114DD                 db    ? ;
.bss:00000000002114DE                 db    ? ;
.bss:00000000002114DF                 db    ? ;
.bss:00000000002114E0                 db    ? ;
.bss:00000000002114E1                 db    ? ;
.bss:00000000002114E2                 db    ? ;
.bss:00000000002114E3                 db    ? ;
.bss:00000000002114E4                 db    ? ;
.bss:00000000002114E5                 db    ? ;
.bss:00000000002114E6                 db    ? ;
.bss:00000000002114E7                 db    ? ;
.bss:00000000002114E8                 db    ? ;
.bss:00000000002114E9                 db    ? ;
.bss:00000000002114EA                 db    ? ;
.bss:00000000002114EB                 db    ? ;
.bss:00000000002114EC                 db    ? ;
.bss:00000000002114ED                 db    ? ;
.bss:00000000002114EE                 db    ? ;
.bss:00000000002114EF                 db    ? ;
.bss:00000000002114F0                 db    ? ;
.bss:00000000002114F1                 db    ? ;
.bss:00000000002114F2                 db    ? ;
.bss:00000000002114F3                 db    ? ;
.bss:00000000002114F4                 db    ? ;
.bss:00000000002114F5                 db    ? ;
.bss:00000000002114F6                 db    ? ;
.bss:00000000002114F7                 db    ? ;
.bss:00000000002114F8                 db    ? ;
.bss:00000000002114F9                 db    ? ;
.bss:00000000002114FA                 db    ? ;
.bss:00000000002114FB                 db    ? ;
.bss:00000000002114FC                 db    ? ;
.bss:00000000002114FD                 db    ? ;
.bss:00000000002114FE                 db    ? ;
.bss:00000000002114FF                 db    ? ;
.bss:0000000000211500                 db    ? ;
.bss:0000000000211501                 db    ? ;
.bss:0000000000211502                 db    ? ;
.bss:0000000000211503                 db    ? ;
.bss:0000000000211504                 db    ? ;
.bss:0000000000211505                 db    ? ;
.bss:0000000000211506                 db    ? ;
.bss:0000000000211507                 db    ? ;
.bss:0000000000211508                 db    ? ;
.bss:0000000000211509                 db    ? ;
.bss:000000000021150A                 db    ? ;
.bss:000000000021150B                 db    ? ;
.bss:000000000021150C                 db    ? ;
.bss:000000000021150D                 db    ? ;
.bss:000000000021150E                 db    ? ;
.bss:000000000021150F                 db    ? ;
.bss:0000000000211510                 db    ? ;
.bss:0000000000211511                 db    ? ;
.bss:0000000000211512                 db    ? ;
.bss:0000000000211513                 db    ? ;
.bss:0000000000211514                 db    ? ;
.bss:0000000000211515                 db    ? ;
.bss:0000000000211516                 db    ? ;
.bss:0000000000211517                 db    ? ;
.bss:0000000000211518                 db    ? ;
.bss:0000000000211519                 db    ? ;
.bss:000000000021151A                 db    ? ;
.bss:000000000021151B                 db    ? ;
.bss:000000000021151C                 db    ? ;
.bss:000000000021151D                 db    ? ;
.bss:000000000021151E                 db    ? ;
.bss:000000000021151F                 db    ? ;
.bss:0000000000211520 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000211520                                         ; get_quoting_style↑o ...
.bss:0000000000211530 xmmword_211530  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000211530                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000211540 xmmword_211540  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000211540                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000211550 qword_211550    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000211550                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000211558 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:0000000000211558                                         ; rpl_fcntl:loc_9D7F↑w ...
.bss:000000000021155C                 align 20h
.bss:000000000021155C _bss            ends
.bss:000000000021155C
.prgend:0000000000211560 ; ===========================================================================
.prgend:0000000000211560
.prgend:0000000000211560 ; Segment type: Zero-length
.prgend:0000000000211560 _prgend         segment byte public '' use64
.prgend:0000000000211560 _end            label byte
.prgend:0000000000211560 _prgend         ends
.prgend:0000000000211560
extern:0000000000211568 ; ===========================================================================
extern:0000000000211568
extern:0000000000211568 ; Segment type: Externs
extern:0000000000211568 ; extern
extern:0000000000211568 ; const __int32_t **_ctype_toupper_loc(void)
extern:0000000000211568                 extrn __ctype_toupper_loc:near
extern:0000000000211568                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:0000000000211568                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:0000000000211570 ; char *getenv(const char *name)
extern:0000000000211570                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000211570                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000211578 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
extern:0000000000211578                 extrn sigprocmask:near  ; CODE XREF: _sigprocmask↑j
extern:0000000000211578                                         ; DATA XREF: .got:sigprocmask_ptr↑o
extern:0000000000211580                 extrn __snprintf_chk:near
extern:0000000000211580                                         ; CODE XREF: ___snprintf_chk↑j
extern:0000000000211580                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:0000000000211588 ; int raise(int sig)
extern:0000000000211588                 extrn raise:near        ; CODE XREF: _raise↑j
extern:0000000000211588                                         ; DATA XREF: .got:raise_ptr↑o
extern:0000000000211590 ; void free(void *ptr)
extern:0000000000211590                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000211590                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000211598 ; void __noreturn abort(void)
extern:0000000000211598                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000211598                                         ; DATA XREF: .got:abort_ptr↑o
extern:00000000002115A0 ; int *_errno_location(void)
extern:00000000002115A0                 extrn __errno_location:near
extern:00000000002115A0                                         ; CODE XREF: ___errno_location↑j
extern:00000000002115A0                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002115A8 ; int fdatasync(int fildes)
extern:00000000002115A8                 extrn fdatasync:near    ; CODE XREF: _fdatasync↑j
extern:00000000002115A8                                         ; DATA XREF: .got:fdatasync_ptr↑o
extern:00000000002115B0 ; void error_at_line(int status, int errnum, const char *fname, unsigned int lineno, const char *format, ...)
extern:00000000002115B0                 extrn error_at_line:near
extern:00000000002115B0                                         ; CODE XREF: _error_at_line↑j
extern:00000000002115B0                                         ; DATA XREF: .got:error_at_line_ptr↑o
extern:00000000002115B8 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002115B8                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002115B8                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002115C0 ; void __noreturn exit(int status)
extern:00000000002115C0                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002115C0                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002115C8 ; size_t _fpending(FILE *fp)
extern:00000000002115C8                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002115C8                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002115D0 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
extern:00000000002115D0                 extrn sigaction:near    ; CODE XREF: _sigaction↑j
extern:00000000002115D0                                         ; DATA XREF: .got:sigaction_ptr↑o
extern:00000000002115D8 ; struct lconv *localeconv(void)
extern:00000000002115D8                 extrn localeconv:near   ; CODE XREF: _localeconv↑j
extern:00000000002115D8                                         ; DATA XREF: .got:localeconv_ptr↑o
extern:00000000002115E0 ; int fcntl(int fd, int cmd, ...)
extern:00000000002115E0                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:00000000002115E0                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:00000000002115E8 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
extern:00000000002115E8                 extrn clock_gettime:near
extern:00000000002115E8                                         ; CODE XREF: _clock_gettime↑j
extern:00000000002115E8                                         ; DATA XREF: .got:clock_gettime_ptr↑o
extern:00000000002115F0 ; ssize_t write(int fd, const void *buf, size_t n)
extern:00000000002115F0                 extrn write:near        ; CODE XREF: _write↑j
extern:00000000002115F0                                         ; DATA XREF: .got:write_ptr↑o
extern:00000000002115F8 ; char *textdomain(const char *domainname)
extern:00000000002115F8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002115F8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000211600 ; int fclose(FILE *stream)
extern:0000000000211600                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000211600                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000211608 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000211608                 extrn bindtextdomain:near
extern:0000000000211608                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000211608                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000211610 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000211610                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000211610                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000211618 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000211618                 extrn __ctype_get_mb_cur_max:near
extern:0000000000211618                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000211618                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000211620 ; size_t strlen(const char *s)
extern:0000000000211620                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000211620                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000211628                 extrn __stack_chk_fail:near
extern:0000000000211628                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000211628                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000211630 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000211630                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000211630                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000211638 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000211638                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000211638                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000211640 ; int dup2(int fd, int fd2)
extern:0000000000211640                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:0000000000211640                                         ; DATA XREF: .got:dup2_ptr↑o
extern:0000000000211648 ; char *strchr(const char *s, int c)
extern:0000000000211648                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000211648                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000211650 ; int _overflow(_IO_FILE *, int)
extern:0000000000211650                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000211650                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000211658 ; char *strrchr(const char *s, int c)
extern:0000000000211658                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000211658                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000211660 ; int ftruncate(int fd, __off_t length)
extern:0000000000211660                 extrn ftruncate:near    ; CODE XREF: _ftruncate↑j
extern:0000000000211660                                         ; DATA XREF: .got:ftruncate_ptr↑o
extern:0000000000211668 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000211668                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000211668                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000211670 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000211670                 extrn __assert_fail:near
extern:0000000000211670                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000211670                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000211678 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000211678                 extrn __strtoul_internal:near
extern:0000000000211678                                         ; CODE XREF: ___strtoul_internal↑j
extern:0000000000211678                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:0000000000211680 ; void *memset(void *s, int c, size_t n)
extern:0000000000211680                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000211680                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000211688 ; int ioctl(int fd, unsigned __int64 request, ...)
extern:0000000000211688                 extrn ioctl:near        ; CODE XREF: _ioctl↑j
extern:0000000000211688                                         ; DATA XREF: .got:ioctl_ptr↑o
extern:0000000000211690 ; int close(int fd)
extern:0000000000211690                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000211690                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000211698 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:0000000000211698                 extrn posix_fadvise:near
extern:0000000000211698                                         ; CODE XREF: _posix_fadvise↑j
extern:0000000000211698                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:00000000002116A0 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:00000000002116A0                 extrn read:near         ; CODE XREF: _read↑j
extern:00000000002116A0                                         ; DATA XREF: .got:read_ptr↑o
extern:00000000002116A8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002116A8                 extrn __libc_start_main:near
extern:00000000002116A8                                         ; CODE XREF: start+24↑p
extern:00000000002116A8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002116B0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002116B0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002116B0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002116B8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002116B8                 extrn fputs_unlocked:near
extern:00000000002116B8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002116B8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002116C0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002116C0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002116C0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002116C8                 extrn __memcpy_chk:near ; CODE XREF: ___memcpy_chk↑j
extern:00000000002116C8                                         ; DATA XREF: .got:__memcpy_chk_ptr↑o
extern:00000000002116D0 ; int sigemptyset(sigset_t *set)
extern:00000000002116D0                 extrn sigemptyset:near  ; CODE XREF: _sigemptyset↑j
extern:00000000002116D0                                         ; DATA XREF: .got:sigemptyset_ptr↑o
extern:00000000002116D8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002116D8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002116D8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002116E0 ; int fileno(FILE *stream)
extern:00000000002116E0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002116E0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002116E8 ; void *malloc(size_t size)
extern:00000000002116E8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002116E8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002116F0 ; int fflush(FILE *stream)
extern:00000000002116F0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002116F0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002116F8 ; char *nl_langinfo(nl_item item)
extern:00000000002116F8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002116F8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000211700 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:0000000000211700                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:0000000000211700                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:0000000000211708 ; int _freading(FILE *fp)
extern:0000000000211708                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000211708                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000211710 ; void *realloc(void *ptr, size_t size)
extern:0000000000211710                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000211710                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000211718 ; char *setlocale(int category, const char *locale)
extern:0000000000211718                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000211718                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000211720                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000211720                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000211728 ; void *memmove(void *dest, const void *src, size_t n)
extern:0000000000211728                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:0000000000211728                                         ; DATA XREF: .got:memmove_ptr↑o
extern:0000000000211730 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000211730                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000211730                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000211738 ; int fsync(int fd)
extern:0000000000211738                 extrn fsync:near        ; CODE XREF: _fsync↑j
extern:0000000000211738                                         ; DATA XREF: .got:fsync_ptr↑o
extern:0000000000211740 ; int open(const char *file, int oflag, ...)
extern:0000000000211740                 extrn open:near         ; CODE XREF: _open↑j
extern:0000000000211740                                         ; DATA XREF: .got:open_ptr↑o
extern:0000000000211748 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000211748                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000211748                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000211750 ; char *dcngettext(const char *domainname, const char *msgid1, const char *msgid2, unsigned __int64 n, int category)
extern:0000000000211750                 extrn dcngettext:near   ; CODE XREF: _dcngettext↑j
extern:0000000000211750                                         ; DATA XREF: .got:dcngettext_ptr↑o
extern:0000000000211758 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000211758                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000211758                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000211760 ; int getpagesize(void)
extern:0000000000211760                 extrn getpagesize:near  ; CODE XREF: _getpagesize↑j
extern:0000000000211760                                         ; DATA XREF: .got:getpagesize_ptr↑o
extern:0000000000211768 ; int sigismember(const sigset_t *set, int signo)
extern:0000000000211768                 extrn sigismember:near  ; CODE XREF: _sigismember↑j
extern:0000000000211768                                         ; DATA XREF: .got:sigismember_ptr↑o
extern:0000000000211770 ; void __noreturn exit(int status)
extern:0000000000211770                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000211770                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000211778 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000211778                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000211778                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000211780                 extrn __fprintf_chk:near
extern:0000000000211780                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000211780                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000211788 ; int mbsinit(const mbstate_t *ps)
extern:0000000000211788                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000211788                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000211790 ; int iswprint(wint_t wc)
extern:0000000000211790                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000211790                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000211798 ; int __fastcall __cxa_finalize(void *)
extern:0000000000211798                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000211798                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000211798                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002117A0 ; int sigaddset(sigset_t *set, int signo)
extern:00000000002117A0                 extrn sigaddset:near    ; CODE XREF: _sigaddset↑j
extern:00000000002117A0                                         ; DATA XREF: .got:sigaddset_ptr↑o
extern:00000000002117A8 ; const __int32_t **_ctype_tolower_loc(void)
extern:00000000002117A8                 extrn __ctype_tolower_loc:near
extern:00000000002117A8                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:00000000002117A8                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:00000000002117B0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002117B0                 extrn __ctype_b_loc:near
extern:00000000002117B0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002117B0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002117B8                 extrn __sprintf_chk:near
extern:00000000002117B8                                         ; CODE XREF: ___sprintf_chk↑j
extern:00000000002117B8                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:00000000002117C0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002117C0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002117C8                 extrn __gmon_start__:near ; weak
extern:00000000002117C8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002117C8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002117D0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002117D0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002117D0
extern:00000000002117D0
extern:00000000002117D0                 end start
