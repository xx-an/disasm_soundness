LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : A0999C6C4D5488536BA1C7ADD0498BA6B3A4545ED6F39DA9E99D48C60A1CACB4
LOAD:0000000000000000 ; Input MD5    : FBA4216AE015775E47E7796404DE8A37
LOAD:0000000000000000 ; Input CRC32  : DFF090F5
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/base64
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'basenc.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'base64.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2C1E8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7BB8h                ; Size in file image
LOAD:00000000000000D8                 dq 7BB8h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 8B10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 208B10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 570h                 ; Size in file image
LOAD:0000000000000110                 dq 728h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 8C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 208C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 6C5Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 6C5Ch                ; Physical address
LOAD:00000000000001B0                 dq 29Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 29Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 8B10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 208B10h              ; Physical address
LOAD:0000000000000220                 dq 4F0h                 ; Size in file image
LOAD:0000000000000228                 dq 4F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0B3h, 0FBh, 0ABh, 99h, 88h, 0F5h, 0F2h, 0D7h, 7Ch, 51h ; Desc
LOAD:0000000000000284                 db 0F4h, 8Dh, 27h, 36h, 9Eh, 0E7h, 75h, 9Ah, 89h, 78h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 38h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 38h, 39h, 3Fh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_8F8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_8F8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_8F8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_8F8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_8F8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_8F8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFreadUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8F8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_8F8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_8F8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_8F8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8F8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_8F8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStackChkFail - offset byte_8F8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetoptLong - offset byte_8F8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aMbrtowc - offset byte_8F8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrchr - offset byte_8F8, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aOverflow - offset byte_8F8, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_8F8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aAssertFail - offset byte_8F8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrtoulInterna - offset byte_8F8, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMemset - offset byte_8F8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aPosixFadvise - offset byte_8F8, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemchr - offset byte_8F8, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLibcStartMain - offset byte_8F8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemcmp - offset byte_8F8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFputsUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aCalloc - offset byte_8F8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStrcmp - offset byte_8F8, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aGmonStart - offset byte_8F8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemcpy - offset byte_8F8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFileno - offset byte_8F8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aMalloc - offset byte_8F8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFflush - offset byte_8F8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aNlLanginfo - offset byte_8F8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFreading - offset byte_8F8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFwriteUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aRealloc - offset byte_8F8, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aSetlocale - offset byte_8F8, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aPrintfChk - offset byte_8F8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMemmove - offset byte_8F8, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aError - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aFseeko - offset byte_8F8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFopen - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000730                            0>
LOAD:0000000000000748                 Elf64_Sym <offset aCxaAtexit - offset byte_8F8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aExit+1 - offset byte_8F8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFwrite - offset byte_8F8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFprintfChk - offset byte_8F8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aItmRegistertmc - offset byte_8F8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aMbsinit - offset byte_8F8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aIswprint - offset byte_8F8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aCxaFinalize - offset byte_8F8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aCtypeBLoc - offset byte_8F8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aStdout - offset byte_8F8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000820                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgname - offset byte_8F8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000838                            offset __bss_start, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aStdin - offset byte_8F8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000850                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgramInvocat - offset byte_8F8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000868                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aPrognameFull - offset byte_8F8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000880                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8F8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000898                            offset __bss_start, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aStderr - offset byte_8F8, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000008B0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aOptind - offset byte_8F8, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008C8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008E0                 Elf64_Sym <offset aOptarg - offset byte_8F8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000008E0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8 ; ELF String Table
LOAD:00000000000008F8 byte_8F8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008F8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008F9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C80↓o
LOAD:0000000000000903 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:000000000000090A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000917 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000921 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000929 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000730↑o
LOAD:000000000000092F aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000937 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:000000000000093E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000946 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000950 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000956 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000967 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000970 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000978 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:000000000000097E aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000984 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000984                                         ; LOAD:0000000000000760↑o
LOAD:000000000000098A aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000991 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000991                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:00000000000009A9 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009B7 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000009B7                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000009CE aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000009DC aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009E3 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009EA aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:00000000000009F9 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A00 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000A11 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000A18 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A26 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000A2D aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000A33 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A3A aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A41 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000A48 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A50 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A5C aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A6A aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000A71 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A7C aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000A83 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A8F aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A96 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A9D aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000AA8 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000AAF aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000AAF                                         ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000ACD aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000ADC aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000AE4 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000AE4                                         ; LOAD:00000000000003B8↑o
LOAD:0000000000000AF3 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000B03 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B0A aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B0A                                         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B1C aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B23 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B2E aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000B2E                                         ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000B41 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B50 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B55 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B60 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B70 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000B7D aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C90↓o
LOAD:0000000000000B87 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000CA0↓o
LOAD:0000000000000B93 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000CB0↓o
LOAD:0000000000000B9E aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000CC0↓o
LOAD:0000000000000BA8 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000CD0↓o
LOAD:0000000000000BB4 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000BB4                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000BD0 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BDF aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000BDF                                         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000BF9                 align 2
LOAD:0000000000000BFA ; ELF GNU Symbol Version Table
LOAD:0000000000000BFA                 dw 0
LOAD:0000000000000BFC                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000C06                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000C08                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C0C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000C0E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000C12                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000C16                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000C18                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000C1A                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000C1E                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000C20                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000C22                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C32                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000C34                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C36                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C38                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000C3A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C3C                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C3E                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C40                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000C42                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000C44                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000C46                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C48                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C4A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C4C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C4E                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C50                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000C52                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C54                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C56                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000C58                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C5A                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C5C                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C5E                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C60                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C62                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C64                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C66                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C68                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C6A                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C6C                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C6E                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000C70                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C72                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C74                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C76                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C78                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C7A                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C7C                 dw 0
LOAD:0000000000000C7E                 dw 0
LOAD:0000000000000C80 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C80                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8F8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C90                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8F8, \ ; "GLIBC_2.3"
LOAD:0000000000000C90                                10h>
LOAD:0000000000000CA0                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8F8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000CA0                                10h>
LOAD:0000000000000CB0                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8F8, \ ; "GLIBC_2.14"
LOAD:0000000000000CB0                                10h>
LOAD:0000000000000CC0                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8F8, \ ; "GLIBC_2.4"
LOAD:0000000000000CC0                                10h>
LOAD:0000000000000CD0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8F8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000CE0 ; ELF RELA Relocation Table
LOAD:0000000000000CE0                 Elf64_Rela <208B10h, 8, 2100h> ; R_X86_64_RELATIVE +2100h
LOAD:0000000000000CF8                 Elf64_Rela <208B18h, 8, 20C0h> ; R_X86_64_RELATIVE +20C0h
LOAD:0000000000000D10                 Elf64_Rela <208B20h, 8, 5CFBh> ; R_X86_64_RELATIVE +5CFBh
LOAD:0000000000000D28                 Elf64_Rela <208B40h, 8, 5D02h> ; R_X86_64_RELATIVE +5D02h
LOAD:0000000000000D40                 Elf64_Rela <208B60h, 8, 5D07h> ; R_X86_64_RELATIVE +5D07h
LOAD:0000000000000D58                 Elf64_Rela <208B80h, 8, 5D16h> ; R_X86_64_RELATIVE +5D16h
LOAD:0000000000000D70                 Elf64_Rela <208BA0h, 8, 5D1Bh> ; R_X86_64_RELATIVE +5D1Bh
LOAD:0000000000000D88                 Elf64_Rela <208BE0h, 8, 62E1h> ; R_X86_64_RELATIVE +62E1h
LOAD:0000000000000DA0                 Elf64_Rela <208BE8h, 8, 62E9h> ; R_X86_64_RELATIVE +62E9h
LOAD:0000000000000DB8                 Elf64_Rela <208BF0h, 8, 62EFh> ; R_X86_64_RELATIVE +62EFh
LOAD:0000000000000DD0                 Elf64_Rela <208BF8h, 8, 62FCh> ; R_X86_64_RELATIVE +62FCh
LOAD:0000000000000DE8                 Elf64_Rela <208C00h, 8, 6309h> ; R_X86_64_RELATIVE +6309h
LOAD:0000000000000E00                 Elf64_Rela <208C08h, 8, 631Dh> ; R_X86_64_RELATIVE +631Dh
LOAD:0000000000000E18                 Elf64_Rela <208C10h, 8, 631Fh> ; R_X86_64_RELATIVE +631Fh
LOAD:0000000000000E30                 Elf64_Rela <208C18h, 8, 6302h> ; R_X86_64_RELATIVE +6302h
LOAD:0000000000000E48                 Elf64_Rela <208C20h, 8, 5C7Dh> ; R_X86_64_RELATIVE +5C7Dh
LOAD:0000000000000E60                 Elf64_Rela <208C28h, 8, 6327h> ; R_X86_64_RELATIVE +6327h
LOAD:0000000000000E78                 Elf64_Rela <209008h, 8, 209008h> ; R_X86_64_RELATIVE +209008h
LOAD:0000000000000E90                 Elf64_Rela <209010h, 8, 6133h> ; R_X86_64_RELATIVE +6133h
LOAD:0000000000000EA8                 Elf64_Rela <209060h, 8, 209070h> ; R_X86_64_RELATIVE +209070h
LOAD:0000000000000EC0                 Elf64_Rela <209078h, 8, 209100h> ; R_X86_64_RELATIVE +209100h
LOAD:0000000000000ED8                 Elf64_Rela <208FD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000EF0                 Elf64_Rela <208FD8h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000F08                 Elf64_Rela <208FE0h, 2000000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000F20                 Elf64_Rela <208FE8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F38                 Elf64_Rela <208FF0h, 3600000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F50                 Elf64_Rela <209080h, 3900000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000F68                 Elf64_Rela <209088h, 3800000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000F80                 Elf64_Rela <209090h, 3A00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000000F98                 Elf64_Rela <209098h, 3F00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000FB0                 Elf64_Rela <2090A0h, 4000000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000FC8                 Elf64_Rela <2090A8h, 3C00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000FE0                 Elf64_Rela <2090C0h, 3E00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000FF8 ; ELF JMPREL Relocation Table
LOAD:0000000000000FF8                 Elf64_Rela <208E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001010                 Elf64_Rela <208E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001028                 Elf64_Rela <208E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001040                 Elf64_Rela <208E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001058                 Elf64_Rela <208E60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001070                 Elf64_Rela <208E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001088                 Elf64_Rela <208E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:00000000000010A0                 Elf64_Rela <208E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000010B8                 Elf64_Rela <208E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000010D0                 Elf64_Rela <208E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000010E8                 Elf64_Rela <208E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001100                 Elf64_Rela <208E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001118                 Elf64_Rela <208EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001130                 Elf64_Rela <208EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001148                 Elf64_Rela <208EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001160                 Elf64_Rela <208EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001178                 Elf64_Rela <208EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001190                 Elf64_Rela <208EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000011A8                 Elf64_Rela <208ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000011C0                 Elf64_Rela <208ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000011D8                 Elf64_Rela <208EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000011F0                 Elf64_Rela <208EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001208                 Elf64_Rela <208EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001220                 Elf64_Rela <208EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001238                 Elf64_Rela <208F00h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001250                 Elf64_Rela <208F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001268                 Elf64_Rela <208F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001280                 Elf64_Rela <208F18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001298                 Elf64_Rela <208F20h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000012B0                 Elf64_Rela <208F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000012C8                 Elf64_Rela <208F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000012E0                 Elf64_Rela <208F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000012F8                 Elf64_Rela <208F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001310                 Elf64_Rela <208F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001328                 Elf64_Rela <208F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001340                 Elf64_Rela <208F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001358                 Elf64_Rela <208F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001370                 Elf64_Rela <208F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001388                 Elf64_Rela <208F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000013A0                 Elf64_Rela <208F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:00000000000013B8                 Elf64_Rela <208F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000013D0                 Elf64_Rela <208F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000013E8                 Elf64_Rela <208F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001400                 Elf64_Rela <208F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001418                 Elf64_Rela <208FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001430                 Elf64_Rela <208FA8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001448                 Elf64_Rela <208FB0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001460                 Elf64_Rela <208FB8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001478                 Elf64_Rela <208FC0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001490                 Elf64_Rela <208FC8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001490 LOAD            ends
LOAD:0000000000001490
.init:00000000000014A8 ; ===========================================================================
.init:00000000000014A8
.init:00000000000014A8 ; Segment type: Pure code
.init:00000000000014A8 ; Segment permissions: Read/Execute
.init:00000000000014A8 _init           segment dword public 'CODE' use64
.init:00000000000014A8                 assume cs:_init
.init:00000000000014A8                 ;org 14A8h
.init:00000000000014A8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000014A8
.init:00000000000014A8 ; =============== S U B R O U T I N E =======================================
.init:00000000000014A8
.init:00000000000014A8
.init:00000000000014A8                 public _init_proc
.init:00000000000014A8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000014A8                 sub     rsp, 8          ; _init
.init:00000000000014AC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000014B3                 test    rax, rax
.init:00000000000014B6                 jz      short loc_14BA
.init:00000000000014B8                 call    rax ; __gmon_start__
.init:00000000000014BA
.init:00000000000014BA loc_14BA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000014BA                 add     rsp, 8
.init:00000000000014BE                 retn
.init:00000000000014BE _init_proc      endp
.init:00000000000014BE
.init:00000000000014BE _init           ends
.init:00000000000014BE
LOAD:00000000000014BF ; ===========================================================================
LOAD:00000000000014BF
LOAD:00000000000014BF ; Segment type: Pure code
LOAD:00000000000014BF ; Segment permissions: Read/Execute
LOAD:00000000000014BF LOAD            segment byte public 'CODE' use64
LOAD:00000000000014BF                 assume cs:LOAD
LOAD:00000000000014BF                 ;org 14BFh
LOAD:00000000000014BF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000014BF                 align 20h
LOAD:00000000000014BF LOAD            ends
LOAD:00000000000014BF
.plt:00000000000014C0 ; ===========================================================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Segment type: Pure code
.plt:00000000000014C0 ; Segment permissions: Read/Execute
.plt:00000000000014C0 _plt            segment para public 'CODE' use64
.plt:00000000000014C0                 assume cs:_plt
.plt:00000000000014C0                 ;org 14C0h
.plt:00000000000014C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0
.plt:00000000000014C0 sub_14C0        proc near               ; CODE XREF: .plt:00000000000014DB↓j
.plt:00000000000014C0                                         ; .plt:00000000000014EB↓j ...
.plt:00000000000014C0 ; __unwind {
.plt:00000000000014C0                 push    cs:qword_208E30
.plt:00000000000014C6                 jmp     cs:qword_208E38
.plt:00000000000014C6 sub_14C0        endp
.plt:00000000000014C6
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014CC                 align 10h
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; void free(void *ptr)
.plt:00000000000014D0 _free           proc near               ; CODE XREF: base64_decode_alloc_ctx+A7↓p
.plt:00000000000014D0                                         ; quotearg_n_options+115↓p ...
.plt:00000000000014D0                 jmp     cs:free_ptr
.plt:00000000000014D0 _free           endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    0
.plt:00000000000014DB                 jmp     sub_14C0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: noreturn thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; void __noreturn abort(void)
.plt:00000000000014E0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000014E0                                         ; quotearg_buffer_restyled:def_2F21↓p ...
.plt:00000000000014E0                 jmp     cs:abort_ptr
.plt:00000000000014E0 _abort          endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    1
.plt:00000000000014EB                 jmp     sub_14C0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int *__errno_location(void)
.plt:00000000000014F0 ___errno_location proc near             ; CODE XREF: main+1B2↓p
.plt:00000000000014F0                                         ; main+4B9↓p ...
.plt:00000000000014F0                 jmp     cs:__errno_location_ptr
.plt:00000000000014F0 ___errno_location endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    2
.plt:00000000000014FB                 jmp     sub_14C0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001500 _strncmp        proc near               ; CODE XREF: usage+29C↓p
.plt:0000000000001500                                         ; usage+35D↓p
.plt:0000000000001500                 jmp     cs:strncmp_ptr
.plt:0000000000001500 _strncmp        endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    3
.plt:000000000000150B                 jmp     sub_14C0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: noreturn thunk
.plt:0000000000001510
.plt:0000000000001510 ; void __noreturn _exit(int status)
.plt:0000000000001510 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001510                 jmp     cs:_exit_ptr
.plt:0000000000001510 __exit          endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    4
.plt:000000000000151B                 jmp     sub_14C0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; size_t __fpending(FILE *fp)
.plt:0000000000001520 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001520                 jmp     cs:__fpending_ptr
.plt:0000000000001520 ___fpending     endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    5
.plt:000000000000152B                 jmp     sub_14C0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001530 _fread_unlocked proc near               ; CODE XREF: main+297↓p
.plt:0000000000001530                                         ; main+450↓p
.plt:0000000000001530                 jmp     cs:fread_unlocked_ptr
.plt:0000000000001530 _fread_unlocked endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    6
.plt:000000000000153B                 jmp     sub_14C0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; char *textdomain(const char *domainname)
.plt:0000000000001540 _textdomain     proc near               ; CODE XREF: main+5E↓p
.plt:0000000000001540                 jmp     cs:textdomain_ptr
.plt:0000000000001540 _textdomain     endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    7
.plt:000000000000154B                 jmp     sub_14C0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int fclose(FILE *stream)
.plt:0000000000001550 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001550                                         ; rpl_fclose+6B↓j
.plt:0000000000001550                 jmp     cs:fclose_ptr
.plt:0000000000001550 _fclose         endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    8
.plt:000000000000155B                 jmp     sub_14C0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001560 _bindtextdomain proc near               ; CODE XREF: main+52↓p
.plt:0000000000001560                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001560 _bindtextdomain endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    9
.plt:000000000000156B                 jmp     sub_14C0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001570 _dcgettext      proc near               ; CODE XREF: main+BC↓p
.plt:0000000000001570                                         ; main+4B1↓p ...
.plt:0000000000001570                 jmp     cs:dcgettext_ptr
.plt:0000000000001570 _dcgettext      endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    0Ah
.plt:000000000000157B                 jmp     sub_14C0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001580 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001580                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001580 ___ctype_get_mb_cur_max endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    0Bh
.plt:000000000000158B                 jmp     sub_14C0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; size_t strlen(const char *s)
.plt:0000000000001590 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001590                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001590                 jmp     cs:strlen_ptr
.plt:0000000000001590 _strlen         endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    0Ch
.plt:000000000000159B                 jmp     sub_14C0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: noreturn thunk
.plt:00000000000015A0
.plt:00000000000015A0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1F3D↓p
.plt:00000000000015A0                                         ; base64_decode_ctx:loc_2B28↓p ...
.plt:00000000000015A0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000015A0 ___stack_chk_fail endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    0Dh
.plt:00000000000015AB                 jmp     sub_14C0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000015B0 _getopt_long    proc near               ; CODE XREF: main+8B↓p
.plt:00000000000015B0                 jmp     cs:getopt_long_ptr
.plt:00000000000015B0 _getopt_long    endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    0Eh
.plt:00000000000015BB                 jmp     sub_14C0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000015C0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000015C0                 jmp     cs:mbrtowc_ptr
.plt:00000000000015C0 _mbrtowc        endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    0Fh
.plt:00000000000015CB                 jmp     sub_14C0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; char *strchr(const char *s, int c)
.plt:00000000000015D0 _strchr         proc near               ; CODE XREF: xstrtoumax+123↓p
.plt:00000000000015D0                                         ; xstrtoumax+143↓p ...
.plt:00000000000015D0                 jmp     cs:strchr_ptr
.plt:00000000000015D0 _strchr         endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    10h
.plt:00000000000015DB                 jmp     sub_14C0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000015E0 ___overflow     proc near               ; CODE XREF: main+61B↓p
.plt:00000000000015E0                                         ; main+7BF↓p
.plt:00000000000015E0                 jmp     cs:__overflow_ptr
.plt:00000000000015E0 ___overflow     endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    11h
.plt:00000000000015EB                 jmp     sub_14C0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; char *strrchr(const char *s, int c)
.plt:00000000000015F0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000015F0                 jmp     cs:strrchr_ptr
.plt:00000000000015F0 _strrchr        endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    12h
.plt:00000000000015FB                 jmp     sub_14C0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001600 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001600                                         ; rpl_fseeko+3B↓p
.plt:0000000000001600                 jmp     cs:lseek_ptr
.plt:0000000000001600 _lseek          endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    13h
.plt:000000000000160B                 jmp     sub_14C0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: noreturn thunk
.plt:0000000000001610
.plt:0000000000001610 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001610 ___assert_fail  proc near               ; CODE XREF: xstrtoumax+39F↓p
.plt:0000000000001610                 jmp     cs:__assert_fail_ptr
.plt:0000000000001610 ___assert_fail  endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    14h
.plt:000000000000161B                 jmp     sub_14C0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001620 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001620                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001620 ___strtoul_internal endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    15h
.plt:000000000000162B                 jmp     sub_14C0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001630 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001630                                         ; xzalloc+12↓j
.plt:0000000000001630                 jmp     cs:memset_ptr
.plt:0000000000001630 _memset         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    16h
.plt:000000000000163B                 jmp     sub_14C0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001640 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001640                                         ; fadvise+16↓j
.plt:0000000000001640                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001640 _posix_fadvise  endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    17h
.plt:000000000000164B                 jmp     sub_14C0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001650 _memchr         proc near               ; CODE XREF: base64_decode_ctx+20A↓p
.plt:0000000000001650                 jmp     cs:memchr_ptr
.plt:0000000000001650 _memchr         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    18h
.plt:000000000000165B                 jmp     sub_14C0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001660 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001660                 jmp     cs:memcmp_ptr
.plt:0000000000001660 _memcmp         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    19h
.plt:000000000000166B                 jmp     sub_14C0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001670 _fputs_unlocked proc near               ; CODE XREF: usage+C4↓p
.plt:0000000000001670                                         ; usage+E9↓p ...
.plt:0000000000001670                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001670 _fputs_unlocked endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    1Ah
.plt:000000000000167B                 jmp     sub_14C0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001680 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001680                 jmp     cs:calloc_ptr
.plt:0000000000001680 _calloc         endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    1Bh
.plt:000000000000168B                 jmp     sub_14C0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001690 _strcmp         proc near               ; CODE XREF: main+17C↓p
.plt:0000000000001690                                         ; main+661↓p
.plt:0000000000001690                 jmp     cs:strcmp_ptr
.plt:0000000000001690 _strcmp         endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    1Ch
.plt:000000000000169B                 jmp     sub_14C0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000016A0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000016A0                 jmp     cs:memcpy_ptr
.plt:00000000000016A0 _memcpy         endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    1Dh
.plt:00000000000016AB                 jmp     sub_14C0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int fileno(FILE *stream)
.plt:00000000000016B0 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:00000000000016B0                                         ; rpl_fclose+7↓p ...
.plt:00000000000016B0                 jmp     cs:fileno_ptr
.plt:00000000000016B0 _fileno         endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    1Eh
.plt:00000000000016BB                 jmp     sub_14C0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; void *malloc(size_t size)
.plt:00000000000016C0 _malloc         proc near               ; CODE XREF: base64_encode_alloc+59↓p
.plt:00000000000016C0                                         ; base64_decode_alloc_ctx+3C↓p ...
.plt:00000000000016C0                 jmp     cs:malloc_ptr
.plt:00000000000016C0 _malloc         endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    1Fh
.plt:00000000000016CB                 jmp     sub_14C0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int fflush(FILE *stream)
.plt:00000000000016D0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000016D0                                         ; rpl_fflush+3B↓j
.plt:00000000000016D0                 jmp     cs:fflush_ptr
.plt:00000000000016D0 _fflush         endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    20h ; ' '
.plt:00000000000016DB                 jmp     sub_14C0
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; char *nl_langinfo(nl_item item)
.plt:00000000000016E0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000016E0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000016E0 _nl_langinfo    endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    21h ; '!'
.plt:00000000000016EB                 jmp     sub_14C0
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; int __freading(FILE *fp)
.plt:00000000000016F0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000016F0                                         ; rpl_fflush+9↓p
.plt:00000000000016F0                 jmp     cs:__freading_ptr
.plt:00000000000016F0 ___freading     endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    22h ; '"'
.plt:00000000000016FB                 jmp     sub_14C0
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001700 _fwrite_unlocked proc near              ; CODE XREF: main+37F↓p
.plt:0000000000001700                                         ; main+583↓p ...
.plt:0000000000001700                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001700 _fwrite_unlocked endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    23h ; '#'
.plt:000000000000170B                 jmp     sub_14C0
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001710 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001710                 jmp     cs:realloc_ptr
.plt:0000000000001710 _realloc        endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    24h ; '$'
.plt:000000000000171B                 jmp     sub_14C0
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; char *setlocale(int category, const char *locale)
.plt:0000000000001720 _setlocale      proc near               ; CODE XREF: main+3F↓p
.plt:0000000000001720                                         ; usage+283↓p ...
.plt:0000000000001720                 jmp     cs:setlocale_ptr
.plt:0000000000001720 _setlocale      endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    25h ; '%'
.plt:000000000000172B                 jmp     sub_14C0
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001730                                         ; usage+9F↓p ...
.plt:0000000000001730                 jmp     cs:__printf_chk_ptr
.plt:0000000000001730 ___printf_chk   endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    26h ; '&'
.plt:000000000000173B                 jmp     sub_14C0
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001740 _memmove        proc near               ; CODE XREF: main+30C↓p
.plt:0000000000001740                 jmp     cs:memmove_ptr
.plt:0000000000001740 _memmove        endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    27h ; '''
.plt:000000000000174B                 jmp     sub_14C0
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001750 _error          proc near               ; CODE XREF: main+1CA↓p
.plt:0000000000001750                                         ; main+4CA↓p ...
.plt:0000000000001750                 jmp     cs:error_ptr
.plt:0000000000001750 _error          endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    28h ; '('
.plt:000000000000175B                 jmp     sub_14C0
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001760 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_58FA↓j
.plt:0000000000001760                 jmp     cs:fseeko_ptr
.plt:0000000000001760 _fseeko         endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    29h ; ')'
.plt:000000000000176B                 jmp     sub_14C0
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001770 _fopen          proc near               ; CODE XREF: main+191↓p
.plt:0000000000001770                 jmp     cs:fopen_ptr
.plt:0000000000001770 _fopen          endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    2Ah ; '*'
.plt:000000000000177B                 jmp     sub_14C0
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001780 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001780                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001780 ___cxa_atexit   endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    2Bh ; '+'
.plt:000000000000178B                 jmp     sub_14C0
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: noreturn thunk
.plt:0000000000001790
.plt:0000000000001790 ; void __noreturn exit(int status)
.plt:0000000000001790 _exit           proc near               ; CODE XREF: main+14A↓p
.plt:0000000000001790                                         ; usage+58↓p
.plt:0000000000001790                 jmp     cs:exit_ptr
.plt:0000000000001790 _exit           endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    2Ch ; ','
.plt:000000000000179B                 jmp     sub_14C0
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000017A0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000017A0                 jmp     cs:fwrite_ptr
.plt:00000000000017A0 _fwrite         endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    2Dh ; '-'
.plt:00000000000017AB                 jmp     sub_14C0
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000017B0                                         ; version_etc_arn+37↓p ...
.plt:00000000000017B0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000017B0 ___fprintf_chk  endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    2Eh ; '.'
.plt:00000000000017BB                 jmp     sub_14C0
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000017C0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000017C0                 jmp     cs:mbsinit_ptr
.plt:00000000000017C0 _mbsinit        endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    2Fh ; '/'
.plt:00000000000017CB                 jmp     sub_14C0
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; int iswprint(wint_t wc)
.plt:00000000000017D0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000017D0                 jmp     cs:iswprint_ptr
.plt:00000000000017D0 _iswprint       endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    30h ; '0'
.plt:00000000000017DB                 jmp     sub_14C0
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000017E0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000017E0                                         ; xstrtoumax+55↓p
.plt:00000000000017E0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000017E0 ___ctype_b_loc  endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    31h ; '1'
.plt:00000000000017EB                 jmp     sub_14C0
.plt:00000000000017EB ; } // starts at 14C0
.plt:00000000000017EB _plt            ends
.plt:00000000000017EB
.plt.got:00000000000017F0 ; ===========================================================================
.plt.got:00000000000017F0
.plt.got:00000000000017F0 ; Segment type: Pure code
.plt.got:00000000000017F0 ; Segment permissions: Read/Execute
.plt.got:00000000000017F0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000017F0                 assume cs:_plt_got
.plt.got:00000000000017F0                 ;org 17F0h
.plt.got:00000000000017F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000017F0
.plt.got:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000017F0
.plt.got:00000000000017F0 ; Attributes: thunk
.plt.got:00000000000017F0
.plt.got:00000000000017F0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000017F0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000017F0 ; __unwind {
.plt.got:00000000000017F0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000017F0 __cxa_finalize  endp
.plt.got:00000000000017F0
.plt.got:00000000000017F0 ; ---------------------------------------------------------------------------
.plt.got:00000000000017F6                 align 8
.plt.got:00000000000017F6 ; } // starts at 17F0
.plt.got:00000000000017F6 _plt_got        ends
.plt.got:00000000000017F6
LOAD:00000000000017F8 ; ===========================================================================
LOAD:00000000000017F8
LOAD:00000000000017F8 ; Segment type: Pure code
LOAD:00000000000017F8 ; Segment permissions: Read/Execute
LOAD:00000000000017F8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000017F8                 assume cs:LOAD
LOAD:00000000000017F8                 ;org 17F8h
LOAD:00000000000017F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000017F8                 align 20h
LOAD:00000000000017F8 LOAD            ends
LOAD:00000000000017F8
.text:0000000000001800 ; ===========================================================================
.text:0000000000001800
.text:0000000000001800 ; Segment type: Pure code
.text:0000000000001800 ; Segment permissions: Read/Execute
.text:0000000000001800 _text           segment para public 'CODE' use64
.text:0000000000001800                 assume cs:_text
.text:0000000000001800                 ;org 1800h
.text:0000000000001800                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001800
.text:0000000000001800 ; =============== S U B R O U T I N E =======================================
.text:0000000000001800
.text:0000000000001800
.text:0000000000001800 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001800                 public main
.text:0000000000001800 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001800
.text:0000000000001800 var_A0          = qword ptr -0A0h
.text:0000000000001800 stream          = qword ptr -98h
.text:0000000000001800 var_90          = qword ptr -90h
.text:0000000000001800 var_88          = qword ptr -88h
.text:0000000000001800 var_80          = qword ptr -80h
.text:0000000000001800 var_78          = qword ptr -78h
.text:0000000000001800 var_70          = qword ptr -70h
.text:0000000000001800 ptr             = qword ptr -68h
.text:0000000000001800 filename        = qword ptr -60h
.text:0000000000001800 n               = qword ptr -50h
.text:0000000000001800 var_48          = dword ptr -48h
.text:0000000000001800 var_40          = qword ptr -40h
.text:0000000000001800
.text:0000000000001800 ; __unwind {
.text:0000000000001800                 push    r15
.text:0000000000001802                 push    r14
.text:0000000000001804                 push    r13
.text:0000000000001806                 push    r12
.text:0000000000001808                 mov     r13d, edi
.text:000000000000180B                 push    rbp
.text:000000000000180C                 push    rbx
.text:000000000000180D                 mov     r12, rsi
.text:0000000000001810                 mov     ebp, 4Ch ; 'L'
.text:0000000000001815                 xor     ebx, ebx
.text:0000000000001817                 sub     rsp, 78h
.text:000000000000181B                 mov     rdi, [rsi]
.text:000000000000181E                 mov     rax, fs:28h
.text:0000000000001827                 mov     [rsp+0A8h+var_40], rax
.text:000000000000182C                 xor     eax, eax
.text:000000000000182E                 call    set_program_name
.text:0000000000001833                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000183A                 mov     edi, 6          ; category
.text:000000000000183F                 call    _setlocale
.text:0000000000001844                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000184B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001852                 call    _bindtextdomain
.text:0000000000001857                 lea     rdi, domainname ; "coreutils"
.text:000000000000185E                 call    _textdomain
.text:0000000000001863                 lea     rdi, close_stdout
.text:000000000000186A                 call    atexit
.text:000000000000186F                 mov     byte ptr [rsp+0A8h+var_78], 0
.text:0000000000001874
.text:0000000000001874 loc_1874:                               ; CODE XREF: main+E6↓j
.text:0000000000001874                                         ; main+F5↓j ...
.text:0000000000001874                 lea     rcx, long_options ; longopts
.text:000000000000187B                 lea     rdx, shortopts  ; "diw:"
.text:0000000000001882                 xor     r8d, r8d        ; longind
.text:0000000000001885                 mov     rsi, r12        ; argv
.text:0000000000001888                 mov     edi, r13d       ; argc
.text:000000000000188B                 call    _getopt_long
.text:0000000000001890                 cmp     eax, 0FFFFFFFFh
.text:0000000000001893                 jz      loc_194F
.text:0000000000001899                 cmp     eax, 64h ; 'd'
.text:000000000000189C                 jz      short loc_18F0
.text:000000000000189E                 jle     short loc_1910
.text:00000000000018A0                 cmp     eax, 69h ; 'i'
.text:00000000000018A3                 jz      short loc_1900
.text:00000000000018A5                 cmp     eax, 77h ; 'w'
.text:00000000000018A8                 jnz     loc_1FAD
.text:00000000000018AE                 lea     rsi, msgid      ; "invalid wrap size"
.text:00000000000018B5                 mov     edx, 5          ; category
.text:00000000000018BA                 xor     edi, edi        ; domainname
.text:00000000000018BC                 call    _dcgettext
.text:00000000000018C1                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000018C8                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000018CF                 mov     r8, rax
.text:00000000000018D2                 xor     r9d, r9d
.text:00000000000018D5                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000018DC                 xor     esi, esi
.text:00000000000018DE                 call    xdectoumax
.text:00000000000018E3                 mov     rbp, rax
.text:00000000000018E6                 jmp     short loc_1874
.text:00000000000018E6 ; ---------------------------------------------------------------------------
.text:00000000000018E8                 align 10h
.text:00000000000018F0
.text:00000000000018F0 loc_18F0:                               ; CODE XREF: main+9C↑j
.text:00000000000018F0                 mov     ebx, 1
.text:00000000000018F5                 jmp     loc_1874
.text:00000000000018F5 ; ---------------------------------------------------------------------------
.text:00000000000018FA                 align 20h
.text:0000000000001900
.text:0000000000001900 loc_1900:                               ; CODE XREF: main+A3↑j
.text:0000000000001900                 mov     byte ptr [rsp+0A8h+var_78], 1
.text:0000000000001905                 jmp     loc_1874
.text:0000000000001905 ; ---------------------------------------------------------------------------
.text:000000000000190A                 align 10h
.text:0000000000001910
.text:0000000000001910 loc_1910:                               ; CODE XREF: main+9E↑j
.text:0000000000001910                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001915                 jnz     loc_1F6E
.text:000000000000191B                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001922                 mov     rcx, cs:Version
.text:0000000000001929                 lea     r8, aSimonJosefsson ; "Simon Josefsson"
.text:0000000000001930                 lea     rdx, unk_5C3F
.text:0000000000001937                 lea     rsi, aBase64    ; "base64"
.text:000000000000193E                 xor     r9d, r9d
.text:0000000000001941                 xor     eax, eax
.text:0000000000001943                 call    version_etc
.text:0000000000001948                 xor     edi, edi        ; status
.text:000000000000194A                 call    _exit
.text:000000000000194F ; ---------------------------------------------------------------------------
.text:000000000000194F
.text:000000000000194F loc_194F:                               ; CODE XREF: main+93↑j
.text:000000000000194F                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001956                 mov     edx, r13d
.text:0000000000001959                 sub     edx, eax
.text:000000000000195B                 sub     edx, 1
.text:000000000000195E                 jg      loc_1F7C
.text:0000000000001964                 cmp     eax, r13d
.text:0000000000001967                 jge     short loc_19CF
.text:0000000000001969                 mov     rax, [r12+rax*8]
.text:000000000000196D                 lea     rsi, aLt+2      ; s2
.text:0000000000001974                 mov     rdi, rax        ; s1
.text:0000000000001977                 mov     [rsp+0A8h+filename], rax
.text:000000000000197C                 call    _strcmp
.text:0000000000001981                 test    eax, eax
.text:0000000000001983                 jz      short loc_19DB
.text:0000000000001985                 mov     rdi, [rsp+0A8h+filename] ; filename
.text:000000000000198A                 lea     rsi, modes      ; "rb"
.text:0000000000001991                 call    _fopen
.text:0000000000001996                 test    rax, rax
.text:0000000000001999                 mov     r12, rax
.text:000000000000199C                 jnz     short loc_19E2
.text:000000000000199E                 mov     rdx, [rsp+0A8h+filename]
.text:00000000000019A3                 mov     esi, 3
.text:00000000000019A8                 xor     edi, edi
.text:00000000000019AA                 call    quotearg_n_style_colon
.text:00000000000019AF                 mov     rbx, rax
.text:00000000000019B2                 call    ___errno_location
.text:00000000000019B7                 mov     esi, [rax]      ; errnum
.text:00000000000019B9                 lea     rdx, format     ; format
.text:00000000000019C0                 mov     rcx, rbx
.text:00000000000019C3                 mov     edi, 1          ; status
.text:00000000000019C8                 xor     eax, eax
.text:00000000000019CA                 call    _error
.text:00000000000019CF
.text:00000000000019CF loc_19CF:                               ; CODE XREF: main+167↑j
.text:00000000000019CF                 lea     rax, aLt+2      ; "-"
.text:00000000000019D6                 mov     [rsp+0A8h+filename], rax
.text:00000000000019DB
.text:00000000000019DB loc_19DB:                               ; CODE XREF: main+183↑j
.text:00000000000019DB                 mov     r12, cs:stdin@@GLIBC_2_2_5
.text:00000000000019E2
.text:00000000000019E2 loc_19E2:                               ; CODE XREF: main+19C↑j
.text:00000000000019E2                 mov     esi, 2
.text:00000000000019E7                 mov     rdi, r12
.text:00000000000019EA                 call    fadvise
.text:00000000000019EF                 test    bl, bl
.text:00000000000019F1                 mov     rax, cs:stdout@@GLIBC_2_2_5
.text:00000000000019F8                 jz      loc_1BF8
.text:00000000000019FE                 mov     edi, 1000h
.text:0000000000001A03                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001A08                 call    xmalloc
.text:0000000000001A0D                 mov     edi, 0C00h
.text:0000000000001A12                 mov     rbp, rax
.text:0000000000001A15                 call    xmalloc
.text:0000000000001A1A                 mov     [rsp+0A8h+ptr], rax
.text:0000000000001A1F                 lea     rax, [rsp+0A8h+var_48]
.text:0000000000001A24                 mov     rdi, rax
.text:0000000000001A27                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001A2C                 call    base64_decode_ctx_init
.text:0000000000001A31                 lea     rax, [rsp+0A8h+n]
.text:0000000000001A36                 mov     [rsp+0A8h+stream], r12
.text:0000000000001A3B                 mov     [rsp+0A8h+var_A0], rbp
.text:0000000000001A40                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001A45                 nop     dword ptr [rax]
.text:0000000000001A48
.text:0000000000001A48 loc_1A48:                               ; CODE XREF: main+343↓j
.text:0000000000001A48                 xor     ebx, ebx
.text:0000000000001A4A                 jmp     short loc_1A7C
.text:0000000000001A4A ; ---------------------------------------------------------------------------
.text:0000000000001A4C                 align 10h
.text:0000000000001A50
.text:0000000000001A50 loc_1A50:                               ; CODE XREF: main+2A9↓j
.text:0000000000001A50                                         ; main+2B1↓j ...
.text:0000000000001A50                 mov     rax, [rsp+0A8h+stream]
.text:0000000000001A55                 add     rbx, r12
.text:0000000000001A58                 mov     eax, [rax]
.text:0000000000001A5A                 test    al, 20h
.text:0000000000001A5C                 jnz     loc_1F11
.text:0000000000001A62                 mov     edx, eax
.text:0000000000001A64                 and     edx, 10h
.text:0000000000001A67                 cmp     rbx, 0FFFh
.text:0000000000001A6E                 ja      loc_1B18
.text:0000000000001A74                 test    edx, edx
.text:0000000000001A76                 jnz     loc_1B18
.text:0000000000001A7C
.text:0000000000001A7C loc_1A7C:                               ; CODE XREF: main+24A↑j
.text:0000000000001A7C                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000001A81                 mov     rcx, [rsp+0A8h+stream] ; stream
.text:0000000000001A86                 mov     edx, 1000h
.text:0000000000001A8B                 sub     rdx, rbx        ; n
.text:0000000000001A8E                 mov     esi, 1          ; size
.text:0000000000001A93                 lea     rdi, [rax+rbx]  ; ptr
.text:0000000000001A97                 call    _fread_unlocked
.text:0000000000001A9C                 cmp     byte ptr [rsp+0A8h+var_78], 0
.text:0000000000001AA1                 mov     r12, rax
.text:0000000000001AA4                 mov     [rsp+0A8h+n], rax
.text:0000000000001AA9                 jz      short loc_1A50
.text:0000000000001AAB                 xor     r13d, r13d
.text:0000000000001AAE
.text:0000000000001AAE loc_1AAE:                               ; CODE XREF: main+311↓j
.text:0000000000001AAE                 test    r12, r12
.text:0000000000001AB1                 jz      short loc_1A50
.text:0000000000001AB3
.text:0000000000001AB3 loc_1AB3:                               ; CODE XREF: main+2E1↓j
.text:0000000000001AB3                 cmp     r13, r12
.text:0000000000001AB6                 jnb     short loc_1A50
.text:0000000000001AB8                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000001ABD                 lea     r15, [rbx+r13]
.text:0000000000001AC1                 lea     r14, [rax+r15]
.text:0000000000001AC5                 movsx   edi, byte ptr [r14]
.text:0000000000001AC9                 mov     ebp, edi
.text:0000000000001ACB                 call    isbase64
.text:0000000000001AD0                 cmp     bpl, 3Dh ; '='
.text:0000000000001AD4                 jz      short loc_1ADA
.text:0000000000001AD6                 test    al, al
.text:0000000000001AD8                 jz      short loc_1AF0
.text:0000000000001ADA
.text:0000000000001ADA loc_1ADA:                               ; CODE XREF: main+2D4↑j
.text:0000000000001ADA                 add     r13, 1
.text:0000000000001ADE                 test    r12, r12
.text:0000000000001AE1                 jnz     short loc_1AB3
.text:0000000000001AE3                 jmp     loc_1A50
.text:0000000000001AE3 ; ---------------------------------------------------------------------------
.text:0000000000001AE8                 align 10h
.text:0000000000001AF0
.text:0000000000001AF0 loc_1AF0:                               ; CODE XREF: main+2D8↑j
.text:0000000000001AF0                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000001AF5                 sub     r12, 1
.text:0000000000001AF9                 mov     rdi, r14        ; dest
.text:0000000000001AFC                 mov     rdx, r12
.text:0000000000001AFF                 mov     [rsp+0A8h+n], r12
.text:0000000000001B04                 sub     rdx, r13        ; n
.text:0000000000001B07                 lea     rsi, [rax+r15+1] ; src
.text:0000000000001B0C                 call    _memmove
.text:0000000000001B11                 jmp     short loc_1AAE
.text:0000000000001B11 ; ---------------------------------------------------------------------------
.text:0000000000001B13                 align 8
.text:0000000000001B18
.text:0000000000001B18 loc_1B18:                               ; CODE XREF: main+26E↑j
.text:0000000000001B18                                         ; main+276↑j
.text:0000000000001B18                 xor     r15d, r15d
.text:0000000000001B1B                 mov     [rsp+0A8h+var_80], rbx
.text:0000000000001B20                 mov     rbp, [rsp+0A8h+var_A0]
.text:0000000000001B25                 mov     r14d, r15d
.text:0000000000001B28                 mov     r12, [rsp+0A8h+ptr]
.text:0000000000001B2D                 mov     rbx, [rsp+0A8h+stream]
.text:0000000000001B32                 mov     r15, [rsp+0A8h+var_70]
.text:0000000000001B37                 jmp     short loc_1B9E
.text:0000000000001B37 ; ---------------------------------------------------------------------------
.text:0000000000001B39                 align 20h
.text:0000000000001B40
.text:0000000000001B40 loc_1B40:                               ; CODE XREF: main+3A0↓j
.text:0000000000001B40                 test    r14d, r14d
.text:0000000000001B43                 jnz     loc_1A48
.text:0000000000001B49
.text:0000000000001B49 loc_1B49:                               ; CODE XREF: main+3A8↓j
.text:0000000000001B49                 mov     rdx, [rsp+0A8h+var_80]
.text:0000000000001B4E                 mov     [rsp+0A8h+n], 0C00h
.text:0000000000001B57
.text:0000000000001B57 loc_1B57:                               ; CODE XREF: main+3BD↓j
.text:0000000000001B57                 mov     r8, [rsp+0A8h+var_88]
.text:0000000000001B5C                 mov     rdi, [rsp+0A8h+var_90]
.text:0000000000001B61                 mov     rcx, r12
.text:0000000000001B64                 mov     rsi, rbp
.text:0000000000001B67                 call    base64_decode_ctx
.text:0000000000001B6C                 mov     rdx, [rsp+0A8h+n] ; n
.text:0000000000001B71                 mov     rcx, r15        ; stream
.text:0000000000001B74                 mov     esi, 1          ; size
.text:0000000000001B79                 mov     rdi, r12        ; ptr
.text:0000000000001B7C                 mov     r13d, eax
.text:0000000000001B7F                 call    _fwrite_unlocked
.text:0000000000001B84                 cmp     rax, [rsp+0A8h+n]
.text:0000000000001B89                 jb      loc_1EE5
.text:0000000000001B8F                 test    r13b, r13b
.text:0000000000001B92                 jz      loc_1EC1
.text:0000000000001B98                 mov     eax, [rbx]
.text:0000000000001B9A                 add     r14d, 1
.text:0000000000001B9E
.text:0000000000001B9E loc_1B9E:                               ; CODE XREF: main+337↑j
.text:0000000000001B9E                 test    al, 10h
.text:0000000000001BA0                 jz      short loc_1B40
.text:0000000000001BA2                 cmp     r14d, 1
.text:0000000000001BA6                 ja      short loc_1BBF
.text:0000000000001BA8                 jnz     short loc_1B49
.text:0000000000001BAA                 mov     eax, [rsp+0A8h+var_48]
.text:0000000000001BAE                 test    eax, eax
.text:0000000000001BB0                 jz      short loc_1BBF
.text:0000000000001BB2                 mov     [rsp+0A8h+n], 0C00h
.text:0000000000001BBB                 xor     edx, edx
.text:0000000000001BBD                 jmp     short loc_1B57
.text:0000000000001BBF ; ---------------------------------------------------------------------------
.text:0000000000001BBF
.text:0000000000001BBF loc_1BBF:                               ; CODE XREF: main+3A6↑j
.text:0000000000001BBF                                         ; main+3B0↑j
.text:0000000000001BBF                 mov     r12, rbx
.text:0000000000001BC2
.text:0000000000001BC2 loc_1BC2:                               ; CODE XREF: main+49D↓j
.text:0000000000001BC2                 mov     rdi, r12        ; stream
.text:0000000000001BC5                 call    rpl_fclose
.text:0000000000001BCA                 add     eax, 1
.text:0000000000001BCD                 jz      loc_1E55
.text:0000000000001BD3                 xor     eax, eax
.text:0000000000001BD5                 mov     rcx, [rsp+0A8h+var_40]
.text:0000000000001BDA                 xor     rcx, fs:28h
.text:0000000000001BE3                 jnz     loc_1F3D
.text:0000000000001BE9                 add     rsp, 78h
.text:0000000000001BED                 pop     rbx
.text:0000000000001BEE                 pop     rbp
.text:0000000000001BEF                 pop     r12
.text:0000000000001BF1                 pop     r13
.text:0000000000001BF3                 pop     r14
.text:0000000000001BF5                 pop     r15
.text:0000000000001BF7                 retn
.text:0000000000001BF8 ; ---------------------------------------------------------------------------
.text:0000000000001BF8
.text:0000000000001BF8 loc_1BF8:                               ; CODE XREF: main+1F8↑j
.text:0000000000001BF8                 mov     edi, 7800h
.text:0000000000001BFD                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001C02                 xor     ebx, ebx
.text:0000000000001C04                 call    xmalloc
.text:0000000000001C09                 mov     edi, 0A000h
.text:0000000000001C0E                 mov     r13, rax
.text:0000000000001C11                 mov     r14d, 7800h
.text:0000000000001C17                 call    xmalloc
.text:0000000000001C1C                 mov     [rsp+0A8h+var_A0], rbp
.text:0000000000001C21                 mov     [rsp+0A8h+stream], rax
.text:0000000000001C26
.text:0000000000001C26 loc_1C26:                               ; CODE XREF: main+5BE↓j
.text:0000000000001C26                 xor     ebp, ebp
.text:0000000000001C28                 jmp     short loc_1C3D
.text:0000000000001C28 ; ---------------------------------------------------------------------------
.text:0000000000001C2A                 align 10h
.text:0000000000001C30
.text:0000000000001C30 loc_1C30:                               ; CODE XREF: main+45E↓j
.text:0000000000001C30                 cmp     rbp, 77FFh
.text:0000000000001C37                 ja      loc_1CCF
.text:0000000000001C3D
.text:0000000000001C3D loc_1C3D:                               ; CODE XREF: main+428↑j
.text:0000000000001C3D                 lea     rdi, [r13+rbp+0] ; ptr
.text:0000000000001C42                 mov     rdx, r14
.text:0000000000001C45                 mov     rcx, r12        ; stream
.text:0000000000001C48                 sub     rdx, rbp        ; n
.text:0000000000001C4B                 mov     esi, 1          ; size
.text:0000000000001C50                 call    _fread_unlocked
.text:0000000000001C55                 add     rbp, rax
.text:0000000000001C58                 mov     eax, [r12]
.text:0000000000001C5C                 test    al, 30h
.text:0000000000001C5E                 jz      short loc_1C30
.text:0000000000001C60                 test    rbp, rbp
.text:0000000000001C63                 jnz     short loc_1CCF
.text:0000000000001C65
.text:0000000000001C65 loc_1C65:                               ; CODE XREF: main+5B1↓j
.text:0000000000001C65                                         ; main+5C4↓j
.text:0000000000001C65                 test    rbx, rbx
.text:0000000000001C68                 mov     rbp, [rsp+0A8h+var_A0]
.text:0000000000001C6D                 jz      short loc_1C9B
.text:0000000000001C6F                 test    rbp, rbp
.text:0000000000001C72                 jz      short loc_1C9B
.text:0000000000001C74                 mov     rcx, [rsp+0A8h+var_90]
.text:0000000000001C79                 mov     rax, [rcx+28h]
.text:0000000000001C7D                 cmp     rax, [rcx+30h]
.text:0000000000001C81                 jnb     loc_1FB7
.text:0000000000001C87                 mov     rcx, [rsp+0A8h+var_90]
.text:0000000000001C8C                 lea     rdx, [rax+1]
.text:0000000000001C90                 mov     [rcx+28h], rdx
.text:0000000000001C94                 mov     byte ptr [rax], 0Ah
.text:0000000000001C97
.text:0000000000001C97 loc_1C97:                               ; CODE XREF: main+7C7↓j
.text:0000000000001C97                 mov     eax, [r12]
.text:0000000000001C9B
.text:0000000000001C9B loc_1C9B:                               ; CODE XREF: main+46D↑j
.text:0000000000001C9B                                         ; main+472↑j
.text:0000000000001C9B                 test    al, 20h
.text:0000000000001C9D                 jz      loc_1BC2
.text:0000000000001CA3                 lea     rsi, aReadError ; "read error"
.text:0000000000001CAA                 mov     edx, 5          ; category
.text:0000000000001CAF                 xor     edi, edi        ; domainname
.text:0000000000001CB1                 call    _dcgettext
.text:0000000000001CB6                 mov     rbx, rax
.text:0000000000001CB9                 call    ___errno_location
.text:0000000000001CBE                 mov     esi, [rax]      ; errnum
.text:0000000000001CC0                 mov     rdx, rbx        ; format
.text:0000000000001CC3                 mov     edi, 1          ; status
.text:0000000000001CC8                 xor     eax, eax
.text:0000000000001CCA                 call    _error
.text:0000000000001CCF
.text:0000000000001CCF loc_1CCF:                               ; CODE XREF: main+437↑j
.text:0000000000001CCF                                         ; main+463↑j
.text:0000000000001CCF                 lea     rax, [rbp+2]
.text:0000000000001CD3                 mov     ecx, 3
.text:0000000000001CD8                 xor     edx, edx
.text:0000000000001CDA                 mov     rsi, rbp
.text:0000000000001CDD                 mov     rdi, r13
.text:0000000000001CE0                 div     rcx
.text:0000000000001CE3                 mov     rdx, [rsp+0A8h+stream]
.text:0000000000001CE8                 lea     r15, ds:0[rax*4]
.text:0000000000001CF0                 mov     rcx, r15
.text:0000000000001CF3                 call    base64_encode
.text:0000000000001CF8                 cmp     [rsp+0A8h+var_A0], 0
.text:0000000000001CFE                 jz      loc_1DC9
.text:0000000000001D04                 xor     r10d, r10d
.text:0000000000001D07                 test    r15, r15
.text:0000000000001D0A                 jz      loc_1DAB
.text:0000000000001D10                 mov     [rsp+0A8h+var_80], r13
.text:0000000000001D15                 mov     [rsp+0A8h+var_78], rbp
.text:0000000000001D1A                 mov     r13, rbx
.text:0000000000001D1D                 mov     rbp, r15
.text:0000000000001D20                 mov     [rsp+0A8h+var_88], r12
.text:0000000000001D25                 mov     r15, [rsp+0A8h+var_90]
.text:0000000000001D2A                 mov     rbx, r10
.text:0000000000001D2D                 jmp     short loc_1D51
.text:0000000000001D2D ; ---------------------------------------------------------------------------
.text:0000000000001D2F                 align 10h
.text:0000000000001D30
.text:0000000000001D30 loc_1D30:                               ; CODE XREF: main+569↓j
.text:0000000000001D30                 mov     rax, [r15+28h]
.text:0000000000001D34                 cmp     rax, [r15+30h]
.text:0000000000001D38                 jnb     loc_1E13
.text:0000000000001D3E                 lea     rdx, [rax+1]
.text:0000000000001D42                 mov     [r15+28h], rdx
.text:0000000000001D46                 mov     byte ptr [rax], 0Ah
.text:0000000000001D49
.text:0000000000001D49 loc_1D49:                               ; CODE XREF: main+623↓j
.text:0000000000001D49                 xor     r13d, r13d
.text:0000000000001D4C
.text:0000000000001D4C loc_1D4C:                               ; CODE XREF: main+597↓j
.text:0000000000001D4C                 cmp     rbp, rbx
.text:0000000000001D4F                 jbe     short loc_1D99
.text:0000000000001D51
.text:0000000000001D51 loc_1D51:                               ; CODE XREF: main+52D↑j
.text:0000000000001D51                 mov     r12, [rsp+0A8h+var_A0]
.text:0000000000001D56                 mov     rax, rbp
.text:0000000000001D59                 sub     rax, rbx
.text:0000000000001D5C                 sub     r12, r13
.text:0000000000001D5F                 cmp     r12, rax
.text:0000000000001D62                 cmova   r12, rax
.text:0000000000001D66                 test    r12, r12
.text:0000000000001D69                 jz      short loc_1D30
.text:0000000000001D6B                 mov     rax, [rsp+0A8h+stream]
.text:0000000000001D70                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001D77                 mov     rdx, r12        ; n
.text:0000000000001D7A                 mov     esi, 1          ; size
.text:0000000000001D7F                 lea     rdi, [rax+rbx]  ; ptr
.text:0000000000001D83                 call    _fwrite_unlocked
.text:0000000000001D88                 cmp     r12, rax
.text:0000000000001D8B                 ja      loc_1F42
.text:0000000000001D91                 add     r13, r12
.text:0000000000001D94                 add     rbx, r12
.text:0000000000001D97                 jmp     short loc_1D4C
.text:0000000000001D99 ; ---------------------------------------------------------------------------
.text:0000000000001D99
.text:0000000000001D99 loc_1D99:                               ; CODE XREF: main+54F↑j
.text:0000000000001D99                 mov     rbx, r13
.text:0000000000001D9C                 mov     r12, [rsp+0A8h+var_88]
.text:0000000000001DA1                 mov     r13, [rsp+0A8h+var_80]
.text:0000000000001DA6                 mov     rbp, [rsp+0A8h+var_78]
.text:0000000000001DAB
.text:0000000000001DAB loc_1DAB:                               ; CODE XREF: main+50A↑j
.text:0000000000001DAB                                         ; main+5E5↓j
.text:0000000000001DAB                 mov     eax, [r12]
.text:0000000000001DAF                 test    al, 30h
.text:0000000000001DB1                 jnz     loc_1C65
.text:0000000000001DB7                 cmp     rbp, 7800h
.text:0000000000001DBE                 jz      loc_1C26
.text:0000000000001DC4                 jmp     loc_1C65
.text:0000000000001DC9 ; ---------------------------------------------------------------------------
.text:0000000000001DC9
.text:0000000000001DC9 loc_1DC9:                               ; CODE XREF: main+4FE↑j
.text:0000000000001DC9                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001DD0                 mov     rdi, [rsp+0A8h+stream] ; ptr
.text:0000000000001DD5                 mov     rdx, r15        ; n
.text:0000000000001DD8                 mov     esi, 1          ; size
.text:0000000000001DDD                 call    _fwrite_unlocked
.text:0000000000001DE2                 cmp     r15, rax
.text:0000000000001DE5                 jbe     short loc_1DAB
.text:0000000000001DE7                 lea     rsi, aWriteError ; "write error"
.text:0000000000001DEE                 mov     edx, 5          ; category
.text:0000000000001DF3                 xor     edi, edi        ; domainname
.text:0000000000001DF5                 call    _dcgettext
.text:0000000000001DFA                 mov     rbx, rax
.text:0000000000001DFD                 call    ___errno_location
.text:0000000000001E02                 mov     esi, [rax]      ; errnum
.text:0000000000001E04                 mov     rdx, rbx        ; format
.text:0000000000001E07                 mov     edi, 1          ; status
.text:0000000000001E0C                 xor     eax, eax
.text:0000000000001E0E                 call    _error
.text:0000000000001E13
.text:0000000000001E13 loc_1E13:                               ; CODE XREF: main+538↑j
.text:0000000000001E13                 mov     esi, 0Ah        ; int
.text:0000000000001E18                 mov     rdi, r15        ; _IO_FILE *
.text:0000000000001E1B                 call    ___overflow
.text:0000000000001E20                 add     eax, 1
.text:0000000000001E23                 jnz     loc_1D49
.text:0000000000001E29                 lea     rsi, aWriteError ; "write error"
.text:0000000000001E30                 mov     edx, 5          ; category
.text:0000000000001E35                 xor     edi, edi        ; domainname
.text:0000000000001E37                 call    _dcgettext
.text:0000000000001E3C                 mov     rbx, rax
.text:0000000000001E3F                 call    ___errno_location
.text:0000000000001E44                 mov     esi, [rax]      ; errnum
.text:0000000000001E46                 mov     rdx, rbx        ; format
.text:0000000000001E49                 mov     edi, 1          ; status
.text:0000000000001E4E                 xor     eax, eax
.text:0000000000001E50                 call    _error
.text:0000000000001E55
.text:0000000000001E55 loc_1E55:                               ; CODE XREF: main+3CD↑j
.text:0000000000001E55                 mov     rdi, [rsp+0A8h+filename] ; s1
.text:0000000000001E5A                 lea     rsi, aLt+2      ; s2
.text:0000000000001E61                 call    _strcmp
.text:0000000000001E66                 mov     ebp, eax
.text:0000000000001E68                 call    ___errno_location
.text:0000000000001E6D                 test    ebp, ebp
.text:0000000000001E6F                 mov     rbx, rax
.text:0000000000001E72                 jnz     short loc_1E98
.text:0000000000001E74                 lea     rsi, aClosingStandar ; "closing standard input"
.text:0000000000001E7B                 mov     edx, 5          ; category
.text:0000000000001E80                 xor     edi, edi        ; domainname
.text:0000000000001E82                 call    _dcgettext
.text:0000000000001E87                 mov     esi, [rbx]      ; errnum
.text:0000000000001E89                 mov     rdx, rax        ; format
.text:0000000000001E8C                 mov     edi, 1          ; status
.text:0000000000001E91                 xor     eax, eax
.text:0000000000001E93                 call    _error
.text:0000000000001E98
.text:0000000000001E98 loc_1E98:                               ; CODE XREF: main+672↑j
.text:0000000000001E98                 mov     rdx, [rsp+0A8h+filename]
.text:0000000000001E9D                 mov     esi, 3
.text:0000000000001EA2                 xor     edi, edi
.text:0000000000001EA4                 call    quotearg_n_style_colon
.text:0000000000001EA9                 mov     esi, [rbx]      ; errnum
.text:0000000000001EAB                 lea     rdx, format     ; format
.text:0000000000001EB2                 mov     rcx, rax
.text:0000000000001EB5                 mov     edi, 1          ; status
.text:0000000000001EBA                 xor     eax, eax
.text:0000000000001EBC                 call    _error
.text:0000000000001EC1
.text:0000000000001EC1 loc_1EC1:                               ; CODE XREF: main+392↑j
.text:0000000000001EC1                 lea     rsi, aInvalidInput ; "invalid input"
.text:0000000000001EC8                 mov     edx, 5          ; category
.text:0000000000001ECD                 xor     edi, edi        ; domainname
.text:0000000000001ECF                 call    _dcgettext
.text:0000000000001ED4                 xor     esi, esi        ; errnum
.text:0000000000001ED6                 mov     rdx, rax        ; format
.text:0000000000001ED9                 mov     edi, 1          ; status
.text:0000000000001EDE                 xor     eax, eax
.text:0000000000001EE0                 call    _error
.text:0000000000001EE5
.text:0000000000001EE5 loc_1EE5:                               ; CODE XREF: main+389↑j
.text:0000000000001EE5                 lea     rsi, aWriteError ; "write error"
.text:0000000000001EEC                 mov     edx, 5          ; category
.text:0000000000001EF1                 xor     edi, edi        ; domainname
.text:0000000000001EF3                 call    _dcgettext
.text:0000000000001EF8                 mov     rbx, rax
.text:0000000000001EFB                 call    ___errno_location
.text:0000000000001F00                 mov     esi, [rax]      ; errnum
.text:0000000000001F02                 mov     rdx, rbx        ; format
.text:0000000000001F05                 mov     edi, 1          ; status
.text:0000000000001F0A                 xor     eax, eax
.text:0000000000001F0C                 call    _error
.text:0000000000001F11
.text:0000000000001F11 loc_1F11:                               ; CODE XREF: main+25C↑j
.text:0000000000001F11                 lea     rsi, aReadError ; "read error"
.text:0000000000001F18                 mov     edx, 5          ; category
.text:0000000000001F1D                 xor     edi, edi        ; domainname
.text:0000000000001F1F                 call    _dcgettext
.text:0000000000001F24                 mov     rbx, rax
.text:0000000000001F27                 call    ___errno_location
.text:0000000000001F2C                 mov     esi, [rax]      ; errnum
.text:0000000000001F2E                 mov     rdx, rbx        ; format
.text:0000000000001F31                 mov     edi, 1          ; status
.text:0000000000001F36                 xor     eax, eax
.text:0000000000001F38                 call    _error
.text:0000000000001F3D
.text:0000000000001F3D loc_1F3D:                               ; CODE XREF: main+3E3↑j
.text:0000000000001F3D                 call    ___stack_chk_fail
.text:0000000000001F42 ; ---------------------------------------------------------------------------
.text:0000000000001F42
.text:0000000000001F42 loc_1F42:                               ; CODE XREF: main+58B↑j
.text:0000000000001F42                 lea     rsi, aWriteError ; "write error"
.text:0000000000001F49                 mov     edx, 5          ; category
.text:0000000000001F4E                 xor     edi, edi        ; domainname
.text:0000000000001F50                 call    _dcgettext
.text:0000000000001F55                 mov     rbx, rax
.text:0000000000001F58                 call    ___errno_location
.text:0000000000001F5D                 mov     esi, [rax]      ; errnum
.text:0000000000001F5F                 mov     rdx, rbx        ; format
.text:0000000000001F62                 mov     edi, 1          ; status
.text:0000000000001F67                 xor     eax, eax
.text:0000000000001F69                 call    _error
.text:0000000000001F6E
.text:0000000000001F6E loc_1F6E:                               ; CODE XREF: main+115↑j
.text:0000000000001F6E                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001F73                 jnz     short loc_1FAD
.text:0000000000001F75                 xor     edi, edi        ; status
.text:0000000000001F77                 call    usage
.text:0000000000001F7C ; ---------------------------------------------------------------------------
.text:0000000000001F7C
.text:0000000000001F7C loc_1F7C:                               ; CODE XREF: main+15E↑j
.text:0000000000001F7C                 mov     rdi, [r12+rax*8+8]
.text:0000000000001F81                 call    quote
.text:0000000000001F86                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000001F8D                 mov     rbx, rax
.text:0000000000001F90                 mov     edx, 5          ; category
.text:0000000000001F95                 xor     edi, edi        ; domainname
.text:0000000000001F97                 call    _dcgettext
.text:0000000000001F9C                 mov     rcx, rbx
.text:0000000000001F9F                 mov     rdx, rax        ; format
.text:0000000000001FA2                 xor     esi, esi        ; errnum
.text:0000000000001FA4                 xor     edi, edi        ; status
.text:0000000000001FA6                 xor     eax, eax
.text:0000000000001FA8                 call    _error
.text:0000000000001FAD
.text:0000000000001FAD loc_1FAD:                               ; CODE XREF: main+A8↑j
.text:0000000000001FAD                                         ; main+773↑j
.text:0000000000001FAD                 mov     edi, 1          ; status
.text:0000000000001FB2                 call    usage
.text:0000000000001FB7 ; ---------------------------------------------------------------------------
.text:0000000000001FB7
.text:0000000000001FB7 loc_1FB7:                               ; CODE XREF: main+481↑j
.text:0000000000001FB7                 mov     esi, 0Ah        ; int
.text:0000000000001FBC                 mov     rdi, rcx        ; _IO_FILE *
.text:0000000000001FBF                 call    ___overflow
.text:0000000000001FC4                 add     eax, 1
.text:0000000000001FC7                 jnz     loc_1C97
.text:0000000000001FCD                 lea     rsi, aWriteError ; "write error"
.text:0000000000001FD4                 mov     edx, 5          ; category
.text:0000000000001FD9                 xor     edi, edi        ; domainname
.text:0000000000001FDB                 call    _dcgettext
.text:0000000000001FE0                 mov     rbx, rax
.text:0000000000001FE3                 call    ___errno_location
.text:0000000000001FE8                 mov     esi, [rax]      ; errnum
.text:0000000000001FEA                 mov     rdx, rbx        ; format
.text:0000000000001FED                 mov     edi, 1          ; status
.text:0000000000001FF2                 xor     eax, eax
.text:0000000000001FF4                 call    _error
.text:0000000000001FF4 ; } // starts at 1800
.text:0000000000001FF9                 nop     dword ptr [rax+00000000h]
.text:0000000000001FF9 main            endp ; sp-analysis failed
.text:0000000000001FF9
.text:0000000000002000
.text:0000000000002000 ; =============== S U B R O U T I N E =======================================
.text:0000000000002000
.text:0000000000002000 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002000
.text:0000000000002000 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002000                 public start
.text:0000000000002000 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002000 ; __unwind {
.text:0000000000002000                 xor     ebp, ebp
.text:0000000000002002                 mov     r9, rdx         ; rtld_fini
.text:0000000000002005                 pop     rsi             ; argc
.text:0000000000002006                 mov     rdx, rsp        ; ubp_av
.text:0000000000002009                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000200D                 push    rax
.text:000000000000200E                 push    rsp             ; stack_end
.text:000000000000200F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002016                 lea     rcx, __libc_csu_init ; init
.text:000000000000201D                 lea     rdi, main       ; main
.text:0000000000002024                 call    cs:__libc_start_main_ptr
.text:000000000000202A                 hlt
.text:000000000000202A ; } // starts at 2000
.text:000000000000202A start           endp
.text:000000000000202A
.text:000000000000202A ; ---------------------------------------------------------------------------
.text:000000000000202B                 align 10h
.text:0000000000002030
.text:0000000000002030 ; =============== S U B R O U T I N E =======================================
.text:0000000000002030
.text:0000000000002030 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002030
.text:0000000000002030 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_20E3↓p
.text:0000000000002030                 lea     rdi, __bss_start
.text:0000000000002037                 push    rbp
.text:0000000000002038                 lea     rax, __bss_start
.text:000000000000203F                 cmp     rax, rdi
.text:0000000000002042                 mov     rbp, rsp
.text:0000000000002045                 jz      short loc_2060
.text:0000000000002047                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000204E                 test    rax, rax
.text:0000000000002051                 jz      short loc_2060
.text:0000000000002053                 pop     rbp
.text:0000000000002054                 jmp     rax
.text:0000000000002054 ; ---------------------------------------------------------------------------
.text:0000000000002056                 align 20h
.text:0000000000002060
.text:0000000000002060 loc_2060:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002060                                         ; deregister_tm_clones+21↑j
.text:0000000000002060                 pop     rbp
.text:0000000000002061                 retn
.text:0000000000002061 deregister_tm_clones endp
.text:0000000000002061
.text:0000000000002061 ; ---------------------------------------------------------------------------
.text:0000000000002062                 align 10h
.text:0000000000002070
.text:0000000000002070 ; =============== S U B R O U T I N E =======================================
.text:0000000000002070
.text:0000000000002070 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002070
.text:0000000000002070 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002070                 lea     rdi, __bss_start
.text:0000000000002077                 lea     rsi, __bss_start
.text:000000000000207E                 push    rbp
.text:000000000000207F                 sub     rsi, rdi
.text:0000000000002082                 mov     rbp, rsp
.text:0000000000002085                 sar     rsi, 3
.text:0000000000002089                 mov     rax, rsi
.text:000000000000208C                 shr     rax, 3Fh
.text:0000000000002090                 add     rsi, rax
.text:0000000000002093                 sar     rsi, 1
.text:0000000000002096                 jz      short loc_20B0
.text:0000000000002098                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000209F                 test    rax, rax
.text:00000000000020A2                 jz      short loc_20B0
.text:00000000000020A4                 pop     rbp
.text:00000000000020A5                 jmp     rax
.text:00000000000020A5 ; ---------------------------------------------------------------------------
.text:00000000000020A7                 align 10h
.text:00000000000020B0
.text:00000000000020B0 loc_20B0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000020B0                                         ; register_tm_clones+32↑j
.text:00000000000020B0                 pop     rbp
.text:00000000000020B1                 retn
.text:00000000000020B1 register_tm_clones endp
.text:00000000000020B1
.text:00000000000020B1 ; ---------------------------------------------------------------------------
.text:00000000000020B2                 align 20h
.text:00000000000020C0
.text:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020C0
.text:00000000000020C0 ; Attributes: info_from_lumina
.text:00000000000020C0
.text:00000000000020C0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000020C0                 cmp     cs:completed_7697, 0
.text:00000000000020C7                 jnz     short locret_20F8
.text:00000000000020C9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000020D1                 push    rbp
.text:00000000000020D2                 mov     rbp, rsp
.text:00000000000020D5                 jz      short loc_20E3
.text:00000000000020D7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000020DE                 call    __cxa_finalize
.text:00000000000020E3
.text:00000000000020E3 loc_20E3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000020E3                 call    deregister_tm_clones
.text:00000000000020E8                 mov     cs:completed_7697, 1
.text:00000000000020EF                 pop     rbp
.text:00000000000020F0                 retn
.text:00000000000020F0 ; ---------------------------------------------------------------------------
.text:00000000000020F1                 align 8
.text:00000000000020F8
.text:00000000000020F8 locret_20F8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000020F8                 rep retn
.text:00000000000020F8 __do_global_dtors_aux endp
.text:00000000000020F8
.text:00000000000020F8 ; ---------------------------------------------------------------------------
.text:00000000000020FA                 align 20h
.text:0000000000002100
.text:0000000000002100 ; =============== S U B R O U T I N E =======================================
.text:0000000000002100
.text:0000000000002100 ; Attributes: bp-based frame
.text:0000000000002100
.text:0000000000002100 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002100                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002100                 push    rbp
.text:0000000000002101                 mov     rbp, rsp
.text:0000000000002104                 pop     rbp
.text:0000000000002105                 jmp     register_tm_clones
.text:0000000000002105 frame_dummy     endp
.text:0000000000002105
.text:0000000000002105 ; ---------------------------------------------------------------------------
.text:000000000000210A                 align 10h
.text:0000000000002110
.text:0000000000002110 ; =============== S U B R O U T I N E =======================================
.text:0000000000002110
.text:0000000000002110 ; Attributes: noreturn
.text:0000000000002110
.text:0000000000002110 ; void __fastcall __noreturn usage(int status)
.text:0000000000002110                 public usage
.text:0000000000002110 usage           proc near               ; CODE XREF: main+777↑p
.text:0000000000002110                                         ; main+7B2↑p
.text:0000000000002110
.text:0000000000002110 var_A8          = qword ptr -0A8h
.text:0000000000002110 var_A0          = qword ptr -0A0h
.text:0000000000002110 var_98          = qword ptr -98h
.text:0000000000002110 var_90          = qword ptr -90h
.text:0000000000002110 var_88          = qword ptr -88h
.text:0000000000002110 var_80          = qword ptr -80h
.text:0000000000002110 var_78          = qword ptr -78h
.text:0000000000002110 var_70          = qword ptr -70h
.text:0000000000002110 var_68          = qword ptr -68h
.text:0000000000002110 var_60          = qword ptr -60h
.text:0000000000002110 var_58          = qword ptr -58h
.text:0000000000002110 var_50          = qword ptr -50h
.text:0000000000002110 var_48          = qword ptr -48h
.text:0000000000002110 var_40          = qword ptr -40h
.text:0000000000002110 var_30          = qword ptr -30h
.text:0000000000002110
.text:0000000000002110 ; __unwind {
.text:0000000000002110                 push    r13
.text:0000000000002112                 push    r12
.text:0000000000002114                 mov     edx, 5          ; category
.text:0000000000002119                 push    rbp
.text:000000000000211A                 push    rbx
.text:000000000000211B                 mov     ebp, edi
.text:000000000000211D                 sub     rsp, 88h
.text:0000000000002124                 mov     rbx, cs:program_name
.text:000000000000212B                 mov     rax, fs:28h
.text:0000000000002134                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002139                 xor     eax, eax
.text:000000000000213B                 test    edi, edi
.text:000000000000213D                 jz      short loc_216D
.text:000000000000213F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002146                 xor     edi, edi        ; domainname
.text:0000000000002148                 call    _dcgettext
.text:000000000000214D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002154                 mov     rdx, rax
.text:0000000000002157                 mov     rcx, rbx
.text:000000000000215A                 mov     esi, 1
.text:000000000000215F                 xor     eax, eax
.text:0000000000002161                 call    ___fprintf_chk
.text:0000000000002166
.text:0000000000002166 loc_2166:                               ; CODE XREF: usage+316↓j
.text:0000000000002166                 mov     edi, ebp        ; status
.text:0000000000002168                 call    _exit
.text:000000000000216D ; ---------------------------------------------------------------------------
.text:000000000000216D
.text:000000000000216D loc_216D:                               ; CODE XREF: usage+2D↑j
.text:000000000000216D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]\n"
.text:0000000000002174                 xor     edi, edi        ; domainname
.text:0000000000002176                 call    _dcgettext
.text:000000000000217B                 mov     rdx, rbx
.text:000000000000217E                 mov     rsi, rax
.text:0000000000002181                 mov     edi, 1
.text:0000000000002186                 xor     eax, eax
.text:0000000000002188                 call    ___printf_chk
.text:000000000000218D                 lea     rsi, aBaseDEncodeOrD ; "Base%d encode or decode FILE, or standa"...
.text:0000000000002194                 mov     edx, 5          ; category
.text:0000000000002199                 xor     edi, edi        ; domainname
.text:000000000000219B                 call    _dcgettext
.text:00000000000021A0                 mov     edx, 40h ; '@'
.text:00000000000021A5                 mov     rsi, rax
.text:00000000000021A8                 mov     edi, 1
.text:00000000000021AD                 xor     eax, eax
.text:00000000000021AF                 call    ___printf_chk
.text:00000000000021B4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000021BB                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:00000000000021C2                 mov     edx, 5          ; category
.text:00000000000021C7                 xor     edi, edi        ; domainname
.text:00000000000021C9                 call    _dcgettext
.text:00000000000021CE                 mov     rsi, rbx        ; stream
.text:00000000000021D1                 mov     rdi, rax        ; s
.text:00000000000021D4                 call    _fputs_unlocked
.text:00000000000021D9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000021E0                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000021E7                 mov     edx, 5          ; category
.text:00000000000021EC                 xor     edi, edi        ; domainname
.text:00000000000021EE                 call    _dcgettext
.text:00000000000021F3                 mov     rsi, rbx        ; stream
.text:00000000000021F6                 mov     rdi, rax        ; s
.text:00000000000021F9                 call    _fputs_unlocked
.text:00000000000021FE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002205                 lea     rsi, aDDecodeDecodeD ; "  -d, --decode          decode data\n  "...
.text:000000000000220C                 mov     edx, 5          ; category
.text:0000000000002211                 xor     edi, edi        ; domainname
.text:0000000000002213                 call    _dcgettext
.text:0000000000002218                 mov     rsi, rbx        ; stream
.text:000000000000221B                 mov     rdi, rax        ; s
.text:000000000000221E                 call    _fputs_unlocked
.text:0000000000002223                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000222A                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002231                 mov     edx, 5          ; category
.text:0000000000002236                 xor     edi, edi        ; domainname
.text:0000000000002238                 call    _dcgettext
.text:000000000000223D                 mov     rsi, rbx        ; stream
.text:0000000000002240                 mov     rdi, rax        ; s
.text:0000000000002243                 call    _fputs_unlocked
.text:0000000000002248                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000224F                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002256                 mov     edx, 5          ; category
.text:000000000000225B                 xor     edi, edi        ; domainname
.text:000000000000225D                 call    _dcgettext
.text:0000000000002262                 mov     rsi, rbx        ; stream
.text:0000000000002265                 mov     rdi, rax        ; s
.text:0000000000002268                 lea     rbx, aBase64    ; "base64"
.text:000000000000226F                 call    _fputs_unlocked
.text:0000000000002274                 lea     rsi, aTheDataAreEnco ; "\nThe data are encoded as described for"...
.text:000000000000227B                 mov     edx, 5          ; category
.text:0000000000002280                 xor     edi, edi        ; domainname
.text:0000000000002282                 call    _dcgettext
.text:0000000000002287                 lea     rcx, aBase64    ; "base64"
.text:000000000000228E                 mov     rsi, rax
.text:0000000000002291                 mov     edi, 1
.text:0000000000002296                 xor     eax, eax
.text:0000000000002298                 mov     rdx, rcx
.text:000000000000229B                 call    ___printf_chk
.text:00000000000022A0                 lea     rax, asc_5BC9   ; "["
.text:00000000000022A7                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000022AE                 mov     [rsp+0A8h+var_48], 0
.text:00000000000022B7                 mov     [rsp+0A8h+var_40], 0
.text:00000000000022C0                 mov     rdx, rsp
.text:00000000000022C3                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000022C7                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000022CE                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000022D3                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000022DA                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000022DF                 lea     rax, domainname ; "coreutils"
.text:00000000000022E6                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000022EB                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000022F2                 mov     [rsp+0A8h+var_98], rax
.text:00000000000022F7                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000022FE                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002303                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002308                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000230F                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002314                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000231B                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002320                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002325                 mov     [rsp+0A8h+var_60], rax
.text:000000000000232A                 mov     [rsp+0A8h+var_50], rax
.text:000000000000232F                 nop
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: usage+23D↓j
.text:0000000000002330                 add     rdx, 10h
.text:0000000000002334                 mov     rdi, [rdx]
.text:0000000000002337                 test    rdi, rdi
.text:000000000000233A                 jz      short loc_234F
.text:000000000000233C                 mov     ecx, 7
.text:0000000000002341                 mov     rsi, rbx
.text:0000000000002344                 repe cmpsb
.text:0000000000002346                 setnbe  al
.text:0000000000002349                 sbb     al, 0
.text:000000000000234B                 test    al, al
.text:000000000000234D                 jnz     short loc_2330
.text:000000000000234F
.text:000000000000234F loc_234F:                               ; CODE XREF: usage+22A↑j
.text:000000000000234F                 mov     r12, [rdx+8]
.text:0000000000002353                 xor     edi, edi        ; domainname
.text:0000000000002355                 mov     edx, 5          ; category
.text:000000000000235A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002361                 test    r12, r12
.text:0000000000002364                 jz      loc_242B
.text:000000000000236A                 call    _dcgettext
.text:000000000000236F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002376                 lea     rdx, unk_5C3F
.text:000000000000237D                 mov     rsi, rax
.text:0000000000002380                 mov     edi, 1
.text:0000000000002385                 xor     eax, eax
.text:0000000000002387                 call    ___printf_chk
.text:000000000000238C                 xor     esi, esi        ; locale
.text:000000000000238E                 mov     edi, 5          ; category
.text:0000000000002393                 call    _setlocale
.text:0000000000002398                 test    rax, rax
.text:000000000000239B                 jz      short loc_23B9
.text:000000000000239D                 lea     rsi, s2         ; "en_"
.text:00000000000023A4                 mov     edx, 3          ; n
.text:00000000000023A9                 mov     rdi, rax        ; s1
.text:00000000000023AC                 call    _strncmp
.text:00000000000023B1                 test    eax, eax
.text:00000000000023B3                 jnz     loc_24C0
.text:00000000000023B9
.text:00000000000023B9 loc_23B9:                               ; CODE XREF: usage+28B↑j
.text:00000000000023B9                                         ; usage+3D5↓j
.text:00000000000023B9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000023C0                 xor     edi, edi        ; domainname
.text:00000000000023C2                 mov     edx, 5          ; category
.text:00000000000023C7                 call    _dcgettext
.text:00000000000023CC                 lea     rcx, aBase64    ; "base64"
.text:00000000000023D3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000023DA                 mov     rsi, rax
.text:00000000000023DD                 mov     edi, 1
.text:00000000000023E2                 xor     eax, eax
.text:00000000000023E4                 call    ___printf_chk
.text:00000000000023E9                 cmp     r12, rbx
.text:00000000000023EC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000023F3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000023FA                 cmovz   rbx, rcx
.text:00000000000023FE
.text:00000000000023FE loc_23FE:                               ; CODE XREF: usage+3A4↓j
.text:00000000000023FE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002405                 xor     edi, edi        ; domainname
.text:0000000000002407                 mov     edx, 5          ; category
.text:000000000000240C                 call    _dcgettext
.text:0000000000002411                 mov     rcx, rbx
.text:0000000000002414                 mov     rsi, rax
.text:0000000000002417                 mov     rdx, r12
.text:000000000000241A                 mov     edi, 1
.text:000000000000241F                 xor     eax, eax
.text:0000000000002421                 call    ___printf_chk
.text:0000000000002426                 jmp     loc_2166
.text:000000000000242B ; ---------------------------------------------------------------------------
.text:000000000000242B
.text:000000000000242B loc_242B:                               ; CODE XREF: usage+254↑j
.text:000000000000242B                 call    _dcgettext
.text:0000000000002430                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002437                 lea     rdx, unk_5C3F
.text:000000000000243E                 mov     rsi, rax
.text:0000000000002441                 mov     edi, 1
.text:0000000000002446                 xor     eax, eax
.text:0000000000002448                 call    ___printf_chk
.text:000000000000244D                 xor     esi, esi        ; locale
.text:000000000000244F                 mov     edi, 5          ; category
.text:0000000000002454                 call    _setlocale
.text:0000000000002459                 test    rax, rax
.text:000000000000245C                 jz      short loc_2476
.text:000000000000245E                 lea     rsi, s2         ; "en_"
.text:0000000000002465                 mov     edx, 3          ; n
.text:000000000000246A                 mov     rdi, rax        ; s1
.text:000000000000246D                 call    _strncmp
.text:0000000000002472                 test    eax, eax
.text:0000000000002474                 jnz     short loc_24B9
.text:0000000000002476
.text:0000000000002476 loc_2476:                               ; CODE XREF: usage+34C↑j
.text:0000000000002476                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000247D                 mov     edx, 5          ; category
.text:0000000000002482                 xor     edi, edi        ; domainname
.text:0000000000002484                 lea     r12, aBase64    ; "base64"
.text:000000000000248B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002492                 call    _dcgettext
.text:0000000000002497                 lea     rcx, aBase64    ; "base64"
.text:000000000000249E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000024A5                 mov     rsi, rax
.text:00000000000024A8                 mov     edi, 1
.text:00000000000024AD                 xor     eax, eax
.text:00000000000024AF                 call    ___printf_chk
.text:00000000000024B4                 jmp     loc_23FE
.text:00000000000024B9 ; ---------------------------------------------------------------------------
.text:00000000000024B9
.text:00000000000024B9 loc_24B9:                               ; CODE XREF: usage+364↑j
.text:00000000000024B9                 lea     r12, aBase64    ; "base64"
.text:00000000000024C0
.text:00000000000024C0 loc_24C0:                               ; CODE XREF: usage+2A3↑j
.text:00000000000024C0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000024C7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000024CE                 xor     edi, edi        ; domainname
.text:00000000000024D0                 mov     edx, 5          ; category
.text:00000000000024D5                 call    _dcgettext
.text:00000000000024DA                 mov     rsi, r13        ; stream
.text:00000000000024DD                 mov     rdi, rax        ; s
.text:00000000000024E0                 call    _fputs_unlocked
.text:00000000000024E5                 jmp     loc_23B9
.text:00000000000024E5 ; } // starts at 2110
.text:00000000000024E5 usage           endp
.text:00000000000024E5
.text:00000000000024E5 ; ---------------------------------------------------------------------------
.text:00000000000024EA                 align 10h
.text:00000000000024F0
.text:00000000000024F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024F0
.text:00000000000024F0
.text:00000000000024F0 decode_4        proc near               ; CODE XREF: base64_decode_ctx+E4↓p
.text:00000000000024F0                                         ; base64_decode_ctx+161↓p
.text:00000000000024F0 ; __unwind {
.text:00000000000024F0                 xor     eax, eax
.text:00000000000024F2                 cmp     rsi, 1
.text:00000000000024F6                 jbe     locret_2589
.text:00000000000024FC                 movzx   r8d, byte ptr [rdi]
.text:0000000000002500                 lea     r9, b64
.text:0000000000002507                 movzx   r8d, byte ptr [r9+r8]
.text:000000000000250C                 test    r8b, r8b
.text:000000000000250F                 js      short locret_2589
.text:0000000000002511                 movzx   r10d, byte ptr [rdi+1]
.text:0000000000002516                 movzx   r10d, byte ptr [r9+r10]
.text:000000000000251B                 test    r10b, r10b
.text:000000000000251E                 js      short locret_2589
.text:0000000000002520                 cmp     qword ptr [rcx], 0
.text:0000000000002524                 mov     rax, [rdx]
.text:0000000000002527                 jnz     short loc_25A0
.text:0000000000002529
.text:0000000000002529 loc_2529:                               ; CODE XREF: decode_4+CA↓j
.text:0000000000002529                 cmp     rsi, 2
.text:000000000000252D                 jz      short loc_2596
.text:000000000000252F                 movzx   r8d, byte ptr [rdi+2]
.text:0000000000002534                 cmp     r8b, 3Dh ; '='
.text:0000000000002538                 jz      short loc_2590
.text:000000000000253A                 movzx   r8d, byte ptr [r9+r8]
.text:000000000000253F                 test    r8b, r8b
.text:0000000000002542                 js      short loc_2596
.text:0000000000002544                 cmp     qword ptr [rcx], 0
.text:0000000000002548                 jnz     short loc_25C0
.text:000000000000254A
.text:000000000000254A loc_254A:                               ; CODE XREF: decode_4+EA↓j
.text:000000000000254A                 cmp     rsi, 3
.text:000000000000254E                 jz      short loc_2596
.text:0000000000002550                 movzx   edi, byte ptr [rdi+3]
.text:0000000000002554                 cmp     dil, 3Dh ; '='
.text:0000000000002558                 jz      loc_25F0
.text:000000000000255E                 movzx   esi, byte ptr [r9+rdi]
.text:0000000000002563                 test    sil, sil
.text:0000000000002566                 js      short loc_2596
.text:0000000000002568                 cmp     qword ptr [rcx], 0
.text:000000000000256C                 jz      short loc_2581
.text:000000000000256E                 shl     r8d, 6
.text:0000000000002572                 add     rax, 1
.text:0000000000002576                 or      r8d, esi
.text:0000000000002579                 mov     [rax-1], r8b
.text:000000000000257D                 sub     qword ptr [rcx], 1
.text:0000000000002581
.text:0000000000002581 loc_2581:                               ; CODE XREF: decode_4+7C↑j
.text:0000000000002581                                         ; decode_4+F6↓j ...
.text:0000000000002581                 mov     [rdx], rax
.text:0000000000002584                 mov     eax, 1
.text:0000000000002589
.text:0000000000002589 locret_2589:                            ; CODE XREF: decode_4+6↑j
.text:0000000000002589                                         ; decode_4+1F↑j ...
.text:0000000000002589                 rep retn
.text:0000000000002589 ; ---------------------------------------------------------------------------
.text:000000000000258B                 align 10h
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: decode_4+48↑j
.text:0000000000002590                 cmp     rsi, 4
.text:0000000000002594                 jz      short loc_25E0
.text:0000000000002596
.text:0000000000002596 loc_2596:                               ; CODE XREF: decode_4+3D↑j
.text:0000000000002596                                         ; decode_4+52↑j ...
.text:0000000000002596                 mov     [rdx], rax
.text:0000000000002599                 xor     eax, eax
.text:000000000000259B                 retn
.text:000000000000259B ; ---------------------------------------------------------------------------
.text:000000000000259C                 align 20h
.text:00000000000025A0
.text:00000000000025A0 loc_25A0:                               ; CODE XREF: decode_4+37↑j
.text:00000000000025A0                 mov     r11d, r10d
.text:00000000000025A3                 shl     r8d, 2
.text:00000000000025A7                 add     rax, 1
.text:00000000000025AB                 sar     r11b, 4
.text:00000000000025AF                 or      r8d, r11d
.text:00000000000025B2                 mov     [rax-1], r8b
.text:00000000000025B6                 sub     qword ptr [rcx], 1
.text:00000000000025BA                 jmp     loc_2529
.text:00000000000025BA ; ---------------------------------------------------------------------------
.text:00000000000025BF                 align 20h
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: decode_4+58↑j
.text:00000000000025C0                 mov     r11d, r8d
.text:00000000000025C3                 shl     r10d, 4
.text:00000000000025C7                 add     rax, 1
.text:00000000000025CB                 sar     r11b, 2
.text:00000000000025CF                 or      r10d, r11d
.text:00000000000025D2                 mov     [rax-1], r10b
.text:00000000000025D6                 sub     qword ptr [rcx], 1
.text:00000000000025DA                 jmp     loc_254A
.text:00000000000025DA ; ---------------------------------------------------------------------------
.text:00000000000025DF                 align 20h
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: decode_4+A4↑j
.text:00000000000025E0                 cmp     byte ptr [rdi+3], 3Dh ; '='
.text:00000000000025E4                 jnz     short loc_2596
.text:00000000000025E6                 jmp     short loc_2581
.text:00000000000025E6 ; ---------------------------------------------------------------------------
.text:00000000000025E8                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: decode_4+68↑j
.text:00000000000025F0                 cmp     rsi, 4
.text:00000000000025F4                 jnz     short loc_2596
.text:00000000000025F6                 jmp     short loc_2581
.text:00000000000025F6 ; } // starts at 24F0
.text:00000000000025F6 decode_4        endp
.text:00000000000025F6
.text:00000000000025F6 ; ---------------------------------------------------------------------------
.text:00000000000025F8                 align 20h
.text:0000000000002600
.text:0000000000002600 ; =============== S U B R O U T I N E =======================================
.text:0000000000002600
.text:0000000000002600
.text:0000000000002600                 public base64_encode
.text:0000000000002600 base64_encode   proc near               ; CODE XREF: main+4F3↑p
.text:0000000000002600                                         ; base64_encode_alloc+76↓p
.text:0000000000002600 ; __unwind {
.text:0000000000002600                 test    cl, 3
.text:0000000000002603                 jnz     short loc_2619
.text:0000000000002605                 mov     rax, rcx
.text:0000000000002608                 shr     rax, 2
.text:000000000000260C                 lea     rax, [rax+rax*2]
.text:0000000000002610                 cmp     rax, rsi
.text:0000000000002613                 jz      loc_2728
.text:0000000000002619
.text:0000000000002619 loc_2619:                               ; CODE XREF: base64_encode+3↑j
.text:0000000000002619                 lea     r9, b64c
.text:0000000000002620                 jmp     loc_26A6
.text:0000000000002620 ; ---------------------------------------------------------------------------
.text:0000000000002625                 align 8
.text:0000000000002628
.text:0000000000002628 loc_2628:                               ; CODE XREF: base64_encode+DB↓j
.text:0000000000002628                 movzx   r8d, byte ptr [rdi+1]
.text:000000000000262D                 mov     r10d, r8d
.text:0000000000002630                 shr     r10b, 4
.text:0000000000002634                 add     eax, r10d
.text:0000000000002637                 and     eax, 3Fh
.text:000000000000263A                 cmp     rcx, 2
.text:000000000000263E                 movzx   eax, byte ptr [r9+rax]
.text:0000000000002643                 mov     [rdx+1], al
.text:0000000000002646                 jz      locret_2722
.text:000000000000264C                 shl     r8d, 2
.text:0000000000002650                 cmp     rsi, 2
.text:0000000000002654                 jz      loc_2710
.text:000000000000265A                 movzx   eax, byte ptr [rdi+2]
.text:000000000000265E                 mov     r10d, eax
.text:0000000000002661                 shr     r10b, 6
.text:0000000000002665                 add     r8d, r10d
.text:0000000000002668                 and     r8d, 3Fh
.text:000000000000266C                 cmp     rcx, 3
.text:0000000000002670                 movzx   r8d, byte ptr [r9+r8]
.text:0000000000002675                 mov     [rdx+2], r8b
.text:0000000000002679                 jz      locret_2722
.text:000000000000267F                 and     eax, 3Fh
.text:0000000000002682                 cmp     rcx, 4
.text:0000000000002686                 movzx   eax, byte ptr [r9+rax]
.text:000000000000268B                 mov     [rdx+3], al
.text:000000000000268E                 jz      locret_2722
.text:0000000000002694                 sub     rsi, 3
.text:0000000000002698                 jz      short loc_269E
.text:000000000000269A                 add     rdi, 3
.text:000000000000269E
.text:000000000000269E loc_269E:                               ; CODE XREF: base64_encode+98↑j
.text:000000000000269E                                         ; base64_encode+108↓j
.text:000000000000269E                 add     rdx, 4
.text:00000000000026A2                 sub     rcx, 4
.text:00000000000026A6
.text:00000000000026A6 loc_26A6:                               ; CODE XREF: base64_encode+20↑j
.text:00000000000026A6                 test    rsi, rsi
.text:00000000000026A9                 jz      loc_27A8
.text:00000000000026AF                 test    rcx, rcx
.text:00000000000026B2                 jz      loc_27A8
.text:00000000000026B8                 movzx   eax, byte ptr [rdi]
.text:00000000000026BB                 mov     r8d, eax
.text:00000000000026BE                 shr     r8b, 2
.text:00000000000026C2                 and     r8d, 3Fh
.text:00000000000026C6                 cmp     rcx, 1
.text:00000000000026CA                 movzx   r8d, byte ptr [r9+r8]
.text:00000000000026CF                 mov     [rdx], r8b
.text:00000000000026D2                 jz      short locret_2722
.text:00000000000026D4                 shl     eax, 4
.text:00000000000026D7                 cmp     rsi, 1
.text:00000000000026DB                 jnz     loc_2628
.text:00000000000026E1                 and     eax, 30h
.text:00000000000026E4                 cmp     rcx, 2
.text:00000000000026E8                 movzx   eax, byte ptr [r9+rax]
.text:00000000000026ED                 mov     [rdx+1], al
.text:00000000000026F0                 jz      short locret_2722
.text:00000000000026F2                 cmp     rcx, 3
.text:00000000000026F6                 mov     byte ptr [rdx+2], 3Dh ; '='
.text:00000000000026FA                 jz      short locret_2722
.text:00000000000026FC
.text:00000000000026FC loc_26FC:                               ; CODE XREF: base64_encode+120↓j
.text:00000000000026FC                 cmp     rcx, 4
.text:0000000000002700                 mov     byte ptr [rdx+3], 3Dh ; '='
.text:0000000000002704                 jz      short locret_2722
.text:0000000000002706                 xor     esi, esi
.text:0000000000002708                 jmp     short loc_269E
.text:0000000000002708 ; ---------------------------------------------------------------------------
.text:000000000000270A                 align 10h
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: base64_encode+54↑j
.text:0000000000002710                 and     r8d, 3Ch
.text:0000000000002714                 cmp     rcx, 3
.text:0000000000002718                 movzx   eax, byte ptr [r9+r8]
.text:000000000000271D                 mov     [rdx+2], al
.text:0000000000002720                 jnz     short loc_26FC
.text:0000000000002722
.text:0000000000002722 locret_2722:                            ; CODE XREF: base64_encode+46↑j
.text:0000000000002722                                         ; base64_encode+79↑j ...
.text:0000000000002722                 rep retn
.text:0000000000002722 ; ---------------------------------------------------------------------------
.text:0000000000002724                 align 8
.text:0000000000002728
.text:0000000000002728 loc_2728:                               ; CODE XREF: base64_encode+13↑j
.text:0000000000002728                 test    rax, rax
.text:000000000000272B                 lea     r8, [rdi+rax]
.text:000000000000272F                 lea     rcx, b64c
.text:0000000000002736                 jz      short locret_2722
.text:0000000000002738                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: base64_encode+19E↓j
.text:0000000000002740                 movzx   eax, byte ptr [rdi]
.text:0000000000002743                 add     rdi, 3
.text:0000000000002747                 add     rdx, 4
.text:000000000000274B                 mov     esi, eax
.text:000000000000274D                 shl     eax, 4
.text:0000000000002750                 shr     sil, 2
.text:0000000000002754                 and     esi, 3Fh
.text:0000000000002757                 movzx   esi, byte ptr [rcx+rsi]
.text:000000000000275B                 mov     [rdx-4], sil
.text:000000000000275F                 movzx   esi, byte ptr [rdi-2]
.text:0000000000002763                 mov     r9d, esi
.text:0000000000002766                 shr     r9b, 4
.text:000000000000276A                 add     eax, r9d
.text:000000000000276D                 and     eax, 3Fh
.text:0000000000002770                 movzx   eax, byte ptr [rcx+rax]
.text:0000000000002774                 mov     [rdx-3], al
.text:0000000000002777                 movzx   eax, byte ptr [rdi-1]
.text:000000000000277B                 mov     r9d, eax
.text:000000000000277E                 and     eax, 3Fh
.text:0000000000002781                 shr     r9b, 6
.text:0000000000002785                 movzx   eax, byte ptr [rcx+rax]
.text:0000000000002789                 lea     esi, [r9+rsi*4]
.text:000000000000278D                 and     esi, 3Fh
.text:0000000000002790                 movzx   esi, byte ptr [rcx+rsi]
.text:0000000000002794                 mov     [rdx-2], sil
.text:0000000000002798                 cmp     r8, rdi
.text:000000000000279B                 mov     [rdx-1], al
.text:000000000000279E                 jnz     short loc_2740
.text:00000000000027A0                 rep retn
.text:00000000000027A0 ; ---------------------------------------------------------------------------
.text:00000000000027A2                 align 8
.text:00000000000027A8
.text:00000000000027A8 loc_27A8:                               ; CODE XREF: base64_encode+A9↑j
.text:00000000000027A8                                         ; base64_encode+B2↑j
.text:00000000000027A8                 test    rcx, rcx
.text:00000000000027AB                 jz      locret_2722
.text:00000000000027B1                 mov     byte ptr [rdx], 0
.text:00000000000027B4                 retn
.text:00000000000027B4 ; } // starts at 2600
.text:00000000000027B4 base64_encode   endp
.text:00000000000027B4
.text:00000000000027B4 ; ---------------------------------------------------------------------------
.text:00000000000027B5                 align 20h
.text:00000000000027C0
.text:00000000000027C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027C0
.text:00000000000027C0
.text:00000000000027C0                 public base64_encode_alloc
.text:00000000000027C0 base64_encode_alloc proc near
.text:00000000000027C0 ; __unwind {
.text:00000000000027C0                 push    r14
.text:00000000000027C2                 push    r13
.text:00000000000027C4                 mov     r13, rdx
.text:00000000000027C7                 lea     rdx, [rsi+2]
.text:00000000000027CB                 push    r12
.text:00000000000027CD                 push    rbp
.text:00000000000027CE                 push    rbx
.text:00000000000027CF                 mov     rbx, 0AAAAAAAAAAAAAAABh
.text:00000000000027D9                 mov     rax, rdx
.text:00000000000027DC                 mul     rbx
.text:00000000000027DF                 shr     rdx, 1
.text:00000000000027E2                 lea     rbx, ds:0[rdx*4]
.text:00000000000027EA                 lea     rbp, [rbx+1]
.text:00000000000027EE                 cmp     rsi, rbp
.text:00000000000027F1                 jbe     short loc_2810
.text:00000000000027F3                 mov     qword ptr [r13+0], 0
.text:00000000000027FB                 xor     ebp, ebp
.text:00000000000027FD
.text:00000000000027FD loc_27FD:                               ; CODE XREF: base64_encode_alloc+65↓j
.text:00000000000027FD                 pop     rbx
.text:00000000000027FE                 mov     rax, rbp
.text:0000000000002801                 pop     rbp
.text:0000000000002802                 pop     r12
.text:0000000000002804                 pop     r13
.text:0000000000002806                 pop     r14
.text:0000000000002808                 retn
.text:0000000000002808 ; ---------------------------------------------------------------------------
.text:0000000000002809                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: base64_encode_alloc+31↑j
.text:0000000000002810                 mov     r14, rdi
.text:0000000000002813                 mov     rdi, rbp        ; size
.text:0000000000002816                 mov     r12, rsi
.text:0000000000002819                 call    _malloc
.text:000000000000281E                 test    rax, rax
.text:0000000000002821                 mov     [r13+0], rax
.text:0000000000002825                 jz      short loc_27FD
.text:0000000000002827                 mov     rcx, rbp
.text:000000000000282A                 mov     rdx, rax
.text:000000000000282D                 mov     rbp, rbx
.text:0000000000002830                 mov     rsi, r12
.text:0000000000002833                 mov     rdi, r14
.text:0000000000002836                 call    base64_encode
.text:000000000000283B                 pop     rbx
.text:000000000000283C                 mov     rax, rbp
.text:000000000000283F                 pop     rbp
.text:0000000000002840                 pop     r12
.text:0000000000002842                 pop     r13
.text:0000000000002844                 pop     r14
.text:0000000000002846                 retn
.text:0000000000002846 ; } // starts at 27C0
.text:0000000000002846 base64_encode_alloc endp
.text:0000000000002846
.text:0000000000002846 ; ---------------------------------------------------------------------------
.text:0000000000002847                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850
.text:0000000000002850                 public isbase64
.text:0000000000002850 isbase64        proc near               ; CODE XREF: main+2CB↑p
.text:0000000000002850 ; __unwind {
.text:0000000000002850                 lea     rax, b64
.text:0000000000002857                 movzx   edi, dil
.text:000000000000285B                 movzx   eax, byte ptr [rax+rdi]
.text:000000000000285F                 not     eax
.text:0000000000002861                 shr     al, 7
.text:0000000000002864                 retn
.text:0000000000002864 ; } // starts at 2850
.text:0000000000002864 isbase64        endp
.text:0000000000002864
.text:0000000000002864 ; ---------------------------------------------------------------------------
.text:0000000000002865                 align 10h
.text:0000000000002870
.text:0000000000002870 ; =============== S U B R O U T I N E =======================================
.text:0000000000002870
.text:0000000000002870
.text:0000000000002870                 public base64_decode_ctx_init
.text:0000000000002870 base64_decode_ctx_init proc near        ; CODE XREF: main+22C↑p
.text:0000000000002870 ; __unwind {
.text:0000000000002870                 mov     dword ptr [rdi], 0
.text:0000000000002876                 retn
.text:0000000000002876 ; } // starts at 2870
.text:0000000000002876 base64_decode_ctx_init endp
.text:0000000000002876
.text:0000000000002876 ; ---------------------------------------------------------------------------
.text:0000000000002877                 align 20h
.text:0000000000002880
.text:0000000000002880 ; =============== S U B R O U T I N E =======================================
.text:0000000000002880
.text:0000000000002880 ; Attributes: info_from_lumina
.text:0000000000002880
.text:0000000000002880                 public base64_decode_ctx
.text:0000000000002880 base64_decode_ctx proc near             ; CODE XREF: main+367↑p
.text:0000000000002880                                         ; base64_decode_alloc_ctx+5A↓p
.text:0000000000002880
.text:0000000000002880 var_63          = byte ptr -63h
.text:0000000000002880 var_62          = byte ptr -62h
.text:0000000000002880 var_61          = byte ptr -61h
.text:0000000000002880 var_60          = qword ptr -60h
.text:0000000000002880 var_58          = qword ptr -58h
.text:0000000000002880 var_50          = qword ptr -50h
.text:0000000000002880 var_48          = qword ptr -48h
.text:0000000000002880 var_40          = qword ptr -40h
.text:0000000000002880
.text:0000000000002880 ; __unwind {
.text:0000000000002880                 push    r15
.text:0000000000002882                 push    r14
.text:0000000000002884                 mov     r14, rdi
.text:0000000000002887                 push    r13
.text:0000000000002889                 push    r12
.text:000000000000288B                 mov     r13, rdx
.text:000000000000288E                 push    rbp
.text:000000000000288F                 push    rbx
.text:0000000000002890                 mov     r12, rsi
.text:0000000000002893                 sub     rsp, 38h
.text:0000000000002897                 mov     r15, [r8]
.text:000000000000289A                 mov     rbx, fs:28h
.text:00000000000028A3                 mov     [rsp+68h+var_40], rbx
.text:00000000000028A8                 xor     ebx, ebx
.text:00000000000028AA                 test    rdi, rdi
.text:00000000000028AD                 mov     [rsp+68h+var_50], rcx
.text:00000000000028B2                 mov     [rsp+68h+var_58], r8
.text:00000000000028B7                 mov     [rsp+68h+var_48], r15
.text:00000000000028BC                 setnz   [rsp+68h+var_61]
.text:00000000000028C1                 jz      loc_2AF0
.text:00000000000028C7                 test    rdx, rdx
.text:00000000000028CA                 mov     eax, [rdi]
.text:00000000000028CC                 setnz   [rsp+68h+var_63]
.text:00000000000028D1                 movzx   ebx, [rsp+68h+var_63]
.text:00000000000028D6                 test    eax, eax
.text:00000000000028D8                 setz    al
.text:00000000000028DB                 and     eax, ebx
.text:00000000000028DD                 mov     [rsp+68h+var_62], al
.text:00000000000028E1
.text:00000000000028E1 loc_28E1:                               ; CODE XREF: base64_decode_ctx+27A↓j
.text:00000000000028E1                 lea     rax, [r14+4]
.text:00000000000028E5                 lea     rbp, [rsp+68h+var_48]
.text:00000000000028EA                 lea     rbx, [rsp+68h+var_50]
.text:00000000000028EF                 mov     [rsp+68h+var_60], rax
.text:00000000000028F4
.text:00000000000028F4 loc_28F4:                               ; CODE XREF: base64_decode_ctx+250↓j
.text:00000000000028F4                 cmp     [rsp+68h+var_62], 0
.text:00000000000028F9                 mov     rdx, r15
.text:00000000000028FC                 jnz     loc_29D5
.text:0000000000002902
.text:0000000000002902 loc_2902:                               ; CODE XREF: base64_decode_ctx+16F↓j
.text:0000000000002902                 test    r13, r13
.text:0000000000002905                 setz    al
.text:0000000000002908                 and     al, [rsp+68h+var_63]
.text:000000000000290C                 jnz     loc_2998
.text:0000000000002912
.text:0000000000002912 loc_2912:                               ; CODE XREF: base64_decode_ctx+110↓j
.text:0000000000002912                 test    r13, r13
.text:0000000000002915                 jz      loc_29F8
.text:000000000000291B                 cmp     byte ptr [r12], 0Ah
.text:0000000000002920                 jz      loc_2AC0
.text:0000000000002926                 sub     rdx, r15
.text:0000000000002929                 add     [rsp+68h+var_50], rdx
.text:000000000000292E                 test    r14, r14
.text:0000000000002931                 mov     [rsp+68h+var_48], r15
.text:0000000000002936                 lea     r15, [r12+r13]
.text:000000000000293A                 jnz     loc_2A11
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: base64_decode_ctx+269↓j
.text:0000000000002940                 mov     rdi, r12
.text:0000000000002943
.text:0000000000002943 loc_2943:                               ; CODE XREF: base64_decode_ctx+1D9↓j
.text:0000000000002943                                         ; base64_decode_ctx+230↓j
.text:0000000000002943                 cmp     r13, 3
.text:0000000000002947                 ja      short loc_295B
.text:0000000000002949                 cmp     [rsp+68h+var_61], 0
.text:000000000000294E                 jz      short loc_295B
.text:0000000000002950                 cmp     [rsp+68h+var_63], 0
.text:0000000000002955                 jnz     loc_2A5F
.text:000000000000295B
.text:000000000000295B loc_295B:                               ; CODE XREF: base64_decode_ctx+C7↑j
.text:000000000000295B                                         ; base64_decode_ctx+CE↑j ...
.text:000000000000295B                 mov     rcx, rbp
.text:000000000000295E                 mov     rdx, rbx
.text:0000000000002961                 mov     rsi, r13
.text:0000000000002964                 call    decode_4
.text:0000000000002969                 test    al, al
.text:000000000000296B                 jz      loc_2B1E
.text:0000000000002971                 sub     r15, r12
.text:0000000000002974                 cmp     [rsp+68h+var_62], 0
.text:0000000000002979                 mov     r13, r15
.text:000000000000297C                 mov     r15, [rsp+68h+var_48]
.text:0000000000002981                 mov     rdx, r15
.text:0000000000002984                 jnz     short loc_29D5
.text:0000000000002986                 test    r13, r13
.text:0000000000002989                 setz    al
.text:000000000000298C                 and     al, [rsp+68h+var_63]
.text:0000000000002990                 jz      short loc_2912
.text:0000000000002992                 nop     word ptr [rax+rax+00h]
.text:0000000000002998
.text:0000000000002998 loc_2998:                               ; CODE XREF: base64_decode_ctx+8C↑j
.text:0000000000002998                                         ; base64_decode_ctx+1E9↓j ...
.text:0000000000002998                 mov     rbx, [rsp+68h+var_58]
.text:000000000000299D                 sub     [rbx], rdx
.text:00000000000029A0                 mov     rbx, [rsp+68h+var_40]
.text:00000000000029A5                 xor     rbx, fs:28h
.text:00000000000029AE                 jnz     loc_2B28
.text:00000000000029B4                 add     rsp, 38h
.text:00000000000029B8                 pop     rbx
.text:00000000000029B9                 pop     rbp
.text:00000000000029BA                 pop     r12
.text:00000000000029BC                 pop     r13
.text:00000000000029BE                 pop     r14
.text:00000000000029C0                 pop     r15
.text:00000000000029C2                 retn
.text:00000000000029C2 ; ---------------------------------------------------------------------------
.text:00000000000029C3                 align 8
.text:00000000000029C8
.text:00000000000029C8 loc_29C8:                               ; CODE XREF: base64_decode_ctx+168↓j
.text:00000000000029C8                 mov     r15, [rsp+68h+var_48]
.text:00000000000029CD                 add     r12, 4
.text:00000000000029D1                 sub     r13, 4
.text:00000000000029D5
.text:00000000000029D5 loc_29D5:                               ; CODE XREF: base64_decode_ctx+7C↑j
.text:00000000000029D5                                         ; base64_decode_ctx+104↑j
.text:00000000000029D5                 mov     rcx, rbp
.text:00000000000029D8                 mov     rdx, rbx
.text:00000000000029DB                 mov     rsi, r13
.text:00000000000029DE                 mov     rdi, r12
.text:00000000000029E1                 call    decode_4
.text:00000000000029E6                 test    al, al
.text:00000000000029E8                 jnz     short loc_29C8
.text:00000000000029EA                 mov     rdx, [rsp+68h+var_48]
.text:00000000000029EF                 jmp     loc_2902
.text:00000000000029EF ; ---------------------------------------------------------------------------
.text:00000000000029F4                 align 8
.text:00000000000029F8
.text:00000000000029F8 loc_29F8:                               ; CODE XREF: base64_decode_ctx+95↑j
.text:00000000000029F8                 sub     rdx, r15
.text:00000000000029FB                 add     [rsp+68h+var_50], rdx
.text:0000000000002A00                 test    r14, r14
.text:0000000000002A03                 mov     [rsp+68h+var_48], r15
.text:0000000000002A08                 jz      loc_2AFF
.text:0000000000002A0E                 mov     r15, r12
.text:0000000000002A11
.text:0000000000002A11 loc_2A11:                               ; CODE XREF: base64_decode_ctx+BA↑j
.text:0000000000002A11                 mov     eax, [r14]
.text:0000000000002A14                 cmp     eax, 4
.text:0000000000002A17                 jz      short loc_2A70
.text:0000000000002A19                 test    eax, eax
.text:0000000000002A1B                 jz      short loc_2A77
.text:0000000000002A1D
.text:0000000000002A1D loc_2A1D:                               ; CODE XREF: base64_decode_ctx+217↓j
.text:0000000000002A1D                 cmp     r12, r15
.text:0000000000002A20                 jnb     short loc_2A4E
.text:0000000000002A22                 nop     word ptr [rax+rax+00h]
.text:0000000000002A28
.text:0000000000002A28 loc_2A28:                               ; CODE XREF: base64_decode_ctx+1CC↓j
.text:0000000000002A28                 add     r12, 1
.text:0000000000002A2C                 movzx   edx, byte ptr [r12-1]
.text:0000000000002A32                 cmp     dl, 0Ah
.text:0000000000002A35                 jz      short loc_2A49
.text:0000000000002A37                 lea     ecx, [rax+1]
.text:0000000000002A3A                 cmp     ecx, 4
.text:0000000000002A3D                 mov     [r14], ecx
.text:0000000000002A40                 mov     [r14+rax+4], dl
.text:0000000000002A45                 jz      short loc_2AA0
.text:0000000000002A47                 mov     eax, ecx
.text:0000000000002A49
.text:0000000000002A49 loc_2A49:                               ; CODE XREF: base64_decode_ctx+1B5↑j
.text:0000000000002A49                 cmp     r12, r15
.text:0000000000002A4C                 jnz     short loc_2A28
.text:0000000000002A4E
.text:0000000000002A4E loc_2A4E:                               ; CODE XREF: base64_decode_ctx+1A0↑j
.text:0000000000002A4E                 mov     r13d, eax
.text:0000000000002A51                 mov     rdi, [rsp+68h+var_60]
.text:0000000000002A56                 test    r13, r13
.text:0000000000002A59                 jnz     loc_2943
.text:0000000000002A5F
.text:0000000000002A5F loc_2A5F:                               ; CODE XREF: base64_decode_ctx+D5↑j
.text:0000000000002A5F                                         ; base64_decode_ctx+236↓j
.text:0000000000002A5F                 mov     rdx, [rsp+68h+var_48]
.text:0000000000002A64                 mov     eax, 1
.text:0000000000002A69                 jmp     loc_2998
.text:0000000000002A69 ; ---------------------------------------------------------------------------
.text:0000000000002A6E                 align 10h
.text:0000000000002A70
.text:0000000000002A70 loc_2A70:                               ; CODE XREF: base64_decode_ctx+197↑j
.text:0000000000002A70                 mov     dword ptr [r14], 0
.text:0000000000002A77
.text:0000000000002A77 loc_2A77:                               ; CODE XREF: base64_decode_ctx+19B↑j
.text:0000000000002A77                 cmp     r13, 3
.text:0000000000002A7B                 jle     short loc_2A94
.text:0000000000002A7D                 mov     edx, 4          ; n
.text:0000000000002A82                 mov     esi, 0Ah        ; c
.text:0000000000002A87                 mov     rdi, r12        ; s
.text:0000000000002A8A                 call    _memchr         ; PIC mode
.text:0000000000002A8F                 test    rax, rax
.text:0000000000002A92                 jz      short loc_2B0C
.text:0000000000002A94
.text:0000000000002A94 loc_2A94:                               ; CODE XREF: base64_decode_ctx+1FB↑j
.text:0000000000002A94                 mov     eax, [r14]
.text:0000000000002A97                 jmp     loc_2A1D
.text:0000000000002A97 ; ---------------------------------------------------------------------------
.text:0000000000002A9C                 align 20h
.text:0000000000002AA0
.text:0000000000002AA0 loc_2AA0:                               ; CODE XREF: base64_decode_ctx+1C5↑j
.text:0000000000002AA0                 mov     eax, 4
.text:0000000000002AA5                 mov     rdi, [rsp+68h+var_60]
.text:0000000000002AAA                 mov     r13d, eax
.text:0000000000002AAD                 test    r13, r13
.text:0000000000002AB0                 jnz     loc_2943
.text:0000000000002AB6                 jmp     short loc_2A5F
.text:0000000000002AB6 ; ---------------------------------------------------------------------------
.text:0000000000002AB8                 align 20h
.text:0000000000002AC0
.text:0000000000002AC0 loc_2AC0:                               ; CODE XREF: base64_decode_ctx+A0↑j
.text:0000000000002AC0                 test    r14, r14
.text:0000000000002AC3                 jz      short loc_2AD8
.text:0000000000002AC5                 add     r12, 1
.text:0000000000002AC9                 sub     r13, 1
.text:0000000000002ACD                 mov     r15, rdx
.text:0000000000002AD0                 jmp     loc_28F4
.text:0000000000002AD0 ; ---------------------------------------------------------------------------
.text:0000000000002AD5                 align 8
.text:0000000000002AD8
.text:0000000000002AD8 loc_2AD8:                               ; CODE XREF: base64_decode_ctx+243↑j
.text:0000000000002AD8                 sub     rdx, r15
.text:0000000000002ADB                 mov     [rsp+68h+var_48], r15
.text:0000000000002AE0                 add     [rsp+68h+var_50], rdx
.text:0000000000002AE5                 lea     r15, [r12+r13]
.text:0000000000002AE9                 jmp     loc_2940
.text:0000000000002AE9 ; ---------------------------------------------------------------------------
.text:0000000000002AEE                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: base64_decode_ctx+41↑j
.text:0000000000002AF0                 mov     [rsp+68h+var_62], 1
.text:0000000000002AF5                 mov     [rsp+68h+var_63], 1
.text:0000000000002AFA                 jmp     loc_28E1
.text:0000000000002AFF ; ---------------------------------------------------------------------------
.text:0000000000002AFF
.text:0000000000002AFF loc_2AFF:                               ; CODE XREF: base64_decode_ctx+188↑j
.text:0000000000002AFF                 mov     rdx, r15
.text:0000000000002B02                 mov     eax, 1
.text:0000000000002B07                 jmp     loc_2998
.text:0000000000002B0C ; ---------------------------------------------------------------------------
.text:0000000000002B0C
.text:0000000000002B0C loc_2B0C:                               ; CODE XREF: base64_decode_ctx+212↑j
.text:0000000000002B0C                 mov     rdi, r12
.text:0000000000002B0F                 mov     r13d, 4
.text:0000000000002B15                 add     r12, 4
.text:0000000000002B19                 jmp     loc_295B
.text:0000000000002B1E ; ---------------------------------------------------------------------------
.text:0000000000002B1E
.text:0000000000002B1E loc_2B1E:                               ; CODE XREF: base64_decode_ctx+EB↑j
.text:0000000000002B1E                 mov     rdx, [rsp+68h+var_48]
.text:0000000000002B23                 jmp     loc_2998
.text:0000000000002B28 ; ---------------------------------------------------------------------------
.text:0000000000002B28
.text:0000000000002B28 loc_2B28:                               ; CODE XREF: base64_decode_ctx+12E↑j
.text:0000000000002B28                 call    ___stack_chk_fail ; PIC mode
.text:0000000000002B28 ; } // starts at 2880
.text:0000000000002B28 base64_decode_ctx endp
.text:0000000000002B28
.text:0000000000002B28 ; ---------------------------------------------------------------------------
.text:0000000000002B2D                 align 10h
.text:0000000000002B30
.text:0000000000002B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B30
.text:0000000000002B30
.text:0000000000002B30                 public base64_decode_alloc_ctx
.text:0000000000002B30 base64_decode_alloc_ctx proc near
.text:0000000000002B30
.text:0000000000002B30 var_39          = byte ptr -39h
.text:0000000000002B30 var_38          = qword ptr -38h
.text:0000000000002B30 var_30          = qword ptr -30h
.text:0000000000002B30
.text:0000000000002B30 ; __unwind {
.text:0000000000002B30                 push    r14
.text:0000000000002B32                 push    r13
.text:0000000000002B34                 mov     r14, rdx
.text:0000000000002B37                 push    r12
.text:0000000000002B39                 push    rbp
.text:0000000000002B3A                 mov     r12, rdi
.text:0000000000002B3D                 push    rbx
.text:0000000000002B3E                 mov     r13, rsi
.text:0000000000002B41                 mov     rbx, rcx
.text:0000000000002B44                 mov     rbp, r8
.text:0000000000002B47                 sub     rsp, 20h
.text:0000000000002B4B                 mov     rax, fs:28h
.text:0000000000002B54                 mov     [rsp+48h+var_30], rax
.text:0000000000002B59                 xor     eax, eax
.text:0000000000002B5B                 mov     rax, rdx
.text:0000000000002B5E                 shr     rax, 2
.text:0000000000002B62                 lea     rdi, [rax+rax*2+3] ; size
.text:0000000000002B67                 mov     [rsp+48h+var_38], rdi
.text:0000000000002B6C                 call    _malloc
.text:0000000000002B71                 test    rax, rax
.text:0000000000002B74                 mov     [rbx], rax
.text:0000000000002B77                 jz      short loc_2BA8
.text:0000000000002B79                 lea     r8, [rsp+48h+var_38]
.text:0000000000002B7E                 mov     rcx, rax
.text:0000000000002B81                 mov     rdx, r14
.text:0000000000002B84                 mov     rsi, r13
.text:0000000000002B87                 mov     rdi, r12
.text:0000000000002B8A                 call    base64_decode_ctx
.text:0000000000002B8F                 test    al, al
.text:0000000000002B91                 jz      short loc_2BD0
.text:0000000000002B93                 test    rbp, rbp
.text:0000000000002B96                 jz      short loc_2BA8
.text:0000000000002B98                 mov     rdx, [rsp+48h+var_38]
.text:0000000000002B9D                 mov     [rbp+0], rdx
.text:0000000000002BA1                 jmp     short loc_2BAD
.text:0000000000002BA1 ; ---------------------------------------------------------------------------
.text:0000000000002BA3                 align 8
.text:0000000000002BA8
.text:0000000000002BA8 loc_2BA8:                               ; CODE XREF: base64_decode_alloc_ctx+47↑j
.text:0000000000002BA8                                         ; base64_decode_alloc_ctx+66↑j
.text:0000000000002BA8                 mov     eax, 1
.text:0000000000002BAD
.text:0000000000002BAD loc_2BAD:                               ; CODE XREF: base64_decode_alloc_ctx+71↑j
.text:0000000000002BAD                                         ; base64_decode_alloc_ctx+B8↓j
.text:0000000000002BAD                 mov     rcx, [rsp+48h+var_30]
.text:0000000000002BB2                 xor     rcx, fs:28h
.text:0000000000002BBB                 jnz     short loc_2BEA
.text:0000000000002BBD                 add     rsp, 20h
.text:0000000000002BC1                 pop     rbx
.text:0000000000002BC2                 pop     rbp
.text:0000000000002BC3                 pop     r12
.text:0000000000002BC5                 pop     r13
.text:0000000000002BC7                 pop     r14
.text:0000000000002BC9                 retn
.text:0000000000002BC9 ; ---------------------------------------------------------------------------
.text:0000000000002BCA                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: base64_decode_alloc_ctx+61↑j
.text:0000000000002BD0                 mov     rdi, [rbx]      ; ptr
.text:0000000000002BD3                 mov     [rsp+48h+var_39], al
.text:0000000000002BD7                 call    _free
.text:0000000000002BDC                 mov     qword ptr [rbx], 0
.text:0000000000002BE3                 movzx   eax, [rsp+48h+var_39]
.text:0000000000002BE8                 jmp     short loc_2BAD
.text:0000000000002BEA ; ---------------------------------------------------------------------------
.text:0000000000002BEA
.text:0000000000002BEA loc_2BEA:                               ; CODE XREF: base64_decode_alloc_ctx+8B↑j
.text:0000000000002BEA                 call    ___stack_chk_fail
.text:0000000000002BEA ; } // starts at 2B30
.text:0000000000002BEA base64_decode_alloc_ctx endp
.text:0000000000002BEA
.text:0000000000002BEA ; ---------------------------------------------------------------------------
.text:0000000000002BEF                 align 10h
.text:0000000000002BF0
.text:0000000000002BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BF0
.text:0000000000002BF0
.text:0000000000002BF0                 public close_stdout_set_file_name
.text:0000000000002BF0 close_stdout_set_file_name proc near
.text:0000000000002BF0 ; __unwind {
.text:0000000000002BF0                 mov     cs:file_name, rdi
.text:0000000000002BF7                 retn
.text:0000000000002BF7 ; } // starts at 2BF0
.text:0000000000002BF7 close_stdout_set_file_name endp
.text:0000000000002BF7
.text:0000000000002BF7 ; ---------------------------------------------------------------------------
.text:0000000000002BF8                 align 20h
.text:0000000000002C00
.text:0000000000002C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C00
.text:0000000000002C00
.text:0000000000002C00                 public close_stdout_set_ignore_EPIPE
.text:0000000000002C00 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002C00 ; __unwind {
.text:0000000000002C00                 mov     cs:ignore_EPIPE, dil
.text:0000000000002C07                 retn
.text:0000000000002C07 ; } // starts at 2C00
.text:0000000000002C07 close_stdout_set_ignore_EPIPE endp
.text:0000000000002C07
.text:0000000000002C07 ; ---------------------------------------------------------------------------
.text:0000000000002C08                 align 10h
.text:0000000000002C10
.text:0000000000002C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C10
.text:0000000000002C10 ; Attributes: info_from_lumina
.text:0000000000002C10
.text:0000000000002C10 ; void __cdecl close_stdout()
.text:0000000000002C10                 public close_stdout
.text:0000000000002C10 close_stdout    proc near               ; DATA XREF: main+63↑o
.text:0000000000002C10 ; __unwind {
.text:0000000000002C10                 push    rbp
.text:0000000000002C11                 push    rbx
.text:0000000000002C12                 sub     rsp, 8
.text:0000000000002C16                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002C1D                 call    close_stream
.text:0000000000002C22                 test    eax, eax
.text:0000000000002C24                 jz      short loc_2C3C
.text:0000000000002C26                 call    ___errno_location
.text:0000000000002C2B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002C32                 mov     rbx, rax
.text:0000000000002C35                 jz      short loc_2C53
.text:0000000000002C37                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000002C3A                 jnz     short loc_2C53
.text:0000000000002C3C
.text:0000000000002C3C loc_2C3C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000002C3C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002C43                 call    close_stream
.text:0000000000002C48                 test    eax, eax
.text:0000000000002C4A                 jnz     short loc_2C92
.text:0000000000002C4C                 add     rsp, 8
.text:0000000000002C50                 pop     rbx
.text:0000000000002C51                 pop     rbp
.text:0000000000002C52                 retn
.text:0000000000002C53 ; ---------------------------------------------------------------------------
.text:0000000000002C53
.text:0000000000002C53 loc_2C53:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002C53                                         ; close_stdout+2A↑j
.text:0000000000002C53                 lea     rsi, aWriteError ; "write error"
.text:0000000000002C5A                 xor     edi, edi        ; domainname
.text:0000000000002C5C                 mov     edx, 5          ; category
.text:0000000000002C61                 call    _dcgettext
.text:0000000000002C66                 mov     rdi, cs:file_name
.text:0000000000002C6D                 mov     rbp, rax
.text:0000000000002C70                 test    rdi, rdi
.text:0000000000002C73                 jz      short loc_2C9D
.text:0000000000002C75                 call    quotearg_colon
.text:0000000000002C7A                 mov     esi, [rbx]      ; errnum
.text:0000000000002C7C                 lea     rdx, aS         ; "%s: "
.text:0000000000002C83                 mov     rcx, rax
.text:0000000000002C86                 mov     r8, rbp
.text:0000000000002C89                 xor     edi, edi        ; status
.text:0000000000002C8B                 xor     eax, eax
.text:0000000000002C8D                 call    _error
.text:0000000000002C92
.text:0000000000002C92 loc_2C92:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002C92                                         ; close_stdout+A2↓j
.text:0000000000002C92                 mov     edi, cs:exit_failure ; status
.text:0000000000002C98                 call    __exit
.text:0000000000002C9D ; ---------------------------------------------------------------------------
.text:0000000000002C9D
.text:0000000000002C9D loc_2C9D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000002C9D                 mov     esi, [rbx]      ; errnum
.text:0000000000002C9F                 lea     rdx, format     ; format
.text:0000000000002CA6                 mov     rcx, rax
.text:0000000000002CA9                 xor     edi, edi        ; status
.text:0000000000002CAB                 xor     eax, eax
.text:0000000000002CAD                 call    _error
.text:0000000000002CB2                 jmp     short loc_2C92
.text:0000000000002CB2 ; } // starts at 2C10
.text:0000000000002CB2 close_stdout    endp
.text:0000000000002CB2
.text:0000000000002CB2 ; ---------------------------------------------------------------------------
.text:0000000000002CB4                 align 20h
.text:0000000000002CC0
.text:0000000000002CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CC0
.text:0000000000002CC0
.text:0000000000002CC0 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002CC0                 public fdadvise
.text:0000000000002CC0 fdadvise        proc near
.text:0000000000002CC0 ; __unwind {
.text:0000000000002CC0                 jmp     _posix_fadvise
.text:0000000000002CC0 ; } // starts at 2CC0
.text:0000000000002CC0 fdadvise        endp
.text:0000000000002CC0
.text:0000000000002CC0 ; ---------------------------------------------------------------------------
.text:0000000000002CC5                 align 10h
.text:0000000000002CD0
.text:0000000000002CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CD0
.text:0000000000002CD0
.text:0000000000002CD0                 public fadvise
.text:0000000000002CD0 fadvise         proc near               ; CODE XREF: main+1EA↑p
.text:0000000000002CD0 ; __unwind {
.text:0000000000002CD0                 test    rdi, rdi
.text:0000000000002CD3                 jz      short locret_2CF0
.text:0000000000002CD5                 push    rbx
.text:0000000000002CD6                 mov     ebx, esi
.text:0000000000002CD8                 call    _fileno
.text:0000000000002CDD                 mov     ecx, ebx        ; advise
.text:0000000000002CDF                 xor     edx, edx        ; len
.text:0000000000002CE1                 xor     esi, esi        ; offset
.text:0000000000002CE3                 pop     rbx
.text:0000000000002CE4                 mov     edi, eax        ; fd
.text:0000000000002CE6                 jmp     _posix_fadvise
.text:0000000000002CE6 ; ---------------------------------------------------------------------------
.text:0000000000002CEB                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 locret_2CF0:                            ; CODE XREF: fadvise+3↑j
.text:0000000000002CF0                 rep retn
.text:0000000000002CF0 ; } // starts at 2CD0
.text:0000000000002CF0 fadvise         endp
.text:0000000000002CF0
.text:0000000000002CF0 ; ---------------------------------------------------------------------------
.text:0000000000002CF2                 align 20h
.text:0000000000002D00
.text:0000000000002D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D00
.text:0000000000002D00
.text:0000000000002D00                 public set_program_name
.text:0000000000002D00 set_program_name proc near              ; CODE XREF: main+2E↑p
.text:0000000000002D00 ; __unwind {
.text:0000000000002D00                 test    rdi, rdi
.text:0000000000002D03                 push    rbx
.text:0000000000002D04                 jz      short loc_2D7D
.text:0000000000002D06                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002D0B                 mov     rbx, rdi
.text:0000000000002D0E                 call    _strrchr
.text:0000000000002D13                 test    rax, rax
.text:0000000000002D16                 jz      short loc_2D6D
.text:0000000000002D18                 lea     r8, [rax+1]
.text:0000000000002D1C                 mov     rdx, r8
.text:0000000000002D1F                 sub     rdx, rbx
.text:0000000000002D22                 cmp     rdx, 6
.text:0000000000002D26                 jle     short loc_2D6D
.text:0000000000002D28                 lea     rsi, [rax-6]
.text:0000000000002D2C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002D33                 mov     ecx, 7
.text:0000000000002D38                 repe cmpsb
.text:0000000000002D3A                 setnbe  dl
.text:0000000000002D3D                 sbb     dl, 0
.text:0000000000002D40                 test    dl, dl
.text:0000000000002D42                 jnz     short loc_2D6D
.text:0000000000002D44                 lea     rdi, aLt        ; "lt-"
.text:0000000000002D4B                 mov     ecx, 3
.text:0000000000002D50                 mov     rsi, r8
.text:0000000000002D53                 mov     rbx, r8
.text:0000000000002D56                 repe cmpsb
.text:0000000000002D58                 setnbe  dl
.text:0000000000002D5B                 sbb     dl, 0
.text:0000000000002D5E                 test    dl, dl
.text:0000000000002D60                 jnz     short loc_2D6D
.text:0000000000002D62                 lea     rbx, [rax+4]
.text:0000000000002D66                 mov     cs:__bss_start, rbx
.text:0000000000002D6D
.text:0000000000002D6D loc_2D6D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002D6D                                         ; set_program_name+26↑j ...
.text:0000000000002D6D                 mov     cs:program_name, rbx
.text:0000000000002D74                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002D7B                 pop     rbx
.text:0000000000002D7C                 retn
.text:0000000000002D7D ; ---------------------------------------------------------------------------
.text:0000000000002D7D
.text:0000000000002D7D loc_2D7D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002D7D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002D84                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002D8B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002D90                 mov     esi, 1          ; size
.text:0000000000002D95                 call    _fwrite
.text:0000000000002D9A                 call    _abort
.text:0000000000002D9A ; } // starts at 2D00
.text:0000000000002D9A set_program_name endp
.text:0000000000002D9A
.text:0000000000002D9A ; ---------------------------------------------------------------------------
.text:0000000000002D9F                 align 20h
.text:0000000000002DA0
.text:0000000000002DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DA0
.text:0000000000002DA0 ; Attributes: info_from_lumina
.text:0000000000002DA0
.text:0000000000002DA0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002DA0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002DA0                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002DA0 ; __unwind {
.text:0000000000002DA0                 push    rbp
.text:0000000000002DA1                 push    rbx
.text:0000000000002DA2                 mov     rbp, rdi
.text:0000000000002DA5                 mov     ebx, esi
.text:0000000000002DA7                 sub     rsp, 8
.text:0000000000002DAB                 call    locale_charset
.text:0000000000002DB0                 movzx   edx, byte ptr [rax]
.text:0000000000002DB3                 and     edx, 0FFFFFFDFh
.text:0000000000002DB6                 cmp     dl, 55h ; 'U'
.text:0000000000002DB9                 jz      short loc_2E30
.text:0000000000002DBB                 cmp     dl, 47h ; 'G'
.text:0000000000002DBE                 jz      short loc_2DE0
.text:0000000000002DC0
.text:0000000000002DC0 loc_2DC0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002DC0                                         ; gettext_quote+50↓j ...
.text:0000000000002DC0                 lea     rax, unk_62DB
.text:0000000000002DC7                 lea     rdx, asc_62DD   ; "'"
.text:0000000000002DCE                 cmp     ebx, 9
.text:0000000000002DD1                 cmovnz  rax, rdx
.text:0000000000002DD5                 add     rsp, 8
.text:0000000000002DD9                 pop     rbx
.text:0000000000002DDA                 pop     rbp
.text:0000000000002DDB                 retn
.text:0000000000002DDB ; ---------------------------------------------------------------------------
.text:0000000000002DDC                 align 20h
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002DE0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002DE4                 and     edx, 0FFFFFFDFh
.text:0000000000002DE7                 cmp     dl, 42h ; 'B'
.text:0000000000002DEA                 jnz     short loc_2DC0
.text:0000000000002DEC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002DF0                 jnz     short loc_2DC0
.text:0000000000002DF2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002DF6                 jnz     short loc_2DC0
.text:0000000000002DF8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002DFC                 jnz     short loc_2DC0
.text:0000000000002DFE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002E02                 jnz     short loc_2DC0
.text:0000000000002E04                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002E08                 jnz     short loc_2DC0
.text:0000000000002E0A                 cmp     byte ptr [rax+7], 0
.text:0000000000002E0E                 jnz     short loc_2DC0
.text:0000000000002E10                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002E14                 lea     rax, unk_62D4
.text:0000000000002E1B                 lea     rdx, unk_62D8
.text:0000000000002E22                 cmovnz  rax, rdx
.text:0000000000002E26                 add     rsp, 8
.text:0000000000002E2A                 pop     rbx
.text:0000000000002E2B                 pop     rbp
.text:0000000000002E2C                 retn
.text:0000000000002E2C ; ---------------------------------------------------------------------------
.text:0000000000002E2D                 align 10h
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002E30                 movzx   edx, byte ptr [rax+1]
.text:0000000000002E34                 and     edx, 0FFFFFFDFh
.text:0000000000002E37                 cmp     dl, 54h ; 'T'
.text:0000000000002E3A                 jnz     short loc_2DC0
.text:0000000000002E3C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002E40                 and     edx, 0FFFFFFDFh
.text:0000000000002E43                 cmp     dl, 46h ; 'F'
.text:0000000000002E46                 jnz     loc_2DC0
.text:0000000000002E4C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002E50                 jnz     loc_2DC0
.text:0000000000002E56                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002E5A                 jnz     loc_2DC0
.text:0000000000002E60                 cmp     byte ptr [rax+5], 0
.text:0000000000002E64                 jnz     loc_2DC0
.text:0000000000002E6A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002E6E                 lea     rax, unk_62CC
.text:0000000000002E75                 lea     rdx, unk_62D0
.text:0000000000002E7C                 cmovnz  rax, rdx
.text:0000000000002E80                 add     rsp, 8
.text:0000000000002E84                 pop     rbx
.text:0000000000002E85                 pop     rbp
.text:0000000000002E86                 retn
.text:0000000000002E86 ; } // starts at 2DA0
.text:0000000000002E86 gettext_quote   endp
.text:0000000000002E86
.text:0000000000002E86 ; ---------------------------------------------------------------------------
.text:0000000000002E87                 align 10h
.text:0000000000002E90
.text:0000000000002E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E90
.text:0000000000002E90 ; Attributes: info_from_lumina
.text:0000000000002E90
.text:0000000000002E90 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002E90 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002E90                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002E90
.text:0000000000002E90 var_E0          = dword ptr -0E0h
.text:0000000000002E90 var_DB          = byte ptr -0DBh
.text:0000000000002E90 var_DA          = byte ptr -0DAh
.text:0000000000002E90 var_D9          = byte ptr -0D9h
.text:0000000000002E90 s               = qword ptr -0D8h
.text:0000000000002E90 n               = qword ptr -0D0h
.text:0000000000002E90 var_C8          = qword ptr -0C8h
.text:0000000000002E90 ps              = qword ptr -0C0h
.text:0000000000002E90 var_B8          = qword ptr -0B8h
.text:0000000000002E90 var_B0          = qword ptr -0B0h
.text:0000000000002E90 var_A8          = qword ptr -0A8h
.text:0000000000002E90 s2              = qword ptr -0A0h
.text:0000000000002E90 var_98          = qword ptr -98h
.text:0000000000002E90 var_90          = qword ptr -90h
.text:0000000000002E90 var_88          = qword ptr -88h
.text:0000000000002E90 var_80          = qword ptr -80h
.text:0000000000002E90 var_78          = qword ptr -78h
.text:0000000000002E90 var_70          = dword ptr -70h
.text:0000000000002E90 var_6C          = byte ptr -6Ch
.text:0000000000002E90 var_6B          = byte ptr -6Bh
.text:0000000000002E90 var_6A          = byte ptr -6Ah
.text:0000000000002E90 var_69          = byte ptr -69h
.text:0000000000002E90 var_68          = qword ptr -68h
.text:0000000000002E90 var_60          = qword ptr -60h
.text:0000000000002E90 wc              = dword ptr -4Ch
.text:0000000000002E90 var_48          = qword ptr -48h
.text:0000000000002E90 var_40          = qword ptr -40h
.text:0000000000002E90 arg_0           = qword ptr  8
.text:0000000000002E90 arg_8           = qword ptr  10h
.text:0000000000002E90 arg_10          = qword ptr  18h
.text:0000000000002E90
.text:0000000000002E90 ; __unwind {
.text:0000000000002E90                 push    r15
.text:0000000000002E92                 push    r14
.text:0000000000002E94                 mov     r15d, r8d
.text:0000000000002E97                 push    r13
.text:0000000000002E99                 push    r12
.text:0000000000002E9B                 mov     r14, rdi
.text:0000000000002E9E                 push    rbp
.text:0000000000002E9F                 push    rbx
.text:0000000000002EA0                 mov     ebx, r9d
.text:0000000000002EA3                 mov     r13, rsi
.text:0000000000002EA6                 mov     rbp, rcx
.text:0000000000002EA9                 and     ebx, 2
.text:0000000000002EAC                 sub     rsp, 0B8h
.text:0000000000002EB3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002EBB                 mov     [rsp+0E8h+s], rdx
.text:0000000000002EC0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002EC5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002ECA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002ECF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002ED7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002EDC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002EE4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002EE9                 mov     rax, fs:28h
.text:0000000000002EF2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002EFA                 xor     eax, eax
.text:0000000000002EFC                 call    ___ctype_get_mb_cur_max
.text:0000000000002F01                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002F05                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002F0A                 ja      def_2F21        ; jumptable 00000000000121F1 default case
.text:0000000000002F10                 lea     rcx, jpt_2F21
.text:0000000000002F17                 mov     edx, r15d
.text:0000000000002F1A                 movsxd  rax, ds:(jpt_2F21 - 6340h)[rcx+rdx*4]
.text:0000000000002F1E                 add     rax, rcx
.text:0000000000002F21                 jmp     rax             ; switch jump
.text:0000000000002F23 ; ---------------------------------------------------------------------------
.text:0000000000002F23
.text:0000000000002F23 loc_2F23:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F23                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002F23                                         ; DATA XREF: ...
.text:0000000000002F23                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002F28                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F2D                 xor     r12d, r12d
.text:0000000000002F30                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F39                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002F3E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002F43
.text:0000000000002F43 loc_2F43:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002F43                 lea     rax, asc_62DD   ; "'"
.text:0000000000002F4A                 mov     [rsp+0E8h+n], 1
.text:0000000000002F53                 xor     r15d, r15d
.text:0000000000002F56                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002F5E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002F63
.text:0000000000002F63 loc_2F63:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002F63                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002F63                 xor     r11d, r11d
.text:0000000000002F66                 mov     rax, rbp
.text:0000000000002F69                 mov     r8d, r12d
.text:0000000000002F6C                 mov     rbp, r11
.text:0000000000002F6F                 mov     r11, rax
.text:0000000000002F72                 nop     word ptr [rax+rax+00h]
.text:0000000000002F78
.text:0000000000002F78 loc_2F78:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002F78                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002F78                 cmp     r11, rbp
.text:0000000000002F7B                 setnz   r12b
.text:0000000000002F7F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002F83                 jnz     short loc_2F92
.text:0000000000002F85                 mov     rax, [rsp+0E8h+s]
.text:0000000000002F8A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002F8E                 setnz   r12b
.text:0000000000002F92
.text:0000000000002F92 loc_2F92:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002F92                 test    r12b, r12b
.text:0000000000002F95                 jz      loc_35F0
.text:0000000000002F9B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FA0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002FA5                 lea     r9, [rdi+rbp]
.text:0000000000002FA9                 setnz   al
.text:0000000000002FAC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002FB0                 mov     r10d, eax
.text:0000000000002FB3                 jz      loc_3060
.text:0000000000002FB9                 mov     rax, [rsp+0E8h+n]
.text:0000000000002FBE                 test    rax, rax
.text:0000000000002FC1                 jz      loc_33F0
.text:0000000000002FC7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002FCB                 lea     rbx, [rbp+rax+0]
.text:0000000000002FD0                 jnz     short loc_3000
.text:0000000000002FD2                 cmp     rax, 1
.text:0000000000002FD6                 jbe     short loc_3000
.text:0000000000002FD8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002FDD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002FE2                 mov     [rsp+0E8h+ps], r9
.text:0000000000002FE7                 call    _strlen
.text:0000000000002FEC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002FF2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002FF8                 mov     r11, rax
.text:0000000000002FFB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003000
.text:0000000000003000 loc_3000:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003000                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003000                 cmp     rbx, r11
.text:0000000000003003                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003008                 ja      loc_35C0
.text:000000000000300E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003013                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003018                 mov     rdi, r9         ; s1
.text:000000000000301B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003020                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003025                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000302A                 call    _memcmp
.text:000000000000302F                 test    eax, eax
.text:0000000000003031                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003036                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000303C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003041                 jnz     loc_35C0
.text:0000000000003047                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000304C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003052                 jnz     loc_3FD5
.text:0000000000003058                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003060
.text:0000000000003060 loc_3060:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003060                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003060                 movzx   ebx, byte ptr [r9]
.text:0000000000003064                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003067                 ja      def_307E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000306D                 lea     rcx, jpt_307E
.text:0000000000003074                 movzx   edx, bl
.text:0000000000003077                 movsxd  rax, ds:(jpt_307E - 636Ch)[rcx+rdx*4]
.text:000000000000307B                 add     rax, rcx
.text:000000000000307E                 jmp     rax             ; switch jump
.text:0000000000003080 ; ---------------------------------------------------------------------------
.text:0000000000003080
.text:0000000000003080 loc_3080:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003080                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003080                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003083
.text:0000000000003083 loc_3083:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003083                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:0000000000003083                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003087                 setnz   al
.text:000000000000308A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000308E                 jnz     short loc_309C
.text:0000000000003090                 mov     rax, [rsp+0E8h+s]
.text:0000000000003095                 cmp     byte ptr [rax+1], 0
.text:0000000000003099                 setnz   al
.text:000000000000309C
.text:000000000000309C loc_309C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000309C                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000030A1                 setz    dl
.text:00000000000030A4                 test    al, al
.text:00000000000030A6                 jz      loc_32F8
.text:00000000000030AC
.text:00000000000030AC loc_30AC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000030AC                 xor     r12d, r12d
.text:00000000000030AF                 xor     eax, eax
.text:00000000000030B1                 nop     dword ptr [rax+00000000h]
.text:00000000000030B8
.text:00000000000030B8 loc_30B8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000030B8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000030B8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000030BD                 jnz     loc_31D2
.text:00000000000030C3                 test    dl, dl
.text:00000000000030C5                 jnz     loc_31D2
.text:00000000000030CB
.text:00000000000030CB loc_30CB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000030CB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000030D0                 test    rsi, rsi
.text:00000000000030D3                 jz      short loc_30E9
.text:00000000000030D5                 mov     edx, ebx
.text:00000000000030D7                 shr     dl, 5
.text:00000000000030DA                 movzx   edx, dl
.text:00000000000030DD                 mov     edx, [rsi+rdx*4]
.text:00000000000030E0                 bt      edx, ebx
.text:00000000000030E3                 jb      loc_3233
.text:00000000000030E9
.text:00000000000030E9 loc_30E9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000030E9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000030E9                 test    r10b, r10b
.text:00000000000030EC                 jnz     loc_3233
.text:00000000000030F2                 xor     eax, 1
.text:00000000000030F5                 add     rbp, 1
.text:00000000000030F9                 and     eax, r8d
.text:00000000000030FC
.text:00000000000030FC loc_30FC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000030FC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000030FC                 test    al, al
.text:00000000000030FE                 jz      short loc_3120
.text:0000000000003100                 cmp     r13, r15
.text:0000000000003103                 jbe     short loc_310A
.text:0000000000003105                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000310A
.text:000000000000310A loc_310A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000310A                 lea     rax, [r15+1]
.text:000000000000310E                 cmp     r13, rax
.text:0000000000003111                 jbe     short loc_3119
.text:0000000000003113                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003119
.text:0000000000003119 loc_3119:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003119                 add     r15, 2
.text:000000000000311D                 xor     r8d, r8d
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003120                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003120                 cmp     r15, r13
.text:0000000000003123                 jnb     short loc_3129
.text:0000000000003125                 mov     [r14+r15], bl
.text:0000000000003129
.text:0000000000003129 loc_3129:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003129                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000312E                 add     r15, 1
.text:0000000000003132                 mov     eax, 0
.text:0000000000003137                 test    r12b, r12b
.text:000000000000313A                 cmovz   edi, eax
.text:000000000000313D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003142                 jmp     loc_2F78
.text:0000000000003142 ; ---------------------------------------------------------------------------
.text:0000000000003147                 align 10h
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003150                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003150                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003153
.text:0000000000003153 loc_3153:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003153                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:0000000000003153                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003157                 cmp     eax, 2
.text:000000000000315A                 jz      loc_3718
.text:0000000000003160                 cmp     eax, 5
.text:0000000000003163                 jz      loc_36D8
.text:0000000000003169                 cmp     eax, 2
.text:000000000000316C                 mov     ebx, 3Fh ; '?'
.text:0000000000003171                 setz    dl
.text:0000000000003174                 xor     r12d, r12d
.text:0000000000003177                 xor     eax, eax
.text:0000000000003179                 jmp     loc_30B8
.text:0000000000003179 ; ---------------------------------------------------------------------------
.text:000000000000317E                 align 20h
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003180                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003180                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003183
.text:0000000000003183 loc_3183:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003183                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:0000000000003183                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003188                 jz      loc_3690
.text:000000000000318E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003193                 xor     edx, edx
.text:0000000000003195                 xor     eax, eax
.text:0000000000003197                 mov     ebx, 27h ; '''
.text:000000000000319C                 jmp     loc_30B8
.text:000000000000319C ; ---------------------------------------------------------------------------
.text:00000000000031A1                 align 8
.text:00000000000031A8
.text:00000000000031A8 loc_31A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000031A8                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:00000000000031A8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000031AD                 mov     ebx, 74h ; 't'
.text:00000000000031B2
.text:00000000000031B2 loc_31B2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000031B2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000031B2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031B7                 setz    al
.text:00000000000031BA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000031BE                 jnz     loc_330E
.text:00000000000031C4
.text:00000000000031C4 loc_31C4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000031C4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000031C4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000031C9                 jnz     short loc_3230
.text:00000000000031CB
.text:00000000000031CB loc_31CB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000031CB                 mov     ebx, edx
.text:00000000000031CD                 xor     r12d, r12d
.text:00000000000031D0                 xor     eax, eax
.text:00000000000031D2
.text:00000000000031D2 loc_31D2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000031D2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000031D2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000031D7                 jnz     loc_30CB
.text:00000000000031DD                 jmp     loc_30E9
.text:00000000000031DD ; ---------------------------------------------------------------------------
.text:00000000000031E2                 align 8
.text:00000000000031E8
.text:00000000000031E8 loc_31E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000031E8                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:00000000000031E8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000031ED                 mov     ebx, 62h ; 'b'
.text:00000000000031F2                 jmp     short loc_31C4
.text:00000000000031F2 ; ---------------------------------------------------------------------------
.text:00000000000031F4                 align 8
.text:00000000000031F8
.text:00000000000031F8 loc_31F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000031F8                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:00000000000031F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000031FD                 jz      loc_35D0
.text:0000000000003203                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003208                 jz      loc_3420
.text:000000000000320E
.text:000000000000320E loc_320E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000320E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003213                 jz      loc_3420
.text:0000000000003219                 cmp     [rsp+0E8h+n], 0
.text:000000000000321F                 jnz     loc_35DB
.text:0000000000003225                 mov     ebx, 5Ch ; '\'
.text:000000000000322A                 nop     word ptr [rax+rax+00h]
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003230                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003230                 xor     r12d, r12d
.text:0000000000003233
.text:0000000000003233 loc_3233:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003233                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003233                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003238                 setz    dl
.text:000000000000323B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003240                 mov     eax, edx
.text:0000000000003242                 jnz     loc_3A98
.text:0000000000003248                 mov     eax, r8d
.text:000000000000324B                 xor     eax, 1
.text:000000000000324E                 and     al, dl
.text:0000000000003250                 jz      short loc_3281
.text:0000000000003252                 cmp     r13, r15
.text:0000000000003255                 jbe     short loc_325C
.text:0000000000003257                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000325C
.text:000000000000325C loc_325C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000325C                 lea     rdx, [r15+1]
.text:0000000000003260                 cmp     r13, rdx
.text:0000000000003263                 jbe     short loc_326B
.text:0000000000003265                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000326B
.text:000000000000326B loc_326B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000326B                 lea     rdx, [r15+2]
.text:000000000000326F                 cmp     r13, rdx
.text:0000000000003272                 jbe     short loc_327A
.text:0000000000003274                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000327A
.text:000000000000327A loc_327A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000327A                 add     r15, 3
.text:000000000000327E                 mov     r8d, eax
.text:0000000000003281
.text:0000000000003281 loc_3281:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003281                 cmp     r13, r15
.text:0000000000003284                 jbe     short loc_328B
.text:0000000000003286                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000328B
.text:000000000000328B loc_328B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000328B                 add     r15, 1
.text:000000000000328F                 add     rbp, 1
.text:0000000000003293                 jmp     loc_3120
.text:0000000000003293 ; ---------------------------------------------------------------------------
.text:0000000000003298                 align 20h
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032A0                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:00000000000032A0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000032A5                 jnz     loc_3473
.text:00000000000032AB                 xor     edx, edx
.text:00000000000032AD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000032B2                 jz      loc_31CB
.text:00000000000032B8                 add     rbp, 1
.text:00000000000032BC                 jmp     loc_2F78
.text:00000000000032BC ; ---------------------------------------------------------------------------
.text:00000000000032C1                 align 8
.text:00000000000032C8
.text:00000000000032C8 loc_32C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032C8                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:00000000000032C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000032CD                 setz    dl
.text:00000000000032D0                 xor     eax, eax
.text:00000000000032D2                 jmp     loc_30B8
.text:00000000000032D2 ; ---------------------------------------------------------------------------
.text:00000000000032D7                 align 20h
.text:00000000000032E0
.text:00000000000032E0 loc_32E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032E0                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:00000000000032E0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000032E5                 mov     ebx, 61h ; 'a'
.text:00000000000032EA                 jmp     loc_31C4
.text:00000000000032EA ; ---------------------------------------------------------------------------
.text:00000000000032EF                 align 10h
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032F0                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:00000000000032F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000032F5                 setz    dl
.text:00000000000032F8
.text:00000000000032F8 loc_32F8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000032F8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000032F8                 test    rbp, rbp
.text:00000000000032FB                 jnz     loc_30AC
.text:0000000000003301
.text:0000000000003301 loc_3301:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003301                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003301                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003306                 and     al, dl
.text:0000000000003308                 jz      loc_30B8
.text:000000000000330E
.text:000000000000330E loc_330E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000330E                 mov     rbp, r11
.text:0000000000003311                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003319                 jmp     loc_3A19
.text:0000000000003319 ; ---------------------------------------------------------------------------
.text:000000000000331E                 align 20h
.text:0000000000003320
.text:0000000000003320 loc_3320:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003320                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:0000000000003320                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003325                 setz    dl
.text:0000000000003328                 xor     r12d, r12d
.text:000000000000332B                 jmp     short loc_3301
.text:000000000000332B ; ---------------------------------------------------------------------------
.text:000000000000332D                 align 10h
.text:0000000000003330
.text:0000000000003330 loc_3330:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003330                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:0000000000003330                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003335                 mov     ebx, 20h ; ' '
.text:000000000000333A                 setz    dl
.text:000000000000333D                 jmp     short loc_3301
.text:000000000000333D ; ---------------------------------------------------------------------------
.text:000000000000333F                 align 20h
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003340                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:0000000000003340                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003345                 mov     ebx, 72h ; 'r'
.text:000000000000334A                 jmp     loc_31B2
.text:000000000000334A ; ---------------------------------------------------------------------------
.text:000000000000334F                 align 10h
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003350                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:0000000000003350                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003355                 mov     ebx, 66h ; 'f'
.text:000000000000335A                 jmp     loc_31C4
.text:000000000000335A ; ---------------------------------------------------------------------------
.text:000000000000335F                 align 20h
.text:0000000000003360
.text:0000000000003360 loc_3360:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003360                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:0000000000003360                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003365                 mov     ebx, 76h ; 'v'
.text:000000000000336A                 jmp     loc_31C4
.text:000000000000336A ; ---------------------------------------------------------------------------
.text:000000000000336F                 align 10h
.text:0000000000003370
.text:0000000000003370 loc_3370:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003370                                         ; DATA XREF: .rodata:jpt_307E↓o
.text:0000000000003370                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003375                 mov     ebx, 6Eh ; 'n'
.text:000000000000337A                 jmp     loc_31B2
.text:000000000000337A ; ---------------------------------------------------------------------------
.text:000000000000337F                 align 20h
.text:0000000000003380
.text:0000000000003380 def_340A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003380                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003380                                         ; DATA XREF: ...
.text:0000000000003380                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003383                 nop     dword ptr [rax+rax+00h]
.text:0000000000003388
.text:0000000000003388 def_307E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003388                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003388                                         ; DATA XREF: ...
.text:0000000000003388                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000338E                 jnz     loc_3738
.text:0000000000003394                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003399                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000339E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000033A3                 call    ___ctype_b_loc
.text:00000000000033A8                 mov     rcx, [rax]
.text:00000000000033AB                 movzx   edx, bl
.text:00000000000033AE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000033B4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000033BA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000033BF                 mov     edi, 1
.text:00000000000033C4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000033C8                 and     ax, 4000h
.text:00000000000033CC                 setnz   r12b
.text:00000000000033D0                 setz    al
.text:00000000000033D3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000033D7
.text:00000000000033D7 loc_33D7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000033D7                 test    al, al
.text:00000000000033D9                 jnz     loc_3D71
.text:00000000000033DF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000033E4                 setz    dl
.text:00000000000033E7                 jmp     loc_30B8
.text:00000000000033E7 ; ---------------------------------------------------------------------------
.text:00000000000033EC                 align 10h
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000033F0                 movzx   ebx, byte ptr [r9]
.text:00000000000033F4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000033F7                 ja      short def_340A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000033F9                 lea     rcx, jpt_340A
.text:0000000000003400                 movzx   edx, bl
.text:0000000000003403                 movsxd  rax, ds:(jpt_340A - 6568h)[rcx+rdx*4]
.text:0000000000003407                 add     rax, rcx
.text:000000000000340A                 jmp     rax             ; switch jump
.text:000000000000340A ; ---------------------------------------------------------------------------
.text:000000000000340C                 align 10h
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003410                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003410                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003413                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003418                 jnz     loc_320E
.text:000000000000341E                 xchg    ax, ax
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003420                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003420                 mov     edx, 5Ch ; '\'
.text:0000000000003425                 mov     ebx, 5Ch ; '\'
.text:000000000000342A                 jmp     loc_31C4
.text:000000000000342A ; ---------------------------------------------------------------------------
.text:000000000000342F                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003430                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003430                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003435                 xor     r10d, r10d
.text:0000000000003438                 mov     ebx, 66h ; 'f'
.text:000000000000343D                 jmp     loc_31C4
.text:000000000000343D ; ---------------------------------------------------------------------------
.text:0000000000003442                 align 8
.text:0000000000003448
.text:0000000000003448 loc_3448:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003448                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003448                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000344D                 xor     r10d, r10d
.text:0000000000003450                 mov     ebx, 6Eh ; 'n'
.text:0000000000003455                 jmp     loc_31B2
.text:0000000000003455 ; ---------------------------------------------------------------------------
.text:000000000000345A                 align 20h
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003460                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003460                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003465                 jmp     loc_3230
.text:0000000000003465 ; ---------------------------------------------------------------------------
.text:000000000000346A                 align 10h
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003470                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003470                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003473
.text:0000000000003473 loc_3473:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003473                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003478                 setz    dl
.text:000000000000347B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003480                 jnz     loc_401A
.text:0000000000003486                 mov     eax, r8d
.text:0000000000003489                 mov     rcx, r15
.text:000000000000348C                 xor     eax, 1
.text:000000000000348F                 and     al, dl
.text:0000000000003491                 jz      short loc_34C0
.text:0000000000003493                 cmp     r13, r15
.text:0000000000003496                 jbe     short loc_349D
.text:0000000000003498                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000349D
.text:000000000000349D loc_349D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000349D                 lea     rcx, [r15+1]
.text:00000000000034A1                 cmp     r13, rcx
.text:00000000000034A4                 jbe     short loc_34AC
.text:00000000000034A6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000034AC
.text:00000000000034AC loc_34AC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000034AC                 lea     rcx, [r15+2]
.text:00000000000034B0                 cmp     r13, rcx
.text:00000000000034B3                 ja      loc_3AE9
.text:00000000000034B9
.text:00000000000034B9 loc_34B9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000034B9                 lea     rcx, [r15+3]
.text:00000000000034BD                 mov     r8d, eax
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000034C0                 cmp     r13, rcx
.text:00000000000034C3                 jbe     short loc_34CA
.text:00000000000034C5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000034CA
.text:00000000000034CA loc_34CA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000034CA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034CF                 lea     r15, [rcx+1]
.text:00000000000034D3                 jz      loc_3AD9
.text:00000000000034D9                 lea     rax, [rbp+1]
.text:00000000000034DD                 cmp     rax, r11
.text:00000000000034E0                 jnb     short loc_34FB
.text:00000000000034E2                 mov     rax, [rsp+0E8h+s]
.text:00000000000034E7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000034EC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000034F0                 sub     eax, 30h ; '0'
.text:00000000000034F3                 cmp     al, 9
.text:00000000000034F5                 jbe     loc_3D29
.text:00000000000034FB
.text:00000000000034FB loc_34FB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000034FB                 mov     eax, r12d
.text:00000000000034FE                 mov     ebx, 30h ; '0'
.text:0000000000003503                 xor     r12d, r12d
.text:0000000000003506                 jmp     loc_30B8
.text:0000000000003506 ; ---------------------------------------------------------------------------
.text:000000000000350B                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003510                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003510                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003515                 mov     r12d, r10d
.text:0000000000003518                 setz    dl
.text:000000000000351B                 xor     r10d, r10d
.text:000000000000351E                 xor     eax, eax
.text:0000000000003520                 jmp     loc_30B8
.text:0000000000003520 ; ---------------------------------------------------------------------------
.text:0000000000003525                 align 8
.text:0000000000003528
.text:0000000000003528 loc_3528:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003528                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003528                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000352D                 setz    dl
.text:0000000000003530                 xor     r10d, r10d
.text:0000000000003533                 jmp     loc_32F8
.text:0000000000003533 ; ---------------------------------------------------------------------------
.text:0000000000003538                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003540                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003540                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003545                 setz    dl
.text:0000000000003548                 xor     r10d, r10d
.text:000000000000354B                 xor     r12d, r12d
.text:000000000000354E                 jmp     loc_3301
.text:000000000000354E ; ---------------------------------------------------------------------------
.text:0000000000003553                 align 8
.text:0000000000003558
.text:0000000000003558 loc_3558:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003558                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003558                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000355D                 mov     r12d, r10d
.text:0000000000003560                 mov     ebx, 20h ; ' '
.text:0000000000003565                 setz    dl
.text:0000000000003568                 xor     r10d, r10d
.text:000000000000356B                 jmp     loc_3301
.text:0000000000003570 ; ---------------------------------------------------------------------------
.text:0000000000003570
.text:0000000000003570 loc_3570:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003570                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003570                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003575                 xor     r10d, r10d
.text:0000000000003578                 mov     ebx, 72h ; 'r'
.text:000000000000357D                 jmp     loc_31B2
.text:000000000000357D ; ---------------------------------------------------------------------------
.text:0000000000003582                 align 8
.text:0000000000003588
.text:0000000000003588 loc_3588:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003588                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003588                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000358D                 jmp     loc_3230
.text:000000000000358D ; ---------------------------------------------------------------------------
.text:0000000000003592                 align 8
.text:0000000000003598
.text:0000000000003598 loc_3598:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003598                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:0000000000003598                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000359D                 xor     r10d, r10d
.text:00000000000035A0                 mov     ebx, 74h ; 't'
.text:00000000000035A5                 jmp     loc_31B2
.text:00000000000035A5 ; ---------------------------------------------------------------------------
.text:00000000000035AA                 align 10h
.text:00000000000035B0
.text:00000000000035B0 loc_35B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000035B0                                         ; DATA XREF: .rodata:jpt_340A↓o
.text:00000000000035B0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000035B5                 jmp     loc_3230
.text:00000000000035B5 ; ---------------------------------------------------------------------------
.text:00000000000035BA                 align 20h
.text:00000000000035C0
.text:00000000000035C0 loc_35C0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000035C0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000035C0                 xor     r10d, r10d
.text:00000000000035C3                 jmp     loc_3060
.text:00000000000035C3 ; ---------------------------------------------------------------------------
.text:00000000000035C8                 align 10h
.text:00000000000035D0
.text:00000000000035D0 loc_35D0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000035D0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000035D5                 jnz     loc_3F40
.text:00000000000035DB
.text:00000000000035DB loc_35DB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000035DB                 add     rbp, 1
.text:00000000000035DF                 mov     eax, r8d
.text:00000000000035E2                 xor     r12d, r12d
.text:00000000000035E5                 mov     ebx, 5Ch ; '\'
.text:00000000000035EA                 jmp     loc_30FC
.text:00000000000035EA ; ---------------------------------------------------------------------------
.text:00000000000035EF                 align 10h
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000035F0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000035F5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000035FA                 mov     r12d, r8d
.text:00000000000035FD                 mov     rbp, r11
.text:0000000000003600                 setz    dl
.text:0000000000003603                 mov     eax, ebx
.text:0000000000003605                 test    r15, r15
.text:0000000000003608                 setz    cl
.text:000000000000360B                 and     eax, edx
.text:000000000000360D                 and     al, cl
.text:000000000000360F                 jnz     loc_4076
.text:0000000000003615                 mov     eax, ebx
.text:0000000000003617                 xor     eax, 1
.text:000000000000361A                 and     dl, al
.text:000000000000361C                 jz      loc_3F8C
.text:0000000000003622                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003627                 jz      loc_3F8A
.text:000000000000362D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003632                 jnz     loc_402D
.text:0000000000003638                 test    r13, r13
.text:000000000000363B                 setz    al
.text:000000000000363E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003644                 setnz   dl
.text:0000000000003647                 and     al, dl
.text:0000000000003649                 jz      loc_406C
.text:000000000000364F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003654
.text:0000000000003654 loc_3654:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003654                 lea     rbx, asc_62DD   ; "'"
.text:000000000000365B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000365F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003667                 mov     r15d, 1
.text:000000000000366D                 mov     [rsp+0E8h+n], 1
.text:0000000000003676                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000367B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003680                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003684                 jmp     loc_2F63
.text:0000000000003684 ; ---------------------------------------------------------------------------
.text:0000000000003689                 align 10h
.text:0000000000003690
.text:0000000000003690 loc_3690:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003690                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003695                 jnz     loc_3F40
.text:000000000000369B                 test    r13, r13
.text:000000000000369E                 jz      loc_3AA0
.text:00000000000036A4                 xor     edx, edx
.text:00000000000036A6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000036AC                 jnz     loc_3AA0
.text:00000000000036B2
.text:00000000000036B2 loc_36B2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000036B2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000036B2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000036B7                 add     r15, 3
.text:00000000000036BB                 xor     eax, eax
.text:00000000000036BD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000036C2                 xor     r8d, r8d
.text:00000000000036C5                 mov     r13, rdx
.text:00000000000036C8                 mov     ebx, 27h ; '''
.text:00000000000036CD                 jmp     loc_30E9
.text:00000000000036CD ; ---------------------------------------------------------------------------
.text:00000000000036D2                 align 8
.text:00000000000036D8
.text:00000000000036D8 loc_36D8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000036D8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000036DD                 jz      short loc_3700
.text:00000000000036DF                 lea     rcx, [rbp+2]
.text:00000000000036E3                 cmp     rcx, r11
.text:00000000000036E6                 jnb     short loc_3700
.text:00000000000036E8                 mov     rax, [rsp+0E8h+s]
.text:00000000000036ED                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000036F2                 jz      loc_3E82
.text:00000000000036F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003700
.text:0000000000003700 loc_3700:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003700                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003700                 xor     edx, edx
.text:0000000000003702                 xor     r12d, r12d
.text:0000000000003705                 xor     eax, eax
.text:0000000000003707                 mov     ebx, 3Fh ; '?'
.text:000000000000370C                 jmp     loc_30B8
.text:000000000000370C ; ---------------------------------------------------------------------------
.text:0000000000003711                 align 8
.text:0000000000003718
.text:0000000000003718 loc_3718:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003718                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000371D                 jnz     loc_3F40
.text:0000000000003723                 xor     r12d, r12d
.text:0000000000003726                 xor     eax, eax
.text:0000000000003728                 mov     ebx, 3Fh ; '?'
.text:000000000000372D                 jmp     loc_30E9
.text:000000000000372D ; ---------------------------------------------------------------------------
.text:0000000000003732                 align 8
.text:0000000000003738
.text:0000000000003738 loc_3738:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003738                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003740                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003744                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003750                 mov     [rsp+0E8h+ps], rax
.text:0000000000003755                 jnz     short loc_3784
.text:0000000000003757                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000375C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003761                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003766                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000376B                 call    _strlen
.text:0000000000003770                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003776                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000377C                 mov     r11, rax
.text:000000000000377F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003784
.text:0000000000003784 loc_3784:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003784                 lea     rax, [rsp+0E8h+wc]
.text:000000000000378C                 xor     ecx, ecx
.text:000000000000378E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003792                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003797                 mov     rbx, rcx
.text:000000000000379A                 mov     [rsp+0E8h+var_60], r9
.text:00000000000037A2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000037A7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000037AC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000037B4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000037B9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000037BE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000037C3
.text:00000000000037C3 loc_37C3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000037C3                 mov     rax, [rsp+0E8h+s]
.text:00000000000037C8                 lea     r14, [rbp+rbx+0]
.text:00000000000037CD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000037D2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000037D7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000037DC                 lea     r13, [rax+r14]
.text:00000000000037E0                 sub     rdx, r14
.text:00000000000037E3                 mov     rsi, r13
.text:00000000000037E6                 call    rpl_mbrtowc
.text:00000000000037EB                 test    rax, rax
.text:00000000000037EE                 mov     r15, rax
.text:00000000000037F1                 jz      short loc_3841
.text:00000000000037F3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000037F7                 jz      loc_3E15
.text:00000000000037FD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003801                 jz      loc_3DA1
.text:0000000000003807                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000380C                 setz    al
.text:000000000000380F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003813                 jnz     loc_39B0
.text:0000000000003819
.text:0000000000003819 loc_3819:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003819                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003819                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003820                 call    _iswprint
.text:0000000000003825                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000382A                 test    eax, eax
.text:000000000000382C                 mov     eax, 0
.text:0000000000003831                 cmovz   r12d, eax
.text:0000000000003835                 add     rbx, r15
.text:0000000000003838                 call    _mbsinit
.text:000000000000383D                 test    eax, eax
.text:000000000000383F                 jz      short loc_37C3
.text:0000000000003841
.text:0000000000003841 loc_3841:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003841                 mov     edx, r12d
.text:0000000000003844                 mov     rdi, rbx
.text:0000000000003847                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000384D                 xor     edx, 1
.text:0000000000003850                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003855                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000385B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000385F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003867                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000386C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003871                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003876
.text:0000000000003876 loc_3876:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003876                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003876                 cmp     rdi, 1
.text:000000000000387A                 jbe     loc_3E7B
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003880                 mov     rcx, rdi
.text:0000000000003883                 xor     esi, esi
.text:0000000000003885                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000388B                 add     rcx, rbp
.text:000000000000388E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003893                 jmp     loc_394E
.text:0000000000003893 ; ---------------------------------------------------------------------------
.text:0000000000003898                 align 20h
.text:00000000000038A0
.text:00000000000038A0 loc_38A0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000038A0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038A5                 setz    al
.text:00000000000038A8                 test    r9b, r9b
.text:00000000000038AB                 jnz     loc_3D60
.text:00000000000038B1                 mov     esi, r8d
.text:00000000000038B4                 xor     esi, 1
.text:00000000000038B7                 and     al, sil
.text:00000000000038BA                 jz      short loc_38EB
.text:00000000000038BC                 cmp     r13, r15
.text:00000000000038BF                 jbe     short loc_38C6
.text:00000000000038C1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000038C6
.text:00000000000038C6 loc_38C6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000038C6                 lea     rsi, [r15+1]
.text:00000000000038CA                 cmp     r13, rsi
.text:00000000000038CD                 jbe     short loc_38D5
.text:00000000000038CF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000038D5
.text:00000000000038D5 loc_38D5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000038D5                 lea     rsi, [r15+2]
.text:00000000000038D9                 cmp     r13, rsi
.text:00000000000038DC                 jbe     short loc_38E4
.text:00000000000038DE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000038E4
.text:00000000000038E4 loc_38E4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000038E4                 add     r15, 3
.text:00000000000038E8                 mov     r8d, eax
.text:00000000000038EB
.text:00000000000038EB loc_38EB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000038EB                 cmp     r13, r15
.text:00000000000038EE                 jbe     short loc_38F5
.text:00000000000038F0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000038F5
.text:00000000000038F5 loc_38F5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000038F5                 lea     rax, [r15+1]
.text:00000000000038F9                 cmp     r13, rax
.text:00000000000038FC                 jbe     short loc_390B
.text:00000000000038FE                 mov     eax, ebx
.text:0000000000003900                 shr     al, 6
.text:0000000000003903                 add     eax, 30h ; '0'
.text:0000000000003906                 mov     [r14+r15+1], al
.text:000000000000390B
.text:000000000000390B loc_390B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000390B                 lea     rax, [r15+2]
.text:000000000000390F                 cmp     r13, rax
.text:0000000000003912                 jbe     short loc_3924
.text:0000000000003914                 mov     eax, ebx
.text:0000000000003916                 shr     al, 3
.text:0000000000003919                 and     eax, 7
.text:000000000000391C                 add     eax, 30h ; '0'
.text:000000000000391F                 mov     [r14+r15+2], al
.text:0000000000003924
.text:0000000000003924 loc_3924:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003924                 and     ebx, 7
.text:0000000000003927                 add     rbp, 1
.text:000000000000392B                 add     r15, 3
.text:000000000000392F                 add     ebx, 30h ; '0'
.text:0000000000003932                 cmp     rbp, rcx
.text:0000000000003935                 jnb     loc_3120
.text:000000000000393B                 mov     esi, edx
.text:000000000000393D
.text:000000000000393D loc_393D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000393D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000393D                 cmp     r13, r15
.text:0000000000003940                 jbe     short loc_3946
.text:0000000000003942                 mov     [r14+r15], bl
.text:0000000000003946
.text:0000000000003946 loc_3946:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003946                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000394A                 add     r15, 1
.text:000000000000394E
.text:000000000000394E loc_394E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000394E                 test    dl, dl
.text:0000000000003950                 jnz     loc_38A0
.text:0000000000003956                 mov     eax, esi
.text:0000000000003958                 xor     eax, 1
.text:000000000000395B                 and     eax, r8d
.text:000000000000395E                 test    r10b, r10b
.text:0000000000003961                 jz      short loc_3971
.text:0000000000003963                 cmp     r13, r15
.text:0000000000003966                 jbe     short loc_396D
.text:0000000000003968                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000396D
.text:000000000000396D loc_396D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000396D                 add     r15, 1
.text:0000000000003971
.text:0000000000003971 loc_3971:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003971                 add     rbp, 1
.text:0000000000003975                 cmp     rbp, rcx
.text:0000000000003978                 jnb     loc_30FC
.text:000000000000397E                 test    al, al
.text:0000000000003980                 jz      loc_3D7E
.text:0000000000003986                 cmp     r13, r15
.text:0000000000003989                 jbe     short loc_3990
.text:000000000000398B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003990
.text:0000000000003990 loc_3990:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003990                 lea     rax, [r15+1]
.text:0000000000003994                 cmp     r13, rax
.text:0000000000003997                 jbe     short loc_399F
.text:0000000000003999                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000399F
.text:000000000000399F loc_399F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000399F                 add     r15, 2
.text:00000000000039A3                 xor     r10d, r10d
.text:00000000000039A6                 xor     r8d, r8d
.text:00000000000039A9                 jmp     short loc_393D
.text:00000000000039A9 ; ---------------------------------------------------------------------------
.text:00000000000039AB                 align 10h
.text:00000000000039B0
.text:00000000000039B0 loc_39B0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000039B0                 cmp     r15, 1
.text:00000000000039B4                 jz      loc_3819
.text:00000000000039BA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000039BF                 lea     rcx, [rdi+r15]
.text:00000000000039C3                 lea     rdx, [rdi+r14+1]
.text:00000000000039C8                 lea     r8, [rcx+r14]
.text:00000000000039CC                 jmp     short loc_39DD
.text:00000000000039CC ; ---------------------------------------------------------------------------
.text:00000000000039CE                 align 10h
.text:00000000000039D0
.text:00000000000039D0 loc_39D0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000039D0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000039D0                 add     rdx, 1
.text:00000000000039D4                 cmp     r8, rdx
.text:00000000000039D7                 jz      loc_3819
.text:00000000000039DD
.text:00000000000039DD loc_39DD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000039DD                 movzx   ecx, byte ptr [rdx]
.text:00000000000039E0                 sub     ecx, 5Bh ; '['
.text:00000000000039E3                 cmp     cl, 21h ; '!'
.text:00000000000039E6                 ja      short loc_39D0
.text:00000000000039E8                 mov     esi, 1
.text:00000000000039ED                 shl     rsi, cl
.text:00000000000039F0                 mov     rcx, rsi
.text:00000000000039F3                 mov     rsi, 20000002Bh
.text:00000000000039FD                 test    rcx, rsi
.text:0000000000003A00                 jz      short loc_39D0
.text:0000000000003A02                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003A07                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003A0C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003A11                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003A19
.text:0000000000003A19 loc_3A19:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003A19                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003A19                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003A1E                 jz      short loc_3A30
.text:0000000000003A20                 test    al, al
.text:0000000000003A22                 mov     eax, 4
.text:0000000000003A27                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003A2C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003A30
.text:0000000000003A30 loc_3A30:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003A30                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003A30                 sub     rsp, 8
.text:0000000000003A34                 mov     rcx, rbp
.text:0000000000003A37                 mov     rsi, r13
.text:0000000000003A3A                 push    [rsp+0F0h+var_88]
.text:0000000000003A3E                 push    [rsp+0F8h+var_80]
.text:0000000000003A42                 mov     rdi, r14
.text:0000000000003A45                 push    0
.text:0000000000003A47                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003A4F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003A54                 mov     rdx, [rsp+108h+s]
.text:0000000000003A59                 and     r9d, 0FFFFFFFDh
.text:0000000000003A5D                 call    quotearg_buffer_restyled
.text:0000000000003A62                 add     rsp, 20h
.text:0000000000003A66                 mov     r15, rax
.text:0000000000003A69
.text:0000000000003A69 loc_3A69:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003A69                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003A69                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003A71                 xor     rbx, fs:28h
.text:0000000000003A7A                 mov     rax, r15
.text:0000000000003A7D                 jnz     loc_4083
.text:0000000000003A83                 add     rsp, 0B8h
.text:0000000000003A8A                 pop     rbx
.text:0000000000003A8B                 pop     rbp
.text:0000000000003A8C                 pop     r12
.text:0000000000003A8E                 pop     r13
.text:0000000000003A90                 pop     r14
.text:0000000000003A92                 pop     r15
.text:0000000000003A94                 retn
.text:0000000000003A94 ; ---------------------------------------------------------------------------
.text:0000000000003A95                 align 8
.text:0000000000003A98
.text:0000000000003A98 loc_3A98:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003A98                 mov     rbp, r11
.text:0000000000003A9B                 jmp     loc_3A19
.text:0000000000003AA0 ; ---------------------------------------------------------------------------
.text:0000000000003AA0
.text:0000000000003AA0 loc_3AA0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003AA0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003AA0                 cmp     r13, r15
.text:0000000000003AA3                 jbe     short loc_3AAA
.text:0000000000003AA5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003AAA
.text:0000000000003AAA loc_3AAA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003AAA                 lea     rax, [r15+1]
.text:0000000000003AAE                 cmp     r13, rax
.text:0000000000003AB1                 jbe     short loc_3AB9
.text:0000000000003AB3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003AB9
.text:0000000000003AB9 loc_3AB9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003AB9                 lea     rax, [r15+2]
.text:0000000000003ABD                 cmp     r13, rax
.text:0000000000003AC0                 jbe     loc_40B2
.text:0000000000003AC6                 mov     rdx, r13
.text:0000000000003AC9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003ACF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003AD4                 jmp     loc_36B2
.text:0000000000003AD9 ; ---------------------------------------------------------------------------
.text:0000000000003AD9
.text:0000000000003AD9 loc_3AD9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003AD9                 mov     eax, r12d
.text:0000000000003ADC                 mov     ebx, 30h ; '0'
.text:0000000000003AE1                 xor     r12d, r12d
.text:0000000000003AE4                 jmp     loc_30E9
.text:0000000000003AE9 ; ---------------------------------------------------------------------------
.text:0000000000003AE9
.text:0000000000003AE9 loc_3AE9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003AE9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003AEF                 jmp     loc_34B9
.text:0000000000003AF4 ; ---------------------------------------------------------------------------
.text:0000000000003AF4
.text:0000000000003AF4 loc_3AF4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003AF4                                         ; DATA XREF: .rodata:jpt_2F21↓o
.text:0000000000003AF4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003AF6                 jnz     loc_2F23        ; jumptable 00000000000121F1 case 1
.text:0000000000003AFC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003B01
.text:0000000000003B01 loc_3B01:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003B01                 test    r13, r13
.text:0000000000003B04                 jnz     loc_409A
.text:0000000000003B0A                 lea     rax, asc_62DD   ; "'"
.text:0000000000003B11                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B1A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B1F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B24                 xor     r12d, r12d
.text:0000000000003B27                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003B2C                 mov     [rsp+0E8h+n], 1
.text:0000000000003B35                 mov     [rsp+0E8h+s2], rax
.text:0000000000003B3A                 mov     r15d, 1
.text:0000000000003B40                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B48                 jmp     loc_2F63
.text:0000000000003B48 ; ---------------------------------------------------------------------------
.text:0000000000003B4D                 align 10h
.text:0000000000003B50
.text:0000000000003B50 loc_3B50:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003B50                                         ; DATA XREF: .rodata:jpt_2F21↓o
.text:0000000000003B50                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003B52                 jnz     loc_3F4D
.text:0000000000003B58                 test    r13, r13
.text:0000000000003B5B                 jz      loc_3D86
.text:0000000000003B61                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003B65                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B6A                 xor     r12d, r12d
.text:0000000000003B6D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B72                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B7B
.text:0000000000003B7B loc_3B7B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003B7B                 lea     rax, unk_62DB
.text:0000000000003B82                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003B87                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003B8C                 mov     [rsp+0E8h+n], 1
.text:0000000000003B95                 mov     r15d, 1
.text:0000000000003B9B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003BA0                 jmp     loc_2F63
.text:0000000000003BA5 ; ---------------------------------------------------------------------------
.text:0000000000003BA5
.text:0000000000003BA5 loc_3BA5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003BA5                                         ; DATA XREF: .rodata:jpt_2F21↓o
.text:0000000000003BA5                 lea     rax, unk_62DB   ; jumptable 00000000000121F1 case 6
.text:0000000000003BAC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003BB1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003BB6                 xor     r12d, r12d
.text:0000000000003BB9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003BC2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003BC7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003BCC                 mov     [rsp+0E8h+n], 1
.text:0000000000003BD5                 xor     r15d, r15d
.text:0000000000003BD8                 mov     [rsp+0E8h+s2], rax
.text:0000000000003BDD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003BE5                 jmp     loc_2F63
.text:0000000000003BEA ; ---------------------------------------------------------------------------
.text:0000000000003BEA
.text:0000000000003BEA loc_3BEA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003BEA                                         ; DATA XREF: .rodata:jpt_2F21↓o
.text:0000000000003BEA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000003BEF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003BF4                 xor     r12d, r12d
.text:0000000000003BF7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C00                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003C05                 xor     r15d, r15d
.text:0000000000003C08                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003C0D                 mov     [rsp+0E8h+n], 0
.text:0000000000003C16                 mov     [rsp+0E8h+s2], 0
.text:0000000000003C1F                 jmp     loc_2F63
.text:0000000000003C24 ; ---------------------------------------------------------------------------
.text:0000000000003C24
.text:0000000000003C24 loc_3C24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C24                                         ; DATA XREF: .rodata:jpt_2F21↓o
.text:0000000000003C24                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003C29                 jz      short loc_3C81
.text:0000000000003C2B                 lea     rsi, asc_62DF   ; "`"
.text:0000000000003C32                 xor     edi, edi        ; domainname
.text:0000000000003C34                 mov     edx, 5          ; category
.text:0000000000003C39                 call    _dcgettext
.text:0000000000003C3E                 mov     rcx, rax
.text:0000000000003C41                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003C46                 lea     rax, asc_62DF   ; "`"
.text:0000000000003C4D                 cmp     rcx, rax
.text:0000000000003C50                 jz      loc_3FEE
.text:0000000000003C56
.text:0000000000003C56 loc_3C56:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003C56                 lea     rsi, asc_62DD   ; "'"
.text:0000000000003C5D                 xor     edi, edi        ; domainname
.text:0000000000003C5F                 mov     edx, 5          ; category
.text:0000000000003C64                 call    _dcgettext
.text:0000000000003C69                 mov     rcx, rax
.text:0000000000003C6C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003C71                 lea     rax, asc_62DD   ; "'"
.text:0000000000003C78                 cmp     rcx, rax
.text:0000000000003C7B                 jz      loc_4004
.text:0000000000003C81
.text:0000000000003C81 loc_3C81:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003C81                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003C81                 xor     r15d, r15d
.text:0000000000003C84                 test    ebx, ebx
.text:0000000000003C86                 jz      loc_3E4D
.text:0000000000003C8C
.text:0000000000003C8C loc_3C8C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003C8C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003C8C                 test    ebx, ebx
.text:0000000000003C8E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003C93                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003C98                 xor     r12d, r12d
.text:0000000000003C9B                 mov     rdi, rbx        ; s
.text:0000000000003C9E                 call    _strlen
.text:0000000000003CA3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003CA8                 mov     [rsp+0E8h+n], rax
.text:0000000000003CAD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003CB2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CC0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003CC5                 jmp     loc_2F63
.text:0000000000003CCA ; ---------------------------------------------------------------------------
.text:0000000000003CCA
.text:0000000000003CCA loc_3CCA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003CCA                                         ; DATA XREF: .rodata:jpt_2F21↓o
.text:0000000000003CCA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003CCF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CD4                 xor     r12d, r12d
.text:0000000000003CD7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CE0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003CE5                 xor     r15d, r15d
.text:0000000000003CE8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003CED                 mov     [rsp+0E8h+n], 0
.text:0000000000003CF6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003CFF                 jmp     loc_2F63
.text:0000000000003D04 ; ---------------------------------------------------------------------------
.text:0000000000003D04
.text:0000000000003D04 loc_3D04:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003D04                                         ; DATA XREF: .rodata:jpt_2F21↓o
.text:0000000000003D04                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003D09                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D0E                 xor     r12d, r12d
.text:0000000000003D11                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003D1A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003D1F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003D24                 jmp     loc_2F43
.text:0000000000003D29 ; ---------------------------------------------------------------------------
.text:0000000000003D29
.text:0000000000003D29 loc_3D29:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003D29                 cmp     r13, r15
.text:0000000000003D2C                 jbe     short loc_3D33
.text:0000000000003D2E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003D33
.text:0000000000003D33 loc_3D33:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003D33                 lea     rax, [rcx+2]
.text:0000000000003D37                 cmp     r13, rax
.text:0000000000003D3A                 jbe     short loc_3D42
.text:0000000000003D3C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003D42
.text:0000000000003D42 loc_3D42:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003D42                 mov     eax, r12d
.text:0000000000003D45                 lea     r15, [rcx+3]
.text:0000000000003D49                 xor     r12d, r12d
.text:0000000000003D4C                 mov     ebx, 30h ; '0'
.text:0000000000003D51                 jmp     loc_30B8
.text:0000000000003D51 ; ---------------------------------------------------------------------------
.text:0000000000003D56                 align 20h
.text:0000000000003D60
.text:0000000000003D60 loc_3D60:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003D60                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003D65                 mov     rbp, r11
.text:0000000000003D68                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003D6C                 jmp     loc_3A19
.text:0000000000003D71 ; ---------------------------------------------------------------------------
.text:0000000000003D71
.text:0000000000003D71 loc_3D71:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003D71                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003D76                 xor     r12d, r12d
.text:0000000000003D79                 jmp     loc_3880
.text:0000000000003D7E ; ---------------------------------------------------------------------------
.text:0000000000003D7E
.text:0000000000003D7E loc_3D7E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003D7E                 xor     r10d, r10d
.text:0000000000003D81                 jmp     loc_393D
.text:0000000000003D86 ; ---------------------------------------------------------------------------
.text:0000000000003D86
.text:0000000000003D86 loc_3D86:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003D86                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003D8F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003D94                 xor     r12d, r12d
.text:0000000000003D97                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D9C                 jmp     loc_3B7B
.text:0000000000003DA1 ; ---------------------------------------------------------------------------
.text:0000000000003DA1
.text:0000000000003DA1 loc_3DA1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003DA1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003DA6                 mov     rsi, r14
.text:0000000000003DA9                 mov     rcx, r13
.text:0000000000003DAC                 mov     rax, rbx
.text:0000000000003DAF                 mov     rdi, rbx
.text:0000000000003DB2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003DB8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003DBD                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003DC5                 cmp     rsi, r11
.text:0000000000003DC8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003DCE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003DD6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003DDB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003DE0                 jnb     short loc_3E08
.text:0000000000003DE2                 cmp     byte ptr [rcx], 0
.text:0000000000003DE5                 jnz     short loc_3DF7
.text:0000000000003DE7                 jmp     short loc_3E08
.text:0000000000003DE7 ; ---------------------------------------------------------------------------
.text:0000000000003DE9                 align 10h
.text:0000000000003DF0
.text:0000000000003DF0 loc_3DF0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003DF0                 cmp     byte ptr [r9+rax], 0
.text:0000000000003DF5                 jz      short loc_3E05
.text:0000000000003DF7
.text:0000000000003DF7 loc_3DF7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003DF7                 add     rax, 1
.text:0000000000003DFB                 lea     rdx, [rbp+rax+0]
.text:0000000000003E00                 cmp     r11, rdx
.text:0000000000003E03                 ja      short loc_3DF0
.text:0000000000003E05
.text:0000000000003E05 loc_3E05:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003E05                 mov     rdi, rax
.text:0000000000003E08
.text:0000000000003E08 loc_3E08:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003E08                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003E08                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003E0D                 xor     r12d, r12d
.text:0000000000003E10                 jmp     loc_3876
.text:0000000000003E15 ; ---------------------------------------------------------------------------
.text:0000000000003E15
.text:0000000000003E15 loc_3E15:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003E15                 mov     rdi, rbx
.text:0000000000003E18                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003E1E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003E23                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003E29                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003E31                 xor     r12d, r12d
.text:0000000000003E34                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003E39                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003E3E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003E43                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003E48                 jmp     loc_3876
.text:0000000000003E4D ; ---------------------------------------------------------------------------
.text:0000000000003E4D
.text:0000000000003E4D loc_3E4D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003E4D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003E52                 movzx   eax, byte ptr [rdx]
.text:0000000000003E55                 test    al, al
.text:0000000000003E57                 jz      loc_3C8C
.text:0000000000003E5D                 nop     dword ptr [rax]
.text:0000000000003E60
.text:0000000000003E60 loc_3E60:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003E60                 cmp     r13, r15
.text:0000000000003E63                 jbe     short loc_3E69
.text:0000000000003E65                 mov     [r14+r15], al
.text:0000000000003E69
.text:0000000000003E69 loc_3E69:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003E69                 add     r15, 1
.text:0000000000003E6D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003E72                 test    al, al
.text:0000000000003E74                 jnz     short loc_3E60
.text:0000000000003E76                 jmp     loc_3C8C
.text:0000000000003E7B ; ---------------------------------------------------------------------------
.text:0000000000003E7B
.text:0000000000003E7B loc_3E7B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003E7B                 mov     eax, edx
.text:0000000000003E7D                 jmp     loc_33D7
.text:0000000000003E82 ; ---------------------------------------------------------------------------
.text:0000000000003E82
.text:0000000000003E82 loc_3E82:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003E82                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003E86                 cmp     bl, 3Eh ; '>'
.text:0000000000003E89                 ja      loc_3700
.text:0000000000003E8F                 mov     rax, 7000A38200000000h
.text:0000000000003E99                 bt      rax, rbx
.text:0000000000003E9D                 jnb     loc_3700
.text:0000000000003EA3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003EA8                 jnz     loc_4092
.text:0000000000003EAE                 cmp     r13, r15
.text:0000000000003EB1                 jbe     short loc_3EB8
.text:0000000000003EB3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003EB8
.text:0000000000003EB8 loc_3EB8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003EB8                 lea     rax, [r15+1]
.text:0000000000003EBC                 cmp     r13, rax
.text:0000000000003EBF                 jbe     short loc_3EC7
.text:0000000000003EC1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003EC7
.text:0000000000003EC7 loc_3EC7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003EC7                 lea     rax, [r15+2]
.text:0000000000003ECB                 cmp     r13, rax
.text:0000000000003ECE                 jbe     short loc_3ED6
.text:0000000000003ED0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003ED6
.text:0000000000003ED6 loc_3ED6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003ED6                 lea     rax, [r15+3]
.text:0000000000003EDA                 cmp     r13, rax
.text:0000000000003EDD                 jbe     short loc_3EE5
.text:0000000000003EDF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003EE5
.text:0000000000003EE5 loc_3EE5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003EE5                 add     r15, 4
.text:0000000000003EE9                 xor     edx, edx
.text:0000000000003EEB                 xor     r12d, r12d
.text:0000000000003EEE                 xor     eax, eax
.text:0000000000003EF0                 mov     rbp, rcx
.text:0000000000003EF3                 jmp     loc_30B8
.text:0000000000003EF8 ; ---------------------------------------------------------------------------
.text:0000000000003EF8
.text:0000000000003EF8 loc_3EF8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003EF8                                         ; DATA XREF: .rodata:jpt_2F21↓o
.text:0000000000003EF8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003EFA                 jz      loc_4088
.text:0000000000003F00                 lea     rax, asc_62DD   ; "'"
.text:0000000000003F07                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003F0C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003F11                 xor     r12d, r12d
.text:0000000000003F14                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003F1D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003F22                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003F27                 mov     [rsp+0E8h+n], 1
.text:0000000000003F30                 xor     r15d, r15d
.text:0000000000003F33                 mov     [rsp+0E8h+s2], rax
.text:0000000000003F38                 jmp     loc_2F63
.text:0000000000003F38 ; ---------------------------------------------------------------------------
.text:0000000000003F3D                 align 20h
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003F40                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003F40                 mov     rbp, r11
.text:0000000000003F43                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003F48                 jmp     loc_3A19
.text:0000000000003F4D ; ---------------------------------------------------------------------------
.text:0000000000003F4D
.text:0000000000003F4D loc_3F4D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003F4D                 lea     rax, unk_62DB
.text:0000000000003F54                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003F59                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003F5E                 xor     r12d, r12d
.text:0000000000003F61                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003F6A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003F6F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003F74                 mov     [rsp+0E8h+n], 1
.text:0000000000003F7D                 xor     r15d, r15d
.text:0000000000003F80                 mov     [rsp+0E8h+s2], rax
.text:0000000000003F85                 jmp     loc_2F63
.text:0000000000003F8A ; ---------------------------------------------------------------------------
.text:0000000000003F8A
.text:0000000000003F8A loc_3F8A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003F8A                 mov     eax, edx
.text:0000000000003F8C
.text:0000000000003F8C loc_3F8C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003F8C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003F8C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003F91                 test    rbx, rbx
.text:0000000000003F94                 jz      short loc_3FC2
.text:0000000000003F96                 test    al, al
.text:0000000000003F98                 jz      short loc_3FC2
.text:0000000000003F9A                 movzx   ecx, byte ptr [rbx]
.text:0000000000003F9D                 mov     rax, rbx
.text:0000000000003FA0                 test    cl, cl
.text:0000000000003FA2                 jz      short loc_3FC2
.text:0000000000003FA4                 mov     rdx, r15
.text:0000000000003FA7                 sub     rax, r15
.text:0000000000003FAA
.text:0000000000003FAA loc_3FAA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003FAA                 cmp     r13, rdx
.text:0000000000003FAD                 jbe     short loc_3FB3
.text:0000000000003FAF                 mov     [r14+rdx], cl
.text:0000000000003FB3
.text:0000000000003FB3 loc_3FB3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003FB3                 add     rdx, 1
.text:0000000000003FB7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003FBB                 test    cl, cl
.text:0000000000003FBD                 jnz     short loc_3FAA
.text:0000000000003FBF                 mov     r15, rdx
.text:0000000000003FC2
.text:0000000000003FC2 loc_3FC2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003FC2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003FC2                 cmp     r13, r15
.text:0000000000003FC5                 jbe     loc_3A69
.text:0000000000003FCB                 mov     byte ptr [r14+r15], 0
.text:0000000000003FD0                 jmp     loc_3A69
.text:0000000000003FD5 ; ---------------------------------------------------------------------------
.text:0000000000003FD5
.text:0000000000003FD5 loc_3FD5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003FD5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003FDA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003FDF                 mov     rbp, r11
.text:0000000000003FE2                 setz    al
.text:0000000000003FE5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003FE9                 jmp     loc_3A19
.text:0000000000003FEE ; ---------------------------------------------------------------------------
.text:0000000000003FEE
.text:0000000000003FEE loc_3FEE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003FEE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003FF2                 mov     rdi, rcx
.text:0000000000003FF5                 call    gettext_quote
.text:0000000000003FFA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003FFF                 jmp     loc_3C56
.text:0000000000004004 ; ---------------------------------------------------------------------------
.text:0000000000004004
.text:0000000000004004 loc_4004:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004004                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004008                 mov     rdi, rcx
.text:000000000000400B                 call    gettext_quote
.text:0000000000004010                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004015                 jmp     loc_3C81
.text:000000000000401A ; ---------------------------------------------------------------------------
.text:000000000000401A
.text:000000000000401A loc_401A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000401A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000401F                 mov     rbp, r11
.text:0000000000004022                 mov     eax, edx
.text:0000000000004024                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004028                 jmp     loc_3A19
.text:000000000000402D ; ---------------------------------------------------------------------------
.text:000000000000402D
.text:000000000000402D loc_402D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000402D                 sub     rsp, 8
.text:0000000000004031                 mov     r8d, 5
.text:0000000000004037                 mov     rcx, r11
.text:000000000000403A                 push    [rsp+0F0h+var_88]
.text:000000000000403E                 push    [rsp+0F8h+var_80]
.text:0000000000004042                 mov     rdi, r14
.text:0000000000004045                 push    [rsp+100h+var_C8]
.text:0000000000004049                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004051                 mov     rdx, [rsp+108h+s]
.text:0000000000004056                 mov     rsi, [rsp+108h+var_98]
.text:000000000000405B                 call    quotearg_buffer_restyled
.text:0000000000004060                 add     rsp, 20h
.text:0000000000004064                 mov     r15, rax
.text:0000000000004067                 jmp     loc_3A69
.text:000000000000406C ; ---------------------------------------------------------------------------
.text:000000000000406C
.text:000000000000406C loc_406C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000406C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004071                 jmp     loc_3F8C
.text:0000000000004076 ; ---------------------------------------------------------------------------
.text:0000000000004076
.text:0000000000004076 loc_4076:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004076                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000407E                 jmp     loc_3A19
.text:0000000000004083 ; ---------------------------------------------------------------------------
.text:0000000000004083
.text:0000000000004083 loc_4083:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004083                 call    ___stack_chk_fail
.text:0000000000004088 ; ---------------------------------------------------------------------------
.text:0000000000004088
.text:0000000000004088 loc_4088:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004088                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000408D                 jmp     loc_3B01
.text:0000000000004092 ; ---------------------------------------------------------------------------
.text:0000000000004092
.text:0000000000004092 loc_4092:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004092                 mov     rbp, r11
.text:0000000000004095                 jmp     loc_3A30
.text:000000000000409A ; ---------------------------------------------------------------------------
.text:000000000000409A
.text:000000000000409A loc_409A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000409A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000409F                 xor     eax, eax
.text:00000000000040A1                 xor     r12d, r12d
.text:00000000000040A4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000040AD                 jmp     loc_3654
.text:00000000000040B2 ; ---------------------------------------------------------------------------
.text:00000000000040B2
.text:00000000000040B2 loc_40B2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000040B2                 mov     rdx, r13
.text:00000000000040B5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000040BA                 jmp     loc_36B2
.text:00000000000040BF ; ---------------------------------------------------------------------------
.text:00000000000040BF
.text:00000000000040BF def_2F21:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000040BF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000040BF ; } // starts at 2E90
.text:00000000000040BF quotearg_buffer_restyled endp
.text:00000000000040BF
.text:00000000000040BF ; ---------------------------------------------------------------------------
.text:00000000000040C4                 align 10h
.text:00000000000040D0
.text:00000000000040D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040D0
.text:00000000000040D0
.text:00000000000040D0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000040D0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000040D0
.text:00000000000040D0 var_50          = qword ptr -50h
.text:00000000000040D0 var_48          = qword ptr -48h
.text:00000000000040D0 var_40          = dword ptr -40h
.text:00000000000040D0 var_3C          = dword ptr -3Ch
.text:00000000000040D0
.text:00000000000040D0 ; __unwind {
.text:00000000000040D0                 push    r15
.text:00000000000040D2                 push    r14
.text:00000000000040D4                 movsxd  r15, edi
.text:00000000000040D7                 push    r13
.text:00000000000040D9                 push    r12
.text:00000000000040DB                 mov     r14, rdx
.text:00000000000040DE                 push    rbp
.text:00000000000040DF                 push    rbx
.text:00000000000040E0                 mov     rbp, rcx
.text:00000000000040E3                 sub     rsp, 28h
.text:00000000000040E7                 mov     [rsp+58h+var_50], rsi
.text:00000000000040EC                 call    ___errno_location
.text:00000000000040F1                 mov     r13, rax
.text:00000000000040F4                 mov     eax, [rax]
.text:00000000000040F6                 test    r15d, r15d
.text:00000000000040F9                 mov     rbx, cs:slotvec
.text:0000000000004100                 mov     [rsp+58h+var_40], eax
.text:0000000000004104                 js      loc_4271
.text:000000000000410A                 cmp     cs:nslots, r15d
.text:0000000000004111                 jg      short loc_4175
.text:0000000000004113                 cmp     r15d, 7FFFFFFFh
.text:000000000000411A                 jz      loc_4276
.text:0000000000004120                 lea     r12d, [r15+1]
.text:0000000000004124                 lea     rax, slotvec0
.text:000000000000412B                 movsxd  rsi, r12d
.text:000000000000412E                 shl     rsi, 4
.text:0000000000004132                 cmp     rbx, rax
.text:0000000000004135                 jz      loc_4250
.text:000000000000413B                 mov     rdi, rbx
.text:000000000000413E                 call    xrealloc
.text:0000000000004143                 mov     rbx, rax
.text:0000000000004146                 mov     cs:slotvec, rax
.text:000000000000414D
.text:000000000000414D loc_414D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000414D                 movsxd  rdi, cs:nslots
.text:0000000000004154                 mov     edx, r12d
.text:0000000000004157                 xor     esi, esi        ; c
.text:0000000000004159                 sub     edx, edi
.text:000000000000415B                 shl     rdi, 4
.text:000000000000415F                 movsxd  rdx, edx
.text:0000000000004162                 add     rdi, rbx        ; s
.text:0000000000004165                 shl     rdx, 4          ; n
.text:0000000000004169                 call    _memset
.text:000000000000416E                 mov     cs:nslots, r12d
.text:0000000000004175
.text:0000000000004175 loc_4175:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004175                 mov     eax, [rbp+4]
.text:0000000000004178                 shl     r15, 4
.text:000000000000417C                 sub     rsp, 8
.text:0000000000004180                 add     rbx, r15
.text:0000000000004183                 lea     r15, [rbp+8]
.text:0000000000004187                 mov     r8d, [rbp+0]
.text:000000000000418B                 mov     r11, [rbx]
.text:000000000000418E                 mov     r12, [rbx+8]
.text:0000000000004192                 mov     rcx, r14
.text:0000000000004195                 or      eax, 1
.text:0000000000004198                 mov     [rsp+60h+var_3C], eax
.text:000000000000419C                 push    qword ptr [rbp+30h]
.text:000000000000419F                 mov     r9d, eax
.text:00000000000041A2                 push    qword ptr [rbp+28h]
.text:00000000000041A5                 push    r15
.text:00000000000041A7                 mov     rsi, r11
.text:00000000000041AA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000041AF                 mov     rdi, r12
.text:00000000000041B2                 mov     [rsp+78h+var_48], r11
.text:00000000000041B7                 call    quotearg_buffer_restyled
.text:00000000000041BC                 add     rsp, 20h
.text:00000000000041C0                 mov     r11, [rsp+58h+var_48]
.text:00000000000041C5                 cmp     r11, rax
.text:00000000000041C8                 ja      short loc_4231
.text:00000000000041CA                 lea     rsi, [rax+1]
.text:00000000000041CE                 lea     rax, slot0
.text:00000000000041D5                 cmp     r12, rax
.text:00000000000041D8                 mov     [rbx], rsi
.text:00000000000041DB                 jz      short loc_41EF
.text:00000000000041DD                 mov     rdi, r12        ; ptr
.text:00000000000041E0                 mov     [rsp+58h+var_48], rsi
.text:00000000000041E5                 call    _free
.text:00000000000041EA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000041EF
.text:00000000000041EF loc_41EF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000041EF                 mov     rdi, rsi
.text:00000000000041F2                 mov     [rsp+58h+var_48], rsi
.text:00000000000041F7                 call    xmalloc
.text:00000000000041FC                 sub     rsp, 8
.text:0000000000004200                 mov     [rbx+8], rax
.text:0000000000004204                 mov     r8d, [rbp+0]
.text:0000000000004208                 push    qword ptr [rbp+30h]
.text:000000000000420B                 push    qword ptr [rbp+28h]
.text:000000000000420E                 mov     rcx, r14
.text:0000000000004211                 push    r15
.text:0000000000004213                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004218                 mov     rdi, rax
.text:000000000000421B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004220                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004225                 mov     r12, rax
.text:0000000000004228                 call    quotearg_buffer_restyled
.text:000000000000422D                 add     rsp, 20h
.text:0000000000004231
.text:0000000000004231 loc_4231:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004231                 mov     eax, [rsp+58h+var_40]
.text:0000000000004235                 mov     [r13+0], eax
.text:0000000000004239                 add     rsp, 28h
.text:000000000000423D                 mov     rax, r12
.text:0000000000004240                 pop     rbx
.text:0000000000004241                 pop     rbp
.text:0000000000004242                 pop     r12
.text:0000000000004244                 pop     r13
.text:0000000000004246                 pop     r14
.text:0000000000004248                 pop     r15
.text:000000000000424A                 retn
.text:000000000000424A ; ---------------------------------------------------------------------------
.text:000000000000424B                 align 10h
.text:0000000000004250
.text:0000000000004250 loc_4250:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004250                 xor     edi, edi
.text:0000000000004252                 call    xrealloc
.text:0000000000004257                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000425F                 mov     rbx, rax
.text:0000000000004262                 mov     cs:slotvec, rax
.text:0000000000004269                 movups  xmmword ptr [rax], xmm0
.text:000000000000426C                 jmp     loc_414D
.text:0000000000004271 ; ---------------------------------------------------------------------------
.text:0000000000004271
.text:0000000000004271 loc_4271:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004271                 call    _abort
.text:0000000000004276 ; ---------------------------------------------------------------------------
.text:0000000000004276
.text:0000000000004276 loc_4276:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004276                 call    xalloc_die
.text:0000000000004276 ; } // starts at 40D0
.text:0000000000004276 quotearg_n_options endp
.text:0000000000004276
.text:0000000000004276 ; ---------------------------------------------------------------------------
.text:000000000000427B                 align 20h
.text:0000000000004280
.text:0000000000004280 ; =============== S U B R O U T I N E =======================================
.text:0000000000004280
.text:0000000000004280 ; Attributes: info_from_lumina
.text:0000000000004280
.text:0000000000004280 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004280                 public clone_quoting_options
.text:0000000000004280 clone_quoting_options proc near
.text:0000000000004280 ; __unwind {
.text:0000000000004280                 push    r12
.text:0000000000004282                 push    rbp
.text:0000000000004283                 push    rbx
.text:0000000000004284                 mov     rbx, rdi
.text:0000000000004287                 call    ___errno_location
.text:000000000000428C                 mov     r12d, [rax]
.text:000000000000428F                 mov     rbp, rax
.text:0000000000004292                 lea     rax, default_quoting_options
.text:0000000000004299                 test    rbx, rbx
.text:000000000000429C                 mov     esi, 38h ; '8'  ; n
.text:00000000000042A1                 cmovz   rbx, rax
.text:00000000000042A5                 mov     rdi, rbx        ; src
.text:00000000000042A8                 call    xmemdup
.text:00000000000042AD                 mov     [rbp+0], r12d
.text:00000000000042B1                 pop     rbx
.text:00000000000042B2                 pop     rbp
.text:00000000000042B3                 pop     r12
.text:00000000000042B5                 retn
.text:00000000000042B5 ; } // starts at 4280
.text:00000000000042B5 clone_quoting_options endp
.text:00000000000042B5
.text:00000000000042B5 ; ---------------------------------------------------------------------------
.text:00000000000042B6                 align 20h
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0
.text:00000000000042C0                 public get_quoting_style
.text:00000000000042C0 get_quoting_style proc near
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 lea     rax, default_quoting_options
.text:00000000000042C7                 test    rdi, rdi
.text:00000000000042CA                 cmovz   rdi, rax
.text:00000000000042CE                 mov     eax, [rdi]
.text:00000000000042D0                 retn
.text:00000000000042D0 ; } // starts at 42C0
.text:00000000000042D0 get_quoting_style endp
.text:00000000000042D0
.text:00000000000042D0 ; ---------------------------------------------------------------------------
.text:00000000000042D1                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0
.text:00000000000042E0                 public set_quoting_style
.text:00000000000042E0 set_quoting_style proc near
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 lea     rax, default_quoting_options
.text:00000000000042E7                 test    rdi, rdi
.text:00000000000042EA                 cmovz   rdi, rax
.text:00000000000042EE                 mov     [rdi], esi
.text:00000000000042F0                 retn
.text:00000000000042F0 ; } // starts at 42E0
.text:00000000000042F0 set_quoting_style endp
.text:00000000000042F0
.text:00000000000042F0 ; ---------------------------------------------------------------------------
.text:00000000000042F1                 align 20h
.text:0000000000004300
.text:0000000000004300 ; =============== S U B R O U T I N E =======================================
.text:0000000000004300
.text:0000000000004300 ; Attributes: info_from_lumina
.text:0000000000004300
.text:0000000000004300 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004300                 public set_char_quoting
.text:0000000000004300 set_char_quoting proc near
.text:0000000000004300 ; __unwind {
.text:0000000000004300                 lea     rax, default_quoting_options
.text:0000000000004307                 test    rdi, rdi
.text:000000000000430A                 mov     ecx, esi
.text:000000000000430C                 cmovz   rdi, rax
.text:0000000000004310                 mov     eax, esi
.text:0000000000004312                 and     ecx, 1Fh
.text:0000000000004315                 shr     al, 5
.text:0000000000004318                 movzx   eax, al
.text:000000000000431B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004320                 mov     esi, [rdi]
.text:0000000000004322                 mov     eax, esi
.text:0000000000004324                 shr     eax, cl
.text:0000000000004326                 xor     edx, eax
.text:0000000000004328                 and     eax, 1
.text:000000000000432B                 and     edx, 1
.text:000000000000432E                 shl     edx, cl
.text:0000000000004330                 xor     edx, esi
.text:0000000000004332                 mov     [rdi], edx
.text:0000000000004334                 retn
.text:0000000000004334 ; } // starts at 4300
.text:0000000000004334 set_char_quoting endp
.text:0000000000004334
.text:0000000000004334 ; ---------------------------------------------------------------------------
.text:0000000000004335                 align 20h
.text:0000000000004340
.text:0000000000004340 ; =============== S U B R O U T I N E =======================================
.text:0000000000004340
.text:0000000000004340
.text:0000000000004340                 public set_quoting_flags
.text:0000000000004340 set_quoting_flags proc near
.text:0000000000004340 ; __unwind {
.text:0000000000004340                 lea     rax, default_quoting_options
.text:0000000000004347                 test    rdi, rdi
.text:000000000000434A                 cmovz   rdi, rax
.text:000000000000434E                 mov     eax, [rdi+4]
.text:0000000000004351                 mov     [rdi+4], esi
.text:0000000000004354                 retn
.text:0000000000004354 ; } // starts at 4340
.text:0000000000004354 set_quoting_flags endp
.text:0000000000004354
.text:0000000000004354 ; ---------------------------------------------------------------------------
.text:0000000000004355                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360 ; Attributes: info_from_lumina
.text:0000000000004360
.text:0000000000004360 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004360                 public set_custom_quoting
.text:0000000000004360 set_custom_quoting proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 lea     rax, default_quoting_options
.text:0000000000004367                 test    rdi, rdi
.text:000000000000436A                 cmovz   rdi, rax
.text:000000000000436E                 test    rsi, rsi
.text:0000000000004371                 mov     dword ptr [rdi], 0Ah
.text:0000000000004377                 jz      short loc_4387
.text:0000000000004379                 test    rdx, rdx
.text:000000000000437C                 jz      short loc_4387
.text:000000000000437E                 mov     [rdi+28h], rsi
.text:0000000000004382                 mov     [rdi+30h], rdx
.text:0000000000004386                 retn
.text:0000000000004387 ; ---------------------------------------------------------------------------
.text:0000000000004387
.text:0000000000004387 loc_4387:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004387                                         ; set_custom_quoting+1C↑j
.text:0000000000004387                 sub     rsp, 8
.text:000000000000438B                 call    _abort
.text:000000000000438B ; } // starts at 4360
.text:000000000000438B set_custom_quoting endp
.text:000000000000438B
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390 ; Attributes: info_from_lumina
.text:0000000000004390
.text:0000000000004390 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004390                 public quotearg_buffer
.text:0000000000004390 quotearg_buffer proc near
.text:0000000000004390
.text:0000000000004390 var_40          = qword ptr -40h
.text:0000000000004390
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 push    r15
.text:0000000000004392                 push    r14
.text:0000000000004394                 lea     rax, default_quoting_options
.text:000000000000439B                 push    r13
.text:000000000000439D                 push    r12
.text:000000000000439F                 mov     r13, rdi
.text:00000000000043A2                 push    rbp
.text:00000000000043A3                 push    rbx
.text:00000000000043A4                 mov     rbx, r8
.text:00000000000043A7                 mov     r14, rsi
.text:00000000000043AA                 mov     r15, rdx
.text:00000000000043AD                 sub     rsp, 18h
.text:00000000000043B1                 test    r8, r8
.text:00000000000043B4                 cmovz   rbx, rax
.text:00000000000043B8                 mov     [rsp+48h+var_40], rcx
.text:00000000000043BD                 call    ___errno_location
.text:00000000000043C2                 mov     r12d, [rax]
.text:00000000000043C5                 mov     rbp, rax
.text:00000000000043C8                 lea     rax, [rbx+8]
.text:00000000000043CC                 sub     rsp, 8
.text:00000000000043D0                 mov     r9d, [rbx+4]
.text:00000000000043D4                 push    qword ptr [rbx+30h]
.text:00000000000043D7                 mov     r8d, [rbx]
.text:00000000000043DA                 push    qword ptr [rbx+28h]
.text:00000000000043DD                 mov     rdx, r15
.text:00000000000043E0                 push    rax
.text:00000000000043E1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000043E6                 mov     rsi, r14
.text:00000000000043E9                 mov     rdi, r13
.text:00000000000043EC                 call    quotearg_buffer_restyled
.text:00000000000043F1                 mov     [rbp+0], r12d
.text:00000000000043F5                 add     rsp, 38h
.text:00000000000043F9                 pop     rbx
.text:00000000000043FA                 pop     rbp
.text:00000000000043FB                 pop     r12
.text:00000000000043FD                 pop     r13
.text:00000000000043FF                 pop     r14
.text:0000000000004401                 pop     r15
.text:0000000000004403                 retn
.text:0000000000004403 ; } // starts at 4390
.text:0000000000004403 quotearg_buffer endp
.text:0000000000004403
.text:0000000000004403 ; ---------------------------------------------------------------------------
.text:0000000000004404                 align 10h
.text:0000000000004410
.text:0000000000004410 ; =============== S U B R O U T I N E =======================================
.text:0000000000004410
.text:0000000000004410 ; Attributes: info_from_lumina
.text:0000000000004410
.text:0000000000004410 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004410                 public quotearg_alloc_mem
.text:0000000000004410 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004410
.text:0000000000004410 var_5C          = dword ptr -5Ch
.text:0000000000004410 var_58          = qword ptr -58h
.text:0000000000004410 var_50          = qword ptr -50h
.text:0000000000004410 var_48          = qword ptr -48h
.text:0000000000004410 var_40          = qword ptr -40h
.text:0000000000004410
.text:0000000000004410 ; __unwind {
.text:0000000000004410                 push    r15
.text:0000000000004412                 push    r14
.text:0000000000004414                 lea     rax, default_quoting_options
.text:000000000000441B                 push    r13
.text:000000000000441D                 push    r12
.text:000000000000441F                 mov     r12, rdx
.text:0000000000004422                 push    rbp
.text:0000000000004423                 push    rbx
.text:0000000000004424                 mov     rbx, rcx
.text:0000000000004427                 mov     r14, rdi
.text:000000000000442A                 mov     r15, rsi
.text:000000000000442D                 sub     rsp, 38h
.text:0000000000004431                 test    rcx, rcx
.text:0000000000004434                 cmovz   rbx, rax
.text:0000000000004438                 xor     ebp, ebp
.text:000000000000443A                 call    ___errno_location
.text:000000000000443F                 test    r12, r12
.text:0000000000004442                 mov     r13, rax
.text:0000000000004445                 mov     eax, [rax]
.text:0000000000004447                 setz    bpl
.text:000000000000444B                 or      ebp, [rbx+4]
.text:000000000000444E                 lea     r10, [rbx+8]
.text:0000000000004452                 sub     rsp, 8
.text:0000000000004456                 mov     r8d, [rbx]
.text:0000000000004459                 mov     rcx, r15
.text:000000000000445C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004460                 push    qword ptr [rbx+30h]
.text:0000000000004463                 mov     rdx, r14
.text:0000000000004466                 push    qword ptr [rbx+28h]
.text:0000000000004469                 push    r10
.text:000000000000446B                 xor     esi, esi
.text:000000000000446D                 mov     r9d, ebp
.text:0000000000004470                 xor     edi, edi
.text:0000000000004472                 mov     [rsp+88h+var_48], r10
.text:0000000000004477                 call    quotearg_buffer_restyled
.text:000000000000447C                 lea     rsi, [rax+1]
.text:0000000000004480                 mov     [rsp+88h+var_40], rax
.text:0000000000004485                 add     rsp, 20h
.text:0000000000004489                 mov     rdi, rsi
.text:000000000000448C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004491                 call    xmalloc
.text:0000000000004496                 mov     [rsp+68h+var_58], rax
.text:000000000000449B                 sub     rsp, 8
.text:000000000000449F                 push    qword ptr [rbx+30h]
.text:00000000000044A2                 push    qword ptr [rbx+28h]
.text:00000000000044A5                 mov     r10, [rsp+80h+var_48]
.text:00000000000044AA                 mov     r9d, ebp
.text:00000000000044AD                 mov     r8d, [rbx]
.text:00000000000044B0                 mov     rcx, r15
.text:00000000000044B3                 mov     rdx, r14
.text:00000000000044B6                 mov     rdi, rax
.text:00000000000044B9                 push    r10
.text:00000000000044BB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000044C0                 call    quotearg_buffer_restyled
.text:00000000000044C5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000044C9                 add     rsp, 20h
.text:00000000000044CD                 test    r12, r12
.text:00000000000044D0                 mov     [r13+0], eax
.text:00000000000044D4                 jz      short loc_44DF
.text:00000000000044D6                 mov     r11, [rsp+68h+var_40]
.text:00000000000044DB                 mov     [r12], r11
.text:00000000000044DF
.text:00000000000044DF loc_44DF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000044DF                 mov     rax, [rsp+68h+var_58]
.text:00000000000044E4                 add     rsp, 38h
.text:00000000000044E8                 pop     rbx
.text:00000000000044E9                 pop     rbp
.text:00000000000044EA                 pop     r12
.text:00000000000044EC                 pop     r13
.text:00000000000044EE                 pop     r14
.text:00000000000044F0                 pop     r15
.text:00000000000044F2                 retn
.text:00000000000044F2 ; } // starts at 4410
.text:00000000000044F2 quotearg_alloc_mem endp
.text:00000000000044F2
.text:00000000000044F2 ; ---------------------------------------------------------------------------
.text:00000000000044F3                 align 20h
.text:0000000000004500
.text:0000000000004500 ; =============== S U B R O U T I N E =======================================
.text:0000000000004500
.text:0000000000004500
.text:0000000000004500                 public quotearg_alloc
.text:0000000000004500 quotearg_alloc  proc near
.text:0000000000004500 ; __unwind {
.text:0000000000004500                 mov     rcx, rdx
.text:0000000000004503                 xor     edx, edx
.text:0000000000004505                 jmp     quotearg_alloc_mem
.text:0000000000004505 ; } // starts at 4500
.text:0000000000004505 quotearg_alloc  endp
.text:0000000000004505
.text:0000000000004505 ; ---------------------------------------------------------------------------
.text:000000000000450A                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; void __cdecl quotearg_free()
.text:0000000000004510                 public quotearg_free
.text:0000000000004510 quotearg_free   proc near
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 mov     eax, cs:nslots
.text:0000000000004516                 push    r12
.text:0000000000004518                 mov     r12, cs:slotvec
.text:000000000000451F                 push    rbp
.text:0000000000004520                 push    rbx
.text:0000000000004521                 cmp     eax, 1
.text:0000000000004524                 jle     short loc_4551
.text:0000000000004526                 sub     eax, 2
.text:0000000000004529                 lea     rbx, [r12+18h]
.text:000000000000452E                 shl     rax, 4
.text:0000000000004532                 lea     rbp, [r12+rax+28h]
.text:0000000000004537                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004540
.text:0000000000004540 loc_4540:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004540                 mov     rdi, [rbx]      ; ptr
.text:0000000000004543                 add     rbx, 10h
.text:0000000000004547                 call    _free
.text:000000000000454C                 cmp     rbx, rbp
.text:000000000000454F                 jnz     short loc_4540
.text:0000000000004551
.text:0000000000004551 loc_4551:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004551                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004556                 lea     rbx, slot0
.text:000000000000455D                 cmp     rdi, rbx
.text:0000000000004560                 jz      short loc_4579
.text:0000000000004562                 call    _free
.text:0000000000004567                 mov     cs:slotvec0, 100h
.text:0000000000004572                 mov     cs:off_209078, rbx
.text:0000000000004579
.text:0000000000004579 loc_4579:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004579                 lea     rbx, slotvec0
.text:0000000000004580                 cmp     r12, rbx
.text:0000000000004583                 jz      short loc_4594
.text:0000000000004585                 mov     rdi, r12        ; ptr
.text:0000000000004588                 call    _free
.text:000000000000458D                 mov     cs:slotvec, rbx
.text:0000000000004594
.text:0000000000004594 loc_4594:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004594                 pop     rbx
.text:0000000000004595                 mov     cs:nslots, 1
.text:000000000000459F                 pop     rbp
.text:00000000000045A0                 pop     r12
.text:00000000000045A2                 retn
.text:00000000000045A2 ; } // starts at 4510
.text:00000000000045A2 quotearg_free   endp
.text:00000000000045A2
.text:00000000000045A2 ; ---------------------------------------------------------------------------
.text:00000000000045A3                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0
.text:00000000000045B0                 public quotearg_n
.text:00000000000045B0 quotearg_n      proc near
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 lea     rcx, default_quoting_options
.text:00000000000045B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000045BE                 jmp     quotearg_n_options
.text:00000000000045BE ; } // starts at 45B0
.text:00000000000045BE quotearg_n      endp
.text:00000000000045BE
.text:00000000000045BE ; ---------------------------------------------------------------------------
.text:00000000000045C3                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0
.text:00000000000045D0                 public quotearg_n_mem
.text:00000000000045D0 quotearg_n_mem  proc near
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 lea     rcx, default_quoting_options
.text:00000000000045D7                 jmp     quotearg_n_options
.text:00000000000045D7 ; } // starts at 45D0
.text:00000000000045D7 quotearg_n_mem  endp
.text:00000000000045D7
.text:00000000000045D7 ; ---------------------------------------------------------------------------
.text:00000000000045DC                 align 20h
.text:00000000000045E0
.text:00000000000045E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045E0
.text:00000000000045E0
.text:00000000000045E0                 public quotearg
.text:00000000000045E0 quotearg        proc near
.text:00000000000045E0 ; __unwind {
.text:00000000000045E0                 lea     rcx, default_quoting_options
.text:00000000000045E7                 mov     rsi, rdi
.text:00000000000045EA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000045F1                 xor     edi, edi
.text:00000000000045F3                 jmp     quotearg_n_options
.text:00000000000045F3 ; } // starts at 45E0
.text:00000000000045F3 quotearg        endp
.text:00000000000045F3
.text:00000000000045F3 ; ---------------------------------------------------------------------------
.text:00000000000045F8                 align 20h
.text:0000000000004600
.text:0000000000004600 ; =============== S U B R O U T I N E =======================================
.text:0000000000004600
.text:0000000000004600
.text:0000000000004600                 public quotearg_mem
.text:0000000000004600 quotearg_mem    proc near
.text:0000000000004600 ; __unwind {
.text:0000000000004600                 lea     rcx, default_quoting_options
.text:0000000000004607                 mov     rdx, rsi
.text:000000000000460A                 mov     rsi, rdi
.text:000000000000460D                 xor     edi, edi
.text:000000000000460F                 jmp     quotearg_n_options
.text:000000000000460F ; } // starts at 4600
.text:000000000000460F quotearg_mem    endp
.text:000000000000460F
.text:000000000000460F ; ---------------------------------------------------------------------------
.text:0000000000004614                 align 20h
.text:0000000000004620
.text:0000000000004620 ; =============== S U B R O U T I N E =======================================
.text:0000000000004620
.text:0000000000004620 ; Attributes: info_from_lumina
.text:0000000000004620
.text:0000000000004620 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004620                 public quotearg_n_style
.text:0000000000004620 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004620
.text:0000000000004620 var_48          = dword ptr -48h
.text:0000000000004620 var_44          = qword ptr -44h
.text:0000000000004620 var_3C          = qword ptr -3Ch
.text:0000000000004620 var_34          = qword ptr -34h
.text:0000000000004620 var_2C          = qword ptr -2Ch
.text:0000000000004620 var_24          = qword ptr -24h
.text:0000000000004620 var_1C          = qword ptr -1Ch
.text:0000000000004620 var_14          = dword ptr -14h
.text:0000000000004620 var_10          = qword ptr -10h
.text:0000000000004620
.text:0000000000004620 ; __unwind {
.text:0000000000004620                 sub     rsp, 48h
.text:0000000000004624                 mov     rax, rdx
.text:0000000000004627                 mov     rdx, fs:28h
.text:0000000000004630                 mov     [rsp+48h+var_10], rdx
.text:0000000000004635                 xor     edx, edx
.text:0000000000004637                 cmp     esi, 0Ah
.text:000000000000463A                 jz      short loc_46A4
.text:000000000000463C                 mov     [rsp+48h+var_48], esi
.text:000000000000463F                 mov     rcx, rsp
.text:0000000000004642                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004649                 mov     rsi, rax
.text:000000000000464C                 mov     [rsp+48h+var_44], 0
.text:0000000000004655                 mov     [rsp+48h+var_3C], 0
.text:000000000000465E                 mov     [rsp+48h+var_34], 0
.text:0000000000004667                 mov     [rsp+48h+var_2C], 0
.text:0000000000004670                 mov     [rsp+48h+var_24], 0
.text:0000000000004679                 mov     [rsp+48h+var_1C], 0
.text:0000000000004682                 mov     [rsp+48h+var_14], 0
.text:000000000000468A                 call    quotearg_n_options
.text:000000000000468F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004694                 xor     rcx, fs:28h
.text:000000000000469D                 jnz     short loc_46A9
.text:000000000000469F                 add     rsp, 48h
.text:00000000000046A3                 retn
.text:00000000000046A4 ; ---------------------------------------------------------------------------
.text:00000000000046A4
.text:00000000000046A4 loc_46A4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000046A4                 call    _abort
.text:00000000000046A9 ; ---------------------------------------------------------------------------
.text:00000000000046A9
.text:00000000000046A9 loc_46A9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000046A9                 call    ___stack_chk_fail
.text:00000000000046A9 ; } // starts at 4620
.text:00000000000046A9 quotearg_n_style endp
.text:00000000000046A9
.text:00000000000046A9 ; ---------------------------------------------------------------------------
.text:00000000000046AE                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0 ; Attributes: info_from_lumina
.text:00000000000046B0
.text:00000000000046B0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000046B0                 public quotearg_n_style_mem
.text:00000000000046B0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000046B0
.text:00000000000046B0 var_48          = dword ptr -48h
.text:00000000000046B0 var_44          = qword ptr -44h
.text:00000000000046B0 var_3C          = qword ptr -3Ch
.text:00000000000046B0 var_34          = qword ptr -34h
.text:00000000000046B0 var_2C          = qword ptr -2Ch
.text:00000000000046B0 var_24          = qword ptr -24h
.text:00000000000046B0 var_1C          = qword ptr -1Ch
.text:00000000000046B0 var_14          = dword ptr -14h
.text:00000000000046B0 var_10          = qword ptr -10h
.text:00000000000046B0
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 sub     rsp, 48h
.text:00000000000046B4                 mov     rax, rdx
.text:00000000000046B7                 mov     rdx, rcx
.text:00000000000046BA                 mov     rcx, fs:28h
.text:00000000000046C3                 mov     [rsp+48h+var_10], rcx
.text:00000000000046C8                 xor     ecx, ecx
.text:00000000000046CA                 cmp     esi, 0Ah
.text:00000000000046CD                 jz      short loc_4730
.text:00000000000046CF                 mov     [rsp+48h+var_48], esi
.text:00000000000046D2                 mov     rcx, rsp
.text:00000000000046D5                 mov     rsi, rax
.text:00000000000046D8                 mov     [rsp+48h+var_44], 0
.text:00000000000046E1                 mov     [rsp+48h+var_3C], 0
.text:00000000000046EA                 mov     [rsp+48h+var_34], 0
.text:00000000000046F3                 mov     [rsp+48h+var_2C], 0
.text:00000000000046FC                 mov     [rsp+48h+var_24], 0
.text:0000000000004705                 mov     [rsp+48h+var_1C], 0
.text:000000000000470E                 mov     [rsp+48h+var_14], 0
.text:0000000000004716                 call    quotearg_n_options
.text:000000000000471B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004720                 xor     rdx, fs:28h
.text:0000000000004729                 jnz     short loc_4735
.text:000000000000472B                 add     rsp, 48h
.text:000000000000472F                 retn
.text:0000000000004730 ; ---------------------------------------------------------------------------
.text:0000000000004730
.text:0000000000004730 loc_4730:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004730                 call    _abort
.text:0000000000004735 ; ---------------------------------------------------------------------------
.text:0000000000004735
.text:0000000000004735 loc_4735:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004735                 call    ___stack_chk_fail
.text:0000000000004735 ; } // starts at 46B0
.text:0000000000004735 quotearg_n_style_mem endp
.text:0000000000004735
.text:0000000000004735 ; ---------------------------------------------------------------------------
.text:000000000000473A                 align 20h
.text:0000000000004740
.text:0000000000004740 ; =============== S U B R O U T I N E =======================================
.text:0000000000004740
.text:0000000000004740
.text:0000000000004740                 public quotearg_style
.text:0000000000004740 quotearg_style  proc near
.text:0000000000004740 ; __unwind {
.text:0000000000004740                 mov     rdx, rsi
.text:0000000000004743                 mov     esi, edi
.text:0000000000004745                 xor     edi, edi
.text:0000000000004747                 jmp     quotearg_n_style
.text:0000000000004747 ; } // starts at 4740
.text:0000000000004747 quotearg_style  endp
.text:0000000000004747
.text:0000000000004747 ; ---------------------------------------------------------------------------
.text:000000000000474C                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750
.text:0000000000004750                 public quotearg_style_mem
.text:0000000000004750 quotearg_style_mem proc near
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 mov     rcx, rdx
.text:0000000000004753                 mov     rdx, rsi
.text:0000000000004756                 mov     esi, edi
.text:0000000000004758                 xor     edi, edi
.text:000000000000475A                 jmp     quotearg_n_style_mem
.text:000000000000475A ; } // starts at 4750
.text:000000000000475A quotearg_style_mem endp
.text:000000000000475A
.text:000000000000475A ; ---------------------------------------------------------------------------
.text:000000000000475F                 align 20h
.text:0000000000004760
.text:0000000000004760 ; =============== S U B R O U T I N E =======================================
.text:0000000000004760
.text:0000000000004760 ; Attributes: info_from_lumina
.text:0000000000004760
.text:0000000000004760 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004760                 public quotearg_char_mem
.text:0000000000004760 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004760                                         ; quotearg_colon+C↓j ...
.text:0000000000004760
.text:0000000000004760 var_48          = xmmword ptr -48h
.text:0000000000004760 var_38          = xmmword ptr -38h
.text:0000000000004760 var_28          = xmmword ptr -28h
.text:0000000000004760 var_18          = qword ptr -18h
.text:0000000000004760 var_10          = qword ptr -10h
.text:0000000000004760
.text:0000000000004760 ; __unwind {
.text:0000000000004760                 sub     rsp, 48h
.text:0000000000004764                 mov     ecx, edx
.text:0000000000004766                 mov     rax, fs:28h
.text:000000000000476F                 mov     [rsp+48h+var_10], rax
.text:0000000000004774                 xor     eax, eax
.text:0000000000004776                 mov     rax, cs:qword_209230
.text:000000000000477D                 mov     r8, rsp
.text:0000000000004780                 and     ecx, 1Fh
.text:0000000000004783                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000478B                 mov     [rsp+48h+var_18], rax
.text:0000000000004790                 mov     eax, edx
.text:0000000000004792                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004796                 shr     al, 5
.text:0000000000004799                 movzx   eax, al
.text:000000000000479C                 lea     r9, [r8+rax*4+8]
.text:00000000000047A1                 movdqa  xmm0, cs:xmmword_209210
.text:00000000000047A9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000047AE                 movdqa  xmm0, cs:xmmword_209220
.text:00000000000047B6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000047BB                 mov     edx, [r9]
.text:00000000000047BE                 mov     eax, edx
.text:00000000000047C0                 shr     eax, cl
.text:00000000000047C2                 not     eax
.text:00000000000047C4                 and     eax, 1
.text:00000000000047C7                 shl     eax, cl
.text:00000000000047C9                 mov     rcx, r8
.text:00000000000047CC                 xor     eax, edx
.text:00000000000047CE                 mov     rdx, rsi
.text:00000000000047D1                 mov     rsi, rdi
.text:00000000000047D4                 mov     [r9], eax
.text:00000000000047D7                 xor     edi, edi
.text:00000000000047D9                 call    quotearg_n_options
.text:00000000000047DE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000047E3                 xor     rsi, fs:28h
.text:00000000000047EC                 jnz     short loc_47F3
.text:00000000000047EE                 add     rsp, 48h
.text:00000000000047F2                 retn
.text:00000000000047F3 ; ---------------------------------------------------------------------------
.text:00000000000047F3
.text:00000000000047F3 loc_47F3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000047F3                 call    ___stack_chk_fail
.text:00000000000047F3 ; } // starts at 4760
.text:00000000000047F3 quotearg_char_mem endp
.text:00000000000047F3
.text:00000000000047F3 ; ---------------------------------------------------------------------------
.text:00000000000047F8                 align 20h
.text:0000000000004800
.text:0000000000004800 ; =============== S U B R O U T I N E =======================================
.text:0000000000004800
.text:0000000000004800
.text:0000000000004800                 public quotearg_char
.text:0000000000004800 quotearg_char   proc near
.text:0000000000004800 ; __unwind {
.text:0000000000004800                 movsx   edx, sil
.text:0000000000004804                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000480B                 jmp     quotearg_char_mem
.text:000000000000480B ; } // starts at 4800
.text:000000000000480B quotearg_char   endp
.text:000000000000480B
.text:0000000000004810
.text:0000000000004810 ; =============== S U B R O U T I N E =======================================
.text:0000000000004810
.text:0000000000004810
.text:0000000000004810                 public quotearg_colon
.text:0000000000004810 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004810 ; __unwind {
.text:0000000000004810                 mov     edx, 3Ah ; ':'
.text:0000000000004815                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000481C                 jmp     quotearg_char_mem
.text:000000000000481C ; } // starts at 4810
.text:000000000000481C quotearg_colon  endp
.text:000000000000481C
.text:000000000000481C ; ---------------------------------------------------------------------------
.text:0000000000004821                 align 10h
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830
.text:0000000000004830                 public quotearg_colon_mem
.text:0000000000004830 quotearg_colon_mem proc near
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 mov     edx, 3Ah ; ':'
.text:0000000000004835                 jmp     quotearg_char_mem
.text:0000000000004835 ; } // starts at 4830
.text:0000000000004835 quotearg_colon_mem endp
.text:0000000000004835
.text:0000000000004835 ; ---------------------------------------------------------------------------
.text:000000000000483A                 align 20h
.text:0000000000004840
.text:0000000000004840 ; =============== S U B R O U T I N E =======================================
.text:0000000000004840
.text:0000000000004840 ; Attributes: info_from_lumina
.text:0000000000004840
.text:0000000000004840 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004840                 public quotearg_n_style_colon
.text:0000000000004840 quotearg_n_style_colon proc near        ; CODE XREF: main+1AA↑p
.text:0000000000004840                                         ; main+6A4↑p
.text:0000000000004840
.text:0000000000004840 var_48          = dword ptr -48h
.text:0000000000004840 var_44          = qword ptr -44h
.text:0000000000004840 var_3C          = qword ptr -3Ch
.text:0000000000004840 var_34          = qword ptr -34h
.text:0000000000004840 var_2C          = qword ptr -2Ch
.text:0000000000004840 var_24          = qword ptr -24h
.text:0000000000004840 var_1C          = qword ptr -1Ch
.text:0000000000004840 var_14          = dword ptr -14h
.text:0000000000004840 var_10          = qword ptr -10h
.text:0000000000004840
.text:0000000000004840 ; __unwind {
.text:0000000000004840                 sub     rsp, 48h
.text:0000000000004844                 mov     rax, rdx
.text:0000000000004847                 mov     rdx, fs:28h
.text:0000000000004850                 mov     [rsp+48h+var_10], rdx
.text:0000000000004855                 xor     edx, edx
.text:0000000000004857                 cmp     esi, 0Ah
.text:000000000000485A                 jz      short loc_48C4
.text:000000000000485C                 mov     [rsp+48h+var_48], esi
.text:000000000000485F                 mov     rcx, rsp
.text:0000000000004862                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004869                 mov     rsi, rax
.text:000000000000486C                 mov     [rsp+48h+var_44], 0
.text:0000000000004875                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000487E                 mov     [rsp+48h+var_34], 0
.text:0000000000004887                 mov     [rsp+48h+var_2C], 0
.text:0000000000004890                 mov     [rsp+48h+var_24], 0
.text:0000000000004899                 mov     [rsp+48h+var_1C], 0
.text:00000000000048A2                 mov     [rsp+48h+var_14], 0
.text:00000000000048AA                 call    quotearg_n_options
.text:00000000000048AF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000048B4                 xor     rcx, fs:28h
.text:00000000000048BD                 jnz     short loc_48C9
.text:00000000000048BF                 add     rsp, 48h
.text:00000000000048C3                 retn
.text:00000000000048C4 ; ---------------------------------------------------------------------------
.text:00000000000048C4
.text:00000000000048C4 loc_48C4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000048C4                 call    _abort
.text:00000000000048C9 ; ---------------------------------------------------------------------------
.text:00000000000048C9
.text:00000000000048C9 loc_48C9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000048C9                 call    ___stack_chk_fail
.text:00000000000048C9 ; } // starts at 4840
.text:00000000000048C9 quotearg_n_style_colon endp
.text:00000000000048C9
.text:00000000000048C9 ; ---------------------------------------------------------------------------
.text:00000000000048CE                 align 10h
.text:00000000000048D0
.text:00000000000048D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048D0
.text:00000000000048D0 ; Attributes: info_from_lumina
.text:00000000000048D0
.text:00000000000048D0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000048D0                 public quotearg_n_custom_mem
.text:00000000000048D0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000048D0                                         ; quotearg_custom+12↓j ...
.text:00000000000048D0
.text:00000000000048D0 var_48          = xmmword ptr -48h
.text:00000000000048D0 var_38          = xmmword ptr -38h
.text:00000000000048D0 var_28          = xmmword ptr -28h
.text:00000000000048D0 var_18          = qword ptr -18h
.text:00000000000048D0 var_10          = qword ptr -10h
.text:00000000000048D0
.text:00000000000048D0 ; __unwind {
.text:00000000000048D0                 sub     rsp, 48h
.text:00000000000048D4                 mov     r9, rcx
.text:00000000000048D7                 mov     rcx, cs:qword_209230
.text:00000000000048DE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000048E6                 mov     rax, fs:28h
.text:00000000000048EF                 mov     [rsp+48h+var_10], rax
.text:00000000000048F4                 xor     eax, eax
.text:00000000000048F6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000048FA                 test    rsi, rsi
.text:00000000000048FD                 mov     [rsp+48h+var_18], rcx
.text:0000000000004902                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004909                 movdqa  xmm0, cs:xmmword_209210
.text:0000000000004911                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004916                 movdqa  xmm0, cs:xmmword_209220
.text:000000000000491E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004923                 jz      short loc_4957
.text:0000000000004925                 test    rdx, rdx
.text:0000000000004928                 jz      short loc_4957
.text:000000000000492A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000492F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004934                 mov     rcx, rsp
.text:0000000000004937                 mov     rdx, r8
.text:000000000000493A                 mov     rsi, r9
.text:000000000000493D                 call    quotearg_n_options
.text:0000000000004942                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004947                 xor     rdi, fs:28h
.text:0000000000004950                 jnz     short loc_495C
.text:0000000000004952                 add     rsp, 48h
.text:0000000000004956                 retn
.text:0000000000004957 ; ---------------------------------------------------------------------------
.text:0000000000004957
.text:0000000000004957 loc_4957:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004957                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004957                 call    _abort
.text:000000000000495C ; ---------------------------------------------------------------------------
.text:000000000000495C
.text:000000000000495C loc_495C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000495C                 call    ___stack_chk_fail
.text:000000000000495C ; } // starts at 48D0
.text:000000000000495C quotearg_n_custom_mem endp
.text:000000000000495C
.text:000000000000495C ; ---------------------------------------------------------------------------
.text:0000000000004961                 align 10h
.text:0000000000004970
.text:0000000000004970 ; =============== S U B R O U T I N E =======================================
.text:0000000000004970
.text:0000000000004970
.text:0000000000004970                 public quotearg_n_custom
.text:0000000000004970 quotearg_n_custom proc near
.text:0000000000004970 ; __unwind {
.text:0000000000004970                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004977                 jmp     quotearg_n_custom_mem
.text:0000000000004977 ; } // starts at 4970
.text:0000000000004977 quotearg_n_custom endp
.text:0000000000004977
.text:0000000000004977 ; ---------------------------------------------------------------------------
.text:000000000000497C                 align 20h
.text:0000000000004980
.text:0000000000004980 ; =============== S U B R O U T I N E =======================================
.text:0000000000004980
.text:0000000000004980
.text:0000000000004980                 public quotearg_custom
.text:0000000000004980 quotearg_custom proc near
.text:0000000000004980 ; __unwind {
.text:0000000000004980                 mov     rcx, rdx
.text:0000000000004983                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000498A                 mov     rdx, rsi
.text:000000000000498D                 mov     rsi, rdi
.text:0000000000004990                 xor     edi, edi
.text:0000000000004992                 jmp     quotearg_n_custom_mem
.text:0000000000004992 ; } // starts at 4980
.text:0000000000004992 quotearg_custom endp
.text:0000000000004992
.text:0000000000004992 ; ---------------------------------------------------------------------------
.text:0000000000004997                 align 20h
.text:00000000000049A0
.text:00000000000049A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049A0
.text:00000000000049A0
.text:00000000000049A0                 public quotearg_custom_mem
.text:00000000000049A0 quotearg_custom_mem proc near
.text:00000000000049A0 ; __unwind {
.text:00000000000049A0                 mov     r8, rcx
.text:00000000000049A3                 mov     rcx, rdx
.text:00000000000049A6                 mov     rdx, rsi
.text:00000000000049A9                 mov     rsi, rdi
.text:00000000000049AC                 xor     edi, edi
.text:00000000000049AE                 jmp     quotearg_n_custom_mem
.text:00000000000049AE ; } // starts at 49A0
.text:00000000000049AE quotearg_custom_mem endp
.text:00000000000049AE
.text:00000000000049AE ; ---------------------------------------------------------------------------
.text:00000000000049B3                 align 20h
.text:00000000000049C0
.text:00000000000049C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049C0
.text:00000000000049C0
.text:00000000000049C0                 public quote_n_mem
.text:00000000000049C0 quote_n_mem     proc near
.text:00000000000049C0 ; __unwind {
.text:00000000000049C0                 lea     rcx, quote_quoting_options
.text:00000000000049C7                 jmp     quotearg_n_options
.text:00000000000049C7 ; } // starts at 49C0
.text:00000000000049C7 quote_n_mem     endp
.text:00000000000049C7
.text:00000000000049C7 ; ---------------------------------------------------------------------------
.text:00000000000049CC                 align 10h
.text:00000000000049D0
.text:00000000000049D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049D0
.text:00000000000049D0
.text:00000000000049D0                 public quote_mem
.text:00000000000049D0 quote_mem       proc near
.text:00000000000049D0 ; __unwind {
.text:00000000000049D0                 lea     rcx, quote_quoting_options
.text:00000000000049D7                 mov     rdx, rsi
.text:00000000000049DA                 mov     rsi, rdi
.text:00000000000049DD                 xor     edi, edi
.text:00000000000049DF                 jmp     quotearg_n_options
.text:00000000000049DF ; } // starts at 49D0
.text:00000000000049DF quote_mem       endp
.text:00000000000049DF
.text:00000000000049DF ; ---------------------------------------------------------------------------
.text:00000000000049E4                 align 10h
.text:00000000000049F0
.text:00000000000049F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049F0
.text:00000000000049F0
.text:00000000000049F0                 public quote_n
.text:00000000000049F0 quote_n         proc near
.text:00000000000049F0 ; __unwind {
.text:00000000000049F0                 lea     rcx, quote_quoting_options
.text:00000000000049F7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000049FE                 jmp     quotearg_n_options
.text:00000000000049FE ; } // starts at 49F0
.text:00000000000049FE quote_n         endp
.text:00000000000049FE
.text:00000000000049FE ; ---------------------------------------------------------------------------
.text:0000000000004A03                 align 10h
.text:0000000000004A10
.text:0000000000004A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A10
.text:0000000000004A10
.text:0000000000004A10                 public quote
.text:0000000000004A10 quote           proc near               ; CODE XREF: main+781↑p
.text:0000000000004A10                                         ; xnumtoumax+6D↓p
.text:0000000000004A10 ; __unwind {
.text:0000000000004A10                 lea     rcx, quote_quoting_options
.text:0000000000004A17                 mov     rsi, rdi
.text:0000000000004A1A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A21                 xor     edi, edi
.text:0000000000004A23                 jmp     quotearg_n_options
.text:0000000000004A23 ; } // starts at 4A10
.text:0000000000004A23 quote           endp
.text:0000000000004A23
.text:0000000000004A23 ; ---------------------------------------------------------------------------
.text:0000000000004A28                 align 10h
.text:0000000000004A30
.text:0000000000004A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A30
.text:0000000000004A30
.text:0000000000004A30 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004A30                 public version_etc_arn
.text:0000000000004A30 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_4E6B↓j
.text:0000000000004A30                                         ; version_etc_va:loc_4EBB↓p ...
.text:0000000000004A30
.text:0000000000004A30 var_58          = qword ptr -58h
.text:0000000000004A30 var_50          = qword ptr -50h
.text:0000000000004A30 var_48          = qword ptr -48h
.text:0000000000004A30 var_40          = qword ptr -40h
.text:0000000000004A30
.text:0000000000004A30 ; __unwind {
.text:0000000000004A30                 push    r15
.text:0000000000004A32                 push    r14
.text:0000000000004A34                 push    r13
.text:0000000000004A36                 push    r12
.text:0000000000004A38                 mov     r12, r9
.text:0000000000004A3B                 push    rbp
.text:0000000000004A3C                 push    rbx
.text:0000000000004A3D                 mov     rbp, rdi
.text:0000000000004A40                 mov     rbx, r8
.text:0000000000004A43                 sub     rsp, 28h
.text:0000000000004A47                 test    rsi, rsi
.text:0000000000004A4A                 jz      loc_4B68
.text:0000000000004A50                 mov     r8, rdx
.text:0000000000004A53                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004A5A                 mov     r9, rcx
.text:0000000000004A5D                 xor     eax, eax
.text:0000000000004A5F                 mov     rcx, rsi
.text:0000000000004A62                 mov     esi, 1
.text:0000000000004A67                 call    ___fprintf_chk
.text:0000000000004A6C
.text:0000000000004A6C loc_4A6C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004A6C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004A73                 xor     edi, edi        ; domainname
.text:0000000000004A75                 mov     edx, 5          ; category
.text:0000000000004A7A                 call    _dcgettext
.text:0000000000004A7F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004A86                 mov     rcx, rax
.text:0000000000004A89                 mov     r8d, 7E3h
.text:0000000000004A8F                 mov     esi, 1
.text:0000000000004A94                 mov     rdi, rbp
.text:0000000000004A97                 xor     eax, eax
.text:0000000000004A99                 call    ___fprintf_chk
.text:0000000000004A9E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004AA5                 xor     edi, edi        ; domainname
.text:0000000000004AA7                 mov     edx, 5          ; category
.text:0000000000004AAC                 call    _dcgettext
.text:0000000000004AB1                 mov     rsi, rbp        ; stream
.text:0000000000004AB4                 mov     rdi, rax        ; s
.text:0000000000004AB7                 call    _fputs_unlocked
.text:0000000000004ABC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004AC0                 ja      def_4AD4        ; jumptable 0000000000004AD4 default case
.text:0000000000004AC6                 lea     rdx, jpt_4AD4
.text:0000000000004ACD                 movsxd  rax, ds:(jpt_4AD4 - 6AA4h)[rdx+r12*4]
.text:0000000000004AD1                 add     rax, rdx
.text:0000000000004AD4                 jmp     rax             ; switch jump
.text:0000000000004AD4 ; ---------------------------------------------------------------------------
.text:0000000000004AD6                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 loc_4AE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004AE0                                         ; DATA XREF: .rodata:jpt_4AD4↓o
.text:0000000000004AE0                 mov     r9, [rbx+38h]   ; jumptable 0000000000004AD4 case 8
.text:0000000000004AE4                 mov     rax, [rbx+10h]
.text:0000000000004AE8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004AEF                 mov     r8, [rbx+8]
.text:0000000000004AF3                 mov     edx, 5          ; category
.text:0000000000004AF8                 xor     edi, edi        ; domainname
.text:0000000000004AFA                 mov     r13, [rbx+30h]
.text:0000000000004AFE                 mov     r12, [rbx+28h]
.text:0000000000004B02                 mov     [rsp+58h+var_48], r9
.text:0000000000004B07                 mov     r15, [rbx+20h]
.text:0000000000004B0B                 mov     r14, [rbx+18h]
.text:0000000000004B0F                 mov     [rsp+58h+var_58], rax
.text:0000000000004B13                 mov     [rsp+58h+var_50], r8
.text:0000000000004B18                 mov     rbx, [rbx]
.text:0000000000004B1B                 call    _dcgettext
.text:0000000000004B20                 sub     rsp, 8
.text:0000000000004B24
.text:0000000000004B24 loc_4B24:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004B24                 mov     r9, [rsp+60h+var_48]
.text:0000000000004B29                 mov     rdx, rax
.text:0000000000004B2C                 mov     rcx, rbx
.text:0000000000004B2F                 mov     esi, 1
.text:0000000000004B34                 mov     rdi, rbp
.text:0000000000004B37                 xor     eax, eax
.text:0000000000004B39                 push    r9
.text:0000000000004B3B                 push    r13
.text:0000000000004B3D                 push    r12
.text:0000000000004B3F                 push    r15
.text:0000000000004B41                 push    r14
.text:0000000000004B43                 mov     r9, [rsp+88h+var_58]
.text:0000000000004B48                 mov     r8, [rsp+88h+var_50]
.text:0000000000004B4D                 call    ___fprintf_chk
.text:0000000000004B52                 add     rsp, 30h
.text:0000000000004B56
.text:0000000000004B56 loc_4B56:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004B56                                         ; DATA XREF: .rodata:jpt_4AD4↓o
.text:0000000000004B56                 add     rsp, 28h        ; jumptable 0000000000004AD4 case 0
.text:0000000000004B5A                 pop     rbx
.text:0000000000004B5B                 pop     rbp
.text:0000000000004B5C                 pop     r12
.text:0000000000004B5E                 pop     r13
.text:0000000000004B60                 pop     r14
.text:0000000000004B62                 pop     r15
.text:0000000000004B64                 retn
.text:0000000000004B64 ; ---------------------------------------------------------------------------
.text:0000000000004B65                 align 8
.text:0000000000004B68
.text:0000000000004B68 loc_4B68:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004B68                 mov     r8, rcx
.text:0000000000004B6B                 mov     rcx, rdx
.text:0000000000004B6E                 lea     rdx, aSS        ; "%s %s\n"
.text:0000000000004B75                 mov     esi, 1
.text:0000000000004B7A                 xor     eax, eax
.text:0000000000004B7C                 call    ___fprintf_chk
.text:0000000000004B81                 jmp     loc_4A6C
.text:0000000000004B81 ; ---------------------------------------------------------------------------
.text:0000000000004B86                 align 10h
.text:0000000000004B90
.text:0000000000004B90 loc_4B90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004B90                                         ; DATA XREF: .rodata:jpt_4AD4↓o
.text:0000000000004B90                 mov     r10, [rbx+40h]  ; jumptable 0000000000004AD4 case 9
.text:0000000000004B94                 mov     r9, [rbx+38h]
.text:0000000000004B98                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004B9F                 mov     rax, [rbx+10h]
.text:0000000000004BA3                 mov     r8, [rbx+8]
.text:0000000000004BA7                 mov     edx, 5          ; category
.text:0000000000004BAC                 mov     r13, [rbx+30h]
.text:0000000000004BB0                 mov     r12, [rbx+28h]
.text:0000000000004BB4                 mov     r15, [rbx+20h]
.text:0000000000004BB8                 mov     r14, [rbx+18h]
.text:0000000000004BBC                 mov     rbx, [rbx]
.text:0000000000004BBF                 mov     [rsp+58h+var_40], r10
.text:0000000000004BC4                 mov     [rsp+58h+var_48], r9
.text:0000000000004BC9                 mov     [rsp+58h+var_58], rax
.text:0000000000004BCD                 mov     [rsp+58h+var_50], r8
.text:0000000000004BD2
.text:0000000000004BD2 loc_4BD2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004BD2                 xor     edi, edi        ; domainname
.text:0000000000004BD4                 call    _dcgettext
.text:0000000000004BD9                 mov     r10, [rsp+58h+var_40]
.text:0000000000004BDE                 push    r10
.text:0000000000004BE0                 jmp     loc_4B24
.text:0000000000004BE0 ; ---------------------------------------------------------------------------
.text:0000000000004BE5                 align 8
.text:0000000000004BE8
.text:0000000000004BE8 loc_4BE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004BE8                                         ; DATA XREF: .rodata:jpt_4AD4↓o
.text:0000000000004BE8                 mov     rbx, [rbx]      ; jumptable 0000000000004AD4 case 1
.text:0000000000004BEB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004BF2                 mov     edx, 5          ; category
.text:0000000000004BF7                 xor     edi, edi        ; domainname
.text:0000000000004BF9                 call    _dcgettext
.text:0000000000004BFE                 add     rsp, 28h
.text:0000000000004C02                 mov     rcx, rbx
.text:0000000000004C05                 mov     rdi, rbp
.text:0000000000004C08                 pop     rbx
.text:0000000000004C09                 pop     rbp
.text:0000000000004C0A                 pop     r12
.text:0000000000004C0C                 pop     r13
.text:0000000000004C0E                 pop     r14
.text:0000000000004C10                 pop     r15
.text:0000000000004C12                 mov     rdx, rax
.text:0000000000004C15                 mov     esi, 1
.text:0000000000004C1A                 xor     eax, eax
.text:0000000000004C1C                 jmp     ___fprintf_chk
.text:0000000000004C1C ; ---------------------------------------------------------------------------
.text:0000000000004C21                 align 8
.text:0000000000004C28
.text:0000000000004C28 loc_4C28:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C28                                         ; DATA XREF: .rodata:jpt_4AD4↓o
.text:0000000000004C28                 mov     r12, [rbx+8]    ; jumptable 0000000000004AD4 case 2
.text:0000000000004C2C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004C33                 mov     rbx, [rbx]
.text:0000000000004C36                 mov     edx, 5          ; category
.text:0000000000004C3B                 xor     edi, edi        ; domainname
.text:0000000000004C3D                 call    _dcgettext
.text:0000000000004C42                 add     rsp, 28h
.text:0000000000004C46                 mov     r8, r12
.text:0000000000004C49                 mov     rcx, rbx
.text:0000000000004C4C                 mov     rdi, rbp
.text:0000000000004C4F                 mov     rdx, rax
.text:0000000000004C52                 mov     esi, 1
.text:0000000000004C57                 pop     rbx
.text:0000000000004C58                 pop     rbp
.text:0000000000004C59                 pop     r12
.text:0000000000004C5B                 pop     r13
.text:0000000000004C5D                 pop     r14
.text:0000000000004C5F                 pop     r15
.text:0000000000004C61                 xor     eax, eax
.text:0000000000004C63                 jmp     ___fprintf_chk
.text:0000000000004C63 ; ---------------------------------------------------------------------------
.text:0000000000004C68                 align 10h
.text:0000000000004C70
.text:0000000000004C70 loc_4C70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C70                                         ; DATA XREF: .rodata:jpt_4AD4↓o
.text:0000000000004C70                 mov     r13, [rbx+10h]  ; jumptable 0000000000004AD4 case 3
.text:0000000000004C74                 mov     r12, [rbx+8]
.text:0000000000004C78                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004C7F                 mov     rbx, [rbx]
.text:0000000000004C82                 mov     edx, 5          ; category
.text:0000000000004C87                 xor     edi, edi        ; domainname
.text:0000000000004C89                 call    _dcgettext
.text:0000000000004C8E                 add     rsp, 28h
.text:0000000000004C92                 mov     r9, r13
.text:0000000000004C95                 mov     r8, r12
.text:0000000000004C98                 mov     rcx, rbx
.text:0000000000004C9B                 mov     rdi, rbp
.text:0000000000004C9E                 mov     rdx, rax
.text:0000000000004CA1                 pop     rbx
.text:0000000000004CA2                 pop     rbp
.text:0000000000004CA3                 pop     r12
.text:0000000000004CA5                 pop     r13
.text:0000000000004CA7                 pop     r14
.text:0000000000004CA9                 pop     r15
.text:0000000000004CAB                 mov     esi, 1
.text:0000000000004CB0                 xor     eax, eax
.text:0000000000004CB2                 jmp     ___fprintf_chk
.text:0000000000004CB2 ; ---------------------------------------------------------------------------
.text:0000000000004CB7                 align 20h
.text:0000000000004CC0
.text:0000000000004CC0 loc_4CC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004CC0                                         ; DATA XREF: .rodata:jpt_4AD4↓o
.text:0000000000004CC0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004AD4 case 4
.text:0000000000004CC7                 mov     edx, 5          ; category
.text:0000000000004CCC                 xor     edi, edi        ; domainname
.text:0000000000004CCE                 mov     r14, [rbx+18h]
.text:0000000000004CD2                 mov     r13, [rbx+10h]
.text:0000000000004CD6                 mov     r12, [rbx+8]
.text:0000000000004CDA                 mov     rbx, [rbx]
.text:0000000000004CDD                 call    _dcgettext
.text:0000000000004CE2                 sub     rsp, 8
.text:0000000000004CE6
.text:0000000000004CE6 loc_4CE6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004CE6                 push    r14
.text:0000000000004CE8                 mov     rdx, rax
.text:0000000000004CEB                 mov     r9, r13
.text:0000000000004CEE                 mov     r8, r12
.text:0000000000004CF1                 mov     rcx, rbx
.text:0000000000004CF4                 mov     rdi, rbp
.text:0000000000004CF7                 mov     esi, 1
.text:0000000000004CFC                 xor     eax, eax
.text:0000000000004CFE                 call    ___fprintf_chk
.text:0000000000004D03                 pop     rax
.text:0000000000004D04                 pop     rdx
.text:0000000000004D05                 add     rsp, 28h
.text:0000000000004D09                 pop     rbx
.text:0000000000004D0A                 pop     rbp
.text:0000000000004D0B                 pop     r12
.text:0000000000004D0D                 pop     r13
.text:0000000000004D0F                 pop     r14
.text:0000000000004D11                 pop     r15
.text:0000000000004D13                 retn
.text:0000000000004D13 ; ---------------------------------------------------------------------------
.text:0000000000004D14                 align 8
.text:0000000000004D18
.text:0000000000004D18 loc_4D18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D18                                         ; DATA XREF: .rodata:jpt_4AD4↓o
.text:0000000000004D18                 mov     r15, [rbx+20h]  ; jumptable 0000000000004AD4 case 5
.text:0000000000004D1C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004D23                 mov     edx, 5          ; category
.text:0000000000004D28                 xor     edi, edi        ; domainname
.text:0000000000004D2A                 mov     r14, [rbx+18h]
.text:0000000000004D2E                 mov     r13, [rbx+10h]
.text:0000000000004D32                 mov     r12, [rbx+8]
.text:0000000000004D36                 mov     rbx, [rbx]
.text:0000000000004D39                 call    _dcgettext
.text:0000000000004D3E                 push    r15
.text:0000000000004D40                 jmp     short loc_4CE6
.text:0000000000004D40 ; ---------------------------------------------------------------------------
.text:0000000000004D42                 align 8
.text:0000000000004D48
.text:0000000000004D48 loc_4D48:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D48                                         ; DATA XREF: .rodata:jpt_4AD4↓o
.text:0000000000004D48                 mov     r8, [rbx+8]     ; jumptable 0000000000004AD4 case 6
.text:0000000000004D4C                 mov     r12, [rbx+28h]
.text:0000000000004D50                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004D57                 mov     r15, [rbx+20h]
.text:0000000000004D5B                 mov     r14, [rbx+18h]
.text:0000000000004D5F                 mov     edx, 5          ; category
.text:0000000000004D64                 mov     r13, [rbx+10h]
.text:0000000000004D68                 xor     edi, edi        ; domainname
.text:0000000000004D6A                 mov     rbx, [rbx]
.text:0000000000004D6D                 mov     [rsp+58h+var_58], r8
.text:0000000000004D71                 call    _dcgettext
.text:0000000000004D76                 sub     rsp, 8
.text:0000000000004D7A                 mov     r9, r13
.text:0000000000004D7D                 push    r12
.text:0000000000004D7F                 push    r15
.text:0000000000004D81                 push    r14
.text:0000000000004D83
.text:0000000000004D83 loc_4D83:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004D83                 mov     r8, [rsp+78h+var_58]
.text:0000000000004D88                 mov     rcx, rbx
.text:0000000000004D8B                 mov     rdx, rax
.text:0000000000004D8E                 mov     rdi, rbp
.text:0000000000004D91                 mov     esi, 1
.text:0000000000004D96                 xor     eax, eax
.text:0000000000004D98                 call    ___fprintf_chk
.text:0000000000004D9D                 add     rsp, 20h
.text:0000000000004DA1                 add     rsp, 28h
.text:0000000000004DA5                 pop     rbx
.text:0000000000004DA6                 pop     rbp
.text:0000000000004DA7                 pop     r12
.text:0000000000004DA9                 pop     r13
.text:0000000000004DAB                 pop     r14
.text:0000000000004DAD                 pop     r15
.text:0000000000004DAF                 retn
.text:0000000000004DB0 ; ---------------------------------------------------------------------------
.text:0000000000004DB0
.text:0000000000004DB0 loc_4DB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004DB0                                         ; DATA XREF: .rodata:jpt_4AD4↓o
.text:0000000000004DB0                 mov     r9, [rbx+10h]   ; jumptable 0000000000004AD4 case 7
.text:0000000000004DB4                 mov     r13, [rbx+30h]
.text:0000000000004DB8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004DBF                 mov     r12, [rbx+28h]
.text:0000000000004DC3                 mov     r15, [rbx+20h]
.text:0000000000004DC7                 mov     edx, 5          ; category
.text:0000000000004DCC                 mov     r14, [rbx+18h]
.text:0000000000004DD0                 mov     r8, [rbx+8]
.text:0000000000004DD4                 xor     edi, edi        ; domainname
.text:0000000000004DD6                 mov     [rsp+58h+var_50], r9
.text:0000000000004DDB                 mov     rbx, [rbx]
.text:0000000000004DDE                 mov     [rsp+58h+var_58], r8
.text:0000000000004DE2                 call    _dcgettext
.text:0000000000004DE7                 push    r13
.text:0000000000004DE9                 push    r12
.text:0000000000004DEB                 push    r15
.text:0000000000004DED                 push    r14
.text:0000000000004DEF                 mov     r9, [rsp+78h+var_50]
.text:0000000000004DF4                 jmp     short loc_4D83
.text:0000000000004DF4 ; ---------------------------------------------------------------------------
.text:0000000000004DF6                 align 20h
.text:0000000000004E00
.text:0000000000004E00 def_4AD4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004E00                 mov     r10, [rbx+40h]  ; jumptable 0000000000004AD4 default case
.text:0000000000004E04                 mov     r9, [rbx+38h]
.text:0000000000004E08                 mov     edx, 5
.text:0000000000004E0D                 mov     rax, [rbx+10h]
.text:0000000000004E11                 mov     r8, [rbx+8]
.text:0000000000004E15                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004E1C                 mov     r13, [rbx+30h]
.text:0000000000004E20                 mov     r12, [rbx+28h]
.text:0000000000004E24                 mov     r15, [rbx+20h]
.text:0000000000004E28                 mov     r14, [rbx+18h]
.text:0000000000004E2C                 mov     [rsp+58h+var_40], r10
.text:0000000000004E31                 mov     [rsp+58h+var_48], r9
.text:0000000000004E36                 mov     [rsp+58h+var_58], rax
.text:0000000000004E3A                 mov     [rsp+58h+var_50], r8
.text:0000000000004E3F                 mov     rbx, [rbx]
.text:0000000000004E42                 jmp     loc_4BD2
.text:0000000000004E42 ; } // starts at 4A30
.text:0000000000004E42 version_etc_arn endp
.text:0000000000004E42
.text:0000000000004E42 ; ---------------------------------------------------------------------------
.text:0000000000004E47                 align 10h
.text:0000000000004E50
.text:0000000000004E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E50
.text:0000000000004E50 ; Attributes: info_from_lumina
.text:0000000000004E50
.text:0000000000004E50 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004E50                 public version_etc_ar
.text:0000000000004E50 version_etc_ar  proc near
.text:0000000000004E50 ; __unwind {
.text:0000000000004E50                 xor     r9d, r9d
.text:0000000000004E53                 cmp     qword ptr [r8], 0
.text:0000000000004E57                 jz      short loc_4E6B
.text:0000000000004E59                 nop     dword ptr [rax+00000000h]
.text:0000000000004E60
.text:0000000000004E60 loc_4E60:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004E60                 add     r9, 1
.text:0000000000004E64                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004E69                 jnz     short loc_4E60
.text:0000000000004E6B
.text:0000000000004E6B loc_4E6B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000004E6B                 jmp     version_etc_arn
.text:0000000000004E6B ; } // starts at 4E50
.text:0000000000004E6B version_etc_ar  endp
.text:0000000000004E6B
.text:0000000000004E70
.text:0000000000004E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E70
.text:0000000000004E70 ; Attributes: info_from_lumina
.text:0000000000004E70
.text:0000000000004E70 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004E70                 public version_etc_va
.text:0000000000004E70 version_etc_va  proc near
.text:0000000000004E70
.text:0000000000004E70 authtab         = qword ptr -68h
.text:0000000000004E70 var_10          = qword ptr -10h
.text:0000000000004E70
.text:0000000000004E70 ; __unwind {
.text:0000000000004E70                 sub     rsp, 68h
.text:0000000000004E74                 mov     r10, r8
.text:0000000000004E77                 xor     r9d, r9d
.text:0000000000004E7A                 mov     rax, fs:28h
.text:0000000000004E83                 mov     [rsp+68h+var_10], rax
.text:0000000000004E88                 xor     eax, eax
.text:0000000000004E8A                 mov     r8, rsp
.text:0000000000004E8D                 nop     dword ptr [rax]
.text:0000000000004E90
.text:0000000000004E90 loc_4E90:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004E90                 mov     eax, [r10]
.text:0000000000004E93                 cmp     eax, 2Fh ; '/'
.text:0000000000004E96                 ja      short loc_4EDA
.text:0000000000004E98                 mov     r11d, eax
.text:0000000000004E9B                 add     r11, [r10+10h]
.text:0000000000004E9F                 add     eax, 8
.text:0000000000004EA2                 mov     [r10], eax
.text:0000000000004EA5
.text:0000000000004EA5 loc_4EA5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004EA5                 mov     rax, [r11]
.text:0000000000004EA8                 test    rax, rax
.text:0000000000004EAB                 mov     [r8+r9*8], rax
.text:0000000000004EAF                 jz      short loc_4EBB
.text:0000000000004EB1                 add     r9, 1
.text:0000000000004EB5                 cmp     r9, 0Ah
.text:0000000000004EB9                 jnz     short loc_4E90
.text:0000000000004EBB
.text:0000000000004EBB loc_4EBB:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004EBB                 call    version_etc_arn
.text:0000000000004EC0                 mov     rax, [rsp+68h+var_10]
.text:0000000000004EC5                 xor     rax, fs:28h
.text:0000000000004ECE                 jnz     short loc_4ED5
.text:0000000000004ED0                 add     rsp, 68h
.text:0000000000004ED4                 retn
.text:0000000000004ED5 ; ---------------------------------------------------------------------------
.text:0000000000004ED5
.text:0000000000004ED5 loc_4ED5:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004ED5                 call    ___stack_chk_fail
.text:0000000000004EDA ; ---------------------------------------------------------------------------
.text:0000000000004EDA
.text:0000000000004EDA loc_4EDA:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004EDA                 mov     r11, [r10+8]
.text:0000000000004EDE                 lea     rax, [r11+8]
.text:0000000000004EE2                 mov     [r10+8], rax
.text:0000000000004EE6                 jmp     short loc_4EA5
.text:0000000000004EE6 ; } // starts at 4E70
.text:0000000000004EE6 version_etc_va  endp
.text:0000000000004EE6
.text:0000000000004EE6 ; ---------------------------------------------------------------------------
.text:0000000000004EE8                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0 ; Attributes: info_from_lumina
.text:0000000000004EF0
.text:0000000000004EF0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004EF0                 public version_etc
.text:0000000000004EF0 version_etc     proc near               ; CODE XREF: main+143↑p
.text:0000000000004EF0
.text:0000000000004EF0 var_C0          = dword ptr -0C0h
.text:0000000000004EF0 var_B8          = qword ptr -0B8h
.text:0000000000004EF0 var_B0          = qword ptr -0B0h
.text:0000000000004EF0 var_A8          = byte ptr -0A8h
.text:0000000000004EF0 var_50          = qword ptr -50h
.text:0000000000004EF0 var_48          = byte ptr -48h
.text:0000000000004EF0 var_28          = qword ptr -28h
.text:0000000000004EF0 var_20          = qword ptr -20h
.text:0000000000004EF0 arg_0           = byte ptr  8
.text:0000000000004EF0
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 push    rbp
.text:0000000000004EF1                 push    rbx
.text:0000000000004EF2                 mov     r10d, 20h ; ' '
.text:0000000000004EF8                 xor     r11d, r11d
.text:0000000000004EFB                 sub     rsp, 0B8h
.text:0000000000004F02                 mov     rax, fs:28h
.text:0000000000004F0B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004F10                 xor     eax, eax
.text:0000000000004F12                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004F1A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004F22                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000004F2A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000004F2F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004F37                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000004F3F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004F44                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000004F4C                 xor     r9d, r9d
.text:0000000000004F4F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004F54                 mov     rbp, rax
.text:0000000000004F57                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004F60
.text:0000000000004F60 loc_4F60:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004F60                 cmp     r10d, 2Fh ; '/'
.text:0000000000004F64                 ja      short loc_4FBC
.text:0000000000004F66                 mov     eax, r10d
.text:0000000000004F69                 mov     r11d, 1
.text:0000000000004F6F                 add     r10d, 8
.text:0000000000004F73                 add     rax, rbp
.text:0000000000004F76
.text:0000000000004F76 loc_4F76:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004F76                 mov     rax, [rax]
.text:0000000000004F79                 test    rax, rax
.text:0000000000004F7C                 mov     [r8+r9*8], rax
.text:0000000000004F80                 jz      short loc_4F8C
.text:0000000000004F82                 add     r9, 1
.text:0000000000004F86                 cmp     r9, 0Ah
.text:0000000000004F8A                 jnz     short loc_4F60
.text:0000000000004F8C
.text:0000000000004F8C loc_4F8C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000004F8C                 test    r11b, r11b
.text:0000000000004F8F                 jnz     short loc_4FB5
.text:0000000000004F91
.text:0000000000004F91 loc_4F91:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004F91                 call    version_etc_arn
.text:0000000000004F96                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000004F9B                 xor     rax, fs:28h
.text:0000000000004FA4                 jnz     short loc_4FB0
.text:0000000000004FA6                 add     rsp, 0B8h
.text:0000000000004FAD                 pop     rbx
.text:0000000000004FAE                 pop     rbp
.text:0000000000004FAF                 retn
.text:0000000000004FB0 ; ---------------------------------------------------------------------------
.text:0000000000004FB0
.text:0000000000004FB0 loc_4FB0:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004FB0                 call    ___stack_chk_fail
.text:0000000000004FB5 ; ---------------------------------------------------------------------------
.text:0000000000004FB5
.text:0000000000004FB5 loc_4FB5:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004FB5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000004FBA                 jmp     short loc_4F91
.text:0000000000004FBC ; ---------------------------------------------------------------------------
.text:0000000000004FBC
.text:0000000000004FBC loc_4FBC:                               ; CODE XREF: version_etc+74↑j
.text:0000000000004FBC                 mov     rax, rbx
.text:0000000000004FBF                 add     rbx, 8
.text:0000000000004FC3                 jmp     short loc_4F76
.text:0000000000004FC3 ; } // starts at 4EF0
.text:0000000000004FC3 version_etc     endp
.text:0000000000004FC3
.text:0000000000004FC3 ; ---------------------------------------------------------------------------
.text:0000000000004FC5                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FD0
.text:0000000000004FD0 ; Attributes: info_from_lumina
.text:0000000000004FD0
.text:0000000000004FD0 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004FD0                 public emit_bug_reporting_address
.text:0000000000004FD0 emit_bug_reporting_address proc near
.text:0000000000004FD0 ; __unwind {
.text:0000000000004FD0                 push    rbx
.text:0000000000004FD1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004FD8                 mov     edx, 5          ; category
.text:0000000000004FDD                 xor     edi, edi        ; domainname
.text:0000000000004FDF                 call    _dcgettext
.text:0000000000004FE4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004FEB                 mov     rsi, rax
.text:0000000000004FEE                 mov     edi, 1
.text:0000000000004FF3                 xor     eax, eax
.text:0000000000004FF5                 call    ___printf_chk
.text:0000000000004FFA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005001                 mov     edx, 5          ; category
.text:0000000000005006                 xor     edi, edi        ; domainname
.text:0000000000005008                 call    _dcgettext
.text:000000000000500D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005014                 lea     rdx, unk_5C3F
.text:000000000000501B                 mov     rsi, rax
.text:000000000000501E                 mov     edi, 1
.text:0000000000005023                 xor     eax, eax
.text:0000000000005025                 call    ___printf_chk
.text:000000000000502A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005031                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005038                 xor     edi, edi        ; domainname
.text:000000000000503A                 mov     edx, 5          ; category
.text:000000000000503F                 call    _dcgettext
.text:0000000000005044                 mov     rsi, rbx        ; stream
.text:0000000000005047                 mov     rdi, rax        ; s
.text:000000000000504A                 pop     rbx
.text:000000000000504B                 jmp     _fputs_unlocked
.text:000000000000504B ; } // starts at 4FD0
.text:000000000000504B emit_bug_reporting_address endp
.text:000000000000504B
.text:0000000000005050
.text:0000000000005050 ; =============== S U B R O U T I N E =======================================
.text:0000000000005050
.text:0000000000005050
.text:0000000000005050                 public xmalloc
.text:0000000000005050 xmalloc         proc near               ; CODE XREF: main+208↑p
.text:0000000000005050                                         ; main+215↑p ...
.text:0000000000005050 ; __unwind {
.text:0000000000005050                 push    rbx
.text:0000000000005051                 mov     rbx, rdi
.text:0000000000005054                 call    _malloc
.text:0000000000005059                 test    rax, rax
.text:000000000000505C                 jnz     short loc_5063
.text:000000000000505E                 test    rbx, rbx
.text:0000000000005061                 jnz     short loc_5065
.text:0000000000005063
.text:0000000000005063 loc_5063:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005063                 pop     rbx
.text:0000000000005064                 retn
.text:0000000000005065 ; ---------------------------------------------------------------------------
.text:0000000000005065
.text:0000000000005065 loc_5065:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005065                 call    xalloc_die
.text:0000000000005065 ; } // starts at 5050
.text:0000000000005065 xmalloc         endp
.text:0000000000005065
.text:0000000000005065 ; ---------------------------------------------------------------------------
.text:000000000000506A                 align 10h
.text:0000000000005070
.text:0000000000005070 ; =============== S U B R O U T I N E =======================================
.text:0000000000005070
.text:0000000000005070 ; Attributes: info_from_lumina
.text:0000000000005070
.text:0000000000005070 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005070                 public xnmalloc
.text:0000000000005070 xnmalloc        proc near
.text:0000000000005070 ; __unwind {
.text:0000000000005070                 mov     rax, rdi
.text:0000000000005073                 mul     rsi
.text:0000000000005076                 mov     rdi, rax
.text:0000000000005079                 seto    al
.text:000000000000507C                 test    rdi, rdi
.text:000000000000507F                 js      short loc_508B
.text:0000000000005081                 movzx   eax, al
.text:0000000000005084                 test    rax, rax
.text:0000000000005087                 jnz     short loc_508B
.text:0000000000005089                 jmp     short xmalloc
.text:000000000000508B ; ---------------------------------------------------------------------------
.text:000000000000508B
.text:000000000000508B loc_508B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000508B                                         ; xnmalloc+17↑j
.text:000000000000508B                 sub     rsp, 8
.text:000000000000508F                 call    xalloc_die
.text:000000000000508F ; } // starts at 5070
.text:000000000000508F xnmalloc        endp
.text:000000000000508F
.text:000000000000508F ; ---------------------------------------------------------------------------
.text:0000000000005094                 align 20h
.text:00000000000050A0
.text:00000000000050A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050A0
.text:00000000000050A0
.text:00000000000050A0                 public xcharalloc
.text:00000000000050A0 xcharalloc      proc near
.text:00000000000050A0 ; __unwind {
.text:00000000000050A0                 jmp     short xmalloc
.text:00000000000050A0 ; } // starts at 50A0
.text:00000000000050A0 xcharalloc      endp
.text:00000000000050A0
.text:00000000000050A0 ; ---------------------------------------------------------------------------
.text:00000000000050A2                 align 10h
.text:00000000000050B0
.text:00000000000050B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050B0
.text:00000000000050B0 ; Attributes: info_from_lumina
.text:00000000000050B0
.text:00000000000050B0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000050B0                 public xrealloc
.text:00000000000050B0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000050B0                                         ; quotearg_n_options+182↑p ...
.text:00000000000050B0 ; __unwind {
.text:00000000000050B0                 test    rsi, rsi
.text:00000000000050B3                 push    rbx
.text:00000000000050B4                 mov     rbx, rsi
.text:00000000000050B7                 jnz     short loc_50BE
.text:00000000000050B9                 test    rdi, rdi
.text:00000000000050BC                 jnz     short loc_50D8
.text:00000000000050BE
.text:00000000000050BE loc_50BE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000050BE                 mov     rsi, rbx        ; size
.text:00000000000050C1                 call    _realloc
.text:00000000000050C6                 test    rax, rax
.text:00000000000050C9                 jnz     short loc_50D0
.text:00000000000050CB                 test    rbx, rbx
.text:00000000000050CE                 jnz     short loc_50E1
.text:00000000000050D0
.text:00000000000050D0 loc_50D0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000050D0                 pop     rbx
.text:00000000000050D1                 retn
.text:00000000000050D1 ; ---------------------------------------------------------------------------
.text:00000000000050D2                 align 8
.text:00000000000050D8
.text:00000000000050D8 loc_50D8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000050D8                 call    _free
.text:00000000000050DD                 xor     eax, eax
.text:00000000000050DF                 pop     rbx
.text:00000000000050E0                 retn
.text:00000000000050E1 ; ---------------------------------------------------------------------------
.text:00000000000050E1
.text:00000000000050E1 loc_50E1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000050E1                 call    xalloc_die
.text:00000000000050E1 ; } // starts at 50B0
.text:00000000000050E1 xrealloc        endp
.text:00000000000050E1
.text:00000000000050E1 ; ---------------------------------------------------------------------------
.text:00000000000050E6                 align 10h
.text:00000000000050F0
.text:00000000000050F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050F0
.text:00000000000050F0 ; Attributes: info_from_lumina
.text:00000000000050F0
.text:00000000000050F0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000050F0                 public xnrealloc
.text:00000000000050F0 xnrealloc       proc near
.text:00000000000050F0 ; __unwind {
.text:00000000000050F0                 mov     rax, rsi
.text:00000000000050F3                 mul     rdx
.text:00000000000050F6                 mov     rsi, rax
.text:00000000000050F9                 seto    al
.text:00000000000050FC                 test    rsi, rsi
.text:00000000000050FF                 js      short loc_510B
.text:0000000000005101                 movzx   eax, al
.text:0000000000005104                 test    rax, rax
.text:0000000000005107                 jnz     short loc_510B
.text:0000000000005109                 jmp     short xrealloc
.text:000000000000510B ; ---------------------------------------------------------------------------
.text:000000000000510B
.text:000000000000510B loc_510B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000510B                                         ; xnrealloc+17↑j
.text:000000000000510B                 sub     rsp, 8
.text:000000000000510F                 call    xalloc_die
.text:000000000000510F ; } // starts at 50F0
.text:000000000000510F xnrealloc       endp
.text:000000000000510F
.text:000000000000510F ; ---------------------------------------------------------------------------
.text:0000000000005114                 align 20h
.text:0000000000005120
.text:0000000000005120 ; =============== S U B R O U T I N E =======================================
.text:0000000000005120
.text:0000000000005120 ; Attributes: info_from_lumina
.text:0000000000005120
.text:0000000000005120 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005120                 public x2nrealloc
.text:0000000000005120 x2nrealloc      proc near
.text:0000000000005120 ; __unwind {
.text:0000000000005120                 test    rdi, rdi
.text:0000000000005123                 mov     r9, rdx
.text:0000000000005126                 mov     rcx, [rsi]
.text:0000000000005129                 jz      short loc_5160
.text:000000000000512B                 xor     edx, edx
.text:000000000000512D                 mov     rax, 5555555555555554h
.text:0000000000005137                 div     r9
.text:000000000000513A                 cmp     rax, rcx
.text:000000000000513D                 jbe     short loc_517B
.text:000000000000513F                 mov     rax, rcx
.text:0000000000005142                 shr     rax, 1
.text:0000000000005145                 lea     rcx, [rax+rcx+1]
.text:000000000000514A
.text:000000000000514A loc_514A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000514A                 mov     [rsi], rcx
.text:000000000000514D                 imul    rcx, r9
.text:0000000000005151                 mov     rsi, rcx
.text:0000000000005154                 jmp     xrealloc
.text:0000000000005154 ; ---------------------------------------------------------------------------
.text:0000000000005159                 align 20h
.text:0000000000005160
.text:0000000000005160 loc_5160:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005160                 test    rcx, rcx
.text:0000000000005163                 jz      short loc_5188
.text:0000000000005165
.text:0000000000005165 loc_5165:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005165                 mov     rax, rcx
.text:0000000000005168                 mul     r9
.text:000000000000516B                 seto    dl
.text:000000000000516E                 test    rax, rax
.text:0000000000005171                 movzx   edx, dl
.text:0000000000005174                 js      short loc_517B
.text:0000000000005176                 test    rdx, rdx
.text:0000000000005179                 jz      short loc_514A
.text:000000000000517B
.text:000000000000517B loc_517B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000517B                                         ; x2nrealloc+54↑j
.text:000000000000517B                 sub     rsp, 8
.text:000000000000517F                 call    xalloc_die
.text:000000000000517F ; ---------------------------------------------------------------------------
.text:0000000000005184                 align 8
.text:0000000000005188
.text:0000000000005188 loc_5188:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005188                 xor     edx, edx
.text:000000000000518A                 mov     eax, 80h
.text:000000000000518F                 xor     r8d, r8d
.text:0000000000005192                 div     r9
.text:0000000000005195                 test    rax, rax
.text:0000000000005198                 setz    r8b
.text:000000000000519C                 lea     rcx, [r8+rax]
.text:00000000000051A0                 jmp     short loc_5165
.text:00000000000051A0 ; } // starts at 5120
.text:00000000000051A0 x2nrealloc      endp
.text:00000000000051A0
.text:00000000000051A0 ; ---------------------------------------------------------------------------
.text:00000000000051A2                 align 10h
.text:00000000000051B0
.text:00000000000051B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051B0
.text:00000000000051B0 ; Attributes: info_from_lumina
.text:00000000000051B0
.text:00000000000051B0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000051B0                 public x2realloc
.text:00000000000051B0 x2realloc       proc near
.text:00000000000051B0 ; __unwind {
.text:00000000000051B0                 test    rdi, rdi
.text:00000000000051B3                 mov     rax, [rsi]
.text:00000000000051B6                 jz      short loc_51E0
.text:00000000000051B8                 mov     rdx, 5555555555555553h
.text:00000000000051C2                 cmp     rax, rdx
.text:00000000000051C5                 ja      short loc_51F1
.text:00000000000051C7                 mov     rdx, rax
.text:00000000000051CA                 shr     rdx, 1
.text:00000000000051CD                 lea     rax, [rdx+rax+1]
.text:00000000000051D2
.text:00000000000051D2 loc_51D2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000051D2                 mov     [rsi], rax
.text:00000000000051D5                 mov     rsi, rax
.text:00000000000051D8                 jmp     xrealloc
.text:00000000000051D8 ; ---------------------------------------------------------------------------
.text:00000000000051DD                 align 20h
.text:00000000000051E0
.text:00000000000051E0 loc_51E0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000051E0                 test    rax, rax
.text:00000000000051E3                 mov     edx, 80h
.text:00000000000051E8                 cmovz   rax, rdx
.text:00000000000051EC                 test    rax, rax
.text:00000000000051EF                 jns     short loc_51D2
.text:00000000000051F1
.text:00000000000051F1 loc_51F1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000051F1                 sub     rsp, 8
.text:00000000000051F5                 call    xalloc_die
.text:00000000000051F5 ; } // starts at 51B0
.text:00000000000051F5 x2realloc       endp
.text:00000000000051F5
.text:00000000000051F5 ; ---------------------------------------------------------------------------
.text:00000000000051FA                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200
.text:0000000000005200 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005200                 public xzalloc
.text:0000000000005200 xzalloc         proc near
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 push    rbx
.text:0000000000005201                 mov     rbx, rdi
.text:0000000000005204                 call    xmalloc
.text:0000000000005209                 mov     rdx, rbx        ; n
.text:000000000000520C                 xor     esi, esi        ; c
.text:000000000000520E                 mov     rdi, rax        ; s
.text:0000000000005211                 pop     rbx
.text:0000000000005212                 jmp     _memset
.text:0000000000005212 ; } // starts at 5200
.text:0000000000005212 xzalloc         endp
.text:0000000000005212
.text:0000000000005212 ; ---------------------------------------------------------------------------
.text:0000000000005217                 align 20h
.text:0000000000005220
.text:0000000000005220 ; =============== S U B R O U T I N E =======================================
.text:0000000000005220
.text:0000000000005220 ; Attributes: info_from_lumina
.text:0000000000005220
.text:0000000000005220 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005220                 public xcalloc
.text:0000000000005220 xcalloc         proc near
.text:0000000000005220 ; __unwind {
.text:0000000000005220                 mov     rax, rdi
.text:0000000000005223                 sub     rsp, 8
.text:0000000000005227                 mul     rsi
.text:000000000000522A                 seto    dl
.text:000000000000522D                 test    rax, rax
.text:0000000000005230                 js      short loc_5249
.text:0000000000005232                 movzx   edx, dl
.text:0000000000005235                 test    rdx, rdx
.text:0000000000005238                 jnz     short loc_5249
.text:000000000000523A                 call    _calloc
.text:000000000000523F                 test    rax, rax
.text:0000000000005242                 jz      short loc_5249
.text:0000000000005244                 add     rsp, 8
.text:0000000000005248                 retn
.text:0000000000005249 ; ---------------------------------------------------------------------------
.text:0000000000005249
.text:0000000000005249 loc_5249:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005249                                         ; xcalloc+18↑j ...
.text:0000000000005249                 call    xalloc_die
.text:0000000000005249 ; } // starts at 5220
.text:0000000000005249 xcalloc         endp
.text:0000000000005249
.text:0000000000005249 ; ---------------------------------------------------------------------------
.text:000000000000524E                 align 10h
.text:0000000000005250
.text:0000000000005250 ; =============== S U B R O U T I N E =======================================
.text:0000000000005250
.text:0000000000005250 ; Attributes: info_from_lumina
.text:0000000000005250
.text:0000000000005250 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005250                 public xmemdup
.text:0000000000005250 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005250                                         ; xstrdup+11↓j
.text:0000000000005250 ; __unwind {
.text:0000000000005250                 push    rbp
.text:0000000000005251                 push    rbx
.text:0000000000005252                 mov     rbp, rdi
.text:0000000000005255                 mov     rdi, rsi
.text:0000000000005258                 mov     rbx, rsi
.text:000000000000525B                 sub     rsp, 8
.text:000000000000525F                 call    xmalloc
.text:0000000000005264                 add     rsp, 8
.text:0000000000005268                 mov     rdx, rbx        ; n
.text:000000000000526B                 mov     rsi, rbp        ; src
.text:000000000000526E                 pop     rbx
.text:000000000000526F                 pop     rbp
.text:0000000000005270                 mov     rdi, rax        ; dest
.text:0000000000005273                 jmp     _memcpy
.text:0000000000005273 ; } // starts at 5250
.text:0000000000005273 xmemdup         endp
.text:0000000000005273
.text:0000000000005273 ; ---------------------------------------------------------------------------
.text:0000000000005278                 align 20h
.text:0000000000005280
.text:0000000000005280 ; =============== S U B R O U T I N E =======================================
.text:0000000000005280
.text:0000000000005280
.text:0000000000005280 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005280                 public xstrdup
.text:0000000000005280 xstrdup         proc near
.text:0000000000005280 ; __unwind {
.text:0000000000005280                 push    rbx
.text:0000000000005281                 mov     rbx, rdi
.text:0000000000005284                 call    _strlen
.text:0000000000005289                 mov     rdi, rbx        ; src
.text:000000000000528C                 lea     rsi, [rax+1]    ; n
.text:0000000000005290                 pop     rbx
.text:0000000000005291                 jmp     short xmemdup
.text:0000000000005291 ; } // starts at 5280
.text:0000000000005291 xstrdup         endp
.text:0000000000005291
.text:0000000000005291 ; ---------------------------------------------------------------------------
.text:0000000000005293                 align 20h
.text:00000000000052A0
.text:00000000000052A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052A0
.text:00000000000052A0 ; Attributes: noreturn info_from_lumina
.text:00000000000052A0
.text:00000000000052A0 ; void __cdecl xalloc_die()
.text:00000000000052A0                 public xalloc_die
.text:00000000000052A0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4276↑p
.text:00000000000052A0                                         ; xmalloc:loc_5065↑p ...
.text:00000000000052A0 ; __unwind {
.text:00000000000052A0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000052A7                 sub     rsp, 8
.text:00000000000052AB                 mov     edx, 5          ; category
.text:00000000000052B0                 xor     edi, edi        ; domainname
.text:00000000000052B2                 call    _dcgettext
.text:00000000000052B7                 mov     edi, cs:exit_failure ; status
.text:00000000000052BD                 lea     rdx, format     ; format
.text:00000000000052C4                 mov     rcx, rax
.text:00000000000052C7                 xor     esi, esi        ; errnum
.text:00000000000052C9                 xor     eax, eax
.text:00000000000052CB                 call    _error
.text:00000000000052D0                 call    _abort
.text:00000000000052D0 ; } // starts at 52A0
.text:00000000000052D0 xalloc_die      endp
.text:00000000000052D0
.text:00000000000052D0 ; ---------------------------------------------------------------------------
.text:00000000000052D5                 align 20h
.text:00000000000052E0
.text:00000000000052E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052E0
.text:00000000000052E0 ; Attributes: info_from_lumina
.text:00000000000052E0
.text:00000000000052E0 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:00000000000052E0                 public xnumtoumax
.text:00000000000052E0 xnumtoumax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:00000000000052E0
.text:00000000000052E0 var_48          = qword ptr -48h
.text:00000000000052E0 var_40          = qword ptr -40h
.text:00000000000052E0 arg_0           = dword ptr  8
.text:00000000000052E0
.text:00000000000052E0 ; __unwind {
.text:00000000000052E0                 push    r15
.text:00000000000052E2                 push    r14
.text:00000000000052E4                 mov     r15, rcx
.text:00000000000052E7                 push    r13
.text:00000000000052E9                 push    r12
.text:00000000000052EB                 mov     r14, rdx
.text:00000000000052EE                 push    rbp
.text:00000000000052EF                 push    rbx
.text:00000000000052F0                 mov     edx, esi
.text:00000000000052F2                 xor     esi, esi
.text:00000000000052F4                 mov     r12, rdi
.text:00000000000052F7                 mov     r13, r9
.text:00000000000052FA                 sub     rsp, 18h
.text:00000000000052FE                 mov     rcx, rsp
.text:0000000000005301                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000005305                 mov     rax, fs:28h
.text:000000000000530E                 mov     [rsp+48h+var_40], rax
.text:0000000000005313                 xor     eax, eax
.text:0000000000005315                 call    xstrtoumax
.text:000000000000531A                 test    eax, eax
.text:000000000000531C                 jnz     loc_53B0
.text:0000000000005322                 mov     rbp, [rsp+48h+var_48]
.text:0000000000005326                 cmp     rbp, r14
.text:0000000000005329                 jb      short loc_5330
.text:000000000000532B                 cmp     rbp, r15
.text:000000000000532E                 jbe     short loc_5384
.text:0000000000005330
.text:0000000000005330 loc_5330:                               ; CODE XREF: xnumtoumax+49↑j
.text:0000000000005330                 call    ___errno_location
.text:0000000000005335                 cmp     rbp, 40000000h
.text:000000000000533C                 mov     r14, rax
.text:000000000000533F                 sbb     eax, eax
.text:0000000000005341                 and     eax, 0FFFFFFD7h
.text:0000000000005344                 add     eax, 4Bh ; 'K'
.text:0000000000005347                 mov     [r14], eax
.text:000000000000534A
.text:000000000000534A loc_534A:                               ; CODE XREF: xnumtoumax+E2↓j
.text:000000000000534A                                         ; xnumtoumax+EA↓j ...
.text:000000000000534A                 mov     rdi, r12
.text:000000000000534D                 call    quote
.text:0000000000005352                 mov     esi, [r14]
.text:0000000000005355                 mov     r8, rax
.text:0000000000005358                 mov     eax, 0
.text:000000000000535D                 lea     rdx, aS         ; "%s: "
.text:0000000000005364                 mov     rcx, r13
.text:0000000000005367                 cmp     esi, 16h
.text:000000000000536A                 cmovz   esi, eax        ; errnum
.text:000000000000536D                 test    ebx, ebx
.text:000000000000536F                 mov     eax, 1
.text:0000000000005374                 cmovz   ebx, eax
.text:0000000000005377                 xor     eax, eax
.text:0000000000005379                 mov     edi, ebx        ; status
.text:000000000000537B                 call    _error
.text:0000000000005380                 mov     rbp, [rsp+48h+var_48]
.text:0000000000005384
.text:0000000000005384 loc_5384:                               ; CODE XREF: xnumtoumax+4E↑j
.text:0000000000005384                 mov     rdx, [rsp+48h+var_40]
.text:0000000000005389                 xor     rdx, fs:28h
.text:0000000000005392                 mov     rax, rbp
.text:0000000000005395                 jnz     short loc_53DB
.text:0000000000005397                 add     rsp, 18h
.text:000000000000539B                 pop     rbx
.text:000000000000539C                 pop     rbp
.text:000000000000539D                 pop     r12
.text:000000000000539F                 pop     r13
.text:00000000000053A1                 pop     r14
.text:00000000000053A3                 pop     r15
.text:00000000000053A5                 retn
.text:00000000000053A5 ; ---------------------------------------------------------------------------
.text:00000000000053A6                 align 10h
.text:00000000000053B0
.text:00000000000053B0 loc_53B0:                               ; CODE XREF: xnumtoumax+3C↑j
.text:00000000000053B0                 mov     ebp, eax
.text:00000000000053B2                 call    ___errno_location
.text:00000000000053B7                 cmp     ebp, 1
.text:00000000000053BA                 mov     r14, rax
.text:00000000000053BD                 jz      short loc_53D0
.text:00000000000053BF                 cmp     ebp, 3
.text:00000000000053C2                 jnz     short loc_534A
.text:00000000000053C4                 mov     dword ptr [rax], 0
.text:00000000000053CA                 jmp     loc_534A
.text:00000000000053CA ; ---------------------------------------------------------------------------
.text:00000000000053CF                 align 10h
.text:00000000000053D0
.text:00000000000053D0 loc_53D0:                               ; CODE XREF: xnumtoumax+DD↑j
.text:00000000000053D0                 mov     dword ptr [rax], 4Bh ; 'K'
.text:00000000000053D6                 jmp     loc_534A
.text:00000000000053DB ; ---------------------------------------------------------------------------
.text:00000000000053DB
.text:00000000000053DB loc_53DB:                               ; CODE XREF: xnumtoumax+B5↑j
.text:00000000000053DB                 call    ___stack_chk_fail
.text:00000000000053DB ; } // starts at 52E0
.text:00000000000053DB xnumtoumax      endp
.text:00000000000053DB
.text:00000000000053E0
.text:00000000000053E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053E0
.text:00000000000053E0 ; Attributes: info_from_lumina
.text:00000000000053E0
.text:00000000000053E0 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:00000000000053E0                 public xdectoumax
.text:00000000000053E0 xdectoumax      proc near               ; CODE XREF: main+DE↑p
.text:00000000000053E0 ; __unwind {
.text:00000000000053E0                 sub     rsp, 10h
.text:00000000000053E4                 push    r9
.text:00000000000053E6                 mov     r9, r8
.text:00000000000053E9                 mov     r8, rcx
.text:00000000000053EC                 mov     rcx, rdx
.text:00000000000053EF                 mov     rdx, rsi
.text:00000000000053F2                 mov     esi, 0Ah
.text:00000000000053F7                 call    xnumtoumax
.text:00000000000053FC                 add     rsp, 18h
.text:0000000000005400                 retn
.text:0000000000005400 ; } // starts at 53E0
.text:0000000000005400 xdectoumax      endp
.text:0000000000005400
.text:0000000000005400 ; ---------------------------------------------------------------------------
.text:0000000000005401                 align 10h
.text:0000000000005410
.text:0000000000005410 ; =============== S U B R O U T I N E =======================================
.text:0000000000005410
.text:0000000000005410
.text:0000000000005410 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000005410                 public xstrtoumax
.text:0000000000005410 xstrtoumax      proc near               ; CODE XREF: xnumtoumax+35↑p
.text:0000000000005410
.text:0000000000005410 base            = dword ptr -50h
.text:0000000000005410 endptr          = qword ptr -48h
.text:0000000000005410 var_40          = qword ptr -40h
.text:0000000000005410
.text:0000000000005410 ; __unwind {
.text:0000000000005410                 push    r15
.text:0000000000005412                 push    r14
.text:0000000000005414                 push    r13
.text:0000000000005416                 push    r12
.text:0000000000005418                 push    rbp
.text:0000000000005419                 push    rbx
.text:000000000000541A                 sub     rsp, 28h
.text:000000000000541E                 mov     rax, fs:28h
.text:0000000000005427                 mov     [rsp+58h+var_40], rax
.text:000000000000542C                 xor     eax, eax
.text:000000000000542E                 cmp     edx, 24h ; '$'
.text:0000000000005431                 ja      loc_5795
.text:0000000000005437                 lea     rax, [rsp+58h+endptr]
.text:000000000000543C                 mov     r15, rsi
.text:000000000000543F                 test    rsi, rsi
.text:0000000000005442                 mov     rbp, rdi
.text:0000000000005445                 mov     [rsp+58h+base], edx
.text:0000000000005449                 mov     r14, rcx
.text:000000000000544C                 mov     r13, r8
.text:000000000000544F                 cmovz   r15, rax
.text:0000000000005453                 call    ___errno_location
.text:0000000000005458                 mov     dword ptr [rax], 0
.text:000000000000545E                 mov     r12, rax
.text:0000000000005461                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000005465                 call    ___ctype_b_loc
.text:000000000000546A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000546E                 mov     rsi, [rax]
.text:0000000000005471                 mov     rax, rbp
.text:0000000000005474                 jmp     short loc_5487
.text:0000000000005474 ; ---------------------------------------------------------------------------
.text:0000000000005476                 align 20h
.text:0000000000005480
.text:0000000000005480 loc_5480:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000005480                 add     rax, 1
.text:0000000000005484                 movzx   ebx, byte ptr [rax]
.text:0000000000005487
.text:0000000000005487 loc_5487:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000005487                 movzx   ecx, bl
.text:000000000000548A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000548F                 jnz     short loc_5480
.text:0000000000005491                 cmp     bl, 2Dh ; '-'
.text:0000000000005494                 jz      short loc_54E8
.text:0000000000005496                 xor     ecx, ecx        ; group
.text:0000000000005498                 mov     rsi, r15        ; endptr
.text:000000000000549B                 mov     rdi, rbp        ; nptr
.text:000000000000549E                 call    ___strtoul_internal
.text:00000000000054A3                 mov     rcx, [r15]
.text:00000000000054A6                 mov     rbx, rax
.text:00000000000054A9                 cmp     rcx, rbp
.text:00000000000054AC                 jz      short loc_54D8
.text:00000000000054AE                 mov     eax, [r12]
.text:00000000000054B2                 test    eax, eax
.text:00000000000054B4                 jz      short loc_5518
.text:00000000000054B6                 cmp     eax, 22h ; '"'
.text:00000000000054B9                 mov     ebp, 1
.text:00000000000054BE                 jnz     short loc_54E8
.text:00000000000054C0
.text:00000000000054C0 loc_54C0:                               ; CODE XREF: xstrtoumax+10A↓j
.text:00000000000054C0                 test    r13, r13
.text:00000000000054C3                 jz      short loc_54CE
.text:00000000000054C5                 movzx   r12d, byte ptr [rcx]
.text:00000000000054C9                 test    r12b, r12b
.text:00000000000054CC                 jnz     short loc_5547
.text:00000000000054CE
.text:00000000000054CE loc_54CE:                               ; CODE XREF: xstrtoumax+B3↑j
.text:00000000000054CE                 mov     [r14], rbx
.text:00000000000054D1                 jmp     short loc_54ED
.text:00000000000054D1 ; ---------------------------------------------------------------------------
.text:00000000000054D3                 align 8
.text:00000000000054D8
.text:00000000000054D8 loc_54D8:                               ; CODE XREF: xstrtoumax+9C↑j
.text:00000000000054D8                 test    r13, r13
.text:00000000000054DB                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000054E0                 jnz     short loc_5520
.text:00000000000054E2                 nop     word ptr [rax+rax+00h]
.text:00000000000054E8
.text:00000000000054E8 loc_54E8:                               ; CODE XREF: xstrtoumax+84↑j
.text:00000000000054E8                                         ; xstrtoumax+AE↑j ...
.text:00000000000054E8                 mov     ebp, 4
.text:00000000000054ED
.text:00000000000054ED loc_54ED:                               ; CODE XREF: xstrtoumax+C1↑j
.text:00000000000054ED                                         ; xstrtoumax+217↓j ...
.text:00000000000054ED                 mov     rdi, [rsp+58h+var_40]
.text:00000000000054F2                 xor     rdi, fs:28h
.text:00000000000054FB                 mov     eax, ebp
.text:00000000000054FD                 jnz     loc_5790
.text:0000000000005503                 add     rsp, 28h
.text:0000000000005507                 pop     rbx
.text:0000000000005508                 pop     rbp
.text:0000000000005509                 pop     r12
.text:000000000000550B                 pop     r13
.text:000000000000550D                 pop     r14
.text:000000000000550F                 pop     r15
.text:0000000000005511                 retn
.text:0000000000005511 ; ---------------------------------------------------------------------------
.text:0000000000005512                 align 8
.text:0000000000005518
.text:0000000000005518 loc_5518:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000005518                 xor     ebp, ebp
.text:000000000000551A                 jmp     short loc_54C0
.text:000000000000551A ; ---------------------------------------------------------------------------
.text:000000000000551C                 align 20h
.text:0000000000005520
.text:0000000000005520 loc_5520:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000005520                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000005525                 test    r12b, r12b
.text:0000000000005528                 jz      short loc_54E8
.text:000000000000552A                 movsx   esi, r12b       ; c
.text:000000000000552E                 mov     rdi, r13        ; s
.text:0000000000005531                 xor     ebp, ebp
.text:0000000000005533                 call    _strchr
.text:0000000000005538                 test    rax, rax
.text:000000000000553B                 mov     ebx, 1
.text:0000000000005540                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005545                 jz      short loc_54E8
.text:0000000000005547
.text:0000000000005547 loc_5547:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000005547                 movsx   esi, r12b       ; c
.text:000000000000554B                 mov     rdi, r13        ; s
.text:000000000000554E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000005553                 call    _strchr
.text:0000000000005558                 test    rax, rax
.text:000000000000555B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005560                 jz      def_55E6        ; jumptable 00000000000055E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000005566                 lea     eax, [r12-45h]
.text:000000000000556B                 cmp     al, 2Fh ; '/'
.text:000000000000556D                 ja      short loc_55C0
.text:000000000000556F                 mov     rdx, 814400308945h
.text:0000000000005579                 bt      rdx, rax
.text:000000000000557D                 jnb     short loc_55C0
.text:000000000000557F                 mov     esi, 30h ; '0'  ; c
.text:0000000000005584                 mov     rdi, r13        ; s
.text:0000000000005587                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000558C                 call    _strchr
.text:0000000000005591                 test    rax, rax
.text:0000000000005594                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005599                 jz      short loc_55C0
.text:000000000000559B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000559F                 cmp     al, 44h ; 'D'
.text:00000000000055A1                 jz      short loc_55AF
.text:00000000000055A3                 cmp     al, 69h ; 'i'
.text:00000000000055A5                 jz      loc_5778
.text:00000000000055AB                 cmp     al, 42h ; 'B'
.text:00000000000055AD                 jnz     short loc_55C0
.text:00000000000055AF
.text:00000000000055AF loc_55AF:                               ; CODE XREF: xstrtoumax+191↑j
.text:00000000000055AF                 mov     edi, 2
.text:00000000000055B4                 mov     esi, 3E8h
.text:00000000000055B9                 jmp     short loc_55CA
.text:00000000000055B9 ; ---------------------------------------------------------------------------
.text:00000000000055BB                 align 20h
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: xstrtoumax+15D↑j
.text:00000000000055C0                                         ; xstrtoumax+16D↑j ...
.text:00000000000055C0                 mov     edi, 1
.text:00000000000055C5                 mov     esi, 400h
.text:00000000000055CA
.text:00000000000055CA loc_55CA:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:00000000000055CA                                         ; xstrtoumax+37B↓j
.text:00000000000055CA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:00000000000055CE                 cmp     r12b, 35h
.text:00000000000055D2                 ja      short def_55E6  ; jumptable 00000000000055E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000055D4                 lea     rdx, jpt_55E6
.text:00000000000055DB                 movzx   r12d, r12b
.text:00000000000055DF                 movsxd  rax, ds:(jpt_55E6 - 6B68h)[rdx+r12*4]
.text:00000000000055E3                 add     rax, rdx
.text:00000000000055E6                 jmp     rax             ; switch jump
.text:00000000000055E8 ; ---------------------------------------------------------------------------
.text:00000000000055E8
.text:00000000000055E8 loc_55E8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000055E8                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:00000000000055E8                 mov     rax, rbx        ; jumptable 00000000000055E6 cases 77,109
.text:00000000000055EB                 mul     rsi
.text:00000000000055EE                 jo      loc_57E1
.text:00000000000055F4                 xor     r8d, r8d
.text:00000000000055F7
.text:00000000000055F7 loc_55F7:                               ; CODE XREF: xstrtoumax+34E↓j
.text:00000000000055F7                                         ; xstrtoumax+35E↓j ...
.text:00000000000055F7                 mul     rsi
.text:00000000000055FA                 jo      loc_57D2
.text:0000000000005600                 mov     rbx, rax
.text:0000000000005603
.text:0000000000005603 loc_5603:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000005603                 or      ebp, r8d
.text:0000000000005606                 db      2Eh
.text:0000000000005606                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005610
.text:0000000000005610 loc_5610:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005610                                         ; xstrtoumax+23B↓j ...
.text:0000000000005610                 movsxd  rdi, edi        ; jumptable 00000000000055E6 case 99
.text:0000000000005613                 mov     eax, ebp
.text:0000000000005615                 add     rcx, rdi
.text:0000000000005618                 or      eax, 2
.text:000000000000561B                 mov     [r15], rcx
.text:000000000000561E                 cmp     byte ptr [rcx], 0
.text:0000000000005621                 mov     [r14], rbx
.text:0000000000005624                 cmovnz  ebp, eax
.text:0000000000005627                 jmp     loc_54ED
.text:000000000000562C ; ---------------------------------------------------------------------------
.text:000000000000562C
.text:000000000000562C def_55E6:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000562C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000562C                 mov     [r14], rbx      ; jumptable 00000000000055E6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000562F                 or      ebp, 2
.text:0000000000005632                 jmp     loc_54ED
.text:0000000000005637 ; ---------------------------------------------------------------------------
.text:0000000000005637
.text:0000000000005637 loc_5637:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005637                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:0000000000005637                 mov     edx, 2          ; jumptable 00000000000055E6 case 119
.text:000000000000563C                 mov     rax, rdx
.text:000000000000563F                 mul     rbx
.text:0000000000005642                 jo      loc_56DE
.text:0000000000005648                 add     rbx, rbx
.text:000000000000564B                 jmp     short loc_5610  ; jumptable 00000000000055E6 case 99
.text:000000000000564D ; ---------------------------------------------------------------------------
.text:000000000000564D
.text:000000000000564D loc_564D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000564D                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:000000000000564D                 mov     edx, 200h       ; jumptable 00000000000055E6 case 98
.text:0000000000005652                 mov     rax, rdx
.text:0000000000005655                 mul     rbx
.text:0000000000005658                 jo      loc_56DE
.text:000000000000565E                 shl     rbx, 9
.text:0000000000005662                 jmp     short loc_5610  ; jumptable 00000000000055E6 case 99
.text:0000000000005664 ; ---------------------------------------------------------------------------
.text:0000000000005664
.text:0000000000005664 loc_5664:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005664                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:0000000000005664                 mov     r8d, 7          ; jumptable 00000000000055E6 case 90
.text:000000000000566A                 xor     r9d, r9d
.text:000000000000566D                 nop     dword ptr [rax]
.text:0000000000005670
.text:0000000000005670 loc_5670:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000005670                 mov     rax, rbx
.text:0000000000005673                 mul     rsi
.text:0000000000005676                 mov     rbx, rax
.text:0000000000005679                 jo      loc_580E
.text:000000000000567F
.text:000000000000567F loc_567F:                               ; CODE XREF: xstrtoumax+408↓j
.text:000000000000567F                 sub     r8d, 1
.text:0000000000005683                 jnz     short loc_5670
.text:0000000000005685
.text:0000000000005685 loc_5685:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000005685                                         ; xstrtoumax+2BD↓j ...
.text:0000000000005685                 or      ebp, r9d
.text:0000000000005688                 jmp     short loc_5610  ; jumptable 00000000000055E6 case 99
.text:000000000000568A ; ---------------------------------------------------------------------------
.text:000000000000568A
.text:000000000000568A loc_568A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000568A                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:000000000000568A                 mov     r8d, 8          ; jumptable 00000000000055E6 case 89
.text:0000000000005690                 xor     r9d, r9d
.text:0000000000005693                 nop     dword ptr [rax+rax+00h]
.text:0000000000005698
.text:0000000000005698 loc_5698:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000005698                 mov     rax, rbx
.text:000000000000569B                 mul     rsi
.text:000000000000569E                 mov     rbx, rax
.text:00000000000056A1                 jo      loc_57F0
.text:00000000000056A7
.text:00000000000056A7 loc_56A7:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:00000000000056A7                 sub     r8d, 1
.text:00000000000056AB                 jnz     short loc_5698
.text:00000000000056AD                 jmp     short loc_5685
.text:00000000000056AF ; ---------------------------------------------------------------------------
.text:00000000000056AF
.text:00000000000056AF loc_56AF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000056AF                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:00000000000056AF                 mov     r8d, 4          ; jumptable 00000000000055E6 cases 84,116
.text:00000000000056B5                 xor     r9d, r9d
.text:00000000000056B8
.text:00000000000056B8 loc_56B8:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:00000000000056B8                 mov     rax, rbx
.text:00000000000056BB                 mul     rsi
.text:00000000000056BE                 mov     rbx, rax
.text:00000000000056C1                 jo      loc_57C3
.text:00000000000056C7
.text:00000000000056C7 loc_56C7:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:00000000000056C7                 sub     r8d, 1
.text:00000000000056CB                 jnz     short loc_56B8
.text:00000000000056CD                 jmp     short loc_5685
.text:00000000000056CF ; ---------------------------------------------------------------------------
.text:00000000000056CF
.text:00000000000056CF loc_56CF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000056CF                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:00000000000056CF                 mov     rax, rbx        ; jumptable 00000000000055E6 cases 75,107
.text:00000000000056D2                 mul     rsi
.text:00000000000056D5                 mov     rbx, rax
.text:00000000000056D8                 jno     loc_5610        ; jumptable 00000000000055E6 case 99
.text:00000000000056DE
.text:00000000000056DE loc_56DE:                               ; CODE XREF: xstrtoumax+232↑j
.text:00000000000056DE                                         ; xstrtoumax+248↑j ...
.text:00000000000056DE                 mov     ebp, 1
.text:00000000000056E3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000056E7                 jmp     loc_5610        ; jumptable 00000000000055E6 case 99
.text:00000000000056E7 ; ---------------------------------------------------------------------------
.text:00000000000056EC                 align 10h
.text:00000000000056F0
.text:00000000000056F0 loc_56F0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000056F0                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:00000000000056F0                 mov     r8d, 5          ; jumptable 00000000000055E6 case 80
.text:00000000000056F6                 xor     r9d, r9d
.text:00000000000056F9
.text:00000000000056F9 loc_56F9:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:00000000000056F9                 mov     rax, rbx
.text:00000000000056FC                 mul     rsi
.text:00000000000056FF                 mov     rbx, rax
.text:0000000000005702                 jo      loc_57FF
.text:0000000000005708
.text:0000000000005708 loc_5708:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000005708                 sub     r8d, 1
.text:000000000000570C                 jnz     short loc_56F9
.text:000000000000570E                 jmp     loc_5685
.text:0000000000005713 ; ---------------------------------------------------------------------------
.text:0000000000005713
.text:0000000000005713 loc_5713:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005713                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:0000000000005713                 mov     r8d, 6          ; jumptable 00000000000055E6 case 69
.text:0000000000005719                 xor     r9d, r9d
.text:000000000000571C
.text:000000000000571C loc_571C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000571C                 mov     rax, rbx
.text:000000000000571F                 mul     rsi
.text:0000000000005722                 mov     rbx, rax
.text:0000000000005725                 jo      loc_57B4
.text:000000000000572B
.text:000000000000572B loc_572B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000572B                 sub     r8d, 1
.text:000000000000572F                 jnz     short loc_571C
.text:0000000000005731                 jmp     loc_5685
.text:0000000000005736 ; ---------------------------------------------------------------------------
.text:0000000000005736
.text:0000000000005736 loc_5736:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005736                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:0000000000005736                 mov     edx, 400h       ; jumptable 00000000000055E6 case 66
.text:000000000000573B                 mov     rax, rdx
.text:000000000000573E                 mul     rbx
.text:0000000000005741                 jo      short loc_56DE
.text:0000000000005743                 shl     rbx, 0Ah
.text:0000000000005747                 jmp     loc_5610        ; jumptable 00000000000055E6 case 99
.text:000000000000574C ; ---------------------------------------------------------------------------
.text:000000000000574C
.text:000000000000574C loc_574C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000574C                                         ; DATA XREF: .rodata:jpt_55E6↓o
.text:000000000000574C                 mov     rax, rbx        ; jumptable 00000000000055E6 cases 71,103
.text:000000000000574F                 mul     rsi
.text:0000000000005752                 jo      loc_581D
.text:0000000000005758                 xor     r8d, r8d
.text:000000000000575B
.text:000000000000575B loc_575B:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000575B                 mul     rsi
.text:000000000000575E                 jno     loc_55F7
.text:0000000000005764                 mov     r8d, 1
.text:000000000000576A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000576E                 jmp     loc_55F7
.text:000000000000576E ; ---------------------------------------------------------------------------
.text:0000000000005773                 align 8
.text:0000000000005778
.text:0000000000005778 loc_5778:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000005778                 xor     edi, edi
.text:000000000000577A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000577E                 mov     esi, 400h
.text:0000000000005783                 setz    dil
.text:0000000000005787                 lea     edi, [rdi+rdi+1]
.text:000000000000578B                 jmp     loc_55CA
.text:0000000000005790 ; ---------------------------------------------------------------------------
.text:0000000000005790
.text:0000000000005790 loc_5790:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000005790                 call    ___stack_chk_fail
.text:0000000000005795 ; ---------------------------------------------------------------------------
.text:0000000000005795
.text:0000000000005795 loc_5795:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000005795                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:000000000000579C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000057A3                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000057AA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000057AF                 call    ___assert_fail
.text:00000000000057B4 ; ---------------------------------------------------------------------------
.text:00000000000057B4
.text:00000000000057B4 loc_57B4:                               ; CODE XREF: xstrtoumax+315↑j
.text:00000000000057B4                 mov     r9d, 1
.text:00000000000057BA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000057BE                 jmp     loc_572B
.text:00000000000057C3 ; ---------------------------------------------------------------------------
.text:00000000000057C3
.text:00000000000057C3 loc_57C3:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:00000000000057C3                 mov     r9d, 1
.text:00000000000057C9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000057CD                 jmp     loc_56C7
.text:00000000000057D2 ; ---------------------------------------------------------------------------
.text:00000000000057D2
.text:00000000000057D2 loc_57D2:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:00000000000057D2                 mov     r8d, 1
.text:00000000000057D8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000057DC                 jmp     loc_5603
.text:00000000000057E1 ; ---------------------------------------------------------------------------
.text:00000000000057E1
.text:00000000000057E1 loc_57E1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:00000000000057E1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000057E5                 mov     r8d, 1
.text:00000000000057EB                 jmp     loc_55F7
.text:00000000000057F0 ; ---------------------------------------------------------------------------
.text:00000000000057F0
.text:00000000000057F0 loc_57F0:                               ; CODE XREF: xstrtoumax+291↑j
.text:00000000000057F0                 mov     r9d, 1
.text:00000000000057F6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000057FA                 jmp     loc_56A7
.text:00000000000057FF ; ---------------------------------------------------------------------------
.text:00000000000057FF
.text:00000000000057FF loc_57FF:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:00000000000057FF                 mov     r9d, 1
.text:0000000000005805                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005809                 jmp     loc_5708
.text:000000000000580E ; ---------------------------------------------------------------------------
.text:000000000000580E
.text:000000000000580E loc_580E:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000580E                 mov     r9d, 1
.text:0000000000005814                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005818                 jmp     loc_567F
.text:000000000000581D ; ---------------------------------------------------------------------------
.text:000000000000581D
.text:000000000000581D loc_581D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000581D                 mov     r8d, 1
.text:0000000000005823                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005827                 jmp     loc_575B
.text:0000000000005827 ; } // starts at 5410
.text:0000000000005827 xstrtoumax      endp
.text:0000000000005827
.text:0000000000005827 ; ---------------------------------------------------------------------------
.text:000000000000582C                 align 10h
.text:0000000000005830
.text:0000000000005830 ; =============== S U B R O U T I N E =======================================
.text:0000000000005830
.text:0000000000005830 ; Attributes: info_from_lumina
.text:0000000000005830
.text:0000000000005830 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005830                 public rpl_fclose
.text:0000000000005830 rpl_fclose      proc near               ; CODE XREF: main+3C5↑p
.text:0000000000005830                                         ; close_stream+15↓p
.text:0000000000005830 ; __unwind {
.text:0000000000005830                 push    r12
.text:0000000000005832                 push    rbp
.text:0000000000005833                 push    rbx
.text:0000000000005834                 mov     rbx, rdi
.text:0000000000005837                 call    _fileno
.text:000000000000583C                 test    eax, eax
.text:000000000000583E                 mov     rdi, rbx        ; fp
.text:0000000000005841                 js      short loc_5897
.text:0000000000005843                 call    ___freading
.text:0000000000005848                 test    eax, eax
.text:000000000000584A                 jnz     short loc_5878
.text:000000000000584C
.text:000000000000584C loc_584C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000584C                 mov     rdi, rbx        ; stream
.text:000000000000584F                 call    rpl_fflush
.text:0000000000005854                 test    eax, eax
.text:0000000000005856                 jz      short loc_5894
.text:0000000000005858                 call    ___errno_location
.text:000000000000585D                 mov     r12d, [rax]
.text:0000000000005860                 mov     rdi, rbx        ; stream
.text:0000000000005863                 mov     rbp, rax
.text:0000000000005866                 call    _fclose
.text:000000000000586B                 test    r12d, r12d
.text:000000000000586E                 jnz     short loc_58A0
.text:0000000000005870
.text:0000000000005870 loc_5870:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005870                 pop     rbx
.text:0000000000005871                 pop     rbp
.text:0000000000005872                 pop     r12
.text:0000000000005874                 retn
.text:0000000000005874 ; ---------------------------------------------------------------------------
.text:0000000000005875                 align 8
.text:0000000000005878
.text:0000000000005878 loc_5878:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005878                 mov     rdi, rbx        ; stream
.text:000000000000587B                 call    _fileno
.text:0000000000005880                 xor     esi, esi        ; offset
.text:0000000000005882                 mov     edx, 1          ; whence
.text:0000000000005887                 mov     edi, eax        ; fd
.text:0000000000005889                 call    _lseek
.text:000000000000588E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005892                 jnz     short loc_584C
.text:0000000000005894
.text:0000000000005894 loc_5894:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005894                 mov     rdi, rbx        ; stream
.text:0000000000005897
.text:0000000000005897 loc_5897:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005897                 pop     rbx
.text:0000000000005898                 pop     rbp
.text:0000000000005899                 pop     r12
.text:000000000000589B                 jmp     _fclose
.text:00000000000058A0 ; ---------------------------------------------------------------------------
.text:00000000000058A0
.text:00000000000058A0 loc_58A0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000058A0                 mov     [rbp+0], r12d
.text:00000000000058A4                 mov     eax, 0FFFFFFFFh
.text:00000000000058A9                 jmp     short loc_5870
.text:00000000000058A9 ; } // starts at 5830
.text:00000000000058A9 rpl_fclose      endp
.text:00000000000058A9
.text:00000000000058A9 ; ---------------------------------------------------------------------------
.text:00000000000058AB                 align 10h
.text:00000000000058B0
.text:00000000000058B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058B0
.text:00000000000058B0 ; Attributes: info_from_lumina
.text:00000000000058B0
.text:00000000000058B0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000058B0                 public rpl_fflush
.text:00000000000058B0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000058B0 ; __unwind {
.text:00000000000058B0                 test    rdi, rdi
.text:00000000000058B3                 push    rbx
.text:00000000000058B4                 mov     rbx, rdi
.text:00000000000058B7                 jz      short loc_58CA
.text:00000000000058B9                 call    ___freading
.text:00000000000058BE                 test    eax, eax
.text:00000000000058C0                 jz      short loc_58CA
.text:00000000000058C2                 test    dword ptr [rbx], 100h
.text:00000000000058C8                 jnz     short loc_58D8
.text:00000000000058CA
.text:00000000000058CA loc_58CA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000058CA                                         ; rpl_fflush+10↑j
.text:00000000000058CA                 mov     rdi, rbx        ; stream
.text:00000000000058CD                 pop     rbx
.text:00000000000058CE                 jmp     _fflush
.text:00000000000058CE ; ---------------------------------------------------------------------------
.text:00000000000058D3                 align 8
.text:00000000000058D8
.text:00000000000058D8 loc_58D8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000058D8                 mov     rdi, rbx
.text:00000000000058DB                 mov     edx, 1
.text:00000000000058E0                 xor     esi, esi
.text:00000000000058E2                 call    rpl_fseeko
.text:00000000000058E7                 mov     rdi, rbx        ; stream
.text:00000000000058EA                 pop     rbx
.text:00000000000058EB                 jmp     _fflush
.text:00000000000058EB ; } // starts at 58B0
.text:00000000000058EB rpl_fflush      endp
.text:00000000000058EB
.text:00000000000058F0
.text:00000000000058F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058F0
.text:00000000000058F0 ; Attributes: info_from_lumina
.text:00000000000058F0
.text:00000000000058F0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000058F0                 public rpl_fseeko
.text:00000000000058F0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000058F0 ; __unwind {
.text:00000000000058F0                 mov     rax, [rdi+8]
.text:00000000000058F4                 cmp     [rdi+10h], rax
.text:00000000000058F8                 jz      short loc_5900
.text:00000000000058FA
.text:00000000000058FA loc_58FA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000058FA                                         ; rpl_fseeko+1F↓j
.text:00000000000058FA                 jmp     _fseeko
.text:00000000000058FA ; ---------------------------------------------------------------------------
.text:00000000000058FF                 align 20h
.text:0000000000005900
.text:0000000000005900 loc_5900:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005900                 mov     rax, [rdi+20h]
.text:0000000000005904                 cmp     [rdi+28h], rax
.text:0000000000005908                 jnz     short loc_58FA
.text:000000000000590A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000590F                 jnz     short loc_58FA
.text:0000000000005911                 push    r12
.text:0000000000005913                 push    rbp
.text:0000000000005914                 mov     r12d, edx
.text:0000000000005917                 push    rbx
.text:0000000000005918                 mov     rbp, rsi
.text:000000000000591B                 mov     rbx, rdi
.text:000000000000591E                 call    _fileno
.text:0000000000005923                 mov     edx, r12d       ; whence
.text:0000000000005926                 mov     rsi, rbp        ; offset
.text:0000000000005929                 mov     edi, eax        ; fd
.text:000000000000592B                 call    _lseek
.text:0000000000005930                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005934                 jz      short loc_5942
.text:0000000000005936                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005939                 mov     [rbx+90h], rax
.text:0000000000005940                 xor     eax, eax
.text:0000000000005942
.text:0000000000005942 loc_5942:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005942                 pop     rbx
.text:0000000000005943                 pop     rbp
.text:0000000000005944                 pop     r12
.text:0000000000005946                 retn
.text:0000000000005946 ; } // starts at 58F0
.text:0000000000005946 rpl_fseeko      endp
.text:0000000000005946
.text:0000000000005946 ; ---------------------------------------------------------------------------
.text:0000000000005947                 align 10h
.text:0000000000005950
.text:0000000000005950 ; =============== S U B R O U T I N E =======================================
.text:0000000000005950
.text:0000000000005950 ; Attributes: info_from_lumina
.text:0000000000005950
.text:0000000000005950 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005950                 public rpl_mbrtowc
.text:0000000000005950 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005950
.text:0000000000005950 pwc             = dword ptr -34h
.text:0000000000005950 var_30          = qword ptr -30h
.text:0000000000005950
.text:0000000000005950 ; __unwind {
.text:0000000000005950                 push    r13
.text:0000000000005952                 push    r12
.text:0000000000005954                 mov     r13, rsi
.text:0000000000005957                 push    rbp
.text:0000000000005958                 push    rbx
.text:0000000000005959                 mov     rbx, rdi
.text:000000000000595C                 mov     r12, rdx
.text:000000000000595F                 sub     rsp, 18h
.text:0000000000005963                 mov     rax, fs:28h
.text:000000000000596C                 mov     [rsp+38h+var_30], rax
.text:0000000000005971                 xor     eax, eax
.text:0000000000005973                 lea     rax, [rsp+38h+pwc]
.text:0000000000005978                 test    rdi, rdi
.text:000000000000597B                 cmovz   rbx, rax
.text:000000000000597F                 mov     rdi, rbx        ; pwc
.text:0000000000005982                 call    _mbrtowc
.text:0000000000005987                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000598B                 mov     rbp, rax
.text:000000000000598E                 jbe     short loc_59B0
.text:0000000000005990                 test    r12, r12
.text:0000000000005993                 jz      short loc_59B0
.text:0000000000005995                 xor     edi, edi
.text:0000000000005997                 call    hard_locale
.text:000000000000599C                 test    al, al
.text:000000000000599E                 jnz     short loc_59B0
.text:00000000000059A0                 movzx   eax, byte ptr [r13+0]
.text:00000000000059A5                 mov     ebp, 1
.text:00000000000059AA                 mov     [rbx], eax
.text:00000000000059AC                 nop     dword ptr [rax+00h]
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000059B0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000059B0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000059B5                 xor     rdx, fs:28h
.text:00000000000059BE                 mov     rax, rbp
.text:00000000000059C1                 jnz     short loc_59CE
.text:00000000000059C3                 add     rsp, 18h
.text:00000000000059C7                 pop     rbx
.text:00000000000059C8                 pop     rbp
.text:00000000000059C9                 pop     r12
.text:00000000000059CB                 pop     r13
.text:00000000000059CD                 retn
.text:00000000000059CE ; ---------------------------------------------------------------------------
.text:00000000000059CE
.text:00000000000059CE loc_59CE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000059CE                 call    ___stack_chk_fail
.text:00000000000059CE ; } // starts at 5950
.text:00000000000059CE rpl_mbrtowc     endp
.text:00000000000059CE
.text:00000000000059CE ; ---------------------------------------------------------------------------
.text:00000000000059D3                 align 20h
.text:00000000000059E0
.text:00000000000059E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059E0
.text:00000000000059E0 ; Attributes: info_from_lumina
.text:00000000000059E0
.text:00000000000059E0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000059E0                 public close_stream
.text:00000000000059E0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000059E0                                         ; close_stdout+33↑p
.text:00000000000059E0 ; __unwind {
.text:00000000000059E0                 push    r12
.text:00000000000059E2                 push    rbp
.text:00000000000059E3                 mov     rbp, rdi
.text:00000000000059E6                 push    rbx
.text:00000000000059E7                 call    ___fpending
.text:00000000000059EC                 mov     ebx, [rbp+0]
.text:00000000000059EF                 mov     rdi, rbp        ; stream
.text:00000000000059F2                 mov     r12, rax
.text:00000000000059F5                 call    rpl_fclose
.text:00000000000059FA                 and     ebx, 20h
.text:00000000000059FD                 test    ebx, ebx
.text:00000000000059FF                 jnz     short loc_5A18
.text:0000000000005A01                 test    eax, eax
.text:0000000000005A03                 jz      short loc_5A0F
.text:0000000000005A05                 test    r12, r12
.text:0000000000005A08                 mov     eax, 0FFFFFFFFh
.text:0000000000005A0D                 jz      short loc_5A48
.text:0000000000005A0F
.text:0000000000005A0F loc_5A0F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000005A0F                 pop     rbx
.text:0000000000005A10                 pop     rbp
.text:0000000000005A11                 pop     r12
.text:0000000000005A13                 retn
.text:0000000000005A13 ; ---------------------------------------------------------------------------
.text:0000000000005A14                 align 8
.text:0000000000005A18
.text:0000000000005A18 loc_5A18:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005A18                 test    eax, eax
.text:0000000000005A1A                 jnz     short loc_5A38
.text:0000000000005A1C                 call    ___errno_location
.text:0000000000005A21                 mov     dword ptr [rax], 0
.text:0000000000005A27                 mov     eax, 0FFFFFFFFh
.text:0000000000005A2C                 pop     rbx
.text:0000000000005A2D                 pop     rbp
.text:0000000000005A2E                 pop     r12
.text:0000000000005A30                 retn
.text:0000000000005A30 ; ---------------------------------------------------------------------------
.text:0000000000005A31                 align 8
.text:0000000000005A38
.text:0000000000005A38 loc_5A38:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005A38                 pop     rbx
.text:0000000000005A39                 mov     eax, 0FFFFFFFFh
.text:0000000000005A3E                 pop     rbp
.text:0000000000005A3F                 pop     r12
.text:0000000000005A41                 retn
.text:0000000000005A41 ; ---------------------------------------------------------------------------
.text:0000000000005A42                 align 8
.text:0000000000005A48
.text:0000000000005A48 loc_5A48:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005A48                 call    ___errno_location
.text:0000000000005A4D                 cmp     dword ptr [rax], 9
.text:0000000000005A50                 pop     rbx
.text:0000000000005A51                 pop     rbp
.text:0000000000005A52                 pop     r12
.text:0000000000005A54                 setnz   al
.text:0000000000005A57                 movzx   eax, al
.text:0000000000005A5A                 neg     eax
.text:0000000000005A5C                 retn
.text:0000000000005A5C ; } // starts at 59E0
.text:0000000000005A5C close_stream    endp
.text:0000000000005A5C
.text:0000000000005A5C ; ---------------------------------------------------------------------------
.text:0000000000005A5D                 align 20h
.text:0000000000005A60
.text:0000000000005A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A60
.text:0000000000005A60
.text:0000000000005A60                 public hard_locale
.text:0000000000005A60 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005A60 ; __unwind {
.text:0000000000005A60                 sub     rsp, 8
.text:0000000000005A64                 xor     esi, esi        ; locale
.text:0000000000005A66                 call    _setlocale
.text:0000000000005A6B                 mov     rdx, rax
.text:0000000000005A6E                 mov     eax, 1
.text:0000000000005A73                 test    rdx, rdx
.text:0000000000005A76                 jz      short loc_5A95
.text:0000000000005A78                 lea     rdi, aC         ; "C"
.text:0000000000005A7F                 mov     ecx, 2
.text:0000000000005A84                 mov     rsi, rdx
.text:0000000000005A87                 repe cmpsb
.text:0000000000005A89                 setnbe  cl
.text:0000000000005A8C                 sbb     cl, 0
.text:0000000000005A8F                 xor     eax, eax
.text:0000000000005A91                 test    cl, cl
.text:0000000000005A93                 jnz     short loc_5AA0
.text:0000000000005A95
.text:0000000000005A95 loc_5A95:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005A95                 add     rsp, 8
.text:0000000000005A99                 retn
.text:0000000000005A99 ; ---------------------------------------------------------------------------
.text:0000000000005A9A                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 loc_5AA0:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005AA0                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005AA7                 mov     ecx, 6
.text:0000000000005AAC                 mov     rsi, rdx
.text:0000000000005AAF                 repe cmpsb
.text:0000000000005AB1                 setnbe  al
.text:0000000000005AB4                 sbb     al, 0
.text:0000000000005AB6                 test    al, al
.text:0000000000005AB8                 setnz   al
.text:0000000000005ABB                 add     rsp, 8
.text:0000000000005ABF                 retn
.text:0000000000005ABF ; } // starts at 5A60
.text:0000000000005ABF hard_locale     endp
.text:0000000000005ABF
.text:0000000000005AC0
.text:0000000000005AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AC0
.text:0000000000005AC0
.text:0000000000005AC0                 public locale_charset
.text:0000000000005AC0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005AC0 ; __unwind {
.text:0000000000005AC0                 sub     rsp, 8
.text:0000000000005AC4                 mov     edi, 0Eh        ; item
.text:0000000000005AC9                 call    _nl_langinfo
.text:0000000000005ACE                 test    rax, rax
.text:0000000000005AD1                 jz      short loc_5AF0
.text:0000000000005AD3                 cmp     byte ptr [rax], 0
.text:0000000000005AD6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000005ADD                 cmovz   rax, rdx
.text:0000000000005AE1                 add     rsp, 8
.text:0000000000005AE5                 retn
.text:0000000000005AE5 ; ---------------------------------------------------------------------------
.text:0000000000005AE6                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 loc_5AF0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005AF0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005AF7                 add     rsp, 8
.text:0000000000005AFB                 retn
.text:0000000000005AFB ; } // starts at 5AC0
.text:0000000000005AFB locale_charset  endp
.text:0000000000005AFB
.text:0000000000005AFB ; ---------------------------------------------------------------------------
.text:0000000000005AFC                 align 20h
.text:0000000000005B00
.text:0000000000005B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B00
.text:0000000000005B00 ; Attributes: info_from_lumina
.text:0000000000005B00
.text:0000000000005B00 ; void _libc_csu_init(void)
.text:0000000000005B00                 public __libc_csu_init
.text:0000000000005B00 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005B00 ; __unwind {
.text:0000000000005B00                 push    r15
.text:0000000000005B02                 push    r14
.text:0000000000005B04                 mov     r15, rdx
.text:0000000000005B07                 push    r13
.text:0000000000005B09                 push    r12
.text:0000000000005B0B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005B12                 push    rbp
.text:0000000000005B13                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000005B1A                 push    rbx
.text:0000000000005B1B                 mov     r13d, edi
.text:0000000000005B1E                 mov     r14, rsi
.text:0000000000005B21                 sub     rbp, r12
.text:0000000000005B24                 sub     rsp, 8
.text:0000000000005B28                 sar     rbp, 3
.text:0000000000005B2C                 call    _init_proc
.text:0000000000005B31                 test    rbp, rbp
.text:0000000000005B34                 jz      short loc_5B56
.text:0000000000005B36                 xor     ebx, ebx
.text:0000000000005B38                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005B40
.text:0000000000005B40 loc_5B40:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005B40                 mov     rdx, r15
.text:0000000000005B43                 mov     rsi, r14
.text:0000000000005B46                 mov     edi, r13d
.text:0000000000005B49                 call    ds:(__frame_dummy_init_array_entry - 208B10h)[r12+rbx*8]
.text:0000000000005B4D                 add     rbx, 1
.text:0000000000005B51                 cmp     rbp, rbx
.text:0000000000005B54                 jnz     short loc_5B40
.text:0000000000005B56
.text:0000000000005B56 loc_5B56:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005B56                 add     rsp, 8
.text:0000000000005B5A                 pop     rbx
.text:0000000000005B5B                 pop     rbp
.text:0000000000005B5C                 pop     r12
.text:0000000000005B5E                 pop     r13
.text:0000000000005B60                 pop     r14
.text:0000000000005B62                 pop     r15
.text:0000000000005B64                 retn
.text:0000000000005B64 ; } // starts at 5B00
.text:0000000000005B64 __libc_csu_init endp
.text:0000000000005B64
.text:0000000000005B64 ; ---------------------------------------------------------------------------
.text:0000000000005B65                 align 10h
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70
.text:0000000000005B70 ; void _libc_csu_fini(void)
.text:0000000000005B70                 public __libc_csu_fini
.text:0000000000005B70 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 rep retn
.text:0000000000005B70 ; } // starts at 5B70
.text:0000000000005B70 __libc_csu_fini endp
.text:0000000000005B70
.text:0000000000005B70 ; ---------------------------------------------------------------------------
.text:0000000000005B72                 align 20h
.text:0000000000005B80
.text:0000000000005B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B80
.text:0000000000005B80
.text:0000000000005B80 atexit          proc near               ; CODE XREF: main+6A↑p
.text:0000000000005B80 ; __unwind {
.text:0000000000005B80                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005B87                 xor     esi, esi        ; obj
.text:0000000000005B89                 jmp     ___cxa_atexit
.text:0000000000005B89 ; } // starts at 5B80
.text:0000000000005B89 atexit          endp
.text:0000000000005B89
.text:0000000000005B89 _text           ends
.text:0000000000005B89
LOAD:0000000000005B8E ; ===========================================================================
LOAD:0000000000005B8E
LOAD:0000000000005B8E ; Segment type: Pure code
LOAD:0000000000005B8E ; Segment permissions: Read/Execute
LOAD:0000000000005B8E LOAD            segment byte public 'CODE' use64
LOAD:0000000000005B8E                 assume cs:LOAD
LOAD:0000000000005B8E                 ;org 5B8Eh
LOAD:0000000000005B8E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005B8E                 align 10h
LOAD:0000000000005B8E LOAD            ends
LOAD:0000000000005B8E
.fini:0000000000005B90 ; ===========================================================================
.fini:0000000000005B90
.fini:0000000000005B90 ; Segment type: Pure code
.fini:0000000000005B90 ; Segment permissions: Read/Execute
.fini:0000000000005B90 _fini           segment dword public 'CODE' use64
.fini:0000000000005B90                 assume cs:_fini
.fini:0000000000005B90                 ;org 5B90h
.fini:0000000000005B90                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005B90
.fini:0000000000005B90 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005B90
.fini:0000000000005B90
.fini:0000000000005B90                 public _term_proc
.fini:0000000000005B90 _term_proc      proc near
.fini:0000000000005B90                 sub     rsp, 8          ; _fini
.fini:0000000000005B94                 add     rsp, 8
.fini:0000000000005B98                 retn
.fini:0000000000005B98 _term_proc      endp
.fini:0000000000005B98
.fini:0000000000005B98 _fini           ends
.fini:0000000000005B98
LOAD:0000000000005B99 ; ===========================================================================
LOAD:0000000000005B99
LOAD:0000000000005B99 ; Segment type: Pure code
LOAD:0000000000005B99 ; Segment permissions: Read/Execute
LOAD:0000000000005B99 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005B99                 assume cs:LOAD
LOAD:0000000000005B99                 ;org 5B99h
LOAD:0000000000005B99                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005B99                 align 20h
LOAD:0000000000005B99 LOAD            ends
LOAD:0000000000005B99
.rodata:0000000000005BA0 ; ===========================================================================
.rodata:0000000000005BA0
.rodata:0000000000005BA0 ; Segment type: Pure data
.rodata:0000000000005BA0 ; Segment permissions: Read
.rodata:0000000000005BA0 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005BA0                 assume cs:_rodata
.rodata:0000000000005BA0                 ;org 5BA0h
.rodata:0000000000005BA0                 public _IO_stdin_used
.rodata:0000000000005BA0 _IO_stdin_used  db    1
.rodata:0000000000005BA1                 db    0
.rodata:0000000000005BA2                 db    2
.rodata:0000000000005BA3                 db    0
.rodata:0000000000005BA4 aBase64         db 'base64',0           ; DATA XREF: main+137↑o
.rodata:0000000000005BA4                                         ; usage+158↑o ...
.rodata:0000000000005BAB ; const char aUsageSOptionFi[]
.rodata:0000000000005BAB aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]',0Ah,0
.rodata:0000000000005BAB                                         ; DATA XREF: usage:loc_216D↑o
.rodata:0000000000005BC9 asc_5BC9        db '[',0                ; DATA XREF: usage+190↑o
.rodata:0000000000005BCB aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1B7↑o
.rodata:0000000000005BDB aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000005BDB                                         ; DATA XREF: usage+1E7↑o
.rodata:0000000000005BDB                                         ; usage+2DC↑o ...
.rodata:0000000000005BF1 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1F8↑o
.rodata:0000000000005BFB aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+204↑o
.rodata:0000000000005C0A aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+197↑o
.rodata:0000000000005C14 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1C3↑o
.rodata:0000000000005C1E aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1DB↑o
.rodata:0000000000005C28 ; const char aSOnlineHelpS[]
.rodata:0000000000005C28 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+24A↑o
.rodata:0000000000005C28                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000005C3F unk_5C3F        db  47h ; G             ; DATA XREF: main+130↑o
.rodata:0000000000005C3F                                         ; usage+266↑o ...
.rodata:0000000000005C40                 db  4Eh ; N
.rodata:0000000000005C41                 db  55h ; U
.rodata:0000000000005C42                 db  20h
.rodata:0000000000005C43 ; const char domainname[]
.rodata:0000000000005C43 domainname      db 'coreutils',0        ; DATA XREF: main+4B↑o
.rodata:0000000000005C43                                         ; main+57↑o ...
.rodata:0000000000005C4D ; const char s2[]
.rodata:0000000000005C4D s2              db 'en_',0              ; DATA XREF: usage+28D↑o
.rodata:0000000000005C4D                                         ; usage+34E↑o
.rodata:0000000000005C51 ; const char aFullDocumentat[]
.rodata:0000000000005C51 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000005C51                                         ; DATA XREF: usage:loc_23B9↑o
.rodata:0000000000005C51                                         ; usage:loc_2476↑o
.rodata:0000000000005C6C ; const char dirname[]
.rodata:0000000000005C6C dirname         db '/usr/local/share/locale',0
.rodata:0000000000005C6C                                         ; DATA XREF: main+44↑o
.rodata:0000000000005C84 ; const char msgid[]
.rodata:0000000000005C84 msgid           db 'invalid wrap size',0
.rodata:0000000000005C84                                         ; DATA XREF: main+AE↑o
.rodata:0000000000005C96 aSimonJosefsson db 'Simon Josefsson',0  ; DATA XREF: main+129↑o
.rodata:0000000000005CA6 ; const char shortopts[]
.rodata:0000000000005CA6 shortopts       db 'diw:',0             ; DATA XREF: main+7B↑o
.rodata:0000000000005CAB ; const char aExtraOperandS[]
.rodata:0000000000005CAB aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+786↑o
.rodata:0000000000005CBC ; const char modes[]
.rodata:0000000000005CBC modes           db 'rb',0               ; DATA XREF: main+18A↑o
.rodata:0000000000005CBF ; const char aReadError[]
.rodata:0000000000005CBF aReadError      db 'read error',0       ; DATA XREF: main+4A3↑o
.rodata:0000000000005CBF                                         ; main:loc_1F11↑o
.rodata:0000000000005CCA ; const char aWriteError[]
.rodata:0000000000005CCA aWriteError     db 'write error',0      ; DATA XREF: main+5E7↑o
.rodata:0000000000005CCA                                         ; main+629↑o ...
.rodata:0000000000005CD6 ; const char aInvalidInput[]
.rodata:0000000000005CD6 aInvalidInput   db 'invalid input',0    ; DATA XREF: main:loc_1EC1↑o
.rodata:0000000000005CE4 ; const char aClosingStandar[]
.rodata:0000000000005CE4 aClosingStandar db 'closing standard input',0
.rodata:0000000000005CE4                                         ; DATA XREF: main+674↑o
.rodata:0000000000005CFB aDecode         db 'decode',0           ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000005D02 aWrap           db 'wrap',0             ; DATA XREF: .data.rel.ro:0000000000208B40↓o
.rodata:0000000000005D07 aIgnoreGarbage  db 'ignore-garbage',0   ; DATA XREF: .data.rel.ro:0000000000208B60↓o
.rodata:0000000000005D16 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000208B80↓o
.rodata:0000000000005D1B aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000208BA0↓o
.rodata:0000000000005D23                 align 8
.rodata:0000000000005D28 ; const char aTrySHelpForMor[]
.rodata:0000000000005D28 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005D28                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000005D4F                 align 10h
.rodata:0000000000005D50 ; const char aBaseDEncodeOrD[]
.rodata:0000000000005D50 aBaseDEncodeOrD db 'Base%d encode or decode FILE, or standard input, to standard outp'
.rodata:0000000000005D50                                         ; DATA XREF: usage+7D↑o
.rodata:0000000000005D50                 db 'ut.',0Ah,0
.rodata:0000000000005D96                 align 8
.rodata:0000000000005D98 ; const char aWithNoFileOrWh[]
.rodata:0000000000005D98 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+AB↑o
.rodata:0000000000005D98                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000005DD0 ; const char aMandatoryArgum[]
.rodata:0000000000005DD0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+D0↑o
.rodata:0000000000005DD0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000005DD0                 db 'ns too.',0Ah,0
.rodata:0000000000005E1B                 align 20h
.rodata:0000000000005E20 ; const char aDDecodeDecodeD[]
.rodata:0000000000005E20 aDDecodeDecodeD db '  -d, --decode          decode data',0Ah
.rodata:0000000000005E20                                         ; DATA XREF: usage+F5↑o
.rodata:0000000000005E20                 db '  -i, --ignore-garbage  when decoding, ignore non-alphabet charac'
.rodata:0000000000005E20                 db 'ters',0Ah
.rodata:0000000000005E20                 db '  -w, --wrap=COLS       wrap encoded lines after COLS character ('
.rodata:0000000000005E20                 db 'default 76).',0Ah
.rodata:0000000000005E20                 db '                          Use 0 to disable line wrapping',0Ah
.rodata:0000000000005E20                 db 0Ah,0
.rodata:0000000000005F13                 align 8
.rodata:0000000000005F18 ; const char aHelpDisplayThi[]
.rodata:0000000000005F18 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005F18                                         ; DATA XREF: usage+11A↑o
.rodata:0000000000005F45                 align 8
.rodata:0000000000005F48 ; const char aVersionOutputV[]
.rodata:0000000000005F48 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005F48                                         ; DATA XREF: usage+13F↑o
.rodata:0000000000005F7E                 align 20h
.rodata:0000000000005F80 ; const char aTheDataAreEnco[]
.rodata:0000000000005F80 aTheDataAreEnco db 0Ah                  ; DATA XREF: usage+164↑o
.rodata:0000000000005F80                 db 'The data are encoded as described for the %s alphabet in RFC 4648'
.rodata:0000000000005F80                 db '.',0Ah
.rodata:0000000000005F80                 db 'When decoding, the input may contain newlines in addition to the '
.rodata:0000000000005F80                 db 'bytes of',0Ah
.rodata:0000000000005F80                 db 'the formal %s alphabet.  Use --ignore-garbage to attempt to recov'
.rodata:0000000000005F80                 db 'er',0Ah
.rodata:0000000000005F80                 db 'from any other non-alphabet bytes in the encoded stream.',0Ah,0
.rodata:000000000000608C                 align 10h
.rodata:0000000000006090 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006090                                         ; DATA XREF: usage+25F↑o
.rodata:0000000000006090                                         ; usage+2C3↑o ...
.rodata:00000000000060B8 ; const char aReportAnyTrans[]
.rodata:00000000000060B8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000060B8                                         ; DATA XREF: usage+3B7↑o
.rodata:00000000000060B8                 db 'am/>',0Ah,0
.rodata:00000000000060FF                 align 20h
.rodata:0000000000006100 ; const char aOrAvailableLoc[]
.rodata:0000000000006100 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000006100                                         ; DATA XREF: usage:loc_23FE↑o
.rodata:0000000000006133 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000006138                 align 20h
.rodata:0000000000006140 b64             db 0FFh                 ; DATA XREF: decode_4+10↑o
.rodata:0000000000006140                                         ; isbase64↑o
.rodata:0000000000006141                 db 0FFh
.rodata:0000000000006142                 db 0FFh
.rodata:0000000000006143                 db 0FFh
.rodata:0000000000006144                 db 0FFh
.rodata:0000000000006145                 db 0FFh
.rodata:0000000000006146                 db 0FFh
.rodata:0000000000006147                 db 0FFh
.rodata:0000000000006148                 db 0FFh
.rodata:0000000000006149                 db 0FFh
.rodata:000000000000614A                 db 0FFh
.rodata:000000000000614B                 db 0FFh
.rodata:000000000000614C                 db 0FFh
.rodata:000000000000614D                 db 0FFh
.rodata:000000000000614E                 db 0FFh
.rodata:000000000000614F                 db 0FFh
.rodata:0000000000006150                 db 0FFh
.rodata:0000000000006151                 db 0FFh
.rodata:0000000000006152                 db 0FFh
.rodata:0000000000006153                 db 0FFh
.rodata:0000000000006154                 db 0FFh
.rodata:0000000000006155                 db 0FFh
.rodata:0000000000006156                 db 0FFh
.rodata:0000000000006157                 db 0FFh
.rodata:0000000000006158                 db 0FFh
.rodata:0000000000006159                 db 0FFh
.rodata:000000000000615A                 db 0FFh
.rodata:000000000000615B                 db 0FFh
.rodata:000000000000615C                 db 0FFh
.rodata:000000000000615D                 db 0FFh
.rodata:000000000000615E                 db 0FFh
.rodata:000000000000615F                 db 0FFh
.rodata:0000000000006160                 db 0FFh
.rodata:0000000000006161                 db 0FFh
.rodata:0000000000006162                 db 0FFh
.rodata:0000000000006163                 db 0FFh
.rodata:0000000000006164                 db 0FFh
.rodata:0000000000006165                 db 0FFh
.rodata:0000000000006166                 db 0FFh
.rodata:0000000000006167                 db 0FFh
.rodata:0000000000006168                 db 0FFh
.rodata:0000000000006169                 db 0FFh
.rodata:000000000000616A                 db 0FFh
.rodata:000000000000616B                 db  3Eh ; >
.rodata:000000000000616C                 db 0FFh
.rodata:000000000000616D                 db 0FFh
.rodata:000000000000616E                 db 0FFh
.rodata:000000000000616F                 db  3Fh ; ?
.rodata:0000000000006170                 db  34h ; 4
.rodata:0000000000006171                 db  35h ; 5
.rodata:0000000000006172                 db  36h ; 6
.rodata:0000000000006173                 db  37h ; 7
.rodata:0000000000006174                 db  38h ; 8
.rodata:0000000000006175                 db  39h ; 9
.rodata:0000000000006176                 db  3Ah ; :
.rodata:0000000000006177                 db  3Bh ; ;
.rodata:0000000000006178                 db  3Ch ; <
.rodata:0000000000006179                 db  3Dh ; =
.rodata:000000000000617A                 db 0FFh
.rodata:000000000000617B                 db 0FFh
.rodata:000000000000617C                 db 0FFh
.rodata:000000000000617D                 db 0FFh
.rodata:000000000000617E                 db 0FFh
.rodata:000000000000617F                 db 0FFh
.rodata:0000000000006180                 db 0FFh
.rodata:0000000000006181                 db    0
.rodata:0000000000006182                 db    1
.rodata:0000000000006183                 db    2
.rodata:0000000000006184                 db    3
.rodata:0000000000006185                 db    4
.rodata:0000000000006186                 db    5
.rodata:0000000000006187                 db    6
.rodata:0000000000006188                 db    7
.rodata:0000000000006189                 db    8
.rodata:000000000000618A                 db    9
.rodata:000000000000618B                 db  0Ah
.rodata:000000000000618C                 db  0Bh
.rodata:000000000000618D                 db  0Ch
.rodata:000000000000618E                 db  0Dh
.rodata:000000000000618F                 db  0Eh
.rodata:0000000000006190                 db  0Fh
.rodata:0000000000006191                 db  10h
.rodata:0000000000006192                 db  11h
.rodata:0000000000006193                 db  12h
.rodata:0000000000006194                 db  13h
.rodata:0000000000006195                 db  14h
.rodata:0000000000006196                 db  15h
.rodata:0000000000006197                 db  16h
.rodata:0000000000006198                 db  17h
.rodata:0000000000006199                 db  18h
.rodata:000000000000619A                 db  19h
.rodata:000000000000619B                 db 0FFh
.rodata:000000000000619C                 db 0FFh
.rodata:000000000000619D                 db 0FFh
.rodata:000000000000619E                 db 0FFh
.rodata:000000000000619F                 db 0FFh
.rodata:00000000000061A0                 db 0FFh
.rodata:00000000000061A1                 db  1Ah
.rodata:00000000000061A2                 db  1Bh
.rodata:00000000000061A3                 db  1Ch
.rodata:00000000000061A4                 db  1Dh
.rodata:00000000000061A5                 db  1Eh
.rodata:00000000000061A6                 db  1Fh
.rodata:00000000000061A7                 db  20h
.rodata:00000000000061A8                 db  21h ; !
.rodata:00000000000061A9                 db  22h ; "
.rodata:00000000000061AA                 db  23h ; #
.rodata:00000000000061AB                 db  24h ; $
.rodata:00000000000061AC                 db  25h ; %
.rodata:00000000000061AD                 db  26h ; &
.rodata:00000000000061AE                 db  27h ; '
.rodata:00000000000061AF                 db  28h ; (
.rodata:00000000000061B0                 db  29h ; )
.rodata:00000000000061B1                 db  2Ah ; *
.rodata:00000000000061B2                 db  2Bh ; +
.rodata:00000000000061B3                 db  2Ch ; ,
.rodata:00000000000061B4                 db  2Dh ; -
.rodata:00000000000061B5                 db  2Eh ; .
.rodata:00000000000061B6                 db  2Fh ; /
.rodata:00000000000061B7                 db  30h ; 0
.rodata:00000000000061B8                 db  31h ; 1
.rodata:00000000000061B9                 db  32h ; 2
.rodata:00000000000061BA                 db  33h ; 3
.rodata:00000000000061BB                 db 0FFh
.rodata:00000000000061BC                 db 0FFh
.rodata:00000000000061BD                 db 0FFh
.rodata:00000000000061BE                 db 0FFh
.rodata:00000000000061BF                 db 0FFh
.rodata:00000000000061C0                 db 0FFh
.rodata:00000000000061C1                 db 0FFh
.rodata:00000000000061C2                 db 0FFh
.rodata:00000000000061C3                 db 0FFh
.rodata:00000000000061C4                 db 0FFh
.rodata:00000000000061C5                 db 0FFh
.rodata:00000000000061C6                 db 0FFh
.rodata:00000000000061C7                 db 0FFh
.rodata:00000000000061C8                 db 0FFh
.rodata:00000000000061C9                 db 0FFh
.rodata:00000000000061CA                 db 0FFh
.rodata:00000000000061CB                 db 0FFh
.rodata:00000000000061CC                 db 0FFh
.rodata:00000000000061CD                 db 0FFh
.rodata:00000000000061CE                 db 0FFh
.rodata:00000000000061CF                 db 0FFh
.rodata:00000000000061D0                 db 0FFh
.rodata:00000000000061D1                 db 0FFh
.rodata:00000000000061D2                 db 0FFh
.rodata:00000000000061D3                 db 0FFh
.rodata:00000000000061D4                 db 0FFh
.rodata:00000000000061D5                 db 0FFh
.rodata:00000000000061D6                 db 0FFh
.rodata:00000000000061D7                 db 0FFh
.rodata:00000000000061D8                 db 0FFh
.rodata:00000000000061D9                 db 0FFh
.rodata:00000000000061DA                 db 0FFh
.rodata:00000000000061DB                 db 0FFh
.rodata:00000000000061DC                 db 0FFh
.rodata:00000000000061DD                 db 0FFh
.rodata:00000000000061DE                 db 0FFh
.rodata:00000000000061DF                 db 0FFh
.rodata:00000000000061E0                 db 0FFh
.rodata:00000000000061E1                 db 0FFh
.rodata:00000000000061E2                 db 0FFh
.rodata:00000000000061E3                 db 0FFh
.rodata:00000000000061E4                 db 0FFh
.rodata:00000000000061E5                 db 0FFh
.rodata:00000000000061E6                 db 0FFh
.rodata:00000000000061E7                 db 0FFh
.rodata:00000000000061E8                 db 0FFh
.rodata:00000000000061E9                 db 0FFh
.rodata:00000000000061EA                 db 0FFh
.rodata:00000000000061EB                 db 0FFh
.rodata:00000000000061EC                 db 0FFh
.rodata:00000000000061ED                 db 0FFh
.rodata:00000000000061EE                 db 0FFh
.rodata:00000000000061EF                 db 0FFh
.rodata:00000000000061F0                 db 0FFh
.rodata:00000000000061F1                 db 0FFh
.rodata:00000000000061F2                 db 0FFh
.rodata:00000000000061F3                 db 0FFh
.rodata:00000000000061F4                 db 0FFh
.rodata:00000000000061F5                 db 0FFh
.rodata:00000000000061F6                 db 0FFh
.rodata:00000000000061F7                 db 0FFh
.rodata:00000000000061F8                 db 0FFh
.rodata:00000000000061F9                 db 0FFh
.rodata:00000000000061FA                 db 0FFh
.rodata:00000000000061FB                 db 0FFh
.rodata:00000000000061FC                 db 0FFh
.rodata:00000000000061FD                 db 0FFh
.rodata:00000000000061FE                 db 0FFh
.rodata:00000000000061FF                 db 0FFh
.rodata:0000000000006200                 db 0FFh
.rodata:0000000000006201                 db 0FFh
.rodata:0000000000006202                 db 0FFh
.rodata:0000000000006203                 db 0FFh
.rodata:0000000000006204                 db 0FFh
.rodata:0000000000006205                 db 0FFh
.rodata:0000000000006206                 db 0FFh
.rodata:0000000000006207                 db 0FFh
.rodata:0000000000006208                 db 0FFh
.rodata:0000000000006209                 db 0FFh
.rodata:000000000000620A                 db 0FFh
.rodata:000000000000620B                 db 0FFh
.rodata:000000000000620C                 db 0FFh
.rodata:000000000000620D                 db 0FFh
.rodata:000000000000620E                 db 0FFh
.rodata:000000000000620F                 db 0FFh
.rodata:0000000000006210                 db 0FFh
.rodata:0000000000006211                 db 0FFh
.rodata:0000000000006212                 db 0FFh
.rodata:0000000000006213                 db 0FFh
.rodata:0000000000006214                 db 0FFh
.rodata:0000000000006215                 db 0FFh
.rodata:0000000000006216                 db 0FFh
.rodata:0000000000006217                 db 0FFh
.rodata:0000000000006218                 db 0FFh
.rodata:0000000000006219                 db 0FFh
.rodata:000000000000621A                 db 0FFh
.rodata:000000000000621B                 db 0FFh
.rodata:000000000000621C                 db 0FFh
.rodata:000000000000621D                 db 0FFh
.rodata:000000000000621E                 db 0FFh
.rodata:000000000000621F                 db 0FFh
.rodata:0000000000006220                 db 0FFh
.rodata:0000000000006221                 db 0FFh
.rodata:0000000000006222                 db 0FFh
.rodata:0000000000006223                 db 0FFh
.rodata:0000000000006224                 db 0FFh
.rodata:0000000000006225                 db 0FFh
.rodata:0000000000006226                 db 0FFh
.rodata:0000000000006227                 db 0FFh
.rodata:0000000000006228                 db 0FFh
.rodata:0000000000006229                 db 0FFh
.rodata:000000000000622A                 db 0FFh
.rodata:000000000000622B                 db 0FFh
.rodata:000000000000622C                 db 0FFh
.rodata:000000000000622D                 db 0FFh
.rodata:000000000000622E                 db 0FFh
.rodata:000000000000622F                 db 0FFh
.rodata:0000000000006230                 db 0FFh
.rodata:0000000000006231                 db 0FFh
.rodata:0000000000006232                 db 0FFh
.rodata:0000000000006233                 db 0FFh
.rodata:0000000000006234                 db 0FFh
.rodata:0000000000006235                 db 0FFh
.rodata:0000000000006236                 db 0FFh
.rodata:0000000000006237                 db 0FFh
.rodata:0000000000006238                 db 0FFh
.rodata:0000000000006239                 db 0FFh
.rodata:000000000000623A                 db 0FFh
.rodata:000000000000623B                 db 0FFh
.rodata:000000000000623C                 db 0FFh
.rodata:000000000000623D                 db 0FFh
.rodata:000000000000623E                 db 0FFh
.rodata:000000000000623F                 db 0FFh
.rodata:0000000000006240 b64c            db  41h ; A             ; DATA XREF: base64_encode:loc_2619↑o
.rodata:0000000000006240                                         ; base64_encode+12F↑o
.rodata:0000000000006241                 db  42h ; B
.rodata:0000000000006242                 db  43h ; C
.rodata:0000000000006243                 db  44h ; D
.rodata:0000000000006244                 db  45h ; E
.rodata:0000000000006245                 db  46h ; F
.rodata:0000000000006246                 db  47h ; G
.rodata:0000000000006247                 db  48h ; H
.rodata:0000000000006248                 db  49h ; I
.rodata:0000000000006249                 db  4Ah ; J
.rodata:000000000000624A                 db  4Bh ; K
.rodata:000000000000624B                 db  4Ch ; L
.rodata:000000000000624C                 db  4Dh ; M
.rodata:000000000000624D                 db  4Eh ; N
.rodata:000000000000624E                 db  4Fh ; O
.rodata:000000000000624F                 db  50h ; P
.rodata:0000000000006250                 db  51h ; Q
.rodata:0000000000006251                 db  52h ; R
.rodata:0000000000006252                 db  53h ; S
.rodata:0000000000006253                 db  54h ; T
.rodata:0000000000006254                 db  55h ; U
.rodata:0000000000006255                 db  56h ; V
.rodata:0000000000006256                 db  57h ; W
.rodata:0000000000006257                 db  58h ; X
.rodata:0000000000006258                 db  59h ; Y
.rodata:0000000000006259                 db  5Ah ; Z
.rodata:000000000000625A                 db  61h ; a
.rodata:000000000000625B                 db  62h ; b
.rodata:000000000000625C                 db  63h ; c
.rodata:000000000000625D                 db  64h ; d
.rodata:000000000000625E                 db  65h ; e
.rodata:000000000000625F                 db  66h ; f
.rodata:0000000000006260                 db  67h ; g
.rodata:0000000000006261                 db  68h ; h
.rodata:0000000000006262                 db  69h ; i
.rodata:0000000000006263                 db  6Ah ; j
.rodata:0000000000006264                 db  6Bh ; k
.rodata:0000000000006265                 db  6Ch ; l
.rodata:0000000000006266                 db  6Dh ; m
.rodata:0000000000006267                 db  6Eh ; n
.rodata:0000000000006268                 db  6Fh ; o
.rodata:0000000000006269                 db  70h ; p
.rodata:000000000000626A                 db  71h ; q
.rodata:000000000000626B                 db  72h ; r
.rodata:000000000000626C                 db  73h ; s
.rodata:000000000000626D                 db  74h ; t
.rodata:000000000000626E                 db  75h ; u
.rodata:000000000000626F                 db  76h ; v
.rodata:0000000000006270                 db  77h ; w
.rodata:0000000000006271                 db  78h ; x
.rodata:0000000000006272                 db  79h ; y
.rodata:0000000000006273                 db  7Ah ; z
.rodata:0000000000006274                 db  30h ; 0
.rodata:0000000000006275                 db  31h ; 1
.rodata:0000000000006276                 db  32h ; 2
.rodata:0000000000006277                 db  33h ; 3
.rodata:0000000000006278                 db  34h ; 4
.rodata:0000000000006279                 db  35h ; 5
.rodata:000000000000627A                 db  36h ; 6
.rodata:000000000000627B                 db  37h ; 7
.rodata:000000000000627C                 db  38h ; 8
.rodata:000000000000627D                 db  39h ; 9
.rodata:000000000000627E                 db  2Bh ; +
.rodata:000000000000627F                 db  2Fh ; /
.rodata:0000000000006280 ; const char aS[4]
.rodata:0000000000006280 aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000006280                                         ; xnumtoumax+7D↑o
.rodata:0000000000006284 ; const char format[]
.rodata:0000000000006284 format          dd offset unk_7325      ; DATA XREF: main+1B9↑o
.rodata:0000000000006284                                         ; main+6AB↑o ...
.rodata:0000000000006288 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000006288                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000062C0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000062C8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000062C8                                         ; main+16D↑o ...
.rodata:00000000000062CC unk_62CC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000062CD                 db  80h
.rodata:00000000000062CE                 db  98h
.rodata:00000000000062CF                 db    0
.rodata:00000000000062D0 unk_62D0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000062D1                 db  80h
.rodata:00000000000062D2                 db  99h
.rodata:00000000000062D3                 db    0
.rodata:00000000000062D4 unk_62D4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000062D5                 db    7
.rodata:00000000000062D6                 db  65h ; e
.rodata:00000000000062D7                 db    0
.rodata:00000000000062D8 unk_62D8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000062D9                 db 0AFh
.rodata:00000000000062DA                 db    0
.rodata:00000000000062DB unk_62DB        db  22h ; "             ; DATA XREF: gettext_quote:loc_2DC0↑o
.rodata:00000000000062DB                                         ; quotearg_buffer_restyled:loc_3B7B↑o ...
.rodata:00000000000062DC                 db    0
.rodata:00000000000062DD ; const char asc_62DD[2]
.rodata:00000000000062DD asc_62DD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000062DD                                         ; quotearg_buffer_restyled:loc_2F43↑o ...
.rodata:00000000000062DF ; const char asc_62DF[2]
.rodata:00000000000062DF asc_62DF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000062DF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000062E1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000062E9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000208BE8↓o
.rodata:00000000000062EF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000208BF0↓o
.rodata:00000000000062FC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000208BF8↓o
.rodata:00000000000062FC                                         ; .data.rel.ro:0000000000208C18↓o
.rodata:0000000000006309 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000006309                                         ; DATA XREF: .data.rel.ro:0000000000208C00↓o
.rodata:000000000000631D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000208C08↓o
.rodata:000000000000631F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000208C10↓o
.rodata:0000000000006327 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000208C28↓o
.rodata:000000000000632F                 align 20h
.rodata:0000000000006340 jpt_2F21        dd offset loc_3CCA - 6340h
.rodata:0000000000006340                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000006340                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000006340                 dd offset loc_2F23 - 6340h ; jump table for switch statement
.rodata:0000000000006340                 dd offset loc_3EF8 - 6340h
.rodata:0000000000006340                 dd offset loc_3D04 - 6340h
.rodata:0000000000006340                 dd offset loc_3AF4 - 6340h
.rodata:0000000000006340                 dd offset loc_3B50 - 6340h
.rodata:0000000000006340                 dd offset loc_3BA5 - 6340h
.rodata:0000000000006340                 dd offset loc_3BEA - 6340h
.rodata:0000000000006340                 dd offset loc_3C24 - 6340h
.rodata:0000000000006340                 dd offset loc_3C24 - 6340h
.rodata:0000000000006340                 dd offset loc_3C24 - 6340h
.rodata:000000000000636C jpt_307E        dd offset loc_32A0 - 636Ch, offset def_307E - 636Ch, offset def_307E - 636Ch
.rodata:000000000000636C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000636C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000636C                 dd offset def_307E - 636Ch, offset def_307E - 636Ch, offset def_307E - 636Ch ; jump table for switch statement
.rodata:000000000000636C                 dd offset def_307E - 636Ch, offset loc_32E0 - 636Ch, offset loc_31E8 - 636Ch
.rodata:000000000000636C                 dd offset loc_31A8 - 636Ch, offset loc_3370 - 636Ch, offset loc_3360 - 636Ch
.rodata:000000000000636C                 dd offset loc_3350 - 636Ch, offset loc_3340 - 636Ch, offset def_307E - 636Ch
.rodata:000000000000636C                 dd offset def_307E - 636Ch, offset def_307E - 636Ch, offset def_307E - 636Ch
.rodata:000000000000636C                 dd offset def_307E - 636Ch, offset def_307E - 636Ch, offset def_307E - 636Ch
.rodata:000000000000636C                 dd offset def_307E - 636Ch, offset def_307E - 636Ch, offset def_307E - 636Ch
.rodata:000000000000636C                 dd offset def_307E - 636Ch, offset def_307E - 636Ch, offset def_307E - 636Ch
.rodata:000000000000636C                 dd offset def_307E - 636Ch, offset def_307E - 636Ch, offset def_307E - 636Ch
.rodata:000000000000636C                 dd offset def_307E - 636Ch, offset def_307E - 636Ch, offset loc_3330 - 636Ch
.rodata:000000000000636C                 dd offset loc_3320 - 636Ch, offset loc_3320 - 636Ch, offset loc_32F0 - 636Ch
.rodata:000000000000636C                 dd offset loc_3320 - 636Ch, offset loc_32C8 - 636Ch, offset loc_3320 - 636Ch
.rodata:000000000000636C                 dd offset loc_3183 - 636Ch, offset loc_3320 - 636Ch, offset loc_3320 - 636Ch
.rodata:000000000000636C                 dd offset loc_3320 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_3320 - 636Ch
.rodata:000000000000636C                 dd offset loc_3320 - 636Ch, offset loc_3320 - 636Ch, offset loc_3320 - 636Ch
.rodata:000000000000636C                 dd offset loc_3153 - 636Ch, offset def_307E - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_3320 - 636Ch, offset loc_31F8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_3320 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_3320 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch, offset loc_32C8 - 636Ch
.rodata:000000000000636C                 dd offset loc_3083 - 636Ch, offset loc_3320 - 636Ch, offset loc_3083 - 636Ch
.rodata:000000000000636C                 dd offset loc_32F0 - 636Ch
.rodata:0000000000006568 jpt_340A        dd offset loc_3470 - 6568h, offset def_340A - 6568h, offset def_340A - 6568h
.rodata:0000000000006568                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000006568                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000006568                 dd offset def_340A - 6568h, offset def_340A - 6568h, offset def_340A - 6568h ; jump table for switch statement
.rodata:0000000000006568                 dd offset def_340A - 6568h, offset loc_3460 - 6568h, offset loc_35B0 - 6568h
.rodata:0000000000006568                 dd offset loc_3598 - 6568h, offset loc_3448 - 6568h, offset loc_3588 - 6568h
.rodata:0000000000006568                 dd offset loc_3430 - 6568h, offset loc_3570 - 6568h, offset def_340A - 6568h
.rodata:0000000000006568                 dd offset def_340A - 6568h, offset def_340A - 6568h, offset def_340A - 6568h
.rodata:0000000000006568                 dd offset def_340A - 6568h, offset def_340A - 6568h, offset def_340A - 6568h
.rodata:0000000000006568                 dd offset def_340A - 6568h, offset def_340A - 6568h, offset def_340A - 6568h
.rodata:0000000000006568                 dd offset def_340A - 6568h, offset def_340A - 6568h, offset def_340A - 6568h
.rodata:0000000000006568                 dd offset def_340A - 6568h, offset def_340A - 6568h, offset def_340A - 6568h
.rodata:0000000000006568                 dd offset def_340A - 6568h, offset def_340A - 6568h, offset loc_3558 - 6568h
.rodata:0000000000006568                 dd offset loc_3540 - 6568h, offset loc_3540 - 6568h, offset loc_3528 - 6568h
.rodata:0000000000006568                 dd offset loc_3540 - 6568h, offset loc_3510 - 6568h, offset loc_3540 - 6568h
.rodata:0000000000006568                 dd offset loc_3180 - 6568h, offset loc_3540 - 6568h, offset loc_3540 - 6568h
.rodata:0000000000006568                 dd offset loc_3540 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3540 - 6568h
.rodata:0000000000006568                 dd offset loc_3540 - 6568h, offset loc_3540 - 6568h, offset loc_3540 - 6568h
.rodata:0000000000006568                 dd offset loc_3150 - 6568h, offset def_340A - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3540 - 6568h, offset loc_3410 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3540 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3540 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3510 - 6568h, offset loc_3510 - 6568h, offset loc_3510 - 6568h
.rodata:0000000000006568                 dd offset loc_3080 - 6568h, offset loc_3540 - 6568h, offset loc_3080 - 6568h
.rodata:0000000000006568                 dd offset loc_3528 - 6568h
.rodata:0000000000006764                 align 20h
.rodata:0000000000006780                 public quoting_style_vals
.rodata:0000000000006780 quoting_style_vals db    0
.rodata:0000000000006781                 db    0
.rodata:0000000000006782                 db    0
.rodata:0000000000006783                 db    0
.rodata:0000000000006784                 db    1
.rodata:0000000000006785                 db    0
.rodata:0000000000006786                 db    0
.rodata:0000000000006787                 db    0
.rodata:0000000000006788                 db    2
.rodata:0000000000006789                 db    0
.rodata:000000000000678A                 db    0
.rodata:000000000000678B                 db    0
.rodata:000000000000678C                 db    3
.rodata:000000000000678D                 db    0
.rodata:000000000000678E                 db    0
.rodata:000000000000678F                 db    0
.rodata:0000000000006790                 db    4
.rodata:0000000000006791                 db    0
.rodata:0000000000006792                 db    0
.rodata:0000000000006793                 db    0
.rodata:0000000000006794                 db    5
.rodata:0000000000006795                 db    0
.rodata:0000000000006796                 db    0
.rodata:0000000000006797                 db    0
.rodata:0000000000006798                 db    6
.rodata:0000000000006799                 db    0
.rodata:000000000000679A                 db    0
.rodata:000000000000679B                 db    0
.rodata:000000000000679C                 db    7
.rodata:000000000000679D                 db    0
.rodata:000000000000679E                 db    0
.rodata:000000000000679F                 db    0
.rodata:00000000000067A0                 db    8
.rodata:00000000000067A1                 db    0
.rodata:00000000000067A2                 db    0
.rodata:00000000000067A3                 db    0
.rodata:00000000000067A4                 db    9
.rodata:00000000000067A5                 db    0
.rodata:00000000000067A6                 db    0
.rodata:00000000000067A7                 db    0
.rodata:00000000000067A8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000067B4 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000067BB ; const char aC_0[]
.rodata:00000000000067BB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4A6C↑o
.rodata:00000000000067BF ; const char aWrittenByS[]
.rodata:00000000000067BF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000067BF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000067CF ; const char aWrittenBySAndS[]
.rodata:00000000000067CF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000067CF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000067E6 ; const char aWrittenBySSAnd[]
.rodata:00000000000067E6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000067E6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006802 ; const char aReportBugsToS[]
.rodata:0000000000006802 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006802                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006817 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006817                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000682D ; const char aSHomePageS[]
.rodata:000000000000682D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000682D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006841                 align 8
.rodata:0000000000006848 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006848 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006848                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006848                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006848                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006848                 db '.',0Ah
.rodata:0000000000006848                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006848                 db 0Ah,0
.rodata:0000000000006914                 align 8
.rodata:0000000000006918 ; const char aWrittenBySSSAn[]
.rodata:0000000000006918 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006918                                         ; DATA XREF: version_etc_arn:loc_4CC0↑o
.rodata:0000000000006918                 db 'and %s.',0Ah,0
.rodata:0000000000006938 ; const char aWrittenBySSSSA[]
.rodata:0000000000006938 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006938                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000006938                 db '%s, and %s.',0Ah,0
.rodata:000000000000695C                 align 20h
.rodata:0000000000006960 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000006960 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006960                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000006960                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006988 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006988 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006988                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006988                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000069B4                 align 8
.rodata:00000000000069B8 ; const char aWrittenBySSSSS[]
.rodata:00000000000069B8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000069B8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000069B8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000069B8                 db 'and %s.',0Ah,0
.rodata:00000000000069E8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000069E8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000069E8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000069E8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000069E8                 db '%s, and %s.',0Ah,0
.rodata:0000000000006A1C                 align 20h
.rodata:0000000000006A20 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006A20                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000006A20                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006A20                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000006A5C                 align 20h
.rodata:0000000000006A60 ; const char aGeneralHelpUsi[]
.rodata:0000000000006A60 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000006A60                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000006A60                 db 0
.rodata:0000000000006AA1                 align 4
.rodata:0000000000006AA4 jpt_4AD4        dd offset loc_4B56 - 6AA4h
.rodata:0000000000006AA4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006AA4                                         ; version_etc_arn+9D↑r
.rodata:0000000000006AA4                 dd offset loc_4BE8 - 6AA4h ; jump table for switch statement
.rodata:0000000000006AA4                 dd offset loc_4C28 - 6AA4h
.rodata:0000000000006AA4                 dd offset loc_4C70 - 6AA4h
.rodata:0000000000006AA4                 dd offset loc_4CC0 - 6AA4h
.rodata:0000000000006AA4                 dd offset loc_4D18 - 6AA4h
.rodata:0000000000006AA4                 dd offset loc_4D48 - 6AA4h
.rodata:0000000000006AA4                 dd offset loc_4DB0 - 6AA4h
.rodata:0000000000006AA4                 dd offset loc_4AE0 - 6AA4h
.rodata:0000000000006AA4                 dd offset loc_4B90 - 6AA4h
.rodata:0000000000006ACC                 align 20h
.rodata:0000000000006AE0                 public version_etc_copyright
.rodata:0000000000006AE0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006AE0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000006B0F ; const char aMemoryExhauste[]
.rodata:0000000000006B0F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000006B20 ; const char file[]
.rodata:0000000000006B20 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000006B20                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:0000000000006B40 ; const char assertion[]
.rodata:0000000000006B40 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000006B40                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:0000000000006B66                 align 8
.rodata:0000000000006B68 jpt_55E6        dd offset loc_5736 - 6B68h, offset def_55E6 - 6B68h, offset def_55E6 - 6B68h
.rodata:0000000000006B68                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:0000000000006B68                                         ; xstrtoumax+1CF↑r
.rodata:0000000000006B68                 dd offset loc_5713 - 6B68h, offset def_55E6 - 6B68h, offset loc_574C - 6B68h ; jump table for switch statement
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset def_55E6 - 6B68h, offset def_55E6 - 6B68h
.rodata:0000000000006B68                 dd offset loc_56CF - 6B68h, offset def_55E6 - 6B68h, offset loc_55E8 - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset def_55E6 - 6B68h, offset loc_56F0 - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset def_55E6 - 6B68h, offset def_55E6 - 6B68h
.rodata:0000000000006B68                 dd offset loc_56AF - 6B68h, offset def_55E6 - 6B68h, offset def_55E6 - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset def_55E6 - 6B68h, offset loc_568A - 6B68h
.rodata:0000000000006B68                 dd offset loc_5664 - 6B68h, offset def_55E6 - 6B68h, offset def_55E6 - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset def_55E6 - 6B68h, offset def_55E6 - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset def_55E6 - 6B68h, offset loc_564D - 6B68h
.rodata:0000000000006B68                 dd offset loc_5610 - 6B68h, offset def_55E6 - 6B68h, offset def_55E6 - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset loc_574C - 6B68h, offset def_55E6 - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset def_55E6 - 6B68h, offset loc_56CF - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset loc_55E8 - 6B68h, offset def_55E6 - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset def_55E6 - 6B68h, offset def_55E6 - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset def_55E6 - 6B68h, offset loc_56AF - 6B68h
.rodata:0000000000006B68                 dd offset def_55E6 - 6B68h, offset def_55E6 - 6B68h, offset loc_5637 - 6B68h
.rodata:0000000000006C40 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000006C40 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:0000000000006C40                                         ; DATA XREF: xstrtoumax:loc_5795↑o
.rodata:0000000000006C4B aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000006C4D aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5AA0↑o
.rodata:0000000000006C53 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000006C53                                         ; locale_charset:loc_5AF0↑o
.rodata:0000000000006C53 _rodata         ends
.rodata:0000000000006C53
LOAD:0000000000006C59 ; ===========================================================================
LOAD:0000000000006C59
LOAD:0000000000006C59 ; Segment type: Pure code
LOAD:0000000000006C59 ; Segment permissions: Read/Execute
LOAD:0000000000006C59 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006C59                 assume cs:LOAD
LOAD:0000000000006C59                 ;org 6C59h
LOAD:0000000000006C59                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006C59                 align 4
LOAD:0000000000006C59 LOAD            ends
LOAD:0000000000006C59
.eh_frame_hdr:0000000000006C5C ; ===========================================================================
.eh_frame_hdr:0000000000006C5C
.eh_frame_hdr:0000000000006C5C ; Segment type: Pure data
.eh_frame_hdr:0000000000006C5C ; Segment permissions: Read
.eh_frame_hdr:0000000000006C5C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000006C5C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000006C5C                 ;org 6C5Ch
.eh_frame_hdr:0000000000006C5C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000006C5D                 db  1Bh
.eh_frame_hdr:0000000000006C5E                 db    3
.eh_frame_hdr:0000000000006C5F                 db  3Bh ; ;
.eh_frame_hdr:0000000000006C60                 db  98h
.eh_frame_hdr:0000000000006C61                 db    2
.eh_frame_hdr:0000000000006C62                 db    0
.eh_frame_hdr:0000000000006C63                 db    0
.eh_frame_hdr:0000000000006C64                 db  52h ; R
.eh_frame_hdr:0000000000006C65                 db    0
.eh_frame_hdr:0000000000006C66                 db    0
.eh_frame_hdr:0000000000006C67                 db    0
.eh_frame_hdr:0000000000006C68                 db  64h ; d
.eh_frame_hdr:0000000000006C69                 db 0A8h
.eh_frame_hdr:0000000000006C6A                 db 0FFh
.eh_frame_hdr:0000000000006C6B                 db 0FFh
.eh_frame_hdr:0000000000006C6C                 db 0E4h
.eh_frame_hdr:0000000000006C6D                 db    2
.eh_frame_hdr:0000000000006C6E                 db    0
.eh_frame_hdr:0000000000006C6F                 db    0
.eh_frame_hdr:0000000000006C70                 db  94h
.eh_frame_hdr:0000000000006C71                 db 0ABh
.eh_frame_hdr:0000000000006C72                 db 0FFh
.eh_frame_hdr:0000000000006C73                 db 0FFh
.eh_frame_hdr:0000000000006C74                 db  0Ch
.eh_frame_hdr:0000000000006C75                 db    3
.eh_frame_hdr:0000000000006C76                 db    0
.eh_frame_hdr:0000000000006C77                 db    0
.eh_frame_hdr:0000000000006C78                 db 0A4h
.eh_frame_hdr:0000000000006C79                 db 0ABh
.eh_frame_hdr:0000000000006C7A                 db 0FFh
.eh_frame_hdr:0000000000006C7B                 db 0FFh
.eh_frame_hdr:0000000000006C7C                 db  50h ; P
.eh_frame_hdr:0000000000006C7D                 db    3
.eh_frame_hdr:0000000000006C7E                 db    0
.eh_frame_hdr:0000000000006C7F                 db    0
.eh_frame_hdr:0000000000006C80                 db 0A4h
.eh_frame_hdr:0000000000006C81                 db 0B3h
.eh_frame_hdr:0000000000006C82                 db 0FFh
.eh_frame_hdr:0000000000006C83                 db 0FFh
.eh_frame_hdr:0000000000006C84                 db 0B4h
.eh_frame_hdr:0000000000006C85                 db    2
.eh_frame_hdr:0000000000006C86                 db    0
.eh_frame_hdr:0000000000006C87                 db    0
.eh_frame_hdr:0000000000006C88                 db 0B4h
.eh_frame_hdr:0000000000006C89                 db 0B4h
.eh_frame_hdr:0000000000006C8A                 db 0FFh
.eh_frame_hdr:0000000000006C8B                 db 0FFh
.eh_frame_hdr:0000000000006C8C                 db  24h ; $
.eh_frame_hdr:0000000000006C8D                 db    3
.eh_frame_hdr:0000000000006C8E                 db    0
.eh_frame_hdr:0000000000006C8F                 db    0
.eh_frame_hdr:0000000000006C90                 db  94h
.eh_frame_hdr:0000000000006C91                 db 0B8h
.eh_frame_hdr:0000000000006C92                 db 0FFh
.eh_frame_hdr:0000000000006C93                 db 0FFh
.eh_frame_hdr:0000000000006C94                 db 0A4h
.eh_frame_hdr:0000000000006C95                 db    3
.eh_frame_hdr:0000000000006C96                 db    0
.eh_frame_hdr:0000000000006C97                 db    0
.eh_frame_hdr:0000000000006C98                 db 0A4h
.eh_frame_hdr:0000000000006C99                 db 0B9h
.eh_frame_hdr:0000000000006C9A                 db 0FFh
.eh_frame_hdr:0000000000006C9B                 db 0FFh
.eh_frame_hdr:0000000000006C9C                 db 0B8h
.eh_frame_hdr:0000000000006C9D                 db    3
.eh_frame_hdr:0000000000006C9E                 db    0
.eh_frame_hdr:0000000000006C9F                 db    0
.eh_frame_hdr:0000000000006CA0                 db  64h ; d
.eh_frame_hdr:0000000000006CA1                 db 0BBh
.eh_frame_hdr:0000000000006CA2                 db 0FFh
.eh_frame_hdr:0000000000006CA3                 db 0FFh
.eh_frame_hdr:0000000000006CA4                 db 0CCh
.eh_frame_hdr:0000000000006CA5                 db    3
.eh_frame_hdr:0000000000006CA6                 db    0
.eh_frame_hdr:0000000000006CA7                 db    0
.eh_frame_hdr:0000000000006CA8                 db 0F4h
.eh_frame_hdr:0000000000006CA9                 db 0BBh
.eh_frame_hdr:0000000000006CAA                 db 0FFh
.eh_frame_hdr:0000000000006CAB                 db 0FFh
.eh_frame_hdr:0000000000006CAC                 db  18h
.eh_frame_hdr:0000000000006CAD                 db    4
.eh_frame_hdr:0000000000006CAE                 db    0
.eh_frame_hdr:0000000000006CAF                 db    0
.eh_frame_hdr:0000000000006CB0                 db  14h
.eh_frame_hdr:0000000000006CB1                 db 0BCh
.eh_frame_hdr:0000000000006CB2                 db 0FFh
.eh_frame_hdr:0000000000006CB3                 db 0FFh
.eh_frame_hdr:0000000000006CB4                 db  2Ch ; ,
.eh_frame_hdr:0000000000006CB5                 db    4
.eh_frame_hdr:0000000000006CB6                 db    0
.eh_frame_hdr:0000000000006CB7                 db    0
.eh_frame_hdr:0000000000006CB8                 db  24h ; $
.eh_frame_hdr:0000000000006CB9                 db 0BCh
.eh_frame_hdr:0000000000006CBA                 db 0FFh
.eh_frame_hdr:0000000000006CBB                 db 0FFh
.eh_frame_hdr:0000000000006CBC                 db  40h ; @
.eh_frame_hdr:0000000000006CBD                 db    4
.eh_frame_hdr:0000000000006CBE                 db    0
.eh_frame_hdr:0000000000006CBF                 db    0
.eh_frame_hdr:0000000000006CC0                 db 0D4h
.eh_frame_hdr:0000000000006CC1                 db 0BEh
.eh_frame_hdr:0000000000006CC2                 db 0FFh
.eh_frame_hdr:0000000000006CC3                 db 0FFh
.eh_frame_hdr:0000000000006CC4                 db  8Ch
.eh_frame_hdr:0000000000006CC5                 db    4
.eh_frame_hdr:0000000000006CC6                 db    0
.eh_frame_hdr:0000000000006CC7                 db    0
.eh_frame_hdr:0000000000006CC8                 db  94h
.eh_frame_hdr:0000000000006CC9                 db 0BFh
.eh_frame_hdr:0000000000006CCA                 db 0FFh
.eh_frame_hdr:0000000000006CCB                 db 0FFh
.eh_frame_hdr:0000000000006CCC                 db 0D4h
.eh_frame_hdr:0000000000006CCD                 db    4
.eh_frame_hdr:0000000000006CCE                 db    0
.eh_frame_hdr:0000000000006CCF                 db    0
.eh_frame_hdr:0000000000006CD0                 db 0A4h
.eh_frame_hdr:0000000000006CD1                 db 0BFh
.eh_frame_hdr:0000000000006CD2                 db 0FFh
.eh_frame_hdr:0000000000006CD3                 db 0FFh
.eh_frame_hdr:0000000000006CD4                 db 0E8h
.eh_frame_hdr:0000000000006CD5                 db    4
.eh_frame_hdr:0000000000006CD6                 db    0
.eh_frame_hdr:0000000000006CD7                 db    0
.eh_frame_hdr:0000000000006CD8                 db 0B4h
.eh_frame_hdr:0000000000006CD9                 db 0BFh
.eh_frame_hdr:0000000000006CDA                 db 0FFh
.eh_frame_hdr:0000000000006CDB                 db 0FFh
.eh_frame_hdr:0000000000006CDC                 db 0FCh
.eh_frame_hdr:0000000000006CDD                 db    4
.eh_frame_hdr:0000000000006CDE                 db    0
.eh_frame_hdr:0000000000006CDF                 db    0
.eh_frame_hdr:0000000000006CE0                 db  64h ; d
.eh_frame_hdr:0000000000006CE1                 db 0C0h
.eh_frame_hdr:0000000000006CE2                 db 0FFh
.eh_frame_hdr:0000000000006CE3                 db 0FFh
.eh_frame_hdr:0000000000006CE4                 db  2Ch ; ,
.eh_frame_hdr:0000000000006CE5                 db    5
.eh_frame_hdr:0000000000006CE6                 db    0
.eh_frame_hdr:0000000000006CE7                 db    0
.eh_frame_hdr:0000000000006CE8                 db  74h ; t
.eh_frame_hdr:0000000000006CE9                 db 0C0h
.eh_frame_hdr:0000000000006CEA                 db 0FFh
.eh_frame_hdr:0000000000006CEB                 db 0FFh
.eh_frame_hdr:0000000000006CEC                 db  40h ; @
.eh_frame_hdr:0000000000006CED                 db    5
.eh_frame_hdr:0000000000006CEE                 db    0
.eh_frame_hdr:0000000000006CEF                 db    0
.eh_frame_hdr:0000000000006CF0                 db 0A4h
.eh_frame_hdr:0000000000006CF1                 db 0C0h
.eh_frame_hdr:0000000000006CF2                 db 0FFh
.eh_frame_hdr:0000000000006CF3                 db 0FFh
.eh_frame_hdr:0000000000006CF4                 db  5Ch ; \
.eh_frame_hdr:0000000000006CF5                 db    5
.eh_frame_hdr:0000000000006CF6                 db    0
.eh_frame_hdr:0000000000006CF7                 db    0
.eh_frame_hdr:0000000000006CF8                 db  44h ; D
.eh_frame_hdr:0000000000006CF9                 db 0C1h
.eh_frame_hdr:0000000000006CFA                 db 0FFh
.eh_frame_hdr:0000000000006CFB                 db 0FFh
.eh_frame_hdr:0000000000006CFC                 db  7Ch ; |
.eh_frame_hdr:0000000000006CFD                 db    5
.eh_frame_hdr:0000000000006CFE                 db    0
.eh_frame_hdr:0000000000006CFF                 db    0
.eh_frame_hdr:0000000000006D00                 db  34h ; 4
.eh_frame_hdr:0000000000006D01                 db 0C2h
.eh_frame_hdr:0000000000006D02                 db 0FFh
.eh_frame_hdr:0000000000006D03                 db 0FFh
.eh_frame_hdr:0000000000006D04                 db 0C0h
.eh_frame_hdr:0000000000006D05                 db    5
.eh_frame_hdr:0000000000006D06                 db    0
.eh_frame_hdr:0000000000006D07                 db    0
.eh_frame_hdr:0000000000006D08                 db  74h ; t
.eh_frame_hdr:0000000000006D09                 db 0D4h
.eh_frame_hdr:0000000000006D0A                 db 0FFh
.eh_frame_hdr:0000000000006D0B                 db 0FFh
.eh_frame_hdr:0000000000006D0C                 db  38h ; 8
.eh_frame_hdr:0000000000006D0D                 db    6
.eh_frame_hdr:0000000000006D0E                 db    0
.eh_frame_hdr:0000000000006D0F                 db    0
.eh_frame_hdr:0000000000006D10                 db  24h ; $
.eh_frame_hdr:0000000000006D11                 db 0D6h
.eh_frame_hdr:0000000000006D12                 db 0FFh
.eh_frame_hdr:0000000000006D13                 db 0FFh
.eh_frame_hdr:0000000000006D14                 db 0A4h
.eh_frame_hdr:0000000000006D15                 db    6
.eh_frame_hdr:0000000000006D16                 db    0
.eh_frame_hdr:0000000000006D17                 db    0
.eh_frame_hdr:0000000000006D18                 db  64h ; d
.eh_frame_hdr:0000000000006D19                 db 0D6h
.eh_frame_hdr:0000000000006D1A                 db 0FFh
.eh_frame_hdr:0000000000006D1B                 db 0FFh
.eh_frame_hdr:0000000000006D1C                 db 0D0h
.eh_frame_hdr:0000000000006D1D                 db    6
.eh_frame_hdr:0000000000006D1E                 db    0
.eh_frame_hdr:0000000000006D1F                 db    0
.eh_frame_hdr:0000000000006D20                 db  84h
.eh_frame_hdr:0000000000006D21                 db 0D6h
.eh_frame_hdr:0000000000006D22                 db 0FFh
.eh_frame_hdr:0000000000006D23                 db 0FFh
.eh_frame_hdr:0000000000006D24                 db 0E4h
.eh_frame_hdr:0000000000006D25                 db    6
.eh_frame_hdr:0000000000006D26                 db    0
.eh_frame_hdr:0000000000006D27                 db    0
.eh_frame_hdr:0000000000006D28                 db 0A4h
.eh_frame_hdr:0000000000006D29                 db 0D6h
.eh_frame_hdr:0000000000006D2A                 db 0FFh
.eh_frame_hdr:0000000000006D2B                 db 0FFh
.eh_frame_hdr:0000000000006D2C                 db 0F8h
.eh_frame_hdr:0000000000006D2D                 db    6
.eh_frame_hdr:0000000000006D2E                 db    0
.eh_frame_hdr:0000000000006D2F                 db    0
.eh_frame_hdr:0000000000006D30                 db 0E4h
.eh_frame_hdr:0000000000006D31                 db 0D6h
.eh_frame_hdr:0000000000006D32                 db 0FFh
.eh_frame_hdr:0000000000006D33                 db 0FFh
.eh_frame_hdr:0000000000006D34                 db  0Ch
.eh_frame_hdr:0000000000006D35                 db    7
.eh_frame_hdr:0000000000006D36                 db    0
.eh_frame_hdr:0000000000006D37                 db    0
.eh_frame_hdr:0000000000006D38                 db    4
.eh_frame_hdr:0000000000006D39                 db 0D7h
.eh_frame_hdr:0000000000006D3A                 db 0FFh
.eh_frame_hdr:0000000000006D3B                 db 0FFh
.eh_frame_hdr:0000000000006D3C                 db  20h
.eh_frame_hdr:0000000000006D3D                 db    7
.eh_frame_hdr:0000000000006D3E                 db    0
.eh_frame_hdr:0000000000006D3F                 db    0
.eh_frame_hdr:0000000000006D40                 db  34h ; 4
.eh_frame_hdr:0000000000006D41                 db 0D7h
.eh_frame_hdr:0000000000006D42                 db 0FFh
.eh_frame_hdr:0000000000006D43                 db 0FFh
.eh_frame_hdr:0000000000006D44                 db  34h ; 4
.eh_frame_hdr:0000000000006D45                 db    7
.eh_frame_hdr:0000000000006D46                 db    0
.eh_frame_hdr:0000000000006D47                 db    0
.eh_frame_hdr:0000000000006D48                 db 0B4h
.eh_frame_hdr:0000000000006D49                 db 0D7h
.eh_frame_hdr:0000000000006D4A                 db 0FFh
.eh_frame_hdr:0000000000006D4B                 db 0FFh
.eh_frame_hdr:0000000000006D4C                 db  88h
.eh_frame_hdr:0000000000006D4D                 db    7
.eh_frame_hdr:0000000000006D4E                 db    0
.eh_frame_hdr:0000000000006D4F                 db    0
.eh_frame_hdr:0000000000006D50                 db 0A4h
.eh_frame_hdr:0000000000006D51                 db 0D8h
.eh_frame_hdr:0000000000006D52                 db 0FFh
.eh_frame_hdr:0000000000006D53                 db 0FFh
.eh_frame_hdr:0000000000006D54                 db 0F4h
.eh_frame_hdr:0000000000006D55                 db    7
.eh_frame_hdr:0000000000006D56                 db    0
.eh_frame_hdr:0000000000006D57                 db    0
.eh_frame_hdr:0000000000006D58                 db 0B4h
.eh_frame_hdr:0000000000006D59                 db 0D8h
.eh_frame_hdr:0000000000006D5A                 db 0FFh
.eh_frame_hdr:0000000000006D5B                 db 0FFh
.eh_frame_hdr:0000000000006D5C                 db    8
.eh_frame_hdr:0000000000006D5D                 db    8
.eh_frame_hdr:0000000000006D5E                 db    0
.eh_frame_hdr:0000000000006D5F                 db    0
.eh_frame_hdr:0000000000006D60                 db  54h ; T
.eh_frame_hdr:0000000000006D61                 db 0D9h
.eh_frame_hdr:0000000000006D62                 db 0FFh
.eh_frame_hdr:0000000000006D63                 db 0FFh
.eh_frame_hdr:0000000000006D64                 db  34h ; 4
.eh_frame_hdr:0000000000006D65                 db    8
.eh_frame_hdr:0000000000006D66                 db    0
.eh_frame_hdr:0000000000006D67                 db    0
.eh_frame_hdr:0000000000006D68                 db  74h ; t
.eh_frame_hdr:0000000000006D69                 db 0D9h
.eh_frame_hdr:0000000000006D6A                 db 0FFh
.eh_frame_hdr:0000000000006D6B                 db 0FFh
.eh_frame_hdr:0000000000006D6C                 db  48h ; H
.eh_frame_hdr:0000000000006D6D                 db    8
.eh_frame_hdr:0000000000006D6E                 db    0
.eh_frame_hdr:0000000000006D6F                 db    0
.eh_frame_hdr:0000000000006D70                 db  84h
.eh_frame_hdr:0000000000006D71                 db 0D9h
.eh_frame_hdr:0000000000006D72                 db 0FFh
.eh_frame_hdr:0000000000006D73                 db 0FFh
.eh_frame_hdr:0000000000006D74                 db  5Ch ; \
.eh_frame_hdr:0000000000006D75                 db    8
.eh_frame_hdr:0000000000006D76                 db    0
.eh_frame_hdr:0000000000006D77                 db    0
.eh_frame_hdr:0000000000006D78                 db 0A4h
.eh_frame_hdr:0000000000006D79                 db 0D9h
.eh_frame_hdr:0000000000006D7A                 db 0FFh
.eh_frame_hdr:0000000000006D7B                 db 0FFh
.eh_frame_hdr:0000000000006D7C                 db  70h ; p
.eh_frame_hdr:0000000000006D7D                 db    8
.eh_frame_hdr:0000000000006D7E                 db    0
.eh_frame_hdr:0000000000006D7F                 db    0
.eh_frame_hdr:0000000000006D80                 db 0C4h
.eh_frame_hdr:0000000000006D81                 db 0D9h
.eh_frame_hdr:0000000000006D82                 db 0FFh
.eh_frame_hdr:0000000000006D83                 db 0FFh
.eh_frame_hdr:0000000000006D84                 db  84h
.eh_frame_hdr:0000000000006D85                 db    8
.eh_frame_hdr:0000000000006D86                 db    0
.eh_frame_hdr:0000000000006D87                 db    0
.eh_frame_hdr:0000000000006D88                 db  54h ; T
.eh_frame_hdr:0000000000006D89                 db 0DAh
.eh_frame_hdr:0000000000006D8A                 db 0FFh
.eh_frame_hdr:0000000000006D8B                 db 0FFh
.eh_frame_hdr:0000000000006D8C                 db 0A0h
.eh_frame_hdr:0000000000006D8D                 db    8
.eh_frame_hdr:0000000000006D8E                 db    0
.eh_frame_hdr:0000000000006D8F                 db    0
.eh_frame_hdr:0000000000006D90                 db 0E4h
.eh_frame_hdr:0000000000006D91                 db 0DAh
.eh_frame_hdr:0000000000006D92                 db 0FFh
.eh_frame_hdr:0000000000006D93                 db 0FFh
.eh_frame_hdr:0000000000006D94                 db 0BCh
.eh_frame_hdr:0000000000006D95                 db    8
.eh_frame_hdr:0000000000006D96                 db    0
.eh_frame_hdr:0000000000006D97                 db    0
.eh_frame_hdr:0000000000006D98                 db 0F4h
.eh_frame_hdr:0000000000006D99                 db 0DAh
.eh_frame_hdr:0000000000006D9A                 db 0FFh
.eh_frame_hdr:0000000000006D9B                 db 0FFh
.eh_frame_hdr:0000000000006D9C                 db 0D0h
.eh_frame_hdr:0000000000006D9D                 db    8
.eh_frame_hdr:0000000000006D9E                 db    0
.eh_frame_hdr:0000000000006D9F                 db    0
.eh_frame_hdr:0000000000006DA0                 db    4
.eh_frame_hdr:0000000000006DA1                 db 0DBh
.eh_frame_hdr:0000000000006DA2                 db 0FFh
.eh_frame_hdr:0000000000006DA3                 db 0FFh
.eh_frame_hdr:0000000000006DA4                 db 0E4h
.eh_frame_hdr:0000000000006DA5                 db    8
.eh_frame_hdr:0000000000006DA6                 db    0
.eh_frame_hdr:0000000000006DA7                 db    0
.eh_frame_hdr:0000000000006DA8                 db 0A4h
.eh_frame_hdr:0000000000006DA9                 db 0DBh
.eh_frame_hdr:0000000000006DAA                 db 0FFh
.eh_frame_hdr:0000000000006DAB                 db 0FFh
.eh_frame_hdr:0000000000006DAC                 db    0
.eh_frame_hdr:0000000000006DAD                 db    9
.eh_frame_hdr:0000000000006DAE                 db    0
.eh_frame_hdr:0000000000006DAF                 db    0
.eh_frame_hdr:0000000000006DB0                 db 0B4h
.eh_frame_hdr:0000000000006DB1                 db 0DBh
.eh_frame_hdr:0000000000006DB2                 db 0FFh
.eh_frame_hdr:0000000000006DB3                 db 0FFh
.eh_frame_hdr:0000000000006DB4                 db  14h
.eh_frame_hdr:0000000000006DB5                 db    9
.eh_frame_hdr:0000000000006DB6                 db    0
.eh_frame_hdr:0000000000006DB7                 db    0
.eh_frame_hdr:0000000000006DB8                 db 0D4h
.eh_frame_hdr:0000000000006DB9                 db 0DBh
.eh_frame_hdr:0000000000006DBA                 db 0FFh
.eh_frame_hdr:0000000000006DBB                 db 0FFh
.eh_frame_hdr:0000000000006DBC                 db  28h ; (
.eh_frame_hdr:0000000000006DBD                 db    9
.eh_frame_hdr:0000000000006DBE                 db    0
.eh_frame_hdr:0000000000006DBF                 db    0
.eh_frame_hdr:0000000000006DC0                 db 0E4h
.eh_frame_hdr:0000000000006DC1                 db 0DBh
.eh_frame_hdr:0000000000006DC2                 db 0FFh
.eh_frame_hdr:0000000000006DC3                 db 0FFh
.eh_frame_hdr:0000000000006DC4                 db  3Ch ; <
.eh_frame_hdr:0000000000006DC5                 db    9
.eh_frame_hdr:0000000000006DC6                 db    0
.eh_frame_hdr:0000000000006DC7                 db    0
.eh_frame_hdr:0000000000006DC8                 db  74h ; t
.eh_frame_hdr:0000000000006DC9                 db 0DCh
.eh_frame_hdr:0000000000006DCA                 db 0FFh
.eh_frame_hdr:0000000000006DCB                 db 0FFh
.eh_frame_hdr:0000000000006DCC                 db  58h ; X
.eh_frame_hdr:0000000000006DCD                 db    9
.eh_frame_hdr:0000000000006DCE                 db    0
.eh_frame_hdr:0000000000006DCF                 db    0
.eh_frame_hdr:0000000000006DD0                 db  14h
.eh_frame_hdr:0000000000006DD1                 db 0DDh
.eh_frame_hdr:0000000000006DD2                 db 0FFh
.eh_frame_hdr:0000000000006DD3                 db 0FFh
.eh_frame_hdr:0000000000006DD4                 db  74h ; t
.eh_frame_hdr:0000000000006DD5                 db    9
.eh_frame_hdr:0000000000006DD6                 db    0
.eh_frame_hdr:0000000000006DD7                 db    0
.eh_frame_hdr:0000000000006DD8                 db  24h ; $
.eh_frame_hdr:0000000000006DD9                 db 0DDh
.eh_frame_hdr:0000000000006DDA                 db 0FFh
.eh_frame_hdr:0000000000006DDB                 db 0FFh
.eh_frame_hdr:0000000000006DDC                 db  88h
.eh_frame_hdr:0000000000006DDD                 db    9
.eh_frame_hdr:0000000000006DDE                 db    0
.eh_frame_hdr:0000000000006DDF                 db    0
.eh_frame_hdr:0000000000006DE0                 db  44h ; D
.eh_frame_hdr:0000000000006DE1                 db 0DDh
.eh_frame_hdr:0000000000006DE2                 db 0FFh
.eh_frame_hdr:0000000000006DE3                 db 0FFh
.eh_frame_hdr:0000000000006DE4                 db  9Ch
.eh_frame_hdr:0000000000006DE5                 db    9
.eh_frame_hdr:0000000000006DE6                 db    0
.eh_frame_hdr:0000000000006DE7                 db    0
.eh_frame_hdr:0000000000006DE8                 db  64h ; d
.eh_frame_hdr:0000000000006DE9                 db 0DDh
.eh_frame_hdr:0000000000006DEA                 db 0FFh
.eh_frame_hdr:0000000000006DEB                 db 0FFh
.eh_frame_hdr:0000000000006DEC                 db 0B0h
.eh_frame_hdr:0000000000006DED                 db    9
.eh_frame_hdr:0000000000006DEE                 db    0
.eh_frame_hdr:0000000000006DEF                 db    0
.eh_frame_hdr:0000000000006DF0                 db  74h ; t
.eh_frame_hdr:0000000000006DF1                 db 0DDh
.eh_frame_hdr:0000000000006DF2                 db 0FFh
.eh_frame_hdr:0000000000006DF3                 db 0FFh
.eh_frame_hdr:0000000000006DF4                 db 0C4h
.eh_frame_hdr:0000000000006DF5                 db    9
.eh_frame_hdr:0000000000006DF6                 db    0
.eh_frame_hdr:0000000000006DF7                 db    0
.eh_frame_hdr:0000000000006DF8                 db  94h
.eh_frame_hdr:0000000000006DF9                 db 0DDh
.eh_frame_hdr:0000000000006DFA                 db 0FFh
.eh_frame_hdr:0000000000006DFB                 db 0FFh
.eh_frame_hdr:0000000000006DFC                 db 0D8h
.eh_frame_hdr:0000000000006DFD                 db    9
.eh_frame_hdr:0000000000006DFE                 db    0
.eh_frame_hdr:0000000000006DFF                 db    0
.eh_frame_hdr:0000000000006E00                 db 0B4h
.eh_frame_hdr:0000000000006E01                 db 0DDh
.eh_frame_hdr:0000000000006E02                 db 0FFh
.eh_frame_hdr:0000000000006E03                 db 0FFh
.eh_frame_hdr:0000000000006E04                 db 0ECh
.eh_frame_hdr:0000000000006E05                 db    9
.eh_frame_hdr:0000000000006E06                 db    0
.eh_frame_hdr:0000000000006E07                 db    0
.eh_frame_hdr:0000000000006E08                 db 0D4h
.eh_frame_hdr:0000000000006E09                 db 0DDh
.eh_frame_hdr:0000000000006E0A                 db 0FFh
.eh_frame_hdr:0000000000006E0B                 db 0FFh
.eh_frame_hdr:0000000000006E0C                 db    4
.eh_frame_hdr:0000000000006E0D                 db  0Ah
.eh_frame_hdr:0000000000006E0E                 db    0
.eh_frame_hdr:0000000000006E0F                 db    0
.eh_frame_hdr:0000000000006E10                 db 0F4h
.eh_frame_hdr:0000000000006E11                 db 0E1h
.eh_frame_hdr:0000000000006E12                 db 0FFh
.eh_frame_hdr:0000000000006E13                 db 0FFh
.eh_frame_hdr:0000000000006E14                 db  18h
.eh_frame_hdr:0000000000006E15                 db  0Bh
.eh_frame_hdr:0000000000006E16                 db    0
.eh_frame_hdr:0000000000006E17                 db    0
.eh_frame_hdr:0000000000006E18                 db  14h
.eh_frame_hdr:0000000000006E19                 db 0E2h
.eh_frame_hdr:0000000000006E1A                 db 0FFh
.eh_frame_hdr:0000000000006E1B                 db 0FFh
.eh_frame_hdr:0000000000006E1C                 db  2Ch ; ,
.eh_frame_hdr:0000000000006E1D                 db  0Bh
.eh_frame_hdr:0000000000006E1E                 db    0
.eh_frame_hdr:0000000000006E1F                 db    0
.eh_frame_hdr:0000000000006E20                 db  94h
.eh_frame_hdr:0000000000006E21                 db 0E2h
.eh_frame_hdr:0000000000006E22                 db 0FFh
.eh_frame_hdr:0000000000006E23                 db 0FFh
.eh_frame_hdr:0000000000006E24                 db  48h ; H
.eh_frame_hdr:0000000000006E25                 db  0Bh
.eh_frame_hdr:0000000000006E26                 db    0
.eh_frame_hdr:0000000000006E27                 db    0
.eh_frame_hdr:0000000000006E28                 db  74h ; t
.eh_frame_hdr:0000000000006E29                 db 0E3h
.eh_frame_hdr:0000000000006E2A                 db 0FFh
.eh_frame_hdr:0000000000006E2B                 db 0FFh
.eh_frame_hdr:0000000000006E2C                 db  74h ; t
.eh_frame_hdr:0000000000006E2D                 db  0Bh
.eh_frame_hdr:0000000000006E2E                 db    0
.eh_frame_hdr:0000000000006E2F                 db    0
.eh_frame_hdr:0000000000006E30                 db 0F4h
.eh_frame_hdr:0000000000006E31                 db 0E3h
.eh_frame_hdr:0000000000006E32                 db 0FFh
.eh_frame_hdr:0000000000006E33                 db 0FFh
.eh_frame_hdr:0000000000006E34                 db  94h
.eh_frame_hdr:0000000000006E35                 db  0Bh
.eh_frame_hdr:0000000000006E36                 db    0
.eh_frame_hdr:0000000000006E37                 db    0
.eh_frame_hdr:0000000000006E38                 db  14h
.eh_frame_hdr:0000000000006E39                 db 0E4h
.eh_frame_hdr:0000000000006E3A                 db 0FFh
.eh_frame_hdr:0000000000006E3B                 db 0FFh
.eh_frame_hdr:0000000000006E3C                 db 0B0h
.eh_frame_hdr:0000000000006E3D                 db  0Bh
.eh_frame_hdr:0000000000006E3E                 db    0
.eh_frame_hdr:0000000000006E3F                 db    0
.eh_frame_hdr:0000000000006E40                 db  44h ; D
.eh_frame_hdr:0000000000006E41                 db 0E4h
.eh_frame_hdr:0000000000006E42                 db 0FFh
.eh_frame_hdr:0000000000006E43                 db 0FFh
.eh_frame_hdr:0000000000006E44                 db 0C4h
.eh_frame_hdr:0000000000006E45                 db  0Bh
.eh_frame_hdr:0000000000006E46                 db    0
.eh_frame_hdr:0000000000006E47                 db    0
.eh_frame_hdr:0000000000006E48                 db  54h ; T
.eh_frame_hdr:0000000000006E49                 db 0E4h
.eh_frame_hdr:0000000000006E4A                 db 0FFh
.eh_frame_hdr:0000000000006E4B                 db 0FFh
.eh_frame_hdr:0000000000006E4C                 db 0D8h
.eh_frame_hdr:0000000000006E4D                 db  0Bh
.eh_frame_hdr:0000000000006E4E                 db    0
.eh_frame_hdr:0000000000006E4F                 db    0
.eh_frame_hdr:0000000000006E50                 db  94h
.eh_frame_hdr:0000000000006E51                 db 0E4h
.eh_frame_hdr:0000000000006E52                 db 0FFh
.eh_frame_hdr:0000000000006E53                 db 0FFh
.eh_frame_hdr:0000000000006E54                 db 0FCh
.eh_frame_hdr:0000000000006E55                 db  0Bh
.eh_frame_hdr:0000000000006E56                 db    0
.eh_frame_hdr:0000000000006E57                 db    0
.eh_frame_hdr:0000000000006E58                 db 0C4h
.eh_frame_hdr:0000000000006E59                 db 0E4h
.eh_frame_hdr:0000000000006E5A                 db 0FFh
.eh_frame_hdr:0000000000006E5B                 db 0FFh
.eh_frame_hdr:0000000000006E5C                 db  10h
.eh_frame_hdr:0000000000006E5D                 db  0Ch
.eh_frame_hdr:0000000000006E5E                 db    0
.eh_frame_hdr:0000000000006E5F                 db    0
.eh_frame_hdr:0000000000006E60                 db  54h ; T
.eh_frame_hdr:0000000000006E61                 db 0E5h
.eh_frame_hdr:0000000000006E62                 db 0FFh
.eh_frame_hdr:0000000000006E63                 db 0FFh
.eh_frame_hdr:0000000000006E64                 db  28h ; (
.eh_frame_hdr:0000000000006E65                 db  0Ch
.eh_frame_hdr:0000000000006E66                 db    0
.eh_frame_hdr:0000000000006E67                 db    0
.eh_frame_hdr:0000000000006E68                 db 0A4h
.eh_frame_hdr:0000000000006E69                 db 0E5h
.eh_frame_hdr:0000000000006E6A                 db 0FFh
.eh_frame_hdr:0000000000006E6B                 db 0FFh
.eh_frame_hdr:0000000000006E6C                 db  40h ; @
.eh_frame_hdr:0000000000006E6D                 db  0Ch
.eh_frame_hdr:0000000000006E6E                 db    0
.eh_frame_hdr:0000000000006E6F                 db    0
.eh_frame_hdr:0000000000006E70                 db 0C4h
.eh_frame_hdr:0000000000006E71                 db 0E5h
.eh_frame_hdr:0000000000006E72                 db 0FFh
.eh_frame_hdr:0000000000006E73                 db 0FFh
.eh_frame_hdr:0000000000006E74                 db  5Ch ; \
.eh_frame_hdr:0000000000006E75                 db  0Ch
.eh_frame_hdr:0000000000006E76                 db    0
.eh_frame_hdr:0000000000006E77                 db    0
.eh_frame_hdr:0000000000006E78                 db 0F4h
.eh_frame_hdr:0000000000006E79                 db 0E5h
.eh_frame_hdr:0000000000006E7A                 db 0FFh
.eh_frame_hdr:0000000000006E7B                 db 0FFh
.eh_frame_hdr:0000000000006E7C                 db  78h ; x
.eh_frame_hdr:0000000000006E7D                 db  0Ch
.eh_frame_hdr:0000000000006E7E                 db    0
.eh_frame_hdr:0000000000006E7F                 db    0
.eh_frame_hdr:0000000000006E80                 db  24h ; $
.eh_frame_hdr:0000000000006E81                 db 0E6h
.eh_frame_hdr:0000000000006E82                 db 0FFh
.eh_frame_hdr:0000000000006E83                 db 0FFh
.eh_frame_hdr:0000000000006E84                 db 0A0h
.eh_frame_hdr:0000000000006E85                 db  0Ch
.eh_frame_hdr:0000000000006E86                 db    0
.eh_frame_hdr:0000000000006E87                 db    0
.eh_frame_hdr:0000000000006E88                 db  44h ; D
.eh_frame_hdr:0000000000006E89                 db 0E6h
.eh_frame_hdr:0000000000006E8A                 db 0FFh
.eh_frame_hdr:0000000000006E8B                 db 0FFh
.eh_frame_hdr:0000000000006E8C                 db 0BCh
.eh_frame_hdr:0000000000006E8D                 db  0Ch
.eh_frame_hdr:0000000000006E8E                 db    0
.eh_frame_hdr:0000000000006E8F                 db    0
.eh_frame_hdr:0000000000006E90                 db  84h
.eh_frame_hdr:0000000000006E91                 db 0E6h
.eh_frame_hdr:0000000000006E92                 db 0FFh
.eh_frame_hdr:0000000000006E93                 db 0FFh
.eh_frame_hdr:0000000000006E94                 db 0D4h
.eh_frame_hdr:0000000000006E95                 db  0Ch
.eh_frame_hdr:0000000000006E96                 db    0
.eh_frame_hdr:0000000000006E97                 db    0
.eh_frame_hdr:0000000000006E98                 db  84h
.eh_frame_hdr:0000000000006E99                 db 0E7h
.eh_frame_hdr:0000000000006E9A                 db 0FFh
.eh_frame_hdr:0000000000006E9B                 db 0FFh
.eh_frame_hdr:0000000000006E9C                 db  20h
.eh_frame_hdr:0000000000006E9D                 db  0Dh
.eh_frame_hdr:0000000000006E9E                 db    0
.eh_frame_hdr:0000000000006E9F                 db    0
.eh_frame_hdr:0000000000006EA0                 db 0B4h
.eh_frame_hdr:0000000000006EA1                 db 0E7h
.eh_frame_hdr:0000000000006EA2                 db 0FFh
.eh_frame_hdr:0000000000006EA3                 db 0FFh
.eh_frame_hdr:0000000000006EA4                 db  3Ch ; <
.eh_frame_hdr:0000000000006EA5                 db  0Dh
.eh_frame_hdr:0000000000006EA6                 db    0
.eh_frame_hdr:0000000000006EA7                 db    0
.eh_frame_hdr:0000000000006EA8                 db 0D4h
.eh_frame_hdr:0000000000006EA9                 db 0EBh
.eh_frame_hdr:0000000000006EAA                 db 0FFh
.eh_frame_hdr:0000000000006EAB                 db 0FFh
.eh_frame_hdr:0000000000006EAC                 db  8Ch
.eh_frame_hdr:0000000000006EAD                 db  0Dh
.eh_frame_hdr:0000000000006EAE                 db    0
.eh_frame_hdr:0000000000006EAF                 db    0
.eh_frame_hdr:0000000000006EB0                 db  54h ; T
.eh_frame_hdr:0000000000006EB1                 db 0ECh
.eh_frame_hdr:0000000000006EB2                 db 0FFh
.eh_frame_hdr:0000000000006EB3                 db 0FFh
.eh_frame_hdr:0000000000006EB4                 db 0C4h
.eh_frame_hdr:0000000000006EB5                 db  0Dh
.eh_frame_hdr:0000000000006EB6                 db    0
.eh_frame_hdr:0000000000006EB7                 db    0
.eh_frame_hdr:0000000000006EB8                 db  94h
.eh_frame_hdr:0000000000006EB9                 db 0ECh
.eh_frame_hdr:0000000000006EBA                 db 0FFh
.eh_frame_hdr:0000000000006EBB                 db 0FFh
.eh_frame_hdr:0000000000006EBC                 db 0E4h
.eh_frame_hdr:0000000000006EBD                 db  0Dh
.eh_frame_hdr:0000000000006EBE                 db    0
.eh_frame_hdr:0000000000006EBF                 db    0
.eh_frame_hdr:0000000000006EC0                 db 0F4h
.eh_frame_hdr:0000000000006EC1                 db 0ECh
.eh_frame_hdr:0000000000006EC2                 db 0FFh
.eh_frame_hdr:0000000000006EC3                 db 0FFh
.eh_frame_hdr:0000000000006EC4                 db  14h
.eh_frame_hdr:0000000000006EC5                 db  0Eh
.eh_frame_hdr:0000000000006EC6                 db    0
.eh_frame_hdr:0000000000006EC7                 db    0
.eh_frame_hdr:0000000000006EC8                 db  84h
.eh_frame_hdr:0000000000006EC9                 db 0EDh
.eh_frame_hdr:0000000000006ECA                 db 0FFh
.eh_frame_hdr:0000000000006ECB                 db 0FFh
.eh_frame_hdr:0000000000006ECC                 db  54h ; T
.eh_frame_hdr:0000000000006ECD                 db  0Eh
.eh_frame_hdr:0000000000006ECE                 db    0
.eh_frame_hdr:0000000000006ECF                 db    0
.eh_frame_hdr:0000000000006ED0                 db    4
.eh_frame_hdr:0000000000006ED1                 db 0EEh
.eh_frame_hdr:0000000000006ED2                 db 0FFh
.eh_frame_hdr:0000000000006ED3                 db 0FFh
.eh_frame_hdr:0000000000006ED4                 db 0A4h
.eh_frame_hdr:0000000000006ED5                 db  0Eh
.eh_frame_hdr:0000000000006ED6                 db    0
.eh_frame_hdr:0000000000006ED7                 db    0
.eh_frame_hdr:0000000000006ED8                 db  64h ; d
.eh_frame_hdr:0000000000006ED9                 db 0EEh
.eh_frame_hdr:0000000000006EDA                 db 0FFh
.eh_frame_hdr:0000000000006EDB                 db 0FFh
.eh_frame_hdr:0000000000006EDC                 db 0C4h
.eh_frame_hdr:0000000000006EDD                 db  0Eh
.eh_frame_hdr:0000000000006EDE                 db    0
.eh_frame_hdr:0000000000006EDF                 db    0
.eh_frame_hdr:0000000000006EE0                 db 0A4h
.eh_frame_hdr:0000000000006EE1                 db 0EEh
.eh_frame_hdr:0000000000006EE2                 db 0FFh
.eh_frame_hdr:0000000000006EE3                 db 0FFh
.eh_frame_hdr:0000000000006EE4                 db 0E4h
.eh_frame_hdr:0000000000006EE5                 db  0Eh
.eh_frame_hdr:0000000000006EE6                 db    0
.eh_frame_hdr:0000000000006EE7                 db    0
.eh_frame_hdr:0000000000006EE8                 db  14h
.eh_frame_hdr:0000000000006EE9                 db 0EFh
.eh_frame_hdr:0000000000006EEA                 db 0FFh
.eh_frame_hdr:0000000000006EEB                 db 0FFh
.eh_frame_hdr:0000000000006EEC                 db  2Ch ; ,
.eh_frame_hdr:0000000000006EED                 db  0Fh
.eh_frame_hdr:0000000000006EEE                 db    0
.eh_frame_hdr:0000000000006EEF                 db    0
.eh_frame_hdr:0000000000006EF0                 db  24h ; $
.eh_frame_hdr:0000000000006EF1                 db 0EFh
.eh_frame_hdr:0000000000006EF2                 db 0FFh
.eh_frame_hdr:0000000000006EF3                 db 0FFh
.eh_frame_hdr:0000000000006EF4                 db  44h ; D
.eh_frame_hdr:0000000000006EF5                 db  0Fh
.eh_frame_hdr:0000000000006EF6                 db    0
.eh_frame_hdr:0000000000006EF7                 db    0
.eh_frame_hdr:0000000000006EF7 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006EF7
.eh_frame:0000000000006EF8 ; ===========================================================================
.eh_frame:0000000000006EF8
.eh_frame:0000000000006EF8 ; Segment type: Pure data
.eh_frame:0000000000006EF8 ; Segment permissions: Read
.eh_frame:0000000000006EF8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006EF8                 assume cs:_eh_frame
.eh_frame:0000000000006EF8                 ;org 6EF8h
.eh_frame:0000000000006EF8                 db  14h
.eh_frame:0000000000006EF9                 db    0
.eh_frame:0000000000006EFA                 db    0
.eh_frame:0000000000006EFB                 db    0
.eh_frame:0000000000006EFC                 db    0
.eh_frame:0000000000006EFD                 db    0
.eh_frame:0000000000006EFE                 db    0
.eh_frame:0000000000006EFF                 db    0
.eh_frame:0000000000006F00                 db    1
.eh_frame:0000000000006F01                 db  7Ah ; z
.eh_frame:0000000000006F02                 db  52h ; R
.eh_frame:0000000000006F03                 db    0
.eh_frame:0000000000006F04                 db    1
.eh_frame:0000000000006F05                 db  78h ; x
.eh_frame:0000000000006F06                 db  10h
.eh_frame:0000000000006F07                 db    1
.eh_frame:0000000000006F08                 db  1Bh
.eh_frame:0000000000006F09                 db  0Ch
.eh_frame:0000000000006F0A                 db    7
.eh_frame:0000000000006F0B                 db    8
.eh_frame:0000000000006F0C                 db  90h
.eh_frame:0000000000006F0D                 db    1
.eh_frame:0000000000006F0E                 db    7
.eh_frame:0000000000006F0F                 db  10h
.eh_frame:0000000000006F10                 db  14h
.eh_frame:0000000000006F11                 db    0
.eh_frame:0000000000006F12                 db    0
.eh_frame:0000000000006F13                 db    0
.eh_frame:0000000000006F14                 db  1Ch
.eh_frame:0000000000006F15                 db    0
.eh_frame:0000000000006F16                 db    0
.eh_frame:0000000000006F17                 db    0
.eh_frame:0000000000006F18                 db 0E8h
.eh_frame:0000000000006F19                 db 0B0h
.eh_frame:0000000000006F1A                 db 0FFh
.eh_frame:0000000000006F1B                 db 0FFh
.eh_frame:0000000000006F1C                 db  2Bh ; +
.eh_frame:0000000000006F1D                 db    0
.eh_frame:0000000000006F1E                 db    0
.eh_frame:0000000000006F1F                 db    0
.eh_frame:0000000000006F20                 db    0
.eh_frame:0000000000006F21                 db    0
.eh_frame:0000000000006F22                 db    0
.eh_frame:0000000000006F23                 db    0
.eh_frame:0000000000006F24                 db    0
.eh_frame:0000000000006F25                 db    0
.eh_frame:0000000000006F26                 db    0
.eh_frame:0000000000006F27                 db    0
.eh_frame:0000000000006F28                 db  14h
.eh_frame:0000000000006F29                 db    0
.eh_frame:0000000000006F2A                 db    0
.eh_frame:0000000000006F2B                 db    0
.eh_frame:0000000000006F2C                 db    0
.eh_frame:0000000000006F2D                 db    0
.eh_frame:0000000000006F2E                 db    0
.eh_frame:0000000000006F2F                 db    0
.eh_frame:0000000000006F30                 db    1
.eh_frame:0000000000006F31                 db  7Ah ; z
.eh_frame:0000000000006F32                 db  52h ; R
.eh_frame:0000000000006F33                 db    0
.eh_frame:0000000000006F34                 db    1
.eh_frame:0000000000006F35                 db  78h ; x
.eh_frame:0000000000006F36                 db  10h
.eh_frame:0000000000006F37                 db    1
.eh_frame:0000000000006F38                 db  1Bh
.eh_frame:0000000000006F39                 db  0Ch
.eh_frame:0000000000006F3A                 db    7
.eh_frame:0000000000006F3B                 db    8
.eh_frame:0000000000006F3C                 db  90h
.eh_frame:0000000000006F3D                 db    1
.eh_frame:0000000000006F3E                 db    0
.eh_frame:0000000000006F3F                 db    0
.eh_frame:0000000000006F40                 db  24h ; $
.eh_frame:0000000000006F41                 db    0
.eh_frame:0000000000006F42                 db    0
.eh_frame:0000000000006F43                 db    0
.eh_frame:0000000000006F44                 db  1Ch
.eh_frame:0000000000006F45                 db    0
.eh_frame:0000000000006F46                 db    0
.eh_frame:0000000000006F47                 db    0
.eh_frame:0000000000006F48                 db  78h ; x
.eh_frame:0000000000006F49                 db 0A5h
.eh_frame:0000000000006F4A                 db 0FFh
.eh_frame:0000000000006F4B                 db 0FFh
.eh_frame:0000000000006F4C                 db  30h ; 0
.eh_frame:0000000000006F4D                 db    3
.eh_frame:0000000000006F4E                 db    0
.eh_frame:0000000000006F4F                 db    0
.eh_frame:0000000000006F50                 db    0
.eh_frame:0000000000006F51                 db  0Eh
.eh_frame:0000000000006F52                 db  10h
.eh_frame:0000000000006F53                 db  46h ; F
.eh_frame:0000000000006F54                 db  0Eh
.eh_frame:0000000000006F55                 db  18h
.eh_frame:0000000000006F56                 db  4Ah ; J
.eh_frame:0000000000006F57                 db  0Fh
.eh_frame:0000000000006F58                 db  0Bh
.eh_frame:0000000000006F59                 db  77h ; w
.eh_frame:0000000000006F5A                 db    8
.eh_frame:0000000000006F5B                 db  80h
.eh_frame:0000000000006F5C                 db    0
.eh_frame:0000000000006F5D                 db  3Fh ; ?
.eh_frame:0000000000006F5E                 db  1Ah
.eh_frame:0000000000006F5F                 db  3Bh ; ;
.eh_frame:0000000000006F60                 db  2Ah ; *
.eh_frame:0000000000006F61                 db  33h ; 3
.eh_frame:0000000000006F62                 db  24h ; $
.eh_frame:0000000000006F63                 db  22h ; "
.eh_frame:0000000000006F64                 db    0
.eh_frame:0000000000006F65                 db    0
.eh_frame:0000000000006F66                 db    0
.eh_frame:0000000000006F67                 db    0
.eh_frame:0000000000006F68                 db  14h
.eh_frame:0000000000006F69                 db    0
.eh_frame:0000000000006F6A                 db    0
.eh_frame:0000000000006F6B                 db    0
.eh_frame:0000000000006F6C                 db  44h ; D
.eh_frame:0000000000006F6D                 db    0
.eh_frame:0000000000006F6E                 db    0
.eh_frame:0000000000006F6F                 db    0
.eh_frame:0000000000006F70                 db  80h
.eh_frame:0000000000006F71                 db 0A8h
.eh_frame:0000000000006F72                 db 0FFh
.eh_frame:0000000000006F73                 db 0FFh
.eh_frame:0000000000006F74                 db    8
.eh_frame:0000000000006F75                 db    0
.eh_frame:0000000000006F76                 db    0
.eh_frame:0000000000006F77                 db    0
.eh_frame:0000000000006F78                 db    0
.eh_frame:0000000000006F79                 db    0
.eh_frame:0000000000006F7A                 db    0
.eh_frame:0000000000006F7B                 db    0
.eh_frame:0000000000006F7C                 db    0
.eh_frame:0000000000006F7D                 db    0
.eh_frame:0000000000006F7E                 db    0
.eh_frame:0000000000006F7F                 db    0
.eh_frame:0000000000006F80                 db  28h ; (
.eh_frame:0000000000006F81                 db    0
.eh_frame:0000000000006F82                 db    0
.eh_frame:0000000000006F83                 db    0
.eh_frame:0000000000006F84                 db  5Ch ; \
.eh_frame:0000000000006F85                 db    0
.eh_frame:0000000000006F86                 db    0
.eh_frame:0000000000006F87                 db    0
.eh_frame:0000000000006F88                 db  88h
.eh_frame:0000000000006F89                 db 0B1h
.eh_frame:0000000000006F8A                 db 0FFh
.eh_frame:0000000000006F8B                 db 0FFh
.eh_frame:0000000000006F8C                 db 0DAh
.eh_frame:0000000000006F8D                 db    3
.eh_frame:0000000000006F8E                 db    0
.eh_frame:0000000000006F8F                 db    0
.eh_frame:0000000000006F90                 db    0
.eh_frame:0000000000006F91                 db  42h ; B
.eh_frame:0000000000006F92                 db  0Eh
.eh_frame:0000000000006F93                 db  10h
.eh_frame:0000000000006F94                 db  8Dh
.eh_frame:0000000000006F95                 db    2
.eh_frame:0000000000006F96                 db  42h ; B
.eh_frame:0000000000006F97                 db  0Eh
.eh_frame:0000000000006F98                 db  18h
.eh_frame:0000000000006F99                 db  8Ch
.eh_frame:0000000000006F9A                 db    3
.eh_frame:0000000000006F9B                 db  46h ; F
.eh_frame:0000000000006F9C                 db  0Eh
.eh_frame:0000000000006F9D                 db  20h
.eh_frame:0000000000006F9E                 db  86h
.eh_frame:0000000000006F9F                 db    4
.eh_frame:0000000000006FA0                 db  41h ; A
.eh_frame:0000000000006FA1                 db  0Eh
.eh_frame:0000000000006FA2                 db  28h ; (
.eh_frame:0000000000006FA3                 db  83h
.eh_frame:0000000000006FA4                 db    5
.eh_frame:0000000000006FA5                 db  49h ; I
.eh_frame:0000000000006FA6                 db  0Eh
.eh_frame:0000000000006FA7                 db 0B0h
.eh_frame:0000000000006FA8                 db    1
.eh_frame:0000000000006FA9                 db    0
.eh_frame:0000000000006FAA                 db    0
.eh_frame:0000000000006FAB                 db    0
.eh_frame:0000000000006FAC                 db  50h ; P
.eh_frame:0000000000006FAD                 db    0
.eh_frame:0000000000006FAE                 db    0
.eh_frame:0000000000006FAF                 db    0
.eh_frame:0000000000006FB0                 db  88h
.eh_frame:0000000000006FB1                 db    0
.eh_frame:0000000000006FB2                 db    0
.eh_frame:0000000000006FB3                 db    0
.eh_frame:0000000000006FB4                 db  4Ch ; L
.eh_frame:0000000000006FB5                 db 0A8h
.eh_frame:0000000000006FB6                 db 0FFh
.eh_frame:0000000000006FB7                 db 0FFh
.eh_frame:0000000000006FB8                 db 0F9h
.eh_frame:0000000000006FB9                 db    7
.eh_frame:0000000000006FBA                 db    0
.eh_frame:0000000000006FBB                 db    0
.eh_frame:0000000000006FBC                 db    0
.eh_frame:0000000000006FBD                 db  42h ; B
.eh_frame:0000000000006FBE                 db  0Eh
.eh_frame:0000000000006FBF                 db  10h
.eh_frame:0000000000006FC0                 db  8Fh
.eh_frame:0000000000006FC1                 db    2
.eh_frame:0000000000006FC2                 db  42h ; B
.eh_frame:0000000000006FC3                 db  0Eh
.eh_frame:0000000000006FC4                 db  18h
.eh_frame:0000000000006FC5                 db  8Eh
.eh_frame:0000000000006FC6                 db    3
.eh_frame:0000000000006FC7                 db  42h ; B
.eh_frame:0000000000006FC8                 db  0Eh
.eh_frame:0000000000006FC9                 db  20h
.eh_frame:0000000000006FCA                 db  8Dh
.eh_frame:0000000000006FCB                 db    4
.eh_frame:0000000000006FCC                 db  42h ; B
.eh_frame:0000000000006FCD                 db  0Eh
.eh_frame:0000000000006FCE                 db  28h ; (
.eh_frame:0000000000006FCF                 db  8Ch
.eh_frame:0000000000006FD0                 db    5
.eh_frame:0000000000006FD1                 db  44h ; D
.eh_frame:0000000000006FD2                 db  0Eh
.eh_frame:0000000000006FD3                 db  30h ; 0
.eh_frame:0000000000006FD4                 db  86h
.eh_frame:0000000000006FD5                 db    6
.eh_frame:0000000000006FD6                 db  41h ; A
.eh_frame:0000000000006FD7                 db  0Eh
.eh_frame:0000000000006FD8                 db  38h ; 8
.eh_frame:0000000000006FD9                 db  83h
.eh_frame:0000000000006FDA                 db    7
.eh_frame:0000000000006FDB                 db  4Eh ; N
.eh_frame:0000000000006FDC                 db  0Eh
.eh_frame:0000000000006FDD                 db 0B0h
.eh_frame:0000000000006FDE                 db    1
.eh_frame:0000000000006FDF                 db    3
.eh_frame:0000000000006FE0                 db 0D2h
.eh_frame:0000000000006FE1                 db    3
.eh_frame:0000000000006FE2                 db  0Ah
.eh_frame:0000000000006FE3                 db  0Eh
.eh_frame:0000000000006FE4                 db  38h ; 8
.eh_frame:0000000000006FE5                 db  41h ; A
.eh_frame:0000000000006FE6                 db  0Eh
.eh_frame:0000000000006FE7                 db  30h ; 0
.eh_frame:0000000000006FE8                 db  41h ; A
.eh_frame:0000000000006FE9                 db  0Eh
.eh_frame:0000000000006FEA                 db  28h ; (
.eh_frame:0000000000006FEB                 db  42h ; B
.eh_frame:0000000000006FEC                 db  0Eh
.eh_frame:0000000000006FED                 db  20h
.eh_frame:0000000000006FEE                 db  42h ; B
.eh_frame:0000000000006FEF                 db  0Eh
.eh_frame:0000000000006FF0                 db  18h
.eh_frame:0000000000006FF1                 db  42h ; B
.eh_frame:0000000000006FF2                 db  0Eh
.eh_frame:0000000000006FF3                 db  10h
.eh_frame:0000000000006FF4                 db  42h ; B
.eh_frame:0000000000006FF5                 db  0Eh
.eh_frame:0000000000006FF6                 db    8
.eh_frame:0000000000006FF7                 db  41h ; A
.eh_frame:0000000000006FF8                 db  0Bh
.eh_frame:0000000000006FF9                 db    0
.eh_frame:0000000000006FFA                 db    0
.eh_frame:0000000000006FFB                 db    0
.eh_frame:0000000000006FFC                 db    0
.eh_frame:0000000000006FFD                 db    0
.eh_frame:0000000000006FFE                 db    0
.eh_frame:0000000000006FFF                 db    0
.eh_frame:0000000000007000                 db  10h
.eh_frame:0000000000007001                 db    0
.eh_frame:0000000000007002                 db    0
.eh_frame:0000000000007003                 db    0
.eh_frame:0000000000007004                 db 0DCh
.eh_frame:0000000000007005                 db    0
.eh_frame:0000000000007006                 db    0
.eh_frame:0000000000007007                 db    0
.eh_frame:0000000000007008                 db 0E8h
.eh_frame:0000000000007009                 db 0B4h
.eh_frame:000000000000700A                 db 0FFh
.eh_frame:000000000000700B                 db 0FFh
.eh_frame:000000000000700C                 db    8
.eh_frame:000000000000700D                 db    1
.eh_frame:000000000000700E                 db    0
.eh_frame:000000000000700F                 db    0
.eh_frame:0000000000007010                 db    0
.eh_frame:0000000000007011                 db    0
.eh_frame:0000000000007012                 db    0
.eh_frame:0000000000007013                 db    0
.eh_frame:0000000000007014                 db  10h
.eh_frame:0000000000007015                 db    0
.eh_frame:0000000000007016                 db    0
.eh_frame:0000000000007017                 db    0
.eh_frame:0000000000007018                 db 0F0h
.eh_frame:0000000000007019                 db    0
.eh_frame:000000000000701A                 db    0
.eh_frame:000000000000701B                 db    0
.eh_frame:000000000000701C                 db 0E4h
.eh_frame:000000000000701D                 db 0B5h
.eh_frame:000000000000701E                 db 0FFh
.eh_frame:000000000000701F                 db 0FFh
.eh_frame:0000000000007020                 db 0B5h
.eh_frame:0000000000007021                 db    1
.eh_frame:0000000000007022                 db    0
.eh_frame:0000000000007023                 db    0
.eh_frame:0000000000007024                 db    0
.eh_frame:0000000000007025                 db    0
.eh_frame:0000000000007026                 db    0
.eh_frame:0000000000007027                 db    0
.eh_frame:0000000000007028                 db  48h ; H
.eh_frame:0000000000007029                 db    0
.eh_frame:000000000000702A                 db    0
.eh_frame:000000000000702B                 db    0
.eh_frame:000000000000702C                 db    4
.eh_frame:000000000000702D                 db    1
.eh_frame:000000000000702E                 db    0
.eh_frame:000000000000702F                 db    0
.eh_frame:0000000000007030                 db  90h
.eh_frame:0000000000007031                 db 0B7h
.eh_frame:0000000000007032                 db 0FFh
.eh_frame:0000000000007033                 db 0FFh
.eh_frame:0000000000007034                 db  87h
.eh_frame:0000000000007035                 db    0
.eh_frame:0000000000007036                 db    0
.eh_frame:0000000000007037                 db    0
.eh_frame:0000000000007038                 db    0
.eh_frame:0000000000007039                 db  42h ; B
.eh_frame:000000000000703A                 db  0Eh
.eh_frame:000000000000703B                 db  10h
.eh_frame:000000000000703C                 db  8Eh
.eh_frame:000000000000703D                 db    2
.eh_frame:000000000000703E                 db  42h ; B
.eh_frame:000000000000703F                 db  0Eh
.eh_frame:0000000000007040                 db  18h
.eh_frame:0000000000007041                 db  8Dh
.eh_frame:0000000000007042                 db    3
.eh_frame:0000000000007043                 db  49h ; I
.eh_frame:0000000000007044                 db  0Eh
.eh_frame:0000000000007045                 db  20h
.eh_frame:0000000000007046                 db  8Ch
.eh_frame:0000000000007047                 db    4
.eh_frame:0000000000007048                 db  41h ; A
.eh_frame:0000000000007049                 db  0Eh
.eh_frame:000000000000704A                 db  28h ; (
.eh_frame:000000000000704B                 db  86h
.eh_frame:000000000000704C                 db    5
.eh_frame:000000000000704D                 db  41h ; A
.eh_frame:000000000000704E                 db  0Eh
.eh_frame:000000000000704F                 db  30h ; 0
.eh_frame:0000000000007050                 db  83h
.eh_frame:0000000000007051                 db    6
.eh_frame:0000000000007052                 db  6Fh ; o
.eh_frame:0000000000007053                 db  0Ah
.eh_frame:0000000000007054                 db  0Eh
.eh_frame:0000000000007055                 db  28h ; (
.eh_frame:0000000000007056                 db  44h ; D
.eh_frame:0000000000007057                 db  0Eh
.eh_frame:0000000000007058                 db  20h
.eh_frame:0000000000007059                 db  42h ; B
.eh_frame:000000000000705A                 db  0Eh
.eh_frame:000000000000705B                 db  18h
.eh_frame:000000000000705C                 db  42h ; B
.eh_frame:000000000000705D                 db  0Eh
.eh_frame:000000000000705E                 db  10h
.eh_frame:000000000000705F                 db  42h ; B
.eh_frame:0000000000007060                 db  0Eh
.eh_frame:0000000000007061                 db    8
.eh_frame:0000000000007062                 db  48h ; H
.eh_frame:0000000000007063                 db  0Bh
.eh_frame:0000000000007064                 db  6Ch ; l
.eh_frame:0000000000007065                 db  0Eh
.eh_frame:0000000000007066                 db  28h ; (
.eh_frame:0000000000007067                 db  44h ; D
.eh_frame:0000000000007068                 db  0Eh
.eh_frame:0000000000007069                 db  20h
.eh_frame:000000000000706A                 db  42h ; B
.eh_frame:000000000000706B                 db  0Eh
.eh_frame:000000000000706C                 db  18h
.eh_frame:000000000000706D                 db  42h ; B
.eh_frame:000000000000706E                 db  0Eh
.eh_frame:000000000000706F                 db  10h
.eh_frame:0000000000007070                 db  42h ; B
.eh_frame:0000000000007071                 db  0Eh
.eh_frame:0000000000007072                 db    8
.eh_frame:0000000000007073                 db    0
.eh_frame:0000000000007074                 db  10h
.eh_frame:0000000000007075                 db    0
.eh_frame:0000000000007076                 db    0
.eh_frame:0000000000007077                 db    0
.eh_frame:0000000000007078                 db  50h ; P
.eh_frame:0000000000007079                 db    1
.eh_frame:000000000000707A                 db    0
.eh_frame:000000000000707B                 db    0
.eh_frame:000000000000707C                 db 0D4h
.eh_frame:000000000000707D                 db 0B7h
.eh_frame:000000000000707E                 db 0FFh
.eh_frame:000000000000707F                 db 0FFh
.eh_frame:0000000000007080                 db  15h
.eh_frame:0000000000007081                 db    0
.eh_frame:0000000000007082                 db    0
.eh_frame:0000000000007083                 db    0
.eh_frame:0000000000007084                 db    0
.eh_frame:0000000000007085                 db    0
.eh_frame:0000000000007086                 db    0
.eh_frame:0000000000007087                 db    0
.eh_frame:0000000000007088                 db  10h
.eh_frame:0000000000007089                 db    0
.eh_frame:000000000000708A                 db    0
.eh_frame:000000000000708B                 db    0
.eh_frame:000000000000708C                 db  64h ; d
.eh_frame:000000000000708D                 db    1
.eh_frame:000000000000708E                 db    0
.eh_frame:000000000000708F                 db    0
.eh_frame:0000000000007090                 db 0E0h
.eh_frame:0000000000007091                 db 0B7h
.eh_frame:0000000000007092                 db 0FFh
.eh_frame:0000000000007093                 db 0FFh
.eh_frame:0000000000007094                 db    7
.eh_frame:0000000000007095                 db    0
.eh_frame:0000000000007096                 db    0
.eh_frame:0000000000007097                 db    0
.eh_frame:0000000000007098                 db    0
.eh_frame:0000000000007099                 db    0
.eh_frame:000000000000709A                 db    0
.eh_frame:000000000000709B                 db    0
.eh_frame:000000000000709C                 db  48h ; H
.eh_frame:000000000000709D                 db    0
.eh_frame:000000000000709E                 db    0
.eh_frame:000000000000709F                 db    0
.eh_frame:00000000000070A0                 db  78h ; x
.eh_frame:00000000000070A1                 db    1
.eh_frame:00000000000070A2                 db    0
.eh_frame:00000000000070A3                 db    0
.eh_frame:00000000000070A4                 db 0DCh
.eh_frame:00000000000070A5                 db 0B7h
.eh_frame:00000000000070A6                 db 0FFh
.eh_frame:00000000000070A7                 db 0FFh
.eh_frame:00000000000070A8                 db 0ADh
.eh_frame:00000000000070A9                 db    2
.eh_frame:00000000000070AA                 db    0
.eh_frame:00000000000070AB                 db    0
.eh_frame:00000000000070AC                 db    0
.eh_frame:00000000000070AD                 db  42h ; B
.eh_frame:00000000000070AE                 db  0Eh
.eh_frame:00000000000070AF                 db  10h
.eh_frame:00000000000070B0                 db  8Fh
.eh_frame:00000000000070B1                 db    2
.eh_frame:00000000000070B2                 db  42h ; B
.eh_frame:00000000000070B3                 db  0Eh
.eh_frame:00000000000070B4                 db  18h
.eh_frame:00000000000070B5                 db  8Eh
.eh_frame:00000000000070B6                 db    3
.eh_frame:00000000000070B7                 db  45h ; E
.eh_frame:00000000000070B8                 db  0Eh
.eh_frame:00000000000070B9                 db  20h
.eh_frame:00000000000070BA                 db  8Dh
.eh_frame:00000000000070BB                 db    4
.eh_frame:00000000000070BC                 db  42h ; B
.eh_frame:00000000000070BD                 db  0Eh
.eh_frame:00000000000070BE                 db  28h ; (
.eh_frame:00000000000070BF                 db  8Ch
.eh_frame:00000000000070C0                 db    5
.eh_frame:00000000000070C1                 db  44h ; D
.eh_frame:00000000000070C2                 db  0Eh
.eh_frame:00000000000070C3                 db  30h ; 0
.eh_frame:00000000000070C4                 db  86h
.eh_frame:00000000000070C5                 db    6
.eh_frame:00000000000070C6                 db  41h ; A
.eh_frame:00000000000070C7                 db  0Eh
.eh_frame:00000000000070C8                 db  38h ; 8
.eh_frame:00000000000070C9                 db  83h
.eh_frame:00000000000070CA                 db    7
.eh_frame:00000000000070CB                 db  47h ; G
.eh_frame:00000000000070CC                 db  0Eh
.eh_frame:00000000000070CD                 db  70h ; p
.eh_frame:00000000000070CE                 db    3
.eh_frame:00000000000070CF                 db  21h ; !
.eh_frame:00000000000070D0                 db    1
.eh_frame:00000000000070D1                 db  0Ah
.eh_frame:00000000000070D2                 db  0Eh
.eh_frame:00000000000070D3                 db  38h ; 8
.eh_frame:00000000000070D4                 db  41h ; A
.eh_frame:00000000000070D5                 db  0Eh
.eh_frame:00000000000070D6                 db  30h ; 0
.eh_frame:00000000000070D7                 db  41h ; A
.eh_frame:00000000000070D8                 db  0Eh
.eh_frame:00000000000070D9                 db  28h ; (
.eh_frame:00000000000070DA                 db  42h ; B
.eh_frame:00000000000070DB                 db  0Eh
.eh_frame:00000000000070DC                 db  20h
.eh_frame:00000000000070DD                 db  42h ; B
.eh_frame:00000000000070DE                 db  0Eh
.eh_frame:00000000000070DF                 db  18h
.eh_frame:00000000000070E0                 db  42h ; B
.eh_frame:00000000000070E1                 db  0Eh
.eh_frame:00000000000070E2                 db  10h
.eh_frame:00000000000070E3                 db  42h ; B
.eh_frame:00000000000070E4                 db  0Eh
.eh_frame:00000000000070E5                 db    8
.eh_frame:00000000000070E6                 db  46h ; F
.eh_frame:00000000000070E7                 db  0Bh
.eh_frame:00000000000070E8                 db  44h ; D
.eh_frame:00000000000070E9                 db    0
.eh_frame:00000000000070EA                 db    0
.eh_frame:00000000000070EB                 db    0
.eh_frame:00000000000070EC                 db 0C4h
.eh_frame:00000000000070ED                 db    1
.eh_frame:00000000000070EE                 db    0
.eh_frame:00000000000070EF                 db    0
.eh_frame:00000000000070F0                 db  40h ; @
.eh_frame:00000000000070F1                 db 0BAh
.eh_frame:00000000000070F2                 db 0FFh
.eh_frame:00000000000070F3                 db 0FFh
.eh_frame:00000000000070F4                 db 0BFh
.eh_frame:00000000000070F5                 db    0
.eh_frame:00000000000070F6                 db    0
.eh_frame:00000000000070F7                 db    0
.eh_frame:00000000000070F8                 db    0
.eh_frame:00000000000070F9                 db  42h ; B
.eh_frame:00000000000070FA                 db  0Eh
.eh_frame:00000000000070FB                 db  10h
.eh_frame:00000000000070FC                 db  8Eh
.eh_frame:00000000000070FD                 db    2
.eh_frame:00000000000070FE                 db  42h ; B
.eh_frame:00000000000070FF                 db  0Eh
.eh_frame:0000000000007100                 db  18h
.eh_frame:0000000000007101                 db  8Dh
.eh_frame:0000000000007102                 db    3
.eh_frame:0000000000007103                 db  45h ; E
.eh_frame:0000000000007104                 db  0Eh
.eh_frame:0000000000007105                 db  20h
.eh_frame:0000000000007106                 db  8Ch
.eh_frame:0000000000007107                 db    4
.eh_frame:0000000000007108                 db  41h ; A
.eh_frame:0000000000007109                 db  0Eh
.eh_frame:000000000000710A                 db  28h ; (
.eh_frame:000000000000710B                 db  86h
.eh_frame:000000000000710C                 db    5
.eh_frame:000000000000710D                 db  44h ; D
.eh_frame:000000000000710E                 db  0Eh
.eh_frame:000000000000710F                 db  30h ; 0
.eh_frame:0000000000007110                 db  83h
.eh_frame:0000000000007111                 db    6
.eh_frame:0000000000007112                 db  4Dh ; M
.eh_frame:0000000000007113                 db  0Eh
.eh_frame:0000000000007114                 db  50h ; P
.eh_frame:0000000000007115                 db    2
.eh_frame:0000000000007116                 db  76h ; v
.eh_frame:0000000000007117                 db  0Ah
.eh_frame:0000000000007118                 db  0Eh
.eh_frame:0000000000007119                 db  30h ; 0
.eh_frame:000000000000711A                 db  41h ; A
.eh_frame:000000000000711B                 db  0Eh
.eh_frame:000000000000711C                 db  28h ; (
.eh_frame:000000000000711D                 db  41h ; A
.eh_frame:000000000000711E                 db  0Eh
.eh_frame:000000000000711F                 db  20h
.eh_frame:0000000000007120                 db  42h ; B
.eh_frame:0000000000007121                 db  0Eh
.eh_frame:0000000000007122                 db  18h
.eh_frame:0000000000007123                 db  42h ; B
.eh_frame:0000000000007124                 db  0Eh
.eh_frame:0000000000007125                 db  10h
.eh_frame:0000000000007126                 db  42h ; B
.eh_frame:0000000000007127                 db  0Eh
.eh_frame:0000000000007128                 db    8
.eh_frame:0000000000007129                 db  47h ; G
.eh_frame:000000000000712A                 db  0Bh
.eh_frame:000000000000712B                 db    0
.eh_frame:000000000000712C                 db    0
.eh_frame:000000000000712D                 db    0
.eh_frame:000000000000712E                 db    0
.eh_frame:000000000000712F                 db    0
.eh_frame:0000000000007130                 db  10h
.eh_frame:0000000000007131                 db    0
.eh_frame:0000000000007132                 db    0
.eh_frame:0000000000007133                 db    0
.eh_frame:0000000000007134                 db  0Ch
.eh_frame:0000000000007135                 db    2
.eh_frame:0000000000007136                 db    0
.eh_frame:0000000000007137                 db    0
.eh_frame:0000000000007138                 db 0B8h
.eh_frame:0000000000007139                 db 0BAh
.eh_frame:000000000000713A                 db 0FFh
.eh_frame:000000000000713B                 db 0FFh
.eh_frame:000000000000713C                 db    8
.eh_frame:000000000000713D                 db    0
.eh_frame:000000000000713E                 db    0
.eh_frame:000000000000713F                 db    0
.eh_frame:0000000000007140                 db    0
.eh_frame:0000000000007141                 db    0
.eh_frame:0000000000007142                 db    0
.eh_frame:0000000000007143                 db    0
.eh_frame:0000000000007144                 db  10h
.eh_frame:0000000000007145                 db    0
.eh_frame:0000000000007146                 db    0
.eh_frame:0000000000007147                 db    0
.eh_frame:0000000000007148                 db  20h
.eh_frame:0000000000007149                 db    2
.eh_frame:000000000000714A                 db    0
.eh_frame:000000000000714B                 db    0
.eh_frame:000000000000714C                 db 0B4h
.eh_frame:000000000000714D                 db 0BAh
.eh_frame:000000000000714E                 db 0FFh
.eh_frame:000000000000714F                 db 0FFh
.eh_frame:0000000000007150                 db    8
.eh_frame:0000000000007151                 db    0
.eh_frame:0000000000007152                 db    0
.eh_frame:0000000000007153                 db    0
.eh_frame:0000000000007154                 db    0
.eh_frame:0000000000007155                 db    0
.eh_frame:0000000000007156                 db    0
.eh_frame:0000000000007157                 db    0
.eh_frame:0000000000007158                 db  2Ch ; ,
.eh_frame:0000000000007159                 db    0
.eh_frame:000000000000715A                 db    0
.eh_frame:000000000000715B                 db    0
.eh_frame:000000000000715C                 db  34h ; 4
.eh_frame:000000000000715D                 db    2
.eh_frame:000000000000715E                 db    0
.eh_frame:000000000000715F                 db    0
.eh_frame:0000000000007160                 db 0B0h
.eh_frame:0000000000007161                 db 0BAh
.eh_frame:0000000000007162                 db 0FFh
.eh_frame:0000000000007163                 db 0FFh
.eh_frame:0000000000007164                 db 0A4h
.eh_frame:0000000000007165                 db    0
.eh_frame:0000000000007166                 db    0
.eh_frame:0000000000007167                 db    0
.eh_frame:0000000000007168                 db    0
.eh_frame:0000000000007169                 db  41h ; A
.eh_frame:000000000000716A                 db  0Eh
.eh_frame:000000000000716B                 db  10h
.eh_frame:000000000000716C                 db  86h
.eh_frame:000000000000716D                 db    2
.eh_frame:000000000000716E                 db  41h ; A
.eh_frame:000000000000716F                 db  0Eh
.eh_frame:0000000000007170                 db  18h
.eh_frame:0000000000007171                 db  83h
.eh_frame:0000000000007172                 db    3
.eh_frame:0000000000007173                 db  44h ; D
.eh_frame:0000000000007174                 db  0Eh
.eh_frame:0000000000007175                 db  20h
.eh_frame:0000000000007176                 db  7Ah ; z
.eh_frame:0000000000007177                 db  0Ah
.eh_frame:0000000000007178                 db  0Eh
.eh_frame:0000000000007179                 db  18h
.eh_frame:000000000000717A                 db  41h ; A
.eh_frame:000000000000717B                 db  0Eh
.eh_frame:000000000000717C                 db  10h
.eh_frame:000000000000717D                 db  41h ; A
.eh_frame:000000000000717E                 db  0Eh
.eh_frame:000000000000717F                 db    8
.eh_frame:0000000000007180                 db  41h ; A
.eh_frame:0000000000007181                 db  0Bh
.eh_frame:0000000000007182                 db    0
.eh_frame:0000000000007183                 db    0
.eh_frame:0000000000007184                 db    0
.eh_frame:0000000000007185                 db    0
.eh_frame:0000000000007186                 db    0
.eh_frame:0000000000007187                 db    0
.eh_frame:0000000000007188                 db  10h
.eh_frame:0000000000007189                 db    0
.eh_frame:000000000000718A                 db    0
.eh_frame:000000000000718B                 db    0
.eh_frame:000000000000718C                 db  64h ; d
.eh_frame:000000000000718D                 db    2
.eh_frame:000000000000718E                 db    0
.eh_frame:000000000000718F                 db    0
.eh_frame:0000000000007190                 db  30h ; 0
.eh_frame:0000000000007191                 db 0BBh
.eh_frame:0000000000007192                 db 0FFh
.eh_frame:0000000000007193                 db 0FFh
.eh_frame:0000000000007194                 db    5
.eh_frame:0000000000007195                 db    0
.eh_frame:0000000000007196                 db    0
.eh_frame:0000000000007197                 db    0
.eh_frame:0000000000007198                 db    0
.eh_frame:0000000000007199                 db    0
.eh_frame:000000000000719A                 db    0
.eh_frame:000000000000719B                 db    0
.eh_frame:000000000000719C                 db  18h
.eh_frame:000000000000719D                 db    0
.eh_frame:000000000000719E                 db    0
.eh_frame:000000000000719F                 db    0
.eh_frame:00000000000071A0                 db  78h ; x
.eh_frame:00000000000071A1                 db    2
.eh_frame:00000000000071A2                 db    0
.eh_frame:00000000000071A3                 db    0
.eh_frame:00000000000071A4                 db  2Ch ; ,
.eh_frame:00000000000071A5                 db 0BBh
.eh_frame:00000000000071A6                 db 0FFh
.eh_frame:00000000000071A7                 db 0FFh
.eh_frame:00000000000071A8                 db  22h ; "
.eh_frame:00000000000071A9                 db    0
.eh_frame:00000000000071AA                 db    0
.eh_frame:00000000000071AB                 db    0
.eh_frame:00000000000071AC                 db    0
.eh_frame:00000000000071AD                 db  46h ; F
.eh_frame:00000000000071AE                 db  0Eh
.eh_frame:00000000000071AF                 db  10h
.eh_frame:00000000000071B0                 db  83h
.eh_frame:00000000000071B1                 db    2
.eh_frame:00000000000071B2                 db  4Eh ; N
.eh_frame:00000000000071B3                 db 0C3h
.eh_frame:00000000000071B4                 db  0Eh
.eh_frame:00000000000071B5                 db    8
.eh_frame:00000000000071B6                 db    0
.eh_frame:00000000000071B7                 db    0
.eh_frame:00000000000071B8                 db  1Ch
.eh_frame:00000000000071B9                 db    0
.eh_frame:00000000000071BA                 db    0
.eh_frame:00000000000071BB                 db    0
.eh_frame:00000000000071BC                 db  94h
.eh_frame:00000000000071BD                 db    2
.eh_frame:00000000000071BE                 db    0
.eh_frame:00000000000071BF                 db    0
.eh_frame:00000000000071C0                 db  40h ; @
.eh_frame:00000000000071C1                 db 0BBh
.eh_frame:00000000000071C2                 db 0FFh
.eh_frame:00000000000071C3                 db 0FFh
.eh_frame:00000000000071C4                 db  9Fh
.eh_frame:00000000000071C5                 db    0
.eh_frame:00000000000071C6                 db    0
.eh_frame:00000000000071C7                 db    0
.eh_frame:00000000000071C8                 db    0
.eh_frame:00000000000071C9                 db  44h ; D
.eh_frame:00000000000071CA                 db  0Eh
.eh_frame:00000000000071CB                 db  10h
.eh_frame:00000000000071CC                 db  83h
.eh_frame:00000000000071CD                 db    2
.eh_frame:00000000000071CE                 db    2
.eh_frame:00000000000071CF                 db  78h ; x
.eh_frame:00000000000071D0                 db  0Ah
.eh_frame:00000000000071D1                 db  0Eh
.eh_frame:00000000000071D2                 db    8
.eh_frame:00000000000071D3                 db  41h ; A
.eh_frame:00000000000071D4                 db  0Bh
.eh_frame:00000000000071D5                 db    0
.eh_frame:00000000000071D6                 db    0
.eh_frame:00000000000071D7                 db    0
.eh_frame:00000000000071D8                 db  40h ; @
.eh_frame:00000000000071D9                 db    0
.eh_frame:00000000000071DA                 db    0
.eh_frame:00000000000071DB                 db    0
.eh_frame:00000000000071DC                 db 0B4h
.eh_frame:00000000000071DD                 db    2
.eh_frame:00000000000071DE                 db    0
.eh_frame:00000000000071DF                 db    0
.eh_frame:00000000000071E0                 db 0C0h
.eh_frame:00000000000071E1                 db 0BBh
.eh_frame:00000000000071E2                 db 0FFh
.eh_frame:00000000000071E3                 db 0FFh
.eh_frame:00000000000071E4                 db 0E7h
.eh_frame:00000000000071E5                 db    0
.eh_frame:00000000000071E6                 db    0
.eh_frame:00000000000071E7                 db    0
.eh_frame:00000000000071E8                 db    0
.eh_frame:00000000000071E9                 db  41h ; A
.eh_frame:00000000000071EA                 db  0Eh
.eh_frame:00000000000071EB                 db  10h
.eh_frame:00000000000071EC                 db  86h
.eh_frame:00000000000071ED                 db    2
.eh_frame:00000000000071EE                 db  41h ; A
.eh_frame:00000000000071EF                 db  0Eh
.eh_frame:00000000000071F0                 db  18h
.eh_frame:00000000000071F1                 db  83h
.eh_frame:00000000000071F2                 db    3
.eh_frame:00000000000071F3                 db  49h ; I
.eh_frame:00000000000071F4                 db  0Eh
.eh_frame:00000000000071F5                 db  20h
.eh_frame:00000000000071F6                 db  6Eh ; n
.eh_frame:00000000000071F7                 db  0Ah
.eh_frame:00000000000071F8                 db  0Eh
.eh_frame:00000000000071F9                 db  18h
.eh_frame:00000000000071FA                 db  41h ; A
.eh_frame:00000000000071FB                 db  0Eh
.eh_frame:00000000000071FC                 db  10h
.eh_frame:00000000000071FD                 db  41h ; A
.eh_frame:00000000000071FE                 db  0Eh
.eh_frame:00000000000071FF                 db    8
.eh_frame:0000000000007200                 db  45h ; E
.eh_frame:0000000000007201                 db  0Bh
.eh_frame:0000000000007202                 db    2
.eh_frame:0000000000007203                 db  4Ah ; J
.eh_frame:0000000000007204                 db  0Ah
.eh_frame:0000000000007205                 db  0Eh
.eh_frame:0000000000007206                 db  18h
.eh_frame:0000000000007207                 db  41h ; A
.eh_frame:0000000000007208                 db  0Eh
.eh_frame:0000000000007209                 db  10h
.eh_frame:000000000000720A                 db  41h ; A
.eh_frame:000000000000720B                 db  0Eh
.eh_frame:000000000000720C                 db    8
.eh_frame:000000000000720D                 db  44h ; D
.eh_frame:000000000000720E                 db  0Bh
.eh_frame:000000000000720F                 db    2
.eh_frame:0000000000007210                 db  54h ; T
.eh_frame:0000000000007211                 db  0Eh
.eh_frame:0000000000007212                 db  18h
.eh_frame:0000000000007213                 db  41h ; A
.eh_frame:0000000000007214                 db  0Eh
.eh_frame:0000000000007215                 db  10h
.eh_frame:0000000000007216                 db  41h ; A
.eh_frame:0000000000007217                 db  0Eh
.eh_frame:0000000000007218                 db    8
.eh_frame:0000000000007219                 db    0
.eh_frame:000000000000721A                 db    0
.eh_frame:000000000000721B                 db    0
.eh_frame:000000000000721C                 db  74h ; t
.eh_frame:000000000000721D                 db    0
.eh_frame:000000000000721E                 db    0
.eh_frame:000000000000721F                 db    0
.eh_frame:0000000000007220                 db 0F8h
.eh_frame:0000000000007221                 db    2
.eh_frame:0000000000007222                 db    0
.eh_frame:0000000000007223                 db    0
.eh_frame:0000000000007224                 db  6Ch ; l
.eh_frame:0000000000007225                 db 0BCh
.eh_frame:0000000000007226                 db 0FFh
.eh_frame:0000000000007227                 db 0FFh
.eh_frame:0000000000007228                 db  34h ; 4
.eh_frame:0000000000007229                 db  12h
.eh_frame:000000000000722A                 db    0
.eh_frame:000000000000722B                 db    0
.eh_frame:000000000000722C                 db    0
.eh_frame:000000000000722D                 db  42h ; B
.eh_frame:000000000000722E                 db  0Eh
.eh_frame:000000000000722F                 db  10h
.eh_frame:0000000000007230                 db  8Fh
.eh_frame:0000000000007231                 db    2
.eh_frame:0000000000007232                 db  42h ; B
.eh_frame:0000000000007233                 db  0Eh
.eh_frame:0000000000007234                 db  18h
.eh_frame:0000000000007235                 db  8Eh
.eh_frame:0000000000007236                 db    3
.eh_frame:0000000000007237                 db  45h ; E
.eh_frame:0000000000007238                 db  0Eh
.eh_frame:0000000000007239                 db  20h
.eh_frame:000000000000723A                 db  8Dh
.eh_frame:000000000000723B                 db    4
.eh_frame:000000000000723C                 db  42h ; B
.eh_frame:000000000000723D                 db  0Eh
.eh_frame:000000000000723E                 db  28h ; (
.eh_frame:000000000000723F                 db  8Ch
.eh_frame:0000000000007240                 db    5
.eh_frame:0000000000007241                 db  44h ; D
.eh_frame:0000000000007242                 db  0Eh
.eh_frame:0000000000007243                 db  30h ; 0
.eh_frame:0000000000007244                 db  86h
.eh_frame:0000000000007245                 db    6
.eh_frame:0000000000007246                 db  41h ; A
.eh_frame:0000000000007247                 db  0Eh
.eh_frame:0000000000007248                 db  38h ; 8
.eh_frame:0000000000007249                 db  83h
.eh_frame:000000000000724A                 db    7
.eh_frame:000000000000724B                 db  53h ; S
.eh_frame:000000000000724C                 db  0Eh
.eh_frame:000000000000724D                 db 0F0h
.eh_frame:000000000000724E                 db    1
.eh_frame:000000000000724F                 db    3
.eh_frame:0000000000007250                 db  81h
.eh_frame:0000000000007251                 db  0Bh
.eh_frame:0000000000007252                 db  0Eh
.eh_frame:0000000000007253                 db 0F8h
.eh_frame:0000000000007254                 db    1
.eh_frame:0000000000007255                 db  4Ah ; J
.eh_frame:0000000000007256                 db  0Eh
.eh_frame:0000000000007257                 db  80h
.eh_frame:0000000000007258                 db    2
.eh_frame:0000000000007259                 db  44h ; D
.eh_frame:000000000000725A                 db  0Eh
.eh_frame:000000000000725B                 db  88h
.eh_frame:000000000000725C                 db    2
.eh_frame:000000000000725D                 db  45h ; E
.eh_frame:000000000000725E                 db  0Eh
.eh_frame:000000000000725F                 db  90h
.eh_frame:0000000000007260                 db    2
.eh_frame:0000000000007261                 db  5Fh ; _
.eh_frame:0000000000007262                 db  0Eh
.eh_frame:0000000000007263                 db 0F0h
.eh_frame:0000000000007264                 db    1
.eh_frame:0000000000007265                 db  64h ; d
.eh_frame:0000000000007266                 db  0Ah
.eh_frame:0000000000007267                 db  0Eh
.eh_frame:0000000000007268                 db  38h ; 8
.eh_frame:0000000000007269                 db  41h ; A
.eh_frame:000000000000726A                 db  0Eh
.eh_frame:000000000000726B                 db  30h ; 0
.eh_frame:000000000000726C                 db  41h ; A
.eh_frame:000000000000726D                 db  0Eh
.eh_frame:000000000000726E                 db  28h ; (
.eh_frame:000000000000726F                 db  42h ; B
.eh_frame:0000000000007270                 db  0Eh
.eh_frame:0000000000007271                 db  20h
.eh_frame:0000000000007272                 db  42h ; B
.eh_frame:0000000000007273                 db  0Eh
.eh_frame:0000000000007274                 db  18h
.eh_frame:0000000000007275                 db  42h ; B
.eh_frame:0000000000007276                 db  0Eh
.eh_frame:0000000000007277                 db  10h
.eh_frame:0000000000007278                 db  42h ; B
.eh_frame:0000000000007279                 db  0Eh
.eh_frame:000000000000727A                 db    8
.eh_frame:000000000000727B                 db  44h ; D
.eh_frame:000000000000727C                 db  0Bh
.eh_frame:000000000000727D                 db    3
.eh_frame:000000000000727E                 db  99h
.eh_frame:000000000000727F                 db    5
.eh_frame:0000000000007280                 db  0Eh
.eh_frame:0000000000007281                 db 0F8h
.eh_frame:0000000000007282                 db    1
.eh_frame:0000000000007283                 db  4Dh ; M
.eh_frame:0000000000007284                 db  0Eh
.eh_frame:0000000000007285                 db  80h
.eh_frame:0000000000007286                 db    2
.eh_frame:0000000000007287                 db  44h ; D
.eh_frame:0000000000007288                 db  0Eh
.eh_frame:0000000000007289                 db  88h
.eh_frame:000000000000728A                 db    2
.eh_frame:000000000000728B                 db  47h ; G
.eh_frame:000000000000728C                 db  0Eh
.eh_frame:000000000000728D                 db  90h
.eh_frame:000000000000728E                 db    2
.eh_frame:000000000000728F                 db  5Bh ; [
.eh_frame:0000000000007290                 db  0Eh
.eh_frame:0000000000007291                 db 0F0h
.eh_frame:0000000000007292                 db    1
.eh_frame:0000000000007293                 db    0
.eh_frame:0000000000007294                 db  68h ; h
.eh_frame:0000000000007295                 db    0
.eh_frame:0000000000007296                 db    0
.eh_frame:0000000000007297                 db    0
.eh_frame:0000000000007298                 db  70h ; p
.eh_frame:0000000000007299                 db    3
.eh_frame:000000000000729A                 db    0
.eh_frame:000000000000729B                 db    0
.eh_frame:000000000000729C                 db  34h ; 4
.eh_frame:000000000000729D                 db 0CEh
.eh_frame:000000000000729E                 db 0FFh
.eh_frame:000000000000729F                 db 0FFh
.eh_frame:00000000000072A0                 db 0ABh
.eh_frame:00000000000072A1                 db    1
.eh_frame:00000000000072A2                 db    0
.eh_frame:00000000000072A3                 db    0
.eh_frame:00000000000072A4                 db    0
.eh_frame:00000000000072A5                 db  42h ; B
.eh_frame:00000000000072A6                 db  0Eh
.eh_frame:00000000000072A7                 db  10h
.eh_frame:00000000000072A8                 db  8Fh
.eh_frame:00000000000072A9                 db    2
.eh_frame:00000000000072AA                 db  42h ; B
.eh_frame:00000000000072AB                 db  0Eh
.eh_frame:00000000000072AC                 db  18h
.eh_frame:00000000000072AD                 db  8Eh
.eh_frame:00000000000072AE                 db    3
.eh_frame:00000000000072AF                 db  45h ; E
.eh_frame:00000000000072B0                 db  0Eh
.eh_frame:00000000000072B1                 db  20h
.eh_frame:00000000000072B2                 db  8Dh
.eh_frame:00000000000072B3                 db    4
.eh_frame:00000000000072B4                 db  42h ; B
.eh_frame:00000000000072B5                 db  0Eh
.eh_frame:00000000000072B6                 db  28h ; (
.eh_frame:00000000000072B7                 db  8Ch
.eh_frame:00000000000072B8                 db    5
.eh_frame:00000000000072B9                 db  44h ; D
.eh_frame:00000000000072BA                 db  0Eh
.eh_frame:00000000000072BB                 db  30h ; 0
.eh_frame:00000000000072BC                 db  86h
.eh_frame:00000000000072BD                 db    6
.eh_frame:00000000000072BE                 db  41h ; A
.eh_frame:00000000000072BF                 db  0Eh
.eh_frame:00000000000072C0                 db  38h ; 8
.eh_frame:00000000000072C1                 db  83h
.eh_frame:00000000000072C2                 db    7
.eh_frame:00000000000072C3                 db  47h ; G
.eh_frame:00000000000072C4                 db  0Eh
.eh_frame:00000000000072C5                 db  60h ; `
.eh_frame:00000000000072C6                 db    2
.eh_frame:00000000000072C7                 db  99h
.eh_frame:00000000000072C8                 db  0Eh
.eh_frame:00000000000072C9                 db  68h ; h
.eh_frame:00000000000072CA                 db  5Fh ; _
.eh_frame:00000000000072CB                 db  0Eh
.eh_frame:00000000000072CC                 db  70h ; p
.eh_frame:00000000000072CD                 db  46h ; F
.eh_frame:00000000000072CE                 db  0Eh
.eh_frame:00000000000072CF                 db  78h ; x
.eh_frame:00000000000072D0                 db  42h ; B
.eh_frame:00000000000072D1                 db  0Eh
.eh_frame:00000000000072D2                 db  80h
.eh_frame:00000000000072D3                 db    1
.eh_frame:00000000000072D4                 db  59h ; Y
.eh_frame:00000000000072D5                 db  0Eh
.eh_frame:00000000000072D6                 db  60h ; `
.eh_frame:00000000000072D7                 db    2
.eh_frame:00000000000072D8                 db  40h ; @
.eh_frame:00000000000072D9                 db  0Eh
.eh_frame:00000000000072DA                 db  68h ; h
.eh_frame:00000000000072DB                 db  4Bh ; K
.eh_frame:00000000000072DC                 db  0Eh
.eh_frame:00000000000072DD                 db  70h ; p
.eh_frame:00000000000072DE                 db  43h ; C
.eh_frame:00000000000072DF                 db  0Eh
.eh_frame:00000000000072E0                 db  78h ; x
.eh_frame:00000000000072E1                 db  45h ; E
.eh_frame:00000000000072E2                 db  0Eh
.eh_frame:00000000000072E3                 db  80h
.eh_frame:00000000000072E4                 db    1
.eh_frame:00000000000072E5                 db  5Eh ; ^
.eh_frame:00000000000072E6                 db  0Eh
.eh_frame:00000000000072E7                 db  60h ; `
.eh_frame:00000000000072E8                 db  4Ch ; L
.eh_frame:00000000000072E9                 db  0Ah
.eh_frame:00000000000072EA                 db  0Eh
.eh_frame:00000000000072EB                 db  38h ; 8
.eh_frame:00000000000072EC                 db  44h ; D
.eh_frame:00000000000072ED                 db  0Eh
.eh_frame:00000000000072EE                 db  30h ; 0
.eh_frame:00000000000072EF                 db  41h ; A
.eh_frame:00000000000072F0                 db  0Eh
.eh_frame:00000000000072F1                 db  28h ; (
.eh_frame:00000000000072F2                 db  42h ; B
.eh_frame:00000000000072F3                 db  0Eh
.eh_frame:00000000000072F4                 db  20h
.eh_frame:00000000000072F5                 db  42h ; B
.eh_frame:00000000000072F6                 db  0Eh
.eh_frame:00000000000072F7                 db  18h
.eh_frame:00000000000072F8                 db  42h ; B
.eh_frame:00000000000072F9                 db  0Eh
.eh_frame:00000000000072FA                 db  10h
.eh_frame:00000000000072FB                 db  42h ; B
.eh_frame:00000000000072FC                 db  0Eh
.eh_frame:00000000000072FD                 db    8
.eh_frame:00000000000072FE                 db  46h ; F
.eh_frame:00000000000072FF                 db  0Bh
.eh_frame:0000000000007300                 db  28h ; (
.eh_frame:0000000000007301                 db    0
.eh_frame:0000000000007302                 db    0
.eh_frame:0000000000007303                 db    0
.eh_frame:0000000000007304                 db 0DCh
.eh_frame:0000000000007305                 db    3
.eh_frame:0000000000007306                 db    0
.eh_frame:0000000000007307                 db    0
.eh_frame:0000000000007308                 db  78h ; x
.eh_frame:0000000000007309                 db 0CFh
.eh_frame:000000000000730A                 db 0FFh
.eh_frame:000000000000730B                 db 0FFh
.eh_frame:000000000000730C                 db  36h ; 6
.eh_frame:000000000000730D                 db    0
.eh_frame:000000000000730E                 db    0
.eh_frame:000000000000730F                 db    0
.eh_frame:0000000000007310                 db    0
.eh_frame:0000000000007311                 db  42h ; B
.eh_frame:0000000000007312                 db  0Eh
.eh_frame:0000000000007313                 db  10h
.eh_frame:0000000000007314                 db  8Ch
.eh_frame:0000000000007315                 db    2
.eh_frame:0000000000007316                 db  41h ; A
.eh_frame:0000000000007317                 db  0Eh
.eh_frame:0000000000007318                 db  18h
.eh_frame:0000000000007319                 db  86h
.eh_frame:000000000000731A                 db    3
.eh_frame:000000000000731B                 db  41h ; A
.eh_frame:000000000000731C                 db  0Eh
.eh_frame:000000000000731D                 db  20h
.eh_frame:000000000000731E                 db  83h
.eh_frame:000000000000731F                 db    4
.eh_frame:0000000000007320                 db  6Eh ; n
.eh_frame:0000000000007321                 db  0Eh
.eh_frame:0000000000007322                 db  18h
.eh_frame:0000000000007323                 db  41h ; A
.eh_frame:0000000000007324                 db  0Eh
.eh_frame:0000000000007325 unk_7325        db  10h                 ; DATA XREF: .rodata:format↑o
.eh_frame:0000000000007326                 db  42h ; B
.eh_frame:0000000000007327                 db  0Eh
.eh_frame:0000000000007328                 db    8
.eh_frame:0000000000007329                 db    0
.eh_frame:000000000000732A                 db    0
.eh_frame:000000000000732B                 db    0
.eh_frame:000000000000732C                 db  10h
.eh_frame:000000000000732D                 db    0
.eh_frame:000000000000732E                 db    0
.eh_frame:000000000000732F                 db    0
.eh_frame:0000000000007330                 db    8
.eh_frame:0000000000007331                 db    4
.eh_frame:0000000000007332                 db    0
.eh_frame:0000000000007333                 db    0
.eh_frame:0000000000007334                 db  8Ch
.eh_frame:0000000000007335                 db 0CFh
.eh_frame:0000000000007336                 db 0FFh
.eh_frame:0000000000007337                 db 0FFh
.eh_frame:0000000000007338                 db  11h
.eh_frame:0000000000007339                 db    0
.eh_frame:000000000000733A                 db    0
.eh_frame:000000000000733B                 db    0
.eh_frame:000000000000733C                 db    0
.eh_frame:000000000000733D                 db    0
.eh_frame:000000000000733E                 db    0
.eh_frame:000000000000733F                 db    0
.eh_frame:0000000000007340                 db  10h
.eh_frame:0000000000007341                 db    0
.eh_frame:0000000000007342                 db    0
.eh_frame:0000000000007343                 db    0
.eh_frame:0000000000007344                 db  1Ch
.eh_frame:0000000000007345                 db    4
.eh_frame:0000000000007346                 db    0
.eh_frame:0000000000007347                 db    0
.eh_frame:0000000000007348                 db  98h
.eh_frame:0000000000007349                 db 0CFh
.eh_frame:000000000000734A                 db 0FFh
.eh_frame:000000000000734B                 db 0FFh
.eh_frame:000000000000734C                 db  11h
.eh_frame:000000000000734D                 db    0
.eh_frame:000000000000734E                 db    0
.eh_frame:000000000000734F                 db    0
.eh_frame:0000000000007350                 db    0
.eh_frame:0000000000007351                 db    0
.eh_frame:0000000000007352                 db    0
.eh_frame:0000000000007353                 db    0
.eh_frame:0000000000007354                 db  10h
.eh_frame:0000000000007355                 db    0
.eh_frame:0000000000007356                 db    0
.eh_frame:0000000000007357                 db    0
.eh_frame:0000000000007358                 db  30h ; 0
.eh_frame:0000000000007359                 db    4
.eh_frame:000000000000735A                 db    0
.eh_frame:000000000000735B                 db    0
.eh_frame:000000000000735C                 db 0A4h
.eh_frame:000000000000735D                 db 0CFh
.eh_frame:000000000000735E                 db 0FFh
.eh_frame:000000000000735F                 db 0FFh
.eh_frame:0000000000007360                 db  35h ; 5
.eh_frame:0000000000007361                 db    0
.eh_frame:0000000000007362                 db    0
.eh_frame:0000000000007363                 db    0
.eh_frame:0000000000007364                 db    0
.eh_frame:0000000000007365                 db    0
.eh_frame:0000000000007366                 db    0
.eh_frame:0000000000007367                 db    0
.eh_frame:0000000000007368                 db  10h
.eh_frame:0000000000007369                 db    0
.eh_frame:000000000000736A                 db    0
.eh_frame:000000000000736B                 db    0
.eh_frame:000000000000736C                 db  44h ; D
.eh_frame:000000000000736D                 db    4
.eh_frame:000000000000736E                 db    0
.eh_frame:000000000000736F                 db    0
.eh_frame:0000000000007370                 db 0D0h
.eh_frame:0000000000007371                 db 0CFh
.eh_frame:0000000000007372                 db 0FFh
.eh_frame:0000000000007373                 db 0FFh
.eh_frame:0000000000007374                 db  15h
.eh_frame:0000000000007375                 db    0
.eh_frame:0000000000007376                 db    0
.eh_frame:0000000000007377                 db    0
.eh_frame:0000000000007378                 db    0
.eh_frame:0000000000007379                 db    0
.eh_frame:000000000000737A                 db    0
.eh_frame:000000000000737B                 db    0
.eh_frame:000000000000737C                 db  10h
.eh_frame:000000000000737D                 db    0
.eh_frame:000000000000737E                 db    0
.eh_frame:000000000000737F                 db    0
.eh_frame:0000000000007380                 db  58h ; X
.eh_frame:0000000000007381                 db    4
.eh_frame:0000000000007382                 db    0
.eh_frame:0000000000007383                 db    0
.eh_frame:0000000000007384                 db 0DCh
.eh_frame:0000000000007385                 db 0CFh
.eh_frame:0000000000007386                 db 0FFh
.eh_frame:0000000000007387                 db 0FFh
.eh_frame:0000000000007388                 db  30h ; 0
.eh_frame:0000000000007389                 db    0
.eh_frame:000000000000738A                 db    0
.eh_frame:000000000000738B                 db    0
.eh_frame:000000000000738C                 db    0
.eh_frame:000000000000738D                 db  6Bh ; k
.eh_frame:000000000000738E                 db  0Eh
.eh_frame:000000000000738F                 db  10h
.eh_frame:0000000000007390                 db  50h ; P
.eh_frame:0000000000007391                 db    0
.eh_frame:0000000000007392                 db    0
.eh_frame:0000000000007393                 db    0
.eh_frame:0000000000007394                 db  6Ch ; l
.eh_frame:0000000000007395                 db    4
.eh_frame:0000000000007396                 db    0
.eh_frame:0000000000007397                 db    0
.eh_frame:0000000000007398                 db 0F8h
.eh_frame:0000000000007399                 db 0CFh
.eh_frame:000000000000739A                 db 0FFh
.eh_frame:000000000000739B                 db 0FFh
.eh_frame:000000000000739C                 db  74h ; t
.eh_frame:000000000000739D                 db    0
.eh_frame:000000000000739E                 db    0
.eh_frame:000000000000739F                 db    0
.eh_frame:00000000000073A0                 db    0
.eh_frame:00000000000073A1                 db  42h ; B
.eh_frame:00000000000073A2                 db  0Eh
.eh_frame:00000000000073A3                 db  10h
.eh_frame:00000000000073A4                 db  8Fh
.eh_frame:00000000000073A5                 db    2
.eh_frame:00000000000073A6                 db  42h ; B
.eh_frame:00000000000073A7                 db  0Eh
.eh_frame:00000000000073A8                 db  18h
.eh_frame:00000000000073A9                 db  8Eh
.eh_frame:00000000000073AA                 db    3
.eh_frame:00000000000073AB                 db  49h ; I
.eh_frame:00000000000073AC                 db  0Eh
.eh_frame:00000000000073AD                 db  20h
.eh_frame:00000000000073AE                 db  8Dh
.eh_frame:00000000000073AF                 db    4
.eh_frame:00000000000073B0                 db  42h ; B
.eh_frame:00000000000073B1                 db  0Eh
.eh_frame:00000000000073B2                 db  28h ; (
.eh_frame:00000000000073B3                 db  8Ch
.eh_frame:00000000000073B4                 db    5
.eh_frame:00000000000073B5                 db  44h ; D
.eh_frame:00000000000073B6                 db  0Eh
.eh_frame:00000000000073B7                 db  30h ; 0
.eh_frame:00000000000073B8                 db  86h
.eh_frame:00000000000073B9                 db    6
.eh_frame:00000000000073BA                 db  41h ; A
.eh_frame:00000000000073BB                 db  0Eh
.eh_frame:00000000000073BC                 db  38h ; 8
.eh_frame:00000000000073BD                 db  83h
.eh_frame:00000000000073BE                 db    7
.eh_frame:00000000000073BF                 db  4Dh ; M
.eh_frame:00000000000073C0                 db  0Eh
.eh_frame:00000000000073C1                 db  50h ; P
.eh_frame:00000000000073C2                 db  5Fh ; _
.eh_frame:00000000000073C3                 db  0Eh
.eh_frame:00000000000073C4                 db  58h ; X
.eh_frame:00000000000073C5                 db  47h ; G
.eh_frame:00000000000073C6                 db  0Eh
.eh_frame:00000000000073C7                 db  60h ; `
.eh_frame:00000000000073C8                 db  46h ; F
.eh_frame:00000000000073C9                 db  0Eh
.eh_frame:00000000000073CA                 db  68h ; h
.eh_frame:00000000000073CB                 db  44h ; D
.eh_frame:00000000000073CC                 db  0Eh
.eh_frame:00000000000073CD                 db  70h ; p
.eh_frame:00000000000073CE                 db  58h ; X
.eh_frame:00000000000073CF                 db  0Eh
.eh_frame:00000000000073D0                 db  38h ; 8
.eh_frame:00000000000073D1                 db  41h ; A
.eh_frame:00000000000073D2                 db  0Eh
.eh_frame:00000000000073D3                 db  30h ; 0
.eh_frame:00000000000073D4                 db  41h ; A
.eh_frame:00000000000073D5                 db  0Eh
.eh_frame:00000000000073D6                 db  28h ; (
.eh_frame:00000000000073D7                 db  42h ; B
.eh_frame:00000000000073D8                 db  0Eh
.eh_frame:00000000000073D9                 db  20h
.eh_frame:00000000000073DA                 db  42h ; B
.eh_frame:00000000000073DB                 db  0Eh
.eh_frame:00000000000073DC                 db  18h
.eh_frame:00000000000073DD                 db  42h ; B
.eh_frame:00000000000073DE                 db  0Eh
.eh_frame:00000000000073DF                 db  10h
.eh_frame:00000000000073E0                 db  42h ; B
.eh_frame:00000000000073E1                 db  0Eh
.eh_frame:00000000000073E2                 db    8
.eh_frame:00000000000073E3                 db    0
.eh_frame:00000000000073E4                 db  68h ; h
.eh_frame:00000000000073E5                 db    0
.eh_frame:00000000000073E6                 db    0
.eh_frame:00000000000073E7                 db    0
.eh_frame:00000000000073E8                 db 0C0h
.eh_frame:00000000000073E9                 db    4
.eh_frame:00000000000073EA                 db    0
.eh_frame:00000000000073EB                 db    0
.eh_frame:00000000000073EC                 db  24h ; $
.eh_frame:00000000000073ED                 db 0D0h
.eh_frame:00000000000073EE                 db 0FFh
.eh_frame:00000000000073EF                 db 0FFh
.eh_frame:00000000000073F0                 db 0E3h
.eh_frame:00000000000073F1                 db    0
.eh_frame:00000000000073F2                 db    0
.eh_frame:00000000000073F3                 db    0
.eh_frame:00000000000073F4                 db    0
.eh_frame:00000000000073F5                 db  42h ; B
.eh_frame:00000000000073F6                 db  0Eh
.eh_frame:00000000000073F7                 db  10h
.eh_frame:00000000000073F8                 db  8Fh
.eh_frame:00000000000073F9                 db    2
.eh_frame:00000000000073FA                 db  42h ; B
.eh_frame:00000000000073FB                 db  0Eh
.eh_frame:00000000000073FC                 db  18h
.eh_frame:00000000000073FD                 db  8Eh
.eh_frame:00000000000073FE                 db    3
.eh_frame:00000000000073FF                 db  49h ; I
.eh_frame:0000000000007400                 db  0Eh
.eh_frame:0000000000007401                 db  20h
.eh_frame:0000000000007402                 db  8Dh
.eh_frame:0000000000007403                 db    4
.eh_frame:0000000000007404                 db  42h ; B
.eh_frame:0000000000007405                 db  0Eh
.eh_frame:0000000000007406                 db  28h ; (
.eh_frame:0000000000007407                 db  8Ch
.eh_frame:0000000000007408                 db    5
.eh_frame:0000000000007409                 db  44h ; D
.eh_frame:000000000000740A                 db  0Eh
.eh_frame:000000000000740B                 db  30h ; 0
.eh_frame:000000000000740C                 db  86h
.eh_frame:000000000000740D                 db    6
.eh_frame:000000000000740E                 db  41h ; A
.eh_frame:000000000000740F                 db  0Eh
.eh_frame:0000000000007410                 db  38h ; 8
.eh_frame:0000000000007411                 db  83h
.eh_frame:0000000000007412                 db    7
.eh_frame:0000000000007413                 db  4Dh ; M
.eh_frame:0000000000007414                 db  0Eh
.eh_frame:0000000000007415                 db  70h ; p
.eh_frame:0000000000007416                 db  65h ; e
.eh_frame:0000000000007417                 db  0Eh
.eh_frame:0000000000007418                 db  78h ; x
.eh_frame:0000000000007419                 db  4Dh ; M
.eh_frame:000000000000741A                 db  0Eh
.eh_frame:000000000000741B                 db  80h
.eh_frame:000000000000741C                 db    1
.eh_frame:000000000000741D                 db  46h ; F
.eh_frame:000000000000741E                 db  0Eh
.eh_frame:000000000000741F                 db  88h
.eh_frame:0000000000007420                 db    1
.eh_frame:0000000000007421                 db  42h ; B
.eh_frame:0000000000007422                 db  0Eh
.eh_frame:0000000000007423                 db  90h
.eh_frame:0000000000007424                 db    1
.eh_frame:0000000000007425                 db  5Eh ; ^
.eh_frame:0000000000007426                 db  0Eh
.eh_frame:0000000000007427                 db  70h ; p
.eh_frame:0000000000007428                 db  56h ; V
.eh_frame:0000000000007429                 db  0Eh
.eh_frame:000000000000742A                 db  78h ; x
.eh_frame:000000000000742B                 db  43h ; C
.eh_frame:000000000000742C                 db  0Eh
.eh_frame:000000000000742D                 db  80h
.eh_frame:000000000000742E                 db    1
.eh_frame:000000000000742F                 db  43h ; C
.eh_frame:0000000000007430                 db  0Eh
.eh_frame:0000000000007431                 db  88h
.eh_frame:0000000000007432                 db    1
.eh_frame:0000000000007433                 db  56h ; V
.eh_frame:0000000000007434                 db  0Eh
.eh_frame:0000000000007435                 db  90h
.eh_frame:0000000000007436                 db    1
.eh_frame:0000000000007437                 db  52h ; R
.eh_frame:0000000000007438                 db  0Eh
.eh_frame:0000000000007439                 db  70h ; p
.eh_frame:000000000000743A                 db  5Bh ; [
.eh_frame:000000000000743B                 db  0Eh
.eh_frame:000000000000743C                 db  38h ; 8
.eh_frame:000000000000743D                 db  41h ; A
.eh_frame:000000000000743E                 db  0Eh
.eh_frame:000000000000743F                 db  30h ; 0
.eh_frame:0000000000007440                 db  41h ; A
.eh_frame:0000000000007441                 db  0Eh
.eh_frame:0000000000007442                 db  28h ; (
.eh_frame:0000000000007443                 db  42h ; B
.eh_frame:0000000000007444                 db  0Eh
.eh_frame:0000000000007445                 db  20h
.eh_frame:0000000000007446                 db  42h ; B
.eh_frame:0000000000007447                 db  0Eh
.eh_frame:0000000000007448                 db  18h
.eh_frame:0000000000007449                 db  42h ; B
.eh_frame:000000000000744A                 db  0Eh
.eh_frame:000000000000744B                 db  10h
.eh_frame:000000000000744C                 db  42h ; B
.eh_frame:000000000000744D                 db  0Eh
.eh_frame:000000000000744E                 db    8
.eh_frame:000000000000744F                 db    0
.eh_frame:0000000000007450                 db  10h
.eh_frame:0000000000007451                 db    0
.eh_frame:0000000000007452                 db    0
.eh_frame:0000000000007453                 db    0
.eh_frame:0000000000007454                 db  2Ch ; ,
.eh_frame:0000000000007455                 db    5
.eh_frame:0000000000007456                 db    0
.eh_frame:0000000000007457                 db    0
.eh_frame:0000000000007458                 db 0A8h
.eh_frame:0000000000007459                 db 0D0h
.eh_frame:000000000000745A                 db 0FFh
.eh_frame:000000000000745B                 db 0FFh
.eh_frame:000000000000745C                 db  0Ah
.eh_frame:000000000000745D                 db    0
.eh_frame:000000000000745E                 db    0
.eh_frame:000000000000745F                 db    0
.eh_frame:0000000000007460                 db    0
.eh_frame:0000000000007461                 db    0
.eh_frame:0000000000007462                 db    0
.eh_frame:0000000000007463                 db    0
.eh_frame:0000000000007464                 db  28h ; (
.eh_frame:0000000000007465                 db    0
.eh_frame:0000000000007466                 db    0
.eh_frame:0000000000007467                 db    0
.eh_frame:0000000000007468                 db  40h ; @
.eh_frame:0000000000007469                 db    5
.eh_frame:000000000000746A                 db    0
.eh_frame:000000000000746B                 db    0
.eh_frame:000000000000746C                 db 0A4h
.eh_frame:000000000000746D                 db 0D0h
.eh_frame:000000000000746E                 db 0FFh
.eh_frame:000000000000746F                 db 0FFh
.eh_frame:0000000000007470                 db  93h
.eh_frame:0000000000007471                 db    0
.eh_frame:0000000000007472                 db    0
.eh_frame:0000000000007473                 db    0
.eh_frame:0000000000007474                 db    0
.eh_frame:0000000000007475                 db  48h ; H
.eh_frame:0000000000007476                 db  0Eh
.eh_frame:0000000000007477                 db  10h
.eh_frame:0000000000007478                 db  8Ch
.eh_frame:0000000000007479                 db    2
.eh_frame:000000000000747A                 db  48h ; H
.eh_frame:000000000000747B                 db  0Eh
.eh_frame:000000000000747C                 db  18h
.eh_frame:000000000000747D                 db  86h
.eh_frame:000000000000747E                 db    3
.eh_frame:000000000000747F                 db  41h ; A
.eh_frame:0000000000007480                 db  0Eh
.eh_frame:0000000000007481                 db  20h
.eh_frame:0000000000007482                 db  83h
.eh_frame:0000000000007483                 db    4
.eh_frame:0000000000007484                 db    2
.eh_frame:0000000000007485                 db  74h ; t
.eh_frame:0000000000007486                 db  0Eh
.eh_frame:0000000000007487                 db  18h
.eh_frame:0000000000007488                 db  4Bh ; K
.eh_frame:0000000000007489                 db  0Eh
.eh_frame:000000000000748A                 db  10h
.eh_frame:000000000000748B                 db  42h ; B
.eh_frame:000000000000748C                 db  0Eh
.eh_frame:000000000000748D                 db    8
.eh_frame:000000000000748E                 db    0
.eh_frame:000000000000748F                 db    0
.eh_frame:0000000000007490                 db  10h
.eh_frame:0000000000007491                 db    0
.eh_frame:0000000000007492                 db    0
.eh_frame:0000000000007493                 db    0
.eh_frame:0000000000007494                 db  6Ch ; l
.eh_frame:0000000000007495                 db    5
.eh_frame:0000000000007496                 db    0
.eh_frame:0000000000007497                 db    0
.eh_frame:0000000000007498                 db  18h
.eh_frame:0000000000007499                 db 0D1h
.eh_frame:000000000000749A                 db 0FFh
.eh_frame:000000000000749B                 db 0FFh
.eh_frame:000000000000749C                 db  13h
.eh_frame:000000000000749D                 db    0
.eh_frame:000000000000749E                 db    0
.eh_frame:000000000000749F                 db    0
.eh_frame:00000000000074A0                 db    0
.eh_frame:00000000000074A1                 db    0
.eh_frame:00000000000074A2                 db    0
.eh_frame:00000000000074A3                 db    0
.eh_frame:00000000000074A4                 db  10h
.eh_frame:00000000000074A5                 db    0
.eh_frame:00000000000074A6                 db    0
.eh_frame:00000000000074A7                 db    0
.eh_frame:00000000000074A8                 db  80h
.eh_frame:00000000000074A9                 db    5
.eh_frame:00000000000074AA                 db    0
.eh_frame:00000000000074AB                 db    0
.eh_frame:00000000000074AC                 db  24h ; $
.eh_frame:00000000000074AD                 db 0D1h
.eh_frame:00000000000074AE                 db 0FFh
.eh_frame:00000000000074AF                 db 0FFh
.eh_frame:00000000000074B0                 db  0Ch
.eh_frame:00000000000074B1                 db    0
.eh_frame:00000000000074B2                 db    0
.eh_frame:00000000000074B3                 db    0
.eh_frame:00000000000074B4                 db    0
.eh_frame:00000000000074B5                 db    0
.eh_frame:00000000000074B6                 db    0
.eh_frame:00000000000074B7                 db    0
.eh_frame:00000000000074B8                 db  10h
.eh_frame:00000000000074B9                 db    0
.eh_frame:00000000000074BA                 db    0
.eh_frame:00000000000074BB                 db    0
.eh_frame:00000000000074BC                 db  94h
.eh_frame:00000000000074BD                 db    5
.eh_frame:00000000000074BE                 db    0
.eh_frame:00000000000074BF                 db    0
.eh_frame:00000000000074C0                 db  20h
.eh_frame:00000000000074C1                 db 0D1h
.eh_frame:00000000000074C2                 db 0FFh
.eh_frame:00000000000074C3                 db 0FFh
.eh_frame:00000000000074C4                 db  18h
.eh_frame:00000000000074C5                 db    0
.eh_frame:00000000000074C6                 db    0
.eh_frame:00000000000074C7                 db    0
.eh_frame:00000000000074C8                 db    0
.eh_frame:00000000000074C9                 db    0
.eh_frame:00000000000074CA                 db    0
.eh_frame:00000000000074CB                 db    0
.eh_frame:00000000000074CC                 db  10h
.eh_frame:00000000000074CD                 db    0
.eh_frame:00000000000074CE                 db    0
.eh_frame:00000000000074CF                 db    0
.eh_frame:00000000000074D0                 db 0A8h
.eh_frame:00000000000074D1                 db    5
.eh_frame:00000000000074D2                 db    0
.eh_frame:00000000000074D3                 db    0
.eh_frame:00000000000074D4                 db  2Ch ; ,
.eh_frame:00000000000074D5                 db 0D1h
.eh_frame:00000000000074D6                 db 0FFh
.eh_frame:00000000000074D7                 db 0FFh
.eh_frame:00000000000074D8                 db  14h
.eh_frame:00000000000074D9                 db    0
.eh_frame:00000000000074DA                 db    0
.eh_frame:00000000000074DB                 db    0
.eh_frame:00000000000074DC                 db    0
.eh_frame:00000000000074DD                 db    0
.eh_frame:00000000000074DE                 db    0
.eh_frame:00000000000074DF                 db    0
.eh_frame:00000000000074E0                 db  18h
.eh_frame:00000000000074E1                 db    0
.eh_frame:00000000000074E2                 db    0
.eh_frame:00000000000074E3                 db    0
.eh_frame:00000000000074E4                 db 0BCh
.eh_frame:00000000000074E5                 db    5
.eh_frame:00000000000074E6                 db    0
.eh_frame:00000000000074E7                 db    0
.eh_frame:00000000000074E8                 db  38h ; 8
.eh_frame:00000000000074E9                 db 0D1h
.eh_frame:00000000000074EA                 db 0FFh
.eh_frame:00000000000074EB                 db 0FFh
.eh_frame:00000000000074EC                 db  8Eh
.eh_frame:00000000000074ED                 db    0
.eh_frame:00000000000074EE                 db    0
.eh_frame:00000000000074EF                 db    0
.eh_frame:00000000000074F0                 db    0
.eh_frame:00000000000074F1                 db  44h ; D
.eh_frame:00000000000074F2                 db  0Eh
.eh_frame:00000000000074F3                 db  50h ; P
.eh_frame:00000000000074F4                 db    2
.eh_frame:00000000000074F5                 db  7Fh ; 
.eh_frame:00000000000074F6                 db  0Ah
.eh_frame:00000000000074F7                 db  0Eh
.eh_frame:00000000000074F8                 db    8
.eh_frame:00000000000074F9                 db  41h ; A
.eh_frame:00000000000074FA                 db  0Bh
.eh_frame:00000000000074FB                 db    0
.eh_frame:00000000000074FC                 db  18h
.eh_frame:00000000000074FD                 db    0
.eh_frame:00000000000074FE                 db    0
.eh_frame:00000000000074FF                 db    0
.eh_frame:0000000000007500                 db 0D8h
.eh_frame:0000000000007501                 db    5
.eh_frame:0000000000007502                 db    0
.eh_frame:0000000000007503                 db    0
.eh_frame:0000000000007504                 db 0ACh
.eh_frame:0000000000007505                 db 0D1h
.eh_frame:0000000000007506                 db 0FFh
.eh_frame:0000000000007507                 db 0FFh
.eh_frame:0000000000007508                 db  8Ah
.eh_frame:0000000000007509                 db    0
.eh_frame:000000000000750A                 db    0
.eh_frame:000000000000750B                 db    0
.eh_frame:000000000000750C                 db    0
.eh_frame:000000000000750D                 db  44h ; D
.eh_frame:000000000000750E                 db  0Eh
.eh_frame:000000000000750F                 db  50h ; P
.eh_frame:0000000000007510                 db    2
.eh_frame:0000000000007511                 db  7Bh ; {
.eh_frame:0000000000007512                 db  0Ah
.eh_frame:0000000000007513                 db  0Eh
.eh_frame:0000000000007514                 db    8
.eh_frame:0000000000007515                 db  41h ; A
.eh_frame:0000000000007516                 db  0Bh
.eh_frame:0000000000007517                 db    0
.eh_frame:0000000000007518                 db  10h
.eh_frame:0000000000007519                 db    0
.eh_frame:000000000000751A                 db    0
.eh_frame:000000000000751B                 db    0
.eh_frame:000000000000751C                 db 0F4h
.eh_frame:000000000000751D                 db    5
.eh_frame:000000000000751E                 db    0
.eh_frame:000000000000751F                 db    0
.eh_frame:0000000000007520                 db  20h
.eh_frame:0000000000007521                 db 0D2h
.eh_frame:0000000000007522                 db 0FFh
.eh_frame:0000000000007523                 db 0FFh
.eh_frame:0000000000007524                 db  0Ch
.eh_frame:0000000000007525                 db    0
.eh_frame:0000000000007526                 db    0
.eh_frame:0000000000007527                 db    0
.eh_frame:0000000000007528                 db    0
.eh_frame:0000000000007529                 db    0
.eh_frame:000000000000752A                 db    0
.eh_frame:000000000000752B                 db    0
.eh_frame:000000000000752C                 db  10h
.eh_frame:000000000000752D                 db    0
.eh_frame:000000000000752E                 db    0
.eh_frame:000000000000752F                 db    0
.eh_frame:0000000000007530                 db    8
.eh_frame:0000000000007531                 db    6
.eh_frame:0000000000007532                 db    0
.eh_frame:0000000000007533                 db    0
.eh_frame:0000000000007534                 db  1Ch
.eh_frame:0000000000007535                 db 0D2h
.eh_frame:0000000000007536                 db 0FFh
.eh_frame:0000000000007537                 db 0FFh
.eh_frame:0000000000007538                 db  0Fh
.eh_frame:0000000000007539                 db    0
.eh_frame:000000000000753A                 db    0
.eh_frame:000000000000753B                 db    0
.eh_frame:000000000000753C                 db    0
.eh_frame:000000000000753D                 db    0
.eh_frame:000000000000753E                 db    0
.eh_frame:000000000000753F                 db    0
.eh_frame:0000000000007540                 db  18h
.eh_frame:0000000000007541                 db    0
.eh_frame:0000000000007542                 db    0
.eh_frame:0000000000007543                 db    0
.eh_frame:0000000000007544                 db  1Ch
.eh_frame:0000000000007545                 db    6
.eh_frame:0000000000007546                 db    0
.eh_frame:0000000000007547                 db    0
.eh_frame:0000000000007548                 db  18h
.eh_frame:0000000000007549                 db 0D2h
.eh_frame:000000000000754A                 db 0FFh
.eh_frame:000000000000754B                 db 0FFh
.eh_frame:000000000000754C                 db  98h
.eh_frame:000000000000754D                 db    0
.eh_frame:000000000000754E                 db    0
.eh_frame:000000000000754F                 db    0
.eh_frame:0000000000007550                 db    0
.eh_frame:0000000000007551                 db  44h ; D
.eh_frame:0000000000007552                 db  0Eh
.eh_frame:0000000000007553                 db  50h ; P
.eh_frame:0000000000007554                 db    2
.eh_frame:0000000000007555                 db  8Eh
.eh_frame:0000000000007556                 db  0Ah
.eh_frame:0000000000007557                 db  0Eh
.eh_frame:0000000000007558                 db    8
.eh_frame:0000000000007559                 db  41h ; A
.eh_frame:000000000000755A                 db  0Bh
.eh_frame:000000000000755B                 db    0
.eh_frame:000000000000755C                 db  10h
.eh_frame:000000000000755D                 db    0
.eh_frame:000000000000755E                 db    0
.eh_frame:000000000000755F                 db    0
.eh_frame:0000000000007560                 db  38h ; 8
.eh_frame:0000000000007561                 db    6
.eh_frame:0000000000007562                 db    0
.eh_frame:0000000000007563                 db    0
.eh_frame:0000000000007564                 db  9Ch
.eh_frame:0000000000007565                 db 0D2h
.eh_frame:0000000000007566                 db 0FFh
.eh_frame:0000000000007567                 db 0FFh
.eh_frame:0000000000007568                 db  10h
.eh_frame:0000000000007569                 db    0
.eh_frame:000000000000756A                 db    0
.eh_frame:000000000000756B                 db    0
.eh_frame:000000000000756C                 db    0
.eh_frame:000000000000756D                 db    0
.eh_frame:000000000000756E                 db    0
.eh_frame:000000000000756F                 db    0
.eh_frame:0000000000007570                 db  10h
.eh_frame:0000000000007571                 db    0
.eh_frame:0000000000007572                 db    0
.eh_frame:0000000000007573                 db    0
.eh_frame:0000000000007574                 db  4Ch ; L
.eh_frame:0000000000007575                 db    6
.eh_frame:0000000000007576                 db    0
.eh_frame:0000000000007577                 db    0
.eh_frame:0000000000007578                 db  98h
.eh_frame:0000000000007579                 db 0D2h
.eh_frame:000000000000757A                 db 0FFh
.eh_frame:000000000000757B                 db 0FFh
.eh_frame:000000000000757C                 db  11h
.eh_frame:000000000000757D                 db    0
.eh_frame:000000000000757E                 db    0
.eh_frame:000000000000757F                 db    0
.eh_frame:0000000000007580                 db    0
.eh_frame:0000000000007581                 db    0
.eh_frame:0000000000007582                 db    0
.eh_frame:0000000000007583                 db    0
.eh_frame:0000000000007584                 db  10h
.eh_frame:0000000000007585                 db    0
.eh_frame:0000000000007586                 db    0
.eh_frame:0000000000007587                 db    0
.eh_frame:0000000000007588                 db  60h ; `
.eh_frame:0000000000007589                 db    6
.eh_frame:000000000000758A                 db    0
.eh_frame:000000000000758B                 db    0
.eh_frame:000000000000758C                 db 0A4h
.eh_frame:000000000000758D                 db 0D2h
.eh_frame:000000000000758E                 db 0FFh
.eh_frame:000000000000758F                 db 0FFh
.eh_frame:0000000000007590                 db  0Ah
.eh_frame:0000000000007591                 db    0
.eh_frame:0000000000007592                 db    0
.eh_frame:0000000000007593                 db    0
.eh_frame:0000000000007594                 db    0
.eh_frame:0000000000007595                 db    0
.eh_frame:0000000000007596                 db    0
.eh_frame:0000000000007597                 db    0
.eh_frame:0000000000007598                 db  18h
.eh_frame:0000000000007599                 db    0
.eh_frame:000000000000759A                 db    0
.eh_frame:000000000000759B                 db    0
.eh_frame:000000000000759C                 db  74h ; t
.eh_frame:000000000000759D                 db    6
.eh_frame:000000000000759E                 db    0
.eh_frame:000000000000759F                 db    0
.eh_frame:00000000000075A0                 db 0A0h
.eh_frame:00000000000075A1                 db 0D2h
.eh_frame:00000000000075A2                 db 0FFh
.eh_frame:00000000000075A3                 db 0FFh
.eh_frame:00000000000075A4                 db  8Eh
.eh_frame:00000000000075A5                 db    0
.eh_frame:00000000000075A6                 db    0
.eh_frame:00000000000075A7                 db    0
.eh_frame:00000000000075A8                 db    0
.eh_frame:00000000000075A9                 db  44h ; D
.eh_frame:00000000000075AA                 db  0Eh
.eh_frame:00000000000075AB                 db  50h ; P
.eh_frame:00000000000075AC                 db    2
.eh_frame:00000000000075AD                 db  7Fh ; 
.eh_frame:00000000000075AE                 db  0Ah
.eh_frame:00000000000075AF                 db  0Eh
.eh_frame:00000000000075B0                 db    8
.eh_frame:00000000000075B1                 db  41h ; A
.eh_frame:00000000000075B2                 db  0Bh
.eh_frame:00000000000075B3                 db    0
.eh_frame:00000000000075B4                 db  18h
.eh_frame:00000000000075B5                 db    0
.eh_frame:00000000000075B6                 db    0
.eh_frame:00000000000075B7                 db    0
.eh_frame:00000000000075B8                 db  90h
.eh_frame:00000000000075B9                 db    6
.eh_frame:00000000000075BA                 db    0
.eh_frame:00000000000075BB                 db    0
.eh_frame:00000000000075BC                 db  14h
.eh_frame:00000000000075BD                 db 0D3h
.eh_frame:00000000000075BE                 db 0FFh
.eh_frame:00000000000075BF                 db 0FFh
.eh_frame:00000000000075C0                 db  91h
.eh_frame:00000000000075C1                 db    0
.eh_frame:00000000000075C2                 db    0
.eh_frame:00000000000075C3                 db    0
.eh_frame:00000000000075C4                 db    0
.eh_frame:00000000000075C5                 db  44h ; D
.eh_frame:00000000000075C6                 db  0Eh
.eh_frame:00000000000075C7                 db  50h ; P
.eh_frame:00000000000075C8                 db    2
.eh_frame:00000000000075C9                 db  82h
.eh_frame:00000000000075CA                 db  0Ah
.eh_frame:00000000000075CB                 db  0Eh
.eh_frame:00000000000075CC                 db    8
.eh_frame:00000000000075CD                 db  41h ; A
.eh_frame:00000000000075CE                 db  0Bh
.eh_frame:00000000000075CF                 db    0
.eh_frame:00000000000075D0                 db  10h
.eh_frame:00000000000075D1                 db    0
.eh_frame:00000000000075D2                 db    0
.eh_frame:00000000000075D3                 db    0
.eh_frame:00000000000075D4                 db 0ACh
.eh_frame:00000000000075D5                 db    6
.eh_frame:00000000000075D6                 db    0
.eh_frame:00000000000075D7                 db    0
.eh_frame:00000000000075D8                 db  98h
.eh_frame:00000000000075D9                 db 0D3h
.eh_frame:00000000000075DA                 db 0FFh
.eh_frame:00000000000075DB                 db 0FFh
.eh_frame:00000000000075DC                 db  0Ch
.eh_frame:00000000000075DD                 db    0
.eh_frame:00000000000075DE                 db    0
.eh_frame:00000000000075DF                 db    0
.eh_frame:00000000000075E0                 db    0
.eh_frame:00000000000075E1                 db    0
.eh_frame:00000000000075E2                 db    0
.eh_frame:00000000000075E3                 db    0
.eh_frame:00000000000075E4                 db  10h
.eh_frame:00000000000075E5                 db    0
.eh_frame:00000000000075E6                 db    0
.eh_frame:00000000000075E7                 db    0
.eh_frame:00000000000075E8                 db 0C0h
.eh_frame:00000000000075E9                 db    6
.eh_frame:00000000000075EA                 db    0
.eh_frame:00000000000075EB                 db    0
.eh_frame:00000000000075EC                 db  94h
.eh_frame:00000000000075ED                 db 0D3h
.eh_frame:00000000000075EE                 db 0FFh
.eh_frame:00000000000075EF                 db 0FFh
.eh_frame:00000000000075F0                 db  17h
.eh_frame:00000000000075F1                 db    0
.eh_frame:00000000000075F2                 db    0
.eh_frame:00000000000075F3                 db    0
.eh_frame:00000000000075F4                 db    0
.eh_frame:00000000000075F5                 db    0
.eh_frame:00000000000075F6                 db    0
.eh_frame:00000000000075F7                 db    0
.eh_frame:00000000000075F8                 db  10h
.eh_frame:00000000000075F9                 db    0
.eh_frame:00000000000075FA                 db    0
.eh_frame:00000000000075FB                 db    0
.eh_frame:00000000000075FC                 db 0D4h
.eh_frame:00000000000075FD                 db    6
.eh_frame:00000000000075FE                 db    0
.eh_frame:00000000000075FF                 db    0
.eh_frame:0000000000007600                 db 0A0h
.eh_frame:0000000000007601                 db 0D3h
.eh_frame:0000000000007602                 db 0FFh
.eh_frame:0000000000007603                 db 0FFh
.eh_frame:0000000000007604                 db  13h
.eh_frame:0000000000007605                 db    0
.eh_frame:0000000000007606                 db    0
.eh_frame:0000000000007607                 db    0
.eh_frame:0000000000007608                 db    0
.eh_frame:0000000000007609                 db    0
.eh_frame:000000000000760A                 db    0
.eh_frame:000000000000760B                 db    0
.eh_frame:000000000000760C                 db  10h
.eh_frame:000000000000760D                 db    0
.eh_frame:000000000000760E                 db    0
.eh_frame:000000000000760F                 db    0
.eh_frame:0000000000007610                 db 0E8h
.eh_frame:0000000000007611                 db    6
.eh_frame:0000000000007612                 db    0
.eh_frame:0000000000007613                 db    0
.eh_frame:0000000000007614                 db 0ACh
.eh_frame:0000000000007615                 db 0D3h
.eh_frame:0000000000007616                 db 0FFh
.eh_frame:0000000000007617                 db 0FFh
.eh_frame:0000000000007618                 db  0Ch
.eh_frame:0000000000007619                 db    0
.eh_frame:000000000000761A                 db    0
.eh_frame:000000000000761B                 db    0
.eh_frame:000000000000761C                 db    0
.eh_frame:000000000000761D                 db    0
.eh_frame:000000000000761E                 db    0
.eh_frame:000000000000761F                 db    0
.eh_frame:0000000000007620                 db  10h
.eh_frame:0000000000007621                 db    0
.eh_frame:0000000000007622                 db    0
.eh_frame:0000000000007623                 db    0
.eh_frame:0000000000007624                 db 0FCh
.eh_frame:0000000000007625                 db    6
.eh_frame:0000000000007626                 db    0
.eh_frame:0000000000007627                 db    0
.eh_frame:0000000000007628                 db 0A8h
.eh_frame:0000000000007629                 db 0D3h
.eh_frame:000000000000762A                 db 0FFh
.eh_frame:000000000000762B                 db 0FFh
.eh_frame:000000000000762C                 db  14h
.eh_frame:000000000000762D                 db    0
.eh_frame:000000000000762E                 db    0
.eh_frame:000000000000762F                 db    0
.eh_frame:0000000000007630                 db    0
.eh_frame:0000000000007631                 db    0
.eh_frame:0000000000007632                 db    0
.eh_frame:0000000000007633                 db    0
.eh_frame:0000000000007634                 db  10h
.eh_frame:0000000000007635                 db    0
.eh_frame:0000000000007636                 db    0
.eh_frame:0000000000007637                 db    0
.eh_frame:0000000000007638                 db  10h
.eh_frame:0000000000007639                 db    7
.eh_frame:000000000000763A                 db    0
.eh_frame:000000000000763B                 db    0
.eh_frame:000000000000763C                 db 0B4h
.eh_frame:000000000000763D                 db 0D3h
.eh_frame:000000000000763E                 db 0FFh
.eh_frame:000000000000763F                 db 0FFh
.eh_frame:0000000000007640                 db  13h
.eh_frame:0000000000007641                 db    0
.eh_frame:0000000000007642                 db    0
.eh_frame:0000000000007643                 db    0
.eh_frame:0000000000007644                 db    0
.eh_frame:0000000000007645                 db    0
.eh_frame:0000000000007646                 db    0
.eh_frame:0000000000007647                 db    0
.eh_frame:0000000000007648                 db  14h
.eh_frame:0000000000007649                 db    0
.eh_frame:000000000000764A                 db    0
.eh_frame:000000000000764B                 db    0
.eh_frame:000000000000764C                 db  24h ; $
.eh_frame:000000000000764D                 db    7
.eh_frame:000000000000764E                 db    0
.eh_frame:000000000000764F                 db    0
.eh_frame:0000000000007650                 db 0C0h
.eh_frame:0000000000007651                 db 0D3h
.eh_frame:0000000000007652                 db 0FFh
.eh_frame:0000000000007653                 db 0FFh
.eh_frame:0000000000007654                 db  18h
.eh_frame:0000000000007655                 db    0
.eh_frame:0000000000007656                 db    0
.eh_frame:0000000000007657                 db    0
.eh_frame:0000000000007658                 db    0
.eh_frame:0000000000007659                 db    0
.eh_frame:000000000000765A                 db    0
.eh_frame:000000000000765B                 db    0
.eh_frame:000000000000765C                 db    0
.eh_frame:000000000000765D                 db    0
.eh_frame:000000000000765E                 db    0
.eh_frame:000000000000765F                 db    0
.eh_frame:0000000000007660                 db  10h
.eh_frame:0000000000007661                 db    1
.eh_frame:0000000000007662                 db    0
.eh_frame:0000000000007663                 db    0
.eh_frame:0000000000007664                 db  3Ch ; <
.eh_frame:0000000000007665                 db    7
.eh_frame:0000000000007666                 db    0
.eh_frame:0000000000007667                 db    0
.eh_frame:0000000000007668                 db 0C8h
.eh_frame:0000000000007669                 db 0D3h
.eh_frame:000000000000766A                 db 0FFh
.eh_frame:000000000000766B                 db 0FFh
.eh_frame:000000000000766C                 db  17h
.eh_frame:000000000000766D                 db    4
.eh_frame:000000000000766E                 db    0
.eh_frame:000000000000766F                 db    0
.eh_frame:0000000000007670                 db    0
.eh_frame:0000000000007671                 db  42h ; B
.eh_frame:0000000000007672                 db  0Eh
.eh_frame:0000000000007673                 db  10h
.eh_frame:0000000000007674                 db  8Fh
.eh_frame:0000000000007675                 db    2
.eh_frame:0000000000007676                 db  42h ; B
.eh_frame:0000000000007677                 db  0Eh
.eh_frame:0000000000007678                 db  18h
.eh_frame:0000000000007679                 db  8Eh
.eh_frame:000000000000767A                 db    3
.eh_frame:000000000000767B                 db  42h ; B
.eh_frame:000000000000767C                 db  0Eh
.eh_frame:000000000000767D                 db  20h
.eh_frame:000000000000767E                 db  8Dh
.eh_frame:000000000000767F                 db    4
.eh_frame:0000000000007680                 db  42h ; B
.eh_frame:0000000000007681                 db  0Eh
.eh_frame:0000000000007682                 db  28h ; (
.eh_frame:0000000000007683                 db  8Ch
.eh_frame:0000000000007684                 db    5
.eh_frame:0000000000007685                 db  44h ; D
.eh_frame:0000000000007686                 db  0Eh
.eh_frame:0000000000007687                 db  30h ; 0
.eh_frame:0000000000007688                 db  86h
.eh_frame:0000000000007689                 db    6
.eh_frame:000000000000768A                 db  41h ; A
.eh_frame:000000000000768B                 db  0Eh
.eh_frame:000000000000768C                 db  38h ; 8
.eh_frame:000000000000768D                 db  83h
.eh_frame:000000000000768E                 db    7
.eh_frame:000000000000768F                 db  4Ah ; J
.eh_frame:0000000000007690                 db  0Eh
.eh_frame:0000000000007691                 db  60h ; `
.eh_frame:0000000000007692                 db    2
.eh_frame:0000000000007693                 db 0DDh
.eh_frame:0000000000007694                 db  0Eh
.eh_frame:0000000000007695                 db  68h ; h
.eh_frame:0000000000007696                 db  57h ; W
.eh_frame:0000000000007697                 db  0Eh
.eh_frame:0000000000007698                 db  70h ; p
.eh_frame:0000000000007699                 db  42h ; B
.eh_frame:000000000000769A                 db  0Eh
.eh_frame:000000000000769B                 db  78h ; x
.eh_frame:000000000000769C                 db  42h ; B
.eh_frame:000000000000769D                 db  0Eh
.eh_frame:000000000000769E                 db  80h
.eh_frame:000000000000769F                 db    1
.eh_frame:00000000000076A0                 db  42h ; B
.eh_frame:00000000000076A1                 db  0Eh
.eh_frame:00000000000076A2                 db  88h
.eh_frame:00000000000076A3                 db    1
.eh_frame:00000000000076A4                 db  42h ; B
.eh_frame:00000000000076A5                 db  0Eh
.eh_frame:00000000000076A6                 db  90h
.eh_frame:00000000000076A7                 db    1
.eh_frame:00000000000076A8                 db  53h ; S
.eh_frame:00000000000076A9                 db  0Eh
.eh_frame:00000000000076AA                 db  60h ; `
.eh_frame:00000000000076AB                 db  44h ; D
.eh_frame:00000000000076AC                 db  0Ah
.eh_frame:00000000000076AD                 db  0Eh
.eh_frame:00000000000076AE                 db  38h ; 8
.eh_frame:00000000000076AF                 db  41h ; A
.eh_frame:00000000000076B0                 db  0Eh
.eh_frame:00000000000076B1                 db  30h ; 0
.eh_frame:00000000000076B2                 db  41h ; A
.eh_frame:00000000000076B3                 db  0Eh
.eh_frame:00000000000076B4                 db  28h ; (
.eh_frame:00000000000076B5                 db  42h ; B
.eh_frame:00000000000076B6                 db  0Eh
.eh_frame:00000000000076B7                 db  20h
.eh_frame:00000000000076B8                 db  42h ; B
.eh_frame:00000000000076B9                 db  0Eh
.eh_frame:00000000000076BA                 db  18h
.eh_frame:00000000000076BB                 db  42h ; B
.eh_frame:00000000000076BC                 db  0Eh
.eh_frame:00000000000076BD                 db  10h
.eh_frame:00000000000076BE                 db  42h ; B
.eh_frame:00000000000076BF                 db  0Eh
.eh_frame:00000000000076C0                 db    8
.eh_frame:00000000000076C1                 db  44h ; D
.eh_frame:00000000000076C2                 db  0Bh
.eh_frame:00000000000076C3                 db    2
.eh_frame:00000000000076C4                 db  78h ; x
.eh_frame:00000000000076C5                 db  0Ah
.eh_frame:00000000000076C6                 db  0Eh
.eh_frame:00000000000076C7                 db  68h ; h
.eh_frame:00000000000076C8                 db  48h ; H
.eh_frame:00000000000076C9                 db  0Bh
.eh_frame:00000000000076CA                 db  5Ah ; Z
.eh_frame:00000000000076CB                 db  0Ah
.eh_frame:00000000000076CC                 db  0Eh
.eh_frame:00000000000076CD                 db  38h ; 8
.eh_frame:00000000000076CE                 db  47h ; G
.eh_frame:00000000000076CF                 db  0Eh
.eh_frame:00000000000076D0                 db  30h ; 0
.eh_frame:00000000000076D1                 db  41h ; A
.eh_frame:00000000000076D2                 db  0Eh
.eh_frame:00000000000076D3                 db  28h ; (
.eh_frame:00000000000076D4                 db  42h ; B
.eh_frame:00000000000076D5                 db  0Eh
.eh_frame:00000000000076D6                 db  20h
.eh_frame:00000000000076D7                 db  42h ; B
.eh_frame:00000000000076D8                 db  0Eh
.eh_frame:00000000000076D9                 db  18h
.eh_frame:00000000000076DA                 db  42h ; B
.eh_frame:00000000000076DB                 db  0Eh
.eh_frame:00000000000076DC                 db  10h
.eh_frame:00000000000076DD                 db  42h ; B
.eh_frame:00000000000076DE                 db  0Eh
.eh_frame:00000000000076DF                 db    8
.eh_frame:00000000000076E0                 db  56h ; V
.eh_frame:00000000000076E1                 db  0Bh
.eh_frame:00000000000076E2                 db  5Eh ; ^
.eh_frame:00000000000076E3                 db  0Ah
.eh_frame:00000000000076E4                 db  0Eh
.eh_frame:00000000000076E5                 db  38h ; 8
.eh_frame:00000000000076E6                 db  52h ; R
.eh_frame:00000000000076E7                 db  0Eh
.eh_frame:00000000000076E8                 db  30h ; 0
.eh_frame:00000000000076E9                 db  41h ; A
.eh_frame:00000000000076EA                 db  0Eh
.eh_frame:00000000000076EB                 db  28h ; (
.eh_frame:00000000000076EC                 db  42h ; B
.eh_frame:00000000000076ED                 db  0Eh
.eh_frame:00000000000076EE                 db  20h
.eh_frame:00000000000076EF                 db  42h ; B
.eh_frame:00000000000076F0                 db  0Eh
.eh_frame:00000000000076F1                 db  18h
.eh_frame:00000000000076F2                 db  42h ; B
.eh_frame:00000000000076F3                 db  0Eh
.eh_frame:00000000000076F4                 db  10h
.eh_frame:00000000000076F5                 db  42h ; B
.eh_frame:00000000000076F6                 db  0Eh
.eh_frame:00000000000076F7                 db    8
.eh_frame:00000000000076F8                 db  4Fh ; O
.eh_frame:00000000000076F9                 db  0Bh
.eh_frame:00000000000076FA                 db  62h ; b
.eh_frame:00000000000076FB                 db  0Ah
.eh_frame:00000000000076FC                 db  0Eh
.eh_frame:00000000000076FD                 db  38h ; 8
.eh_frame:00000000000076FE                 db  50h ; P
.eh_frame:00000000000076FF                 db  0Eh
.eh_frame:0000000000007700                 db  30h ; 0
.eh_frame:0000000000007701                 db  41h ; A
.eh_frame:0000000000007702                 db  0Eh
.eh_frame:0000000000007703                 db  28h ; (
.eh_frame:0000000000007704                 db  42h ; B
.eh_frame:0000000000007705                 db  0Eh
.eh_frame:0000000000007706                 db  20h
.eh_frame:0000000000007707                 db  42h ; B
.eh_frame:0000000000007708                 db  0Eh
.eh_frame:0000000000007709                 db  18h
.eh_frame:000000000000770A                 db  42h ; B
.eh_frame:000000000000770B                 db  0Eh
.eh_frame:000000000000770C                 db  10h
.eh_frame:000000000000770D                 db  42h ; B
.eh_frame:000000000000770E                 db  0Eh
.eh_frame:000000000000770F                 db    8
.eh_frame:0000000000007710                 db  55h ; U
.eh_frame:0000000000007711                 db  0Bh
.eh_frame:0000000000007712                 db  66h ; f
.eh_frame:0000000000007713                 db  0Eh
.eh_frame:0000000000007714                 db  68h ; h
.eh_frame:0000000000007715                 db  42h ; B
.eh_frame:0000000000007716                 db  0Eh
.eh_frame:0000000000007717                 db  70h ; p
.eh_frame:0000000000007718                 db  5Ch ; \
.eh_frame:0000000000007719                 db  0Eh
.eh_frame:000000000000771A                 db  68h ; h
.eh_frame:000000000000771B                 db  41h ; A
.eh_frame:000000000000771C                 db  0Eh
.eh_frame:000000000000771D                 db  60h ; `
.eh_frame:000000000000771E                 db  44h ; D
.eh_frame:000000000000771F                 db  0Ah
.eh_frame:0000000000007720                 db  0Eh
.eh_frame:0000000000007721                 db  38h ; 8
.eh_frame:0000000000007722                 db  41h ; A
.eh_frame:0000000000007723                 db  0Eh
.eh_frame:0000000000007724                 db  30h ; 0
.eh_frame:0000000000007725                 db  41h ; A
.eh_frame:0000000000007726                 db  0Eh
.eh_frame:0000000000007727                 db  28h ; (
.eh_frame:0000000000007728                 db  42h ; B
.eh_frame:0000000000007729                 db  0Eh
.eh_frame:000000000000772A                 db  20h
.eh_frame:000000000000772B                 db  42h ; B
.eh_frame:000000000000772C                 db  0Eh
.eh_frame:000000000000772D                 db  18h
.eh_frame:000000000000772E                 db  42h ; B
.eh_frame:000000000000772F                 db  0Eh
.eh_frame:0000000000007730                 db  10h
.eh_frame:0000000000007731                 db  42h ; B
.eh_frame:0000000000007732                 db  0Eh
.eh_frame:0000000000007733                 db    8
.eh_frame:0000000000007734                 db  45h ; E
.eh_frame:0000000000007735                 db  0Bh
.eh_frame:0000000000007736                 db  68h ; h
.eh_frame:0000000000007737                 db  0Ah
.eh_frame:0000000000007738                 db  0Eh
.eh_frame:0000000000007739                 db  68h ; h
.eh_frame:000000000000773A                 db  48h ; H
.eh_frame:000000000000773B                 db  0Bh
.eh_frame:000000000000773C                 db  72h ; r
.eh_frame:000000000000773D                 db  0Eh
.eh_frame:000000000000773E                 db  68h ; h
.eh_frame:000000000000773F                 db  45h ; E
.eh_frame:0000000000007740                 db  0Eh
.eh_frame:0000000000007741                 db  70h ; p
.eh_frame:0000000000007742                 db  42h ; B
.eh_frame:0000000000007743                 db  0Eh
.eh_frame:0000000000007744                 db  78h ; x
.eh_frame:0000000000007745                 db  42h ; B
.eh_frame:0000000000007746                 db  0Eh
.eh_frame:0000000000007747                 db  80h
.eh_frame:0000000000007748                 db    1
.eh_frame:0000000000007749                 db  5Eh ; ^
.eh_frame:000000000000774A                 db  0Eh
.eh_frame:000000000000774B                 db  60h ; `
.eh_frame:000000000000774C                 db  44h ; D
.eh_frame:000000000000774D                 db  0Ah
.eh_frame:000000000000774E                 db  0Eh
.eh_frame:000000000000774F                 db  38h ; 8
.eh_frame:0000000000007750                 db  41h ; A
.eh_frame:0000000000007751                 db  0Eh
.eh_frame:0000000000007752                 db  30h ; 0
.eh_frame:0000000000007753                 db  41h ; A
.eh_frame:0000000000007754                 db  0Eh
.eh_frame:0000000000007755                 db  28h ; (
.eh_frame:0000000000007756                 db  42h ; B
.eh_frame:0000000000007757                 db  0Eh
.eh_frame:0000000000007758                 db  20h
.eh_frame:0000000000007759                 db  42h ; B
.eh_frame:000000000000775A                 db  0Eh
.eh_frame:000000000000775B                 db  18h
.eh_frame:000000000000775C                 db  42h ; B
.eh_frame:000000000000775D                 db  0Eh
.eh_frame:000000000000775E                 db  10h
.eh_frame:000000000000775F                 db  42h ; B
.eh_frame:0000000000007760                 db  0Eh
.eh_frame:0000000000007761                 db    8
.eh_frame:0000000000007762                 db  41h ; A
.eh_frame:0000000000007763                 db  0Bh
.eh_frame:0000000000007764                 db  79h ; y
.eh_frame:0000000000007765                 db  0Ah
.eh_frame:0000000000007766                 db  0Eh
.eh_frame:0000000000007767                 db  68h ; h
.eh_frame:0000000000007768                 db  42h ; B
.eh_frame:0000000000007769                 db  0Eh
.eh_frame:000000000000776A                 db  70h ; p
.eh_frame:000000000000776B                 db  42h ; B
.eh_frame:000000000000776C                 db  0Eh
.eh_frame:000000000000776D                 db  78h ; x
.eh_frame:000000000000776E                 db  42h ; B
.eh_frame:000000000000776F                 db  0Eh
.eh_frame:0000000000007770                 db  80h
.eh_frame:0000000000007771                 db    1
.eh_frame:0000000000007772                 db  51h ; Q
.eh_frame:0000000000007773                 db  0Bh
.eh_frame:0000000000007774                 db  10h
.eh_frame:0000000000007775                 db    0
.eh_frame:0000000000007776                 db    0
.eh_frame:0000000000007777                 db    0
.eh_frame:0000000000007778                 db  50h ; P
.eh_frame:0000000000007779                 db    8
.eh_frame:000000000000777A                 db    0
.eh_frame:000000000000777B                 db    0
.eh_frame:000000000000777C                 db 0D4h
.eh_frame:000000000000777D                 db 0D6h
.eh_frame:000000000000777E                 db 0FFh
.eh_frame:000000000000777F                 db 0FFh
.eh_frame:0000000000007780                 db  20h
.eh_frame:0000000000007781                 db    0
.eh_frame:0000000000007782                 db    0
.eh_frame:0000000000007783                 db    0
.eh_frame:0000000000007784                 db    0
.eh_frame:0000000000007785                 db    0
.eh_frame:0000000000007786                 db    0
.eh_frame:0000000000007787                 db    0
.eh_frame:0000000000007788                 db  18h
.eh_frame:0000000000007789                 db    0
.eh_frame:000000000000778A                 db    0
.eh_frame:000000000000778B                 db    0
.eh_frame:000000000000778C                 db  64h ; d
.eh_frame:000000000000778D                 db    8
.eh_frame:000000000000778E                 db    0
.eh_frame:000000000000778F                 db    0
.eh_frame:0000000000007790                 db 0E0h
.eh_frame:0000000000007791                 db 0D6h
.eh_frame:0000000000007792                 db 0FFh
.eh_frame:0000000000007793                 db 0FFh
.eh_frame:0000000000007794                 db  78h ; x
.eh_frame:0000000000007795                 db    0
.eh_frame:0000000000007796                 db    0
.eh_frame:0000000000007797                 db    0
.eh_frame:0000000000007798                 db    0
.eh_frame:0000000000007799                 db  44h ; D
.eh_frame:000000000000779A                 db  0Eh
.eh_frame:000000000000779B                 db  70h ; p
.eh_frame:000000000000779C                 db    2
.eh_frame:000000000000779D                 db  60h ; `
.eh_frame:000000000000779E                 db  0Ah
.eh_frame:000000000000779F                 db  0Eh
.eh_frame:00000000000077A0                 db    8
.eh_frame:00000000000077A1                 db  41h ; A
.eh_frame:00000000000077A2                 db  0Bh
.eh_frame:00000000000077A3                 db    0
.eh_frame:00000000000077A4                 db  28h ; (
.eh_frame:00000000000077A5                 db    0
.eh_frame:00000000000077A6                 db    0
.eh_frame:00000000000077A7                 db    0
.eh_frame:00000000000077A8                 db  80h
.eh_frame:00000000000077A9                 db    8
.eh_frame:00000000000077AA                 db    0
.eh_frame:00000000000077AB                 db    0
.eh_frame:00000000000077AC                 db  44h ; D
.eh_frame:00000000000077AD                 db 0D7h
.eh_frame:00000000000077AE                 db 0FFh
.eh_frame:00000000000077AF                 db 0FFh
.eh_frame:00000000000077B0                 db 0D5h
.eh_frame:00000000000077B1                 db    0
.eh_frame:00000000000077B2                 db    0
.eh_frame:00000000000077B3                 db    0
.eh_frame:00000000000077B4                 db    0
.eh_frame:00000000000077B5                 db  41h ; A
.eh_frame:00000000000077B6                 db  0Eh
.eh_frame:00000000000077B7                 db  10h
.eh_frame:00000000000077B8                 db  86h
.eh_frame:00000000000077B9                 db    2
.eh_frame:00000000000077BA                 db  41h ; A
.eh_frame:00000000000077BB                 db  0Eh
.eh_frame:00000000000077BC                 db  18h
.eh_frame:00000000000077BD                 db  83h
.eh_frame:00000000000077BE                 db    3
.eh_frame:00000000000077BF                 db  50h ; P
.eh_frame:00000000000077C0                 db  0Eh
.eh_frame:00000000000077C1                 db 0D0h
.eh_frame:00000000000077C2                 db    1
.eh_frame:00000000000077C3                 db    2
.eh_frame:00000000000077C4                 db 0ABh
.eh_frame:00000000000077C5                 db  0Ah
.eh_frame:00000000000077C6                 db  0Eh
.eh_frame:00000000000077C7                 db  18h
.eh_frame:00000000000077C8                 db  41h ; A
.eh_frame:00000000000077C9                 db  0Eh
.eh_frame:00000000000077CA                 db  10h
.eh_frame:00000000000077CB                 db  41h ; A
.eh_frame:00000000000077CC                 db  0Eh
.eh_frame:00000000000077CD                 db    8
.eh_frame:00000000000077CE                 db  41h ; A
.eh_frame:00000000000077CF                 db  0Bh
.eh_frame:00000000000077D0                 db  1Ch
.eh_frame:00000000000077D1                 db    0
.eh_frame:00000000000077D2                 db    0
.eh_frame:00000000000077D3                 db    0
.eh_frame:00000000000077D4                 db 0ACh
.eh_frame:00000000000077D5                 db    8
.eh_frame:00000000000077D6                 db    0
.eh_frame:00000000000077D7                 db    0
.eh_frame:00000000000077D8                 db 0F8h
.eh_frame:00000000000077D9                 db 0D7h
.eh_frame:00000000000077DA                 db 0FFh
.eh_frame:00000000000077DB                 db 0FFh
.eh_frame:00000000000077DC                 db  80h
.eh_frame:00000000000077DD                 db    0
.eh_frame:00000000000077DE                 db    0
.eh_frame:00000000000077DF                 db    0
.eh_frame:00000000000077E0                 db    0
.eh_frame:00000000000077E1                 db  41h ; A
.eh_frame:00000000000077E2                 db  0Eh
.eh_frame:00000000000077E3                 db  10h
.eh_frame:00000000000077E4                 db  83h
.eh_frame:00000000000077E5                 db    2
.eh_frame:00000000000077E6                 db    2
.eh_frame:00000000000077E7                 db  7Ah ; z
.eh_frame:00000000000077E8                 db  0Eh
.eh_frame:00000000000077E9                 db    8
.eh_frame:00000000000077EA                 db    0
.eh_frame:00000000000077EB                 db    0
.eh_frame:00000000000077EC                 db    0
.eh_frame:00000000000077ED                 db    0
.eh_frame:00000000000077EE                 db    0
.eh_frame:00000000000077EF                 db    0
.eh_frame:00000000000077F0                 db  18h
.eh_frame:00000000000077F1                 db    0
.eh_frame:00000000000077F2                 db    0
.eh_frame:00000000000077F3                 db    0
.eh_frame:00000000000077F4                 db 0CCh
.eh_frame:00000000000077F5                 db    8
.eh_frame:00000000000077F6                 db    0
.eh_frame:00000000000077F7                 db    0
.eh_frame:00000000000077F8                 db  58h ; X
.eh_frame:00000000000077F9                 db 0D8h
.eh_frame:00000000000077FA                 db 0FFh
.eh_frame:00000000000077FB                 db 0FFh
.eh_frame:00000000000077FC                 db  1Ah
.eh_frame:00000000000077FD                 db    0
.eh_frame:00000000000077FE                 db    0
.eh_frame:00000000000077FF                 db    0
.eh_frame:0000000000007800                 db    0
.eh_frame:0000000000007801                 db  41h ; A
.eh_frame:0000000000007802                 db  0Eh
.eh_frame:0000000000007803                 db  10h
.eh_frame:0000000000007804                 db  83h
.eh_frame:0000000000007805                 db    2
.eh_frame:0000000000007806                 db  53h ; S
.eh_frame:0000000000007807                 db  0Ah
.eh_frame:0000000000007808                 db  0Eh
.eh_frame:0000000000007809                 db    8
.eh_frame:000000000000780A                 db  41h ; A
.eh_frame:000000000000780B                 db  0Bh
.eh_frame:000000000000780C                 db  10h
.eh_frame:000000000000780D                 db    0
.eh_frame:000000000000780E                 db    0
.eh_frame:000000000000780F                 db    0
.eh_frame:0000000000007810                 db 0E8h
.eh_frame:0000000000007811                 db    8
.eh_frame:0000000000007812                 db    0
.eh_frame:0000000000007813                 db    0
.eh_frame:0000000000007814                 db  5Ch ; \
.eh_frame:0000000000007815                 db 0D8h
.eh_frame:0000000000007816                 db 0FFh
.eh_frame:0000000000007817                 db 0FFh
.eh_frame:0000000000007818                 db  24h ; $
.eh_frame:0000000000007819                 db    0
.eh_frame:000000000000781A                 db    0
.eh_frame:000000000000781B                 db    0
.eh_frame:000000000000781C                 db    0
.eh_frame:000000000000781D                 db  5Fh ; _
.eh_frame:000000000000781E                 db  0Eh
.eh_frame:000000000000781F                 db  10h
.eh_frame:0000000000007820                 db  10h
.eh_frame:0000000000007821                 db    0
.eh_frame:0000000000007822                 db    0
.eh_frame:0000000000007823                 db    0
.eh_frame:0000000000007824                 db 0FCh
.eh_frame:0000000000007825                 db    8
.eh_frame:0000000000007826                 db    0
.eh_frame:0000000000007827                 db    0
.eh_frame:0000000000007828                 db  78h ; x
.eh_frame:0000000000007829                 db 0D8h
.eh_frame:000000000000782A                 db 0FFh
.eh_frame:000000000000782B                 db 0FFh
.eh_frame:000000000000782C                 db    2
.eh_frame:000000000000782D                 db    0
.eh_frame:000000000000782E                 db    0
.eh_frame:000000000000782F                 db    0
.eh_frame:0000000000007830                 db    0
.eh_frame:0000000000007831                 db    0
.eh_frame:0000000000007832                 db    0
.eh_frame:0000000000007833                 db    0
.eh_frame:0000000000007834                 db  20h
.eh_frame:0000000000007835                 db    0
.eh_frame:0000000000007836                 db    0
.eh_frame:0000000000007837                 db    0
.eh_frame:0000000000007838                 db  10h
.eh_frame:0000000000007839                 db    9
.eh_frame:000000000000783A                 db    0
.eh_frame:000000000000783B                 db    0
.eh_frame:000000000000783C                 db  74h ; t
.eh_frame:000000000000783D                 db 0D8h
.eh_frame:000000000000783E                 db 0FFh
.eh_frame:000000000000783F                 db 0FFh
.eh_frame:0000000000007840                 db  36h ; 6
.eh_frame:0000000000007841                 db    0
.eh_frame:0000000000007842                 db    0
.eh_frame:0000000000007843                 db    0
.eh_frame:0000000000007844                 db    0
.eh_frame:0000000000007845                 db  44h ; D
.eh_frame:0000000000007846                 db  0Eh
.eh_frame:0000000000007847                 db  10h
.eh_frame:0000000000007848                 db  83h
.eh_frame:0000000000007849                 db    2
.eh_frame:000000000000784A                 db  5Dh ; ]
.eh_frame:000000000000784B                 db  0Ah
.eh_frame:000000000000784C                 db  0Eh
.eh_frame:000000000000784D                 db    8
.eh_frame:000000000000784E                 db  47h ; G
.eh_frame:000000000000784F                 db  0Bh
.eh_frame:0000000000007850                 db  48h ; H
.eh_frame:0000000000007851                 db  0Ah
.eh_frame:0000000000007852                 db  0Eh
.eh_frame:0000000000007853                 db    8
.eh_frame:0000000000007854                 db  41h ; A
.eh_frame:0000000000007855                 db  0Bh
.eh_frame:0000000000007856                 db    0
.eh_frame:0000000000007857                 db    0
.eh_frame:0000000000007858                 db  10h
.eh_frame:0000000000007859                 db    0
.eh_frame:000000000000785A                 db    0
.eh_frame:000000000000785B                 db    0
.eh_frame:000000000000785C                 db  34h ; 4
.eh_frame:000000000000785D                 db    9
.eh_frame:000000000000785E                 db    0
.eh_frame:000000000000785F                 db    0
.eh_frame:0000000000007860                 db  90h
.eh_frame:0000000000007861                 db 0D8h
.eh_frame:0000000000007862                 db 0FFh
.eh_frame:0000000000007863                 db 0FFh
.eh_frame:0000000000007864                 db  24h ; $
.eh_frame:0000000000007865                 db    0
.eh_frame:0000000000007866                 db    0
.eh_frame:0000000000007867                 db    0
.eh_frame:0000000000007868                 db    0
.eh_frame:0000000000007869                 db  5Fh ; _
.eh_frame:000000000000786A                 db  0Eh
.eh_frame:000000000000786B                 db  10h
.eh_frame:000000000000786C                 db  14h
.eh_frame:000000000000786D                 db    0
.eh_frame:000000000000786E                 db    0
.eh_frame:000000000000786F                 db    0
.eh_frame:0000000000007870                 db  48h ; H
.eh_frame:0000000000007871                 db    9
.eh_frame:0000000000007872                 db    0
.eh_frame:0000000000007873                 db    0
.eh_frame:0000000000007874                 db 0ACh
.eh_frame:0000000000007875                 db 0D8h
.eh_frame:0000000000007876                 db 0FFh
.eh_frame:0000000000007877                 db 0FFh
.eh_frame:0000000000007878                 db  82h
.eh_frame:0000000000007879                 db    0
.eh_frame:000000000000787A                 db    0
.eh_frame:000000000000787B                 db    0
.eh_frame:000000000000787C                 db    0
.eh_frame:000000000000787D                 db    2
.eh_frame:000000000000787E                 db  5Fh ; _
.eh_frame:000000000000787F                 db  0Eh
.eh_frame:0000000000007880                 db  10h
.eh_frame:0000000000007881                 db  49h ; I
.eh_frame:0000000000007882                 db  0Eh
.eh_frame:0000000000007883                 db    8
.eh_frame:0000000000007884                 db  14h
.eh_frame:0000000000007885                 db    0
.eh_frame:0000000000007886                 db    0
.eh_frame:0000000000007887                 db    0
.eh_frame:0000000000007888                 db  60h ; `
.eh_frame:0000000000007889                 db    9
.eh_frame:000000000000788A                 db    0
.eh_frame:000000000000788B                 db    0
.eh_frame:000000000000788C                 db  24h ; $
.eh_frame:000000000000788D                 db 0D9h
.eh_frame:000000000000788E                 db 0FFh
.eh_frame:000000000000788F                 db 0FFh
.eh_frame:0000000000007890                 db  4Ah ; J
.eh_frame:0000000000007891                 db    0
.eh_frame:0000000000007892                 db    0
.eh_frame:0000000000007893                 db    0
.eh_frame:0000000000007894                 db    0
.eh_frame:0000000000007895                 db    2
.eh_frame:0000000000007896                 db  45h ; E
.eh_frame:0000000000007897                 db  0Eh
.eh_frame:0000000000007898                 db  10h
.eh_frame:0000000000007899                 db    0
.eh_frame:000000000000789A                 db    0
.eh_frame:000000000000789B                 db    0
.eh_frame:000000000000789C                 db  18h
.eh_frame:000000000000789D                 db    0
.eh_frame:000000000000789E                 db    0
.eh_frame:000000000000789F                 db    0
.eh_frame:00000000000078A0                 db  78h ; x
.eh_frame:00000000000078A1                 db    9
.eh_frame:00000000000078A2                 db    0
.eh_frame:00000000000078A3                 db    0
.eh_frame:00000000000078A4                 db  5Ch ; \
.eh_frame:00000000000078A5                 db 0D9h
.eh_frame:00000000000078A6                 db 0FFh
.eh_frame:00000000000078A7                 db 0FFh
.eh_frame:00000000000078A8                 db  17h
.eh_frame:00000000000078A9                 db    0
.eh_frame:00000000000078AA                 db    0
.eh_frame:00000000000078AB                 db    0
.eh_frame:00000000000078AC                 db    0
.eh_frame:00000000000078AD                 db  41h ; A
.eh_frame:00000000000078AE                 db  0Eh
.eh_frame:00000000000078AF                 db  10h
.eh_frame:00000000000078B0                 db  83h
.eh_frame:00000000000078B1                 db    2
.eh_frame:00000000000078B2                 db  51h ; Q
.eh_frame:00000000000078B3                 db  0Eh
.eh_frame:00000000000078B4                 db    8
.eh_frame:00000000000078B5                 db    0
.eh_frame:00000000000078B6                 db    0
.eh_frame:00000000000078B7                 db    0
.eh_frame:00000000000078B8                 db  18h
.eh_frame:00000000000078B9                 db    0
.eh_frame:00000000000078BA                 db    0
.eh_frame:00000000000078BB                 db    0
.eh_frame:00000000000078BC                 db  94h
.eh_frame:00000000000078BD                 db    9
.eh_frame:00000000000078BE                 db    0
.eh_frame:00000000000078BF                 db    0
.eh_frame:00000000000078C0                 db  60h ; `
.eh_frame:00000000000078C1                 db 0D9h
.eh_frame:00000000000078C2                 db 0FFh
.eh_frame:00000000000078C3                 db 0FFh
.eh_frame:00000000000078C4                 db  2Eh ; .
.eh_frame:00000000000078C5                 db    0
.eh_frame:00000000000078C6                 db    0
.eh_frame:00000000000078C7                 db    0
.eh_frame:00000000000078C8                 db    0
.eh_frame:00000000000078C9                 db  47h ; G
.eh_frame:00000000000078CA                 db  0Eh
.eh_frame:00000000000078CB                 db  10h
.eh_frame:00000000000078CC                 db  61h ; a
.eh_frame:00000000000078CD                 db  0Ah
.eh_frame:00000000000078CE                 db  0Eh
.eh_frame:00000000000078CF                 db    8
.eh_frame:00000000000078D0                 db  41h ; A
.eh_frame:00000000000078D1                 db  0Bh
.eh_frame:00000000000078D2                 db    0
.eh_frame:00000000000078D3                 db    0
.eh_frame:00000000000078D4                 db  24h ; $
.eh_frame:00000000000078D5                 db    0
.eh_frame:00000000000078D6                 db    0
.eh_frame:00000000000078D7                 db    0
.eh_frame:00000000000078D8                 db 0B0h
.eh_frame:00000000000078D9                 db    9
.eh_frame:00000000000078DA                 db    0
.eh_frame:00000000000078DB                 db    0
.eh_frame:00000000000078DC                 db  74h ; t
.eh_frame:00000000000078DD                 db 0D9h
.eh_frame:00000000000078DE                 db 0FFh
.eh_frame:00000000000078DF                 db 0FFh
.eh_frame:00000000000078E0                 db  28h ; (
.eh_frame:00000000000078E1                 db    0
.eh_frame:00000000000078E2                 db    0
.eh_frame:00000000000078E3                 db    0
.eh_frame:00000000000078E4                 db    0
.eh_frame:00000000000078E5                 db  41h ; A
.eh_frame:00000000000078E6                 db  0Eh
.eh_frame:00000000000078E7                 db  10h
.eh_frame:00000000000078E8                 db  86h
.eh_frame:00000000000078E9                 db    2
.eh_frame:00000000000078EA                 db  41h ; A
.eh_frame:00000000000078EB                 db  0Eh
.eh_frame:00000000000078EC                 db  18h
.eh_frame:00000000000078ED                 db  83h
.eh_frame:00000000000078EE                 db    3
.eh_frame:00000000000078EF                 db  4Dh ; M
.eh_frame:00000000000078F0                 db  0Eh
.eh_frame:00000000000078F1                 db  20h
.eh_frame:00000000000078F2                 db  49h ; I
.eh_frame:00000000000078F3                 db  0Eh
.eh_frame:00000000000078F4                 db  18h
.eh_frame:00000000000078F5                 db  47h ; G
.eh_frame:00000000000078F6                 db  0Eh
.eh_frame:00000000000078F7                 db  10h
.eh_frame:00000000000078F8                 db  41h ; A
.eh_frame:00000000000078F9                 db  0Eh
.eh_frame:00000000000078FA                 db    8
.eh_frame:00000000000078FB                 db    0
.eh_frame:00000000000078FC                 db  18h
.eh_frame:00000000000078FD                 db    0
.eh_frame:00000000000078FE                 db    0
.eh_frame:00000000000078FF                 db    0
.eh_frame:0000000000007900                 db 0D8h
.eh_frame:0000000000007901                 db    9
.eh_frame:0000000000007902                 db    0
.eh_frame:0000000000007903                 db    0
.eh_frame:0000000000007904                 db  7Ch ; |
.eh_frame:0000000000007905                 db 0D9h
.eh_frame:0000000000007906                 db 0FFh
.eh_frame:0000000000007907                 db 0FFh
.eh_frame:0000000000007908                 db  13h
.eh_frame:0000000000007909                 db    0
.eh_frame:000000000000790A                 db    0
.eh_frame:000000000000790B                 db    0
.eh_frame:000000000000790C                 db    0
.eh_frame:000000000000790D                 db  41h ; A
.eh_frame:000000000000790E                 db  0Eh
.eh_frame:000000000000790F                 db  10h
.eh_frame:0000000000007910                 db  83h
.eh_frame:0000000000007911                 db    2
.eh_frame:0000000000007912                 db  50h ; P
.eh_frame:0000000000007913                 db  0Eh
.eh_frame:0000000000007914                 db    8
.eh_frame:0000000000007915                 db    0
.eh_frame:0000000000007916                 db    0
.eh_frame:0000000000007917                 db    0
.eh_frame:0000000000007918                 db  14h
.eh_frame:0000000000007919                 db    0
.eh_frame:000000000000791A                 db    0
.eh_frame:000000000000791B                 db    0
.eh_frame:000000000000791C                 db 0F4h
.eh_frame:000000000000791D                 db    9
.eh_frame:000000000000791E                 db    0
.eh_frame:000000000000791F                 db    0
.eh_frame:0000000000007920                 db  80h
.eh_frame:0000000000007921                 db 0D9h
.eh_frame:0000000000007922                 db 0FFh
.eh_frame:0000000000007923                 db 0FFh
.eh_frame:0000000000007924                 db  35h ; 5
.eh_frame:0000000000007925                 db    0
.eh_frame:0000000000007926                 db    0
.eh_frame:0000000000007927                 db    0
.eh_frame:0000000000007928                 db    0
.eh_frame:0000000000007929                 db  4Bh ; K
.eh_frame:000000000000792A                 db  0Eh
.eh_frame:000000000000792B                 db  10h
.eh_frame:000000000000792C                 db    0
.eh_frame:000000000000792D                 db    0
.eh_frame:000000000000792E                 db    0
.eh_frame:000000000000792F                 db    0
.eh_frame:0000000000007930                 db  48h ; H
.eh_frame:0000000000007931                 db    0
.eh_frame:0000000000007932                 db    0
.eh_frame:0000000000007933                 db    0
.eh_frame:0000000000007934                 db  0Ch
.eh_frame:0000000000007935                 db  0Ah
.eh_frame:0000000000007936                 db    0
.eh_frame:0000000000007937                 db    0
.eh_frame:0000000000007938                 db 0A8h
.eh_frame:0000000000007939                 db 0D9h
.eh_frame:000000000000793A                 db 0FFh
.eh_frame:000000000000793B                 db 0FFh
.eh_frame:000000000000793C                 db    0
.eh_frame:000000000000793D                 db    1
.eh_frame:000000000000793E                 db    0
.eh_frame:000000000000793F                 db    0
.eh_frame:0000000000007940                 db    0
.eh_frame:0000000000007941                 db  42h ; B
.eh_frame:0000000000007942                 db  0Eh
.eh_frame:0000000000007943                 db  10h
.eh_frame:0000000000007944                 db  8Fh
.eh_frame:0000000000007945                 db    2
.eh_frame:0000000000007946                 db  42h ; B
.eh_frame:0000000000007947                 db  0Eh
.eh_frame:0000000000007948                 db  18h
.eh_frame:0000000000007949                 db  8Eh
.eh_frame:000000000000794A                 db    3
.eh_frame:000000000000794B                 db  45h ; E
.eh_frame:000000000000794C                 db  0Eh
.eh_frame:000000000000794D                 db  20h
.eh_frame:000000000000794E                 db  8Dh
.eh_frame:000000000000794F                 db    4
.eh_frame:0000000000007950                 db  42h ; B
.eh_frame:0000000000007951                 db  0Eh
.eh_frame:0000000000007952                 db  28h ; (
.eh_frame:0000000000007953                 db  8Ch
.eh_frame:0000000000007954                 db    5
.eh_frame:0000000000007955                 db  44h ; D
.eh_frame:0000000000007956                 db  0Eh
.eh_frame:0000000000007957                 db  30h ; 0
.eh_frame:0000000000007958                 db  86h
.eh_frame:0000000000007959                 db    6
.eh_frame:000000000000795A                 db  41h ; A
.eh_frame:000000000000795B                 db  0Eh
.eh_frame:000000000000795C                 db  38h ; 8
.eh_frame:000000000000795D                 db  83h
.eh_frame:000000000000795E                 db    7
.eh_frame:000000000000795F                 db  4Eh ; N
.eh_frame:0000000000007960                 db  0Eh
.eh_frame:0000000000007961                 db  50h ; P
.eh_frame:0000000000007962                 db    2
.eh_frame:0000000000007963                 db  9Dh
.eh_frame:0000000000007964                 db  0Ah
.eh_frame:0000000000007965                 db  0Eh
.eh_frame:0000000000007966                 db  38h ; 8
.eh_frame:0000000000007967                 db  41h ; A
.eh_frame:0000000000007968                 db  0Eh
.eh_frame:0000000000007969                 db  30h ; 0
.eh_frame:000000000000796A                 db  41h ; A
.eh_frame:000000000000796B                 db  0Eh
.eh_frame:000000000000796C                 db  28h ; (
.eh_frame:000000000000796D                 db  42h ; B
.eh_frame:000000000000796E                 db  0Eh
.eh_frame:000000000000796F                 db  20h
.eh_frame:0000000000007970                 db  42h ; B
.eh_frame:0000000000007971                 db  0Eh
.eh_frame:0000000000007972                 db  18h
.eh_frame:0000000000007973                 db  42h ; B
.eh_frame:0000000000007974                 db  0Eh
.eh_frame:0000000000007975                 db  10h
.eh_frame:0000000000007976                 db  42h ; B
.eh_frame:0000000000007977                 db  0Eh
.eh_frame:0000000000007978                 db    8
.eh_frame:0000000000007979                 db  4Bh ; K
.eh_frame:000000000000797A                 db  0Bh
.eh_frame:000000000000797B                 db    0
.eh_frame:000000000000797C                 db  18h
.eh_frame:000000000000797D                 db    0
.eh_frame:000000000000797E                 db    0
.eh_frame:000000000000797F                 db    0
.eh_frame:0000000000007980                 db  58h ; X
.eh_frame:0000000000007981                 db  0Ah
.eh_frame:0000000000007982                 db    0
.eh_frame:0000000000007983                 db    0
.eh_frame:0000000000007984                 db  5Ch ; \
.eh_frame:0000000000007985                 db 0DAh
.eh_frame:0000000000007986                 db 0FFh
.eh_frame:0000000000007987                 db 0FFh
.eh_frame:0000000000007988                 db  21h ; !
.eh_frame:0000000000007989                 db    0
.eh_frame:000000000000798A                 db    0
.eh_frame:000000000000798B                 db    0
.eh_frame:000000000000798C                 db    0
.eh_frame:000000000000798D                 db  44h ; D
.eh_frame:000000000000798E                 db  0Eh
.eh_frame:000000000000798F                 db  18h
.eh_frame:0000000000007990                 db  42h ; B
.eh_frame:0000000000007991                 db  0Eh
.eh_frame:0000000000007992                 db  20h
.eh_frame:0000000000007993                 db  5Ah ; Z
.eh_frame:0000000000007994                 db  0Eh
.eh_frame:0000000000007995                 db    8
.eh_frame:0000000000007996                 db    0
.eh_frame:0000000000007997                 db    0
.eh_frame:0000000000007998                 db  4Ch ; L
.eh_frame:0000000000007999                 db    0
.eh_frame:000000000000799A                 db    0
.eh_frame:000000000000799B                 db    0
.eh_frame:000000000000799C                 db  74h ; t
.eh_frame:000000000000799D                 db  0Ah
.eh_frame:000000000000799E                 db    0
.eh_frame:000000000000799F                 db    0
.eh_frame:00000000000079A0                 db  70h ; p
.eh_frame:00000000000079A1                 db 0DAh
.eh_frame:00000000000079A2                 db 0FFh
.eh_frame:00000000000079A3                 db 0FFh
.eh_frame:00000000000079A4                 db  1Ch
.eh_frame:00000000000079A5                 db    4
.eh_frame:00000000000079A6                 db    0
.eh_frame:00000000000079A7                 db    0
.eh_frame:00000000000079A8                 db    0
.eh_frame:00000000000079A9                 db  42h ; B
.eh_frame:00000000000079AA                 db  0Eh
.eh_frame:00000000000079AB                 db  10h
.eh_frame:00000000000079AC                 db  8Fh
.eh_frame:00000000000079AD                 db    2
.eh_frame:00000000000079AE                 db  42h ; B
.eh_frame:00000000000079AF                 db  0Eh
.eh_frame:00000000000079B0                 db  18h
.eh_frame:00000000000079B1                 db  8Eh
.eh_frame:00000000000079B2                 db    3
.eh_frame:00000000000079B3                 db  42h ; B
.eh_frame:00000000000079B4                 db  0Eh
.eh_frame:00000000000079B5                 db  20h
.eh_frame:00000000000079B6                 db  8Dh
.eh_frame:00000000000079B7                 db    4
.eh_frame:00000000000079B8                 db  42h ; B
.eh_frame:00000000000079B9                 db  0Eh
.eh_frame:00000000000079BA                 db  28h ; (
.eh_frame:00000000000079BB                 db  8Ch
.eh_frame:00000000000079BC                 db    5
.eh_frame:00000000000079BD                 db  41h ; A
.eh_frame:00000000000079BE                 db  0Eh
.eh_frame:00000000000079BF                 db  30h ; 0
.eh_frame:00000000000079C0                 db  86h
.eh_frame:00000000000079C1                 db    6
.eh_frame:00000000000079C2                 db  41h ; A
.eh_frame:00000000000079C3                 db  0Eh
.eh_frame:00000000000079C4                 db  38h ; 8
.eh_frame:00000000000079C5                 db  83h
.eh_frame:00000000000079C6                 db    7
.eh_frame:00000000000079C7                 db  44h ; D
.eh_frame:00000000000079C8                 db  0Eh
.eh_frame:00000000000079C9                 db  60h ; `
.eh_frame:00000000000079CA                 db    2
.eh_frame:00000000000079CB                 db 0E9h
.eh_frame:00000000000079CC                 db  0Ah
.eh_frame:00000000000079CD                 db  0Eh
.eh_frame:00000000000079CE                 db  38h ; 8
.eh_frame:00000000000079CF                 db  41h ; A
.eh_frame:00000000000079D0                 db  0Eh
.eh_frame:00000000000079D1                 db  30h ; 0
.eh_frame:00000000000079D2                 db  41h ; A
.eh_frame:00000000000079D3                 db  0Eh
.eh_frame:00000000000079D4                 db  28h ; (
.eh_frame:00000000000079D5                 db  42h ; B
.eh_frame:00000000000079D6                 db  0Eh
.eh_frame:00000000000079D7                 db  20h
.eh_frame:00000000000079D8                 db  42h ; B
.eh_frame:00000000000079D9                 db  0Eh
.eh_frame:00000000000079DA                 db  18h
.eh_frame:00000000000079DB                 db  42h ; B
.eh_frame:00000000000079DC                 db  0Eh
.eh_frame:00000000000079DD                 db  10h
.eh_frame:00000000000079DE                 db  42h ; B
.eh_frame:00000000000079DF                 db  0Eh
.eh_frame:00000000000079E0                 db    8
.eh_frame:00000000000079E1                 db  47h ; G
.eh_frame:00000000000079E2                 db  0Bh
.eh_frame:00000000000079E3                 db    0
.eh_frame:00000000000079E4                 db    0
.eh_frame:00000000000079E5                 db    0
.eh_frame:00000000000079E6                 db    0
.eh_frame:00000000000079E7                 db    0
.eh_frame:00000000000079E8                 db  34h ; 4
.eh_frame:00000000000079E9                 db    0
.eh_frame:00000000000079EA                 db    0
.eh_frame:00000000000079EB                 db    0
.eh_frame:00000000000079EC                 db 0C4h
.eh_frame:00000000000079ED                 db  0Ah
.eh_frame:00000000000079EE                 db    0
.eh_frame:00000000000079EF                 db    0
.eh_frame:00000000000079F0                 db  40h ; @
.eh_frame:00000000000079F1                 db 0DEh
.eh_frame:00000000000079F2                 db 0FFh
.eh_frame:00000000000079F3                 db 0FFh
.eh_frame:00000000000079F4                 db  7Bh ; {
.eh_frame:00000000000079F5                 db    0
.eh_frame:00000000000079F6                 db    0
.eh_frame:00000000000079F7                 db    0
.eh_frame:00000000000079F8                 db    0
.eh_frame:00000000000079F9                 db  42h ; B
.eh_frame:00000000000079FA                 db  0Eh
.eh_frame:00000000000079FB                 db  10h
.eh_frame:00000000000079FC                 db  8Ch
.eh_frame:00000000000079FD                 db    2
.eh_frame:00000000000079FE                 db  41h ; A
.eh_frame:00000000000079FF                 db  0Eh
.eh_frame:0000000000007A00                 db  18h
.eh_frame:0000000000007A01                 db  86h
.eh_frame:0000000000007A02                 db    3
.eh_frame:0000000000007A03                 db  41h ; A
.eh_frame:0000000000007A04                 db  0Eh
.eh_frame:0000000000007A05                 db  20h
.eh_frame:0000000000007A06                 db  83h
.eh_frame:0000000000007A07                 db    4
.eh_frame:0000000000007A08                 db  7Dh ; }
.eh_frame:0000000000007A09                 db  0Ah
.eh_frame:0000000000007A0A                 db  0Eh
.eh_frame:0000000000007A0B                 db  18h
.eh_frame:0000000000007A0C                 db  41h ; A
.eh_frame:0000000000007A0D                 db  0Eh
.eh_frame:0000000000007A0E                 db  10h
.eh_frame:0000000000007A0F                 db  42h ; B
.eh_frame:0000000000007A10                 db  0Eh
.eh_frame:0000000000007A11                 db    8
.eh_frame:0000000000007A12                 db  44h ; D
.eh_frame:0000000000007A13                 db  0Bh
.eh_frame:0000000000007A14                 db  60h ; `
.eh_frame:0000000000007A15                 db  0Ah
.eh_frame:0000000000007A16                 db  0Eh
.eh_frame:0000000000007A17                 db  18h
.eh_frame:0000000000007A18                 db  41h ; A
.eh_frame:0000000000007A19                 db  0Eh
.eh_frame:0000000000007A1A                 db  10h
.eh_frame:0000000000007A1B                 db  42h ; B
.eh_frame:0000000000007A1C                 db  0Eh
.eh_frame:0000000000007A1D                 db    8
.eh_frame:0000000000007A1E                 db  45h ; E
.eh_frame:0000000000007A1F                 db  0Bh
.eh_frame:0000000000007A20                 db  1Ch
.eh_frame:0000000000007A21                 db    0
.eh_frame:0000000000007A22                 db    0
.eh_frame:0000000000007A23                 db    0
.eh_frame:0000000000007A24                 db 0FCh
.eh_frame:0000000000007A25                 db  0Ah
.eh_frame:0000000000007A26                 db    0
.eh_frame:0000000000007A27                 db    0
.eh_frame:0000000000007A28                 db  88h
.eh_frame:0000000000007A29                 db 0DEh
.eh_frame:0000000000007A2A                 db 0FFh
.eh_frame:0000000000007A2B                 db 0FFh
.eh_frame:0000000000007A2C                 db  40h ; @
.eh_frame:0000000000007A2D                 db    0
.eh_frame:0000000000007A2E                 db    0
.eh_frame:0000000000007A2F                 db    0
.eh_frame:0000000000007A30                 db    0
.eh_frame:0000000000007A31                 db  44h ; D
.eh_frame:0000000000007A32                 db  0Eh
.eh_frame:0000000000007A33                 db  10h
.eh_frame:0000000000007A34                 db  83h
.eh_frame:0000000000007A35                 db    2
.eh_frame:0000000000007A36                 db  5Ah ; Z
.eh_frame:0000000000007A37                 db  0Ah
.eh_frame:0000000000007A38                 db  0Eh
.eh_frame:0000000000007A39                 db    8
.eh_frame:0000000000007A3A                 db  4Ah ; J
.eh_frame:0000000000007A3B                 db  0Bh
.eh_frame:0000000000007A3C                 db  53h ; S
.eh_frame:0000000000007A3D                 db  0Eh
.eh_frame:0000000000007A3E                 db    8
.eh_frame:0000000000007A3F                 db    0
.eh_frame:0000000000007A40                 db  2Ch ; ,
.eh_frame:0000000000007A41                 db    0
.eh_frame:0000000000007A42                 db    0
.eh_frame:0000000000007A43                 db    0
.eh_frame:0000000000007A44                 db  1Ch
.eh_frame:0000000000007A45                 db  0Bh
.eh_frame:0000000000007A46                 db    0
.eh_frame:0000000000007A47                 db    0
.eh_frame:0000000000007A48                 db 0A8h
.eh_frame:0000000000007A49                 db 0DEh
.eh_frame:0000000000007A4A                 db 0FFh
.eh_frame:0000000000007A4B                 db 0FFh
.eh_frame:0000000000007A4C                 db  57h ; W
.eh_frame:0000000000007A4D                 db    0
.eh_frame:0000000000007A4E                 db    0
.eh_frame:0000000000007A4F                 db    0
.eh_frame:0000000000007A50                 db    0
.eh_frame:0000000000007A51                 db  63h ; c
.eh_frame:0000000000007A52                 db  0Eh
.eh_frame:0000000000007A53                 db  10h
.eh_frame:0000000000007A54                 db  8Ch
.eh_frame:0000000000007A55                 db    2
.eh_frame:0000000000007A56                 db  41h ; A
.eh_frame:0000000000007A57                 db  0Eh
.eh_frame:0000000000007A58                 db  18h
.eh_frame:0000000000007A59                 db  86h
.eh_frame:0000000000007A5A                 db    3
.eh_frame:0000000000007A5B                 db  44h ; D
.eh_frame:0000000000007A5C                 db  0Eh
.eh_frame:0000000000007A5D                 db  20h
.eh_frame:0000000000007A5E                 db  83h
.eh_frame:0000000000007A5F                 db    4
.eh_frame:0000000000007A60                 db  6Bh ; k
.eh_frame:0000000000007A61                 db  0Eh
.eh_frame:0000000000007A62                 db  18h
.eh_frame:0000000000007A63                 db  41h ; A
.eh_frame:0000000000007A64                 db  0Eh
.eh_frame:0000000000007A65                 db  10h
.eh_frame:0000000000007A66                 db  42h ; B
.eh_frame:0000000000007A67                 db  0Eh
.eh_frame:0000000000007A68                 db    8
.eh_frame:0000000000007A69                 db    0
.eh_frame:0000000000007A6A                 db    0
.eh_frame:0000000000007A6B                 db    0
.eh_frame:0000000000007A6C                 db    0
.eh_frame:0000000000007A6D                 db    0
.eh_frame:0000000000007A6E                 db    0
.eh_frame:0000000000007A6F                 db    0
.eh_frame:0000000000007A70                 db  3Ch ; <
.eh_frame:0000000000007A71                 db    0
.eh_frame:0000000000007A72                 db    0
.eh_frame:0000000000007A73                 db    0
.eh_frame:0000000000007A74                 db  4Ch ; L
.eh_frame:0000000000007A75                 db  0Bh
.eh_frame:0000000000007A76                 db    0
.eh_frame:0000000000007A77                 db    0
.eh_frame:0000000000007A78                 db 0D8h
.eh_frame:0000000000007A79                 db 0DEh
.eh_frame:0000000000007A7A                 db 0FFh
.eh_frame:0000000000007A7B                 db 0FFh
.eh_frame:0000000000007A7C                 db  83h
.eh_frame:0000000000007A7D                 db    0
.eh_frame:0000000000007A7E                 db    0
.eh_frame:0000000000007A7F                 db    0
.eh_frame:0000000000007A80                 db    0
.eh_frame:0000000000007A81                 db  42h ; B
.eh_frame:0000000000007A82                 db  0Eh
.eh_frame:0000000000007A83                 db  10h
.eh_frame:0000000000007A84                 db  8Dh
.eh_frame:0000000000007A85                 db    2
.eh_frame:0000000000007A86                 db  42h ; B
.eh_frame:0000000000007A87                 db  0Eh
.eh_frame:0000000000007A88                 db  18h
.eh_frame:0000000000007A89                 db  8Ch
.eh_frame:0000000000007A8A                 db    3
.eh_frame:0000000000007A8B                 db  44h ; D
.eh_frame:0000000000007A8C                 db  0Eh
.eh_frame:0000000000007A8D                 db  20h
.eh_frame:0000000000007A8E                 db  86h
.eh_frame:0000000000007A8F                 db    4
.eh_frame:0000000000007A90                 db  41h ; A
.eh_frame:0000000000007A91                 db  0Eh
.eh_frame:0000000000007A92                 db  28h ; (
.eh_frame:0000000000007A93                 db  83h
.eh_frame:0000000000007A94                 db    5
.eh_frame:0000000000007A95                 db  4Ah ; J
.eh_frame:0000000000007A96                 db  0Eh
.eh_frame:0000000000007A97                 db  40h ; @
.eh_frame:0000000000007A98                 db    2
.eh_frame:0000000000007A99                 db  64h ; d
.eh_frame:0000000000007A9A                 db  0Ah
.eh_frame:0000000000007A9B                 db  0Eh
.eh_frame:0000000000007A9C                 db  28h ; (
.eh_frame:0000000000007A9D                 db  41h ; A
.eh_frame:0000000000007A9E                 db  0Eh
.eh_frame:0000000000007A9F                 db  20h
.eh_frame:0000000000007AA0                 db  41h ; A
.eh_frame:0000000000007AA1                 db  0Eh
.eh_frame:0000000000007AA2                 db  18h
.eh_frame:0000000000007AA3                 db  42h ; B
.eh_frame:0000000000007AA4                 db  0Eh
.eh_frame:0000000000007AA5                 db  10h
.eh_frame:0000000000007AA6                 db  42h ; B
.eh_frame:0000000000007AA7                 db  0Eh
.eh_frame:0000000000007AA8                 db    8
.eh_frame:0000000000007AA9                 db  41h ; A
.eh_frame:0000000000007AAA                 db  0Bh
.eh_frame:0000000000007AAB                 db    0
.eh_frame:0000000000007AAC                 db    0
.eh_frame:0000000000007AAD                 db    0
.eh_frame:0000000000007AAE                 db    0
.eh_frame:0000000000007AAF                 db    0
.eh_frame:0000000000007AB0                 db  4Ch ; L
.eh_frame:0000000000007AB1                 db    0
.eh_frame:0000000000007AB2                 db    0
.eh_frame:0000000000007AB3                 db    0
.eh_frame:0000000000007AB4                 db  8Ch
.eh_frame:0000000000007AB5                 db  0Bh
.eh_frame:0000000000007AB6                 db    0
.eh_frame:0000000000007AB7                 db    0
.eh_frame:0000000000007AB8                 db  28h ; (
.eh_frame:0000000000007AB9                 db 0DFh
.eh_frame:0000000000007ABA                 db 0FFh
.eh_frame:0000000000007ABB                 db 0FFh
.eh_frame:0000000000007ABC                 db  7Dh ; }
.eh_frame:0000000000007ABD                 db    0
.eh_frame:0000000000007ABE                 db    0
.eh_frame:0000000000007ABF                 db    0
.eh_frame:0000000000007AC0                 db    0
.eh_frame:0000000000007AC1                 db  42h ; B
.eh_frame:0000000000007AC2                 db  0Eh
.eh_frame:0000000000007AC3                 db  10h
.eh_frame:0000000000007AC4                 db  8Ch
.eh_frame:0000000000007AC5                 db    2
.eh_frame:0000000000007AC6                 db  41h ; A
.eh_frame:0000000000007AC7                 db  0Eh
.eh_frame:0000000000007AC8                 db  18h
.eh_frame:0000000000007AC9                 db  86h
.eh_frame:0000000000007ACA                 db    3
.eh_frame:0000000000007ACB                 db  44h ; D
.eh_frame:0000000000007ACC                 db  0Eh
.eh_frame:0000000000007ACD                 db  20h
.eh_frame:0000000000007ACE                 db  83h
.eh_frame:0000000000007ACF                 db    4
.eh_frame:0000000000007AD0                 db  69h ; i
.eh_frame:0000000000007AD1                 db  0Ah
.eh_frame:0000000000007AD2                 db  0Eh
.eh_frame:0000000000007AD3                 db  18h
.eh_frame:0000000000007AD4                 db  41h ; A
.eh_frame:0000000000007AD5                 db  0Eh
.eh_frame:0000000000007AD6                 db  10h
.eh_frame:0000000000007AD7                 db  42h ; B
.eh_frame:0000000000007AD8                 db  0Eh
.eh_frame:0000000000007AD9                 db    8
.eh_frame:0000000000007ADA                 db  45h ; E
.eh_frame:0000000000007ADB                 db  0Bh
.eh_frame:0000000000007ADC                 db  55h ; U
.eh_frame:0000000000007ADD                 db  0Ah
.eh_frame:0000000000007ADE                 db  0Eh
.eh_frame:0000000000007ADF                 db  18h
.eh_frame:0000000000007AE0                 db  41h ; A
.eh_frame:0000000000007AE1                 db  0Eh
.eh_frame:0000000000007AE2                 db  10h
.eh_frame:0000000000007AE3                 db  42h ; B
.eh_frame:0000000000007AE4                 db  0Eh
.eh_frame:0000000000007AE5                 db    8
.eh_frame:0000000000007AE6                 db  48h ; H
.eh_frame:0000000000007AE7                 db  0Bh
.eh_frame:0000000000007AE8                 db  41h ; A
.eh_frame:0000000000007AE9                 db  0Ah
.eh_frame:0000000000007AEA                 db  0Eh
.eh_frame:0000000000007AEB                 db  18h
.eh_frame:0000000000007AEC                 db  46h ; F
.eh_frame:0000000000007AED                 db  0Eh
.eh_frame:0000000000007AEE                 db  10h
.eh_frame:0000000000007AEF                 db  42h ; B
.eh_frame:0000000000007AF0                 db  0Eh
.eh_frame:0000000000007AF1                 db    8
.eh_frame:0000000000007AF2                 db  47h ; G
.eh_frame:0000000000007AF3                 db  0Bh
.eh_frame:0000000000007AF4                 db  49h ; I
.eh_frame:0000000000007AF5                 db  0Eh
.eh_frame:0000000000007AF6                 db  18h
.eh_frame:0000000000007AF7                 db  41h ; A
.eh_frame:0000000000007AF8                 db  0Eh
.eh_frame:0000000000007AF9                 db  10h
.eh_frame:0000000000007AFA                 db  42h ; B
.eh_frame:0000000000007AFB                 db  0Eh
.eh_frame:0000000000007AFC                 db    8
.eh_frame:0000000000007AFD                 db    0
.eh_frame:0000000000007AFE                 db    0
.eh_frame:0000000000007AFF                 db    0
.eh_frame:0000000000007B00                 db  1Ch
.eh_frame:0000000000007B01                 db    0
.eh_frame:0000000000007B02                 db    0
.eh_frame:0000000000007B03                 db    0
.eh_frame:0000000000007B04                 db 0DCh
.eh_frame:0000000000007B05                 db  0Bh
.eh_frame:0000000000007B06                 db    0
.eh_frame:0000000000007B07                 db    0
.eh_frame:0000000000007B08                 db  58h ; X
.eh_frame:0000000000007B09                 db 0DFh
.eh_frame:0000000000007B0A                 db 0FFh
.eh_frame:0000000000007B0B                 db 0FFh
.eh_frame:0000000000007B0C                 db  60h ; `
.eh_frame:0000000000007B0D                 db    0
.eh_frame:0000000000007B0E                 db    0
.eh_frame:0000000000007B0F                 db    0
.eh_frame:0000000000007B10                 db    0
.eh_frame:0000000000007B11                 db  44h ; D
.eh_frame:0000000000007B12                 db  0Eh
.eh_frame:0000000000007B13                 db  10h
.eh_frame:0000000000007B14                 db  75h ; u
.eh_frame:0000000000007B15                 db  0Ah
.eh_frame:0000000000007B16                 db  0Eh
.eh_frame:0000000000007B17                 db    8
.eh_frame:0000000000007B18                 db  47h ; G
.eh_frame:0000000000007B19                 db  0Bh
.eh_frame:0000000000007B1A                 db  5Fh ; _
.eh_frame:0000000000007B1B                 db  0Eh
.eh_frame:0000000000007B1C                 db    8
.eh_frame:0000000000007B1D                 db    0
.eh_frame:0000000000007B1E                 db    0
.eh_frame:0000000000007B1F                 db    0
.eh_frame:0000000000007B20                 db  1Ch
.eh_frame:0000000000007B21                 db    0
.eh_frame:0000000000007B22                 db    0
.eh_frame:0000000000007B23                 db    0
.eh_frame:0000000000007B24                 db 0FCh
.eh_frame:0000000000007B25                 db  0Bh
.eh_frame:0000000000007B26                 db    0
.eh_frame:0000000000007B27                 db    0
.eh_frame:0000000000007B28                 db  98h
.eh_frame:0000000000007B29                 db 0DFh
.eh_frame:0000000000007B2A                 db 0FFh
.eh_frame:0000000000007B2B                 db 0FFh
.eh_frame:0000000000007B2C                 db  3Ch ; <
.eh_frame:0000000000007B2D                 db    0
.eh_frame:0000000000007B2E                 db    0
.eh_frame:0000000000007B2F                 db    0
.eh_frame:0000000000007B30                 db    0
.eh_frame:0000000000007B31                 db  44h ; D
.eh_frame:0000000000007B32                 db  0Eh
.eh_frame:0000000000007B33                 db  10h
.eh_frame:0000000000007B34                 db  61h ; a
.eh_frame:0000000000007B35                 db  0Ah
.eh_frame:0000000000007B36                 db  0Eh
.eh_frame:0000000000007B37                 db    8
.eh_frame:0000000000007B38                 db  4Bh ; K
.eh_frame:0000000000007B39                 db  0Bh
.eh_frame:0000000000007B3A                 db  4Bh ; K
.eh_frame:0000000000007B3B                 db  0Eh
.eh_frame:0000000000007B3C                 db    8
.eh_frame:0000000000007B3D                 db    0
.eh_frame:0000000000007B3E                 db    0
.eh_frame:0000000000007B3F                 db    0
.eh_frame:0000000000007B40                 db  44h ; D
.eh_frame:0000000000007B41                 db    0
.eh_frame:0000000000007B42                 db    0
.eh_frame:0000000000007B43                 db    0
.eh_frame:0000000000007B44                 db  1Ch
.eh_frame:0000000000007B45                 db  0Ch
.eh_frame:0000000000007B46                 db    0
.eh_frame:0000000000007B47                 db    0
.eh_frame:0000000000007B48                 db 0B8h
.eh_frame:0000000000007B49                 db 0DFh
.eh_frame:0000000000007B4A                 db 0FFh
.eh_frame:0000000000007B4B                 db 0FFh
.eh_frame:0000000000007B4C                 db  65h ; e
.eh_frame:0000000000007B4D                 db    0
.eh_frame:0000000000007B4E                 db    0
.eh_frame:0000000000007B4F                 db    0
.eh_frame:0000000000007B50                 db    0
.eh_frame:0000000000007B51                 db  42h ; B
.eh_frame:0000000000007B52                 db  0Eh
.eh_frame:0000000000007B53                 db  10h
.eh_frame:0000000000007B54                 db  8Fh
.eh_frame:0000000000007B55                 db    2
.eh_frame:0000000000007B56                 db  42h ; B
.eh_frame:0000000000007B57                 db  0Eh
.eh_frame:0000000000007B58                 db  18h
.eh_frame:0000000000007B59                 db  8Eh
.eh_frame:0000000000007B5A                 db    3
.eh_frame:0000000000007B5B                 db  45h ; E
.eh_frame:0000000000007B5C                 db  0Eh
.eh_frame:0000000000007B5D                 db  20h
.eh_frame:0000000000007B5E                 db  8Dh
.eh_frame:0000000000007B5F                 db    4
.eh_frame:0000000000007B60                 db  42h ; B
.eh_frame:0000000000007B61                 db  0Eh
.eh_frame:0000000000007B62                 db  28h ; (
.eh_frame:0000000000007B63                 db  8Ch
.eh_frame:0000000000007B64                 db    5
.eh_frame:0000000000007B65                 db  48h ; H
.eh_frame:0000000000007B66                 db  0Eh
.eh_frame:0000000000007B67                 db  30h ; 0
.eh_frame:0000000000007B68                 db  86h
.eh_frame:0000000000007B69                 db    6
.eh_frame:0000000000007B6A                 db  48h ; H
.eh_frame:0000000000007B6B                 db  0Eh
.eh_frame:0000000000007B6C                 db  38h ; 8
.eh_frame:0000000000007B6D                 db  83h
.eh_frame:0000000000007B6E                 db    7
.eh_frame:0000000000007B6F                 db  4Dh ; M
.eh_frame:0000000000007B70                 db  0Eh
.eh_frame:0000000000007B71                 db  40h ; @
.eh_frame:0000000000007B72                 db  72h ; r
.eh_frame:0000000000007B73                 db  0Eh
.eh_frame:0000000000007B74                 db  38h ; 8
.eh_frame:0000000000007B75                 db  41h ; A
.eh_frame:0000000000007B76                 db  0Eh
.eh_frame:0000000000007B77                 db  30h ; 0
.eh_frame:0000000000007B78                 db  41h ; A
.eh_frame:0000000000007B79                 db  0Eh
.eh_frame:0000000000007B7A                 db  28h ; (
.eh_frame:0000000000007B7B                 db  42h ; B
.eh_frame:0000000000007B7C                 db  0Eh
.eh_frame:0000000000007B7D                 db  20h
.eh_frame:0000000000007B7E                 db  42h ; B
.eh_frame:0000000000007B7F                 db  0Eh
.eh_frame:0000000000007B80                 db  18h
.eh_frame:0000000000007B81                 db  42h ; B
.eh_frame:0000000000007B82                 db  0Eh
.eh_frame:0000000000007B83                 db  10h
.eh_frame:0000000000007B84                 db  42h ; B
.eh_frame:0000000000007B85                 db  0Eh
.eh_frame:0000000000007B86                 db    8
.eh_frame:0000000000007B87                 db    0
.eh_frame:0000000000007B88                 db  14h
.eh_frame:0000000000007B89                 db    0
.eh_frame:0000000000007B8A                 db    0
.eh_frame:0000000000007B8B                 db    0
.eh_frame:0000000000007B8C                 db  64h ; d
.eh_frame:0000000000007B8D                 db  0Ch
.eh_frame:0000000000007B8E                 db    0
.eh_frame:0000000000007B8F                 db    0
.eh_frame:0000000000007B90                 db 0E0h
.eh_frame:0000000000007B91                 db 0DFh
.eh_frame:0000000000007B92                 db 0FFh
.eh_frame:0000000000007B93                 db 0FFh
.eh_frame:0000000000007B94                 db    2
.eh_frame:0000000000007B95                 db    0
.eh_frame:0000000000007B96                 db    0
.eh_frame:0000000000007B97                 db    0
.eh_frame:0000000000007B98                 db    0
.eh_frame:0000000000007B99                 db    0
.eh_frame:0000000000007B9A                 db    0
.eh_frame:0000000000007B9B                 db    0
.eh_frame:0000000000007B9C                 db    0
.eh_frame:0000000000007B9D                 db    0
.eh_frame:0000000000007B9E                 db    0
.eh_frame:0000000000007B9F                 db    0
.eh_frame:0000000000007BA0                 db  10h
.eh_frame:0000000000007BA1                 db    0
.eh_frame:0000000000007BA2                 db    0
.eh_frame:0000000000007BA3                 db    0
.eh_frame:0000000000007BA4                 db  7Ch ; |
.eh_frame:0000000000007BA5                 db  0Ch
.eh_frame:0000000000007BA6                 db    0
.eh_frame:0000000000007BA7                 db    0
.eh_frame:0000000000007BA8                 db 0D8h
.eh_frame:0000000000007BA9                 db 0DFh
.eh_frame:0000000000007BAA                 db 0FFh
.eh_frame:0000000000007BAB                 db 0FFh
.eh_frame:0000000000007BAC                 db  0Eh
.eh_frame:0000000000007BAD                 db    0
.eh_frame:0000000000007BAE                 db    0
.eh_frame:0000000000007BAF                 db    0
.eh_frame:0000000000007BB0                 db    0
.eh_frame:0000000000007BB1                 db    0
.eh_frame:0000000000007BB2                 db    0
.eh_frame:0000000000007BB3                 db    0
.eh_frame:0000000000007BB4 __FRAME_END__   db    0
.eh_frame:0000000000007BB5                 db    0
.eh_frame:0000000000007BB6                 db    0
.eh_frame:0000000000007BB7                 db    0
.eh_frame:0000000000007BB7 _eh_frame       ends
.eh_frame:0000000000007BB7
.init_array:0000000000208B10 ; ELF Initialization Function Table
.init_array:0000000000208B10 ; ===========================================================================
.init_array:0000000000208B10
.init_array:0000000000208B10 ; Segment type: Pure data
.init_array:0000000000208B10 ; Segment permissions: Read/Write
.init_array:0000000000208B10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000208B10                 assume cs:_init_array
.init_array:0000000000208B10                 ;org 208B10h
.init_array:0000000000208B10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000208B10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000208B10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000208B10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000208B10
.fini_array:0000000000208B18 ; ELF Termination Function Table
.fini_array:0000000000208B18 ; ===========================================================================
.fini_array:0000000000208B18
.fini_array:0000000000208B18 ; Segment type: Pure data
.fini_array:0000000000208B18 ; Segment permissions: Read/Write
.fini_array:0000000000208B18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000208B18                 assume cs:_fini_array
.fini_array:0000000000208B18                 ;org 208B18h
.fini_array:0000000000208B18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000208B18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000208B18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000208B18
.data.rel.ro:0000000000208B20 ; ===========================================================================
.data.rel.ro:0000000000208B20
.data.rel.ro:0000000000208B20 ; Segment type: Pure data
.data.rel.ro:0000000000208B20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000208B20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000208B20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000208B20                 ;org 208B20h
.data.rel.ro:0000000000208B20 ; struct option long_options
.data.rel.ro:0000000000208B20 long_options    dq offset aDecode       ; name
.data.rel.ro:0000000000208B20                                         ; DATA XREF: main:loc_1874↑o
.data.rel.ro:0000000000208B20                 dd 0                    ; has_arg ; "decode"
.data.rel.ro:0000000000208B20                 db 4 dup(0)
.data.rel.ro:0000000000208B20                 dq 0                    ; flag
.data.rel.ro:0000000000208B20                 dd 64h                  ; val
.data.rel.ro:0000000000208B20                 db 4 dup(0)
.data.rel.ro:0000000000208B40                 dq offset aWrap         ; "wrap"
.data.rel.ro:0000000000208B48                 db    1
.data.rel.ro:0000000000208B49                 db    0
.data.rel.ro:0000000000208B4A                 db    0
.data.rel.ro:0000000000208B4B                 db    0
.data.rel.ro:0000000000208B4C                 db    0
.data.rel.ro:0000000000208B4D                 db    0
.data.rel.ro:0000000000208B4E                 db    0
.data.rel.ro:0000000000208B4F                 db    0
.data.rel.ro:0000000000208B50                 db    0
.data.rel.ro:0000000000208B51                 db    0
.data.rel.ro:0000000000208B52                 db    0
.data.rel.ro:0000000000208B53                 db    0
.data.rel.ro:0000000000208B54                 db    0
.data.rel.ro:0000000000208B55                 db    0
.data.rel.ro:0000000000208B56                 db    0
.data.rel.ro:0000000000208B57                 db    0
.data.rel.ro:0000000000208B58                 db  77h ; w
.data.rel.ro:0000000000208B59                 db    0
.data.rel.ro:0000000000208B5A                 db    0
.data.rel.ro:0000000000208B5B                 db    0
.data.rel.ro:0000000000208B5C                 db    0
.data.rel.ro:0000000000208B5D                 db    0
.data.rel.ro:0000000000208B5E                 db    0
.data.rel.ro:0000000000208B5F                 db    0
.data.rel.ro:0000000000208B60                 dq offset aIgnoreGarbage ; "ignore-garbage"
.data.rel.ro:0000000000208B68                 db    0
.data.rel.ro:0000000000208B69                 db    0
.data.rel.ro:0000000000208B6A                 db    0
.data.rel.ro:0000000000208B6B                 db    0
.data.rel.ro:0000000000208B6C                 db    0
.data.rel.ro:0000000000208B6D                 db    0
.data.rel.ro:0000000000208B6E                 db    0
.data.rel.ro:0000000000208B6F                 db    0
.data.rel.ro:0000000000208B70                 db    0
.data.rel.ro:0000000000208B71                 db    0
.data.rel.ro:0000000000208B72                 db    0
.data.rel.ro:0000000000208B73                 db    0
.data.rel.ro:0000000000208B74                 db    0
.data.rel.ro:0000000000208B75                 db    0
.data.rel.ro:0000000000208B76                 db    0
.data.rel.ro:0000000000208B77                 db    0
.data.rel.ro:0000000000208B78                 db  69h ; i
.data.rel.ro:0000000000208B79                 db    0
.data.rel.ro:0000000000208B7A                 db    0
.data.rel.ro:0000000000208B7B                 db    0
.data.rel.ro:0000000000208B7C                 db    0
.data.rel.ro:0000000000208B7D                 db    0
.data.rel.ro:0000000000208B7E                 db    0
.data.rel.ro:0000000000208B7F                 db    0
.data.rel.ro:0000000000208B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000208B88                 db    0
.data.rel.ro:0000000000208B89                 db    0
.data.rel.ro:0000000000208B8A                 db    0
.data.rel.ro:0000000000208B8B                 db    0
.data.rel.ro:0000000000208B8C                 db    0
.data.rel.ro:0000000000208B8D                 db    0
.data.rel.ro:0000000000208B8E                 db    0
.data.rel.ro:0000000000208B8F                 db    0
.data.rel.ro:0000000000208B90                 db    0
.data.rel.ro:0000000000208B91                 db    0
.data.rel.ro:0000000000208B92                 db    0
.data.rel.ro:0000000000208B93                 db    0
.data.rel.ro:0000000000208B94                 db    0
.data.rel.ro:0000000000208B95                 db    0
.data.rel.ro:0000000000208B96                 db    0
.data.rel.ro:0000000000208B97                 db    0
.data.rel.ro:0000000000208B98                 db  7Eh ; ~
.data.rel.ro:0000000000208B99                 db 0FFh
.data.rel.ro:0000000000208B9A                 db 0FFh
.data.rel.ro:0000000000208B9B                 db 0FFh
.data.rel.ro:0000000000208B9C                 db    0
.data.rel.ro:0000000000208B9D                 db    0
.data.rel.ro:0000000000208B9E                 db    0
.data.rel.ro:0000000000208B9F                 db    0
.data.rel.ro:0000000000208BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000208BA8                 db    0
.data.rel.ro:0000000000208BA9                 db    0
.data.rel.ro:0000000000208BAA                 db    0
.data.rel.ro:0000000000208BAB                 db    0
.data.rel.ro:0000000000208BAC                 db    0
.data.rel.ro:0000000000208BAD                 db    0
.data.rel.ro:0000000000208BAE                 db    0
.data.rel.ro:0000000000208BAF                 db    0
.data.rel.ro:0000000000208BB0                 db    0
.data.rel.ro:0000000000208BB1                 db    0
.data.rel.ro:0000000000208BB2                 db    0
.data.rel.ro:0000000000208BB3                 db    0
.data.rel.ro:0000000000208BB4                 db    0
.data.rel.ro:0000000000208BB5                 db    0
.data.rel.ro:0000000000208BB6                 db    0
.data.rel.ro:0000000000208BB7                 db    0
.data.rel.ro:0000000000208BB8                 db  7Dh ; }
.data.rel.ro:0000000000208BB9                 db 0FFh
.data.rel.ro:0000000000208BBA                 db 0FFh
.data.rel.ro:0000000000208BBB                 db 0FFh
.data.rel.ro:0000000000208BBC                 db    0
.data.rel.ro:0000000000208BBD                 db    0
.data.rel.ro:0000000000208BBE                 db    0
.data.rel.ro:0000000000208BBF                 db    0
.data.rel.ro:0000000000208BC0                 db    0
.data.rel.ro:0000000000208BC1                 db    0
.data.rel.ro:0000000000208BC2                 db    0
.data.rel.ro:0000000000208BC3                 db    0
.data.rel.ro:0000000000208BC4                 db    0
.data.rel.ro:0000000000208BC5                 db    0
.data.rel.ro:0000000000208BC6                 db    0
.data.rel.ro:0000000000208BC7                 db    0
.data.rel.ro:0000000000208BC8                 db    0
.data.rel.ro:0000000000208BC9                 db    0
.data.rel.ro:0000000000208BCA                 db    0
.data.rel.ro:0000000000208BCB                 db    0
.data.rel.ro:0000000000208BCC                 db    0
.data.rel.ro:0000000000208BCD                 db    0
.data.rel.ro:0000000000208BCE                 db    0
.data.rel.ro:0000000000208BCF                 db    0
.data.rel.ro:0000000000208BD0                 db    0
.data.rel.ro:0000000000208BD1                 db    0
.data.rel.ro:0000000000208BD2                 db    0
.data.rel.ro:0000000000208BD3                 db    0
.data.rel.ro:0000000000208BD4                 db    0
.data.rel.ro:0000000000208BD5                 db    0
.data.rel.ro:0000000000208BD6                 db    0
.data.rel.ro:0000000000208BD7                 db    0
.data.rel.ro:0000000000208BD8                 db    0
.data.rel.ro:0000000000208BD9                 db    0
.data.rel.ro:0000000000208BDA                 db    0
.data.rel.ro:0000000000208BDB                 db    0
.data.rel.ro:0000000000208BDC                 db    0
.data.rel.ro:0000000000208BDD                 db    0
.data.rel.ro:0000000000208BDE                 db    0
.data.rel.ro:0000000000208BDF                 db    0
.data.rel.ro:0000000000208BE0                 public quoting_style_args
.data.rel.ro:0000000000208BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000208BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000208BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000208BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000208C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000208C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000208C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000208C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000208C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000208C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000208C30                 db    0
.data.rel.ro:0000000000208C31                 db    0
.data.rel.ro:0000000000208C32                 db    0
.data.rel.ro:0000000000208C33                 db    0
.data.rel.ro:0000000000208C34                 db    0
.data.rel.ro:0000000000208C35                 db    0
.data.rel.ro:0000000000208C36                 db    0
.data.rel.ro:0000000000208C37                 db    0
.data.rel.ro:0000000000208C37 _data_rel_ro    ends
.data.rel.ro:0000000000208C37
LOAD:0000000000208C38 ; ELF Dynamic Information
LOAD:0000000000208C38 ; ===========================================================================
LOAD:0000000000208C38
LOAD:0000000000208C38 ; Segment type: Pure data
LOAD:0000000000208C38 ; Segment permissions: Read/Write
LOAD:0000000000208C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208C38                 assume cs:LOAD
LOAD:0000000000208C38                 ;org 208C38h
LOAD:0000000000208C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000208C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000208C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000208C48                 Elf64_Dyn <0Ch, 14A8h>  ; DT_INIT
LOAD:0000000000208C58                 Elf64_Dyn <0Dh, 5B90h>  ; DT_FINI
LOAD:0000000000208C68                 Elf64_Dyn <19h, 208B10h> ; DT_INIT_ARRAY
LOAD:0000000000208C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000208C88                 Elf64_Dyn <1Ah, 208B18h> ; DT_FINI_ARRAY
LOAD:0000000000208C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000208CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000208CB8                 Elf64_Dyn <5, 8F8h>     ; DT_STRTAB
LOAD:0000000000208CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000208CD8                 Elf64_Dyn <0Ah, 301h>   ; DT_STRSZ
LOAD:0000000000208CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000208CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000208D08                 Elf64_Dyn <3, 208E28h>  ; DT_PLTGOT
LOAD:0000000000208D18                 Elf64_Dyn <2, 4B0h>     ; DT_PLTRELSZ
LOAD:0000000000208D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000208D38                 Elf64_Dyn <17h, 0FF8h>  ; DT_JMPREL
LOAD:0000000000208D48                 Elf64_Dyn <7, 0CE0h>    ; DT_RELA
LOAD:0000000000208D58                 Elf64_Dyn <8, 318h>     ; DT_RELASZ
LOAD:0000000000208D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000208D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000208D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000208D98                 Elf64_Dyn <6FFFFFFEh, 0C80h> ; DT_VERNEED
LOAD:0000000000208DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000208DB8                 Elf64_Dyn <6FFFFFF0h, 0BFAh> ; DT_VERSYM
LOAD:0000000000208DC8                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:0000000000208DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000208DE8                 db    0
LOAD:0000000000208DE9                 db    0
LOAD:0000000000208DEA                 db    0
LOAD:0000000000208DEB                 db    0
LOAD:0000000000208DEC                 db    0
LOAD:0000000000208DED                 db    0
LOAD:0000000000208DEE                 db    0
LOAD:0000000000208DEF                 db    0
LOAD:0000000000208DF0                 db    0
LOAD:0000000000208DF1                 db    0
LOAD:0000000000208DF2                 db    0
LOAD:0000000000208DF3                 db    0
LOAD:0000000000208DF4                 db    0
LOAD:0000000000208DF5                 db    0
LOAD:0000000000208DF6                 db    0
LOAD:0000000000208DF7                 db    0
LOAD:0000000000208DF8                 db    0
LOAD:0000000000208DF9                 db    0
LOAD:0000000000208DFA                 db    0
LOAD:0000000000208DFB                 db    0
LOAD:0000000000208DFC                 db    0
LOAD:0000000000208DFD                 db    0
LOAD:0000000000208DFE                 db    0
LOAD:0000000000208DFF                 db    0
LOAD:0000000000208E00                 db    0
LOAD:0000000000208E01                 db    0
LOAD:0000000000208E02                 db    0
LOAD:0000000000208E03                 db    0
LOAD:0000000000208E04                 db    0
LOAD:0000000000208E05                 db    0
LOAD:0000000000208E06                 db    0
LOAD:0000000000208E07                 db    0
LOAD:0000000000208E08                 db    0
LOAD:0000000000208E09                 db    0
LOAD:0000000000208E0A                 db    0
LOAD:0000000000208E0B                 db    0
LOAD:0000000000208E0C                 db    0
LOAD:0000000000208E0D                 db    0
LOAD:0000000000208E0E                 db    0
LOAD:0000000000208E0F                 db    0
LOAD:0000000000208E10                 db    0
LOAD:0000000000208E11                 db    0
LOAD:0000000000208E12                 db    0
LOAD:0000000000208E13                 db    0
LOAD:0000000000208E14                 db    0
LOAD:0000000000208E15                 db    0
LOAD:0000000000208E16                 db    0
LOAD:0000000000208E17                 db    0
LOAD:0000000000208E18                 db    0
LOAD:0000000000208E19                 db    0
LOAD:0000000000208E1A                 db    0
LOAD:0000000000208E1B                 db    0
LOAD:0000000000208E1C                 db    0
LOAD:0000000000208E1D                 db    0
LOAD:0000000000208E1E                 db    0
LOAD:0000000000208E1F                 db    0
LOAD:0000000000208E20                 db    0
LOAD:0000000000208E21                 db    0
LOAD:0000000000208E22                 db    0
LOAD:0000000000208E23                 db    0
LOAD:0000000000208E24                 db    0
LOAD:0000000000208E25                 db    0
LOAD:0000000000208E26                 db    0
LOAD:0000000000208E27                 db    0
LOAD:0000000000208E27 LOAD            ends
LOAD:0000000000208E27
.got:0000000000208E28 ; ===========================================================================
.got:0000000000208E28
.got:0000000000208E28 ; Segment type: Pure data
.got:0000000000208E28 ; Segment permissions: Read/Write
.got:0000000000208E28 _got            segment qword public 'DATA' use64
.got:0000000000208E28                 assume cs:_got
.got:0000000000208E28                 ;org 208E28h
.got:0000000000208E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000208E30 qword_208E30    dq 0                    ; DATA XREF: sub_14C0↑r
.got:0000000000208E38 qword_208E38    dq 0                    ; DATA XREF: sub_14C0+6↑r
.got:0000000000208E40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000208E48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000208E50 __errno_location_ptr dq offset __errno_location
.got:0000000000208E50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000208E58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000208E60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000208E68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000208E70 fread_unlocked_ptr dq offset fread_unlocked
.got:0000000000208E70                                         ; DATA XREF: _fread_unlocked↑r
.got:0000000000208E78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000208E80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000208E88 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000208E88                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000208E90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000208E98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000208E98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000208EA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000208EA8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000208EA8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000208EB0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000208EB8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000208EC0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000208EC8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000208ED0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000208ED8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000208EE0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000208EE0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000208EE8 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000208EE8                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000208EF0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000208EF8 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000208EF8                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000208F00 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:0000000000208F08 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000208F10 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000208F10                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000208F18 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000208F20 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000208F28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000208F30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000208F38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000208F40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000208F48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000208F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000208F58 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000208F58                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000208F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000208F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000208F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000208F78 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000208F80 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000208F88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000208F90 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000208F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000208FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000208FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000208FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000208FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000208FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000208FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000208FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000208FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000208FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000208FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000208FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000208FD8                                         ; DATA XREF: start+24↑r
.got:0000000000208FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000208FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000208FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000208FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000208FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000208FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000208FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000208FF0 _got            ends
.got:0000000000208FF0
LOAD:0000000000208FF8 ; ===========================================================================
LOAD:0000000000208FF8
LOAD:0000000000208FF8 ; Segment type: Pure data
LOAD:0000000000208FF8 ; Segment permissions: Read/Write
LOAD:0000000000208FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208FF8                 assume cs:LOAD
LOAD:0000000000208FF8                 ;org 208FF8h
LOAD:0000000000208FF8                 align 20h
LOAD:0000000000208FF8 LOAD            ends
LOAD:0000000000208FF8
.data:0000000000209000 ; ===========================================================================
.data:0000000000209000
.data:0000000000209000 ; Segment type: Pure data
.data:0000000000209000 ; Segment permissions: Read/Write
.data:0000000000209000 _data           segment align_32 public 'DATA' use64
.data:0000000000209000                 assume cs:_data
.data:0000000000209000                 ;org 209000h
.data:0000000000209000                 public __data_start ; weak
.data:0000000000209000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000209000                                         ; data_start
.data:0000000000209001                 db    0
.data:0000000000209002                 db    0
.data:0000000000209003                 db    0
.data:0000000000209004                 db    0
.data:0000000000209005                 db    0
.data:0000000000209006                 db    0
.data:0000000000209007                 db    0
.data:0000000000209008                 public __dso_handle
.data:0000000000209008 ; void *_dso_handle
.data:0000000000209008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000209008                                         ; atexit↑r ...
.data:0000000000209010                 public Version
.data:0000000000209010 Version         dq offset a831          ; DATA XREF: main+122↑r
.data:0000000000209010                                         ; "8.31"
.data:0000000000209018                 public exit_failure
.data:0000000000209018 ; int exit_failure
.data:0000000000209018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2C92↑r
.data:0000000000209018                                         ; xalloc_die+17↑r
.data:000000000020901C                 align 20h
.data:0000000000209020                 public quote_quoting_options
.data:0000000000209020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000209020                                         ; quote_mem↑o ...
.data:0000000000209021                 db    0
.data:0000000000209022                 db    0
.data:0000000000209023                 db    0
.data:0000000000209024                 db    0
.data:0000000000209025                 db    0
.data:0000000000209026                 db    0
.data:0000000000209027                 db    0
.data:0000000000209028                 db    0
.data:0000000000209029                 db    0
.data:000000000020902A                 db    0
.data:000000000020902B                 db    0
.data:000000000020902C                 db    0
.data:000000000020902D                 db    0
.data:000000000020902E                 db    0
.data:000000000020902F                 db    0
.data:0000000000209030                 db    0
.data:0000000000209031                 db    0
.data:0000000000209032                 db    0
.data:0000000000209033                 db    0
.data:0000000000209034                 db    0
.data:0000000000209035                 db    0
.data:0000000000209036                 db    0
.data:0000000000209037                 db    0
.data:0000000000209038                 db    0
.data:0000000000209039                 db    0
.data:000000000020903A                 db    0
.data:000000000020903B                 db    0
.data:000000000020903C                 db    0
.data:000000000020903D                 db    0
.data:000000000020903E                 db    0
.data:000000000020903F                 db    0
.data:0000000000209040                 db    0
.data:0000000000209041                 db    0
.data:0000000000209042                 db    0
.data:0000000000209043                 db    0
.data:0000000000209044                 db    0
.data:0000000000209045                 db    0
.data:0000000000209046                 db    0
.data:0000000000209047                 db    0
.data:0000000000209048                 db    0
.data:0000000000209049                 db    0
.data:000000000020904A                 db    0
.data:000000000020904B                 db    0
.data:000000000020904C                 db    0
.data:000000000020904D                 db    0
.data:000000000020904E                 db    0
.data:000000000020904F                 db    0
.data:0000000000209050                 db    0
.data:0000000000209051                 db    0
.data:0000000000209052                 db    0
.data:0000000000209053                 db    0
.data:0000000000209054                 db    0
.data:0000000000209055                 db    0
.data:0000000000209056                 db    0
.data:0000000000209057                 db    0
.data:0000000000209058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000209058                                         ; quotearg_n_options:loc_414D↑r ...
.data:000000000020905C                 align 20h
.data:0000000000209060 ; void *slotvec
.data:0000000000209060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000209060                                         ; quotearg_n_options+76↑w ...
.data:0000000000209068                 align 10h
.data:0000000000209070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000209070                                         ; quotearg_n_options+187↑r ...
.data:0000000000209078 off_209078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000209078 _data           ends
.data:0000000000209078
.bss:0000000000209080 ; ===========================================================================
.bss:0000000000209080
.bss:0000000000209080 ; Segment type: Uninitialized
.bss:0000000000209080 ; Segment permissions: Read/Write
.bss:0000000000209080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000209080                 assume cs:_bss
.bss:0000000000209080                 ;org 209080h
.bss:0000000000209080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000209080                 public __bss_start ; weak
.bss:0000000000209080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000838↑o
.bss:0000000000209080                                         ; LOAD:0000000000000898↑o ...
.bss:0000000000209080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000209080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000209080                                         ; _edata
.bss:0000000000209080                                         ; Copy of shared data
.bss:0000000000209088                 public stdout@@GLIBC_2_2_5
.bss:0000000000209088 ; FILE *stdout
.bss:0000000000209088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000820↑o
.bss:0000000000209088                                         ; main+11B↑r ...
.bss:0000000000209088                                         ; Alternative name is 'stdout'
.bss:0000000000209088                                         ; Copy of shared data
.bss:0000000000209090                 public stdin@@GLIBC_2_2_5
.bss:0000000000209090 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000850↑o
.bss:0000000000209090                                         ; main:loc_19DB↑r
.bss:0000000000209090                                         ; Alternative name is 'stdin'
.bss:0000000000209090                                         ; Copy of shared data
.bss:0000000000209098                 public optind@@GLIBC_2_2_5
.bss:0000000000209098 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008C8↑o
.bss:0000000000209098                                         ; main:loc_194F↑r
.bss:0000000000209098                                         ; Alternative name is 'optind'
.bss:0000000000209098                                         ; Copy of shared data
.bss:000000000020909C                 align 20h
.bss:00000000002090A0                 public optarg@@GLIBC_2_2_5
.bss:00000000002090A0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008E0↑o
.bss:00000000002090A0                                         ; main+C1↑r
.bss:00000000002090A0                                         ; Alternative name is 'optarg'
.bss:00000000002090A0                                         ; Copy of shared data
.bss:00000000002090A8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002090A8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002090A8                                         ; DATA XREF: LOAD:0000000000000868↑o
.bss:00000000002090A8                                         ; LOAD:0000000000000880↑o ...
.bss:00000000002090A8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002090A8                                         ; Copy of shared data
.bss:00000000002090B0                 align 20h
.bss:00000000002090C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002090C0 ; FILE *stderr
.bss:00000000002090C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:00000000002090C0                                         ; usage+3D↑r ...
.bss:00000000002090C0                                         ; Alternative name is 'stderr'
.bss:00000000002090C0                                         ; Copy of shared data
.bss:00000000002090C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002090C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002090C9                 align 10h
.bss:00000000002090D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002090D0                                         ; close_stdout+1B↑r
.bss:00000000002090D1                 align 8
.bss:00000000002090D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002090D8                                         ; close_stdout+56↑r
.bss:00000000002090E0                 public program_name
.bss:00000000002090E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002090E0                                         ; set_program_name:loc_2D6D↑w
.bss:00000000002090E8                 align 20h
.bss:0000000000209100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000209100                                         ; quotearg_free+46↑o ...
.bss:0000000000209101                 db    ? ;
.bss:0000000000209102                 db    ? ;
.bss:0000000000209103                 db    ? ;
.bss:0000000000209104                 db    ? ;
.bss:0000000000209105                 db    ? ;
.bss:0000000000209106                 db    ? ;
.bss:0000000000209107                 db    ? ;
.bss:0000000000209108                 db    ? ;
.bss:0000000000209109                 db    ? ;
.bss:000000000020910A                 db    ? ;
.bss:000000000020910B                 db    ? ;
.bss:000000000020910C                 db    ? ;
.bss:000000000020910D                 db    ? ;
.bss:000000000020910E                 db    ? ;
.bss:000000000020910F                 db    ? ;
.bss:0000000000209110                 db    ? ;
.bss:0000000000209111                 db    ? ;
.bss:0000000000209112                 db    ? ;
.bss:0000000000209113                 db    ? ;
.bss:0000000000209114                 db    ? ;
.bss:0000000000209115                 db    ? ;
.bss:0000000000209116                 db    ? ;
.bss:0000000000209117                 db    ? ;
.bss:0000000000209118                 db    ? ;
.bss:0000000000209119                 db    ? ;
.bss:000000000020911A                 db    ? ;
.bss:000000000020911B                 db    ? ;
.bss:000000000020911C                 db    ? ;
.bss:000000000020911D                 db    ? ;
.bss:000000000020911E                 db    ? ;
.bss:000000000020911F                 db    ? ;
.bss:0000000000209120                 db    ? ;
.bss:0000000000209121                 db    ? ;
.bss:0000000000209122                 db    ? ;
.bss:0000000000209123                 db    ? ;
.bss:0000000000209124                 db    ? ;
.bss:0000000000209125                 db    ? ;
.bss:0000000000209126                 db    ? ;
.bss:0000000000209127                 db    ? ;
.bss:0000000000209128                 db    ? ;
.bss:0000000000209129                 db    ? ;
.bss:000000000020912A                 db    ? ;
.bss:000000000020912B                 db    ? ;
.bss:000000000020912C                 db    ? ;
.bss:000000000020912D                 db    ? ;
.bss:000000000020912E                 db    ? ;
.bss:000000000020912F                 db    ? ;
.bss:0000000000209130                 db    ? ;
.bss:0000000000209131                 db    ? ;
.bss:0000000000209132                 db    ? ;
.bss:0000000000209133                 db    ? ;
.bss:0000000000209134                 db    ? ;
.bss:0000000000209135                 db    ? ;
.bss:0000000000209136                 db    ? ;
.bss:0000000000209137                 db    ? ;
.bss:0000000000209138                 db    ? ;
.bss:0000000000209139                 db    ? ;
.bss:000000000020913A                 db    ? ;
.bss:000000000020913B                 db    ? ;
.bss:000000000020913C                 db    ? ;
.bss:000000000020913D                 db    ? ;
.bss:000000000020913E                 db    ? ;
.bss:000000000020913F                 db    ? ;
.bss:0000000000209140                 db    ? ;
.bss:0000000000209141                 db    ? ;
.bss:0000000000209142                 db    ? ;
.bss:0000000000209143                 db    ? ;
.bss:0000000000209144                 db    ? ;
.bss:0000000000209145                 db    ? ;
.bss:0000000000209146                 db    ? ;
.bss:0000000000209147                 db    ? ;
.bss:0000000000209148                 db    ? ;
.bss:0000000000209149                 db    ? ;
.bss:000000000020914A                 db    ? ;
.bss:000000000020914B                 db    ? ;
.bss:000000000020914C                 db    ? ;
.bss:000000000020914D                 db    ? ;
.bss:000000000020914E                 db    ? ;
.bss:000000000020914F                 db    ? ;
.bss:0000000000209150                 db    ? ;
.bss:0000000000209151                 db    ? ;
.bss:0000000000209152                 db    ? ;
.bss:0000000000209153                 db    ? ;
.bss:0000000000209154                 db    ? ;
.bss:0000000000209155                 db    ? ;
.bss:0000000000209156                 db    ? ;
.bss:0000000000209157                 db    ? ;
.bss:0000000000209158                 db    ? ;
.bss:0000000000209159                 db    ? ;
.bss:000000000020915A                 db    ? ;
.bss:000000000020915B                 db    ? ;
.bss:000000000020915C                 db    ? ;
.bss:000000000020915D                 db    ? ;
.bss:000000000020915E                 db    ? ;
.bss:000000000020915F                 db    ? ;
.bss:0000000000209160                 db    ? ;
.bss:0000000000209161                 db    ? ;
.bss:0000000000209162                 db    ? ;
.bss:0000000000209163                 db    ? ;
.bss:0000000000209164                 db    ? ;
.bss:0000000000209165                 db    ? ;
.bss:0000000000209166                 db    ? ;
.bss:0000000000209167                 db    ? ;
.bss:0000000000209168                 db    ? ;
.bss:0000000000209169                 db    ? ;
.bss:000000000020916A                 db    ? ;
.bss:000000000020916B                 db    ? ;
.bss:000000000020916C                 db    ? ;
.bss:000000000020916D                 db    ? ;
.bss:000000000020916E                 db    ? ;
.bss:000000000020916F                 db    ? ;
.bss:0000000000209170                 db    ? ;
.bss:0000000000209171                 db    ? ;
.bss:0000000000209172                 db    ? ;
.bss:0000000000209173                 db    ? ;
.bss:0000000000209174                 db    ? ;
.bss:0000000000209175                 db    ? ;
.bss:0000000000209176                 db    ? ;
.bss:0000000000209177                 db    ? ;
.bss:0000000000209178                 db    ? ;
.bss:0000000000209179                 db    ? ;
.bss:000000000020917A                 db    ? ;
.bss:000000000020917B                 db    ? ;
.bss:000000000020917C                 db    ? ;
.bss:000000000020917D                 db    ? ;
.bss:000000000020917E                 db    ? ;
.bss:000000000020917F                 db    ? ;
.bss:0000000000209180                 db    ? ;
.bss:0000000000209181                 db    ? ;
.bss:0000000000209182                 db    ? ;
.bss:0000000000209183                 db    ? ;
.bss:0000000000209184                 db    ? ;
.bss:0000000000209185                 db    ? ;
.bss:0000000000209186                 db    ? ;
.bss:0000000000209187                 db    ? ;
.bss:0000000000209188                 db    ? ;
.bss:0000000000209189                 db    ? ;
.bss:000000000020918A                 db    ? ;
.bss:000000000020918B                 db    ? ;
.bss:000000000020918C                 db    ? ;
.bss:000000000020918D                 db    ? ;
.bss:000000000020918E                 db    ? ;
.bss:000000000020918F                 db    ? ;
.bss:0000000000209190                 db    ? ;
.bss:0000000000209191                 db    ? ;
.bss:0000000000209192                 db    ? ;
.bss:0000000000209193                 db    ? ;
.bss:0000000000209194                 db    ? ;
.bss:0000000000209195                 db    ? ;
.bss:0000000000209196                 db    ? ;
.bss:0000000000209197                 db    ? ;
.bss:0000000000209198                 db    ? ;
.bss:0000000000209199                 db    ? ;
.bss:000000000020919A                 db    ? ;
.bss:000000000020919B                 db    ? ;
.bss:000000000020919C                 db    ? ;
.bss:000000000020919D                 db    ? ;
.bss:000000000020919E                 db    ? ;
.bss:000000000020919F                 db    ? ;
.bss:00000000002091A0                 db    ? ;
.bss:00000000002091A1                 db    ? ;
.bss:00000000002091A2                 db    ? ;
.bss:00000000002091A3                 db    ? ;
.bss:00000000002091A4                 db    ? ;
.bss:00000000002091A5                 db    ? ;
.bss:00000000002091A6                 db    ? ;
.bss:00000000002091A7                 db    ? ;
.bss:00000000002091A8                 db    ? ;
.bss:00000000002091A9                 db    ? ;
.bss:00000000002091AA                 db    ? ;
.bss:00000000002091AB                 db    ? ;
.bss:00000000002091AC                 db    ? ;
.bss:00000000002091AD                 db    ? ;
.bss:00000000002091AE                 db    ? ;
.bss:00000000002091AF                 db    ? ;
.bss:00000000002091B0                 db    ? ;
.bss:00000000002091B1                 db    ? ;
.bss:00000000002091B2                 db    ? ;
.bss:00000000002091B3                 db    ? ;
.bss:00000000002091B4                 db    ? ;
.bss:00000000002091B5                 db    ? ;
.bss:00000000002091B6                 db    ? ;
.bss:00000000002091B7                 db    ? ;
.bss:00000000002091B8                 db    ? ;
.bss:00000000002091B9                 db    ? ;
.bss:00000000002091BA                 db    ? ;
.bss:00000000002091BB                 db    ? ;
.bss:00000000002091BC                 db    ? ;
.bss:00000000002091BD                 db    ? ;
.bss:00000000002091BE                 db    ? ;
.bss:00000000002091BF                 db    ? ;
.bss:00000000002091C0                 db    ? ;
.bss:00000000002091C1                 db    ? ;
.bss:00000000002091C2                 db    ? ;
.bss:00000000002091C3                 db    ? ;
.bss:00000000002091C4                 db    ? ;
.bss:00000000002091C5                 db    ? ;
.bss:00000000002091C6                 db    ? ;
.bss:00000000002091C7                 db    ? ;
.bss:00000000002091C8                 db    ? ;
.bss:00000000002091C9                 db    ? ;
.bss:00000000002091CA                 db    ? ;
.bss:00000000002091CB                 db    ? ;
.bss:00000000002091CC                 db    ? ;
.bss:00000000002091CD                 db    ? ;
.bss:00000000002091CE                 db    ? ;
.bss:00000000002091CF                 db    ? ;
.bss:00000000002091D0                 db    ? ;
.bss:00000000002091D1                 db    ? ;
.bss:00000000002091D2                 db    ? ;
.bss:00000000002091D3                 db    ? ;
.bss:00000000002091D4                 db    ? ;
.bss:00000000002091D5                 db    ? ;
.bss:00000000002091D6                 db    ? ;
.bss:00000000002091D7                 db    ? ;
.bss:00000000002091D8                 db    ? ;
.bss:00000000002091D9                 db    ? ;
.bss:00000000002091DA                 db    ? ;
.bss:00000000002091DB                 db    ? ;
.bss:00000000002091DC                 db    ? ;
.bss:00000000002091DD                 db    ? ;
.bss:00000000002091DE                 db    ? ;
.bss:00000000002091DF                 db    ? ;
.bss:00000000002091E0                 db    ? ;
.bss:00000000002091E1                 db    ? ;
.bss:00000000002091E2                 db    ? ;
.bss:00000000002091E3                 db    ? ;
.bss:00000000002091E4                 db    ? ;
.bss:00000000002091E5                 db    ? ;
.bss:00000000002091E6                 db    ? ;
.bss:00000000002091E7                 db    ? ;
.bss:00000000002091E8                 db    ? ;
.bss:00000000002091E9                 db    ? ;
.bss:00000000002091EA                 db    ? ;
.bss:00000000002091EB                 db    ? ;
.bss:00000000002091EC                 db    ? ;
.bss:00000000002091ED                 db    ? ;
.bss:00000000002091EE                 db    ? ;
.bss:00000000002091EF                 db    ? ;
.bss:00000000002091F0                 db    ? ;
.bss:00000000002091F1                 db    ? ;
.bss:00000000002091F2                 db    ? ;
.bss:00000000002091F3                 db    ? ;
.bss:00000000002091F4                 db    ? ;
.bss:00000000002091F5                 db    ? ;
.bss:00000000002091F6                 db    ? ;
.bss:00000000002091F7                 db    ? ;
.bss:00000000002091F8                 db    ? ;
.bss:00000000002091F9                 db    ? ;
.bss:00000000002091FA                 db    ? ;
.bss:00000000002091FB                 db    ? ;
.bss:00000000002091FC                 db    ? ;
.bss:00000000002091FD                 db    ? ;
.bss:00000000002091FE                 db    ? ;
.bss:00000000002091FF                 db    ? ;
.bss:0000000000209200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000209200                                         ; get_quoting_style↑o ...
.bss:0000000000209210 xmmword_209210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000209210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000209220 xmmword_209220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000209220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000209230 qword_209230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000209230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000209230 _bss            ends
.bss:0000000000209230
.prgend:0000000000209238 ; ===========================================================================
.prgend:0000000000209238
.prgend:0000000000209238 ; Segment type: Zero-length
.prgend:0000000000209238 _prgend         segment byte public '' use64
.prgend:0000000000209238 _end            label byte
.prgend:0000000000209238 _prgend         ends
.prgend:0000000000209238
extern:0000000000209240 ; ===========================================================================
extern:0000000000209240
extern:0000000000209240 ; Segment type: Externs
extern:0000000000209240 ; extern
extern:0000000000209240 ; void free(void *ptr)
extern:0000000000209240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000209240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000209248 ; void __noreturn abort(void)
extern:0000000000209248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000209248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000209250 ; int *_errno_location(void)
extern:0000000000209250                 extrn __errno_location:near
extern:0000000000209250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000209250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000209258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000209258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000209258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000209260 ; void __noreturn exit(int status)
extern:0000000000209260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000209260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000209268 ; size_t _fpending(FILE *fp)
extern:0000000000209268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000209268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000209270 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000209270                 extrn fread_unlocked:near
extern:0000000000209270                                         ; CODE XREF: _fread_unlocked↑j
extern:0000000000209270                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:0000000000209278 ; char *textdomain(const char *domainname)
extern:0000000000209278                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000209278                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000209280 ; int fclose(FILE *stream)
extern:0000000000209280                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000209280                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000209288 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000209288                 extrn bindtextdomain:near
extern:0000000000209288                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000209288                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000209290 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000209290                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000209290                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000209298 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000209298                 extrn __ctype_get_mb_cur_max:near
extern:0000000000209298                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000209298                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002092A0 ; size_t strlen(const char *s)
extern:00000000002092A0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002092A0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002092A8                 extrn __stack_chk_fail:near
extern:00000000002092A8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002092A8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002092B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002092B0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002092B0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002092B8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002092B8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002092B8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002092C0 ; char *strchr(const char *s, int c)
extern:00000000002092C0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002092C0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002092C8 ; int _overflow(_IO_FILE *, int)
extern:00000000002092C8                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002092C8                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002092D0 ; char *strrchr(const char *s, int c)
extern:00000000002092D0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002092D0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002092D8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002092D8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002092D8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002092E0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002092E0                 extrn __assert_fail:near
extern:00000000002092E0                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002092E0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002092E8 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:00000000002092E8                 extrn __strtoul_internal:near
extern:00000000002092E8                                         ; CODE XREF: ___strtoul_internal↑j
extern:00000000002092E8                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:00000000002092F0 ; void *memset(void *s, int c, size_t n)
extern:00000000002092F0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002092F0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002092F8 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:00000000002092F8                 extrn posix_fadvise:near
extern:00000000002092F8                                         ; CODE XREF: _posix_fadvise↑j
extern:00000000002092F8                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000209300 ; void *memchr(const void *s, int c, size_t n)
extern:0000000000209300                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:0000000000209300                                         ; DATA XREF: .got:memchr_ptr↑o
extern:0000000000209308 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000209308                 extrn __libc_start_main:near
extern:0000000000209308                                         ; CODE XREF: start+24↑p
extern:0000000000209308                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000209310 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000209310                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000209310                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000209318 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000209318                 extrn fputs_unlocked:near
extern:0000000000209318                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000209318                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000209320 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000209320                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000209320                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000209328 ; int strcmp(const char *s1, const char *s2)
extern:0000000000209328                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000209328                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000209330 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000209330                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000209330                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000209338 ; int fileno(FILE *stream)
extern:0000000000209338                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000209338                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000209340 ; void *malloc(size_t size)
extern:0000000000209340                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000209340                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000209348 ; int fflush(FILE *stream)
extern:0000000000209348                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000209348                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000209350 ; char *nl_langinfo(nl_item item)
extern:0000000000209350                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000209350                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000209358 ; int _freading(FILE *fp)
extern:0000000000209358                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000209358                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000209360 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000209360                 extrn fwrite_unlocked:near
extern:0000000000209360                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000209360                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000209368 ; void *realloc(void *ptr, size_t size)
extern:0000000000209368                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000209368                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000209370 ; char *setlocale(int category, const char *locale)
extern:0000000000209370                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000209370                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000209378                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000209378                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000209380 ; void *memmove(void *dest, const void *src, size_t n)
extern:0000000000209380                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:0000000000209380                                         ; DATA XREF: .got:memmove_ptr↑o
extern:0000000000209388 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000209388                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000209388                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000209390 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000209390                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000209390                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000209398 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000209398                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000209398                                         ; DATA XREF: .got:fopen_ptr↑o
extern:00000000002093A0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002093A0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002093A0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002093A8 ; void __noreturn exit(int status)
extern:00000000002093A8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002093A8                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002093B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002093B0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002093B0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002093B8                 extrn __fprintf_chk:near
extern:00000000002093B8                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002093B8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002093C0 ; int mbsinit(const mbstate_t *ps)
extern:00000000002093C0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002093C0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002093C8 ; int iswprint(wint_t wc)
extern:00000000002093C8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002093C8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002093D0 ; int __fastcall __cxa_finalize(void *)
extern:00000000002093D0                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002093D0                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002093D0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002093D8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002093D8                 extrn __ctype_b_loc:near
extern:00000000002093D8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002093D8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002093E0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002093E0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002093E8                 extrn __gmon_start__:near ; weak
extern:00000000002093E8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002093E8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002093F0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002093F0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002093F0
extern:00000000002093F0
extern:00000000002093F0                 end start
